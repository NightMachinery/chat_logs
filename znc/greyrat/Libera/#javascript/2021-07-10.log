[00:00:05] *** Joins: wyclif (~wyclif@user/wyclif)
[00:00:54] <theskillwithin> I think if you have v3 license they at least give you discount on v4,  i forget tho
[00:03:21] <printForever> true
[00:05:05] *** Joins: welldonehowever (welldoneho@welldonehowever.oddprotocol.org)
[00:05:10] <Byteflux> ST3 is like my notepad replacement, that's about it. Can't bring myself to justify upgrading to a ST4 license since I already have JetBrains' All Products Pack + VSCode
[00:06:52] <qswz> how is webshitStorm doing?
[00:07:04] <theskillwithin> I love sublime text, once you have it all setup its really nice and fast.  but the VSCode took over the world and I eventually switched to vscode.
[00:07:11] <qswz> jk, it's a good IDE
[00:07:26] <silly_> people tend to feel proud when they can afford expensive stuff
[00:07:40] <silly_> geany is free and os too
[00:08:00] <Byteflux> Yeah ST is really fast, but seems VSCode has been impressively closing the gap
[00:08:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:08:24] <qswz> if geany can use tsc, it's intersting
[00:08:37] <silly_> idts
[00:08:46] * ashnur thinks neovim is good
[00:09:04] <ashnur> from a terminal preferably, not the gui version
[00:09:33] <l__q> how to import exported array buffer in js? I need to export and then import buffer, but imported buffer is not correct somehow, but it looks same as exported  https://codesandbox.io/s/react-sodium-plus-importexport-keys-jt5wx
[00:10:17] <qswz> silly_: I don't use typescript, but I use tsc for formatting
[00:10:35] <qswz> I just like the way it formats, and can't bear things like prettier
[00:11:28] *** Joins: Pacific__ (~arash@5.123.115.167)
[00:11:45] <qswz> ashnur: fix your typos
[00:11:48] <qswz> utiles/utils
[00:12:02] *** Quits: mertyildiran (~mertyildi@88.243.1.174) (Ping timeout: 255 seconds)
[00:12:09] <qswz> l__q: oops yiu
[00:12:20] <qswz> not ashnur, sorr
[00:12:23] <ashnur> =)
[00:12:30] <ashnur> i am like, ok, but where? :D
[00:12:48] <qswz> haha
[00:13:11] <stenno> i like how you mis-hilighted and got two typos in the suggestion to fix typos
[00:13:58] <l__q> qswz: but this is not the error :P
[00:15:44] <qswz> l__q: the error seems more about sodium
[00:15:50] <qswz> not your ByteArray thing
[00:16:39] <l__q> the ByteArray works fine, I have problem with import key
[00:16:59] *** Quits: Pacific__ (~arash@5.123.115.167) (Ping timeout: 255 seconds)
[00:17:38] <l__q> not rly sodium problem, imported object should same as exported
[00:19:36] *** Quits: epolanski (uid312403@id-312403.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[00:20:00] *** Quits: inom (~inom@176.59.102.225) (Quit: WeeChat 3.1)
[00:20:17] <qswz> do you want to export a function or an object?
[00:20:22] *** Joins: inom (~inom@176.59.102.225)
[00:20:58] <qswz> is there something better than a cold shower in hot summers?
[00:21:16] <stenno> a hot shower in the winter
[00:21:39] <qswz> hah, thought about it, but still prefer it
[00:21:40] <l__q> qswz: Im update code, show line 51
[00:23:30] <qswz> you can share link to the given line
[00:23:41] <l__q> qswz: how to make imported object looks like exported? :x
[00:23:54] <silly_> qswz, a/c
[00:24:46] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Quit: WeeChat 3.2)
[00:25:15] <qswz> l__q: where is the problem
[00:25:28] <l__q> line 54
[00:25:46] <l__q> bobSecret is not equel to imported_bobSecret
[00:26:05] <qswz> in JS {} is not equal {}
[00:26:44] <l__q> how to make imported_bobSecret looks like bobSecret?
[00:26:56] <qswz> 2 different values, even if they hold the same fields {x:1} !== {x:1}
[00:27:34] <l__q> But im use Object.is not ===
[00:27:48] <qswz> does the same
[00:27:54] <l__q> ok
[00:28:05] <l__q> and how to fix it?
[00:28:08] <qswz> only nuance of Object.is is for NaN
[00:29:12] <qswz> l__q: Object.entries
[00:29:28] <l__q> hmm, right, im try
[00:29:52] <qswz> I wrote this function recenrtly
[00:30:21] <qswz> const same = (a, b) => Object.keys({ ...a, ...b }).every(k => a?.[k] === b?.[k]);
[00:30:45] <qswz> n> const same = (a, b) => Object.keys({ ...a, ...b }).every(k => a?.[k] === b?.[k]); same({x:1}, {x:1})
[00:30:45] <jellobot> (okay) true
[00:31:07] <qswz> n> ({x:1} == {x:1})
[00:31:09] <jellobot> (okay) false
[00:31:24] <qswz> we need a Object.same
[00:31:38] <qswz> or we wait for Records
[00:32:12] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:34:45] <codingcampbell> n> (JSON.stringify({x:1}) === JSON.stringify({x:1}))
[00:34:46] <jellobot> (okay) true
[00:34:50] <codingcampbell> (not actual advice) :P
[00:36:41] <qswz> n> const o={}; o.o=o; JSON.stringify(o) === JSON.stringify(o)
[00:36:42] <jellobot> (fail) TypeError: Converting circular structure to JSON     --> starting at object with constructor 'Object'     --- property 'o' closes the circle
[00:36:47] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[00:37:05] *** Joins: wyclif (~wyclif@user/wyclif)
[00:37:12] <l__q> qswz: here is the problem https://transfer.sh/1Zj7iFj/Screenshot%202021-07-09%20at%2022.05.44.png
[00:37:24] <codingcampbell> (not actual advice AND you will get hit by key order)
[00:37:26] <codingcampbell> n> (JSON.stringify({x:1,y:1}) === JSON.stringify({y:1,x:1}))
[00:37:27] <jellobot> (okay) false
[00:37:42] <qswz> oh yea I thought abou ti
[00:38:03] <qswz> or also some toJSON overriding
[00:38:28] <qswz> l__q: yea and?
[00:38:44] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[00:38:50] <stenno> b> #{a: 3} === #{a: 3}
[00:38:50] <qswz> compare keyType and publicKey
[00:38:51] <jellobot> (fail) SyntaxError: Invalid or unexpected token
[00:38:58] <qswz> for buffer === won't do it
[00:39:19] <stenno> tuples and records waiting room
[00:39:41] *** Quits: RougeR (~rougex250@user/rouger) (Remote host closed the connection)
[00:39:49] <qswz> n> const a=new Unit8Array([1,2]);  a.map
[00:39:49] <jellobot> (fail) ReferenceError: Unit8Array is not defined
[00:39:57] <qswz> n> const a=new Uint8Array([1,2]);  a.map
[00:39:57] <jellobot> (okay) [Function: map]
[00:40:32] <qswz> n> const a=new Uint8Array([1,2]), b=new Uint8Array([1,2]);  a.every((_,i)=>a[i]===b[i])
[00:40:33] <jellobot> (okay) true
[00:40:57] <qswz> n> const a=new Uint8Array([1,2]), b=new Uint8Array([1,2]);  `${a}`
[00:40:57] <jellobot> (okay) '1,2'
[00:41:12] <l__q> I updated codesandbox, but still is my imported object different, as original
[00:41:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[00:42:04] <qswz> you want to have the same object value/reference?
[00:42:10] *** Quits: fweht (uid404746@id-404746.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[00:42:15] <qswz> idk then, check sodium docs
[00:42:36] <qswz> why does it matter?
[00:42:54] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[00:43:12] <l__q> qswz: I want the same objects in JS
[00:43:21] <qswz> as long as the buffer, keyType and publicKey are the same
[00:43:27] <qswz> l__q: why?
[00:43:30] *** Parts: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) ()
[00:43:40] <l__q> ?
[00:43:59] *** Quits: CiaoSen (~Jura@p200300c95722a400dbe4133b387f39b9.dip0.t-ipconnect.de) (Ping timeout: 255 seconds)
[00:44:20] <qswz> why do you need the same object? as long as we gave you a way to compare them
[00:44:50] <qswz> check tht same(importedSecret, exportedSecret) is true
[00:45:06] <l__q> is false
[00:45:20] <qswz> read what I said about buffer
[00:45:59] *** Joins: onosendi (~onosendi@user/onosendi)
[00:46:12] *** Quits: FightingFalcon (~sdasavcsg@user/fightingfalcon) ()
[00:46:56] *** Joins: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net)
[00:47:07] <qswz> const same = (a, b) => Object.keys({ ...a, ...b }).every(k => typeof a?.[k]=='object' ? same(a[k], b?.[k]) : a?.[k] === b?.[k]);
[00:48:16] <qswz> n> const same = (a, b) => Object.keys({ ...a, ...b }).every(k => typeof a?.[k]=='object' ? same(a[k], b?.[k]): a?.[k] === b?.[k]); same({x:1, y:new Uint8Array([1])}, {x:1, y:new Uint8Array([1])})
[00:48:17] <jellobot> (okay) true
[00:48:57] <qswz> n> const same = (a, b) => Object.keys({ ...a, ...b }).every(k => typeof a?.[k]=='object' ? same(a[k], b?.[k]): a?.[k] === b?.[k]); same({x:1, y:null}, {x:1, y:null})
[00:48:58] <jellobot> (okay) true
[00:49:06] <onosendi> `Uint8Array` - that's a new one for me.
[00:49:29] <qswz> it evolves into Uint16Array
[00:49:46] <qswz> then into Uint32Array
[00:50:09] <qswz> !mdn typed arrays
[00:50:10] <jellobot> qswz, JavaScript typed arrays - JavaScript typed arrays are array-like objects that provide a mechanism for reading and writing raw binary data in memory buffers. https://mdn.io/typed-arrays
[00:52:40] <qswz> n> const same = (a, b) => Object.keys({ ...a, ...b }).every(k => typeof a?.[k]=='object' ? same(a[k], b?.[k]): a?.[k] === b?.[k]); const o={};o.o=o; same(o,o)
[00:52:41] <jellobot> (fail) RangeError: Maximum call stack size exceeded
[00:52:45] <qswz> hah
[00:53:08] <qswz> well, not motivated t fix this
[00:53:38] <codingcampbell> OP can import lodash.isEqual if he wants to force the issue :P
[00:53:42] <codingcampbell> i enjoyed your golfing tho
[00:53:49] *** Joins: wyclif (~wyclif@user/wyclif)
[00:53:59] <qswz> n> const same = (a, b) => Object.keys({ ...a, ...b }).every(k => typeof a?.[k]=='object' ? a[k]===b?.[k]||same(a[k], b?.[k]): a?.[k] === b?.[k]); const o={};o.o=o; same(o,o)
[00:54:00] <jellobot> (okay) true
[00:54:07] *** Quits: printForever (~textual@185.236.201.210) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[00:54:11] <qswz> sure
[00:55:16] *** Joins: Crassus (~Crassus@user/crassus)
[00:57:10] *** Quits: noobly6 (~noobly@50.38.126.25) (Ping timeout: 246 seconds)
[00:57:27] <lmat> I'm doing some jest mocking. It's pretty wacko :-D  I need to mock an object that is used like this:    import web3 from 'web3'; const web = new web3('something'); const contract = new web.eth.Contract('stuff'); contract.methods.somethingElse().call();
[00:57:32] <lmat> I got this working.
[00:57:56] <lmat> https://paste.rs/6wb
[00:57:57] <qswz> I use sinon
[00:58:16] <qswz> sorry so, but others might know
[00:58:16] <lmat> The problem: I would like to be able to change that hard-coded "15" in the mock on a per-test-case basis.
[00:58:55] <qswz> in that case I'd using sinon.stub(obj, 'meth').callsFake(() => {..})
[00:59:06] <qswz> there should be somethng equiv in jest
[00:59:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:59:29] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[00:59:35] <lmat> qswz: Are you addressing my question? I have it working. The problem is making it work dynamically...
[01:00:12] <qswz> dynamically like what would vary?
[01:00:33] <lmat> qswz: The hard-coded "15".
[01:01:00] <qswz> put a let value=15; at the top of your tests scope
[01:01:13] <qswz> and call: () => { return Promise.resolve(value); },
[01:01:35] <qswz> and in each test you can set value to whatever you want
[01:01:48] <lmat> qswz: Makes sense, doesn't it? Are you familiar with jest hoisting? xD
[01:02:01] <qswz> no
[01:02:52] <lmat> This is a common (and big) problem https://stackoverflow.com/questions/48790927/
[01:03:07] <lmat> My special circumstance is that I'm importing a "default", so I'm not sure how to get the mock after having mocked.
[01:03:11] <qswz> I often do describe('...', function(){ let x, y; beforeEach(function(){ x=..; y=...;}); it('...', function(){ ..use x and y .. }); })
[01:03:23] *** Parts: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) ()
[01:04:15] <lmat> I think the general procedure is something like     import { whatever } from 'wherever'; jest.mock('wherever'); ... then later ... whatever.mockImplementation(...mock implementation...);
[01:04:30] <lmat> The problem is that I don't have a `whatever` to call `mockImplementation` on.
[01:05:06] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 272 seconds)
[01:05:37] <qswz> well, I'd put a variable for whatever, even if it's top scope of the file
[01:06:39] <qswz> but not sure I understand
[01:06:44] <lmat> qswz: If only it were so simple :-D
[01:07:48] *** Joins: printForever (~textual@185.236.201.210)
[01:08:31] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[01:08:38] *** Quits: noarb- (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[01:08:47] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[01:09:54] *** Joins: wyclif (~wyclif@user/wyclif)
[01:13:16] *** Quits: Intelo (~Intelo@88.246.74.132) (Ping timeout: 246 seconds)
[01:14:11] *** Joins: noobly (~noobly@50.38.126.25)
[01:14:58] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[01:15:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[01:18:14] *** Joins: noarb (~noarb@user/noarb)
[01:18:24] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[01:20:49] <lmat> import web3 from 'web3';  jest.mock('web3', () => 'heyhey'); console.log("web3 is ", web3);  should show "heyhey" as web3, right? :scream:
[01:24:24] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[01:24:33] *** Quits: kona_ (~kona@d-162-223-183-61.pae.cpe.atlanticbb.net) (Quit: Leaving)
[01:24:39] <qswz> lmat: nah, same issue with sinon, you can't mock default exports
[01:24:49] *** Joins: kona_ (~kona@165.231.210.188)
[01:25:33] <qswz> for example a lib like node-fetch is not possble to mock, we make a wrappedFetch.js that does module.exports={fetch}; to allow stubbing this
[01:26:17] *** Quits: kona_ (~kona@165.231.210.188) (Remote host closed the connection)
[01:26:38] <AlbertLast> for fetch mocking, is normaly not a proxy used?
[01:26:40] *** Joins: kona_ (~kona@165.231.210.188)
[01:26:52] <qswz> you could use nock yes
[01:26:57] <qswz> !npm nock
[01:26:58] <jellobot> qswz, nock@13.1.1: HTTP server mocking and expectations library for Node.js - https://www.npmjs.com/package/nock
[01:27:07] *** Quits: kona_ (~kona@165.231.210.188) (Remote host closed the connection)
[01:27:08] <qswz> but you can simplu stub it like I described
[01:27:13] <qswz> simply*
[01:27:13] *** Joins: wyclif (~wyclif@user/wyclif)
[01:27:22] *** Joins: kona_ (~kona@104.160.25.76)
[01:28:23] <wroathe> If you haven't already written end to end tests with something like puppeteer or playwright you should prioritize that over unit tests on the UI.
[01:28:28] <qswz> we use const wrappedFetch = require('./lib/wrappedFetch'); and stub it in tests with sinon(wrappedFetch', 'fetch').resolves(...)
[01:28:33] <wroathe> Your team will get waaaaaay more bang for your buck
[01:28:54] *** Quits: kona_ (~kona@104.160.25.76) (Remote host closed the connection)
[01:29:22] <qswz> we don't really have UI tests haha, all wha I said is for backendnodejs
[01:29:41] *** Joins: kona_ (~kona@104.160.25.68)
[01:29:46] <wroathe> Ah
[01:30:04] *** Joins: jazzy (~jaziz@2600:380:8653:59ba:7d3d:6a42:3e7f:d235)
[01:30:12] <qswz> I did some puppeteer PR, some day will be merged
[01:31:04] <qswz> sometimes it's easier to have some beta testers among your customers
[01:31:16] <wroathe> I've got a PR for istanbul that hasn't been responded to yet, and fixes a pretty shameful bug
[01:31:28] <wroathe> I think that project might be dead
[01:31:52] *** Quits: kona_ (~kona@104.160.25.68) (Remote host closed the connection)
[01:31:53] <qswz> code coverage thing
[01:32:19] <qswz> jest has intgrated code coverage
[01:32:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[01:32:49] *** Joins: kona_ (~kona@196.196.232.4)
[01:33:58] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[01:34:22] *** Quits: kona_ (~kona@196.196.232.4) (Remote host closed the connection)
[01:34:45] *** Joins: kona_ (~kona@165.231.210.188)
[01:36:21] *** Quits: kona_ (~kona@165.231.210.188) (Remote host closed the connection)
[01:38:17] <lmat> qswz: I found that "heyhey" is shown. Default exports are mockable with jest.
[01:38:59] <lmat> The problem I'm having is getting the mock back out to set its implementation :-/
[01:39:15] *** Joins: mertyildiran (~mertyildi@88.243.1.174)
[01:39:41] <Donitz> are nested load events not called?
[01:39:50] <Donitz> I thought load was called immidietely when called after load
[01:39:59] <Donitz> but load inside load doesn't work
[01:40:42] <l__q> qswz: It works now, thanks for you help :) Working code: https://codesandbox.io/s/react-sodium-plus-importexport-keys-jt5wx
[01:40:49] *** Joins: N4buc0 (~N4buc0@2001:1284:f016:d2fe:13b4:109d:11e2:40df)
[01:40:50] *** Joins: optimist (~optimist@122.163.159.222)
[01:41:31] <entuland> Donitz, how are you attaching the listeners?
[01:41:50] <Donitz> window.addEventListener('load', () => {
[01:42:10] <entuland> how many times are you doing that, and for what purpose?
[01:42:21] <Donitz> just putting some test code inside some other test code
[01:42:22] <qswz> l__q: cool, yw
[01:42:23] <entuland> once you're in that load handler, you know it's loaded and you can do all of what you need
[01:42:23] <Donitz> and noticed it didn't work
[01:42:54] <Donitz> seems like a bug afaik
[01:43:02] <qswz> Donitz: bad idea to nest event lsiteners
[01:43:26] <entuland> I don't see the purpose of attaching the same listener multiple times, even worse doing that _after_ the event has been triggered
[01:44:04] *** Joins: kona_ (~kona@196.247.24.12)
[01:44:41] <Donitz> as I said, seems like it should be considered a bug
[01:44:50] <Donitz> if you are using third-party code which uses load
[01:44:53] <Donitz> and you happen to use it as well
[01:45:16] <Donitz> how come codepen doesn't have this issue
[01:45:16] <lmat> qswz: Dude, got it.
[01:45:25] <Donitz> I've used the load event inside codepen
[01:45:29] *** Joins: wyclif (~wyclif@user/wyclif)
[01:45:59] *** Quits: kona_ (~kona@196.247.24.12) (Remote host closed the connection)
[01:46:01] <entuland> the third party code would be attaching the handler on its own, not inside of your own handler
[01:46:33] *** Joins: kona_ (~kona@104.160.25.68)
[01:46:40] <lmat> Here's the trick.    import web3 from 'web3'; let mockValue = 1;  jest.mock('web3', () => { return jest.fn().mockImplementation(.......); });  I return a jest.fn() (not an object) because the export is a default export, and it's a function that's being exported.
[01:46:47] <austincheney_> wroathe, I haven't figured out how to make Log.entryAdded event work.  It must be triggered by some user facing event to report test execution to the terminal and I have not figured out how to make the user environment communicate out to the CDP environment
[01:47:14] <wroathe> austincheney_: Hrm. That's odd.
[01:47:21] <lmat> qswz: Inside the .....   I have eventually have   call: () => {return Promise.resolve(mockValue); },   This is the critical part. If I had   call: mockValue, that's no good.
[01:47:51] <wroathe> austincheney_: Did you call https://chromedevtools.github.io/devtools-protocol/tot/Log/#method-enable?
[01:48:01] *** Quits: kona_ (~kona@104.160.25.68) (Remote host closed the connection)
[01:48:08] <austincheney_> I did.  I am doing that from my Node script
[01:48:09] <lmat> The problem is that jest.mock gets HOISTED up to the top of its enclosing block where "mockValue" DOESN'T EXIST! In this case, I'm creating an anonymous function that refers to an as-yet non-existent variable which is fine. Later, when the function is called, the variable will exist and all is happy.
[01:48:17] *** austincheney_ is now known as austincheney
[01:48:24] *** Joins: kona_ (~kona@165.231.210.156)
[01:49:41] *** Quits: kona_ (~kona@165.231.210.156) (Remote host closed the connection)
[01:50:09] *** Joins: kona_ (~kona@196.196.192.52)
[01:50:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:51:51] <austincheney> wroathe, I will put my code up to github later tonight if you want a starting point to play around with this without having to build your own script to run
[01:53:05] *** Quits: kona_ (~kona@196.196.192.52) (Remote host closed the connection)
[01:55:08] *** Quits: KevinX (~KevinX@94.140.11.95) (Ping timeout: 272 seconds)
[01:56:32] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[01:57:11] *** Parts: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) ()
[01:57:52] *** Joins: KevinX (~KevinX@94.140.11.98)
[02:02:18] *** Quits: z1haze (~z1haze@user/z1haze) (Remote host closed the connection)
[02:02:41] *** Joins: z1haze (~z1haze@user/z1haze)
[02:03:25] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:97f:1306:90fb:438d) (Ping timeout: 246 seconds)
[02:03:56] *** Joins: wyclif (~wyclif@user/wyclif)
[02:05:02] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.1)
[02:08:26] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[02:09:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:11:27] *** Joins: Celeo (~Celeo@user/celeo)
[02:11:46] <wroathe> austincheney: So I can get it to log errors, warnings, and verbose messages, but there seems to be something broken about the "info" level messages, which correspond to console.log statements
[02:11:50] <wroathe> austincheney: With that API
[02:13:30] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[02:14:15] <wroathe> austincheney: I suspect perusing https://bugs.chromium.org/p/chromium/issues/list would turn up some useful discussion on why it's not working for log-level messages.
[02:16:55] *** Joins: matsaman (~matsaman@user/matsaman)
[02:18:32] <wroathe> austincheney: There's an alternate API, https://chromedevtools.github.io/devtools-protocol/tot/Runtime/#event-consoleAPICalled, that looks like it could function as a stop-gap until they fix that
[02:19:59] *** Joins: wyclif (~wyclif@user/wyclif)
[02:21:31] *** Quits: noobly (~noobly@50.38.126.25) (Ping timeout: 246 seconds)
[02:24:36] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Read error: Connection reset by peer)
[02:25:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:26:34] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 240 seconds)
[02:27:02] *** Joins: Praise (~Fat@user/praise)
[02:27:23] *** Joins: wyclif (~wyclif@user/wyclif)
[02:30:01] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:31] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:31:49] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 258 seconds)
[02:32:04] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[02:32:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:33:43] <wroathe> austincheney: Playwright gathers logs from both sources: https://github.com/microsoft/playwright/blob/master/src/server/chromium/crPage.ts#L401-L411
[02:33:47] <Donitz> need a function to draw curved lines
[02:33:56] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[02:34:23] *** Parts: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) ()
[02:35:00] <matsaman> Donitz: yeah you do
[02:35:18] <matsaman> Donitz: without using a library?
[02:35:23] <Donitz> naw
[02:35:32] <Donitz> hmm, I guess I need to keep track of at least the 2 previous points
[02:35:38] <Donitz> annoying
[02:35:59] <matsaman> https://stackoverflow.com/questions/20803489/draw-a-curve-with-css
[02:37:18] <wroathe> austincheney: Ah, yes, they explicitly expect you to do it this way: https://bugs.chromium.org/p/chromium/issues/detail?id=704564&q=component%3APlatform%3EDevTools%20entryAdded&can=1
[02:37:33] <wroathe> austincheney: Runtime.consoleAPICalled is the preferred mechanism for gathering log messages
[02:43:49] *** Joins: wyclif (~wyclif@user/wyclif)
[02:48:17] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[02:48:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:49:06] *** Joins: l__q (~modinfo@user/modinfo)
[02:50:13] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:97f:1306:90fb:438d)
[02:50:52] *** Parts: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) ()
[02:51:01] <wroathe> austincheney: Anyway, this works: https://gist.github.com/JustinChristensen/8de4ecf39227172bb9e6a19932868e8e
[02:51:19] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:c53e:e94d:8e10:acd1) (Quit: WeeChat 3.2)
[02:57:26] *** Joins: codebam (~codebam@user/codebam)
[02:58:23] *** Joins: sillyslux__ (~silly@user/silly)
[02:59:03] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[02:59:38] *** Parts: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) ()
[03:00:24] *** Joins: wyclif (~wyclif@user/wyclif)
[03:00:53] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[03:01:08] *** Quits: silly_ (~silly@user/silly) (Read error: Connection reset by peer)
[03:07:18] *** Joins: codingcampbell1 (~codingcam@user/codingcampbell)
[03:09:16] *** Quits: codingcampbell (~codingcam@user/codingcampbell) (Ping timeout: 252 seconds)
[03:09:16] *** codingcampbell1 is now known as codingcampbell
[03:10:52] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[03:15:11] *** Quits: incognito (~relativit@user/incognito) (Ping timeout: 255 seconds)
[03:15:17] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[03:16:23] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[03:16:34] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:97f:1306:90fb:438d) (Ping timeout: 246 seconds)
[03:16:37] *** Quits: qswz (~caub@91-175-196-225.subs.proxad.net) (Quit: leaving)
[03:16:44] *** Parts: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) ()
[03:18:10] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 240 seconds)
[03:19:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:28:25] *** Joins: bambanxx (~bambanx@181-163-45-7.baf.movistar.cl)
[03:28:58] *** Quits: jazzy (~jaziz@2600:380:8653:59ba:7d3d:6a42:3e7f:d235) (Ping timeout: 240 seconds)
[03:30:37] *** Joins: wyclif (~wyclif@user/wyclif)
[03:32:14] *** Joins: l__q (~modinfo@user/modinfo)
[03:35:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:45:35] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 252 seconds)
[03:48:30] *** Joins: wyclif (~wyclif@user/wyclif)
[03:49:28] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 246 seconds)
[03:53:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:53:55] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[03:55:09] *** Joins: wolfshappen (~waff@irc.furworks.de)
[03:55:41] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 255 seconds)
[04:05:01] *** Joins: wyclif (~wyclif@user/wyclif)
[04:09:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[04:16:38] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[04:16:56] *** Quits: bambanxx (~bambanx@181-163-45-7.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[04:18:38] *** Joins: ferdna (~ferdna@user/ferdna)
[04:22:34] *** Joins: wyclif (~wyclif@user/wyclif)
[04:27:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[04:38:26] *** Quits: cisme_ (~cisme_@user/cisme/x-1186982) (Ping timeout: 255 seconds)
[04:38:31] *** Joins: wyclif (~wyclif@user/wyclif)
[04:39:25] *** Joins: cisme_ (~cisme_@108-218-190-101.lightspeed.frsnca.sbcglobal.net)
[04:41:18] *** Quits: matsaman (~matsaman@user/matsaman) (Ping timeout: 268 seconds)
[04:43:07] *** Joins: matsaman (~matsaman@user/matsaman)
[04:43:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[04:44:21] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[04:46:09] *** Quits: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net) (Quit: Goodbye)
[04:46:32] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:5507:d01e:412a:ed6a)
[04:51:28] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Quit: Atum_)
[04:53:16] *** Quits: optimist (~optimist@122.163.159.222) (Quit: Leaving...)
[04:54:26] *** Joins: codebam (~codebam@user/codebam)
[04:55:50] *** Joins: wyclif (~wyclif@user/wyclif)
[05:00:20] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:05:07] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[05:08:04] *** Quits: cisme_ (~cisme_@108-218-190-101.lightspeed.frsnca.sbcglobal.net) (Changing host)
[05:08:04] *** Joins: cisme_ (~cisme_@user/cisme/x-1186982)
[05:19:45] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[05:21:08] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[05:24:53] *** Joins: gggp (~gggp@221.219.73.3)
[05:28:37] *** Quits: z1haze (~z1haze@user/z1haze) (Quit: Leaving)
[05:28:49] *** Joins: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com)
[05:28:57] *** Joins: bambanxx (~bambanx@181-163-45-7.baf.movistar.cl)
[05:29:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 255 seconds)
[05:30:05] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Remote host closed the connection)
[05:34:10] *** __jmcantrell__ is now known as jmcantrell
[05:36:10] <theskillwithin> doing sous vide lobster tail tonight  om nom nom nom
[05:36:45] *** Quits: Deide (~Deide@user/deide) (Quit: Seeee yaaaa)
[05:37:06] <wroathe> theskillwithin: That seems like it wouldn't be very good. Are you at least going to slap it on the grill for a minute afterwards?
[05:37:57] <theskillwithin> i might do a quick sear on it, haven't decided yet,  but its not needed
[05:38:47] *** Quits: bambanxx (~bambanx@181-163-45-7.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[05:38:54] <theskillwithin> loads of butter in the bags so its just like butter poached
[05:39:32] <theskillwithin> i also took the shell off of one of them, using that to make a lobster garlic lemon butter
[05:41:00] *** Joins: kmh_ (~kmh@p2e5110fe.dip0.t-ipconnect.de)
[05:41:50] <theskillwithin> and doesn't always have to be expensive, sometimes you can get a lobster tail for like $10.  but iv never been lucky enuff to find that price when i wanted it yet
[05:42:47] *** Quits: kmh (~kmh@p200300df5f086f00577dac48d2ae195c.dip0.t-ipconnect.de) (Ping timeout: 255 seconds)
[05:44:01] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[05:44:04] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[05:44:10] *** Joins: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net)
[05:45:08] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[05:46:10] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[05:51:15] <theskillwithin> cooking is just engineering food ðŸ˜‹
[05:54:57] *** Quits: kmh_ (~kmh@p2e5110fe.dip0.t-ipconnect.de) (Quit: Leaving)
[05:54:57] <wroathe> theskillwithin: I perfected the art of baking bread from a straight dough without a starter today. My loaves came out way better than anything I can get in the markets around me.
[05:55:11] <wroathe> theskillwithin: It almost tastes like Jimmy John's whole wheat sandwich bread.
[05:57:23] <theskillwithin> i haven't gotten into baking bread yet, but i have mad respect for it
[05:58:34] <wroathe> theskillwithin: It actually makes for a great zen exercise to get you away from the keyboard for a minute. Folding the dough for a no-knead approach only takes 5 or 6 five minute breaks over a period of like two hours.
[05:59:03] <wroathe> theskillwithin: And then a 10 minute break after like 5 hours to shape the loaves and get em in the fridge
[05:59:22] <wroathe> theskillwithin: Then in the morning you've got fresh bread
[06:00:58] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[06:02:01] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[06:05:52] <theskillwithin> everyone should learn how to cook
[06:06:45] <theskillwithin> vast majority of times when i go to a restaurant, im like meh, i coulda made this better
[06:07:04] <shush> Does `for (let item of Object.entries(obj))` differ from `for (let item of map.entries())` in that Object.entries isn't as optimized as map.entries()?
[06:08:15] <theskillwithin> whats map.entries()
[06:08:16] <shush> Or are they both the same as far as performance
[06:08:26] <shush> `let map = Map()`
[06:08:59] <theskillwithin> loops always throw me for a loop
[06:09:24] *** Quits: dualbus (~dualbus@2604:3d08:837f:faeb:b62e:99ff:fe30:7d62) (Quit: WeeChat 3.0.1)
[06:11:00] *** Quits: mertyildiran (~mertyildi@88.243.1.174) (Ping timeout: 272 seconds)
[06:13:23] <theskillwithin> shush why not entries().map   or entries.forEach if its side effects instead of using a for loop
[06:14:03] <shush> I prefer forEach too, but my team likes for..loops
[06:18:29] <theskillwithin> im hoping someone else jumps in here, cuz i have no idea the optimization implications
[06:21:38] <wroathe> shush: The performance of either will depend on each type of object's representation for a particular Javascript implementation.
[06:21:44] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (Remote host closed the connection)
[06:22:22] <shush> I suppose what I'm worried about is whether each iteration invokes Object.entries or map.entries
[06:22:39] <shush> Though I suppose it shouldn't
[06:22:42] <wroathe> shush: No, it's only invoked once.
[06:23:40] <wroathe> shush: https://itnext.io/v8-deep-dives-understanding-map-internals-45eb94a183df
[06:23:42] <shush> Yeah that makes sense because if we're invoking it more than once then we'd be getting a new array on each iteration which wouldn't make sense why we'd need to do that
[06:23:58] <wroathe> I can't verify that that article is accurate, but it looks like he's making an attempt to deep dive and talk about how Map is represented in v8.
[06:24:05] <shush> That looks like a good read thanks~!
[06:29:29] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 252 seconds)
[06:32:39] *** Joins: holmes (~holmes@user/holmes)
[06:33:38] *** Quits: printForever (~textual@185.236.201.210) (Ping timeout: 255 seconds)
[06:44:54] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Ping timeout: 268 seconds)
[06:46:32] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (Ping timeout: 252 seconds)
[06:47:18] *** Joins: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net)
[06:47:48] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[06:52:50] *** Joins: WishBoy (~WishBoy@user/wishboy)
[06:54:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[06:54:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:57:50] *** Quits: xvx (~xvx@185.48.63.111) (Quit: xvx)
[06:58:54] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[07:03:29] *** Quits: tabakhase (tabakhase@user/tabakhase) (Quit: ZNC - http://znc.in)
[07:07:56] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[07:08:46] *** Joins: Dorward_ (~dorward@daviddorward.plus.com)
[07:09:21] *** Joins: tabakhase (tabakhase@user/tabakhase)
[07:10:11] *** Quits: Dorward (~dorward@daviddorward.plus.com) (Ping timeout: 252 seconds)
[07:18:32] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[07:19:27] *** Quits: gggp (~gggp@221.219.73.3) (Read error: Connection reset by peer)
[07:19:59] *** Quits: tkob (tkob@user/thekingofbandit) (Ping timeout: 252 seconds)
[07:21:17] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[07:22:10] *** Joins: thekingofbandit (tkob@2607:5300:60:21b::1)
[07:22:10] *** Quits: thekingofbandit (tkob@2607:5300:60:21b::1) (Changing host)
[07:22:10] *** Joins: thekingofbandit (tkob@user/thekingofbandit)
[07:24:46] *** Joins: Rockwood (~Rocky@user/rocky)
[07:31:57] *** Quits: keypusher (keypusher@user/keypusher) (Remote host closed the connection)
[07:33:22] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[07:34:33] *** Joins: keypusher (keypusher@user/keypusher)
[07:35:22] *** Quits: CryptoDavid (uid14990@id-14990.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[07:39:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[07:39:29] *** Quits: iffraff (~quassel@136.49.178.170) (Quit: No Ping reply in 180 seconds.)
[07:39:58] *** Joins: pwnd_sfw4 (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[07:40:10] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[07:40:10] *** pwnd_sfw4 is now known as pwnd_sfw
[07:40:41] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (Ping timeout: 255 seconds)
[07:40:43] *** Joins: iffraff (~quassel@136.49.178.170)
[07:41:01] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Ping timeout: 268 seconds)
[07:45:21] *** Joins: wyclif (~wyclif@user/wyclif)
[07:45:48] *** Quits: holmes (~holmes@user/holmes) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:49:43] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:54:02] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[07:54:34] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[07:57:07] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[07:59:41] *** Joins: dvu (~danielvu@168.235.66.22)
[08:00:45] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:02:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:02:40] <Rockwood> hover isn't good idea in small and touch screens?
[08:02:59] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Ping timeout: 252 seconds)
[08:03:15] *** Joins: holmes (~holmes@user/holmes)
[08:04:50] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[08:05:26] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[08:05:39] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[08:06:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 265 seconds)
[08:07:40] *** Joins: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net)
[08:10:39] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[08:20:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:22:25] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[08:25:37] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 246 seconds)
[08:28:35] <ThePendulum> Rockwood: the Galaxy S4 had hover detection back in 2013, I don't know why it never took off, but yeah, it didn't, so don't expect mobile users to use hover actions
[08:29:28] <Rockwood> any alternative? or i have to make it onclick
[08:29:37] <Rockwood> ThePendulum, ^^
[08:33:59] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[08:35:45] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[08:37:48] *** Joins: Pajus (~Pajus@user/pajus)
[08:39:03] <ThePendulum> what are you trying to do? on phones you have gestures and long presses to be used with caution
[08:40:21] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:42:08] *** Joins: Ziyan (~ziyan@112.134.172.105)
[08:45:02] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 255 seconds)
[08:46:50] *** Quits: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com) (Ping timeout: 255 seconds)
[08:47:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:49:12] *** Quits: howdoi (uid224@id-224.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[08:53:27] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[08:53:33] *** Quits: holmes (~holmes@user/holmes) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:03:52] *** Joins: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com)
[09:06:11] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 255 seconds)
[09:06:26] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:12:14] *** Joins: dualbus (~dualbus@2604:3d08:837f:faeb:b62e:99ff:fe30:7d62)
[09:18:20] *** Quits: cisme_ (~cisme_@user/cisme/x-1186982) (Ping timeout: 255 seconds)
[09:18:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[09:19:34] *** Joins: cisme_ (~cisme_@108-218-190-101.lightspeed.frsnca.sbcglobal.net)
[09:19:37] *** Joins: wyclif (~wyclif@user/wyclif)
[09:20:31] *** Quits: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com) (Remote host closed the connection)
[09:20:49] *** Joins: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com)
[09:27:55] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[09:29:22] *** Joins: silly_ (~silly@user/silly)
[09:30:09] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[09:31:32] *** Quits: dibber (~dibber@c-73-14-187-235.hsd1.co.comcast.net) (Ping timeout: 252 seconds)
[09:32:49] *** Quits: sillyslux__ (~silly@user/silly) (Ping timeout: 246 seconds)
[09:33:00] *** Joins: paule32 (~paule32@user/paule32)
[09:41:14] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[09:43:15] *** Joins: holmes (~holmes@user/holmes)
[09:43:30] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[09:44:01] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 246 seconds)
[09:45:07] *** Quits: Black (~Benett@2a03:4000:1a:7aa::2) (Quit: Â )
[09:45:30] *** Joins: Benett (~Benett@xnetx.de)
[09:46:41] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[09:57:39] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 265 seconds)
[09:59:37] *** Quits: Ziyan (~ziyan@112.134.172.105) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[10:00:03] *** Quits: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com) (Read error: Connection reset by peer)
[10:04:17] *** Joins: The_Blode (~Blode@92.40.180.221.threembb.co.uk)
[10:11:57] *** Quits: holmes (~holmes@user/holmes) (Quit: Textual IRC Client: www.textualapp.com)
[10:22:19] <theskillwithin> ThePendulum appears he left before u asked that
[10:28:33] *** Joins: Ziyan (~ziyan@112.134.172.105)
[10:30:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 255 seconds)
[10:33:45] *** Joins: kmh (~kmh@p200300df5f30ad0070a4f56ee8e84d8b.dip0.t-ipconnect.de)
[10:37:02] *** Quits: torniq (~xjsxxx@172.103.177.52) (Quit: Leaving)
[10:38:14] *** Quits: Ziyan (~ziyan@112.134.172.105) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[10:39:18] *** Joins: Ziyan (~ziyan@112.134.172.105)
[10:40:22] *** Quits: cisme_ (~cisme_@108-218-190-101.lightspeed.frsnca.sbcglobal.net) (Changing host)
[10:40:22] *** Joins: cisme_ (~cisme_@user/cisme/x-1186982)
[10:42:00] *** Joins: mertyildiran (~mertyildi@88.243.1.174)
[10:43:36] *** Joins: Safa_[A_Boy] (~Safa@89.148.34.71)
[10:45:22] <Safa_[A_Boy]> Hi all. AngularJS question :) Let's say I have an object being referenced in a binding. ex: let myObject = {firstName: "First", lastName: "Last", updatedAt: <HTML Date object>}. And I'm using a binding in the view like so: ng-bind="$ctrl.myObject.firstName". Is there a way to _not_ update this binding unless myObjects.updatedAt changed?
[10:46:15] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:46:31] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[10:47:01] *** Quits: mertyildiran (~mertyildi@88.243.1.174) (Ping timeout: 246 seconds)
[10:47:19] *** Joins: mertyildiran (~mertyildi@157.230.123.143)
[10:50:06] <theskillwithin> Safa_[A_Boy] ditch angular, switch to react
[10:50:23] <Safa_[A_Boy]> Will do at some point, not now though
[10:50:34] <Safa_[A_Boy]> Fully aware.
[10:50:58] *** Joins: arash (~arash@5.123.115.167)
[10:51:17] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 252 seconds)
[10:51:43] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[10:52:30] *** Quits: N4buc0 (~N4buc0@2001:1284:f016:d2fe:13b4:109d:11e2:40df) (Quit: Leaving)
[10:52:38] <Safa_[A_Boy]> theskillwithin, btw, how to do that in react?
[10:54:38] *** Quits: pavonia (~user@user/siracusa) (*.net *.split)
[10:54:38] *** Quits: APic (apic@apic.name) (*.net *.split)
[10:54:38] *** Quits: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net) (*.net *.split)
[10:54:38] *** Quits: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (*.net *.split)
[10:54:38] *** Quits: vbgunz (~vbgunz@35.141.71.47) (*.net *.split)
[10:54:38] *** Quits: Unfixed (~Jake@64.31.33.140) (*.net *.split)
[10:54:38] *** Quits: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com) (*.net *.split)
[10:54:38] *** Quits: mishiranu (~mishiranu@78.129.171.229) (*.net *.split)
[10:54:38] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[10:54:38] *** Quits: Zwei (~Zweihande@znc.ext.zweihander.me) (*.net *.split)
[10:54:38] *** Quits: mdel (~mdel@user/mdel) (*.net *.split)
[10:54:38] *** Quits: daniel-k (~daniel-k@192.241.135.211) (*.net *.split)
[10:54:38] *** Quits: lmat (~lawsa@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[10:54:38] *** Quits: tkazi (~tkazi@user/tkazi) (*.net *.split)
[10:54:38] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[10:54:38] *** Quits: biggusnickus (~biggusdic@user/biggusdickus) (*.net *.split)
[10:54:38] *** Quits: kinabalu (~kinabalu@about/java/kinabalu) (*.net *.split)
[10:54:38] *** Quits: francis (francis@user/francis) (*.net *.split)
[10:54:38] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[10:54:38] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[10:54:38] *** Quits: gggpkm (~gggpkm@60.10.194.47) (*.net *.split)
[10:54:38] *** Quits: Hazza (~Haxxa@122-199-59-136.ip4.superloop.com) (*.net *.split)
[10:54:38] *** Quits: Axy (~Axy@user/axy) (*.net *.split)
[10:54:38] *** Quits: skillbot (~skillbot@user/skillbot) (*.net *.split)
[10:54:38] *** Quits: blez (~blez@213.91.182.96) (*.net *.split)
[10:54:39] *** Quits: edr (~edr@user/edr) (*.net *.split)
[10:54:39] *** Quits: azizLIGHT (~azizLIGHT@user/azizlight) (*.net *.split)
[10:54:39] *** Quits: Talon (Talon@172.77.99.199) (*.net *.split)
[10:54:39] *** Quits: AlbertLast (~nix@0exclusive.de) (*.net *.split)
[10:54:39] *** Quits: NoiseEee (~NoiseEee@178.128.153.219) (*.net *.split)
[10:54:39] *** Quits: michaelis (~michaelis@193.183.209.17) (*.net *.split)
[10:54:39] *** Quits: flying_sausages (~flying_sa@user/flying-sausages/x-2113186) (*.net *.split)
[10:54:39] *** Quits: Pilum (~JKM@user/pilum) (*.net *.split)
[10:54:39] *** Quits: c4017w (~c4017@209.52.68.8) (*.net *.split)
[10:54:39] *** Quits: siyb (~siyb@h081217185055.dyn.cm.kabsi.at) (*.net *.split)
[10:54:39] *** Quits: Sherpard2 (~VirtualPa@user/sherpard2) (*.net *.split)
[10:54:39] *** Quits: luiserebii (~luiserebi@li1568-23.members.linode.com) (*.net *.split)
[10:54:57] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[10:54:57] *** Joins: pavonia (~user@user/siracusa)
[10:54:57] *** Joins: Hazza (~Haxxa@122-199-59-136.ip4.superloop.com)
[10:54:57] *** Joins: Axy (~Axy@user/axy)
[10:54:57] *** Joins: skillbot (~skillbot@user/skillbot)
[10:54:57] *** Joins: APic (apic@apic.name)
[10:54:57] *** Joins: blez (~blez@213.91.182.96)
[10:54:57] *** Joins: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net)
[10:54:57] *** Joins: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[10:54:57] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[10:54:57] *** Joins: Unfixed (~Jake@64.31.33.140)
[10:54:57] *** Joins: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[10:54:57] *** Joins: mishiranu (~mishiranu@78.129.171.229)
[10:54:57] *** Joins: edr (~edr@user/edr)
[10:54:57] *** Joins: azizLIGHT (~azizLIGHT@user/azizlight)
[10:54:57] *** Joins: PigDude (~PigDude@159.203.16.199)
[10:54:57] *** Joins: Zwei (~Zweihande@znc.ext.zweihander.me)
[10:54:57] *** Joins: mdel (~mdel@user/mdel)
[10:54:57] *** Joins: daniel-k (~daniel-k@192.241.135.211)
[10:54:57] *** Joins: lmat (~lawsa@c-68-58-60-231.hsd1.in.comcast.net)
[10:54:57] *** Joins: tkazi (~tkazi@user/tkazi)
[10:54:57] *** Joins: Talon (Talon@172.77.99.199)
[10:54:57] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[10:54:57] *** Joins: AlbertLast (~nix@0exclusive.de)
[10:54:57] *** Joins: NoiseEee (~NoiseEee@178.128.153.219)
[10:54:57] *** Joins: michaelis (~michaelis@193.183.209.17)
[10:54:57] *** Joins: biggusnickus (~biggusdic@user/biggusdickus)
[10:54:57] *** Joins: flying_sausages (~flying_sa@user/flying-sausages/x-2113186)
[10:54:57] *** Joins: Pilum (~JKM@user/pilum)
[10:54:57] *** Joins: kinabalu (~kinabalu@about/java/kinabalu)
[10:54:57] *** Joins: siyb (~siyb@h081217185055.dyn.cm.kabsi.at)
[10:54:57] *** Joins: c4017w (~c4017@209.52.68.8)
[10:54:57] *** Joins: francis (francis@user/francis)
[10:54:57] *** Joins: luiserebii (~luiserebi@li1568-23.members.linode.com)
[10:54:57] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[10:54:57] *** Joins: Sherpard2 (~VirtualPa@user/sherpard2)
[10:54:57] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[10:54:57] *** mercury.libera.chat sets mode: +v skillbot
[10:57:14] *** Quits: mrdata (~mrdata@user/mrdata) (Ping timeout: 252 seconds)
[10:58:53] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[10:59:37] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 246 seconds)
[11:00:42] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[11:01:10] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 252 seconds)
[11:01:48] *** Quits: Ziyan (~ziyan@112.134.172.105) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[11:02:13] <l__q> Has netlify removed yarn command to build react project? Netlify log: "bash: yarn: command not found"
[11:03:35] *** Joins: Ziyan (~ziyan@112.134.172.105)
[11:05:20] <theskillwithin> l__q do you haz a yarn.lock file in the repo?
[11:06:03] <l__q> theskillwithin: no, thanks!
[11:06:08] <l__q> opss
[11:06:27] <theskillwithin> ðŸ˜€
[11:06:57] <theskillwithin> https://docs.netlify.com/configure-builds/manage-dependencies/#yarn
[11:07:03] <theskillwithin> NETLIFY_USE_YARN: undefined by default. If true, Netlify will install and run Yarn. If false, we will use npm. If left unset, we will run Yarn if and only if the siteâ€™s base directory includes a yarn.lock file.
[11:07:03] <l__q> thanks :)
[11:07:09] <theskillwithin> np
[11:22:46] <Safa_[A_Boy]> my question got buried :(
[11:23:16] <theskillwithin> Safa_[A_Boy] repost it
[11:23:25] <Safa_[A_Boy]> Hi all. AngularJS question :) Let's say I have an object being referenced in a binding. ex: let myObject = {firstName: "First", lastName: "Last", updatedAt: <HTML Date object>}. And I'm using a binding in the view like so: ng-bind="$ctrl.myObject.firstName". Is there a way to _not_ update this binding unless myObjects.updatedAt changed?
[11:24:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:29:17] *** Quits: The_Blode (~Blode@92.40.180.221.threembb.co.uk) (Ping timeout: 255 seconds)
[11:29:27] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Read error: Connection reset by peer)
[11:33:56] *** Joins: Ziyan_ (~ziyan@112.134.171.212)
[11:34:05] *** Quits: tccki (~tccki@2406:e001:2:5a00:250:56ff:fe9e:8795) (Quit: tccki)
[11:34:41] *** Quits: Ziyan (~ziyan@112.134.172.105) (Ping timeout: 255 seconds)
[11:35:39] *** Joins: tccki (~tccki@box.webslate.co.nz)
[11:36:50] *** Quits: nepeat (~nepeat@79.110.170.62) (Ping timeout: 252 seconds)
[11:37:01] *** Joins: wyclif (~wyclif@user/wyclif)
[11:38:51] *** Joins: nepeat (~nepeat@79.110.170.62)
[11:41:25] *** Joins: The_Blode (~Blode@92.40.180.228.threembb.co.uk)
[11:42:30] *** Joins: jazzy (~jaziz@2600:380:8653:59ba:7d3d:6a42:3e7f:d235)
[11:44:25] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[11:49:43] *** Quits: kmh (~kmh@p200300df5f30ad0070a4f56ee8e84d8b.dip0.t-ipconnect.de) (Quit: Leaving)
[11:54:25] *** Joins: sunyour (~sunyour@129.226.182.99)
[11:55:26] *** Quits: The_Blode (~Blode@92.40.180.228.threembb.co.uk) (Ping timeout: 252 seconds)
[12:02:08] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[12:04:20] *** Joins: nwoob (~apple@103.135.39.162)
[12:04:29] <nwoob> https://replit.com/@Totoro008/AbsoluteEducatedBooleanalgebra#index.js
[12:05:10] <nwoob> I this how can I change code so that fullName function gives me name and sur of Person object
[12:06:38] *** Quits: debsan (~debsan@2800:810:471:2ee::1000) (Ping timeout: 252 seconds)
[12:07:19] <nwoob> I tried let this = that; in fullname fuction and passed it to that function that returns but when called from outside it gives me error cannot read property name of undefined
[12:07:35] *** Quits: arash (~arash@5.123.115.167) (Read error: Connection reset by peer)
[12:08:35] *** Joins: arash (~arash@5.123.115.167)
[12:14:17] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[12:15:11] <theskillwithin> nwoob i get "Mozilla Firefox"
[12:16:59] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 255 seconds)
[12:17:44] <theskillwithin> nwoob u have a function returning a function
[12:17:59] <theskillwithin> nwoob consider this https://jsfiddle.net/theskillwithin/gwqjem3x/
[12:20:00] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Read error: Connection reset by peer)
[12:22:53] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[12:25:25] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[12:36:37] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[12:36:40] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:19] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[12:39:35] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:44:33] *** Joins: bambanxx (~bambanx@181-163-43-25.baf.movistar.cl)
[12:46:11] *** Quits: bambanxx (~bambanx@181-163-43-25.baf.movistar.cl) (Client Quit)
[12:48:08] *** Joins: Crassus (~Crassus@user/crassus)
[12:48:56] *** Quits: nwoob (~apple@103.135.39.162) (Quit: leaving)
[12:51:32] *** Joins: teut (~teut@106.214.16.139)
[12:52:49] <teut> I was starting with nextjs and I have to make a layout like such
[12:52:56] <teut> Uploaded file: https://uploads.kiwiirc.com/files/4bcf0aed9f7497098ff1a7910e74a823/image.png
[12:53:33] <teut> a  dashboard like thing, so is there a starter template amongst https://nextjs.org/docs/advanced-features/preview-mode?
[13:00:38] *** Quits: mertyildiran (~mertyildi@157.230.123.143) (Ping timeout: 255 seconds)
[13:02:36] *** Joins: mertyildiran (~mertyildi@88.243.1.174)
[13:03:51] *** Joins: incognito (~relativit@user/incognito)
[13:05:50] *** Quits: Ziyan_ (~ziyan@112.134.171.212) (Ping timeout: 252 seconds)
[13:06:45] *** Joins: Ziyan (~ziyan@112.134.168.222)
[13:09:53] *** Joins: Ziyan_ (~ziyan@112.134.175.130)
[13:11:26] *** Quits: Ziyan (~ziyan@112.134.168.222) (Ping timeout: 255 seconds)
[13:11:32] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 272 seconds)
[13:12:23] *** Joins: Ziyan (~ziyan@112.134.173.9)
[13:14:22] *** Quits: Ziyan_ (~ziyan@112.134.175.130) (Ping timeout: 265 seconds)
[13:16:34] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 240 seconds)
[13:20:53] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 252 seconds)
[13:24:56] *** Joins: l__q (~modinfo@user/modinfo)
[13:25:23] *** Quits: Ziyan (~ziyan@112.134.173.9) (Ping timeout: 255 seconds)
[13:26:14] *** Joins: Ziyan (~ziyan@112.134.171.23)
[13:27:43] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[13:32:01] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[13:32:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[13:36:51] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:43:43] *** Joins: gggpkm_ (~gggpkm@123.113.180.251)
[13:45:37] *** Joins: wyclif (~wyclif@user/wyclif)
[13:45:44] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 272 seconds)
[13:46:05] *** Joins: The_Blode (~Blode@92.40.180.222.threembb.co.uk)
[13:46:59] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 255 seconds)
[13:51:03] *** Quits: thekingofbandit (tkob@user/thekingofbandit) (Killed (NickServ (GHOST command used by thekingofbandit1!thekingofb@thunix.net)))
[13:51:13] *** Joins: thekingofbandit (tkob@user/thekingofbandit)
[13:51:37] *** Joins: thekingofbandit1 (thekingofb@thunix.net)
[13:53:16] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[14:07:55] *** Quits: arash (~arash@5.123.115.167) (Read error: Connection reset by peer)
[14:08:19] *** Joins: arash (~arash@5.123.115.167)
[14:09:20] *** Joins: CiaoSen (~Jura@p200300c95722a400dbe4133b387f39b9.dip0.t-ipconnect.de)
[14:10:28] *** Quits: incognito (~relativit@user/incognito) (Quit: Going offline, see ya! (www.adiirc.com))
[14:16:35] *** Quits: gry (~quassel@botters/gry) (Quit: gone)
[14:17:08] *** Joins: entuland (~entuland@user/entuland)
[14:17:58] *** Joins: Guest624 (~Guest6@2001:8003:1609:7000:65a8:980:b263:976b)
[14:18:44] *** Quits: Guest624 (~Guest6@2001:8003:1609:7000:65a8:980:b263:976b) (Client Quit)
[14:19:24] *** Joins: gry (~quassel@botters/gry)
[14:23:08] *** Quits: thekingofbandit (tkob@user/thekingofbandit) (Killed (NickServ (GHOST command used by thekingofbandit2!thekingofb@thunix.net)))
[14:23:17] *** Joins: p_stampy1 (~thelounge@user/p-stampy/x-2915953)
[14:23:18] *** Joins: thekingofbandit (tkob@user/thekingofbandit)
[14:23:31] *** Joins: bin4ry2 (~bin4ry@128.199.135.148)
[14:23:42] *** Joins: thekingofbandit2 (thekingofb@thunix.net)
[14:25:38] *** Quits: p_stampy (~thelounge@user/p-stampy/x-2915953) (Ping timeout: 272 seconds)
[14:25:38] *** p_stampy1 is now known as p_stampy
[14:25:39] *** Quits: bin4ry (~bin4ry@128.199.135.148) (Ping timeout: 272 seconds)
[14:25:39] *** bin4ry2 is now known as bin4ry
[14:27:32] *** Quits: thekingofbandit1 (thekingofb@thunix.net) (Ping timeout: 272 seconds)
[14:32:36] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 272 seconds)
[14:33:02] *** Joins: Jigsy (~Jigsy@user/jigsy)
[14:33:14] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 272 seconds)
[14:34:46] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:858b:15a6:2337:924)
[14:35:20] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[14:38:56] *** Joins: l__q (~modinfo@user/modinfo)
[14:39:28] *** Quits: teut (~teut@106.214.16.139) (Quit: Connection closed)
[14:42:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[14:43:59] *** Joins: pulse (~pulse@user/pulse)
[14:46:08] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[14:46:08] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[14:46:59] *** Joins: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com)
[14:48:12] *** Jigsy` is now known as Jigsy
[14:54:54] *** Joins: wyclif (~wyclif@user/wyclif)
[14:58:32] *** Joins: arthurpbs_ (~arthurpbs@168.121.99.67)
[14:59:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[15:00:18] *** Quits: inom (~inom@176.59.102.225) (Quit: WeeChat 3.1)
[15:00:46] *** Quits: arthurpbs (~arthurpbs@168.121.99.67) (Ping timeout: 246 seconds)
[15:02:00] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Quit: Leaving)
[15:02:31] *** Trieste_ is now known as Trieste
[15:03:22] *** Quits: CiaoSen (~Jura@p200300c95722a400dbe4133b387f39b9.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:04:55] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[15:05:01] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[15:05:50] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 258 seconds)
[15:06:26] *** Joins: wyclif (~wyclif@user/wyclif)
[15:06:54] *** Jigsy` is now known as Jigsy
[15:08:58] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[15:12:59] *** Joins: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[15:12:59] *** Quits: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Changing host)
[15:12:59] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[15:13:48] *** Quits: Ziyan (~ziyan@112.134.171.23) (Ping timeout: 252 seconds)
[15:14:46] *** Joins: Ziyan (~ziyan@112.134.172.255)
[15:15:02] *** Quits: g2anj (~v@221.142.186.101) (Ping timeout: 272 seconds)
[15:15:30] *** Joins: g2anj (~v@221.142.186.101)
[15:17:12] *** Joins: tatiana (~OhTheCode@61.68.64.94)
[15:17:13] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 246 seconds)
[15:20:31] *** Quits: OhTheCode__ (~OhTheCode@60-242-16-104.tpgi.com.au) (Ping timeout: 265 seconds)
[15:20:55] *** Joins: jaamro (~6174bb9b@user/ormaaj)
[15:20:59] *** Joins: jonifen (~jonifen@user/jonifen)
[15:21:16] *** Joins: Heraes (~Heraes@119.12.203.77.rev.sfr.net)
[15:21:16] *** Quits: Heraes (~Heraes@119.12.203.77.rev.sfr.net) (Changing host)
[15:21:16] *** Joins: Heraes (~Heraes@user/romarain)
[15:25:32] *** Quits: Popzi (~Popzi@2.29.154.83) (Ping timeout: 255 seconds)
[15:25:32] *** Joins: l__q (~modinfo@user/modinfo)
[15:26:02] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[15:26:07] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[15:27:41] *** Quits: gggpkm_ (~gggpkm@123.113.180.251) (Ping timeout: 258 seconds)
[15:29:17] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[15:31:14] *** Quits: arash (~arash@5.123.115.167) (Ping timeout: 252 seconds)
[15:31:36] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[15:32:17] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 255 seconds)
[15:34:03] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[15:34:26] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Remote host closed the connection)
[15:35:57] *** Joins: Crassus (~Crassus@user/crassus)
[15:37:14] *** Joins: gggp (~gggp@60.10.194.47)
[15:42:58] *** Joins: gggp_ (~gggp@60.10.194.47)
[15:43:04] *** Joins: Popzi (~Popzi@2.29.154.62)
[15:45:45] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[15:46:11] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[15:46:42] *** Quits: gggp (~gggp@60.10.194.47) (Ping timeout: 272 seconds)
[15:50:33] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[15:53:16] *** gggp_ is now known as gggp
[15:55:53] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[16:01:58] *** Joins: gggp_ (~gggp@60.10.194.47)
[16:02:32] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 272 seconds)
[16:05:20] *** Quits: gggp (~gggp@60.10.194.47) (Ping timeout: 252 seconds)
[16:05:38] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[16:09:29] *** Joins: Simplar (~Simplar@188.163.94.202)
[16:09:59] <Simplar> How to stop the currently playing YouTube video embed in Bootstrap when starting playing another video on the same page?
[16:16:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[16:18:44] <hassoon> check youtube player API
[16:21:15] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[16:25:54] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Client Quit)
[16:26:23] *** Joins: arash (~arash@5.123.115.167)
[16:27:15] <nedbat> i'm trying to understand how "this" gets managed. To my Python eyes, the two ways of creating the event handler function should be the same: https://gist.github.com/a0cedd624394db8c7df78529444971d0  But the mousedown event gets Window for this, and the mouseover event gets my App object.  What's a good explainer, or can someone explain?
[16:27:16] *** Quits: keypusher (keypusher@user/keypusher) (Remote host closed the connection)
[16:28:16] *** Joins: wyclif (~wyclif@user/wyclif)
[16:30:20] *** Joins: keypusher (keypusher@user/keypusher)
[16:31:32] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[16:32:36] <ashnur> nedbat, first try without using arrow functions, then put arrow functions one at a time.
[16:33:08] <nedbat> ashnur: right, i've tried a bunch of combinations, and I see what works and what doesn't. but i don't understand the language mechanics that make it so.
[16:33:53] <ashnur> as i understand it, `this` is a hidden argument to each function, apart from arrow functions
[16:34:38] <ashnur> there are multiple ways to provide this `this` to any function that has a reference to it, that is, functions that are not arrow functions
[16:34:53] <ashnur> but reading the standard gives a much more coherent way, it's kinda worth it
[16:36:10] <ashnur> https://262.ecma-international.org/12.0/#sec-this-keyword
[16:37:47] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 252 seconds)
[16:37:47] *** Quits: jazzy (~jaziz@2600:380:8653:59ba:7d3d:6a42:3e7f:d235) (Ping timeout: 252 seconds)
[16:37:56] *** Joins: keypushe- (keypusher@user/keypusher)
[16:38:01] <Alexendoo> It's not about arrow functions here, you'd see the same behaviour if you replaced them with regular functions
[16:38:02] <ashnur> https://262.ecma-international.org/12.0/#running-execution-context
[16:38:32] <Alexendoo> The difference is this, essentially, https://jsfiddle.net/tydnavr5/
[16:39:01] <Alexendoo> mousemove is called as the_app.mouse_move(), but mousedown is called directly, as fn(ev)
[16:39:15] <nedbat> Alexendoo: you mean indirectly?
[16:39:34] <Alexendoo> Not in the form a.b()
[16:40:22] <ashnur> which is why i linked the friggin running execution context
[16:40:23] <nedbat> Alexendoo: right. "but mousedown is called *in*directly, as fn(ev)"
[16:41:08] <Alexendoo> nedbat: Not the kind of direct I meant
[16:41:12] *** keypushe- is now known as keypusher
[16:41:17] <nedbat> Alexendoo: ok
[16:41:49] <nedbat> ashnur: sorry, i didn't mean to frustrate you
[16:42:12] <Alexendoo> nedbat: Two options would be handler(ev => the_app.mouse_down(ev)) or handler(the_app.mouse_down.bind(the_app))
[16:42:18] <ashnur> i am frustrated by Alexendoo's "not about arrow functions", as if i was not trying to make the exact point
[16:42:20] <ashnur> confusing
[16:42:39] <Alexendoo> You mentioned arrow functions, it's not about that
[16:42:52] <nedbat> ashnur: fwiw, i don't find the standard to be a good way to learn, it's too much legalese
[16:43:07] <ashnur> it takes a bit of getting used to
[16:43:27] <ashnur> but it's much better that trying to guess
[16:43:35] <ashnur> than*
[16:43:45] <ashnur> !this
[16:43:45] <jellobot> ashnur, A function call of the form `a.b()` calls the function with `this` being the value of `a`; in a call of the form `f()`, `this` will be `undefined`, which is turned into the global object if the function wasn't defined in strict mode. Note that arrow functions and functions produced by `Function.prototype.bind` ignore the passed `this` value. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this
[16:43:45] <silly_> "getting used to" is what helped me the most
[16:44:10] <ashnur> yeah, friggin standard somehow works out for some reason, lol
[16:46:04] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 265 seconds)
[16:46:35] *** Joins: fef (~thedawn@user/thedawn)
[16:46:38] <nedbat> and there is no way to do:  f = the_app.method;   and then somehow get the_app from f?
[16:48:39] *** gggp_ is now known as gggp
[16:49:03] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Quit: Must not waste too much time here...)
[16:49:29] *** Joins: iomari891 (~iomari891@105.112.138.38)
[16:55:53] *** Joins: gggp_ (~gggp@60.10.194.47)
[16:56:11] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[16:59:14] *** Quits: gggp (~gggp@60.10.194.47) (Ping timeout: 252 seconds)
[17:00:24] *** gggp_ is now known as gggp
[17:01:03] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:01:36] *** Joins: Naan (~naan@user/naan)
[17:02:03] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:08:40] *** Joins: jazzy (~jaziz@2600:380:8653:59ba:fdf6:260a:bc2c:db50)
[17:11:40] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:858b:15a6:2337:924) (Ping timeout: 246 seconds)
[17:16:31] *** Joins: cbleslie (~cbleslie@47.148.37.14)
[17:18:17] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[17:27:17] *** Quits: jazzy (~jaziz@2600:380:8653:59ba:fdf6:260a:bc2c:db50) (Ping timeout: 252 seconds)
[17:28:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[17:28:53] <farn> nedbat: no, only with f = the_app.method.bind(the_app)
[17:29:05] <nedbat> farn: ok. this is different than Python :)
[17:29:14] <ashnur> it's not
[17:29:17] <nedbat> or should I say:  "this" is different than Python :)
[17:29:28] <ashnur> probably
[17:29:29] <ashnur> :D
[17:29:38] <nedbat> ashnur: in Python,  o.m(a)   is exactly the same as   x = o.m;  x(a)
[17:31:05] <ashnur> http://www.codekoala.com/posts/python-and-execution-context/
[17:31:10] <ashnur> doesn't look too different
[17:31:42] <nedbat> ashnur: i assure you, Python is different in this regard.
[17:32:30] <ashnur> sure, i can see what you mean
[17:32:55] *** Joins: mcfrdy (uid507892@user/mcfrdy)
[17:33:19] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[17:34:59] *** Joins: gggp_ (~gggp@60.10.194.47)
[17:34:59] <ashnur> do you every use `with` in python?
[17:35:16] <nedbat> ashnur: I use "with" often, yes
[17:35:26] <nedbat> ashnur: but that is also not like other language's "with"
[17:36:03] <ashnur> nothing is like python, we get it :)
[17:36:28] <nedbat> ashnur: i thought we were deciding that nothing is like javascript :)
[17:37:16] <silly_> why have different languages if they were all the same?
[17:37:22] <nedbat> exactly
[17:37:24] <ashnur> all i meant to say that for me, this is just a single thing, certain arguments are not explicit but hidden, and different languages have different ways to organize access to the context that provides it, this is almost never the only one
[17:37:54] <ashnur> i thought js was explicitly like Self and a bunch of other languages together?
[17:38:38] <nedbat> ashnur: could be, i don't know Self
[17:38:48] *** Quits: gggp (~gggp@60.10.194.47) (Ping timeout: 272 seconds)
[17:40:44] *** Joins: wyclif (~wyclif@user/wyclif)
[17:41:17] <farn> I thought it was half a Scheme squished into C syntax
[17:42:22] <farn> JS methods are mostly just functions that some object happens to have a reference to. They're not owned by anyone (unless explicitly bound)
[17:42:46] <farn> Like a stray cat. If you're the one calling it, it might acknowledge you. But out of sight, out of mind
[17:45:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[17:46:53] *** Joins: z__ (~z_@142-196-189-034.res.spectrum.com)
[17:48:24] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[17:52:28] <ashnur> you mean https://en.wikipedia.org/wiki/First-class_function
[17:52:47] <ashnur> yeah, functions should be "owned", because otherwise they are "stray"
[17:53:11] <ashnur> i think it's the other way around, state should be bound by process, because it's evil :P
[17:54:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[17:57:26] *** Joins: gggp__offline (~gggp@123.113.180.251)
[17:57:50] *** gggp__offline is now known as gggp
[18:00:11] *** Joins: wyclif (~wyclif@user/wyclif)
[18:00:34] *** Quits: jamesmartinez (~keinbock@37.44.247.165) (Quit: leaving)
[18:00:58] *** Quits: gggp_ (~gggp@60.10.194.47) (Ping timeout: 272 seconds)
[18:01:05] <farn> Well, Python also has first-class functions, but apparently their methods "belong" to the class/object in a way that they don't in JS. Either that or there is magic in the `obj.method` syntax that JS only has for `obj.method()`
[18:01:17] <farn> Functions should be free and objects should be dumb
[18:02:01] *** Joins: fef (~thedawn@user/thedawn)
[18:04:49] <ashnur> hashmap tries :D
[18:05:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[18:11:18] *** Joins: gggp_ (~gggp@60.10.23.164)
[18:12:08] <stenno> farn: note that you can change the context of the function with .bind in JS
[18:12:54] <stenno> n> function bla() { console.log(this.x); }; [bla.bind({x: 23})(), bla.bind({x: 42})()]
[18:12:55] <jellobot> (okay) 23 42 [ undefined, undefined ]
[18:13:05] <stenno> like that
[18:13:15] <ashnur> stenno, https://imgur.com/a/zExjwjQ
[18:13:36] <farn> Yeah, I did mention that twice. I'm just talking about the default behavior of functions/methods
[18:14:03] *** Quits: gggp (~gggp@123.113.180.251) (Ping timeout: 258 seconds)
[18:14:32] <stenno> ok
[18:18:43] *** Joins: wyclif (~wyclif@user/wyclif)
[18:19:14] *** gggp_ is now known as gggp
[18:21:05] *** Quits: arthurpbs_ (~arthurpbs@168.121.99.67) (Ping timeout: 252 seconds)
[18:21:59] *** Joins: gggp_ (~gggp@60.10.194.47)
[18:25:10] *** Quits: gggp (~gggp@60.10.23.164) (Ping timeout: 268 seconds)
[18:25:36] *** Joins: paule32_ (~paule32@user/paule32)
[18:26:35] *** gggp_ is now known as gggp
[18:29:08] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 255 seconds)
[18:33:01] *** Joins: johtso (~johtso@92.40.194.150.threembb.co.uk)
[18:34:08] *** Joins: paule32__ (~paule32@user/paule32)
[18:35:44] <johtso> are there any nodejs equivalents to Python's FastAPI? i.e. define your types and get automatic validation.. and also OpenAPI generation so you can then automatically generate your client?
[18:38:20] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 272 seconds)
[18:40:25] *** Joins: gggp_ (~gggp@221.219.70.176)
[18:43:44] *** Quits: gggp (~gggp@60.10.194.47) (Ping timeout: 252 seconds)
[18:45:55] *** Joins: zebrag (~chris@user/zebrag)
[18:46:30] *** Joins: mrdata (~mrdata@user/mrdata)
[18:48:56] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[18:49:55] *** Joins: Deide (~Deide@217.155.19.23)
[18:49:55] *** Quits: Deide (~Deide@217.155.19.23) (Changing host)
[18:49:55] *** Joins: Deide (~Deide@user/deide)
[18:51:33] <ashnur> don't think so, but would like to know about it if it exists
[18:54:07] *** Joins: debsan (~debsan@2800:810:471:2ee::1000)
[18:54:22] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[18:55:00] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[18:56:39] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:57:57] <johtso> ashnur: fastapi mentions nestjs as having similar goals https://fastapi.tiangolo.com/alternatives/#nestjs-and-angular
[18:59:43] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[19:04:57] *** Quits: codingcampbell (~codingcam@user/codingcampbell) (Quit: codingcampbell)
[19:05:52] *** Joins: earendel (uid498179@user/earendel)
[19:06:06] *** Joins: codingcampbell (~codingcam@user/codingcampbell)
[19:13:11] *** Joins: fl (~fl@95.180.86.189)
[19:15:56] *** Joins: gggp__offline (~gggp@125.33.82.124)
[19:17:00] *** gggp__offline is now known as gggp
[19:17:01] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Remote host closed the connection)
[19:17:23] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[19:19:04] *** Quits: gggp_ (~gggp@221.219.70.176) (Ping timeout: 246 seconds)
[19:19:11] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Read error: Connection reset by peer)
[19:19:28] *** Quits: Safa_[A_Boy] (~Safa@89.148.34.71) (Quit: Leaving)
[19:27:37] *** Joins: xse (~xse@user/xse)
[19:28:20] *** Joins: Dorward (~dorward@daviddorward.plus.com)
[19:29:38] *** Quits: Dorward_ (~dorward@daviddorward.plus.com) (Ping timeout: 272 seconds)
[19:30:22] <earendel> "Donitz> need a function to draw curved lines" .. considered bezier curves? like https://cubic-bezier.com/ ..and that function returns function that takes values from 0 to 1 to be multiplicated with a linear y=x to result in curve https://www.irccloud.com/pastebin/NjFltgbP/bezier.js
[19:30:58] <earendel> Donitz: canvas has bezierTo function too.
[19:37:21] *** Joins: mydog2 (~mydog2@74.175.240.241)
[19:37:42] <mydog2> morning
[19:42:48] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[19:45:55] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[19:46:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:49:15] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:56:59] *** Joins: gggp_ (~gggp@60.10.194.47)
[20:00:05] *** Quits: gggp (~gggp@125.33.82.124) (Ping timeout: 252 seconds)
[20:02:16] *** Joins: iomari891 (~iomari891@105.112.138.38)
[20:05:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[20:13:09] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a854:e052:4466:161b)
[20:18:45] *** Joins: wyclif (~wyclif@user/wyclif)
[20:19:15] *** Joins: gggp__offline (~gggp@60.10.194.47)
[20:22:11] *** Quits: gggp_ (~gggp@60.10.194.47) (Ping timeout: 252 seconds)
[20:22:51] *** Joins: gggp (~gggp@60.10.194.47)
[20:24:01] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[20:24:27] *** Joins: arthurpbs (~arthurpbs@168.121.99.168)
[20:24:42] *** Quits: gggp__offline (~gggp@60.10.194.47) (Ping timeout: 240 seconds)
[20:25:22] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[20:25:54] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:35:54] *** Joins: kmh (~kmh@p200300df5f30ad00c00521c3c33cf4ab.dip0.t-ipconnect.de)
[20:39:47] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[20:40:17] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:40:50] *** Joins: gggp_ (~gggp@60.10.194.47)
[20:43:04] <shan> why were array comprehensions removed from JS
[20:43:31] <wroathe> shan: What do you need them for?
[20:43:39] <shan> wroathe: just curious
[20:44:10] <wroathe> Well, if you don't have a concrete use case that another feature wouldn't be suitable to solve then you probably have your answer.
[20:44:20] <wroathe> A language doesn't need to have every possible feature under the sun
[20:44:22] *** Quits: gggp (~gggp@60.10.194.47) (Ping timeout: 272 seconds)
[20:44:25] <shan> fair
[20:44:27] <earendel> wrotathe u shalow fuck.
[20:44:32] *** Joins: gggp__offline (~gggp@123.113.180.251)
[20:45:13] <earendel> intersection, union, exclusion etc.
[20:45:48] <shan> :0
[20:47:11] <silly_> oh look he's back. i already thought he grew up
[20:47:41] <nedbat> shan: were they removed?
[20:47:44] *** Quits: gggp_ (~gggp@60.10.194.47) (Ping timeout: 255 seconds)
[20:48:45] *** Joins: noobly (~noobly@50.38.126.25)
[20:49:02] *** gggp__offline is now known as gggp
[20:49:35] <earendel> silly_: you go ass to mouth?
[20:49:40] <earendel> just curious.
[20:49:51] <shan> nedbat: deprecated
[20:50:14] *** Joins: gggp_ (~gggp@60.10.23.164)
[20:51:32] <nedbat> shan: i guess you mean that it was proposed but never adopted? It wasn't part of an adopted standard, was it?
[20:51:47] *** Quits: mertyildiran (~mertyildi@88.243.1.174) (Ping timeout: 255 seconds)
[20:52:02] <shan> nedbat: oh shit you're right
[20:53:31] *** Quits: gggp (~gggp@123.113.180.251) (Ping timeout: 258 seconds)
[20:53:53] <wroathe> silly_: Who's back?
[20:55:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[20:56:13] *** Quits: iffraff (~quassel@136.49.178.170) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:57:03] *** Joins: hygl (uid16621@id-16621.tinside.irccloud.com)
[21:01:42] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[21:02:11] *** jmcantre1 is now known as jmcantrell
[21:02:40] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Client Quit)
[21:02:50] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[21:03:18] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[21:03:42] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[21:04:55] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[21:05:17] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[21:06:01] <silly_> not you. him. lord earendel himself. you, i know, will never grow up
[21:06:22] <silly_> who.. the who!
[21:07:13] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[21:08:27] *** Joins: wyclif (~wyclif@user/wyclif)
[21:08:56] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 252 seconds)
[21:12:22] *** ChanServ sets mode: +o theskillwithin
[21:12:28] *** earendel was kicked by theskillwithin (Your behavior is not conducive to the desired environment.)
[21:12:32] *** Joins: inom (~inom@176.59.102.225)
[21:13:05] <silly_> oh no, where's the fun with that?
[21:13:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:14:11] *** ChanServ sets mode: -o theskillwithin
[21:15:05] *** Quits: paule32__ (~paule32@user/paule32) (Read error: Connection reset by peer)
[21:15:30] *** Joins: paule32__ (~paule32@user/paule32)
[21:16:46] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[21:18:50] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[21:26:15] *** Joins: wyclif (~wyclif@user/wyclif)
[21:28:33] *** jaamro is now known as femtopuff
[21:31:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[21:34:08] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Quit: Atum_)
[21:34:48] *** Joins: Atum_ (IRC@user/atum/x-2392232)
[21:35:31] *** Quits: fl (~fl@95.180.86.189) (Quit: Leaving)
[21:35:57] *** Joins: paule32_ (~paule32@user/paule32)
[21:37:54] *** Joins: qswz (~caub@91-175-196-225.subs.proxad.net)
[21:38:32] <qswz> n> new Date(-1973*365.25*24*3600_000)
[21:38:33] <jellobot> (okay) -000004-12-16T18:00:00.000Z
[21:39:04] <qswz> what, I'm 4 yearsoff?
[21:39:13] <qswz> oh yea 1973 lol, it's 1970
[21:39:40] <Donitz> is there any reason not to extend CanvasRenderingContext2D?
[21:39:50] <Donitz> oh wait, it doesn't work
[21:39:58] <Donitz> since you don't get to pick which one you use
[21:40:04] <qswz> n> new Date(-1970*365.2425*24*3600_000)
[21:40:04] <jellobot> (okay) 0000-01-01T06:36:00.001Z
[21:40:06] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 272 seconds)
[21:40:36] <qswz> Jan the 1th at 6AM after Jesus
[21:40:54] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 265 seconds)
[21:41:04] <Donitz> can you add new function to a 2d context without overriding it's prototype
[21:41:08] <Donitz> what alternatives are there
[21:41:12] <Donitz> its*
[21:41:22] <qswz> make functions
[21:41:22] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[21:41:33] <qswz> that take tontext as argument
[21:41:37] <qswz> context*
[21:41:39] <wroathe> ^
[21:41:45] <Donitz> that's not terribly convenient tho. Oh well
[21:42:01] <silly_> *but i want to extend native globals :P
[21:42:03] <Donitz> I want to make a curvedLineTo(x, y, radius) function
[21:42:03] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[21:42:24] <wroathe> const curvedLineTo = (context, x, y, radius) =>
[21:42:28] <qswz> you like `this` too much
[21:42:29] <Donitz> yes I know
[21:42:34] <Donitz> but there is internal state too
[21:42:38] <Donitz> which makes it all so annoying
[21:43:06] <qswz> a helper function should be pure
[21:43:10] <qswz> make it minimal
[21:43:11] <Donitz> It can not be
[21:43:12] <wroathe> Or better yet, const curvedLineTo = (x, y, radius, context) =>
[21:43:48] <Donitz> it would be curvedLineTo(x0, y0, x1, y1, x, y, radius)
[21:43:54] <Donitz> and at that point you may as well not bother
[21:43:55] *** Quits: inom (~inom@176.59.102.225) (Quit: WeeChat 3.1)
[21:44:10] *** Joins: inom (~inom@176.59.102.225)
[21:44:12] <wroathe> Why?
[21:44:22] <Donitz> because the entire point of helper functions is to HELP
[21:44:26] *** Joins: wyclif (~wyclif@user/wyclif)
[21:44:45] <Donitz> very helpful having to manually keep track of 4 previous states
[21:44:49] *** Quits: johtso (~johtso@92.40.194.150.threembb.co.uk) (Quit: Client closed)
[21:45:04] <wroathe> How does pinning the function on the prototype avoid that?
[21:45:13] <Donitz> because you can store the state in the context
[21:45:15] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[21:45:29] <wroathe> Donitz: You can still do that. You've got the context as a parameter.
[21:45:40] <Donitz> mmm, I guess
[21:46:03] <Donitz> tho I still need to override moveTo, and lineTo as well
[21:46:20] <Donitz> which I could just have replaced in an extended context, calling super
[21:46:22] <wroathe> Donitz: And if you order the parameters like I'm recommending you can make use of composition to avoid having to mention the context in each call.
[21:48:11] <wroathe> const curvedLineTo = (x, y, radius, context) => { const doCurvedLineTo = context => { ... }; return context === undefined ? doCurvedLineTo : doCurvedLineTo(context); } // naive currying
[21:48:15] <Donitz> maybe I should just make a class CurvedLineHelper { constructor(context) { ... beginPath closePath lineTo moveTo curvedLineTo
[21:48:41] <wroathe> compose(curvedLineTo(3, 4, 9), moveTo(9, -3), ...)(context);
[21:49:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:49:46] <Donitz> that's not very efficient tho
[21:49:54] <Donitz> this is something you may be doing in requestAnimationFrame
[21:50:11] <Donitz> getting a new object all the time isn't that good
[21:50:26] <wroathe> A new object? I'm not suggesting immutability.
[21:50:55] <Donitz> compose does use the spread operator
[21:51:00] <Donitz> creating new objects inherently
[21:51:15] <wroathe> That wasn't meant to be the spread operator. I was just using that to denote further operations
[21:51:23] <Donitz> I mean, compose uses the spread operator
[21:51:24] <wroathe> It's pseudocode
[21:51:51] <Donitz> oh wait
[21:51:55] <Donitz> that was just the example in this article
[21:52:11] <Donitz> const compose = (...functions) => args => functions.reduceRight((arg, fn) => fn(arg), args);
[21:52:13] *** Quits: inom (~inom@176.59.102.225) (Quit: WeeChat 3.1)
[21:52:29] *** Joins: inom (~inom@176.59.102.225)
[21:52:45] *** Quits: inom (~inom@176.59.102.225) (Client Quit)
[21:53:00] *** Joins: inom (~inom@176.59.102.225)
[21:53:13] <wroathe> You'd be creating new functions, but that's fairly lightweight. And at the end of the day, this is just a helper to avoid needing to mention "context" in over and over again (which you would have to do in an OOP context anyway).
[21:53:24] <wroathe> context.curvedLineTo(...) context.moveTo(...)
[21:53:43] <wroathe> vs curvedLineTo(..., context); moveTo(..., context)
[21:54:01] *** Quits: inom (~inom@176.59.102.225) (Client Quit)
[21:54:08] *** Joins: iomari891 (~iomari891@105.112.138.38)
[21:54:10] <Donitz> is there any issues with the class based approach
[21:54:13] <Donitz> which creates a helper once
[21:54:19] *** Joins: inom (~inom@176.59.102.225)
[21:55:56] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 272 seconds)
[21:56:30] *** Joins: clf59 (~clf59@user/clf59)
[21:57:11] <wroathe> Donitz: I sensed you were driving at that all along. You're not yet ready to take the leap and try a functional approach. :P I just wanted to make you aware of some potential alternatives.
[21:58:38] <wroathe> Donitz: The main benefit I can think of to this is that you don't need a pointless "instance" of a helper. The functions are already implicitly available and usable as helpers.
[21:58:52] <wroathe> Donitz: And can be tested in isolation without needing to create that instance.
[21:59:46] *** clf59 is now known as whytwulf
[22:00:05] <Donitz> yes, but it's also a kinda new way of doing things. I'm purpsefully trying to copy the old method when you use context
[22:00:16] <Donitz> to make it easy to understand
[22:00:35] <wroathe> Donitz: I suspect this mainly comes down to syntactical familiarity for you and others. Some people get a warm and fuzzy feeling from using the "." operator and binding a context to a function.
[22:00:44] <wroathe> Hard to shake that feeling.
[22:01:09] *** Quits: whytwulf (~clf59@user/clf59) (Client Quit)
[22:01:10] <Donitz> using a class, it would somewhat end up like
[22:01:10] *** Joins: wyclif (~wyclif@user/wyclif)
[22:01:29] <wroathe> const ch = new ContextHelper(context);
[22:01:33] <Donitz> ctx.beginPath(), helper.moveTo(x, y), helper.curvedLineTo(x, y)
[22:02:14] <Donitz> or maybe just
[22:02:18] <Donitz> helper.lineTo(x, y, radius)
[22:02:36] <Donitz> radius being the circular curve radius from the previus line
[22:02:36] <wroathe> const lineTo = (x, y, radius, context) =>
[22:02:51] <Donitz> yeah but then you got the state
[22:02:51] <wroathe> lineTo(3, 4, 5, context);
[22:02:58] <Donitz> and I'm not really comfortable storing things in context tbh
[22:03:12] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[22:03:29] <wroathe> Donitz: Ah. See, there's the rub.
[22:04:02] <wroathe> I don't know what this thing is you're tryign to build, but I would pin that context onto another object and pass that through the functions then
[22:04:24] <wroathe> For example: const drawing = { context }; lineTo(3, 4, 5, drawing);
[22:04:36] <Donitz> but then why not store the functions together with that object
[22:04:44] <Donitz> instead of basically poluting the namespace when imported
[22:04:49] <Donitz> eh
[22:04:55] <wroathe> Donitz: With modules you're not polluting anything.
[22:05:06] <wroathe> Donitz: You're trying to use a class as a substitute for a module
[22:05:10] <Donitz> I mean, if you import a lot of functions you sorta polute the module namespace
[22:05:14] <qswz> helpers.lineTo(ctx, x, y, r)
[22:05:33] <wroathe> Donitz: That's a sign you need to split up your module. I can't say I've ever run into that problem
[22:05:41] <qswz> import * as helpers from './helpers';
[22:05:50] <Donitz> Three.js uses THREE.*
[22:05:53] <Donitz> which I find very nice
[22:05:58] *** Joins: Crassus (~Crassus@user/crassus)
[22:06:01] <wroathe> Yeah, qswz's suggestion is a good one
[22:06:12] <wroathe> Although I typically just import individual names, and alias if there would be a collision
[22:06:33] *** Quits: gggp_ (~gggp@60.10.23.164) (Ping timeout: 268 seconds)
[22:06:46] <wroathe> import { copyLineTo, moveTo as moveObjectTo } from './drawing-helpers';
[22:07:22] <wroathe> Donitz: But if you're running into lots of collisions in a single module that's usually a sign that your module has gotten too big and has too many dependencies.
[22:07:44] <Donitz> I don't run into collisions, but I also never import functions
[22:07:47] <Donitz> only ever classes
[22:07:47] <wroathe> Donitz: Again, not forcing you to take this path. Just want you to be aware that there's an alternative to this OOP thing :P
[22:07:52] <Donitz> or collections such as THREE
[22:08:08] *** Quits: xse (~xse@user/xse) (Quit: mwah)
[22:08:35] <Donitz> I generally do the same in python
[22:08:44] <wroathe> Donitz: Well, try it sometime. Importing and using functions without all of the other OOP plumbing gets quickly addictive :P
[22:09:38] <wroathe> The worst thing I see is classes where all of the methods are static in a language that supports modules
[22:09:40] *** Joins: clf59 (~clf59@user/clf59)
[22:09:47] <wroathe> It's like "That's cute"
[22:09:59] <Donitz> it's just a natural container
[22:10:08] <wroathe> Donitz: That's the point of modules
[22:10:13] <wroathe> "natural" containers
[22:10:31] <Donitz> yes, but you don't need to worry about any long import statement
[22:10:39] <Donitz> just import the default
[22:10:41] <Donitz> and that's it
[22:11:19] <wroathe> Donitz: If you're really addicted to the syntax you can just follow qswz's suggestion: import * as FooHelpers from './foo';
[22:11:31] <wroathe> FooHelpers.myOtherwiseStaticMethod
[22:11:46] *** Quits: clf59 (~clf59@user/clf59) (Client Quit)
[22:11:51] <wroathe> Donitz: Fight the OOP urge :P
[22:11:53] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 255 seconds)
[22:12:48] <qswz> don't drink the oop's soop
[22:13:47] <qswz> it has indigest instances in it
[22:16:20] <systemfault> OOP is optimized as F in JS though.
[22:16:38] <wroathe> systemfault: In what sense?
[22:17:21] <systemfault> wroathe: Pretty much at the VM level, the fastest scenario is when your objects are mapped as "hidden classes"
[22:17:30] <systemfault> Mutability is fast too...
[22:17:53] <Deide> I don't think having a "namespace object" really counts as OOP. But like was mentioned, you don't need to resort to that anymore when you have access to the modules feature.
[22:17:55] <wroathe> systemfault: That would just avoid the need for a table lookup to find a function at runtime, which functions on modules will never need anyway
[22:18:37] <wroathe> Deide: The exporting of a class with static methods from a module was the silly behavior I was trying to push back against (most recently in the conversation, anyway)
[22:18:49] *** Quits: inom (~inom@176.59.102.225) (Quit: WeeChat 3.1)
[22:18:49] <wroathe> (only static methods, anyway)
[22:19:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[22:19:36] <wroathe> systemfault: Hard to get much more optimized than just calling a function. If anything, optimizations to OOP is trying to get credit for putting out a fire they've caused in this scenario :P
[22:19:52] <Deide> Static methods in JS are just functions attached to a plain object instead of a prototype.
[22:19:57] <wroathe> And for hot paths JS will inline some of those functions
[22:20:03] <wroathe> Deide: Yup.
[22:20:16] <wroathe> Deide: Which is why doing that instead of exporting them from a module is silly
[22:20:43] *** Joins: inom (~inom@176.59.102.225)
[22:21:36] <Deide> I agree, but my main point was that it's only superficially resembling OOP.
[22:22:14] *** Quits: inom (~inom@176.59.102.225) (Client Quit)
[22:23:10] *** Joins: han-solo (~hanish@user/han-solo)
[22:23:27] <Deide> Another benefit to using modules over a namespace object is being able to easily eliminate functions that are never used when it comes to building your bundle(s).
[22:23:33] *** Joins: inom (~inom@176.59.102.225)
[22:25:44] *** Joins: stenno (~stenno@user/stenno)
[22:28:17] <Deide> And if you want to import just the functions you're using instead of the "qualified access" like `import * as SomeNamespace from ...`, you can alias individual imports the same way: `import {someFunc as someAliasedFunc} from ...`.
[22:28:45] <wroathe> Deide: Yeah, I brought that up earlier.
[22:28:52] <wroathe> Deide: Just a few minutes ago
[22:29:24] <wroathe> Moral of the story: modules full of plain old functions are awesome
[22:30:17] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[22:31:08] *** Quits: inom (~inom@176.59.102.225) (Quit: WeeChat 3.1)
[22:31:22] *** Quits: arash (~arash@5.123.115.167) (Ping timeout: 240 seconds)
[22:31:36] *** Joins: Intelo (~Intelo@88.246.74.132)
[22:31:47] *** Joins: inom (~inom@176.59.102.225)
[22:33:52] *** Joins: wyclif (~wyclif@user/wyclif)
[22:35:48] *** Joins: arash (~arash@5.123.115.167)
[22:38:23] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[22:38:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[22:39:58] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[22:42:03] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[22:49:14] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 255 seconds)
[22:49:55] *** Joins: wyclif (~wyclif@user/wyclif)
[22:50:36] <Donitz> ah
[22:50:43] <Donitz> closePath only closes the current sub-path
[22:50:44] <Donitz> TIL
[22:55:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[23:06:57] *** Joins: wyclif (~wyclif@user/wyclif)
[23:07:53] *** Quits: Hanii (~textual@host86-184-47-37.range86-184.btcentralplus.com) (Quit: Textual IRC Client: www.textualapp.com)
[23:11:43] *** Joins: Betal (~Beta@user/betal)
[23:13:05] *** Quits: Kofid (~Kofid@2601:404:d300:5a0:fcbf:c290:5998:a5c6) (Quit: Client closed)
[23:13:43] <pulse> what's a good way to have a 2-key map in JS
[23:14:05] <silly_> lol wat?
[23:14:18] <silly_> you can use arrays and objects as keys in Maps
[23:15:00] <silly_> what are you trying to do?
[23:15:32] <pulse> oh, right
[23:15:41] <pulse> i'm trying to store data based on 2 keys
[23:16:07] <pulse> so each pair of keys maps to a single value
[23:16:29] <pulse> i got it now though, nvm
[23:19:10] <stenno> imagine tuples
[23:21:58] <pulse> if you do map[[a,b]] = c it becomes map[String([a, b])] = c which then is the same as map[a + "," + b] = c
[23:22:11] <pulse> bit silly
[23:23:18] *** Joins: codebam (~codebam@user/codebam)
[23:24:12] <stenno> use .set instead
[23:24:24] <wroathe> You're a bit silly.
[23:24:26] <pulse> it's preferable to just do if (map[a]) { map[a] = {}; } map[a][b] = c
[23:24:56] <stenno> n> const foo = new Map(); const ary = [1,2,3]; foo.set(ary,3); foo.get(ary)
[23:24:57] <jellobot> (okay) 3
[23:25:26] <pulse> yeah, that works too
[23:25:34] <farn> n> const foo = new Map(); foo.set([1,2,3],3); foo.get([1,2,3])
[23:25:34] <jellobot> (okay) undefined
[23:25:38] <farn> it's not all that useful in practice
[23:25:49] <pulse> yeah that's just silly
[23:26:13] <pulse> imagine all the head scratching this causes if you don't understand how references work in JS
[23:26:15] <stenno> yes, thats why i assigned it to a value
[23:26:18] <stenno> er
[23:26:21] <stenno> to a variable
[23:26:33] <stenno> tuples and records will fix that
[23:26:35] <pulse> my approach works with any array :p
[23:26:35] <stenno> stage-2
[23:26:44] <stenno> https://github.com/tc39/proposal-record-tuple
[23:26:45] <pulse> err even array, 2 values
[23:26:54] <stenno> tuples/records and map/sets are really good friends
[23:27:28] <wroathe> It's a bit odd that Map was shipped without the ability to specify a custom "key" function (for mapping your compound object to a type that can be effectively compared with Object.is)
[23:27:36] <stenno> agreed
[23:27:53] <stenno> or maybe even better, make it a well-known symbol
[23:28:07] <Donitz> is it okay to set array.length directly
[23:28:10] <Donitz> or is it a bad idea
[23:28:20] <pulse> my intuition says it's bad
[23:28:24] <Donitz> hmm
[23:28:25] <pulse> but i don't actually know
[23:28:36] <pulse> why would you ever want that
[23:28:50] <Donitz> because I want a growing array when it's too small
[23:28:51] <pulse> actually i think it's legit
[23:28:59] <pulse> i remember seeing some code samples that grew the array that way
[23:29:10] <wroathe> Donitz: It will automatically grow as you insert new elements into it
[23:29:16] <wroathe> Donitz: That's not a detail you need to micromanage yourself
[23:29:24] <stenno> n> const foo = new Map(); const ary = [1,2,3]; foo.set(ary,3); console.log([...foo.keys()])
[23:29:24] <jellobot> (okay) [ [ 1, 2, 3 ] ]
[23:29:51] <pulse> silly JS, it has no .reserve
[23:29:51] <Donitz> I want to set the length when it's too small only
[23:29:59] <Donitz> and not repeat both setting and pushing elements
[23:30:17] <wroathe> Donitz: Can you share an example of what problem this would solve?
[23:30:28] <stenno> pulse: if you do mapInstance['foo'], you are checking the foo attribute of the map object itself if that makes sense to you
[23:30:37] <Donitz> the problem is, I want an ever growing cache array of coordinates, which never shrinks
[23:30:41] <Donitz> but grows to fit the required data
[23:30:46] <wroathe> n> const a = []; a[15] = 34; console.log(a);
[23:30:46] <jellobot> (okay) [ <15 empty items>, 34 ]
[23:30:48] <Donitz> which is cleared sporadically
[23:30:50] <pulse> stenno, i already figured it out
[23:31:23] <wroathe> n> const a = []; a.push(15, 16, 17); console.log(a);
[23:31:23] <jellobot> (okay) [ 15, 16, 17 ]
[23:31:50] *** Joins: sillyslux__ (~silly@user/silly)
[23:31:50] <wroathe> Donitz: Again, this isn't a detail you need to or should micromanage yourself.
[23:32:07] <Donitz> this is a detail which can affect performance depending on the implementation of array
[23:32:35] <wroathe> Donitz: And have you ascertained that array isn't performing as well as you need it to?
[23:32:36] <Donitz> but I feel like I've explained my concerns many times in the past. real-time clearing and filling of large arrays
[23:32:45] <Donitz> It depends on implementation
[23:32:49] <Donitz> so I assume the worst
[23:33:47] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 255 seconds)
[23:33:52] <pulse> only way to test is to benchmark
[23:33:55] <wroathe> Donitz: https://v8.dev/blog/elements-kinds
[23:35:13] <Donitz> "Nowadays, the performance of both for-of and forEach is on par with the old-fashioned for loop."
[23:35:14] <Donitz> Bull
[23:35:23] <Donitz> I've personally seen a noticable performance loss with forEach
[23:35:37] <wroathe> Yeah, what would the v8 developers know about it anyway
[23:35:39] <wroathe> Those jabronis
[23:35:54] <Donitz> Is firefox currently using V8?
[23:36:30] <farn> Firefox uses SpiderMonkey
[23:36:34] <farn> Chromium and Node use V8
[23:36:37] <Donitz> ah
[23:36:49] <farn> Safari use JavaScriptCore
[23:36:51] <farn> nothing else matters
[23:37:05] <Donitz> yes, chrome is significantly faster than ff
[23:37:08] <Donitz> for most benchmarks I've done in js
[23:37:30] <pulse> v8 devs probably microdose lsd
[23:37:55] <pulse> either that, or they have summoned ancient demons
[23:37:59] <Donitz> but that just goes back to: It depends on implementation
[23:38:14] <pulse> something ain't right. a dynamic language isn't supposed to be that fast
[23:38:54] *** Joins: pavonia (~user@user/siracusa)
[23:38:58] <farn> Donitz: Right, but you are apparently assuming that setting the length manually can only make things better and not worse. The blog post explains why that might not be the case
[23:39:12] <Donitz> that is just common sense
[23:39:16] <Donitz> you are exchanging memory for performance
[23:39:25] <Donitz> it would not make sense for it to make it worse
[23:39:49] <farn> https://v8.dev/blog/elements-kinds#packed-vs.-holey-kinds
[23:39:57] <Donitz> it's packed
[23:41:24] <farn> So you're never setting the length to a larger value that it already had?
[23:41:52] <Donitz> right now I just push in placeholder values if it's too small
[23:41:59] <Donitz> then set values by index
[23:42:36] <farn> I thought this is what we were talking about here: "is it okay to set array.length directly"
[23:42:45] <Donitz> while (array.length < nPoints) array.push(null)
[23:42:52] <Donitz> yes, I wonder if that would be better
[23:42:56] <Donitz> so maybe it would not be
[23:43:41] <wroathe> For someone who doesn't know that array.fill exists you've sure got a lot of opinions on how a particular JS implementation will perform :P
[23:43:43] <Donitz> though it doesn't make sense imo that setting length should make it holey
[23:43:47] <Donitz> that would be silly
[23:44:01] <Donitz> how is array fill relevant?
[23:45:10] <wroathe> n> console.log(Array(10).fill(null))
[23:45:11] <jellobot> (okay) [   null, null, null,   null, null, null,   null, null, null,   null ]
[23:45:42] <Donitz> Yes, how is that relevant
[23:45:48] <farn> If your setting the length creates empty slots, it makes a lot of sense that it makes it holey. That's what holey means
[23:46:03] <wroathe> Donitz: It's relevant because it's far easier than writing a loop to do the exact same thing
[23:46:03] *** Quits: Simplar (~Simplar@188.163.94.202) (Quit: Going offline, see ya! (www.adiirc.com))
[23:46:06] <Donitz> I need to grow an array, not fill it with a value
[23:46:14] <Donitz> the value is irrelevant
[23:46:14] <stenno> n> const length = 10; Array.from({length}, (_,i) => i)
[23:46:15] <jellobot> (okay) [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
[23:46:28] <wroathe> Yeah, or that
[23:46:43] <Donitz> yes, a lot of nice array construction methods
[23:46:48] <Donitz> though I need to grow an existing array
[23:50:56] *** Quits: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com) (Quit: Goodbye)
[23:51:01] <pulse> do you prefer !!x or Boolean(x)
[23:51:36] *** Joins: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com)
[23:51:36] <pulse> i suppose the latter is more readable
[23:52:21] *** Quits: Heraes (~Heraes@user/romarain) (Quit: Leaving)
[23:52:57] <farn> readability is subjective but I do prefer Boolean for its explicitness
[23:53:26] <stenno> i think you can actually do aforementioned .key() function with symbols
[23:55:45] <pulse> maybe beaky, although he seems to be almost too nice at times
[23:55:55] <pulse> i guess that's what too much tea does to a person
[23:57:46] <farn> wrong channel?
[23:57:59] <pulse> ehhhh :D
[23:58:00] <pulse> sorry
[23:58:06] <pulse> yes wrong chan
[23:58:12] <farn> although I prefer something like x > 0 or x != null over Boolean(x) when it makes sense
[23:58:33] <pulse> well my expression is already weird to begin with
[23:58:44] <pulse> return Boolean(list[x] && list[x][y])
[23:59:17] *** Joins: Pacific_ (~arash@5.123.115.167)
