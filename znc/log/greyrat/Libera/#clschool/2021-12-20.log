[00:28:52] *** Joins: pjb (~pjb@user/pjb)
[00:31:17] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[01:01:51] <CodeBitCookie[m]> Hello Everyone!
[01:02:12] <CodeBitCookie[m]> I am just asking if there is any way to shorten this type of code:
[01:02:27] * CodeBitCookie[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/391ca5e01c3930685fddca2d69c00c1e8443ec8a
[01:02:32] <CodeBitCookie[m]>  * ```... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/4f69074613b2f37985abb2aa30dd728bbbf27b38)
[01:26:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[01:48:02] *** Joins: pjb (~pjb@user/pjb)
[02:09:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:20:37] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:36:32] *** Quits: winningluser (~wl@2601:8c1:80:70d0::e17b) (Quit: nyaa~)
[02:39:08] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 256 seconds)
[03:17:02] *** Quits: Jing_ (~hedgehog@2604:a840:3::103b) (Remote host closed the connection)
[03:17:41] *** Joins: Jing (~hedgehog@2604:a840:3::103b)
[03:19:16] <edgar-rft> CodeBitCookie[m]: this is what I think -> https://plaster.tymoon.eu/view/2784
[03:23:04] <pjb> edgar-rft: +keys-pressed+ is a constant variable, so assumedly, the results of the tests are always the same.  Therefore the tests are useless.  Just write the incf and decf you need.
[03:24:54] <edgar-rft> I think that +keys-pressed+ is a typo based on newbie confusion and *not* a constant because otherwise the code would not make much sense.
[03:25:10] <pjb> indeed :-)
[03:28:23] <edgar-rft> also FIND does not find multiple ocurrences of :W :A :S or :D in +KEYS-PRESSED+ for example
[03:51:49] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[03:58:18] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[04:22:29] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:32:20] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[04:56:10] *** Quits: Jing (~hedgehog@2604:a840:3::103b) (Remote host closed the connection)
[04:56:59] *** Joins: Jing (~hedgehog@2604:a840:3::103b)
[05:03:37] *** Joins: Oladon (~olad@98.43.81.226)
[06:03:25] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:43:38] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:53:57] *** Quits: sts-q (~sts-q@91.200.108.219) (Ping timeout: 240 seconds)
[07:07:08] *** Joins: sts-q (~sts-q@212.53.219.250)
[07:31:10] <beach> Good morning everyone! 
[09:22:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[10:05:24] *** Joins: spiaggia (~user@2a01:cb19:150:3400:d48d:b9a:d80a:a0af)
[10:12:50] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[10:13:00] <st_iron> good morning
[10:14:08] <spiaggia> Hello st_iron.
[10:18:05] *** Joins: treflip (~user@user/treflip)
[11:03:01] *** Joins: shka (~herr@109.231.0.226)
[11:10:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:36:16] *** Quits: spiaggia (~user@2a01:cb19:150:3400:d48d:b9a:d80a:a0af) (Quit: ERC (IRC client for Emacs 26.3))
[11:50:17] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[12:41:46] *** Quits: Jing (~hedgehog@2604:a840:3::103b) (Remote host closed the connection)
[12:42:26] *** Joins: Jing (~hedgehog@2604:a840:3::103b)
[13:30:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[13:32:16] *** Joins: aeth (~aeth@user/aeth)
[13:46:29] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[13:58:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[15:34:23] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[16:18:36] *** Joins: random-nick (~random-ni@87.116.180.98)
[16:27:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[16:29:22] *** Joins: aeth (~aeth@user/aeth)
[17:20:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:25:54] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:30:17] <CodeBitCookie[m]> Hello Everyone!
[19:30:39] <CodeBitCookie[m]> A small question; When should I use ELT vs AREF?
[19:33:37] <rotateq> hi CodeBitCookie[m] 
[19:33:48] <rotateq> ELT is very generic
[19:34:22] <rotateq> so as code reading is also about giving the reader your right intention, as needed :)
[19:34:43] <rotateq> and AREF surely just works on arrays
[19:35:22] <CodeBitCookie[m]> so when else could we use ELT
[19:35:30] <CodeBitCookie[m]> * rotateq: so when, * use ELT?
[19:35:39] <rotateq> hmm
[19:35:52] <CodeBitCookie[m]> Or rather, what intentions are we giving when using one over the other?
[19:35:53] <rotateq> i just have to think a bit
[19:36:11] <rotateq> NTH is afair just for lists and ELT for sequences
[19:36:37] <rotateq> with AREF you tell "oh that definitely an array which is worked on here"
[19:37:06] <beach> OK, hold on a sec.
[19:37:12] <CodeBitCookie[m]> Newbie question, so an array is a vector?
[19:37:22] <beach> No, a vector is an array.
[19:37:38] <beach> But some arrays are not vectors, like with a rank other than 1.
[19:37:54] <CodeBitCookie[m]> Ohhhhh
[19:38:00] <CodeBitCookie[m]> I see, it just clicked
[19:38:05] <beach> Now, ELT is a sequence function.
[19:38:13] <beach> So it works on lists and vectors.
[19:38:23] <CodeBitCookie[m]> Like when you would store a 4x4 Matrix in an array, that would not be a vector.
[19:38:33] <rotateq> CodeBitCookie[m]: As with all squares are rectangles but not the other way around. (in normal flat euclidian geometry)
[19:38:53] <beach> Correct, a 4x4 array is a 2-dimensional array, and vectors are 1-dimensional arrays.
[19:39:46] <beach> A vector may have a fill pointer.  And if it does, the fill pointer determines the LENGTH of the vector as a sequence.
[19:40:08] <beach> That can be different from the number of elements in the 1-dimensional array.
[19:40:13] <CodeBitCookie[m]> Okay
[19:40:30] <CodeBitCookie[m]> beach: wait how?
[19:40:46] <beach> Let me cook up an example...
[19:41:53] <beach> (defparameter *s* (make-array 20 :fill-pointer 10))
[19:42:03] <beach> (array-total-size *s*) => 20
[19:42:08] <beach> (length *s*) => 10
[19:42:31] <beach> So AREF can access all 20 elements, but ELT is limited by the fill pointer.
[19:43:00] <beach> Because as a sequence, *s* has only 10 elements.
[19:43:43] <beach> (aref *s* 15) => 0 [in SBCL]
[19:43:46] *** Joins: makomo (~makomo@user/makomo)
[19:43:49] <CodeBitCookie[m]> how is the rest of 10 elements represented in memory?
[19:43:59] <beach> (elt *s* 15) => error
[19:44:20] <beach> All 20 elements are sequentially represented in the vector.
[19:44:33] <beach> But the vector has an additional slot FILL-POINTER. 
[19:45:01] <beach> And ELT must check the fill pointer and signal an error if an attempt is made to access an element beyond the fill pointer.
[19:45:48] <beach> So basically, you use AREF if you don't care about fill pointers, and ELT if you do.
[19:45:56] <beach> ... for vectors that is.
[19:46:12] <CodeBitCookie[m]> So, I don't think this is a common case, in normal programs I see ELT used where AREF could be used and the other way around
[19:46:19] <CodeBitCookie[m]> Oh nvm
[19:46:21] <rotateq> got to read that by you too
[19:46:23] <CodeBitCookie[m]>  * Oh NVM
[19:47:27] <CodeBitCookie[m]> beach: What happens for Non-Vectors?
[19:48:25] <rotateq> CodeBitCookie[m]: learn by trying out :)
[19:48:42] <beach> ELT can access lists as well, but only 1-dimensional arrays.  Like I said, ELT is a "sequence function", and only 1-dimensional arrays and lists are sequences.
[19:49:18] <beach> rotateq: That's not always good advice, since the standard has many cases of undefined behavior.  It is then better to read the standard.
[19:49:38] <beach> That's why we are working on WSCL.
[19:50:05] <rotateq> beach: oh yes
[19:50:59] <rotateq> btw I wasn't truly aware of the array-total-size before you mentioned, but sometimes used fill-pointer vectors
[19:51:57] <CodeBitCookie[m]> beach: Ahhh I think I understand now.
[19:52:17] <beach> rotateq: I see.  Well, for a vector, you can also use (array-dimension *s* 0)
[19:53:00] <beach> CodeBitCookie[m]: Great!  So for instance the function CONCATENATE, if you give it *s* above, it will only consider the elements up to the fill pointer.
[19:53:30] <beach> (concatenate 'simple-vector *s* '(a b)) => (0 0 0 0 0 0 0 0 0 0 a b)
[19:53:42] <CodeBitCookie[m]> Ahhhhhh that is why I was having problems with strings as arrays
[19:54:02] <beach> What problems?
[19:54:05] <rotateq> ah right, cause I was confused, resetting fill-pointer for an already adjusted vector, then with LENGTH not really what i expected
[19:55:06] <rotateq> beach: And I'm sure WSCL will do greatly with also good examples, and I often have the situation that a description is for my understanding a bit too technical then or I don't really know where to read on.
[19:55:50] <beach> Well, that's because the standard is mainly meant for people who create Common Lisp implementations, and not mainly for application programmers.
[19:56:30] <beach> We need a Common Lisp "language reference" for the application programmers, and maybe now that scymtym has a parser for the dpANS, we can start thinking about such a thing.
[19:56:44] <beach> ... because it would reuse large parts of the standard.
[19:57:24] <rotateq> yes very much of the work has been done by very smart people
[19:58:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:02:03] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[20:02:16] *** Joins: treflip (~user@user/treflip)
[20:10:23] <beach> CodeBitCookie[m]: What problems do you have with strings?
[20:14:04] <CodeBitCookie[m]> beach: Oh I forgot. I was trying to make my own strings with loop and simple-vectors
[20:14:29] <CodeBitCookie[m]> Anyways that doesn't matter, next time I have a problem, Will be sure to ask here.
[20:14:36] <CodeBitCookie[m]> Thanks Everyone!
[20:17:14] <beach> Sure.  A simple vector has an ELEMENT-TYPE of T so it is not a string.  A string is a vector with ELEMENT-TYPE CHARACTER.
[20:22:14] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[20:22:28] *** Joins: treflip (~user@user/treflip)
[20:35:37] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:d101:cff8:e2d9:4ac2) (Ping timeout: 240 seconds)
[21:13:56] *** Joins: Oladon (~olad@98.43.81.226)
[21:32:36] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[21:40:53] <CodeBitCookie[m]> Oh, I see. Will look more into that.
[22:09:04] *** Quits: treflip (~user@user/treflip) (Quit: good night ✨)
[22:30:56] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[22:33:02] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[23:43:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
