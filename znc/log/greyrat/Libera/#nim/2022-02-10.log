[00:14:46] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[00:18:56] <FromDiscord> <Waldecir Santos> Yeah I tried but there is a `StrLit`  and not sure how to adapt to my scenario
[00:22:08] <Amun-Ra> I guess, the macro wizard (aka Elegantbeef) is asleep :>
[00:37:08] <FromDiscord> <kevin> Is there a good method to convert a `cstring` into a `string` if I know how long the `cstring` is?
[00:37:22] <FromDiscord> <kevin> My `cstring` may or may not have null bytes in it :/
[00:37:39] <Amun-Ra> kevin: $foo
[00:37:53] <FromDiscord> <kevin> Cuts off on null bytes in the string unforunately
[00:38:03] <FromDiscord> <kevin> so only up until the first null byte
[00:38:11] <Amun-Ra> ah
[00:40:03] <Amun-Ra> I guess newStringOfCap + .add
[00:44:42] <FromDiscord> <vindaar> @Waldecir Santos\: can you clarify what it is you're trying to do?
[00:45:00] <FromDiscord> <vindaar> normally it should be enough to just return an ident of the type you want
[00:45:25] <FromDiscord> <vindaar> doesn't matter if it's a custom type or not. Of course the type must exist (otherwise you need to generate it of course)
[00:57:05] <FromDiscord> <vindaar> @untoreh\: first of all compile with `-d:danger` instead of `--opt:speed` if you want the best performance. Second, python's string handling is relatively fast. Third, if you really want the best performance, you shouldn't use things like `split` in the first place, but rather parse and process the data at the same time
[01:10:00] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:15:46] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[01:17:36] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:20:35] <FromDiscord> <ckennedy> https://play.nim-lang.org/#ix=3Paz why does this seem to pass a copy of the `seq` (things) instead of a reference?
[01:23:54] <FromDiscord> <ckennedy> If I dereference things at the `seq.add` call site it seems work; `things[].add(...)` instead.
[01:30:43] <FromDiscord> <Elegantbeef> You're dereferencing the ref and storing it in a copy
[01:31:12] <FromDiscord> <Elegantbeef> `var a  = somRef[]` makes `a` a non reference value type
[01:31:17] <FromDiscord> <Elegantbeef> @ckennedy\: ^
[01:31:58] <FromDiscord> <Waldecir Santos> In reply to @vindaar "<@121971538898452482>\: can you clarify": I'm trying to do this https://play.nim-lang.org/#ix=3PaD
[01:32:41] <FromDiscord> <Elegantbeef> There you go
[01:32:44] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3PaE
[01:33:18] <FromDiscord> <Elegantbeef> you can also do `return bindSym $mType` i believe
[01:33:19] <FromDiscord> <Waldecir Santos> oh I thought bindSym was meant to bind functions
[01:33:39] <FromDiscord> <Elegantbeef> `bindSym` can bind any symbol on the scope of the macro
[01:33:59] <FromDiscord> <Waldecir Santos> Nice, thank you !
[01:34:54] <FromDiscord> <ckennedy> In reply to @Elegantbeef "You're dereferencing the ref": So if I'm working with a reference to a seq or array, is using `things[].add` to be expected? Or am I engaging in some kind of anti-pattern?
[01:35:26] <FromDiscord> <Elegantbeef> `[]` is to be expected, but you can always make your own `.add` it
[01:36:52] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3PaF
[01:37:59] <FromDiscord> <Elegantbeef> There is an experimental auto dereference but i'll be deprecated in afaik
[01:38:00] <FromDiscord> <vindaar> @Waldecir Santos, [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org) but you don't even need `bindSym` here
[01:38:01] <FromDiscord> <ynfle> In reply to @ckennedy "So if I'm working": You shouldn't need to deref, it automatically derefs for field accesing
[01:38:12] <FromDiscord> <Elegantbeef> `add` isnt a field
[01:38:43] <FromDiscord> <ckennedy> In reply to @Elegantbeef "`add` isnt a field": That's what I ran into, `seq.add` and `enumerate` throw an error if it's a `ref`
[01:38:58] <FromDiscord> <Waldecir Santos> In reply to @vindaar "<@121971538898452482>, [Elegantbeef](https://matrix": not sure what you mean
[01:39:02] <FromDiscord> <Elegantbeef> I showed them an example with an ident and they apparently didnt want to use it üòõ
[01:39:08] <FromDiscord> <Elegantbeef> you can do `ident"MyType"`
[01:39:27] <FromDiscord> <vindaar> Ah, missed that üòÅ
[01:39:27] <FromDiscord> <Elegantbeef> I guess you can do `return MyType.getType`?
[01:39:28] <FromDiscord> <Waldecir Santos> It didn't worked @@ let me try again
[01:39:40] <FromDiscord> <Waldecir Santos> bindSym worked
[01:39:50] <FromDiscord> <Elegantbeef> It will not work if the `MyType` is not exported
[01:39:58] <FromDiscord> <Elegantbeef> If `MyType` isnt exported then you need bindsym
[01:40:31] <FromDiscord> <Waldecir Santos> well ident is working now too, shame on me
[01:40:47] <FromDiscord> <Elegantbeef> Well if you move them to different modules it'll fail, so take that into account
[01:40:53] <FromDiscord> <Waldecir Santos> What is the diferente between `ident` and `bindSym`. ü§î
[01:41:06] <FromDiscord> <Elegantbeef> `ident` is an untyped identifier
[01:41:27] <FromDiscord> <Elegantbeef> `bindSym` finds the symbol in the scope of the macro and grabs it, holding onto a typed identifier
[01:43:35] <FromDiscord> <Waldecir Santos> Thank you !
[02:16:28] <FromDiscord> <amadan> https://play.nim-lang.org/#ix=3PaK‚ÜµWhen I return a sym to a proc it keeps complaining that I'm not using it.‚ÜµAnyone know what the issue might be?
[02:17:04] <FromDiscord> <Elegantbeef> `macro foo(x: typed): untyped =`
[02:18:56] <FromDiscord> <amadan> Epic, thanks for that‚ÜµAlways thought macros returned untyped by default
[02:47:46] <FromDiscord> <rainbowasteroids> What is the difference between `Exception` and `CatchableError`?
[02:52:21] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[02:57:14] <FromDiscord> <konsumlamm> an `Exception` is not necessarily catchable
[03:01:02] <FromDiscord> <Elegantbeef> Exceptions are catchable are they not?
[03:01:14] <FromDiscord> <Elegantbeef> Ah nvm
[03:01:36] <FromDiscord> <Elegantbeef> Exception is the base type that Defect and CatchableError come form
[03:01:58] <FromDiscord> <Elegantbeef> Defects are not to be caught and signify a programmer error, CatchableErrors are safe to catche
[03:03:37] <FromDiscord> <rainbowasteroids> So, does `except` not work on objects that don't inherit from `CatchableError`?
[03:03:58] <FromDiscord> <Elegantbeef> Right
[03:04:14] <FromDiscord> <Elegantbeef> Well `except` works for `Defect` but only in some dialects
[03:04:17] <FromDiscord> <Elegantbeef> Which is why you dont use it for them
[03:04:26] <FromDiscord> <Elegantbeef> They're better prevented in otherways
[03:05:33] *** Joins: rockcavera (~rc@192.12.112.240)
[03:05:33] *** Quits: rockcavera (~rc@192.12.112.240) (Changing host)
[03:05:33] *** Joins: rockcavera (~rc@user/rockcavera)
[03:10:39] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[03:12:46] <FromDiscord> <konsumlamm> it's only guaranteed to work for `CatchableError`s
[03:15:08] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[03:25:50] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:35:36] <FromDiscord> <rainbowasteroids> sent a code paste, see https://play.nim-lang.org/#ix=3PaW
[03:44:34] <FromDiscord> <Elegantbeef> prestige spent some time to progress the `impl` macro even further if you're around https://play.nim-lang.org/#ix=3PaX
[03:44:44] <FromDiscord> <Elegantbeef> Now have somewhat of runtime interfaces
[03:45:05] <FromDiscord> <Elegantbeef> No clue rainbow, if you want it catchable inherit from the `CatchableError` dont see why you wouldnt
[03:45:38] <FromDiscord> <rainbowasteroids> I'm just curious, because `CatchableError` is defined as `object of Exception`
[03:52:12] <FromDiscord> <huantian> it's merely for organizational purposes
[03:56:19] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[04:10:39] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:15:35] <FromDiscord> <JSONBash> been a while since I created it but for those who care I created a website a couple of months ago that gives nim related GitHub pages a shorter domain (`<page>.nim.wiki`). I never advertised it but I updated it today and thought it could be useful: https://www.nim.wiki/
[04:22:43] <nrds> <06Prestige99> @Elegantbeef thanks I'll check it out
[04:28:06] <FromDiscord> <b4mbus> Does nim have some kind of RAII?
[04:28:28] <FromDiscord> <b4mbus> or actually any kind of automatic resource handling at the end of scope
[04:28:32] <FromDiscord> <Elegantbeef> `arc`
[04:28:32] <FromDiscord> <Elegantbeef> Yes
[04:28:33] <FromDiscord> <Elegantbeef> `--gc:arc` does it
[04:28:39] <FromDiscord> <b4mbus> oh
[04:28:40] <FromDiscord> <b4mbus> gc
[04:28:53] <FromDiscord> <Elegantbeef> I mean in modern nim it's `mm`
[04:28:57] <FromDiscord> <b4mbus> wait, there are different gc's?
[04:28:59] <FromDiscord> <b4mbus> (edit) "gc's?" => "gcs?"
[04:29:10] <FromDiscord> <Elegantbeef> Yes there are different memory management featurees
[04:29:30] <FromDiscord> <b4mbus> https://nim-lang.github.io/Nim/mm.html
[04:29:31] <FromDiscord> <b4mbus> oh I see
[04:29:47] <FromDiscord> <b4mbus> so does that mean that I dont actually have to `defer close(file)`?
[04:31:37] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[04:33:39] *** Joins: vicfred (~vicfred@user/vicfred)
[04:34:26] <FromDiscord> <huantian> if you make a =destroy for files
[04:37:23] <FromDiscord> <Elegantbeef> Nim-sys uses them but it's not fully on par with the Nim stdlib afaik
[04:37:57] <NimEventer> New Nimble package! mdlldk - Dynamic-link libraries (DLLs) Development Kit for mIRC., see https://github.com/rockcavera/nim-mdlldk
[04:38:24] <FromDiscord> <Elegantbeef> Yes you do cause the stdlib hasnt been updated to use them
[04:39:07] <FromDiscord> <sharpcdf> dont know who the mods are but @Inc1usive is a scammer btw
[04:39:16] <FromDiscord> <sharpcdf> dont know for sure but pretty sure they are
[04:40:01] <FromDiscord> <sharpcdf> told me they accidentally reported my steam account and then told me to friend a bunch of people that were "steam mods"
[04:42:36] <FromDiscord> <huantian> can confirm
[04:43:22] <FromDiscord> <sharpcdf> üëç
[04:44:18] <FromDiscord> <huantian> dmed yard but ig I'll ping @PMunch too
[04:44:46] <FromDiscord> <Iapetus11> Are there mods here? Someone is trying to pull a steam scam on me lol https://media.discordapp.net/attachments/371759389889003532/941140102380400651/unknown.png
[04:44:51] <FromDiscord> <Elegantbeef> Prestige I made it a tinge nicer(albeit more likely to crash) https://play.nim-lang.org/#ix=3Pb5
[04:45:00] <FromDiscord> <Iapetus11> This is their discord id: 941098341658419281
[04:45:22] <FromDiscord> <Elegantbeef> Aw shit dude your account is going to go buh bye, you best send me the login credentials so i can stop it!
[04:49:33] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[04:50:06] <nrds> <06Prestige99> :o
[04:52:19] <FromDiscord> <huantian> don't worry this is legit
[05:12:24] <FromDiscord> <Nightshade üåô> Hey everyone, I was wondering if anyone could point me to some resources for how to create a Windows based device driver in Nim. Are there specific packages and compiler flags I need?
[05:17:01] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[05:17:04] <FromDiscord> <Elegantbeef> They have a bunch of samples here https://github.com/Microsoft/Windows-driver-samples seems like you could use their buildsystem mixed with nim's C output
[05:22:22] <FromDiscord> <Nightshade üåô> In reply to @Elegantbeef "They have a bunch": Ahh awesome idea thank you so much!
[05:24:02] <FromDiscord> <Elegantbeef> I do something similar for the RPI pico and it works ok
[05:24:17] <FromDiscord> <Elegantbeef> Some issues like having to manually include stuff, but no clue if that matters here
[05:24:21] <FromDiscord> <Elegantbeef> Didnt look much into it
[05:28:06] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:34:31] <FromDiscord> <nekojes> I have a `nim.cfg` with `--app:lib` in it, and I'm trying to compile something in a random subdirectory as a normal executable and for whatever reason `--app:console` doesn't seem to override the earlier `lib`?
[05:35:02] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:35:31] <FromDiscord> <nekojes> am just trying with `nim r --app:console <file`
[05:35:53] <FromDiscord> <Elegantbeef> I think app might not be overridable after a config loads
[05:36:35] <FromDiscord> <nekojes> ...even if it's specified on the cli?
[05:37:18] <FromDiscord> <Elegantbeef> replace that `nim.cfg` with `file.nims` then you shouldnt have a problem
[05:43:31] <FromDiscord> <nekojes> what do you mean?
[05:43:44] <FromDiscord> <rainbowasteroids> there are no scams on matrix yet üòâ‚Üµ(@Iapetus11)
[05:44:04] <FromDiscord> <Iapetus11> lol
[05:44:14] <FromDiscord> <nekojes> seemslegit
[05:44:44] <FromDiscord> <rainbowasteroids> come to the slightly less spooky side
[05:45:10] <FromDiscord> <Elegantbeef> I mean there are scams it's just easy to block since you have to accept a DM üòÄ
[05:45:42] <FromDiscord> <rainbowasteroids> I haven't used matrix enough to get any scams üòÜ
[05:45:53] <FromDiscord> <rainbowasteroids> I'm just in the Nim channels and some small community
[05:46:12] <FromDiscord> <Elegantbeef> I mean we've had some scammers here but they post and then get banned
[05:46:35] <FromDiscord> <Nightshade üåô> In reply to @Elegantbeef "I do something similar": Is there anyway you could share the repo? I'm going through the Microsoft Docs but this definitely seems like uncharted territory
[05:47:02] <FromDiscord> <Elegantbeef> https://github.com/beef331/picostdlib it's nothing overly fancy
[05:48:19] <FromDiscord> <Nightshade üåô> In reply to @Elegantbeef "https://github.com/beef331/picostdlib it's nothing ": Thank you!
[05:57:26] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 250 seconds)
[06:19:32] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[06:24:40] *** Joins: rockcavera (~rc@192.12.112.240)
[06:24:40] *** Quits: rockcavera (~rc@192.12.112.240) (Changing host)
[06:24:40] *** Joins: rockcavera (~rc@user/rockcavera)
[06:30:59] <FromDiscord> <noow> In reply to @rainbowasteroids "there are no scams": matrix has midov.pl spammers
[06:38:40] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:43:56] *** typoholic is now known as tinystoat
[07:09:36] <FromDiscord> <Arathanis> @ElegantBeef can you explain why I need to do this: https://media.discordapp.net/attachments/371759389889003532/941176550148153395/unknown.png
[07:09:40] <FromDiscord> <Arathanis> to make this work: https://media.discordapp.net/attachments/371759389889003532/941176568951234560/unknown.png
[07:10:02] <FromDiscord> <Arathanis> it seems like they are just called `:tmp` w/o an explicit identifier and thus you run into redefinition
[07:10:07] <FromDiscord> <Arathanis> want to make sure i didnt miss anything obvious
[07:15:55] <FromDiscord> <Elegantbeef> I think it might just be the lack of name
[07:16:06] <FromDiscord> <Elegantbeef> i'd just do `nskParam.genSym("message")` and same for `number`
[07:29:08] <FromDiscord> <Elegantbeef> I think `genSym` is a thing that happens after the macro is released so it doesnt increment the `genSym` number for the `""` string
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:40:49] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:41:59] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Max SendQ exceeded)
[07:42:38] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:43:56] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[07:47:20] <FromDiscord> <Arathanis> im playing with making the macro for variable, so i will ultimately need to generate an arbitrary number of symbols
[07:47:45] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3Pbp
[07:47:53] <FromDiscord> <Arathanis> In reply to @Elegantbeef "I think `genSym` is": the number does seem to go up but the identifier doesn't seem to be different
[07:48:53] <FromDiscord> <Elegantbeef> Damn it
[07:48:54] <FromDiscord> <Elegantbeef> sent a long message, see http://ix.io/3Pbq
[07:48:59] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Pbr
[07:50:45] <FromDiscord> <Arathanis> even if they have the same name will it tolerate it?
[07:50:52] <FromDiscord> <Arathanis> guess i can go test that right now
[07:52:32] <FromDiscord> <Elegantbeef> So i guess congrats you found a bug with `genSym`
[07:52:56] <FromDiscord> <Arathanis> oh lol
[07:53:02] <FromDiscord> <Arathanis> well that is neat i guess
[07:53:25] <FromDiscord> <Arathanis> should an issue be made on the git repo?
[07:55:23] <FromDiscord> <Elegantbeef> If one doesnt already exist
[07:55:51] <FromDiscord> <Elegantbeef> So odd i cannot replicate it minimally
[07:57:20] <FromDiscord> <Elegantbeef> Ah nvm it's just when it's used for proc parameters
[07:58:30] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Pbs
[07:59:56] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/issues/17851 this is related
[08:00:18] <FromDiscord> <Elegantbeef> Might be easy to fix, need to look at it
[08:02:52] <FromDiscord> <Elegantbeef> Yep it's a super easy fix
[08:07:55] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[08:07:58] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[08:18:23] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[08:31:39] <FromDiscord> <Elegantbeef> I was wrong, it causes C gen issues üòÄ
[09:16:23] <FromDiscord> <Arathanis> In reply to @Elegantbeef "I was wrong, it": that sounds... less easy to fix :P
[09:20:14] <FromDiscord> <Elegantbeef> Yea i dont know how to fix it, i stay far away from generator code
[09:24:44] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[09:25:10] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:25:27] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Client Quit)
[09:41:23] *** Joins: droidrage (046d050fdb@198.108.77.17)
[10:57:58] *** Joins: PMunch (~PMunch@user/pmunch)
[11:07:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[11:39:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[12:01:10] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (Remote host closed the connection)
[12:01:22] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[12:07:23] <FromDiscord> <Elegantbeef> There we go matrix spam
[12:07:48] <FromDiscord> <Elegantbeef> For otherly located it's a nice long  meme name about bitcoin
[12:09:20] <PMunch> There's unfortunately a bug in the Element client I believe so dom96 can't add anyone else as admins in the group :(
[12:11:53] <PMunch> There where some talk about a scammer in the Discord. But by the time I got up I couldn't see the messages any longer
[12:16:12] <FromDiscord> <Elegantbeef> This interface stuff i've been toying with is rather cool, the more I add the niftier it gets
[12:16:54] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3Pc6 though this doesnt allow an interface object created before all the types are added to be interoperable so i guess i'm doing that wrong
[12:26:28] <NimEventer> New Nimble package! nyml - Stupid simple YAML-like implementation from YAML to JsonNode, see https://github.com/openpeep/nyml
[12:31:45] <FromDiscord> <Rika> Wow that‚Äôs a nice read me
[12:33:42] <FromDiscord> <Elegantbeef> Yea all their readme's are like that
[12:36:00] <FromDiscord> <Rika> Is it a company or what
[12:36:18] <FromDiscord> <Elegantbeef> It's only a single committer so i think not but i could be wrong
[12:37:56] <FromDiscord> <Elegantbeef> It's weird to see people not active here or on the forums using Nim
[12:42:22] <PMunch> I think it's a very good sign
[12:43:11] <FromDiscord> <Elegantbeef> Yea it's, means either they're lurking or Nim is sufficiently stable that they can use it and learn it without much issue üòÄ
[12:43:59] <PMunch> I talked about it a bit with Treeform during FOSDEM. When I started using Nim the community was small enough that everyone know what everyone else was doing. But nowadays I'm constantly surprised by people/companies using Nim whom I've never heard of
[12:44:33] <FromDiscord> <Elegantbeef> Yea you're like "Who the fuck is ElegantBeef, that nobody" üòõ
[12:47:31] <PMunch> That feeling when Ratel which I've spent a lot of time and effort in creating has 22 stars on GitHub, and superlog which I wrote as a PoC for Araq in some random forum post has 15 stars already :P
[13:00:16] <FromDiscord> <Elegantbeef> When do we merge ratel with picostdlib under a single organization üòõ
[13:01:04] <FromDiscord> <evoalg> in bash I can do `echo -e "\033[31;1mHello\033[0m"` to get a red "Hello", and in python I can do `print("\033[31;1mHello\033[0m")` to get the same red "Hello" ... but it doesn't work in Nim (I get a "Warning\: octal escape sequences do not exist; leading zero is ignored [OctalEscape]")
[13:01:21] <FromDiscord> <Elegantbeef> We do have a module to make it more wonderful
[13:03:12] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Pck
[13:03:20] <FromDiscord> <Elegantbeef> the real solution is just to drop `0`
[13:04:06] <FromDiscord> <Elegantbeef> I dont recall what the actual characters are üòÄ
[13:04:46] <FromDiscord> <Elegantbeef> Should note you could invoke the above with `"Hello".writeColoured(fgRed)`
[13:05:08] <FromDiscord> <Rika> Is that not an octal escape?
[13:05:15] <FromDiscord> <Rika> It says that in the error
[13:05:25] <FromDiscord> <Rika> So you have to convert it into decimal or whichever
[13:05:41] <FromDiscord> <Rika> In reply to @Elegantbeef "Should note you could": Just use this instead really
[13:05:55] <FromDiscord> <Elegantbeef> Manually adding colour is for nerds
[13:06:54] <FromDiscord> <Elegantbeef> It's kinda odd that there is `writeStyled` but not a `writeStyle` that takes in a color
[13:08:04] <FromDiscord> <Elegantbeef> Oh there is styled write
[13:08:11] <FromDiscord> <Elegantbeef> so you can do `stdout.styledWrite(fgRed, "hello")`
[13:08:17] <FromDiscord> <evoalg> Thank you beefy that works \:)
[13:08:50] <FromDiscord> <Elegantbeef> Can even do `stdout.styledWrite(fgRed, styleBright, "Hello")`
[13:09:02] <FromDiscord> <Elegantbeef> Never seen that macro before, i feel dumb now
[13:10:13] <FromDiscord> <evoalg> ohhhh ok I didn't try the 2nd one...
[13:10:29] <FromDiscord> <Rika> I still can‚Äôt recognise Evo with his new avatar image
[13:11:08] <FromDiscord> <evoalg> hehe
[13:11:32] <FromDiscord> <evoalg> Nice I can to bgRed too
[13:11:40] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[13:11:42] <FromDiscord> <Elegantbeef> Yep it's the way to do it
[13:11:48] <FromDiscord> <Elegantbeef> I've always manually done it so i feel dumb now
[13:12:30] <FromDiscord> <evoalg> super brains code everything manually
[13:12:37] <FromDiscord> <evoalg> \:w
[13:12:43] <FromDiscord> <evoalg> opps
[13:12:43] <FromDiscord> <Elegantbeef> This isnt vim
[13:13:58] <FromDiscord> <evoalg> Nice, now I can draw some colored squares like `stdout.styledWrite(bgRed, "  ")`
[13:14:45] <FromDiscord> <Elegantbeef> Sounds like someone is about to make a TUI game
[13:17:04] <FromDiscord> <evoalg> hehe no I want to draw some simple colored grids
[13:17:16] <FromDiscord> <evoalg> the simplest way possible
[13:19:30] *** Joins: qwestion (a6872f2a98@198.108.77.17)
[13:35:16] <NimEventer> New question by itil memek cantik: To insert a Nim variable into its PCRE regex, see https://stackoverflow.com/questions/71063081/to-insert-a-nim-variable-into-its-pcre-regex
[13:39:53] <FromDiscord> <evoalg> Oh I can also do `echo "\e[31;1mHello"` instead of "\\033[31;1mHello"
[13:41:49] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[13:43:33] <Amun-Ra> yes
[13:44:12] <Amun-Ra> \033 is my only usage of octal notation (apart from writing PDP emulators)
[13:45:03] <FromDiscord> <evoalg> \\033 doesn't work but \\e works?
[13:45:08] <FromDiscord> <evoalg> in Nim
[13:45:21] <Amun-Ra> yes
[13:46:26] <FromDiscord> <Elegantbeef> in nim `\033` is taken as the 33rd character, but you want the 27th
[13:46:53] <Amun-Ra> there are no octal literals in nim
[13:46:58] <Amun-Ra> \033 is 33 in dec
[13:47:14] <Amun-Ra> "\e" == "\031" == "\x1f"
[13:48:04] <Amun-Ra> but‚Ä¶ I wonder who came up with \c and \L‚Ä¶
[13:49:53] <FromDiscord> <planetis> cariage return and line feed? pbl the ascii guys \:)
[13:50:27] <Amun-Ra> I mean what was the reason to pick \c and \L instead of the standard \r and \n
[13:53:09] <supakeen> both work
[13:53:15] <Amun-Ra> yes
[13:53:32] <supakeen> but why it has both, i don't know either :)
[13:53:51] <supakeen> i'm at least not familiar with any other language that uses \c and \l.
[13:55:31] <FromDiscord> <evoalg> why did \\r and \\n because standard when \\c and \\l makes more sense for carriage return and line feed?
[13:56:25] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[13:56:50] <FromDiscord> <Elegantbeef> `return` `newLine` üòÄ
[13:56:55] <Amun-Ra> line feed aka new line
[13:57:03] <FromDiscord> <evoalg> ohh
[13:57:28] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[14:01:54] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[14:04:06] *** Joins: [RMS] (~rs@genoce.org)
[14:04:46] <PMunch> Amun-Ra, well on windows a proper newline is carriage return + linefeed
[14:05:22] <Amun-Ra> and on old macs (~m68k ones) it was CR only
[14:05:23] <PMunch> Earlier versions of Nim used \n to mean linefeed on Linux and carriage return + linefeed on Windows
[14:05:33] <PMunch> You couldn't eg. use \n in a character literal
[14:06:53] <PMunch> That's why two different values where chosen for linefeed and carriage return, in order to ensure they weren't confused with those from other languages.
[14:06:56] <PMunch> I believe
[14:07:08] <Amun-Ra> that makes sense
[14:07:10] <PMunch> Might be wrong though
[14:07:58] <arkanoid> when I run nimble tests the nimble dependency verification output it too verbose and is 90% of the terminal output, it completely hides the test results
[14:09:04] *** Joins: mahlon_ (~mahlon@martini.nu)
[14:11:02] *** Quits: droidrage (046d050fdb@198.108.77.17) (*.net *.split)
[14:11:02] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[14:11:03] *** Quits: systemdsucks (~systemdsu@user/systemdsucks) (*.net *.split)
[14:11:03] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (*.net *.split)
[14:11:03] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (*.net *.split)
[14:11:03] *** Quits: mahlon (~mahlon@martini.nu) (*.net *.split)
[14:11:03] *** Quits: syl (~z@user/syl) (*.net *.split)
[14:11:03] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[14:11:03] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (*.net *.split)
[14:11:03] *** Quits: tinystoat (~squeek@user/tinystoat) (*.net *.split)
[14:11:03] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[14:16:13] *** Joins: systemdsucks (~systemdsu@user/systemdsucks)
[14:16:13] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[14:16:13] *** Joins: syl (~z@user/syl)
[14:16:13] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[14:16:13] *** Joins: tinystoat (~squeek@user/tinystoat)
[14:16:13] *** Joins: flynn (~mcbloch@user/flynn)
[14:16:19] <PMunch> The dependency verification?
[14:18:42] *** Joins: drewr (~drew@user/drewr)
[14:36:23] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[14:44:04] *** Joins: droidrage (046d050fdb@198.108.77.17)
[15:08:50] *** Joins: PMunch (~PMunch@user/pmunch)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:54] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:39:52] <arkanoid> talking about nim error patterns, would you go exceptions + raises pragma, or Result/Opt + exceptions for defects only?
[15:40:41] <FromDiscord> <Rika> I would not use defects
[15:40:55] <FromDiscord> <Rika> Option + exceptions, I‚Äôm still torn on results and exceptions
[15:42:28] <arkanoid> Rika, could you please expand a but more your opinion? I'm trying to wrap my head around the consequences here. It is the moment where I'd like a good read on this before betting on this or that code refactor
[15:43:58] <FromDiscord> <Rika> Well exceptions is okay when you don‚Äôt really want to think about them, you can just ignore them and let your program blow up whenever
[15:44:15] <FromDiscord> <Rika> Results is very explicit and you have to handle everything if you like it or not
[15:45:18] <arkanoid> sure, but you said that you would go Options + exceptions and not Results
[15:46:28] <FromDiscord> <Rika> Yes
[15:46:37] <FromDiscord> <Rika> Options isn‚Äôt really an error indicator
[15:46:57] <FromDiscord> <Rika> I wouldn‚Äôt recommend returning none on error‚Ä¶
[15:47:04] <FromDiscord> <Rika> Doesn‚Äôt really indicate what the error is
[15:47:42] <FromDiscord> <Rika> Use it when you have a distinct difference between the zeroed value and ‚Äúnone‚Äù
[15:47:58] <FromDiscord> <Rika> So basically ‚Äúnullable‚Äù imo
[15:50:09] <arkanoid> ok
[15:51:00] <PMunch> The problem with Result is that if you just want something done quick and dirty I think you'd end up just putting `discard`, `echo`, or perhaps a `quit 1` in the error handling part. The first two would just silently eat your errors and could cause problems for you if those over errored out, and `quit 1` basically means there is no possible way you can recover from it.
[15:51:48] <PMunch> It's fine if you have code going through a code review, no good reviewer would allow those above hacks, but when you're just developing by yourself I think it's easier to cause problems for yourself later on
[15:51:58] <FromDiscord> <Rika> Basically you‚Äôd just have a lot of unwrap like in rust lol
[15:52:15] <PMunch> With exceptions you can silently ignore them, and should they ever blow up you will get a nice stack-trace telling the user exactly where the error occured.
[15:53:11] <arkanoid> makes sense
[15:53:22] <PMunch> Results are technically the better solution, you should always handle your errors, but just in case you're not planning on writing rigorously correct code I believe it might cause more problems than you benefit from them
[15:53:59] <FromDiscord> <Rika> And anyways you have raises‚Ä¶
[15:54:11] <FromDiscord> <Rika> Great pragma imo
[15:54:33] <PMunch> Oh yeah, raises is cool
[15:54:51] <PMunch> Nice way to make sure you handle all your error scenarios
[15:55:09] <PMunch> I really wish there was a way to define our own "procedure types" in Nim
[15:55:23] <FromDiscord> <Rika> What?
[15:55:28] <PMunch> Essentially `func` but implemented in user code
[15:55:47] <FromDiscord> <Rika> Ah
[15:55:48] <PMunch> So func would be something like `type func = proc {.noSideEffects.}`
[15:55:48] <FromDiscord> <Rika> Eh
[15:55:56] <FromDiscord> <Rika> You can half ass it with a macro pragma
[15:56:03] <PMunch> But you could throw your own pragmas in there (of course also those based on macros)
[15:56:17] <PMunch> So I could define `type safe = proc {.raises: [].}`
[15:56:36] <PMunch> And then I could write `safe tryParse(x: string): Option[int]` for example
[15:56:43] <FromDiscord> <Rika> Eh I don‚Äôt know it edges to ‚Äútoo much magic‚Äù for me
[15:56:44] <arkanoid> safe = func {.raises: [].} maybe
[15:58:48] <PMunch> I just think it could clean up some syntax
[15:59:03] <PMunch> For example we could have `type async = proc {.async.}`
[15:59:16] <FromDiscord> <evoalg> Rika you've done something with your hair again
[15:59:28] <PMunch> And write `async myAsyncProc(x: int): Future[string]`
[15:59:47] <PMunch> I think it would be a neat feature
[16:00:03] <arkanoid> PMunch: I agree, it would be nice, but it seems just another kind of sugar
[16:00:13] <arkanoid> but if func is a thing, why not
[16:00:21] <arkanoid> func is already a built in sugar
[16:00:32] <PMunch> Exactly, I mean Nim has plenty of sugar
[16:01:03] <PMunch> And it's not like it would be unclear, if you hover over the `async` keyword it would show you the type definition for it.
[16:02:19] <arkanoid> I have a question about preferring exceptions over result. How do you deal with exception details? Do you just create meaningful string based exceptions, or you create new types with fields that contains exception data?
[16:03:11] <arkanoid> for example I'm bubbling up error if http requests is not 200 or timeout, I want the catcher to know also response time and other info
[16:03:55] <arkanoid> so far I'm just logging string, but I was considering turning exception into Result to pass an HttpResponse instead
[16:04:06] <supakeen> I usually put the response object in the exception.
[16:04:48] <arkanoid> supakeen: so you mean you create your own exception and not use "newException" template?
[16:05:56] <FromDiscord> <Rika> In reply to @evoalg "Rika you've done something": What
[16:06:05] <FromDiscord> <Rika> You guys can see it?
[16:06:07] <FromDiscord> <Rika> Crazy
[16:06:51] <FromDiscord> <Rika> In reply to @arkanoid "<@688097059290873923>: so you mean": Yes
[16:07:13] <FromDiscord> <Rika> raise (ref MyError)(msg: "", field: ‚Ä¶)
[16:07:29] <supakeen> correct
[16:07:40] <arkanoid> thanks. I think I'll take this path
[16:13:35] <arkanoid> why `raises` here wants Exception instead of TimeoutError? https://play.nim-lang.org/#ix=3PcQ
[16:22:37] <arkanoid> also skipping newException trigger same issue: https://play.nim-lang.org/#ix=3PcS
[16:27:48] <Amun-Ra> arkanoid: I guess withTimeout or sth similar may raise an Exception
[16:29:21] <Amun-Ra> Error: withTimeoutErrorNimAsyncContinue_436207705() can raise an unlisted exception: Exception
[16:30:09] <arkanoid> Amun-Ra: nope --> https://play.nim-lang.org/#ix=3PcX
[16:31:14] <PMunch> I guess the rewrite `async` does can throw an exception
[16:31:30] <Amun-Ra> arkanoid: I've never used async in Nim but it looks like an Exception can be raised by async itself
[16:33:44] <PMunch> If you pass -d:nimDumpAsync you can see what it is rewritten to
[16:34:10] <PMunch> Your proc becomes this http://ix.io/3Pd3/nim
[16:35:41] <PMunch> I posted this RFC by the way: https://github.com/nim-lang/RFCs/issues/448
[16:35:43] <Amun-Ra> nimDumpAsync, nice
[16:36:17] <FromDiscord> <Clonkk> Wouldn't this be redundant with using push / pop pragma and writing proc ?‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[16:36:54] <PMunch> Well, not really
[16:37:43] <PMunch> If I use gotoDefinition in my editor and gets sent to the middle of a file it would be much more obvious that the procedure I was looking at was in fact async for example
[16:38:11] <PMunch> And if you only define one or a  couple of these you wouldn't use `push`/`pop`
[16:39:38] <PMunch> I was thinking of using this for creating interrupts in Ratel for example: https://www.nongnu.org/avr-libc/user-manual/group__avr__interrupts.html
[16:40:22] <PMunch> Would be nice to be able to do `interrupt myInterrupt(<something>)`
[16:44:14] <FromDiscord> <Clonkk> Ah okay it's syntaxic sugar
[16:44:35] <PMunch> Currently you'd have to do this: http://ix.io/3Pd8/nim but how neat wouldn't it be to write http://ix.io/3Pda/nim instead?
[16:44:50] <PMunch> Oh yeah, it's purely syntactic sugar
[16:45:33] <PMunch> But essentially it's just realising that `func` is nice syntactic sugar, maybe other stuff could benefit from the same kind of sugarization?
[16:45:40] <FromDiscord> <Clonkk> I was just confused because you wanted to replace a language keyword by a custom implementation‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[16:45:56] <PMunch> What do you mean?
[16:47:27] <FromDiscord> <Clonkk> Conceptually `proc` is a reserved keyword so when you read the code and look for "custom" information attached to it, you read the pragma
[16:48:04] <FromDiscord> <Clonkk> AKA if something looks like a proc, my brain might just skip the first word because I already assume it will be proc or func (and TBH I don't use much the sideffect system so mostly proc)
[16:48:20] <FromDiscord> <Clonkk> Maybe it's just me being bad at reading
[16:48:44] <PMunch> Sure, but `proc {.noSideEffect.}` is the same as `func`. This means that reading that it goes "this is a procedure. Sike! It's actually a pure function!"
[16:49:00] <PMunch> Oftentimes I find that `proc` seems to lie when you attach custom pragmas
[16:49:25] <FromDiscord> <Clonkk> That's true, maybe I'm not confronted to the problem because I don't have much use for the sideEffect stuff‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[16:49:58] <PMunch> I mean this could be used for anything, that's the beauty of it
[16:50:12] <FromDiscord> <Clonkk> And also the danger of it \:D‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[16:50:23] <PMunch> Haha, of course :P
[16:50:40] <PMunch> But it's not like we're adding more features here, we're just making syntax a bit nicer
[16:51:24] <PMunch> As I said, it's just realising that `func` was a useful addition to the syntax, and that maybe users would want to be able to define similarly useful additions
[16:52:07] <FromDiscord> <Clonkk> Having a few more keyword like `func` for example `async` for `proc {.async.}` etc.. is nice, but I'm not sure it's something I would want open to modification; I fear you'd end up with conflicting keyword
[16:52:35] <PMunch> And as I've said before, metaprogramming in Nim is to programming what a chainsaw is to a saw. You can be much more efficient with it, but it will also take your foot of if you're not careful
[16:52:45] <PMunch> Well conflicting keyword wouldn't be an issue
[16:53:00] <PMunch> Since these are just types you would have normal type collisions
[16:53:56] <PMunch> Let's say you implemented two async libraries, then you would have to do `asynclib1.async myAsyncProc(): Future[string]` or `import asynclib2 except async`
[16:54:30] <FromDiscord> <Clonkk> But it's not really a type ?‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[16:55:09] <PMunch> Maybe not, but it could be handled the same way none-the-less
[16:55:55] <PMunch> Of course if it was a type-like thing you would be able to write the same kind of things you can today with `proc myProc(x: int, callback: proc)` which turns into a generic that takes any procedure as the callback argument.
[16:56:26] <PMunch> But replace `proc` with `async` and voila now it's a `proc {.async.}` that is expected as the callback
[16:56:49] <PMunch> Saves on typing, less line noise, and generally just nicer
[16:57:25] <PMunch> Besides, typing {..} on a Norwegian keyboard is a pain, and the whole pragma syntax feels a bit tacked on.
[16:57:41] <FromDiscord> <Clonkk> So conceptually you'd introduce python-like decorator‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[16:57:59] <FromDiscord> <Clonkk> Haha I have the same issue wiith azerty keyboard‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[16:58:36] <PMunch> I mean pragmas are already akin to Python decorators
[16:58:46] <PMunch> I just want to sprinkle some sugar on it
[16:58:54] <FromDiscord> <Rika> I don‚Äôt like it. It will fuck with my recognition
[17:00:10] <FromDiscord> <Clonkk> Yeah I could see it being useful‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[17:00:27] <FromDiscord> <Clonkk> Especially if you start playing with heavy oragma such as `Raise` list and so on
[17:00:30] <PMunch> @Rika, how so? These are likely to still be a callable thing, and we already have five(?) keywords that can go there
[17:00:33] <FromDiscord> <konsumlamm> if anything i'd prefer something like `safe proc example(...)` over `safe example(...)`
[17:00:45] <PMunch> @Clonkk, exactly
[17:00:55] <FromDiscord> <Clonkk> Yeah I was about to suggest something like this‚Üµ(@konsumlamm)
[17:01:00] <FromDiscord> <Rika> In reply to @konsumlamm "if anything i'd prefer": Same here. I commented just that
[17:01:01] <FromDiscord> <konsumlamm> not using func/proc doesn't make it obvious that you're defining a function
[17:01:09] <PMunch> @konsumlamm, but what if the output isn't a procedure?
[17:01:15] <PMunch> Now we're just lying to the user again..
[17:01:17] <FromDiscord> <Rika> Why would it not be‚Ä¶
[17:01:25] <FromDiscord> <Rika> Just use a macro by then
[17:01:29] <PMunch> @Rika, it could be a pure function?
[17:01:37] <FromDiscord> <Rika> Ah that‚Äôs what you mean
[17:01:38] <arkanoid> PMunch: thanks for the nimDumpAsync check, damn line 37 :D http://ix.io/3Pd3/nim
[17:02:06] <FromDiscord> <konsumlamm> isn't the point to define custom function types though?
[17:02:40] <FromDiscord> <konsumlamm> tbh, i think just using pragmas works fine
[17:02:52] <FromDiscord> <Rika> Then why not allow it for either func or proc, they stay the same (magic or so) and you can define custom words for them
[17:03:00] <FromDiscord> <Rika> I think so too
[17:03:11] <PMunch> Well it's to allow the user or library author to use the `proc`-like syntax (which is currently impossible) without having to attach pragmas everywhere..
[17:03:39] <FromDiscord> <Rika> I don‚Äôt see what‚Äôs wrong with pragmas
[17:03:47] <FromDiscord> <Rika> ‚ÄúIt‚Äôs a pain to type‚Äù sounds like a non-issue
[17:03:47] <PMunch> @konsumlamm, and you're free to use pragmas, I'm not saying we should do away with pragmas
[17:04:10] <FromDiscord> <Clonkk> Let"s say you have a long list of pragma you want to use as an umbrella identifier‚Üµ(@Rika)
[17:04:12] <PMunch> @Rika, Nim in general is fairly easy to type, and I believe that has been one of the core focuses of the language..
[17:04:17] <FromDiscord> <Clonkk> It imporves readability
[17:04:26] <FromDiscord> <Rika> In reply to @Clonkk "Let"s say you have": You can define a pragma that combines pragmas, you know
[17:04:28] <PMunch> @Clonkk, you could define a pragma pragma,
[17:04:45] <PMunch> But its still not super nice
[17:05:02] <FromDiscord> <Clonkk> yes of course, the point is just to provide syntaxic sugar on a proc‚Üµ(@Rika)
[17:05:30] <FromDiscord> <Rika> I think this is too sweet.
[17:05:30] <FromDiscord> <Clonkk> Is `customProc foo() = #...` better than `proc foo() {.custom.} = ...`
[17:05:33] <FromDiscord> <Clonkk> ?
[17:05:42] <FromDiscord> <Rika> No.
[17:06:23] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[17:06:48] <FromDiscord> <Clonkk> Personnaly I think there are cases where it's justified and read better
[17:06:58] <FromDiscord> <Rika> I don‚Äôt know, you‚Äôre saving what four characters for what? I really really really do not see the readability benefit
[17:07:01] <FromDiscord> <Clonkk> The exmaple of interrupt was a good one for instance
[17:08:29] <FromDiscord> <Clonkk> Perhaps it's just because typing a pragma is annoying because of different keyboard layout that doesn't let you acces symbol easily
[17:08:56] <PMunch> async is another one, Typing `proc <blah blah> {.async.}` is tedious, just `async <blah blah>` is much nicer
[17:09:02] <FromDiscord> <Rika> There‚Äôs no solution to that
[17:09:06] <PMunch> And now I only have to scan the left column to identify the async procedures
[17:09:19] <FromDiscord> <Clonkk> Syntaxic sugar or me changing keyboard \:D‚Üµ(@Rika)
[17:09:27] <PMunch> @Rika, yes there is, to not use those weird symbols..
[17:09:37] <FromDiscord> <Rika> Keyboard layouts being unfriendly to certain syntax
[17:10:03] <PMunch> Well if your keyboard layout is unfriendly to typing words then you might want to consider switching layouts..
[17:10:08] <FromDiscord> <Rika> So are we limiting the whole syntax to alphanumeric
[17:10:22] <PMunch> We're limiting it to Nim identifiers
[17:10:26] <PMunch> Obviously
[17:10:35] <arkanoid> I already have a `morepure` pragma that combines {.noSideEffects,raises:[]}, so `proc {.morepure.}` would be like `func {.raises:[].}`, and moving function types like this is not so elegant
[17:10:59] <FromDiscord> <abisxir> Guys do you know a dead simple C library for graphic programming? Not something like SDL or a game engine.
[17:11:09] <PMunch> @abisxir, imlib?
[17:11:23] <FromDiscord> <abisxir> Humm, let me check it
[17:11:42] <arkanoid> https://github.com/raysan5/raylib ?
[17:11:45] <PMunch> Depends on what you mean by dead simple though
[17:12:02] <PMunch> What do you actually need it for?
[17:12:25] <FromDiscord> <abisxir> imlib is complicated enough
[17:13:14] <FromDiscord> <abisxir> Do you remeber old time graphics.h? easy like circle(x, y, radius) draw(....) line(...) etc
[17:13:28] <FromDiscord> <enthus1ast> raylib
[17:14:14] <FromDiscord> <enthus1ast> or even pixie
[17:14:32] <FromDiscord> <konsumlamm> In reply to @PMunch "async is another one,": you're not defining "an async" though, you're defining "an async function/procedure"
[17:14:55] <FromDiscord> <abisxir> Humm, I know raylib but I was  thinking maybe there is something even much more simpler. As I see raylib is most simple one.
[17:15:12] <FromDiscord> <konsumlamm> so i don't think `type async = proc {.async.}` is desirable, even if it was possiblr
[17:15:36] <FromDiscord> <enthus1ast> even simpler than raylib is pixie, but its not accelerated
[17:16:42] <arkanoid> PMunch: if async implicitly adds a `raises` of type Exception, this means that the {.raises.} pragma is not usable in async context, as {.raises: [Exception].} is a catch-all
[17:17:00] *** Joins: arkurious (~arkurious@user/arkurious)
[17:17:19] <PMunch> @konsumlamm, maybe not, and you'd be free to write {.async.} in your code if you think that is cleaner. But take my AVR interrupts example then, `interrupt myInterrupt()` is definitely not a procedure
[17:17:49] <PMunch> @arkanoid, seems like it unfortunately
[17:18:11] <PMunch> Maybe raise an issue about that in the Nim repo, seems like those features should compose better
[17:18:39] <FromDiscord> <Rika> In reply to @PMunch "<@312654963694108674>, maybe not, and": Interrupt handlers are not procedures? Since when
[17:19:05] <arkanoid> PMunch: yes I think so
[17:20:43] <PMunch> @Rika, well I guess they might fall under the procedure umbrella
[17:20:51] <FromDiscord> <Clonkk> I assume in the sense that there are things you would like to forbid in ISR‚Üµ(@Rika)
[17:21:22] <FromDiscord> <Rika> In reply to @Clonkk "I assume in the": That doesn‚Äôt disqualify them from being procedures
[17:21:47] <PMunch> By that logic `func` is also a `proc`
[17:21:58] <PMunch> As it is also a sub-specialisation of a procedure
[17:22:06] <FromDiscord> <Rika> I would say that.
[17:22:12] <PMunch> So then it should be `func proc()`..
[17:22:12] <arkanoid> PMunch: it has already been issued https://github.com/nim-lang/Nim/issues/6639
[17:22:16] <FromDiscord> <Rika> pure proc ‚Ä¶(‚Ä¶)
[17:22:18] <FromDiscord> <Clonkk> Well a `func` is a procedure with some limitation. So an interrupt is a proc with some limitation like forbidding calling `√¶lloc` for example. If that could be checked at compile time it'd be useful
[17:23:51] <FromDiscord> <Clonkk> You'd prefer `pure proc()` over `func` ?‚Üµ(@Rika)
[17:24:40] <PMunch> I'm just saying that he same way `func` is nice syntactic sugar I believe there are other instances that would be nice syntactic sugar
[17:25:34] <FromDiscord> <Clonkk> so UFCS for pragma \:D ?
[17:29:09] <PMunch> Yeah I guess :)
[17:29:28] <PMunch> I mean that is another way of implementing this
[17:29:46] <PMunch> Just allowing any pragma to take the place of `proc`
[17:30:00] <PMunch> It makes sense, they're applying a transformation on the proc
[17:30:28] <PMunch> Well, maybe only those which doesn't take arguments..
[17:30:56] <PMunch> `raises:[Exception] myThing(x: int, y: int): string` looks a bit meh
[17:33:08] <Amun-Ra> ufc'ed pragma would be ugly as
[17:35:02] <FromDiscord> <Rika> In reply to @Clonkk "You'd prefer `pure proc()`": ... yes?
[18:37:29] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[19:17:45] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[19:22:39] <FromDiscord> <Elegantbeef> I agree pmunch, I think macros should explicitly say `pDef: ProcDef` as their only parameter then be usable in place of `proc` as it enables much more concise code
[19:24:37] <FromDiscord> <lantos> sent a code paste, see https://play.nim-lang.org/#ix=3PdT
[19:24:54] <FromDiscord> <Rika> `a.len div c` returns an int
[19:25:14] <FromDiscord> <Rika> use div instead of / and youll remove a lot of the "noise"
[19:25:42] <FromDiscord> <lantos> (edit) "https://play.nim-lang.org/#ix=3PdT" => "https://play.nim-lang.org/#ix=3PdU"
[19:29:18] <FromDiscord> <Waldecir Santos> I have a weird question, in a macro I receive a NimNode correct, my question is can I traverse up and do changes or just traverse down ?
[19:30:19] <FromDiscord> <Rika> down only
[19:30:50] <FromDiscord> <lantos> sent a code paste, see https://play.nim-lang.org/#ix=3PdY
[19:31:15] <FromDiscord> <Rika> In reply to @lantos "any downside you can": we're not python; use if over try
[19:31:33] <FromDiscord> <lantos> >,<
[19:41:21] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[19:41:39] *** Joins: Gustavo6046 (~AdminUser@2804:14d:4cd8:96b6:f57:b290:e69a:6832)
[19:41:57] *** Quits: Gustavo6046 (~AdminUser@2804:14d:4cd8:96b6:f57:b290:e69a:6832) (Client Quit)
[19:46:24] <FromDiscord> <Waldecir Santos> is it possible to overwrite this `:`  operator here:
[19:46:24] <FromDiscord> <Waldecir Santos>  https://media.discordapp.net/attachments/371759389889003532/941367007922774126/unknown.png
[19:46:39] <FromDiscord> <Waldecir Santos> (edit) "here:" => "here?:"
[19:47:01] <FromDiscord> <Elegantbeef> "overwrite"?
[19:47:29] <FromDiscord> <Waldecir Santos> Overflow
[19:47:29] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Peb
[19:47:42] <FromDiscord> <Waldecir Santos> Bad example sorry 1 sec
[19:48:08] <FromDiscord> <Elegantbeef> The answer is probably "no"
[19:48:13] <FromDiscord> <Waldecir Santos>  https://media.discordapp.net/attachments/371759389889003532/941367462530797669/unknown.png
[19:48:30] <FromDiscord> <Elegantbeef> What are you after?
[19:48:55] <FromDiscord> <Waldecir Santos> Trying to inject pragmas dynamically
[19:49:14] <FromDiscord> <Waldecir Santos> (edit) "dynamically" => ""dynamically" during compile time"
[19:49:17] <FromDiscord> <Elegantbeef> You want a typedef macro
[19:49:40] <FromDiscord> <Elegantbeef> https://github.com/beef331/constructor/#defaults for instance
[19:49:40] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Pef
[19:52:35] <FromDiscord> <Waldecir Santos> Ty I'll check I still fighting to find a way to "mimic" how we declare models in django, that is my big goal right now
[19:52:49] <FromDiscord> <Waldecir Santos> I've some ideas and I'm using it to also learn nim, lol
[19:53:15] *** Joins: audiophile_ (~audiophil@user/audiophile)
[20:26:02] <FromDiscord> <Waldecir Santos> Ty @ElegantBeef I think this will do the trick
[20:31:04] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:31:49] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Client Quit)
[21:45:11] *** Joins: vicfred (~vicfred@user/vicfred)
[21:48:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[21:52:52] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Quit: The Lounge - https://thelounge.chat)
[21:53:43] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[22:22:10] <FromDiscord> <eyecon> @KatrinaKitten is there a way to specify number of times from and to, at the same time in honeycomb? Say, 2 to 3 digits
[22:30:43] <FromDiscord> <eyecon> And: can we have a "validate" function which causes parser to fail if it doesn't satisfy some condition?
[22:31:07] <FromDiscord> <eyecon> I can also create an issue if that's better
[22:57:07] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.4)
[22:58:45] *** Joins: anddam (~anddam@user/anddam)
[23:09:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:15:11] <NimEventer> New Nimble package! uuid4 - UUIDs in pure Nim, see https://github.com/vtbassmatt/nim-uuid4
[23:35:21] <FromDiscord> <KatrinaKitten> In reply to @eyecon "<@!204718116020682753> is there a": You can pass a range to `times` / ``, and it will treat the lower bound as minimum and upper bound as maximum (though it still always greedily consumes as many as possible up to that maximum).
[23:36:06] <FromDiscord> <KatrinaKitten> In reply to @eyecon "And: can we have": I'm not quite sure what you mean. A feature request issue with more detail would be perfect üôÇ
[23:36:48] <FromDiscord> <KatrinaKitten> (edit) "In reply to @eyecon "<@!204718116020682753> is there a": You can pass a range to `times` / ``, ... and" 03added "i.e. `parser.times(2..4)`,"
[23:40:35] <FromDiscord> <eyecon> In reply to @KatrinaKitten "You can pass a": Thanks!
[23:40:47] <FromDiscord> <eyecon> In reply to @KatrinaKitten "I'm not quite sure": Sure, will do that with an example
[23:46:01] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
