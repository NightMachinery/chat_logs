[00:01:32] * GumbyPAN CPAN Upload: App-Sqitch-v1.2.1 by DWHEELER https://metacpan.org/release/DWHEELER/App-Sqitch-v1.2.1
[00:02:33] *** Joins: rgrinberg (~textual@187.223.250.159)
[00:07:35] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 252 seconds)
[00:08:40] *** Joins: yzhernand (~yzhernand@64-18-144-8.starry-inc.net)
[00:10:18] *** Joins: VoidNoir0 (~VoidNoir0@72.80.203.52)
[00:13:56] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:15:17] *** Quits: yzhernand (~yzhernand@64-18-144-8.starry-inc.net) (Ping timeout: 252 seconds)
[00:15:27] *** Joins: Trigon (~reuben@144.39.114.115)
[00:15:30] *** Joins: yzhernand (~yzhernand@38-73-255-174.starry-inc.net)
[00:27:04] *** Quits: rgrinberg (~textual@187.223.250.159) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:38:10] *** Quits: EGD (~egd@user/egd) ()
[00:44:34] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:45:24] *** Quits: masticass (~gzc@host-85-201-222-202.dynamic.voo.be) (Quit: WeeChat 3.3)
[00:54:14] *** tomys_ is now known as kevin-oculus
[00:57:51] *** Quits: martinus__ (~martin@96.19.201.77.rev.sfr.net) (Ping timeout: 256 seconds)
[00:58:19] *** Quits: magla (~gelignite@55d41880.access.ecotel.net) (Quit: Stay safe!)
[00:59:54] *** Joins: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20)
[01:02:52] * gordonfish wonders if anyone is using openssl-3.0.0
[01:06:10] <gordonfish> Seems every modern distro is using 1.1.1{g..l}
[01:11:04] *** Joins: humky (~humky@user/humky)
[01:14:21] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 256 seconds)
[01:15:50] *** Joins: yzhernand (~yzhernand@38-73-255-174.starry-inc.net)
[01:17:59] *** Quits: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:21:09] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 256 seconds)
[01:21:26] <simcop2387> gordonfish: it's in debian experimental right now
[01:21:30] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:21:31] <simcop2387> called libssl3
[01:21:53] <simcop2387> i suspect there's API/ABI issues that keep it from being swapped in immediately but i'll happen
[01:22:56] <simcop2387> gordonfish: https://packages.debian.org/experimental/libssl3
[01:22:58] <Paperbot> Link title(s): [ Debian -- Details of package libssl3 in experimental ]
[01:25:22] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[01:26:15] *** Quits: justSleigh (~justache@user/justache) (Quit: The Lounge - https://thelounge.chat)
[01:27:56] *** Joins: justSleigh (~justache@user/justache)
[01:30:26] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[01:36:36] *** Joins: krismatrix (~krismatri@38.80.149.51)
[01:36:42] <gordonfish> simcop2387: Ah, nice to know that it's coming
[01:37:13] <simcop2387> yea it's just such a fundamental change that it'll take a while
[01:42:35] <gordonfish> simcop2387: Yeah I figured it would be. I've built 1.x versions on servers (that needed custom build-time configs) and most of the time going from one letter version to the next doesn't require anything that used it to be rebuilt (like 1.1.1g to h, or k to l, etc.)
[01:42:51] <gordonfish> But I'd imagine going to 3.0.0 would not be so binary compatible.
[01:43:30] <gordonfish> (Sort of like going between major Perl releases.)
[01:44:26] <simcop2387> yea it's one of the reasons it's been so hard to upgrade/do stuff to openssl.
[01:45:24] <simcop2387> sweet, 10g network card and cables gets here tonight, just need the new switch that gets here next weekend.
[01:47:46] <simcop2387> i'll have a really nice 10+10 gbe link between the new switch and the 24 port switch, and 10g between the servers and the rest of the apartment.  i'll have plenty of speed for doing network boots non-locally
[01:48:29] <simcop2387> hoping to do raspberry pi + iscsi boots for some really nice stuff with them
[01:48:47] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[01:51:55] *** Quits: Discipulus_ (~Discipulu@37.161.160.161) (Read error: Connection reset by peer)
[01:51:55] *** Quits: Discipulus__ (~Discipulu@37.161.160.161) (Read error: Connection reset by peer)
[01:57:02] *** Quits: cxreg (~count@63.228.111.44) (Ping timeout: 240 seconds)
[01:57:04] *** Joins: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20)
[01:57:10] *** Joins: cxreg (~count@63.228.111.44)
[01:57:30] <gordonfish> 10g? Nice
[01:58:43] <gordonfish> Are you using cat6? I know that can handle 10g. Or are you using cat7?
[01:59:27] <gordonfish> 10g is a lot for just network boots. I've seen that work fine on 1g links.
[01:59:28] <simcop2387> on the rack i'm about to use twinax with built in transceivers because it's cheaper.  and never use cat7 it's pointless.  cat6a or cat8
[02:00:05] <simcop2387> network boot works fine up to 3 pis for 1g.  after that, i started to get issues with network latency both on the pis and elsewhere
[02:00:05] <gordonfish> Oh, forgot cat6a was a thing.
[02:00:45] <simcop2387> cat7 costs the same as cat8 and ONLY does up to 10g, for the same lengths as cat6a which is cheaper.  cat8 will do up to 40g
[02:01:14] <simcop2387> walls have cat6a, but i'm doing all patch cables as cat8 anymore because it's only slightly more expensive than cat6a in short lengths
[02:01:46] <daemon> wall wire is normally solid core* sidenote
[02:02:11] <gordonfish> cat8 sounds good when you want to be sure you can get the full 10g without overhead eating into it
[02:02:34] <simcop2387> cat8 is fucking magic, 2GHz bandwidth on each pair up to 100m.  that's insane
[02:02:41] <gordonfish> Damn
[02:03:13] <simcop2387> that said 40g transceivers for cat8 aren't common
[02:03:16] <gordonfish> And I thought I was all future proofed when I wired up my place with cat6 circa 2010
[02:03:29] <daemon> gordonfish, in most likelyhood you are
[02:03:39] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[02:03:40] <daemon> are you even 100% or near it on that?
[02:03:51] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[02:04:16] <daemon> even over cat-5e/1000G you can stream a 4k Movie from a nas in the household
[02:04:35] <simcop2387> cat6 will do 10g over short distances, and most likely will work in a house for it.
[02:04:59] <daemon> we are now doing hardware and cabling that is far far far beyond what any normal household could ever want
[02:05:02] <daemon> heck any small office
[02:05:24] <daemon> to be totally honest, I have well:
[02:05:25] <daemon> Client: HexChat 2.16.0 • OS: Microsoft Windows 11 Pro (x64) • CPU: Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz (4.20GHz) • Memory: 15.9 GiB Total (6.2 GiB Free) • Storage: 612.1 GiB / 1.8 TiB (1.2 TiB Free) • VGA: NVIDIA GeForce GTX 1660 • Uptime: 1d 13h 33m 28s
[02:05:34] <simcop2387> cat6a is better in basically every way though if you're doing a new install, cat8 will cost about double but be more future proof for faster speeds.  personally i'd use cat6a in the walls for most places and cat8 between some key locations where i might eventually want a link that doesn't bottleneck between floors
[02:05:39] <daemon> and I have never maxed it 100% 
[02:05:49] <daemon> network is the same, the external network gateway link speed is 900mbit
[02:06:02] <daemon> so why would you need 10Gbit for anything but local linkways
[02:06:07] <gordonfish> daemon: Sure. Though I find anything above 1080 is just wasting space tbh (that is 10+ gigs per video files eat space quickly if I tried to do a whole library like that.)
[02:06:34] <daemon> gordonfish, I agree, I always download the 1080p version given the choice I can't tell the damn difference for 4k+
[02:06:53] <daemon> back to what I was saying ... hardware is way beyond what we could even conceptually need right now
[02:07:52] <simcop2387> daemon: yea i'm mostly trying to get my core to 10g because i have hit that bottleneck and plan to do more that'll bring me to it again.  the 10+10 between switches is more because i can since i need more than 2 10g ports anyway.  will end up with 3 (server, server, house) that i actually *need* and then just have plenty of bandwidth for the rack since i can do lacp between the switches anyway
[02:08:19] <gordonfish> "Memory: 15.9 GiB Total" 15.9 and not 16 ?
[02:08:40] <simcop2387> gordonfish: x265 10bit 4k is actually about 5GB per movie, but even i still don't generally go that far either
[02:08:46] <daemon> it used to be 16 on windows 10, when I enabled windows 11 security features, CSP TPM etc... it lost 100G
[02:08:56] <daemon> I assume that is for some security balls
[02:09:03] <simcop2387> 10bit video tends to be higher compression ratio for the same quality because of signal processing reawsons
[02:09:22] <daemon> 100M
[02:09:29] <daemon> so the bios must have pinched it for some reason
[02:09:34] <gordonfish> simcop2387: That still feels kinda wasteful, though for some good worth while films it might be ok.
[02:09:46] <simcop2387> daemon: probably unmappable areas for security stuff inside the kernel
[02:09:55] <daemon> simcop2387, makes sense, it will be some useless crap
[02:10:32] <daemon> I sometimes think about just installing freebsd as a main desktop os and tossing windows in the bin >.>, then I remember games
[02:10:42] <simcop2387> gordonfish: yea i've got only like 4-5 movies like that.  i can't wait for av1 encoders to get reasonable speed/quality wise though.  they can get it down to 3GB at that same quality
[02:11:28] <pragma-> sysinfo irc script in 2022!
[02:11:28] <simcop2387> daemon: if bhyve would get better pcie passthrough support you could just leave windows in a VM like I do.  last i looked it wasn't quite ready for handling things well enough yet
[02:11:39] <gordonfish> I hate ram pinching though this isn't anywhere as bad as those cheap systems from some years ago that would have something like 256 MB of ram and use 8 or 16 MB of it for video ram (yeah, RAM sharing)
[02:12:00] <daemon> simcop2387, actually you can pass a GPU through, just it will not be the primary display adapter
[02:12:10] <daemon> so handy for mining etc, not so handy for games etc
[02:12:24] <gordonfish> pragma-: Wait it's 2022 already?
[02:12:36] <daemon> gordonfish, we all have hoverboards and stuff, where is yours
[02:12:39] <pragma-> close enough innit
[02:12:41] * pragma- rounds up
[02:12:49] <simcop2387> daemon: if you can even get it to work, it's still not officially supported.  https://wiki.freebsd.org/bhyve/pci_passthru
[02:12:53] <Paperbot> Link title(s): [ bhyve/pci_passthru - FreeBSD Wiki ]
[02:12:54] <gordonfish> daemon: Right next to my flying delorian and bionic implant
[02:13:15] <daemon> simcop2387, next youtube video target confirmed >:)
[02:13:37] <simcop2387> daemon: GPUs have stupid shit for initializing them that usually prevents it from working without just the right support in the emulated bios/efi
[02:13:48] <daemon> gordonfish, ~ bionic implant is not that far off comically at least in the process of health, that is things that augment natural system procedure not terminator arms
[02:14:08] <daemon> diabetes seems to be leading the front with that
[02:14:26] <gordonfish> simcop2387: Wait, is that the same Bhyve app that Orbitz uses for their wifi/bt enabled sprinkler controllers?
[02:14:34] <simcop2387> gordonfish: nope
[02:14:37] <daemon> nope
[02:14:51] <simcop2387> gordonfish: bhyve is' freebsd's equivilent of linux's kvm for virtualization
[02:14:55] <gordonfish> ah
[02:15:00] <daemon> gordonfish, https://bhyve.org
[02:15:01] <Paperbot> Link title(s): [ BSD Hypervisor ]
[02:15:27] <simcop2387> it works pretty well when i've played with it, it's just missing a decent amount of tooling around it for some of the more niche uses.
[02:15:46] <daemon> yeah and the process of bootstrapping and getting some os's to work is weird
[02:15:58] <daemon> I had to hack the living shit out of it to get cent os 7 to work
[02:16:03] <daemon> with the grub bootloader
[02:16:53] <gordonfish> Re: <daemon> gordonfish, ~ bionic implant is not that far off comically at least in the process of health, that is things that augment natural system procedure not terminator arms
[02:17:09] <gordonfish> Either way you know someone somewhere, with too  much money, is going to use such technical advances to go full on Crazy of Borg
[02:17:25] * daemon hopes we geta real life 7 of 9
[02:17:31] <simcop2387> daemon: oh right, didn't see you around when i got it going yesterday.  zvol -> iscsi -> other server for virts.  setup an ssd cache in front of it so that even iscsi over 1g link works reasonably well.  setup 2 5TB thin zvols for it :)
[02:17:41] <gordonfish> (pre STP 7 of 9 especially)
[02:18:00] <simcop2387> i'm not used to STP being an acronym still
[02:18:01] <daemon> simcop2387, nice!
[02:18:23] <daemon> simcop2387, can you actually keep up with all the acronyms now days, I have just defaulted to asking wtf is @ acronym
[02:18:28] <simcop2387> daemon: yea and once i have the 10g nic on that server and the switch it'll be basically native speeds for those disks too :)
[02:18:29] <gordonfish> simcop2387: I used to only associate mainly with Richard Petty until that show came out
[02:18:30] <daemon> because I presume I will be wrong in my assumption
[02:18:41] <simcop2387> gordonfish: i'm upset that STP and STP have the same acronym too
[02:18:46] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Remote host closed the connection)
[02:19:23] <gordonfish> Discovery has the more unfortunate one though
[02:19:54] <simcop2387> STP is annoying, Standard Temperature and Pressure
[02:20:42] <gordonfish> and Sewage Treatment Plant
[02:21:10] <simcop2387> perlbot: acrofind STP
[02:21:13] <perlbot> simcop2387: Solar Terrestrial Physics
[02:21:19] <simcop2387> perlbot: acrofind STP
[02:21:20] <gordonfish> (and Shielded Twisted Pair on the subject of networking)
[02:21:23] <perlbot> simcop2387: Supervisory Training Program
[02:23:23] <daemon> Sex Tape Prerogative ?
[02:24:34] <daemon> by the way if you are listening, thank you SMS for all this
[02:26:55] *** Quits: cxreg (~count@63.228.111.44) (Ping timeout: 252 seconds)
[02:28:28] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[02:29:43] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 256 seconds)
[02:32:29] *** Quits: pizdets (~pizdets@183.182.111.240) (Ping timeout: 256 seconds)
[02:32:51] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[02:33:48] *** Joins: pizdets (~pizdets@183.182.115.237)
[02:37:39] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[02:39:17] <simcop2387> daemon: my fun plan is to get a turing pi v1 board and a bunch of compute module 3s to power a large cluster for running evals and possibly some github runners and such for people wanting to test perl modules on arm linux.  plan to network boot them completely and provide every perl version via nfs.
[02:39:50] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[02:42:30] *** Joins: fb51 (~fb51@ip-109-43-115-232.web.vodafone.de)
[02:42:47] *** Quits: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de) (Quit: leaving)
[02:47:05] *** Quits: rewt (~default@user/rewt) (Ping timeout: 252 seconds)
[02:47:39] *** Joins: rewt (~default@user/rewt)
[02:49:07] <daemon> simcop2387, adventurous sounds fun
[02:49:20] <daemon> why S3
[02:50:03] *** Quits: fb51 (~fb51@ip-109-43-115-232.web.vodafone.de) (Remote host closed the connection)
[02:53:43] <daemon> oh sorry brain read that the wrong way around, think I might have a bit of autism
[02:55:10] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[02:57:34] *** Joins: cxreg (~count@63.228.111.44)
[03:01:51] <gordonfish> daemon: Sega Master System?
[03:05:25] <daemon> gordonfish, sure why not :D
[03:06:09] <gordonfish> Re: thank you SMS for all this
[03:06:35] <daemon> https://en.wikipedia.org/wiki/SMS
[03:06:36] <Paperbot> Link title(s): [ SMS - Wikipedia ]
[03:06:47] <gordonfish> (I assume that is a person and not a (heavily modded) classic console.)
[03:07:04] <gordonfish> Oh, right
[03:07:05] <daemon> because of the compressed space for a message (like tweets)
[03:07:13] <daemon> people compressed things into acronyms and smileys
[03:07:16] <daemon> so they fit 
[03:07:26] <daemon> I believe its the origin of LOL as well
[03:07:29] <gordonfish> Yeah now it makes sense
[03:08:11] <gordonfish> I thought LOL came from AOL
[03:08:18] <daemon> SMS was around before AOL :)
[03:08:23] <gordonfish> true
[03:08:49] <daemon> and because humans are lazy, we shorten everything we can even keystrokes
[03:08:59] <gordonfish> Though a lot of the "l33t peeps" first started breeding on AOL
[03:09:02] <daemon> so now in professional documents where you could quite literally do a search and repeat ...
[03:09:13] *** bedroller is now known as ciphersalad
[03:09:13] <daemon> l337 started on IRC
[03:09:15] <gordonfish> (and IRC)
[03:09:39] <daemon> irc.msn.com and those before it -_-"
[03:09:59] <gordonfish> IRC is often thought of where that started but I distinctly remember seeing that in AOL circa 1995 and on some BBSs earlier still
[03:10:27] <gordonfish> Man I forgot msn has an irc server, probably for that comic chat thing
[03:10:44] <daemon> it did have it does not anymore and yes it was for cchat :)
[03:10:47] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[03:10:58] <daemon> its the thing that invented %#channels and the +q (owner) channel mode
[03:11:01] <daemon> and access levels
[03:11:31] <gordonfish> Oh. I thought that came from dalnet, or I'm probably thinking of nick/chan/etc services
[03:11:50] <daemon> nope go look at win95/98 for the 'cchat' or 'comic chat' application
[03:12:37] <daemon> https://en.wikipedia.org/wiki/Microsoft_Comic_Chat
[03:12:37] <Paperbot> Link title(s): [ Microsoft Comic Chat - Wikipedia ]
[03:13:13] <aquanight> crazy to think that once MS had an IRC client. These days, IRC on Windows -> mIRC (yuk), irssi via assorted POSIX emulators (eeeh), or webirc (also yuk)
[03:13:33] <daemon> Client: HexChat 2.16.0 • OS: Microsoft Windows 11 Pro (x64) • CPU: Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz (4.20GHz) • Memory: 15.9 GiB Total (6.2 GiB Free) • Storage: 612.3 GiB / 1.8 TiB (1.2 TiB Free) • VGA: NVIDIA GeForce GTX 1660 • Uptime: 1d 14h 41m 36s
[03:13:36] <daemon> >:)
[03:13:51] <aquanight> or hexchat via assorted POSIX emulators
[03:13:58] <xenu> people use irc clients on their computers locally? lol
[03:14:14] <daemon> that is how it has to be done
[03:14:23] <daemon> ideally via a terminal over rs-232 ;)
[03:14:38] <aquanight> but of those three only irssi is channel-relevant so whatever
[03:15:01] <aquanight> and even then only somewhat
[03:15:02] <daemon> how the heck is irssi channel relevant
[03:15:07] <aquanight> daemon: perl scripts
[03:15:16] <daemon> aquanight, I support perl, python and tcl via hexchat
[03:15:22] <daemon> the same as the original xchat
[03:16:20] <aquanight> admittedly I've had it in the back of my head to go dig into irssi's perl layering and tear it many new ones
[03:16:32] <daemon> oh don't worry there all terrible
[03:16:35] <aquanight> mainly when I'm better at understanding XS
[03:16:38] <daemon> even bitchX's was nuts
[03:17:10] <aquanight> like right now irssi basically just copies its internal structs into blessed hashes
[03:17:14] <daemon> tcl and perl have been there from the start, python is a recent addition for both irssi and (he)xchat
[03:17:39] <aquanight> if I were adventurous enough I'd redo them to have direct access to the underlying structs
[03:18:06] <daemon> eh weekend project :) you could write a module for specific use
[03:18:15] <aquanight> part of the problem is I also have to understand glib and I really don't.
[03:18:45] <daemon> weirdly I think you would only have to ask for help to get it for this one, especially as this is an irc channel!
[03:19:43] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 252 seconds)
[03:38:36] *** Quits: woei (~woei@cust-73-85-110-94.dyn.as47377.net) (Ping timeout: 260 seconds)
[03:42:39] *** Joins: D-ion (~D-ion___@176.59.8.123)
[03:45:15] *** ciphersalad is now known as fling
[03:49:34] *** Quits: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:51:31] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[03:51:55] * GumbyPAN CPAN Upload: Zonemaster-Engine-v4.3.0 by ZNMSTR https://metacpan.org/release/ZNMSTR/Zonemaster-Engine-v4.3.0
[03:51:55] * GumbyPAN CPAN Upload: Zonemaster-LDNS-2.2.1 by ZNMSTR https://metacpan.org/release/ZNMSTR/Zonemaster-LDNS-2.2.1
[03:51:58] * GumbyPAN CPAN Upload: Zonemaster-Backend-8.0.0 by ZNMSTR https://metacpan.org/release/ZNMSTR/Zonemaster-Backend-8.0.0
[03:52:04] * GumbyPAN CPAN Upload: Zonemaster-CLI-v3.1.1 by ZNMSTR https://metacpan.org/release/ZNMSTR/Zonemaster-CLI-v3.1.1
[03:54:48] <ology> BEASTMASTER
[03:58:04] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:58:45] *** Joins: Colt (~Colt@user/colt)
[04:00:47] *** Quits: D-ion (~D-ion___@176.59.8.123) (Ping timeout: 252 seconds)
[04:01:27] *** Joins: woei (~woei@cust-73-85-110-94.dyn.as47377.net)
[04:08:53] *** Quits: Pali (~pali@user/pali) (Ping timeout: 256 seconds)
[04:19:05] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[04:21:00] *** Joins: vms14 (~user@45.red-83-47-205.dynamicip.rima-tde.net)
[04:23:16] *** Joins: monkey_ (~user@190.104.116.153)
[04:23:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:38e1:73a2:ce5d:fb32)
[04:26:36] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:bde9:c3fb:c9c:3dee) (Ping timeout: 245 seconds)
[04:32:55] <vms14> https://paste.debian.net/1222181/
[04:32:56] <vms14> xd
[04:32:57] <Paperbot> Link title(s): [ debian Pastezone ]
[04:33:11] <vms14> wanted to do a different thing but meh
[04:33:28] <vms14> wanted a log function that only would be triggered if a flag was set
[04:34:26] <vms14> but this forces the user to have a our $flag. If the module is an object the flag has no sense
[04:35:35] <vms14> and this is a dirty hack $db{POSIX::strftime("%F %T ", @time) . ++$db{POSIX::strftime("%F", @time)}} = shift;
[04:36:04] <vms14> it even pollutes the db having an entry for every day with the count of logs of that day
[04:36:52] <vms14> idk how to avoid this without using other db, as (HiRes::time)[1] isn't enough
[04:38:43] <vms14> btw the count is a feature and a bad design result at same time :D
[05:06:03] <aquanight> # new logdb2 "/home/user/log.db";
[05:06:13] <aquanight> indirect-object style syntax is discouraged these days
[05:07:11] <aquanight> also
[05:07:18] <aquanight> 18:04:54/C0DF9 < vms14> but this forces the user to have a our $flag. If the module is an object the flag has no sense ## it does not
[05:07:37] <aquanight> assuming you're doing something like ${caller . "::enable_logging"} you can do that without them needing to 'our' for it
[05:08:05] <aquanight> but really you would rather use your own %enable and track packages in that
[05:09:23] <aquanight> and then I have questions about your decision to put the methods as 'fields' rather than proper object methods
[05:09:53] *** Joins: whynot (~whynot@37.73.109.154)
[05:10:25] <xenu> >18:04:54/C0DF9
[05:10:28] <xenu> wtf is this timestamp
[05:10:47] <aquanight> bout ready to put a perlbot explanation of this
[05:11:22] <aquanight> xenu: $seconds_since_midnight * 0x100000 / 86400
[05:13:00] <xenu> why
[05:13:30] <vms14> aquanight: tried to to that with caller, didn't see the value of the scalar if it wasn't with our
[05:13:44] <vms14> also, I had to put no strict refs
[05:13:49] <aquanight> sweval: use Time:HiRes (); my ($n, $nu) = Time::HiRes::gettimeofday(); my @lcl = localtime $n; my $s = ($lcl[0] + 60*$lcl[1] + 3600*$lcl[2]) + ($nu / 1000000); sprintf "%02d:%02d:%02d/%05X", @lcl[2,1,0], int($s * 0x100000 / 86400);
[05:13:51] <perlbot> aquanight: ERROR: syntax error at (IRC) line 1, near "use Time:" 
[05:13:56] <aquanight> sweval: use Time::HiRes (); my ($n, $nu) = Time::HiRes::gettimeofday(); my @lcl = localtime $n; my $s = ($lcl[0] + 60*$lcl[1] + 3600*$lcl[2]) + ($nu / 1000000); sprintf "%02d:%02d:%02d/%05X", @lcl[2,1,0], int($s * 0x100000 / 86400);
[05:13:57] <vms14> I have the first attempt here
[05:13:58] <perlbot> aquanight: 10:43:55/7279B
[05:14:31] <vms14> https://paste.debian.net/1222182/
[05:14:33] <Paperbot> Link title(s): [ debian Pastezone ]
[05:15:24] <aquanight> vms14: yes the caller would have to do that, or to just use a qualified name
[05:15:49] <aquanight> but really
[05:16:20] <aquanight> it would be better to do this with something like logdb2->enable;
[05:16:31] <aquanight> or hell
[05:16:50] <aquanight> if they're already doing 'use logdb2;' they probably want the logging anyway
[05:17:12] <vms14> once it was an object the flag stopped having any sense
[05:17:12] <aquanight> so set it up in import
[05:17:54] <aquanight> why did you need a flag to begin with really
[05:18:12] <vms14> and just realized no one will log optionally and if it does will manage by himself
[05:18:51] <vms14> aquanight: wanted something like log("stuff"); and you can use it in any function that could log something
[05:19:09] <vms14> once you set a variable it would work
[05:19:18] <aquanight> yeah... that's a thing you can do
[05:19:20] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[05:19:22] <aquanight> you didn't need a variable
[05:19:31] <aquanight> just expose it via Exporter
[05:19:40] <aquanight> if they imported your log function they obviously wanted it
[05:19:50] <vms14> also at first wanted to $log++ so verbose worked when log was 2 and trace when 3
[05:20:06] <aquanight> ah we're talking command line type of stuff
[05:20:18] <vms14> if its 3 all 3 functions would trigger
[05:20:44] <vms14> but meh
[05:21:07] <vms14> and about the representation of the object
[05:21:16] <vms14> why you don't like the hash
[05:21:35] <vms14> in this case is a simple example, but I was thinking in following this aproach
[05:21:41] <aquanight> 18:43:29/C7BAE < xenu> why ## at the time I first wrote it I think I had some weird fascination with binary clocks (and not the kind that just do H/M/S each in base 2)
[05:22:07] <aquanight> somewhere in that process I realized it worked better in a base16 representation. Technically it's more compact than HH:MM:SS :D
[05:22:15] <vms14> a hash with methods in the package behaves as an object, but I feel some limits
[05:22:34] <vms14> if you put closures you can have all kind of data there
[05:22:42] <aquanight> then some time later I was adding some stuff to /scrollback, and wrote myself a /scrollback quote and /scrollback search and discovered that this made a very convenient searchable for picking out a recent line
[05:23:06] <vms14> don't need to use references and work around stuff to put it in a hash
[05:23:14] <aquanight> so it earned itself a permanent place in my scripts even after I stopped caring about base-2/16 clocks
[05:24:33] <aquanight> vms14: I could believe that if you were actually using any kind of complex data
[05:24:51] <aquanight> but literally the only closed variable you're using is $database_path
[05:25:06] <aquanight> worse than that is that you're re-tie()ing the file with every acccess
[05:25:16] <aquanight> your log is going to jam the system up with that much I/O cycling
[05:26:28] <aquanight> you could do this just as well with my $this = bless { path => $database_path, db = {} }, $package; tie $this->{db}->%*, "DB_File", $database_path; return $this;
[05:26:39] <aquanight> and then your log/get/show can be normal methods
[05:27:15] <aquanight> you could do this just as well with my $this = bless { path => $database_path, db => {} }, $package; tie $this->{db}->%*, "DB_File", $database_path; return $this; **
[05:28:35] <vms14> but then it remains opened
[05:28:39] <aquanight> simcop2387: how hard would it be to make a perlbot macro for that timestamp thing? I think it's like the 4th time I've been asked about it now ;D
[05:29:05] <aquanight> vms14: only until you're done with it
[05:29:21] <vms14> well, database "handles" should be opened
[05:29:32] <vms14> no, until you destroy the object
[05:29:41] <aquanight> if the controller object is lexical it'll close when the lexical goes out of scope
[05:30:15] <aquanight> vms14: yes really this is how objects usually work
[05:30:22] <vms14> the object is likely to live in main and don't be explicitly destroyed, but anyways no one will use this module
[05:30:28] <vms14> I guess even me xD
[05:30:29] <aquanight> they acquire the resources they need, hold them while they're needed, release them when you're done
[05:30:51] <vms14> and it seems it's better to just let it be open
[05:31:23] <aquanight> odd to use a .db file for a log anyway
[05:31:27] <vms14> but, if it was a file would you let it opened too?
[05:31:43] <aquanight> this is no worse than logging to a log file
[05:31:48] <aquanight> you keep the log open until you're done
[05:32:04] <aquanight> in many cases that can be the life of the process
[05:32:15] <aquanight> unless there's exclusive locking involved it's not a big deal
[05:32:55] <aquanight> if this is part of a larger system you might hook into your $SIG{HUP} handler to close and reopen the log file
[05:32:59] <vms14> xD even weirder is the first version which assumes a directory and creates a (caller)[1] . '.db' file
[05:33:24] <vms14> so it creates a different db for any script/module 
[05:33:31] <aquanight> ... yikes.
[05:34:04] <aquanight> you could consider safeguarding against two different objects trying to use the same target file
[05:34:26] <vms14> and about locking and race conditions
[05:35:24] <aquanight> how much effort you put into this largely depends on how important the log is
[05:35:32] <vms14> 0
[05:35:55] <aquanight> operational logging (like you would use for an audit trail) I would consider important enough to make robust
[05:36:13] <aquanight> debug logging I would just wrap an eval {} around it to swallow any random errors that happen and just move on with life
[05:36:35] <vms14> what about exceptions in perl
[05:36:58] <aquanight> exceptions should be handled in the context in which they occur and/or are expected
[05:37:06] <vms14> I know die can be given an object and it will put as error
[05:37:13] <aquanight> yes
[05:37:19] <aquanight> this has nothing to do with logging
[05:37:40] <aquanight> this is more about exceptional conditions that can't expect to be handled in linear program flow
[05:37:55] <aquanight> not many people even really use exceptions
[05:38:04] <vms14> no, I ask because it seems the best way is to use objects as exceptions
[05:38:18] <aquanight> I can't say I've seen an example of this being done
[05:38:29] <aquanight> again, I don't think many people even use exceptions
[05:39:21] <aquanight> exceptions are designed to essentially forceably abandon an operation up to a certain level (that you determine with eval { })
[05:39:44] <aquanight> do not use exceptions as control flow
[05:39:46] <vms14> but they can be combined with try catch to provide a nice exception system
[05:39:51] <aquanight> that's not what they are for
[05:40:01] <aquanight> this isn't just about perl.
[05:40:14] <aquanight> you see this kind of thing in nearly every language that has exceptions
[05:40:40] <vms14> well in perl you have much more freedom
[05:40:47] <aquanight> for all that C++ has exceptions, still so many operations simply leave behavior undefined or have success/fail linear return conditions
[05:41:09] <vms14> I usually see a lightweight minimal, but working, implementation, and then the cpan
[05:41:16] <aquanight> .NET uses them a bit more liberally but it's still relatively easy to design algorithms to avoid them entirely
[05:41:29] <aquanight> and then there's java
[05:41:33] <aquanight> I won't speak of java.
[05:41:33] <vms14> and in the cpan you usually find something tiny, something intermediate and something big
[05:41:49] *** Quits: Su-Shee (~Susanne@p4ff49452.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[05:42:03] <vms14> well, actually the first time I saw objects in perl I felt they were a joke
[05:42:29] <aquanight> it's true that you can do what you want
[05:42:30] <vms14> want an object? just bless it and it's an object 
[05:42:38] <aquanight> this too is not unique to perl
[05:42:54] <aquanight> but the question you should ask yourself is: "is this a good idea?"
[05:43:01] <vms14> I have this freedom in lisp
[05:43:10] <vms14> but I don't have the cpan there
[05:43:16] *** Joins: Su-Shee (~Susanne@p50894668.dip0.t-ipconnect.de)
[05:43:47] <vms14> I used perl mostly as scripting language, but now I want to focus
[05:44:03] <vms14> I don't feel as comfortable as I did in lisp
[05:44:42] <vms14> in lisp any idea I had, just had to convert it into a list and it was part of the language
[05:45:23] <aquanight> like I said, certainly you can do many crazy things
[05:45:26] <vms14> here I need to learn more, and for objects I want to bless closures
[05:45:30] <aquanight> hell perl's motto is "there is more than one way to do it"
[05:46:06] <aquanight> if you really want to get into objects, you might also consider looking at Moo, Moose, and Object::Pad modules from CPAN
[05:46:13] <vms14> blessing a hash reference forces me to make references of everything
[05:46:24] <aquanight> as these packages are pretty much leading the future in perl's object system right now (especially Object::Pad)
[05:46:39] <vms14> how do I store stuff in some object without a hash?
[05:46:50] *** Joins: deadmarshal (~deadmarsh@95.38.119.139)
[05:47:04] <aquanight> the hash is the traditional base structure to build objects around yes
[05:47:24] <aquanight> that's not stopped people from using: arrays, anonymous subs, or even scalars
[05:47:36] <aquanight> hell IO::File are blessed filehandles
[05:47:55] <vms14> what happens if you bless a tied reference?
[05:48:06] <aquanight> a what what what
[05:48:12] <vms14> like tieing with db hash and returning a ref ot this
[05:48:21] <vms14> of*
[05:48:41] <aquanight> shenanigans probably
[05:48:44] <vms14> blessing that reference and returning it
[05:49:06] <vms14> then what should I do?
[05:49:12] <vms14> this is when I come to closures
[05:49:37] <vms14> just return a hash with subs and they inherit vars existing in the constructor
[05:49:59] <aquanight> sweval: use Object::Pad; use Tie::Hash; class Test isa Tie::StdHash { method FETCH { say "Thing"; $self->SUPER::FETCH(@_); } } my %x; tie %x, "Test"; my $x = bless \%x, "Foo";
[05:50:01] <perlbot> aquanight: ERROR: Can't locate Tie/StdHash.pm in @INC (you may need to install the Tie::StdHash module) (@INC contains: $BLEAD/lib/site_perl/5.35.5/x86_64-linux $BLEAD/lib/site_perl/5.35.5 $BLEAD/lib/5.35.5/x86_64-linux $BLEAD/lib/5.35.5) at (IRC) line 1. BEGIN failed--compilation aborted at (IRC) line 1. 
[05:50:01] <vms14> also it provides auto encapsulation 
[05:50:15] <aquanight> ...
[05:50:20] <aquanight> LEONEEEEERD.
[05:50:29] <aquanight> why u 'require' when the class is already there :(
[05:50:57] <aquanight> sweval: use Object::Pad; use Tie::Hash; $INC{"Tie/StdHash.pm"} = 1; class Test isa Tie::StdHash { method FETCH { say "Thing"; $self->SUPER::FETCH(@_); } } my %x; tie %x, "Test"; my $x = bless \%x, "Foo";
[05:50:58] <perlbot> aquanight: ERROR: Can't locate Tie/StdHash.pm in @INC (you may need to install the Tie::StdHash module) (@INC contains: $BLEAD/lib/site_perl/5.35.5/x86_64-linux $BLEAD/lib/site_perl/5.35.5 $BLEAD/lib/5.35.5/x86_64-linux $BLEAD/lib/5.35.5) at (IRC) line 1. BEGIN failed--compilation aborted at (IRC) line 1. 
[05:51:09] *** Quits: deadmarshal (~deadmarsh@95.38.119.139) (Ping timeout: 252 seconds)
[05:51:14] <aquanight> I don't remember how to do that.
[05:51:16] <aquanight> oh
[05:51:29] <aquanight> sweval: use Object::Pad; use Tie::Hash; BEGIN { $INC{"Tie/StdHash.pm"} = 1; } class Test isa Tie::StdHash { method FETCH { say "Thing"; $self->SUPER::FETCH(@_); } } my %x; tie %x, "Test"; my $x = bless \%x, "Foo";
[05:51:30] <perlbot> aquanight: ERROR: Unable to find SUPER::new for Tie::StdHash at (IRC) line 1. 
[05:51:34] <vms14> xd
[05:51:38] <aquanight> ..
[05:51:41] <aquanight> oh right.
[05:52:30] <aquanight> sweval: use Object::Pad; use Tie::Hash; BEGIN { $INC{"Tie/StdHash.pm"} = 1; } sub Tie::StdHash::new { return (shift)->TIEHASH(@_); } class Test isa Tie::StdHash { method FETCH { say "Thing"; $self->SUPER::FETCH(@_); } } my %x; tie %x, "Test"; my $x = bless \%x, "Foo";
[05:52:31] <perlbot> aquanight: bless( {}, 'Foo' )
[05:52:40] <aquanight> now we're in business
[05:52:53] <aquanight> sweval: use Devel::Peek; use Object::Pad; use Tie::Hash; BEGIN { $INC{"Tie/StdHash.pm"} = 1; } sub Tie::StdHash::new { return (shift)->TIEHASH(@_); } class Test isa Tie::StdHash { method FETCH { say "Thing"; $self->SUPER::FETCH(@_); } } my %x; tie %x, "Test"; my $x = bless \%x, "Foo"; Dump($x);
[05:52:54] <perlbot> aquanight: SV = IV(0x557e1b9525c8) at 0x557e1b9525d8   REFCNT = 1   FLAGS = (ROK)   RV = 0x557e1b9524d0   SV = PVHV(0x557e1b86ded0) at 0x557e1b9524d0     REFCNT = 2     FLAGS = (OBJECT,RMG,SHAREKEYS)     MAGIC = 0x557e1b90a1a0       MG_VIRTUAL = &PL_vtbl_pack       MG_TYPE = PERL_MAGIC_tied(P)       MG_FLAGS = 0x02         REFCOUNTED       MG_OBJ = 0x557e1b8b... [Output truncated. Use `more` to read more]
[05:53:06] <aquanight> ok that's what I thought
[05:53:12] <aquanight> blessing and tie are technically separate
[05:53:39] <aquanight> so the same 'data' can be both blessed and tied and to different classes
[05:54:17] <vms14> yes, but calling new and tie inside new can break stuff
[05:54:35] <aquanight> why
[05:54:38] <aquanight> they're not special
[05:54:43] <aquanight> new is not a special name
[05:54:47] <vms14> returning a tied and blessed object at same time, for example a hash can be created
[05:55:16] <vms14> but there are times that will ask for more tie functions like firstkey
[05:55:19] <aquanight> the only thing you might break is people's brains when they're trying to understand wtf is happening when your data is tied and blessed at the same time
[05:55:41] <aquanight> hell
[05:55:44] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[05:55:52] <aquanight> tie()ing your object can be a way to hide your object data from outside access
[05:55:56] <aquanight> sortof
[05:56:35] <aquanight> the thing you have to remember
[05:56:41] <vms14> so I can tie or closure if a hash does not meet my needs
[05:56:43] <aquanight> is that tie affects the operations applied to the data object
[05:57:03] <aquanight> but while blessing applies to the data object, it affects the references
[05:57:07] <vms14> I still thinking returning a closure is 'cleaner'
[05:57:09] <aquanight> in that it allows the use of $ref->method
[05:57:13] <vms14> or a hash with closures
[05:57:36] <aquanight> the reason for the hash is that it plays nicely with object inheritance
[05:57:51] <aquanight> if someone inherits your object they can add their own fields easily
[05:58:00] <vms14> and plymorphism as it removes old keys
[05:58:18] <aquanight> you wouldn't want to remove keys
[05:58:22] <aquanight> because your base class needs them
[05:59:01] <aquanight> that's why you don't put your methods in there. By using the $obj->method process you can use perl's method resolution process. It has some options that putting your methods in the hash does not.
[05:59:01] <vms14> but seems kind of dirty to implement inheritance trough hash refs
[05:59:15] <aquanight> that's how it's been done prior to Moo/se and O:P
[05:59:21] <vms14> but $obj->method can be a wrapper
[05:59:46] <vms14> to $obj->{function}()
[06:00:10] <aquanight> before Moo/se and O:P the start of an object tree typically was something like: sub new { my $self = bless {}, shift; <set up fields here>; return $self; }
[06:00:17] <vms14> or can be called that way for the user as it's almost the same
[06:00:36] <aquanight> then derived classes would have: sub new { my $self = (shift)->SUPER::new(@_); ...; return $self; }
[06:00:55] <aquanight> probably not hard to find examples of this constructor pattern
[06:01:03] <vms14> the thing is no object property resides there, only methods, I mean, variables aren't accesible by the user 
[06:01:18] <vms14> the user cannot $obj->{_secrets}
[06:01:38] <aquanight> to be fair
[06:01:41] <aquanight> with your logdb2 class
[06:01:48] <aquanight> I absolutely could get to $database_path if I wanted
[06:01:58] <aquanight> it's a bit more pain in the ass but nothing in perl will stop me
[06:02:09] <vms14> well, you can avoid this by { my $stuff = "something"; sub stuff {...}}
[06:02:20] <aquanight> you could block it and scope it all you want
[06:02:25] <aquanight> I can still get to it
[06:02:35] <aquanight> not directly mind you
[06:02:39] <aquanight> it's a very roundabout way
[06:02:46] <vms14> :O
[06:02:49] <vms14> how dare you
[06:02:50] <aquanight> but generally perl cannot hide stuff from perl
[06:03:17] <vms14> ah, you mean like Devel::* stuff
[06:03:20] <aquanight> it's *extremely* difficult to squirrel away data to where external very determined code cannot get to it
[06:03:30] <aquanight> but use B; and I can get to anything
[06:03:43] <aquanight> for example in this case?
[06:03:46] <vms14> the perl bot in this channel is quite good
[06:03:55] <aquanight> I start by getting the coderef from $self->{log}
[06:04:01] <aquanight> my $cref = $self->{log};
[06:04:10] <aquanight> my $cv = B::svref_2object($cref):
[06:04:28] <aquanight> I now have a B::CV object representing the closure method
[06:05:01] <aquanight> I can now walk its PAD (its local variables), and look for one that is named '$database_path' and has PAD_OUTER set (indicating it's an "outside" lexical - a closured one)
[06:05:09] <aquanight> and baddabing baddaboom I have your privates.
[06:05:13] <vms14> how dare you look at my private variables
[06:05:28] <vms14> should I've prefixed them with _
[06:05:36] <aquanight> going out of your way to hide your data is really a waste of time
[06:05:53] <aquanight> the answer to this situation in most perl OO modules is
[06:05:57] <aquanight> step 1: ask nicely
[06:05:59] <vms14> yeah not really wanting to do
[06:06:03] <aquanight> step 2: if you do it anyway you get to keep all 3 halves
[06:06:20] <vms14> what I want is to avoid to convert everythig to a ref so it fits in a hash ref
[06:06:52] <aquanight> the reason I say this is that choosing your object structure to hide your variables means you're taking a cost (putting your methods in the object hash, instead of the normal symbol table that is *designed* for such things), and getting no actual benefit
[06:07:06] <aquanight> vms14: really if you like this way of doing things
[06:07:08] <vms14> with a closure I can just sub new { my $stuff = "this"; bless...}
[06:07:11] <aquanight> you should really look into Object::Pad
[06:07:21] <aquanight> it gives you literally exactly what you're doing but you can write methods normally
[06:07:26] <vms14> aquanight: I think it's in progress yet
[06:07:41] <aquanight> vms14: it's still on CPAN
[06:07:46] <aquanight> you can download it, install it, use it
[06:07:50] <aquanight> no one can stop you
[06:08:09] <vms14> yeah, and if it will be in core later, makes sense
[06:08:09] <aquanight> and if you find something broken I'm sure LeoNerd would love to hear about it
[06:08:30] <vms14> if I use it he will cry
[06:08:36] <aquanight> unlikelyh
[06:08:47] <vms14> just imagine logdb3 using object pad
[06:08:52] <aquanight> I already can
[06:09:41] <aquanight> class logdb2 { has $database_path :param; has %db; ADJUST { tie %db, DB_File => $database_path; } method log { my @t = localtime; .........
[06:09:47] <vms14> I'll try to install it
[06:10:02] <vms14> https://metacpan.org/pod/Object::Pad
[06:10:04] <Paperbot> Link title(s): [ Object::Pad - a simple syntax for lexical slot-based objects - metacpan.org ]
[06:11:21] <vms14> wow uses threads
[06:11:34] <vms14> for parsing?
[06:11:38] <vms14> wtf
[06:11:39] <aquanight> hmm?
[06:11:54] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Quit: leaving)
[06:12:00] <aquanight> not sure what you mean by that
[06:12:39] <vms14> lol nvm I saw -thread while compiling but it's default stuff since perl haas thread support
[06:12:57] <vms14> I suppose
[06:13:00] <aquanight> yes when you build a module that includes native components it has to match with your perl configuration
[06:13:21] <aquanight> most distribution perls are threaded so any module will build to target threaded perl
[06:13:23] <vms14> I tend to install them from vendor site
[06:13:47] <aquanight> cpan will generally do the right thing for your perl config
[06:13:49] <vms14>  some packages broke while compiling time ago
[06:14:02] <vms14> but most work fine
[06:16:06] <aquanight> generally speaking if you can do
[06:16:10] <aquanight> perl -V | grep USE_ITHREADS
[06:16:14] <aquanight> and it spits out something
[06:16:19] <aquanight> that means you have a threaded perl
[06:16:32] <aquanight> perlbot: basheval perl -V | grep USE_ITHREADS
[06:16:33] <perlbot> aquanight: [Exited 1]
[06:16:38] <vms14> i know it has
[06:16:51] <vms14> perl works fine here in netbsd
[06:17:04] <vms14> it's the reason I'm using perl instead of common lisp
[06:17:13] <aquanight> perlbot: sweval use Config; Config::config_vars(qw/USE_ITHREADS/);
[06:17:14] <perlbot> aquanight: USE_ITHREADS='UNKNOWN'; 
[06:17:18] <aquanight> perlbot: swevalt use Config; Config::config_vars(qw/USE_ITHREADS/);
[06:17:21] <perlbot> aquanight: USE_ITHREADS='UNKNOWN'; 
[06:17:30] <vms14> common lisp has no threads there and most libraries won't work, or won't work as they should
[06:17:41] <aquanight> oh right
[06:17:46] <aquanight> perlbot: sweval use Config; Config::config_vars(qw/useithreads/);
[06:17:48] <perlbot> aquanight: useithreads='undef'; 
[06:17:51] <aquanight> perlbot: swevalt use Config; Config::config_vars(qw/useithreads/);
[06:17:53] <perlbot> aquanight: useithreads='define'; 
[06:18:06] <vms14> in perl I had only one problem while installing imagemagick from cpan I guess
[06:18:26] <vms14> but just installed it from netbsd repo 
[06:18:27] <aquanight> perlbot: swevalt use Config; Config::config_vars(qw/usemultiplicity/);
[06:18:28] <perlbot> aquanight: usemultiplicity='define'; 
[06:18:55] <aquanight> anyway
[06:19:49] <aquanight> if you ever go reading any XS code
[06:20:00] <aquanight> you'll sometimes see stuff like aTHX or pTHX or such
[06:20:17] <aquanight> and that's related to the threading stuff
[06:22:19] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:23:48] <vms14> sad
[06:24:16] <vms14> https://paste.debian.net/1222185/
[06:24:16] <vms14>  
[06:24:17] <Paperbot> Link title(s): [ debian Pastezone ]
[06:24:26] <vms14> Global symbol "$legs" requires explicit package name (did you forget to declare "my $legs"?) at pad.pl line 9.
[06:25:03] <vms14> so I cannot use a previously defined value
[06:25:12] <vms14> or can I?
[06:26:08] <vms14> well I suppose no as it needs time
[06:26:12] <vms14> but meh
[06:27:15] <aquanight> try has $paws :params { $legs };
[06:27:49] <aquanight> the problem is when you use = <thing> it runs too early (once when the class block is scanned). But when you put it inside {} it's deferred until ->new is called so it can use other variables
[06:28:51] <aquanight> perlbot: sweval use Object::Pad; class cat { has $legs :param = 4; has $paws :param { $legs }; method meh { say "$legs $paws"; } } cat->new->meh;
[06:28:52] <perlbot> aquanight: ERROR: parse failed--compilation aborted at (IRC) line 1. 
[06:29:09] * aquanight blink
[06:29:16] <aquanight> ... 'parse failed'?
[06:29:20] <aquanight> the fuck diagnostic is that?
[06:30:23] <vms14> Global symbol "$legs" requires explicit package name (did you forget to declare "my $legs"?) at pad.pl line 9.
[06:30:23] <vms14> parse failed--compilation aborted at pad.pl line 9.
[06:30:30] <vms14> this is what means
[06:30:32] <vms14> the same
[06:30:41] <aquanight> perlbot: sweval use Object::Pad; class cat { has $legs :param = 4; has $paws :param { $legs }; method meh { say "$legs $paws"; } }; cat->new->meh;
[06:30:41] <vms14> {} seems to do nothing
[06:30:42] <perlbot> aquanight: ERROR: parse failed--compilation aborted at (IRC) line 1. 
[06:31:08] <vms14> maybe with "@{[]}"? xd
[06:32:03] <vms14> nah, it can't find it
[06:32:24] <vms14> not even with cat::legs as the object does not exist yet
[06:32:48] <vms14> I understand, but should be a feature I guess
[06:33:00] <aquanight> no this really should work I would think
[06:33:14] <vms14> we can live without that as it's not a big deal
[06:33:28] <vms14> I mean the object does not exist
[06:33:55] <vms14> forcing this behavior will add overhead for a feature that we really don't need
[06:34:49] <aquanight> I'm pretty sure I remember at one point LeoNerd saying it should be possible to do this exact thing
[06:34:52] <vms14>  we could just defer those initializations
[06:34:55] <aquanight> but maybe I am misremembering
[06:35:58] <vms14> also the order of has is important
[06:36:24] <vms14> a method defined before a has slot seems to not be able to find that slot
[06:36:29] *** Quits: whynot (~whynot@37.73.109.154) (Ping timeout: 268 seconds)
[06:36:32] <aquanight> yes
[06:36:36] <aquanight> it's like any other lexical variable
[06:36:47] <aquanight> order matters
[06:36:54] *** Joins: whynot (~whynot@37.73.109.154)
[06:37:05] <vms14> which is strange as the method can find the others and therefore is not subject of a problem like the has paws = legs
[06:37:41] <vms14> so theere is  a phase for the has slots and another for the methods?
[06:38:04] <vms14> but they run in order anyways as a has slot after the method is not found
[06:39:35] <vms14> hmm
[06:39:53] <aquanight> one thing you have to remember is that *ANY* perl code effectively has two "passes" over it
[06:40:12] <aquanight> there's a "parser"/"compile" pass where the syntax is put together into an operator tree
[06:40:17] <aquanight> then there's the actual execution
[06:40:24] <vms14> yes, maybe I'm expecting too much
[06:40:38] <aquanight> during parsing, things like 'my $x' and such get seen to make those names correspond to lexical variables later
[06:40:40] <vms14> I mean I was expecting something like CLOS
[06:41:00] <vms14> but CLOS is not easy stuff to implement
[06:41:15] <aquanight> anything before the 'my $x' sees $x as an unqualified global variable which of course 'strict' complains about
[06:41:23] <vms14> and maybe for that purpose moose would be the closest thing
[06:41:59] <aquanight> if you're expecting something like C++ where declaration order doesn't matter, it's not something that's easily done in perl because of how its parser is designed
[06:42:04] <vms14> aquanight: but a function can be defered
[06:42:16] <aquanight> not entirely
[06:42:38] <aquanight> you still have to see a sub declaration, even if it's just a stub decl like 'sub thing;' or imported from a 'use' statement
[06:42:42] <vms14> well, not. if a function is not found yet, perl looks for it
[06:42:55] <vms14> and then return back to where it was?
[06:43:01] <aquanight> if you try to use a sub before it's known 'strict' will complain
[06:43:10] <vms14> I remember to try some stuff like this to see what perl does
[06:43:13] <aquanight> sweval: foo; sub foo { }
[06:43:14] <perlbot> aquanight: ERROR: Bareword "foo" not allowed while "strict subs" in use at (IRC) line 1. 
[06:43:32] <aquanight> there's ways around this
[06:43:39] <vms14> and redefining to see what happened if used after defined but defined it twice
[06:43:59] <vms14> I don't remember if it recibed the last definition
[06:44:08] <aquanight> if you're thinking of object methods
[06:44:15] <aquanight> that is one case where you can "Call before declaration"
[06:44:19] <vms14> s/after/before/
[06:44:20] <aquanight> because object method lookup occurs at runtime
[06:44:43] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:44:51] <aquanight> also
[06:44:57] <aquanight> sweval: &foo; sub foo { }
[06:44:58] <perlbot> aquanight: No output.
[06:45:13] <aquanight> the & prefix can force perl to treat a word as a subroutine name
[06:45:24] <aquanight> even when it doesn't yet know that there is such a name
[06:46:04] <vms14> sweval: {no strict; foo; sub foo{print "oh"} sub foo{print 'meh'}}
[06:46:05] <perlbot> vms14: Unquoted string "foo" may clash with future reserved word at (IRC) line 1. Subroutine foo redefined at (IRC) line 1. foo
[06:46:08] <aquanight> (if you ask me, in this situation it should've then tripped up 'strict vars' and complained about a global symbol without explicit package name, but c'est la vie)
[06:46:48] <vms14> sweval: {no strict; foo(); sub foo{print "oh"} sub foo{print 'meh'}}
[06:46:50] <perlbot> vms14: Subroutine foo redefined at (IRC) line 1. meh
[06:47:16] <aquanight> something to keep in mind
[06:47:35] <aquanight> weval: foo(); sub foo { print "oh" } BEGIN { foo } sub foo { print "meh" }
[06:47:36] <vms14>  sweval: {no strict; sub foo{print "oh"} sub foo{print 'meh'} foo();}
[06:47:36] <perlbot> aquanight: ohSubroutine foo redefined at (IRC) line 1. meh
[06:48:06] <aquanight> sub thing { STUFF } can be seen as directly equivalent to
[06:48:07] <vms14> lol he mixed both results?
[06:48:12] <aquanight> BEGIN { *thing = sub { STUFF } }
[06:48:24] <aquanight> in terms of what happens when
[06:48:55] <aquanight> this does not apply to 'my sub' or 'state sub'
[06:49:07] <aquanight> it *might* apply to 'our sub' but I don't know for sure
[06:49:55] <aquanight> but this means by interjecting a BEGIN block I can see the first definition of foo before it got replaced by the second
[06:50:36] <aquanight> to better demonstrate this
[06:51:03] <aquanight> weval: foo(13); sub foo { print "<oh @_>" } BEGIN { foo 98 } sub foo { print "<meh @_>"  }
[06:51:05] <perlbot> aquanight: <oh 98>Subroutine foo redefined at (IRC) line 1. <meh 13>
[06:51:29] <aquanight> keep in mind
[06:51:35] <aquanight> *this* is why you cannot do
[06:51:45] <aquanight> sub outside { my $x; sub inside { return $x; } }
[06:51:53] <aquanight> because 'inside' will close only once
[06:53:23] <vms14> I don't get what you do mean with close only once
[06:53:47] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 256 seconds)
[06:55:10] <vms14> well I didnt get what happens with sub outside { my $x; sub inside { return $x; } } related with the fact that a begin block reads the first defiinition of a function if it's called there 
[06:55:55] *** Joins: yzhernand (~yzhernand@2607:fb90:55ab:d70d:9c:10ff:fe02:536c)
[06:56:21] <aquanight> a sub declaration can be seen as being in its own BEGIN block
[06:56:22] <vms14> but didn't know that we could see the first definition of a function with a begin block
[06:56:26] <aquanight> even though one is not written out
[06:56:42] <aquanight> so in the inside/outside scenario, the inside "closes" just once, like it was in a BEGIN block
[06:57:07] <aquanight> if outside is called twice, it will now have a different $x than inside
[06:57:21] <aquanight> keep in mind that because 'inside' is just a sub, it's a visible name outside its scope
[06:57:30] <aquanight> it's not a 'my sub' so it's not lexical
[06:58:02] *** Joins: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20)
[06:58:07] <vms14> yes, naming subs is the only thing I see we can do to retrieve values from enclosing scopes
[06:58:25] <vms14> as named subs will reach outside the scope
[06:59:02] <vms14> well, will be reached from outside, while living inside
[06:59:27] <aquanight> eval: sub outside { my $x = shift; sub inside { $x } } outside 4; outside 17; inside;
[06:59:28] <perlbot> aquanight: 4
[06:59:43] <vms14> that's also why I like to use closures as objects
[06:59:50] <vms14> they clone stuff
[07:00:03] <aquanight> buuut.
[07:00:13] <vms14> every object borns with a scope filled with the shit I wanted to
[07:00:13] <aquanight> eval: sub inside; sub outside { my $x = shift; *inside = sub { $x } } outside 4; outside 17; inside;
[07:00:15] <perlbot> aquanight: 17
[07:00:33] <aquanight> difference being when the inner sub happens
[07:00:39] <aquanight> anonysub: happens every time at runtime
[07:00:47] <aquanight> named sub: happens once when the parser sees it
[07:00:54] <vms14> I have to learn about typeglobs
[07:01:24] <aquanight> two main uses are: 1) sub redefinition fuckery like this
[07:01:33] *** Quits: Peppard (~quassel@dynamic-077-002-098-009.77.2.pool.telefonica.de) (Ping timeout: 252 seconds)
[07:01:34] <aquanight> 2) using Symbol::qualify_to_ref because you don't want to 'no strict'
[07:01:51] *** Joins: Peppard (~quassel@2001:470:1f0b:751:d445:ac8f:38ac:ad)
[07:02:12] <aquanight> note that the entire basis of how Exporter works falls loosely under category '1'
[07:06:41] *** Quits: yzhernand (~yzhernand@2607:fb90:55ab:d70d:9c:10ff:fe02:536c) (Ping timeout: 252 seconds)
[07:06:53] *** Joins: yzhernand (~yzhernand@38-73-255-174.starry-inc.net)
[07:07:08] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:07:08] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:07:08] *** finn_elija is now known as FinnElija
[07:13:37] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 256 seconds)
[07:16:19] *** Quits: whynot (~whynot@37.73.109.154) (Quit: leaving)
[07:16:45] *** Joins: yzhernand (~yzhernand@38-73-255-174.starry-inc.net)
[07:19:20] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[07:19:28] <vms14> how can I create a package from a function?
[07:20:48] <vms14> sub oh { my $name = shift; { package $name; "yes won't work"} }
[07:20:58] <Grinnz> you don't "create" packages
[07:21:01] <vms14> I do have to eval a string?
[07:21:04] <Grinnz> you just put things in them, and thus they exist
[07:21:11] <vms14> oh
[07:21:27] <vms14> autovivification
[07:21:32] <Grinnz> in a way
[07:22:13] <Grinnz> you would have to use string eval to dynamically apply a package to a lexical scope as the package statement does. but if you just want to assign to typeglobs in a certain package you don't need string eval. you may need no strict 'refs'
[07:23:06] <Grinnz> sweval: my $package = 'Foo::Bar'; *{"${package}::baz} = \42; $Foo::Bar::baz
[07:23:08] <perlbot> Grinnz: ERROR: Can't find string terminator '"' anywhere before EOF at (IRC) line 1. 
[07:23:13] <Grinnz> sweval: my $package = 'Foo::Bar'; *{"${package}::baz"} = \42; $Foo::Bar::baz
[07:23:14] <perlbot> Grinnz: ERROR: Can't use string ("Foo::Bar::baz") as a symbol ref while "strict refs" in use at (IRC) line 1. 
[07:23:22] <Grinnz> sweval: my $package = 'Foo::Bar'; no strict 'refs'; *{"${package}::baz"} = \42; $Foo::Bar::baz
[07:23:23] <perlbot> Grinnz: 42
[07:24:15] <Grinnz> the type of reference you assign to a typeglob determines what glob slot it assigns to.
[07:24:47] <vms14> thanks
[07:31:01] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[07:34:54] <vms14> ${$object_name . '::x'} = \"oh\n"; I don't need a typeglob
[07:37:36] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:39f3:76e9:9ca1:32bd)
[07:39:20] *** Joins: todd_ (~todd@gateway/tor-sasl/toddf)
[07:39:22] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[07:40:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:38e1:73a2:ce5d:fb32) (Ping timeout: 252 seconds)
[07:47:47] *** Joins: krismatrix (~krismatri@38.80.149.51)
[08:03:25] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[08:17:43] *** Joins: deadmarshal (~deadmarsh@95.38.119.139)
[08:25:16] *** Quits: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:26:08] *** Joins: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20)
[08:28:55] *** Quits: Martchus_ (~martchus@dynamic-095-115-091-240.95.115.pool.telefonica.de) (Ping timeout: 256 seconds)
[08:29:22] *** Joins: Martchus (~martchus@dynamic-077-009-011-069.77.9.pool.telefonica.de)
[08:39:11] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 256 seconds)
[08:39:22] *** Joins: yzhernand (~yzhernand@2607:fb90:e922:57a:c49a:c8ff:fe2b:91ee)
[08:42:04] *** Quits: deadmarshal (~deadmarsh@95.38.119.139) (Quit: ZNC 1.8.2 - https://znc.in)
[08:43:12] *** Joins: deadmarshal (~deadmarsh@95.38.119.139)
[08:43:29] *** Quits: yzhernand (~yzhernand@2607:fb90:e922:57a:c49a:c8ff:fe2b:91ee) (Ping timeout: 252 seconds)
[08:43:54] *** Joins: yzhernand (~yzhernand@2607:fb90:e922:57a:c49a:c8ff:fe2b:91ee)
[08:44:57] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:49:37] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:49:43] *** Quits: deadmarshal (~deadmarsh@95.38.119.139) (Ping timeout: 252 seconds)
[08:56:28] *** Quits: Dorward (~dorward@13.5.169.217.in-addr.arpa) (*.net *.split)
[08:56:28] *** Quits: shadowpaste (~shadowpas@kitty.scsys.co.uk) (*.net *.split)
[08:56:28] *** Quits: quesker (~idnet@mail.89vx.net) (*.net *.split)
[08:56:28] *** Quits: Te[u]K (teuk@teuk.org) (*.net *.split)
[08:56:28] *** Quits: jjatria (~jjatria@68.183.32.235) (*.net *.split)
[08:56:28] *** Quits: sjn (sjn@sprocket.nvg.ntnu.no) (*.net *.split)
[08:56:28] *** Quits: tobs (~tobs@taboege.de) (*.net *.split)
[08:56:28] *** Quits: ether (~ether@perl/cpan-druid/ether) (*.net *.split)
[08:56:29] *** Quits: VVelox (~kitsune@vulpes.vvelox.net) (*.net *.split)
[08:56:29] *** Quits: quernd (~quernd@boethin.uberspace.de) (*.net *.split)
[08:56:29] *** Quits: arcanez (~arcanez@warpedreality.org) (*.net *.split)
[08:56:29] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[08:56:29] *** Quits: gugod (gugod@li7-202.members.linode.com) (*.net *.split)
[08:56:29] *** Quits: mcint (mcint@user/mcint) (*.net *.split)
[08:56:29] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (*.net *.split)
[08:56:29] *** Quits: Peppard (~quassel@2001:470:1f0b:751:d445:ac8f:38ac:ad) (*.net *.split)
[08:56:29] *** Quits: Colt (~Colt@user/colt) (*.net *.split)
[08:56:29] *** Quits: cxreg (~count@63.228.111.44) (*.net *.split)
[08:56:29] *** Quits: VoidNoir0 (~VoidNoir0@72.80.203.52) (*.net *.split)
[08:56:29] *** Quits: kolcon (~kolcon@v.kolouch.org) (*.net *.split)
[08:56:29] *** Quits: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (*.net *.split)
[08:56:29] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (*.net *.split)
[08:56:29] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[08:56:29] *** Quits: metabot (~metabot@perlbot/bot/metabot) (*.net *.split)
[08:56:29] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (*.net *.split)
[08:56:29] *** Quits: diskin (~diskin@87.117.58.209) (*.net *.split)
[08:56:29] *** Quits: cation (cation@user/cation) (*.net *.split)
[08:56:29] *** Quits: gce108 (~gce@user/gce108) (*.net *.split)
[08:56:29] *** Quits: v` (~v@user/ctrl) (*.net *.split)
[08:56:29] *** Quits: vague (~vague@irssi/staff/vague) (*.net *.split)
[08:56:29] *** Quits: fuzzix (~fuzzix@46.7.53.110) (*.net *.split)
[08:56:29] *** Quits: alh (~alh@hiddenrealms.org) (*.net *.split)
[08:56:30] *** Quits: fstd_ (~fstd@xdsl-81-173-139-70.nc.de) (*.net *.split)
[08:56:30] *** Quits: Benett (~Benett@xnetx.de) (*.net *.split)
[08:56:30] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (*.net *.split)
[08:56:30] *** Quits: starz (starz@2001:41d0:8:4bd3::1) (*.net *.split)
[08:56:30] *** Quits: ugjka (~ugjka@ugjka.net) (*.net *.split)
[08:56:30] *** Quits: gloin (~gloin@user/gloin) (*.net *.split)
[08:56:30] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (*.net *.split)
[08:56:30] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[08:56:30] *** Quits: Bossi (~quassel@p4fc22aa4.dip0.t-ipconnect.de) (*.net *.split)
[08:56:30] *** Quits: tbcr_ (~tbcr@107.13.189.161) (*.net *.split)
[08:56:30] *** Quits: kiwiroy (sid374179@id-374179.lymington.irccloud.com) (*.net *.split)
[08:56:30] *** Quits: DrHyde (~david@bytemark.barnyard.co.uk) (*.net *.split)
[08:56:30] *** Quits: lllh (~llh@198.48.244.21) (*.net *.split)
[08:56:31] *** Quits: koo5_ (~quassel@51.140.155.227) (*.net *.split)
[08:56:31] *** Quits: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (*.net *.split)
[08:56:31] *** Quits: lopid (~lopid@user/lopid) (*.net *.split)
[08:56:31] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (*.net *.split)
[08:56:31] *** Quits: revhippie (~jdavis@047-013-092-010.res.spectrum.com) (*.net *.split)
[08:56:31] *** Quits: splatt990 (4b25e29db1@198.108.77.17) (*.net *.split)
[08:56:31] *** Quits: voegelas (~voegelas@www.andreasvoegele.com) (*.net *.split)
[08:56:31] *** Quits: Paladin (~paladin@s0106c0eae42a785d.vc.shawcable.net) (*.net *.split)
[08:56:31] *** Quits: veesh (~veesh@5.28.163.204) (*.net *.split)
[08:56:31] *** Quits: i7c (~i7c@user/i7c) (*.net *.split)
[08:56:31] *** Quits: wwalker (~wwalker@platinum.solid-constructs.com) (*.net *.split)
[08:56:31] *** Quits: hudo (~hhudo_@mail.allm-elektro.de) (*.net *.split)
[08:56:31] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (*.net *.split)
[08:56:31] *** Quits: arthurpbs (~arthurpbs@168.121.99.77) (*.net *.split)
[08:56:31] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (*.net *.split)
[08:56:31] *** Quits: Kassandry (~Kassandry@kassandry.net) (*.net *.split)
[08:56:31] *** Quits: LogicAside (~LogicAsid@user/logicaside) (*.net *.split)
[08:56:31] *** Quits: glider (~glider@user/glider) (*.net *.split)
[08:56:31] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[08:56:31] *** Quits: superkuh (~superkuh@user/superkuh) (*.net *.split)
[08:56:31] *** Quits: alex11 (~alex11@user/alex11) (*.net *.split)
[08:56:31] *** Quits: deecat (~deecat@73.99.215.70) (*.net *.split)
[08:56:31] *** Quits: lucs (~lucs@user/lucs) (*.net *.split)
[08:56:31] *** Quits: WinterStar (~IceLight@user/icelight) (*.net *.split)
[08:56:32] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (*.net *.split)
[08:56:32] *** Quits: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net) (*.net *.split)
[08:56:32] *** Quits: ztx (~ztx@user/ztx) (*.net *.split)
[08:56:32] *** Quits: p71 (~p71@096-042-034-230.res.spectrum.com) (*.net *.split)
[08:56:32] *** Quits: bnjf (~bnjf@vm.bnjf.id.au) (*.net *.split)
[08:56:32] *** Quits: thowe (~thowe@66.39.169.133) (*.net *.split)
[08:56:32] *** Quits: Somni (insomnia@77-88-237-24.gci.net) (*.net *.split)
[08:56:32] *** Quits: buZz (~buzz@sky.thebigblue.tk) (*.net *.split)
[08:56:32] *** Quits: Frosku (~frosku@user/frosku) (*.net *.split)
[08:56:32] *** Quits: tyldis (~vidar@tyldum.com) (*.net *.split)
[08:56:32] *** Quits: pekster (~rewt@user/pekster) (*.net *.split)
[08:56:32] *** Quits: HiSPeed (znc@mail.holics.at) (*.net *.split)
[08:56:32] *** Quits: sivoais (~zaki@199.19.225.239) (*.net *.split)
[08:56:32] *** Quits: tkr (tkr@pi.ip.fi) (*.net *.split)
[08:56:32] *** Quits: cjac (~cjac@li1196-20.members.linode.com) (*.net *.split)
[08:56:32] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-68.dsl.bell.ca) (*.net *.split)
[08:56:32] *** Quits: vrurg (~vrurg@45.74.95.181) (*.net *.split)
[08:56:32] *** Quits: samir (~azureuser@user/samir) (*.net *.split)
[08:56:32] *** Quits: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20) (*.net *.split)
[08:56:32] *** Quits: akaWolf (~akaWolf@akawolf.org) (*.net *.split)
[08:56:32] *** Quits: ghenry (~ghenry@ghenry.plus.com) (*.net *.split)
[08:56:32] *** Quits: dacav (~dacav@h94-245-9-202.cust.a3fiber.se) (*.net *.split)
[08:56:32] *** Quits: subie (~subie@2601:4c0:4080:bc0:816f:c34e:636d:6583) (*.net *.split)
[08:56:32] *** Quits: mtj (~mtj@2400:8902::f03c:91ff:fe93:b7f1) (*.net *.split)
[08:56:32] *** Quits: haarg (haarg@haarg.org) (*.net *.split)
[08:56:32] *** Quits: summerisle (~eof@tty3.dev) (*.net *.split)
[08:56:32] *** Quits: plicease (quassel@2600:3c00::f03c:91ff:feea:c7bb) (*.net *.split)
[08:56:32] *** Quits: ivzhh (~ivzhh@S0106f85e42a00a1f.cg.shawcable.net) (*.net *.split)
[08:56:32] *** Quits: gko (~user@user/gko) (*.net *.split)
[08:56:32] *** Quits: blo (~blo@user/blo) (*.net *.split)
[08:56:32] *** Quits: Exodist (sid433366@id-433366.hampstead.irccloud.com) (*.net *.split)
[08:56:32] *** Quits: pwillard (sid136981@id-136981.hampstead.irccloud.com) (*.net *.split)
[08:56:32] *** Quits: Richlv (~rich@nakts.net) (*.net *.split)
[08:56:33] *** Quits: pb (~pb@polemon.org) (*.net *.split)
[08:56:33] *** Quits: mjones (sid6844@id-6844.helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: treefrob (~treefrob@p57a9652c.dip0.t-ipconnect.de) (*.net *.split)
[08:56:33] *** Quits: ology (~gene@user/ology) (*.net *.split)
[08:56:33] *** Quits: Botje (~Botje@mang.sgaap.be) (*.net *.split)
[08:56:33] *** Quits: edef (~edef@user/edef) (*.net *.split)
[08:56:33] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (*.net *.split)
[08:56:33] *** Quits: karjala (sid176588@id-176588.lymington.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: mjgardner (sid182628@id-182628.ilkley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: integral (sid296274@user/integral) (*.net *.split)
[08:56:33] *** Quits: skaji (sid178483@tinside.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (*.net *.split)
[08:56:33] *** Quits: Mithaldu_ (sid27181@hampstead.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: davebaker_ (sid143727@lymington.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: rjbs (sid498898@uxbridge.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: genio (sid223130@ilkley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: nrr__ (sid20938@lymington.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: mstevens (sid285816@tinside.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: ggherdov (sid11402@helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: odc (sid197788@helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: toddr (sid457681@tinside.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: peder (4822@nidur.ifi.uio.no) (*.net *.split)
[08:56:33] *** Quits: corwin (someone@fosshost/director/corwin) (*.net *.split)
[08:56:33] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[08:56:33] *** Quits: Getty (getty@stardestroyer.de) (*.net *.split)
[08:56:33] *** Quits: nshp (hi@2600:3c03::f03c:91ff:fe2c:cd67) (*.net *.split)
[08:56:33] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (*.net *.split)
[08:56:33] *** Quits: jercos (jercos@xyl.be) (*.net *.split)
[08:56:33] *** Quits: rfi_ (~rfi@216.70.102.172) (*.net *.split)
[08:56:33] *** Quits: huf (huf@user/huf) (*.net *.split)
[08:56:34] *** Quits: tnez (~el@user/tnez) (*.net *.split)
[08:56:34] *** Quits: SysPete (~SysPete@fin.sysnix.com) (*.net *.split)
[08:56:34] *** Quits: rjsalts (~rjsalts@green.spectralmud.org) (*.net *.split)
[08:56:34] *** Quits: BinGOs (~bitbucket@user/bingos) (*.net *.split)
[08:56:34] *** Quits: tcohen (~tcohen@vmi626720.contaboserver.net) (*.net *.split)
[08:56:34] *** Quits: wilk (~wilk@user/wilk) (*.net *.split)
[08:56:34] *** Quits: AAAAA_DRAGON (A_D@libera/staff/dragon) (*.net *.split)
[08:56:34] *** Quits: hussam (~hussam@user/hussam) (*.net *.split)
[08:56:34] *** Quits: sergiotarxz[m] (~sergiotar@2001:470:69fc:105::1:15f2) (*.net *.split)
[08:56:34] *** Quits: gk_ (~irkk@debrecziner.extrawurst.systems) (*.net *.split)
[08:56:34] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (*.net *.split)
[08:56:34] *** Quits: fling (~fling@user/fling) (*.net *.split)
[08:56:35] *** Quits: Altreus (~altreus@2a03:b0c0:1:e0::439:5001) (*.net *.split)
[08:56:35] *** Quits: Maff (maff@user/maff) (*.net *.split)
[08:56:35] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (*.net *.split)
[08:56:35] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (*.net *.split)
[08:56:35] *** Quits: BlueShark (sid10311@user/blueshark) (*.net *.split)
[08:56:35] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (*.net *.split)
[08:56:35] *** Quits: Yaakov (sid19863@user/Yaakov) (*.net *.split)
[08:56:35] *** Quits: jrayhawk (~jrayhawk@user/jrayhawk) (*.net *.split)
[08:56:35] *** Quits: nicomen (~nicolas@178.124.223.35.bc.googleusercontent.com) (*.net *.split)
[08:56:35] *** Quits: megaTherion (~therion@unix.io) (*.net *.split)
[08:56:35] *** Quits: leosilva (~leosilva@canonical/leosilva) (*.net *.split)
[08:56:35] *** Quits: ingy (~ingy@143.244.187.20) (*.net *.split)
[08:56:35] *** Quits: drbean (drbean@thinks.life.is-a.beauty) (*.net *.split)
[08:56:35] *** Quits: k33p3r (kexik@2605:6400:c847:1948::8491) (*.net *.split)
[08:56:35] *** Quits: ehuelsmann[m] (~ehuelsman@2001:470:69fc:105::169a) (*.net *.split)
[08:56:35] *** Quits: Kate[m]1 (~katewecab@2001:470:69fc:105::1:2b2) (*.net *.split)
[08:56:35] *** Quits: demostanis[m] (~demostani@2001:470:69fc:105::2c2) (*.net *.split)
[08:56:35] *** Quits: ilmari_ (~ilmari@user/ilmari) (*.net *.split)
[08:56:35] *** Quits: casaca (~casaca@user/casaca) (*.net *.split)
[08:56:35] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[08:56:35] *** Quits: marcus (~marcus@mojo/viking/marcus) (*.net *.split)
[08:56:35] *** Quits: batman (~batman@50.31.137.146) (*.net *.split)
[08:56:35] *** Quits: dansan (~daniel@75.81.148.51) (*.net *.split)
[08:56:35] *** Quits: jelly (jelly@user/jelly) (*.net *.split)
[08:56:35] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[08:56:35] *** Quits: ueberall (ueberall_l@user/ueberall) (*.net *.split)
[08:56:35] *** Quits: gordonfish[m] (~gordonfis@user/gordonfish) (*.net *.split)
[08:56:36] *** Quits: jink (mrjink@chat.jink.net) (*.net *.split)
[08:56:36] *** Quits: Kanjizai (~kanjizai@cpe-107-185-193-171.socal.res.rr.com) (*.net *.split)
[08:56:36] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (*.net *.split)
[08:56:36] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (*.net *.split)
[08:56:36] *** Quits: a6502__ (~wieger@stofzuiger.a6502.net) (*.net *.split)
[08:56:36] *** Quits: RoyK (~roy@user/royk) (*.net *.split)
[08:56:36] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[08:56:36] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (*.net *.split)
[08:56:36] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[08:56:36] *** Quits: bigpresh (~bigpresh@libera/staff/bigpresh) (*.net *.split)
[08:56:36] *** Quits: APic (apic@apic.name) (*.net *.split)
[08:56:36] *** Quits: GnuYawk (~GnuYawk@user/gnuyawk) (*.net *.split)
[08:56:36] *** Quits: edr (~edr@user/edr) (*.net *.split)
[08:56:36] *** Quits: ozy (~ozy@libre.theyareafter.us) (*.net *.split)
[08:56:36] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[08:56:36] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[08:56:37] *** Quits: celphi_ (sid97751@user/celphi) (*.net *.split)
[08:56:37] *** Quits: bocaneri (~bismilah@about/linux/staff/sauvin) (*.net *.split)
[08:56:37] *** Quits: murrayn (~murray@user/murrayn) (*.net *.split)
[08:56:37] *** Quits: depesz (~quassel@lana.depesz.com) (*.net *.split)
[08:56:37] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (*.net *.split)
[08:56:37] *** Quits: Mandevil (~mandevil@ip-89-102-168-162.net.upcbroadband.cz) (*.net *.split)
[08:56:37] *** Quits: graham (~gchristen@user/gchristensen) (*.net *.split)
[08:56:37] *** Quits: fizzie (irc@selene.zem.fi) (*.net *.split)
[08:56:37] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[08:56:37] *** Quits: GumbyPAN (cpanbot@jingo.bingosnet.org) (*.net *.split)
[08:56:37] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[08:56:37] *** Quits: sdk_ (~x@shell.codevoid.de) (*.net *.split)
[08:56:37] *** Quits: kcz (~quassel@2a01:430:12:ff11::1) (*.net *.split)
[08:56:37] *** Quits: digdilem (~digdilem@rolf.yuss.org) (*.net *.split)
[08:56:37] *** Quits: dwxreaper (~quinn@192.155.91.76) (*.net *.split)
[08:56:38] *** Quits: keir (~keir@user/keir) (*.net *.split)
[08:56:38] *** Quits: Xe (~cadey@tailscale/xe) (*.net *.split)
[08:56:38] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[08:56:38] *** Quits: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io) (*.net *.split)
[08:56:38] *** Quits: Sleepy63 (~Sleepy63@user/sleepy63) (*.net *.split)
[08:56:38] *** Quits: mruszczyk (sid160336@id-160336.tinside.irccloud.com) (*.net *.split)
[08:56:38] *** Quits: JRaspass (~JRaspass@68.183.32.235) (*.net *.split)
[08:56:38] *** Quits: tyep (~hatseflat@hatsuseno.rootaccess.nl) (*.net *.split)
[08:56:38] *** Quits: drevil_ (~igor@pool-173-54-17-110.nwrknj.fios.verizon.net) (*.net *.split)
[08:56:38] *** Quits: berndj (~berndj@ns1.linksynergy.co.za) (*.net *.split)
[08:56:38] *** Quits: pierrot (~pi@user/pierrot) (*.net *.split)
[08:56:38] *** Quits: enick_958 (~mercvrivs@2001:470:69fc:105::2ee6) (*.net *.split)
[08:56:38] *** Quits: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2) (*.net *.split)
[08:56:38] *** Quits: Walex (~Walex@SMTP.sabi.co.UK) (*.net *.split)
[08:56:38] *** Quits: ndorf (~nd@ob.noxio.us) (*.net *.split)
[08:56:38] *** Quits: przemoc (~przemoc@user/przemoc) (*.net *.split)
[08:56:38] *** Quits: PonyBlocks (ponyblocks@user/ponyblocks) (*.net *.split)
[08:56:38] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[08:56:38] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[08:56:38] *** Quits: krychu (~krychu@static.152.151.251.148.clients.your-server.de) (*.net *.split)
[08:56:38] *** Quits: Champi (Champi@damn.e-leet.be) (*.net *.split)
[08:56:38] *** Quits: Juerd (juerd@computervrede.nl) (*.net *.split)
[08:56:38] *** Quits: bleb (~cm@user/bleb) (*.net *.split)
[08:56:39] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (*.net *.split)
[08:56:39] *** Quits: f3ew (~f3ew@2a01:4f9:4b:3b57::2) (*.net *.split)
[08:56:39] *** Quits: polettix (~polettixx@linode.polettix.it) (*.net *.split)
[08:56:39] *** Quits: latk (~latk@2001:470:69fc:105::255) (*.net *.split)
[08:56:39] *** Quits: webstran- (~webstrand@user/webstrand) (*.net *.split)
[08:56:39] *** Quits: freshmaker666 (~greeb@blahblahblah.anime.horse) (*.net *.split)
[08:56:39] *** Quits: ilmari (~ilmari@user/ilmari) (*.net *.split)
[08:56:39] *** Quits: sevvie_ (~sevvie@vps-6df5f188.vps.ovh.net) (*.net *.split)
[08:56:39] *** Quits: El_Che (~nxadm@ssh2.ulyssis.student.kuleuven.be) (*.net *.split)
[08:56:39] *** Quits: phenom (~primus@user/phenom) (*.net *.split)
[08:56:39] *** Quits: dmvrtx (dmvrtx@2a01:7e01::f03c:92ff:fefd:6ed6) (*.net *.split)
[08:56:39] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[08:56:39] *** Quits: zeus (~user@user/kamyl) (*.net *.split)
[08:56:39] *** Quits: Zubin (~rubin@ender.afternet.org) (*.net *.split)
[08:56:39] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[08:56:39] *** Quits: Nowaker (~quassel@188.116.38.80) (*.net *.split)
[08:56:39] *** Quits: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net) (*.net *.split)
[08:56:39] *** Quits: jdv (~jdv79@jdv.devuyst.com) (*.net *.split)
[08:56:39] *** Quits: surrounder (~surrounde@user/surrounder) (*.net *.split)
[08:56:39] *** Quits: B33F_1337 (~b33f1337@host.b33f1337.com) (*.net *.split)
[08:56:39] *** Quits: klys_ (~mdasoh@show.op8.us) (*.net *.split)
[08:56:39] *** Quits: anomander (~anomander@vps-e9abfd3d.vps.ovh.net) (*.net *.split)
[08:56:39] *** Quits: garo (~garo@ptr-1pln5puxqxmejxq9kws.18120a2.ip6.access.telenet.be) (*.net *.split)
[08:56:40] *** Quits: tag (sid271787@id-271787.lymington.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: TBSliver (sid321952@id-321952.hampstead.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: itok_ (sid418430@id-418430.ilkley.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: Grinnz (sid183254@id-183254.hampstead.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: kawaii_ (sid345572@id-345572.hampstead.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: rypervenche (~rypervenc@user/rypervenche) (*.net *.split)
[08:56:40] *** Quits: omegatron (~some@p54bd5e02.dip0.t-ipconnect.de) (*.net *.split)
[08:56:40] *** Quits: samcv (~samcv@194.233.102.77) (*.net *.split)
[08:56:40] *** Quits: Michael[m] (~mbuddemat@2001:470:69fc:105::1:16a9) (*.net *.split)
[08:56:40] *** Quits: MikeGeorge[m] (~onesuitsa@2001:470:69fc:105::1f88) (*.net *.split)
[08:56:40] *** Quits: Kobaz (~libera@its.kobaz.net) (*.net *.split)
[08:56:40] *** Quits: phr3ak (~noreply@gnet.hu) (*.net *.split)
[08:56:40] *** Quits: Darxus (~darxus@panic.chaosreigns.com) (*.net *.split)
[08:56:40] *** Quits: noctuks (dzDZscEp9m@user/noctux) (*.net *.split)
[08:56:40] *** Quits: oskie (usel@user/oskie) (*.net *.split)
[08:56:40] *** Quits: elcaro (~anonymous@45.32.191.75) (*.net *.split)
[08:56:40] *** Quits: dg (~dgl@dg.wtf) (*.net *.split)
[08:56:40] *** Quits: ew73 (~ew73@ec2-3-92-179-243.compute-1.amazonaws.com) (*.net *.split)
[08:56:40] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[08:56:40] *** Quits: todd_ (~todd@gateway/tor-sasl/toddf) (*.net *.split)
[08:56:40] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (*.net *.split)
[08:56:41] *** Quits: tejr (~tejr@user/tejr) (*.net *.split)
[08:56:41] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (*.net *.split)
[08:56:41] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (*.net *.split)
[08:57:25] *** Quits: yzhernand (~yzhernand@2607:fb90:e922:57a:c49a:c8ff:fe2b:91ee) (Ping timeout: 252 seconds)
[08:58:02] *** Joins: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20)
[08:58:02] *** Joins: todd_ (~todd@gateway/tor-sasl/toddf)
[08:58:02] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[08:58:02] *** Joins: Peppard (~quassel@2001:470:1f0b:751:d445:ac8f:38ac:ad)
[08:58:02] *** Joins: Colt (~Colt@user/colt)
[08:58:02] *** Joins: cxreg (~count@63.228.111.44)
[08:58:02] *** Joins: VoidNoir0 (~VoidNoir0@72.80.203.52)
[08:58:02] *** Joins: akaWolf (~akaWolf@akawolf.org)
[08:58:02] *** Joins: lllh (~llh@198.48.244.21)
[08:58:02] *** Joins: koo5_ (~quassel@51.140.155.227)
[08:58:02] *** Joins: kolcon (~kolcon@v.kolouch.org)
[08:58:02] *** Joins: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[08:58:02] *** Joins: lopid (~lopid@user/lopid)
[08:58:02] *** Joins: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[08:58:02] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[08:58:02] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[08:58:02] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[08:58:02] *** Joins: revhippie (~jdavis@047-013-092-010.res.spectrum.com)
[08:58:02] *** Joins: splatt990 (4b25e29db1@198.108.77.17)
[08:58:02] *** Joins: tejr (~tejr@user/tejr)
[08:58:02] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[08:58:02] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[08:58:02] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[08:58:02] *** Joins: diskin (~diskin@87.117.58.209)
[08:58:02] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[08:58:02] *** Joins: voegelas (~voegelas@www.andreasvoegele.com)
[08:58:02] *** Joins: Paladin (~paladin@s0106c0eae42a785d.vc.shawcable.net)
[08:58:02] *** Joins: gce108 (~gce@user/gce108)
[08:58:02] *** Joins: cation (cation@user/cation)
[08:58:02] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[08:58:02] *** Joins: veesh (~veesh@5.28.163.204)
[08:58:02] *** Joins: i7c (~i7c@user/i7c)
[08:58:02] *** Joins: v` (~v@user/ctrl)
[08:58:02] *** Joins: vague (~vague@irssi/staff/vague)
[08:58:02] *** Joins: wwalker (~wwalker@platinum.solid-constructs.com)
[08:58:02] *** Joins: fuzzix (~fuzzix@46.7.53.110)
[08:58:02] *** Joins: alh (~alh@hiddenrealms.org)
[08:58:02] *** Joins: hudo (~hhudo_@mail.allm-elektro.de)
[08:58:02] *** Joins: fstd_ (~fstd@xdsl-81-173-139-70.nc.de)
[08:58:02] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[08:58:02] *** Joins: arthurpbs (~arthurpbs@168.121.99.77)
[08:58:02] *** Joins: ueberall (ueberall_l@user/ueberall)
[08:58:02] *** Joins: Benett (~Benett@xnetx.de)
[08:58:02] *** Joins: dacav (~dacav@h94-245-9-202.cust.a3fiber.se)
[08:58:02] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[08:58:02] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[08:58:02] *** Joins: subie (~subie@2601:4c0:4080:bc0:816f:c34e:636d:6583)
[08:58:02] *** Joins: Kassandry (~Kassandry@kassandry.net)
[08:58:02] *** Joins: seoul_man (~meh@user/seoul-man/x-5066766)
[08:58:02] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[08:58:02] *** Joins: glider (~glider@user/glider)
[08:58:02] *** Joins: superkuh (~superkuh@user/superkuh)
[08:58:02] *** Joins: phryk (~totallyno@user/phryk)
[08:58:02] *** Joins: mtj (~mtj@2400:8902::f03c:91ff:fe93:b7f1)
[08:58:02] *** Joins: starz (starz@2001:41d0:8:4bd3::1)
[08:58:02] *** Joins: alex11 (~alex11@user/alex11)
[08:58:02] *** Joins: ugjka (~ugjka@ugjka.net)
[08:58:02] *** Joins: gloin (~gloin@user/gloin)
[08:58:02] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[08:58:02] *** Joins: deecat (~deecat@73.99.215.70)
[08:58:02] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[08:58:02] *** Joins: Bossi (~quassel@p4fc22aa4.dip0.t-ipconnect.de)
[08:58:02] *** Joins: lucs (~lucs@user/lucs)
[08:58:02] *** Joins: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io)
[08:58:02] *** Joins: WinterStar (~IceLight@user/icelight)
[08:58:02] *** Joins: taeaad (~taeaad@user/taeaad)
[08:58:02] *** Joins: tbcr_ (~tbcr@107.13.189.161)
[08:58:02] *** Joins: gordonfish[m] (~gordonfis@user/gordonfish)
[08:58:02] *** Joins: kiwiroy (sid374179@id-374179.lymington.irccloud.com)
[08:58:02] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[08:58:02] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[08:58:02] *** Joins: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net)
[08:58:02] *** Joins: ztx (~ztx@user/ztx)
[08:58:02] *** Joins: DrHyde (~david@bytemark.barnyard.co.uk)
[08:58:02] *** Joins: p71 (~p71@096-042-034-230.res.spectrum.com)
[08:58:02] *** Joins: chronon (~chronon@user/chronon)
[08:58:02] *** Joins: keir (~keir@user/keir)
[08:58:02] *** Joins: Xe (~cadey@tailscale/xe)
[08:58:02] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[08:58:02] *** Joins: mweckbecker (~matthias@weckbecker.name)
[08:58:02] *** Joins: bnjf (~bnjf@vm.bnjf.id.au)
[08:58:02] *** Joins: thowe (~thowe@66.39.169.133)
[08:58:02] *** Joins: Somni (insomnia@77-88-237-24.gci.net)
[08:58:02] *** Joins: buZz (~buzz@sky.thebigblue.tk)
[08:58:02] *** Joins: Dorward (~dorward@13.5.169.217.in-addr.arpa)
[08:58:02] *** Joins: Altreus (~altreus@2a03:b0c0:1:e0::439:5001)
[08:58:02] *** Joins: Frosku (~frosku@user/frosku)
[08:58:02] *** Joins: tyldis (~vidar@tyldum.com)
[08:58:02] *** Joins: quesker (~idnet@mail.89vx.net)
[08:58:02] *** Joins: Maff (maff@user/maff)
[08:58:02] *** Joins: shadowpaste (~shadowpas@kitty.scsys.co.uk)
[08:58:02] *** Joins: haarg (haarg@haarg.org)
[08:58:02] *** Joins: jjatria (~jjatria@68.183.32.235)
[08:58:02] *** Joins: pekster (~rewt@user/pekster)
[08:58:02] *** Joins: Te[u]K (teuk@teuk.org)
[08:58:02] *** Joins: HiSPeed (znc@mail.holics.at)
[08:58:02] *** Joins: summerisle (~eof@tty3.dev)
[08:58:02] *** Joins: tobs (~tobs@taboege.de)
[08:58:02] *** Joins: sivoais (~zaki@199.19.225.239)
[08:58:02] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[08:58:02] *** Joins: sjn (sjn@sprocket.nvg.ntnu.no)
[08:58:02] *** Joins: plicease (quassel@2600:3c00::f03c:91ff:feea:c7bb)
[08:58:02] *** Joins: ether (~ether@perl/cpan-druid/ether)
[08:58:02] *** Joins: tkr (tkr@pi.ip.fi)
[08:58:02] *** Joins: cjac (~cjac@li1196-20.members.linode.com)
[08:58:02] *** Joins: BlueShark (sid10311@user/blueshark)
[08:58:02] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-68.dsl.bell.ca)
[08:58:02] *** Joins: vrurg (~vrurg@45.74.95.181)
[08:58:02] *** Joins: jink (mrjink@chat.jink.net)
[08:58:02] *** Joins: samir (~azureuser@user/samir)
[08:58:02] *** Joins: ivzhh (~ivzhh@S0106f85e42a00a1f.cg.shawcable.net)
[08:58:02] *** Joins: Kanjizai (~kanjizai@cpe-107-185-193-171.socal.res.rr.com)
[08:58:02] *** Joins: Sleepy63 (~Sleepy63@user/sleepy63)
[08:58:02] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[08:58:02] *** Joins: gko (~user@user/gko)
[08:58:02] *** Joins: blo (~blo@user/blo)
[08:58:02] *** Joins: celphi_ (sid97751@user/celphi)
[08:58:02] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[08:58:02] *** Joins: tag (sid271787@id-271787.lymington.irccloud.com)
[08:58:02] *** Joins: Yaakov (sid19863@user/Yaakov)
[08:58:02] *** Joins: TBSliver (sid321952@id-321952.hampstead.irccloud.com)
[08:58:02] *** Joins: Exodist (sid433366@id-433366.hampstead.irccloud.com)
[08:58:02] *** Joins: mruszczyk (sid160336@id-160336.tinside.irccloud.com)
[08:58:02] *** Joins: pwillard (sid136981@id-136981.hampstead.irccloud.com)
[08:58:02] *** Joins: latk (~latk@2001:470:69fc:105::255)
[08:58:02] *** Joins: JRaspass (~JRaspass@68.183.32.235)
[08:58:02] *** Joins: tyep (~hatseflat@hatsuseno.rootaccess.nl)
[08:58:02] *** Joins: Richlv (~rich@nakts.net)
[08:58:02] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[08:58:02] *** Joins: drevil_ (~igor@pool-173-54-17-110.nwrknj.fios.verizon.net)
[08:58:02] *** Joins: webstran- (~webstrand@user/webstrand)
[08:58:02] *** Joins: freshmaker666 (~greeb@blahblahblah.anime.horse)
[08:58:02] *** Joins: ilmari (~ilmari@user/ilmari)
[08:58:02] *** Joins: sevvie_ (~sevvie@vps-6df5f188.vps.ovh.net)
[08:58:02] *** Joins: a6502__ (~wieger@stofzuiger.a6502.net)
[08:58:02] *** Joins: rfi_ (~rfi@216.70.102.172)
[08:58:02] *** Joins: huf (huf@user/huf)
[08:58:02] *** Joins: tnez (~el@user/tnez)
[08:58:02] *** Joins: SysPete (~SysPete@fin.sysnix.com)
[08:58:02] *** Joins: rjsalts (~rjsalts@green.spectralmud.org)
[08:58:02] *** Joins: BinGOs (~bitbucket@user/bingos)
[08:58:02] *** Joins: tcohen (~tcohen@vmi626720.contaboserver.net)
[08:58:02] *** Joins: berndj (~berndj@ns1.linksynergy.co.za)
[08:58:02] *** Joins: wilk (~wilk@user/wilk)
[08:58:02] *** Joins: El_Che (~nxadm@ssh2.ulyssis.student.kuleuven.be)
[08:58:02] *** Joins: pb (~pb@polemon.org)
[08:58:02] *** Joins: RoyK (~roy@user/royk)
[08:58:02] *** Joins: phenom (~primus@user/phenom)
[08:58:02] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[08:58:02] *** Joins: itok_ (sid418430@id-418430.ilkley.irccloud.com)
[08:58:02] *** Joins: mjones (sid6844@id-6844.helmsley.irccloud.com)
[08:58:02] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[08:58:02] *** Joins: Grinnz (sid183254@id-183254.hampstead.irccloud.com)
[08:58:02] *** Joins: kawaii_ (sid345572@id-345572.hampstead.irccloud.com)
[08:58:02] *** Joins: treefrob (~treefrob@p57a9652c.dip0.t-ipconnect.de)
[08:58:02] *** Joins: ology (~gene@user/ology)
[08:58:02] *** Joins: k33p3r (kexik@2605:6400:c847:1948::8491)
[08:58:02] *** Joins: Botje (~Botje@mang.sgaap.be)
[08:58:02] *** Joins: rypervenche (~rypervenc@user/rypervenche)
[08:58:02] *** Joins: omegatron (~some@p54bd5e02.dip0.t-ipconnect.de)
[08:58:02] *** Joins: edef (~edef@user/edef)
[08:58:02] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[08:58:02] *** Joins: karjala (sid176588@id-176588.lymington.irccloud.com)
[08:58:02] *** Joins: mjgardner (sid182628@id-182628.ilkley.irccloud.com)
[08:58:02] *** Joins: integral (sid296274@user/integral)
[08:58:02] *** Joins: skaji (sid178483@tinside.irccloud.com)
[08:58:02] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[08:58:02] *** Joins: Mithaldu_ (sid27181@hampstead.irccloud.com)
[08:58:02] *** Joins: davebaker_ (sid143727@lymington.irccloud.com)
[08:58:02] *** Joins: nrr__ (sid20938@lymington.irccloud.com)
[08:58:02] *** Joins: rjbs (sid498898@uxbridge.irccloud.com)
[08:58:02] *** Joins: genio (sid223130@ilkley.irccloud.com)
[08:58:02] *** Joins: mstevens (sid285816@tinside.irccloud.com)
[08:58:02] *** Joins: ggherdov (sid11402@helmsley.irccloud.com)
[08:58:02] *** Joins: odc (sid197788@helmsley.irccloud.com)
[08:58:02] *** Joins: toddr (sid457681@tinside.irccloud.com)
[08:58:02] *** Joins: peder (4822@nidur.ifi.uio.no)
[08:58:02] *** Joins: jrayhawk (~jrayhawk@user/jrayhawk)
[08:58:02] *** Joins: nicomen (~nicolas@178.124.223.35.bc.googleusercontent.com)
[08:58:02] *** Joins: megaTherion (~therion@unix.io)
[08:58:02] *** Joins: ingy (~ingy@143.244.187.20)
[08:58:02] *** Joins: leosilva (~leosilva@canonical/leosilva)
[08:58:02] *** Joins: pierrot (~pi@user/pierrot)
[08:58:02] *** Joins: corwin (someone@fosshost/director/corwin)
[08:58:02] *** Joins: skyl4rk (~tlvb@user/tlvb)
[08:58:02] *** Joins: AAAAA_DRAGON (A_D@libera/staff/dragon)
[08:58:02] *** Joins: Getty (getty@stardestroyer.de)
[08:58:02] *** Joins: nshp (hi@2600:3c03::f03c:91ff:fe2c:cd67)
[08:58:02] *** Joins: bocaneri (~bismilah@about/linux/staff/sauvin)
[08:58:02] *** Joins: jercos (jercos@xyl.be)
[08:58:02] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[08:58:02] *** Joins: murrayn (~murray@user/murrayn)
[08:58:02] *** Joins: depesz (~quassel@lana.depesz.com)
[08:58:02] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[08:58:02] *** Joins: drbean (drbean@thinks.life.is-a.beauty)
[08:58:02] *** Joins: VVelox (~kitsune@vulpes.vvelox.net)
[08:58:02] *** Joins: Darxus (~darxus@panic.chaosreigns.com)
[08:58:02] *** Joins: Mandevil (~mandevil@ip-89-102-168-162.net.upcbroadband.cz)
[08:58:02] *** Joins: samcv (~samcv@194.233.102.77)
[08:58:02] *** Joins: Michael[m] (~mbuddemat@2001:470:69fc:105::1:16a9)
[08:58:02] *** Joins: ehuelsmann[m] (~ehuelsman@2001:470:69fc:105::169a)
[08:58:02] *** Joins: hussam (~hussam@user/hussam)
[08:58:02] *** Joins: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2)
[08:58:02] *** Joins: enick_958 (~mercvrivs@2001:470:69fc:105::2ee6)
[08:58:02] *** Joins: graham (~gchristen@user/gchristensen)
[08:58:02] *** Joins: Kate[m]1 (~katewecab@2001:470:69fc:105::1:2b2)
[08:58:02] *** Joins: demostanis[m] (~demostani@2001:470:69fc:105::2c2)
[08:58:02] *** Joins: MikeGeorge[m] (~onesuitsa@2001:470:69fc:105::1f88)
[08:58:02] *** Joins: sergiotarxz[m] (~sergiotar@2001:470:69fc:105::1:15f2)
[08:58:02] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[08:58:02] *** Joins: ilmari_ (~ilmari@user/ilmari)
[08:58:02] *** Joins: bigpresh (~bigpresh@libera/staff/bigpresh)
[08:58:02] *** Joins: quernd (~quernd@boethin.uberspace.de)
[08:58:02] *** Joins: gk_ (~irkk@debrecziner.extrawurst.systems)
[08:58:02] *** Joins: arcanez (~arcanez@warpedreality.org)
[08:58:02] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[08:58:02] *** Joins: gugod (gugod@li7-202.members.linode.com)
[08:58:02] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[08:58:02] *** Joins: fling (~fling@user/fling)
[08:58:02] *** Joins: mcint (mcint@user/mcint)
[08:58:02] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[08:58:02] *** Joins: fizzie (irc@selene.zem.fi)
[08:58:02] *** Joins: Exa (exa@irc.moe)
[08:58:02] *** Joins: phr3ak (~noreply@gnet.hu)
[08:58:02] *** Joins: GumbyPAN (cpanbot@jingo.bingosnet.org)
[08:58:02] *** Joins: Kobaz (~libera@its.kobaz.net)
[08:58:02] *** Joins: APic (apic@apic.name)
[08:58:02] *** Joins: casaca (~casaca@user/casaca)
[08:58:02] *** Joins: AndrewYu (~andrew@user/andrewyu)
[08:58:02] *** Joins: GnuYawk (~GnuYawk@user/gnuyawk)
[08:58:02] *** Joins: marcus (~marcus@mojo/viking/marcus)
[08:58:02] *** Joins: batman (~batman@50.31.137.146)
[08:58:02] *** Joins: dansan (~daniel@75.81.148.51)
[08:58:02] *** Joins: edr (~edr@user/edr)
[08:58:02] *** Joins: jelly (jelly@user/jelly)
[08:58:02] *** Joins: ozy (~ozy@libre.theyareafter.us)
[08:58:02] *** Joins: enyc (~enyc@user/enyc)
[08:58:02] *** Joins: Walex (~Walex@SMTP.sabi.co.UK)
[08:58:02] *** Joins: ndorf (~nd@ob.noxio.us)
[08:58:02] *** Joins: sdk_ (~x@shell.codevoid.de)
[08:58:02] *** Joins: kcz (~quassel@2a01:430:12:ff11::1)
[08:58:02] *** Joins: digdilem (~digdilem@rolf.yuss.org)
[08:58:02] *** Joins: dwxreaper (~quinn@192.155.91.76)
[08:58:02] *** Joins: przemoc (~przemoc@user/przemoc)
[08:58:02] *** Joins: PonyBlocks (ponyblocks@user/ponyblocks)
[08:58:02] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[08:58:02] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[08:58:02] *** Joins: krychu (~krychu@static.152.151.251.148.clients.your-server.de)
[08:58:02] *** Joins: Champi (Champi@damn.e-leet.be)
[08:58:02] *** Joins: Juerd (juerd@computervrede.nl)
[08:58:02] *** Joins: bleb (~cm@user/bleb)
[08:58:02] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[08:58:02] *** Joins: f3ew (~f3ew@2a01:4f9:4b:3b57::2)
[08:58:02] *** Joins: dmvrtx (dmvrtx@2a01:7e01::f03c:92ff:fefd:6ed6)
[08:58:02] *** Joins: Riviera (Riviera@user/riviera)
[08:58:02] *** Joins: polettix (~polettixx@linode.polettix.it)
[08:58:02] *** Joins: zeus (~user@user/kamyl)
[08:58:02] *** Joins: Zubin (~rubin@ender.afternet.org)
[08:58:02] *** Joins: Artea (~Lufia@artea.com.pt)
[08:58:02] *** Joins: Nowaker (~quassel@188.116.38.80)
[08:58:02] *** Joins: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net)
[08:58:02] *** Joins: jdv (~jdv79@jdv.devuyst.com)
[08:58:02] *** Joins: surrounder (~surrounde@user/surrounder)
[08:58:02] *** Joins: klys_ (~mdasoh@show.op8.us)
[08:58:02] *** Joins: B33F_1337 (~b33f1337@host.b33f1337.com)
[08:58:02] *** Joins: anomander (~anomander@vps-e9abfd3d.vps.ovh.net)
[08:58:02] *** Joins: garo (~garo@ptr-1pln5puxqxmejxq9kws.18120a2.ip6.access.telenet.be)
[08:58:02] *** Joins: noctuks (dzDZscEp9m@user/noctux)
[08:58:02] *** Joins: oskie (usel@user/oskie)
[08:58:02] *** Joins: elcaro (~anonymous@45.32.191.75)
[08:58:02] *** Joins: dg (~dgl@dg.wtf)
[08:58:02] *** Joins: ew73 (~ew73@ec2-3-92-179-243.compute-1.amazonaws.com)
[08:58:02] *** Joins: ChanServ (ChanServ@services.libera.chat)
[08:58:02] *** strontium.libera.chat sets mode: +o ChanServ
[08:58:13] *** Quits: koolazer (~koo@user/koolazer) (Max SendQ exceeded)
[08:58:15] *** Quits: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot) (Excess Flood)
[08:58:15] *** Quits: Repaster (~Repaster@perlbot/bot/grinnz/repaster) (Excess Flood)
[08:58:15] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Max SendQ exceeded)
[08:58:24] *** Quits: AndrewYu (~andrew@user/andrewyu) (Max SendQ exceeded)
[08:58:25] *** Joins: Paperbot (~Paperbot@2600:2b00:732f:5200:1e6f:65ff:fec9:ce9f)
[08:58:25] *** Joins: Repaster (~Repaster@2600:2b00:732f:5200:1e6f:65ff:fec9:ce9f)
[08:58:26] *** Quits: Exa (exa@irc.moe) (Max SendQ exceeded)
[08:58:26] *** Quits: voegelas (~voegelas@www.andreasvoegele.com) (Excess Flood)
[08:58:27] *** Joins: Exa (exa@irc.moe)
[08:58:28] *** Joins: AndrewYu (~andrew@user/andrewyu)
[08:58:29] *** Quits: Paperbot (~Paperbot@2600:2b00:732f:5200:1e6f:65ff:fec9:ce9f) (Changing host)
[08:58:29] *** Joins: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot)
[08:58:29] *** Quits: Repaster (~Repaster@2600:2b00:732f:5200:1e6f:65ff:fec9:ce9f) (Changing host)
[08:58:29] *** Joins: Repaster (~Repaster@perlbot/bot/grinnz/repaster)
[08:58:40] *** Joins: koolazer (~koo@user/koolazer)
[09:00:16] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[09:00:21] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 248 seconds)
[09:00:22] *** Quits: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2) (Ping timeout: 260 seconds)
[09:00:39] *** Quits: glider (~glider@user/glider) (Ping timeout: 256 seconds)
[09:00:41] *** Joins: Colt (~Colt@user/colt)
[09:01:21] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[09:01:24] *** Joins: glider (~glider@user/glider)
[09:03:50] *** Quits: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:05:01] *** Joins: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2)
[09:05:29] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 252 seconds)
[09:06:16] *** Joins: yzhernand (~yzhernand@38-73-255-174.starry-inc.net)
[09:06:19] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[09:06:46] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[09:07:33] *** Quits: latk (~latk@2001:470:69fc:105::255) (*.net *.split)
[09:07:33] *** Quits: webstran- (~webstrand@user/webstrand) (*.net *.split)
[09:07:33] *** Quits: freshmaker666 (~greeb@blahblahblah.anime.horse) (*.net *.split)
[09:07:33] *** Quits: ilmari (~ilmari@user/ilmari) (*.net *.split)
[09:07:33] *** Quits: sevvie_ (~sevvie@vps-6df5f188.vps.ovh.net) (*.net *.split)
[09:07:33] *** Quits: El_Che (~nxadm@ssh2.ulyssis.student.kuleuven.be) (*.net *.split)
[09:07:33] *** Quits: phenom (~primus@user/phenom) (*.net *.split)
[09:07:33] *** Quits: dmvrtx (dmvrtx@2a01:7e01::f03c:92ff:fefd:6ed6) (*.net *.split)
[09:07:33] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[09:07:33] *** Quits: zeus (~user@user/kamyl) (*.net *.split)
[09:07:33] *** Quits: Zubin (~rubin@ender.afternet.org) (*.net *.split)
[09:07:33] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[09:07:34] *** Quits: Nowaker (~quassel@188.116.38.80) (*.net *.split)
[09:07:34] *** Quits: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net) (*.net *.split)
[09:07:34] *** Quits: jdv (~jdv79@jdv.devuyst.com) (*.net *.split)
[09:07:34] *** Quits: surrounder (~surrounde@user/surrounder) (*.net *.split)
[09:07:34] *** Quits: B33F_1337 (~b33f1337@host.b33f1337.com) (*.net *.split)
[09:07:34] *** Quits: klys_ (~mdasoh@show.op8.us) (*.net *.split)
[09:07:34] *** Quits: anomander (~anomander@vps-e9abfd3d.vps.ovh.net) (*.net *.split)
[09:07:34] *** Quits: garo (~garo@ptr-1pln5puxqxmejxq9kws.18120a2.ip6.access.telenet.be) (*.net *.split)
[09:07:41] *** Joins: jdv (~jdv79@jdv.devuyst.com)
[09:07:41] *** Joins: El_Che (~nxadm@ssh2.ulyssis.student.kuleuven.be)
[09:07:41] *** Joins: sevvie (~sevvie@vps-6df5f188.vps.ovh.net)
[09:07:42] *** Joins: zeus (~user@user/kamyl)
[09:07:42] *** Joins: ilmari (~ilmari@user/ilmari)
[09:07:42] *** Joins: Nowaker (~quassel@188.116.38.80)
[09:07:44] *** Joins: anomander (~anomander@vps-e9abfd3d.vps.ovh.net)
[09:07:46] *** Joins: B33F_1337 (~b33f1337@host.b33f1337.com)
[09:07:46] *** Joins: garo (~garo@ptr-1pln5puxqxmejxq9kws.18120a2.ip6.access.telenet.be)
[09:07:47] *** Joins: Artea (~Lufia@artea.com.pt)
[09:07:48] *** Joins: Riviera (Riviera@user/riviera)
[09:07:48] *** Joins: dmvrtx (dmvrtx@2a01:7e01::f03c:92ff:fefd:6ed6)
[09:07:49] *** Joins: klys (~mdasoh@show.op8.us)
[09:07:50] *** Joins: surrounder (~surrounde@tanaka.surrounder.nl)
[09:07:51] *** Joins: Zubin (~rubin@ender.afternet.org)
[09:08:10] *** Joins: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net)
[09:08:16] *** Joins: greeb (~greeb@blahblahblah.anime.horse)
[09:08:24] *** Joins: webstrand (~webstrand@user/webstrand)
[09:08:56] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[09:10:54] *** Joins: latk (~latk@2001:470:69fc:105::255)
[09:10:59] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 252 seconds)
[09:11:26] *** Joins: phenom (~primus@user/phenom)
[09:16:27] * GumbyPAN CPAN Upload: JSON-Schema-Modern-0.531 by ETHER https://metacpan.org/release/ETHER/JSON-Schema-Modern-0.531
[09:20:28] *** Quits: tag (sid271787@id-271787.lymington.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: TBSliver (sid321952@id-321952.hampstead.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: itok_ (sid418430@id-418430.ilkley.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: Grinnz (sid183254@id-183254.hampstead.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: kawaii_ (sid345572@id-345572.hampstead.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: rypervenche (~rypervenc@user/rypervenche) (*.net *.split)
[09:20:28] *** Quits: omegatron (~some@p54bd5e02.dip0.t-ipconnect.de) (*.net *.split)
[09:20:28] *** Quits: samcv (~samcv@194.233.102.77) (*.net *.split)
[09:20:28] *** Quits: Michael[m] (~mbuddemat@2001:470:69fc:105::1:16a9) (*.net *.split)
[09:20:28] *** Quits: MikeGeorge[m] (~onesuitsa@2001:470:69fc:105::1f88) (*.net *.split)
[09:20:29] *** Quits: Kobaz (~libera@its.kobaz.net) (*.net *.split)
[09:20:29] *** Quits: phr3ak (~noreply@gnet.hu) (*.net *.split)
[09:20:29] *** Quits: Darxus (~darxus@panic.chaosreigns.com) (*.net *.split)
[09:20:29] *** Quits: noctuks (dzDZscEp9m@user/noctux) (*.net *.split)
[09:20:29] *** Quits: oskie (usel@user/oskie) (*.net *.split)
[09:20:29] *** Quits: elcaro (~anonymous@45.32.191.75) (*.net *.split)
[09:20:29] *** Quits: dg (~dgl@dg.wtf) (*.net *.split)
[09:20:29] *** Quits: ew73 (~ew73@ec2-3-92-179-243.compute-1.amazonaws.com) (*.net *.split)
[09:20:36] *** Joins: Darxus (~darxus@panic.chaosreigns.com)
[09:20:37] *** Joins: elcaro (~anonymous@45.32.191.75)
[09:20:38] *** Joins: dg (~dgl@dg.wtf)
[09:20:40] *** Joins: phr3ak (~noreply@gnet.hu)
[09:20:43] *** Joins: oskie (usel@user/oskie)
[09:20:46] *** Joins: tag (sid271787@id-271787.lymington.irccloud.com)
[09:20:46] *** Joins: Grinnz (sid183254@id-183254.hampstead.irccloud.com)
[09:20:48] *** Joins: rypervenche (~rypervenc@2001:41d0:8:93b9::29)
[09:20:51] *** Joins: Kobaz (~libera@its.kobaz.net)
[09:20:54] *** Joins: kawaii_ (sid345572@id-345572.hampstead.irccloud.com)
[09:20:58] *** Joins: TBSliver (sid321952@id-321952.hampstead.irccloud.com)
[09:20:58] *** Joins: itok_ (sid418430@id-418430.ilkley.irccloud.com)
[09:20:59] *** Joins: noctuks (RIj3X4Rlia@karif.server-speed.net)
[09:21:02] *** Quits: rypervenche (~rypervenc@2001:41d0:8:93b9::29) (Changing host)
[09:21:02] *** Joins: rypervenche (~rypervenc@user/rypervenche)
[09:21:14] *** Quits: noctuks (RIj3X4Rlia@karif.server-speed.net) (Signing in (noctuks))
[09:21:14] *** Joins: noctuks (RIj3X4Rlia@user/noctux)
[09:21:38] *** Joins: samcv (~samcv@194.233.102.77)
[09:21:55] *** Joins: solitario (~adrian@www3.kiess.onl)
[09:22:21] *** Quits: Linux77 (~7Linux7@186.233.182.193) (Ping timeout: 252 seconds)
[09:23:21] *** Joins: MikeGeorge[m] (~onesuitsa@2001:470:69fc:105::1f88)
[09:24:50] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 268 seconds)
[09:25:43] *** Joins: ew73 (~ew73@ec2-3-92-179-243.compute-1.amazonaws.com)
[09:26:22] *** Joins: Linux77 (~7Linux7@186.233.182.193)
[09:26:28] * GumbyPAN CPAN Upload: JSON-Schema-Modern-Document-OpenAPI-0.009 by ETHER https://metacpan.org/release/ETHER/JSON-Schema-Modern-Document-OpenAPI-0.009
[09:26:46] *** Joins: Michael[m] (~mbuddemat@2001:470:69fc:105::1:16a9)
[09:31:37] *** Joins: deadmarshal (~deadmarsh@95.38.119.139)
[09:43:32] *** Quits: dansan (~daniel@75.81.148.51) (Ping timeout: 240 seconds)
[09:44:43] *** Quits: Su-Shee (~Susanne@p50894668.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[09:46:28] *** Joins: Su-Shee (~Susanne@p4ffc7b67.dip0.t-ipconnect.de)
[09:55:21] *** Quits: deadmarshal (~deadmarsh@95.38.119.139) (Ping timeout: 252 seconds)
[09:55:38] *** Joins: deadmarshal (~deadmarsh@95.38.229.189)
[10:04:38] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:10:24] *** Joins: jdurand (~jdurand@user/jdurand)
[10:16:58] *** Joins: KnoP (~KnoP@p57b19817.dip0.t-ipconnect.de)
[10:26:51] *** Quits: vms14 (~user@45.red-83-47-205.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[10:28:50] *** Quits: jdurand (~jdurand@user/jdurand) (Quit: Leaving)
[10:29:58] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[10:31:54] *** Joins: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de)
[10:34:06] *** Quits: randir (~randir@95-25-138-85.broadband.corbina.ru) (Remote host closed the connection)
[10:36:45] *** Joins: art1 (~romeyke@p200300ccdf07d100e05a108978600cd1.dip0.t-ipconnect.de)
[10:40:01] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:6993:39fb:9bc8:e953)
[10:43:23] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:39f3:76e9:9ca1:32bd) (Ping timeout: 252 seconds)
[10:46:37] *** Joins: randir (~randir@93.159.239.42)
[10:49:38] *** Joins: disconnect_me (~marcin@gl207-41.master.pl)
[10:53:39] *** Quits: deadmarshal (~deadmarsh@95.38.229.189) (Ping timeout: 265 seconds)
[11:01:18] *** Joins: deadmarshal (~deadmarsh@95.38.229.189)
[11:05:42] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[11:05:42] *** Quits: diskin (~diskin@87.117.58.209) (Killed (zinc.libera.chat (Nickname regained by services)))
[11:05:42] *** diskin_ is now known as diskin
[11:12:48] *** Joins: martinus__ (~martin@96.19.201.77.rev.sfr.net)
[11:23:06] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:26:34] *** Quits: heiner (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Remote host closed the connection)
[11:34:07] *** Joins: tobybl (~tobybl@213.31.133.113)
[11:37:12] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[11:38:13] *** Quits: deadmarshal (~deadmarsh@95.38.229.189) (Ping timeout: 240 seconds)
[11:39:28] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Remote host closed the connection)
[11:39:35] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[11:42:13] *** Quits: merpaderp (~ircuser@89.111.36.243) (Ping timeout: 256 seconds)
[11:42:36] *** Joins: merpaderp (~ircuser@89.111.36.243)
[11:47:16] *** Joins: nperez (~nperez@86-93-223-59.fixed.kpn.net)
[11:47:27] *** Quits: nperez (~nperez@86-93-223-59.fixed.kpn.net) (Client Quit)
[12:01:54] *** Joins: Ovid_ (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[12:07:40] *** Joins: Pali (~pali@user/pali)
[12:17:51] *** Quits: veesh (~veesh@5.28.163.204) (Ping timeout: 256 seconds)
[12:19:19] *** Joins: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se)
[12:23:15] *** Joins: deadmarshal (~deadmarsh@95.38.114.2)
[12:27:13] *** Quits: ueberall (ueberall_l@user/ueberall) (Ping timeout: 250 seconds)
[12:27:33] *** Quits: deadmarshal (~deadmarsh@95.38.114.2) (Ping timeout: 256 seconds)
[12:29:30] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[12:30:04] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Read error: Connection reset by peer)
[12:30:33] *** Joins: deadmarshal (~deadmarsh@95.38.114.2)
[12:30:53] *** Joins: ueberall (ueberall_l@user/ueberall)
[12:31:32] *** AAAAA_DRAGON is now known as A_Dragon
[12:31:43] *** Joins: veesh (~veesh@5.28.165.25)
[12:48:16] *** Joins: yzhernand (~yzhernand@38-73-255-174.starry-inc.net)
[12:57:30] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:57:36] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[13:08:17] <vague> What a great password policy: 'Avoid any letters that aren't included in A-Z', it actually says that in the email I got about my password expiring in 14 days
[13:11:18] <choroba> Is ự included in A-Z?
[13:13:16] <lopid> when entering a new password, does it say, "This password is already in use by mark097"
[13:13:44] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[13:13:55] <Botje> bloody mark097. he already stole my password too
[13:14:56] <vague> You could try HUNTER, might be available
[13:16:50] <vague> The customer must've changes the email template themselves, the link points to windowsazure.com so I hope they don't have so poorly written templates :)
[13:21:54] * GumbyPAN CPAN Upload: MySQL-Workbench-Parser-1.11 by PERLSRVDE https://metacpan.org/release/PERLSRVDE/MySQL-Workbench-Parser-1.11
[13:49:21] <Altreus> vague: that seems like a place not to give any information to whatsoever
[13:51:07] *** Quits: deadmarshal (~deadmarsh@95.38.114.2) (Ping timeout: 252 seconds)
[13:52:09] <vague> I'd like to get a clear password policy notice. Sometimes a customer changes their policy without notification and I have to spend 15 minutes testing various lengths and letter combinations to figure out what's accepted
[13:53:38] <vague> The best policy would be: 'write a sentense with 5 or more words'
[13:54:15] <Altreus> The best policy is "If you get compromised only you are at risk."
[13:54:28] <Altreus> unfortunately that's difficult to make true
[13:55:04] <vague> We should just unplug the internet. Problem solved
[14:03:40] <huf> make it out of tube alloy
[14:06:59] *** Quits: disconnect_me (~marcin@gl207-41.master.pl) (Ping timeout: 265 seconds)
[14:13:22] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (Quit: Konversation terminated!)
[14:14:53] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:58] *** Joins: csrf (~csrf@user/csrf)
[14:34:27] *** Joins: proller (~p@80.240.216.69)
[14:35:50] <ehuelsmann[m]> vague: 5 five or more words didn't work here: some policies or systems have maximum lengths for passwords (close to as low as 15 positions!)
[14:36:19] *** Joins: deadmarshal (~deadmarsh@95.38.114.2)
[14:40:02] <Altreus> some words are only 1 letter long!
[14:41:49] <tm604> 'y u no log in'
[14:42:37] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[14:45:31] *** Quits: tobybl (~tobybl@213.31.133.113) (Remote host closed the connection)
[14:46:08] <vague> ehuelsmann[m], yeah, hotmail had that some years ago, before the move to live/azure wherever they live now
[14:47:21] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[14:54:52] <xq> perlbot: deparse: my $foo = 1 if defined undef or die "died"; $foo
[14:54:54] <perlbot> xq: ERROR: died at (IRC) line 1. 
[14:55:09] <xq> deparse: my $foo = 1 if defined undef or die "died"; $foo
[14:55:10] <perlbot> xq: ERROR: died at (IRC) line 1. 
[14:55:55] <Altreus> experimentation is happening
[14:55:56] <aquanight> I think you want deparse2 ?
[14:56:33] <xq> I found some slightly awful non-programmer written perl code
[14:56:47] <xq> this is one of the constructs in it
[14:58:51] <aquanight> seems a bit pointless
[14:58:56] <huf> yeah what the hell is it
[14:59:02] <xq> my brain refuses to parse this
[14:59:29] <xq> $foo = ABC if DEF or die();
[14:59:41] <xq> like what is this even
[14:59:54] <aquanight> well that more generic form
[14:59:58] <aquanight> effectively turns into
[15:00:05] <aquanight> if (DEF) { $foo = ABC } else { die }
[15:00:30] <aquanight> low precedence of 'or' but I don't think that crosses the 'if' boundary
[15:00:33] <huf> effectively this is just die(...)
[15:00:44] <xq> apparently this is working code
[15:00:45] <huf> since undef is rarely defined
[15:00:46] <aquanight> only when DEF is false
[15:00:56] <aquanight> if it's always that defined undef thing then yeah
[15:00:57] <huf> though i saw mauke define it once
[15:01:54] <xq> I'm going to write to the author
[15:02:19] <aquanight> deparse2: my $foo = 1 if defined undef or die "died"; $foo
[15:02:19] <xq> before that I'm going to also need to find the document on why conditional declarations (my $foo = .. if ..) are bad
[15:02:21] <perlbot> aquanight: Couldn't pastebin output
[15:02:29] <huf> i've heard they're dead though
[15:02:35] <huf> we're after the death of the author now
[15:02:36] <huf> long after
[15:03:19] <aquanight> basheval: perl -MO=Deparse -E 'my $foo = 1 if defined undef or die "died"; $foo'
[15:03:20] <perlbot> aquanight: -e syntax OK␤use feature 'current_sub', 'bitwise', 'evalbytes', 'fc', 'postderef_qq', 'say', 'state', 'unicode_strings', 'unicode_eval';␤my $foo = 1 if defined undef or die 'died';␤$foo;␤
[15:03:51] <huf> deparse is basically useless without -p
[15:04:15] <huf> that is, deparse's -p, not perl's
[15:04:47] <aquanight> basheval: perl -MO=Deparse,-p -e 'my $foo = 1 if defined undef or die "died"; $foo'
[15:04:48] <perlbot> aquanight: -e syntax OK␤((defined((undef)) || die('died')) and (my $foo = 1));␤$foo;␤
[15:05:26] <aquanight> also yeah conditionals on a 'my' are not great
[15:05:39] <aquanight> but in this case it's harmless
[15:10:32] <xq> so, why is using strings in place of regexes valid and strict ?
[15:11:57] <xq> sweval: my $foo = "abc"; my $re = "^ab."; if ($foo =~ $re) { say "yeah" }
[15:11:59] <perlbot> xq: yeah 
[15:12:06] <aquanight> yup
[15:12:10] <xq> :/
[15:12:13] <aquanight> because scalars don
[15:12:27] <aquanight> because scalars don't have hard-set "types" outside ->method scenarios
[15:12:39] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[15:12:43] <aquanight> in perl's eyes this is no weirder than my $x = "47"; my $y = $x * 4;
[15:12:54] <xq> all these years I have been diligently preparing my regexes with qr//
[15:13:06] <aquanight> it's still better to do so
[15:13:09] <xq> only to discover this
[15:13:16] *** Joins: tejr (~tejr@user/tejr)
[15:14:00] <aquanight> and certainly I think people *have* wanted something like use strict 'regex' or something to disable this "feature"
[15:14:29] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[15:17:03] <xq> I was expecting this at least to warn, similarly to non-numeric argument warning in arithmetic operations
[15:19:01] <xq> because regexes, unlike very large amount of other things in perl, have their own actual type
[15:19:21] <xq> sweval: my $R = qr/foo/; ref $R
[15:19:22] <perlbot> xq: Regexp
[15:22:35] <aquanight> except nonnumeric warnings only occur when the string can't be interpreted as a number
[15:24:13] <aquanight> but if it can there is no warning, the string just silently becomes a dual-life value
[15:24:36] <aquanight> sweval: use Devel::Peek; my $x = "47"; my $y = $x * 4; Dump($x)
[15:24:37] <perlbot> aquanight: SV = PVIV(0x5643b701c4a8) at 0x5643b72c9758   REFCNT = 1   FLAGS = (IOK,POK,IsCOW,pIOK,pPOK)   IV = 47   PV = 0x5643b72fd810 "47"\0   CUR = 2   LEN = 10   COW_REFCNT = 1 
[15:25:08] <aquanight> sweval: use Devel::Peek; my $x = 47; my $y = "$x" x 4; Dump($x)
[15:25:10] <perlbot> aquanight: SV = PVIV(0x55babccf54a8) at 0x55babceb8f58   REFCNT = 1   FLAGS = (IOK,POK,pIOK,pPOK)   IV = 47   PV = 0x55babcf55190 "47"\0   CUR = 2   LEN = 10 
[15:35:07] *** Quits: Bluewind (~Bluewind@user/bluewind) (Ping timeout: 256 seconds)
[15:42:37] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 240 seconds)
[15:47:53] *** Joins: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de)
[15:48:00] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 265 seconds)
[15:48:25] *** Joins: yzhernand (~yzhernand@2607:fb90:5503:a487:c051:b6ff:fe53:570e)
[15:55:03] *** Quits: yzhernand (~yzhernand@2607:fb90:5503:a487:c051:b6ff:fe53:570e) (Ping timeout: 252 seconds)
[15:55:25] *** Joins: yzhernand (~yzhernand@2607:fb90:551d:e244:2cb2:69ff:fe27:2a18)
[15:59:48] *** Joins: Ovid__ (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[15:59:48] *** Quits: Ovid_ (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Read error: Connection reset by peer)
[16:02:23] *** Joins: proller (~p@2a02:6b8:0:40c:c59c:1120:aea8:c3f5)
[16:05:01] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[16:07:09] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 252 seconds)
[16:08:37] *** Quits: yzhernand (~yzhernand@2607:fb90:551d:e244:2cb2:69ff:fe27:2a18) (Ping timeout: 252 seconds)
[16:08:49] *** Joins: yzhernand (~yzhernand@2607:fb90:551d:e244:2cb2:69ff:fe27:2a18)
[16:12:47] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[16:18:56] <simcop2387> gordonfish-: oh yea if you haven't seen it before, https://lwn.net/Articles/868536/
[16:18:56] <Paperbot> Link title(s): [ OpenSSL 3.0.0 released [LWN.net] ]
[16:19:00] <simcop2387> lots of good comments there
[16:19:59] *** Joins: pj (~pj@ghettoforge/pj)
[16:21:04] *** Joins: disconnect_me (~marcin@gl207-41.master.pl)
[16:24:41] <xq> they have added a builtin http client into openssl, but why?
[16:24:43] *** Joins: bmeneg (~bmeneg@2001:1284:f013:1dd1:49b9:b9e4:2b6:28e)
[16:26:13] *** Quits: yzhernand (~yzhernand@2607:fb90:551d:e244:2cb2:69ff:fe27:2a18) (Ping timeout: 252 seconds)
[16:27:00] <xq> seems like for the purposes of OCSP
[16:27:13] *** Joins: yzhernand (~yzhernand@2607:fb90:551d:e244:2cb2:69ff:fe27:2a18)
[16:28:58] *** Joins: tg (~tg@rockylinux/infra/tg)
[16:31:21] *** Quits: yzhernand (~yzhernand@2607:fb90:551d:e244:2cb2:69ff:fe27:2a18) (Ping timeout: 252 seconds)
[16:32:21] *** Joins: yzhernand (~yzhernand@2607:fb90:55a0:9f27:908e:e6ff:fe9a:625f)
[16:36:49] *** Quits: yzhernand (~yzhernand@2607:fb90:55a0:9f27:908e:e6ff:fe9a:625f) (Ping timeout: 265 seconds)
[16:37:29] *** Joins: yzhernand (~yzhernand@2607:fb90:551a:8703:4433:84ff:fec9:3b81)
[16:41:25] *** Quits: yzhernand (~yzhernand@2607:fb90:551a:8703:4433:84ff:fec9:3b81) (Ping timeout: 240 seconds)
[16:41:39] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:42:09] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[16:45:33] *** Joins: tobybl (~tobybl@213.31.133.113)
[16:46:00] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[16:47:16] * GumbyPAN CPAN Upload: Freecell-Deal-MS-0.0.1 by SHLOMIF https://metacpan.org/release/SHLOMIF/Freecell-Deal-MS-0.0.1
[17:00:17] *** Joins: frost (~frost@user/frost)
[17:08:41] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[17:10:02] *** Joins: jlenz_ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[17:13:31] *** Quits: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[17:22:03] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[17:22:31] <huf> it's probably one of those things
[17:22:40] <huf> you know, like things eventually acquiring a bad lisp?
[17:22:46] <huf> now it's that plus a http client
[17:24:29] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:33:12] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:33:52] *** Quits: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net) (Quit: WeeChat 2.3)
[17:37:54] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[17:39:30] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[17:44:02] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[17:44:43] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[17:51:53] *** Joins: yzhernand (~yzhernand@64-18-144-8.starry-inc.net)
[17:56:25] *** Parts: disconnect_me (~marcin@gl207-41.master.pl) ()
[17:56:34] *** Quits: yzhernand (~yzhernand@64-18-144-8.starry-inc.net) (Ping timeout: 265 seconds)
[17:57:10] *** Joins: yzhernand (~yzhernand@2607:fb90:550b:59e0:485b:14ff:feb9:91a8)
[18:03:04] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[18:03:30] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[18:09:14] <pragma-> (this (is a) bad( lisp(
[18:12:33] *** Quits: yzhernand (~yzhernand@2607:fb90:550b:59e0:485b:14ff:feb9:91a8) (Ping timeout: 252 seconds)
[18:12:45] *** Joins: yzhernand (~yzhernand@2607:fb90:550b:59e0:485b:14ff:feb9:91a8)
[18:16:24] <zgu> indeed. doesn't look very sexp
[18:19:09] *** Quits: yzhernand (~yzhernand@2607:fb90:550b:59e0:485b:14ff:feb9:91a8) (Ping timeout: 252 seconds)
[18:22:11] *** Joins: yzhernand (~yzhernand@129.85.10.202)
[18:23:23] *** Quits: yzhernand (~yzhernand@129.85.10.202) (Read error: Connection reset by peer)
[18:23:55] *** Quits: revhippie (~jdavis@047-013-092-010.res.spectrum.com) (Ping timeout: 256 seconds)
[18:24:07] *** Joins: yzhernand (~yzhernand@2607:fb90:550b:59e0:8e8:b6ff:fe0e:a40a)
[18:24:27] *** Quits: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de) (Quit: leaving)
[18:27:53] <mmlj4> a bad lithp
[18:28:19] *** Quits: yzhernand (~yzhernand@2607:fb90:550b:59e0:8e8:b6ff:fe0e:a40a) (Ping timeout: 252 seconds)
[18:28:55] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Remote host closed the connection)
[18:29:02] *** Joins: revhippie (~jdavis@097-081-163-065.res.spectrum.com)
[18:42:53] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[18:44:51] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:46:29] * GumbyPAN CPAN Upload: Encode-DIN66003-0.05 by CORION https://metacpan.org/release/CORION/Encode-DIN66003-0.05
[18:46:46] *** Joins: yzhernand (~yzhernand@2607:fb90:550b:59e0:343d:f4ff:fe38:1515)
[18:53:50] <art1> Hi, what is the preferred module to create easily client side  requests for a SOLR search? 
[18:54:48] <art1> Solr pr Apache::Solr?
[18:57:39] *** Quits: yzhernand (~yzhernand@2607:fb90:550b:59e0:343d:f4ff:fe38:1515) (Ping timeout: 252 seconds)
[18:58:31] *** Joins: yzhernand (~yzhernand@129.85.10.202)
[19:04:15] *** Joins: randir (~randir@95-25-138-85.broadband.corbina.ru)
[19:06:52] *** Joins: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20)
[19:07:23] *** Joins: zenfold_ (~zenfold@user/zenfold)
[19:10:07] *** Quits: zenfold (~zenfold@user/zenfold) (Ping timeout: 252 seconds)
[19:11:31] * GumbyPAN CPAN Upload: Crypt-Perl-0.37_09 by FELIPE https://metacpan.org/release/FELIPE/Crypt-Perl-0.37_09
[19:14:13] *** Joins: monkey_ (~user@181.114.17.106)
[19:14:19] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[19:19:07] *** Joins: last1 (last1@modemcable039.93-160-184.mc.videotron.ca)
[19:21:18] <last1> I have a hash of arrays which contains a date element like so: 02/12/2021 05:40:19 , 02/12/2021 06:56:49
[19:21:49] <last1> err, an array of arrays, sorry
[19:22:34] <last1> and I am trying to sort it by the first element in the array like so: @messages = sort { $b->[1] cmp $a->[1] } @messages;
[19:22:44] <last1> (second element)
[19:23:02] <LeoNerd> You might also like  List::Utils::sort_by { $_->[1] } @messages
[19:23:56] <last1> well, my problem is that it's not doing a proper date sort, I think it does string sort so it doesn't put it in chronological order
[19:24:13] <LeoNerd> That's why ISO 8601 is a good idea
[19:24:20] <LeoNerd> YYYY/mm/dd  therefore already sorts as a string
[19:24:45] <LeoNerd> Perhaps you should reshape the data.  strptime to be robust, or a simple regexp if you're feeling brave
[19:26:25] <last1> I'm getting the data from e-mail. I'm parsing it using: my $loosedt = DateTime::Format::Mail->new (loose => 1); $datetime=$loosedt->parse_datetime($parts[1])
[19:26:32] <last1> maybe create a timestamp field and sort on timestamp directly ?
[19:26:49] <LeoNerd> Perhaps
[19:27:50] <ilmari> DateTime objects overload comparison, so sorting based on that should work
[19:31:05] *** Joins: magla (~gelignite@55d47927.access.ecotel.net)
[19:34:24] <last1> thank you. I ended up using timestamp field
[19:34:34] <last1> I guess just writing out the problem sometimes helps in finding the solution
[19:34:39] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[19:35:01] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:38:01] <ether> always :)
[19:42:17] *** Joins: zkrd (~xdg@2a02:587:de00:3f00:6517:f4a7:6d61:b378)
[19:43:42] <zgu> last1: https://xkcd.com/1179/
[19:43:42] <Paperbot> Link title(s): [ xkcd: ISO 8601 ]
[19:43:54] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[19:49:10] <ether> the alt text wonderfully demonstrates why the other formats are no good
[19:49:11] *** Quits: deadmarshal (~deadmarsh@95.38.114.2) (Ping timeout: 265 seconds)
[19:52:54] <zgu> yes, forgot about that part
[19:53:57] *** Quits: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:55:11] *** Quits: tnez (~el@user/tnez) (Quit: %bye%)
[19:57:34] *** Joins: tnez (~el@user/tnez)
[19:58:46] <simcop2387> perlbot: ipv4
[19:58:48] <perlbot> simcop2387: IPv4 Addresses: ARIN: 0 (0.0%) APNIC: 3,567,170 (0.4%) AFRINIC: 1,669,578 (1.4%) RIPE: 0 (0.0%) LACNIC: 53,248 (0.0%) http://bit.ly/1kwnn1a
[19:59:04] <simcop2387> almost on lacnic
[20:00:50] <LeoNerd> Isn't that a kind of acid produced by muscles under low-glucose stress?
[20:01:31] <Altreus> my brain produces toxins under the same conditions
[20:09:14] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[20:14:26] *** gordonfish- is now known as gordonfish
[20:18:58] *** Quits: tnez (~el@user/tnez) (Quit: %bye%)
[20:21:51] *** Joins: tnez (~el@user/tnez)
[20:23:38] *** Quits: vague (~vague@irssi/staff/vague) (Ping timeout: 252 seconds)
[20:26:20] <genio> riding buddy cased a jump a bit and broke his collar bone. oof.
[20:43:53] <rindolf> genio: sorry to hear that.
[20:46:13] *** Parts: art1 (~romeyke@p200300ccdf07d100e05a108978600cd1.dip0.t-ipconnect.de) ()
[20:48:38] *** Joins: e1f (~user@141.117.1.172)
[20:50:37] *** Quits: yzhernand (~yzhernand@129.85.10.202) (Read error: Connection reset by peer)
[20:51:12] *** Joins: yzhernand (~yzhernand@129.85.10.202)
[20:51:55] <ology> Any advice on an mbox parser module to use? There are ..a few on CPAN. (This is for a gmail export to mbox format, if that matters.)
[20:52:01] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[20:52:16] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[20:53:08] <ology> https://metacpan.org/pod/Mail::Box looks nice
[20:53:08] <Paperbot> Link title(s): [ Mail::Box - metacpan.org ]
[20:56:38] *** Joins: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20)
[20:58:18] *** Quits: yzhernand (~yzhernand@129.85.10.202) (Ping timeout: 265 seconds)
[20:59:24] *** Joins: yzhernand (~yzhernand@2607:fb90:5512:6134:2442:f5ff:fe44:dd71)
[21:02:33] <simcop2387> ology: i just use fetchmail myself
[21:09:41] *** Quits: tobybl (~tobybl@213.31.133.113) (Remote host closed the connection)
[21:11:30] *** Joins: vague (~vague@irssi/staff/vague)
[21:14:48] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:bc10:5f40:71cb:b3b6)
[21:17:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:6993:39fb:9bc8:e953) (Ping timeout: 240 seconds)
[21:19:11] *** Quits: yzhernand (~yzhernand@2607:fb90:5512:6134:2442:f5ff:fe44:dd71) (Ping timeout: 252 seconds)
[21:19:23] *** Joins: yzhernand (~yzhernand@2607:fb90:5512:6134:2442:f5ff:fe44:dd71)
[21:24:32] *** Joins: deadmarshal (~deadmarsh@95.38.114.2)
[21:26:45] * GumbyPAN CPAN Upload: HTML-Template-Pro-0.9522 by VIY https://metacpan.org/release/VIY/HTML-Template-Pro-0.9522
[21:33:35] *** choroba is now known as choroba_
[21:34:03] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[21:34:12] *** Quits: choroba_ (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[21:34:23] *** Quits: Martchus (~martchus@dynamic-077-009-011-069.77.9.pool.telefonica.de) (Ping timeout: 256 seconds)
[21:35:31] *** Joins: Martchus (~martchus@dynamic-077-009-011-069.77.9.pool.telefonica.de)
[21:38:25] *** Quits: KnoP (~KnoP@p57b19817.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[22:03:20] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[22:13:00] <mmlj4> ology: hey, what's up?
[22:15:49] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 263 seconds)
[22:17:07] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 252 seconds)
[22:27:58] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[22:29:10] *** Quits: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:29:35] *** Quits: yzhernand (~yzhernand@2607:fb90:5512:6134:2442:f5ff:fe44:dd71) (Ping timeout: 252 seconds)
[22:32:49] *** Joins: yzhernand (~yzhernand@129.85.10.202)
[22:34:17] <ology> mmlj4: w3rkin atm. Wrt mbox, I want to parse my expense folder and do some math/charts. Are you the author of that module? :)
[22:35:56] <ology> Not the author. Ok. Anyway. Life is both good and bad. Up and down, sometimes simultaneously. Good thing I'm a zen person... You?
[22:36:37] *** Quits: phenom (~primus@user/phenom) (Ping timeout: 240 seconds)
[22:36:39] <ology> Also: Forget anything about mbox. Wrong channel!
[22:37:14] <ology> No. I'm wrong. Time to not break my focus I guess. Everything breaks...
[22:38:04] <ology> simcop2387: fetchmail is good for grabbing it. I used to do that + mutt. Those were the days...
[22:39:33] <ology> on my freebsd boxen even
[22:41:16] <xenu> mbox isn't hard to parse by hand, in fact, due to the fact that it isn't standarized at all, it sometimes might be the only option
[22:41:16] *** Joins: Bluewind (~Bluewind@user/bluewind)
[22:41:35] <gordonfish> I used to use mbox but really prefer Maildir on my imap server, which allows one to have dirs with both subdirs AND messages; with mbox it's one or the other, not both.
[22:42:33] *** Joins: ratagin (~ratagin@208.96.144.68)
[22:42:42] <gordonfish> Which frankly always felt dumb. Why was it so hard to have 'foodir/' and 'foodir.mbox' instead of using just 'foodir' for the mbox file. Seems every imap server implementation does that for mbox.
[22:43:16] <gordonfish> (At least dovecot has some nice custimazation options)
[22:43:55] <xenu> messages beging with /^From/. "From" at the beginning of a line inside bodies must be escaped with >
[22:44:05] <xenu> s/beging/begin/
[22:44:11] <ology> xenu: By hand? I use perl!
[22:44:41] <ology> gordonfish: This export was mbox format only. I don't remember getting a choice from google.
[22:45:01] <xenu> you might ask "how can i tell escaped 'From' from literal '>From'"
[22:45:03] <xenu> often you can't
[22:45:11] <xenu> it's one of those things that aren't standarized
[22:45:23] <ology> I'll puzzle it out.
[22:45:27] <ratagin> Good afternoon all.  Does anyone know if File::stat works with XFS filesystems?
[22:45:37] *** Joins: kensanata (~user@user/kensanata)
[22:45:39] *** Joins: phenom (~primus@user/phenom)
[22:45:53] <gordonfish> ology: Oh, export, yeah mbox is the main option there. I don't think I've ever seen Maildir as an export option.
[22:46:34] *** Quits: deadmarshal (~deadmarsh@95.38.114.2) (Ping timeout: 265 seconds)
[22:47:18] <Botje> ratagin: why wouldn't it? 
[22:47:36] <Botje> ratagin: it just gives the built-in stat() nicer names
[22:49:00] <ratagin> Well, I don't know.  It just flat out doesn't work on an Oracle Linux 7.9 running Perl 5 v16 and the only thing I could think of was it was an XFS filesystems (same code works fine on my desktop)
[22:49:56] <choroba> What exactly doesn't work?
[22:50:39] <ratagin> ($size,$time) = (stat($file))[7,9];
[22:50:44] <ratagin> Returns null
[22:51:51] <ratagin> I put system("ls -l $file") in front of it and that works perfectly
[22:51:52] *** Joins: vms14 (~user@45.red-83-47-205.dynamicip.rima-tde.net)
[22:52:55] <choroba> is the partition mounted?
[22:53:21] <ratagin> yes, the file is in the same directory.  I also tried with the full path.
[22:53:45] *** Joins: deadmarshal (~deadmarsh@95.38.114.2)
[22:57:29] <vms14> how do modules like Apache2::RequestIO seem to actualize an existing object rather than require the creation of a new object like Apache2::Request does
[22:57:42] <Botje> ratagin: if you're using File::stat, why are you not using the method accessors?
[22:58:03] <Botje> ratagin: also, check for the obvious culprit: $file contains whitespace at the end
[22:58:49] *** Joins: EGD (~egd@user/egd)
[22:59:53] <vms14> I mean for example mod perl passes a Apache2::RequestRec to the handler of your module , this object won't have implemented methods like $r->print unless you load Apache2::RequestIO, but I never explicitly create an object from that class like I have to do with for example libapreq2 Apache2::Request->new($r)
[23:00:51] <vms14> it's just that modperl looks if that module is loaded and creates an object of this class, or this module does something to "update" an existing object?
[23:01:17] <ratagin> oh good grief!  A typo )
[23:01:34] <gordonfish> Re: ($size,$time) = (stat($file))[7,9];
[23:01:36] <gordonfish> Or: use File::stat; ($size,$time) = map { $_->size, $_->mtime } stat $file;
[23:02:57] <Botje> vms14: Perl does not have objects, only blessed references
[23:03:14] <alh> vms14: I believe it's just like, you can call a file Some/Thing.pm, and Thing.pm can say `package Some::Other::Thing`
[23:03:18] <vms14> Botje: so it just adds items on a hash?
[23:03:26] <vms14> https://paste.debian.net/1222302/
[23:03:27] <Paperbot> Link title(s): [ debian Pastezone ]
[23:03:29] <alh> So when you do `use Some::Thing` it just injects methods into another package
[23:03:36] <vms14> this is a helloworld example of modperl
[23:03:41] <Botje> vms14: ... and perl does not really have modules
[23:04:03] <Botje> vms14: it is just the convention that `use X` fills up the namespace X with stuff.
[23:04:13] <vms14> if you remove the use Apache::RequestIO the $r->print won't exist
[23:04:20] <alh> vms14: It's what I just said.
[23:04:24] <gordonfish> sweval: use File::stat; [ map { $_->size, $_->mtime, scalar(localtime $_->mtime) } stat 'foobar.pm' ];
[23:04:24] <Botje> vms14: but in really perl just loads X (in this case, Apache2/RequestIO.pm)
[23:04:25] <perlbot> gordonfish: [2,1537380145,"Thu Sep 20 03:02:25 2018"]
[23:04:35] <Botje> vms14: which can dump some methods into Apache2::RequestRec.
[23:04:51] <gordonfish> basheval: ls -l foobar.pm
[23:04:52] <Botje> (also don't use mod_perl in 2021 unless you're being paid big bucks to maintain it)
[23:04:52] <perlbot> gordonfish: -rw-r--r-- 1 1012 1015 2 Sep 20  2018 foobar.pm␤
[23:05:50] <vms14> Botje: modperl does not load this module
[23:06:07] <vms14> unless you have SetHandler => 'perl script'
[23:06:43] <vms14> what I don't understand is how that object gets autoupdated once I load this module
[23:07:10] <gordonfish> If you're using something modern like mojolicious, dancer{2,}, catalyst, etc, you don't need to do anything in your httpd config other than a vhost with proxy entries.
[23:07:28] <gordonfish> (and ssl/tls cert config)
[23:07:29] <vms14> because for example the Apache2::Request needs you to create a new object fromt the $r
[23:08:12] <vms14> but Apache2::RequestIO just seems to "update" the $r
[23:08:19] <alh> No, it doesn't update the $r
[23:08:43] <alh> It adds methods to one of the classes that $r belongs to
[23:08:49] <vms14> alh then modperl is actually checking for the existence of this module once it creates the $r or what?
[23:09:14] <vms14> because the $r does not need this module to exist
[23:09:18] <alh> mod_perl isn't doing anything here, perl is
[23:10:00] <alh> Apache2::RequestIO is just injecting subroutines into Apache2::RequestRecs namespace
[23:10:01] <alh> That's it.
[23:10:34] <vms14> ooh
[23:10:36] <vms14> thanks
[23:10:51] <alh> https://gist.github.com/wolfsage/38fe9a4562128ff461455eb63af850d0
[23:10:52] <Paperbot> Link title(s): [ gist:38fe9a4562128ff461455eb63af850d0 · GitHub ]
[23:11:46] *** Joins: KnoP (~KnoP@p57b19817.dip0.t-ipconnect.de)
[23:13:09] *** Quits: martinus__ (~martin@96.19.201.77.rev.sfr.net) (Ping timeout: 265 seconds)
[23:13:40] <Botje> vms14: straight from the horse's mouth: https://metacpan.org/release/SHAY/mod_perl-2.0.11/source/xs/maps/modperl_functions.map#L61-78
[23:13:41] <Paperbot> Link title(s): [ xs/maps/modperl_functions.map - metacpan.org ]
[23:14:41] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 256 seconds)
[23:16:28] <Botje> vms14: that's a table mapping C function name to stuff ("symbols") in a namespace
[23:16:39] <Botje> vms14: note how MODULE and PACKAGE are not the same in this case, although they usually are.
[23:17:49] <vms14> I see, thanks, it helps me to understand although I don't understand xs, I can figure some stuff
[23:18:17] <vms14> and yes, I know I shouldn't be using modperl today when we have stuff like mojo
[23:19:08] <vms14> but I think it can be handy to be able to modify apache's behavior almost as much as you want since apache is not a bad server
[23:21:20] <Mandevil> https://l.perl.bot/p/jqcy5y ... what am I doing wrong here? The sub gets called forever even when there's nothing to be read.
[23:21:21] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[23:24:13] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 252 seconds)
[23:26:12] *** Quits: KnoP (~KnoP@p57b19817.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[23:33:01] *** Quits: Su-Shee (~Susanne@p4ffc7b67.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[23:34:58] *** Joins: Su-Shee (~Susanne@p4ff49eb5.dip0.t-ipconnect.de)
[23:37:13] *** Joins: rgrinberg (~textual@187.223.58.12)
[23:38:07] <ether> is there a perlcritic policy for ensuring all tests have descriptions?  e.g.  ok($value, $message) rather than ok($value)
[23:41:14] <simcop2387> nothing easily searchable at least
[23:44:33] *** Joins: monkey_ (~user@181.114.17.106)
[23:46:59] * GumbyPAN CPAN Upload: Crypto-API-0.06 by MICVU https://metacpan.org/release/MICVU/Crypto-API-0.06
[23:49:53] *** Quits: proller (~p@2a02:6b8:0:40c:c59c:1120:aea8:c3f5) (Ping timeout: 265 seconds)
[23:52:32] <vms14> ether: why don't just override 'ok'
[23:57:00] * GumbyPAN CPAN Upload: Dpkg-1.21.1 by GUILLEM https://metacpan.org/release/GUILLEM/Dpkg-1.21.1
[23:58:48] *** Joins: proller (~p@2a02:6b8:b081:8012::1:16)
