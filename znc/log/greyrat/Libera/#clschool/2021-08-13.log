[00:40:10] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[00:57:18] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 258 seconds)
[01:18:50] *** Joins: plexi_ (~orcabot@digital.sanctuary.org)
[01:21:49] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[01:21:56] *** Quits: plexi (~orcabot@digital.sanctuary.org) (Ping timeout: 252 seconds)
[01:21:57] *** plexi_ is now known as plexi
[02:23:02] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[03:09:04] *** Joins: makomo_ (~makomo@user/makomo)
[03:11:52] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[03:12:12] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 268 seconds)
[03:24:19] *** Joins: makomo (~makomo@user/makomo)
[03:24:30] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 272 seconds)
[03:24:53] *** Quits: makomo_ (~makomo@user/makomo) (Read error: Connection reset by peer)
[03:24:55] *** Joins: makomo__ (~makomo@user/makomo)
[03:25:53] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[03:28:41] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 248 seconds)
[03:34:03] *** Quits: makomo__ (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[03:34:12] *** Joins: makomo (~makomo@user/makomo)
[03:47:53] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 248 seconds)
[03:48:18] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[03:58:06] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[04:12:15] *** Quits: Partmedia (~kevinz@172-221-159-029.res.spectrum.com) (Ping timeout: 276 seconds)
[04:15:07] *** Quits: random-nick (~random-ni@87.116.179.82) (Ping timeout: 245 seconds)
[04:38:25] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[04:40:09] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 248 seconds)
[04:42:13] *** Joins: aeth (~aeth@user/aeth)
[04:43:14] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:45:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:50:49] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 248 seconds)
[04:55:27] *** Joins: derelict (~derelict@user/derelict)
[05:48:39] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[05:56:46] *** Joins: lottaquestions (~nick@S0106a84e3f794893.ca.shawcable.net)
[06:06:19] *** Quits: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[06:07:08] *** Joins: Partmedia (~kevinz@172-221-159-029.res.spectrum.com)
[06:24:54] *** Quits: lottaquestions (~nick@S0106a84e3f794893.ca.shawcable.net) (Quit: Konversation terminated!)
[06:41:24] *** Quits: sts-q (~sts-q@212.53.219.158) (Ping timeout: 256 seconds)
[06:46:20] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[06:54:30] *** Joins: sts-q (~sts-q@212.53.219.219)
[08:01:51] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:54:45] *** Joins: shka (~herr@109.231.62.239)
[11:05:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:06:15] <lisp123> If I shadow a symbol (e.g. (defpackage ... (:use :cl) (:shadown :condition))), can I then refer to the original condition via cl:condition?
[11:08:38] <mfiano> Yes
[11:10:37] <lisp123> mfiano: Thanks!
[11:25:58] <beach> lisp123: I find it preferable to use uninterned symbols for package names and symbols to shadow or export.  The reason, as I have mentioned many times, is that this is the solution that gives the most information to the person reading your code, namely  that the package of the symbol is of no importance. 
[11:27:46] <beach> The more information you can give to the person reading the code, the more precise that information is, and the sooner you can give it, the easier it is to understand your code. 
[11:27:59] <beach> That's a general rule of programming, no matter the language used.
[11:28:35] <lisp123> beach: Thanks, I don't really get uninterned symbols (well I understand mechanically what they are, but not the whole picture), but I will try and learn more about that
[11:29:10] <lisp123> A lot of people seem to be going down that route of uninterning symbols
[11:29:23] <beach> The important part here is that only the name of the symbol is needed, so semantically speaking, it doesn't matter whether you use keyword symbols, symbols in your package, or uninterned symbols.
[11:29:48] <mfiano> or strings
[11:30:16] <beach> Yes, but then you get that ugly mismatch between how the symbol is written and how you mention it in the package definition.
[11:30:42] <beach> lisp123: An unintened symbol means that (symbol-package <that-symbol>) returs nil because the symbol has no home package.
[11:30:46] <mfiano> lisp123: An uninterned symbol is simply a symbol that hasn't been stored (interned) in a lookup table (package). Thus, uninterned symbols are always unique to another of the same name.
[11:32:02] <lisp123> Thanks beach & mfiano
[11:33:14] <mfiano> Reading a symbol automatically interns it if it doesn't exist, which is why EQ on two same-named symbols is T (basically a pointer comparison). Uninterned symbols are always unique objects in memory, so (eq '#:foo '#:foo) is NIL, because it was never attempted to be looked up in a package for an existing object (since uninterned symbols have no package)
[11:33:57] <lisp123> mfiano: in that case can you have duplicate uninterned symbols wit the same print name?
[11:34:10] <mfiano> You must
[11:34:21] <mfiano> Each uninterned symbol with the same name is a duplicate
[11:34:38] <lisp123> Then how does CL know which one to use?
[11:34:42] <beach> Well, "must" is a bit strong.
[11:35:01] <mfiano> You cvan store a reference to that object
[11:35:03] <beach> lisp123: In this case, since only the name is important, it doesn't matter which one.
[11:36:14] <lisp123> Is that because any object stored in these symbols are the same (they get overwriten when trying to store something new)?
[11:36:32] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[11:36:41] <lisp123> Also, how does it work to create a function with an unnamed symbol - do I first have to make-symbol then use defun?
[11:36:43] <mfiano> If you ever want to compare the identity of the same uninterned symbols, you must store a reference to it somewhere, such as in a slot, using #N= reader macro, or other
[11:37:11] <mfiano> Basically somewhere to retrive that object like interned symbols do
[11:37:16] <mfiano> retrieve*
[11:37:19] <beach> It is because Common Lisp uses "uniform reference semantics", meaning that, conceptually, every object is manipulated through a reference to it.
[11:38:05] <beach> lisp123: No, (defun #:f (x) x) works fine.
[11:38:11] <beach> But then you can't call that function.
[11:39:32] <beach> lisp123: But you can do (defparameter *g* '#:g) and then
[11:39:40] <lisp123> What if afterwards I did again (defun #:f (x) (+ x x)) - will that override it?
[11:39:47] <beach> (defun #.*g* (x) (x)) and (#.*g* 234)
[11:39:49] <mfiano> No
[11:40:12] <mfiano> That will be a new function in combination with the old.
[11:40:14] <beach> lisp123: No, the function name will be different, so now you have two functions.
[11:41:12] <beach> lisp123: Function names are (usually) symbols, and the two symbols are different, so you have two different function with two different names.
[11:41:22] <lisp123> So if I defined the two function as above, and then did (defparameter ...), which one gets stored there?
[11:41:32] <beach> None of them.
[11:41:36] <mfiano> You don't do it in that order
[11:41:46] <beach> Each time you type #:f you get a different symbol.
[11:42:08] <beach> But notice that I typed #:f only once in the example with DEFPARAMETER.
[11:42:22] <beach> ... so there is only one symbol.
[11:42:27] <mfiano> Try this: (eq '#:f '#:f)
[11:42:57] <lisp123> mfiano: thanks, it returnsnil
[11:43:21] <mfiano> Now try this: (eq #1='#:f #1#)
[11:43:39] <beach> Heh, I was going to suggest that! :)
[11:43:56] <lisp123> beach: what is the purpose of #':g in defparameter? Because the next line seems to suggest the function is stored in *g*?
[11:44:30] <beach> lisp123: It's '#:g, not #':g.
[11:44:38] <lisp123> mfiano: returns true, but seems complicated :S
[11:44:53] <lisp123> beach: yes sorry, my mistake
[11:45:00] <mfiano> #1= is just funny reader syntax for storing a reference to the next object
[11:45:07] <mfiano> retrievable with #1#
[11:45:11] <beach> lisp123: It sets the variable *g* to be the symbol that I typed, i.e. an uninterned symbol with the name G.
[11:45:22] <mfiano> This way, you have a way to use '#:f again as the same identical object
[11:45:36] <mfiano> BEcause remember, uninterned symbols are created fresh everytime they are read
[11:46:00] <lisp123> But now *g* is stored in current package?
[11:46:06] <lisp123> so i would need to export that?
[11:46:29] <lisp123> Also (and perhaps this is the missing piece), what does the #. do?
[11:46:37] <mfiano> read evaluation
[11:46:40] <mfiano> read-time*
[11:46:59] <beach> mfiano: I think (eq '#1=:ff '#1#) would have been more pedagogical.
[11:56:43] <mfiano> lisp123: The Lisp reader can be thought of as the parser. It's a phase that is required to produce Lisp data from text that can then be evaluated. Before evaluation, macros get a chance to be expanded. There are a few of these processes that all occur in a specific order, but the true magic "Aha" moment is when you realize that each of these systems can call other ones. #. is evaluating an
[11:56:45] <mfiano> expression at read-time (very early in the compilation process).
[11:58:14] <mfiano> No other language that I know of offers this kind of power and it is truly amazing.
[12:00:47] <mfiano> Being able to call the compiler, which may spawn other phases, at runtime for example is sort of mind boggling to Blub users (and at least my own small brain) :)
[12:00:49] <pjb> That said, #=/## with #: are used only with our manual tests and examples, usually, or when you print the macroexpansions with *print-circle* set to T.
[12:01:19] <pjb> because uninterned symbols are generally used in macros, and therefore references to them are kept in the variables of the macro.
[12:02:59] <pjb> (defmacro gen-and-call ((&rest lambda-list) expression &rest arguments) (let ((fname (gensym "F"))) `(progn (defun ,fname ,lambda-list ,expression) (,fname ,@arguments))))   (let ((*print-circle* t)) (print (macroexpand-1 '(gen-and-call (x) (+ x x) 42)))) #| (progn (defun #1=#:f125447 (x) (+ x x)) (#1# 42))  --> (progn (defun #:f125447 (x) (+ x x)) (#:f125447 42)) |# 
[12:06:25] *** Joins: retropikel (~retropike@2001:999:200:1f35:89a7:512c:3e01:fea2)
[12:11:01] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[12:17:21] <lisp123> mfiano: Thanks for the explanation :)
[12:26:20] *** Joins: makomo (~makomo@user/makomo)
[12:31:52] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Quit: This computer has gone to sleep)
[12:32:09] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[12:32:19] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Remote host closed the connection)
[12:32:29] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[12:32:40] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Remote host closed the connection)
[12:32:51] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[12:33:10] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Remote host closed the connection)
[12:34:01] *** Joins: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8)
[12:34:15] *** Quits: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8) (Read error: Connection reset by peer)
[12:34:43] *** Joins: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8)
[12:35:58] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:26] *** Quits: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8) (Ping timeout: 252 seconds)
[12:51:35] *** Joins: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8)
[13:34:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:34:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:39:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[13:41:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:55:01] *** Quits: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8) (Quit: This computer has gone to sleep)
[13:55:17] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[13:55:28] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Remote host closed the connection)
[13:55:37] *** Joins: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8)
[13:55:58] *** Quits: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8) (Read error: Connection reset by peer)
[13:56:19] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[13:56:39] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Remote host closed the connection)
[13:56:46] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[13:57:03] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Remote host closed the connection)
[14:09:29] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[14:12:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[14:36:16] <lisp123_> For ASDF, if I compile a file to get say "utilities.fasl" extension, will it get loaded if I do (:file "utilities") or will the equivalent utilities.lisp get loaded?
[15:15:43] <lisp123_> Also does ASDF recursively scan ~/common-lisp/ to find .asd files? And what happens if there is a clash with two files defining the same system
[15:29:08] <lisp123_> Seems like ASDF compiles files and saves them in /.cache/common-lisp/sbcl-2.0 .... 
[15:29:26] <edgar-rft> lisp123_: Common Lisp (not only ASDF specific) will load the .fasl files if .fasl and .lisp files are found.
[15:30:14] <lisp123_> edgar-rft: Thanks for confirming
[15:30:31] <lisp123_> Also looks like ASDF will re-compile and place it in the "right" directory 
[15:32:21] <edgar-rft> I'll have to look up myself how ASDF searches for files...
[15:32:59] <lisp123_> Do you know what happens when there are duplicates?
[15:39:13] *** Joins: random-nick (~random-ni@87.116.177.79)
[15:41:31] <lisp123_> Okay, so I got an answer
[15:42:05] <lisp123_> Obviously one can't have duplicate names within a directory - so asdf loads the first instance of a filename.asd, and seems to ignore any future verisons
[15:42:07] <lisp123_> Just tested
[15:42:19] <lisp123_> So I have all my answers :)
[15:45:10] <lisp123_> So to conclude (for anyone else interested) - ASDF recompiles all files the first time, but not for future times, it recursively goes through directories to find .asd files and duplicates in .asd files are handled by loading the first .asd encountered and ignoring the rest
[15:46:31] <lisp123_> I recorrect myself
[15:46:42] <lisp123_> ASDF will recompile every time one does (asdf:load-system ...)
[16:36:54] *** Joins: selwyn (~selwyn@user/selwyn)
[16:37:09] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[16:37:33] *** Joins: selwyn (~selwyn@user/selwyn)
[17:04:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:26:21] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:27:03] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:36:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:05:33] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Remote host closed the connection)
[18:10:00] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:31:40] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:34:07] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Ping timeout: 268 seconds)
[18:47:34] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 258 seconds)
[18:57:36] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[18:58:26] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[18:58:50] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:08:14] *** Joins: pjb (~pjb@user/pjb)
[19:15:13] *** pjb is now known as Guest659
[19:15:52] *** Quits: Guest659 (~pjb@user/pjb) (Remote host closed the connection)
[19:16:28] *** Joins: pjb (~pjb@user/pjb)
[19:18:20] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:39:50] *** Joins: lisp123 (~lisp123@45.130.83.208)
[19:39:50] *** Joins: thrig (~thrig@65.113.153.50)
[19:41:33] *** Joins: lisp123_ (~lisp123@45.130.83.200)
[19:45:13] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 248 seconds)
[19:51:37] *** Joins: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de)
[20:01:40] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[20:10:29] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[20:12:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:17:55] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 268 seconds)
[20:30:56] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[20:40:04] *** Joins: derelict (~derelict@user/derelict)
[20:40:57] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[20:41:15] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[21:10:46] *** Quits: santiagopim (~user@90.166.59.254) (Remote host closed the connection)
[21:38:07] *** Joins: selwyn (~selwyn@user/selwyn)
[22:00:09] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 248 seconds)
[22:02:44] *** Joins: derelict (~derelict@user/derelict)
[22:18:34] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:21:29] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[22:33:58] *** Quits: retropikel (~retropike@2001:999:200:1f35:89a7:512c:3e01:fea2) (Quit: Leaving)
[22:34:17] *** Joins: retropikzel (~retropikz@2001:999:200:1f35:89a7:512c:3e01:fea2)
[22:36:06] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:43:05] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:58:11] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:00:57] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[23:03:22] *** Quits: lisp123_ (~lisp123@45.130.83.200) (Remote host closed the connection)
[23:16:20] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 252 seconds)
[23:17:56] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:21:13] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[23:22:23] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[23:24:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:29:06] *** Joins: lisp123 (~lisp123@45.130.83.200)
[23:32:04] *** Joins: Steeve (~steve@user/steeve)
[23:36:52] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:40:35] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[23:48:28] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:51:37] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[23:55:55] *** Joins: bigmama (~bigmama@d118-75-170-51.col.wideopenwest.com)
[23:58:52] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
