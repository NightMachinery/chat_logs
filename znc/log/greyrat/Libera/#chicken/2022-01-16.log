[00:11:33] <vandusen> [eggs] brev-separate version 1.51 (for CHICKEN 5) has been released
[00:42:40] *** Joins: skapata (~Skapata@191.177.185.183)
[00:42:40] *** Quits: skapata (~Skapata@191.177.185.183) (Changing host)
[00:42:40] *** Joins: skapata (~Skapata@user/skapata)
[01:37:32] *** Quits: rgherdt (~rgherdt@ip5f5af1b0.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[01:54:41] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab)
[02:03:57] *** Quits: klovett_ (~klovett@166.205.90.163) (Ping timeout: 240 seconds)
[02:10:02] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab) (Ping timeout: 240 seconds)
[02:22:32] *** Joins: monkey_ (~user@190.104.116.153)
[02:27:14] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 250 seconds)
[02:28:57] *** Joins: johnjaye (~pi@154.6.152.74)
[03:10:34] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 250 seconds)
[03:11:40] *** Joins: monkey_ (~user@190.104.116.153)
[04:11:40] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 250 seconds)
[04:57:01] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[04:57:35] *** Joins: klovett (~klovett@166.205.90.163)
[04:58:55] *** Joins: johnjaye (~pi@154.6.152.74)
[05:04:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:50:40] *** Quits: klovett (~klovett@166.205.90.163) (Quit: ZZZzzzâ€¦)
[07:04:47] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[07:21:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:48:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:15:37] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:36:40] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[08:43:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:51:45] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[08:59:41] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:12:03] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Ping timeout: 276 seconds)
[10:33:00] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab)
[11:00:49] *** Quits: ecloud (~quassel@192.89.120.58) (Ping timeout: 256 seconds)
[11:08:00] *** Joins: ecloud (~quassel@192.89.120.58)
[11:47:33] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:18:37] <mario-goulart> https://lobste.rs/s/ysqqhd/my_2022_high_end_linux_pc#c_8lx9u9 :-D
[12:19:17] <mario-goulart> With such a machine that'd probably be around 400ms to build CHICKEN with TCC. :-D
[12:19:28] <mario-goulart> vandusen: OR LESS
[12:19:30] <vandusen> mario-goulart: I'm gonna become a more interesting AND popular person!!
[12:49:30] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab) (Ping timeout: 250 seconds)
[13:58:02] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:42:53] <wxallowed> Hello there, I was trying to use spiffy and read json from a POST request body. I've been trying to (request-port request) but it looks ilke it hangs when then I try to (with-input-from-string (read-line body-port) json-read). Was someone able to use spiffy like this?
[14:48:29] <wxallowed> Tried to use both json egg and medea egg
[14:49:32] *** Quits: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at) (Quit: leaving)
[14:55:13] <wasamasa> the particular egg shouldn't make a difference
[14:55:17] <wasamasa> do you have a minimal example?
[15:10:38] <wxallowed> I found a solution: get content-length of the request, use read-string with that lenght and request-port.
[15:17:33] <wasamasa> reading JSON directly from the port should work though
[15:19:59] <wasamasa> it's unbounded reads that will block
[15:20:21] <wasamasa> but if the JSON isn't malformed and as long as the content length, it should finish right at the end or before it
[15:21:43] <vandusen> "d4" pasted "parsing json body in spiffy" http://paste.call-cc.org/paste?id=67b5ef49f87d4abb24b03dac735dd95353a2dc41
[15:22:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:24:08] <wxallowed> Simply doing  (json (read-json (request-port request))) doesn't work.
[15:24:32] <wxallowed> sorry that first "json" if my let* variable
[15:24:53] <wxallowed> So I don't know what's keeping it unbounded.
[15:26:19] <s-liao> What is the error of log file saying?
[15:26:42] <wxallowed> It hangs. Then I kill curl and receive the following error:
[15:28:14] <vandusen> SPAM! SPAM! SPAM! by freeee
[15:28:20] <wasamasa> wow, what timing
[15:28:47] <vandusen> "wxallowed" pasted "error in json-read spiffy port" http://paste.call-cc.org/paste?id=c2009a514fd71e717f3f80853300bd78aa33904c
[15:29:11] <wxallowed> s-liao: this one
[15:30:07] <wasamasa> why text/html though
[15:30:39] <wasamasa> this doesn't make any sense
[15:31:39] <s-liao> Yes. Check the header firstly.
[15:31:52] <wasamasa> could be for the response, still weird
[15:33:45] <wxallowed> I think the port I'm trying to read suddenly close and unlock the json thing that correctly print my json parsed correctly. Then spiffy tries to reply with xml but fails because the connection is closed.
[15:34:46] <wxallowed> s-liao: please, it's been a good 3h of this, looking around to then copy how spiffy-request-vars does: https://github.com/mario-goulart/spiffy-request-vars/blob/master/spiffy-request-vars.scm#L123
[15:35:21] <wxallowed> It's not just an header.
[15:36:25] <s-liao> Okay.
[15:38:19] <wasamasa> yeah, that explanation makes sense
[15:38:39] <wasamasa> I'd try to somehow instrument the json reader to see how much it's actually reading
[15:39:09] <wasamasa> maybe it's doing something stupid like reading one character ahead in the expectation of getting an EOF at the end
[15:39:50] <wasamasa> in that case, reading the whole string and parsing it is the best you can do
[15:46:19] <s-liao> Yes. I supposed that requesting txt/html, it got the response correctly.
[15:52:59] <wasamasa> yeah, if I write a fake JSON parser that reads everything up to and including a }, then have medea parse it, it works
[15:53:11] <wasamasa> so I guess medea reads beyond that for parsing efficiency reasons
[15:53:40] <wasamasa> BTW, you don't need the call-with-input-string, you can just call it directly on the string
[15:53:46] <florz> medea consumes trailing space as per the JSON specification's grammar, but it has a flag to disable that
[15:55:07] <wasamasa> wow, that was it
[15:56:07] <wasamasa> use the flag and it works just fine
[15:57:04] <florz> but of course that means that you might end up accepting invalid input (i.e., a JSON prefix that has trailing non-whitespace)
[16:19:49] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:5d0c:5cd6:41ba:a0fc)
[16:19:49] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:5d0c:5cd6:41ba:a0fc) (Changing host)
[16:19:49] *** Joins: skapata (~Skapata@user/skapata)
[16:24:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:25:30] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:53:11] *** Joins: klovett (~klovett@166.205.90.163)
[16:54:14] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:30:31] *** Joins: ublx (~ublx@user/ublx)
[20:18:09] *** Joins: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at)
[22:26:59] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[22:52:08] *** Joins: alexshendi (~alexshend@HSI-KBW-078-043-040-215.hsi4.kabel-badenwuerttemberg.de)
[23:00:14] <alexshendi> Good evening!
[23:00:35] <alexshendi> Or good whatever.
[23:02:14] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 250 seconds)
[23:03:57] *** Joins: johnjaye (~pi@154.6.152.74)
[23:31:19] <jcroisant> When using define-external, is there a way to query the Scheme procedure it defines, to get a pointer to the underlying C function so it can be used as a C callback? Right now I'm using (foreign-value my_function pointer) afterwards to look up the foreign function pointer. That works, but I'm wondering if there is another way.
[23:56:37] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:59:29] *** Joins: skapata (~Skapata@user/skapata)
