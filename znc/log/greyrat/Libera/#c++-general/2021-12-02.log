[00:29:52] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[00:30:14] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[00:32:54] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:33:39] *** Joins: badone (~badone@209.132.189.152)
[00:35:13] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[00:36:26] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[00:37:59] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:39:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:43:55] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[00:45:34] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:47:35] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[00:48:41] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[00:50:21] *** Quits: proller (~p@2a02:6b8:b081:1215::1:9) (Ping timeout: 245 seconds)
[00:55:50] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[00:55:52] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[00:56:09] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[00:57:20] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[00:59:49] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[01:01:06] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[01:03:43] *** Quits: AmR (~AmREiSa@156.199.223.24) (Quit: Konversation terminated!)
[01:03:56] <johnny> hah
[01:04:56] <johnny> i sure do like fmtlib is all i'm sayin
[01:10:09] *** Quits: baltazar (~baltazar@185-29-82-78.pool.digikabel.hu) (Ping timeout: 256 seconds)
[01:10:12] *** Quits: mitch0 (~mitch@185-29-82-78.pool.digikabel.hu) (Ping timeout: 256 seconds)
[01:12:37] *** Joins: proller (~p@2a02:6b8:b081:8806::1:27)
[01:13:14] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[01:17:52] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:17:57] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:19:30] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[01:21:53] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[01:30:27] *** Joins: baltazar (~baltazar@87-97-23-118.pool.digikabel.hu)
[01:32:06] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:33:23] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[01:33:47] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:36:47] *** Joins: Guest1731 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[01:38:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:01] *** ChanServ sets mode: +v npaperbot
[01:40:38] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:601e:9883:7933:840a)
[01:42:40] *** Joins: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net)
[01:45:55] *** Quits: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net) (Client Quit)
[01:50:59] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:56:07] *** Quits: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi) (Ping timeout: 256 seconds)
[02:09:43] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[02:11:07] <kaichiuchu> kids do I have a crazy idea for you
[02:11:22] <kaichiuchu> (read: I'm aware that this is virtually impossible, but I'm going to ask anyway)
[02:11:59] <kaichiuchu> I'm trying to design a thread-safe, but also type-safe and compile-time event queue, meaning the registration of events is done at compile-time, and sanity checks are performed at compile time
[02:12:48] <kaichiuchu> for example, to register an event you could say `constexpr auto some_event_id = event_manager_.Register<int, int, int>;`
[02:12:53] *** Joins: immibis_ (~hexchat@62.156.144.218)
[02:13:04] *** Quits: immibis (~hexchat@62.156.144.218) (Read error: Connection reset by peer)
[02:13:15] <kaichiuchu> and then to dispatch an event, you would say `event_manager_.DispatchEvent(some_event_id, 1, 2, 3);`
[02:13:22] <johnny> i think mbed's event queue is like that .. i don't recall how typesafe it is though
[02:13:53] <kaichiuchu> if the arguments for the event don't match up with the arguments passed during registration, a compile-time error is thrown, probably static_assert
[02:14:17] <kaichiuchu> but when you're popping something off the event queue, it returns a pair, first part being the ID, second part being the arguments passed
[02:14:29] <johnny> "The EventQueue class provides a flexible queue for scheduling events. You can use the EventQueue class for synchronization between multiple threads, or to move events out of interrupt context (deferred execution of time consuming or non-ISR safe operations).
[02:14:29] <johnny> The EventQueue class is thread and ISR safe."
[02:15:15] <cbreak> kaichiuchu: how's that better than a bunch of std::deque with associated mutex?
[02:15:36] <kaichiuchu> because the std::deque is abstracted out
[02:15:41] <cbreak> typesafe, threadsafe, sanity checks are compile time
[02:16:12] <kaichiuchu> to be clear, my intent is one out of some necessity, in that I'm trying to design an appropriate "glue" for each of the components of the program
[02:16:24] <johnny> kaichiuchu, https://os.mbed.com/docs/mbed-os/v6.15/apis/eventqueue.html for example
[02:16:34] <cbreak> so, why do you want to mix several types of events in a single container?
[02:16:35] <johnny> iirc the queue itself isn't tied to the OS
[02:16:41] <cbreak> instead of having one container per event?
[02:16:46] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:16:50] <kaichiuchu> johnny: looking at it now
[02:17:01] <johnny> it's prett simplistic, since it's meant for embedded context
[02:17:44] <kaichiuchu> there's only one container, which contains the parameters for an event and their types referenced by its ID if that makes sense
[02:17:49] <johnny> mbed os is really more like C with classes, although thats due to the embedded nature
[02:17:50] <kaichiuchu> here, this might help
[02:17:56] <kaichiuchu> https://godbolt.org/z/zYG63crEr
[02:18:06] <cbreak> kaichiuchu: why?
[02:18:06] <johnny> each event does return an id in which you can post or cancel with
[02:18:21] <johnny> i mostly use it to cancel tho
[02:18:26] <kaichiuchu> cbreak: i mean, i don't see another alternative
[02:18:29] <cbreak> do you need to operate on events without knowing their type?
[02:18:38] <cbreak> kaichiuchu: as I said: have a container for each event type
[02:18:55] <cbreak> is there a point mixing for example mouse events with keyboard events? or timer events?
[02:18:58] <kaichiuchu> well I don't have a container right now per se
[02:19:01] <kaichiuchu> this is what I have:
[02:19:10] <cbreak> they have very different payload, different consumers, different producers
[02:19:13] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Client Quit)
[02:19:17] <johnny> kaichiuchu, cbreak is wondering why you're not rethinking your approach
[02:19:23] <kaichiuchu> I am
[02:19:42] <johnny> your responses to cbreak don't seem to suggest that you are, you're just stating what you're doing
[02:20:04] <kaichiuchu> i'm saying that i'm already doing something similar to what he's proposing
[02:20:40] <johnny> in the embedded context i have only 2 different queues joined together
[02:21:01] <kaichiuchu> for example, what I'm doing right now is this: https://godbolt.org/z/TsrWjf51W
[02:21:53] <kaichiuchu> and then handling them like so: https://godbolt.org/z/vj9r1nYGY
[02:21:58] <kaichiuchu> but that looks awful
[02:22:53] *** Quits: Guest1731 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[02:23:54] <kalven> it's not that bad
[02:24:10] <kaichiuchu> it's not? shit I thought that looked awful
[02:24:34] <cbreak> you're mixing events there
[02:24:42] <cbreak> with polymorphism even
[02:24:44] <kalven> I mean.. you'll get to a point where you're not adding new event types every day and then the dispatch code will just sit there and do its thing..
[02:25:27] <cbreak> weirdo-polymorphism with enums, which I don't see the point of
[02:25:42] <kaichiuchu> i wouldn't know how to glue this stuff together otherwise
[02:26:06] <cbreak> if you truly want to do it compile time, there's no need to have a common virtual base
[02:26:19] <kaichiuchu> well, let's drop the whole compile-time thing for a moment
[02:26:30] <johnny> that makes me wan to experiment with conepts
[02:26:33] <johnny> concepts*
[02:26:41] <kaichiuchu> that was mostly a sort of wacky cool idea I thought about when I was eating my mcdonalds
[02:26:55] <cbreak> johnny: I can think of some ways to do it with just c++98 and boost::fusion :)
[02:27:03] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[02:27:06] <johnny> and then you need boost
[02:27:09] <cbreak> not sure if those would be readable or practical
[02:27:46] <johnny> i sure wish boost was released in editions based on C++ version, but that's probably impossible
[02:27:47] <kaichiuchu> put it another way, I guess I'm overthinking 'message passing' vs having hard callbacks or something
[02:27:49] <johnny> too much work
[02:28:03] <kaichiuchu> i do tend to get caught up on details like that
[02:28:14] <johnny> sure would make ti easier to just use parts of boost without pulling in a lot of other junk i dun need
[02:28:51] <johnny> i did learn that boost filesystem had a method to get the current program name in the process though, via some wild (to me) hack
[02:29:05] <kaichiuchu> you could use bcp if you want
[02:29:47] <johnny> you can't really distribute the results of bcp and also keep it up to date easily
[02:30:09] <kaichiuchu> that's fair
[02:30:39] <johnny> there's a different philosophy at play in which i butt heads with
[02:31:05] <johnny> as far as how and where dependencies are managed
[02:32:57] <kalven> kaichiuchu: it's also possible to separate out the dispatching code into its own function. Then it doesn't have to be tangled up with the queue code. yet another option is to use a visitor approach. Then there's no switch needed at all.
[02:33:02] <kaichiuchu> but yeah, I wanted to try and do something like the observer pattern (which is what this event queue kind of resembles to me), but (and I could be way off base here), I don't know exactly how performant the observer pattern would be
[02:33:46] <kaichiuchu> hm, the visitor approach looks cool
[02:35:02] <kaichiuchu> actually.. that looks very very cool
[02:36:50] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:49:09] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of pillow knights at https://indiedevs.net/)
[02:50:00] *** Joins: NyB (~archon@81.6.39.62)
[02:54:30] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[02:55:36] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[02:55:54] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[02:56:10] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:56:12] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ccd4:ae1b:4a40:e564)
[02:58:26] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[03:00:34] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:05:42] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[03:08:45] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[03:10:44] *** Sevalecan is now known as Maximus
[03:12:51] *** Quits: The_Jag (~The_Jag@host-79-36-38-58.retail.telecomitalia.it) (Quit: The_Jag)
[03:20:56] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:30:50] *** Joins: seninha (~seninha@user/seninha)
[03:42:01] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[03:42:40] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[03:43:02] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[03:47:20] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:e1ca:8d5a:1c5d:18a6)
[03:47:20] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:e1ca:8d5a:1c5d:18a6) (Changing host)
[03:47:20] *** Joins: skapata (~Skapata@user/skapata)
[03:52:36] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[03:58:41] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:59:27] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[04:02:01] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[04:03:35] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[04:04:29] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 252 seconds)
[04:07:06] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:15:22] *** vinleod is now known as vdamewood
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:32:41] *** Joins: markong (~kvirc@213.146.188.203)
[04:33:16] *** Quits: BucetaPeluda (~istupy@2620:0:1003:206:9819:cc89:d061:6815) (Ping timeout: 245 seconds)
[04:33:58] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:35:08] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Remote host closed the connection)
[04:35:20] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:40:00] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:40:56] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[04:41:21] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:42:06] <smallville7123> !fact
[04:42:07] <nolyc> smallville7123: A deleter's state need never be copied, only moved or swapped as ownership is transferred.
[04:42:08] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[04:42:21] <smallville7123> :)
[04:42:49] *** Joins: malloy (~jimery@116.30.222.115)
[04:46:02] *** Joins: BucetaPeluda (~istupy@2620:0:1003:206:5397:2605:6f82:ba23)
[04:57:23] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:04:39] *** Joins: frost (~frost@user/frost)
[05:26:00] *** Joins: ferdna (~ferdna@user/ferdna)
[05:32:41] *** Quits: jancoow (~jancoow@user/jancoow) (Quit: The Lounge - https://thelounge.chat)
[05:38:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:01] *** ChanServ sets mode: +v npaperbot
[06:06:41] *** Joins: jancoow (~jancoow@user/jancoow)
[06:16:33] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.3)
[06:18:00] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[06:20:08] *** Joins: malloy (~jimery@116.30.222.115)
[06:26:55] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 256 seconds)
[06:45:38] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:47:39] *** Joins: xkuru (~xkuru@user/xkuru)
[06:49:00] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:51:00] *** Joins: paule32_ (~paule32@user/paule32)
[06:52:25] *** Joins: paule32__ (~paule32@user/paule32)
[06:54:53] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 265 seconds)
[06:55:52] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 256 seconds)
[06:57:14] *** Joins: paule32 (~paule32@user/paule32)
[06:59:01] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 252 seconds)
[07:07:54] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[07:09:23] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:11:39] <smallville7123> https://godbolt.org/z/q8sPbvKz8 why does 2 print as 11 instead of 10 ?
[07:17:42] <kalven> oh my
[07:17:50] *** Quits: immibis_ (~hexchat@62.156.144.218) (Remote host closed the connection)
[07:18:35] *** Joins: immibis_ (~hexchat@62.156.144.218)
[07:22:32] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[07:24:00] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[07:28:12] <smallville7123> https://godbolt.org/z/xTM31azb6 :(
[07:28:24] <Alipha> smallville7123: well, first off, only bytes swap in big vs little endian, not bits. so for an int8_t, little == big
[07:28:55] <kalven> couple of things.. having the inner loop iterate up to `bits` make no sense
[07:29:02] <kalven> second, you need to mask off the bit to test, not just shift
[07:29:30] <Alipha> and third, data should be const uint8_t*
[07:29:34] <kalven> and all the endian stuff makes.. what's the word.. fuck all sense
[07:30:48] <Alipha> and fourth, just use https://github.com/alipha/cpp/tree/master/endian :-)
[07:34:17] <smallville7123> & 0x1 works :)
[07:37:50] <Alipha> smallville7123: i made several changes: https://godbolt.org/z/47sGM4hjK
[07:38:52] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[07:39:35] <Alipha> smallville7123: maybe i could comment what my changes were: https://godbolt.org/z/16KvjWrqY
[07:40:36] <kalven> seeing lsb to the left just hurts
[07:43:57] <Alipha> lol, that's true
[07:45:04] <Alipha> oh, `bit != -1` and `byte != -1` is a potential bug if int is smaller than size_t
[07:45:13] <Alipha> i think?
[07:45:32] <Alipha> << (long long)-1;
[07:45:32] <geordi> -1
[07:45:40] <Alipha> << (unsigned long long)-1;
[07:45:41] <geordi> 18446744073709551615
[07:45:44] <Alipha> maybe not
[07:46:15] <Alipha> it's a potential bug if size_t is smaller than int?
[07:59:03] *** Joins: noarb (~noarb@user/noarb)
[08:01:00] *** Joins: Burgundy (~yomon@79.115.213.171)
[08:25:45] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 265 seconds)
[08:35:26] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:38:28] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:38:30] <smallville7123> https://godbolt.org/z/rv1YrW5zz :)
[08:39:15] <smallville7123> how do i print the binary in reverse order?
[08:39:44] <smallville7123> eg instead of 0000 0011 its 0000 1100
[08:40:08] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[08:41:33] <smallville7123> as i can print the byte itself in reverse but im not sure how to print individual sections in reverse
[08:42:02] <smallville7123> eg instead of 0000 0011 and 1100 0000 it is 0000 0011 and 0000 1100
[08:42:33] *** Maximus is now known as Sevalecan
[08:42:33] <smallville7123> how would i go about doing that?
[08:43:08] *** Quits: Oxyd (~oxyd@user/oxyd) (Remote host closed the connection)
[08:43:52] *** Joins: Oxyd (~oxyd@user/oxyd)
[08:46:48] *** Joins: DrMax (~DrMax@node-1w7jra94757g16d8fug0m91oa.ipv6.telus.net)
[08:47:33] *** Quits: ARoxdale (~ARoxdale@84.203.26.40) (Ping timeout: 252 seconds)
[08:48:14] <InPhase> smallville7123: Shove them in a std::array sized by the type size and read them out backwards?
[08:51:00] <InPhase> smallville7123: And while you're at it, get rid of reinterpret_cast<const int8_t *>.  As logical as that might be, it's undefined behavior under strict aliasing.  You must use unsigned char or std::byte to read it out, and then covert it to the unsigned integer type you want to work with.
[08:52:19] *** Quits: frost (~frost@user/frost) (Ping timeout: 252 seconds)
[08:54:21] <InPhase> smallville7123: And if you're uncomfortable with that, toss in a line like:  static_assert((unsigned char)(-1)==255, "Buy a new computer");   :)
[08:59:58] *** Joins: chozorho (~chozorho@2601:146:300:c30::8950)
[09:05:20] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Ping timeout: 252 seconds)
[09:11:18] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[09:13:31] <smallville7123> https://godbolt.org/z/jTnPPjT43 :)
[09:24:49] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[09:27:20] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 252 seconds)
[09:32:04] *** Joins: seninha (~seninha@user/seninha)
[09:34:48] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:35:39] <smallville7123> is __BYTE_ORDER reliable?
[09:36:22] <smallville7123> or would this be more reliable? uint32_t kValue = 0x12345678; uint8_t* pValue = (uint8_t*)&kValue; if (pValue[0] == 0x78) little if (pValue[0] == 0x12) big
[09:37:37] <kalven> https://en.cppreference.com/w/cpp/types/endian
[09:38:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:02] *** ChanServ sets mode: +v npaperbot
[09:49:37] *** Quits: Kebianiz` (~Kebianiza@188.127.164.127) (Ping timeout: 250 seconds)
[09:54:56] *** Joins: Kebianizao (~Kebianiza@188.127.172.253)
[09:59:24] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:02:59] <smallville7123> :)
[10:12:44] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 265 seconds)
[10:13:05] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[10:14:51] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[10:15:06] <comrad> smallville7123: https://stackoverflow.com/a/105339
[10:15:27] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:15:42] <comrad> smallville7123: oh, i realize you want to mirror the nibbles
[10:16:43] *** Joins: seninha (~seninha@user/seninha)
[10:21:03] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[10:21:28] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:24:25] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[10:26:32] *** Quits: noent (~quassel@squint.a-oben.org) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[10:26:45] *** Joins: noent (~quassel@squint.a-oben.org)
[10:27:30] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:43:21] <TinoDidriksen> geordi --version
[10:43:22] <geordi> GCC 12.0.0 20211124 (experimental)
[10:47:44] <smallville7123> :)
[10:47:59] * smallville7123 doesnt know what to do now :)
[10:48:54] <TinoDidriksen> Why do you want to reverse the nibbles? That's an odd thing to try.
[10:48:54] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[10:49:16] <smallville7123> dunno, but i can :)
[10:50:16] <smallville7123> https://gist.github.com/9127c3992499ca40e92895c09ca3a2dd
[10:50:50] *** Joins: Spirit532 (~Spirit532@mm-254-35-84-93.mgts.dynamic.pppoe.byfly.by)
[10:50:59] *** Joins: mitch0 (~mitch@87-97-23-118.pool.digikabel.hu)
[10:51:11] <TinoDidriksen> Detecting endianness at runtime is not needed. It can be fully done at compile time.
[10:53:42] <smallville7123> some cpi's can run in both little and big endian
[10:53:46] <smallville7123> cpu's*
[10:54:27] <TinoDidriksen> Yes, but the mode is built into the binary. It doesn't switch at runtime like that.
[10:54:38] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:54:43] <smallville7123> oh ok :)
[10:56:30] <smallville7123> welp i still think runtime-endianess is reliable as i dont know wether macro's such as __ENDIAN_BIG ect exists on all compilers (or if it is required by the standard)
[10:56:54] <TinoDidriksen> Build systems have reliable ways to get the information.
[10:57:48] <smallville7123> ok
[10:58:45] <TinoDidriksen> E.g., https://github.com/TinoDidriksen/Transfuse/blob/main/CMakeLists.txt#L69-L73
[11:03:59] <smallville7123> how does this work with bi-endian cpu's ?
[11:05:36] <TinoDidriksen> The whole OS is booted in a given endian mode. It's not something you switch at will.
[11:05:47] <smallville7123> oh ok
[11:05:50] <smallville7123> :)
[11:08:33] <kalven> https://developer.arm.com/documentation/dui0802/a/A32-and-T32-Instructions/SETEND
[11:10:08] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[11:15:41] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[11:18:49] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[11:22:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[11:22:43] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:23:23] <fiesh> I never understood the point of big endian or why it even exists... maybe a misunderstanding about right-to-left arabic writing coupled with left-to-right indexing making it seemingly natural to write numbers the wrong way... it seems to me it's solely disadvantageous to have big endian and even more to use it
[11:24:01] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:25:44] *** Quits: chozorho (~chozorho@2601:146:300:c30::8950) (Quit: WeeChat 3.0)
[11:27:53] <kalven> you feel that little endian is more natural?
[11:28:27] <fiesh> yes
[11:28:38] <Stryyker> If you grow up with 6502, sure
[11:28:42] <kalven> how so?
[11:29:11] <fiesh> basically, numbers are written the wrong way since they come from rtl arabic -- it's natural to have the factor for 10^n at position n, which is the case when you index from right to left
[11:30:11] <fiesh> likewise, it's natural to have the factor for 256^n at position n when looking at a number in base 256
[11:30:23] <kalven> aha
[11:30:30] <cbreak> I think big endian makes more sense
[11:30:38] <cbreak> since you read the most important part first
[11:30:47] <cbreak> purely for human-facing notation
[11:31:03] <fiesh> that's purely since you are used to reading decimal numbers the wrong way (left to right)
[11:32:12] <cbreak> I'd say it's the right way
[11:32:35] <fiesh> of course, you'd probably also say base 10 is in some way meaningful, or at least many people would ;-)
[11:33:11] <cbreak> if I wanted to lossily compress a number, like 65535, I'd keep the big endian part of it: 6.5e4
[11:33:25] <cbreak> base ten is arbitrary
[11:33:44] <cbreak> the only meaningful base is base 2, since it's the smallest reasonable base
[11:34:54] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[11:34:58] <kalven> fiesh: aren't you also making an arbitrary choice and claiming that it's "natural" ?
[11:36:19] <cbreak> 2021-12-02 09:06:15
[11:36:46] <cbreak> in little endian, that'd be very inconvenient, since the most significant part would be read last
[11:36:50] <Stryyker> back to front date
[11:39:53] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Ping timeout: 252 seconds)
[11:42:42] <fiesh> kalven: sure, "natural" is of course very subjective.  I'd say though that having the factor to b^k at position k is arguably more "natural" than having it as position D-k for some constant D, not least since this D will have to be big enough and varies for different data types on big endian
[11:43:45] <fiesh> if the whole memory layout were simply written out left-to-right like we do with decimal numbers, little endian would appear natural to the people wanting to "see higher digits first"
[11:43:50] <fiesh> ugh
[11:43:53] <fiesh> right-to-left
[11:46:39] *** Quits: mitch0 (~mitch@87-97-23-118.pool.digikabel.hu) (Quit: leaving)
[11:47:00] *** Joins: mitch0 (~mitch@87-97-23-118.pool.digikabel.hu)
[11:47:51] *** Quits: mitch0 (~mitch@87-97-23-118.pool.digikabel.hu) (Client Quit)
[11:47:57] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:48:17] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 256 seconds)
[11:48:33] *** Joins: mitch0 (~mitch@87-97-23-118.pool.digikabel.hu)
[11:49:21] <TinoDidriksen> You can't really argue that because it came from RTL Arabic then RTL is more natural, because in a wholly RTL script then the factors are still opposite the reading direction. Also, in Arabic numbers are still read LTR, even when written using Hindi/Arabic numerals.
[11:49:32] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 240 seconds)
[11:49:34] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[11:50:17] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:50:29] <Haohmaru> oh noes
[11:50:38] *** Joins: paul424 (~tom@ip-37-248-157-18.multi.internet.cyfrowypolsat.pl)
[11:51:12] <TinoDidriksen> geordi --version
[11:51:17] <geordi> GCC 12.0.0 20211202 (experimental)
[11:51:45] <Haohmaru> so fresh again
[11:52:07] <ville> what i want is eu to pass a law that requires any documentation about bytes and bits to explicitly mark the ls/ms byte and bit positions an all diagrams. punishable by death
[11:52:36] <Haohmaru> wow, something pissed ville off ;P~
[11:52:56] <ville> it's years of wasting time on this shit
[11:53:02] <Haohmaru> ville which docs are you reading?
[11:53:11] *** Joins: frost (~frost@user/frost)
[11:53:19] <ville> i guess the latest offender was deflate
[11:53:32] <ville> the worst specification i've read in recent years
[11:53:40] <Haohmaru> i've seen a lot of unclear documents/datasheets
[11:54:54] <Haohmaru> haven't read deflate but i guess it's old.. that was used in .zip right?
[11:55:24] <fiesh> TinoDidriksen: what do you mean by "numbers are read left-to-right in arabic"?  the articles I find on this on the Internet purely mix up the number representation and want to say "they have the same order as we do" but seem to fail that the western world took the arabic order, not the other way around.  as for pronunciation, it does seem numbers are pronounced right to left from what I can tell -- but
[11:55:30] <ville> zlib and by extension png
[11:55:30] <fiesh> I'm not Arabic expert and don't really care about the history anyway
[11:56:34] <kalven> roman numerals begin with the largest
[11:56:47] <fiesh> TinoDidriksen: otherwise, I don't understand your argument about the reading direction.  also, I'm not trying to argue Arabic is as such more natural, I'm merely trying to find a (historical) reason for a confusion here in the way we write numbers
[11:56:50] <Haohmaru> roman numbers are x_x
[11:56:52] *** Joins: robod34 (Username@79.113.195.239)
[11:56:57] <fiesh> kalven: indeed, but they're quite cumbersome ;-)
[11:57:03] <Haohmaru> can you even write decimals with them?!
[11:57:20] <Haohmaru> how would pi look like
[11:57:22] <ville> but it's a common pattern in these kinds of specs. somewhere in the beginning they casually mention: "we write bits this way" and then when you happen to open the spec in the middle you've to go hunt for that piece of infromation rather than the diagram being self contained
[11:57:35] <fiesh> like I said, my argument is about the factor for b^k being at position k, not some established number systems -- that's merely about explaining why things are the way they are
[11:57:42] <Haohmaru> actually, i don't even know how zero looks like in roman
[11:57:56] <fiesh> yeah they don't have zero
[11:58:01] <Haohmaru> WHAT
[11:58:02] <ville> Haohmaru: they don't
[11:58:05] <RandomReader> as far as I'm aware we (humans) generally handle value semantics, sorting, categorization etc as magnitude and most significant first
[11:58:13] <Haohmaru> <epic_fail.jpg>
[11:58:20] <fiesh> which might lead people to blieve zero is not a natural concept
[11:58:47] <RandomReader> it's only some arithmetic forms that will go in the other direction, least significant first
[11:58:47] <fiesh> RandomReader: the scientific representation 1e5 is a counterexample
[11:58:51] <Raziel> zero is a very natural concept
[11:58:57] <Raziel> such as in "I haver zero fucks to give"
[11:58:59] <TinoDidriksen> Pronounciation is a whole other matter. Whether you say twenty-four or four-twenty differs wildly across languages, even in the same family.
[11:59:08] <RandomReader> that's a representation, but it doesn't reflect how we handle the values
[11:59:34] <cbreak> I'm more likely to forget about the least significant parts of a number
[11:59:46] <fiesh> RandomReader: then your argument doesn't apply to the memory representation of numbers though
[11:59:49] <cbreak> like 1999.95 $US? that's about 2k...
[11:59:52] <RandomReader> e.g. if we're ever comparing two or simply trying to mentally gauge size, it's the exponent that gets checked first
[11:59:58] <LordKalma> mornin
[12:00:08] <fiesh> RandomReader: :-)
[12:00:22] <fiesh> oops
[12:00:24] <fiesh> Raziel: ^
[12:00:59] <fiesh> TinoDidriksen: so basically saying "numbers are read left-to-right in arabic" is vacuous and wrong then?
[12:01:13] <RandomReader> it can if sorting is done in small-than-value units
[12:01:20] <fiesh> TinoDidriksen: what should be said is that "the numerals occur in the same order in arabic and the western world"
[12:01:28] *** Joins: johnny (~johnny@user/johnny)
[12:01:34] <fiesh> which, coincidentally, is the way the arabic world designed the order
[12:01:43] <RandomReader> e.g. two big-endian values can be bytewise sorted
[12:02:10] <RandomReader> there are also other encoding systems that benefit, e.g. the packed decimal ones .. BCD? forgetting the common term
[12:02:30] <RandomReader> (and since ultimately this is about circuitry, it depends on what the hardware was optimizing for)
[12:02:33] <fiesh> sure, you simply have to go by the counterintuitive rule that the sorting is done so that "digits" at lower positions have a higher precedence
[12:02:42] <fiesh> in little endian, you don't have to do that logic flip
[12:02:54] <RandomReader> what do you mean?
[12:03:12] <ville> fiesh: lower position counting form where?
[12:03:18] <fiesh> ville: memory layout
[12:03:48] <fiesh> RandomReader: if we look at two-byte values, with the high byte being in position 0 and the low one in position 1, then position 0 has higher sorting precedence than position 1
[12:04:22] <ville> ok, not sure why you claim that to be counter-intuitive
[12:04:37] <RandomReader> yes, which means the byte order matches the value order for big endian .. it's little endian that goes in reverse
[12:04:41] <Raziel> but that's just because of how the hardware works, no?
[12:04:42] <fiesh> because the order of the precedence is the opposite order of the position
[12:04:50] <ville> fiesh: strings
[12:04:52] <Raziel> and then the onus of turning that into something that makes more human sense is on us
[12:04:58] <TinoDidriksen> Arabic and Hindi both pronounce the numbers in the four-twenty way, but it switches at hundreds so 524 is five hundred and four and twenty.
[12:05:26] <ville> fiesh: you get lexicographic ordering based on bytes just like strings
[12:05:46] <Raziel> TinoDidriksen, interesting, that obviously completely falls apart in english cause anyone would think four twenty is 420 and immediately interject with "BLAZE IT!"
[12:05:52] <RandomReader> which is "natural" if your sort systems happen to work best when string based
[12:06:00] <fiesh> ville: which works miserably for numbers, so not sure how that argument works in favor of that ;-)
[12:06:15] <RandomReader> why are you saying this works miserably?
[12:06:22] <fiesh> because 10 comes before 2
[12:06:50] <RandomReader> 10 comes before 02
[12:06:54] <RandomReader> why would you expect different lengths?
[12:06:55] <Raziel> 10 + 2
[12:06:57] <Raziel> XII
[12:07:01] <Raziel> the romans had it right after all
[12:07:16] <fiesh> RandomReader: why would you not?
[12:07:18] <Haohmaru> they don't have zero, f*ck em
[12:07:38] <RandomReader> because we're talking about fixed-size systems?
[12:07:38] <Raziel> Haohmaru, to be fair, zero is pretty useless in just counting and addition/subtraction
[12:07:39] <ville> Raziel: IX
[12:07:39] <Raziel> :p
[12:07:44] <fiesh> RandomReader: another prime example of the unnaturalness of putting the factor for b^k at position D-k -- you're limited by D
[12:07:45] <Raziel> ville, ah shit.
[12:08:19] * Haohmaru gathers an army of mathematicians to pwn Raziel's zeroless castle
[12:08:27] <RandomReader> lexicographic sorting doesn't match value sorting for varying lengths anyway, but that has nothing to do with the conversation
[12:08:43] <RandomReader> you were asking about big-endian number representations, that's what I was responding to
[12:09:08] <fiesh> strictly speaking, I wasn't asking ;-)
[12:09:31] <fiesh> I was offering my view as to what's natural, resulting in a larger response as to why everybody thinks it isn't
[12:10:07] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[12:11:05] <kalven> one concrete example of big endian use is when building index columns in a database. columns are encoded and concatenated so that you get a single key that can be ordered with memcmp.
[12:11:57] <RandomReader> humans handle the length distinction by checking the magnitude first, although the common representations I'm aware of also optimize for that .. computer systems seem to handle it by promotion, whether explicit or implicit
[12:12:02] <fiesh> kalven: that's a nice optimization, I agree
[12:12:27] <RandomReader> IIRC there are some historical writing systems that are different, but I don't know the details
[12:13:38] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[12:14:51] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[12:15:57] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:18:12] <RandomReader> anyway, practically speaking endianness boils down to what operations you're optimizing for, so it's not terribly interesting which one is used in general
[12:20:02] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[12:21:22] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[12:22:08] <Raziel> what if you made an architecture that used both at the same time? so it could use the more optimal one for each operation :^)
[12:22:51] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:22:51] <RandomReader> not what you were joking about, but there have been mixed-endian systems :P
[12:23:16] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:23:30] <RandomReader> usually the divide is between integers and "other", which might be instructions, addresses, float or decimals, etc
[12:26:07] <kalven> Raziel: like https://developer.arm.com/documentation/dui0802/a/A32-and-T32-Instructions/SETEND ?
[12:26:13] <RandomReader> I think kalven's link earlier covers the "both at the same time" scenar-- yeah that
[12:26:30] <RandomReader> but I haven't spent any time with ARM instructions so not sure how it sorts out in practice
[12:27:33] <RandomReader> insert joke about quantum computing having values in simultaneous endian states until viewed
[12:27:44] <fiesh> it seems though that purely for optimization purposes, it would be perfectly fine to potentially reverse the byte order when creating a memory representation -- that alone as a justification for a considerably more complex environment won't hold water I think
[12:28:15] <Raziel> kalven, I'm thinking more a way to invert the endianness of any data with little to no overhead before doing each operation, so that said operation is more efficient
[12:28:26] <Raziel> rather than just being able to interpret some piece of memory as either little or big
[12:28:53] <kalven> it's when you deal with memory that it matters. registers dont have endianness
[12:28:59] <Raziel> hmmm
[12:33:21] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[12:37:06] <Haohmaru> uh, how don't they?
[12:37:12] <LordKalma> I hate little endian in the sense that you basically have like the indexes of the bits of a 2 byte number as: 9ABCDEF012345678
[12:37:22] <LordKalma> what sense does 9ABCDEF012345678 make? it sucks
[12:38:13] <LordKalma> I meant 89ABCDEF01234567
[12:38:39] <Haohmaru> you mean 0bFEDCBA9876543210 ?
[12:39:22] <LordKalma> no
[12:39:47] <LordKalma> because in little endian you swap the byte order but not the order of the bits in the byte
[12:39:55] <LordKalma> that's why I say it makes no sense what-so-ever
[12:40:00] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[12:40:21] <Haohmaru> i haven't swapped the bit order
[12:40:23] <Haohmaru> ;P~
[12:40:29] *** Joins: PJBoy (~PJBoy@host81-158-196-74.range81-158.btcentralplus.com)
[12:40:29] *** Quits: PJBoy (~PJBoy@host81-158-196-74.range81-158.btcentralplus.com) (Changing host)
[12:40:29] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:40:30] <Haohmaru> i just used the 0b format
[12:41:14] <LordKalma> https://uynguyen.github.io/Post-Resources/Endian/Endian-Overview.png // This is what I mean
[12:41:26] <LordKalma> and I think it sucks
[12:41:30] <Haohmaru> 0b0000'0001'0000'0000 <- 256
[12:43:44] <Haohmaru> bluh, my coffee levels
[12:43:48] *** Joins: pulse (~pulse@user/pulse)
[12:43:58] <Haohmaru> !coffee
[12:43:59] <nolyc> Haohmaru: Error: "coffee" is not a valid command.
[12:44:07] <Haohmaru> :~(
[12:44:54] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[12:44:57] <Haohmaru> nolyc, it's an emergency, don't you have a heart?
[12:44:59] <nolyc> Haohmaru: Error: "it's" is not a valid command.
[12:47:39] <smallville7123> welp i added address, hex and dec to my logger :)
[12:48:15] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[12:48:21] <Haohmaru> do you disrespect binary representation?
[12:49:23] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:49:26] *** Quits: paul424 (~tom@ip-37-248-157-18.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[12:49:28] <LordKalma> 0b is tooooooooo long
[12:49:29] <smallville7123> no, i have that too :)
[12:50:06] <Haohmaru> LordKalma i'm using a portrait-mode display, you probably using widescreen, and you complain about 0b being too long
[12:50:21] <PJBoy> it's perfectly valid to interpret little endian as being 0xFEDCBA9876543210
[12:50:38] <PJBoy> you have no way of observing the layout of bits within a byte
[12:50:55] <Haohmaru> PJBoy that's what i suggested before you joined
[12:51:04] <PJBoy> yeah I read ;)
[12:51:22] <Haohmaru> eh? external logs?
[12:51:25] <LordKalma> ah I didn't get what you meant Haohmaru
[12:51:32] <LordKalma> sure I guess that's fine then
[12:51:34] <PJBoy> the ones from the topic
[12:51:45] <Haohmaru> PJBoy you sneaky spy
[12:52:21] <PJBoy> I think reading logs after the fact is like the opposite of spying :p
[12:52:53] <Haohmaru> i did say 0b tho
[12:53:25] <Haohmaru> you can't observe the bit order, but the bit order is known for the 0b format
[12:53:41] <Haohmaru> least significant is on the right
[12:54:41] <LordKalma> so a qbit is just a little endian bit we haven't observed yet?
[12:54:56] <Haohmaru> a what bit?
[12:55:10] <Haohmaru> this better be quantum and not cue-tea again
[12:55:22] <LordKalma> of course it quantum
[12:55:33] <LordKalma> *it is
[12:55:56] <Haohmaru> i don't know about quantum bits
[12:56:05] <LordKalma> it was a joke
[12:56:49] <Haohmaru> using qbit = float;
[12:57:05] <Haohmaru> hm
[12:57:17] <Haohmaru> maybe it should be a union of two floats
[12:57:27] <Haohmaru> to add some UB
[12:57:33] <Haohmaru> i mean uncertainty
[12:57:57] <Haohmaru> Uncertain Behavior
[12:59:18] <KombuchaKip> Is the custom deleter copied during assignment from one shared_ptr<T> to another shared_ptr<T>?
[12:59:44] <LordKalma> that question doesn't make sense
[12:59:59] <LordKalma> a ~Foo is a member function that runs on destruction
[13:00:31] *** Joins: luizfrds (~Luiz@152.250.243.147)
[13:02:54] <KombuchaKip> LordKalma: During construction you can assign a custom deleter lambda to a std::shared_ptr. The shared_ptr<T>::~shared_ptr<T>() will call the custom deleter when the reference count is zero. But I don't know if the deleter is copied to a new shared_ptr, or if it doesn't need to because its stored in the control block.
[13:03:22] <LordKalma> ah you meant that
[13:03:23] <LordKalma> my bad
[13:05:16] <cbreak> all smart pointers have to copy stateful custom deleters, or they'd break
[13:06:25] <KombuchaKip> cbreak: Thought so. Reason I'm asking is I'm still getting a massive space leak of shared_ptr that valgrind, MemorySanitizer, AddressSanitizer, and pprof, haven't been able to help me track down yet.
[13:13:20] *** Quits: letto2 (~letto@188.25.118.240) (Quit: Konversation terminated!)
[13:15:34] *** Joins: letto (~letto@188.25.118.240)
[13:20:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[13:20:07] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:20:24] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[13:20:56] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: leaving)
[13:21:00] *** Joins: g0d0h932 (~doe@184-75-138-166.resi.cgocable.ca)
[13:21:30] <g0d0h932> hi
[13:21:45] <PJBoy> { shared_ptr<int> p(new int, S()), pp; pp = p; } struct S : tracked::B { void operator()(void*) {} };
[13:21:45] <geordi> B0* B0=>B1* B1=>B2* B2=>B3* B3=>B4* B4=>B5* B5=>B6* B5~ B4~ B3~ B2~ B1~ B0~ B6~
[13:21:55] <PJBoy> wow that's a lot of moves
[13:22:20] *** Joins: andreasbuhr (~quassel@p548dda2c.dip0.t-ipconnect.de)
[13:22:20] *** Quits: andreasbuhr (~quassel@p548dda2c.dip0.t-ipconnect.de) (Client Quit)
[13:22:40] <g0d0h932> this is amazing.. bio technology in a human being https://www.youtube.com/watch?v=E1ZqRhe4lZE
[13:22:50] <g0d0h932> oups sorry wrong chan
[13:24:40] <TinoDidriksen> Ah, same auth. Will just ban that.
[13:24:40] *** Parts: g0d0h932 (~doe@184-75-138-166.resi.cgocable.ca) ()
[13:24:52] *** ChanServ sets mode: +o TinoDidriksen
[13:25:04] *** TinoDidriksen sets mode: +b $a:g0g0do
[13:25:18] <PJBoy> what do you mean by auth?
[13:26:00] <TinoDidriksen> The spambot is logged in to the same nickserv account as earlier.
[13:26:07] *** TinoDidriksen sets mode: -o TinoDidriksen
[13:26:09] <PJBoy> ah right, cool
[13:28:34] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[13:38:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:04] *** ChanServ sets mode: +v npaperbot
[13:40:51] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[13:41:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:43:02] <LordKalma> Qt Creator 6 was just releases
[13:43:14] <TinoDidriksen> Good for it.
[13:43:29] <LordKalma> released*
[13:43:45] <LordKalma> damn, what a mood
[13:50:26] <TinoDidriksen> Not really an impressive feature list warranting a major version bump.
[13:51:17] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[13:52:37] <LordKalma> I think it means "build with qt 6"
[13:52:43] <LordKalma> *built
[13:53:17] <TinoDidriksen> Previous version wasn't built against Qt 4, surely.
[13:54:17] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:55:04] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[13:55:25] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[13:55:38] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Remote host closed the connection)
[14:00:16] <smallville7123> LordKalma: still non desirable UI's https://doc.qt.io/qt-6/topics-ui.html#comparison-of-ui-interfaces
[14:02:46] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[14:04:26] <LordKalma> how so?
[14:04:56] <TinoDidriksen> That's about Qt 6, not Qt Creator 6.
[14:05:45] <LordKalma> I still just wish doing GUIs with c++ didn't suck haha
[14:09:49] <PJBoy> I think all languages suck for GUI, right?
[14:12:45] <PJBoy> just wait until https://github.com/microsoft/cppwin32 kicks off
[14:12:58] <PJBoy> hopefully in spite of the fact that it's archived
[14:13:01] <PJBoy> >_<
[14:13:53] <Haohmaru> that's supposed to be a "proper" winapi for C++?
[14:14:15] *** Quits: proller (~p@2a02:6b8:b081:8806::1:27) (Ping timeout: 252 seconds)
[14:14:19] <PJBoy> looks like it's completely fizzled out
[14:16:17] <PJBoy> but yeah that was the idea
[14:16:28] <Haohmaru> they're kinda late
[14:16:43] <Haohmaru> maybe i was gonna be excited years ago
[14:17:04] <Haohmaru> no, actually, i wouldn't have been
[14:17:26] <PJBoy> it's never too late
[14:17:36] <PJBoy> the windows API is always going to be used in some form
[14:17:59] <Haohmaru> proper documentation is as important IMO
[14:22:03] <Stryyker> They have their new stuff for GUI now so they left the old work behind. WinUI
[14:22:23] <Stryyker> which happens to need particular build of Windows 10 or later
[14:22:46] <Haohmaru> ah, f*ck them
[14:23:17] * Haohmaru doesn't want win10 nor 11 nor 12
[14:23:31] <Haohmaru> in fact, ideally no M$ windows
[14:24:49] <Stryyker> I'm a little annoyed they didn't lift out some of the native UI improvements to make it more like a library so devs could decide which versions of Windows to target and the new UI stuff simply builds on the core base which all Windows comes with
[14:26:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:26:15] *** Joins: DSpider (~DSpider@82.79.237.84)
[14:26:18] <cbreak> Stryyker: sounds like you'd like a UI toolkit more than an OS
[14:26:30] <cbreak> something like Qt :)
[14:26:37] <Haohmaru> double-you-eks-widgets
[14:27:39] <Stryyker> MS could have done it more as a UI toolkit instead of using it to push users to move up
[14:28:33] <cbreak> heh
[14:28:44] <cbreak> MS wants to push users up I think
[14:29:23] <Haohmaru> up to win11
[14:29:25] <Stryyker> I think MS is like the weirdest family with more drama/factions than The Bold and the Beautiful could ever come up with
[14:29:30] <Haohmaru> or $whatever the current version is
[14:31:36] <LordKalma> is WinUI3 even supported on C++?
[14:32:12] <LordKalma> https://docs.microsoft.com/en-us/windows/apps/winui/winui3/create-your-first-winui3-app?pivots=winui3-packaged-cpp
[14:32:16] <LordKalma> oh cool, C++ AND XAML
[14:32:25] <LordKalma> this, but x-platform now :p
[14:33:52] <PJBoy> stop trying to make me use XAML ;_;
[14:34:56] <Haohmaru> what's XAML even?
[14:35:09] <PJBoy> it's yet another markup language
[14:35:25] <PJBoy> a la XML/QML/HTML etc
[14:35:34] <Haohmaru> bleh
[14:37:06] <PJBoy> it advertises "modern" UI, which works as an antifeature in some respects
[14:37:12] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[14:38:25] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[14:38:58] <PJBoy> and uses the windows app SDK
[14:39:11] <PJBoy> which is where the minimum of Windows 10, version 1809 comes from I think
[14:39:54] <PJBoy> which was October 2018
[14:40:30] <PJBoy> seemingly no support for multiple windows
[14:41:47] <Stryyker> Previouosly WinUI 3 need 1903, so a slight improvement
[14:47:27] <Stryyker> A little surprised someone hasn't done a juicy UI toolkit based on Chromium that can be used in a not too heavy, easy to use way, across multiple OS
[14:49:49] <LordKalma> Stryyker, https://neutralino.js.org/
[14:50:21] <LordKalma> and there are other proejcts that I don't remember the name now
[14:50:34] <LordKalma> ah this one: https://ultralig.ht/
[14:50:35] *** Joins: Kumar (~Kumar@182.176.107.191)
[14:51:10] <LordKalma> and of course literal chromium: https://github.com/chromiumembedded/cef
[14:52:53] <Stryyker> I see it is now multi-process. I wonder if it is as resource hungry as Chrome
[14:54:05] <LordKalma> The discussion of supporting C# SDK-style prijects with cmake is going well
[14:54:13] <LordKalma> maybe I'll be able to eventually realize my dreak
[14:54:21] <LordKalma> of C++ and C# and cmake and swig
[14:54:26] *** Joins: nshire_ (~nshire@47.146.41.156)
[14:56:55] *** Quits: nshire (~nshire@user/nshire) (Ping timeout: 256 seconds)
[15:09:42] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[15:13:21] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[15:19:07] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[15:20:38] *** Joins: proller (~p@2a02:6b8:0:40c:cbc4:6167:3418:6474)
[15:28:21] <LordKalma> JS frustrations: why the hell is [] truthy
[15:37:46] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ccd4:ae1b:4a40:e564) (Quit: Leaving)
[15:38:04] *** Joins: markong (~kvirc@213.146.188.203)
[15:42:17] <PJBoy> [] the operator?
[15:42:21] <PJBoy> how can an operator be truthy?
[15:42:58] <Haohmaru> truthy-fruthy
[15:43:59] <TinoDidriksen> [] is an array value in JS.
[15:45:20] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[15:45:54] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[15:47:20] <PJBoy> oh shorthand array syntax
[15:47:22] <PJBoy> right
[15:47:50] <PJBoy> well when converted to string it's probably "[]"
[15:51:10] *** Joins: unyu (~pyon@user/pyon)
[15:52:26] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[15:52:29] <TinoDidriksen> No, any comparisons with strings or integers are false, but by itself [] is true.
[15:52:47] <TinoDidriksen> But that's just reason to use explicit comparisons.
[15:53:14] <PJBoy> oh yeah, huh
[15:53:22] <PJBoy> `[] == ""` is true
[15:54:22] <TinoDidriksen> Not sure why you'd ever wind up with testing the array itself. If you have an array, you'd test .length
[15:54:48] <PJBoy> it might be good for those script style and/or expressions
[15:55:31] <PJBoy> e.g. `return is_empty() && [] || get_data();`
[16:06:22] *** Joins: kurfen (~kurfen@lfbn-ann-1-320-249.w86-200.abo.wanadoo.fr)
[16:07:43] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[16:15:48] <PJBoy> void f(auto same_as<T&> arg) { BARK; }
[16:15:50] <PJBoy> whoops
[16:19:14] <Haohmaru> i wanna make an irc bot.. i've done it before in mIRC but i mean a more serious one
[16:19:29] <Haohmaru> C++ obviously
[16:19:35] <TinoDidriksen> Open up RFC 1459 and get going.
[16:19:50] <Haohmaru> nah, i know the basics
[16:20:11] <Haohmaru> but i'm wondering whether to try get angelscript in it
[16:21:17] <Haohmaru> another cool thing would be if it doesn't need to be shut down in order to change its behavior
[16:21:58] <cbreak> Haohmaru: embedded lua might help with that. Or any other embedded language.
[16:22:10] <cbreak> Haohmaru: or a whole plugin system with loadable c++ modules
[16:22:49] <Haohmaru> yeah, i don't know other languages.. angelscript supposedly has a syntax very close to C++ thus that's my first pick
[16:22:55] <Haohmaru> (first and only)
[16:23:41] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[16:24:52] <cbreak> I've had success with lua, a long time ago
[16:24:59] <cbreak> it was very easy to integrate
[16:25:18] <cbreak> and it's much more lightweight than python or js
[16:25:26] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[16:25:32] <Haohmaru> angelscript is written in C++ and is supposed to be very easy to integrate into C++
[16:26:12] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:26:36] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:30:17] <Haohmaru> i've began adding it to my serial monitor app, but i got interrupted so it's left unfinished: https://i.imgur.com/ztSt6gP.png
[16:32:10] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[16:33:23] *** flooded is now known as _flood
[16:33:54] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:38:41] <Haohmaru> i've only made dlls on windows mostly using some SDKs, but i haven't done a dll Host
[16:39:23] *** Joins: seninha (~seninha@user/seninha)
[16:39:41] <Haohmaru> other than that C++17-ish appears to have plenty of things in it.. threads, sockets (iirc), ...
[16:41:50] <Haohmaru> and i'd only care to get it running on linux
[16:41:51] <Raziel> Haohmaru, I've made a simple bot with just asio, but I assume that part is pretty obvious
[16:42:03] <Haohmaru> no boost pls
[16:42:08] <Raziel> asio is available standalone
[16:42:09] <Raziel> :p
[16:42:09] <Haohmaru> this should be simple
[16:42:16] <Haohmaru> yeah i hear that every time
[16:42:23] <Raziel> well... probably because it's true
[16:42:35] <Raziel> there just isn't anything better for pure crossplat sockets in c++
[16:42:38] <Haohmaru> actually, i recently made something with TCP, i used kissnet lib or something
[16:43:13] <Haohmaru> i don't remember why
[16:43:36] <Haohmaru> wasn't there TCP sockets in C++17?
[16:46:46] <Raziel> nope.
[16:47:36] <Haohmaru> so that's why then
[16:50:07] <Haohmaru> the tricky sh*t's gonna be SSL/TLS (because i want that), SASL, and the whole unicode crap :/
[16:50:26] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:50:34] <Haohmaru> hm, altho i now think i've seen some "irc" libs
[16:56:15] *** Joins: PJBoy (~PJBoy@user/pjboy)
[16:59:55] <PJBoy> huh, TIL that `rm -rf *` skips hidden files
[17:00:13] <Raziel> PJBoy, what a coincidence, I learned that yesterday
[17:00:14] <Raziel> :p
[17:00:17] <PJBoy> probably * skips hidden files in general
[17:00:29] <Raziel> yep
[17:00:35] <PJBoy> I was trying to delete my eclipse workspace v_v
[17:01:00] <PJBoy> well that's pretty annoying
[17:01:05] <PJBoy> is there a cheap workaround?
[17:01:42] <PJBoy> or just `cd .. && rm -rf dir_name && mkdir dir_name && cd dir_name`
[17:02:39] <PJBoy> `rm -rf .*` does remove them, ok
[17:03:08] <Raziel> yeah, that or .??*, but that doesn't delete non-hidden files so you need to run both
[17:03:35] <PJBoy> alrighty
[17:04:44] <mort> `rm -rf .*` is a bit annoying because, depending on your rm implementation, it might error on '.' and '..'
[17:04:48] <mort> it works, it's just a bit noisy
[17:06:24] <PJBoy> that it does
[17:06:46] *** Quits: Kumar (~Kumar@182.176.107.191) (Quit: Client closed)
[17:14:04] *** Parts: Burgundy (~yomon@79.115.213.171) ()
[17:14:17] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[17:14:34] <rpav> do not `rm -rf .*`
[17:14:46] <rpav> although it may be smarter these days, but .* will match ..
[17:14:47] *** Joins: Burgundy (~yomon@79.115.213.171)
[17:16:28] <PJBoy> yeah I did do it, and it did match it
[17:16:33] <PJBoy> and did error on it
[17:17:13] <rpav> i didn't see rm's manpage say it wouldn't follow ..; probably it ought but historically it will happily do what you tell it
[17:17:33] <PJBoy> I figured it wouldn't know what directory to change you to :/
[17:17:45] <rpav> change you to?
[17:17:55] <PJBoy> if you were able to rm -rf . or ..
[17:18:02] <mort> well that's not rm's responsibility
[17:18:04] <rpav> .. is the directory
[17:18:21] <PJBoy> yeah well if you deleted the directory, when would the terminal take you to
[17:18:32] <PJBoy> but yeah that's the terminal's reponsibility
[17:18:37] <mort> well, it's the shell's
[17:18:39] <PJBoy> or more broadly the CWD
[17:18:46] <rpav> it will still be in ., because the fs won't drop the inode until the last process closes it
[17:18:46] *** Joins: ARoxdale (~ARoxdale@84.203.26.40)
[17:18:54] <PJBoy> ah ok
[17:19:07] <rpav> hypothetically letting you reattach a now-empty directory, but ;)
[17:19:11] <mort> that presumably means .. also exists? Since the current dir's inode references it
[17:24:25] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[17:27:23] <rpav> ln won't take an inode, but i guess since you have `.` it wouldn't have to anyway
[17:28:01] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:34:17] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:e42e:1c87:feed:ec28)
[17:38:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:04] *** ChanServ sets mode: +v npaperbot
[17:52:03] *** Quits: ARoxdale (~ARoxdale@84.203.26.40) (Ping timeout: 252 seconds)
[17:57:12] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:54db:f79f:90dc:3ee5)
[17:58:33] *** Joins: Simplar (~quassel@188.163.93.76)
[18:00:42] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:14f6:792c:9624:6b14) (Ping timeout: 268 seconds)
[18:01:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[18:08:15] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:11:55] *** Joins: ARoxdale (~ARoxdale@84.203.26.40)
[18:15:04] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[18:16:59] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[18:17:34] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[18:34:33] <kaichiuchu> so, I'm still thinking about the visitor pattern
[18:35:21] <kaichiuchu> but the main problem I'm facing now is it won't have access to what it needs unless this particular method is made public
[18:35:25] <kaichiuchu> but to make it public would be crap
[18:36:37] <kaichiuchu> i dunno, it is difficult to think about how to preserve encapsulation without a million sources telling me it's inevitable
[18:37:57] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:38:09] <kaichiuchu> it's inevitable that it'll be broken I mean
[18:38:29] <PJBoy> could make the visitor function a friend
[18:38:44] <kaichiuchu> yeah, I guess that would be okay
[18:38:52] <kaichiuchu> let me show you an example of where I'm at now:
[18:39:00] <kaichiuchu> https://godbolt.org/z/E7GnE8dEe
[18:39:11] <kaichiuchu> I am nauseated at how this looks, but maybe that's okay I don't know for sure
[18:39:23] <kaichiuchu> (this doesn't compile but it demonstrates it enough)
[18:51:07] <kaichiuchu> okay I think I have something working onw
[18:51:09] <kaichiuchu> *now
[18:54:56] <rpav> can't <F> class C { friend F; }; ;/
[18:55:55] <rpav> er. or can you
[18:58:31] <LordKalma> class C { template<> friend F; }; // ?
[19:00:30] <rpav> oddly you can do `template<typename F> class C { friend F; }; C<int()> c;` but you can't `struct S { friend int(); };` or whatever
[19:00:40] <rpav> nor of course does it actually make a friend of every int() function
[19:13:26] <LordKalma> Added boost::span, a C++11 implementation of C++20's std::span (Glen Fernandes). On  1.78 (still beta/RC)
[19:14:14] *** Quits: Simplar (~quassel@188.163.93.76) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:15:04] <LordKalma> On boost::regex, Change w32_regex_traits.hpp so that windows.h is no longer included.
[19:15:17] <LordKalma> forcing you to include windows.h is evil AF
[19:15:38] <LordKalma> Added result<T, E = error_code>, a class holding either a value or an error, defined in <boost/system/result.hpp>.
[19:15:40] <LordKalma> this one is interesting
[19:21:53] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:6875:9d65:d898:a509)
[19:21:53] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:6875:9d65:d898:a509) (Changing host)
[19:21:53] *** Joins: skapata (~Skapata@user/skapata)
[19:26:14] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Read error: Connection reset by peer)
[19:26:31] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[19:40:00] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:45:16] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:46:43] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:47:03] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[19:48:25] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:51:36] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[19:52:18] <Alipha> smallville7123: also, i should have sent you this earlier: https://commandcenter.blogspot.com/2012/04/byte-order-fallacy.html
[19:54:21] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[20:02:36] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:9261:bbf4:ebed:535e)
[20:04:03] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[20:10:09] <Alipha> KombuchaKip: the custom deleter is stored in the control block, so no copying of it has to be made when assigning one shared_ptr to another.
[20:10:38] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[20:13:11] <InPhase> Alipha: That article's declaration of "byte-swapping is the surest indicator the programmer doesn't understand how byte order works" and proceeding to only address integers indicates the author doesn't understand how float byte order works.  :)
[20:14:37] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[20:14:41] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[20:18:46] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[20:18:52] <PJBoy> arguable
[20:19:54] <Alipha> so float byte order can still be big or little endian, right?
[20:20:11] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 252 seconds)
[20:21:06] <PJBoy> could argue that you would never serialise floats
[20:21:11] <PJBoy> you'd convert to integer first
[20:21:44] <PJBoy> either via bit_cast or storing the mantissa and exponent pair
[20:22:06] <kalven> could argue that rob pike probably knows
[20:22:50] <Alipha> https://github.com/MalcolmMcLean/ieee754
[20:23:51] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:23:56] <imMute> InPhase: or rather that integer serialization is a much wider problem and is easier to solve without bringing in the complexity of serializing floats.
[20:25:39] <InPhase> PJBoy: The last time I wrote byte-swapping code was for a binary STL file export script, where the binary STL file format is specified as containing little-endian 32-bit IEEE-754 foats.
[20:26:09] <InPhase> PJBoy: So you often don't get to choose.  :)
[20:26:11] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[20:26:40] <PJBoy> well you'd just bit_cast<uint32_t> and do int serialisation then
[20:27:20] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 252 seconds)
[20:27:24] <PJBoy> unless the source type isn't IEEE 754
[20:27:29] <PJBoy> in which case find a new job
[20:27:32] <InPhase> :)
[20:28:09] <InPhase> And, you theoretically could, but bit_cast is only C++20 which is not production ready yet.
[20:28:41] <PJBoy> well, I really meant memcpy
[20:29:03] <InPhase> I did std::copy and std::reverse_copy switched on an endianness check.
[20:29:17] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:29:26] <PJBoy> tbh I don't hate the byte swap approach that much
[20:29:42] <PJBoy> but it's so academically impure
[20:30:33] <InPhase> It's inarguably messy low level stuff best avoided if possible.  Just some things are messy low level.
[20:30:35] *** Quits: DSpider (~DSpider@82.79.237.84) (Quit: Leaving)
[20:31:06] *** Joins: JeffH (~JeffH@46.sub-174-198-145.myvzw.com)
[20:31:49] <InPhase> The other solution is to treat float outputs as bit-packed structs and try to reimplement floating point support, but this is going to be underperformant.  The cpus are already built for this on most decent computers.
[20:33:11] <JeffH> Is there an easy way to find? unused structure/enums/function prototypes. I’m heavily modifying some heritage coda ean don’t want to leave unaided elements.
[20:34:04] <PJBoy> I would imagine clang-tidy would point those out for you
[20:34:20] <PJBoy> how easy it is to use clang-tidy depends on your build system
[20:36:42] <JeffH> We don’t use clang. But I’ll look into it. Thanks
[20:38:14] <LordKalma> clang-tidy does not preclude the use of clang
[20:39:25] <PJBoy> *does not require the use of clang
[20:39:33] <JeffH> What I should have said is we don’t have clang installed.
[20:39:38] <LordKalma> that
[20:39:46] <PJBoy> it's related but not dependent
[20:39:53] <LordKalma> there are clang-tidy standalone binaries at least for windows
[20:39:55] <PJBoy> if you build with CMake then you're golden
[20:39:58] <LordKalma> I assume for other platforms as well
[20:40:04] <LordKalma> PJBoy, enjoying cmake eh?
[20:40:11] <PJBoy> just need to dump out the compile_commands.json and you can run clang-tidy
[20:40:22] <PJBoy> regardless of what compiler you build with
[20:40:34] <LordKalma> but not regardless of generator ;)
[20:40:37] <PJBoy> LordKalma, I love the tooling
[20:40:50] <PJBoy> I've yet to experience the cmake writing/debugging itself
[20:40:55] <PJBoy> but it reads pretty well
[20:40:56] <JeffH> Don’t build with cmake
[20:41:14] <LordKalma> cmake has JS-level of bullshit with variable shennanigans
[20:41:26] <LordKalma> but other than that, its fine
[20:45:26] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:52:04] *** Quits: JeffH (~JeffH@46.sub-174-198-145.myvzw.com) (Remote host closed the connection)
[20:56:04] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:56:32] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[20:56:39] <CarloWood> Hmm, I need something to execute a lambda after n invocations of an event (aka, member function of object). So... I need an object Foo that you can store a { std::function<void()>, int N } pair in that executes the std::function the Nth call to foo.event().
[20:57:20] <CarloWood> It may be assumed single threaded.
[20:57:34] <CarloWood> And N has a limit, say - it is never larger than 16.
[21:00:32] *** Joins: JeffH (~JeffH@46.sub-174-198-145.myvzw.com)
[21:01:13] <Raziel> this sounds quite specific. why are you not just... putting an if in the event that checks N?
[21:01:14] <Raziel> v:
[21:07:34] <CarloWood> { Foo foo; foo.add([]{ cout << "4"; }, 4); for (int k = 0; k < 3; ++k) foo.add([]{ cout << "13"; }, 13); for (int n = 0; n < 32; ++n) { cout << '!'; foo.event(); } } struct Foo { int i = 0; array<vector<function<void()>>, 16> a; void add(function<void()> f, int n) { a[(i + n) % 16].emplace_back(f); } void event() { i = (i + 1) % 16; for (auto&& f : a[i]) f(); a[i].clear(); } };
[21:07:35] <geordi> !!!!4!!!!!!!!!131313!!!!!!!!!!!!!!!!!!!
[21:07:41] <CarloWood> That seems to work.
[21:09:06] <PJBoy> RLE compressed function queue
[21:09:29] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:11:50] <kalven> now do fizzbuzz
[21:18:10] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[21:21:06] <Alipha> here's my two fizzbuzzes: https://wandbox.org/permlink/jsONnC2dwn8qtJHy https://wandbox.org/permlink/GQZjPlsfrmVv6SEJ and this one kkd wrote: https://godbolt.org/z/8aExsG
[21:22:15] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 256 seconds)
[21:22:25] <JeffH> <sigh> clang-tidy doesn’t seem to be available for our system.
[21:24:33] <Raziel> Alipha, inspect()? dafuq is an inspect?
[21:24:55] <PJBoy> the clue is in the compiler name
[21:25:11] <Raziel> ah.
[21:25:29] <Raziel> well, that looks like it'll be fun
[21:25:30] <PJBoy> that's my favourite one ever I think
[21:25:35] <LordKalma> whaat?
[21:26:03] <PJBoy> granted I'd still rather see the procedural algorithm
[21:26:10] <PJBoy> in like an actual work environment
[21:27:40] <rpav> now if we only had value overrides for functions ;/
[21:28:50] <rpav> though maybe inspect adds this and that's all syntax sugar for creating a struct with overrides similar to a lambda
[21:28:53] <kalven> yep, the overload rules in c++ are too simple as it is. they could do with some complications
[21:29:03] <rpav> if so that would be pretty neat
[21:29:15] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:30:17] <PJBoy> imagine the vtables
[21:30:40] <rpav> err, i mean overloads not overrides
[21:30:49] <rpav> no vtables
[21:31:26] <rpav> even if the function were virtual, it wouldn't change the vtable, because it should compile as a trampoline (with implementations possibly inlined)
[21:31:47] <rpav> i mean, it's basically syntax sugar for _writing_ the procedural version for you
[21:31:53] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4062:de04:7533:33ac)
[21:33:28] <kalven> and then we have the syntax for how to get a function pointer to a specific overload
[21:36:24] <LordKalma> QOverload?
[21:36:25] * LordKalma runs
[21:36:32] <rpav> QVariant
[21:36:43] <rpav> (i don't even want to know what's going on with that one)
[21:36:51] <LordKalma> QOverload?
[21:36:55] <rpav> qvariant
[21:37:06] <rpav> QOverload selects a specific overload doesn't it
[21:37:11] <LordKalma> yes
[21:37:50] <rpav> that's basically a simple cast i thought
[21:38:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:00] *** Quits: proller (~p@2a02:6b8:0:40c:cbc4:6167:3418:6474) (Ping timeout: 268 seconds)
[21:39:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:04] *** ChanServ sets mode: +v npaperbot
[21:44:47] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[21:44:53] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[21:45:35] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[21:47:05] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 252 seconds)
[21:48:23] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Quit: upgrades)
[21:52:08] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[21:59:02] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[21:59:19] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[22:00:50] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 252 seconds)
[22:04:32] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[22:05:14] *** Quits: Leone (~Leo@216.154.50.172) (Read error: Connection reset by peer)
[22:05:15] *** Joins: plastico (~plastico@neomutt/plastico)
[22:07:14] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[22:07:51] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[22:32:45] <KombuchaKip> Alipha: Thank you.
[22:39:03] *** Joins: Simplar (~Simplar@188.163.93.76)
[22:41:01] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[22:47:48] *** Joins: proller (~p@80.240.216.69)
[22:49:51] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[22:49:54] <senoraraton> https://termbin.com/dmzm  How exactly do I compile multiple .cpp files as part of a single binary?  This is my Makefile
[22:51:59] <kalven> https://www.google.com/search?q=c%2B%2B+makefile+example
[22:52:29] <Raziel> I do believe the sources (OBJS) have to be after -o
[22:52:36] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Read error: No route to host)
[22:52:44] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[22:52:52] <Raziel> oof, he died
[22:52:57] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[22:56:55] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[22:57:17] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[23:04:48] <PJBoy> there was a tonne of potential whitespace issues there
[23:05:02] <PJBoy> multiple tabs, spaces around the = token, possible CRs
[23:11:37] <ville> senoraraton: there are many ways to do that, perhaps start by explaining what is wrong with your approach
[23:13:15] <ville> senoraraton: you've possibly some naming uncertaintity there. your variable is called OBJS when it's perhaps more of a SRCS.
[23:15:07] <kaichiuchu> i have to bitch about something in the hopes that someone here will prove me wrong, because I hope I am
[23:15:26] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[23:15:51] <kaichiuchu> it's _really_ annoying that C++ doesn't have any kind of standard build system
[23:15:55] <ville> senoraraton: you may possibly want to do:    source_files := a.cxx b.cxx c.cxx   and then    object_files := $(source_files=.o)
[23:16:33] <kaichiuchu> I know that C++ is a language
[23:16:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[23:16:52] <kaichiuchu> but christ, I don't see the harm in enabling -Wall manually on CMake'
[23:16:59] <ville> err object_files := $(source_files:.cxx=.o)
[23:17:00] <kaichiuchu> because there's really no other choice but to _do that_
[23:17:00] <CarloWood> ville: oh, are you also into .cxx (as opposed to .cpp)?
[23:17:23] <ville> can't say i am into either one really, but yes i do use cxx by default
[23:17:36] <CarloWood> cool, I thought I was the only one :p
[23:18:32] <Raziel> kaichiuchu, so how would anyone prove you wrong? C++ *doesn't* have a default build system
[23:19:17] <Raziel> or, I guess cmake is the de facto "default"
[23:19:19] <kaichiuchu> i want someone to prove wrong that this is bullshit
[23:19:28] <Raziel> because of its widespread adoption
[23:19:51] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Ping timeout: 252 seconds)
[23:19:53] <kaichiuchu> you'll have to forgive me, I'm a little rattled because of the CMake enthusiasts and die-hards I just had to deal with
[23:19:56] *** Quits: elemongw (~elemongw@20.107.36.50) (Ping timeout: 245 seconds)
[23:20:08] <LordKalma> cmake is great
[23:20:18] <kaichiuchu> i think it serves a nice purpose
[23:20:28] <Raziel> I dunno if I'd go as far as to say it's "great" :p
[23:20:30] <TinoDidriksen> CMake is the least bad, and it has critical mass.
[23:20:42] <Raziel> but it is, for the most part, fine
[23:20:49] <LordKalma> least bad is the best we get in c++
[23:20:58] <kaichiuchu> but if you're not supposed to touch compiler flags, and there's no facility for adding -Wall for example, how else am I supposed to do it
[23:21:00] <LordKalma> on whatever the issue
[23:21:09] <LordKalma> with a presets file
[23:21:09] <kaichiuchu> that's what drives me mad
[23:21:12] <CarloWood> Unless you use it wrong, which is a bit too easy unless you spend many weeks studying how to use it.
[23:21:27] *** Joins: paule32 (~paule32@user/paule32)
[23:21:42] <Raziel> kaichiuchu, who says you're not supposed to touch compiler flags?
[23:21:55] <kaichiuchu> almost everything I've googled and every video on CMake I've watched
[23:21:57] <LordKalma> well, you're not supposed to hardcode them
[23:21:58] <TinoDidriksen> Absolutely touch compiler flags.
[23:22:00] <LordKalma> at least on libraries
[23:22:03] <CarloWood> target_compile_options(dns_ObjLib
[23:22:03] <CarloWood>   PRIVATE -fstack-protector -Wall -Wextra
[23:22:03] <CarloWood> )
[23:22:17] <LordKalma> ( I mean any that aren't essential for building)
[23:22:20] <CarloWood> Only place where I could find a -Wall so quick :p
[23:22:23] <cbreak> -Wall ftw!
[23:22:36] <LordKalma> at least you used PRIVATE
[23:22:53] <kaichiuchu> target_compile_options(${TARGET_NAME} PRIVATE
[23:22:53] <kaichiuchu>        $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:
[23:22:56] <LordKalma> the problem is that someone upstream can set -Werror
[23:22:56] <PJBoy> is there no way to tell cmake to add "all warnings"
[23:22:56] <kaichiuchu>           -Wall -Werror -Wextra>)
[23:22:59] <kaichiuchu> I just do this
[23:22:59] <LordKalma> and shit ensues
[23:23:01] <PJBoy> for some definition of "all"
[23:23:04] <cbreak> I also recommend -Wextra and -pedantic
[23:23:16] <LordKalma> presets are indeed the correct way to do this
[23:23:24] <Raziel> kaichiuchu, don't forget the MSVC settings too!
[23:23:27] <Raziel> and the clang ones
[23:23:28] <CarloWood> I always use -Werror
[23:23:35] <CarloWood> Warnings are unacceptable.
[23:23:36] <kaichiuchu> Clang ones are right there
[23:23:44] <ville> PJBoy: what is "all" though? clang does have -Weverything which is very different from other compilers' ideas
[23:23:59] <PJBoy> defining "all" is left as an exercise
[23:24:00] <cbreak> -Weverything is actually everything :)
[23:24:05] <CarloWood> all is "a lot" :p
[23:24:05] <Raziel> and on msvc, don't forget to also set permissive-
[23:24:11] <Raziel> :p
[23:24:25] <LordKalma> there«s a cmake flag for strict c++ standard
[23:24:29] <cbreak> Raziel: -pedantic isn't enough?
[23:24:35] <CarloWood> Probably all warnings that can and should be avoided in every program.
[23:24:36] <Raziel> cbreak, msvc doesn't have pedantic
[23:24:47] <ville> !give cbreak -Wall
[23:24:48] <nolyc> cbreak: -Wall is is only -Wsome; it leaves out many warnings. To really get a lot of warnings, you should use '-Wall -Wextra -Wpedantic -Wconversion -std=c++17 -O2'
[23:24:53] <PJBoy> a decent set of warnings IMO is -Wall -Wextra -pedantic on gcc/clang and /W4 on MSVC
[23:24:54] <cbreak> or set(CMAKE_CXX_STANDARD 17) ?
[23:25:22] <whupdup> even gcc gives warnings when you build it, if it's good enough for them it's good enough for me :^)
[23:25:23] <cbreak> ville: why the -O2?
[23:25:30] <cbreak> that looks more like something for release mode
[23:25:34] <cbreak> and not general flags
[23:25:46] <whupdup> why O2 and not O3?
[23:25:49] <ville> cbreak: well -O1 or -Og is good enough I guess. some dead code elimination detection needs it
[23:25:55] <PJBoy> > When optimization is turned on, GCC can produce additional warnings that do not appear when compiling without optimization
[23:25:56] <cbreak> whupdup: 3 is odd.
[23:26:17] <Raziel> 2 is the highest one on msvc, at least...
[23:26:24] <kaichiuchu> as far as I know CMake doesn't use -Og
[23:26:25] <PJBoy> > The effectiveness of some warnings depends on optimizations also being enabled. For example -Wsuggest-final-types is more effective with link-time optimization and -Wmaybe-uninitialized does not warn at all unless optimization is enabled.
[23:26:30] <whupdup> also does anyone know if cmake debug builds turn on -Og
[23:26:33] <whupdup> oh you answered my question
[23:26:34] <Raziel> but also, /O2 /Ob2 /Oi /Ot /Oy /GT /GL
[23:26:37] <whupdup> any way to jam it in?
[23:26:37] <kaichiuchu> hah perfect timing
[23:26:38] <Raziel> can't forget those other ones.
[23:26:38] <Raziel> :p
[23:26:51] <kaichiuchu> I think you could just append it and gcc will use the highest ranked optimization flag
[23:26:54] <kaichiuchu> but that seems tacky
[23:26:58] <whupdup> it seems non-portable
[23:27:02] <kaichiuchu> right
[23:27:08] *** Joins: elemongw (~elemongw@20.107.36.50)
[23:27:11] <cbreak> I wouldn't add any optimization to general flags
[23:27:18] <cbreak> I'd use them to the build type flags
[23:27:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[23:27:42] <cbreak> cmake has release-with-debug-info, release, debug and a fourth one I always forget
[23:27:56] <kaichiuchu> minsizerel
[23:27:56] <rpav> minsize
[23:28:05] <whupdup> I guess I'd have to manually write something in my cmakelists to detect if msvc and debug then /Owhatever else just try -Og
[23:28:12] <ville> cbreak: you won't catch all the dead code/unused variables if you don't
[23:28:21] <cbreak> ville: I'd catch it in release build
[23:28:32] <cbreak> or rel-with-deb-info
[23:29:00] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[23:29:04] <whupdup> what optimization level will release with debug info use?
[23:29:08] <Raziel> kaichiuchu, anyway, as you can see, this is indeed bullshit.
[23:29:12] <Raziel> whupdup, full
[23:29:15] <kaichiuchu> yes
[23:29:21] <cbreak> whupdup: you can chose I think, if you want to modify it
[23:29:47] <whupdup> if I can choose I might as well choose for my normal Debug right?
[23:29:49] <cbreak> but the point of debug is to have something that's easy to debug
[23:29:53] <whupdup> unless you can only choose for Rel+Debug
[23:29:57] <cbreak> so adding -O2 to that is harmful
[23:30:06] <whupdup> because I want to use -Og to debug
[23:30:25] <ville> cbreak: sure go with -Og there
[23:30:26] <cbreak> cmake allows you to customize those things
[23:30:36] <kaichiuchu> using -Og at least is defined in gcc's manual as what to use for debugging
[23:30:37] <whupdup> in a generic portable way?
[23:30:42] <cbreak> that's why I would add such -O flags to the build types, and not general flags
[23:31:11] <senoraraton> https://termbin.com/y053  I have a 2d array declared as int** grid.  I want that 2d array to contain Tile objects.  I get a compliation error: cannot convert Tile* to int*
[23:31:21] <cbreak> senoraraton: that's a pointer to a pointer to an int
[23:31:24] <cbreak> it's not a 2d array
[23:31:46] <cbreak> such a variable can only contain pointers to pointers to int
[23:31:51] *** Quits: JeffH (~JeffH@46.sub-174-198-145.myvzw.com) (Remote host closed the connection)
[23:32:14] <cbreak> if you want it to store pointers to pointers to Tile, then you will have to change the type
[23:32:25] <cbreak> but really, this is bad style and fragile
[23:32:35] <cbreak> use a std::vector, and an index mapping function
[23:32:56] <senoraraton> The answer is always "Use a vector"
[23:32:56] <rpav> ^
[23:33:02] <PJBoy> and functions that don't return values should have a return type of void
[23:33:08] <Raziel> well, in this case the answer might just be "Use a map"
[23:33:11] <cbreak> senoraraton: not always, only when it makes sense :)
[23:33:11] *** Joins: aegon (~mike@174.127.249.180)
[23:33:12] <Raziel> but either way. wat d fak.
[23:33:19] <rpav> also that, but _also_ in the case of vectors, don't keep pointers to them either
[23:33:34] <rpav> but a vector of tile IDs is all you should need
[23:33:36] <senoraraton> I can also just use a 2d Vector
[23:33:46] <cbreak> it's just that vector is the most basic reasonable data structure in std
[23:33:51] <cbreak> senoraraton: vectors are 2D
[23:33:56] <cbreak> 1D
[23:33:59] <rpav> you don't need something as silly as a vector of vectors; remap the space of the vector
[23:34:05] <cbreak> you can nest them, but that doesn't make a 2D vector
[23:34:13] <cbreak> it just makes it a vector containing more vectors
[23:34:20] <aegon> hey all, i'm trying to understand move semantics better. I'm using std::move across a ffi interface with c linkage which means it mustbe something kept track of on the object? Is there state on the object that keeps track of whether memory has been moved or not or does move not touch the object and its entirely on the author to not move an object twice or use it after its been moved?
[23:34:21] <cbreak> which is slow, fragile and wasteful
[23:34:30] <cbreak> you're better off doing what I said above and use an index mapping function
[23:34:41] <rpav> aegon: std::move does not do a thing per se
[23:34:58] <aegon> right, it casts it to an rvalue, but lets say it does and then it is used as such
[23:35:10] <Raziel> unless you actually need a vector of vectors (because, say, each vector in there potentially has a different size)
[23:35:27] <cbreak> Raziel: even then there are better options
[23:35:29] <senoraraton> Why bother index mapping?  Since the data of the objects position is releveant, I can just reference the objects position data, and hold the entire thing in a 2d array.
[23:35:32] <rpav> aegon: and you would not use move semantics across FFI, or really outside of C++'s arena at all, and sometimes across binary boundaries (shared libs or whatever)
[23:35:48] <cbreak> senoraraton: because there are no 2D arrays in your code
[23:35:57] <cbreak> 2D arrays don't really exist in c++ or c
[23:36:05] <cbreak> what you could have is nested arrays
[23:36:12] <cbreak> but those are arrays, so they are compile time sized
[23:36:18] <cbreak> you can't resize arrays at runtime
[23:36:28] <senoraraton> Thats a semantic argument.  An array of arrays == a 2d Array
[23:36:34] <rpav> no it isn't
[23:36:34] <cbreak> no
[23:36:49] <aegon> rpav: why not? The situation I have is there are objects created by my library with opaque references handed across the ffi. I want to optimize some manipulations of them through other ffi functions that take opaque pointers and do move semantics on them with careful naming
[23:37:00] <rpav> you can use it as such but you almost never should use it at all
[23:37:04] <aegon> is this going to blow up in my face because of how move works? I realized too late i need to grok it better
[23:37:18] <rpav> i only say almost because there's probably a reason i can't think of to do so ;)
[23:37:22] <rpav> array of strings or something
[23:37:41] *** Quits: r-g (~r-g@195-154-105-157.rev.poneytelecom.eu) (Quit: r-g)
[23:37:52] <rpav> aegon: define "do move semantics"
[23:38:13] <cbreak> aegon: std::move is an rvalue-cast
[23:38:15] <rpav> you could make e.g. mything_classname_move(C* from, C* to); or something
[23:38:21] <cbreak> it casts from lvalue-reference to rvalue-reference
[23:38:33] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:5d0a:d7eb:30c:e02b)
[23:38:33] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:5d0a:d7eb:30c:e02b) (Changing host)
[23:38:33] *** Joins: skapata (~Skapata@user/skapata)
[23:38:41] <rpav> and _that_ could be `*to = std::move(*from);` but you can't otherwise "do move semantics"
[23:39:06] <aegon> i have a deque of events passed over to the client with some tagging. The client can then call an ffi function to consume the front of the deck into another opaquepointer. I'd like to move from the front of the deck do avoid some extra copies
[23:39:18] <rpav> really all C++ things should be behind a wall of CABI/extern "C" functions with opaque pointers
[23:39:20] <aegon> so like
[23:39:55] <aegon> return new OPAQUEOBJECT{ .Value = std::move(PASSEDINOPAQUE->Value.front()); };
[23:39:55] <PJBoy> how is it consuming the front of the deque?
[23:40:02] <PJBoy> right
[23:40:03] <aegon> but one that does the right hting with actually popping it off the deque etc
[23:40:15] <rpav> sure, so like, `deque_get(mydeque, myval);` which would pop-with-move internally
[23:40:24] <aegon> just shortened it so it fits in irc
[23:40:31] <rpav> where mydeque and myval are pointers made by like `deque_new` / `deque_item_new`
[23:40:39] <aegon> yep
[23:40:45] <aegon> exactly that. are there dragons there?
[23:40:47] <PJBoy> well the move kicks in at the point that the OPAQUEOBJECT is constructed
[23:40:50] <rpav> not really
[23:40:52] <aegon> i don't understand how moving is kept track of
[23:40:57] <rpav> moving isn't kept track of
[23:41:10] <cbreak> aegon: think about it in terms of constructors and operator=
[23:41:13] <PJBoy> and then there's nothing FFI related to consider
[23:41:23] <rpav> in the usual case, the source becomes a "blank" but valid object, and the destination inherits the guts of the other
[23:41:29] <cbreak> aegon: do you know how to use / write a copy constructor?
[23:41:41] <cbreak> for example for std::vector?
[23:41:53] <rpav> e.g. `somevec = std::move(anothervec)` .. somevec has anothervec's contents, and anothervec is capacity()==0
[23:42:01] <rpav> or whatever
[23:42:04] <aegon> yes, i also found out recently about move methods which are super cool
[23:42:24] <cbreak> aegon: in a copy constructor, you'd allocate a new buffer, and copy all the objects into it
[23:42:25] <aegon> i thought std::move wit hvectors leaves the capacity and it must then be erased
[23:42:25] <PJBoy> that's a bold assumption rpav
[23:42:43] <aegon> but the values in the capacity are undefined
[23:42:59] <cbreak> aegon: in a move constructor, you'd just _take_ the buffer from the source, and use it yourself. And set the source to be empty (or something similar)
[23:43:05] <rpav> well, it may be stupider than i assume; c++ often is
[23:43:11] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:43:11] <rpav> but you should get the general idea
[23:43:50] <ville> a moved-from standard library type is assignable and destructible. don't think they guarantee other things
[23:43:59] <aegon> ok, helps to know i'm not in crazy land with this stuff. Its new ground for me
[23:44:12] <cbreak> aegon: ffi is unrelated to this.
[23:44:13] <PJBoy> it guarantees that all the class invariants are true
[23:44:16] <rpav> ah i see vector movement is incredibly dumb because of allocators
[23:44:34] <cbreak> but if you can call constructors or operator= via ffi, then why would it matter whether you call copy or move constructors?
[23:45:07] <aegon> i really like the std::move(object).get() for consuming network buffers
[23:45:25] <cbreak> that move is pointless
[23:45:30] <rpav> yeah FFI has little effect here, the only "real" thing is making your FFI interface use the appropriate things, which is a tangential problem
[23:45:39] <PJBoy> that move isn't necessarily pointless
[23:45:52] <aegon> cbreak: ok, i gues i have another question then that is more ffi related. I've so far kept my ffi really dumb, taking opaque pointers in and possibly mutating them, some functions take a reference to a uint8_t as a flag to pass and some a size_t as an output for lengths
[23:46:21] <aegon> i'd like to expose some that set doubles but i know double representation is more varied that uint etc, should I be scared about takeing a double& over the ffi and mutating it?
[23:46:43] <cbreak> no.
[23:46:53] <aegon> i guess, where do i find what types are well defined over the ffi via c99 etc
[23:46:59] <cbreak> double representation should be consistent within one program address space
[23:47:08] <cbreak> it's not like you pass the data across process boundaries
[23:47:40] <rpav> some local double rep might be weird
[23:47:43] <cbreak> (and even then, it is still running on the same architecture / cpu, so the worst I can think of is different fp settings, which shouldn't be too bad)
[23:47:55] <rpav> like some local int rep might be really weird
[23:48:02] <rpav> i'd probably worry more about ints, but
[23:48:16] <aegon> rpav: what do you mean by local int rep?
[23:48:24] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[23:48:44] <rpav> integer representation in the native language might be funny, if you can get a direct pointer to them you might need to watch out
[23:48:52] <cbreak> If I ever encounter a platform that have multiple int representations in the same program, then I'll be first surprised, then disgusted, and then will have a new entry on my list-of-dumbest-platforms
[23:49:08] <rpav> e.g. some dynamic languages avoid heap allocating fixnums by using tag bits
[23:49:29] <rpav> not sure on doubles/floats
[23:50:21] <aegon> hmm, if thats the case is there abetter way to pass a flag across the ffi than uint8_t? i went with uint8_t since bool is technically not a thing in c
[23:50:34] <rpav> but you can get like a 60+-bit int, pointers, and a few other things with a tag bit or few, especially if the language treats them as immutable
[23:50:37] <aegon> sorry by flag i mean boolean not a bit field
[23:50:39] <cbreak> C has had bool for decades
[23:50:46] <rpav> i'm not sure if you can store like platform-native 80-bit doubles, but some things might do that too?
[23:51:37] <aegon> when i was looking at hte ffi it seemed like bool was questionable from some languages but maybe i was likely looking at very old info then
[23:51:53] <cbreak> ah, yes, C has had bool for 22 years: https://en.cppreference.com/w/c/types/boolean
[23:51:55] <rpav> bool is like an octet that's 0 or 1
[23:51:57] <aegon> you can write bool a in a pure c header and everythign will be ok with it? I thought that was really not a thing
[23:52:14] <PJBoy> who said bool was an octet?
[23:52:20] <rpav> actually wait are C++ bools guaranteed to be octets
[23:52:22] <PJBoy> or 0/1 for that matter
[23:52:27] <rpav> it's definitely 0 or 1
[23:52:44] <rpav> but i forget what the recent guarantee is
[23:52:47] <cbreak> PJBoy: stdbool.h says
[23:52:55] <aegon> oh ok, it requires stdbool.h to be present and accurate on the target platforms, is that an area of concern then? it would be nice to do away with these uint8_t's then
[23:52:59] <rpav> in C probably no guarantees
[23:53:16] <PJBoy> cbreak, says that it's an octet?
[23:53:18] <cbreak> no
[23:53:22] <cbreak> that true and false are 1 and 0
[23:53:28] <PJBoy> yeah true and false are 1 and 0
[23:53:40] <cbreak> don't ask me why the Cdiots made true and false be integer constants
[23:53:42] <PJBoy> but I don't think bools are guaranteed to be 1 or 0
[23:54:01] <cbreak> because that's obviously stupid when you are defining constants for a bool type
[23:54:47] <aegon> cbreak: could it be because allocating sizes and aligning less than a byte would possibly be awkword for some hardware?
[23:55:07] <cbreak> aegon: I don't see why that matters at all
[23:55:09] <aegon> or is that the type of thing that a compiler is supposed to worr yabout
[23:55:12] <cbreak> in c++, true and false have type bool
[23:55:23] <cbreak> because true and false are bool constants
[23:55:41] <cbreak> in C, apparently _Bool constants don't have type _Bool... for ... reasons?
[23:55:57] <cbreak> ah, well, C is dumb.
[23:55:59] <cbreak> use C++ :)
[23:56:03] <PJBoy> { char c(100); f(bit_cast<bool>(c));  } void f(bool x) { cout << +bit_cast<char>(x); }
[23:56:03] <geordi> 100
[23:56:04] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:56:05] <PJBoy> yeah there you go
[23:56:16] <PJBoy> bool can be potentially any number
[23:56:35] <PJBoy> it just quickly gets converted to 0 or 1 in most contexts
[23:56:44] <rpav> ok yeah bool _conversion_ from 0/anyval is guaranteed false/true, but i'm not sure you're even guaranteed conversion the other way
[23:56:46] <aegon> whoa, i've never seen +bit_cast
[23:56:53] <cbreak> PJBoy: try a proper cast
[23:57:16] <PJBoy> { char c(100); f(bit_cast<bool>(c));  } void f(bool x) { cout << +reinterpret_cast<char&>(x); }
[23:57:17] <geordi> 100
[23:57:29] <cbreak> like static_cast
[23:57:37] <cbreak> one that actually guarantees correct code
[23:58:06] <rpav> ah bool _conversion from_ is guaranteed 0/1
[23:58:07] <PJBoy> { char c(100); f(bit_cast<bool>(c));  } void f(bool x) { cout << +*static_cast<char*>(static_cast<void*>(&x)); }
[23:58:08] <geordi> 100
[23:58:14] <cbreak> PJBoy: you're essentially invoking indeterminate-value creation
[23:58:16] <rpav> PJBoy: well that's all just UB
[23:58:20] <cbreak> so your example is as useful as UB
[23:58:23] <PJBoy> nothing there is UB
[23:58:36] <PJBoy> cast to char* is all well and good
[23:58:44] <PJBoy> I even don't do pointer arithmetic
[23:58:54] <cbreak> "A bit in the value representation of the result is indeterminate if it  does not correspond to a bit in the value representation of From (i.e. it corresponds to a padding bit), or "
[23:58:56] <rpav> writing anything to a bool but true/false is UB
[23:59:08] <PJBoy> since when?
[23:59:33] <PJBoy> oh is that from the bit_cast spec?
[23:59:34] <cbreak> why would you expect bool to be able to store anything else?
[23:59:47] <PJBoy> if so, assume I wrote memcpy code instead
