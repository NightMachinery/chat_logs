[00:00:10] <lisp123> https://documentation.divio.com
[00:00:52] <lisp123> ^ Slowly working towards that, but currently my projects are too small for it to matter as much
[00:02:10] <copec> That's nice
[00:02:38] <copec> The documentation system, not necessarily you working towards that, although that's nice too :-P
[00:02:53] <lisp123> copec: :P I figured ;)
[00:03:27] <lisp123> It does make sense and is probably why a lot of documentation is lacking towards one of the four types of audiences
[00:04:34] <Josh_2> Have you tried something like 40ants/doc?
[00:05:11] <lisp123> I need to reach out to him, I saw that but didn't fully follow / hadn't had the time to sit down and go through it. Staple by Shinmera is another one
[00:05:34] <Shinmera> That is me hello
[00:06:10] <lisp123> :)
[00:06:15] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:e9e4:3f1e:9de2:2340)
[00:08:15] <Shinmera> Staple kinda sucks and I'd like to redo it (again), but I lack the time (again).
[00:08:56] <Shinmera> The best parts of Staple are its code parsing subsystem to provide xrefs within code snippets, and the separate library called Definitions.
[00:09:28] <lisp123> Oh I didn't know that, I will have a look at those two
[00:09:29] <Shinmera> Oh and linking to source locations from the documentation sections is also cool.
[00:09:38] <Shinmera> Which it does thanks to Definitions.
[00:09:46] <Shinmera> (and some metadata crunching)
[00:10:42] <lisp123> Shinmera: p.s. I've been doing my own mini extension to Parachute whereby one can evaluate a form in the REPL and then save it and its result as a unit test (e.g. (is equal ... ...))
[00:11:00] <Shinmera> cool
[00:11:00] <lisp123> You can probably do a much better version, but I thought the idea was cool
[00:11:14] <Shinmera> Maybe, but I most certainly don't have the time to make one :)
[00:13:06] <lisp123> I can imagine. CL is sorely lacking a CLONE-USER function in its standard library
[00:14:12] <Shinmera> As it happens I don't even have the time to tackle the issues that were reported for Parachute :(
[00:15:44] *** Quits: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it) (Remote host closed the connection)
[00:15:56] *** Joins: makomo (~makomo@user/makomo)
[00:15:57] <hayley> lisp123: COPY-USER poses more problems than any other generic object copying function in Common Lisp would.
[00:19:11] *** Joins: random-nick (~random-ni@87.116.177.136)
[00:21:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:26:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:26:24] <lisp123> hayley: That's true. It would require careful separate lest two copies interact with a shared resource and the fabric of space-time would tear apart
[00:27:09] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[00:28:28] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[00:38:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[00:41:29] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[00:48:02] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 260 seconds)
[00:48:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:52:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[00:53:12] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:54:02] *** Joins: aeth (~aeth@user/aeth)
[00:58:27] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::32f3) (Remote host closed the connection)
[00:59:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:05:33] *** Quits: hofensta_ (~hofenstad@182.237.189.37) (Ping timeout: 268 seconds)
[01:10:29] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 268 seconds)
[01:11:27] *** Joins: amb007 (~a_bakic@137.149.22.93.rev.sfr.net)
[01:13:43] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:18:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:23:23] *** Quits: amb007 (~a_bakic@137.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[01:23:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:24:40] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[01:29:36] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 268 seconds)
[01:29:49] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[01:32:00] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:32:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:34:55] *** Joins: cosimone` (~user@93-34-133-207.ip49.fastwebnet.it)
[01:36:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[01:37:32] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[01:42:05] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[01:46:20] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:48:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:58:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:01:28] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:10:11] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:10:24] *** Quits: Catie (~user@2603:3023:523:400:82e8:2cff:fed9:cc84) (Changing host)
[02:10:24] *** Joins: Catie (~user@user/catie)
[02:14:37] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:e9e4:3f1e:9de2:2340) (Ping timeout: 268 seconds)
[02:16:13] <etimmons> Anyone know of a portable, lock free mailbox implementation? (Similar to the one in sb-concurrency)
[02:16:35] *** Quits: pve (~pve@37-136-142-31.rev.dnainternet.fi) (Quit: leaving)
[02:16:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:16:55] <pjb> isn't the one in sb-concurrency portable?
[02:18:38] *** Joins: phantomics (~phantomic@71-218-252-43.hlrn.qwest.net)
[02:21:41] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:22:12] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:22:37] <etimmons> Portable across OSes probably, but not implementations
[02:23:28] <Catie> I remember seeing one that falls back on sb-concurrency. Let me see if I can't dig it up again
[02:23:48] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:25:23] <Catie> https://github.com/deadtrickster/safe-queue
[02:25:39] <Catie> I saw it mentioned here a while back, but I'm afraid I can't necessarily vouch for its robustness
[02:25:42] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 268 seconds)
[02:26:57] *** Quits: Inline (~Inline@2a02:908:1252:7a80:edec:c289:e267:dbb7) (Ping timeout: 268 seconds)
[02:31:16] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8105:e43c:4407:e29b) (Ping timeout: 268 seconds)
[02:34:19] <etimmons> Catie: thanks, I'll take a look!
[02:34:53] <Catie> Good luck!
[02:35:34] *** Quits: gaqwas (~john@dynamic-095-118-005-151.95.118.pool.telefonica.de) (Ping timeout: 268 seconds)
[02:36:56] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:38:02] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:43:19] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[02:44:11] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 264 seconds)
[02:44:48] <hayley> Works for me.
[02:45:06] <hayley> (Disclaimer: I fixed a typo in it. Otherwise it works fine)
[02:50:44] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:50:53] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[02:51:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:53:06] *** Quits: random-nick (~random-ni@87.116.177.136) (Ping timeout: 260 seconds)
[02:56:31] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:59:00] *** Joins: igemnace (~ian@user/igemnace)
[03:06:01] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[03:10:21] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[03:12:36] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:13:13] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:16:52] *** Joins: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net)
[03:18:00] *** Joins: s-liao (~s-liao@101.86.103.113)
[03:21:06] *** Quits: yewscion (~yewscion@72-21-198-66.amazon.com) (Ping timeout: 260 seconds)
[03:29:12] *** Joins: Oladon (~olad@98.43.81.226)
[03:29:42] *** Joins: robin_ (~robin@user/terpri)
[03:29:50] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 268 seconds)
[03:29:53] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[03:34:38] *** Quits: cosimone` (~user@93-34-133-207.ip49.fastwebnet.it) (Ping timeout: 260 seconds)
[03:41:22] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:45:19] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:46:19] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:52:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[03:52:25] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:53:53] *** Quits: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[04:01:42] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[04:04:18] *** Quits: robin_ (~robin@user/terpri) (Read error: Connection reset by peer)
[04:04:20] *** Joins: robin (~robin@user/terpri)
[04:08:01] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:08:50] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:09:49] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:10:36] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:13:00] *** Quits: robin (~robin@user/terpri) (Ping timeout: 268 seconds)
[04:13:24] *** Quits: Catie (~user@user/catie) (Quit: headed home)
[04:15:27] *** Joins: robin (~robin@user/terpri)
[04:15:45] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[04:16:11] *** Joins: robin (~robin@user/terpri)
[04:27:54] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[04:28:51] *** Joins: darklands (~darklands@gateway/vpn/pia/darklands)
[04:32:45] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 268 seconds)
[04:44:32] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[04:44:33] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[04:44:41] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (Ping timeout: 245 seconds)
[04:44:55] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[04:44:55] *** Joins: rogersm (~rogersm@90.166.177.48)
[04:44:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[04:45:42] *** Quits: darklands (~darklands@gateway/vpn/pia/darklands) (Ping timeout: 268 seconds)
[04:46:36] *** Joins: janislago (~user@c-24-98-52-54.hsd1.ga.comcast.net)
[04:46:39] <janislago> hi
[04:46:53] *** Joins: darklands (~darklands@gateway/vpn/pia/darklands)
[04:53:43] *** Joins: horar (~horar@2001:4454:417:a700:e960:55d5:ab6a:1942)
[04:54:33] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[04:55:15] *** Joins: Catie (~user@user/catie)
[04:57:19] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[04:59:31] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[05:00:04] *** Joins: rogersm (~rogersm@90.166.177.48)
[05:01:25] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[05:01:33] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:05:40] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:07:12] *** Quits: jealousmonk (~user@2804:431:e7c4:b0f3:d8c8:261b:2f95:4da3) (Quit: ERC (IRC client for Emacs 27.1))
[05:11:25] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:11:37] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:25:10] *** Quits: darklands (~darklands@gateway/vpn/pia/darklands) (Ping timeout: 260 seconds)
[05:27:59] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:29:20] *** Quits: horar (~horar@2001:4454:417:a700:e960:55d5:ab6a:1942) (Quit: Client closed)
[05:31:30] <Josh_2> janislago: 'ello
[05:34:58] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[05:36:16] *** Quits: X-Scale (~ARM@46.50.0.1) (Ping timeout: 268 seconds)
[05:37:19] *** Joins: darklands (~darklands@gateway/vpn/pia/darklands)
[05:37:24] *** X-Scale` is now known as X-Scale
[05:40:14] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:42:47] *** Joins: s-liao (~s-liao@101.86.103.113)
[05:47:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:52:26] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[06:04:48] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[06:06:17] *** Quits: darklands (~darklands@gateway/vpn/pia/darklands) (Quit: Leaving)
[06:06:26] *** Quits: janislago (~user@c-24-98-52-54.hsd1.ga.comcast.net) (Quit: ERC (IRC client for Emacs 27.2))
[06:14:45] *** Joins: s-liao (~s-liao@101.86.103.113)
[06:17:22] *** Quits: molson (~molson@24-220-198-232-dynamic.midco.net) (Quit: Leaving)
[06:17:54] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:22:22] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Ping timeout (120 seconds))
[06:28:03] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 268 seconds)
[06:33:45] *** Joins: bilegeek (~bilegeek@2600:1008:b00f:bd9f:b35d:f157:9cec:ab62)
[06:46:46] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:48:13] *** Joins: paule32_ (~paule32@user/paule32)
[06:49:43] *** Joins: paule32__ (~paule32@user/paule32)
[06:51:16] *** Joins: mzan (~quassel@mail.asterisell.com)
[06:52:06] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 268 seconds)
[06:52:43] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:3a97:eaba:c01a:d700) (Ping timeout: 268 seconds)
[06:53:21] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 268 seconds)
[06:53:36] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:25ae:baa7:4680:70ca)
[06:54:21] *** Joins: paule32 (~paule32@user/paule32)
[06:55:48] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[06:56:26] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 268 seconds)
[06:59:30] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[07:12:32] *** Joins: igemnace (~ian@user/igemnace)
[07:13:42] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[07:15:28] *** Joins: aeth (~aeth@user/aeth)
[07:18:40] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:20:56] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[07:25:38] *** Joins: s-liao (~s-liao@101.86.103.113)
[07:31:11] <beach> Good morning everyone!
[07:34:51] <beach> copec: Whether an expression is considered a Boolean or not has to do with intent.  SET-GET-ELEMENT is clearly not a Boolean function.  It is a function that gets an element, or returns some default value if the element does not exist.
[07:34:55] <beach> copec: It so happens that this default value is NIL, but your code should still treat the default value as exactly that.  So you can use NULL to test that, or you can create your own function like DEFAULT-ELEMENT-P.  In both cases you convert a default value to a Boolean.
[07:35:49] <beach> copec: Or, you can test it the other way around, of course, like REAL-ELEMENT-P.
[07:37:43] <beach> Guest74: The style guide is definitely not about avoiding generalized Booleans.  Again, it is about intent.
[07:37:50] *** Quits: Catie (~user@user/catie) (Quit: rcirc on GNU Emacs 29.0.50)
[07:39:47] <beach> I can write (if (member ...) ...) when I want to check whether an element is a member of a list.  Or (let ((cell (member ...))) (if (null cell) ...) when I want to use MEMBER to access an element.
[07:41:26] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:43:18] *** Quits: ym (~ym@217.107.106.229) (Ping timeout: 268 seconds)
[07:54:20] *** Joins: semz (~none@user/semz)
[07:59:20] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[08:03:13] *** Joins: namasteaks (~pink@75.172.55.0)
[08:06:39] *** Joins: karlosz (~karlosz@47.151.136.69)
[08:17:15] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Read error: Connection reset by peer)
[08:17:24] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[08:26:10] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[08:27:11] *** Joins: s-liao (~s-liao@101.86.103.113)
[08:38:43] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[08:38:58] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[09:05:13] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[09:11:51] *** Joins: Jing (~textual@2604:a840:3::10f2)
[09:12:18] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[09:19:10] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[09:29:26] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:35:58] *** Joins: wilfred (uid159@id-159.uxbridge.irccloud.com)
[09:43:42] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 260 seconds)
[09:51:42] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[10:00:01] *** Quits: bilegeek (~bilegeek@2600:1008:b00f:bd9f:b35d:f157:9cec:ab62) (Quit: Leaving)
[10:04:55] *** Joins: CaCode_ (~CaCode@user/cacode)
[10:07:11] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:12:46] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[10:15:41] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[10:17:23] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:22:57] *** Joins: rgherdt (~rgherdt@ip5f5af428.dynamic.kabel-deutschland.de)
[10:23:47] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[10:26:23] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[10:29:12] *** Joins: CaCode (~CaCode@user/cacode)
[10:31:08] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[10:32:15] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 268 seconds)
[10:33:21] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[10:33:51] *** Joins: cosimone (~user@93-44-187-173.ip98.fastwebnet.it)
[10:35:50] *** Joins: gaqwas (~john@dynamic-077-009-126-017.77.9.pool.telefonica.de)
[10:39:16] *** Joins: kadir (~kadir@95.7.9.203)
[10:41:30] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[10:43:31] *** Joins: s-liao (~s-liao@101.86.103.113)
[10:44:03] *** Quits: s-liao (~s-liao@101.86.103.113) (Client Quit)
[10:52:32] *** Quits: CaCode (~CaCode@user/cacode) (Remote host closed the connection)
[10:52:51] *** Joins: CaCode (~CaCode@user/cacode)
[10:54:37] *** Joins: igemnace (~ian@user/igemnace)
[10:55:34] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[10:58:28] *** Joins: s-liao (~s-liao@101.86.103.113)
[11:02:32] *** Quits: s-liao (~s-liao@101.86.103.113) (Client Quit)
[11:03:41] *** Joins: s-liao (~s-liao@101.86.103.113)
[11:27:26] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[11:31:28] *** Quits: gaqwas (~john@dynamic-077-009-126-017.77.9.pool.telefonica.de) (Ping timeout: 268 seconds)
[11:35:24] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:37:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:40] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:40:40] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Ping timeout: 260 seconds)
[11:47:22] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 260 seconds)
[11:59:24] *** Joins: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff)
[12:15:29] *** Quits: wilfred (uid159@id-159.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:17:42] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 268 seconds)
[12:24:13] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[12:45:27] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Ping timeout: 268 seconds)
[12:47:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:49:20] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[12:51:49] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[12:52:16] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[12:52:34] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Client Quit)
[13:08:32] *** Joins: treflip (~user@95.79.32.99)
[13:09:46] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:4c5a:11e3:52e6:a3a9)
[13:34:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[13:36:00] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:58:55] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[13:59:47] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:4c5a:11e3:52e6:a3a9) (Remote host closed the connection)
[14:08:10] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[14:12:23] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[14:13:46] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[14:16:19] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[14:18:40] *** Joins: Everything (~Everythin@37.115.210.35)
[14:26:25] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[14:28:59] *** Joins: Lycurgus (~juan@98.4.112.204)
[14:41:57] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[14:42:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:43:40] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[14:44:35] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[14:51:13] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[14:59:19] *** Quits: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf) (Remote host closed the connection)
[15:04:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:19:29] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[15:31:57] *** Quits: Jing (~textual@2604:a840:3::10f2) (Remote host closed the connection)
[15:32:26] *** Joins: Jing (~textual@2604:a840:3::10f2)
[15:39:39] <varjag> mm copilot almost works on cl
[15:39:43] <varjag> sorta
[15:40:53] <varjag> tries to sneak in occasional emacs-lisp
[15:41:38] *** Quits: Jing (~textual@2604:a840:3::10f2) (Remote host closed the connection)
[15:41:43] *** Joins: s-liao (~s-liao@101.86.103.113)
[15:42:12] *** Joins: Jing (~textual@125.105.142.242)
[15:43:02] <Jing> Hi, I'm using a proxy so that I could download from quicklisp faster. But it often prints "Connection reset by peer (error #54) during read". I was wondering that was there any way to fix this? I searched online but one of the solutions requires me to set up something during installation...
[15:43:53] <hayley> What sort of a proxy is that?
[15:46:15] <Jing> shadowsocks
[15:47:18] <hayley> How does it make downloading from Quicklisp faster? Usually proxies make things slower.
[15:48:08] <hayley> Also, I was not aware that Quicklisp could handle SOCKS proxies. From memory, it can use HTTP proxies, which requires configuration, but not SOCKS.
[15:48:50] <Jing> Configuration after installing (Quicklisp) is also possible?
[15:49:17] <hayley> I think so.
[15:49:33] <Jing> Thank you. I will check it out
[15:56:40] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[16:10:43] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[16:15:01] *** Joins: s-liao (~s-liao@101.86.103.113)
[16:21:35] *** Joins: Bike (~Bike@71.69.170.70)
[16:21:35] *** ChanServ sets mode: +o Bike
[16:26:17] <lisp123_win> How big can one file of lisp be to avoid having issues reading / writing?
[16:28:15] <pjb> How would the size of the file have an impact on reading / writing issues?
[16:29:48] <lisp123_win> No idea, just curious if this would be an issue
[16:30:41] <pjb> Well, obviously, if your file starts with an opening parenthesiss, and then contains a sequence of sexp, it cannot be so big as when reading it you would allocate all the RAM!
[16:30:45] <lisp123_win> I'm used to data corruption in other lesser platforms (MS Office)
[16:30:52] <pjb> You need to close the parenthesis before the RAM is full.
[16:31:30] <pjb> But it's the same kind of problem as if you tried to read #1237874301789789789789789798798789789798789798*1010
[16:31:42] <pjb> (there are not 1237874301789789789789789798798789789798789798 free bits in your RAM!)
[16:32:41] <lisp123_win> That makes sense!
[16:33:30] <lisp123_win> On a related topic, is there a way to save only part of a Lisp image?
[16:34:03] <lisp123_win> I'm basically trying to move away from multiple files to some degree for code / data that is not the core program (e.g. tests)
[16:37:54] *** Joins: random-nick (~random-ni@87.116.176.55)
[16:41:10] *** Joins: heisig (~heisig@131.188.6.20)
[16:42:54] <lisp123_win> hmm sounds like a bad idea, I will stick to serialisation to files
[16:53:59] *** Quits: heisig (~heisig@131.188.6.20) (Ping timeout: 268 seconds)
[16:56:41] <Nilby> I always just save the middle part of the image, because it's the juiciest. My friend just saves the outside, because it's the crunchiest.
[16:57:40] <lisp123_win> Nilby: Now I'm hungry, time to go out and get a burger
[16:59:10] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[17:10:44] *** Joins: heisig (~heisig@131.188.6.20)
[17:11:38] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:14:45] *** Joins: s-liao (~s-liao@101.86.103.113)
[17:22:58] *** Quits: heisig (~heisig@131.188.6.20) (Ping timeout: 268 seconds)
[17:23:26] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[17:23:46] *** Joins: pve (~pve@37-33-15-59.bb.dnainternet.fi)
[17:24:05] *** Joins: X-Scale` (~ARM@83.223.227.196)
[17:26:04] *** X-Scale` is now known as X-Scale
[17:33:41] *** Joins: nick3000 (~user@2001:558:6040:1b:80cd:f8bf:5142:2cb0)
[17:37:08] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[17:37:23] *** Joins: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it)
[17:41:47] *** Joins: heisig (~heisig@131.188.6.20)
[17:42:57] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[17:47:01] *** Quits: heisig (~heisig@131.188.6.20) (Ping timeout: 268 seconds)
[17:48:21] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[17:50:45] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[17:51:08] *** Joins: Bike19 (~Bike@71.69.170.70)
[17:51:08] *** ChanServ sets mode: +o Bike19
[17:51:12] *** Quits: Bike (~Bike@71.69.170.70) (Killed (NickServ (GHOST command used by Bike19)))
[17:51:15] *** Bike19 is now known as Bike
[17:53:16] <Guest74> beach: that sounds good to me. tbh, i cant find a copy of that style guide and was going off what I thought people said in the past, hence the 'i think'.
[17:56:35] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[17:58:12] *** Joins: ym (~ym@217.107.106.229)
[17:58:13] *** Joins: Lycurgus (~juan@98.4.112.204)
[18:00:37] <beach> Guest74: The LUV slides you mean?  Google "LUV slides Norvig Pitman".
[18:07:03] <Guest74> It's a non trivial find.  I think any direct link has dropped off the top search results.
[18:08:02] <Guest74> oh, maybe it's because i'm not using google anymore.
[18:08:57] <beach> http://www.norvig.com/luv-slides.pdf
[18:17:13] <Guest74> that should probably be added to some lisp website. There are so many different lisp cookbooks maybe it's already added to one of them. Last one I ran across was 403
[18:19:24] *** Joins: Alfr (~Alfr@user/alfr)
[18:19:43] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 256 seconds)
[18:23:17] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[18:25:55] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Quit: ERC (IRC client for Emacs 26.3))
[18:30:23] *** Joins: jealousmonk (~user@2804:431:e7c4:b0f3:d8c8:261b:2f95:4da3)
[18:35:46] <abrantesasf> There is also the Google Common Lisp Style Guide: https://google.github.io/styleguide/lispguide.xml
[18:39:30] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:44:44] <beach> Yeah, it's pretty good.
[18:44:53] <beach> Written by Fare mostly.
[18:47:53] <beach> But as with everything else, one should not follow rules without understanding the reason for their existence.
[18:47:54] <beach> In this case, the reason is to make life easier for the people reading and trying to understand your code (which might be yourself a few days after writing it), so it is important to follow conventions, and to make it possible to understand the code fast, without requiring the reader to remember many things simultaneously.
[18:48:12] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Goodbye :D)
[18:48:32] <Guest74> I'm starting to think developers should have apprentices that learn by writing the documentation for a product.
[18:48:39] <beach> That's why we handle the base case first, so that the reader doesn't have to worry that the base case it not handled after all the code that handles the other case.
[18:49:06] <Guest74> I've read to much documentation where the developer assumes the reader has so much knowledge of the internals.
[18:49:11] <beach> That's also why we use the "most specific construct" rule.
[18:49:15] <Guest74> s/to/too
[18:50:18] <beach> Well, there are certain things the reader must know.  If the code is that of a compiler, there is no point in reading it unless the reader knows something about how compilers work.
[18:51:33] <beach> That's another rule by the way.  One should avoid too much "noise", i.e., code or comments that could be avoided, given what a typical reader knows.
[18:52:10] <beach> Every good style guide is a product of these basic considerations.
[18:54:21] <Guest74> Perhaps it's my missing knowledge of how C is serialized, but I have constant problems with documentation of network protocols.
[18:55:30] <beach> C is serialized?
[18:57:34] *** Joins: thmprover (~user@047-042-215-236.res.spectrum.com)
[18:58:08] <Guest74> for network protocols, sometimes.  Finding out how has been my latest problem for this sane protocol.
[18:58:32] <Guest74> the documentation for the network protocol that was copy pasted from the api documentation isn't much help.
[18:58:32] <copec> beach: set-member-p => t|nil  (unless (sets:set-member-p state-prev fa-states-next) ?
[18:58:45] <beach> Guest74: C is just text.  It is already serialized.
[18:59:19] <Guest74> I'm sorry if you don't know what I mean, I'm not a programmer.
[19:00:01] <beach> copec: I don't understand your qustion.
[19:00:19] <beach> *question
[19:01:00] <copec> Instead of set-get-element, would that be acceptable style for anaphoric macro?
[19:01:51] <beach> Why is it anaphoric?  I don't see any trace of that.
[19:02:22] <copec> That's what you said the other day, about my use of it
[19:02:42] <beach> copec: SET-GET-ELEMENT is fine.  It is just that it returns either an element or a default value.
[19:02:47] <beach> Not a Boolean.
[19:03:21] <copec> If I know it returns the element or nil, would that considered acceptable style?
[19:03:24] <beach> copec: No, I said that anaphoric macros are bad in general, because they violate the rules.  I didn't refer to your code.
[19:03:47] <beach> copec: Yes.  I am not making myself clear.  Let me see if I can explain...
[19:04:25] <beach> copec: So you have (SET-GET-ELEMENT ...) and you want to know whether it returned a real element, or the default value (which happens to be NIL).
[19:04:47] <beach> Suppose you want to do something only if it is a real element, and nothing if it is the default.
[19:05:10] * copec listens intently
[19:05:41] <beach> Then you can write (let ((element (set-get-element...))) (unless (null element) ...))
[19:06:02] <beach> Because that code means "Unless the default value is returned, do..."
[19:06:41] <beach> But if you write (when element ...) you are using ELEMENT as a Boolean value, and it isn't, morally speaking.  It is an element or a default value.
[19:07:20] <beach> Does it make more sense now?
[19:08:26] <copec> Yeah, that makes sense
[19:09:12] <beach> So it's not about semantics.  The semantics of the two cases is the same.
[19:09:21] <beach> It is also not about returning T/NIL.
[19:09:39] <beach> It is all about what message you send to the person reading your code.
[19:10:34] <copec> Okay. I follow now. Thanks for the taking the time to explain it to me
[19:10:40] <beach> Sure.
[19:12:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:13:07] <copec> So stylistically, does that mean you wouldn't really use alexandria when-let?
[19:13:14] <beach> Here is another way of seeing it.  Suppose one day the person maintaining the SET library decides that the default value, instead of being NIL, is something like :NO-VALUE.  Then you should really only have to change your own code in a single place.
[19:13:33] <beach> I do not use any anaphoric macros, and that includes WHEN-LET.
[19:14:21] <beach> So, instead of (NULL ELEMENT) you really should define a function DEFAULT-VALUE-P that works just like NULL.
[19:14:53] <jackdaniel> how when-let is an anaphoric macro?
[19:14:55] <beach> So then you have (let ((element (set-get-element ...))) (unless (default-element-p element) ...))
[19:15:18] <beach> Er, maybe it isn't.
[19:15:22] <beach> But it has the same problem.
[19:15:55] <beach> That is, if used correctly, there should be no information in the body.
[19:18:16] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 268 seconds)
[19:18:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:22:02] *** Quits: Lycurgus (~juan@98.4.112.204) (Ping timeout: 256 seconds)
[19:22:25] *** Joins: Inline (~Inline@2a02:908:1252:7a80:7f0a:96b3:48d4:853a)
[19:28:31] *** Parts: kadir (~kadir@95.7.9.203) (WeeChat 3.3)
[19:30:06] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[19:32:55] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:33:28] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:37:50] *** Quits: rogersm (~rogersm@90.166.177.48) (Remote host closed the connection)
[19:38:07] *** Joins: Catie (~user@user/catie)
[19:38:53] *** Joins: rogersm (~rogersm@90.166.177.48)
[19:40:58] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[19:41:00] *** Joins: rogersm_ (~rogersm@90.166.177.48)
[19:41:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:44:49] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[19:45:42] *** Quits: rogersm_ (~rogersm@90.166.177.48) (Ping timeout: 260 seconds)
[19:54:21] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[19:58:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:09:33] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[20:10:23] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[20:11:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:11:34] *** Joins: Alfr (~Alfr@user/alfr)
[20:17:52] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:27:04] *** Joins: Skyfire (~pyon@user/pyon)
[20:29:18] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[20:29:24] *** Joins: aeth_ (~aeth@user/aeth)
[20:29:57] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[20:30:06] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[20:31:38] *** aeth_ is now known as aeth
[20:34:15] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:54:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:58:51] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[21:03:50] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[21:11:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:12:29] *** Joins: tyson2 (~user@72.142.96.152)
[21:18:46] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 256 seconds)
[21:21:14] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[21:31:35] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 264 seconds)
[21:34:33] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[21:39:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:45:03] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7f0a:96b3:48d4:853a) (Ping timeout: 268 seconds)
[21:45:40] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Ping timeout: 268 seconds)
[21:46:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:49:02] *** Joins: rogersm (~rogersm@90.166.177.48)
[21:51:18] *** Joins: rogersm_ (~rogersm@90.166.177.48)
[21:51:32] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[21:51:52] *** Quits: rogersm_ (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[21:52:19] *** Joins: rogersm (~rogersm@90.166.177.48)
[21:53:21] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[21:54:09] *** Joins: rogersm_ (~rogersm@90.166.177.48)
[21:54:18] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[21:59:14] *** Quits: rogersm_ (~rogersm@90.166.177.48) (Ping timeout: 260 seconds)
[22:01:27] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Quit: Leaving)
[22:03:27] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Quit: Leaving)
[22:09:29] *** Quits: Jing (~textual@125.105.142.242) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:20:35] *** Joins: Lycurgus (~juan@98.4.112.204)
[22:24:21] *** Quits: tyson2 (~user@72.142.96.152) (Remote host closed the connection)
[22:29:44] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:32:40] *** Joins: Jing (~textual@2604:a840:3::10f2)
[22:45:14] *** Joins: kadir (~kadir@95.7.9.203)
[22:48:42] *** Joins: Oladon (~olad@98.43.81.226)
[23:00:50] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:03:12] *** Parts: kadir (~kadir@95.7.9.203) (WeeChat 3.3)
[23:05:38] *** Joins: Oladon1 (~olad@98.43.81.226)
[23:07:00] *** Quits: ym (~ym@217.107.106.229) (Ping timeout: 256 seconds)
[23:07:03] *** Quits: Oladon (~olad@98.43.81.226) (Ping timeout: 268 seconds)
[23:18:41] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[23:20:08] *** Quits: Jing (~textual@2604:a840:3::10f2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:22:42] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ae5d:7719:e7f1:5947)
[23:29:27] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:30:23] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Ping timeout: 246 seconds)
[23:38:31] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[23:40:54] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[23:46:30] <kagevf> lisp123_win: "is there a way to save only part of a Lisp image?" maybe use separate *.asd files ... you could have a "production" one and create an image with that + "save lisp and die" or whichever implementation specific equivalent...
[23:47:55] <pjb> lisp123_win: actually, there is a way.
[23:49:51] <pjb> lisp123_win: you can use com.informatimago.common-lisp.heap.heap to copy the lisp objets you want to save into that heap, and save it.  Then you can reload it and copy the object back.  The advantage is that the heap format is independent from the implementation, so this let you transport lisp objects from one implementation to another. Or to use shared memory (or mmap) to share lisp objects across several lisp implementations.
[23:51:56] *** Quits: pve (~pve@37-33-15-59.bb.dnainternet.fi) (Quit: leaving)
[23:53:58] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 260 seconds)
[23:54:23] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[23:59:28] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
