[00:05:40] *** Quits: linuxlars (~lars@dhcp-15089.dhcp.sognenett.no) (Quit: WeeChat 2.3)
[00:07:40] <dodo> doc|work: yeah
[00:08:40] <doc|work> dodo: thanks
[00:09:57] *** Joins: serghei (~serghei@user/serghei)
[00:10:04] *** Joins: explore (uid233125@id-233125.stonehaven.irccloud.com)
[00:17:32] <BlackSalmon> GinFuyou: https://dpaste.org/n6G9 https://dpaste.org/5gFd any idea how to fix that? :/
[00:22:28] <doc|work> BlackSalmon, is your user logged in?
[00:22:53] <doc|work> you probably want to check the value of request.user at line 7
[00:23:41] <BlackSalmon> The idea is to access only to the API, so he's using auth token
[00:24:42] <doc|work> ok, still think you need to check the value being set at line 7 is what you expect
[00:26:26] <BlackSalmon> Neither breakpoint nor print doesn't work there
[00:26:40] <BlackSalmon> I don't think i can do that by shell either
[00:26:49] <doc|work> do you have logging set up?
[00:27:19] *** Quits: MarkusH (MarkusH@django/moderator/MarkusH) (Quit: ZNC - http://znc.sourceforge.net)
[00:27:26] <doc|work> if not, now's a good a time as any it seems
[00:27:29] <doc|work> *as good
[00:27:52] *** Joins: MarkusH (MarkusH@django/moderator/MarkusH)
[00:27:52] *** ChanServ sets mode: +v MarkusH
[00:28:10] <BlackSalmon> I access to the site by curl, cause i want to be API mostly
[00:28:34] <BlackSalmon> So after i pass the login and password, site generates auth token, which i'm using to authenticate
[00:29:28] <doc|work> BlackSalmon, sometimes the only way to solve a problem is see that the round block's going into the round hole and the square block's going into the square hole.
[00:30:15] <doc|work> We need to break the issue down into parts and check that individually those parts are doing what's expected when expected
[00:32:41] <BlackSalmon> let's do this then
[00:37:13] *** Magician is now known as deepy
[00:41:24] <doc|work> right, so check that the value there is what you expect
[00:55:43] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:56:02] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48)
[00:57:26] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:57:26] *** ChanServ sets mode: +v EvilDMP
[00:59:19] *** Quits: himcesjf (uid409730@id-409730.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[01:11:30] *** Joins: blackleitus (~blackleit@189.195.192.28)
[01:13:01] <blackleitus> I have a question. how can I model my ER diagram to match django models? https://imgur.com/a/PD2A4Os I want to say `users use techniques` , but each technique can be shareable across multiple users
[01:13:30] <blackleitus> technique fk to users or users fk to technique?
[01:15:47] *** Joins: GiLgAmEzH (~gilgamezh@181.47.117.104)
[01:16:31] <hylje> it's a many to many
[01:17:04] <blackleitus> from which side? technique or users?
[01:17:30] <blackleitus> hylje,
[01:18:08] *** Quits: spat (uid23050@id-23050.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[01:18:47] <hylje> a m2m doesn't necessarily have a direction
[01:22:54] <doc|work> do people keep their custom managers in the model or in a different file?
[01:25:40] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[01:29:44] *** Joins: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it)
[01:30:10] <blackleitus> hylje,  if I want to represent the following https://imgur.com/a/aXiLCYb , should it be as actor to techniques in m2m ? as class Actor(..): techniques = m2m(technique) ?
[01:30:40] <blackleitus> https://imgur.com/a/aXiLCYb
[01:35:53] <PaulWay[w]> doc|work: I keep the managers in the models.py
[01:36:01] <doc|work> PaulWay[w], great, thanks
[01:36:52] <PaulWay[w]> blackleitus: I'd say something like "a user has many techniques", and on the other side "a technique can be used by many users".
[01:37:40] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[01:39:22] <blackleitus> I want to say a user has many technique that be used by many users (Actors)
[01:39:30] <blackleitus> example a new class model as class Actor(...): fields = m2m(techniques, tools)  or inside technique
[01:39:30] <blackleitus>  
[01:39:37] <blackleitus> is this the correct way to do it?
[01:39:50] <blackleitus> PaulWay[w],
[01:40:51] <GinFuyou> That sounds like m2m, what exactly you are wondering about? Which model to put the field?
[01:41:00] <PaulWay[w]> Yes.  If you want to be pedantically correct with that sentence I'd say "A user has many techniques, and a technique can in turn be applied to many users".
[01:41:08] *** Joins: diek (~diek@187.36.4.113)
[01:41:33] <PaulWay[w]> Are you looking for the right English phrase there, or are you still working out what the relations mean?
[01:42:16] <blackleitus> PaulWay[w], I was meaning the ER diagram from the paragraph "A user has many techniques, and a technique can in turn be applied to many users".
[01:43:16] <PaulWay[w]> Because the word 'technique' here, like a style or way of doing things, is generally understood to be shared among people.
[01:44:18] <PaulWay[w]> So in a descriptive sentence, like "In Karate, each student may learn many techniques", there's no need to specify that a technique is not exclusively owned by one student.
[01:44:29] <PaulWay[w]> It's implied by the meaning of 'technique'.
[01:44:38] <blackleitus> exactly
[01:44:58] <PaulWay[w]> So it depends on whether you're trying to write a novel, or be pedantic on an ER diagram :-)
[01:44:59] <blackleitus> to in django model would turn something like ` Actor(...): fields = m2m(techniques, tools)  or inside technique` ?
[01:45:24] <PaulWay[w]> Sorry, I couldn't parse that sentence.
[01:46:53] <blackleitus> I mean on the example of https://imgur.com/a/aXiLCYb
[01:47:10] <blackleitus> if I want to model  "A user has many techniques, and a technique can in turn be applied to many users"
[01:47:46] <PaulWay[w]> Yes?  I thought you already had it.
[01:48:04] <GinFuyou> I still having feeling question is about which model will have m2m field declared
[01:48:04] <PaulWay[w]> techniques = models.ManyToManyField('Technique')
[01:50:51] <PaulWay[w]> That may be true.  It doesn't matter, but choose the one that makes sense when you say it :-)
[01:51:03] <blackleitus> +GinFuyou, yes, exactly that was the original question
[01:51:17] <blackleitus> who will hold the m2m ?
[01:51:28] <GinFuyou> well, it doesn't matter
[01:51:42] <GinFuyou> since it's "symmetric" relatioship
[01:52:29] <GinFuyou> queries may slightly change, so for clarity I'd put to model from which you will more often query the other
[01:52:51] <GinFuyou> Otherwise, iirc, there is no difference
[01:53:41] *** Quits: GiLgAmEzH (~gilgamezh@181.47.117.104) (Ping timeout: 256 seconds)
[01:54:58] *** Joins: GiLgAmEzH (~gilgamezh@181.47.117.104)
[01:54:58] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[01:55:32] <PaulWay[w]> Yep, and you can name the other side nicely with the `related_name` option on ManyToManyField - e.g. "techniques = models.ManyToManyField('Techniques', related_name='practitioners')"
[01:55:38] <PaulWay[w]> (Choose your own related name :-)
[01:55:48] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[01:55:57] *** Quits: serghei (~serghei@user/serghei) (Ping timeout: 256 seconds)
[01:56:20] <blackleitus> is okay to duplicate tables example. technique , and subtechniques instead of a single table
[01:56:48] <GinFuyou> That one depends
[01:57:11] <blackleitus> I think it's easy to fidn a box that contains all techniques , and subtechnique tags and everything in a single box
[01:57:16] <blackleitus> find*
[01:58:05] <blackleitus> what does it depend on?
[01:58:27] <PaulWay[w]> Can you describe the relationship a bit more?
[01:58:50] <GinFuyou> technique can have ForeignKey on self, meaning it's a subtechnique. It makes it a single table, but now it's a tree like structure that can have own complications
[01:59:15] <PaulWay[w]> Whereas you might have a 'TechniqueSpeciality' model for the 'sub'techniques.
[01:59:52] <blackleitus> let's focus on only technique table and the new one. technique , and actors (users) . actors can learn multiple techniques that can be later used by another actors
[02:00:27] <blackleitus> as you said above `"A user has many techniques, and a technique can in turn be applied to many users".`
[02:00:41] <PaulWay[w]> YEp.
[02:00:46] <PaulWay[w]> Good so far.
[02:01:22] <blackleitus> this case it's a m2m from actors to technique to give more contextual
[02:02:29] <blackleitus> the second question. is it correct to have 2 duplicate tables as technique and subtechnique in order to only contains parent information , and child information instead of everything in a single table?
[02:02:58] <PaulWay[w]> It's one way.  It sounds like a good way.
[02:03:08] <blackleitus> 2 tables?
[02:03:17] <PaulWay[w]> Yes, I'd say use two tables.
[02:04:10] <GinFuyou> Though, if subtechniques can be independently related to users it's new m2m relation
[02:04:44] <PaulWay[w]> It'll still give you the ability to list all an actor's subtechniques, by iterating through their techniques or using Subtechnique.objects.filter(technique=actor.technique) (where actor is an instance of Actor).
[02:05:05] <blackleitus> can I grab them thought technique ?
[02:05:50] <GinFuyou> Yes, if having a techniques equals having all subtechniques
[02:05:57] *** Joins: serghei (~serghei@user/serghei)
[02:06:42] <blackleitus>  Subtechnique.objects.filter(technique=actor.technique) < this can be to grab techniques in the right format to match to each actor?
[02:06:43] <PaulWay[w]> Yep.  actor.techniques.all() - each technique in that set will have a list of subtechniques.
[02:06:59] <PaulWay[w]> blackleitus: well, you have to understand the relationship there.
[02:07:10] <PaulWay[w]> Don't use it without understanding it.
[02:08:39] *** Quits: GiLgAmEzH (~gilgamezh@181.47.117.104) (Ping timeout: 265 seconds)
[02:09:32] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 268 seconds)
[02:11:43] <blackleitus> in order to fill actor techniques/subtechniques . is possible to insert/get data only through technique instead of using subtechniques in actor?
[02:12:11] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[02:13:56] <PaulWay[w]> blackleitus: yes.  But I think the best way for you to get used to this is to implement it and work with it.
[02:14:34] *** Quits: elena (~elena@202-153-212-80.ca99d4.syd.static.aussiebb.net) (Quit: Client closed)
[02:18:40] <blackleitus> `T1595, T1505.003 , T1041` example this will be linked to actor . how will I filter from only technique field m2m
[02:19:52] *** Quits: explore (uid233125@id-233125.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[02:24:04] *** Quits: BlackSalmon (~BlackSalm@user-5-173-148-6.play-internet.pl) (Ping timeout: 246 seconds)
[02:28:59] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[02:34:02] *** Joins: cliluw (~cliluw@ec2-34-215-251-72.us-west-2.compute.amazonaws.com)
[02:36:12] *** Quits: anas (~anas@196.224.51.199) (Ping timeout: 265 seconds)
[02:36:24] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[02:40:37] *** Quits: cliluw (~cliluw@ec2-34-215-251-72.us-west-2.compute.amazonaws.com) (Quit: Leaving)
[02:43:01] <PaulWay[w]> What in the boiling hells of Shiva are those, blackleitus?
[02:45:05] <blackleitus> technique table , and subtechnique table
[02:45:34] <blackleitus> alpha.number means child, before dot means parent
[02:45:51] <PaulWay[w]> So you don't like nice names?
[02:46:00] <PaulWay[w]> Or are these super secret names? :-)
[02:48:22] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:49:08] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[02:49:08] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48) (*.net *.split)
[02:49:08] *** Quits: pycode (~pycode@2001:b07:5d28:551:55a8:758a:ed3c:7d94) (*.net *.split)
[02:49:08] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (*.net *.split)
[02:49:08] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (*.net *.split)
[02:49:08] *** Quits: thiras (~thiras@user/thiras) (*.net *.split)
[02:49:08] *** Quits: Kalov (~Thunderbi@179.56.117.154) (*.net *.split)
[02:49:08] *** Quits: tbcr (~tbcr@user/tbcr) (*.net *.split)
[02:49:08] *** Quits: Snorlax (~Snorlax@2a03:b0c0:2:f0::363:a001) (*.net *.split)
[02:49:08] *** Quits: wallbroken (wallbroken@user/wallbroken) (*.net *.split)
[02:49:08] *** Quits: dez (uid92154@user/dez) (*.net *.split)
[02:49:08] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[02:49:08] *** Quits: daniel2 (daniel@user/daniel2) (*.net *.split)
[02:49:08] *** Quits: schinckel_ (uid38120@id-38120.charlton.irccloud.com) (*.net *.split)
[02:49:08] *** Quits: amvara (~amvara@57.red-83-40-223.dynamicip.rima-tde.net) (*.net *.split)
[02:49:09] *** Quits: rwb (~augh@theguntretort.com) (*.net *.split)
[02:49:09] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[02:49:09] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[02:49:09] *** Quits: serghei (~serghei@user/serghei) (*.net *.split)
[02:49:09] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (*.net *.split)
[02:49:09] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (*.net *.split)
[02:49:09] *** Quits: flying_sausages (~flying_sa@user/flying-sausages/x-2113186) (*.net *.split)
[02:49:09] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[02:49:09] *** Quits: mxp (~mxp@82.98.30.69) (*.net *.split)
[02:49:09] *** Quits: enkrypt (~enkrypt@user/enkrypt) (*.net *.split)
[02:49:09] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[02:49:09] *** Quits: jgee (~jgee@186.80.49.20) (*.net *.split)
[02:49:09] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (*.net *.split)
[02:49:09] *** Quits: normic (~normic@p4fc3009e.dip0.t-ipconnect.de) (*.net *.split)
[02:49:10] *** Quits: maloik_ (~maloik@189.201.147.213) (*.net *.split)
[02:49:10] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (*.net *.split)
[02:49:10] *** Quits: t0mab (~t0mab@stakhanov.u-strasbg.fr) (*.net *.split)
[02:49:10] *** Quits: marmalodak (~marmaloda@50-250-206-146-static.hfc.comcastbusiness.net) (*.net *.split)
[02:49:10] *** Quits: justK (~justache@user/justache) (*.net *.split)
[02:49:10] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (*.net *.split)
[02:49:10] *** Quits: felixx (felixx@django/moderator/felixx) (*.net *.split)
[02:49:10] *** Quits: antoine_ (~antoine@pluton.galexy.me) (*.net *.split)
[02:49:10] *** Quits: captain_morgan (~morgan@oit.cloud) (*.net *.split)
[02:49:10] *** Quits: doc|work (~doc@user/doc) (*.net *.split)
[02:49:10] *** Quits: clawh_ (~clawh@185.244.214.60) (*.net *.split)
[02:49:10] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (*.net *.split)
[02:49:10] *** Quits: x_kuru (~xkuru@user/xkuru) (*.net *.split)
[02:49:10] *** Quits: wintrmute (~wintrmute@bit.pappanaka.com) (*.net *.split)
[02:49:11] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[02:49:11] *** Quits: Freneticks (~Frenetick@gw.ptr-80-238-209-252.customer.ch.netstream.com) (*.net *.split)
[02:49:11] *** Quits: crowbar (~crowbar@user/crowbar) (*.net *.split)
[02:49:11] *** Quits: Trieste (T@user/pilgrim) (*.net *.split)
[02:49:11] *** Quits: jvalleroy (~quassel@user/jvalleroy) (*.net *.split)
[02:49:11] *** Quits: lod (~lod@cyber-anlage.de) (*.net *.split)
[02:49:11] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (*.net *.split)
[02:49:11] *** Quits: TranquilEcho (~grom@user/tranquilecho) (*.net *.split)
[02:49:11] *** Quits: gcbirzan (~gcbirzan@user/gcbirzan) (*.net *.split)
[02:49:11] *** Quits: killjoy (~nameless@user/killjoy) (*.net *.split)
[02:49:12] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (*.net *.split)
[02:49:12] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (*.net *.split)
[02:49:12] *** Quits: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it) (*.net *.split)
[02:49:12] *** Quits: MarkusH (MarkusH@django/moderator/MarkusH) (*.net *.split)
[02:49:12] *** Quits: jug (~jug@user/jug) (*.net *.split)
[02:49:12] *** Quits: theorangeone (~quassel@host86-191-183-30.range86-191.btcentralplus.com) (*.net *.split)
[02:49:12] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[02:49:12] *** Quits: brownan (~brownan@136.56.137.143) (*.net *.split)
[02:49:12] *** Quits: doc (~doc@user/doc) (*.net *.split)
[02:49:12] *** Quits: ktosiek (~ktosiek@li1810-126.members.linode.com) (*.net *.split)
[02:49:12] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[02:49:12] *** Quits: TakinOver (~TakinOver@47.150.206.35) (*.net *.split)
[02:49:12] *** Quits: Batzy (~Batzy@user/batzy) (*.net *.split)
[02:49:12] *** Quits: zigo (~quassel@shade.infomaniak.ch) (*.net *.split)
[02:49:12] *** Quits: kokotchY_ (~kokotchY@42.ip-79-137-37.eu) (*.net *.split)
[02:49:13] *** Quits: ST47 (~ST47@user/st47) (*.net *.split)
[02:49:13] *** Quits: apollo13 (apollo13@django/moderator/apollo13) (*.net *.split)
[02:49:13] *** Quits: KramerC (kramer@user/kramerc) (*.net *.split)
[02:49:13] *** Quits: ChOcO-Bn (~choco@user/choco-bn) (*.net *.split)
[02:49:13] *** Quits: unixbeard (~ironbeard@neuro.mancer.org) (*.net *.split)
[02:49:13] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (*.net *.split)
[02:49:13] *** Quits: blackleitus (~blackleit@189.195.192.28) (*.net *.split)
[02:49:13] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (*.net *.split)
[02:49:13] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (*.net *.split)
[02:49:13] *** Quits: Alan (~alan@user/alan) (*.net *.split)
[02:49:14] *** Quits: zBeeble (~zBeeble@repeat.dclg.ca) (*.net *.split)
[02:49:14] *** Quits: rje (~rje@50.54.137.153) (*.net *.split)
[02:49:14] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[02:49:14] *** Quits: mbryantms (~mbryantms@1612740-v109.1116-static.plfdilaa.metronetinc.net) (*.net *.split)
[02:49:14] *** Quits: Rikem (~mike@user/rikem) (*.net *.split)
[02:49:14] *** Quits: tbotie (tbot@huzlerz.vip) (*.net *.split)
[02:49:14] *** Quits: Catatonic (~Catatonic@ariel.whatbox.ca) (*.net *.split)
[02:49:14] *** Quits: lazzurs (~lazzurs@user/lazzurs) (*.net *.split)
[02:49:14] *** Quits: neteffect (~neteffect@47.201.17.61) (*.net *.split)
[02:49:14] *** Quits: oblikoamorale (~n@user/oblikoamorale) (*.net *.split)
[02:49:14] *** Quits: ops (~ops@user/echelon) (*.net *.split)
[02:49:14] *** Quits: jasonbraganza (jasonbraga@user/jasonbraganza) (*.net *.split)
[02:49:14] *** Quits: ptim (uid505558@id-505558.charlton.irccloud.com) (*.net *.split)
[02:49:14] *** Quits: sylvain (uid505419@id-505419.tooting.irccloud.com) (*.net *.split)
[02:49:14] *** Quits: ChrisWarrick (kwpolska@user/kwpolska) (*.net *.split)
[02:49:14] *** Quits: darxun (sid504814@id-504814.tinside.irccloud.com) (*.net *.split)
[02:49:14] *** Quits: znpy (~znpy@user/znpy) (*.net *.split)
[02:49:14] *** Quits: saschi (~saschi@user/saschi) (*.net *.split)
[02:49:15] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (*.net *.split)
[02:49:15] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (*.net *.split)
[02:49:15] *** Quits: zkanda (~zkanda@box.makean.art) (*.net *.split)
[02:49:15] *** Quits: moldy (~rene@user/moldy) (*.net *.split)
[02:49:15] *** Quits: andrewgodwin (sid23792@django/member/andrewgodwin) (*.net *.split)
[02:49:15] *** Quits: hypera1r (~hyperair@49.128.61.210) (*.net *.split)
[02:49:15] *** Quits: askolsam (~askolsam@kamikaze.kaaosunlimited.fi) (*.net *.split)
[02:49:15] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (*.net *.split)
[02:49:15] *** Quits: fleabag (~sirpengi@li587-65.members.linode.com) (*.net *.split)
[02:49:15] *** Quits: kanzure (~kanzure@user/kanzure) (*.net *.split)
[02:49:15] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[02:49:15] *** Quits: benjaoming (~benjaomin@37.139.19.237) (*.net *.split)
[02:49:15] *** Quits: carom (~carom@143.198.135.106) (*.net *.split)
[02:49:15] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[02:49:15] *** Quits: virtualsid (~virtual@dolt.mindless.co.uk) (*.net *.split)
[02:49:15] *** Quits: Lartza (lartza@user/lartza) (*.net *.split)
[02:49:15] *** Quits: _janus (~janus@blotter.ld-linux.so) (*.net *.split)
[02:49:16] *** Quits: cdcd (~cdcd@20.51.105.67) (*.net *.split)
[02:49:16] *** Quits: BEC001AF[m] (~kreatemor@2001:470:69fc:105::a0f) (*.net *.split)
[02:49:16] *** Quits: SpecialK (kg289@django/moderator/doismellburning) (*.net *.split)
[02:49:16] *** Quits: zamba (~marius@5.226.162.54) (*.net *.split)
[02:49:16] *** Quits: hylje (~hylje@ponie.fi) (*.net *.split)
[02:49:16] *** Quits: noyb (~noyb@user/noyb) (*.net *.split)
[02:49:16] *** Quits: dodo (~dodo@user/dodo) (*.net *.split)
[02:49:16] *** Quits: dongcarl (~dongcarl@96.224.58.144) (*.net *.split)
[02:49:16] *** Quits: mboehn (mathias@hh1.nuxis.org) (*.net *.split)
[02:49:17] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (*.net *.split)
[02:49:17] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[02:49:17] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[02:49:17] *** Quits: jrabbit (~jack@user/jrabbit) (*.net *.split)
[02:49:17] *** Quits: drjp (jeanpaul@112-54-174-82.ftth.glasoperator.nl) (*.net *.split)
[02:49:17] *** Quits: dang`r`us (~eismann@pg.afoo.at) (*.net *.split)
[02:49:17] *** Quits: Vohveli (vohveli@user/vohveli) (*.net *.split)
[02:49:17] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[02:49:17] *** Quits: jor (~jor@jor.link) (*.net *.split)
[02:49:17] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[02:49:17] *** Quits: FunkyBob (~curtis@vhost3.tinbrain.net) (*.net *.split)
[02:49:17] *** Quits: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net) (*.net *.split)
[02:49:17] *** Quits: abyss (~robbins@user/robbins) (*.net *.split)
[02:49:17] *** Quits: matthewwilkes (sid500242@id-500242.highgate.irccloud.com) (*.net *.split)
[02:49:18] *** Quits: Wooble (~Wooble@107.170.27.240) (*.net *.split)
[02:49:18] *** Quits: Kipe_ (kipe@user/kipe/x-8442575) (*.net *.split)
[02:49:18] *** Quits: optiz0r_ (~quassel@universe.sihnon.net) (*.net *.split)
[02:49:18] *** Quits: Grauwolf (~grauwolf@user/grauwolf) (*.net *.split)
[02:49:18] *** Quits: wez (~wyoung@about/web/wez) (*.net *.split)
[02:49:18] *** Quits: mattmcc (~matt@li807-33.members.linode.com) (*.net *.split)
[02:49:18] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (*.net *.split)
[02:49:18] *** Quits: kenbolton (~kenbolton@2001:470:69fc:105::2d24) (*.net *.split)
[02:49:18] *** Quits: mambang[m] (~mambang@user/mambang) (*.net *.split)
[02:49:18] *** Quits: mattcen[mx][m] (~mattcen@2001:470:69fc:105::5d1) (*.net *.split)
[02:49:18] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (*.net *.split)
[02:49:18] *** Quits: DLange (~DLange@about/linux/staff/DLange) (*.net *.split)
[02:49:18] *** Quits: rdrg109 (~rdrg109@51.195.232.80) (*.net *.split)
[02:49:18] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (*.net *.split)
[02:49:18] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (*.net *.split)
[02:49:18] *** Quits: Xavierdarkness (~xavierdar@user/xavierdarkness) (*.net *.split)
[02:49:18] *** Quits: jamesmartinez (~keinbock@37.44.247.165) (*.net *.split)
[02:49:18] *** Quits: bin4ry (~bin4ry@128.199.135.148) (*.net *.split)
[02:49:18] *** Quits: HorusHorrendus (sid21675@id-21675.tinside.irccloud.com) (*.net *.split)
[02:49:18] *** Quits: gjm (sid142836@apache/committer/gjm) (*.net *.split)
[02:49:18] *** Quits: bjb (~bjb@sourcerer.ca) (*.net *.split)
[02:49:19] *** Quits: WayToDoor (~WayToDoor@user/waytodoor) (*.net *.split)
[02:49:19] *** Quits: Knyght (sid365271@id-365271.brockwell.irccloud.com) (*.net *.split)
[02:49:19] *** Quits: Xeago (~Xeago@user/xeago) (*.net *.split)
[02:49:19] *** Quits: urth (~urth@geertswei.nl) (*.net *.split)
[02:49:19] *** Quits: marienz (~marienz@libera/staff/marienz) (*.net *.split)
[02:49:19] *** Quits: Mindi (~Mindi@mindinet.org) (*.net *.split)
[02:49:19] *** Quits: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) (*.net *.split)
[02:49:19] *** Quits: pjs (~pjs@user/pjs) (*.net *.split)
[02:49:19] *** Quits: tobias1 (sid15532@django/member/tobias1) (*.net *.split)
[02:49:19] *** Quits: SallyAhaj (~sallyahaj@user/sallyahaj) (*.net *.split)
[02:49:19] *** Quits: tubogram (~tubogram@user/tubogram) (*.net *.split)
[02:49:19] *** Quits: rtpg (sid443069@id-443069.charlton.irccloud.com) (*.net *.split)
[02:49:19] *** Quits: jjhoo (jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi) (*.net *.split)
[02:49:19] *** Quits: serafeim (serafeim@thunix.net) (*.net *.split)
[02:49:19] *** Quits: beanzilla (beanzilla@user/beanzilla) (*.net *.split)
[02:49:20] *** Quits: rixx (~rixx@cutebit.de) (*.net *.split)
[02:49:20] *** Quits: paddez (~paddez@2a01:4f8:211:894::2) (*.net *.split)
[02:49:20] *** Quits: vlt (~dm@157.230.21.14) (*.net *.split)
[02:49:20] *** Quits: crs (~f@user/crs) (*.net *.split)
[02:49:20] *** Quits: derfj (sid19429@id-19429.tinside.irccloud.com) (*.net *.split)
[02:49:20] *** Quits: debnet (sid330295@python/afpy/debnet) (*.net *.split)
[02:49:20] *** Quits: pierrepaul (uid504261@id-504261.highgate.irccloud.com) (*.net *.split)
[02:49:20] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[02:49:20] *** Quits: javawolfpack (~javawolfp@c-73-116-78-73.hsd1.ca.comcast.net) (*.net *.split)
[02:49:20] *** Quits: Damianz (~damian@user/damianz) (*.net *.split)
[02:49:20] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (*.net *.split)
[02:49:20] *** Quits: tone0 (~tone@071-011-252-111.res.spectrum.com) (*.net *.split)
[02:49:20] *** Quits: eck0 (~eck0@047-007-119-133.res.spectrum.com) (*.net *.split)
[02:49:20] *** Quits: syberspace (~syberspac@xiaoxiao.anvor.at) (*.net *.split)
[02:49:20] *** Quits: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com) (*.net *.split)
[02:49:20] *** Quits: adamchainz (~adamj@51.15.34.126) (*.net *.split)
[02:49:21] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[02:49:21] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[02:49:21] *** Quits: b-rex (~b@v.dropswitch.net) (*.net *.split)
[02:49:21] *** Quits: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com) (*.net *.split)
[02:49:21] *** Quits: klotzhauer (~klotzhaue@gibtesnochklopapier.de) (*.net *.split)
[02:49:21] *** Quits: mfisher (mfisher@shell.themfishers.com) (*.net *.split)
[02:49:21] *** Quits: jezdez (sid124@django/member/jezdez) (*.net *.split)
[02:49:21] *** Quits: fgau (~fgau@mail.berliner-termindienst.de) (*.net *.split)
[02:49:21] *** Quits: joepferguson (sid68527@charlton.irccloud.com) (*.net *.split)
[02:49:21] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[02:49:49] *** Joins: ChanServ (ChanServ@services.libera.chat)
[02:49:49] *** iridium.libera.chat sets mode: +o ChanServ
[02:50:08] *** Joins: znpy (~znpy@user/znpy)
[02:50:08] *** Joins: jasonbraganza (jasonbraga@user/jasonbraganza)
[02:50:08] *** Joins: ptim (uid505558@id-505558.charlton.irccloud.com)
[02:50:08] *** Joins: sylvain (uid505419@id-505419.tooting.irccloud.com)
[02:50:08] *** Joins: ChrisWarrick (kwpolska@user/kwpolska)
[02:50:08] *** Joins: hypera1r (~hyperair@49.128.61.210)
[02:50:08] *** Joins: darxun (sid504814@id-504814.tinside.irccloud.com)
[02:50:08] *** Joins: saschi (~saschi@user/saschi)
[02:50:08] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[02:50:08] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[02:50:08] *** Joins: fleabag (~sirpengi@li587-65.members.linode.com)
[02:50:08] *** Joins: zkanda (~zkanda@box.makean.art)
[02:50:08] *** Joins: moldy (~rene@user/moldy)
[02:50:08] *** Joins: andrewgodwin (sid23792@django/member/andrewgodwin)
[02:50:08] *** Joins: askolsam (~askolsam@kamikaze.kaaosunlimited.fi)
[02:50:08] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[02:50:08] *** Joins: kanzure (~kanzure@user/kanzure)
[02:50:49] *** Joins: ST47 (~ST47@user/st47)
[02:50:49] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[02:50:49] *** Joins: KramerC (kramer@user/kramerc)
[02:50:49] *** Joins: ChOcO-Bn (~choco@user/choco-bn)
[02:50:49] *** Joins: unixbeard (~ironbeard@neuro.mancer.org)
[02:50:49] *** iridium.libera.chat sets mode: +v apollo13
[02:51:27] *** Joins: eck0 (~eck0@047-007-119-133.res.spectrum.com)
[02:51:27] *** Joins: javawolfpack (~javawolfp@c-73-116-78-73.hsd1.ca.comcast.net)
[02:51:27] *** Joins: pierrepaul (uid504261@id-504261.highgate.irccloud.com)
[02:51:27] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[02:51:27] *** Joins: Damianz (~damian@user/damianz)
[02:51:27] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[02:51:27] *** Joins: tone0 (~tone@071-011-252-111.res.spectrum.com)
[02:51:27] *** Joins: syberspace (~syberspac@xiaoxiao.anvor.at)
[02:51:27] *** Joins: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com)
[02:51:27] *** Joins: adamchainz (~adamj@51.15.34.126)
[02:51:27] *** Joins: wyre (~wyre@user/wyre)
[02:51:27] *** Joins: shodan45 (~quassel@107.161.22.155)
[02:51:27] *** Joins: b-rex (~b@v.dropswitch.net)
[02:51:27] *** Joins: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com)
[02:51:27] *** Joins: klotzhauer (~klotzhaue@gibtesnochklopapier.de)
[02:51:27] *** Joins: mfisher (mfisher@shell.themfishers.com)
[02:51:27] *** Joins: jezdez (sid124@django/member/jezdez)
[02:51:27] *** Joins: fgau (~fgau@mail.berliner-termindienst.de)
[02:51:27] *** Joins: joepferguson (sid68527@charlton.irccloud.com)
[02:51:27] *** Joins: Byteflux (~byte@byteflux.net)
[02:51:32] *** Joins: serghei (~serghei@user/serghei)
[02:51:32] *** Joins: doc|work (~doc@user/doc)
[02:51:32] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[02:51:32] *** Joins: clawh_ (~clawh@185.244.214.60)
[02:51:32] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[02:51:32] *** Joins: mjh4386 (~mjh4386@165.22.53.231)
[02:51:32] *** Joins: flying_sausages (~flying_sa@user/flying-sausages/x-2113186)
[02:51:32] *** Joins: flynn (~mcbloch@user/flynn)
[02:51:32] *** Joins: mxp (~mxp@82.98.30.69)
[02:51:32] *** Joins: x_kuru (~xkuru@user/xkuru)
[02:51:32] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[02:51:32] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[02:51:32] *** Joins: jgee (~jgee@186.80.49.20)
[02:51:32] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:51:32] *** Joins: normic (~normic@p4fc3009e.dip0.t-ipconnect.de)
[02:51:32] *** Joins: antoine_ (~antoine@pluton.galexy.me)
[02:51:32] *** Joins: maloik_ (~maloik@189.201.147.213)
[02:51:32] *** Joins: wintrmute (~wintrmute@bit.pappanaka.com)
[02:51:32] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[02:51:32] *** Joins: t0mab (~t0mab@stakhanov.u-strasbg.fr)
[02:51:32] *** Joins: marmalodak (~marmaloda@50-250-206-146-static.hfc.comcastbusiness.net)
[02:51:32] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[02:51:32] *** Joins: Freneticks (~Frenetick@gw.ptr-80-238-209-252.customer.ch.netstream.com)
[02:51:32] *** Joins: felixx (felixx@django/moderator/felixx)
[02:51:32] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[02:51:32] *** Joins: crowbar (~crowbar@user/crowbar)
[02:51:32] *** Joins: Trieste (T@user/pilgrim)
[02:51:32] *** Joins: jvalleroy (~quassel@user/jvalleroy)
[02:51:32] *** Joins: lod (~lod@cyber-anlage.de)
[02:51:32] *** Joins: captain_morgan (~morgan@oit.cloud)
[02:51:32] *** iridium.libera.chat sets mode: +v felixx
[02:52:00] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[02:52:00] *** Joins: blackleitus (~blackleit@189.195.192.28)
[02:52:00] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[02:52:00] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[02:52:00] *** Joins: Alan (~alan@user/alan)
[02:52:00] *** Joins: zBeeble (~zBeeble@repeat.dclg.ca)
[02:52:00] *** Joins: rje (~rje@50.54.137.153)
[02:52:00] *** Joins: deepy (deepy@user/deepy)
[02:52:00] *** Joins: neteffect (~neteffect@47.201.17.61)
[02:52:00] *** Joins: mbryantms (~mbryantms@1612740-v109.1116-static.plfdilaa.metronetinc.net)
[02:52:00] *** Joins: Rikem (~mike@user/rikem)
[02:52:00] *** Joins: tbotie (tbot@huzlerz.vip)
[02:52:00] *** Joins: Catatonic (~Catatonic@ariel.whatbox.ca)
[02:52:00] *** Joins: lazzurs (~lazzurs@user/lazzurs)
[02:52:00] *** Joins: oblikoamorale (~n@user/oblikoamorale)
[02:52:00] *** Joins: ops (~ops@user/echelon)
[02:52:12] *** Joins: Snorlax (~Snorlax@2a03:b0c0:2:f0::363:a001)
[02:52:12] *** Joins: wallbroken (wallbroken@user/wallbroken)
[02:52:12] *** Joins: bjs (sid190364@user/bjs)
[02:52:12] *** Joins: dez (uid92154@user/dez)
[02:52:12] *** Joins: daniel2 (daniel@user/daniel2)
[02:52:12] *** Joins: schinckel_ (uid38120@id-38120.charlton.irccloud.com)
[02:52:12] *** Joins: amvara (~amvara@57.red-83-40-223.dynamicip.rima-tde.net)
[02:52:12] *** Joins: rwb (~augh@theguntretort.com)
[02:52:12] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[02:52:35] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[02:52:35] *** Joins: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net)
[02:52:35] *** Joins: jrabbit (~jack@user/jrabbit)
[02:52:35] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[02:52:35] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[02:52:35] *** Joins: drjp (jeanpaul@112-54-174-82.ftth.glasoperator.nl)
[02:52:35] *** Joins: dang`r`us (~eismann@pg.afoo.at)
[02:52:35] *** Joins: Vohveli (vohveli@user/vohveli)
[02:52:35] *** Joins: strudl (~strudl@user/strudl)
[02:52:35] *** Joins: jor (~jor@jor.link)
[02:52:35] *** Joins: dlam (~dlam@dlam.me)
[02:52:35] *** Joins: FunkyBob (~curtis@vhost3.tinbrain.net)
[02:52:35] *** Joins: abyss (~robbins@user/robbins)
[02:52:35] *** Joins: matthewwilkes (sid500242@id-500242.highgate.irccloud.com)
[02:52:35] *** Joins: Wooble (~Wooble@107.170.27.240)
[02:52:35] *** Joins: Kipe_ (kipe@user/kipe/x-8442575)
[02:52:35] *** Joins: optiz0r_ (~quassel@universe.sihnon.net)
[02:52:35] *** Joins: Grauwolf (~grauwolf@user/grauwolf)
[02:52:35] *** Joins: mattmcc (~matt@li807-33.members.linode.com)
[02:52:35] *** Joins: wez (~wyoung@about/web/wez)
[02:52:44] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[02:52:44] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[02:52:44] *** Joins: gcbirzan (~gcbirzan@user/gcbirzan)
[02:52:44] *** Joins: killjoy (~nameless@user/killjoy)
[02:52:44] *** Joins: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl)
[02:52:44] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[02:53:28] *** Joins: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it)
[02:53:28] *** Joins: MarkusH (MarkusH@django/moderator/MarkusH)
[02:53:28] *** Joins: jug (~jug@user/jug)
[02:53:28] *** Joins: theorangeone (~quassel@host86-191-183-30.range86-191.btcentralplus.com)
[02:53:28] *** Joins: deniska (~denis@user/deniska)
[02:53:28] *** Joins: brownan (~brownan@136.56.137.143)
[02:53:28] *** Joins: doc (~doc@user/doc)
[02:53:28] *** Joins: chronon (~chronon@user/chronon)
[02:53:28] *** Joins: ktosiek (~ktosiek@li1810-126.members.linode.com)
[02:53:28] *** Joins: TakinOver (~TakinOver@47.150.206.35)
[02:53:28] *** Joins: Batzy (~Batzy@user/batzy)
[02:53:28] *** Joins: zigo (~quassel@shade.infomaniak.ch)
[02:53:28] *** Joins: kokotchY_ (~kokotchY@42.ip-79-137-37.eu)
[02:53:28] *** iridium.libera.chat sets mode: +v MarkusH
[02:53:29] *** Joins: noyb (~noyb@user/noyb)
[02:53:29] *** Joins: BEC001AF[m] (~kreatemor@2001:470:69fc:105::a0f)
[02:53:29] *** Joins: SpecialK (kg289@django/moderator/doismellburning)
[02:53:29] *** Joins: zamba (~marius@5.226.162.54)
[02:53:29] *** Joins: hylje (~hylje@ponie.fi)
[02:53:29] *** Joins: dodo (~dodo@user/dodo)
[02:53:29] *** Joins: dongcarl (~dongcarl@96.224.58.144)
[02:53:29] *** Joins: mboehn (mathias@hh1.nuxis.org)
[02:53:29] *** iridium.libera.chat sets mode: +v SpecialK
[02:53:36] *** Joins: derfj (sid19429@id-19429.tinside.irccloud.com)
[02:53:36] *** Joins: rixx (~rixx@cutebit.de)
[02:53:36] *** Joins: tubogram (~tubogram@user/tubogram)
[02:53:36] *** Joins: crs (~f@user/crs)
[02:53:36] *** Joins: serafeim (serafeim@thunix.net)
[02:53:36] *** Joins: rtpg (sid443069@id-443069.charlton.irccloud.com)
[02:53:36] *** Joins: jjhoo (jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi)
[02:53:36] *** Joins: beanzilla (beanzilla@user/beanzilla)
[02:53:36] *** Joins: paddez (~paddez@2a01:4f8:211:894::2)
[02:53:36] *** Joins: debnet (sid330295@python/afpy/debnet)
[02:53:36] *** Joins: vlt (~dm@157.230.21.14)
[02:53:38] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[02:53:38] *** Joins: Xavierdarkness (~xavierdar@user/xavierdarkness)
[02:53:38] *** Joins: Xeago (~Xeago@user/xeago)
[02:53:38] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[02:53:38] *** Joins: mambang[m] (~mambang@user/mambang)
[02:53:38] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[02:53:38] *** Joins: kenbolton (~kenbolton@2001:470:69fc:105::2d24)
[02:53:38] *** Joins: mattcen[mx][m] (~mattcen@2001:470:69fc:105::5d1)
[02:53:38] *** Joins: DLange (~DLange@about/linux/staff/DLange)
[02:53:38] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[02:53:38] *** Joins: jamesmartinez (~keinbock@37.44.247.165)
[02:53:38] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[02:53:38] *** Joins: bin4ry (~bin4ry@128.199.135.148)
[02:53:38] *** Joins: gjm (sid142836@apache/committer/gjm)
[02:53:38] *** Joins: HorusHorrendus (sid21675@id-21675.tinside.irccloud.com)
[02:53:38] *** Joins: bjb (~bjb@sourcerer.ca)
[02:53:38] *** Joins: marienz (~marienz@libera/staff/marienz)
[02:53:38] *** Joins: WayToDoor (~WayToDoor@user/waytodoor)
[02:53:38] *** Joins: Knyght (sid365271@id-365271.brockwell.irccloud.com)
[02:53:38] *** Joins: urth (~urth@geertswei.nl)
[02:53:38] *** Joins: Mindi (~Mindi@mindinet.org)
[02:53:38] *** Joins: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d)
[02:53:38] *** Joins: pjs (~pjs@user/pjs)
[02:53:38] *** Joins: SallyAhaj (~sallyahaj@user/sallyahaj)
[02:54:21] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[02:54:21] *** Joins: benjaoming (~benjaomin@37.139.19.237)
[02:54:21] *** Joins: carom (~carom@143.198.135.106)
[02:54:21] *** Joins: koolazer (~koo@user/koolazer)
[02:54:24] *** Joins: virtualsid (~virtual@dolt.mindless.co.uk)
[02:54:24] *** Joins: Lartza (lartza@user/lartza)
[02:54:24] *** Joins: _janus (~janus@blotter.ld-linux.so)
[02:54:24] *** Joins: cdcd (~cdcd@20.51.105.67)
[02:54:52] *** Quits: koolazer (~koo@user/koolazer) (Max SendQ exceeded)
[02:55:03] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[02:55:03] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48)
[02:55:03] *** Joins: pycode (~pycode@2001:b07:5d28:551:55a8:758a:ed3c:7d94)
[02:55:03] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[02:55:03] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[02:55:03] *** Joins: thiras (~thiras@user/thiras)
[02:55:03] *** Joins: Kalov (~Thunderbi@179.56.117.154)
[02:55:03] *** Joins: tbcr (~tbcr@user/tbcr)
[02:56:42] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 250 seconds)
[02:57:06] <PaulWay[w]> Ah, the good old days of net.splits.
[02:57:34] <PaulWay[w]> Thank the twelve tentacles of Shiznax we have them back.
[02:58:02] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (Ping timeout: 272 seconds)
[02:58:03] *** Quits: kenbolton (~kenbolton@2001:470:69fc:105::2d24) (Ping timeout: 272 seconds)
[02:58:03] *** Quits: mambang[m] (~mambang@user/mambang) (Ping timeout: 272 seconds)
[02:58:03] *** Quits: mattcen[mx][m] (~mattcen@2001:470:69fc:105::5d1) (Ping timeout: 272 seconds)
[02:58:03] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Ping timeout: 272 seconds)
[02:58:25] *** Quits: BEC001AF[m] (~kreatemor@2001:470:69fc:105::a0f) (Ping timeout: 272 seconds)
[02:59:13] <blackleitus> PaulWay[w], they just ids
[03:01:18] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[03:01:57] *** Joins: ChanServ (ChanServ@services.libera.chat)
[03:01:57] *** iridium.libera.chat sets mode: +o ChanServ
[03:06:43] *** Parts: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it) ()
[03:06:50] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (Quit: See you on the flip side.)
[03:08:56] *** Quits: moldy (~rene@user/moldy) (Ping timeout: 244 seconds)
[03:08:56] *** Quits: hypera1r (~hyperair@49.128.61.210) (Ping timeout: 244 seconds)
[03:10:07] *** Joins: himcesjf (uid409730@id-409730.tinside.irccloud.com)
[03:10:50] *** Joins: hyperair (~hyperair@49.128.61.210)
[03:19:40] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 258 seconds)
[03:21:54] *** Joins: justache (~justache@user/justache)
[03:21:56] *** Joins: moldy (~rene@user/moldy)
[03:22:05] *** Quits: x_kuru (~xkuru@user/xkuru) (Quit: Unvirtualizing)
[03:22:34] *** Joins: xkuru (~xkuru@user/xkuru)
[03:33:28] *** Quits: xkuru (~xkuru@user/xkuru) (Quit: Unvirtualizing)
[03:33:47] *** Joins: xkuru (~xkuru@user/xkuru)
[03:34:15] <b-rex> PaulWay[w]: i looked up the tentacles of Shiznax and did not find anything. is it a secret society?
[03:42:15] <blackleitus> do you build your schemas on django or just use the feature of django schema to models from a schema layer ?
[03:46:50] * doc|work shortcircuits
[03:48:55] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[03:51:13] <PaulWay[w]> b-rex: Shiznax is the god I swear by.
[03:51:26] <PaulWay[w]> blackleitus: the schemas are django.
[03:51:30] <PaulWay[w]> And django is the schemas.
[03:52:08] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[03:52:11] <PaulWay[w]> doc|work: If you want to swear by Shiznax, go ahead.  Shiznax will be pleased.
[03:53:27] <b-rex> where can i find more information about Shiznax?
[03:54:16] <PaulWay[w]> You find it within yourself.
[03:55:00] <PaulWay[w]> Somewhat related to Klono, the spaceman's god.
[04:00:41] * GinFuyou calls the cats of Ulthar for defense against cryptic horrors
[04:00:42] <b-rex> I think I will now proceed to learn the language of Klono. Thank you, my friend. By the power of Shiznax.
[04:02:18] <PaulWay[w]> Praise be unto it!
[04:08:10] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[04:09:21] <doc|work> are you lot all in the same building with some "special" coffee or something? :)
[04:11:57] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48) (Ping timeout: 256 seconds)
[04:15:13] <b-rex> my office is a pole barn. it's also my domicile
[04:24:13] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[04:32:37] *** Joins: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net)
[04:35:45] *** Quits: pycode (~pycode@2001:b07:5d28:551:55a8:758a:ed3c:7d94) (Ping timeout: 256 seconds)
[04:37:03] *** Quits: blackleitus (~blackleit@189.195.192.28) (Quit: Leaving)
[04:39:54] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[04:40:14] *** Quits: marmalodak (~marmaloda@50-250-206-146-static.hfc.comcastbusiness.net) (Ping timeout: 252 seconds)
[04:42:48] *** Quits: serghei (~serghei@user/serghei) (Ping timeout: 252 seconds)
[04:47:36] *** Joins: marmalodak (~marmaloda@50-250-206-146-static.hfc.comcastbusiness.net)
[04:48:05] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[04:52:09] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[05:06:39] *** Joins: explore (uid233125@id-233125.stonehaven.irccloud.com)
[05:09:03] *** Joins: serghei (~serghei@user/serghei)
[05:10:28] *** Joins: blackleitus (~blackleit@189.195.192.28)
[05:10:37] <blackleitus> what does mean ManyToManyField('self', ?
[05:17:37] *** Quits: brownan (~brownan@136.56.137.143) (Ping timeout: 268 seconds)
[05:21:08] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:34:11] <FunkyBob> blackleitus: it means it's a many to many relation to the model it's on
[05:35:05] <FunkyBob> like it explains in the docs
[05:37:16] *** Joins: kiska (~kiska@user/kiska)
[05:37:24] <blackleitus> sure, but where do we use this?
[05:38:11] <FunkyBob> when you need something with a m2m relation to itself
[05:38:26] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[05:38:48] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[05:39:10] <blackleitus> example ? when we want to email from x to another?
[05:42:35] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[05:46:26] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[05:50:06] <tm007> Email to self
[05:57:00] <FunkyBob> blackleitus: so... the docs don't give an example?
[06:06:02] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[06:07:35] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[06:12:10] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 246 seconds)
[06:15:54] *** Joins: djapo (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net)
[06:17:20] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48)
[06:17:45] *** Quits: djapo (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net) (Changing host)
[06:17:45] *** Joins: djapo (~archangel@user/djapo)
[06:18:05] *** Quits: clawh_ (~clawh@185.244.214.60) (Remote host closed the connection)
[06:26:35] <sed> Can anyone tell me why this keeps happening with docker? https://dpaste.org/CAn0#L7,19
[06:28:16] *** Quits: doc|work (~doc@user/doc) (Ping timeout: 258 seconds)
[06:28:32] *** Quits: doc (~doc@user/doc) (Ping timeout: 268 seconds)
[06:29:27] <sed> it never used to do that a long time ago
[06:31:20] <FunkyBob> sed: not sure. I typically use numbers to reference other stages... but that _should_ work
[06:31:40] *** schinckel_ is now known as schinckel
[06:32:10] <sed> yea it is very strange.
[06:32:58] <sed> it did work months ago when i last did it
[06:33:13] <schinckel> sed: We have names on each of our FROM lines - does having `FROM ... AS final` on line 18 fix it?
[06:33:48] <sed> oh good idea
[06:33:50] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:34:06] <sed> i will try it but it takes a while for the build to complete
[06:34:13] <FunkyBob> sed: one likely difference is y our docker versions
[06:34:29] <sed> yea that could be
[06:35:29] *** Quits: Kalov (~Thunderbi@179.56.117.154) (Quit: Kalov)
[06:39:13] <tm007> sed: what's the use of the base image here? Just curious.
[06:39:53] <sed> to get the wheels created
[06:41:18] *** Joins: doc|home (~doc@user/doc)
[06:42:12] <FunkyBob> tm007: multi-stage builds are great because you can build packages that need compiling, then not include the compiler, dev packages,  etc in the final image
[06:42:18] <FunkyBob> this can drastically reduce the final image size
[06:42:55] <tm007> FunkyBob: Interesting. Didn't know that.
[06:43:23] <sed> yes that too
[06:44:24] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[06:45:12] <FunkyBob> so like sed, we build wheels first, then copy them over to the second image and install
[06:45:43] <FunkyBob> still means you have the weight of the wheels in your image, but that tends to be minimal compared with gcc, headers, etc etc
[06:45:54] <tm007> Yes
[06:46:08] <tm007> Sleek
[06:47:36] <tm007> sed:  always reminds me of awk
[06:47:47] <FunkyBob> well, t his is awk-ward
[06:48:26] <schinckel> Unable to make a decent grep joke.
[06:49:35] <sed> lol good one funkybob
[06:49:36] <FunkyBob> really greping at straws?
[06:49:51] <FunkyBob> if we keep trying, we can strings this out for a bit longer
[06:49:58] <PaulWay[w]> Really?  Command line jokes?  Have we stooped this low?
[06:50:20] <tm007> zshhh, please don't insult
[06:50:33] <FunkyBob> trying to kill -9 the discussion, PaulWay[w] ?
[06:52:43] <FunkyBob> aww... here I thought he'd come back with a perler of a pun
[06:52:47] *** Joins: doc|work (~doc@user/doc)
[06:54:07] <tm007> PaulWay[w]: Nothing really? At least a regular expression would be nice
[06:54:33] <PaulWay[w]> I can give you a perler for less.
[06:55:17] <PaulWay[w]> Piping things through a python one-liner isn't really a thing, is it...
[06:55:45] *** Joins: sed2 (~sed2@2600:1003:b44f:effd:a973:8699:9e34:3a10)
[06:55:57] <sed2> Sorry my pc went to sleep :p
[06:56:31] <esaym153> I've got an S3 store full of images that I need to expose via a json api (django rest framework). What is the best way to import all the S3 links into the DB? I assume the DB needs to be aware?
[06:56:38] <tm007> sed2: now I can only think of awk2
[06:57:06] *** Quits: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net) (Ping timeout: 240 seconds)
[06:57:08] <PaulWay[w]> esaym153: can they be turned into a fixture?
[06:57:29] <sed2> I guess no more puns?
[06:57:39] <esaym153> PaulWay[w]: err, I guess, not sure what you mean
[06:58:23] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[06:58:41] <tm007> That's all the command line I know ðŸ˜‚
[07:01:09] <tm007> esaym153: what's your use case? You just need to serve all the links to all the images?
[07:01:40] <FunkyBob> esaym153: boto3 to iterate the bucket contents, then get_or_create image records into your DB?
[07:02:16] <blackleitus> what am I getting error on line 34 https://dpaste.org/swDq#L34 ??Error importing data: Error in statement #34: FOREIGN KEY constraint failed.
[07:02:17] <django-ticketbot> https://code.djangoproject.com/ticket/34
[07:02:17] <blackleitus> Aborting execution.
[07:02:28] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:02:31] <tm007> minio?
[07:03:28] <FunkyBob> blackleitus: I tihnk you'll find it's _statement_ 32, not _line_ 34
[07:03:47] <esaym153> FunkyBob: that is what I was thinking
[07:03:51] <FunkyBob> blackleitus: and that  the error is you're inserting a value into a fkey field ... and the matching value doesn't exist in the referenced table
[07:04:03] *** Quits: sed2 (~sed2@2600:1003:b44f:effd:a973:8699:9e34:3a10) (Quit: Client closed)
[07:04:10] <esaym153> tm007: yea, serving links
[07:04:46] *** Joins: mattil (~mattil@87-92-27-13.bb.dnainternet.fi)
[07:09:20] *** Quits: mattil (~mattil@87-92-27-13.bb.dnainternet.fi) (Ping timeout: 250 seconds)
[07:13:50] <FunkyBob> esaym153: remember that the value stored in ImageField or FileField is _relative_ to the MEDIA_URL / MEDIA_ROOT
[07:15:41] *** Joins: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net)
[07:20:26] <blackleitus> why some tables can inspectdb read them ? https://dpaste.org/3amG#L25
[07:20:51] <FunkyBob> because it figured them out?
[07:21:24] <FunkyBob> admittedly the errors when it _couldn't_ ... aren't terribly useful
[07:21:37] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[07:24:13] <blackleitus> ` The error was: list index out of range`
[07:26:01] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 246 seconds)
[07:29:22] <tm007> blackleitus: https://groups.google.com/g/django-updates/c/vN_7YHqBcK0/m/79odlhBgBgAJ?pli=1
[07:29:37] <tm007> this maybe useful
[07:31:34] <tm007> or maybe not
[07:31:45] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[07:33:17] <tm007> `This field type is a guess.` What is this?
[07:33:26] <rannnn8888> hi where i worng here ? i get Method Not Allowed (POST) https://dpaste.org/VyKp
[07:35:41] <blackleitus> you know what. I will rebuild again from this script . it seems painful to fix the code via inspecdb
[07:35:56] <tm007> blackleitus: all the tables that are failing are of the *_x_*
[07:36:10] <tm007> Wonder what's in the _x_ tables!
[07:36:33] <blackleitus> m2m I think
[07:36:39] <blackleitus> that's  not my code
[07:36:48] <blackleitus> it's from github
[07:37:03] <tm007> Yeah should be able to handle m2m
[07:37:46] <blackleitus> it's m2m since tables with _x_ has only fk
[07:38:39] <tm007> Yeah, that's odd
[07:38:52] <tm007> rannnn8888: does that endpoint support POST?
[07:39:27] <blackleitus> i am not sure , why this people craft sql from hand if they were using flask :/
[07:39:33] <blackleitus> guy*
[07:39:52] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[07:40:36] <tm007> blackleitus: what are you working on?
[07:41:05] <blackleitus> a big plataform about cybersecurity , so I Have like ~120+ open source project where I need to integrate , and fix
[07:41:20] <blackleitus> extract code , and :/
[07:41:45] <tm007> Cool stuff man
[07:43:14] <rannnn8888> tm007 Thanks I think this is the problem: D I have no idea what I am doing: D I did not use JAVASCRIPT before if I want to get an alert I should always use here in the post?
[07:43:59] <rannnn8888> https://dpaste.org/guHu have other way make its simple for me :D  ?
[07:44:28] <tm007> rannnn8888: man my JS is weak as well!
[07:44:51] <rannnn8888> tm007 Thanks for the intent: D
[07:52:54] *** Joins: djapo (~archangel@user/djapo)
[07:56:45] <blackleitus> tm007, to be honest my project is a mess . and handling multiple project / extract / and integrate
[07:58:22] <djapo> is separating out my models in one app into multiple files in a model folder a good idea?
[08:00:35] <blackleitus> I do the following se
[08:00:42] <blackleitus> separation based on app context
[08:02:28] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[08:04:53] <blackleitus> from sql schema to django models . how would it be the following 3 tables? https://dpaste.org/8FoV
[08:09:56] <tm007> djapo: If you have many models, it can be better, yes.
[08:11:14] <tm007> blackleitus: m2m with a through
[08:18:57] <blackleitus> I think `through` gets old and automatically django does it ?
[08:34:12] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[08:34:23] <blackleitus> oh bad what an ugly schema from this open source guy :/
[08:35:28] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:35:50] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[08:37:24] *** Joins: justache (~justache@user/justache)
[08:40:01] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[08:48:08] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[08:48:41] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[09:15:34] *** Quits: doc|work (~doc@user/doc) (Ping timeout: 244 seconds)
[09:28:50] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[09:33:56] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[09:36:12] <PaulWay[w]> blackleitus: a through model is useful if, as the example suggests, that 'through instance' also stores information.
[09:36:29] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:37:11] <FunkyBob> a through model exists for every m2m relation... the difference is sometimes you specify one explicitly
[09:37:48] <blackleitus> FunkyBob, taught me . django does automatically without having to explicit write it
[09:39:07] *** Quits: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net) (Ping timeout: 246 seconds)
[09:41:22] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[09:44:10] <blackleitus> if you see a dataclass as Class Domain(..): domain = ... can you notice this means a domain within an industry?
[09:47:18] <serafeim> hello friends
[09:59:33] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[10:22:46] *** Joins: clawh (~clawh@185.244.214.60)
[10:35:22] *** Joins: doev (~doev@p549d7096.dip0.t-ipconnect.de)
[10:54:58] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 246 seconds)
[11:07:11] <wallbroken> FunkyBob: on loading items in the main template, is possible to do a check on field, and if that field is false, show that item in another color?
[11:08:01] <FunkyBob> "loading" in the template?
[11:08:17] <FunkyBob> sure, you can do {% if %} in templates
[11:08:56] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:08:56] *** ChanServ sets mode: +v EvilDMP
[11:13:05] *** Joins: anas (~anas@196.224.51.199)
[11:20:52] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:23:14] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[11:27:52] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 246 seconds)
[11:37:13] *** Joins: pycode (~pycode@2001:b07:5d28:551:84e5:2733:3407:7044)
[11:38:36] <wallbroken> FunkyBob: and how to show the image with a less contrast?
[11:39:04] *** Quits: serghei (~serghei@user/serghei) (Quit: serghei)
[11:41:28] <FunkyBob> erm... use an image with lower contrast?
[11:41:56] <blackleitus> one technique has multiple sub techniques. this translate to fk or m2m?
[11:42:17] <serafeim> fk
[11:42:40] <serafeim> it's not good asking these kinds of questions it means you haven't understood db design
[11:42:51] <serafeim> it's not a good thing to work with django without understanding dbdesign
[11:43:44] <blackleitus> sure, but I also like to know which is the best or maybe my approach is wrong
[11:44:54] <serafeim> well each SubTechnique needs a technique = ForeignKey('Technique')  field.
[11:45:01] <serafeim> not each. *the* SubTechnique
[11:46:55] <blackleitus> exactly. this day an actor needs to access them via Technique (parent) where it can use multiples techniques/subtechiques via m2m right . technique_used = m2m(techniques), but how do I access to subtechniques via parent?
[11:49:07] <serafeim> each technique instance will have a subtechnique_set field
[11:49:22] <serafeim> so you'll do `technique.subtechnique_set.all()`
[11:50:19] <blackleitus> this way will avoid two query right. instea dof technique.objects.all() . I want to query parent.child.all()
[11:50:37] <blackleitus> T1 > T1.001
[11:50:48] <serafeim> a parent has many children
[11:51:15] <blackleitus> exactly
[11:51:42] <blackleitus> this way can this translated to  `technique.subtechnique_set.all()` as a single query without two .all()
[11:51:49] <wallbroken> FunkyBob: have you ever seen in ecommerce, what happens when an item is sold out?
[11:52:24] <wallbroken> the image has a lighter contrast
[11:52:27] <wallbroken> i want that
[11:53:10] *** Joins: serghei (~egrep@user/serghei)
[11:54:58] <wallbroken> https://dpaste.org/DVd6
[11:55:08] <wallbroken> this is the piece of code we want to act on
[12:02:28] <jor> wallbroken: search for CSS filter functions, you can apply contrast filter client-side
[12:02:51] *** Quits: pycode (~pycode@2001:b07:5d28:551:84e5:2733:3407:7044) (Remote host closed the connection)
[12:06:17] <wallbroken> jor done, thank you very much
[12:06:32] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:06:32] *** ChanServ sets mode: +v EvilDMP
[12:09:50] *** Joins: especial (~especial@cm-84.214.207.74.getinternet.no)
[12:25:40] <FunkyBob> wallbroken: big red banner saying "sold out" usually...
[12:25:48] <FunkyBob> wallbroken: stop assuming all the world works as you think it does
[12:26:10] <wallbroken> FunkyBob: all the main ecommerce works that way
[12:26:15] <wallbroken> when an item is unavaialble
[12:26:15] <FunkyBob> no... no they don't
[12:26:27] <wallbroken> it has a grayscale, and "sold out" at the center of the image
[12:26:34] <FunkyBob> but as jor said... yes, you can do it easily with css
[12:27:04] <wallbroken> FunkyBob adding the word "sold out" overlayed at the center of the image can be done with css?
[12:27:15] <FunkyBob> yes
[12:28:51] <FunkyBob> am working up a sample now
[12:33:28] *** Joins: wattux (~wattux@212.51.23.106)
[12:33:29] *** Joins: Azelphur (~Azelphur@static.156.2.9.176.clients.your-server.de)
[12:36:43] <bin4ry> Anyone know how can I utilise DigitalOcean pooling for `FATAL:  remaining connection slots are reserved for non-replication superuser connections`
[12:41:11] <FunkyBob> bin4ry: DO offers pooling?  that looks, however, like an issue with you not closing connections
[12:41:21] <FunkyBob> or firing up too many workers for the config of your DBMS
[12:41:47] <wallbroken> FunkyBob: where's the sample?
[12:41:55] <FunkyBob> wallbroken: had to serve dinner
[12:44:38] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:44:43] *** Joins: GiLgAmEzH (~gilgamezh@181.47.117.104)
[12:47:13] <FunkyBob> https://jsfiddle.net/pgb732h0/1/
[12:51:54] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48) (Ping timeout: 240 seconds)
[12:56:04] <wallbroken> thanks
[12:59:30] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 268 seconds)
[13:07:32] <FunkyBob> wallbroken: I think in #css someone else had one that didn't need the wrapping div, too
[13:11:42] *** Joins: serghei (~egrep@user/serghei)
[13:15:06] *** Quits: anas (~anas@196.224.51.199) (Ping timeout: 240 seconds)
[13:16:01] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 246 seconds)
[13:17:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:26:44] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:26:44] *** ChanServ sets mode: +v EvilDMP
[13:29:06] *** Joins: serghei (~egrep@user/serghei)
[13:29:32] <wallbroken> FunkyBob: i'm trying
[13:29:36] <wallbroken> i'm unable to make it work
[13:30:38] <wallbroken> https://dpaste.org/8QPb
[13:34:01] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 265 seconds)
[13:40:17] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:44:59] *** Joins: emiel (~emiel@2001:981:f73:1:25b9:a02:25f9:41cd)
[13:45:21] *** Joins: serghei (~egrep@user/serghei)
[13:46:55] *** Quits: wattux (~wattux@212.51.23.106) (Ping timeout: 246 seconds)
[13:49:58] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 265 seconds)
[14:02:48] *** Joins: serghei (~egrep@user/serghei)
[14:05:11] *** Joins: dries_ (~dries@dd57680da.access.telenet.be)
[14:07:57] *** Joins: Ergo^ (~ergo@91.238.59.144)
[14:07:57] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 268 seconds)
[14:11:08] *** Quits: dries_ (~dries@dd57680da.access.telenet.be) (Ping timeout: 252 seconds)
[14:13:34] *** Joins: Coder_000 (~u0_a117@191.35.80.104)
[14:16:56] *** Quits: Coder_000 (~u0_a117@191.35.80.104) (Quit: WeeChat 3.0.1)
[14:18:46] *** Joins: serghei (~egrep@user/serghei)
[14:21:34] *** Joins: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac)
[14:23:13] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 246 seconds)
[14:27:36] *** Quits: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac) (Quit: Client closed)
[14:28:56] <wallbroken> FunkyBob:
[14:28:57] <wallbroken> if not itm.ordered_user.exists() and itm.available == False:
[14:29:04] <wallbroken> it's a corret syntax?
[14:29:28] <wallbroken> i want to execute the cude if the ordered_user not exists and if available is True
[14:29:39] <wallbroken> *code
[14:31:44] <FunkyBob> it's valid syntax, but not for what you said
[14:31:53] <FunkyBob> the True and False not being the same is the give-away
[14:35:05] *** Joins: serghei (~egrep@user/serghei)
[14:37:35] *** Joins: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac)
[14:37:46] <mihael> With this models, should I place the athlete_roles in athlete_profile or place it directly under athlete?
[14:38:23] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[14:39:44] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 252 seconds)
[14:44:09] *** Quits: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac) (Quit: Client closed)
[14:45:44] *** Joins: serghei (~egrep@user/serghei)
[14:50:14] *** Parts: chronon (~chronon@user/chronon) ()
[14:50:27] *** Joins: rannnn888875 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[14:54:22] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:54:22] *** ChanServ sets mode: +v EvilDMP
[14:55:25] *** Joins: uhrx3 (~JD@103.211.18.186)
[14:59:05] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 265 seconds)
[15:00:11] *** Joins: mattcen[mx][m] (~mattcen@2001:470:69fc:105::5d1)
[15:02:25] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[15:03:01] *** Joins: kenbolton (~kenbolton@2001:470:69fc:105::2d24)
[15:03:01] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[15:03:01] *** Joins: mambang[m] (~mambang@user/mambang)
[15:03:15] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[15:06:16] *** Joins: serghei (~egrep@user/serghei)
[15:08:33] <wallbroken>  request.user.ordered_items.add(* request.user.cart_items.all())
[15:08:41] <wallbroken> im afraid this line is totally wrong
[15:08:43] <wallbroken> don't you?
[15:09:32] *** Quits: doev (~doev@p549d7096.dip0.t-ipconnect.de) (Quit: Client closed)
[15:11:21] <FunkyBob> maybe not...
[15:12:06] <wallbroken> ok, fixed it
[15:12:15] <wallbroken> it wasn't in the if clause
[15:12:35] <wallbroken> so it was being executed even if the order was unsuccessfull
[15:13:05] <wallbroken> FunkyBob: how could i do some reliability test?
[15:13:21] <wallbroken> before i send it in production?
[15:13:31] <wallbroken> i'm doing some unit test
[15:13:42] <wallbroken> but i guess they are not massive tests
[15:13:51] <FunkyBob> ah, well... now you've opened a fresh can of worms
[15:14:10] <FunkyBob> unit tests are a good start
[15:14:23] <FunkyBob> then you move up to integration tests... testing that the bits work together as expected
[15:14:29] <wallbroken> FunkyBob: for example how can i be sure that my bugfix is not broking something else?
[15:14:37] <FunkyBob> with more tests
[15:14:56] <FunkyBob> every time something breaks, write a test for that case
[15:15:05] <wallbroken> and what about security tests?
[15:15:09] <FunkyBob> eventually you will grow a huge suite of "regression tests"
[15:15:16] <wallbroken> how could i be sure that the product can't be hacked?
[15:15:29] <FunkyBob> you can't
[15:15:41] <FunkyBob> you can do a fair bit to make it hard to exploit...
[15:15:55] <FunkyBob> but beyond a certain point, all you can do is make sure they leave enough evidence to follow
[15:16:08] <FunkyBob> there are some basic rules to follow
[15:16:13] <FunkyBob> like... never trust user input
[15:16:18] <wallbroken> what is a regression test?
[15:16:34] <FunkyBob> a regression test is a tes  you introduce to ensure a feature never "regresses"
[15:16:44] <FunkyBob> you fix something, and the test makes sure it stays fixed
[15:16:55] <wallbroken> "regresses" ?
[15:17:00] <wallbroken> have you a practical example?
[15:17:11] <FunkyBob> regress... go backwards
[15:17:31] <FunkyBob> opposite of progress
[15:17:41] <wallbroken> yes
[15:17:55] <wallbroken> but i'm not sure how to apply this concept in our casess
[15:18:25] <wallbroken> you have not in mind some simple example to express the idea of it?
[15:19:02] <FunkyBob> you hit a big. you write a test. you fix the code so the test passes.
[15:19:11] <FunkyBob> that test ensures in future you will notice if you break that feature again
[15:19:31] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[15:19:57] <wallbroken> i hit a bug
[15:20:01] <wallbroken> i wix it
[15:20:12] <wallbroken> then i write a test to check if the bug has been fixed
[15:20:12] <FunkyBob> write the test first
[15:22:29] *** Joins: koo6 (~koo6@ip-37-188-159-159.eurotel.cz)
[15:22:32] <wallbroken> test ---> bug ---> test
[15:23:18] <FunkyBob> write the test, fix the bug
[15:23:27] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[15:23:51] *** Quits: koo6 (~koo6@ip-37-188-159-159.eurotel.cz) (Read error: Connection reset by peer)
[15:24:06] <wallbroken> the test is to discover the byg
[15:24:08] <wallbroken> bug
[15:24:15] <wallbroken> then, when i found it
[15:24:28] <wallbroken> i'll fix the code
[15:24:46] <wallbroken> and then execute the initial test again to verify that the bug has been fixed
[15:24:49] <wallbroken> that's all
[15:25:04] <schinckel> I'll write a test to reproduce a bug when one is reported (either by our QA team, or by a customer).
[15:25:27] <schinckel> But also, you can do Test Driven Development, where you write the tests first, and then write enough code to make the tests pass.
[15:30:14] <FunkyBob> no, the test is to probe the bug is gone
[15:31:13] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[15:32:02] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[15:37:00] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:37:10] <uhrx3> When I exit the irc client and re-login , the previous chat disappears . Is there a way to not let that happen ?
[15:42:36] *** Joins: alastairp (sid1249@highgate.irccloud.com)
[15:43:53] <alastairp> hi all. I'm seeing a weird situation on safari on ios/ipad where if you force-quit safari and then re-open it, safari appears to delete the csrftoken and sessionid cookies (we have some google analytics cookies that seem to survive). Has anyone ever encountered something like this before?
[15:50:47] <FunkyBob> uhrx3: i run irssi in a screen session on a VPS so I don't lose context...
[15:52:27] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:52:27] *** ChanServ sets mode: +v EvilDMP
[15:55:25] *** Quits: emiel (~emiel@2001:981:f73:1:25b9:a02:25f9:41cd) (Quit: WeeChat 3.2)
[15:58:01] <wallbroken> FunkyBob: is easy to manage time based orders?
[15:58:01] *** Quits: uhrx3 (~JD@103.211.18.186) (Ping timeout: 256 seconds)
[15:58:12] <wallbroken> with a graphic dashboard
[15:58:28] <wallbroken> or this will add much more effort to the project?
[15:59:59] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 265 seconds)
[16:04:02] *** Joins: bomzh1018 (~user@176.52.35.104)
[16:04:06] *** Parts: bomzh1018 (~user@176.52.35.104) ()
[16:04:28] *** Joins: serghei (~egrep@user/serghei)
[16:07:09] <alastairp> looking into this further, another django site I run doesn't show this behaviour, and I just put together a basic new django app and it doesn't show this behaviour either. So I'm not sure what is causing these cookies to be deleted :(
[16:14:50] <moldy> alastairp: i didn't encounter this specifically, but safari is known to be strange with cookies
[16:15:06] <moldy> they implemented some kind of tracking protection which does "things"
[16:15:35] <moldy> alastairp: if you don't see this on a fresh site, compare the headers you send
[16:16:35] <alastairp> moldy: yeah, I'm comparing the headers now. I wondered if it might be some kind of "protection" thing
[16:16:56] <moldy> probably
[16:17:40] <alastairp> although I'm just trying to work out exactly what happens when safari starts up again (especially to see if it actually does make a network request to reload the page, or if it fills it up from cache)
[16:18:35] <alastairp> in the case that we can't find a good way to solve this, is there a better recommendation for how to do csrf tokens via ajax? currently our frontend relies on this cookie to make fetch POSTs to the backend
[16:19:49] <alastairp> our templates are rendered by django, so I guess we could just throw `{% csrf_token %}` into the template?
[16:21:54] <alastairp> here's something interesting. I changed the name of the csrf cookie to 'foobar'. now safari is deleting the foobar cookie, but the old csrftoken one that got set last time I loaded the page is still there. This makes me think that it's not something that safari is doing to particular cookies
[16:21:59] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:22:26] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:22:26] *** ChanServ sets mode: +v EvilDMP
[16:22:30] <alastairp> rather it seems that when it "replays" a request after it starts up again, any cookies that appear in the Set-Cookie header are blanked out
[16:23:19] <moldy> i guess this is part of their "intelligent tracking protection:
[16:23:36] <moldy> or something similar
[16:23:53] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 244 seconds)
[16:24:50] <alastairp> but it's odd to me that on another site I run this doesn't happen. we have no js code that tries to read the 'foobar' cookie, so it can't be trying to intercept reading document.cookie
[16:24:55] <alastairp> I'll keep looking around, thanks
[16:30:57] <alastairp> wtf. even odder: A failing request to our API endpoint _includes_ a `Cookie: csrftoken=` header, with the correct csrftoken, but the X-CSRFToken header that we set by using getCookie _is empty_, and `document.cookie` from the inspector doesn't show the cookie
[16:33:39] *** Joins: brownan (~brownan@136.56.137.143)
[16:33:54] *** Joins: u0_a117 (~u0_a117@191.35.80.104)
[16:34:39] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[16:36:18] *** Joins: serghei (~egrep@user/serghei)
[16:37:42] *** Quits: u0_a117 (~u0_a117@191.35.80.104) (Client Quit)
[16:40:54] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 250 seconds)
[16:42:21] *** Joins: stabler (~stabler@87-50-3-146-cable.dk.customer.tdc.net)
[16:42:23] *** Quits: rannnn888875 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[16:42:45] *** Quits: stabler (~stabler@87-50-3-146-cable.dk.customer.tdc.net) (Remote host closed the connection)
[16:43:08] *** Joins: stabler (~stabler@87-50-3-146-cable.dk.customer.tdc.net)
[16:44:25] *** Joins: brsc2909 (~Thunderbi@109.255.244.60)
[16:44:56] *** Joins: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac)
[16:45:51] <mihael> With these models: https://dpaste.org/oYvH, should I place the athlete_roles in athlete_profile or place it directly under athlete?
[16:49:04] <GinFuyou> You can't place it on athlete if it's a proxy
[16:51:37] <alastairp> hmm. it's CSRF_COOKIE_SAMESITE = 'Strict' causing the problem
[16:52:02] *** Joins: azed (~azed@197.28.129.222)
[16:53:15] <mihael> GinFuyou ah so I should leave it like that, or is there a better alternative?
[16:53:30] *** Joins: serghei (~egrep@user/serghei)
[16:53:48] <GinFuyou> There is only 2 equal options
[16:53:50] <GinFuyou> *are
[16:55:05] <mihael> What are those?
[16:55:51] *** Quits: especial (~especial@cm-84.214.207.74.getinternet.no) (Remote host closed the connection)
[16:56:15] *** Joins: wattux (~wattux@212.51.23.106)
[16:57:16] <GinFuyou> It's m2m is a "symmetric" relation between model A and model B. So field can be on either just fine.
[16:58:14] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 250 seconds)
[16:59:19] <mihael> GinFuyou I'm sorry I don't follow. Are you saying the athlete_roles can be under Athlete directly?
[17:00:01] <GinFuyou> I just said above it can't
[17:00:06] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 272 seconds)
[17:01:11] <GinFuyou> It's relation between AthleteProfile and AthleteRole. Field could be equally on either
[17:01:27] <mihael> Ah now that I understand, haha
[17:03:49] *** Quits: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac) (Quit: Client closed)
[17:03:58] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[17:03:58] *** ChanServ sets mode: +v EvilDMP
[17:04:03] *** Joins: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac)
[17:06:54] *** Quits: stabler (~stabler@87-50-3-146-cable.dk.customer.tdc.net) (Quit: Leaving)
[17:08:58] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 272 seconds)
[17:09:14] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[17:09:14] *** ChanServ sets mode: +v EvilDMP
[17:09:58] *** Joins: serghei (~egrep@user/serghei)
[17:12:08] *** Quits: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac) (Quit: Client closed)
[17:13:18] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[17:14:42] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 250 seconds)
[17:16:04] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 244 seconds)
[17:16:44] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[17:16:45] *** ChanServ sets mode: +v EvilDMP
[17:26:25] *** Joins: serghei (~egrep@user/serghei)
[17:26:29] *** Joins: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac)
[17:26:34] <mihael> Weird: I needed user = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True) instead of user = models.OneToOneField(User, on_delete=models.CASCADE). I though primary keys are automatically populated
[17:31:12] *** Joins: Crassus (~Crassus@user/crassus)
[17:31:23] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 272 seconds)
[17:34:17] <GinFuyou> Why you needed it?
[17:34:30] <GinFuyou> On proxy?
[17:35:49] *** Quits: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac) (Quit: Client closed)
[17:38:34] <alastairp> OK, knowing the right keywords to find led me to https://code.djangoproject.com/ticket/29975, which indicates that it might in fact be a safari bug based on these values. We'll see if setting it to None is the right solution
[17:42:41] *** Joins: serghei (~egrep@user/serghei)
[17:46:23] <apollo13> alastairp: that was 2019 though and should be released by now
[17:47:36] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 272 seconds)
[17:50:24] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:53:17] <alastairp> apollo13: right, that issue talks about a bug in safari with SameSite=Lax. Our issue was that we had set SameSite=Strict - but even then firefox and chrome seem to be happy to send the cookies in this situation, it's only safari which is still being obstinate. I'm not sure if it's actually a bug or not
[17:57:50] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[17:59:47] *** Joins: serghei (~egrep@user/serghei)
[18:03:12] *** Joins: doev (~doev@p549d7096.dip0.t-ipconnect.de)
[18:04:41] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 265 seconds)
[18:16:47] *** Joins: serghei (~egrep@user/serghei)
[18:22:03] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 272 seconds)
[18:31:48] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[18:34:30] *** Joins: serghei (~egrep@user/serghei)
[18:36:09] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 244 seconds)
[18:36:57] *** Joins: dez (uid92154@user/dez)
[18:39:15] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 244 seconds)
[18:43:42] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[18:48:02] *** Joins: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac)
[18:48:15] <mihael> GinFuyou not on the proxy model, on the AthleteProfile
[18:48:41] <GinFuyou> so, why you needed it?
[18:51:55] *** Joins: serghei (~egrep@user/serghei)
[18:52:39] *** Quits: wattux (~wattux@212.51.23.106) (Quit: Client closed)
[18:53:17] <mihael> I tried not having it, and makemigrations is giving me an error: NOT NULL contraint failed for the id
[18:54:24] *** Quits: azed (~azed@197.28.129.222) (Quit: WeeChat 3.2)
[18:55:02] <GinFuyou> What migration was like? Issue with migrations is no joke
[18:55:56] *** Quits: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac) (Quit: Client closed)
[18:56:53] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 272 seconds)
[18:58:07] *** Joins: serghei (~egrep@user/serghei)
[18:59:50] *** Joins: argento (~argent0@168-227-97-29.ptr.westnet.com.ar)
[19:00:30] *** Joins: Safa_[A_Boy] (~Safa@217.17.224.55)
[19:02:41] <Safa_[A_Boy]> Hi all. How can I select all the available fields after doing a .values() as a GROUP BY query? I don't want to write all of them in .values() one by one..
[19:02:58] *** Quits: doev (~doev@p549d7096.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[19:09:27] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 265 seconds)
[19:17:33] *** Joins: tonitch (~tonitch@user/tonitch)
[19:20:56] *** Joins: serghei (~egrep@user/serghei)
[19:25:46] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 272 seconds)
[19:29:59] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[19:31:50] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[19:36:28] *** Joins: anas (~anas@196.224.48.251)
[19:37:49] *** Joins: serghei (~egrep@user/serghei)
[19:38:50] *** Joins: newdimension (~newdimens@171.red-83-47-155.dynamicip.rima-tde.net)
[19:41:40] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:42:28] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 250 seconds)
[19:45:17] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[19:45:37] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[19:50:21] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 256 seconds)
[19:51:47] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[19:52:30] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:53:55] *** Quits: newdimension (~newdimens@171.red-83-47-155.dynamicip.rima-tde.net) (Quit: Leaving)
[19:54:12] *** Joins: serghei (~egrep@user/serghei)
[19:56:07] *** Joins: newdimension (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com)
[19:56:13] *** Joins: Kalov (~Thunderbi@179.56.117.154)
[19:59:20] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 272 seconds)
[19:59:50] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:59:50] *** ChanServ sets mode: +v EvilDMP
[20:10:39] *** Joins: serghei (~egrep@user/serghei)
[20:13:45] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[20:15:40] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 265 seconds)
[20:24:24] *** Joins: Skyz (~Skyz@user/skyz)
[20:26:19] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[20:26:20] *** ChanServ sets mode: +v EvilDMP
[20:26:39] *** Joins: serghei (~egrep@user/serghei)
[20:31:26] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 250 seconds)
[20:39:33] *** Quits: olegyam (~olegyam@85.119.150.238) (Quit: The Lounge - https://thelounge.chat)
[20:42:30] *** Joins: serghei (~egrep@user/serghei)
[20:42:34] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[20:43:02] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[20:43:02] *** ChanServ sets mode: +v EvilDMP
[20:45:09] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 265 seconds)
[20:47:22] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:47:34] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 265 seconds)
[20:48:56] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[20:58:39] *** Joins: serghei (~egrep@user/serghei)
[20:59:32] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[21:00:26] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:00:26] *** ChanServ sets mode: +v EvilDMP
[21:02:31] *** Joins: satya (~satya@071-085-195-216.res.spectrum.com)
[21:03:33] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 272 seconds)
[21:05:47] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[21:07:21] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 272 seconds)
[21:08:38] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[21:15:16] *** Joins: serghei (~egrep@user/serghei)
[21:15:22] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[21:16:19] *** Quits: GiLgAmEzH (~gilgamezh@181.47.117.104) (Ping timeout: 244 seconds)
[21:17:19] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:17:19] *** ChanServ sets mode: +v EvilDMP
[21:19:58] *** Quits: anas (~anas@196.224.48.251) (Ping timeout: 250 seconds)
[21:20:26] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 265 seconds)
[21:20:29] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[21:22:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[21:23:06] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:23:06] *** ChanServ sets mode: +v EvilDMP
[21:24:41] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[21:25:09] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[21:30:46] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:30:46] *** ChanServ sets mode: +v EvilDMP
[21:31:16] *** Joins: serghei (~egrep@user/serghei)
[21:35:57] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 244 seconds)
[21:37:06] *** Quits: tbcr (~tbcr@user/tbcr) (Read error: Connection reset by peer)
[21:40:42] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[21:47:10] *** Joins: serghei (~egrep@user/serghei)
[21:47:47] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[21:48:48] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[21:52:19] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 268 seconds)
[21:53:59] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[21:59:40] *** Quits: argento (~argent0@168-227-97-29.ptr.westnet.com.ar) (Ping timeout: 272 seconds)
[22:02:41] <zamba> i want to select from a model and other them by a field called time.. but i only want the first entry for each person..
[22:02:56] <zamba> so kind of like distinct on the person id, if that makes sense?
[22:03:29] <zamba> which means the "best" time for each person
[22:04:50] <zamba> i attempted to do .distinct("runner"), but that says that the database doesn't support it
[22:04:57] <zamba> (i'm currently still developing on sqlite)
[22:05:07] *** Joins: serghei (~egrep@user/serghei)
[22:07:20] <zamba> ah, seems like i have to use postgresql for this
[22:07:31] <zamba> guess i have to make the move
[22:09:09] <b-rex> you just want teh first entry?
[22:09:32] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 244 seconds)
[22:10:56] <b-rex> it's always a good idea to dev with the same database backend you intend to use in prod
[22:16:17] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:18:12] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[22:18:39] *** Joins: diek (~diek@187.36.4.113)
[22:20:06] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[22:20:25] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[22:22:02] *** Joins: argento (~argent0@168-227-97-29.ptr.westnet.com.ar)
[22:23:14] *** Joins: serghei (~egrep@user/serghei)
[22:24:18] *** Quits: mbryantms (~mbryantms@1612740-v109.1116-static.plfdilaa.metronetinc.net) (Read error: Connection reset by peer)
[22:28:05] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 268 seconds)
[22:37:00] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:37:28] *** Joins: doc|work (~doc@user/doc)
[22:39:14] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[22:39:39] *** Joins: serghei (~egrep@user/serghei)
[22:39:46] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[22:40:48] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[22:41:00] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[22:44:32] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 265 seconds)
[22:46:18] <killjoy> Ok party people, I've tried the google and apparently I haven't drank enough coffee to figure out how to search this morning.
[22:47:14] <killjoy> What I have is a self-referential model, I'm basically modelling a port <-> port relationship, so it's a many-to-many where the foreign keys represent wires.
[22:48:06] <killjoy> I'm trying to make a form so I can edit the connections, and I have check-boxes where you can select if _this_ port is connected to a number of other ports.
[22:48:31] <killjoy> By default, to model the connection I have to go to port A and select port B, then go to port B and select port A to model the connection properly.
[22:49:20] <killjoy> What I want is to configure the form so that if the user changes the connections of port A, the django figures out the other side of the connection and adjusts it appropriately.
[22:50:28] <killjoy> I've figured out I can use port_form.changed_data to see if the appropriate field has changed, and I'm googling around trying to see if someone else has this already solved and coming up with nothing.
[22:52:56] *** Joins: u0_a117 (~u0_a117@191.35.79.147)
[22:53:04] <killjoy> So I'm trying to get a symmetric many-to-many I think is what I'm saying. I don't know what I'm saying. I'll drink more coffee.
[22:53:29] <GinFuyou> killjoy, can you explain problem at hand in more of django way, not sure I get it from verbose description yet
[22:53:56] <killjoy> I thought I did. :)
[22:56:03] <killjoy> Ok, I have a Port model with a Foreignkey pointing to itself. I want to make a ModelForm that uses a CheckboxSelectMultiple widget that if you select a Port with it, it will change the selected Port to also point back to _this_ Port.
[22:56:32] <GinFuyou> M2M you meant?
[22:56:38] *** Joins: serghei (~egrep@user/serghei)
[22:57:03] <GinFuyou> With FK there would be nothing to change, I think?
[22:57:39] <killjoy> You do, because it depends on which Port you look at for your queries.
[22:59:57] <GinFuyou> mmm, so do you mean there port#1.fk = port#2 and and port#2.fk = port#1 ?
[23:00:23] <killjoy> Yes, that's what I want.
[23:00:33] <killjoy> Or, I want to enforce that.
[23:01:29] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 258 seconds)
[23:01:53] <GinFuyou> Ok, and what user can do in the form? change that .fk to anything?
[23:02:05] <GinFuyou> say port#3
[23:02:10] <killjoy> It's a limited set but yeah basically.
[23:02:14] *** Quits: blackleitus (~blackleit@189.195.192.28) (Ping timeout: 244 seconds)
[23:02:30] <killjoy> I give you the choices and you can select what you want from those choices.
[23:02:48] <GinFuyou> and you want 1. disconnect port#2, connect port#3.fk = port#1
[23:03:05] <GinFuyou> +2. ^
[23:03:20] <killjoy> If you want to do that.
[23:03:55] <GinFuyou> Well part 2. looks simple
[23:04:02] <killjoy> Basically, if you disconnect port#1 from port#2, but you didn't go to port#2 and disconnect it, I'll do it for you in the form processing.
[23:04:17] <killjoy> Or vice-versa.
[23:04:27] <killjoy> So I mostly want the default processing, but tweaked a little.
[23:04:29] <GinFuyou> Unless you have to check if port#2 was not changed with this form itself
[23:04:36] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[23:05:00] <killjoy> The form I made looks at both sides of the connection, so I can check both forms if I need to.
[23:05:30] <killjoy> I'm pretty sure I have all the information I need, I'm having trouble putting it together so I think I just need an assist.
[23:05:40] <killjoy> And my google-fu failed so I came here.
[23:06:05] <GinFuyou> For 1. you probably want to re-query port#1 to get it's previous fk value
[23:06:43] <GinFuyou> I think important part is if you can change several connections in one form submit
[23:06:51] <killjoy> Couldn't I just go port.has_changed() and then query the form to see what changed?
[23:07:05] <killjoy> I can, I figured that out already.
[23:07:21] <GinFuyou> killjoy, I don't think it keep previous value or does it?
[23:07:47] <killjoy> If I set each prefix argument to each form on instantiation I can uniquify the data and keep it all straight.
[23:08:04] <killjoy> I don't think it does but it tells you that it changed.
[23:08:13] <killjoy> If it didn't change has_changed() is false.
[23:08:29] <GinFuyou> That part I know. But you need both new and old values
[23:08:38] <killjoy> I mostly just care if this field changed, and if it did, set the connections as indicated.
[23:09:07] <killjoy> Why do I need the old values? The user is authoritative in the change.
[23:09:41] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:09:41] *** ChanServ sets mode: +v EvilDMP
[23:09:59] <GinFuyou> In my example, if you reconnect port#1 from port#2 to port#3, how do you know to disconnect port#2 ?
[23:10:14] <GinFuyou> if new values has only port#3?
[23:10:44] <killjoy> Because the form for port1 will clear the connection to port2, because it's a change.
[23:10:58] <GinFuyou> yes, but port#2 won't
[23:11:23] <killjoy> That's what I'm saying, if port1 clears the connection, go to port2 and also clear the back reference.
[23:11:32] <killjoy> That's what I'm trying to figure out how to do.
[23:11:41] <GinFuyou> And that's what I'm saying you need old value
[23:12:48] <killjoy> Can't I just do that between is_valid() and save()?
[23:13:01] *** Joins: serghei (~egrep@user/serghei)
[23:13:22] <GinFuyou> Yes, I'm just pointing you need it somehow
[23:13:57] <killjoy> Well, port_form.instance isn't saved yet, so I should be able to get it from there if the form doesn't somehow already have that connection data.
[23:14:45] <GinFuyou> form.instance may have old value, I'm not sure. But you can always just re-query (refresh_from_db for example)
[23:14:49] <killjoy> But if I can find something in the form that says 'clear port1 -> port2' I should be able to just go get_object_or_404(Port, pk=port2) shouldn't I?
[23:15:24] <GinFuyou> I don't see what you mean by it?
[23:15:54] <GinFuyou> form doesn't say that. Form says port1 now points to port3
[23:16:28] <GinFuyou> you know it changed and you what to what it changed, but not from what
[23:17:11] <GinFuyou> So you need a step to grab old value, so you can go and change that port from back link to port1
[23:17:27] <killjoy> But it also has to clear port1 to port2 in the form though.
[23:17:44] *** Quits: Skyz (~Skyz@user/skyz) (Quit: Client closed)
[23:17:50] <GinFuyou> It "clears" it by setting new connection
[23:18:02] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 268 seconds)
[23:18:11] <GinFuyou> Or if it can be set to None, then clears it directly
[23:18:27] <GinFuyou> Anyway I don't see any complications with this part
[23:19:10] *** Joins: serghei (~egrep@user/serghei)
[23:19:15] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[23:19:35] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[23:19:43] <killjoy> port.initial has the initial values.
[23:19:44] <GinFuyou> It get's tricky if change port1 -> port3 requires disconnecting port3 from port4
[23:19:48] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[23:20:08] <GinFuyou> killjoy, it does? Then sure, use it from there
[23:20:16] <killjoy> Yeah I just found it.
[23:20:57] <killjoy> It looks like you can actually get a reference to the other port objects from there.
[23:21:05] <killjoy> So that's cool.
[23:22:20] <killjoy> thing.data brings the reference in as a string though.
[23:22:50] <GinFuyou> data is raw data in form you always want cleaned_date
[23:22:53] <GinFuyou> *data
[23:23:01] <killjoy> Cool, let me check.
[23:23:33] <killjoy> Yep, there it is...
[23:24:01] <killjoy> Ok, I can take the difference of these sets and do what I need to.
[23:24:10] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 265 seconds)
[23:24:47] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 272 seconds)
[23:26:03] <killjoy> cleaned_data is what the user changed it to, so if I take the difference, whatever ports are not in cleaned_data, clear them, whatever ports are in cleaned_data, make sure they point back to this port.
[23:26:35] <killjoy> Then save().
[23:26:42] <GinFuyou> cleaned_data is all validated data in the form
[23:26:47] <killjoy> Right.
[23:26:55] <GinFuyou> well, no, I don't think it will cut it
[23:26:57] <killjoy> And I validate before this step anyway.
[23:27:16] <killjoy> What's the edge case?
[23:28:17] <killjoy> If the user changes both sides, it'll be a noop.
[23:28:31] <killjoy> *should anyway.
[23:28:54] <GinFuyou> so user changes the full subset? Then it makes sense I guess
[23:28:56] <killjoy> If the user changes one side, it should make the appropriate change on the other.
[23:29:19] <killjoy> Yeah, in the page I'm building 1 form changes all the possible ports.
[23:29:21] <GinFuyou> "changes" is wrong word, "has it in form"
[23:29:48] <killjoy> It's actually organized by a "resource" which is just a larger conceptual thing.
[23:30:15] <killjoy> A resource is a container for ports, basically, which you can wire up together any way you want.
[23:30:41] <killjoy> If you want to make a connection between ports, they have to be in the resource and this form represents the overall resource.
[23:30:47] <killjoy> Anything outside of it is not possible.
[23:31:14] <killjoy> (Or at least I don't want it to be possible...)
[23:31:40] <killjoy> So do you think I'm missing something still?
[23:32:20] <GinFuyou> ok, port4 was connected to port5, now form set port4.fk=None, port5.fk=port2, port5 is not in cleaned, does you code still work?
[23:32:46] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[23:33:00] <GinFuyou> if you clean it before assigning form data it should work
[23:34:53] <killjoy> Yeah, so when I process the form for port4, I'll see port4.initial[port5], port4.cleaned[], so I'll go to port5 and remove port4, then save port4.
[23:35:07] <killjoy> If port5.fk=port2 before, it will still point there.
[23:35:26] <killjoy> If port5<->port2 is a new connection in this submit, I'll process that when I get to port5.
[23:35:34] *** Joins: serghei (~egrep@user/serghei)
[23:36:35] <GinFuyou> and if you re-wire to port, already connected, you have to disconnect it's other side too
[23:36:38] <killjoy> And yeah, that's what I was saying, between port_form.is_valid() and port_form.save(), make these adjustments.
[23:37:01] <GinFuyou> You could do that in form.clean() too
[23:37:38] <killjoy> I'm new to messing with forms (I'm actually not a webdev, so I barely know what I'm doing...) so I'll look that up.
[23:38:19] <GinFuyou> You don't have to, but it's more logically fitting place
[23:38:20] <killjoy> Actually, I think that makes sense to do it in the form.clean(), because it's particular to the PortForm class and I always want to enforce it.
[23:38:25] <killjoy> Right.
[23:38:40] <killjoy> I would argue one should, which makes it a requirement.
[23:38:50] <killjoy> Maintainability and all that.
[23:39:28] <killjoy> I may be on the edge of what I know, but you should still do it correctly dammit.
[23:39:37] <killjoy> ;)
[23:39:56] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 250 seconds)
[23:40:04] <killjoy> GinFuyou: What do you mean "if you re-wire to port, already connected, you have to disconnect it's other side too?"
[23:41:10] <GinFuyou> form changes port1 -> port3 but port3 is now connected to port4. You need disconnect port4 from port3 even if user didn't change port4, right?
[23:42:15] <killjoy> No, if the form changes port1, I only need to consider the connections from port1 -> many.
[23:42:27] <killjoy> If port3 and port4 are unchanged, they're unchanged.
[23:42:56] <GinFuyou> What do you mean, port1 can't connect to port4?
[23:43:18] <killjoy> I'm modelling physical connections in a lab, and we have spliced wires and everything, or not.
[23:43:52] *** Joins: jbeimler (~quassel@75.177.73.34)
[23:43:53] <GinFuyou> port can be connected to several ports at once?
[23:44:04] <killjoy> There's also attenuation between ports that's possible, so port1 -> port3, port4, but maybe port3 is not actually connected to port4 because it's attenuated.
[23:44:09] <GinFuyou> port1 -> port3 port2 -> port3 ?
[23:44:38] <GinFuyou> Ok...
[23:45:03] <GinFuyou> Well, start doing it and see where it goes. Feel free to share code if you stuck
[23:45:23] <killjoy> Cool, I'm pretty sure this will work though. Thanks!
[23:47:52] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[23:48:18] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:48:18] *** ChanServ sets mode: +v EvilDMP
[23:50:46] *** Quits: Safa_[A_Boy] (~Safa@217.17.224.55) (Quit: Leaving)
[23:51:24] *** Joins: serghei (~egrep@user/serghei)
[23:52:42] <killjoy> Actually it looks like I should put it in PortForm.clean_<fieldname>()
[23:53:10] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[23:53:28] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[23:53:43] <GinFuyou> possibly, if you need values for only one field
[23:53:49] <GinFuyou> and don't change others
[23:54:04] <GinFuyou> change -> check
[23:54:27] <amvara> This was eye opening.
[23:54:39] <amvara> We had a problem with 1:n
[23:54:51] <amvara> takeing 5s to resolve 5000 lines from DB
[23:55:14] <amvara> Found missing index on one column, but anyhow
[23:55:52] <amvara> putting a view on top of 1:n model and using that in a raw sql moved request to 8ms
[23:55:55] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 258 seconds)
[23:57:35] <amvara> yes, we are buing dependencies, yes we are buying migrations issues ... I hope that moveing from 5000ms to 8ms was worth doing so.
[23:57:54] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: No Ping reply in 180 seconds.)
[23:58:01] <killjoy> GinFuyou: Yeah I think it's fine. The only issue I see is if the user does something silly and makes incorrect changes to both sides of the connection, the one that's processed last will win and I'm fine with that. Silly users being what they are.
