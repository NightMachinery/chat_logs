[00:09:11] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[00:12:26] <ashafq> https://godbolt.org/z/GnMbbo596 finally!
[00:26:15] *** Joins: gehn (~gehn@user/gehn)
[00:32:58] *** Quits: paul424 (~tom@ip-5-172-233-237.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[00:33:54] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:21] *** Joins: jkaye (~jkaye@2601:281:8300:7530:a9ff:dc19:c096:5ef5)
[00:36:37] *** Joins: zenstoic (uid461840@id-461840.hampstead.irccloud.com)
[00:38:17] *** Quits: letto (~letto@188.25.113.229) (Read error: Connection reset by peer)
[00:39:11] *** Joins: letto (~letto@188.25.113.229)
[00:41:33] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:41:42] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[00:43:17] <xkoncek> (AA-tree) ... which greatly simplifies the maintenance operations... [proceeds to write 200-line `erase` implementation]
[00:47:22] *** Quits: letto (~letto@188.25.113.229) (Quit: Konversation terminated!)
[00:48:14] *** Joins: MarcusRoman (~Admin@37.120.232.44)
[00:49:08] *** Joins: letto (~letto@188.25.113.229)
[00:49:18] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:50:53] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:53:04] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:53:49] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[00:54:17] *** Joins: Simplar (~Simplar@188.163.93.76)
[00:54:51] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[01:01:31] *** Quits: causative (~halberd@user/causative) (Ping timeout: 256 seconds)
[01:07:23] *** Joins: skapata (~Skapata@user/skapata)
[01:07:29] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (Quit: leaving)
[01:08:09] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:10:41] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:14:03] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[01:18:06] <LordKalma> PJBoy, are you in the slack?
[01:18:36] <PJBoy> I was for a bit and then I got bored >_>
[01:19:14] *** Quits: oknenavin (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[01:21:06] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:406f:781b:19d4:b814)
[01:21:15] <LordKalma> https://bpa.st/RMDPMGRQRKLN6LWWFPKPMKZ264
[01:21:20] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[01:21:23] <kalven> https://twitter.com/moyix/status/1479190533918625794
[01:21:37] <LordKalma> I made a clang-format that includes separation for Qt, boost, posix, windows, C and C++ stdlibs
[01:21:39] <LordKalma> hahahah
[01:23:03] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:26:08] *** Joins: biberu (~biberu@user/biberu)
[01:27:39] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:27:59] *** Joins: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073)
[01:29:27] *** Joins: hingwah (~hingwah@node-1w7jr9phwiwmvebhn9aitbh8b.ipv6.telus.net)
[01:29:42] *** Joins: pdroman (~pdroman@27.red-88-5-21.dynamicip.rima-tde.net)
[01:30:41] *** Parts: pdroman (~pdroman@27.red-88-5-21.dynamicip.rima-tde.net) ()
[01:30:42] *** Quits: magla (~gelignite@55d42175.access.ecotel.net) (Quit: Stay safe!)
[01:39:50] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Read error: Connection reset by peer)
[01:40:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:59] *** ChanServ sets mode: +v npaperbot
[01:41:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[01:44:29] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:51:31] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[01:52:05] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[01:52:31] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[01:58:42] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Quit: Quit)
[02:07:08] <xkoncek> it looks like std::map is really roughly as fast as anything i can come up with even relieving the necessity of stable iterators
[02:07:58] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:08:59] <LordKalma> kalven: that thread is hilarious
[02:09:42] <LordKalma> I love the "Rust didn’t let me write programs period, the first time I tried to copy an array it berated me at length and then uninstalled itself from my machine in protest"
[02:09:45] <kalven> xkoncek: what was the reason for writing your own tree?
[02:10:18] <xkoncek> kalven i thought there is something inherently wrong with newing each tree node
[02:10:56] <kalven> and you need ordering?
[02:11:16] <Guest19> hello. I need to send an enum + optional std::string data over wire. What is best way to serialize them
[02:11:25] <xkoncek> i don't know but i don't like hashing
[02:11:42] <kalven> on religious grounds?
[02:12:02] <xkoncek> more-less
[02:12:19] <kalven> anyway, if you need speed and don't need ordering, pick a good 3rd party hashmap.. if you need speed and ordering, consider a btree
[02:20:05] <LordKalma> Guest19: im going to throw the name protobuf because protobuf seems to do anything Hahaha
[02:20:33] <kalven> protos are good
[02:21:22] <LordKalma> I had to go Google what's a AA tree. Then  I had to Google what's a red black tree since the former is a special case of the latter. Then I realized I don't understand shit
[02:21:34] <LordKalma> I have to read a book on algorithms and data structures
[02:22:38] *** Joins: seninha (~seninha@user/seninha)
[02:23:33] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[02:26:06] <Guest19> kalven/ LordKalma : I need something simpler. I was thinking 8 bytes for data and rest for string
[02:26:18] <kalven> data?
[02:26:32] <Guest19> oops I meant 1 byte for type of command and rest for the data associated with the command
[02:26:48] <LordKalma> Can always json it
[02:26:56] <johnny> if you'er not gonna use protobuf or similiar isn't it just reasonable to encode it manually and send it?
[02:27:04] <johnny> there's not a lot here
[02:27:14] <johnny> it's nto fixed size either
[02:27:31] <Guest19> yeah  I thought so but the ipc endpoint needs to know type of command and it doesn't use json library
[02:27:34] <kalven> Guest19: coming up with an ad-hoc serialization format for this is pretty easy
[02:27:46] <Guest19> kalven : help me out
[02:28:02] <johnny> do you even realy need to call this a format? :)
[02:28:04] <Guest19> johnny : yeah want to manually encode and send but want to know what's the right type
[02:28:05] <johnny> will it be versioned tho
[02:28:15] <Guest19> no not versioned
[02:29:07] <Guest19> so question boil downs to best way to encode an enum (1 byte) and a string and send it
[02:29:16] <LordKalma> VISA protocol solved this ages ago haha
[02:29:36] <johnny> do you need to check for anything on the other side except missing null termintaor to decide if it was an acceptable string or not?
[02:29:54] <johnny> he enum is just an int. so that's solved
[02:30:00] <kalven> plz prefix with length instead of terminating with 0
[02:30:14] <johnny> so it'd really be a data length pair
[02:30:44] <johnny> so it's actually 3 parts.  enum, string and string length
[02:31:27] <johnny> so i guess i'm missing what makes this so complicated. can't you just send the bytes?
[02:31:40] <Guest19> in which container should i assemble these 3
[02:31:57] <Guest19> my API needs char* and gives me char*
[02:31:59] <kalven> vector<char>
[02:32:00] <johnny> i don't see why you wouldn't at just start with a vector
[02:32:49] <Guest19> true lol. Let me do that
[02:33:25] <johnny> vector very nice
[02:34:40] <Guest19> so <enum><string len><string> right?
[02:37:01] <kalven> right, now you just need to decide on size and endianness for the length
[02:37:40] <Guest19> it'll be on same machine
[02:37:59] <Guest19> size I am thinking 1024 bytes should be good enough
[02:38:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[02:40:23] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:42:27] <kalven> wut
[02:42:45] <kalven> I mean the <string length> field, how big are you making it?
[02:43:41] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[02:43:57] *** Quits: AmR (~AmREiSa@41.36.185.103) (Quit: Konversation terminated!)
[02:46:49] <LordKalma> https://godbolt.org/z/PG1MEbexs
[02:46:51] <LordKalma> what about this?
[02:47:22] <LordKalma> ( + `return buffer` in the end )
[02:47:33] <LordKalma> https://godbolt.org/z/rWv3E73eq
[02:48:09] <Alipha> return a std::vector<char> instead of using new[] :-P
[02:49:13] <LordKalma> turns out the compiler expects errors without wrapping the last for in an `if(p.m)`
[02:51:49] <LordKalma> https://godbolt.org/z/bvfTj8zT8
[02:51:50] <LordKalma> happier?
[02:51:54] <LordKalma> / cc @Guest19
[02:52:06] *** Quits: navidr (uid112413@id-112413.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:53:03] <Guest19> thanks LordKalma!
[02:53:16] <LordKalma> take that just as an idea
[02:53:22] <LordKalma> I'm half asleep already
[02:53:32] <Guest19> haha that definitely helps
[02:53:37] *** Quits: romik (~romik@mm-135-105-125-178.mfilial.dynamic.pppoe.byfly.by) (Ping timeout: 240 seconds)
[02:54:00] <Alipha> Guest19: https://godbolt.org/z/v4qE43xd4
[02:54:14] <Alipha> oh, i forgot #include <algorithm> for std::copy
[02:54:20] <johnny> Guest19, the question is whether the string length is 16, 32, or 64 bits in length
[02:55:00] <johnny> err teh size of the data length field sorry
[02:55:29] <Guest19> err, my team lead told use json only
[02:55:30] <johnny> only you can know that, or how much it matters
[02:55:32] <Guest19> :|
[02:55:41] <johnny> well .. problem solved :) kinda
[02:55:44] <kalven> encode the length as a string and then do that as a length prefixed binary
[02:55:54] * kalven looks at the synergy protocol >:(
[02:55:56] <LordKalma> hahaha nice exercise on writing binary parsers, only to use json in the end
[02:56:15] <Guest19> its a good interview question actually
[02:56:34] <johnny> it feels rare to hear about bson
[02:56:35] <Guest19> thanks johnny, Alipha, LordKalma, kalven
[02:57:52] <LordKalma> fun fact, VISA/GPIB/IEEE-488, whatever you want to call it, sometimes uses string + binary in the same command
[02:59:02] <LordKalma> for example, to send a curve to a generator it's common to have to send `curve1:trace [length of raw data in ascii] [raw binary data]`
[02:59:49] <Alipha> Guest19: now with deserialization and error checking: https://godbolt.org/z/1evW8MedE
[02:59:53] <kalven> friends don't let friends design shitty protocols
[03:00:13] <LordKalma> self._visa_impl.write_binary_values(f":TRACe{channel}:DATA 1,0,", data, datatype="b", is_big_endian=True) # From a function I have around
[03:00:33] <LordKalma> kalven, VISA was written line in the 50s
[03:01:03] <kalven> yeah, people have been designing shitty protocols for all time
[03:01:06] <kalven> and will continue to do so
[03:01:22] <LordKalma> IEEE-488 seems to be from 1975 but it was a de-facto standard protocol in instruments long before that
[03:01:25] <Guest19> Alipha _/\_ thanks!
[03:01:42] *** Quits: hingwah (~hingwah@node-1w7jr9phwiwmvebhn9aitbh8b.ipv6.telus.net) (Remote host closed the connection)
[03:04:59] *** Quits: DSpider (~DSpider@82.79.237.8) (Quit: Leaving)
[03:06:20] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[03:08:04] <LordKalma> I have a lab instrument that requires you to send the data length and the bytes length, knowing very well it'll be single precision floats...
[03:08:43] <LordKalma> I think sometimes they are just messing with the users
[03:09:38] <sprout_> not a bad decision with rs232
[03:10:07] <LordKalma> It's a networked instrument
[03:10:36] <LordKalma> So, tcp
[03:10:47] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:12:06] <LordKalma> In fact modern instruments are just computers with windows and a touch screen in a weird box
[03:12:12] <kalven> if it's tcp then you at least need some framing in the protocol (unless your message format is always the same)
[03:13:39] <LordKalma> I get sending the number of bytes or the number of samples the raw data has. Both is just dumb
[03:16:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[03:17:41] *** Joins: ferdna (~ferdna@user/ferdna)
[03:18:17] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[03:21:48] *** Joins: chozorho (~chozorho@2601:146:300:c30::c70c)
[03:24:40] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[03:33:03] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[03:43:12] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:406f:781b:19d4:b814) (Ping timeout: 268 seconds)
[03:45:24] *** Quits: MarcusRoman (~Admin@37.120.232.44) (Quit: Konversation terminated!)
[04:00:02] *** Joins: causative (~halberd@user/causative)
[04:11:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:a9ff:dc19:c096:5ef5) (Ping timeout: 240 seconds)
[04:12:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[04:19:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:22:42] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[04:25:18] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:30:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073) (Ping timeout: 240 seconds)
[04:33:36] *** Joins: jkaye (~jkaye@2601:281:8300:7530:a78a:7d05:3820:99ae)
[04:34:37] *** Quits: Burgundy (~yomon@82.76.72.88) (Ping timeout: 240 seconds)
[04:36:38] *** Quits: zenstoic (uid461840@id-461840.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:43:14] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[04:51:43] *** Joins: jackblasted_ (~quassel@193.19.109.30)
[04:51:44] *** Quits: jackblasted (~quassel@193.19.109.30) (Ping timeout: 256 seconds)
[04:53:37] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:59:15] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[05:00:19] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[05:05:18] *** Joins: frost (~frost@user/frost)
[05:06:33] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[05:07:05] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[05:10:34] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:12:08] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[05:12:36] <RandomReader> it could be part of a larger more generic protocol .. or the data length could be trivial wrapper framing on top of another, existing protocol that's dispatched directly
[05:13:31] <RandomReader> doesn't make it not silly, but there's usually some kind of reason behind it
[05:22:14] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[05:22:15] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:24:38] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[05:26:06] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[05:30:37] *** Quits: dld (~davidlowr@2601:197:600:1210:a837:f325:7d6a:5246) (Ping timeout: 240 seconds)
[05:32:57] *** Joins: dld (~davidlowr@73.61.8.240)
[05:35:57] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:36:29] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:39:06] *** Joins: Xardas (~Xardas@149.233.51.127)
[05:40:37] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-25.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:40:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:59] *** ChanServ sets mode: +v npaperbot
[05:51:06] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-114.dsl.bell.ca)
[05:51:14] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[05:52:13] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[05:52:44] *** Joins: Xardas (~Xardas@149.233.51.127)
[05:55:21] *** Quits: Xardas (~Xardas@149.233.51.127) (Client Quit)
[05:55:49] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-114.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:55:53] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:57:30] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca)
[05:57:31] *** Joins: frost (~frost@user/frost)
[05:58:05] *** Joins: immibis_ (~hexchat@62.156.144.218)
[05:58:36] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 256 seconds)
[06:07:25] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[06:08:56] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:09:13] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:13:00] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:28:31] *** Joins: Fairy (~Fairy@2001:464a:4992:0:74d4:7e78:2b3a:4c42)
[06:39:38] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:40:42] *** Joins: frost (~frost@user/frost)
[06:42:04] *** Quits: gnomesort (~gnomesort@user/gnomesort) (Quit: ZNC - https://znc.in)
[06:43:42] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[06:45:04] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[06:46:16] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:50:01] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:59:20] *** Joins: asen (~asen@2408:821b:618:1a0:2cc1:43d3:3642:45c4)
[07:02:50] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[07:08:04] *** Quits: tobs (~tobs@taboege.de) (Ping timeout: 265 seconds)
[07:08:13] *** Joins: tobs (~tobs@taboege.de)
[07:20:31] *** Joins: adeliktas5 (~adeliktas@i59F4DFBF.versanet.de)
[07:22:16] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:22:28] *** Quits: adeliktas (~adeliktas@i59F5F66D.versanet.de) (Ping timeout: 256 seconds)
[07:22:29] *** adeliktas5 is now known as adeliktas
[07:28:13] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[07:29:52] *** Quits: xcm_ (~xcm@user/xcm) (Remote host closed the connection)
[07:30:24] *** Joins: xcm_ (~xcm@user/xcm)
[07:46:14] *** Joins: frost (~frost@user/frost)
[07:50:48] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[07:53:08] *** Joins: frost (~frost@user/frost)
[07:56:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:a78a:7d05:3820:99ae) (Ping timeout: 240 seconds)
[07:58:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[08:00:22] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[08:00:26] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[08:11:03] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[08:18:36] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:25:21] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:40f5:2114:f40e:465b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:27:15] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[08:31:01] *** Quits: Fairy (~Fairy@2001:464a:4992:0:74d4:7e78:2b3a:4c42) (Ping timeout: 240 seconds)
[08:31:07] *** Joins: NiD27 (~nid27@49.205.144.200)
[08:40:25] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:43:58] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[08:46:08] *** Joins: malloy (~jimery@116.30.220.175)
[08:55:03] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[08:55:06] *** Joins: Leo_V (~Leo@157.52.18.77)
[08:55:45] *** Joins: peeps (~peepsalot@openscad/peepsalot)
[08:57:32] *** Joins: WarauSalesman (~sjw@69.206.48.64)
[08:57:41] *** Joins: purplex_ (~purplex@user/purplex)
[08:58:04] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca)
[08:58:42] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[08:58:44] *** Joins: mattgirv_ (quassel@apps.fossgalaxy.com)
[08:59:23] *** Joins: Latexi95_ (late@banhammer.fi)
[08:59:41] *** Joins: MaddHatt1r (~maddhatt@user/maddhatter)
[09:00:05] *** Joins: ville_ (~ville@user/ville)
[09:00:36] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[09:00:54] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[09:01:51] *** Joins: gnomesort_ (~gnomesort@user/gnomesort)
[09:04:36] *** Joins: rmd_ (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[09:05:10] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (*.net *.split)
[09:05:10] *** Quits: gnomesort (~gnomesort@user/gnomesort) (*.net *.split)
[09:05:10] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca) (*.net *.split)
[09:05:10] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (*.net *.split)
[09:05:11] *** Quits: causative (~halberd@user/causative) (*.net *.split)
[09:05:11] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (*.net *.split)
[09:05:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[09:05:11] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (*.net *.split)
[09:05:11] *** Quits: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse) (*.net *.split)
[09:05:11] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (*.net *.split)
[09:05:11] *** Quits: udet_ (~udet@ve603.venus.servdiscount-customer.com) (*.net *.split)
[09:05:11] *** Quits: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com) (*.net *.split)
[09:05:11] *** Quits: ville (~ville@user/ville) (*.net *.split)
[09:05:11] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[09:05:11] *** Quits: Leone (~Leo@157.52.18.77) (*.net *.split)
[09:05:11] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[09:05:12] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[09:05:12] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (*.net *.split)
[09:05:12] *** Quits: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com) (*.net *.split)
[09:05:12] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (*.net *.split)
[09:05:12] *** Quits: Latexi95 (late@banhammer.fi) (*.net *.split)
[09:05:12] *** Quits: purplex (~purplex@user/purplex) (*.net *.split)
[09:05:12] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (*.net *.split)
[09:05:12] *** Quits: mattgirv (quassel@apps.fossgalaxy.com) (*.net *.split)
[09:05:12] *** Quits: DrMax_ (~DrMax@132.215.96.36) (*.net *.split)
[09:05:12] *** Quits: Friithian (~gunqqer@friithian.dev) (*.net *.split)
[09:05:12] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (*.net *.split)
[09:05:12] *** Quits: phoenix1 (~phoenix@user/phoenix) (*.net *.split)
[09:05:12] *** Quits: Soliton (~Soliton@wesnoth/developer/soliton) (*.net *.split)
[09:05:12] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[09:05:12] *** Quits: badone (~badone@209.132.189.152) (*.net *.split)
[09:05:13] *** Quits: Raziel (~Raziel@user/raziel) (*.net *.split)
[09:05:13] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (*.net *.split)
[09:05:13] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[09:05:13] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[09:05:13] *** Quits: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch) (*.net *.split)
[09:05:13] *** Quits: pa (~pah@user/pah) (*.net *.split)
[09:05:13] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (*.net *.split)
[09:05:13] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:05:46] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[09:09:25] *** Quits: MaddHatt1r (~maddhatt@user/maddhatter) (Ping timeout: 256 seconds)
[09:09:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[09:09:25] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 256 seconds)
[09:09:57] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:09:59] *** Quits: rmd_ (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[09:10:13] *** Joins: causative_ (~halberd@98.118.7.200)
[09:10:13] *** Joins: Stryyker (~stryyke1@ppp118-209-75-131.hba-tec-tas-bras32.tpg.internode.on.net)
[09:10:13] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[09:10:13] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[09:10:13] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[09:10:13] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[09:10:13] *** Joins: udet_ (~udet@ve603.venus.servdiscount-customer.com)
[09:10:13] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[09:10:13] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[09:10:13] *** Joins: Friithian (~gunqqer@friithian.dev)
[09:10:13] *** Joins: phoenix1 (~phoenix@user/phoenix)
[09:10:13] *** Joins: Soliton (~Soliton@wesnoth/developer/soliton)
[09:10:13] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[09:10:13] *** Joins: badone (~badone@209.132.189.152)
[09:10:13] *** Joins: Raziel (~Raziel@user/raziel)
[09:10:13] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[09:10:13] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[09:10:13] *** Joins: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch)
[09:10:13] *** Joins: pa (~pah@user/pah)
[09:10:13] *** Joins: flynn (~mcbloch@user/flynn)
[09:10:32] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[09:10:45] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Max SendQ exceeded)
[09:10:53] *** Joins: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com)
[09:11:04] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[09:11:09] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[09:11:19] *** Joins: DrMax_ (~DrMax@132.215.96.36)
[09:11:24] *** Joins: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com)
[09:11:31] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:14:10] *** Quits: elemongw (~elemongw@20.107.36.50) (Ping timeout: 260 seconds)
[09:16:56] *** Quits: pa (~pah@user/pah) (Ping timeout: 256 seconds)
[09:21:31] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[09:24:05] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[09:32:54] *** Joins: romik (~romik@178.125.105.135)
[09:33:05] *** Quits: romik (~romik@178.125.105.135) (Max SendQ exceeded)
[09:33:59] *** Joins: romik (~romik@mm-135-105-125-178.mfilial.dynamic.pppoe.byfly.by)
[09:34:09] *** Quits: romik (~romik@mm-135-105-125-178.mfilial.dynamic.pppoe.byfly.by) (Max SendQ exceeded)
[09:34:32] *** Joins: romik (~romik@mm-135-105-125-178.mfilial.dynamic.pppoe.byfly.by)
[09:39:08] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[09:40:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:59] *** ChanServ sets mode: +v npaperbot
[09:44:56] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[09:45:14] <lpapp> hi, the loads of square brackets in Mac specific C++ code is C++ attributes or what? https://stackoverflow.com/questions/34562621/cannot-set-view-for-nsopenglcontext
[09:45:36] <lpapp> Stuff like this: Delegate* dlg = [[Delegate alloc] init];
[09:46:22] <InPhase> That's objective C, not C++.
[09:47:03] <lpapp> Yes, but this construct also occurs in C++.
[09:47:50] <lpapp> so, the question is the same, really.
[09:48:31] <InPhase> Nothing like that appears in C++.
[09:48:55] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[09:50:18] <lpapp> oh, yes, it does
[09:50:33] <TinoDidriksen> Objective C++ is definitely a thing.
[09:50:50] <lpapp> e.g.: https://bpa.st/K5FA
[09:51:41] <InPhase> Well sure Objective-C++ exists, but that's yet a third totally separate language.  :)
[09:51:51] <lpapp> ah, maybe this: add_compile_options(-x objective-c++)
[09:57:49] <Ameisen> Yeah, it could be Objective C++.
[09:57:51] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (Ping timeout: 245 seconds)
[09:57:57] <Ameisen> We used Objective C++ for our iOS hooks.
[09:58:27] <Ameisen> I remember it vividly because, to this day, I had no idea how the message passing worked and the fact that what I wrote mostly functioned was amazing.
[10:00:42] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[10:01:31] *** Joins: cpuid (~cpuid@co5.at)
[10:01:31] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[10:01:31] *** Joins: cpuid (~cpuid@user/cpuid)
[10:03:21] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[10:04:42] *** Joins: elemongw (~elemongw@20.107.36.50)
[10:06:10] *** Joins: HvszrStykp (~X@81.171.62.86)
[10:13:35] *** Joins: pah (~pah@user/pah)
[10:14:11] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[10:20:21] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[10:25:57] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[10:28:40] *** Joins: Fairy (~Fairy@2001:464a:4992:0:74d4:7e78:2b3a:4c42)
[10:29:04] *** Joins: jsbach (~jsbach@2a01:c23:65fb:5700:3681:a53f:1075:8963)
[10:32:35] *** Quits: asen (~asen@2408:821b:618:1a0:2cc1:43d3:3642:45c4) (Quit: Leaving)
[10:33:15] *** Joins: jsbach_ (~jsbach@2a01:c23:65fb:5700:1909:e50e:4289:5972)
[10:33:25] *** Quits: jsbach (~jsbach@2a01:c23:65fb:5700:3681:a53f:1075:8963) (Ping timeout: 240 seconds)
[10:35:15] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:38:50] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:40:25] *** ville_ is now known as ville
[10:40:36] *** Joins: EdFletcher (~PKD@user/edfletcher)
[11:06:33] <ville> lpapp: what is your "the question"?
[11:13:23] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:13:44] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:38fc:88e4:b26c:517)
[11:18:51] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[11:24:02] *** Quits: nshire (~nshire@user/nshire) (Read error: Connection reset by peer)
[11:31:02] <ville> lpapp: http://www.eelis.net/c++draft/dcl.attr#:attribute
[11:35:01] *** Quits: proller (~p@2a02:6b8:b081:12::1:8) (Ping timeout: 240 seconds)
[11:35:38] *** Joins: oknenavin (~nomo@95.87.208.95)
[11:41:51] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:410:b257:d310:4a8f) (Ping timeout: 256 seconds)
[11:42:05] <cbreak> lpapp: that's the objective-c(++) equivalent of new Delegate
[11:42:23] <cbreak> well... actually, make_shared<Delegate>()
[11:45:14] *** Joins: PJBoy (~PJBoy@user/pjboy)
[11:51:56] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[11:53:08] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:54:20] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[11:57:18] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d15a:88a1:e780:f469)
[11:59:27] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:09:10] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Remote host closed the connection)
[12:13:01] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:13:03] *** Joins: andreasbuhr (~quassel@p549dbcc9.dip0.t-ipconnect.de)
[12:20:48] *** Quits: udet_ (~udet@ve603.venus.servdiscount-customer.com) (Remote host closed the connection)
[12:21:48] *** Joins: udet_ (~udet@ve603.venus.servdiscount-customer.com)
[12:30:48] *** Joins: robod34 (~Username@79.113.195.239)
[12:31:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:74d4:7e78:2b3a:4c42) (Ping timeout: 240 seconds)
[12:34:02] *** Joins: AmR (~AmREiSa@41.36.185.103)
[12:34:37] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:37:11] *** Quits: chozorho (~chozorho@2601:146:300:c30::c70c) (Quit: WeeChat 3.0)
[12:39:26] <LordKalma> !fact
[12:39:27] <nolyc> LordKalma: Implementations are encouraged to provide such behavior as it is defined by POSIX.
[12:40:05] <LordKalma> hahah that factoid would have been better with the sentence before it
[12:40:40] <ville> sounds like filesystem
[12:43:51] <leduyquang753> Microsoft says no.
[12:45:17] <ville> TinoDidriksen: nolyc is using c++17 for the !fact database?
[12:45:56] <ville> (the wording on that has changed since)
[12:46:45] <TinoDidriksen> !aka show fact
[12:46:45] <nolyc> TinoDidriksen: Web title <concat http://eel.is/c++/14882/ <concat <math calc (<at> * 19) % 1000 > .html>>
[12:48:39] <PJBoy> so it's down to eelis then
[12:49:03] <TinoDidriksen> Indeed
[12:50:56] *** Joins: proller (~p@2a02:6b8:0:40c:4191:4ffb:e128:c1f7)
[12:52:00] <Haohmaru> !fact
[12:52:01] <nolyc> Haohmaru: POSIX is a registered trademark of The IEEE.
[12:52:24] <Haohmaru> didn't know that.. so POSIX(tm)
[12:53:15] <Haohmaru> i guess they want $$$ to give you the posix papers/specs
[12:53:33] <LordKalma> that would require a trademark
[12:53:36] <LordKalma> standards cost money
[12:53:48] <LordKalma> the C++ standard costs money, that's why you have the open standard websites
[12:55:45] *** purplex_ is now known as purplex
[13:10:13] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:34] <ville> POSIX is ~5000 pages...
[13:13:37] *** Quits: gnomesort_ (~gnomesort@user/gnomesort) (Ping timeout: 240 seconds)
[13:14:19] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[13:14:22] <ville> producing that volume of technical text isn't going to be with out a cost
[13:17:13] <ville> but you would tm things for other reasons than getting money. so you've the power to decide what is or isn't "X".
[13:22:09] *** Quits: Figworm (FiggyWitIt@user/figworm) (Ping timeout: 256 seconds)
[13:23:21] <cbreak> trademarks are important to help prevent consumer / user confusion
[13:23:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:24:58] <fiesh> then it's posix(R), not posix(TM), since adding (TM) is just done to make things look official, nothing more :)
[13:25:44] <LordKalma> trademarks don't have to be reegistered to be trademarks
[13:25:48] <LordKalma> you just have to use them
[13:26:02] <LordKalma> but yeah, registered stuff is (R) :)
[13:26:50] <PJBoy> (TM) is the "patent pending" of registered names
[13:27:21] <LordKalma> fuck qt designer
[13:28:21] <fiesh> PJBoy: no not at all, many if not most (TM)s are never registered
[13:28:39] <PJBoy> :(
[13:28:43] <PJBoy> fair enough
[13:31:30] <LordKalma> and yet they are defensable anyway
[13:38:44] * PJBoy is gonna do some personal project work today
[13:38:51] <PJBoy> lets see what goes wrong in today's episode
[13:40:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:59] *** ChanServ sets mode: +v npaperbot
[13:41:01] *** Joins: Figworm (FiggyWitIt@user/figworm)
[13:42:49] <PJBoy> ...my visual studio hotkeys are different
[13:42:57] <xkoncek> unordered_map still does one heap allocation per insert
[13:43:16] <PJBoy> yeah it always allocates a node
[13:43:59] <PJBoy> allowing for immovable objects
[13:44:11] <PJBoy> and reference stability
[13:45:01] <xkoncek> weird, because iterators are indeed invalidated
[13:45:06] <xkoncek> because possible rehash
[13:45:17] <xkoncek> but that is probably just relinking some noes
[13:45:19] <xkoncek> nodes
[13:45:27] <PJBoy> yeah iterators still get invalidated
[13:45:32] <PJBoy> yeah
[13:46:31] <xkoncek> it is funny how many approaches you can take and each will give you quite different performance in different scenarios and behave differently
[13:47:46] <xkoncek> like the std apprach is usable for immovable or huge objects, not so much for pointers
[13:50:45] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:38fc:88e4:b26c:517) (Remote host closed the connection)
[13:51:08] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:524:56c7:454:8252)
[14:02:18] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:03:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:04:19] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[14:05:51] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:22:13] *** Joins: sigma_ (~sigma@164.215.223.95)
[14:26:54] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[14:27:29] <sigma_> hi guys, i have question if i make object like: ( class *obj = new class; ) it is create object on dynamic ram but if i make object like : ( class object; ) it is create on static or dynamic ram? because i heard some advice about "new" they say can be risky
[14:27:53] <Haohmaru> static ram?
[14:28:04] <Haohmaru> sigma_ what platform are you on?
[14:28:42] <sigma_> linux but it is can be different?
[14:28:56] *** Joins: Fairy (~Fairy@2001:464a:4992:0:74d4:7e78:2b3a:4c42)
[14:29:04] <Haohmaru> so, on "PC" generally, your whole program is loaded into RAM, and is executed from RAM
[14:30:29] <Haohmaru> if you declare a temporary variable (in a function) it'll be allocated as part of the function's "stack", if it's a global variable - it'll be allocated in the beginning of your program's life (not on the stack)
[14:31:10] <Haohmaru> if it's "very big" you wouldn't wanna have it in neither of those places, that's where you'd allocate it dynamically (then it goes to the "heap")
[14:31:22] <Haohmaru> all of those 3 places are in RAM.. on a PC
[14:31:51] <Haohmaru> (on other platforms it may be slightly different)
[14:32:45] <sigma_> you say any function have own stack
[14:33:06] <Haohmaru> about the risky thing.. if you use global and temporary variables, the compiler deals with your objects' lifetime
[14:33:48] <Haohmaru> when you use dynamic memory allocation, that's done at runtime, and it is unknown whether it'll succeed, what the result would be..
[14:34:08] <Haohmaru> the compiler in particularly cannot know what's gonna happen at runtime, it cannot help you much
[14:34:28] <Haohmaru> so you have to deal with the allocated memory's lifetime (and people often f*ck that up)
[14:37:04] <Haohmaru> the simple solution is to avoid directly dealing with dynamic memory as much as possible, and use specialised things that deal with that, like, std:: "containers" when you need containers
[14:37:48] <Haohmaru> std::vector does the dynamic allocation and deallocation, and you're less likely to make mistakes using it, compared to if you used new/delete by hand
[14:38:06] <Haohmaru> ..as one example
[14:39:59] <sigma_> memroy life time is defined by os or programer, if i dont use delete it can be delete by os
[14:41:46] <Haohmaru> if you have like a Paint program, and you load image files into memory, so the user can draw stuff with the pencil, you'd use dynamic memory to hold the image buffers.. on a long session, the user might load several different images, save them, close them, load another one, etc..
[14:42:36] <Haohmaru> if you fail or forget to delete [] those allocated buffers, that's a memory leak, and your Paint program's memory usage is only gonna grow as each next image is loaded, eventually the user will run out of RAM
[14:43:10] <Haohmaru> now imagine a memory leak inside a text parser
[14:47:58] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[14:50:12] *** Joins: supernova (~quassel@2405:9800:ba11:6207:e75a:5680:96e5:2164)
[14:50:48] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:53:32] <sigma_> i know about forget delete a variable and tnx about your info
[14:54:10] *** Joins: Burgundy (~yomon@82.76.72.88)
[14:56:35] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:524:56c7:454:8252) (Quit: Konversation terminated!)
[15:00:46] *** Quits: proller (~p@2a02:6b8:0:40c:4191:4ffb:e128:c1f7) (Ping timeout: 245 seconds)
[15:01:28] <RandomReader> C++ classifies things in terms of "storage duration": https://en.cppreference.com/w/cpp/language/storage_duration#Storage_duration
[15:03:13] <RandomReader> it doesn't specify where it's physically stored, just how it's managed, which is what's most important when writing code .. individual platforms will handle "where" differently, depending on their needs
[15:03:40] <RandomReader> that also means the syntax alone doesn't tell you much, it depends on the surrounding context
[15:05:29] *** Joins: DSpider (~DSpider@82.79.237.16)
[15:08:16] *** Joins: paul424 (~tom@ip-5-172-234-27.multi.internet.cyfrowypolsat.pl)
[15:11:25] <sigma_> if i make object or variable in { obj or var  } and i call agian function they are be maked again, i know they are save on stack but they are in case:{ here }; i want each time make a new object with out use new
[15:12:42] <Haohmaru> { int a = 5; } // no new used
[15:12:43] <geordi>  
[15:13:22] *** Joins: proller (~p@2a02:6b8:0:40c:103:189c:e644:4501)
[15:13:47] <Haohmaru> { vector<int> v { 5 }; } // no new used for the vector, but vector itself uses new for that int (and may allocate some extra capacity in case you might add more ints)
[15:13:48] <geordi>  
[15:26:55] <LordKalma> the magic of value semantics
[15:34:12] <PJBoy> wtf microsoft
[15:34:23] <PJBoy> I copied this msdn URL only a few days ago
[15:34:26] <PJBoy> and it's invalid now
[15:35:45] <LordKalma> that's msdn for you
[15:35:52] <LordKalma> and they removed pdf export
[15:36:33] <PJBoy> I never even knew about that one actually
[15:37:37] <PJBoy> oh the URL was fine
[15:37:43] <PJBoy> it just ends in a closing parenthesis
[15:38:03] <PJBoy> and my IDE was like "eh that's probably not part of the URL"
[15:39:28] <Haohmaru> your IDE will not receive presents from Santa
[15:39:48] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:42:15] <PJBoy> good
[15:48:10] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[15:50:18] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[15:53:52] *** Joins: jackblasted (~quassel@193.19.109.30)
[15:53:57] *** Quits: jackblasted_ (~quassel@193.19.109.30) (Ping timeout: 268 seconds)
[16:00:23] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:06:20] *** Quits: sigma_ (~sigma@164.215.223.95) (Quit: Konversation terminated!)
[16:07:42] *** Joins: magla (~gelignite@55d48ba2.access.ecotel.net)
[16:16:01] *** Joins: aakashi2001 (~aakashi20@103.61.255.0)
[16:16:01] *** Quits: aakashi2001 (~aakashi20@103.61.255.0) (Changing host)
[16:16:01] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[16:16:19] *** Joins: aakashi2009 (~aakashi20@103.61.255.0)
[16:16:19] *** Quits: aakashi2009 (~aakashi20@103.61.255.0) (Changing host)
[16:16:19] *** Joins: aakashi2009 (~aakashi20@user/aakashi2001)
[16:19:38] *** Joins: jokoon (~jokoon@185.61.188.186)
[16:29:12] *** Quits: paul424 (~tom@ip-5-172-234-27.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[16:30:26] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[16:30:28] *** Joins: ashafq_ (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[16:38:13] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:41:27] <xkoncek> does it make sense to introduce additional complexity and make my calls to sendto asynchronous?
[16:41:41] <xkoncek> given that it is upd
[16:41:45] <xkoncek> udp
[16:42:33] *** Quits: jokoon (~jokoon@185.61.188.186) (Remote host closed the connection)
[16:44:37] <xkoncek> my benchmarks show that it really only takes roughly 6 microseconds
[16:57:04] *** pah is now known as pa
[17:04:41] <fiesh> I'm sure your operating system is free to make this take indefinitely in case of some network congestion -- if that's done as of now anywhere for UDP is hard to say
[17:08:05] *** Quits: zvijezda (~Foobar@c-98-203-220-45.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[17:08:45] *** Joins: Simplar (~Simplar@188.163.93.76)
[17:12:09] <ville> xkoncek: what's it going to do? copy your buffer and return? you're probably chopping up your buffers to ~1400 bytes already anyway so the copying won't take much
[17:12:32] *** Quits: NiD27 (~nid27@49.205.144.200) (Quit: Leaving)
[17:13:58] <xkoncek> yeah, i am already planning on sending short messages only (< 500 bytes)
[17:14:00] <fiesh> if it shouldn't block, setting it to non-blocking and simply ignoring EAGAIN seems like a better approach.  UDP's lossy anyway, so EAGAIN might as well be ignored and handled just like packet loss.
[17:15:29] *** Quits: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch) (Quit: ZNC 1.8.2 - https://znc.in)
[17:15:51] <xkoncek> fiesh if it is sent no nonblocking, will it still block at least until the data are copied over to the kernel side?
[17:16:00] <xkoncek> *to nonblocking
[17:17:12] <fiesh> xkoncek: no idea if that's specified, I doubt it, but I also doubt that's a performance issue
[17:18:54] *** Joins: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch)
[17:23:42] <xkoncek> no, it is a matter of leaving the scope of that character array
[17:24:49] <fiesh> oh that's what you're talking about -- yeah you don't have to keep that buffer around until the end of days ;-)
[17:31:36] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:32:03] *** Quits: dld (~davidlowr@73.61.8.240) (Ping timeout: 256 seconds)
[17:33:59] *** Joins: dld (~davidlowr@73.61.9.64)
[17:40:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:02] *** ChanServ sets mode: +v npaperbot
[17:41:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:52:18] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:54:57] *** Quits: aakashi2009 (~aakashi20@user/aakashi2001) (Ping timeout: 240 seconds)
[17:54:57] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Ping timeout: 240 seconds)
[17:59:05] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6a7d:d789:f2c1:154c)
[18:04:48] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:08:52] *** Joins: xkuru (~xkuru@user/xkuru)
[18:14:49] *** Joins: pulse (~pulse@user/pulse)
[18:18:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:26:32] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[18:31:29] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:32:35] *** Quits: Fairy (~Fairy@2001:464a:4992:0:74d4:7e78:2b3a:4c42) (Ping timeout: 250 seconds)
[18:35:15] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[18:37:34] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[18:40:35] *** Quits: ashafq_ (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Quit: Leaving)
[18:40:45] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[18:42:24] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[18:43:16] *** Quits: supernova (~quassel@2405:9800:ba11:6207:e75a:5680:96e5:2164) (Ping timeout: 245 seconds)
[18:54:00] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[18:58:23] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3d8d:2676:73ba:ffde)
[18:58:23] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3d8d:2676:73ba:ffde) (Changing host)
[18:58:23] *** Joins: skapata (~Skapata@user/skapata)
[19:02:04] *** Joins: biberu (~biberu@user/biberu)
[19:02:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[19:06:08] *** Joins: aakashi2001 (~aakashi20@103.61.255.0)
[19:06:08] *** Quits: aakashi2001 (~aakashi20@103.61.255.0) (Changing host)
[19:06:08] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[19:06:11] *** Joins: aakashi2009 (~aakashi20@user/aakashi2001)
[19:08:24] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Max SendQ exceeded)
[19:08:29] *** Quits: aakashi2009 (~aakashi20@user/aakashi2001) (Max SendQ exceeded)
[19:08:55] *** Joins: aakashi2009 (~aakashi20@103.61.255.0)
[19:08:55] *** Quits: aakashi2009 (~aakashi20@103.61.255.0) (Changing host)
[19:08:55] *** Joins: aakashi2009 (~aakashi20@user/aakashi2001)
[19:09:00] *** Joins: aakashi2001 (~aakashi20@103.61.255.0)
[19:09:00] *** Quits: aakashi2001 (~aakashi20@103.61.255.0) (Changing host)
[19:09:00] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[19:11:08] *** Quits: aakashi2009 (~aakashi20@user/aakashi2001) (Max SendQ exceeded)
[19:11:19] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Max SendQ exceeded)
[19:11:35] *** Joins: aakashi2009 (~aakashi20@103.61.255.0)
[19:11:35] *** Quits: aakashi2009 (~aakashi20@103.61.255.0) (Changing host)
[19:11:35] *** Joins: aakashi2009 (~aakashi20@user/aakashi2001)
[19:11:45] *** Joins: aakashi2001 (~aakashi20@103.61.255.0)
[19:11:45] *** Quits: aakashi2001 (~aakashi20@103.61.255.0) (Changing host)
[19:11:45] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[19:12:39] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Remote host closed the connection)
[19:12:39] *** Quits: aakashi2009 (~aakashi20@user/aakashi2001) (K-Lined)
[19:17:02] *** Quits: dld (~davidlowr@73.61.9.64) (Ping timeout: 256 seconds)
[19:17:55] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[19:17:56] <Haohmaru> !fact
[19:17:57] <nolyc> Haohmaru: Many operations are volatile-qualified.
[19:18:56] *** Joins: dld (~davidlowr@2601:197:600:1210:aca6:8c80:35d5:4f3c)
[19:21:49] *** WarauSalesman is now known as BurumaSerafuku
[19:33:16] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 245 seconds)
[19:40:07] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 256 seconds)
[19:41:15] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:41:43] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:48:23] *** Quits: magla (~gelignite@55d48ba2.access.ecotel.net) (Quit: Stay safe!)
[19:54:30] <xkoncek> !fact
[19:54:32] <nolyc> xkoncek: The template-name shall name a class template that is not an injected-class-name.
[19:55:13] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:56:19] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[19:59:33] *** Joins: sigma_ (~sigma@86.57.96.85)
[20:01:08] <sigma_> hi, my lldb frame var doesn't work. i want see var in function or frame
[20:01:29] <rpav> it got optimized out?
[20:01:39] <sigma_> i need set a format?
[20:01:57] <rpav> perhaps be more descriptive than "doesn't work" .. what do you have, what do you see, what do you expect
[20:02:42] <rpav> (what code do you have, what output do you see when using lldb and the command for inspecting a frame and value, ...)
[20:02:58] <sigma_> i see nothing , any error or print but in doc https://lldb.llvm.org/use/variable.html is diffrent
[20:03:09] <rpav> so your monitor is off
[20:03:44] <rpav> if not, surely you see a window with lldb running, and a stack trace or similar, and the command you issued to get to a frame, and one you tried to get the variable
[20:04:04] <rpav> a screenshot / pastebin (not channel paste) of your lldb log would be useful
[20:04:54] <rpav> brb
[20:05:07] <sigma_> what did you mean manitor
[20:06:08] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[20:06:29] <Haohmaru> your TV
[20:08:49] <sigma_> your TV!!! , my console work and i see command but after enter the command it is like enter go to other line without anwser
[20:09:27] <sigma_> i need config some thing?
[20:12:29] <LordKalma> !fact
[20:12:30] <nolyc> LordKalma: A static ntmbs is an ntmbs with static storage duration.
[20:13:11] <cbreak> what's an ntmbs?
[20:14:05] <Alipha> sigma_: regarding your previous question, if you want an object to live longer than beyond the } it was defined in, you have to dynamically allocate. It's preferred to use std::unique_ptr or a container to dynamically allocate rather than using new yourself
[20:16:54] <Haohmaru> { int blah = 5; } // blah is local, it doesn't exist outside that { } scope, sigma_
[20:16:54] <geordi>  
[20:17:19] <sigma_> alipha: tnx about your anwser i research more about unique_ptr
[20:21:54] <LordKalma> sigma_, you might want to take a more sistematic approach, and read some
[20:22:00] <LordKalma> !give sigma_ books
[20:22:01] <nolyc> sigma_: A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[20:22:14] <LordKalma> or https://www.learncpp.com/
[20:22:28] <Haohmaru> what if he's book-o-phobic like me
[20:22:40] <LordKalma> learncpp.com then
[20:25:29] <rpav> Alipha: what if ... functors could preallocate space on the parent's stack for the function to use for "temporaries" that live beyond the call, but aren't dynamically allocated
[20:25:51] <rpav> (i mean i think they can, i'm just not sure how useful this is for anything at all)
[20:28:35] <epiktitos[m]> sigma do you have previous programming experience ?
[20:29:14] *** Joins: Fairy (~Fairy@2001:464a:4992:0:74d4:7e78:2b3a:4c42)
[20:29:17] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Ping timeout: 240 seconds)
[20:29:25] <epiktitos[m]> if so I would highly recommend gottschling's discovering modern c++ 2nd edition
[20:29:52] <epiktitos[m]> if no previous programming experience then learncpp is a good option
[20:30:36] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:ddf8:c3ca:7730:1473)
[20:33:52] <PJBoy> learncpp is good even with prior experience IMO
[20:34:07] <PJBoy> chapter on unsigneds notwithstanding
[20:34:16] *** Quits: unyu (~pyon@user/pyon) (Read error: Connection reset by peer)
[20:35:51] <Alipha> rpav: I mean, you could certainly design the api where the caller passes in memory to fill
[20:36:23] *** Joins: unyu (~pyon@user/pyon)
[20:37:23] <rpav> Alipha: well, we do that all the time .. slightly differently, you can make the caller give you memory automatically without the caller's intervention, which i guess we sortof do more often with lambdas
[20:41:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 250 seconds)
[20:43:01] *** Joins: supernova (~quassel@2405:9800:ba11:6207:257d:fbf2:fbc1:f8a5)
[20:43:31] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[20:46:49] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:49:55] *** Quits: letto (~letto@188.25.113.229) (Quit: Konversation terminated!)
[20:50:31] *** Joins: letto (~letto@188.25.113.229)
[20:50:38] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:55:19] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[20:58:49] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:10:55] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[21:13:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[21:16:52] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:27:09] *** immibis_ is now known as immibis
[21:31:01] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[21:31:36] *** Joins: magla (~gelignite@55d48ba2.access.ecotel.net)
[21:31:41] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:34:55] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:ddf8:c3ca:7730:1473) (Quit: Konversation terminated!)
[21:40:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:03] *** ChanServ sets mode: +v npaperbot
[21:42:31] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Ping timeout: 256 seconds)
[21:47:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[21:48:09] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[21:54:37] *** Quits: supernova (~quassel@2405:9800:ba11:6207:257d:fbf2:fbc1:f8a5) (Ping timeout: 240 seconds)
[21:56:13] *** Joins: kaichiuc1u (~kaichiuch@144.202.8.127)
[21:59:37] *** Joins: zagura__ (~zagura@vps.zagura.pl)
[21:59:40] *** Joins: mattf_ (~mattf@li908-138.members.linode.com)
[22:05:15] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (*.net *.split)
[22:05:15] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6a7d:d789:f2c1:154c) (*.net *.split)
[22:05:15] *** Quits: jackblasted (~quassel@193.19.109.30) (*.net *.split)
[22:05:15] *** Quits: DrMax_ (~DrMax@132.215.96.36) (*.net *.split)
[22:05:15] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (*.net *.split)
[22:05:16] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (*.net *.split)
[22:05:16] *** Quits: Terminus (~null@user/terminus) (*.net *.split)
[22:05:16] *** Quits: Nixx (~quassel@bulbasaur.sjorsgielen.nl) (*.net *.split)
[22:05:16] *** Quits: DrMax (~DrMax@node-1w7jra94757g29esa3u7gobxk.ipv6.telus.net) (*.net *.split)
[22:05:16] *** Quits: kaichiuchu (~kaichiuch@user/kaichiuchu) (*.net *.split)
[22:05:16] *** Quits: NyB (~archon@2a02:169:1d9::1:0:0) (*.net *.split)
[22:05:16] *** Quits: NOTevil (~notevil@user/notevil) (*.net *.split)
[22:05:16] *** Quits: BrandonArnold1 (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com) (*.net *.split)
[22:05:17] *** Quits: meicceli (meicceli@kapsi.fi) (*.net *.split)
[22:05:17] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: noent (~quassel@squint.a-oben.org) (*.net *.split)
[22:05:17] *** Quits: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) (*.net *.split)
[22:05:17] *** Quits: amosbird (~amosbird@13.75.119.182) (*.net *.split)
[22:05:17] *** Quits: mIGu (mig21@user/naur) (*.net *.split)
[22:05:17] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[22:05:17] *** Quits: sauce (~sauce@omae.wa.mou.shindei.ru) (*.net *.split)
[22:05:17] *** Quits: comrad (~quassel@holarse/comrad) (*.net *.split)
[22:05:18] *** Quits: xq (~xq@user/xq) (*.net *.split)
[22:05:18] *** Quits: prime- (~prime@user/prime) (*.net *.split)
[22:05:18] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[22:05:18] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) (*.net *.split)
[22:05:18] *** Quits: psb_ (sid500598@id-500598.ilkley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: mort (~mort@188.166.114.29) (*.net *.split)
[22:05:18] *** Quits: micronn (~micronn@user/micronn) (*.net *.split)
[22:05:18] *** Quits: fiesh (~fiesh@2003:fb:1018::21) (*.net *.split)
[22:05:18] *** Quits: rouji (~rouji@x0.at) (*.net *.split)
[22:05:19] *** Quits: TinoDidriksen (~TinoDidri@tinodidriksen.com) (*.net *.split)
[22:05:19] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (*.net *.split)
[22:05:19] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (*.net *.split)
[22:05:19] *** Quits: teepee (~teepee@openscad/teepee) (*.net *.split)
[22:05:19] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (*.net *.split)
[22:05:19] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (*.net *.split)
[22:05:19] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[22:05:19] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[22:05:19] *** Quits: imMute (~immute@user/immute) (*.net *.split)
[22:05:19] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[22:05:20] *** Quits: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi) (*.net *.split)
[22:05:20] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[22:05:20] *** Quits: jbalint_ (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7) (*.net *.split)
[22:05:20] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[22:05:20] *** Quits: kurfen (~kurfen@176.119.195.10) (*.net *.split)
[22:05:20] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[22:05:20] *** Quits: Kebianizao (~Kebianiza@188.127.160.11) (*.net *.split)
[22:05:20] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (*.net *.split)
[22:05:21] *** Quits: sonOfRa (sonOfRa@user/sonofra) (*.net *.split)
[22:05:21] *** Quits: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io) (*.net *.split)
[22:05:21] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[22:05:21] *** Quits: andreyv (~andrey@user/andreyv) (*.net *.split)
[22:05:21] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[22:05:21] *** Quits: shenghi (~shenghi@chrysocolla.mutablevoid.org) (*.net *.split)
[22:05:21] *** Quits: sigma_ (~sigma@86.57.96.85) (*.net *.split)
[22:05:21] *** Quits: dld (~davidlowr@2601:197:600:1210:aca6:8c80:35d5:4f3c) (*.net *.split)
[22:05:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[22:05:21] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d15a:88a1:e780:f469) (*.net *.split)
[22:05:21] *** Quits: jsbach_ (~jsbach@2a01:c23:65fb:5700:1909:e50e:4289:5972) (*.net *.split)
[22:05:21] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (*.net *.split)
[22:05:21] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (*.net *.split)
[22:05:21] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[22:05:22] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[22:05:22] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: taiyu (~taiyu@user/taiyu) (*.net *.split)
[22:05:22] *** Quits: InPhase (~InPhase@openscad/inphase) (*.net *.split)
[22:05:22] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[22:05:22] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: renopt (~renopt@lisp.us.to) (*.net *.split)
[22:05:22] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (*.net *.split)
[22:05:22] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[22:05:23] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (*.net *.split)
[22:05:23] *** Quits: Simplar (~Simplar@188.163.93.76) (*.net *.split)
[22:05:23] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (*.net *.split)
[22:05:23] *** Quits: gnomesort (~gnomesort@user/gnomesort) (*.net *.split)
[22:05:23] *** Quits: oknenavin (~nomo@95.87.208.95) (*.net *.split)
[22:05:23] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[22:05:23] *** Quits: pa (~pah@user/pah) (*.net *.split)
[22:05:23] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (*.net *.split)
[22:05:23] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (*.net *.split)
[22:05:23] *** Quits: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[22:05:23] *** Quits: purplex (~purplex@user/purplex) (*.net *.split)
[22:05:23] *** Quits: Leo_V (~Leo@157.52.18.77) (*.net *.split)
[22:05:23] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (*.net *.split)
[22:05:23] *** Quits: xcm_ (~xcm@user/xcm) (*.net *.split)
[22:05:24] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (*.net *.split)
[22:05:24] *** Quits: etolier (~somewhere@202-65-84-142.ip4.superloop.com) (*.net *.split)
[22:05:24] *** Quits: mitch0 (~mitch@193-226-249-203.pool.digikabel.hu) (*.net *.split)
[22:05:24] *** Quits: johnny (~johnny@user/johnny) (*.net *.split)
[22:05:24] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[22:05:24] *** Quits: emerent (~quassel@p5b265a25.dip0.t-ipconnect.de) (*.net *.split)
[22:05:24] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (*.net *.split)
[22:05:24] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (*.net *.split)
[22:05:24] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[22:05:24] *** Quits: edr (~edr@user/edr) (*.net *.split)
[22:05:24] *** Quits: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net) (*.net *.split)
[22:05:24] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (*.net *.split)
[22:05:24] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (*.net *.split)
[22:05:25] *** Quits: jns (~x@user/jns) (*.net *.split)
[22:05:25] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[22:05:25] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (*.net *.split)
[22:05:25] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[22:05:25] *** Quits: rnsanchez (~rnsanchez@179.233.249.52) (*.net *.split)
[22:05:25] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[22:05:25] *** Quits: LangerJan (~jan@user/langerjan) (*.net *.split)
[22:05:25] *** Quits: lru (~lru@240.ip-51-79-50.net) (*.net *.split)
[22:05:25] *** Quits: beanzilla (~beanzilla@user/beanzilla) (*.net *.split)
[22:05:25] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[22:05:25] *** Quits: jaakkos_ (~jaakkos@88-113-244-153.elisa-laajakaista.fi) (*.net *.split)
[22:05:25] *** Quits: malinus_ (~malinus@172.245.158.16) (*.net *.split)
[22:05:25] *** Quits: bdt (~bdt@155.51-174-24.customer.lyse.net) (*.net *.split)
[22:05:25] *** Quits: mathu (~matt@user/mathu) (*.net *.split)
[22:05:25] *** Quits: Dijky (~Dijky@user/dijky) (*.net *.split)
[22:05:25] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[22:05:26] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[22:05:26] *** Quits: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com) (*.net *.split)
[22:05:26] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (*.net *.split)
[22:05:26] *** Quits: aeg (~aeg@215-052-180-159.dynamic.caiway.nl) (*.net *.split)
[22:05:26] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[22:05:26] *** Quits: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1) (*.net *.split)
[22:05:26] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (*.net *.split)
[22:05:27] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[22:05:27] *** Quits: chris123123 (~bnc123@streuwerte.de) (*.net *.split)
[22:05:27] *** Quits: HeTo (henkka@beer.modeemi.fi) (*.net *.split)
[22:05:27] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (*.net *.split)
[22:05:27] *** Quits: obiwahn (~heini@user/obiwahn) (*.net *.split)
[22:05:27] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[22:05:28] *** Quits: wielding (~wielding@user/wielding) (*.net *.split)
[22:05:28] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (*.net *.split)
[22:05:28] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[22:05:29] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (*.net *.split)
[22:05:29] *** Quits: Dragoon (~Dragoon@user/dragoon) (*.net *.split)
[22:05:29] *** Quits: m42e (~m42e@pb42.de) (*.net *.split)
[22:05:29] *** Quits: antto (~pewpew@imightbe.antonsavov.net) (*.net *.split)
[22:05:29] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[22:05:29] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[22:05:29] *** Quits: bv (~bv@user/bv) (*.net *.split)
[22:05:29] *** Quits: d12fk (~heiko@exit0.net) (*.net *.split)
[22:05:29] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (*.net *.split)
[22:05:30] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (*.net *.split)
[22:05:30] *** Quits: epony (~epony@user/epony) (*.net *.split)
[22:05:30] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[22:05:30] *** Quits: popocka[m] (~popockama@2001:470:69fc:105::1:546e) (*.net *.split)
[22:05:30] *** Quits: miklcct (~quassel@vps.miklcct.com) (*.net *.split)
[22:05:31] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[22:05:31] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (*.net *.split)
[22:05:31] *** Quits: tbe_loki (~loki@loki.codes) (*.net *.split)
[22:05:31] *** Quits: nolyc (~nolyc@tinodidriksen.com) (*.net *.split)
[22:05:31] *** Quits: cncr04s (~cncr04s@afxr.net) (*.net *.split)
[22:05:31] *** Quits: kalven (~calvin@2a02:470:84:102::24) (*.net *.split)
[22:05:32] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[22:05:32] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[22:05:32] *** Quits: manuels (~manuel@80.211.205.88) (*.net *.split)
[22:05:32] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[22:05:32] *** Quits: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d) (*.net *.split)
[22:05:32] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (*.net *.split)
[22:05:33] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[22:05:33] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[22:05:33] *** Quits: eck (~root@user/eck) (*.net *.split)
[22:05:33] *** Quits: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi) (*.net *.split)
[22:05:33] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[22:05:33] *** Quits: Khoyo (~khoyo@user/khoyo) (*.net *.split)
[22:05:34] *** Quits: markand (~markand@markand.fr) (*.net *.split)
[22:05:34] *** Quits: geordi (~geordi@tinodidriksen.com) (*.net *.split)
[22:05:34] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[22:05:34] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (*.net *.split)
[22:05:34] *** Quits: Roughy (~mdaw45ns@user/roughy) (*.net *.split)
[22:05:34] *** Quits: proller (~p@2a02:6b8:0:40c:103:189c:e644:4501) (*.net *.split)
[22:05:34] *** Quits: AmR (~AmREiSa@41.36.185.103) (*.net *.split)
[22:05:34] *** Quits: Youmu (uid129469@user/condy) (*.net *.split)
[22:05:34] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (*.net *.split)
[22:05:35] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[22:05:35] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (*.net *.split)
[22:05:35] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (*.net *.split)
[22:05:36] *** Quits: talisein (~talisein@user/talisein) (*.net *.split)
[22:05:36] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (*.net *.split)
[22:05:36] *** Quits: hackkitten (~hackkitte@94.31.103.136) (*.net *.split)
[22:05:36] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (*.net *.split)
[22:05:36] *** Quits: letto (~letto@188.25.113.229) (*.net *.split)
[22:05:36] *** Quits: Fairy (~Fairy@2001:464a:4992:0:74d4:7e78:2b3a:4c42) (*.net *.split)
[22:05:36] *** Quits: skapata (~Skapata@user/skapata) (*.net *.split)
[22:05:37] *** Quits: andreasbuhr (~quassel@p549dbcc9.dip0.t-ipconnect.de) (*.net *.split)
[22:05:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (*.net *.split)
[22:05:37] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (*.net *.split)
[22:05:37] *** Quits: cpuid (~cpuid@user/cpuid) (*.net *.split)
[22:05:37] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (*.net *.split)
[22:05:37] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca) (*.net *.split)
[22:05:37] *** Quits: peeps (~peepsalot@openscad/peepsalot) (*.net *.split)
[22:05:37] *** Quits: adeliktas (~adeliktas@i59F4DFBF.versanet.de) (*.net *.split)
[22:05:37] *** Quits: tobs (~tobs@taboege.de) (*.net *.split)
[22:05:37] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (*.net *.split)
[22:05:38] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (*.net *.split)
[22:05:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[22:05:38] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (*.net *.split)
[22:05:38] *** Quits: Cyp (~cyp@213.237.85.9) (*.net *.split)
[22:05:38] *** Quits: smeso (~smeso@user/smeso) (*.net *.split)
[22:05:38] *** Quits: Brewster (~Brewster@104.145.226.5) (*.net *.split)
[22:05:38] *** Quits: ethoxy (~root@bison.sh3ll.ru) (*.net *.split)
[22:05:38] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (*.net *.split)
[22:05:38] *** Quits: Guest8100 (~tinloaf@virt-no01.mrvm.net) (*.net *.split)
[22:05:38] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (*.net *.split)
[22:05:38] *** Quits: adeliktas78 (~adeliktas@v15153.1blu.de) (*.net *.split)
[22:05:38] *** Quits: BluesBoy (~bboy@user/bluesboy) (*.net *.split)
[22:05:38] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[22:05:38] *** Quits: RandomReader (~RandomRea@user/randomreader) (*.net *.split)
[22:05:39] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[22:05:39] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (*.net *.split)
[22:05:39] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[22:05:39] *** Quits: dblsaiko (~saiko@crispy.dblsaiko.net) (*.net *.split)
[22:05:39] *** Quits: autark (~autark@ti0048a400-0869.bb.online.no) (*.net *.split)
[22:05:39] *** Quits: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi) (*.net *.split)
[22:05:39] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (*.net *.split)
[22:05:39] *** Quits: traxex (traxex@user/traxex) (*.net *.split)
[22:05:39] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (*.net *.split)
[22:05:39] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[22:05:39] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[22:05:39] *** Quits: sonic1 (~sonic@user/sonic) (*.net *.split)
[22:05:39] *** Quits: syrius (syrius@titan.stormtek.net) (*.net *.split)
[22:05:39] *** Quits: zoraj (~zoraj@209.126.81.159) (*.net *.split)
[22:06:45] *** Quits: zagura__ (~zagura@vps.zagura.pl) (Quit: Reconnecting)
[22:08:44] *** Quits: elemongw (~elemongw@20.107.36.50) (Ping timeout: 256 seconds)
[22:09:43] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[22:09:43] *** Joins: zagura (~zagura@user/zagura)
[22:09:43] *** Joins: zenstoic (uid461840@id-461840.hampstead.irccloud.com)
[22:09:43] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[22:09:43] *** Joins: xq (~xq@user/xq)
[22:09:43] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[22:09:43] *** Joins: fiesh_ (~fiesh@2003:fb:1018::21)
[22:09:43] *** Joins: lpapp_ (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[22:09:43] *** Joins: fruitypunk1 (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[22:09:43] *** Joins: BrandonArnold2 (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com)
[22:09:43] *** Joins: micronnn (~micronn@user/micronn)
[22:09:43] *** Joins: meicceli1 (meicceli@kapsi.fi)
[22:09:43] *** Joins: Nixx_ (~quassel@bulbasaur.sjorsgielen.nl)
[22:09:43] *** Joins: prime (~prime@user/prime)
[22:09:43] *** Joins: msim__ (~msim@2001:8003:d194:d000::d8d)
[22:09:43] *** Joins: Ultrasauce (~sauce@omae.wa.mou.shindei.ru)
[22:09:43] *** Joins: comrad_ (~quassel@holarse/comrad)
[22:09:43] *** Joins: sven_ (~quassel@squint.a-oben.org)
[22:09:43] *** Joins: mIGu (mig21@user/naur)
[22:09:43] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[22:09:43] *** Joins: Terminus- (~null@user/terminus)
[22:09:43] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[22:09:43] *** Joins: TinoDidriksen (~TinoDidri@tinodidriksen.com)
[22:09:43] *** Joins: psb__ (sid500598@id-500598.ilkley.irccloud.com)
[22:09:43] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[22:09:43] *** Joins: mort (~mort@188.166.114.29)
[22:09:43] *** Joins: jkaye_ (~jkaye@2601:281:8300:7530:6a7d:d789:f2c1:154c)
[22:09:43] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[22:09:43] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[22:09:43] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:09:43] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[22:09:43] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:09:43] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[22:09:43] *** Joins: letto (~letto@188.25.113.229)
[22:09:43] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[22:09:43] *** Joins: unyu (~pyon@user/pyon)
[22:09:43] *** Joins: Fairy (~Fairy@2001:464a:4992:0:74d4:7e78:2b3a:4c42)
[22:09:43] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[22:09:43] *** Joins: dld (~davidlowr@2601:197:600:1210:aca6:8c80:35d5:4f3c)
[22:09:43] *** Joins: skapata (~Skapata@user/skapata)
[22:09:43] *** Joins: Simplar (~Simplar@188.163.93.76)
[22:09:43] *** Joins: Roughy (~mdaw45ns@user/roughy)
[22:09:43] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:09:43] *** Joins: proller (~p@2a02:6b8:0:40c:103:189c:e644:4501)
[22:09:43] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:09:43] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:09:43] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[22:09:43] *** Joins: AmR (~AmREiSa@41.36.185.103)
[22:09:43] *** Joins: andreasbuhr (~quassel@p549dbcc9.dip0.t-ipconnect.de)
[22:09:43] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d15a:88a1:e780:f469)
[22:09:43] *** Joins: oknenavin (~nomo@95.87.208.95)
[22:09:43] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[22:09:43] *** Joins: EdFletcher (~PKD@user/edfletcher)
[22:09:43] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[22:09:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[22:09:43] *** Joins: jsbach_ (~jsbach@2a01:c23:65fb:5700:1909:e50e:4289:5972)
[22:09:43] *** Joins: pa (~pah@user/pah)
[22:09:43] *** Joins: cpuid (~cpuid@user/cpuid)
[22:09:43] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[22:09:43] *** Joins: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com)
[22:09:43] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[22:09:43] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[22:09:43] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca)
[22:09:43] *** Joins: purplex (~purplex@user/purplex)
[22:09:43] *** Joins: peeps (~peepsalot@openscad/peepsalot)
[22:09:43] *** Joins: Leo_V (~Leo@157.52.18.77)
[22:09:43] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[22:09:43] *** Joins: xcm_ (~xcm@user/xcm)
[22:09:43] *** Joins: adeliktas (~adeliktas@i59F4DFBF.versanet.de)
[22:09:43] *** Joins: tobs (~tobs@taboege.de)
[22:09:43] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:09:44] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[22:09:44] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[22:09:44] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[22:09:44] *** Joins: Youmu (uid129469@user/condy)
[22:09:44] *** Joins: etolier (~somewhere@202-65-84-142.ip4.superloop.com)
[22:09:44] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[22:09:44] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[22:09:44] *** Joins: mitch0 (~mitch@193-226-249-203.pool.digikabel.hu)
[22:09:44] *** Joins: Cyp (~cyp@213.237.85.9)
[22:09:44] *** Joins: johnny (~johnny@user/johnny)
[22:09:44] *** Joins: noarb (~noarb@user/noarb)
[22:09:44] *** Joins: smeso (~smeso@user/smeso)
[22:09:44] *** Joins: teepee (~teepee@openscad/teepee)
[22:09:44] *** Joins: ethoxy (~root@bison.sh3ll.ru)
[22:09:44] *** Joins: Brewster (~Brewster@104.145.226.5)
[22:09:44] *** Joins: emerent (~quassel@p5b265a25.dip0.t-ipconnect.de)
[22:09:44] *** Joins: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net)
[22:09:44] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[22:09:44] *** Joins: Guest8100 (~tinloaf@virt-no01.mrvm.net)
[22:09:44] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[22:09:44] *** Joins: adeliktas78 (~adeliktas@v15153.1blu.de)
[22:09:44] *** Joins: epony (~epony@user/epony)
[22:09:44] *** Joins: BluesBoy (~bboy@user/bluesboy)
[22:09:44] *** Joins: aeg (~aeg@215-052-180-159.dynamic.caiway.nl)
[22:09:44] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[22:09:44] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[22:09:44] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[22:09:44] *** Joins: RandomReader (~RandomRea@user/randomreader)
[22:09:44] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[22:09:44] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[22:09:44] *** Joins: greenbagels (~gb@user/greenbagels)
[22:09:44] *** Joins: dblsaiko (~saiko@crispy.dblsaiko.net)
[22:09:44] *** Joins: autark (~autark@ti0048a400-0869.bb.online.no)
[22:09:44] *** Joins: dzz007 (~dzz007@user/dzz007)
[22:09:44] *** Joins: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi)
[22:09:44] *** Joins: edr (~edr@user/edr)
[22:09:44] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[22:09:44] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[22:09:44] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[22:09:44] *** Joins: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d)
[22:09:44] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[22:09:44] *** Joins: traxex (traxex@user/traxex)
[22:09:44] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[22:09:44] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[22:09:44] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[22:09:44] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[22:09:44] *** Joins: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt)
[22:09:44] *** Joins: wielding (~wielding@user/wielding)
[22:09:44] *** Joins: popocka[m] (~popockama@2001:470:69fc:105::1:546e)
[22:09:44] *** Joins: orkim (~orkim@user/orkim)
[22:09:44] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[22:09:44] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[22:09:44] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[22:09:44] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[22:09:44] *** Joins: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1)
[22:09:44] *** Joins: jns (~x@user/jns)
[22:09:44] *** Joins: Oxyd (~oxyd@user/oxyd)
[22:09:44] *** Joins: Dijky (~Dijky@user/dijky)
[22:09:44] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[22:09:44] *** Joins: mathu (~matt@user/mathu)
[22:09:44] *** Joins: bdt (~bdt@155.51-174-24.customer.lyse.net)
[22:09:44] *** Joins: malinus_ (~malinus@172.245.158.16)
[22:09:44] *** Joins: jaakkos_ (~jaakkos@88-113-244-153.elisa-laajakaista.fi)
[22:09:44] *** Joins: jkl1337 (~jkl@user/jkl)
[22:09:44] *** Joins: lru (~lru@240.ip-51-79-50.net)
[22:09:44] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[22:09:44] *** Joins: LangerJan (~jan@user/langerjan)
[22:09:44] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[22:09:44] *** Joins: rnsanchez (~rnsanchez@179.233.249.52)
[22:09:44] *** Joins: rb (~augh@theguntretort.com)
[22:09:44] *** Joins: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[22:09:44] *** Joins: Praise (~Fat@user/praise)
[22:09:44] *** Joins: shenghi (~shenghi@chrysocolla.mutablevoid.org)
[22:09:44] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[22:09:44] *** Joins: andreyv (~andrey@user/andreyv)
[22:09:44] *** Joins: computerquip (sid423484@user/computerquip)
[22:09:44] *** Joins: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io)
[22:09:44] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[22:09:44] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[22:09:44] *** Joins: Kebianizao (~Kebianiza@188.127.160.11)
[22:09:44] *** Joins: urdh (~urdh@user/urdh)
[22:09:44] *** Joins: kurfen (~kurfen@176.119.195.10)
[22:09:44] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[22:09:44] *** Joins: jbalint_ (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7)
[22:09:44] *** Joins: tabakhase (tabakhase@user/tabakhase)
[22:09:44] *** Joins: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi)
[22:09:44] *** Joins: xisop (~xisop@bnull.net)
[22:09:44] *** Joins: imMute (~immute@user/immute)
[22:09:44] *** Joins: celphi (sid97751@user/celphi)
[22:09:44] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[22:09:44] *** Joins: renopt (~renopt@lisp.us.to)
[22:09:44] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[22:09:44] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[22:09:44] *** Joins: Ara (~Ara@user/ara)
[22:09:44] *** Joins: InPhase (~InPhase@openscad/inphase)
[22:09:44] *** Joins: taiyu (~taiyu@user/taiyu)
[22:09:44] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[22:09:44] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[22:09:44] *** Joins: buhman (sid411355@user/buhman)
[22:09:44] *** Joins: Artea (~Lufia@artea.com.pt)
[22:09:44] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[22:09:44] *** Joins: Spydar007 (~spydar007@user/spydar007)
[22:09:44] *** Joins: obiwahn (~heini@user/obiwahn)
[22:09:44] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[22:09:44] *** Joins: HeTo (henkka@beer.modeemi.fi)
[22:09:44] *** Joins: chris123123 (~bnc123@streuwerte.de)
[22:09:44] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[22:09:44] *** Joins: d12fk (~heiko@exit0.net)
[22:09:44] *** Joins: bv (~bv@user/bv)
[22:09:44] *** Joins: Cienisty (Cienisty@user/cienisty)
[22:09:44] *** Joins: antto (~pewpew@imightbe.antonsavov.net)
[22:09:44] *** Joins: m42e (~m42e@pb42.de)
[22:09:44] *** Joins: tonitch (~tonitch@user/tonitch)
[22:09:44] *** Joins: Dragoon (~Dragoon@user/dragoon)
[22:09:44] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[22:09:44] *** Joins: klys (~mdasoh@show.op8.us)
[22:09:44] *** Joins: geordi (~geordi@tinodidriksen.com)
[22:09:44] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[22:09:44] *** Joins: markand (~markand@markand.fr)
[22:09:44] *** Joins: Khoyo (~khoyo@user/khoyo)
[22:09:44] *** Joins: FLHerne (flh@flherne.uk)
[22:09:44] *** Joins: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi)
[22:09:44] *** Joins: eck (~root@user/eck)
[22:09:44] *** Joins: jancoow (~jancoow@user/jancoow)
[22:09:44] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[22:09:44] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[22:09:44] *** Joins: cncr04s (~cncr04s@afxr.net)
[22:09:44] *** Joins: nolyc (~nolyc@tinodidriksen.com)
[22:09:44] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[22:09:44] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[22:09:44] *** Joins: miklcct (~quassel@vps.miklcct.com)
[22:09:44] *** Joins: tbe_loki (~loki@loki.codes)
[22:09:44] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[22:09:44] *** Joins: manuels (~manuel@80.211.205.88)
[22:09:44] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[22:09:44] *** Joins: deepy (deepy@user/deepy)
[22:09:44] *** Joins: talisein (~talisein@user/talisein)
[22:09:44] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[22:09:44] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[22:09:44] *** Joins: Karyon (~Karyon@user/karyon)
[22:09:44] *** Joins: zoraj (~zoraj@209.126.81.159)
[22:09:44] *** Joins: syrius (syrius@titan.stormtek.net)
[22:09:44] *** Joins: sonic1 (~sonic@user/sonic)
[22:09:44] *** molybdenum.libera.chat sets mode: +vv geordi nolyc
[22:10:30] *** Joins: amosbird (~amosbird@13.75.119.182)
[22:10:31] *** Quits: meicceli1 (meicceli@kapsi.fi) (Quit: WeeChat 3.3)
[22:10:31] *** Joins: meicceli (meicceli@kapsi.fi)
[22:10:34] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[22:10:36] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[22:10:36] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[22:10:41] *** Joins: DrMax_ (~DrMax@132.215.96.36)
[22:11:01] *** Joins: DrMax (~DrMax@node-1w7jra94757g035onllb9zbjp.ipv6.telus.net)
[22:11:08] *** Joins: NyB (~archon@2a02:169:1d9::1:0:0)
[22:11:08] *** Joins: jackblasted (~quassel@193.19.109.30)
[22:11:16] *** Joins: mort1 (~mort@188.166.114.29)
[22:13:07] *** Quits: mort (~mort@188.166.114.29) (Ping timeout: 256 seconds)
[22:13:07] *** mort1 is now known as mort
[22:14:54] *** Quits: proller (~p@2a02:6b8:0:40c:103:189c:e644:4501) (Ping timeout: 250 seconds)
[22:15:21] *** Quits: jsbach_ (~jsbach@2a01:c23:65fb:5700:1909:e50e:4289:5972) (Ping timeout: 245 seconds)
[22:17:05] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:19:25] *** Quits: AbleBacon_ (~AbleBacon@user/AbleBacon) (Ping timeout: 240 seconds)
[22:20:39] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:21:05] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Client Quit)
[22:21:19] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:22:36] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[22:23:25] *** Joins: nshire (~nshire@user/nshire)
[22:24:05] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[22:25:12] *** Joins: paul424 (~tom@ip-5-172-237-248.multi.internet.cyfrowypolsat.pl)
[22:26:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[22:26:05] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[22:27:45] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[22:30:22] *** Joins: rouji (~rouji@x0.at)
[22:31:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:74d4:7e78:2b3a:4c42) (Ping timeout: 240 seconds)
[22:35:06] *** Ultrasauce is now known as sauce
[22:35:18] *** Joins: elemongw (~elemongw@20.107.36.50)
[22:39:59] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[22:41:59] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Ping timeout: 250 seconds)
[22:42:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:49:19] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:56:35] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:00:09] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[23:00:25] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:08:31] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:08:48] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[23:11:51] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[23:13:01] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[23:14:23] *** Joins: proller (~p@2a02:6b8:b081:7216::1:2e)
[23:16:21] *** Quits: Stryyker (~stryyke1@ppp118-209-75-131.hba-tec-tas-bras32.tpg.internode.on.net) (Changing host)
[23:16:21] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[23:20:08] *** Quits: jackblasted (~quassel@193.19.109.30) (Ping timeout: 256 seconds)
[23:20:18] *** Joins: jackblasted (~quassel@45.131.194.21)
[23:25:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[23:26:44] *** Quits: paul424 (~tom@ip-5-172-237-248.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[23:26:49] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:28:11] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[23:30:37] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[23:32:16] *** AbleBacon_ is now known as AbleBacon
[23:32:22] *** Joins: jsbach (~jsbach@dynamic-078-055-255-101.78.55.pool.telefonica.de)
[23:44:31] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:47:53] *** Joins: gehn (~gehn@user/gehn)
[23:50:19] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[23:52:27] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[23:54:37] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
