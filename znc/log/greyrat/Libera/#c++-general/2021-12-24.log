[00:03:59] *** Joins: evocatus (~evocatus@62.182.78.42)
[00:07:48] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[00:08:17] <Guest64> I'm compiling
[00:08:22] <Guest64> diablo2 opensource
[00:08:27] <Guest64> https://github.com/eezstreet/OpenD2
[00:08:44] <Guest64> the thing really does not run because it missed SDL2 library
[00:08:48] <Guest64> I looked at CMakeLists and it has lines that choose library from the folder and it's there
[00:09:28] <Guest64> Set the "Where to build the files" to be ./Build. (This is so that the git repository doesn't pick this up as a source directory).
[00:09:40] <Guest64> I am unsure what's meant with ./Build here
[00:09:45] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[00:09:51] <CarloWood> You already said all that.
[00:10:07] <Guest64> yeah for people who joined
[00:10:37] <CarloWood> They mean: create a directory named Build in the source tree and use that as build directory.
[00:10:53] <CarloWood> Probably because there is a 'Build' in .gitignore
[00:11:12] <Guest64> I can't just use ordinary folder on desktop
[00:11:28] <Guest64> ?
[00:11:35] <Guest64> wait
[00:11:46] <CarloWood> You can use whatever you want as cmake build directory I think.
[00:15:26] <Guest64> yeah well, using linux term when compiling for windows weird
[00:15:49] <Friithian> that isn't really a linux term
[00:16:28] <CarloWood> What term?
[00:16:28] <Guest64> ./
[00:16:35] <Guest64> whatever
[00:16:41] <Guest64> I compiled into Build
[00:16:44] <Guest64> under source
[00:16:50] <Guest64> did not change missing library
[00:16:58] <Friithian> oh boy I don't have nvim setup correctly for c++ on my laptop, this'll be fun to figure out what the heck I did
[00:16:59] <CarloWood> A dot stands for 'current directory'.
[00:17:09] <CarloWood> I translated that to 'source directory' above.
[00:17:44] <Guest64> set(SDL2_LIBRARY_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Libraries/sdl/x64")
[00:17:46] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[00:18:00] <Guest64> set(SDL2_LIBRARY_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Libraries/sdl/x86")
[00:18:03] <Guest64> this is it
[00:18:28] <CarloWood> Looks like cmake
[00:18:46] <Guest64> yeah, I don't get why sdl
[00:18:50] <Guest64> is missing
[00:18:52] <CarloWood> cmake is portable - your window cmake.exe shoulbe able to parse it.
[00:19:09] <Guest64> I did everything
[00:19:16] <Guest64> as in website
[00:19:18] <CarloWood> You don't have Libraries/sdl in your git clone?
[00:19:24] <Guest64> it's there
[00:19:29] <CarloWood> empty?
[00:19:34] <Guest64> no
[00:19:37] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:19:51] <CarloWood> <Guest64> is missing
[00:19:52] <Guest64> there are plenty of files
[00:19:55] <CarloWood> what is missing then?
[00:20:08] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[00:20:11] <Guest64> the compiled exe is saying that
[00:20:18] <Guest64> sdl2.dll is missing
[00:20:56] <PJBoy> cmake doesn't handle providing the DLLs
[00:20:57] <Guest64> should I just copy them
[00:21:00] <PJBoy> yeah
[00:21:04] <Guest64> daaamn
[00:21:06] <Guest64> okay
[00:22:34] <Guest64> now they are there
[00:22:37] <Guest64> I am getting
[00:23:26] <Guest64> The application was not able to start correctly (0xc000007b)
[00:24:12] <Guest64> .lib files should be copied too
[00:24:17] <Guest64> or just .dll
[00:24:18] <Guest64> ?
[00:24:22] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:24:29] <PJBoy> missing MSVC C++ redistributable?
[00:24:58] <PJBoy> https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist
[00:25:54] <Guest64> I don't think so
[00:26:18] <Guest64> C:\Users\g\Desktop\OpenD2-master\Build\Release
[00:26:22] <Guest64> my files are here
[00:26:33] <Guest64> they might needed to be on program files
[00:26:40] <Guest64> https://github.com/eezstreet/OpenD2
[00:28:49] <Guest64> that did not help
[00:29:31] <Guest64> Uploaded file: https://uploads.kiwiirc.com/files/c15816b47feed4351b34607695386927/diablo2.png
[00:29:40] * PJBoy shrugs
[00:30:12] <Guest64> Uploaded file: https://uploads.kiwiirc.com/files/880e6510d477bd2a8418277f20036529/diablo2.png
[00:30:34] <Guest64> for sake of diablo
[00:31:12] <Guest64> In order to play, you must host a game in TCP/IP in vanilla Diablo 2 (version 1.10) and join it through the OpenD2 client. This is because OpenD2 does not have a serverside yet.
[00:31:18] <Guest64> what does this mean
[00:31:51] <Guest64> client?
[00:31:58] <Guest64> game.exe is all there is
[00:33:19] <Guest64> it's hour till christmas
[00:33:31] <Guest64> the weed livestream is bumping on youtube
[00:33:52] <Guest64> compiling opensource diablo is tragic
[00:33:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:33:59] <Guest64> must try 1 version
[00:43:29] *** Quits: kaph_ (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[00:50:29] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Quit: Leaving)
[00:50:38] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[00:59:08] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 252 seconds)
[01:03:08] *** Joins: tesuji (~quassel@2a02:908:180:9500:cd6:6ff7:865b:1bad)
[01:16:09] <rpav> is there really no good graph/node/edge layout library besides like, graphviz .. or are the algorithms to lay out nodes trivial? (seems dubious)
[01:23:58] <bv> graphviz holds the best I know of and I've looked for others many times in the past
[01:25:45] <rpav> its use is a bit limited
[01:26:14] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:27:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:959e:f772:789b:bf56)
[01:27:20] <Friithian> for header only libs, would it be bad to just throw them into /usr/include/ or is there a better way of doing it
[01:29:06] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[01:29:24] *** Joins: ravan (~ravan@user/ravan)
[01:29:37] <TinoDidriksen> Same as for any other lib - provide a pkgconfig or similar.
[01:30:30] <Friithian> I should rephrase: I am using a header only lib in a project I am working on, should I put it in /usr/include/ for myself and when other people are building leave it up to them to figure it out or what
[01:30:48] <kalven> vendor that shit
[01:31:04] <TinoDidriksen> Why doesn't it provide an installed helper?
[01:31:22] <rpav> ok there are some .. https://github.com/cneben/QuickQanava
[01:31:32] <Friithian> it may useâ€¦ coman? idk I don't use it
[01:31:36] <Friithian> conan?
[01:32:11] <rpav> Friithian: generally come up with some decent way to manage deps for your project (CPM.cmake is nice, especially for small/open source stuff) and/or just include it in your thing .. unless your thing is a library itself
[01:32:21] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:32:29] <TinoDidriksen> What library is it?
[01:32:33] <Friithian> argparse
[01:32:49] <Friithian> I've not heard of cpm.cmake
[01:33:23] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[01:34:27] <TinoDidriksen> Right, so it at least expects to go in a folder: <argparse/argparse.hpp> - then just set your include path to the parent of wherever you keep it.
[01:35:18] <Friithian> heck where am I going to keep it
[01:35:36] *** Joins: HvszrStykp (~X@81.171.62.82)
[01:35:47] <Friithian> why is managing the building of a program so much worse than writing and problem solving in it
[01:36:01] *** Quits: AmR (~AmREiSa@156.199.236.68) (Quit: Konversation terminated!)
[01:36:42] <hnOsmium0001[m]> Friithian: people usually "vendor" (aka copy) the dependencies to a folder called e.g. thirdparty/
[01:37:41] <hnOsmium0001[m]> in this case, you may want to get `${projectFolder}/thirdparty/argparse/include/argparse/argparse.hpp`, and the add `${projectFolder}/thirdparty/argparse/` to your include path
[01:37:57] <hnOsmium0001[m]> sorry  `${projectFolder}/thirdparty/argparse/include`
[01:38:49] <Friithian> and that's all fine and dandy to have in the git repo? shipping (one of) the deps with it
[01:38:56] <hnOsmium0001[m]> you could throw it in /usr/include, but trust me it's going to be a pain when either your package manager puts something there, or when you do a reinstall and have to figure out dependencies again...
[01:39:24] <Karyon> Or you could install it in `/usr/local/include` since `/usr/include` is managed by the system
[01:39:38] <Friithian> hah, both my desktop and laptop are so badly configured all to hell that this would be a minor issue comparitively
[01:39:42] <hnOsmium0001[m]> Friithian: it's common yes, your other option is to add https://github.com/p-ranav/argparse.git as a submodule in thirdparty/
[01:39:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:01] <Friithian> oh yeah I could do that
[01:40:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:05] *** ChanServ sets mode: +v npaperbot
[01:41:18] <Friithian> aight for now I'll throw it into/usr/local/include/ and eventually will sort it out when I actually make the git repo
[01:43:58] *** Joins: Cyp (~cyp@213.237.85.9)
[01:45:04] <Friithian> oh boy my laptop neovim config is fuuucked
[01:45:45] *** Joins: Simplar (~Simplar@188.163.93.76)
[01:47:14] *** Joins: markong (~kvirc@213.146.188.203)
[01:50:12] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[02:07:27] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[02:09:50] <johnny> Friithian, why are you putting outside of the project?
[02:10:22] <Friithian> so everything inside the to be git repo is all stuff I have created
[02:11:02] <johnny> well i personally use subprojects via meson to handle that, but one could als do ~/yourprojectsdir/include or some other place local to your $HOME
[02:11:18] <johnny> rather than cluttering up your root
[02:11:46] <Friithian> my root is beyond saving
[02:11:51] <johnny> don't make it worse then!
[02:12:04] <johnny> you're gonna have to fix it eventually
[02:12:16] <johnny> btw, direnv is a pretty good tool
[02:12:18] <Friithian> hah, you don't know how I operate my system
[02:12:25] <Friithian> I just let the tech debt accumulate
[02:12:32] <johnny> you could stop doing that at any time
[02:12:48] <johnny> *slowly* though.. i woudln't recommending powering through it all
[02:13:20] <Friithian> it's all already so far gone that to fix it the easiest way would be to make a new install and do everything from scratch
[02:13:36] <johnny> since i'm the only user on my computers i never install anything to / except via the package manager
[02:14:08] <johnny> and ty to keep changes to /etc to a minimum. then i only have to backup stuff in /var and a few stuff in etc to recover my system
[02:14:49] <johnny> everything else stays $HOME
[02:14:50] <Friithian> one day, when I have time, I will fix my system
[02:17:26] <Friithian> I won't ever have time
[02:19:42] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[02:27:59] *** Quits: kvik_ (~kvik@93-136-231-38.adsl.net.t-com.hr) (Ping timeout: 256 seconds)
[02:29:15] *** Joins: kvik (~kvik@93-136-231-38.adsl.net.t-com.hr)
[02:29:39] <OnlineCop> I have a function which modifies an OUT value, then raises an exception if a size check fails. I wonder if I should instead save the values to a temp, and only replace them if there's no exception? https://wandbox.org/permlink/bqTWGKrvdK98eRMw
[02:30:12] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[02:30:28] <OnlineCop> Specifically, the 2nd try{}catch block is where it's being modified but an exception is raised.
[02:33:05] <OnlineCop> The OUT arrays are usually fairly large (many MB up to a few GB), so keeping both in memory at once isn't preferred, but might be necessary.
[02:41:36] <RandomReader> I'd say the entire interface design is problematic, because there's no actual out param at all here
[02:41:42] <Friithian> for those of you who have heard of my ugly neovim setup, it is time to rejoice for I have nuked it and redone it
[02:42:20] <RandomReader> getParam() is already doing the logical duplicate-and-maybe-replace, everything above it is just noise and doesn't serve a practical purpose
[02:42:24] <RandomReader> can you alter the interface?
[02:43:01] <OnlineCop> getParam() grabs values from various streams. It doesn't know/care about the size requirements.
[02:43:14] <OnlineCop> getParamOfSize() wraps that and then validates that a size is what was expected.
[02:43:25] <RandomReader> ideally the size check would occur *before* collection of the results, but if that isn't possible, then getParam should simply return a value
[02:43:37] <RandomReader> the out param is not serving any purpose
[02:44:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 240 seconds)
[02:44:32] <OnlineCop> getParam should return nothing if an invalid key is supplied. If a valid key is found, it will fill it with whatever value is in the collection at the time.
[02:45:02] <OnlineCop> We can't assume that an empty vector result is an invalid result: it could be a key that exists but is empty.
[02:48:36] <RandomReader> currently the data storage is double: "results" in getParam, plus the copy to "out"
[02:48:54] <RandomReader> you're proposing adding a third copy temporarily: this is just a poor interface
[02:49:10] <RandomReader> ideally, getParam directly returns its results: zero copies
[02:49:15] <OnlineCop> https://wandbox.org/permlink/Bji1hvkpdVUc54gg is what I'm thinking.
[02:49:51] <RandomReader> then, by chaining the returns, the original caller (e.g. main() in this case) can assign to an existing variable if that's what it wants to do, and that assignment naturally doesn't occur if there's an exception
[02:50:11] <OnlineCop> If the key doesn't exist, the caller's "out" values should not be modified, though.
[02:50:41] <RandomReader> which you naturally get by using returns
[02:51:04] <RandomReader> "out" params are unnatural, there are extremely few reasons to use one
[02:52:02] <RandomReader> if you don't want getParam() to signal failure with an exception, you could instead return an optional<vector>, or a std::variant<vector, error_code>, or a struct with as many values and flags as you need, or....
[02:52:22] <OnlineCop> If getParam() directly returns its results, is that the results of successfully matching 'key', or of unsuccessfully matching 'key'?
[02:52:41] <johnny> or something like a Result object
[02:52:46] <OnlineCop> You're proposing that getParam() return a tuple instead of using an out param?
[02:53:31] <RandomReader> sure, if that's the kind of interface you require
[02:54:15] <RandomReader> personally I'd just use an exception for a non-existent key, and if that's an expected flow, I'd alter the usage so that I check it up front
[02:54:38] <RandomReader> or make changes at a higher-level, where I e.g. iterate or discover keys ahead of time, so there needs to be no check
[02:54:52] <RandomReader> (depending on how this is used in practice)
[02:55:10] *** Joins: kaph (~kaph@net-2-45-51-147.cust.vodafonedsl.it)
[02:58:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[02:58:32] *** Quits: evocatus (~evocatus@62.182.78.42) (Quit: Leaving)
[03:01:18] <Alipha> it's also weird for getParamOfSize to express failure in two ways: return bool or throw an exception. unless size check is a sanity check and the exception is supposed to be a logic_error (that is, there's a bug in the code and the code should be fixed)
[03:03:29] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 268 seconds)
[03:04:22] <Alipha> OnlineCop: are you on c++17?
[03:10:57] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:15:18] <Alipha> https://wandbox.org/permlink/zWgEGBX1vU0g2QMi
[03:15:34] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[03:15:45] <Alipha> oh, i guess i got rid of originalValues in my refactor
[03:18:01] <Alipha> hm. would std::variant<std::vector<double>, std::out_of_Range, std::length_error> be weird? :-)
[03:24:08] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[03:25:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:25:37] *** Quits: n3rdy1 (~n3rdy1@2601:281:c780:a510:31c5:bd6a:19eb:499b) (Ping timeout: 240 seconds)
[03:26:47] *** Quits: ferdna (~ferdna@user/ferdna) (Remote host closed the connection)
[03:31:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[03:36:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[03:45:44] *** Joins: kaph_ (~kaph@net-2-45-51-147.cust.vodafonedsl.it)
[03:47:33] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[03:47:57] *** Quits: kaph (~kaph@net-2-45-51-147.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[03:49:59] *** Quits: Guest64 (~Guest64@46.109.136.184) (Quit: Connection closed)
[03:50:07] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:52:24] *** Joins: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net)
[03:52:49] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 268 seconds)
[03:53:01] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[03:55:30] *** Quits: magla (~gelignite@55d4c16b.access.ecotel.net) (Quit: Stay safe!)
[03:58:39] *** Quits: kvik (~kvik@93-136-231-38.adsl.net.t-com.hr) (Ping timeout: 256 seconds)
[04:08:46] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:14:56] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[04:18:14] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[04:18:51] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[04:21:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:26:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[04:29:21] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[04:37:42] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[04:37:56] <mike18> hi, i have a virtual void foo(int id) = 0;  in the base class and 3 derived classes - 2 of them can implement foo but the 3rd one does not have ids to store --- how to deal with that? still implement void foo(int id) in that base class?
[04:39:22] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[04:39:42] *** Joins: Karyon (~Karyon@user/karyon)
[04:40:47] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 250 seconds)
[04:41:38] <rayw> mike18: a concrete class needs to implement all the pure virtual functions in the base class.
[04:41:58] <mike18> yeah but how to deal if there are 2 derived classes which dont have an id?
[04:42:05] <mike18> not using a pure virtual function?
[04:42:24] <mike18> yeah but how to deal if there is 1 derived classes (out of 3) which dont have an id?
[04:43:50] <rayw> Then maybe it's bad OO design? I have seen code with something like void foo(){} // does nothing, but stops compiler complaining
[04:44:05] <rayw> but I don't recommend doing that if you can.
[04:46:05] <kalven> hrm.. std::visit generates so much extra stuff with clang
[04:46:06] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 260 seconds)
[04:46:10] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[04:46:38] *** Joins: KombuchaKip (~kip@192.252.230.5)
[04:48:33] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[04:49:27] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Quit: Lost terminal)
[04:49:41] *** Joins: seninha (~seninha@user/seninha)
[04:49:59] *** Joins: Karyon (~Karyon@user/karyon)
[04:51:25] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:53:37] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[04:56:56] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[04:59:17] *** Quits: Tokamak (~Tokamak@172.58.188.156) (Ping timeout: 240 seconds)
[05:00:09] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[05:02:28] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[05:03:53] <very_sneaky> Friithian: you should give conan a try. I've had a pretty easy dependency management process with it
[05:03:53] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[05:04:14] <Friithian> I have 2 dependencies, I don't know how worth it is to learn
[05:04:32] *** Joins: Tokamak (~Tokamak@107.116.82.18)
[05:04:32] <very_sneaky> it's always good to know how to use package managers
[05:05:19] <Friithian> package managers are pretty straight forward if made in a sane manner so
[05:05:52] <very_sneaky> i guess it really comes down to whether the libs you're using have existing recipes though
[05:06:09] <very_sneaky> looks like argparse is
[05:06:39] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:751a:858f:9fad:5840) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:08:12] <Friithian> the other one I am using doesn't it seems
[05:08:24] <very_sneaky> which is the other?
[05:08:44] <Friithian> libboard
[05:10:24] <very_sneaky> yeah no joy there. looks like it's unmaintained
[05:10:57] <Friithian> yup
[05:11:18] <Friithian> but, if it still works it does exactly what I need
[05:12:51] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:15:19] <very_sneaky> Friithian: did you end up on coc or ycm for your new nvim config?
[05:19:49] *** Quits: Alipha (~AliphaX@user/alipha) (Ping timeout: 240 seconds)
[05:21:27] <mike18> rayw: but that id than in the base class?
[05:21:50] <mike18> its a vector<int> id actually --- since it can have multiple ids
[05:25:20] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[05:27:59] <kalven> ~.
[05:28:01] <Friithian> very_sneaky: coc fully, just so much nicer for everything it can do
[05:29:34] *** Joins: Karyon (~Karyon@user/karyon)
[05:34:35] *** Joins: Alipha (~AliphaX@user/alipha)
[05:37:20] <RandomReader> mike18 - if the derived doesn't have this concept, then it is not a base, and therefore it is not correct as a derived
[05:37:49] <RandomReader> the question you're asking means the design is fundamentally broken: either this derived should not exist, or the definition/meaning of the base must change
[05:37:53] <mike18> but it has some other things which are shared among those classes
[05:38:03] <RandomReader> "some" is incorrect
[05:38:24] <mike18> there are 2 varaibles which are shared across all classes
[05:39:30] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[05:39:45] <RandomReader> in order for this kind of thing to be practical, *every* derived must be indistinguishable from a base .. this concept has a name: Liskov Substitution Principle
[05:39:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:05] *** ChanServ sets mode: +v npaperbot
[05:40:15] <RandomReader> this kind of base isn't just a convenient thing to share "some" code, it's part of every derived's identity
[05:40:45] <RandomReader> what you are describing is a situation where this derived doesn't match a base at all .. therefore one of them is simply "wrong"
[05:40:49] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:41:02] <mike18> at all is not correct?
[05:41:14] *** Joins: PJBoy (~PJBoy@user/pjboy)
[05:41:14] <RandomReader> so, take a step back, look at the concepts you want to express, and find a better organization
[05:41:35] <RandomReader> maybe there should be no inheritance at all, maybe the code in base should just be a member of each derived
[05:41:46] <RandomReader> maybe there should be multiple "bases" for different parts of functionality
[05:42:02] <mike18> multiple base could make more sense
[05:42:08] <RandomReader> maybe all these deriveds aren't actually like each other and shouldn't try to share so much
[05:42:16] <RandomReader> that kind of thing
[05:43:50] <mike18> how can you store 2 base in 1 vector>
[05:43:53] <mike18> ?
[05:44:10] <RandomReader> this talks about it more, if it's useful: https://isocpp.org/wiki/faq/proper-inheritance
[05:44:28] <RandomReader> you can't
[05:44:46] <RandomReader> (and you wouldn't be storing base objects anyway, only pointers)
[05:44:58] <mike18> yeah but the type of vector....
[05:45:01] <RandomReader> but this goes back to what I meant by multiple bases: each base represents something *different*
[05:45:04] <mike18> needs to be one only
[05:45:32] <RandomReader> if you have 3 Derived, and only 2 of them use IDs, then the base that handles IDs will not be common to all of them
[05:45:51] <RandomReader> why would you want to store that anyway? it's the other base that would matter, the one that is common to all 3 of them
[05:46:09] <mike18> so 2 vector?
[05:46:14] <RandomReader> if it's not common, then we're back to one of the other points I made: these Deriveds are not like each other and don't belong together in the first place
[05:46:38] <RandomReader> sure
[05:47:34] <RandomReader> it might help to think of your bases like interfaces, in which case having a collection (vector) for each interface is natural
[05:48:12] <RandomReader> just like one collection for names, one collection for invoices, etc .. logical organization, they're not related to each other
[05:48:15] <mike18> or have some sort of adapter as base
[05:48:39] <RandomReader> that still sounds like you're trying really hard to make things the same, when they're not the same
[05:48:41] <RandomReader> why?
[05:48:57] <RandomReader> what possible benefit will come from treating them the same, when they actually behave differently?
[05:48:59] <mike18> just looking
[05:49:34] <RandomReader> sure, these are all just choices
[05:51:31] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[05:53:38] *** Joins: LeeVeen (~LeeVeen@27.115.6.50)
[05:53:41] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[05:56:32] *** Joins: frost (~frost@user/frost)
[06:17:23] *** Joins: malloy1 (~jimery@116.30.221.255)
[06:18:02] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[06:19:26] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[06:20:27] *** Joins: LeeVeen_ (~LeeVeen@27.115.6.50)
[06:23:37] *** Quits: LeeVeen (~LeeVeen@27.115.6.50) (Ping timeout: 240 seconds)
[06:23:58] *** Joins: johnny (~johnny@user/johnny)
[06:36:16] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[06:36:31] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:39:07] *** Joins: MetaNova (zero-one@znc/supporter/metanova)
[06:40:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[06:47:36] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:55:22] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[06:58:14] <very_sneaky> Friithian: interesting. what does it provide over ycm?
[07:00:13] <Friithian> ycm is just more complex to setup and install, adding more linters is easy (a lot of languages people have already made a coc-whatever) for coc
[07:02:21] <Friithian> like, installing coc is just adding another plug, ycm there's a process to it
[07:02:28] <very_sneaky> right, so it's just about getting things working?
[07:02:52] <very_sneaky> i've just done some googling and people are talking about "quality of completion", which doesn't make any sense to me because both use clangd in the backend
[07:03:16] <Friithian> I've had no issue with coc, and with the versitility and ease of use it offers
[07:03:44] <very_sneaky> the reason i originally chose ycm was because there's a conan integration for it, so it makes it easy to lint code when libs are stored in a local cache rather than project directory
[07:04:49] <Friithian> well, I don't use conan :P
[07:05:22] <very_sneaky> i wonder how hard it would be to develop a coc generator for conan
[07:05:55] <Friithian> it's all black magic to me *shrug*
[07:07:48] <Friithian> oh fuck off clangd I know I haven't used any private vars or made a constructor yet
[07:07:51] <very_sneaky> fwiw, what i've foundis that the main difference is that coc.nvim is essentially an extension manager, whereas ycm is a monolithic code completion/linting engine, so new LSPs have to be merged into the project as a whole rather than operating independantly/modularly
[07:08:20] <very_sneaky> whereas people can write their own coc extensions for different LSPs? i think
[07:08:23] <Friithian> with coc you can add essentially any LSP to it
[07:08:25] <Friithian> yup
[07:08:44] <very_sneaky> i like that idea, not sure if it buys me anything if everything i want is working though
[07:08:59] <Friithian> if what you have already works I don't see any reason to switch
[07:09:09] <Friithian> unless you're doing things in different langauges constantly
[07:09:30] <Friithian> which, due to uni, I am
[07:09:45] <very_sneaky> i guess i'm in the spot where i don't know what i don't know - maybe it's more effective/efficient at things like refactoring, or resolving includes across multiple TUs
[07:10:03] <very_sneaky> insert x feature
[07:10:15] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[07:11:13] <Friithian> well if they both using clangd as the linter it should be pretty same
[07:11:23] <very_sneaky> i think ycm supports all of the languages i care about - c++, python, ts, java
[07:11:36] <Friithian> >python
[07:13:02] <Friithian> I will say: I think I have my init.vim in a state that I would let others see
[07:13:25] <Friithian> oh do I have my clangd format settings on my laptop please say I do
[07:15:18] <very_sneaky> don't you store that with your projects
[07:15:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 260 seconds)
[07:15:42] <Friithian> I have a general one I use for most of my projects
[07:16:10] <Friithian> I usually am just at my desktop where I have everything with me, but as I am not with my desktop for the holidays
[07:17:22] <very_sneaky> all my software dev stuff is on github, so i can sync dotfiles and projects easily
[07:17:41] <Friithian> I sync most things via syncthing
[07:18:06] *** Quits: LeeVeen_ (~LeeVeen@27.115.6.50) (Quit: Leaving)
[07:18:23] <very_sneaky> yeahhhh... doesn't work great for directories under version control though
[07:18:40] <Friithian> you think that stops me :P
[07:18:57] <very_sneaky> i had to blacklist any folder containing .git from syncing with nextcloud
[07:19:26] <Friithian> not a bad idea
[07:21:01] <Friithian> I should prob learn how to tell clangd to shutup about certain stuff
[07:21:28] <very_sneaky> are they compiler warnings or tidy warnings
[07:22:00] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:22:00] <Friithian> these are warnings about unused private fields
[07:23:22] <Friithian> oh it's too late in the night for me to program with any sanity
[07:23:41] *** Joins: adeliktas3 (~adeliktas@i59F52F0C.versanet.de)
[07:25:17] *** Quits: adeliktas (~adeliktas@i59F4D750.versanet.de) (Ping timeout: 240 seconds)
[07:25:17] *** adeliktas3 is now known as adeliktas
[07:26:56] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[07:31:44] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 268 seconds)
[07:37:03] <very_sneaky> Friithian: if you're interested, I found this method a pretty useful way of managing dotfiles: https://www.atlassian.com/git/tutorials/dotfiles
[07:44:31] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[07:48:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[07:53:49] <hnOsmium0001[m]> just for the sake of completeness, people often use GNU stow to manage their dotfile symlinks to their git repo
[08:02:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[08:06:53] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 268 seconds)
[08:20:42] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[08:21:11] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:25:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 260 seconds)
[08:41:52] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[08:46:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[08:49:18] <very_sneaky> hnOsmium0001[m]: i hadn't come across gnu stow - i like it. coupled with an alias for `config` to manipulate the git dir, it looks like that might be a better option
[08:50:06] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:54:00] <johnny> there are a few different tools to do that
[08:54:19] <johnny> very_sneaky,  nobody else seemd to look into this, but maybe you will. are you familiar with the direnv program?
[08:55:36] <very_sneaky> johnny: nope, what's direnv?
[08:56:01] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[08:57:06] <johnny> https://direnv.net/  it lets you have per dir environment variables (like adding to $PATH, or anything else) plus it has a few built in layouts for say enabling python virtualenv when you cd into the dir
[08:57:30] <johnny> it also loads the popular .env config files used in 12factor webapps
[08:57:39] <johnny> although you have to enable uspport for that one
[08:57:52] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[08:58:31] <johnny> like i use it to force a cmake project to generate ninja build files.   anything you might want to use, but not hardcode into a build
[08:59:09] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[09:07:01] <very_sneaky> johnny: that's a cool idea
[09:07:11] <very_sneaky> not sure if i have an immediate use for it though
[09:14:41] <very_sneaky> is it common practice to use the gsl library to augment static analysis?
[09:22:04] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:34:10] *** Joins: rajkosto (~rajkosto@93-87-197-242.dynamic.isp.telekom.rs)
[09:37:33] <johnny> i'm not sure what you mean by that. i've seen clangd recommend  use X or gsl:Y
[09:38:09] <johnny> generally X has been available to me so i never end up looking at the gsl version
[09:38:13] <very_sneaky> an example is that I've currently got a `MessageBroker` class, which is a singleton and owns a raw pointer to itself that it passes out when a `getInstance()` method is called. I'm currently getting `Returning a newly created resource of type 'MessageBroker *' or 'gsl::owner<>' from a function whose return type is not 'gsl::owner<>' [cppcoreguidelines-owning-memory]` - I've marked pointer
[09:38:15] <very_sneaky> ownership correctly, and I guess it's now (correctly) identifying that I'm passing that pointer around without ownership semantics. In this case I don't intend for the return from `getInstance()` to infer ownership semantics, and the core guidelines seem to indicate that passing a raw pointer around in this case is the correct way to do that
[09:38:51] <johnny> well if you think it's a false positive, then ignore it right?
[09:39:12] <very_sneaky> i'm wondering what the best approach to deal with this static analysis is - is it to silence the warning, or is there some way i can flag this as intended using gsl?
[09:39:39] <johnny> well i imagine if you used gsl then it would also get rid of the warning. you'd have to read about what gsl::owner does though
[09:39:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:58] <johnny> i've never seen that specific recommendation because i try not to use raw pointers, but also, i dont' really have to for my use cases
[09:40:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:05] *** ChanServ sets mode: +v npaperbot
[09:40:17] <very_sneaky> gsl::owner is a way to manually tell a static analyser that some variable owns the resource pointed to, so responsible for destruction
[09:40:18] <kapil> how much monthly salary is accepted for juniour c++ developer?
[09:41:06] <very_sneaky> normally i'd just use a unique_ptr or shared_ptr and it wouldn't be required, but i don't think i can with my current design - so i flag the owning pointer with gsl::owner
[09:41:26] <very_sneaky> and yeah, now it's saying "you're not returning an owning pointer despite this being an owned pointer - wat do"
[09:41:43] <johnny> kapil, that would depend on where you are and where you're working, and also the industry. junior C++ programmer in gaming is different than say working in finace
[09:41:56] <johnny> the best you can do is look up salaries in your chosen field
[09:42:30] <kapil> for General C++ work how much is average in India?
[09:42:57] <kapil> if working remotly
[09:42:59] <johnny> it's unlikely you'll get  an answer to that here
[09:43:15] <very_sneaky> kapil: let me google that for you: https://www.glassdoor.co.in/Salaries/hyderabad-c-developer-salary-SRCH_IL.0,9_IM1076_KO10,21.htm
[09:43:38] <kapil> thanks
[09:44:03] <kapil> its too less
[09:48:03] <very_sneaky> johnny: i guess you're right, i should probably silence it. weird that it throws a warning for the recommended approach to non-ownership semantics - maybe it's just meant as a "double check that you're doing what you intend here"
[09:48:27] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Remote host closed the connection)
[09:57:17] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[10:01:32] <very_sneaky> for reference, the ownership semantics i'm talking about are R.3: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-ptr
[10:02:58] *** Quits: proller (~p@62.76.32.253) (Ping timeout: 260 seconds)
[10:04:24] *** Joins: AmR (~AmREiSa@156.199.236.68)
[10:25:46] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:959e:f772:789b:bf56) (Quit: Quit)
[10:41:31] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:46:57] *** Quits: chozorho (~chozorho@2601:146:300:c30::9401) (Quit: WeeChat 3.0)
[10:47:32] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[10:54:52] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[10:58:33] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[11:02:02] *** Quits: kaph_ (~kaph@net-2-45-51-147.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[11:02:02] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:07:21] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[11:08:45] *** Quits: Tokamak (~Tokamak@107.116.82.18) (Ping timeout: 256 seconds)
[11:11:52] *** Joins: Tokamak (~Tokamak@172.58.188.51)
[11:22:17] *** Joins: kvik (~kvik@93-142-246-187.adsl.net.t-com.hr)
[11:26:16] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[11:27:36] *** Joins: jkl (~jkl@user/jkl)
[11:55:47] *** Quits: HvszrStykp (~X@81.171.62.82) (Ping timeout: 256 seconds)
[12:03:28] <RandomReader> very_sneaky - why can't you use a unique_ptr inside it?
[12:05:12] <very_sneaky> RandomReader: it's a good question - It's been a while since I implemented this and I don't remember the specific issues. maybe i was trying to do it with a shared_ptr before i understood ownership semantics
[12:05:20] <very_sneaky> I'll revisit the idea of a unique_ptr
[12:06:04] <RandomReader> assuming I follow correctly, the singleton is roughly like    T* ptr;  T* getInstance() { if (!ptr) ptr = new T(); return ptr; }
[12:06:32] <very_sneaky> basically
[12:06:41] <RandomReader> since you're returning that ptr, which is owning, it's going to complain .. so a question would be why ptr is not unique_ptr, in which case you can just return .get()
[12:06:57] <very_sneaky> yeah, i'd still want to return T* from getInstance
[12:07:10] <RandomReader> (side question would be why getInstance() returns a T*, since it seems like it could just return a T&)
[12:07:29] <RandomReader> I'd expect either to get rid of the warning
[12:07:56] <RandomReader> that one anyway, I don't currently use anything with clang so not sure what else it might complain about instead, but IIRC the defaults are reasonable
[12:08:46] <very_sneaky> each publisher and subscriber holds a T*
[12:08:55] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5327)))
[12:08:56] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[12:10:30] <very_sneaky> yeah idk, the pointer seemed cleaner than a reference
[12:11:32] *** Joins: andreasbuhr (~quassel@p549dbca1.dip0.t-ipconnect.de)
[12:15:43] <RandomReader> for your earlier question about GSL, it doesn't seem super popular in here .. I see a few use it occasionally, just not widespread
[12:16:20] <RandomReader> for owner<> specifically, that's intended as a temporary marker for old codebases that can't yet refactor to just use e.g. unique_ptr
[12:16:54] <RandomReader> so I wouldn't suggest adopting it for new work
[12:18:28] <RandomReader> (like if you have a few owners of a T, it takes time to figure out if they should be unique_ptr or shared_ptr, where to sprinkle std::move or change types or copy, etc .. and owner<> combined with the analyzer can help mark and map those out)
[12:18:50] *** Quits: rajkosto (~rajkosto@93-87-197-242.dynamic.isp.telekom.rs) (Quit: Leaving)
[12:19:32] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[12:25:17] *** Joins: robod34 (Username@79.113.195.239)
[12:48:11] *** Joins: limubs (~limubs@cgn-89-0-4-18.nc.de)
[12:50:03] *** Quits: limubs (~limubs@cgn-89-0-4-18.nc.de) (Client Quit)
[12:52:56] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[12:54:14] *** Quits: lru (~lru@240.ip-51-79-50.net) (Ping timeout: 268 seconds)
[12:54:39] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:00:16] *** Joins: aniketgm (~Aniket@49.36.109.81)
[13:04:16] *** Joins: Simplar (~Simplar@188.163.93.76)
[13:16:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[13:18:14] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:35:32] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[13:37:09] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:39:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:06] *** ChanServ sets mode: +v npaperbot
[13:47:57] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:51:19] <AmR> Is there point to use python bindle with C/C++ App ???
[13:54:54] *** Quits: malloy1 (~jimery@116.30.221.255) (Quit: WeeChat 3.0)
[13:55:49] <Stryyker> some use it for scripting
[13:58:09] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[13:58:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 268 seconds)
[14:00:20] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[14:02:06] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[14:06:02] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[14:08:09] <AmR> Any one know web browser have public domain license ?
[14:09:31] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[14:12:38] <TinoDidriksen> None
[14:13:38] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Quit: Leaving)
[14:14:07] <TinoDidriksen> AmR, but Webkit is BSD 2-clause, which is about as free as you get.
[14:15:17] <TinoDidriksen> Well, parts are LGPL which is also quite fine. Nothing viral.
[14:17:09] <AmR> TinoDidriksen: I need it for static build :(
[14:17:19] <TinoDidriksen> Why?
[14:17:29] <TinoDidriksen> Static builds are silly.
[14:18:44] <TinoDidriksen> Gecko is MPL, which allows static linking.
[14:21:00] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9d07:c192:fe0:ec1f)
[14:28:24] *** Quits: aniketgm (~Aniket@49.36.109.81) (Read error: No route to host)
[14:31:29] *** Quits: kvik (~kvik@93-142-246-187.adsl.net.t-com.hr) (Remote host closed the connection)
[14:31:47] *** Joins: kvik (~kvik@93-142-246-187.adsl.net.t-com.hr)
[14:35:11] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[14:35:28] *** Joins: flynn (~mcbloch@user/flynn)
[14:36:18] *** Joins: aniketgm (~Aniket@49.36.109.81)
[14:39:17] *** Joins: rajkosto (~rajkosto@178-222-121-66.dynamic.isp.telekom.rs)
[14:39:22] *** Joins: xkuru (~xkuru@user/xkuru)
[14:43:48] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:44:06] *** Joins: flynn (~mcbloch@user/flynn)
[14:45:06] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[14:48:53] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:49:23] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:49:41] *** Joins: flynn (~mcbloch@user/flynn)
[14:51:32] *** Joins: paul424 (~tom@ip-31-0-122-32.multi.internet.cyfrowypolsat.pl)
[14:52:17] *** Joins: pulse (~pulse@user/pulse)
[15:00:37] *** Quits: aniketgm (~Aniket@49.36.109.81) (Read error: Connection reset by peer)
[15:04:34] *** Quits: rajkosto (~rajkosto@178-222-121-66.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[15:09:36] <LordKalma> merry xmas
[15:10:26] <PJBoy> it's not xmas anywhere in the world
[15:10:48] <PJBoy> unless there's a UTC+13 I'm unaware of
[15:12:00] <antto> someone h4x0r3d LordKalma's clock
[15:12:17] <antto> or he drank too much RedBull and he's overclocked
[15:13:17] <antto> boost::xmas; std::xmas; merry::xmas;
[15:13:54] <TinoDidriksen> It's yule today. 24th is the primary day. 25th is for the heathens.
[15:14:28] *** Joins: seninha (~seninha@user/seninha)
[15:20:29] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[15:20:48] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[15:23:49] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Client Quit)
[15:24:14] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[15:24:16] *** Joins: Burgundy (~yomon@79.115.213.171)
[15:30:57] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[15:31:14] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[15:31:28] <manuels> can i use extern for functions the same way like variables?
[15:32:16] <manuels> i.e. can I declare a function in a shared lib and define its body in an executable loading the shared lib?
[15:34:25] <ville> umm... no.
[15:34:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:35:12] <ville> not sure i even understand your usage of the terms there necessarily
[15:36:23] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:36:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[15:37:19] <manuels> my XY problem is that I want to implement a core app interface and expose it to the plugins.
[15:38:08] *** Joins: markong (~kvirc@213.146.188.203)
[15:38:15] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:38:20] <manuels> now I thought I could somehow define some functions in a namespace and declare them extern and define them nonstatic in main.cpp
[15:38:41] *** Joins: HvszrStykp (~X@81.171.62.82)
[15:38:46] <manuels> the declarations being in a include header for the plugins
[15:39:21] <ville> a way to do this would be just dlopen() the dso, dlsym() some function from it and call that
[15:40:01] <manuels> I am not interested in DI and testability, since it introduces tons of boilerplate in my concept.
[15:40:08] <ville> you'd usually pass in some sort of "app context" or whatever you call it to that function, so the plugin can do what it needs to do
[15:40:38] <manuels> ville it is the other way around. the inface I want to expose is in the main app, and plugins should be able to call the core app.
[15:41:00] <manuels> for stuff like restart, quit, show_frontend, show_settings etc
[15:41:06] <ville> that's the "app context". it's whatever you wish it to be
[15:41:56] <manuels> thats effectively DI
[15:42:06] <manuels> i want it to be global.
[15:42:26] <manuels> plugins have to be default constructible due to Qt requirements.
[15:43:10] <ville> you can always setup some global state in your "initialize this plugin"
[15:43:30] <manuels> client can write plugins in like 10 LOCs. Implementing DI requires a factory then and they would have to store the app context. this bloats plugin code like about x10
[15:43:47] <ville> that state can be a table of callables
[15:44:01] *** Joins: undephin3d (~undephin3@158.181.81.227)
[15:44:43] <manuels> i dont get it
[15:44:57] <manuels> what do you mean by "setup some global state in your "initialize this plugin""
[15:45:13] <ville> say it's a table of pointer-to-functions
[15:45:53] <ville> on your application side you call whatever functions are in the table: funs[DO_X]();
[15:46:02] <manuels> like a simple struct with static functions?
[15:46:27] <ville> in your plugins "initialize this plugin" function you loaded from the dso you set funs[DO_X] = &this_plugins_implementation;
[15:47:10] <manuels> I think you misunderstand
[15:47:22] <ville> of course now any number of plugins could "compete" that they set the pointers. loading order starts to matter and so on
[15:47:25] <manuels> because it is not the plugin setting the function but the core app
[15:47:40] <ville> the plugin sets the pointer table
[15:47:58] <ville> the application uses the pointer table to call any functon that happens to be at specific index/slot
[15:47:59] <manuels> but the plugin has no information about anything at all
[15:48:32] <ville> you can pass in the context when you call: funs[X](context);
[15:49:05] <manuels> example: i have a function in the main.cpp "void ::openSettings();".  I wish the plugin to be able to call (not define) it.
[15:49:29] <ville> that's presumably non-member function?
[15:49:33] <manuels> the plugin is default constructed and has no information at all
[15:50:46] *** Quits: paul424 (~tom@ip-31-0-122-32.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:51:00] <manuels> it is a member functoin of a class App in the end. but I can make the instance a global and write free wrapper functions to be exposed to the global space.
[15:51:37] <manuels> the thing is it must be abstract or extern in some way, such that the linker does not complain about undefined symbols
[15:53:08] <ville> just pass in your application to the plugin as context whenever you call one of the functions you loaded from a plugin?
[15:53:45] <ville> sure it's bit heavy handed, you could device more intricate ways if it seems necessary
[15:56:55] <ville> in the end you may wisht to "event-fy" your application actions anyhoo, so you rather send events and stuff around, rather than call any functions directly.
[15:57:09] <manuels> The problem here is that the plugin object lives in an event loop. Control can come from inside the plugin e
[15:57:28] <manuels> e.g. Triggered by an event
[15:59:20] <manuels> This open settings is a bad example since it is conform to the eventify idea. Is like to keep it genral
[15:59:21] <ville> you can queue messages/events either or both ways
[16:00:03] * manuels thinks about potential use cases needing direct function calls
[16:04:29] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:11:13] *** Joins: lru (~lru@240.ip-51-79-50.net)
[16:13:02] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Quit: Lost terminal)
[16:23:17] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[16:25:56] *** Joins: aniketgm (~Aniket@49.36.109.81)
[16:26:10] *** Joins: ravan (~ravan@user/ravan)
[16:30:24] <ville> the only need-need them is performance
[16:31:03] <ville> but reasonable other objections of course may be boilerplate associated with doing things differently
[16:34:38] <RandomReader> PJBoy - Christmas Island is UTC+14, and Samoa is UTC+13 :P   I learned these things when I stayed up for an entire New Year's day once...
[16:34:57] *** Inline__ is now known as Inline
[16:36:35] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:8c5c:6bb8:5078:50f6)
[16:36:35] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:8c5c:6bb8:5078:50f6) (Changing host)
[16:36:35] *** Joins: skapata (~Skapata@user/skapata)
[16:38:35] <RandomReader> manuels - so the executable has named free functions that the plugins call? that should work
[16:39:18] <RandomReader> not sure of the exact linking setup for SOs, but it follows the same DLL export pattern on Windows
[16:40:12] <RandomReader> as ville says you may want to control the interface more tightly than that, and provide context, but there isn't a technical reason you can't just use global functions
[16:42:06] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[16:42:39] <ville> also i wouldn't be too worried about speed. of all the things you'd think was "as fast as possible" quake from 1996 dispatches on strings...
[16:43:03] <RandomReader> globals on the DSO platforms (linux etc) are already slow anyway
[16:43:31] <RandomReader> there isn't any gain from direct linking vs an interface pointer or similar
[16:43:49] <RandomReader> ("slow" relative to static function calls)
[16:44:16] <PJBoy> RandomReader, oh wow TIL
[16:44:20] <PJBoy> shout outs to Christmas Island
[16:51:14] <manuels> ty all for the brain storming
[16:51:17] <manuels> "Clang-Tidy: Default arguments on virtual or override methods are prohibited"
[16:51:19] <manuels> why tho?
[16:53:05] <ville> sounds like something the core guideline would argue for
[16:54:23] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[16:56:36] *** Joins: tesuji_ (~quassel@138.199.2.51)
[16:56:41] <PJBoy> default arguments on virtuals can be misleading
[16:56:42] *** Quits: tesuji_ (~quassel@138.199.2.51) (Client Quit)
[16:56:59] <ville> but can't find it if they do. anyways if they did then there's already a rationale explained for the rule
[16:57:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[16:58:00] <PJBoy> { D d; B& b(d); d.f(); b.f(); } struct B { virtual void f(int x = 0) { SHOW(x); } }; struct D : B { void f(int x = 1) { SHOW(x); } };
[16:58:01] <geordi> x = 1 x = 0
[16:58:12] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[16:58:15] <PJBoy> think the reasonable expectation is that d.f() and b.f() would do the exact same thing
[16:58:41] <PJBoy> but default arguments ruin that expectation
[16:59:37] *** Quits: tesuji (~quassel@2a02:908:180:9500:cd6:6ff7:865b:1bad) (Ping timeout: 240 seconds)
[16:59:58] <PJBoy> reason being that f(int) is polymorphic, but f() isn't
[17:00:41] <PJBoy> in fact f() doesn't really exist
[17:01:53] <PJBoy> or actually it does act polymorphically?
[17:02:04] <PJBoy> but the default argument still changes depending on how you call it
[17:02:20] <PJBoy> tldr default arguments on virtual methods is confusing
[17:04:04] <LordKalma> manuels, what's the exact warning for that tidy?
[17:04:10] <LordKalma> I'm curious what sub project is that
[17:06:26] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[17:06:44] *** Joins: flynn (~mcbloch@user/flynn)
[17:06:45] <PJBoy> it is in Bjarne's homeboys guidelines
[17:07:46] <PJBoy> http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rh-virtual-default-arg
[17:10:46] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[17:20:01] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 268 seconds)
[17:23:01] <PJBoy> I might register bjarne's homeboys as a domain
[17:25:26] *** Joins: rajkosto (~rajkosto@178-222-121-66.dynamic.isp.telekom.rs)
[17:30:44] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:32:22] <ville> somehow i missed that then
[17:33:02] <ville> of course the more plausible explanation is that bjarne is watching this irc channel and added it between the time i tried to find it and you posting the link
[17:35:05] <rpav> virtuals and defaults are effed
[17:39:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:07] *** ChanServ sets mode: +v npaperbot
[17:40:18] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[17:40:52] <PJBoy> << is_nothrow_default_constructible_v<S>; struct S { S() noexcept(false) = default; };
[17:40:52] <geordi> true
[17:40:55] <PJBoy> I'm confused
[17:41:21] *** Joins: seninha (~seninha@user/seninha)
[17:42:07] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[17:44:22] <PJBoy> I guess S() is noexcept if explicitly declared noexcept OR if the implicitly declared default ctor would be noexcept
[17:44:46] <PJBoy> seems weird that you can't opt out though
[17:47:19] <PJBoy> you also can't opt out of constexpr
[17:48:33] <leduyquang753> `noexcept` has no effect on `= default` special member functions.
[17:48:43] <PJBoy> it can
[17:48:49] *** Quits: HvszrStykp (~X@81.171.62.82) (Ping timeout: 256 seconds)
[17:48:56] <PJBoy> such as in this example
[17:49:01] <leduyquang753> As you can see the output above is `noexcept` even you wrote `noexcept(false`.
[17:49:03] <PJBoy> << is_nothrow_default_constructible_v<S>; struct T { T() noexcept(false) {} }; struct S { T t; S() = default; };
[17:49:03] <geordi> false
[17:49:08] <PJBoy> << is_nothrow_default_constructible_v<S>; struct T { T() noexcept(false) {} }; struct S { T t; S() noexcept = default; };
[17:49:08] <geordi> true
[17:49:22] <PJBoy> you just can't *downgrade* from noexcept
[17:53:58] *** Joins: kaph (~kaph@net-2-45-51-147.cust.vodafonedsl.it)
[17:54:29] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:01:34] *** Joins: pulse (~pulse@user/pulse)
[18:03:56] <leduyquang753> << noexcept(S()); struct T { T() noexcept(false) {} }; struct S { T t; S() = default; };
[18:03:57] <geordi> false
[18:04:05] <leduyquang753> << noexcept(S()); struct T { T() noexcept(false) {} }; struct S { T t; S() noexcept = default; };
[18:04:05] <geordi> true
[18:06:09] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[18:06:57] <leduyquang753> This example says writing `noexcept(false)` is a mismatch but still valid: https://eel.is/c++draft/dcl.fct.def.default#4
[18:08:09] *** Quits: undephin3d (~undephin3@158.181.81.227) (Quit: leaving)
[18:11:30] *** Joins: HvszrStykp (~X@81.171.62.82)
[18:16:20] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:19:01] *** Quits: andreasbuhr (~quassel@p549dbca1.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:20:58] <rpav> python is like the crustiest thing ever .. dealing with pip etc
[18:22:19] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 268 seconds)
[18:33:41] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[18:38:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[18:45:09] *** Quits: rajkosto (~rajkosto@178-222-121-66.dynamic.isp.telekom.rs) (Quit: Leaving)
[18:48:06] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:49:52] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[18:54:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 252 seconds)
[18:55:38] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[18:55:56] *** Joins: flynn (~mcbloch@user/flynn)
[18:55:59] <ville> not sure i had seen this before: https://latex-cookbook.net
[18:58:51] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[18:59:11] *** Joins: Rayke (rayke@user/rayke)
[19:00:41] *** Quits: aniketgm (~Aniket@49.36.109.81) (Read error: No route to host)
[19:01:29] *** Joins: aniketgm (~Aniket@49.36.109.81)
[19:03:59] <PJBoy> cool
[19:04:08] *** Joins: BradArmstrong (~BradArmst@97.179.189.89.sta.211.ru)
[19:04:25] <BradArmstrong> Hi to all. How I can extract keyboad scan-code from WM_KEYUP or WM_KEYDOWN message?
[19:04:36] <PJBoy> what do you mean by scan code?
[19:04:53] <PJBoy> I assume you've read the docs https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-keyup
[19:05:07] <PJBoy> oh it's there in the lParam
[19:06:01] <PJBoy> so there you go
[19:06:05] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[19:06:29] <BradArmstrong> I mean OEM code(16-23). How I can extract it?
[19:07:01] <PJBoy> not familiar with bitwise operations?
[19:07:48] <PJBoy> it's just `lParam >> 16 & (1 << 24 - 16) - 1`
[19:08:04] <ville> https://docs.microsoft.com/en-us/windows/win32/inputdev/about-keyboard-input?redirectedfrom=MSDN#keystroke-message-flags
[19:08:19] <BradArmstrong> I think that I need >> or << and some value
[19:08:43] <PJBoy> or `LOBYTE(HIWORD(lParam))` apparently
[19:09:53] <BradArmstrong> ville, Big thanks
[19:10:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 245 seconds)
[19:14:46] *** Joins: john99 (~john99@199.246.103.34.bc.googleusercontent.com)
[19:14:52] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:15:18] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[19:15:36] *** Joins: flynn (~mcbloch@user/flynn)
[19:22:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[19:27:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 250 seconds)
[19:29:39] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[19:29:58] *** Joins: flynn (~mcbloch@user/flynn)
[19:30:38] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[19:33:10] *** Quits: john99 (~john99@199.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[19:33:14] *** Quits: baltazar (~baltazar@178-164-190-44.pool.digikabel.hu) (Ping timeout: 260 seconds)
[19:33:23] *** Joins: john99 (~john99@199.246.103.34.bc.googleusercontent.com)
[19:33:37] *** Quits: mitch0 (~mitch@178-164-190-44.pool.digikabel.hu) (Ping timeout: 240 seconds)
[19:35:03] *** Joins: baltazar (~baltazar@85-238-65-123.pool.digikabel.hu)
[19:35:37] *** Joins: mitch0 (~mitch@85-238-65-123.pool.digikabel.hu)
[19:35:41] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[19:39:06] *** Quits: BradArmstrong (~BradArmst@97.179.189.89.sta.211.ru) (Quit: Client closed)
[19:40:13] *** Joins: pulse (~pulse@user/pulse)
[19:42:18] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[20:11:01] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[20:17:20] *** Joins: namo (~nomo@95.87.208.95)
[20:20:45] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[20:21:02] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[20:27:30] *** Joins: rajkosto (~rajkosto@93-87-200-147.dynamic.isp.telekom.rs)
[20:31:26] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:b640:2806:2779:8038)
[20:31:26] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:b640:2806:2779:8038) (Changing host)
[20:31:26] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:33:09] *** Quits: causative_ (~halberd@user/causative) (Remote host closed the connection)
[20:33:20] *** Joins: RandomRead3r (~RandomRea@user/randomreader)
[20:33:25] <kapil> What is difference between -DCMAKE_BUILD_TYPE=Release and -DCMAKE_BUILD_TYPE=RelWithDebInfo ?
[20:33:35] <kapil> for production what should i use?
[20:34:11] *** Joins: causative_ (~halberd@user/causative)
[20:36:07] *** Quits: RandomReader (~RandomRea@user/randomreader) (Ping timeout: 268 seconds)
[20:36:16] *** RandomRead3r is now known as RandomReader
[20:36:17] <aniketgm> kapil: only Release.
[20:36:19] <ville> one comes with debug info... which you probably don't wish to hand out
[20:37:00] <kapil> thank you so much
[20:37:11] <aniketgm> RelWithDebInfo is Release with Debug Info.
[20:38:17] <kapil> thanks
[20:38:37] *** Quits: rajkosto (~rajkosto@93-87-200-147.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[20:45:22] *** Quits: HvszrStykp (~X@81.171.62.82) (Ping timeout: 268 seconds)
[20:46:25] <rpav> it clearly builds release with debian packages! ;)
[20:48:37] <PJBoy> it is a bit silly to not just spell out Debug tbf
[20:49:34] <rpav> yea
[20:49:44] <rpav> ReleaseWithDebug
[20:49:47] <rpav> RelWithDebugInfo
[20:49:54] <rpav> err, DebInfo
[20:49:55] <rpav> but yeah
[20:50:13] <PJBoy> DebugOptimised
[20:50:38] <rpav> more ambiguous
[20:50:49] <PJBoy> you wouldn't release something with debug info though
[20:51:00] <rpav> also release implies things that may be for release-only builds
[20:51:13] <PJBoy> true enough
[20:51:18] <rpav> you well might if you want to debug release, or provide a client with a debug build ,etc
[20:52:05] <kapil> rpav, thanks
[20:52:11] <rpav> it's really just silly they have hardcoded profiles and not individual configuration-things, and the ability to build profiles
[20:53:02] *** Quits: aniketgm (~Aniket@49.36.109.81) (Read error: No route to host)
[20:53:28] <rpav> err, and not the ability
[20:53:43] <rpav> like you _can_ do things for -DCMAKE_BUILD_TYPE=Sanitize or something but it's sortof broken
[20:54:42] <very_sneaky> RandomReader: yeah cheers. I can see where gsl::owner<T> is useful, especially when you're dealing with raw pointers that don't have ownership semantics. It seems like that's the case in my codebase at the moment so I've added it in, but yeah I've just raised an issue to evaluate whether it can be converted to a unique_ptr to remove the need to touch gsl
[20:55:37] <very_sneaky> PJBoy: says you - i release all my libraries with debug info ;)
[20:56:00] <PJBoy> you can alleviate the need for gsl by implementing owner<T> yourself
[20:56:59] <PJBoy> `template <typename T> using owner = T;`
[20:57:11] <PJBoy> I like how the clang-tidy docs manage to get that definition wrong
[20:57:15] <PJBoy> https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html
[20:57:19] <very_sneaky> yeah, i did see that it was a trivial implementation. Something like `{ namespace gsl { template <typename T> owner = T } }`
[20:57:21] <very_sneaky> yeah, that
[20:57:56] <very_sneaky> it was trivial to import it with conan though, so no worries
[20:58:52] <very_sneaky> I am noticing that clang 13 seems to have issues building gtest/1.10.0 though ~.~
[21:01:08] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[21:06:16] *** Joins: The_Jag (~The_Jag@host-80-117-63-69.retail.telecomitalia.it)
[21:07:03] *** Joins: aniketgm (~Aniket@49.36.109.81)
[21:09:37] *** Joins: chozorho (~chozorho@2601:146:300:c30::a57)
[21:10:19] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[21:11:01] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 240 seconds)
[21:12:37] *** Joins: rito_ (~rito_gh@45.112.243.69)
[21:17:01] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d4ba:d075:23a9:2f67)
[21:21:19] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[21:23:20] *** Joins: HvszrStykp (~X@81.171.62.82)
[21:31:27] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[21:39:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:07] *** ChanServ sets mode: +v npaperbot
[21:41:25] *** Quits: The_Jag (~The_Jag@host-80-117-63-69.retail.telecomitalia.it) (Quit: The_Jag)
[21:45:30] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[21:45:47] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[21:47:44] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[21:47:45] *** Joins: xkuru (~xkuru@user/xkuru)
[21:49:29] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[21:52:22] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[21:52:40] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[21:53:23] *** Quits: john99 (~john99@199.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[22:02:26] *** Joins: n3rdy1 (~n3rdy1@2601:281:c780:a510:c82b:6078:8c93:1082)
[22:12:17] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[22:13:34] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[22:34:04] *** Joins: ferdna (~ferdna@user/ferdna)
[22:35:10] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:36:59] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:40:31] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[22:40:48] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:49:46] *** Quits: rito_ (~rito_gh@45.112.243.69) (Quit: Leaving)
[22:56:49] *** Joins: pulse (~pulse@user/pulse)
[23:15:55] *** Joins: proller (~p@2a02:6b8:b081:8818::1:d)
[23:21:38] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:24:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[23:25:02] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:25:26] *** Joins: rajkosto (~rajkosto@109-93-246-215.dynamic.isp.telekom.rs)
[23:25:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Remote host closed the connection)
[23:25:57] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:26:36] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[23:26:36] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[23:27:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[23:28:35] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:36:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[23:38:37] *** Quits: proller (~p@2a02:6b8:b081:8818::1:d) (Ping timeout: 240 seconds)
[23:42:06] <CarloWood> Anyone into vulkan who can help with this weird error:
[23:42:08] <CarloWood> /usr/include/vulkan/vulkan.hpp:1091:7: error: static_assert failed due to requirement 'StructureChainValidation<1, vulkan::DeviceCreateInfo, vk::PhysicalDeviceVulkan11Features>::valid' "The structure chain is not valid!"
[23:43:57] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:46:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[23:52:01] *** Joins: Deneb (~Deneb@30.125.7.51.dyn.plus.net)
[23:52:15] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:52:17] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[23:56:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[23:56:26] *** Quits: Deneb (~Deneb@30.125.7.51.dyn.plus.net) (Remote host closed the connection)
[23:58:49] <ville> i'd drop the wrapper and let the validators deal with it, usually get really good info from them
