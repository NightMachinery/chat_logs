[00:00:07] *** Joins: john99 (~john99@175.246.103.34.bc.googleusercontent.com)
[00:00:52] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:03:59] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[00:04:13] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[00:05:13] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:05:33] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Client Quit)
[00:05:44] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[00:06:01] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[00:07:00] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73)
[00:11:25] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Ping timeout: 240 seconds)
[00:11:38] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[00:12:11] *** Quits: PureSine (~PureSine@user/PureSine) (Quit: Leaving)
[00:12:30] <john99> Hi, someone can help me to undertand this error https://godbolt.org/z/TKa3e8sev?
[00:12:54] <john99> sorry, this https://godbolt.org/z/Grax4dKv9
[00:14:06] <john99> i am looking how pass a list of (anonimous?) polimorfic objects to a function
[00:17:35] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[00:18:32] *** Quits: LordKalma_ (~LordKalma@server.ruilvo.com) (Ping timeout: 240 seconds)
[00:21:11] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[00:22:01] <irrenhaus3> john99: values are not polymorphic, only pointers and references are. so even if B inherits A, you cannot put values of type B into a vector for type A
[00:24:00] <john99> yes, i assume that for fix/avoid taht exist reference_wrapper, but i dont achieve to work the reference_wrapper with anonimous objects
[00:24:10] *** Joins: walterwhip (~www@user/walterwhip)
[00:24:18] <john99> irrenhaus3
[00:24:59] <irrenhaus3> john99: your initializer list contains objects of type B, but your function takes an initializer list of reference_wrapper<A>; that conversion does not happen implicitly
[00:25:33] <john99> i think taht happen, becouse this work Boo({ a});
[00:25:41] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[00:25:41] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[00:25:41] *** Joins: Teukka (~teukka@user/Teukka)
[00:25:46] <john99> but this not Boo({ B{1}, a});
[00:26:16] <john99> i assume that the problem is taht Boo is anonimous
[00:26:29] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:26:40] <irrenhaus3> Boo({a}) works?
[00:26:55] <RandomReader> interesting use of reference_wrapper, but that approach isn't going to work because of lifetime requirements on the mechanics here, B{1} is a temporary but needs to be stored
[00:27:10] <RandomReader> reference_wrapper will not bind to rvalues for that reason
[00:27:40] <john99> irrenhaus3 yes
[00:27:44] <RandomReader> you might be able to make another wrapper type that does the same job, but it's going to be fragile, and require very careful use of initializer_list
[00:27:47] <RandomReader> I wouldn't recommend that
[00:28:48] <irrenhaus3> john99: doesn't compile on that godbolt page when I try it
[00:28:53] *** Joins: PointThink (~PointThin@acbh119.neoplus.adsl.tpnet.pl)
[00:29:11] <john99> well, in my case B{1} is mostly sintax sugar
[00:29:15] <john99> irrenhaus3 https://godbolt.org/z/6d4P73GsM
[00:29:22] <john99> i can live without that
[00:29:25] <RandomReader> but what's the purpose of this? since you have the target slicing anyway
[00:29:39] <john99> RandomReader syntax sugar
[00:29:48] <RandomReader> (which it's usually recommended to disable for polymorphic types)
[00:29:51] <irrenhaus3> john99: okay, but now you removed the vector insert as well ^^
[00:29:57] <RandomReader> but what kind of syntax sugar?
[00:30:07] <irrenhaus3> but I kind of get it now
[00:30:24] <RandomReader> this behavior would be very confusing to most people: I pass in a B, it ignores it and slices my object into pieces so it can store the A subset
[00:30:31] *** Quits: h4k1m0u (~h4k1m0u@2001:861:3146:5890:e8cb:68ce:7100:5c3f) (Ping timeout: 256 seconds)
[00:30:34] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[00:30:40] <RandomReader> what sugar is being added?
[00:31:02] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[00:31:03] <john99> foo({B{1}, B{2}}) for me seem convenient or at least better than B b{1}; foo({b})
[00:31:14] <RandomReader> no, that's not what I mean
[00:31:24] <RandomReader> foo({b}) does not make sense either
[00:31:28] <irrenhaus3> hm
[00:31:33] <RandomReader> the target, foo(), is storing a copy of the A piece of B
[00:31:40] <irrenhaus3> john99: what's the problem you're trying to solve in the first place?
[00:31:41] <RandomReader> *that* does not make sense
[00:31:58] *** Quits: Listiner290 (~PointThin@acbh119.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[00:32:06] <john99> ummm
[00:32:09] <RandomReader> (which is why there are lifetime restrictions, why reference_wrapper doesn't accept rvalues, and why you encountered this in the first place)
[00:32:47] <RandomReader> vector<A> is not polymorphic
[00:32:54] <RandomReader> vector<A&> isn't possible
[00:33:39] <irrenhaus3> vector<reference_wrapper<A>> is possible, but a time bomb
[00:34:07] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:34:09] <john99> my problem is taht i have a lot of polimorfism and use the base class as container, then i think i am step in all mines of the language
[00:34:26] <john99> stepping*
[00:34:34] <irrenhaus3> if you're trying to do what I think you are, you might want to try vector<unique_ptr<A>> or vector<shared_ptr<A>>
[00:34:40] <john99> yes
[00:34:50] <john99> i have that in other aprts
[00:34:51] <john99> parts*
[00:35:28] <john99> but  i was looking to avoid that and reference_wrapper seem like very near to waht i wanted
[00:36:04] <john99> but yup, i think slicing is not desired
[00:36:08] <irrenhaus3> why are you trying to avoid pointers there?
[00:36:32] *** Quits: PointThink (~PointThin@acbh119.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[00:36:34] <john99> too much pointer simply
[00:36:42] <RandomReader> reference_wrapper is for a specific mechanic used in delayed argument passing by the standard library, it's *very* rare to have a use for it yourself in normal code
[00:36:52] <john99> at the end with polimorfic class are all pointers
[00:36:53] <RandomReader> it's not a general utility type
[00:37:15] <john99> RandomReader, ummm, ok, i didnt know
[00:37:17] <john99> ty
[00:38:15] <RandomReader> anyway .. if you have a vector<A*>, then all of this would be incorrect, since you need the caller to not use anything temporary
[00:38:36] <RandomReader> if you hava vector<unique_ptr<A>>, then the question is what it's doing with the caller information, since it would have to always copy anyway
[00:38:42] <RandomReader> which makes for a weird initializer_list call
[00:39:44] *** Joins: baltazaar (~baltazar@84-236-20-10.pool.digikabel.hu)
[00:40:06] <RandomReader> usually better to do one at a time, and either create a generic constructor relay like the .emplace(...) stuff in stdlib, or make it an ownership transfer where foo takes (unique_ptr<A>) and the caller is responsible for make_unique<B> etc
[00:40:12] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:40:44] <john99> okay, speacking about that again (https://stackoverflow.com/questions/46737054/vectorunique-ptra-using-initialization-list) with all this i was trying to find a workaround to mobable_il
[00:40:44] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[00:40:46] <RandomReader> then it's like   auto b1 = make_unique<B>(0);  foo(std::move(b1));    or    foo(make_unique<B>(1))
[00:40:47] *** Quits: baltazar (~baltazar@84-236-20-10.pool.digikabel.hu) (Quit: still here as baltazaar)
[00:40:48] <john99> movavle_il
[00:41:18] *** Joins: walterwhip (~www@user/walterwhip)
[00:41:47] *** Quits: mitch0 (~mitch@84-236-20-10.pool.digikabel.hu) (Remote host closed the connection)
[00:42:05] <john99> let me a seconfd, i am going to test if work with my case
[00:42:10] <RandomReader> hm, that's an interesting approach, haven't seen that movable_il before
[00:42:40] *** Joins: skapata (~Skapata@191.177.185.183)
[00:42:40] *** Quits: skapata (~Skapata@191.177.185.183) (Changing host)
[00:42:40] *** Joins: skapata (~Skapata@user/skapata)
[00:43:25] *** Joins: ethrl (~ethereal@user/doforlove33)
[00:43:38] <AliceMeows> Interesting hack
[00:43:47] *** Joins: baltazar (~baltazar@84-236-20-10.pool.digikabel.hu)
[00:44:45] *** Quits: baltazaar (~baltazar@84-236-20-10.pool.digikabel.hu) (Quit: still here as baltazar)
[00:46:39] *** Joins: magla (~gelignite@55d476aa.access.ecotel.net)
[00:48:16] <john99> yup, the point with taht i can iterate over the initializer_list and work, but 1º i still dont understand very well how work, 2º i was looking if i can find other way more simple (but seem llike no)
[00:49:01] <AliceMeows> Are ranges actually lazy?
[00:50:35] <john99> and waht mean  operator T() !!!const&&!!! { return std::move(t); } const&&, i thought const mean no changes in the class
[00:51:19] *** Joins: SorinK (~AG@86-126-45-197.craiova.rdsnet.ro)
[00:51:56] *** Joins: rgrinberg (~textual@2806:101e:7:4889:70e9:6f65:e573:10f5)
[00:52:26] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[01:00:36] <RandomReader> that hack is exploiting "mutable", which stores a value that can be modified even inside a const object
[01:01:14] <RandomReader> const mutable_il mi;   mi.t  can still be changed
[01:01:28] <RandomReader> (initializer_list contains a const mutable_il at this point)
[01:02:34] <RandomReader> that conversion operator is to implicitly convert mutable_il to T, so that mi can turn into T when transferring it to the vector
[01:02:52] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[01:03:21] <RandomReader> the conversion operator is marked "const", so it can be called on mi (const mutable_il), and because t is mutable, it's ok for the result type T to be non-const
[01:03:24] <RandomReader> which is what we want to move
[01:03:52] <RandomReader> the conversion operator is marked && so it can only be called on an rvalue mi, which is what happens when used with move_iterator
[01:04:23] *** Quits: paulf (~paulf@lfbn-lyo-1-263-154.w2-7.abo.wanadoo.fr) (Quit: Connection closed)
[01:04:24] <RandomReader> so, std::move(mi) can be implicitly converted to non-const T
[01:04:44] <john99> ummmmm, i have to think in that a couple more of times
[01:04:45] <RandomReader> aka: mutable_il<unique_ptr> can be stored const but still result in non-const unique_ptr
[01:05:02] <RandomReader> which is what's needed to move the unique_ptr itself, which is the ultimate goal of this entire thing
[01:05:45] <RandomReader> at the call site, {a, b, c} it's like   const T[] = {a, b, c};
[01:06:13] <RandomReader> initializer_list<T> looks at that, so it's always const, and you can't move the Ts later from it
[01:06:47] <RandomReader> by making mutable_il be another wrapper, that has a member marked "mutable", then initializer_list<mutable_il> can store something that is non-const, even when it's const itself
[01:07:09] <john99> smart movement
[01:07:26] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[01:08:00] *** Quits: cosimone` (~user@93-44-186-112.ip98.fastwebnet.it) (Remote host closed the connection)
[01:08:02] <RandomReader> yeah I hadn't seen that before, it's an interesting approach
[01:08:34] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:12:37] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Quit: varioust)
[01:14:14] *** Quits: Praise (~Fat@user/praise) (Quit: Vado a fare qualcosa di utile.)
[01:19:45] <pa> so i read std::list::size is constant complexity in c++11 ?
[01:21:04] <RandomReader> yes
[01:28:05] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:32:12] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[01:32:18] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[01:32:55] *** Joins: Praise (~Fat@user/praise)
[01:33:20] *** Quits: Imk0tter (~Imk0tter@172.58.228.46) (Remote host closed the connection)
[01:33:49] *** Joins: Imk0tter (~Imk0tter@172.58.228.46)
[01:36:15] *** Quits: ethrl (~ethereal@user/doforlove33) (Remote host closed the connection)
[01:37:24] *** Quits: Fairy (~Fairy@2001:464a:4992:0:e8a0:e296:b425:f7ea) (Ping timeout: 250 seconds)
[01:38:31] *** Quits: oknenavin (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[01:40:46] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[01:41:02] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:10] *** ChanServ sets mode: +v npaperbot
[01:52:46] <john99> https://godbolt.org/z/GWannbM36 ummm, resuming the topic, exist some problem with pass the pointer with shared?
[01:53:03] <john99> its significatively more easy
[01:53:43] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:54:50] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:55:21] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:56:49] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[02:00:07] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[02:02:46] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[02:04:11] *** Joins: PJBoy (~PJBoy@user/pjboy)
[02:05:30] *** Joins: walterwhip (~www@user/walterwhip)
[02:07:57] *** Quits: proller (~p@2a02:6b8:b081:15::1:30) (Ping timeout: 240 seconds)
[02:10:53] *** Joins: chozorho (~chozorho@2601:146:300:c30::549f)
[02:14:01] *** jonbryan_ is now known as jonbryan
[02:14:08] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[02:14:14] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Ping timeout: 250 seconds)
[02:14:48] *** Joins: walterwhip (~www@user/walterwhip)
[02:20:41] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:22:28] *** Quits: Kit (~NotApplic@2603-6010-a141-6fa3-0000-db65-a0b3-920d.res6.spectrum.com) (Quit: Leaving)
[02:24:09] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:26:54] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:27:28] *** Quits: SorinK (~AG@86-126-45-197.craiova.rdsnet.ro) (Remote host closed the connection)
[02:28:31] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:5143:664b:aeb1:9527) (Read error: Connection reset by peer)
[02:30:08] <Alipha> pa: unfortunately, yes. which means std::list::splice is sometimes O(n) when it could be O(1) had std::list::size been allowed to be O(n)
[02:30:55] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[02:31:32] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[02:31:39] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:32:31] *** Quits: pizdets (~pizdets@183.182.111.149) (Ping timeout: 256 seconds)
[02:32:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[02:32:43] *** Joins: Kit (~NotApplic@2603-6010-a141-6fa3-0000-db65-a0b3-920d.res6.spectrum.com)
[02:33:31] *** vinleod is now known as vdamewood
[02:33:49] *** Joins: pizdets (~pizdets@183.182.110.138)
[02:34:11] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[02:35:24] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[02:35:45] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[02:41:27] *** Joins: proller (~p@80.240.216.69)
[02:45:56] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[02:46:19] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:46:43] <ix> I have a class, which is a thin c++ wrapper for a foreign pointer from a c library. My common sense told me i should not have a copy constructor, because then the destructor would be called, and the contained pointer would be invalidated, however that seems to mean I can't return-as-value this type from a function, because compiler seems to want specifically a copy constructor and just ignore the move
[02:46:44] <ix> constructor, what gives?
[02:47:15] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[02:47:24] <Alipha> ix: you should be able to
[02:47:29] <Alipha> !give ix testcase
[02:47:30] <nolyc> ix: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[02:49:56] <NyB> ix: does the wrapper class own the C pointer?
[02:51:47] <ix> NyB: it does
[02:51:56] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 250 seconds)
[02:54:32] <AliceMeows> ix: https://godbolt.org/z/61W3bsdPE
[02:56:45] *** Quits: Sampuka (~Sampuka@5.186.126.2.cgn.fibianet.dk) (Read error: Connection reset by peer)
[02:57:29] <ix> AliceMeows: yeah ok it's me, i'm somehow doing something wrong, nevermind...
[03:01:27] <Alipha> ix: you didn't make your move constructor const, did you? `Foo(const Foo &&other)` would be wrong, heh
[03:02:02] *** Joins: noarb (~noarb@user/noarb)
[03:04:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[03:05:14] <ix> Alipha: ...i think i just confused my copy/move assignment operators with copy/move constructors :D
[03:05:17] <ix> compiles now
[03:05:24] <ix> thanks all
[03:07:20] *** Quits: magla (~gelignite@55d476aa.access.ecotel.net) (Quit: Stay safe!)
[03:08:00] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[03:08:19] *** Quits: george91 (~george91@103.137.204.24) (Quit: Leaving...)
[03:15:20] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[03:17:56] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Reconnecting)
[03:17:59] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[03:18:16] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[03:18:59] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Client Quit)
[03:19:17] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[03:19:20] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:19:33] *** Quits: N4buc0 (~N4buc0@191.250.99.50) (Ping timeout: 256 seconds)
[03:21:48] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Client Quit)
[03:22:06] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:23:28] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Client Quit)
[03:23:47] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:24:53] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:25:36] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[03:26:36] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[03:33:15] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Reconnecting)
[03:33:36] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:33:42] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:34:24] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5181:5bae:9b9e:9cff)
[03:37:56] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Client Quit)
[03:38:16] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:39:30] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Client Quit)
[03:39:50] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:41:27] <kalven>  
[03:42:19] <irrenhaus3> good point
[03:43:37] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[03:47:28] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[03:47:29] *** Quits: Green_ (~Green-@h-85-24-185-116.a189.priv.bahnhof.se) (Remote host closed the connection)
[03:47:33] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[03:48:46] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[03:50:35] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[03:50:39] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Reconnecting)
[03:50:52] *** Quits: evelyette (~Eleanor@178.79.105.181) (Ping timeout: 250 seconds)
[03:51:00] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:52:53] *** Joins: badone (~badone@209.132.189.136)
[03:53:28] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[03:53:55] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[04:09:59] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[04:11:47] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:12:09] *** Quits: Imk0tter (~Imk0tter@172.58.228.46) (Remote host closed the connection)
[04:12:31] *** Joins: Imk0tter (~Imk0tter@172.58.228.46)
[04:13:06] *** Quits: Imk0tter (~Imk0tter@172.58.228.46) (Remote host closed the connection)
[04:13:27] *** Joins: Imk0tter (~Imk0tter@172.58.228.46)
[04:15:16] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[04:17:14] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[04:22:45] <RandomReader> john99 - shared_ptr makes the ownership less clear, because it means that there are multiple owners and it is not predictable which one will finish first
[04:22:57] *** Quits: rgrinberg (~textual@2806:101e:7:4889:70e9:6f65:e573:10f5) (Ping timeout: 240 seconds)
[04:22:58] <RandomReader> using it only for argument passing is not a good idea, and means the design is poor
[04:23:15] <RandomReader> looking at this I think the problem is that you are stuck on a particular syntax
[04:23:32] <RandomReader> I would recommend focusing on what you want to accomplish instead, let the syntax follow from that
[04:24:10] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[04:25:49] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[04:25:57] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[04:27:07] <john99> RandomReader, ty for the answer, the problem more than syntaxs is that i have a lot of polimorfic class, mostly wrapped in unique_ptr becouse is the "logical way" from the point of view of ownership, i dont hape big problem with that, de design until now is fine and i dont need even move,EXCEPT for constructors, a lot of constructor pass data
[04:27:08] <john99> btween class or fill containers and is pretty cumbersome if i wan use initializer_list
[04:27:25] <RandomReader> initializer_list *is* syntax
[04:27:29] <RandomReader> that's its only purpose
[04:27:32] <RandomReader> so .. that's what I mean :P
[04:28:01] <RandomReader> why do you need to pass hardcoded lists of data between constructors like this?
[04:28:21] <RandomReader> maybe it would be better if you just filled an ordinary container to begin with?
[04:28:30] <john99> yup
[04:28:32] <RandomReader> maybe these things should look at something you store, instead of transferring it into themselves?
[04:28:34] <john99> 100% agree
[04:28:34] <RandomReader> questions like that
[04:29:59] <john99> yes, and if not posible taht is the end, (just i was using vector/deque right now)
[04:30:00] *** Joins: Tokamak (~Tokamak@2600:380:182e:e591:a90b:5799:c6ca:eed2)
[04:31:58] <john99> but from my opinable and may be worng point of view is more understandable Foo(B{params}, B{aprams2}) than A a{p}; B b{p}; C c{p}; for(){vector v.pushback(...);} Foo()
[04:32:28] <RandomReader> but why do you have Foo(random_number_of_B_but_always_hardcoded)?
[04:32:48] <RandomReader> why is the code always Foo({a}), Foo({a,b,c}), etc?
[04:32:51] <john99> its not harcoded
[04:33:00] <RandomReader> you're using initializer_list, yes it is
[04:33:04] <john99> in my examples are harcoded clearly
[04:33:13] <john99> am, in this case yes
[04:33:22] <RandomReader> *always* for initializer_list
[04:33:44] <RandomReader> you have Foo that can take some number N of arguments, but that N is always hardcoded
[04:33:53] <john99> INSERT INTO (x,y,Z) VALUES(:x,:y,:z) is a very common pattern
[04:34:03] <john99> in my code
[04:34:13] <RandomReader> ah, SQL query adapter, ok .. that's the kind of use I was asking for
[04:34:20] <john99> yup
[04:34:36] <RandomReader> hmm
[04:35:16] <john99> anyway is a toy project for lear the language
[04:35:20] <john99> learn
[04:36:12] <john99> its good step in all the mines and i ask things simply for look better approachs
[04:36:49] *** Quits: Pook (~Pook@2001:8a0:f996:1400:a51c:8049:bb7b:9dba) (Quit: Leaving)
[04:36:49] <RandomReader> I'm not sure I'd use polymorphism at all here, given the reference nature it doesn't seem like a good fit, for an interface that is meant to capture values (instead of references)
[04:37:06] *** Joins: waleid (~waleid@110.137.102.130)
[04:37:26] <RandomReader> like if I insert(...) values(4), I am sending the 4 .. not a reference to some object containing 4 that I might keep around
[04:37:54] <RandomReader> I would not want to write make_unique<Integer>(4)
[04:38:13] <john99> i leave as orm::Integer(4)
[04:38:14] <RandomReader> building that kind of interface though, is not simple
[04:38:24] *** Joins: nostar (~nostar@37.19.212.3)
[04:38:49] <RandomReader> I wouldn't even want to write that though .. C++ knows 4 is an integer, I shouldn't have to write orm anything
[04:38:59] <RandomReader> it should work with native types or error
[04:39:00] *** Joins: smach (~savio@177.12.44.211)
[04:39:16] <john99> native types of wich database?
[04:39:23] <RandomReader> native C++ types
[04:39:24] *** Quits: smach (~savio@177.12.44.211) (Remote host closed the connection)
[04:39:40] <john99> same problem
[04:39:40] <RandomReader> the database types can generally map
[04:39:50] *** Joins: smach (~savio@177.12.44.211)
[04:39:51] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[04:40:02] <RandomReader> (especially since they're already chosen by column)
[04:40:03] <john99> INSERT INTO (...) VALUES(4, "hello world!")
[04:40:25] <john99> that sound nice , but tipically are 3 functions involved
[04:40:36] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[04:40:48] *** Joins: caramel (~caramel@user/caramel)
[04:41:01] <john99> prepare(INSERT(...) ...);
[04:41:01] <john99> BIND({.... list of parameters with very diferent class})
[04:41:07] <john99> execute(stmt, params)
[04:41:23] <RandomReader> making that style interface usually involves variadic templates .. that was why I originally suggested the separate .set() thing so long ago, and come back to this syntax later
[04:41:40] <RandomReader> that is just multiple overloads of BIND
[04:41:55] <RandomReader> bind(name, string) bind(name, int) etc for supported C++ types
[04:42:25] <john99> welll, that only leave a problem (the C api)
[04:42:30] <john99> XD
[04:42:33] <RandomReader> with a variadic template, then you can have one function do that separation internally
[04:42:44] <RandomReader> a C API for this would look very different, not at all like a C++ one
[04:42:57] <john99> yes, but anyway i need a wrapper
[04:43:02] *** Quits: jsbach (~jsbach@2a01:c22:b026:9600:5a8b:db2:acf8:aa0f) (Ping timeout: 240 seconds)
[04:43:11] <john99> at some point i will need transform the C++ type to database type
[04:43:28] <john99> ORacle use structs postgresql use char*
[04:43:59] <john99> (the cariadic tempalte is a great idea i didnt thought anyway)
[04:45:00] <john99> ummmmmmmmmmmm
[04:45:02] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Ping timeout: 250 seconds)
[04:45:11] <john99> i have to think about the variadic template option
[04:45:34] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[04:45:46] <RandomReader> you could start with multiple templates instead of a variadic one
[04:46:29] <RandomReader> template <typename T1, typename T2> multibind(T1&& arg1, T2&& arg2) { bind(forward<T1>(arg1)); bind(forward<T2>(arg2)); }
[04:46:43] <RandomReader> and just manually make each for up to N args, just to start
[04:46:56] <RandomReader> then come back to making a single variadic one after
[04:47:20] <RandomReader> (obviously I missed the name arguments in there .. but I think you get the idea)
[04:47:26] *** Quits: smach (~savio@177.12.44.211) (Remote host closed the connection)
[04:47:29] <john99> ummm, then for SELECT?
[04:47:50] <john99> SELECT column_1, column_2
[04:47:51] *** Joins: smach (~savio@177.12.44.211)
[04:47:55] <john99> i dont know the type
[04:48:01] <john99> until the database answer
[04:48:26] <RandomReader> then there's nothing you need on the C++ side either, it's just names, no types, right?
[04:48:27] <john99> (for bind aprameters variadic seem the correct approach)
[04:48:47] *** Joins: xiongxin1 (~Thunderbi@119.123.101.197)
[04:48:50] <RandomReader> you have to ask about the type dynamically on the result set, with this approach
[04:49:12] <john99> the point is that the result set is dinamically
[04:49:12] <RandomReader> like you know a column is named "a", but the user will have to ask what type that is anyway
[04:49:18] <john99> no
[04:49:36] <john99> i usally do unions, joins , views, pl/SQL
[04:49:45] <john99> a lot of think can happen really
[04:49:59] <john99> window functions for example
[04:50:17] *** Quits: xiongxin (~Thunderbi@2409:8954:3858:1eec:fe7a:ba16:cd66:348f) (Ping timeout: 240 seconds)
[04:50:17] <RandomReader> I mean the query, in code, is just SELECT("column_1", "column_2") right? no types at this point
[04:50:17] *** xiongxin1 is now known as xiongxin
[04:50:20] <john99> the output is not very easy to know at compile time
[04:50:43] <RandomReader> just string for the column names, user doesn't need to pick any type for result
[04:50:58] <john99> in the select for build que sql no, but for get the results?
[04:51:00] <RandomReader> it's only afterward, when you have some RESULT thing, they will have to ask for the data
[04:51:07] <john99> yup
[04:51:43] <RandomReader> there are only two options really, in a fully dynamic setup .. make the interface ask, so you have GetType() that returns some enum or something, and GetInt, GetString, etc
[04:52:01] <RandomReader> or you have GetString attempt to convert, and fail if it's incorrect/would lose info
[04:52:02] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[04:52:20] <john99> yup i did he first option
[04:52:38] *** Quits: waleid (~waleid@110.137.102.130) (Quit: Nettalk6 - www.ntalk.de)
[04:52:40] <RandomReader> another option would be std::variant<supported C++ types>, and caller can use whatever method they want to ask the variant what it is
[04:52:42] <john99> then (incorrectly try to apply the same tipos to the select
[04:53:01] <john99> i dont like too much that idea (variant/any)
[04:53:04] <RandomReader> (another option to query, I mean)
[04:53:43] <RandomReader> hm, "to ask", not sql query
[04:53:51] <RandomReader> need coffee
[04:54:41] <RandomReader> anyway, the C APIs you already see probably do something similar
[04:55:11] <RandomReader> C++ can do slightly differently, but it ultimately comes down to the same "ask or convert" kind of choice, for dynamic data
[04:55:43] <RandomReader> "embedded SQL" is the only idea I've seen for compile-time work there, where the SQL schema is fixed at the same time the code is .. won't work for general databases, only certain kinds
[04:55:53] <john99> yes, completly agree, in the end i implemented the first approach (i called that factory)
[04:56:47] <john99> embedded sql (i work alot with that and can be prety painfull, for that i am trying to see how could be go in the other direction)
[04:57:11] <RandomReader> ah, ok then, way ahead of me :)
[04:58:00] <john99> okay, i have to wipeout the code i wrote today and miove to variadic macros, perfect XD
[04:58:11] <RandomReader> lol
[04:58:27] <RandomReader> well, I think there's still the option of intermediate steps
[04:58:43] <RandomReader> like to evolve this, you have orm::Integer etc stored now
[04:58:56] <john99> na, its a toy project for learn, go ahead with all the diversion XD
[04:59:04] <RandomReader> but that can be internal, so external single-function interface can be:  bind(name, int) { store orm::Integer }
[04:59:14] <RandomReader> and then template builds on that interface
[04:59:20] <RandomReader> haha ok
[04:59:53] *** Parts: AliceMeows (~AliceMeow@user/alicemeows) ()
[05:00:19] <RandomReader> it *is* going to be a little tricky to pair these things, variant may still be useful, depending on the types
[05:01:32] <RandomReader> like without template, concrete types:   struct Bind { string name, variant<int, string> value };
[05:01:35] <john99> the problem with variant is taht anyway i need a intermediate tipe (DBAPI -> factory -> variant)
[05:01:45] <RandomReader> then obviously Bind{"foo", 42}  and you can make a set of those
[05:02:02] <john99> then i choose (DBAPI -> Factory/orm::Integer)
[05:02:40] <john99> and create a lot  operation / casts in orm::Integer
[05:02:41] *** Joins: Markow (~Markow@176.122.215.103)
[05:04:22] *** Quits: Markow (~Markow@176.122.215.103) (Client Quit)
[05:04:34] <john99> mostly becouse i could not imagine any way of create a tuple at runtime
[05:04:49] <RandomReader> to go fully variadic template, it takes a little more work to pair, so might end up with   template <typename T, typename... Extra> multibind(string name, T&& value, Extra&&... extra)  kind of thing, to split into name/value pairs as you recurse
[05:05:02] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (Quit: Peace!)
[05:05:02] <john99> yes
[05:05:02] <RandomReader> probably another way to do it with pack expansion too
[05:05:13] <RandomReader> anyway, will take some playing, but should work out
[05:05:35] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Quit: Lost terminal)
[05:05:59] <john99> yup
[05:07:02] <john99> ummm, yup
[05:07:06] <john99> tomorrow i will try
[05:07:13] <john99> hereis VERY later XD
[05:07:26] <RandomReader> lol ok, sleep well
[05:07:29] <john99> it was a nice conversation see you
[05:07:49] *** Quits: john99 (~john99@175.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[05:08:55] *** Quits: clime (~clime@37-48-61-114.nat.epc.tmcz.cz) (Ping timeout: 256 seconds)
[05:09:29] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[05:10:19] *** Joins: duplox (~duplox@137.220.127.235)
[05:11:10] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac)
[05:25:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:32:41] *** Joins: zmt00 (~zmt00@user/zmt00)
[05:36:52] *** Quits: irrenhaus3 (~xenon@HSI-KBW-046-005-002-040.hsi8.kabel-badenwuerttemberg.de) (Quit: Lost terminal)
[05:37:24] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[05:38:30] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[05:38:46] *** Quits: Fairy (~Fairy@2001:464a:4992:0:5181:5bae:9b9e:9cff) (Ping timeout: 250 seconds)
[05:38:52] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[05:41:02] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:11] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:11] *** ChanServ sets mode: +v npaperbot
[05:43:06] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 250 seconds)
[05:43:18] *** Joins: waleid (~waleid@110.137.102.130)
[05:44:09] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[05:54:11] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:57:12] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:01:39] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[06:09:11] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:10:32] *** jadew` is now known as jadew
[06:14:18] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:17:36] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8cc6:12ce:bf8a:e847) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:19:32] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[06:22:15] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[06:24:18] *** Joins: PureSine (~PureSine@user/PureSine)
[06:24:42] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[06:26:04] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[06:29:58] *** Joins: karakedi (~eAC53C340@user/karakedi)
[06:32:04] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[06:41:39] *** Joins: RandomRead3r (~RandomRea@user/randomreader)
[06:43:33] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:45:01] *** Quits: RandomReader (~RandomRea@user/randomreader) (Ping timeout: 240 seconds)
[06:45:05] *** RandomRead3r is now known as RandomReader
[06:46:22] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[06:47:31] *** Joins: norias (~jaredm@c-98-219-195-163.hsd1.pa.comcast.net)
[06:48:23] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Remote host closed the connection)
[06:48:47] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[06:50:10] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[06:54:32] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[06:56:02] *** Quits: Burgundy (~yomon@82.76.72.88) (Ping timeout: 240 seconds)
[06:58:17] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[06:59:54] *** Joins: NotApplicable (~NotApplic@2603-6010-a141-6fa3-0000-db65-a0b3-920d.res6.spectrum.com)
[07:00:39] *** Joins: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[07:01:37] *** Quits: kit-ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:01:57] *** Quits: Kit (~NotApplic@2603-6010-a141-6fa3-0000-db65-a0b3-920d.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:05:41] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:06:52] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac) (Quit: Leaving)
[07:11:49] *** Joins: PureSine_ (~PureSine@109.162.188.198)
[07:12:59] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[07:15:07] *** Quits: PureSine (~PureSine@user/PureSine) (Ping timeout: 256 seconds)
[07:21:22] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:23:29] *** Quits: waleid (~waleid@110.137.102.130) (Quit: Nettalk6 - www.ntalk.de)
[07:28:41] *** Joins: Guest49 (~Guest49@2600:387:b:f::bb)
[07:28:47] <Guest49> I'm looking for answers to the following because I haven't been able to get the correct solution yet https://bpa.st/CA2A and https://bpa.st/CPFA Any ideas?
[07:32:14] <RandomReader> none of that is about C++, looks more like an assembly-level view of a particular platform's interop conventions (guessing x86 from the naming)
[07:33:23] *** Quits: Guest49 (~Guest49@2600:387:b:f::bb) (Quit: Client closed)
[07:33:27] <RandomReader> so not appropriate for this channel (which only covers Standard C++), not really sure which would be appropriate, is there no pointer to an online resource in the material you got that from?
[07:34:58] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5181:5bae:9b9e:9cff)
[07:36:37] *** Joins: Guest49 (~Guest49@2600:387:b:f::bb)
[07:39:02] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[07:39:54] *** Quits: PureSine_ (~PureSine@109.162.188.198) (Read error: Connection reset by peer)
[07:40:18] *** Joins: PureSine_ (~PureSine@109.162.188.198)
[07:41:17] <Guest49> Anyone know how to answer the following https://bpa.st/CA2A ?
[07:42:51] <RandomReader> none of that is about C++, looks more like an assembly-level view of a particular platform's interop conventions (guessing x86 from the naming)
[07:42:51] *** Quits: PureSine_ (~PureSine@109.162.188.198) (Read error: Connection reset by peer)
[07:42:52] *** Joins: PureSine__ (~PureSine@109.162.188.198)
[07:42:56] <RandomReader> so not appropriate for this channel (which only covers Standard C++), not really sure which would be appropriate, is there no pointer to an online resource in the material you got that from?
[07:45:05] <Guest49> Thank you for the informaton
[07:47:54] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[07:49:24] <Alipha> Do we have an #asm or ##asm channel here?
[07:49:53] *** Quits: Guest49 (~Guest49@2600:387:b:f::bb) (Quit: Client closed)
[07:52:48] <RandomReader> looks like there's ##asm .. not entirely sure that was the best place either, I'm not entirely sure what the context of that was
[07:53:22] <RandomReader> like it could be part of an operating systems class using x86 as a testbed for all I know
[07:53:43] <RandomReader> was hoping for more of a hint there, whether it was homework or an online quiz or what
[07:59:57] *** Quits: Tokamak (~Tokamak@2600:380:182e:e591:a90b:5799:c6ca:eed2) (Ping timeout: 240 seconds)
[08:04:34] <very_sneaky> looks like homework to me
[08:05:20] *** Joins: Tokamak (~Tokamak@mobile-166-170-28-92.mycingular.net)
[08:05:24] *** Joins: NEYi (~NEYi@109.251.216.38)
[08:09:57] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:11:34] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[08:11:53] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[08:14:04] *** Joins: _SKiTZO (~dark@64.89-10-146.nextgentel.com)
[08:14:06] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:15:37] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:16:43] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:30:48] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Read error: Connection reset by peer)
[08:31:34] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[08:34:52] *** Joins: LunarJetman (Zogatribe@user/zogatribe)
[08:38:35] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Ping timeout: 256 seconds)
[08:39:17] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:41:12] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a6600159947f198d35ec6.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[08:43:20] <Kerr> what would be the correct way to get sizeof an individual struct's member? sizeof(mystruct.structmember) doesn't work
[08:43:46] <Kerr> while I could just sizeof(single) or whatever, It seems like it would be better to do something like sizeof(mystruct.member) in case the type of the member ever changes. For example, if the type changed to double.
[08:46:37] <very_sneaky> Kerr: does it not work? https://godbolt.org/z/eaG48rfc9
[08:47:19] <kalven> sizeof(mystruct::member)
[08:48:11] <very_sneaky> https://godbolt.org/z/4vfW86GoP
[08:52:16] <Kerr> very_sneaky you are creating an instance of the struct, is this strictly nescessary
[08:52:38] <very_sneaky> no, see kalven's reply and the second example
[08:52:58] <Kerr> kalven has the solution! thank you
[08:53:52] <tayy> All my programs were closed after having my lid closed on my laptop. I don't have the "logout after x minutes of inactivity" button ticked. What could be a possible reason for this?
[08:54:17] <Kerr> (Although I'll be wondering if there is a c-compatible equivalent, but that's not nescessary)
[08:55:35] <tayy> oh shit sorry ! wrong chat!
[09:00:41] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:06:43] *** Quits: smach (~savio@177.12.44.211) (Read error: Connection reset by peer)
[09:08:32] *** Quits: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 240 seconds)
[09:10:18] *** Joins: smach (~savio@177.12.44.211)
[09:10:38] *** Joins: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[09:24:32] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46)
[09:29:14] *** Joins: slidercrank (~slidercra@user/slidercrank)
[09:33:39] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82)
[09:34:05] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[09:40:07] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:40:55] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[09:41:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:10] *** ChanServ sets mode: +v npaperbot
[09:42:37] *** Quits: traxex (traxex@user/traxex) (Ping timeout: 240 seconds)
[09:43:45] *** Quits: phoenix1 (~phoenix@user/phoenix) (Ping timeout: 256 seconds)
[09:46:12] *** Joins: traxex (traxex@sdf.org)
[09:46:31] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[09:46:37] *** Joins: phoenix1 (phoenix@user/phoenix)
[09:55:22] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[10:13:55] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:17:10] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[10:24:02] *** Quits: ville (~ville@user/ville) (Quit: ville)
[10:29:31] *** Joins: ville (~ville@user/ville)
[10:33:00] *** Joins: Tempesta_ (~Tempesta@183.98.39.112)
[10:33:02] *** Quits: Tempesta_ (~Tempesta@183.98.39.112) (Remote host closed the connection)
[10:34:27] *** Joins: paulf (~paulf@lfbn-lyo-1-263-154.w2-7.abo.wanadoo.fr)
[10:35:32] *** Joins: kaph_ (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[10:35:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:36:56] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 250 seconds)
[10:38:09] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[10:39:13] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[10:47:32] *** Quits: Fairy (~Fairy@2001:464a:4992:0:5181:5bae:9b9e:9cff) (Ping timeout: 240 seconds)
[10:47:47] *** Joins: zmt00 (~zmt00@user/zmt00)
[10:53:34] *** Quits: Tokamak (~Tokamak@mobile-166-170-28-92.mycingular.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:54:37] *** Joins: xiongxin1 (~Thunderbi@2409:8954:3858:5a32:d053:12fe:f4d5:c034)
[10:55:58] *** Quits: xiongxin (~Thunderbi@119.123.101.197) (Ping timeout: 250 seconds)
[10:55:59] *** xiongxin1 is now known as xiongxin
[10:57:27] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[10:59:56] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[11:01:54] *** Joins: epony (epony@user/epony)
[11:20:39] *** Joins: Viewday11 (~Viewday@user/viewday)
[11:20:48] *** Joins: evelyette (~Eleanor@178.79.105.181)
[11:26:24] *** Quits: fluter (~fluter@user/fluter) (Quit: WeeChat 3.3)
[11:27:17] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[11:30:32] *** Quits: evelyette (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[11:31:29] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[11:32:04] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[11:35:45] *** Jmtrix- is now known as Jmtrix
[11:35:46] *** Quits: Jmtrix (~qed@2604:180:2:72d::497d) (Changing host)
[11:35:46] *** Joins: Jmtrix (~qed@user/jmtrix)
[11:40:58] *** Joins: Tempesta (~Tempesta@user/tempesta)
[11:45:21] *** Joins: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl)
[11:48:40] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[11:49:21] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:51:14] *** Joins: mitch0 (~mitch@84-236-20-10.pool.digikabel.hu)
[11:53:19] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[11:57:51] *** Joins: Guest69 (~Guest69@ip72-199-239-162.sd.sd.cox.net)
[11:59:56] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:03:49] *** Joins: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f)
[12:14:34] *** Joins: ipe (~ipe@176-93-245-17.bb.dnainternet.fi)
[12:21:19] *** Joins: fivegruel (~fivegruel@HSI-KBW-095-208-248-017.hsi5.kabel-badenwuerttemberg.de)
[12:23:25] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:23:26] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[12:24:52] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Remote host closed the connection)
[12:24:53] *** Quits: PureSine__ (~PureSine@109.162.188.198) (Read error: Connection reset by peer)
[12:25:17] *** Joins: PureSine__ (~PureSine@109.162.188.198)
[12:26:18] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[12:27:05] *** Quits: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl) (Remote host closed the connection)
[12:27:14] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Client Quit)
[12:27:35] *** Joins: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl)
[12:29:31] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[12:38:36] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087)
[12:39:48] *** Joins: rendar (~rendar@user/rendar)
[12:40:18] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:240b:629c:66c3:c78c)
[12:44:34] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5181:5bae:9b9e:9cff)
[12:44:57] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[12:47:53] *** Joins: clime (~clime@78-80-115-5.customers.tmcz.cz)
[12:49:10] *** Joins: Tempesta (~Tempesta@user/tempesta)
[12:50:05] *** Quits: Fairy (~Fairy@2001:464a:4992:0:5181:5bae:9b9e:9cff) (Read error: Connection reset by peer)
[12:55:18] *** Joins: Fairy (~Fairy@2001:464a:4992:0:e160:8c45:e86d:6d90)
[13:02:33] *** Quits: traxex (traxex@sdf.org) (Changing host)
[13:02:33] *** Joins: traxex (traxex@user/traxex)
[13:02:36] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:798d:4129:9f07:fe5b)
[13:05:17] *** Joins: seninha (~seninha@user/seninha)
[13:05:26] *** Joins: xiongxin1 (~Thunderbi@119.123.101.197)
[13:05:37] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:d9b7:23d6:79dd:2e64) (Ping timeout: 240 seconds)
[13:06:37] *** Quits: xiongxin (~Thunderbi@2409:8954:3858:5a32:d053:12fe:f4d5:c034) (Ping timeout: 240 seconds)
[13:06:38] *** xiongxin1 is now known as xiongxin
[13:14:15] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:21:02] *** Joins: cosimone (~user@93-47-231-31.ip115.fastwebnet.it)
[13:21:59] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[13:22:25] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[13:23:44] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[13:25:29] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[13:26:33] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[13:28:09] *** Quits: Guest69 (~Guest69@ip72-199-239-162.sd.sd.cox.net) (Ping timeout: 256 seconds)
[13:35:44] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[13:35:56] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Max SendQ exceeded)
[13:36:54] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[13:37:04] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Max SendQ exceeded)
[13:37:10] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:38:13] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[13:38:26] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Max SendQ exceeded)
[13:38:54] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[13:41:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:11] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:11] *** ChanServ sets mode: +v npaperbot
[13:43:01] *** Joins: fluter (~fluter@user/fluter)
[13:47:18] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:57:20] *** Quits: kaph_ (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Quit: Leaving)
[13:57:47] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[13:58:40] *** Quits: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f) (Remote host closed the connection)
[14:03:18] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Remote host closed the connection)
[14:09:31] *** Quits: _SKiTZO (~dark@64.89-10-146.nextgentel.com) (Ping timeout: 256 seconds)
[14:10:42] *** Joins: plastico (~plastico@neomutt/plastico)
[14:13:53] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:310a:887:a8c8:ed35)
[14:14:33] *** Joins: CinnamonFlavored (~PointThin@abzk146.neoplus.adsl.tpnet.pl)
[14:15:12] *** Joins: Listiner290 (~PointThin@abzk146.neoplus.adsl.tpnet.pl)
[14:15:25] *** Quits: chozorho (~chozorho@2601:146:300:c30::549f) (Quit: WeeChat 3.0)
[14:17:54] *** Quits: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[14:18:37] *** Joins: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl)
[14:19:02] *** Quits: CinnamonFlavored (~PointThin@abzk146.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[14:19:32] *** Quits: Listiner290 (~PointThin@abzk146.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[14:20:40] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[14:24:24] *** Quits: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[14:31:41] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[14:32:38] *** Quits: Cahaan (~Cahaan@user/cahaan) (Ping timeout: 250 seconds)
[14:36:41] *** Quits: proller (~p@80.240.216.69) (Remote host closed the connection)
[14:38:12] *** Joins: proller (~p@80.240.216.69)
[14:41:14] *** Joins: Atque (~Atque@user/atque)
[14:41:24] *** Quits: Atque (~Atque@user/atque) (Client Quit)
[14:42:51] *** Joins: Atque (~Atque@user/atque)
[14:56:28] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[14:56:44] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[14:57:42] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[14:57:47] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Client Quit)
[14:58:18] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[14:58:34] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[15:04:16] *** Joins: xiongxin1 (~Thunderbi@2409:8954:3858:4596:11f6:aa0b:d62c:18bc)
[15:05:34] *** Quits: xiongxin (~Thunderbi@119.123.101.197) (Ping timeout: 250 seconds)
[15:05:35] *** xiongxin1 is now known as xiongxin
[15:07:20] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:10:20] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[15:10:47] *** Joins: john99 (~john99@138.246.103.34.bc.googleusercontent.com)
[15:11:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:23:13] *** Joins: magla (~gelignite@55d4ed71.access.ecotel.net)
[15:26:22] *** Quits: badone (~badone@209.132.189.136) (Ping timeout: 250 seconds)
[15:29:34] *** Joins: badone (~badone@209.132.189.146)
[15:30:09] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:32:09] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[15:35:25] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a6600b1409487ab5b1115.ipv6.abo.wanadoo.fr)
[15:36:56] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[15:40:45] *** Quits: badone (~badone@209.132.189.146) (Ping timeout: 256 seconds)
[15:41:35] *** Joins: badone (~badone@209.132.189.152)
[15:45:52] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:59:18] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-017.hsi5.kabel-badenwuerttemberg.de) (Ping timeout: 250 seconds)
[16:01:41] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:01:41] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[16:03:51] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:04:23] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[16:06:18] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087) (Remote host closed the connection)
[16:06:36] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087)
[16:11:55] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[16:12:21] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[16:18:22] *** r-g is now known as rg
[16:19:49] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:5d0c:5cd6:41ba:a0fc)
[16:19:49] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:5d0c:5cd6:41ba:a0fc) (Changing host)
[16:19:49] *** Joins: skapata (~Skapata@user/skapata)
[16:30:24] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[16:31:03] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:37:00] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 250 seconds)
[16:38:48] *** Joins: Guest1715 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:39:41] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[16:41:04] *** Joins: pulse (~pulse@user/pulse)
[16:57:39] <Kerr> is there a reasonable way to do if (!strcmp(args[i], "-no_config")) config->no_config = true, continue;
[16:58:50] <Kerr> That is, get two statements out of an if without using {}, the motivation being the single line statement which will be repeated dozens of times, instead of 5 lines using {} to match everything else stylistically
[17:02:44] *** Joins: aakashi2001 (~aakashi20@103.61.255.0)
[17:02:44] *** Quits: aakashi2001 (~aakashi20@103.61.255.0) (Changing host)
[17:02:44] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[17:03:49] *** Quits: llh (~llh@user/llh) (Ping timeout: 240 seconds)
[17:05:36] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[17:05:42] *** Joins: llh (~llh@user/llh)
[17:08:11] *** Joins: Burgundy (~yomon@82.76.72.88)
[17:09:13] *** Joins: evelyette (~Eleanor@178.79.105.181)
[17:09:31] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:11:32] <zz> { while (0) { if (1) ({ bool x = true; continue; }); } }
[17:11:32] <geordi> error: ISO C++ forbids braced-groups within expressions
[17:12:04] <zz> {} is the way to do it, and C++ does not care about style and whether you do it in one line or 5.
[17:12:04] <geordi> error: 'is' does not name a type
[17:13:19] *** Quits: Guest1715 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[17:13:22] *** Joins: Vrganj (~vrganj@93-138-69-45.adsl.net.t-com.hr)
[17:14:48] <PJBoy> `if (config->no_config = config->no_config || !strcmp(args[i], "-no_config")) continue;`
[17:16:34] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[17:21:37] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[17:22:36] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[17:22:39] <zz> that does not sound right, the assignment is no longer dependent upon strcmp
[17:23:53] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[17:25:53] <lh_mouse> if (!strcmp(args[i], "-no_config") && (config->no_config = true)) continue;
[17:25:56] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:26:20] <lh_mouse> note: I consider this structure terribly bad.
[17:30:23] <PJBoy> either the !strcmp is false and config->no_config is unchanged, as in the original
[17:30:35] <PJBoy> or !strcmp is true and config->no_config is set to true, as in the original
[17:32:12] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[17:34:18] <PJBoy> my version skips unnecessary strcmp, that's the only difference
[17:36:08] <lh_mouse> the strcmp is not unnecessary.
[17:36:36] <lh_mouse> consider:   if (!strcmp(args[i], "-no_config")) config->no_config = true, continue;   fprintf(stderr, "bad argument: %s\n", args[i]); exit(1);
[17:36:39] <PJBoy> oh right yeah
[17:36:43] <PJBoy> the continue bit
[17:37:16] <PJBoy> nah ok your solution is good then
[17:39:15] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:40:02] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[17:40:54] *** Joins: xiongxin1 (~Thunderbi@119.123.101.197)
[17:41:04] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:11] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:11] *** ChanServ sets mode: +v npaperbot
[17:41:20] *** Joins: stonkey (~stonkey@user/stonkey)
[17:41:37] *** Quits: xiongxin (~Thunderbi@2409:8954:3858:4596:11f6:aa0b:d62c:18bc) (Ping timeout: 240 seconds)
[17:41:37] *** xiongxin1 is now known as xiongxin
[17:50:10] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:51:13] *** NotApplicable is now known as Kit
[17:55:00] *** Joins: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl)
[17:56:12] *** Quits: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl) (Remote host closed the connection)
[17:56:49] *** Joins: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl)
[18:02:56] *** Quits: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl) (Read error: Connection reset by peer)
[18:03:38] *** Joins: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl)
[18:04:12] *** Quits: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl) (Read error: Connection reset by peer)
[18:04:29] *** Joins: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl)
[18:09:26] *** Quits: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl) (Read error: Connection reset by peer)
[18:09:42] *** Joins: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl)
[18:10:20] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[18:10:36] *** Joins: C-Man (~C-Man@78.31.190.82)
[18:16:23] *** Joins: oknenavin (~nomo@95.87.208.95)
[18:17:38] *** Quits: PointThink (~PointThin@abzk146.neoplus.adsl.tpnet.pl) (Quit: Off to bed)
[18:21:57] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 240 seconds)
[18:22:49] <montpol> I'm looking for an internship that deals with coding (Python or C++) and FPGA. Does anyone have any suggestions/recommendations where I can find something like this?
[18:33:47] *** Joins: Cahaan (~Cahaan@user/cahaan)
[18:34:26] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[18:36:41] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[18:38:06] *** Joins: xkuru (~xkuru@user/xkuru)
[18:40:15] *** Joins: jkaye (~jkaye@2601:281:8300:7530:ebdf:216a:24ec:ae90)
[18:52:51] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[18:54:51] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:00:22] *** Joins: andreasbuhr (~quassel@p548dd48c.dip0.t-ipconnect.de)
[19:04:34] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Quit: varioust)
[19:04:47] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e558:997e:112:92fe:0:7ca) (Quit: WeeChat 3.4)
[19:10:49] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Ping timeout: 256 seconds)
[19:11:43] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087) (Remote host closed the connection)
[19:11:52] *** Quits: andreasbuhr (~quassel@p548dd48c.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:12:07] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087)
[19:14:20] *** Griwes_ is now known as Griwes
[19:18:46] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:22:07] *** Quits: xiongxin (~Thunderbi@119.123.101.197) (Remote host closed the connection)
[19:23:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[19:27:01] *** Joins: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net)
[19:39:40] *** Joins: stonkey (~stonkey@user/stonkey)
[19:46:16] <Schrostfutz> Hi, can I assume std::hash computes values that are roughly uniformly distributed?
[19:49:31] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[19:49:33] <PJBoy> yeah
[19:50:15] <PJBoy> https://en.cppreference.com/w/cpp/named_req/Hash
[19:52:12] <Schrostfutz> Thanks! So `static_cast<double>(std::hash<std::string>{}(str)) / std::numeric_limits<std::size_t>()` should yield me a value uniformly in [0, 1), but uniquely determined by `str`, right? Should I expect issues with double precision due to the large numbers?
[19:54:25] <jkaye> Not necessarily unique
[19:54:26] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac)
[19:54:48] <PJBoy> divide by (double(std::numeric_limits<std::size_t>::max()) + 1) for [0, 1)
[19:54:53] *** Quits: Imk0tter (~Imk0tter@172.58.228.46) (Remote host closed the connection)
[19:54:55] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[19:55:15] *** Joins: Imk0tter (~Imk0tter@172.58.228.46)
[19:55:21] <PJBoy> division by a power of two should have no effect on precision
[19:55:38] <PJBoy> but the double could potentially lose precision on conversion from size_t
[19:55:44] <Schrostfutz> jkaye: I meant 'uniquely determined' as in determined by just the input, not unique as in there is no other string with the same output
[19:55:48] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087) (Remote host closed the connection)
[19:55:58] *** Quits: nostar (~nostar@37.19.212.3) (Quit: Leaving)
[19:56:05] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087)
[19:56:54] <PJBoy> in fact double(std::numeric_limits<std::size_t>::max()) is already imprecise most likely
[19:56:59] <jkaye> Understood, I would just be aware that hash stability is not guaranteed. It can be hard to tell what someone is trying to do with a question like that
[19:57:08] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[19:57:21] <Alipha> Schrostfutz: if size_t is 64 bits and double has a 53-bit mantissa, hash values close together are going to result in the same double value
[19:57:42] <PJBoy> << setprecision(100) << double(std::numeric_limits<std::size_t>::max()), double(std::numeric_limits<std::size_t>::max()) + 1
[19:57:42] <geordi> 18446744073709551616, 18446744073709551616
[19:57:49] <Alipha> Because of floating point inaccuracy
[19:57:51] <jkaye> Also in general I would always think about double precision
[19:59:36] <Schrostfutz> So rather than `double(hash(str)) / max() < probability` `hash(str) < probability * max()` would be preferable in terms of accuracy?
[19:59:38] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:00:05] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[20:00:21] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:00:51] *** Joins: nostar (~nostar@68.51.221.108)
[20:01:10] <PJBoy> those are identical in precision
[20:05:18] <Schrostfutz> Alright, thanks a lot!
[20:06:08] <montpol> what does the [] do in line 6? https://bpa.st/YBIQ
[20:06:12] *** Quits: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Quit: WeeChat 3.0.1)
[20:06:26] <jkaye> montpol, That's a lambda (anonymous function)
[20:06:38] <jkaye> https://en.cppreference.com/w/cpp/language/lambda
[20:09:00] <PJBoy> https://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution looks like it supports std::hash for its generator argument to operator()
[20:10:42] <Alipha> << hash<size_t>()(5), hash<size_t>()(6)
[20:10:43] <geordi> 5, 6
[20:10:57] <jkaye> PJBoy, does hash satisfy UniformRandomBitGenerator?
[20:11:06] *** Joins: mathe8989 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[20:11:11] <jkaye> I didn't think it did, but I could be missing something
[20:12:01] <PJBoy> bah, not quite
[20:12:20] <PJBoy> missing the type alias and min/max functions
[20:12:27] <PJBoy> but you could wrap up hash and provide those
[20:12:28] <jkaye> Yeah that's what I was seeing as well
[20:12:46] <jkaye> I think it could be made to work, but wouldn't with the basic std
[20:12:49] <jkaye> Yep agreed
[20:13:20] <montpol> jkaye thanks so its essentially a function that we can use inline as itll only be used once for example?
[20:13:47] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[20:14:17] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:14:44] *** Joins: PJBoy (~PJBoy@user/pjboy)
[20:15:06] *** Joins: jsbach (~jsbach@2a01:c22:a4ca:ea00:8858:384b:b6c9:3db9)
[20:16:01] <jkaye> That's one application of lambda, but there are others. You can use them to easily pass functions around with different bindings as well.
[20:16:19] <Alipha> Schrostfutz: std::hash is uniform if the inputs are uniform. So if you're trying to "randomly" select some portion of the input, you may be disappointed. However, try it and see, I guess. If you're not satisfied, you may want to run the hash result (or input) through a cryptographic hash or block cipher
[20:16:30] <jkaye> E.g. there's nothing stopping you from storing a lambda
[20:19:45] <Schrostfutz> PJBoy: What do you mean by support hash for its generator argument?
[20:21:39] <Schrostfutz> Ah, I can use the hash as an input to its `operator()`
[20:21:56] <jkaye> You can't though, at least not without some fiddling
[20:22:16] <jkaye> If you made hash satisfy the requirements with a wrapper it should work
[20:23:16] *** Joins: shanto05 (~shanto05@103.118.76.134)
[20:26:09] <Schrostfutz> Meh, that's quite a lot of effort. Is there a downside to just using `srand(hash); rand()`?
[20:27:22] <jkaye> That would be the same as just using the hash as your random value
[20:27:22] <Alipha> rand() is a horrible random number generator
[20:27:33] <jkaye> "Each time std::rand() is seeded with the same seed, it must produce the same sequence of values."
[20:27:43] <jkaye> So you'd be directly mapping each hash to a single deterministic value
[20:28:04] <jkaye> Schrostfutz, can I ask what your end goal is?
[20:28:47] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[20:29:07] <Schrostfutz> jkaye: basically what Alipha assumend, I have a set of values and want to uniformly, deterministically select a subset of them.
[20:30:37] *** Quits: shanto05 (~shanto05@103.118.76.134) (Quit: Leaving)
[20:30:38] <jkaye> https://en.cppreference.com/w/cpp/algorithm/sample
[20:30:42] <jkaye> Have you looked at that?
[20:31:14] *** Joins: shanto05 (~shanto05@103.118.76.134)
[20:31:15] <Schrostfutz> jkaye: So what you where saying about std::rand is exactly what I want, I need it to be deterministic.
[20:31:26] *** Quits: john99 (~john99@138.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[20:31:34] <Alipha> Schrostfutz: I would go with `double(hash(str)) / max() < probability`, and test it to determine if it satisfies your needs or not before trying something more complicated
[20:31:40] <Schrostfutz> jkaye: Conceptually what's what I want, but I need it evaluated for individual elements at different amounts of time.
[20:32:15] <Alipha> Schrostfutz: I'm pretty sure using rand() is going to end up with worse outcomes
[20:32:39] <Schrostfutz> I now have this: http://sprunge.us/tIkLl2?c++
[20:33:24] <PJBoy> confused about the goal here now
[20:34:20] <jkaye> Same
[20:35:18] <Alipha> That's not clarified by <Schrostfutz> jkaye: basically what Alipha assumend, I have a set of values and want to uniformly, deterministically select a subset of them.?
[20:35:45] <montpol> what happens when using std::execution::par exactly? https://bpa.st/YACA it opens multiple threads/cores but does that mean the process can just be done quicker?
[20:35:54] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:36:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[20:37:01] <Schrostfutz> So to avoid the X-Y problem: I run a simulation where nodes have some probability of being interested in a set of items. When items are queried again for interest the result needs to be the same. To avoid drawing random numbers and storing the set of items a node is interested in I want to seed an rng of a combined hash of node & item id
[20:37:31] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[20:39:13] <Alipha> Schrostfutz: using mt19937 like that seems reasonable if the simple `hash / max < p` doesn't meet your needs
[20:39:13] *** Quits: mathe8989 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Quit: Leaving)
[20:39:38] <Schrostfutz> Alright, thanks for the help!
[20:39:47] <jkaye> montpol, Essentially just what it says here: https://en.cppreference.com/w/cpp/algorithm/execution_policy_tag_t. This allows the implementation to use the parallel execution policy, along with the details contained within that documentation
[20:40:22] <montpol> jkaye so just makes the process faster?
[20:40:26] <Alipha> I wonder how slow it is to populate mt19937's state each time like that
[20:40:27] <jkaye> Alipha, the part that wasn't clear to me was why std::sample along with a specialized URBG wouldn't work for the use case
[20:40:32] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[20:40:41] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:41:02] <jkaye> I think now it makes more sense that it's not really a random sample
[20:41:21] <jkaye> montpol, It could make it faster. Or it could slow it down. Depends on what the code is doing
[20:41:41] <PJBoy> often has no effect
[20:41:50] <jkaye> Yep
[20:43:08] *** Joins: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-131-125.cust.tzulo.com)
[20:43:26] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[20:44:21] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e558:997e:112:92fe:0:7ca)
[20:46:39] <Alipha> montpol: typically you need large inputs and/or expensive per-element operations for the parallelism to be a benefit
[20:47:19] *** Quits: shanto05 (~shanto05@103.118.76.134) (Quit: Leaving)
[20:47:54] *** Quits: llh (~llh@user/llh) (Ping timeout: 250 seconds)
[20:49:36] *** Joins: llh (~llh@user/llh)
[20:50:07] *** Joins: proller (~p@2a02:6b8:b081:8014::1:4)
[20:51:58] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[20:54:58] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[20:55:29] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[20:56:26] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:56:44] *** Joins: kit-ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[20:58:05] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[21:01:34] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:03:04] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[21:03:46] *** Joins: kit_ten (~u0_a391@2600:380:a43d:1c52:7818:8bea:e74b:70b)
[21:06:06] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[21:07:17] *** Quits: kit-ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 240 seconds)
[21:08:32] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Quit: WeeChat 3.3)
[21:08:59] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[21:10:40] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[21:11:04] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[21:15:51] *** Joins: letto (~letto@86.120.81.105)
[21:16:03] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:d8e5:a6b4:2965:7cc2)
[21:16:03] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:d8e5:a6b4:2965:7cc2) (Changing host)
[21:16:03] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:19:32] *** Quits: Vrganj (~vrganj@93-138-69-45.adsl.net.t-com.hr) (Ping timeout: 250 seconds)
[21:22:44] *** Quits: Imk0tter (~Imk0tter@172.58.228.46) (Remote host closed the connection)
[21:22:57] *** Quits: zmt01 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[21:23:09] *** Joins: Imk0tter (~Imk0tter@172.58.228.46)
[21:33:39] *** Joins: zmt00 (~zmt00@user/zmt00)
[21:41:04] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:12] *** ChanServ sets mode: +v npaperbot
[21:42:29] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[21:45:44] *** Joins: Betal (~Betal@user/betal)
[21:45:49] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Read error: Connection reset by peer)
[21:45:57] *** Quits: jkaye (~jkaye@2601:281:8300:7530:ebdf:216a:24ec:ae90) (Ping timeout: 240 seconds)
[21:46:12] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[21:53:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:240b:629c:66c3:c78c) (Ping timeout: 240 seconds)
[21:58:11] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:59:16] *** Quits: feldim2425 (~feldim242@dynamic-2jh5c12x2xq736zy5n-pd01.res.v6.highway.a1.net) (Quit: ZNC 1.8.x-git-91-b00cc309 - https://znc.in)
[21:59:25] *** Joins: feldim2425 (~feldim242@dynamic-2jh5bzwtlmjc9mwoif-pd01.res.v6.highway.a1.net)
[21:59:30] *** Quits: smach (~savio@177.12.44.211) (Quit: Leaving)
[21:59:58] *** Joins: stonkey (~stonkey@user/stonkey)
[22:01:26] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:02:55] *** Joins: chozorho (~chozorho@2601:146:300:c30::719a)
[22:03:07] *** Joins: triad (~triad@user/triad)
[22:06:31] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1d45:c0f8:56d9:c89f)
[22:12:03] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[22:12:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:13:07] *** Joins: seninha (~seninha@user/seninha)
[22:14:21] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:17:47] *** Joins: PureSine_ (~PureSine@109.162.188.198)
[22:17:47] *** Quits: PureSine__ (~PureSine@109.162.188.198) (Read error: Connection reset by peer)
[22:21:36] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[22:22:09] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[22:23:27] <spidermonkey54> if I include `struct s{  int a = 5; };` in a header I wont end up with a link error about multiple definitions of `int a`. Why is that?
[22:24:25] *** Joins: zmt00 (~zmt00@user/zmt00)
[22:24:28] <Svitkona> a is a member variable
[22:25:32] <spidermonkey54> so?
[22:25:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[22:26:17] <spidermonkey54> I know using a static variable like `struct s{  const static int bar; };` will cause a link error.
[22:26:27] *** Joins: FAT1337 (~IceChat78@user/fat1337)
[22:28:24] <Oxyd> a is actually not a variable at all in that case. So that's why.
[22:28:50] *** Quits: Imk0tter (~Imk0tter@172.58.228.46) (Remote host closed the connection)
[22:29:12] *** Joins: Imk0tter (~Imk0tter@172.58.228.46)
[22:30:19] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[22:32:21] <spidermonkey54> The way I think of it is, `const static int bar; ` in the struct is shared between all instances in all translation units, so there can only be one definition in the `static` section of memory.  `int a = 5;` however technically doesn't exist on its own, it comes to existence when struct gets instantiated in which cas eit will belong to each instance with a unique symbol?
[22:33:53] <megaTherion> you dont need to have symbols in order to put things in memory... but isnt it kinda off topic? :O
[22:34:06] <zz> int a = 5; is a declaration with an initializer (implicit ctor generation). 'static int' on the other hand is a declaration only.
[22:34:07] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[22:34:30] <FAT1337> Hi all, just sayin, wandbox.org is so for noob.. 1337 ppl use REPLIT :) Get pwn noobs :)
[22:34:46] <Svitkona> :)
[22:35:12] <FAT1337> like File size limit exceeded
[22:35:12] <FAT1337> Finish   , Go fy wndbox..
[22:35:22] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 250 seconds)
[22:36:30] <zz> boring, booring
[22:37:54] *** Joins: tforever (~Terabyte@95.7.165.79)
[22:41:36] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:41:40] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[22:43:06] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46)
[22:48:36] *** Quits: tforever (~Terabyte@95.7.165.79) (Quit: Segmentation fault (core dumped))
[22:48:59] *** Quits: tbcr_ (~tbcr@107.13.189.161) (Ping timeout: 256 seconds)
[22:52:12] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:54:59] *** Joins: rgrinberg (~textual@2806:101e:7:2b:a509:6fda:5123:c5ae)
[22:59:47] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[23:01:55] *** Joins: RAMIII (~RAMIII@2601:6c1:4000:7a40:bad0:4bc9:ae8b:e4f1)
[23:03:33] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:04:05] *** Joins: ferdna (~ferdna@user/ferdna)
[23:09:51] *** Quits: RAMIII (~RAMIII@2601:6c1:4000:7a40:bad0:4bc9:ae8b:e4f1) (Quit: WeeChat 2.8)
[23:12:12] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[23:12:13] *** Quits: PureSine_ (~PureSine@109.162.188.198) (Quit: Leaving)
[23:25:38] *** Quits: jsbach (~jsbach@2a01:c22:a4ca:ea00:8858:384b:b6c9:3db9) (Ping timeout: 250 seconds)
[23:28:39] *** Joins: stonkey2 (~stonkey@user/stonkey)
[23:29:36] *** bedouin_ is now known as de
[23:29:47] *** de is now known as megeve
[23:30:32] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 240 seconds)
[23:35:03] *** Quits: ipe (~ipe@176-93-245-17.bb.dnainternet.fi) (Read error: Connection reset by peer)
[23:37:19] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[23:37:26] *** Joins: Xardas (~Xardas@wtsmv70.public.hu-berlin.de)
[23:37:55] <Xardas> const int i = 42; const auto &ref = i;
[23:38:01] <Xardas> what's the type of ref ?
[23:38:17] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[23:38:51] <Xardas> is it a  const const int& ? or a const int& ?
[23:39:24] *** Quits: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net) (Quit: Leaving)
[23:40:11] <ville> reference-to-const-int
[23:40:48] <Xardas> what if we omit the const from auto
[23:40:55] <Xardas> and put it like this
[23:40:59] <Xardas> auto &ref = i;
[23:41:01] <ville> reference-to-const-int
[23:41:20] <Xardas> so the const here is useless ?
[23:42:00] <ville> sort of. it may serve some "imagined" benefit that say i was changed to non-const, then having the const would still mean i can't be changed through ref
[23:42:34] <ville> if you imagine some bigger and more complex codebase which evolves over time
[23:42:58] <Xardas> That makes sense.
[23:43:10] <ville> whether any benefit materializes from it is another matter
[23:43:48] <Xardas> thanks for clarifying it
[23:45:33] *** Quits: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca) (Read error: Connection reset by peer)
[23:48:56] *** Joins: stonkey (~stonkey@user/stonkey)
[23:49:08] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[23:50:55] *** Quits: stonkey2 (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[23:52:26] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[23:52:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:55:24] *** Quits: Xardas (~Xardas@wtsmv70.public.hu-berlin.de) (Quit: Client closed)
[23:55:45] <Alipha> Xardas: I would prefer `const auto &` for documentation/readability purposes
[23:56:37] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:56:50] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:57:05] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[23:59:33] *** Joins: skapata (~Skapata@user/skapata)
