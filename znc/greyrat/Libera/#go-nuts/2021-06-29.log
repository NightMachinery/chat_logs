[00:02:46] *** Joins: tg (~tg@rockylinux/infra/tg)
[00:07:05] *** Joins: dmathieu (~textual@78.203.212.55)
[00:08:48] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:16:54] *** Quits: speatzle_ (~speatzles@2001:470:69fc:105::1003) (Bad user info)
[00:22:33] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[00:23:22] *** Quits: dmathieu (~textual@78.203.212.55) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:23:48] *** Joins: acx (~acx@178-83-50-21.dynamic.hispeed.ch)
[00:29:20] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 272 seconds)
[00:32:43] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[00:33:02] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:7c4b:bad:bb8d:d4d1) (Quit: Leaving)
[00:38:12] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 272 seconds)
[00:40:20] *** Joins: arinov_ (~arinov@88.230.49.132)
[00:41:54] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:42:56] *** Quits: acx (~acx@178-83-50-21.dynamic.hispeed.ch) (Remote host closed the connection)
[00:45:36] *** Joins: andlabs (~andlabs@71.190.119.164)
[00:47:34] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[00:51:28] *** Joins: BenLubar (~ben@cpe-65-28-175-139.wi.res.rr.com)
[00:51:47] <BenLubar> I'm trying to cross-compile in -race mode for windows but I'm getting this: https://gist.github.com/BenLubar/391e106ad78ad73152894b3775364979
[01:03:38] *** Joins: effprime (~effprime@user/effprime)
[01:08:55] *** Quits: arinov_ (~arinov@88.230.49.132) (Ping timeout: 258 seconds)
[01:11:48] *** Joins: gilesc (~textual@2603-8001-3600-dad7-d5b5-d70d-c468-4e32.res6.spectrum.com)
[01:13:26] *** Quits: gilesc (~textual@2603-8001-3600-dad7-d5b5-d70d-c468-4e32.res6.spectrum.com) (Client Quit)
[01:13:26] *** Quits: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net) (Ping timeout: 268 seconds)
[01:17:07] *** Quits: kayprish (~kayprish@46.240.143.86) (Remote host closed the connection)
[01:20:20] *** Joins: Guest53 (~textual@170.250.221.149)
[01:27:54] *** Joins: vitalius (~vitaliy@97-115-70-114.ptld.qwest.net)
[01:42:02] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[01:43:26] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 272 seconds)
[01:49:12] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[01:50:38] *** Quits: Guest53 (~textual@170.250.221.149) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:00:24] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:01:23] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[02:04:32] *** Joins: andlabs (~andlabs@71.190.119.164)
[02:04:53] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 258 seconds)
[02:05:59] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Quit: WeeChat 3.0.1)
[02:07:53] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[02:08:11] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[02:09:23] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[02:09:59] *** Quits: nimmen (~strangerf@78-61-239-159.static.zebra.lt) (Ping timeout: 265 seconds)
[02:10:18] *** Joins: s-video (~s-video@2601:196:4b00:e70:6014:ecd4:d43e:d759)
[02:15:06] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 272 seconds)
[02:16:47] *** Quits: algiss (~algiss@78-56-3-119.static.zebra.lt) (Quit: algiss)
[02:18:08] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d) (Quit: Leaving)
[02:19:29] <kodah> hmm
[02:19:45] *** Quits: znpy (~znpy@user/znpy) (Quit: Ping timeout (120 seconds))
[02:21:15] <kodah> this smells like GCC configuration
[02:22:41] *** Quits: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:22:51] *** Quits: Arahael (~arahael@120.88.166.123) (Ping timeout: 268 seconds)
[02:23:21] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:24:03] *** Quits: rgl (~rgl@85.245.47.147) (Remote host closed the connection)
[02:25:50] *** Quits: dicajo (~dicajo@072-186-122-186.res.spectrum.com) (Quit: WeeChat 2.3)
[02:26:51] *** Joins: znpy (~znpy@user/znpy)
[02:28:49] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[02:32:24] *** Quits: Danishman (~Allan@62-243-156-218-static.dk.customer.tdc.net) (Quit: Leaving)
[02:40:26] *** Quits: lungaro2 (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 265 seconds)
[02:40:33] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[02:47:10] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[02:47:54] *** Quits: s-video (~s-video@2601:196:4b00:e70:6014:ecd4:d43e:d759) (Ping timeout: 250 seconds)
[02:49:50] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:51:09] *** Quits: ofh (~felix@220.240.68.149) (Quit: ZNC 1.8.2 - https://znc.in)
[02:53:37] *** Joins: yelnah (~felix@193-119-119-72.tpgi.com.au)
[02:55:40] *** Parts: BenLubar (~ben@cpe-65-28-175-139.wi.res.rr.com) ()
[02:56:47] *** Joins: gggp (~textual@60.10.194.47)
[03:00:44] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[03:01:13] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 265 seconds)
[03:06:38] <b0nn> ugh Ben left, I was going to say that I thought that cross compiling CGO was the problem (and -race uses CGO under the hood) https://github.com/golang/go/issues/37021
[03:07:11] *** Joins: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net)
[03:10:07] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[03:12:27] *** Quits: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net) (Ping timeout: 268 seconds)
[03:17:44] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[03:18:16] *** Joins: kulak (~kulak@user/kulak)
[03:19:40] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:20:52] *** Joins: arinov_ (~arinov@88.230.49.132)
[03:22:33] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[03:23:39] *** Joins: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net)
[03:25:14] *** Quits: gst (~gst@gateway/tor-sasl/gst) (Ping timeout: 244 seconds)
[03:26:15] *** Joins: gst (~gst@gateway/tor-sasl/gst)
[03:26:40] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[03:29:22] *** Quits: gst (~gst@gateway/tor-sasl/gst) (Remote host closed the connection)
[03:29:40] *** Joins: gst (~gst@gateway/tor-sasl/gst)
[03:31:11] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:15] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[03:31:33] *** Joins: jsrnop (~mark@user/jsrnop)
[03:32:04] *** Joins: kulak (~kulak@user/kulak)
[03:33:26] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[03:34:19] *** Joins: kulak (~kulak@user/kulak)
[03:45:40] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:48:50] *** Quits: arinov_ (~arinov@88.230.49.132) (Ping timeout: 272 seconds)
[03:49:11] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[03:49:52] *** Joins: andlabs (~andlabs@71.190.119.164)
[03:51:22] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[03:53:54] *** Quits: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net) (Ping timeout: 272 seconds)
[03:56:07] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:56:16] *** Joins: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net)
[04:02:22] *** Joins: arinov_ (~arinov@88.230.49.132)
[04:05:27] *** Joins: kinduff0 (~kinduff@user/kinduff)
[04:06:33] *** Quits: kinduff (~kinduff@user/kinduff) (Read error: Connection reset by peer)
[04:06:33] *** kinduff0 is now known as kinduff
[04:11:24] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[04:12:09] *** Joins: kulak (~kulak@user/kulak)
[04:20:31] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[04:21:01] *** Joins: gggp (~textual@60.10.194.47)
[04:21:31] *** Joins: kulak (~kulak@user/kulak)
[04:25:18] *** Joins: Dieterbe_ (~Dieterbe@user/dieterbe)
[04:25:54] *** Joins: marcel0 (~marcel@user/marcel)
[04:25:58] *** Joins: kn1005 (~kn100@wireguard/tunneler/kn100)
[04:26:01] *** Joins: scjosh4 (~scjosh@206.189.79.69)
[04:26:01] *** Joins: zkanda5 (~zkanda@box.makean.art)
[04:26:04] *** Joins: mdel4 (~mdel@user/mdel)
[04:26:08] *** Joins: muesli0 (~muesli@fribbledom.com)
[04:26:12] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[04:26:14] *** Quits: binkers (~binkers@user/binkers) (Ping timeout: 244 seconds)
[04:26:32] *** Joins: binkers (~binkers@user/binkers)
[04:26:45] *** Quits: dg (dgl@dg.wtf) (Ping timeout: 244 seconds)
[04:26:45] *** Quits: Gnuman (~gnuman@user/gnuman) (Ping timeout: 244 seconds)
[04:26:45] *** Quits: CorbaTheGeek (~peter@99-167-204-9.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 244 seconds)
[04:26:59] *** Joins: CorbaTheGeek (~peter@99-167-204-9.lightspeed.sntcca.sbcglobal.net)
[04:27:16] *** Quits: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: Dieterbe (~Dieterbe@user/dieterbe) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: jay_wild (~very@138.68.15.221) (Ping timeout: 244 seconds)
[04:27:33] *** Joins: dg (dgl@dg.wtf)
[04:27:46] *** Quits: marcel (~marcel@user/marcel) (Read error: Connection reset by peer)
[04:27:47] *** marcel0 is now known as marcel
[04:27:47] *** Quits: scjosh (~scjosh@206.189.79.69) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: zkanda (~zkanda@box.makean.art) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: mdel (~mdel@user/mdel) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: muesli (~muesli@fribbledom.com) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: jer0me (~jerome@62-210-220-242.rev.poneytelecom.eu) (Ping timeout: 244 seconds)
[04:27:47] *** mdel4 is now known as mdel
[04:27:47] *** scjosh4 is now known as scjosh
[04:27:48] *** zkanda5 is now known as zkanda
[04:27:48] *** kn1005 is now known as kn100
[04:27:48] *** muesli0 is now known as muesli
[04:27:55] *** Joins: jeromenerf (~jerome@62-210-220-242.rev.poneytelecom.eu)
[04:27:58] *** Joins: Guest53 (~textual@170.250.221.149)
[04:28:32] *** Joins: Gnuman (~gnuman@user/gnuman)
[04:28:56] *** Joins: jay_wild (~very@138.68.15.221)
[04:30:00] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 272 seconds)
[04:30:26] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:31:25] *** Joins: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se)
[04:32:49] *** Quits: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net) (Remote host closed the connection)
[04:32:52] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 252 seconds)
[04:32:59] *** Joins: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net)
[04:33:04] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[04:33:22] *** Joins: andlabs (~andlabs@71.190.119.164)
[04:34:03] *** Joins: Garb0000 (~Garb0@user/garb0)
[04:34:04] *** Quits: Garb0000 (~Garb0@user/garb0) (Client Quit)
[04:36:10] *** Quits: marlinc_ (~marlinc@user/marlinc) (Ping timeout: 252 seconds)
[04:36:20] *** Quits: Garb000 (~Garb0@user/garb0) (Ping timeout: 272 seconds)
[04:40:51] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[04:41:45] *** Joins: kn1009 (~kn100@wireguard/tunneler/kn100)
[04:44:01] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 268 seconds)
[04:44:01] *** kn1009 is now known as kn100
[04:44:47] *** Joins: marlinc (~marlinc@user/marlinc)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:45] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[05:05:48] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[05:06:49] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[05:07:22] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[05:08:38] *** Joins: gggp (~textual@36.112.128.143)
[05:13:09] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:13:12] *** Quits: gggp (~textual@36.112.128.143) (Ping timeout: 252 seconds)
[05:15:44] *** Joins: andlabs (~andlabs@71.190.119.164)
[05:23:43] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: Ping timeout (120 seconds))
[05:24:03] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[05:24:28] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 272 seconds)
[05:25:05] *** Joins: parnikkapore (~parnikkap@user/parnikkapore)
[05:31:23] *** Joins: gggp (~textual@60.10.194.47)
[05:34:30] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[05:35:22] *** Quits: Guest53 (~textual@170.250.221.149) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:42:56] *** Quits: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net) (Ping timeout: 268 seconds)
[05:43:32] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (Ping timeout: 268 seconds)
[05:43:45] *** Joins: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net)
[05:44:06] *** Quits: KekSi (~KekSi@x4dbd52d2.dyn.telefonica.de) (Ping timeout: 272 seconds)
[05:47:24] *** Joins: KekSi (~KekSi@dynamic-077-012-141-250.77.12.pool.telefonica.de)
[05:47:54] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[05:48:30] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[05:48:50] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[05:50:34] *** Joins: gggpkm_ (~gggpkm@36.112.134.194)
[05:52:03] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1000.inf6.spectrum.com)
[05:52:12] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 258 seconds)
[05:52:57] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[05:54:37] *** Joins: gggpkm (~gggpkm@106.37.74.209)
[05:54:38] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[05:55:52] *** Quits: gggpkm_ (~gggpkm@36.112.134.194) (Ping timeout: 268 seconds)
[05:57:10] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Quit: Ping timeout (120 seconds))
[06:00:19] *** Joins: oxum (~oxum@136.185.148.86)
[06:00:38] *** Quits: telboon (~telboon@user/telboon) (Ping timeout: 258 seconds)
[06:05:06] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[06:05:16] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 252 seconds)
[06:05:41] *** Joins: gggpkm_ (~gggpkm@124.126.15.211)
[06:08:49] *** Quits: gggpkm (~gggpkm@106.37.74.209) (Ping timeout: 268 seconds)
[06:13:53] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Remote host closed the connection)
[06:14:11] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[06:23:22] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 272 seconds)
[06:27:42] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[06:37:45] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 265 seconds)
[06:37:56] *** Quits: arinov_ (~arinov@88.230.49.132) (Ping timeout: 272 seconds)
[06:38:18] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-48.prtc.net)
[06:43:55] *** gggpkm_ is now known as gggpkm
[06:50:54] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[06:51:06] *** Quits: gggpkm (~gggpkm@124.126.15.211) (Ping timeout: 252 seconds)
[06:54:42] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[06:57:05] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[06:57:07] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[06:57:36] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[06:58:44] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[07:00:18] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[07:08:34] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-48.prtc.net) (Ping timeout: 246 seconds)
[07:11:23] *** Joins: Ripcord (~Ripcord@154.21.28.80)
[07:13:33] *** Parts: Ripcord (~Ripcord@154.21.28.80) ()
[07:17:52] *** Quits: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net) (Ping timeout: 265 seconds)
[07:27:57] *** Parts: thesemicolons (~thesemico@user/thesemicolons) ()
[07:29:03] *** Quits: LtHummus (~lthummus@174-21-28-50.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:29:34] *** Quits: y04nn (~y04nn@91.193.4.106) (Ping timeout: 258 seconds)
[07:32:21] *** Joins: LtHummus (~lthummus@174-21-28-50.tukw.qwest.net)
[07:40:41] *** Joins: gggpkm (~gggpkm@124.126.15.211)
[07:42:32] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[07:44:13] *** Joins: gggp (~textual@60.10.194.47)
[07:45:39] *** Joins: Guest53 (~textual@170.250.221.149)
[07:46:48] *** Joins: oxum (~oxum@136.185.148.86)
[07:51:42] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 265 seconds)
[07:55:17] *** Joins: gggpkm_ (~gggpkm@36.112.134.194)
[07:57:50] *** Quits: gggpkm (~gggpkm@124.126.15.211) (Ping timeout: 252 seconds)
[07:58:57] *** Quits: Guest53 (~textual@170.250.221.149) (Quit: Textual IRC Client: www.textualapp.com)
[07:59:18] *** Quits: rabbitear (~juice@142.93.115.104) (Quit: Lost terminal)
[08:02:49] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[08:03:26] *** Joins: rabbitear (~juice@142.93.115.104)
[08:14:15] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[08:14:35] *** Joins: gggp (~textual@60.10.194.47)
[08:19:51] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1000.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[08:24:10] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:1d6e:39d7:212d:b3b)
[08:25:22] *** Quits: parnikkapore (~parnikkap@user/parnikkapore) (Quit: Leaving)
[08:26:40] *** Joins: souvik (~souvik@103.199.182.197)
[08:30:54] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[08:31:09] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[08:35:27] *** Quits: darkapex (uid360049@user/darkapex) (Quit: Connection closed for inactivity)
[08:40:31] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[08:41:51] *** Joins: gggp (~textual@60.10.194.47)
[08:45:15] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 272 seconds)
[08:49:02] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[08:56:07] *** Quits: aleph (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Quit: WeeChat info:version)
[08:59:13] *** Joins: nimmen (~strangerf@78-61-239-159.static.zebra.lt)
[08:59:21] *** Quits: noonien (~noonien@user/noonien) (Quit: Ping timeout (120 seconds))
[09:01:55] *** Joins: noonien (~noonien@user/noonien)
[09:17:29] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[09:17:53] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[09:32:19] *** Joins: gggp (~textual@60.10.194.47)
[09:34:47] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 268 seconds)
[09:37:04] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[09:39:56] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[09:42:23] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 265 seconds)
[09:51:02] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[09:52:36] *** Quits: gggpkm_ (~gggpkm@36.112.134.194) (Ping timeout: 252 seconds)
[09:57:05] *** Joins: zikaeroh (~zikaeroh@50.35.71.7)
[09:58:33] *** Quits: a153 (~a153@user/a153) (Quit: WeeChat 2.3)
[09:59:43] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[10:02:02] *** Quits: zikaeroh (~zikaeroh@50.35.71.7) (Quit: Client closed)
[10:02:30] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[10:02:39] *** Joins: Zikaeroh (~Zikaeroh@50.35.71.7)
[10:02:44] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[10:03:02] *** Joins: novns (~novns@user/novns)
[10:03:44] *** Joins: gggp (~textual@60.10.194.47)
[10:08:00] *** Quits: bpalmer (~user@user/bpalmer) (Remote host closed the connection)
[10:08:29] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[10:12:25] *** Quits: souvik (~souvik@103.199.182.197) (Read error: Connection reset by peer)
[10:18:57] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:19:00] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 258 seconds)
[10:19:07] *** Joins: dmathieu (~textual@78.203.212.55)
[10:19:35] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[10:20:03] *** Joins: gggp (~textual@60.10.194.47)
[10:24:55] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[10:24:57] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[10:25:07] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[10:25:53] *** Quits: dmathieu (~textual@78.203.212.55) (Ping timeout: 265 seconds)
[10:28:32] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb.)
[10:29:45] *** Quits: yelnah (~felix@193-119-119-72.tpgi.com.au) (Ping timeout: 265 seconds)
[10:30:35] *** Joins: yelnah (~felix@123-243-79-133.static.tpgi.com.au)
[10:31:32] *** Quits: Zikaeroh (~Zikaeroh@50.35.71.7) (Quit: Client closed)
[10:33:49] *** Joins: Jigsy (~Jigsy@user/jigsy)
[10:35:14] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 268 seconds)
[10:35:53] *** Joins: gggp (~textual@60.10.194.47)
[10:36:16] *** Joins: trube (~trube@193.37.252.172)
[10:40:30] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[10:43:03] *** Joins: shka (~herr@109.231.62.239)
[10:46:22] *** Joins: hikhvar7 (~thelounge@x4dbd40b3.dyn.telefonica.de)
[10:47:41] *** Joins: souvik (~souvik@47.11.67.147)
[10:50:00] *** Quits: souvik (~souvik@47.11.67.147) (Read error: Connection reset by peer)
[10:54:16] *** Joins: souvik (~souvik@103.199.182.84)
[10:57:04] *** gggpkm_ is now known as gggpkm
[10:57:14] *** A_Dragon is now known as nogarD_A
[10:57:57] *** Joins: ofh (~felix@2001:44b8:3080:a5:6f0:21ff:fe3c:d4d7)
[10:58:14] *** Quits: yelnah (~felix@123-243-79-133.static.tpgi.com.au) (Ping timeout: 272 seconds)
[10:59:20] *** Quits: LiftLeft (~LiftLeft@154.21.114.200) (Ping timeout: 252 seconds)
[11:01:25] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[11:05:56] *** Joins: lehmrob (~rd7@p54be89af.dip0.t-ipconnect.de)
[11:07:32] *** Joins: gggp (~textual@60.10.194.47)
[11:07:56] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 265 seconds)
[11:11:54] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 258 seconds)
[11:13:34] *** Joins: menace (~someone@2001:a61:3456:4d01:b9d6:58d3:4ea7:4453)
[11:13:44] *** Quits: menace (~someone@2001:a61:3456:4d01:b9d6:58d3:4ea7:4453) (Changing host)
[11:13:44] *** Joins: menace (~someone@user/menace)
[11:13:46] *** menace is now known as Deknos
[11:15:44] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 258 seconds)
[11:18:59] *** Joins: absc (~absc@dynamic-adsl-94-34-168-145.clienti.tiscali.it)
[11:22:00] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:26:23] *** Joins: arinov_ (~arinov@88.230.49.132)
[11:26:48] *** Joins: gggp (~textual@60.10.194.47)
[11:27:18] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[11:28:00] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 272 seconds)
[11:28:20] *** Joins: thing (~thing@user/thing)
[11:30:42] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[11:31:05] *** Joins: algiss (~algiss@78-56-3-119.static.zebra.lt)
[11:33:22] *** Joins: Guest27 (~Guest27@2a01:cb14:876:d100:3e61:cc01:3a73:c8a2)
[11:33:51] *** Quits: Guest27 (~Guest27@2a01:cb14:876:d100:3e61:cc01:3a73:c8a2) (Client Quit)
[11:34:06] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[11:39:50] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 265 seconds)
[11:48:14] *** Quits: lehmrob (~rd7@p54be89af.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[11:48:23] *** Quits: thing (~thing@user/thing) (Quit: thing)
[11:49:07] *** Joins: thing (~thing@user/thing)
[11:54:43] *** Joins: Kane_ (~Kane@2a01:e34:ee89:5d90:1d6e:39d7:212d:b3b)
[11:58:28] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:1d6e:39d7:212d:b3b) (Ping timeout: 268 seconds)
[11:58:38] *** Kane_ is now known as Kane
[11:59:31] *** Joins: Xjs (~jannis@user/xjs)
[12:00:12] *** Joins: goldfish (~goldfish@user/goldfish)
[12:03:10] *** Joins: pojntfx (~pojntfx@felix-pojtinger.nat.selfnet.de)
[12:03:14] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[12:03:55] *** Joins: souvik_ (~souvik@103.199.182.84)
[12:04:41] *** Joins: jannis (~jannis@user/xjs)
[12:04:58] *** Quits: souvik (~souvik@103.199.182.84) (Ping timeout: 252 seconds)
[12:06:13] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 268 seconds)
[12:07:54] *** Joins: mkopriva (~mkopriva@ip-94-113-146-145.net.upcbroadband.cz)
[12:08:32] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 272 seconds)
[12:09:10] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 272 seconds)
[12:15:37] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[12:21:27] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[12:21:53] *** nogarD_A is now known as A_Dragon
[12:23:14] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[12:23:41] *** Joins: kulak (~kulak@user/kulak)
[12:24:03] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 268 seconds)
[12:25:22] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:27:32] *** Quits: souvik_ (~souvik@103.199.182.84) (Ping timeout: 272 seconds)
[12:29:14] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[12:30:00] *** Joins: kulak (~kulak@user/kulak)
[12:32:35] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[12:35:54] *** Quits: algiss (~algiss@78-56-3-119.static.zebra.lt) (Quit: algiss)
[12:39:15] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: jai (~darkapex@user/darkapex) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: worr (~worr@2001:470:69fc:105::78c) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e) (Quit: Bridge terminating on SIGTERM)
[12:39:18] *** Quits: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1) (Quit: Bridge terminating on SIGTERM)
[12:39:19] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: Bridge terminating on SIGTERM)
[12:39:34] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 272 seconds)
[12:43:30] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 240 seconds)
[12:47:05] *** Joins: mrig (~mrig@user/mrig)
[12:49:49] *** Quits: hikhvar7 (~thelounge@x4dbd40b3.dyn.telefonica.de) (Quit: Ping timeout (120 seconds))
[12:49:58] *** Joins: hikhvar7 (~thelounge@x4dbd40b3.dyn.telefonica.de)
[12:50:16] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[12:50:18] *** Quits: pez (~pez@user/pez) (Ping timeout: 244 seconds)
[12:50:53] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:51:19] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[12:52:58] *** Joins: Arahael (~arahael@60-240-135-223.tpgi.com.au)
[12:53:22] *** Joins: a153 (~a153@user/a153)
[12:55:40] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[12:56:07] *** Joins: gggp (~textual@124.126.15.211)
[12:56:32] *** Joins: holgersson (~quassel@user/holgersson)
[12:57:35] *** imm__ is now known as imm_
[12:59:43] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[13:00:42] *** Quits: gggp (~textual@124.126.15.211) (Ping timeout: 252 seconds)
[13:05:49] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[13:18:30] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[13:19:10] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 258 seconds)
[13:19:21] *** Joins: jsrnop (~mark@user/jsrnop)
[13:25:04] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 246 seconds)
[13:25:10] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[13:25:25] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[13:25:27] *** Joins: Crassus (~Crassus@user/crassus)
[13:28:32] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[13:30:31] <svedrin> hi. I'm taking my first baby steps in go :) I've created a variadic function such as `func cmd(args ...string)`, and now I'd like to do the equivalent of what `cmd = args + ["/f"]` would do in Python. I've found that I can use a combination of make(), copy(), append(); but do I have to, or is there a shorter way?
[13:30:53] *** Joins: sysh (~sysh@212.237.182.120)
[13:32:47] *** Joins: gggp (~textual@60.10.23.171)
[13:33:37] *** Quits: gggp (~textual@60.10.23.171) (Client Quit)
[13:35:16] *** Quits: arinov_ (~arinov@88.230.49.132) (Ping timeout: 258 seconds)
[13:35:57] <sztanpet> you need make and copy if you want to copy the slice, otherwise you can just append to it, it will re-allocate itself if there isnt enough room
[13:38:02] <sztanpet> so https://play.golang.org/p/QU3NZYDD5Py
[13:39:25] <sztanpet> also https://blog.golang.org/slices-intro because variadic arguments are a slice behind the scene
[13:40:51] *** Joins: gggp (~textual@60.10.23.171)
[13:40:51] *** Quits: gggp (~textual@60.10.23.171) (Client Quit)
[13:41:14] <sztanpet> also https://tour.golang.org/moretypes/7
[13:42:50] *** Joins: souvik (~souvik@47.11.84.82)
[13:42:51] *** Joins: tha (~user@2a05:f480:1400:f44:5400:3ff:fe6d:f349)
[13:42:59] *** Joins: gggpkm_ (~gggpkm@60.10.23.171)
[13:43:34] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[13:44:51] <svedrin> sztanpet: hmm yeah I'd like to not modify a slice that I don't own; but I'm not sure it's worth the extra make+copy because that's what'll happen anyway when append() reallocates
[13:45:39] <fizzie> FWIW, you don't *need* to use make+copy even if you need a copy, you can also just arrange for append to always do it by using a full slice expression to ensure cap == len.
[13:46:15] <svedrin> fizzie: uhh wdym, could you give a quick example please?
[13:46:44] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Read error: Connection reset by peer)
[13:46:50] <fizzie> append(args[:len(args):len(args)], "/f")  // not incredibly pretty but...
[13:46:51] *** Joins: reedrichards (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[13:47:46] *** Joins: nmollerup (~nmm@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk)
[13:49:10] *** reedrichards is now known as MrFantastik
[13:50:44] <fizzie> (a[i:j:k] is like a[i:j] except it sets the cap of the resulting slice to k-i rather than cap(a)-i, so doing the above guarantees there's no space for append to use, and it has to reallocate.)
[13:51:12] <svedrin> fizzie: do I understand it correctly that this will create a new slice from `args` where cap and len are both explicitly set to `len(args)`, so that `append` will always decide "ok there's no room in that slice, I'll better realloc"?
[13:51:33] <fizzie> Yes.
[13:51:46] <svedrin> fizzie: allright, thanks :)
[13:51:48] <fizzie> Though make + copy is rather more obvious (if verbose) way of saying that.
[13:53:39] <svedrin> yeah, definitely
[13:54:54] <svedrin> I'm actually just not going to care tbh, I'm not in a memory-constrained environment, so I'm just going to `append(args, "/f")`
[13:55:18] <svedrin> but I wanted to understand if I was missing something, so thanks for claring things up for me :)
[13:55:22] <svedrin> much appreciated
[13:58:46] *** Joins: yelnah (~felix@2001:44b8:30ae:d8:6f0:21ff:fe3c:d4d7)
[14:00:24] *** Quits: ofh (~felix@2001:44b8:3080:a5:6f0:21ff:fe3c:d4d7) (Ping timeout: 272 seconds)
[14:00:53] *** Quits: souvik (~souvik@47.11.84.82) (Ping timeout: 256 seconds)
[14:02:21] *** Joins: souvik (~souvik@103.199.182.124)
[14:03:23] <fizzie> I imagine the concern about `append(args, "/f")` is not so much about memory but the potential for arguably unintuitive results like in https://play.golang.org/p/MtrFq0FqrPR
[14:03:26] <fizzie> (I mean, in that example it's quite obvious, in a real one the append result would end up stored in some structure kept by another package.)
[14:03:26] *** Joins: Ohlov31 (~Ohlov3@dyndsl-080-228-184-148.ewe-ip-backbone.de)
[14:05:25] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[14:07:15] *** Quits: Ohlov3 (~Ohlov3@dyndsl-095-033-058-193.ewe-ip-backbone.de) (Ping timeout: 265 seconds)
[14:10:31] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[14:14:59] <svedrin> yep, that's definitely true
[14:15:08] <svedrin> I like to treat variables as read-only as much as I can
[14:15:59] *** Quits: acid (~acid@user/acid) (Ping timeout: 268 seconds)
[14:16:11] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 256 seconds)
[14:16:25] <b0nn> hmm, that reminds me - how long does it take to make a copy of something (like a slice) vs take ownership of a mutex
[14:16:44] <b0nn> I was going to benchmark it, but was worried about localised benchmarks of miniscule things
[14:17:06] <b0nn> But I know that getting ownership of a mutex is quite slow
[14:18:22] <b0nn> Oh, maybe not so slow - 17ns https://www.freecodecamp.org/news/must-know-numbers-for-every-computer-engineer/
[14:19:01] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 256 seconds)
[14:21:54] *** Joins: acid (~acid@user/acid)
[14:22:52] *** Joins: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de)
[14:22:53] *** Joins: gggp (~textual@60.10.23.171)
[14:25:34] *** Quits: gggp (~textual@60.10.23.171) (Client Quit)
[14:26:27] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[14:26:38] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[14:27:13] *** gggpkm_ is now known as gggpkm
[14:27:43] *** Quits: acid (~acid@user/acid) (Ping timeout: 246 seconds)
[14:29:21] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[14:31:41] *** Joins: acid (~acid@user/acid)
[14:34:13] *** Joins: arinov_ (~arinov@31.142.7.118)
[14:37:45] *** Quits: absc (~absc@dynamic-adsl-94-34-168-145.clienti.tiscali.it) (Ping timeout: 258 seconds)
[14:39:47] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[14:39:52] *** Quits: popey (~popey@ubuntu/member/popey) (Ping timeout: 250 seconds)
[14:40:14] *** Joins: gggp (~textual@60.10.194.47)
[14:42:15] *** Quits: gggpkm (~gggpkm@60.10.23.171) (Ping timeout: 256 seconds)
[14:42:21] *** Joins: sleetdrop (~sleetdrop@61.135.152.254)
[14:43:08] *** Parts: tha (~user@2a05:f480:1400:f44:5400:3ff:fe6d:f349) ()
[14:44:42] *** Quits: arinov_ (~arinov@31.142.7.118) (Ping timeout: 240 seconds)
[14:46:30] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[14:49:14] *** Quits: pojntfx (~pojntfx@felix-pojtinger.nat.selfnet.de) (Remote host closed the connection)
[14:52:33] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[14:53:01] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[14:54:25] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[14:56:10] *** gggpkm_ is now known as gggpkm
[14:56:56] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[14:57:13] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[14:57:18] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[14:57:49] *** Quits: sleetdrop (~sleetdrop@61.135.152.254) (Ping timeout: 246 seconds)
[14:58:04] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[14:58:34] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:59:01] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[14:59:38] *** Quits: mohan43u (~mohan@user/mohan43u) (Quit: WeeChat 3.2)
[15:00:02] *** Joins: mohan43u (~mohan@user/mohan43u)
[15:02:25] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[15:03:57] *** Joins: iauc (~iauc@2001:4643:23d:0:a426:b321:9258:ecd0)
[15:09:58] *** Joins: Ergo^ (~ergo@91.238.59.144)
[15:15:57] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:16:39] *** Joins: hikhvar79 (~thelounge@x4dbd1261.dyn.telefonica.de)
[15:20:13] *** Quits: hikhvar7 (~thelounge@x4dbd40b3.dyn.telefonica.de) (Ping timeout: 246 seconds)
[15:26:22] *** Joins: absc (~absc@dynamic-adsl-94-34-168-145.clienti.tiscali.it)
[15:28:09] *** Joins: gggpkm_ (~gggpkm@60.10.23.171)
[15:28:09] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 256 seconds)
[15:30:34] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[15:34:38] *** Joins: gggpkm (~gggpkm@60.10.23.171)
[15:34:51] *** Joins: gggp (~textual@60.10.23.171)
[15:36:19] *** Quits: gggpkm_ (~gggpkm@60.10.23.171) (Ping timeout: 246 seconds)
[15:37:35] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[15:39:00] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[15:39:26] *** Joins: jkl (~jkl@user/jkl)
[15:45:34] *** Joins: noxim (~noxim@user/noxim)
[15:46:21] *** Quits: gggpkm (~gggpkm@60.10.23.171) (Remote host closed the connection)
[15:47:43] *** Joins: arinov_ (~arinov@88.230.49.132)
[15:48:42] *** Quits: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:49:52] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[15:50:43] *** Joins: jkl (~jkl@user/jkl)
[15:53:20] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[15:55:54] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 240 seconds)
[15:56:28] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Ping timeout: 244 seconds)
[15:59:37] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[16:01:36] *** Quits: arinov_ (~arinov@88.230.49.132) (Ping timeout: 256 seconds)
[16:03:58] *** Joins: Garb0 (~Garb0@user/garb0)
[16:05:38] *** Quits: gggp (~textual@60.10.23.171) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:06:08] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[16:06:10] *** Joins: souvik_ (~souvik@47.11.67.147)
[16:06:38] *** Joins: arinov_ (~arinov@88.230.49.132)
[16:06:42] *** Quits: souvik (~souvik@103.199.182.124) (Ping timeout: 240 seconds)
[16:06:47] *** Joins: gggpkm (~gggpkm@60.10.23.171)
[16:13:09] *** Quits: trube (~trube@193.37.252.172) (Quit: Leaving)
[16:13:37] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[16:15:01] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Read error: Connection reset by peer)
[16:15:40] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[16:16:54] *** Quits: souvik_ (~souvik@47.11.67.147) (Read error: Connection reset by peer)
[16:20:40] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[16:20:56] *** Joins: souvik (~souvik@103.199.182.211)
[16:22:15] *** Joins: popey (~popey@ubuntu/member/popey)
[16:22:29] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[16:27:30] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 240 seconds)
[16:31:27] *** Quits: decartes (uid240036@id-240036.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[16:39:08] *** Joins: eduardas (~eduardas@82-135-139-249.static.zebra.lt)
[16:40:06] *** Joins: yoonkn (~user@175.197.208.79)
[16:40:16] *** Joins: sleetdrop (~sleetdrop@mail.iask.sina.com.cn)
[16:40:33] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[16:40:55] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[16:44:32] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[16:45:47] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 256 seconds)
[16:45:54] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[16:46:06] *** Joins: SincereFox (uid337158@user/sincerefox)
[16:47:12] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[16:53:06] *** Quits: arinov_ (~arinov@88.230.49.132) (Ping timeout: 240 seconds)
[16:53:52] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.1)
[16:55:30] *** Quits: sleetdrop (~sleetdrop@mail.iask.sina.com.cn) (Ping timeout: 240 seconds)
[16:59:03] <gggpkm> leveldb is better than redis?
[17:03:24] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[17:04:42] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[17:05:03] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[17:07:57] <rk4> 'different'
[17:08:06] <Sam> Define "better"? (although really the answer is "no. evaluate your use cases and the options, there is no easy way to define "better")
[17:08:24] <rk4> incidentally i was just weighing up if i want to use rocksdb [a leveldb fork]
[17:13:24] *** Quits: jdrab (~jdrab@user/jdrab) (Quit: jdrab)
[17:15:17] *** Joins: jdrab (~jdrab@2a03:4000:48:1a8:44c5:2fff:fe15:f20d)
[17:15:17] *** Quits: jdrab (~jdrab@2a03:4000:48:1a8:44c5:2fff:fe15:f20d) (Changing host)
[17:15:17] *** Joins: jdrab (~jdrab@user/jdrab)
[17:16:22] <sztanpet> svedrin you do own that slice tho
[17:16:43] *** Joins: Kane_ (~Kane@2a01:e34:ee89:5d90:1d6e:39d7:212d:b3b)
[17:17:21] <sztanpet> caller did not give you the slice, the runtime did, there is no outside reference
[17:18:22] <svedrin> hmm, that's true
[17:19:45] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:1d6e:39d7:212d:b3b) (Killed (NickServ (GHOST command used by Kane_)))
[17:19:52] *** Kane_ is now known as Kane
[17:20:04] *** Joins: kdsch (~kdsch@89.45.224.92)
[17:20:55] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:21:53] <sztanpet> and most probably, the whole thing will be on the stack too
[17:24:08] <fizzie> If you call the function using the `foo...` syntax, it would appear there *can* be an outside reference. It doesn't make a new slice, it passes the given s lice as-is, including its cap.
[17:24:11] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:24:16] <fizzie> Or at least that's what https://play.golang.org/p/hoZqbQpRZAc looks like.
[17:25:15] <fizzie> And https://play.golang.org/p/cUtwIwRecCP confirms.
[17:25:37] *** Quits: iauc (~iauc@2001:4643:23d:0:a426:b321:9258:ecd0) (Ping timeout: 246 seconds)
[17:27:25] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[17:27:43] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 256 seconds)
[17:30:31] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[17:32:12] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:32:34] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[17:34:16] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Killed (NickServ (GHOST command used by xavie)))
[17:34:41] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[17:34:46] <sztanpet> heh neat
[17:35:10] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[17:36:33] <sztanpet> another sharp-ish edge previously unkown to me, altho i could hand-wave it away by "people surely dont write code like that"
[17:36:47] <sztanpet> but of course they do
[17:37:39] <sztanpet> send it to dave cheney!
[17:38:41] <Sam> It's not really an edge case; ... is just syntactic sugar for passing the slice. Nothing special is happening.
[17:39:24] <Sam> If you always think about it that way this all makes sense and is how you'd expect things to be have.
[17:39:57] *** Joins: Guest53 (~textual@170.250.221.149)
[17:40:33] <sztanpet> true, the most pragmatic way to do it really
[17:40:48] <sztanpet> no extra allocation needed if the caller already did it
[17:50:26] *** Joins: darkapex (uid360049@user/darkapex)
[17:50:35] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:52:15] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Killed (NickServ (GHOST command used by xavie)))
[17:52:40] *** Joins: xavie (~xavie@176-139-252-198.abo.bbox.fr)
[17:53:38] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Quit: WeeChat 3.2)
[17:53:58] *** Quits: Guest53 (~textual@170.250.221.149) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:58:10] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[17:58:53] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 256 seconds)
[17:59:06] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[18:06:51] *** Joins: Snyp (~rksht@49.207.193.103)
[18:20:06] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[18:22:31] *** Joins: iauc (~iauc@ti0061a400-1478.bb.online.no)
[18:24:35] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:25:28] *** Joins: edrocks (~Ed@user/edrocks)
[18:28:32] *** Joins: arcatech (~arcatech@user/arcatech)
[18:28:57] *** Joins: Lyrex (~50902ca9@ircip2.mibbit.com)
[18:29:08] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb.)
[18:29:17] *** Quits: Lyrex (~50902ca9@ircip2.mibbit.com) (Client Quit)
[18:34:52] *** Joins: Jigsy (~Jigsy@user/jigsy)
[18:50:34] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:51:58] *** Quits: hikhvar79 (~thelounge@x4dbd1261.dyn.telefonica.de) (Ping timeout: 246 seconds)
[18:52:56] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[18:53:15] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[18:57:30] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[19:01:38] <Anderson-D> I have a type that I use for enums, e. g. `type State string` and a few consts, like `StatusNew`, `StatusApproved` etc.
[19:01:52] *** Joins: gggp (~textual@60.10.23.171)
[19:01:58] <Anderson-D> How do I prevent the usage of `string` instead of `State`?
[19:02:16] <Anderson-D> E. g. for `func ChangeState(newState State)` I can pass `string` instead of `State`
[19:02:19] <Anderson-D> Any ways to prevent this?
[19:03:40] *** Quits: gggp (~textual@60.10.23.171) (Client Quit)
[19:04:11] <rudi_s> Anderson-D: You shouldn't be able to pass string variables, only string constants. Constants in Go are untyped so I don't think you can prevent that.
[19:04:31] *** Quits: souvik (~souvik@103.199.182.211) (Read error: Connection reset by peer)
[19:04:45] *** Joins: Garb00 (~Garb0@user/garb0)
[19:07:13] <fizzie> You can do tricks like  https://play.golang.org/p/gM2dhGcUnVf but I rather imagine that's more trouble than it's worth.
[19:07:27] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 256 seconds)
[19:08:56] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1000)
[19:12:15] <Anderson-D> rudi_s, I see. So does it mean there's no way to enforce strict type check for passed value? https://play.golang.org/p/l8CrxXOD0zE
[19:13:01] <rudi_s> Anderson-D: No. Unless you use interfaces like fiz<tab> suggested.
[19:13:23] <rudi_s> However, I think that's not worth it. Just catch invalid arguments and either return an error or panic(), depending on the function.
[19:13:33] *** Joins: gggp (~textual@60.10.23.171)
[19:14:16] <Anderson-D> rudi_s: fizzie: Thanks for the help! The solution with interfaces is actually pretty smart.
[19:14:33] <rudi_s> Because technically "foo" is of type State when passed as an argument of type State. It's just that Go doesn't enforce the value to be constructed by  using one of the constants.
[19:14:54] <Anderson-D> I think I'll stick to the interface solution since I need to be *absolutely* sure that no one accidentally passes the incorrect state string
[19:15:19] <rudi_s> Well, it doesn't prevent anybody (at least from the same package) from passing an invalid type, just makes it harder. Just as you can just tell everybody to use a constant.
[19:15:41] <rudi_s> Well, check + panic is what I do. Why do you need to be "*absolutely* sure that no one accidentally passes the incorrect state string"?
[19:15:58] <rudi_s> It's not like this is only way somebody could misuse your API I guess. Just handle it like any other error.
[19:16:31] <Anderson-D> It's because I'm using gorm and I need to be sure that certain model fields contain one of the allowed values
[19:17:00] <Anderson-D> I could use SQL enums for validation, but they're too rigid in terms of migrations
[19:17:08] <rudi_s> Oh, an ORM, right.
[19:17:10] <lazyreader> hmm, is it possible to implement an interface with private methods?
[19:17:35] <rudi_s> Well, I'd just check for valid types and be done with it.
[19:17:43] <rudi_s> lazyreader: Only from the same package.
[19:17:52] <rudi_s> *AFAIK
[19:18:06] <lazyreader> struct embedding would let you, iirc
[19:18:19] <rudi_s> Uh, right.
[19:18:25] <Anderson-D> rudi_s: checking is a problem too, since in my example I had the `func ChangeState`, however in the actual code devs will be instancing structs directly, thus no place to keep the validation in
[19:18:26] <rudi_s> Nice idea.
[19:19:10] *** Quits: gggp (~textual@60.10.23.171) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:19:37] <lazyreader> this is why ORMs are a pain
[19:20:16] <rudi_s> Among other things ...
[19:21:03] <lazyreader> https://gorm.io/docs/hooks.html GORM hooks would be a place to stick your validator Anderson-D
[19:21:06] <rudi_s> But I guess embedding only works for structs, so not when it's a basic type like string here.
[19:21:07] <Sam> Literally every place I've ever worked that has used an ORM has said "well, it's normally great, we just use it wrong that's why we end up with so many bugs, slow queries, etc." which has always led me to believe that they're just a bad idea for anything that's not trivial and that since trivial things won't necessarily always remain so no matter how much you think they will, that they should just never be us
[19:21:07] <Sam> ed. YMMV of course, but that's always been my experience.
[19:21:43] <Tv_> ORM is a great way to make a trivial thing non-trivial, too...
[19:21:51] <Sam> heh, indeed.
[19:21:59] <rudi_s> Yeah, mine too. They make the obvious cases convenient (which is nice) but anything non-trivial is either very complicated or not possible.
[19:22:05] <Anderson-D> lazyreader: ohh, thank you so much. I totally missed it. I've googled all over the place for "gorm validation" and totally missed this page.
[19:22:08] <huf> there are lots of technologies that make the first hour of a new project easier
[19:22:14] <huf> and then dont help at all later
[19:22:33] <huf> bit weird, when you only spend one hour in the first hour of a project, and a lot more hours in the not-first-hour :)
[19:22:42] <Sam> And "don't help later" is a best case scenario, "actively hurt later" is often a thing too.
[19:22:44] <lazyreader> yeah they should make that clearer, I googled "gorm validation" to start too, but ended up just paging through the docs to find that
[19:22:46] <huf> yeh
[19:23:00] <Sam> Anyways, rant about ORMs over. Please consider not using them.</opinions>
[19:23:05] <lazyreader> thinking "they must provide this functionality _somehow_..."
[19:23:49] <Anderson-D> huf: this was my exact experience with Django. From "wow, so simple" to "why the hell is this ticket still open after 8 years, I need it merged so that It can fix my edge-case"
[19:24:30] <huf> Anderson-D: it gets even more general. the language "feature" of not having variable declarations is also in this bag
[19:25:07] <Anderson-D> Anyways, my current project is CRUD with few joins, so I figured out gorm would do just fine. Now that lazyreader helped me out with my weak google-fu, I can finally proceed
[19:25:56] <siXy> Anderson-D: If that's your usecase, I'm not sure how much value you're getting out of that orm.
[19:27:04] <Anderson-D> siXy: Mostly keeping myself away from SQL as much as possible :D
[19:27:22] <huf> embrace sql
[19:27:42] <sztanpet> as if you wont have to learn sql with orms
[19:27:48] <huf> the only problem with it *really* is that without a query builder, it's a language in a string inside another language and so indenting becomes a nightmare :D
[19:28:02] <huf> just get a query builder
[19:28:22] *** Quits: gggpkm (~gggpkm@60.10.23.171) (Ping timeout: 246 seconds)
[19:28:33] <Tv_> that's why i tend to put any significant sql into a separate file
[19:28:39] <Tv_> sqlc makes that friendly
[19:29:04] <Tv_> defines functions for queries, structs for result rows
[19:29:28] <Anderson-D> I mean, I don't fear SQL, I just feel like using raw SQL for CRUD would bring too much boilerplate code comparing to some ORM
[19:29:48] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:30:12] *** Joins: kulak (~kulak@user/kulak)
[19:33:24] <Tv_> i'd hate to cram https://github.com/tv42/securityblanket/blob/master/internal/rtl433sql/insert_rtl433_raw.sql or https://github.com/tv42/securityblanket/blob/master/internal/honeywell5800/hw58receive/insert_honeywell5800_update.sql or https://github.com/tv42/securityblanket/blob/master/internal/honeywell5800/hw58trip/fetch_honeywell5800_loops.sql through an ORM...
[19:33:27] <Tv_> but then again i can't think of a single time in my life where i would have really written a CRUD app
[19:33:37] <Tv_> i've never seen an app remain CRUD...
[19:34:05] <huf> i've started with a basic crud. as i said, the first hour or so :)
[19:34:24] <huf> then you start adding the actual requirements and now you're just fighting the ORM
[19:34:41] *** Quits: kdsch (~kdsch@89.45.224.92) (Quit: WeeChat 2.8)
[19:36:30] *** Quits: crowbar (~crowbar@user/crowbar) (Remote host closed the connection)
[19:37:26] *** Quits: Garb00 (~Garb0@user/garb0) (Quit: Garb00)
[19:39:29] *** Joins: crowbar (~crowbar@user/crowbar)
[19:39:36] *** Quits: crowbar (~crowbar@user/crowbar) (Remote host closed the connection)
[19:39:51] *** Joins: crowbar (~crowbar@user/crowbar)
[19:43:24] *** Quits: crowbar (~crowbar@user/crowbar) (Remote host closed the connection)
[19:44:09] *** Joins: crowbar (~crowbar@user/crowbar)
[19:46:07] *** Quits: xavie (~xavie@176-139-252-198.abo.bbox.fr) (Remote host closed the connection)
[19:46:09] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:52:09] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[19:52:11] *** Joins: kulak (~kulak@user/kulak)
[19:52:28] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:54:35] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:55:39] *** Joins: kulak (~kulak@user/kulak)
[19:59:08] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[20:00:20] *** Joins: kulak (~kulak@user/kulak)
[20:02:46] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[20:07:06] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:07:25] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[20:18:17] *** Joins: fef (~thedawn@user/thedawn)
[20:19:21] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[20:20:45] *** Quits: eduardas (~eduardas@82-135-139-249.static.zebra.lt) (Quit: Konversation terminated!)
[20:23:26] *** Joins: LiftLeft (~LiftLeft@154.21.114.30)
[20:27:09] *** Joins: pepee (~user@user/pepee)
[20:28:35] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[20:28:47] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Remote host closed the connection)
[20:34:41] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[20:44:35] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[20:44:38] <Eddward_> Is there some place that documents when and where the go compiler scribbles in the user's home directory?
[20:45:04] *** Joins: b0rf (~shaun@121-44-16-32.tpgi.com.au)
[20:45:06] <bodhi> if I have my config in go:embed how do I read it in viper?
[20:45:28] <bodhi>  err = v.ReadConfig(bytes.NewBuffer(configBytes)) << this kind did not work for me :(
[20:46:23] *** Eddward_ is now known as Eddward
[20:48:12] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Remote host closed the connection)
[20:48:53] *** Joins: dmathieu (~textual@78.203.212.55)
[20:51:43] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1000) (Ping timeout: 256 seconds)
[20:52:58] *** Quits: mkopriva (~mkopriva@ip-94-113-146-145.net.upcbroadband.cz) (Quit: Leaving...)
[20:53:47] <seebs> bodhi: be more specific about "did not work". can you make a self-contained reproducer or something for it, so people can look at it? do you get an error or does it not do what you want without erroring?
[20:53:48] <Eddward> Looks like my answer might be `go env | grep "$HOME"`
[21:05:00] <Tv_> Eddward: that's not "documenting". https://golang.org/cmd/go/#hdr-Environment_variables
[21:08:49] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:09:04] <Eddward> Tv-: I just wasn't having any luck googling for things like "where does golang write in the home directory".  I didn't want to create a docker image and run diffs.
[21:09:06] *** Joins: virtualroot (~virtualro@user/virtualroot)
[21:09:14] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:09:49] <Tv_> for reading documentation, i recommend the documentation...
[21:10:14] *** Quits: sysh (~sysh@212.237.182.120) (Remote host closed the connection)
[21:10:51] *** Joins: oxum (~oxum@136.185.148.86)
[21:11:53] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[21:12:59] <seebs> eddward: A good question and I don't know the answer, it's not really documented very well. The go tooling documentation is sometimes a bit light on details.
[21:13:07] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:13:08] <seebs> Note that the `go` tool is not the compiler.
[21:13:23] <Tv_> it's improved a bunch but it's not well linked to
[21:13:53] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[21:13:59] <Tv_> e.g. the above link telling you to run `go help`, but that's on the web too these days
[21:15:29] <seebs> I realize now I'm not sure where go puts its build cache, etc
[21:15:45] <Tv_> seebs: https://golang.org/cmd/go/#hdr-Environment_variables ;)
[21:15:51] <ikke> Trying to replace boltdb with bbolt: https://tpaste.us/Qrol, but when I run go mod tidy, the go.sum file still refers to boltb, not bbolt. How do I fix that?
[21:15:57] <ash_worksi> is there a word for "multiple return values"... like variadic?
[21:16:16] <seebs> i don't know of a specific word for it, no
[21:16:17] <Tv_> fwiw i've moved all of my go litter to ~/.cache/go*, except for sumdb stuff that cannot be moved easily
[21:16:25] <Tv_> ash_worksi: definitely not variadic
[21:16:34] <ash_worksi> thanks seebs, Tv_
[21:16:46] <Tv_> ash_worksi: we just say "returns multiple values"
[21:16:46] <Eddward> Tv_:  I get what you are saying, but I wasn't looking for environment variables.  I was looking for directories.
[21:16:55] <ash_worksi> I see
[21:17:02] <seebs> the environment variables, in some cases, document directories
[21:17:10] <Tv_> Eddward: the env vars (/equivalent config) decide the directories
[21:17:14] <seebs> GOMODCACHE
[21:17:14] <seebs> 	The directory where the go command will store downloaded modules.
[21:17:28] <seebs> so if go downloads modules, they go there. which need not be in your home directory, but could be
[21:17:32] <Tv_> ikke: sounds like you haven't changed all the imports yet
[21:17:43] <Tv_> ikke: you probably don't want that replace
[21:18:13] <ikke> isn't replace meant for that?
[21:18:36] <ikke> note that I don't maintain the project, I just try to fix it to build on riscv64
[21:18:48] <ikke> boltdb has not support for it, but bbolt does
[21:19:34] <Tv_> ikke: it's not a fork of the same project
[21:19:57] <Eddward> Tv_: I get that now.  Thanks.
[21:20:02] <Tv_> (not really, not anymore; it's something independent)
[21:20:30] <Tv_> ikke: and more importantly, you confused yourself with complexity, so simplify
[21:21:49] <ikke> I'm rather confused by that remark :)
[21:22:05] *** Quits: oxum (~oxum@136.185.148.86) (Remote host closed the connection)
[21:22:51] <ikke> But I understand that the module name needs to remain the same
[21:22:56] *** Joins: oxum (~oxum@136.185.148.86)
[21:23:00] <ikke> for replace, I mean
[21:23:02] <Tv_> "i'm abusing go mod replace and i don't understand the behavior" -> well, don't. you're switching an app from using one library to another, so do *that*
[21:23:30] <ikke> That sounds from going from simple to more complex :)
[21:24:00] <ikke> but that's not worth the effort
[21:24:02] <Tv_> in one scenario, you're pretending A is B and have a rewrite mechanism, in the other none of those things exist
[21:25:05] <ikke> You could've just said that replace does not work like that
[21:25:25] <Tv_> ikke: there's not enough data to know what "that" is, here
[21:26:05] <Tv_> plus, i'd rather not commit to explaining a complex system with a single statement that might be wrong, when the actual trouble comes  from attempting to use the complex system for something it's not really meant for
[21:26:09] <ikke> replace one module with another module that is API compattible (and technically a fork from the project)
[21:26:28] <Tv_> i doubt bbolt has stayed 100% api compatible
[21:26:34] <Tv_> it has had *so much* churn after the fork
[21:26:53] <ikke> the readme at least claims that
[21:26:59] <ikke> but readmes can lie
[21:27:08] <ikke> But I just wanted to test the possiblity
[21:28:26] <ikke> "the goal is improved reliability and stability. bbolt includes bug fixes, performance enhancements, and features not found in Bolt while preserving backwards compatibility with the Bolt API."
[21:29:16] <Tv_> string substituting all the import paths is a one-liner...
[21:29:36] <Tv_> bbolt also includes half a dozen weirdly constructed kitchen sinks
[21:29:58] <Tv_> i looked at the development and felt whatever bug fixes they claimed weren't worth the herp derp programming :-(
[21:30:40] <ikke> ah ok
[21:30:40] *** Quits: virtualroot (~virtualro@user/virtualroot) ()
[21:30:41] <Tv_> also, the author of boltdb was so badly burned by crap contributions that his new project won't take outside code at all
[21:31:08] <ikke> sad to hear
[21:32:23] <b0rf> Lol wtf
[21:32:49] <b0rf> Some indian chump in Python sends half-assed code with half-assed question
[21:32:55] <b0rf> I tell him to clarify his code and question
[21:33:09] <b0rf> And the rest of the community bitches about it and says I'm being "insulting"
[21:33:23] <b0rf> When the guy is literally just like... relying on other people to clarify what he's even trying to ask
[21:33:43] <ikke> sadly language / culture barrier is a thing
[21:33:53] <b0rf> IT was more than that
[21:34:08] <b0rf> Like the guys were pandering to the guys language / culture barrier so much that he was just like
[21:34:33] <b0rf> Like he was so far in the backseat you couldn't even figure out what the fuck he was trying to ask
[21:34:47] <b0rf> Because they were pandering so much
[21:35:13] *** Joins: edrocks (~Ed@user/edrocks)
[21:35:46] <b0rf> Like I"m all about teaching people but I"m not going to sit there and bullshit when the guy sends something half-cooked and expects me to just deal with the stew he's presented
[21:36:03] <b0rf> That bothers me
[21:36:29] <Tv_> bwahahah https://github.com/etcd-io/bbolt/commit/f9d3ff664842d4d0f7d73f29c64433a415575c34
[21:36:59] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[21:37:11] <b0rf> ^ XD
[21:37:46] <ikke> for the uninitiated, what's the funny part?
[21:38:08] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[21:38:11] <Tv_> that commit is a good example of why i have absolutely 0 faith in the bbolt project
[21:38:32] <Tv_> "we tried to fix a thing, broke things more, and now this time we tried all kinds of things and are really hoping it works"
[21:38:53] <ikke> right
[21:39:01] <Tv_> there's like literally no hint of understanding in the commit, the change, or the resulting code
[21:39:08] <Tv_> just blind stabbing in the dark and hoping for the best
[21:40:33] <ikke> I got that feeling when reading the commit message, but was not sure
[21:40:35] <ventic> always a good sign when even the commit author has no confidence in the commit
[21:40:59] <ikke> "combines several attemptys"
[21:41:24] <Tv_> aka "we made such a mess we don't even know what this change does anymore"
[21:42:00] *** Joins: __bluebell__ (~le@2a02-a44f-584a-1-aa6d-835-d676-62ee.fixed6.kpn.net)
[21:42:56] <Tv_> if you want more like that, browser the earlier commits of the go grpc repo... it's a shitshow of git commit -am fix
[21:43:17] <Tv_> also why i have very little faith in the go implementation of grpc
[21:43:18] *** Quits: marlinc (~marlinc@user/marlinc) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[21:43:26] <Tv_> (meanwhile, the cult intensifies)
[21:43:41] *** Joins: marlinc (~marlinc@user/marlinc)
[21:45:17] *** Quits: absc (~absc@dynamic-adsl-94-34-168-145.clienti.tiscali.it) (Quit: Leaving.)
[21:47:19] *** Quits: __bluebell__ (~le@2a02-a44f-584a-1-aa6d-835-d676-62ee.fixed6.kpn.net) (Ping timeout: 246 seconds)
[21:48:48] *** Joins: __bluebell__ (~le@194.110.115.45)
[21:50:43] *** Quits: acohn (acohn@user/alexcohn) (Quit: TTFN)
[21:51:04] *** Joins: acohn (acohn@user/alexcohn)
[21:51:10] *** Quits: acohn (acohn@user/alexcohn) (Remote host closed the connection)
[21:51:30] *** Joins: acohn (acohn@user/alexcohn)
[21:52:58] <ikke> Tv_: another approach could be downloading boltdb, include riscv64 support, and use replace to use the local version, right?
[21:53:09] <Tv_> yup
[21:53:40] <Tv_> for longer-term use, you'd have to host that boltdb fork somewhere
[21:54:35] <ikke> might be worth it, as there are more projects using boltdb
[21:54:37] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 256 seconds)
[21:56:13] <Tv_> it's worth noting that boltdb *is* neglected and probably does unsafe wrong, too
[21:56:24] <Tv_> the bbolt people did have good motives
[21:56:29] <Tv_> just subpar execution
[21:56:42] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[21:57:01] <ikke> Yup, but the fact is that some projects are still using it
[21:57:02] <Tv_> the original boltdb source is pretty darn beautiful
[21:57:48] *** Joins: kulak (~kulak@user/kulak)
[21:59:36] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:00:01] *** Joins: kulak (~kulak@user/kulak)
[22:02:26] *** Quits: acohn (acohn@user/alexcohn) (Quit: TTFN)
[22:03:51] *** Joins: acohn (~acohn@user/alexcohn)
[22:07:19] <seebs> boltdb does have some subtle unsafe errors which are fixed in the etcd branch of it, i believe
[22:07:43] <Tv_> if they had just done that, that'd have been great
[22:07:56] <seebs> i dunno, some of it's quite pretty but it has some bits that i am not totally sold on the safety/sanity of. :)
[22:07:59] <Tv_> instead, what happened was a churn of poor quality commits changing all kinds of things
[22:08:31] <Tv_> and yeah i'm completely willing to believe there's bad unsafe in boltdb, for sure; but the fixes should have been much more simple & localized
[22:08:40] <seebs> oh, the actual fixes are
[22:08:51] <seebs> i think all of them are just "explicitly specify a correct cap on a reslice"
[22:09:06] <Tv_> read the linked commit tho
[22:09:09] <Tv_> and the one it refers to
[22:09:42] <seebs> oh, hmm. okay, there was more of that than i remembered.
[22:09:49] <ikke> the first fix just introduced more issues
[22:09:56] <seebs> and yeah, the explicit creation of a sliceheader is definitely wrong.
[22:10:41] <seebs> the biggest issue i have with boltdb is that a single write can't create more than a smallish number of entries before it starts being incredibly slow, because it's quadratic, because it doesn't rebalance until a commit.
[22:11:00] <seebs> i found this out by coming up with a thing that took something like 13 minutes to run and spent 99.99% of that time inside copy()
[22:11:10] *** Quits: marlinc (~marlinc@user/marlinc) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[22:12:59] *** Joins: marlinc (~marlinc@user/marlinc)
[22:21:55] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 268 seconds)
[22:22:43] <Tv_> seebs: yeah if you're across pages you dirty 1 page per key
[22:23:08] <Tv_> there's an open issue by me..
[22:23:09] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[22:23:23] <bodhi> seebs: does the playground support embed.FS?
[22:23:28] <Tv_> seebs: https://github.com/boltdb/bolt/issues/360
[22:23:51] *** Quits: marlinc (~marlinc@user/marlinc) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[22:23:51] <bodhi> seebs: I am trying create what is not working for me.
[22:23:56] <Tv_> fwiw i'd happily take a contract to write boltdb-ng with that feature
[22:24:28] <Tv_> seebs: the fractal b-tree stuff is basically best of LSM and CoW-Btree combined
[22:24:40] *** Joins: marlinc (~marlinc@user/marlinc)
[22:26:12] <Tv_> seebs: you are talking about something slightly different, but what i'm trying to say is boltdb can't cope with lots of small writes well, by design
[22:26:59] *** Quits: oxum (~oxum@136.185.148.86) (Remote host closed the connection)
[22:31:00] *** Joins: oliv3 (~olivier@2001:bc8:6005:129:208:a2ff:fe0c:46bc)
[22:34:42] *** Joins: oxum (~oxum@136.185.148.86)
[22:40:36] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 272 seconds)
[22:52:09] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Ping timeout: 268 seconds)
[22:53:27] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[22:53:35] *** Quits: dmathieu (~textual@78.203.212.55) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:01:28] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[23:04:40] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 272 seconds)
[23:05:08] *** Joins: mrig (~mrig@user/mrig)
[23:06:11] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[23:06:17] <pgloor> any idea how to convert a .j2k image file (JPEG 2000) image to .jpg (or .png) using Go?
[23:07:01] <Tv_> pgloor: i don't think a jpeg2000 decoder in go exists...
[23:07:15] * pgloor nods
[23:07:45] <Tv_> https://github.com/AlanRace/go-bio/blob/master/jpeg2000/jpeg.go is something but has no license or track record
[23:08:06] <foobaz> how about https://github.com/ezdiy/image
[23:08:52] <foobaz> or https://github.com/uoregon-libraries/rais-image-server
[23:09:12] <Tv_> ezdiy seems to have a binary windows library in the repo, avoid like hell
[23:09:56] <Tv_> the other one at least contains source: https://github.com/uoregon-libraries/rais-image-server/tree/develop/src/openjpeg
[23:10:31] <pgloor> I've seen ezdiy/image but was not aware of uoregon-librarie
[23:10:40] <pgloor> ty, I'll take a look at it
[23:11:16] <foobaz> another option is to script the imagemagick command line tool but i'm guessing that's not what you're asking for
[23:11:50] <foobaz> or you could use cgo to use a C library to read jpeg2000, like jasper or openjpeg
[23:12:24] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Quit: leaving)
[23:12:29] <Tv_> it's kinda business-as-usual-horrible how much jpeg2000 is used
[23:13:04] <pgloor> I've been looking into the C-library. I already used the code to understand the format.
[23:15:00] <foobaz> i've had good results using jp2k for iOS apps, where apple always supported the format natively
[23:15:17] <foobaz> much better quality and lower filesize than jpg
[23:15:39] <foobaz> but since then apple has added avif, which would be a better option for those use cases
[23:18:08] <pgloor> yes, it's an app from a mac developer that created the j2k files. Safari seems to be the only browser that supports it.
[23:19:38] <foobaz> is it possible to change that app to generate files in a different format?
[23:21:57] <pgloor> probably not, but I'm not sure. I'll dicuss this.
[23:22:06] <pgloor> *discuss
[23:27:23] *** Joins: prout (~prout@user/prout)
[23:27:25] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Ping timeout: 246 seconds)
[23:27:40] *** Quits: prout (~prout@user/prout) (Client Quit)
[23:29:03] <Tv_> pgloor: so this is a business... make sure people realize there's very likely submarine patents for jpeg2000, and it's an unnecessary business risk
[23:30:06] <foobaz> it's obviously legacy code, they've been using it for a long time without being sued
[23:30:23] <Tv_> that is absolutely the point of submarine patents
[23:30:53] <Tv_> the more business you do with using a likely target, the better for the patent troll
[23:31:31] <foobaz> if i were his boss, i would not take this as a real threat, i would assume he dislikes jp2k for technical reasons, and is making up some bullshit to try and avoid working with it
[23:31:59] <Tv_> sure, enjoy. https://en.wikipedia.org/wiki/JPEG_2000#Legal_status
[23:32:33] <pgloor> it's not a commercial project, but good you mention this. for windows they used commercially licensed KDU libraries
[23:33:02] <pgloor> on the Mac I dont know
[23:33:39] <foobaz> they probably used the library in mac os
[23:39:26] *** Joins: snayni (~a0ee4a50@ircip2.mibbit.com)
[23:39:42] *** Parts: snayni (~a0ee4a50@ircip2.mibbit.com) ()
[23:44:14] *** Quits: printf (~printf@user/printf) (Quit: The Lounge - https://thelounge.chat)
[23:49:03] *** Joins: arinov_ (~arinov@95.70.154.214)
[23:55:21] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
