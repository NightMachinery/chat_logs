[00:00:01] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[00:09:13] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[00:09:14] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[00:16:02] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[00:17:28] *** Joins: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918)
[00:17:28] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[00:17:30] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[00:17:30] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[00:17:32] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[00:17:34] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[00:17:35] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[00:17:41] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[00:22:37] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:f0a3:27a5:287e:6992)
[00:36:44] *** weechat is now known as Spawns_Carpeting
[00:41:09] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:f0a3:27a5:287e:6992) (Ping timeout: 250 seconds)
[00:42:37] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (Ping timeout: 256 seconds)
[00:45:09] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[00:46:01] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[00:47:38] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[00:49:22] *** Joins: cjb (~cjb@user/cjb)
[00:54:57] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:451d:2d75:5163:2d2b)
[00:56:55] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[00:57:22] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[01:01:06] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[01:01:32] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[01:04:51] *** Parts: tatsumaru (~tatsumaru@82.147.131.155) ()
[01:05:22] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Read error: Connection reset by peer)
[01:05:23] *** Quits: nazarii[m] (~nazariim]@2001:470:69fc:105::63a) (Read error: Connection reset by peer)
[01:05:23] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Write error: Connection reset by peer)
[01:05:23] *** Quits: DeeEff_ (~deeeff@user/deeeff) (Read error: Connection reset by peer)
[01:05:23] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Write error: Connection reset by peer)
[01:05:24] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Write error: Connection reset by peer)
[01:05:24] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Read error: Connection reset by peer)
[01:05:24] *** Quits: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918) (Write error: Connection reset by peer)
[01:05:24] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Write error: Connection reset by peer)
[01:05:24] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Read error: Connection reset by peer)
[01:07:39] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:451d:2d75:5163:2d2b) (Ping timeout: 256 seconds)
[01:07:49] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[01:19:48] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:d49c:84bf:fe9f:29d9)
[01:21:41] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a4ba:6060:3755:9749)
[01:21:41] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a4ba:6060:3755:9749) (Changing host)
[01:21:41] *** Joins: skapata (~Skapata@user/skapata)
[01:38:34] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[01:38:34] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[01:38:34] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[01:38:34] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[01:38:34] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[01:38:34] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[01:38:34] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[01:38:34] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[01:39:24] *** Joins: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918)
[01:47:04] *** Quits: pinoaffe (~pinoaffep@2a01:4f9:c010:3f2a:1:1:3:10) (Quit: Bridge terminating on SIGTERM)
[01:53:05] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[02:00:32] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[02:02:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[02:03:18] *** Joins: sheb_ (~sheb@31.223.228.71)
[02:03:19] *** Quits: daviid (~user@179.210.52.91) (Read error: Connection reset by peer)
[02:04:08] *** Joins: aeth (~aeth@user/aeth)
[02:04:41] *** Joins: daviid (~user@179.210.52.91)
[02:05:27] *** Quits: sheb (~sheb@31.223.228.71) (Ping timeout: 256 seconds)
[02:21:19] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:d49c:84bf:fe9f:29d9) (Ping timeout: 256 seconds)
[02:31:24] *** Joins: pinoaffe (~pinoaffep@2a01:4f9:c010:3f2a:1:1:3:10)
[02:31:43] *** Quits: daviid (~user@179.210.52.91) (Remote host closed the connection)
[02:33:19] *** Joins: daviid (~user@179.210.52.91)
[02:41:34] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[02:46:20] *** Joins: skapata (~Skapata@user/skapata)
[02:47:29] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:02:06] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 260 seconds)
[03:12:34] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:19:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:32:49] *** Joins: badkins (~badkins@136.56.92.199)
[03:34:57] <seninha> does sfri 1 has fold-left?
[03:36:41] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:37:00] <Zipheir> seninha: It's called `fold`.
[03:37:09] <Zipheir> Confusingly, it's foldl in R6RS.
[03:38:30] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[03:41:01] <seninha> I tried fold, but it does not work like my fold-left
[03:41:02] <seninha> https://0x0.st/oXMk.txt
[03:41:05] <Zipheir> I prefer the R6RS foldr/foldl names, but SRFI 1 is better-known.  It's especially odd that Olin chose the *left* fold to get the generic name, since fold-right expresses the fundamental list recursion pattern.
[03:41:41] <Zipheir> seninha: Switch the arguments to `op`.
[03:42:18] <Zipheir> SRFI 1 fold uses (op element accumulated-value), just like fold-right.  Another confusing detail.
[03:46:19] <seninha> damn, that's confusing
[03:46:26] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[03:46:28] <seninha> thanks, Zipheir!
[03:46:31] <seninha> now it works!
[03:48:44] <Zipheir> Great!
[03:50:02] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[03:51:39] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:59:14] *** Joins: skapata (~Skapata@user/skapata)
[04:02:01] *** Joins: badkins (~badkins@136.56.92.199)
[04:07:58] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:08:07] *** Joins: badkins_ (~badkins@136.56.92.199)
[04:19:20] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[04:21:26] *** Joins: cjb (~cjb@user/cjb)
[04:22:21] *** Quits: schulze (~schulze@dynamic-095-112-232-091.95.112.pool.telefonica.de) (Ping timeout: 250 seconds)
[04:25:18] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:25:57] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Remote host closed the connection)
[04:27:10] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[04:39:13] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[04:40:40] *** Joins: X-Scale (~ARM@46.50.3.45)
[04:40:57] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[04:41:39] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[04:46:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[04:48:20] *** Joins: klovett_ (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[04:50:01] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[04:50:17] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[04:55:12] *** Quits: badkins_ (~badkins@136.56.92.199) (Remote host closed the connection)
[05:01:22] *** Quits: klovett_ (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzz…)
[05:08:50] *** Joins: badkins (~badkins@136.56.92.199)
[05:12:14] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[05:13:18] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[05:20:36] *** Quits: daviid (~user@179.210.52.91) (Remote host closed the connection)
[05:20:45] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:21:08] <seninha> And it's alive! https://github.com/phillbush/automata.scm
[05:21:20] <seninha> My (non)deterministic finite automata simulator
[05:21:42] <seninha> This SRFI 1 has a very weird interface on some procedures.
[05:22:03] *** Joins: daviid (~user@179.210.52.91)
[05:25:10] *** Quits: daviid (~user@179.210.52.91) (Remote host closed the connection)
[05:26:25] *** Joins: logand`` (~user@dynamic-089-012-091-073.89.12.pool.telefonica.de)
[05:27:57] *** Quits: logand` (~user@dynamic-089-012-107-168.89.12.pool.telefonica.de) (Ping timeout: 240 seconds)
[05:29:37] *** Joins: cjb (~cjb@user/cjb)
[05:32:06] <ns12> seninha: What is a "public license"?
[05:35:19] <seninha> it should be public domain
[05:35:23] <seninha> d'oh
[05:36:27] *** Joins: daviid (~user@179.210.52.91)
[05:40:05] <seninha> fixed
[05:42:59] *** Joins: frost (~frost@user/frost)
[05:43:03] *** Quits: daviid (~user@179.210.52.91) (Remote host closed the connection)
[05:44:13] *** Joins: daviid (~user@179.210.52.91)
[05:48:25] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:53:03] *** Joins: badkins (~badkins@136.56.92.199)
[05:53:29] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 256 seconds)
[05:56:23] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 250 seconds)
[05:57:21] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:57:41] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[05:58:23] <aeth> in general, use CC0 instead of public domain because it works in more countries
[05:58:27] <aeth> iirc
[06:00:22] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[06:04:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:05:59] <lagash> obligatory IANAL?
[06:18:05] *** Quits: daviid (~user@179.210.52.91) (Remote host closed the connection)
[06:20:59] *** Joins: daviid (~user@179.210.52.91)
[06:28:15] <Zipheir> Yeah, using CC0 makes sense to me for PD dedications.
[06:43:46] <edgar-rft> true, Criminal Code Offenses work in most countries
[06:51:23] <ns12> lagash: What if aeth replies with "IAACL" ("I am a copyright lawyer")? 😆
[06:55:35] *** Joins: badkins (~badkins@136.56.92.199)
[06:57:31] *** Joins: sonny (~user@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[06:58:16] *** Quits: dbohdan (~dbohdan@user/dbohdan) (Read error: Connection reset by peer)
[06:59:14] *** Joins: dbohdan (~dbohdan@user/dbohdan)
[06:59:54] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[07:04:57] *** Quits: daviid (~user@179.210.52.91) (Remote host closed the connection)
[07:06:23] *** Joins: daviid (~user@179.210.52.91)
[07:07:44] *** Joins: badkins (~badkins@136.56.92.199)
[07:09:02] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[07:09:45] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[07:11:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[07:12:15] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:27] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:16:49] *** Quits: daviid (~user@179.210.52.91) (Remote host closed the connection)
[07:17:49] *** Quits: ecraven (~ecraven@user/nex) (Ping timeout: 240 seconds)
[07:19:00] *** Joins: ecraven (ecraven@user/nex)
[07:19:34] *** Joins: daviid (~user@179.210.52.91)
[07:29:37] *** Quits: daviid (~user@179.210.52.91) (Remote host closed the connection)
[07:30:33] *** Joins: daviid (~user@179.210.52.91)
[07:34:20] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:34:21] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[07:37:49] *** Quits: daviid (~user@179.210.52.91) (Remote host closed the connection)
[07:41:42] *** Joins: daviid (~user@179.210.52.91)
[07:43:40] *** Joins: frost (~frost@user/frost)
[07:46:55] *** Quits: daviid (~user@179.210.52.91) (Remote host closed the connection)
[07:52:34] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:03:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:04:07] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[08:12:07] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[08:21:19] *** Joins: Darkcoal (~user@user/Darkcoal)
[08:27:33] *** Joins: daviid (~user@179.210.52.91)
[08:28:17] *** Quits: yosik (~user@user/yosik) (Ping timeout: 240 seconds)
[08:36:15] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:39:32] <aeth> ns12: Way back in the day, I actually was pre-law at first (technically just a part of political science at the university I went to), but it wasn't for me so I switched. Too much "here is this court decision, now live with it."
[08:39:50] <aeth> Apparently the only remnant I have from those days is "pays attention to software licenses" :-p
[08:52:39] <aeth> I'd much rather read how to build arbitrary things out of lambdas.
[09:08:38] *** Joins: badkins (~badkins@136.56.92.199)
[09:13:11] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[09:14:09] *** Joins: masoudd (~masoudd@user/masoudd)
[09:23:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:27:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:32:12] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[09:40:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:58:30] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[10:07:00] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:07:52] *** Parts: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (dave's not here)
[10:22:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:07:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[11:09:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:09:32] *** Joins: badkins (~badkins@136.56.92.199)
[11:10:44] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:13:22] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2) (Remote host closed the connection)
[11:13:47] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:78c8:bb9f:f5b1:85aa)
[11:13:50] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[11:14:59] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[11:20:33] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:9d0:7ba2:e6ec:1454)
[11:25:58] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:27:08] *** Joins: badkins (~badkins@136.56.92.199)
[11:31:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[11:33:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[11:37:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[11:39:50] *** Joins: aeth (~aeth@user/aeth)
[11:59:47] *** Joins: lbue (~nvdeb@103.210.145.99)
[12:01:12] *** Parts: lbue (~nvdeb@103.210.145.99) ()
[12:14:14] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:a0e4:e5f3:3cee:1bea)
[12:18:24] *** Quits: flatwhatson (~flatwhats@220.253.110.95) (Ping timeout: 250 seconds)
[12:19:06] *** Joins: flatwhatson (~flatwhats@118-208-196-1.tpgi.com.au)
[12:21:03] *** Joins: civodul (~user@guix/contributor/civodul)
[12:23:28] *** Parts: sonny (~user@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (ERC (IRC client for Emacs 27.2))
[12:53:43] *** Joins: seninha (~seninha@user/seninha)
[13:12:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:14:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[13:22:41] *** Joins: notzmv (~zmv@user/notzmv)
[13:25:03] *** Joins: livoreno (~livoreno@user/notzmv)
[13:28:02] *** Joins: badkins (~badkins@136.56.92.199)
[13:32:30] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[13:38:59] *** Joins: thevishy (~Nishant@2405:201:f005:c007:e0f1:5635:e895:47c6)
[13:54:31] *** Quits: lockywolf_ (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[13:58:17] *** Joins: lockywolf_ (~lockywolf@public.lockywolf.net)
[14:05:42] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:31e4:e529:2850:2303)
[14:05:42] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:31e4:e529:2850:2303) (Changing host)
[14:05:42] *** Joins: skapata (~Skapata@user/skapata)
[15:04:02] *** Quits: daviid (~user@179.210.52.91) (Remote host closed the connection)
[15:06:36] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[15:09:22] *** Quits: sheb_ (~sheb@31.223.228.71) (Quit: Leaving)
[15:10:01] *** Joins: daviid (~user@179.210.52.91)
[15:12:11] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzz…)
[15:20:20] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[15:21:37] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:a0e4:e5f3:3cee:1bea) (Ping timeout: 240 seconds)
[15:29:02] *** Joins: badkins (~badkins@136.56.92.199)
[15:33:25] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[15:48:16] *** Quits: zwr (~zwr@2804:d45:b966:fb00:af27:6e8f:df74:3523) (Ping timeout: 245 seconds)
[15:49:18] *** Joins: zwr (~zwr@2804:d45:b966:fb00:be03:2bc0:ec84:6a34)
[15:59:49] *** Quits: daviid (~user@179.210.52.91) (Remote host closed the connection)
[16:03:51] *** Joins: daviid (~user@179.210.52.91)
[16:04:39] *** Joins: silasfox (~sbv@p200300cec71d940048da71ab771d9e03.dip0.t-ipconnect.de)
[16:04:55] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:9d0:7ba2:e6ec:1454) (Ping timeout: 256 seconds)
[16:06:25] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:15:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:24:04] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:39:06] <seninha> hi, I did some changes to my automata script. I think it's better now. Can you have a look at it? https://github.com/phillbush/automata.scm
[16:40:38] *** Quits: silasfox (~sbv@p200300cec71d940048da71ab771d9e03.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[16:50:19] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:98d7:36e8:8102:8561)
[16:50:57] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[16:56:02] *** Parts: phoe (~phoe@user/phoe) ()
[16:57:40] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[16:57:55] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[17:03:38] *** Joins: silasfox (~sbv@p200300cec71d940048da71ab771d9e03.dip0.t-ipconnect.de)
[17:17:03] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[17:18:06] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[17:24:25] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[17:26:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:29:53] *** Joins: badkins (~badkins@136.56.92.199)
[17:33:42] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[17:33:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[17:56:32] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:9e24:8e32:1420:729f)
[18:05:15] *** Joins: badkins (~badkins@136.56.92.199)
[18:06:54] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[18:07:25] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[18:08:45] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:09:49] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[18:15:09] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[18:17:31] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:18:18] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[18:23:18] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[18:24:19] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[18:31:17] *** Quits: Rue (~rue@2001-b011-1000-1a29-7937-e51c-8a8a-ea67.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[18:44:30] *** Quits: silasfox (~sbv@p200300cec71d940048da71ab771d9e03.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[18:46:20] *** Joins: silasfox (~sbv@p4fe8dc32.dip0.t-ipconnect.de)
[18:47:14] *** Joins: badkins (~badkins@136.56.92.199)
[18:49:26] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[18:51:26] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[18:54:38] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:55:02] *** Joins: badkins (~badkins@136.56.92.199)
[19:13:33] *** Quits: thevishy (~Nishant@2405:201:f005:c007:e0f1:5635:e895:47c6) (Quit: Leaving)
[19:43:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:59:25] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzz…)
[20:01:46] <badkins> Why does (min 2 3.0) return 2.0 instead of 2 ?
[20:02:29] <badkins> (min 1/2 1/3) returns 1/3, not a float
[20:03:16] *** Joins: Rue (~rue@2001-b011-1000-1a29-7937-e51c-8a8a-ea67.dynamic-ip6.hinet.net)
[20:06:07] <dpk> small says "If any argument is inexact, then the result will also be inexact (unless the procedure can prove that the inaccuracy is not large enough to affect the result, which is possible only in unusual implementations)."
[20:06:29] <dpk> which i admit i don't really understand 🤔
[20:07:11] <dpk> i guess it's a mathematical point about exactness vs inexactness in general
[20:07:30] <dpk> whereas i think of 'inexact' as meaning 'exact, but don't squint at it too hard'
[20:08:03] <sham1> I don't know if there are any other ways of doing inexact than floating point numbers
[20:08:13] <sham1> I mean, there are, but how many of them are actually used
[20:09:43] <dpk> (a Scheme inexact value does not explicitly include margins of error, after all)
[20:10:34] <sham1> "On the other hand, the results of measurements are inherently inexact, and irrational numbers may be approximated by rational and therefore inexact approximations."
[20:11:33] <sham1> A somewhat fluffy definition for the inexactness
[20:15:25] <sham1> Speaking of numbers, I wonder what R7-small means by "All algebraic operations except / produce exact values given exact inputs" in the Appendix B for the Standard Feature identifiers
[20:15:57] <sham1> Like do we just count +, -, *, exp here or what
[20:16:41] <sham1> Or maybe not exp since it seems to be a part of the inexact library
[20:19:25] <sham1> I suppose it's that, now that I'm thinking about it further. The stuff one gets in a four-function calculator
[20:33:23] <badkins> I can see why "If any argument is inexact, then the result will also be inexact" might be the case for arithmetic, but min should just return the unaltered minimum value IMO.
[20:34:11] <sham1> Yeah, that would make sense
[20:34:17] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:98d7:36e8:8102:8561) (Ping timeout: 252 seconds)
[20:40:09] <Oxyd> Scheme's approach to inexact number is somewhat iffy IMO. Like (integer? 2.0) being true. If an inexact number is supposed to represent an interval of possible values, then it makes little sense to say that that interval is an integer.
[20:45:01] <sham1> Yeah
[20:45:34] <sham1> Although I'm not sure if 2.0 needs to necessarily be an inexact
[20:45:38] <sham1> Could just be 2
[20:45:56] <sham1> But yeah, #e2.0 being an integer can be weird
[20:48:00] <Oxyd> 2.0 is an inexact numeric constant so it has to be inexact in R7RS.
[20:48:37] <sham1> Is it?
[20:49:07] <Oxyd> This also means you can do “fun” stuff like (gcd 8.0 6.0) and get 2.0.
[20:49:35] <sham1> Where is <decimal 10> production being inexact documented
[20:50:56] <Oxyd> 6.2.5: “If the written representation of a number has no exactness prefix, the constant is inexact if it contains a decimal point or an exponent.”
[20:51:03] <sham1> Ah
[20:54:22] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:54:44] <dpk> https://www.ccs.neu.edu/home/shivers/papers/scheme04/TR600.pdf#page=113
[20:55:36] <Franciman> dpk: are you workin on your finger tree impl?
[20:56:06] <dpk> no, today i should be learning Sanskrit but instead i nerded out on Aubrey Jaffer's daylight simulation
[20:56:14] <Franciman> yay
[20:56:19] <Franciman> good nerding
[20:56:31] <Franciman> i've been learning standard ML, i find its philosophy quite close to scheme's one
[20:56:40] <Franciman> up to lisp syntax and typing rules
[20:59:16] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 250 seconds)
[20:59:56] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[21:06:26] <Zipheir> Franciman: SML is really cool.  I wish there were more implementations.
[21:06:35] <Franciman> i'm trying and writing one :D
[21:06:49] <Zipheir> Aren't you writing a Scheme, too?
[21:06:53] <Franciman> yes :P
[21:07:03] <Franciman> hopefully they'll share the same backend
[21:07:21] <Zipheir> Aha.
[21:07:51] <Zipheir> That should also make a staticall-typed Scheme possible.
[21:07:54] <Zipheir> *statically
[21:13:34] <Zipheir> It's an interesting idea, building a dynamic and a static language on top of the same foundations.
[21:14:18] *** Joins: badkins (~badkins@136.56.92.199)
[21:14:21] <sham1> Clearly possible: see JVM for example
[21:14:23] <Zipheir> The most obvious approach is I guess dynamic-on-top-of-static, but maybe the other way makes sense, too (cf. Idris 2 and Chez)
[21:14:48] <Zipheir> Yeah.
[21:15:45] <Zipheir> dpk: Have you had any insights on how much lazy evaluation finger trees need?
[21:16:01] <dpk> no, i haven't looked further since Sunday
[21:16:02] <Zipheir> I'm working on delaying the "main trunk" only.
[21:16:33] <Zipheir> Delayed evaluation seems like such a neglected part of the language.
[21:16:34] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:16:35] *** Quits: nalaginrut (~nalaginru@183.11.130.58) (Ping timeout: 250 seconds)
[21:17:01] *** Joins: seninha (~seninha@user/seninha)
[21:17:02] <Zipheir> R6RS `force` says "the argument must be a promise", but R6 provides no way to identify promises...
[21:18:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[21:22:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:29:19] *** Joins: nalaginrut (~nalaginru@14.20.89.6)
[21:29:55] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[21:30:00] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:12] <aeth> I know I haven't done anything with it lately (I got sick in Nov, Dec, and Jan... and the most recent one had to have been omicron because it had the same symptoms of when I was sick in spring 2020... so exhausting to spend as many days sick as not for 3 months)
[21:30:13] <tatsumaru> hey guys, is it true that most schemers don't respect guile too much?
[21:30:21] <aeth> But I plan to statically type the core of Airship Scheme
[21:31:09] *** Joins: ns12 (~ns12@user/ns12)
[21:31:11] <Zipheir> It seems possible to me that lazy evaluation hasn't seen a lot of use in Scheme because the primitives are just "nuts and bolts"; outside of streams, there haven't been many easy-to-use libraries for lazy structures.
[21:31:56] <aeth> It definitely makes sense to do dynamic on top of static for Scheme. That is, define the core procedures with static typing and then just... let users use dynamic typing.
[21:32:03] <aeth> Are parts of Racket written in Typed Racket?
[21:32:07] <Zipheir> tatsumaru: I'm concerned that that question is mainly going to start a flame war.
[21:32:30] <Zipheir> tatsumaru: Do you have a specific technical question about the differences between Guile and other Scheme impls.?
[21:33:11] <Zipheir> aeth: I'm sorry to hear you've been out for so long.
[21:34:12] <tatsumaru> Zipheir: I am mostly interested in the historical aspect of why guile might have become unpopular
[21:34:15] <Zipheir> aeth: AFAIK Typed Racket is the "gradually-typed sister language", so I doubt it's used in the implementation of Racket itself.
[21:34:24] <tatsumaru> no intention of starting flame wars
[21:34:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:34:41] <aeth> my guess? Nov was probably the delta covid, which was very mild because of having had Covid in early 2020 and the vaccine later. Dec was who knows what. Flu? And Jan was definitely omicron, where the vaccine and past exposure wasn't as effective because I had pretty much the exact same symptoms as when I had probably-covid in May 2020
[21:34:42] <Zipheir> It's not obvious to me at all that Guile is unpopular.
[21:34:57] <aeth> Guile seems to be pretty popular. It's included on Linux distros.
[21:35:05] <aeth> Guile and Racket seem to be the most likely to be included on Linux distros.
[21:35:20] <Zipheir> Yes.
[21:35:25] <aeth> In that order. Packagers hate Racket, but they have to package it because it's popular
[21:35:34] <aeth> Fedora dragged out adding Racket for years
[21:35:46] <tatsumaru> what are your general thoughts on Guile if you don't mind sharing?
[21:35:57] <Zipheir> I think OpenBSD started packaging Racket last year, even.
[21:36:16] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:9e24:8e32:1420:729f) (Quit: Client closed)
[21:36:26] <Zipheir> tatsumaru: They're one of the few mostly-compliant R6RS Schemes out there.
[21:36:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:37:13] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[21:37:20] <aeth> Zipheir: If the sister language shares a runtime, you can implement pieces in whichever you choose
[21:37:31] <aeth> especially when the syntax is effectively the same
[21:38:02] *** Joins: badkins (~badkins@136.56.92.199)
[21:38:08] <aeth> ime the main barrier to multilingual is the syntax switching. Sure, you can learn 10-20 languages easily because they're mostly variations on the same concepts, but when you're writing two within an hour, you're going to mix up the syntax. e.g. 1f vs 1f0 to force single float
[21:39:21] <gwatt> When I've used guile, it's seemed decent. It's got some of the usual warts of an older scheme trying to support R6RS, like incompatible module and record systems.
[21:39:51] <gwatt> I think enough people like guile well enough to write gnu shepherd and guix in it
[21:40:06] <Zipheir> Yeah.  The built-in Guile and standard features don't play very nicely, and it looks like it's going to get worse.
[21:40:16] <aeth> Chibi is what I use when I want to get the 'true' R7RS experience, but it seems more like a demo than a full, robust Scheme like Guile/Racket/Chicken
[21:40:28] <aeth> Chibi's going for a sort of Lua, easy-to-embed-in-C minimalist approach afaik
[21:40:52] <aeth> Minimalism is good when you're embedding something you want to ship with a C or C++ application. Not so good when you want to be lazy and use as many libraries as possible.
[21:40:53] <gwatt> Biggest complaint abou guile: The library system doesn't error out when you claim to export an identifier but you don't define the identifier
[21:40:54] <Zipheir> They state that they're more interested in Racket and Clojure features for the future, so I guess that the standard Scheme features may become unused and bit-rotted.
[21:41:14] <Zipheir> Guile is also very, very hairy internally.
[21:41:24] <aeth> Guile even has a whole elisp, doesn't it?
[21:41:28] <Zipheir> (Well up to the usual GNU standards of hairiness!)
[21:41:46] <tatsumaru> is chicken also r6rs
[21:41:51] <aeth> kind of late to jump on the Clojure bandwagon
[21:41:53] <Zipheir> Very no.
[21:42:12] <Zipheir> CHICKEN is R5RS+, although it mostly supports R7RS-small.
[21:42:17] <aeth> https://trends.google.com/trends/explore?date=all&q=clojure
[21:42:33] <Zipheir> The biggest missing piece with the CHICKEN r7rs egg is a compliant syntax-rules.
[21:42:40] <aeth> Peak Clojure was probably 2014 when the search results flattened out.
[21:42:47] <Zipheir> Hah.
[21:42:50] <aeth> Seems to match peak running into Clojure on places like HN and IRC
[21:43:28] <Zipheir> The Prophet Hickey needs to announce a new revelation.
[21:44:32] <aeth> could just be a casualty of Java not being as popular now that Oracle has had a decade to try to maximize profit extraction from it.
[21:44:37] <aeth> well, Java outside of Android, anyway
[21:44:40] <tatsumaru> i think clojure is still great regardless of what people search
[21:45:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[21:45:38] <Zipheir> Clojure could have just been a library for Kawa, IMHO.
[21:46:56] <tatsumaru> aren't continuations a pain in the ass to implement on the JVM due to overhead?
[21:46:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:47:07] <Zipheir> I would like it more if Hickey interacted more with functional programming research instead of coming up with IMO half-baked designs which he immediately incorporates into the language.
[21:47:40] <Zipheir> Ahem, "transducers".
[21:48:13] <Zipheir> tatsumaru: I don't think so, but I'm not sure how Kawa does it, e.g.
[21:49:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:49:19] <Zipheir> It seems like some people have implemented delimited continuations for Clojure.
[21:50:06] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[21:50:20] <gwatt> If all you want is escape continuations, you can abuse the exception system. That's how scala implements the "return" keyword
[21:51:37] * ski . o O ( "`return' considered harmful" )
[21:53:07] <Zipheir> Except Haskell `return`.
[21:53:59] <ski> well, yea
[21:56:06] <tatsumaru> what is your go to scheme/lisp for writing task automation / prototypes etc?
[21:56:16] <Zipheir> CHICKEN for me.
[21:57:43] <Zipheir> But mainly for the library support.  A lot of stuff I run with CHICKEN could easily be ported to something else.
[22:00:02] *** Joins: seninha (~seninha@user/seninha)
[22:00:06] <tokie> i still need to attempt to implement continuations on my scheme
[22:00:16] <tokie> i'm working on char/string library procedures right now. those are fun
[22:00:34] <tokie> i was going to try to keep things r5 but it was actually harder to try not to support unicode than it was to just support unicode
[22:01:05] <seninha> Hello, how can I apply a list of arguments to a procedure that already has one argument?
[22:01:23] <Zipheir> seninha: Can you give an example?
[22:01:23] <seninha> Like (+ 1 (list 2 3 4))
[22:01:34] <Zipheir> (apply + 1 (list 2 3 4))
[22:01:45] <Zipheir> Only the last argument to apply must be a list.
[22:02:20] <Zipheir> If you want partial application, see cut (srfi 26) or https://srfi.schemers.org/srfi-232/
[22:02:34] <seninha> Zipheir: thanks, that's exactly what I was looking for
[22:02:41] <Zipheir> yw!
[22:09:04] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzz…)
[22:09:37] <sham1> "how an I apply a list of arguments" while you got your answer, isn't it just great that there's an exactly the procedure with the exact name you need?
[22:13:37] *** Joins: shawnw (~shawn_w@152.44.212.188)
[22:13:49] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[22:14:38] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[22:24:53] <seninha> sham1, I knew about apply, but I though it got only a single list as argument.
[22:25:27] <sham1> Ah
[22:26:02] <sham1> Yeah, it's a weird operation
[22:26:03] <seninha> I didn't know about the arguments between the procedure and the list (1 in this case)
[22:27:17] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[22:27:28] <seninha> I'm unioning the list elements of the result of a map: (apply lset-union eq?  (map (lambda (state) ((nextstates automaton) symbol state)) states))
[22:28:08] <seninha> I could use an implementation of flatmap, but then I could get repeated elements, so applying lset-union is what I need.
[22:29:16] <ski> does `(nextstates automaton)' do a nontrivial amount of work ?
[22:29:39] <ski> i guess you could fold/reduce
[22:31:25] <sham1> reduce
[22:31:31] <Zipheir> seninha: You probably already know, but beware lset-union's O(n²) time complexity.
[22:31:33] <sham1> We go with the longer names here
[22:31:37] <seninha> (nextstates automaton) is just a big cond
[22:31:48] <sham1> Also that. Lists as sets are nasty
[22:32:32] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[22:32:36] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[22:32:53] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[22:34:05] *** Joins: aeth (~aeth@user/aeth)
[22:34:23] *** Joins: civodul (~user@guix/contributor/civodul)
[22:35:59] <seninha> Like this? (reduce append '() (map (lambda (state) ((nextstates automaton) symbol state)) states))
[22:36:57] <Zipheir> Yes.  You can also fuse reduce after map.
[22:37:54] <Zipheir> (Although that may not be true with reduce, I'm not sure.  fold-right doesn't have the short-cutting semantics, if there's any doubt.)
[22:38:35] <ski> (short-cutting for singleton list ?)
[22:38:47] <seninha> Ok, I replaced lset-union with reduce in my code.
[22:38:51] <Zipheir> (fold-right g z (map f xs)) = (fold-right (lambda (x c) (g (f x) c)) z xs), assuming no side-effects.
[22:38:56] <ski> seninha : huh ?
[22:38:59] <Zipheir> ski: Yes.
[22:39:41] <ski> why not replace `append' with `lset-union', rather ?
[22:40:02] <seninha> ski: I replaced the two lines I just commented before.
[22:40:27] <ski> seninha : well, you could factor `(nextstates automaton)' out of the `lambda', in case you'd prefer to only do it once
[22:41:59] <ski> oh, `lset-union' doesn't maintain sortedness or so ?
[22:42:21] <ski> (i guess that "l" stands for "list")
[22:42:34] <seninha> I do not need sortedness in that program.
[22:44:13] <seninha> This is what I changed: https://github.com/phillbush/automata.scm/commit/85e2e8192e6fe7a224bd9d6d23eca4017a36db4d
[22:48:40] <Zipheir> (lset-union eq? ...) is a weird thing.
[22:49:41] <Zipheir> List append gives set union only for disjoint lists/sets, unless you're treating them as multisets.
[22:50:05] <Zipheir> I don't know enough about the program to know if that matters.
[22:50:07] <seninha> hmm, I tested here and it does not union as I want. I do not want the multiset behavior.
[22:50:10] *** Parts: tatsumaru (~tatsumaru@82.147.131.155) ()
[22:50:15] <seninha> yeah
[22:50:47] <Zipheir> seninha: Does your Scheme implementation provide a set library?
[22:53:48] <Zipheir> The lset stuff works, but it might be easier to avoid bugs by working with actual set objects.
[22:55:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:55:37] <sham1> It's also easier to avoid garbage performance
[22:56:23] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[22:56:31] <seninha> I don't know whether it provides. I'm using chibi-scheme.
[22:56:48] <sham1> For example I was doing last year's AoC in CL (had to pick something, wanted to get better at using CL and didn't want to pick a Scheme implementation), and in one of the days I went from several minutes (!) to a couple of seconds by going from using lists as sets to actual hash sets
[22:56:56] <sham1> IIRC chibi does provide actual sets
[22:57:16] *** Joins: badkins (~badkins@136.56.92.199)
[22:57:20] <Zipheir> seninha: Yeah, use (scheme set) or (srfi 113)
[22:57:28] <sham1> Yeah, that
[22:57:31] <seninha> it provides srfi 113
[22:57:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:57:37] <seninha> yeah
[22:57:44] <tatsumaru> can anyone explain why the OpenCog project chose guile to develop AI? I doubt guile has any popular AI libraries, is there any significant benefit in using guile to write AI?
[22:57:47] <sham1> Probably (srfi 113) because isn't (scheme set) one of the R7-big libraries? Which docket is that actually
[22:58:09] <Zipheir> chibi-scheme supports the R7RS-large names.
[22:58:16] <sham1> Maybe they just wanted to use Guile
[22:58:16] <seninha> I'm gonna read that srfi.
[22:58:19] <Zipheir> At least up to Tangerine edition.
[22:58:25] <sham1> Alright
[22:58:42] <sham1> Oh, it's the Red docket
[22:58:47] <Zipheir> Yeah.
[22:59:51] <Zipheir> tatsumaru: Look at their FAQ, or ask the OpenCog developers.
[23:00:22] <sham1> And of course, if one uses (srfi 113)/(scheme set), one must also remember comparators. So (srfi 128). I would imagine that comparators would also have an R7-big name, I just don't know what it is. (scheme comparator) would make sense though
[23:01:28] <Zipheir> IIRC the chibi/sample implementation of SRFI 113 is on top of hash-tables, so the mutating procedures will be more space-efficient.  (Unfortunately, IMO, but that was the easiest approach.)
[23:02:27] <Zipheir> sham1: I think it's (scheme comparators).  R7RS naming went plural by popular consensus.
[23:02:43] <Zipheir> Er, no, sorry.
[23:02:55] <Zipheir> It's (scheme comparator)
[23:03:13] <sham1> Neat
[23:03:16] <Zipheir> R6RS is the plural one!
[23:03:25] <Zipheir> Oy vey.
[23:04:26] <sham1> Gotta love inconsistent naming
[23:04:46] <tokie> i think inconsistency is one of the charms of scheme
[23:05:14] <tokie> it's only fully realized when you're trying to implement the spec and need to check what all the major schemes do, and then decide which variation you want to implement
[23:05:23] <tokie> or maybe invent your own!
[23:05:31] <sham1> This is exactly why we have standardisation, so this wouldn't happen!
[23:05:47] <sham1> standardisation/standardization
[23:06:54] <sham1> Zipheir: anyway, RE you not liking Chibi using hash tables, is there a functional data structure for sets that provides at least similar-ish characteristics to a hash table? So something like what finger trees are for vectors, but sets instead
[23:07:02] <sham1> Because RB tree is nice but O(log n) access
[23:08:19] <Zipheir> R-B trees, AVL trees, there are other options.
[23:08:23] <sham1> I mean I suppose one could argue that hash tables are functional if they don't grow and such, but y'know what I mean
[23:08:49] <Zipheir> There may be a functional structure with amortized O(1) lookup, but that's the best you can do.
[23:09:15] <sham1> Well that's fine, because that's the same as hash tables
[23:09:34] <Zipheir> Embrace the logarithm.
[23:09:50] <sham1> But it's slow!
[23:10:01] <Zipheir> Nonsense, that's just folklore.
[23:10:29] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 256 seconds)
[23:10:39] <sham1> Also I'm not sure if there are any structures which are hashable but are not orderable
[23:10:46] <Zipheir> Integer sets have a particularly nice functional representation by radix trees.  https://ittc.ku.edu/~andygill/papers/IntMap98.pdf
[23:10:48] <sham1> And even then ordering could be made based on hashing I suppose
[23:10:56] <Zipheir> (Used for the SRFI 217 and 224 implementations.)
[23:11:06] <sham1> Yeah, integers are a special case IMO
[23:11:20] <sham1> That's why, for example Haskell has Data.IntMap
[23:11:32] <sham1> Which might actually be a radix tree
[23:11:33] <Zipheir> Same implementation.
[23:11:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[23:11:44] <Zipheir> I shamelessly cribbed from it while working on 224.
[23:12:02] <sham1> Well then that's it
[23:12:38] <Zipheir> The integer sets do even better space-wise because you can put bitmaps in the leaves of the radix trees.
[23:12:52] <sham1> Hm
[23:14:17] <Zipheir> seninha: SO, if you can find a way to represent your automaton states by integers, that's optimal.
[23:14:48] <sham1> Every state of an automaton should be mappable to an integer
[23:18:51] <seninha> Zipheir: yeah, I can do that. I name the states as symbols like 'q0, 'q1, ... 'qn
[23:19:08] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[23:20:22] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:d463:1c5d:4b63:1663)
[23:20:55] <seninha> Now I have only one problem while rewriting my program with sets: the apply procedure.
[23:21:25] <seninha> I get a set of sets and I want to apply set-union to those subsets.
[23:21:55] <Zipheir> set-fold
[23:22:30] <Zipheir> Alternatively, accumulate a list of sets.
[23:23:51] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[23:35:22] <tatsumaru> what is the difference between a compiler and transcompiler?
[23:37:18] <Zipheir> Nothing.
[23:38:15] <Zipheir> The latter term is used to denote compilers that target "non-assembly" languages.
[23:38:30] <Zipheir> But it's not a very meaningful distinction, IMO.
[23:40:18] <seninha> Zipheir, thanks for the tips, I'm using sets from SRFI 113 now. https://github.com/phillbush/automata.scm/blob/master/automata.scm
[23:40:44] <seninha> I have not noticed any performance different, as the test examples are very simple
[23:41:10] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzz…)
[23:42:06] <Zipheir> seninha: I'm glad they're working for you.
[23:43:23] <sham1> Yeah, the idea of having a compiler vs transpiler is really an artificial one
[23:43:44] <sham1> Both are compilers, one just compiles between high-level languages
[23:43:57] <sham1> And another one generally lowers the abstraction
[23:44:22] <tatsumaru> so if it compiles scheme to c it's compiler but if it compiles scheme to java it's transpiler?
[23:48:22] <Zipheir> "A low-level language is one that forces you to pay attention to the irrelevant."
[23:49:10] <Zipheir> tatsumaru: They're both "transcompilers", since C and Java are both high-level in a traditional sense.
[23:49:33] <Zipheir> (Specifically, according to what the original Dragon Book calls a high-level language.)
[23:50:18] <Zipheir> The real point is that there is no ur-language; it's turtles all the way down.
[23:50:20] <ski> please simply refrain from using the term "transpiler"/"transcompiler" :)
[23:50:25] <Zipheir> Yeah.
[23:50:58] * ski . o O ( "Concerning compilation and interpretation, and an interpretation of the compilation of confusion surrounding their meaning and execution" in 2007-06-19 and "Summarizing several issues with compilation and interpretation" in 2007-07-14, both by Riastradh, at <https://mumble.net/~campbell/blag.txt> )
[23:51:39] <Zipheir> ski: Thanks!
[23:52:06] <ski> (those two blags should be obligatory reading, in here of all channels ..)
[23:53:09] <Zipheir> tatsumaru: I also highly recommend reading through the first chapter or so of the Dragon Book about this.  It's not particularly heavy reading.
[23:53:22] <ski> jcowan : did the blag RSS feed move or is it simply gone ?
[23:54:40] <tatsumaru> Zipheir is this the one: Compilers: Principles, Techniques, and Tools
[23:55:08] <Zipheir> tatsumaru: Yes.  It's a very nice book.
[23:56:22] <tatsumaru> I will check it out thanks
[23:56:30] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:d463:1c5d:4b63:1663) (Ping timeout: 250 seconds)
[23:57:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:58:41] <Zipheir> Yeah, Riastradh puts it very well.  "Compilation is the analysis of a program's meaning, rendering the same semantics into another language.  A compiler is a total function from programs to meanings."
[23:59:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:59:16] <tatsumaru> Isn't that what interpreters are
[23:59:45] <Zipheir> I'll quote his next definition, for completeness.
[23:59:54] *** Quits: Oxyd (~oxyd@user/oxyd) (Read error: Connection reset by peer)
