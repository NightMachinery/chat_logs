[00:29:54] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75)
[00:41:58] *** Quits: AnselmoCampanas (~AnselmoCa@190.99.69.41) (Ping timeout: 256 seconds)
[00:42:40] *** Quits: mxp (~mxp@185.16.205.131) (Ping timeout: 260 seconds)
[00:51:19] *** Joins: mxp (~mxp@185.16.205.131)
[00:55:03] *** Joins: djapo (~archangel@user/djapo)
[01:04:35] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[01:06:32] *** Joins: GJdan (~quassel@107-190-25-70.cpe.teksavvy.com)
[01:07:40] *** Quits: GJdan (~quassel@107-190-25-70.cpe.teksavvy.com) (Client Quit)
[01:17:19] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[01:28:26] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[01:29:15] *** Quits: rje (~rje@50.35.241.164) (Ping timeout: 268 seconds)
[01:30:47] *** Quits: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[01:31:35] *** Joins: thiras (~thiras@user/thiras)
[01:45:26] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[01:45:30] *** Joins: dre (~dre@2001:8003:c932:c301:9f9c:b84c:cb51:c83)
[02:00:53] *** Joins: bartzy (uid163429@id-163429.hampstead.irccloud.com)
[02:07:29] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[02:33:00] *** Joins: rje (~rje@50.35.241.164)
[02:33:54] *** Joins: schinckel (uid38120@id-38120.ilkley.irccloud.com)
[03:20:11] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 264 seconds)
[03:20:23] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:25:52] *** Quits: orzel (~orzel@2a01:e0a:df:6ba0:6600:577d:a10:3675) (Quit: Konversation terminated!)
[03:32:51] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Read error: Connection reset by peer)
[03:36:17] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 268 seconds)
[04:29:57] *** Quits: hifriend (~lars@85.149.58.141) (Ping timeout: 268 seconds)
[04:40:38] *** Quits: bartzy (uid163429@id-163429.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:43:47] *** Joins: explore (uid233125@id-233125.hampstead.irccloud.com)
[05:12:42] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:22:04] *** Quits: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: Konversation terminated!)
[05:41:09] *** Joins: darkstardev13 (~darkstard@50.39.114.152)
[05:43:56] *** Quits: darkstarx (~darkstard@gateway/vpn/pia/darkstardevx) (Ping timeout: 268 seconds)
[06:07:44] *** Quits: niv (~niv@limbo.cypherpunks.io) (Quit: Powered by LunarBNC: https://LunarBNC.net)
[06:09:23] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 264 seconds)
[06:10:27] *** Quits: holbrode (sid339826@id-339826.tinside.irccloud.com) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: debnet (sid330295@python/afpy/debnet) (Ping timeout: 268 seconds)
[06:10:58] *** Quits: schinckel (uid38120@id-38120.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[06:11:04] *** Quits: matthewwilkes (sid500242@2a03:5180:f:5::7:a212) (Ping timeout: 268 seconds)
[06:11:04] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 268 seconds)
[06:11:05] *** Quits: graingert (sid128301@2a03:5180:f::1:f52d) (Ping timeout: 268 seconds)
[06:11:05] *** Quits: Knyght (sid365271@id-365271.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[06:11:19] *** Joins: holbrode (sid339826@tinside.irccloud.com)
[06:11:21] *** Quits: explore (uid233125@id-233125.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[06:11:35] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[06:11:47] *** Quits: rtpg (sid443069@2a03:5180:f:3::6:c2bd) (Ping timeout: 264 seconds)
[06:12:13] *** Joins: bjs (sid190364@user/bjs)
[06:12:16] *** Joins: Knyght (sid365271@helmsley.irccloud.com)
[06:12:21] *** Joins: debnet (sid330295@python/afpy/debnet)
[06:12:21] *** Joins: matthewwilkes (sid500242@uxbridge.irccloud.com)
[06:12:22] *** Joins: rtpg (sid443069@ilkley.irccloud.com)
[06:13:11] *** Joins: explore (uid233125@hampstead.irccloud.com)
[06:13:54] *** Joins: schinckel (uid38120@ilkley.irccloud.com)
[06:14:14] *** Joins: graingert (sid128301@tinside.irccloud.com)
[06:14:37] *** Joins: sa (sid1055@tinside.irccloud.com)
[06:20:58] *** Quits: rtpg (sid443069@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:21:04] *** Quits: debnet (sid330295@python/afpy/debnet) (Read error: Connection reset by peer)
[06:21:06] *** Quits: schinckel (uid38120@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:30:43] *** Joins: djapo (~archangel@user/djapo)
[06:35:19] *** Joins: schinckel (uid38120@id-38120.ilkley.irccloud.com)
[06:35:58] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[06:36:02] *** Joins: debnet (sid330295@python/afpy/debnet)
[06:36:54] *** Joins: djapo (~archangel@user/djapo)
[06:37:25] *** Joins: rtpg (sid443069@id-443069.ilkley.irccloud.com)
[06:45:29] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 244 seconds)
[06:47:28] *** Quits: debnet (sid330295@python/afpy/debnet) (Ping timeout: 268 seconds)
[06:48:05] *** Quits: rtpg (sid443069@id-443069.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:48:42] *** Quits: schinckel (uid38120@id-38120.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:49:16] *** Joins: schinckel (uid38120@ilkley.irccloud.com)
[06:51:02] *** Joins: rtpg (sid443069@ilkley.irccloud.com)
[07:04:44] *** Joins: debnet (sid330295@python/afpy/debnet)
[07:32:14] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 260 seconds)
[07:32:30] *** Quits: graingert (sid128301@tinside.irccloud.com) (Ping timeout: 244 seconds)
[07:32:42] *** Quits: sa (sid1055@tinside.irccloud.com) (Ping timeout: 260 seconds)
[07:32:42] *** Quits: matthewwilkes (sid500242@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[07:32:45] *** Quits: himcesjf (uid409730@tinside.irccloud.com) (Ping timeout: 256 seconds)
[07:33:01] *** Quits: Knyght (sid365271@helmsley.irccloud.com) (Ping timeout: 244 seconds)
[07:33:01] *** Quits: mindlesstux (sid18072@user/mindlesstux) (Ping timeout: 245 seconds)
[07:33:10] *** Quits: d1rewolf (sid312924@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[07:33:38] *** Quits: explore (uid233125@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[07:33:38] *** Quits: coldmountain (sid484352@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[07:33:57] *** Joins: Knyght (sid365271@2a03:5180:f:1::5:92d7)
[07:34:03] *** Joins: d1rewolf (sid312924@id-312924.helmsley.irccloud.com)
[07:34:04] *** Joins: explore (uid233125@2a03:5180:f:4::3:8ea5)
[07:34:05] *** Joins: bjs (sid190364@user/bjs)
[07:34:08] *** Joins: graingert (sid128301@2a03:5180:f::1:f52d)
[07:34:09] *** Joins: coldmountain (sid484352@2a03:5180:f:1::7:6400)
[07:34:19] *** Quits: schinckel (uid38120@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[07:34:24] *** Joins: matthewwilkes (sid500242@2a03:5180:f:5::7:a212)
[07:34:33] *** Joins: mindlesstux (sid18072@user/mindlesstux)
[07:34:34] *** Joins: himcesjf (uid409730@id-409730.tinside.irccloud.com)
[07:34:46] *** Joins: schinckel (uid38120@id-38120.ilkley.irccloud.com)
[07:35:06] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[08:13:20] *** Joins: djapo (~archangel@user/djapo)
[08:21:52] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[08:23:11] *** Joins: djapo (~archangel@user/djapo)
[08:30:37] *** Quits: carloratm (~carloratm@tilde.club) (Remote host closed the connection)
[08:32:26] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 244 seconds)
[08:33:29] *** Quits: explore (uid233125@2a03:5180:f:4::3:8ea5) (Quit: Connection closed for inactivity)
[08:39:31] <PaulWay[w]> Is it possible in Django to annotate a queryset with a number of seconds between now and a datetime field?
[08:40:27] <PaulWay[w]> E.g. qs.annotate(delta=Func(F'checked_at', some magic here))
[08:41:11] <PaulWay[w]> I could probably use Postgres's 'Age' function.
[08:42:05] <PaulWay[w]> qs.annotate(delta=Func(F('checked_at'), F('now()'), function='Age') maybe?
[08:44:05] <PaulWay[w]> Nice, that seems to work!
[08:44:20] <PaulWay[w]> Sorry, the second F() should be just Now().
[08:46:34] <PaulWay[w]> And the arguments should be reversed for seconds before...
[08:47:37] <PaulWay[w]> And age() returns strings like '1262 days, 3:15:30.497660' so not really a pure delta.
[08:49:52] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[08:56:57] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75) (Ping timeout: 268 seconds)
[08:57:34] *** Quits: rje (~rje@50.35.241.164) (Ping timeout: 268 seconds)
[08:58:21] *** Joins: dor (~erg@78.11.12.207)
[09:00:03] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[09:00:15] *** Quits: dor (~erg@78.11.12.207) (Remote host closed the connection)
[09:00:28] *** Joins: dor (~erg@78.11.12.207)
[09:03:28] *** Quits: dor (~erg@78.11.12.207) (Remote host closed the connection)
[09:29:16] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:31:55] <schinckel> Fun times - it seems that doing a bulk_create inside a custom Migration Operation subclass's database_forwards actually performs that operation when doing `sqlmigrate`
[09:32:10] *** Quits: dre (~dre@2001:8003:c932:c301:9f9c:b84c:cb51:c83) (Remote host closed the connection)
[09:33:49] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[09:34:59] *** Quits: carl0s[m] (~carl0s@2001:470:69fc:105::305b) (*.net *.split)
[09:37:19] *** Joins: carl0s[m] (~carl0s@2001:470:69fc:105::305b)
[09:38:01] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 245 seconds)
[09:38:33] *** Joins: mattil (~mattil@d43s9c1njjbf9b76mmf-4.rev.dnainternet.fi)
[09:42:53] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (*.net *.split)
[09:42:53] *** Quits: blip2 (~blip2@blip2.net) (*.net *.split)
[09:42:54] *** Quits: marienz (~marienz@libera/staff/marienz) (*.net *.split)
[09:42:54] *** Quits: ktosiek (~ktosiek@li1810-126.members.linode.com) (*.net *.split)
[09:42:54] *** Quits: ravish0007_ (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[09:42:54] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[09:42:54] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[09:42:54] *** Quits: mdk (~mdk@python/psf/mdk) (*.net *.split)
[09:42:54] *** Quits: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com) (*.net *.split)
[09:42:54] *** Quits: nyany (~nyany@dronebl/admin/cat) (*.net *.split)
[09:42:54] *** Quits: Damianz (~damian@user/damianz) (*.net *.split)
[09:42:54] *** Quits: Cybergeek (~Cybergeek@2a03:b0c0:3:e0::1ab:5001) (*.net *.split)
[09:42:54] *** Quits: carom (~carom@143.198.135.106) (*.net *.split)
[09:43:00] *** Joins: Damianz (~damian@user/damianz)
[09:43:03] *** Quits: mattil (~mattil@d43s9c1njjbf9b76mmf-4.rev.dnainternet.fi) (Ping timeout: 250 seconds)
[09:43:06] *** Joins: marienz (~marienz@libera/staff/marienz)
[09:43:08] *** Joins: Cybergeek (~Cybergeek@2a03:b0c0:3:e0::1ab:5001)
[09:43:09] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[09:43:15] *** Joins: nyany (~nyany@dronebl/admin/cat)
[09:43:26] *** Joins: blip2 (~blip2@blip2.net)
[09:43:36] *** Joins: ktosiek (~ktosiek@li1810-126.members.linode.com)
[09:43:48] *** Joins: carom (~carom@143.198.135.106)
[09:43:50] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[09:43:52] *** Joins: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com)
[09:45:35] *** Joins: strudl (~strudl@user/strudl)
[09:46:12] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[09:47:36] *** Joins: mattil (~mattil@d43s9c1njjbf9b76mmf-4.rev.dnainternet.fi)
[09:48:50] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[09:49:57] *** Quits: mattil (~mattil@d43s9c1njjbf9b76mmf-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:50:36] *** Joins: mattil (~mattil@d43s9c1njjbf9b76mmf-4.rev.dnainternet.fi)
[09:55:11] *** Quits: mattil (~mattil@d43s9c1njjbf9b76mmf-4.rev.dnainternet.fi) (Ping timeout: 250 seconds)
[09:59:04] *** Joins: Elzington (~Elzington@static-68-235-44-69.cust.tzulo.com)
[10:00:37] *** Joins: mrwick (~mrwick@user/mrwick)
[10:16:14] *** Joins: dre (~dre@2001:8003:c932:c301:a62b:d5d5:737b:8c68)
[10:16:23] *** Joins: xkuru (~xkuru@user/xkuru)
[10:21:56] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:32:58] *** Joins: dre_ (~dre@2001:8003:c932:c301:b58c:e47a:cd01:4d7d)
[11:00:51] <MarkusH> schinckel: wait, what?
[11:25:25] *** Joins: VaniaPy (~VaniaPy@46.12.226.1.dsl.dyn.forthnet.gr)
[11:31:20] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[11:34:26] *** Joins: thiras (~thiras@user/thiras)
[11:35:32] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 240 seconds)
[11:36:47] *** Joins: mattil (~mattil@helsinki.portalify.com)
[11:38:00] *** Joins: pycode (~pycode@2001:b07:5d28:551:b8c:5ab:f9b4:d156)
[11:52:30] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:02:16] <serafeim> hello my friends
[12:10:53] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:22:58] *** Quits: gitly (~gitly@148.252.128.211) (Ping timeout: 260 seconds)
[12:24:57] *** Joins: gitly (~gitly@85.255.235.75)
[12:30:54] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:37:28] *** Parts: VaniaPy (~VaniaPy@46.12.226.1.dsl.dyn.forthnet.gr) ()
[12:49:15] *** Quits: kurfen (~kurfen@45.152.181.20) (Read error: Connection reset by peer)
[12:53:50] *** Joins: kurfen (~kurfen@45.152.181.20)
[13:07:48] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[13:21:00] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[13:35:27] *** Joins: fleabag (~sirpengi@li587-65.members.linode.com)
[13:40:05] *** Quits: pycode (~pycode@2001:b07:5d28:551:b8c:5ab:f9b4:d156) (Ping timeout: 250 seconds)
[13:50:32] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[13:50:43] *** Quits: dre_ (~dre@2001:8003:c932:c301:b58c:e47a:cd01:4d7d) (Remote host closed the connection)
[13:55:02] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 240 seconds)
[14:14:23] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[14:18:32] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 240 seconds)
[14:45:21] *** Joins: VaniaPy (~VaniaPy@46.12.226.1.dsl.dyn.forthnet.gr)
[14:51:29] <serafeim> hello friends. i was bitten by this bug: https://code.djangoproject.com/ticket/10060
[14:51:43] <serafeim> this 13 years old bug. yey
[14:58:52] <VaniaPy> i have a function in a ModelViewSet that i need to return the result of a division. However,i can get the results from the serializer
[14:58:58] <VaniaPy> i can't get*
[15:00:14] *** Joins: pycode (~pycode@2001:b07:5d28:551:772d:56ce:6f3e:ff03)
[15:02:20] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[15:09:10] *** Joins: lithium_sulfate (~li2so4@sr388.sophieversum.net)
[15:13:46] *** Joins: szymon (~ugh@37.120.211.197)
[15:20:36] <serafeim> and to show off; here's the code I use to overcome the bug i mentioned before (i.e use subqueries for annotations): https://dpaste.org/83iT
[15:22:01] <serafeim> yey  ?
[15:47:49] *** Joins: szymon_ (~ugh@37.120.211.196)
[15:50:05] *** Quits: szymon (~ugh@37.120.211.197) (Ping timeout: 250 seconds)
[15:50:07] *** Quits: pycode (~pycode@2001:b07:5d28:551:772d:56ce:6f3e:ff03) (Ping timeout: 268 seconds)
[15:57:12] *** Joins: dez (uid92154@user/dez)
[16:00:34] *** Joins: pgcd (~pgcd@ip5f5bf2a3.dynamic.kabel-deutschland.de)
[16:00:46] <pgcd> hi all
[16:03:21] <pgcd> I'm trying to find a way of doing something in-database and it completely escapes me: given a model with a date record for each working day, how can I find all dates which are at least N working days before a given date?
[16:04:12] <serafeim> pgcd: you first find that given date (i.e now() - datetime.timedelta(days=n)). and then you just do a lte
[16:04:57] <pgcd> serafeim how does that work with working days? eg. the weekend
[16:05:16] <serafeim> ah sorry
[16:05:42] <serafeim> you'll need to do more calculations to find the date
[16:06:00] <pgcd> yeah, definitely =)  but I can't really figure out how
[16:06:49] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:07:23] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:07:31] <pgcd> the working days are already stored, so checking if a given date is OK is easy - i can do filter(date__range=(start, end)).count() > N
[16:09:01] <serafeim> i guess there are a lot of ways but a simple one would be something like this: https://dpaste.org/0cvu
[16:09:43] <serafeim> so now you have the date - N working days. and then you can just pick the working days that are before that
[16:10:04] <pgcd> there are other ways (there's also a workalendar library) but those are not in-database
[16:11:59] *** Joins: AnselmoCampanas (~AnselmoCa@190.99.69.41)
[16:12:09] <pgcd> which means that, if I have a different model that stores the N (minimum working days) values, I can't annotate that model to get the first "good" date (at least N working days from now)
[16:13:10] <pgcd> I thought to use an ArrayAgg and then slice the resulting ArrayField, but apparently queryset.values('calculatedarrayfield__4') doesn't work
[16:15:12] *** Joins: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net)
[16:26:42] *** Quits: AnselmoCampanas (~AnselmoCa@190.99.69.41) (Quit: Client closed)
[16:28:39] *** Joins: Elodin (~weechat@user/elodin)
[16:32:33] *** Joins: pycode (~pycode@2001:b07:5d28:551:3830:c20c:78a9:35a0)
[16:50:39] *** Joins: AnselmoCampanas (~AnselmoCa@190.99.69.41)
[16:57:57] *** Joins: yanchai (~yanchai@203.177.194.130)
[16:58:42] *** Parts: yanchai (~yanchai@203.177.194.130) ()
[16:58:51] *** Joins: yanchai (~yanchai@203.177.194.130)
[17:10:48] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:19:00] *** Quits: pgcd (~pgcd@ip5f5bf2a3.dynamic.kabel-deutschland.de) (Quit: Client closed)
[17:20:02] <yanchai> hi
[17:20:25] <yanchai> what is the best server for django in deployment? ngix or apache?
[17:22:30] <dodo> define best?
[17:22:42] *** Quits: AnselmoCampanas (~AnselmoCa@190.99.69.41) (Ping timeout: 256 seconds)
[17:22:50] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:23:48] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:26:12] <LordKalma> thte best is the one that suits your needs :p
[17:26:59] <LordKalma> (btw, is either nginx or apache even capable of serving python wsgi? I though you need like guinicord and then the apache/nginx layer was for stuff beyond that)
[17:27:35] *** Quits: szymon_ (~ugh@37.120.211.196) (Ping timeout: 250 seconds)
[17:27:49] *** Joins: szymon_ (~ugh@37.120.211.196)
[17:28:48] *** Quits: kostkon (~kostkon@athedsl-393765.home.otenet.gr) (Ping timeout: 268 seconds)
[17:32:27] *** Joins: xkuru (~xkuru@user/xkuru)
[17:33:41] <bss> apache has mod_wsgi but running gunicorn is less annoying IMO
[17:37:41] <LordKalma> I use apache on my VPS as the public facing interface for everything. It's pretty much so I only have to configure SSL once haha
[17:39:09] <vdamewood> LordKalma: It helps that things like LE have automatic support for Apache, too.
[17:40:16] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[17:40:35] <vdamewood> LordKalma: And for what it's worth, I run mod_wsgi on my production server. It runs great once you have it config'd correctly.
[17:41:07] <LordKalma> I have LE configured by virtualmin, and I know its using the domain record mode, because I have wildcard matching, but yeah, it's cool it integrates well with apache
[17:41:16] <yanchai> im used to apache but when i started to read about load balancer most search results recommends ngix lol
[17:44:04] *** Joins: pro_z (~pro_z@37.214.47.38)
[17:44:09] <VaniaPy> how can i multiply the results of 2 functions,i passs the result of each function to Response class
[17:44:31] <LordKalma> I don't have a recommendation to handle django itself. I'm still learning it myself. And I want to write a react fronted or something like they so I know I'll end up having like a docker setup with postgres, gunicorn, and traefik or nginx, something like that. As I said I only depend on apache for handling my public-facing stuff
[17:44:59] <VaniaPy> and i'm getting TypeError: unsupported operand type(s) for /: 'Response' and 'int'
[17:47:04] *** Joins: kostkon (~androirc@2.142.66.94.static.otenet.gr)
[17:53:34] *** Joins: bandit_za (~bandit@105.186.108.112)
[18:00:28] <vdamewood> LordKalma: Yeah, I'm using DNS records to support a wildcard cert myself, too. But still, it's a nice feature.
[18:00:44] <LordKalma> for sure
[18:02:21] *** kostkon is now known as kostkon_
[18:03:59] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 250 seconds)
[18:04:44] *** Joins: iomari891 (~iomari891@105.112.138.38)
[18:08:18] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[18:09:17] *** Joins: rje (~rje@50.35.241.164)
[18:12:28] *** Joins: kostkon (~androirc@2.142.66.94.static.otenet.gr)
[18:18:00] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:19:01] *** Joins: ovnicraft (~ovnicraft@rrcs-208-105-58-61.nyc.biz.rr.com)
[18:19:31] *** Quits: kostkon (~androirc@2.142.66.94.static.otenet.gr) (Remote host closed the connection)
[18:29:55] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[18:31:42] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:37:32] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 240 seconds)
[18:38:34] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[18:41:53] *** Joins: kostkon (~kostkon@2a02:587:a112:b71e:51f:2ff5:deef:ea8)
[18:43:05] *** Quits: kostkon (~kostkon@2a02:587:a112:b71e:51f:2ff5:deef:ea8) (Read error: Connection reset by peer)
[18:43:27] *** Joins: kostkon (~kostkon@2a02:587:a112:b71e:51f:2ff5:deef:ea8)
[18:44:36] *** Quits: kostkon (~kostkon@2a02:587:a112:b71e:51f:2ff5:deef:ea8) (Remote host closed the connection)
[18:44:54] *** Joins: kostkon (~kostkon@2a02:587:a112:b71e:51f:2ff5:deef:ea8)
[18:46:05] *** Quits: kostkon (~kostkon@2a02:587:a112:b71e:51f:2ff5:deef:ea8) (Remote host closed the connection)
[18:46:24] *** Joins: kostkon (~kostkon@2a02:587:a112:b71e:51f:2ff5:deef:ea8)
[18:47:35] *** Quits: kostkon (~kostkon@2a02:587:a112:b71e:51f:2ff5:deef:ea8) (Remote host closed the connection)
[18:47:55] *** Joins: kostkon (~kostkon@2a02:587:a112:b71e:51f:2ff5:deef:ea8)
[18:52:30] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:52:57] *** Quits: bandit_za (~bandit@105.186.108.112) (Ping timeout: 244 seconds)
[18:53:21] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[19:02:37] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[19:12:22] *** Quits: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com) (Quit: WeeChat 1.4)
[19:12:38] *** Joins: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com)
[19:18:31] *** Quits: kostkon (~kostkon@2a02:587:a112:b71e:51f:2ff5:deef:ea8) (Ping timeout: 250 seconds)
[19:19:35] *** Joins: kostkon (~kostkon@2a02:587:a111:d826:d94c:fb2b:4914:a6a9)
[19:21:32] *** Quits: yanchai (~yanchai@203.177.194.130) (Ping timeout: 240 seconds)
[19:23:31] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[19:23:57] *** Quits: rje (~rje@50.35.241.164) (Ping timeout: 244 seconds)
[19:25:15] *** Joins: bandit_za (~bandit@105.186.108.112)
[19:27:04] <theseb> ow handle long running processing in a django web server?  is it as easy as launching those function calls with Popen to run in background?
[19:27:51] <nbjoerg> e.g. uwsgi has a builtin mechanism for offloading computation jobs
[19:29:01] *** Joins: aselman4 (~aselman4@new-chipr007-p2.nls.ford.com)
[19:30:13] <theseb> nbjoerg: i'm using uwsgi to run my django server on top of nginx now
[19:30:36] <aselman4> Hello all, is there a way to add a case statement to the partition by parameter of a window function? similar to https://stackoverflow.com/a/29482451/506185
[19:33:31] <theseb> nbjoerg: anything wrong w/ just doing a primitive Popen call to put processes in background?
[19:33:36] <GinFuyou> theseb, no, it's not as easy as far as I know.
[19:34:05] <nbjoerg> theseb: who is going to clean them up?
[19:34:22] <nbjoerg> theseb: i.e. how do you deal with zombies
[19:34:49] <theseb> nbjoerg: are you saying if Popen job doesn't finish it will stick around and fill my memory?
[19:34:56] <GinFuyou> You usually need some other process to manage it. Celery or uwsgi as was mentioned (didn't explore uwsgi options, but heard about it repeatedly)
[19:35:03] <nbjoerg> no, I'm saying who is cleaning up the child process
[19:35:11] <nbjoerg> as in: os.wait
[19:35:30] <theseb> nbjoerg: all I do is call some APIs and then exit
[19:35:49] <theseb> they take like 1-2 min which is long enough to give a 502 Bad Gateway error
[19:35:58] *** Quits: aselman4 (~aselman4@new-chipr007-p2.nls.ford.com) (Quit: Client closed)
[19:36:19] <nbjoerg> https://uwsgi-docs.readthedocs.io/en/latest/Spooler.html
[19:36:29] <theseb> nbjoerg: what does it mean to "clean up a child process"?  kill it after max time?
[19:36:46] <nbjoerg> https://en.wikipedia.org/wiki/Zombie_process
[19:37:54] *** Joins: twomanytacos (uid366386@id-366386.lymington.irccloud.com)
[19:39:06] <theseb> nbjoerg: wow....zombie processes...a whole article on why they happen..thanks
[19:40:58] <nbjoerg> there are ways to deal with it, but also subtle traps. easier to use a proper offload mechanism
[19:41:54] <theseb> nbjoerg: yes...now i'm convinced
[19:57:25] *** Joins: AnselmoCampanas (~AnselmoCa@190.99.69.41)
[19:59:19] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:02:41] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[20:04:15] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 244 seconds)
[20:16:09] <w0rp> Has anyone ever seen a working function for app.get_models() that sorts models from the least dependent to the most dependent? (Foreign key relations deciding the order.)
[20:16:48] <w0rp> I imagine serializers.deserialize must attempt to do something like that.
[20:17:51] *** Joins: Harlin (~DonQixote@75-163-144-60.clsp.qwest.net)
[20:18:26] *** Quits: VaniaPy (~VaniaPy@46.12.226.1.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[20:18:49] *** Joins: kostkon_ (~kostkon@athedsl-393393.home.otenet.gr)
[20:19:02] *** Quits: kostkon (~kostkon@2a02:587:a111:d826:d94c:fb2b:4914:a6a9) (Ping timeout: 240 seconds)
[20:21:08] *** kostkon_ is now known as kostkon
[20:26:05] *** Quits: szymon_ (~ugh@37.120.211.196) (Quit: szymon_)
[20:32:30] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[20:32:40] *** Joins: rje (~rje@65.141.156.170)
[20:41:29] *** Joins: stdout (~stdout@216.163.21.11)
[20:50:10] *** Joins: bartzy (uid163429@id-163429.hampstead.irccloud.com)
[21:10:32] *** Quits: pro_z (~pro_z@37.214.47.38) (Ping timeout: 240 seconds)
[21:11:47] *** Quits: AnselmoCampanas (~AnselmoCa@190.99.69.41) (Quit: Client closed)
[21:18:09] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[21:18:28] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[21:18:37] *** Joins: _ganapathi_ (~ganapathi@60.243.55.197)
[21:19:59] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[21:20:18] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[21:20:20] <_ganapathi_> my default db on django app is postgresql. but am planning to use some local sqlite or redis for django_appscheduler_job and related table alone for SQL performance improvement. Also django session  on redis. anybody help me out the way possible or any doc for the same.
[21:34:22] <dodo> _ganapathi_: um, you can use a db router
[21:34:50] <dodo> though i'm not sure if you can use redis for that.. and sqlite wouldn't be my first choice either
[21:35:08] <dodo> maybe it would be better to think about how to improve the performance with your existing db first?
[21:35:39] <_ganapathi_> is there any example or doc to change. and you're talking about session data or apscheduler ?
[21:36:34] <_ganapathi_> And moving session data and apschedler job to redis or local is not best ideal solution as you're saying ?
[21:37:05] <dodo> session in cache would be fine imo
[21:37:10] <dodo> not sure what appscheduler is
[21:37:22] <dodo> but i wouldn't consider sqlite
[21:38:07] <_ganapathi_> am trying to avoid much repeated data on network and main db. where my customer information and other related information are stored over there.
[21:39:32] <_ganapathi_> sqlite is 2nd option for me where it would crash if its unhandled. am looking for redis or other cache. if not sqlite. first of all i don't know whether its possible to separate only apscheduler and session is movable .
[21:47:35] *** Quits: pycode (~pycode@2001:b07:5d28:551:3830:c20c:78a9:35a0) (Ping timeout: 250 seconds)
[21:52:23] *** Quits: lucascastro (~lucascast@177-185-133-154.dynamic.isotelco.net.br) (Ping timeout: 256 seconds)
[22:06:56] *** Quits: _ganapathi_ (~ganapathi@60.243.55.197) (Ping timeout: 250 seconds)
[22:14:26] *** Joins: lucascastro (~lucascast@45-167-143-6.netfacil.inf.br)
[22:16:20] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Quit: Going offline, see ya! (www.adiirc.com))
[22:16:32] *** Quits: rje (~rje@65.141.156.170) (Ping timeout: 240 seconds)
[22:17:12] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:38:06] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[22:40:29] *** Joins: djapo (~archangel@user/djapo)
[22:43:20] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[22:49:33] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 250 seconds)
[22:55:02] *** Quits: ovnicraft (~ovnicraft@rrcs-208-105-58-61.nyc.biz.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:56:03] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[23:03:05] *** Quits: Harlin (~DonQixote@75-163-144-60.clsp.qwest.net) (Remote host closed the connection)
[23:08:54] *** Joins: ovnicraft (~ovnicraft@rrcs-208-105-58-61.nyc.biz.rr.com)
[23:11:01] *** Joins: djapo (~archangel@user/djapo)
[23:30:16] *** Quits: Elzington (~Elzington@static-68-235-44-69.cust.tzulo.com) (Quit: Leaving)
[23:32:29] *** Joins: humanBird (~humanBird@2603-8001-7003-5966-906d-cc0e-1f4e-892a.res6.spectrum.com)
[23:37:49] *** Quits: ovnicraft (~ovnicraft@rrcs-208-105-58-61.nyc.biz.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:40:32] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[23:45:01] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 250 seconds)
[23:45:18] *** Joins: ovnicraft (~ovnicraft@rrcs-208-105-58-61.nyc.biz.rr.com)
[23:51:00] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[23:59:26] *** Quits: humanBird (~humanBird@2603-8001-7003-5966-906d-cc0e-1f4e-892a.res6.spectrum.com) (Quit: Client closed)
