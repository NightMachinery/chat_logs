[00:07:57] *** Joins: vicfred (~vicfred@user/vicfred)
[00:08:06] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[00:10:25] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[00:23:55] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[01:09:19] *** Joins: olle (~olle@i5E866D83.versanet.de)
[01:14:08] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:16:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:08:09] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:12:44] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:12:50] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[02:40:58] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:43d0:2b49:8683:23ee) (Quit: Konversation terminated!)
[02:59:34] *** Quits: mro (~mro@port-92-195-135-142.dynamic.as20676.net) (Quit: Leaving...)
[03:19:10] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (Remote host closed the connection)
[03:25:32] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 240 seconds)
[03:44:04] *** Quits: olle (~olle@i5E866D83.versanet.de) (Ping timeout: 250 seconds)
[03:49:19] *** Joins: AeroNotix (~xeno@185.107.67.252)
[03:55:48] *** Quits: sleepydog (~sleepydog@pool-100-33-241-236.nycmny.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:06:31] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:24:08] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[04:25:36] *** Quits: AeroNotix (~xeno@185.107.67.252) (Quit: WeeChat 3.4)
[04:28:37] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Ping timeout: 240 seconds)
[04:31:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[04:38:15] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[05:13:50] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[05:22:06] *** Joins: sleepydog (~sleepydog@pool-100-33-241-236.nycmny.fios.verizon.net)
[05:23:50] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:27:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-33.dsl.bell.ca) (Ping timeout: 268 seconds)
[05:28:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:34:02] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-139.dsl.bell.ca)
[05:37:20] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-188.dsl.bell.ca)
[05:38:28] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-139.dsl.bell.ca) (Ping timeout: 250 seconds)
[05:49:59] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[05:50:11] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[05:59:54] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:03:36] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[06:20:20] *** Joins: mbuf (~Shakthi@122.173.231.124)
[07:20:03] <ns12> rgrinberg: In Opium, how do I make the logs appear when using the "logger" middleware? For example, this will not show any logs: https://paste.debian.net/plain/1228297
[07:20:50] <ns12> For the logs to appear, I found that I need to add: Logs.set_reporter (Logs_fmt.reporter ()); Logs.set_level (Some Logs.Info);
[07:21:00] <ns12> Like this: https://paste.debian.net/plain/1228298
[07:21:10] <ns12> Is this documented somewhere is Opium?
[07:57:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:58:50] *** Quits: mbuf (~Shakthi@122.173.231.124) (Read error: Connection reset by peer)
[08:00:17] *** Joins: mbuf (~Shakthi@122.173.231.124)
[08:08:44] *** Joins: spip (~bobo@37.172.38.82)
[08:09:11] *** Quits: bobo_ (~bobo@37.164.168.203) (Ping timeout: 256 seconds)
[09:30:42] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[09:49:51] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[10:06:50] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[10:27:41] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[10:29:28] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:38:30] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[11:17:58] <d_bot> <joris> hello, wondering if anyone has a project uses dune and ppx that properly generates modules index with description with odoc or if it is specific to my environnement ?
[11:20:11] *** Quits: caasih (sid13241@id-13241.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[11:21:18] *** Joins: caasih (sid13241@id-13241.ilkley.irccloud.com)
[11:30:46] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 250 seconds)
[11:53:39] <d_bot> <darrenldl> does "production ready" mean much of anything to anyone here?
[11:53:47] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[12:09:04] <d_bot> <antron> yes 🙂
[12:11:03] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: Lost terminal)
[12:14:41] <d_bot> <joris> when you finished writing the code, it's production ready
[12:17:28] *** Joins: jlrnick (~josephler@2a01cb040a1594007dfc79c9afe919a1.ipv6.abo.wanadoo.fr)
[12:22:56] *** Joins: mro (~mro@port-92-195-164-88.dynamic.as20676.net)
[12:28:26] <d_bot> <darrenldl> how do you personally define it?
[12:28:32] <d_bot> <p1xelHer0> code gets finished? 😮
[12:29:07] <d_bot> <darrenldl> hm, bar seems pretty low then
[12:29:45] <d_bot> <darrenldl> aighty, time to remove the spooky "dont use in production" warning
[12:30:24] <d_bot> <orbitz> Use at your own risk!
[12:30:56] <d_bot> <darrenldl> : D
[12:36:59] <d_bot> <antron> 😄
[12:37:39] <d_bot> <antron> depends on what it is. for an app, "if it's stupid and it works, it's not stupid"
[12:38:23] <d_bot> <antron> for a published library, thorough tests, docs, good api, there is experience using it and it has withstood some beating 🙂
[13:05:40] <d_bot> <darrenldl> ah i see, cheers
[13:05:42] *** Joins: olle (~olle@i5E866D92.versanet.de)
[13:15:59] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[14:06:04] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[14:25:44] *** Joins: bartholin (~bartholin@158.110.70.210)
[14:31:56] *** Joins: kakadu (~kakadu@195.19.236.234)
[15:12:17] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 240 seconds)
[15:22:03] *** Quits: spip (~bobo@37.172.38.82) (Quit: Konversation terminated!)
[15:36:42] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[15:44:52] *** Quits: mro (~mro@port-92-195-164-88.dynamic.as20676.net) (Remote host closed the connection)
[15:54:17] *** Joins: mro (~mro@port-92-195-164-88.dynamic.as20676.net)
[15:56:29] *** Quits: mro (~mro@port-92-195-164-88.dynamic.as20676.net) (Remote host closed the connection)
[16:01:24] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[16:12:49] <companion_cube> How do you define "finishing" @joris?:p
[16:17:05] *** Quits: pippijn (~pippijn@isis.xinutec.org) (Ping timeout: 256 seconds)
[16:17:13] *** Joins: pippijn (~pippijn@isis.xinutec.org)
[16:18:56] <d_bot> <dinosaure> as "never" I hope
[16:20:41] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[16:23:30] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[16:24:32] *** Joins: mro (~mro@port-92-195-164-88.dynamic.as20676.net)
[16:25:57] <d_bot> <joris> @companion_cube once you implemented 70% of the planned feature, it is roughly finished
[16:25:59] <d_bot> <joris> :p
[16:26:16] <companion_cube> :D
[16:30:50] *** Quits: mro (~mro@port-92-195-164-88.dynamic.as20676.net) (Read error: Connection reset by peer)
[16:30:56] *** Joins: mro_ (~mro@port-92-195-164-88.dynamic.as20676.net)
[16:40:38] <d_bot> <darrenldl> library with 0.7x multiplier
[16:40:39] <d_bot> <darrenldl> hm
[16:42:30] <ns12> So, is OCaml finished? ;-)
[17:04:02] <d_bot> <glennsl> Good thing plans never change
[17:04:09] *** Quits: mro_ (~mro@port-92-195-164-88.dynamic.as20676.net) (Remote host closed the connection)
[17:06:02] *** Quits: pippijn (~pippijn@isis.xinutec.org) (Ping timeout: 240 seconds)
[17:06:11] *** Joins: pippijn (~pippijn@isis.xinutec.org)
[17:08:56] *** Joins: mro (~mro@port-92-195-164-88.dynamic.as20676.net)
[17:16:04] * qwr . o O ( if unix 6th edition was roughly finished, then its about 70% of freebsd? ;) )
[17:18:47] *** Quits: mro (~mro@port-92-195-164-88.dynamic.as20676.net) (Remote host closed the connection)
[17:18:55] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:19:08] <d_bot> <VPhantom> I "finished" writing some code in the past, but I don't think I'd call much of it "production-ready", even that which ended up "in production". It's been "production-tested" by now though, but it'll never feel "ready". 😛
[17:21:22] *** Joins: mro (~mro@port-92-195-164-88.dynamic.as20676.net)
[17:42:34] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 250 seconds)
[18:02:37] <d_bot> <zakkor> Any idea why "method" is used in object syntax instead of just "let"?
[18:03:26] <d_bot> <mefyl> because the content is evaluated when you `obj#meth`, not at the declaration point, which `let` would imply
[18:04:50] <d_bot> <antron> `method` has a hidden argument (the `obj` in `obj#meth`)
[18:05:10] <d_bot> <antron> even if it appears to have no arguments syntactically, the body is suspended
[18:11:31] <d_bot> <zakkor> I see, thanks
[18:24:42] *** Joins: Haudegen (~quassel@91.114.49.10)
[18:28:16] *** Quits: mro (~mro@port-92-195-164-88.dynamic.as20676.net) (Remote host closed the connection)
[18:29:24] *** Joins: mro (~mro@port-92-195-164-88.dynamic.as20676.net)
[18:35:05] <d_bot> <octachron> It would be also slightly confusing to have `let` for methods and `val` for instance values.
[18:39:45] <companion_cube> isn't it because object types don't have values?
[18:39:56] <companion_cube> only methods
[18:42:49] <octachron> Object types only have methods, but I am not sure how that follow? Since `let` are not allowed at the toplevel of objects, rewriting `let` to `method` would work.
[18:43:21] <companion_cube> ah sure
[18:43:39] <companion_cube> but it's a good design decision, it's not the same as `let … in`
[18:43:46] <companion_cube> the bad decision was toplevel let :)
[18:43:47] *** Joins: spip (~bobo@37.169.59.118)
[18:47:02] *** Quits: mro (~mro@port-92-195-164-88.dynamic.as20676.net) (Remote host closed the connection)
[18:48:18] <hackinghorn> why when I see they define new types, its always "type t ="? why t?
[18:48:31] <companion_cube> it's a convention
[18:48:38] <companion_cube> like naming the first param `self` in python
[18:50:43] *** Joins: mro (~mro@port-92-195-164-88.dynamic.as20676.net)
[18:51:15] <octachron> `t` (as a shortcut for type) is the neutral name for new type, it convey the information that it is the main type of the module and that the type is intended to be referenced as `Module_name.t`.
[18:52:05] <octachron> Since expanding the name to `Module_name.module_name` is redundant.
[18:53:43] <hackinghorn> interesting, thankss
[18:54:24] <companion_cube> I wish people use `self` more in OCaml too :p
[18:54:33] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[18:54:41] *** Quits: mro (~mro@port-92-195-164-88.dynamic.as20676.net) (Remote host closed the connection)
[18:54:56] <Fardale> In which context do you want to see self?
[18:55:21] <hackinghorn> I sometimes name new types that have specific names and make things structural like in C/C++, do they do that in OCaml?
[18:55:58] <companion_cube> Fardale: (self:t)
[18:56:01] <companion_cube> almost always
[18:57:08] <hackinghorn> ah, I see they do that sometimes
[18:57:38] <Fardale> Hum, I don't understand, self refer to the object itself in python, I don't see how to apply it to ocaml
[18:59:37] <companion_cube> well, when you have a module with `type t = …`
[18:59:43] <companion_cube> most functions will take one parameter of type t
[18:59:49] <companion_cube> which is the one I usually call `self`
[18:59:51] <Corbin> Fardale: `self` comes from the language Self, an ancestor of Python and ECMAScript with prototypes and objects.
[19:03:16] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:10:45] <d_bot> <monk> odoc is pretty straightforward but has small rules here and there that affect output of generated documentation from my own experience with bespoke project layout, etc. can you be more specific with what might be wrong?
[19:11:36] <d_bot> <monk> i am hesitant to open source my current dumb little project but it does show how to use a decent amount of odoc for a beginner...
[19:16:03] *** Joins: mro (~mro@2002:5cc3:a458:0:54c1:6c40:6563:db81)
[19:20:05] <companion_cube> what does your project do? :)
[19:20:55] <d_bot> <monk> i'm just trying to put together a library that documents various algorithms and data structures in ocaml!
[19:21:27] <d_bot> <VPhantom> I bookmarked <https://ocaml.github.io/odoc/odoc_for_authors.html> and refer to it quite often.
[19:21:38] <d_bot> <monk> most of it will be taken from popular resources or adapted from texts like Pearls of Functional Algorithm Design by Bird
[19:22:08] <d_bot> <VPhantom> For code and data samples, `{[ ... ]}` and `{v ... v}` are especially handy.
[19:22:16] <d_bot> <monk> @joris this is an essential reference for odoc, i had it open all the time when first getting started
[19:22:59] <d_bot> <monk> im also trying to do things like showing mutable vs immutable implementations, something OCaml really shines at demonstrating
[19:23:10] <companion_cube> so, another stdlib? :D
[19:23:21] <d_bot> <VPhantom> 😛
[19:23:56] <d_bot> <monk> haha aaaaabsolutely not, no attempts at optimization will be made unless they're common to naive implementations  😆
[19:24:51] <d_bot> <monk> i had to talk myself out of re-using the implemented data structures across the library as an act of mercy/pragmatism to make sure i just get it done lol
[19:25:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:26:40] <d_bot> <monk> OCaml's capacity for mutability is obviously widely advertised, but i still find myself thinking it's undersold tbh
[19:27:38] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[19:27:39] <d_bot> <monk> it's Just Neat to see a mutable implementation right next to an immutable one
[19:29:08] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[19:32:13] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[19:35:18] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:40:50] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:43:55] <sleepydog> I'm trying to profile an OCaml program with linux `perf` and I'm wondering if/how tail calls are represented. Does anyone know if a tail call will add to the stack in a perf profile?
[19:44:32] <sleepydog> I'm assuming they won't, and that if I see a recursive function adding to the stack, it's not tail recursive
[19:44:47] <sleepydog> but i don't know if that's correct
[19:49:23] *** Quits: mbuf (~Shakthi@122.173.231.124) (Quit: Leaving)
[19:50:23] <d_bot> <monk> presumption is that since ocaml does have tail recursion and ocamlc will optimize for it (when it sees it), you will not see additional stack frames added when a given function/program recurses down
[19:51:09] <d_bot> <monk> for a given function that is in tail recursive form
[19:51:32] *** Quits: jlrnick (~josephler@2a01cb040a1594007dfc79c9afe919a1.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[19:53:21] <sleepydog> yea, that's what I thought, but I'm seeing a function i thought was tail recursive adding to the stack. so i guess i made a mistake with it. thanks!
[19:54:58] <d_bot> <monk> i don't want to lead you astray, maybe i don't know enough about ocaml's allocation strategy for handling recursive functions.
[19:55:44] <d_bot> <monk> at risk of being trite, you could try a basic program that runs `List.fold_left` (tail recursive) and `List.fold_right` (not tail recursive on some non-trivial input and see what perf shows you
[19:55:46] <sleepydog> i guess it's possible there's extra info in the perf profile, like a frame counter or something. i'm not *that* familiar with perf
[19:56:01] <sleepydog> that's a good idea
[19:57:14] <d_bot> <monk> > i guess it's possible there's extra info in the perf profile, like a frame counter or something. i'm not that familiar with perf
[19:57:15] <d_bot> <monk> yeah that was another suspicion that made me hesitant to speak further
[19:57:16] <d_bot> <monk> let us know!
[20:00:59] <octachron> Also for checking that a recursive call is in tail position, you can annotate it with `(f[@tailcall]) ... `
[20:01:38] <sleepydog> ah, i just read the function a bit closer and it's absolutely not a tail call :)
[20:02:01] <sleepydog> i focused too much on the signature and not the call site
[20:05:18] <d_bot> <monk> who amongst us
[20:05:32] <d_bot> <monk> that's a cool fact octachron...
[20:25:22] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:31:54] <d_bot> <boris> hi guys, why i need to use this?
[20:31:55] <d_bot> <boris> https://cdn.discordapp.com/attachments/436568060288172044/935580255069020231/unknown.png
[20:32:09] <d_bot> <boris> if i use [] -> [];; they return me empty list
[20:32:38] <d_bot> <boris> tag me when reply thx ❤️
[20:36:27] <d_bot> <orbitz> @boris  i think you can figure it out if you walk through it
[20:36:39] <d_bot> <NULL> If you follow the flow, you return nothing but what you push to the `[]` case, so if you return `[]` there that's what you're always going to get.
[20:36:39] <d_bot> <NULL> Note that you should match on `[]` instead of `_` to still get the exhaustivity check
[20:37:12] <d_bot> <boris> I see , tysm
[20:46:33] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[20:50:35] *** Quits: mro (~mro@2002:5cc3:a458:0:54c1:6c40:6563:db81) (Remote host closed the connection)
[20:52:42] *** Quits: bartholin (~bartholin@158.110.70.210) (Quit: Leaving)
[20:53:25] *** Joins: vicfred (~vicfred@user/vicfred)
[20:57:40] *** Quits: vicfred (~vicfred@user/vicfred) (Client Quit)
[21:03:26] *** Quits: kakadu (~kakadu@195.19.236.234) (Quit: Konversation terminated!)
[21:14:32] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:17:08] *** Joins: rgrinberg (~textual@187.223.115.174)
[21:36:00] *** Quits: gwizon (~gwizon@ool-457f6b92.dyn.optonline.net) (Quit: Lost terminal)
[21:41:06] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:45:34] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[21:46:42] *** Quits: rgrinberg (~textual@187.223.115.174) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:49:23] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[21:59:38] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[22:06:33] *** Joins: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt)
[22:06:45] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[22:07:09] <ouestbillie> ive been meaning to learn ocaml for a while, tried on and off but a good reference book is a must for me, can't find anything that looks decent on amazon
[22:07:18] <ouestbillie> real world ocaml looked decent but it's horribly out of data
[22:07:23] <olle> Huh?
[22:07:33] <olle> They are working on a new version, it's freely available online
[22:07:34] <ouestbillie> s/data/date
[22:07:51] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:07:59] <d_bot> <Anurag> There’s a new version available at https://dev.realworldocaml.org/
[22:08:05] <ouestbillie> oh, okay, still they rely on their jane street libraries no?
[22:08:38] <olle> Why do you need a good reference book, tho?
[22:09:47] <ouestbillie> just the way I learn, i go through a book to get a good mental map of the language and then start writing
[22:09:53] <d_bot> <Anurag> For print books, Beginning OCaml, and More OCaml by John Whitington are also excellent resources.
[22:10:03] <olle> But high level concepts don't change
[22:10:27] <ouestbillie> yeah I have the SML book, thought I'd start with that since thats as stable as it gets...
[22:11:21] <ouestbillie> i also don't want a book that spends 200 pages explaining folds and whatno, im interested in what makes ML languages what they are, mostly the type system and then Ocaml idiosyncracies...
[22:12:38] <olle> ouestbillie: Just hang out here :) I learned OCaml in this channel 10 years ago
[22:14:09] <ouestbillie> olle: good rec, i think imma do that
[22:14:38] <olle> RWO didn't exist then, tho
[22:14:48] <ouestbillie> just surprised theyre arent more references given how popular ocaml is getting, especially for everything compiler related
[22:15:14] <ouestbillie> (i wanna write one for chest hair lol)
[22:16:04] <d_bot> <monk> i would say use the cs3110 course if you want to learn fp and ocaml from first principles, more or less
[22:16:16] <d_bot> <monk> rwoc is if you don't care to understand what is happening per se, just want to get going with ocaml
[22:16:24] <d_bot> <monk> it's a good text, that is not a criticismm
[22:16:29] <ouestbillie> whynotboth.jpg
[22:16:43] <d_bot> <NULL> If you want to learn more through channels, Discord's #beginners has more beginner stuff going through (and also more advanced stuff)
[22:17:46] *** Quits: noddy_ (~user@user/noddy) (Quit: WeeChat 3.4)
[22:17:57] *** Joins: mro (~mro@port-92-195-164-88.dynamic.as20676.net)
[22:18:29] <ouestbillie> i mean, i have a decent grasp of FP, what interests me is like, you know, ml stuff, like how to use HM properly
[22:18:37] *** Joins: noddy (~user@user/noddy)
[22:19:09] <d_bot> <monk> i would suggest reading ch 1-5, 7-8 of cs31110 and anything you haven't learned at that point you'll pick up from rwoc or any other resource
[22:19:14] <d_bot> <monk> cs3110 also has the benefit of problem sets
[22:19:23] <d_bot> <monk> that are good and useful for review, comprehension
[22:19:36] <d_bot> <NULL> Re #beginners, I'm not saying it will be what interests you, but that will be more to pick from
[22:20:48] <d_bot> <monk> > i also don't want a book that spends 200 pages explaining folds and whatno, im interested in what makes ML languages what they are, mostly the type system and then Ocaml idiosyncracies...
[22:20:49] <d_bot> <monk> @ouestbillie cs3110 is good at doing precisely this
[22:21:04] <d_bot> <monk> https://cs3110.github.io/textbook/cover.html
[22:22:14] <d_bot> <monk> for each major lang feature of ocaml, the author quickly goes over the static and dynamic semantics of how they're interpreted by ocaml. it's very nice for understanding the logic of program execution in ocaml.
[22:22:47] *** Quits: mro (~mro@port-92-195-164-88.dynamic.as20676.net) (Remote host closed the connection)
[22:27:47] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:28:29] *** Quits: noddy (~user@user/noddy) (Quit: WeeChat 3.4)
[22:29:16] *** Joins: noddy (~user@user/noddy)
[22:32:48] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[22:34:31] *** Joins: mro (~mro@port-92-195-164-88.dynamic.as20676.net)
[22:38:27] *** Quits: noddy (~user@user/noddy) (Quit: WeeChat 3.4)
[22:39:17] *** Joins: noddy (~user@user/noddy)
[22:42:12] *** Quits: noddy (~user@user/noddy) (Client Quit)
[22:42:53] *** Joins: noddy (~user@user/noddy)
[22:58:38] *** Quits: mro (~mro@port-92-195-164-88.dynamic.as20676.net) (Remote host closed the connection)
[23:01:25] <d_bot> <joris> i know about it, thank you 🙂 it is pretty well written. The problem is i'm not getting started, i pulling hairs to maintain things that stopped working 😦
[23:02:14] <d_bot> <joris> and it seems that module synopsis are not attached when a ppx is involved, even on a fresh switch. So i assume it is a bug but i'm not sure, maybe it is specific to something i didn't realized
[23:03:04] <d_bot> <joris> this user manual is pretty good though
[23:13:42] <d_bot> <monk> rip, hope it gets figured out
[23:14:37] <d_bot> <monk> i wish odoc allowed for basic mathematical type setting but, outside of pulling in a large dependency, that's a problem i wouldn't wish upon most people lol
[23:24:35] <companion_cube> there's {^ and {_, whcih I had forgotten about
[23:25:37] *** Quits: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt) (Ping timeout: 240 seconds)
[23:27:41] *** Joins: ouestbillie (~gallup@193.138.218.214)
[23:29:17] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-188.dsl.bell.ca) (Ping timeout: 240 seconds)
[23:37:20] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-52-65-93-194-105.dsl.bell.ca)
