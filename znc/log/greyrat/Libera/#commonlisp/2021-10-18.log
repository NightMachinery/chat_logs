[00:03:01] *** Quits: rogersm (~rogersm@90.166.177.48) (Remote host closed the connection)
[00:04:03] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:22:48] <nature> Is there a way to change the permission bits of a UNIX file other than with (uiop:run-program "chmod something something") ?
[00:23:41] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[00:34:07] <varjag> nature: osicat?
[00:40:48] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[00:49:53] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 246 seconds)
[00:52:37] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[01:13:25] *** Joins: cjb (~cjb@user/cjb)
[01:13:39] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 265 seconds)
[01:16:24] *** Joins: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net)
[01:17:02] *** Joins: Skyfire (~pyon@user/pyon)
[01:17:15] <MichaelRaskin> nature: iolib/syscalls:chmod ?
[01:18:25] <MichaelRaskin> Also note, that when you do use command line tools, (uiop:run-program (list "chmod" "u+r" "filename.ext")) is better because no catches with spaces in filenames
[01:18:45] *** Joins: khrbt (~znc@user/khrbt)
[01:22:24] <fitzsim> it'd be nice if UIOP included osicat and/or iolib functions under the hood
[01:22:29] <fitzsim> e.g. for https://gitlab.common-lisp.net/asdf/asdf/-/issues/65
[01:23:45] <fitzsim> UIOP is supposed to be for this type of thing, but symlinks seem to be so difficult to deal with in CL
[01:24:15] <fitzsim> I guess permissions would be similarly difficult to wrap portably
[01:27:59] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 264 seconds)
[01:28:13] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[01:31:53] *** Quits: paule32 (~paule32@user/paule32) (Quit: Leaving)
[01:33:30] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[01:33:58] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[01:38:22] *** Joins: akoana (~ah@user/akoana)
[01:41:35] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Remote host closed the connection)
[01:44:06] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[01:50:16] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[01:56:18] <Xach> fitzsim: iolib and osicat make some tricky assumptions about the availability of either specific foreign libraries or the ability to run a C compiler
[01:59:00] *** Quits: gaqwas (~john@dynamic-095-115-020-193.95.115.pool.telefonica.de) (Ping timeout: 260 seconds)
[01:59:28] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Quit: Boom.)
[02:03:54] *** Joins: asarch (~asarch@2806:10ae:7:4d95:242d:86d4:c21f:7965)
[02:04:03] *** Quits: frgo (~frgo@p200300deef0cee00a5f2a706fd1ca151.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:04:32] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[02:07:47] <fe[nl]ix> you can't really have it any other way without being willing to hand-maintain struct and constant definitions
[02:10:55] *** Parts: asarch (~asarch@2806:10ae:7:4d95:242d:86d4:c21f:7965) ()
[02:17:49] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[02:18:25] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 265 seconds)
[02:19:41] <defaultxr> hi, is anyone aware of anything like py4cl or burgled-batteries but for interfacing with lua code instead of python? i'm considering attempting something along those lines but want to make sure there isn't prior art i'd be uselessly duplicating. neither cliki nor google seem to turn up any project that sounds relevant; the closest result is
[02:19:43] <defaultxr> https://stackoverflow.com/questions/48353172/calling-lua-from-common-lisp which basically just suggests C FFI as an option.
[02:20:39] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[02:21:34] <MetaYan> Xach: Had a look at the quicklisp Failure report and noticed that SBCL 2.1.7.62 is used. For example adw-charting compiles cleanly with SBCL 2.1.9.
[02:22:18] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[02:23:39] <defaultxr> ^in addition to my question, does anyone have any suggestions for libraries that might be of use in implementing such a thing?
[02:32:38] *** Joins: dra (~dra@2a04:4540:641d:1a00:bd3f:ca8:b71b:287)
[02:34:05] <hayley> mfiano: As far as I can tell, the bug in decentralise2 is due to a bad hash function, and the hash table trying to resize indefinitely. Not a fun combination.
[02:35:06] <hayley> With the feature :LOG-COPYING I get hundreds of messages all reading "Creating a 1048576 element storage vector Finished copying 29783 entries after 1.667e-2 seconds"
[02:40:35] <hayley> Though...the decentralise2 benchmark is pretty damn fast even with the segmented lock table. Guess I did something right.
[02:42:45] <hayley> One trick I could use would be to randomize the initial state of the hash function on each resize, to get a different key distribution, but I'd have to write all the hash functions myself, as no one does that.
[02:44:20] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[02:46:28] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[02:47:09] *** Joins: srhm (~srhm@user/srhm)
[02:48:19] *** Joins: dra_ (~dra@2a04:4540:6409:4e00:bd3f:ca8:b71b:287)
[02:51:29] *** Quits: dra (~dra@2a04:4540:641d:1a00:bd3f:ca8:b71b:287) (Ping timeout: 268 seconds)
[02:51:57] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:54:04] *** dra_ is now known as dra
[02:54:06] <Xach> MetaYan: i don't think so.
[02:54:17] <Xach> MetaYan: how are you compiling?
[02:57:00] <Xach> MetaYan: if you aren't compiling with warnings visible, it will seem like it works.
[03:00:02] <MetaYan> Xach: Alright, I understand now. ql:quickload passes, but asdf:load-system fails. Thanks.
[03:03:39] *** Quits: dra (~dra@2a04:4540:6409:4e00:bd3f:ca8:b71b:287) (Quit: Leaving)
[03:09:47] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[03:24:18] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[03:34:49] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[03:36:25] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[03:41:11] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[03:45:21] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:50:11] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Remote host closed the connection)
[03:50:52] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[03:51:18] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-102A-static.midco.net) (Ping timeout: 268 seconds)
[04:03:36] *** Joins: Bike (~Bike@71.69.170.70)
[04:03:36] *** ChanServ sets mode: +o Bike
[04:04:08] *** Joins: rogersm (~rogersm@90.166.177.48)
[04:08:37] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[04:09:23] *** Quits: rogersm (~rogersm@90.166.177.48) (Ping timeout: 264 seconds)
[04:11:12] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[04:13:36] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[04:14:53] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[04:14:56] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[04:15:31] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:23:03] <jcowan> Symbols aren't traditionately GCed, though there is no reason why they should not be if they don't have a value,  a function, or a non-nil plist.
[04:27:57] <hayley> Symbols are kept live from the package, I guess.
[04:33:26] *** Joins: Skyfire (~pyon@user/pyon)
[04:45:35] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[04:52:58] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:01:45] *** Joins: igemnace (~ian@user/igemnace)
[05:10:14] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[05:20:55] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 252 seconds)
[05:21:58] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[05:25:37] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Ping timeout: 265 seconds)
[05:26:35] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[05:30:13] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[05:30:36] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[05:41:04] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[05:46:57] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[05:51:59] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[05:58:18] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[06:00:59] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 264 seconds)
[06:02:47] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 246 seconds)
[06:05:09] *** Joins: rogersm (~rogersm@90.166.177.48)
[06:07:43] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:09:52] *** Quits: rogersm (~rogersm@90.166.177.48) (Ping timeout: 252 seconds)
[06:15:26] *** Joins: nature (~nature@45.32.235.173)
[06:30:46] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 252 seconds)
[06:31:07] <beach> Good morning everyone!
[06:31:37] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[06:33:28] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:34:40] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[06:34:57] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[06:38:26] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[06:38:29] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[06:42:35] <semz> Is there a local counterpart to deftype?
[06:43:21] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:44:33] <Bike> Nope
[06:45:09] <aeth> I think you can use symbol-macrolet
[06:45:23] <aeth> maybe it won't quite function the same way on edge cases
[06:49:37] <semz> Doesn't seem to work with declarations, unfortunately.
[06:50:54] <aeth> and there's an edge case
[06:50:58] <semz> heh
[06:51:45] <beach> semz: What do you need a type declaration for?
[06:54:03] <semz> Readability, mostly. It's (integer 0 foo), where foo is some (manually) computed constant I'd like to be able to change quickly.
[06:54:42] <beach> Put it in a comment then.
[06:56:18] <semz> Oh no, that's not what I meant. The type itself is used for optimization in various declarations, but I'd like to give it a name so that it can be easily changed, rather than writing (integer 0 18743218) everywhere.
[06:56:56] <beach> So it's to improve performance?
[06:57:27] *** Parts: akoana (~ah@user/akoana) ()
[06:58:07] <semz> I think there's some ambiguity about "type" vs "type specifier" here
[06:58:33] <aeth> why not use a DEFTYPE?
[06:58:46] <beach> Why declare the type at all?
[06:58:52] <semz> that's probably what I'll end up going with
[07:00:58] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[07:00:58] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[07:01:24] <semz> beach: It's number crunching, so there's a pretty big performance difference (~3x) when I can get away with fixnums
[07:01:50] <beach> So why not use FIXNUM?
[07:02:10] <semz> Because it's not necessarily a fixnum!
[07:02:15] <aeth> Personally, I like picking the smallest subset of fixnum and making it a type for numerical code.
[07:02:38] <beach> Then I would just let the implementation figure it out.
[07:02:41] <aeth> The compiler can help check some additional assumptions... and some optimizations would only apply if it can stay a fixnum, which very small integers can more easily do
[07:03:38] <aeth> s/the smallest subset of fixnum/the smallest subset of fixnum that the code can get away with using, usually rounded up to a power of two,/
[07:04:04] <beach> semz: You can use a trick we have used many times for other reasons.  You duplicate the code (in a macro obviously), so that the expansion is `(if (typep x 'fixnum) (progn ,@body) (progn ,@body))
[07:04:05] <aeth> For numerical code, anyway. Mostly they're floats, though
[07:04:48] <semz> beach: Oh hm, that's an idea too.
[07:04:53] <aeth> beach: I do that a lot, but usually with TYPECASE
[07:05:07] <beach> Sure, that works too.
[07:05:16] <aeth> even if there are only two branches, it just makes it clearer
[07:05:41] <beach> Sure.  In a macro, perhaps not quite as important.
[07:10:52] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[07:21:25] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[07:27:16] *** Quits: JeromeLon (~jerome@206.159.207.77.rev.sfr.net) (Ping timeout: 265 seconds)
[07:27:20] *** Quits: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df) (Quit: ERC (IRC client for Emacs 27.1))
[07:29:06] *** Joins: JeromeLon (~jerome@206.159.207.77.rev.sfr.net)
[07:30:13] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:34:20] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Quit: MichaelRaskin)
[07:36:27] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[07:43:51] *** Joins: semz (~none@user/semz)
[07:52:30] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[07:57:21] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[08:00:37] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[08:00:37] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (*.net *.split)
[08:00:37] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (*.net *.split)
[08:00:37] *** Quits: etiago (~etiago@user/etiago) (*.net *.split)
[08:00:37] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (*.net *.split)
[08:00:37] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (*.net *.split)
[08:00:50] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[08:00:54] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[08:01:09] *** Joins: lieven (~mal@ns2.wyrd.be)
[08:01:13] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[08:01:15] *** Joins: Shinmera (~shinmera@supersolid.equilibrium.tymoon.eu)
[08:01:21] *** Quits: Shinmera (~shinmera@supersolid.equilibrium.tymoon.eu) (Signing in (Shinmera))
[08:01:21] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[08:01:26] *** Joins: etiago (~etiago@user/etiago)
[08:11:07] *** Quits: Bike (~Bike@71.69.170.70) (Quit: sleep)
[08:22:39] *** Quits: cjb (~cjb@user/cjb) ()
[08:25:53] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[08:37:24] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[08:38:00] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[08:42:27] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[08:44:26] *** Joins: notzmv (~zmv@user/notzmv)
[08:51:22] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[08:54:55] *** Joins: notzmv (~zmv@user/notzmv)
[08:55:34] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[08:58:38] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[09:05:33] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[09:10:35] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[09:17:56] <opcode> what's considered idiomatic for mapcar'ing a function that takes an argument?  I.e. if I have a gargantuan list of strings and I want to apply (uiop:split-string) to them, what's the, um, "lispiest way" of doing that?  I guess I could just use (loop)?
[09:18:24] <opcode> mapcar seems so much cleaner though
[09:19:40] <opcode> I guess I could shove a lambda in there
[09:21:04] <beach> That, but LOOP is fine too.
[09:22:01] <beach> MAPCAR is fine if you already have the function defined, but becomes less convenient when you have to create an anonymous function.
[09:22:01] <opcode> i have this friend who thinks people who use LOOP are heathens but I rather like it lol
[09:22:19] <beach> Don't listen to everything people say.
[09:22:41] <beach> LOOP is part of the language.  So there is nothing "un-lispy" about it.
[09:22:45] <opcode> no of course not, i'm just interested in what's considered "idiomatic"
[09:22:50] <opcode> thanks.
[09:23:08] <beach> I don't know that one is more idiomatic than the other.
[09:23:23] <beach> What is said is just what I personally do.
[09:23:44] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[09:24:07] <opcode> yeah, I guess I was just wondering if there was a cleaner approach I hadn't considered.  I'm coming from C# and friends so I'm used to writing for/while loops like they're going out of style
[09:24:30] <opcode> anyways time to figure out why sly keeps crashing emacs
[09:24:46] <beach> Good luck.
[09:24:50] <White_Flame> opcode: where is your parameter coming from, and does it change per iteration step?
[09:25:23] <opcode> White_Flame: i'm splitting a series of strings from a CSV file, so it's always ","
[09:25:47] <opcode> as for where it's coming from, I'm just giving it a literal
[09:25:49] <White_Flame> ok, so (mapcar (lambda (str) (string-split ...)) big-list-o-strings)
[09:26:05] <opcode> yep that's about it
[09:26:07] <White_Flame> for this, I created do-mapcar, which combines the syntax of dolist with mapcar
[09:26:17] <opcode> oh, neat, I'll check that out
[09:26:27] <White_Flame> it's not posted anywhere, let me bring it up
[09:26:52] <opcode> may I suggest adding it to the lisp cookbook, which for someone like me is a great resource
[09:27:12] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[09:27:45] <White_Flame> hmm, that might be reasonable.  This is 15 lines with a few features
[09:28:49] <White_Flame> I also made do-hash, do-alist, do-plist to have inline bodies as well, syntactically avoiding the lambda form, but those don't collect results
[09:29:11] *** Joins: spiaggia (~user@2a01:cb19:150:3400:5c43:aab6:709f:3b4c)
[09:30:10] <White_Flame> my do-mapcar also supports skipping items, as well as creating multiple output list items for a sinlge input item, though without those it'd be tiny
[09:31:23] <White_Flame> (defmacro do-mapcar ((key-var &rest lists) &body body) `(mapcar (lambda (,key-var) ,@body) ,@lists))
[09:32:36] <White_Flame> (probably should be item-var instead of key-var, but whatever)
[09:33:18] *** Joins: paule32 (~paule32@user/paule32)
[09:35:09] <opcode> it sounds pretty awesome, you should definitely submit a PR to the lisp cookbook folks.  As for me I just shoved a lambda in there since my use case is fairly trivial, but I'll keep an eye out for do-mapcar
[09:35:31] <opcode> or rather keep it in mind
[09:35:44] <White_Flame> is the cookbook about creating utility functions or just direct usage patterns?
[09:36:00] <spiaggia> How about Alexandria?
[09:36:01] * White_Flame hasn't really used it
[09:36:18] <White_Flame> I don't think alexandria is about purely syntactic conveniences?  it's a deliberately conservative library
[09:36:35] <spiaggia> I take your word for it.
[09:37:07] <paule32> hello
[09:37:27] <paule32> White_Flame: what does this mean? in context - not good?
[09:37:31] *** Joins: frgo (~frgo@p200300deef0cee00a5f2a706fd1ca151.dip0.t-ipconnect.de)
[09:37:49] <White_Flame> it's just alexandria's stated scope, as to not be an unbounded kitchen sink library
[09:38:37] <paule32> i hope that lisp is supported in far away future
[09:39:21] <paule32> clisp seems be dead, sbcl ?
[09:39:42] <opcode> White_Flame: the cookbook is basically a repository of "good ways to achieve XYZ" for people like me who aren't familiar with the ecosystem.  You come from, say, Go where json parsers and http clients are built into the std library, and you want to know what a reasonably-popular library is without just googling around randomly, then you check the cookbook
[09:40:26] <opcode> I don't get the sense it's meant to be authoritative or definitive
[09:40:36] <opcode> but it beats stackoverflow
[09:40:44] * opcode shrugs
[09:41:18] <paule32> stackoverflow is a recruter more not, they are restriktive
[09:41:25] <paule32> my opinon
[09:41:30] <Nilby> If you find typing lambda's tedious, try my favorite macro: (defmacro _ (&rest exprs) `(lambda (_) (declare (ignorable _)) ,@exprs))
[09:45:05] <White_Flame> implicit params are kinda nasty though
[09:45:30] <White_Flame> (_ (1+ _)) vs (_ (x) (1+ x))
[09:45:39] <Nilby> for multi-arg lambdas one might as well just be clear and use named args
[09:45:47] <opcode> I try to avoid writing macros if at all possible, purely for my own sanity when it comes to the inevitable debugging phase
[09:46:03] <White_Flame> I like the dolist syntax, putting all the header stuff including params, then leaving the rest of the form for the body
[09:47:18] <paule32> i like progn
[09:47:46] <Nilby> I know I'm foolish, but I like implicit pararms. I sometimes wish the whole program was implicit.
[09:48:51] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[09:48:52] <paule32> you mean self contained code ?
[09:49:27] <hayley> 7 days before Nilby codes with De Bruijn indices only.
[09:49:51] *** Quits: frgo (~frgo@p200300deef0cee00a5f2a706fd1ca151.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[09:50:06] *** Joins: amb007 (~a_bakic@199.37.22.93.rev.sfr.net)
[09:50:23] <Nilby> hayley: Yes! I feel like that's how the universe works.
[09:50:39] <paule32> in context of "eval" - the javascript people have supported this as keyword, but nobody of them say that is good practise to use this
[09:50:55] <Nilby> Of course it's very tedious for us mortals
[09:52:30] <paule32> i wonder me, why it give so many ai models, but ai is essential easy, if you step behind the idea
[09:53:26] <paule32> like the universe - the sense of life - the sense is: "make love" - god say it "make love, and grow"
[09:55:11] <Nilby> except in pure lamdbas there are no numbers, so the indices are all lambdas too
[09:59:12] <hayley> No, the numbers are used in place of variable names. e.g. \x.\y.x is ..1
[09:59:14] <White_Flame> stating the essentials is easy, if you're speaking words to a human who already experiences the deep implication of the words.  But those statements are not fully self-explanatory and are not codable
[09:59:27] <White_Flame> regardless of language
[09:59:33] <hayley> Er, \.\.1 (assuming you count from 1)
[09:59:39] <White_Flame> and that's why natural language understanding is still not solved
[10:02:00] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[10:02:11] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 264 seconds)
[10:03:36] <Nilby> I wish people would realize AI is an oxymoron.
[10:06:09] <hayley> It's only artificial intelligence when it doesn't work.
[10:06:29] *** Joins: rogersm (~rogersm@90.166.177.48)
[10:06:43] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[10:11:11] *** Quits: rogersm (~rogersm@90.166.177.48) (Ping timeout: 264 seconds)
[10:12:54] *** Joins: rogersm (~rogersm@90.166.177.48)
[10:14:15] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[10:15:15] *** Joins: pve (~pve@188-67-203-167.bb.dnainternet.fi)
[10:17:44] *** Joins: pjb (~pjb@user/pjb)
[10:18:32] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[10:18:50] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 260 seconds)
[10:25:53] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 258 seconds)
[10:26:41] *** Joins: igemnace (~ian@user/igemnace)
[10:35:30] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[10:36:04] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[10:39:59] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[10:42:27] *** Quits: amb007 (~a_bakic@199.37.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[10:42:58] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[10:45:31] *** Joins: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de)
[10:46:05] *** Parts: spiaggia (~user@2a01:cb19:150:3400:5c43:aab6:709f:3b4c) (ERC Version 5.3 (IRC client for Emacs))
[10:46:09] *** Joins: Guest78 (~Guest78@159.48.53.191)
[10:46:11] *** Joins: frgo_ (~frgo@p200300deef0cee0045e9e5107b7b22f3.dip0.t-ipconnect.de)
[10:48:37] *** Joins: pjb (~pjb@user/pjb)
[10:49:41] *** Quits: frgo (~frgo@p200300deef0cee00a97268caa0334aae.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[10:50:04] *** Joins: gaqwas (~john@dynamic-077-009-020-130.77.9.pool.telefonica.de)
[10:53:46] *** pjb is now known as Guest4556
[10:56:35] *** Quits: Guest78 (~Guest78@159.48.53.191) (Quit: Client closed)
[10:56:43] *** Joins: pjb (~pjb@user/pjb)
[10:56:56] *** Quits: Guest4556 (~pjb@user/pjb) (Ping timeout: 258 seconds)
[10:57:34] <Duuqnd> So, I'm making a command-line program in CL (sinful, I know). Is there a way to replace SBCL's own command-line arguments without changing the C code? I kinda don't want SBCL's usage text to come up when a user wants help about my program.
[10:58:15] <hayley> You could change the toplevel function to your own, and have it detect --help and similar.
[10:58:39] <jackdaniel> Duuqnd: for somewhat systematic approach for building cli tool check out the library net.didierverna.clon
[10:59:02] <Duuqnd> What would I need to do in the toplevel to stop SBCL from using the arguments? Just change the posix-argv variable?
[10:59:18] <Duuqnd> jackdaniel: Thanks, I'll take a look
[10:59:23] <jackdaniel> https://www.lrde.epita.fr/~didier/software/lisp/clon.php
[10:59:36] <rotateq> there was also a newer article about that topic by Steve Losh
[10:59:38] <jackdaniel> there is a comprehensive manual etc etc
[11:01:08] *** pjb is now known as Guest1819
[11:02:11] *** Quits: Guest1819 (~pjb@user/pjb) (Ping timeout: 245 seconds)
[11:02:11] *** Joins: pjb (~pjb@user/pjb)
[11:02:37] <Duuqnd> Oh, it requires CFFI
[11:02:47] <Duuqnd> That seems a bit overkill for me
[11:03:23] <jackdaniel> it works without cffi, it is needed only when you expect colored output (if I remember correctly)
[11:03:26] <jackdaniel> for terminfo
[11:04:15] <Duuqnd> Ah, yeah I don't need colors
[11:04:25] *** Joins: prxq (~quassel@x4dbed57b.dyn.telefonica.de)
[11:04:55] <madnificent> Duuqnd: https://cliki.net/Unix%20shell%20scripting maybe of interest too
[11:06:38] <Duuqnd> madnificent: --script is nice and all, but I'm hoping to have my program just be an executable and work as is expected.
[11:07:26] *** Quits: dre (~dre@120.156.30.159) (Remote host closed the connection)
[11:07:35] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 264 seconds)
[11:11:31] <madnificent> certainly possible.  i vaguely remember having some scripts running on SBCL or ECL in binary form.  i'm fairly sure i didn't distribute them.  you could also start with a shebang and move to a binary later when you need it.
[11:12:06] <jackdaniel> madnificent: I've linked a library that automates all that in a systematic fashion, there is no need for a duct taping
[11:12:50] <jackdaniel> s/automates/abstracts away/
[11:14:45] <Duuqnd> I was reading some parts of the Clon source to try to figure it out and I saw a comment that reads (paraphrasing a bit) "When a standalone executable is dumped, [only user-level options being present is] always the case" but that doesn't seem to match what I'm experiencing.
[11:15:22] <madnificent> jackdaniel: yeah, it's mentioned on the cliki page too.  it was my impression that it felt too heavy right here.
[11:18:40] <pve> Duuqnd: If you use sb-ext:save-lisp-and-die, then you should provide your own toplevel function, like hayley suggested
[11:20:18] <Duuqnd> I'm doing that, yet when I type "--help" it's SBCL's usage message that shows up instead of mine.
[11:22:21] <jackdaniel> Duuqnd: I think that clon expects you to call a function clon:dump or something like that
[11:23:37] <Duuqnd> Ah, yes, it seems to use :save-runtime-options when calling save-lisp-and-die
[11:23:50] <pve> Duuqnd: ok, then you can also provide :save-runtime-options t
[11:24:03] <Duuqnd> Yeah, that what I'm going to do
[11:24:09] <pve> if you want to handle --help
[11:24:40] <pve> Duuqnd: oh, right, didn't see your message
[11:25:07] <Duuqnd> Well, guess I have what I was looking for. Thanks for the help, everyone.
[11:26:12] <pve> Duuqnd: for quick and dirty stuff I use https://github.com/pve1/apply-argv
[11:26:20] <pve> but clon seems much fancier
[11:28:23] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Quit: ERC (IRC client for Emacs 26.3))
[11:28:29] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:33:04] *** Joins: skeemer__ (~skeemer@h-158-174-23-142.NA.cust.bahnhof.se)
[11:33:20] *** Quits: skeemer (~skeemer@h-158-174-23-142.NA.cust.bahnhof.se) (Read error: Connection reset by peer)
[11:33:26] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: jemoka_ (~jemoka@user/jemoka) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: dbotton (sid492350@lymington.irccloud.com) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: jhi (sid81469@lymington.irccloud.com) (Ping timeout: 245 seconds)
[11:33:39] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[11:33:50] *** Joins: jhi (sid81469@id-81469.lymington.irccloud.com)
[11:34:00] *** Joins: jemoka (~jemoka@user/jemoka)
[11:35:06] *** Quits: markasoftware (~quassel@107.161.26.124) (Ping timeout: 245 seconds)
[11:35:20] *** Joins: markasoftware (~quassel@107.161.26.124)
[11:35:50] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:34] *** Joins: notzmv (~zmv@user/notzmv)
[11:38:07] *** Joins: pjb (~pjb@user/pjb)
[11:38:42] *** Joins: Krystof (~user@81.174.155.115)
[11:38:47] *** Quits: gaqwas (~john@dynamic-077-009-020-130.77.9.pool.telefonica.de) (Ping timeout: 264 seconds)
[11:39:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:41:08] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[11:46:38] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[11:47:02] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:57:44] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:07:18] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[12:12:00] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[12:37:28] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[12:37:42] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:39:56] *** Joins: lukego (sid312033@lymington.irccloud.com)
[12:42:36] *** Quits: winning-luser (~winning-l@2601:8c1:181:1340::e50f) (Quit: zzz)
[12:51:09] *** Joins: tfb (~tfb@88.98.95.237)
[12:51:24] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[12:59:08] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:00:10] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[13:01:14] *** Joins: cosimone (~user@93-47-231-95.ip115.fastwebnet.it)
[13:07:45] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[13:08:57] *** Parts: lukego (sid312033@lymington.irccloud.com) ()
[13:13:33] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[13:19:36] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[13:37:39] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:37:46] *** Joins: amb007 (~a_bakic@231.37.22.93.rev.sfr.net)
[13:53:18] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[14:00:23] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[14:00:23] *** Quits: amb007 (~a_bakic@231.37.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:00:52] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:03:06] *** Quits: frgo_ (~frgo@p200300deef0cee0045e9e5107b7b22f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:03:37] *** Joins: frgo (~frgo@p200300deef0cee0045e9e5107b7b22f3.dip0.t-ipconnect.de)
[14:10:36] *** Quits: frgo (~frgo@p200300deef0cee0045e9e5107b7b22f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:21:46] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 245 seconds)
[14:25:24] *** Quits: nckx (~nckx@tobias.gr) (Quit: ♪ It's the most wonderful time of the year 🎃)
[14:26:54] *** Joins: frgo (~frgo@p200300deef0cee0045e9e5107b7b22f3.dip0.t-ipconnect.de)
[14:37:00] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:38:16] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:39:02] *** Joins: nckx (~nckx@tobias.gr)
[14:40:40] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[14:40:42] *** Joins: heisig (~heisig@p200300cbcf2bc60096e45cc594e9a02c.dip0.t-ipconnect.de)
[14:45:42] *** Quits: heisig (~heisig@p200300cbcf2bc60096e45cc594e9a02c.dip0.t-ipconnect.de) (Quit: Leaving)
[14:49:06] *** Quits: frgo (~frgo@p200300deef0cee0045e9e5107b7b22f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:49:15] *** Joins: frgo (~frgo@p200300deef0cee0045e9e5107b7b22f3.dip0.t-ipconnect.de)
[15:10:02] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[15:10:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:17:19] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:42:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[15:42:56] *** Joins: hendursa1 (~weechat@user/hendursaga)
[15:43:38] *** Joins: Bike (~Glossina@71.69.170.70)
[15:43:38] *** ChanServ sets mode: +o Bike
[15:45:17] *** Joins: random-nick (~random-ni@87.116.178.206)
[15:49:15] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[15:52:16] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[15:57:38] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 260 seconds)
[16:04:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:04:27] *** Quits: random-nick (~random-ni@87.116.178.206) (Read error: Connection reset by peer)
[16:04:33] *** Joins: random-nickname (~random-ni@87.116.178.206)
[16:07:26] *** Quits: random-nickname (~random-ni@87.116.178.206) (Client Quit)
[16:08:59] *** Joins: random-nick (~random-ni@87.116.178.206)
[16:12:38] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:59a6:cb38:6d37:7205)
[16:21:27] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[16:25:40] *** Joins: totoro (~totoro@user/totoro)
[16:41:00] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[16:41:08] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[16:41:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[16:42:38] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:46:12] <JeromeLon> I want to find, remove, and return the first element of a vector that matches a predicate. DELETE is *so* close, but it doesn't return it. I could FIND and DELETE, but that's duplicating the work. The only solution I found is POSITION, followed by (DELETE-IF (lambda (x) t) seq :start position :end (1+ position)). This last bit gives me nausea. Can anyone suggest something less ugly?
[16:47:02] <JeromeLon> (I do know that delete does not garantee that my original vector contains the result)
[16:49:02] *** ChanServ sets mode: -o Bike
[16:49:25] <Bike> i suppose i would do position, then make-sequence/make-array, then replace twice
[16:49:33] <Bike> then put that all in a function so it doesn't look ugly, ofc
[16:50:43] <Bike> should be pretty much the most efficient way to go about it
[16:53:00] *** Joins: patrice (~patrice@user/patrice)
[16:53:44] <JeromeLon> Bike: thanks! And thanks for suggesting replace, I'll use it instead of the DELETE, to change the original vector, it brings several improvements
[16:54:00] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[16:54:58] *** Joins: nature (~nature@45.32.235.173)
[17:00:39] *** Joins: raeda (~raeda@72.49.219.33)
[17:01:35] *** Quits: JeromeLon (~jerome@206.159.207.77.rev.sfr.net) (Ping timeout: 264 seconds)
[17:16:41] <Krystof> (defun find-remove-and-return (vector predicate) (let (result) (delete-if vector (lambda (x) (when (funcall predicate x) (setq result x) t)) :count 1))) ;?
[17:16:52] <Krystof> + return result
[17:19:38] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[17:19:51] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Goodbye :D)
[17:28:49] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[17:33:18] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 258 seconds)
[17:33:39] *** Joins: aartaka (~aartaka@5.1.53.225)
[17:35:52] <Shinmera> Colleen: look up array-utils vector-pop-position
[17:35:52] <Colleen> Function array-utils:vector-pop-position https://shinmera.github.io/array-utils#FUNCTION%20ARRAY-UTILS%3AVECTOR-POP-POSITION
[17:36:11] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:37:08] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:48:34] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[17:49:02] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[17:49:38] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 260 seconds)
[17:49:54] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:55:00] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[18:00:17] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:08:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:15:11] *** Joins: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df)
[18:27:13] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:6480:8fb4:66e9:57c0:8a0a)
[18:27:21] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[18:29:41] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[18:31:34] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 258 seconds)
[18:35:00] *** Joins: JeromeLon (~jerome@185.201.63.254)
[18:38:23] <JeromeLon> Shinmera: Thanks! I feels like a basic need, indeed. I see why you need this lib in several projects
[18:39:27] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[18:40:16] <Shinmera> not covered by the docs, but it also has a * variant that is O(1), but changes order of elements.
[18:42:15] *** Quits: JeromeLon (~jerome@185.201.63.254) (Quit: WeeChat 3.0.1)
[18:46:04] *** Demosthe1ex is now known as Demosthenex
[18:51:59] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 264 seconds)
[18:56:10] *** Joins: heisig (~heisig@p200300cbcf2bc60096e45cc594e9a02c.dip0.t-ipconnect.de)
[19:02:24] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[19:14:03] <dieggsy> A while ago I think someone suggested a way to create a graph of class structure/inheritance - does anyone have any ideas? Allegro's composer has a utility for this, but it seems to crash on Emacs for macos (without X11). We have some custom method that user graphviz, but I'm wondering if there's a more straightforward or portable way
[19:15:42] <beach> dieggsy: The CLIM listener of McCLIM can do that.
[19:16:28] <beach> As I recall, it's a command that starts with comma, like ,show-class-subclasses and ,show-class-superclasses
[19:16:33] <beach> Something like that.
[19:17:27] <dieggsy> Ah, I think that was it. i'll check that out, thanks
[19:17:34] <beach> Sure.
[19:17:49] <beach> The #clim participants might know more.
[19:25:34] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:27:42] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[19:28:47] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[19:31:07] *** Joins: domovod_ (~domovod@176.196.122.197)
[19:34:41] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 245 seconds)
[19:36:44] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 258 seconds)
[19:37:10] *** Joins: amb007 (~a_bakic@247.37.22.93.rev.sfr.net)
[19:41:31] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[19:43:00] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[19:44:20] *** Lord_of_Life_ is now known as Lord_of_Life
[19:45:10] *** Quits: heisig (~heisig@p200300cbcf2bc60096e45cc594e9a02c.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[19:54:09] *** Quits: domovod_ (~domovod@176.196.122.197) (Quit: WeeChat 3.3)
[19:55:59] *** Quits: cosimone (~user@93-47-231-95.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[19:58:27] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[20:07:42] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[20:10:56] *** Quits: amb007 (~a_bakic@247.37.22.93.rev.sfr.net) (Ping timeout: 245 seconds)
[20:11:44] *** Joins: amb007 (~a_bakic@67.104.204.77.rev.sfr.net)
[20:12:12] <lucerne> Can I use CL from other languages, such as Python or Perl?
[20:13:36] <lucerne> (I guess that would be much faster than using some form of IPC, such as ZeroMQ?)
[20:21:20] <beach> That would depend a lot on the implementation of both Common Lisp and that other language.
[20:22:14] <lucerne> beach: Perl and Python both have one canonical implementation AFAI, and I am open to using any (free) CL, though I prefer SBCL.
[20:22:15] *** Quits: amb007 (~a_bakic@67.104.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[20:23:20] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:23:37] <mfiano> A quick search suggests heisig's cl4py is the way
[20:25:35] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Ping timeout: 264 seconds)
[20:25:53] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[20:27:53] *** Joins: robin (~robin@user/terpri)
[20:36:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:42:05] <lucerne> Mfiano: Thanks. Anything for Perl?
[20:43:25] <mfiano> Doubtful for Perl or Raku
[20:43:52] <lucerne> Is ECL usable for this purpose?
[20:44:18] <Xach> lucerne: out of curiosity, what kind of functionality in CL do you want to access?
[20:56:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:56:31] <lisp123> https://www.youtube.com/watch?v=exM1uajp--A
[20:56:54] <Bike> please post descriptions of links you post if their content is not obvious from the url
[20:56:55] <lisp123> Need Common Lisp to take over Apple Silicon!
[20:57:04] <lisp123> Apple Live Event Sorry
[20:57:06] <lucerne> Xach: I currently just want a language (any language) that I can code once in, and use it anywhere. CL is one of the nicest langs I know, so I wanted this main lang to be CL. I guess I’d go with zig now.
[20:57:32] <Bike> Thanks
[20:58:03] <Xach> lucerne: the easiest way to do that is to become important enough at a company or other organization that you can dictate technical details.
[20:58:26] <Xach> it is harder to make CL interoperate with the technical decisions imposed externally
[20:58:57] <lucerne> I actually want this for my own personal projects.
[20:59:06] <Xach> Oh, then you can simply use CL and be done!
[20:59:22] <lucerne> Perl is nicer for what I have in mind.
[21:00:25] <lucerne> But I do not want to duplicate some basic functionality between CL and Perl and others. I can’t afford that, being just one person 😄
[21:00:55] <Xach> I've been pretty happy simply ditching perl and using CL for everything, but it is a personal choice.
[21:01:15] <Xach> It's hard for me to imagine perl being a good choice for me for anything any more.
[21:01:16] <mfiano> Raku (formerly Perl 6) might be worth looking into, as it has a lot in common with CL, but this is off-topic here.
[21:02:27] <copec> Everyone should just implement their language by embedding it in CL
[21:03:10] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:957f:a01:11a7:c746)
[21:08:06] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:b42:b12f:77fa:6b88)
[21:11:22] <copec> It feels like there is an exponential explosion of new languages in the last 10 years
[21:13:20] <lisp123> copec: All inferior to Common Lisp ;)
[21:17:33] <lucerne> Mfiano: Raku’s performance is inferior to perl5 though, isn’t it?
[21:17:47] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:6480:8fb4:66e9:57c0:8a0a) (Ping timeout: 264 seconds)
[21:17:57] <mfiano> This isn't on topic here.
[21:19:04] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Remote host closed the connection)
[21:22:48] <edgar-rft> there's #lispcafe for not-so-on-topic things :-)
[21:22:52] <pjb> lucerne: you can use libecl.so and dynamically link it into any program, to use Common Lisp.
[21:27:37] <pjb> lucerne: but if you're afraid of the work, you can still avoid duplication by having two programs, one in perl and one in common lisp, and communicating thru a pipe or sockets.
[21:39:02] <stacksmith> copec: there is an exponential explosion in everything in the last 10 years...
[21:39:36] <stacksmith> Good morning everyone
[21:39:44] <greyrat> Good morning!
[21:39:53] <greyrat> It's actually night here :))
[21:40:55] <jcowan> on IRC, it's morning when you join / start talking, and night when you leave / stop talking.
[21:41:15] <stacksmith> indeed.
[21:48:33] <jcowan> much more useful than solar or civil time
[21:50:49] <pjb>  /clear`
[21:51:13] <stacksmith> only if you don't really care about what time it is...
[21:51:31] <stacksmith> does anybody really care...
[21:55:22] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[21:57:03] *** Joins: aeth (~aeth@user/aeth)
[22:00:39] *** Quits: stacksmith (~stack@pool-108-29-7-131.nycmny.fios.verizon.net) (Quit: WeeChat 2.8)
[22:01:42] *** Joins: stack_ (~stack@pool-108-29-7-131.nycmny.fios.verizon.net)
[22:15:29] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[22:16:13] <pjb> lisp123: well, I said that :around et al. are better reserved to client code, but actually this has a problem: if the client code adds a :around method on one of your class, this will also be called for other subclasses of yours, in other client libraries.
[22:16:36] <pjb> lisp123: so even client code may want to refrain adding methods on classes or subclasses that are not its own.
[22:16:58] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[22:17:12] <lisp123> pjb: I see. I earlier thought you had meant to use it to avoid changing any interfaces for the client
[22:17:46] <lisp123> But that's an interesting problem (given inheritance)
[22:18:01] <pjb> What those method do, is to wrap behavior in the right position even for subclasses provided by the client.
[22:18:36] <pjb> Always keep this picture https://pablofernandez.tech/wp-content/uploads/2011/08/common-lisp-method-composition.png
[22:19:04] <pjb> or this equivalent one: https://upload.wikimedia.org/wikipedia/commons/4/43/Method-combination.png
[22:19:31] <lisp123> Thanks, I've saved both
[22:20:28] <pjb> Using the principle of adding methods only on your own classes seems better to me.
[22:20:35] <lisp123> It does seem to get complicated pretty fast
[22:20:59] *** Joins: stacksmith (~stack@ctrl-c.club)
[22:21:05] <lisp123> Fortunately I only code for myself, so I will just stick to standard primary methods :)
[22:21:36] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[22:21:42] *** Quits: stack_ (~stack@pool-108-29-7-131.nycmny.fios.verizon.net) (Quit: WeeChat 2.8)
[22:22:19] *** Quits: xaotuk (~xaotuk@89.110.231.41) (Ping timeout: 268 seconds)
[22:23:39] *** Joins: xaotuk (~xaotuk@89.110.231.41)
[22:27:50] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:b42:b12f:77fa:6b88) (Quit: Konversation terminated!)
[22:29:34] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:31:55] *** Quits: xaotuk (~xaotuk@89.110.231.41) (Ping timeout: 258 seconds)
[22:32:39] <pjb> lisp123: https://termbin.com/nnjl
[22:33:10] <pjb> lisp123: notice the cm and mc example (m is a "mixin", and depending on the order it's in the superclasses list, the order of the methods called.
[22:33:44] *** Joins: gaqwas (~john@dynamic-077-009-020-130.77.9.pool.telefonica.de)
[22:33:56] *** Joins: xaotuk (~xaotuk@89.110.231.41)
[22:34:21] <pjb> lisp123: notice also with the cm example, the importance of (when (next-method-p) (call-next-method)) even in the inner primary method (in the superclass).
[22:36:29] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[22:38:07] <pjb> lisp123: or https://termbin.com/ncjd
[22:38:17] <lisp123> pjb: Thanks! Reading through now
[22:38:26] *** Quits: xaotuk (~xaotuk@89.110.231.41) (Ping timeout: 258 seconds)
[22:38:53] <lisp123> How did you get the formatting like that?
[22:39:17] <pjb> hand indented.
[22:39:31] <pjb> We could have written code for it, but since it's one-shot.
[22:40:13] *** Joins: xaotuk (~xaotuk@89.110.231.41)
[22:40:21] <lisp123> Ah nice. This will be a very useful reference, thanks for sharing
[22:40:31] <lisp123> (and writing of course)
[22:41:09] <pjb> termbin pastes die after one month, so copy them and save them out.
[22:41:18] <lisp123> Already done :D
[22:43:57] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[22:46:18] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:46:50] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:47:50] *** Quits: xaotuk (~xaotuk@89.110.231.41) (Ping timeout: 260 seconds)
[22:49:30] *** Joins: xaotuk (~xaotuk@89.110.231.41)
[22:50:59] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[22:53:46] *** Quits: xaotuk (~xaotuk@89.110.231.41) (Ping timeout: 258 seconds)
[23:00:23] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:02:06] *** Joins: xaotuk (~xaotuk@89.110.231.41)
[23:08:47] *** Quits: xaotuk (~xaotuk@89.110.231.41) (Ping timeout: 264 seconds)
[23:10:15] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[23:10:24] *** Joins: xaotuk (~xaotuk@89.110.231.41)
[23:11:05] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[23:11:27] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[23:12:07] <xaltsc> Hey, is there a "Common Lisp for the Schemer" somewhere ? All the guides/tutorials I've found are either too basic or too advanced...
[23:12:49] <lisp123> xaltsc: Which ones have you tried so far?
[23:13:56] <lisp123> I would think Practical Common Lisp would be perfect for a Schemer because they already understand the basics of Lisp, but not sure if you think its too advanced. If so, ANSI Common Lisp, which is a bit easier to read, might be sutiable
[23:14:13] <xaltsc> the ones listed at https://nyxt.atlas.engineer/learn-lisp
[23:14:58] <lisp123> https://github.com/lisp-books/lisp-books --> try ANSI Common Lisp from there
[23:15:12] <lisp123> (I assume you read PCL and thought it was too advanced, since its on your list)
[23:15:54] <xaltsc> I guess what I want is how to translate scheme idoms to clisp ones, like (define fun (lambda [arg] (...))) is just (defun fun [arg] (...))
[23:16:40] <xaltsc> lisp123: I've found it more verbose than advanced
[23:17:25] <lisp123> You can try this cheat sheet if you want something to the point: https://github.com/ashok-khanna/lisp-notes
[23:17:43] <Alfr> xaltsc, you can't, e.g. tail call optimization isn't mandated and some implementations might exhaust the stack; also no call/cc.
[23:17:55] *** Quits: xaotuk (~xaotuk@89.110.231.41) (Ping timeout: 258 seconds)
[23:18:52] <lisp123> xaltsc: Unfortunately (I can get your perspective now), I can't think of anything that would be perfect for you. You might need to just bite the bullet and read through PCL
[23:18:54] <xaltsc> Alfr: my entry in the clisp world would only be nyxt configuration right now, so I don't have to worry about this kind of stuff
[23:19:15] <xaltsc> I just remembered https://learnxinyminutes.com/docs/common-lisp/ exists
[23:19:43] *** Joins: xaotuk (~xaotuk@89.110.231.41)
[23:19:49] <Alfr> xaltsc, oh, okay. :)
[23:25:37] *** Joins: akoana (~ah@user/akoana)
[23:25:55] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:26:23] *** Joins: srhm (~srhm@user/srhm)
[23:35:26] *** Quits: xaotuk (~xaotuk@89.110.231.41) (Ping timeout: 260 seconds)
[23:37:02] *** Joins: xaotuk (~xaotuk@89.110.231.41)
[23:41:47] *** Quits: xaotuk (~xaotuk@89.110.231.41) (Ping timeout: 264 seconds)
[23:43:19] *** Joins: xaotuk (~xaotuk@89.110.231.41)
[23:52:19] <jcowan> I found PCL very readable, but I'm an odd case because I wrote CL (in anger) about the same time I learned Scheme (from reading the Rabbit compiler, which is written in Scheme and Maclisp).  I never returned to CL after that except to update myself, but got involved in Scheme much more so.
[23:56:41] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:58:11] <jcowan> beach: Of course you can define away "unlispy CL features" by saying "Everything in CL is lispy".  But if you look at how people actually use the term, they seem to focus on `format` as the most unlispy feature, followed by `loop` and CLOS in that order.
[23:58:30] <White_Flame> CLOS is considered unlispy?
[23:58:57] <jcowan> I agree about `format`, think `loop` could have been designed better but the idea was a good one.
[23:59:03] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[23:59:37] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[23:59:51] <lisp123> White_Flame: Seems like there is two eras of Lisp - The ones before format / loop / CLOS and the ones after it
