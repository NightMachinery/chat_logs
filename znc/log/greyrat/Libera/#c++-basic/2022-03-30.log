[00:02:27] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:03:54] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:d87:b69c:9abb:443f)
[00:03:54] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:d87:b69c:9abb:443f) (Changing host)
[00:03:54] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:08:13] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[00:15:32] *** Quits: AssKoala (~asskoala@user/asskoala) (Read error: Connection reset by peer)
[00:16:27] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[00:16:27] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[00:16:27] *** Joins: AssKoala (~asskoala@user/asskoala)
[00:16:36] *** Quits: dgcampea (~dgc@user/dgcampea) (Remote host closed the connection)
[00:24:34] *** Joins: dgcampea (~dgc@user/dgcampea)
[00:38:11] *** Joins: Tazy (~Tazmainia@2001:1c02:170a:4000::1013)
[00:47:55] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[00:48:16] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:d87:b69c:9abb:443f)
[00:48:16] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:d87:b69c:9abb:443f) (Changing host)
[00:48:16] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:57:01] *** Quits: MetaNova (~zero-one@znc/supporter/metanova) (Ping timeout: 240 seconds)
[00:59:34] *** Joins: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com)
[01:01:48] *** Quits: Jeegh (~brute@176.33.66.185) (Remote host closed the connection)
[01:06:22] *** Joins: MetaNova (~zero-one@znc/supporter/metanova)
[01:08:25] *** PJBoy is now known as Guest7580
[01:08:25] *** Quits: Guest7580 (~PJBoy@user/pjboy) (Killed (strontium.libera.chat (Nickname regained by services)))
[01:08:38] *** Joins: PJBoy (~PJBoy@user/pjboy)
[01:09:53] *** Joins: asocialblade (~qsl@user/asocialblade)
[01:20:53] *** Quits: asocialblade (~qsl@user/asocialblade) ()
[01:22:51] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:25:57] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:28:35] *** Quits: jsbach (~jsbach@2a01:c23:6468:3200:42e8:59db:f661:f100) (Ping timeout: 260 seconds)
[01:37:28] *** Quits: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com) ()
[01:42:53] *** Joins: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com)
[01:49:25] *** Joins: markong (~kvirc@213.146.188.203)
[02:08:46] *** Joins: seninha (~seninha@user/seninha)
[02:19:38] *** Joins: asocialblade (~qsl@static.16.62.161.5.clients.your-server.de)
[02:19:38] *** Quits: asocialblade (~qsl@static.16.62.161.5.clients.your-server.de) (Changing host)
[02:19:38] *** Joins: asocialblade (~qsl@user/asocialblade)
[02:31:56] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:e2ee:41b5:ffb9:13e6:417e)
[02:40:47] *** Quits: mimorek (~mimorek@2a02:a463:6d13:1:8a22:4d45:1db4:6da) (Read error: Connection reset by peer)
[02:52:22] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 272 seconds)
[02:57:11] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:e2ee:41b5:ffb9:13e6:417e) (Remote host closed the connection)
[02:57:30] *** Joins: duude__- (~duude__@user/duude/x-4676560)
[02:57:43] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:e2ee:41b5:ffb9:13e6:417e)
[02:57:45] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Ping timeout: 252 seconds)
[02:58:23] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[02:58:31] *** duude__- is now known as duude__
[03:04:39] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[03:05:18] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:e2ee:41b5:ffb9:13e6:417e) (Ping timeout: 260 seconds)
[03:08:42] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:e2ee:41b5:ffb9:13e6:417e)
[03:21:59] *** Quits: calcul0n (~calcul0n@2a01:e0a:150:6030:7d85:9901:c4f9:1225) (Ping timeout: 256 seconds)
[03:23:56] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:e2ee:41b5:ffb9:13e6:417e) (Remote host closed the connection)
[03:55:04] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 272 seconds)
[03:56:08] *** Quits: Tazy (~Tazmainia@2001:1c02:170a:4000::1013) (Ping timeout: 260 seconds)
[04:05:03] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[04:05:39] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[04:25:10] *** Quits: AmR (~AmREiSa@102.44.191.208) (Quit: Konversation terminated!)
[05:06:19] *** Joins: xiongxin (~Thunderbi@117.136.39.215)
[05:08:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[05:09:26] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:21:25] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:15c6:4ddf:5787:908a:a748)
[05:24:16] *** Quits: xiongxin (~Thunderbi@117.136.39.215) (Read error: Connection reset by peer)
[05:24:16] *** xiongxin1 is now known as xiongxin
[05:31:47] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:1ff2:e03a:2456:5ccc:3d7b)
[05:33:46] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 246 seconds)
[05:35:43] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:15c6:4ddf:5787:908a:a748) (Ping timeout: 256 seconds)
[05:36:08] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:1ff2:e03a:2456:5ccc:3d7b) (Ping timeout: 252 seconds)
[05:37:14] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:2469:bba4:9099:ef70:f70f)
[05:41:43] *** Quits: str0 (~str0@178.220.28.32) (Remote host closed the connection)
[05:50:28] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:17:17] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:2469:bba4:9099:ef70:f70f) (Ping timeout: 260 seconds)
[06:23:54] *** Joins: Inline (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de)
[06:26:19] *** Quits: Inline__ (~Inline@p200300cd470f690069ffd8a9e8710708.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:38:26] *** Joins: Firecatmon (~firecatmo@pa49-195-113-89.pa.nsw.optusnet.com.au)
[06:38:47] *** Joins: xiongxin (~Thunderbi@117.136.39.221)
[07:06:19] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:a39:e6f5:9d58:2466:b9f0)
[07:09:16] *** Quits: xiongxin (~Thunderbi@117.136.39.221) (Ping timeout: 260 seconds)
[07:09:16] *** xiongxin1 is now known as xiongxin
[07:10:10] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:441:afa9:b5e8:ac51:4870)
[07:13:53] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:a39:e6f5:9d58:2466:b9f0) (Ping timeout: 260 seconds)
[07:14:35] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:441:afa9:b5e8:ac51:4870) (Ping timeout: 252 seconds)
[07:15:15] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:20f2:ac8a:be5c:57a6:5a94)
[07:39:03] *** Joins: xiongxin1 (~Thunderbi@117.136.39.219)
[07:42:39] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:20f2:ac8a:be5c:57a6:5a94) (Ping timeout: 256 seconds)
[07:42:40] *** xiongxin1 is now known as xiongxin
[07:47:55] *** Joins: xiongxin1 (~Thunderbi@117.136.40.173)
[07:51:43] *** Quits: xiongxin (~Thunderbi@117.136.39.219) (Ping timeout: 260 seconds)
[07:52:34] *** Quits: xiongxin1 (~Thunderbi@117.136.40.173) (Ping timeout: 272 seconds)
[07:52:39] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:3065:2e43:1e0a:ae80:c245)
[07:53:07] *** Joins: xiongxin1 (~Thunderbi@117.136.40.178)
[07:57:03] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:3065:2e43:1e0a:ae80:c245) (Ping timeout: 260 seconds)
[08:02:04] *** Quits: xiongxin1 (~Thunderbi@117.136.40.178) (Ping timeout: 272 seconds)
[08:26:59] *** Joins: seninha (~seninha@user/seninha)
[08:54:37] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[08:56:55] *** Quits: hsv-2 (~weechat@gateway/tor-sasl/hsv-2) (Ping timeout: 240 seconds)
[08:57:16] *** Joins: hsv-2 (~weechat@gateway/tor-sasl/hsv-2)
[10:10:44] *** Joins: Mat_42 (~mat_42@178.238.166.29)
[10:11:53] *** Quits: Mat_42 (~mat_42@178.238.166.29) (Client Quit)
[10:22:38] *** Joins: xiongxin (~Thunderbi@117.136.40.175)
[10:28:30] *** Joins: calcul0n (~calcul0n@2a01:e0a:150:6030:7d85:9901:c4f9:1225)
[10:37:52] *** Quits: xiongxin (~Thunderbi@117.136.40.175) (Ping timeout: 272 seconds)
[11:16:22] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[11:16:54] *** Joins: jsbach (~jsbach@2a01:c22:a54f:c100:d5c3:6724:cc4:1ce3)
[11:17:18] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[11:27:01] *** Joins: jtm85 (~jtm@ool-457dd05e.dyn.optonline.net)
[11:28:25] <jtm85> Hello, I found this code in Bjarne Stroustrup's book, and I feel it is erroneous (not syntactically, but rather issues with the desired result):http://codepad.org/2ZYpir1E
[11:29:06] <jtm85> Am I reading this wrong? I notice that he is double dipping with Point delta, and he should be resetting that variable after update_display().
[11:30:29] <jtm85> The book the code is from is:Â  A Tour of C++ (Second Edition)
[11:46:46] *** Quits: Firecatmon (~firecatmo@pa49-195-113-89.pa.nsw.optusnet.com.au) (Remote host closed the connection)
[11:49:09] *** Joins: Firecatmon (~firecatmo@pa49-195-113-89.pa.nsw.optusnet.com.au)
[11:55:21] <osse> jtm85: it looks weird to me, too
[11:55:52] <osse> but since move() is called with current+delta, I suppose move() takes an absolute position as argument, and if so it doesn't really matter
[12:07:32] <Raziel> jtm85, delta is reset in there
[12:07:39] <Raziel> by virtue of being a local variable inside a loop v:
[12:08:23] <Raziel> it's recreated as 0,0 every time, since it's not static nor is there anything else to suggest it saves
[12:09:44] <osse> Raziel: it's inside the while, but not inside the for
[12:10:19] <Raziel> osse, some indentation would've been fekkin nice eh
[12:10:26] <Raziel> either way, doesn't look like that would matter, yeah
[12:13:00] <Raziel> it does seem problematic like that
[12:13:13] <Raziel> either it should only move and update once, in the while loop, not in the for
[12:13:32] <Raziel> or... it should reset that?
[12:14:04] <osse> I'm starting to think it's intentional
[12:14:12] <osse> with move() taking an absolute position
[12:14:27] <osse> it makes sense to update_display() and move() many times to show some "progress"
[12:14:48] <Raziel> I guess. Would probably clear it up if we knew where/when current was being updated
[12:15:27] <osse> I do NOT disagree
[12:16:28] <Raziel> also, current+delta*scale as an operation is very liberal considering one is a struct and the other two are... unknown type. but I guess we can assume what it does quite easily, at least
[12:18:59] <osse> jtm85 needs to photograph/scan a couple of pages of the book
[12:30:30] <jtm85> Sorry for the bad indentation
[12:30:39] <jtm85> http://codepad.org/ywiSWYfC
[12:32:26] <jtm85> osse, I think it is assumed that current is the current position. It probably is assumed that current is updated inside move(), as it if isn't it would not reflect the current position at a later usage.
[12:33:06] <osse> if current is updated inside move() then nothing makes sense :O
[12:33:07] <jtm85> current is probably a Point, and scale is likely some scalar value.
[12:33:28] <jtm85> Well if you move, you need to update the current position, right?
[12:33:53] <Raziel> yeah, but if you do that every time you move in that for loop, you are indeed double-dipping with the delta
[12:33:53] <jtm85> Otherwise current becomes outdated
[12:34:18] <Raziel> and yes, that's what I assume for current and scale, but for all I know operator+ on Point could just print a trollface
[12:34:25] <jtm85> delta implies a change on current, a delta on current.
[12:34:26] <Raziel> so, yknow, ymmv
[12:34:44] <jtm85> yeah it could be :)
[12:35:09] <jtm85> This is a sample from the book for something quite basic, he describes it as a way to move around in a video game.
[12:35:48] <jtm85> Since current is not declared in the local scope, it can be modified by another function (like move).
[12:36:03] <Raziel> you're gonna have a bad time when you realize that the usual "delta" arg in a videogame system/method is actually delta time since last frame, and not the delta between two points
[12:36:07] <Raziel> but anyway, that aside
[12:36:15] <Raziel> this is still potentially borked
[12:36:46] <jtm85> I think he just forgot to reset the delta variable, or he forgot to move the declaration into the loop.
[12:36:55] <jtm85> The first iteration it works as expected!
[12:36:59] <osse> there is too little context to tell, for me
[12:37:22] <jtm85> That shouldn't be the case though
[12:37:26] <Raziel> it would also definitely work as expected if your input string (act) is 1 char long every time
[12:37:33] <Raziel> assuming current is updated somewhere v:
[12:37:46] <jtm85> yeah, but he does a foreach on the string.
[12:37:58] <Raziel> yeah, which doesn't matter if the length is 1 :p
[12:38:02] <jtm85> So he is aware that it can be greater than 1.
[12:38:08] <Raziel> one would assume so
[12:38:36] <jtm85> delta looks like it is a change on current.
[12:38:48] <jtm85> Whatever is passed into move updates current to that new position.
[12:39:00] <jtm85> But maybe I'm crazy, maybe it doesn't do that.
[12:39:06] <Raziel> if that is the case, and current is updated in move, then yeah, it's borked
[12:39:13] <jtm85> He surely implies it does.
[12:39:25] <jtm85> based on his description of it and the naming of the variables
[12:40:27] <Raziel> I mean, you could write out the assumed implementation of move() and the few other support stuff needed and see, but you don't really have to
[12:41:01] <osse> is it this one? https://raw.githubusercontent.com/Kikou1998/textbook/master/A%20Tour%20of%20C%2B%2B%20(2nd%20Edition)%20(C%2B%2B%20In-Depth%20Series).pdf
[12:41:04] <jtm85> Move probably is just taking in a new position and setting current to it.
[12:41:09] <jtm85> Yes that book
[12:41:21] <jtm85> I didn't want to link illegal content :)
[12:41:31] <Raziel> idk fam, it's on github, must be legit
[12:41:40] <jtm85> true
[12:41:41] <Raziel> more so than most of my linux ISOs, surely
[12:41:43] <osse> the book itself has too little context to tell if it makes sense
[12:42:29] <Raziel> is that example seriously just there to show off a switch statement?
[12:42:32] <Raziel> |:
[12:42:37] <jtm85> "As an example, consider an overly clever, yet primitive, parser
[12:42:37] <jtm85> for a trivial command video game:"
[12:42:38] <osse> it only makes sense to me if current is not updated inside move(), and in that case if you provide several actions, then you will see your character move to the destination tile by tile or pixel by pixel or whatever
[12:42:41] <jtm85> yeah... it's strange
[12:42:47] <osse> ie. an animation
[12:42:51] <jtm85> I have no idea why I am reading these sections lol
[12:43:21] <jtm85> I just figured I'd relearn C++ again
[12:43:32] <Raziel> and people ask me why I don't learn from books
[12:43:34] <Raziel> oof
[12:43:42] <jtm85> yeah, I like examples tbh
[12:44:08] <jtm85> Yes, current can't be updated in move() for it make sense, but then what does move actually do? Why update the screen?
[12:44:40] <jtm85> Maybe update uses some other variable that move modifies
[12:44:54] <jtm85> I guess that's possible, but then what's the point of current?
[12:44:59] <Raziel> you're looking into it harder than the author ever did
[12:45:25] <jtm85> I could make a bald joke here, but based on recent events, I'll pass.
[12:45:37] <Raziel> since this was just a thing to illustrate switch case, everything around it was just a wispy abstraction of what a game loop could maybe look like, roughly
[12:45:41] <Raziel> lol
[12:45:51] <jtm85> very roughly
[12:46:02] <jtm85> But so far that's how he has been treating things
[12:46:07] <jtm85> This is not a beginner book
[12:46:18] <jtm85> It's more like "oh yeah, you know C++ already, but I am going to show you this anyway"
[12:47:14] <jtm85> He goes from teaching switch(s) to having a function take a vector reference...
[12:47:23] <jtm85> I mean that's not your typical pattern in teaching
[12:48:04] <jtm85> Actually, that one teaches an if statement...
[12:48:11] <jtm85> He went from switch to if
[12:48:19] <Raziel> he also says "Donât panic! All will become clear in time;"
[12:48:29] <Raziel> so, I guess just carry on :^)
[12:48:44] <jtm85> Shouldn't "if" be the first logical statement to teach people?
[12:49:09] <Raziel> probably
[12:49:24] <jtm85> well, I'll carry on
[12:49:31] <jtm85> Hopefully I get to something I can learn here
[12:49:50] <jtm85> I actually did just learn "auto"
[12:50:05] <jtm85> I'm from C++98
[12:50:20] <Raziel> welcome to C++-past-11, it's better, mostly.
[12:50:23] <Raziel> moooostly.
[12:50:42] <jtm85> Last time I seriously coded in C++ was 2008.
[12:51:03] * Raziel ctrl+fs for inline
[12:51:45] <jtm85> I did OpenGL coding at the time, implementing the continuum crowds algorithm from Washington University.
[12:51:52] <Raziel> well, there is one passing mention of inline variables being a thing that exists
[12:51:55] <jtm85> Auto seems neat though
[12:51:56] <Raziel> I guess it could be worse
[12:52:01] <jtm85> Also const_expr is new for me too
[12:52:12] <Raziel> just constexpr, there's no _ in there
[12:52:13] <Raziel> :p
[12:52:19] <jtm85> oh ok ok
[12:52:20] <jtm85> I see :)
[12:52:24] <jtm85> yes without underscore
[12:52:27] <jtm85> I just learned it!
[12:52:44] <jtm85> The underscore felt natural there
[12:53:34] <Raziel> stdlib seems to like underscores just fine, C++ itself not so much
[12:53:49] <jtm85> For the dude who made C++, I feel like his coding style is rough at times.
[12:54:03] <jtm85> He must just not give any f*cks.
[12:54:26] <Raziel> which parts of the style disagree with you?
[12:54:29] <jtm85> yeah, I'm a stdlib type of guy, more like C with mixing in some C++, the old wrong way I guess?
[12:55:01] <Raziel> I mean, use whatever naming conventions you want, as long as they're mostly consistent 
[12:55:15] <jtm85> for (auto i=0; i!=10; ++i)
[12:55:20] <jtm85> I don't like i!=10
[12:55:30] <jtm85> I'd probably do i != 10
[12:56:01] <jtm85> if (âp==x)
[12:56:08] <jtm85> I guess that's fine
[12:56:21] <Raziel> naw, if the first one's not fine the second isn't either
[12:56:24] <Raziel> consistencyyyy
[12:56:37] <jtm85> I don't think he is consistent
[12:56:53] <jtm85> actually maybe he is
[12:56:58] <jtm85> if (auto n = v.siz e()) {
[12:57:03] <jtm85> He likes to space out assignment
[12:57:10] <jtm85> but comparatives he lacks space
[12:57:49] <jtm85> In the for loop he doesn't space his int i = 0:Â  for (int i=0; i!=s; ++i)
[12:58:00] <jtm85> But what bothers me is in previous examples he used auto for int
[12:58:04] <jtm85> but now he decided to use int
[12:58:08] <Raziel> yeah, I dunno. I think both are easier to visually parse with spaces, but maybe he disagrees :p
[12:58:39] <jtm85> I mean I don't mind the lack of space too much, but it harder to read in this book.
[12:58:46] <jtm85> for (int i=0; i!=s; ++i)
[12:59:00] <jtm85> if (peâ>t == num)
[12:59:03] <jtm85> he spaces here
[12:59:18] <jtm85> yeah, he doesn't care it seems lol
[12:59:32] <Raziel> I'm guessing he wrote pretty much all the code in there by hand and didn't have an IDE or such to make the style consistent :p
[12:59:40] <Raziel> coupled with not giving much of a fuck, of course
[12:59:58] <jtm85> yeah, what a swell dude, at least he made a nice language
[13:00:10] <Raziel> lol
[13:00:23] <jtm85> I just think people code way nicer than him
[13:00:42] <jtm85> I had high expectations!
[13:01:00] <jtm85> if (answer == 'y')
[13:01:00] <Raziel> I haven't seen any of his *actual* code, really. I'd imagine he gives more of a fuck then :p
[13:01:08] <jtm85> another spacing
[13:01:24] <Raziel> since with these tiny snippets/examples, they're just there to illustrate something specific, not necessarily to be clean, or work, or whatever
[13:01:27] <jtm85> yeah but this is the book to teach people.... you'd think he'd be a bit more consistent and courteous
[13:02:02] <jtm85> this is the type of shit I saw from the 70 year old professor I had was was going senile back in college.
[13:02:24] <Raziel> if it's not really meant for beginners there's even less reason to bother that much with those niceties :p
[13:02:35] <jtm85> true true :)
[13:02:39] <Raziel> cause non-beginners can just look past those while calling you a fuckwit
[13:02:44] <jtm85> Ok ok, I'll stop complaining and learn from this bald dude
[13:03:02] <Raziel> while beginners may actually get confused or such
[13:03:14] <jtm85> This book definitely would make a beginner very confused
[13:03:21] <Raziel> or, god forbid, learn bad practices or bad style. :p
[13:03:54] <jtm85> lol
[13:04:27] <jtm85> I remember years ago hearing that the source code of Plan 9 was the the gold standard for C style coding.
[13:05:01] <jtm85> They do really weird funky function declarations
[13:05:12] <Raziel> I remember years ago many people thought you coded C++ by doing the exact same things as in C, but making everything a class instead
[13:05:56] <jtm85> hey! That's me!
[13:06:00] <jtm85> jk jk
[13:06:05] <jtm85> But more or less not kidding
[13:06:12] <jtm85> Hence reading this book
[13:06:26] <jtm85> I saw the style where they put the return type as a separate line
[13:06:29] <jtm85> for the function
[13:06:34] <Raziel> I prefer making everything namespaces rather than classes, but I drank too much of my own koolaid
[13:06:37] <jtm85> void
[13:06:37] <jtm85> main() {
[13:06:39] <jtm85> Something like that
[13:06:44] <Raziel> jtm85, delet dis
[13:06:52] <jtm85> Can't :(
[13:06:56] <Raziel> rip
[13:07:05] <jtm85> it's too disgusting to look at
[13:07:08] <jtm85> in very sense
[13:07:11] <jtm85> every*
[13:07:24] <Raziel> imagine that, but with the { on a newline too
[13:07:35] <Raziel> actually, don't, unless you have a vomit bag ready
[13:07:37] <jtm85> I'm trying to find it, I think it was in the Plan9 source code
[13:07:47] <jtm85> The "gold standard" of C programming style
[13:08:17] <Raziel> style is subjective anyway, but yeahhhh
[13:08:42] <jtm85> https://9p.io/sources/plan9/sys/src/libdraw/bezier.c
[13:08:45] <jtm85> Here enjoy this
[13:08:48] <Raziel> also, I'm sure people had shittier smaller monitors back then. can't fit all that many columns of text on em and all that.
[13:08:59] <jtm85> I'm sure that's the reason
[13:09:05] <jtm85> Maybe? lol
[13:09:23] <jtm85> Throw up
[13:09:33] <Raziel> some of the function signatures are really damn long, so it just might be
[13:09:42] <Raziel> and ofc then you have to do that to every function, for consistency
[13:10:03] <jtm85> yeah, maybe that's why, but like... many return ints
[13:10:14] <jtm85> That's only a 4 character savings (including the space)
[13:10:29] <jtm85> is it worth it?
[13:10:39] <Raziel> yeahhh. maybe they think the return type is easier to visually parse if it's on its own on a line? I dunno
[13:10:53] <jtm85> no idea, but this is "gold standard"
[13:11:08] <jtm85> So who am I to judge?
[13:11:30] <Raziel> 9 out of 10 dentists recommend the plan9 coding style
[13:11:30] <jtm85> Some of these files were modified last in 2013...
[13:11:41] <jtm85> https://9p.io/sources/plan9/sys/src/libdraw/
[13:11:53] <jtm85> They could have refactored out of that shitty style
[13:12:27] <jtm85> https://9p.io/sources/plan9/sys/src/libdraw/arith.cÂ  Oh... that... that... log2 array
[13:12:35] <jtm85> oh god, why not space that out?!
[13:12:38] <Raziel> why would they? especially if it's the same people working on it too
[13:13:05] <jtm85> That array was the perfect opportunity to take advantage of their new lines
[13:13:14] <Raziel> 4 /* BUG */
[13:13:16] <Raziel> beautiful
[13:13:17] <jtm85> lol
[13:13:30] <jtm85> They had no idea breaking up drawld2chan
[13:13:31] <Raziel> also, feels like something like that should be const?
[13:13:35] <Raziel> but fuck if I know what they use it for
[13:13:51] <jtm85> no idea lol
[13:14:01] <jtm85> Â was used by libmemlayer/line.c; made static, instead of deleting it,
[13:14:04] <jtm85> they do say actually!
[13:14:27] <jtm85> But... why....? just... ugh...
[13:14:41] <jtm85> Plan 9 I think was an operating system Bell Labs was making
[13:14:43] <jtm85> That obviously failed
[13:15:22] <Raziel> it's technically still in use and actively developed
[13:15:29] <Raziel> but not for anything noteworthy
[13:15:32] <jtm85> I wonder who actually use it?
[13:15:33] <jtm85> uses*
[13:15:41] <jtm85> Themselves?
[13:16:11] <jtm85> https://upload.wikimedia.org/wikipedia/commons/e/e6/Plan_9_Fourth_Edition_rio_interaction_screenshot.png
[13:16:20] <jtm85> People are really going to use this in 2022?
[13:16:51] <Raziel> I dunno, I still see some POSes in some places using DOS
[13:16:59] <Raziel> and in this case, POS means both point of sale and piece of shit
[13:17:08] <jtm85> lol, I'm sure it does
[13:17:37] <Raziel> so, I wouldn't be all that shocked
[13:17:55] <jtm85> OHH it was Succeeded!
[13:18:09] <jtm85> Plan 9 was replaced with Inferno
[13:18:21] <jtm85> https://upload.wikimedia.org/wikipedia/commons/d/d5/Inferno_4th_Edition.png
[13:18:34] <Raziel> named after the state of being in which people who are using it are trapped in?
[13:18:34] <jtm85> Last release was 2015
[13:18:41] <jtm85> lol, yes, exactly
[13:19:15] <jtm85> They got their MIT license in 2021!
[13:19:36] <jtm85> "Inferno was based on the experience gained with Plan 9 from Bell Labs"
[13:19:38] <jtm85> I'm sure it was!
[13:20:26] <jtm85> Well I'm done complaining lol
[13:20:31] <jtm85> Thanks for the awesome chat :)
[13:21:04] <Raziel> well, have fun with the cplusplusies, feel free to stick around too :p
[13:21:06] <jtm85> Updated 2021-12-18!!! https://bitbucket.org/inferno-os/
[13:21:29] <jtm85> I'll idle until I accidentally close the browser tab
[13:22:06] <Raziel> feel free to re-open it when that happens
[13:22:07] <Raziel> :^)
[13:22:20] <jtm85> I will! :)
[13:23:09] <Raziel> also, if you ever need to work with renderers again but don't feel like using openGL directly again, lemme know so I can shill bgfx to you
[13:23:14] <Raziel> lol
[13:24:16] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:3108:281:eecd:3097:6246)
[13:28:59] <jtm85> Awesome! Thank you :)
[13:44:31] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:50:28] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:04:07] *** Joins: Tazy (~Tazmainia@2001:1c02:170a:4000::1013)
[14:23:15] *** Joins: seninha (~seninha@user/seninha)
[14:24:36] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:3108:281:eecd:3097:6246) (Ping timeout: 240 seconds)
[15:12:02] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[15:13:10] *** Joins: seninha (~seninha@user/seninha)
[15:21:19] *** Joins: markong (~kvirc@213.146.188.203)
[15:45:17] *** Joins: xiongxin (~Thunderbi@117.136.40.175)
[15:45:48] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:4df:bfcf:ac49:3089:d900)
[15:47:52] *** Quits: Khoyo (~khoyo@user/khoyo) (Quit: ZNC 1.8.2 - https://znc.in)
[15:48:26] *** Joins: Khoyo (~khoyo@user/khoyo)
[15:49:39] *** Quits: xiongxin (~Thunderbi@117.136.40.175) (Read error: Connection reset by peer)
[15:50:19] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:4df:bfcf:ac49:3089:d900) (Ping timeout: 250 seconds)
[15:53:57] *** Quits: jsbach (~jsbach@2a01:c22:a54f:c100:d5c3:6724:cc4:1ce3) (Ping timeout: 256 seconds)
[15:57:57] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:134a:aa8c:6c91:412d:d4e6)
[16:21:29] *** Joins: Guest69 (~Guest69@ip72-199-239-162.sd.sd.cox.net)
[16:33:45] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:36:55] *** Quits: Guest69 (~Guest69@ip72-199-239-162.sd.sd.cox.net) (Quit: Connection closed)
[16:40:41] *** Joins: vnf (~vnf@46.159.151.228)
[16:42:07] <vnf> I am trying to install gtk-4.6.2
[16:42:07] <vnf> what I get: /opt/custom/bin/gio-querymodules: symbol lookup error: /opt/custom/bin/gio-querymodules: undefined symbol: g_module_open_full
[16:42:07] <vnf> FAILED: install script '/opt/custom/bin/gio-querymodules /opt/custom/lib/x86_64-linux-gnu/gtk-4.0/4.0.0/printbackends' exit code 127, stopped
[16:42:12] <vnf> Can I solve this?
[16:46:43] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:134a:aa8c:6c91:412d:d4e6) (Ping timeout: 260 seconds)
[16:57:27] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:2fae:e7bf:4539:f0df:f823)
[17:00:47] *** Joins: jsbach (~jsbach@2a01:c22:a54f:c100:73ba:ea8d:354e:db27)
[17:12:02] *** Joins: xiongxin1 (~Thunderbi@117.136.40.190)
[17:15:18] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:2fae:e7bf:4539:f0df:f823) (Ping timeout: 260 seconds)
[17:15:18] *** xiongxin1 is now known as xiongxin
[17:19:43] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[17:28:31] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:170d:f1be:16dc:459f:3aa5)
[17:30:25] *** Quits: xiongxin (~Thunderbi@117.136.40.190) (Ping timeout: 250 seconds)
[17:30:26] *** xiongxin1 is now known as xiongxin
[17:32:43] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[17:34:34] *** Joins: markong (~kvirc@213.146.188.203)
[18:12:48] <Alipha> jtm85: c++11 has added A LOT. move semantics, smart pointers, lambdas, ... And "modern c++" is quite a bit different than "c with classes". And Tour of C++ expects previous programming experience, regarding "make a beginner very confused".
[18:19:55] *** Joins: seninha (~seninha@user/seninha)
[18:33:02] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[18:40:26] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 252 seconds)
[18:49:18] *** Quits: Firecatmon (~firecatmo@pa49-195-113-89.pa.nsw.optusnet.com.au) (Ping timeout: 250 seconds)
[18:51:34] *** Joins: vnf_ (~vnf@46.159.151.228)
[18:55:47] *** Quits: vnf (~vnf@46.159.151.228) (Ping timeout: 260 seconds)
[18:56:50] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:170d:f1be:16dc:459f:3aa5) (Ping timeout: 260 seconds)
[18:57:18] *** Joins: seninha (~seninha@user/seninha)
[19:43:34] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 246 seconds)
[19:45:05] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:20:13] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[20:55:40] *** Quits: Tazy (~Tazmainia@2001:1c02:170a:4000::1013) (Quit: Leaving)
[21:07:54] *** Joins: Inline__ (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de)
[21:08:22] *** Quits: Inline (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[21:08:54] *** Quits: Jmtrix (~qed@user/jmtrix) (Ping timeout: 260 seconds)
[21:10:57] *** Joins: Jmtrix (~qed@2604:180:2:72d::497d)
[21:10:57] *** Quits: Jmtrix (~qed@2604:180:2:72d::497d) (Changing host)
[21:10:57] *** Joins: Jmtrix (~qed@user/jmtrix)
[21:23:27] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[21:44:20] <jtm85> Alipha That's awesome about those features.
[21:48:08] *** Joins: Tazy (~Tazmainia@2001:1c02:170a:4000::1013)
[21:52:43] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 246 seconds)
[21:59:44] *** Joins: magla (~gelignite@55d42a76.access.ecotel.net)
[22:05:13] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[23:13:23] *** Joins: kenantu (~kenanmara@user/kenanmarasli)
[23:20:20] *** Joins: linext (~linext@pool-173-63-46-155.nwrknj.fios.verizon.net)
[23:30:33] *** Joins: seninha (~seninha@user/seninha)
[23:39:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
