[00:01:31] *** Quits: informatiko (~informati@dynamic-077-180-118-060.77.180.pool.telefonica.de) (Quit: leaving)
[00:02:37] *** Quits: u0_a391 (~u0_a391@2600:380:5a76:77cf:b9d2:8551:d9ed:1473) (Ping timeout: 240 seconds)
[00:03:37] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[00:07:09] *** Joins: sebag (~guest@91.245.82.2)
[00:07:36] *** Joins: u0_a391 (~u0_a391@2600:380:5800:5482:d223:a8dd:c3aa:191)
[00:09:37] *** Joins: monkey_ (~user@190.104.116.153)
[00:09:59] *** Joins: gnoo (gnoo@user/gnoo)
[00:12:17] *** Quits: u0_a391 (~u0_a391@2600:380:5800:5482:d223:a8dd:c3aa:191) (Ping timeout: 240 seconds)
[00:13:35] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 1.6)
[00:16:17] *** Joins: sebag (~guest@91.245.82.2)
[00:18:06] *** Quits: sebag (~guest@91.245.82.2) (Client Quit)
[00:22:11] *** Joins: rgrinberg (~textual@2806:101e:7:def:9c0d:c444:6765:d1db)
[00:22:44] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (Quit: ZNC 1.8.2 - https://znc.in)
[00:22:46] *** Joins: u0_a391 (~u0_a391@2600:380:5915:d831:fc92:eed4:1a51:6f71)
[00:22:55] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[00:24:02] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[00:24:39] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Quit: Konversation terminated!)
[00:24:57] *** Quits: morte_ (~user@190.56.51.233) (Ping timeout: 240 seconds)
[00:26:31] *** Joins: katp32 (~katp32@S010680ea96e8dbba.vc.shawcable.net)
[00:26:58] *** Joins: sebag (~guest@91.245.82.2)
[00:27:43] <katp32> heyo, is it possible to define main() in a dynamically linked library rather than in the program itself? odd question I know
[00:29:13] <clarity> I don't see why not, but that's rather OS specific
[00:30:16] <katp32> doesn't appear to work on linux, it causea a segfault in libc. I guess the answer is "no"; was just wondering if anyone knew a way to massage it into working, but it's a bit pointless anyways
[00:33:37] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:34] *** Quits: UsbSick (~UsbSick@2600:6c48:757f:e654:a863:efc5:fd1:1de4) (Remote host closed the connection)
[00:35:28] *** Joins: Rounin (~david@84.212.130.215)
[00:35:31] <katp32> nevermind, it works fine, the issue was caused by something else apparently (which I've not figured out yet...)
[00:36:55] <ioxzev1z> katp32, what is your thought process for that? Very curious
[00:37:35] <ioxzev1z> I assumed that main had to exist in the program, but everything else could be dynamically linked
[00:39:41] <clarity> The linker runs before main
[00:39:56] <clarity> In principle it needn't give a crap where main comes from as long as it's there after everything is loaded
[00:40:06] <ioxzev1z> Right, but if main() is the main body of the program how does it make sense to have it as a DLL?
[00:40:18] <clarity> It doesn't matter
[00:40:29] <clarity> That's just aonther file with code in it
[00:40:41] <ioxzev1z> fwiu main is the entry point, but if you load it dynamically I assume that other programs will also do that, otherwise if it's just one program why not keep main() inside it?
[00:41:43] <ioxzev1z> If you dynamically link main, and ./a.out, how does a.out run?
[00:42:03] <ioxzev1z> s/and/and then/
[00:42:16] <Xgc> ioxzev1z: Well, C operates within something called an "abstract machine".  The notion of a real CPU doesn't exist.  It's mostly immaterial to the discussion of C.  Now behavior of a specific implementation may depend on a CPU or other environmental detail.  But the language doesn't require that. That statement, along with others, in LCTHW are based on misunderstandings.
[00:42:17] <clarity> The same way it always runs
[00:42:57] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[00:43:55] <ioxzev1z> clarity, sure, I get that part, but as I understand it, main() _is_ the program
[00:44:03] <Xgc> ioxzev1z: The author likes to arrive at improper conclusions based on observed behavior of a particular implementation.
[00:44:04] <clarity> Main is just another function
[00:44:25] <clarity> From persprective of the C standard, yes, it is "the program"
[00:44:45] <clarity> From perspective of a practical implementation, it's just another symbol and code in a code segment somewhere
[00:44:56] <ioxzev1z> clarity, so you would have the program start with pre-main() calls, then dynamically link to main(), then call main(), which then calls other stuff?
[00:45:04] <clarity> Yes
[00:45:07] *** u0_a391 is now known as Kit
[00:45:33] <ioxzev1z> clarity, which then brings my bigger question, what is the point? What do you gain from dynamically linking main() ?
[00:45:33] <clarity> ioxzev1z: That's what happens under the hood anyway in a dynamically linked program
[00:45:55] *** Parts: wielding (~wielding@user/wielding) ()
[00:48:02] *** Quits: mahmutov (~mahmutov@37.155.50.102) (Ping timeout: 252 seconds)
[00:48:08] *** Quits: goepsilongo (~goepsilon@2806:263:c404:8000:1841:9986:6b2b:10e6) (Quit: Textual IRC Client: www.textualapp.com)
[00:51:01] <Xgc> clarity: Create your own main2 symbol that is dynamically resolved.  Call that from your main entry point.  That avoids any startup issues related to main.  Remember, this is only an issue with hosted environments.  Standalone environments might not have/use main.
[00:52:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:52:12] <Xgc> katp32: That was really meant for you.
[00:53:42] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[00:53:48] <clarity> meow
[00:54:16] *** Quits: AmR (~AmREiSa@156.199.236.68) (Quit: Konversation terminated!)
[00:56:42] <ioxzev1z> clarity, ^
[00:57:08] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[00:58:04] *** Quits: rgrinberg (~textual@2806:101e:7:def:9c0d:c444:6765:d1db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:58:09] <clarity> what?
[00:58:44] <ioxzev1z> "which then brings my bigger question, what is the point? What do you gain from dynamically linking main() ?"
[00:58:59] <clarity> I don't know, I don't see why there needs to be a point
[00:59:29] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 256 seconds)
[00:59:39] <clarity> If anything, I'd ask what's there to be gained from making main somehow so special that you can't link it like you can link everything else
[01:00:07] <ioxzev1z> clarity, I didn't say to make it special as such, just curious about use-cases for dynamically linking main
[01:01:49] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[01:02:00] <katp32> ioxzev1z: libraries are linked in before main() is called, so it shouldn't matter. indeed, it appears to work fine, on linux at least (the actual issue was an array bounds overflow that gdb wasn't being helpful about for some reason)
[01:02:43] <ioxzev1z> katp32, what is your use for linking main dynamically?
[01:03:45] <ioxzev1z> s/usr/reason/
[01:04:00] *** Joins: Viewday11 (~Viewday@user/viewday)
[01:04:31] <katp32> a reason for dynamically linking main is if you want some library code to be run before anything else. in the end though I scrapped it and went the opposite direction, making the program with main() the executable and the other code the shared object (since it mechanically works better, but it *feels* wrong, since the program with main() is actually the "shared" component here)
[01:04:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:04:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:04:52] *** Joins: wroathe (~wroathe@user/wroathe)
[01:04:57] <ioxzev1z> Ok
[01:05:16] <katp32> in general it's gross, I agree. but technically you can do it :P
[01:05:46] <katp32> (another use case would be overriding the entry point of a program for debugging purposes using LD_PRELOAD)
[01:06:07] <clarity> FWIW shared library constructors are a thing
[01:06:16] <katp32> oh?
[01:06:52] <clarity> https://gcc.gnu.org/onlinedocs/gcc-4.7.0/gcc/Function-Attributes.html
[01:06:55] <clarity> See constructor
[01:07:00] <katp32> ahh, I see, although that's not a standard C feature. then again, linking in general is outside the scope of the C standard I guess so
[01:07:08] <clarity> Yea
[01:12:08] *** Joins: odoood__ (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[01:14:17] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 240 seconds)
[01:19:38] *** Joins: ffguest (~ff@178.151.94.123)
[01:20:17] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:21:07] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.3)
[01:22:36] *** Quits: odoood__ (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Quit: Leaving)
[01:22:57] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[01:25:57] *** Quits: ffguest (~ff@178.151.94.123) (Ping timeout: 268 seconds)
[01:26:43] *** Joins: monkey_ (~user@190.104.116.153)
[01:30:09] *** Joins: somlis (~somlis@user/somlis)
[01:34:44] *** Joins: morte_ (~user@190.104.116.153)
[01:35:16] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[01:35:37] *** Quits: Narrat (~omnius@p200300df5f0f8e0406ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:36:45] <caze> katp32: Your program still seems wrong.
[01:37:39] *** Joins: pulse (~pulse@user/pulse)
[01:38:02] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[01:44:17] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:46:00] *** Joins: Macuser (~Macuser@2600:1003:b44a:c499:2507:e301:9721:4a51)
[01:52:45] <twkm> katp32: dynamic linking isn't enshrined in the standard either, nor LD_PRELOAD.  true most platforms have the concepts if not the exact facility.
[01:57:17] *** Quits: morte_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[01:58:09] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[02:00:10] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[02:01:18] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[02:02:13] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[02:02:22] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Client Quit)
[02:03:49] *** Joins: Techcable (~Techcable@168.235.93.147)
[02:07:37] *** Quits: monkey_ (~user@190.104.116.153) (Read error: Connection reset by peer)
[02:08:52] *** Joins: monkey_ (~user@190.104.116.153)
[02:11:31] *** Joins: coodre (~user@41.141.10.33)
[02:12:13] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:16:36] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[02:16:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[02:17:34] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[02:17:54] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[02:19:11] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:21:36] *** Joins: mahmutov (~mahmutov@37.155.50.102)
[02:23:18] *** Quits: nicode (~nic@2607:f2c0:9368:e200:da27:df65:cb31:3c2) (Ping timeout: 268 seconds)
[02:24:52] *** Joins: nicode (~nic@2607:f2c0:95f4:cc00:f012:6618:6643:90a4)
[02:25:47] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 268 seconds)
[02:29:00] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Read error: Connection reset by peer)
[02:29:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:29:38] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:32:18] *** Quits: Albright (~Albright@149.28.13.173) (Quit: ZNC 1.8.2 - https://znc.in)
[02:33:08] *** Joins: Albright (~Albright@2001:19f0:8001:ca4:b680:a467:38a8:2e2f)
[02:33:33] *** Quits: pizdets (~pizdets@183.182.111.24) (Ping timeout: 256 seconds)
[02:33:39] <katp32> twkm: yes, which is why I said "linking in general is outside the scope of the C standard"...
[02:33:52] *** Joins: pizdets_ (~pizdets@183.182.110.125)
[02:34:19] *** Joins: Klinda (~superleag@user/klinda)
[02:35:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[02:38:07] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[02:38:35] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[02:38:36] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[02:40:25] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:41:01] *** Quits: coodre (~user@41.141.10.33) (Ping timeout: 240 seconds)
[02:41:03] *** Joins: teepee (~teepee@openscad/teepee)
[02:43:02] *** Quits: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) (Ping timeout: 240 seconds)
[02:45:13] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[02:45:17] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[02:46:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:46:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:46:04] *** Joins: wroathe (~wroathe@user/wroathe)
[02:46:28] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:47:57] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[02:48:00] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[02:48:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 268 seconds)
[02:50:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:50:41] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[02:50:51] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[02:51:14] *** Joins: inlight (~inlight@157.35.46.65)
[02:51:14] *** Quits: inlight (~inlight@157.35.46.65) (Changing host)
[02:51:14] *** Joins: inlight (~inlight@user/inlight)
[02:53:04] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[02:53:04] *** Quits: alch (~alch@151.82.37.237) (Read error: Connection reset by peer)
[02:53:17] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:55:07] *** Joins: Torr (~Torr@user/torr)
[02:56:03] *** Joins: rgrinberg (~textual@187.223.23.238)
[02:57:47] *** Joins: alch (~alch@151.82.36.138)
[02:58:05] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54f844-160.dhcp.inet.fi)
[02:58:23] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[03:00:18] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:2421:137f:dee3:7f7d) (Ping timeout: 260 seconds)
[03:01:28] *** Quits: freep (~freepppp@77.49.184.64.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:01:32] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:02:15] *** Joins: monkey_ (~user@190.56.51.233)
[03:02:54] *** Joins: morte_ (~user@190.104.116.153)
[03:04:51] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54f844-160.dhcp.inet.fi)
[03:08:17] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54f844-160.dhcp.inet.fi) (Ping timeout: 240 seconds)
[03:12:39] *** Quits: monkey_ (~user@190.56.51.233) (Read error: Connection reset by peer)
[03:13:04] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:13:25] *** Joins: monkey_ (~user@190.56.51.233)
[03:19:27] *** Joins: piku (~piku@47.202.113.8)
[03:19:30] <nomagno> Does increasing, say, a four bit unsigned char bitfield to 15+1, cause overflow to 0?
[03:20:09] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Quit: WeeChat 3.3)
[03:22:09] <kline> nomagno, can you think of any alternative behaviours?
[03:22:34] <katp32> I believe the C spec actually says that's undefined behaviour, not a wraparound, but I'm not 100% sure
[03:22:59] <katp32> in practice it should wrap back to 0 in any C implementation I've ever heard of
[03:23:31] <kline> in any case, if you only read 4 bits, either its 0b1111, 0b0000, or nasal demons according to how angry your compiler devs are
[03:23:40] <katp32> oh wait and you're talking about bitfields, that I'm even less sure of
[03:24:35] <katp32> it's reasonable to assume that it will wrap around to zero
[03:24:45] <katp32> I think
[03:27:52] <katp32> C11 spec says "Values stored in unsigned bit-fields and objects of type unsigned char shall be
[03:27:55] <katp32> represented using a pure binary notation.4"
[03:28:00] <katp32> dammit how's there a newline there
[03:28:07] <katp32> I think that implies it would wrap around
[03:28:20] <DarkUranium> katp32: there's no UB for wrap-around for unsigned char 255+1, FTR.
[03:28:38] <DarkUranium> *Unsigned* types in C wrap, always.
[03:28:45] <DarkUranium> But I dunno about bitfields.
[03:29:32] <DarkUranium> (I avoided the use of the word "overflow" because that's word specifically *only* used for signed types in Cstd --- i.e. it specifically refers to the UB)
[03:29:55] <Kit> would signed ints or unsigned ints be faster
[03:30:01] <katp32> ahh, that's what I was thinking of, it's undefine for signed types, not for unsigned
[03:30:13] <katp32> Kit: on any normal platform they're equally fast
[03:30:47] <katp32> but it's technically platform dependent I imagine
[03:31:08] <Kit> how about i686
[03:31:08] <DarkUranium> It depends on what you're doing. Signed *is* marginally faster sometimes, because the UB allows for some optimizations.
[03:31:13] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[03:31:17] *** Quits: morte_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[03:32:06] <DarkUranium> Honestly, I consider the conflation of, on one hand: okay/UB; and on the other: unsigned/signed; to be a mistake.
[03:32:39] *** Joins: tejr (~tejr@user/tejr)
[03:32:39] <DarkUranium> (e.g. what if I want unsigned where I want the compiler to be able to assume no overflow, or if I want signed with wrap-around semantics?)
[03:32:58] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[03:33:07] *** Quits: noose (~noose@user/noose) (Quit: Bye)
[03:34:35] <DarkUranium> Honestly, for signed, I'd (in most cases) prefer trapping mechanics to UB or wrap-around.
[03:34:43] *** Joins: aqua (~sid742412@user/aqua)
[03:34:47] <DarkUranium> Er. s/mechanics/semantics/
[03:35:00] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[03:35:50] *** Joins: noose (~noose@user/noose)
[03:35:50] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[03:35:53] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[03:35:57] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[03:36:37] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 240 seconds)
[03:37:44] *** Joins: Wulf (~Wulf@user/wulf)
[03:42:15] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[03:42:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:42:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:42:39] *** Joins: wroathe (~wroathe@user/wroathe)
[03:47:01] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:47:11] *** Joins: zx__ (~sid742412@user/aqua)
[03:48:00] *** Quits: aqua (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[03:51:10] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[03:51:36] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:52:27] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54f844-160.dhcp.inet.fi) (Read error: Connection reset by peer)
[03:56:47] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[04:01:02] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[04:04:03] <nomagno> Some architectures (ahem, mine) will need a software emulation later for signed numbers
[04:04:22] <nomagno> That's just me being a jerk and going with what was most portable without too much extra code though.
[04:04:56] *** Joins: karakedi (~eAC53C340@user/karakedi)
[04:05:37] *** Quits: mahmutov (~mahmutov@37.155.50.102) (Ping timeout: 240 seconds)
[04:06:38] <DarkUranium> It's really only */% that are a problem. Assuming two's complement.
[04:06:49] <DarkUranium> Because +- work the same in unsigned *or* signed.
[04:07:17] <DarkUranium> My own VM will need emulation too, for portability (I want to avoid UB for sandboxing reasons).
[04:07:57] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[04:08:35] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[04:09:07] <nomagno> I can't think of any way my VM could be non-sandboxed right now, but its architecture/capabilities is somewhere between Harvard II and 6502, so...
[04:10:02] <nomagno> Alright probably more powerful than the Harvard Mark II :P
[04:11:56] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[04:12:04] *** Joins: chenqisu1 (~bhca7d@183.217.200.22)
[04:16:44] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:18:23] *** Quits: monkey_ (~user@190.56.51.233) (Ping timeout: 256 seconds)
[04:20:13] <cousteau> DarkUranium: yeah I experienced unsigned shenanigans with division first hand...
[04:21:23] *** zx__ is now known as kish`
[04:30:07] *** Joins: cmj (~cmj@68.207.254.124)
[04:32:27] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[04:33:37] *** Quits: n3rdy1 (~n3rdy1@2601:281:c780:a510:c82b:6078:8c93:1082) (Ping timeout: 240 seconds)
[04:35:57] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[04:36:51] *** Joins: kaph_ (~kaph@net-2-45-51-147.cust.vodafonedsl.it)
[04:38:09] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[04:39:17] *** Quits: kaph (~kaph@net-2-45-51-147.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[04:43:28] *** Joins: magla (~gelignite@55d49e3c.access.ecotel.net)
[04:44:26] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[04:53:20] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[04:54:05] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[04:54:16] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:58:41] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[05:04:25] *** Quits: magla (~gelignite@55d49e3c.access.ecotel.net) (Quit: Stay safe!)
[05:04:50] *** Joins: Techcable (~Techcable@168.235.93.147)
[05:09:06] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[05:15:25] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[05:16:07] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[05:16:57] *** Quits: zwr (~zwr@2804:d45:b966:fb00:9345:6fbb:30c0:b746) (Remote host closed the connection)
[05:24:51] *** Quits: faint (~faint@2a05:f480:2000:1325::) (Quit: disconnecting)
[05:26:28] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[05:26:38] *** Quits: rgrinberg (~textual@187.223.23.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:27:04] *** Joins: Colt (~Colt@user/colt)
[05:27:07] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[05:27:30] *** Joins: black_13 (~jjosb@2600:1700:1100:61c0:b03a:cc65:eccf:2d9f)
[05:28:29] <black_13> is this an appropriate forum to discuss the differences between C in gcc and C in Microsoft?
[05:28:48] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[05:31:27] *** Quits: constxd (~brad@142.134.38.68) (Quit: WeeChat 3.0.1)
[05:31:39] *** Joins: constxd (~brad@142.134.38.68)
[05:32:17] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[05:33:59] <DarkUranium> I'd say so.
[05:34:03] <DarkUranium> (also: the latter sucks)
[05:34:04] <nomagno> This is not what I would call a forum, but tes
[05:34:06] <nomagno> yes*
[05:34:46] <nomagno> MSVC is a sad excuse of a C11 compiler honestly. They made the C committee drop features instead of adding them to their implementation
[05:34:58] <black_13> yeah 
[05:35:08] <black_13> but its what I use for work
[05:35:31] <nomagno> It doesn't even have a CLI interface does it?
[05:35:56] <black_13> i didn't ask that question
[05:36:09] <nomagno> I know, I was asking
[05:36:35] <black_13> Function head = {}; does not compile what is a work a work around
[05:36:45] <nomagno> Does MSVC have a command line interface? Been looking for one
[05:36:56] <DarkUranium> `Function head = {0};`
[05:37:06] <DarkUranium> (empty braces are a GNU extension)
[05:37:14] <black_13> i thought so
[05:37:17] <DarkUranium> nomagno: well, `cl`?
[05:38:06] <black_13> DarkUranium, thanks
[05:44:49] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Quit: Leaving)
[05:44:57] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 268 seconds)
[05:45:05] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[05:45:45] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[05:47:08] *** Joins: ferdna (~ferdna@user/ferdna)
[05:50:31] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 268 seconds)
[05:57:32] *** Joins: monkey_ (~user@190.148.252.73)
[06:00:27] <black_13> DarkUranium, compiling chibicc for windows
[06:01:59] *** Quits: cmj (~cmj@68.207.254.124) (Quit: Leaving)
[06:04:14] *** Joins: retro_ (~retro@05412d78.skybroadband.com)
[06:05:54] *** Quits: Macuser (~Macuser@2600:1003:b44a:c499:2507:e301:9721:4a51) (Quit: Textual IRC Client: www.textualapp.com)
[06:07:41] *** Joins: NovumDXW (~NovumDXW@2409:8a28:3615:8900:1945:23e5:c97b:bf0c)
[06:07:46] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[06:09:08] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[06:09:23] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[06:09:37] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[06:09:37] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[06:09:43] <Torr> Merry Fucking Christmas \o/
[06:10:05] *** Joins: zwr (~zwr@2804:d45:b966:fb00:4247:1136:32e9:54c2)
[06:14:55] *** Quits: monkey_ (~user@190.148.252.73) (Read error: Connection reset by peer)
[06:15:13] *** Joins: monkey_ (~user@190.148.252.73)
[06:19:48] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[06:20:26] *** Joins: kapil (~kapil@o-k.website)
[06:21:32] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:25:33] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[06:25:33] *** Quits: monkey_ (~user@190.148.252.73) (Read error: Connection reset by peer)
[06:25:43] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[06:25:51] *** Joins: monkey_ (~user@190.148.252.73)
[06:26:03] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[06:27:19] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[06:28:36] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[06:29:13] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[06:30:48] <pragma-> well, "forum" means place for discussion
[06:31:21] <pragma-> just because some web sites specifically call their discussions "forums" doesn't invalidate non-web-based forums
[06:31:54] <pragma-> and msvc does have a cli interface.
[06:32:13] <caze> What is Function?
[06:32:41] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[06:32:46] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[06:33:00] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:33:18] *** Joins: kapil (~kapil@o-k.website)
[06:36:04] *** Joins: dead1 (~dead1@user/dead1)
[06:36:13] *** Joins: vicfred (~vicfred@user/vicfred)
[06:40:24] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[06:40:56] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[06:41:04] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[06:45:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:157f:fad:702e:d7a) (Ping timeout: 240 seconds)
[06:46:51] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[06:47:41] <wroathe> caze: It's what comes before form 
[06:48:55] *** Quits: critr (~critr@user/critr) (Quit: .)
[06:50:32] *** Quits: tm512 (~tm512@user/tm512) (Remote host closed the connection)
[06:53:50] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:54:17] *** Joins: Jong (~Jong@2620:10d:c090:400::5:da53)
[06:54:38] *** Joins: derreck (~derreck@c-71-58-70-16.hsd1.pa.comcast.net)
[06:54:57] *** Quits: alch (~alch@151.82.36.138) (Ping timeout: 240 seconds)
[06:56:00] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:56:18] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[06:57:12] *** Joins: alch (~alch@mi-18-28-126.service.infuturo.it)
[07:02:52] *** Joins: constxd (~brad@142.134.38.68)
[07:03:24] <apotheon> wroathe: good answer
[07:04:58] <wroathe> I dig this new "Don't Look Up" movie
[07:05:04] <wroathe> Good stuff
[07:07:07] *** Joins: rgrinberg (~textual@2806:101e:1:83af:99bc:509:eb58:3474)
[07:10:04] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[07:13:32] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:14:25] <pragma-> hmm
[07:20:45] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[07:21:09] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[07:23:19] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[07:27:43] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:28:15] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:30:40] *** Joins: vicfred (~vicfred@user/vicfred)
[07:35:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:10] *** Quits: dsrt^ (~dsrt@207.5.54.6) (Remote host closed the connection)
[07:44:49] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[07:45:05] *** Joins: rahl (~rahl@102.114.71.28)
[07:48:59] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[07:49:38] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[07:51:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:51:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:51:59] *** Joins: wroathe (~wroathe@user/wroathe)
[07:59:19] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[08:00:28] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[08:01:52] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2cf4:5f96:7154:f400)
[08:02:13] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[08:02:32] *** Joins: sebag (~guest@91.245.82.2)
[08:04:01] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[08:04:35] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[08:05:02] *** Joins: vicfred (~vicfred@user/vicfred)
[08:06:14] *** Quits: sebag (~guest@91.245.82.2) (Client Quit)
[08:06:30] *** Joins: sebag (~guest@91.245.82.2)
[08:10:10] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:10:35] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[08:10:51] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[08:10:54] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[08:13:24] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:14:07] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[08:16:19] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[08:19:43] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[08:21:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[08:23:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:23:57] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[08:24:18] *** Joins: rickame (~rickame@user/rickame)
[08:24:28] <rickame> where's c++ talk?
[08:24:34] <rickame> i got a joke i wanna try out
[08:24:52] <rickame> nvm fogot 
[08:24:54] *** Parts: rickame (~rickame@user/rickame) (part)
[08:24:59] *** Joins: rickame (~rickame@user/rickame)
[08:25:01] <rickame> forgot
[08:25:03] *** Parts: rickame (~rickame@user/rickame) (part)
[08:25:50] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[08:31:28] *** Quits: monkey_ (~user@190.148.252.73) (Read error: Connection reset by peer)
[08:31:41] <zwr> well, a good joke would probably be a bit more memorable
[08:31:45] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d4ba:d075:23a9:2f67) (Quit: Quit)
[08:31:51] *** Joins: monkey_ (~user@190.148.252.73)
[08:32:36] <dave0> or even a bad one
[08:36:17] *** Quits: monkey_ (~user@190.148.252.73) (Remote host closed the connection)
[08:36:30] *** Joins: earnestly (~earnest@user/earnestly)
[08:36:32] *** Joins: monkey_ (~user@190.148.252.73)
[08:38:44] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:41:19] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[08:47:51] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[08:48:07] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[08:49:17] *** Joins: AsenMx (~AsenMx@user/asenmx)
[08:49:57] *** Quits: derreck (~derreck@c-71-58-70-16.hsd1.pa.comcast.net) (Ping timeout: 240 seconds)
[08:52:22] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[08:52:24] *** Quits: monkey_ (~user@190.148.252.73) (Read error: Connection reset by peer)
[08:52:47] *** Joins: monkey_ (~user@190.148.252.73)
[08:53:28] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[08:59:17] *** Quits: monkey_ (~user@190.148.252.73) (Read error: Connection reset by peer)
[09:00:24] *** Joins: monkey_ (~user@190.148.252.73)
[09:01:37] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 240 seconds)
[09:02:13] *** Joins: AsenMx (~AsenMx@user/asenmx)
[09:04:34] *** Quits: monkey_ (~user@190.148.252.73) (Read error: Connection reset by peer)
[09:06:32] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:08:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[09:11:38] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[09:13:49] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[09:14:00] *** Quits: koki (~koki@host-80-181-107-133.pool80181.interbusiness.it) (Ping timeout: 268 seconds)
[09:15:21] *** Joins: koki (~koki@host-82-48-90-78.retail.telecomitalia.it)
[09:25:22] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:25:22] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:25:22] *** Joins: wroathe (~wroathe@user/wroathe)
[09:30:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:30:58] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[09:30:58] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[09:32:14] *** Quits: anton (anton@user/anton) (Quit: anton)
[09:34:06] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: Connection reset by beer)
[09:37:50] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:40:31] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[09:40:38] *** Joins: Alhazred (~Alhazred@86.106.74.46)
[09:44:50] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[09:52:12] *** Joins: frytaped (~frytaped@user/go4godvin)
[09:54:42] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:55:51] *** Quits: frytaped (~frytaped@user/go4godvin) (Client Quit)
[09:56:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[09:57:12] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[10:05:49] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:06:08] *** Quits: rgrinberg (~textual@2806:101e:1:83af:99bc:509:eb58:3474) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:08:01] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[10:08:08] *** Joins: vicfred (~vicfred@user/vicfred)
[10:08:36] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[10:10:37] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[10:13:21] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[10:13:59] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[10:23:19] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[10:27:12] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[10:28:02] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[10:28:11] *** Joins: agonhajdari (~textual@user/agonhajdari)
[10:29:54] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:30:41] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (Ping timeout: 250 seconds)
[10:32:19] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[10:32:51] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[10:38:30] <pony> toki
[10:40:46] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[10:42:37] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[10:42:37] *** Quits: black_13 (~jjosb@2600:1700:1100:61c0:b03a:cc65:eccf:2d9f) (Ping timeout: 240 seconds)
[10:42:57] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[10:50:50] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[10:53:37] *** Quits: alch (~alch@mi-18-28-126.service.infuturo.it) (Read error: Connection reset by peer)
[10:57:17] *** Quits: segnior (segnior@user/segnior) (Ping timeout: 240 seconds)
[10:57:34] *** Joins: alch (~alch@mi-18-63-52.service.infuturo.it)
[11:07:05] *** Joins: nostoi (~reset4ll@189.red-88-19-235.staticip.rima-tde.net)
[11:07:40] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:11:49] *** Joins: freep (~freepppp@77.49.184.64.dsl.dyn.forthnet.gr)
[11:11:58] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[11:13:09] *** Quits: nostoi (~reset4ll@189.red-88-19-235.staticip.rima-tde.net) (Quit: Verlassend)
[11:14:15] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 268 seconds)
[11:15:29] *** Quits: retro_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[11:19:42] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[11:23:49] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[11:23:50] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[11:26:35] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[11:27:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2cf4:5f96:7154:f400) (Ping timeout: 240 seconds)
[11:27:31] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[11:30:39] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[11:36:56] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[11:37:56] <nitrix> tenpo mute la mi lukin ala e sina :3
[11:38:12] <nitrix> I miss toki pona. Fun language.
[11:39:15] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:45:58] *** Quits: ckdCreations (~ckdCreati@147.55.133.136) (Read error: Connection reset by peer)
[11:46:20] *** Joins: ckdCreations (~ckdCreati@2607:fb90:b2d9:e1e:f5a4:286e:ece0:4fd0)
[11:47:05] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[11:47:57] *** Joins: Gimble (~G1mble2@2a01:4b00:8e07:7900:34c0:ac6a:8dce:9e25)
[11:48:03] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:48:14] *** Joins: mahmutov (~mahmutov@5.176.63.70)
[11:49:34] *** Quits: Gimble (~G1mble2@2a01:4b00:8e07:7900:34c0:ac6a:8dce:9e25) (Client Quit)
[11:53:47] <smallvil_> when the C preprocessor expands a macro it rescans the entire line for more expansions, right?
[11:55:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[12:05:50] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 260 seconds)
[12:08:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[12:10:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:10:57] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[12:14:25] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[12:16:38] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:16:55] *** Joins: inlight (~inlight@157.35.41.8)
[12:16:55] *** Quits: inlight (~inlight@157.35.41.8) (Changing host)
[12:16:55] *** Joins: inlight (~inlight@user/inlight)
[12:20:00] <caze> smallville7123: Why do you keep asking?
[12:29:53] *** Joins: badsektor (~badsektor@user/badsektor)
[12:30:14] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[12:30:21] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:31:54] *** Joins: aradesh (~aradesh@user/aradesh)
[12:32:37] *** Quits: Alhazred (~Alhazred@86.106.74.46) (Ping timeout: 240 seconds)
[12:34:47] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[12:35:06] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[12:39:19] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[12:42:19] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[12:42:37] *** Joins: meator (~meator@user/meator)
[12:44:40] *** Joins: mrig (~mrig@user/mrig)
[12:45:15] *** Joins: dsrt^ (~dsrt@207.5.54.6)
[12:46:27] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[12:49:08] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[12:50:49] *** Quits: mrig (~mrig@user/mrig) (Remote host closed the connection)
[12:51:02] *** Joins: mrig (~mrig@user/mrig)
[12:53:49] *** Joins: agonhajdari (~textual@user/agonhajdari)
[12:54:38] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:57:39] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:00:39] *** Joins: magla (~gelignite@55d48f64.access.ecotel.net)
[13:06:19] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:08:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[13:08:26] *** Joins: ffguest (~ff@178.151.94.123)
[13:08:41] *** Quits: ffguest (~ff@178.151.94.123) (Client Quit)
[13:08:52] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.182) (Remote host closed the connection)
[13:09:12] <nitrix> If it did, it would be turing complete.
[13:09:26] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[13:10:27] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:11:09] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:14:52] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:23:14] *** Joins: vysn (~vysn@user/vysn)
[13:23:26] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[13:26:21] *** Quits: mahmutov (~mahmutov@5.176.63.70) (Ping timeout: 256 seconds)
[13:30:53] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:30:56] <zwr> hmm https://paste.opensuse.org/view/raw/cf98ea7f
[13:32:07] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:34:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[13:36:24] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[13:36:41] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[13:38:00] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:39:03] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[13:39:25] *** Joins: Burgundy (~yomon@79.115.213.171)
[13:39:30] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[13:40:55] *** Joins: ffguest (~ff@178.151.94.123)
[13:44:07] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 268 seconds)
[13:46:46] *** Joins: pyzozord (pyzozord@user/pyzozord)
[13:47:44] <pyzozord> hi, when I do int *arr = malloc(3 * sizeof(int)); Can I later assign literal values from an array to the memory that arr points at?
[13:47:54] <pyzozord> Something like *arr = {1,2};
[13:48:57] <dave0> pyzozord: not like that, but you can use memcpy and a compund literal
[13:49:19] *** Joins: Rounin (~david@84.212.130.215)
[13:49:23] <pyzozord> dave0: can you remind me what compund literal is?
[13:49:25] <dave0> pyzozord: memcpy(arr, &(int[]){1,2}, 2*sizeof(int));
[13:49:48] <pyzozord> ah ok that's nice, thanks
[13:49:54] <dave0> no worries
[13:50:01] *** Parts: pyzozord (pyzozord@user/pyzozord) ()
[13:50:04] <zwr> I never thought of that, nice
[13:53:08] *** Joins: fe23 (~fe23@2409:8a34:468:10c0:61b0:d8ef:4df4:bfbe)
[13:53:33] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:53:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:54:58] *** Lord_of_Life_ is now known as Lord_of_Life
[13:56:42] *** Quits: ffguest (~ff@178.151.94.123) (Quit: Igloo IRC: https://iglooirc.com)
[13:58:17] *** Joins: slidercrank (~slidercra@user/slidercrank)
[13:59:32] *** Joins: novns (~novns@user/novns)
[14:00:09] *** Parts: novns (~novns@user/novns) ()
[14:01:23] *** Quits: meator (~meator@user/meator) (Ping timeout: 268 seconds)
[14:03:37] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[14:05:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:07:37] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[14:09:25] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[14:11:15] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[14:12:15] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[14:12:15] *** Quits: foul_owl (~kerry@94.140.8.107) (Ping timeout: 256 seconds)
[14:13:23] *** Quits: kaph_ (~kaph@net-2-45-51-147.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[14:17:55] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[14:21:11] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[14:22:10] *** Joins: sunsh1ne_warrior (~sunsh1ne_@46.148.141.240)
[14:23:34] *** Joins: uskerine (~uskerine@186.red-80-28-188.staticip.rima-tde.net)
[14:26:24] *** Joins: foul_owl (~kerry@212.102.47.57)
[14:28:12] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:37] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[14:30:58] *** Joins: csrf (~csrf@user/csrf)
[14:31:06] *** Quits: mcinglis (~mcinglis@user/mcinglis) (Remote host closed the connection)
[14:32:51] *** Joins: MajorBiscuit (~MajorBisc@c-001-017-030.client.tudelft.eduvpn.nl)
[14:33:41] *** Joins: diamondbond (~diamondbo@175.157.180.98)
[14:36:40] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[14:42:09] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:43:10] *** Joins: earnestly (~earnest@user/earnestly)
[14:44:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[14:46:14] *** Joins: doofenshmirtz (~farawayas@103.160.128.7)
[14:50:55] *** Joins: rito_ (~rito_gh@45.112.243.69)
[14:53:42] *** Joins: ko (~i.am@user/marlboro)
[14:53:43] *** Quits: alch (~alch@mi-18-63-52.service.infuturo.it) (Read error: Connection reset by peer)
[14:57:02] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:57:28] *** Joins: Klinda (~superleag@user/klinda)
[14:57:57] *** Joins: alch (~alch@mi-18-44-244.service.infuturo.it)
[15:00:48] *** Joins: ffguest (~ff@178.151.94.123)
[15:01:22] *** Quits: diamondbond (~diamondbo@175.157.180.98) (Read error: No route to host)
[15:01:42] *** Joins: diamondbond (~diamondbo@175.157.180.98)
[15:01:45] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[15:02:21] *** Quits: diamondbond (~diamondbo@175.157.180.98) (Read error: Connection reset by peer)
[15:02:56] *** Quits: ffguest (~ff@178.151.94.123) (Remote host closed the connection)
[15:03:42] *** Joins: ffguest (~ff@178.151.94.123)
[15:04:02] *** Quits: ffguest (~ff@178.151.94.123) (Remote host closed the connection)
[15:04:37] *** Quits: chenqisu1 (~bhca7d@183.217.200.22) (Ping timeout: 240 seconds)
[15:05:29] *** Quits: sunsh1ne_warrior (~sunsh1ne_@46.148.141.240) (Ping timeout: 252 seconds)
[15:08:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[15:09:59] *** Joins: sunsh1ne_warrior (~sunsh1ne_@46.148.141.240)
[15:11:03] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[15:15:23] *** Joins: carlavilla (~carlavill@188.26.219.124)
[15:18:17] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[15:21:41] *** Joins: Viewday110 (~Viewday@user/viewday)
[15:23:11] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[15:23:11] *** Viewday110 is now known as Viewday11
[15:23:14] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.4)
[15:24:12] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[15:28:33] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[15:29:45] *** Joins: u0_a391 (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com)
[15:31:17] *** Joins: zer0bitz (~zer0bitz@196.244.192.54)
[15:31:34] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[15:33:26] *** Joins: AmR (~AmREiSa@156.199.236.68)
[15:33:32] *** Quits: Kit (~u0_a391@2600:380:5915:d831:fc92:eed4:1a51:6f71) (Ping timeout: 252 seconds)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:36] *** Joins: pulse (~pulse@user/pulse)
[15:36:58] *** Joins: Viewday110 (~Viewday@user/viewday)
[15:37:04] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[15:37:19] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[15:38:34] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[15:38:35] *** Viewday110 is now known as Viewday11
[15:38:36] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[15:39:30] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[15:39:42] *** Joins: de-facto (~de-facto@user/de-facto)
[15:44:58] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[15:45:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[15:46:19] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[15:46:54] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:49:06] *** Joins: frost (~frost@user/frost)
[15:52:42] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[15:58:28] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:59:29] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[15:59:43] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[16:00:55] *** Joins: dutch (~DutchIngr@user/dutch)
[16:05:28] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[16:07:05] *** Joins: Viewday117 (~Viewday@user/viewday)
[16:07:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[16:08:40] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[16:08:41] *** Viewday117 is now known as Viewday11
[16:19:37] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[16:20:04] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[16:25:38] *** Joins: coodre (~user@105.154.232.88)
[16:26:41] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[16:27:37] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[16:32:40] *** Joins: meator (~meator@user/meator)
[16:35:45] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[16:38:30] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[16:39:58] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[16:40:21] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[16:41:46] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[16:51:42] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[16:53:00] *** Joins: terminalpusher (~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717)
[16:53:12] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Ping timeout: 276 seconds)
[16:53:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[16:54:23] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c16:575f:60a6:c562)
[16:54:23] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c16:575f:60a6:c562) (Changing host)
[16:54:23] *** Joins: skapata (~Skapata@user/skapata)
[16:57:37] *** Parts: katp32 (~katp32@S010680ea96e8dbba.vc.shawcable.net) ()
[17:01:21] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[17:04:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[17:05:19] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:05:57] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[17:06:11] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:06:38] *** Joins: Viewday118 (~Viewday@user/viewday)
[17:08:29] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[17:08:29] *** Viewday118 is now known as Viewday11
[17:10:01] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[17:10:10] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Client Quit)
[17:10:13] *** Quits: NovumDXW (~NovumDXW@2409:8a28:3615:8900:1945:23e5:c97b:bf0c) (Quit: Leaving)
[17:11:57] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[17:12:12] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[17:13:43] *** Joins: seninha (~seninha@user/seninha)
[17:16:02] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[17:18:02] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[17:18:55] *** Quits: de-facto (~de-facto@user/de-facto) (Quit: See you around. 💤)
[17:21:17] *** Joins: oafish (~oafish@2a05:f480:2000:1325::)
[17:25:25] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[17:26:18] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:27:44] *** Joins: critr (~critr@user/critr)
[17:29:11] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Excess Flood)
[17:29:25] *** Joins: ethrl (uid524335@user/doforlove33)
[17:32:33] *** Joins: Macuser (~Macuser@2600:1003:b440:73a:bccf:a1dc:4e2a:e3fb)
[17:32:57] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Quit: Leaving)
[17:33:37] *** Quits: LuKaRo_ (~LuKaRo@p5dedaa53.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:35:12] *** Joins: allyouneedislove (~ethereal@user/doforlove33)
[17:35:35] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:35:36] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[17:35:52] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:37:26] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[17:37:34] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[17:45:06] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[17:45:13] *** Quits: rito_ (~rito_gh@45.112.243.69) (Quit: Leaving)
[17:47:32] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[17:48:00] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[17:48:15] *** Joins: agonhajdari (~textual@user/agonhajdari)
[17:48:59] *** Joins: LuKaRo (~LuKaRo@p5dedaa53.dip0.t-ipconnect.de)
[17:50:57] *** Quits: magla (~gelignite@55d48f64.access.ecotel.net) (Quit: Stay safe!)
[17:51:26] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[17:52:52] *** Joins: mahmutov (~mahmutov@5.176.63.70)
[17:54:13] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[17:57:17] *** Quits: Macuser (~Macuser@2600:1003:b440:73a:bccf:a1dc:4e2a:e3fb) (Ping timeout: 240 seconds)
[18:06:17] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:07:08] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:5d5c:8c41:79c4:9b80)
[18:07:31] *** Quits: ko (~i.am@user/marlboro) (Quit: sesta)
[18:08:11] *** Joins: cart_man (~rynot@2a00:23c4:2b81:5401:cc14:844e:e1a:117f)
[18:08:33] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:09:37] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[18:13:41] *** Joins: bbju (~bbju@103.144.149.218)
[18:17:57] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: btc donations: bc1qt3chy4rqtzjny2h7qt47cy7nmu6th9sr66wa02)
[18:19:20] <mort> Will fread from a file on the filesystem ever do a short read without reaching eof?
[18:21:51] *** Joins: Torr (~Torr@user/torr)
[18:22:26] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[18:22:38] *** Joins: Torr (~Torr@user/torr)
[18:22:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:22:58] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[18:24:54] *** Quits: allyouneedislove (~ethereal@user/doforlove33) (Quit: WeeChat 2.8)
[18:24:59] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:27:46] *** Quits: LeoNerd (~leo@genoa.dictatorshipcake.co.uk) (Remote host closed the connection)
[18:28:23] *** Joins: LeoNerd (~leo@genoa.dictatorshipcake.co.uk)
[18:32:25] <dave0> i don't think so but i'll look it up
[18:32:50] <rindolf> nfs...
[18:33:16] <rindolf> well, CIFS too
[18:33:20] <dave0> Upon successful completion, fread() shall return the number of elements successfully read which is less than nitems only if a read error or end-of-file is encountered
[18:33:30] <dave0> from posix: https://pubs.opengroup.org/onlinepubs/9699919799/functions/fread.html
[18:33:34] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[18:33:58] <dave0> so if no read error and no eof
[18:36:20] *** Joins: [\\] (~nirnam@gateway/tor-sasl/nirnam)
[18:41:16] *** Joins: X-Scale` (~ARM@31.22.201.155)
[18:41:40] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:41:40] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:41:40] *** Joins: wroathe (~wroathe@user/wroathe)
[18:41:50] <mort> that's useful
[18:42:02] <mort> I wonder if it's only a posix thing or if C also defines it that way tho
[18:42:13] <mort> windows isn't exactly known for its posix-compliant libc
[18:43:33] *** Quits: X-Scale (~ARM@206.46.158.5.rev.vodafone.pt) (Ping timeout: 256 seconds)
[18:43:33] *** X-Scale` is now known as X-Scale
[18:43:35] <[\\]> I have here a Makefile, https://bpa.st/YMUQ  when object file is newly added into object directory, $^ in process recipe doesn't return path to the object for some reason, but a second run work as expected
[18:43:41] *** Quits: Dotz0cat (~Dotz0cat@75.90.45.123) (Ping timeout: 245 seconds)
[18:45:58] <sham1> ,c11std 7.21.8.1.3
[18:45:58] <candide> No such section '7.21.8.1.3' in C11 Draft Standard (n1570).
[18:46:29] <sham1> But yes, fread does indeed work like POSIX says also by standard
[18:47:10] <sham1> The fread function returns the number of elements successfully read, which may be less than nmemb if a read error or end-of-file is encountered. If size or nmemb is zero, fread returns zero and the contents of the array and the state of the stream remain unchanged.
[18:48:36] <pragma-> The bot, and many websites, uses p to refer to paragraphs within a section. 
[18:48:36] <rindolf> [\\]: line 16 should contain valid pathnames
[18:48:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[18:48:41] <sham1> Ah
[18:48:54] <pragma-> Prefer `c11` to `c11std` too.
[18:48:55] <sham1> ,c11std 7.21.8.1p3
[18:48:56] <candide> http://www.iso-9899.info/n1570.html#7.21.8.1p3 [The fread function] returns the number of elements successfully read, which may be less than nmemb if a read error or end-of-file is encountered. If size or nmemb is zero, fread returns zero and the contents of the array and the state of the stream remain unchanged.
[18:48:57] *** Joins: Enitin (~Enitin@82.102.22.85)
[18:48:59] <sham1> Right
[18:49:25] *** Joins: pert (~pert@fsf/member/pert)
[18:50:01] <[\\]> rindolf: valid path in prerequisites?
[18:50:23] *** Quits: Guest26 (~Guest26@65.207.90.10) (Quit: Client closed)
[18:51:10] <rindolf> [\\]: both targets and sources; with the directories
[18:51:57] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[18:55:32] *** Quits: alch (~alch@mi-18-44-244.service.infuturo.it) (Ping timeout: 240 seconds)
[18:57:19] *** Joins: alch (~alch@151.82.34.39)
[18:58:57] *** Quits: cart_man (~rynot@2a00:23c4:2b81:5401:cc14:844e:e1a:117f) (Quit: Konversation terminated!)
[19:01:09] <[\\]> rindolf: explain more, I'm a little confused, that doesn't seem to fix make doesn't see new object added inside VPATH
[19:02:45] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[19:03:01] <[\\]> keeping everything intact, and change $^ to $(addprefix $(OBJDIR)/, $(^F)) fixes it, but that's not what smoldering me
[19:04:42] <rindolf> [\\]: line 16 should contain valid pathnames, paths to files that actually exist, or should exist, on the filesystem. not just raw file basenames
[19:04:45] <mort> I wish we had binary literals
[19:05:13] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[19:05:17] *** Quits: oafish (~oafish@2a05:f480:2000:1325::) (Quit: disconnecting)
[19:05:40] <rindolf> mort: like 0b1001 ?
[19:05:44] <mort> yeah
[19:05:50] <rindolf> ah
[19:06:55] *** Joins: Viewday113 (~Viewday@user/viewday)
[19:07:50] <NRK[m]> that would be very nice indeed 
[19:08:04] <NRK[m]> think gcc has it as an extension 
[19:08:10] <mort> yeah
[19:08:30] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:08:30] *** Viewday113 is now known as Viewday11
[19:08:48] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[19:10:46] *** Joins: banana-prince (~banana-pr@2604:fa00:103:d8:b845:43f1:4797:522b)
[19:11:27] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[19:13:56] *** Quits: fe23 (~fe23@2409:8a34:468:10c0:61b0:d8ef:4df4:bfbe) (Quit: fe23)
[19:14:39] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:14:58] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Read error: Connection reset by peer)
[19:15:13] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[19:18:54] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:21:11] *** Quits: sunsh1ne_warrior (~sunsh1ne_@46.148.141.240) (Quit: Konversation terminated!)
[19:22:15] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[19:23:46] *** Joins: mrig (~mrig@user/mrig)
[19:24:52] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[19:30:29] *** Quits: banana-prince (~banana-pr@2604:fa00:103:d8:b845:43f1:4797:522b) (Quit: WeeChat 3.4)
[19:30:43] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[19:39:23] *** Quits: moog (~moog@107.77.244.157) (Remote host closed the connection)
[19:39:57] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[19:40:11] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[19:42:04] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[19:43:03] *** Quits: bbju (~bbju@103.144.149.218) (Ping timeout: 256 seconds)
[19:45:15] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[19:46:07] *** Joins: black_13 (~jjosb@cpe-173-174-194-178.satx.res.rr.com)
[19:48:52] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[19:52:50] *** Parts: [\\] (~nirnam@gateway/tor-sasl/nirnam) ()
[19:56:11] *** Quits: ethrl (uid524335@user/doforlove33) (Quit: Connection closed for inactivity)
[19:57:22] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[20:00:41] *** Joins: cousteau (~cousteau@user/cousteau)
[20:04:43] *** Quits: coodre (~user@105.154.232.88) (Ping timeout: 256 seconds)
[20:11:25] *** Joins: bkhl[m] (~bkhlmatri@2001:470:69fc:105::1:4208)
[20:12:28] *** Joins: Akuli (~Akuli@87-94-109-68.bb.dnainternet.fi)
[20:13:15] *** Joins: agonhajdari (~textual@user/agonhajdari)
[20:13:30] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[20:20:33] *** Joins: Dotz0cat (~Dotz0cat@h223.11.31.71.dynamic.ip.windstream.net)
[20:20:57] *** Quits: black_13 (~jjosb@cpe-173-174-194-178.satx.res.rr.com) (Ping timeout: 240 seconds)
[20:22:27] *** Quits: EtherNet (~ethernet@user/ethernet) (Quit: WeeChat 3.4-dev)
[20:22:54] *** Joins: EtherNet (~ethernet@user/ethernet)
[20:24:12] *** leonardus is now known as tyle
[20:25:02] *** Joins: bbju (~bbju@103.144.149.218)
[20:30:42] *** Joins: strajder (~strajder@user/strajder)
[20:32:24] *** Joins: meator (~meator@user/meator)
[20:34:15] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[20:34:57] *** Joins: stonkey (~stonkey@user/stonkey)
[20:39:11] *** Joins: anton (anton@user/anton)
[20:40:25] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:40:33] *** Joins: badsektor (~badsektor@user/badsektor)
[20:44:55] *** Joins: hanzo (uid532183@id-532183.hampstead.irccloud.com)
[20:45:20] *** hanzo is now known as Guest9123
[20:46:01] *** Quits: Guest9123 (uid532183@id-532183.hampstead.irccloud.com) (Client Quit)
[20:46:16] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[20:46:17] *** Joins: hanzo_ (uid532183@id-532183.hampstead.irccloud.com)
[20:48:13] *** Quits: hanzo_ (uid532183@id-532183.hampstead.irccloud.com) (Changing host)
[20:48:13] *** Joins: hanzo_ (uid532183@user/hanzo)
[20:48:44] *** hanzo_ is now known as hanzo
[20:49:53] *** robyndrake is now known as robyn
[20:58:36] *** Quits: uskerine (~uskerine@186.red-80-28-188.staticip.rima-tde.net) (Remote host closed the connection)
[21:01:03] <mort> whose idea was it to make & have a lower precedence than ==, honestly
[21:01:09] <mort> I'm so happy clangd warns me every time I make that mistake
[21:04:20] <pragma-> I'm annoyed that you can assign different enums to each other without error. Only recently did they start warning about that.
[21:04:38] *** Quits: terminalpusher (~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717) (Remote host closed the connection)
[21:04:55] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[21:04:56] <pragma-> switch() also now finally warns about non-exhaustive cases if you switch on an enum and are missing one of the enums in the cases
[21:05:03] <pragma-> baby steps
[21:06:11] <pragma-> though I guess C's immediate design goals in the 70's were more to be a high-level assembler rather than proper language.
[21:06:48] <pragma-> Indeed, the first C compilers are just a simple 200 line program to directly map C constructs to assembler output without any optimization passes or anything.
[21:07:22] <pragma-> s/are/were/
[21:08:15] <pragma-> C is so incredibly weakly typed
[21:08:52] *** Joins: de-facto (~de-facto@user/de-facto)
[21:09:00] <apotheon> I wish it was more strongly typed.
[21:09:24] <apotheon> . . . but given the wide variety of types, that might be counterproductive in some ways.
[21:10:51] <pragma-> I can't even stomach using dynamically-typed languages like Perl or Python any more except as small glue scripts. At least Python is gradually supporting type-annotations, lately. 
[21:11:23] <apotheon> Perl's contextual type system is kinda horrific.
[21:11:40] <apotheon> I'm okay with dynamic types if well-done.
[21:11:58] <apotheon> Python has had some pretty awful type quirks, though.
[21:12:30] <pragma-> I used to be such a Perl fanboy. But then I used it to make a huge application spanning several thousand lines and god help you if you pass the wrong thing somewhere. You won't find it until the program's execution path finally invokes that code during runtime. No compile-time checking or anything. I am wholly and thoroughly disillusioned with dynamically typed languages now.
[21:13:25] <apotheon> I still like Ruby (for instance).
[21:14:22] <apotheon> I also like C and Standard ML, so . . . I have wide-ranging "likes" amongst languages, with great variation in type schemes.
[21:14:40] <pragma-> I'm not even touchign a language unless it has a strong static type system, preferably with inference.
[21:16:07] <pragma-> I wish I learned the ML languages as a child. I grew up on imperative langauges like BASIC, C, Java. If I had gotten early exposure to ML my life would be drastically different now.
[21:17:07] <apotheon> Are you saying you don't touch C now?
[21:17:49] <pragma-> For quite some time now, C hasn't very high up on the list of languages I'd prefer to write in.
[21:17:52] <apotheon> My first language was BASIC.  Unless I forgot something, Logo was my second, and C++ might've been my third.
[21:18:05] <pragma-> hasn't been very high
[21:18:37] <pragma-> I'd much prefer to write in Zig or Nim and let them transpile to C for me.
[21:18:47] *** Joins: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net)
[21:19:40] <emias> OCaml, let alone SML, let alone other MLs are missing ecosystem though, so in practice quite unusable unless you're fine with building everything from scratch.  Except for theor niche use cases.
[21:19:54] <emias> s/theor/their/
[21:20:02] <emias> But yes nice language(s).
[21:20:02] <pragma-> Haskell seems to have a decent ecosystem
[21:20:08] <pragma-> Haskell is considered ML too
[21:20:16] <emias> Huh. Not by me :-)
[21:21:36] <apotheon> pragma-: If Zig seemed more flexible in its pointer support, I might be more enthusiastic about it.
[21:21:59] <apotheon> pragma-: From what I've seen in documentation, though, Zig's pointer support is not as pervasive as C's.
[21:22:36] <apotheon> I wouldn't consider Haskell part of the ML family at all.
[21:22:46] <pragma-> why not?
[21:23:36] <pragma-> because it doesn't use s-expressions?
[21:23:43] <apotheon> um
[21:23:50] <apotheon> MLs don't use s-expressions.
[21:24:03] <pragma-> Right.
[21:24:10] <pragma-> syntax is just syntax
[21:24:18] <apotheon> Look at the "Influenced by" list.  https://en.wikipedia.org/wiki/Haskell_(programming_language)
[21:24:25] <apotheon> I think the MLs are a very small part of that.
[21:24:36] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:600b:877:2a65:889e)
[21:25:00] <apotheon> I wouldn't call a language an ML unless it largely is Standard ML plus some additions.
[21:25:18] <apotheon> (e.g. OCaml and F#)
[21:26:28] <apotheon> (maybe things like Myr fit there, too)
[21:26:33] <pragma-> https://www.microsoft.com/en-us/research/wp-content/uploads/2006/01/not-not-ml.pdf
[21:27:09] <apotheon> ugh, PDFs
[21:27:16] <emias> Syntax is just syntax, but that's one aspect of grouping language families in my book :-)  Besides syntax, ML is (typically) not pure and (typically) does eager evaluation.
[21:27:50] <pragma-> According to that PDF, Haskell is not-not ML!
[21:27:50] <apotheon> Yeah, I don't think I'm going to read a sixteen page PDF about this right now.
[21:27:53] <emias> But yes I'm sure with enough motivation we can come up with definitions that move Haskell into the ML family.
[21:28:08] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[21:28:19] <apotheon> emias: How is SML not pure?
[21:28:32] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[21:30:09] <apotheon> Actually, Myr is probably just very heavily ML-influenced, rather than an ML itself.
[21:30:19] <emias> apotheon: SML allows side-effects just fine.
[21:31:54] <emias> Whatever!  I'd say Haskell's ecosystem is somewhere in between of OCaml's and a "usable" one ;-)
[21:32:05] <tdg> lol
[21:32:25] <emias> Obviously depends on the use case.  Writing compilers in Haskell works well :-)
[21:32:53] <cousteau> mort: re: & and ==, I think Dennis Ritchie himself said that that was a mistake.  But it was done that way for "historical reasons".
[21:33:00] <tdg> i quite like ML family for compiler prototypes, symbolic execution, etc, but i'd NEVER write anything serious in it
[21:33:16] <pragma-> At least they fixed the =+ mistake.
[21:33:16] *** Quits: Stalevar (~stalevar@user/stalevar) (Ping timeout: 245 seconds)
[21:33:17] <apotheon> emias: One might argue Haskell allows side-effects, too.  It just pretends it doesn't by wrapping them in constructs that allow people who want to call it pure to say the side-effects aren't Haskell's fault.
[21:33:27] <apotheon> . . . or, at least, I've seen that argued.
[21:33:45] <apotheon> I've seen it argued that using STDOUT is a side effect, in fact.
[21:33:54] <cousteau> mort: You see, the predecessor of C, which I think was B, didn't have a && operator, so the only reasonable way to check for multiple comparisons was to do `if ((a == b) & (c == d))`
[21:33:56] <tdg> apotheon: haskell makes it possible, but not mandatory to differentiate between effectful and non-effectful computation depending on what's most convenient
[21:33:57] * pragma- still shakes his head that they actually made and accepted gets() into the standard.
[21:34:00] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[21:34:23] <cousteau> This worked because == always yields 0 or 1, so doing && and || has the same result as just doing & and | (except for the whole short-circuiting stuff)
[21:34:32] <tdg> what haskell doesn't do which i think would be a nice addition is supporting coeffects for dataflow-based programming 
[21:34:37] <mort> but C isn't B.. it's not like a goal of C was to be source compatible with D was it?
[21:34:39] <tdg> it's a really convenient way to write some things
[21:34:39] <emias> apotheon: Kind of.  But that does yield a clear separation of code with and without side effect, which helps automated analysis.
[21:34:43] <cousteau> (only if the terms are always 0 and 1, mind you)
[21:34:46] <mort> with B*
[21:34:56] <mort> I suppose there would be an argument for familiarity
[21:34:58] <cousteau> mort: yes, but early C didn't have && and || either; that was a later addition
[21:35:04] <mort> aha
[21:35:18] <cousteau> And by the time that was added, there was already a great deal of C established
[21:36:04] <cousteau> obviously it made more sense to make the & and | operators have lower precedence than == and != if they were meant mostly for boolean logic, because you use && and || a lot more than & and |
[21:36:21] <cousteau> so (a==b & c==d) was easier to type than ((a==b) & (c==d))
[21:36:24] <apotheon> emias: Can you give me an example of a side effect in SML that can't be categorized as yielding a clear separation of code with and without side effect?
[21:36:53] <cousteau> By the time && was introduced, and it was no longer necessary to use & for that, it was probably too late to change, there were already many programs that used & instead, and no parens
[21:37:02] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[21:37:13] <apotheon> SML technically doesn't even have variables.
[21:37:22] <cousteau> ...but it has been largely discussed whether it would have been a good idea to just say "screw those programs", and just change the precedence.
[21:37:33] <cousteau> In hindsight, it would have probably been a good idea.
[21:37:54] <cousteau> and as I said, I think Dennis Ritchie said it would
[21:38:15] <apotheon> Maybe I misremember the side effect situation in SML, though.  It has been a long time since I touched it.
[21:39:18] <cousteau> the =+ thing pragma- mentioned was another good one.  Imagine we still did `x =- y` instead of `x -= y`
[21:39:18] <tdg> apotheon: i'm fairly sure you can infer all possibilities of side-effects in SML. the difference is that in haskell it's exposed in the type as a monad whereas in SML it's not obvious to the naked eye that something might be an effectful computation (e.g. one of the branches in a function has an effect, but you missed it because you didn't look carefully). the compiler i believe is able to infer all of
[21:39:20] <tdg> it
[21:39:34] <cousteau> then `x=-y` could be either `x = -y` or `x =- y`
[21:39:50] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:600b:877:2a65:889e) (Ping timeout: 252 seconds)
[21:39:58] <tdg> apotheon: this has upsides and downsides. i'd argue it has more upsides than downsides though... at least in practical programming
[21:40:23] <cousteau> probably the latter, with the current parsing rules (operators are built by grouping characters from left to right, so x+++++y means x ++ ++ + y, not x ++ + ++ y)
[21:40:37] <emias> apotheon: It's been a (long) while here too, but you can just add arbitrary side effects to fn's of e.g. type int -> int, no?
[21:40:44] <cousteau> (even though x++ ++ + y is not valid, and x++ + ++y would be valid)
[21:40:45] <tdg> the amount of times i've screamed at haskell because it insists on wrapping everything and makig life unnecessarily difficult when i'm trying to debug inherently stateful things is too damn high
[21:41:45] <pragma-> Any decent lexer should alway try to find the longest match. If it sees '=' it should peek to see if it's followed by '-' or '+', etc, rather than immediately assuming it's just a '=' by itself.
[21:42:07] <cousteau> mort: so... yeah, it has a reason to be, but it is a shitty reason, and everybody wants it changed, but it cannot be changed at this point so we have to just deal with it as it is
[21:42:44] <cousteau> pragma-: I'd think it depends on how the lexer works
[21:43:04] <cousteau> I could think that x+++++y could be parsed as x + ++ ++ y if lexing were done right to left
[21:43:19] <pragma-> But why would it be done right to left?
[21:43:43] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:600b:877:2a65:889e)
[21:43:44] <cousteau> why would it be done left to right?
[21:43:50] <cousteau> you're compiling a file, not a stream
[21:43:53] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[21:44:02] <pragma-> Because that's how we read the operations!
[21:44:10] <pragma-> It's mathematical
[21:44:29] <cousteau> folllowing that logic, a+b*c should be (a+b)*c
[21:44:39] <pragma-> it should!
[21:44:42] <cousteau> like shitty calculators do
[21:44:45] <mort> I would expect x++ ++ +y if the lexer just does the most simple thing
[21:45:00] <apotheon> emias: I think one has to essentially do something explicitly effectful, in a way that isn't just assigning to a variable outside the present scope (for instance), for side effects to occur.
[21:45:14] <apotheon> emias: . . . but I really don't recall the details at this point.
[21:45:17] <cousteau> mort: well, you don't know what thing the lexer does...
[21:45:24] <cousteau> but as it turns out, it does the most simple one
[21:45:26] <mort> when it reaches a +: if the next character is also a +: consume 2 chars and spit out a ++ token; if the next character is an =: consume 2 chars and spit out a += token; otherwise: consume 1 char and spit out a + token
[21:45:32] <tdg> apotheon: you're correct.
[21:45:38] <pragma-> but converting a+b*c to a+(b*c) isn't lexing, that's parsing.
[21:45:51] <tdg> apotheon: it's just not differentiated at the type level like a lot of (but not all of) haskell
[21:45:55] <apotheon> tdg: I don't see the difference in principle from Haskell's "purity", then.
[21:46:03] <pragma-> lexing just produces a stream of tokens without any semantics.
[21:46:20] *** Joins: nyah (~nyah@94.6.71.219)
[21:46:33] <cousteau> that's true...
[21:46:37] <tdg> apotheon: it's just intended to be a better model of what your code is, ultimately that's what types are useful for. unfortunately i'm not very convinced that monads are as useful as people make them to be and they often make life harder than necessary
[21:46:39] <apotheon> You have to explicitly impose side effects in a context-obvious way in both Haskell and SML if you want side effects -- right?
[21:46:40] <pragma-> parsing takes these tokens and makes something out of them
[21:46:59] *** Joins: Stalevar (~stalevar@user/stalevar)
[21:46:59] <pragma-> so for lexing, just going left to right, should always try to find the longest match first!
[21:47:09] <apotheon> Oh, yeah, monads do seem to be a pretty heavy burden in how they're employed, from what I've seen.
[21:47:28] <cousteau> but what I mean is, while it is easier to lex from left to right, because that's the order in which you usually fetch stuff from a text file, there is no logical reason why it should be done that way
[21:47:28] <apotheon> (My impressions may be mistaken in some sense; I've barely written hello world in Haskell.)
[21:47:56] <pragma-> a monad is basically an object with two functions: bind and return.
[21:48:29] <tdg> apotheon: i've written executable formal specifications in both haskell and various ML variants (including SML with Poly/ML) and if any of it had to deal with dirty systems state, the latter were infinitely nicer to work in
[21:48:40] <tdg> simply because haskellers tend to wrap everything in monads for some reason
[21:48:41] <cousteau> haskell is heavy in types.  It's like types this, types that, types are first class citizens there
[21:48:41] <mort> you could lex the whole file from the end and read backwards to the beginning, but that would be reeeally weird
[21:48:56] <mort> lexers don't usually explicitly read "left to right", they read "start to end"
[21:48:58] <cousteau> If you ever move to Haskell, make sure you get a job as a type; you'll live like a king.
[21:48:59] <mort> because files are ordered
[21:49:12] <tdg> cousteau: they're not since haskell is not dependently typed, you can't treat values as types so they're not really first class citizens in the sense that people usually say it :P
[21:49:28] <tdg> or well, terms as types
[21:49:29] <tdg> not values
[21:49:32] <cousteau> no, but they are in the documentation sense
[21:49:45] <mort> lexers don't know what left is and what right is, lexers know what the previous byte is and what the next byte is
[21:50:14] <pragma-> and previous is left and next is right!
[21:50:16] * pragma- nods.
[21:50:24] *** Joins: scoobydoo_ (~scooby@user/scoobydoo)
[21:50:27] <mort> it's a property of your text editor or other text presentation system that the previous is displayed as left and next is displayed as right
[21:50:27] <cousteau> like, when I got to the part in which they started describing types, they unrolled a red carpet and started having the types walk in front of me, while people all around the kingdom tossed rose petals over them, and chanted songs of joy and praise
[21:50:41] <tdg> sounds about right :D
[21:51:05] <cousteau> mort: obviously, when I said "left" I meant "beginning", because that's how every language of the planet works
[21:51:12] * cousteau hides Arabic and Hebrew under the carpet
[21:51:22] <pragma-> previous/next. left/right. up/down. beginning/end. might as well call the whole thing off!
[21:51:44] <mort> cousteau: hebrew is a pretty good example actually, a file with a right-to-left marker would be parsed "right to left"
[21:52:17] <cousteau> and don't get me started on big endian vs little endian
[21:52:31] <pragma-> so, hebrew, you have to read the file from top to bottom but the lines from right to left?
[21:52:34] <pragma-> sounds fun
[21:52:35] <mort> where does endianness come in
[21:52:39] *** Joins: terminalpusher (~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717)
[21:52:57] <mort> I suppose there are systems which use a byte order mark before their utf-8
[21:53:07] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 268 seconds)
[21:53:12] <cousteau> mort: well, the discussion is on whether you write numbers with the most significant digit "on the left", "at the beginning", etc
[21:53:13] *** scoobydoo_ is now known as scoobydoo
[21:53:35] <mort> endianness isn't about digits really tho, but about bytes
[21:53:44] <mort> I mean I suppose you could view bytes as encodings of base 256 digits
[21:53:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b9a7:a535:b350:2b5f)
[21:54:00] <cousteau> pragma-: and on chinese, you read each line from top to bottom and then move to the next line from right to left
[21:54:56] <mort> ‏Hello
[21:55:09] <mort> weird, that text contains a right-to-left marker but is rendered left to right
[21:55:11] <cousteau> mort: that's exactly what I meant, but the analogy that is used to promote big endian is that "we write numbers starting starting from the most significant digit anyway, so we should encode them from the most significant byte too"
[21:55:29] <mort> right
[21:55:37] <cousteau> mort: do you know how the right-to-left mark is used?  (I sure as hell do not)
[21:55:42] <mort> no
[21:56:34] <cousteau> also, if the number 0x12345678 is encoded in big endian, and seen with a hex file viewer, you'll see "12 34 56 78", which looks correct, whereas in LE it'll look like "78 56 34 12", like wtf
[21:57:01] <pragma-> I'm just wondering if they have any clever formats for their text files or if they actually have to read to the newline and start parsing backwards.
[21:57:17] <mort> don't some hex viewers/editors display the file as 2-byte words, little endian
[21:57:18] <cousteau> but from a computer architecture point of view, having the LSbyte always be the first one is an advantage, since it represents "the ones", whereas the MSbyte represents "the whatever is the length of this number's"
[21:57:29] <mort> so you would see 3412 7856
[21:57:31] <mort> so confusing
[21:58:05] <cousteau> the BE argument would be that "that's because you're using the wrong endianness format when displaying the number"
[21:58:41] <mort> I think the world would be better if everyone always used BE everywhere
[21:58:52] <mort> ..I also think the world would be better if everyone always used LE everywhere too, to be fair
[21:59:02] <cousteau> the point of calling them "big endian" and "little endian" was to mock the fights that would span from that, and how it was actually a ridiculous argument.  No format is better than the other.
[21:59:08] <cousteau> (Except for little endian.) :)
[21:59:19] <cousteau> (...okay that was a personal opinion, sorry.)
[21:59:55] <mort> which format is better is dependent on the algorithm, some algorithms can be done streaming when little endian but not when big endian
[22:00:19] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.4)
[22:00:34] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:600b:877:2a65:889e)
[22:00:56] <mort> similar to how, if we wrote the least significant digits first and the most significant digit last, you could do a streaming decimal printer
[22:01:04] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[22:01:11] <cousteau> mathematically I think that LE makes more sense, since byte [0] represents 256^0, byte [1] is 256^1, byte [2] is 256^2, etc.  I also extend this to the numbering system; I think it'd make more sense to start with the ones.  (And that's kind of how it works for the Arabs, since they start from the ones side, i.e. the right)
[22:01:25] <cousteau> mort: yeah, for example for serializing/deserializing numbers
[22:01:42] <cousteau> serializing using mask and shift is easier if you want to serialize to little endian
[22:02:02] <cousteau> while (n) { send(n & 0xFF); n >>= 8; }
[22:02:04] <mort> I think big-endian makes sense in a varint base128 encoding for this exact reason
[22:02:17] <mort> little-endian*
[22:02:22] <cousteau> and deserializing using shift and or is easier if you want to deserialize from big endian
[22:02:36] <mort> print number % 128, divide by 128, print new number by 128, divide by 128 again, etc
[22:02:53] <cousteau> n = 0; while (buffer) { n <<= 8; n |= receive(); 
[22:03:05] <mort> if you deserialize from little endian you mean?
[22:03:09] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:600b:877:2a65:889e) (Ping timeout: 250 seconds)
[22:03:13] <cousteau> no, from big endian
[22:03:19] *** Joins: coodre (~user@105.154.232.88)
[22:03:26] <mort> oh, right
[22:03:32] <mort> yeah
[22:03:37] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 268 seconds)
[22:03:42] <cousteau> serializing to LITTLE endian, deserializing from BIG endian
[22:03:45] <cousteau> it's... weird
[22:04:00] <cousteau> no matter which one you choose, the algorithm will be asymmetric
[22:04:18] <mort> probably makes sense to use big endian throughout then if you have some kind of varint encoding.. because you already have the number when serializing so you can know ahead of time how many bytes you'll be using
[22:04:58] <mort> so you can always avoid using a temporary buffer with big endian, but only serialization can avoid using a temporary buffer with little endian
[22:05:21] <cousteau> as for binary data encodings, I've invented multiple encodings all of which happen to work better in little endian, but then again UTF-8 (which I didn't invent, just to clarify) uses big endian and that turns out to be advantageous when lexicographically ordering strings
[22:05:58] <emias> apotheon: 
[22:06:00] <emias> Standard ML of New Jersey v110.79 [built: Fri Oct 11 18:23:48 2019]
[22:06:02] <emias> - fun dbl(x) = let val x = x in print("foo"); x end
[22:06:04] <emias> = val dbl = fn : 'a -> 'a
[22:06:27] <emias> Er, it doesn't even _double_ x actually :-)
[22:06:35] <cousteau> (one of the encodings I invented consisted in writing the code point in blocks of 7 bits, starting with the LEAST significant 7-uple, marking all 7-uples with a leading 1, and the last (most significant) one with a 0)
[22:07:03] <cousteau> that way you ensured that the last byte would never be 00000000 (the null byte) except when encoding the U+0000 code point itself
[22:07:13] <cousteau> and this only worked if you used LE
[22:07:49] <cousteau> (or reversed the whole thing and used BE, so the first byte starts with 0 and the remaining bytes start with 1, but that was probably problematic)
[22:09:16] <mort> hmm, interesting
[22:09:49] <mort> I think my varint in my language's bytecode uses base-128 big endian, with 1 for bytes with continuations and 0 for the last byte
[22:09:49] <pragma-> cousteau: septuple
[22:10:09] <mort> so I will have 0-byte last bytes in there sometimes
[22:10:10] <cousteau> 7-uple
[22:10:15] <pragma-> heptuple
[22:10:30] <pragma-> lol, 7-uple. now i'm seeing the 7-up soda can.
[22:10:37] <cousteau> mort: I did that specifically to ensure C-compatible strings
[22:10:48] <mort> makes sense
[22:10:56] <cousteau> pragma-: it was 7-up, little-endian
[22:10:57] <pragma-> What the heck did 7-up even mean? Why is the soda called 7-up?
[22:10:58] <cousteau> 7-up LE
[22:11:12] <cousteau> because it has 7 ingredients, duh
[22:11:14] <mort> that means you need to buffer when deserializing right?
[22:11:16] * cousteau totally made up that
[22:11:59] <pragma-> The product, originally named "Bib-Label Lithiated Lemon-Lime Soda", ...
[22:12:18] <pragma-> It contained lithium citrate, a mood-stabilizing drug, until 1948.
[22:12:34] <pragma-> Coca-cola actually used to contain coca too.
[22:12:52] <cousteau> The product, originally named "Bib-Label Lithiated Lemon-Lime Soda", was launched two weeks before the Wall Street Crash of 1929.[2] It contained lithium citrate, a mood-stabilizing drug, until 1948.[3][4] It was one of a number of patent medicine products popular in the late-19th and early-20th centuries.
[22:13:00] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:13:02] <pragma-> welcome to 5 minutes ago
[22:13:05] <mort> the world seems like it was so much fun when soft drinks could just contain drugs like that
[22:13:09] <mort> terrible, but fun
[22:13:26] *** Joins: novns (~novns@user/novns)
[22:13:27] <cousteau> back in the day soft drinks used to contain psycho-altering drugs, it seems
[22:13:35] <cousteau> coca-cola...
[22:13:35] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:600b:877:2a65:889e)
[22:13:40] <pragma-> I SAID ALL THIS!
[22:13:45] * pragma- gestures frantically.
[22:13:52] <cousteau> I WAS BUSY LOOKING IT UP, OKAY?
[22:14:08] <mort> I'd bet it didn't *really* do that much to improve the taste but just made you literally addicted to the product
[22:14:26] <cousteau> "Its name was later shortened to "7 Up Lithiated Lemon Soda"" okay, but... why?
[22:14:50] <cousteau> lithium's atomic weight is 7 (sometimes 6, but mostly 7), maybe that's why?
[22:14:57] <cousteau> and UP is Uranium Potassium
[22:15:06] <cousteau> okay I have no idea what's up
[22:15:10] <cousteau> (badum-tss)
[22:15:35] <mort> maybe it contains 7 UP molecules
[22:15:43] <cousteau> ah, the very next paragraph speculates about the origin of the name
[22:15:46] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[22:15:49] <mort> with enough will there's probably a way to combine uranium and potassium into a molecule
[22:15:50] <cousteau> damn, I should read more before typing
[22:16:13] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:600b:877:2a65:889e) (Ping timeout: 240 seconds)
[22:16:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:16:16] *** Joins: ffguest (~ff@178.151.94.123)
[22:16:40] <cousteau> "Britvic claims that the name comes from the seven main ingredients in the drink" -- I knew it!  Although it seems that this Britvic made that up as much as I just did some minutes ago
[22:16:57] <cousteau> oh wow, they also speculate about the atomic mass
[22:17:06] *** Quits: ffguest (~ff@178.151.94.123) (Client Quit)
[22:17:07] <cousteau> see?  people are as messed up in the head as I am
[22:19:19] <apotheon> no comment
[22:23:19] *** Joins: Burgundy (~yomon@79.115.213.171)
[22:24:29] *** Joins: WAR10CK (~WAR10CK@14.223.182.168)
[22:24:41] *** Parts: WAR10CK (~WAR10CK@14.223.182.168) ()
[22:26:23] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[22:27:14] *** Joins: novns (~novns@user/novns)
[22:30:35] <apotheon> I seem to recall hearing the "seven ingredients" explanation in the early '80s.
[22:30:44] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 268 seconds)
[22:32:24] *** Joins: meator (~meator@user/meator)
[22:33:18] *** Quits: bbju (~bbju@103.144.149.218) (Quit: Client closed)
[22:35:00] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[22:37:02] *** Parts: freakazoid12345 (~matt@2603:9000:cf0f:80e3:600b:877:2a65:889e) (Leaving)
[22:38:56] <tdg> emias: you can do the same thing in haskell... double x = let y = unsafePerformIO $ newIORef [] in 3
[22:39:04] <tdg> like i said, haskell makes all of this optional.
[22:39:22] <tdg> it's not a pure language, it just gives you the choice to abstract things that you want to abstract around some mathematically-derived interfaces
[22:42:55] *** Joins: donutfarian (~donutfari@2601:140:9180:5e40:f2fc:59a5:f993:732c)
[22:44:01] *** Joins: WAR10CK (~WAR10CK@14.223.182.168)
[22:44:31] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Ping timeout: 245 seconds)
[22:45:43] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[22:46:26] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[22:47:08] *** Quits: WAR10CK (~WAR10CK@14.223.182.168) (Quit: Leaving)
[22:47:37] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[22:48:03] *** Joins: novns (~novns@user/novns)
[22:53:35] *** Quits: alch (~alch@151.82.34.39) (Read error: Connection reset by peer)
[22:54:31] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (Quit: leaving)
[22:54:50] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[22:56:36] *** Joins: vicfred (~vicfred@user/vicfred)
[22:57:41] *** Joins: alch (~alch@151.68.124.189)
[22:57:43] *** Joins: WAR10CK (~WAR10CK@14.223.182.168)
[22:58:33] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:01:15] *** justSleigh is now known as justIrresolute
[23:02:38] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[23:07:10] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[23:08:54] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[23:09:20] *** Joins: kish` (~sid742412@user/aqua)
[23:10:54] *** Joins: u0_a3911 (~u0_a391@2600:380:5822:b031:de78:595:82e8:a8)
[23:15:05] *** Quits: donutfarian (~donutfari@2601:140:9180:5e40:f2fc:59a5:f993:732c) (Ping timeout: 250 seconds)
[23:15:08] *** Quits: u0_a391 (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com) (Ping timeout: 268 seconds)
[23:16:01] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:17:01] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[23:18:42] <emias> tdg: I'm getting too old for this kind of IRC discussion :-)  Yes with `unsafePerformIO` all guarantees are gone, like Rust's guarantees go south with `unsafe`.  If the existence of a mechanism to escape the usual guarantees is equivalent to those guarantees being non-existent, then I'm obviously wrong, Haskell is impure, Rust provides no memory safety mechanisms, whatever.
[23:19:14] *** Joins: black_13 (~jjosb@cpe-173-174-194-178.satx.res.rr.com)
[23:21:34] *** Joins: agonhajdari (~textual@user/agonhajdari)
[23:21:38] *** Joins: katp32 (~katp32@S010680ea96e8dbba.vc.shawcable.net)
[23:22:05] <emias> There's also ways to enforce strict evaluation, so it's not lazy either.  In the end it's a C-like language.
[23:23:03] <tdg> emias: pulling a strawman doesn't really detract from the point that these things are optional and saying it has no useful features is as misleading as it is to say it's a pure language... neither are true. 
[23:23:08] <katp32> hey, is there a way to indicate to the compiler that a function will never be called recursively? I know I can declare variables as static to make them statically allocated rather than put on the stack, but is there any other changes I can make?
[23:23:15] <tdg> any useful systems programming in rust or haskell breaks its intended design
[23:23:30] <tdg> i'm sorry but the real world isn't a topos
[23:23:55] <katp32> (are we talking about rust, the most Secure(tm) programming language?)
[23:24:06] <tdg> katp32: just tail end of a prior topic dragging on
[23:25:50] <emias> tdg: So there's no difference whatsoever in how side-effects are handled within Haskell compared to, say, C?
[23:26:13] <tdg> emias: of course there is, that's exactly what i said in my last message to you.
[23:26:17] <emias> tdg: Or is there a difference and purity is just the wrong term for describing it?
[23:26:36] <tdg> i think it's a very misleading term, yeah
[23:27:19] <emias> So we're just discussign term definitions.
[23:27:28] <tdg> i think there are things that are useful about having a type system that can encode side effects and best practice being to do so, but sometimes it makes life harder and this is when you want it gone. IMO it's a *good* thing that haskell lets this happen, as otherwise it wouldn't be a very useful language
[23:27:44] <tdg> same is true with rust... rust without unsafe {} is a very crappy language
[23:27:54] <tdg> it's unsafe {} that makes it viable for systems code
[23:27:57] *** Akuli is now known as akuli
[23:28:00] *** akuli is now known as Akuli
[23:32:17] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[23:32:20] <emias> Sure, don't think any of that has been questioned.
[23:32:33] *** Joins: magla (~gelignite@55d48f64.access.ecotel.net)
[23:32:54] *** Quits: diiirt (~diiirt@user/diiirt) (Remote host closed the connection)
[23:33:43] *** Joins: diiirt (~diiirt@user/diiirt)
[23:35:24] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[23:38:55] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[23:39:27] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:40:40] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[23:41:00] *** Joins: rgrinberg (~textual@200.68.178.168)
[23:49:42] *** Quits: rgrinberg (~textual@200.68.178.168) (Read error: Connection reset by peer)
[23:50:13] <floatcomplex> the very nomenclature of rust implies that memory safety is the only kind of safety that matters
[23:51:12] <floatcomplex> and, that code which has the potential to be memory-unsafe, is so
[23:51:28] <floatcomplex> neither of those are true, and pretending they are is harmful
[23:51:48] *** Joins: rgrinberg (~textual@187.223.78.219)
[23:54:00] *** Quits: WAR10CK (~WAR10CK@14.223.182.168) (Quit: Leaving)
[23:57:26] *** Joins: Everything (~Everythin@37.115.210.35)
[23:58:13] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
