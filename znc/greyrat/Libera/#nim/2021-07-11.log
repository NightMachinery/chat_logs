[00:59:18] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3sAn
[00:59:50] <FromDiscord> <Ayy Lmao> (edit) "https://play.nim-lang.org/#ix=3sAn" => "https://play.nim-lang.org/#ix=3sAo"
[00:59:58] *** Quits: emery (~quassel@2a03:3b40:fe:ab::1) (Ping timeout: 246 seconds)
[01:00:01] <FromDiscord> <ElegantBeef> sent a code paste, see https://play.nim-lang.org/#ix=3sAp
[01:00:03] <FromDiscord> <ElegantBeef> Soon atleast
[01:01:42] <FromDiscord> <Ayy Lmao> In reply to @ElegantBeef "Well it's going to": You mean that is going to be possible even with name conflicts soon?
[01:01:53] <FromDiscord> <ElegantBeef> Well whenever this PR gets finished yes
[01:01:59] <FromDiscord> <ElegantBeef> https://github.com/nim-lang/Nim/pull/18470
[01:02:01] <FromDiscord> <Ayy Lmao> That will be awesome
[01:03:19] <FromDiscord> <Ayy Lmao> I've always found it verbose to fully qualify pure enums, but hated the idea of not using pure enums
[01:04:19] <FromDiscord> <ElegantBeef> Join the club
[01:06:24] <FromDiscord> <Ayy Lmao> I wonder if it will work when passing to proc arguments that expect an enum field as well
[01:07:10] <FromDiscord> <ElegantBeef> Based off the test he's written i dont know if it's supposed to error or supposed to work ðŸ˜„
[01:07:23] <FromDiscord> <ElegantBeef> sent a code paste, see https://play.nim-lang.org/#ix=3sAt
[01:09:32] <FromDiscord> <Ayy Lmao> Hopefully it's meant to work.
[01:14:57] *** Joins: emery (~quassel@2a03:3b40:fe:ab::1)
[01:41:50] <FromDiscord> <exelotl> mannn I'm trying to build a simple program with wNim but it takes so long to build every time
[01:42:04] <FromDiscord> <exelotl> very much looking forward to IC
[01:42:28] <FromDiscord> <ElegantBeef> Are you using the dsl?
[01:45:00] <FromDiscord> <exelotl> yes but it's not the bottleneck
[01:45:45] <FromDiscord> <exelotl> just the sheer number of modules (and probably the amount of macros being used in those modules) x)
[01:48:05] <FromDiscord> <ElegantBeef> Just use devel with `--ic:on` and hope nothing explodes ðŸ˜›
[01:51:43] <FromDiscord> <dom96> anybody with experience grabbing crypto price data, what's the best API (preferably free) for this?
[02:08:23] <FromDiscord> <Ayy Lmao> @dom96 I was messing around with making a crypto bot a while ago, I was using the binance API. Binance is pretty much the authority on what the price should be of most cryptos
[02:13:49] <FromDiscord> <dom96> cool, looks like they provide some nice websocket streams
[02:18:51] <FromDiscord> <Ayy Lmao> Yeah you can do websocket for realtime price data and http requests for past market data
[02:37:50] <FromDiscord> <glasso> sent a code paste, see https://play.nim-lang.org/#ix=3sAO
[02:38:17] <FromDiscord> <Elegantbeef> annotated the procedure with `{.cdecl.}`
[02:38:28] <FromDiscord> <glasso> (edit) "https://play.nim-lang.org/#ix=3sAO" => "https://play.nim-lang.org/#ix=3sAP"
[02:38:47] <FromDiscord> <ElegantBeef> Nim has calling conventions which if they dont match causes mismatches
[02:39:16] <FromDiscord> <glasso> In reply to @Elegantbeef "annotated the procedure with": It worked ^^â†µâ†µI am new to Nim, I dont understand how pragma works...
[02:39:20] <FromDiscord> <glasso> Thanks
[02:39:35] <FromDiscord> <ElegantBeef> In this case these pragmas just change how the undelying code is written
[02:39:53] <FromDiscord> <glasso> In reply to @ElegantBeef "In this case these": I don't like this :9
[02:39:53] <FromDiscord> <ElegantBeef> https://nim-lang.org/docs/manual.html#types-procedural-type it's explained here
[02:39:55] <FromDiscord> <glasso> ðŸ˜¦
[02:40:12] <FromDiscord> <ElegantBeef> There's a reason it exists and as such it's useful
[02:40:45] <FromDiscord> <ElegantBeef> Nim devel has a change in the error messages from procedure pragma mismatches which makes this less of a "What's the issue?!"
[02:41:24] <FromDiscord> <ElegantBeef> `tproc_mismatch.nim(69, 9) Error: type mismatch: got <proc (a: int): int{.nimcall.}> but expected 'proc (a: int): int{.cdecl.}'â†µ  Calling convention mismatch: got '{.nimcall.}', but expected '{.cdecl.}'.â†µ`
[02:41:37] <FromDiscord> <ElegantBeef> Notice the mention of calling convention mismatch
[02:42:12] <FromDiscord> <glasso> I think this makes easier for newcomers
[02:42:17] <FromDiscord> <ElegantBeef> It also shows pragma mismatches so if you try to pass a non `gcSafe` to a `gcSafe` proc
[02:42:33] <FromDiscord> <ElegantBeef> Well it's also just more readable which is why i did it ðŸ˜›
[02:42:56] <FromDiscord> <ElegantBeef> There are a few more PRs that aid to increase readability presently being worked on
[02:55:52] <FromDiscord> <exelotl> hmmm does anyone know how I can start a process and then terminate my program without killing the process?
[02:56:31] *** Joins: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[02:56:31] *** Quits: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Changing host)
[02:56:31] *** Joins: beshr (~beshr@user/beshr)
[03:03:13] <FromDiscord> <exelotl> ah startProcess seems to work
[03:42:41] <fn> <11ForumUpdaterBot99> New post on r/nim by richardd08: Does nim have context managers, tuple unpacking or abstract base classes?, see https://reddit.com/r/nim/comments/oht2s0/does_nim_have_context_managers_tuple_unpacking_or/
[03:50:33] *** Quits: max22- (~maxime@2a01cb0883359800e8362f8bd3aea055.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[04:30:20] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 255 seconds)
[05:23:29] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:30:52] *** Joins: MightyJoe (~joe@201.159.98.32)
[05:32:11] *** Quits: cyraxjoe (~joe@201.159.98.32) (Ping timeout: 252 seconds)
[05:34:01] *** Quits: beshr (~beshr@user/beshr) (Ping timeout: 246 seconds)
[05:34:02] *** Joins: bkay (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[06:00:51] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[06:02:06] *** Joins: vicfred (~vicfred@user/vicfred)
[06:27:59] <FromDiscord> <Rika> In reply to @glasso "I don't like this": Oh man then youâ€™re not gonna like Nim
[06:30:06] *** Quits: MightyJoe (~joe@201.159.98.32) (Ping timeout: 252 seconds)
[07:03:52] <FromDiscord> <hamidb80> In reply to @Rika "Oh man then youâ€™re": +1
[07:06:27] <FromDiscord> <hamidb80> https://nimble.directory/docs/optionsutils//optionsutils.htmlâ†µ@ElegantBeef what's this? ðŸ˜†
[07:06:43] <FromDiscord> <ElegantBeef> What's what?
[07:06:52] <FromDiscord> <hamidb80>  https://media.discordapp.net/attachments/371759389889003532/863609756085387314/unknown.png
[07:06:56] <FromDiscord> <hamidb80> optionutils documentations
[07:07:15] <FromDiscord> <ElegantBeef> Why would i know why they arent showing
[07:07:47] <FromDiscord> <hamidb80> In reply to @ElegantBeef "Why would i know":  https://media.discordapp.net/attachments/371759389889003532/863609985463222302/unknown.png
[07:08:11] <FromDiscord> <ElegantBeef> I'm not a maintainer, i made a single PR
[07:25:39] <FromDiscord> <Bung> @haxscramper how I contruct jsonnode from pnode ?
[07:31:39] <FromDiscord> <ElegantBeef> From looking at what was shared you iterate the node based off the expected type and just convert that to the coresponding type
[07:34:43] <FromDiscord> <ElegantBeef> I will eventually get to doing what hax suggested, just requires supporting case objects, tuples, objects, and primitives ðŸ˜„
[07:34:50] <FromDiscord> <ElegantBeef> Actually primitives are simple
[07:34:59] <FromDiscord> <ElegantBeef> The objects/tuples are the complex stuff
[07:51:55] *** Quits: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5) (Ping timeout: 256 seconds)
[08:21:48] <FromDiscord> <Bung> `proc fromVm(t: typedesc[JsonNode], node: PNode): string =â†µ  discard` this is what I have..
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[10:29:11] *** Joins: max22- (~maxime@2a01cb08833598000353aae4ccbc2733.ipv6.abo.wanadoo.fr)
[10:29:29] *** Quits: max22- (~maxime@2a01cb08833598000353aae4ccbc2733.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[10:29:51] *** Joins: max22- (~maxime@2a01cb08833598000353aae4ccbc2733.ipv6.abo.wanadoo.fr)
[10:38:54] *** Quits: [R] (~rs@genoce.org) (Quit: No Ping reply in 180 seconds.)
[10:39:02] *** Joins: [R] (~rs@genoce.org)
[10:56:22] *** Quits: max22- (~maxime@2a01cb08833598000353aae4ccbc2733.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[11:02:26] *** Joins: max22- (~maxime@2a01cb088335980064ad9c839a7e11d6.ipv6.abo.wanadoo.fr)
[11:10:56] <FromDiscord> <haxscramper> In reply to @Bung "<@!608382355454951435> how I contruct": You write a code that converts PNode to JsonNode, there is no built-in support for that. Might want to use treefrom/jsony
[11:11:19] <FromDiscord> <haxscramper> If you need to work with a VM json node is not different from any other type
[11:12:25] <FromDiscord> <haxscramper> In reply to @ElegantBeef "The objects/tuples are the": If you don't want to implement object declaration unparsing for a millionth time you can use hnimast - it has all the necessary primitives for serialization implementation
[11:13:48] <FromDiscord> <haxscramper> https://github.com/haxscramper/nimtraits/blob/867e173e9ff8ff58e6fe1eacfa539b59823a3c0f/src/nimtraits/trait_xml.nim#L81 for XML serialization example
[11:14:25] <FromDiscord> <haxscramper> Pnode represents all things as a flat list of ExprEqExpr
[11:14:36] <FromDiscord> <haxscramper> ColonExpr
[11:14:41] <FromDiscord> <ElegantBeef> Well there is no point for serialization when given the known type and Pnode
[11:14:54] <FromDiscord> <ElegantBeef> go from a Pnode to a given generic
[11:15:02] <FromDiscord> <ElegantBeef> (edit) "generic" => "type"
[11:15:07] <FromDiscord> <haxscramper> Type -> PNode isn't a serialization?
[11:15:51] <FromDiscord> <ElegantBeef> Misunderstood the implication
[11:16:10] <FromDiscord> <haxscramper> I think it can be called that, the only difference that I generate PNode and not json. Anyway, it's just a matter of terminology
[11:18:13] <FromDiscord> <ElegantBeef> But yea i'll see what i can do with it, since i know the type i want/know what it needs to be i can probably just go straight to/from
[11:19:46] <FromDiscord> <whyy cant i install choosenim> why does nim have all da libx dependencies
[11:28:11] <FromDiscord> <Bung> It looks like need implement every types are not primitive ?
[11:37:27] <FromDiscord> <ElegantBeef> Yep, you need to convert the list of `a: b` to  objects
[11:37:37] <FromDiscord> <ElegantBeef> I will get to it eventually
[12:00:42] *** Joins: Vladar (~Vladar@46.162.2.53)
[12:04:10] *** Quits: max22- (~maxime@2a01cb088335980064ad9c839a7e11d6.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[12:09:06] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[12:11:28] *** Joins: maxime_ (~maxime@2a01cb088335980076555acacb01bc03.ipv6.abo.wanadoo.fr)
[12:13:58] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[12:42:41] <FromDiscord> <hamidb80> i wish i could change evaluation priority in macros
[12:46:30] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[12:49:34] <FromDiscord> <ElegantBeef> Why?
[12:55:10] <FromDiscord> <hamidb80> sent a code paste, see https://play.nim-lang.org/#ix=3sD0
[12:55:26] <FromDiscord> <hamidb80> (edit) "https://play.nim-lang.org/#ix=3sD0" => "https://paste.rs/Cf9"
[12:55:42] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Quit: Bridge terminating on SIGTERM)
[12:55:42] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Quit: Bridge terminating on SIGTERM)
[12:55:42] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Quit: Bridge terminating on SIGTERM)
[12:55:56] <FromDiscord> <hamidb80> (edit) "https://play.nim-lang.org/#ix=3sD2" => "https://play.nim-lang.org/#ix=3sD1"
[12:56:02] <FromDiscord> <hamidb80> (edit) "https://play.nim-lang.org/#ix=3sD1" => "https://paste.rs/dnP"
[12:56:42] <FromDiscord> <hamidb80> i notices this problem also in https://github.com/disruptek/cps
[12:56:44] <fn> <12R2D299> 4GitHub: 7"Continuation-Passing Style for Nim ðŸ”—"
[12:58:03] <FromDiscord> <hamidb80> when the `cps` macro collects all of the enviroment vars into an object
[12:59:01] <FromDiscord> <hamidb80> it cant detect other format of variable declaration
[12:59:03] <FromDiscord> <hamidb80> like in https://github.com/technicallyagd/unpack
[12:59:03] *** Joins: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1)
[12:59:05] <fn> <12R2D299> 4GitHub: 7"sequence/object unpacking/destructuring for nim"
[12:59:05] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[12:59:19] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[12:59:27] <FromDiscord> <hamidb80> does it make sense?
[12:59:48] <FromDiscord> <hamidb80> (edit) "does it ... make" 03added "[my opinion]"
[13:14:48] <FromDiscord> <Rika> What would the solution be though?
[13:18:36] *** Quits: bkay (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Quit: Leaving)
[13:18:52] *** Joins: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[13:18:52] *** Quits: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Changing host)
[13:18:52] *** Joins: beshr (~beshr@user/beshr)
[13:20:19] <FromDiscord> <haxscramper> Accept typed AST, it will expand before being passed to macro
[13:20:35] <FromDiscord> <haxscramper> In reply to @hamidb80 "sometimes i need to": It would solve this problem
[13:26:54] <FromDiscord> <Bung> Can i get current `ConfigRef` ?
[13:29:48] <FromDiscord> <haxscramper> From module graph?
[13:30:49] <FromDiscord> <Bung> in template , I want call compiler/options.nim findModule
[13:31:49] <FromDiscord> <Bung> sent a code paste, see https://play.nim-lang.org/#ix=3sDh
[13:31:59] <FromDiscord> <Bung> this is what am trying to do
[13:32:11] <FromDiscord> <haxscramper> Pnode is untyped?
[13:32:36] <FromDiscord> <Bung> h is a module name , sym in ast
[13:33:53] <FromDiscord> <haxscramper> You can't conflate symbols from compilation time (what you import) and runtime (processed by compiler package)
[13:39:40] <FromDiscord> <Bung> so that would be not possible, if I manual handle path it'll only works user not have extro --path specified.
[13:40:46] <FromDiscord> <haxscramper> You can, in theory, get instantiation info from module symbol at compile-time
[13:41:02] <FromDiscord> <haxscramper> And get source code path
[13:41:41] <FromDiscord> <Bung> hmm , thought I just need files from source dir and nimble that will be fine, just need manually handle imports pnode to path.
[14:05:36] <FromDiscord> <PressF> sent a code paste, see https://play.nim-lang.org/#ix=3sDt
[14:06:39] <FromDiscord> <vindaar> sent a code paste, see https://play.nim-lang.org/#ix=3sDw
[14:07:31] <FromDiscord> <vindaar> (often it's clearer to define the procs you want to hand as their own type, e.g. `type FooProcs = proc(x: int)` and then just write `p: FooProcs` in the signature)
[14:09:17] <FromDiscord> <PressF> could I use generics for that?
[14:09:35] <FromDiscord> <vindaar> sure you can
[14:10:18] <FromDiscord> <Rika> you have to be mindful to pass the right arg types in that case
[14:11:12] <FromDiscord> <vindaar> ^ yup
[14:18:28] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[14:24:32] <FromDiscord> <PressF> I guess it's time to learn nim generics hahah. Thx
[14:31:41] <FromDiscord> <InventorMatt> @PressF you could also do it kind of like this https://play.nim-lang.org/#ix=3sDG
[14:32:51] <FromDiscord> <sealmove> Damn I can't get this right. I want to brute force binary data until I find a match. How do I check length-by-length (first '0' then, '1' then '00', then '01') instead of going '0' -> '00' -> '000' -> ... infinity)?
[14:34:24] <FromDiscord> <Rika> on NPEG?
[14:34:44] <FromDiscord> <sealmove> no, just regular code. let's say the digits are in a string.
[14:35:38] <FromDiscord> <Rika> i dont see the issue with just iterating through the string and seeing what the value of the char is
[14:35:58] <FromDiscord> <Rika> its not like theres an instance where you backtrack, its only two choices
[14:37:42] <FromDiscord> <sealmove> I know, that's why I am surprised I can't get it right. Well, I don't have fixed strings to check. I want to gradually generate all possible combinations and pass each combination to a proc which checks if the sequence is matched based on some criteria.
[14:39:08] <FromDiscord> <Rika> "all possible combinations" can only be done if you can constrain the length...
[14:39:14] <FromDiscord> <sealmove> really?
[14:39:31] <FromDiscord> <sealmove> why can't I check length-by-length?
[14:39:32] <FromDiscord> <Rika> i mean wait
[14:39:33] <FromDiscord> <Rika> rather
[14:39:43] <FromDiscord> <Rika> yes i know
[14:39:53] <FromDiscord> <Rika> its possible to "collapse it"
[14:40:01] <FromDiscord> <Rika> but as it is its impossible, i was just unclear
[14:40:22] <FromDiscord> <Rika> so how would you pass "all combinations" to a proc?
[14:41:26] <FromDiscord> <sealmove> my thinking is to check combinations 1-by-1 until a match is found. First check all 1-digit seqs, then all 2-digit seqs, then all 3-digit seqs etc.
[14:42:01] <FromDiscord> <Rika> is this criteria basing against the whole data or just each digit?
[14:42:08] <FromDiscord> <sealmove> whole data
[14:42:47] <FromDiscord> <Rika> ok sorry im trying to understand why you're getting 0 -> 00 -> 000...
[14:43:11] <FromDiscord> <sealmove> because I don't know how to generate the combinations in the correct order >_<
[14:43:25] <FromDiscord> <Rika> if the data is rejected, remove the last digit and get the next possible digitâ†µif the data is not rejected, continue
[14:43:52] <FromDiscord> <sealmove> but for example 010 might be invalid but 0101 valid
[14:43:56] <FromDiscord> <Rika> (edit) "continue" => "add the next digit (initial)"
[14:44:00] <FromDiscord> <Rika> hm
[14:44:16] <FromDiscord> <Rika> okay let me think more then
[14:44:38] <FromDiscord> <sealmove> thanks, surprisingly it's non-trivial...
[14:44:55] <FromDiscord> <Rika> i dont think thats possible then, what if 0(a billion 0s later)1 is the only valid value?
[14:45:33] <FromDiscord> <Rika> what if a massive amount of 0s is the only valid value?
[14:45:39] <FromDiscord> <sealmove> i don't care, I assume a correct value will be of a reasonable length
[14:45:57] <FromDiscord> <sealmove> that being said I can't constrain it to a specific length
[14:45:58] <FromDiscord> <Rika> okay, so what is the reasonable length?
[14:46:59] <FromDiscord> <sealmove> well, I don't want to set a magic value if I don't have to. I assume there is a way to search length-by-length. I don't care if there is chance the program won't stop running.
[14:47:28] <FromDiscord> <sealmove> since it's brute-force, it will run until it finds a match
[14:48:37] <FromDiscord> <enthus1ast> the issue is that you do not now the "0" padding
[14:49:14] <FromDiscord> <enthus1ast> so either\:    00001    or    1   is the valid value
[14:49:41] <FromDiscord> <sealmove> no that's not an issue, let's say we work with strings
[14:49:49] <FromDiscord> <Rika> ?
[14:49:51] <FromDiscord> <sealmove> 00001 is different from 1
[14:49:54] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3sDO
[14:51:01] <FromDiscord> <sealmove> hmm ok Rika, I'll look into it. Although I am curious of how to generate the permutations myself.
[14:51:11] <FromDiscord> <Rika> its also in narimiran's itertools
[14:51:19] <FromDiscord> <Rika> actually
[14:51:23] <FromDiscord> <Rika> no i dont think itrs permutations you want
[14:51:33] <FromDiscord> <Rika> i forgot what exactly the thing is you want
[14:51:56] <FromDiscord> <Rika> but its somewhat related but not very similar to permutations
[14:52:01] <FromDiscord> <enthus1ast> @sealmove\:  yes but when you do not know the zero padding you cannot really bruteforce since it could be any amounth of zeros
[14:52:34] <FromDiscord> <sealmove> In reply to @enthus1ast "<@173424250319929344>\:  yes but": how is padding relevant?
[14:52:49] <FromDiscord> <enthus1ast> "00001"  != "01"
[14:52:57] <FromDiscord> <sealmove> yes?
[14:53:35] <FromDiscord> <Rika> but as said above before, "i don't care, I assume a correct value will be of a reasonable length"
[14:55:06] <FromDiscord> <enthus1ast> if you do not know the length then you must also bruteforce the length
[14:55:29] <FromDiscord> <sealmove> In reply to @enthus1ast "if you do not": sure
[14:55:32] <FromDiscord> <Rika> https://stackoverflow.com/questions/29718294/how-to-get-nth-permutation-when-repetition-is-allowed might help (yes its java but i think this is what you want exactly regarding the permutation part i mentioned in the almost pseudocode)
[14:55:48] <FromDiscord> <sealmove> In reply to @enthus1ast "if you do not": hmm, oh, obvious but actually usefull insight maybe
[14:56:11] <FromDiscord> <Rika> yeah that's what i did in the code
[14:56:14] <FromDiscord> <Rika> `i` is the length
[14:56:34] <FromDiscord> <sealmove> i see, ok I think it's more clear now.
[14:56:38] <FromDiscord> <Rika> then you get permutations w/ repetition of `0, 1`
[14:57:08] <FromDiscord> <Rika> there might be a more smart idea of course
[15:01:39] <FromDiscord> <Bung> how I convert string to symbol in template ?
[15:02:02] <FromDiscord> <sealmove> what do you mean by 'symbol'?
[15:02:31] <FromDiscord> <Bung> like module name I just imported
[15:03:42] <FromDiscord> <Rika> strtoast or something i forget the names of procs easily
[15:03:51] <FromDiscord> <Rika> might be in the std/macros module
[15:03:55] <FromDiscord> <sealmove> there is ident()
[15:04:05] <FromDiscord> <sealmove> not sure if this is what you want
[15:04:58] <FromDiscord> <Bung> it will throw `Error: undeclared identifier: 'newIdentNode`
[15:06:04] <FromDiscord> <Bung> oh , macros need visible in call side..
[15:08:01] <FromDiscord> <sealmove> you need to import the macros module
[15:08:24] *** Joins: arkurious (~arkurious@user/arkurious)
[15:10:07] <FromDiscord> <sealmove> enthus1ast thanks, thanks to your insight I solved the issue.
[15:13:09] <FromDiscord> <Bung> well, it convert to NimNode, how to convert it to resolved type ?
[15:15:11] <FromDiscord> <sealmove> there are two kinds of macros, typed and untyped. if you are using untyped, then you lose type info and can't resolve it. You are just generating AST and the identifier must be valid after the macro expansion.
[15:15:49] <FromDiscord> <sealmove> if you can provide more info about what you are doing so we can helop
[15:16:33] <FromDiscord> <Bung> https://play.nim-lang.org/#ix=3sDZ
[15:16:40] <FromDiscord> <Bung> see here is what am trying to do
[15:17:06] <FromDiscord> <Bung> I tried to change template to macro but I will not get instantiationInfo
[15:18:21] <FromDiscord> <Bung> I can push to github if you need full code
[15:19:23] <FromDiscord> <haxscramper> Generate a call to macro that accepts `typed` argument
[15:19:23] <FromDiscord> <haxscramper> And semcheck will resolve identifiers to types, but as sealmove just said the code must be fully valid
[15:19:23] <FromDiscord> <haxscramper> You need to implement it as multistage macroâ†µ(@Bung)
[15:21:39] <FromDiscord> <haxscramper> It just hurts to see three intermediate variables for that
[15:21:40] <FromDiscord> <haxscramper> For macros you use https://nim-lang.org/docs/macros.html#lineInfoObj%2CNimNode for arguments
[15:21:40] <FromDiscord> <haxscramper> Can use \<\> to get location of the arguments\
[15:21:52] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3sE0
[15:23:03] <FromDiscord> <PsychoClay> how to echo a pointer?
[15:23:56] <FromDiscord> <haxscramper> `echo cast[int](<pointer>)` or `echo <pointer>.repr`
[15:26:30] <FromDiscord> <Bung> lineInfoObj solve the problem.
[15:28:19] <FromDiscord> <Bung> `Error: cannot 'importc' variable at compile time; stderr` compiler.options has `if terminal.isatty(stderr)`
[15:33:11] <FromDiscord> <Bung> hmm, so much proc cant call in compile time.
[15:34:26] <FromDiscord> <haxscramper> Well, of course you can't use compiler API at compile-time
[15:34:32] <FromDiscord> <haxscramper> It is only for C backend
[15:39:10] *** Quits: maxime_ (~maxime@2a01cb088335980076555acacb01bc03.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[15:39:27] *** Joins: maxime_ (~maxime@2a01cb08833598000d08f3550e0aaec8.ipv6.abo.wanadoo.fr)
[15:39:41] <FromDiscord> <PressF> sent a long message, see http://ix.io/3sEa
[15:39:49] <FromDiscord> <Rika> wait wait wait i dont remember what i said
[15:39:50] <FromDiscord> <Rika> lmao
[15:39:57] <FromDiscord> <Rika> nim doesnt have eval yes
[15:40:22] <FromDiscord> <Rika> actually theres prolly a 3rd party lib that can run nimscript on runtime
[15:42:05] <FromDiscord> <haxscramper> https://github.com/beef331/nimscripter
[15:42:07] <fn> <12R2D299> 4GitHub: 7"Quick and easy Nim <-> Nimscript interop"
[15:43:43] <FromDiscord> <haxscramper> https://github.com/dsrw/enu
[15:43:44] <FromDiscord> <haxscramper> I think enu uses similar approach to what you are trying to do @PressF
[15:43:44] <FromDiscord> <haxscramper> https://www.youtube.com/watch?v=AW0PT9j976s
[15:43:45] <fn> <12R2D299> 4GitHub: 7"A Logo-like DSL for Godot, implemented in Nim"
[15:43:47] <fn> <12R2D299> 4Youtube: 7"Early Enu Demo"
[15:45:32] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[15:45:56] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:49:04] <FromDiscord> <PressF> In reply to @haxscramper "https://github.com/beef331/nimscripter": Thx. I'll try it
[16:22:58] <FromDiscord> <whyy cant i install choosenim> Ä“nÅ«
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:39:38] *** Quits: aeverr (~deodex@ai126162145141.56.access-internet.ne.jp) (Remote host closed the connection)
[16:40:06] *** Joins: aeverr (~deodex@ai126162145141.56.access-internet.ne.jp)
[17:12:35] *** Quits: maxime_ (~maxime@2a01cb08833598000d08f3550e0aaec8.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[17:26:27] *** Joins: maxime_ (~maxime@2a01cb08833598003744cd03d7b531bc.ipv6.abo.wanadoo.fr)
[17:44:21] <FromDiscord> <haxscramper> IRC logs is now missing all anchors for message timestamps, or I'm missing something?
[17:44:37] <FromDiscord> <haxscramper> For example `https://irclogs.nim-lang.org/18-08-2012.html#21:14:15` does't link to a message
[17:45:07] <FromDiscord> <haxscramper> Tried chrome and firefox
[17:46:57] <FromDiscord> <haxscramper> Actually no, it only applies to logs from 2021
[17:46:57] <FromDiscord> <haxscramper> Actually no, it only applies to logs from 2012
[17:47:19] <FromDiscord> <Rika> so is it 2021 or 2012
[17:47:29] <FromDiscord> <haxscramper> 12
[18:02:15] <FromDiscord> <dom96> yes, old logs are static html
[18:02:20] <FromDiscord> <dom96> so timestamps don't work
[18:24:39] *** Quits: maxime_ (~maxime@2a01cb08833598003744cd03d7b531bc.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[18:31:24] *** Joins: maxime_ (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[18:50:21] <FromDiscord> <shadow.> has anyone gotten the nim.nvim plugin working with coc.nvim?
[18:50:38] <FromDiscord> <shadow.> i'm currently using coc.nvim with nimlsp as a custom language server but i'm kind of underwhelmed by the performance so i want to try out nim.nvim
[18:50:48] <FromDiscord> <shadow.> but i don't wanna install another completion engine just for one plugin
[18:53:00] *** Joins: cyraxjoe (~joe@201.159.98.32)
[18:55:47] <FromDiscord> <Bung> I dont unserstand , they both support lsp, then you only need is lsp server
[18:56:41] <FromDiscord> <shadow.> In reply to @Bung "I dont unserstand ,": is it the lsp server that's limited then? it just seems like i was able to get a little more functionality on vscode
[18:58:02] <FromDiscord> <Bung> I cant say more , I use my fork version nimlsp
[18:58:06] <FromDiscord> <shadow.> hmmm it actually seems to be working better now
[18:58:12] <FromDiscord> <shadow.> idk then lol
[18:58:17] <FromDiscord> <shadow.> thanks anyways
[19:00:35] <FromDiscord> <Bung> I know the server implementation, the server will crash when you use nimble package havn't installed, crash when syntax error, it's synchronous server
[19:00:47] *** Quits: cyraxjoe (~joe@201.159.98.32) (Quit: I'm out!)
[19:08:10] *** Joins: cyraxjoe (~joe@201.159.98.32)
[19:14:38] <fn> <11ForumUpdaterBot99> New thread by Schneiderfelipe: Inlining macro and (probable) problems with HiddenStdConv/HiddenCallConv, see https://forum.nim-lang.org/t/8220
[19:39:19] *** Joins: pro (~pro@user/pro)
[19:46:33] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[19:46:57] *** Joins: supakeen (~user@python/site-packages/supakeen)
[20:03:38] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 255 seconds)
[20:27:05] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:32:41] *** Quits: cyraxjoe (~joe@201.159.98.32) (Quit: I'm out!)
[20:42:19] *** Joins: cyraxjoe (~joe@201.159.98.32)
[20:43:14] <FromDiscord> <carpal> does nim have an ir?
[20:45:59] <FromDiscord> <hugogranstrom> In reply to @carpal "does nim have an": Nim's AST is what's used in the compiler and then it converts it into C/C++/JS
[20:46:26] <FromDiscord> <Quibono> There been any talk of a native backend?
[20:47:28] <FromDiscord> <hugogranstrom> There's quite a bit of resistance I feel for that
[20:47:45] <FromDiscord> <hugogranstrom> There is a separate project that has it though
[20:48:08] <FromDiscord> <Quibono> What's that? I've always thought a native backend was a noble (if maybe foolhardy) goal
[20:49:04] <FromDiscord> <hugogranstrom> https://github.com/arnetheduck/nlvm
[20:49:06] <fn> <12R2D299> 4GitHub: 7"LLVM-based compiler for the Nim language"
[20:49:44] <FromDiscord> <Quibono> Oh cool.
[20:51:01] <FromDiscord> <haxscramper> Especially considering interop with these languages
[20:51:01] <FromDiscord> <haxscramper> On the contrary, it is inferior to generating C/C++/Js
[20:51:02] <FromDiscord> <haxscramper> It doesn't add any immediate valueâ†µ(@Quibono)
[20:51:04] <FromDiscord> <hugogranstrom> I think that would be loooong in the future if it happens. There is very much work for not that many advantages. GCC is so optimized and you'd basically have to generate better code than it
[20:51:38] <FromDiscord> <Quibono> I mean I think the primary initial benefit is the potential of extremely fast compile times.
[20:51:47] <FromDiscord> <Quibono> But again, I said it was potentially foolhardy for a reason.
[20:52:14] <FromDiscord> <Quibono> I know V is slowly working on it for that reason, not to compete with optimizing compilers (yet)
[20:52:44] <FromDiscord> <haxscramper> Main slowdown for nim compiler is the nim part itself, not a C compilation
[20:52:52] <FromDiscord> <haxscramper> That's why we have IC
[20:53:00] <FromDiscord> <haxscramper> Going to have IC
[20:53:15] <FromDiscord> <Quibono> Gotcha
[20:53:30] <FromDiscord> <haxscramper> You can compare time for `nim check` and `nim c`
[20:53:45] <FromDiscord> <haxscramper> For a rough estimate
[20:56:12] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:00:21] <FromDiscord> <whyy cant i install choosenim> only thing is that it doesnt compile ir link probably
[21:00:29] <FromDiscord> <whyy cant i install choosenim> atleast it doesnt seem to call cc
[21:00:54] <FromDiscord> <whyy cant i install choosenim> and it also doesnt write anything out
[21:01:38] <FromDiscord> <whyy cant i install choosenim>  https://media.discordapp.net/attachments/371759389889003532/863819835619934218/Screenshot_2021-07-11-22-01-29.jpeg
[21:01:47] <FromDiscord> <whyy cant i install choosenim> smol diff
[21:03:44] <FromDiscord> <haxscramper> Yes, that's exactly the point
[21:03:59] <FromDiscord> <haxscramper> `nim c` does full compilation, `nim check` only runs nim side of things
[21:04:23] <FromDiscord> <whyy cant i install choosenim> and also it gives all da errorsðŸ¤ª
[21:18:25] <FromDiscord> <Quibono> Lol so Choosenim doesn't support MacOSX_Arm?
[21:23:58] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[21:29:23] <FromDiscord> <Ayy Lmao> How do I do something like `#define REAPERAPI_IMPLEMENT`? It needs to be before a specific header and when I use the emit pragma it ends up after the header.
[21:30:32] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[21:32:02] *** Quits: cyraxjoe (~joe@201.159.98.32) (Ping timeout: 258 seconds)
[21:36:26] <FromDiscord> <haxscramper> You can control location of the `{.emit` code using `/INCLUDESECTION/`, `/TYPESECTION/` etc. (more in the manual)
[21:36:29] *** Joins: cyraxjoe (~joe@201.159.98.32)
[21:37:09] <FromDiscord> <haxscramper> You can also do `header: "#define REAPERAPI_IMPLEMENT\n#include <specific-header>".`
[21:37:57] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3sGi
[21:38:33] <FromDiscord> <Ayy Lmao> What would be the most idiomatic way to do it? I'm guessing in the header pragma?
[21:39:22] <FromDiscord> <haxscramper> Most "idiomatic way" is the one that works
[21:40:14] <FromDiscord> <haxscramper> At least when interfacing with C libraries you can expect any sort of hacks to pop up, so there is no "go-to" way
[21:40:19] <FromDiscord> <Ayy Lmao> Well the emit pragma seems to be working for me using `/INCLUDESECTION/` and that seems pretty clean to me
[21:41:53] <FromDiscord> <Ayy Lmao> I'm trying to make an extension for the audio software Reaper, and in the sdk they say: `Extensions for REAPER/win32 should be written in C++ and compiled using MSVC (pure virtual interface classes are used and as such the C++ ABI must be compatible -- sorry, mingw users).` I'm not that experienced with C++ or C, so can someone help me understand what kind of implications that might have for writing an extension in Nim?
[21:42:28] <FromDiscord> <haxscramper> I think you would only need to do `--cc:msvc` or something like that
[21:42:34] <FromDiscord> <haxscramper> `nim cpp --cc:msvc`
[21:43:07] <FromDiscord> <haxscramper> I don't use windows, so someone who has to deal with it should clarify things
[21:43:09] <FromDiscord> <Ayy Lmao> It tells me `unknown C compiler: 'msvc'. Available options are: gcc, switch_gcc, llvm_gcc, clang, bcc, vcc, tcc, env, icl, icc, clang_cl`
[21:43:51] <FromDiscord> <hugogranstrom> vcc
[21:44:46] <FromDiscord> <Ayy Lmao> That seems to compile, I'll have to see if I can load the extension when I get to that point. Thank you!
[21:45:09] <FromDiscord> <Ayy Lmao> So why exactly does the use of pure virtual interface classes invalidate the use of mingw?
[21:47:06] <FromDiscord> <haxscramper> some microsoft/migw/reaper implementation detail
[21:50:33] <FromDiscord> <Ayy Lmao> Ah so it's a reaper specific thing
[21:52:22] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3sGn
[21:57:40] <FromDiscord> <haxscramper> https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-codegendecl-pragma
[21:59:02] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3sGo
[21:59:33] <FromDiscord> <haxscramper> To inspect generated code you can set `--nimcache:cache` and look in the generated files
[21:59:48] <FromDiscord> <haxscramper> It would create a directory where you ran compiler
[22:03:04] <FromDiscord> <Ayy Lmao> Awesome, thanks! That seems to make the generated cpp code look how it's supposed to
[22:21:16] <FromDiscord> <shadow.> are there functions for all of the operators?
[22:23:10] <FromDiscord> <Quibono> Also it's proc for non mutation and func for mutation?
[22:24:25] <FromDiscord> <shadow.> In reply to @Quibono "Also it's proc for": func is pure, proc is not necessarily
[22:24:33] <FromDiscord> <Quibono> Ahh
[22:24:36] <FromDiscord> <shadow.> so in func no globals, io, etc is allowed
[22:24:40] <FromDiscord> <shadow.> (edit) "is" => "are"
[22:24:53] <FromDiscord> <Quibono> So do func until the compiler yells at me.
[22:28:35] <FromDiscord> <saem> Yeah, keeping it func-y fresh as much as possible is an admirable goal and tends to help the design.
[22:33:43] <FromDiscord> <ElegantBeef> Just like const -> let -> var, you should func -> proc -> template -> macro -> throw the program out ðŸ˜›
[22:34:26] <FromDiscord> <Quibono> Hopefully I'll never get to template lol
[22:34:35] <FromDiscord> <Quibono> I like simplicity to an extreme.
[22:35:14] <FromDiscord> <ElegantBeef> One could argue since templates paste code they're more simple than procedures ðŸ˜›
[22:36:27] <FromDiscord> <haxscramper> Macro can greatly simplify code
[22:36:57] <FromDiscord> <haxscramper> Also @ElegantBeef  you forgot about TRM
[22:37:02] <FromDiscord> <ElegantBeef> Shit
[22:37:07] <FromDiscord> <haxscramper> Last step before nuking the PC
[22:38:37] <FromDiscord> <Quibono> sent a code paste, see https://play.nim-lang.org/#ix=3sGH
[22:38:59] <FromDiscord> <haxscramper> Exported fields
[22:39:24] <FromDiscord> <Quibono> So those are externally accessible while the unexported fields are not?
[22:39:44] <FromDiscord> <haxscramper> Correct
[22:40:24] <FromDiscord> <Quibono> But methods of the function can still access the private fields?
[22:40:32] <FromDiscord> <Quibono> (edit) "function" => "object"
[22:43:17] <FromDiscord> <haxscramper> These are not private fields, they are exported - the difference is visible only outside the module
[22:43:47] <FromDiscord> <haxscramper> So `method` can access unexported fields if it is defined in the same module
[22:44:10] <FromDiscord> <haxscramper> Also `method` is not bound to any object specifically, it just dispatches at runtime based on the first argument
[22:44:28] <FromDiscord> <haxscramper> There was (is?) `--multimethods:on` that provided dispatching on all arguments
[22:45:23] <FromDiscord> <Quibono> Ahh gotcha.
[23:11:47] *** Quits: cyraxjoe (~joe@201.159.98.32) (Quit: I'm out!)
[23:15:33] *** Joins: cyraxjoe (~joe@201.159.98.32)
