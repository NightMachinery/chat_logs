[00:33:48] *** Quits: ccx (~ccx@82.142.125.46) (Ping timeout: 272 seconds)
[00:39:58] *** Joins: ccx (~ccx@82.142.125.46)
[00:49:51] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[01:11:19] *** Quits: kensanata (~user@user/kensanata) (Remote host closed the connection)
[01:20:41] *** Joins: jess (~jess@libera/staff/jess)
[01:43:19] *** Joins: phillbush (~phillbush@user/phillbush)
[01:52:57] *** zenema is now known as katsu
[01:53:04] *** katsu is now known as zenema
[02:47:12] *** Quits: roarde (~roarde@user/roarde) (Ping timeout: 245 seconds)
[02:51:41] *** Joins: downunder (~downunder@110.151.19.142)
[03:04:42] *** Joins: roarde (~roarde@user/roarde)
[03:23:58] <madprops> 01 this is the start of the file
[03:23:58] <madprops> 02 start of section one with pattern abc
[03:23:58] <madprops> 03 first line
[03:23:58] <madprops> 04 second line
[03:23:58] <madprops> 05 third line
[03:24:00] <madprops> 06 fourth line
[03:24:01] <madprops> 07 the_end
[03:24:05] <madprops> 08 start of section two with pattern xyz
[03:24:07] <madprops> 09 first line
[03:24:09] <madprops> 10 second line
[03:24:11] <madprops> 11 third line
[03:24:13] <madprops> 12 the_end
[03:24:15] <madprops> 13 start of section three with pattern abc
[03:24:17] <madprops> 14 first line
[03:24:19] <madprops> 15 second line
[03:24:21] <madprops> 16 third line
[03:24:23] <madprops> 17 fourth line
[03:24:25] <madprops> 18 fifth line
[03:24:27] <madprops> 19 the_end
[03:24:29] <madprops> 20 start of section four with pattern klm
[03:24:33] <madprops> 21 first line
[03:24:35] <madprops> 22 second line
[03:24:37] <madprops> 23 third line
[03:24:39] <madprops> 24 fouth line
[03:24:41] <madprops> 25 fifth line
[03:24:43] <madprops> 26 sixth line
[03:24:45] <madprops> 27 the_end
[03:24:47] <madprops> 28 start of section five with pattern abc
[03:24:49] <madprops> 29 first line
[03:24:51] <madprops> 30 3second line
[03:24:53] <madprops> 31 third line
[03:24:55] <madprops> 32 fourth line
[03:24:57] <madprops> 33 fifth line
[03:24:59] <madprops> 34 sixt line
[03:25:01] <madprops> 35 seventh line
[03:25:05] <madprops> 36 eighth line
[03:25:07] <madprops> 37 the_end
[03:25:09] <madprops> 38 start of section six with pattern tuv
[03:25:11] <madprops> 39 first line
[03:25:13] <madprops> 40 second line
[03:25:15] <madprops> 41 the_end
[03:25:17] <madprops> 42 start of section seven with pattern abc
[03:25:19] <madprops> 43 first line
[03:25:21] <madprops> 44 second line
[03:25:23] <madprops> 45 the_end
[03:25:25] <madprops> 46 start of section eight with pattern abc
[03:25:27] <madprops> 47 first line
[03:25:29] <madprops> 48 second line
[03:25:33] <madprops> 49 third line
[03:25:35] <madprops> 50 fourth line
[03:25:37] <madprops> 51 the_end
[03:25:39] <madprops> 52 this is the end of the file
[03:25:41] <madprops> I'm so sorry...
[03:25:43] <madprops> thought I copied something else
[03:25:45] <madprops> :/
[03:25:47] <madprops> mean to paste this https://stackoverflow.com/questions/68385754/sed-how-to-delete-multiple-sections-in-a-file-that-start-with-a-line-with-a-kn/68385845#68385845
[03:33:27] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 255 seconds)
[03:33:51] *** Joins: earnestly (~earnest@user/earnestly)
[03:46:37] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 268 seconds)
[03:53:44] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 256 seconds)
[03:59:08] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[04:00:10] <e36freak> madprops: what are you trying to do?
[04:00:37] <madprops> that's just a question I found
[04:00:46] <madprops> thought might be interesting
[04:01:06] <madprops> the solution used is very simple
[04:48:44] *** Joins: earnestly (~earnest@user/earnestly)
[05:07:59] *** mnrmnaugh is now known as awk
[05:11:09] *** awk is now known as mnrmnaugh
[05:26:00] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[05:30:21] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:34:09] *** Joins: vlm (~vlm@user/vlm)
[05:35:38] <mute> awk '/pattern abc/,/the_end/{next}1' input
[05:35:48] <mute> madprops: more simple
[05:37:24] <madprops> so almost the same as the sed solution
[05:37:30] <madprops> what is {next}1 ?
[05:38:53] <e36freak> {next} and '1' are separate things
[05:38:58] <madprops> "The next statement forces awk to immediately stop processing the current record and go on to the next record. "
[05:41:05] <madprops> so is the 1 the number of records to skip?
[05:42:12] <e36freak> no
[05:42:13] <mute> nope. remember the implied {print} action from last night
[05:42:24] <e36freak> {next} is the action for the /foo/,/bar/ pattern
[05:42:31] <e36freak> 1 is a separate complet estatement
[05:42:39] <e36freak> it is always true and leverages the implied {print}
[05:42:51] <mute> 1 is a quick way of doing '{ print $0 }'
[05:43:02] <mute> so: awk '1' file      is like cat 
[05:43:37] <mute> i skip the stuff we don't want with {next} and then say print everything
[05:43:51] <madprops> ah so returning true triggers a print
[05:44:06] <mute> pretty much
[05:47:53] <madprops> so that's basically the sed equivalent of /d
[05:48:15] <mute> eh... next is i guess
[05:48:24] <mute> more direct translation to sed might be: sed -n '/pattern abc/,/the_end/d;p' input
[05:49:03] <mute> next is like d.   and the 1 with implied print is exactly what 'p' is
[05:49:59] <madprops> yeah I meant using next
[06:01:52] *** Joins: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[06:05:06] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 258 seconds)
[06:19:58] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[06:20:05] *** __jmcantrell__ is now known as jmcantrell
[06:28:12] *** Quits: phillbush (~phillbush@user/phillbush) (Remote host closed the connection)
[06:40:31] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[06:42:13] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[06:55:02] <madprops> how can I check if the current field being processed starts with something, and if so then replace the whole field?
[07:10:57] <e36freak> you can use a regex or index or substr(), plenty of ways
[07:11:13] <e36freak> if ($field ~ /^foo/) $field = "bar";
[07:11:47] <e36freak> if (index($field, "foo") == 1) $field = "bar";
[07:15:44] <madprops> but to get $field i would need a for loop right?
[07:18:15] <madprops> this is what I'm doing https://stackoverflow.com/questions/68382141/awk-loop-over-multiple-columns/68385815#68385815
[07:23:09] <madprops> got it working with a for loop
[07:23:13] <madprops> just wondering if there was a smaller way
[07:29:52] <madprops> now I'm trying to use a regex to extract a number from a field
[07:30:45] <madprops> I guess I need match
[07:36:52] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[07:40:13] *** Quits: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 246 seconds)
[07:53:59] *** Quits: roarde (~roarde@user/roarde) (Read error: Connection reset by peer)
[07:54:18] *** Joins: roarde (~roarde@user/roarde)
[08:21:12] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[08:29:40] *** Quits: wwalker (~wwalker@platinum.solid-constructs.com) (Ping timeout: 268 seconds)
[08:31:21] *** Joins: wwalker (~wwalker@45.146.55.219)
[08:35:08] *** Quits: wwalker (~wwalker@45.146.55.219) (Remote host closed the connection)
[08:37:55] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[08:47:48] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[08:51:44] *** Quits: pwndave (pwndave@is.ready-to.party) (Quit: fBNC - https://bnc4free.com)
[08:55:16] *** Quits: AJ_Z0 (~AJ_Z0@user/aj-z0/x-3780512) (Read error: Connection reset by peer)
[08:55:36] <nmz> kids should not play with matches
[08:58:41] *** Joins: AJ_Z0 (~AJ_Z0@user/aj-z0/x-3780512)
[09:04:30] *** Joins: pwndave (pwndave@is.ready-to.party)
[09:51:27] *** Quits: roarde (~roarde@user/roarde) (Quit: Leaving)
[10:37:14] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[10:43:16] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Max SendQ exceeded)
[10:58:04] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[11:05:42] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 255 seconds)
[11:08:05] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:27:26] <ttmrichter> madprops: There was once a programmer who had a problem.  "Oh, I know!  I'll use regular expressions!" he said.  Now he has two problems.
[12:29:03] *** Joins: earnestly (~earnest@user/earnestly)
[12:41:02] <madprops> I've heard that one
[13:24:25] <ttmrichter> Of course I say this on the same day that I wrote a throwaway script to read source code and inject extra code paired with certain constructs.  Extracted with ... REs.
[13:54:14] *** Joins: lavaball (felix@31.204.155.215)
[14:34:24] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[15:09:11] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[15:57:44] *** Quits: downunder (~downunder@110.151.19.142) (Quit: WeeChat 3.2)
[16:08:38] *** Quits: lgc (~lgc@user/lgc) (Quit: WeeChat 3.2-dev)
[16:26:50] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[16:34:53] *** Joins: Jad (~Nashmi@user/jad)
[16:36:47] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[17:11:41] <siraben> I learned about regular languages before regex and it didn't seem hard to grasp, just a nice programming notation
[17:17:20] *** Joins: lavaball (~Melissa@31.204.155.215)
[17:30:07] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[17:32:24] *** Joins: jetchisel (jetchisel@user/jetchisel)
[18:03:52] *** Joins: nomn (nomn@user/nomn)
[18:27:22] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[18:41:52] <heiner> RE are nice and powerful, bot unfortunately write-only
[18:42:51] <heiner> I usually need an additional comment line to explain the RE in plain english
[18:50:04] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (Quit: leaving)
[18:50:13] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[19:09:02] <nomn> oh i'm having trouble with REs rn
[19:09:20] <nomn> can i write one liners here?
[19:54:45] *** Joins: Nintendo (~weechat@user/great)
[19:55:36] <Nintendo> Is there an easy way to determine the character indices of fields within $0?  Example record:
[19:55:47] <Nintendo> fruit basket supreme
[19:56:15] <Nintendo> I want to know that $2 starts at character 7 and $3 starts at 14.
[19:57:01] <earnestly> # printf 'fruit basket supreme\n' | awk '{print match($0, $2)}'
[19:57:03] <shbot> earnestly: 7
[19:57:12] <e36freak> i'd use index() over match()
[19:57:12] <Nintendo> By the way, I want this information in order to preserve the input's padding as-is.
[19:57:14] <e36freak> because regex
[19:57:19] <earnestly> True point
[19:57:23] <Nintendo> Couldn't match() provide false positives?
[19:57:26] <e36freak> works great until you run into duplicate values in fields
[19:57:32] <e36freak> Nintendo: index() is better
[19:57:35] <earnestly> # printf 'fruit basket supreme\n' | awk '{print index($0, $2)}'
[19:57:36] <shbot> earnestly: 7
[19:57:47] <earnestly> e36freak: I know match is greedy, is index?
[19:57:49] <Nintendo> Couldn't index() also provide false positives?
[19:57:55] <earnestly> # printf 'fruit fruit supreme\n' | awk '{print index($0, $2)}'
[19:57:56] <shbot> earnestly: 1
[19:57:59] <e36freak> Nintendo: index() will print the first
[19:58:00] <earnestly> Nintendo: Yes
[19:58:01] <Nintendo> Exactly.
[19:58:10] <e36freak> ideally you'd strip away the fields as you go
[19:58:12] <e36freak> then it's a non-issue
[19:58:43] <earnestly> # printf 'fruit fruit supreme\n' | awk '{for(i=1; i<=NF; ++i) if($i == "fruit") print i}'
[19:58:45] <shbot> earnestly: 1
[19:58:45] <Nintendo> It's not a non-issue with the stated goal of preserving whitespace.
[19:58:45] <shbot> earnestly: 2
[19:58:54] <earnestly> Hm
[19:59:27] <earnestly> # printf 'fruit fruit supreme\n' | awk '{print index($2, $2)}'
[19:59:28] <shbot> earnestly: 1
[19:59:34] <e36freak> you can use index() and length() together to determine that and strip as you go
[19:59:36] <earnestly> Right
[19:59:44] <e36freak> there's no like simple set built-in way to do this though
[19:59:49] <Nintendo> Good point, e36freak.
[19:59:49] <earnestly> Oddly I am just doing this because I can't depend on separators
[20:00:10] <Nintendo> Thank you for the ideas.  I am glad I asked.
[20:00:13] <earnestly> Should probably use sed tbh
[20:00:15] <e36freak> or like replace the field with all spaces of the same length as you go
[20:00:17] <earnestly> (For my use)
[20:00:18] <Nintendo> lol
[20:00:27] <Nintendo> I was until I needed awk.
[20:00:43] <earnestly> Yeah I'd have to rethink if I used sed
[20:01:01] <earnestly> >             n = substr($0, l, length - l - length($NF))
[20:01:05] <earnestly> This is what I'm dealing with
[20:01:33] <e36freak> doesn't look so bad to me
[20:02:39] <earnestly> Hm, I get different results if I switch match for index, yet my match has no regex
[20:03:02] <Nintendo> length($NF) might be a concern, but of course that depends on input and FS.
[20:03:16] <earnestly> # printf 'foo bar baz\n' | awk '{print index($0, " bar "), RLENGTH}'
[20:03:18] <shbot> earnestly: 4 0
[20:03:50] <earnestly> Right, because index doesn't set RLENGTH
[20:04:38] <earnestly> Nintendo: It's all spaces, that's fine.  The point is the field I want is a range of fields that only appears between two known constants
[20:04:57] <earnestly> I could loop backwards find the constant and then loop forward from that point too
[20:06:01] <Nintendo> In that case, the solution you provided looks optimal to me.
[20:28:05] <earnestly> As the constant is just a string I can just hardcode rlength 
[20:52:29] <earnestly> Nevermind really, this is not parsable accurately, so best effort will have to do for now
[21:38:07] <nmz> match should be used if FS is a regex, if its a character you should use index  match|index(FS field FS) of course, with match, you need to convert the field into an direct/string/absolute pattern
[21:41:07] <nmz> well, complications arise if its the first field or the last
[21:42:42] *** Quits: jess (~jess@libera/staff/jess) ()
[21:47:15] <nmz> https://github.com/Nomarian/Awk-Batteries/blob/master/Modules/parse.awk you may need to use regex_literal() I haven't tested it, no clue why I didn't go with gsub there, but eh
[21:48:30] <nmz> quite frankly, its better to set FS to nothing, then create the fields by hand keeping an array with the substr of each
[22:01:03] <earnestly> nmz: What if FS is [ ]?
[22:03:35] <nmz> ¯\_(ツ)_/¯
[22:13:09] <earnestly> :D
[22:23:13] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[22:30:46] *** Joins: roarde (~roarde@user/roarde)
[22:43:03] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[22:47:01] *** Joins: Torr (~Torr@user/torr)
[23:47:16] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:50:56] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
