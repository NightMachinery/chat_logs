[00:00:16] <pjb> It's processed to put both the lisp-indent-function and the common-lisp-indent-function properties to the same value.
[00:00:47] <pjb> Note, normally if  has as plist (lisp-indent-function 2  common-lisp-indent-function 1) ; but since I'm a CLispers, I put 1 for both.
[00:04:17] <makomo> hmmm
[00:04:43] <makomo> i understand the things you wrote, but why exactly does slime have its own copy of cl-indent, which overwrites the definitions given by the standard cl-indent that's part of emacs
[00:04:49] <pjb> but since slime, I don't have to maintain this file. it's not used anymore.
[00:05:49] <pjb> because slime retrieves this information from the actual definitions in the lisp image.  It learns if the operator is a function or a macro, and when it's a macro it processes the structure of its lambda-list to know how to indent it (where are &key arguments, where are &rest or &body arguments, etc).
[00:05:51] <makomo> aha, i see. that was just an example of the benefits of slime
[00:05:57] <pjb> Yes.
[00:06:29] <pjb> and for some macros such as loop, it has an ad-hoc parser.
[00:06:58] <makomo> i understand all of that, but is this "monkey patching" really required? why couldn't it be a separate set of definitions?
[00:07:19] <makomo> e.g. why shouldn't there exist a slime-indent-function that you'd set your lisp-indent-function to?
[00:07:37] <makomo> why do they overwrite common-lisp-indent-function and have this forking business going on, which clashes with the standard cl-indent.el
[00:08:55] <pjb> But it does: in lisp-mode with slime-mode, lisp-indent-function --> common-lisp-indent-function which is defined in slime-cl-idnent.el
[00:09:53] <pjb> I don't think there was a common-lisp-indent-function before this definition. Only an indicator for the symbol plist.
[00:10:10] <makomo> yes, but that definition clashes with the original cl-indent.el's definition
[00:10:21] <pjb> (well there may have been a common-lisp-indent-function in ilisp.el or some other precursor to slime).
[00:10:26] <makomo> here: https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/cl-indent.el
[00:10:53] <makomo> and now look at slime's fork, slime-cl-indent.el: https://github.com/slime/slime/blob/master/contrib/slime-cl-indent.el
[00:11:02] <makomo> "This file is forked from cl-indent.el, which is part of GNU Emacs."
[00:11:05] <pjb> Well, in that case, that could justify an issue in slime, to rename it to avoid the overriding.
[00:11:20] <makomo> basically, yes, but i don't understand how this wasn't a problem all this time
[00:11:56] <pjb> There's one issue: https://github.com/slime/slime/issues/362 
[00:11:59] <makomo> because the original cl-indent.el's common-lisp-indent-function actually has provisions for indenting symbols differently depending on whether you're in elisp or common lisp mode
[00:12:23] <makomo> slime's fork removes this and forces you to use the same indentation rules everywhere. this makes it impossible to indent "if" differently in elisp and in common lisp
[00:12:38] <pjb> You should add an issue to rename it.
[00:12:41] <makomo> or perhaps it didn't remove it but it just hasn't kept up with the updates. i don't know
[00:12:45] <pjb> slime-cl-indent-function would be nice.
[00:12:56] <makomo> yeah, i totally agree :)
[00:13:27] <makomo> from what i've just been told in #emacs, sly fixed this exact issue by renaming all of the symbols
[00:13:28] <pjb> it's a trivial patch, you could even do it yourself and post a PR.
[00:13:36] <makomo> https://github.com/joaotavora/sly/issues/92
[00:14:16] <pjb> Yes, it's a recent change: "By the way cl-indent is now part of Emacs (as of 25.1) ".
[00:14:33] <pjb> You may reference this issue too.
[00:14:37] <makomo> mhm
[00:14:49] <pjb> Perhaps some backporting of sly to slime would be good.
[00:14:54] <makomo> it seems that this fork of cl-indent that's part of slime hasn't been touched in about 10 years
[00:15:01] <pjb> Perhaps eventually sly-mers could come back to slime?
[00:15:07] <makomo> LOL, i wonder
[00:15:11] <pjb> Like Xemacsers came back to GNU emacs.
[00:15:29] <makomo> i've never tried sly though. maybe i could give it a go, but i wonder how it compares to slime
[00:15:35] <makomo> apparently it's a fork of slime itself?
[00:16:15] <pjb> Neither did I, but I accumulate sediments of code since emacs 18â€¦
[00:16:39] <pjb> Yes. sly is a fork of slime. Like Xemacs was a fork of GNU emacs.
[00:18:54] <makomo> hehe :)
[00:44:27] *** Parts: karim_ (~user@169-0-109-248.ip.afrihost.co.za) (ERC (IRC client for Emacs 27.2))
[01:51:24] *** Joins: derelict (~derelict@user/derelict)
[07:18:42] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[07:35:05] *** Joins: derelict (~derelict@user/derelict)
[07:36:44] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[08:32:32] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[12:30:49] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:33:52] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[13:58:51] *** Joins: makomo (~makomo@user/makomo)
[15:06:40] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Bridge terminating on SIGTERM)
[15:09:22] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[15:12:45] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[15:12:45] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[17:40:15] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[17:53:55] *** Joins: makomo (~makomo@user/makomo)
[22:04:57] *** Joins: derelict (~derelict@user/derelict)
[23:25:09] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:28:25] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
