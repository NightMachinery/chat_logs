[00:07:12] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[00:13:40] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[00:13:59] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[00:14:11] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[00:14:20] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[00:25:35] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:28:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:32:37] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:33:01] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 268 seconds)
[00:33:39] *** Joins: akoana (~ah@user/akoana)
[00:36:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:43:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:48:17] *** Quits: josrr (~user@201.141.237.50) (Read error: Connection reset by peer)
[00:49:35] *** Quits: jealousmonk (~user@2804:431:e7c5:6582:4810:3ee3:3f59:e857) (Remote host closed the connection)
[00:50:03] *** Joins: jealousmonk (~user@2804:431:e7c5:6582:4810:3ee3:3f59:e857)
[01:04:42] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:07:58] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[01:15:52] *** Joins: lispy (~lispy@user/lispy)
[01:15:55] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:26:19] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (Remote host closed the connection)
[01:27:55] *** Joins: dra (~dra@2a04:4540:6422:4100:9019:39f0:d135:1e22)
[01:28:03] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[01:32:17] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[01:33:07] *** Joins: Oddity (~Oddity@user/oddity)
[01:43:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:48:05] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c036:186d:ef76:833d)
[01:48:32] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f1:896a:f1d3:a93f:252e:fae7)
[01:48:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[01:53:11] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c036:186d:ef76:833d) (Ping timeout: 268 seconds)
[02:00:41] *** Quits: dra (~dra@2a04:4540:6422:4100:9019:39f0:d135:1e22) (Quit: Leaving)
[02:03:47] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:09:01] <phoe> flip214: https://github.com/armedbear/abcl/issues/433 looks like Alexandria might need to adjust its TYPE= tests for cases where one SUBTYPEP returns T T and the inverse SUBTYPEP returns NIL NIL
[02:14:46] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f1:896a:f1d3:a93f:252e:fae7) (Ping timeout: 268 seconds)
[02:19:29] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[02:20:14] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:26:25] *** Quits: foxfromabyss (~foxfromab@2a01:c23:6599:4a00:c1ad:b20:e603:2aa1) (Ping timeout: 256 seconds)
[02:36:16] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[02:37:47] *** Joins: aeth (~aeth@user/aeth)
[02:44:45] *** Joins: Bike (~Bike@71.69.170.70)
[02:47:44] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[02:53:50] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:57:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[02:59:23] *** Joins: aeth (~aeth@user/aeth)
[03:00:14] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[03:03:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[03:07:36] <Shinmera> I'm very sad that gray-streams does not include file-length and file-position
[03:07:39] *** Joins: dra (~dra@2a04:4540:6422:4100:719a:ad7c:c124:e0c9)
[03:21:15] *** Joins: notzmv (~zmv@user/notzmv)
[03:32:16] *** Quits: alvaro121 (~aa@201.230.126.66) (Quit: Bye)
[03:36:09] <etimmons> Shinmera: trivial gray streams has file-position, and I'm pretty sure it works on most implementations
[03:37:21] *** Joins: dra_ (~dra@2a04:4540:640f:b700:719a:ad7c:c124:e0c9)
[03:40:29] *** Quits: dra (~dra@2a04:4540:6422:4100:719a:ad7c:c124:e0c9) (Ping timeout: 268 seconds)
[03:44:21] *** contrapunctus_ is now known as contrapunctus
[03:49:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:54:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[04:02:11] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:14:41] *** Quits: pve (~pve@37-136-197-20.rev.dnainternet.fi) (Quit: leaving)
[04:16:21] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[04:25:52] *** Joins: dre (~dre@2001:8003:c932:c301:341e:26bb:e1ef:14f6)
[04:45:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:49:01] *** Joins: alvaro121 (~aa@201.230.126.66)
[04:50:08] *** Joins: Bike (~Bike@71.69.170.70)
[04:59:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:03:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[05:11:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[05:17:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:24:37] *** Quits: dra_ (~dra@2a04:4540:640f:b700:719a:ad7c:c124:e0c9) (Remote host closed the connection)
[05:45:33] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[05:50:29] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:57:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:59:34] *** Quits: alvaro121 (~aa@201.230.126.66) (Remote host closed the connection)
[06:13:29] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[06:15:28] *** Joins: epony (epony@user/epony)
[06:18:03] *** Joins: alvaro121 (~aa@201.230.126.66)
[06:18:10] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[06:19:32] <Guest74> is there a way to add/view documentation for a specific method of a generic function?
[06:19:55] *** Joins: aeth (~aeth@user/aeth)
[06:24:06] <mfiano> ,clhs documentation
[06:24:16] <mfiano> clhs documentation
[06:24:16] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_docume.htm
[06:28:57] *** Quits: lispy (~lispy@user/lispy) (Remote host closed the connection)
[06:30:31] <dbotton> if there a popular library for doing text templates? I am looking to generate "scaffolding" for projects, ie. an asdf file, some basic lisp files, etc. much of which a simple replace of some symbol would do.
[06:31:41] <EdLangley[m]> Why not use `?
[06:31:46] <Guest74> mfiano: that doesn't explain it to me.  do you have an example?
[06:31:48] <White_Flame> it would be nice if backquoted forms could be passed around, but they can't.  You could use a macro for an active template
[06:32:05] <mfiano> Guest74: It's there as plain as can be. Look at the method methods
[06:32:28] <Guest74> it's not plain to me or I wouldn't be asking.  do you have an example?
[06:32:34] <mfiano>  documentation (x standard-method) (doc-type (eql 't))
[06:32:36] <mfiano> (setf documentation) new-value (x standard-method) (doc-type (eql 't))
[06:33:52] <dbotton> The idea is to have a set of files and just replace some text in each and write them out to some directory
[06:34:11] <Guest74> I don't see how typing out exactly what the page says is any help when I said I don't understand what is on the page.
[06:34:23] *** Joins: lispy (~lispy@user/lispy)
[06:34:41] <Guest74> that is not lisp.
[06:34:47] <mfiano> Common Lisp is a class-based language. If you don't know the function for getting a method instance, it is find-method
[06:35:02] <EdLangley[m]> Guest74: (describe #’foo) might show documentation for the function’s methods
[06:35:07] <mfiano> I'm sorry, but I can't write code for you right now. Those are the signatures you need.
[06:35:17] <EdLangley[m]> I’m not at my laptop at the moment, and the details here are implementation-dependent
[06:35:31] <White_Flame> dbotton: here's a functional, short, but janky way of using backquotes: https://plaster.tymoon.eu/view/2898#2898
[06:35:37] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-178.dsl.bell.ca) (Ping timeout: 240 seconds)
[06:36:31] <EdLangley[m]> Yeah, if you’re just generating lisp source, I’d use backquotes and pprint
[06:36:36] *** Quits: alvaro121 (~aa@201.230.126.66) (Quit: Bye)
[06:37:04] <Guest74> Ed: I'd have to add the documentation to see if describe shows it :)
[06:37:35] <White_Flame> there's really no difference in having that sort of literal backquoted form, and a macro body I guess
[06:37:37] <dbotton>  My question is more about file processing White_Flame
[06:37:47] <White_Flame> could comma out to any lisp form
[06:37:49] <EdLangley[m]> So, you do (setf (documentation …) “doc”) go set documentation.
[06:38:15] <EdLangley[m]> dbotton: I’ve used cl-mustache before
[06:38:48] <EdLangley[m]> But, if you’re generating lisp source it’d be better to take advantage of lisp’s builtin templating mechanisms.
[06:40:50] <Guest74> ed: that doesn't explain how to set documentation for a specific method.
[06:40:50] <EdLangley[m]> (let ((*print-case* :downcase)) (pprint `(asdf:defsystem ,name . . .) *file-stream*))
[06:41:14] <EdLangley[m]> Use find-method to find the method and then read clhs to find that info
[06:41:19] <mfiano> Retrieve the method with find-method and operate on that!
[06:41:30] <EdLangley[m]> Or, just use docstrings
[06:43:20] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca)
[06:46:56] <Guest74> sheesh ask a simple question.
[06:48:12] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[06:50:28] *** Joins: Bike (~Bike@71.69.170.70)
[06:50:52] *** Quits: lispy (~lispy@user/lispy) (Quit: O/)
[06:52:33] *** Joins: igemnace (~ian@user/igemnace)
[06:52:41] <Josh_2> Guest74: when are you going to get a real name?
[06:53:27] <mfiano> Oh is that that guest that nobody knows if they are a newbie or not?
[06:53:49] <mfiano> I was about to direct them to #clschool. I can't remember all the guests that come here.
[06:54:23] <Guest74> aren't you guys nice.  Well done.
[06:58:05] *** Joins: lispy (~lispy@user/lispy)
[06:58:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:08:07] *** Quits: lispy (~lispy@user/lispy) (Quit: O/)
[07:12:17] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:09] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:20:54] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[07:25:18] <dbotton> Is there a simple tutorial on presentations in CLIM/McCLIM around? Something very practical?
[07:27:05] <beach> dbotton: I believe I wrote one.  It should be in the McCLIM documentation.
[07:27:32] <beach> dbotton: You might also join the #clim channel.
[07:27:58] <beach> dbotton: But most participants are probably still asleep, and jackdaniel is not quite well yet, perhaps.
[07:28:06] *** Joins: alvaro121 (~aa@201.230.126.66)
[07:28:19] <mfiano> He is getting better he said.
[07:28:26] <beach> Excellent.
[07:28:31] <mfiano> beach: Have you read Keene's book?
[07:28:32] <beach> Oh, and: Good morning everyone!
[07:28:36] <dbotton> What happened?
[07:28:41] <beach> mfiano: Yes.
[07:28:47] <beach> dbotton: COVID.
[07:29:04] <dbotton> :( no fun, been there
[07:29:21] <mfiano> beach: Do you think it is worth reading for an experienced Common Lisper? I am getting the vibe that it was Symbolics marketing for what OOP should be, and I'm unsure if I would learn anything from it.,
[07:30:04] * mfiano noticed it is one of few Lisp books on his bookshelf he hasn't yet read.
[07:30:41] <beach> If you already use CLOS, then probably no.  And I didn't much like the book, mainly because the (in my opinion) badly chosen examples.
[07:30:58] <mfiano> I see. Thanks.
[07:31:40] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (K-Lined)
[07:31:40] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (K-Lined)
[07:31:41] *** Quits: Charles[m]1 (~charlesma@2001:470:69fc:105::1:7050) (K-Lined)
[07:31:42] *** Quits: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f) (K-Lined)
[07:31:42] *** Quits: kakuhen (~kakuhen@user/kakuhen) (K-Lined)
[07:31:42] *** Quits: linjian (~linj@user/linj) (K-Lined)
[07:31:42] *** Quits: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81) (K-Lined)
[07:31:42] *** Quits: sepanko (~sepanko@user/sepanko) (K-Lined)
[07:31:42] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (K-Lined)
[07:31:42] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (K-Lined)
[07:31:43] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (K-Lined)
[07:31:43] *** Quits: prov[m] (~provessor@2001:470:69fc:105::cfb) (K-Lined)
[07:31:43] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (K-Lined)
[07:31:43] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (K-Lined)
[07:31:43] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (K-Lined)
[07:31:43] *** Quits: miique (~miiquemat@2001:470:69fc:105::1:6901) (K-Lined)
[07:31:43] *** Quits: sp (~sp@user/susam) (K-Lined)
[07:31:43] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (K-Lined)
[07:31:43] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (K-Lined)
[07:31:43] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (K-Lined)
[07:31:43] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (K-Lined)
[07:31:43] *** Quits: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b) (K-Lined)
[07:31:43] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (K-Lined)
[07:31:43] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (K-Lined)
[07:31:43] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (K-Lined)
[07:31:43] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (K-Lined)
[07:33:43] <beach> mfiano: I read the Keene book and didn't understand much of how to use CLOS.  Then I read the CLIM II specification, and I understood a lot more.
[07:34:30] <beach> The concept of a protocol became much clearer to me then.
[07:37:21] <Josh_2> Guest74: you should pick a cool name like dragon
[07:37:32] <mfiano> I see. I have not much interest in graphical interfaces, or graphical environments for that matter, so I am unsure if I could stomach it. I prefer working at a terminal.
[07:37:40] <Josh_2> I read the Keene book, it helped me understand CLOS
[07:38:31] <beach> mfiano: I understand.
[07:40:39] <beach> Josh_2: Sure, it is not completely worthless.  It does contain the basics of CLOS.  But I suspect mfiano already knows that much.
[07:40:54] <Josh_2> I did not, so I found it helpful
[07:41:15] <beach> Yeah, sure.
[07:41:22] <mfiano> I do know quite a bit of CLOS and the MOP already, but I think there needs to be more books on practical applications of them.
[07:41:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:41:54] <beach> I totally agree.  I have some partially finished books, but every book project is stalled now.
[07:42:08] <mfiano> I think AMOP was a terrible techical book (like most of them). It could have used a couple dozen more copy editors and maybe a typesetter or 3.
[07:42:25] <beach> Yes, the organization is bad.
[07:42:33] <Josh_2> A dozen more practical examples would have been most useful for me
[07:43:53] <mfiano> AMOP was pretty painful to read because of my attention to detail. I had to ask a lot of questions when the book was plain wrong or contradicted itself in various places.
[07:43:58] <beach> My book projects depend on having a coauthor to take care of the copy editing, precise organization, LaTeX details, etc.  But my favorite coauthor essentially abandoned me.  Then phoe was going to help me with one of my books, but then got very busy with lots of other stuff.
[07:44:50] <dre> https://www.youtube.com/watch?v=HM1Zb3xmvMc
[07:44:55] <beach> mfiano: I started it twice without finishing.  It was only on my third attempt that I managed to read to the end.  And that was after learning a lot more of CLOS from the CLIM specification.
[07:45:18] <beach> dre: Please don't post links without an explanation of what we can expect if we follow them.
[07:45:31] <mfiano> Who is your favorite coauthor? I take it that is an abbreviation to auto-complete, but it is slightly annoying we never know who that is :)
[07:45:34] <dre> a fun music video on a bad book :)
[07:45:43] <dre> (not bad in my taste but not for everyone)
[07:46:23] <beach> mfiano: Oh, "everybody" knows.  Her name is Irène Durand, and sometimes comes here as idurand.
[07:46:44] <beach> mfiano: She is the only coauthor on my papers and books.  So it is not hard to be the favorite one. :)
[07:46:44] <mfiano> Oh yes I recall the name.
[07:47:40] <mfiano> phoe is currently very busy writing the second edition of Edmund's book.
[07:47:49] <moon-child> 'granddaddy of all lisp dialects' not lisp 1.5?
[07:47:57] * moon-child would read a book on how to make games with lisp 1.5
[07:47:58] <beach> mfiano: Exactly.
[07:48:03] <mfiano> That book is quite a tome, so I expect him to be busy for a long while.
[07:48:37] <beach> mfiano: And I can already tell that he is essentially never going to be available, so I gave up on him.
[07:49:27] <mfiano> I think that is accurate. phoe is doing amazing work for the community, but he moves around a lot.
[07:49:46] <beach> Exactly.
[07:51:42] <beach> My favorite coauthor was perfect.  She knows her domain very well.  She is meticulous and hard working.  And she lives not too far from me, so we can easily meet.  But she has changed her priorities of how she likes to spend her time.
[07:52:14] <beach> She if French, but she lived 2 years in the US so her English is quite good.
[07:52:19] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[07:52:35] <beach> There is very little hope to match her.
[07:52:48] <moon-child> mfiano: waitaminit, if you don't like graphical environments, why are you writing a colour library?
[07:53:34] <moon-child> need perfectly graded syntax highlighting? :)
[07:54:24] <mfiano> moon-child: That is a good question. I don't like using a graphical interface. Most computing tasks can be done perfectly fine with a command line interface. However, just because I like algorithmic art and generating imagery, doesn't mean I have to use the mouse or interact with GUI widgets.
[07:54:53] <moon-child> I see
[07:55:10] <beach> mfiano: CLIM is perfect then.  It even has a command-line interface almost by default.
[07:55:14] <moon-child> I do think that mice are ergonomic disasters, and widgets are not great
[07:55:16] <moon-child> however
[07:55:31] <moon-child> I think there are myriad opportunities to take advantage of graphical organization for better presentation of information
[07:55:40] <moon-child> see e.g. cantordust
[07:59:49] <mfiano> Not just ergonomic disasters, but everytime I have to take my fingers off the keyboard to reach for the mouse, usually means I'm switching to some other context, which is a huge productivity disaster, and even a few milliseconds can disrupt "flow".
[08:00:30] <mfiano> My workflow is entirely keyboard oriented, except for very few tasks that are unavoidable.
[08:01:11] <moon-child> I see
[08:02:23] <moon-child> to me, the problem is not switching.  The problem is that mice are generally used to choose from among discrete objects and perform discrete actions, a task to which (as analogue instruments) they are not well suited
[08:03:14] <mfiano> I also tend to try to keep a similar working environment across all my hardware, some virtual/remote even.
[08:03:26] <mfiano> I have a lot of machines I work on.
[08:04:06] <moon-child> same.  Well, I probably do not have quite so many as you :P
[08:11:27] *** Joins: semz_ (~semz@user/semz)
[08:13:52] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:17:40] *** Joins: Bike (~Bike@71.69.170.70)
[08:23:55] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:24:16] *** Joins: Bike (~Bike@71.69.170.70)
[08:24:32] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[08:24:32] *** Joins: sepanko (~sepanko@user/sepanko)
[08:24:32] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[08:24:32] *** Joins: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b)
[08:24:32] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[08:24:32] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[08:24:32] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[08:24:32] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[08:24:32] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[08:24:32] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[08:24:32] *** Joins: sp (~sp@user/susam)
[08:24:32] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[08:24:33] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[08:24:33] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[08:24:33] *** Joins: char[m] (~charlesma@2001:470:69fc:105::1:7050)
[08:24:33] *** Joins: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f)
[08:24:33] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[08:24:33] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[08:24:33] *** Joins: linjian (~linj@user/linj)
[08:24:33] *** Joins: miique (~miiquemat@2001:470:69fc:105::1:6901)
[08:24:33] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[08:24:45] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[08:24:45] *** Joins: prov[m] (~provessor@2001:470:69fc:105::cfb)
[08:24:47] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[08:24:48] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[08:25:08] *** Quits: dre (~dre@2001:8003:c932:c301:341e:26bb:e1ef:14f6) (Ping timeout: 250 seconds)
[08:29:15] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Client limit exceeded: 20000)
[08:31:55] *** Quits: jealousmonk (~user@2804:431:e7c5:6582:4810:3ee3:3f59:e857) (Quit: ERC (IRC client for Emacs 27.1))
[08:46:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:48:44] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:50:22] *** Joins: dre (~dre@2001:8003:c932:c301:9978:1feb:26d8:cb0f)
[09:01:44] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:12:21] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[09:18:27] *** Joins: Everything (~Everythin@37.115.210.35)
[09:28:18] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:b966:c67:7e32:3db8)
[09:42:56] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:47:08] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:b966:c67:7e32:3db8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:59:32] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[10:10:44] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10f1:896a:f1d3:a93f:252e:fae7)
[10:15:21] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10f1:896a:f1d3:a93f:252e:fae7) (Ping timeout: 245 seconds)
[10:35:14] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:35:44] <jeosol> mfiano: I can attest to keep similar environment across machines - i run the same linux distro on my two working machines (one for dev and other for testing) - tend to upgrade OS similarly and compiler updates like SBCL. it makes for less surprises and issues
[10:35:45] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[10:35:45] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[10:37:41] <jeosol> beach: are you writing several books, trying to understand from the earlier comments
[10:39:17] <beach> Let's say I have several book projects in various degrees of completion.
[10:39:23] <jeosol> beach: changed her prorities of how she likes to spend her time .... meaning she change areas of focus and interest?
[10:40:15] <jeosol> beach: are they on your metamodular(?) site ?
[10:40:16] <beach> Exactly.  Especially when it comes to activities outside paid day job.
[10:40:32] <jeosol> I see
[10:40:33] <beach> No, they are not.  I was hoping to make some money out of some of them.
[10:41:08] <jeosol> they are CL focus? programming  language, compilers?
[10:41:26] <beach> All of the above. :)
[10:41:34] <jeosol> is there a lot of money in publishing these days? I don't know and asking genuinely. I guess it depends on the area of focus
[10:41:39] <jeosol> beach: very nice
[10:41:51] <beach> Plus software engineering, operating systems, algorithms and data structures.
[10:42:09] <jeosol> I believe a lot of people can benefit from using CL but they get bugged down with emacs and parentheses issues
[10:42:50] <beach> jeosol: I have a book "Introduction to Computer Science" self published through Amazon, and I make around 2€ per month.
[10:42:51] <jeosol> beach: very nice, I eventually worked through the algorithms and DS refreshers I was taking a while back. Finally the graphs and doing some dynamic programming.
[10:43:12] <jeosol> I will be giving the CL graph libraries a look in a few weeks to see what they have
[10:43:32] <jeosol> Introduction to Computer Science -- very nice
[10:43:35] <beach> I see.  About half of the books on algorithms and data structures are so bad that the authors should be spanked.
[10:43:45] <jeosol> hahahaha
[10:43:51] <beach> They can't even get binary search right.
[10:44:51] <jeosol> binary search with the issue of computing the mid, remember seeing issues with that overflow or when high and low are very large
[10:45:13] <jeosol> (mid + low) // 2 vs low + (high-low) // 2 or something like that
[10:45:29] <jeosol> I don't recall the details
[10:46:13] <jeosol> beach: i take it you are aware of the CL book on algorithms, forgot the guys name, from Ukraine I think? vsevelod? or something like that
[10:46:13] <beach> Well, that one is fairly easy to fix.  The main problem is that half the books start by testing for equality, thereby making the overall algorithm half the speed as it should be.
[10:46:28] <beach> Yes, I reviewed early drafts of it.
[10:47:16] <jeosol> Interesting point, I was looking at that lately, I see yesterday, don't recall it was wiki, or somewhere, the equality was put at the end
[10:47:26] <Shinmera> etimmons: Ah, right, but not file-length.
[10:47:35] <jeosol> *equality test
[10:47:42] <beach> jeosol: That's the right place.  Some books get it right.
[10:48:10] <beach> There should be only one comparison per iteration.
[10:53:28] <jeosol> Makes a lot of sense. One branch test for going left or right , and when R=L, break out of the loop andd check if A[L] == Target, and return T or nil
[10:53:42] <beach> Exactly.
[10:53:45] <jeosol> does that sound like what you alluded to
[10:53:46] <jeosol> oh ok
[10:53:57] <beach> And not even people who claim to be world experts get it right.
[10:53:58] <jeosol> It definitely will be faster, I agree
[10:54:02] <beach> Very disappointing.
[10:54:19] <jeosol> good point, juggled my brain
[10:54:25] <beach> The situation is similar with the literature on operating systems.
[10:55:01] <beach> Tanenbaum and Bos claim that it is impossible to write an operating system in a language with automatic memory management, just to take one example.
[10:55:02] <jeosol> these kind of small things can result in huge savings and wins
[10:55:15] <beach> jeosol: For binary search, it's a factor 2.
[10:55:27] <jeosol> wow, that's insane
[10:55:47] <beach> That's why I feel compelled to write better books.  But then, like I said, the projects are stalled.
[10:56:15] <beach> Other authors of OS books haven't even bothered reading up on history.
[10:57:49] <jeosol> That's a good goal indeed and lofty one.
[10:58:45] <beach> Thanks.  I can come up with the general contents, but I don't have the time or the energy with all the details, hence the need for a meticulous coauthor.
[10:58:46] <jeosol> I am not an OS guy/person, and a bit closer to the algorithms side of things
[10:58:54] <beach> I see.
[10:58:55] *** semz_ is now known as semz
[10:59:21] <jeosol> I was reading a book on computer architecture to understand things better
[11:00:15] <jeosol> * I am rather ... still working through it
[11:00:39] <beach> Oh, right, we have one about architecture published in French.  That one also gives a few € per year.
[11:00:43] <jeosol> is CL central to all the books?
[11:02:03] <beach> The book entitled "Concrete and abstract data types" hides Common Lisp in that it translates it to an algorithmic language.  But I consider just using Common Lisp, because the additional work to check the code required my favorite coauthor.
[11:02:31] <beach> But, sure, I try to slide in some Common Lisp information everywhere if I can.
[11:05:24] <beach> The book on operating systems mainly corrects the incorrect history of other books, and laments the fact that we still use derivatives of UNIX, even though the UNIX execution model exists because of the limitations on very small and very simple hardware.
[11:05:59] <jeosol> beach: thank you for the background info
[11:06:10] <beach> Pleasure.
[11:06:28] <jeosol> Sounds Irene is very meticulous
[11:06:39] <beach> Indeed.
[11:07:12] <jeosol> My adviser in school used the word pendantic, when I first turned in some plots and not analysing all the behavior, since then I remember that word and always double check and triple check things ...
[11:07:43] <beach> Heh.
[11:14:19] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[11:30:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:30:47] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:49:01] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[11:49:54] *** Joins: robin (~robin@user/terpri)
[11:51:36] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[11:52:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:00:06] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[12:06:26] *** Joins: occ (~occ@user/occ)
[12:07:57] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[12:19:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[12:22:06] *** Joins: aeth (~aeth@user/aeth)
[12:24:42] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Quit: Client limit exceeded: 20000)
[12:28:08] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Client limit exceeded: 20000)
[12:35:23] <pjb> Note that in CL, (truncate (+ low high) 2) is as good as (+ low (truncate (- high low) 2)).  The only case where it may make a difference is if you go out-of-memory upon the bignum sum, (but then you'd probably go out-of-memory on the difference as well).
[12:35:38] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[12:35:50] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[12:36:00] <pjb> The problem is indeed, that most people don't program in their programming language, but instead program in an imagined language that ressemble their programming language.
[12:36:00] *** Joins: pve (~pve@178-55-29-58.bb.dnainternet.fi)
[12:37:16] <pjb> Look at how beach strive to give more meaning to operators, so that (if a b) => (when a b)  ; (return (when a b)) => (return (if a b nil))  etc…   It doesn't matter if you write in CL, but it matters if you try to write in a imaginary language ressembling CL.  And the problem is that you need to be able to read CL anyway, or else…
[12:38:06] <moon-child> eh, I would expect the difference code to be slightly faster.  And, given high>low (presumably...), less likely to cons.  It would never cons in the common case when high and low are array indices and fixnums
[12:39:46] <moon-child> and the difference code is clearer in some respects, imo.  'Start at low, and go halfway towards high.'  Vector basically
[12:43:21] <phoe> beach: mfiano: yes, that's correct. :( Apologies.
[12:44:58] <beach> phoe: Nothing to apologize for.  Just stating a fact.
[12:53:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:57:54] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[13:04:18] <pjb> moon-child: (low+high)/2 is clear too: go halfway between low and hig.
[13:15:09] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[13:17:12] *** spacebat4 is now known as spacebat
[13:21:53] *** Joins: akoana (~ah@user/akoana)
[13:23:55] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:31:50] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[13:33:47] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:35:14] *** Joins: shka (~herr@109.231.0.226)
[13:49:28] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[13:50:29] *** Joins: amb007 (~a_bakic@157.132.22.93.rev.sfr.net)
[14:00:49] *** Quits: amb007 (~a_bakic@157.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:00:58] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[14:05:31] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[14:11:10] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a886:d690:9086:f777)
[14:12:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:16:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[14:20:57] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:21:36] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a886:d690:9086:f777) (Ping timeout: 245 seconds)
[14:21:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[14:22:16] *** Lord_of_Life_ is now known as Lord_of_Life
[14:32:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:37:18] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:40:17] <phoe> minion: memo for Bike: I think this sort of snippet can work as some basic FBIND test, https://plaster.tymoon.eu/view/2899#2899 - Serapeum's FBIND obviously fails the identity comparison because it makes an intermediate function
[14:40:19] <minion> Remembered. I'll tell Bike when he/she/it next speaks.
[14:40:44] <phoe> minion: memo for Bike: I'll try to make an implementation that fulfills that test in a spare while
[14:40:44] <minion> Remembered. I'll tell Bike when he/she/it next speaks.
[14:41:48] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[14:47:16] *** Quits: akoana (~ah@user/akoana) (Ping timeout: 256 seconds)
[15:02:21] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:02:49] *** Joins: igemnace (~ian@user/igemnace)
[15:12:37] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:15:08] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[15:17:52] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[15:18:12] *** Joins: pingpongball (~pingpongb@43.228.192.108)
[15:18:19] <pingpongball> In this function
[15:18:34] <pingpongball> (defun print-list (list)
[15:18:34] <pingpongball>   (dolist (i list)
[15:18:35] <pingpongball>   (format t "item: ~a~%" i)))
[15:18:53] <pingpongball> why we call this function with?
[15:18:53] <pingpongball> `(print-list '(1 2 3))`
[15:19:03] <pingpongball> and why not `(print-list (1 2 3))`
[15:19:30] <phoe> pingpongball: because (1 2 3) is a function call
[15:19:37] <phoe> except that 1 is not a valid function name
[15:19:52] <phoe> you need (print-list (quote (1 2 3))) because QUOTE returns its argument unevaluated
[15:20:02] <phoe> and (quote (1 2 3)) has its own syntax in CL, '(1 2 3)
[15:20:17] <phoe> ;;you might to enjoy joining #clschool for questions about CL basics, too!
[15:20:21] <pingpongball> yes right,
[15:21:09] <pingpongball> oh thanks :)
[15:26:30] <pjb> pingpongball: And there's no need to copyu the same question in all channels. The OR wasn't really an inclusive OR, but one where you select the channel best adapted to your question!  http://cliki.net/IRC
[15:27:34] <pingpongball> Oh sorry, i'll not :)
[15:29:24] <Devon> (print-list (list 1 2 3)) is ok
[15:31:02] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:31:51] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:32:31] *** Joins: dlowe (~dlowe@user/dlowe)
[15:32:42] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[15:33:17] *** Joins: dlowe (~dlowe@user/dlowe)
[15:36:01] *** Quits: pingpongball (~pingpongb@43.228.192.108) (Quit: "see you later :)")
[15:39:20] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[15:40:23] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[15:55:07] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:55:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[15:57:46] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:59:08] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[16:00:04] *** Joins: dlowe (~dlowe@user/dlowe)
[16:00:23] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[16:00:33] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:ed4d:fe0e:25ef:ac1f)
[16:01:40] *** Joins: dlowe (~dlowe@user/dlowe)
[16:01:45] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[16:01:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[16:04:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:05:38] *** Joins: dlowe (~dlowe@user/dlowe)
[16:08:40] *** Quits: dlowe (~dlowe@user/dlowe) (Read error: Connection reset by peer)
[16:08:54] *** Joins: dlowe (~dlowe@user/dlowe)
[16:09:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:09:40] *** Quits: dlowe (~dlowe@user/dlowe) (Read error: Connection reset by peer)
[16:09:55] *** Joins: dlowe (~dlowe@user/dlowe)
[16:13:15] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[16:16:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[16:18:54] *** Quits: raeda (~raeda@72.49.252.109) (Ping timeout: 260 seconds)
[16:19:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[16:21:22] *** Joins: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net)
[16:30:46] *** Joins: dlowe (~dlowe@user/dlowe)
[16:41:41] *** Joins: raeda (~raeda@72.49.252.109)
[16:42:32] *** Joins: domovod (~domovod@176.196.122.197)
[16:59:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[17:09:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[17:12:26] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:19:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:24:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[17:36:45] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:54:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:56:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:57:15] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[18:01:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:06:56] *** Joins: Bike (~Bike@71.69.170.70)
[18:09:13] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[18:09:50] *** Joins: jealousmonk (~user@2804:431:e7c5:6582:4810:3ee3:3f59:e857)
[18:21:24] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 250 seconds)
[18:21:37] *** Joins: psf (~pi@206.55.172.18)
[18:21:45] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[18:28:24] *** Joins: pingpongall (~pingponga@43.228.192.108)
[18:28:32] *** Quits: pingpongall (~pingponga@43.228.192.108) (Client Quit)
[18:31:18] <Devon> Anybody here use SLY?  ELPA [Install] hangs with the message Contacting host: elpa.nongnu.org:443
[18:40:49] *** Joins: tane (~tane@user/tane)
[18:46:14] *** Joins: blacked (~user@user/blacked)
[18:46:52] *** Joins: pingpongball (~pingpongb@43.228.192.108)
[18:52:34] *** Joins: gjvc (~gjvc@user/gjvc)
[18:56:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:58:31] *** Joins: citizenajb (~citizenaj@modemcable064.134-177-173.mc.videotron.ca)
[19:01:56] <jealousmonk> Devon: What is your Emacs version?
[19:11:59] <Guest74> I wonder if I can get any thoughts on this. https://github.com/JMC-design/surface/blob/master/surface.lisp
[19:12:25] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a886:d690:9086:f777)
[19:12:26] <Guest74> What's missing, what shouldn't be there.  some basic documentation is in documentation.lisp
[19:16:51] *** Joins: treflip (~user@user/treflip)
[19:19:28] <blacked> :D
[19:20:56] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a886:d690:9086:f777) (Ping timeout: 252 seconds)
[19:20:59] <Bike> usually for (find :linux *features*) you'd just do it at readtime, since you're probably not going to change OS at runtime
[19:21:00] <minion> Bike, memo from phoe: I think this sort of snippet can work as some basic FBIND test, https://plaster.tymoon.eu/view/2899#2899 - Serapeum's FBIND obviously fails the identity comparison because it makes an intermediate function
[19:21:00] <minion> Bike, memo from phoe: I'll try to make an implementation that fulfills that test in a spare while
[19:21:36] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 245 seconds)
[19:21:48] <phoe> Bike: the only issue I've ended up with is that I am puzzled by the current choice of code walkers and their abilities and state of documentation
[19:21:57] <phoe> so let me scratch my head for a while
[19:22:12] *** Quits: pingpongball (~pingpongb@43.228.192.108) (Quit: Client closed)
[19:22:13] <Bike> code walking just seems inherently unreliable to me.
[19:22:14] <Xach> Guest74: if i were making it, I'd make CREATE a GF and EQL-specialize on TYPE.
[19:22:24] *** Joins: notzmv (~zmv@user/notzmv)
[19:22:30] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Ping timeout: 250 seconds)
[19:22:42] <Bike> though i haven't looked at how agnostic lizard works. i remember raskin saying it was supposed to deal with a lot of the issues.
[19:22:50] <Guest74> bike: isn't it possible you'd compile on one computer and ship the binary to someone on another computer?
[19:23:01] <phoe> Guest74: they will be running the same OS though
[19:23:03] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[19:23:14] <etimmons> Unless you're shipping with ABCL
[19:23:18] <phoe> in general a Lisp program cannot be cross-compiled, I don't know of an implemnetation that allows----
[19:23:19] <Guest74> oh, right, since binary.
[19:23:25] <phoe> etimmons: touché
[19:23:32] <phoe> ABCL is the one where that is possible
[19:24:32] <Guest74> Xach: the problem with that is that it uses the default for the environment when no type is supplied.
[19:25:01] <Xach> Guest74: sure. then i would have (eql t) or (eql nil) mean "use the default.
[19:25:06] <Xach> probably (eql t).
[19:25:40] <Guest74> but you would then have to supply something true, no?
[19:26:00] <Bike> or you could do the two layer thing where CREATE is like there except it immediately calls CREATE-GF
[19:26:06] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:26:09] <phoe> ^
[19:26:18] <Xach> Guest74: you would supply the the symbol T
[19:26:35] <Xach> (let ((surface (create t))) ...)
[19:27:00] <Xach> Yeah, or something like (find-constructor type ...) as a GF
[19:27:05] <Xach> Lots of options.
[19:27:40] <Xach> I'm expressing a personal preference, a defun isn't wrong, but if you are making a GF protocol, I would put CREATE under its umbrella.
[19:27:56] <Guest74> Yeah, I just went with the simplest at this stage.  The backends also have the same methods implemented as normal functions.
[19:28:14] <Bike> phoe: but yeah, the test makes sense.
[19:28:17] <Guest74> but i'm still thinking about the whole surface:create thing.
[19:29:03] <phoe> Bike: the only two options are see are code walking or implementation support, and both of them are going to be terrible to implement
[19:29:12] <Guest74> it just makes it easier that I can just copy/paste (the horrors) create into the backends for when people don't want to use the generic functions.  But I guess I could wrap it in a GF.
[19:29:40] <Bike> phoe: such are language extensions.......................
[19:30:18] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[19:30:24] *** Joins: morganw (~user@80.225.24.132)
[19:30:40] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:30:41] <phoe> macroexpand-dammit does not seem to have the functionalities I need, trivial-macroexpand-all is even simpler, agnostic-lizard is not really documented, and hu.dwim.walker is written in hu.dwim.common-lisp rather than CL *AND* has even less documentation than agnostic-lizard
[19:31:43] *** Quits: jealousmonk (~user@2804:431:e7c5:6582:4810:3ee3:3f59:e857) (Changing host)
[19:31:43] *** Joins: jealousmonk (~user@user/jealousmonk)
[19:31:45] <phoe> and going the other way effectively requires adding a new special form to eight distinct compilers, two of which are closed-source
[19:31:53] <phoe> that's a lot of effort™
[19:34:00] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[19:34:07] <Guest74> Wondering if create should have WIDTH and HEIGHT as required parameters.  Since resizing of some surfaces can be seen as expensive.
[19:37:02] <Guest74> TIL you can't do (eql nil) in a method.
[19:37:32] <attila_lendvai> phoe, hu.dwim.walker has loads of test, though.
[19:37:43] <Xach> Guest74: yes you can.
[19:38:39] <phoe> attila_lendvai: yes, that's a poor man's documentation - I'm trying to dig into it right now
[19:38:41] <attila_lendvai> and a non-trivial use in the form of hu.dwim.reiterate (which is sadly only 80% finished)
[19:39:18] <Guest74> Xach: do you have an example?  I just tried and it told me no such class, while T worked fine.
[19:39:19] <phoe> my main problem is passing information in the walker's lexical environment - something that I'd solve with SYMBOL-MACROLET if I were writing macros
[19:39:33] <phoe> or by rebinding a dynamic variable if I were doing recursion
[19:40:14] <attila_lendvai> phoe, hu.dwim.walker has its own env class. it shouldn't be too hard to customize it, esecially with the use of contextl
[19:40:25] * attila_lendvai looks
[19:40:51] <Xach> Guest74: (defmethod foo ((bar (eql nil))) (list bar))
[19:40:56] <Bike> oh, it uses contextl? interesting.
[19:41:13] <Guest74> nevermind, i'm an idiot
[19:41:21] <Guest74> oops, too late.
[19:41:25] <phoe> how do I access that environment object? it doesn't seem like REWRITE-AST's visitor function accepts it as an argument
[19:41:44] <phoe> Xach: (bar null) even, no need to use an EQL specializer in that particular case
[19:42:02] <attila_lendvai> phoe, see infrastructure.lisp, sadly walk-environment is a struct for some reason, not a class. you'd need to dig into the walker's code to customize it.
[19:42:18] <phoe> ouch
[19:42:49] <attila_lendvai> phoe, doesn't seem to be too hard. that struct is internal to the lib, so the API wouldn't change
[19:43:20] <phoe> I wonder if I can do structure inheritance and somehow tell the walker to use the new class
[19:43:32] <Guest74> phoe: nice to know.  Unfortunately both still require a nil to be supplied.  I should perhaps get over my laziness.
[19:44:09] <phoe> ...nope, it won't work, there's COPY-WALK-ENVIRONMENT and MAKE-WALK-ENVIRONMENT all over the place that won't mesh well with superstructures
[19:44:54] <attila_lendvai> phoe, if you decide to rewrite it to use a class instead of a struct then i'll merge the change. i have nothing against it.
[19:46:04] <attila_lendvai> i have no idea why i chose to use a struct there
[19:46:23] <phoe> I have no idea if I can do that easily - I'll need to learn some of that DEF magic before I become able to work with that codebase
[19:46:52] <phoe> and then I'll need to make the class customizable in some way
[19:48:30] <attila_lendvai> phoe, def is a very trivial layer. the only magic is the char based Export/Inline/export-Accessors, etc. if you keep nagging me about it, i may give it a go myself sometime. not messing much with CL nowadays, though.
[19:49:25] <phoe> well - I'd like to have a portable FBIND that preserves function identity, and I'll certainly need a walker for that
[19:49:58] <phoe> and I want to have such a FBIND in other to put it as a recipe in a new edition of a popular Common LIsp book
[19:50:13] <phoe> so I hope you know what you're getting into if you give me the permission to keep on nagging you
[19:50:41] * phoe reads up about def in meantime
[19:52:41] <attila_lendvai> phoe, heh... in that case i may end up giving you the commit bit to the hu.dwim universe... :)
[19:59:40] <phoe> :O
[20:00:13] * phoe is unsure if he's worthy of such responsibility
[20:01:52] <phoe> that would be, like, the ultimate yak shave - I start with a portable FBIND implementation and end up being a hu.dwim co-maintainer
[20:02:01] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a886:d690:9086:f777)
[20:03:49] <attila_lendvai> phoe, :D
[20:05:31] *** Quits: citizenajb (~citizenaj@modemcable064.134-177-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[20:06:13] <attila_lendvai> well, i could use a hand, it's a one bus project. if i got taken by the police then the hu.dwim codebase would inevitably bitrot...
[20:06:25] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f1:896a:4580:61c1:6850:6520)
[20:06:33] <phoe> attila_lendvai: truth be told, I'd change the deal a little bit - I'll accept the offer, but I'll also want to nag you with questions related to "what is this thing, what does it do, why is it there"
[20:07:17] <phoe> so I can fill in the blanks in that universe, such as user manual and documentation and architecture docs and examples
[20:07:18] <attila_lendvai> phoe, feel free to nag me whenever i'm around, or even on github issues as appropriate
[20:08:52] <attila_lendvai> phoe, the hu.dwim stuff is really not as much as people think. it's probably the fact that the hu.dwim.def thin syntax layer is everywhere, and it gives the impression that it's something very alien. it's just a bunch of libs that use a few extra constructs, like the def macro.
[20:09:55] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a886:d690:9086:f777) (Ping timeout: 250 seconds)
[20:14:32] *** Quits: blacked (~user@user/blacked) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[20:15:07] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[20:16:48] <phoe> attila_lendvai: OK, that works
[20:17:18] <phoe> I'll need some general information about the walker architecture, i think I can figure the DEF on my own
[20:17:40] <phoe> (now that I know what the E I EA things mean in definitions)
[20:21:26] <phoe> attila_lendvai: think you can write something down regarding how the walker's data structures are frobbed during walking and how the walk-environment object is used throughout the walking process and how it can be accessed from the outside right now? I'll try to ask questions based on that
[20:28:53] *** Joins: akoana (~ah@user/akoana)
[20:30:30] <attila_lendvai> phoe, but are there any suprises there? hdw defines its own type for the lexenv (i.e. walk env), which is very much like the impl's lexenv, only some info is extracted from the impl-specific env into the hdw env. and this env is available through the -environment- variable inside the form handlers.
[20:32:52] <attila_lendvai> phoe, -foo- is naming convention for lexically bound implicit variables. and layered-method's are used for the walker methods for extra customizability.
[20:33:58] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[20:34:19] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[20:39:49] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[20:40:23] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:44:27] <phoe> OK, I assume that works - the naming convention also puzzled me a little bit
[20:44:38] <phoe> and I'll need to grok contextl and layered methods
[20:46:57] <mfiano> phoe: There's nothing wrong with that. It wasn't meant to be offensive :)
[20:47:14] <phoe> mfiano: I know, I'm just personally feeling bad about it
[20:47:25] <phoe> too much to be done, too few hours on the clock :(
[20:47:35] <mfiano> Yes very much agree :(
[20:52:47] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:54:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:57:44] <attila_lendvai> phoe, layered methods are just a defmethod with an extra, implicit object, the context, to which you can add and remove classes
[20:59:41] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[21:02:41] <Guest74> is there some convention for conditionally defining a method depending on whether a certain system/package is available?  I'd like to be able to support all the various colour format libraries out there without loading every single library on a users computer.
[21:03:53] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[21:07:24] <phoe> attila_lendvai: thanks, I'll grok it
[21:10:54] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[21:15:49] <Guest74> or is it even possible? I tried a toplevel (when (find-package 'some)(defmethod something((thing some:thing))... and it barfs on package not found.
[21:18:42] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:19:02] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:19:58] <pjb> Guest74: At read-time: #+#.(cl:if  (cl:find-package 'some) '(:and) '(:or)) (defmethod something((thing some:thing))... and)
[21:20:37] <pjb> Guest74: At run-time: (when (find-package 'some)  (eval (read-from-string "(defmethod something ((thing some:thing))...)")))
[21:20:45] <Guest74> oh, i thought that was only for features, or that was the impression I got from clhs.
[21:21:00] *** Joins: dra (~dra@2a04:4540:640f:b700:ac3b:5529:89a2:b679)
[21:21:47] <pjb> Guest74: an alternative is to also define the package in your system, and test in the method, at run-time whether the dependency is available.
[21:21:53] <Guest74> oh, I see, using and or
[21:22:26] <pjb> (defpackage "SOME" (:export "THING")) (defmethod something ((thing some:thing))  (if (some-runtime-test-to-see-if-some-has-been-loaded-p) (do-something) (warn "SOME unavailable")))
[21:23:01] <Guest74> I'd think that would run into issues with redefining a package, no?
[21:23:24] <pjb> Well, there's some implementation dependent behavior, but in general implementations do the right thing.
[21:24:42] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 250 seconds)
[21:24:51] <pjb> The question is when you want to allow loading the SOME package?
[21:25:04] <pjb> If you test at read-time, you must ensure loading it at compilation time, and at run-time.
[21:25:18] <Guest74> yes, i've been thinking about that.  What if person loads a colour library after my drawing library.
[21:25:21] <pjb> If you test at run-time, you must ensure it has been loaded at run-time, BEFORE you load you system.
[21:25:40] <pjb> If you test at run-time, then you can also load it AFTER you load your system.
[21:26:17] <sm2n> Guest74: you could put the method in a subsystem
[21:26:30] <pjb> That would be clean indeed.
[21:26:43] <pjb> A third system that you load only when both dependencies are available.
[21:26:49] <Guest74> Yes, that's another option.  a one method system for all the colour libraries.
[21:27:21] <Guest74> which makes for lots of systems.
[21:28:23] <Guest74> i think there's at least 5 colour libraries?
[21:28:37] <pjb> the number of systems defined doesn't matter.
[21:28:51] <pjb> disk space is abondant and cheap.
[21:29:30] <Guest74> I'd say it places more burden on the user for something that feels like it shouldn't be the users burden.
[21:29:37] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 240 seconds)
[21:29:47] <Guest74> and it'd be easier for me to include all the methods in one file.
[21:29:49] <pjb> lisp is sufficiently dynamic so that you may adapt at run-time.
[21:30:39] <pjb> (when (and (find-package "SOME") (find-symbol "DOSTUFF" "SOME")) (funcall (find-symbol "DOSTUFF" "SOME") :blah))
[21:31:46] <Guest74> this is different in that's specializing a method on a colour class from some colour library.  funcall would be easier.
[21:32:03] <sm2n> The issue with all the other solutions is that you can have ordering issues, or have unnecessary runtime overhead
[21:32:50] <sm2n> like, you have a reader conditional and someone loads your library before one of the libraries you support, then it won't work
[21:33:02] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10ed:252e:4580:61c1:6850:6520)
[21:33:04] <sm2n> and if you test at runtime, well, then you are testing at runtime
[21:33:17] <sm2n> (which might be fine!)
[21:33:46] <phoe> is there a portable way to check at macroexpansion time if some piece of code is being compiled via COMPILE or COMPILE-FILE rather than not?
[21:33:58] <pjb> Nope.
[21:34:11] <Guest74> I guess I can do one system per library which depends on that library and transforms each colour to a specified format so that any other surfaces get automatic support for those colours.
[21:34:15] <pjb> You can test for *compile-file-pathname*
[21:34:27] <phoe> COMPILE-FILE binds *COMPILE-FILE-PATHNAME*, so that's easier, but I need to find something COMPILE
[21:34:33] <phoe> s/COMPILE/for COMPILE?
[21:34:40] <phoe> pjb: yes
[21:35:41] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f1:896a:4580:61c1:6850:6520) (Ping timeout: 252 seconds)
[21:35:53] <pjb> You can do: (let ((*when* 'compile-file)) (compile-file "foo"))   (let ((*when* 'compile)) (compile nil (lambda (…) …)))   or (let ((*when* 'execute)) (eval '(…)))
[21:38:01] <pjb> Note that compile-file may call compile.
[21:40:15] <phoe> yes, but I want the inverse - to check if a macro is being expanded by a compiler or an interpreter
[21:40:25] <phoe> since I have some code that depends on it wrt LOAD-TIME-VALUE
[21:42:23] <pjb> Macros can be expanded at different times, and multiple times, so it sounds like a very bad design to depend on that.
[21:45:46] *** Joins: cosimone` (~user@93-34-132-136.ip49.fastwebnet.it)
[21:46:22] <phoe> my main gripe is the behavior of LOAD-TIME-VALUE that can differ between evaluated and compiled code
[21:46:36] <phoe> and I kind of wonder if I can actually depend on this behavior to detect this behavior
[21:46:42] <Inline> heh
[21:47:21] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[21:47:26] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[21:48:25] <Inline> conceptually it sounds like at compile time the compiler would have to delay the init of stuff meant to be at load-time
[21:49:51] <phoe> yes, and that is what happens
[21:50:49] <phoe> https://plaster.tymoon.eu/view/2901#2901
[21:50:59] <Inline> so kinda like a container to be filled in later...
[21:51:13] <phoe> take a look at the output of the possibly not compiled code though
[21:54:06] *** Quits: cosimone` (~user@93-34-132-136.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[21:54:32] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:55:11] <Inline> hmm
[22:01:16] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[22:10:35] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Quit: WeeChat 3.3)
[22:11:48] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[22:13:34] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 268 seconds)
[22:14:02] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[22:16:49] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:18:06] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Bridge terminating on SIGTERM)
[22:18:08] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Bridge terminating on SIGTERM)
[22:18:09] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Quit: Bridge terminating on SIGTERM)
[22:18:09] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Bridge terminating on SIGTERM)
[22:18:10] *** Quits: char[m] (~charlesma@2001:470:69fc:105::1:7050) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: miique (~miiquemat@2001:470:69fc:105::1:6901) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: sp (~sp@user/susam) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: prov[m] (~provessor@2001:470:69fc:105::cfb) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Quit: Bridge terminating on SIGTERM)
[22:18:13] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[22:18:16] *** Quits: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81) (Quit: Bridge terminating on SIGTERM)
[22:18:16] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Quit: Bridge terminating on SIGTERM)
[22:18:16] *** Quits: linjian (~linj@user/linj) (Quit: Bridge terminating on SIGTERM)
[22:18:17] *** Quits: morganw (~user@80.225.24.132) (Read error: Connection reset by peer)
[22:20:20] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:22:21] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[22:22:31] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:ed4d:fe0e:25ef:ac1f) (Ping timeout: 250 seconds)
[22:22:36] *** Quits: shozo (~user@178.74.52.55) (Remote host closed the connection)
[22:24:10] *** Joins: kpoeck (~kpoeck@2a01:598:91b4:2cea:2dba:895c:baf5:4c1f)
[22:29:10] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10ed:252e:4580:61c1:6850:6520) (Read error: Network is unreachable)
[22:31:16] *** Joins: morganw (~user@80.225.24.132)
[22:34:41] <phoe> pjb: Inline: https://plaster.tymoon.eu/view/2901#2902 the second paste there
[22:34:42] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[22:34:42] *** Joins: sepanko (~sepanko@user/sepanko)
[22:34:42] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[22:34:42] *** Joins: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b)
[22:34:42] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[22:34:42] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[22:34:42] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[22:34:43] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[22:34:43] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[22:34:43] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[22:34:43] *** Joins: sp (~sp@user/susam)
[22:34:43] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[22:34:43] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[22:34:43] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[22:34:43] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[22:34:43] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[22:34:43] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[22:34:43] *** Joins: char[m] (~charlesma@2001:470:69fc:105::1:7050)
[22:34:55] *** Joins: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f)
[22:34:55] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[22:34:55] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[22:35:08] *** Joins: prov[m] (~provessor@2001:470:69fc:105::cfb)
[22:35:08] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[22:35:08] *** Joins: linjian (~linj@user/linj)
[22:35:08] *** Joins: miique (~miiquemat@2001:470:69fc:105::1:6901)
[22:38:41] <phoe> I just realized that this can work as a poor man's "was this code minimally compiled" predicate
[22:40:56] <EdLangley[m]> Guest74: I think the most common way to do this is just to define new systems with names like "a/b" and put the methods in the files loaded by that system.
[22:42:37] *** Quits: kpoeck (~kpoeck@2a01:598:91b4:2cea:2dba:895c:baf5:4c1f) (Quit: Client closed)
[22:44:40] *** Joins: silasfox (~sbv@p54bc2d93.dip0.t-ipconnect.de)
[22:44:40] *** Quits: silasfox (~sbv@p54bc2d93.dip0.t-ipconnect.de) (Client Quit)
[22:46:38] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Client limit exceeded: 20000)
[22:47:04] *** Quits: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81) (Quit: Client limit exceeded: 20000)
[22:47:17] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Client limit exceeded: 20000)
[22:47:21] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Client limit exceeded: 20000)
[22:47:40] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Client limit exceeded: 20000)
[22:47:41] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Quit: Client limit exceeded: 20000)
[22:48:30] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Client limit exceeded: 20000)
[22:48:55] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Quit: Client limit exceeded: 20000)
[22:48:58] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Client limit exceeded: 20000)
[22:49:23] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Quit: Client limit exceeded: 20000)
[22:49:28] <EdLangley[m]> Guest74: This is why you define a my-library/colour-library system
[22:49:34] <EdLangley[m]> That depends on both
[22:49:55] <EdLangley[m]> There's also this: https://asdf-system-connections.common-lisp.dev
[22:50:01] <EdLangley[m]> I don't really like how its internals work, but the interface is something I like: automatically load a system based on the other systems that have been loaded
[22:50:17] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Client limit exceeded: 20000)
[22:50:17] *** Quits: sp (~sp@user/susam) (Quit: Client limit exceeded: 20000)
[22:50:31] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Quit: Client limit exceeded: 20000)
[22:53:16] *** Quits: miique (~miiquemat@2001:470:69fc:105::1:6901) (Quit: Client limit exceeded: 20000)
[22:55:04] *** Quits: linjian (~linj@user/linj) (Quit: Client limit exceeded: 20000)
[22:55:11] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Quit: Client limit exceeded: 20000)
[22:55:16] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Quit: Client limit exceeded: 20000)
[22:55:32] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Quit: Client limit exceeded: 20000)
[22:55:42] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Client limit exceeded: 20000)
[22:56:20] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Quit: Client limit exceeded: 20000)
[22:59:17] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Remote host closed the connection)
[22:59:44] *** Quits: char[m] (~charlesma@2001:470:69fc:105::1:7050) (Quit: Client limit exceeded: 20000)
[23:00:23] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[23:00:23] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[23:00:23] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[23:00:23] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[23:00:24] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[23:00:24] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[23:00:24] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[23:00:24] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[23:00:24] *** Joins: sp (~sp@user/susam)
[23:00:24] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[23:00:24] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[23:00:24] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[23:00:24] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[23:00:24] *** Joins: char[m] (~charlesma@2001:470:69fc:105::1:7050)
[23:00:24] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[23:00:24] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[23:00:24] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[23:00:24] *** Joins: linjian (~linj@user/linj)
[23:00:24] *** Joins: miique (~miiquemat@2001:470:69fc:105::1:6901)
[23:00:37] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[23:01:33] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[23:02:18] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Client limit exceeded: 20000)
[23:11:14] *** Quits: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[23:34:46] *** Joins: Oladon (~olad@98.43.81.226)
[23:49:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:51:08] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC (IRC client for Emacs 27.1))
[23:51:45] <dbotton> is there a common thread safe hash used in cl?
[23:51:49] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[23:51:49] *** Joins: sepanko (~sepanko@user/sepanko)
[23:54:47] <phoe> https://github.com/no-defun-allowed/concurrent-hash-tables is one thing I know of
[23:55:05] <phoe> you could possibly ask hayley for submitting that one to quicklisp
[23:57:35] <random-nick> some implementations also add a keyword argument to make-hash-table which makes it thread safe
[23:57:54] <random-nick> but that probably just uses a mutex, not sure
[23:59:07] <dbotton> thanks
