[00:06:03] <daxim> I noticed <https://jobs.perl.org/job/21870> references the same senior Vue/TS role from <https://nitter.42l.fr/OvidPerl/status/1432611841734230016> and was not filled within 2¬Ω months (previous discussion: <http://redd.it/pfyytc>), do you want to speculate why?
[00:06:05] <Paperbot> Link title(s): [ Multiple Remote Contracting Roles (Perl Jobs) ] [ Curtis ‚ÄúOvid‚Äù Poe üá∫üá∏üá´üá∑‚úäüèæ (@OvidPerl): "We need even more senior #Perl developers!    Also need #typ... ] [ Ovid: "We need even more senior #Perl developers! All roles remote." : perl <https://www.reddit.com/comments/pfyytc> ]
[00:06:43] <gamo> Hi. Playing with latin-1 and various JSON modules, the winner is YAML::XS. Do you agree?  
[00:07:39] <choroba> daxim: maybe the candidates weren't senior enough?
[00:08:55] <daxim> gamo, disagree.  correctness: http://redd.it/ah29uh  performance: https://gist.github.com/jeffreykegler/cdf4f8eceb07fcedb9d5dc52bd69a56a https://github.com/jeffreykegler/Marpa--R2/tree/master/blog/json
[00:08:56] <Paperbot> Link title(s): [ updated JSON parsers test suite : perl <https://www.reddit.com/comments/ah29uh> ] [ ESLIF benchmark Nov 15 2021 ¬∑ GitHub ] [ Marpa--R2/blog/json at master ¬∑ jeffreykegler/Marpa--R2 ¬∑ GitHub ]
[00:10:37] <gamo> daxim JSON::MaybeXS bites the dust
[00:10:49] <ether> I use YAML::PP for maximum compatibility with JSON::PP::Boolean and numification. it's slower but it's more compatible than YAML::XS
[00:11:15] <ether> for JSON, Cpanel::JSON::XS is the only sane option (fronted by Mojo::JSON or JSON::MaybeXS potentially)
[00:13:04] <gamo> not extensively, but I tried CPAnel too
[00:13:15] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 265 seconds)
[00:20:36] *** Joins: ratagin (~ratagin@208.96.144.68)
[00:22:24] <Grinnz> you're not making much sense. YAML::XS is for YAML, not JSON
[00:22:38] <Grinnz> JSON::MaybeXS is just a wrapper of Cpanel::JSON::XS
[00:24:19] <daemon> I mean you could use YAML::XS for Json, it would complain terrible and give you a pile of junk and likely die
[00:24:26] <daemon> but eh guess you could do it :)
[00:25:02] <daxim> not advisable  https://metacpan.org/pod/JSON::XS#JSON-and-YAML
[00:25:03] <Paperbot> Link title(s): [ JSON::XS - JSON serialising/deserialising, done correctly and fast - metacpan.org ]
[00:26:10] <Grinnz> the really funny part of schmorp's rant about that is that he's the one who has written META.yml in JSON syntax for no apparent reason
[00:26:38] <gamo> No, I'm not mixing data. I try both in paallel
[00:26:53] <daxim> ü§£
[00:27:24] <ratagin> anyone remember how to include an example code block in POD?  I thought I knew how but podchecker thinks otherwise.
[00:27:43] <choroba> just indent it
[00:27:47] <Grinnz> ratagin: https://perldoc.perl.org/perlpod#Verbatim-Paragraph
[00:27:47] <Paperbot> Link title(s): [ perlpod - the Plain Old Documentation format - Perldoc Browser ]
[00:27:56] <daemon> somewhere there is a tool that lets you upload your pod and it will check it and render it for you
[00:28:15] <Grinnz> https://metacpan.org/pod2html
[00:28:15] <Paperbot> Link title(s): [ Pod Renderer - metacpan.org ]
[00:28:22] <ratagin> Verbatim!!! Thank you!
[00:28:34] <gamo> Thank you!
[00:28:53] <daemon> Grinnz++ # always forget that, really needs to be more public that link - I sometimes upload minor versions of modules just to see how they render >.>
[00:29:20] <Grinnz> its in https://metacpan.org/tools, not sure a better place that wouldnt be clutter
[00:29:21] <Paperbot> Link title(s): [ Search the CPAN - metacpan.org ]
[00:29:43] <daemon> maybe something in dist zilla when you work on a module, 'render2html' option or something
[00:29:49] <daemon> or 'check pod is legit'
[00:30:04] <Grinnz> [PodSyntaxTests] already does that when you dzil test
[00:30:14] <Grinnz> and for rendering, just use perldoc
[00:30:26] <daemon> does it output a packed html page so you can visually check it too
[00:30:47] <Grinnz> no, but you'd have to do a few customizations to get it to look like metacpan's anyway
[00:31:03] <daemon> oh yeah because that is its css that is in play in the rendering
[00:32:00] <Grinnz> github's pod rendering is probably the easiest option to get a baseline tbh
[00:32:12] <Grinnz> but it wont do it on pm files
[00:32:13] <daemon> did not even know it could
[00:32:29] <daemon> wait so how do you get it to do it, .pod?
[00:32:36] <Grinnz> yes
[00:32:48] <daemon> interesting will have to take a peak
[00:32:58] <Grinnz> it renders doc files and doesnt consider mixed
[00:34:11] <daemon> I see
[00:34:27] <daemon> makes sense but you would think they would detect the common pod headers in pm files
[00:34:39] <daemon> or even an option
[00:34:45] <Grinnz> its not really built around perl standards :P
[00:34:49] <daemon> :)
[00:38:36] *** Quits: madduck (~madduck@user/madduck) (Remote host closed the connection)
[00:39:33] <OnlineCop> If `\b` is an identifier boundary between \w and \W, is there a whitespace boundary that works only between \s and \S (or /^\S/ or /\S$/) ?
[00:40:00] <Grinnz> no, but you can use lookaheads to approximate it
[00:41:19] <Grinnz> m/foo(?!\S)/ - followed by either a space character or EOL
[00:41:35] <OnlineCop> Essentially `/(?<=\s)(?=\S)|(?<=\S)(?=\s)/` then?
[00:42:00] <OnlineCop> Actually, I probably would need `/(?<!\S)(?=\S)|(?<=\S)(?!\S)/` to handle BOL and EOL...
[00:42:03] <Grinnz> it's simpler as long as you know what you are bounding
[00:42:29] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:43:10] <Grinnz> (?<=\S)x is the same as x, and (?<=\s)x can never match
[00:43:20] <Grinnz> er, i meant to use the forward ones for that
[00:47:51] *** Joins: alex11 (~alex11@user/alex11)
[00:48:57] *** Joins: madduck (~madduck@user/madduck)
[00:51:42] <gordonfish> Maybe I'm overthinking this. I want to be able to send various commands to an already running instance of a program. I thought about just using %SIG'nal handlers, keep it simple, though there are only two generic signals, USR1 and USR2. HUP could be leveraged to. I'm wondering what might be a better way? I want to be able to tell the program, which has a main loop, things like pause, resume, foo, bar, baz, things like that.
[00:52:35] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[00:53:51] <gordonfish> I suppose I could implement some sort of socket or http or so type communication protocol, though if there is a simpler approach that I'm missing, I'd like to know. Right now I'm kind of drawing a blank.
[00:54:41] <Grinnz> socket would be complex to set up (less so if you're using an event loop already), pubsub would be easy to set up but requires a broker process (redis, pg, mercury)
[00:54:50] <gordonfish> %SIG handlers work well in that they can interupt the main loop when triggered and then go back to the main loop when done.
[00:56:07] <Grinnz> if you happen to be using IO::Async, https://metacpan.org/pod/IO::Async::Loop#listen and https://metacpan.org/pod/IO::Async::Loop#connect
[00:56:08] <Paperbot> Link title(s): [ IO::Async::Loop - core loop of the IO::Async framework - metacpan.org ] [ IO::Async::Loop - core loop of the IO::Async framework - metacpan.org ]
[00:56:39] <Grinnz> dunno if that works for domain sockets
[00:56:50] <Grinnz> but that would be the simplest option
[00:56:50] <gordonfish> Grinnz: I was wondering about using IO::Async
[01:00:22] *** Joins: rgrinberg (~textual@201.192.183.100)
[01:09:17] *** Joins: kensanata (~user@user/kensanata)
[01:10:21] <tkr> You are overthinking this. Just open a socket an communicate with HTTP over it, nothing bad about it (unless you can name something specific). Something like RPC::Any (haven't used it)?
[01:12:16] <LeoNerd> Ooh more highlights
[01:18:57] *** Joins: jasper_ (~user@styria.daemonized.org)
[01:19:26] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[01:19:49] *** Joins: troller (~p@2a02:6b8:b081:7203::1:21)
[01:23:10] *** Quits: martinus__ (~martin@95.31.201.77.rev.sfr.net) (Ping timeout: 260 seconds)
[01:26:06] <zgu> overthink it even more, use CORBA!
[01:26:07] <tkr> .. pausing the main loop of a program might be a problem though. :) How would you resume it?
[01:26:17] <zgu> or possibly dbus
[01:26:36] <zgu> i assume it would pause everything except waiting for more commands
[01:26:56] <tkr> Mm...
[01:28:13] <tkr> "Dear operating system, would you please pause this program for any other actions than for more commands?"
[01:29:14] <tkr> Operating system: "Sure! Just tell the program to ping me when it wants more commands!" :)
[01:30:43] *** Quits: miojo (~fu@186.231.92.60) (Quit: leaving)
[01:31:11] <gordonfish> By pause I merely meant stop doing what was actively being performed in the main part of the program, not suspend the process.
[01:32:39] *** Quits: deadmarshal (~deadmarsh@95.38.117.166) (Ping timeout: 268 seconds)
[01:34:57] <gordonfish> What I'm doing is writting a manager/dispatch sort of program that will wrap around a particular app. What it will do, is go through a list of thing-to-load and how-long-it-should-show-for pairs. Like [[foo => 10],[bar => 15],[baz => 8]...] So first, load foo, wait 10 seconds, load bar, wait 15 sec, load baz, wait 8 sec, ...
[01:35:02] <tkr> Okay. Sorry! But to be fair: "I want to be able to send various commands to an already running instance of a program." could just mean anything. :)
[01:35:23] <gordonfish> I want to do this is IO::Async, as I've used it before for some things and I liked working with it.
[01:36:24] <gordonfish> Though I'm having a little trouble getting the timers right, since they seem to all act when expiration occurs, rather than, do-this-then-wait-this-long.
[01:36:31] <jabberwok> CORBA? Egads that recalls the joy of writing 32-bit thunking layers for a 16-bit DLL
[01:36:52] <gordonfish> jabberwok: That musta been fun
[01:37:04] <zgu> even more fun now - you need a 64 bit wrapper too
[01:37:15] <gordonfish> Using win 3.x era code in later windows
[01:37:30] <tkr> gordonfish: Do you have to take into account for how long the programs will actually run?
[01:39:10] <tkr> Your problem description is a bit weird. Is it a GUI app?
[01:40:31] <gordonfish> tkr: The program should keep running until told to stop, looping through the list over and over ($i + 1) % @list style.
[01:41:41] <gordonfish> tkr: The program I'm writing is a normal CLI program, it is just managing a GUI app, telling it what to do (what to load)
[01:41:47] <zgu> you definitely want some kind of event loop
[01:42:00] <tkr> gordonfish: Why not make it a server that queues the things to run and clients that consume items from the queue? The clients could maybe then have control over the "pausing/resuming"?
[01:42:19] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Remote host closed the connection)
[01:42:42] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[01:43:03] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-55.dsl.bell.ca) (Remote host closed the connection)
[01:43:39] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Remote host closed the connection)
[01:44:42] <gordonfish> tkr: That might be something to think about, though this doesn't need to be that complicated. It just needs to tell the GUI app to load things, waiting each time according to the seconds specified.
[01:46:32] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[01:47:12] <tkr> Well, you anyway need to have more than one process to do this. I think you will make it simpler for yourself by using a server-client architecture. As I said, I haven't used RPC::Any, but I would think it would enable you to communicate by just simple JSON messages without worrying about the layers below that at all.
[01:49:01] <tkr> Of course, you can massage your own local JSON over unix sockets -system, if you like. But I would also assume that those RPC modules work with unix sockets also, if you really want to avoid TCP (but again, why?). :)
[01:49:36] <gordonfish> Oh, I can set an inital IO::Async::Timer::Countdown->new ... with delay => 0 and in that on_expire, fire a next_task sub that does the task (tell GUI to load) then creates another timer with the delay and on_expire => \&next_task
[01:50:11] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 264 seconds)
[01:52:57] <zgu> you could just use Net::Async::HTTP::Server. advantage of http is whatever way you want to write a client there's already going to be an existing library that does all the hard work
[01:53:19] <zgu> rather than roll your own wire protocol
[01:53:23] *** Quits: ircuser (~ircuser@89.111.36.243) (Ping timeout: 250 seconds)
[01:53:36] *** Joins: ircuser (~ircuser@89.111.36.243)
[01:53:51] <gordonfish> zgu: Thanks, that'll be real handy for controling my wrapper app then.
[01:59:46] *** Joins: whynot (~whynot@37.73.154.250)
[02:00:58] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[02:02:24] *** Joins: pj (~pj@ghettoforge/pj)
[02:13:58] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 268 seconds)
[02:14:01] *** Quits: ratagin (~ratagin@208.96.144.68) (Quit: Leaving)
[02:15:16] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[02:22:44] <tkr> That looks good!! LeoNerd, great job! Maybe something Net::Async::HTTP::Server (json => 1) to send JSON over the wire and decode is as a perl object on the other side. Ie. abstract away the HTTP layer.
[02:24:39] <zgu> could always add a layer on top to do URL dispatch and body decoding. but then you get dangerously close to writing yet another web application framework
[02:24:52] <tkr> ..oO( just had to double-check that https://metacpan.org/pod/Net::Async::JSON::Server did not exist )Oo.
[02:25:10] <zgu> although i guess it would be trivial to hook it up to PSGI
[02:28:17] <zgu> i've thrown together a few web API servers in various perl projects over the years but they don't really follow any defined architecture like RPC or REST
[02:34:10] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 256 seconds)
[02:34:13] *** Joins: pizdets_ (~pizdets@183.182.110.70)
[02:34:50] *** Quits: pizdets (~pizdets@183.182.115.203) (Ping timeout: 250 seconds)
[02:36:22] *** Joins: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[02:45:35] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[02:52:16] * GumbyPAN CPAN Upload: Object-Pad-0.57 by PEVANS https://metacpan.org/release/PEVANS/Object-Pad-0.57
[03:01:17] * GumbyPAN CPAN Upload: Object-Pad-ClassAttr-Struct-0.02 by PEVANS https://metacpan.org/release/PEVANS/Object-Pad-ClassAttr-Struct-0.02
[03:01:17] * GumbyPAN CPAN Upload: Object-Pad-SlotAttr-Final-0.04 by PEVANS https://metacpan.org/release/PEVANS/Object-Pad-SlotAttr-Final-0.04
[03:06:18] * GumbyPAN CPAN Upload: Object-Pad-SlotAttr-Isa-0.02 by PEVANS https://metacpan.org/release/PEVANS/Object-Pad-SlotAttr-Isa-0.02
[03:06:18] * GumbyPAN CPAN Upload: Object-Pad-SlotAttr-LazyInit-0.04 by PEVANS https://metacpan.org/release/PEVANS/Object-Pad-SlotAttr-LazyInit-0.04
[03:06:53] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[03:07:19] <LeoNerd> been busy ;)
[03:07:34] <ilmari> LeoNerd: how long until Object::Pad needs its version number lengthened?
[03:08:12] <LeoNerd> I'll probably do it around the 0.79 => 0.800 like I did for IO::Async, if we get that far
[03:10:59] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[03:11:18] * GumbyPAN CPAN Upload: Object-Pad-SlotAttr-Trigger-0.05 by PEVANS https://metacpan.org/release/PEVANS/Object-Pad-SlotAttr-Trigger-0.05
[03:15:22] *** Joins: geli (~gelignite@55d4c92e.access.ecotel.net)
[03:15:58] *** Quits: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[03:17:15] *** Quits: Pali (~pali@user/pali) (Ping timeout: 250 seconds)
[03:18:06] *** Quits: magla (~gelignite@55d4e1d7.access.ecotel.net) (Ping timeout: 268 seconds)
[03:20:03] *** Joins: magla (~gelignite@55d46975.access.ecotel.net)
[03:21:48] *** Quits: geli (~gelignite@55d4c92e.access.ecotel.net) (Ping timeout: 268 seconds)
[03:21:59] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:34:55] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[03:38:12] *** Quits: hudo__ (~hudo@62.68.19.39) (Ping timeout: 256 seconds)
[03:40:52] *** Joins: gast0n (~g4570n@user/gast0n)
[03:44:37] *** Quits: troller (~p@2a02:6b8:b081:7203::1:21) (Ping timeout: 268 seconds)
[03:44:48] *** Joins: rgrinberg (~textual@201.192.183.100)
[03:57:48] *** Joins: troller (~p@80.240.216.69)
[04:00:06] <aquanight> why would the version number need to be lengthened?
[04:01:39] <Grinnz> because he's afraid of 1.0
[04:01:57] <Grinnz> (maybe justified in the case of Object::Pad :P )
[04:04:55] *** Parts: jasper_ (~user@styria.daemonized.org) ()
[04:05:25] *** Joins: Colt (~Colt@user/colt)
[04:05:57] <v`> sorry, i was wrong, cowboy bebop and the wheel of time are tomorrow
[04:08:21] <zgu> make it asymptotically approach sqrt(2)/2?
[04:10:23] *** Quits: magla (~gelignite@55d46975.access.ecotel.net) (Quit: Stay safe!)
[04:11:10] *** Quits: vague (~vague@irssi/staff/vague) (Ping timeout: 260 seconds)
[04:15:53] *** Joins: vague (~vague@irssi/staff/vague)
[04:19:08] <aquanight> sweval: sqrt(2)/2
[04:19:10] <perlbot> aquanight: 0.707106781186548
[04:19:13] <aquanight> bit late for that I think
[04:19:24] <aquanight> hmm
[04:19:29] <aquanight> sweval: 2**(-.5)
[04:19:31] <perlbot> aquanight: 0.707106781186548
[04:19:37] <aquanight> oh good I'm not crazy.
[04:20:53] <aquanight> oh no it's 0.57
[04:21:03] <aquanight> I don't know why I thought it was already .79
[04:21:40] <aquanight> though
[04:22:05] <aquanight> "Added :isa() and :does() class attributes; encourage those rather than the older keyword style" I think when you're before 1.0 you're allowed to make breaking changes in a .1/.01/.001/whatever
[04:22:36] <aquanight> but that's just me
[04:30:37] *** Quits: whynot (~whynot@37.73.154.250) (Quit: leaving)
[04:39:35] <ilmari> aquanight: that's why it might need lengthening, because otherwise he might run of of numbers before it's ready for 1.00
[04:40:20] <ilmari> or did you mean he could have just ripped out the old style, rather than merely discouraging it?
[04:40:28] <ilmari> it's okay to be polite even pre-1.0 :)
[04:43:06] *** Quits: k-man (~jason@user/k-man) (Quit: WeeChat 3.3)
[04:48:17] *** Joins: k-man (~jason@user/k-man)
[04:51:51] *** Joins: GeekRuthie (GeekRuthie@2600:3c00::f03c:92ff:fee2:9bf3)
[04:56:40] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[05:01:20] <aquanight> I mean I guess you could keep it for a bit
[05:01:28] <aquanight> decide whether you like attributes or keywords better
[05:06:53] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:e119:8159:ccc4:5b47) (Ping timeout: 250 seconds)
[05:07:56] *** Joins: willthechill (~willthech@107-217-160-207.lightspeed.austtx.sbcglobal.net)
[05:13:21] <aquanight> hmm. I need to account for OP_SCALAR during const checking it seems.
[05:14:14] <aquanight> in particular, scalar>rv2av>const as a result of use constant FOO => 1..5; foo scalar(FOO);
[05:14:36] <aquanight> apparently it's too much to ask that would be folded to a simple 5 (size of the list constant)
[05:14:50] <aquanight> well
[05:14:54] <aquanight> hm
[05:15:43] *** Joins: PlayerOne (~PlayerOne@user/playerone)
[05:15:47] *** Parts: PlayerOne (~PlayerOne@user/playerone) ()
[05:24:06] <simcop2387> aquanight: why would that be folded to 5? you're making a bunch more constants.  like 2 and 4
[05:24:28] <aquanight> simcop2387: scalar context applied to a list
[05:24:37] <aquanight> list constant*
[05:24:44] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[05:24:57] <aquanight> which basically produces its size like arrays do
[05:25:06] *** Joins: troller (~p@2a02:6b8:b081:16::1:35)
[05:25:20] <aquanight> in fairness, perl doesn't see "list constants" as true constants
[05:25:35] <aquanight> the "constant" is a reference *to* the array
[05:25:51] <simcop2387> yea but what's making the scalar context there?
[05:26:00] <aquanight> simcop2387: ... the scalar operator?
[05:26:22] <simcop2387> i meant in the use constant line.
[05:26:30] <aquanight> it's not constant there no
[05:26:41] <aquanight> that's not where it would fold anything
[05:26:46] <simcop2387> eval: use constant FOO => 1..5; [FOO]
[05:26:47] <perlbot> simcop2387: [1,2,3,4,5]
[05:26:49] <aquanight> where it's *sed* should fold to 5
[05:26:54] <aquanight> used*
[05:27:00] <simcop2387> oh that isn't doing what i thought it would.  i thought FOO would only be 1
[05:27:14] <aquanight> nah you can make list constants that way
[05:27:25] <aquanight> they get inlined as RV2AV>CONST
[05:27:26] <simcop2387> i don't think i've ever done that, interesting
[05:27:50] <aquanight> basically a "CONST" SV contains a reference to the array in question
[05:28:48] <aquanight> but when used in scalar context it comes out as SCALAR>RV2AV>CONST
[05:28:59] <aquanight> which as you'd expect produces the length of the list constant
[05:29:47] <aquanight> sorry I should say when used with the scalar operator.
[05:30:14] <aquanight> my $x = FOO would just be SASSIGN>(PADSV, RV2AV>CONST)
[05:30:32] <aquanight> but still the same because yeah
[05:30:47] <aquanight> anyway point is I would've expected it to reduce it to just the length
[05:31:42] <aquanight> it's not specific to the scalar operator, but in my particular case that's the only time it would show up that I'd care about
[05:32:06] <aquanight> SASSIGN would stop :pure transformation because the argument list is no longer constant
[05:32:29] <aquanight> oh but
[05:32:42] <aquanight> :prototype($) can apply scalar context *without* a scalar operator
[05:32:52] <aquanight> but I don't need to care about that.
[05:33:21] <aquanight> hmmm
[05:34:12] <simcop2387> i might have expected it to reduce it to just the final value but i'm honestly not sure what it *should* do.
[05:34:24] <simcop2387> eval: scalar(5..10)
[05:34:25] <perlbot> simcop2387: No output.
[05:34:29] <simcop2387> eval: print scalar(5..10)
[05:34:30] <perlbot> simcop2387: 1
[05:34:34] <aquanight> sweval: use constant FOO => 9..14; print scalar FOO;
[05:34:35] <perlbot> aquanight: 6
[05:34:52] <aquanight> I mean
[05:35:04] <aquanight> using a list constant in scalar context probably doesn't make sense in a lot of ways
[05:35:12] <aquanight> list constants themselves can be hard to make sense out of I guess
[05:35:25] <aquanight> I don't see them get used often
[05:35:51] <aquanight> also I just remebered how weird prototypes are.
[05:36:13] <aquanight> sub thing ($first, @rest) { } thing(1..5); # signature. Fine. $thing = 1, @rest = (2..5);
[05:36:49] <aquanight> sub thing :prototype($@) ($first, @rest) { } thing(1..5); # $first = ($. == 1), @rest = ();
[05:39:12] <xenu> https://metacpan.org/pod/constant#List-constants
[05:39:13] <Paperbot> Link title(s): [ constant - Perl pragma to declare constants - metacpan.org ]
[05:48:52] *** Quits: chronon (~chronon@user/chronon) (Ping timeout: 260 seconds)
[05:50:17] *** Joins: chronon (~chronon@user/chronon)
[05:53:57] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[05:58:23] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:06:36] * GumbyPAN CPAN Upload: Tree-RB-XS-0.03 by NERDVANA https://metacpan.org/release/NERDVANA/Tree-RB-XS-0.03
[06:10:35] *** Quits: Su-Shee (~Susanne@p4ffc711e.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:12:10] *** Joins: Su-Shee (~Susanne@p4ffc7586.dip0.t-ipconnect.de)
[06:24:29] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:29:18] *** Quits: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Quit: No Ping reply in 180 seconds.)
[06:33:33] *** Joins: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net)
[06:35:17] *** Joins: rgrinberg (~textual@201.192.183.100)
[06:35:47] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 264 seconds)
[06:43:15] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[06:57:33] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:57:33] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:57:33] *** finn_elija is now known as FinnElija
[07:01:42] * GumbyPAN CPAN Upload: Getopt-EX-Hashed-1.03 by UTASHIRO https://metacpan.org/release/UTASHIRO/Getopt-EX-Hashed-1.03
[07:02:20] *** Quits: pucara (~i@181.93.164.73) (Quit: Lost terminal)
[07:39:59] *** Quits: troller (~p@2a02:6b8:b081:16::1:35) (Ping timeout: 264 seconds)
[07:51:29] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[07:51:38] *** Joins: Martchus_ (~martchus@dynamic-095-115-176-122.95.115.pool.telefonica.de)
[07:51:59] *** Quits: Martchus (~martchus@2a01:c22:7212:de00:d250:99ff:fe49:3cce) (Ping timeout: 250 seconds)
[07:57:05] *** Joins: ignarps (~iggy@user/ignarps)
[07:57:59] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 264 seconds)
[08:03:14] *** Joins: JoelJoel (~jjshoe@user/joel)
[08:04:12] *** Quits: Joel (~jjshoe@user/joel) (Ping timeout: 260 seconds)
[08:11:54] *** Quits: X-Scale (~ARM@46.50.7.119) (Ping timeout: 256 seconds)
[08:13:08] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[08:13:53] *** X-Scale` is now known as X-Scale
[08:17:16] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! üëã)
[08:21:27] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:23:19] *** Joins: sKep (~raah@user/skep)
[08:26:51] * GumbyPAN CPAN Upload: PDL-2.062 by ETJ https://metacpan.org/release/ETJ/PDL-2.062
[08:27:03] *** Parts: sKep (~raah@user/skep) ()
[08:27:58] *** Joins: hudo__ (~hudo@62.68.19.39)
[08:30:26] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[08:47:54] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[09:11:20] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[09:21:36] *** Quits: hudo__ (~hudo@62.68.19.39) (Ping timeout: 256 seconds)
[09:31:57] * GumbyPAN CPAN Upload: Hash-Util-Exists-Tiny-0.03 by AAHAZRED https://metacpan.org/release/AAHAZRED/Hash-Util-Exists-Tiny-0.03
[09:34:58] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:43:54] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 260 seconds)
[09:46:19] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:53:48] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:54:35] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:02:04] *** Joins: jplesnik (~jplesnik@83.240.62.176)
[10:03:12] *** Joins: disconnect_me (~marcin@gl127-41.master.pl)
[10:05:41] *** Joins: fdgds (~fdgds@178.49.152.151)
[10:06:37] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[10:10:11] *** Joins: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de)
[10:13:21] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[10:13:33] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:14:18] *** Quits: willthechill (~willthech@107-217-160-207.lightspeed.austtx.sbcglobal.net) (Ping timeout: 256 seconds)
[10:20:29] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[10:22:03] * GumbyPAN CPAN Upload: Hash-Util-Exists-Tiny-0.04 by AAHAZRED https://metacpan.org/release/AAHAZRED/Hash-Util-Exists-Tiny-0.04
[10:23:05] *** Quits: randir (~randir@95-25-138-85.broadband.corbina.ru) (Remote host closed the connection)
[10:36:07] *** Joins: randir (~randir@93.159.239.42)
[10:40:06] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[10:40:13] *** Quits: ztx (~ztx@user/ztx) (Remote host closed the connection)
[10:40:16] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[10:41:06] *** Joins: martinus__ (~martin@95.31.201.77.rev.sfr.net)
[10:42:28] *** Joins: ztx (~ztx@user/ztx)
[10:58:35] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 264 seconds)
[10:58:56] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[10:59:30] *** Quits: KnoP (~KnoP@p57b21d87.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[11:10:00] *** Joins: Pali (~pali@user/pali)
[11:20:39] *** Joins: art1 (~romeyke@p200300ccdf0aa900f61bbf7f87c6a538.dip0.t-ipconnect.de)
[11:34:10] *** Joins: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net)
[11:38:54] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:39:31] *** Joins: kensanata (~user@user/kensanata)
[11:41:15] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Remote host closed the connection)
[12:16:08] *** Quits: jess (~jess@libera/staff/jess) (Quit: Lost terminal)
[12:16:50] *** Joins: jess (~jess@libera/staff/jess)
[12:20:11] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 264 seconds)
[12:22:04] *** Joins: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk)
[12:23:21] *** Joins: tobybl_ (~tobybl@dhcp-199-132.inf.ed.ac.uk)
[12:25:16] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[12:26:32] *** Quits: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk) (Ping timeout: 240 seconds)
[12:30:55] <hethw> perlbot: encoding mantra
[12:30:55] <perlbot> hethw: decode goes from BYTES to UNICODE CHARACTERS. encode goes from UNICODE CHARACTERS to BYTES. decode bytes to unicode characters as soon as possible, work with unicode characters, and encode to bytes as late as possible.
[12:31:08] <hethw> why do we call them BYTES? and not ascii?
[12:31:37] *** Joins: kylese (~kylese@p5dd8b8a7.dip0.t-ipconnect.de)
[12:31:40] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[12:31:52] <buZz> ascii is a interpretation of bytes
[12:32:05] *** Quits: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Read error: Connection reset by peer)
[12:34:16] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 256 seconds)
[12:35:23] <huf> of some of them, anyway
[12:36:30] <Botje> hethw: because ASCII itself is an encoding of a very small subset of Unicode (U+0000 through U+007F to be precise)
[12:41:48] <hethw> ok. so?
[12:42:19] <huf> so?
[12:42:22] <huf> ascii is already decoded
[12:42:23] <huf> from bytes
[12:42:28] <huf> why would we use it here?
[12:42:34] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[12:43:54] <xenu> hethw: bytes aren't limited to the range Botje mentiod
[12:43:57] <xenu> mentioned*
[12:44:15] <xenu> is 0xff ascii? definitely not
[12:45:16] <xenu> and as buZz said, ascii is just an encoding that can be encoded using bytes
[12:46:14] <xenu> one of many, you can also encode e.g. utf-8, utf-16 or, i don't know, ebcdic
[12:51:15] *** Joins: aquanite (~aquanight@174-126-159-166.cpe.sparklight.net)
[12:52:24] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 256 seconds)
[12:52:24] *** aquanite is now known as aquanight
[13:16:33] <hethw> I think I get it
[13:19:31] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[13:19:59] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[13:27:17] *** Joins: CycoCid (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au)
[13:29:28] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[13:30:27] *** Quits: Dreadnaught (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au) (Ping timeout: 268 seconds)
[13:31:20] <fdgds> ebdic is not compatible w/ascii btw
[13:44:57] *** Joins: Linux77_ (~Linux7_7@186.233.179.193)
[13:46:35] *** Quits: Linux77 (~Linux7_7@2804:d45:8c02:b300:a12c:8838:4db4:91c9) (Ping timeout: 264 seconds)
[13:47:51] <dacav> Hey people :) Is there a neat shortcut for `defined($x) ? $x : '-'` or similar?
[13:48:27] <lopid> $x //= '-'
[13:49:56] <dacav> wuuuut? :)
[13:50:02] * dacav reads perlop again
[13:50:22] <dacav> darn, I totally missed this
[13:50:41] <huf> just //
[13:50:41] <dacav> thanks lopid ! It is a couple of years I don't perl
[13:50:47] <huf> dunno where the = came from
[13:51:12] <dacav> Well, I guess the //= will assign it if undefined
[13:51:36] <huf> this is true
[13:52:48] <lopid> sorry, i thought that's what you meant
[13:54:51] <dacav> ah, it's fine lopid 
[13:54:53] <dacav> I got the idea
[13:55:38] <dacav> I don't like black magic, so I would never had copied it verbatim in my code before knowing what it does :D
[13:56:23] <Altreus> holla, or something
[13:57:31] <dacav> holla (?) Altreus 
[13:57:49] <Altreus> I like that we can establish a greeting just by context
[13:57:58] <Altreus> I'll try something else next time
[13:58:16] <dacav> > by context
[13:58:20] <dacav> well, that's perl
[13:58:31] <dacav> (see what I did here? LOLOLOL)
[13:58:35] <Altreus> (holla)
[13:59:00] <Altreus> dacav: well, welcome back to perl
[13:59:26] <Altreus> You'll find that LeoNerd is frantically refactoring the entire language into his own image
[13:59:33] <Altreus> or so it feels
[13:59:45] <Altreus> I'm down with it because he's right
[14:00:00] *** Joins: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk)
[14:01:56] <dacav> Altreus: thanks.  I'm a recent addition to this channel, in fact, although I've been working with perl (on my own projects) some time ago.
[14:02:27] <dacav> I've currently nothing going with Perl, by the way‚Ä¶ it's just for the community, and for some temporary script that I like to do with perl
[14:02:32] *** Quits: tobybl_ (~tobybl@dhcp-199-132.inf.ed.ac.uk) (Ping timeout: 240 seconds)
[14:03:01] *** Joins: Adoi (~Adoi@user/adoi)
[14:03:38] <Altreus> I left a lot of perl behind at my PHP job because there was no way I was using PHP or bash to do those tasks :D
[14:04:02] *** Quits: Adoi (~Adoi@user/adoi) (Client Quit)
[14:06:07] <hethw> so would you advise again " return; "
[14:06:15] <hethw> against*
[14:06:29] <rindolf> dacav: hi, welcome
[14:07:51] <rindolf> fdgds: reportedly ebcdic is not compatible with itself either
[14:14:00] <ilmari> there are multiple ebcdic code pages, just like there are multiple legacy 8 bit "extended ascii" code pages
[14:16:27] * GumbyPAN CPAN Upload: Ithumb-XS-0.5.4 by BRDUCH https://metacpan.org/release/BRDUCH/Ithumb-XS-0.5.4
[14:20:12] *** Joins: tg (~tg@rockylinux/infra/tg)
[14:22:45] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[14:26:14] *** Joins: magla (~gelignite@55d403ec.access.ecotel.net)
[14:29:31] <Altreus> hethw: I can see an argument for saying you should either have "return ();" or "return undef;" to make it clear what the return values actually are
[14:30:03] <hethw> are..?
[14:30:16] <hethw> ah I see.
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:27] <Altreus> yes, as in you're being clear that you're either returning the empty list, or explicitly returning a scalar
[14:30:29] <hethw> what will return () return?
[14:30:36] <hethw> aha list.
[14:30:47] <hethw> yes, that can be wise
[14:31:03] *** Joins: csrf (~csrf@user/csrf)
[14:32:01] <Altreus> it's equivalent to just "return;" but it reminds you about the context thing
[14:38:59] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Quit: ZNC 1.8.2 - https://znc.in)
[14:39:16] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[14:39:51] <choroba> or is confuses someone who doesn't understand how context propagation works
[14:42:53] <dacav> rindolf: thanks
[14:42:54] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 256 seconds)
[14:46:30] <dacav> About the return() topic, would it make sense to play with wantsarray in order to be conservative on the caller context?
[14:46:51] <dacav> ‚Ä¶although, to be honest, I'm not a big fan of "silver bullets you should always use in your code"
[14:46:55] <Altreus> choroba: I'd rather accommodate people who want to know whether I expected to return a list or not, than people who don't know the language it's written in
[14:47:27] <Altreus> dacav: no - there are enough examples of doing that that we've learned it's quite awful
[14:47:37] <Altreus> Predictable is best
[14:47:44] <Altreus> always a list or always a scalar
[14:47:44] <dacav> Aye
[14:48:06] <Altreus> otherwise you have to use the goaste operator on everything just in case
[14:48:13] <dacav> Right, but then you see at glance / by sinopsys if the function is supposed to return an array.
[14:48:17] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:48:36] <dacav> Altreus: I'm not familiar with the goatse operator
[14:48:48] <Altreus> yeah but wantarray tells you what the caller wants it to return, not what it's supposed to return
[14:48:49] <dacav> (not mentioned in perlopt either)
[14:48:54] <huf> it's not an operator
[14:49:02] <Altreus> it's in perlsecret
[14:49:08] <huf> weird idiots insist on calling things that are definitely not operators operators
[14:49:09] <huf> i hate it
[14:49:11] <Altreus> I don't think they call it that in there
[14:49:28] <huf> it's a thing, but it's not an operator
[14:49:29] <Altreus> what would you call it then o mighty huf
[14:49:40] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:49:42] <huf> dunno, 2 operators in a row?
[14:49:47] <huf> something like that
[14:50:02] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:50:19] <huf> why not call print for an operator while you're at it?
[14:50:26] <huf> or some random 100 line script
[14:50:36] <huf> hey, Moose is an operator too!
[14:51:13] <lopid> operators
[14:51:23] <huf> the variable access syntax is closer to being a bunch of operators than these
[14:52:28] <dacav> neat!
[14:53:17] <dacav> I prefer the 'saturn' name... Although I can understand the reference, for good or bad.
[14:53:30] <huf> saturn name?
[14:53:32] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 240 seconds)
[14:53:34] <dacav> also, I find it weird that my perl distribution doesn't have perlsecret
[14:53:36] <huf> oh right
[14:53:39] <dacav> huf: https://metacpan.org/pod/perlsecret#Goatse
[14:53:40] <Paperbot> Link title(s): [ perlsecret - metacpan.org ]
[14:55:50] <dacav> I'm a bit confused though: I usually go for `scalar @arr` when I want the size of it
[14:55:57] <dacav> what does it buy me to use the goatse?
[14:56:02] <huf> this works for lists
[14:57:08] <huf> eval: scalar localtime
[14:57:10] <perlbot> huf: Fri Nov 19 20:27:09 2021
[14:57:18] <aquanight> dacav: my $number_of_ws_in_text = () = ($text =~ m/w/g)
[14:57:19] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[14:57:20] <huf> eval: scalar(() = localtime)
[14:57:20] <aquanight> for eample
[14:57:22] <perlbot> huf: 9
[14:57:35] <dacav> oh now I see
[14:57:47] <huf> (also why calling it goatse or writing it =()= is stupid
[14:57:56] <huf> what if you dont want to assign but just call scalar on it
[14:58:02] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:58:24] <huf> it's a scalar assignment of a list assignment is what it is
[14:58:30] <huf> or rather, a list assignment in scalar context
[14:58:43] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:58:58] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:58:59] <dacav> I agree on the fact that calling it operator is misleading at best
[14:59:10] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:59:30] <aquanight> it's probably called that because it's a pile of symbols next to each other that does a particular thing
[14:59:50] <huf> yeeeees
[14:59:53] <huf> like Moose
[15:00:03] <huf> it's just a slightly bigger pile
[15:00:14] <huf> but we're just negotiating the price now
[15:00:23] <huf> or how does that churchill whore joke go
[15:00:30] <Altreus> I feel like you're being wilfully ignorant because it aids your point but it actually just makes me feel like I need to explain things you should be aware of
[15:00:39] <aquanight> I can only assume that apparently there's some arbitrary limit to how big a pile of symbols the thing can be before it's not an 'operator' anymore
[15:00:55] <huf> Altreus: no, i think calling these separate things harms understanding
[15:00:58] <lopid> or 'an' operator
[15:01:01] <huf> people already cargo cult syntax in perl a lot
[15:01:07] <huf> but sure, let's add more shit to the pile
[15:02:06] <aquanight> I mean people sometimes call 'bless' an operator so I dunno
[15:02:19] <huf> more of an operator than =()=
[15:05:37] <Altreus> sure
[15:05:53] <Altreus> I mean I disagree but at least you've said something now
[15:06:06] <Altreus> I suppose it depends on perspective
[15:06:10] *** JoelJoel is now known as Joel
[15:06:11] <huf> yeah but you're wrong
[15:06:13] <Altreus> They're "secret operators" not secret operators
[15:06:19] <huf> so it's perfectly fine if you disagree
[15:06:41] <huf> you wont be first against the wall come the revolution
[15:06:58] <Altreus> I'll be logn gone
[15:07:00] <Altreus> long gone
[15:11:32] * GumbyPAN CPAN Upload: Alien-uPB-Core-0.19 by MBARBON https://metacpan.org/release/MBARBON/Alien-uPB-Core-0.19
[15:17:02] *** Quits: TieUpYourCamel (~david@99-111-133-221.lightspeed.chrlnc.sbcglobal.net) (Quit: Leaving)
[15:20:22] *** Joins: bmeneg (~bmeneg@2001:1284:f016:6b8b:c598:4952:2800:7afe)
[15:24:59] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 265 seconds)
[15:26:34] * GumbyPAN CPAN Upload: URI-Router-0.1.2 by SYBER https://metacpan.org/release/SYBER/URI-Router-0.1.2
[15:27:00] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 268 seconds)
[15:36:35] * GumbyPAN CPAN Upload: App-ansiexpand-0.99 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-ansiexpand-0.99
[15:40:34] *** Quits: martinus__ (~martin@95.31.201.77.rev.sfr.net) (Ping timeout: 268 seconds)
[15:41:12] *** Joins: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net)
[15:43:56] *** Joins: troller (~p@2a00:1fa0:4a8a:6ae2:a349:6adc:7188:820f)
[15:44:00] *** Joins: Guest17 (~Guest17@wificampus-098247.grenet.fr)
[15:44:47] *** Quits: Fozzworth (~Fozzworth@user/fozzworth) (Ping timeout: 264 seconds)
[15:49:13] *** Quits: troller (~p@2a00:1fa0:4a8a:6ae2:a349:6adc:7188:820f) (Ping timeout: 268 seconds)
[15:50:42] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (Quit: gamo)
[15:51:03] *** Joins: gamo (~Thunderbi@cm-93-156-61-102.telecable.es)
[15:51:22] *** Joins: slu (uid501941@helmsley.irccloud.com)
[15:53:46] *** Quits: Guest17 (~Guest17@wificampus-098247.grenet.fr) (Ping timeout: 256 seconds)
[16:05:04] *** Joins: Penguin666x (~Penguin66@217.138.205.135)
[16:08:09] *** Quits: Penguin666 (~Penguin66@217.138.205.135) (Ping timeout: 250 seconds)
[16:09:39] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[16:14:50] *** Joins: pucara (~i@181.93.164.73)
[16:19:23] *** Joins: gizmomathboy_ (~gizmomath@206.127.53.107)
[16:21:50] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[16:26:28] *** Joins: troller (~p@2a02:6b8:0:51e:7e83:ddd0:4bf8:f500)
[16:26:34] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[16:26:49] *** Joins: Dreadnaught (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au)
[16:27:12] *** Joins: tejr (~tejr@user/tejr)
[16:27:39] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:29:26] *** Quits: CycoCid (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au) (Ping timeout: 260 seconds)
[16:41:00] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:41:59] *** Joins: jabberwok (~wlindley@75.105.20.104)
[16:51:21] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:bde7:830:4cf1:2fa1)
[16:59:29] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:59:44] *** Joins: martinus__ (~martin@95.31.201.77.rev.sfr.net)
[17:07:31] *** Quits: gizmomathboy_ (~gizmomath@206.127.53.107) (Ping timeout: 268 seconds)
[17:07:31] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Ping timeout: 268 seconds)
[17:11:51] *** Quits: troller (~p@2a02:6b8:0:51e:7e83:ddd0:4bf8:f500) (Ping timeout: 268 seconds)
[17:12:00] *** Joins: mst (~matthewt@vps-6c71e929.vps.ovh.net)
[17:12:06] *** Quits: mst (~matthewt@vps-6c71e929.vps.ovh.net) (Changing host)
[17:12:06] *** Joins: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder)
[17:17:55] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[17:17:56] *** Joins: gizmomathboy_ (~gizmomath@206.127.53.107)
[17:19:55] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[17:20:44] *** Quits: pucara (~i@181.93.164.73) (Quit: Lost terminal)
[17:21:46] *** Joins: diskin (~diskin@31.23.180.52)
[17:23:57] *** Parts: fdgds (~fdgds@178.49.152.151) ()
[17:24:06] *** Joins: troller (~p@2a02:6b8:0:51e:546e:7417:4f13:22b7)
[17:24:23] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 264 seconds)
[17:28:17] *** Joins: diskin_ (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[17:28:17] *** diskin is now known as Guest5775
[17:28:17] *** Quits: Guest5775 (~diskin@31.23.180.52) (Killed (strontium.libera.chat (Nickname regained by services)))
[17:28:17] *** diskin_ is now known as diskin
[17:29:46] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:30:17] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:32:08] *** Joins: gast0n (~g4570n@user/gast0n)
[17:34:46] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 260 seconds)
[17:37:16] *** Quits: samcv (~samcv@194.233.102.77) (Ping timeout: 260 seconds)
[17:37:35] *** Joins: samcv (~samcv@194.233.102.77)
[17:43:30] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[17:47:20] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[17:47:39] *** Quits: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Read error: No route to host)
[17:48:00] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[18:00:23] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 264 seconds)
[18:16:29] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[18:18:52] *** Parts: disconnect_me (~marcin@gl127-41.master.pl) ()
[18:21:59] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Quit: ZNC 1.8.2 - https://znc.in)
[18:22:26] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[18:29:31] *** Quits: jplesnik (~jplesnik@83.240.62.176) (Quit: Leaving)
[18:32:29] *** Quits: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net) (Quit: ChatZilla 0.9.99 [SeaMonkey 2.53.9.1/20210921115122])
[18:34:33] *** Joins: rgrinberg (~textual@201.192.183.100)
[18:36:21] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:2c29:7076:9399:3f2e) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:36:48] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7816:2c69:3dcc:933a)
[18:44:31] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f6bc:f00:93d:ef3a:ec37:e2db)
[18:46:11] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:bde7:830:4cf1:2fa1) (Ping timeout: 268 seconds)
[18:51:28] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[18:56:24] <Altreus> What could I call a method that makes an object, which was loaded from storage, look like it wasn't?
[18:56:36] <Altreus> Such that if saved it would try to create it rather than update it
[18:56:59] <Altreus> I wonder if DBIC has one of those
[18:57:49] <Altreus> Actually maybe just copy will do, and return a new one so changed
[19:00:50] <mst> Altreus: $row->in_storage(0); # DBIC
[19:01:04] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[19:01:32] <mst> my $row = $schema1->resultset('Foo')->find($id);
[19:01:40] <mst> $row->result_source($schema2->source('Foo'));
[19:01:48] <mst> $row->in_storage(0);
[19:01:51] <mst> $row->insert;
[19:01:52] *** Quits: Mandevil (~mandevil@ip-89-102-168-162.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[19:02:00] <mst> ^^ this actually works for copying between databases
[19:02:11] <mst> though it's hardly the most -efficient- way
[19:03:43] *** Joins: Mandevil (~mandevil@ip-89-102-168-162.net.upcbroadband.cz)
[19:05:10] *** Joins: rgrinberg (~textual@201.192.183.100)
[19:07:37] <Altreus> presumably that doesn't unset the ID column, and instead inserts a row with the same ID?
[19:08:34] <Botje> IDs are, like, _suggestions_, man
[19:12:01] <mst> Altreus: in the cases where I've done that, that was what I wanted to happen
[19:12:49] <mst> well, "I", I think the last time I saw this pattern was TBSliver moving data from Orrible to MySqueal
[19:12:52] <Altreus> I was hoping for a name anyway, rather than behaviour - I'm migrating zonefiles from one API to another
[19:13:03] <Altreus> Or at least I might eventually be
[19:13:21] <Altreus> So I wanted to delete all identifiers such that I can save it at the other end without the IDs weirding
[19:13:30] * TBSliver was pinged... *sees Oracle mentioned* Nope. Nope nope nope
[19:13:38] <Botje> Altreus: detach?
[19:13:44] <mst> TBSliver: the DBIC in_storage+result_source trick
[19:13:58] <Altreus> Botje: Well I just made a copy method
[19:14:04] <Altreus> return a new object with no IDs in it
[19:14:11] <TBSliver> oh for writing across multiple databases in sync at once?
[19:14:16] *** Quits: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk) (Remote host closed the connection)
[19:14:22] <Altreus> which I thought of when I saw that DBIC::Row has a copy method
[19:14:39] <mst> IIRC you also used it to get data into a mysql db for somebody
[19:15:01] <Altreus> was the data the same after that
[19:15:09] * mst doesn't think shadowcat has ever been paid to deal with oracle except for the purposes of turning it off
[19:15:10] <Altreus> was TBSliver? :D
[19:15:39] <TBSliver> well, Oracle wasnt the same shape after either tbf
[19:15:49] <TBSliver> (it was Oracle 8 as well...)
[19:15:58] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[19:17:58] <TBSliver> Oh i see what you're trying now.... erm... if you cant guarantee the ability to use a specific ID column, then you need some other unique column (or combination thereof) which you can rely on to DTRT
[19:18:15] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 268 seconds)
[19:18:22] <mst> TBSliver: he's not actually doing that, he's doing something involving DNS
[19:18:35] <mst> I just used that example to illustrate the DBIC ->in_storage feature
[19:18:40] <TBSliver> oh right ok
[19:20:07] <TBSliver> for DNS then... only unique thing you can guarantee is literally the whole thing, expanding any automatic variables such as TTL and origin setup (such as $ORIGIN as @ and $TTL as default on bind) and hope for the best :P
[19:20:55] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:456d:f5ba:2e88:697c)
[19:22:27] * TBSliver goes back to swearing at php code
[19:22:46] <ology> shiver
[19:23:56] <Botje> ah, profanity-driven development
[19:24:03] <TBSliver> could be worse, the documentation could be non existant. Oh wait..
[19:26:15] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:29:31] <jabberwok> Gotta love documentation that is incomplete, and comprised primarily of half-truths and lies.
[19:29:48] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[19:30:17] <mst> jabberwok: I have (thankfully) forgotten everything else about the codebase in question
[19:30:35] <mst> but there was a time I literally wrote a script that deleted all comments and documentation from a codebase
[19:30:50] <TBSliver> ... i found the 'documentation'.... so far, ive read almost 900 words, and have found out 10 facts about what this system shuold do...
[19:30:52] *** Quits: slu (uid501941@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:31:09] <mst> because so much of them were actively harmful lies that it was actually better to stop other developers accidentally thinking they were useful
[19:32:03] <TBSliver> ... is this the same codebase where one $developer ended up with their own namespace just so no-one would touch their stuff?
[19:32:41] <mst> I don't recall ever finding any documentation or comments in that one in the first place
[19:32:55] <TBSliver> ... true
[19:33:08] <TBSliver> which is why i thought it might be that one, I just ended up in there post the decomenting
[19:33:24] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. ‚ÄúChuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.‚Äù)
[19:34:48] <Altreus> Luckily this DNS stuff is JSON data to belligerent, half-documented APIs that somehow manage to break encapsulation in other people's systems
[19:35:12] <Altreus> not bind stuff
[19:35:15] <Altreus> luckily
[19:35:23] <mst> congratumiserations!
[19:35:39] <TBSliver> huh
[19:36:59] * GumbyPAN CPAN Upload: App-geoCancerDiagnosticDatasetsRetriever-1 by AALAMEER https://metacpan.org/release/AALAMEER/App-geoCancerDiagnosticDatasetsRetriever-1
[19:39:09] <LeoNerd> What a fun module name
[19:42:00] * GumbyPAN CPAN Upload: URI-Router-0.1.3 by SYBER https://metacpan.org/release/SYBER/URI-Router-0.1.3
[19:42:28] <mst> LeoNerd: TBSliver can attest that if you get cancer in the UK the sample tracking will probably be run on code he and I have both worked on :P
[19:43:03] <TBSliver> ... that reminds me, need to probably poke $client
[19:43:34] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[19:48:03] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[19:48:36] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 276 seconds)
[19:50:16] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:51:53] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[20:05:19] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 265 seconds)
[20:08:26] *** Joins: tobybl (~tobybl@213.31.134.235)
[20:09:05] *** Joins: randir (~randir@95-25-138-85.broadband.corbina.ru)
[20:11:42] *** Quits: superkuh (~superkuh@user/superkuh) (Quit: the neuronal action potential is an electrical manipulation of reversible abrupt phase changes in the lipid bilayer)
[20:14:30] *** Joins: XV8 (~XV8@2601:5cb:c001:50:24ca:b775:d3c5:31a1)
[20:14:45] <Altreus> Small condolence that if I want to ensure competent medical procedures I have to get cancer
[20:17:04] * GumbyPAN CPAN Upload: WebService-Mattermost-0.27 by MIKEJONES https://metacpan.org/release/MIKEJONES/WebService-Mattermost-0.27
[20:18:30] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 260 seconds)
[20:19:27] *** Joins: kensanata (~user@user/kensanata)
[20:19:38] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[20:22:04] * GumbyPAN welcomes KOBAZ - Mark Murawski to CPAN!
[20:24:23] <mst> Kobaz++ # well volunteered
[20:32:25] <LeoNerd> I've just sent a question to perl5-porters@ but actually it's probably quite relevant to general folks here too: https://www.nntp.perl.org/group/perl.perl5.porters/2021/11/msg261931.html
[20:32:26] <Paperbot> Link title(s): [ Protocol/convention for optional lint-type warnings -  nntp.perl.org ]
[20:32:41] <LeoNerd> Especially toolchain/etc folks might have some ideas
[20:33:25] <Grinnz> relevant to part of https://github.com/Perl/perl5/issues/18543
[20:33:26] <Paperbot> Link title(s): [ [feature] strict and warnings optional extensions ¬∑ Issue #18543 ¬∑ Perl/perl5 ¬∑ GitHub ]
[20:33:39] <mst> LeoNerd: maybe crosspoast to m#toolchain then
[20:34:40] <LeoNerd> Grinnz: Yah; you're sortof asking the same question there, though I don't see any answer
[20:34:54] *** Quits: tobybl (~tobybl@213.31.134.235) (Read error: Connection reset by peer)
[20:35:38] *** Joins: gast0n (~g4570n@user/gast0n)
[20:37:44] <simcop2387> LeoNerd: this feels like -Wall snd -Weverything with clang and gcc
[20:38:23] <mst> LeoNerd: 'use advisory::warnings;' and -Madvisory::warnings=:global to have 'use warnings' auto-enable them?
[20:38:34] <ether> the toolchain approaches to this problem are things like  if -d '.git' or $ENV{AUTHOR_TESTING} etc
[20:38:40] <ether> e.g. see what strictures does
[20:38:49] * Grinnz replies on p5p
[20:39:07] <mst> ether: which everybody hates and yet is still less shite than anything else we've figured out ;)
[20:39:25] <ether> yup
[20:39:35] <huf> better hope it's not something that's regularly meant to be run inside random git checkouts...
[20:39:42] <alh> PERL5OPT=-Mwarnings::mybundle ... perl Build.pl; use if $ENV{AUTHOR_TESTING}, warnings::mybundle;
[20:39:53] <simcop2387> LeoNerd: my main potential problem is will it get used as an argument to osscify use warnings and not update it anymore
[20:40:03] <mst> huf: well, yes, but still, everything else was worse :P
[20:41:42] <huf> couldnt you check if a file called MY_FACE_IS_MELTING exists?
[20:41:45] <huf> wouldnt that be safer?
[20:41:48] <huf> oh well
[20:41:51] <huf> less automatic certainly
[20:42:49] <mst> huf: you can always set env vars to control the behaviour
[20:43:37] *** Joins: tobybl (~tobybl@213.31.134.235)
[20:44:39] <huf> we should have envy vars that infect similar looking variables with their value
[20:46:08] *** Quits: pizdets_ (~pizdets@183.182.110.70) (Quit: pizdets)
[20:47:53] *** Joins: pizdets (~pizdets@183.182.110.70)
[20:50:32] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[20:50:50] *** Joins: PlayerOne (~PlayerOne@user/playerone)
[20:50:56] <PlayerOne> Hey all ^^
[20:51:24] <PlayerOne> I'm trying to verify the syntax of pattern, but it seems it tell it's always correct
[20:51:26] <PlayerOne> echo $'s////' | perl -pe 'eval { qr/$_/ }; die if $@;'; echo $?;
[20:51:38] <PlayerOne> Err. echo $'s////' | perl -ne 'eval { qr/$_/ }; die if $@;'; echo $?;
[20:51:45] <PlayerOne> Always 0
[20:52:08] * GumbyPAN CPAN Upload: App-Phoebe-4.03 by SCHROEDER https://metacpan.org/release/SCHROEDER/App-Phoebe-4.03
[20:52:08] *** Joins: superkuh (~superkuh@user/superkuh)
[20:52:09] <PlayerOne> it tells*
[20:52:11] <huf> why wouldnt that be a correct pattern?
[20:52:16] <mst> PlayerOne: because that's a valid regexp
[20:52:26] <PlayerOne> What would be an incorrect then?
[20:52:30] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[20:52:36] <PlayerOne> Even s///a/a//ad//// /a/wd/ as aW\awd/aw is correct
[20:52:57] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[20:53:00] <huf> eval: qr/[/
[20:53:02] <perlbot> huf: ERROR: Unmatched [ in regex; marked by <-- HERE in m/[ <-- HERE / at (IRC) line 1. 
[20:53:16] *** Quits: XV8 (~XV8@2601:5cb:c001:50:24ca:b775:d3c5:31a1) (Quit: Textual IRC Client: www.textualapp.com)
[20:53:30] <alh> PlayerOne: is s//// supposed to be search and replace? $x =~ s/a/b/ ?
[20:53:35] <mst> PlayerOne: well, yeah, that's not even a regexp, that's just really fucked up perl code :D
[20:53:35] <alh> If so, that can't be *in* the qr// 
[20:53:38] <PlayerOne> basheval: echo $'qr/[/' | perl -pe 'eval { qr/$_/ }; die if $@;'; echo $?;
[20:53:40] <perlbot> PlayerOne: Unmatched [ in regex; marked by <-- HERE in m/qr/[ <-- HERE /‚ê§/ at -e line 1, <> line 1.‚ê§	...propagated at -e line 1, <> line 1.‚ê§255‚ê§
[20:53:50] <mst> alh: aha! welcome back :D
[20:53:51] <PlayerOne> Hm. Indeed... Thank you very much
[20:53:52] *** Joins: X-Scale` (~ARM@83.223.248.137)
[20:54:01] <alh> o/
[20:54:30] *** Quits: art1 (~romeyke@p200300ccdf0aa900f61bbf7f87c6a538.dip0.t-ipconnect.de) (Quit: Leaving.)
[20:54:37] *** X-Scale` is now known as X-Scale
[20:55:06] <huf> PlayerOne: that's still weird and possibly wrong
[20:55:15] <huf> you're putting the string "qr/[/" inside qr//
[20:55:16] <PlayerOne> What exactly?
[20:55:18] <huf> why
[20:55:21] <huf> the regex is just the [
[20:55:25] <huf> the rest is perl syntax
[20:55:44] <huf> well, attempt at regex as it doesnt compile, but that was the point
[20:56:00] <mst> PlayerOne: you just ran something like: qr/qr/[//
[20:56:12] <huf> well. qr{qr/[/}
[20:56:16] <mst> I think we really need you to take a step back and explain what your goal was here
[20:56:33] <mst> huf: yeah, hence 'like', I was aiming for explanatory value rather than precision
[20:56:45] <PlayerOne> How would you check if the sintax is correct? I used "printf '%s' "something" | perl -pe 'eval { qr/$_/ }; die if $@;'; echo $?;"
[20:56:49] <ether> parsing user input that contains a regex?
[20:56:49] <PlayerOne> syntax*
[20:57:07] <mst> PlayerOne: specifically, what syntax and why
[20:57:20] <mst> PlayerOne: your first example included s/// which is -perl- syntax not regexp syntax
[20:57:27] <mst> PlayerOne: so we don't know what the problem is yet, sorry
[20:57:30] <PlayerOne> A syntax for Perl match and replace
[20:57:49] <mst> no, please, explain the original problem
[20:57:50] <PlayerOne> The one which will appear in /here/ or s/here/andhere/
[20:57:58] <mst> those are completely different things
[20:58:04] <PlayerOne> I believe so
[20:58:20] <mst> I'm sorry, but you've got like 90% of the problem in your head and we don't have a suitable death ray handy
[20:58:24] <PlayerOne> Perl exrepssion I meant
[20:58:31] <mst> explain what you're trying to write in the first place and *why*
[20:58:36] <mst> and then we can hopefully help you
[20:58:38] <PlayerOne> Nevermind.
[20:58:44] <PlayerOne> I told 4 times.
[20:59:12] <mst> you haven't explained what program you're actually trying to write though :(
[20:59:24] <PlayerOne> The problem is to verify the damn syntax of an expression which appears /HERE/ and s/HERE/HERE/.
[20:59:32] <mst> WHY
[20:59:52] <PlayerOne> Because it's a string argument for a function.
[20:59:55] <mst> WHY
[21:00:00] <mst> what function?
[21:00:04] <mst> what is its purpose?
[21:00:05] <PlayerOne> Because the God told so.
[21:00:10] <mst> what program are you trying to write?
[21:00:20] <ether> I do something similar here - https://metacpan.org/dist/JSON-Schema-Modern/source/lib/JSON/Schema/Modern/Utilities.pm#L277-285 - and in tests I demonstrate that some things cannot be caught by qr/.../ but only by m/.../ (uniprops subrefs are only checked when used, not compiled) -- ...
[21:00:20] <mst> if you won't answer simple questions we can't help you :(
[21:00:21] <Paperbot> Link title(s): [ lib/JSON/Schema/Modern/Utilities.pm - metacpan.org ]
[21:00:25] <ether> ... https://metacpan.org/release/ETHER/JSON-Schema-Modern-0.525/source/t/errors.t#L914-995
[21:00:26] <Paperbot> Link title(s): [ t/errors.t - metacpan.org ]
[21:00:43] <PlayerOne> mst, I'm not going to explain the project and the program I write. Sorry.
[21:00:45] *** Joins: zhmylove (~zhmylove@178.252.127.211)
[21:00:46] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[21:00:59] * ether presses F for respects at your upcoming funeral
[21:01:04] <mst> PlayerOne: then we don't know what your actual problem is
[21:01:11] <mst> PlayerOne: and you have made it impossible to help you solve it
[21:01:13] <PlayerOne> I told what's the problem is.
[21:01:16] <mst> no
[21:01:24] <PlayerOne> s/ is$//
[21:01:37] <mst> you can't arbitrarily test regexps like that
[21:01:39] <mst> it doesn't work
[21:01:51] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 268 seconds)
[21:01:56] <mst> what you are trying to do is like trying to pet a cat backwards
[21:02:04] <mst> all you will achieve is claws in your arm
[21:02:05] <ether> PlayerOne: mst is trying to tell you that you have an X-Y problem, and he can help you solve the *real* problem if you would talk about it a bit
[21:02:08] <PlayerOne> Indeed, ether, the same qr//
[21:02:09] <mst> so please explain the real problem :(
[21:02:20] <PlayerOne> I don't have an X-Y problem here.
[21:02:27] <mst> I don't believe you.
[21:02:30] <ether> mst: I think you're done then
[21:02:45] <huf> correction, you *also* have an X-Y problem
[21:02:48] <mst> yeah, it's clear that PlayerOne wants to be angry at me more than they want us to help.
[21:02:49] <PlayerOne> Yes. Please forget the question and nevermind.
[21:02:55] <huf> in addition to not seeing that you have an X-Y problem :D
[21:02:57] <mst> shame.
[21:03:02] <mst> would have liked to help.
[21:04:45] <PlayerOne> I don't get what's not understanble in: there's god damn function which has two freaking string arguments for match and replace. And the funciton has in its GOD DAMN inner code a DAMN verificaiton of the HOLY argument Perl expression SYNTAX.
[21:05:04] * ether ‡≤†_‡≤†
[21:05:10] <PlayerOne> I DON"T GET WHAT"s THE DAMN NOT UNDERSTANBLE
[21:05:39] <mst> except the left hand side is a regexp and the right hand side is a double quoted string so is subject to full perl semantics so can only be tested in the context of the entire perl program
[21:05:41] <Grinnz> if you want help please answer the questions. if you don't, please rant somewhere else
[21:05:46] <mst> but you won't tell me what that perl program is
[21:06:02] <mst> so your question *cannot*, by *definition*, be understood
[21:06:36] <PlayerOne> The Perl program just /HERE/ and s/HERE/HERE2/
[21:06:41] <mst> PlayerOne: by refusing to answer my questions you have chosen to make it not understandable.
[21:06:58] <mst> reality will not change no matter how much you shout at me.
[21:07:09] * GumbyPAN CPAN Upload: Alien-ZMQ-latest-0.006 by ZMUGHAL https://metacpan.org/release/ZMUGHAL/Alien-ZMQ-latest-0.006
[21:07:12] <PlayerOne> Nothing more. The variables come to these spots and are defined as Environment variables in order to omit quote issues.
[21:07:27] <PlayerOne> mst, then I didn't understand your question.
[21:07:30] <PlayerOne> questions*
[21:07:51] <PlayerOne> Your question was. WHY? WHY>
[21:07:52] <mst> I know you didn't. That is *why* I asked you to explain what the code was intended to do.
[21:08:05] <PlayerOne> You asked me "WHY?"
[21:08:06] <mst> you didn't even mention environment variables before
[21:08:14] <PlayerOne> Why would I?
[21:08:17] <mst> you are hiding the problem.
[21:08:20] <PlayerOne> Ah... Nevermind.
[21:08:24] <mst> ... because that matters!
[21:08:39] <mst> please just explain the problem :(
[21:08:42] <PlayerOne> The problem a single one. To test a syntax of an expression.
[21:08:57] <huf> *sigh*
[21:09:00] <PlayerOne> ether told they use a quite similar logic. That's enough.
[21:09:03] * mst sighs
[21:09:11] <PlayerOne> I;'m glad you sigh
[21:09:30] <mst> yes, being happy that you're upsetting the person trying to give you free help is great
[21:09:49] <Botje> eval: sub is_valid { my ($regex, $replace) = shift =~ m,s/([^/])+/([^/]+)/,; eval { "" =~ /$regex/ }; die if defined $@; }
[21:09:51] <perlbot> Botje: No output.
[21:10:15] <PlayerOne> Thank you for trying to help, mst and asking me a question WHY
[21:10:16] <Botje> that's as close as one can get, I'm afraid.
[21:10:41] <mst> perl -c 's/foo/bar/' # might work
[21:10:44] <Grinnz> Botje: $@ is always defined
[21:10:46] <PlayerOne> Thank you very much, ether ^^
[21:10:50] <mst> assuming it's a shell script like the original example
[21:11:02] <mst> but maybe that wasn't true either
[21:11:07] *** Quits: rgrinberg (~textual@201.192.183.100) (Ping timeout: 268 seconds)
[21:11:12] <Botje> ah, s/defined//
[21:11:13] <Grinnz> Botje: if you're gonna show raw eval, please show proper checking of its return value
[21:11:27] <Botje> right.
[21:11:42] <Botje> eval: sub is_valid { my ($regex, $replace) = shift =~ m,s/([^/])+/([^/]+)/,; eval { "" =~ /$regex/ }; die if $@; } is_valid('s/foo[/bar/')
[21:11:44] <perlbot> Botje: ERROR: Unmatched [ in regex; marked by <-- HERE in m/[ <-- HERE / at (IRC) line 1. 	...propagated at (IRC) line 1. 
[21:11:51] <mst> PlayerOne: please remember that the 'replace' part of an s/// can contain *any* perl code
[21:11:57] <huf> eval "$ENV{SOMESHIT}; 1" or die $@
[21:12:03] <huf> balls to the walls insanity
[21:12:13] <mst> PlayerOne: so you can't actually test s/MATCH/REPLACE/ without a full perl compiler for the REPLACE
[21:12:18] <Botje> huf: that's the solution we're all trying -not- to mention I think :)
[21:12:31] <huf> Botje: yeah but fuck it
[21:12:41] *** Joins: rgrinberg (~textual@201.192.183.53)
[21:12:43] <PlayerOne> I didn't get it, huf, sorry. What's the issue with the above?
[21:12:57] <mst> SOMESHIT=`rm -rf /`
[21:13:01] <Botje> then again .. fuck it. go all in: docker run perl perl -E 'eval "$ENV{SOMESHIT};1" or die '
[21:13:06] <mst> SOMESHIT='`rm -rf /`'
[21:13:20] <mst> Botje: docker docker docker docker SEGFAULT SEGFAULT
[21:13:42] <Botje> mst: huh, the canonical version of that song goes "No space left on device"
[21:14:03] *** Joins: jaytee80 (~jaytee80@remote-e.cpii.com)
[21:14:03] <Botje> since, yes, docker log output goes somewhere on disk and disks get full occasionally.
[21:14:29] <mst> Botje: only after I convince people to delete /dev/null as root?
[21:14:42] <PlayerOne> Well. It's not eval "ENV{}", but eval { qr/$_/ }; die if $@;
[21:14:48] <mst> PlayerOne: which can't work
[21:14:54] <mst> as I just explained for the third time.
[21:14:57] <PlayerOne> What can't work?
[21:14:59] <rewt> can't the MATCH part of it also contain any perl code?
[21:15:04] <huf> sure
[21:15:07] <mst> PlayerOne: s/foo/bar/ is NOT a qr//
[21:15:09] <huf> everything can contain perl code, you're totally fucked
[21:15:09] <Grinnz> rewt: not unless you use re 'eval'
[21:15:18] <huf> oh well then just the replace normally :)
[21:15:34] <PlayerOne> mst, I'm sorry/
[21:15:36] <PlayerOne> ?
[21:15:36] <Grinnz> or if you string eval.
[21:15:49] <huf> PlayerOne: s/// is not a regex
[21:15:57] <huf> a regex goes inside qr// but s/// is not a regex
[21:15:59] <huf> it's just not
[21:16:16] <PlayerOne> I know. And that's what I'm trying to check. The part which goes inside.
[21:16:18] <huf> qr// is also not a regex, it's what a regex goes inside
[21:16:23] <PlayerOne> The expression.
[21:16:24] <huf> no you werent
[21:16:31] <PlayerOne> WHy no?!
[21:16:34] <PlayerOne> not*
[21:16:34] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[21:16:34] <Botje> PlayerOne: see my is_valid above. it extracts the regex part from s/REGEX/REPLACEMENT/
[21:16:36] <huf> you were putting qr/[/ inside it
[21:16:45] <Botje> and tests it.
[21:16:48] <PlayerOne> TO TEST IT
[21:16:56] <huf> TO TEST WHAT
[21:17:02] <huf> [?
[21:17:03] <mst> PlayerOne: you realise if you'd answered what your program is for we'd have solved the problem already, right?
[21:17:07] <huf> or qr/[/?
[21:17:07] <PlayerOne> I was trying to CAUSE THE ABOVE CHECK FAIL.
[21:17:10] <mst> PlayerOne: you're just making everything slower
[21:17:17] <PlayerOne> oh dear..
[21:17:28] <huf> PlayerOne: you also put a s/// inside it
[21:17:31] <huf> that's also super weird
[21:17:40] <huf> since you claim you wanted to check the regex part of it
[21:17:46] <huf> but then put in what looked like the whole thing?
[21:17:48] <mst> s/foo/bar/ is not a regexp. 'foo' is the regexp.
[21:17:57] <huf> but apparently this is all somehow secret or something
[21:18:05] <huf> you cant explain any of it to us so we have to fucking guess
[21:18:05] <huf> absurd
[21:18:16] <PlayerOne> The first question: I'm trying to verify the syntax of pattern, but it seems it tell it's always correct. Someone said "eval qr/[/". It caused the expression fail. So. it worked.
[21:18:38] <PlayerOne> Oh dear...
[21:19:02] <PlayerOne> Of course, FOO is an expression. And that's why I tried to put there NOT AN EXPRESSION.
[21:19:17] <huf> then what's this got to do with regexes?
[21:19:27] <huf> why not ask how to check if an expression compiles?
[21:19:33] <mst> PlayerOne: but you said you wanted to test s/foo/bar/
[21:19:43] <mst> PlayerOne: which isn't the same thing :(
[21:19:46] <PlayerOne> WHere did I said?
[21:20:10] <Grinnz> 12:21:24 <PlayerOne> echo $'s////' | perl -pe 'eval { qr/$_/ }; die if $@;'; echo $?;
[21:20:16] <huf> 1821 < PlayerOne> I'm trying to verify the syntax of pattern, but it seems it tell it's always correct
[21:20:23] <PlayerOne> So? I tried to cause it fail?
[21:20:25] <huf> SECOND LINE YOU SAID
[21:20:25] <Grinnz> s//// is a perfectly valid regex
[21:20:32] <huf> but now it's somehow not the syntax of a pattern
[21:20:32] <mst> 17:21 < PlayerOne> echo $'s////' | perl -pe 'eval { qr/$_/ }; die if $@;'; echo $?;
[21:20:35] <huf> it's an arbitrary expression
[21:20:42] <mst> thirty minutes ago, you said that!
[21:20:48] <mst> this is why I was asking questions :(
[21:21:08] <Grinnz> sweval: my $str = 'foos////bar'; my $re = 's////'; [$str =~ m/$re/]
[21:21:10] <perlbot> Grinnz: [1]
[21:21:12] <Grinnz> works fine
[21:21:23] <PlayerOne> Yeah. THe "pattern". I tried to say something like "a search pattern" or "a match pattern", but indeed that an "a match expression"
[21:21:33] <PlayerOne> The "pattern" was invalid.
[21:21:37] <Grinnz> no, it's perfectly valid
[21:21:39] <PlayerOne> The word
[21:21:39] <Grinnz> i just showed that
[21:21:43] <mst> but s/// isn't a pattern!
[21:21:53] <PlayerOne> oh dear..
[21:21:55] <mst> it's a whole piece of perl syntax!
[21:22:06] <Grinnz> the string s//// has nothing to do with the operator s///
[21:22:21] <Grinnz> even the string s/// has nothing to do with the operator s///
[21:22:23] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[21:22:28] <huf> PlayerOne: but you put it inside qr//
[21:22:32] <PlayerOne> Yes. And that's why I tried to put there to cause it fail as I though it would not compile as an expression.
[21:22:37] <Grinnz> well, it does
[21:22:37] <huf> PlayerOne: you were treating it as a pattern
[21:22:42] <Grinnz> like i showed
[21:22:55] <huf> why did you put it inside qr// if it's not a pattern?
[21:22:57] <rewt> why would it not compile as an expression?
[21:23:08] <PlayerOne> huf, to test if it would fail.
[21:23:15] <huf> WHAT WOULD THAT TELL YOU?
[21:23:17] <huf> that's nonsense
[21:23:18] <Grinnz> your test succeeded, because it's a valid pattern
[21:23:29] <rewt> why do you think it would fail?
[21:23:32] <huf> you want to know if it's a valid expression and you test if it's a valid pattern?
[21:23:39] <huf> what kind of approach is that?
[21:23:55] <huf> see, this is why you should've just explained stuff from the start
[21:23:56] <PlayerOne> rewt, I though it would not. And that's why the first question: "For some reason, it always returns "success" or 0.
[21:23:59] <huf> properly
[21:24:02] <alh> PlayerOne: Imagine you're writing a function to validate the data you're trying to validate. What are its arguments? 
[21:24:05] <mst> this is why I wanted to know what the actual *reason* was
[21:24:08] <alh> sub validate ($search, $replace) ?
[21:24:10] <huf> because you're clearly totally confused
[21:24:26] <rewt> so if you thought it would not fail, and it did not fail, why are you asking why did it not fail?
[21:24:44] <mst> PlayerOne: why are you so insistent that you can't tell us what your program is supposed to do? :(
[21:24:59] <PlayerOne> I guess. The main issue is the two definitions. Pattern vs Expression.
[21:25:11] *** Joins: ztx (~ztx@user/ztx)
[21:25:17] <huf> PlayerOne: you understand that perl code is not the same thing as a regular expression, right?
[21:25:18] <Grinnz> regex patterns and perl expressions are two different syntaxes
[21:25:24] <mst> if you'd answer that, we could probably help you
[21:25:29] <PlayerOne> huf, did I have such issue before?
[21:25:31] <huf> yes
[21:25:32] <mst> but you keep getting angry instead of letting us help
[21:25:35] <PlayerOne> Where did I/
[21:25:41] <mst> we already quoted you doing that
[21:25:41] <alh> PlayerOne: You put s/// inside of qr//
[21:25:43] <huf> this whole fucking thing is woven through with your confusion on the subject
[21:25:56] <huf> are you trolling?
[21:25:58] <mst> PlayerOne: look. to be clear. you have NO IDEA WHAT YOU ARE DOING.
[21:26:02] <huf> fucking hell that's a great attempt man
[21:26:09] <mst> we would like to help you anyway
[21:26:18] <xenu> calm down people
[21:26:19] <PlayerOne> alh, as I said 4 times, I thought it's not an expression and it would fail like: s/HERE// -> s/s//////
[21:26:24] <mst> but being angry about your ignorance will not make you any less ignorant!
[21:26:28] <Grinnz> that's a perl error, not a regex pattern error
[21:26:35] <Grinnz> you are writing a regex, not perl code
[21:26:44] <Grinnz> when you put it *as a string* in qr//
[21:26:46] <mst> so please, *PLEASE*, explain what you're actually trying to write
[21:26:53] <mst> rather than getting angry because we want more information
[21:26:56] <mst> we want to help you
[21:26:58] <alh> PlayerOne: Right, So you had an issue of misunderstanding perl code vs regular expression as huf said
[21:27:06] <mst> please stop making it impossible to help you :(
[21:27:08] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[21:27:19] <ether> note that "I was writing a toy regex checker for fun" is a perfectly valid answer. you don't have to be cagey. but being specific about your objectives will help people clear up your misunderstanding
[21:27:32] <PlayerOne> Grinnz, as said before. The mission is to test an expression before writing it to s/HERE/HERE2/, so the mission is to test if it's a valid expression before compiling an actual PERL CODE>
[21:27:46] <Grinnz> but s//// is a valid regex
[21:27:57] <Grinnz> it's not valid perl code, but perl code is not what goes inside qr//
[21:27:57] <ether> but if it's "I'm ingesting a large amount of unsafe data from users and need to verify it's safe before passing it to system X", then some understanding about what you consider "unsafe" and what "system X" is would be helpful
[21:28:00] <alh> PlayerOne: So, your function expects a SEARCH and a REPLACE?
[21:28:12] <zgu> isn't the only way to do this either eval the s/// expression to see if it compiles or parse out the first regex part and try to qr// that?
[21:28:23] <PlayerOne> Grinnz, as I said 6 times. I thought it's NOT a valid expression...
[21:28:24] <huf> oh just have a look at rename the shell util
[21:28:25] <PlayerOne> oh boy..
[21:28:27] <huf> do it that way
[21:28:31] <Grinnz> zgu: "the way to do this" depends a lot on what it actually is
[21:28:43] <mst> PlayerOne: why not just call replace() from https://metacpan.org/pod/Data::Munge instead of 'writing it to s/HERE/HERE2/' ?
[21:28:44] <Paperbot> Link title(s): [ Data::Munge - various utility functions - metacpan.org ]
[21:29:03] <Grinnz> PlayerOne: you are confusing it again. it is not a valid PERL CODE expression. you are using it as a STRING regex. where it is valid.
[21:29:20] <PlayerOne> Perl code expression?
[21:29:32] <alh> perl -e 's////'
[21:29:33] *** Quits: jaytee80 (~jaytee80@remote-e.cpii.com) (Quit: Client closed)
[21:29:56] <Grinnz> it results in a syntax error when run as perl code. putting it in qr// does not run it as perl code
[21:29:59] <zgu> 's/foo/bar/' is perl code. the 'foo' is the only part that's a regex
[21:30:03] <huf> PlayerOne: s/s///; as perl code breaks because perl doesnt know where the regex ends. $s = "s/"; s/$s// doesnt because perl now knows where the regex ends.
[21:30:15] <PlayerOne> And that's what I tried to test, huf
[21:30:24] <huf> but you put it inside qr//
[21:30:26] <Grinnz> *what* is what you tried to test?
[21:30:31] <huf> you didnt literally write qr/s/////
[21:30:40] <huf> you wrote qr/$variable_containing_that_shit/
[21:30:57] <PlayerOne> Not. It was qr/$_/, where $_ is from stdin
[21:31:01] <huf> yes
[21:31:02] <huf> a variable
[21:31:08] <huf> not literally s//// written in the source
[21:31:18] <huf> perl can find the bit between the /-s
[21:31:25] <Grinnz> / is perfectly valid in regexes as long as it doesn't conflict with the delimiters
[21:31:37] <Grinnz> it doesn't in your test, because it doesn't appear in the syntax, it comes from the string
[21:31:44] <mst> PlayerOne: What is coming from stdin and why? :(
[21:31:51] <PlayerOne> mst, no.
[21:31:52] <huf> eval: """
[21:31:53] <perlbot> huf: ERROR: Can't find string terminator '"' anywhere before EOF at (IRC) line 1. 
[21:32:04] <huf> eval: $_ = '"'; "$_";
[21:32:04] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 268 seconds)
[21:32:05] <perlbot> huf: "
[21:32:08] <huf> same thing
[21:32:14] <mst> PlayerOne: "no" is not an answer to the question.
[21:32:18] <PlayerOne> It is.
[21:32:23] <PlayerOne> The same as WHY
[21:32:28] <rewt> "no" is coming from stdin :D
[21:32:34] <huf> run
[21:32:48] <zgu> echo "no" | PlayerOne
[21:32:56] <alh> basheval: echo "no" | PlayerOne
[21:32:57] <perlbot> alh: /tmp/vGdPYbw4ND: line 1: PlayerOne: command not found‚ê§[Exited 127]
[21:32:58] <huf> yes no
[21:33:01] <mst> PlayerOne: why are you being an asshole to the people trying to help?
[21:33:27] <ether> because he clearly knwos better than you
[21:33:31] <ether> in which case.. why is he here at all
[21:33:52] <PlayerOne> Because it looks like trolling instead of participating - asking a person the actual project, program, purpose of the damn idea multiple times non-stop and telling them they do X-Y surely.
[21:33:57] <mst> ...
[21:34:07] <mst> this isn't trolling\
[21:34:13] <mst> this is me wanting to help you!
[21:34:26] <mst> you just won't let me help :(
[21:34:26] <Grinnz> PlayerOne: we literally cannot help without knowing what you're asking
[21:34:58] <Grinnz> PlayerOne: yelling words at us that you don't understand the meaning of does not help
[21:34:58] <PlayerOne> Grinnz, indeed. I'm sorry for definition issues.
[21:36:17] <mst> PlayerOne: explaining the *purpose* of your code was something I asked so we could avoid definition issues!
[21:36:30] <ether> PlayerOne: interesting, but it feels like *you're* trolling us by refusing to engage with people who are trying to help
[21:36:34] <mst> PlayerOne: you're not sorry, or you would have answered the question instead of calling me a troll for asking
[21:36:36] <PlayerOne> I guess, the main purpose is to test if a regex string is valid to put it later into /var1/ or s/var1/var2/. Where var1 and var2 are strings - arguments.
[21:36:43] *** Joins: hudo__ (~hudo@62.68.19.39)
[21:36:46] <PlayerOne> regex string - expression, right?
[21:37:03] <mst> PlayerOne: so the 'var1' you can test with qr//, ish
[21:37:09] <mst> but that's probably not actually helpful
[21:37:20] <mst> what the regex is meant to *do* is required for us to help
[21:37:25] <mst> do you want help or not?
[21:38:59] <PlayerOne> It may be actually anything I guess, but the function which accepts these two arguments is for basic regex issues like finding plain text matches and replacing it with plain text or captured with ()
[21:39:41] <mst> so why not just call replace() from p3rl.org/Data::Munge and catch any errors like I already suggested?
[21:40:01] <PlayerOne> I mean, it's a part of the function. But, before running an actual Perl code with these variables for the inputted data, I tried to test if the variables are valid regex strings (incorrectly called it "pattern" here)
[21:40:22] <Grinnz> PlayerOne: a regex string is not a perl expression
[21:40:39] <Grinnz> in fact, no string is a perl expression, unless you put it in a string eval
[21:40:39] <PlayerOne> Yes. Like you said above.
[21:41:14] <mst> PlayerOne: I have to ask: Why is telling us what the program is *for* such a problem?
[21:41:40] <Grinnz> so yes, if you want to test if it can be put into a m// or the first part of s///, then you want to test if it's a valid regex string. you don't need to test it as an perl expression
[21:41:50] <mst> PlayerOne: are you a spammer?
[21:42:00] <Grinnz> thus: qr// is the correct test, and s//// is a valid regex string
[21:42:00] <PlayerOne> Grinnz, that's what I tried to do.
[21:42:14] <Grinnz> because 's////' works fine in m// or the first section of s///
[21:42:39] <PlayerOne> Thank you. Understood that already. Since, s//// comes to qr// as a variables instead of a plain string like qr/s/////
[21:42:48] <PlayerOne> variable*
[21:42:50] <Grinnz> instead of directly in the parser, yes
[21:43:16] <PlayerOne> So, it wouldn't work in the second part of s///, right?
[21:43:19] <Grinnz> qr{s////} also works fine without the variable intermediate.
[21:43:25] <Grinnz> it depends
[21:43:32] <mst> the second part of s/// is a perl string, I told you that already
[21:43:46] <mst> this is why you should use Data::Munge's replace() function instead
[21:43:49] <PlayerOne> Yes, you did. I remember that.
[21:43:51] <Grinnz> the second part is a string, so it would work fine. but with the /e modifier it's a perl expression, so it would syntax error
[21:43:53] *** Joins: mattil (~mattil@87-92-73-150.bb.dnainternet.fi)
[21:43:55] <mst> which is now the third time I've said *that*
[21:44:14] <mst> if you keep ignoring people you will get banned.
[21:44:16] <PlayerOne> The mission is only for s/var1/var2/
[21:44:27] <PlayerOne> No /e there, guaranteed.
[21:45:03] <Grinnz> without /e, any perl string is valid in the second part of s///
[21:45:03] <xenu> if it was really plain text then it would've been simple: s/\Q$string\E/$to/, this doesn't need any validation it will work for any string
[21:45:06] <Grinnz> there is no validation to be done
[21:45:22] <xenu> but unfortunately you said you do want metacharacters (parens), do the solution would be much more complicated
[21:45:35] <xenu> s/do the/so the/
[21:45:48] <PlayerOne> Grinnz, what if \1? Wouldn't it mean not a plain text?
[21:46:16] <xenu> Data::Munge does what you want, and if you don't want to use the module, take a look at its source code
[21:46:28] <PlayerOne> For example, var1='^([0-9])abc$', var2='abc\1'
[21:46:41] <PlayerOne> Indeed, I didn't want to use a module.
[21:47:03] <mst> PlayerOne: why not?
[21:47:14] <Grinnz> sweval: my $re = '^([0-9])abc$'; my $repl = 'abc\1'; '5abc' =~ s/$re/$repl/
[21:47:16] <perlbot> Grinnz: ERROR: Can't modify constant item in substitution (s///) at (IRC) line 1, at EOF 
[21:47:19] <Grinnz> sweval: my $re = '^([0-9])abc$'; my $repl = 'abc\1'; '5abc' =~ s/$re/$repl/r
[21:47:20] <perlbot> Grinnz: abc\1
[21:47:33] <mst> yeah, it's $1 not \1
[21:47:37] <mst> this is not PHP
[21:47:52] <mst> and even PHP recommends against \1
[21:47:52] <Grinnz> PlayerOne: that is a literal backslash followed by a 1, plus it will not interpolate variables within a string you pass to it
[21:47:59] <PlayerOne> /r?
[21:48:12] <Grinnz> that's so it returns the replaced value to output it
[21:48:30] *** Quits: mattil (~mattil@87-92-73-150.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[21:48:32] <Grinnz> sweval: my $re = '^([0-9])abc$'; my $repl = 'abc$1'; '5abc' =~ s/$re/$repl/r
[21:48:33] <perlbot> Grinnz: abc$1
[21:48:57] <Grinnz> if you *want* replacements from input strings, you have to use Data::Munge's function
[21:49:16] <Grinnz> that is, if you want $1 to be interpreted into the capture group
[21:49:31] <Grinnz> perl won't do it from a variable you put in the s///
[21:49:43] <mst> just use p3rl.org/App::FatPacker to include Data::Munge into your script
[21:50:08] <mst> there is *no* good reason to not use a module.
[21:52:10] <Grinnz> or look at its source code. it's very short
[21:52:39] <mst> that too
[21:53:31] *** Quits: PapaChub (~PapaChub@vzw-54.parabon.com) (Ping timeout: 250 seconds)
[21:53:42] <PlayerOne> Thank you very much, dear m st, G rinnz, h uf, z gu, and a lh ^^
[21:53:44] <Grinnz> either way, there is no validation needed for the replacement string
[21:54:11] <PlayerOne> I'll try checking the code of the function. I though it accepts \1 in the replace part.
[21:54:34] <Grinnz> only a literal \1, which is actually sed compatibility because it's $1 in actual perl syntax
[21:54:54] <Grinnz> but it's not possible to interpolate $1 at the time of replacement via a string you're already interpolating
[21:55:12] <Grinnz> which is why that function exists
[21:55:15] <mst> PlayerOne: hang on. is this some program using pcre and you're trying to test if the inputs are valid because you think perl and pcre are the same thing?
[21:55:43] <PlayerOne> I thought pcre is a regex string syntax for Perl
[21:55:55] *** Joins: jaytee80 (~jaytee80@remote-e.cpii.com)
[21:55:55] <Grinnz> no, it's a regex syntax for C
[21:55:59] <mst> no, pcre is a completely separate piece of code that sometimes behaves like perl
[21:56:06] <mst> it's not actually compatible
[21:57:15] <Grinnz> validating a regex string with qr// in perl won't actually give you any guarantee about it working in a pcre program
[21:57:24] <mst> that explains all the confusion, and in fact, is one of the reasons I asked you what the actual program was
[21:57:39] <PlayerOne> mst, does it?
[21:57:48] <mst> PlayerOne: yes. PCRE is not perl. at all.
[21:57:56] <PlayerOne> I didn't said that
[21:58:21] <mst> I asked you if you were using pcre instead of perl
[21:58:27] <PlayerOne> I didn't even mention pcre before oyu
[21:58:29] <PlayerOne> you*
[21:58:37] <mst> you also didn't answer my question
[21:58:39] <mst> again
[21:58:42] <Grinnz> ... so is this for a pcre program or not
[21:59:00] <Grinnz> before we waste another 30 minutes arguing about nonsense
[21:59:27] <PlayerOne> The program is only /var1/ and s/var1/var2/ where var1 and var2 may be anything
[21:59:39] <Grinnz> is this for a pcre program or a perl program
[22:00:07] <PlayerOne> Well. It's for /usr/bin/perl
[22:00:43] <Grinnz> so it will not be used in a pcre program then?
[22:00:50] <Grinnz> that's all we were asking
[22:00:55] <mst> how is it using /var1/ and s/var1/var2/ ?
[22:01:05] *** Quits: rgrinberg (~textual@201.192.183.53) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[22:01:32] <mst> though, really, using qr// for the /var1/ case and Data::Munge::replace for the s/var1/var2/ case should probably work
[22:01:40] <PlayerOne> I guess? I mean, I didn't even mention pcre. No such prgram on the local machine.
[22:01:51] <huf> it's a library
[22:01:58] <huf> lots of other things use it to do regex stuff
[22:02:01] <mst> lots of people think pcre means they can ask questions here, sorry
[22:02:02] *** Quits: PlayerOne (~PlayerOne@user/playerone) (Quit: Client closed)
[22:02:08] <huf> that too
[22:02:10] <mst> ... okthen
[22:02:17] *** Joins: PlayerOne (~PlayerOne@user/playerone)
[22:02:23] <PlayerOne> /var1/ is only for while (/$ENV{patternSearchExported}/g)
[22:02:36] <mst> basically
[22:02:37] <mst> < PlayerOne> I thought pcre is a regex string syntax for Perl
[22:02:42] <mst> is a common misunderstanding
[22:02:50] <mst> so we often have people asking pcre questions here
[22:02:51] <mst> I'
[22:03:03] <PlayerOne> s/var1/var2/ is for: while (s/$ENV{searchExp}/$ENV{replaceExp}/)
[22:03:05] <mst> I'm sorry for accidentally thinking you were one of them
[22:03:13] <mst> yeah, you can't do that second one at all
[22:03:20] <mst> you need Data::Munge's replace()
[22:03:26] <mst> like we kept telling you
[22:03:43] <PlayerOne> Roger that. I'm already looking to its code.
[22:04:15] <PlayerOne> Once more. Thank you very much, and I'm sorry for the behavior. For some reason I got used to troll online..
[22:04:20] <PlayerOne> trolls*
[22:04:20] <mst> if you'd just shown us those two lines the first time I asked this would have been much faster :P
[22:04:24] <mst> but fair
[22:04:30] <mst> the internet is full of fuckwits
[22:05:39] <mst> PlayerOne: mistakes happen :)
[22:06:26] <jabberwok> Even the most careful among us can chase a bug all night, discover the problem, file a bug report, and two seconds later realize the problem was a typo in our test code all along
[22:06:56] <PlayerOne> Indeed.. I'm sorry for the definiton issues, and the aggression.
[22:07:14] <PlayerOne> I believe it will not happen again.
[22:07:33] <mst> now you know that we are grumpy but are trying to help
[22:07:42] <mst> I do not see it being a problem in future :)
[22:07:53] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[22:08:42] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 260 seconds)
[22:08:51] <PlayerOne> Please have a pleasant time and stay safe ^^
[22:09:00] <PlayerOne> I'm checking the Munge code
[22:09:14] <mst> also remember p3rl.org/App::FatPacker exists
[22:09:21] <mst> which will pull that code into your script
[22:09:28] <mst> so you can still copy a single file around
[22:09:41] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f6bc:f00:93d:ef3a:ec37:e2db) (Ping timeout: 268 seconds)
[22:10:07] <mst> this will let you use any non-C module and still have a single file
[22:10:09] <Grinnz> (or we may have other solutions depending on your situation)
[22:10:17] <mst> so even if you don't use it now, is worth knowing about
[22:11:26] <PlayerOne> Bookmarked https://metacpan.org/pod/App::FatPacker
[22:11:27] <Paperbot> Link title(s): [ App::FatPacker - pack your dependencies onto your script file - metacpan.org ]
[22:11:31] <mst> PlayerOne: but yes also what Grinnz said, we ask about situations to give better advice
[22:11:48] <mst> just if you want a single script you can scp/etc. around fatpacker exists for that :)
[22:12:21] *** Quits: a3r0 (~aero@61.100.184.210) (Ping timeout: 244 seconds)
[22:14:35] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (Quit: gamo)
[22:14:56] <PlayerOne> Just to clarify, replace()'s 3 argument is a plain text, so if it's a variable its verification is not required, as mentioned above.
[22:15:07] <PlayerOne> Right?
[22:15:24] <mst> PlayerOne: the replacement handles $1 and $2 but yes, there's no verification required
[22:15:26] <Grinnz> it's plain text but substrings like $1 will be replaced with capture groups
[22:16:41] <PlayerOne> I see. It seems replace()'s 2 second argument is a Perl expression (i.e. qr/var1/), but not a regex string (i.e. var1), correct?
[22:17:00] <Grinnz> 2nd argument is a regex string
[22:17:13] <Grinnz> it should not be in qr//
[22:17:14] <mst> PlayerOne: it can accept either, because perl allows either a qr// or a string
[22:17:35] <Grinnz> oh, actually it does take qr// also, the docs say so
[22:17:38] <mst> "REGEX can be a string or a compiled qr// object"
[22:17:53] <Grinnz> but since you have a string already, there's no need
[22:18:08] <mst> but if PlayerOne wants to qr// first to trap errors early
[22:18:13] <mst> that doesn't seem wrong to me
[22:18:27] <mst> maybe not as helpful as they hoped
[22:18:31] <mst> but still not wrong
[22:18:53] <PlayerOne> I see. s#qr/[0-9]/#abc# indeed works.
[22:19:05] <Grinnz> wat
[22:19:20] <mst> that'll match the qr// as part of the match
[22:19:30] <Grinnz> i mean yes but that is the literal string q r / ...
[22:19:34] <mst> but I think 'works' is the confusing word here :)
[22:19:37] <PlayerOne> Oh. Sorry, bad test here.
[22:19:49] <PlayerOne> Yeah, it eats its as a string
[22:19:59] <PlayerOne> it*
[22:20:06] <mst> my $re = qr/[0-9]/; $var =~ s/$re/abc/
[22:20:21] <mst> is how it can be used sensibly
[22:20:36] <Grinnz> qr like m and s is a perl operator, so it will only do its operation in a perl expression, not when placed directly in the s///
[22:20:54] <rewt> thing to remember is that if you have a variable, putting the variable itself into the regex and putting the variable's contents into the regex can yield different results
[22:22:24] <jabberwok> c.f., Injection vector
[22:22:41] <PlayerOne> Noted.
[22:23:37] <mst> PlayerOne: btw, I'm sorry if I was annoying. I hope it now makes sense why.
[22:23:53] <PlayerOne> You wasn't. It's me.
[22:24:13] <mst> I think it was both of us :)
[22:26:58] <jabberwok> The last hour I have been debugging and discovered that in my cut-and-paste oddball handling of seven different edge cases I accidentally removed the ordinary case handler. These things happen
[22:27:16] * GumbyPAN CPAN Upload: PDL-2.063 by ETJ https://metacpan.org/release/ETJ/PDL-2.063
[22:27:17] *** Quits: PlayerOne (~PlayerOne@user/playerone) (Quit: Client closed)
[22:27:29] <mst> jabberwok: one thing I finally remember to check for
[22:27:42] <mst> "compiler error half way down the file"
[22:27:46] <mst> often means I wrote
[22:27:50] <mst> use Some::Module:
[22:28:59] <jabberwok> Tip of the hat to mst, I have been mistyping "inirialize" since 1981
[22:29:46] *** Joins: PlayerOne (~PlayerOne@user/playerone)
[22:30:23] <mst> jabberwok: oh gods initialize versus initialise
[22:31:10] *** Joins: PapaChub (~PapaChub@vzw-54.parabon.com)
[22:33:06] <ether> my team at $newjob freaked out a bit when I typed "colour" etc for the first time
[22:33:30] <mst> ether: oh gods ether don't do that to me
[22:33:38] <ether> and apparently I pronounce "route" strangely, but I can't hear it
[22:33:55] <alh> Is it not one of "rowt" "root" 
[22:33:58] <mst> when I was a teenager, I was writing BBC BASIC at home
[22:34:04] <mst> and QBASIC at school
[22:34:10] <huf> oh no
[22:34:25] <ether> I say both, but apparently Canadians say words that rhyme with "about" in a funny way
[22:34:40] <ether> I'm not convinced though! :)
[22:34:45] <mst> number of times I got the COLO[U]R keyword correct the first time for the dialect I was typing in?
[22:34:49] <mst> approximately zero
[22:34:52] <mst> *augh*
[22:34:52] <huf> mst: yeah
[22:35:27] <choroba> writing in machine code had some advantages after all
[22:35:36] <ether> centre, neighbour, labour
[22:35:47] <huf> the right choice is to just use american in programming
[22:35:57] <ether> why is that the right choice?
[22:35:58] <huf> that xkcd about the number of standards and all that
[22:36:03] <huf> cos that's how most of it is
[22:36:06] <mst> choroba: when school is x86 and home is ARM, not so much ;p
[22:36:09] <ether> to YOU maybe
[22:36:30] <jabberwok> unix permissions are (u)ser (g)roup (o)ther; VMS was (o)wner (g)roup (w)orld.  $ chmod o-rx *  # will not result in happiness
[22:36:33] <huf> using mixed code where it's sometimes one and sometimes the other is awful
[22:36:37] <mst> I, sadly, agree
[22:36:44] <huf> and with libraries, you cant really guarantee that you wont get mixed code
[22:36:47] <Grinnz> jabberwok: oh god
[22:36:54] <mst> Class::C3::Componentised caused vast pain for people
[22:37:00] <mst> because they expected a z not an s
[22:37:16] <mst> so when writing code I use Simplified English
[22:37:22] <mst> (also known as en_US)
[22:37:36] <zgu> everyone thinks canadians say "a boot" but the ones i've met say it more like "a boat"
[22:38:02] *** Quits: PapaChub (~PapaChub@vzw-54.parabon.com) (Ping timeout: 260 seconds)
[22:38:40] <zgu> saying "process" with a long o is the more noticeable one though
[22:39:06] <jabberwok> I once spent an hour to Dallas on long-distance (when it was expensive Ma Bell Day Rate) to texas diagnosing "All I get is an error on the screen!" me: "What's it say?" them: "Nothing, it's just an error!" (I was listening with Boston accent, they were saying 'arrow' (as in cursor) with a Texas drawl)
[22:39:42] <PlayerOne> Welp. It seems s/// had $-[0] set, but replace doesn't
[22:39:49] <PlayerOne> It has inside s{}{} though
[22:40:03] <mst> PlayerOne: yes, replace() only handles $1, $2 etc.
[22:40:09] <mst> PlayerOne: specifically to make it safe
[22:40:15] <Grinnz> replace handles exactly the substrings it mentions in its docs
[22:40:26] <Grinnz> s/// doesn't handle any substrings, only literal interpolation
[22:40:34] <mst> PlayerOne: if you need $-[0] you need to explain more, sorry
[22:40:35] <Grinnz> which you can't do when already interpolating the replacement
[22:43:13] <PlayerOne> Indeed it seems it's not quite possible to get the replaced start with replace() expect rewriting its code.
[22:43:17] <PlayerOne> except*
[22:43:42] <PlayerOne> Since it may assume multiple replaces
[22:43:56] <mst> if you can explain what the problem is we could help more?
[22:44:02] <Grinnz> yeah, if you write your own version of replace you can add other things for it to recognize, but it may be complex
[22:45:11] <PlayerOne> mst, the current function returned replaced line numbers and position indexes which was possible with while(s///)
[22:45:27] <PlayerOne> The replace thingy eliminates that natively
[22:45:43] <PlayerOne> replace()
[22:45:46] <mst> replace() will do the replace better
[22:45:52] <mst> but you could match the string first
[22:46:06] *** Joins: PapaChub (~PapaChub@vzw-52.parabon.com)
[22:46:08] <mst> and that would give you the special variables
[22:46:09] <PlayerOne> It will, but no one will know what and where was replaced.
[22:46:29] <Grinnz> yeah, $-[0] and similar are set by the match part so a m// is sufficient to get them
[22:46:37] <ether> BTW I'm thrilled we had a happy ending here
[22:46:41] <ether> yay communication :)
[22:47:18] *** Quits: troller (~p@2a02:6b8:0:51e:546e:7417:4f13:22b7) (Ping timeout: 268 seconds)
[22:48:20] <PlayerOne> Oh. Perhaps I see what you mean, mst, but replaces may shift lengths and positions.
[22:48:58] <PlayerOne> Like, if match is 2 char length, replace is 3, positions will mismatch since the resulted string is different.
[22:49:11] <PlayerOne> The current function handled that for each loop
[22:49:33] <Grinnz> that would be the same in s///
[22:49:47] <Grinnz> it doesn't adjust them to account for replacement, @- comes from the match
[22:50:05] <PlayerOne> Yes, but the current function adjusted these offsets
[22:50:10] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[22:50:12] <Grinnz> so you can still do that?
[22:50:35] <PlayerOne> I believe so, with a rewrited replace()
[22:52:50] <PlayerOne> Thank you very much, once again! ^^
[22:55:57] *** Quits: PapaChub (~PapaChub@vzw-52.parabon.com) (Ping timeout: 256 seconds)
[22:56:00] *** choroba is now known as choroba_
[22:56:14] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[22:56:30] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[22:56:47] *** Quits: choroba_ (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[22:57:05] *** Quits: Falconer (~ronnyma@227.84-48-191.nextgentel.com) (Ping timeout: 256 seconds)
[22:57:23] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 264 seconds)
[23:03:24] *** Joins: Falconer (~ronnyma@227.84-48-191.nextgentel.com)
[23:06:10] *** Joins: pucara (~i@181.93.164.73)
[23:08:05] *** Joins: gamo (~Thunderbi@cm-93-156-61-102.telecable.es)
[23:08:14] *** Joins: PapaChub (~PapaChub@vzw-54.parabon.com)
[23:10:48] <gordonfish> WORDS=1 make thisday FOR=you
[23:11:40] <gordonfish> (with a compiler from golden and gnu)
[23:11:46] <gordonfish> s/form //
[23:12:40] <mst> FORTH LOVE? IF HONK THEN
[23:18:56] <fizzie> Some heretics now say ENDIF because apparently the position of the THEN is "confusing". (Ridiculous!)
[23:20:36] <zgu> probably the same people who say the 'GIVING COBOL' part of 'ADD 1 TO COBOL GIVING COBOL' is redundant
[23:21:22] <mst> fizzie: clearly should've been FI ;)
[23:21:41] <gordonfish[m]> Isn't the part after GIVING where the result is assigned to?
[23:22:37] <gordonfish[m]> My COBOL is rusty but iirc, that translates to cobol = cobol + 1
[23:22:40] <zgu> yes but it defaults to storing it in the same variable i think
[23:22:58] <zgu> so ADD 1 TO COBOL is cobol += 1
[23:23:17] <gordonfish[m]> Yep
[23:24:16] <gordonfish[m]> I thought the GIVEN was required though. Maybe I'm misremembering.
[23:24:48] <gordonfish[m]> Haven't used COBOL is about 15 years at least.
[23:27:50] <gordonfish[m]> *in
[23:28:10] <zgu> https://www.ibm.com/docs/en/cobol-zos/4.2?topic=statements-add-statement All identifiers or literals that precede the keyword TO are added together, and this sum is added to and stored in identifier-2.
[23:28:11] <Paperbot> Link title(s): [ ADD statement ]
[23:28:48] *** Joins: Colt (~Colt@user/colt)
[23:34:17] *** Quits: jaytee80 (~jaytee80@remote-e.cpii.com) (Quit: Client closed)
[23:39:38] <jabberwok> DIVISION-OF-REDUNDANCY DIVISION.
[23:50:31] *** Quits: gizmomathboy_ (~gizmomath@206.127.53.107) (Quit: Leaving)
[23:50:43] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[23:59:01] *** Quits: alex11 (~alex11@user/alex11) (Remote host closed the connection)
