[00:00:20] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:01:08] *** Quits: eletrotupi (eletrotupi@user/eletrotupi) (Quit: Bye)
[00:02:53] *** Joins: eletrotupi (~eletrotup@li1317-106.members.linode.com)
[00:03:06] *** Joins: sir-w (~sir-w@2601:646:8080:fe30:6cd4:3da4:6b6:9b93)
[00:03:11] <mcf> seninha: you have poll(...) != 1, which means that the loop exits when one fd has activity
[00:04:10] *** Quits: terminalpusher (~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12) (Remote host closed the connection)
[00:07:15] *** Quits: sir-w (~sir-w@2601:646:8080:fe30:6cd4:3da4:6b6:9b93) (Client Quit)
[00:10:38] *** Quits: moog (~moog@107.126.53.224) (Ping timeout: 260 seconds)
[00:13:20] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d834-b7f2-fd3e-c3e9.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:13:47] <seninha> damn, how I let that pass?
[00:13:56] <seninha> tnx
[00:14:57] *** Quits: mimmy (~mimmy@69.174.8.146) (Ping timeout: 240 seconds)
[00:18:12] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[00:18:57] *** Quits: alch (~alch@151.38.80.124) (Ping timeout: 240 seconds)
[00:19:27] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[00:19:48] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d948-d94a-0c99-3324.res6.spectrum.com)
[00:21:04] *** Joins: alch (~alch@151.34.32.70)
[00:22:47] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[00:23:52] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:24:00] *** Joins: moog (~moog@107.126.53.157)
[00:26:18] *** Quits: magla (~gelignite@55d41339.access.ecotel.net) (Quit: Stay safe!)
[00:26:30] *** Joins: Burgundy (~yomon@79.115.213.171)
[00:26:46] *** Joins: zensei (~zensei@71.73.23.186)
[00:27:16] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[00:27:55] *** Quits: zensei (~zensei@71.73.23.186) (Changing host)
[00:27:55] *** Joins: zensei (~zensei@user/zensei)
[00:28:35] *** Quits: zensei (~zensei@user/zensei) (Client Quit)
[00:28:51] *** Joins: zensei (~zensei@user/zensei)
[00:30:50] *** Joins: critr (~critr@user/critr)
[00:33:07] *** Joins: random-nick (~random-ni@87.116.180.98)
[00:34:26] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[00:35:15] *** Joins: kinopes (~kinopes@46.188.125.207)
[00:35:21] *** Quits: tewrdh^ (~tewrdh@64.253.22.77) (Remote host closed the connection)
[00:36:32] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[00:36:54] *** Quits: Libero (~Libero@77.49.184.64.dsl.dyn.forthnet.gr) (Quit: Leaving)
[00:37:34] *** Joins: freep (~freepppp@77.49.184.64.dsl.dyn.forthnet.gr)
[00:37:57] *** Pokey is now known as ahorner
[00:38:02] *** ahorner is now known as Pokey
[00:41:56] *** Joins: mimmy (~mimmy@69.174.8.146)
[00:46:37] *** Quits: mimmy (~mimmy@69.174.8.146) (Ping timeout: 240 seconds)
[00:46:39] *** Quits: mahmutov_ (~mahmutov@5.176.61.200) (Ping timeout: 268 seconds)
[00:47:03] *** Quits: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe) (Read error: Connection reset by peer)
[00:48:05] *** Joins: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe)
[00:49:07] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[00:51:51] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d948-d94a-0c99-3324.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:52:22] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[00:52:39] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d948-d94a-0c99-3324.res6.spectrum.com)
[00:53:48] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[00:55:20] *** Quits: UsbSick (~UsbSick@2600:6c48:757f:e654:a863:efc5:fd1:1de4) (Remote host closed the connection)
[00:56:08] *** Joins: ffguest (~ffguest@178.151.94.123)
[00:56:30] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:56:48] <seninha> ok, now I'm getting infinite loop again: https://0x0.st/-Cn5.c
[00:57:26] <seninha> It keeps calling readstdin even after reading the entire stdin.
[00:57:44] *** Quits: kinopes (~kinopes@46.188.125.207) (Read error: Connection reset by peer)
[00:57:59] *** Quits: Guest3089 (~anon@iskon3223.duo.carnet.hr) (Ping timeout: 256 seconds)
[00:58:02] <seninha> In the function run() (line 2144)
[00:58:03] *** Joins: Praise (~Fat@user/praise)
[00:58:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[00:58:39] *** Joins: Viewday11 (~Viewday@user/viewday)
[00:59:59] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[01:00:00] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[01:01:20] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Client Quit)
[01:01:25] *** Joins: mimmy (~mimmy@69.174.8.146)
[01:02:18] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[01:02:33] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[01:02:59] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[01:05:55] *** Quits: mimmy (~mimmy@69.174.8.146) (Ping timeout: 256 seconds)
[01:06:05] *** Joins: begriffs (~singleuse@user/begriffs)
[01:06:52] *** Quits: begriffs (~singleuse@user/begriffs) (Remote host closed the connection)
[01:08:46] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[01:09:11] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[01:10:01] *** Quits: ffguest (~ffguest@178.151.94.123) (Quit: Igloo IRC: https://iglooirc.com)
[01:12:29] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:12:37] *** Quits: eletrotupi (~eletrotup@li1317-106.members.linode.com) (Quit: Bye)
[01:13:50] *** Joins: eletrotupi (eletrotupi@2600:3c02::f03c:92ff:febb:2d7a)
[01:14:40] *** Quits: eletrotupi (eletrotupi@2600:3c02::f03c:92ff:febb:2d7a) (Changing host)
[01:14:40] *** Joins: eletrotupi (eletrotupi@user/eletrotupi)
[01:17:46] *** Quits: eletrotupi (eletrotupi@user/eletrotupi) (Client Quit)
[01:17:59] *** Joins: eletrotupi (eletrotupi@user/eletrotupi)
[01:23:26] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[01:24:13] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[01:24:55] *** Quits: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:28:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:31:46] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[01:32:11] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[01:32:42] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[01:34:22] *** Joins: mimmy (~mimmy@69.174.8.146)
[01:38:57] *** Quits: mimmy (~mimmy@69.174.8.146) (Ping timeout: 240 seconds)
[01:41:21] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:45:52] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d948-d94a-0c99-3324.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:46:31] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:46:31] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:46:31] *** Joins: wroathe (~wroathe@user/wroathe)
[01:47:08] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[01:48:03] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[01:48:13] *** Joins: mimmy (~mimmy@69.174.8.146)
[01:48:29] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[01:49:48] *** Quits: eletrotupi (eletrotupi@user/eletrotupi) (Quit: Bye)
[01:50:01] *** Joins: eletrotupi (~eletrotup@user/eletrotupi)
[01:51:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:52:37] *** Quits: Gimble (~G1mble2@2a01:4b00:8e07:7900:e79c:6460:44ed:8423) (Quit: Leaving)
[01:52:43] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[01:53:58] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[01:54:36] *** Quits: Forty-Bot (~kvirc@pool-108-18-207-184.washdc.fios.verizon.net) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[01:57:57] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[02:02:20] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[02:02:30] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[02:02:50] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[02:02:53] *** Joins: kish` (~sid742412@user/aqua)
[02:04:30] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[02:06:21] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[02:08:54] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:11:05] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d948-d94a-0c99-3324.res6.spectrum.com)
[02:12:10] *** Quits: Akuli (~Akuli@82-203-162-28.bb.dnainternet.fi) (Quit: Akuli)
[02:12:35] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[02:18:48] *** Joins: findiggl` (~user@2601:601:9f00:5c60:ea51:63ee:d408:b6e8)
[02:20:17] *** Quits: findiggle (~user@2601:601:9f00:5c60:dfe7:ec34:7bba:73c5) (Ping timeout: 240 seconds)
[02:23:17] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[02:24:41] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[02:24:51] *** MrC is now known as MrChristmas
[02:24:57] *** Quits: ckdCreations (~ckdCreati@2607:fb90:8357:35f0:5094:958:f5f3:5548) (Ping timeout: 240 seconds)
[02:25:23] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[02:27:04] *** Joins: ckdCreations (~ckdCreati@147.55.130.35)
[02:29:45] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:74ef:f1b6:d77e:66a2) (Quit: Leaving)
[02:30:55] *** Joins: sonny (~sonny@8.6.144.252)
[02:32:50] *** Quits: pizdets (~pizdets@183.182.110.174) (Ping timeout: 250 seconds)
[02:34:00] *** Quits: Thedarkb (~Thedarkb@2001:bb6:b403:e042:eefd:c6c7:bba0:4cad) (Remote host closed the connection)
[02:34:13] *** Joins: pizdets (~pizdets@183.182.114.214)
[02:34:27] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:36:23] *** Quits: coruja (~coruja@user/coruja) (Quit: ZNC 1.8.2 - https://znc.in)
[02:36:36] *** Joins: soul-d (~uknown@user/soul-d)
[02:37:45] *** Joins: anon (~anon@iskon3116.duo.carnet.hr)
[02:38:01] *** anon is now known as Guest5927
[02:39:10] *** Joins: coruja (~coruja@user/coruja)
[02:39:29] *** Joins: nips (~nips@178.43.73.167.ipv4.supernova.orange.pl)
[02:40:15] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d948-d94a-0c99-3324.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:46:39] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[02:47:20] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:47:26] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Quit: WeeChat 3.3)
[02:47:40] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[02:47:46] *** Joins: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net)
[02:47:53] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:50:04] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Remote host closed the connection)
[02:50:20] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[02:50:58] *** Joins: kuku01 (~kuku@user/kuku)
[02:52:58] *** Quits: kuku (~kuku@user/kuku) (Ping timeout: 265 seconds)
[02:55:14] *** Quits: ckdCreations (~ckdCreati@147.55.130.35) (Read error: Connection reset by peer)
[02:55:40] *** Joins: UsbSick (~UsbSick@2600:6c48:757f:e654:a863:efc5:fd1:1de4)
[02:55:46] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[02:56:12] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:56:21] *** Joins: ckdCreations (~ckdCreati@147.55.130.35)
[02:58:15] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[02:58:59] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[03:01:27] *** Quits: Guest5927 (~anon@iskon3116.duo.carnet.hr) (Quit: Guest5927)
[03:04:20] *** Joins: nuh^ (~nuh@64.253.22.77)
[03:04:36] *** Quits: Kev_ (~Kev@2a01cb0400149f0030c04b21e9468286.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[03:06:13] *** Quits: ckdCreations (~ckdCreati@147.55.130.35) (Ping timeout: 240 seconds)
[03:07:03] *** Joins: ckdCreations (~ckdCreati@147.55.130.35)
[03:07:59] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[03:09:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[03:10:17] *** Quits: mimmy (~mimmy@69.174.8.146) (Ping timeout: 240 seconds)
[03:11:14] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[03:15:22] *** Quits: nips (~nips@178.43.73.167.ipv4.supernova.orange.pl) (Quit: Konversation terminated!)
[03:17:00] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[03:18:09] *** Joins: mimmy (~mimmy@38.142.1.26)
[03:22:44] *** Joins: sbrothy (~sbrothy@192038134172.mbb.telenor.dk)
[03:22:51] *** Quits: mimmy (~mimmy@38.142.1.26) (Client Quit)
[03:24:53] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[03:27:17] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[03:30:18] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: WeeChat 3.3)
[03:30:49] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:31:56] *** Joins: john99 (~john99@199.246.103.34.bc.googleusercontent.com)
[03:32:56] *** Joins: archdark[m] (~ryonagana@2001:470:69fc:105::fd27)
[03:35:34] *** Joins: sir-w (~sir-w@2601:646:8080:fe30::dc80)
[03:35:47] *** Quits: sir-w (~sir-w@2601:646:8080:fe30::dc80) (Client Quit)
[03:37:39] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[03:38:17] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[03:40:23] *** Joins: Wulf (~Wulf@user/wulf)
[03:42:43] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Quit: WeeChat 3.3)
[03:44:00] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[03:44:57] *** Quits: freep (~freepppp@77.49.184.64.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:45:09] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:e954:6a22:3202:5b23) (Ping timeout: 250 seconds)
[03:53:27] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:55:02] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:56:40] *** Joins: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com)
[04:04:05] *** Quits: Guest4472 (~somewhere@122-199-43-68.ip4.superloop.com) (Quit: No Ping reply in 180 seconds.)
[04:05:19] *** Joins: etolier (~somewhere@122-199-43-68.ip4.superloop.com)
[04:05:43] *** etolier is now known as Guest6406
[04:11:10] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[04:13:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:14:21] *** Joins: frost (~frost@user/frost)
[04:14:24] *** Quits: frost (~frost@user/frost) (Client Quit)
[04:15:37] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[04:16:16] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[04:18:51] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:18:51] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:18:51] *** Joins: wroathe (~wroathe@user/wroathe)
[04:19:17] *** Quits: alch (~alch@151.34.32.70) (Ping timeout: 240 seconds)
[04:21:24] *** Joins: alch (~alch@151.34.83.92)
[04:24:11] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[04:28:04] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[04:29:26] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[04:31:17] *** Joins: bu5hyt0p_ (~rmsare@2601:281:c780:a510:6d40:63c6:3a27:e5b8)
[04:33:44] *** Quits: mrlemke (~quassel@208.74.105.200) (Quit: Bye.)
[04:34:37] *** Quits: sonny (~sonny@8.6.144.252) (Ping timeout: 240 seconds)
[04:35:17] *** Joins: Viewday116 (~Viewday@user/viewday)
[04:36:01] *** Quits: john99 (~john99@199.246.103.34.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[04:36:16] *** Joins: NEYi (~NEYi@109.251.216.38)
[04:37:17] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[04:39:56] *** Joins: dead1 (~dead@user/dead1)
[04:39:59] *** Joins: Viewday11 (~Viewday@user/viewday)
[04:40:07] *** Quits: Viewday116 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[04:40:10] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[04:40:33] *** Joins: kish` (~sid742412@user/aqua)
[04:41:15] *** Joins: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173)
[04:43:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:44:51] *** Joins: sonny (~sonny@8.6.144.252)
[04:46:26] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 260 seconds)
[04:47:29] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[04:51:08] *** Joins: Viewday110 (~Viewday@user/viewday)
[04:51:34] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[04:51:35] *** Viewday110 is now known as Viewday11
[04:53:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:53:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:53:14] *** Joins: wroathe (~wroathe@user/wroathe)
[04:53:37] *** Joins: Torr (~Torr@user/torr)
[04:58:16] *** Joins: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:58:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:59:43] *** Joins: PortableDave (~portabled@220.253.22.64)
[04:59:58] *** Quits: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com) (Read error: Connection reset by peer)
[05:02:35] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 268 seconds)
[05:03:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:03:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:03:16] *** Joins: wroathe (~wroathe@user/wroathe)
[05:06:14] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[05:06:16] *** Quits: PortableDave (~portabled@220.253.22.64) (Ping timeout: 268 seconds)
[05:07:45] *** Joins: begriffs (~singleuse@user/begriffs)
[05:08:20] *** Quits: begriffs (~singleuse@user/begriffs) (Remote host closed the connection)
[05:10:44] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[05:10:46] *** Joins: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe)
[05:11:16] *** Joins: Colt (~Colt@user/colt)
[05:12:52] *** Quits: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe) (Read error: Connection reset by peer)
[05:13:47] *** Joins: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe)
[05:13:57] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 240 seconds)
[05:14:09] *** Joins: Macuser (~Macuser@2600:1003:b44f:f97a:520:cda:2a1b:c1d)
[05:15:04] *** Joins: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:15:50] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[05:16:36] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[05:16:39] *** Quits: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com) (Client Quit)
[05:16:56] *** Joins: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:18:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:18:32] *** Joins: Viewday110 (~Viewday@user/viewday)
[05:20:04] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[05:20:05] *** Viewday110 is now known as Viewday11
[05:20:26] *** Quits: Soni (~quassel@autistic.space) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[05:21:20] *** Joins: Soni (~quassel@autistic.space)
[05:21:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374) (Ping timeout: 260 seconds)
[05:23:19] *** Quits: Smilex (~ian@D47097B7.rev.sefiber.dk) (Quit: WeeChat 2.3)
[05:24:37] *** Quits: sonny (~sonny@8.6.144.252) (Ping timeout: 240 seconds)
[05:28:07] *** Quits: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com) (Quit: leaving)
[05:28:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:28:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:28:20] *** Joins: wroathe (~wroathe@user/wroathe)
[05:29:10] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:29:17] <danielcamiel> strunk & white's pillow fights
[05:29:47] *** Joins: sonny (~sonny@8.6.144.252)
[05:30:57] *** Joins: fe23 (~fe23@2409:8a34:468:83d0:11a2:239:73e2:75cc)
[05:32:50] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[05:34:23] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[05:34:27] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:40:11] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[05:40:11] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 268 seconds)
[05:43:37] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[05:45:40] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[05:46:20] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[05:47:37] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 240 seconds)
[05:47:50] *** Joins: malloy (~jimery@116.30.221.255)
[05:49:49] *** Quits: nuh^ (~nuh@64.253.22.77) (Ping timeout: 256 seconds)
[05:50:10] *** Joins: nuh^ (~nuh@64.253.22.77)
[05:54:59] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[05:55:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:59:02] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 240 seconds)
[06:00:15] *** Quits: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:01:23] *** Joins: zmt01 (~zmt00@user/zmt00)
[06:02:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:02:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:02:16] *** Joins: wroathe (~wroathe@user/wroathe)
[06:02:53] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[06:03:17] *** Joins: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe)
[06:05:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[06:06:08] *** Quits: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe) (Client Quit)
[06:07:37] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:08:32] *** Joins: aura[m] (~aurabindo@2001:470:69fc:105::4204)
[06:09:11] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Quit: Leaving)
[06:12:22] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[06:14:46] <katnis> im too stupid to understand the language properly
[06:15:05] <dave0> coding's not for everyone
[06:15:44] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[06:21:59] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[06:22:17] <poprocks> learning C is much like shooting a bow & arrow. you could hit the target directly in the bullseye, or you could miss and stab someone in the heart with an arrow, thus killing them instantaneously
[06:23:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[06:23:32] *** Joins: Enitin (~Enitin@82.102.22.85)
[06:23:54] <caze> It just takes practice.
[06:24:09] * pnbeast doesn't want to use poprocks' compiler.
[06:25:28] <floatcomplex> you can write wrong code in any language. i live in fear of code that was written in java or python by people who would have not been able to write it correctly in c. chances are it's still not correct in that other language
[06:26:17] <floatcomplex> whether to use c or not for a given problem should not be a matter of skill
[06:26:31] <poprocks> horses for courses
[06:28:02] <dave0> c is missing a repl
[06:28:39] <floatcomplex> dave0: https://godbolt.org/z/hae9W5M99
[06:29:43] <dave0> hello world!
[06:30:34] *** Joins: soapsudsxx (~soapsudsx@209.221.40.139)
[06:31:32] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[06:32:25] <wroathe> floatcomplex: I've got news for you bud 
[06:32:36] <wroathe> floatcomplex: The entire world's financial industry is built on top of god awful Java
[06:33:05] <pony> all of it?
[06:33:09] <pony> no C++?
[06:33:14] <dave0> i thought it was cobol
[06:33:24] *** Joins: gco (~gco@2601:647:4c80:2424:9443:2546:1922:84d7)
[06:33:33] <pony> there maybe some FORTRAN in there too
[06:33:54] <pony> probably heaps of langs but still mostly Java
[06:33:56] <poprocks> Top 7 Reasons Why You Should Learn PYTHON in 2022!
[06:33:57] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:34:06] <pony> poprocks: what are they?
[06:34:58] <poprocks> 1. it's python, 2. you suck, 3. python rules yo! 4. python3  5. _______init________ 6. s/print/print()  7. snakes are slithery
[06:35:21] <pony> xD
[06:37:17] *** Joins: rgrinberg (~textual@187.223.23.238)
[06:38:33] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-31-183.pa.qld.optusnet.com.au)
[06:40:07] <NRK[m]> wroathe i heard it was COBOL
[06:40:57] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[06:42:42] <dave0> NRK[m]: i heard that too!
[06:43:25] <floatcomplex> wroathe: i was not denying the existence of such code
[06:44:15] *** Quits: Macuser (~Macuser@2600:1003:b44f:f97a:520:cda:2a1b:c1d) (Quit: Textual IRC Client: www.textualapp.com)
[06:46:46] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[06:47:32] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[06:50:13] <malloy> hello, i find that installing signal handler after thread creation does not work
[06:50:45] <sonny> c11 threads?
[06:51:14] <malloy> such as https://paste.rs/ZFe 
[06:51:19] <malloy> sonny:  pthread
[06:52:31] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:52:36] *** Joins: Viewday115 (~Viewday@user/viewday)
[06:52:36] <sonny> I think there is a ##posix for this stuff
[06:54:25] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[06:54:25] *** Viewday115 is now known as Viewday11
[06:55:36] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:02:32] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-31-183.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[07:08:02] *** Joins: kaph_ (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[07:11:25] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[07:13:34] *** Joins: kdc (~kdc@196.211.197.159)
[07:14:27] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[07:16:18] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[07:16:43] <retr0> is this allowed: if (x =~ y){}
[07:19:31] <rcf> Why wouldn't it be 
[07:20:28] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:21:49] <neshpion> well that rather looks like you'd want `if (x == ~y){}`.  what exactly do you have in mind for what your `=~` example is supposed to do?
[07:23:46] * smallville7123 attempts to debug my mess
[07:23:49] <dave0> retr0: it's not special, it's just got misleading whitespace.. if (x = ~y) {
[07:24:08] <dave0> ~ being a unary opertor
[07:24:25] * wroathe attempts the possible 
[07:25:12] <NRK[m]> it's like the "goes to" operator
[07:25:46] <dave0> not to be confused with "come from"
[07:27:31] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Quit: Client closed)
[07:27:49] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[07:27:56] <retr0> ok
[07:28:08] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:30:07] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[07:32:45] *** Joins: Guest26 (~Guest26@65.207.90.10)
[07:33:17] *** Quits: Kit (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:34:59] *** Joins: Kit (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:05] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Quit: Client closed)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:40:43] *** Joins: Viewday114 (~Viewday@user/viewday)
[07:40:44] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[07:43:07] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[07:43:09] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[07:43:09] *** Viewday114 is now known as Viewday11
[07:44:45] <retr0> can i do int myint = 5b printf("%b", (0b)myint);
[07:45:14] <retr0> int myint =5;
[07:45:38] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 260 seconds)
[07:47:18] <dave0> not sure what you're doing there
[07:47:45] <retr0> temporary dec to binary
[07:47:52] <retr0> on identifiers
[07:48:17] <dave0> must be a new thing
[07:48:53] <dave0> afaik printf can't print a number as binary ie base 2
[07:49:06] <dave0> shouldn't be too difficult to write a function for it
[07:49:13] <retr0> dang
[07:49:45] <retr0> printf  has %b in c2x
[07:49:57] <dave0> cool
[07:50:17] <dave0> ,cc int myint = 5; printf("%b ", myint);
[07:50:20] <candide> dave0: [note: %b is a c​andide extension] 101
[07:50:33] <dave0> seems to work
[07:51:30] <retr0> but what if I wanted to just convert x into binary where x's value is unknown
[07:51:48] <retr0> and without writing a function
[07:52:16] <pragma-> that's not the c2x %b
[07:52:16] <dave0> ,cc void printbinary(int a) { if(a < 0) { putchar('-'); a = -a; } if(a >= 2) printbinary(a / 2); putchar('0' + a % 2); } printbinary(-5);
[07:52:19] <candide> dave0: -101
[07:52:54] <dave0> retr0: why no function? functions are a good thing
[07:52:56] <pragma-> the bot has its own b format flag it registers with printf
[07:52:56] <retr0> c2x has 0b too
[07:52:58] <pony> dave0: nice
[07:53:18] <pragma-> the bot's b format specifier supports the ' flag and others
[07:53:29] <retr0> but it only works on literals
[07:53:43] <pony> retr0: not rue
[07:53:51] <pony> true *
[07:53:55] <retr0> 0b11111111
[07:54:20] <retr0> huh
[07:54:49] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:55:15] *** Quits: moog (~moog@107.126.53.157) (Remote host closed the connection)
[07:58:20] <dave0> retr0: not real sure what you are asking... myint is just a number... if you want to print it in base 2 you gotta do it by hand
[07:58:37] <dave0> printf can do decimal and hex
[07:58:57] <dave0> candide seems to have added binary, maybe you could cut & paste
[07:58:58] <candide> [#bash] The shell started in the 1970's, so almost any time you think "this shell feature seems like language X" it will be because X got it from the Shell, not the other way round
[07:59:05] <dave0> thankyou robot
[07:59:42] <retr0> ok thx bbl
[08:00:45] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Quit: Client closed)
[08:06:16] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:12:03] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 256 seconds)
[08:12:38] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 252 seconds)
[08:15:44] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:16:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:16:35] *** Quits: koki (~koki@host-87-17-16-123.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[08:18:07] *** Joins: koki (~koki@host-80-181-107-133.pool80181.interbusiness.it)
[08:19:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[08:19:59] *** Quits: alch (~alch@151.34.83.92) (Ping timeout: 256 seconds)
[08:21:08] *** Joins: Viewday119 (~Viewday@user/viewday)
[08:21:47] *** Joins: alch (~alch@151.34.0.230)
[08:21:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:22:37] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[08:22:38] *** Viewday119 is now known as Viewday11
[08:23:14] *** Joins: node1 (~node1@user/node1)
[08:24:39] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[08:24:50] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[08:30:15] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[08:34:37] *** Joins: constxd (~brad@142.134.38.68)
[08:35:42] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[08:38:09] *** Joins: seninha (~seninha@user/seninha)
[08:40:21] *** Quits: sonny (~sonny@8.6.144.252) (Quit: Going offline, see ya! (www.adiirc.com))
[08:40:55] *** Joins: freep (~freepppp@77.49.184.64.dsl.dyn.forthnet.gr)
[08:41:40] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:44:21] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[08:50:30] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[08:52:15] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[08:52:36] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[08:56:29] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[08:56:37] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[08:56:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:56:47] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:58:07] *** Joins: Viewday112 (~Viewday@user/viewday)
[08:58:58] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:59:31] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[08:59:31] *** Viewday112 is now known as Viewday11
[09:00:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[09:06:09] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:06:28] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[09:08:02] <smallville7123> in "foo(x) x y"    "x" expands to "y" then this "y" is not expanded again, but the other "y" in "x y" CAN be expanded, right?
[09:08:26] *** Quits: rgrinberg (~textual@187.223.23.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:08:41] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[09:08:57] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[09:09:51] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[09:10:20] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.3)
[09:10:37] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[09:11:16] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[09:11:17] *** Quits: gco (~gco@2601:647:4c80:2424:9443:2546:1922:84d7) (Quit: ZZZzzz…)
[09:12:49] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:13:15] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[09:16:29] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:17:16] *** Joins: frost (~frost@user/frost)
[09:17:41] *** Joins: vim_fans (~pi@user/vim-fans/x-3284168)
[09:17:52] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[09:18:49] *** Joins: Viewday111 (~Viewday@user/viewday)
[09:18:55] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[09:18:57] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 240 seconds)
[09:20:52] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:21:11] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[09:21:11] *** Viewday111 is now known as Viewday11
[09:21:43] <vim_fans> hi,there. I got stuck on arithmetic of pointer. Please check it out https://pastebin.com/y3E7NPfH What confused me is that the conditions which executed first in those two methods. Doesn't the result of arithmetic between pointers would be address? so how could comparision between address and integer?  
[09:21:56] *** Joins: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe)
[09:26:50] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:28:30] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:28:36] <floatcomplex> pretty sure line 20 is UB
[09:29:02] <floatcomplex> you should just not have line 20 at all. just do nothing if p is NULL, otherwise assume it's valid
[09:29:11] <floatcomplex> that's how actual free() must be assumed to work
[09:31:12] <floatcomplex> line 9 is fine
[09:31:13] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[09:31:27] <NRK[m]> that link does not even load for me
[09:32:31] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[09:32:32] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[09:32:44] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:33:02] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:33:21] <smallvil_> vim_fans: no
[09:33:32] <smallvil_> "if(allocbuf + ALLOCSIZE - allocp >= n){  /* it fits */"
[09:33:34] <smallvil_> this is wrong
[09:34:02] <floatcomplex> smallvil_: ?
[09:34:03] *** Quits: ckdCreations (~ckdCreati@147.55.130.35) (Read error: Connection reset by peer)
[09:34:04] <vim_fans> i think so, but the book has it as an example 
[09:34:16] <NRK[m]> wait, that's from K&R
[09:34:25] <vim_fans> NRK[m]: yeah 
[09:34:25] *** Joins: ckdCreations (~ckdCreati@2607:fb90:b275:a38f:99ee:fa2e:1a24:a8e)
[09:34:31] <NRK[m]> the stack allocator IIRC
[09:34:33] <floatcomplex> just reorder it so that it's unconditionally correct
[09:34:58] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:34:59] <floatcomplex> pretty sure it already is though
[09:35:04] <smallvil_> first, lets assume that you want to make a fixed-size stack array
[09:35:15] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:36:05] <floatcomplex> ,paren allocbuf + ALLOCSIZE - allocp >= n
[09:36:07] <candide> floatcomplex: ((allocbuf + ALLOCSIZE) - allocp) >= n
[09:36:12] <floatcomplex> yeah it's fine
[09:36:16] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:36:34] <NRK[m]> ofc it's fine. its' from K&R !!
[09:36:42] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:37:10] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[09:37:46] <floatcomplex> the compiler is free to omit line 20 entirelu
[09:38:58] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[09:39:07] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[09:41:29] *** Joins: loganlee (~Thunderbi@user/loganlee)
[09:42:07] <NRK[m]> vim_fans subtracting two pointers (within the same array) doesn't produce an address
[09:42:39] <NRK[m]> keep reading along, i think there should be an example of strlen using pointer arithmetic
[09:43:03] <vim_fans> NRK[m]: thanks.
[09:43:45] <vim_fans> this book is really awesome \0/
[09:47:06] <nitrix> smallvil_, Macros arguments are expanded before the body gets substituted, unless those arguments are used in combination with the # or ## operators.
[09:50:01] <smallvil_> vim_fans: https://gist.github.com/mgood7123/7aaf79a35f486ad74c122439fcf1664f about as best as you are going to get without a serious redesign
[09:50:02] <candide> Title of smallvil_'s link: fixed · GitHub
[09:50:14] <nitrix> In which case, you'd need a wrapper macro to regain the ability of the arguments getting expanded. e.g. #define CONCAT(x, y) x ## y, with the wrapper #define CONCAT2(x, y) CONCAT(x, y)
[09:51:26] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:52:16] <smallville7123> vim_fans: on the other hand you could simply wrap around malloc and free
[09:52:56] *** Joins: Viewday111 (~Viewday@user/viewday)
[09:53:29] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-134.home.otenet.gr)
[09:53:37] <smallville7123> as it is probably impossible to cause an invalid write to a stack address
[09:54:24] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[09:54:24] *** Viewday111 is now known as Viewday11
[09:54:30] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[09:54:32] <smallville7123> tho it IS possible to implement this as a simple used/unused check
[09:55:11] *** Joins: aliosablack (~chomwitt@ppp-2-85-245-134.home.otenet.gr)
[09:59:13] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[10:00:04] *** Joins: vim_fans_ (~pi@user/vim-fans/x-3284168)
[10:02:17] *** Quits: vim_fans (~pi@user/vim-fans/x-3284168) (Ping timeout: 240 seconds)
[10:02:50] <NRK[m]> i don't see how that version is "fixed"
[10:03:05] <NRK[m]> it doesn't even free :c
[10:03:39] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[10:03:54] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[10:04:45] *** Joins: dumdedums (~dumdedums@user/dumdedums)
[10:11:33] <smallville7123> vim_fans_: possibly https://gist.github.com/mgood7123/7aaf79a35f486ad74c122439fcf1664f#file-fixed-v2
[10:11:34] <candide> Title of smallville7123's link: fixed · GitHub
[10:11:52] <smallville7123> NRK[m]: cus it cant :)
[10:12:42] <danielcamiel> speedy gonzalis
[10:13:35] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:959e:f772:789b:bf56) (Quit: Quit)
[10:13:56] <NRK[m]> what the...
[10:14:11] <NRK[m]> it's supposed to be a stack based allocator
[10:14:27] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[10:14:46] *** Joins: Viewday11 (~Viewday@user/viewday)
[10:14:46] <NRK[m]> also, why memset 0 ? all objects of static storage duration are implicitly initilized to 0
[10:15:40] <caze> FIFY https://pastebin.com/uG9qCvYr
[10:16:01] <smallville7123> NRK[m]: it still is
[10:17:08] <smallville7123> also we memset upon init to make sure we do not have garbage 
[10:17:47] <NRK[m]> you can't have garbage on static objects
[10:18:00] <caze> smallville7123 doesn't know C.
[10:18:10] <smallville7123> well better safe than sorry :)
[10:18:59] <smallville7123> remove the "if (alloc_need_init)" section if you want :)
[10:20:24] <caze> smallville7123 loves to cast
[10:20:30] <caze> Don't cast smallville7123 
[10:20:41] <smallville7123> lol
[10:21:05] <smallville7123> idk if 0 is always true/false on all platforms
[10:21:17] <NRK[m]> If an object that has static storage during is not initialized explicitly, it is initialized implicitly as if every member that has arithmetic type were assigned 0 and every member that has pointer type were assigned a null pointer constant.
[10:21:20] *** Quits: vim_fans_ (~pi@user/vim-fans/x-3284168) (Quit: WeeChat 1.9.1)
[10:21:21] <caze> So casting to (int) does what?
[10:21:38] <NRK[m]> 0 is always false
[10:21:40] <smallville7123> converts bool into correct int representation
[10:21:50] <smallville7123> NRK[m]: ok :)
[10:22:41] <caze> smallville7123: But why (int)?
[10:23:31] <NRK[m]> how do u make candide yell verses from the C standard?
[10:23:51] <NRK[m]> ,7.16
[10:23:53] <smallville7123> there https://gist.github.com/mgood7123/7aaf79a35f486ad74c122439fcf1664f#file-fixed-v2
[10:24:01] <pnbeast> ,insult NRK[m] 
[10:24:02] <candide> NRK[m]: You remind me of the ocean - you make me sick.
[10:24:27] <NRK[m]> ,c99 7.16
[10:24:29] <candide> http://www.iso-9899.info/n1256.html#7.16 [Boolean type and values <stdbool.h>] 1 The header <stdbool.h> defines four macros. 2 The macro bool expands to _Bool. 3 The remaining three macros are suitable for use in #if preprocessing directives. They are true which expands to the integer constant 1, false which expands to the integer constant 0, and __bool_true_false_are_defined which expands to the integer ... <truncated; https://0x0.st/-C7V.txt>
[10:24:31] <caze> ,c11 6.7.9p10
[10:24:33] <candide> http://www.iso-9899.info/n1570.html#6.7.9p10 [Initialization] If an object that has automatic storage duration is not initialized explicitly, its value is indeterminate. If an object that has static or thread storage duration is not initialized explicitly, then: -- if it has pointer type, it is initialized to a null pointer; -- if it has arithmetic type, it is initialized to (positive or unsigned) zero; -... <truncated; https://0x0.st/-C7W.txt>
[10:24:35] <NRK[m]> ayy, that worked
[10:27:41] <NRK[m]> yeah, pastebin doesn't seem to be working for me at all.
[10:27:46] <NRK[m]> probably my ISP or dns
[10:27:54] <caze> smallville7123: Your version is notably worse than the original.
[10:28:03] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 256 seconds)
[10:28:16] <caze> smallville7123: Did you not note the careful way in which he calculated if there's available space?
[10:28:29] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[10:28:29] <caze> smallville7123: if(allocbuf + ALLOCSIZE - allocp >= n)
[10:28:54] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[10:29:01] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[10:29:28] <smallville7123> fixed dealloc
[10:29:40] <caze> smallville7123: And you just do: alloc_pointer += n;
[10:30:41] <caze> smallville7123: Oh, and then afterwards you do the test - if (alloc_pointer < alloc_pointer_end)
[10:31:00] <caze> smallville7123: You should be learning from his code first, before trying to improve it.
[10:31:23] <caze> smallville7123: You're making it worse. You don't understand what you're doing.
[10:31:57] <smallville7123> fixed again
[10:32:10] <caze> smallville7123: What are you fixing?
[10:32:32] <pony> Just one fix
[10:32:33] <caze> smallville7123: You don't understand what you're doing wrong. So what are you fixing?
[10:32:41] *** Quits: critr (~critr@user/critr) (Quit: .)
[10:32:48] <smallville7123> rewritten to      int max = ALLOC_SIZE - n;    for (int i = 0; i < max; i++) {       // (i + n) == ALLOC_SIZE cannot be true since ALLOC_SIZE results in buffer overflow
[10:33:05] <caze> Oh I didn't even see there's a v2.
[10:33:07] <caze> lol
[10:33:10] <smallville7123> lol
[10:33:20] <caze> smallville7123: Do you understand why your v1 is fucked up?
[10:33:40] <NRK[m]> there's nothing to be "fixed" in that code. it's literally from the C bible
[10:34:15] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[10:34:21] <caze> smallville7123: Do you understand why this is correct: if(allocbuf + ALLOCSIZE - allocp >= n)
[10:34:32] <caze> smallville7123: And this is not: alloc_pointer += n; if (alloc_pointer < alloc_pointer_end) {
[10:34:44] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[10:35:35] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[10:35:37] *** Quits: bu5hyt0p_ (~rmsare@2601:281:c780:a510:6d40:63c6:3a27:e5b8) (Ping timeout: 240 seconds)
[10:35:57] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 240 seconds)
[10:36:15] <smallville7123> if      alloc_pointer == &alloc_buf[0]    then if      alloc_pointer += ALLOC_SIZE    and     alloc_pointer_end = alloc_buf + ALLOC_SIZE      then     alloc_pointer == alloc_pointer_end
[10:36:30] <smallville7123> we want one less then that to avoid a buffer overflow
[10:37:16] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[10:37:25] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 268 seconds)
[10:37:50] <smallville7123> NRK[m]: and yes there is
[10:38:04] <NRK[m]> what's wrong with it?
[10:38:11] *** Joins: johnnyreb (~tth@user/johnnyreb)
[10:38:31] <caze> smallville7123: Here is an example: int a[1]; int *p = a; p += 2; p -= 2; This code is broken, do you know why?
[10:38:45] <smallville7123> eg char * a = alloc(5); afree(a); // how do we deallocate this such that it is UB to read from/write to `a` after?
[10:38:47] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[10:39:15] <smallville7123> since the address of `a` could be reused by another allocation
[10:40:51] <NRK[m]> i don't get it
[10:40:58] <caze> smallville7123: 1)"address of `a`" or 2) "address stored in `a`"
[10:41:00] <caze> Pick one.
[10:41:21] <smallville7123> also if we do        char * a = alloc(5); char * b = alloc(5); afree(a); char * c = alloc(10); // will fail since next free is &alloc[0] but it is not large enough as it is being consumed by `b` which sits at &alloc[4]
[10:41:42] <smallville7123> also if it DID work then c and b would overlap
[10:41:58] <NRK[m]> yes, that's how stack based allocator works
[10:42:19] <NRK[m]> when you free a, you're also freeing everything that was allocated after a
[10:42:28] <smallville7123> yes
[10:42:49] <smallville7123> wait so b willl ALSO be freed?
[10:42:58] <smallville7123> even if it is not explicitly freed?
[10:43:27] <NRK[m]> yes. it's stack based allocator afterall.
[10:43:28] <smallville7123> eg   char * a = alloc(5); char * b = alloc(5); afree(a); // now UB to read from/write to b
[10:44:52] <smallville7123> NRK[m]: then wtf is the point of allowing multiple allocations?
[10:45:20] <pony> 8:09 PM <caze> smallville7123: Here is an example: int a[1]; int *p = a; p += 2; p -= 2; This code is broken, do you know why?
[10:45:22] <pony> whY?
[10:45:55] <pony> why? *
[10:46:14] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 260 seconds)
[10:46:31] <smallville7123> someone could do     char * root = alloc(5);        /* bunch of other allocations not related */    afree(root); // BAM, all other allocations are now invalid and UB to use as any further allocations will overwrite all other allocations
[10:46:41] *** Joins: Colt (~Colt@user/colt)
[10:48:09] <NRK[m]> smallville7123 it's an example in the C bible
[10:48:32] <smallville7123> pony: nope since if a == 0x0 then p += 2 = 0x0 += 0x2 = 0x2 and p -= 2 = 0x2 -= 0x2 = 0x0
[10:49:01] <pony> i was asking caze
[10:49:03] *** Quits: zeroes (~fitangu@88-112-72-100.elisa-laajakaista.fi) (Quit: leaving)
[10:49:31] <smallville7123> NRK[m]: still
[10:51:13] <smallville7123> ANYWAY
[10:51:22] <pony> caze has me interested about this
[10:51:30] <smallville7123> in "foo(x) x y"    "x" expands to "y" then this "y" is not expanded again, but the other "y" in "x y" CAN be expanded, right?
[10:51:47] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:52:09] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[10:52:19] <smallville7123> in "#define y y \n #define foo(x) x y \n foo(y)"    "x" expands to "y" then this "y" is not expanded again, but the other "y" in "x y" CAN be expanded, right?   *
[10:52:43] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:52:50] <smallville7123> ughhh fuck single lines
[10:53:24] <caze> smallville7123: Wrong.
[10:53:50] <smallville7123> in https://godbolt.org/z/Kco7E4drY    "x" expands to "y" then this "y" is not expanded again, but the other "y" in "x y" CAN be expanded, right?   *
[10:53:50] <caze> pony: Here is a simpler example. int a[1]; int *p = a; p + 2;
[10:54:08] <caze> pony: The calculation p + 2 invokes UB.
[10:54:11] <smallville7123> caze: THAT is UB since it results in UB
[10:54:25] <caze> smallville7123: Thanks.
[10:54:29] <pony> ahh
[10:54:45] <smallville7123> eg p + 2 is the same as a[2]
[10:54:52] <caze> It is not.
[10:54:53] <pony> no
[10:55:00] <smallville7123> eg p + 2 is the same as &a[2]     *
[10:55:03] <pony> a[2] is a derefence
[10:55:13] <dave0> pony: you are not allowed to construct a pointer that is not NULL, or points outside an object (with the exception of pointing to just past the last element, but in that case you are not allowed to dereference it)
[10:55:29] <pony> I didn't know + itself could invoke UB, though, thanks
[10:55:30] <NRK[m]> u can only go 1 past the array bound
[10:55:35] <dave0> pony: even temporarily
[10:55:59] <smallville7123> eg *(p + 2) is the same as a[2]           *
[10:56:10] <caze> So in my original example, int a[1]; int *p = a; p += 2; p -= 2; The UB calculation is performed and store in p. Subtracting 2 from p after the fact does not "undo" the UB.
[10:56:12] <NRK[m]> int a; int *p = &a; p += 1; /* this should be fine */
[10:56:28] <pony> caze: i understand
[10:56:36] <smallville7123> pony: + itself cannot invoke UB
[10:56:47] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[10:56:55] <smallville7123> it is only when you attempt to dereference the result
[10:56:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[10:56:59] <pony> nope
[10:57:05] <caze> smallville7123: Wrong again, friend.
[10:57:13] <dave0> pony: you can save headaches by doing arithmetic on int's, and indexing the array with that int
[10:57:14] <NRK[m]> kek
[10:57:22] <caze> smallville7123: Maybe pay attention to what other folks are saying.
[10:57:23] <pony> dave0: ;)
[10:57:30] *** Quits: dumdedums (~dumdedums@user/dumdedums) (Quit: Leaving)
[10:57:50] <NRK[m]> or just skim through the standard
[10:57:58] <NRK[m]> atleast c89 isn't too big
[10:58:03] <dave0> c goes out of it's way to make pointers not just a number
[10:58:09] *** Joins: Enitin (~Enitin@82.102.22.86)
[10:58:11] <pony> its
[10:58:14] <pony> it's is short for it is
[10:58:18] <smallville7123> eg int a; int * p = &a; p ++; // perfectly valid but dereferencing may result in a garbage value
[10:58:21] <dave0> oh right thanks :-)
[10:58:51] <NRK[m]> smallville7123 that's not the same as caze's example
[10:59:01] <caze> smallville7123: p + 1 one more time after that triggers UB.
[10:59:01] <smallville7123> still is
[10:59:07] <NRK[m]> ,recall nrk 1 past
[10:59:08] <candide> I don't know anybody named nrk.
[10:59:09] <pony> I think that fits into the "one past the end" allowance
[10:59:25] <NRK[m]> wow, candide is rude to me :(
[10:59:29] <caze> smallville7123: My example uses + 2, not + 1.
[10:59:48] <smallville7123> eg int a[1]; int * p = &a[0]; p ++; // perfectly valid but dereferencing may result in a garbage value
[10:59:51] <pony> int i; int *p = &i; p += 2; would be UB
[11:00:19] <smallville7123> pony: so would += 1
[11:00:21] <pony> int i; int *p = &i; p += 1; would not
[11:01:03] <smallville7123> it is not garenteed that the address of a variable is followed by a VALID address
[11:01:19] <dave0> smallville7123: i think you're making it up as you go
[11:01:23] <caze> smallville7123: It is.
[11:01:51] <caze> smallville7123: int i; int *p = &i; p = p + 1; /* this is okay */
[11:01:58] <caze> smallville7123: int i; int *p = &i; p = p + 1; p = p + 1; /* this is not okay */
[11:02:06] <smallville7123> or rather it is not gaurenteed that the address next to the address of a variable will CONTAIN a valid value
[11:02:18] <pony> huh
[11:02:19] <caze> smallville7123: Addresses don't contain values.
[11:02:27] <caze> smallville7123: Objects contain values.
[11:02:36] <smallville7123> in memory they do
[11:02:59] <caze> smallville7123: No, you're not reading carefully. You're not good at reading.
[11:03:14] <pnbeast> In memory of Elizabeth Reeding?
[11:03:17] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[11:03:20] <caze> Objects have addresses. Objects contain values.
[11:03:32] <caze> Not all addresses are associated with objects.
[11:03:36] *** Joins: de-facto (~de-facto@user/de-facto)
[11:03:50] <pony> 123 Fake st
[11:03:50] <smallville7123> if an address +1 is equal to the value of address then how tf does contigious address work
[11:03:51] <caze> So you can generate a valid address, but not have an object be there.
[11:03:58] <smallville7123> contigious memory*
[11:04:06] <caze> smallville7123: C doesn't have contiguous memory.
[11:04:17] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 240 seconds)
[11:04:30] <dave0> you could argue that an array is contiguous memory
[11:04:35] <caze> smallville7123: The C memory model is very heavily segmented.
[11:04:43] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[11:04:44] <pony> did someone once say that all objects belong to some array
[11:04:47] <smallville7123> imma just assume pointer arithmetic is automatically SKIPPING all values
[11:04:52] <caze> smallville7123: So segmented in fact, that every object is in its own memory segment.
[11:05:02] <dave0> there's probably no relation between addresses of distinct objects, but now it's in c standard territory which i don't know
[11:05:03] <pony> e.g. int i; i belongs to some int[1]
[11:05:22] <caze> pony: Yes. In the semantics of the + operator.
[11:05:32] <NRK[m]> smallville7123 stop assuming things
[11:05:45] <nitrix> CaZe's wording has been carefully chosen in these sentences, more so than first meet the eye. I'd lean on that as your starting point instead of assuming.
[11:06:18] *** Quits: gce108 (~gce@user/gce108) (Ping timeout: 260 seconds)
[11:06:28] <caze> ,c11 6.5.6p7
[11:06:29] <candide> http://www.iso-9899.info/n1570.html#6.5.6p7 [Additive operators] For the purposes of these operators, a pointer to an object that is not an element of an array behaves the same as a pointer to the first element of an array of length one with the type of the object as its element type.
[11:06:40] <nitrix> It's perhaps as layman as you can get without actually quoting the standard.
[11:06:40] <caze> pony: ^
[11:06:51] <smallville7123> imma just assume that     MEMORY: 0x214320, 0x000001, 0x214324, 0x0   INTERP:   0x214320 = a[0] and p, 0x214324 = a[1] and p+1
[11:07:03] <DPA> It's not much use though. Harvard architectures still need stuff like __flash to address different memories.
[11:07:04] *** Joins: BlueShark (sid10311@user/blueshark)
[11:07:11] <smallville7123> imma just assume that     MEMORY: 0x214320, 0x000001, 0x214324, 0x0   INTERP:   0x214320 = &a[0] and p, 0x214324 = &a[1] and p+1
[11:07:18] <pony> caze: ok cool
[11:07:29] *** Joins: de-facto (~de-facto@user/de-facto)
[11:07:43] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[11:07:51] <pony> smallville7123: what does that all mean?
[11:08:01] <smallville7123> eg p = 0x214320 and *p = 0x000001
[11:08:16] <smallville7123> and eg &a[0] = 0x214320 and a[0 = 0x000001
[11:08:31] <smallville7123> and eg &a[0] = 0x214320 and a[0] = 0x000001     *
[11:09:02] <dave0> there's no rule that your microcontroller's c compiler conforms to the standard :-) your vendor could add guarantees about ram or flash or i/o :-)
[11:09:04] <smallville7123> assuming p == a
[11:09:29] <smallville7123> dave0: well there has to be SOME way C maps all this
[11:09:31] *** Quits: alicef (~none@gentoo/developer/alicef) (Quit: install gentoo)
[11:10:02] <dave0> smallville7123: check your compiler's documentation
[11:10:16] *** Joins: alicef (~none@gentoo/developer/alicef)
[11:10:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[11:10:38] *** Joins: Enitin (~Enitin@82.102.22.85)
[11:11:00] <caze> smallville7123: So the way you check for the requested allocation being small enough is incorrect. You do: alloc_pointer += n;
[11:11:14] <caze> And then check afterwards: if (alloc_pointer < alloc_pointer_end)
[11:11:39] <caze> smallville7123: As we've jsut discussed, if n is too large, then doing alloc_pointer += n triggers UB.
[11:12:01] <caze> smallville7123: It's irrelevant if you do the check afterards. UB can't be "undone".
[11:12:29] <caze> smallville7123: Look again at the original code and see how they get around this.
[11:14:08] <nitrix> It's similar to how you would prevent/detect integer overflows, the methodology transfers quite well to pointer arithmetic.
[11:14:46] <DPA> You can always just cast a pointer to uintptr_t, though,
[11:15:09] <caze> It's amazing how he went off and wrote two, maybe three versions to "fix" it before he understood it.
[11:15:47] <caze> DPA: That's hardly ever useful.
[11:16:36] <caze> Before he even understood what a stack based allocator is, even.
[11:17:02] *** Quits: ISO-4683-1 (~ISO-4683-@user/isodt) (Remote host closed the connection)
[11:17:51] <smallville7123> "Each memory location in a stored-program computer holds a binary number or decimal number of some sort. Its interpretation, as data of some data type or as an instruction, and use are determined by the instructions which retrieve and manipulate it. "
[11:17:51] <DPA> char a[1]; uintptr_t b = ((uintptr_t)a) + 2; // <-- This is technically not ub.
[11:17:57] <smallville7123> is this ALWAYS true?
[11:18:51] *** Joins: Viewday118 (~Viewday@user/viewday)
[11:18:57] <dave0> it's not even true on x86
[11:19:13] <dave0> x86 has i/o ports and instructions
[11:19:24] <dave0> in a sense it's a separate address space
[11:19:53] <pony> doesn't mean + works like you think it does
[11:19:55] <smallville7123> https://en.wikipedia.org/wiki/Memory_address
[11:20:02] <smallville7123> this is confusing ;-;
[11:20:23] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[11:20:23] *** Viewday118 is now known as Viewday11
[11:20:30] <nitrix> C prefers describing the "representations" of values, and the values are usually given "types" or "effective types" in the worst cases.
[11:21:03] <caze> DPA: It's well defined, even if &a[0] has the value of UINTPTR_MAX - 1.
[11:21:38] <caze> DPA: But doing char *c = (char *) b is ID.
[11:22:40] <smallville7123> caze: you did not metion overflow -_-
[11:23:03] <caze> smallville7123: Overflow is irrelevant. Unsigned types do not overflow.
[11:23:04] <smallville7123> since OF COURSE doing p += n will be UB only IF it overflows 
[11:23:29] <caze> smallville7123: I don't know what example you're talking about now.
[11:23:29] <smallville7123> caze: yes they do, they wrap back around to 0
[11:23:37] <caze> smallville7123: That is not overflow.
[11:23:40] <nitrix> That's not an overflow.
[11:23:45] <smallville7123> UINT_MAX + 1 == 0
[11:23:56] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[11:23:56] <caze> smallville7123: That is not called what you think it is called.
[11:24:41] <smallville7123> underflow then
[11:24:57] <caze> smallville7123: Nope.
[11:25:00] <nitrix> That's also a different thing.
[11:25:00] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:25:12] <NRK[m]> p += n has nothing to do with overflow
[11:25:26] <caze> ,c11 6.2.5p9
[11:25:27] <candide> http://www.iso-9899.info/n1570.html#6.2.5p9 [Types] The range of nonnegative values of a signed integer type is a subrange of the corresponding unsigned integer type, and the representation of the same value in each type is the same.41) A computation involving unsigned operands can never overflow, because a result that cannot be represented by the resulting unsigned integer type is reduced modulo the numb... <truncated; https://0x0.st/-C7U.txt>
[11:25:33] <smallville7123> well it definitely is not a buffer overflow
[11:25:46] <smallville7123> since you need not ACCESS the buffer
[11:25:50] <caze> "A computation involving unsigned operands can never overflow,..."
[11:26:04] <NRK[m]> do u understand that going more than 1 past the array bound is UB??
[11:26:31] <smallville7123> yes
[11:26:31] <caze> He seemed to awhile ago, but then he seemed not to.
[11:26:41] <smallville7123> btu onyl if you ACCESS it
[11:26:47] <NRK[m]> no
[11:26:50] <caze> smallville7123: No you are incorrect.
[11:27:01] <NRK[m]> that's irrelevant
[11:27:06] <caze> smallville7123: Merely calculating the invalid address triggers UB.
[11:27:22] <NRK[m]> look up the rules on pointer arithmetic, there's only as handful
[11:27:24] <caze> smallville7123: int a[1]; a + 2;
[11:27:25] <smallville7123> how tf does that work
[11:27:31] <NRK[m]> s/as/a/
[11:27:46] <caze> smallville7123: Yes, read carefully. I wrote just a + 2;
[11:27:54] <caze> This is enough to trigger UB.
[11:28:01] <nitrix> You're right for ptr+1, dereferencing it would be out-of-bounds and have UB. But also, creating an address that is beyond ptr+1 is also UB.
[11:28:26] <dave0> smallville7123: it may help if you think of undefined behaviour as analogy to dividing by zero
[11:28:35] <caze> smallville7123: Maybe this is easier for you to read. https://ideone.com/PpNFcT
[11:29:00] <caze> smallville7123: The statement a + 2, which performs the calculation a + 2, and then discards the result, this alone triggers UB.
[11:29:14] <caze> smallville7123: I'm not even assigning it to anything.
[11:29:41] <nitrix> Heck, I would just create ptr+SIZE_MAX if nothing stopped me. There must be some bounds, and spoiler, it's not the memory capacity of the system, since C's memory isn't contiguous. So next best thing is the bounds of individual objects.
[11:29:42] <DPA> UB used by the compiler to make decisions before the program runs. If the compiler notices something is UB, it can decide to do anything. It is allowed to make the PC explode, if it wanted to.
[11:30:07] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[11:30:17] <NRK[m]> under c99 and above, yes.
[11:30:38] <DPA> But also, even if the compiler soens't know if UB triggers, it can still just not generate correct code for those cases.
[11:30:42] <pony> it could pee in your letterbox
[11:30:44] <DPA> *doesn't
[11:30:55] <NRK[m]> undefined behavior had a slightly different meaning under c89
[11:31:01] <caze> It can assume that you don't write code that triggers UB, and pretend that you wrote code that does something else.
[11:31:31] *** Joins: Viewday116 (~Viewday@user/viewday)
[11:31:40] <pony> did this universe come from a program with UB?
[11:31:46] <pony> would explain some things
[11:31:58] <nitrix> turtles.c
[11:32:38] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[11:32:40] <NRK[m]> https://archive.md/22L0K <-- nice article on UB
[11:32:44] <caze> For instance, if (alloc_pointer < alloc_pointer_end) the compiler can just pretend that this is: if (1)
[11:32:48] <DPA> I'll never forgive the compiler dev who omitted ret when a programmer forgot to write return, though. That was evil.
[11:32:57] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[11:32:57] *** Viewday116 is now known as Viewday11
[11:34:42] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[11:34:56] * smallville7123 cannot find anything online giving a good reason as to why it is UB to compute a pointer to memory you do not own
[11:35:21] <NRK[m]> because the C standard doesn't define it
[11:35:27] <nitrix> Because pointers are handles, they aren't numbers.
[11:35:36] <pony> smallville7123: you can't actually do that though
[11:35:43] <pony> that's not what a + 2 is
[11:35:47] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[11:36:08] <nitrix> They represent a resource. Without a resource, you don't have a stable way of generating or recovering the handle.
[11:36:10] <dave0> smallville7123: maybe there is no reason? it doesn't really matter
[11:36:31] <dave0> smallville7123: it's just the rules of the game
[11:36:38] <smallville7123> if i do a+2 will the pointer automaticallt CHECK if it's address is a valid address ?
[11:36:46] <NRK[m]> also don't google anything related to C
[11:36:48] <smallville7123> excluding 0
[11:37:12] <caze> smallville7123: That would be defining the behavior, if it did that.
[11:37:13] <pony> smallville7123: what happens in mathematics when you divide by 0?
[11:37:22] <dave0> smallville7123: no, it assumes it's so and optimizes based on that
[11:37:23] <smallville7123> eg int * p = 0x32522366 // crash, 0x32522366 is NOT a valid address
[11:37:36] <nitrix> smallville7123, Consider a C interpreter whose objects are serialized and read/written to a database. Only the valid objects would have row increment ids.
[11:37:44] <smallville7123> eg int * p = 0x32522366 // may crash if 0x32522366 is NOT a valid address       *
[11:38:24] <smallville7123> vs
[11:38:38] <caze> smallville7123: Do you know what an address bus is? Have you ever heard of a bus error?
[11:38:38] <smallville7123> int * p = 0x32522364; p += 2 // may crash if 0x32522366 is NOT a valid address       *
[11:38:52] <smallville7123> nope
[11:39:03] <dave0> smallville7123: it's not about checking... the rules say programmers are not allowed, and compilers assume programmers follow the rules
[11:39:20] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:39:42] <caze> smallville7123: https://en.wikipedia.org/wiki/Bus_error
[11:39:46] <dave0> some languages check that you follow the rules.. c doesn't
[11:40:32] <nitrix> smallville7123, You assume the pointer is a number and that you can arbitrarily add/subtract to the number, but the number could contain various informations packed, like the ID of a file and an offset in the file.
[11:43:22] <smallville7123> rip
[11:43:23] <smallville7123> "Software instructs the CPU to read or write a specific physical memory address. Accordingly, the CPU sets this physical address on its address bus and requests all other hardware connected to the CPU to respond with the results, if they answer for this specific address. If no other hardware responds, the CPU raises an exception, stating that the requested physical address is unrecognized by the whole computer sy
[11:43:23] <smallville7123> stem"
[11:43:55] *** Joins: mattil (~mattil@helsinki.portalify.com)
[11:44:03] <smallville7123> so pointers must be able to DEREFERENCE an address that they get assigned? excluding NULL
[11:44:16] <nitrix> Maybe it's a hardened system and the pointer is hashed, or encrypted/decrypted by some runtime. They represent handles with very carefully limited object-centric arithmetic.
[11:44:33] *** Joins: Rounin (~david@84.212.130.215)
[11:44:49] <smallville7123> so pointers must be able to READ an address that they get assigned?     *
[11:45:07] <nitrix> Wikipedia wont get you anywhere for this.
[11:45:20] <pony> pointers aren't necessarily hardware addresses either
[11:45:29] <nitrix> C isn't hardware period.
[11:45:30] <caze> smallville7123: That was just to give you a real world example of why you can't generate random address values.
[11:45:33] <smallville7123> nitrix: they are, they simply point to stuff
[11:45:35] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:46:02] <caze> smallville7123: This is what C actually says:
[11:46:13] <smallville7123> pointer's are literally just addresses that point to something
[11:46:15] <caze> smallville7123: ,c11 6.5.6p8
[11:46:16] <NRK[m]> pony: on any modern system pointers don't point to physical memory
[11:46:16] <candide> smallville7123: http://www.iso-9899.info/n1570.html#6.5.6p8 [Additive operators] When an expression that has integer type is added to or subtracted from a pointer, the result has the type of the pointer operand. If the pointer operand points to an element of an array object, and the array is large enough, the result points to an element offset from the original element such that the difference of the subs... <truncated; https://0x0.st/-C7h.txt>
[11:47:13] <smallville7123> so if this errors ONLY If the pointer operand points to an element of an array object
[11:47:14] *** Quits: soapsudsxx (~soapsudsx@209.221.40.139) (Remote host closed the connection)
[11:47:32] <smallville7123> the void * p = a; p += 2; // no UB since p is NOT an array
[11:47:47] <NRK[m]> facepalm
[11:47:47] <caze> smallville7123: Every object is an element of an array.
[11:48:11] <caze> smallville7123: Also in that example, it's not p that you're concerned with. It's the address of a.
[11:48:22] <smallville7123> and if it does, then
[11:48:44] <caze> smallville7123: ,c11 6.5.6p7
[11:48:44] <candide> smallville7123: http://www.iso-9899.info/n1570.html#6.5.6p7 [Additive operators] For the purposes of these operators, a pointer to an object that is not an element of an array behaves the same as a pointer to the first element of an array of length one with the type of the object as its element type.
[11:48:53] <smallville7123> the void * p = a; void * p2 = p; p2 += 2; // no UB since p2 does not point directly to an array
[11:49:23] <smallville7123> since p2 is neither an array nor points directly to an array *
[11:49:26] <caze> Why do you even have a in that example?
[11:49:37] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[11:49:38] <smallville7123> to signify that a is an array
[11:49:53] <caze> smallville7123: Did you read what I just pasted?
[11:50:05] <smallville7123> yes
[11:50:09] <caze> smallville7123: Please read. Read carefully.
[11:50:48] <caze> smallville7123: "a pointer to an object that is not an element of an array behaves the same as a pointer to the first element of an array..."
[11:51:00] <caze> smallville7123: Do you understand that that means?
[11:51:02] * smallville7123 gives up on trying to understand
[11:51:07] <pony> smallville7123: don't give up!
[11:51:15] <caze> smallville7123: It means that everything is effectively contained in an array.
[11:51:21] <pony> you'll get the C mindset eventually
[11:51:26] <nitrix> People have walked your steps before. They have answers to share. It'd be so much easier for you if you accepted them.
[11:51:36] <caze> smallville7123: Do you remember what I said earlier about the C memory model being segmented?
[11:51:38] <nitrix> You're making it harder by guessing and resisting.
[11:51:53] <smallville7123> 18:20:49 caze: smallville7123: "a pointer to an object that is not an element of an array behaves the same as a pointer to the first element of an array..."
[11:51:55] <caze> > smallville7123: The C memory model is very heavily segmented.
[11:52:00] <caze> > smallville7123: So segmented in fact, that every object is in its own memory segment.
[11:52:13] <smallville7123> so int * a is the same as a[1] ?
[11:52:18] <smallville7123> so int * a is the same as int a[1] ?
[11:52:28] <nitrix> > nitrix: [...] They represent handles with very carefully limited object-centric arithmetic.
[11:52:28] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[11:52:36] <caze> No, a is an element of an array oc int *.
[11:52:49] <smallville7123> is int a the same as a[1]
[11:52:57] <caze> No.
[11:53:01] <NRK[m]> ,cc int a = 5, b = 10; printf("%d\n", *(a+1));
[11:53:02] <candide> NRK[m]: error: invalid type argument of unary '*' (have 'i​nt')
[11:53:05] <caze> int *array[1];
[11:53:11] <NRK[m]> oops
[11:53:13] <nitrix> No. Only for the purpose of the additive operators.
[11:53:15] <caze> a is an element of array.
[11:53:20] <NRK[m]> ,cc int a = 5, b = 10; printf("%d\n", *(&a+1));
[11:53:23] <candide> NRK[m]:  runtime error: load of address 0x7fffffffe28c with insufficient space for an object of type 'i​nt'  10
[11:53:28] <smallville7123> oop
[11:53:49] <smallville7123> didnt know you could get that error
[11:54:03] <NRK[m]> i think candide is running some sanitizer
[11:54:10] <smallville7123> :)
[11:54:12] <NRK[m]> i was expecting it to print 10
[11:54:21] <caze> smallville7123: Contrast these two statements: "a is an array."
[11:54:31] <caze> smallville7123: "a is contained inside of an array."
[11:54:48] *** Joins: inlight (~inlight@157.42.202.171)
[11:54:48] *** Quits: inlight (~inlight@157.42.202.171) (Changing host)
[11:54:48] *** Joins: inlight (~inlight@user/inlight)
[11:54:56] *** Joins: Viewday112 (~Viewday@user/viewday)
[11:55:01] <caze> smallville7123: Example; int a[3]; a is an array. a[0] is contained inside of an array.
[11:55:11] <caze> a and a[0] are not the same thing.
[11:55:22] <caze> Being an array, and being inside of an array are not the same thing.
[11:55:46] <smallville7123> is int a; equivilant to in C++ int a_tmp[1]; int & a = a_tmp[0];
[11:55:59] <smallville7123> but just abstracted away in C
[11:56:14] <caze> ...
[11:56:15] <pony> you're just asking if int a; means that a belongs to some int[1], right?
[11:56:22] <smallville7123> and a_tmp is managed by the compiler
[11:56:28] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[11:56:28] *** Viewday112 is now known as Viewday11
[11:56:44] <pony> s/belongs/is an element of/
[11:57:10] <smallville7123> eg int a; int * p = &a; p += 2 ; // UB as p is equivilant to int a[1]
[11:57:40] <caze> p points into an int[1] that does not have a name.
[11:57:51] <smallville7123> yea
[11:58:20] <nitrix> (A would be separate object, in its own segmented memory space)
[11:58:32] <smallville7123> caze: its basically that, right?
[11:58:50] <caze> smallville7123: Yes, but don't transfer the identifier to the containing array.
[11:59:02] <smallville7123> ok :)
[11:59:16] <pony> 👍
[11:59:28] <smallville7123> UNICODE!
[12:00:00] <NRK[m]> okay, i figured out how to turn off the sanitizer
[12:00:03] <smallville7123> anyway imma just leave it at that :)
[12:00:06] <NRK[m]> observe
[12:00:08] <NRK[m]> ,cc -O0 int a = 5, b = 10; printf("%d\n", *(&a+1));
[12:00:10] <candide> NRK[m]: 10
[12:00:14] <NRK[m]> :)
[12:00:23] <nitrix> It printed 10 earlier already.
[12:00:23] <smallville7123> ,cc -O1 int a = 5, b = 10; printf("%d\n", *(&a+1));
[12:00:26] <candide> smallville7123: 0
[12:00:29] <caze> ,cc paste
[12:00:29] <smallville7123> lol
[12:00:32] <candide> caze: https://0x0.st/-Chr.txt
[12:00:41] <NRK[m]> it did? i got an erro
[12:01:01] <NRK[m]> oh, it did.
[12:01:03] <nitrix> You got a warning, followed by 10. The newlines are stripped.
[12:01:03] <NRK[m]> i missed it
[12:01:21] <smallville7123> why do i get   18:30:26 candide: smallville7123: 0
[12:01:27] <caze> ,cc int a = 5, b = 10; printf("%d\n", *(&a+1));
[12:01:30] <candide> caze:  runtime error: load of address 0x7fffffffe28c with insufficient space for an object of type 'i​nt'  10
[12:01:31] <caze> ,cc paste
[12:01:35] <candide> caze: https://0x0.st/-Chs.txt
[12:01:38] <smallville7123> ,cc -O2 int a = 5, b = 10; printf("%d\n", *(&a+1));
[12:01:41] <candide> smallville7123: 0
[12:01:43] <smallville7123> ,cc -O3 int a = 5, b = 10; printf("%d\n", *(&a+1));
[12:01:46] <candide> smallville7123: 0
[12:01:49] <smallville7123> oof
[12:01:56] <NRK[m]> because it's undefined behavior
[12:01:59] <smallville7123> rip optimizations
[12:02:23] <smallville7123> :)
[12:02:29] <caze> Why are you doing &a + 1
[12:02:42] <caze> oh nvm
[12:02:50] <caze> I still had the array example in my head.
[12:03:13] *** Joins: mrig (~AdiIRC@user/mrig)
[12:03:47] <caze> smallville7123: So anyway, now that you understand why your fix is worse, you can look at how the original code gets around this problem.
[12:03:58] <caze> if(allocbuf + ALLOCSIZE - allocp >= n){
[12:04:12] <nitrix> caze, Do you also know which clauses explains the scenario where your UB &a+2 just so happens to accidently fall onto a valid object?
[12:04:16] *** Joins: ppt (~yulung@211-21-14-99.hinet-ip.hinet.net)
[12:04:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[12:04:40] <smallville7123> i dont intend for it to be perfect
[12:04:40] <caze> nitrix: What do you mean?
[12:04:53] <caze> smallville7123: Yeah, but you made it worse.
[12:04:56] <NRK[m]> if it was explained then it wouldn't be UB
[12:05:01] <pony> UB can just so happen to do anything
[12:05:04] <smallville7123> nor do i intend for it to actually work :)
[12:05:25] <caze> smallville7123: How does allocbuf + ALLOCSIZE - allocp >= n avoid the problem?
[12:05:56] <smallville7123> idk
[12:06:14] <smallville7123> ,english allocbuf + ALLOCSIZE - allocp >= n
[12:06:15] <candide> smallville7123: `allocbuf` plus `ALLOCSIZE` minus `allocp` is greater than or equal to `n`.
[12:06:23] <smallville7123> rip english
[12:06:28] <caze> smallville7123: https://pastebin.com/y3E7NPfH
[12:06:34] <NRK[m]> because how pointer subtraction works
[12:06:44] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Read error: Connection reset by peer)
[12:07:15] <smallville7123> ,english https://0x0.st/-Chr.txt
[12:07:15] <candide> smallville7123: error: label at end of compound statement
[12:07:21] <caze> smallville7123: The beginning of the buffer is allocbuf. Its entire size is ALLOCSIZE. The next available spot is allocp.
[12:07:29] <smallville7123> rip it cant englishify a paste site
[12:08:15] <nitrix> caze, I'm assuming it was for nested arrays, I don't think they are other aggregates that can both be nested and contiguous.
[12:08:17] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 240 seconds)
[12:08:35] <pony> what should I know about pointer subtraction?
[12:08:43] <caze> smallville7123: You first figure out how much free space you have available by performing pointer arithmetic. allocbuf + ALLOCSIZE is the end of the array. allocp is how far into the array you've used up.
[12:08:59] <nitrix> caze, But then I imagine the outermost object is the one that overrules the "allowed boundaries" of the pointer arithmetic?
[12:08:59] <caze> allocbuf + ALLOCSIZE - alloco is how much space you have available.
[12:09:36] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:09:52] <NRK[m]> ,c99 6.5.6p9
[12:09:53] <caze> nitrix: Oh are you talking about the array example?
[12:09:54] <candide> http://www.iso-9899.info/n1256.html#6.5.6p9 [Additive operators] When two pointers are subtracted, both shall point to elements of the same array object, or one past the last element of the array object; the result is the difference of the subscripts of the two array elements. The size of the result is implementation-defined, and its type (a signed integer type) is ptrdiff_t defined in the <stddef.h> head... <truncated; https://0x0.st/-Cho.txt>
[12:10:08] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[12:10:16] <NRK[m]> smallville7123 ^ here's your clue on why the original code works
[12:10:31] *** Quits: mrig (~AdiIRC@user/mrig) (Remote host closed the connection)
[12:10:44] *** Joins: mrig (~AdiIRC@user/mrig)
[12:10:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[12:11:58] <nitrix> caze, I don't know if you see what I mean. The bounds aren't exactly the most current object you started with, you have a little bit more wiggle room to the parent objects if they just so happen to be arrays as well.
[12:12:32] <caze> smallville7123: In your V1, the equivalent you would do is this: if (alloc_pointer_end - alloc_pointer > n)
[12:12:39] *** Quits: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net) (Quit: WeeChat 2.7.1)
[12:13:17] <caze> nitrix: You can't escape from whatever array you started in.
[12:13:24] <smallville7123> caze: :)
[12:13:31] <smallville7123> in https://godbolt.org/z/Kco7E4drY     "x" expands to "y" then this "y" is not expanded again, but the other "y" in "x y" CAN be expanded, right?
[12:13:45] <caze> There's even a footnote that explicitly mentions it.
[12:13:55] <caze> ,c11 apparently accessible
[12:13:56] <candide> http://www.iso-9899.info/n1570.html#J.2p1 [Undefined behavior] The behavior is undefined in the following circumstances: -- A ``shall'' or ``shall not'' requirement that appears outside of a constraint is violated (clause 4). -- A nonempty source file does not end in a new-line character which is not immediately preceded by a backslash character or ends in a partial preprocessing token or comment (5.1.1.2... <truncated; https://0x0.st/-ygr.txt>
[12:13:58] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[12:14:20] <smallville7123> in https://godbolt.org/z/YPr6f9bEh     "x" in "x y" expands to "y" then this "y" is not expanded again, but the other "y" in "x y" CAN be expanded, right?   *
[12:14:46] <nitrix> caze, int x[2][3]. x[0] is an array and also an object. Yet I don't think &x[0] + 2 would be UB.
[12:15:19] <pony> happens to work doesn't mean not UB
[12:15:39] <nitrix> I did not write happens to work. I'm claiming it's not UB.
[12:15:48] *** Joins: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com)
[12:16:12] <caze> nitrix: Well there is a valid second element, which is the last element at &x[0] + 1.
[12:16:22] <smallville7123> generally writing to the end of an array is UB as it could sit right next to other data in use
[12:16:40] *** Quits: alch (~alch@151.34.0.230) (Read error: Connection reset by peer)
[12:16:41] <caze> And you have the allowance of "one past the end", so &x[0] + 2 would be fine.
[12:17:02] <smallville7123> eg int a[1]; a[1] = 5; // could overwrite important data and eventually cause bugs and mysterious crashes if done enough times
[12:17:08] <NRK[m]> &x[0] + 3 won't be fine 
[12:17:09] <nitrix> caze, Well, sorry, take int x[2][1] then.
[12:17:23] <smallville7123> eg off-by-one
[12:17:31] <caze> smallville7123: Look at what you write before pressing enter.
[12:17:53] <caze> nitrix: That's the same.
[12:18:29] <nitrix> Because I recall a special clause for multi-dimensional arrays worded with "incidentally valid" or similar.
[12:18:40] <NRK[m]> 2d arrays are just arrays of arrays
[12:18:45] <nitrix> No shit.
[12:19:03] <NRK[m]> yes, so i don't see why that would be UB
[12:19:06] <caze> int x[2][3] = { { 1, 2, 3 }, { 4, 5, 6 } }; The first element of x is { 1, 2, 3 }.
[12:19:13] <nitrix> Notice that I called them multi-dimensional arrays, not 2D arrays, since C doesn't have those.
[12:19:25] <caze> int x[2][1] = { { 1 }, { 2} };
[12:19:33] <smallville7123> hmm https://stackoverflow.com/questions/988158/take-the-address-of-a-one-past-the-end-array-element-via-subscript-legal-by-the
[12:19:57] <caze> &x[0] + 2 is not appreciably different for either example. The inner dimension is irrelevant.
[12:20:00] <smallville7123> "Note that the standard explicitly allows pointers to point one element past the end of the array, provided that they are not dereferenced"
[12:20:30] <NRK[m]> smallville7123 that's what we have been saying this entire time...
[12:20:59] <smallville7123> oh ok :)
[12:21:08] *** Joins: alch (~alch@151.68.19.231)
[12:21:26] <pony> I don't know about the case of &a[n]
[12:21:31] <nitrix> With the new int x[2][1] declaration, the problematic expression that's out-of-bound for the inner array, but in-bounds for the outer array would then be &x[0] + 1.
[12:21:39] *** Joins: meator (~meator@user/meator)
[12:21:40] <nitrix> I thought we were on the same page with what I'm trying to do.
[12:21:49] <nitrix> Do I need to backtrack?
[12:22:01] <caze> smallville7123: The top rated response literally quotes the exact same paragraph of the standard that I already showed you.
[12:22:19] *** Quits: sbrothy (~sbrothy@192038134172.mbb.telenor.dk) (Read error: No route to host)
[12:22:36] <nitrix> Well, except the +1 doesn't trigger the UB, gosh.
[12:23:00] <caze> nitrix: But that has nothing to do with the inner array.
[12:23:04] <NRK[m]> + 1 is within bounds. it's not even 1 past
[12:23:06] *** Quits: nuh^ (~nuh@64.253.22.77) (Remote host closed the connection)
[12:24:07] *** Joins: doofenshmirtz (~farawayas@103.160.128.7)
[12:24:33] <nitrix> int x[3][1]; &x[0] + 2, I think?
[12:24:37] <caze> int x[2][1] = { { 1 }, { 2 } }; &x[0] + 1 is the address of { 2 }, but it's not &x[1][0]
[12:25:20] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:25:23] <caze> int x[3][1]; &x[0] + 2 is the address of the last top level element of x.
[12:25:28] <NRK[m]> nitrix that's within the array bounds too
[12:25:44] <nitrix> It's within the outer array bounds, not the inner.
[12:26:05] <caze> But you didn't start from an inner array.
[12:26:10] <NRK[m]> ^
[12:26:13] *** Joins: Klinda (~superleag@user/klinda)
[12:26:33] <caze> &x[0][0] + 2 would be a problem.
[12:26:51] *** Joins: gce108 (~gce@user/gce108)
[12:27:12] <caze> Did I paste the footnote?
[12:27:21] <caze> ,c== apparently accessible
[12:27:26] <caze> ,c11 apparently accessible
[12:27:29] <candide> http://www.iso-9899.info/n1570.html#J.2p1 [Undefined behavior] The behavior is undefined in the following circumstances: -- A ``shall'' or ``shall not'' requirement that appears outside of a constraint is violated (clause 4). -- A nonempty source file does not end in a new-line character which is not immediately preceded by a backslash character or ends in a partial preprocessing token or comment (5.1.1.2... <truncated; https://0x0.st/-ygr.txt>
[12:27:40] <nitrix> Finally. Apparently accessible, that's the term I was looking for.
[12:27:59] <caze> "An array subscript is out of range, even if an object is apparently accessible with the given subscript (as in the lvalue expression a[1][7] given the declaration int a[4][5])"
[12:28:22] <caze> Yeah, you can't jump out of one array to access a sibling array.
[12:30:06] <nitrix> I see. So, without knowing that apparently accessible was UB (I had only heard it mentioned a few times), I was curious how it related to the +2 UB-ness.
[12:30:15] <nitrix> Turns it it's also UB so that makes things very simple.
[12:30:19] <nitrix> Turns out*
[12:30:34] <nitrix> Thanks.
[12:30:57] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:31:21] <NRK[m]> yes, pointer arithmetic in C is very consistent :) 
[12:33:19] <nitrix> I don't know what counter-example languages you would have in mind.
[12:33:57] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[12:34:32] <NRK[m]> none.
[12:35:08] <NRK[m]> i said in C just to he safe because im not aware of pointer arithmetic rules of any other language
[12:35:11] <nitrix> I think I have the same habit of saying "in C" for no reason.
[12:35:13] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 268 seconds)
[12:35:13] *** Joins: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[12:35:17] *** Joins: bbju (~bbju@103.144.149.220)
[12:36:02] *** Joins: MajorBiscuit (~MajorBisc@c-001-027-052.client.tudelft.eduvpn.nl)
[12:37:00] *** Quits: noose (~noose@user/noose) (Quit: Bye)
[12:37:21] *** Joins: noose (~noose@user/noose)
[12:37:24] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[12:38:13] *** Joins: Enitin (~Enitin@82.102.22.85)
[12:39:17] *** Quits: ppt (~yulung@211-21-14-99.hinet-ip.hinet.net) (Ping timeout: 240 seconds)
[12:40:09] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:41:13] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[12:41:30] *** Joins: ffguest (~ffguest@178.151.94.123)
[12:41:56] <nitrix> The more recent languages that still wants to allow pointers all seem to do their best to avoid letting you do arithmetic with them (Go), unless under very strict rules (Rust).
[12:45:22] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[12:47:50] <nitrix> Mmm, even with Go's unsafe being more loose, you're still subject to what the OS and hardware wants, like alignment.
[12:50:55] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:51:17] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[12:51:19] <pony> Go got generics just lately
[12:51:25] *** Joins: gce108_ (~gce@64-250-5-223.gvec.net)
[12:51:32] <nitrix> I don't know if languages ever had really a say in things. I think you're right that C might be the only one that actually cared giving it really semantics and documenting things.
[12:52:01] <smallville7123> preprocessing is a lot more difficult than i expected ;-;
[12:52:05] *** Joins: Viewday115 (~Viewday@user/viewday)
[12:52:06] <smallville7123> https://godbolt.org/z/ndWcxM75z qwq
[12:52:10] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[12:52:41] <pony> New Privacy Policy. Please take a moment to read it
[12:52:44] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:52:44] <pony> is blank
[12:52:48] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[12:52:48] <pony> blank policy?
[12:53:41] *** Quits: gce108 (~gce@user/gce108) (Ping timeout: 256 seconds)
[12:54:15] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[12:54:15] *** Viewday115 is now known as Viewday11
[12:54:22] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[12:54:37] *** Quits: ffguest (~ffguest@178.151.94.123) (Ping timeout: 240 seconds)
[12:54:57] *** Joins: cursey (~cursey@user/cursey)
[12:55:57] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[13:02:48] *** Quits: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:03:36] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[13:08:50] *** Joins: Viewday110 (~Viewday@user/viewday)
[13:09:12] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:09:12] *** Viewday110 is now known as Viewday11
[13:09:59] *** Joins: plastico (~plastico@neomutt/plastico)
[13:11:50] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 252 seconds)
[13:14:50] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:15:11] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 250 seconds)
[13:20:24] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[13:21:48] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:22:40] *** Joins: Akiva (~Akiva@user/Akiva)
[13:28:19] *** Joins: aradesh (~aradesh@user/aradesh)
[13:29:18] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:31:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[13:32:18] *** Joins: ppt (~yulung@118-232-53-143.dynamic.kbronet.com.tw)
[13:33:22] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[13:33:53] *** Joins: Viewday115 (~Viewday@user/viewday)
[13:34:18] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:34:18] *** Viewday115 is now known as Viewday11
[13:35:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:38:36] *** Joins: meator (~meator@user/meator)
[13:39:18] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[13:40:10] *** Joins: Viewday119 (~Viewday@user/viewday)
[13:41:38] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:41:38] *** Viewday119 is now known as Viewday11
[13:42:30] *** Joins: Kev_ (~Kev@2a01cb0400149f00c59fb6fff689497c.ipv6.abo.wanadoo.fr)
[13:42:38] *** Joins: inlight (~inlight@157.42.206.185)
[13:42:38] *** Quits: inlight (~inlight@157.42.206.185) (Changing host)
[13:42:38] *** Joins: inlight (~inlight@user/inlight)
[13:42:52] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[13:47:17] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 240 seconds)
[13:47:44] *** Joins: agonhajdari (~textual@p200300eb6f0fe800140880b4023c5d96.dip0.t-ipconnect.de)
[13:49:16] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:51:29] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:52:09] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:52:50] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[13:54:17] *** Quits: ppt (~yulung@118-232-53-143.dynamic.kbronet.com.tw) (Ping timeout: 240 seconds)
[14:07:37] *** Quits: MajorBiscuit (~MajorBisc@c-001-027-052.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[14:11:25] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[14:11:26] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[14:13:27] *** Quits: yo (~0xfe0@49.36.186.18) (Read error: Connection reset by peer)
[14:13:50] *** Joins: yo (~0xfe0@49.36.186.18)
[14:14:32] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[14:15:17] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[14:16:03] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[14:17:12] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[14:17:17] *** Joins: phineas (~farawayas@103.160.128.7)
[14:18:37] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[14:19:37] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Ping timeout: 240 seconds)
[14:20:37] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[14:20:43] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-015.client.tudelft.eduvpn.nl)
[14:21:31] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:21:36] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 245 seconds)
[14:22:07] *** Quits: agonhajdari (~textual@p200300eb6f0fe800140880b4023c5d96.dip0.t-ipconnect.de) (Changing host)
[14:22:07] *** Joins: agonhajdari (~textual@user/agonhajdari)
[14:22:37] *** Joins: inlight (~inlight@157.42.206.185)
[14:22:37] *** Quits: inlight (~inlight@157.42.206.185) (Changing host)
[14:22:37] *** Joins: inlight (~inlight@user/inlight)
[14:22:45] *** Joins: Viewday112 (~Viewday@user/viewday)
[14:22:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:22:56] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[14:22:57] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: Textual IRC Client: www.textualapp.com)
[14:23:26] *** Joins: agonhajdari (~textual@p200300eb6f0fe800cc26b63928b37f4e.dip0.t-ipconnect.de)
[14:24:16] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[14:24:16] *** Joins: kashyaprushi (~kashyapru@49.36.103.177)
[14:24:16] *** Viewday112 is now known as Viewday11
[14:24:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:24:55] *** Quits: agonhajdari (~textual@p200300eb6f0fe800cc26b63928b37f4e.dip0.t-ipconnect.de) (Client Quit)
[14:27:17] *** Joins: agonhajdari (~textual@user/agonhajdari)
[14:28:02] *** Quits: Kev_ (~Kev@2a01cb0400149f00c59fb6fff689497c.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:58] *** Joins: csrf (~csrf@user/csrf)
[14:31:00] *** Joins: ko (~i.am@user/marlboro)
[14:31:02] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[14:33:00] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:34:33] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Ping timeout: 256 seconds)
[14:38:41] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[14:40:14] *** Joins: Burgundy (~yomon@79.115.213.171)
[14:41:30] *** Joins: Viewday110 (~Viewday@user/viewday)
[14:42:58] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[14:42:58] *** Viewday110 is now known as Viewday11
[14:43:37] *** Quits: shadowchaser (~Shadowcha@liox.eu) (Quit: Ping timeout (120 seconds))
[14:43:50] *** Joins: shadowchaser (~Shadowcha@liox.eu)
[14:46:04] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[14:46:15] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:47:28] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[14:48:13] *** Joins: stonkey (~stonkey@user/stonkey)
[14:48:24] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[14:54:02] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[14:56:08] *** Joins: earnestly (~earnest@user/earnestly)
[14:56:14] *** Joins: Viewday114 (~Viewday@user/viewday)
[14:57:53] *** Joins: ferb (~farawayas@103.160.128.7)
[14:58:21] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[14:58:21] *** Viewday114 is now known as Viewday11
[15:00:17] *** Quits: phineas (~farawayas@103.160.128.7) (Ping timeout: 240 seconds)
[15:01:34] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[15:02:46] <pony> fuck your policy
[15:03:01] <pony> 🥰
[15:03:37] <pony> sick of legal text
[15:04:56] <DarkUranium> nitrix: a lot of languages are standardized, meaning things are documented.
[15:05:01] <DarkUranium> C is not alone in this aspect.
[15:07:26] *** Joins: maharshipatel98 (~maharship@43.250.157.181)
[15:07:37] *** Joins: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[15:07:57] *** Quits: maharshipatel98 (~maharship@43.250.157.181) (Client Quit)
[15:08:13] *** Joins: maharshipatel (~maharship@43.250.157.181)
[15:13:52] *** Quits: heftig (heftig@archlinux/developer/heftig) (Quit: No Ping reply in 180 seconds.)
[15:14:02] *** Quits: sdk_ (~x@shell.codevoid.de) (Quit: gopher://codevoid.de)
[15:14:17] *** Joins: sdk_ (~x@shell.codevoid.de)
[15:16:18] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[15:18:01] *** Joins: heftig (heftig@archlinux/developer/heftig)
[15:20:48] *** Joins: Stalevar (~stalevar@user/stalevar)
[15:22:09] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[15:22:56] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[15:24:55] *** Joins: Viewday113 (~Viewday@user/viewday)
[15:25:17] *** Joins: ffguest (~ffguest@178.151.94.123)
[15:25:27] *** Joins: mrig (~mrig@user/mrig)
[15:26:23] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[15:26:23] *** Viewday113 is now known as Viewday11
[15:29:32] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:29:53] *** Quits: Stalevar (~stalevar@user/stalevar) (Ping timeout: 252 seconds)
[15:31:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:32:20] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:32:34] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[15:34:10] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[15:34:28] *** Quits: maharshipatel (~maharship@43.250.157.181) (Quit: Client closed)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:39:14] *** Joins: Viewday117 (~Viewday@user/viewday)
[15:39:22] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[15:40:41] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[15:40:42] *** Viewday117 is now known as Viewday11
[15:43:37] *** Joins: Stalevar (~stalevar@user/stalevar)
[15:43:38] *** Joins: derreck (~derreck@c-71-58-70-16.hsd1.pa.comcast.net)
[15:49:32] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[15:49:57] *** Joins: constxd (~brad@142.134.38.68)
[15:49:59] *** Quits: ffguest (~ffguest@178.151.94.123) (Quit: Igloo IRC: https://iglooirc.com)
[15:51:01] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[15:51:02] *** Joins: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8)
[15:53:19] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[15:54:24] *** Joins: ffguest (~ffguest@178.151.94.123)
[15:54:37] *** Quits: kashyaprushi (~kashyapru@49.36.103.177) (Ping timeout: 240 seconds)
[15:54:51] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:56:17] *** Joins: kashyaprushi (~kashyapru@49.36.103.177)
[15:58:00] *** Quits: bbju (~bbju@103.144.149.220) (Quit: Client closed)
[15:58:42] *** Quits: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8) (Ping timeout: 268 seconds)
[15:58:59] *** Joins: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8)
[16:01:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:01:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[16:01:46] *** Joins: wroathe (~wroathe@user/wroathe)
[16:03:45] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[16:04:48] *** Joins: seninha (~seninha@user/seninha)
[16:05:53] *** Joins: terminalpusher (~terminalp@2a01:586:154d:1:a5a1:266f:8ccc:8c57)
[16:06:23] *** Quits: terminalpusher (~terminalp@2a01:586:154d:1:a5a1:266f:8ccc:8c57) (Remote host closed the connection)
[16:06:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[16:06:50] *** Quits: derreck (~derreck@c-71-58-70-16.hsd1.pa.comcast.net) (Quit: derreck)
[16:07:57] *** Quits: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8) (Ping timeout: 268 seconds)
[16:08:03] *** Quits: ffguest (~ffguest@178.151.94.123) (Ping timeout: 256 seconds)
[16:08:20] *** Joins: Darkcoal (~user@143.92.183.183)
[16:10:21] *** Joins: pulse (~pulse@user/pulse)
[16:16:55] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:28a8:69e0:9f71:fd7)
[16:16:55] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:28a8:69e0:9f71:fd7) (Changing host)
[16:16:55] *** Joins: skapata (~Skapata@user/skapata)
[16:19:34] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[16:19:56] *** Joins: toastloop (toastloop@user/toastloop)
[16:20:17] *** Quits: alch (~alch@151.68.19.231) (Ping timeout: 268 seconds)
[16:20:22] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Ping timeout: 260 seconds)
[16:21:58] *** Joins: alch (~alch@151.34.6.79)
[16:24:54] *** Joins: terminalpusher (~terminalp@2a01:586:154d:1:a5a1:266f:8ccc:8c57)
[16:25:25] *** terminalpusher is now known as ziguy
[16:25:28] *** Quits: ziguy (~terminalp@2a01:586:154d:1:a5a1:266f:8ccc:8c57) (Remote host closed the connection)
[16:27:15] *** Quits: cyphics (~cyphix@user/cyphics) (Quit: WeeChat 3.0)
[16:28:47] *** Joins: agonhajdari (~textual@user/agonhajdari)
[16:29:29] *** Joins: Ensir (~Ensir@c-24-30-27-91.hsd1.ga.comcast.net)
[16:30:07] <Ensir> GTK sucks. Too bad there isn't any other GUI toolkit for C that's cross platform.
[16:30:47] <DarkUranium> libui?
[16:30:55] <DarkUranium> Also, I'm working with one with another dev, Ensir.
[16:31:01] <DarkUranium> But it's in *very* early stages of development.
[16:31:35] <DarkUranium> It will do some things that GTK et. al. don't, though (namely: first-class web support --- and no, it's not browser-based on desktop).
[16:31:54] <DarkUranium> (because for better or for worse [honestly: worse in many ways], web support is critical nowadays)
[16:32:26] <Ensir> qt is gigantic as well. And it has no C interface.
[16:32:35] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:32:35] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[16:32:35] *** Joins: wroathe (~wroathe@user/wroathe)
[16:32:58] *** Joins: wielding (~wielding@user/wielding)
[16:33:43] <Ensir> Dear Imgui has a C interface though. I'll give that a try.
[16:34:57] <DarkUranium> But that does its own rendering. But yes.
[16:37:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[16:38:05] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[16:40:34] *** Joins: strajder (~strajder@user/strajder)
[16:40:37] *** Joins: doofenshmirtz (~farawayas@103.160.128.7)
[16:41:31] *** Joins: mrig (~AdiIRC@user/mrig)
[16:42:07] *** Joins: mrig_ (~AdiIRC@lfbn-mar-1-864-160.w92-150.abo.wanadoo.fr)
[16:43:23] *** Quits: mrig_ (~AdiIRC@lfbn-mar-1-864-160.w92-150.abo.wanadoo.fr) (Client Quit)
[16:44:06] *** Joins: mriga (~AdiIRC@lfbn-mar-1-864-160.w92-150.abo.wanadoo.fr)
[16:44:20] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[16:44:23] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:44:37] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[16:46:01] *** Quits: mrig (~AdiIRC@user/mrig) (Ping timeout: 256 seconds)
[16:47:45] *** Quits: mriga (~AdiIRC@lfbn-mar-1-864-160.w92-150.abo.wanadoo.fr) (Client Quit)
[16:48:21] *** Joins: mrig (~AdiIRC@user/mrig)
[16:52:17] *** Joins: bbju (~bbju@103.144.149.220)
[16:52:59] <bbju> Guys. What does it mean that an array is defined with `static` keyword?
[16:53:55] <bbju> Say this array is defined in `main`.
[16:54:21] <Twix> its the storage class
[16:54:36] <bbju> Does this mean the contents of this array are stored in the static area of the executable?
[16:54:55] <Twix> the static storage gets initialized at program start and persists during the whole runtime
[16:55:00] <Twix> yes
[16:56:09] *** Quits: aliosablack (~chomwitt@ppp-2-85-245-134.home.otenet.gr) (Quit: Leaving)
[16:56:28] *** Joins: aliosablack (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374)
[16:57:25] <bbju> Twix: Do we just assume this? Or does the standard explicitly mention this?
[16:58:04] <bbju> All I can find in the standard is: An object whose identiﬁer is declared with external or internal linkage, or with the storage-class speciﬁer static has static storage duration. Its lifetime is the entire execution of the program and its stored value is initialized only once, prior to program startup.
[16:58:08] <DarkUranium> bbju: it explicitly mentions this. It's also zeroed by default, if you don't assign an initial value.
[16:58:29] <DarkUranium> Well, what you quoted is exactly what Twix said.
[16:58:35] <DarkUranium> Ensir: I'm curious, what are you making?
[16:59:15] <bbju> I mean with regards to array.
[16:59:16] <Ensir> Nothing. It was more of a PDF reader that could handle xfa forms. But since PDF specs is hell, I'll just find an existing reader.
[16:59:56] <Ensir> Absolutely nothing open source can handle xfa other than maybe firefox which barely can render them.
[17:03:19] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:03:19] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:03:19] *** Joins: wroathe (~wroathe@user/wroathe)
[17:06:17] *** Quits: kashyaprushi (~kashyapru@49.36.103.177) (Quit: Leaving)
[17:06:18] *** Quits: gravndal (~weechat@user/ravndal) (Quit: WeeChat 3.3)
[17:07:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[17:08:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[17:08:08] *** Joins: gravndal (~weechat@user/ravndal)
[17:08:10] *** Joins: nyah (~nyah@94.6.71.219)
[17:08:27] *** Quits: toastloop (toastloop@user/toastloop) (Quit: Leaving)
[17:09:22] <poprocks> Ensir: too bad you're not able to create that, unfortunately in my $dayjob those bloody xfa forms are still in wide use and are the bane of my existence
[17:11:08] <Ensir> xfa really sucks. It doesn't work with okular or evince making it difficult to use non windows or non Mac OSes with PDF forms.
[17:11:35] <poprocks> and since adobe themselves have deprecated it, in fairness it's hard for existing devs to be like yeah, we'll get right on implementing a deprecated tech
[17:12:19] <Ensir> It'll take years for governments and legal offices to stop using xfa.
[17:12:42] <poprocks> it works a bit with okular afaict, but if there's that javascript or whatever it is in there checking to see if you're running adobe reading >= whatever version, it's going to show you that annoying message rather than the document
[17:13:45] <poprocks> and since 99.9% of those bloody forms are generated using livecycle or whatever it's called, they're going to be generated in that manner
[17:13:57] <Ensir> I'm just going to have to surrender and subscribe to adobe DC online until xfa is dead as the dodo.
[17:14:13] <poprocks> ugh. yeah that really sucks.
[17:14:18] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[17:14:37] <poprocks> I usually use some website to flatten the pdf and get rid of the xfa junk
[17:15:00] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[17:15:08] <poprocks> maybe masterpdfeditor works with it... IDR. I pay for that program and for me it's (barely) worth it
[17:17:57] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[17:19:25] *** Quits: Ensir (~Ensir@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[17:24:33] *** Quits: |7| (~seachdamh@user/seachdamh) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:25:59] *** Joins: retr0_ (~retro@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[17:28:02] *** Joins: random-nick (~random-ni@87.116.167.125)
[17:29:00] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[17:29:50] *** Joins: tdg (~pi@2a00:23c7:8590:6d01:1ae6:6336:f309:d13c)
[17:31:12] *** Quits: nullptr| (~nullptr@user/nullptr/x-2182142) (Quit: ZNC - http://znc.in)
[17:34:55] *** Joins: nullptr| (~nullptr@user/nullptr/x-2182142)
[17:35:28] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:35:52] *** Joins: constxd (~brad@142.134.38.68)
[17:35:56] *** Joins: X-Scale` (~ARM@89.214.152.24)
[17:37:32] *** Joins: moog (~moog@107.126.53.157)
[17:38:26] *** Quits: X-Scale (~ARM@206.46.158.5.rev.vodafone.pt) (Ping timeout: 265 seconds)
[17:38:26] *** X-Scale` is now known as X-Scale
[17:41:32] *** Quits: gravndal (~weechat@user/ravndal) (Quit: WeeChat 3.4)
[17:42:45] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:43:49] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[17:45:09] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:45:09] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:45:09] *** Joins: wroathe (~wroathe@user/wroathe)
[17:50:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[17:53:24] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[17:54:22] *** Joins: gravndal (~weechat@user/ravndal)
[17:55:42] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[17:55:54] *** Joins: bdax (~tom@05432be4.skybroadband.com)
[17:56:09] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[17:58:51] *** Joins: magla (~gelignite@55d4c16b.access.ecotel.net)
[18:00:00] <bdax> in the standard library there's the `strstr` function, for example, which has two definitions; `const char* strstr(const char* str1, const char* str2)` and `char* strstr(char* str1, const char* str2)`. Is it possible for us to define two definitions that share one function name like this? Or is it just for the standard library?
[18:02:32] <ioxzev1z> Sure you're not looking at C++ code?
[18:03:25] <agonhajdari> char *strstr(const char *s1, const char *s2); is only in the standard (7.21.5.7)
[18:03:27] <bdax> well.. I was looking at the c library reference on a c++ website: http://www.cplusplus.com/reference/cstring/strstr/
[18:03:47] <ioxzev1z> bdax, note the "c++ website", and the url cplusplus.com
[18:04:08] <pragma-> ,c11 the strstr function
[18:04:09] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[18:04:09] <candide> Displaying 1 of 3 matches: http://www.iso-9899.info/n1570.html#7.24.5.7p1 [The strstr function] #include <string.h> char *strstr(const char *s1, const char *s2);
[18:04:17] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[18:04:18] <pragma-> This is strstr's one and only declaration.
[18:04:34] <ioxzev1z> bdax, while C and C++ share the same roots, they are two different languages
[18:04:50] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[18:05:22] <bdax> ah, okay, I didn't realise there was that difference between the two, thanks folks!
[18:07:26] *** Joins: Enitin (~Enitin@82.102.22.86)
[18:12:33] <ioxzev1z> A simple example of a basic difference is not being able to malloc without casting the return
[18:13:07] <pragma-> ,c++
[18:13:07] <candide> If you are using a C++ compiler then your code is not C -- even if you're only using the "C subset". As soon as you invoke a C++ compiler instead of a C compiler, all the rules and idiosyncrasies of the C++ specification come into play, which have subtle differences in certain semantics. Please ask ##c++ or switch to a C compiler.
[18:13:46] *** Joins: monkey_ (~user@190.104.116.153)
[18:17:17] *** Joins: phineas (~farawayas@103.160.128.7)
[18:17:37] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-134.home.otenet.gr) (Ping timeout: 240 seconds)
[18:17:57] *** Quits: aliosablack (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374) (Ping timeout: 240 seconds)
[18:18:02] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Read error: Connection reset by peer)
[18:18:32] *** Joins: soul-d (~uknown@user/soul-d)
[18:18:52] *** Quits: ferb (~farawayas@103.160.128.7) (Quit: Leaving)
[18:20:34] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:21:39] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:24:01] <retr0_> printf("%c", *(mystring+1)); ah its this if reversed : printf("%c", *(1+mystring));
[18:24:20] <retr0_> not printf("%c", 1+*(mystring));
[18:24:59] <ioxzev1z> With mystring being a location in memory you can easily get the value of it + 1
[18:25:23] <retr0_> is the bool data type in stdbool just another integer
[18:25:27] <ioxzev1z> No
[18:25:35] <retr0_> or is stdbool changing the specification
[18:25:50] <retr0_> because i was told there was no bool type
[18:25:56] <retr0_> like everywhere tells me that
[18:26:06] <ioxzev1z> int x = 5; int y = 6; if(x && y) is true, but if(x == y) is false. bool a = 5; bool b = 6; if(a && b) is true, so is if(a == b)
[18:27:22] <retr0_> wat
[18:28:13] <retr0_> && and == are different yes
[18:28:15] <ioxzev1z> fwiu bools are checked for equality in the set of true and false, meaning anything not false is true. a == b is true because both are true
[18:28:29] <ioxzev1z> But they have different values on assignment
[18:29:29] <ioxzev1z> Note in the above that x && y, and a && b are both true, but the == are not both true
[18:29:43] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:30:08] <retr0_> the overall expression is not true yes
[18:31:16] <ioxzev1z> ,cc int x = 5; int y = 6; _Bool a = 5; _Bool b = 6; if(x && y) { puts("true"); } if(x == y) { puts("eq"); } if(a && b) { puts("true"); } if(a == b) { puts("eq"); }
[18:31:18] <candide> ioxzev1z: true true eq
[18:31:21] <retr0_> if (x == true || y == true){} makes no sense though tome
[18:31:37] <ioxzev1z> ^
[18:31:54] <ioxzev1z> if(x || y) means if either is true, the if statement is true
[18:32:23] <ioxzev1z> Note that if x is true, the y will not be checked, meaning that any expression there will not be executed
[18:33:00] <ioxzev1z> e.g. if(x || (c = getchar()) != -1) if x is true, the latter doesn't get called
[18:33:04] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[18:34:13] <ioxzev1z> If you want both you need to use &&
[18:34:18] *** Joins: ferdna (~ferdna@user/ferdna)
[18:34:40] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:34:54] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[18:35:39] *** Joins: node1 (~node1@user/node1)
[18:36:06] <node1> Good morning fellows
[18:36:34] <retr0_> ok
[18:38:57] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[18:39:01] *** Quits: phineas (~farawayas@103.160.128.7) (Quit: Leaving)
[18:42:26] *** Joins: Viewday119 (~Viewday@user/viewday)
[18:42:56] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[18:42:56] *** Viewday119 is now known as Viewday11
[18:43:12] <node1> How to generate randomness in C
[18:43:14] <node1> ?
[18:45:21] <cehteh> randomness as in what? prng, cryptrographically strong, you want an api? or generate it by yourself?
[18:46:13] <node1> time(NULL) will print the current time right?
[18:47:04] <ioxzev1z> node1, rand() can be used but it's junk for anything serious
[18:47:14] <ioxzev1z> Could always open /dev/urandom and read from that
[18:47:15] <cehteh> wrong
[18:47:22] <ioxzev1z> Thems are some crypto random bits
[18:47:40] <ioxzev1z> cehteh, how exactly?
[18:47:54] *** Joins: cousteau (~cousteau@user/cousteau)
[18:47:56] <cehteh> i meant time(NULL) wont print anything
[18:47:59] <ioxzev1z> Ah
[18:48:48] <cehteh> and shouldnt be used as seed for a prng either
[18:50:49] <node1> Ok
[18:50:49] *** Quits: fe23 (~fe23@2409:8a34:468:83d0:11a2:239:73e2:75cc) (Quit: fe23)
[18:51:00] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[18:51:05] <node1> i guess     srandom(time(NULL));  will get the current time.
[18:51:40] <|smlckz|> what is intended with this wording in the specification?: ''The implementation shall behave as if no library function calls the getenv function.''
[18:51:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:51:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:51:47] *** Joins: wroathe (~wroathe@user/wroathe)
[18:51:54] <cousteau> I once used time(NULL) as seed for a PRNG
[18:52:02] <cousteau> then I launched the program 10 times in a for loop
[18:52:15] <cousteau> and... well, all 10 times had exactly the same output
[18:52:17] <ioxzev1z> |smlckz|, I think it means you can assume that the functions don't have any information related to getenv
[18:52:29] <cousteau> so I learned what cehteh said the hard way.
[18:52:52] <node1> cousteau i think we must use  rand instead of seed
[18:53:04] <ioxzev1z> node1, to use rand() you need to seed it
[18:53:10] <pragma-> It's pretty obvious that if time() has a granularity of 1000ms, then any program run in the same 1000ms will have the same "randomness"
[18:53:26] *** Joins: bu5hyt0p_ (~rmsare@2601:281:c780:a510:31c5:bd6a:19eb:499b)
[18:53:29] <cousteau> node1: time(NULL) gives the current time usually with a precision of 1 second, so that's a shitty "random" seed
[18:53:37] *** Joins: Viewday119 (~Viewday@user/viewday)
[18:53:50] <cousteau> ioxzev1z: well, I mean, you don't *need* to, if you don't mind getting always the same pseudorandom sequence
[18:53:52] <node1> pragma- agree.
[18:54:00] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[18:54:34] <cehteh> at least do time(NULL) + getpid()     thats not good either, but slightly more idiot-proof
[18:54:40] <Thedarkb-Desktop> For my perpetually unfinished game project, I've just rolled my own LCG so its behaviour can be deterministic.
[18:54:49] <node1> But we run for 10ms  then we get the different output drastic difference between True and False value
[18:54:55] <Thedarkb-Desktop> I.E The same seed leads to the same result on different platforms.
[18:54:57] <cousteau> Linux and friends have a file called /ddev/urandom that provides a mix between true random sources and pseudorandom fillers
[18:55:25] <clarity> cousteau: I know a vendor whose secure boot signing tool uses time(NULL) to initialise the RNG for generating keys...
[18:55:28] <|smlckz|> ''The getenv function returns a pointer to a string associated with the matched list member. The array pointed to shall not be modified by the program, but may be overwritten by a subsequent call to the getenv function.'' how might it be overwritten?
[18:55:35] <cehteh> node1: what exactly do you need? some dice game excercise strong random or something for cryptorgraphy
[18:55:47] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:55:47] *** Viewday119 is now known as Viewday11
[18:55:56] <ioxzev1z> clarity, which vendor?
[18:55:57] <cousteau> Thedarkb-Desktop: the C standard contains an example implementation of rand() using an LCG
[18:56:05] <clarity> ioxzev1z: I'm gonna keep that a secret :P
[18:56:05] <node1> Just wanted to understand randomness :)
[18:56:22] <cehteh> then rand is wrog as it is not random in any way
[18:56:46] <ioxzev1z> |smlckz|, the getenv function can modify the array, but should not be modified by the program to keep things consistent
[18:57:06] <ioxzev1z> I think two calls to getenv should have the same data in the array (which getenv) can change
[18:57:11] <cehteh> read wikipedia about randomness, there are certain properties which need to be fullfilled
[18:57:19] <cousteau> it's a 32-bit LCG that discards bits 0-15 because they're not random enough (bit 0 is always 0-1-0-1-0-1-0-1...), and also discards bit 31 for whichever reason
[18:57:19] <node1> ok
[18:57:29] <ioxzev1z> e.g. getenv(); modify_getenv_array(); getenv(); will lead to inconsistencies
[18:57:33] <cehteh> or just: https://xkcd.com/221/
[18:57:34] <candide> Title of cehteh's link: xkcd: Random Number
[18:57:37] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[18:58:23] <cousteau> cehteh: I suspect that strip is a mock of the botched RANDU prng
[18:58:59] <|smlckz|> ioxzev1z: how can getenv() change an environment variable?
[18:59:21] <cousteau> it was a random number generator that generated uniformly distributed, but highly correlated sequences of random numbers, so if you used it 3 times in a row you'd always get a point in one of 15 planes in a 3D space, rather than the whole 3D space
[18:59:36] <cousteau> the developers justified their failure as "it is random if you only use it once"
[18:59:50] <ioxzev1z> |smlckz|, "The getenv function returns a pointer to a string associated with the matched list member.", either it allocates a new array or it modifies the _copy_ of the environment variable array
[19:00:13] <cousteau> and knowing the artist, he was probably mocking that statement
[19:01:54] <ioxzev1z> |smlckz|, I don't think environment variables are passed as pointers to the data, they are copied
[19:02:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[19:03:34] <cehteh> depends, in unix its commonly a   char* environ;   pointing to a nul byte delimites list of env vars terminated with another \0
[19:03:39] <cousteau> yeah as far as I know they are modifiable without consequences
[19:04:12] <cehteh> char* environ = "foo=bar\0baz=barf=oops\0";   
[19:04:14] <ioxzev1z> cehteh, yeah it uses pointers, but not ones that can affect the environment variables outside of the program
[19:04:38] <ioxzev1z> The passed environment variables are held as copies of the ones held before program startup
[19:04:49] <cehteh> its a can of worms when you modify it esp when using threads
[19:04:50] <cousteau> cehteh: so instead of NULL-terminated it's "empty string-terminated"?
[19:05:01] <cehteh> kindof
[19:05:17] <cousteau> (NULL(pointer)-terminated, not null(character)-terminated)
[19:05:28] <cehteh> runtime libs may add some shim over that array of pointers or other ways of indexing
[19:05:40] <|smlckz|> hmm, setenv(3), putenv(3),...
[19:06:00] <cehteh> and thats only the 'common' unix implementation, other OSes may do it differently
[19:06:16] <cehteh> also allowed charset or charset at all 
[19:06:49] <cehteh> baz=barf=oops  <<< i deliberately incuded that which means "baz" is set to "barf=oops"
[19:06:50] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[19:06:50] <cousteau> hm, so overwriting a single env var rewrites the whole env (all the pointers in the array)?
[19:07:02] <cousteau> (yeah that was a useful example)
[19:07:30] <cehteh> may replace the whole array or the implementation may reserve some space after the trailing zero
[19:07:46] <cehteh> but yes its just some ugly byte stuffing
[19:08:28] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[19:09:01] *** Joins: n3rdy1 (~n3rdy1@2601:281:c780:a510:31c5:bd6a:19eb:499b)
[19:09:40] *** Joins: critr (~critr@user/critr)
[19:09:52] *** Parts: bu5hyt0p_ (~rmsare@2601:281:c780:a510:31c5:bd6a:19eb:499b) ()
[19:10:38] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[19:10:38] <cehteh> oh moment wrong https://man7.org/linux/man-pages/man7/environ.7.html   .. but i am certain i seen the implementaiton i told above at the very low level
[19:13:11] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-134.home.otenet.gr)
[19:13:12] *** Joins: aliosablack (~chomwitt@ppp-2-85-245-134.home.otenet.gr)
[19:13:19] *** Joins: agonhajdari (~textual@user/agonhajdari)
[19:15:20] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[19:16:18] *** Joins: shivesh (~shivesh@user/shivesh)
[19:16:52] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[19:19:01] *** Quits: pstef (~pstef@user/pstef) (Ping timeout: 256 seconds)
[19:20:22] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 268 seconds)
[19:21:23] *** Quits: kuoi (~kuoi@109.175.166.60) (Quit: kuoi)
[19:22:21] *** Joins: johnnyreb (~tth@user/johnnyreb)
[19:23:57] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[19:24:20] <pragma-> At the very low level, C compilers do not care whether you write char* p or char *p, but the C languages designers designed its declaration semantics with "declaration-follows-use". C puts emphasis on the object, not the type. `char *p` means that `*p` is a char. Understanding this rule helps you understand C declarations. C++ puts emphasis on the types and they write different code to reflect this.
[19:25:11] <floatcomplex> char * p
[19:25:28] * floatcomplex sleeps the sleep of the just
[19:25:37] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Ping timeout: 240 seconds)
[19:25:42] <Learath2> I write char *p when I do C++ aswell, just to piss of C++ people
[19:26:31] <ioxzev1z> char *p actually looks better than char* p
[19:26:39] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[19:30:02] <wroathe> char    ***      p; 
[19:30:14] <wroathe> Table declarations 
[19:30:21] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[19:34:48] *** Quits: bdax (~tom@05432be4.skybroadband.com) (Remote host closed the connection)
[19:34:53] <Learath2> char *   * *    p;
[19:35:08] *** Joins: bdax (~tom@05432be4.skybroadband.com)
[19:35:39] <wroathe> This is the way
[19:37:29] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:37:55] <ioxzev1z> char * /* ***** */ * p;
[19:38:20] <earnestly> Can you get & involved in this?
[19:41:14] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[19:41:25] *** Joins: ffguest (~ffguest@178.151.94.123)
[19:41:26] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:41:53] *** Joins: malina (~malina@user/malina)
[19:41:53] *** Quits: ffguest (~ffguest@178.151.94.123) (Client Quit)
[19:42:27] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:43:35] *** Joins: Viewday118 (~Viewday@user/viewday)
[19:43:57] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[19:44:31] *** Quits: bdax (~tom@05432be4.skybroadband.com) (Quit: bdax)
[19:45:29] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[19:45:39] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[19:45:39] *** Viewday118 is now known as Viewday11
[19:47:52] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[19:50:54] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[19:51:38] *** Joins: Satin (uid193953@user/Seten)
[19:51:46] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 260 seconds)
[19:52:13] *** Joins: scoobydoo_ (~scooby@user/scoobydoo)
[19:53:45] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[19:54:21] *** Joins: kish` (~sid742412@user/aqua)
[19:54:37] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[19:54:40] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[19:54:43] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[19:54:44] *** scoobydoo_ is now known as scoobydoo
[19:55:01] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 240 seconds)
[19:55:01] *** Joins: kish` (~sid742412@user/aqua)
[19:55:58] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[20:03:04] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Remote host closed the connection)
[20:04:09] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[20:04:42] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[20:05:09] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[20:05:24] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:05:25] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[20:06:10] *** Quits: bbju (~bbju@103.144.149.220) (Quit: Client closed)
[20:06:33] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Remote host closed the connection)
[20:07:17] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[20:07:37] *** Quits: rahl (~rahl@102.114.240.19) (Ping timeout: 240 seconds)
[20:08:23] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[20:09:41] *** Joins: rahl (~rahl@102.114.150.201)
[20:09:42] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Client Quit)
[20:11:00] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:12:37] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[20:12:51] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:15:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[20:16:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:16:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:16:47] *** Joins: wroathe (~wroathe@user/wroathe)
[20:19:05] *** Quits: alch (~alch@151.34.6.79) (Ping timeout: 256 seconds)
[20:21:05] *** Joins: alch (~alch@151.68.37.191)
[20:22:26] *** Quits: analognoise (~analognoi@23.105.41.153) (Read error: Connection reset by peer)
[20:22:27] *** Joins: Charadon (~Charadon@155.138.164.183)
[20:23:30] *** Joins: evocatus (~rg@62.182.78.42)
[20:24:28] *** Joins: inlight (~inlight@157.35.40.251)
[20:24:28] *** Quits: inlight (~inlight@157.35.40.251) (Changing host)
[20:24:28] *** Joins: inlight (~inlight@user/inlight)
[20:25:19] *** Quits: larry87 (~quassel@c-73-6-106-85.hsd1.tx.comcast.net) (Ping timeout: 256 seconds)
[20:31:03] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[20:31:45] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[20:33:44] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[20:36:21] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[20:38:32] *** Joins: karakedi (~eAC53C340@user/karakedi)
[20:39:10] *** Joins: morte_ (~user@190.148.157.89)
[20:41:17] *** Quits: evocatus (~rg@62.182.78.42) (Quit: Konversation terminated!)
[20:44:08] *** Joins: constxd (~brad@142.134.38.68)
[20:44:35] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[20:46:19] *** Joins: node1 (~node1@user/node1)
[20:56:23] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[20:58:20] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[20:59:07] *** Guest7170 is now known as xSavitar
[21:03:54] *** Joins: mahmutov_ (~mahmutov@37.155.52.89)
[21:05:58] <APic> Probably one can.
[21:06:04] * APic laughs magically.
[21:06:58] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[21:07:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:10:37] *** Quits: ckdCreations (~ckdCreati@2607:fb90:b275:a38f:99ee:fa2e:1a24:a8e) (Ping timeout: 240 seconds)
[21:10:47] *** Joins: ckdCreations (~ckdCreati@147.55.133.140)
[21:12:17] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-27-213.pa.qld.optusnet.com.au)
[21:13:03] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[21:13:28] *** Joins: Akiva (~Akiva@user/Akiva)
[21:14:16] *** Joins: bebyx (~Thunderbi@user/bebyx)
[21:14:35] *** Quits: mahmutov_ (~mahmutov@37.155.52.89) (Quit: WeeChat 3.1)
[21:14:57] *** Joins: mahmutov (~mahmutov@37.155.52.89)
[21:15:32] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[21:15:40] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:16:01] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[21:18:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[21:19:37] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Ping timeout: 240 seconds)
[21:20:25] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Remote host closed the connection)
[21:20:49] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[21:22:57] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[21:23:36] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[21:24:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:24:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:24:52] *** Joins: wroathe (~wroathe@user/wroathe)
[21:26:32] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-27-213.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[21:28:56] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[21:29:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:29:57] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[21:34:16] *** Quits: ckdCreations (~ckdCreati@147.55.133.140) (Read error: Connection reset by peer)
[21:34:40] *** Joins: ckdCreations (~ckdCreati@2607:fb90:835f:f0a3:99ee:fa2e:1a24:a8e)
[21:36:14] *** Quits: fstd (~fstd@xdsl-84-44-230-164.nc.de) (Read error: Connection reset by peer)
[21:36:27] *** Joins: fstd (~fstd@xdsl-84-44-230-164.nc.de)
[21:38:31] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:38:31] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:38:31] *** Joins: wroathe (~wroathe@user/wroathe)
[21:42:17] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[21:44:31] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[21:44:43] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[21:46:08] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[21:46:36] *** Joins: Everything (~Everythin@37.115.210.35)
[21:50:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[21:50:17] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[21:50:26] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:50:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:50:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:50:59] *** Joins: wroathe (~wroathe@user/wroathe)
[21:51:03] *** Joins: coodre (~user@41.143.61.165)
[21:52:01] *** Quits: malina (~malina@user/malina) (Ping timeout: 256 seconds)
[21:52:57] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[21:54:15] <coodre> how do you debug pthread mutex deadlocks in gdb
[21:56:23] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[21:57:18] *** Joins: seninha (~seninha@user/seninha)
[22:00:46] <floatcomplex> try thread sanitizer first?
[22:01:48] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:02:34] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[22:02:37] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:03:19] *** Joins: goepsilongo (~goepsilon@2806:263:c404:8000:f42f:2a6e:3c81:2519)
[22:04:23] <coodre> GCC's -fsanitize=thread did the job, thx
[22:04:53] *** Joins: constxd (~brad@142.134.38.68)
[22:07:29] *** Quits: tdg (~pi@2a00:23c7:8590:6d01:1ae6:6336:f309:d13c) (Changing host)
[22:07:29] *** Joins: tdg (~pi@user/tdg)
[22:09:46] <coodre> but is the thread sanitizer supposed to be a temporary fix?
[22:10:43] <twkm> it is a detector, not a repair.  it helps you to fix things.
[22:13:25] *** Quits: retr0_ (~retro@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Ping timeout: 256 seconds)
[22:13:50] *** Joins: DnaDno (~DnaDno@pool-151-200-246-144.washdc.fios.verizon.net)
[22:14:04] *** Joins: Enitin (~Enitin@82.102.22.84)
[22:14:16] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:4945:e3af:4088:41b5)
[22:14:16] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:4945:e3af:4088:41b5) (Changing host)
[22:14:16] *** Joins: skapata (~Skapata@user/skapata)
[22:14:55] <coodre> how?
[22:16:15] *** Quits: nyah (~nyah@94.6.71.219) (Remote host closed the connection)
[22:17:26] *** Joins: toastloop (toastloop@user/toastloop)
[22:21:17] *** Quits: alch (~alch@151.68.37.191) (Ping timeout: 240 seconds)
[22:22:31] <earnestly> coodre: By failing loudly
[22:23:09] *** Quits: Stalevar (~stalevar@user/stalevar) (Read error: Connection reset by peer)
[22:23:36] *** Joins: cousteau (~cousteau@user/cousteau)
[22:24:04] *** Joins: DnaDno1 (~DnaDno@185.220.103.12)
[22:24:18] *** Quits: DnaDno1 (~DnaDno@185.220.103.12) (Remote host closed the connection)
[22:24:33] *** Joins: ffguest (~ffguest@178.151.94.123)
[22:25:18] <coodre> thread sanitizer (no matter how much options i mess around with) does not report anything, and continues
[22:25:34] *** Quits: ffguest (~ffguest@178.151.94.123) (Client Quit)
[22:25:44] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[22:26:35] *** Quits: DnaDno (~DnaDno@pool-151-200-246-144.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[22:26:39] *** Quits: magla (~gelignite@55d4c16b.access.ecotel.net) (Quit: Stay safe!)
[22:27:51] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[22:28:04] <cousteau> hm, my gcc doesn't seem to have an -fsanitize=hand option
[22:28:12] <cousteau> does anyone know how to enable the hand sanitizer?
[22:30:13] *** Joins: DnaDno1 (~DnaDno@185.220.103.12)
[22:31:34] *** Quits: DnaDno1 (~DnaDno@185.220.103.12) (Client Quit)
[22:32:09] *** Joins: sbrothy (~sbrothy@213.83.133.139)
[22:32:30] *** Joins: DnaDno (~DnaDno@185.220.103.12)
[22:33:21] <wroathe> Yes, but it's not what you think
[22:33:27] <wroathe> It involves knives 
[22:37:41] *** Joins: Stalevar (~stalevar@user/stalevar)
[22:38:12] *** Quits: sbrothy (~sbrothy@213.83.133.139) (Quit: leaving)
[22:38:28] *** Joins: Akuli (~Akuli@82-203-163-147.bb.dnainternet.fi)
[22:41:52] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[22:43:25] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[22:43:37] *** Quits: DnaDno (~DnaDno@185.220.103.12) (Quit: Leaving)
[22:44:09] *** Joins: DnaDno (~DnaDno@185.220.103.12)
[22:45:11] *** Joins: Enitin (~Enitin@82.102.22.84)
[22:47:08] *** Joins: agonhajdari (~textual@user/agonhajdari)
[22:49:21] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[22:50:40] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[22:52:59] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[22:53:25] *** Joins: alch (~alch@151.36.84.94)
[22:53:31] *** Joins: mrig (~mrig@user/mrig)
[22:53:49] *** Joins: cousteau (~cousteau@user/cousteau)
[22:53:49] *** Joins: kurahaupo (~kurahaupo@pa49-182-27-213.pa.qld.optusnet.com.au)
[22:56:07] <twkm> cousteau scares hirself.
[22:58:07] <cousteau> I typed /server instead of /new and then forgot the name of this network
[23:00:41] <coodre> i fixed the deadlock problem, apparently i passed it a **mutex instead of *mutex
[23:01:07] <coodre> mutex**, mutex*
[23:02:13] <nitrix> The asterisk goes in front.
[23:02:54] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[23:03:01] <coodre> yeah my mistake
[23:06:56] *** Quits: kurahaupo (~kurahaupo@pa49-182-27-213.pa.qld.optusnet.com.au) (Ping timeout: 252 seconds)
[23:10:11] *** Quits: DnaDno (~DnaDno@185.220.103.12) (Quit: Leaving)
[23:17:09] *** Joins: begriffs (~singleuse@user/begriffs)
[23:17:35] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 256 seconds)
[23:19:32] *** Quits: begriffs (~singleuse@user/begriffs) (Remote host closed the connection)
[23:20:25] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:20:47] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[23:21:01] *** Joins: begriffs (~singleuse@user/begriffs)
[23:21:49] *** Quits: begriffs (~singleuse@user/begriffs) (Remote host closed the connection)
[23:22:02] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:23:04] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:25:22] *** Joins: Betal (~Betal@user/betal)
[23:26:09] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Remote host closed the connection)
[23:27:47] *** Joins: nuxil (~nuxil@141.195.51.213)
[23:30:51] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[23:30:53] *** Joins: rgrinberg (~textual@187.223.144.204)
[23:32:53] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 256 seconds)
[23:33:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[23:33:47] *** Quits: Darkcoal (~user@143.92.183.183) (Quit: Darkcoal)
[23:33:58] *** Joins: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8)
[23:35:40] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 268 seconds)
[23:38:45] *** Quits: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8) (Ping timeout: 250 seconds)
[23:39:37] *** Quits: coodre (~user@41.143.61.165) (Ping timeout: 240 seconds)
[23:40:16] *** Joins: Darkcoal (~user@143.92.183.183)
[23:43:49] <phryk> When I malloc something, I have to specify the size, but when I free it, I don't. I assume that means that every call to malloc saves metadata about the allocated memory somewhere – is that correct?
[23:44:51] <Thedarkb-Desktop> Yes.
[23:45:16] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[23:45:58] <phryk> Is this metadata bookkeeping something that's handled by the kernel?
[23:47:23] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 268 seconds)
[23:47:41] <Thedarkb-Desktop> Partly by the kernel and partly by the C library, I'd have thought.
[23:48:16] <Thedarkb-Desktop> I think malloc/free are backed by mmap and sbrk behind the scenes.
[23:48:22] <ioxzev1z> I don't think the standard specifies how, so it's implementation specific
[23:48:42] <Thedarkb-Desktop> With C, there's no guarantee that there is a kernel behind the scenes.
[23:48:51] <ioxzev1z> Might store 1 byte of metadata, might store 1M of metadata
[23:48:59] <ioxzev1z> Need to check the kernel codez
[23:49:13] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[23:50:32] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Remote host closed the connection)
[23:50:41] *** Joins: magla (~gelignite@55d4c16b.access.ecotel.net)
[23:50:53] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[23:52:39] *** Joins: Klinda (~superleag@user/klinda)
[23:52:46] <nitrix> phryk, It depends on the implementation, but usually allocators will allocate slightly bigger regions than requested to store additional information. A common error that happens when you incorrectly read/write slightly out of bounds is to corrupt that hidden structure, causing the program to crash on the next allocation.
[23:53:54] <ioxzev1z> What about SEGV on write on oob rather than just next allocation?
[23:54:37] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[23:55:31] <nitrix> Anything goes since the write is UB.
[23:56:21] <fizzie> Another "usually" thing is that if you ask for a particularly _big_ allocation, it gets satisfied by a dedicated OS-level request for a chunk of memory, while a small allocation would be a small piece from a larger region of memory managed by the allocator, consequently with different bookkeeping and responsibilities (the OS vs. the program / the program's C runtime library).
[23:56:27] <bionade24> Hi, does anyone no for which '-module' in LDFLAGS stands for? Neither man -K ' -module' nor searching on https://man.archlinux.org helped.
[23:56:29] <candide> Title of bionade24's link: Arch manual pages
[23:59:32] *** Joins: rgrinberg (~textual@187.223.250.159)
