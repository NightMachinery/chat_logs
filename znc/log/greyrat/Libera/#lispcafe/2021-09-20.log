[00:30:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:35:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[01:12:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:15:45] *** Joins: recordgroovy (~recordgro@50.35.20.8)
[01:21:38] <moon-child> I find some aspects of scheme rather poorly designed
[01:22:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[01:23:15] <moon-child> for instance 'linear update procedures'.  Functions like append! (viz NCONC) are permitted, but not required to mutate their parameters
[01:23:36] <moon-child> so the argument is left in an unspecified state and you can't use it again
[01:23:48] <moon-child> now, hash table modifications are linear update procedures
[01:23:52] <moon-child> so you can't share a hash table
[01:24:21] <moon-child> (or, you can; but you have to do a piece of indirection yourself)
[01:27:52] <gilberth> NCONC is a very convenient example, as it is defined to be destructive, while DELETE e.g. is not.
[01:29:10] <gilberth> And still: With NCONC too, you better have a SETQ around it.
[01:30:05] <moon-child> I didn't mean that the problem is that such functions exist; I meant that the problem is that hash table acessors are such
[01:30:11] <gilberth> I don't consider the destructive behavior as a feature but rather as an allowed optimization. Again: NCONC is the exception here.
[01:31:18] <gilberth> What's the trouble with hash tables?
[01:32:39] <moon-child> the equivalent of  (setf gethash)  leaves its argument in an unspecified state, like nreverse
[01:32:43] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:4dee:bd1e:b1f:14f0)
[01:33:06] <White_Flame> gilberth: they were caught doing hash
[01:34:17] <gilberth> moon-child: You say (setf gethash) in Schema may as well craft a copy?
[01:34:44] <moon-child> it might.  It might not.  You have no way of knowing
[01:36:30] <gilberth> Well, this may or may not part is no problem per se. It just makes hash tables kinda awkward to work with, as you also need to update references to that table.
[01:38:59] <gilberth> But granted, places in CL mimic locatives rather well.
[01:48:10] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[02:17:10] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:43:40] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:47:16] *** Joins: selwyn (~selwyn@user/selwyn)
[02:49:41] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[02:53:32] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[02:53:55] *** Joins: selwyn (~selwyn@user/selwyn)
[02:58:40] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:4dee:bd1e:b1f:14f0) (Remote host closed the connection)
[03:03:58] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:14:58] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[03:15:23] *** Joins: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se)
[03:16:56] <hayley> https://www.reddit.com/r/Common_Lisp/comments/pr4170/do_you_mutate_many_objects/hdgw1hw/
[03:16:57] <hayley> "You might want to take a look at what SICL is trying to do with GC along these lines."
[03:16:57] -ixelp- Do you mutate many objects? : Common_Lisp
[03:19:01] <hayley> "Check out SBCL" "<stassats> Ok, I will."
[03:24:59] <mfiano> Nim's solution is 1 GC for every data point
[03:25:03] <mfiano> :)
[03:28:06] <hayley> Finally, a worthy opponent for JVMs.
[03:32:59] <Alfr> mfiano, how do GCs relate to Nim and which one?
[03:33:56] <hayley> Still, at least "I do immutable except for fast code" is an interesting data point. You can't make a persistent array which is as fast as a mutable array, so it's valid regardless of GC, but a faster GC would let you do more immutable stuff, more immutable stuff means fewer writes... 
[03:34:28] <hayley> So for a """functional""" language with fewer writes, a write barrier is probably a better move.
[03:39:00] <mfiano> Alfr: I have no idea which ones. There are currently 7 or 8 in Nim, which includes "no GC". The developer is kinda dumb and introduces experiemental ideas often with lots of breaking changes. The language is a toy in my opinion
[03:39:14] <mfiano> (I used it for a couple weeks and want my time back)
[03:39:26] <hayley> https://i.redd.it/dc2gvbs20eo71.jpg
[03:39:56] <Alfr> mfiano, Oh ... okay. I thought you meant a Nim game.
[03:40:02] <hayley> Also https://i.redd.it/dfi7bmo26go71.jpg
[03:40:43] <Alfr> mfiano, https://en.wikipedia.org/wiki/Nim
[03:41:25] <mfiano> Yeah the norm is 2-4 character common words for languages these days, forcing you to search for topics by appending "lang".
[03:41:45] <mfiano> Nim, Rust, Go, Pony...another Greenspun invention perhaps :)
[03:46:27] <waleee> ... "lisp" would be a pioneer in naming then?
[03:48:12] <mfiano> That's what I was implying
[03:48:39] <waleee> "crystal" is longer but crap to search for without lang unless you have primed google beforehand
[03:49:04] <mfiano> Anyway, would not recommend checking out Nim at all. The developer released 1.0 and a false promise of no breaking changes in an attempt to gather more users. Enough said.
[03:49:55] <waleee> I'm a bit wary since the main sponsor of the project is a cryptocurrency scheme
[03:50:31] <hayley> .oO("Netfarm 0.0.1 is released, go mess around with it (without the DHT but still)" "Netfarm 0.0.2 is released, now you can write programs!" *no programs* "Netfarm 0.1.0 is released, now programs are easier to write" *no programs*)
[03:50:39] <mfiano> Crystal is a much better language, but it doesn't offer much anything new, macros are not nearly as powerful as Lisp...more like C macros, and is still a class-centric Blub language forcing you into an often inconvenient paradigm where you have to name needless taxonomies
[03:52:06] <mfiano> The more I try these new languaages, the more they seem like very restrictive DSLs to me
[03:53:28] <waleee> I like zig, the compiler tooling is heavily invested (= in developer time) in
[03:54:20] <mfiano> It's an interesting language, but it's not for me
[03:56:04] <mfiano> I prefer a garbage collected language. Also I believe a programming language is like a tripod. If it doesn't have a strong stdlib, library ecosystem, and tooling, it just falls flat.
[04:01:01] <hayley> If you aren't naming your language after Danish queue theorists, what are you doing?
[04:03:24] <waleee> Agner Krarup Erlang?
[04:04:07] <White_Flame> ok, I'm going to name my language "lang" then, as it's not an uncommon last name
[04:04:41] * waleee knwos a ___ Lang
[04:05:32] <hayley> Erl Wang
[04:07:38] <waleee> probably in some original Brothers Grim-story
[04:08:11] <waleee> s/Grim/Grimm/
[04:09:59] <White_Flame> or a nice long name, like "Temporal Heuristic Executor", or just "the" for short
[04:13:06] <hayley> "Temporal Logic of Actions"
[04:13:28] <hayley> Oh wait, now my programming language has the same name as the mathematical model. Just stick a + on the end idk
[04:17:45] <mfiano> non-breaking space lang
[04:18:08] <moon-child> my next programming language will be named &amp;amp;
[04:18:41] <mfiano> that would be an interesting package-local nickname for some obfuscation that would even make Larry Wall cringe
[04:21:39] <mfiano> imagine writing code that had increasing levels of NBS for PLNs, lexivars, etc
[04:22:49] <mfiano> err sorry, I am typing one thing and thinking another. I meant zero-width space
[04:22:50] <moon-child> I made a hacked up lambda calculus in shell once
[04:23:13] <moon-child> in order to write a curried function of n parameters, you need 2^n escaped backslashes
[04:23:52] <hayley> https://xiaohuiliu.medium.com/turing-machine-on-bitcoin-7f0ebe0d52b1 wh
[04:23:53] -ixelp- Turing Machines on Bitcoin. Bitcoin Turing Complete Proof | by sCrypt | Sep, 2021 | Medium
[04:24:11] <White_Flame> I'll just keep to ascii and call my language the tab character
[04:24:42] <hayley> So they use one transaction per step, as you can't just loop in Bitcoin transaction scripts. 
[04:33:47] <Alfr> Aehm ... that's not a Turing machine, simply stuffing state onto Bitcoin's chain, doesn't make it compute anything.
[04:35:45] <Alfr> They should have at the least made the effort to encode the state machine as well, my 2 ct.
[04:45:50] <hayley> FWIW you could probably unroll the loop to do more steps/transaction.
[04:48:06] <hayley> Our data science^W^Wmath lecturer is confused by having a HTML document with the extension .ipynb.
[04:48:17] <hayley> And someone actually already made a pull request to fix it.
[04:55:05] <hayley> https://www.youtube.com/watch?v=FTUbW47CM2k
[04:55:05] -ixelp- I Only Find Rewind - YouTube
[04:55:08] <hayley> The prick didn't even merge, just copied it in himself. smh
[04:59:47] *** Quits: random-nick (~random-ni@87.116.180.139) (Ping timeout: 265 seconds)
[05:12:40] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[05:12:55] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[05:24:13] <hayley> https://gbracha.blogspot.com/2020/01/the-build-is-always-broken.html
[05:24:13] -ixelp- Room 101: The Build is Always Broken
[05:34:32] <hayley> https://twitter.com/prageru/status/1439620299285319683 PragerU finds out about selection bias
[05:52:26] <hayley> https://www.youtube.com/watch?v=pKcJ-0bAHB4
[05:52:27] -ixelp- Run out of Alabama! | Offensive cars | Top Gear | Series 9 | BBC - YouTube
[06:24:26] <White_Flame> heh, I remember that ep of top gear
[06:31:21] <hayley> Of 102 votes, 28 people don't admit to mutating objects, 37 only do it "for performance", 10 mutate objects but not sequences, and 27 admit to mutating whatever.
[06:35:59] *** Quits: lad (~lad@user/lad) (Remote host closed the connection)
[06:40:55] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[06:42:54] * hayley puts https://www.youtube.com/watch?v=Ou4u4kOatck on the jukebox
[06:50:03] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[06:53:22] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[06:56:10] *** Quits: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se) (Ping timeout: 252 seconds)
[07:11:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:17:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[08:12:49] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:25:23] *** Joins: semz (~none@user/semz)
[08:59:58] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[08:59:58] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (*.net *.split)
[09:00:26] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[09:00:55] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[09:07:40] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:11:38] *** Quits: gko (~user@user/gko) (*.net *.split)
[09:11:38] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (*.net *.split)
[09:11:38] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[09:11:39] *** Quits: hayley (~theemacss@user/hayley) (*.net *.split)
[09:11:39] *** Quits: eschaton (eschaton@2600:3c01::f03c:91ff:fefd:5d92) (*.net *.split)
[09:11:39] *** Quits: susam (~susam@user/susam) (*.net *.split)
[09:11:49] *** Joins: susam (~susam@user/susam)
[09:11:52] *** Joins: phoe (~phoe@user/phoe)
[09:12:01] *** Joins: gko (~user@user/gko)
[09:12:28] *** Joins: pl (sid98063@2a03:5180:f:1::1:7f0f)
[09:14:54] *** Joins: eschaton (eschaton@2600:3c01::f03c:91ff:fefd:5d92)
[09:16:01] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:19:20] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[09:24:11] *** Quits: ChanServ (ChanServ@services.libera.chat) (shutting down)
[09:28:32] *** Joins: ChanServ (ChanServ@services.libera.chat)
[09:28:32] *** molybdenum.libera.chat sets mode: +o ChanServ
[09:30:23] *** Joins: hayley (~theemacss@user/hayley)
[09:40:10] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Ping timeout: 240 seconds)
[09:54:06] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:56:05] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:57:10] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[09:58:40] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[10:31:49] <hayley> https://www.youtube.com/watch?v=LOINmOfoXAU
[10:31:50] -ixelp- YTP Chucklevision: The Marvel-lous Chuckles collect the Infinity Stones - YouTube
[10:32:14] <dave0> maw
[10:34:55] <hayley> maw
[10:35:21] <Alfr> Hello dave.
[10:38:51] <dave0> hi hayley, Alfr 
[10:42:12] <hayley> https://www.youtube.com/watch?v=7nHveHhgjNo
[10:42:12] -ixelp- Bombers ('79 Live Original Mix) - YouTube
[10:47:47] *** Joins: shka (~herr@109.231.62.239)
[11:00:11] <edgar-rft> moo
[11:01:24] <edgar-rft> (°(..)°)
[11:27:33] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:30:32] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 246 seconds)
[11:42:06] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[11:42:11] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[11:45:16] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[11:46:03] <hayley> Things I got to write today: "So using lists for code is only a compile-time problem, and I don't think Bjarne Stroustrup can talk about compilation speed."
[11:51:13] *** Joins: selwyn (~selwyn@user/selwyn)
[11:51:29] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[11:51:53] *** Joins: selwyn (~selwyn@user/selwyn)
[12:33:46] <hayley> wtf someone votekicked me from Sven Coop when I connected
[12:33:56] <hayley> I didn't do anything
[12:35:51] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:52:26] <edgar-rft> you did, you connected
[13:06:11] <Gnuxie> what's sven coop
[13:08:30] <Duuqnd[m]1> A coop mod for Half-Life
[13:10:36] <Gnuxie> ahh
[13:14:36] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:17:52] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[13:28:22] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 245 seconds)
[13:58:09] <gilberth> Good morning #lispcafe!
[13:59:39] <kakuhen> Good night #lispcafe :3c 
[14:00:08] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:07:58] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[14:07:59] <hayley> Good morning everyone!
[14:21:55] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[14:26:14] <edgar-rft> not everyone's on irc and not every irc user is on #lispcafe, so chances are a bit random
[14:29:43] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:64da:eb8a:ab76:7f8a)
[14:29:55] <hayley> https://www.youtube.com/watch?v=RR6WoKCCt94
[14:29:56] -ixelp- Pink Floyd - A Saucerful Of Secrets (Essencer Pop & Blues Festival) - YouTube
[14:41:46] *** Joins: random-nick (~random-ni@87.116.183.65)
[15:08:04] <selwyn> saw an old geezer yesterday with a nick mason saucerful of secrets shirt
[15:08:37] <selwyn> oh it´s his new band. wondered why they were not using the pink floyd name
[15:11:26] <hayley> https://www.youtube.com/watch?v=E9AFBZrJfpU
[15:11:26] -ixelp- Nick Mason's Saucerful Of Secrets - See Emily Play (Live At The Roundhouse) - YouTube
[15:33:57] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:46:37] <hayley> https://codingkaiser.blog/2021/07/23/operating-systems-are-more-exciting-than-you-think/
[15:46:38] -ixelp- Singularity – Microsoft’s Experimental OS – Coding Kaiser
[15:54:42] <Gnuxie> smh
[15:55:58] <selwyn> it doesn´t say why it was stopped?
[15:57:14] <hayley> https://www.youtube.com/watch?v=rwPM01cbQBc
[15:57:14] -ixelp- Money - YouTube
[15:57:39] <hayley> Also, hopefully cause someone decided that not doing structure sharing between "processes" were dumb, and so processes are dumb.
[15:58:31] <selwyn> a waste of potential closos bux
[15:59:12] <hayley> "I'm alright Drew keep ya hands off my stack"
[16:00:43] <Gnuxie> i'm pretty sure microsoft tried this again another time can't remember where i read about it 
[16:02:01] <selwyn> how can you have your os if you don´t have any processes
[16:03:04] * hayley uploaded an image: (82KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/rDRFxwyRmdjktSUbSHHpqOzC/E7BouN4UUAMB5FQ.jpg >
[16:03:06] <contrapunctus> Can anyone say how long Lisp has had incremental compilation and live development?
[16:03:44] <hayley> Long enough?
[16:03:56] <hayley> IIRC JMC mentioned compiling on the fly in 1960?
[16:04:43] <contrapunctus> hayley: I see...and in practice?
[16:05:02] <selwyn> they had lisp compilers in 1960?
[16:05:11] <hayley> Interlisp?
[16:07:36] <contrapunctus> Hm...Interlisp first appeared in 1968, according to Wikipedia...maybe there are some Interlisp papers which mention live development.
[16:10:29] <hayley> "A powerful termination checker ensures that your type-level functions won't send the type checker into a tailspin." hol up
[16:25:13] <contrapunctus> Basically a Rust/C++ fan tried to say that "Java has had [incremental compilation/live development akin to CL and Smalltalk] for decades", which made me wonder how long CL has had them.
[16:25:47] <selwyn> does java have live development now?
[16:40:19] <contrapunctus> I'm not sure what they meant. I said "it's a protocol for communicating with a running Lisp image. There's a Lisp side and the editor side - so there's SLIME for Emacs, SLIMV or something for Vim, etc." and they responded "ok, so exactly like Java has been doing it for decades." Still, my curiosity about where live development first started is piqued regardless.
[16:42:26] <hayley> Total bollocks.
[16:42:58] <gilberth> This is extremely silly, as CL outdates Java by a decade. The Lisp machines by another decade.
[16:43:03] <hayley> In his famous OOPSLA 97 presentation, Alan Kay took the piss of how the state in the art in Java was to restart and recompile still.
[16:43:43] * hayley realises 1997 was 2.5 decades ago
[16:45:02] <selwyn> and yet, the state of the art has not advanced since then (lol)
[16:45:35] <selwyn> perhaps they mistook the kind of code editing and analysis that a java ide provides for live development
[16:46:25] <hayley> gilberth: You remind me that I need to finish my code generator for my damn regex engine.
[16:46:38] <hayley> Also, are you ever going to publish?
[16:47:27] <gilberth> hayley: Perhaps, when I feel better.
[16:48:43] <gilberth> FWIW Maclisp already had a [non-batch] COMPILE function. So the question rather is: When did time sharing become common?
[16:49:26] * hayley now has a follow on paper about using linear logic for tags. It makes writing correct DFA generators easier, and makes it obvious how you can correctly optimise early into compilation.
[16:50:04] <hayley> And that means reducing your register count without "global" program analysis, which is nice.
[16:52:32] <gilberth> Heck, even Lisp I has a non-batch compiler, called COMDEF according to the manual.
[16:53:59] <gilberth> hayley: That's nice. I was lazy and just used that global data flow analysis.
[16:54:54] <hayley> A real analysis would be better but slower to compile.
[16:55:55] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[16:57:03] <gilberth> hayley: Yes, but unlike your application for greping, mine is off-line and thus I don't care. Though I already outpace libc even for single matches.
[16:58:34] <gilberth> All those languag wars are tiresome, wake me when there is any language which is better than what we have. A pity no innovation happened in the last decades.
[16:59:15] <hayley> Depends. Someone might want to wait. And we could JIT better and queue another thread to compile better code if we work for long enough.
[16:59:39] <gilberth> This business of new programming languages du jour is beginning to be like fashion.
[17:01:09] <hayley> Also reminds me I should play with setaffinity for parallel programs.
[17:01:13] <gilberth> hayley: Sure, we can always improve our implementations and, yes, I want sth like whole program analysis while keeping fully dynamic and even more so than our favorite batch compiler (Python). But that is an implementation feature, not a language feature.
[17:02:25] <gilberth> This can be achieved by incremental recompilation, which is something I dream of since decades. You may call it JIT, if you wish.
[17:03:10] <hayley> I'd say it could be a winning strategy for a grep: if you have a small working set, don't waste your time compiling fastest code, but if you do have a large working set, then start to plan better.
[17:04:01] <hayley> beach is afraid of JITing due to warmup and "random" effects for compilation. But then all the call site optimization is a polymorphic inline cache, which is JITing dispatch.
[17:04:03] <gilberth> Again, milady, I don't care about grep.
[17:04:34] <gilberth> beach is afraid of a dynamic system? Hmm.
[17:05:42] <hayley> And I admit I want to introduce some protocol for hacking the compiler. Internally we already use different "strategies" for things, like whether to use a grep machine or prefix searching, but then the user might have SIMD or some domain specific search tricks.
[17:05:47] <gilberth> This becomes irrelevant once we move past the batch oriented thinking.
[17:06:51] <gilberth> hayley: Again. I don't search, I do lexical analysis.
[17:07:30] <hayley> It is also not as if Java people regret their JITs sometimes.
[17:07:56] <hayley> I suppose, in the long run, it's only due to batch oriented stuff like command-line programs, and servers which reboot approximately too often.
[17:09:03] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[17:09:25] <gilberth> Well, you could keep you database about program analysis and binary code. It's lot like the program run change so often in production use. Isn't an executable file some sort of cache already?
[17:09:50] <hayley> Right.
[17:10:07] <gilberth> Heck, these days we even afford to link at exec(2) time.
[17:11:29] <gilberth> In contrast to initial UNIX where an a.out file just was mapped as is into the address space, more or less.
[17:11:56] <hayley> My online compilation trick requires better caching to work though. We don't seem to have thread local variables, as you have to rebind while creating a thread to get a thread-local binding, and that's evidently not modular.
[17:12:25] <gilberth> Hmm.
[17:12:34] <hayley> Or maybe I should use an inline cache.
[17:13:03] <hayley> Can I modify an object created by LOAD-TIME-VALUE?
[17:13:58] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:64da:eb8a:ab76:7f8a) (Remote host closed the connection)
[17:14:18] <gilberth> I believe so.
[17:14:30] *** ec_ is now known as ec
[17:15:14] <hayley> Though, if the RE is known at compile time, I may as well generate for every array type which could have a character (for example) as an element.
[17:15:50] <gilberth> LOAD-TIME-VALUE has a read-only-p arg. The spec says: "If nil (the default), the result must be neither copied nor coalesced; it must be considered to be potentially modifiable data."
[17:16:35] <gilberth> hayley: Oh, you sill have face a zoo of string data types?
[17:17:38] <hayley> Simple and not simple strings, then simple arrays which so happen to hold characters, and simple-base-string too...
[17:18:38] <hayley> S-B-S on SBCL really kicks butt with SIMD as you fit one character per byte, and thus can compare 32 bytes in one AVX2 instruction. On the other hand, it only fits one byte per character.
[17:19:02] <hayley> UTF-8 at least lets us use variable width encoding without much danger.
[17:19:11] <gilberth> For non-simple you could get at the displacement once. For the host of character data types: Silly implementation, but still a major pain with CL as specified.
[17:20:38] <hayley> Hm, then we have fill pointers and adjustable arrays too?
[17:20:39] <gilberth> hayley: You may consider to work on octet streams for high speed, which saves you decoding UTF-8, too.
[17:21:16] <gilberth> hayley: And? Do want to cope with other threads adjusting and thus relocating your string?
[17:21:16] <hayley> Yes, prov (the grep clone) translates character REs to byte REs.
[17:22:14] <hayley> Not necessarily, but SBCL doesn't fully specialise if it doesn't know if it needs the additional indirection.
[17:22:50] <gilberth> hayley, get at the displacement by yourself, once. And be set.
[17:23:14] <hayley> I don't think all adjustable arrays are displaced to another though.
[17:23:45] <hayley> But, in the end, anything beats cl-ppcre™
[17:24:03] <gilberth> Oh yes, that's correct. I was thinking of what the implementations usually do with sequence functions.
[17:25:09] * hayley reads an ad.
[17:25:12] <gilberth> I won't be concerned too much about non-simple arrays.
[17:25:25] <gilberth> You read ads?
[17:25:32] <hayley> "Build a search library with our library for your favourite language!" "Do you have one for Newspeak?"
[17:26:00] <hayley> No adblocker on the phone, sadly.
[17:27:54] <Qwnavery> yello
[17:29:08] <hayley> IIRC I wrote a wc -l thing which could scan for newlines on a mmaped file at 8GB/s or so.
[17:29:38] <hayley> So a little bit of SSE2 shouldn't hurt at all.
[17:30:07] <gilberth> hayley: You're still not forced to actually read the ad ;-)
[17:30:45] * gilberth rather wants that read(2) is fixed, so that mmap'ing isn't needed.
[17:32:03] <Qwnavery> download ublock origin or something, better yet rig your home network up with a pihole and set it up as your mobile and stationary DNS
[17:32:26] <hayley> Yes, but I like to annoy people who think they know my favourite languages.
[17:32:47] <hayley> PiHole won't work, the WiFi chip on this phone is dead and so I always use celluar. Not joking.
[17:33:03] <Qwnavery> Erm, it will still work?
[17:33:33] <Qwnavery> Run a VPN into your home network which will filter all your traffic through the pihole as your DNS
[17:34:11] <Qwnavery> As long as you have a domain name (with DDNS on your router) it should be good.
[17:34:37] <hayley> Right, right. I misread.
[17:35:13] <Qwnavery> lol just cart around a pihole and connect to maccas wifi
[17:36:47] <hayley> OTOH now I have no motivation to hack my own stuff, so I can't really complain gilberth won't publish.
[17:40:39] <hayley> (Like, can I really afford to have the world's fastest RE compiler that doesn't invent its own assembler (looking at PCRE2)? Think I need to find a bajillion gofundme sponsors first or something.)
[17:43:29] <hayley> (I'm only half joking; it doesn't need much maintenance surely, as gilberth only proved the technique correct, and I still only have 1kLOC or so. But then people sponsor for the dumbest shit...)
[17:52:20] <gilberth> Well, being correct is IMHO a major part as is the O(n) runtime complexity.
[17:53:06] <hayley> "only" was meant jokingly, it's quite important. Or it could be meant in the Knuth "I only proved this program correct, not tested it" sense.
[17:53:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[17:53:26] <gilberth> Heh.
[17:56:41] <hayley> In either case, I suspect it wouldn't be a big maintenance burden.
[17:57:33] <gilberth> Sure not, once it works, what needs to be maintained?
[17:58:09] <gilberth> Unless you want to enter the fashion industry and come up with new decorations each year.
[17:59:26] <hayley> idk, just not a lot that could go wrong. It's some 30x smaller than the Rust regex interpreter from memory?
[18:00:08] <hayley> Oh, I meant 65x.
[18:04:59] <gilberth> And? OTOH my clex.lisp is like 3kLoC, but it's a full scanner generator. And: Doesn't this something about the expressive power of Lisp?
[18:05:15] <gilberth> * say sth
[18:05:39] <gilberth> I didn't even try to be brief.
[18:07:51] <hayley> I just tried to follow the paper as closely as possible, so that I would minimize the likelihood of screwing it up.
[18:08:16] <gilberth> Heh.
[18:08:40] <hayley> ..and the least likely to fail code is code you don't write. So having 65x less code is nice.
[18:09:26] <gilberth> There is a theory that the number of defects is proportional to the number of lines no matter what language.
[18:10:23] <gilberth> And somehow CL is dense, although it doesn't really feel that way.
[18:12:26] <gilberth> But: Lisp offers you more powerful abstractions, also with macros. Programming is about abstraction and you shouldn't repeat yourself by cut and paste or filling in some boiler plates.
[18:13:03] <hayley> Well, I have a replicated object system and distributed hash table, including pluggable transports, custom message types and a lock-free scheduler in like 11kLOC.
[18:13:18] <hayley> There are long names, but otherwise I think it is quite small.
[18:13:22] <selwyn> i´ve never agreed that macros are buggy and hard to write
[18:14:06] <hayley> Given the LOC counts I find in https://applied-langua.ge/posts/terminal-boredom.html, I think it's pretty damn good.
[18:14:07] -ixelp- Terminal boredom, or how to go on with life when less is indeed less
[18:14:36] <gilberth> 11kLoC already is quite some size for CL code.
[18:15:17] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[18:16:19] <hayley> 5.8kLOC of Go for a ncurses toy or 11kLOC of CL for a full blown DHT, virtual machine, GUI interactor...
[18:16:48] *** Quits: X-Scale (~ARM@46.50.5.115) (Ping timeout: 265 seconds)
[18:16:48] *** X-Scale` is now known as X-Scale
[18:17:34] <gilberth> As I said: CL is surpisingly dense.
[18:19:54] <hayley> Yet I'm still stuck with the name UPDATE-SYSTEM-FOR-NEW-INTERESTING-BLOCK-PREDICATE.
[18:20:29] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 264 seconds)
[18:23:53] *** Joins: selwyn (~selwyn@user/selwyn)
[18:24:06] <gilberth> Use "US4NIBP".
[18:24:41] <gilberth> hayley: Otherwise this is almost literate programming :)
[18:24:46] <contrapunctus> lol
[18:25:01] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2.1)
[18:27:46] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Quit: WeeChat 3.2.1)
[18:28:50] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[18:36:01] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:39:17] <shka> selwyn: really?
[18:39:31] <shka> i found macros to be very hard to write initially
[18:39:43] <selwyn> uh
[18:40:03] <selwyn> let me rephrase
[18:40:06] <shka> mostly because it forces into thinking in expand time and runtime at the same time
[18:40:57] <selwyn> i don´t find them very easy to think about but i think that writing macros correctly is far from impossible, it is just time consuming
[18:41:14] <selwyn> you have to remember things like avoiding variable name capture
[18:41:27] <contrapunctus> hayley: wow, someone hates Gemini 😏
[18:41:40] <selwyn> fewer pitfalls associated with that than writing secure c code imo
[18:41:57] <selwyn> which i don´t think i can do
[18:41:59] <gilberth> selwyn: This just takes discipline. Macros, I mean.
[18:43:38] <gilberth> Though I must confess that I have trouble with macro defining macros and SETF expanders at times.
[18:46:24] <gilberth> What I also love are compiler macros. Keep the function abstraction where possible, but optimize idiomatic uses.
[18:48:54] <selwyn> still haven´t learnt how to do those
[18:50:25] <contrapunctus> hayley: even though Gemini is vastly limited compared to the web and I prefer the web in general, Gemini addresses some real issues. When I open a Gemini page, I am guaranteed that - 1. I won't get a blank page just because I'm using NoScript or Tor 2. my machine will not run out of RAM, the fan will not started screaming at me 3. I am not being tracked by JS or cookies 4. the page will display the
[18:50:26] <contrapunctus>  way I expect 5. the page will load quickly.
[18:53:01] <contrapunctus> hayley: also, see how there are basically just two company-maintained browser engines around, since the web is just too big for a new, community-scale engine. A very real problem of large systems, even if I do not particularly like minimalism.
[18:53:36] <gilberth> I don't see the point. Just use a browser with no JS, no CSS, no images, no cookies and you have the same.
[18:54:02] <contrapunctus> gilberth: I do that, _every day,_ and it's nothing like Gemini. Didn't you see #1 up there?
[18:54:43] <contrapunctus> "guarantee" is different from "works 75% of the time with fiddling"
[18:55:16] <gilberth> Yes, I did. But I don't see the point of having a new protocol, which just looks like the initial HTML.
[18:55:55] <contrapunctus> gilberth: that's a separate issue. But the needs it meets are very, very real.
[18:57:00] <gilberth> The trouble with the web is rather that we don't have a spec as it still is defined by a duopol. Not as worse as in the 90s, where writing a practical browser was made very difficult because of Netscape.
[18:57:43] <White_Flame> the web browser is basically an OS now
[18:58:12] <gilberth> contrapunctus: Those needs could be met with HTML, too. And if the need would really be that huge, people would offer pages that would render ok with a HTML-only browser.
[18:58:13] <contrapunctus> (I'm interested in seeing a maximalist solution to those issues. I trust it can be found - I'd hate for Gemini to be the only answer - but I haven't seen it yet.)
[19:00:46] <gilberth> Granted, we would have been better off when the initial web at times of designers wanting pixel precise control would have been kept alone by offering some say PostScript with interaction.
[19:02:22] <gilberth> That could have been some semi-sane display server protocol even. Now we have a broken document description language and a broken remote application access protocol.
[19:02:35] <contrapunctus> gilberth: protocol has a huge feature set - people flock to the browser supporting the most features - sites are made to cater to those browsers - anybody disabling those features suffers.
[19:03:24] <contrapunctus> I don't see a solution other than "make new standard"
[19:04:29] <contrapunctus> It might be a subset of HTML and CSS, who knows. Or maybe someone figures out a way to sandbox JS to make overuse of client resources and invasions of privacy impossible.
[19:04:51] <gilberth> HTML is fine, you still can use it for what it was designed for.
[19:05:31] <White_Flame> especially if you ignore legacy
[19:05:41] <White_Flame> and just use the modern stuff
[19:07:40] <gilberth> contrapunctus: Take my clim-spec HTML rendering. It works fine with w3m for example. I don't need a new protocol for that.
[19:08:36] <contrapunctus> That's one of the reasons I like Freenet, actually. JS is actively stripped out. Pages cannot track users. Distributed storage means ads are not such a 'necessity', hosting costs are spread out, and link rot is combated.
[19:08:59] <contrapunctus> gilberth: yeah...for a Tor Browser user, pages like that are few and far in between.
[19:10:12] <gilberth> And besides JS is not evil per se.
[19:10:39] <White_Flame> how is link rot combated?  freenet is just a cache
[19:12:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:21:42] <contrapunctus> gilberth: I'm sure JS has uses outside of ads, cryptomining, user tracking, and ad hoc nonstandard UIs, and can be used in a way which is considerate of client resources...but until there's a sandbox like I mentioned, I'll stay in the NoScript camp.
[19:23:39] <contrapunctus> oh also...no CAPTCHAs on Gemini. Because fuck those in particular.
[19:24:31] <contrapunctus> (You get vastly more CAPTCHAs if you're using Tor Browser.)
[19:35:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:38:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:48:50] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:49:16] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:52:13] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[19:52:27] <gilberth> contrapunctus: You complain about content providers, what makes you believe a new random protocol would solve that? Content provides are free to provide you no-non-sense content already, when they don't with what we have, they won't with what ever new protocol there is. Hint: Nobody forces you to even browse their sites.
[19:54:08] *** Joins: aeth (~aeth@user/aeth)
[19:55:58] <contrapunctus> gilberth: regardless of whether that's true or not, it doesn't solve the issues I'm facing.
[19:56:25] <gilberth> Nothing will.
[19:57:12] <contrapunctus> Incidentally, the conventions and technical limitations of a network (Gemini, Freenet) work remarkably well to provide the guarantees I'm after. If there was more content on these networks, the problem would be more or less solved.
[20:00:31] <gilberth> Well, you are like a child here, crying for more free content suited to your needs, while there isn't enough demand in general to make the content providers care and thus not accepting reality.
[20:02:08] <contrapunctus> 'Accepting reality' is not really my style, I prefer 'shaping reality through effort' ;P
[20:03:26] <contrapunctus> One way is to reach out to problematic websites (e.g. those which do not render without JS) and request the owners to fix them.
[20:04:04] <gilberth> Then go ahead and find ways to sell your idea to content providers. Show them how they could benefit.
[20:04:18] <contrapunctus> The other thing I was thinking about was to write a tool to convert JS-using websites to static websites (e.g. downloading images from CDNs etc) - with that, it could be possible to migrate web pages to e.g. Freenet.
[20:04:42] <gilberth> contrapunctus: What would I gain by fixing it?
[20:06:51] <White_Flame> contrapunctus: btw, how does freenet combat link rot?
[20:10:17] <contrapunctus> gilberth: website loads faster, more accessible, more trustworthy, less power consumption for clients, possibly less bandwidth consumption, ...?
[20:10:31] <contrapunctus> White_Flame: no SPoF, possibility of pinning content using KeepAlive...
[20:10:51] <gilberth> contrapunctus: How does this make me make more money?
[20:11:28] <contrapunctus> gilberth: I just listed some ways of saving you money and keeping your visitors happier.
[20:11:49] <White_Flame> we need less money on the web anyway
[20:12:08] <White_Flame> but I'd settle for tracking being made illegal
[20:12:17] <gilberth> contrapunctus: I can't see how that saves me money.
[20:13:18] <gilberth> I mean, if that were so easy, every news site, say, would do just that.
[20:16:48] *** Quits: clothespin (~awolven@2601:246:4000:1030:86e:7e25:8c6f:53da) (Remote host closed the connection)
[21:19:48] <selwyn> don´t understand why gas prices are high here
[21:34:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[21:35:56] *** Joins: aeth (~aeth@user/aeth)
[22:18:13] * shka is thinking about how cool it would be to he climacs with something in the ilk of emacs tramp mode
[22:19:35] <gilberth> It would be even cooler when CL itself could do that.
[22:20:28] <shka> well, if climacs does it, then it is like like cl doing it, but i see your point
[22:20:49] <shka> cl-tramp: the new cool project? :)
[22:24:24] <gilberth> A host protocol for CL would be nice.
[22:32:38] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2.1)
[22:44:53] <shka> it is doable, but without systems using it won't be useful
[23:02:39] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:58:46] *** Quits: Posterdati (~posterdat@host-95-235-15-123.retail.telecomitalia.it) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[23:58:58] *** Joins: _Posterdati_ (~posterdat@host-95-235-15-123.retail.telecomitalia.it)
