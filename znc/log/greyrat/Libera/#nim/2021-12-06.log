[00:02:41] <arkanoid> this modules exposes numpy array <-> arraymancer Tensor interop: https://github.com/SciNim/scinim/blob/main/tests/tnumpyarrays.nim, but this is just something if you have to deal with large matrices. As soon as you have to deal with a table than contains a string col, interop stops
[00:03:15] <arkanoid> so scinim is for crunching numbers, not handling datasets
[00:07:53] *** Joins: filcuc_ (~filippo@37.162.130.126)
[00:13:46] <arkanoid> I mean this https://github.com/SciNim/scinim/issues/7
[00:14:01] <FromDiscord> <dain> more generic proc confusion. what am I doing wrong here? https://play.nim-lang.org/#ix=3H7Y↵I'm trying to make a converter from the python style `key` method of sorting to how nim does it with a `cmp` function
[00:15:37] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3H7Z
[00:16:14] <FromDiscord> <vindaar> it refers to the procedure and not the `int`. That the procedure is a closure
[00:17:35] <FromDiscord> <ynfle (ynfle)> You don't need 2 generics because you know the key proc has to return int
[00:17:39] <FromDiscord> <ynfle (ynfle)> https://play.nim-lang.org/#ix=3H81
[00:18:05] <FromDiscord> <ynfle (ynfle)> @dain try this ☝
[00:18:05] <FromDiscord> <dain> the `key` proc does not have to return int
[00:19:15] <FromDiscord> <ynfle (ynfle)> Then you switched the generics https://play.nim-lang.org/#ix=3H83
[00:19:20] <FromDiscord> <ynfle (ynfle)> This works
[00:19:27] <FromDiscord> <dain> yes you're right
[00:19:36] <FromDiscord> <dain> i figured it out at the same time, i needed `T` instead of `U` in the inner proc
[00:20:52] <FromDiscord> <ynfle (ynfle)> Great
[00:24:04] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3H86
[00:24:18] <FromDiscord> <ynfle (ynfle)> Can you post the whole code?
[00:25:27] <FromDiscord> <dain> In reply to @ynfle (ynfle) "Can you post the": https://play.nim-lang.org/#ix=3H88 it's the same as before except the final line uses the `=>` sugar
[00:25:51] <FromDiscord> <ynfle (ynfle)> Ok
[00:26:04] <FromDiscord> <dain> oh wait hold on, the generic is still wrong
[00:26:10] <FromDiscord> <ynfle (ynfle)> too many generics I think
[00:27:03] <FromDiscord> <pyautogui> How is IO intended to be done with --mm:none? I am trying to use my aoc solution with --mm:none. Should I {.importc.} printf or what?
[00:28:10] <FromDiscord> <dain> In reply to @ynfle (ynfle) "too many generics I": fixed version https://play.nim-lang.org/#ix=3H8a
[00:28:29] <FromDiscord> <dain> the second-to-last line works, the last line doesn't
[00:28:57] <FromDiscord> <dain> but conceptually both of the functions are doing the same thing
[00:29:36] <FromDiscord> <ynfle (ynfle)> @pyautogui why no mm?
[00:30:18] <FromDiscord> <ynfle (ynfle)> @dain it works if you specify the type https://play.nim-lang.org/#ix=3H8c
[00:30:26] <FromDiscord> <ynfle (ynfle)> Probably too many generics.
[00:31:26] <FromDiscord> <pyautogui> For speed.
[00:31:32] <FromDiscord> <ynfle (ynfle)> Many open an issue on https://github.com/nim-lang/Nim
[00:31:47] <FromDiscord> <ynfle (ynfle)> Have you tried `--gc:arc` or `--gc:orc`?
[00:32:04] <FromDiscord> <ynfle (ynfle)> Are you using `-d:release` is your solution too slow?
[00:32:15] <FromDiscord> <pyautogui> Yes. I want the maximum of speed; --gc:arc is good, and I have all optimization on.
[00:33:14] <FromDiscord> <pyautogui> (edit) "Yes. I ... wantI" 03added "just" | "justwant the maximum of speed; --gc:arc is good, and I have all optimization on. ... " 03added "I would never use --mm:none in any sort of serious project."
[00:33:55] <FromDiscord> <pyautogui> I guess I will just {importc} printf.
[00:34:15] <FromDiscord> <dain> In reply to @ynfle (ynfle) "@dain it works if": thank you, is this a bug or expected behavior?
[00:34:24] <FromDiscord> <dain> i.e. that it can't infer that `x` is a string
[00:34:41] <FromDiscord> <dain> oh wait nvm i saw your other message
[00:36:32] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:56:51] *** Joins: jjido (~Denis@90.213.58.125)
[00:57:19] <FromDiscord> <retkid> i would like the option to turn the gcc off and do manual memory allocation
[00:57:49] <FromDiscord> <retkid> In reply to @pyautogui "Yes. I just want": -d:danger is a good place to start. Then start passing gcc settings over
[00:58:00] <FromDiscord> <retkid> make sure you have the loggers and debuggers off
[00:58:05] <FromDiscord> <retkid> and then you should start optimizing the code
[00:58:36] <FromDiscord> <retkid> all else fails, port over to C
[00:58:54] <FromDiscord> <retkid> (edit) "C" => "or use inline ASM"
[00:58:59] <FromDiscord> <retkid> (edit) "ASM" => "ASM, which is a thing in nim"
[00:59:05] <FromDiscord> <retkid> (edit) "all else fails, port over to ... or" 03added " C"
[00:59:50] <FromDiscord> <retkid> but before I'd do asm Id probably try to use Fortran for floating point math
[01:00:45] <FromDiscord> <retkid> iirc you also use --asm to compile to ASM code but idk how you can view it
[01:00:55] <FromDiscord> <retkid> if you can view it you can start looking for optimizations in the code itself
[01:01:51] <FromDiscord> <retkid> this is Nim's "official" priority list for optimizations
[01:02:10] <FromDiscord> <retkid> sent a long message, see http://ix.io/3H8h
[01:03:28] <FromDiscord> <Elegantbeef> If you want to have no memory manager do `--gc:non`
[01:03:37] <FromDiscord> <retkid> yes but you cant cull vars
[01:03:44] <FromDiscord> <Elegantbeef> What?
[01:04:02] <FromDiscord> <retkid> you cant remove variables from memory space?
[01:04:05] <FromDiscord> <retkid> unless im wrong
[01:04:26] <FromDiscord> <Elegantbeef> You can allocate/free memory
[01:05:05] <FromDiscord> <Elegantbeef> `var a = create(int, 300); dealloc(a)`
[01:05:20] <FromDiscord> <Elegantbeef> We just allocated 300 \ sizeof(int) bytes then freed them
[01:05:33] <FromDiscord> <retkid> hmmm
[01:05:43] <FromDiscord> <Elegantbeef> I dont even know what "removing variables from memory space" even means
[01:05:59] <FromDiscord> <retkid> how is the create proc separate from just the normal =
[01:06:00] <FromDiscord> <Elegantbeef> The stack will "free" variables on the stack as you move around, and thee heap is under your control
[01:06:25] <FromDiscord> <Elegantbeef> `create` uses the nim memory allocator and returns a `ptr int`
[01:06:48] <FromDiscord> <Elegantbeef> It's akin to doing `int a = malloc(sizeof(int)  300); free(a)` in C
[01:07:10] <FromDiscord> <pyautogui> @retkid Thanks
[01:07:11] <FromDiscord> <retkid> that makes sense
[01:07:33] <FromDiscord> <retkid> i forgot about dealloc and i tried using free(a)
[01:07:37] <FromDiscord> <retkid> (edit) "i forgot about dealloc and i tried using free(a) ... " 03added "but no proc"
[01:07:52] <FromDiscord> <Elegantbeef> Infact the implementation is `cast[ptr T](alloc0(sizeof(T)  size))`
[01:08:32] <FromDiscord> <retkid> so, am i wrong to think that doing this would be pretty unstable given my interactions with channels?
[01:08:49] <FromDiscord> <Elegantbeef> If using arc/orc they have a shared heap so not really
[01:09:00] <FromDiscord> <Elegantbeef> Aslong as you properly guard you're fine
[01:09:13] <FromDiscord> <retkid> properly guard?
[01:09:29] <FromDiscord> <Elegantbeef> Dont allow race conditions
[01:11:13] <FromDiscord> <pyautogui> --asm is broken on Mac, I do believe.
[01:11:23] <FromDiscord> <pyautogui> Is an issue open for that?
[01:12:03] <FromDiscord> <retkid> let me make sure thats right
[01:12:40] <FromDiscord> <retkid> yea thats the right command?
[01:12:56] <FromDiscord> <retkid> https://github.com/nim-lang/Nim/issues/17139
[01:13:02] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[01:13:27] <FromDiscord> <pyautogui> Got it.
[01:13:43] <FromDiscord> <pyautogui> Must have forgotten about it.
[01:13:48] *** Joins: src_ (~src@user/src)
[01:14:41] *** Quits: filcuc_ (~filippo@37.162.130.126) (Ping timeout: 252 seconds)
[01:14:42] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:16:04] <FromDiscord> <retkid> In reply to @Elegantbeef "Dont allow race conditions": ah. Yea I think about that a lot in my code. I try not to order threaded things based upon insertion but keep a code with it, usually in a table and then sync
[01:16:26] <FromDiscord> <retkid> ie thread[1] = FlowVar[int]
[01:16:53] *** Quits: src (~src@user/src) (Ping timeout: 252 seconds)
[01:21:07] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[01:25:03] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Quit: noeontheend)
[01:25:16] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[01:34:36] *** Joins: jjido (~Denis@90.213.58.125)
[01:36:59] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[01:38:20] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Read error: Connection reset by peer)
[01:38:42] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[01:55:08] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:55:18] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Read error: Connection reset by peer)
[01:57:17] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[02:20:20] <arkanoid> does trasformation from cstring to string perform a copy?
[02:20:35] <FromDiscord> <Solitude> yes
[02:20:45] *** Quits: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com) (Read error: Connection reset by peer)
[02:20:47] <arkanoid> and the other way around?
[02:20:53] <FromDiscord> <Solitude> no
[02:21:00] <arkanoid> thanks
[02:22:43] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[02:23:59] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Read error: Connection reset by peer)
[02:27:59] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[02:29:54] *** Joins: rockcavera (~rc@192.12.112.240)
[02:29:55] *** Quits: rockcavera (~rc@192.12.112.240) (Changing host)
[02:29:55] *** Joins: rockcavera (~rc@user/rockcavera)
[02:36:03] <FromDiscord> <rinfz> why do the docs recommend using collect over filter, map? also, if I implement things like std::inclusive_scan from c++ is it better to use a template similar to stdlib stuff or just use a proc?
[02:36:07] <arkanoid> passing strings from python to nim is really a pain
[02:48:55] <nrds> <06Prestige99> Real question, why do that in the first place instead of just using nim?
[02:58:33] <arkanoid> Prestige, pandas and handling tabular data
[02:58:55] *** Joins: src (~src@user/src)
[02:59:36] <nrds> <06Prestige99> we def need more data analytics libs
[02:59:44] <FromDiscord> <Elegantbeef> @rinfz\: proc is preferred  unless there is a reason to always inline
[03:05:48] <NimEventer> New thread by Gavr: Using if/case expressions as real expressions?, see https://forum.nim-lang.org/t/8681
[03:05:58] <arkanoid> Prestige have a look at these results: https://play.nim-lang.org/#ix=3H8J  I'm getting passing string being 22 to 98 time slower than python-to-python
[03:07:00] <nrds> <06Prestige99> Idk anything about python really but I'm kind of not surprised
[03:16:49] <FromDiscord> <rinfz> Ok, thanks Elegantbeef
[03:30:11] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:34] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:35:02] <arkanoid> what's the actual difference from an inline function and a template?
[03:35:25] <arkanoid> apart from the fact that one is metaprogramming and the other is not
[03:36:42] <FromDiscord> <ynfle (ynfle)> inline isn't enforced
[03:36:46] <FromDiscord> <ynfle (ynfle)> It's a suggestion to the c compiler
[03:36:57] <FromDiscord> <ynfle (ynfle)> Template is computed by the VM at compile time
[03:37:25] <FromDiscord> <ynfle (ynfle)> You can have things like `when` blocks that change the generated c code and don't have the cost of `if` statments
[03:37:56] <FromDiscord> <ynfle (ynfle)> Template can also use the the surrounding non-global context because they are computed at compile time
[03:43:23] *** Quits: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de) (Quit: Leaving)
[03:58:04] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:58:39] <FromDiscord> <Elegantbeef> Ynfle the same can be said about procs and `when`
[03:58:45] *** Joins: Colt (~Colt@user/colt)
[03:59:25] <FromDiscord> <Fish-Face> is there a built in iterator (or function producing sequences to iterate over) which will count either up or down
[03:59:35] <FromDiscord> <Elegantbeef> Procs can have when thanks to generics and are also handled similarly to templates, and actually templates arent really computed by the VM
[03:59:43] <FromDiscord> <Elegantbeef> you mean `for x in 0..10`?
[03:59:56] <FromDiscord> <Fish-Face> if that worked with `10..0` then yes
[03:59:58] <FromDiscord> <Elegantbeef> or `for x in countUp(0, 10)` `for x in countDown(10, 0)`?
[04:00:16] <FromDiscord> <Elegantbeef> Ah aoc day 5?
[04:00:21] <FromDiscord> <Fish-Face> 😉
[04:00:35] <FromDiscord> <Elegantbeef> `for x in min(a, b)..max(a, b)`
[04:00:48] <FromDiscord> <Fish-Face> hmph
[04:01:33] <FromDiscord> <Fish-Face> It's not that I can only solve it like that it's just I like to do things in a certain way as a way to explore the language 😛
[04:03:20] <FromDiscord> <Elegantbeef> Hey it's how i solved it
[04:03:28] <FromDiscord> <Elegantbeef> And my solution is fastish
[04:05:40] <FromDiscord> <Fish-Face> ah I was meaning - even if presented with a perfectly reasonable alternative solution doesn't mean I want to use it 🙂
[04:06:41] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[04:09:02] <FromDiscord> <retkid> In reply to @Elegantbeef "`var a = create(int,": having trouble assigning a var to this
[04:10:05] <FromDiscord> <retkid> wait im thinking about this wrong
[04:13:33] <FromDiscord> <retkid> so i can make it its own unique datatype and assign it to a method
[04:13:40] <FromDiscord> <retkid> but i cant assign data itself to it?
[04:14:22] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3H8V
[04:14:40] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3H8V" => "https://play.nim-lang.org/#ix=3H8W"
[04:14:58] <FromDiscord> <retkid> i mean it works, but for one var thats kinda ugly
[04:15:11] <FromDiscord> <retkid> though i do kinda like it so i can organize a lot of data in this type
[04:20:19] <FromDiscord> <Elegantbeef> I dont know what you mean
[04:37:19] <arkanoid> do you know where I can reach Mr Stefan Salewski?
[04:40:04] *** Joins: rockcavera (~rc@192.12.112.240)
[04:40:04] *** Quits: rockcavera (~rc@192.12.112.240) (Changing host)
[04:40:04] *** Joins: rockcavera (~rc@user/rockcavera)
[04:40:46] <arkanoid> or you know if there's anything that make bindings from gobject introspection?
[04:41:05] <arkanoid> I know about gintro but seems tightly coupled with gtk
[04:43:24] <FromDiscord> <ynfle (ynfle)> @beef by computer I meant expanded and inlined. Not like static computation
[04:43:45] <FromDiscord> <ynfle (ynfle)> \compute
[04:44:26] <FromDiscord> <retkid> In reply to @Elegantbeef "I dont know what": As opposed to just doing ↵x= create(int 300)↵x= 1
[04:48:57] <arkanoid> ynfle. I forgot to thank you for the answer. I got the difference
[04:55:02] <FromDiscord> <Rika> In reply to @retkid "As opposed to just": What? I still don’t understand the idea
[04:58:21] *** Quits: src (~src@user/src) (Quit: Leaving)
[04:58:56] <FromDiscord> <ynfle (ynfle)> rika, template vs. inlne?
[05:01:52] <NimEventer> New question by Zecong Hu: Implementing map &amp; min that takes the tables.keys iterator as argument in Nim, see https://stackoverflow.com/questions/70240040/implementing-map-min-that-takes-the-tables-keys-iterator-as-argument-in-nim
[05:02:11] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3H92
[05:02:38] <FromDiscord> <Rika> Well yes, an object is not it’s field
[05:02:54] <FromDiscord> <retkid> so you can only assign vars to fields in a shared object?
[05:02:58] <FromDiscord> <Rika> Oh wait no i misread
[05:03:06] <FromDiscord> <retkid> (edit) "shared object?" => "ptr?"
[05:03:09] <FromDiscord> <Rika> Okay you can do this with [] after the variable name
[05:03:17] <FromDiscord> <Rika> To dereference
[05:03:27] <FromDiscord> <retkid> bella, thank you
[05:03:30] <FromDiscord> <Elegantbeef> with a field access the compiler knows to deference automagically, with a integer it doesnt
[05:03:56] <FromDiscord> <Rika> It technically could
[05:04:01] <FromDiscord> <Elegantbeef> you will most likely want to do `cast[ptr array[200, int]](createShared(int, 200))` for the proper logic
[05:04:11] <FromDiscord> <Elegantbeef> I mean yes it could if you did `ptr T = T`
[05:07:19] <FromDiscord> <retkid> 1 extra thing
[05:07:42] <FromDiscord> <retkid> what happens if the var exceeded the bytes assigned to it?
[05:08:19] <FromDiscord> <Rika> Undefined behaviour
[05:08:29] <FromDiscord> <Rika> Most likely a segmentation fault
[05:08:48] <FromDiscord> <retkid> is there anyway to manage this?
[05:08:58] <FromDiscord> <retkid> well
[05:09:03] <FromDiscord> <retkid> i suppose the answer is yes
[05:09:14] <FromDiscord> <retkid> but whats an efficient way to manage this?
[05:09:34] <FromDiscord> <retkid> try excepts wont work for the resize?
[05:09:45] <FromDiscord> <retkid> (edit) "resize?" => "resize if its a segfault ?"
[05:10:34] <FromDiscord> <Rika> Track the size
[05:10:40] <FromDiscord> <Rika> And manually handle it
[05:10:54] <FromDiscord> <retkid> yea i should just make a thread that just watched it
[05:11:05] <FromDiscord> <Rika> Ah this is threaded
[05:11:12] <FromDiscord> <Rika> Hmm it might be a bit hard then
[05:11:27] <FromDiscord> <Rika> Are you aiming for lock free?
[05:11:31] <FromDiscord> <retkid> yea, where do i put the code that just watches it
[05:11:44] <FromDiscord> <retkid> In reply to @Rika "Are you aiming for": locks make things complicated, ideally yes
[05:12:05] <FromDiscord> <Rika> Lock free makes it more complicated I would say , just an FYI
[05:12:22] <FromDiscord> <Elegantbeef> If you're mutating from threads this you pretty much need a lock
[05:12:50] <FromDiscord> <Rika> ??? Really
[05:12:56] <FromDiscord> <retkid> i dont see why i would
[05:13:33] <FromDiscord> <retkid> its on shared heap, so you just add to it. the problem would arise when i cant catch it being too close to the limit
[05:13:40] <FromDiscord> <Rika> I mean for basic stuff you should use locks since it is just simpler and easier
[05:14:02] <FromDiscord> <retkid> which i guess is a race condiitoon \
[05:14:05] <FromDiscord> <retkid> (edit) "condiitoon \" => "condition"
[05:14:10] <FromDiscord> <Elegantbeef> I mean if multiple threads are mutating a collection, without locks you're going to get so many race conditions if you dont design it to accomidate
[05:14:26] <FromDiscord> <Rika> If one of two threads does an add and another thread does a delete before the add then you either don’t delete or don’t add because the threads trampled over each other
[05:14:39] <FromDiscord> <Rika> So you have to use some sort of synchronisation method
[05:15:07] <FromDiscord> <retkid> it would be add only
[05:15:20] <FromDiscord> <retkid> managing deleting and adding is too much of a nightmare
[05:15:27] <FromDiscord> <Rika> Even if it is add only
[05:15:32] <FromDiscord> <Elegantbeef> There is the even more worrisome thing of iterating over on one thread whilst another one adds and moves the data cause you went over the length and reallocated
[05:15:38] <FromDiscord> <Rika> If two threads add at the same time one add will be lost
[05:15:48] <FromDiscord> <retkid> nothing iterates over it i dont think
[05:16:00] <FromDiscord> <retkid> In reply to @Elegantbeef "There is the even": i also have a iterator for this
[05:16:05] <FromDiscord> <retkid> (edit) "a" => "an"
[05:16:24] <FromDiscord> <Elegantbeef> I mean if you're adding whilst accessing you have an issue
[05:16:32] <FromDiscord> <Elegantbeef> iterating was just a long operation
[05:16:32] <FromDiscord> <retkid> ah
[05:16:35] <FromDiscord> <Rika> An iterator would need a lock or a copy of the data so it doesn’t change
[05:16:55] <FromDiscord> <retkid> think i posted this guy here before
[05:17:02] <FromDiscord> <retkid> this guy is recursive
[05:17:04] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3H93
[05:17:07] <FromDiscord> <retkid> dont think it works for this though
[05:17:16] <FromDiscord> <retkid> (edit) 
[05:17:44] <FromDiscord> <retkid> i used to have a sleep in there idk where it went
[05:18:01] <FromDiscord> <Rika> Still if something changes then you probably just yielded  malformed data
[05:18:32] <FromDiscord> <Elegantbeef> The only time you can do lockfree stuff is if your algorithm or design prevents race conditions
[05:18:51] <FromDiscord> <Rika> Yeah of course
[05:19:04] <FromDiscord> <Elegantbeef> For instance if you're only adding you could have the last bit of data be a pointer to another chunk and have a large linked list
[05:19:13] <FromDiscord> <retkid> i could make it read the ptr every 5 seconds
[05:19:20] <FromDiscord> <retkid> so it always has a seperate state
[05:19:22] <FromDiscord> <retkid> (edit) "seperate" => "separate"
[05:20:00] <FromDiscord> <Elegantbeef> If you only grow then you never have any race conditions if this is never mutated aside from that
[05:20:30] <FromDiscord> <Elegantbeef> With my example of course
[05:21:19] <FromDiscord> <retkid> so you mean the last entry in the sequence is a pointer
[05:21:30] <FromDiscord> <retkid> and you insert to 1 before that?
[05:21:35] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3H95
[05:21:36] <FromDiscord> <Rika> Only adding still has race conditions
[05:21:57] <FromDiscord> <Elegantbeef> You lock the pointer when adding of course
[05:22:07] <FromDiscord> <Elegantbeef> but that gives you a much smaller lock foot print
[05:22:14] <FromDiscord> <retkid> echo seqence[sequence.len()-1] changes as its done
[05:22:16] <FromDiscord> <Rika> It’s still a lock
[05:22:28] <FromDiscord> <retkid> (edit) "done" => "operated"
[05:22:32] <FromDiscord> <Elegantbeef> Of course
[05:49:09] <arkanoid> I'm trying to install futhark but I keep getting "/usr/bin/ld: cannot find -lclang"
[05:49:27] <arkanoid> I'm trying with "nimble install --passl:-L/usr/lib/llvm-10/lib futhark"
[05:49:43] <arkanoid> lib is in /usr/lib/llvm-10/lib/libclang.so.1
[05:50:57] <arkanoid> complete error is: https://play.nim-lang.org/#ix=3H9a
[05:51:07] <arkanoid> it seems to me that -l and -L args are in wrong order
[05:51:54] <arkanoid> shoudn't -L<path> come before -lclang ?
[05:55:11] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:59:18] <arkanoid> oh dear, I had to manually create symlink, just like here https://github.com/lvzixun/Clang-Complete/issues/49
[06:16:26] <FromDiscord> <Delta> does nim have any unit testing tools/libs that support test caching?
[06:22:48] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:31:04] <FromDiscord> <TryAngle> In reply to @Delta "does nim have any": Haven't tried it but can't u define global variables and just use them in the tests?
[06:36:47] *** Joins: sagax (~sagax_nb@user/sagax)
[07:12:43] <arkanoid> Delta, what is test caching?
[07:13:23] <FromDiscord> <Delta> If you've ever used `go test`, it can cache the results of unit tests that refer to unchanged code
[07:13:58] <FromDiscord> <Delta> so if I have 4000 unit  tests, but I've only changed one package only the N tests that refer to code in that package get re-run when I run `go test` again
[07:16:00] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:14] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Remote host closed the connection)
[08:47:32] <NimEventer> New post on r/nim by smazga: Dynamic proc calling, see https://reddit.com/r/nim/comments/r9zew0/dynamic_proc_calling/
[08:48:52] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:56:28] *** Quits: dom96 (~dom@mail.nim-lang.org) (*.net *.split)
[08:56:28] *** Quits: ehmry (~quassel@2a03:3b40:fe:ab::1) (*.net *.split)
[08:56:28] *** Quits: adium (adium@user/adium) (*.net *.split)
[08:56:29] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[08:56:29] *** Quits: Colt (~Colt@user/colt) (*.net *.split)
[08:56:29] *** Quits: tk (~tk@ircpuzzles/staff/tk) (*.net *.split)
[08:56:29] *** Quits: tinystoat (~squeek@user/tinystoat) (*.net *.split)
[08:56:29] *** Quits: pch (~pch@66.49.131.33) (*.net *.split)
[08:56:30] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (*.net *.split)
[08:56:30] *** Quits: oprypin (~irc@pryp.in) (*.net *.split)
[08:56:30] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[08:56:30] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (*.net *.split)
[08:56:31] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[08:56:31] *** Quits: mahlon (~mahlon@martini.nu) (*.net *.split)
[08:56:31] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (*.net *.split)
[08:56:31] *** Quits: Zevv (~Zevvvvv@185.238.131.12) (*.net *.split)
[08:56:32] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (*.net *.split)
[08:56:32] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (*.net *.split)
[08:56:32] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (*.net *.split)
[08:56:33] *** Quits: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5) (*.net *.split)
[08:56:33] *** Quits: robertmeta (sid514@user/robertmeta) (*.net *.split)
[08:56:33] *** Quits: rp2 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (*.net *.split)
[08:56:34] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[08:56:34] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (*.net *.split)
[08:56:34] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[08:56:34] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca) (*.net *.split)
[08:56:35] *** Quits: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (*.net *.split)
[08:56:35] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (*.net *.split)
[08:56:35] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (*.net *.split)
[08:56:36] *** Quits: madprops (hj8oijo@user/madprops) (*.net *.split)
[08:56:36] *** Quits: lain (~lain@172.16.254.xxx) (*.net *.split)
[08:56:36] *** Quits: qwr (~qwr@182-83-235-80.dyn.estpak.ee) (*.net *.split)
[08:56:36] *** Quits: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca) (*.net *.split)
[08:56:37] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[08:56:37] *** Quits: syl (~z@user/syl) (*.net *.split)
[08:56:37] *** Quits: cheer[m] (~cheertchn@2001:470:69fc:105::39de) (*.net *.split)
[08:56:37] *** Quits: ormiret (sid314108@id-314108.lymington.irccloud.com) (*.net *.split)
[08:56:37] *** Quits: ozzz (~oz@46.49.41.80) (*.net *.split)
[08:56:37] *** Quits: Yardanico (~quassel@user/yardanico) (*.net *.split)
[08:56:37] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (*.net *.split)
[08:56:37] *** Quits: NimEventer (~NimBot@78.47.140.224) (*.net *.split)
[08:56:39] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (*.net *.split)
[08:56:39] *** Quits: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1) (*.net *.split)
[08:56:39] *** Quits: meowray (~MaskRay@user/meowray) (*.net *.split)
[08:58:13] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:58:13] *** Joins: Colt (~Colt@user/colt)
[08:58:13] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[08:58:13] *** Joins: [R] (~rs@genoce.org)
[08:58:13] *** Joins: tinystoat (~squeek@user/tinystoat)
[08:58:13] *** Joins: mahlon (~mahlon@martini.nu)
[08:58:13] *** Joins: pch (~pch@66.49.131.33)
[08:58:13] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[08:58:13] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[08:58:13] *** Joins: Zevv (~Zevvvvv@185.238.131.12)
[08:58:13] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[08:58:13] *** Joins: oprypin (~irc@pryp.in)
[08:58:13] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[08:58:13] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[08:58:13] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[08:58:13] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[08:58:13] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[08:58:13] *** Joins: mjsir911 (~bnc@user/mjsir911)
[08:58:13] *** Joins: syl (~z@user/syl)
[08:58:13] *** Joins: dom96 (~dom@mail.nim-lang.org)
[08:58:13] *** Joins: ehmry (~quassel@2a03:3b40:fe:ab::1)
[08:58:13] *** Joins: adium (adium@user/adium)
[08:58:13] *** Joins: cheer[m] (~cheertchn@2001:470:69fc:105::39de)
[08:58:13] *** Joins: ormiret (sid314108@id-314108.lymington.irccloud.com)
[08:58:13] *** Joins: madprops (hj8oijo@user/madprops)
[08:58:13] *** Joins: lain (~lain@172.16.254.xxx)
[08:58:13] *** Joins: rp2 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[08:58:13] *** Joins: jkl1337 (~jkl@user/jkl)
[08:58:13] *** Joins: qwr (~qwr@182-83-235-80.dyn.estpak.ee)
[08:58:13] *** Joins: ozzz (~oz@46.49.41.80)
[08:58:13] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[08:58:13] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[08:58:13] *** Joins: robertmeta (sid514@user/robertmeta)
[08:58:13] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[08:58:13] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[08:58:13] *** Joins: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[08:58:13] *** Joins: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1)
[08:58:13] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca)
[08:58:13] *** Joins: Yardanico (~quassel@user/yardanico)
[08:58:13] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[08:58:13] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[08:58:13] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[08:58:13] *** Joins: NimEventer (~NimBot@78.47.140.224)
[08:58:13] *** Joins: meowray (~MaskRay@user/meowray)
[09:00:16] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[09:00:41] *** Joins: Colt (~Colt@user/colt)
[09:07:33] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (*.net *.split)
[09:07:33] *** Quits: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1) (*.net *.split)
[09:07:33] *** Quits: meowray (~MaskRay@user/meowray) (*.net *.split)
[09:07:44] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[09:07:44] *** Joins: meowray (MaskRay@2600:3c01::f03c:91ff:fea1:e018)
[09:15:45] *** Joins: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1)
[09:37:01] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 252 seconds)
[10:25:35] *** Joins: xet7 (~xet7@user/xet7)
[10:42:26] <FromDiscord> <retkid> is there an async function to do something at an interval
[10:47:21] <FromDiscord> <Yardanico> https://nim-lang.org/docs/asyncdispatch.html#addTimer%2Cint%2Cbool%2CCallback or you can just write an async proc with a `while true` loop that does the stuff your want and then `sleepAsync(ms to sleep)`
[10:48:18] <FromDiscord> <retkid> In reply to @Yardanico "https://nim-lang.org/docs/asyncdispatch.html#addTim": well i want it to continue the code
[10:48:46] <FromDiscord> <Yardanico> ??
[10:48:52] <FromDiscord> <Yardanico> it won't block your other async tasks
[10:49:02] <FromDiscord> <Yardanico> since it'll sleep with `sleepAsync` and not `sleep`
[10:49:13] <FromDiscord> <retkid> sorry my async ideas have been corrupted by JS
[10:50:23] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3H9N
[10:50:43] <FromDiscord> <Yardanico> just do like `doStuff` and call it from your main routine with `asyncCheck doStuff()`
[10:51:03] <FromDiscord> <Yardanico> asyncCheck is needed so that if doStuff throws an exception, it'll actually be caught and will stop program execution
[10:51:22] <FromDiscord> <Yardanico> you can of course also set the callback of the future manually if you want to do different stuff if the future fails with an exception
[11:03:29] <FromDiscord> <retkid> HEY
[11:03:31] <FromDiscord> <retkid> I did lockless
[11:04:03] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3H9Q
[11:04:08] <FromDiscord> <retkid> list = a[] removes the race condition
[11:04:35] <FromDiscord> <retkid> problem is there is no good gcc so it consumes too much ram so it just kinda hangs
[11:05:44] <FromDiscord> <retkid> ah nevermind getting segfaults?
[11:06:16] <FromDiscord> <Yardanico> ???
[11:07:47] *** Joins: PMunch (~PMunch@user/pmunch)
[11:07:52] <FromDiscord> <retkid> oh it was a conversation from earlier
[11:11:01] *** Quits: pch (~pch@66.49.131.33) (Quit: Leaving)
[11:19:16] <FromDiscord> <retkid> fuck it, its lock time↵'
[11:19:17] <FromDiscord> <retkid> (edit) "time↵'" => "time"
[11:19:22] <FromDiscord> <retkid> (edit) 04removed "fuck it,"
[11:21:48] *** Joins: jjido (~Denis@90.213.58.125)
[11:28:29] <FromDiscord> <n00nehere> hey
[11:28:48] <FromDiscord> <n00nehere> i am trying to use webview library of juancarlospaco
[11:28:58] <FromDiscord> <n00nehere> but when trying to use as html a variable i get the following error
[11:28:59] <FromDiscord> <n00nehere> first type mismatch at position\: 1↵  required type for path\: static[string]↵  but expression 'dataUriHtmlHeader' is of type\: string
[11:29:35] <FromDiscord> <Yardanico> well, the proc says it requires you to specify the string that is known at compile time
[11:29:39] <FromDiscord> <Yardanico> so you can't provide a runtime string to it
[11:29:43] <FromDiscord> <Yardanico> not `let` but `const`
[11:29:54] <FromDiscord> <Yardanico> did you see https://github.com/marcomq/nimview btw?
[11:30:01] <FromDiscord> <retkid> god
[11:30:02] <FromDiscord> <retkid> const
[11:30:08] <FromDiscord> <n00nehere> not yet↵(@Yardanico)
[11:30:12] <FromDiscord> <retkid> i forgot about const
[11:30:24] <FromDiscord> <n00nehere> yea it was a const the problem
[11:30:26] <FromDiscord> <n00nehere> i was using var
[11:30:33] <FromDiscord> <n00nehere> but looks like it fucking dies if i use var
[11:30:35] <FromDiscord> <retkid> thats fair
[11:30:44] <FromDiscord> <retkid> i've never had to use const
[11:30:45] <FromDiscord> <retkid> for anythiong
[11:30:47] <FromDiscord> <retkid> (edit) "anythiong" => "anything"
[11:30:52] <FromDiscord> <Yardanico> In reply to @n00nehere "but looks like it": it just shows an error, a pretty descriptive one if you know what `static` is
[11:30:53] <FromDiscord> <n00nehere> same↵(@retkid)
[11:31:01] <FromDiscord> <retkid> outside of JS
[11:31:02] <FromDiscord> <Yardanico> static[string] in a proc definition requires the string to be known at compile-time
[11:31:06] <FromDiscord> <n00nehere> never used const, idk
[11:31:07] <FromDiscord> <retkid> JS has a const fetish
[11:31:19] <FromDiscord> <n00nehere> js is weird in general↵(@retkid)
[11:31:21] <FromDiscord> <Yardanico> In reply to @retkid "JS has a const": because it has very different semantics from `const` in nim
[11:31:27] <FromDiscord> <Yardanico> nim IMO has one of the cleanest semantics for variable modifiers\
[11:31:28] <FromDiscord> <Yardanico> (edit) "modifiers\" => "modifiers"
[11:31:32] <FromDiscord> <Yardanico> `var` - runtime, mutable
[11:31:39] <FromDiscord> <Yardanico> `let` - runtime, immutable (except ref)
[11:31:44] <FromDiscord> <Yardanico> `const` - compile-time, immutable
[11:31:58] <FromDiscord> <Yardanico> modifiers don't affect the scope because in nim it's always the local scope
[11:32:19] <FromDiscord> <retkid> i don't really like : as a type declaration
[11:32:20] <FromDiscord> <Yardanico> we do have `{.global.}` pragma for declaring global variables inside of procedures, but it's a bit buggy
[11:32:21] <FromDiscord> <retkid> prefer kotlins
[11:32:29] <FromDiscord> <Yardanico> In reply to @retkid "i don't really like": you don't need it in most cases
[11:32:35] <FromDiscord> <Yardanico> i mean for variables
[11:32:49] <FromDiscord> <retkid> not kotlins, kotlin has the same
[11:32:49] <FromDiscord> <n00nehere> well nimview is still alive i see↵(@Yardanico)
[11:32:52] <FromDiscord> <retkid> except its like
[11:33:16] <FromDiscord> <retkid> i like javas
[11:33:17] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3H9V
[11:33:26] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3H9W
[11:33:33] <FromDiscord> <Yardanico> well, in nim for these cases you can just do `var x = 328`
[11:33:47] <FromDiscord> <retkid> yea but you do
[11:33:48] <FromDiscord> <n00nehere> guess i will rewrite everything to use it
[11:33:54] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=
[11:34:12] <FromDiscord> <Yardanico> sent a code paste, see https://paste.rs/Uf1
[11:34:13] <FromDiscord> <Yardanico> (edit) "https://play.nim-lang.org/#ix=3H9Y" => "https://play.nim-lang.org/#ix=3H9Z"
[11:34:22] <FromDiscord> <retkid> but it doesn't
[11:34:23] <FromDiscord> <Yardanico> since you "don't like the type"
[11:34:24] <FromDiscord> <retkid> java is insane
[11:34:25] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3Ha0
[11:34:31] <FromDiscord> <Yardanico> (edit) "type"" => "syntax""
[11:34:34] <FromDiscord> <retkid> (edit) 
[11:34:40] <FromDiscord> <retkid> i forget how to make a list off the top of my head in java
[11:34:45] <FromDiscord> <retkid> its stupid
[11:35:09] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3Ha0" => "https://play.nim-lang.org/#ix=3Ha1"
[11:35:10] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3Ha1" => "https://play.nim-lang.org/#ix=3Ha0"
[11:35:16] <FromDiscord> <Solitude> how do i unsubscribe from your blog?
[11:35:28] <FromDiscord> <retkid> you dont :")
[11:35:38] <FromDiscord> <Yardanico> we can go to #offtopic to discuss this really
[11:35:45] <FromDiscord> <Yardanico> a much better place :)
[11:41:12] *** Joins: pch (~pch@66.49.131.33)
[11:48:17] <FromDiscord> <tbrekalo> https://play.nim-lang.org/#ix=3Ha7↵↵can I generate a random name for the `cy000cle` variable in this code snippet?
[11:49:07] <FromDiscord> <Yardanico> it's already "random" because nim templates are hygienic by default
[11:49:23] <FromDiscord> <Yardanico> you won't be able to access "cy000cle" from the code `repeatBlock(2): code`
[11:49:29] <FromDiscord> <Elegantbeef> For instance
[11:49:33] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Ha8
[11:49:38] <FromDiscord> <Elegantbeef> It errors as yardanico pointed out
[11:50:02] <FromDiscord> <Yardanico> you can also make it `for _ in 0 ..< n` too if you don't like having a "real" variable name there :)
[11:50:17] <FromDiscord> <Elegantbeef> if you do want to inject symbols you need to do `{.dirty.}` on the template or `for it {.inject.} 0 ..<n:`
[11:50:21] <FromDiscord> <Yardanico> https://nim-lang.org/docs/manual.html#templates-hygiene-in-templates
[11:50:23] <FromDiscord> <tbrekalo> so I can't access `it` inside the `body` ?
[11:50:26] <FromDiscord> <Yardanico> yes
[11:50:30] <FromDiscord> <Yardanico> "Per default, templates are hygienic: Local identifiers declared in a template cannot be accessed in the instantiation context:"
[11:50:45] <FromDiscord> <tbrekalo> thanks! 🙂
[11:51:08] <FromDiscord> <tbrekalo> Before I had some love hate towards nim; starting to love it doing AoC
[11:56:13] *** Joins: pro (~pro@user/pro)
[11:59:00] *** Quits: pro (~pro@user/pro) (Client Quit)
[11:59:50] *** Joins: pro (~pro@user/pro)
[14:51:33] <NimEventer> New thread by Devosalain2: Kate editor & lsp server, see https://forum.nim-lang.org/t/8682
[14:53:02] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:13:52] *** Joins: src (~src@user/src)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:40:44] <PMunch> @tbrekalo, cool that you're starting to love Nim. Was there anything in particular with AoC that caused you to like Nim more?
[16:32:08] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[16:32:44] <FromDiscord> <Zoom> This messes the direction, so it won't work for parallel iteration.
[16:34:39] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 252 seconds)
[16:40:35] *** Joins: jjido (~Denis@90.213.58.125)
[16:44:22] *** Joins: filcuc_ (~filippo@mob-37-176-19-25.net.vodafone.it)
[16:46:20] *** Quits: filcuc_ (~filippo@mob-37-176-19-25.net.vodafone.it) (Client Quit)
[17:08:00] *** Joins: rockcavera (~rc@192.12.112.194)
[17:08:00] *** Quits: rockcavera (~rc@192.12.112.194) (Changing host)
[17:08:00] *** Joins: rockcavera (~rc@user/rockcavera)
[17:38:05] <FromDiscord> <Schelz> is there any way to use a nim code that is compiling with cpp arg in another code that compile with c arg ?
[17:38:51] <FromDiscord> <Schelz> cause i use in a script a module that compile with cpp only and another that compile with c and i want to combine them but when i do that one of them crash
[17:44:56] <PMunch> C should be able to be integrated in C++ fairly easily I believe
[17:45:11] <PMunch> Otherwise you'd probably have to build libraries and link them together
[17:58:31] *** Joins: arkurious (~arkurious@user/arkurious)
[18:05:01] <FromDiscord> <Schelz> the only problem i have is with nimgl imgui when i try to compile it with C i get the error "could not load: cimgui.dll" but if i compile with cpp i dont get any error
[18:05:20] <FromDiscord> <Schelz> so i could tweak it if i resolve "cimgui.dll"
[18:05:28] <FromDiscord> <Schelz> any idea how to solve ?
[18:07:10] *** Joins: Vladar (~Vladar@46.162.2.53)
[18:08:22] <FromDiscord> <Yardanico> In reply to @Schelz "the only problem i": that's because if you compile with the C backend it uses cimgui.so dynamically
[18:08:28] <FromDiscord> <Yardanico> and with C++ backend it uses imgui itself
[18:08:58] <FromDiscord> <Schelz> so i could compile it with C right ?
[18:09:38] <FromDiscord> <Yardanico> yes but you'll need to use cimgui.so
[18:09:50] <FromDiscord> <Yardanico> you can also statically link but it's a bit weird with cimgui as it's not meant to be used with static linking with C
[18:10:01] <FromDiscord> <Yardanico> why not just use c++ backend for everything?
[18:10:31] <FromDiscord> <Schelz> cause i use C in the main code for a subhook and it working only with C
[18:11:19] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3Hc7
[18:12:01] <FromDiscord> <Rika> Afaik the discriminant must be 0 because of defaults
[18:12:09] <FromDiscord> <Rika> So I believe not
[18:12:36] <FromDiscord> <Schelz> @Yardanico do you have the cimgui.dll or do you know where can i get it from ?
[18:12:49] <FromDiscord> <Rika> In reply to @Rika "Afaik the discriminant must": example, what happens when `var a: Ob`? what would the value of a be?
[18:13:26] <FromDiscord> <haxscramper> Just like any `enum` with offset
[18:13:27] <FromDiscord> <haxscramper> broken value
[18:13:36] <FromDiscord> <Yardanico> In reply to @Schelz "<@!177365113899057152> do you have": you have to compile it yourself :()
[18:13:49] <FromDiscord> <Yardanico> sorry, can't help now, i'm a bit busy
[18:13:50] <FromDiscord> <Rika> and broken object definition?
[18:14:05] <FromDiscord> <Schelz> ok thanks for tip
[18:14:05] <FromDiscord> <Rika> enum value being 0 and broken is "fine"
[18:14:09] <FromDiscord> <haxscramper> yes, we don't have valid defaults so I would at least expect this to be possible
[18:14:55] <FromDiscord> <Rika> well it isnt because its not "everything is broken" its just "some things are broken and some things are correct"
[18:15:07] <FromDiscord> <Rika> you could say its worse yes
[18:15:14] <PMunch> Hmm, anyone else tried the Pizza Slicing Google doodle for today?
[18:15:52] <FromDiscord> <Rika> no i dont use google
[18:16:37] <FromDiscord> <haxscramper> Damn, it invites some really ugly code otherwise, without ranges
[18:17:31] <FromDiscord> <Rika> yeah i really cant wait for better default
[18:25:11] <arkanoid> PMunch: thanks for the answer on futhark. I'm again on same test currently. I really like futhark approach, I've achieved with it what took me days in c2nim
[18:26:31] <PMunch> I achieved in minutes (not counting the time I spent on actually writing Futhark) what I failed to do in a week at work..
[18:28:56] <PMunch> I'm about to head home now. But if you see me online don't hesitate to ask about how to use it :)
[18:29:29] <arkanoid> well, I'm still trying to make GARROW_ARRAY_BUILDER work
[18:29:44] <PMunch> Are you still importing the cache file directly?
[18:30:12] <PMunch> The importc macro should automatically rebuild or simply resolve to import that file
[18:30:17] <PMunch> So you shouldn't import it manually
[18:30:30] <arkanoid> yep, is there a difference once the .json and .nim file have been built?
[18:31:05] <arkanoid> I did that just to have autocompletion in editor, but yes actually is not what you wrote in the example
[18:31:11] <arkanoid> let me rever it
[18:34:10] <arkanoid> I have the same problem without importing cache direction but coding straight below importc block
[18:34:19] <arkanoid> s/direction/directly
[18:36:16] <PMunch> Yeah I don't think that's related to your error
[18:36:33] <arkanoid> output on futhark/opir says "Hint: Renaming "GARROW_ARRAY_BUILDER" to "Garrowarraybuilderproc" [User]"
[18:37:19] <PMunch> That means that there exists something called Garrowarraybuilder already
[18:37:51] <PMunch> I assume that is "GArrowArrayBuilder"
[18:38:48] <PMunch> Okay, gotta go
[18:38:55] <PMunch> I'll have a look at this later
[18:39:05] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:40:03] <arkanoid> sure, thanks, In the meanwhile I've pasted the complete output of futhark run with cache cleared
[18:53:31] <FromDiscord> <haxscramper> Roadmap has "Support field = defaultValue inside object declarations." so I suppose it is a known target at least↵(@Rika)
[19:03:57] *** Joins: tiorock (~rc@192.12.112.194)
[19:03:57] *** Quits: tiorock (~rc@192.12.112.194) (Changing host)
[19:03:57] *** Joins: tiorock (~rc@user/rockcavera)
[19:03:57] *** rockcavera is now known as Guest6718
[19:03:57] *** Quits: Guest6718 (~rc@user/rockcavera) (Killed (zinc.libera.chat (Nickname regained by services)))
[19:03:57] *** tiorock is now known as rockcavera
[19:13:02] *** Joins: tiorock (~rc@192.12.112.194)
[19:13:02] *** Quits: tiorock (~rc@192.12.112.194) (Changing host)
[19:13:02] *** Joins: tiorock (~rc@user/rockcavera)
[19:13:02] *** Quits: rockcavera (~rc@user/rockcavera) (Killed (zirconium.libera.chat (Nickname regained by services)))
[19:13:02] *** tiorock is now known as rockcavera
[19:20:13] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[19:24:03] <FromDiscord> <n00nehere> how do i convert something to a string?
[19:24:59] <FromDiscord> <Yardanico> $
[19:25:07] <FromDiscord> <n00nehere> thanks
[19:26:05] <noeontheend> If you need to define it yourself, then you can write your own "proc `$`(self: T): string"
[19:27:13] <noeontheend> `proc \`$\`(self: T): string` <- does that work?
[19:27:35] <noeontheend> Nope. Anyways, the $ is wrapped in backticks to show that it's an operator.
[19:27:36] <FromDiscord> <Yardanico> yes
[19:27:46] <FromDiscord> <Yardanico> ah you meant if it will be displayed fine on discord
[19:28:18] <noeontheend> :) 
[19:46:00] *** Joins: Pyautogui (~Pyautogui@136.228.203.168)
[19:47:11] *** Quits: Pyautogui (~Pyautogui@136.228.203.168) (Client Quit)
[19:56:44] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.3)
[20:09:01] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[20:29:37] *** Joins: PMunch (~PMunch@user/pmunch)
[20:31:55] <PMunch> arkanoid, I'm trying to install arrow-glib so I can test myself but I get an error while building it
[20:32:24] <arkanoid> PMunch: wait, you got me in the moment I've just succeeded in building and executing the example! I'm updating the issue
[20:32:26] <PMunch> http://ix.io/3Hd0
[20:32:33] <PMunch> Oh nice!
[20:33:00] <PMunch> I thought it might be that you simply didn't link to the sources, but I might be mistaken
[20:34:36] <arkanoid> PMunch: no, it's something about macro not binded correctly
[20:35:17] <PMunch> Ah right, yeah macros are a bit of a pain
[20:35:55] <arkanoid> I'm currently using the libarrow binary packages for ubuntu 20.04, so I can't say much about building locally. Let me get the tarball and try myself
[20:36:41] <PMunch> I was just trying to install it via pakku
[20:36:57] <arkanoid> don't know pakku, sounds new to me, let me google
[20:37:16] <PMunch> It's an alternative to yaourt
[20:37:22] <PMunch> Arch package manager
[20:37:46] <PMunch> Ah, the package is flagged as out of date
[20:37:59] <arkanoid> oh! archlinux. Long time no see
[20:41:35] <arkanoid> btw, to sum up the experience: 1) had to create symlink to libclang.so manually at futhark install as it was not getting libclang.so.1 of my ubuntu box (apt get install clang) 2) including headers is kinda misleading, as you said in the github issue, but once I got how it works it let's you import only what you need, but this makes futhark not a turnkey solution 3) had to deal with this missing
[20:41:38] <arkanoid> conversion of macros 4) why use .cache/nim? this kills autocompletion and stuff
[20:43:09] <arkanoid> but at the end, it worked way faster than c2nim and the .json and I ended up with nim code quite similar to C, ready to be wrapped
[20:49:50] <PMunch> 1) Hmm that sounds like a Ubuntu issue TBH.. Not really sure how I can work around this in Futhark. 2) This is something I want to rework, as I mentioned in the issue maybe a folder based solution? 3) Macros are really tricky, and the support for them in Futhark was about the last added and therefore least battle-tested part of it. 4) Not sure what you mean? I cache the results because otherwise it is super slow. And autocomplete works for me when using 
[20:49:50] <PMunch> Futhark, albeit I have to build it once first before I open my editor (I believe nimsuggest runs into the maxVMIterations limit and stops before it is able to build anything.
[20:50:23] *** Joins: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de)
[20:52:45] <PMunch> The good thing with Futhark is that once you know the things you've now learnt it is even faster wrapping your next library. It's still a bit finicky, but I've now wrapped and used a couple different C libraries and they all "just work". For comparison I've never been able to wrap anything with c2nim, and the times I've tried it's always ended up with having to massively rewrite the C sources in order for anything to work.
[20:54:23] <PMunch> I have a project where I use Futhark to wrap both X11 (the official wrapper didn't include all the stuff I needed) along with a bunch of scsi/ioctl stuff that isn't included in the posix wrapper. And it all just works
[20:54:52] <PMunch> I was able to import X11 to a level that's better than the published wrappers in a matter of minutes
[20:55:02] <arkanoid> PMunch: I also used a lot of c2nim and I like the approach, but it covers ihe initial 90% of the work in 1 minute and let's you cover the remaining 10% in time that depends on how large the lib is. It took me days of mangling and PEGs
[20:55:18] <PMunch> Exactly
[20:55:29] <PMunch> And then a new version of the library drops and you have to start over
[20:55:57] <PMunch> Or just assume your bindings work and have potential cryptic segfaults in your future
[20:56:24] <PMunch> (I was horrified at how far my manual wrapping of a C library we use at work had gotten when I compared it to the output of Futhark)
[20:56:39] <arkanoid> I tried to push whatever possible into name mangling rules
[20:56:41] <PMunch> I still worked, but that was probably more dumb luck than anything..
[20:56:52] <arkanoid> I'm actually surprised how small is the source code of futhark
[20:57:03] *** Quits: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:57:05] <PMunch> I mean most of the heavy lifting is done by clang
[20:57:24] *** Joins: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de)
[20:57:34] <arkanoid> this seems the right approach, why isn't this the default one?
[20:57:38] <PMunch> Opir just imports clang as a library and converts the clang datastructures to JSON, then all Futhark does is read that JSON file and generate Nim code
[20:57:47] <PMunch> It is the default one for me :P
[20:57:59] <FromDiscord> <haxscramper> With each discussion like this I remember the "the way c2nim does it is conceptionally the best way\:" and " I have used c2nim successfully, on thousand of lines of C++ code."
[20:58:12] <FromDiscord> <haxscramper> the libclang one?
[20:58:15] <arkanoid> I mean, I got it working without editing a single line of .h or .c, actually not ever the generated .nim but just overcome that macro problem (that's probably something fixable by futhark with some more work)
[20:58:47] <PMunch> The problem with macros is that they don't have types
[20:58:49] <FromDiscord> <haxscramper> Well, araq is convinced his hand-rolled C parser is robust enough
[20:58:52] <FromDiscord> <haxscramper> Who are we to argue
[20:59:23] <PMunch> Macros in C are just text substitution, so it's hard to reason about how to wrap them in Nim..
[20:59:35] <FromDiscord> <n00nehere> hey, do someone here know how to use winim or winapi in general?
[20:59:37] <FromDiscord> <haxscramper> advancement in this field has always been an efforst of a singular person
[20:59:47] <FromDiscord> <haxscramper> shashlick, then I started it
[20:59:56] <FromDiscord> <n00nehere> i need to clear the clipboard content every hour but i can't manage to get the clipboard to work
[20:59:58] <FromDiscord> <haxscramper> then pmuch made futhark
[20:59:59] <PMunch> @haxscramper, well I mean it obviously isn't, when you look at how poorly c2nim works on even the simplest of macro-based code
[21:00:17] <arkanoid> I had partial success with c2nim, and I've wrapped a whole SOAP library of 60K loc, so it works, but the futhark approach seems more reliable to me
[21:00:19] <FromDiscord> <n00nehere> if i open the clipboard and try to read or delete the content i just get a 0
[21:00:20] <FromDiscord> <haxscramper> futhark works great, hcparse at this stage is mostly an R&D project
[21:00:28] <FromDiscord> <haxscramper> it is too complex to give meaningful timeframes
[21:00:42] <FromDiscord> <haxscramper> Well, the problem formulation is much more complicated
[21:01:05] <FromDiscord> <haxscramper> But futhark is a great solution, even though in adds nontrivial dependency to the code, like libclang
[21:01:21] <PMunch> Well it's only a dependency of Opir
[21:01:43] <PMunch> It's not like your end result depends on libclang
[21:01:52] <FromDiscord> <haxscramper> but you need opir to compile the code, that's what I meant
[21:02:01] <FromDiscord> <haxscramper> of course after codegen happened the binary itself does not require `libclang.so`
[21:02:11] <PMunch> You could even build the opir.json file on a different machine and then send it to someone who then only uses Futhark
[21:02:27] <PMunch> Or just use the generated Futhark cached output of course
[21:02:30] <arkanoid> afaik, opir uses clang to generate a large json that contains a better machine readable version of your C object (what clang uses), then futhark kicks in and reads that json to generate .nim. No clang needed on your program
[21:02:52] <FromDiscord> <haxscramper> ah, so you can commit this as well?
[21:02:58] <PMunch> Yup
[21:03:15] <arkanoid> I actually copied the final .nim and moved to a raspberry, and it worked out. no clang there
[21:03:52] <PMunch> I plan to add a switch to Futhark that removes a lot of the `when defined` stuff from the output. It's only to make it possible to rewrite types, but if you want to distribute a wrapper then it's not really needed.
[21:04:34] <FromDiscord> <haxscramper> Yes, that makes sense. But json is still only a cache, right?
[21:04:44] <PMunch> Yeah the Futhark macro invocation just returns an `import futhark_cache.nim` statement if that file exists
[21:04:56] <FromDiscord> <haxscramper> I.e. all wrapping is on post-macro phase
[21:04:56] <PMunch> The JSON is intended only as a cache, yes
[21:05:10] <PMunch> But you could build a pipeline that processed the JSON file
[21:05:17] <PMunch> Yes
[21:05:30] <PMunch> libclang does all the macro evaluation
[21:06:09] <PMunch> opir.json only includes whatever is defined in your C code
[21:06:27] <PMunch> It's basically a more machine readable header file
[21:06:47] <arkanoid> PMunch: question, is that json representation an invention of yours or clang is able to generate it via command line given the right inputs? Does it have a name / manual page?
[21:06:52] <PMunch> I guess in a way it's what header files where supposed to be :P
[21:07:07] <FromDiscord> <haxscramper> clang can -XdumpJson or something
[21:07:24] <PMunch> It's completely of my own creation, but it does follow some sort of logic, and I plan to document it at some point.
[21:07:36] <PMunch> Clang can't generate it, but nothing stops you from invoking opir from the command line
[21:07:58] <PMunch> It's just a binary executable
[21:08:04] <PMunch> Wait, it can?
[21:08:27] <arkanoid> haxscramper, aren't you doing something for your C++ project?
[21:08:35] <PMunch> So you're telling me that all my work on writing Opir might have been for naught?
[21:09:02] <FromDiscord> <haxscramper> supposedly
[21:09:22] <FromDiscord> <haxscramper> let me check this crap again, I always forget this command line combination
[21:09:41] <FromDiscord> <haxscramper> I just remember some nuclear thread on twitter when someone found out about that
[21:10:07] <PMunch> Welp, I'm getting ready to stream AoC
[21:10:10] <FromDiscord> <haxscramper> `clang test.h -Xclang -ast-dump=json -fsyntax-only`
[21:10:23] <PMunch> Hmm, I definitely have to check that out..
[21:10:33] <arkanoid> -ast-dump=json ?
[21:10:45] <arkanoid> not sure if AST is what is required
[21:11:09] <FromDiscord> <haxscramper> https://play.nim-lang.org/#ix=3Hda
[21:11:13] <arkanoid> actually I'm a nood talking to the guys creators of autowrappers. I better wait :D
[21:12:17] <FromDiscord> <haxscramper> Not exactly, it is always a multi-layer-deep "I'm fixing dependencies" stage, and right now I finally started on better compilation errors for nimskull↵(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[21:12:35] <FromDiscord> <haxscramper> And it involves a nearly whole-compiler fixups, so
[21:12:56] <FromDiscord> <haxscramper> Yes, I'm progressin on this
[21:13:03] <FromDiscord> <haxscramper> well, I actually have a deadline
[21:13:31] <FromDiscord> <haxscramper> I want to write my backelor's project in Qt and nim, so I have to get this ready before Q2 2022 at least
[21:13:42] <FromDiscord> <haxscramper> this is a hard deadline
[21:13:53] <FromDiscord> <haxscramper> until that everything is kind of fuzzy
[21:15:18] <arkanoid> if I do "lang-check-10 --ast-dump /usr/include/arrow-glib/arrow-glib.h" I got something
[21:15:47] <PMunch> By the way, any cool AoC solutions I should mention for the stream today?
[21:18:49] <NimEventer> New thread by Mantielero: C++ bindings - m_type issue , see https://forum.nim-lang.org/t/8683
[21:19:00] <FromDiscord> <haxscramper> Main difference for hcparse and futhark json is probably the fact I want to give you semantically identical information in more machine-readable way
[21:19:31] <FromDiscord> <haxscramper> So you have the `.json`, but it captures all the conditional compilation logic, all type cycle relations and so on
[21:19:31] <arkanoid> btw: https://reviews.llvm.org/D60910
[21:20:13] <FromDiscord> <haxscramper> it even has `mangledName`
[21:23:14] <PMunch> Advent of Code, day 6: https://www.twitch.tv/pmunche
[21:23:30] *** Joins: ni-max (~ni-max@142.202.48.7)
[21:25:53] *** Quits: ni-max (~ni-max@142.202.48.7) (Remote host closed the connection)
[21:26:20] *** Joins: ni-max (~ni-max@142.202.48.7)
[21:26:49] <Amun-Ra> now that's a nice beard PMunch 
[21:30:50] <NimEventer> New thread by Kobi: MetaCall now has initial support for Nim, see https://forum.nim-lang.org/t/8684
[21:45:33] <arkanoid> how does nimsuggest search path works regarding ~/.cache/nim ? If I have a .nim file il cache, will it be picked up by nimsuggests for a project living in ~/mynimproj ?
[21:49:00] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:49:19] *** Quits: ni-max (~ni-max@142.202.48.7) (Quit: ni-max)
[21:51:25] <NimEventer> New post on r/nim by mrnothing-: is nim production ready in 2022?, see https://reddit.com/r/nim/comments/raduux/is_nim_production_ready_in_2022/
[21:58:53] <arkanoid> PMunch: your computer is crashing! :D
[22:09:44] <arkanoid> PMunch: go lazy! regression with machine learning!
[22:26:33] <arkanoid> do you know why there's gintro but no generic interface to GObject/GIR?
[22:26:45] <arkanoid> I mean https://gi.readthedocs.io/en/latest/architecture.html
[22:50:29] <FromDiscord> <enthus1ast> is there a way to provide another object in addition to the object that is destroyed into  a finalizer? I guess not
[22:50:52] <FromDiscord> <enthus1ast> other than global
[22:52:38] <FromDiscord> <enthus1ast> i mean i could explicitly call my own finalizer proc but this would mean rewrite
[22:53:58] *** Joins: ni-max (~ni-max@142.202.48.7)
[22:55:25] *** Quits: rockcavera (~rc@user/rockcavera) (Ping timeout: 240 seconds)
[22:57:03] *** Quits: ni-max (~ni-max@142.202.48.7) (Remote host closed the connection)
[22:57:35] *** Joins: ni-max (~ni-max@142.202.48.7)
[22:58:06] *** Joins: rockcavera (~rc@192.12.112.103)
[22:58:06] *** Quits: rockcavera (~rc@192.12.112.103) (Changing host)
[22:58:06] *** Joins: rockcavera (~rc@user/rockcavera)
[22:59:06] *** Quits: ni-max (~ni-max@142.202.48.7) (Remote host closed the connection)
[22:59:34] <FromDiscord> <enthus1ast> can also not be a {.closure.} mhhhh
[22:59:38] *** Joins: ni-max (~ni-max@142.202.48.7)
[23:01:05] *** Quits: ni-max (~ni-max@142.202.48.7) (Remote host closed the connection)
[23:01:39] *** Joins: ni-max (~ni-max@142.202.48.7)
[23:02:44] *** Quits: ni-max (~ni-max@142.202.48.7) (Remote host closed the connection)
[23:03:16] *** Joins: ni-max (~ni-max@142.202.48.7)
[23:05:45] <arkanoid> PMunch: do you use vim all the times? I am dealing with vscode not using .cache/nim as source and all the futharked code is invisible
[23:06:45] *** Quits: ni-max (~ni-max@142.202.48.7) (Remote host closed the connection)
[23:08:08] *** Joins: ni-max (~ni-max@142.202.48.7)
[23:09:17] *** Quits: ni-max (~ni-max@142.202.48.7) (Remote host closed the connection)
[23:09:49] *** Joins: ni-max (~ni-max@142.202.48.7)
[23:10:05] *** Quits: ni-max (~ni-max@142.202.48.7) (Client Quit)
[23:17:14] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[23:49:00] *** Joins: xet7 (~xet7@user/xet7)
[23:50:25] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[23:58:41] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
