[00:00:58] *** Joins: skapata (~Skapata@user/skapata)
[00:01:29] *** Joins: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it)
[00:01:32] <phryk> theseb: I had a similar realization today (not an experienced C programmer): pointers are a memory address and a type association.^^
[00:03:17] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[00:04:53] <sham1> For some definition of "a memory address"
[00:05:12] <sokan> Anyone who can help me here? https://bpa.st/M5AQ (all info inside) Not sure if what I'm doing is actually a good idea
[00:05:13] *** Quits: krzych (krzych@nroot.pl) (Remote host closed the connection)
[00:05:14] <theseb> phryk: correct
[00:05:22] *** Parts: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Leaving)
[00:05:22] *** Quits: Nutte35 (~Nutte@202.153.81.130) (Read error: Connection reset by peer)
[00:06:50] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:06:51] <phryk> sham1: you talking about it being virtual addresses because of things like 0 being the first address associated to the program and ASLR?
[00:07:17] *** Joins: chair1 (~nero@177.23.12.223)
[00:08:14] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[00:08:25] <chair1> Is it undefined behavior if I have a union with two fields and I write in one and read from the other?
[00:09:11] *** Quits: orestarod (~orestarod@2a02:2149:8ac6:5900:9a3d:dd76:4837:8b41) (Quit: Leaving)
[00:09:21] *** Joins: orestarod (~orestarod@2a02:2149:8ac6:5900:9a3d:dd76:4837:8b41)
[00:09:56] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[00:10:22] <chair1> I would get some bogus results, but they wouldn't be used later anyway
[00:11:56] *** Joins: krzych (krzych@nroot.pl)
[00:13:50] <sham1> phryk: not just that, although that's also a part of it
[00:13:50] *** Joins: Betal (~Betal@user/betal)
[00:14:09] <sham1> For example, depending on the pointer, you can be referring to different address spaces
[00:14:29] <phryk> like shared memory?
[00:14:53] <phryk> hence "things like". means i understood the essential thing, even if i don't know all the subtleties. :)
[00:15:01] *** Quits: inlight (~thomas@user/inlight) (Quit: WeeChat 3.3)
[00:15:29] <sham1> Not even. Think Harvard architecture and how there, program memory is separate from object memory (or data memory, as one might call it)
[00:16:58] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:17:59] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[00:18:26] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[00:19:13] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[00:20:04] *** Joins: meator (~meator@user/meator)
[00:21:50] *** Joins: cmburn (~Charlie_B@2601:441:4c00:67d:b162:86bd:2e7d:b7ea)
[00:21:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:22:37] *** Joins: Kerr (~quassel@2601:602:ce00:287:a475:390:15af:b6e3)
[00:22:48] <nitrix> chair1, 6.7.2.1p16 "The value of at most one of the members can be stored in a union object at any time."
[00:23:50] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:25:13] *** Joins: Charadon (~Charadon@155.138.164.183)
[00:25:48] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:28:30] *** Joins: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com)
[00:28:46] <fizzie> ,c11 footnote.95
[00:28:47] <candide> http://www.iso-9899.info/n1570.html#FOOTNOTE.95 If the member used to read the contents of a union object is not the same as the member last used to store a value in the object, the appropriate part of the object representation of the value is reinterpreted as an object representation in the new type as described in 6.2.6 (a process sometimes called ``type punning''). This might be a trap representation.
[00:29:18] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:29:42] *** Quits: Kerr (~quassel@2601:602:ce00:287:a475:390:15af:b6e3) (Remote host closed the connection)
[00:29:58] <chair1> What is trap representation?
[00:30:03] <fizzie> (Though since it's only a footnote, people still argue about the legitimacy of type punning via unions.)
[00:30:24] <fizzie> ,c11 3.19.4p1
[00:30:25] <candide> http://www.iso-9899.info/n1570.html#3.19.4p1 [Terms, definitions, and symbols] trap representation an object representation that need not represent a value of the object type
[00:31:21] <fizzie> Or more verbosely:
[00:31:21] <chair1> Uuuh ok, I guess this is not bad if the value will be discarded later...
[00:31:27] <fizzie> ,c11 6.2.6.1p5
[00:31:30] <candide> http://www.iso-9899.info/n1570.html#6.2.6.1p5 [General] Certain object representations need not represent a value of the object type. If the stored value of an object has such a representation and is read by an lvalue expression that does not have character type, the behavior is undefined. If such a representation is produced by a side effect that modifies all or any part of the object by an lvalue expres... <truncated; https://0x0.st/oHvu.txt>
[00:32:02] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:32:08] <fizzie> If the implementation *has* trap representations in the first place, just reading one is already undefined.
[00:32:53] <chair1> character type... this reminds me that you can cast everything onto a char array but not vice-versa lol
[00:33:14] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:33:27] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:33:33] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:33:47] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:33:51] <fizzie> ,cc union { bool b; char c; } u; u.c = 2; bool unused = u.b; // not safe even though the value's not actually used
[00:33:53] <candide> fizzie:  runtime error: load of value 2, which is not a valid value for type '_Bool'   no output: u = {b = 2, c = 2}; unused = false
[00:33:55] <nitrix> chair1, Object/values needs bit representations. Signed integers for example have a sign bit, padding bits and value bits. It's usually "sign and magnitude", "one's complement" or "two's complement", but there exists other representations possible for other types.
[00:34:29] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:34:54] <chair1> Ooooooh ok now I get it
[00:35:14] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 268 seconds)
[00:35:27] <nitrix> chair1, Consider the type _Bool which only supports two values, 0 and 1. Size a _Bool has to be a least as big as a char, and char is at least 8 bits, what do you think happens to all the other possible 8-bit patterns? 0b11111111 was cast to
[00:35:30] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:36:00] <nitrix> Oh god, my sentence got truncated weirdly in half.
[00:36:10] <nitrix> Good enough.
[00:36:56] <chair1> Wow true, I'd actually do some maths with the unused results before discarding them, the compiler would go crazy
[00:37:06] <chair1> So I'll avoid reading from inactive members of the union
[00:37:09] <fizzie> FWIW, it's not required for _Bool to have any trap representations. It's quite possible for an implementation to just designate them as redundant, non-trap representations of the two values 0 and 1 in any way it prefers.
[00:37:23] <chair1> thanks nitrix and fizzie
[00:37:28] *** Quits: magla (~gelignite@55d4daf5.access.ecotel.net) (Read error: Connection reset by peer)
[00:37:30] *** Joins: geli (~gelignite@55d4daf5.access.ecotel.net)
[00:38:24] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[00:39:12] <nitrix> Yeah, I believe Clang/GCC just splits _Bool into "zero" and "non-zero", down to the generation of the instructions (JZ, JNZ, etc).
[00:40:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[00:41:38] <nitrix> I'm assuming `(int) x` turns into TEST when the static analysis can't simplify.
[00:42:09] <sokan> An array `float foobar[100000];` has 100000 indices?
[00:42:09] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:42:37] <chair1> well you can access 100000 elements for sure
[00:42:40] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:42:58] <sokan> Hmmm
[00:43:26] <twkm> if it doesn't crash due to the size.
[00:43:33] <nitrix> It has 100000 elements. You can subscript them with an infinite amount of expressions for the index.
[00:43:46] <nitrix> 1, 1 + 0, 1 + 0 + 0, etc.
[00:43:51] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[00:44:08] <sokan> I need to stop using big numbers on arrays :\
[00:44:21] <sokan> Kinda confuses me when I want to check if something went well with a for loop :P
[00:44:24] <twkm> 100k indices yes.  don't forget they are zero-based.
[00:44:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:45:26] <nitrix> E1[E2] desugars to *((E1) + (E2)), the E1 or E2, whichever is your index, can be any expression that produces an integer in the bounds of the array, there's an infinite amount of permutations.
[00:45:57] *** Joins: vysn (~vysn@user/vysn)
[00:46:20] *** Quits: geli (~gelignite@55d4daf5.access.ecotel.net) (Quit: Stay safe!)
[00:46:35] <chair1> I love to mention that you can do 55[foobar] due to this
[00:47:13] <nitrix> Infinite because many arithmetic operators like + and * have identities (0 is the identity for + and 1 is the identity of *).
[00:47:20] <nitrix> 1*1*1*1*1*1...
[00:47:28] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[00:48:09] *** Quits: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it) (Quit: Konversation terminated!)
[00:48:39] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[00:48:46] <chair1> That's interesting... 1-1 or 2-1-1 turns into 0, which is an identity
[00:49:43] <chair1> Reminds me of some high school math stuff, like removing the roots from the fraction's denominator
[00:50:04] *** Joins: fwg (~fwg@user/fwg)
[00:50:49] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:51:49] <chair1> In C, I guess 0 would be identity for | and (~(unsigned)0) for &
[00:51:57] <sham1> Not just in C
[00:52:09] <nitrix> chair1, That's not quite how it works. When you view - as a function that takes two arguments, for one of the argument to be considered an identity, the other argument has to be the output.
[00:53:04] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[00:53:09] <nitrix> chair1, In other words, it's as-if the function took a value as the input and immediately returned it as the output, the second argument is meaningless.
[00:53:10] <chair1> I think I never considered this concept from the point of view of functions
[00:54:37] <nitrix> chair1, So 0 is the identity of + and -, because adding or removing zero changes nothing to the outcome. Similarly, 1 is the identity of * and /, because multiplying or dividing by 1 changes nothing.
[00:54:49] *** Joins: seninha (~seninha@user/seninha)
[00:56:53] <chair1> 1 would be the identity of exponentiation... I'm trying to think of some operation without identity, perhaps %?
[00:58:08] *** Quits: Darkcoal (~user@167.86.178.227) (Quit: Darkcoal)
[00:58:41] <chair1> I guess this whole fuzz is related to inversibility of functions, I see + and - are inverses, just as * and /... I should review my maths soon
[00:59:57] <nitrix> The point was that counting the members makes more sense than counting the indices.
[01:00:35] <nitrix> If you like that stuff, the binary operator and the identity form what's called a Semigroup. You see that in mathematics a lot and functional programming as well.
[01:00:58] *** Joins: confusedduck (~confusedd@42.106.198.15)
[01:01:05] <sham1> Just having a binary operation gives you a magma
[01:01:34] <sham1> Well, having a binary operator that is closed
[01:02:03] <nitrix> Is it the same as a groupoid?
[01:02:07] <nitrix> My algebra sucks.
[01:02:08] <sham1> nitrix: yes
[01:02:13] <confusedduck> how does assigning two variable in a variable divide the variables assigned to them without division operator?
[01:02:14] <nitrix> Okay cool.
[01:02:45] <sham1> Although as a bit of a correction, a semigroup has an algebraically closed binary operator that is associative. To get an identity element you need a monoid
[01:02:52] <sham1> Monoid on top of that
[01:02:55] <nitrix> My work just paid me a subscription to Brilliant.org, I plan to go through all the algebra courses :)
[01:03:09] <confusedduck> '-') some1 help
[01:03:23] <pgib> I don't understand your question. Do you have a code snippet?
[01:03:43] <confusedduck> c = a  b; / Divide using integers.
[01:03:48] *** Quits: duds- (~duds-@146.70.31.116) (Changing host)
[01:03:48] *** Joins: duds- (~duds-@user/duds)
[01:04:23] *** Joins: Kerr (~quassel@2601:602:ce00:287:ab06:3e9c:5e54:e8d)
[01:04:25] <confusedduck> somehow a and b are being divided there
[01:05:27] <chair1> does this compile? they could be macros
[01:06:09] <confusedduck> what's macros
[01:06:43] <fizzie> I imagine someone's just losing slashes there.
[01:06:58] *** Joins: T-Store (~tomek@2a02:a314:140:1400:6c06:f9cb:e84b:ae6d)
[01:06:58] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[01:07:10] <fizzie> The `/ Divide using integers.` could be what's left of a `// Divide using integers.` line comment, too.
[01:07:18] <confusedduck> it's from the book "hacking the art of exploitation"
[01:07:26] * nitrix chuckles.
[01:07:26] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Ping timeout: 260 seconds)
[01:07:37] <confusedduck> I literally copy pasted it so...
[01:07:56] <nitrix> Our field is doomed.
[01:08:01] <chair1> ,cc int a = 1, b = 1, c; c = a b;
[01:08:01] *** Parts: T-Store (~tomek@2a02:a314:140:1400:6c06:f9cb:e84b:ae6d) (Do widzenia)
[01:08:02] <candide> chair1: error: expected ';' before 'b'
[01:08:05] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[01:08:09] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:08:28] <confusedduck> I guess, my epub viewer has problems then lol
[01:08:56] <sham1> That would be interesting if one could use that to multiply by juxtaposition
[01:09:14] <confusedduck> someone from archwiki irc said, that this channel wasn't friendly
[01:09:17] <chair1> the whitespace operator /s
[01:09:17] <nitrix> There's a possibility it uses a different font for operators and your epub viewer can't do that.
[01:09:31] <confusedduck> yeah prolly
[01:09:49] <fizzie> Or if it's an "unofficial" copy, it can just be someone's crummy scan.
[01:10:21] <chair1> hmmmm true, I've seen that before
[01:10:24] <fizzie> sham1: Unicode has the characters U+2062 INVISIBLE TIMES and U+2064 INVISIBLE PLUS, which it would be nice if you could use as replacements of the regular + and *.
[01:10:35] <sham1> Hm
[01:10:41] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[01:10:41] <chair1> That's great!
[01:10:42] <confusedduck> not the first time I noticed something wrong, so could be yeah
[01:11:02] <confusedduck> is this book worth reading tho
[01:11:09] <chair1> See if they don't make available online all the code of the book
[01:11:21] <chair1> What is its purpose?
[01:11:28] <confusedduck> the book's purpose?
[01:11:50] <sham1> I'm not sure what use an invisible plus has, but invisible times is at least useful since could be used to separate tokens while doing multiply. Of course editors would have to show that, so meh
[01:12:14] <confusedduck> I mean it's too old anyway, the author doesn't care at this point
[01:12:52] <chair1> There's a 2003 and 2018 edition I see...
[01:13:19] <LeoNerd> INVISIBLE PLUS is smeantically between the 2 and the ½ when you write a number like  2½
[01:13:39] <confusedduck> chair1 what're u talking about
[01:14:35] <confusedduck> 2003 and 2008
[01:15:21] <sham1> LeoNerd: oh? Well that's actually useful then
[01:15:40] <sokan> char *s = "sokan". In order to change that, I can &new = "me". If I s = new, then *s will be "me" now?
[01:15:57] <sham1> Although I don't remember when I've last seen mixed numbers
[01:16:19] <chair1> confusedduck: the book has two editions... anyway, I think it is better to judge the book reading it
[01:16:28] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[01:16:43] <nitrix> confusedduck, It's easy to get the entire channel against you if you're stubborn and that could be interpreted poorly by someone with an ego. We don't really have a code of conduct either and the regulars all have different teaching methods.
[01:18:23] *** Joins: malina (~malina@user/malina)
[01:18:41] <confusedduck> chair1 I mean, it's too old that's why I asked
[01:20:00] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[01:20:57] <confusedduck> nitrix well yeah, maybe that person was at fault
[01:21:10] <nitrix> For what it's worth, some of our biggest offenders have left, some are reformed and now that C isn't as fashionable anymore, the situation largely improved.
[01:21:10] <chair1> Hmmm I confused 2018 with 2008... I don't know much about exploiting to comment anyway
[01:22:52] <confusedduck> well, I guess I'll continue anyway. I found a proper copy as well
[01:23:10] <confusedduck> thanks for the help
[01:23:14] <chair1> I think the age doesn't matter much, many companies never update their systems, programmers repeat errors from the past all the time
[01:23:47] *** Quits: alch (~alch@to-18-73-159.service.infuturo.it) (Ping timeout: 256 seconds)
[01:23:53] <confusedduck> well yeah I noticed very little differences
[01:23:53] <chair1> So even if kernels are protected against exploit A, most companies are still using a version from 10 years ago lol
[01:24:00] <confusedduck> tf?
[01:24:07] <confusedduck> why lol
[01:24:23] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[01:25:12] <chair1> Lots of reasons. Maybe the server software is proprietary and only runs on Windows 98 and the company that made it ceased to exist, so you are stuck with Windows 98
[01:25:46] *** Joins: alch (~alch@151.68.73.17)
[01:26:09] <chair1> Even if you could replace it, what would be the cost? For many companies it's not worth the trouble
[01:26:11] *** Quits: bingulo (~carlos@2804:431:e7c8:b11e:ec5a:2fe7:d48c:fd63) (Ping timeout: 250 seconds)
[01:26:26] <nitrix> Not everything has the luxury of being connected to the internet or have rewritable disks to perform updates.
[01:26:30] *** Quits: Akuli (~Akuli@82-203-166-135.bb.dnainternet.fi) (Quit: Akuli)
[01:27:22] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Remote host closed the connection)
[01:27:49] <chair1> See https://www.zdnet.com/article/a-23-year-old-windows-3-1-system-failure-crashed-paris-airport/
[01:28:15] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[01:28:32] *** Quits: mahmutov_ (~mahmutov@37.155.27.205) (Ping timeout: 256 seconds)
[01:28:42] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[01:28:44] <confusedduck> well still I noticed that, the place where I work at uses Windows for scanning products and getting payments, it could be exploited if anyone wanted to Ig. they also write the IP address of the CPU on counters
[01:29:31] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[01:30:56] <chair1> I've read a comment recently about a person whose company built their entire systems using Microsoft Office and VBA, even to control stuff like laser-cutting machines
[01:30:59] <nitrix> I don't think I have heard of CPUs with network addresses, though I know some motherboards temporarily can because of the Intel Management Engine.
[01:31:38] <confusedduck> I meant the address for the specific pc
[01:31:39] <chair1> Maybe by CPU confusedduck meant computer :P
[01:32:09] <confusedduck> yeah, lol I noticed I made that typo hoping ya'll would understand XD
[01:32:30] *** Joins: Bejito (~bejito@2a01:e0a:830:f5f0:60c9:d146:8a85:cf36)
[01:32:45] <confusedduck> I guess "pc" is a typo too since it's not personal but for the company
[01:32:45] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[01:33:09] <chair1> I'd state that open source is kind of important if you need to update a software and its developers abandoned it
[01:33:33] <chair1> But I heard you can make contracts where in the case of the company dying, you inherit the source code of the proprietary software
[01:34:34] <confusedduck> well proprietary is never good
[01:34:41] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:35:26] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[01:35:54] *** Joins: fwg (~fwg@user/fwg)
[01:36:12] <chair1> Sometimes... that's getting off-topic, but think of a FPS multiplayer game that is open source, how do you stop hackers from making clients with aimbots? Keeping the code secret might be just easier
[01:38:11] <confusedduck> some part of the code can be kept secret in that case Ig
[01:39:13] <confusedduck> sorry didn't realize I can't talk off-topic here XD
[01:39:47] *** Parts: Bejito (~bejito@2a01:e0a:830:f5f0:60c9:d146:8a85:cf36) (plouf)
[01:40:26] <nitrix> We have #c-offtopic and also #c-jeopardy game.
[01:40:47] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[01:42:08] *** Joins: NEYi (~NEYi@109.251.216.38)
[01:42:31] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:45:01] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:45:45] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:45:46] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:47:58] *** Joins: sham1_ (~sham1@212-146-44-107.aboa.net)
[01:48:32] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Ping timeout: 240 seconds)
[01:49:47] *** Joins: Atque (~Atque@user/atque)
[01:50:40] *** Quits: ekathva (~ekathva@2001:999:51:be01:35a5:6efe:4821:a5c8) (Remote host closed the connection)
[01:51:10] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[01:53:00] *** Quits: nvmd (~weechat@user/nvmd) (Quit: WeeChat 3.4)
[01:53:47] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[01:53:54] <apotheon> clang -std=c99 -pedantic-errors hollow_world.c
[01:53:59] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[01:56:23] *** Quits: confusedduck (~confusedd@42.106.198.15) (Quit: Client closed)
[01:59:12] <sham1_> Error: The world is not hollow -Wno-hollow-earth
[01:59:14] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 260 seconds)
[01:59:35] <nitrix> -fsanitize=humanity
[02:02:04] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[02:04:08] <CodeAgain> Hello... I'd like to have a char *s[] as a struct member, and to declare it when I'm declaring the structure, i.e. struct something = {..., .s = {"something", "something-selse"} };
[02:04:34] <CodeAgain> What's the best approach for that (as the one I've typed won't compile)?
[02:04:57] *** Joins: MrFantastik (~f@2607:f598:bbda:90:e757:712b:4010:9afa)
[02:05:15] <sham1_> You need to specify a length for the array, otherwise you can't initialize it like that
[02:05:36] *** Quits: bick (~kotaman@94.46.203.147) (Quit: leaving)
[02:06:14] *** Quits: chomwitt (~chomwitt@athedsl-02411.home.otenet.gr) (Remote host closed the connection)
[02:06:35] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[02:06:46] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[02:07:24] <CodeAgain> Okay... And by the way, what's wrong with using a char **s instead (which compiles, but with some warnings and not working as expected)
[02:08:54] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:11:30] *** sham1_ is now known as sham1
[02:11:36] *** Quits: Alhazred (~Alhazred@86.106.74.42) (Ping timeout: 256 seconds)
[02:12:14] <nitrix> You'll need to specify the number of elements for the array or use a pointer, otherwise you have an incomplete type and a compilation error because the size of the struct cannot be determined.
[02:12:42] <sham1> ,cc struct foo { char **f; } foo = { .f = {"a","b"} };
[02:12:45] <candide> sham1: [warning: braces around scalar initializer  note: (near initialization for 'foo.f')  warning: initialization of 'char **' from incompatible pointer type 'char *' [-Wincompatible-pointer-types]  note: (near initialization for 'foo.f')  warning: excess elements in scalar initializer  note: (near initialization for 'foo.f')] no output: foo = {f = 0x40302c}
[02:12:48] <sham1> That's why
[02:13:36] <sham1> Maybe the clearest example of why arrays ≠ pointers
[02:13:37] <sham1> Although
[02:13:51] <sham1> ,cc struct foo { char **f; } foo = { .f = (char *[]){"a","b"} };
[02:13:51] <nitrix> And yeah, if you use a pointer, you'll have to, well, provide a pointer. So you need an array object and provide its address to your struct.
[02:13:53] <candide> sham1: no output: foo = {f = 0x7fffffffe2d0}
[02:14:37] <sham1> Although the real correct type here is const char ** and const char *[] respectively
[02:15:21] <sham1> If you want pointers to just char, you need to do it differently
[02:16:03] <sham1> ,cc struct foo { char **f; } foo = { .f = (char *[]){strdup("a"),strdup("b")} }; // ugly but works, although keep in mind that you have to check for errors
[02:16:06] <candide> sham1: Same output.
[02:16:16] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-cdff-5348-04ff-b4e2.res6.spectrum.com) (Read error: Connection reset by peer)
[02:16:39] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[02:17:52] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:19:18] <nitrix> You also need the count to iterate.
[02:20:36] *** Joins: vimart (~ketiv@cpc148896-sgyl44-2-0-cust233.18-2.cable.virginm.net)
[02:20:50] <CodeAgain> Thanks a lot, I guess I better specify a size enough large for an array
[02:21:27] <CodeAgain> Or the cast to char *[] looks interesting
[02:21:35] *** Joins: robyndrake (~robyndrak@154.16.118.240)
[02:21:37] *** Quits: robyndrake (~robyndrak@154.16.118.240) (Changing host)
[02:21:37] *** Joins: robyndrake (~robyndrak@user/robyndrake)
[02:22:01] <CodeAgain> If I use the (char *[]) will the last item be a NULL pointer?
[02:22:34] *** Joins: moose (~moose@user/moose)
[02:23:21] <sham1> No
[02:24:04] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 250 seconds)
[02:24:40] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:26:28] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[02:27:24] <fizzie> (Just to be a little picky, there's no compilation error when using an array of unspecified size as the last member of a struct, and the resulting struct type's not incomplete either, because in that context it's a flexible array member. You just can't have an initializer for one, or create particularly useful objects of that type using a declaration, since it wouldn't reserve any storage for the
[02:27:26] <fizzie> subsequent array elements.)
[02:28:31] <fizzie> As for the `(char *[]){...}` (which isn't a cast), you can add a null pointer at the end explicitly. Well, and in the middle too, but that's probably less useful.
[02:29:02] <nitrix> It's a compilation error if it's not a flexible array member and nothing in the question hinted that it was.
[02:29:16] <nitrix> That sort of nitpick I don't like.
[02:30:05] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[02:30:08] <nightstrike> Pert: this was just posted! https://lists.nongnu.org/archive/html/tinycc-devel/2022-02/msg00005.html
[02:30:09] <candide> Title of nightstrike's link: [Tinycc-devel] sizeof() on structure with VLA member gives wrong results
[02:30:18] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[02:30:20] <nightstrike> Pert is gone...
[02:30:23] <nightstrike> Ah well
[02:30:45] *** Joins: nicode (~nic@45.72.195.35)
[02:30:59] <fizzie> The fact that the attempted initializer was the last thing in the initializer list does hint to me that it *was* a FAM, even if an unintentional one.
[02:31:13] <fizzie> Of course it had a designator, so maybe not.
[02:32:20] *** Quits: pizdets (~pizdets@183.182.111.155) (Ping timeout: 250 seconds)
[02:32:33] <nitrix> In sha1's examples, but to me that was coincidental and didn't affect the original question, nor my answer, and I can't predict what people are going to tack incorrectly on my words after that.
[02:32:42] <fizzie> No, in CodeAgain's example.
[02:33:13] <sham1> At some point one might question the rationale of doing all these tricks just to be able to do designed initialisers for this
[02:33:17] <nitrix> Are you able to quote? Maybe I missed a message.
[02:33:37] <fizzie> <CodeAgain> Hello... I'd like to have a char *s[] as a struct member [--] i.e. struct something = {..., .s = {"something", "something-else"} };
[02:33:43] *** Joins: pizdets (~pizdets@183.182.111.120)
[02:33:45] <fizzie> I mean, for sure it's not conclusive.
[02:34:51] <nitrix> I've read that line and nothing about it hints FAM at a first glance.
[02:36:00] <nitrix> Getting my answer corrected when it's someone else that extends with their own incorrect examples doesn't interest me.
[02:36:01] <sham1> char *s[] seems to be the last thing here
[02:36:12] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[02:36:16] <CodeAgain> I'm trying to understand the conversation, but I'm not getting what FAM means
[02:36:29] <sham1> It couldn't be a thing otherwise
[02:36:31] <nitrix> I don't mind when it's my fault and when it's pertinent, but not my fault and nitpicking, that's unpleasant.
[02:36:57] <sham1> s cannot be a valid struct member unless it is a FAM
[02:37:18] <sham1> Therefore the problem is either the initializer or the struct definition
[02:37:39] <fizzie> CodeAgain: Well, very briefly, a FAM (flexible array member) is a special thing you can make the last member of a struct type. It's ignored most of the time. It can be used to have struct types that are followed by an array in allocated storage.
[02:39:24] <fizzie> Here's the C99 rationale with more context: https://0x0.st/-Vlm.txt
[02:39:26] <fizzie> Anyway, the only reason why it's related to your question is, if your `char *s[];` declaration was the last thing in the struct, it would have been a FAM even if you didn't intend it to.
[02:41:50] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[02:42:05] *** Joins: zacts (~zacts@user/zacts)
[02:42:07] <CodeAgain> Now I started understanding the first error message I got
[02:42:59] *** Joins: Torr (~Torr@user/torr)
[02:44:00] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Read error: Connection reset by peer)
[02:44:15] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[02:46:22] *** Quits: zacts (~zacts@user/zacts) (Client Quit)
[02:46:37] *** Joins: Alhazred (~Alhazred@86.106.74.40)
[02:47:58] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:51:38] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[02:52:58] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:54:37] *** Joins: ferdna (~ferdna@user/ferdna)
[02:55:17] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[02:55:52] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:56:05] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:57:31] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[02:57:46] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[02:57:47] *** Quits: orestarod (~orestarod@2a02:2149:8ac6:5900:9a3d:dd76:4837:8b41) (Ping timeout: 252 seconds)
[03:02:35] *** Joins: cosimone` (~user@5.170.240.195)
[03:02:57] *** Joins: asdafasskadkasda (~asdafassk@151.210.132.72)
[03:04:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[03:05:00] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[03:05:06] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[03:05:36] *** Quits: asdafasskadkasda (~asdafassk@151.210.132.72) (Client Quit)
[03:06:16] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[03:07:25] *** Joins: asdafasskadkasda (~asdafassk@151.210.132.72)
[03:07:39] *** Parts: asdafasskadkasda (~asdafassk@151.210.132.72) ()
[03:16:15] *** Quits: Ragnor (~Ragnor@user/ragnor) (Ping timeout: 250 seconds)
[03:17:08] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: WeeChat 3.4)
[03:17:30] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[03:18:24] *** Joins: arinov (~arinov@213.194.126.155)
[03:19:36] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[03:20:09] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[03:21:52] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[03:22:10] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[03:23:45] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[03:26:24] *** Joins: X-Scale` (~ARM@218.92.108.93.rev.vodafone.pt)
[03:28:48] *** Joins: Betal (~Betal@user/betal)
[03:29:14] *** Quits: X-Scale (~ARM@83.223.224.94) (Ping timeout: 256 seconds)
[03:29:15] *** X-Scale` is now known as X-Scale
[03:29:38] *** Joins: Azem (~haise01@user/haise01)
[03:32:26] *** Quits: tazle (tazle@kapsi.fi) (Ping timeout: 252 seconds)
[03:33:07] *** Joins: Ragnor (~Ragnor@user/ragnor)
[03:36:37] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:38:06] *** Joins: tazle (tazle@kapsi.fi)
[03:38:52] *** Quits: bixo (~bixo@190.200.253.127) (Ping timeout: 256 seconds)
[03:40:55] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[03:44:26] *** Joins: fwg (~fwg@user/fwg)
[03:46:14] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[03:48:16] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: btc donations: bc1qt3chy4rqtzjny2h7qt47cy7nmu6th9sr66wa02)
[03:49:20] *** Joins: james (~james@2607:b400:24:0:6911:fb23:ae44:9a00)
[03:49:22] *** Quits: cosimone` (~user@5.170.240.195) (Quit: ERC (IRC client for Emacs 27.1))
[03:49:59] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[03:53:21] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: Lost terminal)
[03:53:31] *** Joins: jx0 (~jx0@199.229.250.138)
[03:58:24] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:58:24] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:58:24] *** Joins: wroathe (~wroathe@user/wroathe)
[04:00:08] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:01:18] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[04:06:59] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[04:07:12] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:09:04] *** Joins: Wulf (~Wulf@user/wulf)
[04:09:10] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[04:11:27] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:15:38] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Excess Flood)
[04:16:18] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[04:16:34] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[04:16:55] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[04:17:13] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[04:18:25] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[04:19:47] *** Joins: bixo (~bixo@190.200.253.127)
[04:20:02] *** Quits: Torr (~Torr@user/torr) ()
[04:20:19] *** Joins: Torr (~Torr@user/torr)
[04:24:22] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 260 seconds)
[04:25:07] *** Joins: pert (~pert@fsf/member/pert)
[04:30:43] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[04:31:52] *** Quits: james (~james@2607:b400:24:0:6911:fb23:ae44:9a00) (Quit: james)
[04:32:41] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[04:45:46] *** Quits: MrFantastik (~f@2607:f598:bbda:90:e757:712b:4010:9afa) (Ping timeout: 250 seconds)
[04:47:29] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[04:50:06] *** Joins: masoudd (~masoudd@user/masoudd)
[04:51:33] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[04:54:21] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[04:58:44] <cmburn> any portable way to check page size? in the event you've gotta work on non-POSIX systems
[04:59:05] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-7019-992d-5c33-127.fixed6.kpn.net)
[05:02:24] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[05:03:32] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-7019-992d-5c33-127.fixed6.kpn.net) (Ping timeout: 250 seconds)
[05:04:53] *** Quits: beastie (~lcu@user/thebeastie) (Quit: WeeChat 3.4)
[05:05:00] <zwr> nope, but do you really need to know the page size?
[05:05:04] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[05:06:50] *** Joins: crashrep (~crashrep@user/crashrep)
[05:07:19] *** Quits: chair1 (~nero@177.23.12.223) (Quit: happy 20222)
[05:07:31] *** Joins: Beastie (~lcu@user/thebeastie)
[05:09:30] <cmburn> mainly trying to recreate recallocarray on lesser platforms, which technically requires getpagesize, not really objecting to just declaring it to 4096 and calling it a day but feel dirty
[05:09:38] *** Joins: frostygoth__ (~frostygot@li1566-163.members.linode.com)
[05:09:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:12:12] *** Quits: frostygoth_ (~frostygot@104-186-97-153.lightspeed.wchtks.sbcglobal.net) (Ping timeout: 250 seconds)
[05:13:11] *** frostygoth__ is now known as frostygoth
[05:18:16] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 250 seconds)
[05:18:40] *** Joins: MrFantastik (~f@2607:f598:bbda:90:1a30:5f62:e8b:20f9)
[05:20:06] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: bbl)
[05:20:44] *** Joins: Betal (~Betal@user/betal)
[05:21:59] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 268 seconds)
[05:22:02] *** Quits: alch (~alch@151.68.73.17) (Read error: Connection reset by peer)
[05:22:22] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[05:22:35] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[05:24:38] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 252 seconds)
[05:26:14] *** Joins: alch (~alch@151.34.90.207)
[05:27:05] *** Quits: osp (~osp@84.19.72.107) (Quit: Leaving)
[05:29:43] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[05:31:28] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[05:31:55] *** Quits: frostygoth (~frostygot@li1566-163.members.linode.com) (Remote host closed the connection)
[05:32:47] *** Quits: jancoow (~jancoow@user/jancoow) (Quit: The Lounge - https://thelounge.chat)
[05:33:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:35:49] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:36:46] <zwr> https://github.com/openssh/openssh-portable/blob/master/openbsd-compat/bsd-getpagesize.c
[05:37:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:37:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:37:03] *** Joins: wroathe (~wroathe@user/wroathe)
[05:37:37] *** Joins: vysn (~vysn@user/vysn)
[05:38:03] *** Joins: fe23 (~fe23@2409:8a34:477:2010:ec7a:65be:1f05:f30)
[05:38:49] <zwr> I wonder if this is really okay when the function makes such a big fuss out of zeroing that memory https://github.com/openssh/openssh-portable/blob/master/openbsd-compat/recallocarray.c#L64-L71
[05:38:52] *** Quits: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com) (Read error: Connection reset by peer)
[05:41:07] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:42:51] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:85ab:562:f728:2658) (Quit: Quit)
[05:43:32] <zwr> oh my bad the page size is unimportant even there, just a number they picked as the smallest memory size they'll bother reallocating
[05:43:53] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:44:50] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[05:50:51] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[05:56:04] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:56:49] *** Quits: Charadon (~Charadon@155.138.164.183) (Remote host closed the connection)
[05:57:13] *** Joins: Charadon (~Charadon@155.138.164.183)
[05:58:22] *** Quits: coruja (~coruja@user/coruja) (Quit: WeeChat 3.4)
[05:58:42] <zwr> BTW I'm writing my own libbsd that is more portable than the current one, I guess it's time to add this function
[05:59:02] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:59:07] *** Joins: coruja (~coruja@user/coruja)
[06:01:14] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[06:02:52] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[06:06:19] *** Joins: jancoow (~jancoow@user/jancoow)
[06:09:00] *** Quits: cmburn (~Charlie_B@2601:441:4c00:67d:b162:86bd:2e7d:b7ea) (Quit: Leaving.)
[06:13:07] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[06:13:10] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:15:03] *** Quits: kts_ (~kts@103.73.237.158) (Ping timeout: 256 seconds)
[06:15:49] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[06:18:06] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 256 seconds)
[06:21:58] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:23:39] *** Quits: dld (~davidlowr@2601:197:600:1210:9050:7c1d:b33c:2fa8) (Ping timeout: 268 seconds)
[06:24:18] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 260 seconds)
[06:25:21] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[06:27:22] *** Quits: nehsou^ (~nehsou@128-092-164-034.biz.spectrum.com) (Remote host closed the connection)
[06:28:33] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[06:28:57] *** Quits: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[06:30:01] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:30:16] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[06:31:52] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[06:31:52] *** Quits: nuxil (~nuxil@141.195.51.213) (Read error: Connection reset by peer)
[06:33:45] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[06:34:16] *** Quits: MrFantastik (~f@2607:f598:bbda:90:1a30:5f62:e8b:20f9) (Remote host closed the connection)
[06:34:39] *** Joins: MrFantastik (~f@2607:f598:bbda:90:c5d3:26c:1b99:66dc)
[06:34:45] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 268 seconds)
[06:35:50] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[06:36:08] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[06:38:16] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Client Quit)
[06:44:26] *** Joins: smeso (~smeso@user/smeso)
[06:46:22] *** Joins: dld (~davidlowr@2601:197:600:1210:942a:4683:ce04:8328)
[06:50:01] *** sonny is now known as haker
[06:50:16] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[06:52:01] *** Quits: haker (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[06:52:16] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[06:52:20] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[06:54:20] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:30] *** Joins: Trashlord (~trash@user/trashlord)
[06:56:23] *** Joins: System_Error (~SystemErr@user/systemerror)
[06:57:08] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[06:58:37] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[06:59:18] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[06:59:33] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[06:59:48] *** Joins: diiirt7 (~diiirt@user/diiirt)
[06:59:51] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[06:59:59] *** Quits: symb0l (~symb0l@user/symb0l) (Quit: The Lounge - https://thelounge.chat)
[07:00:46] *** Joins: de-facto_ (~de-facto@user/de-facto)
[07:00:53] *** Joins: dsrt^ (~dsrt@128-092-164-034.biz.spectrum.com)
[07:01:46] *** Joins: bindu_ (~bindu@user/bindu)
[07:02:21] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[07:02:21] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[07:02:21] *** Quits: diiirt (~diiirt@user/diiirt) (Ping timeout: 276 seconds)
[07:02:22] *** diiirt7 is now known as diiirt
[07:03:26] *** Quits: bixo (~bixo@190.200.253.127) (Ping timeout: 256 seconds)
[07:03:44] *** bindu_ is now known as bindu
[07:04:45] *** Joins: System_Error (~SystemErr@user/systemerror)
[07:04:58] *** de-facto_ is now known as de-facto
[07:06:00] *** Joins: lispy (~lispy@user/lispy)
[07:06:42] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:08:44] *** Joins: malloy (~jimery@120.235.172.169)
[07:08:53] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[07:09:34] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[07:09:54] *** Joins: advanced_malform (~Srain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[07:10:01] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:11:48] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[07:14:54] *** Joins: masoudd (~masoudd@user/masoudd)
[07:15:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:16:00] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:16:20] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[07:18:06] *** Joins: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com)
[07:19:13] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[07:19:35] *** Quits: vimart (~ketiv@cpc148896-sgyl44-2-0-cust233.18-2.cable.virginm.net) (Ping timeout: 252 seconds)
[07:20:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:20:40] *** Quits: advanced_malform (~Srain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Remote host closed the connection)
[07:22:24] *** Joins: ironman (~ironman@2401:4900:1b95:28f4:375e:df0e:5e23:68ee)
[07:22:45] *** Quits: pyook (~pyook@user/puke) ()
[07:22:57] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[07:25:35] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:30:31] *** Quits: malloy (~jimery@120.235.172.169) (Read error: Connection reset by peer)
[07:32:55] *** Joins: idle_rain (~idle_rain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[07:33:54] *** Quits: fe23 (~fe23@2409:8a34:477:2010:ec7a:65be:1f05:f30) (Ping timeout: 250 seconds)
[07:34:31] *** Quits: idle_rain (~idle_rain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: idle_rain)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:05] *** Joins: malloy (~jimery@120.235.172.169)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:40:09] *** Joins: kts (~kts@103.73.237.109)
[07:40:20] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[07:42:00] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[07:42:20] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[07:48:46] *** Quits: kts (~kts@103.73.237.109) (Ping timeout: 256 seconds)
[07:49:17] *** nuxil_ is now known as nuxil
[07:49:56] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[07:53:15] *** Joins: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[07:55:42] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[07:55:48] *** Joins: hinata (~hinata@2409:4042:2486:40e7:6c56:842d:a5ca:38e3)
[07:56:02] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[07:58:22] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[07:58:47] *** Quits: malina (~malina@user/malina) (Quit: malina)
[07:59:13] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[08:00:40] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[08:01:30] *** Joins: pert (~pert@fsf/member/pert)
[08:01:36] *** Quits: pert (~pert@fsf/member/pert) (Remote host closed the connection)
[08:05:11] <advanced_malform> Client: HexChat 2.16.0 • OS: Fedora release 35 (Thirty Five) • CPU: Intel(R) Core(TM) i3-8130U CPU @ 2.20GHz (3,40GHz) • Memory: Physical: 11,3 GiB Total (6,2 GiB Free) Swap: 7,8 GiB Total (7,3 GiB Free) • Storage: 1,0 TB / 1,2 TB (169,2 GB Free) • VGA: Intel Corporation UHD Graphics 620 @ Intel Corporation Xeon E3-1200 v6/7th Gen Core Processor Host Bridge/DRAM Registers • Uptime
[08:05:11] <advanced_malform> : 14h 59m 37s
[08:05:25] <advanced_malform> sorry:P
[08:06:16] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:07:49] *** Quits: moog (~moog@107.126.53.56) (Ping timeout: 256 seconds)
[08:09:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[08:12:25] *** Quits: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving)
[08:13:15] *** Joins: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[08:13:19] *** Joins: mahmutov (~mahmutov@37.155.28.181)
[08:17:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:17:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:17:30] *** Joins: wroathe (~wroathe@user/wroathe)
[08:19:24] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[08:21:08] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 250 seconds)
[08:21:16] *** Quits: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving)
[08:21:37] *** Joins: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[08:22:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:27:39] *** Quits: mahmutov (~mahmutov@37.155.28.181) (Ping timeout: 256 seconds)
[08:28:32] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[08:30:13] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[08:31:05] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:31:56] *** Quits: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving)
[08:33:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:33:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:33:59] *** Joins: wroathe (~wroathe@user/wroathe)
[08:36:27] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[08:36:47] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:38:38] *** Joins: zarakshR (~Thunderbi@2a02:c7f:6aff:2a00:b260:88ff:fe0b:ae5f)
[08:38:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[08:39:01] *** Joins: goepsilongo_ (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com)
[08:40:21] <zarakshR> Hello, do you guys know of any simple and easy to use C libraries for raster graphics?
[08:41:20] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[08:41:28] *** Quits: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com) (Ping timeout: 256 seconds)
[08:41:45] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:41:46] *** Joins: zacts (~zacts@user/zacts)
[08:43:48] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:44:25] <dave0> zarakshR: SDL2  http://libsdl.org/release/SDL2-2.0.20.tar.gz
[08:44:31] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[08:45:40] <figrita> zarakshR: also raylib https://www.raylib.com/
[08:45:41] <candide> Title of figrita's link: raylib | A simple and easy-to-use library to enjoy videogames programming
[08:46:20] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[08:50:47] *** Joins: fsoc (~shynerd@bison.alphaw0lf.xyz)
[08:51:59] *** Quits: MrFantastik (~f@2607:f598:bbda:90:c5d3:26c:1b99:66dc) (Ping timeout: 252 seconds)
[08:52:40] *** Quits: fsoc (~shynerd@bison.alphaw0lf.xyz) (Client Quit)
[08:54:36] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[08:57:16] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:59:35] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-7019-992d-5c33-127.fixed6.kpn.net)
[09:01:37] *** Quits: cust (amaama@2607:f2c0:f00f:2500::3) (Ping timeout: 250 seconds)
[09:01:48] *** Quits: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553) (Quit: Client limit exceeded: 20000)
[09:02:36] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[09:04:01] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[09:04:06] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-7019-992d-5c33-127.fixed6.kpn.net) (Ping timeout: 245 seconds)
[09:07:14] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:08:12] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[09:08:12] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (*.net *.split)
[09:08:12] *** Quits: masoudd (~masoudd@user/masoudd) (*.net *.split)
[09:08:12] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[09:08:12] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (*.net *.split)
[09:08:12] *** Quits: Alhazred (~Alhazred@86.106.74.40) (*.net *.split)
[09:08:12] *** Quits: robyndrake (~robyndrak@user/robyndrake) (*.net *.split)
[09:08:12] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (*.net *.split)
[09:08:12] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (*.net *.split)
[09:08:12] *** Quits: vboykox (~user@95.134.49.25) (*.net *.split)
[09:08:12] *** Quits: Sadale (~Sadale@user/sadale) (*.net *.split)
[09:08:12] *** Quits: silkworks (~silkworks@ctrl-c.club) (*.net *.split)
[09:08:12] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (*.net *.split)
[09:08:12] *** Quits: APic (~apic@apic.name) (*.net *.split)
[09:08:12] *** Quits: nathanael (~nathanael@user/nathanael) (*.net *.split)
[09:08:12] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (*.net *.split)
[09:08:12] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[09:08:12] *** Quits: csrf (~csrf@user/csrf) (*.net *.split)
[09:08:12] *** Quits: lowin_ (~lowin@user/lowin) (*.net *.split)
[09:08:12] *** Quits: ho4x (~jh@vps2023712.fastwebserver.de) (*.net *.split)
[09:08:12] *** Quits: sokan (~sokan@85.73.227.251) (*.net *.split)
[09:08:12] *** Quits: Khoyo (~khoyo@user/khoyo) (*.net *.split)
[09:08:12] *** Quits: karakedi (~eAC53C340@user/karakedi) (*.net *.split)
[09:08:12] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[09:08:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[09:08:12] *** Quits: tbcr (~tbcr@107.13.189.161) (*.net *.split)
[09:08:12] *** Quits: towel (~towel@user/towel) (*.net *.split)
[09:08:12] *** Quits: gonogo_ (~gonogo@167.88.62.87) (*.net *.split)
[09:08:12] *** Quits: dansan (~daniel@75.81.148.51) (*.net *.split)
[09:08:12] *** Quits: MrC (~Ben@mrbenc.net) (*.net *.split)
[09:08:12] *** Quits: wovixo (~wovixo@128.104.205.49) (*.net *.split)
[09:08:12] *** Quits: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se) (*.net *.split)
[09:08:12] *** Quits: constxd (~brad@142.167.170.88) (*.net *.split)
[09:08:12] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[09:08:12] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (*.net *.split)
[09:08:12] *** Quits: Viewday11 (~Viewday@user/viewday) (*.net *.split)
[09:08:12] *** Quits: sandman13 (sandman13@jujube.ircnow.org) (*.net *.split)
[09:08:12] *** Quits: ai (~ai@shell.k4be.pl) (*.net *.split)
[09:08:12] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (*.net *.split)
[09:08:12] *** Quits: foul_owl (~kerry@94.140.8.107) (*.net *.split)
[09:08:12] *** Quits: mad_enz (~mad_enz@lnsm1-torontoxn-142-120-17-169.internet.virginmobile.ca) (*.net *.split)
[09:08:12] *** Quits: haliucinas (~haliucina@5.20.153.21) (*.net *.split)
[09:08:12] *** Quits: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com) (*.net *.split)
[09:08:12] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (*.net *.split)
[09:08:12] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[09:08:12] *** Quits: Dotz0cat (~Dotz0cat@h55.84.187.173.dynamic.ip.windstream.net) (*.net *.split)
[09:08:12] *** Quits: sr20det (~sr20det@user/sr20det) (*.net *.split)
[09:08:12] *** Quits: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net) (*.net *.split)
[09:08:12] *** Quits: reset (~reset@user/reset) (*.net *.split)
[09:08:12] *** Quits: fbiagent (~fbiagent@user/fbiagent) (*.net *.split)
[09:08:12] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca) (*.net *.split)
[09:08:12] *** Quits: justGhost (~justache@user/justache) (*.net *.split)
[09:08:13] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (*.net *.split)
[09:08:13] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (*.net *.split)
[09:08:13] *** Quits: cehteh (~ct@git.pipapo.org) (*.net *.split)
[09:08:13] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[09:08:13] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[09:08:13] *** Quits: sebito91 (~sborza@45.55.74.66) (*.net *.split)
[09:08:13] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[09:08:13] *** Quits: cyphics (~cyphix@user/cyphics) (*.net *.split)
[09:08:13] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[09:08:13] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[09:08:13] *** Quits: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com) (*.net *.split)
[09:08:13] *** Quits: gce108 (~gce@user/gce108) (*.net *.split)
[09:08:13] *** Quits: Zenton (~user@user/zenton) (*.net *.split)
[09:08:13] *** Quits: pi0 (~default@23.95.234.10) (*.net *.split)
[09:08:13] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (*.net *.split)
[09:08:13] *** Quits: Tordek (~tordek@triton.blinkenshell.org) (*.net *.split)
[09:08:13] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[09:08:13] *** Quits: brdb (~alarm@24.61.226.255) (*.net *.split)
[09:08:13] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[09:08:13] *** Quits: blinky42 (~quassel@user/blinky42) (*.net *.split)
[09:08:13] *** Quits: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net) (*.net *.split)
[09:08:13] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[09:08:13] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[09:08:13] *** Quits: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net) (*.net *.split)
[09:08:13] *** Quits: eletrotupi (~eletrotup@user/eletrotupi) (*.net *.split)
[09:08:13] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[09:08:13] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[09:08:13] *** Quits: van (~van@46.23.94.214) (*.net *.split)
[09:08:13] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:08:13] *** Quits: andjjj23_ (~irc@107.170.228.47) (*.net *.split)
[09:08:13] *** Quits: les_ (~whome@user/les) (*.net *.split)
[09:08:13] *** Quits: noonien (~noonien@user/noonien) (*.net *.split)
[09:08:13] *** Quits: gtlsgamr (~gtlsgamr@user/gtlsgamr) (*.net *.split)
[09:08:13] *** Quits: corelax (~corelax@user/corelax) (*.net *.split)
[09:08:13] *** Quits: ntdll_ (~ntdll@shion.saiban.me) (*.net *.split)
[09:08:13] *** Quits: aesin_ (~aesin@81.211.127.107) (*.net *.split)
[09:08:13] *** Quits: Phil-Work (~phil@62.3.100.20) (*.net *.split)
[09:08:13] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (*.net *.split)
[09:08:13] *** Quits: koollman (~samson_t@user/koollman) (*.net *.split)
[09:08:13] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[09:08:13] *** Quits: rahl (~rahl@otaku.sdf.org) (*.net *.split)
[09:08:13] *** Quits: eeerik8 (~eeerik8@95.179.149.48) (*.net *.split)
[09:08:13] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[09:08:13] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:08:13] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (*.net *.split)
[09:08:13] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (*.net *.split)
[09:08:13] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (*.net *.split)
[09:08:13] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (*.net *.split)
[09:08:13] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[09:08:13] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (*.net *.split)
[09:08:13] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[09:08:13] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (*.net *.split)
[09:08:13] *** Quits: alch (~alch@151.34.90.207) (*.net *.split)
[09:08:14] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (*.net *.split)
[09:08:14] *** Quits: luke-jr (~luke-jr@user/luke-jr) (*.net *.split)
[09:08:14] *** Quits: pizdets (~pizdets@183.182.111.120) (*.net *.split)
[09:08:14] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (*.net *.split)
[09:08:14] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[09:08:14] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (*.net *.split)
[09:08:14] *** Quits: EtherNet (~ethernet@user/ethernet) (*.net *.split)
[09:08:14] *** Quits: zhiayang (~zhiayang@user/zhiayang) (*.net *.split)
[09:08:14] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[09:08:14] *** Quits: joev (~joev@user/joev) (*.net *.split)
[09:08:14] *** Quits: fcresende_ (fcresende@2605:6400:20:434:64d1:2b97:ef75:bc59) (*.net *.split)
[09:08:14] *** Quits: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com) (*.net *.split)
[09:08:14] *** Quits: tyzoid (~tyzoid@srv1.tyzoid.com) (*.net *.split)
[09:08:14] *** Quits: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e) (*.net *.split)
[09:08:14] *** Quits: fmlatghor (~lcoogan@2601:5cd:8100:2890::6) (*.net *.split)
[09:08:14] *** Quits: skipper (~whatsupbo@user/scobydoo) (*.net *.split)
[09:08:14] *** Quits: johnnyreb (~tth@user/johnnyreb) (*.net *.split)
[09:08:14] *** Quits: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com) (*.net *.split)
[09:08:14] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (*.net *.split)
[09:08:14] *** Quits: ado (sid462155@id-462155.uxbridge.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: trvv (555a816688@user/trvv) (*.net *.split)
[09:08:14] *** Quits: dan_berg_pub_ (2c6463a49d@2604:bf00:561:2000::1c) (*.net *.split)
[09:08:14] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: saribro (~swinnenb@user/swinnenb) (*.net *.split)
[09:08:14] *** Quits: Fl1pFl0p (~FlipFlop@user/fl1pfl0p) (*.net *.split)
[09:08:14] *** Quits: Furai (~Furai@furai.pl) (*.net *.split)
[09:08:14] *** Quits: Guest7572 (~luca0N@nautilus.luca0n.com) (*.net *.split)
[09:08:14] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (*.net *.split)
[09:08:14] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:e5d6:4e8d:5502:447d) (*.net *.split)
[09:08:14] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[09:08:14] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: BlueShark (sid10311@user/blueshark) (*.net *.split)
[09:08:14] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[09:08:14] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (*.net *.split)
[09:08:14] *** Quits: |smlckz| (~smlckz@user/smlckz) (*.net *.split)
[09:08:14] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[09:08:14] *** Quits: retroid_ (~retro@2e40edd9.skybroadband.com) (*.net *.split)
[09:08:14] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (*.net *.split)
[09:08:14] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (*.net *.split)
[09:08:14] *** Quits: digilink (~digilink@user/digilink) (*.net *.split)
[09:08:14] *** Quits: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com) (*.net *.split)
[09:08:14] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[09:08:14] *** Quits: nate (NBishop@o.apocaleaps.com) (*.net *.split)
[09:08:14] *** Quits: qwedfg_ (~qwedfg@user/qwedfg) (*.net *.split)
[09:08:14] *** Quits: int (~int@0x4.cx) (*.net *.split)
[09:08:14] *** Quits: chris1 (~chris@ip-103-85-39-45.syd.xi.com.au) (*.net *.split)
[09:08:14] *** Quits: dupl0x (~duplox@137.220.127.235) (*.net *.split)
[09:08:14] *** Quits: nitrix (~nitrix@user/nitrix) (*.net *.split)
[09:08:14] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (*.net *.split)
[09:08:14] *** Quits: Matt|home (~matt@adsl-74-233-58-56.mia.bellsouth.net) (*.net *.split)
[09:08:14] *** Quits: tm512 (~tm512@user/tm512) (*.net *.split)
[09:08:14] *** Quits: candide (~pbot3@about/c/bot/candide) (*.net *.split)
[09:08:14] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[09:08:14] *** Quits: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9) (*.net *.split)
[09:08:14] *** Quits: edr (~edr@user/edr) (*.net *.split)
[09:08:14] *** Quits: kzootech (~contact@kzoo.tech) (*.net *.split)
[09:08:14] *** Quits: eau (~chat@user/eau) (*.net *.split)
[09:08:14] *** Quits: trenka (~ykaliuta@user/trenka) (*.net *.split)
[09:08:14] *** Quits: AssKoala (~asskoala@user/asskoala) (*.net *.split)
[09:08:14] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[09:08:14] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[09:08:14] *** Quits: ChoHag (~mking@81.187.183.71) (*.net *.split)
[09:08:14] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (*.net *.split)
[09:08:14] *** Quits: noahmg123 (sid89117@id-89117.ilkley.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[09:08:15] *** Quits: domve (~dom@user/domve) (*.net *.split)
[09:08:15] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (*.net *.split)
[09:08:15] *** Quits: mixfix41 (~homefame@user/mixfix41) (*.net *.split)
[09:08:15] *** Quits: aighearach (~paris@user/aighearach) (*.net *.split)
[09:08:15] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[09:08:15] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[09:08:15] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[09:08:15] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[09:08:15] *** Quits: gnomesort (~gnomesort@user/gnomesort) (*.net *.split)
[09:08:15] *** Quits: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net) (*.net *.split)
[09:08:15] *** Quits: rkta (~rkta@2001:4ba0:cafe:eaf::1) (*.net *.split)
[09:08:15] *** Quits: noose (~noose@user/noose) (*.net *.split)
[09:08:15] *** Quits: jayaura (e2d69d141a@2604:bf00:561:2000::2b0) (*.net *.split)
[09:08:15] *** Quits: Retr0id (~Retr0id@user/retr0id) (*.net *.split)
[09:08:15] *** Quits: exec64 (5ff8a84e19@2604:bf00:561:2000::f9) (*.net *.split)
[09:08:15] *** Quits: akspecs (00cc8321af@sourcehut/user/akspecs) (*.net *.split)
[09:08:15] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[09:08:15] *** Quits: k0ta (3da8335bb9@2604:bf00:561:2000::10a) (*.net *.split)
[09:08:15] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (*.net *.split)
[09:08:15] *** Quits: colbyhub (411e4f2740@2604:bf00:561:2000::2de) (*.net *.split)
[09:08:15] *** Quits: trinity (9df954e8f1@2604:bf00:561:2000::cd) (*.net *.split)
[09:08:15] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (*.net *.split)
[09:08:15] *** Quits: mzal (7dc76dea13@2604:bf00:561:2000::69) (*.net *.split)
[09:08:15] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[09:08:15] *** Quits: ikiryo (sid109660@user/ikiryo) (*.net *.split)
[09:08:15] *** Quits: trn (jhj@sourcehut/user/trn) (*.net *.split)
[09:08:15] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[09:08:15] *** Quits: bayleaf (~bayleaf@192.249.60.20) (*.net *.split)
[09:08:15] *** Quits: ProperNoun (~holyShizn@user/propernoun) (*.net *.split)
[09:08:15] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (*.net *.split)
[09:08:15] *** Quits: lewisje (~lewisje@72.49.207.113) (*.net *.split)
[09:08:15] *** Quits: Macuser (Macuser@here.for-the.chat) (*.net *.split)
[09:08:15] *** Quits: ra4king (~ra4king@roiatalla.com) (*.net *.split)
[09:08:15] *** Quits: divine (~divine@2001:470:8247:1::31) (*.net *.split)
[09:08:15] *** Quits: Djoobstil (~djoobstil@djoobstil.online) (*.net *.split)
[09:08:15] *** Quits: Arsen (arsen@managarm/dev/Arsen) (*.net *.split)
[09:08:15] *** Quits: hecanjog2 (~hecanjog@2a01:4f9:6a:5326::2) (*.net *.split)
[09:08:15] *** Quits: DarkUranium (~DarkUrani@stdrand.com) (*.net *.split)
[09:08:15] *** Quits: decartes (sid240036@id-240036.helmsley.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: psb___ (sid500598@id-500598.ilkley.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: nohit (sid334887@id-334887.tinside.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: overrider (~overrider@user/overrider) (*.net *.split)
[09:08:15] *** Quits: bdt (~bdt@155.51-174-24.customer.lyse.net) (*.net *.split)
[09:08:16] *** Quits: dudebbn (~dudebbn@cpe-174-97-16-77.cinci.res.rr.com) (*.net *.split)
[09:08:16] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (*.net *.split)
[09:08:16] *** Quits: bw_ (~bw@coconut.xen.prgmr.com) (*.net *.split)
[09:08:16] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[09:08:16] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[09:08:16] *** Quits: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6) (*.net *.split)
[09:08:16] *** Quits: sdk_ (~x@shell.codevoid.de) (*.net *.split)
[09:08:16] *** Quits: Oddity (~Oddity@user/oddity) (*.net *.split)
[09:08:16] *** Quits: ravndal (~weechat@user/ravndal) (*.net *.split)
[09:08:16] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[09:08:16] *** Quits: paulo (paulo@user/paulo/x-9032687) (*.net *.split)
[09:08:16] *** Quits: kilolympus (~kilolympu@31.205.200.235) (*.net *.split)
[09:08:16] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (*.net *.split)
[09:08:16] *** Quits: edk (edk@libera/staff/edk) (*.net *.split)
[09:08:16] *** Quits: katsuragi (katsuragi@tilde.institute) (*.net *.split)
[09:08:16] *** Quits: mormue (~mormue@static.29.186.130.94.clients.your-server.de) (*.net *.split)
[09:08:16] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[09:08:16] *** Quits: Lyude (~lyudess@pool-96-230-100-15.bstnma.fios.verizon.net) (*.net *.split)
[09:08:16] *** Quits: useretail (~useretail@185.132.19.151) (*.net *.split)
[09:08:16] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[09:08:16] *** Quits: koo5_ (~quassel@51.140.155.227) (*.net *.split)
[09:08:16] *** Quits: scaramanga (~scara@1.239.35.120) (*.net *.split)
[09:08:16] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (*.net *.split)
[09:08:16] *** Quits: LIERO (~no@user/liero) (*.net *.split)
[09:08:16] *** Quits: nowz (~nowz@user/nowz) (*.net *.split)
[09:08:16] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[09:08:16] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[09:08:16] *** Quits: alicef (~none@gentoo/developer/alicef) (*.net *.split)
[09:08:16] *** Quits: haniaF (~haniaF@83.24.206.88.ipv4.supernova.orange.pl) (*.net *.split)
[09:08:16] *** Quits: crudo (~crudo@livredigital.com) (*.net *.split)
[09:08:16] *** Quits: Chpy0 (~chpy@30-8-178-69.static.gci.net) (*.net *.split)
[09:08:16] *** Quits: marcj (~marc@205.175.215.11) (*.net *.split)
[09:08:16] *** Quits: novns (~novns@user/novns) (*.net *.split)
[09:08:16] *** Quits: timmot (~timmot@207.148.85.201) (*.net *.split)
[09:08:16] *** Quits: kubrickdave_ (~kubrickda@194-166-168-169.adsl.highway.telekom.at) (*.net *.split)
[09:08:16] *** Quits: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com) (*.net *.split)
[09:08:16] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (*.net *.split)
[09:08:16] *** Quits: begriffs (~begriffs@user/begriffs) (*.net *.split)
[09:08:16] *** Quits: acolarh (~niels@3e6be663.rev.stofanet.dk) (*.net *.split)
[09:08:16] *** Quits: bkhl (~bkhl@user/bkhl) (*.net *.split)
[09:08:16] *** Quits: Ranhir (~Ranhir@157.97.53.139) (*.net *.split)
[09:08:16] *** Quits: monchi (~joints@143.198.92.132) (*.net *.split)
[09:08:16] *** Quits: CodeAgain (~codeagain@user/CodeAgain) (*.net *.split)
[09:08:16] *** Quits: Cyp (~cyp@213.237.88.120) (*.net *.split)
[09:08:16] *** Quits: ornxka (~ornxka@user/ornxka) (*.net *.split)
[09:08:16] *** Quits: kplant (~kplant@user/kplant) (*.net *.split)
[09:08:16] *** Quits: cmbrnt (~cmbrnt@static.106.104.76.144.clients.your-server.de) (*.net *.split)
[09:08:16] *** Quits: Dreg- (~Dreg@fr33project.org) (*.net *.split)
[09:08:17] *** Quits: minto (~mintograd@47.201.5.61) (*.net *.split)
[09:08:17] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[09:08:17] *** Quits: synbiose (~synbiose@user/synbiose) (*.net *.split)
[09:08:17] *** Quits: xSavitar (~xSavitar@user/xsavitar) (*.net *.split)
[09:08:17] *** Quits: ndorf (~nd@ob.noxio.us) (*.net *.split)
[09:08:17] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[09:08:17] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[09:08:17] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[09:08:17] *** Quits: kaichiuchu (~mike@user/kaichiuchu) (*.net *.split)
[09:08:17] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (*.net *.split)
[09:08:17] *** Quits: Pentode (~Pentode@mobile-166-170-29-174.mycingular.net) (*.net *.split)
[09:08:17] *** Quits: DLange (~DLange@about/linux/staff/DLange) (*.net *.split)
[09:08:17] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (*.net *.split)
[09:08:17] *** Quits: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch) (*.net *.split)
[09:08:17] *** Quits: kassle (~kassle@107.175.32.53) (*.net *.split)
[09:08:17] *** Quits: mbarbar (~mbarbar@oak.xen.prgmr.com) (*.net *.split)
[09:08:17] *** Quits: elichai2 (sid212594@id-212594.hampstead.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[09:08:17] *** Quits: merced (merced@user/merced) (*.net *.split)
[09:08:17] *** Quits: gnx (~heh@yep.i.am.1337.cx) (*.net *.split)
[09:08:17] *** Quits: malloy (~jimery@120.235.172.169) (*.net *.split)
[09:08:17] *** Quits: Tempesta (~Tempesta@user/tempesta) (*.net *.split)
[09:08:17] *** heiner is now known as boreas
[09:11:51] *** Quits: smeso (~smeso@user/smeso) (Ping timeout: 256 seconds)
[09:11:51] *** Quits: Ragnor (~Ragnor@user/ragnor) (Ping timeout: 256 seconds)
[09:11:51] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Ping timeout: 256 seconds)
[09:12:21] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[09:12:25] *** Quits: goepsilongo_ (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com) (Ping timeout: 256 seconds)
[09:12:25] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 256 seconds)
[09:12:25] *** Quits: coruja (~coruja@user/coruja) (Ping timeout: 256 seconds)
[09:12:25] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Ping timeout: 256 seconds)
[09:12:25] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 256 seconds)
[09:12:27] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 250 seconds)
[09:13:03] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:13:51] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-f079-d115-4870-c583.res6.spectrum.com)
[09:14:39] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[09:18:05] *** Joins: slavfox (~slavfox@93.158.232.111)
[09:19:06] *** Quits: zarakshR (~Thunderbi@2a02:c7f:6aff:2a00:b260:88ff:fe0b:ae5f) (Quit: zarakshR)
[09:21:15] *** Joins: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6)
[09:21:15] *** Joins: sdk_ (~x@shell.codevoid.de)
[09:21:15] *** Joins: Oddity (~Oddity@user/oddity)
[09:21:15] *** Joins: ravndal (~weechat@user/ravndal)
[09:21:15] *** Joins: dstein64 (~dstein64@dannyadam.com)
[09:21:15] *** Joins: paulo (paulo@user/paulo/x-9032687)
[09:21:15] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[09:21:15] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[09:21:15] *** Joins: edk (edk@libera/staff/edk)
[09:21:15] *** Joins: katsuragi (katsuragi@tilde.institute)
[09:21:15] *** Joins: mormue (~mormue@static.29.186.130.94.clients.your-server.de)
[09:21:15] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:21:15] *** Joins: Lyude (~lyudess@pool-96-230-100-15.bstnma.fios.verizon.net)
[09:21:15] *** Joins: useretail (~useretail@185.132.19.151)
[09:21:15] *** Joins: noarb (~noarb@user/noarb)
[09:21:15] *** Joins: koo5_ (~quassel@51.140.155.227)
[09:21:15] *** Joins: scaramanga (~scara@1.239.35.120)
[09:21:15] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[09:21:15] *** Joins: LIERO (~no@user/liero)
[09:21:15] *** Joins: nowz (~nowz@user/nowz)
[09:21:15] *** Joins: Cienisty (Cienisty@user/cienisty)
[09:21:15] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[09:21:15] *** Joins: alicef (~none@gentoo/developer/alicef)
[09:21:15] *** Joins: haniaF (~haniaF@83.24.206.88.ipv4.supernova.orange.pl)
[09:21:15] *** Joins: crudo (~crudo@livredigital.com)
[09:21:15] *** Joins: timmot (~timmot@207.148.85.201)
[09:21:15] *** Joins: Chpy0 (~chpy@30-8-178-69.static.gci.net)
[09:21:15] *** Joins: marcj (~marc@205.175.215.11)
[09:21:15] *** Joins: novns (~novns@user/novns)
[09:21:15] *** Joins: kubrickdave_ (~kubrickda@194-166-168-169.adsl.highway.telekom.at)
[09:21:15] *** Joins: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com)
[09:21:15] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[09:21:15] *** Joins: begriffs (~begriffs@user/begriffs)
[09:21:15] *** Joins: acolarh (~niels@3e6be663.rev.stofanet.dk)
[09:21:15] *** Joins: bkhl (~bkhl@user/bkhl)
[09:21:15] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[09:21:15] *** Joins: monchi (~joints@143.198.92.132)
[09:21:15] *** Joins: CodeAgain (~codeagain@user/CodeAgain)
[09:21:15] *** Joins: cmbrnt (~cmbrnt@static.106.104.76.144.clients.your-server.de)
[09:21:15] *** Joins: Cyp (~cyp@213.237.88.120)
[09:21:15] *** Joins: ornxka (~ornxka@user/ornxka)
[09:21:15] *** Joins: kplant (~kplant@user/kplant)
[09:21:15] *** Joins: Dreg- (~Dreg@fr33project.org)
[09:21:15] *** Joins: minto (~mintograd@47.201.5.61)
[09:21:15] *** Joins: elemongw (~elemongw@20.107.36.50)
[09:21:15] *** Joins: synbiose (~synbiose@user/synbiose)
[09:21:15] *** Joins: xSavitar (~xSavitar@user/xsavitar)
[09:21:15] *** Joins: ndorf (~nd@ob.noxio.us)
[09:21:15] *** Joins: BUSY (~BUSY@user/busy)
[09:21:15] *** Joins: ns12 (~ns12@user/ns12)
[09:21:15] *** Joins: kaichiuchu (~mike@user/kaichiuchu)
[09:21:15] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[09:21:15] *** Joins: Pentode (~Pentode@mobile-166-170-29-174.mycingular.net)
[09:21:15] *** Joins: DLange (~DLange@about/linux/staff/DLange)
[09:21:15] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[09:21:15] *** Joins: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch)
[09:22:43] *** boreas is now known as 076AAFO7U
[09:22:43] *** Joins: Ragnor (~Ragnor@dslb-084-062-055-138.084.062.pools.vodafone-ip.de)
[09:22:43] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[09:22:43] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:22:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:22:43] *** Joins: Trashlord (~trash@user/trashlord)
[09:22:43] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[09:22:43] *** Joins: jancoow (~jancoow@user/jancoow)
[09:22:43] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[09:22:43] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[09:22:43] *** Joins: pizdets (~pizdets@183.182.111.120)
[09:22:43] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[09:22:43] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[09:22:43] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[09:22:43] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[09:22:43] *** Joins: EtherNet (~ethernet@user/ethernet)
[09:22:43] *** Joins: zhiayang (~zhiayang@user/zhiayang)
[09:22:43] *** Joins: Isthmusi (~Isthmus@user/isveni)
[09:22:43] *** Joins: joev (~joev@user/joev)
[09:22:43] *** Joins: fcresende_ (fcresende@2605:6400:20:434:64d1:2b97:ef75:bc59)
[09:22:43] *** Joins: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com)
[09:22:43] *** Joins: tyzoid (~tyzoid@srv1.tyzoid.com)
[09:22:43] *** Joins: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e)
[09:22:43] *** Joins: fmlatghor (~lcoogan@2601:5cd:8100:2890::6)
[09:22:43] *** Joins: skipper (~whatsupbo@user/scobydoo)
[09:22:43] *** Joins: johnnyreb (~tth@user/johnnyreb)
[09:22:43] *** Joins: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com)
[09:22:43] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[09:22:43] *** Joins: ado (sid462155@id-462155.uxbridge.irccloud.com)
[09:22:43] *** Joins: trvv (555a816688@user/trvv)
[09:22:43] *** Joins: dan_berg_pub_ (2c6463a49d@2604:bf00:561:2000::1c)
[09:22:43] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[09:22:43] *** Joins: saribro (~swinnenb@user/swinnenb)
[09:22:43] *** Joins: Fl1pFl0p (~FlipFlop@user/fl1pfl0p)
[09:22:43] *** Joins: Furai (~Furai@furai.pl)
[09:22:43] *** Joins: Guest7572 (~luca0N@nautilus.luca0n.com)
[09:22:43] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[09:22:43] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:e5d6:4e8d:5502:447d)
[09:22:43] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[09:22:43] *** Joins: buhman (sid411355@user/buhman)
[09:22:43] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[09:22:43] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[09:22:43] *** Joins: BlueShark (sid10311@user/blueshark)
[09:22:43] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[09:22:43] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[09:22:43] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[09:22:43] *** Joins: |smlckz| (~smlckz@user/smlckz)
[09:22:43] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[09:22:43] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[09:22:43] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[09:22:43] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[09:22:43] *** Joins: digilink (~digilink@user/digilink)
[09:22:43] *** Joins: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com)
[09:22:43] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[09:22:43] *** Joins: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9)
[09:22:43] *** Joins: nate (NBishop@o.apocaleaps.com)
[09:22:43] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[09:22:43] *** Joins: int (~int@0x4.cx)
[09:22:43] *** Joins: chris1 (~chris@ip-103-85-39-45.syd.xi.com.au)
[09:22:43] *** Joins: dupl0x (~duplox@137.220.127.235)
[09:22:43] *** Joins: nitrix (~nitrix@user/nitrix)
[09:22:43] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[09:22:43] *** Joins: Matt|home (~matt@adsl-74-233-58-56.mia.bellsouth.net)
[09:22:43] *** Joins: tm512 (~tm512@user/tm512)
[09:22:43] *** Joins: candide (~pbot3@about/c/bot/candide)
[09:22:43] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[09:22:43] *** Joins: edr (~edr@user/edr)
[09:22:43] *** Joins: kzootech (~contact@kzoo.tech)
[09:22:43] *** Joins: eau (~chat@user/eau)
[09:22:43] *** Joins: AssKoala (~asskoala@user/asskoala)
[09:22:43] *** Joins: trenka (~ykaliuta@user/trenka)
[09:22:43] *** Joins: fluter (~fluter@user/fluter)
[09:22:43] *** Joins: g2anj (~v@58.228.230.4)
[09:22:43] *** Joins: ChoHag (~mking@81.187.183.71)
[09:22:43] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[09:22:43] *** Joins: noahmg123 (sid89117@id-89117.ilkley.irccloud.com)
[09:22:43] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[09:22:43] *** Joins: domve (~dom@user/domve)
[09:22:43] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[09:22:43] *** Joins: mixfix41 (~homefame@user/mixfix41)
[09:22:43] *** Joins: aighearach (~paris@user/aighearach)
[09:22:43] *** Joins: OverCoder (~OverCoder@user/overcoder)
[09:22:43] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[09:22:43] *** Joins: tafa (~tafa@user/tafa)
[09:22:43] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[09:22:43] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[09:22:43] *** Joins: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net)
[09:22:43] *** Joins: rkta (~rkta@2001:4ba0:cafe:eaf::1)
[09:22:43] *** Joins: noose (~noose@user/noose)
[09:22:43] *** Joins: jayaura (e2d69d141a@2604:bf00:561:2000::2b0)
[09:22:43] *** Joins: Retr0id (~Retr0id@user/retr0id)
[09:22:43] *** Joins: exec64 (5ff8a84e19@2604:bf00:561:2000::f9)
[09:22:43] *** Joins: sm2n (ae95cb1267@user/sm2n)
[09:22:43] *** Joins: akspecs (00cc8321af@sourcehut/user/akspecs)
[09:22:43] *** Joins: trinity (9df954e8f1@2604:bf00:561:2000::cd)
[09:22:43] *** Joins: colbyhub (411e4f2740@2604:bf00:561:2000::2de)
[09:22:43] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[09:22:43] *** Joins: k0ta (3da8335bb9@2604:bf00:561:2000::10a)
[09:22:43] *** Joins: mzal (7dc76dea13@2604:bf00:561:2000::69)
[09:22:43] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[09:22:43] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[09:22:43] *** Joins: ikiryo (sid109660@user/ikiryo)
[09:22:43] *** Joins: trn (jhj@sourcehut/user/trn)
[09:22:43] *** Joins: FLHerne (flh@flherne.uk)
[09:22:43] *** Joins: bayleaf (~bayleaf@192.249.60.20)
[09:22:43] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[09:22:43] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[09:22:43] *** Joins: lewisje (~lewisje@72.49.207.113)
[09:22:43] *** Joins: Macuser (Macuser@here.for-the.chat)
[09:22:43] *** Joins: ra4king (~ra4king@roiatalla.com)
[09:22:43] *** Joins: divine (~divine@2001:470:8247:1::31)
[09:22:43] *** Joins: Djoobstil (~djoobstil@djoobstil.online)
[09:22:43] *** Joins: Arsen (arsen@managarm/dev/Arsen)
[09:22:43] *** Joins: hecanjog2 (~hecanjog@2a01:4f9:6a:5326::2)
[09:22:43] *** Joins: DarkUranium (~DarkUrani@stdrand.com)
[09:22:43] *** Joins: psb___ (sid500598@id-500598.ilkley.irccloud.com)
[09:22:43] *** Joins: decartes (sid240036@id-240036.helmsley.irccloud.com)
[09:22:43] *** Joins: nohit (sid334887@id-334887.tinside.irccloud.com)
[09:22:43] *** Joins: overrider (~overrider@user/overrider)
[09:22:43] *** Joins: bdt (~bdt@155.51-174-24.customer.lyse.net)
[09:22:43] *** Joins: dudebbn (~dudebbn@cpe-174-97-16-77.cinci.res.rr.com)
[09:22:43] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[09:22:43] *** Joins: bw_ (~bw@coconut.xen.prgmr.com)
[09:22:43] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[09:22:43] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[09:23:34] *** Joins: Viewday11 (~Viewday@61.141.126.127)
[09:23:34] *** Joins: coruja (~coruja@158.181.80.105)
[09:23:34] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[09:23:34] *** Joins: cust_ (amaama@blackbox.amaama.org)
[09:23:34] *** Joins: fsoc (~shynerd@bison.alphaw0lf.xyz)
[09:23:34] *** Joins: supakeen (~user@python/site-packages/supakeen)
[09:23:34] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[09:23:34] *** Joins: masoudd (~masoudd@user/masoudd)
[09:23:34] *** Joins: Wulf (~Wulf@user/wulf)
[09:23:34] *** Joins: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt)
[09:23:34] *** Joins: robyndrake (~robyndrak@user/robyndrake)
[09:23:34] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[09:23:34] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[09:23:34] *** Joins: vboykox (~user@95.134.49.25)
[09:23:34] *** Joins: Sadale (~Sadale@user/sadale)
[09:23:34] *** Joins: silkworks (~silkworks@ctrl-c.club)
[09:23:34] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[09:23:34] *** Joins: APic (~apic@apic.name)
[09:23:34] *** Joins: nathanael (~nathanael@user/nathanael)
[09:23:34] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[09:23:34] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[09:23:34] *** Joins: csrf (~csrf@user/csrf)
[09:23:34] *** Joins: lowin_ (~lowin@user/lowin)
[09:23:34] *** Joins: ho4x (~jh@vps2023712.fastwebserver.de)
[09:23:34] *** Joins: sokan (~sokan@85.73.227.251)
[09:23:34] *** Joins: Khoyo (~khoyo@user/khoyo)
[09:23:34] *** Joins: karakedi (~eAC53C340@user/karakedi)
[09:23:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[09:23:34] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:23:34] *** Joins: tbcr (~tbcr@107.13.189.161)
[09:23:34] *** Joins: towel (~towel@user/towel)
[09:23:34] *** Joins: gonogo_ (~gonogo@167.88.62.87)
[09:23:34] *** Joins: dansan (~daniel@75.81.148.51)
[09:23:34] *** Joins: MrC (~Ben@mrbenc.net)
[09:23:34] *** Joins: wovixo (~wovixo@128.104.205.49)
[09:23:34] *** Joins: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se)
[09:23:34] *** Joins: constxd (~brad@142.167.170.88)
[09:23:34] *** Joins: cursey (~cursey@user/cursey)
[09:23:34] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[09:23:34] *** Joins: sandman13 (sandman13@jujube.ircnow.org)
[09:23:34] *** Joins: ai (~ai@shell.k4be.pl)
[09:23:34] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[09:23:34] *** Joins: foul_owl (~kerry@94.140.8.107)
[09:23:34] *** Joins: mad_enz (~mad_enz@lnsm1-torontoxn-142-120-17-169.internet.virginmobile.ca)
[09:23:34] *** Joins: haliucinas (~haliucina@5.20.153.21)
[09:23:34] *** Joins: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com)
[09:23:34] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[09:23:34] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[09:23:34] *** Joins: Dotz0cat (~Dotz0cat@h55.84.187.173.dynamic.ip.windstream.net)
[09:23:34] *** Joins: sr20det (~sr20det@user/sr20det)
[09:23:34] *** Joins: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net)
[09:23:34] *** Joins: reset (~reset@user/reset)
[09:23:34] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[09:23:34] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca)
[09:23:34] *** Joins: justGhost (~justache@user/justache)
[09:23:34] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[09:23:34] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[09:23:34] *** Joins: cehteh (~ct@git.pipapo.org)
[09:23:34] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[09:23:34] *** Joins: sunyour (~sunyour@129.226.182.99)
[09:23:34] *** Joins: sebito91 (~sborza@45.55.74.66)
[09:23:34] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[09:23:34] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[09:23:34] *** Joins: cyphics (~cyphix@user/cyphics)
[09:23:34] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[09:23:34] *** Joins: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com)
[09:23:34] *** Joins: gce108 (~gce@user/gce108)
[09:23:34] *** Joins: Zenton (~user@user/zenton)
[09:23:34] *** Joins: pi0 (~default@23.95.234.10)
[09:23:34] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[09:23:34] *** Joins: Tordek (~tordek@triton.blinkenshell.org)
[09:23:34] *** Joins: [R] (~rs@genoce.org)
[09:23:34] *** Joins: brdb (~alarm@24.61.226.255)
[09:23:34] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[09:23:34] *** Joins: gtlsgamr (~gtlsgamr@user/gtlsgamr)
[09:23:34] *** Joins: blinky42 (~quassel@user/blinky42)
[09:23:34] *** Joins: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net)
[09:23:34] *** Joins: Spydar007 (~spydar007@user/spydar007)
[09:23:34] *** Joins: gjvc (~gjvc@user/gjvc)
[09:23:34] *** Joins: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net)
[09:23:34] *** Joins: eletrotupi (~eletrotup@user/eletrotupi)
[09:23:34] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[09:23:34] *** Joins: n1000 (~n1000@user/n1000)
[09:23:34] *** Joins: van (~van@46.23.94.214)
[09:23:34] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[09:23:34] *** Joins: andjjj23_ (~irc@107.170.228.47)
[09:23:34] *** Joins: les_ (~whome@user/les)
[09:23:34] *** Joins: noonien (~noonien@user/noonien)
[09:23:34] *** Joins: corelax (~corelax@user/corelax)
[09:23:34] *** Joins: ntdll_ (~ntdll@shion.saiban.me)
[09:23:34] *** Joins: aesin_ (~aesin@81.211.127.107)
[09:23:34] *** Joins: Phil-Work (~phil@62.3.100.20)
[09:23:34] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[09:23:34] *** Joins: koollman (~samson_t@user/koollman)
[09:23:34] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[09:23:34] *** Joins: rahl (~rahl@otaku.sdf.org)
[09:23:34] *** Joins: eeerik8 (~eeerik8@95.179.149.48)
[09:23:34] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[09:23:34] *** Joins: flynn (~mcbloch@user/flynn)
[09:23:44] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[09:24:00] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[09:24:07] *** Joins: ickk (~ickk@121-200-5-75.79c805.syd.nbn.aussiebb.net)
[09:24:07] *** Joins: kassle (~kassle@107.175.32.53)
[09:24:07] *** Joins: mbarbar (~mbarbar@oak.xen.prgmr.com)
[09:24:51] *** Joins: elichai2 (sid212594@id-212594.hampstead.irccloud.com)
[09:24:51] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[09:24:51] *** Joins: bjs (sid190364@user/bjs)
[09:24:51] *** Joins: merced (merced@user/merced)
[09:25:24] *** Joins: malloy (~jimery@120.235.172.169)
[09:25:24] *** Joins: Tempesta (~Tempesta@user/tempesta)
[09:25:37] *** Joins: alch (~alch@151.68.91.230)
[09:27:24] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[09:27:26] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 250 seconds)
[09:27:31] *** Joins: soapsudsxx_ (~soapsudsx@209.221.40.152)
[09:27:43] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[09:28:30] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 256 seconds)
[09:28:44] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[09:29:12] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[09:29:26] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[09:29:35] *** Joins: slavfox (~slavfox@93.158.232.111)
[09:29:41] *** Quits: hinata (~hinata@2409:4042:2486:40e7:6c56:842d:a5ca:38e3) (Remote host closed the connection)
[09:29:59] *** Joins: hinata (~hinata@2409:4042:2486:40e7:e4ac:cfef:dba:948e)
[09:30:25] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:32:40] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[09:35:32] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Client Quit)
[09:37:11] *** Joins: ekathva (~ekathva@2001:999:51:be01:ece4:95d6:ed47:f97a)
[09:37:46] *** Joins: rgrinberg (~textual@187.223.115.137)
[09:38:12] *** Quits: rgrinberg (~textual@187.223.115.137) (Client Quit)
[09:40:37] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving.)
[09:41:50] *** Joins: Guest14 (~Guest14@2601:845:c201:59b0::4c6a)
[09:42:00] *** Joins: diiirt5 (~diiirt@user/diiirt)
[09:42:31] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Changing host)
[09:42:31] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[09:42:39] *** Quits: diiirt (~diiirt@user/diiirt) (Remote host closed the connection)
[09:42:39] *** diiirt5 is now known as diiirt
[09:44:39] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[09:46:10] *** Quits: soapsudsxx_ (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[09:46:37] *** Parts: Guest14 (~Guest14@2601:845:c201:59b0::4c6a) ()
[09:54:36] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[09:55:01] *** Joins: karakedi (~eAC53C340@user/karakedi)
[09:56:13] *** Quits: qorg11 (~lain@2605:6400:c022:fa04::666) (Ping timeout: 250 seconds)
[09:57:28] *** Joins: qorg11 (~lain@2605:6400:c022:fa04::666)
[09:57:51] *** Quits: fsoc (~shynerd@bison.alphaw0lf.xyz) (Quit: leaving)
[09:58:34] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[09:58:50] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[09:59:09] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[10:00:46] *** Joins: Trashlord__ (~trash@user/trashlord)
[10:12:29] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[10:12:51] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:13:40] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[10:15:21] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[10:18:30] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[10:20:58] *** Joins: kish` (~aqua@user/aqua)
[10:28:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[10:29:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[10:33:24] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:11d8:db29:fd37:c221)
[10:33:27] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[10:34:47] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:34:47] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:34:47] *** Joins: wroathe (~wroathe@user/wroathe)
[10:35:06] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[10:35:31] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[10:37:08] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[10:37:30] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[10:39:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:42:40] *** Emet-Selch is now known as Azem
[10:43:17] *** Quits: Trashlord (~trash@user/trashlord) (Quit: "True ignorance is not the absence of knowledge, but the refusal to acquire it.")
[10:43:33] *** Trashlord__ is now known as Trashlord
[10:44:39] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[10:49:26] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[10:52:49] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[10:53:20] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:54:11] *** Quits: hinata (~hinata@2409:4042:2486:40e7:e4ac:cfef:dba:948e) (Remote host closed the connection)
[10:54:25] *** Quits: carlavilla (~carlavill@188.26.219.45) (Ping timeout: 256 seconds)
[10:54:29] *** Joins: hinata (~hinata@2409:4042:2486:40e7:b905:6210:fba1:6af)
[10:57:19] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 250 seconds)
[10:59:48] *** Joins: ekathva_ (~ekathva@93-90-58-246.welcomnet.fi)
[10:59:58] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-7019-992d-5c33-127.fixed6.kpn.net)
[11:00:50] *** Quits: malloy (~jimery@120.235.172.169) (Quit: WeeChat 3.0)
[11:02:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:03:28] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[11:03:50] *** Quits: jx0 (~jx0@199.229.250.138) (Quit: poof!)
[11:03:53] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[11:04:49] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[11:05:34] *** Joins: MajorBiscuit (~MajorBisc@c-001-021-032.client.tudelft.eduvpn.nl)
[11:07:19] *** Quits: sidy (~sidy@user/sidy) (Ping timeout: 268 seconds)
[11:07:51] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[11:07:59] *** Joins: sidy (~sidy@nat.esu3.org)
[11:08:22] *** sidy is now known as Guest3750
[11:10:12] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[11:11:06] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[11:13:02] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:13:52] *** Joins: strajder (~strajder@user/strajder)
[11:14:46] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[11:16:59] *** Joins: ironman_ (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[11:18:30] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[11:18:33] *** Quits: ironman (~ironman@2401:4900:1b95:28f4:375e:df0e:5e23:68ee) (Ping timeout: 250 seconds)
[11:18:58] *** ironman_ is now known as ironman
[11:19:04] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Client Quit)
[11:20:19] *** Joins: noarb (~noarb@user/noarb)
[11:22:01] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 245 seconds)
[11:22:59] *** Joins: ludwhe (~ludwhe@user/ludwhe)
[11:25:25] *** Quits: ludwhe (~ludwhe@user/ludwhe) (Client Quit)
[11:25:50] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:25:59] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[11:27:01] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-f079-d115-4870-c583.res6.spectrum.com) (Ping timeout: 245 seconds)
[11:29:33] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[11:30:51] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-f079-d115-4870-c583.res6.spectrum.com)
[11:32:54] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[11:34:11] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[11:34:26] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:34:42] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[11:35:27] *** Joins: Atque (~Atque@user/atque)
[11:36:30] *** Quits: ekathva_ (~ekathva@93-90-58-246.welcomnet.fi) (Remote host closed the connection)
[11:37:35] *** Joins: aradesh (~aradesh@user/aradesh)
[11:37:57] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:38:03] *** Joins: ekathva_ (~ekathva@93-90-58-246.welcomnet.fi)
[11:43:46] *** Joins: kish` (~aqua@user/aqua)
[11:44:01] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[11:44:28] *** Joins: kish` (~aqua@user/aqua)
[11:46:00] *** Joins: Rounin (~david@84.212.130.215)
[11:46:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:49:37] *** Quits: Ragnor (~Ragnor@dslb-084-062-055-138.084.062.pools.vodafone-ip.de) (Quit: leaving)
[11:49:51] *** Joins: Ragnor (~Ragnor@user/ragnor)
[11:52:50] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 260 seconds)
[11:53:54] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 250 seconds)
[11:53:58] *** lowin_ is now known as lowin
[11:55:49] *** Joins: MCSeekeri (~Thunderbi@140.250.205.203)
[11:56:27] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[11:59:26] *** Joins: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch)
[12:00:16] *** Quits: MCSeekeri (~Thunderbi@140.250.205.203) (Quit: MCSeekeri)
[12:05:15] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[12:09:27] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[12:11:53] *** Quits: hinata (~hinata@2409:4042:2486:40e7:b905:6210:fba1:6af) (Quit: Leaving)
[12:17:44] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 250 seconds)
[12:18:02] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (Ping timeout: 240 seconds)
[12:18:45] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[12:19:45] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:31:32] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[12:34:34] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[12:34:47] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[12:39:20] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[12:40:33] *** Quits: ekathva_ (~ekathva@93-90-58-246.welcomnet.fi) (Remote host closed the connection)
[12:41:59] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[12:42:26] *** Quits: ickk (~ickk@121-200-5-75.79c805.syd.nbn.aussiebb.net) (Quit: Leaving)
[12:42:39] *** Joins: xa0s (~xa0s@mab.sdf.org)
[12:43:26] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[12:43:32] *** Joins: arinov (~arinov@213.194.126.155)
[12:44:19] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[12:44:33] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Remote host closed the connection)
[12:45:49] *** Joins: bick (~kotaman@94.46.203.147)
[12:49:42] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:50:35] *** Quits: bick (~kotaman@94.46.203.147) (Ping timeout: 256 seconds)
[12:50:35] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[12:52:01] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 245 seconds)
[12:53:01] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 250 seconds)
[12:53:52] *** Joins: goepsilongo_ (~goepsilon@2603-7000-ab00-62ed-0577-8cef-87ec-adae.res6.spectrum.com)
[12:55:00] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-f079-d115-4870-c583.res6.spectrum.com) (Ping timeout: 250 seconds)
[12:59:16] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:59:55] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:02:13] *** Quits: coruja (~coruja@158.181.80.105) (Quit: WeeChat 3.4)
[13:02:27] *** Joins: coruja (~coruja@user/coruja)
[13:06:15] <rkta> Why does -Wcast-qual warn about a discarded const qualifier when a 'const void *a' is used as '(*((const Anchor **) a))->hseq'? Anchor is a typedef'd struct. Here is the complete function: https://git.sr.ht/~rkta/w3m/tree/master/item/main.c#L1354
[13:06:16] *** Joins: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553)
[13:06:29] *** Joins: Trigraph (~dev@user/trigraph)
[13:07:38] *** Joins: bick (~kotaman@94.46.203.147)
[13:07:55] *** Joins: Klinda (~superleag@user/klinda)
[13:09:56] <dave0> rkta: this sort of explains it, but the reasons are pretty rubbish: http://www.c-faq.com/ansi/constmismatch.html
[13:10:41] *** Joins: plastico (~plastico@neomutt/plastico)
[13:11:28] <dave0> ,cc int a = 69; const void *b = &a; const int **c = b;
[13:11:30] <candide> dave0: [warning: initialization discards 'const' qualifier from pointer target type [-Wdiscarded-qualifiers]] no output: a = 69; b = 0x7fffffffe2dc; c = 0x7fffffffe2dc
[13:11:35] <dave0> ,cc int a = 69; const void *b = &a; int * const *c = b;
[13:11:37] <candide> dave0: no output: a = 69; b = 0x7fffffffe2dc; c = 0x7fffffffe2dc
[13:11:53] <dave0> the const doesn't work recursively
[13:14:11] <dave0> rkta: oohh it looks like a qsort comparison function
[13:14:14] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[13:14:23] <rkta> dave0: yes, it is
[13:14:37] <dave0> does it otherwise work?
[13:14:54] <dave0> you just want to get rid of the warning, correct?
[13:14:56] <rkta> yes, I just want to understand the warning
[13:15:05] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[13:15:27] <dave0> the const applies to the pointer, not the pointer-to-pointer
[13:15:28] *** Joins: ckdCreations (~ckdCreati@147.55.133.136)
[13:15:30] <rkta> If I can get rid of the warning, great
[13:15:43] <dave0> yep this should get rid of the warning:
[13:16:39] <dave0> static int cmp_anchor_hseq(const void *a, const void *b) { Anchor * const * aa = a; Anchor * const * bb = b; return aa->hseq - bb->hseq; }
[13:17:03] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[13:17:13] <dave0> that should work
[13:17:45] <dave0> i don't like to cast so i used temporary variables
[13:18:00] *** Quits: Trigraph (~dev@user/trigraph) (Remote host closed the connection)
[13:18:24] *** Joins: Trigraph (~dev@68-251-63-205.lightspeed.sntcca.sbcglobal.net)
[13:19:26] <dave0> oh it's not quite the same as what you had
[13:19:50] <dave0> if it doesn't work, try     return (*aa)->hseq - (*bb)->hseq;
[13:20:00] <dave0> there was an extra indirection that i missed
[13:20:48] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:20:54] *** Quits: Trigraph (~dev@68-251-63-205.lightspeed.sntcca.sbcglobal.net) (Changing host)
[13:20:54] *** Joins: Trigraph (~dev@user/trigraph)
[13:21:18] <NRK> `(*aa)->hseq` you could use the "sproing operator" here i think
[13:21:39] <NRK> `aa[0]->hseq`
[13:21:47] <dave0> ooh
[13:22:28] <NRK> https://news.ycombinator.com/item?id=9602611
[13:22:34] *** Joins: hinata (~hinata@2409:4042:2486:40e7:b905:6210:fba1:6af)
[13:22:54] *** Quits: alch (~alch@151.68.91.230) (Read error: Connection reset by peer)
[13:23:18] <sham1> Sproing operator
[13:24:14] *** Quits: vboykox (~user@95.134.49.25) (Ping timeout: 256 seconds)
[13:24:39] <dave0> the last post says sprong and links http://textmail.net/sprong/sprong.html
[13:25:00] <NRK> was just about to post that :p
[13:25:30] <NRK> > The first time you see a[0]->b[0]->c it looks a bit strange, but once you've got over the initial shock, it's really a big improvement.
[13:25:53] *** Joins: vboykox (~user@95.134.14.76)
[13:26:02] *** Joins: alch (~alch@151.34.82.206)
[13:26:04] <rkta> oh, ok, that was my first thought. I tried using const Anchor * const *, I guess only used it for the first occurence in that line and was confused why the warning didn't go away.
[13:26:32] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:27:34] <dave0> return aa [0]-> hseq - bb [0]-> hseq; /* sprong! */
[13:27:40] *** Joins: jjido (~Denis@94.4.149.217)
[13:28:06] * rkta has to get over the initial shock
[13:28:39] <sham1> I'm not sure if doing the minus there for the qsort predicate is the best thing
[13:32:34] *** Quits: ekathva (~ekathva@2001:999:51:be01:ece4:95d6:ed47:f97a) (Remote host closed the connection)
[13:32:45] <rkta> sham1: why?
[13:32:53] *** Joins: ekathva (~ekathva@2001:999:51:be01:60a9:bdc2:476c:b11b)
[13:33:11] <sham1> Overflow
[13:33:34] <sham1> And if hseq is an unsigned integer of some kind, that's not gonna work either
[13:34:03] <dave0> i guess it's safer to use < and >
[13:34:06] *** Quits: ekathva (~ekathva@2001:999:51:be01:60a9:bdc2:476c:b11b) (Read error: Connection reset by peer)
[13:34:33] *** Joins: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9)
[13:34:38] <rkta> it's an int, it the numbers of links on a website.
[13:34:38] <dave0> return (aa[0]->hseq > bb[0]->hseq) - (aa[0]->hseq < bb[0]->hseq);     pretty verbose
[13:34:57] *** Quits: acolarh (~niels@3e6be663.rev.stofanet.dk) (Ping timeout: 240 seconds)
[13:35:09] <dave0> no worries with int
[13:35:18] <sham1> https://flak.tedunangst.com/post/subtraction-is-not-comparison
[13:35:28] <sham1> What dave0 posted now is better
[13:37:44] <dave0> that page has an error.. What if x = 1987654321 and y = -1987654321? Then the difference between them is -319658654 (negative) which proves that x is less than y.    x-y is positive here
[13:37:57] <sham1> Depends on the ranges
[13:37:59] *** Joins: acolarh (~niels@3e6be663.rev.stofanet.dk)
[13:38:15] <dave0> yeah there's a chance of signed integer overflow
[13:38:30] <sham1> I suppose it's better illustrated as follows
[13:38:35] <sham1> ,cc INT_MAX - INT_MIN
[13:38:39] <candide> sham1: [warning: integer overflow in expression of type 'int' results in '-1' [-Woverflow]]
[13:39:11] <sham1> Because clearly, INT_MAX < INT_MIN
[13:39:20] <sham1> Whereas
[13:39:34] <sham1> ,cc (INT_MAX > INT_MIN) - (INT_MAX < INT_MIN)
[13:39:35] <dave0> ,cc 1987654321 - -1987654321
[13:39:37] <candide> sham1: No output.
[13:39:39] <candide> dave0: [warning: integer overflow in expression of type 'int' results in '-319658654' [-Woverflow]]  1987654321 - -1987654321 = -319658654
[13:39:47] <dave0> oh okay it IS an overflow
[13:39:58] <sham1> ,cc printf("%d", (INT_MAX > INT_MIN) - (INT_MAX < INT_MIN));
[13:40:00] <candide> sham1: 1
[13:40:20] <dave0> the logical comparison operators can never overflow
[13:40:29] <sham1> Indeed
[13:40:56] <sham1> So yeah, no subtract for compare. C isn't the same thing as your CPU which could very well turn that into a cmp
[13:41:52] <dave0> using - is so a c programmer trick
[13:42:07] <dave0> like not checking if fopen returns NULL
[13:42:52] <rkta> in case of that funtion it works since 2013, but I stole dave0's version
[13:43:17] <sham1> https://godbolt.org/z/GEYxKaYW4
[13:43:26] <sham1> We can see that the subtracting version is smaller
[13:43:28] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a099:f855:9dea:3e32)
[13:43:58] <sham1> But the one that uses subtract alongside the greater than and less than is correct
[13:44:42] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[13:45:52] <sham1> https://godbolt.org/z/YhjfTEcj5
[13:45:57] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Remote host closed the connection)
[13:46:08] <dave0> i seem to remember something invented the spaceship operator for this exact thing <=>   .. it might have been python?
[13:46:26] <sham1> I think it was first in Perl
[13:46:34] <sham1> Then IIRC it was picked up by Python and C++
[13:48:28] <sham1> And PHP
[13:48:31] <sham1> And such
[13:48:33] <Amun-Ra> Python doesn't have one
[13:48:34] <ChoHag> Perl's had <=> as long as I can remember.
[13:49:04] <sham1> Hm, I guess Python doesn't have it. Ruby does, I know that much
[13:49:25] <dave0> i don't know how to feel about it
[13:49:37] <dave0> :-)
[13:49:48] <Amun-Ra> py2 had cmp
[13:51:51] <ChoHag> Perl has a number of other space-themed operators too.
[13:51:52] <ChoHag> https://github.com/book/perlsecret/blob/master/lib/perlsecret.pod
[13:52:41] <sham1> "Goatse"
[13:52:47] <sham1> Some operators just need not be named
[13:58:24] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[13:59:54] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[13:59:55] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (platinum.libera.chat (Nickname regained by services)))
[13:59:55] *** vinleod is now known as vdamewood
[13:59:56] <ChoHag> The goatse operator is a container (sic),
[14:01:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:01:04] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:01:04] *** Joins: wroathe (~wroathe@user/wroathe)
[14:04:05] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:06:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:07:28] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Read error: Connection reset by peer)
[14:08:19] *** Joins: vysn (~vysn@user/vysn)
[14:12:01] *** Joins: seninha (~seninha@user/seninha)
[14:14:42] *** Quits: Kerr (~quassel@2601:602:ce00:287:ab06:3e9c:5e54:e8d) (Ping timeout: 260 seconds)
[14:15:03] *** Joins: Kerr (~quassel@2601:602:ce00:c8d0:c168:f030:8a99:cf3d)
[14:19:30] *** Joins: evocatus (~evocatus@109.229.144.249)
[14:20:29] *** Joins: Roman[m]1 (~wrongt@2001:470:69fc:105::341e)
[14:21:30] *** Quits: Kerr (~quassel@2601:602:ce00:c8d0:c168:f030:8a99:cf3d) (Quit: No Ping reply in 180 seconds.)
[14:22:43] *** Joins: Kerr (~quassel@2601:602:ce00:c8d0:9768:c1e0:b1b8:bd8f)
[14:23:10] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:24:05] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:24:28] *** Lord_of_Life_ is now known as Lord_of_Life
[14:26:09] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:26:51] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[14:33:35] <bkhl> Today's weird C history question: https://paste.rs/JLa.c . Is this a "named" C indentation style, or just bad formatting?
[14:34:01] <bkhl> Not a complete function, just enough to show the style. Comments have been removed to protect the innocent.
[14:34:01] *** Joins: NEYi (~NEYi@109.251.216.38)
[14:34:11] <NRK> seems to be GNU style
[14:34:26] *** Joins: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:34:31] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 268 seconds)
[14:37:11] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:37:28] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[14:39:53] *** Joins: marlboro (~i.am@user/marlboro)
[14:40:55] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:41:47] *** Quits: Khoyo (~khoyo@user/khoyo) (Read error: Connection reset by peer)
[14:42:02] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[14:42:35] <dave0> and it looks like it even might use tabs+spaces for indent ... with the wrong size tab
[14:43:41] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a099:f855:9dea:3e32) (Ping timeout: 245 seconds)
[14:43:59] *** Joins: Khoyo (~khoyo@user/khoyo)
[14:45:24] <Amun-Ra> yes, that's GNU
[14:45:55] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:46:28] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[14:47:14] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:48:46] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 260 seconds)
[14:49:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Client Quit)
[14:49:43] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[14:49:51] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:50:45] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[14:50:57] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[14:51:30] *** Joins: soul-d (~uknown@user/soul-d)
[14:52:03] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[14:52:23] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[14:53:33] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[14:53:35] *** Joins: oxfuxxx (~oxfuxxx@87.101.92.71)
[14:54:06] *** Quits: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9) (Ping timeout: 245 seconds)
[14:54:25] <bkhl> Ah, yeah, looking at the original file seems to be GNU style but with inconsistent use of tabs
[14:54:39] *** Quits: bick (~kotaman@94.46.203.147) (Quit: leaving)
[14:56:05] *** Quits: Trigraph (~dev@user/trigraph) (Ping timeout: 250 seconds)
[14:56:08] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:56:23] *** Quits: manjaroi3 (~manjaro-i@218.233.99.3) (Ping timeout: 256 seconds)
[14:56:36] <dave0> the rule of thumb is if it's your code, pick something you can easily read.. and if you're contributing to some program, use the same style as what's already there
[14:58:05] *** Quits: evocatus (~evocatus@109.229.144.249) (Ping timeout: 256 seconds)
[14:58:16] *** Joins: Darkcoal (~user@2001:16a2:7ade:4500:955:5d45:ceb5:e494)
[14:58:18] *** Quits: oxfuxxx (~oxfuxxx@87.101.92.71) (Ping timeout: 256 seconds)
[15:06:58] *** Quits: Darkcoal (~user@2001:16a2:7ade:4500:955:5d45:ceb5:e494) (Quit: Darkcoal)
[15:07:11] *** Quits: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com) (Quit: leaving)
[15:07:44] *** Joins: Darkcoal (~user@2001:16a2:7ade:4500:955:5d45:ceb5:e494)
[15:09:24] *** Joins: bixo (~bixo@190.200.253.127)
[15:09:38] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[15:10:24] *** Quits: Darkcoal (~user@2001:16a2:7ade:4500:955:5d45:ceb5:e494) (Client Quit)
[15:10:41] *** Joins: Darkcoal (~user@2001:16a2:7ade:4500:955:5d45:ceb5:e494)
[15:15:30] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[15:15:31] *** Joins: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com)
[15:15:33] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[15:15:57] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[15:16:31] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[15:17:40] *** Joins: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9)
[15:17:47] <oj> How do you guys feel about this https://bpa.st/HBLA
[15:19:04] <oj> Imagine you have a data driven state machine, and an enum describing some actions, with each action taking a parameter
[15:19:46] <oj> The parameter has a different meaning for each action, but happens to have the same datatype (int in this case)
[15:20:12] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:20:43] *** Quits: abraham1 (~abraham@143.244.185.86) (Quit: The Lounge - https://thelounge.chat)
[15:20:55] <oj> say actions of type A have a parameter "state", actions of type B have a parameter n_steps, etc.
[15:21:01] *** Joins: abraham1 (~abraham@143.244.185.86)
[15:21:04] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[15:21:49] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:22:01] *** abraham1 is now known as abraham
[15:23:32] <dave0> it'll work but you aren't saving much memory
[15:23:53] <bkhl> dave0, I'm doing "code interview" submission, just was wondering if this formatting was something I should judge people for.
[15:24:03] <bkhl> Seems at worst I should judge them for not reconfiguring Emacs. :-/
[15:26:10] *** Joins: Fairy97 (~Fairy@ti0004a400-6144.bb.online.no)
[15:27:12] *** Quits: bixo (~bixo@190.200.253.127) (Ping timeout: 256 seconds)
[15:27:37] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[15:29:17] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[15:29:17] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[15:29:27] *** Quits: Fairy (~Fairy@2001:464a:4992:0:a98e:f0a9:78ea:918e) (Ping timeout: 250 seconds)
[15:31:48] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[15:32:12] *** Joins: bixo (~bixo@190.200.253.127)
[15:32:45] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:33:31] *** Joins: csrf (~csrf@user/csrf)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:41:50] *** Quits: Darkcoal (~user@2001:16a2:7ade:4500:955:5d45:ceb5:e494) (Ping timeout: 250 seconds)
[15:43:59] *** Joins: Darkcoal (~user@167.86.178.227)
[15:44:56] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[15:51:54] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[15:52:08] <roxlu> hi, I remember, after reading some of the articles about "What every C programmer should know about undefined behavior", there was something I should be aware of when doing something like this: https://gist.github.com/roxlu/f95055871c006d4d47f02f16733dc3ce  .. but I'm not sure what it was. Is there something wrong regarding undefined behavior and that code?
[15:52:09] <candide> Title of roxlu's link: tmp.c · GitHub
[15:53:05] *** Quits: Darkcoal (~user@167.86.178.227) (Quit: Darkcoal)
[15:55:56] *** gonogo_ is now known as gonogo
[15:59:04] <NRK> you're casting a (uint64_t *) to a (uint8_t *)
[16:00:56] <roxlu> NRK: ah, was that it? do you know what that rule is called?
[16:00:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[16:01:04] <NRK> uintN_t are integer types. what you want instead is to cast to a (uchar *)
[16:01:16] <NRK> roxlu: strict aliasing.
[16:01:51] <roxlu> Thanks
[16:02:23] <NRK> you could also just compile with `-fno-strict-aliasing` which is also an option
[16:02:40] <sham1> Well in practice uint8_t doesn't have strict aliasing applied
[16:02:43] <NRK> .oO(linux kernel does that iirc)
[16:02:53] <sham1> Just like how unsigned chars don't either
[16:03:10] *** Joins: _LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[16:03:38] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[16:03:48] <roxlu> Ok, so this would be the correct way to do it, at least with respect to the rules: https://gist.github.com/roxlu/f95055871c006d4d47f02f16733dc3ce
[16:03:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:04:00] <NRK> uchar is character type, so that's different
[16:04:21] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[16:04:57] <NRK> and while in practice uint8_t is typically typedef-ed to uchar, i wouldn't be surprised if compilers assume it's not and does braindead optimization on it.
[16:05:55] <NRK> i'd assert (CHAT_BIT == 8) and i'd also use (unsigned char *)
[16:06:31] <roxlu> thanks, why an unsigned? would that matter in this case?
[16:06:39] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Ping timeout: 256 seconds)
[16:06:42] <sham1> Yes it would
[16:07:16] <roxlu> What's would happen?
[16:07:23] <roxlu> oh .. "What" ..
[16:07:41] <NRK> s/CHAT/CHAR/
[16:07:47] <sham1> Well, you're going from unsigned to signed
[16:08:06] <sham1> And then you assign that signed to unsigned again
[16:08:28] <roxlu> ah right ofc.
[16:09:43] <roxlu> so the correct version would be: https://gist.github.com/roxlu/f95055871c006d4d47f02f16733dc3ce
[16:10:01] <sham1> Yah
[16:11:01] <roxlu> thanks!
[16:11:52] <roxlu> how does this related to using void*? e.g. what if I have a `struct something` and I pass that as a void* which is used with callbacks?
[16:12:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[16:12:51] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[16:13:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Client Quit)
[16:13:35] *** Joins: slidercrank (~slidercra@user/slidercrank)
[16:13:46] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:14:15] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[16:14:36] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[16:15:49] *** Joins: evocatus (~evocatus@109.229.144.249)
[16:16:04] *** Quits: evocatus (~evocatus@109.229.144.249) (Remote host closed the connection)
[16:19:43] <dave0> roxlu: did you write   write_u64be()  ?
[16:19:57] <roxlu> yes
[16:20:15] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[16:20:17] <dave0> roxlu: you shouldn't fiddle with pointers here
[16:20:38] <roxlu> dave0: can you explain why not?
[16:20:58] <dave0> roxlu: dst[0] = val >> 56; dst[1] = val >> 48; dst[2] = val >> 40;  ...  dst[6] = val >> 8; dst[7] = val >> 0;
[16:21:09] <roxlu> ah yeah I see what you mean
[16:21:10] <dave0> roxlu: it depends on endianness
[16:21:42] <dave0> while you can treat objects as an array of char, it's still not a good idea
[16:23:13] <dave0> if you're on a *bsd there is some byte order functions
[16:23:19] <sham1> Yeah. While with dst[7] = (val >> 0) & 0xFF; you're guaranteed to get the least significant byte no matter the architecture
[16:23:21] <dave0> perhaps they are on linux too
[16:23:31] <sham1> There's htonl and such
[16:23:42] <sham1> And endian.h
[16:24:05] <sham1> Sadly they're not POSIX
[16:24:24] <roxlu> yeah I know we have htonl, but I was just curious.
[16:24:38] <sham1> And they're not particularly portable, since in NetBSD, and such they use a different naming convention vs. the original OpenBSD one
[16:24:55] <sham1> So I personally always roll my own
[16:24:55] <roxlu> ... but, reading like I'm doing is a correct way to deal with byte order, right?
[16:24:59] <dave0> https://man.netbsd.org/byteorder.9
[16:25:10] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[16:25:24] <sham1> It can sit in a header where one has a bunch of `static inline` functions to do this with
[16:26:18] <dave0> sham1: same, but it's also good to use system supplied ones
[16:26:27] <dave0> saves some time debugging
[16:26:36] *** Quits: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9) (Quit: Leaving)
[16:26:56] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:26:57] *** Joins: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9)
[16:26:57] <sham1> Meh, I just copy the header around. It's not all that hard to verify the correctness
[16:28:02] <sham1> The only possible trouble would be with architectures that don't have `uint{8,16,32,64}_t` but it can be made to work with uint_least{8,16,32,64}_t` as well
[16:33:24] <dave0> oh i just use int
[16:33:34] * sham1 squints at dave0 
[16:33:52] * dave0 squints right back
[16:34:48] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:39:01] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[16:39:39] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[16:40:04] *** Joins: dmenz (~dmenz@2804:14d:5cd4:8125:3f8d:e57c:e8cf:72ea)
[16:40:06] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[16:40:07] *** Joins: seninha (~seninha@user/seninha)
[16:42:45] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[16:43:25] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[16:43:45] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[16:44:27] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[16:45:54] *** Joins: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com)
[16:47:22] <ChoHag> Spectacles?
[16:48:50] *** Quits: goepsilongo_ (~goepsilon@2603-7000-ab00-62ed-0577-8cef-87ec-adae.res6.spectrum.com) (Ping timeout: 252 seconds)
[16:50:14] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[16:53:32] *** Quits: armin (~armin@unix.porn) (Ping timeout: 240 seconds)
[16:55:45] *** Joins: armin (~armin@unix.porn)
[16:56:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[16:56:36] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:58:09] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[16:58:31] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[16:58:36] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[16:59:37] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[16:59:50] *** Quits: _LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Ping timeout: 250 seconds)
[16:59:53] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[17:01:25] *** Quits: dmenz (~dmenz@2804:14d:5cd4:8125:3f8d:e57c:e8cf:72ea) (Quit: Leaving)
[17:01:50] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[17:02:56] *** Quits: hinata (~hinata@2409:4042:2486:40e7:b905:6210:fba1:6af) (Quit: Leaving)
[17:06:35] <bkhl> If you squint that's an int.
[17:08:16] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[17:09:17] *** Joins: inlight (~thomas@157.35.91.81)
[17:09:17] *** Quits: inlight (~thomas@157.35.91.81) (Changing host)
[17:09:17] *** Joins: inlight (~thomas@user/inlight)
[17:09:32] *** Joins: Sadale (~Sadale@user/sadale)
[17:13:21] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[17:13:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:14:43] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[17:16:28] *** Joins: Sadale (~Sadale@user/sadale)
[17:19:57] *** Joins: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:81a7:a11a:626:f80c)
[17:20:05] *** Joins: odoood (~odoood@c-71-204-80-147.hsd1.ga.comcast.net)
[17:21:41] *** Quits: alch (~alch@151.34.82.206) (Read error: Connection reset by peer)
[17:22:55] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:24:06] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:e5d6:4e8d:5502:447d) (Ping timeout: 250 seconds)
[17:25:01] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[17:25:11] *** Joins: bebyx (~Thunderbi@user/bebyx)
[17:25:23] *** Joins: alch (~alch@151.68.11.21)
[17:25:55] *** Joins: _LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[17:29:19] *** robyndrake is now known as robyn
[17:29:32] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[17:29:57] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Ping timeout: 256 seconds)
[17:31:51] *** Joins: kts (~kts@103.73.237.227)
[17:32:22] *** Joins: darsie (~darsie@84-113-55-200.cable.dynamic.surfer.at)
[17:32:40] <darsie> cat c==c be false if c changes in an interrupt?
[17:32:42] <darsie> can*
[17:33:39] *** Joins: pulse (~pulse@user/pulse)
[17:33:56] <darsie> I guess it has to be declared volatile for that to happen.
[17:38:00] <joev> clang will warn with "self-comparison always evaluates to true", even if c is volatile.
[17:38:07] *** Joins: Tempesta (~Tempesta@user/tempesta)
[17:38:59] <darsie> ok
[17:39:20] <darsie> Clang /ˈklæŋ/[6] is a compiler front end for the C, C++, Objective-C, and Objective-C++ programming languages, as well as the OpenMP,[7] OpenCL, RenderScript, CUDA, and HIP[8] frameworks.
[17:39:28] *** Quits: odoood (~odoood@c-71-204-80-147.hsd1.ga.comcast.net) (Remote host closed the connection)
[17:39:57] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[17:40:40] <sham1> Indeed it is
[17:40:42] *** Joins: bingulo (~carlos@2804:431:e7c8:b11e:ec5a:2fe7:d48c:fd63)
[17:41:29] <joev> Compiler Explorer (godbolt.org) shows that gcc will still try the compare...
[17:41:30] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[17:41:30] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[17:41:52] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[17:41:56] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you later)
[17:41:57] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[17:42:37] *** Joins: Atque (~Atque@user/atque)
[17:42:44] <joev> ... and clang will too.  But it provides that warning anyway.  I'm not sure what the correct behavior is here.
[17:43:13] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[17:43:42] <sham1> Depending on c==c maybe possibly getting two separate reads seems fragile even if c is volatile and could be changed in an interrupt handler
[17:44:13] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[17:46:06] <dave0> sham1: looks like a race condition
[17:46:14] <sham1> Indeed
[17:47:37] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[17:47:38] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Max SendQ exceeded)
[17:48:43] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[17:49:40] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 250 seconds)
[17:49:53] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 252 seconds)
[17:51:21] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:add1:9b6a:adbc:6291)
[17:51:49] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[17:53:32] *** Quits: emias (~holger@home.zedat.fu-berlin.de) (Ping timeout: 240 seconds)
[17:54:37] *** Joins: noarb (~noarb@user/noarb)
[17:55:48] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:56:09] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:56:54] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[17:58:36] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:58:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:58:36] *** Joins: wroathe (~wroathe@user/wroathe)
[17:58:38] *** Quits: foul_owl (~kerry@94.140.8.107) (Read error: Connection reset by peer)
[18:00:11] *** Joins: bick (~kotaman@94.46.203.147)
[18:00:33] *** Quits: kurfen_ (~kurfen@176.119.195.10) (Ping timeout: 256 seconds)
[18:00:56] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[18:02:06] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving.)
[18:02:30] *** Joins: kurfen (~kurfen@213.152.188.7)
[18:02:41] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[18:02:57] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Client Quit)
[18:03:12] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[18:06:42] *** Joins: emias (~holger@home.zedat.fu-berlin.de)
[18:08:28] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[18:09:10] *** Joins: bixo_ (~bixo@190.200.253.127)
[18:10:15] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[18:11:36] *** Quits: bixo (~bixo@190.200.253.127) (Ping timeout: 245 seconds)
[18:12:42] *** Joins: odoood (odoood@gateway/vpn/protonvpn/odoood)
[18:13:35] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 256 seconds)
[18:14:32] *** Joins: foul_owl (~kerry@94.140.8.105)
[18:15:03] *** Joins: inlight (~thomas@157.35.2.69)
[18:15:03] *** Quits: inlight (~thomas@157.35.2.69) (Changing host)
[18:15:03] *** Joins: inlight (~thomas@user/inlight)
[18:16:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a099:f855:9dea:3e32)
[18:16:47] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Remote host closed the connection)
[18:17:14] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[18:18:25] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[18:18:44] *** Quits: dsrt^ (~dsrt@128-092-164-034.biz.spectrum.com) (Remote host closed the connection)
[18:19:06] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[18:23:35] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:23:36] *** ElliotAlderson[m is now known as peace[m]
[18:23:41] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 245 seconds)
[18:24:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca) (Ping timeout: 256 seconds)
[18:27:37] <pragma-> sham1: I don't know why but the newer versions of gnu tools are not including macros in the debug symbols any longer. "No symbol `INT_MAX` in current context." Even with -g3.
[18:28:24] <sham1> Hm
[18:28:50] <sham1> You'd think that debug symbols containing macros would be useful if for nothing else than for the ability to step through one
[18:29:02] <fizzie> That rings a faint bell.
[18:29:14] <sham1> Or is it just for when the macro is like INT_MAX as opposed to a function-like macro
[18:29:23] <pragma-> Yeah, it's annoying having to use printf in ,cc more often now when candide/gdb used to be able to print the values itself.
[18:30:07] <fizzie> ISTR you needed to actually *use* the macro in order for it to end up in the debugging info. Or something along those lines.
[18:30:17] <fizzie> Wasn't enough just to have it included.
[18:30:23] <sham1> ,cc INT_MAX
[18:30:24] *** Quits: bingulo (~carlos@2804:431:e7c8:b11e:ec5a:2fe7:d48c:fd63) (Ping timeout: 250 seconds)
[18:30:26] <candide> sham1: No output.
[18:30:38] *** Quits: kts (~kts@103.73.237.227) (Quit: Konversation terminated!)
[18:30:52] <pragma-> ,cc int i = INT_MAX; INT_MAX;
[18:30:55] <candide> pragma-: no output: i = 2147483647
[18:31:18] <pragma-> ,cc int i = INT_MAX; gdb("info macro INT_MAX");
[18:31:20] <candide> pragma-:  The symbol 'INT_MAX' has no definition as a C/C++ preprocessor macro  /home/vm/-1
[18:31:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:32:36] <sham1> But yeah, I see a - b being used as a qsort predicate depressingly often
[18:33:02] <pragma-> fizzie: Yeah, I came across that tidbit in https://stackoverflow.com/questions/10496195/gdb-macro-symbols-not-present-even-when-using-g3-or-ggdb3-or-gdwarf-4 but even when I step over a macro in gdb it still does not seem to be aware of it.
[18:33:11] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[18:33:18] <fizzie> Yeah, that latter sort of thing did used to work for me. Odd.
[18:33:24] <pragma-> 10 year old question, too.
[18:33:33] <pragma-> So frustrating.
[18:33:59] *** Quits: Sadale (~Sadale@user/sadale) (Remote host closed the connection)
[18:34:29] *** Joins: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-206.dsl.bell.ca)
[18:35:02] *** Joins: Sadale (~Sadale@user/sadale)
[18:35:05] *** Joins: lispy (~lispy@user/lispy)
[18:36:53] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:38:54] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[18:40:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:40:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:40:07] *** Joins: wroathe (~wroathe@user/wroathe)
[18:41:00] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Ping timeout: 256 seconds)
[18:42:05] *** Joins: Sadale (~Sadale@user/sadale)
[18:42:29] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 256 seconds)
[18:42:41] *** Joins: Khoyo_ (~khoyo@user/khoyo)
[18:43:01] *** Joins: bebyx (~Thunderbi@user/bebyx)
[18:43:37] *** Quits: lispy (~lispy@user/lispy) (Ping timeout: 256 seconds)
[18:44:29] <NRK> is there any sane way to create wrapper around a variadic function (execl) or should i just use execv instead?
[18:44:49] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:44:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:46:28] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[18:47:30] *** Joins: Sadale (~Sadale@user/sadale)
[18:47:38] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[18:49:02] *** Quits: sudden (~cat@user/sudden) (Ping timeout: 240 seconds)
[18:49:16] *** Joins: Captain4LK (~Captain4L@p200300edbf173d0d523eaafffeeddbdf.dip0.t-ipconnect.de)
[18:49:30] <pragma-> fizzie: hmm. -gdwarf-2 -g3 seems to do the trick
[18:49:53] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[18:50:17] *** sudden is now known as Guest6340
[18:52:01] <pragma-> ,cc -gdwarf-2 -g3 int i = INT_MAX; gdb("info macro INT_MAX");
[18:52:03] <candide> pragma-:  Defined at /usr/lib/gcc/x86_64-redhat-linux/11/include/limits.h:120 /home/vm/ #define INT_MAX __INT_MAX__
[18:52:30] <pragma-> I'm pretty sure I read that only the last -g option has any effect.
[18:52:35] <pragma-> Well.
[18:53:57] *** Joins: bebyx (~Thunderbi@user/bebyx)
[18:55:04] <pragma-> ,cc -gdwarf-2 -g3 gdb("info macro INT_MAX"); // no need to bring it into scope either
[18:55:06] <candide> pragma-: Same output.
[18:55:08] <pragma-> So frustrating./me nods.
[18:55:24] <pragma-> er, meant to just /nod
[18:55:25] *** Joins: inlight_ (~thomas@157.35.2.69)
[18:55:54] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[18:56:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Client Quit)
[18:57:45] <NRK> frustration is when you spend 20mins trying to figure out why your custom popen2 implementation doesn't work, only to realize you assigned the write_fd to read_fd and vice versa.
[18:58:13] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[18:58:26] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 260 seconds)
[18:59:00] *** Quits: noahmg123 (sid89117@id-89117.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[19:00:57] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[19:01:21] <pragma-> ,cc -gdwarf-2 -g3 gdb("info macro __INT_MAX__"); // just wondering
[19:01:23] <candide> pragma-:  Defined at /home/vm/ -D__INT_MAX__=0x7fffffff
[19:01:37] <pragma-> -D!
[19:01:38] *** Joins: chair1 (~nero@177.23.12.223)
[19:02:28] *** Quits: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-206.dsl.bell.ca) (Ping timeout: 250 seconds)
[19:02:28] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[19:04:56] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[19:05:25] <pragma-> cc -gdwarf-2 -g3 (INT_MAX > INT_MIN) - (INT_MAX < INT_MIN)  // just making sure
[19:05:29] <pragma-> ,cc -gdwarf-2 -g3 (INT_MAX > INT_MIN) - (INT_MAX < INT_MIN)  // just making sure
[19:05:31] <candide> pragma-: No output.
[19:05:51] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Ping timeout: 268 seconds)
[19:06:16] <pragma-> ,cc -gdwarf-2 -g3 (INT_MAX > INT_MIN) - (INT_MAX < INT_MIN)
[19:06:18] <candide> pragma-:  (INT_MAX > INT_MIN) - (INT_MAX < INT_MIN) = 1
[19:06:19] *** Joins: Sheilong (uid293653@ilkley.irccloud.com)
[19:06:31] <pragma-> lol, adding a comment afterwards makes it stop working
[19:06:38] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[19:06:42] <pragma-> ,cc -gdwarf-2 -g3 (INT_MAX > INT_MIN) - (INT_MAX < INT_MIN)  // foo
[19:06:43] <candide> pragma-: No output.
[19:06:47] <pragma-> ,cc -gdwarf-2 -g3 (INT_MAX > INT_MIN) - (INT_MAX < INT_MIN)
[19:06:49] <candide> pragma-:  (INT_MAX > INT_MIN) - (INT_MAX < INT_MIN) = 1
[19:06:51] <pragma-> absurd!
[19:07:17] <pragma-> It's probably my Perl "magic" in my VM script somewhere.
[19:07:24] * pragma- squints.
[19:07:32] <NRK> // wtf?
[19:07:53] <pragma-> ,cc -gdwarf-2 -g3 (INT_MAX > INT_MIN) - (INT_MAX < INT_MIN); // explicit semi-colon
[19:07:55] <candide> pragma-: No output.
[19:07:59] * pragma- grumbles.
[19:08:17] <NRK> ,cc -gdwarf-2 -g3 (INT_MAX > INT_MIN) - (INT_MAX < INT_MIN);\n// explicit semi-colon
[19:08:19] <candide> NRK: No output.
[19:08:28] <pragma-> ,cc paste
[19:08:31] <candide> pragma-: https://0x0.st/oHgg.txt
[19:08:50] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) (Max SendQ exceeded)
[19:09:04] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[19:09:06] <pragma-> Hm, that no longer has my magical print_last_statement() wrapped around it.
[19:09:38] <pragma-> ,cc -paste int a = 4, b = 5; a + b;
[19:09:41] <candide> pragma-: https://0x0.st/oHgE.txt
[19:10:06] <pragma-> Welp, I'll investigate that in a couple of hours after I've woken up a bit more.
[19:10:17] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[19:10:43] <pragma-> ,cc -paste int a = 4, b = 5; a + b; // foo
[19:10:47] <candide> pragma-: https://0x0.st/oHgG.txt
[19:10:57] *** Joins: Sheilong (uid293653@ilkley.irccloud.com)
[19:11:01] <pragma-> Yup, there it disappears.
[19:11:06] *** Joins: ozoned (~odoood@2601:c8:c000:c4e0::3)
[19:11:25] *** Joins: noahmg123 (sid89117@ilkley.irccloud.com)
[19:11:36] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-199.dsl.bell.ca)
[19:11:50] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[19:12:42] *** Joins: Sadale (~Sadale@user/sadale)
[19:12:49] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[19:13:50] *** Quits: odoood (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 260 seconds)
[19:15:29] *** Joins: AmR (~AmREiSa@156.207.136.200)
[19:17:03] *** Quits: AmR (~AmREiSa@156.207.136.200) (Client Quit)
[19:17:21] *** Joins: AmR (~AmREiSa@156.207.136.200)
[19:17:46] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[19:18:01] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[19:18:43] *** Joins: System_Error (~SystemErr@user/systemerror)
[19:22:47] *** Quits: inlight_ (~thomas@157.35.2.69) (Quit: WeeChat 3.3)
[19:26:37] *** Joins: advanced_malfor1 (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[19:29:51] *** Quits: advanced_malfor1 (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Client Quit)
[19:29:53] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving.)
[19:30:49] *** Quits: AmR (~AmREiSa@156.207.136.200) (Read error: Connection reset by peer)
[19:31:12] *** Joins: AmR (~AmREiSa@156.207.136.200)
[19:31:58] *** Quits: AmR (~AmREiSa@156.207.136.200) (Client Quit)
[19:32:32] *** Joins: cul8r (~cul8r@2601:8c3:4000:b0d0::e65c)
[19:33:38] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[19:34:16] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-199.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:34:55] *** Joins: mahmutov (~mahmutov@37.155.28.181)
[19:37:49] *** SoniEx2 is now known as Soni
[19:38:52] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[19:40:53] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-105.dsl.bell.ca)
[19:42:08] *** Joins: Guest96fd (~Guest96fd@206.223.160.26)
[19:42:33] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[19:43:29] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving.)
[19:43:44] *** Quits: fwg (~fwg@user/fwg) (Ping timeout: 252 seconds)
[19:43:44] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[19:43:50] <Guest96fd> Possibly a dumb question, but is it undefined behavior to have two threads reading/writing to a POD without synchronization primatives? I.e. on a 32bit chip, I have one thread reading the value of a uint32_t and another thread writing the value of said uint32_t. The exact ordering is not important to me
[19:44:31] *** Joins: wovixo (~wovixo@128.104.205.49)
[19:45:39] *** Joins: fwg (~fwg@user/fwg)
[19:45:57] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:46:46] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Client Quit)
[19:47:08] <clarity> "If there is ambiguity about which side effect to a non-atomic object is visible, then there is a data race and the behavior is undefined."
[19:47:19] <clarity> I'm not sure if that's what you're looking for
[19:47:46] <clarity> " The execution of a program contains a data race if it contains two conflicting actions in different threads, at least one of which is not atomic, and neither happens before the other. Any such data race results in undefined behavior."
[19:47:53] *** Joins: bebyx (~Thunderbi@user/bebyx)
[19:48:00] <Guest96fd> Presumably the uint32_t would be an atomic object?
[19:48:07] <clarity> Nope
[19:48:36] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-50-65-93-192-46.dsl.bell.ca)
[19:49:20] <Guest96fd> Why not? On a 32 bit architecture surely anything <=32 bits would be loaded in a single LDR
[19:50:15] *** Joins: node1 (~hex@user/node1)
[19:50:18] <node1> Hi.
[19:50:22] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:50:22] *** Joins: Akuli (~Akuli@87-94-111-217.bb.dnainternet.fi)
[19:50:24] <clarity> C isn't defined in terms of architectures
[19:50:46] <Guest96fd> True. But knowing the architecture on which I'm compiling for
[19:51:47] <node1> What's the size of Character Pointer?
[19:51:57] <clarity> node1: sizeof(char*)
[19:52:43] <NRK> what the.. why does execv take such weird argument `int execv(const char *path, char *const argv[]);`
[19:53:22] <omegatron> what is weird in that case ??
[19:53:49] *** Joins: bingulo (~carlos@2804:39b0:1db:1f00::50c)
[19:54:23] <NRK> i would've expected `const char *argv[]`
[19:54:30] <clarity> Guest96fd: The standard defines atomic types
[19:54:39] <clarity> Guest96fd: uint32_t isn't one
[19:54:40] <node1> clarity, Thank you for letting me know, between it  shows me 8 bytes. So i assume in this 8 bytes first character adress reside.?
[19:55:08] <clarity> node1: Right
[19:56:47] <node1> Again a question arries to store the address of one character we used 8 bytes.
[19:56:54] <omegatron> NRK: view 'const' as a hint (for human and compiler) .. due to casts, it's actually almost completely useless - and the author(s) of that function might have had their reasons ..
[19:57:28] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:57:57] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:58:13] <node1> Could you please describe how it's  been done? Like what are the seven bytes here doing?
[19:58:34] <clarity> they're part of the address
[19:58:45] <clarity> just like the eighth byte
[19:59:19] *** Quits: glider (~glider@user/glider) (Quit: ZNC 1.9.x-git-111-f2cdc3db - https://znc.in)
[19:59:20] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[19:59:24] <node1> Like how could you please elaborate? I would like to visualize?
[19:59:33] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-50-65-93-192-46.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:59:38] <clarity> They're all telling where your character is
[19:59:58] <clarity> (In theory they could include other information too but that's beside the point)
[20:00:05] <clarity> There really is nothing more to it
[20:00:15] <NRK> omegatron: that missing const is gonna make me either do a cast or do a copy
[20:00:20] <NRK> think i'll go with a cast...
[20:00:46] <NRK> > The argv[] and envp[] arrays of pointers and the strings to which those arrays point shall not be modified by a call to one of the exec functions
[20:01:25] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[20:01:27] <Guest96fd>  node1: A character pointer is the memory address of a pointer. The pointer is using 8 bytes to store the address. The address could me 0x0000 0000 0000 0006, or 0xFFFF 0000 AAAA BBBB. But either way it will use 8 bytes
[20:01:30] <node1> okay,  between i have read somewhere that by using this code `*chPtr = "hello";` It allocates space for 10 ( typically ) - 6 for the characters plus another 4 for the pointer veriable.
[20:02:07] <clarity> node1: The size of the pointer depends on the implementation
[20:02:17] <omegatron> they assumed most likely, that execv() would usually receive not directly the main function's argv, but a custom-made char **, hence the missing 'const'
[20:03:16] *** Quits: Captain4LK (~Captain4L@p200300edbf173d0d523eaafffeeddbdf.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[20:03:28] <node1> So what it meant here `another 4 for the pointer veriable` ? What he(narrator) wanted to convey in this pice of code for `4 for the pointer veriable`?
[20:03:42] <Guest96fd> node1:  `*chPtr = "hello";` This code will allocate 6 bytes. 5 bytes for the characters + 1 byte for the null terminator
[20:03:45] *** Quits: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9) (Ping timeout: 250 seconds)
[20:03:49] <clarity> node1: That on his implementation, the pointer requires four bytes
[20:04:11] <Guest96fd> node1: On a 32 bit architecture the pointer only uses 4 bytes. But that line is not allocated the 4 bytes, just setting those bytes to the address of the string literaly
[20:05:04] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a529:1406:bd3:aa5d)
[20:05:04] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a529:1406:bd3:aa5d) (Changing host)
[20:05:04] *** Joins: skapata (~Skapata@user/skapata)
[20:05:34] *** Joins: glider (~glider@user/glider)
[20:06:11] <node1> ok. It meant 4 bytes for the next address of the letter?
[20:06:41] <Guest96fd> node1: Not sure what the author was trying to say. Do you have a link?
[20:06:55] <node1> Guest96fd, https://www.cs.uic.edu/~jbell/CourseNotes/C_Programming/CharacterStrings.html
[20:06:56] <candide> Title of node1's link: C Programming Course Notes - Character Strings
[20:07:40] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:08:51] <clarity> node1: Every variable in C has a size associated with it
[20:09:06] <clarity> node1: The size of a char pointer on the writer's system happens to be 4
[20:09:08] <clarity> That's all
[20:09:09] <Guest96fd> node1: Ah. The code is `char s6[ ] = "hello", *s7 = "hello";`, which ignoring the first array is `char *s7 = "hello";`. In this case yes. 4 bytes are allocated on the stack for the character pointer, and 6 bytes are allocated somewhere in read only memory for the character array
[20:09:09] <Guest96fd> `
[20:09:26] <clarity> There is no stack in C :)
[20:09:42] <Guest96fd> clarity:D  okay I suppose you're right
[20:09:59] <node1> But you agree with contiguous memory in C?
[20:10:22] <Guest96fd> It will be allocated on the stack in HW though
[20:10:26] <clarity> I don't know how to interpret that question
[20:10:47] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-112.dsl.bell.ca)
[20:10:49] <node1> contiguous memory and stack both are same.
[20:10:49] <clarity> It may or may not be allocated on stack
[20:11:23] <NRK> pointers aren't 4 bytes on most modern system
[20:11:26] <clarity> It's an implementation detail
[20:11:41] <NRK> ,cc printf("%zu", sizeof(char *));
[20:11:43] <candide> NRK: 8
[20:11:58] *** Parts: darsie (~darsie@84-113-55-200.cable.dynamic.surfer.at) (Wash your hands. Don't touch your face. Avoid fossil fuels and animal products. Don't have children.)
[20:11:59] <chair1> But C is aware that in some systems pointers to objects and pointers to functions have different sizes
[20:12:53] <NRK> afaik only sizeof(char *) == sizeof(void *)
[20:13:04] <NRK> i don't think any other pointers have any size requirements
[20:13:08] <node1> And this character pointer must be holding the address of in case address of 1st byte( 6 byte) that is allocated somewhere in read only memmory for the character array ?
[20:13:33] <Guest96fd> clarity: Are there any thread implementations that come to mind that do not utilize a stack?
[20:14:01] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:14:04] <Guest96fd> node1: Yes. The character pointer will hold the memory address of the first byte in the character array
[20:14:25] <clarity> Guest96fd: Once your compiler figures out that your CPU has registers, it'll often generate code where pointers do not use stack at all.  And sometimes it figures out it does not need to store said pointers at all; they won't show up in the output.
[20:14:27] <node1> Guest96fd, Great thanks for making it clear.
[20:15:25] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[20:16:22] <Guest96fd> clarity: Interesting. Surely even if there are enough registers to avoid pushing the address to the stack, it will still end up on the stack anyway during a context switch
[20:17:54] <clarity> Well, sure, assuming a context switch actually happens
[20:18:04] <clarity> But that's not a property of the generated code
[20:18:17] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[20:18:42] <fizzie> NRK: Also `sizeof (struct foo *) == sizeof (struct bar *)`, and `sizeof (union foo *) == sizeof (union bar *)`, and also generally pointers to qualified vs. unqualified versions of compatible types.
[20:19:45] <clarity> And technically the region where you save the context doesn't need to be "stack"
[20:21:57] <CodeAgain> What would be the easiest and cleanest way of finding if a certain value v is part of an enum en ? i.e. enum { A = 0, B = 1, C = 2 }; v = atoi(something); // some extra code checking if v is defined in en or not
[20:22:19] <CodeAgain> Somehow I think a switch is way too much for long enums
[20:22:37] <CodeAgain> Also a consideration: while I used them in sequence on my example, in my real scenario they are not a sequence, meaning there might be some values uncovered in the middle, i.e. enum { A = 0, B = 3, C = -1, D = 15 }
[20:22:56] <CodeAgain> So a >= && <= approach wouldn't work
[20:23:08] *** Joins: Akiva (~Akiva@user/Akiva)
[20:23:14] <edk> there isn't a general way. information about enums is not available to the program
[20:23:16] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-112.dsl.bell.ca) (Ping timeout: 245 seconds)
[20:24:08] <ChoHag> The best you can do is include min/max markers.
[20:24:22] <ChoHag> That's very common, with 0 being an implied minimum.
[20:24:49] <pragma-> People often accompany an enum with an array of human-readable names.
[20:25:03] <ChoHag> if (x >= ENUMLIST_MAX) abort()
[20:25:17] <edk> debatable whether it's "good" but X macros are a way to solve this for non-contiguous enums
[20:25:26] <CodeAgain> pragma- indeed I am doing that, but the enum values are not continuous
[20:25:46] <CodeAgain> Ohhhh it just occurred to me
[20:26:47] <CodeAgain> In the last example, considering a char *names[] = { [A] = "a", [B] = "b", [C] = "c", [D] = "d" } ;
[20:27:13] <CodeAgain> Could I just check if names[value] equals NULL?
[20:27:18] *** Quits: lllh (~llh@198.48.244.21) (Quit: :::: ( UPP ) ::::)
[20:27:18] <edk> yes
[20:27:18] <chair1> edk: I've become a fan of X macros, I'd expand the X macros to an array with enum values and use a for loop to see if it is contained there, hopefully the compiler unrolls it
[20:27:22] <CodeAgain> Or isn't guaranteed that it would be NULL
[20:27:31] <edk> it is guaranteed
[20:27:37] <clarity> As long as it's in the array, yes
[20:27:38] <pragma-> as long as at least one element is initialized
[20:27:48] <edk> of course that array might not be a very sensible thing to make if the enum values are very sparse
[20:27:51] <chair1> Everything else is zeroed right?
[20:27:56] <CodeAgain> Okay, that's the perfect solution then
[20:28:05] <fizzie> CodeAgain: If your C == -1 as in the example, that has some rather obvious problems.
[20:28:12] <ChoHag> Don't forget to check that the index is within bounds.
[20:28:27] <pragma-> or use a language that actually has real enums
[20:28:28] *** Joins: jx0 (~jx0@199.229.250.138)
[20:28:48] <ChoHag> If we wanted to use a sensible language, would we be in #c?
[20:28:53] <fizzie> ,cc enum { A = 0, B = 3, C = -1, D = 15 }; char *names[] = { [A] = "a", [B] = "b", [C] = "c", [D] = "d" }; // like so
[20:28:54] <candide> fizzie: error: array index in initializer exceeds array bounds
[20:29:02] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:29:13] <chair1> edk: I mean to expandi like this: static enum foo const valid_foos[] = {A, B, C, D, E};
[20:29:15] *** Joins: crm (~crm@70.120.0.94)
[20:29:26] <CodeAgain> ,cc enum { A = 0, B = 3, C = -8 D = 15 }; char *names[] = { [A] = "a", [B] = "b", [C] = "c", [D] = "d" }; // like so
[20:29:28] <candide> CodeAgain: error: expected ',' or '}' before 'D'
[20:29:43] <edk> chair1: yeah, no idea if compilers do anything sensible with that sort of thing
[20:29:53] *** Joins: effexzi (uid474242@ilkley.irccloud.com)
[20:29:58] <fizzie> Lost a comma in there. But -8 isn't any more valid than -1.
[20:30:03] <edk> i do think X macros can make sense for big enums. mostly i feel they get in the way
[20:30:31] <ChoHag> If you have negative values then you can offset every access into the array by the smallest one.
[20:30:32] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:30:56] <edk> you have to offset the construction of the array, which is the annoying part
[20:30:59] <ChoHag> You can decrease the verbosity with macros although your array lookups will use () rather than [].
[20:31:02] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[20:31:17] <CodeAgain> Actually I just used it to exemplify that they are not properly ordered, so I wanted a smaller value
[20:31:19] <edk> for access you can just let C = &C_[offset] and then access it with negative indices
[20:31:24] <fizzie> Or just have a list of (name, value) pairs instead. It's just slower to look up things in. Unless it's sorted.
[20:31:26] <Guest96fd> CodeAgain: X-Macro example: https://paste.ee/p/q76AR
[20:31:38] <CodeAgain> Guest96fd thanks, I'll take a look too
[20:31:51] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 256 seconds)
[20:31:51] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-151.dsl.bell.ca)
[20:32:05] *** Joins: ghoust (~ghoust@46.246.4.134)
[20:32:19] <pragma-> glad to see someone else indents their switch blocks
[20:32:23] <edk> searching a sorted list might still not be very good
[20:32:38] <CodeAgain> Ohhhh, now I saw I copied the - sign
[20:32:41] <pragma-> i never understood why so many people are agreeable with special-casing switch blocks to not be indented
[20:32:43] <edk> that is where i'd stop, but if you wanted it to be fast you might need some sort of hash set
[20:32:46] <pragma-> that is not consistent
[20:32:55] <CodeAgain> ,cc enum { A = 0, B = 3, C = 8 D = 15 }; char *names[] = { [A] = "a", [B] = "b", [C] = "c", [D] = "d" }; // supposed to work?
[20:32:56] <candide> CodeAgain: Same output.
[20:33:14] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 252 seconds)
[20:33:21] <edk> to me consistency is a means to an end, namely readability
[20:33:23] <CodeAgain> Ohhh missed ;
[20:33:35] <pragma-> "becase cases are labels".  Nay! I say `case` is a keyword and should be indented.
[20:33:46] <edk> i find that unindenting the case statements makes switch statements more readable, so that's what i do
[20:34:12] <edk> dedenting? exdenting? outdenting?
[20:34:19] <edk> i like outdenting
[20:34:26] <fizzie> Negatively indented.
[20:34:57] <edk> it makes the structure more apparent, anyway
[20:35:26] <edk> indenting the cases then indenting the statements after them another level would do that too, but it would waste horizontal space
[20:35:54] <NRK> CodeAgain: you missed comma in the enum
[20:35:58] <fizzie> Also they so are labels. labeled-statement ::= identifier `:` statement | `case` constant-expression `:` statement | `default` `:` statement.
[20:36:11] *** Quits: ozoned (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 245 seconds)
[20:36:18] <pragma-> they're statements that just happened to be labeled!
[20:36:30] <CodeAgain> ,cc enum { A = 0, B = 3, C = 8 D = 15; }; char *names[] = { [A] = "a", [B] = "b", [C] = "c", [D] = "d" }; int c = 6; if (names[c] == NULL) printf("Oooops!! "); c = 8; printf("Now okay: %s:", names[c]); // supposed to work?
[20:36:32] <candide> CodeAgain: error: expected ',' or '}' before 'D'
[20:36:38] <ChoHag> Compromise and indent them half-way.
[20:36:39] *** Joins: orthoplex64 (~crm@70.120.0.94)
[20:36:42] <CodeAgain> Ohhhh yeas I'm forgetting again
[20:37:22] <CodeAgain> ,cc enum { A = 0, B = 3, C = 8; D = 15 }; char *names[] = { [A] = "a", [B] = "b", [C] = "c", [D] = "d" }; int c = 6; if (names[c] == NULL) printf("Oooops!! "); c = 8; printf("Now okay: %s:", names[c]); // supposed to work?
[20:37:22] *** Quits: crm (~crm@70.120.0.94) (Ping timeout: 250 seconds)
[20:37:23] <candide> CodeAgain: error: expected ',' or '}' before ';' token
[20:37:25] <edk> oh yes, who doesn't love half indents
[20:37:30] * pragma- stares at CodeAgain
[20:37:38] <CodeAgain> Ohhh man I better try on my own machine
[20:37:49] <CodeAgain> Before I disrupt too much the conversarion LOL
[20:37:58] <CodeAgain> In my defense I have ADHD
[20:37:59] <pragma-> you can /msg candide first
[20:38:09] <pragma-> in any case, you used a semi-colon instead of a comma there
[20:38:13] <edk> hmm. what's the most complicated algorithm that can fit on one irc line?
[20:38:18] <edk> in C, obviously
[20:38:23] <pragma-> oh
[20:38:28] <pragma-> this would have been easy in APL
[20:38:35] <NRK> mister, it's supposed to be comma
[20:38:44] <CodeAgain> Ohhhh, perfect, thanks pragma- also for making me see that I'm using ;
[20:39:17] <NRK> i don't think half the APL stuff would show up on my screen anyways
[20:40:23] *** Joins: AmR (~AmREiSa@156.207.136.200)
[20:40:29] *** Quits: node1 (~hex@user/node1) (Quit: Leaving)
[20:40:34] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[20:40:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-151.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:41:16] <chair1> Look at my solution for enum problem with X macros: https://godbolt.org/z/M39EE3Y7x
[20:41:26] <chair1> Seems very optimized I think, I love X macros btw
[20:45:23] *** Joins: Narrat (~omnius@p2e51179b.dip0.t-ipconnect.de)
[20:45:33] <NRK> nice obfuscation
[20:45:44] <NRK> thankfully i got `gcc -E | vim -` on my side
[20:45:57] *** Joins: kilobyte_ch (~kbch@213.55.225.21)
[20:46:16] *** Quits: ghoust (~ghoust@46.246.4.134) (Quit: ghoust)
[20:47:18] <chair1> Is it really that hard to read?
[20:47:21] <CodeAgain> ,cc int c, i; enum { A = 0, B = 3, C = 8, D = 15 }; char *names[] = { [A] = "a", [B] = "b", [C] = "c", [D] = "d" }; for (i = 0; i < 5; i++) { c = rand() % 16; if (names[c] == NULL) printf("Oooops, no names[%d]!!", c); else printf("Now okay: names[%d]=%s!", c, names[c]); } // Now finally okay, tested in PM
[20:47:23] <candide> CodeAgain: Oooops, no names[7]!!Oooops, no names[6]!!Oooops, no names[9]!!Now okay: names[3]=b!Oooops, no names[1]!!
[20:48:06] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:48:17] *** Quits: kilobyte2 (~kbch@77.109.171.85) (Ping timeout: 256 seconds)
[20:49:15] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:11d8:db29:fd37:c221) (Quit: fe23)
[20:49:25] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 256 seconds)
[20:51:06] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-115.dsl.bell.ca)
[20:51:32] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[20:52:18] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::e65c) (Remote host closed the connection)
[20:53:07] *** Joins: cul8r (~cul8r@2601:8c3:4000:b0d0::e65c)
[20:54:44] <chair1> Well that `gcc -E | vim -` trick is very neat
[20:55:13] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::e65c) (Remote host closed the connection)
[20:55:31] <CodeAgain> chair1 I'm going to take a look too, for sure
[20:55:36] <CodeAgain> Thanks a lot everyone
[20:55:37] *** Joins: cul8r (~cul8r@2601:8c3:4000:b0d0::e65c)
[20:55:43] <nitrix> You're welcome.
[20:56:43] *** Joins: Captain4LK (~Captain4L@p200300edbf173d0d523eaafffeeddbdf.dip0.t-ipconnect.de)
[20:58:00] <CodeAgain> chair1 wow, I loved that tool, you can see the asm just by hovering the C code line!!
[20:59:38] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-115.dsl.bell.ca) (Ping timeout: 252 seconds)
[21:00:04] <chair1> Funny, I realized I'm so enthusiastic for X macros I said "seems very optimized", tho I can't even interpret and compare assembly lol
[21:00:50] <CodeAgain> chair1 they seem like a quite interesting solution too
[21:01:59] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:02:04] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[21:02:19] <CodeAgain> At this moment I'm only writing some 'testing' code for something I want on my own, but there's a contribution I wanna make to a project with all this stuff, then I'll have to decide more careful what I'm gonna use
[21:02:23] *** Joins: Darkcoal (~user@2001:16a2:764b:d100:34c8:da42:162b:99f5)
[21:02:30] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 250 seconds)
[21:03:15] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[21:03:34] <CodeAgain> I liked both the array and the X macros solutions
[21:03:57] *** marlboro is now known as ko
[21:06:04] *** Quits: Akuli (~Akuli@87-94-111-217.bb.dnainternet.fi) (Quit: Akuli)
[21:06:46] *** Quits: MajorBiscuit (~MajorBisc@c-001-021-032.client.tudelft.eduvpn.nl) (Ping timeout: 260 seconds)
[21:08:39] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-175.dsl.bell.ca)
[21:13:11] <chair1> https://0x0.st/oHEx.c More X macros weirdness, this one I should send to IOCCC
[21:13:23] *** Quits: kilobyte_ch (~kbch@213.55.225.21) (Ping timeout: 252 seconds)
[21:15:12] *** Joins: Alhazred (~Alhazred@86.106.74.42)
[21:15:29] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-175.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:16:42] <fizzie> Not really related to that, but I seem to recall some framework somewhere defining all the 256 macros from B00000000 to B11111111 as a workaround for there being no binary integer literals in the language. And a couple of convenience helpers to do B32(B00001111,B11110000,B01010101,B10101010) and such for larger constants.
[21:17:05] <fizzie> When all you've got is the preprocessor, everything looks like a token sequence. Or something.
[21:17:11] *** Quits: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 256 seconds)
[21:18:01] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[21:18:38] *** Joins: AmR (~AmREiSa@156.207.136.200)
[21:19:17] <NRK> lol
[21:19:27] <NRK> speaking of preprocessors, anyone used hedley?
[21:19:58] <NRK> it's basically a massive .h file of macros to do compiler specific stuff "portably" https://nemequ.github.io/hedley/
[21:21:00] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[21:22:11] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[21:22:16] <chair1> Seems super useful, and is a single header public domain, one could just copy paste and use
[21:22:46] <koollman> that would have helped for some code I wrote a long time ago :)
[21:23:31] <NRK> it got me inspired to look into compiler attributes and such. i typically avoid them.
[21:23:32] <chair1> Tho I never used compiler specific stuff... perhaps I should learn what goodies are there
[21:23:35] <koollman> (that had to be portable on sun workstations and hp-ux, with both 'native' and gnu compilers... 'fun')
[21:23:48] <ChoHag> Wouldn't it have been easier to patch the compilers?
[21:23:50] *** Quits: alch (~alch@151.68.11.21) (Ping timeout: 252 seconds)
[21:24:24] <koollman> sure. just ask sun and ibm for the right to patch them. don't hold your breath ;)
[21:24:25] <chair1> What is it is MSVC
[21:24:49] <NRK> a larping C compiler
[21:25:19] <koollman> chair1: microsoft compiler, from ms visual studio
[21:25:31] <chair1> Do you guys to those things versioning code? I guess this is more useful for libraries right?
[21:25:39] *** Joins: alch (~alch@151.68.88.205)
[21:25:42] <chair1> koollman: I had a stroke typing nvm
[21:26:16] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-195.dsl.bell.ca)
[21:28:04] *** Quits: Darkcoal (~user@2001:16a2:764b:d100:34c8:da42:162b:99f5) (Ping timeout: 250 seconds)
[21:28:08] *** Joins: kilobyte_ch (~kbch@77.109.171.85)
[21:28:40] *** Joins: Darkcoal (~user@2001:16a2:764b:d100:1c08:37e5:f5b7:2cd7)
[21:29:08] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[21:33:03] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-195.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:33:22] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-7019-992d-5c33-127.fixed6.kpn.net) (Ping timeout: 260 seconds)
[21:37:22] *** Joins: crashrep (~crashrep@user/crashrep)
[21:38:34] <zwr> GCC's symbol visibility attributes are the most useful extensions I'd say, they're almost essential for writing libraries
[21:38:47] *** Joins: MrFantastik (~f@2607:f598:bbda:270:af90:c2f0:20b5:e42e)
[21:39:19] <zwr> constructors are also nice for one time initialization
[21:39:46] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-53-65-93-195-206.dsl.bell.ca)
[21:40:06] <sonny> if C doesn't have namespaces, why do people use multiple files?
[21:42:24] *** Joins: ozoned (~odoood@2601:c8:c000:c4e0::3)
[21:42:27] <nitrix> C has name spaces; they aren't quite what you would expect though.
[21:43:25] *** Joins: zarakshR (~Thunderbi@2a02:c7f:6aff:2a00:b260:88ff:fe0b:ae5f)
[21:43:48] *** ozoned is now known as odoood
[21:44:50] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[21:44:57] <nitrix> Ironically, for the very few name spaces that C does have, people manage to misuse them. For example struct tags are their own name space, yet ignorant developers would typedef the struct definition into the ordinary name space.
[21:45:15] <nitrix> typedef struct foo foo;
[21:45:20] <zarakshR> Hi guys, does anyone know why
[21:45:20] <zarakshR> uint128_t bb = 0x10000000000000000000000000000000U;
[21:45:20] <zarakshR> gives me a "integer constant is too large for its type" warning?
[21:45:28] <libh> Out of the various memory locations like the .bss, .text, .data, stack, and heap; which one gets filled up the fastest?
[21:45:40] <zarakshR> I have typedef uint128_t as __uint128_t and am using gcc.
[21:46:33] <zwr> gcc is not quite compliant there, it doesn't have 128 bit wide integer constants
[21:46:39] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-53-65-93-195-206.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:46:57] <zwr> despite providing that 128 bit type. in practice you probably shouldn't use it other than to toy around
[21:47:24] <fizzie> zarakshR: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fint128.html "There is no support in GCC for expressing an integer constant of type __int128 for targets with long long integer less than 128 bits wide."
[21:47:25] <candide> Title of fizzie's link: __int128 (Using the GNU Compiler Collection (GCC))
[21:47:47] <zarakshR> damn
[21:47:49] <fizzie> You can make one up from two pieces though.
[21:47:51] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[21:48:02] <zarakshR> yeah I was thinking I might have to twiddle the bits here
[21:49:18] *** Quits: Darkcoal (~user@2001:16a2:764b:d100:1c08:37e5:f5b7:2cd7) (Ping timeout: 250 seconds)
[21:50:09] *** Joins: Darkcoal (~user@2001:16a2:764b:d100:46e9:8338:e639:9863)
[21:50:39] <fizzie> ,cc -std=gnu11 unsigned __int128 x = (unsigned __int128) 0x0123456789abcdef << 64 | 0x0123456789abcdef;
[21:50:41] <candide> fizzie: no output: x = 1512366075204170929049582354406559215
[21:50:55] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving.)
[21:51:11] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[21:52:42] <libh> I'm reading how user-space programs can only touch high memory and only the kernel can touch low memory. Is that true?
[21:53:05] <sham1> Depends
[21:53:08] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Remote host closed the connection)
[21:53:15] *** Joins: SGautam (uid286066@ilkley.irccloud.com)
[21:53:52] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[21:55:32] *** Quits: ravella (~ravella@user/ryanavella) (Ping timeout: 240 seconds)
[21:56:27] *** Quits: Guest3750 (~sidy@nat.esu3.org) (Quit: Leaving)
[21:57:59] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[21:58:20] *** Quits: Darkcoal (~user@2001:16a2:764b:d100:46e9:8338:e639:9863) (Changing host)
[21:58:20] *** Joins: Darkcoal (~user@user/Darkcoal)
[21:59:23] *** Quits: _LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[21:59:45] <libh> What is the fastest way to run out of memory then sham1, using more high memory or low memory?
[22:01:11] *** Quits: finsternis (~X@23.226.237.192) (Remote host closed the connection)
[22:02:27] <chair1> By running out of memory, do you mean malloc() start returning NULL?
[22:03:10] *** Joins: finsternis (~X@23.226.237.192)
[22:03:24] <libh> I'm not talking about malloc at all. Perhaps I'm not understanding memory properly, but with how variables are placed in different areas, which way such as a "global" variable or automatic variable is faster to chew up memory usage?
[22:04:21] <chair1> It all boils down to heap and stack space, in the simplest terms
[22:04:46] <libh> The data/code/bss sections have very little influence on memory?
[22:05:01] *** Quits: zarakshR (~Thunderbi@2a02:c7f:6aff:2a00:b260:88ff:fe0b:ae5f) (Quit: zarakshR)
[22:05:08] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[22:05:55] <chair1> Automatic and static variables go on the stack, which is small. Malloc, which comprises dynamic memory allocation, uses the heap
[22:06:01] *** Joins: magla (~gelignite@55d436fa.access.ecotel.net)
[22:07:11] <sham1> The sizes of .bss, .data, .rodata and so on are decided at compile time (and also at link time brought together) and are of fixed size
[22:07:18] <System_Error> libh: in principle code and data take some RAM (usually). But in typical system (mormal computer or server) it usually not too much vs available RAM size
[22:08:18] <libh> I thought static variables went into either the bss or data sector depending on if it was given a value or not.
[22:08:27] <chair1> I think I'm mistaken
[22:08:40] <System_Error> but if you'll run out of RAM, ofc something is going to backfire
[22:08:44] <sham1> Automatic goes to stack if available
[22:08:56] <sham1> Static goes to either .data or .bss, yes
[22:09:02] <chair1> Someone here showed me that you can put GB of data inside static const variables
[22:09:04] <sham1> Threaded goes to .tbss
[22:09:49] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[22:11:09] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[22:11:18] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[22:11:38] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[22:11:47] <libh> In a nutshell, the stack/heap is more important for memory management than the other segments. Right?
[22:11:51] *** Joins: Darkcoal (~user@user/Darkcoal)
[22:12:09] *** Quits: Guest96fd (~Guest96fd@206.223.160.26) (Ping timeout: 256 seconds)
[22:12:13] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[22:13:29] <sham1> You should not need to care about memory
[22:13:30] <chair1> Yeah, for instance, VLAs are stored in the stack, which is small, so a big VLA may silently fail to be initialized and crash your program
[22:13:46] *** Joins: off^ (~off@128-092-174-141.biz.spectrum.com)
[22:14:37] *** Quits: Alhazred (~Alhazred@86.106.74.42) (Ping timeout: 250 seconds)
[22:14:42] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Remote host closed the connection)
[22:14:58] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[22:15:06] <chair1> Recursion uses stack too, so it can crash if it runs out of space
[22:15:59] <pragma-> tail-call optimization is so hot right now
[22:16:18] <chair1> I heard that too many variables also cause crashes if some systems are configured with too little stack space, like having thousands and thousands of variables
[22:16:48] <chair1> But can you rely on the compiler pragma- ? If so, recursion sometimes really is neat
[22:18:19] <sham1> In some cases the modern C compilers can actually do the smart thing and do tail-call optimisation
[22:18:26] <sham1> For example
[22:18:27] <libh> It seems pretty hard to chew up memory unless you do something really bad. I'm just playing around making random functions and random variables and I can only get up to 300kb of used up memory.
[22:18:50] *** Joins: terminalpusher (~terminalp@2a01:586:8e51:1:9e92:210c:f38:6810)
[22:19:00] *** Joins: Trigraph (~dev@68-251-63-205.lightspeed.sntcca.sbcglobal.net)
[22:19:16] *** Joins: Alhazred (~Alhazred@86.106.74.42)
[22:19:27] *** Quits: Kerr (~quassel@2601:602:ce00:c8d0:9768:c1e0:b1b8:bd8f) (Remote host closed the connection)
[22:19:32] <sham1> int fact_actual(int n, int acc) { if (n == 0) { return acc; } else { return fact_actual(n - 1, acc * n); } } int fact(int n) { return fact_actual(n, 1); }
[22:19:45] <sham1> That should get TCO'd and maybe even turned into a loop
[22:19:45] *** Joins: Kerr (~quassel@2601:602:ce00:c8d0:cb1b:59a4:8a8b:230c)
[22:20:18] <sham1> Could even get inlined if the fact_actual is made into a static function since this would be about the only place where it's used
[22:20:39] *** Quits: bixo_ (~bixo@190.200.253.127) (Ping timeout: 256 seconds)
[22:21:11] *** Joins: Filystyn (~piotr@user/filystyn)
[22:21:22] <Filystyn> I wanted to share with you
[22:21:56] <Filystyn> I hear sometimes about handling errors being time consuming. I belive writing documentation is much much more time consuming. FIN
[22:22:14] <sham1> Both are time consuming, but in different ways
[22:22:43] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[22:23:15] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[22:23:31] <pragma-> handling errors is easy if you do it as you go
[22:25:02] <libh> I'm trying to deliberately break something to see how memory works, I got this very absurd amount of functions under main(), yet my memory usage hardly goes up under task manager. https://paste.debian.net/hidden/dcf91a0d/ Why is that?
[22:25:03] <Filystyn> Handling errros is something one should do from start. Quite simple that it saves you lot of time
[22:25:46] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[22:26:08] <Filystyn> I have a lib and pack of programs I use a lot. And it grew to point manyal is kind of a must now since I had few times looking in source to be sure what program does. So in longer run I guess documenting stuff makes sens
[22:26:24] *** Joins: MatthiasG2 (~matthias@i6DFA0138.versanet.de)
[22:26:55] <NRK> libh: memory is unfortunately a pretty complicated topic
[22:27:06] <NRK> more complicated than it needs to be
[22:27:41] <libh> You can say that again NRK, that's why I want to fully understand it.
[22:27:50] <Filystyn> your not using much memory tbh
[22:28:11] <NRK> also, what you're doing there isn't going to consume much memory
[22:28:23] <Filystyn> it's all stack
[22:28:28] <pragma-> I use to comment my code sparingly, believing it was obvious what it does. but going back to the code years later... yeah, now i comment nearly every line!
[22:28:40] <Filystyn> look for getrlimits stack light limit
[22:28:47] <NRK> your function calls aren't allocating new memory
[22:29:00] <libh> How do I make the function calls allocate new memory then?
[22:29:08] *** Joins: Akuli (~Akuli@87-94-111-217.bb.dnainternet.fi)
[22:29:46] <NRK> do you understand how automatic storage space works?
[22:30:01] <libh> Not exactly, but now is the perfect opportunity to learn.
[22:30:13] <NRK> all your local variables are "gone" by the time the function exits
[22:30:32] <NRK> if you want to use lots of memory then try doing lots of malloc()
[22:31:00] <Filystyn> pragma I comment each function  heavily ( all possible errors and very precise behavior )  and it few times did help a lot. But still sometimes in bigger functions understanding why somethign was done  in some *strange way* can take some time
[22:31:19] *** Joins: mandanguita (~mandangui@139.47.119.61)
[22:31:21] <Filystyn> but onyl in C code. For C programs tbh I have low comments and some simple summary what program does
[22:31:39] <Filystyn> s/C code / C lib
[22:32:07] *** Quits: terminalpusher (~terminalp@2a01:586:8e51:1:9e92:210c:f38:6810) (Remote host closed the connection)
[22:32:26] *** Joins: terminalpusher (~terminalp@2a01:586:8e51:1:9e92:210c:f38:6810)
[22:33:10] <mandanguita> Hello. Is considered a good practice to traverse the argv using optind? I like to know how can you parse the rest of arguments once the options are parsed
[22:34:03] *** Joins: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9)
[22:34:52] <chair1> do a for loop that calls malloc
[22:34:58] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 260 seconds)
[22:35:12] <Filystyn> btw libh system can force user program to use some maximum ammount of memeory so it might happen that you won't be able to reach your max ram. But for example 1,5 Gb ;p
[22:35:22] <mandanguita> I'm currently using optind to start traversing arguments once the options are parsed
[22:36:22] <mandanguita> I'm also using the glibc implementation without forcing it to be POSIX compliant
[22:36:49] *** Joins: Darkcoal (~user@user/Darkcoal)
[22:37:09] <chair1> yeah use optind
[22:37:20] <NRK> i tend to only comment TODOs and FIXMEs
[22:37:35] <NRK> "the code is the documentation"
[22:38:01] *** Joins: ka80_ (~ka80@111.60.138.34.bc.googleusercontent.com)
[22:38:29] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Remote host closed the connection)
[22:38:38] <NRK> sometimes i'll add a note incase there's some weird shenanigan going on
[22:38:55] <chair1> I want to experiment handing my code to someone and give them tasks like "locate where the configuration file is changed" and document as the person struggles
[22:39:02] <Filystyn> I was investigating a TODO recently that I simply forgotten to get rid of
[22:39:34] *** Quits: terminalpusher (~terminalp@2a01:586:8e51:1:9e92:210c:f38:6810) (Remote host closed the connection)
[22:39:47] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[22:39:50] <mandanguita> thanks chair1
[22:40:06] <chair1> np
[22:40:10] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[22:40:42] *** Quits: bick (~kotaman@94.46.203.147) (Ping timeout: 256 seconds)
[22:41:03] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:41:10] *** Joins: marlboro (~i.am@177.96.143.233)
[22:41:10] *** Quits: marlboro (~i.am@177.96.143.233) (Changing host)
[22:41:10] *** Joins: marlboro (~i.am@user/marlboro)
[22:41:37] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[22:41:37] *** Quits: ko (~i.am@user/marlboro) (Ping timeout: 256 seconds)
[22:41:51] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[22:41:51] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[22:42:11] *** Quits: Alhazred (~Alhazred@86.106.74.42) (Ping timeout: 256 seconds)
[22:42:11] *** Quits: kurfen (~kurfen@213.152.188.7) (Ping timeout: 256 seconds)
[22:42:11] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[22:42:23] *** Joins: Betal (~Betal@user/betal)
[22:42:56] *** Quits: arinov (~arinov@213.194.126.155) (Read error: Connection reset by peer)
[22:43:46] *** Joins: Alhazred (~Alhazred@86.106.74.42)
[22:43:57] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[22:44:18] *** Joins: hxztnxt (~hxztnxt@196.red-83-37-235.dynamicip.rima-tde.net)
[22:44:27] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[22:45:04] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:16] *** Quits: hxztnxt (~hxztnxt@196.red-83-37-235.dynamicip.rima-tde.net) (Client Quit)
[22:48:33] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[22:48:43] *** Quits: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[22:49:11] *** Joins: arinov (~arinov@213.194.126.155)
[22:50:16] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[22:51:18] *** Quits: Alhazred (~Alhazred@86.106.74.42) (Ping timeout: 260 seconds)
[22:52:23] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[22:54:36] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[22:56:23] *** Joins: vicfred (~vicfred@user/vicfred)
[22:58:08] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[22:58:36] *** Joins: arinov_ (~arinov@213.194.126.155)
[22:58:37] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[22:59:23] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[22:59:43] *** Joins: bick (~kotaman@94.46.203.147)
[22:59:44] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[23:02:20] *** Quits: Captain4LK (~Captain4L@p200300edbf173d0d523eaafffeeddbdf.dip0.t-ipconnect.de) (Quit: Leaving)
[23:02:35] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:03:23] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Quit: leaving)
[23:04:12] *** Quits: chair1 (~nero@177.23.12.223) (Quit: leaving)
[23:06:37] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[23:07:38] *** Joins: fwg (~fwg@user/fwg)
[23:07:44] *** Quits: bick (~kotaman@94.46.203.147) (Ping timeout: 250 seconds)
[23:15:24] *** Joins: Atque (~Atque@user/atque)
[23:15:45] *** Joins: cocalero (~cocalero@200-140-37-88.user3p.brasiltelecom.net.br)
[23:16:28] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving.)
[23:17:24] *** Quits: gnomesort (~gnomesort@user/gnomesort) (Quit: ZNC - https://znc.in)
[23:17:26] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 245 seconds)
[23:17:30] *** Quits: cmbrnt (~cmbrnt@static.106.104.76.144.clients.your-server.de) (Quit: leaving)
[23:17:45] *** Joins: cmbrnt (~cmbrnt@static.106.104.76.144.clients.your-server.de)
[23:18:08] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[23:18:35] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[23:19:27] *** Quits: cmbrnt (~cmbrnt@static.106.104.76.144.clients.your-server.de) (Client Quit)
[23:19:42] *** Joins: Darkcoal (~user@user/Darkcoal)
[23:21:31] *** Joins: cmbrnt (~cmbrnt@static.106.104.76.144.clients.your-server.de)
[23:24:01] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[23:24:18] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[23:27:18] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[23:28:44] *** Joins: bick (~kotaman@94.46.203.147)
[23:31:40] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[23:31:59] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 252 seconds)
[23:34:13] *** Joins: Darkcoal (~user@user/Darkcoal)
[23:34:13] *** Quits: ckdCreations (~ckdCreati@147.55.133.136) (Read error: Connection reset by peer)
[23:34:54] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[23:35:39] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[23:36:34] *** Quits: MatthiasG2 (~matthias@i6DFA0138.versanet.de) (Quit: Lost terminal)
[23:38:25] *** Joins: bixo_ (~bixo@190.200.253.127)
[23:38:29] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:38:53] *** Quits: effexzi (uid474242@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:40:11] *** Joins: kuber (~kuber@75-172-24-205.tukw.qwest.net)
[23:42:21] *** Joins: oliverwood (~oliverwoo@node-1w7jra27sm79l0xu1l5l5nxry.ipv6.telus.net)
[23:44:31] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[23:48:48] *** Joins: Guest96fd (~Guest96fd@206.223.160.26)
[23:50:49] *** Quits: gnomesort (~gnomesort@user/gnomesort) (Ping timeout: 250 seconds)
[23:51:30] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[23:51:44] *** Quits: jenkins (jenkins@user/jenkins) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[23:51:56] *** Joins: jenkins (~jenkins@user/jenkins)
[23:55:07] *** Joins: nhartman (~Nathan22@206.223.160.26)
[23:55:48] *** Joins: zacts (~zacts@user/zacts)
[23:56:18] *** nhartman is now known as SaltHillStroller
[23:56:21] *** Quits: zacts (~zacts@user/zacts) (Client Quit)
[23:56:38] *** Quits: Akuli (~Akuli@87-94-111-217.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[23:56:54] *** Joins: Akuli (~Akuli@213.216.211.88)
[23:57:20] *** Quits: Guest96fd (~Guest96fd@206.223.160.26) (Quit: Client closed)
[23:57:27] *** Joins: effexzi (uid474242@ilkley.irccloud.com)
[23:57:34] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[23:59:09] *** Quits: SaltHillStroller (~Nathan22@206.223.160.26) (Client Quit)
[23:59:33] *** Joins: nhartman (~Nathan22@206.223.160.26)
