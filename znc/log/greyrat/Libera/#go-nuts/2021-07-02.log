[00:01:23] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[00:06:23] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[00:08:23] *** Quits: mmfood (~mmfood@194.103.157.64) (Remote host closed the connection)
[00:13:12] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[00:17:51] *** Joins: _rubik (~rubik@user/rubik/x-6853868)
[00:22:47] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[00:23:28] <Torr> Do y'all keep test date in a separate file? This seems to bring more complexity when tests are run from distinct directories.
[00:23:44] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[00:25:35] *** Joins: nabromov (~nabromov@92.40.255.115.threembb.co.uk)
[00:29:07] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Ping timeout: 256 seconds)
[00:29:57] *** Quits: nabromov (~nabromov@92.40.255.115.threembb.co.uk) (Client Quit)
[00:34:05] *** Joins: menace_ (~someone@ppp-93-104-175-139.dynamic.mnet-online.de)
[00:35:55] *** Quits: menace (~someone@user/menace) (Ping timeout: 256 seconds)
[00:36:15] <Torr> test data*
[00:38:37] *** Joins: dmathieu (~textual@78.203.212.55)
[00:38:44] <lazyreader> testdata folders per-package
[00:39:02] *** Joins: dr0n (~nabromov@94.11.23.235)
[00:42:40] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:610c:3ef6:c79a:ebf8) (Quit: Leaving)
[00:42:44] *** Quits: dmathieu (~textual@78.203.212.55) (Client Quit)
[00:46:20] <Torr> Hm
[00:46:27] <b0nn> Interesting discussion on virtues/vices of json and protobuf https://twitter.com/bradfitz/status/1410608533402357766
[00:46:46] *** Quits: sysh (~sysh@212.237.182.120) (Remote host closed the connection)
[00:47:20] <b0nn> Torr: testdata is a "magic" directory name in Go, only tests can access its contents
[00:47:40] <b0nn> so it's great for fixtures and examples
[00:47:56] <b0nn> er, s/examples/golden files
[00:48:29] <ikke> b0nn: what do you mean with "only tests can access its contents"?
[00:48:48] <b0nn> go build ignores itsa contents
[00:49:06] <ikke> right
[00:49:21] <b0nn> actuaslly, now that you bring the issue up, I'm not sure if embed will access a testdata dir
[00:50:15] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:53:51] *** Joins: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748)
[00:59:33] <b0nn> TIL that //go:embed can read files in the testdata directory
[00:59:43] <ikke> aha
[01:02:53] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[01:03:21] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Client Quit)
[01:04:21] <Torr> Cool package.
[01:11:31] *** Joins: arinov_ (~arinov@178.240.158.75)
[01:17:16] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Changing host)
[01:17:16] *** Joins: fikran (~fikran@user/fikran)
[01:17:54] *** Quits: burningserenity_ (~burningse@102.129.152.26) (Ping timeout: 258 seconds)
[01:18:59] *** Joins: witcher (~witcher@static.74.224.203.116.clients.your-server.de)
[01:19:29] *** Joins: nameless (~nameless@user/nameless)
[01:23:26] *** Quits: arinov_ (~arinov@178.240.158.75) (Read error: Connection reset by peer)
[01:23:43] *** Joins: arinov_ (~arinov@178.240.158.75)
[01:29:12] *** Joins: burningserenity (~burningse@102.129.153.70)
[01:29:45] *** Quits: arinov_ (~arinov@178.240.158.75) (Ping timeout: 256 seconds)
[01:30:32] *** Joins: Necoro (~Necoro@user/necoro)
[01:31:26] *** Joins: arinov_ (~arinov@178.240.158.75)
[01:38:02] *** Quits: theoceaniscool (~theoceani@93.177.121.14) (Ping timeout: 252 seconds)
[01:39:00] *** Joins: clarjon1 (~clarjon1@198-84-130-36.cpe.teksavvy.com)
[01:39:05] *** Quits: nameless (~nameless@user/nameless) (Quit: WeeChat 3.3-dev)
[01:39:46] *** Joins: nameless (~nameless@69.197.131.198)
[01:39:46] *** Quits: nameless (~nameless@69.197.131.198) (Changing host)
[01:39:46] *** Joins: nameless (~nameless@user/nameless)
[01:41:00] *** Quits: miasuji (~miasuji@184-96-251-92.hlrn.qwest.net) (Quit: Leaving)
[01:48:36] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[01:51:02] *** Quits: Jigsy (~Jigsy@user/jigsy) (Read error: Connection reset by peer)
[01:51:28] *** Quits: acid (~acid@user/acid) (Read error: Connection reset by peer)
[01:51:36] *** Joins: acid (~acid@user/acid)
[01:52:46] *** Joins: Jigsy (~Jigsy@user/jigsy)
[01:53:47] *** Quits: avemestr (~avemestr@2a01:4f8:212:2719::2) (Ping timeout: 252 seconds)
[01:54:53] *** Joins: avemestr (~avemestr@2a01:4f8:212:2719::2)
[01:55:11] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[01:55:38] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[01:56:42] *** Quits: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com) (Ping timeout: 272 seconds)
[02:02:26] *** Quits: DeltaNova (~DeltaNova@user/deltanova) (Quit: WeeChat 3.0.1)
[02:11:51] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: node-irc says goodbye)
[02:15:13] *** Quits: aigoo (~aigoo@user/aigoo) (Remote host closed the connection)
[02:17:23] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[02:25:02] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:4d8e:9dc8:8270:3ec1) (Quit: WeeChat 3.2)
[02:26:31] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 258 seconds)
[02:26:56] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:27:16] *** Quits: kindablue (znc@irc.tpurist.com) (Quit: System Rebooting..)
[02:27:19] *** binkers- is now known as Binkers
[02:28:04] *** Joins: kindablue (znc@irc.tpurist.com)
[02:29:01] *** Quits: dza (~dza@user/dza) (Read error: Connection reset by peer)
[02:30:04] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[02:32:29] *** Joins: aigoo (~aigoo@user/aigoo)
[02:40:01] *** Quits: bloony (~bloony@2a02:2121:107:e338:1c13:86d4:5401:2) (Ping timeout: 256 seconds)
[02:43:16] *** Quits: The_Loko (~The_Loko@86.127.244.52) (Quit: Leaving)
[02:44:07] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[02:44:14] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[02:46:24] *** Joins: kdsch (~kdsch@89.45.224.100)
[02:49:21] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[02:54:38] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:55:42] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[02:57:05] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[02:57:24] *** Joins: dza (~dza@user/dza)
[02:59:54] *** Joins: andlabs (~andlabs@71.190.119.164)
[03:00:14] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[03:01:16] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[03:08:42] *** Quits: arinov_ (~arinov@178.240.158.75) (Ping timeout: 240 seconds)
[03:09:58] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:9d49:dff0:63a6:b2f)
[03:15:47] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[03:17:30] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 258 seconds)
[03:19:48] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:25:09] *** Quits: Necoro (~Necoro@user/necoro) (Quit: WeeChat 3.2)
[03:30:57] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:29] *** Joins: jsrnop (~mark@user/jsrnop)
[03:33:32] *** Quits: kdsch (~kdsch@89.45.224.100) (Ping timeout: 252 seconds)
[03:36:43] *** Joins: Crassus (~Crassus@user/crassus)
[03:42:16] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[03:53:01] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[03:53:52] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[03:54:35] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d) (Remote host closed the connection)
[03:55:57] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 256 seconds)
[03:58:13] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 256 seconds)
[03:59:52] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[04:02:46] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:04:37] *** Joins: andlabs (~andlabs@71.190.119.164)
[04:07:10] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 272 seconds)
[04:09:30] *** Quits: andlabs (~andlabs@71.190.119.164) (Client Quit)
[04:09:35] *** Quits: darkapex (uid360049@user/darkapex) (Quit: Connection closed for inactivity)
[04:13:43] *** Joins: andlabs (~andlabs@71.190.119.164)
[04:19:40] *** Joins: yoonkn (~user@8.47.15.41)
[04:28:15] *** Joins: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net)
[04:32:04] *** Joins: mud (~mud@user/kadoban)
[04:35:08] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[04:41:45] *** Joins: frost (~frost@59.71.241.179)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:33] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:47] *** Joins: Garb0 (~Garb0@user/garb0)
[04:47:52] *** Joins: yoonkn` (~user@175.197.208.79)
[04:52:08] *** Quits: yoonkn (~user@8.47.15.41) (Ping timeout: 272 seconds)
[04:56:10] *** Quits: src (~src@user/src) (Quit: leaving)
[04:56:47] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:9d49:dff0:63a6:b2f) (Quit: Some random bits)
[04:57:45] *** Joins: chovy (~chovy@75-55-138-167.lightspeed.mtryca.sbcglobal.net)
[04:57:59] <chovy> how can i test if multiple strings are existing in a string?
[04:58:06] <chovy> i want to check for ();--
[04:58:09] <chovy> stuff like that
[05:01:01] <b0nn> https://golang.org/pkg/strings/#Count
[05:02:44] *** Quits: gst (~gst@gateway/tor-sasl/gst) (Ping timeout: 244 seconds)
[05:03:47] *** Joins: gst (~gst@gateway/tor-sasl/gst)
[05:04:47] *** Joins: burningserenity_ (~burningse@102.129.153.49)
[05:05:30] *** Quits: burningserenity (~burningse@102.129.153.70) (Ping timeout: 240 seconds)
[05:10:19] *** Quits: nperez (~nperez@86-93-223-59.fixed.kpn.net) (Ping timeout: 244 seconds)
[05:10:51] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[05:11:46] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 272 seconds)
[05:21:29] *** Quits: wgr (~wgr@user/wgr) (Quit: wgr)
[05:23:30] *** Joins: Garb0 (~Garb0@user/garb0)
[05:35:50] *** Quits: treethought (~treethoug@138.68.49.251) (Remote host closed the connection)
[05:36:48] *** Joins: treethought (treethou@138.68.49.251)
[05:38:56] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[05:40:16] *** Quits: KekSi (~KekSi@x4db62c11.dyn.telefonica.de) (Ping timeout: 272 seconds)
[05:40:18] <snappy> when you pass an array in go as a function argument, is a copy of the entire array made? https://play.golang.org/p/3wSi7VhgPu9
[05:43:16] *** Quits: treethought (treethou@138.68.49.251) (Remote host closed the connection)
[05:43:25] *** Parts: ansimita (~ansimita@user/ansimita) ()
[05:43:35] *** Joins: KekSi (~KekSi@x4db68249.dyn.telefonica.de)
[05:44:08] *** Joins: treethought (treethou@138.68.49.251)
[05:44:27] <Sam> Modify the array in your example function and then print it again and you can find out.
[05:49:37] *** Quits: treethought (treethou@138.68.49.251) (Remote host closed the connection)
[05:50:28] *** Joins: treethought (treethou@138.68.49.251)
[05:54:42] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 268 seconds)
[05:57:16] *** Joins: ansimita (~ansimita@user/ansimita)
[05:58:25] *** Joins: nperez (~nperez@86-93-223-59.fixed.kpn.net)
[05:58:53] *** Quits: treethought (treethou@138.68.49.251) (Remote host closed the connection)
[06:01:49] <b0nn> Also, look at the pointers to the objects with fmt.Printf("%p", obj)
[06:01:53] <b0nn> eg. https://play.golang.org/p/J7LTtCrpnE4
[06:02:12] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[06:05:44] *** Joins: treethought (treethou@138.68.49.251)
[06:14:38] *** Joins: jsrnop5 (~mark@user/jsrnop)
[06:15:30] *** Quits: jsrnop (~mark@user/jsrnop) (Ping timeout: 240 seconds)
[06:15:30] *** jsrnop5 is now known as jsrnop
[06:21:04] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[06:24:12] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[06:25:17] *** Joins: gggp (~textual@36.112.128.143)
[06:29:00] *** Quits: gggp (~textual@36.112.128.143) (Client Quit)
[06:37:25] *** Joins: oxum (~oxum@136.185.148.86)
[06:42:11] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 268 seconds)
[06:44:48] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[06:44:58] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[06:45:34] *** Quits: frost (~frost@59.71.241.179) (Quit: Ping timeout (120 seconds))
[06:46:15] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[06:47:36] *** Quits: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[06:48:05] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[06:48:35] *** Joins: novns (~novns@user/novns)
[06:49:31] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[06:49:43] *** Joins: reedrichards (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[06:50:37] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:51:56] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-55.prtc.net)
[06:52:01] *** reedrichards is now known as MrFantastik
[07:03:30] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:06:22] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[07:07:32] *** Joins: andlabs (~andlabs@71.190.119.164)
[07:10:04] *** Quits: znpy (~znpy@user/znpy) (Quit: Ping timeout (120 seconds))
[07:11:00] *** Quits: keiser0091075 (~keiser@83.25.198.9.ipv4.supernova.orange.pl) (Quit: Ping timeout (120 seconds))
[07:11:13] *** Joins: keiser0091075 (~keiser@83.25.198.9.ipv4.supernova.orange.pl)
[07:12:13] *** Joins: znpy (~znpy@user/znpy)
[07:21:46] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[07:23:15] *** Quits: jlindgren (~jlindgren@user/jlindgren) (Quit: ZNC 1.8.2 - https://znc.in)
[07:24:44] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[07:25:23] *** Joins: jlindgren (~jlindgren@155.138.201.99)
[07:25:25] *** Quits: jlindgren (~jlindgren@155.138.201.99) (Changing host)
[07:25:25] *** Joins: jlindgren (~jlindgren@user/jlindgren)
[07:27:41] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[07:29:12] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Ping timeout: 272 seconds)
[07:31:49] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[07:35:15] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[07:40:51] *** Quits: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019) (Write error: Connection reset by peer)
[07:40:52] *** Quits: kadoban (~kadoban@user/kadoban) (Read error: Connection reset by peer)
[07:40:53] *** Quits: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e) (Read error: Connection reset by peer)
[07:40:53] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Read error: Connection reset by peer)
[07:40:53] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Write error: Connection reset by peer)
[07:40:53] *** Quits: psydroid (~psydroid@user/psydroid) (Write error: Connection reset by peer)
[07:40:53] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Write error: Connection reset by peer)
[07:40:54] *** Quits: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1) (Remote host closed the connection)
[07:40:54] *** Quits: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b) (Write error: Connection reset by peer)
[07:40:55] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (Read error: Connection reset by peer)
[07:40:55] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Write error: Connection reset by peer)
[07:41:04] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Write error: Connection reset by peer)
[07:41:05] *** Quits: mambang[m] (~mambang@user/mambang) (Write error: Connection reset by peer)
[07:41:28] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Write error: Connection reset by peer)
[07:41:31] *** Quits: worr (~worr@2001:470:69fc:105::78c) (Read error: Connection reset by peer)
[07:41:33] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Read error: Connection reset by peer)
[07:41:44] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[07:43:20] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[07:43:20] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[07:43:20] *** Joins: worr (~worr@2001:470:69fc:105::78c)
[07:43:20] *** Joins: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1)
[07:43:20] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[07:43:20] *** Joins: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b)
[07:43:20] *** Joins: kadoban (~kadoban@user/kadoban)
[07:43:20] *** Joins: mambang[m] (~mambang@user/mambang)
[07:43:20] *** Joins: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e)
[07:43:20] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[07:43:20] *** Joins: psydroid (~psydroid@user/psydroid)
[07:43:20] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[07:43:28] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[07:43:32] *** Joins: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019)
[07:43:33] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[07:43:33] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[07:43:37] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-55.prtc.net) (Ping timeout: 246 seconds)
[07:45:02] *** Quits: dr0n (~nabromov@94.11.23.235) (Ping timeout: 272 seconds)
[07:45:27] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 256 seconds)
[07:46:53] *** Joins: holgersson (~quassel@user/holgersson)
[07:46:56] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[07:51:36] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[07:51:54] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[07:55:06] *** Joins: oxum (~oxum@136.185.148.86)
[08:00:11] *** Joins: mambang (~mambang@user/mambang)
[08:00:55] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 265 seconds)
[08:03:06] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: node-irc says goodbye)
[08:03:08] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: node-irc says goodbye)
[08:03:37] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: node-irc says goodbye)
[08:03:37] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: node-irc says goodbye)
[08:03:58] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: node-irc says goodbye)
[08:04:08] *** Quits: worr (~worr@2001:470:69fc:105::78c) (Quit: node-irc says goodbye)
[08:04:09] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 256 seconds)
[08:04:49] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Quit: node-irc says goodbye)
[08:05:06] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: node-irc says goodbye)
[08:05:28] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (Quit: node-irc says goodbye)
[08:06:24] *** Quits: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e) (Quit: node-irc says goodbye)
[08:06:56] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[08:06:58] *** Quits: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b) (Quit: node-irc says goodbye)
[08:06:58] *** Quits: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1) (Quit: node-irc says goodbye)
[08:07:33] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Quit: node-irc says goodbye)
[08:08:04] *** Quits: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019) (Quit: node-irc says goodbye)
[08:08:20] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: node-irc says goodbye)
[08:08:20] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Quit: node-irc says goodbye)
[08:12:17] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 258 seconds)
[08:15:51] *** Joins: holgersson (~quassel@user/holgersson)
[08:25:25] *** Joins: x00 (~x00@ool-44c1b49b.dyn.optonline.net)
[08:26:34] *** Parts: x00 (~x00@ool-44c1b49b.dyn.optonline.net) (Leaving)
[08:36:44] *** Joins: oxum (~oxum@136.185.148.86)
[08:37:12] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[08:41:33] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 256 seconds)
[08:45:03] *** Joins: iamd3vil (~Guest1@103.121.150.162)
[09:00:59] *** Joins: oxum (~oxum@136.185.148.86)
[09:04:55] *** Quits: _rubik (~rubik@user/rubik/x-6853868) (Quit: WeeChat 3.2)
[09:05:52] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 268 seconds)
[09:17:57] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[09:18:57] *** Quits: normen (~normen@p200300d7173dc900a9596ed88ac0c260.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[09:22:31] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 268 seconds)
[09:25:11] *** Quits: mambang (~mambang@user/mambang) (Ping timeout: 256 seconds)
[09:30:29] <raktajino> TIL thank you
[09:32:55] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[09:35:07] *** Joins: dalan6 (~dalan@59-102-28-124.tpgi.com.au)
[09:36:12] *** Joins: kdsch (~kdsch@89.46.62.235)
[09:37:30] *** Quits: dalan (~dalan@118.102.85.89) (Ping timeout: 240 seconds)
[09:37:30] *** dalan6 is now known as dalan
[09:37:30] *** Quits: kdsch (~kdsch@89.46.62.235) (Client Quit)
[09:39:08] *** Joins: oxum (~oxum@136.185.148.86)
[09:43:54] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 258 seconds)
[09:53:51] *** Joins: normen (~normen@p200300d7173dc900a9596ed88ac0c260.dip0.t-ipconnect.de)
[09:55:18] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[09:55:42] *** Joins: Jigsy (~Jigsy@user/jigsy)
[09:57:54] *** Quits: normen (~normen@p200300d7173dc900a9596ed88ac0c260.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[10:00:01] *** Joins: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net)
[10:02:12] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 252 seconds)
[10:02:29] *** Joins: Ergo^ (~ergo@91.238.59.144)
[10:04:07] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[10:06:54] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[10:15:02] *** Joins: shka (~herr@109.231.62.239)
[10:16:47] *** Joins: fef (~thedawn@user/thedawn)
[10:19:01] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 256 seconds)
[10:25:51] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[10:26:21] *** Quits: emptyleg (~emptyleg@71.212.173.254) (Quit: Leaving...)
[10:30:15] *** Quits: iamd3vil (~Guest1@103.121.150.162) (Quit: Client closed)
[10:31:08] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[10:33:30] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[10:33:37] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[10:34:27] *** Quits: be3uykpy_ (~be3uykpy@141.226.9.247) (Remote host closed the connection)
[10:34:50] *** Joins: be3uykpy_ (~be3uykpy@141.226.9.247)
[10:36:34] *** Joins: koo555 (~koo6@89-24-13-235.customers.tmcz.cz)
[10:39:12] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 272 seconds)
[10:49:15] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Remote host closed the connection)
[10:50:02] *** Quits: a153 (~a153@user/a153) (Quit: WeeChat 2.3)
[10:50:40] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[10:54:29] *** Joins: gggpkm_ (~gggpkm@60.10.23.171)
[10:56:22] *** Joins: gggp (~textual@60.10.194.47)
[10:56:56] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[10:59:24] *** Quits: koo555 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 252 seconds)
[11:01:38] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (Quit: ZNC 1.8.2 - https://znc.in)
[11:02:53] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:05:14] *** Quits: gggpkm_ (~gggpkm@60.10.23.171) (Remote host closed the connection)
[11:05:37] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[11:07:52] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[11:08:18] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[11:08:59] *** Joins: dmathieu (~textual@78.203.212.55)
[11:10:23] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[11:16:36] *** Joins: mrig (~mrig@user/mrig)
[11:17:15] *** Joins: spirgel_ (spirgel@gateway/vpn/protonvpn/spirgel)
[11:19:10] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[11:20:07] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[11:20:07] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 258 seconds)
[11:21:17] *** Joins: foobaz (~oofabz@199.58.97.156)
[11:21:45] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[11:31:39] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[11:33:18] <Ox151> is there a way to set the html server side? I tried setting it but just renders as plain text
[11:35:26] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[11:35:41] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:36:35] *** Joins: arinov_ (~arinov@31.142.27.189)
[11:42:07] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[11:44:23] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Read error: Connection reset by peer)
[11:44:56] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[11:47:07] *** Quits: Ox151 (~user@user/ox151) (Ping timeout: 265 seconds)
[11:49:13] *** Quits: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net) (Quit: Connection closed)
[11:50:14] *** Joins: gggpkm_ (~gggpkm@36.112.135.215)
[11:50:16] *** Quits: milosz (~milosz@user/milosz) (Remote host closed the connection)
[11:50:17] *** Joins: dr0n (~nabromov@94.11.23.235)
[11:50:33] <b0nn> Ox151 https://www.alexedwards.net/blog/serving-static-sites-with-go
[11:51:03] <b0nn> Assuming that he didn't leave (I cannot tab complete the nick so that means it left, or was changed
[11:51:31] <ikke> They left
[11:51:59] <rk4> ping timeout specifically
[11:52:55] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[11:53:37] <rk4> the more sophisticated methods of ignoring parts/joins/quits will still show the relevent messages for recently active people which is usefule (eg: weechat's smart filter, third party irssi-smartfilter)
[11:53:56] <rk4> is a pretty good idea, weechat had it right building such functionality in
[11:54:32] <b0nn> I'm happy to not see joins/parts/quits
[11:54:57] <b0nn> normally the ability to tab complete tells me what I know, but, in this case, the nick was a bit weird
[11:55:12] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[11:55:40] *** Joins: normen (~normen@p200300d7173dc900a9596ed88ac0c260.dip0.t-ipconnect.de)
[11:55:43] <rk4> sometimes it's useful, like he timed out, if he joined again right now that would be useful information
[11:55:44] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[11:55:58] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[11:55:59] *** Joins: worr (~worr@2001:470:69fc:105::78c)
[11:56:05] <rk4> each to their own though
[11:56:11] *** Joins: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1)
[11:56:11] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[11:56:23] *** Joins: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b)
[11:56:23] *** Joins: kadoban (~kadoban@user/kadoban)
[11:56:31] *** Joins: Xjs (~jannis@user/xjs)
[11:56:37] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[11:56:48] *** Joins: mambang[m] (~mambang@user/mambang)
[11:56:48] *** Joins: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e)
[11:56:48] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[11:56:48] *** Joins: psydroid (~psydroid@user/psydroid)
[11:56:48] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[11:56:51] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[11:57:00] *** Joins: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019)
[11:57:36] *** Joins: oxum (~oxum@136.185.148.86)
[11:58:29] *** Joins: mambang (~mambang@user/mambang)
[12:00:27] *** Quits: normen (~normen@p200300d7173dc900a9596ed88ac0c260.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[12:00:37] *** Quits: mambang (~mambang@user/mambang) (Client Quit)
[12:00:52] *** Joins: goldfish (~goldfish@user/goldfish)
[12:02:06] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 265 seconds)
[12:02:31] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 246 seconds)
[12:04:12] *** gggpkm_ is now known as gggpkm
[12:08:28] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 246 seconds)
[12:09:08] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:10:28] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[12:11:08] <ikke> I can choose whether to see them
[12:12:43] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 268 seconds)
[12:14:28] *** Joins: mrig (~mrig@user/mrig)
[12:15:59] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Client limit exceeded: 20000)
[12:16:14] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Client limit exceeded: 20000)
[12:16:22] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Client limit exceeded: 20000)
[12:16:46] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[12:16:46] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Client limit exceeded: 20000)
[12:17:17] *** Quits: worr (~worr@2001:470:69fc:105::78c) (Quit: Client limit exceeded: 20000)
[12:17:52] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Quit: Client limit exceeded: 20000)
[12:18:39] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (Quit: Client limit exceeded: 20000)
[12:19:24] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Quit: Client limit exceeded: 20000)
[12:20:01] *** Quits: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1) (Quit: Client limit exceeded: 20000)
[12:20:56] *** Quits: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e) (Quit: Client limit exceeded: 20000)
[12:20:57] *** Quits: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b) (Quit: Client limit exceeded: 20000)
[12:21:44] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: Client limit exceeded: 20000)
[12:22:31] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Quit: Client limit exceeded: 20000)
[12:23:06] *** Quits: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019) (Quit: Client limit exceeded: 20000)
[12:27:35] *** Quits: arinov_ (~arinov@31.142.27.189) (Ping timeout: 258 seconds)
[12:28:42] *** Quits: mambang[m] (~mambang@user/mambang) (Write error: Connection reset by peer)
[12:29:45] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[12:31:03] *** Joins: hikhvar79 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de)
[12:31:18] *** Joins: normen (~normen@p200300d7173dc900a9596ed88ac0c260.dip0.t-ipconnect.de)
[12:31:25] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[12:31:25] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[12:31:25] *** Joins: worr (~worr@2001:470:69fc:105::78c)
[12:31:25] *** Joins: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1)
[12:31:25] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[12:31:25] *** Joins: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b)
[12:31:25] *** Joins: kadoban (~kadoban@user/kadoban)
[12:31:25] *** Joins: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e)
[12:31:25] *** Joins: mambang[m] (~mambang@user/mambang)
[12:31:25] *** Joins: psydroid (~psydroid@user/psydroid)
[12:31:25] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[12:31:25] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[12:31:37] *** Joins: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019)
[12:31:39] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[12:31:39] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[12:33:10] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[12:34:27] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[12:35:06] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 240 seconds)
[12:35:28] *** Quits: gggpkm (~gggpkm@36.112.135.215) (Ping timeout: 252 seconds)
[12:38:55] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[12:40:50] *** Joins: koo555 (~koo6@89-24-13-235.customers.tmcz.cz)
[12:41:49] *** Joins: theoceaniscool (~theoceani@93.177.121.14)
[12:42:13] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 265 seconds)
[12:46:07] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[12:46:19] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 268 seconds)
[12:47:06] *** Quits: koo555 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 240 seconds)
[12:47:15] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:47:18] *** Joins: oxum (~oxum@136.185.148.86)
[12:47:56] *** Joins: Xjs (~jannis@user/xjs)
[12:48:01] *** Quits: LiftLeft (~LiftLeft@154.21.23.33) (Ping timeout: 265 seconds)
[12:50:23] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Client limit exceeded: 20000)
[12:50:32] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Client limit exceeded: 20000)
[12:50:47] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Client limit exceeded: 20000)
[12:51:11] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[12:51:11] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Client limit exceeded: 20000)
[12:51:31] *** Quits: worr (~worr@2001:470:69fc:105::78c) (Quit: Client limit exceeded: 20000)
[12:52:17] *** Joins: Crassus (~Crassus@user/crassus)
[12:52:20] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Quit: Client limit exceeded: 20000)
[12:52:22] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 265 seconds)
[12:52:39] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: Client limit exceeded: 20000)
[12:52:47] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (Quit: Client limit exceeded: 20000)
[12:53:06] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 240 seconds)
[12:54:08] *** Quits: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e) (Quit: Client limit exceeded: 20000)
[12:55:06] *** Quits: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b) (Quit: Client limit exceeded: 20000)
[12:55:25] *** Quits: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1) (Quit: Client limit exceeded: 20000)
[12:55:59] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Quit: Client limit exceeded: 20000)
[12:57:59] *** Quits: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019) (Quit: Client limit exceeded: 20000)
[12:57:59] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Quit: Client limit exceeded: 20000)
[12:58:00] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: Client limit exceeded: 20000)
[12:58:38] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[12:59:48] *** Joins: eduardas (~eduardas@93.93.57.5)
[13:01:42] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 258 seconds)
[13:02:36] *** Parts: rk4 (~r@user/rk4) ()
[13:02:46] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[13:03:02] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[13:04:41] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[13:04:41] *** Joins: worr (~worr@2001:470:69fc:105::78c)
[13:04:41] *** Joins: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1)
[13:04:41] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[13:04:41] *** Joins: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b)
[13:04:41] *** Joins: kadoban (~kadoban@user/kadoban)
[13:04:41] *** Joins: mambang[m] (~mambang@user/mambang)
[13:04:41] *** Joins: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e)
[13:04:41] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[13:04:41] *** Joins: psydroid (~psydroid@user/psydroid)
[13:04:41] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[13:04:42] *** Joins: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019)
[13:04:42] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[13:04:55] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[13:04:56] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[13:06:40] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Client Quit)
[13:10:24] *** Quits: kadoban (~kadoban@user/kadoban) (Read error: Connection reset by peer)
[13:10:24] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Remote host closed the connection)
[13:10:25] *** Quits: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019) (Remote host closed the connection)
[13:10:25] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Remote host closed the connection)
[13:10:25] *** Quits: worr (~worr@2001:470:69fc:105::78c) (Remote host closed the connection)
[13:10:25] *** Quits: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1) (Remote host closed the connection)
[13:10:26] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (Remote host closed the connection)
[13:10:26] *** Quits: psydroid (~psydroid@user/psydroid) (Read error: Connection reset by peer)
[13:10:26] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Read error: Connection reset by peer)
[13:10:26] *** Quits: mambang[m] (~mambang@user/mambang) (Read error: Connection reset by peer)
[13:10:26] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Remote host closed the connection)
[13:10:26] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Remote host closed the connection)
[13:10:27] *** Quits: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b) (Remote host closed the connection)
[13:10:27] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Remote host closed the connection)
[13:10:32] *** Quits: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e) (Remote host closed the connection)
[13:16:20] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[13:17:59] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 265 seconds)
[13:19:06] *** Quits: _mrlemke_ (~mrlemke@208.74.105.200) (Ping timeout: 252 seconds)
[13:19:26] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:20:09] *** Joins: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net)
[13:22:44] *** Joins: arinov_ (~arinov@178.240.158.75)
[13:26:18] *** Quits: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net) (Quit: Client closed)
[13:28:16] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 246 seconds)
[13:30:48] *** Joins: frost (~frost@59.71.241.179)
[13:31:20] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[13:34:23] *** Quits: dmathieu (~textual@78.203.212.55) (Quit: Textual IRC Client: www.textualapp.com)
[13:34:25] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:35:43] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[13:36:23] *** Quits: arinov_ (~arinov@178.240.158.75) (Read error: Connection reset by peer)
[13:36:45] *** Joins: arinov_ (~arinov@178.240.158.75)
[13:37:17] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[13:37:17] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[13:37:17] *** Joins: worr (~worr@2001:470:69fc:105::78c)
[13:37:17] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[13:37:17] *** Joins: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1)
[13:37:17] *** Joins: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b)
[13:37:17] *** Joins: kadoban (~kadoban@user/kadoban)
[13:37:17] *** Joins: mambang[m] (~mambang@user/mambang)
[13:37:17] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[13:37:17] *** Joins: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e)
[13:37:17] *** Joins: psydroid (~psydroid@user/psydroid)
[13:37:17] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[13:37:29] *** Joins: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019)
[13:37:31] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[13:37:31] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[13:41:28] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 244 seconds)
[13:44:45] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[13:47:19] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Remote host closed the connection)
[13:47:37] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[13:47:57] *** Joins: gggp (~textual@60.10.194.47)
[13:53:03] *** Joins: Garb0 (~Garb0@user/garb0)
[13:53:06] *** Joins: darkapex (uid360049@user/darkapex)
[13:53:46] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[13:54:43] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[13:54:43] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[13:54:52] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 246 seconds)
[13:56:26] *** Joins: gggp (~textual@60.10.23.171)
[13:58:53] *** Quits: gggp (~textual@60.10.23.171) (Client Quit)
[14:07:01] *** Quits: arinov_ (~arinov@178.240.158.75) (Quit: Konversation terminated!)
[14:07:15] *** Joins: arinov_ (~arinov@178.240.158.75)
[14:07:30] *** Quits: Ohlov3179 (~Ohlov3@dyndsl-095-033-061-095.ewe-ip-backbone.de) (Ping timeout: 252 seconds)
[14:08:41] *** Joins: SincereFox (uid337158@user/sincerefox)
[14:10:01] *** Joins: brooks6 (~bswinnert@containers.neptunenetworks.org)
[14:12:42] *** Quits: brooks (~bswinnert@containers.neptunenetworks.org) (Ping timeout: 240 seconds)
[14:14:51] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[14:16:21] <eyJhb> If I have a type interface{} in a struct, and I set this value to `someint = 1; mystruct.Value = &someint`, then I will have a interface which is a pointer to a integer. However, if I pass this variable to rows.Scan(mystruct.Value), then it will change the value from a int to a string. Is that just a fallback mechanism because the type is "hidden" away?
[14:16:41] *** Quits: thing (~thing@user/thing) (Quit: thing)
[14:17:05] *** Quits: be3uykpy_ (~be3uykpy@141.226.9.247) (Quit: Leaving)
[14:18:37] *** Joins: thing (~thing@user/thing)
[14:18:49] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[14:21:49] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 246 seconds)
[14:24:18] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Read error: Connection reset by peer)
[14:24:45] <A_Dragon> it might be that its guessing, or doesnt expect an int pointer somehow. I'd have to read code to check explicitly
[14:24:57] <A_Dragon> check the source for your rows.Scan method
[14:24:58] <mikoto-chan> what is the `[]` in `type foobar []struct {`?
[14:25:08] <A_Dragon> its a slice of the defined struct
[14:25:17] <mikoto-chan> you can do that? weird
[14:25:20] <A_Dragon> yep!
[14:25:31] <A_Dragon> you can do a slice of anon structs, hell you can have a slice of empty structs if you want
[14:25:41] <A_Dragon> Ive often used a `map[thing]struct{}` as a set
[14:25:44] <mikoto-chan> do you have an example of why this would be useful?
[14:25:52] <A_Dragon> a slice of an anon struct?
[14:26:06] <A_Dragon> ohwait thats not a anon
[14:26:10] <A_Dragon> yes you can hang methods off foobar
[14:26:34] *** Quits: dr0n (~nabromov@94.11.23.235) (Ping timeout: 252 seconds)
[14:26:40] *** Quits: jimmy (~jimmy___@2607:fa49:4b00:7000:41e0:47b8:75c1:9b24) (Ping timeout: 256 seconds)
[14:26:42] <mikoto-chan> alright, now I'm even more confused
[14:26:50] <eyJhb> A_Dragon: I am very lost on why it would do it... But there also come some silliness I guess.... reflect.ValueOf(mystruct.Value).Type() -> *interface{}, reflect.ValueOf(mystruct.Value).Elem().Type() -> interface{}, reflect.ValueOf(mystruct.Value).Elem().Elem().Type() -> int (before scan... afterwards, it is just string)
[14:26:58] <A_Dragon> mikoto-chan: in what way?
[14:27:07] <A_Dragon> and how new to go are you?
[14:27:19] <mikoto-chan> what is the name for that thing? I know that the regular thing is called a struct but when I search for "slice struct" I only find struct containing slices
[14:28:14] <A_Dragon> eyJhb: yeah thats because its first the value of the interface as a pointer (because interface magic), then the interface itself as an obj, then the item in the interface
[14:28:23] <A_Dragon> mikoto-chan: the construct?
[14:28:34] <A_Dragon> its a slice containing zero or more structs
[14:28:45] <A_Dragon> just like you can have a slice containing zero or more ints?
[14:28:50] <A_Dragon> exactly the same as []int
[14:29:02] <A_Dragon> just a different type
[14:29:11] <eyJhb> Guessing that is the issue somewhere in the code...
[14:29:23] <A_Dragon> eyJhb: possibly something didnt expect an actual interface{}
[14:29:35] <A_Dragon> wait are YOU storing an *interface{}?
[14:29:54] <A_Dragon> mikoto-chan: sorry I should clarify, do you know how go slices work etc?
[14:30:46] <eyJhb> A_Dragon: Storing interface{} in a struct, but I am passing *interface{} to scan
[14:31:05] <A_Dragon> eyJhb: probably dont pass an *interface? the contents are already pointers
[14:31:21] <mikoto-chan> A_Dragon: yes, they're dynamic C arrays, please explain the difference between a slice of structs and a normal struct
[14:31:36] <A_Dragon> mikoto-chan: its an array of the defined struct
[14:31:49] <A_Dragon> nothing more than that, just a bit condensed
[14:32:04] *** Joins: arinov (~arinov@178.240.158.75)
[14:32:14] <siXy> It's not an array. [3]Foo is an array, []Foo is a slice.
[14:32:20] <A_Dragon> yes :D
[14:32:20] <eyJhb> `"sql: Scan error on column index 0, name \"id\": destination not a pointer"` :p
[14:32:41] <siXy> mikoto-chan: Please have a run through tour.golang.org - it's far more efficient than us trying to explain all this over IRC
[14:32:46] <A_Dragon> eyJhb: thats. gonna be hairy and I cant tell you how best to go about that other than "if you know its an int at this point type assert it"
[14:32:58] <eyJhb> Yeah... I might be doing something funky...
[14:33:10] <mikoto-chan> siXy: I went over it twice, I'm asking for the use case.
[14:33:31] <A_Dragon> mikoto-chan: to clarify, are you asking for the use case of defining a type like that, or for slices of structs in general?
[14:33:54] <eyJhb> I basically have the struct with type interface{}, that can be anything.. And I want to pass a pointer to that interface, to scan, which should then populate it. The inteface I have in the struct is not a pointer.
[14:34:03] <siXy> mikoto-chan: Sometimes you want more than one of a thing. You might have one Tree, or a slice of multiple []Tree
[14:34:20] <siXy> Difficult to make a forest with only one tree.
[14:34:31] <A_Dragon> eyJhb: yeah thats gonna be hairy at best to get right I think
[14:34:39] <siXy> eyJhb: The solution is "don't do that", really.
[14:34:47] <mikoto-chan> A_Dragon: I suppose they used it because encoding/json doesn't accept normal structs.
[14:34:56] <A_Dragon> mikoto-chan: it does
[14:34:56] <eyJhb> siXy: Trying not to do that, but it gets tricky
[14:35:19] <eyJhb> *not saying this isn't as it clearly doesn't work
[14:35:22] <mikoto-chan> A_Dragon: let's see if I can rewrite this properly without a slice of structs
[14:35:30] <A_Dragon> mikoto-chan: wanna share your code for me?
[14:36:00] *** Quits: arinov_ (~arinov@178.240.158.75) (Ping timeout: 258 seconds)
[14:36:07] *** Quits: sus (thelounge@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[14:36:08] <siXy> mikoto-chan: A slice is one of the things you'll use most often. It's very normal to want more than one of a thing. E.g. a single byte on its own is rarely useful, but a slice of []byte is perhaps the most common data type in the stdlib.
[14:36:32] *** Joins: sus (thelounge@user/zeromomentum)
[14:37:03] <A_Dragon> siXy: I THINK they're asking specifically about the definition of a type with an anon (for lack of a better word) struct attached to it rather than one type decl for the struct and one for the slice of that struct
[14:37:06] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 240 seconds)
[14:37:11] <eyJhb> Regarding the tree reference siXy, this is interesting - https://en.wikipedia.org/wiki/Pando_(tree) :)
[14:37:16] <siXy> eyJhb: Generally if you find yourself typing interface{} into your code you are probably holding it wrong, and that goes 100x in this case.
[14:37:50] <A_Dragon> especially if you're then using a pointer to an interface{}
[14:37:59] <siXy> If you know you're reading an int out of your database then you should store it as an int, not as interface{}
[14:38:42] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Quit: Leaving.)
[14:39:03] <A_Dragon> if you must store it in an interface{} like that (for someone elses API for instance), declare an int , pass it to your code, set the value of the interface on the struct afterwards
[14:39:11] <eyJhb> siXy: Doing a ORM without interface{} would be fairly hard :p
[14:39:31] <A_Dragon> not really, do it the other way around
[14:39:39] <A_Dragon> use an unmarshaler style interface like json has
[14:39:56] <A_Dragon> structs that are to be stored can deal with packing and unpacking themselves
[14:40:40] <eyJhb> Hmm... You gave me an idea...
[14:41:08] <A_Dragon> AND doing it that way, your API users have far more control over how they're stored
[14:41:19] <A_Dragon> add an `error` return and you can really make things nice for your users
[14:41:22] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[14:41:30] <eyJhb> Really didn't want to do that, but the way the code is currently written (a lot of rewrite etc.), I could actually do that. At the start I couldn't really ... I guess :)
[14:42:03] <eyJhb> It is a little internal ORM, not a package I would release. That would be mean
[14:42:05] <A_Dragon> that or add support to your row for that, read json code for how they do that (its lots of recursive reflection, which is slow)
[14:42:53] <siXy> When I come to power I will pass a law requiring developers to learn how to write SQL before they're allowed to touch any other language.
[14:43:08] <A_Dragon> lol
[14:43:11] <b0nn> mikoto-chan: a slice of anonymous structs is painful to use []struct{a int}{{5},{6},{7}} is one way to use it, another is f:= []struct{A int}; f = append(f, struct{A int}{5});
[14:43:16] <A_Dragon> I still cant SQL but I dont really use ORMs either
[14:43:24] <A_Dragon> the most DBish stuff I do currently is bbolt abuse
[14:43:30] <siXy> This obsession with ORMs is a plague upon modern software.
[14:43:43] <eyJhb> siXy: I can write SQL :p But at this point I don't want to anymore. And it's not really a ORM as such
[14:43:56] <eyJhb> But it was the easiest way to let you know of the idea I wanted to do :)
[14:43:57] <A_Dragon> it sounds more like a marshal/unmarshal lib to a DB
[14:44:03] <eyJhb> ^
[14:44:21] <A_Dragon> in which case, for SIMPLE structs you could easily do an interface{}
[14:44:26] <eyJhb> Basically...
[14:44:38] <A_Dragon> but understand the implications of that
[14:44:47] <A_Dragon> especially of how SLOW reflection is
[14:44:59] <eyJhb> But I do agree siXy  about the ORM thing.
[14:45:12] <eyJhb> Atm. I just use squirrel, to not write too much SQL :)
[14:45:22] <b0nn> mikoto-chan: essentially whenever you want to do something with the slice, you need to redefine the anonymous struct being used with it (except for reads)
[14:45:54] <A_Dragon> which is what makes those decls a pain
[14:46:05] <A_Dragon> I far prefer two type decls if you really want to hang methods off a slice
[14:46:47] <b0nn> presume you mean "declrations" when you say "decls"?
[14:46:58] <A_Dragon> yes Im being lazy
[14:47:05] <eyJhb> But I would much rather deprecate SQL, and do something new. What that woudl be? Not sure.. But just something something persistent storage in the programming language.. something something... Having SQL which is somewhat a DSL is just.. Eh..
[14:47:24] <eyJhb> But that's a discussion for another day, once siXy comes into power I might be hanged by the neck
[14:49:13] *** Joins: aryel (~aryel@178.132.170.105)
[14:49:59] *** Quits: aryel (~aryel@178.132.170.105) (Client Quit)
[14:50:13] <eyJhb> Thanks for the input, I will go for a walk and reconsider my life decisions + the code
[14:50:17] *** Joins: susam (~susam@user/susam)
[14:50:39] *** Joins: bravosix (~bravosix@161.167.234.59)
[14:50:41] *** Joins: unabomber (~unabomber@161.167.234.35)
[14:51:13] *** Joins: shreyasi (~shreyasi@150.107.10.115)
[14:51:31] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[14:51:53] *** Joins: DarthVader (~DarthVade@161.167.234.46)
[14:52:00] *** Quits: DarthVader (~DarthVade@161.167.234.46) (Client Quit)
[14:52:10] *** Joins: Muskan_Verma (~Muskan_Ve@122.161.65.4)
[14:52:36] *** Joins: DarthVader (~DarthVade@161.167.234.46)
[14:52:46] <A_Dragon> Enjoy walk
[14:53:13] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[14:54:03] *** Joins: amit (~amit@161.167.234.36)
[14:54:15] *** Joins: Ganaraja (~Ganaraja@185.221.69.47)
[14:54:36] *** Joins: Guest80 (~Guest80@161.170.193.85)
[14:57:03] <mikoto-chan> b0nn: https://blog.logrocket.com/making-http-requests-in-go/
[14:57:05] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 258 seconds)
[14:57:29] <mikoto-chan> I was just wondering why they would use a slice in this program when they're indexing only the first element of the slice ...
[14:57:47] <mikoto-chan> scroll down to find all the code, I'm talking about the crypto program ...
[14:58:32] *** Joins: shreyasi65 (~shreyasi@150.107.10.115)
[14:59:22] *** Quits: shreyasi (~shreyasi@150.107.10.115) (Ping timeout: 246 seconds)
[15:00:13] *** Joins: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de)
[15:02:02] <A_Dragon> mikoto-chan: thats just... weird.
[15:02:15] <A_Dragon> its possible they want to use it as a queue or something
[15:02:36] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[15:04:17] <siXy> mikoto-chan: It's cryptocurrency code, so low-quality is expected. But in this case they're doing it this way to make it very very marginally easier to unmarshal the JSON response they're expecting into a Cryptoresponse
[15:04:24] <b0nn> um type Cryptoresponse []struct  isn't an anonymous struct
[15:04:43] <b0nn> the definition of the struct falls over multiple lines is all
[15:05:15] *** Quits: DarthVader (~DarthVade@161.167.234.46) (Quit: Client closed)
[15:05:45] <b0nn> Each of the defined fields has a type, and an annotation for the json (un)marshalling
[15:06:21] <A_Dragon> oh yes that'll be it, its unmarshalling stuff but only I guess ever expects one entry for its one method
[15:06:24] <A_Dragon> oh well
[15:06:37] <siXy> b0nn: It is an anonymous struct - there's no named type for what a single instance of the Cryptoresponse slice is.
[15:07:08] <b0nn> Oh I suppose so
[15:07:14] <b0nn> it's not the end of the world
[15:07:15] <siXy> But you shouldn't write code this way - it's a bad example of how to write datastructures. But, like I said, cryptocurrency BS, so not unexpected.
[15:09:28] <A_Dragon> well not all cryptocurrency stuff is bad code :P
[15:13:32] <b0nn> The ticker that it's fetching data from is a bit hard to determine what the values for crypto and fiat might be (I tried btc/BTC and usd/USD)
[15:14:02] <b0nn> https://api.nomics.com/v1/currencies/ticker?key=3990ec554a414b59dd85d29b2286dd85 gives you *all* of them
[15:14:16] <b0nn> I presume that's why they went with the slice
[15:14:31] <A_Dragon> I wonder if a [1] would work better
[15:14:36] *** Quits: amit (~amit@161.167.234.36) (Quit: Client closed)
[15:14:39] <A_Dragon> no idea how json behaves with those
[15:14:41] <b0nn> It's possible more than 1 object will come back
[15:14:55] <A_Dragon> yeah but if you want the first only dropping the rest is more efficient
[15:14:57] <siXy> What would have been better is to define the singular struct, and unmarshal into a slice of it.
[15:15:05] <A_Dragon> ^
[15:15:08] <A_Dragon> easier to work with
[15:15:24] <siXy> But that would have been a whole extra line of code, far too much for these sort of people.
[15:16:08] <b0nn> mikoto-chan: so, this is just an exchange monitor that you want
[15:16:09] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[15:16:22] <b0nn> I swear I saw some better code on reddit a little whiles back
[15:16:50] <A_Dragon> honestly the way that anon structs need redefinition constantly puts me off using them ever
[15:16:52] *** Quits: shreyasi65 (~shreyasi@150.107.10.115) (Ping timeout: 246 seconds)
[15:16:57] <A_Dragon> I'd rather used a scoped type declaration
[15:17:23] <b0nn> I mean, not that I follow blockchain very closely, I don't think it has a "legitimate" use beyond speculation and foreign exchange (but that's because FX is expensive with banks)
[15:17:32] <A_Dragon> it does
[15:17:59] <A_Dragon> anywhere a distributed database is wanted, a blockchain can provide help to ensure correctness
[15:18:15] <A_Dragon> its basically a giant tree, just with some extra stuff on top
[15:18:18] *** Quits: bravosix (~bravosix@161.167.234.59) (Quit: Client closed)
[15:18:24] <A_Dragon> one COULD make the argument that git is a blockchain
[15:18:33] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 258 seconds)
[15:18:37] <b0nn> if you want a distributed database, or, more correctly, a distributed ledger/journal, then make one
[15:18:40] <A_Dragon> each block linked to its parent and children by a hash
[15:18:40] <ikke> s/blockchain/merkle tree
[15:18:44] <A_Dragon> ikke: that
[15:18:49] *** Quits: arinov (~arinov@178.240.158.75) (Quit: Konversation terminated!)
[15:19:04] *** Joins: arinov (~arinov@178.240.158.75)
[15:19:28] <b0nn> git isn't, on the grounds that copies are synched, and can over write one another without objection from other peers
[15:19:50] <ikke> You can disallow non-ff pushes from others
[15:19:55] <A_Dragon> ^
[15:19:56] <ikke> but it's not the default
[15:20:00] <A_Dragon> though its not a perfect example
[15:20:16] <A_Dragon> but a blockchain doesnt necessitate correctness
[15:20:18] *** Joins: shreyasi (~shreyasi@150.107.10.115)
[15:20:25] <A_Dragon> just that the crypto ones use it for that
[15:20:36] <b0nn> I've used hyper-ledger in anger, and it was the most boring project I have ever had the misfortune of dealing with
[15:20:41] <A_Dragon> lol
[15:20:44] <ikke> block chain is based around decentralized consensus
[15:20:55] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[15:21:29] <A_Dragon> you could use one for publications, as an example, any publication stored on the chain cant be un-stored because (one assumes) there are many users all listening and storing their own copy
[15:22:14] <ikke> But the incentives are missing
[15:22:19] <A_Dragon> mhmm
[15:22:53] <A_Dragon> but thats another list of issues
[15:22:57] <b0nn> wrt you cannot unshare on the chain - that's almost the ethos of the internet, once it's been uploaded there are copies somewhere
[15:23:02] <A_Dragon> blockchains themselves dont require the insentive
[15:23:05] <A_Dragon> and yep!
[15:23:08] <ikke> DHT, ipfs
[15:24:44] *** Joins: acagastya (~acagastya@wikinews/acagastya)
[15:24:48] *** Quits: internut_ (~internut@2601:280:4e00:16f0:c4d6:6dfe:b47c:bd4f) (Ping timeout: 268 seconds)
[15:25:05] <mikoto-chan> siXy: I was actually just trying to understand the net/http package ;-; the official documentation doesn't provide that much real-world examples
[15:25:30] <siXy> mikoto-chan: can you point to which bit you were struggling to understand, and we can try to help explain
[15:25:55] <A_Dragon> at this point we dont know what part you're looking for a use for, the definition, the type in general, and so on
[15:26:15] <mikoto-chan> siXy: I am just trying to understand the entire thing, any books you can recommend? "Let's Go" really just scratches the surface and almost feels like a copy/paste tutorial
[15:26:25] *** Joins: Garb0 (~Garb0@user/garb0)
[15:26:26] <A_Dragon> clarify what thing means
[15:27:00] <mikoto-chan> I want to build professional web applications in Go
[15:27:02] <mikoto-chan> is that clear?
[15:27:06] <A_Dragon> thats clear
[15:27:19] <siXy> mikoto-chan: Have a read through https://golang.org/doc/articles/wiki/
[15:27:21] <b0nn> https://lets-go.alexedwards.net/
[15:27:44] <b0nn> alex has a nice book, and his blog/site is pretty full of help too
[15:27:47] <mikoto-chan> b0nn: I literally just mentioned why I didn't like that book ._.
[15:28:07] <acagastya> Hi, I have this code <https://dpaste.com/2ZX3LVKKL> and as it turns out, "foo bar" gets printed -- but the irc call, which seems to be asynchronous, does not happen as non-zero return takes place.  How do I ensure the for loop finishes before exiting?
[15:28:15] <mikoto-chan> siXy: cool, thanks.
[15:28:19] <b0nn> when you say literally, you know that you ... didn't
[15:28:23] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[15:28:36] <b0nn> oh, let's go, yes you did
[15:29:00] <siXy> acagastya: Your pastebin is broken for me, can you try play.golang.org (hit share) please?
[15:29:10] <A_Dragon> and paste the whole code please
[15:29:14] <A_Dragon> not just a single func
[15:29:26] <A_Dragon> OH I see
[15:29:29] <acagastya> Well, that is the func that is relevant.
[15:29:50] <acagastya> https://play.golang.org/p/lpUVPQGRIvn
[15:30:00] <A_Dragon> yes the privmsg will be async, best way to wait would be to (for this) sleep a bit or send a QUIT right after and wait on the shutdown from IRCClient
[15:30:04] <A_Dragon> if its a quick single message send
[15:30:15] <A_Dragon> if thats the lib I think it is, anyway
[15:30:41] <acagastya> Well, I don't know any go-to IRC libs for golang, this one is, let me see...
[15:30:49] <acagastya> github.com/thoj/go-ircevent
[15:30:53] <A_Dragon> yep thats the one
[15:30:54] <b0nn> yeah, waitgroups would be lovely if that ircclient is async
[15:31:08] <A_Dragon> it can sit and wait on its own QUIT so probably do that
[15:31:11] <A_Dragon> if you intend exiting
[15:31:28] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[15:31:28] <siXy> This, by the way, is a great example of why *good* library writers don't make things magically async like that.
[15:31:30] <A_Dragon> otherwise if you really just want to send ONE message you can probably roll your own IRC enough to do that
[15:31:46] <acagastya> I want a non-zero exit, because that will (on where this binary is supposed to run) cause the process to restart.
[15:31:50] <A_Dragon> siXy: :D IIRC that lib does a channel for all its sends
[15:31:57] <A_Dragon> acagastya: this on linux?
[15:32:01] <A_Dragon> if so execve yourself
[15:32:22] <A_Dragon> faster than waiting on external stuff to restart
[15:33:10] <A_Dragon> but yeah you either will want to roll your own IRC for that and just stop once you get an ERROR from the server, or use the waitgroup thats available on that struct, which (IIRC) will stop when it exits (but then you MUST send a QUIT command as well)
[15:33:43] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[15:34:11] <siXy> acagastya: That lib looks pretty bad, honestly. There's a lot of IRC libs out there - suggest choosing one that is a lot less magic.
[15:35:00] <A_Dragon> actually wait one sec
[15:35:07] <A_Dragon> Im almost SURE that while that uses a channel it does block
[15:35:26] <A_Dragon> acagastya: you're not seeing the message show up on IRC, yes?
[15:35:30] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 240 seconds)
[15:35:45] <nevivurn> A_Dragon: the channel is buffered, no?
[15:35:48] <acagastya> siXy -- I tried looking and I found some blogs which do it via tcp connection, and that seemed to be way to hardcore to deal with.  Any sane library suggestions would be appreciated.
[15:36:00] <A_Dragon> it is a buffered channel yes, oh well
[15:36:03] <acagastya> A_Dragon: no, I am not seeing the messages.
[15:36:08] <A_Dragon> there is a waitgroup on that that you can use
[15:36:18] *** Quits: spirgel_ (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 240 seconds)
[15:36:24] <acagastya> Wait, you mean, fot this go code, right?  If so, yes.
[15:36:51] <A_Dragon> acagastya: clarify :D
[15:37:18] <nevivurn> oh god why does Connection embed sync.WaitGroup?
[15:37:28] <A_Dragon> yeah
[15:37:32] <A_Dragon> its not, amazing
[15:37:39] <A_Dragon> theres a fork of this that is a bit more sane
[15:37:47] <A_Dragon> (I was using this lib for a while)
[15:37:47] <acagastya> Did you mean to ask the irc messages do not show up for me on #go-nuts?  Xor did you mean the func's message is not being sent to the server?
[15:37:57] <A_Dragon> acagastya: latter
[15:38:11] <siXy> I'd probably use something like https://pkg.go.dev/gopkg.in/sorcix/irc.v2
[15:39:16] <acagastya> A_Dragon: yes, the messages are not showing up -- fmt.Println works, but not the irc messages.
[15:39:28] <A_Dragon> acagastya: exiting too fast
[15:39:39] <A_Dragon> siXy: does that pass a wall of tests? :D
[15:40:03] <A_Dragon> https://github.com/ergochat/irc-go this one is my go to for line abstraction
[15:40:14] <nevivurn> sorcix/irc is pretty good
[15:40:18] <A_Dragon> but Im biased I know doaks
[15:40:58] *** Joins: src (~src@user/src)
[15:41:07] <A_Dragon> either way yeah wrappers around the streams themselves are nice, for when you want to build everything by hand
[15:41:56] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 272 seconds)
[15:42:04] *** Quits: shreyasi (~shreyasi@150.107.10.115) (Ping timeout: 246 seconds)
[15:43:06] <A_Dragon> but that doesnt change that you can cause this issue without this
[15:43:12] <A_Dragon> you can close sockets too fast for writes
[15:44:54] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[15:44:58] <acagastya> Maybe I could do a return and then close?  I am not too knowledgable about async functions, but if it is like how I think it is, this could work:
[15:45:06] *** Quits: arinov (~arinov@178.240.158.75) (Ping timeout: 272 seconds)
[15:45:17] <A_Dragon> nah you need to wait
[15:45:22] <A_Dragon> return would be too fast too,
[15:45:34] <A_Dragon> there are ways to force it to go the other way but using those is usually a code smell
[15:45:52] <A_Dragon> rather just use .Quit() after your loop and then conn.Wait() after that
[15:46:40] <acagastya> https://play.golang.org/p/qG7W2uDyxeo -- that won't work?  No way to wait for the async code to finish?
[15:46:45] <A_Dragon> (if you dont switch libs, etc)
[15:47:03] <nevivurn> acagastya: how would you implement foo() ?
[15:47:08] <A_Dragon> ^
[15:47:17] <nevivurn> to make it return whether "OkayToClose"
[15:47:21] <A_Dragon> if its just a straight return in foo it'll still be way fast
[15:47:37] <acagastya> Instead of os.Exit(1) in foo, just `return True`.
[15:47:37] <A_Dragon> use the WaitGroup on the struct, its what its there fore
[15:47:48] <nevivurn> acagastya: and how does that change anything?
[15:47:49] <A_Dragon> nevivurn: you missed that it also embeds a Mutex :P
[15:47:53] *** Quits: Ganaraja (~Ganaraja@185.221.69.47) (Quit: Client closed)
[15:47:58] <nevivurn> Oh yeah, bad all around
[15:48:00] *** Quits: unabomber (~unabomber@161.167.234.35) (Quit: Client closed)
[15:48:07] <A_Dragon> eh I dont mind embedded mutexes
[15:48:18] <A_Dragon> assuming internal methods do use them too
[15:48:24] <acagastya> I would assume the code next line won't be processed until the current function does not finish executing.
[15:48:24] <A_Dragon> easier to accidentally NOT use them though
[15:48:29] <nevivurn> now library users need to know exactly when the library locks that mutex in order to use ir properly
[15:48:39] <A_Dragon> acagastya: it returns instantly
[15:48:45] <A_Dragon> it doesnt wait for async code
[15:48:55] *** Joins: shreyasi (~shreyasi@150.107.10.115)
[15:49:00] <A_Dragon> you need something explicitly waiting (like a WaitGroup or a done channel)
[15:49:09] <A_Dragon> nevivurn: point
[15:50:01] <nevivurn> A_Dragon: it makes the lock very easy to misuse (in a way that fails at runtime) and tightly coupled with internal library-side implementation details
[15:50:13] <A_Dragon> yeah
[15:50:34] <nevivurn> You would at least need to extensively document how you expect callers to use the Mutex. See sync.Cond
[15:50:43] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[15:51:01] *** mrig is now known as bob
[15:51:14] *** bob is now known as mrig
[15:52:16] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[15:52:55] <A_Dragon> though I guess a good answer to that entire mess is "$x is not goroutine safe. if you want it to be, use a mutex to guard your usage of it"
[15:53:40] *** Joins: goldfish (~goldfish@user/goldfish)
[15:54:52] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[16:01:50] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 265 seconds)
[16:03:17] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[16:05:51] *** Quits: shreyasi (~shreyasi@150.107.10.115) (Quit: Client closed)
[16:06:20] *** Joins: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com)
[16:07:16] *** Quits: Muskan_Verma (~Muskan_Ve@122.161.65.4) (Ping timeout: 246 seconds)
[16:08:02] <acagastya> Thanks for the help, folks!
[16:08:24] *** Quits: Guest80 (~Guest80@161.170.193.85) (Quit: Client closed)
[16:09:28] <eyJhb> A_Dragon: I can not entirely use the Scan/Value functions attached to my structs, as it is more of a "way" of packing the parent struct, and not the children. So I stil need to homebrew something, as I don't want to change all the substructs (which just needs to be... JSON or something, sadly). But I think it is possible, and with much more ease.
[16:09:42] *** Parts: susam (~susam@user/susam) ()
[16:10:21] <A_Dragon> eyJhb: so long as they're simple values you can do the reflect dance, its just hard to get right, as said
[16:10:31] <A_Dragon> s/values/structs
[16:11:48] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 252 seconds)
[16:12:15] *** Joins: Garb00 (~Garb0@user/garb0)
[16:12:29] *** Quits: Garb0 (~Garb0@user/garb0) (Read error: Connection reset by peer)
[16:13:04] <eyJhb> Ehh... _somewhat_ simple.. I have some time.Time, uuid.UUID, and then structs as well. But all structs just needs to be marshalled :)
[16:13:16] <eyJhb> My issue might be, than I am trying to make this way more generic than I should.
[16:13:34] <eyJhb> Where it might be 100% okay, to not make it work for every struct possible.
[16:14:42] *** Joins: bravosix (~bravosix@161.167.234.59)
[16:15:16] <eyJhb> I might actually be able to use GORM (I am going somewhat full-circle here...)
[16:19:16] <A_Dragon> all of those can be recursed down into
[16:19:21] *** Quits: bravosix (~bravosix@161.167.234.59) (Client Quit)
[16:19:48] <A_Dragon> what I would suggest is allow for an unmarshal func (and use an interface), use THAT if someone offers it on their value, otherwise do what json does, and go downwards
[16:19:52] <eyJhb> OF course they can... buut... storing maps/slices and then giving them parents, etc.
[16:19:57] <eyJhb> I can show you some nice structs that I use.
[16:20:02] <A_Dragon> ¯\_(ツ)_/¯
[16:20:06] <A_Dragon> you seem to have it in hand
[16:21:45] <eyJhb> Like, they're not complicated. There are just a TON - https://termbin.com/8rbl
[16:23:11] <A_Dragon> oh no that you can quite easily do some reflecty goodness to
[16:23:37] <A_Dragon> for each field if $primitive store primitive else recurse for each value of storage else for the struct
[16:23:51] <A_Dragon> check out exactly how JSON does it
[16:24:00] <A_Dragon> you could even support tags for the column names
[16:24:45] <eyJhb> This is how I defined models in the "new" way - https://termbin.com/ajdc
[16:25:02] <eyJhb> It was quite nice, but also just learning about the reflect package is very nice.
[16:25:18] <A_Dragon> just remember
[16:25:21] <A_Dragon> slow
[16:25:34] <A_Dragon> I did some AoC stuff that used a reflecty set class
[16:25:43] <A_Dragon> it was slow enough I switched to code gen for hot paths
[16:26:00] <eyJhb> Slow and steady! - But yeah, I would have guessed slow.. But unsure HOW slow. But didn't want to optimize the code before it was needed
[16:26:26] <eyJhb> Advent of code?
[16:26:31] *** Joins: Eddward (~Eddward@207.138.204.132)
[16:26:40] <eyJhb> *quite sure that's not the AoC you meant
[16:27:10] <A_Dragon> yeah :D
[16:27:29] <A_Dragon> eyJhb: if you're not doing it a few thousand times a second you wont notice
[16:28:14] <eyJhb> Well, in the future it might have done that. But as af now, no :p Not sure how optimized GORM is (thinking not much). But if it can save me writing a bunch of code, then I am OK with it. Can always change that layer in the future.
[16:28:23] <eyJhb> I have a abstraction layer between the two anyways...
[16:28:30] <A_Dragon> ¯\_(ツ)_/¯ either or
[16:28:41] <A_Dragon> both have their uses
[16:34:22] *** Joins: andlabs_ (~andlabs@71.190.119.164)
[16:34:30] *** Quits: theoceaniscool (~theoceani@93.177.121.14) (Ping timeout: 272 seconds)
[16:35:30] *** Joins: mdel1 (~mdel@user/mdel)
[16:35:46] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Ping timeout: 272 seconds)
[16:35:59] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 258 seconds)
[16:36:17] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[16:37:02] *** Quits: mdel (~mdel@user/mdel) (Ping timeout: 272 seconds)
[16:37:02] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 272 seconds)
[16:37:02] *** mdel1 is now known as mdel
[16:37:40] *** Quits: andlabs (~andlabs@71.190.119.164) (Ping timeout: 272 seconds)
[16:38:32] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[16:44:04] *** Quits: Garb00 (~Garb0@user/garb0) (Ping timeout: 252 seconds)
[16:44:58] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) ()
[16:46:54] *** Joins: Garb00 (~Garb0@user/garb0)
[16:47:48] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[16:51:15] *** Joins: theoceaniscool (~theoceani@93.177.121.14)
[16:56:54] *** Quits: Garb00 (~Garb0@user/garb0) (Ping timeout: 252 seconds)
[16:57:18] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 272 seconds)
[17:00:39] *** Joins: mrig (~mrig@user/mrig)
[17:04:33] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[17:06:48] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[17:12:32] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:14:13] *** Quits: l2dy (~l2dy@user/l2dy) ()
[17:14:30] *** Joins: l2dy (~l2dy@user/l2dy)
[17:17:26] *** Joins: kdsch (~kdsch@86.106.121.222)
[17:25:16] *** Joins: arinov (~arinov@85.104.57.247)
[17:35:11] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:35:34] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[17:39:42] *** Joins: LiftLeft (~LiftLeft@154.21.28.20)
[17:42:37] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[17:43:49] *** Joins: Garb0 (~Garb0@user/garb0)
[17:45:17] *** Joins: NeoCron (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de)
[17:45:26] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[17:46:15] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Read error: Connection reset by peer)
[17:46:33] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:49:44] *** Joins: dec[m] (~decayxio@2001:470:69fc:105::3204)
[17:49:59] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[17:53:02] *** Quits: arinov (~arinov@85.104.57.247) (Ping timeout: 272 seconds)
[17:54:55] *** gggpkm_ is now known as gggpkm
[17:57:12] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[17:59:46] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[18:02:07] <eyJhb> A_Dragon: the reflect is slowly creeping up with each thing I want to do...
[18:02:50] *** Joins: fbrx (~fbrx@user/fbrx)
[18:02:52] <A_Dragon> generally if thats happening you're doing it wrong
[18:03:04] <A_Dragon> but you're also working on something inherently generic
[18:03:10] <A_Dragon> what space now?
[18:08:07] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[18:08:55] *** Joins: Torr (~Torr@user/torr)
[18:10:08] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[18:11:07] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[18:12:47] *** Quits: dec[m] (~decayxio@2001:470:69fc:105::3204) (Quit: Reconnecting)
[18:13:56] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[18:21:14] *** Joins: Eddward (~Eddward@207.138.204.132)
[18:22:15] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:23:52] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[18:25:52] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[18:27:02] *** Joins: GErpTMVWTKVu (~GErpTMVWT@37.73.63.116)
[18:27:02] *** Quits: GErpTMVWTKVu (~GErpTMVWT@37.73.63.116) (Client Quit)
[18:28:02] *** Joins: arcatech (~arcatech@user/arcatech)
[18:35:12] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[18:37:05] *** Quits: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:38:00] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[18:38:33] *** Quits: andlabs_ (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:41:46] *** Joins: andlabs (~andlabs@2600:1017:b42b:46fc:79d8:6935:e0cb:e819)
[18:43:07] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[18:44:20] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[18:44:28] *** Quits: Eddward (~Eddward@207.138.204.132) (Quit: Leaving)
[18:44:41] *** Joins: Eddward (~Eddward@207.138.204.132)
[18:45:02] *** Quits: kdsch (~kdsch@86.106.121.222) (Quit: WeeChat 2.8)
[18:45:15] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[18:48:08] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[18:50:37] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Quit: Leaving.)
[18:50:40] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[18:50:55] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[18:52:18] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[18:54:13] *** Joins: shka (~herr@109.231.62.239)
[18:58:21] *** Joins: sysh (~sysh@212.237.182.120)
[18:59:16] *** Quits: andlabs (~andlabs@2600:1017:b42b:46fc:79d8:6935:e0cb:e819) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:00:02] *** Joins: dec[m] (~decayxio@2001:470:69fc:105::3204)
[19:03:28] *** dec[m] is now known as dec
[19:05:34] *** Quits: icy (~icy@user/icy) (Quit: ZNC 1.9.x-nightly-20210409-e0ffdddd - https://znc.in)
[19:08:16] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:09:25] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[19:10:00] *** Joins: andlabs (~andlabs@209.sub-174-244-148.myvzw.com)
[19:11:34] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[19:15:12] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[19:17:48] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[19:18:04] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[19:19:19] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Remote host closed the connection)
[19:19:40] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[19:23:22] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[19:23:45] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-55.prtc.net)
[19:25:30] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[19:25:37] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[19:27:22] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[19:27:57] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[19:28:22] *** Quits: dan- (~d@ircdocs/dan-) (Ping timeout: 250 seconds)
[19:28:40] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[19:30:04] *** Joins: dan- (~d@ircdocs/dan-)
[19:34:17] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-55.prtc.net) (Quit: Client closed)
[19:35:28] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[19:42:04] *** Quits: yoonkn` (~user@175.197.208.79) (Remote host closed the connection)
[19:46:55] *** Joins: Garb0 (~Garb0@user/garb0)
[19:57:52] *** Quits: eduardas (~eduardas@93.93.57.5) (Quit: Konversation terminated!)
[19:59:09] *** Joins: milosz (~milosz@user/milosz)
[20:04:08] *** Quits: andlabs (~andlabs@209.sub-174-244-148.myvzw.com) (Ping timeout: 258 seconds)
[20:09:24] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[20:12:23] <LambdaComplex> how painful is it to write a parser from scratch in Go?
[20:12:32] *** Quits: treethought (treethou@138.68.49.251) (Remote host closed the connection)
[20:12:40] <A_Dragon> parser for what?
[20:13:34] *** Joins: treethought (treethou@138.68.49.251)
[20:13:35] <siXy> LambdaComplex: questions so vague as to be totally unanswerable tend to invite silly answers
[20:13:50] <LambdaComplex> sorry for asking. nevermind.
[20:13:57] <A_Dragon> not the intent in either response
[20:14:05] <A_Dragon> we are asking for clarification to better help you
[20:15:43] <siXy> LambdaComplex: Try to remember that we can't read your mind - we have no idea if you want to parse CSV (easy) or ASN.1 (no)
[20:17:41] <LambdaComplex> ...doesn't the stdlib have an ASN.1 parser already?
[20:18:03] *** Joins: _rubik (~rubik@user/rubik/x-6853868)
[20:18:04] <LambdaComplex> (and a CSV parser, for that matter?)
[20:18:21] <siXy> Yes. To both. I feel like you're rather missing the point, though.
[20:18:34] <A_Dragon> it has a CSV parser, but the point was an ASN.1 parser is very complex
[20:18:50] <A_Dragon> ie, painful
[20:19:00] <A_Dragon> so, what is it you want to parse?
[20:19:21] *** Quits: iauc (~iauc@ti0061a400-1478.bb.online.no) (Quit: Client closed)
[20:19:36] <LambdaComplex> a configuration file in the vein of haproxy/nginx config files
[20:20:01] <A_Dragon> that, not so hard, but if you just want to extract something particular, a regex or nonfull parser may be easier
[20:22:01] <LambdaComplex> nah, i'm wanting to write a parser just for the experience
[20:22:06] <LambdaComplex> (i've been wanting to for a while)
[20:24:28] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Quit: Leaving.)
[20:24:52] <siXy> LambdaComplex: https://talks.golang.org/2011/lex.slide might be interesting. Kinda old now, but still worth going through
[20:25:51] <LambdaComplex> can't hurt, i imagine
[20:26:13] <LambdaComplex> i have skimmed https://blog.gopheracademy.com/advent-2014/parsers-lexers/
[20:27:00] <LambdaComplex> any opinions on this? https://interpreterbook.com/
[20:28:28] *** Joins: koo555 (~koo6@89-24-13-235.customers.tmcz.cz)
[20:29:15] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Read error: Connection reset by peer)
[20:29:27] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[20:30:10] <nevivurn> Heard very good things about that book, though I haven't read it myself.
[20:30:44] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 272 seconds)
[20:33:03] *** Joins: Doraemon (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de)
[20:35:53] <sztanpet> theres also http://www.craftinginterpreters.com/ which is oss and all, if the point is cheap
[20:35:55] *** Quits: NeoCron (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de) (Ping timeout: 268 seconds)
[20:36:46] <sztanpet> albeit not go related at all
[20:38:24] <seebs> i would consider Go a pretty easy language to write a parser in, although possibly less friendly to some aspects of this than something like Ruby might be.
[20:39:08] *** Joins: Kane (~Kane@home.yarg.fr)
[20:45:17] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:46:22] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[20:47:01] *** Quits: theoceaniscool (~theoceani@93.177.121.14) (Ping timeout: 268 seconds)
[20:48:19] *** Joins: oxum (~oxum@136.185.148.86)
[20:49:18] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[20:49:51] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Read error: Connection reset by peer)
[20:50:19] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[20:51:57] *** Quits: oxum (~oxum@136.185.148.86) (Remote host closed the connection)
[20:53:06] <A_Dragon> most complex parser I ever did was for a string formatting library I wrote
[20:54:04] *** Joins: oxum (~oxum@136.185.148.86)
[20:56:31] *** Quits: fbrx (~fbrx@user/fbrx) (Ping timeout: 256 seconds)
[20:58:54] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 252 seconds)
[21:02:42] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:04:02] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[21:05:32] *** Joins: oxum (~oxum@136.185.148.86)
[21:08:04] *** Joins: daveed (~ride@user/daveed)
[21:09:26] <LambdaComplex> well this is all fairly promising
[21:09:30] * LambdaComplex will look into this stuff more
[21:10:55] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[21:11:41] *** Quits: Crassus (~Crassus@user/crassus) (Ping timeout: 268 seconds)
[21:11:58] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:14:13] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[21:15:39] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - http://znc.in)
[21:17:58] *** Quits: oxum (~oxum@136.185.148.86) (Remote host closed the connection)
[21:19:53] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Quit: WeeChat 2.8)
[21:20:10] *** Joins: kiril (~kiril@85.91.153.163)
[21:24:45] *** Joins: printf (~printf@user/printf)
[21:28:46] *** Quits: Doraemon (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de) (Remote host closed the connection)
[21:32:13] *** Joins: lionkking (~lionkking@184.22.209.151)
[21:35:49] *** Quits: Binkers (~binkers@user/binkers) (Quit: ZNC - https://znc.in)
[21:36:44] *** Joins: binkers (~binkers@user/binkers)
[21:36:44] <ikke> fyi, lionkking here is a spammer
[21:38:09] <_rubik> What patterns for ingesting config files have people found successful? In the past, I'm unmarshaled config directly into core structs, but that creates a tight coupling between the core model and config files
[21:38:25] <A_Dragon> for "plugins" / "other modules
[21:38:28] <A_Dragon> "
[21:38:30] <A_Dragon> not really plugins
[21:38:52] <A_Dragon> Ive unmarshaled into an intermediary (I use toml so I can use toml.Tree to say "dump this section here Ill deal with it later")
[21:39:07] <A_Dragon> and then lower down where $thing needs its config it can use that Tree to unmarshal into its struct
[21:40:37] *** Quits: lionkking (~lionkking@184.22.209.151) (K-Lined)
[21:41:04] <seebs> my usual preference is that config files should match config structures, which are then used by other things, i think.
[21:41:04] <_rubik> I see. So intermediary structs with some sort of translation methods. That's what I was thinking but wasn't sure about maintaining parallel structs. Decoupling is probably best though
[21:41:13] <seebs> i sort of hate toml
[21:41:25] *** Quits: binkers (~binkers@user/binkers) (Client Quit)
[21:41:27] <A_Dragon> toml is great for small configs and awful for things that need to be super complex
[21:41:29] <seebs> just like, i personally find it unpleasant to work with in complex cases, not to say that anything else is necessarily good
[21:41:39] <_rubik> ikke: Wulp. He got klined real fast
[21:41:45] <A_Dragon> I'd use json or xml, in fact, I used xml first
[21:41:54] <A_Dragon> but XML is super complex to build decent configs from
[21:42:00] <A_Dragon> yaml I hate with a passion so I wont touch it
[21:42:09] <A_Dragon> _rubik: yeah sec I have some examples
[21:42:26] <seebs> xml is horrible
[21:42:37] <A_Dragon> XML is great for complex things imo
[21:42:49] <raktajino> what does xml get you that json doesn't
[21:42:56] <A_Dragon> CSS.
[21:43:00] <_rubik> seebs: but you define config structs separate from core structs? How do you typically translate config->core?
[21:43:00] <A_Dragon> I can style XML configs
[21:43:02] <Sam> Namespacing and streaming. It's extremely nice for extensibility.
[21:43:03] <ikke> comments :P
[21:43:05] <A_Dragon> and ^
[21:43:15] <A_Dragon> https://github.com/A-UNDERSCORE-D/goGoGameBot/blob/master/internal/config/tomlconf/configholder.go is my base config stuff for passing downwards
[21:43:17] <raktajino> true true. but yaml has comments and yaml is json
[21:43:32] <A_Dragon> thats used in there to store configs for a particular type of $thing
[21:43:38] <ikke> json is yaml, yaml != jsoin
[21:43:45] <Sam> I mean, it's overengineered, but I don't know of anything else that has such a nice token stream that you can filter/map/etc. on and the namespacing built in to the parsers so that I don't have to implement it myself is very nice.
[21:43:46] <raktajino> wot
[21:43:49] <A_Dragon> eg in that bot its used for transforming IRC lines to whatever a game sees
[21:43:58] <A_Dragon> raktajino: YAML is a strict superset of json
[21:44:05] <A_Dragon> so all json is valid yaml
[21:44:09] <A_Dragon> but not all yaml is valid json
[21:44:27] <raktajino> I did not realize it didn't work the other way. Interesting.
[21:44:40] <A_Dragon> yaml is way larger and complex
[21:44:48] <A_Dragon> yaml has 63 ways to store a string :P
[21:44:52] <A_Dragon> all subtly different
[21:45:03] <ikke> xml also separates structure from data
[21:45:29] <A_Dragon> _rubik: example of where those are used https://github.com/A-UNDERSCORE-D/goGoGameBot/blob/aa4d13879984836d692b8b8cd9ff61fb2e406cf0/internal/transport/process/transport.go#L112
[21:45:49] <Sam> I always feel like XML would have been great if it got rid of a few token types; like if there were no directives or procinsts and you just had start/end/chardata it would be great. Also if namespaces didn't piggyback on attributes (which, TBF, the authors of the namespace spec admit was a mistake)
[21:45:55] *** Joins: binkers (~binkers@user/binkers)
[21:46:08] <A_Dragon> that honestly was my main issue
[21:46:23] <A_Dragon> I really struggled to decide what should/shouldnt be an attribute
[21:46:31] <A_Dragon> the config was okay but difficult to work with
[21:46:41] <A_Dragon> you can actually find the old xsd in that repo still
[21:47:04] *** Joins: oxum (~oxum@136.185.148.86)
[21:47:58] <_rubik> A_Dragon: ah interesting. raw conf -> structured conf -> core structs
[21:48:05] <A_Dragon> _rubik: yeah
[21:48:13] <A_Dragon> its about the best solution I could come up with
[21:48:27] <A_Dragon> its quite easy to use tbh
[21:48:29] <A_Dragon> and very clean
[21:48:43] <_rubik> Nifty. Thanks for the input folks!
[21:48:47] <A_Dragon> something lower down doesnt like what you gave it it throws an error in your face and you have to deal with it
[21:49:23] <A_Dragon> now for json or XML I did that by getting the raw strings (AFAIK both json and XML stdlib libs have a "just dump it as bytes here" struct tag)
[21:50:15] *** Quits: hikhvar79 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de) (Quit: The Lounge - https://thelounge.chat)
[21:52:11] *** Joins: hikhvar79 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de)
[21:52:15] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 265 seconds)
[21:54:10] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d)
[22:00:17] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:01:14] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:01:24] *** Joins: kulak (~kulak@user/kulak)
[22:02:57] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:03:37] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[22:08:40] *** Joins: kulak (~kulak@user/kulak)
[22:10:30] *** Quits: hikhvar79 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de) (Quit: Ping timeout (120 seconds))
[22:10:47] *** Joins: hikhvar79 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de)
[22:23:30] *** Quits: normen (~normen@p200300d7173dc900a9596ed88ac0c260.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:25:40] *** Joins: normen (~normen@p200300d7173dc9004d6fd600718da7a3.dip0.t-ipconnect.de)
[22:26:51] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:32:23] *** Joins: kulak (~kulak@user/kulak)
[22:38:30] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:38:51] *** Joins: kulak (~kulak@user/kulak)
[22:47:22] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:49:57] *** Joins: oxum (~oxum@136.185.148.86)
[22:50:33] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[22:52:23] *** Quits: oxum (~oxum@136.185.148.86) (Remote host closed the connection)
[22:55:54] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[22:58:42] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:59:24] *** Joins: kulak (~kulak@user/kulak)
[23:05:37] *** Joins: oxum (~oxum@136.185.148.86)
[23:10:33] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 265 seconds)
[23:11:46] *** Joins: oxum (~oxum@136.185.148.86)
[23:12:51] *** Quits: printf (~printf@user/printf) (Quit: The Lounge - https://thelounge.chat)
[23:13:12] *** Joins: printf (~printf@user/printf)
[23:19:20] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 268 seconds)
[23:22:40] *** Quits: sysh (~sysh@212.237.182.120) (Remote host closed the connection)
[23:22:43] *** Quits: menace_ (~someone@ppp-93-104-175-139.dynamic.mnet-online.de) (Quit: menace_)
[23:23:17] *** Quits: hikhvar79 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[23:26:04] *** Joins: hikhvar79 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de)
[23:29:02] *** Joins: normen_ (~normen@p54b3452e.dip0.t-ipconnect.de)
[23:30:57] *** Joins: hikhvar796 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de)
[23:31:13] *** Quits: normen (~normen@p200300d7173dc9004d6fd600718da7a3.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[23:31:16] *** normen_ is now known as normen
[23:31:48] *** Quits: hikhvar79 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[23:31:51] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[23:33:32] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[23:36:14] *** Joins: kdsch (~kdsch@86.106.121.196)
[23:36:23] *** Quits: hikhvar796 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de) (Quit: The Lounge - https://thelounge.chat)
[23:37:45] *** Joins: hikhvar796 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de)
[23:42:29] <seebs> So, someone had an example a couple of weeks ago of a tiny program where finalizers didn't run, and there is an explanation which was not obvious to me: Some tiny objects (8 bytes) end up being put in 16-byte blocks that they share with another allocation, which can result in them not being collected/finalized until the other object also gets freed.
[23:42:38] <seebs> https://github.com/golang/go/issues/46827 <-- cool to know
[23:42:52] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 244 seconds)
[23:44:16] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[23:44:37] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[23:46:53] *** Joins: dr0n (~nabromov@94.11.23.235)
[23:57:20] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[23:57:54] *** Quits: koo555 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 240 seconds)
