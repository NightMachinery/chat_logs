[00:17:04] *** Quits: phantomics (~phantomic@71-218-243-149.hlrn.qwest.net) (Read error: Connection reset by peer)
[00:26:13] *** Quits: vats (~vats@180.149.226.25) (Ping timeout: 256 seconds)
[00:34:50] <hayley> https://www.youtube.com/watch?v=sM7odiEO1k8
[00:34:50] -ixelp- We Take Mystery (To Bed) - YouTube
[00:50:56] <selwyn> is there a way of knowing where the jwst is
[00:51:03] <selwyn> to some reasonable precision
[00:52:04] * hayley reads dig and spots that mas.to is blocked using DNS hijacking
[00:53:09] <hayley> If I change my DNS to 8.8.8.8 it works. Nice.
[00:54:56] <gilberth> I really need to separate the dual nature output record serving for formatting objects and display lists. I just have no idea how. One of those roles must be renamed. I tend to destruct their nature as display lists. This is broken anyway as only the port knows about the exact pixel bounds of output records, and there are no pixels in CLIM to begin with.
[00:55:52] * contrapunctus sees ASDF discussion in #commonlisp and is tempted to ask...~NodeJS~ NodeCL when? 😏
[00:56:29] <gilberth> We have quicklisp, don't we?
[00:57:17] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[00:58:53] <contrapunctus> gilberth: the discussion is about specifying dependency versions in the system definition...but apparently ASDF3 does that already...
[00:59:30] <gilberth> I mean, I say TERPRI and the pane does not occupy more space. Sure it doesn't; there isn't more ink to show, right? An empty line has typographical bounds while its pixel bounds is empty.
[01:00:26] <gilberth> contrapunctus: Ah ok. Do we need that? ASDF already is over-engineered.
[01:01:17] * gilberth wants MK:DEFSYSTEM back.
[01:02:04] * pl recalls the bad idea that was not including DEFSYSTEM in ANSI
[01:02:35] * gilberth points to PROVIDE and REQUIRE.
[01:03:52] <gilberth> I always wondered what prompted ASDF. MK:DEFSYSTEM was fine.
[01:04:56] <gilberth> Unlike ILISP. SLIME is a major improvement.
[01:05:28] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[01:07:32] <contrapunctus> I've neither worked on any large and/or long-running Lisp project, nor used `defsystem` , so... 🤷‍♀️️
[01:08:01] * hayley wants Self back
[01:08:51] *** Joins: shka (~herr@109.231.0.226)
[01:11:23] <gilberth> Has ASDF3 support for patches? A place you could put your personal patches into, which will be loaded after the system?
[01:11:45] <moon-child> what sort of patch?
[01:12:21] <gilberth> moon-child: A list of files compiled, if needed, and loaded after you load the system.
[01:12:43] <moon-child> why can't you just load those files yourself after you load the system?
[01:13:04] <hayley> Sheesh, my laptop cannot even remember my custom DNS settings.
[01:13:07] <gilberth> moon-child: Because I am lazy.
[01:13:24] <gilberth> And I will perhaps forget all dependencies.
[01:13:36] <moon-child> is there a difference between saying (load-system :foo :with-patches ("bar" "baz")) and (load-system :foo) (load "bar") (load "baz")?
[01:14:08] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:14:27] <gilberth> There is: What if I say (REQUIRE :FOO) and that needs :BAR, which needs :QUUX for which I have patches?
[01:15:04] <moon-child> I guess there are two different ways such a patch could be useful
[01:15:10] <moon-child> for changing behaviour, or for changing the interface
[01:15:17] <moon-child> I was thinking the latter.  But for the former that makes sense
[01:15:23] <gilberth> And there is no :with-patches argument. I say (require :foo) and it would look for patches for :foo which I have at a central place. For me.
[01:15:55] <gilberth> And for BAR patches and QUUX patches.
[01:16:09] <moon-child> I feel like at that point you just maintain your own repository of packages.  And modify them as your fancy suits
[01:16:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:16:29] <moon-child> (where by 'repository' I just mean 'collection', not some weird networked versioned thing)
[01:16:33] <gilberth> I don't want to modify the sources.
[01:16:54] <pl> gilberth: Symbolics DEFSYSTEM was proposed to be made part of ANSI, IIRC, but arguments of "size" were made
[01:17:19] <gilberth> pl: I know. A pity.
[01:17:23] <selwyn> size?
[01:17:24] <moon-child> why not?  What's the difference?
[01:17:55] <masinter> was there a cleanup proposal?
[01:18:21] <gilberth> moon-child: I will forget about my modifications. And I want to be able to update somebody's else system without hassle.
[01:18:28] <pl> selwyn: "the standard is too big as it is" (in terms of pages)
[01:18:38] <selwyn> oh
[01:19:06] <masinter> that was the kind of argument where the "and your definition seems half-baked" was left unsaid
[01:19:08] <moon-child> gilberth: your revision manager should tell you
[01:19:13] <moon-child> 'change X made by gilberth'
[01:19:40] <masinter> we've had to write our on github desktop
[01:19:46] <gilberth> moon-child: Thanks. Too mush hassle for me. Not when I am homeless and move between machines.
[01:20:09] <moon-child> sounds like a more general data management problem then
[01:21:36] <gilberth> I just try to minimize what I need to carry around. And I like that I have my patches at one single spot. And I could easily enable or disable a patch which may touch multiple files.
[01:22:12] <gilberth> I like files and the trace they leave. ;-)
[01:22:49] <moon-child> you and your files
[01:22:58] <masinter> .emacs
[01:23:25] <gilberth> ?
[01:23:31] <hayley> https://github.com/god/man/issues/64#issuecomment-1020371858
[01:23:32] -ixelp- Garbage-collection is too slow. Please consider rewrite in Rust. · Issue #64 · god/man · GitHub
[01:23:40] <gilberth> Right. I keep patches in .emacs too.
[01:25:18] * |3b| thinks that question about patches is why we have an overengineered ASDF :)
[01:25:37] * |3b| 's build system would never include such silly over-engineered features
[01:25:52] <|3b|> along with a bunch of other things ASDF does
[01:25:54] * gilberth thinks it is because someone discovered CLOS.
[01:26:14] <|3b|> i meant functionality-level over-engineering
[01:26:15] <hayley> rewrite man in Self when
[01:26:31] <|3b|> code-level is a different issue, and one i don't care about because i don't code it
[01:26:34] <drakonis> that post is serious wtf
[01:26:42] <drakonis> also hygienic macros.......
[01:26:49] <drakonis> hygienic macros > macros
[01:26:54] <drakonis> dirty dirty macros
[01:27:36] <drakonis> nvm its a joke post
[01:27:38] <|3b|> but finishing my previous thought: but since having a build system shared across multiple developers is useful, and since none of us will agree about which features are the "reasonable" and "silly" ones, we get ASDF
[01:27:58] * semz thought "man" referred to the Unix manuals
[01:28:13] <hayley> gilberth, pl: Would you rather read barrier that makes brain 15% slower constantly, or 8 hour GC pauses?
[01:28:28] * |3b| also wouldn't be surprised if you could tweak asdf to load your patches, thanks to the CLOS-level over-engineering :)
[01:29:08] <gilberth> |3b|: It's also NIH. MK:DEFSYSTEM was fine. I really don't know what the trouble with it should be.
[01:29:27] <pl> hayley: pauses, especially since apparently those 8 hours involve some critical GC-coupled optimizations
[01:29:33] <gilberth> If you find your way around ASDF, sure.
[01:32:32] <|3b|> http://fare.tunes.org/files/asdf3/asdf3-2014.html#%28part._.D.E.F.S.Y.S.T.E.M_before_.A.S.D.F%29 lists some, and those sound like things that would annoy me as well
[01:32:33] -ixelp- ASDF 3, or Why Lisp is Now an Acceptable Scripting Language (Extended version)
[01:33:01] * |3b| has also never used defsystem
[01:35:11] <|3b|> but it was probably fine for a lot of people, just not all of them, and presumably either the 2nd group was larger, or enough of the second group were writing things useful to "don't care" parts of the first group, so asdf won
[01:36:19] <drakonis> so apathy made asdf win?
[01:36:20] <|3b|> lots of (non-cl) people think make is fine too, and lots of other people obviously disagree with them given the # of alternatives
[01:36:46] <|3b|> i didn't mean "apathy" so much as "both are acceptable"
[01:36:54] <moon-child> most of the things that aren't make are just souped-up make
[01:36:59] <moon-child> one or two might not be
[01:37:09] <hayley> They should make a cycle of build systems, where you need cmake to make make, ninja to make cmake, Gradle to make ninja, ...
[01:37:21] <gilberth> Well, which ASDF definitions do more than list a handful of files to compile and load?
[01:37:46] <|3b|> and to the extent "apathy" mattered, it would be in the sense of lack of people either thinking mk-defsystem was actively superior, or actively attempting to improve it in the places where others thought asdf was actively superior
[01:38:05] <|3b|> gilberth: all the ones that also specify how to run tests
[01:38:11] <|3b|> also the ones that load asdf extensions
[01:38:34] <|3b|> and then there are the people who change the behavior without having to change the simple "list of files"
[01:38:54] <|3b|> like changing how temporary files are stored
[01:39:08] <hayley> https://www.youtube.com/watch?v=3YBmS5oaNwU
[01:39:08] -ixelp- Amateur Hour - YouTube
[01:39:31] <drakonis> fare is doing gerbil these days
[01:39:41] <drakonis> a scheme!
[01:39:46] <|3b|> https://github.com/search?l=Common+Lisp&q=defsystem-depends-on&type=Code
[01:39:47] -ixelp- Sign in to GitHub · GitHub
[01:40:40] <|3b|> for example https://cffi.common-lisp.dev/manual/html_node/Groveller-ASDF-Integration.html
[01:40:41] -ixelp- Groveller ASDF Integration (CFFI User Manual)
[01:41:01] *** Parts: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) ()
[01:45:31] * |3b| frequently gets annoyed by the variety of make replacements that i don't know how to use for probably similar reasons to your dislike of asdf, but presumably the people who do use them have good reasons :)
[01:48:05] * |3b| probably wouldn't be annoyed by them if i knew how to use them though, like i'm not annoyed by asdf since i know how to do the things i want to do (and can see the possibility of doing things i don't currently want to or know how to do, but can see possibly wanting to do at some point)
[01:50:53] <gilberth> I don't like ASDF because I can't load a specific version of a system, it will always look at the repository first, no matter if I loaded the wanted .asd file first. Another minor issue is calling warnings errors. But the latter fits SBCL attitude to complain as much as it could and whine about not being a proper batch compiler.
[01:51:30] <|3b|> compile-file says warnings are "failure" per spec, which i think is where most of that comes from
[01:51:52] <contrapunctus> https://jabjab.de:5443/upload/a75f5b15713067434614f6d0c986f536c301cf7e/QjH1RZJXVyNSBJQEThKVzTcgPLjsY51dH040I4qa/daily_struggle_esrap_smug.jpg
[01:52:27] <contrapunctus> hayley: befitting of r/lispmemes? 🤔️ ^
[01:52:30] <moon-child> what is esrap?
[01:52:41] <contrapunctus> moon-child: https://github.com/scymtym/esrap
[01:52:41] -ixelp- GitHub - scymtym/esrap: Common Lisp packrat parser
[01:52:50] <moon-child> oh they're both parser generators
[01:52:55] * moon-child looks askance at clex2
[01:53:03] * |3b| never figured out smug, so that's an easy choice for me :)
[01:53:16] <|3b|> not that i write new parsers anywhere near daily
[01:53:24] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[01:53:33] * moon-child has no patience for parsers, and even less for parser generators
[01:53:36] <contrapunctus> |3b|: might you be the author of 3bmd? 😳️
[01:53:40] * |3b| is
[01:55:44] <contrapunctus> moon-child: ...I cannot find anything for "clex2"
[01:56:21] <moon-child> cannot find anything for "clex2" YET!
[01:57:12] <|3b|> and compile-file only distinguishes between "error or warning" and "error or warning (except style-warning)", suggesting the intent is that warning is to be considered as bad as error
[02:00:10] <contrapunctus> moon-child: or even clex, what the hell o.O
[02:01:56] * |3b| also suspects asdf can be configured to load specific versions, it just isn't obvious to people who haven't studied asdf due to all the other random things some small subset of users want to configure
[02:02:38] * |3b| for example doesn't want to load specific versions, but appreciates the ability for quicklisp to configure asdf to load things installed by ql
[02:04:24] <contrapunctus> Incidentally...how rare is something like Elisp's edebug in other languages? (I only have experience with Elisp, CHICKEN, Guile, and CL...)
[02:05:16] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:389d:624:1174:4b42)
[02:05:42] <semz> I may have asked this before, but did Henry Baker's www go down?
[02:05:59] <hayley> Yes.
[02:06:02] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[02:06:12] <hayley> https://plover.com/~mjd/misc/hbaker-archive/home.html and the Internet Archive have copies.
[02:06:13] -ixelp- Henry Baker's Archive of Research Papers
[02:06:40] <semz> phew
[02:13:12] <gilberth> hayley: Has he ever called you back?
[02:14:31] <hayley> gilberth: Nope.
[02:15:01] <hayley> https://www.youtube.com/watch?v=uWhkbDMISl8
[02:15:02] -ixelp- Blondie - Hanging On The Telephone - YouTube
[02:29:03] <selwyn> https://www.youtube.com/watch?v=aSSu2I2a-OE
[02:29:03] -ixelp- Half-Life 2 Apartments UNIGINE2 Gameplay #UNIGINE #MadeWithUnigine #Half_Life - YouTube
[02:31:49] * hayley uploaded an image: (187KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/rAiMzuuFPaDULsreRBPFXiKp/calling-henry-baker-at-3am.png >
[02:32:13] <selwyn> what do you want to talk to him about
[02:32:43] <hayley> Allocation for linear objects, and how to do the lazy allocation write barrier nicely, mostly.
[02:33:42] <hayley> w.r.t the former - linearity tells you liveness, but compacting GCs also compact, which some people have writ is more important, with sufficient virtual memory.
[02:38:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:10:00] *** Joins: dra (~dra@2a04:4540:640a:de00:9170:fb96:16c3:a081)
[03:10:02] <dra> Hello!
[03:16:51] <mon_aaraj>  hey
[03:32:40] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:389d:624:1174:4b42) (Remote host closed the connection)
[03:44:37] *** Quits: dra (~dra@2a04:4540:640a:de00:9170:fb96:16c3:a081) (Ping timeout: 240 seconds)
[03:47:57] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:15:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[04:24:24] <moon-child> 'academia is a lousy place to do novel research [...] Reviewers at the Journal of Cryptology didn't understand why they were being asked to read a paper about CPU design, while reviewers at a computer hardware journal didn't understand why they were being asked to read about cryptography [...] if I wanted to succeed in academia I would need to churn out incremental research papers every year —
[04:24:26] <moon-child> at very least until I had tenure'
[04:25:55] *** Quits: jeosol (~jeosol@user/jeosol) (Ping timeout: 256 seconds)
[04:29:02] <sm2n> hah, yeah
[04:29:16] <sm2n> tarsnap is pretty good I don't know why people got uppity about it
[04:30:41] <moon-child> sm2n: i mean bully for them but I don't know how to spend _my_ time in a fashion that's fulfilling and still involves having a roof over my head
[04:38:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[04:40:19] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:48:28] <White_Flame> moon-child: yeah, as somebody who thought about becoming a professor, that sort of thing very quickly disillusioned me of the role
[04:48:49] <White_Flame> and that was even quite a few years ago
[04:55:33] <mfiano> Are the bit twiddlers around again? :)
[04:56:31] <White_Flame> ugh :-P
[04:56:41] <White_Flame> still? ;)
[04:56:47] <mfiano> This converts 16bpc pre-multiplied alpha RGBA into 8bpc CMYK. It is not immediately obvious how to modify it to convert into 16bpc CMYK: https://gist.github.com/mfiano/999aba9d7005df4dcaa87a8ca930bee9
[04:56:48] -ixelp- 1.lisp · GitHub
[04:57:09] <mfiano> I tried the obvious anyway, and failed
[04:58:10] <White_Flame> get rid of the ash, and use #xffff as the denominator
[04:58:16] *** Joins: notzmv (~zmv@user/notzmv)
[04:58:25] <White_Flame> switching from truncate to round might also be more accurate here
[04:58:51] <White_Flame> oh wait, #xff isnt' the denominator
[04:59:11] <hayley> https://www.youtube.com/watch?v=6X-xIC1lEKw
[04:59:11] -ixelp- I Don't Wanna Get Drafted - YouTube
[05:00:00] <mfiano> Ok...I'll try that, thanks.
[05:00:07] <White_Flame> basically get rid of the ash -8, and when you multiply 2 16 bit numbers together, you get a 32 bit number and need to trunc/round the lower 16
[05:01:26] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[05:02:15] *** Joins: Catie (~user@user/catie)
[05:02:46] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[05:02:50] <moon-child> White_Flame: I think my mom is gonna become a prof
[05:03:01] <moon-child> less 'ideal situation' and more of 'I can't see myself doing anything else'
[05:03:12] <White_Flame> heh
[05:13:53] *** Joins: Catie (~user@user/catie)
[05:19:57] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[05:20:34] * hayley figures out there are 4 ways to fit all the standard classes for this semester into 2 days. Now to check the ones I actually have to do.
[05:21:44] <hayley> I cannot fit the two subjects I have to do into one day, but I can fit into two.
[05:22:33] * |3b| parses that as STANDARD-CLASSes, and is subsequently confused
[05:23:50] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:26:17] <aeth> https://qntm.org/files/wordle/index.html
[05:26:17] -ixelp- Absurdle: Adversarial Wordle @ Things Of Interest
[05:28:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:28:46] <hayley> Absurdle 8/∞... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/f1889e10d875aa1dd73a40675c222cf73eb7a6a6)
[05:29:21] <aeth> oh? lucky.
[05:29:39] <hayley> Yup.
[05:30:03] <aeth> I was trying not to use up all of the vowels early on so I started with LOSSY and CREED, eliminating all of those letters (I should've saved the Y with hindsight) because I know it's adversarial.
[05:30:15] <hayley> 11 this time.
[05:30:36] <aeth> Then I decided to play MANIA to use up two vowels (tried TULIP first but L was taken) and got the hint that I is present
[05:30:39] <aeth> and now it's hard on word 4
[05:31:07] <aeth> QU still there, at least.
[05:31:18] <aeth> Eliminating U without the Q is just begging for trouble.
[05:31:43] <aeth> the lack of L is really hurting me, though, because I can't try e.g. QUILT
[05:32:14] <hayley> Hm, I can still write wrong letters. 
[05:32:17] <sm2n> moon-child: yeah, it's kind of awful
[05:32:19] <sm2n> In a similar situation myselv
[05:32:28] <aeth> hayley: you have to turn on hard mode to have to use all of the information
[05:32:36] <aeth> in the settings
[05:32:39] <hayley> Oh.
[05:32:40] <aeth> oh I see
[05:32:43] <aeth> entirely wrong
[05:32:49] * hayley stuck with BO??Y and it isn't BOBBY or BOGGY
[05:33:13] <aeth> I can just enter TULIP then, even though I know it can't be L, and I know I can't be in that position
[05:33:25] <aeth> I guess that's because it's not hard mode
[05:33:43] <sm2n> BONNY
[05:33:59] <hayley> It was BOOZY.
[05:34:11] * hayley only has the A vowel now.
[05:35:35] <moon-child> sm2n: :/ what do you think you'll do?
[05:35:36] <aeth> The fun part with being adversarial is, you can give up (in my case, FIGHT), try what they gave you as the solution, undo that, and it won't be when you enter it.
[05:35:36] * |3b| took 4 tries to fill boo*y :p
[05:36:27] <hayley> But coming up with five letter words given some set of valid letters is just not something I have a mental index for.
[05:36:29] * hayley EXPLAIN QUERY PLAN
[05:36:36] <Alfr> boozy?
[05:36:40] <aeth> it turned FIGHT into FIFTH just to mess with me.
[05:37:11] <|3b|> i think it was boozy, boomy, booky, booby
[05:37:17] <hayley> https://www.youtube.com/watch?v=s37cUyTGRUM
[05:37:18] -ixelp- Firth Of Fifth (Remastered 2008) - YouTube
[05:37:19] <aeth> (I got FIFTH without giving up, though)
[05:38:17] <hayley> I got FLACK in 7, but I couldn't really play that many useless words.
[05:38:39] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (Ping timeout: 256 seconds)
[05:38:55] <aeth> you have to pick your first two words as words that will eliminate letters that won't be particularly useful.
[05:39:29] <aeth> QUILT perhaps. Because you keep A and E, you eliminate QU, and the only real loss there is T
[05:39:40] <aeth> LOSSY was terrible because so many 5 letter words are 4 letter words with a Y at the end
[05:40:18] <hayley> 6 this time for DUSKY.
[05:40:42] <|3b|> bobby in 6
[05:40:59] <|3b|> this is the sort of game that makes me want to write a solver more than play it though :)
[05:41:09] <|3b|> (or write a strategy generator)
[05:41:47] <aeth> well, the original is more of a solver game
[05:41:50] <aeth> this is more of a strategy
[05:42:15] <aeth> I started with QUILT and HANDY because the first two seem to never give me any letters, so I wanted to throw away those, but keep S and E to make words easier to guess.
[05:42:28] <|3b|> right, "solver" would probably mostly be "pick the words that reveal the most information"
[05:42:35] <aeth> Then I went with ROPES and it gave me RO*E* with R in the wrong position
[05:42:53] <aeth> which was quite a lot of information for this adversarial version because I chose the first two words to put me in a position where it would have to give me something on the third
[05:42:56] <|3b|> is their word list available somewhere?
[05:43:01] <aeth> not sure
[05:43:03] <aeth> maybe in JS
[05:43:48] *** Joins: jeosol (~jeosol@user/jeosol)
[05:43:55] <aeth> oooh, BORER gives me *O*ER. This is way easier than any other run by being strategic.
[05:44:15] <hayley> PAPER took me 8.
[05:44:23] <hayley> https://www.youtube.com/watch?v=RWcBYKrrUmg
[05:44:23] -ixelp- - YouTube
[05:44:30] <hayley> Damn, they deleted that video?
[05:44:35] <hayley> https://www.youtube.com/watch?v=swCk2wKPK6Y boo.
[05:44:35] -ixelp- Paper (2005 Remaster) - YouTube
[05:44:36] <aeth> well, darn, *O*ER could take a while because there are a lot in that form. I tried MOVER and it elimianted the M and V
[05:44:48] <aeth> same with JOKER
[05:45:02] <aeth> I guess this is the downside with positioning myself to allow for a lot of guesses on the third and fourth
[05:46:58] <aeth> QUILT -> HANDY -> ROPES -> BORER -> MOVER -> JOKER -> COWER -> WOOER
[05:47:02] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[05:47:17] <aeth> it had me do 5 words of the form _O_ER because the dictionary had a lot there
[05:47:20] <aeth> I probably had to exhaust it
[05:47:22] <hayley> WEARY -> SUITS -> CLOUD -> FLUNK -> PLUMB -> PLUMP
[05:48:34] <aeth> I see what it did there
[05:48:46] <aeth> clever
[05:50:14] <aeth> made you exhaust the _LU__ possibilities
[05:50:20] * hayley wants to guess PRONG but types PROGN
[05:53:09] <hayley> SELFS -> RATIO -> DORKY -> BROCH -> PRONG (damn, I nearly spelt PROGN again!) -> GROOM
[05:55:46] <hayley> My laptop forgot its custom DNS settings again.
[05:57:48] <hayley> aeth: Funny that pointer compression is sorta the opposite of data-oriented design (now you get even _less_ control of object layout!) but they both improve cache usage.
[05:58:17] <mfiano> Got bored and moved onto his hatetris game pretty quick
[05:58:45] <mfiano> 3 lines is the most I can get. Back to code
[05:58:59] <hayley> "Got tired of tsc taking forever to type check my code so I made a Typescript type checker in Rust for fun...For a small Typescript file it's 500x faster...It supports only a small subset of Typescript"
[05:59:09] <hayley> Gees, it's like having a simpler type system...gives you less to do. idk
[05:59:27] <hayley> I only work on compilers for dynamic language, I'm too dumb and immoral(tm) to make a statement though.
[06:00:32] <|3b|> hmm, can see the arrays of words in the debugger, but no idea how to actually get them out of the debugger without manually copying them out 100 at a time :/
[06:00:56] <|3b|> ah, toString
[06:01:46] <hayley> "basically everything is supported except for complex types (generics, conditionals, recursive) right now" Yup, so they don't actually need any flow analysis, or ML-style variable unification.
[06:02:14] <mfiano> "500x faster because i ignore the slow parts"
[06:02:39] <hayley> Nah, it's the Rust apparently.
[06:03:08] <mfiano> Wait, it'll oxidize away completely in time.
[06:03:15] <hayley> ...and, as anyone will know, the Rust compiler is blazing fast because they wrote that in Rust.
[06:03:46] <sm2n> hayley: Well the linux kernel is speeding up compile times by switching to rust so...
[06:03:47] <hayley> Meanwhile, bootstrapping the SICL compiler is slow, because they wrote it in CL, a dynamically typed and interpreted language where everything is boxed.
[06:04:04] * hayley might have done this joke to death already.
[06:04:15] * sm2n writes a rust interpreter
[06:04:34] <drakonis> in CL?
[06:04:37] <sm2n> where is your crab now
[06:04:51] <drakonis> its actually an alien crab now?
[06:05:22] * hayley uploaded an image: (320KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/zwWRtCJyExrTTbvjNrsjxwQX/cooking-with-jmc.png >
[06:05:41] <mfiano> lul
[06:05:50] <hayley> sm2n: Every sufficiently complicated Rust program contains a shitty and buggy Lisp interpreter.
[06:06:08] <hayley> But the Rust compiler has an IR interpreter (not unlike SICL's HIR interpreter, but less cool cause it's Rust IR of course).
[06:06:38] <drakonis> it UGGO
[06:07:11] <hayley> And, again, when it comes to regexen, Rust is slow and interpreted, with no compile-time linting, whereas CL is fast and compiled, with all the lints you can poke a stick at.
[06:07:17] * |3b| should look at sicl again one of these days, if i ever actually catch up on all the other random thing i should do :/
[06:07:30] <drakonis> when is sicl out?
[06:07:33] <hayley> Syntax errors? Sure. REs that never match? Got those. A group that will never match? Got that too.
[06:07:41] <hayley> Some time this decade, according to beach.
[06:09:28] <mfiano> hayley: 1) Write a half-adder in Minecraft. 2) Finish the damn Rust interpreter.
[06:10:15] <kakuhen> excited for SICL
[06:10:39] <kakuhen> I wish I could contribute in a way that does not amount to bikeshedding
[06:11:01] <hayley> Meanwhile, in Rust, ya have to .unwrap() if you think your RE is syntactically correct, and you get an error at runtime. Oh no!
[06:11:02] <moon-child> I mean, start with bikeshedding and work your way up
[06:11:35] <hayley> I think I fixed some links, then refactored the hash tables, and then got to compiler backend stuff.
[06:11:44] <kakuhen> though I abruptly stopped... maybe I should continue again
[06:11:45] <kakuhen> yeah i suppose; for a while I was following beach's advice to try documenting stuff in CCL and tidying up code
[06:11:49] <hayley> ...and I fixed dynamic environment handling too.
[06:12:28] <mfiano> did you get bored with finishing zstd for sbcl?
[06:12:46] <hayley> Ah yeah, I need to make that use a buffer rather than compressing it all in one hit.
[06:13:00] <kakuhen> oh one library that i wish could be documented a bit better is some binary pattern matching library
[06:13:03] <kakuhen> i forget its name
[06:13:12] <kakuhen> but it seems like in theory a really elegant way to do the stuff ive been spending a long time on
[06:13:22] <sm2n> nibbles?
[06:13:29] <kakuhen> No not nibbles
[06:13:40] <kakuhen> it offers macros for defining "binary" types and some primitive types of the structure of binary data
[06:13:47] <kakuhen> then you get a reader and writer for free
[06:13:57] <kakuhen> it was called cl-binary or something like that
[06:14:02] <kakuhen> or binary-types i dont remember
[06:14:31] <sm2n> oh
[06:14:38] <kakuhen> https://github.com/j3pic/lisp-binary
[06:14:39] -ixelp- GitHub - j3pic/lisp-binary: A library to easily read and write complex binary formats.
[06:14:41] <kakuhen> ok i found the library
[06:15:05] <sm2n> I started a CL port of kaitai-struct a long time ago and then lost interest in actually finishing it
[06:15:10] <sm2n> which is kind of similar
[06:15:29] <kakuhen> yeah i wish i figured out about this library and its usage before i started on flac decoder
[06:15:49] <kakuhen> though there are some stuff that arent documented, or maybe they're questions i should be answering myself
[06:16:48] <kakuhen> so for instance, it's not clear to me how I would express a variable-length stream of bytes in a frame... yes I can use (unsigned-byte) as a type but then if the data has a well-formatted footer...not sure how DEFBINARY will handle that, if at all
[06:16:57] <drakonis> sbcl's source is such a hairball
[06:17:00] <drakonis> good lord.
[06:20:26] <drakonis> http://www.goatops.com/
[06:20:27] -ixelp- Goat Ops
[06:30:40] <mfiano> White_Flame: Sigh, looks like some rounding error when converting to cmyk8, but your changes for cmyk16 always pass: https://gist.github.com/mfiano/8bd58b1857ede530f65ad0fd2e224195
[06:30:40] -ixelp- *sly-mrepl for sbcl*.txt · GitHub
[06:31:13] <White_Flame> I hope you're not just blindly making code changes without understanding each step yourself
[06:31:20] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[06:31:43] <mfiano> Of course not
[06:32:47] <mfiano> I'm just confused why 1 channel has an off-by-one error for the same algorithm downsampled to half the width
[06:33:08] <mfiano> always a different channel. looks like 1 case out of those 16 has 2 channels
[06:33:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:36:32] <White_Flame> rounding
[06:37:27] <White_Flame> and by the counting argument, 16->8 is not reversible
[06:38:39] <mfiano> "the counting argument"? and, I'm not reversing 16->8
[06:39:01] <White_Flame> oh, these are 2 separate test sets
[06:39:08] <mfiano> Yes
[06:39:18] <mfiano> 16->16 works. 16->8 does not
[06:39:26] <White_Flame> where do the expected values come from, the Go version?
[06:39:42] <mfiano> No
[06:39:53] <mfiano> https://gist.github.com/mfiano/e03ca1bdd709aa7b7835ff050bc40e96
[06:39:54] -ixelp- test.lisp · GitHub
[06:40:15] <kakuhen> i hate unix i hate unix i hate unix 
[06:40:40] <kakuhen> I forgot C-SPC switched to jp keyboard on mac and my terminal treats full width space as a distinct character
[06:41:00] <kakuhen> and I was confused at why I get kept getting "command not found: sudo port" only to realize the space was full-width 
[06:41:15] <mfiano> White_Flame: The 8bpc tests just test the same result as the 16bpc tests, but (mapcar (lambda (x) (truncate x #x100)) o)
[06:41:24] <kakuhen> how many spaces are there even in unicode? is it really that hard to treat them all as space
[06:41:41] <White_Flame> mfiano: that should probably round
[06:41:59] <White_Flame> kakuhen: lots.  but I think there's something of a character class for them in the spec?
[06:42:15] <mfiano> White_Flame: Then they never pass :/
[06:42:22] <White_Flame> ah
[06:42:53] <mfiano> Oh I got 1 that passed just now
[06:43:01] <mfiano> Much fewer though obviously
[06:47:19] <mfiano> White_Flame: https://gist.github.com/mfiano/71c7c74337df9c3ffcebc5cfda05b8ac
[06:47:19] -ixelp- 1.lisp · GitHub
[06:48:17] <White_Flame> you should do the calculations from 16 bit adn only bring the final result down to 8-bit.  This is reducing the input, which is too early
[06:49:07] <mfiano> How am I reducing the input?
[06:49:15] <mfiano> I'm reducing the output
[06:49:25] <White_Flame> what is %shift -8
[06:49:35] <mfiano> refresh, it's just ASH
[06:49:53] <White_Flame> yeah, that's reduing the inputs to 8 bits before your multiplication
[06:53:59] <mfiano> I can't seem to do that without going out of range, due to that pesky W variable
[06:54:48] <White_Flame> hmm, as this is ratio stuff, you probably don't need to scale anything?
[06:55:26] <White_Flame> but I don't know the sepcifics of all these particular transforms
[07:03:08] <mfiano> https://gist.github.com/mfiano/3fe75ab89d444ea31b901252dda96380
[07:03:09] -ixelp- cmyk.lisp · GitHub
[07:03:24] <mfiano> I'm just guessing at this point taking your suggestions into consideration
[07:03:34] <mfiano> oops
[07:03:36] <mfiano> paste error
[07:04:11] <White_Flame> yeah, I presume the * #xff is to scale it from 0.0-1.0 fixed point to 0-255
[07:04:13] <mfiano> oh no my cache wasnt updating
[07:04:18] <White_Flame> so that need woudl need ffff if that's the case
[07:04:46] <White_Flame> since this is taking teh ratio of (w - _)/w
[07:05:17] <mfiano> Then it's the same as the 16->16 algorithm?
[07:05:50] <White_Flame> well yeah, I guess.  the cropping to 8 bit should only ever happen right at the end so as not to lose more intermediate precision
[07:06:20] <|3b|> is CYMK8 just a constructor or does it do calculations?
[07:06:29] <|3b|> CMYK8
[07:06:56] <mfiano> constructor
[07:07:27] <|3b|> why is rgb->cmky expected to be = to dividing rgb by 256?
[07:07:37] * |3b| cannot type that color space apparently
[07:08:01] <mfiano> rgb here is alpha premultiplied rgba 16bpc
[07:08:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[07:08:37] <White_Flame> you sure you don't want to just use floating oint? :-P
[07:09:14] <mfiano> Absolutely.
[07:09:18] <White_Flame> but actually, since everything is exlicit multiplication and division, you could just let lisp use rationals and push all rounding to the  end.  But I guess this is trying to get more speed?  floats can be faster than int
[07:09:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:13:07] <mfiano> Well I got it
[07:13:41] <|3b|> mfiano: in mean in https://gist.github.com/mfiano/3fe75ab89d444ea31b901252dda96380 is the return value in 22 expected to be cmyk equivalent of the input list if input is rgb16
[07:13:42] -ixelp- cmyk.lisp · GitHub
[07:13:49] <|3b|> *i mean
[07:14:20] <|3b|> which seems unlikely considering it is almost = to just converting the rgb to 8 bit
[07:14:48] <mfiano> It is expected to be 8bpc CMYK if input is RGBA 16bpc PMA
[07:15:30] <mfiano> The expected return value as retrieved from other libraries/online converters is CMYK8: 79, 0, 132, 38
[07:15:32] <|3b|> does the a/pma matter considering you are ignoring the a during conversion?
[07:16:10] <mfiano> That is correct, but the alpha is encoded into the R/G/B
[07:17:17] <|3b|> no, alpha has attenuated the R/G/B, but isn't encoded into it
[07:18:26] <mfiano> Yeah, emission intensity vs occlusion
[07:19:37] <|3b|> either way, i still don't understand why you expect rgb->cmyk and rgb->rgb to have same results
[07:19:47] <mfiano> I don't
[07:19:52] <mfiano> Why do you say that?
[07:20:12] <|3b|> line 24 in that paste looks like rgb->rgb
[07:20:22] <|3b|> and gives the results you expect
[07:21:07] <|3b|> to clarify more, cmyk8 expect as arguments C M Y K?
[07:21:11] <mfiano> (20457 0 33826 9926) is CMYK16
[07:21:29] <mfiano> wait
[07:21:31] <mfiano> ugh
[07:21:36] <|3b|> which you pass to rgb16->cmyk8?
[07:21:38] <mfiano> lemme see where i messed up
[07:22:00] * |3b| wonders if there are fixed points in color space conversion
[07:22:13] <|3b|> (aside from black or similar)
[07:22:25] <|3b|> (is that the right term?)
[07:23:25] <mfiano> Sorry this was a copy/paste error on my part
[07:23:51] <mfiano> COLOR> (let ((src (rgba16-pma 38250 55609 26906 49320)))
[07:23:53] <mfiano>          (multiple-value-list (decompose (convert src 'cmyk16))))
[07:23:53] <semz> Wouldn't a fixed point require that the spaces are the same
[07:23:55] <mfiano> (20457 0 33826 9926)
[07:24:22] <|3b|> semz: no, just that they happen to have an intersection
[07:24:33] <mfiano> there is actual repl output inlined into irc as to not be confusing. i must have copied the wrong test results or something
[07:24:59] <|3b|> at least for the intent of my question, not sure if that's actually the term i meant. is there a color with the same representation in both spaces
[07:25:14] <|3b|> (or in this case, with the same first 3 values)
[07:25:21] <semz> Oh I see
[07:26:26] <|3b|> mfiano: does rgba16-pma multiply rgb by a?
[07:26:55] <mfiano> No it's just a constructor. CONVERT is the only thing that modifies channels
[07:28:08] <|3b|> what was G that you multiplies by 49320 to get 55609?
[07:28:15] <|3b|> *multiplied
[07:28:55] <mfiano> That rgba16-pma input is generated by random, not that it matters because A is unused.
[07:31:07] <mfiano> |3b|: I could get my headset if you just want to see my testing setup and buffers etc :)
[07:31:27] <|3b|> nah
[07:31:31] <mfiano> ok
[07:32:24] <kakuhen> off-topic but... is there a way to draw pixels directly on a screen using CLIM?
[07:32:29] <kakuhen> or will I have to resort to cl-sdl2 for that
[07:32:40] <mfiano> this seems to work, where x = r/g/b: (truncate (* (- w x) #xffff) (* w #x100)), (truncate (- #xffff w) #x100)
[07:33:08] <mfiano> I'm not sure why original algorithm was truncating by #xff though...that seems to be wrong
[07:33:23] <White_Flame> it's not truncating by ff, it's multiplying by it?
[07:33:40] <White_Flame> oh, or are you talking about the last W step?
[07:34:07] <White_Flame> can you post the code of the original?
[07:34:08] <mfiano> Yes, that, sorry, and subtracting from
[07:34:14] <White_Flame> oh, ok
[07:34:19] <mfiano> original = Go algorithm ported
[07:34:21] <White_Flame> like I said, you've got delta/w
[07:34:31] <White_Flame> but then scale that from 0-1 to 0-255
[07:35:08] <White_Flame> since the result of that division is a scale across that range
[07:35:16] <mfiano> Why don't I just link to the Go code...
[07:35:21] <White_Flame> erm, it's a unit scale tha'ts returned
[07:35:24] <White_Flame> yeah, that's what I mean
[07:35:41] <White_Flame> but since you're integers, instaed of doing (d/w)*scale, you retain more precision doing (d*scale)/w
[07:36:01] <mfiano> https://github.com/golang/go/blob/master/src/image/color/ycbcr.go#L315-L333
[07:36:02] -ixelp- go/ycbcr.go at master · golang/go · GitHub
[07:36:22] <mfiano> Note they overlooked to 16bpc CMYK. They have it for everything else :shrug:
[07:36:41] <mfiano> This is 8bpc
[07:37:06] <White_Flame> yeah, if this was 16bpc, it should all be ffff
[07:37:20] <White_Flame> since it's a scaling factor to define the range
[07:37:23] <mfiano> but look at call site on line 371 too
[07:38:01] <White_Flame> yeah, .RGBA() returns 16-bit, and RGBToCMYK takes 8-bit inputs
[07:38:27] <White_Flame> (and man, typing kebab-case is so much easier camel case acronyms :-P)
[07:38:41] <White_Flame> *easier than
[07:38:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:38:58] <mfiano> Point is my code returns identical results as Go. But When I added the 16bpc variant, and derived the 8bpc outputs by truncating by #x100, that is where rounding error showed up
[07:39:14] <mfiano> And I fixed it with the above, which leads me to believe the problem to be in the Go algorithm
[07:39:34] <White_Flame> you're going through a number of hops and are inevitably going to have losses somewhere
[07:39:49] <White_Flame> by the nature of using integers
[07:39:52] <mfiano> Well I don't know. That's what I mean
[07:39:59] <mfiano> s/know/now/
[07:40:17] <White_Flame> I would think that's lucky ;)
[07:40:19] <mfiano> Online converters seem to agree with my results
[07:40:25] <mfiano> Tried a few million
[07:40:29] <mfiano> In a loop
[07:40:37] <White_Flame> but cmyk8 does have more bits than rgb8, so there isn't a one-to-one transform
[07:40:41] <White_Flame> their ranges have different counts of values
[07:40:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:41:25] <mfiano> Ok
[07:41:34] <White_Flame> meaning, cmyk->rgb at the same bit depth will always be lossy
[07:41:52] <White_Flame> but if you start from rgb, you might find a unique cmyk for each
[07:41:52] <mfiano> Yeah I'm not doing that
[07:44:41] <|3b|> yeah, i think the mismatch might be correct?
[07:45:28] <mfiano> The problem according to my results is the Go code downsamples BEFORE conversion, whereas mine does it afterwards
[07:45:30] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:45:42] <White_Flame> I'd say run some number individually by hand and see exactly where you think it should fall
[07:46:18] <mfiano> I have no idea why they didn't just assume rgb16 for RGBToCMYK since the whole library assumes RGBA 16bpc for conversions
[07:46:31] <White_Flame> the go version doesn't have rgb16->cmyk8/l16
[07:46:33] <|3b|> if i calculate correctly, exact value of Y is 28703/55609, and (float (* 28703/55609 255)) = 131.62015, (float (/ (* 28703/55609 65535) 256)) = 132.1343
[07:46:42] <|3b|> so truncating you get different values
[07:46:53] <mfiano> White_Flame: That's what I just said in different words. Instead the right shift at the call site
[07:46:58] <mfiano> they*
[07:47:35] <|3b|> and i expect round would be off for other inputs
[07:49:50] <mfiano> I'm not really trying to be bit perfect here, nor trying to be bit-compatible with Go. Just understand what to do to derive CMYK8 from RGBA16-PMA -> CMYK16 for testing purposes (so i can have a list of rgba16-pma inputs and cmyk16 outputs, and truncate to get the cmyk8 outputs)...and I successfully did that to work in all cases
[07:50:11] <mfiano> I don't understand why my changes work in all cases, but so far they do
[07:52:26] <mfiano> and I don't like magic, so I probably won't keep my hacks anyway if I can't figure out why, or find a case that fails.
[07:53:36] <White_Flame> yeah, if the integer range of numerator & denominator are well-bounded, then I think round is better here than truncate
[07:54:14] <White_Flame> although I guess the Go version doesn't do any rounding
[07:54:33] <White_Flame> and thus the 131.6 vs 132.1 result difference
[07:56:22] <mfiano> The Go code is committing all kinds of sins. Like taking double-float coefficients from international video broadcast standards and rounding them to integers, causing algorithms to go out of range and wrap-around, etc
[07:56:30] <mfiano> I would not look at it for "what to do"
[07:57:06] <White_Flame> if you did rounding for the result, then the 16-bit result and 8 bit result would match
[07:57:23] <mfiano> THat wasn't the case for me.
[07:57:44] <mfiano> Maybe I didn't do exactly what you mean.
[07:57:47] <White_Flame> well, this particular 28703/55609 number would
[07:57:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:58:33] <dave0> 65535/256=255.99
[07:58:40] <White_Flame> *255, it's 131.6.  *65535/256 = 132.1
[08:00:09] <mfiano> dave0: the first is zero-indexed, and the second is 1-indexed power of 2 range, what do you expect?
[08:00:13] <|3b|> yeah, i don't think you can get same results as high byte of cmyk16 just by changing rounding
[08:00:41] <|3b|> 256 is from taking high byte of 16bit value
[08:01:16] <White_Flame> (round (* 255 x)) == (ash (round (* 65535 x)) -8), for this number
[08:02:31] <White_Flame> both being 132
[08:02:58] <White_Flame> while the "true" answer is 131.62015
[08:03:40] <White_Flame> however, I won't say that this rounding will be equal for all numbers
[08:05:01] <mfiano> https://gist.github.com/mfiano/0c3ac4a2140b5a310a723ff2e0833937
[08:05:02] -ixelp- *sly-mrepl for sbcl*.txt · GitHub
[08:05:13] <mfiano> here's a list of stuff to test more than "1 number" :)
[08:05:36] * |3b| is fairly confident no rounding will be the same for all inputs
[08:06:12] <|3b|> but ROUND is probably closer to correct
[08:06:36] <|3b|> as in that example, 132/255 is closer to correct answer than 131/255
[08:06:51] <White_Flame> okay, I just ran all 8-bit and 16-bit numbers, adn my example holds for all combinations
[08:07:46] <White_Flame> https://plaster.tymoon.eu/view/2891#2891
[08:07:55] <White_Flame> using pure rationals
[08:07:58] <|3b|> ah, right, ROUND is round to even
[08:08:01] <mfiano> machine readable version https://gist.github.com/mfiano/cd07cce09ec54ad7d83e01167c15ceb9
[08:08:02] -ixelp- *sly-mrepl for sbcl*.txt · GitHub
[08:08:23] <White_Flame> oh, wrong multiplier on the 2nd one
[08:08:39] <White_Flame> holds for the proper #xffff as well
[08:08:45] <White_Flame> so yeah, use round :)
[08:09:04] <White_Flame> for converting an integer ratio to 0 - 2^n-1
[08:09:20] <White_Flame> for converting an integer ratio to [0,2^n-1]
[08:09:57] <mfiano> can you add a comment to my original gist with your proposed changes to make sure I understand correctly?
[08:09:58] <|3b|> White_Flame: are you missing a / somewhere?
[08:10:21] <White_Flame> hmm, yes, I believe I am :)
[08:10:39] <White_Flame> need a (/ ... w) around the test input forms
[08:11:07] <White_Flame> ...and I hit a div by 0 of course
[08:12:47] <White_Flame> yeah, I get failures here, nevermind.  I think the way the numbers alias to 0-255, vs how they alias to 0-65535, are not easily alignable
[08:15:50] <White_Flame> something something moire pattern
[08:16:21] <mfiano> Well, like I said, I'm not trying to be precise. This is only for testing. I'll just test for +/- 1
[08:16:45] *** Joins: semz_ (~semz@user/semz)
[08:17:55] <|3b|> question is what do you want to test for? just some close # or closest representable #?
[08:18:45] <|3b|> or one of the 2 representable @s bounding the actual value
[08:19:14] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:20:46] <White_Flame> and again, if your goal is to retain precision between successive transformations, you're going to induce less error per step by using floats
[08:20:57] <mfiano> |3b|: that the first subtest passes is all: https://gist.github.com/mfiano/2f0bce3e5853b7323c24af1df0eca16b
[08:20:58] -ixelp- test.lisp · GitHub
[08:21:05] <White_Flame> (or sticking with rationals if not speed constrained)
[08:21:07] <|3b|> well hard to store floats in 8 or 16bit integers :)
[08:21:28] <mfiano> hard to store floats in floats
[08:21:46] <White_Flame> why do we need 8/16 bit integers?  those tend to be the final serialized formats
[08:21:59] <White_Flame> intermediate calculations should be in max precision if precision is the driver here
[08:22:10] <mfiano> Again, it is not
[08:22:19] <White_Flame> what's the application here then?
[08:22:24] <|3b|> because that was the design spec? :p
[08:22:53] * |3b| also would be somewhat surprised by something doing large chains of conversions anyway
[08:22:53] <mfiano> just experimenting with some algorithms that work with integral colors
[08:23:25] <mfiano> ^
[08:23:36] <White_Flame> welp, integers are gonig to lose precision changing between color spaces & depths
[08:23:44] <mfiano> That is expected
[08:23:45] <White_Flame> and so there's no correct results
[08:23:57] <|3b|> well, there is a most correct result :)
[08:24:34] <White_Flame> and with those errors, round-trip smoke tests are going to potentially drift
[08:26:02] <mfiano> Given this discussion, I might redo everything to use floats. But they'd likely be single-floats.
[08:26:03] * |3b| would probably have included rational and/or float formats in addition to the 8/16 int to use as reference and for default implementation
[08:27:23] <mfiano> Makes more sense for spaces like PCbCr too, which typically is 0..1, -0.5..0.5, -0.5..0.5
[08:29:10] <|3b|> yeah, easier to understand if you can separate "map to/from N-bit integer" from "algorithms using the customary representation of the color space"
[08:29:30] <mfiano> How much integral precision do you get with a single float, 24?
[08:29:56] <mfiano> Wait that was phrased wrongly
[08:30:18] <mfiano> It's impl specific anyway, standard predates ieeee754 iirc
[08:30:29] <|3b|> 23 i think
[08:30:34] <moon-child> it's 24
[08:30:39] <moon-child> space for 23, but there's a virtual bit
[08:30:39] <semz_> 24 for IEEE754 single floats, yes
[08:32:06] <mfiano> single should be fine. I can't think of any spaces except maybe HSB/HSL that are going to have a magnitude more than 1.
[08:32:58] <mfiano> Not sure what the canonical storage representation is for should polar coordinate numbers
[08:33:05] <mfiano> s/numbers/colors/
[08:33:16] <mfiano> s/should/such/
[08:33:22] * mfiano needs sleep at this point
[08:36:42] <White_Flame> actually it's 24 real bits + the extra virtual "1."
[08:37:03] <White_Flame> whoops, no, actually you're right :)
[08:37:14] <hayley> https://www.youtube.com/watch?v=NIzleISU5jw
[08:37:15] -ixelp- Beat the Clock - YouTube
[08:38:12] * mfiano is still here, just can't effectively communicate past yawn o'clock
[08:43:29] *** semz_ is now known as semz
[08:43:31] <mfiano> Thanks for the discussion. I think I might use single-float channels, even though it's 4x the RAM for large images. Not sure integral is useful except maybe to send to libraries like zpng that require it.
[08:43:59] <mfiano> Which is a one-off as needed conversion
[08:44:49] * |3b| notes that large images aren't, particularly :p
[08:45:22] <moon-child> aren't what?
[08:45:26] <|3b|> large
[08:45:47] <|3b|> 16kx16k 32bpc rgba is only 4gb
[08:45:51] <mfiano> One of the reasons I was using 8/16 bit integers, is there are some generative algorithms that want to pack each channel into a 32/64bit integer.
[08:46:07] <mfiano> But that is a dumb reason that can be avoided, given these problems.
[08:46:30] <moon-child> |3b|: yeah
[08:46:41] <moon-child> (well, 4gb is a lot if you care for real-time, but)
[08:47:03] <|3b|> sure, but are you processing images that size in real time in lisp on cpu anyway?
[08:47:42] * moon-child has an irrational prejudice against real-time graphics on cpu
[08:47:56] <|3b|> exactly :)
[08:48:19] <|3b|> though 4gb isn't even /that/ large on gpu
[08:48:50] <mfiano> I don't think I mentioned publicly that I have given up on gamedev for the most part, as it wasn't healthy for me. This certainly isn't for real-time graphics work :)
[08:48:51] <|3b|> though i'd probably think about it a bit there
[08:48:56] <moon-child> isn't 4gb a normal-ish size for entire gpu mem?
[08:49:30] <mfiano> moon-child: I would hope not. My 5 year old gpu has 6gb
[08:49:42] <|3b|> depends on your idea of normal
[08:49:52] <moon-child> mfiano: mine has 8gb.  But.
[08:49:59] <moon-child> same order of magnitude still
[08:50:41] <|3b|> (but that applies on cpu too, lots of people who wouldn't want you randomly using up 4gb on cpu either)
[08:51:24] <moon-child> sure
[08:51:35] * moon-child 's old laptop had 6gb ram, I upgraded it to 12g
[08:52:22] <moon-child> I think the previous one had 4gb.  That's quite a while ago though
[08:52:32] <mfiano> Most image algorithms are highly parallelizable. Who wants to join my distributed computing cluster to finish one 16kx16k image this year?
[08:52:44] <moon-child> haha
[08:53:13] <|3b|> yeah, laptops, phones, and sbcs can bias the numbers downwards a lot, as can where/how you live
[08:53:35] <sm2n> lispcafe@home
[08:54:07] <White_Flame> skynet demake
[08:54:50] <|3b|> but still pretty easy to underestimate how much space you are willing to use for things even on smaller systems, if you've been doing computing long enough :)
[08:55:26] <|3b|> if you built your mental model 10 or 209 years ago, you might be missing some orders of magnitude :)
[08:55:55] <moon-child> wonder if I could finnesse my way into an internship at pixar or some such.  'Qualifications: [...] You understand photorealistic rendering'
[08:56:46] <|3b|> understanding all of that topic would probably count as qualified :)
[08:57:24] <moon-child> which topic?
[08:57:31] <moon-child> oh
[08:57:32] <|3b|> "photorealistic rendering"
[08:57:33] <moon-child> :D
[08:57:37] <moon-child> yeah
[09:00:35] * hayley goes on hacker news
[09:01:08] <moon-child> always a bad idea
[09:01:16] <hayley> "Many of Gemini's adherents can be described broadly as left-anarchists or left-libertarians. [...] Their alternative is human-scale technology and human-scale communities: a protocol so brain-dead simple you can do a whole pile of shit with it yourself" "Yeah well, I'm a post-left anarchist and 'human' things are a spook. Get rekt nerd"
[09:01:16] <mfiano> question is if single-float is enough/even useful for a whole pipeline
[09:01:38] <mfiano> for simple things like Porter-Duff
[09:01:48] <moon-child> mfiano: why wouldn't it be?
[09:02:42] <mfiano> Same reason it isn't for gamedev I suppose :)
[09:02:49] * hayley uploaded an image: (213KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/XciFSoYXiXQpigsVvWGtcghk/well-spooked-my-prototypes.jpeg >
[09:02:59] <moon-child> hmm?  Isn't gamedev all single-floats?
[09:03:07] <moon-child> perhaps a few integers here and there to spice things up
[09:03:30] <mfiano> On the gpu it is. But the long chains of cpu processing accumulates error fast with single floats
[09:03:57] <White_Flame> for colors & vectors that error doesn't end up significant
[09:04:27] <hayley> "hoomans kale"
[09:04:55] <mfiano> I was specifically talking about vectors.
[09:07:27] <|3b|> single float isn't enough for position in large-scale games
[09:07:30] <mfiano> If I could count the number of times we dealt with numerical accumulation error for Virality Engine over in #bufferswap. It's also why I later decided to do everything in doubles and convert before uploading them each frame, since it is a performance trap to use doubles on the GPU.
[09:07:35] <mfiano> and that
[09:10:26] <|3b|> though probably as likely to be replaced with fixed point (or single + int, or 2 singles) as doubles
[09:12:10] <hayley> "It is well known that many Lispers like progressive/art rock, such as the work of Frank Zappa. Robert Strandh is one of such Lispers. The use of a sliding compacting collector in the SICL specification, rather than semispace copying, of course is a Frank Zappa reference: https://www.youtube.com/watch?v=x8B5FiVg5HA"
[09:12:11] -ixelp- Frank Zappa - Broken Hearts Are For Assholes (Sync Fixed) - YouTube
[09:15:39] <hayley> ("I don't get it." Forwarding pointers are sometimes called "broken hearts". The SICL collector doesn't use forwarding pointers, unlike copying GC or some other compacting algorithms.)
[09:15:45] <moon-child> robert 'what if we just had a global gc' strandh
[09:16:30] <hayley> Robert "You need more memory to GC efficiently? Just use the disk to page lmao" Strandh
[09:16:44] <hayley> "...and also throw moar cores at it, bandwidth be damned"
[09:18:33] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[10:20:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[10:23:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:24:24] <gilberth> Help! My Lisp is acting funny. I traced a function. One particular invokation is not traced, I placed a (break) there, it is called, backtrace leads me to a call site, at which the program definitely isn't coming along. Reboot Lisp?
[10:24:59] <hayley> This is #lispcafe tech support, have you tried turning it off and on again?
[10:26:09] <gilberth> hayley, this is why I don't like image based development. It'll be challenge to reload everything. But then I hate batch oriented systems. Oh dear.
[10:27:26] <|3b|> are any inlining or generic functions involved?
[10:27:44] <|3b|> or calling through function objects
[10:28:04] <gilberth> No inlining but lots of generic functions. No FUNCALL.
[10:28:41] <|3b|> more specifically is the traced function or confusing call site generic
[10:29:01] <|3b|> not that i can remember why i think that would be important :/
[10:29:10] <gilberth> Everything is a generic function with CLIM.
[10:29:14] <hayley> gilberth: But you have the transporter^WMAKE-LOAD-FORM to dissect an image.
[10:29:33] <gilberth> Anyhow, I usually don't face that kind of failure mode. I'll "reboot" Lisp.
[10:30:10] <|3b|> there is also the C-c C-c in sldb in backtrace of break hammer (assuming sldb applies) 
[10:30:17] <|3b|> C-u C-c C-c
[10:32:08] <hayley> gilberth: If MicroPython raised US$130e3, and compilation is around 20× as fast as interpretation, should I value my startup at US$2.6e6?
[10:32:25] <gilberth> What should that do? It says "recompile-frame-source". The source that the debugger thinks that there is doesn't agree with actual program flow.
[10:33:01] <gilberth> hayley: Tech bubble is over.
[10:33:02] <|3b|> i was actually thinking of something else that doesn't exist, but intent is recompile every function in the stack
[10:33:28] <|3b|> with C-u, recompile with (debug 3)
[10:33:44] <hayley> gilberth: Was the bubble over in 2014?
[10:33:49] <gilberth> |3b|: But the stack shows plausible functions yet the sloc is bust.
[10:34:06] <gilberth> hayley: No, the bubble was fine in 2014 and only beginning.
[10:34:15] <hayley> Dammit.
[10:34:53] <moon-child> oh, you mean the other bubble
[10:34:56] <moon-child> well better catch the next one then
[10:35:00] *** Joins: shka (~herr@109.231.0.226)
[10:35:09] <gilberth> |3b|: I sail with (debug 3) all the time. Thanks for your effort. I didn't actually meant to ask for help. Sorry.
[10:35:24] * |3b| was trying to make sure the functions being called matched the source, in case there had been changes that had (unintentionally) not been compiled yet
[10:35:52] * |3b| 's help probably wasn't actually helpful so sorry for that in return :)
[10:36:13] <gilberth> |3b|: 'v' in the backtrace leads me to a site that definitely isn't invoked.
[10:37:31] <|3b|> and i think what i was thinking of is C-c C-k in M-. buffers (or who-calls buffers) to recompile all the methods of a function, which probably isn't helpful
[10:38:13] <gilberth> My sloc and xref information must be bust.
[10:38:19] <|3b|> if using sbcl, the option to trace to tell it to tell you which methods were called may be relevant?
[10:38:46] <gilberth> No, that's not an issue here.
[10:39:27] <gilberth> I'll prepare some coffee, save buffers, and try to reload the whole thing.
[10:40:47] <gilberth> hayley: You value only as much as people are happy to invest into your idea.
[10:41:17] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[10:41:20] <hayley> It better be more than half a bottle of orange juice, because I still have to pay moon-child.
[10:43:21] <gilberth> hayley: I trade one bottle of orange juice for 25% or your business shares.
[10:43:41] <hayley> 15%.
[10:44:29] <gilberth> 25% is important to me, as otherwise you could just kick me out by having a 75% vote.
[10:44:43] <hayley> Sure, fine.
[10:44:51] <gilberth> Deal.
[10:44:59] * hayley is in a union of egoists, there are no shares. gilberth gets nothing. 
[10:45:00] * hayley runs off with the orange juice
[10:45:12] <moon-child> oi, you still owe me!
[10:45:26] <hayley> Fine, here's your juice, keep the damn change.
[10:45:53] * gilberth sells 10% shares $2.6M.
[10:46:31] <gilberth> I now have 15% and cash. I win.
[10:46:55] <moon-child> I have orange juice
[10:46:57] <moon-child> I win
[10:47:19] <gilberth> Is this a win/win/win situation?
[10:47:31] <hayley> I have a collective individualistic cooperative of concrete, self-oriented will in pursuit of ego (no crabs).
[10:54:20] <White_Flame> I have a curious arrangement of 0s and 1s, of no use to anyone else than me
[10:54:52] <moon-child> what colour are they, though?
[10:57:25] <White_Flame> the color of mind
[10:57:50] <moon-child> ;o
[11:11:49] <ck_> very dreamy image. https://www.youtube.com/watch?v=WEhS9Y9HYjU
[11:11:50] -ixelp- The Windmills of Your Mind - Noel Harrison - YouTube
[11:12:12] <ck_> "circles that you find in the windmills of your mind" are obviously the zeros
[11:29:55] <shka> https://www.youtube.com/watch?v=E9JxV1JMcZE
[11:29:55] -ixelp- Zeros - YouTube
[11:36:30] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:23:02] * hayley trying to write lyrics, but runs out of steam for the last verse
[12:24:35] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:24:47] <contrapunctus> https://www.youtube.com/watch?v=OHfgDPWFEyA
[12:24:48] -ixelp- Paganini-Tarrega - The Carnival of Venice for guitar solo (audio + sheet music) - YouTube
[12:25:42] <shka> hayley: you should go full cocteau twins 
[12:25:47] <shka> and invent your own language 
[12:26:24] <shka> or at least few words
[12:28:49] <Duuqnd> or just add screaming
[12:29:04] <Duuqnd> works especially well if it doesn't fit with the rest at all
[12:29:06] <shka> or insert airplane noise 
[12:29:16] <hayley> Careful with that axe, Duuqnd.
[12:29:26] <hayley> But no, I'm writing a song about rubbish pride parades.
[12:31:04] <shka> hayley: insert Death inspired "Why? No, God..." from the ending of a moment of clarity
[12:33:33] <contrapunctus> hayley: huh...do share o.O
[12:34:51] <phoe> (let #1='#3=setf #.`(#3# #.(cadr '#1#) #2=#.`(* #0=(*) #4=(#5=+ ,#0# ,.#.`'(,#0#)) (#5# #0# #4#)) . '(* #2##2#)) #.`(+ ,@'#1#))
[12:36:07] <phoe> one second, that's a bit too readable
[12:36:10] <phoe> (let #1='#3=setf #.`(#3##.(cadr'#1#)#2=#.`(* #0=(*)#4=(#5=+,#0#,.#.`'(,#0#))(#5##0##4#)).'(* #2##2#))#.`(+,@'#1#))
[12:36:18] <hayley> Not until I've written it, mkay?
[12:38:23] <phoe> shit, I forgot to use double backquote in thre
[12:38:28] <phoe> oh sigh, TODO for later
[12:49:47] <moon-child> ```,',',(+ 2 2)
[13:02:29] * hayley gets a call from her father.
[13:02:59] <hayley> "When are you coming back?" "I don't know." "Do you want to go for a bike ride tomorrow." "What the fuck do you think?" "That's not an answer. Don't be rude." "You don't be rude first." "I wasn't being rude. We had an argument, so?" "Yeah, we had an argument. And when we have arguments, we threaten to hit each other. No. Fuck off."
[13:04:31] <hayley> I'm sure that's the answer he wanted, really.
[13:17:01] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 240 seconds)
[13:31:09] <dave0> :-(
[13:31:45] <hayley> Don't worry, I recorded the conversation and I sampled it for another song.
[13:45:21] <hayley> "It sounds like Shine On You Crazy Diamond, except it's a sad excuse for a dance-electronic track, and I _don't_ miss that guy at all!"
[13:50:18] <shka> https://www.youtube.com/watch?v=jG0jSp9bDp8
[13:50:18] -ixelp- Disco Elysium - Sad FM - YouTube
[13:51:32] <shka> spoiler
[13:51:34] <shka> obviously
[14:02:37] *** Quits: Catie (~user@user/catie) (Ping timeout: 240 seconds)
[14:05:37] <pl> snowflake is funny
[14:06:17] <hayley> "Like no book publisher ever writes math equations with RPN, unless they are writing about Forth or Lithp or some intermediate code." "Haha SICM goes brrrrr"
[14:07:28] <semz> Structure and Interpretations of Computer Mathematics?
[14:07:53] <hayley> Classical Mechanics
[14:08:08] <hayley> https://groups.csail.mit.edu/mac/users/gjs/6946/sicm-html/book.html
[14:08:09] -ixelp- Structure and Interpretation of Classical Mechanics
[14:08:19] <semz> I did not expect the SI part to be right
[14:14:06] <selwyn> good morning everyone
[14:15:53] <hayley> Good morning beach!
[14:19:41] * selwyn is not a beach
[14:20:28] <ck_> your skill in auditory pun has increased by one
[14:27:27] <phoe> #.(gme)
[14:28:17] *** Quits: jeosol (~jeosol@user/jeosol) (Ping timeout: 256 seconds)
[14:29:12] <selwyn> til 'biddy' is a word
[14:29:17] <selwyn> adversarial wordle is cruel
[14:29:41] <ck_> come play babble royale with me :)
[14:30:51] <phoe> just had a weight thought: we are all dynamic-extent within Earth's scope
[14:31:15] <ck_> even if I jump really high?
[14:31:28] <phoe> well, then the GC can no longer reach you
[14:31:54] <phoe> you become a memory leak
[14:32:50] <selwyn> mistake the aliens made in rick and morty was to write the earth simulation in rust
[14:32:58] <ck_> my man
[14:37:21] <selwyn> there is a lot of stuff in sicm
[14:38:04] <hayley> If you leave, then a transporter trap occurs and the universe stops while it fixes pointers. Wouldn't recommend it.
[14:44:00] <selwyn> https://www.irishmirror.ie/news/irish-news/men-who-dragged-body-carlow-26024341
[14:57:22] * |3b| wonders how much worse (in the sense of increasing shortest possible game) a more adversarial wordle could be
[14:59:51] <|3b|> "last 4 letters are OUND" would have a fixed game length of 8, so should be room to "improve" on 4 while still actually having more of a game than letterle
[15:03:00] <hayley> https://www.youtube.com/watch?v=GG5cK3-0baM
[15:03:01] -ixelp- lamb sus - YouTube
[15:03:17] * |3b| also can't decide if i want to finish implementing something to brute-force 4-move games or just decide that having probably found a few hundred of them is good enough :p
[15:03:58] <phoe> (with-condition-restarts (make-condition 'condition) (compute-restarts) (error "ha ha"))
[15:04:02] <phoe> protip: do not evaluate this
[15:04:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[15:05:34] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:07:33] <shka> phoe: mmmm, but i want to 
[15:07:50] <hayley> https://www.youtube.com/watch?v=0N2sFoC1VIY
[15:07:50] -ixelp- [YTP] The Respiced Cop Tazer - YouTube
[15:08:14] <hayley> "It also helps to glue the Finn" "<Linus> Fuck you!"
[15:10:53] <phoe> shka: well it's gonna be your responsibility
[15:10:54] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:f9d3:ce75:b234:b0dc)
[15:10:54] <|3b|> so is that just picking an effectively random restart (probably slime's retry) and calling it, in that case looping forever?
[15:11:04] <phoe> |3b|: nope
[15:11:11] <phoe> there's no looping forever
[15:11:27] <phoe> nor is there a RETRY
[15:11:40] <phoe> nor is there any restart being invoked
[15:11:53] <shka> phoe: oh, i have no choice, no choice at all
[15:12:03] <phoe> shka: correct
[15:12:13] <shka> curious 
[15:12:16] <|3b|> so much for me guessing from trying to read the spec :)
[15:12:24] <|3b|> sbcl repl gives me debugger with a "
[15:12:33] <|3b|> kill the thread" restart, which exits
[15:12:45] <shka> yeah, and nothing more
[15:13:01] <shka> C++ level of fuck you
[15:13:05] <shka> :P
[15:13:08] <phoe> :D
[15:13:16] <phoe> |3b|: oh, so it *does* give you a restart after all
[15:13:18] <phoe> curious
[15:13:43] <|3b|> so does it rebind all active restarts to the anonymous condition, making them not apply to the ERROR?
[15:14:01] <phoe> |3b|: yes
[15:14:17] <phoe> in SLIME, this actually works
[15:14:39] <phoe> it seems that both SBCL and CCL are smarter than that and give you some "get me out of here" restarts though
[15:15:49] <shka> phoe: nah, it gives restart, but i did not attempt to run this from slime, because i am smarter then this :P
[15:16:15] <shka> (and also i suspected that this may terminate sbcl while i work)
[15:16:30] <phoe> I mean, slime gives me no restart
[15:16:41] <phoe> (and this doesn't terminate, it just makes things a bit more annoying)
[15:16:55] <phoe> (in particular, you are in a debugger that is hard to quit)
[15:21:39] *** Joins: rogersm (~rogersm@90.166.180.250)
[15:21:47] <selwyn> https://journal.spencerwnelson.com/entries/nextkb.html
[15:21:47] -ixelp- Reverse engineering the 1988 NeXT keyboard protocol
[15:23:37] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 240 seconds)
[15:26:54] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:35:43] <hayley> https://www.youtube.com/watch?v=nxmESvUHB9s
[15:35:44] -ixelp- New Order - Prime 586 (1982) - YouTube
[15:40:59] *** Joins: vats (~vats@180.149.226.242)
[15:44:03] <contrapunctus> Re: making new languages
[15:44:16] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[15:44:17] <contrapunctus> https://jabjab.de:5443/upload/a75f5b15713067434614f6d0c986f536c301cf7e/KEmqUvuGM4nE7zvqknrYXo1BZ95UM7Y4SpwTmOUt/xXoQboN3TSu6j4LeRLkfCg.jpg
[15:46:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:47:26] <selwyn> interesting that tolkien found it weird to actually speak his languages
[15:47:38] <selwyn> https://www.youtube.com/watch?v=t-K1ypFoaa8
[15:47:38] -ixelp- J.R.R. Tolkien talks about languages - 1968 (subtitles) - YouTube
[15:50:04] <hayley> The good idea involves anti-Semitic caricatures or what?
[15:50:54] <ck_> is it in active use somewhere?
[15:51:11] <ck_> I bet there are klingon chatrooms or entire servers
[15:52:59] <selwyn> harry potter starts off in book one with the magical world being great and tolerant, until gradually you discover that it is actually extremely racist towards elves and the other creatures
[15:53:55] <selwyn> although this is sometimes criticised, it is actually excellent preparation for life in britain
[15:55:44] <hayley> "Until gen 3 blockchains become mainstream and anyone can run a node, bring their friends in and create their own chain that federated to other chains they trust, even blockchain won't be truly decentralized. I'm hoping for that day."
[15:55:59] <hayley> Have I mentioned I dislike federation brainrot
[15:57:06] <hayley> "Guys we need a global distributed ledger" "Nah mate, too centralised, centralisation is when you have one thing. We need more small ledgers, that you end up having to verify all of em cause that's how spending works"
[15:58:51] <shka> selwyn: as a polish person, i approve this message 
[15:59:06] <selwyn> i need to get on all of that polish fantasy stuff some time
[15:59:08] <selwyn> witcher
[16:00:38] <shka> witcher is pretty good, but polish fantasy as a whole is actually rather poor
[16:01:03] <shka> you can read some Lem if you really want the best stuff
[16:01:15] <selwyn> oh, ok
[16:03:18] <shka> but, anyway, Sapkowski is enjoyable 
[16:03:28] <ck_> I liked solaris and the martian
[16:03:41] *** Joins: vms14 (~AndChat11@114.red-79-153-195.dynamicip.rima-tde.net)
[16:04:38] <vms14> pjb: are you there?
[16:04:57] <vms14> Did you build ecl in android?
[16:05:35] <vms14> I see the ecl-android repo (seen it before but now I was looking at the ndk) and I wonder
[16:06:17] <vms14> As the repo seems to say it build correctly then is just a matter to add ffi stuff so lisp can access to android functions?
[16:06:46] <vms14> It sounds really nice and idk why no one has done it yet
[16:07:39] <vms14> I have to learn about android dev, just made a hello world with kotlin, but now looking at the sdk, I just need to compile a lisp in C and add ffi to the android functions 
[16:07:51] <vms14> Ndk*
[16:08:27] <vms14> Also if common lisp is a problem there is s7 scheme, but I prefer cl
[16:08:49] <vms14> S7 scheme should give no trouble as it's ansi C
[16:09:08] <hayley> Apparently ECL works for running Macsyma on my phone.
[16:09:37] <ck_> shka: I lent the book to someone so I can't check right now, but in the Star Diaries there's a story about the nice and lucious life in an utopia, but as soon as someone stops taking the drugs it is revealed that there's no shiny luxurious environment but slop,  there's no elevator but a person carrying others, and so on
[16:09:56] <ck_> that's the ussr and the drugs are the propaganda -- yes/no ?
[16:10:18] <vms14> Hayley https://gitlab.common-lisp.net/ecl/ecl-android
[16:10:18] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[16:10:19] -ixelp- ecl / ecl-android · GitLab
[16:10:42] <vms14> It seems I just need to add ffi
[16:11:06] <vms14> it's a dream to make android apps with lisp
[16:11:13] <vms14> but it seems possible 
[16:11:19] <selwyn> i did android dev before getting into lisp
[16:11:25] <selwyn> would be nice to combine those two things
[16:11:34] <vms14> Selwyn I was learning kotlin
[16:11:37] <random-nick> I wonder if abcl could be made to run on android
[16:11:48] <selwyn> random-nick: unfortunately not
[16:11:55] <vms14> But you know, once you use lisp you don't want another lang
[16:12:05] <vms14> Random I had look too
[16:12:11] <selwyn> i experimented with various jvm based lisp solutions
[16:12:24] <vms14> They say it does not target the dalvik machine which is the android one
[16:12:32] <random-nick> clojure and kawa scheme can run on android I think
[16:12:36] <vms14> selwyn you goy something?
[16:12:39] <vms14> Got
[16:12:44] <selwyn> well
[16:12:52] <selwyn> i tried this for example https://cljsrn.org/
[16:12:53] <vms14> Random I also looked at clojure
[16:12:53] -ixelp- ClojureScript + React Native
[16:12:58] <selwyn> but i would not recommend it
[16:13:02] <vms14> They recommend react native so meh
[16:13:17] <shka> ck_: i would not consider this to be allegory for a propaganda
[16:13:17] <selwyn> the most unstable stack i've used
[16:13:23] <vms14> but I think ecl is viable 
[16:13:27] <random-nick> yeah, android is missing some builtin java packages that abcl uses
[16:13:31] <random-nick> or something like that
[16:13:43] <vms14> Does not suppprt java beans
[16:13:58] <shka> ck_: i consider this message to be rather simple "It was impossible to create utopia, so we went for the next best thing"
[16:14:14] <vms14> Idk about ecl and idk why no one has started adding stuff
[16:14:16] <selwyn> after exploring the alternatives, i concluded that 1) common lisp is the industrial strength lisp 2) if you really want to use lisp, and you have the option of using common lisp, then you should do that
[16:14:23] <random-nick> regarding kawa scheme on android: https://www.gnu.org/software/kawa/Building-for-Android.html
[16:14:23] -ixelp- Kawa: Building for Android
[16:14:33] <shka> selwyn: how eloquent
[16:14:37] <selwyn> doing clojurescript to talk to react native was simply a pain
[16:14:47] <|3b|> selwyn: and if you don't have the option, implement your own CL? :p
[16:14:48] <selwyn> you have to keep many different levels in your head at once
[16:14:50] <vms14> Selwyn yes, but I see lisp like a black box which has troubles to interact with the outside world
[16:15:07] <|3b|> at least that's what i tried :)
[16:15:11] <vms14> Like it's encapsulated in its own world xD
[16:15:35] <selwyn> vms14: which interactions are missing that you would like to see?
[16:15:46] <selwyn> in the case of android apps, i mean
[16:16:11] <hayley> Another lovely thing my dad tried was to get me to handle cleaning chemicals that one should not handle without PPE.
[16:16:52] * |3b| wears PPE to use a blender or cut onions :)
[16:16:53] <hayley> "Just dilute it, didn't you go to university?" Yeah, and they wouldn't just dilute it without knowing how much. And, no, it isn't 50-50 (as he also suggested). This guy is dangerous.
[16:16:53] <shka> if there is no CL, i guess stop using .net
[16:16:54] <vms14> But, if we put android ndk ffi in lisp and lisp inside android we can make some nice stuff
[16:17:22] <vms14> Selwyn I mean in the sense of doing stuff like business stuff or getting libraries 
[16:17:41] <vms14> Its more likely youll end working with raw protocols than with a library
[16:18:00] <hayley> I mean, it's basically a relatively strong acid (pun?). So diluting it is no less suspicious unless you know what you've achieved in terms of pH.
[16:18:07] <random-nick> shka: you can get abcl to run on .net apparently
[16:18:49] <shka> ... how?
[16:18:54] <vms14> I want to make apps for android in lisp
[16:19:11] <vms14> And I blame you all for not providing me a nice way to do it
[16:19:16] <vms14> XD
[16:19:23] <shka> vms14: use ECL
[16:19:24] <vms14> But seems ecl is the way
[16:19:26] <selwyn> but i don't see what the problem is
[16:19:28] <selwyn> https://lights-of-holiness.eu/android/
[16:19:29] -ixelp- Common Lisp and QML for Mobile
[16:19:39] <selwyn> these examples are perfectly valid android apps
[16:19:46] * |3b| would offer a way, but it is probably the furthest from nice of the available options :)
[16:19:49] <random-nick> shka: well apparently the mono project ported java to the clr
[16:20:05] <vms14> Didn't u had to pay?
[16:21:33] <shka> random-nick: ... ok?
[16:21:36] <vms14> Oh, I'll try it later
[16:21:41] <shka> sounds rather surprising
[16:22:06] <vms14> Thanks for the link, I think I saw it in the past when I was using netbsd and I couldn't grt any android ndk or tools
[16:22:09] <random-nick> yeah there was a commercial CL geared towards mobile OSes called mocl
[16:22:12] <selwyn> yes
[16:22:15] <random-nick> not sure if it's active
[16:22:48] <vms14> Selwyn did you tried ecl in android?
[16:22:55] <vms14> Try*
[16:22:56] <selwyn> it is also not advisable to use something in android dev if it is not maintained
[16:23:05] <random-nick> also, lispworks can deploy to android apparently, but you probably have to pay extra for that platform (on top of the already expensive base price)
[16:23:07] <selwyn> not like lisp where we can pick stuff up after 20 years
[16:23:19] <selwyn> vms14: i have not tried it but i decided it was the best option
[16:23:35] <selwyn> i obtained a smartphone for the first time in years recently so it has actually been on my to do list
[16:24:01] <vms14> It seems, once I saw the ndk and how you can compile c to work in android I thought about ecl and the s7 scheme
[16:25:04] <vms14> I was wondering in providing ffi for stuff like creating textviews and adding them to the view, etc in lisp
[16:25:42] <selwyn> suspect that is highly non trivial
[16:25:43] <vms14> Idk how much the ndk exposes and how "fun" will be to provide the ffi
[16:26:03] <vms14> Jni helps you map c types to java types
[16:26:11] <selwyn> android isn't designed to make this kind of thing easy, that's why we have to perform this whole dance with ecl and qt5 in the first place
[16:26:13] <vms14> But there are android
[16:26:22] <vms14> Android header files in C
[16:27:09] <vms14> So much hype
[16:27:39] <vms14> And a lot of stuff to do, but we could start by little stuff
[16:28:20] <vms14> I think a lit of lispers are really interested in building apps for android with lisp
[16:28:34] <vms14> Lot* sorry I'm on the phone
[16:28:53] * |3b| suspects you could even find groups of 2 or 3 interested in doing so the same way :)
[16:29:15] <vms14> 3b I mention it because this is not usually the work of only one person
[16:29:38] <vms14> The lisp community could provide some stuff to create apps in android
[16:29:54] <|3b|> i mention this because there aren't many CL devs with that much spare time, and they tend to have different priorities so you probably shouldn't expect lots of help :/
[16:29:54] <vms14> And lispers are usually very good programmers
[16:30:27] <vms14> I do not really
[16:30:41] <|3b|> but i'm sure the ecl-android people would be glad to have another person helping :)
[16:30:49] <vms14> but I think if some lispers get to work together with this goal they could provide something nice
[16:31:10] <vms14> Like what emacs and slime is but for android
[16:31:14] <random-nick> this fork of abcl claims to run on .net https://web.archive.org/web/20150908042707/http://code.google.com/p/uabcl/
[16:31:15] -ixelp- Google Code Archive - Long-term storage for Google Code Project Hosting.
[16:31:31] <random-nick> put it seems it only ever had one release and that was in 2011
[16:32:30] <vms14> Anyways if ecl would be a trouble I'd go for s7 scheme, cause it sure works
[16:32:42] <vms14> but then you loose common lisp
[16:33:14] <contrapunctus> random-nick: https://github.com/Lovesan/bike http://foil.sourceforge.net/
[16:33:15] -ixelp- Foil - a Foreign Object Interface for Lisp
[16:33:34] <random-nick> contrapunctus: yeah but those two are FFIs
[16:33:47] <random-nick> while this is actually running on the clr
[16:34:22] <|3b|> hmm, s7 on android is hard to search for, considering phones named s7 :/
[16:35:07] <vms14> 3b s7 scheme is a scheme in ansi C in two files
[16:35:33] <vms14> https://ccrma.stanford.edu/software/snd/snd/s7.html
[16:35:35] -ixelp- s7
[16:35:50] <|3b|> ok, so you just mean it could run on android, not that someone already made it easy to build android apps with it
[16:35:57] <vms14> Yes
[16:36:11] <vms14> But the goal is common lisp
[16:36:52] <vms14> it just happens that s7 is a nice scheme implementation and it's very easy to put it wherever you want and to modify/add stuff
[16:37:22] <vms14> in the same way lua could also be provided I guess
[16:38:15] *** Quits: vats (~vats@180.149.226.242) (Ping timeout: 256 seconds)
[16:38:40] <|3b|> well, in either case probably most of the work would be in figuring out how to talk to android from 'native' code, and then making that look nice from lisp
[16:39:16] <random-nick> if you're going for scheme on android I still think kawa, is the better bet, since it runs on java so it can directly interface with android system libraries
[16:39:40] <random-nick> s/kawa, is/kawa is/
[16:39:51] <|3b|> does "runs on java" have anything to do with android?
[16:40:32] <vms14> 3b depends on how it runs
[16:42:03] <vms14> running in java it sounds like it could work, like kotlin does, but what android does is transform the java bytecode to the dalvik machine bytecode
[16:42:36] <random-nick> |3b|: well, it does since android does still implement a lot of (an earlier version of) java
[16:42:36] <vms14> But it's a subset of java
[16:42:40] <|3b|> ah, it can translate java in addition to running dalvik code?
[16:42:55] <random-nick> also kawa does seem to have code specifically to build android apps https://www.gnu.org/software/kawa/Android-view-construction.html
[16:42:55] <vms14> compiles java with the jre
[16:42:56] -ixelp- Kawa: Android view construction
[16:43:12] <vms14> Then transforms that to the dalvik bytecode
[16:43:15] <vms14> no idea about how
[16:43:33] * |3b| thought it only had dalvik, and could compile java source to that
[16:44:12] <vms14> So if you for example make a java transpiler, it could transpile to the supported subset and it would work
[16:44:32] <random-nick> does android even have dalvik now or does it always compile dalvik bytecode to native?
[16:44:36] <vms14> idk about an interpreter, I suppose as long as you don't use anything that android does not supoirt youre fine
[16:44:59] <|3b|> dalvik bytecode is what's in the apk as far as i know
[16:45:01] <vms14> random idk
[16:45:17] <vms14> I'm learning about android dev
[16:45:29] <vms14> always  wanted but java stopped me
[16:45:39] <vms14> so I went to kotlin but i miss cl
[16:45:53] <random-nick> |3b|: yeah the compilation to native is done on the phone I think
[16:45:54] <vms14> And it's like bro I want lisp inside this
[16:46:14] <vms14> And the ndk seems to be the way together with ecl
[16:47:01] <vms14> I have no idea but I could try to just get lisp running and provide ffi to create a textview dynamically from lisp and adding it to the view
[16:47:25] <vms14> even this simple thing would present a lot of troubles I cannot imagine now
[16:47:47] <vms14> but I think there is much more work than it simply seems
[16:48:30] * |3b| is failing to find any way to do normal UI stuff from native, only seeing 3d and framebuffer style stuff
[16:48:47] <|3b|> (which i assume is the reason for the qt stuff mentioned earlier)
[16:48:49] <vms14> 3b there is the jni
[16:49:05] <vms14> it could let you interface with c and java code
[16:49:16] <|3b|> yeah, but then you have to build a big java thing to export all the functions to native
[16:49:19] <vms14> You can call code from both directions
[16:49:23] <vms14> yes
[16:49:33] <|3b|> which might not be too horrible to generate, but still a bit of work
[16:49:37] <vms14> there are also the native activities which idk what are they
[16:49:49] <vms14> But it's entirely in c or it seems
[16:49:51] <|3b|> i think native activity is what you do 3d into
[16:50:12] <vms14> then just go for that I suppose 
[16:50:15] <vms14> Idk
[16:50:35] <vms14> Having a close analog to the java functions for android would be nice
[16:51:14] * |3b| would just write a new CL that generates dalvik bytecode :p
[16:51:17] <vms14> seems a lot of work, but being java so verbose it's likely we can automate some code 
[16:51:28] <vms14> XD
[16:51:32] * |3b| would also not finish it though
[16:52:04] <vms14> Idk but i want lisp in android
[16:52:24] <vms14> I'll do it in a dirty way if I'm able to
[16:52:41] * |3b| did actually get far enough to make an APK, but wasn't particularly nice to use
[16:53:23] <vms14> I have to learn about the ndk
[16:54:38] <vms14> But I think I'll go for the jni
[17:05:05] *** Quits: vms14 (~AndChat11@114.red-79-153-195.dynamicip.rima-tde.net) (Remote host closed the connection)
[17:19:55] * selwyn doesn't understand what was wrong with ecl/qt5
[17:20:05] <selwyn> avoiding java is a feature, not a setback
[17:22:07] <shka> what the hell is zlib1g?
[17:24:45] * selwyn learns about 'stablecoins'
[17:25:01] <sm2n> s/stablecoins/scamcoins/
[17:25:32] <selwyn> it seems like a central bank would simply outlaw this sort of thing
[17:25:46] <selwyn> werid
[17:25:59] <sm2n> it already kinda happened
[17:26:05] <sm2n> central bankers killed libra
[17:26:41] <sm2n> and stuff is in the process of happening to other things, like tether
[17:28:29] <selwyn> is it similar to what communist countries used to do
[17:28:37] <selwyn> with convertible currencies
[17:28:59] <selwyn> https://en.wikipedia.org/wiki/Cuban_convertible_peso
[17:30:04] <sm2n> yeah except all the printed money goes to sustain pump and dumb schemes
[17:30:22] <selwyn> i see
[17:30:28] <sm2n> err
[17:30:30] <sm2n> dump
[17:31:30] <selwyn> they had a 3 peso note
[17:31:48] <sm2n> <https://www.singlelunch.com/2021/05/19/the-tether-ponzi-scheme/>
[17:31:51] <sm2n> for ex
[17:31:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:32:04] <sm2n> also not really related but funny <https://www.singlelunch.com/2022/01/09/an-anatomy-of-bitcoin-price-manipulation/>
[17:32:05] -ixelp- An Anatomy of Bitcoin Price Manipulation – Single Lunch
[17:33:29] <shka> selwyn: it is even funnier
[17:33:54] <shka> because consider what actually backs up some of those stable coins 
[17:33:57] <shka> like tether 
[17:34:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:45:35] <selwyn> the dollar?
[17:45:47] <selwyn> or apparently not
[17:45:57] <selwyn> lol
[17:46:09] <shka> yeah, but not just concept of dollar
[17:46:50] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[17:47:19] <pl> re: android - when creating APK files, JVM bytecode in JARs is converted into few DEX files (used to be that there was only one allowed), which are dalvik bytecode only. On phone those can be interpreted, optimized+interpreted, JITted, or precompiled to native code 
[17:47:27] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:49:11] <selwyn> https://www.youtube.com/watch?v=neyY2qC9pCA
[17:49:12] -ixelp- Star Wars Episode 2 Dex's Diner - YouTube
[17:49:50] <shka> selwyn: this whole system is kept together by prayers and a tape
[17:50:26] <selwyn> i can't pretend to understand it
[17:50:28] <selwyn> but i can believe that
[17:51:18] <shka> it is not about understanding it all, it is about the questions
[17:51:46] <shka> questions like: what is the maximum volume of transactions that can be backed up by a stable coin?
[17:51:55] *** Quits: OlCe (~user@lfbn-nic-1-109-134.w2-15.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[17:52:20] <shka> and the answer is, not much
[17:54:14] <phoe> I have a new article for pre-review
[17:54:21] <phoe> or rather, for pre-release review
[17:54:46] <phoe> anyone up for it? it talks about the journey of implementing STATIC-LET plus some useful bells and whistles
[17:58:15] <shka> the heck is static-let?
[17:58:44] <phoe> good point
[17:58:47] * phoe updates the article
[17:58:56] <phoe> https://github.com/phoe/articles/blob/static-let/2022-xx-xx-static-let/static-let.md
[17:58:57] -ixelp- articles/static-let.md at static-let · phoe/articles · GitHub
[17:59:04] <phoe> the top just has an example
[17:59:13] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[18:10:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:11:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:35:00] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[18:35:04] <nij-> phoe o/
[18:35:17] <phoe> nij-: hey
[18:35:32] <phoe> JS is incoherent like holy hell
[18:35:50] <phoe> and weak typing makes it a terrible language to write in directly
[18:36:33] <selwyn> how long will js survive?
[18:36:40] <nij-> forever, if lisp doesn't take over
[18:36:41] <phoe> forever
[18:37:17] <nij-> phoe thanks for sharing
[18:37:25] <nij-> im sure there are many bad points
[18:37:30] <Alfr> That's a pretty long time.
[18:37:34] <nij-> but there are also lots of attacks to lisp from outsiders
[18:37:34] <phoe> nij-: sharing what exactly? I need a bit of context
[18:37:45] <nij-> (sharing your knowledge above)
[18:37:53] <phoe> "knowledge", but okay
[18:37:54] <random-nick> selwyn: depends on where you stand with the ship of theseus
[18:38:09] <nij-> So I think to really compare two things formally, we need a theoretic framework.
[18:38:11] <random-nick> it could be argued that the original javascript is mostly dead
[18:38:31] <nij-> However, it doesn't seem that there's such a framework. And so all comparisons are doomed to be mere opinions.
[18:39:05] <selwyn> there is a js interpreter on the james webb telescope which is forecast to survive until the 2040s
[18:39:18] <selwyn> wondering if there will be js devs in the future to use it
[18:39:30] <random-nick> wouldn't they be opinions even when in a theoretical framework? (from outside that framework)
[18:39:40] <phoe> selwyn: if there are cobol programmers then yanno
[18:39:45] <selwyn> yes
[18:39:56] <selwyn> would be amusing to see js relegated to that category
[18:40:16] <phoe> would be more amusing to see lisp stay exactly where it is
[18:40:19] <nij-> random-nick: Good point. Yes. But that seems to be the best we can do.
[18:40:25] <phoe> and truth be told it's not all that impossbile :D
[18:40:27] <nij-> Nothing has meaning without a framework.
[18:40:52] <nij-> even js dies, there will be another js in the future
[18:41:04] <phoe> frameworks have no meaning without a metaframework either
[18:41:06] <nij-> this won't change, as popularity often comes with stupidity.
[18:41:23] <nij-> phoe: I'm not sure.. think of mathematics.
[18:41:36] <nij-> Math itself is a framework without a metaframework, but it's convincing enough.
[18:41:38] * phoe thinks of https://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems
[18:41:50] <nij-> The ultimate metaframework is the human society I think.
[18:42:14] <nij-> That theorem is also famous but most often misunderstood.
[18:42:32] <ck_> misunderstood how?
[18:42:38] <nij-> I've tried to write a undergrad thesis on it, and gave up because many sources aren't complete.
[18:43:01] <nij-> ck_ in math, most statements are very specific. 
[18:43:15] <nij-> specific meaning that if you change or drop a word, it means completely different things
[18:43:26] <nij-> the problem in Godel's theorem is that it's too popular
[18:43:33] <selwyn> nij- is right
[18:43:37] <nij-> people want to understand it, so there are lots of "blog posts" that deal with it
[18:43:47] <nij-> and then there are lots of false statements about it
[18:43:56] <selwyn> the other thing is that there is a hell of a lot to mathematical logic
[18:44:04] <selwyn> this is the only part that gets any kind of interest
[18:44:11] <nij-> I gave up not because I did not have the ability to follow, but b/c i wasn't convinced enough for a true source
[18:44:17] <nij-> (Godel didn't write in Eng..)
[18:44:29] <ck_> not quite on topic, but I think it's funny that you say "most sources aren't complete" when the context is the incompleteness theorem
[18:44:38] <nij-> ck_ heh
[18:44:42] <selwyn> i think to really appreciate it, you have to really study logic
[18:44:50] <nij-> selwyn: probably not..
[18:45:00] <nij-> you just need a serious expert who knows the complete source
[18:45:04] <nij-> actually, I believe
[18:45:10] <nij-> you need to find a formal proof
[18:45:19] <ck_> nij-: you think reading it in german is beneficial?
[18:45:35] <nij-> Mathematics have a lot to say. But those that could be embedded in a nice stories are not much.
[18:45:41] <nij-> ck_: I don't read german.
[18:45:47] <selwyn> what i mean is, one has to know what axioms and theorems really are
[18:45:49] <ck_> that wasn't my question though
[18:45:52] <nij-> And probably Godel's work wasn't complete in its own sense.
[18:45:59] <nij-> You need to read many papers back then.
[18:46:00] <selwyn> i.e. familiarity with the definitions and contents
[18:46:06] <nij-> A single paper is rarely self-contained.
[18:46:18] <nij-> So I claim it doesn't help even to go back to the first paper.
[18:46:20] <selwyn> otherwise the content of the incompleteness theorems won't be accessible
[18:46:24] <nij-> There are many contexts that's missing there.
[18:46:30] <nij-> SO
[18:46:41] <nij-> The only way is to get a formalized system that proves the theorem.
[18:46:54] <nij-> Something like metamath, in which many theorems are "really" proved.
[18:47:05] <nij-> Most theorems in papers aren't really proved. They are just pseudo codes.
[18:47:39] <selwyn> will take such a culture shift to do that
[18:48:03] <selwyn> and its an open question whether it can help applied maths
[18:48:08] <nij-> A full proof of (= (+ 2 2) 4): http://us.metamath.org/mpeuni/2p2e4.html
[18:48:08] -ixelp- 2p2e4 - Metamath Proof Explorer
[18:48:21] <nij-> selwyn: I dunno. Things are changing.
[18:48:33] <selwyn> mathematical culture is so conservative
[18:48:46] <nij-> A Fields medalist, Peter Scholze, seems to be changing this.
[18:49:08] <nij-> Some high-end math he proved is calling for a formal proof in the lang LEAN.
[18:49:15] <nij-> And there are some people who are doing that.
[18:49:21] <nij-> I think this will be the future.
[18:49:41] <nij-> selwyn: Well, they have their own objectives.
[18:50:09] <nij-> Having studied math for years.. I know that some proofs are very hard to formalize, yet they must be correct.
[18:50:29] <nij-> It takes a lot to work for the last 0.001% of certainty.
[18:50:43] <ck_> nightmares of x + SY = SX + y, X + 0 = x resurface
[18:51:00] <selwyn> ck: i like those proofs
[18:51:30] <ck_> selwyn: yeah I should've said it isn't the content that evokes bad memories. Just the guy leading the course
[18:51:30] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[18:52:19] <nij-> anyway
[18:52:35] <nij-> we still need a formal framework in which we can judge JS is inferior.
[18:52:50] <nij-> But there isn't any. So that made me doubt.. "hmm.. perhaps JS isn't that bad".
[18:52:52] <nij-> (fight me)
[18:53:06] <phoe> you are correct, it isn't that bad
[18:53:08] <ck_> fight you using what
[18:53:11] <phoe> it is *worse*
[18:53:33] <nij->  But there isn't any. So that made me doubt.. "hmm.. perhaps JS isn't worse..""
[18:53:37] <nij-> (fight me)
[18:54:08] <phoe> you are correct, it isn't worse
[18:54:13] <phoe> it is the *worst*
[18:54:15] * phoe hides
[18:54:18] <nij-> ha
[18:54:29] <nij->   But there isn't any. So that made me doubt.. "hmm.. perhaps JS isn't the worst..""
[18:54:33] <nij-> (fight me)
[18:54:41] <ck_> pls.
[18:54:53] <phoe> obviously, it isn't the worst!
[18:54:56] <phoe> it's the *worstest*
[18:55:17] <Alfr> nij-, that could be attainable, you'll only have to find one that's more bad.
[18:55:17] <selwyn> and now it gets to claim to be the space language
[18:55:20] <selwyn> instead of lisp
[18:55:44] <nij-> ha
[18:55:55] <Alfr> selwyn, who cares? We have that cuddly green alien. :)
[18:56:23] <nij-> Yeah.. I learn to care less about how popular JS is.. I just need to learn to use parenscript.
[18:57:06] <nij-> Hmm.. but think about this.
[18:57:19] <nij-> Most of our codes are compiled into x86 assembly,
[18:57:27] <nij-> which no doubt is a bad language to work on.
[18:57:43] <nij-> Now think of the browsers as an x86 machine in our case.
[18:57:52] <nij-> The assembly lang happens to be JS.
[18:58:02] <nij-> But that doesn't mean we cannot write in another lang and compile into it.
[18:58:18] <nij-> In fact, in CL we have parenscript, and we also have ClojureScript too.
[18:58:30] <phoe> that's the wrong analogy I think
[18:58:35] <phoe> parenscript compiles CL to JS
[18:58:40] <nij-> Just treat JS as the lowest level of lang, and treat to JS coders as those who key in assembly direclty.
[18:58:44] <phoe> clojurescript is an implementation of clojure in JS
[18:58:52] <phoe> clojurescript is more like JSCL I think
[18:59:25] <selwyn> js is a terrible assembly language
[18:59:27] <nij-> ClojureScript is not compatible with the whole clojure.
[18:59:50] <phoe> neither is JSCL with all of Common Lisp
[18:59:50] <nij-> And at the end, what you write in clojurescript still gets translated into JS, right? (not sure)
[18:59:57] <phoe> yes
[18:59:57] <selwyn> the best approaches i have seen to implementing cl in js involve things like giving up the numeric tower
[18:59:59] <selwyn> which sucks
[18:59:59] <phoe> just like in JSCL
[19:00:17] <nij-> phoe: I see.
[19:00:35] <selwyn> i would use racket for lisp in the webpage
[19:01:27] <nij-> phoe: Now, though we have parenscript, we don't have the full power of CL while dealing with JS.
[19:01:33] <nij-> So that's still a bit off..
[19:01:48] <nij-> E.g. we cannot do CLOS and compile them into JS and expect it to work
[19:01:55] *** Joins: szos (~user@178.74.52.55)
[19:02:00] <nij-> what would be the next step to make the analogy full -- ?
[19:03:16] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:03:57] <random-nick> parenscript is just JS
[19:05:44] <phoe> nij-: neither do we when using JSCL
[19:06:41] <nij-> Yeah cuz the host is still the browser..
[19:07:00] <random-nick> selwyn: I think javascript nowadays has integers in the standard library
[19:07:01] <nij-> I wonder if there's any thing we can do to make parenscript better.. in the sense that it attains the full power of CL?
[19:08:19] <random-nick> also, you could implement your own bignums using javascript objects but it would probably be awfully slow
[19:08:48] <random-nick> you could do something horribly inefficient like church numerals
[19:09:28] <random-nick> or you could use the fact that floats are safe to use as integers at small values (you'd have to figure out division via FLOOR, CEILING, etc.)
[19:10:50] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:f9d3:ce75:b234:b0dc) (Ping timeout: 268 seconds)
[19:12:17] *** Joins: pjb (~pjb@user/pjb)
[19:13:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:14:45] *** Joins: ln43 (~ln43@user/ln43)
[19:17:28] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 250 seconds)
[19:19:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:19:11] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (#lispcafe)
[19:19:42] *** Joins: pjb (~pjb@user/pjb)
[19:25:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:27:38] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[19:32:13] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[19:39:50] <selwyn> integers in the standard library..
[19:44:08] <phoe> random-nick: just set fixnum limits that are low enough for JS to handle
[19:44:23] <phoe> and then proclaim that everything above is a bignum and requires special handling, and also is slow as bals
[19:44:27] <phoe> balls*
[19:44:45] <phoe> that should be possible and feasible
[19:44:46] <phoe> clhs fixnum
[19:44:47] <random-nick> phoe: yeah, but I am proposing such bignums to be implemented by such fixnums
[19:44:54] <phoe> oh! yes, that would work
[19:45:42] <phoe> you can steal the implementation e.g. from ECL, https://github.com/Clozure/ccl/blob/6c1a9458f7a5437b73ec227e989aa5b825f32fd3/level-0/l0-bignum32.lisp
[19:45:43] -ixelp- ccl/l0-bignum32.lisp at 6c1a9458f7a5437b73ec227e989aa5b825f32fd3 · Clozure/ccl · GitHub
[19:45:55] <phoe> just adapt it to a different word size
[19:45:55] <selwyn> (proclaim (js (sucks)))
[19:46:10] <phoe> you didn't quote it
[19:46:14] <phoe> PROCLAIM is a function
[19:46:40] <selwyn> ono
[19:47:20] *** Joins: jeosol (~jeosol@user/jeosol)
[19:48:30] * pl ponders how hard it would be to make SBCL autovectorize nested loops
[19:49:02] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:49:43] <moon-child> js has builtin bignums now
[19:50:02] <moon-child> idk if they're fast.  But they certainly have the _potential_ to be as fast as lisp integers
[19:50:08] <pl> not that widely available
[19:50:10] <moon-child> (though I bet they're not, since no one uses them :P)
[19:54:22] <aeth> Lisp integers are lower level than "bignums"
[19:55:00] <aeth> You have fixnums and bignums, where fixnums are quite large, almost the size of a C int on the same arch (perhaps off by one bit), with the ability to declare smaller signed/unsigned integer sizes to hint that it's probably a fixnum without becoming unportable
[19:55:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:55:29] <aeth> Just having "bignums" without the rest just means that you could have bignums+fixnums but now you're entirely relying on implementation magic with no type hints
[19:55:47] <gilberth> Hurray! I see a ten-fold performance decrease with my code. Dammit.
[19:55:50] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[19:56:00] <aeth> While the naive "bignum" is Python-style, where your fixnum is quite small, maybe < 1000, and the rest are inefficient
[19:56:14] <aeth> or entirely boxed like iirc Java.
[19:56:19] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[19:59:15] <shka> aeth: java is not entirely boxed
[19:59:21] <aeth> Bignum?
[19:59:24] <shka> oh
[19:59:26] <shka> ok
[20:08:46] <selwyn> imagines a java unboxing video on youtube
[20:13:30] <moon-child> aeth: true regarding control, but you do not have overflow checks nor integers anyway in js, so I'm not convinced the performance deltas stack up that nicely
[20:15:00] <moon-child> aeth: and again: there is no reason a smart js implementation could not use the (quite efficient) tagging strategy used by lisp implementations
[20:17:01] *** Joins: kevingal (~quassel@2001:770:c0:401:c8f5:e6ef:3f0f:f4d8)
[20:17:42] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[20:19:00] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[20:24:47] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:29:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:31:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:34:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:41:17] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[21:06:02] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[21:12:45] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[21:30:01] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:31:12] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:34:00] *** Joins: vats (~vats@180.149.226.242)
[21:44:29] *** Joins: Catie (~user@user/catie)
[21:45:30] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[21:49:23] <shka> java no longer requires boxed types for generic containers 
[21:49:35] <shka> and yeah, they use tags for that to happen
[21:51:29] <selwyn> who actually writes patents?
[21:51:51] <lagash> patent-writing bots, naturally!
[21:51:58] <shka> there are lawyers specializing in this 
[21:52:03] <shka> and also, corporate goons
[21:55:49] <selwyn> gnuxie: https://twitter.com/parliawint
[21:58:02] <Gnuxie> nice
[22:11:22] <edgar-rft> selwyn: in germany usually lawyers who have studied both law+physics or some similar tech-degree
[22:12:11] <ck_> .. employed by companies. many such cases
[22:12:54] <selwyn> law and physics
[22:12:56] <selwyn> nerds
[22:13:00] <ck_> :)\
[22:13:18] <edgar-rft> indeed, mega-nerds :)
[22:13:56] <selwyn> i tried to read a patent but it is very dry
[22:15:02] *** Joins: dra (~dra@2a04:4540:6422:2c00:1c1a:dda9:f862:c077)
[22:15:06] <dra> Hello!
[22:15:11] <ck_> General dra
[22:15:22] <edgar-rft> selwyn: the trick is to cover all possible cases to protect your idea from getting stolen while at the same time *not* telling how it really works :-)
[22:15:49] <ck_> Sie müssen nur den Nippel durch die Lasche ziehen
[22:16:52] <selwyn> what i find surprising is that details of the patent have been the subject of papers on the arxiv
[22:22:53] *** Joins: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[22:23:01] *** Quits: kevingal (~quassel@2001:770:c0:401:c8f5:e6ef:3f0f:f4d8) (Remote host closed the connection)
[22:23:39] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[22:23:44] <vms14> hi
[22:23:53] <vms14> I've put s7 scheme in android
[22:24:14] <vms14> made an apk that evals whatever scheme code you pass it
[22:24:25] <vms14> now I should try with ecl
[22:24:37] <vms14> android studio uses cmake 
[22:25:25] <vms14> idk how I should build it, but I'll try to get it running in an android studio project
[22:27:47] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:52:32] <gilberth> Dammit. My machine is playing tricks on me again. For a toy bench one Lisp takes 4s for the getting text extents with CLX and the other only about 200ms. So one XLIB:TEXT-EXTENTS is 20x slower than the other. I have no clue what so ever, why.
[22:53:29] <gilberth> Apart from XLIB:TEXT-EXTENT being slow. I'll find my old Closure sources, where I had my own. But that's another story.
[22:54:34] <gilberth> I could cry. It was fine all the time and for a reason I bring my own specific version of CLX.
[22:56:06] <selwyn> shka: https://pbs.twimg.com/media/FJoUpx1XMAUpVH8?format=jpg&name=large
[22:56:17] <selwyn> assr (anglo saxon slav republic) takes shape
[22:56:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[22:57:34] <Gnuxie> wtf
[22:57:37] <Gnuxie> where is this from lmao
[22:57:56] <Gnuxie> is this trilateral real 
[22:57:59] <selwyn> a product of the liz truss brain trust
[22:58:27] <Gnuxie> we're gonna be under layers of nuclear snow by next year at this rate, that'll be no good for the energy bill hike 
[22:58:27] <selwyn> it is real in her head
[22:58:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:59:19] <selwyn> https://twitter.com/ConGeostrategy/status/1484522102535462912
[22:59:21] <selwyn> its like a shitpost
[23:02:19] <Gnuxie> smh
[23:02:39] <selwyn> yellow power projection arrows
[23:04:00] <Gnuxie> Ahh, the royal route to the indo-pacific 
[23:06:13] <selwyn> why is that on there
[23:07:13] <selwyn> perhaps the dotted line ends in vladivostok
[23:15:31] <vms14> idk if just use s7 scheme and start adding stuff in it or invest time with ecl
[23:16:07] <vms14> I have no idea about how to make the cmake equivalent in android studio for ecl
[23:16:41] <gilberth> What am I missing? What is so special about Paderborn? Or is that a reference to Wolfenstein?
[23:18:08] <gilberth> And thank you ASDF: You loaded the wrong CLX. Again! Why am I pointing it to a specific version? I'll craft a load.lisp with just a row of (load(compile-file "foo.lisp")) forms and be set.
[23:19:18] <selwyn> gilberth: it has a british base?
[23:19:56] <gilberth> Really? The Brits are still here? Or again?
[23:21:03] <ck_> not a base
[23:21:14] <gilberth> As Wolfenstein mentions Paderborn too, I fear I may miss some war reference. Or is there no significance to that little town?
[23:21:16] <ck_> according to the legend, it's a "facility or presence"
[23:21:21] <selwyn> none of your base are belong to us
[23:21:23] <selwyn> (sorry)
[23:21:46] <ck_> where do I apply for some - - - > strategic support?
[23:22:42] <gilberth> Support? What do you need support for?
[23:23:08] <ck_> how would I know without having experienced it first
[23:24:07] <gilberth> Still, is there now some historic significance to Paderborn, that I miss?
[23:24:40] <ck_> why does it need to be historic?
[23:25:34] <gilberth> Nazi related? Because Wolfenstein mentions it and this map of the upcoming new alliances.
[23:26:22] <ck_> https://www.army.mod.uk/deployments/germany/
[23:27:16] <gilberth> That's it?
[23:27:21] <selwyn> gilberth: liz truss, the foreign secretary who presented this map, is not smart enough to encode such messages in the meme map
[23:27:29] <hayley> https://twitter.com/qiaochuyuan/status/1485778343286882310 "guys can we talk about this completely insane thread where oxytocin nasal spray apparently makes an autistic guy not autistic temporarily? i'm gonna be fucked up about this for days"
[23:27:48] <gilberth> selwyn: ok. Thanks for the relief.
[23:29:01] <hayley> My apologies to that guy.
[23:30:01] <ck_> gilberth: "gibraltar" is also on that map, emphasized by underlining. must be a reference to Das Boot, surely
[23:35:05] <selwyn> the underline of sovereignty
[23:36:19] <vms14> I'll just use s7 scheme instead of ecl
[23:36:43] <vms14> I have it working yet so I can get started to provide ffi for android stuff with jni
[23:37:18] <vms14> I really prefer to have common lisp, but at least I can just start and later I could try to do the same with ecl
[23:37:30] <vms14> also s7 scheme is a really nice implementation
[23:43:57] <gilberth> ck_: "Das Boot" is one of my carefully maintained "Bildungslücken".
[23:44:17] <Catie> rec
[23:44:22] <Catie> Wrong window, I apologize
[23:45:05] <ck_> recording started 01:34 [===-------------]
[23:45:34] <selwyn> - - - >
[23:47:26] <hayley> https://www.youtube.com/watch?v=8TEAMHgrxi0
[23:47:26] -ixelp- JJ Burnel - Crabs - YouTube
[23:52:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[23:53:56] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
