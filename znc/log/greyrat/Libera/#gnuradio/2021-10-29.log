[00:06:48] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb) (Quit: uros)
[00:08:51] *** Quits: jemius (~imperator@2001:16b8:2d7d:4b00:21eb:9e3d:79b3:8e6b) (Quit: Leaving)
[00:32:58] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 258 seconds)
[00:33:13] <patchvonbraun[m]> Anyone else experience the eye-watering brokenness of the SDRPlay API3 via gr-osmosdr—->SoapySDR? It’s truly magnificent. 
[00:33:39] *** Quits: schwach (~schwach@191.96.170.110) (Quit: The Lounge - https://thelounge.chat)
[00:33:55] *** Joins: schwach (~schwach@191.96.170.110)
[00:38:50] <patchvonbraun[m]> Gain settings are inverted compared to every other SDR out there. Calling set_gain() causes it to be unable to stream. Bandwidth settings must be exact—there’s no round-to-nearest. Frequently you set a valid frequency and streaming  just stops. Some of this is API or API wrapper incompleteness and some is clearly broken design.
[00:48:01] <bpadalino> that sounds problematic
[00:53:52] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[00:54:29] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[00:57:01] <patchvonbraun[m]> Designed in the UK. I’m surprised it doesn’t also leak oil and you have to climb into the trunk and toss out the spare tyre to fill up the gas.
[01:02:34] *** Joins: flixx (~hi@94.128.65.175)
[01:03:53] <patchvonbraun[m]> Since I’m a Brit I can make those jokes :)
[01:05:11] *** Quits: Clinkz (~hi@37.231.200.252) (Ping timeout: 264 seconds)
[01:08:28] *** Quits: flixx (~hi@94.128.65.175) (Read error: Connection reset by peer)
[01:29:16] <flash[m]> "Nothing but the finest British parts fall off of this car"?
[01:29:45] <patchvonbraun[m]> flash: precisement
[01:30:16] <flash[m]> I have a friend who is an MG enthusiast. He claims they are reproducing in his garage
[01:32:04] <patchvonbraun[m]> I’m familiar with the type :)
[02:15:56] <flash[m]> is there an API call to inspect the value of `[PerfCounters] on` ?
[02:38:03] *** Quits: Keshl_ (~Purple@idlerpg/player/Keshl) (Quit: Konversation terminated!)
[02:49:20] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[02:50:50] *** Joins: Keshl (~Purple@idlerpg/player/Keshl)
[02:52:01] *** Joins: brettgilio (~brettgili@x-node.gq)
[02:56:03] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[03:00:28] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:01:18] <flash[m]> This is the Rosetta Stone: https://static.squarespace.com/static/543ae9afe4b0c3b808d72acd/543aee1fe4b09162d0863397/543aee20e4b09162d0863578/1380223973117/gr_scheduler_overview.pdf
[03:02:30] <flash[m]> I figured out my slowdown ... my source was tagging data, but there's a block that consumes samples and intermittently produces metadata (it really should use a message instead of output). The tags were clogging up that block
[03:24:11] *** Quits: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt) (Ping timeout: 260 seconds)
[03:27:24] *** Quits: nki (~nki@adsl-89-217-141-227.adslplus.ch) (Quit: ZNC 1.8.2 - https://znc.in)
[03:29:05] <willcode4[m]> patchvonbraun: SDRPlay software always talks about gain reductions rather than gains. It probably comes from the Ham world where you want to attentuate things? So, the Soapy SDRPlay Source in GNU Radio has a RF Gain range of -47dB-0dB. But it's not inverted.
[03:31:05] *** Joins: nki (~nki@adsl-89-217-141-227.adslplus.ch)
[03:33:09] <Hash[m]> <muaddib[m]> "you could try a named pipe..." <- Just ran this test, same result as using the BladeRF block in GNURadio. DC spike is still there so at least it's consistent :) 
[03:34:01] <patchvonbraun[m]> If you run osmocom-fft it gets broken out into IFGR and RFGR. Deceasing RFGR towards 0 invreases apparent gain.
[03:38:44] *** Quits: prime (~prime@user/prime) (Ping timeout: 244 seconds)
[03:41:05] *** Joins: prime (~prime@user/prime)
[03:43:01] <Hash[m]> Was shopping around for a spectrum analyzer and debating used vs new, Rohde&Schwarz or HP on the used side or Rigol/Siglent on the new side. Appreciate any feedback.
[03:44:22] <bpadalino> how much can you spend ?
[03:44:40] <bpadalino> do you care if it's completely standalone versus computer controlled ?
[03:45:27] <Hash[m]> Been shopping in the $2500 and under range, was looking standalone but if I can get a lot more bang for the buck with computer controlled open to that
[03:46:11] <bpadalino> i personally have an rsa306 that i like .. i think rtsa is nice, but the software is kinda meh and i think might be windows only (boo) ..
[03:46:35] <bpadalino> i have been impressed with the hardware specs for this: https://aaronia.com/spectrum-analyzers/spectran-v6-usb-real-time/ - and they seem responsive and have linux software plus an API
[03:49:54] <Hash[m]> Holy cow those things look amazing
[03:50:20] <bpadalino> indeed
[03:50:28] <bpadalino> and i thought the price point was very attractive
[03:50:29] <Hash[m]> I hadn't looked at Tektronix because cost was high but used the rsa306 isn't too bad
[03:51:00] <Hash[m]> Yea, entry model seems around $3500 and software looks amazing too... Maybe have to see if there are some youtube demo's
[03:52:07] <Hash[m]> Ah, German company... I am sure it's badass now :) 
[03:52:09] <bpadalino> i will say, i emailed them a while ago and they were responsive .. 
[03:52:45] <bpadalino> bbl
[03:52:56] <Hash[m]> Looks like Santa is making a stop in Deutchland 
[04:12:27] <willcode4[m]> patchvonbraun: gr-soapy (in-tree) is using `setGain(dir, channel, gain)` rather than `setGain(dir, channel, name, gain)`. The "nameless" function make a best guess how to distribute gains across elements, and uses increasing numbers for increasing gain. I don't know if there really is a right way to generically set gains. My version of the SDRPlay driver for osmosdr also has `LNA_ATTEN_STEP` and `IF_ATTEN_DB` for gain names. The LNA atten
[04:12:27] <willcode4[m]> has different numbers of steps based on model and band. So it's really not a simple line of hardware to write generic drivers for. I figured that Gqrx users could read the `ATTEN` in the gain name and figure it out. Otherwise, you get the people who are used to other software saying the attenuations work in the wrong directions.
[04:16:23] <willcode4[m]> gr-osmosdr also has a call for `set_gain(gain, chan)` in its soapy driver. So it should be possible to call the simpler function from there. 
[04:16:37] <patchvonbraun[m]> Gr-osmosdr is using the nameless version. That seems to cause streaming to fail.  I vastly prefer the “distribute as you see fit” way if doing things because it’s easy to make a generic app. I suppose if the “get_gain_names” also returned some kind of semantic hints that would make “as you see fit” easier. I know that with AirSpy you can pass it a device argument hint about gain distribution.
[04:17:30] <patchvonbraun[m]> ALL gain setting in RF hardware is via attenuation even if it’s packaged to look otherwise.
[04:18:08] <willcode4[m]> osmocom_fft will accept named or aggregate gains.
[04:19:06] <patchvonbraun[m]> Yes. I’m trying to figure out what the key difference is between osmocom-fft and my Grc generated code that uses a gr-osmocom source.
[04:20:27] <patchvonbraun[m]> My source is two channel so it’s using the explicit channel form of the calls.
[04:21:16] <patchvonbraun[m]> This may just be a gr-osmosdr bug—at least the fail to stream thing.
[04:21:33] <willcode4[m]> I haven't used the RSPduo.
[04:21:44] <willcode4[m]> I've got a 1, 1A and 2.
[04:22:22] <patchvonbraun[m]> My two channels are heterogenous. The 2nd chanell
[04:22:22] <patchvonbraun[m]> In this case is a file source 
[04:23:21] <willcode4[m]> Ah, 2 osmo channels, one is a sdrplay via soapy and the other is a file?
[04:25:53] <patchvonbraun[m]> Yup. Works great with other devices. The app can do either single channel radiometry or two channels either same device or a pair of RTLs for example.
[04:26:25] <willcode4[m]> You must be in the advanced class.
[04:26:27] <patchvonbraun[m]> If you only have 1 actual channel the 2nd is just a stream of zeros from /dev/zero
[04:26:55] <patchvonbraun[m]> Been at this since 2004 or so :)
[04:30:48] <willcode4[m]> The file source isn't throttled, is it?
[04:33:42] <willcode4[m]> https://git.osmocom.org/gr-osmosdr/tree/lib/file/file_source_c.cc#n103
[04:34:06] <willcode4[m]> By default, there's a 1M throttle.
[04:34:29] <patchvonbraun[m]> Yeah it is. You specify a rate as a device arg.
[04:35:20] <willcode4[m]> If you have two clocks, and one is traveling at nearly the speed of light ... wrong 2 clock problem.
[04:35:21] <patchvonbraun[m]> The throttle gets update with set_sample_rate.
[04:36:10] <patchvonbraun[m]> Since there’s a hardware block as well, it all seems to work.
[04:36:23] <patchvonbraun[m]> Been using this for years and years.
[04:36:33] <willcode4[m]> Probably works if the hardware clock is slow, but not if it is fast.
[04:37:02] <willcode4[m]> Compared to the PC.
[04:41:46] <patchvonbraun[m]> I have never had a problem. Across multiple machines and machine types and using this technique for years.
[04:43:46] <willcode4[m]> Just a guess. Haven't tried it.
[04:47:17] <patchvonbraun[m]> Does soapy have a built in file type source?
[04:48:53] <patchvonbraun[m]> Hmmm not listed in available factories.
[04:50:33] <willcode4[m]> I dont' see anything either.
[04:51:49] <willcode4[m]> You could write one quickly.
[04:55:01] <patchvonbraun[m]> Trying to stick to things my users can install with apt-install. Even with a lot of turn key ness, there’s always some Turkey ness. Chews up a lot of valuable time I could be on the beach rolling in all the money I make from giving away my time and Software :)
[04:55:09] <flash[m]> out of curiosity, why does the clock matter? Won't the file source just always fill the output buffer? Maybe I'm assuming that what consumes it consumes both streams synchronously
[04:55:45] <patchvonbraun[m]> flash: yeah consumption should be synchronous.
[04:56:18] <willcode4[m]> As long as the throttle is disabled, right?
[04:56:34] <flash[m]> I see what you are saying
[04:56:59] <flash[m]> or the throttle is faster than the HW rate
[04:57:25] <willcode4[m]> right
[05:05:59] <patchvonbraun[m]> Hmm. I always set the initial rate onnthe file to much more than I am expecting. But I thought osmosdr updated the throttling
[05:09:27] <patchvonbraun[m]> So trying my RSP1 clone with soapy source. In GR 3.8.2.0. Gain is definitely inverted. As I go from 42 to 0 the SNR gets better and the noise floor increases   You still have to “know” what the valid bandwidth settings are. There’s no closest bandwidth matching going on. If you make an incorrect guess it sets it to the default which is 10s of kHz. But I can’t make it fail like it does under osmosdr. So there must be something
[05:09:27] <patchvonbraun[m]> going on in that interface.
[05:10:02] <patchvonbraun[m]> I use the soapy wrapper for lime as well, and it’s well behaved. So I dunno.
[05:28:44] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:30:38] <linge93[m]> <Hash[m]> "Perhaps the transmitter hasn’t..." <- Thank you for your kind reply, do you mean that the preamble should be added? Can I understand it as "sync words" in ofdm_tx.grc? There are two synchronization words in the flow graph, so more preambles should be added to each packet? But I understand that the design of these two "sync words" follow a certain protocol, how should I add the preamble?
[05:34:24] *** Quits: linext (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[05:36:20] <Hash[m]> I’m not sure for that specific flowgraph, but for mine what I noticed is adding some preamble (1010101010) prior to the sync word and data being transmitted allowed everything to reach full tx power before the sync word and data were sent
[05:39:11] <linge93[m]> I just changed the content of the text file I sent from "hello world" to a longer character, about 200 words. Something strange happened. I actually received this file completely and without error, "repeat "Set to no.
[06:15:10] *** Joins: pcero (~pcero@187.135.226.136)
[06:30:20] *** Joins: isaac[m] (~isaacgnur@2001:470:69fc:105::1:267a)
[07:08:45] *** Quits: schwach (~schwach@191.96.170.110) (Quit: The Lounge - https://thelounge.chat)
[07:28:05] *** Joins: schwach (~Schwach@191.96.170.110)
[07:29:36] *** Joins: schwach2 (~schwach@191.96.170.110)
[07:30:11] *** Quits: schwach (~Schwach@191.96.170.110) (Quit: Leaving)
[07:30:11] *** schwach2 is now known as schwach
[07:30:37] *** Quits: schwach (~schwach@191.96.170.110) (Client Quit)
[07:30:52] *** Joins: schwach (~schwach@191.96.170.110)
[08:05:31] *** Quits: pcero (~pcero@187.135.226.136) (Ping timeout: 245 seconds)
[08:31:58] *** Quits: koma (~koma@user/koma) (Quit: Arc)
[08:35:00] *** Joins: koma (~koma@user/koma)
[08:54:40] *** Quits: Keshl (~Purple@idlerpg/player/Keshl) (Read error: Connection reset by peer)
[08:54:46] *** Joins: Keshl_ (~Purple@idlerpg/player/Keshl)
[09:13:55] *** Quits: mall_krampus (~mallkramp@89.187.182.122) (Ping timeout: 258 seconds)
[09:52:18] *** Joins: OnAironaut (~OnAir@user/onaironaut)
[10:19:03] *** Joins: mallkrampus (~mallkramp@207.45.82.184)
[10:22:33] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb)
[10:29:42] *** Joins: Clinkz (~hi@94.129.174.5)
[10:31:21] *** Quits: mallkrampus (~mallkramp@207.45.82.184) (Ping timeout: 258 seconds)
[10:45:21] *** Joins: mallkrampus (~mallkramp@94.140.9.119)
[10:56:52] *** Clinkz is now known as Auth
[10:57:01] *** Auth is now known as WebDev
[11:02:45] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[11:16:56] *** Quits: WebDev (~hi@94.129.174.5) ()
[11:48:15] *** Joins: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt)
[12:10:18] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[12:12:06] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[12:12:23] *** Quits: OnAironaut (~OnAir@user/onaironaut) (Ping timeout: 265 seconds)
[12:14:03] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[12:30:09] *** Quits: oren[m]1 (~orengnura@2001:470:69fc:105::fcf4) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: jason-0992[m] (~jason-099@2001:470:69fc:105::1:378) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: mbound[m] (~mboundgnu@2001:470:69fc:105::eb36) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: perl[m] (~perlgnura@2001:470:69fc:105::eba8) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: RobM[m]1 (~rdmgnurad@2001:470:69fc:105::ebc8) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: johanna-msft[m] (~jriveragn@2001:470:69fc:105::fa98) (Quit: You have been kicked for being idle)
[12:30:10] *** Quits: Troy__Bates[m] (~moonduckg@2001:470:69fc:105::eb51) (Quit: You have been kicked for being idle)
[12:41:58] <jesusp[m]> Hello, anyone knows how can i install the libreries to execute the python script that is genereted by the gnuradio Companion on the linux terminal?
[12:46:46] <funkylab[m]> use your package manager to install `gnuradio`. That's it, jesusp. The python scripts use the GNU Radio library.
[12:47:02] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[12:47:29] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[12:47:58] <jesusp[m]> Oh, thanks!
[12:51:43] <linge93[m]> Hello,I want to ask again about the problem I encountered. When I use ofdm_tx/rx and usrp-b210 to send and receive text files, the content in the text is relatively large (about 200 words) and can be transmitted without error, but when the text content is relatively small (about 10 words) ) The received text file is blank when it is opened. What's the matter?
[12:57:17] <funkylab[m]> if you look at the mailing list, I've answered exactly that question yesterday, linge93 !
[13:00:30] <funkylab[m]> If there's anything unclear with my answer, it would be very cool to follow-up via email to the mailing list :)
[13:04:58] <linge93[m]> <funkylab[m]> "if you look at the mailing list,..." <- Ah? I always thought you did not receive it because I could see my mailing list was sent out, but I have never received a reply. What is going on?
[13:08:26] <linge93[m]> I think it should be my computer ip problem. I have sent many mailing lists before, but I didn’t get a reply. I thought it was because you thought my question was too simple, and then ignored it. I was too stupid.
[13:10:11] <linge93[m]> Anyway, thank you for your reply, I will change an IP
[13:14:49] *** Joins: thibv_ (~thibv@laubervilliers-657-1-69-212.w90-63.abo.wanadoo.fr)
[13:32:56] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:34:37] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[13:35:06] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[13:36:17] *** Joins: OnAironaut (~OnAir@user/onaironaut)
[13:51:08] *** Quits: arch3r (~ben@185.66.194.79) (Quit: bye)
[13:51:25] *** Joins: arch3r (~ben@185.66.194.79)
[13:56:08] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[13:56:41] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[14:10:18] *** Joins: linext (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net)
[14:12:20] *** Joins: jarribas[m] (~jarribasg@2001:470:69fc:105::1:26a9)
[14:20:49] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[14:21:15] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[14:22:04] <jarribas[m]> Hi folks, I'm trying to code a buffer block (yes, I've know that gnuradio already has input buffers, but I want to add an extra-large one to prevent drop samples from front-ends). Let me explain my idea: write a block that accepts always all the offered input items -> store them in a memory buffer (fifo)-> output from that fifo only the items requested by the noutput_items. 
[14:22:04] <jarribas[m]> The problem I face is that the gnuradio scheduler does not call my block (general_work()) if there is no space left in the other chained blocks input buffer (i.e. it does not call general_work() if noutput_items==0). Consequently, the bottleneck is still present and the buffer never absorbs the sample excess and the source overflows.
[14:22:04] <jarribas[m]> I have set also the set_min_noutput_items(0) but gnuradio still dows not call the block if no output items are required.. Any ideas or criticism? 
[14:24:39] <jarribas[m]> s/dows/does/
[14:26:56] *** Quits: yesno (~yesno@109.98.151.179) (Quit: Leaving)
[14:26:59] <willcode4[m]> jarribas: The size of a block's output buffer can be increased by setting the minoutbuf param under the Advanced tab. This can help performance (sometimes) but is very unlike to help if there is a slower block downstream, as you will eventually fill any size buffer. The default setting of `0` uses the default buffer size (64k items?), not an unlimited buffer size.
[14:28:28] <willcode4[m]> It sounds like the scheduler is working correctly and that one or more of the blocks you are using is not running as fast as you would like.
[14:31:27] <jarribas[m]> willcode4: Yes, I've know the gnuradio buffers can be adjusted, but I do not want to trim the source block or the connected block and force the default gnuradio block buffers because it breaks the internal gnuradio optimization. I'm using the block directly in a C++ instantiated flowgraph, not from python wrapper
[14:33:08] <willcode4[m]> jarribas: Calling the function from C++ does the same thing. Is it a stock GR block that is the bottleneck, or one you have made?
[14:33:20] <jarribas[m]> It makes sense that gnuradio do not call me if there is no need to output item (i.e. the chained block is not as fast as my source) but, if I set that I do not require to output any item to process my input (set_min_noutput_items(0) ) why is not callin me?
[14:33:27] <jarribas[m]> s/callin/calling/
[14:35:05] <willcode4[m]> Don't know what you've built. The goal of the scheduler is to produce output, so I don't think it will call a block if its output buffer is full.
[14:35:16] <jarribas[m]> willcode4[m]: I have know, I can adjust the buffers from C++, but I do not want to force them to any value. The solution I propose should be generic for any source
[14:35:37] <willcode4[m]> What's the proposal?
[14:38:50] <jarribas[m]> willcode4[m]: Simple flowgraph: A source -> my_buffer_block -> consumer_block
[14:38:50] <jarribas[m]> Situation: consumer_block is busy and its input buffer is full -> my_buffer_block can still store items even if there is no need to make an output (because the output buffer is full). I believe this case is covered when I set set_min_noutout_items to zero.
[14:39:23] <willcode4[m]> BTW, just checked the executor code, and it does this:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/a678fb23a77ddcbfd7091f7e96e336bf18d2ffdf)
[14:40:07] <jarribas[m]> > <@willcode4:gnuradio.org> BTW, just checked the executor code, and it does this:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/15e0438cc3c3399308843c0549b0ba94109dd52c)
[14:40:15] <jarribas[m]>  * this explain everything.... :-(
[14:41:42] <jarribas[m]> In the API doc it says that the range starts from zero (included)
[14:43:44] <willcode4[m]> Can't find any documentation like that. Have a link?
[14:45:34] <jarribas[m]> https://www.gnuradio.org/doc/doxygen/classgr_1_1block.html#a65cfc579150dc4d10c6180d3365aa9a8
[14:45:56] <jarribas[m]> well, in reality it does not says any range.. 
[14:49:16] <willcode4[m]> What you want is a `set_max_noutput_items()` which isn't there. You can trick the scheduler by never filling the last N items (might need to be more that 1) and buffering them internally if you think that will help. But watch out for the scheduler backoff that can happen when no work is being done (250ms delay). Let me take a look at whether consuming input counts as "progress". I still don't think any of this is going to help you. Why do
[14:49:16] <willcode4[m]> you think a bigger buffer/fifo will help here?
[14:52:48] <jarribas[m]>     /*!... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/3b5a7333daf1622f918df5abd90b7649429d0d75)
[14:53:02] <jarribas[m]> this is the current block.h in gr-3.8
[14:53:46] <willcode4[m]> The "min" implies that the user want more than a certain number of output items per call, not less than or equal.
[14:53:59] <willcode4[m]> Well, greater than or equal.
[14:54:20] <jarribas[m]> exactly, and my case is equal to 0
[14:54:21] <willcode4[m]> Same as min buf size, that doesn't mean that the buffer can't be any bigger.
[14:54:54] <willcode4[m]> So the API is fine. Looking to see whether there's a good way to make the scheduler do what you want at runtime.
[14:55:14] <jarribas[m]> I do not want the buffer change, I want that gnuradio call my block even if noutput_items==0ç
[14:55:21] <jarribas[m]> s/I do not want the buffer change, I want that gnuradio call my block even if noutput_items==0ç/I do not want the buffer change, I want that gnuradio call my block even if noutput_items==0/
[14:55:57] <willcode4[m]> Right, just giving another example of how the API naming works.
[14:56:36] <jarribas[m]> but if the internal gnuradio code executor is doing that:
[14:56:36] <jarribas[m]>     if (min_noutput_items == 0)
[14:56:36] <jarribas[m]>         min_noutput_items = 1;
[14:56:44] <willcode4[m]> Correct.
[14:57:06] <jarribas[m]> then it does not support my special case... so nothing to do
[14:57:48] <jarribas[m]> thank you for your help willcode4  
[15:00:32] <willcode4[m]> jarribas: The code says that you should get called again even if you produce 0. Make sure you are using a general block, NOT a sync/interp/decim block.
[15:00:49] <willcode4[m]> Or override forecast() maybe.
[15:01:42] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 260 seconds)
[15:02:09] <jarribas[m]> willcode4[m]: I'm using a general block. Forecast as far as I know, is for set the required input items
[15:03:16] <willcode4[m]> Then you should be able to make whatever size FIFO you want inside your block if it helps. What happens when you just consume input and do nothing at all for output?
[15:06:59] <jarribas[m]> willcode4[m]: the behavior is that if you consume all input and produce the noutput_items (produce always the maximum available), gnuradio only calls your block when there is something to produce (noutput_items>0) but never with noutput_items==0. This behavior prevents to absorb the excess of input samples (of course it MUST BE a temporally slowdown, because if your system processing rate is slower than your source rate, you will fill
[15:06:59] <jarribas[m]> the fifo after some time..)
[15:12:26] *** Quits: Echoz (~chris@user/echoz) (Ping timeout: 260 seconds)
[15:14:26] *** Joins: Echoz (~chris@user/echoz)
[15:25:04] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:4887:170f:cb6:7c60) (Read error: Connection reset by peer)
[16:52:47] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[18:06:19] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[18:08:47] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 264 seconds)
[18:26:15] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Quit: Leaving...)
[18:27:09] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[18:54:44] *** Quits: thibv_ (~thibv@laubervilliers-657-1-69-212.w90-63.abo.wanadoo.fr) (Quit: Leaving)
[19:41:41] *** Quits: AdamHorden (~adam.hord@host81-150-189-121.in-addr.btopenworld.com) (Ping timeout: 268 seconds)
[19:46:11] *** Joins: AdamHorden (~adam.hord@host81-150-189-121.in-addr.btopenworld.com)
[19:57:10] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb) (Quit: uros)
[20:11:01] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Quit: Leaving...)
[20:11:20] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb)
[20:20:25] *** Joins: foz (mt@gateway/vpn/protonvpn/deliriousgeorge)
[20:21:42] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb) (Quit: uros)
[20:27:25] *** Quits: OnAironaut (~OnAir@user/onaironaut) (Remote host closed the connection)
[20:35:33] *** Joins: benreynwar_ (sid299523@id-299523.lymington.irccloud.com)
[20:35:47] *** Joins: Crofton_ (sid401373@id-401373.lymington.irccloud.com)
[20:43:19] *** Quits: Crofton (sid401373@lymington.irccloud.com) (*.net *.split)
[20:43:20] *** Quits: benreynwar (sid299523@lymington.irccloud.com) (*.net *.split)
[20:43:20] *** benreynwar_ is now known as benreynwar
[20:43:20] *** Crofton_ is now known as Crofton
[21:05:08] *** Joins: jemius (~imperator@2001:16b8:2d64:5000:bf8:1d18:72bc:a04c)
[21:16:18] *** Joins: willcode4 (~willcode4@pool-71-248-165-239.bstnma.fios.verizon.net)
[21:16:18] *** Quits: willcode4 (~willcode4@pool-71-248-165-239.bstnma.fios.verizon.net) (Changing host)
[21:16:18] *** Joins: willcode4 (~willcode4@user/willcode4)
[21:23:44] *** Joins: Macuser (~Macuser@216.30.159.201)
[21:37:35] *** Quits: Keshl_ (~Purple@idlerpg/player/Keshl) (Ping timeout: 260 seconds)
[21:38:57] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:642b:f672:a0c6:d41)
[21:42:48] *** Joins: Keshl_ (~Purple@idlerpg/player/Keshl)
[22:00:33] *** Joins: yesno (~yesno@109.98.151.179)
[22:27:58] *** Joins: Keshl__ (~Purple@idlerpg/player/Keshl)
[22:28:20] *** Quits: Keshl_ (~Purple@idlerpg/player/Keshl) (Read error: Connection reset by peer)
[22:29:06] <muaddib[m]> Hash: 2 things. 
[22:29:06] <muaddib[m]> 1) echo the Tek RSA option you can get a used one for pretty cheap. I’ve also heard great things about aronia, but not used myself. 
[22:29:06] <muaddib[m]> 2) your named pipe issue doesn’t make sense to me. If you record IQ with their CLI it’s clean, but if you pass that as a FIFO stream into GNURadio it’s got a DC spike? That can’t be right. 
[22:31:46] <Hash[m]> > <@muaddib:gnuradio.org> Hash: 2 things. 
[22:31:46] <Hash[m]> > 1) echo the Tek RSA option you can get a used one for pretty cheap. I’ve also heard great things about aronia, but not used myself. 
[22:31:46] <Hash[m]> > 2) your named pipe issue doesn’t make sense to me. If you record IQ with their CLI it’s clean, but if you pass that as a FIFO stream into GNURadio it’s got a DC spike? That can’t be right.
[22:31:46] <Hash[m]> If I record IQ with their CLI and play it back either with their CLI or playback the file in GNURadio with a regular file source and the file it works fine. If I try to take data from my flowgraph that works no problem with the USRP B200 and send it via BladeRF GNURadio block or into a pipe setup via the CLI I see the spike
[22:32:01] <muaddib[m]> drmpeg: do you have any thoughts on how there could be inconsistencies in DC spike when replaying IQ recorded with the bladeRF cli  vs passing that stream as a FIFO into GNURadio??
[22:32:53] <willcode4[m]> Sounds like a type mismatch.
[22:33:02] <Hash[m]> What has me stumped is why any data I seem to send via BladeRF that works just fine when I use a USRP B200 produces that spike on the BladeRF
[22:33:49] <willcode4[m]> An independent SDR RX says there's a spike OTA one way but not the other way?
[22:33:58] <Hash[m]> BladeRF native is IShort -2048 to 2047 12 bit signed
[22:34:21] <muaddib[m]> the b200 can also produce a spike when it transmits. Are you sure you’re not seeing that?
[22:35:35] <drmpeg> Usually, it's below the level of your signal.
[22:35:36] <Hash[m]> willcode4: Basically if I use a RTL-SDR as the receiver to remove any bias, using the USRP B200 as the sink for my flowgraph I won't see a DC spike, I just see the channels I am trying to transmit on as spikes. But if I use a BladeRF I see a massive spike at the center freq, and then the channels I am trying to transmit on as well
[22:36:46] <Hash[m]> But if I capture raw data from the BladeRF and play that back, no spike at the center freq
[22:37:42] <Hash[m]> This is the opposite, its massively above the level of my signals
[22:38:04] <willcode4[m]> TX and RX sides can have different DC offsets, so the fact that there's no DC on BladeRF RX is not relevant.
[22:38:26] <willcode4[m]> There may be DC removal on the RX side too.
[22:39:30] <Hash[m]> I believe there is DC removal on the RX side, because if I use the BladeRF as the receiver for the transmitted BladeRF signal, you don't see the spike at the center freq at all, but then a RTL-SDR or B200 right next to it shows the spike on it's received waterfall from that same BladeRF transmission
[22:40:43] <willcode4[m]> And if you transmit all zeros? I think I saw that mentioned before but can't remember what the answer was.
[22:41:19] <Hash[m]> Yes, just a Null Source straight into the BladeRF Sink shows the spike at center freq
[22:42:31] <Hash[m]> I would expect no energy to be transmitted with a Null Source correct?
[22:43:07] <willcode4[m]> What happens using bladerf-cli tx?
[22:43:08] <Hash[m]> I posted that in the BladeRF slack channel, but slow replies there, maybe I should post on their forum
[22:43:45] <Hash[m]> What experiment would you suggest via the CLI? Turn on tx with /dev/zero as the source and increase gain to max?
[22:44:13] <willcode4[m]> Sure, try different gains to see if the spike is being amplified.
[22:44:41] <Hash[m]> i can already tell you it is, as I ramp up gain the spike gets stronger as it is now
[22:44:56] <willcode4[m]> Does bladerf-cli calibrate apply to the version you have?
[22:45:28] <Hash[m]> No, that's for the LMS Lime version, mine has the AD chip
[22:45:40] <Hash[m]> it errors out when I try to use it
[22:56:38] <drmpeg> Well, you need that spectrum analyzer. :)
[23:03:07] <Hash[m]> Jesus, bpadalino introduced me to Aaronis yesterday... I'm currently selling kids toys so I can buy one :) 
[23:09:27] <muaddib[m]> Hash: did we actually determine that the CLI is not applying DC correction? It’s definitely a parameter in the newest API.
[23:11:01] <Hash[m]> I can run some more tests in about 30 minutes, but I didn't see anything in the CLI where I could apply or specify DC correction for the AD chip that's used in my BladeRF 2.0 micro, there is for the older BladeRF's with the Lime Microsystems chip however
[23:14:08] *** Joins: OnAironaut (~OnAir@user/onaironaut)
[23:26:44] <miek> it might help to tune the receiver to a slightly different frequency, then you can distinguish between any DC offset/correction happening on each side
[23:28:35] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Ping timeout: 264 seconds)
[23:32:38] *** Joins: moldorcoder7 (~moldorcod@37.120.143.29)
[23:39:33] <Hash[m]> I expect then I would see the spike on the BladeRF RX side if I did that. I know the spike is being transmitted 100% because i've seen it on multiple other SDR's so it can't be a hardware anomaly with my receiver. Will test it out to make sure
[23:42:56] *** Quits: moldorcoder7 (~moldorcod@37.120.143.29) (Ping timeout: 258 seconds)
[23:48:47] *** Joins: moldorcoder7 (~moldorcod@37.120.143.29)
[23:58:23] <drmpeg> Here's the DC offset on a B210. It's been shifted with a tune_request. The average power of the signal is 23 dB higher,so the DC offset is about 45 dB down. https://www.w6rz.net/10ghz.png
