[00:06:15] *** Joins: roarde (~roarde@user/roarde)
[00:12:55] *** Quits: int (~int@0x4.cx) (Quit: see you :))
[00:13:09] *** Joins: int (~int@0x4.cx)
[00:29:12] *** Joins: [-_-] (~fractal@user/---/x-1675478)
[00:46:25] *** Joins: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry)
[00:46:31] <StayHungry> Good evening, comrades
[00:47:39] <StayHungry> Tonight I learned how scripting languages (Lua, NodeJS, Perl, PowerShell, Python) could help with swapping first and last items in strings like 23-07-2021 (to 2021-07-23) 
[00:48:04] <StayHungry> As a bonus, I decide to give AWK a chance too :)
[00:48:31] <StayHungry> Goal is the shortest possible one-liner
[00:49:08] <StayHungry> What's your take?
[00:50:48] <gnomon> awk 'BEGIN{FS=OFS="-"}{print $1,$3,$2}'
[00:52:34] <earnestly> simple, nice
[00:52:44] <StayHungry> you mean echo 23-07-2021| awk 'BEGIN{FS=OFS="-"}{print $3,$2,$1}'
[00:53:07] <StayHungry> indeed, it works
[00:53:17] <earnestly> # echo 23-07-2021 | awk 'BEGIN{FS=OFS="-"}{print $3,$2,$1}'
[00:53:19] <shbot> earnestly: 2021-07-23
[00:53:58] <StayHungry> being Windows user, i have to remove space between 2021 and |, otherwise the output is 2021 -07-23
[00:54:34] <earnestly> Even more reason to stop using echo, what in the hell
[00:54:55] <earnestly> # printf %s 23-07-2021 | awk 'BEGIN{FS=OFS="-"}{print $3,$2,$1}'
[00:54:57] <shbot> earnestly: 2021-07-23
[00:55:20] <StayHungry> awk has no option for input?
[00:56:36] <earnestly> It reads from standard input
[00:57:34] <StayHungry> i mean awk 'commands' input
[00:57:52] <earnestly> No, input is an argument to awk
[00:57:57] <earnestly> In that use
[00:58:44] <earnestly> # awk 'END{print a}' a=4 < /dev/null
[00:58:45] <shbot> earnestly: 4
[00:58:59] <earnestly> # awk 'END{print a}' 'a=4+1' < /dev/null
[00:59:00] <shbot> earnestly: 4+1
[01:00:29] <earnestly> StayHungry: You'll find most tools like this exist as filters, places in pipelines or reading from files
[01:00:54] <earnestly> They read stdin and write stdout.  That way `cat' as a program can be implemented without having any knowledge of what "files" are
[01:01:29] <earnestly> cat < in > out # works for all files, cat doesn't need anything more than read/write
[01:02:13] <earnestly> cat < linuxdistro.iso > /dev/sdb # usb device file
[01:31:35] <StayHungry> thank you for your kind attention, earnestly and gnomon
[01:32:04] <StayHungry> a few observation points
[01:32:21] <StayHungry> awk 'BEGIN{FS=OFS="-"}{print $3,$2,$1}' requires BEGIN, FS, OFS to be capital, otherwise not working
[01:33:14] <StayHungry> and outer quotes are singular whereas inner are double - i'm used to the reverse order
[01:35:05] *** Quits: roarde (~roarde@user/roarde) (Remote host closed the connection)
[01:35:29] *** Joins: roarde (~roarde@user/roarde)
[01:43:10] *** Quits: uplime (uplime@offtopia/nomad) (Ping timeout: 252 seconds)
[01:44:12] *** Joins: uplime (uplime@offtopia/nomad)
[01:45:44] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (Ping timeout: 252 seconds)
[01:46:26] *** Quits: ttmrichter (~thelounge@185.94.228.137) (Quit: Ping timeout (120 seconds))
[01:46:31] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[01:46:47] *** Joins: ttmrichter (~thelounge@185.94.228.137)
[01:46:50] *** Quits: e36freak (~e36freak@user/e36freak) (Ping timeout: 252 seconds)
[01:48:14] *** Joins: e36freak (~e36freak@user/e36freak)
[01:57:18] <StayHungry> by the way, why %s in printf %s 2021-07-23 | awk ... ?
[01:57:31] <StayHungry> it works well even without %s
[01:57:50] <earnestly> StayHungry: Are you familiar with both the shell and printf (from C)?
[01:58:25] <StayHungry> i have msys2 package with unix utils on Windows, my shells are its cmd.exe and pwsh.exe (PowerShell 7)
[01:59:48] <StayHungry> as for C, i respect those who are familiar with it, because binaries are fast and small :)
[02:01:43] <e36freak> so you haven't used a printf before?
[02:02:21] <e36freak> printf takes a format string as its first argument that determines how the following arguments are formatted
[02:02:30] <e36freak> for example, you can pad a string with spaces:
[02:02:39] <e36freak> # printf '%20s\n' padded
[02:02:40] <shbot> e36freak:               padded
[02:08:10] <StayHungry> but if %s is omitted, then default is...?
[02:08:19] <earnestly> StayHungry: Naturally a format string can contain non-format options like your date and it will print it literally.  But if the input is user provided you don't want to give the user access to the format string (format attacks, this is mostly only in C due to %n though.  Lisp's version is similar but uses ~ instead of % as the character)
[02:08:38] <earnestly> # printf '%s - %s\n' foo bar
[02:08:39] <shbot> earnestly: foo - bar
[02:08:59] <earnestly> StayHungry: I suppose you know % as placeholders
[02:09:10] <StayHungry> sure
[02:09:12] <earnestly> %s for strings, %d for decimal, %f for float, etc.
[02:09:42] <earnestly> # printf '%03.4f\n' 1.23456789
[02:09:43] <shbot> earnestly: 1.2346
[02:09:56] <earnestly> # printf '%3.4f\n' 1.23456789
[02:09:57] <shbot> earnestly: 1.2346
[02:10:01] <earnestly> Hm
[02:10:07] <earnestly> # printf '%03.4f\n' 123.456789
[02:10:08] <shbot> earnestly: 123.4568
[02:10:10] <StayHungry> :D
[02:10:13] <earnestly> # printf '%03.4f\n' 1234.56789
[02:10:14] <shbot> earnestly: 1234.5679
[02:10:20] <earnestly> I thought it might zero pad it
[02:10:29] <earnestly> # printf '%08d\n' 3
[02:10:31] <shbot> earnestly: 00000003
[02:11:08] <earnestly> So 001.2346 (notice rounding)
[02:11:23] <earnestly> Either way, don't use floats for money values
[02:12:07] <e36freak> earnestly: it would 0-pad if you had a high enough number
[02:12:23] <e36freak> but you can also run into issues if there were say a % or backslash in the date string
[02:12:39] <e36freak> as a general rule you should always use a format string with printf
[02:12:44] <e36freak> unless it's just like printf '\n'
[02:13:01] <e36freak> # printf '%08.4f\n' 123.456789
[02:13:02] <earnestly> StayHungry: ^, basically user input and such shouldn't be exposed to printf's DSL (just like anything else)
[02:13:02] <shbot> e36freak: 123.4568
[02:13:05] <e36freak> oh, hm
[02:13:37] <earnestly> StayHungry: That's why you use single quotes in the shell around awk's language.  You don't want to mix the shell's language with awk's language because it exposes arbitrary code execution (code injection)
[02:14:22] <earnestly> iow, you don't want shell code being evaluated in the context of awk, or sed, or anything else.  E.g. python -c "print($this_is_code_injection)"
[02:14:41] <StayHungry> sorry, what is DSL acronym?
[02:14:45] <e36freak> oooh, %f is weird with the 0-padding because the first number is for the entire length of the string
[02:15:01] <e36freak> # printf '%012.4f\n' 123.456789
[02:15:02] <shbot> e36freak: 0000123.4568
[02:15:52] <earnestly> Oh that makes sense, at least there is a logic to it
[02:16:30] <earnestly> StayHungry: Domain Specific Language, printf's little % stuff is such.  Python's f{} is another, etc.  They're just tiny languages that get parsed in some way
[02:17:13] <earnestly> StayHungry: lisp has the same formatted print using ~ instead of % and is far more sophisticated in what it can do
[02:17:16] <earnestly> (and erlang)
[02:17:51] <earnestly> StayHungry: They also take arguments, e.g.
[02:18:02] <earnestly> # printf '%*s\n' 8 hello
[02:18:03] <shbot> earnestly:    hello
[02:18:21] <earnestly> # printf '%0*d\n' 8 1
[02:18:22] <shbot> earnestly: 00000001
[02:18:25] <earnestly> # printf '%0*d\n' 2 1
[02:18:26] <shbot> earnestly: 01
[02:18:51] <earnestly> In erlang:
[02:18:54] <earnestly> 1> io:fwrite("|~10.5c|~-10.5c|~5c|~n", [$a, $b, $c]).
[02:18:56] <earnestly> |     aaaaa|bbbbb     |ccccc|
[02:24:09] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:90c5:c42d:2338:33d7) (Quit: WeeChat 3.2)
[02:34:27] *** mnrmnaugh is now known as BMCC
[02:40:52] *** Quits: [-_-] (~fractal@user/---/x-1675478) (Quit: WeeChat 3.2)
[02:47:28] *** Quits: lgc (~lgc@user/lgc) (Quit: WeeChat 3.2-dev)
[02:55:39] *** Joins: downunder (~downunder@110.151.122.76)
[03:02:52] <StayHungry> python -c print('-'.join(reversed('23-07-2021'.split('-')))) :)
[03:03:00] <StayHungry> powershell -c '23-07-2021'.split('-')[2..0] -join '-' 
[03:03:08] <StayHungry> perl -e "print(join '-', (split /-/, '23-07-2021')[2,1,0])"
[03:03:13] <StayHungry> node -e "console.log('23-07-2021'.split('-').reverse().join('-'))" 
[03:03:18] <StayHungry>  lua -e "print(('23-07-2021'):gsub('(..)(....)(....)','%3%2%1'),'')"
[03:03:33] <StayHungry> printf %s 23-07-2021 | awk 'BEGIN{FS=OFS="-"}{print $3,$2,$1}' 
[03:03:35] <StayHungry> :D
[03:05:54] <earnestly> It's not quite the same though
[03:06:11] <StayHungry> what do you mean? 8]
[03:06:34] <StayHungry> scripting languages on the march
[03:07:10] <StayHungry> pity awk requires extra utility to pass data into
[03:07:10] <earnestly> The rest are programming languages, which have a notion of "strings" as a type.  These typically have functions associated with them.  So the programs are recieving no input, and has to manage no files
[03:07:18] <StayHungry> perhaps it could be mitigated with a variable
[03:07:22] <earnestly> It's not a pity, it's the strength
[03:07:49] <earnestly> But you have to be aware that you're using a shell to provide the input, so it doesn't count
[03:08:30] <earnestly> And a shell is not a "programming language" like those above, it's a command language.  The distinction is shallow but it avoids so much headache by not treating it as one
[03:09:05] <earnestly> StayHungry: If you wanted to compare awk in this form to those then you'll have to implement all of them to also take their input from stdin
[03:09:17] <earnestly> If you did it all in awk, it might be pretty similar to the rest
[03:09:54] <nmz> StayHungry: it doesn't, if you have no incoming data you put everything in BEGIN 
[03:10:11] <nmz> and you exit
[03:10:54] <earnestly> # awk 'BEGIN{OFS = "-"; split("23-07-2021", a, "-"); print a[3], a[2], a[1]}'
[03:10:55] <shbot> earnestly: 2021-07-23
[03:11:11] <earnestly> StayHungry: This would be more related, but it's not really how awk is supposed to be used
[03:11:35] <earnestly> You've come from a Windows background and aren't familiar with unix, so you may not understand this for awhile.  I was the same, I ended up using Linux by accident
[03:11:48] <StayHungry> yes, the first solution is far more elegant
[03:13:07] <earnestly> With powershell all of the widgets need to be implemented according to a framework, in a unix shell there is nothing but the bytestream
[03:13:51] <earnestly> Everything is centered around the pipe and streams
[03:14:27] <earnestly> commands are agnostic and know nothing about pipes, streams, shells, etc.  There is no "framework", everything composes together naturally because of the bytestream (lowest common denominator)
[03:14:51] <earnestly> MacIlroy called it the "universal interface"
[03:15:11] <earnestly> (Text as the unviersal interface, I'm just abstracting it to bytestream)
[03:15:22] <earnestly> StayHungry: It's why shells didn't even need to know about unicode
[03:15:53] <earnestly> Because it's just a stream of bytes, and how that is interpreted by commands
[03:17:04] <earnestly> Everything is a string, there are no "strings" like programming languages have.  Quotes in a shell are used to cluster chunks of a string into logical units, that's all
[03:18:20] <StayHungry> well, the other side has its arguments too :)
[03:18:25] <StayHungry> https://leanpub.com/shell-of-an-idea -> 'read free sample' -> chapter 'let's just copy unix' 
[03:19:12] <earnestly> They don't get it
[03:19:46] <earnestly> But that's okay, at this point in time and the way things are trending, it will continue
[03:20:52] <earnestly> I'm lucky insofar as I don't have to care because I know just enough to avoid these foolish approaches.  I didn't come to this conclusion willingly
[03:22:12] <earnestly> This shitty website is fucking broken without enabling cookies, javashit, and a million third party trash
[03:22:15] <earnestly> "lean"
[03:22:24] <earnestly> > agile-published
[03:22:49] <StayHungry> i'll upload that chapter in pdf for you, wait a sec
[03:23:07] <earnestly> First sentence is already a strawman
[03:23:38] <earnestly> Second paragraph makes this book seem like it's targetting 12 year olds
[03:23:55] <StayHungry> https://upl.to/get/MJ0jy/shell-of-an-idea-sample.pdf
[03:24:11] <earnestly> This book is terrible.  If you want proper anti-unix work, read The UNIX Haters Handbook
[03:24:20] <earnestly> What the fuck does "most tools are fairly atomic" even mean
[03:24:30] <earnestly> How does "one thing well" mean atomic
[03:25:09] <StayHungry> it's not anti-unix, it's about why powershell has emerged with all its pluses and minuses
[03:25:14] <earnestly> StayHungry: If you paid for this, RIP
[03:25:21] <earnestly> It's beyond stupid
[03:25:38] <earnestly> Conflates different ideas, fails to understand abstraction, doesn't grasp ideas, etc.
[03:25:54] <StayHungry> but hey, learning hundreds of utils with different switches is a pain, no doubt :)
[03:26:10] <earnestly> Sure, that applies to everything
[03:26:46] <earnestly> All of the arguments made which are legitimate are arguments that have already been made by better minds and are general to all systems
[03:27:24] <earnestly> The command-line, in general, is always going to have problems with discoverability.  This is why so much work has been done to try and make it more discoverable, obviously
[03:27:53] <earnestly> It's not like a GUI which allows experimentation (and why having an 'undo' button is so important, this is forgotten in modern GUIs though)
[03:28:56] <StayHungry> by the way, of all scripting examples i mentioned above, guess which one warms my heart the most? :)
[03:29:34] <earnestly> Learn about joy
[03:29:51] <earnestly> See if you can keep an open mind about k or apl too :p
[03:30:42] <earnestly> StayHungry: Try to see beyond the superficial: https://en.wikipedia.org/wiki/Joy_(programming_language)
[03:30:50] <earnestly> In all things
[03:31:23] <StayHungry> javascript (nodejs), because of sequential chain of commands (string.split.reverse.join). the rest are building a nest: (join, reverse, split (string)))
[03:32:04] <earnestly> "tacit programming"
[03:33:17] <earnestly> StayHungry: Which is what the unix pipeline essentially is, fwiw
[03:34:12] <earnestly> http://okmij.org/ftp/Computation/monadic-shell.html
[03:34:18] <StayHungry> i'm not against unix, just trying to use native abilities of tools when it's possible
[03:34:28] <earnestly> I'm not suggesting /you/ are
[03:34:37] <nmz> nice
[03:34:39] <StayHungry> if awk could put 23-07-2021 somewhere in begin as is, or as var, why not
[03:34:41] <nmz> flamewar incoming
[03:34:44] <earnestly> StayHungry: The book is just junk, don't waste your money on it.  Get "The UNIX Hater's Handbook" instead
[03:34:55] <earnestly> StayHungry: awk can, I showed you one
[03:35:17] <StayHungry> but without ruining the elegance :D
[03:35:38] <earnestly> Because awk is a filter
[03:35:51] <earnestly> Explicitly designed to be a filter
[03:39:11] <earnestly> StayHungry: (Btw, it's good that you do seem to like elegance, at least that can guide you well most of the way as you go)
[03:40:59] <earnestly> And I also like the "full exploitation" approach (DJB doesn't) of knowing and using tools to their fullest, balanced against their weaknesses.  This avoids even trivial issues such as people using `grep | awk' or `grep | sed' when both sed and awk can do what grep does
[03:41:30] <StayHungry> on this channel elegance means one thing, on #powershell they see it different :) every now and then they bash me for love of aliases (e.g. -ea instead of -ErrorAction or dir instead of Get-ChildItem)
[03:42:04] <earnestly> elegance is objective, some just don't know it because we live in the ashes
[03:43:06] <earnestly> StayHungry: But, unless powershell has some use as an interactive shell, it provides no benefit over just using a good programming language
[03:43:47] <earnestly> Even julia provides |> as a pipeline primative, haskell has bidirectional pipes, etc.
[03:44:22] <earnestly> powershell exists because of Microsoft's vendor lockin, it has no purpose outside of the problem it caused itself
[03:45:24] <earnestly> Heh, I remember trying to use python on Windows 7 now.  I think I had to use some activestate software or something, what a nightmare thinking back
[03:45:32] <earnestly> At least Windows is a million times better than those days
[03:45:43] <earnestly> (When it comes to having access to all these languages)
[03:45:58] <earnestly> Bloodshed Dev C++?
[03:46:15] <StayHungry> yes, i did my best to replace cmd with powershell, but every time return to cmd and then use powershell just as another tool (for example, to replace curl and jq for quickly parsing remote JSON)
[03:46:38] <earnestly> If I had a choice between cmd and powershell, then powershell is clearly better
[03:46:59] <StayHungry> it has drawback i can't presently live with
[03:47:05] <StayHungry> *drawbacks
[03:47:47] <earnestly> By better I'm only really refering to batch vs. ps; I don't know what it's like to use interactively.  I know they let you present the environment as a file tree, which is nice
[03:48:14] <StayHungry> so you're aware of haskell too?
[03:48:34] <StayHungry> different world for me, not sure i'll ever have a courage to look into that void :D
[03:48:44] <earnestly> Besides esolangs, probably all of them :S
[03:49:03] *** Quits: Strykar (~wakka@signald/Strykar) (Quit: Leaving.)
[03:49:31] *** Joins: Strykar (~wakka@signald/Strykar)
[03:49:39] <earnestly> Most languages aren't different from each other, only a few really approach things differently and are built on different abstractions that warrant attention purely to have your mind challenged in how it thinks about problems and solutions
[03:50:12] <StayHungry> all i know about haskell so far is that compiled binary with simple hello world weights ~16 MB, which is... well, a shame, not matter not statically it's built :D
[03:50:22] <earnestly> StayHungry: That's not stripped
[03:50:54] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:51:20] *** Joins: seninha (~seninha@user/seninha)
[03:51:22] <StayHungry> ah, i remember (from some presentation) as well, haskell challenges you not to redefine things
[03:51:41] <earnestly> StayHungry: old so that gets linked about this often: https://stackoverflow.com/a/6115703
[03:51:54] <StayHungry> thanks lord, my needs are more mundane, not that celestial :D
[03:52:53] * StayHungry bookmarked that link
[03:52:56] <earnestly> John Carmack talked about usin Haskell and why at a quakecon talk, it's really about curiosity
[03:53:11] <earnestly> And solving things in maybe better ways
[03:54:01] <earnestly> StayHungry: idris for example can almost write code for you given just the function signature
[03:54:23] <StayHungry> i'm open to try to see things differently. i remember an epiphany when thought of dot as line from the end :)
[03:54:24] <earnestly> It just asks you to fill in a few blanks and can generate the rest
[03:55:41] <StayHungry> gosh, you never know how enlightened one can become by visiting #awk :D
[03:56:10] <earnestly> StayHungry: https://www.youtube.com/watch?v=DRq2NgeFcO0 (the idris thing)
[03:56:45] <earnestly> Somewhere in here, you can skip around I guess
[04:04:12] <StayHungry> oh my, looks like abstract art :)
[04:04:49] <StayHungry> guess i am too humanitarian by character and training
[04:06:27] <StayHungry> but i vote for it if the result won't require me to upgrade once again :D
[04:07:32] <StayHungry> because, you know, when youngsters boast with 100 MB sluggish calculators packaged with Electron these days...
[04:12:39] <earnestly> no one likes electron
[04:12:41] *** __jmcantrell__ is now known as jmcantrell
[04:16:40] *** Joins: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[04:18:58] <StayHungry> 3am here, have to sleep a bit, but thank you for insights tonight. it's far then i expected from #awk :)
[04:19:09] <StayHungry> *far more
[04:19:19] *** Quits: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry) (Quit: -)
[04:22:03] *** Quits: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 265 seconds)
[04:34:51] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[04:52:10] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:54:43] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[05:05:25] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[05:07:14] *** Joins: seninha (~seninha@user/seninha)
[05:30:25] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:34:10] *** Joins: vlm (~vlm@user/vlm)
[05:34:30] <seninha> will nawk's time functions survive year 2038?
[05:35:21] <mute> what time functions
[05:35:58] <seninha> mktime() strftime() and systime()
[05:36:10] <mute> sounds more like gawk
[05:36:23] <seninha> one true awk also have them
[05:36:55] <seninha> At least the one distributed with openbsd
[05:38:35] <seninha> yeah, it's a obsd extention to ota
[05:38:42] <mute> i'm not really familiar with that one
[05:40:41] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 258 seconds)
[05:42:45] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:45:14] <mute> # mawk 'BEGIN{print mktime("2021 12 21 0 0 0")}'
[05:45:15] <shbot> mute: 1640044800
[05:45:18] <mute> # mawk 'BEGIN{print mktime("2039 12 21 0 0 0")}'
[05:45:19] <shbot> mute: 2.20804e+09
[05:45:21] <mute> so that's fun heh
[06:00:23] <seninha> oh, obsd awk actually uses double! I tested here.
[06:01:03] <seninha> (and checked the code)
[06:01:06] <seninha> https://github.com/openbsd/src/blob/master/usr.bin/awk/awk.h#L35
[06:01:59] <mute> ah i briefly googled openbsd git awk but didn't see that
[06:02:52] <mute> # gawk 'BEGIN{print mktime("2039 12 21 0 0 0")}' # what's gawk use
[06:02:53] <shbot> mute: 2208038400
[06:03:13] <mute> oops
[06:06:37] <seninha> yeah, so mawk expires in 2038...
[06:06:55] <seninha> at least its time functions
[06:06:57] <mute> nah it just treats it as a float
[06:07:43] <mute> # mawk 'BEGIN{OFMT="%.0f"; print mktime("2039 12 21 0 0 0")}'
[06:07:44] <shbot> mute: 2208038400
[06:07:49] <mute> looks better
[06:11:01] <seninha> damn, openbsd adds way more stuff to one true awk: bit functions, time functions, gensub()...
[06:11:15] <seninha> I wonder why they don't add them back to OTA...
[06:33:06] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[06:58:35] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:58:53] *** Joins: seninha (~seninha@user/seninha)
[07:03:39] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[07:55:38] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[08:02:54] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[08:05:53] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[08:25:58] *** Joins: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[08:32:46] *** __jmcantrell__ is now known as jmcantrell
[08:38:11] *** Quits: ccl_ (ccl@shell.xshellz.com) (Quit: leaving)
[08:50:18] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[08:56:29] *** Quits: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 252 seconds)
[08:58:16] *** Joins: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[09:22:18] *** Quits: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[09:34:27] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 276 seconds)
[09:47:32] *** Joins: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[09:51:54] *** Quits: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[09:56:56] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[10:15:37] *** Quits: roarde (~roarde@user/roarde) (Quit: Leaving)
[10:17:28] *** Joins: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[10:59:42] *** Quits: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 245 seconds)
[11:36:53] *** Joins: kensanata (~user@user/kensanata)
[12:16:59] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:19:15] *** Joins: earnestly (~earnest@user/earnestly)
[12:44:48] *** Joins: ztx (~ztx@user/ztx)
[12:59:27] *** Joins: lavaball (felix@31.204.155.215)
[13:04:10] *** Joins: lgc (~lgc@user/lgc)
[13:15:32] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 252 seconds)
[15:05:02] *** Joins: seninha (~seninha@user/seninha)
[15:14:00] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[15:28:57] *** Joins: ccl (ccl@shell.xshellz.com)
[16:28:31] *** Quits: downunder (~downunder@110.151.122.76) (Quit: WeeChat 3.2)
[16:55:24] *** Joins: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry)
[16:56:17] <StayHungry> earnestly: https://dpaste.org/M3Zn/slim :) awk is not longer alone in piping, TCL has stepped in
[17:00:14] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[17:41:40] <earnestly> StayHungry: Try `red' next
[17:42:07] <StayHungry> earnestly: oh :D
[17:42:30] <StayHungry> btw, php is also there https://dpaste.org/dyqS/slim
[17:43:02] <earnestly> Sure
[17:43:54] <StayHungry> red... i remember it, yes. but it's not scripting language, right? it's kind of full-scale
[17:44:41] <StayHungry> we even tried haskell earlier today, but it got complicated https://ideone.com/rOdY51
[17:46:59] <earnestly> red is an interpreted language
[17:47:31] <earnestly> Odd, I don't use "scripting" as a modifier anymore and I didn't notice until you started using it
[17:47:39] <earnestly> It more or less means nothing
[17:52:51] <StayHungry> it's quite common term, wikipedia, infotech media, and stackoverlow use it
[17:53:47] <StayHungry> script for me means an entity full of code orders. a letter to machine (to be interpreted)
[17:54:31] <StayHungry> otherwise i deal not with code, but with binaries (compiled code)
[17:55:36] <StayHungry> i see those definitions penetrate easily into humanitarian mindsets than more strict ones
[17:56:34] <StayHungry> i guess it's because interpreter has too many subjective non-IT connotations
[17:57:19] <StayHungry> train of though is this: you say, i interpret that, some flaws of understanding pop up, and what if computer does the same...
[17:57:56] <StayHungry> so i retired from using that term until explicitly required
[17:58:35] <yeti> dc -e '16dio 32332D30372D32303231 d 100000000~P100~P10000~P100~P10000~PAP'
[17:58:47] <StayHungry> wow, what's this? :)
[17:58:54] <yeti> you see the date?
[17:59:05] <yeti> # dc -e '16dio 32332D30372D32303231 d 100000000~P100~P10000~P100~P10000~PAP'
[17:59:07] <shbot> yeti: bash: dc: command not found
[17:59:10] <yeti> :-/
[17:59:48] <StayHungry> yeti: https://s3.rokket.space/t_6LyQRQ.png
[18:00:20] <StayHungry> ah, dc, a caculator
[18:01:00] <StayHungry> i prefer qalc or kalker
[18:01:13] <yeti> https://tio.run/##S0n@/9/QLCVTwdjI2NjIxdjA2BxIGgFpI2NDhRQFQwMoqAswhBLobMeA//8B
[18:01:34] <StayHungry> nice :)
[18:01:38] <yeti> 32332D30372D32303231 <<< the datestring in hex
[18:01:45] <StayHungry> hacky one
[18:02:47] <yeti> https://yeti.tilde.institute/brain/dc/dc.html#org2c81ca0
[18:04:36] <yeti> unluckily dc has no feature to enter these mutable strings
[18:05:09] <yeti> somewhen we need a world conference of dc users to ad such a command!
[18:05:16] <yeti> adD
[18:06:17] <StayHungry> yeti: https://dpaste.org/dyqS/slim which one do you like most?
[18:08:10] <yeti> the 1st awk line looks best
[18:10:44] <yeti> not perfect:  date +%F | awk -vRS=- '{s=s t $0;t="-"}END{print s}'
[18:11:05] <StayHungry> syntax from hell :D
[18:11:41] <yeti> screwed up
[18:12:40] <yeti> needs more Ommmm
[18:15:18] <yeti> määän... the lf in date's output...
[18:15:47] <yeti> $ printf `date +%F` | awk -vRS=- '{s=$0 t s;t=RS}END{print s}'
[18:15:49] <yeti> 24-07-2021
[18:20:26] <StayHungry> perl's one -> print(join '-', reverse split /-/, '23-07-2021') -> [for tea, at nine to join me, 'feel free']  :D
[18:24:14] <Patsie> what are you guys trying to DO?
[18:25:20] <StayHungry> master earnestly already did :)
[18:25:20] <earnestly> StayHungry: I know what 'script' and 'scripting' means lol
[18:25:43] <StayHungry> ye, explained my attitude towards using that
[18:26:06] <earnestly> Also to call dc "a calculator" is ashes
[18:26:32] <earnestly> Poor old dc, gets no love
[18:26:54] <yeti>        dc - an arbitrary precision calculator
[18:26:59] <yeti> see man page
[18:27:22] <earnestly> yeti: Of course it's a calculator, so is python
[18:28:04] <yeti>      dc - desk calculator
[18:28:07] <yeti> on openbsd
[18:28:19] <earnestly> I operate on too high a level
[18:28:36] <earnestly> Or too low, on or the other
[18:28:36] <yeti> stop splitting hairs and you feel better
[18:28:38] <earnestly> one*
[18:28:57] <earnestly> Yeah, you're not at all at the same wavelength here
[18:29:10] <earnestly> And are reading into something that isn't even implied
[18:29:10] <yeti> and yours is the only right one
[18:29:12] <yeti> sure..
[18:29:17] <earnestly> No, just different
[18:29:25] <earnestly> Not matching
[18:29:45] <yeti> dc calls itself calculator (at least gdc and openbsd dc)
[18:29:56] <earnestly> I know, that's what the 'c' stands for
[18:31:18] <earnestly> (and bc used to be a frontend to dc)
[18:32:29] <earnestly> StayHungry: See https://minnie.tuhs.org/pipermail/tuhs/2020-March/020664.html
[18:33:00] <earnestly> Mentions dc
[18:33:04] <yeti> $ bc -ce '2*3*4'
[18:33:06] <yeti>  2 3* 4*ps.
[18:33:30] <yeti> gbc may have dropped that
[18:33:40] <earnestly> Yeah, GNU bc chose to retain backwards compatibility
[18:35:00] * yeti silently points at #dc
[18:45:15] <StayHungry> earnestly: thank for you the link, sir. i was reading that while eating
[19:00:58] *** Joins: vinipsmaker (~vinipsmak@2804:14c:f427:a9bc::1001)
[19:01:56] <mute> https://tio.run/##bZAxawMxDIX3/op2KG3pEPmUO4mWFmpbGkP2iymhzlAIWW64Dv3v13fXLIGYx4eeJT2M69c00TCG7jtRC9mawiwlpuyUUIsnBsnmAYrauXbGkliykTiJOTWe/d8KtlCj28BFgxIJlEURbkIhZQtn2zqFeUViEkZOtHNywhhaeIYTqy/WWBHurkYzQxJfdrNfP2hdXuii68f4wt70n4Ve9v2qBPChNOBjYfCprMFdacHf0oG3RcCPLf6xDJu@DiddHU96/7rfcjyO4bkO4/um0t3bodTh8DNNfw
[19:02:06] <mute> dang that string make it through irc?
[19:02:49] <yeti> yip
[19:03:18] <mute> i can't remember how i ever wrapped my head around dc. cant read it at all today
[19:04:48] <mute> but i missed something. what's this piping challenge? says "on windows" in the paste but thought windows needed double quotes for args
[19:05:58] <yeti> no idea... havent touched windows for ~2 decades
[19:06:40] <mute> My PCs run windows but do most the tinkering in a putty session to a linux server
[19:07:47] <yeti> https://tio.run/##FcuxDoJAEITh9@EC7i0mWmhhh4WJsUFD1IAWR5wrYIqDp8el@bL5M/v9LMtbC89Jih3vb18o55VHqbzslLWWrPa/ZnhyEIYGAdXRrtQgoT4OuGPKUft8g5RhcrzhgTlHtZaQYXY8C0dhL2yFnTA2iLjYZ4vObQ@DYszQZzg79mvLcXMcEb1jxKgvtujNDjI9KSZiqe6KZIMEb9GbpyuChQC1oOay/AE
[19:08:17] <yeti> someday I'll let it spit out a netpbm image instead of ascii art
[19:09:12] <yeti> mwhuaahahahaha
[19:09:16] <yeti> I already did
[19:09:27] <yeti> https://yeti.tilde.institute/brain/dc/dc.html#org54a4b97
[19:10:22] <yeti> my lossy bio associator needs more O₂
[19:10:38] <yeti> I'll take a break... outdoors
[19:10:41] <yeti> _o/"
[19:15:00] <mute> i wanted write something to fit in a signature or an irc message but never got smarter than decoding a hex bitmap
[19:49:44] *** Joins: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[20:02:57] *** Parts: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry) (-)
[20:24:14] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[20:31:43] *** Joins: kensanata (~user@user/kensanata)
[20:38:00] <yeti> hmmm
[20:39:18] <yeti> https://tio.run/##NYyxCoQwEET7/YpBMGzYXJMup3Dfkl0RLE5E7E6/PcYTpxl4wxt7bWalZNZgnn4EaGv44AIiFeGfN9h6xb5jWad5G7lpBzRBvYdA@5QSnKuSiIb4SN3VB9E3TzPf55lj3Ts6SjkB
[20:39:43] <yeti> make this more compact and the "smart" readers will cry "ackerman" function 1st
[20:40:01] <yeti> but it is a prime generator implemented recursively
[21:01:47] *** Joins: lavaball (felix@31.204.155.215)
[21:07:45] *** Quits: simbioz (~simbioz@user/simbioz) (Remote host closed the connection)
[21:16:58] *** Joins: simbioz (~simbioz@user/simbioz)
[21:20:05] *** Quits: kensanata (~user@user/kensanata) (Remote host closed the connection)
[21:36:12] *** Joins: mikeliuk (~mikeliuk@213.205.198.158)
[21:52:03] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[22:08:15] *** Quits: ^[ (~user@user//x-8473491) (Quit: ^[)
[22:21:14] *** Quits: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[22:27:48] *** Quits: mikeliuk (~mikeliuk@213.205.198.158) (Quit: Connection closed)
[22:47:55] *** Joins: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[22:50:09] *** Joins: ^[ (~user@user//x-8473491)
[22:50:35] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 255 seconds)
[22:52:37] *** Quits: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 258 seconds)
[22:59:01] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:18:38] *** Joins: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[23:23:27] *** Quits: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 245 seconds)
[23:49:25] *** Joins: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[23:54:52] *** Quits: nate1 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 272 seconds)
