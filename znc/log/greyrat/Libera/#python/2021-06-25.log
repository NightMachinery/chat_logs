[00:00:17] <CrtxReavr> I hate it when I write a regex, look at it years later, and don't understand it.
[00:00:40] <grym> s/regex.*/regex/
[00:01:03] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 265 seconds)
[00:01:51] <grym> i've asked people to leave paragraph length comments to annotate regex in code review before, because otherwise it's just write-only code after about two weeks
[00:01:57] <matsaman> CrtxReavr: use verbose regex and comments? =)
[00:02:02] <matsaman> can do that nowadays, at least
[00:02:15] <matsaman> or y'know, write tests
[00:02:18] <matsaman> and it should be clear
[00:02:47] *** Joins: LemurP (~lemurp@cm-84.214.104.84.getinternet.no)
[00:04:28] <IHasFinger> douglaswinship, curl works
[00:04:28] *** Joins: ulu (~ulu@user/ulu)
[00:04:54] <IHasFinger> can do a post request to the telegram without any issue
[00:05:04] <IHasFinger> the issue is with requests.post
[00:05:37] <douglaswinship> IHasFinger: would you be able to share the curl command that you're using, and the requests function call that you're using? (in a paste bin). If the python version uses variables, we'd also need to know the value of the variables. (Also, don't forget to edit any secrets like authentication keys)
[00:05:50] <habnabit_> IHasFinger, oh, is this your homegrown telegram bot API client again?
[00:06:15] *** Joins: hrtk (~hritik@223.226.188.53)
[00:06:37] <hrtk> Hi, is there a way to find out if a class has been imported in a given module object ?
[00:06:56] <IHasFinger> douglaswinship, its something like this
[00:06:57] <IHasFinger> curl -X POST -F 'chat_id=-1234569782' -F 'text=hello' https://api.telegram.org/bot34535353534:AAGsqPkY_AuSSDFSDsdasdas8doNEGFGIbfk/sendMessage
[00:07:06] <Wulf> hrtk: hasattr?
[00:07:08] <douglaswinship> IHasFinger: Oh, i did just think of one mistake i made in the beginning: I mixed up "data=" with "json=", inside requests.post. They send the information in slightly different ways. I can't remember what the difference is, but maybe try using "json=" instaed of "data=", just in case.
[00:07:09] <habnabit_> hrtk, what is it you want to predicate on that knowledge?
[00:07:29] <habnabit_> hrtk, modules are not partially imported; importing any part of a module will define the class
[00:07:34] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[00:07:43] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 256 seconds)
[00:08:51] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[00:08:58] <douglaswinship> habnabit_: surely that depends on how it was imported? "from requests import get" would import only the get command, right? (Or at least, it would seem to be the only thing imported, in terms of the namespace)
[00:09:10] <hrtk> habnabit_: I want to find out if a given class is present in a module object (returned by inspect.getmodule) in order to make sure it to patch that class properly later.
[00:09:12] <habnabit_> IHasFinger, is there a reason you still refuse to use e.g. telethon?
[00:09:13] <IHasFinger> habnabit_, yeah my way to a million bot hahaha
[00:09:33] *** Quits: asmodee (~Asmodee@gateway/tor-sasl/asmodee) (Quit: Teleporting ...)
[00:09:33] *** Quits: sazawal (~sazawal@2409:4043:510:d63:bbf3:69a3:5ba3:3292) (Quit: Leaving)
[00:09:48] <IHasFinger> habnabit_, what is that
[00:09:50] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[00:09:59] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[00:10:12] <habnabit_> IHasFinger, a popular telegram bot library: https://github.com/LonamiWebs/Telethon
[00:10:34] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[00:10:46] *** Quits: Coder_000 (~u0_a117@177.10.203.30) (Quit: WeeChat 3.0.1)
[00:10:54] <habnabit_> hrtk, why would it not be present?
[00:11:19] <IHasFinger> habnabit_, thats more for a channel where users can talk between themself
[00:11:31] <habnabit_> IHasFinger, it isn't, no
[00:11:53] <habnabit_> IHasFinger, i myself have personally written DM-only bots for telegram with telethon
[00:11:54] <IHasFinger> my channel is just my bot to message people with stocks and cypto info e.g. price change every 5 minues
[00:11:56] <IHasFinger> minutes
[00:12:12] <habnabit_> IHasFinger, yep. that's trivial with telethon. i've done that too
[00:12:22] <IHasFinger> didnt see the need of using a library where i can just make a post request
[00:12:41] <habnabit_> IHasFinger, other than the various issues you've had with the API? ;)
[00:12:45] <habnabit_> IHasFinger, this isn't the first time
[00:13:32] <douglaswinship> habnabit_: I can't talk for IHasFinger, but i know that sometimes I just want to make something myself for the satisfaction, and as a learning opportunity
[00:14:04] <IHasFinger> douglaswinship, +1
[00:14:31] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[00:14:31] *** Quits: glumanda (~manu@194-208-201-025.tele.net) (Ping timeout: 256 seconds)
[00:14:50] <Konsgn> Alright, I'm confused. If I have module namespacing, I can call out functions from a submodule, but how can I call functions that reference the functions of a top level modules main class?
[00:15:09] <habnabit_> Konsgn, can you give an example?
[00:15:34] <habnabit_> douglaswinship, i don't find that particularly compelling
[00:15:47] <grym> Konsgn: carefully
[00:16:34] <douglaswinship> habnabit_: well I mean... that's okay. Because you're not the one doing the project.
[00:16:41] <douglaswinship> habnabit_: you don't need to find it compelling.
[00:17:14] <habnabit_> douglaswinship, ok. it's why i'm more interested in helping someone learn how to use a library than reinvent one
[00:17:16] <Konsgn> Bah. yea lemme try. I have instrument(minimalmodbus) as my main class. within it i have self.getstorage. I want to add a seperate module that has a function bar() that in it's execution can call instrument.getstorage.
[00:17:25] <douglaswinship> habnabit_: that's fair.
[00:17:28] <habnabit_> Konsgn, python doesn't have a concept of 'main class'
[00:17:39] <Konsgn> I want to do that so i can have Instrument.util.bar() as a valid call
[00:17:56] <Konsgn> yea... top level then?
[00:18:08] <hrtk> habnabit_: Because the test case loops over multiple modules, some might not have that class and needed to be handled accordingly
[00:18:25] <habnabit_> Konsgn, is your code online somewhere? it's easier to read the code than a summary of it
[00:18:40] <Konsgn> not really
[00:18:59] <douglaswinship> Konsgn: paste bin then?
[00:19:03] <hrtk> The test case itself doesn't loop tbh, the testcase is called with different modules as parameters.
[00:19:05] <habnabit_> Konsgn, could you push the git repo somewhere public? or mercurial etc
[00:20:06] *** Joins: GvP (~GvP@ip70-162-85-176.ph.ph.cox.net)
[00:20:17] *** Joins: pnoud (~pnoud@user/pnoud)
[00:20:21] *** Quits: SuperLag (~akulbe@user/superlag) (Remote host closed the connection)
[00:21:04] *** Joins: u0_a117 (~u0_a117@177.10.203.30)
[00:21:15] <u0_a117> hi
[00:21:30] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[00:21:32] *** u0_a117 is now known as Coder_000
[00:23:00] *** Joins: CombatVet (~c4@user/combatvet)
[00:23:13] *** Quits: Coder_000 (~u0_a117@177.10.203.30) (Client Quit)
[00:25:19] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[00:25:40] *** Quits: gloomy (~ldorigo@2a02:a03f:679e:e700:718d:8beb:946b:9ee7) (Ping timeout: 246 seconds)
[00:26:01] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 258 seconds)
[00:26:15] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[00:26:16] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[00:27:01] *** Joins: r3m (~launch@user/r3m)
[00:27:16] <Celelibi> How do I make a context manager use another context manager?
[00:27:41] <SnoopJ> Celelibi, exactly the way you'd use it in any other context
[00:27:46] <habnabit_> Celelibi, if you're defining it with `def __enter__`, call the other one's __enter__
[00:28:00] <Celelibi> Oh. ok.
[00:28:04] <grym> you can also put more than one on one line, if that helps
[00:28:05] <graingert> Celelibi: show the code of your context manager?
[00:28:06] <Wulf> Celelibi: not sure what you're really asking, but I like the contextlib.ExitStack
[00:28:12] <graingert> it's best to use @contextlib.contextmanager
[00:28:14] <Celelibi> I thought it was bad practice to call dunder methods directly.
[00:28:27] <graingert> Celelibi: yeah well you could call it with contextlib.ExitStack
[00:28:36] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Ping timeout: 265 seconds)
[00:28:41] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[00:28:45] *** Joins: jdmark2 (~jdmark@172.58.172.233)
[00:28:59] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[00:29:02] <graingert> https://www.irccloud.com/pastebin/czFXXZ1c/cmgr.py
[00:29:10] <graingert> Celelibi: ^ it's preferred to use the decorator
[00:29:23] *** Joins: supakeen (~user@python/site-packages/supakeen)
[00:30:03] <IHasFinger> douglaswinship, I LOVE YOU
[00:30:06] <IHasFinger> json works
[00:30:21] *** Parts: dyslexicat (~dyslexica@176.234.11.153) ()
[00:30:25] <Celelibi> graingert, well, I wasn't sure how the yield would interact with the "with" around it.
[00:30:49] <Celelibi> But yeah, that's exactly what I need. At least for the second level.
[00:30:59] <Celelibi> For the first level, I still prefer defining a class. ^^
[00:31:35] <douglaswinship> IHasFinger: excellent! :D
[00:31:38] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 252 seconds)
[00:31:51] <douglaswinship> I just wish I could remember what the difference was :)
[00:31:58] *** Joins: Coder_000 (~Coder_000@177.10.203.30)
[00:32:08] <IHasFinger> but why did data work on my windows pc but on linux it wouldnt?
[00:32:29] <douglaswinship> IHasFinger: no clue.
[00:32:41] <IHasFinger> param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class:`Request`.
[00:32:42] <IHasFinger> param json: (optional) json data to send in the body of the :class:`Request`.
[00:33:20] <IHasFinger> my params is a dictionary
[00:33:21] <IHasFinger> {'chat_id':os.getenv("TELEGRAM_CHANNEL_ID"), 'text': msg["text"], "parse_mode" : "markdown", "disable_web_page_preview":True}
[00:34:13] <douglaswinship> IHasFinger: Maybe the library does different things on linux than it does on python. Maybe it calls a Windows utility to send the actual http request, and that utility does something differently than the equivalent linux utility? It might have something todo with the Content-Type header. I read about that in this link
[00:34:16] <hrtk> inspect.getmembers did the trick for me
[00:34:18] <douglaswinship> https://stackoverflow.com/questions/47188244/python-requests-library-data-vs-json-named-arguments-with-requests-post.
[00:34:23] <Coder_000> Hello
[00:35:24] <jamea> habnabit_ not play the video :( have any paste code?
[00:35:37] *** Quits: jdmark2 (~jdmark@172.58.172.233) (Read error: Connection reset by peer)
[00:35:51] *** Quits: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs) (Ping timeout: 265 seconds)
[00:36:17] *** Joins: tpnsvo (~tpnsvo@2a00:1028:8d1d:75ee:1c41:4f3:5095:6630)
[00:36:49] *** Quits: Lando-SpacePimp (~LandoCal@user/lando-spacepimp) (Ping timeout: 265 seconds)
[00:37:05] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[00:37:13] *** Magician is now known as deepy
[00:37:14] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[00:37:23] <tpnsvo> Hi guys, I need a contact to someone who can give me advanced information about python installer for windows.
[00:39:18] <jamea> oo i found :)
[00:39:54] <SnoopJ> tpnsvo, it's best to just ask your question
[00:40:07] *** Joins: jdmark (~jdmark@172.58.172.233)
[00:40:42] <tpnsvo> SnoopJ: :D Ok... I am trying to install python via powershell on windows server 2016 docker image. :)
[00:40:55] *** Quits: Coder_000 (~Coder_000@177.10.203.30) (Quit: WeeChat 3.0.1)
[00:40:59] <jamea> exist a better way for get minimal value? https://bpa.st/FUTA
[00:41:17] <tpnsvo> On normal windows server I run "installer.exe /quiet config.xml" just fine. The same via dockerfile.
[00:41:21] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 268 seconds)
[00:41:27] *** Quits: dvx (~dvx@185.63.97.64) (Quit: dvx)
[00:41:43] *** Quits: noneco (~noneco@dslb-090-186-083-254.090.186.pools.vodafone-ip.de) (Remote host closed the connection)
[00:42:03] <tpnsvo> It does not work via powershell script. Via powershell script it starts two processes and does nothing. Never return. What are the processes doing? how can I debug it? Or better, make it work?
[00:42:04] *** Quits: jdmark (~jdmark@172.58.172.233) (Read error: Connection reset by peer)
[00:42:08] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[00:42:30] <LordKalma> tpnsvo, what about regular cmd?
[00:42:43] <LordKalma> tip: you can use cmd /c before your command on powershell to run it with cmd
[00:43:19] <tpnsvo> LordKalma: Thanks, while writing this question it crossed my mind. :) But I wanted to stick with powersHELL... (not to mix different shells)
[00:43:24] <LordKalma> also, protip: don't ask to ask, ask, and don't ask for "experts on something" before asking :)
[00:44:06] <tpnsvo> LordKalma: Yeah, thanks, I know how to use cmd. I just wanted to avoid it... if possible.
[00:44:30] <LordKalma> yeah, I mean, it probablyh should work, just I can't suggest anything better at this point
[00:44:59] <tpnsvo> LordKalma: I just really wondered what those processes might be waiting for. :/
[00:45:07] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[00:46:33] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[00:47:05] *** Joins: jdmark (~jdmark@172.58.172.233)
[00:48:08] *** Quits: jdmark (~jdmark@172.58.172.233) (Remote host closed the connection)
[00:48:59] <Konsgn> Lame, wrote out my issues in pastebin, pressed +paste and woosh 30 min of organizing my thoughts and theories...gone.
[00:49:28] <grym> Konsgn: best to copy out from an on disk text buffer :(
[00:50:17] <tpnsvo> LordKalma: Nope, doesn't seem to work. Thanks anyway
[00:50:19] <Konsgn> yea... learnt the hard way. no browser caching either(which i appreciate) but man...
[00:52:12] *** Joins: Coder_000 (~u0_a117@177.10.203.30)
[00:52:35] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[00:52:41] *** Joins: matsaman (~matsaman@user/matsaman)
[00:52:53] *** Quits: Coder_000 (~u0_a117@177.10.203.30) (Quit: WeeChat 3.0.1)
[00:53:27] <Soni> ugh, yeah, we give up on that python-ideas thread. .-.
[00:54:23] <bjs> Soni: which one
[00:55:34] *** Joins: Coder_000 (~u0_a117@191.35.79.126)
[00:55:36] <Soni> the one where we got ignored by the other person trying to push for extension methods
[00:55:37] <Coder_000> hiop
[00:55:42] <Coder_000> hello
[00:56:01] *** Quits: Coder_000 (~u0_a117@191.35.79.126) (Client Quit)
[00:56:27] <matsaman> hiop
[00:58:09] <bjs> Soni: it looked like people replied to you, and to others too.  You weren't the only one in that conversation
[00:58:19] *** Parts: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com) ()
[00:59:08] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 252 seconds)
[01:00:17] *** Joins: Lando-SpacePimp (~LandoCal@user/lando-spacepimp)
[01:00:37] <Soni> bjs: honestly tho since our last reply(ies) to steven, steven hasn't responded to anything we said, at this point we don't feel like it's worth it to argue about it anymore
[01:00:54] *** Joins: Samian (~textual@2620:10d:c091:480::1:8d08)
[01:00:55] <Samian> hello
[01:01:03] <douglaswinship> Samian: Helle
[01:01:05] <douglaswinship> *hello
[01:01:39] <bjs> Soni: you mean the email you sent yesterday?
[01:02:05] *** Joins: u0_a117 (~u0_a117@177.10.203.30)
[01:02:05] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[01:02:21] <Soni> bjs: it's been a little over a day yeah
[01:02:21] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[01:02:34] *** u0_a117 is now known as Coder_000
[01:02:39] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:a874:b712:9670:8351)
[01:02:52] *** Quits: magla (~gelignite@55d4555d.access.ecotel.net) (Quit: Stay safe!)
[01:02:56] <Coder_000> humm
[01:02:58] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[01:02:58] <bjs> Soni: i think you're being a little dramatic. One person has not replied to you for one day.  tbh Steven appears to get a little tunnel visioned in the mailing lists
[01:03:00] *** Joins: justinf210 (~justinf21@194.sub-97-43-193.myvzw.com)
[01:03:15] *** Quits: lidless (~lidless@user/jabberwock) (Ping timeout: 256 seconds)
[01:03:17] <bjs> and so far the proposal in that -ideas thread isn't very well motivated or very coherent
[01:03:31] <Soni> bjs: don't we all :p
[01:03:37] <Samian> I have numpy array with 2 dimensions but actually stores three dimension.  mydata[table_index * row_index, column_index] returns a value.  I want to reformat so it's row, table, column, and then recombine the first two dimensions so it's row_index * table_index
[01:03:41] <bjs> Soni: well you do too yes
[01:03:43] <bjs> but not everyone else :)
[01:03:43] <Samian> what's the pythonic way to do that?
[01:03:47] <Soni> eh, our variant seemed well coherent
[01:03:51] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[01:03:57] *** Joins: samuelbernardo (~samuelber@194.210.119.252)
[01:04:11] <Soni> bjs: we're learning >.>
[01:04:35] <bjs> Soni: well nobody in that list actually has a concrete proposal yet, let alone a coherent one :)
[01:04:36] <Soni> but yeah fair
[01:04:40] <bjs> in that thread*
[01:04:55] <Soni> bjs: define "concrete"?
[01:05:17] <bjs> Soni: I think if you gave two different engineers that thread and asked them "make it" you'd get two different things
[01:05:19] <jamea> name 'reduce' is not defined    or: np.reduce  module 'numpy' has no attribute 'reduce'  line 32: https://bpa.st/LJYQ
[01:05:21] <bjs> or maybe more than two :)
[01:06:36] <Soni> bjs: we think if we gave two different engineers "make it so foo.bar desugars to __dot__(foo, "bar")" we'd get the same thing twice?
[01:06:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:07:02] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 258 seconds)
[01:07:20] <bjs> Soni: you mean like `def __dot__(foo, bar): return getattr(foo, bar)` I can do that today fine
[01:07:25] *** Quits: justinf210 (~justinf21@194.sub-97-43-193.myvzw.com) (Ping timeout: 258 seconds)
[01:07:54] *** Joins: justinf210 (~justinf21@227.sub-97-44-1.myvzw.com)
[01:08:10] <Soni> bjs: no. foo.bar becomes __dot__(foo, "bar")
[01:08:16] <Soni> bjs: nothing about defs
[01:08:21] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[01:08:25] <bjs> Soni: oh wait so what you're saying is,  you gave one engineer the problem and already got a different answer ;)
[01:08:40] <Soni> >.>
[01:09:44] *** Quits: tpnsvo (~tpnsvo@2a00:1028:8d1d:75ee:1c41:4f3:5095:6630) (Quit: Leaving)
[01:09:50] <Samian> doesn't ::2 mean to skip by 2?
[01:09:57] <bjs> Soni: for what it's worth,  if you really wanted my opinion,  I think your proposal is bad :)
[01:10:07] <bjs> Samian: yes
[01:10:21] *** Quits: dibas (~dibas@user/dibas) (Quit: Leaving...)
[01:10:25] <Soni> bjs: it would be slow af but still orders of magnitude faster than runtime reflection :p
[01:10:30] <Samian> I just did:  a = np.array([arange(20)]).  a[::2]
[01:10:32] *** Joins: dibas (~dibas@user/dibas)
[01:10:38] <Samian> and it doesn't display the numbers skipping by 2!
[01:10:57] <Soni> for lists*
[01:11:01] <Konsgn> whelp figured it out. just had to pass in the parent class as device and from subclasses call out self.device.functionx()
[01:11:03] <Samian> oh i see why
[01:11:04] <bjs> Soni: I'm not sure what you mean by "runtime reflection".  Python's attribute lookup is already very complicated and your proposal didn't even start to talk about it or hook into it.
[01:11:12] <Soni> not sure if numpy arrays have it
[01:11:36] <SnoopJ> Samian, that array is 2D and your index is along the first axis
[01:11:44] <Soni> bjs: the proposal doesn't touch actual attribute lookup. it just makes a mechanism for hooking into the dot operator.
[01:12:09] <Samian> what about skip by 2 but between a range?
[01:12:10] <bjs> Soni: yes, that's why I think it's bad and why you'd get a bunch of different interpretations about how it _should_ interact with attribute lookup
[01:12:17] <bjs> Samian: "between a range" ?
[01:12:19] <Soni> bjs: it doesn't
[01:12:20] <Samian> foo[a:b]
[01:12:23] <SnoopJ> Samian, you can do start:stop:step
[01:12:24] *** Quits: justinf210 (~justinf21@227.sub-97-44-1.myvzw.com) (Ping timeout: 258 seconds)
[01:12:25] <Samian> but skip by two starting at a
[01:12:27] <Samian> aha
[01:12:27] *** Joins: Emmm (~Emm@137.220.127.235)
[01:12:34] <Samian> foo[a:b:2]
[01:12:39] <Soni> bjs: however, ppl did say something about from extensions use * in *
[01:12:49] <bjs> Soni: well of course it does interact somehow.  People have written programs today using normal attribute lookup and this proposal doesn't _remove_ it
[01:12:56] <bjs> it's still there, you must still have programs that use it
[01:13:03] <bjs> You cannot _not_ interact with it.
[01:13:07] <Soni> bjs: yeah, attribute lookup is done with getattr, not with dot
[01:13:27] <Soni> so, the proposal doesn't touch attribute lookup
[01:13:56] <bjs> Soni: your proposal seeked to change what x.y means
[01:14:24] <Soni> yeah, it would call __dot__, which would by default be initialized to getattr
[01:14:40] <bjs> Soni: okay so you're clearly interacting with the attribute look behaviour since that is the attribute lookup syntax.
[01:15:13] <Soni> well we're calling into it but the proposal doesn't affect attribute lookup behaviour by itself
[01:15:33] <bjs> Soni: your proposal doesn't talk about attribute lookup _at all_.  Which is clearly just wrong.
[01:15:47] <Soni> that's by design
[01:15:47] *** Joins: GiLgAmEzH (~gilgamezh@181.47.117.104)
[01:16:08] *** Joins: tha (~user@2a05:f480:1400:f44:5400:3ff:fe6d:f349)
[01:16:14] <bjs> Soni: okay but that means your proposal is "delete all of the attribute lookup stuff in Python and replace it with __dot__"
[01:16:19] <Soni> attribute lookup is attribute lookup, extension methods are something else entirely that isn't part of attribute lookup
[01:17:00] <Soni> it's a very Lua-ish proposal tbh
[01:17:23] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 258 seconds)
[01:17:39] *** Joins: justinf210 (~justinf21@194.sub-97-43-193.myvzw.com)
[01:18:03] *** Joins: alguien (~alguien@user/alguien)
[01:18:09] <bjs> Soni: just stop, there has never and will never be any proposal to Python that does not interact with attribute lookup in some way.  Almost none *change* the attribute lookup behaviours or syntax at all,  but it's practically impossible for attribute lookup to not be involved at all. If your proposal is to change what the attribute lookup syntax means ("x.y") without saying what to do with the old attribute lookup semantics...
[01:18:19] <bjs> ... then your proposal is saying to throw the old semantics away.
[01:18:50] *** Joins: ultralisk (~ultralisk@2a00:23c6:4b0e:e900:75db:cb84:2f7c:da2)
[01:18:58] <douglaswinship> I'm importing a class (called SimpleMFRC522) and I like everything about it, except it's __init__ method. So I made a child class, inherriting from SimpleMFRC522, and overwriting the init function. I copied the existing function, and then made the changes I wanted to make. Seemed like a good idea to me. But now Pylint is giving me a warning "__init__ method from base class is not called". I know
[01:19:02] *** Joins: travaldo (~travaldo@159.203.88.148)
[01:19:04] <douglaswinship> pylint isn't always right, but I thought I'd ask for opinions. Is there something wrong with what I did?
[01:19:20] <Soni> (Lua gives you the tools to do whatever, but you do the whatever yourself. giving you the __dot__ function would let you do extension methods and whatever, without doing it for you)
[01:19:31] *** Joins: brickfat (~brickfat@user/brickfat)
[01:19:53] <bjs> douglaswinship: well, linters are there to detect common mistakes.  Forgetting to call super().__init__() is a common mistake so it's flagging it.
[01:20:30] <bjs> douglaswinship: probably it's a weird thing to do. For some types it can be a terrible idea. Especially if the parent has methods that return new objects.
[01:20:41] <bjs> (new instances of the class I mean)
[01:21:57] *** Quits: justinf210 (~justinf21@194.sub-97-43-193.myvzw.com) (Ping timeout: 256 seconds)
[01:22:11] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[01:22:19] <bjs> Soni: if I'm honest, your proposal is badly thought out,  the interactions with the standard attribute lookup is not clearly stated,  the proposal seems to (at least) break all code that has ever been written and can't possibly ever be accepted and overall just isn't a very good idea
[01:23:23] <douglaswinship> bjs: in this case, SimpleMFRC522 is a wrapper function for an MFRC522 class. The only line in the __init__ for Simple MFRC, is `self.reader = MFRC522()`. I wanted to make SlightlyLessSimpleMFRC522. I wanted to keep all the helper functions, but I wanted it to be possible to pass arguments through to the original MFRC522 class (`self.reader = MFRC522(*args, **kwargs)`).
[01:23:30] <douglaswinship> I'm wondering if there was a better way to do that.
[01:23:33] *** Joins: justinf210 (~justinf21@44.sub-174-247-116.myvzw.com)
[01:23:35] *** Joins: shabius (~shabius@2a0e:1c80:2:1021::1000)
[01:23:36] *** Joins: OPK (~OPK@user/opk)
[01:23:42] <douglaswinship> s/wrapper function/wrapper class
[01:23:54] *** Quits: Coder_000 (~u0_a117@177.10.203.30) (Ping timeout: 258 seconds)
[01:25:44] <Soni> bjs: how would you clarify it and keep its simplicity?
[01:26:11] <bjs> Soni: it sounds simple because you haven't actually said what it is.
[01:26:20] <bjs> Everything sound simple when you don't actually explain it :)
[01:26:45] *** Joins: zebrag (~chris@user/zebrag)
[01:26:45] *** Quits: justinf210 (~justinf21@44.sub-174-247-116.myvzw.com) (Read error: Connection reset by peer)
[01:27:10] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f955-62.dhcp.inet.fi) (Quit: WeeChat 3.2)
[01:27:20] *** Joins: justinf210 (~justinf21@44.sub-174-247-116.myvzw.com)
[01:27:25] *** Joins: Celeo (~Celeo@user/celeo)
[01:27:28] *** Quits: litharge (litharge@libera/bot/litharge) (Quit: uprading)
[01:27:29] *** Quits: Emmm (~Emm@137.220.127.235) (Changing host)
[01:27:29] *** Joins: Emmm (~Emm@user/emmm)
[01:27:32] <bjs> and I don't like your proposal so I personally wouldn't spend any time on it
[01:28:03] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[01:28:19] *** Quits: marnold (~matt@2603-7081-4642-8e00-0000-0000-0000-0002.res6.spectrum.com) (Remote host closed the connection)
[01:28:50] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 268 seconds)
[01:28:58] <Soni> bjs: the syntax expr.name becomes sugar for the function call __dot__(expr, "name"), and the function __dot__ is a new builtin equivalent to getattr that may be shadowed by globals/locals/nonlocals in a module/function
[01:29:00] *** Quits: Konsgn (~Konsgnx3@66-109-34-138.static.firstlight.net) (Quit: Leaving)
[01:29:08] <Soni> how does that sound?
[01:29:37] <bjs> Soni: oh it's a builtin? well that wasn't something that you mentioned before.  What is its builtin behaviour? What happens if you shadow it? What happens if you don't shadow it? etc
[01:29:39] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 258 seconds)
[01:29:44] *** Joins: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it)
[01:30:15] <Soni> bjs: if you shadow it your shadowed version gets called instead. if you don't shadow it... it gets called? what?
[01:30:19] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:a874:b712:9670:8351) (Quit: Leaving)
[01:30:25] <Soni> what are we missing?
[01:30:35] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[01:30:38] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:a874:b712:9670:8351)
[01:31:05] *** Quits: qunzhong_luxian (~qunzhong_@68.235.43.142) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:31:18] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:31:29] <bjs> Soni: oh wow? It gets called instead? that's not what I would've done
[01:31:29] <habnabit_> Soni, why bother when __getattr__ already exists?
[01:31:35] <bjs> I'd always have used the module global instead
[01:31:56] <Soni> bjs: what happens if you write "getattr(foo, "bar")" in a module today?
[01:32:05] *** Joins: b2xiao (~b2xiao@wikipedia/nneonneo)
[01:32:16] <bjs> Soni: it does an explicit lookup of the getattr name of course
[01:32:22] <Soni> what part of "sugar" wasn't clear?
[01:32:44] <Soni> habnabit_: this isn't for module attributes. it's also not for object attributes
[01:32:45] <habnabit_> jamea, why would you use reduce for that? numpy arrays have a min method
[01:33:01] <habnabit_> Soni, any attribute is an object attribute
[01:33:14] <bjs> Soni: the fact it's not what I would've done. and modules are objects too.
[01:33:14] <habnabit_> Soni, are you trying to infect python with DSLs?
[01:33:24] <Soni> habnabit_: yes :p
[01:33:39] <Soni> if they enable extension methods, yes
[01:34:02] <Soni> but yeah imagine being able to "return www.google.com" and it just works
[01:34:09] <habnabit_> that sounds horrible
[01:34:18] <bjs> Soni: your proposal wouldn't even allow that unless www existed
[01:34:29] <habnabit_> and already possible today with a www object with __getattr_ yes
[01:34:33] <Soni> bjs: eh, how much can you do with the globals dict?
[01:34:38] <habnabit_> very little
[01:34:47] <bjs> Soni: so the only example you've demonstrated so far for why you want this feature
[01:34:51] <bjs> ... doesn't even work with your own made up feature?
[01:34:51] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[01:34:52] <Akuli> can you set globals().__class__ and override __missing__?
[01:35:02] * Akuli is giving bad ideas lol
[01:35:18] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[01:36:00] <habnabit_> jamea, in fact your whole for loop is pointless because .min takes an axis= parameter
[01:37:10] *** Joins: acresearch (~acresearc@user/acresearch)
[01:37:35] *** Joins: lidless (~lidless@user/jabberwock)
[01:37:40] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[01:37:45] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[01:38:05] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:38:06] <aplainzetakind> https://bpa.st/56LQ If I change the generator expression on line 11 to a list comprehension, the results change. How come?
[01:38:17] *** Quits: drillbyt (~drillbyt@user/drillbyt) (Quit: Leaving)
[01:38:22] *** Quits: boxelephant (~boxelepha@209.143.87.130) (Ping timeout: 252 seconds)
[01:38:58] <habnabit_> aplainzetakind, yeesh that's a confusing comprehension from L9-12
[01:39:18] <habnabit_> aplainzetakind, generator comprehensions produce generator objects, which are always true. perhaps you meant to use the any builtin?
[01:39:32] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[01:39:45] <aplainzetakind> habnabit_: Ah, makes sense.
[01:39:48] <aplainzetakind> Thanks.
[01:40:08] <habnabit_> aplainzetakind, converting a list to a set to a list also seems a bit silly. why not use a set comprehension and return a set? sets are way more useful
[01:40:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:40:52] *** Quits: Fingel (fingel@2600:3c01::f03c:91ff:fee5:4830) (Changing host)
[01:40:52] *** Joins: Fingel (fingel@user/fingel)
[01:41:04] *** Quits: upsala (~zcb@193.32.249.132) (Quit: WeeChat 3.2)
[01:41:08] *** Joins: diek (~diek@187.36.4.113)
[01:41:21] <aplainzetakind> Only because I completely forgot that set comprehensions are a thing.
[01:41:35] *** Quits: LemurP (~lemurp@cm-84.214.104.84.getinternet.no) (Ping timeout: 265 seconds)
[01:42:05] *** Joins: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net)
[01:42:07] *** Quits: gmem (~gmem@cpc104194-ipsw4-2-0-cust313.7-4.cable.virginm.net) (Remote host closed the connection)
[01:43:11] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[01:44:37] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[01:44:51] *** Joins: spithash (~spithash@user/spithash)
[01:45:01] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[01:45:37] *** Quits: sajran (~Thunderbi@89-64-34-85.dynamic.chello.pl) (Remote host closed the connection)
[01:46:39] *** Joins: mikeliuk (~mikeliuk@213.205.198.125)
[01:46:50] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[01:47:20] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 268 seconds)
[01:47:27] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[01:47:40] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 258 seconds)
[01:49:10] *** Joins: jdmark (~jdmark@67.8.137.130)
[01:49:29] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[01:50:00] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[01:51:39] *** Quits: justinf210 (~justinf21@44.sub-174-247-116.myvzw.com) (Ping timeout: 268 seconds)
[01:52:23] *** Quits: alguien (~alguien@user/alguien) (Remote host closed the connection)
[01:52:23] *** Quits: greedom (~greedom@2001:16b8:2e8e:4a00:c39d:2e66:a3de:c401) (Remote host closed the connection)
[01:52:47] *** Joins: alguien (~alguien@user/alguien)
[01:53:41] *** Quits: GiLgAmEzH (~gilgamezh@181.47.117.104) (Ping timeout: 256 seconds)
[01:54:58] *** Joins: GiLgAmEzH (~gilgamezh@181.47.117.104)
[01:54:58] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[01:55:21] <Samian> is there a more elegant way to do this? r = [ r[ prefix_sum[i]:prefix_sum[i+1] ] for i in range ( num_tables ) ]
[01:55:48] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[01:56:15] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:56:31] *** Joins: mickey (~user@user/mickey)
[01:56:59] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[01:57:33] <ronny> Samian: numpy or plain python
[01:58:05] *** Joins: justinf210 (~justinf21@128.sub-97-44-2.myvzw.com)
[01:58:08] <Samian> it's actually a pytorch tensor, but pytorch follows numpy
[01:58:10] <Samian> so numpy
[01:58:22] <Samian> I'm interested in how it would look for both ways
[01:58:43] *** Quits: Akuli (~Akuli@212.146.28.44) (Quit: Leaving)
[01:58:46] *** Quits: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net) (Quit: Client closed)
[01:59:01] *** Joins: jinie (~jimmy@188.114.173.37)
[01:59:36] <ronny> For plain python a zip would typically be used, numpy may have a more optimized way
[01:59:45] *** Joins: litharge (litharge@libera/bot/litharge)
[02:00:01] *** ChanServ sets mode: +o litharge
[02:00:15] <Samian> someone needs to write the book:  "common data reformatting lines of code;  how you're used to seeing it the c++ way, and how to do it the python way"
[02:00:25] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[02:00:28] <ronny> What kind of shuffle are you implementing there
[02:01:06] <FunkyBob> Samian: The Rosetta Repository?
[02:01:08] <Samian> it's not really a suffle. It's just breaking up a sequence of numbers of numbers
[02:01:20] * Samian googles The Rosetta Repository
[02:01:32] <FunkyBob> it's not a thing... yet... that I know of
[02:01:46] <FunkyBob> but seems an apt name for your idea... in light of the Rosetta Stone
[02:02:23] <KirkMcDonald> Samian: prefix_sum is a list or array which contains indexes into r?
[02:02:51] *** Quits: justinf210 (~justinf21@128.sub-97-44-2.myvzw.com) (Ping timeout: 265 seconds)
[02:02:53] *** Joins: Dotz0cat (~Dotz0cat@h179.13.31.71.dynamic.ip.windstream.net)
[02:03:03] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[02:03:24] *** Joins: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com)
[02:03:38] <Samian> KirkMcDonald  yes, that's how the sequence of number is split up, each split becoming a separate sequence. All the splits becoming a list of the sequences
[02:03:51] <KirkMcDonald> Samian: Are prefix_sum and r the same length?
[02:04:11] <Samian> a = [1,2,3,4,5]. prefix_sum = [0, 2].   output= [[1,2],[3,4,5]]
[02:04:16] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 250 seconds)
[02:04:47] *** Joins: SuperLag (~akulbe@user/superlag)
[02:04:58] <KirkMcDonald> Oh, hmm. This does not appear to be what the above code does.
[02:05:59] *** Quits: regeya (~user@50.45.24.247) (Quit: ERC (IRC client for Emacs 27.2))
[02:06:40] <KirkMcDonald> Samian: To be clear, each element of prefix_sum is an index at which to start a sublist?
[02:06:45] *** Joins: regeya (~shane@50.45.24.247)
[02:08:02] <NoImNotNineVolt> hey, so, i requests' Response objects have a total_seconds method which returns the amount of time that elapsed between when the request was made and the response headers were received...
[02:08:21] <NoImNotNineVolt> but is there a way to measure how long it took for the connection to be established?
[02:08:39] *** Quits: GiLgAmEzH (~gilgamezh@181.47.117.104) (Ping timeout: 265 seconds)
[02:08:46] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[02:09:09] <NoImNotNineVolt> i'm trying to determine an appropriate connection timeout for a sometimes-completely-unresponsive server, so i can minimize my connection timeout to hammer it with retries as fast as warranted.
[02:09:22] <KirkMcDonald> Samian: One option for that would be: https://bpa.st/I7WQ
[02:09:54] *** Quits: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com) (Ping timeout: 252 seconds)
[02:10:12] <Samian> that's really elegant!
[02:10:19] *** Joins: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com)
[02:10:58] <KirkMcDonald> NoImNotNineVolt: You could adjust the timeout dynamically. Start with something short, and retry while backing off the timeout.
[02:11:27] <KirkMcDonald> NoImNotNineVolt: Or the reverse: Start with a long timeout, and shorten it so long as requests succeed.
[02:11:42] <NoImNotNineVolt> KirkMcDonald: i don't have that luxury. i'm trying to benchmark the server i query now, to profile its performance and set a static connection timeout.
[02:12:08] <graingert> NoImNotNineVolt: what do you do if the connection times out?
[02:12:18] <NoImNotNineVolt> graingert: try again.
[02:12:23] *** Quits: control (guesswho@user/control) (Ping timeout: 256 seconds)
[02:12:36] <graingert> when you have the static timeout decided
[02:12:39] <graingert> what do you do?
[02:12:51] <NoImNotNineVolt> i will pass it to requests.request
[02:12:57] <NoImNotNineVolt> in the timeout arg
[02:13:04] <graingert> right but what do you do when that times out
[02:13:14] <NoImNotNineVolt> retry the request.
[02:13:35] <NoImNotNineVolt> so, to clarify the scenario..
[02:13:39] <graingert> why not just wait forever?
[02:13:54] <NoImNotNineVolt> because i'm middleware, and i have 29 seconds to respond to the user.
[02:14:18] <NoImNotNineVolt> so in that 29 seconds, i want to maximize the number of retries i can make to the backend server which is sometimes-unresponsive.
[02:14:32] <graingert> just wait 29 seconds in your timeout
[02:14:34] *** Quits: elena (~elena@202-153-212-80.ca99d4.syd.static.aussiebb.net) (Quit: Client closed)
[02:14:44] <graingert> TCP will retry connections automaitcally
[02:14:48] *** Joins: Auron (Auron956@user/auron)
[02:14:51] <NoImNotNineVolt> graingert: how often?
[02:14:56] <graingert> it will keep sendings SYNs until it times out
[02:15:00] <NoImNotNineVolt> at what rate?
[02:15:19] <NoImNotNineVolt> i don't think that's accurate, or if it is, i don't think the failure mode i'm encountering is repsonsive in that way.
[02:15:40] <NoImNotNineVolt> because this server either responds quickly, or it doesn't respond at all, ever.
[02:15:49] <graingert> you can see $ sysctl net.ipv4.tcp_synack_retries
[02:15:56] <NoImNotNineVolt> so there's no advantage in setting a timeout longer than "quickly".
[02:16:10] <NoImNotNineVolt> graingert: this is aws lambda, and i don't have access to the underlying os.
[02:16:11] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[02:16:43] <graingert> NoImNotNineVolt: so what causes the server to not respond?
[02:16:46] <NoImNotNineVolt> graingert: regardless, my performance with a timeout set to 3 seconds is much better than my performance with a timeout set to 29 seconds.
[02:16:51] <graingert> it consumes a SYN and does nothing?
[02:17:08] *** Quits: waynew (~wayne@user/waynew) (Quit: adios)
[02:17:15] <NoImNotNineVolt> graingert: i don't have visibility into that. it's more a jira cluster than a server. maybe it's a load balancer forwarding me to a dead node. maybe it's something in jira. i don't know.
[02:17:24] <graingert> does it have multiple A and AAAA records for the same DNS name?
[02:17:31] <NoImNotNineVolt> possibly.
[02:17:56] *** Joins: Vonter (~Vonter@user/vonter)
[02:18:02] <graingert> NoImNotNineVolt: ah try httpx.AsyncClient instead of requests it will do happy-eyeballs to all IP addresses for a domain by default
[02:18:30] <NoImNotNineVolt> it's not feasible for me to implement a change of that scope throughout this codebase in the timeframe i have available to me.
[02:18:40] <graingert> it's one requests.get call?
[02:18:47] <NoImNotNineVolt> no.
[02:18:48] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 265 seconds)
[02:18:54] *** Quits: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com) (Read error: Connection reset by peer)
[02:19:18] <douglaswinship> Still on pylint: I'm getting a lot of Pylint errors that say "Module 'RPi.GPIO' has no 'foo' member". Those members definitely do exist when the code is executed, because the code works. But the warnings are annoying. I know i can disable this error for the whole file. but that's overkill. I can also disable it on every line where it happens, but that's a lot of work. Does anyone know if I can
[02:19:19] *** Joins: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com)
[02:19:24] <douglaswinship> disable the error for that one particular module, and only that module?
[02:19:31] *** Joins: drew` (~drew@user/drew)
[02:19:36] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[02:19:49] *** drew` is now known as drew
[02:20:01] *** Quits: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com) (Read error: Connection reset by peer)
[02:20:20] *** Joins: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com)
[02:20:23] <grym> modules are files
[02:20:29] <grym> so that doesn't sound like overkill to me
[02:20:33] <graingert> NoImNotNineVolt: pay for happy eyeballs in requests: https://github.com/urllib3/urllib3/issues/797
[02:20:42] *** Joins: Dotz0cat_ (~Dotz0cat@h90.13.31.71.dynamic.ip.windstream.net)
[02:20:54] *** Quits: Dotz0cat (~Dotz0cat@h179.13.31.71.dynamic.ip.windstream.net) (Ping timeout: 252 seconds)
[02:21:08] *** Joins: pnoud (~pnoud@user/pnoud)
[02:21:13] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 265 seconds)
[02:21:20] *** Dotz0cat_ is now known as Dotz0cat
[02:21:28] <NoImNotNineVolt> wait
[02:21:31] *** Roey is now known as Roey2
[02:21:34] <NoImNotNineVolt> isn't that just an ipv6 thing?
[02:21:35] *** Roey2 is now known as Roey
[02:21:50] <NoImNotNineVolt> sorry, this has nothing to do with ipv6.
[02:22:17] <NoImNotNineVolt> i'm pretty sure i only set up ipv4 in these vpcs.
[02:22:33] *** Quits: ntdll (~ntdll@user/ntdll) (Ping timeout: 258 seconds)
[02:23:57] <NoImNotNineVolt> ooh, found https://ops.tips/gists/measuring-http-response-times-curl/
[02:24:26] <NoImNotNineVolt> bash, but i'll take it
[02:24:34] *** Quits: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com) (Ping timeout: 252 seconds)
[02:24:55] <douglaswinship> grym: sorry, maybe I wasn't clear. i don't want to disable warnings inside the file that defines the RPi.GPIO module. I don't have access to that file. It's a 3rd party library. I'm importing it into a different file. I want to disable the warning inside the other file, but I only want to disable it with reference to the RPi.GPIO module.
[02:24:57] <NoImNotNineVolt> i guess i just need tcp connection setup times.
[02:25:20] <NoImNotNineVolt> because presumably that's what's relevant in the context of requests' connect timeout arg.
[02:25:34] <graingert> NoImNotNineVolt: happy-eyeballs isn't related to ipv6
[02:25:43] <graingert> ipv6 poses a problem that happy-eyeballs solves
[02:25:43] <jinsun> douglaswinship: is the module written in C? then you may want to add it to extension-pkg-allow-list and see if those warnings go away http://pylint.pycqa.org/en/latest/technical_reference/c_extensions.html
[02:25:46] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[02:25:52] *** Joins: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com)
[02:25:53] *** Quits: p-i-_ (~Ohmu@1.0.240.128) (Read error: Connection reset by peer)
[02:26:03] <douglaswinship> grym: ie I want to disable any warnings that say "RPi.GPIO has no member called 'x'". But I don't want to disable any warnings that say "FooClass has no member 'x'" or "BarClass has no member 'x'". That's what i mean by overkill.
[02:26:08] <graingert> ipv6 brings a world in which most domains have 2 IPs
[02:26:14] <douglaswinship> jinsun: i'll take a look, thanks.
[02:26:16] <graingert> wheras before most domains had 1 IP
[02:26:23] <NoImNotNineVolt> so if i'm not using ipv6, it's not clear that happy-eyeballs is going to solve any problems for me...
[02:26:32] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[02:26:34] <graingert> that's the opposite of what I just said
[02:26:39] *** Quits: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com) (Read error: Connection reset by peer)
[02:26:48] <NoImNotNineVolt> 21:55 < graingert> ipv6 poses a problem that happy-eyeballs solves
[02:26:59] *** Joins: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com)
[02:26:59] <NoImNotNineVolt> said another way, happy-eyeballs solves a problem posed by ipv6.
[02:27:02] <NoImNotNineVolt> yes?
[02:27:04] <graingert> right but you have a different problem that happy-eyeballs solves
[02:27:08] *** Joins: milosz (~milosz@user/milosz)
[02:27:13] <NoImNotNineVolt> hm.
[02:27:19] <graingert> you have a domain with multiple IPs some of which fail
[02:27:26] *** Joins: p-i- (~Ohmu@node-mzz.pool-118-173.dynamic.totinternet.net)
[02:27:27] <NoImNotNineVolt> possibly.
[02:27:32] <NoImNotNineVolt> i wouldn't presume that just yet.
[02:27:39] <NoImNotNineVolt> maybe the load balancing is behind a reverse proxy.
[02:27:39] <graingert> by default requests+tcp will pick a single IP address and retry that one
[02:27:48] <graingert> but you want to retry all IPs at once
[02:27:49] <NoImNotNineVolt> maybe i get the same dns resolution every time, but a possibly different backend.
[02:28:04] <graingert> what's the domain?
[02:28:25] <NoImNotNineVolt> does it matter? it's not accessible from the internet.
[02:28:33] *** Joins: jdmark2 (~jdmark@67.8.137.130)
[02:28:37] <habnabit_> many caching resolvers will scramble the order of the answers if there's >1 for a DNS query
[02:28:40] <graingert> does it have multiple A records?
[02:28:44] *** Quits: jdmark2 (~jdmark@67.8.137.130) (Remote host closed the connection)
[02:28:48] *** Quits: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com) (Read error: Connection reset by peer)
[02:29:05] *** Joins: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com)
[02:29:51] *** Quits: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com) (Read error: Connection reset by peer)
[02:29:55] <graingert> maybe you could connect to each ip manually and see which one is broken
[02:30:14] <NoImNotNineVolt> yup, 2 A records.
[02:30:17] *** Joins: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com)
[02:30:42] <NoImNotNineVolt> even if i did that, i'm not going to use some hardcoded backend ip here.
[02:30:52] *** Joins: patrao (patrao@217.129.166.94)
[02:30:54] *** Parts: patrao (patrao@217.129.166.94) ()
[02:30:58] *** Quits: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com) (Read error: Connection reset by peer)
[02:30:59] <NoImNotNineVolt> i have no assurances that the cluster composition won't change.
[02:31:16] *** Parts: tha (~user@2a05:f480:1400:f44:5400:3ff:fe6d:f349) ()
[02:31:22] *** Joins: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com)
[02:31:37] <habnabit_> NoImNotNineVolt, that was a suggestion for debugging, not permanent use
[02:31:38] <graingert> what I mean is you denylist the bad ip
[02:32:13] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 256 seconds)
[02:32:16] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 252 seconds)
[02:32:49] <graingert> in your code you could use a thread for each available IP
[02:33:00] <NoImNotNineVolt> i'm not trying to debug someone else's jira cluster, i just want our code to handle this case optimally :P
[02:33:16] <NoImNotNineVolt> and indeed, that threaded approach would probably be optimal
[02:33:30] <habnabit_> doesn't httpx have happy eyeballs
[02:33:35] <NoImNotNineVolt> but perhaps the cluster admins would hate me
[02:33:42] *** Joins: finsternis (~X@23.226.237.192)
[02:33:47] *** Joins: lemmoner (~lemmoner@static-119-144-229-77.ipcom.comunitel.net)
[02:33:48] <NoImNotNineVolt> because there's hammering, and then there's _hammering_ :P
[02:33:54] <graingert> habnabit_: httpx.Client uses urrlib3 that doesn't have it
[02:34:02] *** Joins: cliluw (~cliluw@ec2-34-215-251-72.us-west-2.compute.amazonaws.com)
[02:34:03] *** Quits: Mulugruntz (~Mulugrunt@2400:4152:2063:3100:c010:785d:cf73:42e0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:34:06] <habnabit_> even the async version?
[02:34:12] <graingert> habnabit_: httpx.AsyncClient uses whatever the backend does and asyncio and trio have happy eyeballs
[02:34:15] <NoImNotNineVolt> i mean, i don't see what's wrong with simply profiling the cluster as-is and determining an optimal connection timeout from there.
[02:34:19] *** Joins: nomic2 (~nomic@2a00:23c6:9910:1201:a874:b712:9670:8351)
[02:34:20] <habnabit_> well, there you go
[02:34:28] <NoImNotNineVolt> just set it to the 99th percentile and call it a day.
[02:34:43] <graingert> right but it's the picking of ip that effects the connect timeout
[02:34:50] <graingert> not the number of retries
[02:34:53] <graingert> I suspect
[02:35:11] <NoImNotNineVolt> you know, you're right.
[02:35:20] <NoImNotNineVolt> requests is just gonan use the same ip every time, isn't it.
[02:35:24] <NoImNotNineVolt> it'll be cached somewhere, i'm sure
[02:35:33] <graingert> I think each retry uses a random one
[02:35:37] *** Quits: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com) (Ping timeout: 256 seconds)
[02:35:39] <habnabit_> sounds like httpx's async client is the right option
[02:36:04] <NoImNotNineVolt> god but that's gonna be such a pain in the ass to swap in. i was hoping to just add some magic connect timeout and be done with it.
[02:36:07] <graingert> you could even run it in a blocking portal
[02:36:12] *** Quits: anas (~anas@196.224.51.199) (Ping timeout: 265 seconds)
[02:36:24] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[02:36:29] *** Joins: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com)
[02:36:34] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:a874:b712:9670:8351) (Ping timeout: 246 seconds)
[02:37:00] *** nomic2 is now known as nomic
[02:38:29] <graingert> with anyio.to_thread.start_blocking_portal() as portal, portal. wrap_async_context_manager(httpx.AsyncClient()) as client:
[02:38:29] <graingert>     portal.call(client.get, url)
[02:38:37] *** Quits: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com) (Read error: Connection reset by peer)
[02:38:48] <NoImNotNineVolt> i guess there's only 22 spots where we use requests. this isn't entirely intractible. but man, the rest of the team can barely use requests correctly. do i really want to do this to them? :P
[02:38:50] * hodapp realizes that msgpack exists
[02:39:02] *** Joins: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com)
[02:39:13] <graingert> check to see if httpx.AsyncClient performs better first
[02:39:27] <graingert> or check to see if one of the servers for your domain is broken
[02:39:45] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:6518:f773:33d3:fb7d)
[02:39:45] *** Quits: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com) (Read error: Connection reset by peer)
[02:39:48] <graingert> or maybe it will be fixed by monday
[02:39:55] *** Joins: lmmx (~louis@host-92-0-187-249.as13285.net)
[02:40:19] *** Joins: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com)
[02:40:33] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 265 seconds)
[02:40:34] *** Joins: jdmark (~jdmark@67.8.137.130)
[02:40:37] *** Quits: cliluw (~cliluw@ec2-34-215-251-72.us-west-2.compute.amazonaws.com) (Quit: Leaving)
[02:41:07] *** Quits: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com) (Read error: Connection reset by peer)
[02:41:19] <lmmx> any Windows Pythonistas in here tonight? I'm on Linux and wanting to check if you have a `lib-dynload` directory in your Python installation
[02:41:29] *** Joins: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com)
[02:41:35] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:42:24] <NoImNotNineVolt> yup, confirmed, requests actually does go through the various A records.
[02:42:25] *** Quits: Lando-SpacePimp (~LandoCal@user/lando-spacepimp) (Ping timeout: 256 seconds)
[02:42:38] <NoImNotNineVolt> so maybe i can just stick with requests.
[02:42:43] <acresearch> people, how can i convert an imported text file into bytes to send through a socket?
[02:42:45] <NoImNotNineVolt> and no, it won't be fixed until october.
[02:42:50] <NoImNotNineVolt> it's been broken since last year.
[02:42:55] <habnabit_> acresearch, encode it
[02:43:03] <NoImNotNineVolt> so i'm not holding my breath re: october either :P
[02:43:09] *** Quits: mikeliuk (~mikeliuk@213.205.198.125) (Quit: Connection closed)
[02:43:18] <NoImNotNineVolt> non-production environments are not a high priority.
[02:43:26] <NoImNotNineVolt> even if they're used for integration testing with clients.
[02:43:33] * NoImNotNineVolt grumbles
[02:44:48] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:45:48] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:45:56] *** Quits: justinf210 (~justinf21@31.sub-97-43-194.myvzw.com) (Ping timeout: 258 seconds)
[02:46:16] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:46:18] *** Joins: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com)
[02:46:52] <jinsun> lmmx: seems to be no dynload in my python folder
[02:48:21] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[02:49:01] <lmmx> jinsun: aha thanks thought there mightn't be, can you tell me what's under the `lib\python-3.*\` part ?
[02:49:07] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[02:49:07] *** Quits: jdmark (~jdmark@67.8.137.130) (*.net *.split)
[02:49:07] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:6518:f773:33d3:fb7d) (*.net *.split)
[02:49:08] *** Quits: regeya (~shane@50.45.24.247) (*.net *.split)
[02:49:08] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (*.net *.split)
[02:49:08] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (*.net *.split)
[02:49:08] *** Quits: lidless (~lidless@user/jabberwock) (*.net *.split)
[02:49:08] *** Quits: acresearch (~acresearc@user/acresearch) (*.net *.split)
[02:49:08] *** Quits: b2xiao (~b2xiao@wikipedia/nneonneo) (*.net *.split)
[02:49:08] *** Quits: Celeo (~Celeo@user/celeo) (*.net *.split)
[02:49:08] *** Quits: dibas (~dibas@user/dibas) (*.net *.split)
[02:49:08] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (*.net *.split)
[02:49:08] *** Quits: Samian (~textual@2620:10d:c091:480::1:8d08) (*.net *.split)
[02:49:08] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[02:49:08] *** Quits: r3m (~launch@user/r3m) (*.net *.split)
[02:49:08] *** Quits: GvP (~GvP@ip70-162-85-176.ph.ph.cox.net) (*.net *.split)
[02:49:08] *** Quits: ulu (~ulu@user/ulu) (*.net *.split)
[02:49:08] *** Quits: pycode (~pycode@2001:b07:5d28:551:55a8:758a:ed3c:7d94) (*.net *.split)
[02:49:08] *** Quits: CrunchyChewie (~CrunchyCh@user/crunchychewie) (*.net *.split)
[02:49:08] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (*.net *.split)
[02:49:08] *** Quits: currybullen (~curry@h-81-170-128-138.A258.priv.bahnhof.se) (*.net *.split)
[02:49:08] *** Quits: thiras (~thiras@user/thiras) (*.net *.split)
[02:49:08] *** Quits: Masklin (~joel@93.182.183.85) (*.net *.split)
[02:49:08] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (*.net *.split)
[02:49:08] *** Quits: riposte (~finalripo@2403-5800-3200-5c02--300.ip6.aussiebb.net) (*.net *.split)
[02:49:08] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (*.net *.split)
[02:49:08] *** Quits: tbcr (~tbcr@user/tbcr) (*.net *.split)
[02:49:08] *** Quits: mrkz_c (uid503554@user/mrkz-c/x-7247691) (*.net *.split)
[02:49:08] *** Quits: drew (~drew@user/drew) (*.net *.split)
[02:49:08] *** Quits: LuKaRo (~LuKaRo@p200300dfa71797375776d016cf464e3b.dip0.t-ipconnect.de) (*.net *.split)
[02:49:08] *** Quits: chwba (chwba@chwba.banana.ircnow.org) (*.net *.split)
[02:49:08] *** Quits: armin (~armin@unix.porn) (*.net *.split)
[02:49:08] *** Quits: graphitemaster (~graphitem@user/graphitemaster) (*.net *.split)
[02:49:08] *** Quits: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (*.net *.split)
[02:49:08] *** Quits: HenryG (~quassel@2607:5300:201:3000::f63) (*.net *.split)
[02:49:08] *** Quits: leonardo (~leonardo@user/leonardo) (*.net *.split)
[02:49:08] *** Quits: gildarts (16abab341f@user/gildarts) (*.net *.split)
[02:49:08] *** Quits: Leliana (is@the.one.and.only.revthefox.co.uk) (*.net *.split)
[02:49:08] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (*.net *.split)
[02:49:08] *** Quits: foureyes (foureyes@brought.to.you.by.bnc4free.com) (*.net *.split)
[02:49:08] *** Quits: altendky (sid135382@id-135382.stonehaven.irccloud.com) (*.net *.split)
[02:49:08] *** Quits: tris (emptystrin@irc1.lessbroken.org) (*.net *.split)
[02:49:08] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[02:49:08] *** Quits: visl (sid453966@user/visl) (*.net *.split)
[02:49:08] *** Quits: abn (sid376310@id-376310.tinside.irccloud.com) (*.net *.split)
[02:49:08] *** Quits: daniel2 (daniel@user/daniel2) (*.net *.split)
[02:49:08] *** Quits: PotatoGim_ (sid99505@id-99505.tooting.irccloud.com) (*.net *.split)
[02:49:08] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[02:49:08] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-19fa-19fb-303f-0075.res6.spectrum.com) (*.net *.split)
[02:49:08] *** Quits: ripdog_ (~quassel@user/ripdog) (*.net *.split)
[02:49:08] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (*.net *.split)
[02:49:08] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (*.net *.split)
[02:49:08] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (*.net *.split)
[02:49:08] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (*.net *.split)
[02:49:08] *** Quits: derelict (~derelict@user/derelict) (*.net *.split)
[02:49:08] *** Quits: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b) (*.net *.split)
[02:49:08] *** Quits: kafka (~kafka@user/kafka) (*.net *.split)
[02:49:08] *** Quits: zmt01 (~zmt00@user/zmt00) (*.net *.split)
[02:49:08] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (*.net *.split)
[02:49:08] *** Quits: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net) (*.net *.split)
[02:49:08] *** Quits: emerent (~quassel@p200300cd5703bb5dba27ebfffed28a59.dip0.t-ipconnect.de) (*.net *.split)
[02:49:08] *** Quits: bryce (~bryce@ool-457dd6ac.dyn.optonline.net) (*.net *.split)
[02:49:08] *** Quits: davidlowryduda (~davidlowr@2601:197:600:1210:c935:8535:4063:dde3) (*.net *.split)
[02:49:08] *** Quits: pete443_ (~pete@user/pete443) (*.net *.split)
[02:49:08] *** Quits: olasd (~olasd@softwareheritage/olasd) (*.net *.split)
[02:49:08] *** Quits: jasiek (~jps@kuweta.sanepid.org) (*.net *.split)
[02:49:08] *** Quits: zeus (~user@user/kamyl) (*.net *.split)
[02:49:08] *** Quits: yourfate (~yourfate@cabal.yourfate.org) (*.net *.split)
[02:49:08] *** Quits: jkl (~jkl@2600:1700:2420:6d10::3f1) (*.net *.split)
[02:49:08] *** Quits: candy (~tvrtko@93-136-28-15.adsl.net.t-com.hr) (*.net *.split)
[02:49:08] *** Quits: rgp (~rgp@user/rgp) (*.net *.split)
[02:49:08] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[02:49:09] *** Quits: coc0nut (~coc0nut@167.99.37.181) (*.net *.split)
[02:49:09] *** Quits: cman (~Cody@2603-9000-d104-8465-ed6d-438d-e6c7-ffef.inf6.spectrum.com) (*.net *.split)
[02:49:09] *** Quits: rigid (~rigid@user/rigid) (*.net *.split)
[02:49:09] *** Quits: transhumanist (~hiken@2601:196:8800:35f0:1d4e:e5ea:4e24:3511) (*.net *.split)
[02:49:09] *** Quits: rwb (~augh@theguntretort.com) (*.net *.split)
[02:49:09] *** Quits: Pr0phet (sid505706@id-505706.stonehaven.irccloud.com) (*.net *.split)
[02:49:09] *** Quits: camel_case (~iphone@user/iphone) (*.net *.split)
[02:49:09] *** Quits: Titore (Titore@user/titore) (*.net *.split)
[02:49:09] *** Quits: Liexei (Liexei@user/liexei) (*.net *.split)
[02:49:09] *** Quits: Fingel (fingel@user/fingel) (*.net *.split)
[02:49:09] *** Quits: flyback (~flyback@2601:540:8201:1e60:6450:faac:2f4c:fd30) (*.net *.split)
[02:49:09] *** Quits: argoneus (~argoneus@argoneus.com) (*.net *.split)
[02:49:09] *** Quits: pan (~quassel@pankid.club) (*.net *.split)
[02:49:09] *** Quits: trace (~trace@ip5b429953.dynamic.kabel-deutschland.de) (*.net *.split)
[02:49:09] *** Quits: RavuAlHemio (~ondra@selene.ondrahosek.com) (*.net *.split)
[02:49:09] *** Quits: ali1234 (~al@user/ali1234) (*.net *.split)
[02:49:09] *** Quits: ThiefMaster (thief@indico/developer/thiefmaster) (*.net *.split)
[02:49:09] *** Quits: Oddity (Oddity@user/oddity) (*.net *.split)
[02:49:09] *** Quits: susam (~susam@user/susam) (*.net *.split)
[02:49:09] *** Quits: gerard (~gerard@user/gerard) (*.net *.split)
[02:49:09] *** Quits: cation (cation@user/cation) (*.net *.split)
[02:49:09] *** Quits: Bato (~plauder@2001:bc8:182c:b39::1) (*.net *.split)
[02:49:09] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[02:49:09] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[02:49:09] *** Quits: int0x1C8 (~int0x1C8@user/int0x1c8) (*.net *.split)
[02:49:09] *** Quits: ham (~ham4@user/ham) (*.net *.split)
[02:49:09] *** Quits: penguino (~mrpenguin@user/mrpenguin) (*.net *.split)
[02:49:09] *** Quits: mickey (~user@user/mickey) (*.net *.split)
[02:49:09] *** Quits: spithash (~spithash@user/spithash) (*.net *.split)
[02:49:09] *** Quits: CombatVet (~c4@user/combatvet) (*.net *.split)
[02:49:09] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (*.net *.split)
[02:49:09] *** Quits: hendursaga (~weechat@user/hendursaga) (*.net *.split)
[02:49:09] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (*.net *.split)
[02:49:09] *** Quits: ano (~weechat@user/ano) (*.net *.split)
[02:49:09] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (*.net *.split)
[02:49:09] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (*.net *.split)
[02:49:09] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (*.net *.split)
[02:49:09] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (*.net *.split)
[02:49:09] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (*.net *.split)
[02:49:09] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (*.net *.split)
[02:49:09] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (*.net *.split)
[02:49:09] *** Quits: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr) (*.net *.split)
[02:49:09] *** Quits: milosz (~milosz@user/milosz) (*.net *.split)
[02:49:09] *** Quits: Dotz0cat (~Dotz0cat@h90.13.31.71.dynamic.ip.windstream.net) (*.net *.split)
[02:49:09] *** Quits: travaldo (~travaldo@159.203.88.148) (*.net *.split)
[02:49:09] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (*.net *.split)
[02:49:09] *** Quits: ponadm (pony@gateway/vpn/protonvpn/ponadm) (*.net *.split)
[02:49:09] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (*.net *.split)
[02:49:09] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (*.net *.split)
[02:49:09] *** Quits: jamea (~jamea77@10.189-202-213.bestelclientes.com.mx) (*.net *.split)
[02:49:09] *** Quits: akaWolf (~akaWolf@akawolf.org) (*.net *.split)
[02:49:09] *** Quits: zaquest (~notzaques@5.128.210.178) (*.net *.split)
[02:49:09] *** Quits: vicfred (~vicfred@user/vicfred) (*.net *.split)
[02:49:09] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[02:49:09] *** Quits: michaelis (~michaelis@193.183.209.17) (*.net *.split)
[02:49:09] *** Quits: IanWizard (~ianwizard@user/ianwizard) (*.net *.split)
[02:49:09] *** Quits: LogicAside (~LogicAsid@user/logicaside) (*.net *.split)
[02:49:09] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (*.net *.split)
[02:49:09] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (*.net *.split)
[02:49:09] *** Quits: etienneme (~etienne@176-149-215-214.abo.bbox.fr) (*.net *.split)
[02:49:09] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (*.net *.split)
[02:49:09] *** Quits: Scotteh (~Scotteh@user/scotteh) (*.net *.split)
[02:49:09] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[02:49:09] *** Quits: kungp (~kungp@h-46-59-2-200.a230.priv.bahnhof.se) (*.net *.split)
[02:49:09] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (*.net *.split)
[02:49:09] *** Quits: mxp (~mxp@82.98.30.69) (*.net *.split)
[02:49:09] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (*.net *.split)
[02:49:09] *** Quits: guardian (~guardian@planet-d.net) (*.net *.split)
[02:49:09] *** Quits: superboot (~agentgasm@user/superboot) (*.net *.split)
[02:49:09] *** Quits: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at) (*.net *.split)
[02:49:09] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (*.net *.split)
[02:49:09] *** Quits: ionface (~ionface@user/ionface) (*.net *.split)
[02:49:09] *** Quits: Elodin (~weechat@user/elodin) (*.net *.split)
[02:49:09] *** Quits: kevr (~kevr@user/kevr) (*.net *.split)
[02:49:09] *** Quits: zeden (~zeden@user/zeden) (*.net *.split)
[02:49:09] *** Quits: jmcantre2 (~weechat@user/jmcantrell) (*.net *.split)
[02:49:09] *** Quits: enkrypt (~enkrypt@user/enkrypt) (*.net *.split)
[02:49:09] *** Quits: Hackerpcs (~user@user/hackerpcs) (*.net *.split)
[02:49:09] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[02:49:09] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (*.net *.split)
[02:49:09] *** Quits: IceMichael (~IceMichae@dynamic-046-114-153-046.46.114.pool.telefonica.de) (*.net *.split)
[02:49:09] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[02:49:09] *** Quits: vlm (~vlm@user/vlm) (*.net *.split)
[02:49:09] *** Quits: Zer0xFF (michael@matrix.michaelsasser.org) (*.net *.split)
[02:49:09] *** Quits: GadgetNerd (~GadgetNer@user/gadgetnerd) (*.net *.split)
[02:49:09] *** Quits: normic (~normic@p4fc3009e.dip0.t-ipconnect.de) (*.net *.split)
[02:49:10] *** Quits: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com) (*.net *.split)
[02:49:10] *** Quits: spjb (~spjb@s0106f0f24985fe23.wp.shawcable.net) (*.net *.split)
[02:49:10] *** Quits: andrzejv (~andrzejv@78-56-77-187.static.zebra.lt) (*.net *.split)
[02:49:10] *** Quits: iflema (~ian@user/iflema) (*.net *.split)
[02:49:10] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (*.net *.split)
[02:49:10] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (*.net *.split)
[02:49:10] *** Quits: faceface (~faceface@user/faceface) (*.net *.split)
[02:49:10] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (*.net *.split)
[02:49:10] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (*.net *.split)
[02:49:10] *** Quits: pr3d4t0r (~zhenya01@user/pr3d4t0r) (*.net *.split)
[02:49:10] *** Quits: radu242 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (*.net *.split)
[02:49:10] *** Quits: c4017w (~c4017@209.52.68.8) (*.net *.split)
[02:49:10] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (*.net *.split)
[02:49:10] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (*.net *.split)
[02:49:10] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[02:49:10] *** Quits: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net) (*.net *.split)
[02:49:10] *** Quits: justK (~justache@user/justache) (*.net *.split)
[02:49:10] *** Quits: dmat (~noone@user/dmat) (*.net *.split)
[02:49:10] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (*.net *.split)
[02:49:10] *** Quits: Aramis (~aramis@cm-84.210.154.79.getinternet.no) (*.net *.split)
[02:49:10] *** Quits: {HD} (~{HD}@102.165.16.62) (*.net *.split)
[02:49:10] *** Quits: gutt (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net) (*.net *.split)
[02:49:10] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (*.net *.split)
[02:49:10] *** Quits: Wu (~wu@254.red-83-52-60.dynamicip.rima-tde.net) (*.net *.split)
[02:49:10] *** Quits: sgn (~sgn@user/sgn) (*.net *.split)
[02:49:10] *** Quits: ephemer0l (~ephemer0l@organizedmagnetism.com) (*.net *.split)
[02:49:10] *** Quits: MrFixIt (~samurai_@c-73-246-215-75.hsd1.il.comcast.net) (*.net *.split)
[02:49:10] *** Quits: nickodd (~nickodd@user/nickodd) (*.net *.split)
[02:49:10] *** Quits: loworderbit (~dave@s0106e81cba1736ea.ss.shawcable.net) (*.net *.split)
[02:49:10] *** Quits: driib (~driib@185.195.233.169) (*.net *.split)
[02:49:10] *** Quits: Celelibi (celelibi@user/celelibi) (*.net *.split)
[02:49:10] *** Quits: ttys000 (~ttys000@user/ttys000) (*.net *.split)
[02:49:10] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[02:49:10] *** Quits: baltazar (~baltazar@193-110-63-140.cable-modem.hdsnet.hu) (*.net *.split)
[02:49:10] *** Quits: yitz (~nick@exercism/yitz) (*.net *.split)
[02:49:10] *** Quits: blaisebool (~blaiseboo@static.247.123.46.78.clients.your-server.de) (*.net *.split)
[02:49:10] *** Quits: bdeferme (~bdeferme@i.ctrl86.com) (*.net *.split)
[02:49:10] *** Quits: odinsbane (~mbs@pat-pool-138.crick.ac.uk) (*.net *.split)
[02:49:10] *** Quits: zegalch (~zegalch@178.128.75.133) (*.net *.split)
[02:49:10] *** Quits: woky (~woky@li1651-31.members.linode.com) (*.net *.split)
[02:49:10] *** Quits: Retr0id (~Retr0id@user/retr0id) (*.net *.split)
[02:49:10] *** Quits: CrazyEddy (~CrazyEddy@overkill.epicsol.org) (*.net *.split)
[02:49:10] *** Quits: wilk (~wilk@user/wilk) (*.net *.split)
[02:49:10] *** Quits: achilleas (~ach@user/achilleas) (*.net *.split)
[02:49:10] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (*.net *.split)
[02:49:10] *** Quits: zyeri (~zyeri@tilde.team) (*.net *.split)
[02:49:10] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (*.net *.split)
[02:49:10] *** Quits: ksynwa (~ksynwa@v2202009129512127397.nicesrv.de) (*.net *.split)
[02:49:10] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[02:49:10] *** Quits: alguien (~alguien@user/alguien) (*.net *.split)
[02:49:10] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (*.net *.split)
[02:49:10] *** Quits: zebrag (~chris@user/zebrag) (*.net *.split)
[02:49:10] *** Quits: samuelbernardo (~samuelber@194.210.119.252) (*.net *.split)
[02:49:10] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (*.net *.split)
[02:49:10] *** Quits: clawh_ (~clawh@185.244.214.60) (*.net *.split)
[02:49:10] *** Quits: fofoni (~fofoni@user/fofoni) (*.net *.split)
[02:49:10] *** Quits: redgloboli (~redglobol@user/redgloboli) (*.net *.split)
[02:49:10] *** Quits: cdown (~cdown@163.114.131.1) (*.net *.split)
[02:49:10] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[02:49:10] *** Quits: hrtk (~hritik@223.226.188.53) (*.net *.split)
[02:49:10] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[02:49:10] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (*.net *.split)
[02:49:10] *** Quits: Vultyre (~vultyre@user/vultyre) (*.net *.split)
[02:49:10] *** Quits: ATAD (~ATAD@user/atad) (*.net *.split)
[02:49:10] *** Quits: bbear (~znc@21212.s.t4vps.eu) (*.net *.split)
[02:49:10] *** Quits: dece (~dece@dece.space) (*.net *.split)
[02:49:10] *** Quits: libussa (~libussa@libussa.net) (*.net *.split)
[02:49:10] *** Quits: notevil (~notevil@user/notevil) (*.net *.split)
[02:49:10] *** Quits: oisota (~oisota@user/oisota) (*.net *.split)
[02:49:10] *** Quits: Avaris (~Avaris@avar.is) (*.net *.split)
[02:49:10] *** Quits: kinabalu (~kinabalu@about/java/kinabalu) (*.net *.split)
[02:49:10] *** Quits: qlixed (~qlixed@181.44.129.13) (*.net *.split)
[02:49:10] *** Quits: entuland (~entuland@user/entuland) (*.net *.split)
[02:49:10] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (*.net *.split)
[02:49:10] *** Quits: nrg (~NRG@user/nrg) (*.net *.split)
[02:49:10] *** Quits: sbanwart (~sbanwart@cpe-174-100-90-239.neo.res.rr.com) (*.net *.split)
[02:49:10] *** Quits: DaNeenjah (~jake@adsl-74-230-9-207.hsv.bellsouth.net) (*.net *.split)
[02:49:10] *** Quits: sebastianos (~sebastian@user/sebastianos) (*.net *.split)
[02:49:10] *** Quits: tg (~tg@rockylinux/infra/tg) (*.net *.split)
[02:49:10] *** Quits: x_kuru (~xkuru@user/xkuru) (*.net *.split)
[02:49:10] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (*.net *.split)
[02:49:10] *** Quits: douglaswinship (~douglaswi@78.40.148.180) (*.net *.split)
[02:49:10] *** Quits: c10l (~c10l@89.34.167.207) (*.net *.split)
[02:49:10] *** Quits: Doffi (~doffi@91.132.197.188) (*.net *.split)
[02:49:10] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (*.net *.split)
[02:49:10] *** Quits: aquijoule__ (~richbridg@213-225-12-210.nat.highway.a1.net) (*.net *.split)
[02:49:10] *** Quits: snalty (~Shhh@user/snalty) (*.net *.split)
[02:49:10] *** Quits: kujo (~kujo@188.166.12.52) (*.net *.split)
[02:49:10] *** Quits: mesaboogie (mesaboogie@user/mesaboogie) (*.net *.split)
[02:49:10] *** Quits: Ogmios (~Ogmios@user/ogmios) (*.net *.split)
[02:49:10] *** Quits: neolem (~neolem@user/neolem) (*.net *.split)
[02:49:10] *** Quits: wintrmute (~wintrmute@bit.pappanaka.com) (*.net *.split)
[02:49:10] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (*.net *.split)
[02:49:10] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (*.net *.split)
[02:49:10] *** Quits: Gerula (~Gerula@user/gerula) (*.net *.split)
[02:49:10] *** Quits: KindOne (kindone@user/kindone) (*.net *.split)
[02:49:11] *** Quits: death916 (~death916@user/death916) (*.net *.split)
[02:49:11] *** Quits: trufas (~trufas@177.240.218.218) (*.net *.split)
[02:49:11] *** Quits: dulanic (~dulanic@47.187.147.69) (*.net *.split)
[02:49:11] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (*.net *.split)
[02:49:11] *** Quits: Bardon_ (~Bardon@user/Bardon) (*.net *.split)
[02:49:11] *** Quits: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (*.net *.split)
[02:49:11] *** Quits: arti (~arti@193.40.103.195) (*.net *.split)
[02:49:11] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (*.net *.split)
[02:49:11] *** Quits: mteo (francis@user/francis) (*.net *.split)
[02:49:11] *** Quits: Vision (~Vision@024-178-231-009.res.spectrum.com) (*.net *.split)
[02:49:11] *** Quits: BlessJah (~BlessJah@user/blessjah) (*.net *.split)
[02:49:11] *** Quits: francis (francis@user/francis) (*.net *.split)
[02:49:11] *** Quits: coldenbrewed (~nitrobrew@li1517-39.members.linode.com) (*.net *.split)
[02:49:11] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (*.net *.split)
[02:49:11] *** Quits: AM (~techman@87-94-110-215.bb.dnainternet.fi) (*.net *.split)
[02:49:11] *** Quits: dominique_michel (~Dominique@mob-194-230-158-179.cgn.sunrise.net) (*.net *.split)
[02:49:11] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[02:49:11] *** Quits: Freneticks (~Frenetick@gw.ptr-80-238-209-252.customer.ch.netstream.com) (*.net *.split)
[02:49:11] *** Quits: rookie101 (~rookie@207.154.204.166) (*.net *.split)
[02:49:11] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[02:49:11] *** Quits: sud (~sud@user/sud) (*.net *.split)
[02:49:11] *** Quits: dambuster (~dambuster@185.193.170.225) (*.net *.split)
[02:49:11] *** Quits: mpmc (~mpmc@user/mpmc) (*.net *.split)
[02:49:11] *** Quits: aleph (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[02:49:11] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (*.net *.split)
[02:49:11] *** Quits: RemiYuko (~licht@user/akechishiro) (*.net *.split)
[02:49:11] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[02:49:11] *** Quits: Mapley (~Maple@user/maple) (*.net *.split)
[02:49:11] *** Quits: jinsun (~quassel@user/jinsun) (*.net *.split)
[02:49:11] *** Quits: Makdaam (makdaam@user/makdaam) (*.net *.split)
[02:49:11] *** Quits: Trieste (T@user/pilgrim) (*.net *.split)
[02:49:11] *** Quits: jvalleroy (~quassel@user/jvalleroy) (*.net *.split)
[02:49:11] *** Quits: asix (~Anders@user/asix) (*.net *.split)
[02:49:11] *** Quits: Strom (strom@fedora/strom) (*.net *.split)
[02:49:11] *** Quits: quasineutral (~quaisneut@user/quasineutral) (*.net *.split)
[02:49:11] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-27.dsl.bell.ca) (*.net *.split)
[02:49:11] *** Quits: luna-is-here (~quassel@ip-95-223-58-221.hsi16.unitymediagroup.de) (*.net *.split)
[02:49:11] *** Quits: robinho (~robinho@user/robinho) (*.net *.split)
[02:49:11] *** Quits: c4017_ (~c4017@S010664777dab66f3.vf.shawcable.net) (*.net *.split)
[02:49:11] *** Quits: dreamer (~dreamer@user/dreamer) (*.net *.split)
[02:49:11] *** Quits: jabberwock (~jessy@user/jabberwock) (*.net *.split)
[02:49:11] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:a874:b712:9670:8351) (*.net *.split)
[02:49:11] *** Quits: p-i- (~Ohmu@node-mzz.pool-118-173.dynamic.totinternet.net) (*.net *.split)
[02:49:11] *** Quits: shabius (~shabius@2a0e:1c80:2:1021::1000) (*.net *.split)
[02:49:11] *** Quits: ultralisk (~ultralisk@2a00:23c6:4b0e:e900:75db:cb84:2f7c:da2) (*.net *.split)
[02:49:11] *** Quits: Emmm (~Emm@user/emmm) (*.net *.split)
[02:49:11] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (*.net *.split)
[02:49:11] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (*.net *.split)
[02:49:11] *** Quits: xrogaan (~xrogaan@user/xrogaan) (*.net *.split)
[02:49:11] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (*.net *.split)
[02:49:11] *** Quits: gbear605 (~gbear605@user/gbear605) (*.net *.split)
[02:49:11] *** Quits: explodes (~explodes@user/explodes) (*.net *.split)
[02:49:11] *** Quits: dstufft (~dstufft@shitbird.caremad.io) (*.net *.split)
[02:49:11] *** Quits: seds (sid492514@user/seds) (*.net *.split)
[02:49:11] *** Quits: the4oo4- (~the4oo4@shenzhou.whatbox.ca) (*.net *.split)
[02:49:11] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) (*.net *.split)
[02:49:11] *** Quits: cedric (~cedric@2a01:cb11:867:c200:d75f:fc18:dd28:1769) (*.net *.split)
[02:49:11] *** Quits: meain (~meain@2001:470:69fc:105::2db) (*.net *.split)
[02:49:11] *** Quits: TranquilEcho (~grom@user/tranquilecho) (*.net *.split)
[02:49:11] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[02:49:11] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (*.net *.split)
[02:49:11] *** Quits: IHasFinger (~JJ_@2a02:c7f:fc54:ba00:e1bc:35e8:cc1d:c226) (*.net *.split)
[02:49:11] *** Quits: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6) (*.net *.split)
[02:49:11] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[02:49:11] *** Quits: PJBoy (~PJBoy@user/pjboy) (*.net *.split)
[02:49:11] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (*.net *.split)
[02:49:11] *** Quits: ncb (~ncb@user/ncb) (*.net *.split)
[02:49:11] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:bbfc:1ba1:ffb3:62a) (*.net *.split)
[02:49:11] *** Quits: colorado (~fluiD@66.186.209.60) (*.net *.split)
[02:49:11] *** Quits: skapata (~Skapata@user/skapata) (*.net *.split)
[02:49:11] *** Quits: gcbirzan (~gcbirzan@user/gcbirzan) (*.net *.split)
[02:49:11] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:101:83e8:3086:926b) (*.net *.split)
[02:49:11] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (*.net *.split)
[02:49:11] *** Quits: zbr (~zbr@h.sbarnea.com) (*.net *.split)
[02:49:11] *** Quits: seednode (~seednode@user/seednode) (*.net *.split)
[02:49:11] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (*.net *.split)
[02:49:11] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (*.net *.split)
[02:49:11] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[02:49:11] *** Quits: ente_ (~ente@p54a445ae.dip0.t-ipconnect.de) (*.net *.split)
[02:49:11] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[02:49:12] *** Quits: kindablue (znc@irc.tpurist.com) (*.net *.split)
[02:49:12] *** Quits: marduk (~marduk@216.243.54.166) (*.net *.split)
[02:49:12] *** Quits: xsperry (~as@user/xsperry) (*.net *.split)
[02:49:12] *** Quits: Jormungandr89 (~brad@136.49.61.2) (*.net *.split)
[02:49:12] *** Quits: cinix (~cinix__@c-73-60-53-69.hsd1.nh.comcast.net) (*.net *.split)
[02:49:12] *** Quits: hexa- (~hexa-@juno.lossy.network) (*.net *.split)
[02:49:12] *** Quits: dalan (~dalan@118.102.85.89) (*.net *.split)
[02:49:12] *** Quits: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1) (*.net *.split)
[02:49:12] *** Quits: doko (~doko@2a02:8106:1a:7600:11f2:110c:e9cf:cc2c) (*.net *.split)
[02:49:12] *** Quits: Unode (~Unode@194.94.44.220) (*.net *.split)
[02:49:12] *** Quits: codl (~codl@user/codl) (*.net *.split)
[02:49:12] *** Quits: TheRAt (~TheRAt@user/therat) (*.net *.split)
[02:49:12] *** Quits: Armen (~Armen@armen138.com) (*.net *.split)
[02:49:12] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (*.net *.split)
[02:49:12] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (*.net *.split)
[02:49:12] *** Quits: arakimo (~arakimo@user/arakimo) (*.net *.split)
[02:49:12] *** Quits: JanC (~janc@user/janc) (*.net *.split)
[02:49:12] *** Quits: dcaro (~dcaro@user/dcaro) (*.net *.split)
[02:49:12] *** Quits: cruzr (~cruzr@2604:4300:a:16b::6) (*.net *.split)
[02:49:12] *** Quits: Joel (~jjshoe@user/joel) (*.net *.split)
[02:49:12] *** Quits: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com) (*.net *.split)
[02:49:12] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (*.net *.split)
[02:49:12] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (*.net *.split)
[02:49:12] *** Quits: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it) (*.net *.split)
[02:49:12] *** Quits: Jigsy (~Jigsy@user/jigsy) (*.net *.split)
[02:49:12] *** Quits: heco (~redrum@user/redrum88) (*.net *.split)
[02:49:12] *** Quits: sabet (~sabet@user/sabet) (*.net *.split)
[02:49:12] *** Quits: jug (~jug@user/jug) (*.net *.split)
[02:49:12] *** Quits: pie_bnc (~pie_bnc@user/pie/x-2818909) (*.net *.split)
[02:49:12] *** Quits: ouemt (~quassel@user/ouemt) (*.net *.split)
[02:49:12] *** Quits: Tashtari (~tashtari@user/tashtari) (*.net *.split)
[02:49:12] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[02:49:12] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[02:49:12] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (*.net *.split)
[02:49:12] *** Quits: sivoais (~zaki@199.19.225.239) (*.net *.split)
[02:49:12] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[02:49:12] *** Quits: dob1 (~dob1@user/dob1) (*.net *.split)
[02:49:12] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (*.net *.split)
[02:49:12] *** Quits: MrFantastik (~Thunderbi@98.1.50.67) (*.net *.split)
[02:49:12] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (*.net *.split)
[02:49:12] *** Quits: brownan (~brownan@136.56.137.143) (*.net *.split)
[02:49:12] *** Quits: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt) (*.net *.split)
[02:49:12] *** Quits: icy (~icy@user/icy) (*.net *.split)
[02:49:12] *** Quits: doc (~doc@user/doc) (*.net *.split)
[02:49:12] *** Quits: fbiagent (~fbiagent@user/fbiagent) (*.net *.split)
[02:49:12] *** Quits: filePeter (~filePeter@user/filepeter) (*.net *.split)
[02:49:12] *** Quits: zbe (~zbe@pleiades.zbe.bz) (*.net *.split)
[02:49:12] *** Quits: mdemo (~mdemo@c-73-40-53-74.hsd1.va.comcast.net) (*.net *.split)
[02:49:12] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[02:49:12] *** Quits: Quack (~Quack@185.21.216.169) (*.net *.split)
[02:49:12] *** Quits: phlixi (~phlixi@ppp-46-244-173-22.dynamic.mnet-online.de) (*.net *.split)
[02:49:12] *** Quits: asd (~noname@user/asd) (*.net *.split)
[02:49:12] *** Quits: Allegretto (~allegrett@fibhost-67-230-113.fibernet.hu) (*.net *.split)
[02:49:12] *** Quits: waxfire23 (~waxfire@65.119.2.240) (*.net *.split)
[02:49:12] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[02:49:12] *** Quits: resmo (~resmo@135-58-239-77.dyn.cable.fcom.ch) (*.net *.split)
[02:49:12] *** Quits: s8n (~s8n@user/s8n) (*.net *.split)
[02:49:12] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[02:49:12] *** Quits: m4v (~znc@ubuntu/member/m4v) (*.net *.split)
[02:49:12] *** Quits: odrling_ (~odrling@korone.aidoru.agency) (*.net *.split)
[02:49:12] *** Quits: TakinOver (~TakinOver@47.150.206.35) (*.net *.split)
[02:49:12] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[02:49:12] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (*.net *.split)
[02:49:12] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (*.net *.split)
[02:49:12] *** Quits: Lunatrius (~Lunatrius@77.38.22.128) (*.net *.split)
[02:49:12] *** Quits: km (~km@static.55.93.181.135.clients.your-server.de) (*.net *.split)
[02:49:12] *** Quits: djhankb (~djhankb@208.113.164.68) (*.net *.split)
[02:49:12] *** Quits: Batzy (~Batzy@user/batzy) (*.net *.split)
[02:49:12] *** Quits: civillian (~nick@124-171-97-43.dyn.iinet.net.au) (*.net *.split)
[02:49:12] *** Quits: adium (adium@user/adium) (*.net *.split)
[02:49:12] *** Quits: wgwz (~wgwz@45.55.193.150) (*.net *.split)
[02:49:12] *** Quits: kouhai (~kouhai@user/kouhai) (*.net *.split)
[02:49:12] *** Quits: chha (~chhs@wikipedia/Bjelleklang) (*.net *.split)
[02:49:12] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (*.net *.split)
[02:49:12] *** Quits: botfather (~botfather@botd.io) (*.net *.split)
[02:49:12] *** Quits: Xat` (~Xat`@ns300217.ip-91-121-29.eu) (*.net *.split)
[02:49:12] *** Quits: umimaso (~umimaso@188.166.147.131) (*.net *.split)
[02:49:12] *** Quits: philipp64|work (~philipp64@174.27.8.12) (*.net *.split)
[02:49:12] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (*.net *.split)
[02:49:12] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[02:49:12] *** Quits: Henry151 (~bishop@user/henry151) (*.net *.split)
[02:49:12] *** Quits: Sadale (~Sadale@user/sadale) (*.net *.split)
[02:49:12] *** Quits: JerryXiao (~JerryXiao@user/jerryxiao) (*.net *.split)
[02:49:12] *** Quits: the_rat (~ratto@emily.sorcio.org) (*.net *.split)
[02:49:12] *** Quits: fengshaun (~fengshaun@68.69.214.210) (*.net *.split)
[02:49:12] *** Quits: xormor (pamipetter@clairlair.xyz) (*.net *.split)
[02:49:12] *** Quits: thib (~thib@wikimedia/Thibaut120094) (*.net *.split)
[02:49:12] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[02:49:12] *** Quits: bidouille (~user_name@trois.potager.org) (*.net *.split)
[02:49:12] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[02:49:12] *** Quits: zigo (~quassel@shade.infomaniak.ch) (*.net *.split)
[02:49:12] *** Quits: eagleflo (~aku@eagleflow.fi) (*.net *.split)
[02:49:12] *** Quits: arza (arza@arza.us) (*.net *.split)
[02:49:13] *** Quits: pizdets (~pizdets@183.182.114.175) (*.net *.split)
[02:49:13] *** Quits: Tempesta (Tempesta@user/tempesta) (*.net *.split)
[02:49:13] *** Quits: sharksauce (sharksauce@user/sharksauce) (*.net *.split)
[02:49:13] *** Quits: ackyshake (~ackyshake@user/ackyshake) (*.net *.split)
[02:49:13] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (*.net *.split)
[02:49:13] *** Quits: trench (trench@user/trench) (*.net *.split)
[02:49:13] *** Quits: jayteeach (~jared@2601:8b:4400:9cf3::14f3) (*.net *.split)
[02:49:13] *** Quits: ST47 (~ST47@user/st47) (*.net *.split)
[02:49:13] *** Quits: TechSmurf (~tech@user/techsmurf) (*.net *.split)
[02:49:13] *** Quits: alexyov (~alexyov@79.124.0.2) (*.net *.split)
[02:49:13] *** Quits: Namigator (~nami@user/namigator) (*.net *.split)
[02:49:13] *** Quits: Teknique (~kirk@user/teknique) (*.net *.split)
[02:49:13] *** Quits: Keij0 (~Keij0@user/keij0) (*.net *.split)
[02:49:13] *** Quits: jrjsmrtn (~jrjsmrtn@ip-193-121-123-176.dsl.scarlet.be) (*.net *.split)
[02:49:13] *** Quits: az_ (~az0@user/az0) (*.net *.split)
[02:49:13] *** Quits: vodkra (~vodkra@user/vodkra) (*.net *.split)
[02:49:13] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[02:49:13] *** Quits: synic (~squish@li74-118.members.linode.com) (*.net *.split)
[02:49:13] *** Quits: leosilva (~leosilva@canonical/leosilva) (*.net *.split)
[02:49:13] *** Quits: wm (~wmy@2a01:4f8:1c1c:7918::1) (*.net *.split)
[02:49:13] *** Quits: MoiraPrime (sid504449@id-504449.tooting.irccloud.com) (*.net *.split)
[02:49:13] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (*.net *.split)
[02:49:13] *** Quits: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27) (*.net *.split)
[02:49:13] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:101a:c784:11b0:c2b7) (*.net *.split)
[02:49:13] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[02:49:13] *** Quits: steam (~steam@user/steam) (*.net *.split)
[02:49:13] *** Quits: rodstewart (~dmartins@188.ip-149-56-97.net) (*.net *.split)
[02:49:13] *** Quits: xikkub (me@user/xikkub) (*.net *.split)
[02:49:13] *** Quits: Forkk (forkk@2600:3c00::f03c:91ff:fe84:de4d) (*.net *.split)
[02:49:13] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[02:49:13] *** Quits: redkrieg (~redkrieg@user/redkrieg) (*.net *.split)
[02:49:13] *** Quits: masterkorp (~masterkor@user/masterkorp) (*.net *.split)
[02:49:13] *** Quits: sv (sid496265@user/sv) (*.net *.split)
[02:49:13] *** Quits: SrPx (sid108780@id-108780.highgate.irccloud.com) (*.net *.split)
[02:49:13] *** Quits: mandeep (uid394387@id-394387.tooting.irccloud.com) (*.net *.split)
[02:49:13] *** Quits: nvz (~user@nvz.farted.online) (*.net *.split)
[02:49:13] *** Quits: jsdallas (~jsdallas@ec2-52-26-176-9.us-west-2.compute.amazonaws.com) (*.net *.split)
[02:49:13] *** Quits: rexbinary (~rexbinary@user/rexbinary) (*.net *.split)
[02:49:13] *** Quits: mdk (~mdk@python/psf/mdk) (*.net *.split)
[02:49:13] *** Quits: koltrast (cf6babc4@h77-53-57-114.cust.a3fiber.se) (*.net *.split)
[02:49:13] *** Quits: dxrt (~dxrt@user/dxrt) (*.net *.split)
[02:49:13] *** Quits: lmmx (~louis@host-92-0-187-249.as13285.net) (*.net *.split)
[02:49:13] *** Quits: lemmoner (~lemmoner@static-119-144-229-77.ipcom.comunitel.net) (*.net *.split)
[02:49:13] *** Quits: Auron (Auron956@user/auron) (*.net *.split)
[02:49:13] *** Quits: SuperLag (~akulbe@user/superlag) (*.net *.split)
[02:49:13] *** Quits: OPK (~OPK@user/opk) (*.net *.split)
[02:49:13] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[02:49:13] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (*.net *.split)
[02:49:13] *** Quits: Madda (~Madda@208.249.9.51.dyn.plus.net) (*.net *.split)
[02:49:13] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (*.net *.split)
[02:49:13] *** Quits: ray (~ray@user/re) (*.net *.split)
[02:49:13] *** Quits: Pickchea (~private@user/pickchea) (*.net *.split)
[02:49:13] *** Quits: jstein (~jstein@gentoo/developer/jstein) (*.net *.split)
[02:49:13] *** Quits: Betal (~Beta@user/betal) (*.net *.split)
[02:49:13] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (*.net *.split)
[02:49:13] *** Quits: FluffyMask (~FluffyMas@user/fluffymask) (*.net *.split)
[02:49:13] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (*.net *.split)
[02:49:13] *** Quits: mkellis (~Calibellu@68.235.43.86) (*.net *.split)
[02:49:13] *** Quits: Alan (~alan@user/alan) (*.net *.split)
[02:49:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (*.net *.split)
[02:49:13] *** Quits: Ninja3047 (~Ninja3047@3047.ninja) (*.net *.split)
[02:49:13] *** Quits: zerok (~zerok@user/zerok) (*.net *.split)
[02:49:13] *** Quits: zoid (~zoid@user/taxationistheft) (*.net *.split)
[02:49:13] *** Quits: synbiose (~synbiose@user/synbiose) (*.net *.split)
[02:49:13] *** Quits: treefrob (~robx@p57a969ef.dip0.t-ipconnect.de) (*.net *.split)
[02:49:13] *** Quits: y2o (~y2o@pc-128-133-45-190.cm.vtr.net) (*.net *.split)
[02:49:13] *** Quits: {4144} (~{4144}@46.56.70.183) (*.net *.split)
[02:49:13] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (*.net *.split)
[02:49:13] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (*.net *.split)
[02:49:13] *** Quits: KeiraT (~unknown@lulzsec.co.uk) (*.net *.split)
[02:49:13] *** Quits: moto (~moto@user/moto) (*.net *.split)
[02:49:13] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (*.net *.split)
[02:49:13] *** Quits: patchie (~sdf@63.79-160-77.customer.lyse.net) (*.net *.split)
[02:49:13] *** Quits: NeoCore (~neocore@138.199.47.155) (*.net *.split)
[02:49:13] *** Quits: Leonarbro (~Leonet@user/leonarbro) (*.net *.split)
[02:49:14] *** Quits: mossman93 (~quassel@user/mossman93) (*.net *.split)
[02:49:14] *** Quits: gline (~yashi@p508bebbc.dip0.t-ipconnect.de) (*.net *.split)
[02:49:14] *** Quits: deviantfero (~deviantfe@190.150.27.58) (*.net *.split)
[02:49:14] *** Quits: Haxxa (~Haxxa@122.199.47.41) (*.net *.split)
[02:49:14] *** Quits: guntbert (~yesitsme@user/guntbert) (*.net *.split)
[02:49:14] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[02:49:14] *** Quits: dude-x (~textual@pool-100-1-141-108.nwrknj.fios.verizon.net) (*.net *.split)
[02:49:14] *** Quits: Alexer (~alexer@alexer.net) (*.net *.split)
[02:49:14] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[02:49:14] *** Quits: Brocker (~NoBody@user/brocker) (*.net *.split)
[02:49:14] *** Quits: outsider (~sierkov@c89-176.i07-23.onvol.net) (*.net *.split)
[02:49:14] *** Quits: Abrax (~Abrax@user/abrax) (*.net *.split)
[02:49:14] *** Quits: chandankumar (~chandanku@51.159.58.174) (*.net *.split)
[02:49:14] *** Quits: alxndr (~alexander@ybti.net) (*.net *.split)
[02:49:14] *** Quits: tkazi (~tkazi@user/tkazi) (*.net *.split)
[02:49:14] *** Quits: KevinX (~KevinX@94.140.11.108) (*.net *.split)
[02:49:14] *** Quits: lacrymology (~lacrymolo@static-243-15-25-46.ipcom.comunitel.net) (*.net *.split)
[02:49:14] *** Quits: jinie (~jimmy@188.114.173.37) (*.net *.split)
[02:49:14] *** Quits: ccldarjun (~arjun@c-67-160-245-135.hsd1.ca.comcast.net) (*.net *.split)
[02:49:14] *** Quits: d1b (~db@user/d1b) (*.net *.split)
[02:49:14] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (*.net *.split)
[02:49:14] *** Quits: koziad (~koziad@74.102.176.11) (*.net *.split)
[02:49:14] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[02:49:14] *** Quits: lastmikoi (~lastmikoi@vm-01.lastmikoi.net) (*.net *.split)
[02:49:14] *** Quits: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net) (*.net *.split)
[02:49:14] *** Quits: Catatonic (~Catatonic@ariel.whatbox.ca) (*.net *.split)
[02:49:14] *** Quits: rjwiii (~mr-rich@072-187-028-004.res.spectrum.com) (*.net *.split)
[02:49:14] *** Quits: mixfix41 (~homefame@user/mixfix41) (*.net *.split)
[02:49:14] *** Quits: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net) (*.net *.split)
[02:49:14] *** Quits: Khoyo (~khoyo@user/khoyo) (*.net *.split)
[02:49:14] *** Quits: pioto (~pioto@user/pioto) (*.net *.split)
[02:49:14] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (*.net *.split)
[02:49:14] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (*.net *.split)
[02:49:14] *** Quits: meti (~meti@user/meti) (*.net *.split)
[02:49:14] *** Quits: vbgunz_ (~vbgunz@35.141.71.47) (*.net *.split)
[02:49:14] *** Quits: janemba (~janemba@185.107.80.152) (*.net *.split)
[02:49:14] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[02:49:14] *** Quits: ops (~ops@user/echelon) (*.net *.split)
[02:49:14] *** Quits: roolebo (sid64806@charlton.irccloud.com) (*.net *.split)
[02:49:14] *** Quits: voldial (~user@user/voldial) (*.net *.split)
[02:49:14] *** Quits: kline (~freedom0@libera/staff/kline) (*.net *.split)
[02:49:14] *** Quits: samhain (~samhain@user/samhain) (*.net *.split)
[02:49:14] *** Quits: kmh (~kmh@p200300df5f145f003cbf9841c92aa596.dip0.t-ipconnect.de) (*.net *.split)
[02:49:14] *** Quits: bss (bss@rie.incorporeal.org) (*.net *.split)
[02:49:14] *** Quits: korros (korros@2600:3c03::f03c:92ff:febf:689a) (*.net *.split)
[02:49:14] *** Quits: cmagina (uid286142@user/cmagina) (*.net *.split)
[02:49:14] *** Quits: faxlore (sid505520@id-505520.highgate.irccloud.com) (*.net *.split)
[02:49:14] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[02:49:14] *** Quits: shrub (sid500598@user/psb) (*.net *.split)
[02:49:14] *** Quits: tf (~tf@user/tf) (*.net *.split)
[02:49:14] *** Quits: The-Compiler (~compiler@2001:41d0:2:3b6f:fcb3:9651:355f:f3ad) (*.net *.split)
[02:49:14] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (*.net *.split)
[02:49:14] *** Quits: tk (~tk@ircpuzzles/staff/tk) (*.net *.split)
[02:49:14] *** Quits: ChrisWarrick (kwpolska@user/kwpolska) (*.net *.split)
[02:49:14] *** Quits: noteness (noteness@user/noteness) (*.net *.split)
[02:49:14] *** Quits: canton7 (canton7@about/csharp/canton7) (*.net *.split)
[02:49:14] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[02:49:14] *** Quits: enteral (~enteral@discovery.whatbox.ca) (*.net *.split)
[02:49:14] *** Quits: gtback (uid505041@id-505041.tinside.irccloud.com) (*.net *.split)
[02:49:14] *** Quits: darxun (sid504814@id-504814.tinside.irccloud.com) (*.net *.split)
[02:49:14] *** Quits: somlis (~somlis@user/somlis) (*.net *.split)
[02:49:14] *** Quits: Jmtrix (~qed@user/jmtrix) (*.net *.split)
[02:49:14] *** Quits: et (~et@user/et) (*.net *.split)
[02:49:14] *** Quits: saschi (~saschi@user/saschi) (*.net *.split)
[02:49:14] *** Quits: dragonmaster (rotering@user/dragonmaster) (*.net *.split)
[02:49:14] *** Quits: nbin (~nbin@user/nbin) (*.net *.split)
[02:49:15] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (*.net *.split)
[02:49:15] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[02:49:15] *** Quits: Zal (~Isthmus@user/isveni) (*.net *.split)
[02:49:15] *** Quits: robyndrake (robyndrake@user/robyndrake) (*.net *.split)
[02:49:15] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (*.net *.split)
[02:49:15] *** Quits: syllin (~syllin@user/syllin) (*.net *.split)
[02:49:15] *** Quits: spicyrice (~ubuntu@2600:1f11:52a:4400:ccbc:2b96:cabe:414b) (*.net *.split)
[02:49:15] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (*.net *.split)
[02:49:15] *** Quits: thm (~thomas@fedora/thm) (*.net *.split)
[02:49:15] *** Quits: kmikita (uid461814@id-461814.brockwell.irccloud.com) (*.net *.split)
[02:49:15] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[02:49:15] *** Quits: ferros (~ferros@vps-eacaba1b.vps.ovh.net) (*.net *.split)
[02:49:15] *** Quits: stoneware (~stoneware@user/stoneware) (*.net *.split)
[02:49:15] *** Quits: Tritium (~tritium@toxin.sdamon.com) (*.net *.split)
[02:49:15] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (*.net *.split)
[02:49:15] *** Quits: bluss (~bluss@user/bluss) (*.net *.split)
[02:49:15] *** Quits: kenoba (~kenoba@ip68-0-248-40.ri.ri.cox.net) (*.net *.split)
[02:49:15] *** Quits: _0ne (~one@user/0ne/x-2101768) (*.net *.split)
[02:49:15] *** Quits: offbyone (sid910@id-910.brockwell.irccloud.com) (*.net *.split)
[02:49:15] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[02:49:15] *** Quits: Lvl4Sword (sid483043@user/lvl4sword) (*.net *.split)
[02:49:15] *** Quits: Ninpo (~Ninpo@charlton.qap.la) (*.net *.split)
[02:49:15] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (*.net *.split)
[02:49:15] *** Quits: dukwon (~dukwon@physics.horse) (*.net *.split)
[02:49:15] *** Quits: Antibody (~Antibody@107.170.145.30) (*.net *.split)
[02:49:15] *** Quits: shrysr (~shrysr@2600:3c04::f03c:91ff:fece:e233) (*.net *.split)
[02:49:15] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (*.net *.split)
[02:49:15] *** Quits: nuala (~nuala@user/nuala) (*.net *.split)
[02:49:15] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (*.net *.split)
[02:49:15] *** Quits: t2mkn (~t2mkn@user/t2mkn) (*.net *.split)
[02:49:15] *** Quits: Ulti (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com) (*.net *.split)
[02:49:15] *** Quits: lxdr (~lxdr@user/lxdr) (*.net *.split)
[02:49:15] *** Quits: zware (~zach@python/psf/zware) (*.net *.split)
[02:49:15] *** Quits: galen (~gaken@user/galen) (*.net *.split)
[02:49:15] *** Quits: Superstars111 (~jared@li227-215.members.linode.com) (*.net *.split)
[02:49:15] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[02:49:15] *** Quits: dvu (~danielvu@168.235.66.22) (*.net *.split)
[02:49:15] *** Quits: schumaml (~schumaml@dslb-178-002-190-100.178.002.pools.vodafone-ip.de) (*.net *.split)
[02:49:15] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[02:49:15] *** Quits: habnabit_ (habnabit@python/site-packages/habnabit) (*.net *.split)
[02:49:15] *** Quits: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com) (*.net *.split)
[02:49:15] *** Quits: N3X15 (~nexis@mail.nexisonline.net) (*.net *.split)
[02:49:15] *** Quits: KernelPanic (~KernelPan@user/kernelpanic) (*.net *.split)
[02:49:15] *** Quits: val (~val@limnoria/val) (*.net *.split)
[02:49:15] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (*.net *.split)
[02:49:15] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[02:49:15] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[02:49:15] *** Quits: syrius (syrius@titan.stormtek.net) (*.net *.split)
[02:49:15] *** Quits: Geronimo (~Geronimo@user/geronimo) (*.net *.split)
[02:49:15] *** Quits: fuz (~fuz@user/fuz) (*.net *.split)
[02:49:15] *** Quits: f8e4_ (~user@159.89.21.45) (*.net *.split)
[02:49:15] *** Quits: m0nkey_ (~quassel@user/m0nkey/x-3352227) (*.net *.split)
[02:49:15] *** Quits: DaPinkOne (~Dap@user/dap) (*.net *.split)
[02:49:15] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (*.net *.split)
[02:49:15] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[02:49:15] *** Quits: cpach (~cpach@h-158-174-172-12.A950.priv.bahnhof.se) (*.net *.split)
[02:49:15] *** Quits: librenaut (~librenaut@user/librenaut) (*.net *.split)
[02:49:15] *** Quits: andrewSC (~andrewSC@95.179.141.168) (*.net *.split)
[02:49:15] *** Quits: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com) (*.net *.split)
[02:49:15] *** Quits: dagb (~dagb@241.92-220-211.customer.lyse.net) (*.net *.split)
[02:49:15] *** Quits: sale (~sale@ypocit.initech.link) (*.net *.split)
[02:49:15] *** Quits: Duckle (~Duckle@user/duckle) (*.net *.split)
[02:49:15] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[02:49:15] *** Quits: purplex (~purplex@user/purplex) (*.net *.split)
[02:49:15] *** Quits: MJ94 (mj94@user/mj94) (*.net *.split)
[02:49:15] *** Quits: Lartza (lartza@user/lartza) (*.net *.split)
[02:49:15] *** Quits: rud0lf (rud0lf@user/rud0lf) (*.net *.split)
[02:49:15] *** Quits: tumbleweed (~stefanor@ubuntu/member/tumbleweed) (*.net *.split)
[02:49:15] *** Quits: MikachuPi (~Mikachu@2001:bc8:47a8:559::1) (*.net *.split)
[02:49:15] *** Quits: ndim (~hun@moooo.n-dimensional.de) (*.net *.split)
[02:49:15] *** Quits: _janus (~janus@blotter.ld-linux.so) (*.net *.split)
[02:49:15] *** Quits: bwe (~bwe@2a01:4f8:1c1c:4878::2) (*.net *.split)
[02:49:15] *** Quits: amosbird (~amosbird@13.75.119.182) (*.net *.split)
[02:49:15] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[02:49:15] *** Quits: ormiret (sid314108@id-314108.tooting.irccloud.com) (*.net *.split)
[02:49:15] *** Quits: tazle (tazle@kapsi.fi) (*.net *.split)
[02:49:16] *** Quits: mcint (mcint@user/mcint) (*.net *.split)
[02:49:16] *** Quits: gbristol (gbristol@hermes.gbristol.net) (*.net *.split)
[02:49:16] *** Quits: starz (starz@ns378512.ip-37-59-36.eu) (*.net *.split)
[02:49:16] *** Quits: dartmouthed (~blackunsp@li761-35.members.linode.com) (*.net *.split)
[02:49:16] *** Quits: hodapp (~mawson@user/hodapp) (*.net *.split)
[02:49:16] *** Quits: eichin (sid27120@id-27120.tinside.irccloud.com) (*.net *.split)
[02:49:16] *** Quits: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153) (*.net *.split)
[02:49:16] *** Quits: meatballs (~owentanti@2001:470:69fc:105::633) (*.net *.split)
[02:49:16] *** Quits: BEC001AF[m] (~kreatemor@2001:470:69fc:105::a0f) (*.net *.split)
[02:49:16] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (*.net *.split)
[02:49:16] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (*.net *.split)
[02:49:16] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (*.net *.split)
[02:49:16] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (*.net *.split)
[02:49:16] *** Quits: bgardner (~bgardner@2001:470:69fc:105::8a8) (*.net *.split)
[02:49:16] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (*.net *.split)
[02:49:16] *** Quits: psydroid (~psydroidm@user/psydroid) (*.net *.split)
[02:49:16] *** Quits: oz4ga (~tim@93.90.4.233) (*.net *.split)
[02:49:16] *** Quits: AB49K (~AB49K@user/ab49k) (*.net *.split)
[02:49:16] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[02:49:16] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[02:49:16] *** Quits: DarkaMaul (~dm@2001:bc8:24f6:400::42) (*.net *.split)
[02:49:16] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[02:49:16] *** Quits: Tiago_Paolini (sid172748@id-172748.stonehaven.irccloud.com) (*.net *.split)
[02:49:16] *** Quits: lumgwada (~lumgwada@101.181.126.104) (*.net *.split)
[02:49:16] *** Quits: gossie (~gossie@2a10:3781:328:1:e1d:50cc:c868:ca94) (*.net *.split)
[02:49:16] *** Quits: zamba (~marius@5.226.162.54) (*.net *.split)
[02:49:16] *** Quits: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au) (*.net *.split)
[02:49:16] *** Quits: blackop (~ocloud@user/blackop) (*.net *.split)
[02:49:16] *** Quits: pacbard_ (~pacbard@user/pacbard) (*.net *.split)
[02:49:16] *** Quits: vapour (vapour@eris.noname-ev.de) (*.net *.split)
[02:49:16] *** Quits: Mathisen (mathisen@about/windows/staff/mathisen) (*.net *.split)
[02:49:16] *** Quits: meridion (~meridion@punt.hetgrotebos.org) (*.net *.split)
[02:49:16] *** Quits: yolo (~xxiao@159.89.184.51) (*.net *.split)
[02:49:16] *** Quits: petemc (~pete@vps-80fad31a.vps.ovh.net) (*.net *.split)
[02:49:16] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[02:49:16] *** Quits: foo (~foo@user/foo/x-8763512) (*.net *.split)
[02:49:16] *** Quits: ulif_ (~nick@user/ulif) (*.net *.split)
[02:49:16] *** Quits: fredrikh1 (~fhl@myrsnipa.uio.no) (*.net *.split)
[02:49:16] *** Quits: stevenix (~stevenix@mab.sdf.org) (*.net *.split)
[02:49:16] *** Quits: tudor_ (~tudor@tomka.hu) (*.net *.split)
[02:49:16] *** Quits: jpaa_ (~jpaa@87.118.126.66) (*.net *.split)
[02:49:16] *** Quits: kstar (~kstar@user/kstar) (*.net *.split)
[02:49:16] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[02:49:16] *** Quits: dodo (~dodo@user/dodo) (*.net *.split)
[02:49:16] *** Quits: fxrs_ (~fxrs@192.227.212.130) (*.net *.split)
[02:49:16] *** Quits: NoImNotNineVolt (~ninevolt@c-73-248-207-98.hsd1.nj.comcast.net) (*.net *.split)
[02:49:16] *** Quits: dftrace (~dftrace@hopper.lethalbit.com) (*.net *.split)
[02:49:16] *** Quits: Quietus (quasselcor@larch.ratcliffefamily.uk) (*.net *.split)
[02:49:16] *** Quits: flay (~flay@user/flay) (*.net *.split)
[02:49:16] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (*.net *.split)
[02:49:16] *** Quits: greyblue9 (uid500829@id-500829.charlton.irccloud.com) (*.net *.split)
[02:49:16] *** Quits: ario_ (~ario@159.65.220.102) (*.net *.split)
[02:49:16] *** Quits: introom (introom@2600:3c01::f03c:92ff:fe95:9f0f) (*.net *.split)
[02:49:16] *** Quits: syntaxman (~wade@li227-215.members.linode.com) (*.net *.split)
[02:49:16] *** Quits: MrC (Ben@mrbenc.net) (*.net *.split)
[02:49:16] *** Quits: bertiger (~bertiger@user/bertiger) (*.net *.split)
[02:49:16] *** Quits: mboehn (mathias@hh1.nuxis.org) (*.net *.split)
[02:49:16] *** Quits: cole (~cole@user/cole) (*.net *.split)
[02:49:16] *** Quits: Xaroth (~Xaroth@022-139-128-083.dynamic.caiway.nl) (*.net *.split)
[02:49:17] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[02:49:17] *** Quits: pjlsergeant (sid143467@id-143467.stonehaven.irccloud.com) (*.net *.split)
[02:49:17] *** Quits: Roey (~Roey@user/Roey) (*.net *.split)
[02:49:17] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (*.net *.split)
[02:49:17] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (*.net *.split)
[02:49:17] *** Quits: n-st (~n-st@user/n-st) (*.net *.split)
[02:49:17] *** Quits: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75) (*.net *.split)
[02:49:17] *** Quits: acid (~acid@user/acid) (*.net *.split)
[02:49:17] *** Quits: eliasy[m] (~eliasymat@2001:470:69fc:105::3ff3) (*.net *.split)
[02:49:17] *** Quits: thunfisch (~thunfisch@user/thunfisch) (*.net *.split)
[02:49:17] *** Quits: mwilson (mwilson@2600:3c01::f03c:92ff:fe7f:1149) (*.net *.split)
[02:49:17] *** Quits: Affliction (~Afflictio@user/affliction) (*.net *.split)
[02:49:17] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[02:49:17] *** Quits: Thermoriax (Thermoriax@user/thermoriax) (*.net *.split)
[02:49:17] *** Quits: skylite (~skylite@2E6B2CD6.catv.pool.telekom.hu) (*.net *.split)
[02:49:17] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[02:49:17] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (*.net *.split)
[02:49:17] *** Quits: onu (~onufn@gibbs.uberspace.de) (*.net *.split)
[02:49:17] *** Quits: hexeme (~hexeme@user/hexeme) (*.net *.split)
[02:49:17] *** Quits: jrabbit (~jack@user/jrabbit) (*.net *.split)
[02:49:17] *** Quits: _moep_ (~moep@user/moep/x-3358975) (*.net *.split)
[02:49:17] *** Quits: Wegge (~wegge@user/wegge) (*.net *.split)
[02:49:17] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[02:49:17] *** Quits: shailangsa (~shailangs@host86-145-14-23.range86-145.btcentralplus.com) (*.net *.split)
[02:49:17] *** Quits: tvm (~tom@ip-89-103-250-229.net.upcbroadband.cz) (*.net *.split)
[02:49:17] *** Quits: erica (~erica@user/erica) (*.net *.split)
[02:49:17] *** Quits: julia (~quassel@user/julia) (*.net *.split)
[02:49:17] *** Quits: cyberpear (uid364019@fedora/cyberpear) (*.net *.split)
[02:49:17] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (*.net *.split)
[02:49:17] *** Quits: drjp (jeanpaul@112-54-174-82.ftth.glasoperator.nl) (*.net *.split)
[02:49:17] *** Quits: Tips|Cloud (sid62231@id-62231.charlton.irccloud.com) (*.net *.split)
[02:49:17] *** Quits: gizmo_ (~gizmo@45.91.125.2) (*.net *.split)
[02:49:17] *** Quits: yupyup (sid228030@id-228030.brockwell.irccloud.com) (*.net *.split)
[02:49:17] *** Quits: DXR (~lyrical@46.246.236.246.dsl.dyn.forthnet.gr) (*.net *.split)
[02:49:17] *** Quits: maxking (~maxking@user/maxking) (*.net *.split)
[02:49:17] *** Quits: u4t (~chat@78.ip-139-99-236.net) (*.net *.split)
[02:49:17] *** Quits: byzandula (~byzandula@beerbq.net) (*.net *.split)
[02:49:17] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[02:49:17] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[02:49:17] *** Quits: jor (~jor@jor.link) (*.net *.split)
[02:49:17] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (*.net *.split)
[02:49:17] *** Quits: kgz (~kragniz@nyaa.kragniz.eu) (*.net *.split)
[02:49:17] *** Quits: jootoi (~jootoi@130.61.158.197) (*.net *.split)
[02:49:17] *** Quits: salparadise (~salparadi@129.146.17.140) (*.net *.split)
[02:49:17] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[02:49:17] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[02:49:17] *** Quits: chilversc (~chilversc@user/chilversc) (*.net *.split)
[02:49:17] *** Quits: acegallagher (~Ace@71-211-253-134.hlrn.qwest.net) (*.net *.split)
[02:49:17] *** Quits: FunkyBob (~curtis@vhost3.tinbrain.net) (*.net *.split)
[02:49:17] *** Quits: nigelb_ (~nigel@zeus.nigelb.me) (*.net *.split)
[02:49:17] *** Quits: Kingsy (~chris@kingsy.co.uk) (*.net *.split)
[02:49:17] *** Quits: Pitr (~pj@p3.ictree.nl) (*.net *.split)
[02:49:17] *** Quits: RoyK (~roy@user/royk) (*.net *.split)
[02:49:17] *** Quits: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net) (*.net *.split)
[02:49:17] *** Quits: tunixman (~tunixman@45.32.228.130) (*.net *.split)
[02:49:17] *** Quits: simone (~nya@user/sx) (*.net *.split)
[02:49:17] *** Quits: roniez (~roniez@nixsec.se) (*.net *.split)
[02:49:17] *** Quits: xnbq (~xnbq@user/xnbq) (*.net *.split)
[02:49:17] *** Quits: celphi (sid97751@id-97751.brockwell.irccloud.com) (*.net *.split)
[02:49:17] *** Quits: Notgnoshi (~nots@2001-48F8-8-40-2EF0-5DFF-FE04-24F7-dynamic.midco.net) (*.net *.split)
[02:49:17] *** Quits: itok (sid418430@id-418430.charlton.irccloud.com) (*.net *.split)
[02:49:17] *** Quits: cohn (~noone@user/cohn) (*.net *.split)
[02:49:17] *** Quits: fsg (fsg@2600:3c00::f03c:92ff:fec6:da18) (*.net *.split)
[02:49:17] *** Quits: CygniX (~CygniX@2605:6400:30:fdc6:68:f4:4e:78) (*.net *.split)
[02:49:17] *** Quits: kst (~user@cpe-70-95-182-43.san.res.rr.com) (*.net *.split)
[02:49:17] *** Quits: supbo (~kenan@li227-215.members.linode.com) (*.net *.split)
[02:49:17] *** Quits: Socra (~Socra@206.217.216.27) (*.net *.split)
[02:49:17] *** Quits: abyss (~robbins@user/robbins) (*.net *.split)
[02:49:17] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (*.net *.split)
[02:49:17] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[02:49:17] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (*.net *.split)
[02:49:17] *** Quits: BlueShark (sid10311@user/blueshark) (*.net *.split)
[02:49:17] *** Quits: mustache_ride (sid451683@user/mustache-ride/x-6533344) (*.net *.split)
[02:49:17] *** Quits: matthewwilkes (sid500242@id-500242.highgate.irccloud.com) (*.net *.split)
[02:49:17] *** Quits: etch (~etch@user/etch) (*.net *.split)
[02:49:17] *** Quits: cyberjunkie (~cyberjunk@wireguard/tunneler/cyberjunkie) (*.net *.split)
[02:49:18] *** Quits: mgedmin (~mg@user/mgedmin) (*.net *.split)
[02:49:18] *** Quits: Psi-Jack (~psi-jack@user/psi-jack) (*.net *.split)
[02:49:18] *** Quits: Wooble (~Wooble@107.170.27.240) (*.net *.split)
[02:49:18] *** Quits: jbe (~hellother@lysator/root/jbe) (*.net *.split)
[02:49:18] *** Quits: ammar2 (admin@i.diddled.with.the.opers.so.they.klined.me) (*.net *.split)
[02:49:18] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (*.net *.split)
[02:49:18] *** Quits: jelmer (~jelmer@user/jelmer) (*.net *.split)
[02:49:18] *** Quits: enrico (~enrico@gandi.enricozini.org) (*.net *.split)
[02:49:18] *** Quits: sirn (~sirn@user/sirn) (*.net *.split)
[02:49:18] *** Quits: Fridtjof (~fridel@thonk.9net.org) (*.net *.split)
[02:49:18] *** Quits: wereii (~wereii@37.205.14.89) (*.net *.split)
[02:49:18] *** Quits: sus (thelounge@user/zeromomentum) (*.net *.split)
[02:49:18] *** Quits: ebb (ebb@user/ebb) (*.net *.split)
[02:49:18] *** Quits: ThomasJ (~ThomasJ@user/thomasj) (*.net *.split)
[02:49:18] *** Quits: A_Dragon (A_D@doom-tower.awesome-dragon.science) (*.net *.split)
[02:49:18] *** Quits: michagogo (sid14316@user/michagogo) (*.net *.split)
[02:49:18] *** Quits: Mogget (Mogget@vogon.moshwire.com) (*.net *.split)
[02:49:18] *** Quits: rubin55 (sid175221@id-175221.stonehaven.irccloud.com) (*.net *.split)
[02:49:18] *** Quits: sybariten (~jake@78-47-86-21.cinfuserver.com) (*.net *.split)
[02:49:18] *** Quits: kieto (~kieto@user/kieto) (*.net *.split)
[02:49:18] *** Quits: tuxd00d (sid401305@id-401305.charlton.irccloud.com) (*.net *.split)
[02:49:18] *** Quits: DocMors (~DocMors@web.crypticity.net) (*.net *.split)
[02:49:18] *** Quits: nocko (sid501219@user/nocko) (*.net *.split)
[02:49:18] *** Quits: ixjlyons (kenny@2600:3c01::f03c:91ff:fe80:22c6) (*.net *.split)
[02:49:18] *** Quits: fructose (~fructose@user/fructose) (*.net *.split)
[02:49:18] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[02:49:18] *** Quits: mattmcc (~matt@li807-33.members.linode.com) (*.net *.split)
[02:49:18] *** Quits: MacGyver (~macgyver@user/macgyver) (*.net *.split)
[02:49:18] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (*.net *.split)
[02:49:18] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (*.net *.split)
[02:49:18] *** Quits: randall (~randall@user/randall) (*.net *.split)
[02:49:18] *** Quits: paperManu (~paperManu@138.197.128.151) (*.net *.split)
[02:49:18] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[02:49:18] *** Quits: xaltsc (~xaltsc@user/xaltsc) (*.net *.split)
[02:49:18] *** Quits: jim (~jim@about/linux/staff/jim) (*.net *.split)
[02:49:18] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (*.net *.split)
[02:49:18] *** Quits: jiffy (elijah@has.a.fluffy.sh33p.org) (*.net *.split)
[02:49:18] *** Quits: Evolver (sid32215@user/evolver) (*.net *.split)
[02:49:18] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (*.net *.split)
[02:49:18] *** Quits: Jochem (jochem@oosterveen.net) (*.net *.split)
[02:49:18] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[02:49:18] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (*.net *.split)
[02:49:18] *** Quits: andi_ (~andi@user/andi/x-3467420) (*.net *.split)
[02:49:18] *** Quits: Falcon| (andreas@user/falcon/x-0540249) (*.net *.split)
[02:49:18] *** Quits: jposer (sid132110@id-132110.highgate.irccloud.com) (*.net *.split)
[02:49:18] *** Quits: dTal (quassel@dragonbox/wizzard/dtal) (*.net *.split)
[02:49:18] *** Quits: thinkofher (uid503725@user/thinkofher) (*.net *.split)
[02:49:18] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (*.net *.split)
[02:49:18] *** Quits: Xavierdarkness (~xavierdar@user/xavierdarkness) (*.net *.split)
[02:49:18] *** Quits: jamesmartinez (~keinbock@37.44.247.165) (*.net *.split)
[02:49:18] *** Quits: gabe (~gabe@user/gabe) (*.net *.split)
[02:49:18] *** Quits: mikebald_ (~mikebald@159.203.185.106) (*.net *.split)
[02:49:18] *** Quits: Ox4 (~int@0x4.cx) (*.net *.split)
[02:49:18] *** Quits: Linkandzelda (~Linkandze@cloudirc.laz.li) (*.net *.split)
[02:49:18] *** Quits: llua (~llua@zsh/developer/llua) (*.net *.split)
[02:49:18] *** Quits: yemel (~yemel@user/yemel) (*.net *.split)
[02:49:18] *** Quits: rsheftel5 (~rsheftel@pool-108-53-162-225.nwrknj.fios.verizon.net) (*.net *.split)
[02:49:18] *** Quits: michele (~eraser@user/michele) (*.net *.split)
[02:49:18] *** Quits: pyfisch (thelounge@user/pyfisch) (*.net *.split)
[02:49:18] *** Quits: Helenah (~helenah@user/helenah) (*.net *.split)
[02:49:18] *** Quits: rud01f (rud0lf@user/rud0lf) (*.net *.split)
[02:49:18] *** Quits: Yhg1s (sid387777@python/psf/thomas) (*.net *.split)
[02:49:18] *** Quits: circuitbone (sid355934@user/circuitbone) (*.net *.split)
[02:49:18] *** Quits: EWDurbin (sid38710@id-38710.tinside.irccloud.com) (*.net *.split)
[02:49:18] *** Quits: gjm (sid142836@apache/committer/gjm) (*.net *.split)
[02:49:18] *** Quits: CrtxReavr (crtxreavr@shodan.trioptimum.com) (*.net *.split)
[02:49:18] *** Quits: bjb (~bjb@sourcerer.ca) (*.net *.split)
[02:49:18] *** Quits: abadger1999 (sid348818@ansible/owner/abadger1999) (*.net *.split)
[02:49:18] *** Quits: hedy (hedy@tilde.team/user/hedy) (*.net *.split)
[02:49:18] *** Quits: acnebs (~acnebs@2604:a880:400:d0::1a64:c001) (*.net *.split)
[02:49:18] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[02:49:18] *** Quits: dale (dale@user/dale) (*.net *.split)
[02:49:19] *** Quits: jesster1234 (~jessica@static.172.234.251.148.clients.your-server.de) (*.net *.split)
[02:49:19] *** Quits: hwrd (sid64402@id-64402.tooting.irccloud.com) (*.net *.split)
[02:49:19] *** Quits: WayToDoor (~WayToDoor@user/waytodoor) (*.net *.split)
[02:49:19] *** Quits: Knyght (sid365271@id-365271.brockwell.irccloud.com) (*.net *.split)
[02:49:19] *** Quits: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com) (*.net *.split)
[02:49:19] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[02:49:19] *** Quits: Xeago (~Xeago@user/xeago) (*.net *.split)
[02:49:19] *** Quits: ironfroggy (sid495156@id-495156.tooting.irccloud.com) (*.net *.split)
[02:49:19] *** Quits: urth (~urth@geertswei.nl) (*.net *.split)
[02:49:19] *** Quits: Soni (~quassel@autistic.space) (*.net *.split)
[02:49:19] *** Quits: lericson (~toxik@user/lericson) (*.net *.split)
[02:49:19] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[02:49:19] *** Quits: r0bby (r0bby@user/r0bby) (*.net *.split)
[02:49:19] *** Quits: tnez (~el@user/tnez) (*.net *.split)
[02:49:19] *** Quits: bboles (~bboles@64.94.212.195) (*.net *.split)
[02:49:19] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (*.net *.split)
[02:49:19] *** Quits: dthpulse (~quassel@podciarou.sk) (*.net *.split)
[02:49:19] *** Quits: marienz (~marienz@libera/staff/marienz) (*.net *.split)
[02:49:19] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (*.net *.split)
[02:49:19] *** Quits: Fossil (~Fossil@95.85.23.165) (*.net *.split)
[02:49:19] *** Quits: decartes (uid240036@id-240036.brockwell.irccloud.com) (*.net *.split)
[02:49:19] *** Quits: Jimmy2027 (~hendrik@2001:1620:2018:38:dde3:1b0f:dc57:eb0f) (*.net *.split)
[02:49:19] *** Quits: Mindi (~Mindi@mindinet.org) (*.net *.split)
[02:49:19] *** Quits: chrisawi (~chrisw@user/chrisawi) (*.net *.split)
[02:49:19] *** Quits: lgrn (~leif@user/lgrn) (*.net *.split)
[02:49:19] *** Quits: theo (~theo@user/theo) (*.net *.split)
[02:49:19] *** Quits: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) (*.net *.split)
[02:49:19] *** Quits: koopman (sid466269@id-466269.charlton.irccloud.com) (*.net *.split)
[02:49:19] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[02:49:19] *** Quits: learath (~learath@static-71-246-219-35.washdc.fios.verizon.net) (*.net *.split)
[02:49:19] *** Quits: Ennea (~Ennea@user/ennea) (*.net *.split)
[02:49:19] *** Quits: Biganon (~biganon@mx.pive.ch) (*.net *.split)
[02:49:19] *** Quits: auri (~admin@static.46.108.40.188.clients.your-server.de) (*.net *.split)
[02:49:19] *** Quits: kiwiroy (sid374179@id-374179.tooting.irccloud.com) (*.net *.split)
[02:49:19] *** Quits: tobias1 (sid15532@django/member/tobias1) (*.net *.split)
[02:49:19] *** Quits: TallonRain (sid214799@user/tallonrain) (*.net *.split)
[02:49:19] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (*.net *.split)
[02:49:19] *** Quits: SallyAhaj (~sallyahaj@user/sallyahaj) (*.net *.split)
[02:49:19] *** Quits: agronholm (sid403424@id-403424.brockwell.irccloud.com) (*.net *.split)
[02:49:19] *** Quits: baloona (~baloona@mail.baloona.de) (*.net *.split)
[02:49:19] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[02:49:19] *** Quits: wlsn (~wlsn@79-75-247-141.dynamic.dsl.as9105.com) (*.net *.split)
[02:49:19] *** Quits: fabs (~fabs@samba.ethz.ch) (*.net *.split)
[02:49:19] *** Quits: shan (shan@user/shan) (*.net *.split)
[02:49:19] *** Quits: nawcom (~nawcom@bulldadachat.com) (*.net *.split)
[02:49:19] *** Quits: davve (davve@bsd.douchedata.com) (*.net *.split)
[02:49:19] *** Quits: Koffa (jkohvakk@user/koffa) (*.net *.split)
[02:49:19] *** Quits: crazysim (sid86009@id-86009.stonehaven.irccloud.com) (*.net *.split)
[02:49:19] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[02:49:19] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[02:49:19] *** Quits: nicxz (~nicxz@user/nicxz) (*.net *.split)
[02:49:19] *** Quits: LordKalma (~LordKalma@2a01:4f9:c010:78d8::1) (*.net *.split)
[02:49:19] *** Quits: johnny_ (sid481967@id-481967.stonehaven.irccloud.com) (*.net *.split)
[02:49:19] *** Quits: catdog (~quassel@2001:470:50f7:cdcd::cd1) (*.net *.split)
[02:49:19] *** Quits: corwin (someone@fosshost/director/corwin) (*.net *.split)
[02:49:19] *** Quits: greyltc (~greyltc@user/greyltc) (*.net *.split)
[02:49:19] *** Quits: jocke-l (jocke-l@a.x0.is) (*.net *.split)
[02:49:19] *** Quits: hays (rootvegeta@fsf/member/hays) (*.net *.split)
[02:49:19] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (*.net *.split)
[02:49:19] *** Quits: edr (~edr@user/edr) (*.net *.split)
[02:49:19] *** Quits: pavelow (~pavelow@opticalchimp.com) (*.net *.split)
[02:49:19] *** Quits: Reinhilde (~Ellenor@vice-chairwoman.of.freenode.management) (*.net *.split)
[02:49:19] *** Quits: dfch (~dfch@user/dfch) (*.net *.split)
[02:49:19] *** Quits: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2) (*.net *.split)
[02:49:19] *** Quits: rockSTONE (sid315855@id-315855.brockwell.irccloud.com) (*.net *.split)
[02:49:19] *** Quits: avu (~jan@user/avu) (*.net *.split)
[02:49:19] *** Quits: jjhoo (jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi) (*.net *.split)
[02:49:19] *** Quits: tecdroid (~tecdroid@2a04:d480:0:1::3) (*.net *.split)
[02:49:19] *** Quits: themill (~stuart@debian/stuart) (*.net *.split)
[02:49:19] *** Quits: extmind (~lars@quasar.extmind.de) (*.net *.split)
[02:49:19] *** Quits: beanzilla (beanzilla@user/beanzilla) (*.net *.split)
[02:49:19] *** Quits: Dan39 (~dan@user/dan39) (*.net *.split)
[02:49:19] *** Quits: Helle (~helle@80-100-16-232.ip.xs4all.nl) (*.net *.split)
[02:49:19] *** Quits: ludo (ludo@user/ludo) (*.net *.split)
[02:49:19] *** Quits: tailHead69 (~daruncio@2a04:52c0:101:314::5c48) (*.net *.split)
[02:49:20] *** Quits: mkoskar (~mkoskar@user/mkoskar) (*.net *.split)
[02:49:20] *** Quits: Chex (~Chex@user/chex) (*.net *.split)
[02:49:20] *** Quits: mmercer_ (daemoen@2605:d100:0:2d:5054:ff:fef0:3953) (*.net *.split)
[02:49:20] *** Quits: Repiphany (~Repiphany@user/repiphany) (*.net *.split)
[02:49:20] *** Quits: vlt (~dm@157.230.21.14) (*.net *.split)
[02:49:20] *** Quits: confluence (~quassel@2a01:4f8:c17:3ca::2) (*.net *.split)
[02:49:20] *** Quits: dynos01 (~dynos01@2600:3c01:e000:36a::8400) (*.net *.split)
[02:49:20] *** Quits: function1 (~shawoop@199.115.117.198) (*.net *.split)
[02:49:20] *** Quits: k0fein (~esmeralda@user/k0fein) (*.net *.split)
[02:49:20] *** Quits: crs (~f@user/crs) (*.net *.split)
[02:49:20] *** Quits: tpr (~tpr@user/tpr) (*.net *.split)
[02:49:20] *** Quits: dfg (~dfg@user/dfg) (*.net *.split)
[02:49:20] *** Quits: debnet (sid330295@python/afpy/debnet) (*.net *.split)
[02:49:20] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[02:49:20] *** Quits: nicksloan (sid195124@user/nicksloan) (*.net *.split)
[02:49:20] *** Quits: uhu (~uhu@static.101.168.216.95.clients.your-server.de) (*.net *.split)
[02:49:20] *** Quits: mindlesstux (sid18072@id-18072.tooting.irccloud.com) (*.net *.split)
[02:49:20] *** Quits: phx (~phoemix@marvin.harmless.hu) (*.net *.split)
[02:49:20] *** Quits: nomn (nomn@user/nomn) (*.net *.split)
[02:49:20] *** Quits: bronsen (~bronsen@2a04:d480:0:1::3) (*.net *.split)
[02:49:20] *** Quits: mumixam (~m@user/mumixam) (*.net *.split)
[02:49:20] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (*.net *.split)
[02:49:20] *** Quits: WizardGed (~WizardGed@user/wizardged) (*.net *.split)
[02:49:20] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[02:49:20] *** Quits: catbeard (~noise@user/catbeard) (*.net *.split)
[02:49:20] *** Quits: nem (sid113421@user/nem) (*.net *.split)
[02:49:20] *** Quits: user3456 (user3456@user/user3456) (*.net *.split)
[02:49:20] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (*.net *.split)
[02:49:20] *** Quits: Maikel (~Maikel@130.61.63.136) (*.net *.split)
[02:49:20] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (*.net *.split)
[02:49:20] *** Quits: bookworm (~bookworm@neomutt/bookworm) (*.net *.split)
[02:49:20] *** Quits: orbatos[m] (~orbatos@2001:470:69fc:105::3450) (*.net *.split)
[02:49:20] *** Quits: aluria (~aluria@canonical/aluria) (*.net *.split)
[02:49:20] *** Quits: jyc (uid40911@id-40911.charlton.irccloud.com) (*.net *.split)
[02:49:20] *** Quits: DeeJay2 (~deejay2@199-114-234-216.pool.interplex.ca) (*.net *.split)
[02:49:20] *** Quits: lystra (~lystra@d53-64-11-169.nap.wideopenwest.com) (*.net *.split)
[02:49:20] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (*.net *.split)
[02:49:20] *** Quits: kofuyu (~kofuyu@user/kofuyu) (*.net *.split)
[02:49:20] *** Quits: encukou (~quassel@nat-pool-brq-t.redhat.com) (*.net *.split)
[02:49:20] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (*.net *.split)
[02:49:20] *** Quits: ruru4143 (~quassel@vmi444754.contaboserver.net) (*.net *.split)
[02:49:20] *** Quits: Ranhir (~Ranhir@157.97.53.139) (*.net *.split)
[02:49:20] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[02:49:20] *** Quits: sanshiki (~falx@user/falx) (*.net *.split)
[02:49:20] *** Quits: defn (~n0b0dy@user/defn) (*.net *.split)
[02:49:20] *** Quits: WeblordPepe (~pepe@104.248.83.14) (*.net *.split)
[02:49:20] *** Quits: infobob (~infobob@python/bot/infobob) (*.net *.split)
[02:49:20] *** Quits: richrd (~wavi@thelounge/maintainer/wavi) (*.net *.split)
[02:49:20] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (*.net *.split)
[02:49:20] *** Quits: tone0 (~tone@071-011-252-111.res.spectrum.com) (*.net *.split)
[02:49:20] *** Quits: Tykling (~tykling@irc.tyknet.dk) (*.net *.split)
[02:49:20] *** Quits: eck0 (~eck0@047-007-119-133.res.spectrum.com) (*.net *.split)
[02:49:20] *** Quits: Nei (~ailin@user/nemui) (*.net *.split)
[02:49:20] *** Quits: InPhase (~InPhase@openscad/inphase) (*.net *.split)
[02:49:20] *** Quits: bsdbandit (~bwell@users.757.org) (*.net *.split)
[02:49:20] *** Quits: Peng (~mnordhoff@fin.mattnordhoff.net) (*.net *.split)
[02:49:20] *** Quits: nanonyme1 (nanonyme@kapsi.fi) (*.net *.split)
[02:49:20] *** Quits: eldritch__ (~eldritch@134.209.221.71) (*.net *.split)
[02:49:20] *** Quits: rapha (~jrs@user/rapha) (*.net *.split)
[02:49:20] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (*.net *.split)
[02:49:20] *** Quits: m42e (~m42e@pb42.de) (*.net *.split)
[02:49:20] *** Quits: osxtra (~root@136.49.108.80) (*.net *.split)
[02:49:20] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (*.net *.split)
[02:49:20] *** Quits: adamchainz (~adamj@51.15.34.126) (*.net *.split)
[02:49:20] *** Quits: bv (~bv@user/bv) (*.net *.split)
[02:49:20] *** Quits: d3x (michal@bielaw.ski) (*.net *.split)
[02:49:20] *** Quits: mrus (~mrus@149.28.61.155) (*.net *.split)
[02:49:20] *** Quits: gdarko (~me@dg.mk) (*.net *.split)
[02:49:20] *** Quits: edenist (~edenist@rdns.robotprofessor.net) (*.net *.split)
[02:49:20] *** Quits: llinguini (sid257922@id-257922.stonehaven.irccloud.com) (*.net *.split)
[02:49:20] *** Quits: Pny (pny1312@user/pny) (*.net *.split)
[02:49:21] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (*.net *.split)
[02:49:21] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (*.net *.split)
[02:49:21] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (*.net *.split)
[02:49:21] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[02:49:21] *** Quits: remedan (~remedan@balak.me) (*.net *.split)
[02:49:21] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (*.net *.split)
[02:49:21] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[02:49:21] *** Quits: webmind (~webmind@user/webmind) (*.net *.split)
[02:49:21] *** Quits: Daemoen (~Daemoen@2604:a880:2:d0::2164:d001) (*.net *.split)
[02:49:21] *** Quits: murr4y (ali@user/murr4y) (*.net *.split)
[02:49:21] *** Quits: mgocobachi (~m@ancrae.com) (*.net *.split)
[02:49:21] *** Quits: jancoow (~jancoow@dhcp-077-251-034-091.chello.nl) (*.net *.split)
[02:49:21] *** Quits: grym (~grym@user/grym) (*.net *.split)
[02:49:21] *** Quits: towel_ (~towel@user/towel) (*.net *.split)
[02:49:21] *** Quits: mgubyt (u@mgub.yt) (*.net *.split)
[02:49:21] *** Quits: dmvrtx (~dmvrtx@znc.dmvrtx.me) (*.net *.split)
[02:49:21] *** Quits: pjz (~pjz@place.org) (*.net *.split)
[02:49:21] *** Quits: Darkfoe (uid402081@id-402081.brockwell.irccloud.com) (*.net *.split)
[02:49:21] *** Quits: godlike (~godlike@user/godlike) (*.net *.split)
[02:49:21] *** Quits: jtanner (sid194399@brockwell.irccloud.com) (*.net *.split)
[02:49:21] *** Quits: liam (sid7517@brockwell.irccloud.com) (*.net *.split)
[02:49:21] *** Quits: gerikson (~gerikson@user/gerikson) (*.net *.split)
[02:49:21] *** Quits: rpittau (sid346891@id-346891.tinside.irccloud.com) (*.net *.split)
[02:49:21] *** Quits: PiRATA (~weechat@user/pirata) (*.net *.split)
[02:49:21] *** Quits: klysm (~mdasoh@show.op8.us) (*.net *.split)
[02:49:21] *** Quits: waveform (~quassel@waveform.plus.com) (*.net *.split)
[02:49:21] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[02:49:21] *** Quits: elcaro (~anonymous@45.32.191.75) (*.net *.split)
[02:49:21] *** Quits: greenbagels (~gb@dirac.xen.prgmr.com) (*.net *.split)
[02:49:21] *** Quits: BullHorn (BullHorn@zapdos.randomlab.info) (*.net *.split)
[02:49:21] *** Quits: dgw (dgw@sopel/admin/dgw) (*.net *.split)
[02:49:21] *** Quits: Russell (russell@bnc4free/staff/russell) (*.net *.split)
[02:49:21] *** Quits: owlbynight (sid501016@id-501016.tinside.irccloud.com) (*.net *.split)
[02:49:21] *** Quits: phantomcircuit (~phantomci@2604:a880:1:20::f2:c001) (*.net *.split)
[02:50:08] *** Joins: kline (~freedom0@libera/staff/kline)
[02:50:08] *** Joins: thm (~thomas@fedora/thm)
[02:50:08] *** Joins: ferros (~ferros@vps-eacaba1b.vps.ovh.net)
[02:50:08] *** Joins: samhain (~samhain@user/samhain)
[02:50:08] *** Joins: kmh (~kmh@p200300df5f145f003cbf9841c92aa596.dip0.t-ipconnect.de)
[02:50:08] *** Joins: bss (bss@rie.incorporeal.org)
[02:50:08] *** Joins: korros (korros@2600:3c03::f03c:92ff:febf:689a)
[02:50:08] *** Joins: cmagina (uid286142@user/cmagina)
[02:50:08] *** Joins: faxlore (sid505520@id-505520.highgate.irccloud.com)
[02:50:08] *** Joins: phryk (~totallyno@user/phryk)
[02:50:08] *** Joins: shrub (sid500598@user/psb)
[02:50:08] *** Joins: DaPinkOne (~Dap@user/dap)
[02:50:08] *** Joins: tf (~tf@user/tf)
[02:50:08] *** Joins: shrysr (~shrysr@2600:3c04::f03c:91ff:fece:e233)
[02:50:08] *** Joins: The-Compiler (~compiler@2001:41d0:2:3b6f:fcb3:9651:355f:f3ad)
[02:50:08] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[02:50:08] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[02:50:08] *** Joins: ChrisWarrick (kwpolska@user/kwpolska)
[02:50:08] *** Joins: noteness (noteness@user/noteness)
[02:50:08] *** Joins: canton7 (canton7@about/csharp/canton7)
[02:50:08] *** Joins: s1b1 (~s1b1@user/s1b1)
[02:50:08] *** Joins: enteral (~enteral@discovery.whatbox.ca)
[02:50:08] *** Joins: gtback (uid505041@id-505041.tinside.irccloud.com)
[02:50:08] *** Joins: darxun (sid504814@id-504814.tinside.irccloud.com)
[02:50:08] *** Joins: Jmtrix (~qed@user/jmtrix)
[02:50:08] *** Joins: et (~et@user/et)
[02:50:08] *** Joins: saschi (~saschi@user/saschi)
[02:50:08] *** Joins: dragonmaster (rotering@user/dragonmaster)
[02:50:08] *** Joins: nbin (~nbin@user/nbin)
[02:50:08] *** Joins: Deaygo (~Deaygo@let.deaygo.in)
[02:50:08] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[02:50:08] *** Joins: Zal (~Isthmus@user/isveni)
[02:50:08] *** Joins: robyndrake (robyndrake@user/robyndrake)
[02:50:08] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[02:50:08] *** Joins: Antibody (~Antibody@107.170.145.30)
[02:50:08] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[02:50:08] *** Joins: syllin (~syllin@user/syllin)
[02:50:08] *** Joins: spicyrice (~ubuntu@2600:1f11:52a:4400:ccbc:2b96:cabe:414b)
[02:50:08] *** Joins: t2mkn (~t2mkn@user/t2mkn)
[02:50:08] *** Joins: kmikita (uid461814@id-461814.brockwell.irccloud.com)
[02:50:08] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[02:50:08] *** Joins: dukwon (~dukwon@physics.horse)
[02:50:08] *** Joins: stoneware (~stoneware@user/stoneware)
[02:50:08] *** Joins: Tritium (~tritium@toxin.sdamon.com)
[02:50:08] *** Joins: tabakhase (tabakhase@user/tabakhase)
[02:50:08] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca)
[02:50:08] *** Joins: bluss (~bluss@user/bluss)
[02:50:08] *** Joins: m0nkey_ (~quassel@user/m0nkey/x-3352227)
[02:50:08] *** Joins: kenoba (~kenoba@ip68-0-248-40.ri.ri.cox.net)
[02:50:08] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[02:50:08] *** Joins: Ninpo (~Ninpo@charlton.qap.la)
[02:50:08] *** Joins: _0ne (~one@user/0ne/x-2101768)
[02:50:08] *** Joins: offbyone (sid910@id-910.brockwell.irccloud.com)
[02:50:08] *** Joins: computerquip (sid423484@user/computerquip)
[02:50:08] *** Joins: Lvl4Sword (sid483043@user/lvl4sword)
[02:50:08] *** Joins: pizza (~pizzaiolo@user/pizzaiolo)
[02:50:08] *** Joins: lxdr (~lxdr@user/lxdr)
[02:50:08] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[02:50:08] *** Joins: nuala (~nuala@user/nuala)
[02:50:08] *** Joins: Ulti (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com)
[02:50:08] *** Joins: zware (~zach@python/psf/zware)
[02:50:08] *** Joins: galen (~gaken@user/galen)
[02:50:08] *** Joins: Superstars111 (~jared@li227-215.members.linode.com)
[02:50:08] *** Joins: dvu (~danielvu@168.235.66.22)
[02:50:08] *** Joins: schumaml (~schumaml@dslb-178-002-190-100.178.002.pools.vodafone-ip.de)
[02:50:08] *** Joins: FLHerne (flh@flherne.uk)
[02:50:08] *** Joins: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com)
[02:50:08] *** Joins: habnabit_ (habnabit@python/site-packages/habnabit)
[02:50:08] *** Joins: N3X15 (~nexis@mail.nexisonline.net)
[02:50:08] *** Joins: KernelPanic (~KernelPan@user/kernelpanic)
[02:50:08] *** Joins: val (~val@limnoria/val)
[02:50:08] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[02:50:08] *** Joins: syrius (syrius@titan.stormtek.net)
[02:50:08] *** Joins: anddam (~anddam@user/anddam)
[02:50:08] *** Joins: Stx (stx@libera/staff/stx)
[02:50:08] *** Joins: fuz (~fuz@user/fuz)
[02:50:08] *** Joins: Geronimo (~Geronimo@user/geronimo)
[02:50:08] *** Joins: f8e4_ (~user@159.89.21.45)
[02:50:38] *** Joins: sharksauce (sharksauce@user/sharksauce)
[02:50:38] *** Joins: MoiraPrime (sid504449@id-504449.tooting.irccloud.com)
[02:50:38] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[02:50:38] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[02:50:38] *** Joins: sv (sid496265@user/sv)
[02:50:38] *** Joins: trench (trench@user/trench)
[02:50:38] *** Joins: alexyov (~alexyov@79.124.0.2)
[02:50:38] *** Joins: jayteeach (~jared@2601:8b:4400:9cf3::14f3)
[02:50:38] *** Joins: ST47 (~ST47@user/st47)
[02:50:38] *** Joins: TechSmurf (~tech@user/techsmurf)
[02:50:38] *** Joins: Namigator (~nami@user/namigator)
[02:50:38] *** Joins: Teknique (~kirk@user/teknique)
[02:50:38] *** Joins: Keij0 (~Keij0@user/keij0)
[02:50:38] *** Joins: jrjsmrtn (~jrjsmrtn@ip-193-121-123-176.dsl.scarlet.be)
[02:50:38] *** Joins: SrPx (sid108780@id-108780.highgate.irccloud.com)
[02:50:38] *** Joins: az_ (~az0@user/az0)
[02:50:38] *** Joins: vodkra (~vodkra@user/vodkra)
[02:50:38] *** Joins: taeaad (~taeaad@user/taeaad)
[02:50:38] *** Joins: synic (~squish@li74-118.members.linode.com)
[02:50:38] *** Joins: leosilva (~leosilva@canonical/leosilva)
[02:50:38] *** Joins: wm (~wmy@2a01:4f8:1c1c:7918::1)
[02:50:38] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[02:50:38] *** Joins: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27)
[02:50:38] *** Joins: Mechanismus (~LabMonkey@2602:306:cf62:e270:101a:c784:11b0:c2b7)
[02:50:38] *** Joins: Trashlord (~trash@user/trashlord)
[02:50:38] *** Joins: steam (~steam@user/steam)
[02:50:38] *** Joins: rodstewart (~dmartins@188.ip-149-56-97.net)
[02:50:38] *** Joins: xikkub (me@user/xikkub)
[02:50:38] *** Joins: Forkk (forkk@2600:3c00::f03c:91ff:fe84:de4d)
[02:50:38] *** Joins: jiffe (~jiffe@mail.nsab.us)
[02:50:38] *** Joins: nvz (~user@nvz.farted.online)
[02:50:38] *** Joins: redkrieg (~redkrieg@user/redkrieg)
[02:50:38] *** Joins: masterkorp (~masterkor@user/masterkorp)
[02:50:38] *** Joins: mandeep (uid394387@id-394387.tooting.irccloud.com)
[02:50:38] *** Joins: jsdallas (~jsdallas@ec2-52-26-176-9.us-west-2.compute.amazonaws.com)
[02:50:38] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[02:50:38] *** Joins: mdk (~mdk@python/psf/mdk)
[02:50:38] *** Joins: koltrast (cf6babc4@h77-53-57-114.cust.a3fiber.se)
[02:50:38] *** Joins: dxrt (~dxrt@user/dxrt)
[02:51:22] *** Quits: offbyone (sid910@id-910.brockwell.irccloud.com) (Ping timeout: 240 seconds)
[02:51:27] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[02:51:27] *** Joins: mumixam (~m@user/mumixam)
[02:51:27] *** Joins: gerikson (~gerikson@user/gerikson)
[02:51:27] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[02:51:27] *** Joins: WizardGed (~WizardGed@user/wizardged)
[02:51:27] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[02:51:27] *** Joins: catbeard (~noise@user/catbeard)
[02:51:27] *** Joins: mrus (~mrus@149.28.61.155)
[02:51:27] *** Joins: nem (sid113421@user/nem)
[02:51:27] *** Joins: elcaro (~anonymous@45.32.191.75)
[02:51:27] *** Joins: user3456 (user3456@user/user3456)
[02:51:27] *** Joins: eck0 (~eck0@047-007-119-133.res.spectrum.com)
[02:51:27] *** Joins: Maikel (~Maikel@130.61.63.136)
[02:51:27] *** Joins: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se)
[02:51:27] *** Joins: bookworm (~bookworm@neomutt/bookworm)
[02:51:27] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[02:51:27] *** Joins: orbatos[m] (~orbatos@2001:470:69fc:105::3450)
[02:51:27] *** Joins: aluria (~aluria@canonical/aluria)
[02:51:27] *** Joins: jyc (uid40911@id-40911.charlton.irccloud.com)
[02:51:27] *** Joins: DeeJay2 (~deejay2@199-114-234-216.pool.interplex.ca)
[02:51:27] *** Joins: lystra (~lystra@d53-64-11-169.nap.wideopenwest.com)
[02:51:27] *** Joins: roguelazer (~jbrown@sietchtabr.roguelazer.net)
[02:51:27] *** Joins: kofuyu (~kofuyu@user/kofuyu)
[02:51:27] *** Joins: encukou (~quassel@nat-pool-brq-t.redhat.com)
[02:51:27] *** Joins: Tykling (~tykling@irc.tyknet.dk)
[02:51:27] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[02:51:27] *** Joins: ruru4143 (~quassel@vmi444754.contaboserver.net)
[02:51:27] *** Joins: godlike (~godlike@user/godlike)
[02:51:27] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[02:51:27] *** Joins: Pny (pny1312@user/pny)
[02:51:27] *** Joins: rapha (~jrs@user/rapha)
[02:51:27] *** Joins: sanshiki (~falx@user/falx)
[02:51:27] *** Joins: defn (~n0b0dy@user/defn)
[02:51:27] *** Joins: WeblordPepe (~pepe@104.248.83.14)
[02:51:27] *** Joins: infobob (~infobob@python/bot/infobob)
[02:51:27] *** Joins: richrd (~wavi@thelounge/maintainer/wavi)
[02:51:27] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[02:51:27] *** Joins: tone0 (~tone@071-011-252-111.res.spectrum.com)
[02:51:27] *** Joins: Nei (~ailin@user/nemui)
[02:51:27] *** Joins: remedan (~remedan@balak.me)
[02:51:27] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[02:51:27] *** Joins: bsdbandit (~bwell@users.757.org)
[02:51:27] *** Joins: InPhase (~InPhase@openscad/inphase)
[02:51:27] *** Joins: Peng (~mnordhoff@fin.mattnordhoff.net)
[02:51:27] *** Joins: eldritch__ (~eldritch@134.209.221.71)
[02:51:27] *** Joins: nanonyme1 (nanonyme@kapsi.fi)
[02:51:27] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[02:51:27] *** Joins: jtanner (sid194399@brockwell.irccloud.com)
[02:51:27] *** Joins: m42e (~m42e@pb42.de)
[02:51:27] *** Joins: osxtra (~root@136.49.108.80)
[02:51:27] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[02:51:27] *** Joins: gdarko (~me@dg.mk)
[02:51:27] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[02:51:27] *** Joins: adamchainz (~adamj@51.15.34.126)
[02:51:27] *** Joins: bv (~bv@user/bv)
[02:51:27] *** Joins: d3x (michal@bielaw.ski)
[02:51:27] *** Joins: edenist (~edenist@rdns.robotprofessor.net)
[02:51:27] *** Joins: llinguini (sid257922@id-257922.stonehaven.irccloud.com)
[02:51:27] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[02:51:27] *** Joins: wyre (~wyre@user/wyre)
[02:51:27] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[02:51:27] *** Joins: shodan45 (~quassel@107.161.22.155)
[02:51:27] *** Joins: webmind (~webmind@user/webmind)
[02:51:27] *** Joins: Daemoen (~Daemoen@2604:a880:2:d0::2164:d001)
[02:51:27] *** Joins: murr4y (ali@user/murr4y)
[02:51:27] *** Joins: mgocobachi (~m@ancrae.com)
[02:51:27] *** Joins: Darkfoe (uid402081@id-402081.brockwell.irccloud.com)
[02:51:27] *** Joins: PiRATA (~weechat@user/pirata)
[02:51:27] *** Joins: jancoow (~jancoow@dhcp-077-251-034-091.chello.nl)
[02:51:27] *** Joins: grym (~grym@user/grym)
[02:51:27] *** Joins: towel_ (~towel@user/towel)
[02:51:27] *** Joins: dmvrtx (~dmvrtx@znc.dmvrtx.me)
[02:51:27] *** Joins: mgubyt (u@mgub.yt)
[02:51:27] *** Joins: phantomcircuit (~phantomci@2604:a880:1:20::f2:c001)
[02:51:27] *** Joins: pjz (~pjz@place.org)
[02:51:27] *** Joins: Russell (russell@bnc4free/staff/russell)
[02:51:27] *** Joins: liam (sid7517@brockwell.irccloud.com)
[02:51:27] *** Joins: owlbynight (sid501016@id-501016.tinside.irccloud.com)
[02:51:27] *** Joins: rpittau (sid346891@id-346891.tinside.irccloud.com)
[02:51:27] *** Joins: klysm (~mdasoh@show.op8.us)
[02:51:27] *** Joins: waveform (~quassel@waveform.plus.com)
[02:51:27] *** Joins: Byteflux (~byte@byteflux.net)
[02:51:27] *** Joins: greenbagels (~gb@dirac.xen.prgmr.com)
[02:51:27] *** Joins: BullHorn (BullHorn@zapdos.randomlab.info)
[02:51:27] *** Joins: dgw (dgw@sopel/admin/dgw)
[02:51:29] <ChrisWarrick> (that was a netsplit)
[02:51:30] *** Quits: MoiraPrime (sid504449@id-504449.tooting.irccloud.com) (Ping timeout: 240 seconds)
[02:51:32] *** Joins: finsternis (~X@23.226.237.192)
[02:51:32] *** Joins: milosz (~milosz@user/milosz)
[02:51:32] *** Joins: Dotz0cat (~Dotz0cat@h90.13.31.71.dynamic.ip.windstream.net)
[02:51:32] *** Joins: alguien (~alguien@user/alguien)
[02:51:32] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[02:51:32] *** Joins: zebrag (~chris@user/zebrag)
[02:51:32] *** Joins: travaldo (~travaldo@159.203.88.148)
[02:51:32] *** Joins: samuelbernardo (~samuelber@194.210.119.252)
[02:51:32] *** Joins: hrtk (~hritik@223.226.188.53)
[02:51:32] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[02:51:32] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[02:51:32] *** Joins: ponadm (pony@gateway/vpn/protonvpn/ponadm)
[02:51:32] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[02:51:32] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[02:51:32] *** Joins: clawh_ (~clawh@185.244.214.60)
[02:51:32] *** Joins: fofoni (~fofoni@user/fofoni)
[02:51:32] *** Joins: jamea (~jamea77@10.189-202-213.bestelclientes.com.mx)
[02:51:32] *** Joins: redgloboli (~redglobol@user/redgloboli)
[02:51:32] *** Joins: cdown (~cdown@163.114.131.1)
[02:51:32] *** Joins: akaWolf (~akaWolf@akawolf.org)
[02:51:32] *** Joins: zaquest (~notzaques@5.128.210.178)
[02:51:32] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[02:51:32] *** Joins: vicfred (~vicfred@user/vicfred)
[02:51:32] *** Joins: energizer (~energizer@user/energizer)
[02:51:32] *** Joins: superboot (~agentgasm@user/superboot)
[02:51:32] *** Joins: michaelis (~michaelis@193.183.209.17)
[02:51:32] *** Joins: a1paca (~a1paca@user/a1paca)
[02:51:32] *** Joins: kinabalu (~kinabalu@about/java/kinabalu)
[02:51:32] *** Joins: guardian (~guardian@planet-d.net)
[02:51:32] *** Joins: IanWizard (~ianwizard@user/ianwizard)
[02:51:32] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[02:51:32] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[02:51:32] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[02:51:32] *** Joins: Vultyre (~vultyre@user/vultyre)
[02:51:32] *** Joins: mjh4386 (~mjh4386@165.22.53.231)
[02:51:32] *** Joins: ATAD (~ATAD@user/atad)
[02:51:32] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[02:51:32] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[02:51:32] *** Joins: Scotteh (~Scotteh@user/scotteh)
[02:51:32] *** Joins: etienneme (~etienne@176-149-215-214.abo.bbox.fr)
[02:51:32] *** Joins: dece (~dece@dece.space)
[02:51:32] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[02:51:32] *** Joins: kungp (~kungp@h-46-59-2-200.a230.priv.bahnhof.se)
[02:51:32] *** Joins: libussa (~libussa@libussa.net)
[02:51:32] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[02:51:32] *** Joins: notevil (~notevil@user/notevil)
[02:51:32] *** Joins: mxp (~mxp@82.98.30.69)
[02:51:32] *** Joins: oisota (~oisota@user/oisota)
[02:51:32] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[02:51:32] *** Joins: Avaris (~Avaris@avar.is)
[02:51:32] *** Joins: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at)
[02:51:32] *** Joins: qlixed (~qlixed@181.44.129.13)
[02:51:32] *** Joins: entuland (~entuland@user/entuland)
[02:51:32] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[02:51:32] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[02:51:32] *** Joins: nrg (~NRG@user/nrg)
[02:51:32] *** Joins: sbanwart (~sbanwart@cpe-174-100-90-239.neo.res.rr.com)
[02:51:32] *** Joins: ionface (~ionface@user/ionface)
[02:51:32] *** Joins: DaNeenjah (~jake@adsl-74-230-9-207.hsv.bellsouth.net)
[02:51:32] *** Joins: Elodin (~weechat@user/elodin)
[02:51:32] *** Joins: douglaswinship (~douglaswi@78.40.148.180)
[02:51:32] *** Joins: kevr (~kevr@user/kevr)
[02:51:32] *** Joins: sebastianos (~sebastian@user/sebastianos)
[02:51:32] *** Joins: zeden (~zeden@user/zeden)
[02:51:32] *** Joins: tg (~tg@rockylinux/infra/tg)
[02:51:32] *** Joins: jmcantre2 (~weechat@user/jmcantrell)
[02:51:32] *** Joins: x_kuru (~xkuru@user/xkuru)
[02:51:32] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[02:51:32] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[02:51:32] *** Joins: Hackerpcs (~user@user/hackerpcs)
[02:51:32] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[02:51:32] *** Joins: c10l (~c10l@89.34.167.207)
[02:51:32] *** Joins: Doffi (~doffi@91.132.197.188)
[02:51:32] *** Joins: IceMichael (~IceMichae@dynamic-046-114-153-046.46.114.pool.telefonica.de)
[02:51:32] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:51:32] *** Joins: polyrob (~rob@user/polyrob)
[02:51:32] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[02:51:32] *** Joins: aquijoule__ (~richbridg@213-225-12-210.nat.highway.a1.net)
[02:51:32] *** Joins: vlm (~vlm@user/vlm)
[02:51:32] *** Joins: Zer0xFF (michael@matrix.michaelsasser.org)
[02:51:32] *** Joins: GadgetNerd (~GadgetNer@user/gadgetnerd)
[02:51:32] *** Joins: normic (~normic@p4fc3009e.dip0.t-ipconnect.de)
[02:51:32] *** Joins: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com)
[02:51:32] *** Joins: snalty (~Shhh@user/snalty)
[02:51:32] *** Joins: spjb (~spjb@s0106f0f24985fe23.wp.shawcable.net)
[02:51:32] *** Joins: andrzejv (~andrzejv@78-56-77-187.static.zebra.lt)
[02:51:32] *** Joins: kujo (~kujo@188.166.12.52)
[02:51:32] *** Joins: mesaboogie (mesaboogie@user/mesaboogie)
[02:51:32] *** Joins: Ogmios (~Ogmios@user/ogmios)
[02:51:32] *** Joins: neolem (~neolem@user/neolem)
[02:51:32] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[02:51:32] *** Joins: wilk (~wilk@user/wilk)
[02:51:32] *** Joins: iflema (~ian@user/iflema)
[02:51:32] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[02:51:32] *** Joins: wintrmute (~wintrmute@bit.pappanaka.com)
[02:51:32] *** Joins: seoul_man (~meh@user/seoul-man/x-5066766)
[02:51:32] *** Joins: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[02:51:32] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[02:51:32] *** Joins: faceface (~faceface@user/faceface)
[02:51:32] *** Joins: Gerula (~Gerula@user/gerula)
[02:51:32] *** Joins: KindOne (kindone@user/kindone)
[02:51:32] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[02:51:32] *** Joins: pr3d4t0r (~zhenya01@user/pr3d4t0r)
[02:51:32] *** Joins: radu242 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[02:51:32] *** Joins: death916 (~death916@user/death916)
[02:51:32] *** Joins: c4017w (~c4017@209.52.68.8)
[02:51:32] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[02:51:32] *** Joins: comrumino (~comrumino@li87-103.members.linode.com)
[02:51:32] *** Joins: trufas (~trufas@177.240.218.218)
[02:51:32] *** Joins: SoF (~skius@user/skius)
[02:51:32] *** Joins: dulanic (~dulanic@47.187.147.69)
[02:51:32] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[02:51:32] *** Joins: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net)
[02:51:32] *** Joins: ephemer0l (~ephemer0l@organizedmagnetism.com)
[02:51:32] *** Joins: dominique_michel (~Dominique@mob-194-230-158-179.cgn.sunrise.net)
[02:51:32] *** Joins: dmat (~noone@user/dmat)
[02:51:32] *** Joins: Bardon_ (~Bardon@user/Bardon)
[02:51:32] *** Joins: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[02:51:32] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[02:51:32] *** Joins: Aramis (~aramis@cm-84.210.154.79.getinternet.no)
[02:51:32] *** Joins: coldenbrewed (~nitrobrew@li1517-39.members.linode.com)
[02:51:32] *** Joins: {HD} (~{HD}@102.165.16.62)
[02:51:32] *** Joins: arti (~arti@193.40.103.195)
[02:51:32] *** Joins: AM (~techman@87-94-110-215.bb.dnainternet.fi)
[02:51:32] *** Joins: gutt (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net)
[02:51:32] *** Joins: Freneticks (~Frenetick@gw.ptr-80-238-209-252.customer.ch.netstream.com)
[02:51:32] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[02:51:32] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[02:51:32] *** Joins: mteo (francis@user/francis)
[02:51:32] *** Joins: Wu (~wu@254.red-83-52-60.dynamicip.rima-tde.net)
[02:51:32] *** Joins: sgn (~sgn@user/sgn)
[02:51:32] *** Joins: MrFixIt (~samurai_@c-73-246-215-75.hsd1.il.comcast.net)
[02:51:32] *** Joins: rookie101 (~rookie@207.154.204.166)
[02:51:32] *** Joins: Vision (~Vision@024-178-231-009.res.spectrum.com)
[02:51:32] *** Joins: nickodd (~nickodd@user/nickodd)
[02:51:32] *** Joins: BlessJah (~BlessJah@user/blessjah)
[02:51:32] *** Joins: loworderbit (~dave@s0106e81cba1736ea.ss.shawcable.net)
[02:51:32] *** Joins: francis (francis@user/francis)
[02:51:32] *** Joins: driib (~driib@185.195.233.169)
[02:51:32] *** Joins: Celelibi (celelibi@user/celelibi)
[02:51:32] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[02:51:32] *** Joins: ttys000 (~ttys000@user/ttys000)
[02:51:32] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[02:51:32] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[02:51:32] *** Joins: baltazar (~baltazar@193-110-63-140.cable-modem.hdsnet.hu)
[02:51:32] *** Joins: yitz (~nick@exercism/yitz)
[02:51:32] *** Joins: blaisebool (~blaiseboo@static.247.123.46.78.clients.your-server.de)
[02:51:32] *** Joins: bdeferme (~bdeferme@i.ctrl86.com)
[02:51:32] *** Joins: Karyon (~Karyon@user/karyon)
[02:51:32] *** Joins: sud (~sud@user/sud)
[02:51:32] *** Joins: odinsbane (~mbs@pat-pool-138.crick.ac.uk)
[02:51:32] *** Joins: dambuster (~dambuster@185.193.170.225)
[02:51:32] *** Joins: zegalch (~zegalch@178.128.75.133)
[02:51:32] *** Joins: mpmc (~mpmc@user/mpmc)
[02:51:32] *** Joins: aleph (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[02:51:32] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[02:51:32] *** Joins: RemiYuko (~licht@user/akechishiro)
[02:51:32] *** Joins: Mapley (~Maple@user/maple)
[02:51:32] *** Joins: jinsun (~quassel@user/jinsun)
[02:51:32] *** Joins: Makdaam (makdaam@user/makdaam)
[02:51:32] *** Joins: Trieste (T@user/pilgrim)
[02:51:32] *** Joins: woky (~woky@li1651-31.members.linode.com)
[02:51:32] *** Joins: Retr0id (~Retr0id@user/retr0id)
[02:51:32] *** Joins: jvalleroy (~quassel@user/jvalleroy)
[02:51:32] *** Joins: asix (~Anders@user/asix)
[02:51:32] *** Joins: CrazyEddy (~CrazyEddy@overkill.epicsol.org)
[02:51:32] *** Joins: Strom (strom@fedora/strom)
[02:51:32] *** Joins: quasineutral (~quaisneut@user/quasineutral)
[02:51:32] *** Joins: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-27.dsl.bell.ca)
[02:51:32] *** Joins: luna-is-here (~quassel@ip-95-223-58-221.hsi16.unitymediagroup.de)
[02:51:32] *** Joins: robinho (~robinho@user/robinho)
[02:51:32] *** Joins: c4017_ (~c4017@S010664777dab66f3.vf.shawcable.net)
[02:51:32] *** Joins: dreamer (~dreamer@user/dreamer)
[02:51:32] *** Joins: jabberwock (~jessy@user/jabberwock)
[02:51:32] *** Joins: achilleas (~ach@user/achilleas)
[02:51:32] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[02:51:32] *** Joins: zyeri (~zyeri@tilde.team)
[02:51:32] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[02:51:32] *** Joins: ksynwa (~ksynwa@v2202009129512127397.nicesrv.de)
[02:51:50] <habnabit_> oh, irssi hides netsplits with quits ignored i guess
[02:51:54] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:51:54] *** Joins: mickey (~user@user/mickey)
[02:51:54] *** Joins: spithash (~spithash@user/spithash)
[02:51:54] *** Joins: CombatVet (~c4@user/combatvet)
[02:51:54] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[02:51:54] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:51:54] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[02:51:54] *** Joins: ano (~weechat@user/ano)
[02:51:54] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[02:51:54] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[02:51:54] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:51:54] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[02:51:54] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[02:51:54] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[02:51:54] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[02:51:59] *** Joins: lmmx (~louis@host-92-0-187-249.as13285.net)
[02:51:59] *** Joins: lemmoner (~lemmoner@static-119-144-229-77.ipcom.comunitel.net)
[02:51:59] *** Joins: Auron (Auron956@user/auron)
[02:51:59] *** Joins: SuperLag (~akulbe@user/superlag)
[02:51:59] *** Joins: jinie (~jimmy@188.114.173.37)
[02:51:59] *** Joins: OPK (~OPK@user/opk)
[02:51:59] *** Joins: supakeen (~user@python/site-packages/supakeen)
[02:51:59] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[02:51:59] *** Joins: Madda (~Madda@208.249.9.51.dyn.plus.net)
[02:51:59] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[02:51:59] *** Joins: ray (~ray@user/re)
[02:51:59] *** Joins: Pickchea (~private@user/pickchea)
[02:51:59] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[02:51:59] *** Joins: Betal (~Beta@user/betal)
[02:51:59] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[02:51:59] *** Joins: FluffyMask (~FluffyMas@user/fluffymask)
[02:51:59] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[02:51:59] *** Joins: mkellis (~Calibellu@68.235.43.86)
[02:51:59] *** Joins: Alan (~alan@user/alan)
[02:51:59] *** Joins: treefrob (~robx@p57a969ef.dip0.t-ipconnect.de)
[02:51:59] *** Joins: zoid (~zoid@user/taxationistheft)
[02:51:59] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:51:59] *** Joins: Ninja3047 (~Ninja3047@3047.ninja)
[02:51:59] *** Joins: synbiose (~synbiose@user/synbiose)
[02:51:59] *** Joins: zerok (~zerok@user/zerok)
[02:51:59] *** Joins: y2o (~y2o@pc-128-133-45-190.cm.vtr.net)
[02:51:59] *** Joins: {4144} (~{4144}@46.56.70.183)
[02:51:59] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:51:59] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[02:51:59] *** Joins: KeiraT (~unknown@lulzsec.co.uk)
[02:51:59] *** Joins: mixfix41 (~homefame@user/mixfix41)
[02:51:59] *** Joins: moto (~moto@user/moto)
[02:51:59] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[02:51:59] *** Joins: patchie (~sdf@63.79-160-77.customer.lyse.net)
[02:51:59] *** Joins: NeoCore (~neocore@138.199.47.155)
[02:51:59] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[02:51:59] *** Joins: mossman93 (~quassel@user/mossman93)
[02:51:59] *** Joins: gline (~yashi@p508bebbc.dip0.t-ipconnect.de)
[02:51:59] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[02:51:59] *** Joins: Abrax (~Abrax@user/abrax)
[02:51:59] *** Joins: ccldarjun (~arjun@c-67-160-245-135.hsd1.ca.comcast.net)
[02:51:59] *** Joins: Haxxa (~Haxxa@122.199.47.41)
[02:51:59] *** Joins: guntbert (~yesitsme@user/guntbert)
[02:51:59] *** Joins: Praise (~Fat@user/praise)
[02:51:59] *** Joins: dude-x (~textual@pool-100-1-141-108.nwrknj.fios.verizon.net)
[02:51:59] *** Joins: Alexer (~alexer@alexer.net)
[02:51:59] *** Joins: deepy (deepy@user/deepy)
[02:51:59] *** Joins: Brocker (~NoBody@user/brocker)
[02:51:59] *** Joins: outsider (~sierkov@c89-176.i07-23.onvol.net)
[02:51:59] *** Joins: chandankumar (~chandanku@51.159.58.174)
[02:51:59] *** Joins: alxndr (~alexander@ybti.net)
[02:51:59] *** Joins: tkazi (~tkazi@user/tkazi)
[02:51:59] *** Joins: KevinX (~KevinX@94.140.11.108)
[02:51:59] *** Joins: lacrymology (~lacrymolo@static-243-15-25-46.ipcom.comunitel.net)
[02:51:59] *** Joins: koziad (~koziad@74.102.176.11)
[02:51:59] *** Joins: d1b (~db@user/d1b)
[02:51:59] *** Joins: pioto (~pioto@user/pioto)
[02:51:59] *** Joins: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net)
[02:51:59] *** Joins: rjwiii (~mr-rich@072-187-028-004.res.spectrum.com)
[02:51:59] *** Joins: lastmikoi (~lastmikoi@vm-01.lastmikoi.net)
[02:51:59] *** Joins: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net)
[02:51:59] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[02:51:59] *** Joins: Catatonic (~Catatonic@ariel.whatbox.ca)
[02:51:59] *** Joins: Khoyo (~khoyo@user/khoyo)
[02:51:59] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[02:51:59] *** Joins: meti (~meti@user/meti)
[02:51:59] *** Joins: vbgunz_ (~vbgunz@35.141.71.47)
[02:51:59] *** Joins: janemba (~janemba@185.107.80.152)
[02:51:59] *** Joins: fluter (~fluter@user/fluter)
[02:51:59] *** Joins: ops (~ops@user/echelon)
[02:51:59] *** Joins: roolebo (sid64806@charlton.irccloud.com)
[02:51:59] *** Joins: voldial (~user@user/voldial)
[02:52:07] *** Quits: subvisor (sid502026@id-502026.brockwell.irccloud.com) (Ping timeout: 272 seconds)
[02:52:12] *** Joins: drew (~drew@user/drew)
[02:52:12] *** Joins: LuKaRo (~LuKaRo@p200300dfa71797375776d016cf464e3b.dip0.t-ipconnect.de)
[02:52:12] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[02:52:12] *** Joins: visl (sid453966@user/visl)
[02:52:12] *** Joins: Fingel (fingel@user/fingel)
[02:52:12] *** Joins: chwba (chwba@chwba.banana.ircnow.org)
[02:52:12] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[02:52:12] *** Joins: armin (~armin@unix.porn)
[02:52:12] *** Joins: altendky (sid135382@id-135382.stonehaven.irccloud.com)
[02:52:12] *** Joins: graphitemaster (~graphitem@user/graphitemaster)
[02:52:12] *** Joins: HenryG (~quassel@2607:5300:201:3000::f63)
[02:52:12] *** Joins: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[02:52:12] *** Joins: leonardo (~leonardo@user/leonardo)
[02:52:12] *** Joins: gildarts (16abab341f@user/gildarts)
[02:52:12] *** Joins: Leliana (is@the.one.and.only.revthefox.co.uk)
[02:52:12] *** Joins: bjs (sid190364@user/bjs)
[02:52:12] *** Joins: foureyes (foureyes@brought.to.you.by.bnc4free.com)
[02:52:12] *** Joins: tris (emptystrin@irc1.lessbroken.org)
[02:52:12] *** Joins: abn (sid376310@id-376310.tinside.irccloud.com)
[02:52:12] *** Joins: daniel2 (daniel@user/daniel2)
[02:52:12] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-19fa-19fb-303f-0075.res6.spectrum.com)
[02:52:12] *** Joins: ripdog_ (~quassel@user/ripdog)
[02:52:12] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[02:52:12] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[02:52:12] *** Joins: rigid (~rigid@user/rigid)
[02:52:12] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[02:52:12] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[02:52:12] *** Joins: derelict (~derelict@user/derelict)
[02:52:12] *** Joins: kafka (~kafka@user/kafka)
[02:52:12] *** Joins: zmt01 (~zmt00@user/zmt00)
[02:52:12] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[02:52:12] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[02:52:12] *** Joins: emerent (~quassel@p200300cd5703bb5dba27ebfffed28a59.dip0.t-ipconnect.de)
[02:52:12] *** Joins: bryce (~bryce@ool-457dd6ac.dyn.optonline.net)
[02:52:12] *** Joins: davidlowryduda (~davidlowr@2601:197:600:1210:c935:8535:4063:dde3)
[02:52:12] *** Joins: pete443_ (~pete@user/pete443)
[02:52:12] *** Joins: jasiek (~jps@kuweta.sanepid.org)
[02:52:12] *** Joins: zeus (~user@user/kamyl)
[02:52:12] *** Joins: yourfate (~yourfate@cabal.yourfate.org)
[02:52:12] *** Joins: jkl (~jkl@2600:1700:2420:6d10::3f1)
[02:52:12] *** Joins: candy (~tvrtko@93-136-28-15.adsl.net.t-com.hr)
[02:52:12] *** Joins: rgp (~rgp@user/rgp)
[02:52:12] *** Joins: Wulf (~Wulf@user/wulf)
[02:52:12] *** Joins: coc0nut (~coc0nut@167.99.37.181)
[02:52:12] *** Joins: cman (~Cody@2603-9000-d104-8465-ed6d-438d-e6c7-ffef.inf6.spectrum.com)
[02:52:12] *** Joins: camel_case (~iphone@user/iphone)
[02:52:12] *** Joins: transhumanist (~hiken@2601:196:8800:35f0:1d4e:e5ea:4e24:3511)
[02:52:12] *** Joins: rwb (~augh@theguntretort.com)
[02:52:12] *** Joins: Pr0phet (sid505706@id-505706.stonehaven.irccloud.com)
[02:52:12] *** Joins: Titore (Titore@user/titore)
[02:52:12] *** Joins: Liexei (Liexei@user/liexei)
[02:52:12] *** Joins: flyback (~flyback@2601:540:8201:1e60:6450:faac:2f4c:fd30)
[02:52:12] *** Joins: argoneus (~argoneus@argoneus.com)
[02:52:12] *** Joins: pan (~quassel@pankid.club)
[02:52:12] *** Joins: trace (~trace@ip5b429953.dynamic.kabel-deutschland.de)
[02:52:12] *** Joins: RavuAlHemio (~ondra@selene.ondrahosek.com)
[02:52:12] *** Joins: ali1234 (~al@user/ali1234)
[02:52:12] *** Joins: ThiefMaster (thief@indico/developer/thiefmaster)
[02:52:12] *** Joins: Oddity (Oddity@user/oddity)
[02:52:12] *** Joins: int0x1C8 (~int0x1C8@user/int0x1c8)
[02:52:12] *** Joins: susam (~susam@user/susam)
[02:52:12] *** Joins: gerard (~gerard@user/gerard)
[02:52:12] *** Joins: cation (cation@user/cation)
[02:52:12] *** Joins: Bato (~plauder@2001:bc8:182c:b39::1)
[02:52:12] *** Joins: Exa (exa@irc.moe)
[02:52:12] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[02:52:12] *** Joins: ham (~ham4@user/ham)
[02:52:34] *** Joins: Psi-Jack (~psi-jack@user/psi-jack)
[02:52:34] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[02:52:34] *** Joins: kieto (~kieto@user/kieto)
[02:52:34] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[02:52:34] *** Joins: n-st (~n-st@user/n-st)
[02:52:34] *** Joins: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75)
[02:52:34] *** Joins: acid (~acid@user/acid)
[02:52:34] *** Joins: eliasy[m] (~eliasymat@2001:470:69fc:105::3ff3)
[02:52:34] *** Joins: thunfisch (~thunfisch@user/thunfisch)
[02:52:34] *** Joins: Wegge (~wegge@user/wegge)
[02:52:34] *** Joins: enrico (~enrico@gandi.enricozini.org)
[02:52:34] *** Joins: skylite (~skylite@2E6B2CD6.catv.pool.telekom.hu)
[02:52:34] *** Joins: mwilson (mwilson@2600:3c01::f03c:92ff:fe7f:1149)
[02:52:34] *** Joins: maxking (~maxking@user/maxking)
[02:52:34] *** Joins: Affliction (~Afflictio@user/affliction)
[02:52:34] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[02:52:34] *** Joins: Thermoriax (Thermoriax@user/thermoriax)
[02:52:34] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[02:52:34] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[02:52:34] *** Joins: RoyK (~roy@user/royk)
[02:52:34] *** Joins: onu (~onufn@gibbs.uberspace.de)
[02:52:34] *** Joins: hexeme (~hexeme@user/hexeme)
[02:52:34] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[02:52:34] *** Joins: jrabbit (~jack@user/jrabbit)
[02:52:34] *** Joins: _moep_ (~moep@user/moep/x-3358975)
[02:52:34] *** Joins: Pitr (~pj@p3.ictree.nl)
[02:52:34] *** Joins: tunixman (~tunixman@45.32.228.130)
[02:52:34] *** Joins: shailangsa (~shailangs@host86-145-14-23.range86-145.btcentralplus.com)
[02:52:34] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[02:52:34] *** Joins: tvm (~tom@ip-89-103-250-229.net.upcbroadband.cz)
[02:52:34] *** Joins: erica (~erica@user/erica)
[02:52:34] *** Joins: julia (~quassel@user/julia)
[02:52:34] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[02:52:34] *** Joins: drjp (jeanpaul@112-54-174-82.ftth.glasoperator.nl)
[02:52:34] *** Joins: acegallagher (~Ace@71-211-253-134.hlrn.qwest.net)
[02:52:34] *** Joins: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net)
[02:52:34] *** Joins: salparadise (~salparadi@129.146.17.140)
[02:52:34] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[02:52:34] *** Joins: gizmo_ (~gizmo@45.91.125.2)
[02:52:34] *** Joins: kst (~user@cpe-70-95-182-43.san.res.rr.com)
[02:52:34] *** Joins: DXR (~lyrical@46.246.236.246.dsl.dyn.forthnet.gr)
[02:52:34] *** Joins: Tips|Cloud (sid62231@id-62231.charlton.irccloud.com)
[02:52:34] *** Joins: Kingsy (~chris@kingsy.co.uk)
[02:52:34] *** Joins: yupyup (sid228030@id-228030.brockwell.irccloud.com)
[02:52:34] *** Joins: u4t (~chat@78.ip-139-99-236.net)
[02:52:34] *** Joins: Ekho (~Ekho@user/ekho)
[02:52:34] *** Joins: byzandula (~byzandula@beerbq.net)
[02:52:34] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[02:52:34] *** Joins: kgz (~kragniz@nyaa.kragniz.eu)
[02:52:34] *** Joins: strudl (~strudl@user/strudl)
[02:52:34] *** Joins: jor (~jor@jor.link)
[02:52:34] *** Joins: cacheyourdreams (~cache@user/cacheyourdreams)
[02:52:34] *** Joins: jootoi (~jootoi@130.61.158.197)
[02:52:34] *** Joins: dlam (~dlam@dlam.me)
[02:52:34] *** Joins: chilversc (~chilversc@user/chilversc)
[02:52:34] *** Joins: FunkyBob (~curtis@vhost3.tinbrain.net)
[02:52:34] *** Joins: nigelb_ (~nigel@zeus.nigelb.me)
[02:52:34] *** Joins: roniez (~roniez@nixsec.se)
[02:52:34] *** Joins: simone (~nya@user/sx)
[02:52:34] *** Joins: xnbq (~xnbq@user/xnbq)
[02:52:34] *** Joins: celphi (sid97751@id-97751.brockwell.irccloud.com)
[02:52:34] *** Joins: Notgnoshi (~nots@2001-48F8-8-40-2EF0-5DFF-FE04-24F7-dynamic.midco.net)
[02:52:34] *** Joins: itok (sid418430@id-418430.charlton.irccloud.com)
[02:52:34] *** Joins: Socra (~Socra@206.217.216.27)
[02:52:34] *** Joins: fsg (fsg@2600:3c00::f03c:92ff:fec6:da18)
[02:52:34] *** Joins: jbe (~hellother@lysator/root/jbe)
[02:52:34] *** Joins: cohn (~noone@user/cohn)
[02:52:34] *** Joins: CygniX (~CygniX@2605:6400:30:fdc6:68:f4:4e:78)
[02:52:34] *** Joins: sus (thelounge@user/zeromomentum)
[02:52:34] *** Joins: supbo (~kenan@li227-215.members.linode.com)
[02:52:34] *** Joins: abyss (~robbins@user/robbins)
[02:52:34] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[02:52:34] *** Joins: n1000 (~n1000@user/n1000)
[02:52:34] *** Joins: ixjlyons (kenny@2600:3c01::f03c:91ff:fe80:22c6)
[02:52:34] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[02:52:34] *** Joins: BlueShark (sid10311@user/blueshark)
[02:52:34] *** Joins: matthewwilkes (sid500242@id-500242.highgate.irccloud.com)
[02:52:34] *** Joins: mustache_ride (sid451683@user/mustache-ride/x-6533344)
[02:52:34] *** Joins: etch (~etch@user/etch)
[02:52:34] *** Joins: cyberjunkie (~cyberjunk@wireguard/tunneler/cyberjunkie)
[02:52:34] *** Joins: mgedmin (~mg@user/mgedmin)
[02:52:34] *** Joins: Wooble (~Wooble@107.170.27.240)
[02:52:34] *** Joins: ammar2 (admin@i.diddled.with.the.opers.so.they.klined.me)
[02:52:34] *** Joins: sybariten (~jake@78-47-86-21.cinfuserver.com)
[02:52:34] *** Joins: jelmer (~jelmer@user/jelmer)
[02:52:34] *** Joins: Fridtjof (~fridel@thonk.9net.org)
[02:52:34] *** Joins: ThomasJ (~ThomasJ@user/thomasj)
[02:52:34] *** Joins: sirn (~sirn@user/sirn)
[02:52:34] *** Joins: wereii (~wereii@37.205.14.89)
[02:52:34] *** Joins: ebb (ebb@user/ebb)
[02:52:34] *** Joins: A_Dragon (A_D@doom-tower.awesome-dragon.science)
[02:52:34] *** Joins: DocMors (~DocMors@web.crypticity.net)
[02:52:34] *** Joins: Mogget (Mogget@vogon.moshwire.com)
[02:52:34] *** Joins: rubin55 (sid175221@id-175221.stonehaven.irccloud.com)
[02:52:34] *** Joins: tuxd00d (sid401305@id-401305.charlton.irccloud.com)
[02:52:34] *** Joins: nocko (sid501219@user/nocko)
[02:52:34] *** Joins: fructose (~fructose@user/fructose)
[02:52:34] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[02:52:34] *** Joins: mattmcc (~matt@li807-33.members.linode.com)
[02:52:34] *** Joins: MacGyver (~macgyver@user/macgyver)
[02:52:35] *** Joins: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr)
[02:52:36] <habnabit_> lmmx, is your goal to bundle a shared library with your package?
[02:52:44] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:a874:b712:9670:8351)
[02:52:44] *** Joins: p-i- (~Ohmu@node-mzz.pool-118-173.dynamic.totinternet.net)
[02:52:44] *** Joins: shabius (~shabius@2a0e:1c80:2:1021::1000)
[02:52:44] *** Joins: ultralisk (~ultralisk@2a00:23c6:4b0e:e900:75db:cb84:2f7c:da2)
[02:52:44] *** Joins: Emmm (~Emm@user/emmm)
[02:52:44] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[02:52:44] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[02:52:44] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[02:52:44] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[02:52:44] *** Joins: gbear605 (~gbear605@user/gbear605)
[02:52:44] *** Joins: explodes (~explodes@user/explodes)
[02:52:44] *** Joins: the4oo4- (~the4oo4@shenzhou.whatbox.ca)
[02:52:44] *** Joins: dstufft (~dstufft@shitbird.caremad.io)
[02:52:44] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[02:52:44] *** Joins: cedric (~cedric@2a01:cb11:867:c200:d75f:fc18:dd28:1769)
[02:52:44] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[02:52:44] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[02:52:44] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[02:52:44] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:52:44] *** Joins: doko (~doko@2a02:8106:1a:7600:11f2:110c:e9cf:cc2c)
[02:52:44] *** Joins: IHasFinger (~JJ_@2a02:c7f:fc54:ba00:e1bc:35e8:cc1d:c226)
[02:52:44] *** Joins: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6)
[02:52:44] *** Joins: mcglk (~mcglk@131.191.49.120)
[02:52:44] *** Joins: PJBoy (~PJBoy@user/pjboy)
[02:52:44] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[02:52:44] *** Joins: ncb (~ncb@user/ncb)
[02:52:44] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:bbfc:1ba1:ffb3:62a)
[02:52:44] *** Joins: colorado (~fluiD@66.186.209.60)
[02:52:44] *** Joins: skapata (~Skapata@user/skapata)
[02:52:44] *** Joins: gcbirzan (~gcbirzan@user/gcbirzan)
[02:52:44] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:101:83e8:3086:926b)
[02:52:44] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[02:52:44] *** Joins: zbr (~zbr@h.sbarnea.com)
[02:52:44] *** Joins: seednode (~seednode@user/seednode)
[02:52:44] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[02:52:44] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[02:52:44] *** Joins: dzz007 (~dzz007@user/dzz007)
[02:52:44] *** Joins: ente_ (~ente@p54a445ae.dip0.t-ipconnect.de)
[02:52:44] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[02:52:44] *** Joins: kindablue (znc@irc.tpurist.com)
[02:52:44] *** Joins: marduk (~marduk@216.243.54.166)
[02:52:44] *** Joins: xsperry (~as@user/xsperry)
[02:52:44] *** Joins: Jormungandr89 (~brad@136.49.61.2)
[02:52:44] *** Joins: cinix (~cinix__@c-73-60-53-69.hsd1.nh.comcast.net)
[02:52:44] *** Joins: hexa- (~hexa-@juno.lossy.network)
[02:52:44] *** Joins: dalan (~dalan@118.102.85.89)
[02:52:44] *** Joins: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1)
[02:52:44] *** Joins: Unode (~Unode@194.94.44.220)
[02:52:44] *** Joins: codl (~codl@user/codl)
[02:52:44] *** Joins: TheRAt (~TheRAt@user/therat)
[02:52:44] *** Joins: Armen (~Armen@armen138.com)
[02:52:44] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[02:52:44] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[02:52:44] *** Joins: arakimo (~arakimo@user/arakimo)
[02:52:44] *** Joins: JanC (~janc@user/janc)
[02:52:44] *** Joins: dcaro (~dcaro@user/dcaro)
[02:52:44] *** Joins: cruzr (~cruzr@2604:4300:a:16b::6)
[02:52:44] *** Joins: Joel (~jjshoe@user/joel)
[02:53:26] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Ping timeout: 246 seconds)
[02:53:26] <lmmx> ...
[02:53:28] *** Joins: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com)
[02:53:28] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:53:28] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[02:53:28] *** Joins: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it)
[02:53:28] *** Joins: Jigsy (~Jigsy@user/jigsy)
[02:53:28] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[02:53:28] *** Joins: heco (~redrum@user/redrum88)
[02:53:28] *** Joins: Tashtari (~tashtari@user/tashtari)
[02:53:28] *** Joins: sabet (~sabet@user/sabet)
[02:53:28] *** Joins: jug (~jug@user/jug)
[02:53:28] *** Joins: pie_bnc (~pie_bnc@user/pie/x-2818909)
[02:53:28] *** Joins: ouemt (~quassel@user/ouemt)
[02:53:28] *** Joins: deniska (~denis@user/deniska)
[02:53:28] *** Joins: carbolymer (~carbolyme@dropacid.net)
[02:53:28] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[02:53:28] *** Joins: sivoais (~zaki@199.19.225.239)
[02:53:28] *** Joins: dob1 (~dob1@user/dob1)
[02:53:28] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[02:53:28] *** Joins: MrFantastik (~Thunderbi@98.1.50.67)
[02:53:28] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[02:53:28] *** Joins: brownan (~brownan@136.56.137.143)
[02:53:28] *** Joins: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt)
[02:53:28] *** Joins: filePeter (~filePeter@user/filepeter)
[02:53:28] *** Joins: icy (~icy@user/icy)
[02:53:28] *** Joins: xormor (pamipetter@clairlair.xyz)
[02:53:28] *** Joins: doc (~doc@user/doc)
[02:53:28] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[02:53:28] *** Joins: zbe (~zbe@pleiades.zbe.bz)
[02:53:28] *** Joins: mdemo (~mdemo@c-73-40-53-74.hsd1.va.comcast.net)
[02:53:28] *** Joins: BUSY (~BUSY@user/busy)
[02:53:28] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[02:53:28] *** Joins: Quack (~Quack@185.21.216.169)
[02:53:28] *** Joins: phlixi (~phlixi@ppp-46-244-173-22.dynamic.mnet-online.de)
[02:53:28] *** Joins: asd (~noname@user/asd)
[02:53:28] *** Joins: Allegretto (~allegrett@fibhost-67-230-113.fibernet.hu)
[02:53:28] *** Joins: waxfire23 (~waxfire@65.119.2.240)
[02:53:28] *** Joins: resmo (~resmo@135-58-239-77.dyn.cable.fcom.ch)
[02:53:28] *** Joins: s8n (~s8n@user/s8n)
[02:53:28] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[02:53:28] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[02:53:28] *** Joins: m4v (~znc@ubuntu/member/m4v)
[02:53:28] *** Joins: odrling_ (~odrling@korone.aidoru.agency)
[02:53:28] *** Joins: civillian (~nick@124-171-97-43.dyn.iinet.net.au)
[02:53:28] *** Joins: TakinOver (~TakinOver@47.150.206.35)
[02:53:28] *** Joins: noarb (~noarb@user/noarb)
[02:53:28] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[02:53:28] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[02:53:28] *** Joins: Lunatrius (~Lunatrius@77.38.22.128)
[02:53:28] *** Joins: km (~km@static.55.93.181.135.clients.your-server.de)
[02:53:28] *** Joins: djhankb (~djhankb@208.113.164.68)
[02:53:28] *** Joins: Batzy (~Batzy@user/batzy)
[02:53:28] *** Joins: adium (adium@user/adium)
[02:53:28] *** Joins: wgwz (~wgwz@45.55.193.150)
[02:53:28] *** Joins: kouhai (~kouhai@user/kouhai)
[02:53:28] *** Joins: chha (~chhs@wikipedia/Bjelleklang)
[02:53:28] *** Joins: botfather (~botfather@botd.io)
[02:53:28] *** Joins: Xat` (~Xat`@ns300217.ip-91-121-29.eu)
[02:53:28] *** Joins: umimaso (~umimaso@188.166.147.131)
[02:53:28] *** Joins: philipp64|work (~philipp64@174.27.8.12)
[02:53:28] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[02:53:28] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[02:53:28] *** Joins: Henry151 (~bishop@user/henry151)
[02:53:28] *** Joins: Sadale (~Sadale@user/sadale)
[02:53:28] *** Joins: JerryXiao (~JerryXiao@user/jerryxiao)
[02:53:28] *** Joins: the_rat (~ratto@emily.sorcio.org)
[02:53:28] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[02:53:28] *** Joins: zigo (~quassel@shade.infomaniak.ch)
[02:53:28] *** Joins: thib (~thib@wikimedia/Thibaut120094)
[02:53:28] *** Joins: erry (~erry@errietta.me)
[02:53:28] *** Joins: bidouille (~user_name@trois.potager.org)
[02:53:28] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[02:53:28] *** Joins: eagleflo (~aku@eagleflow.fi)
[02:53:28] *** Joins: arza (arza@arza.us)
[02:53:29] *** Joins: vapour (vapour@eris.noname-ev.de)
[02:53:29] *** Joins: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153)
[02:53:29] *** Joins: kstar (~kstar@user/kstar)
[02:53:29] *** Joins: AB49K (~AB49K@user/ab49k)
[02:53:29] *** Joins: BEC001AF[m] (~kreatemor@2001:470:69fc:105::a0f)
[02:53:29] *** Joins: penguinbrian (~penguinbr@2001:470:69fc:105::33d2)
[02:53:29] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[02:53:29] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[02:53:29] *** Joins: bgardner (~bgardner@2001:470:69fc:105::8a8)
[02:53:29] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[02:53:29] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[02:53:29] *** Joins: meatballs (~owentanti@2001:470:69fc:105::633)
[02:53:29] *** Joins: oz4ga (~tim@93.90.4.233)
[02:53:29] *** Joins: DarkaMaul (~dm@2001:bc8:24f6:400::42)
[02:53:29] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[02:53:29] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[02:53:29] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[02:53:29] *** Joins: stevenix (~stevenix@mab.sdf.org)
[02:53:29] *** Joins: Tiago_Paolini (sid172748@id-172748.stonehaven.irccloud.com)
[02:53:29] *** Joins: NoImNotNineVolt (~ninevolt@c-73-248-207-98.hsd1.nj.comcast.net)
[02:53:29] *** Joins: Xaroth (~Xaroth@022-139-128-083.dynamic.caiway.nl)
[02:53:29] *** Joins: lumgwada (~lumgwada@101.181.126.104)
[02:53:29] *** Joins: gossie (~gossie@2a10:3781:328:1:e1d:50cc:c868:ca94)
[02:53:29] *** Joins: zamba (~marius@5.226.162.54)
[02:53:29] *** Joins: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au)
[02:53:29] *** Joins: petemc (~pete@vps-80fad31a.vps.ovh.net)
[02:53:29] *** Joins: blackop (~ocloud@user/blackop)
[02:53:29] *** Joins: meridion (~meridion@punt.hetgrotebos.org)
[02:53:29] *** Joins: pacbard_ (~pacbard@user/pacbard)
[02:53:29] *** Joins: Mathisen (mathisen@about/windows/staff/mathisen)
[02:53:29] *** Joins: yolo (~xxiao@159.89.184.51)
[02:53:29] *** Joins: foo (~foo@user/foo/x-8763512)
[02:53:29] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[02:53:29] *** Joins: ulif_ (~nick@user/ulif)
[02:53:29] *** Joins: fredrikh1 (~fhl@myrsnipa.uio.no)
[02:53:29] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[02:53:29] *** Joins: tudor_ (~tudor@tomka.hu)
[02:53:29] *** Joins: jpaa_ (~jpaa@87.118.126.66)
[02:53:29] *** Joins: dodo (~dodo@user/dodo)
[02:53:29] *** Joins: fxrs_ (~fxrs@192.227.212.130)
[02:53:29] *** Joins: dftrace (~dftrace@hopper.lethalbit.com)
[02:53:29] *** Joins: Quietus (quasselcor@larch.ratcliffefamily.uk)
[02:53:29] *** Joins: flay (~flay@user/flay)
[02:53:29] *** Joins: ihaveamac (~ihaveamac@ihaveahax.net)
[02:53:29] *** Joins: greyblue9 (uid500829@id-500829.charlton.irccloud.com)
[02:53:29] *** Joins: ario_ (~ario@159.65.220.102)
[02:53:29] *** Joins: introom (introom@2600:3c01::f03c:92ff:fe95:9f0f)
[02:53:29] *** Joins: syntaxman (~wade@li227-215.members.linode.com)
[02:53:29] *** Joins: MrC (Ben@mrbenc.net)
[02:53:29] *** Joins: bertiger (~bertiger@user/bertiger)
[02:53:29] *** Joins: mboehn (mathias@hh1.nuxis.org)
[02:53:29] *** Joins: cole (~cole@user/cole)
[02:53:29] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[02:53:29] *** Joins: pjlsergeant (sid143467@id-143467.stonehaven.irccloud.com)
[02:53:30] <lmmx> is IRC ok... huge netsplit :D
[02:53:30] <lmmx> habnabit I'm trying to discern the names of Python's standard library modules!
[02:53:30] *** Quits: eliasy[m] (~eliasymat@2001:470:69fc:105::3ff3) (Ping timeout: 268 seconds)
[02:53:30] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (Ping timeout: 268 seconds)
[02:53:30] *** Quits: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com) (Remote host closed the connection)
[02:53:30] *** Quits: liam (sid7517@brockwell.irccloud.com) (Ping timeout: 252 seconds)
[02:53:30] *** Quits: orbatos[m] (~orbatos@2001:470:69fc:105::3450) (Ping timeout: 252 seconds)
[02:53:30] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (Ping timeout: 240 seconds)
[02:53:30] *** Quits: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27) (Ping timeout: 240 seconds)
[02:53:36] *** Joins: baloona (~baloona@mail.baloona.de)
[02:53:36] *** Joins: davve (davve@bsd.douchedata.com)
[02:53:36] *** Joins: dfg (~dfg@user/dfg)
[02:53:36] *** Joins: tecdroid (~tecdroid@2a04:d480:0:1::3)
[02:53:36] *** Joins: wlsn (~wlsn@79-75-247-141.dynamic.dsl.as9105.com)
[02:53:36] *** Joins: sunyour (~sunyour@129.226.182.99)
[02:53:36] *** Joins: fabs (~fabs@samba.ethz.ch)
[02:53:36] *** Joins: nicksloan (sid195124@user/nicksloan)
[02:53:36] *** Joins: shan (shan@user/shan)
[02:53:36] *** Joins: nawcom (~nawcom@bulldadachat.com)
[02:53:36] *** Joins: Koffa (jkohvakk@user/koffa)
[02:53:36] *** Joins: crazysim (sid86009@id-86009.stonehaven.irccloud.com)
[02:53:36] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[02:53:36] *** Joins: greyltc (~greyltc@user/greyltc)
[02:53:36] *** Joins: nicxz (~nicxz@user/nicxz)
[02:53:36] *** Joins: edr (~edr@user/edr)
[02:53:36] *** Joins: Repiphany (~Repiphany@user/repiphany)
[02:53:36] *** Joins: johnny_ (sid481967@id-481967.stonehaven.irccloud.com)
[02:53:36] *** Joins: LordKalma (~LordKalma@2a01:4f9:c010:78d8::1)
[02:53:36] *** Joins: catdog (~quassel@2001:470:50f7:cdcd::cd1)
[02:53:36] *** Joins: hays (rootvegeta@fsf/member/hays)
[02:53:36] *** Joins: OverCoder (~OverCoder@user/overcoder)
[02:53:36] *** Joins: corwin (someone@fosshost/director/corwin)
[02:53:36] *** Joins: jocke-l (jocke-l@a.x0.is)
[02:53:36] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[02:53:36] *** Joins: pavelow (~pavelow@opticalchimp.com)
[02:53:36] *** Joins: Reinhilde (~Ellenor@vice-chairwoman.of.freenode.management)
[02:53:36] *** Joins: dfch (~dfch@user/dfch)
[02:53:36] *** Joins: nomn (nomn@user/nomn)
[02:53:36] *** Joins: crs (~f@user/crs)
[02:53:36] *** Joins: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2)
[02:53:36] *** Joins: rockSTONE (sid315855@id-315855.brockwell.irccloud.com)
[02:53:36] *** Joins: avu (~jan@user/avu)
[02:53:36] *** Joins: jjhoo (jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi)
[02:53:36] *** Joins: phx (~phoemix@marvin.harmless.hu)
[02:53:36] *** Joins: themill (~stuart@debian/stuart)
[02:53:36] *** Joins: extmind (~lars@quasar.extmind.de)
[02:53:36] *** Joins: beanzilla (beanzilla@user/beanzilla)
[02:53:36] *** Joins: Dan39 (~dan@user/dan39)
[02:53:36] *** Joins: Helle (~helle@80-100-16-232.ip.xs4all.nl)
[02:53:36] *** Joins: ludo (ludo@user/ludo)
[02:53:36] *** Joins: tailHead69 (~daruncio@2a04:52c0:101:314::5c48)
[02:53:36] *** Joins: Chex (~Chex@user/chex)
[02:53:36] *** Joins: mkoskar (~mkoskar@user/mkoskar)
[02:53:36] *** Joins: mmercer_ (daemoen@2605:d100:0:2d:5054:ff:fef0:3953)
[02:53:36] *** Joins: debnet (sid330295@python/afpy/debnet)
[02:53:36] *** Joins: vlt (~dm@157.230.21.14)
[02:53:36] *** Joins: bronsen (~bronsen@2a04:d480:0:1::3)
[02:53:36] *** Joins: confluence (~quassel@2a01:4f8:c17:3ca::2)
[02:53:36] *** Joins: dynos01 (~dynos01@2600:3c01:e000:36a::8400)
[02:53:36] *** Joins: function1 (~shawoop@199.115.117.198)
[02:53:36] *** Joins: uhu (~uhu@static.101.168.216.95.clients.your-server.de)
[02:53:36] *** Joins: k0fein (~esmeralda@user/k0fein)
[02:53:36] *** Joins: tpr (~tpr@user/tpr)
[02:53:36] *** Joins: mindlesstux (sid18072@id-18072.tooting.irccloud.com)
[02:53:38] *** Joins: jiffy (elijah@has.a.fluffy.sh33p.org)
[02:53:38] *** Joins: michele (~eraser@user/michele)
[02:53:38] *** Joins: rsheftel5 (~rsheftel@pool-108-53-162-225.nwrknj.fios.verizon.net)
[02:53:38] *** Joins: Fossil (~Fossil@95.85.23.165)
[02:53:38] *** Joins: Biganon (~biganon@mx.pive.ch)
[02:53:38] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[02:53:38] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[02:53:38] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[02:53:38] *** Joins: randall (~randall@user/randall)
[02:53:38] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[02:53:38] *** Joins: paperManu (~paperManu@138.197.128.151)
[02:53:38] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[02:53:38] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[02:53:38] *** Joins: jim (~jim@about/linux/staff/jim)
[02:53:38] *** Joins: kiwiroy (sid374179@id-374179.tooting.irccloud.com)
[02:53:38] *** Joins: Evolver (sid32215@user/evolver)
[02:53:38] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[02:53:38] *** Joins: Jochem (jochem@oosterveen.net)
[02:53:38] *** Joins: Falcon| (andreas@user/falcon/x-0540249)
[02:53:38] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[02:53:38] *** Joins: jesster1234 (~jessica@static.172.234.251.148.clients.your-server.de)
[02:53:38] *** Joins: andi_ (~andi@user/andi/x-3467420)
[02:53:38] *** Joins: jposer (sid132110@id-132110.highgate.irccloud.com)
[02:53:38] *** Joins: dTal (quassel@dragonbox/wizzard/dtal)
[02:53:38] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[02:53:38] *** Joins: jamesmartinez (~keinbock@37.44.247.165)
[02:53:38] *** Joins: thinkofher (uid503725@user/thinkofher)
[02:53:38] *** Joins: CrtxReavr (crtxreavr@shodan.trioptimum.com)
[02:53:38] *** Joins: yemel (~yemel@user/yemel)
[02:53:38] *** Joins: Xavierdarkness (~xavierdar@user/xavierdarkness)
[02:53:38] *** Joins: gabe (~gabe@user/gabe)
[02:53:38] *** Joins: mikebald_ (~mikebald@159.203.185.106)
[02:53:38] *** Joins: Ox4 (~int@0x4.cx)
[02:53:38] *** Joins: llua (~llua@zsh/developer/llua)
[02:53:38] *** Joins: pyfisch (thelounge@user/pyfisch)
[02:53:38] *** Joins: Helenah (~helenah@user/helenah)
[02:53:38] *** Joins: rud01f (rud0lf@user/rud0lf)
[02:53:38] *** Joins: Yhg1s (sid387777@python/psf/thomas)
[02:53:38] *** Joins: circuitbone (sid355934@user/circuitbone)
[02:53:38] *** Joins: gjm (sid142836@apache/committer/gjm)
[02:53:38] *** Joins: EWDurbin (sid38710@id-38710.tinside.irccloud.com)
[02:53:38] *** Joins: bboles (~bboles@64.94.212.195)
[02:53:38] *** Joins: bjb (~bjb@sourcerer.ca)
[02:53:38] *** Joins: abadger1999 (sid348818@ansible/owner/abadger1999)
[02:53:38] *** Joins: learath (~learath@static-71-246-219-35.washdc.fios.verizon.net)
[02:53:38] *** Joins: hedy (hedy@tilde.team/user/hedy)
[02:53:38] *** Joins: dale (dale@user/dale)
[02:53:38] *** Joins: acnebs (~acnebs@2604:a880:400:d0::1a64:c001)
[02:53:38] *** Joins: hexology (~hexology@user/hexology)
[02:53:38] *** Joins: WayToDoor (~WayToDoor@user/waytodoor)
[02:53:38] *** Joins: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com)
[02:53:38] *** Joins: Teacup (~teacup@user/teacup)
[02:53:38] *** Joins: Knyght (sid365271@id-365271.brockwell.irccloud.com)
[02:53:38] *** Joins: Xeago (~Xeago@user/xeago)
[02:53:38] *** Joins: r0bby (r0bby@user/r0bby)
[02:53:38] *** Joins: ironfroggy (sid495156@id-495156.tooting.irccloud.com)
[02:53:38] *** Joins: urth (~urth@geertswei.nl)
[02:53:38] *** Joins: lericson (~toxik@user/lericson)
[02:53:38] *** Joins: Soni (~quassel@autistic.space)
[02:53:38] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[02:53:38] *** Joins: tnez (~el@user/tnez)
[02:53:38] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
[02:53:38] *** Joins: lgrn (~leif@user/lgrn)
[02:53:38] *** Joins: dthpulse (~quassel@podciarou.sk)
[02:53:38] *** Joins: marienz (~marienz@libera/staff/marienz)
[02:53:38] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[02:53:38] *** Joins: decartes (uid240036@id-240036.brockwell.irccloud.com)
[02:53:38] *** Joins: Jimmy2027 (~hendrik@2001:1620:2018:38:dde3:1b0f:dc57:eb0f)
[02:53:38] *** Joins: koopman (sid466269@id-466269.charlton.irccloud.com)
[02:53:38] *** Joins: Mindi (~Mindi@mindinet.org)
[02:53:38] *** Joins: chrisawi (~chrisw@user/chrisawi)
[02:53:38] *** Joins: theo (~theo@user/theo)
[02:53:38] *** Joins: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d)
[02:53:38] *** Joins: DCTWD (~dc@uz.utmappro.com)
[02:53:38] *** Joins: Ennea (~Ennea@user/ennea)
[02:53:38] *** Joins: auri (~admin@static.46.108.40.188.clients.your-server.de)
[02:53:38] *** Joins: agronholm (sid403424@id-403424.brockwell.irccloud.com)
[02:53:38] *** Joins: TallonRain (sid214799@user/tallonrain)
[02:53:38] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[02:53:38] *** Joins: SallyAhaj (~sallyahaj@user/sallyahaj)
[02:53:48] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Max SendQ exceeded)
[02:53:48] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Max SendQ exceeded)
[02:53:50] *** Quits: Reinhilde (~Ellenor@vice-chairwoman.of.freenode.management) (Max SendQ exceeded)
[02:53:51] *** Quits: shailangsa (~shailangs@host86-145-14-23.range86-145.btcentralplus.com) (Max SendQ exceeded)
[02:53:54] *** Quits: TechSmurf (~tech@user/techsmurf) (Ping timeout: 240 seconds)
[02:54:03] *** Quits: BUSY (~BUSY@user/busy) (Max SendQ exceeded)
[02:54:03] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Max SendQ exceeded)
[02:54:03] *** Quits: Quack (~Quack@185.21.216.169) (Max SendQ exceeded)
[02:54:03] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Max SendQ exceeded)
[02:54:19] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Max SendQ exceeded)
[02:54:19] *** Quits: TheRAt (~TheRAt@user/therat) (Max SendQ exceeded)
[02:54:19] *** Quits: JanC (~janc@user/janc) (Max SendQ exceeded)
[02:54:21] *** Joins: cpach (~cpach@h-158-174-172-12.A950.priv.bahnhof.se)
[02:54:21] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[02:54:21] *** Joins: dagb (~dagb@241.92-220-211.customer.lyse.net)
[02:54:21] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[02:54:21] *** Joins: librenaut (~librenaut@user/librenaut)
[02:54:21] *** Joins: andrewSC (~andrewSC@95.179.141.168)
[02:54:21] *** Joins: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com)
[02:54:21] *** Joins: sale (~sale@ypocit.initech.link)
[02:54:21] *** Joins: Duckle (~Duckle@user/duckle)
[02:54:21] *** Joins: koolazer (~koo@user/koolazer)
[02:54:21] *** Joins: purplex (~purplex@user/purplex)
[02:54:24] *** Joins: MikachuPi (~Mikachu@2001:bc8:47a8:559::1)
[02:54:24] *** Joins: ormiret (sid314108@id-314108.tooting.irccloud.com)
[02:54:24] *** Joins: eichin (sid27120@id-27120.tinside.irccloud.com)
[02:54:24] *** Joins: amosbird (~amosbird@13.75.119.182)
[02:54:24] *** Joins: MJ94 (mj94@user/mj94)
[02:54:24] *** Joins: dartmouthed (~blackunsp@li761-35.members.linode.com)
[02:54:24] *** Joins: ndim (~hun@moooo.n-dimensional.de)
[02:54:24] *** Joins: tumbleweed (~stefanor@ubuntu/member/tumbleweed)
[02:54:24] *** Joins: Lartza (lartza@user/lartza)
[02:54:24] *** Joins: rud0lf (rud0lf@user/rud0lf)
[02:54:24] *** Joins: _janus (~janus@blotter.ld-linux.so)
[02:54:24] *** Joins: bwe (~bwe@2a01:4f8:1c1c:4878::2)
[02:54:24] *** Joins: orkim (~orkim@user/orkim)
[02:54:24] *** Joins: tazle (tazle@kapsi.fi)
[02:54:24] *** Joins: gbristol (gbristol@hermes.gbristol.net)
[02:54:24] *** Joins: mcint (mcint@user/mcint)
[02:54:24] *** Joins: starz (starz@ns378512.ip-37-59-36.eu)
[02:54:31] <jinsun> lmmx: https://bpa.st/GDRA
[02:54:33] *** Quits: orkim (~orkim@user/orkim) (Max SendQ exceeded)
[02:54:35] <habnabit_> lmmx, those are listed on docs.python.org
[02:54:37] *** Joins: pizdets (~pizdets@183.182.114.175)
[02:54:37] *** Joins: Tempesta (Tempesta@user/tempesta)
[02:54:48] <graingert> NoImNotNineVolt: https://github.com/urllib3/urllib3/blob/89ca490bfc15b7b4762676b5b51bf57e8912d80f/src/urllib3/util/connection.py#L63
[02:54:52] *** Quits: koolazer (~koo@user/koolazer) (Max SendQ exceeded)
[02:54:58] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Remote host closed the connection)
[02:55:03] *** Joins: jdmark (~jdmark@67.8.137.130)
[02:55:03] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:6518:f773:33d3:fb7d)
[02:55:03] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[02:55:03] *** Joins: lidless (~lidless@user/jabberwock)
[02:55:03] *** Joins: acresearch (~acresearc@user/acresearch)
[02:55:03] *** Joins: b2xiao (~b2xiao@wikipedia/nneonneo)
[02:55:03] *** Joins: Celeo (~Celeo@user/celeo)
[02:55:03] *** Joins: dibas (~dibas@user/dibas)
[02:55:03] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[02:55:03] *** Joins: Samian (~textual@2620:10d:c091:480::1:8d08)
[02:55:03] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[02:55:03] *** Joins: r3m (~launch@user/r3m)
[02:55:03] *** Joins: GvP (~GvP@ip70-162-85-176.ph.ph.cox.net)
[02:55:03] *** Joins: ulu (~ulu@user/ulu)
[02:55:03] *** Joins: pycode (~pycode@2001:b07:5d28:551:55a8:758a:ed3c:7d94)
[02:55:03] *** Joins: CrunchyChewie (~CrunchyCh@user/crunchychewie)
[02:55:03] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[02:55:03] *** Joins: currybullen (~curry@h-81-170-128-138.A258.priv.bahnhof.se)
[02:55:03] *** Joins: thiras (~thiras@user/thiras)
[02:55:03] *** Joins: Masklin (~joel@93.182.183.85)
[02:55:03] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[02:55:03] *** Joins: riposte (~finalripo@2403-5800-3200-5c02--300.ip6.aussiebb.net)
[02:55:03] *** Joins: tbcr (~tbcr@user/tbcr)
[02:55:03] *** Joins: mrkz_c (uid503554@user/mrkz-c/x-7247691)
[02:55:10] <graingert> NoImNotNineVolt: seems to try one at a time in the order the come out of socket.getaddrinfo
[02:55:26] <graingert> which for a dozen runs against bbc.co.uk came back in the same order
[02:55:47] <lmmx> habnabit yeahhh I guess so, getting it from the system itself felt right-er to me than web scraping though... am I wrong ?
[02:56:14] <habnabit_> lmmx, scraping? you want something programmatic?
[02:56:22] <lmmx> thanks jinsun :) that's helpful!
[02:56:42] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 250 seconds)
[02:57:06] *** Quits: cyberpear (uid364019@fedora/cyberpear) (Ping timeout: 268 seconds)
[02:57:06] *** Quits: Tips|Cloud (sid62231@id-62231.charlton.irccloud.com) (Ping timeout: 268 seconds)
[02:57:06] *** Quits: itok (sid418430@id-418430.charlton.irccloud.com) (Ping timeout: 268 seconds)
[02:57:06] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 268 seconds)
[02:57:15] <lmmx> habnabit I mean I got most of the way by just a `sys` import or 2, I didn't really think much about parsing it from the docs themselves!
[02:57:25] <habnabit_> lmmx, yes, but why 'parse' anything?
[02:57:53] *** Quits: mindlesstux (sid18072@id-18072.tooting.irccloud.com) (Ping timeout: 244 seconds)
[02:58:01] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Ping timeout: 250 seconds)
[02:58:03] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (Ping timeout: 272 seconds)
[02:58:03] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Ping timeout: 272 seconds)
[02:58:03] *** Joins: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f)
[02:58:13] <lmmx> habnabit I don't get the questioning/"air quoting", yes when you take a web page and extract module names it is "scraping" or "parsing"
[02:58:25] *** Quits: meatballs (~owentanti@2001:470:69fc:105::633) (Ping timeout: 272 seconds)
[02:58:25] *** Quits: BEC001AF[m] (~kreatemor@2001:470:69fc:105::a0f) (Ping timeout: 272 seconds)
[02:58:25] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Ping timeout: 272 seconds)
[02:58:25] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (Ping timeout: 272 seconds)
[02:58:25] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Ping timeout: 272 seconds)
[02:58:25] *** Quits: bgardner (~bgardner@2001:470:69fc:105::8a8) (Ping timeout: 272 seconds)
[02:58:26] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Ping timeout: 272 seconds)
[02:58:34] <habnabit_> lmmx, who needs this list? you, or the computer?
[02:58:46] <lmmx> habnabit "the user" so more me
[02:58:56] <lmmx> I'm trying to make a tool to aid with env setups
[02:58:58] <habnabit_> lmmx, ok. what's wrong with reading docs.python.org then?
[02:59:02] *** Quits: ncb (~ncb@user/ncb) (Remote host closed the connection)
[02:59:23] <lmmx> habnabit because I want to do it at runtime and for multiple versions of Python
[02:59:39] *** Quits: xsperry (~as@user/xsperry) ()
[02:59:49] <lmmx> and I just presumed stdlib may differ between Python versions (like didn't some calendar thing get retired...) IDK
[03:01:31] *** Quits: ultralisk (~ultralisk@2a00:23c6:4b0e:e900:75db:cb84:2f7c:da2) ()
[03:02:47] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 265 seconds)
[03:02:47] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[03:02:48] *** Joins: Ellenor (ellenor@2001:19f0:8001:279::4000:12)
[03:02:53] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[03:02:54] *** Parts: nomn (nomn@user/nomn) (WeeChat 3.1)
[03:02:58] *** Joins: JanC (~janc@user/janc)
[03:03:02] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Client Quit)
[03:03:15] *** Joins: Roey (~Roey@user/Roey)
[03:03:23] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[03:03:26] *** Joins: TheRAt (~TheRAt@user/therat)
[03:03:27] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[03:03:54] *** Joins: olasd (~olasd@softwareheritage/olasd)
[03:03:57] *** Joins: Neoon (~Neoon@2607:5300:60:23a5::1111)
[03:04:38] *** Joins: nik0 (~niko@libera/staff/niko)
[03:05:12] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[03:05:54] *** nik0 is now known as niko
[03:06:13] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Ping timeout: 256 seconds)
[03:06:20] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Read error: Connection reset by peer)
[03:06:42] *** Parts: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it) ()
[03:06:50] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (Quit: See you on the flip side.)
[03:07:06] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[03:07:30] *** Joins: mickey7 (~user@user/mickey)
[03:07:38] *** Quits: catdog (~quassel@2001:470:50f7:cdcd::cd1) (Quit: No Ping reply in 120 seconds.)
[03:07:42] *** Quits: Xaroth (~Xaroth@022-139-128-083.dynamic.caiway.nl) (Quit: Ping timeout (120 seconds))
[03:08:00] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[03:08:12] *** Quits: jamea (~jamea77@10.189-202-213.bestelclientes.com.mx) (Ping timeout: 252 seconds)
[03:08:15] *** Quits: oz4ga (~tim@93.90.4.233) (Quit: ZNC 1.8.2 - https://znc.in)
[03:08:23] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 244 seconds)
[03:08:42] *** Joins: regeya (~shane@50.45.24.247)
[03:08:54] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[03:09:14] *** Joins: xy (~icy@user/icy)
[03:09:25] *** Quits: mickey (~user@user/mickey) (Ping timeout: 244 seconds)
[03:09:26] *** mickey7 is now known as mickey
[03:09:55] *** Quits: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr) (Quit: Client closed)
[03:09:58] *** Quits: icy (~icy@user/icy) (Ping timeout: 268 seconds)
[03:10:18] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[03:10:30] *** Joins: Xaroth (~Xaroth@022-139-128-083.dynamic.caiway.nl)
[03:10:47] *** Joins: catdog (~quassel@birdperson.tuxzone.org)
[03:10:52] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[03:10:52] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[03:11:07] *** Joins: mickey (~user@user/mickey)
[03:11:13] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[03:11:23] *** Quits: fofoni (~fofoni@user/fofoni) (Quit: Leaving)
[03:11:45] *** Ellenor is now known as Reinhilde
[03:12:05] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[03:12:28] *** Joins: michagogo (sid14316@user/michagogo)
[03:12:36] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:12:38] *** Quits: regeya (~shane@50.45.24.247) (Client Quit)
[03:13:19] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:13:31] *** Joins: jess (~jess@libera/staff/jess)
[03:13:45] <jess> what's a really light weight asyncio http client library
[03:14:04] <Roey> o/ jess!!
[03:14:09] *** Joins: litharge (litharge@libera/bot/litharge)
[03:14:14] *** ChanServ sets mode: +o litharge
[03:14:19] <habnabit_> jess, i've only used httpx
[03:14:42] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 240 seconds)
[03:14:46] *** Roey is now known as {-
[03:16:42] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[03:16:46] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[03:17:11] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[03:17:12] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[03:17:49] *** Quits: ulu (~ulu@user/ulu) (Read error: Connection reset by peer)
[03:18:08] *** Quits: redgloboli (~redglobol@user/redgloboli) (Ping timeout: 258 seconds)
[03:19:04] *** Joins: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net)
[03:19:04] *** Joins: weibullguy (~weibullgu@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54)
[03:19:13] *** Joins: somlis (~somlis@user/somlis)
[03:19:14] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:20:04] *** Joins: JavaBean (~JavaBean@user/javabean)
[03:21:00] *** Joins: TheFreim (~user@50-81-18-58.client.mchsi.com)
[03:21:23] <OMGOMG> [-: hi
[03:21:24] *** Quits: TheFreim (~user@50-81-18-58.client.mchsi.com) (Read error: Connection reset by peer)
[03:21:40] <{-> OMGOMG: well hello there
[03:21:43] *** Joins: justache (~justache@user/justache)
[03:22:05] *** Quits: x_kuru (~xkuru@user/xkuru) (Quit: Unvirtualizing)
[03:22:17] *** Joins: Lando-SpacePimp (~LandoCal@user/lando-spacepimp)
[03:22:34] *** Joins: xkuru (~xkuru@user/xkuru)
[03:23:02] *** Parts: jess (~jess@libera/staff/jess) ()
[03:23:49] *** Joins: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[03:24:24] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[03:24:32] *** Joins: humanBird (~humanBird@2603-8001-7003-5966-85fb-276a-8a04-c03b.res6.spectrum.com)
[03:24:32] *** Joins: salpynx (~salpynx@121.73.84.248)
[03:25:42] *** Joins: Blankspace (~abcd@user/blankspace)
[03:26:48] *** {- is now known as GasmonicT0nic
[03:28:31] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[03:30:57] <acresearch> people how can i install python-env in arch?   pacman -S python-env ---> not found
[03:31:11] <NeilRG> What does [0x1for a in 'abc'] do?
[03:31:28] <grym> NeilRG: eldricdh things
[03:31:31] <grym> eldrich*
[03:31:33] <NeilRG> grym, lol
[03:31:40] <NeilRG> seems to give [31]
[03:31:42] <grym> yes
[03:31:44] <NeilRG> haha
[03:31:46] <NeilRG> love it
[03:31:57] <grym> https://twitter.com/nedbat/status/1382027078816653319
[03:32:10] <NeilRG> hahaha
[03:32:45] <Yhg1s> NeilRG: '0x1for' is parsed as '0x1f or'
[03:33:09] <NeilRG> Yhg1s, yes, I know, just playing
[03:33:18] <NeilRG> saw it in the release notes for 3.10
[03:33:28] *** Quits: xkuru (~xkuru@user/xkuru) (Quit: Unvirtualizing)
[03:33:37] <Yhg1s> acresearch: what is python-env supposed to be?
[03:33:47] *** Joins: xkuru (~xkuru@user/xkuru)
[03:34:33] *** Quits: cdown (~cdown@163.114.131.1) (Remote host closed the connection)
[03:34:47] *** Joins: cdown (~cdown@163.114.131.1)
[03:35:46] *** Joins: fofoni (~fofoni@user/fofoni)
[03:36:45] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[03:37:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:37:25] *** Joins: Wulf4 (~Wulf@user/wulf)
[03:37:26] *** Joins: tims (~tims@193-82-247-42.tpgi.com.au)
[03:37:36] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Quit: Turning off a portion of this simulation.)
[03:37:54] <NeilRG> wow has anyone seen the release notes for 3.10?  The new syntax errors are awesome
[03:37:58] <NeilRG> https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst
[03:38:39] <habnabit_> yeah, finally
[03:38:55] <habnabit_> python had the worst parser short of sh for decades
[03:39:29] *** Parts: acresearch (~acresearc@user/acresearch) (WeeChat 2.8)
[03:40:28] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 250 seconds)
[03:40:29] *** Wulf4 is now known as Wulf
[03:41:03] <NeilRG> habnabit_, I don't know how it compares to others, but it's going to be such a joy now
[03:41:30] <NeilRG> Some people think just because they're Python experts that these pain points don't matter
[03:42:18] <habnabit_> nah it was honestly embarrassing to say that python had good UX or was good for beginners with its syntax errors
[03:42:29] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:44:00] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[03:45:17] *** Quits: b2xiao (~b2xiao@wikipedia/nneonneo) (Remote host closed the connection)
[03:45:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[03:45:42] *** Joins: b2xiao (~b2xiao@wikipedia/nneonneo)
[03:45:48] *** Quits: lemmoner (~lemmoner@static-119-144-229-77.ipcom.comunitel.net) (Ping timeout: 265 seconds)
[03:46:32] <nisstyre> is guido ever going to ship the PEG parser
[03:47:35] *** Quits: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net) (Quit: Client closed)
[03:47:54] <Yhg1s> nisstyre: the thing that he and others shipped in 3.9, you mean?
[03:48:08] <NeilRG> does structural pattern matching going to work with dataclasses?
[03:48:11] <NeilRG> habnabit_, true
[03:48:16] <Yhg1s> NeilRG: sure.
[03:48:23] <nisstyre> Yhg1s: oh it was? nice
[03:48:31] <habnabit_> NeilRG, it's intended to work with any class
[03:48:36] <habnabit_> NeilRG, anything with attributes
[03:48:40] <nisstyre> I didn't know that honestly
[03:49:11] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:bbfc:1ba1:ffb3:62a) (Remote host closed the connection)
[03:49:11] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 258 seconds)
[03:49:42] <NeilRG> so it uses the annotations on the class to do the pattern matching?
[03:49:49] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[03:50:08] <Yhg1s> NeilRG: no, it uses attributes.
[03:50:19] <habnabit_> NeilRG, no? pattern matching desugars to simple attribute access
[03:50:29] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[03:50:32] <NeilRG> Yhg1s, got it
[03:50:37] <habnabit_> NeilRG, if a.x == 1 and a.y == 2:
[03:50:45] <NeilRG> ok, that makes sense
[03:52:08] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[03:54:15] <NeilRG> are you all going to start using zip(strict=True) in new code?
[03:54:20] *** Joins: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net)
[03:55:00] <ammar2> NeilRG: PEP 657 may also interest you if you're excited about the syntax errors :)
[03:56:15] <NeilRG> ammar2, newat!
[03:57:58] *** Joins: bigRoo (~user@131.236.54.84)
[04:00:21] *** Joins: ssbr_ (~ssbr@2620:15c:10f:203:222b:48fb:ba53:5eb8)
[04:00:22] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3-dev)
[04:03:39] *** Joins: xsperry (~as@user/xsperry)
[04:05:18] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[04:07:20] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[04:07:40] *** Quits: hexa- (~hexa-@juno.lossy.network) (Quit: WeeChat 3.2)
[04:07:57] *** Joins: hexa- (~hexa-@juno.lossy.network)
[04:10:06] *** Joins: tvrtko (~tvrtko@93-136-56-13.adsl.net.t-com.hr)
[04:10:45] *** Joins: dtg01100 (~dtg01100@199.21.141.37)
[04:11:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[04:11:57] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 256 seconds)
[04:12:58] *** Quits: candy (~tvrtko@93-136-28-15.adsl.net.t-com.hr) (Ping timeout: 250 seconds)
[04:14:39] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[04:17:03] *** Quits: dtg01100 (~dtg01100@199.21.141.37) (Quit: dtg01100)
[04:17:06] <matthewcroughan> Heyo.
[04:17:13] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[04:17:16] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:17:26] <matthewcroughan> How does `.read` get put in as a method of a lot of things?
[04:17:31] <matthewcroughan> Is it unique to a certain class or type?
[04:17:37] *** Quits: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[04:17:51] <ssbr_> matthewcroughan: every type that wants to "look like a file" has a read method.
[04:17:56] *** Mapley is now known as Seattle
[04:18:00] *** Quits: drew (~drew@user/drew) (Quit: Quit)
[04:18:06] *** Maple_ is now known as awoo
[04:19:01] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[04:19:19] <matthewcroughan> ssbr_: https://gist.github.com/MatthewCroughan/bf04d707f23570f35b1fffe3d881e758
[04:19:23] <Yhg1s> also for things that aren't supposed to be file-like, it may still make sense to have a 'read' method.
[04:19:27] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:19:27] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[04:19:31] <matthewcroughan> The micropython example in my gist *does not work*
[04:19:43] <matthewcroughan> response in the micropython example does not have a method read, wondering what the difference is
[04:19:52] <ssbr_> Yhg1s: a particularly salient point here, oops.
[04:20:07] <Yhg1s> matthewcroughan: well, the different modules might be a hint.
[04:20:19] <matthewcroughan> Sure, but if they're supposed to work the same, what is it that I'm looking for?
[04:20:23] <Yhg1s> matthewcroughan: oh, and the different *functino*.
[04:20:25] <matthewcroughan> what types have .read methods?
[04:20:28] <Yhg1s> matthewcroughan: json.load is not json.loads.
[04:20:40] <Yhg1s> matthewcroughan: perhaps you should include the actual traceback you get.
[04:20:51] <ssbr_> matthewcroughan: the urequests example uses a .text attribute, not ".read()": https://makeblock-micropython-api.readthedocs.io/en/latest/public_library/Third-party-libraries/urequests.html
[04:21:15] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[04:21:19] <matthewcroughan> Yhg1s: I would if it wasn't so annoying
[04:21:25] <matthewcroughan> the esp runs out of memory haha
[04:21:33] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:21:39] <Yhg1s> okay, that suggests the response is too big to load into memory.
[04:21:39] <matthewcroughan> garbage collector isn't so smart here for some reason
[04:21:40] <ssbr_> matthewcroughan: my guess is that urequests tries to be like the requests module, not like urllib.request
[04:21:49] <matthewcroughan> Yhg1s: nah, it works a percentage of the time
[04:21:54] <nomic> can someone tell me how i create this
[04:21:54] <nomic> https://pastebin.com/e8gdtQAa
[04:21:57] *** Joins: pnoud (~pnoud@user/pnoud)
[04:22:24] <ssbr_> nomic: call numpy.array() with a really big list of lists of floats!
[04:22:49] <matthewcroughan> I can store but not print the response haha
[04:22:55] <matthewcroughan> esp32 doesn't have enough memory to print it
[04:22:56] <ssbr_> cheat: you can also transpose numpy.array([[x, y, ...]]) instead of doing numpy.array([[x], [y], ...])
[04:23:03] *** Joins: googol (~matthew@192.81.130.185)
[04:23:09] <ssbr_> not really sure why it's so annoying to deal with column vectors, but hey
[04:23:20] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[04:24:27] <matthewcroughan> running the function more than once results in ENOMEM I should mention Yhg1s
[04:25:47] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:26:42] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[04:27:33] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[04:27:44] <SnoopJ> MicroPython, probably?
[04:28:00] <Yhg1s> matthewcroughan: I'm not sure how that relates to the things I pointed out, sorry.
[04:30:10] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:31:01] <matthewcroughan> So, I ran type on response, and the type is <class 'Response'>
[04:31:15] <Yhg1s> matthewcroughan: this is not surprising.
[04:31:29] <Yhg1s> matthewcroughan: did you read the bit I said about json.load not being json.loads?
[04:31:30] <matthewcroughan> how should I be loading this into the json parser though?
[04:31:36] <matthewcroughan> yes
[04:31:56] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[04:31:57] <matthewcroughan> ah..
[04:32:10] *** Quits: ponadm (pony@gateway/vpn/protonvpn/ponadm) (Ping timeout: 252 seconds)
[04:32:23] *** Joins: twobitsprite (~twobitspr@107.13.51.62)
[04:32:30] <Yhg1s> matthewcroughan: even if response.read() works, you would be passing it to json.load(), which expects a file-like object and thus will try to call its read method.
[04:32:32] <SnoopJ> `ujson.loads(response.read())` should be fine there I think? (i.e. loads() *instead* of load())
[04:32:35] *** GasmonicT0nic is now known as Roey
[04:32:37] *** Joins: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net)
[04:32:43] <nomic> i can't make that array
[04:32:49] <nomic> someone tell me how to make that array
[04:32:51] <nomic> please
[04:33:15] <Yhg1s> nomic: make it from what?
[04:33:32] <SnoopJ> there doesn't appear to be any special pattern to that array
[04:33:36] <matthewcroughan> Unsure what OSError: -202 means
[04:33:43] <matthewcroughan> can't find that code on google
[04:33:45] <nomic> its for mnist
[04:33:50] <Yhg1s> matthewcroughan: without the traceback it's impossible to say.
[04:33:54] <nomic> 784 = 24x24
[04:34:03] <Yhg1s> nomic: so what do you want to create it from?
[04:34:22] <matthewcroughan> Yhg1s: https://dpaste.com/EEQMQHMBD
[04:34:27] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:35:11] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 256 seconds)
[04:35:31] <matthewcroughan> May very well be that it's working now, but too heavy on memory
[04:35:45] *** Quits: pycode (~pycode@2001:b07:5d28:551:55a8:758a:ed3c:7d94) (Ping timeout: 256 seconds)
[04:36:13] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[04:36:25] <Yhg1s> matthewcroughan: and what is line 55 in your urequests.py?
[04:36:41] <matthewcroughan> Yhg1s: I'm not defining that, that's definde by micropython's standard library
[04:36:51] <Yhg1s> matthewcroughan: yes. What is line 55 in micropython's standard library?
[04:37:19] <matthewcroughan> looking
[04:37:28] *** Quits: codl (~codl@user/codl) (Read error: Connection reset by peer)
[04:37:35] *** Joins: venmx (~bertie@82-132-233-160.dab.02.net)
[04:37:46] <SnoopJ> I don't think urequests is *part* of their stdlib, but in the tip of the project branch it's a socket recv() loop: https://github.com/lucien2k/wipy-urllib/blob/master/urequests.py#L55
[04:37:58] *** Joins: codl (~codl@user/codl)
[04:38:17] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[04:38:40] <matthewcroughan> Ah hold on..
[04:38:40] <matthewcroughan> https://pypi.org/project/micropython-urequests/
[04:38:49] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:38:54] <matthewcroughan> apparently I'm supposed to have urllib.urequest, but I do not hmmm
[04:39:50] *** Quits: ham (~ham4@user/ham) (Ping timeout: 250 seconds)
[04:39:51] <SnoopJ> huh, that looks very different. L55 in that repo is calling usocket.getaddrinfo()
[04:39:54] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[04:40:36] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[04:40:48] *** Quits: Teknique (~kirk@user/teknique) (Quit: leaving)
[04:40:48] <nomic> i dunno how to make that array is a v bad problem for me
[04:40:49] <Yhg1s> That makes more sense. OSError with negative error codes is something micropython's getaddrinfo() does.
[04:40:49] <nomic> now
[04:40:58] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 252 seconds)
[04:41:04] <Yhg1s> nomic: what do you want to create it from? What is your input?
[04:41:17] <SnoopJ> are you trying to load MNIST, maybe?
[04:41:28] <habnabit_> nomic, what kind of answer do you want from us?
[04:41:41] *** Joins: ionface (~ionface@user/ionface)
[04:41:43] <nomic> https://pastebin.com/e8gdtQAa
[04:42:15] <Yhg1s> nomic: that pastebin shows the array. It's repr() output, so you can copy-paste that and create the array. Is that what you're trying to do?
[04:42:15] *** Joins: ham (~ham4@user/ham)
[04:42:19] <nomic> ) trd[0] array([0.], dtype=float32)
[04:42:36] <SnoopJ> nomic, the only answer we can give you with what you have told is us `np.array([...])` where the ... is that result. This probably isn't what you want, but we don't have enough information...
[04:42:54] <nomic> its an array of arrays
[04:43:00] <matthewcroughan> I'm quite annoyed that micropython now uses urequests as a default
[04:43:03] <Yhg1s> no, it's a multidimensional array.
[04:43:13] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:43:17] <SnoopJ> yea, there's only one array there, and it's 2-dimensional
[04:43:28] <nomic> how do i create it please
[04:43:35] <nomic> the lang. instruction
[04:43:35] <Yhg1s> nomic: from what?
[04:43:37] <habnabit_> nomic, what part is giving you trouble?
[04:43:48] <Yhg1s> nomic: based on what do you want to create it? What is your input?
[04:43:49] <nomic> its mnist ocr
[04:43:57] <nomic> 784 values
[04:44:05] <Yhg1s> or, where did you get this output?
[04:44:58] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[04:45:00] <SnoopJ> 784 is 28x28 and MNIST is a 28x28 which is probably not a coincidence
[04:45:10] <SnoopJ> is a dataset of 28x28 images*
[04:45:15] <nomic> mnist.pkl.gz
[04:45:27] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[04:45:54] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[04:46:47] <tims> matthewcroughan: micropython is designed for microcontrollers with limited memory and storage, as a consequence the standard library is slimmed down.
[04:46:54] <matthewcroughan> sure, I get that
[04:47:02] <matthewcroughan> but urequests takes up far more memory yet is default :D
[04:47:04] <matthewcroughan> a bad decision
[04:47:19] <matthewcroughan> it has not always been this way, if I am reading correctly, I wonder why they decided to use this
[04:47:23] <Yhg1s> matthewcroughan: what do you mean, 'the default'? It's a different module. you can import whatever you like.
[04:47:30] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:47:33] <matthewcroughan> Yhg1s: you have to recompile micropython to do that
[04:47:34] <tims> your issue isn't urequests using more memory, it's you loading data that is too large
[04:47:49] <matthewcroughan> you can't just import from the network, you have bake these things into micropython, it's more work than anyone would like to do
[04:48:05] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[04:48:18] <matthewcroughan> this is why it is valid to criticise the decision to include something that basically nukes the device's available memory over something that is stream based like was previously default
[04:48:27] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:48:58] <tims> JSON isn't a good choice for loading data, it's a document format and not really suitable for being streamed
[04:49:00] <Yhg1s> matthewcroughan: it's not clear that that's actually the case, though.
[04:49:10] <matthewcroughan> perhaps not, I may be jumping the gun
[04:49:12] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:49:16] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[04:49:21] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 256 seconds)
[04:49:23] <matthewcroughan> so if you wanted to read github's api, how would you do it?
[04:49:47] <tims> If you have to you need to ensure the request size is small.
[04:49:55] <tims> request a small page size for example
[04:50:05] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[04:50:15] <nomic> how do i make that array out of a list of 784 values .. how do i define that array
[04:50:30] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Network is unreachable)
[04:50:49] <Yhg1s> nomic: I'm not sure what you want to hear that we haven't already said multiple times. You can just copy-paste what you showed us.
[04:50:50] *** Gustavo6046_ is now known as Gustavo6046
[04:51:03] <nomic> https://pastebin.com/e8gdtQAa
[04:51:15] <nomic> i don't know how to use nump t create that array
[04:51:18] <Yhg1s> nomic: yes, that. You can copy-paste that, put 'import numpy; numpy.' before it.
[04:51:30] <Yhg1s> nomic: or, you can use whatever gave you that output.
[04:51:41] *** Joins: CombatVet (~c4@user/combatvet)
[04:51:52] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:52:16] <nomic> (Pdb) trd[0] array([0.], dtype=float32)
[04:52:32] <nomic> ) type(trd[0])<class 'numpy.ndarray'>
[04:52:33] <Yhg1s> nomic: are you trying to ask a question with that?
[04:52:59] <nomic> i need to be able to create that array
[04:53:00] <Yhg1s> nomic: why are you showing a pdb prompt?
[04:53:08] *** Joins: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net)
[04:53:12] <nomic> to show the data .. each element is an array
[04:53:12] <Yhg1s> nomic: which one? The one in the pdb prompt, or the one in your paste?
[04:53:20] <Yhg1s> nomic: no, that's not how arrays work.
[04:53:37] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[04:55:03] <SnoopJ> matthewcroughan, I would probably do it exactly the way you are doing it, and if I ran into this error I'd be just as confused, because I can't find info on error -202. If MicroPython throws OSErrors, that's slightly annoying unless it's directly wrapping something from the host.
[04:55:22] <Yhg1s> error -202 is error 202 *as raised by getaddrinfo()*.
[04:56:09] <SnoopJ> negative values are "this isn't from MicroPython, it's wrapping a native error?"
[04:56:15] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:56:20] <SnoopJ> hmm no nevermind, ESP32 has non-negative errors heh
[04:56:22] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[04:56:34] <tims> matthewcroughan: The GitHub REST API has a section on pagination, you will need to work out a suitable value that fits into available memory: https://docs.github.com/en/rest/overview/resources-in-the-rest-api#pagination
[04:56:51] <Yhg1s> no, negative errors are how micropython signifies that the error came from getaddrinfo instead of some other errno.
[04:57:46] <SnoopJ> ahh, okay, I see that in the usocket docs now
[04:57:51] <Yhg1s> SnoopJ: see the 'Difference to CPython' section. https://docs.micropython.org/en/latest/library/usocket.html#usocket.getaddrinfo
[04:58:02] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[04:58:18] <SnoopJ> Yhg1s, thanks, I haven't yet played around with it on my new ESP32 toy but it's good to know about this behavior.
[04:58:28] <Yhg1s> from a quick googling around, errno 202 from getaddrinfo is a DNS failure.
[04:58:44] <Yhg1s> so, no network, or no DNS server, or a bad response, or just an unknown host.
[05:00:09] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-19fa-19fb-303f-0075.res6.spectrum.com) (Read error: Connection reset by peer)
[05:00:29] <tims> micropython has some subtly different behaviour, but it's pretty nice getting a python repl over a serial terminal for interacting with hardware.
[05:00:42] <grym> nomic: https://bpa.st/XMCA  what's the problem?
[05:00:42] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:00:43] *** Quits: lmmx (~louis@host-92-0-187-249.as13285.net) (Ping timeout: 265 seconds)
[05:01:54] <nomic> https://pastebin.com/ajHQjgjt
[05:02:10] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 265 seconds)
[05:02:28] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:03:01] <habnabit_> nomic, is that demonstrating a problem? are you still asking a question?
[05:03:12] <nomic> i am trying to define that array
[05:03:20] <habnabit_> nomic, so, what's the problem?
[05:03:31] <SnoopJ> Yhg1s, that would be EAI_FAIL in lwIP I guess?
[05:03:38] <SnoopJ> esp-lwip*
[05:03:44] <grym> nomic: none of that code makes sense, sorry
[05:03:52] <matthewcroughan> res=requests.post(url,headers=headers,params=params,data=json.dumps(payload)) returns TypeError: unexpected keyword argument 'params'
[05:03:52] <matthewcroughan> https://makeblock-micropython-api.readthedocs.io/en/latest/public_library/Third-party-libraries/urequests.html#urequests.post
[05:04:02] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:04:14] <matthewcroughan> But I expected this to work? https://dpaste.com/4LKFSUZ8L
[05:04:40] *** Joins: montybanksnyc (~montybank@2601:86:600:a2a:850d:defc:a9a0:173f)
[05:04:57] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:05:07] <SnoopJ> matthewcroughan, the code you just shared with us (using requests) should work, but I believe it fails with urequests because of https://github.com/micropython/micropython-lib/issues/273
[05:05:26] <SnoopJ> so if you mean the version where you do `urequests.post(...)` then I think that's just an interface difference :(
[05:06:12] <matthewcroughan> SnoopJ: and like I had commented earlier, urllib has been ripped out of micropython's urequests
[05:06:27] <matthewcroughan> so micropython-lib is different in this regard now, that issue is outdated to the point of uselessness :(
[05:06:35] <SnoopJ> micropython is in general different, yes
[05:06:42] <matthewcroughan> yeah, but it used to be less different :D
[05:06:44] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:07:17] <nomic> this has defined it
[05:07:18] <nomic> https://pastebin.com/jnkk8bfg
[05:07:32] <habnabit_> nomic, so, problem solved?
[05:07:36] <nomic> maybe
[05:08:36] <nomic> what is a "numpy.ndarray"
[05:08:50] <grym> exactly what it says it is
[05:09:07] <grym> https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html
[05:09:22] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:09:31] <tims> I don't think urllib was every part of the micropython standard lib
[05:09:53] <tims> *ever
[05:11:07] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:11:12] <matthewcroughan> Does anybody know what I'm supposed to do with these params now?
[05:11:19] *** Joins: raxor2k (~raxor2k@7.221.181.62.in-addr.dgcsystems.net)
[05:11:32] <SnoopJ> matthewcroughan, hard to say without know what "these params" are
[05:11:58] <Samian> I feel I could be 2x as productive as I am were I just more strategic, was less forgetful, and paid attention to detail.  Instead I forget one little thing over here, wonder why the program is breaking, and after 15 minutes say "oh yeah, I need tochange that thing over there".   Anyone know how to get better at that?
[05:11:59] <matthewcroughan> https://dpaste.com/57STDXBQ3
[05:12:02] <tims> matthewcroughan: The urequests site has an example, params are just query arguments that can be added to the URL
[05:12:12] <habnabit_> Samian, yes: use a type linter
[05:12:20] <Samian> cool!
[05:12:20] <matthewcroughan> tims: oh, so the ?x=y ?
[05:12:23] <matthewcroughan> are you serious? :D
[05:12:38] <SnoopJ> those are query parameters, yep
[05:12:44] <Samian> habnabit_  thanks!
[05:13:09] <raxor2k> I have no idea how im gonna ask this question but i try: I used to have a very big large class named A. Now i took 2 parts from class A and made class B and C. And i import those classes into class A and it works perfectly.    Now the next part im gonna remove from class A to its own class(named class D), does its own calculations, so how can i know in class A that calculations in class D are
[05:13:09] <raxor2k> finished?
[05:13:40] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:14:11] <grym> raxor2k: presumably the method in D returns you a value, when you call it
[05:14:14] <grym> at which point it's done
[05:14:54] <nomic> i try to make np.ndarray(x) .. x is a list, of 784 .. and it says *** ValueError: maximum supported dimension for an ndarray is 32, found 784
[05:15:01] <raxor2k> grym: ok thats fine. But class D also needs data from class B and C. is that a problem?
[05:15:02] <nomic> but that array, i pastebined is 784
[05:15:09] <SnoopJ> raxor2k, it's really hard to say with such a general description
[05:15:22] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:15:25] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:15:52] <matthewcroughan> I got quite a bit further like this, but still run out of memory. https://gist.github.com/MatthewCroughan/dd7cca8102d2ce76c1eb964f6034e5ae
[05:15:54] <matthewcroughan> damnit
[05:15:57] <grym> nomic: i think you tried to make an array with 784 dimensions, not 784 elements in one dimension
[05:16:01] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:16:06] <habnabit_> nomic, are you not calling pickle.load?
[05:16:15] <habnabit_> nomic, you have a .pkl file
[05:16:37] <SnoopJ> matthewcroughan, do you know what's causing that 202? It seems like a network error, maybe the network connectivity went out briefly or something like that?
[05:16:56] <matthewcroughan> Oh, what does 202 mean?
[05:17:09] <tims> matthewcroughan: Have you setup the network connection first?
[05:17:30] <matthewcroughan> Yes, I have verified that.
[05:17:37] *** Quits: brownan (~brownan@136.56.137.143) (Ping timeout: 268 seconds)
[05:17:40] <matthewcroughan> It's possible that this is caused by the ssl
[05:17:53] <matthewcroughan> a microcontroller doing ssl
[05:18:04] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:18:34] <SnoopJ> matthewcroughan, it appears to be EAI_FAIL https://github.com/espressif/esp-lwip/blob/2195f7416fb3136831babf3e96c027a73075bd4f/src/include/lwip/netdb.h#L70
[05:18:36] *** Quits: venmx (~bertie@82-132-233-160.dab.02.net) (Read error: Connection reset by peer)
[05:19:52] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:20:03] *** Joins: venmx (~bertie@82-132-233-160.dab.02.net)
[05:20:13] <matthewcroughan> https://forum.pycom.io/topic/5610/eai-fail SnoopJ
[05:20:18] <matthewcroughan> DNS!
[05:20:24] <matthewcroughan> IT'S ALWAYS DNS
[05:20:24] * SnoopJ nods
[05:21:08] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:21:56] *** Joins: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com)
[05:22:21] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:22:21] *** Quits: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com) (Read error: Connection reset by peer)
[05:22:36] <SnoopJ> matthewcroughan, it looks like this error can be raised for "I can't talk to the remote" reasons in esp-lwip, so as Yhg1s said, this could indicate a pretty general network error condition
[05:22:41] *** Joins: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com)
[05:22:50] <raxor2k> grym: do you suggest me to use super()?
[05:24:03] <grym> raxor2k: if you subclass, you don't have a choice, but you have yet to say the s- word
[05:24:06] <grym> today
[05:24:07] <grym> so no
[05:24:08] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:24:57] <raxor2k> rep_timer = RepTimer()
[05:25:06] <raxor2k> i just use that into class A and it works
[05:25:07] <grym> raxor2k: i understand you to have described taking big-fat-A-that-does-too-much and splitting out three independent classes from it, whose base classes are all just object like A's is
[05:25:20] <matthewcroughan> Now that dns is working
[05:25:21] <matthewcroughan> `NotImplementedError: Redirects not yet supported`
[05:25:24] <matthewcroughan> GREAT
[05:25:27] <raxor2k> grym yes youre right
[05:25:38] <grym> raxor2k: if that is true, no, you don't need super; your mro is whatever->object
[05:25:57] <nomic> how does this work .. i define np.ndarray(784). it gives a list of  values
[05:26:05] <nomic> where are the values from
[05:26:17] <grym> nomic: use np.array() not np.ndarray()
[05:26:21] *** Quits: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com) (Read error: Connection reset by peer)
[05:26:34] <raxor2k> grym: there were no issues splitting two parts from class A into class B and C as B/C do calculations themselves
[05:26:37] <nomic> that dataset, mnist = ndarray
[05:26:39] <habnabit_> nomic, are you not using pickle.load to load the .pkl file?
[05:26:40] *** Joins: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com)
[05:26:43] <grym> "Arrays should be constructed using `array`, `zeros` or `empty` (refer
[05:26:43] <grym> to the See Also section below).  The parameters given here refer to
[05:26:43] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:26:44] <grym> a low-level method (`ndarray(...)`) for instantiating an array."
[05:26:47] <grym> from the docs
[05:26:49] *** Joins: ncb (~ncb@user/ncb)
[05:26:55] <grym> which i strongly suggest you read thorougly
[05:27:01] <raxor2k> but now this part that i want to split from class A also needs the calculations from class B. So one thing could be to merge class B with D
[05:27:01] <SnoopJ> "use array, not ndarray" +1
[05:27:32] <grym> nomic: np.array is "the constructor" for the np.ndarray type
[05:27:38] <nomic> the dataset i am trying to define = type(trd) <class 'numpy.ndarray'>
[05:27:43] <grym> yes, np.array makes those
[05:27:50] <habnabit_> nomic, hello? how are you loading the .pkl file?
[05:28:11] <nomic> mnist_loader.py
[05:28:17] <habnabit_> nomic, did you write that?
[05:28:23] <nomic> no
[05:28:31] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:28:40] <grym> huh?
[05:28:44] <SnoopJ> saving ndarrays in pickle files, sigh
[05:28:46] <habnabit_> nomic, ok, then where did you get it from?
[05:28:53] <grym> real common :/
[05:29:07] *** Joins: AlbertoP (~AlbertoP@user/albertop)
[05:29:08] <grym> nomic: https://github.com/mnielsen/neural-networks-and-deep-learning/blob/master/src/mnist_loader.py ?
[05:29:27] <grym> or https://github.com/MichalDanielDobrzanski/DeepLearningPython
[05:29:33] *** Parts: AlbertoP (~AlbertoP@user/albertop) (Leaving)
[05:29:41] <nomic> yeah thats it
[05:30:00] *** Quits: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1) (Quit: hej-hej!)
[05:30:09] <grym> that code doesn't call np.ndarray; you shouldn't either
[05:30:11] <habnabit_> nomic, ok. your code that you've shown us doesn't use mnist_loader.py at all
[05:30:21] <grym> that code also shows you how to load the mnist dataset it ships; you should do that
[05:30:25] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:32] *** Joins: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1)
[05:30:49] *** Quits: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com) (Ping timeout: 244 seconds)
[05:31:16] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:31:19] *** Joins: justinf210 (~justinf21@35.sub-97-43-192.myvzw.com)
[05:33:00] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[05:33:01] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:35:41] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:36:00] *** Quits: justinf210 (~justinf21@35.sub-97-43-192.myvzw.com) (Remote host closed the connection)
[05:36:29] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[05:37:06] <nomic>  xx = [np.ndarray(1),np.ndarray(1)]  theni  np.ndarray(xx) and it says 'only integar scalar arrays can be converted to a scalar index'
[05:37:11] *** Joins: justinf210 (~justinf21@35.sub-97-43-192.myvzw.com)
[05:37:27] *** Quits: justinf210 (~justinf21@35.sub-97-43-192.myvzw.com) (Remote host closed the connection)
[05:37:29] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:37:31] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 256 seconds)
[05:37:33] <habnabit_> nomic, that isn't how you make 2-dimensional arrays
[05:37:43] *** Joins: justinf210 (~justinf21@35.sub-97-43-192.myvzw.com)
[05:37:46] <habnabit_> nomic, why are you still calling np.ndarray?
[05:37:47] *** Joins: kiska (~kiska@user/kiska)
[05:37:56] <nomic> because the array i want to define
[05:37:58] <grym> please stop using ndarray
[05:37:59] <nomic> that i pastebined
[05:38:04] <grym> use array
[05:38:05] <nomic> is "ndarray"
[05:38:11] <grym> but xx is a list
[05:38:13] <SnoopJ> using ndarray is almost always wrong
[05:38:16] <habnabit_> nomic, why aren't you using mnist_loader.py ?
[05:38:26] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[05:38:27] <nomic> i am trying to create the same array
[05:38:28] <grym> you probably want np.array([1,1]) in that example
[05:38:29] <nomic> that it creates
[05:38:36] <habnabit_> nomic, why? you can load it
[05:38:48] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[05:38:50] <nomic> so i can make different nets
[05:38:52] <nomic> smaller
[05:39:03] *** Quits: hrtk (~hritik@223.226.188.53) (Quit: Took the red pill)
[05:39:43] *** Joins: vlm (~vlm@user/vlm)
[05:39:51] <habnabit_> nomic, if you want to make a 2d array, pass a list of lists of numbers to np.array
[05:39:56] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:40:32] *** Quits: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[05:40:54] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[05:41:43] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:42:03] *** Quits: justinf210 (~justinf21@35.sub-97-43-192.myvzw.com) (Ping timeout: 256 seconds)
[05:42:22] *** Joins: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com)
[05:43:00] <grym> the size of the mnist dataset has nothing to do, in any way at all, with the architecture or size of a net you train it with
[05:43:08] <grym> it's just itself
[05:43:15] <habnabit_> but yes that too
[05:43:39] <grym> and you do not generate network weights by hand by summoning numpy arrays from the void; you train them
[05:44:05] <habnabit_> you can assemble a brain by linking neurons together with tweezers
[05:44:14] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:44:27] <matthewcroughan> I got it working SnoopJ
[05:44:38] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[05:44:48] <SnoopJ> matthewcroughan, nice! any wisdom to share?
[05:44:49] <matthewcroughan> SnoopJ: https://dpaste.com/3GGCWZ8N6
[05:44:57] <matthewcroughan> result is v0.18
[05:45:01] <matthewcroughan> as it should be..
[05:45:11] <nomic> all i want is to be able to define this array
[05:45:14] <nomic> i do not know how
[05:45:15] <nomic> s
[05:45:17] <matthewcroughan> the wisdom is that ujson.dumps is quite useful to debug it
[05:45:27] <nomic> https://pastebin.com/e8gdtQAa
[05:45:30] <matthewcroughan> printing that showed me that I was getting denied due to not having a user agent set
[05:45:41] <grym> nomic: call this function: https://github.com/MichalDanielDobrzanski/DeepLearningPython/blob/master/mnist_loader.py#L19
[05:45:54] <SnoopJ> matthewcroughan, aha, that indeed would be a problem :)
[05:46:01] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:48:02] *** Joins: drew` (~drew@user/drew)
[05:48:06] <matthewcroughan> SnoopJ: alright.. so now it fetches some json, parses it, and does something accordingly
[05:48:07] <matthewcroughan> https://twitter.com/MatthewCroughan/status/1408195075721646080
[05:48:13] <matthewcroughan> it's for this basically, I want it to react to commits
[05:48:14] <nomic>  xx = np.ndarray([0.],dtype="float32")*** TypeError: 'float' object cannot be interpreted as an integer
[05:48:28] <habnabit_> nomic, why are you still calling ndarray?
[05:48:28] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:48:42] <nomic> cos the array that mnswt works with = a ndarray
[05:48:44] <grym> nomic: do this: https://bpa.st/T6KQ
[05:48:48] <nomic> i want to creeate the same array
[05:49:00] <habnabit_> nomic, are you reading anything that we're saying? you call np.array to make an ndarray
[05:49:02] <grym> literally copy and paste that and hit enter
[05:49:06] *** drew` is now known as drew
[05:49:15] <nomic> ok
[05:49:27] <grym> nomic: 20:21  Yhg1s  nomic: yes, that. You can copy-paste that, put 'import numpy; numpy.' before it.
[05:49:35] <grym> you had the answer an hour ago, fwiw
[05:50:14] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:50:34] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[05:51:12] <nomic> ok thats creates it
[05:51:19] <nomic> grym. thanks
[05:52:12] *** Quits: flyback (~flyback@2601:540:8201:1e60:6450:faac:2f4c:fd30) (Ping timeout: 250 seconds)
[05:52:51] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:52:59] <grym> cheers
[05:53:23] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 258 seconds)
[05:54:14] *** Quits: venmx (~bertie@82-132-233-160.dab.02.net) (Read error: Connection reset by peer)
[05:54:18] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 252 seconds)
[05:54:37] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:55:10] *** Quits: xsperry (~as@user/xsperry) ()
[05:55:39] *** Quits: justinf210 (~justinf21@22.sub-97-44-0.myvzw.com) (Ping timeout: 256 seconds)
[05:56:17] *** Joins: xsperry (~as@user/xsperry)
[05:56:53] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:58:41] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[05:59:16] *** Quits: IHasFinger (~JJ_@2a02:c7f:fc54:ba00:e1bc:35e8:cc1d:c226) (Read error: Connection reset by peer)
[05:59:49] *** Joins: flyback (~flyback@2601:540:8201:1e60:d552:e2c3:6e2:62ad)
[06:00:00] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[06:00:08] *** Quits: mgedmin (~mg@user/mgedmin) (Quit: ZNC - http://znc.sourceforge.net)
[06:01:08] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:01:39] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[06:01:54] *** Joins: pete443 (~pete@user/pete443)
[06:02:15] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[06:02:36] *** Quits: pete443_ (~pete@user/pete443) (Ping timeout: 250 seconds)
[06:02:56] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:03:09] *** Joins: mgedmin (~mg@user/mgedmin)
[06:04:18] *** Quits: ssbr_ (~ssbr@2620:15c:10f:203:222b:48fb:ba53:5eb8) (Ping timeout: 240 seconds)
[06:05:16] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 258 seconds)
[06:05:37] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:06:02] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[06:07:22] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:07:35] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[06:07:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:09:13] <NeuroWinter> Hello all! I am stuck with this little problem atm. I have a text file containing a bunch of different email headers like `Received: from ... ` and `From: "..."` I need to read these into a dictionary, but some of the values are split accross multiple lines. Does anyone know of a good way to read a file like this into a dict?
[06:09:45] <grym> sounds like a job for a lightweight parser!
[06:09:54] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:10:00] <NeuroWinter> I have tried using the python email module, but that does not like reading just the headers :(
[06:10:27] * NeuroWinter was hoping there was a parser out there already so I didnt need to write my own :P
[06:10:38] <grym> there's a parser maker ...
[06:10:39] <grym> several
[06:10:50] <habnabit_> NeuroWinter, the email module should be fine.. what did you try, and how did it fail?
[06:11:21] *** Quits: flyback (~flyback@2601:540:8201:1e60:d552:e2c3:6e2:62ad) (Quit: Leaving)
[06:11:39] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:11:41] *** Joins: flyback (~flyback@2601:540:8201:1e60:d552:e2c3:6e2:62ad)
[06:12:10] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 246 seconds)
[06:12:43] <NeuroWinter> habnabit_: I tried reading the file, and extracting the text, and then used `x = email.message_from_string(data)` but when I try `x.keys()` it returns nothing, I have also tried using the message_from_file function and passed in the file object, but that had the same result
[06:12:49] *** Joins: id (jeda@hellomouse/dev/cryb.jeda)
[06:12:49] *** id is now known as Nay
[06:13:46] <NeuroWinter> My guess is beacuse the file doesnt contain a message at all, since its just the headers
[06:13:56] *** Quits: Nay (jeda@hellomouse/dev/cryb.jeda) (Client Quit)
[06:14:13] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:15:54] *** Joins: djapo (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net)
[06:16:01] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:16:03] <NeuroWinter> I am an idiot ... turns out I wasnt passing in the right object
[06:16:18] <habnabit_> NeuroWinter, problem solved?
[06:16:28] <grym> quack
[06:16:47] *** Joins: Aye (jeda@hellomouse/dev/cryb.jeda)
[06:16:47] *** Aye is now known as id
[06:16:47] <NeuroWinter> Yeah, I had read the file, and there for the file object was at the end of the file, so when the email module tried to read it, there was no data
[06:17:00] <NeuroWinter> so I was passing in '' into the function
[06:17:42] *** Joins: Nay (jeda@hellomouse/dev/cryb.jeda)
[06:17:45] *** Quits: djapo (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net) (Changing host)
[06:17:45] *** Joins: djapo (~archangel@user/djapo)
[06:18:05] *** Quits: clawh_ (~clawh@185.244.214.60) (Remote host closed the connection)
[06:18:39] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:18:50] *** Joins: spirit (~spirit@user/spirit)
[06:19:26] *** Quits: Nay (jeda@hellomouse/dev/cryb.jeda) (Client Quit)
[06:19:26] *** Quits: id (jeda@hellomouse/dev/cryb.jeda) (Client Quit)
[06:20:26] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:20:26] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Remote host closed the connection)
[06:20:53] *** Joins: venmx (~bertie@82-132-233-160.dab.02.net)
[06:20:56] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[06:21:40] *** Joins: wei2912 (~wei2912@112.199.250.21)
[06:22:23] *** Joins: qunzhong_luxian (~qunzhong_@68.235.43.142)
[06:22:23] *** Quits: qunzhong_luxian (~qunzhong_@68.235.43.142) (Client Quit)
[06:22:32] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[06:22:40] *** Joins: Aye (jeda@hellomouse/dev/cryb.jeda)
[06:22:40] *** Aye is now known as id
[06:22:48] *** Joins: pnoud (~pnoud@user/pnoud)
[06:22:58] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:23:09] *** Joins: qunzhong_luxian (~qunzhong_@68.235.43.142)
[06:23:23] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[06:24:46] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:24:51] *** Quits: venmx (~bertie@82-132-233-160.dab.02.net) (Read error: Connection reset by peer)
[06:24:57] *** id is now known as Aye
[06:25:01] <matthewcroughan> how do you check for increments in python?
[06:25:09] <matthewcroughan> Lets say you store a value, how can I check to see if it has increased?
[06:25:17] <matthewcroughan> a for loop that only exits once a value has increased
[06:25:37] *** Joins: exciteabletom (~tom@14-203-158-110.static.tpgi.com.au)
[06:25:56] <SnoopJ> matthewcroughan, `newvalue > oldvalue` ?
[06:26:19] <matthewcroughan> that means I have to rewrite the old value right?
[06:27:07] <SnoopJ> it depends on the particulars. the embedded domain offers a lot of variety of ways to do things, especially a chip with low-power features like those in the ESP32, more detail is generally helpful
[06:27:08] <matthewcroughan> is there a smarter way of doing this?
[06:27:14] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:27:18] <matthewcroughan> I want this to be stateless.
[06:27:26] <SnoopJ> your question is inherently one of state
[06:27:35] <matthewcroughan> First, the device boots up, queries the api, stores a value in memory. If this value increases, I want a function to be executed.
[06:27:37] <SnoopJ> (if it wasn't, what would have been changed?)
[06:27:49] <matthewcroughan> Stateless meaning that it will store it in memory and only care about increments, not decrements
[06:27:57] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 256 seconds)
[06:28:01] <matthewcroughan> and if it were to reboot, the behavior is not different due to losing that state
[06:28:32] *** Quits: doc (~doc@user/doc) (Ping timeout: 268 seconds)
[06:28:51] <matthewcroughan> state, to me, is persistent
[06:28:59] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:29:54] *** Quits: qunzhong_luxian (~qunzhong_@68.235.43.142) (Ping timeout: 240 seconds)
[06:30:37] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Ping timeout: 265 seconds)
[06:31:25] <grym> matthewcroughan: "if i'm bigger than i was last time" is stateful
[06:31:38] <SnoopJ> if they're Python objects, you might want to put this "when incremented, do something" logic in the type's __iadd__() maybe?
[06:31:44] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:31:56] <matthewcroughan> SnoopJ: every 5 seconds it'll be polling the github api and flashing a light if the number has incremented
[06:32:16] <SnoopJ> okay, that's motivation for the task
[06:32:22] <matthewcroughan> the fact that I have to poll every 5 seconds and update a value anyway, will I see a benefit from doing it in a more "smart" way like you're proposing
[06:32:27] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[06:32:28] *** Quits: ente_ (~ente@p54a445ae.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[06:33:00] <matthewcroughan> grym: can you give me an example of a sentence that is stateless?
[06:33:10] <matthewcroughan> any sentence, I'm just learning about stateless and do get confused sometimes
[06:33:31] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:33:38] <SnoopJ> "My car has an odometer" vs. "My car's odometer reads X right now"
[06:33:50] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:34:41] <grym> matthewcroughan: stateless: 2+2 == 4
[06:34:45] *** Joins: ente_ (ente@gateway/vpn/protonvpn/ente/x-68844868)
[06:35:00] <SnoopJ> the possible advantage I could see here is that 5 seconds is long enough that you could put the ESP32 into deep sleep mode and save on power consumption. If it's not on battery, that'd probably be a waste of time
[06:35:24] <matthewcroughan> SnoopJ: I could do that way later, but the intent is that this will be plugged in all day
[06:35:26] <SnoopJ> and I don't know how easy MicroPython makes it to put something into the region of memory reserved for storing data when in low-power modes
[06:35:42] <matthewcroughan> oh it's pretty easy and I can steal code from a friend who's dug deep into that
[06:35:50] *** Quits: arakimo (~arakimo@user/arakimo) (Quit: Leaving)
[06:35:52] <matthewcroughan> but that's definitely for later
[06:35:57] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:35:59] *** Joins: arakimo (~arakimo@user/arakimo)
[06:36:02] <matthewcroughan> All I want to do is make this thing check if a value has incremented since it first booted
[06:36:18] <matthewcroughan> a value on the github api
[06:36:20] <SnoopJ> why the first boot?
[06:36:33] <matthewcroughan> it won't be storing any persistent state
[06:36:34] <SnoopJ> if it's meant to be plugged in all the time, I would think you just care about increases since the most recent boot
[06:36:40] <matthewcroughan> sorry, first boot just means whenever power is applied
[06:36:43] <matthewcroughan> not literally first boot
[06:36:46] <SnoopJ> I see
[06:37:05] <SnoopJ> yea, store the value when you boot and compare against it when you hit the API
[06:37:08] <matthewcroughan> https://dpaste.com/27YJPZCY4
[06:37:13] *** Quits: xy (~icy@user/icy) (Quit: ZNC 1.8.2 - https://znc.in)
[06:37:26] <SnoopJ> and when it does go up, store the new value as the new thing to test against
[06:37:35] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 256 seconds)
[06:37:42] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:38:07] *** Joins: venmx (~bertie@82-132-233-160.dab.02.net)
[06:38:42] *** Joins: icy (~icy@user/icy)
[06:38:53] <matthewcroughan> and to poll every 5 seconds is literally just time.sleep right?
[06:39:03] <matthewcroughan> there is no better way to do that?
[06:39:25] *** Joins: hodapp (~mawson@user/hodapp)
[06:40:19] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:41:19] *** Joins: doc|home (~doc@user/doc)
[06:41:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[06:42:05] *** Quits: venmx (~bertie@82-132-233-160.dab.02.net) (Read error: Connection reset by peer)
[06:42:05] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:44:20] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:45:08] *** Joins: seds (sid492514@user/seds)
[06:45:13] *** Quits: ente_ (ente@gateway/vpn/protonvpn/ente/x-68844868) (Ping timeout: 244 seconds)
[06:45:46] <SnoopJ> matthewcroughan, this would be my first thought: https://bpa.st/WKQA
[06:46:06] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:46:57] *** Joins: ente_ (~ente@p54a445ae.dip0.t-ipconnect.de)
[06:47:42] <matthewcroughan> SnoopJ: is that Python?
[06:48:01] <SnoopJ> matthewcroughan, it is pretty much your code, with my changes c.a. Line 12
[06:48:06] <SnoopJ> (it's valid Python, yes)
[06:48:15] <matthewcroughan> can you give me a pastebin or raw text?
[06:48:27] <SnoopJ> https://bpa.st/raw/WKQA
[06:48:42] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:50:10] <matthewcroughan> that is remarkable :D
[06:50:15] <matthewcroughan> what is || ?
[06:50:17] <matthewcroughan> OR?
[06:50:28] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:50:37] <SnoopJ> || does not occur in either of those links
[06:50:58] <matthewcroughan> SnoopJ: gets NameError: local variable referenced before assignment
[06:51:34] <matthewcroughan> I do not know what I was looking at, I think I clicked the wrong lnk.. lol
[06:51:46] <matthewcroughan> OH
[06:51:55] <matthewcroughan> I was confused. A friend sent me this. My apologiese https://i.redd.it/7hvz0c4qsd671.jpg
[06:52:00] <matthewcroughan> Apologies*
[06:52:22] <matthewcroughan> You can see why I asked "Is that Python?" now lmfao
[06:52:41] <SnoopJ> matthewcroughan, did you add the first definition of `LAST_ISSUE_COUNT` at the top of the file? The NameError itself is the runtime saying "I know you will assign to this name later, but it isn't associated with a value where you use it"
[06:52:50] <SnoopJ> probably where it does `ic > LAST_ISSUE_COUNT`
[06:53:15] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:53:27] <matthewcroughan> SnoopJ: Yeah I did.
[06:53:40] <matthewcroughan> https://dpaste.com/5VLP3MPE6
[06:53:43] <matthewcroughan> traceback here
[06:54:33] *** Joins: glumanda (~manu@194-208-201-025.tele.net)
[06:54:37] <matthewcroughan> strange, it's definitely been assigned
[06:54:51] <glumanda> hi
[06:54:53] *** Joins: venmx (~bertie@82-132-233-160.dab.02.net)
[06:54:56] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[06:55:01] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:55:31] <SnoopJ> matthewcroughan, oh, this is a mistake on my part, sorry
[06:55:47] <matthewcroughan> I can't quite see the error myself :D
[06:55:49] *** Quits: {4144} (~{4144}@46.56.70.183) (Remote host closed the connection)
[06:55:56] <matthewcroughan> ic is definitely assigned, do you see the error because I don't yet
[06:56:09] <SnoopJ> matthewcroughan, the compiler thinks LAST_ISSUE_COUNT is a local
[06:56:17] <matthewcroughan> local to?
[06:56:17] *** Quits: ente_ (~ente@p54a445ae.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:56:23] <SnoopJ> to that function's frame
[06:56:31] <matthewcroughan> so you mean the one inside the function
[06:56:39] <matthewcroughan> so gotta say `global LAST_ISSUE_COUNT` first?
[06:56:39] <SnoopJ> yep, not its bizarro-world global cousin
[06:56:58] <SnoopJ> I think that's the most direct 'fix' here, yea
[06:57:06] *** Quits: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net) (Ping timeout: 240 seconds)
[06:57:30] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:57:58] <matthewcroughan> it doesn't seem to work actually
[06:58:03] <matthewcroughan> it returns "More issues than last time" every time
[06:58:23] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[06:58:43] <SnoopJ> when the value isn't changing?
[06:58:49] <matthewcroughan> correct
[06:58:53] <matthewcroughan> the value is 2 each time
[06:58:55] *** Quits: venmx (~bertie@82-132-233-160.dab.02.net) (Read error: Connection reset by peer)
[06:59:16] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[06:59:46] <SnoopJ> hmm, is it re-running that entire module for each request?
[07:00:15] <matthewcroughan> either way, I don't want this to initialize with a false-positive
[07:00:24] <SnoopJ> I don't really know how MicroPython works but this would only store this value in memory if there was a loop on the Python side; if you re-ran all of that multiple times, you'd always pick up the initial value and then always think it'd incremented.
[07:00:25] <matthewcroughan> you initilaise this to -1, so as a result, it's always going to be true on first instance
[07:00:30] <matthewcroughan> I want it to be false on first instance
[07:01:15] <matthewcroughan> store value, do nothing, monitor value, do something on increment
[07:01:16] <SnoopJ> okay, then change the branch: `if LAST_ISSUE_COUNT == -1: LAST_ISSUE_COUNT = ic; elif ic > LAST_ISSUE_COUNT: ...; else: ...`
[07:01:40] <matthewcroughan> I think I understand why mutation and imperative programming is something I'm not comfortable with now :P
[07:01:45] <matthewcroughan> This just bugs me, I don't know why
[07:01:52] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:02:02] <matthewcroughan> keeping track of it on this small scale gives me anxiety
[07:02:16] <matthewcroughan> imagine what people with much larger challenges must have to keep track of!
[07:02:27] <SnoopJ> if you think this is small-scale, you must loathe C
[07:02:28] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:02:45] <SnoopJ> If you have more state, you usually write a class to encapsulate it
[07:02:55] <SnoopJ> but for a single value like this, it's fine to just stuff it in a name at the module level
[07:03:32] <SnoopJ> getting "more" every time makes me think your ESP32 is running this entire module (the imports, the initialization) every time you do a request
[07:03:33] <matthewcroughan> I'm running the module each time yes, so this is always going to cause a false positive
[07:03:39] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[07:03:39] <matthewcroughan> -1 should echo "power on"
[07:03:46] <matthewcroughan> at which point the loop occurs
[07:03:57] *** Joins: ente_ (~ente@p54a445ae.dip0.t-ipconnect.de)
[07:04:05] <SnoopJ> you need some way to test if it's the first such run, then
[07:04:14] <SnoopJ> which I guess is just restating your question, but again, the particulars matter al ot
[07:05:17] <SnoopJ> it seems like you could write into the ESP32's memory, so you could store a "is this really the first run" value there maybe at worst.
[07:06:05] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:06:05] *** FinnElija is now known as Guest9344
[07:06:05] *** Quits: Guest9344 (~finn_elij@user/finn-elija/x-0085643) (Killed (silver.libera.chat (Nickname regained by services)))
[07:06:05] *** finn_elija is now known as FinnElija
[07:06:05] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:07:52] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[07:08:18] *** Joins: physkets (~physkets@user/physkets)
[07:08:41] <SnoopJ> ...or rewrite the application so the 5-second loop is in MicroPython
[07:09:04] <SnoopJ> (that one is probably the 'nicest' because you don't need to re-run the imports!)
[07:10:10] <physkets> Hi!  I'm using numpy to 'loadtxt', and need to read three columns of data that I specify using `usecols=(0, 1, 6)`, and I also need to specify that two of the columns contain integers, so I also pass the argument: `dtype=(np.int32, np.int32, np.float64)`.
[07:10:31] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:10:55] <physkets> But then, I end up with an error pointing to the 'dtype', saying:
[07:10:58] <physkets>      TypeError: Tuple must have size 2, but has size 3
[07:11:34] <physkets> Why? Doesn't it need to be of size '3', because I'm reading three columns? Or is this something else?
[07:12:01] <SnoopJ> physkets, the number of columns and dtypes should be the same, but that error makes it sound like numpy thinks there are only two columns...are you sure column 6 exists?
[07:12:13] *** Joins: venmx (~bertie@82-132-233-160.dab.02.net)
[07:12:16] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[07:12:22] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 246 seconds)
[07:12:33] <grym> especially, are you sure it exists in every single row
[07:12:43] *** Quits: r3m (~launch@user/r3m) (Ping timeout: 256 seconds)
[07:13:06] <physkets> SnoopJ grym yep; I changed it to a lower column number, and I still get the same error
[07:13:45] <SnoopJ> physkets, can we see the code/data, maybe?
[07:13:47] <physkets> The error loadtxt generates when there's missing data in some rows is not this
[07:13:55] <SnoopJ> yea, that should be a separate error I think
[07:14:05] <physkets> SnoopJ: Hmm.. let me see
[07:14:06] *** Quits: ente_ (~ente@p54a445ae.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:14:15] <SnoopJ> my only guess is the header is wrong, maybe?
[07:14:32] <SnoopJ> wrong/misleading-to-numpy
[07:14:37] *** Joins: r3m (~launch@user/r3m)
[07:14:58] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:16:17] *** Quits: venmx (~bertie@82-132-233-160.dab.02.net) (Read error: Connection reset by peer)
[07:16:45] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[07:17:01] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[07:17:40] *** Quits: spicyrice (~ubuntu@2600:1f11:52a:4400:ccbc:2b96:cabe:414b) (Quit: WeeChat 2.8)
[07:18:12] *** Quits: FluffyMask (~FluffyMas@user/fluffymask) (Quit: WeeChat 2.9)
[07:19:20] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:19:40] *** Quits: glumanda (~manu@194-208-201-025.tele.net) (Quit: WeeChat 3.2)
[07:20:08] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[07:20:21] *** Joins: mastardet (~mastardet@191-245-64-212.3g.claro.net.br)
[07:21:07] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[07:21:34] *** Quits: MrFantastik (~Thunderbi@98.1.50.67) (Ping timeout: 268 seconds)
[07:21:37] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[07:22:01] <matthewcroughan> SnoopJ: I have hit a quirk I can't understand.. hm
[07:22:20] *** Quits: emerent (~quassel@p200300cd5703bb5dba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:22:25] <matthewcroughan> https://dpaste.com/BDC8J5PJR
[07:22:41] <matthewcroughan> https://dpaste.com/3XE5KJZNP
[07:22:42] *** Quits: sbanwart (~sbanwart@cpe-174-100-90-239.neo.res.rr.com) (Ping timeout: 258 seconds)
[07:22:49] <matthewcroughan> that is the program, and output in the second
[07:23:14] <matthewcroughan> Firstly, it can decrement if you actually delete the github issue, but that's besides the point
[07:23:30] <matthewcroughan> That's fine though. The issue is that the increment isn't being detected by the elif
[07:23:41] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:23:49] *** Joins: emerent (~quassel@p200300cd5703bbd0ba27ebfffed28a59.dip0.t-ipconnect.de)
[07:25:29] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[07:25:39] <matthewcroughan> just needs to be a regular if statement I guess
[07:26:01] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 246 seconds)
[07:26:33] <SnoopJ> matthewcroughan, can you add print(ic) under L20?
[07:26:35] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[07:26:46] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:26:55] <SnoopJ> oh
[07:26:57] <matthewcroughan> API rate limit exceeded
[07:26:58] <matthewcroughan> GOOD
[07:26:59] <matthewcroughan> lol
[07:27:01] <matthewcroughan> Gotta catch that..
[07:27:12] <SnoopJ> I just noticed `return print(ic)` which is malformed: print() has a return value of None
[07:27:20] *** Quits: mastardet (~mastardet@191-245-64-212.3g.claro.net.br) (Changing host)
[07:27:20] *** Joins: mastardet (~mastardet@user/mastardet)
[07:27:23] <SnoopJ> but it did what I was kinda after :)
[07:28:05] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:28:19] <matthewcroughan> not in the micropython repl lol
[07:28:29] <SnoopJ> matthewcroughan, after the get() you should probably be doing `if not response.ok: print("Error!")`
[07:28:37] <SnoopJ> oh, is that one of the differences?
[07:28:40] *** Joins: fstd (~fstd@xdsl-84-44-233-102.nc.de)
[07:28:42] <matthewcroughan> I can catch the rate limit though
[07:28:44] * SnoopJ should probably write some MicroPython
[07:28:56] <matthewcroughan> so I'll do that at some point
[07:29:27] <SnoopJ> matthewcroughan, if urequests has something like response.ok in `requests`, you can do `if not response.ok: print("Error!")`, but it's possible the API returned 200 OK and the error is inside the response.
[07:29:50] <SnoopJ> but hopefully if so, GitHub indicates the general status of the reply in a way you can test similarly
[07:29:51] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[07:30:21] <SnoopJ> hopefully it's HTTP 429 though :)
[07:30:41] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 244 seconds)
[07:31:23] <SnoopJ> hmm, it doesn't have .ok, but it does seem to set .status_code
[07:31:47] <matthewcroughan> https://docs.github.com/en/rest/overview/resources-in-the-rest-api#conditional-requests
[07:31:49] <matthewcroughan> It has this though
[07:31:53] <matthewcroughan> so I could be caching it like this
[07:32:30] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:32:56] *** Quits: IceMichael (~IceMichae@dynamic-046-114-153-046.46.114.pool.telefonica.de) (Ping timeout: 252 seconds)
[07:32:59] <SnoopJ> yea, you could skip all the parsing of the response
[07:33:14] *** Joins: venmx (~bertie@82-132-233-160.dab.02.net)
[07:33:20] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Quit: Leaving)
[07:33:23] <matthewcroughan> so cool
[07:33:23] <SnoopJ> and more importantly not exhaust your rate :)
[07:33:27] <matthewcroughan> that's the way it's supposed to be done
[07:33:34] <matthewcroughan> now is it stateless? lol
[07:33:39] <matthewcroughan> because the server's keeping the state, not me
[07:34:03] <SnoopJ> it's not stateless, but it should be managing the state properly(ish)
[07:34:07] *** Quits: venmx (~bertie@82-132-233-160.dab.02.net) (Read error: Connection reset by peer)
[07:34:16] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[07:34:26] <matthewcroughan> actually, no, I still have to check if it has increased
[07:34:38] <matthewcroughan> Actually, I don't
[07:34:44] * SnoopJ is confused
[07:34:46] <matthewcroughan> because the value I'm querying is a count, an incrementing thing
[07:34:49] * SnoopJ hurt himself in his confusion!
[07:35:01] <matthewcroughan> it can decrement only if the people who own the repo decide to remove issues manually
[07:35:18] <SnoopJ> either way, you're comparing to the value stored _in your program's state_ so it's not stateless, no
[07:35:20] <matthewcroughan> So I can get rid of the parsing only if we trust people to not remove issues
[07:35:44] <matthewcroughan> then, a modified value can be considered an increment, because that's really the way github is supposed to be used
[07:35:56] <SnoopJ> you still need to have state for the last-modified time you'll pass in the request
[07:36:04] <SnoopJ> so even if you rely on this 304 you're still holding state
[07:36:53] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:37:04] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[07:38:39] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[07:38:54] *** Parts: physkets (~physkets@user/physkets) ()
[07:39:18] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: puadxtub)
[07:39:52] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[07:41:09] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:41:35] <rannnn8888> Hey maybe Someone will be able to understand what's going on
[07:41:35] <rannnn8888> , I've been trying for days to figure it out,i run the script all 1 min,
[07:41:36] <rannnn8888> but after like a hour the script start work slow , like the concurrent.futures not work or stuck
[07:41:36] <rannnn8888> if i stop the script and run again its samke dont work . only if i restart my server its work again to hoaur +- its make me crazy :D
[07:41:37] <rannnn8888> https://dpaste.org/uKe9
[07:42:37] *** Quits: NeoCore (~neocore@138.199.47.155) (Quit: Leaving)
[07:42:55] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[07:45:21] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[07:45:23] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:45:58] <matthewcroughan> SnoopJ: https://dpaste.com/E776BERYB
[07:46:06] *** Joins: redir (~redir@157-131-92-184.fiber.dynamic.sonic.net)
[07:46:08] *** Quits: redir (~redir@157-131-92-184.fiber.dynamic.sonic.net) (Client Quit)
[07:46:09] *** Quits: arakimo (~arakimo@user/arakimo) (Quit: Leaving)
[07:46:11] <matthewcroughan> Now this results in it thinking there's a new value every single time if I increment it only once.
[07:47:09] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[07:47:11] *** Quits: raxor2k (~raxor2k@7.221.181.62.in-addr.dgcsystems.net) ()
[07:47:22] <matthewcroughan> I have to state `LAST_ISSUE_COUNT = ic` inside of each condition, right?
[07:47:26] <matthewcroughan> saving the state
[07:47:51] *** Joins: Celeo (~Celeo@user/celeo)
[07:48:12] *** Joins: aquijoule_ (~richbridg@213-225-12-210.nat.highway.a1.net)
[07:49:40] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:49:49] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 246 seconds)
[07:50:06] <SnoopJ> matthewcroughan, only in the ones where you want to update it
[07:50:41] *** Quits: aquijoule__ (~richbridg@213-225-12-210.nat.highway.a1.net) (Ping timeout: 258 seconds)
[07:50:46] <SnoopJ> which I think you want to do in the clause at L17 there, too
[07:51:27] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[07:52:34] *** Quits: mastardet (~mastardet@user/mastardet) (Quit: Client closed)
[07:52:54] *** Joins: djapo (~archangel@user/djapo)
[07:54:00] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Remote host closed the connection)
[07:54:02] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:54:45] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[07:55:48] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[07:58:36] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[07:59:05] *** Joins: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net)
[08:00:22] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:03:07] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:04:53] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:07:36] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:07:46] *** Joins: physkets (~physkets@user/physkets)
[08:07:50] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 250 seconds)
[08:09:20] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:09:23] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:09:25] *** Joins: Vonter (~Vonter@user/vonter)
[08:09:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[08:09:47] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:a874:b712:9670:8351) (Quit: Leaving)
[08:10:01] <physkets> SnoopJ grym These are a MWE code & data: http://ix.io/3r2S  http://ix.io/3r2T
[08:10:36] *** Lord_of_Life_ is now known as Lord_of_Life
[08:10:38] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[08:12:01] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[08:12:04] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:13:05] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[08:13:52] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:14:40] <NeilRG> what's the best progress bar library right now?
[08:14:42] <NeilRG> tqdm?
[08:15:11] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[08:16:04] <SnoopJ> physkets, aha, I see the problem. `dtype` must be a structured dtype in this case, which you can express as a list of 2-tuples (hence the 2). Here's a sample that works: https://bpa.st/QWLA
[08:16:33] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:17:28] *** Quits: Abrax (~Abrax@user/abrax) (Quit: Leaving)
[08:17:43] *** Joins: Abrax (~Abrax@user/abrax)
[08:18:19] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:18:38] <SnoopJ> you could use empty-strings there, too, since you don't really intend to make a structured array with this type. Not sure if there's another way to make a structured dtype that avoids the string, but the error suggests there isn't
[08:19:40] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[08:20:50] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:22:06] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[08:22:37] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:22:38] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[08:23:37] *** Joins: pnoud (~pnoud@user/pnoud)
[08:25:09] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:26:56] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:27:11] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[08:28:39] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 256 seconds)
[08:29:32] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:31:19] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:31:44] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[08:32:12] *** Joins: gline_ (~yashi@p508bea14.dip0.t-ipconnect.de)
[08:32:47] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[08:33:30] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[08:33:39] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:35:04] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[08:35:25] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:35:28] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:35:48] *** Quits: gline (~yashi@p508bebbc.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[08:35:50] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:37:13] *** Joins: justache (~justache@user/justache)
[08:37:14] *** Joins: shailangsa (~shailangs@host86-145-14-23.range86-145.btcentralplus.com)
[08:38:10] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:38:12] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:38:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:39:56] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:41:36] *** Quits: vbgunz_ (~vbgunz@35.141.71.47) (Ping timeout: 265 seconds)
[08:41:44] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[08:42:33] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:43:21] <physkets> SnoopJ: oh man! Thanks! I had no idea I was supposed to do that. I don't really understand though; what are those strings supposed to represent?
[08:43:54] *** Joins: nre (~nre@55d47e91.access.ecotel.net)
[08:44:21] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:46:04] *** Joins: P1RATEZ (piratez@user/p1ratez)
[08:46:50] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:47:17] <SnoopJ> physkets, the name of that "field". They're hard to understand out of the context of structured arrays, this is a good primer on those if you haven't seen them before: https://numpy.org/doc/stable/user/basics.rec.html
[08:48:37] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:48:41] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[08:49:15] *** Quits: exciteabletom (~tom@14-203-158-110.static.tpgi.com.au) (Remote host closed the connection)
[08:50:06] <SnoopJ> upshot: once you know these exist, you can do some very cool stuff with heterogeneous data
[08:50:27] <SnoopJ> I didn't actually know you could use loadtxt() like this, it's pretty neat :)
[08:51:06] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:52:22] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[08:52:53] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:53:29] <very_sneaky> anybody use artifactory to run their own pypi mirror?
[08:53:44] <Wulf> very_sneaky: nope. never heard of it.
[08:54:09] *** Joins: jdmark2 (~jdmark@67.8.137.130)
[08:54:25] <very_sneaky> seems to be targeting an "enterprise" solution, but their subscription model is very opaque and i can't tell what's required to enable pypi repositories
[08:55:31] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:57:16] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[08:57:41] *** Quits: t2mkn (~t2mkn@user/t2mkn) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[08:58:07] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 256 seconds)
[08:58:15] <llua> have you looked at pulp? https://pulp-python.readthedocs.io/en/latest/
[08:59:00] <SnoopJ> physkets, this might shed some light, too: https://bpa.st/GWXQ
[08:59:41] <very_sneaky> for interest: https://jfrog.com/integration/python-repository/
[08:59:50] <very_sneaky> llua: i haven't i'll take a look :)
[09:00:04] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:00:39] <very_sneaky> hough, my interest is mostly to better understand how it works - it's just been introduced at work, and we seem to be getting issues with mirroring in offline environments
[09:00:48] *** Joins: t2mkn (~t2mkn@user/t2mkn)
[09:01:51] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:03:35] <physkets> Thank you, SnoopJ !
[09:03:58] *** Parts: physkets (~physkets@user/physkets) ()
[09:04:33] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:05:14] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 244 seconds)
[09:06:19] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:07:05] *** Joins: control (guesswho@user/control)
[09:08:58] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:10:45] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:11:44] *** Joins: sazawal (~sazawal@2409:4043:510:d63:4cf8:749e:7ffe:b0d6)
[09:12:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[09:13:13] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:14:59] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:17:39] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:19:27] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:19:54] <tmart> What's a good way to represent a tristate "boolean" (for lack of a better word). I'm trying to model the following logic from the PNG specification: "This chunk shall appear for colour type 3, and may appear for colour types 2 and 6; it shall not appear for colour types 0 and 4". Was hoping not to use 2 variables like "is_required" and "is_optional"
[09:22:02] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:23:26] *** Joins: venmx (~bertie@82-132-233-160.dab.02.net)
[09:23:45] *** Quits: skylite (~skylite@2E6B2CD6.catv.pool.telekom.hu) (Ping timeout: 268 seconds)
[09:23:48] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:24:22] <Tashtari> tmart: You could pass around a lambda instead of a boolean, that takes whether-the-chunk-appears as a parameter and returns whether-this-is-okay.
[09:24:48] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[09:24:49] *** jdmark2 is now known as jdmark
[09:24:51] *** Quits: jdmark (~jdmark@67.8.137.130) (Quit: Leaving)
[09:25:06] *** Joins: jdmark (~jdmark@67.8.137.130)
[09:25:28] <tmart> I'm digging that, thanks Tashtari
[09:25:48] <Tashtari> _o>
[09:26:23] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:26:38] *** Quits: Lando-SpacePimp (~LandoCal@user/lando-spacepimp) (Ping timeout: 272 seconds)
[09:27:34] *** Quits: venmx (~bertie@82-132-233-160.dab.02.net) (Read error: Connection reset by peer)
[09:28:08] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:28:50] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[09:29:25] *** Joins: gline (~yashi@p508beab1.dip0.t-ipconnect.de)
[09:29:27] *** Quits: mkellis (~Calibellu@68.235.43.86) (Ping timeout: 265 seconds)
[09:30:01] *** Quits: emerent (~quassel@p200300cd5703bbd0ba27ebfffed28a59.dip0.t-ipconnect.de) (Remote host closed the connection)
[09:30:15] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[09:30:30] *** Quits: sazawal (~sazawal@2409:4043:510:d63:4cf8:749e:7ffe:b0d6) (Remote host closed the connection)
[09:30:50] *** Joins: sazawal (~sazawal@2409:4043:510:d63:ef07:ea8:caf6:f4e)
[09:30:52] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:31:21] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[09:31:49] *** Joins: emerent (~quassel@p200300cd5703bbd0ba27ebfffed28a59.dip0.t-ipconnect.de)
[09:32:39] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:32:46] *** Quits: gline_ (~yashi@p508bea14.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[09:32:48] *** Joins: stranac (~stranac@195.29.239.126)
[09:33:04] *** Joins: HaMsTeRs (~mx@121.202.42.198)
[09:33:10] *** Joins: sajran (~Thunderbi@2a02:a317:e438:d900:904d:d2ed:7f33:3fbb)
[09:33:15] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[09:34:32] *** Joins: jdmark2 (~jdmark@67.8.137.130)
[09:34:48] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[09:34:51] *** Joins: K285 (~K285@2409:4050:2dcc:8014:40c2:e9e:9511:3661)
[09:35:00] *** Quits: travaldo (~travaldo@159.203.88.148) (Quit: travaldo)
[09:35:10] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:36:29] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:36:29] *** Joins: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs)
[09:36:56] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:37:45] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[09:37:51] *** Quits: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt) (Ping timeout: 268 seconds)
[09:38:18] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 244 seconds)
[09:39:36] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:41:22] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[09:41:22] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:43:43] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:44:49] <jinsun> very_sneaky: we use artifactory at my company, no idea how the devops team set it up, but it mirrors pypi.org and conda.anaconda.org on demand, and we get our own namespaces where we upload wheels using http PUT, and add that url to the extra index url in pip config
[09:45:30] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:46:02] <very_sneaky> jinsun: yeah i've had good experiences when the usage situation isn't too esoteric
[09:46:34] <very_sneaky> jinsun: I assume your instance is internet-connected, so when a package doesn't exist in the artifactory cache it just reaches out to pypi?
[09:47:29] <jinsun> ya the artifactory server is allowed to connect to the internet directly for some urls
[09:48:06] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:48:16] <robinho> What would be the best appraoch to stream data but after not receiving anything for X seconds disconnecting? https://2.python-requests.org/projects/3/api/#requests.Response.iter_lines
[09:48:27] <jinsun> and we can see whether it fetched from cache or downloaded from the internet by adding a ?trace at the end of the url
[09:48:45] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Quit: afk)
[09:48:52] <very_sneaky> we do that as well, and it works great on that network. We also have a non-internet connected network that we're trying to provide a pypi mirror on. What i'm finding is that it still retains the entire pypi index, but not the binaries that go with it - so it's a bit of luck of the draw as to whether a package and its dependencies will pull down
[09:49:37] <very_sneaky> the problem being that because it has an index entry, that's all it will try to resolve, even if the binary isn't there. If it can't reach out to the internet, it then fails rather than going down the list of versions until it finds a binary
[09:49:53] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:50:19] <very_sneaky> anyway, i was trying to spin up an instance locally to test possible solutions out but it looks like pypi repo hosting is behind a subscription wall and not available in the free versions
[09:52:27] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:54:13] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:56:52] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:57:51] *** Quits: montybanksnyc (~montybank@2601:86:600:a2a:850d:defc:a9a0:173f) (Read error: Connection reset by peer)
[09:57:58] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[09:57:59] *** Quits: nre (~nre@55d47e91.access.ecotel.net) (Quit: Leaving.)
[09:58:29] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[09:58:39] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:01:14] *** Joins: Pseudocrat (~pseudo@user/pseudocrat)
[10:01:19] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:02:15] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[10:02:29] <jinsun> by "it" fails you mean pip? that is as expected, I think once it knows that a package is there in the index it is ok to assume that the download will succeed
[10:02:37] <jinsun> I guess the index will have to be recreated somehow based on the actual binaries that are available
[10:02:48] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[10:03:04] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:03:32] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 250 seconds)
[10:03:52] *** Joins: dvx (~dvx@185.63.97.64)
[10:04:07] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[10:05:46] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:06:42] *** Quits: sajran (~Thunderbi@2a02:a317:e438:d900:904d:d2ed:7f33:3fbb) (Remote host closed the connection)
[10:07:00] *** Joins: sajran (~Thunderbi@2a02:a317:e438:d900:904d:d2ed:7f33:3fbb)
[10:07:14] *** Quits: Pseudocrat (~pseudo@user/pseudocrat) (Ping timeout: 244 seconds)
[10:07:33] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:07:42] *** Joins: upsala (~zcb@193.32.249.132)
[10:08:14] *** Joins: ericlee (~ericlee@2601:647:4681:3420::1)
[10:08:22] *** Joins: aniruddha (~aniruddha@103.242.197.118)
[10:08:43] <ericlee> Hi, when using aiohttp to do get method, if I don't specify any write data, where the data is written to?
[10:08:54] <jinsun> robinho: you set the timeout when you create the request https://2.python-requests.org/projects/3/api/#requests.request
[10:09:05] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 265 seconds)
[10:09:34] *** Joins: Pseudocrat (~pseudo@user/pseudocrat)
[10:10:15] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:12:01] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:14:28] *** Quits: K285 (~K285@2409:4050:2dcc:8014:40c2:e9e:9511:3661) (Ping timeout: 246 seconds)
[10:14:34] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:15:53] *** Quits: DaNeenjah (~jake@adsl-74-230-9-207.hsv.bellsouth.net) (Quit: WeeChat 3.2)
[10:16:05] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 268 seconds)
[10:16:20] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:17:33] *** Joins: venmx (~bertie@82-132-233-160.dab.02.net)
[10:17:47] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 265 seconds)
[10:18:51] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:19:15] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[10:19:26] *** Quits: zmt01 (~zmt00@user/zmt00) (Quit: Gone.)
[10:20:39] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:21:38] *** Joins: m4v (~znc@ubuntu/member/m4v)
[10:22:03] *** Quits: venmx (~bertie@82-132-233-160.dab.02.net) (Read error: Connection reset by peer)
[10:22:35] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Quit: afk)
[10:22:45] *** Joins: clawh (~clawh@185.244.214.60)
[10:22:49] *** Joins: raub (~Raub_Voge@cpe-107-15-44-154.nc.res.rr.com)
[10:23:04] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:24:10] <ericlee> in the doc: When doing response.text in requests, you just read an attribute. The call to .get() already preloaded and decoded the entire response payload, in a blocking manner. aiohttp loads only the headers when .get() is executed, letting you decide to pay the cost of loading the body afterward, in a second asynchronous operation. Hence the await response.text().
[10:24:23] <raub> How do I do a "replace a pattern/line that is up to 10 lines below another line starting with pattern" in python? I know how to do that in sed but do not want to mix them together
[10:24:28] *** Joins: pnoud (~pnoud@user/pnoud)
[10:24:30] <ericlee> so that means only gets header + rc
[10:24:50] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:25:24] *** Quits: y2o (~y2o@pc-128-133-45-190.cm.vtr.net) (Remote host closed the connection)
[10:25:52] *** Joins: kwong (~kwong@user/kwong)
[10:25:52] *** Quits: kwong (~kwong@user/kwong) (Client Quit)
[10:25:59] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:26:12] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:26:20] *** Joins: y2o (~y2o@pc-128-133-45-190.cm.vtr.net)
[10:26:50] *** Joins: matsaman (~matsaman@user/matsaman)
[10:27:22] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[10:27:22] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:28:58] *** Quits: icy (~icy@user/icy) (Quit: ZNC 1.8.2 - https://znc.in)
[10:29:08] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:29:32] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 250 seconds)
[10:29:37] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[10:30:02] *** Quits: WizardGed (~WizardGed@user/wizardged) (Quit: Quit)
[10:30:57] *** Joins: WizardGed (~WizardGed@user/wizardged)
[10:31:46] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:32:15] *** Quits: sajran (~Thunderbi@2a02:a317:e438:d900:904d:d2ed:7f33:3fbb) (Remote host closed the connection)
[10:33:14] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[10:33:22] *** Joins: icy (~icy@user/icy)
[10:33:32] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:35:22] *** Joins: doev (~doev@p549d7096.dip0.t-ipconnect.de)
[10:36:06] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:37:54] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:40:36] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:41:29] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[10:41:41] *** Quits: P1RATEZ (piratez@user/p1ratez) ()
[10:42:22] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:42:32] <ApostleInTriumph> hello. I updated the theme of my notebook, using `jt`. Suddenly tqdm stopped working. can someone please help me figure what's going wrong? (stop working in the sense, wouldn't show the progress anymore)
[10:42:38] <ionface> raub, https://stackoverflow.com/questions/39619471/replace-multiple-lines-after-pattern-in-python/39620135#39620135
[10:43:17] <matsaman> so you did something and immediately there was a side effect? That seems like a straightforward cause
[10:43:34] <ApostleInTriumph> matsaman ha! i guess so
[10:44:55] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:45:08] *** Joins: chele (~chele@user/chele)
[10:46:37] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:39] *** Quits: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr) (Quit: Client closed)
[10:46:41] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:47:15] *** Joins: seednode (~seednode@user/seednode)
[10:47:37] *** Joins: nre (~nre@55d47e91.access.ecotel.net)
[10:47:40] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[10:48:05] *** Joins: manti7 (~manti7@176.10.104.94)
[10:48:25] *** Joins: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu)
[10:49:03] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:50:52] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:51:07] *** Joins: jdmark (~jdmark@67.8.137.130)
[10:51:39] *** Joins: K285 (~K285@2401:4900:4453:e0b1:745f:7f66:4fa7:de6)
[10:52:06] *** Quits: jdmark2 (~jdmark@67.8.137.130) (Ping timeout: 265 seconds)
[10:53:27] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:54:05] *** Joins: kosh (~kosh@user/kosh)
[10:54:58] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 246 seconds)
[10:55:14] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:55:17] *** Joins: d3sync (~d3sync@77.49.32.253.dsl.dyn.forthnet.gr)
[10:55:58] *** Joins: gusto (~Augustus@109.255.100.54)
[10:57:53] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:57:55] *** Joins: hendursaga (~weechat@user/hendursaga)
[10:58:14] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[10:59:35] *** Joins: pnoud (~pnoud@user/pnoud)
[10:59:38] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:00:07] *** Quits: jdmark (~jdmark@67.8.137.130) (Quit: Leaving)
[11:01:37] *** Joins: erhandsome (~erhandsom@user/erhandsome)
[11:02:00] *** Joins: rememberYou (~someone@user/rememberyou)
[11:02:14] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:e8a9:2da1:c165:2d9c)
[11:02:14] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:02:44] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 265 seconds)
[11:03:35] *** Joins: jhulten (jhulten@gateway/vpn/protonvpn/jhulten)
[11:03:48] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:04:02] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:06:35] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:08:21] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:09:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:09:59] *** Joins: N4G4R41 (~CircuitLo@user/n4g4r41)
[11:11:08] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:12:42] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:e8a9:2da1:c165:2d9c) (Ping timeout: 240 seconds)
[11:12:55] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:13:05] *** Joins: anas (~anas@196.224.51.199)
[11:14:08] *** Joins: knull (~knull@88-111-144-111.dynamic.dsl.as9105.com)
[11:15:19] *** Quits: knull (~knull@88-111-144-111.dynamic.dsl.as9105.com) (Client Quit)
[11:15:29] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:16:02] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[11:16:20] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[11:17:16] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:18:22] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[11:19:00] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:20:00] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:20:08] *** Joins: jazzy (~jaziz@2600:380:8753:52bc:dd15:cdbe:7359:7673)
[11:20:27] *** Quits: bigRoo (~user@131.236.54.84) (Remote host closed the connection)
[11:21:48] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:22:39] *** Joins: a6a45081-2b83 (~aditya@106.214.225.112)
[11:23:14] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[11:23:31] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 265 seconds)
[11:24:29] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:24:50] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[11:25:00] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[11:26:16] *** Quits: jhulten (jhulten@gateway/vpn/protonvpn/jhulten) (Remote host closed the connection)
[11:26:17] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:26:18] *** Quits: stranac (~stranac@195.29.239.126) (Ping timeout: 250 seconds)
[11:27:52] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 246 seconds)
[11:28:35] *** Quits: N4G4R41 (~CircuitLo@user/n4g4r41) (Remote host closed the connection)
[11:29:05] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:29:31] *** Joins: N4G4R41 (~CircuitLo@user/n4g4r41)
[11:29:45] *** Joins: alguien (~alguien@user/alguien)
[11:30:18] *** Quits: icy (~icy@user/icy) (Quit: ZNC 1.8.2 - https://znc.in)
[11:30:52] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:31:15] *** Quits: N4G4R41 (~CircuitLo@user/n4g4r41) (Client Quit)
[11:31:20] *** Joins: icy (~icy@user/icy)
[11:33:21] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:34:07] *** Joins: stranac (~stranac@195.29.239.126)
[11:34:18] *** Joins: varaindemian (~varaindem@86.124.78.162)
[11:35:09] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:37:13] *** Joins: pycode (~pycode@2001:b07:5d28:551:84e5:2733:3407:7044)
[11:37:44] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:39:13] *** Quits: zerok (~zerok@user/zerok) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[11:39:32] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:42:12] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:42:36] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[11:43:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[11:43:37] *** Quits: drew (~drew@user/drew) (Ping timeout: 246 seconds)
[11:43:51] <varaindemian> I currently have this form: https://pastebin.com/b1Ffrgiq and I want to create 6 separate tiles on the whole screen and when I click them to have access to the fields (1,2,3,4,5,6) and paste there the URL. Any starting point?
[11:44:29] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[11:44:33] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112)
[11:45:20] <matsaman> varaindemian: your paste is broken, and please don't cross post
[11:45:47] <varaindemian> sorry
[11:45:48] <varaindemian> https://pastebin.com/aEnGQg9V
[11:45:59] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[11:46:02] <varaindemian> matsaman ^
[11:46:54] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[11:46:55] *** Joins: jhulten (jhulten@gateway/vpn/protonvpn/jhulten)
[11:48:24] *** Joins: sebastianos (~sebastian@user/sebastianos)
[11:48:53] *** Joins: drew (~drew@user/drew)
[11:50:39] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 258 seconds)
[11:51:06] *** Quits: jhulten (jhulten@gateway/vpn/protonvpn/jhulten) (Ping timeout: 240 seconds)
[11:52:53] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Ping timeout: 252 seconds)
[11:53:31] *** Joins: unyu (~pyon@user/pyon)
[11:54:45] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[11:55:16] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[11:57:11] *** Joins: sajran (~Thunderbi@2a02:a317:e438:d900:904d:d2ed:7f33:3fbb)
[11:57:14] *** Joins: rendar (~rendar@user/rendar)
[11:57:25] *** Quits: a6a45081-2b83 (~aditya@106.214.225.112) (Quit: Konversation terminated!)
[12:00:36] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112) (Quit: Leaving)
[12:01:06] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112)
[12:01:20] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:01:24] *** Quits: jkl (~jkl@2600:1700:2420:6d10::3f1) (Ping timeout: 250 seconds)
[12:02:43] *** Joins: node1 (~node1@user/node1)
[12:02:51] *** Quits: pycode (~pycode@2001:b07:5d28:551:84e5:2733:3407:7044) (Remote host closed the connection)
[12:03:12] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[12:03:26] *** Quits: sajran (~Thunderbi@2a02:a317:e438:d900:904d:d2ed:7f33:3fbb) (Remote host closed the connection)
[12:03:41] *** Joins: securethemews (~securethe@2a00:23c4:1e98:ef00::4)
[12:04:06] *** Joins: stultusv (~Stultus_V@user/stultusv)
[12:04:33] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 256 seconds)
[12:04:58] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[12:06:30] *** Joins: Meteorhead (~Meteorhea@lfbn-idf1-1-703-113.w86-245.abo.wanadoo.fr)
[12:06:33] *** Joins: mspe (~user@tilde.team/user/mspe)
[12:07:55] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112) (Quit: Leaving)
[12:08:45] *** Quits: K285 (~K285@2401:4900:4453:e0b1:745f:7f66:4fa7:de6) (Quit: Client closed)
[12:09:51] *** Joins: especial (~especial@cm-84.214.207.74.getinternet.no)
[12:10:44] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[12:11:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:13:35] *** Joins: mexen (uid495612@user/mexen)
[12:14:03] *** Quits: stultusv (~Stultus_V@user/stultusv) (Quit: WeeChat 3.3-dev)
[12:14:24] *** Joins: stultusv (~Stultus_V@user/stultusv)
[12:14:28] *** Quits: stultusv (~Stultus_V@user/stultusv) (Client Quit)
[12:15:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:16:44] *** Joins: stultusv (~Stultus_V@user/stultusv)
[12:18:03] *** Joins: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b)
[12:19:45] *** Joins: pnoud (~pnoud@user/pnoud)
[12:20:02] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112)
[12:20:07] *** Joins: noneco (~noneco@dslb-090-186-083-254.090.186.pools.vodafone-ip.de)
[12:24:36] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 272 seconds)
[12:24:56] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[12:27:02] *** Joins: Mulugruntz (~Mulugrunt@2400:4152:2063:3100:857e:b84f:99e3:9c9c)
[12:28:57] *** Joins: ponadm (pony@gateway/vpn/protonvpn/ponadm)
[12:31:07] *** Quits: chha (~chhs@wikipedia/Bjelleklang) (Quit: Leaving)
[12:33:28] *** Joins: wattux (~wattux@212.51.23.106)
[12:36:50] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[12:37:13] *** Joins: aslicedbanjo (~aslicedba@81.141.54.228)
[12:37:39] *** Quits: d3sync (~d3sync@77.49.32.253.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[12:37:46] *** Joins: ssbr_ (~ssbr@c-174-61-157-141.hsd1.wa.comcast.net)
[12:38:05] *** Joins: spithash (~spithash@user/spithash)
[12:38:27] *** Quits: securethemews (~securethe@2a00:23c4:1e98:ef00::4) (Remote host closed the connection)
[12:39:32] *** Quits: jazzy (~jaziz@2600:380:8753:52bc:dd15:cdbe:7359:7673) (Ping timeout: 250 seconds)
[12:40:33] *** Quits: aquijoule_ (~richbridg@213-225-12-210.nat.highway.a1.net) (Quit: Leaving)
[12:40:47] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[12:40:48] *** Joins: aquijoule_ (~richbridg@213-225-12-210.nat.highway.a1.net)
[12:41:48] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[12:42:02] *** Joins: spithash_ (~spithash@user/spithash)
[12:42:18] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[12:42:24] *** Quits: snalty (~Shhh@user/snalty) (Ping timeout: 258 seconds)
[12:42:52] *** Quits: spithash_ (~spithash@user/spithash) (Killed (NickServ (GHOST command used by spithash)))
[12:43:16] *** Quits: moto (~moto@user/moto) (Ping timeout: 265 seconds)
[12:44:36] *** Joins: menace (~someone@user/menace)
[12:44:43] *** Joins: GiLgAmEzH (~gilgamezh@181.47.117.104)
[12:45:18] *** Joins: pnoud (~pnoud@user/pnoud)
[12:46:10] *** Joins: thepacket (~bitterbal@ip50.ip-92-222-207.eu)
[12:46:13] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Textual IRC Client: www.textualapp.com)
[12:47:15] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[12:48:12] *** Joins: BobbyKennedy (~textual@194.62.169.65.ipv4.parknet.dk)
[12:48:25] *** Joins: Nact (~l@host-85-27-124-155.dynamic.voo.be)
[12:51:30] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 240 seconds)
[12:51:39] *** Joins: JimMadge (~jim@host86-141-21-184.range86-141.btcentralplus.com)
[12:53:25] *** Joins: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com)
[12:53:43] *** Quits: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com) (Client Quit)
[12:53:57] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[12:54:18] *** Quits: drew (~drew@user/drew) (Ping timeout: 240 seconds)
[12:54:44] *** Joins: moto (~moto@user/moto)
[12:55:58] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[12:57:48] *** Joins: drew (~drew@user/drew)
[12:58:05] *** Joins: darksun (~darksun@user/darksun)
[12:58:21] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:2b2e:62ff:bd4a:55cb)
[12:59:03] *** Joins: N4G4R41 (~CircuitLo@user/n4g4r41)
[13:01:11] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:01:27] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Quit: The Lounge - https://thelounge.chat)
[13:02:23] *** Parts: sv (sid496265@user/sv) ()
[13:02:32] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[13:02:42] *** Joins: mcope (~matt@user/mcope)
[13:03:52] *** Joins: shad (~shad@user/shad)
[13:04:15] *** Joins: DodgeThis (~DodgeThis@246.102.90.149.rev.vodafone.pt)
[13:04:38] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Client Quit)
[13:05:11] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[13:08:37] *** Parts: BobbyKennedy (~textual@194.62.169.65.ipv4.parknet.dk) (Textual IRC Client: www.textualapp.com)
[13:08:54] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[13:09:13] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:10:40] *** Joins: neibo (~neibo@86.127.240.9)
[13:10:50] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[13:12:06] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[13:12:54] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:6518:f773:33d3:fb7d) (Read error: Connection reset by peer)
[13:13:03] *** Joins: jdmark (~jdmark@67.8.137.130)
[13:13:56] *** Quits: jmcantre2 (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[13:14:23] *** Joins: LemurP (~lemurp@109.74.190.250)
[13:14:29] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:15:06] *** Quits: anas (~anas@196.224.51.199) (Ping timeout: 240 seconds)
[13:19:42] *** Quits: control (guesswho@user/control) (Ping timeout: 272 seconds)
[13:22:39] *** Joins: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt)
[13:23:44] <m_tadeu> hi...I'm using vscode to attach to a running python code. the problem is, breakpoints are not working. the only way to make it stop is with the breakpoint() function. how can I fix this?
[13:23:52] <graingert> Crys: ssl.OPENSSL_VERSION_INFO >= (1, 1, 0, 7) is for 1.1.0g right?
[13:27:14] <jinsun> I have 5 things there for 1.1.1k,  (1,1,1,11,15), what is 15?
[13:28:24] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 258 seconds)
[13:28:26] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112) (Quit: Leaving)
[13:30:32] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:30:43] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Quit: Client closed)
[13:31:19] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 244 seconds)
[13:31:23] *** Quits: N4G4R41 (~CircuitLo@user/n4g4r41) (Quit: Quit)
[13:31:41] *** Joins: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[13:31:44] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[13:32:28] <lesshaste> I am trying to get MELPA installed. I edited my .emacs which now looks like https://bpa.st/T4WA . What do I need to do next? I want to install traad
[13:33:59] <lesshaste> (sorry.. wrong channel)
[13:34:38] *** Joins: manti7 (~manti7@176.10.104.94)
[13:36:20] <varaindemian> trying to open `/links` and I get error internal server error 500 https://pastebin.com/tpSLRF3Z
[13:36:38] <varaindemian> ` jinja2.exceptions.TemplateSyntaxError: expected token 'end of print statement', got 'j'
[13:36:38] <varaindemian> 127.0.0.1 - - [25/Jun/2021 11:28:33] "GET /links HTTP/1.1" 500 `
[13:37:41] <grawity> yeah I'm pretty sure you want value="{{ i }}{{ j }}" or at least something along the lines of value="{{ i + j }}"
[13:38:12] <grawity> well, the latter needs some stringification I guess, so not really shorter in the end
[13:40:46] <varaindemian> grawity that's what I want!
[13:41:11] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[13:41:22] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[13:44:59] *** Joins: emiel (~emiel@2001:981:f73:1:25b9:a02:25f9:41cd)
[13:45:06] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[13:45:50] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[13:46:15] *** Joins: Quack (~Quack@185.21.216.169)
[13:46:21] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[13:46:55] *** Quits: wattux (~wattux@212.51.23.106) (Ping timeout: 246 seconds)
[13:47:07] <varaindemian> grawity thank you!
[13:47:55] <varaindemian> grawity although the changes I make inside the html are not reflected in the app when I stop it and restart it with flask tun
[13:48:02] <varaindemian> `flask run`
[13:48:28] <varaindemian> how can I restart it and and not rebuild it from cash?
[13:48:42] <varaindemian> `flask run` command doesn't seem to help.
[13:53:05] <graingert> varaindemian: https://stackoverflow.com/a/64553577/833093 this thing?
[13:53:19] *** menace is now known as Deknos
[13:54:52] *** Quits: salpynx (~salpynx@121.73.84.248) (Quit: Connection closed)
[13:56:04] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[13:56:31] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[13:57:43] *** Quits: et (~et@user/et) (Quit: ZNC 1.8.0 - https://znc.in)
[13:58:40] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 252 seconds)
[13:59:04] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[14:02:03] *** Joins: et (~et@user/et)
[14:05:16] *** Quits: LemurP (~lemurp@109.74.190.250) (Ping timeout: 252 seconds)
[14:05:32] *** Quits: Meteorhead (~Meteorhea@lfbn-idf1-1-703-113.w86-245.abo.wanadoo.fr) (Quit: Client closed)
[14:06:35] *** Joins: Meteorhead (~Meteorhea@lfbn-idf1-1-703-113.w86-245.abo.wanadoo.fr)
[14:07:24] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[14:07:36] *** Joins: u0_a117 (~u0_a117@191.35.80.104)
[14:07:45] *** u0_a117 is now known as kk
[14:07:47] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:07:57] *** Joins: Ergo^ (~ergo@91.238.59.144)
[14:08:07] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:08:16] *** kk is now known as Guest5787
[14:08:20] *** Guest5787 is now known as Coder_000
[14:08:32] *** Quits: aniruddha (~aniruddha@103.242.197.118) (Quit: WeeChat 1.9.1)
[14:09:25] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 258 seconds)
[14:10:46] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[14:11:21] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[14:13:02] *** Joins: vassen (~vassen@185.3.35.16)
[14:16:56] *** Quits: Coder_000 (~u0_a117@191.35.80.104) (Quit: WeeChat 3.0.1)
[14:17:18] *** Joins: IHasFinger (~JJ_@2a02:c7f:fc54:ba00:302f:16ff:12b9:c3e0)
[14:17:41] <IHasFinger> hi guys any one still admin in freenode python channel? if yes they is a guy spamming the place
[14:18:01] <IHasFinger> his nickname is spamiiiddd
[14:19:11] <Yhg1s> IHasFinger: nope, it was forcibly taken over. Dont be on freenode. it's not a safe place to be.
[14:19:44] <IHasFinger> forcibly taken over? how does that work?
[14:20:17] <Yhg1s> IHasFinger: the new freenode operators went in and took over the channel. it's what IRC operators can do.
[14:20:51] <IHasFinger> guessing they are from microsoft
[14:20:55] <Yhg1s> IHasFinger: there's a lot of story around this (not just #python, but ~all open-source channels on freenode) available on the interwebs. pound-python.org has a primer.
[14:21:00] <Yhg1s> IHasFinger: no, quite the opposite.
[14:21:32] <Yhg1s> they are 'free speech' loonies, abusers, harassers, right wing nut jobs and people who got fooled by same.
[14:21:50] <fuz> yeah freenode's toast and all the civilised people came to liberachat :v
[14:23:08] <Yhg1s> IHasFinger: https://nedbatchelder.com/blog/202106/goodbye_freenode.html mentions how #python got disbanded.
[14:23:55] *** Joins: woohoiV5 (~woohoiV5@89-139-19-40.bb.netvision.net.il)
[14:26:51] <ssbr_> I'm a free speech loonie and even I don't like freenode :'(
[14:27:52] *** Quits: xsperry (~as@user/xsperry) (Ping timeout: 250 seconds)
[14:28:43] <Yhg1s> ssbr_: I did use quotes.
[14:29:07] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 265 seconds)
[14:29:07] *** Quits: upsala (~zcb@193.32.249.132) (Ping timeout: 265 seconds)
[14:29:11] <Yhg1s> (those loonies don't actually want free speech, they just don't want others to speak of them freely, or be held accountable for their own speech)
[14:29:32] <IHasFinger> wow Yhg1s mad moves
[14:30:30] <nedbat> IHasFinger: why would you suspect microsoft?
[14:30:55] *** Joins: upsala (~zcb@193.32.249.134)
[14:31:02] <IHasFinger> nedbat, lol sounds like something they will do to open source :)
[14:31:20] <Yhg1s> IHasFinger: in the 90s, maybe. Microsoft hasn't been like that for many, many years.
[14:31:38] <nedbat> IHasFinger: you need to catch up: microsoft does a lot of open source, including employing Guido van Rossum to work on Python.
[14:31:45] <Yhg1s> (they are better open-source citizens than many big companies.)
[14:31:59] <IHasFinger> good for them
[14:32:00] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[14:32:32] *** Quits: HaMsTeRs (~mx@121.202.42.198) (Remote host closed the connection)
[14:32:44] *** Joins: xsperry (~as@user/xsperry)
[14:32:52] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[14:32:57] *** Joins: HaMsTeRs (~mx@121.202.42.198)
[14:35:14] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[14:35:34] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[14:36:07] *** Quits: lacrymology (~lacrymolo@static-243-15-25-46.ipcom.comunitel.net) (Read error: No route to host)
[14:36:34] <IHasFinger> brb
[14:36:38] *** Quits: IHasFinger (~JJ_@2a02:c7f:fc54:ba00:302f:16ff:12b9:c3e0) (Read error: Connection reset by peer)
[14:37:03] *** Quits: vassen (~vassen@185.3.35.16) (Quit: Leaving)
[14:37:24] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[14:39:28] *** Joins: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr)
[14:39:31] <ApostleInTriumph> Hello, I've a map that has many-to-many relationship. For one-to-one or one-to-many, I can represent as a dict. What is the optimal datastructure for this mapping?
[14:40:05] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 258 seconds)
[14:40:07] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[14:40:21] *** Joins: snalty (~Shhh@user/snalty)
[14:40:55] <Yhg1s> ApostleInTriumph: there isn't a single 'optimal datastructure' for this in Python. You may be looking to use two dicts, though. many-to-one and one-to-many, with a unique key of some kind in the middle.
[14:41:27] *** Joins: pnoud (~pnoud@user/pnoud)
[14:41:53] <ApostleInTriumph> Yhg1s can you please suggest something along the lines of pandas?
[14:42:43] <Yhg1s> ApostleInTriumph: I can't help you with pandas, sorry.
[14:46:18] *** Joins: w0x12ef (~w0x12ef@60.10.194.47)
[14:49:09] *** Joins: LemurP (~lemurp@109.74.190.250)
[14:49:44] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[14:50:27] *** Joins: rannnn888875 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[14:52:14] <jor> I'd say the same way a relational db does it. Have a table/dataframe for the m2m with both ids. In pandas you can pretty much join those the same way you would in db/sql
[14:53:16] *** Quits: HaMsTeRs (~mx@121.202.42.198) (Quit: Konversation terminated!)
[14:53:18] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[14:56:00] *** Joins: devish (~devish@52.95.75.13)
[14:56:05] <devish> Is there a tool to visualize(better format) an API response? I am getting response like <MyResponse(list=[<xyz(capacity=<Asg(type ='Asg'......>
[14:56:11] *** Quits: w0x12ef (~w0x12ef@60.10.194.47) (Ping timeout: 258 seconds)
[14:57:41] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[14:57:42] *** Joins: gusto (~Augustus@109.255.100.54)
[14:58:01] <rannnn8888> Hey maybe Someone will be able to understand what's going on
[14:58:02] <rannnn8888> , I've been trying for days to figure it out,i run the script all 1 min,
[14:58:02] <rannnn8888> but after like a hour the script start work slow , like the concurrent.futures not work or stuck
[14:58:03] <rannnn8888> if i stop the script and run again its samke dont work . only if i restart my server its work again to hoaur +- its make me crazy :D
[14:58:03] <rannnn8888> https://dpaste.org/ZKe0
[14:58:57] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (Quit: Bridge terminating on SIGTERM)
[15:00:30] *** Joins: itok (sid418430@id-418430.charlton.irccloud.com)
[15:00:47] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[15:02:38] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[15:03:20] *** Joins: CombatVet (~c4@user/combatvet)
[15:04:28] *** Joins: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com)
[15:07:59] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:101a:c784:11b0:c2b7) (Quit: Leaving)
[15:08:43] *** Quits: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com) (Ping timeout: 246 seconds)
[15:08:43] *** Quits: shad (~shad@user/shad) (Ping timeout: 256 seconds)
[15:09:32] *** Quits: doev (~doev@p549d7096.dip0.t-ipconnect.de) (Quit: Client closed)
[15:09:40] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[15:09:40] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[15:09:40] *** Joins: bgardner (~bgardner@2001:470:69fc:105::8a8)
[15:09:40] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[15:09:40] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[15:09:40] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[15:09:40] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[15:09:40] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[15:09:40] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[15:09:40] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[15:09:40] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[15:09:41] *** Joins: penguinbrian (~penguinbr@2001:470:69fc:105::33d2)
[15:09:41] *** Joins: orbatos[m] (~orbatos@2001:470:69fc:105::3450)
[15:09:41] *** Joins: psydroid (~psydroid@user/psydroid)
[15:09:54] *** Joins: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27)
[15:09:55] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[15:10:53] *** Joins: shad (~shad@user/shad)
[15:10:55] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[15:12:15] *** Joins: todda7 (~torstein@178-147-168-100.haap.dm.cosmote.net)
[15:12:20] *** Quits: nre (~nre@55d47e91.access.ecotel.net) (Quit: Leaving.)
[15:12:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:12:56] *** Quits: Pseudocrat (~pseudo@user/pseudocrat) (Quit: WeeChat 3.1)
[15:13:28] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[15:13:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:14:13] *** Joins: gloomy (~ldorigo@2a02:a03f:679e:e700:718d:8beb:946b:9ee7)
[15:14:43] *** Joins: qpdb (~qpdb@user/qpdb)
[15:15:48] *** Quits: sazawal (~sazawal@2409:4043:510:d63:ef07:ea8:caf6:f4e) (Quit: Leaving)
[15:17:10] *** Joins: IHasFinger (~JJ_@2a02:c7f:fc54:ba00:dc23:e1c4:3b33:b03e)
[15:18:54] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112)
[15:19:31] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[15:19:53] *** Quits: IHasFinger (~JJ_@2a02:c7f:fc54:ba00:dc23:e1c4:3b33:b03e) (Read error: Connection reset by peer)
[15:20:34] *** Joins: nerdraven (~nerdraven@196.45.51.47)
[15:23:27] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[15:24:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[15:25:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:25:33] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[15:25:45] *** Quits: nerdraven (~nerdraven@196.45.51.47) (Quit: leaving)
[15:29:16] *** Quits: Meteorhead (~Meteorhea@lfbn-idf1-1-703-113.w86-245.abo.wanadoo.fr) (Quit: Client closed)
[15:30:15] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[15:30:18] *** Quits: p-i- (~Ohmu@node-mzz.pool-118-173.dynamic.totinternet.net) (Quit: Leaving...)
[15:31:07] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:13] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[15:31:42] *** Joins: nubonix (uid492751@id-492751.charlton.irccloud.com)
[15:32:02] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[15:32:23] <nubonix> looking for some help with pyqt5 [using a scrollable area to start and stop threads [qthreads can be stopped]] here is a complicated example of what im trying to do, but I only need to scrollable area mechanics and not the rest of the project, so I was hoping someone could help(edited) https://github.com/Strip3s/PhoenixBot .Heres what i go so far, but havent figured out how to add to the scrollable area. i havent implemented the
[15:32:23] <nubonix> New Task page yet https://bpa.st/JSFA
[15:33:10] *** Joins: entuland (~entuland@user/entuland)
[15:33:17] <nubonix> mm, i might have to rephrase that...
[15:33:23] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112) (Quit: Leaving)
[15:33:28] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[15:33:34] *** Joins: sudorm (~sudorm@2a01cb0083a9c10030d22e882be2e3bc.ipv6.abo.wanadoo.fr)
[15:34:44] *** Quits: todda7 (~torstein@178-147-168-100.haap.dm.cosmote.net) (Ping timeout: 252 seconds)
[15:35:20] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[15:35:28] <nubonix> looking for some pyqt5 help [scrollable areas]. I am basically trying to create a table, but this doesnt really do what I need it to from my understanding [of what i know]. I have seen what im looking for done via phoenixbot on github, but I havent been able t strip out the parts I need. Heres what I go so far  https://bpa.st/JSFA, but I am missing the new task page and with this being missing I am not able to add rows to the
[15:35:28] <nubonix> scrollable area / table
[15:35:42] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[15:35:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[15:36:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:39:17] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Textual IRC Client: www.textualapp.com)
[15:39:32] *** Joins: pnoud (~pnoud@user/pnoud)
[15:41:54] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:42:06] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 265 seconds)
[15:42:34] *** Joins: chele (~chele@user/chele)
[15:43:18] *** Quits: Abrax (~Abrax@user/abrax) (Quit: Leaving)
[15:44:44] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[15:45:37] *** Joins: bomzh1018 (~user@176.52.35.104)
[15:46:13] *** Parts: bomzh1018 (~user@176.52.35.104) ()
[15:46:18] *** Joins: bomzh1018 (~user@176.52.35.104)
[15:46:36] *** Parts: bomzh1018 (~user@176.52.35.104) ()
[15:46:37] *** Joins: bomzh1018 (~user@176.52.35.104)
[15:47:06] *** Quits: shad (~shad@user/shad) (Ping timeout: 240 seconds)
[15:47:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[15:47:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:48:32] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (Quit: utf-8 problems)
[15:49:00] *** Joins: magla (~gelignite@55d4266d.access.ecotel.net)
[15:50:04] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[15:50:37] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 258 seconds)
[15:51:05] <bomzh1018> What might be the reason to use pattern `lambda: Class`?
[15:51:06] <bomzh1018> Eg `person = graphene.Field(lambda: Person)` in Graphene
[15:52:52] *** Quits: bomzh1018 (~user@176.52.35.104) (Quit: Leaving.)
[15:52:59] <trace> I want a for loop with: for x,y,z in zip(a,b,c) but I want to store values in a,b or c
[15:53:01] <trace> how?
[15:53:06] *** Joins: bomzh1018 (~user@176.52.35.104)
[15:55:24] <trace> does zip() make a deepcopy ?
[15:55:25] *** Quits: emiel (~emiel@2001:981:f73:1:25b9:a02:25f9:41cd) (Quit: WeeChat 3.2)
[15:55:50] *** Joins: Mechanismus (~LabMonkey@2602:306:cf62:e270:e4b6:7e80:3dd0:ae03)
[15:56:09] <marienz> trace: zip() does not copy anything, and I do not understand your previous question
[15:56:57] <trace> you have a loop for x,y,z in zip(a,b,c)
[15:57:02] <trace> did you understand this?
[15:57:16] <marienz> bomzh1018: that'd give you a callable which (when called) gives you the class. A bit of a niche thing to need, but if you need it, not an unreasonable way of doing it.
[15:57:21] <marienz> trace: sure
[15:57:29] <jinsun> bomzh1018:seems like the lambda is useless there, it would be better to just pass the class directly `person = graphene.Field(Person)`
[15:57:44] <trace> and I want to use one of those variables in the for head
[15:57:51] <marienz> jinsun: no, that's just the class (one fewer times you'd call it to get an instance). They're different things.
[15:57:58] <trace> to store values inside of it that are to be stored from the body of the loop
[15:58:21] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:58:25] <dukwon> trace, i,(x,y,z) in enumrate(zip(a,b,c)) then a[i] = ...
[15:58:37] <jinsun> marienz: ah yes, I somehow added the parenthesis in the end in my mind
[15:58:42] <marienz> trace: I'm not sure I understand. Maybe you want to store the values in something else instead, and then after the loop throw away the original a, b and c, and replace them with the new ones you built?
[15:59:01] <trace> dukwon, thx
[15:59:05] <trace> I think this is it
[15:59:54] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:00:58] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[16:01:14] <bomzh1018> marienz: the thing is, sometimes they declare the field without lambda (eg `person = graphene.Field(Person)`), and sometimes with lambda, and I don't understand the difference - any thoughts/guesses?
[16:01:34] <marienz> bomzh1018: I'd have to read up on graphene to understand why you'd need that
[16:01:59] <bomzh1018> I'm reading through the docs, no explanation for it. Thanks for help, anyway!
[16:05:57] <gcbirzan> marienz: I mean, in that case, the API seems a bit weird.
[16:06:25] <bomzh1018> marienz: found the explanation! If you're interested, here it is: https://github.com/graphql-python/graphene/issues/461
[16:06:48] <gcbirzan> Oh, right.
[16:06:56] *** Joins: monohorn (~monohorn@user/monohorn)
[16:07:39] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 256 seconds)
[16:09:09] <gcbirzan> I guess that's a bit more sensible than the string thing django does, but for this thing I would've went with a graphene.self or something
[16:09:16] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 246 seconds)
[16:09:47] <gcbirzan> Though, that wouldn't solve two way links.
[16:11:29] *** Joins: pnoud (~pnoud@user/pnoud)
[16:12:37] *** Quits: devish (~devish@52.95.75.13) (Quit: Client closed)
[16:13:14] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[16:14:15] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[16:14:51] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[16:16:56] *** Quits: thnee (~thnee@h-85-24-144-199.A328.priv.bahnhof.se) (Quit: WeeChat 3.0)
[16:17:02] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[16:17:04] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 250 seconds)
[16:17:20] *** Joins: palasso (~palasso@user/palasso)
[16:17:56] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 250 seconds)
[16:20:41] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[16:21:01] *** Joins: jw_ (~njw@58.182.164.99)
[16:23:21] *** Quits: jw_ (~njw@58.182.164.99) (Read error: Connection reset by peer)
[16:23:23] *** Joins: nre (~nre@55d47e91.access.ecotel.net)
[16:23:42] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[16:23:51] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[16:24:49] *** Joins: jw_ (~njw@58.182.164.99)
[16:25:03] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:27:50] *** Joins: abc_ (~abc@user/abc)
[16:28:41] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[16:29:06] *** Joins: Liblx (~Alex@ip4d15ff03.dynamic.kabel-deutschland.de)
[16:29:20] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[16:29:34] <marienz> bomzh1018: ah, that'd do it (and https://github.com/graphql-python/graphene/blob/485b1ed325287fd721b13aac8b4ec872d6295c6a/graphene/types/utils.py#L38-L43 looks like you can also pass a string and it'll go and import it, another way some code avoids circular dependencies like that)
[16:29:38] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 250 seconds)
[16:29:39] *** Joins: zebrag (~chris@user/zebrag)
[16:29:48] <Feuermagier> need a bit of help with regex: re.sub('[/\\\\]+[^\x21-\x7E]+', '*', "UDP,_Sliding_Window,_TCP,_Stau-/Flusskontrolle.mp4.lock")
[16:30:12] <Feuermagier> I want all '\','/' and '.' replaced. doesn't seem to work here however
[16:30:56] *** Joins: chronon (~chronon@user/chronon)
[16:30:57] <Feuermagier> (all non-ascii characters should be replaced, too (the ones not in range of the second part)))
[16:32:24] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[16:33:04] *** Quits: jw_ (~njw@58.182.164.99) (Quit: jw_)
[16:33:31] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[16:33:39] *** Joins: brownan (~brownan@136.56.137.143)
[16:33:54] *** Joins: u0_a117 (~u0_a117@191.35.80.104)
[16:33:57] <bomzh1018> marienz: thanks!
[16:35:52] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:43] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:57] <marienz> Feuermagier: what you have there matches any number of / or \ characters followed by any number of non-printable-ascii characters. Your input has one /, but it's not followed by a non-printable-ascii character, so there's no match. Did you mean something more like '([/\\\\]|[^\x21-\x7E])+', perhaps? That does match something, but I'm not sure it matches what you want.
[16:37:18] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[16:37:37] <marienz> Feuermagier: err, where I said "any number" I meant "at least one" (both times)
[16:37:42] *** Quits: u0_a117 (~u0_a117@191.35.80.104) (Client Quit)
[16:37:43] <Feuermagier> marienz, just talked to the guys in #regex. yeah. I think that's what I need
[16:37:57] *** Joins: zeden (~zeden@user/zeden)
[16:38:17] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112)
[16:38:57] * marienz will happily defer to #regex on questions like this one
[16:39:23] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[16:39:25] <Liblx> hello, what it the best function/library to get the extrema of a chart? with scipy i am not really happy although i tried to adjust everything. is there a better solution?
[16:40:12] <Feuermagier> marienz, settled for '[./\\\\]+|[^\x21-\x7E]+'
[16:40:28] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 250 seconds)
[16:40:31] *** Joins: shad (~shad@user/shad)
[16:40:40] *** Quits: ionface (~ionface@user/ionface) (Read error: Connection reset by peer)
[16:40:57] *** Joins: zeden (~zeden@user/zeden)
[16:41:51] <marienz> makes sense
[16:41:52] *** Joins: ionface (~ionface@user/ionface)
[16:42:22] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[16:42:23] *** Quits: rannnn888875 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[16:44:02] *** Quits: bomzh1018 (~user@176.52.35.104) (Quit: Leaving.)
[16:45:36] *** Quits: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr) (Quit: Client closed)
[16:46:24] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[16:46:36] *** Joins: sajran (~Thunderbi@2a02:a317:e438:d900:904d:d2ed:7f33:3fbb)
[16:48:41] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 244 seconds)
[16:48:56] *** Joins: justinf210 (~justinf21@85.sub-97-43-192.myvzw.com)
[16:49:16] *** Quits: justinf210 (~justinf21@85.sub-97-43-192.myvzw.com) (Remote host closed the connection)
[16:50:45] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[16:51:42] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[16:52:10] *** Joins: varaindemian (~varaindem@86.124.78.162)
[16:55:51] *** Quits: especial (~especial@cm-84.214.207.74.getinternet.no) (Remote host closed the connection)
[16:56:14] *** Joins: justinf210 (~justinf21@85.sub-97-43-192.myvzw.com)
[16:56:15] *** Joins: wattux (~wattux@212.51.23.106)
[16:57:28] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 244 seconds)
[16:58:57] *** spithash is now known as phobos
[16:58:57] *** Joins: p-i- (~Ohmu@node-mzz.pool-118-173.dynamic.totinternet.net)
[16:59:30] <p-i-> How to background a task in asyncio? In trio I'd do start_soon(footask)
[17:01:12] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:01:25] *** Quits: gloomy (~ldorigo@2a02:a03f:679e:e700:718d:8beb:946b:9ee7) (Ping timeout: 246 seconds)
[17:03:10] *** Joins: Meteorhead (~Meteorhea@lfbn-idf1-1-703-113.w86-245.abo.wanadoo.fr)
[17:03:47] <habnabit_> p-i-, if you can't use trio, can you at least use anyio? it provides task groups (nurseries) for asyncio
[17:04:10] *** Joins: pnoud (~pnoud@user/pnoud)
[17:05:21] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:2b2e:62ff:bd4a:55cb) (Remote host closed the connection)
[17:05:57] *** Joins: DrNostril (~DrNostril@82.102.21.68)
[17:06:35] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:b401:1d9:cf08:e9d0)
[17:07:01] <p-i-> I'm using Trio for most components now, but my Telethon one is stubborn. I'll have to figure out how to wrap it. The more I use Trio the more I find myself resenting asyncio. But no time today.
[17:07:11] <habnabit_> p-i-, i use trio_asyncio for telethon
[17:07:28] <p-i-> Ah yes, I was looking at that today.
[17:07:55] <habnabit_> p-i-, turning any asyncio parts into trio-compatible ones as eagerly as possible to avoid touching asyncio
[17:08:30] <p-i-> So to make that work, I need to trio_asyncio_run() at the root, and then I think it's a single wrapperfunc to encapsulate any `await someaiobobbins`, right?
[17:08:35] *** Quits: justinf210 (~justinf21@85.sub-97-43-192.myvzw.com) (Ping timeout: 272 seconds)
[17:08:54] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:09:04] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 250 seconds)
[17:09:20] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[17:09:20] *** Joins: Konsgn (~Konsgnx3@66-109-34-138.static.firstlight.net)
[17:09:52] <p-i-> I pray that one day Python will embrace Trio as the goto async solution and leave aio to die peacefully.
[17:10:06] *** Joins: gloomy (~ldorigo@2a02:a03f:679e:e700:718d:8beb:946b:9ee7)
[17:10:59] <p-i-> But for now... I have to use `gather`? I'm reworking the innards of my telegram module.
[17:11:36] <habnabit_> p-i-, here's some code i have sitting around https://bpa.st/MDWA
[17:12:11] <habnabit_> oops one sec
[17:12:32] *** phobos is now known as spithash
[17:12:49] <habnabit_> p-i-, https://bpa.st/K63A
[17:13:18] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[17:14:12] *** Quits: monohorn (~monohorn@user/monohorn) (Quit: Client closed)
[17:14:12] *** Joins: N4G4R41 (~CircuitLo@user/n4g4r41)
[17:14:16] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[17:14:25] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[17:14:38] <anddam> can anyone point me to setuptools install_requires parsing docs?
[17:15:06] <p-i-> Thanks! I'll learn much from digging through that.
[17:15:21] <anddam> specifically I'd like to figure if a "foo@ git+git://…" item in list will always install from the git repo, even if package foo is already available in the environment
[17:15:42] *** Joins: ulu (~ulu@user/ulu)
[17:15:42] <anddam> I mean it seems to do so in my case, so I was trying to find where (if) this is documented
[17:16:31] *** Joins: monohorn (~monohorn@user/monohorn)
[17:16:43] *** Quits: DrNostril (~DrNostril@82.102.21.68) (Remote host closed the connection)
[17:16:52] <no_gravity> How is the typical setup to serve python via Apache? For PHP, when you do "apt install apache2 php", *.php files that are served are automagically are executed. Is there something similar for Python?
[17:17:08] *** Joins: DrNostril (~DrNostril@82.102.21.68)
[17:17:35] <habnabit_> no_gravity, don't you ask this same question every few months? the answer hasn't changed: people write WSGI or ASGI applications
[17:17:44] <habnabit_> no_gravity, nobody puts .py files in the docroot
[17:17:49] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[17:18:21] <no_gravity> habnabit_: I never asked that question.
[17:19:01] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[17:19:02] <no_gravity> habnabit_: You should check your anger problem: https://www.youtube.com/watch?v=X9jXnZS3ouU
[17:19:11] <Payam> hi
[17:19:15] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 265 seconds)
[17:19:16] <Payam> Happy midsummer
[17:19:36] <habnabit_> no_gravity, anger?
[17:20:03] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[17:20:39] <no_gravity> habnabit_: Nobody puts .py files in their docroot? Where do they put them? Shove them up their ass?
[17:21:23] <Payam> y u so srs
[17:21:25] <Payam> ?
[17:21:42] <no_gravity> This also looks promising: libapache2-mod-python
[17:22:08] *** Quits: shad (~shad@user/shad) (Read error: Connection reset by peer)
[17:22:16] *** Quits: N4G4R41 (~CircuitLo@user/n4g4r41) (Quit: Quit)
[17:22:30] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 250 seconds)
[17:23:13] *** Quits: nre (~nre@55d47e91.access.ecotel.net) (Quit: Leaving.)
[17:23:40] <habnabit_> 2020-11-04 [17:45:29] <no_gravity> What is the leanest way to serve a python file? With PHP, you can start with an html file and sprinkle in some PHP. Is something similar possible with Python?
[17:23:41] <habnabit_> 2020-11-04 [19:42:47] * no_gravity tries apt install libapache2-mod-python
[17:24:13] <no_gravity> habnabit_: Wow! My former me was very similar to me!
[17:24:25] *** Joins: opa (~adamitsch@cpe-212-85-170-66.cable.telemach.net)
[17:24:25] <no_gravity> habnabit_: Did I also come to a conclusion if that is the right way to go about it?
[17:24:47] *** Joins: shad (~shad@user/shad)
[17:24:53] <habnabit_> no_gravity, as the time before that, everyone else said "no, that isn't how anyone writes python web apps" and you complained
[17:25:08] <no_gravity> habnabit_: So how do you write python we apps?
[17:25:16] <habnabit_> no_gravity, WSGI or ASGI
[17:25:26] *** Quits: gloomy (~ldorigo@2a02:a03f:679e:e700:718d:8beb:946b:9ee7) (Ping timeout: 272 seconds)
[17:25:27] <no_gravity> habnabit_: How is that much different?
[17:26:01] <habnabit_> no_gravity, there's no docroot involved; an application object receives the whole request for any path and does its own routing
[17:26:29] <no_gravity> habnabit_: How does Apache even consider the file if it is not in the docroot?
[17:27:07] <habnabit_> no_gravity, you say 'serve anything under this path with this WSGI application', like a reverse proxy
[17:27:17] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[17:27:37] <no_gravity> habnabit_: Do you have a link or can you pastebin an example?
[17:27:53] <anddam> "no_gravity | This also looks promising: libapache2-mod-python"  <-- it has got "apache" in it, not promising at all…
[17:28:09] <habnabit_> https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/modwsgi/
[17:28:41] <no_gravity> habnabit_: Thanks
[17:28:54] <no_gravity> anddam: Apache works pretty well for me.
[17:28:56] <anddam> habnabit_: btw, stop the anger already
[17:29:08] <no_gravity> anddam: What's your issue with it?
[17:29:19] <anddam> no_gravity: the  documentation was a bit of a mess
[17:30:21] <no_gravity> Well, if that is the worst thing one can say about a software project, then it can't be that bad.
[17:30:30] *** Joins: twobitsprite (~twobitspr@107.13.51.62)
[17:30:46] <anddam> back 2.2 I think, also didn't particularly like having a thing like mod_php, I prefer separate processes that communicate
[17:31:01] <anddam> no_gravity: ohhh, my opinion is very much different apropos docs
[17:31:09] *** Joins: Crassus (~Crassus@user/crassus)
[17:31:22] <anddam> but it suits you, then all the best
[17:31:36] <anddam> x/it/ c/if it/
[17:31:47] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[17:31:56] <habnabit_> having code in the docroot is a liability; it's a common vector for a whole bunch of different kinds of potential failures
[17:32:03] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[17:32:04] *** Joins: qunzhong_luxian (~qunzhong_@68.235.43.142)
[17:32:05] <no_gravity> From what I grok reading about Python on the web, it needs a good bunch more boilerplate code to get going.
[17:32:50] <BtbN> Try writing C then :D
[17:33:04] <no_gravity> So what is the benefit of mod_wsgi over libapache2-mod-python?
[17:33:25] <habnabit_> like tumblr flubbing the <? by accident and leaking source files and credentials, or apache's behavior of 'try all suffixes' and uploading a file named whatever.php.jpg ..
[17:33:56] <habnabit_> 2020-11-04 [19:45:06] <_habnabit> no_gravity, mod_python is effectively a binding from apache's internals to python code, so you say 'execute this python script on authn', or '.. on authz', or '.. on an incoming http request to ths path'
[17:34:15] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[17:34:27] <no_gravity> habnabit_: "authn"?
[17:34:39] <habnabit_> no_gravity, authentication
[17:34:56] <no_gravity> habnabit_: And "authz"?
[17:35:00] <habnabit_> no_gravity, authorization
[17:35:29] <no_gravity> habnabit_: So what is the issue?
[17:36:01] <anddam> no_gravity: it's not like "apache2" isn't a lot of boilerplate on top of your interpreter
[17:36:02] <habnabit_> no_gravity, it's not like mod_php at all. it doesn't let you drop .py files in the docroot
[17:36:22] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 250 seconds)
[17:36:30] <no_gravity> habnabit_: I just tried and it worked. At least for index.py
[17:36:37] <habnabit_> no_gravity, "it worked"? what was in the file?
[17:36:52] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:37:28] <no_gravity> habnabit_: A print command that outputs a content type header and an html body.
[17:37:49] <habnabit_> no_gravity, sounds like cgi
[17:37:54] <anddam> BtbN: ah, you triggered my bookmark-memory
[17:37:57] <anddam> BtbN: https://learnbchs.org/
[17:38:04] <ali1234> yes, that is CGI and it works with any executable
[17:38:10] <anddam> x/ah/ c/ha/
[17:38:13] <ali1234> and it is also terrible
[17:38:26] <anddam> also, FCGI pain in the ass to debug
[17:38:38] <BtbN> no_gravity, both mod_wsgi and mod_python are horrible
[17:38:47] <BtbN> you don't want an python interpreter in your webserver generally
[17:38:51] <no_gravity> habnabit_: You still did not mention any benefit mod_wsgi would have over this.
[17:39:00] <no_gravity> BtbN: How would you go about it?
[17:39:07] <BtbN> uwsgi or gunicorn, whatever you prefer
[17:39:12] <BtbN> Or other similar solutions
[17:39:14] <Lartza> As was already said
[17:39:16] <habnabit_> no_gravity, i already said it means you don't have code in the docroot
[17:39:23] <Lartza> then reverse proxy like everyone else
[17:39:42] <BtbN> uwsgi has its own protocol and integrates nicely with Apaches proxy modules
[17:39:55] <BtbN> It's usually my choice to host python stuff
[17:39:58] <habnabit_> no_gravity, the WSGI model means that you don't have to stand up and tear down the entire python runtime on every request like CGI (or even mod_php..) requires
[17:40:26] *** Joins: pnoud (~pnoud@user/pnoud)
[17:40:27] <no_gravity> habnabit_: mod_php is pretty fast.
[17:41:20] <habnabit_> no_gravity, sure; php has optimized itself for this workload. python hasn't (and won't)
[17:42:29] *** Joins: jazzy (~jaziz@2600:380:8753:52bc:dd15:cdbe:7359:7673)
[17:42:35] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[17:42:39] <no_gravity> I am still undecided if I should try Python (With Django or Flask) for my next web project. Or use PHP with Symfony or Laravel.
[17:42:53] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[17:43:34] <no_gravity> There seem to be more Python developers out there. But how experienced are they with web applications?
[17:43:44] <habnabit_> no_gravity, https://fastapi.tiangolo.com/#example
[17:43:58] <Lartza> Very, there are more than enough web frameworks available
[17:44:15] *** Joins: {4144} (~{4144}@46.56.70.183)
[17:44:47] <no_gravity> Lartza: I would only go with Django or Flask. I prefer a heavily battletested foundation.
[17:44:59] <Lartza> Sure
[17:45:06] <Lartza> Falcon looks nice for API use
[17:45:19] <Lartza> And I'm sure someone insists on just using Pyramid
[17:45:22] <no_gravity> habnabit_: What's that?
[17:45:42] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[17:46:34] <habnabit_> no_gravity, fastapi is so widely used that they've influenced cpython's development to solve problems they bumped into
[17:47:04] <habnabit_> no_gravity, it's a newer style of python web framework that dramatically shrinks the amount of boilerplate
[17:47:12] <no_gravity> habnabit_: I am not in the "building APIs" business.
[17:47:19] <habnabit_> no_gravity, you want to serve html?
[17:47:37] <no_gravity> habnabit_: I like "Grab data from the DB, template it, send it to the browser" type of applications.
[17:47:57] <Liblx> hello, what it the best function/library to get the extrema of a chart? with scipy i am not really happy although i tried to adjust everything. is there a better solution?
[17:48:29] <Liblx> Sorry for the double-post, pressed the wrong key.
[17:48:51] <hodapp> not sure what you mean by the extrema of a chart
[17:49:09] *** Quits: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Quit: Leaving)
[17:49:21] <no_gravity> There was a web page or a video once that showed how to start an empty Django project with just one file. I might try that approach.
[17:49:32] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[17:50:23] <habnabit_> no_gravity, flask still doesn't have very good support for writing tests if that's a thing you do
[17:50:24] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:51:14] <no_gravity> habnabit_: I am more into end-2-end tests than unit tests.
[17:51:29] <p-i-> What's the correct way to background a task with asyncio?
[17:51:37] <p-i-> Do I need to use gather?
[17:52:49] *** Joins: darksun (~darksun@user/darksun)
[17:53:15] *** Quits: opa (~adamitsch@cpe-212-85-170-66.cable.telemach.net) (Quit: Leaving)
[17:53:23] <hodapp> asyncio.create_task?
[17:53:25] <bjs> p-i-: create_task
[17:54:00] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[17:54:08] *** Joins: badsektor (~badsektor@user/badsektor)
[17:54:25] <bjs> p-i-: gather is the best if you can do it
[17:54:34] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[17:54:58] <bjs> as it handles everything for you. create_task returns a Future and you basically always have to do some manual checking and cleanup at some point
[17:56:14] *** Joins: opa (~opa@cpe-212-85-170-66.cable.telemach.net)
[17:56:22] *** Joins: female_student_4 (~female_st@2a01:388:243:150::1:83)
[17:56:50] <female_student_4> Sorry, where is the C++ channel, please?
[17:57:37] <female_student_4> its okay found it thanks!
[17:57:50] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[17:58:46] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[18:00:49] *** Quits: magla (~gelignite@55d4266d.access.ecotel.net) (Quit: Stay safe!)
[18:01:41] <p-i-> Suppose I have four running processes, and one of them picks the event. There is an event every five seconds. What is a good way to ensure it only gets handled once?
[18:02:23] <p-i-> *aio tasks
[18:06:03] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3-dev)
[18:08:49] *** Joins: jbeimler (~jbeimler@75.177.73.34)
[18:09:21] *** Joins: xsx (~x@72.red-81-35-191.dynamicip.rima-tde.net)
[18:10:58] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[18:15:10] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[18:16:40] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 258 seconds)
[18:16:42] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[18:17:19] <xsx> Does package uploaded to PyPI should contain egg-info directory?
[18:17:33] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 244 seconds)
[18:17:33] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 244 seconds)
[18:18:09] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[18:19:49] *** Joins: alguien (~alguien@user/alguien)
[18:22:44] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 250 seconds)
[18:26:26] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[18:26:48] *** Quits: DrNostril (~DrNostril@82.102.21.68) (Remote host closed the connection)
[18:27:05] *** Joins: MrFantastik (~Thunderbi@98.1.50.67)
[18:27:13] *** Joins: DrNostril (~DrNostril@82.102.21.68)
[18:27:24] *** Quits: elcaro (~anonymous@45.32.191.75) (Quit: leaving)
[18:27:38] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[18:29:00] *** Joins: elcaro (~anonymous@45.32.191.75)
[18:29:59] *** Joins: sebastianos (~sebastian@user/sebastianos)
[18:30:26] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:30:32] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[18:31:15] *** Joins: jinsun (~quassel@user/jinsun)
[18:31:47] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-19fa-19fb-303f-0075.res6.spectrum.com)
[18:31:48] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[18:36:09] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 244 seconds)
[18:39:22] *** Quits: acid (~acid@user/acid) (Ping timeout: 268 seconds)
[18:39:27] *** Joins: fofoni_ (~fofoni@user/fofoni)
[18:40:02] *** Quits: monohorn (~monohorn@user/monohorn) (Quit: monohorn)
[18:40:17] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[18:40:17] *** Joins: acid (~acid@user/acid)
[18:40:58] *** Joins: VaniaPy (~VaniaPy@46.12.252.2.dsl.dyn.forthnet.gr)
[18:41:17] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[18:42:55] *** Quits: fofoni (~fofoni@user/fofoni) (Ping timeout: 256 seconds)
[18:43:42] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[18:46:02] *** Joins: orkim (~orkim@user/orkim)
[18:46:07] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[18:47:05] <habnabit_> xsx, just use twine to publish your package; it'll do it right
[18:47:08] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 272 seconds)
[18:47:36] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[18:47:55] *** Quits: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net) (Remote host closed the connection)
[18:48:19] *** Joins: matsaman (~matsaman@user/matsaman)
[18:48:32] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[18:49:39] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[18:49:48] *** Joins: gloomy (~ldorigo@2a02:a03f:679e:e700:718d:8beb:946b:9ee7)
[18:49:58] <xsx> habnabit_: as long as some additional files are not included. just noticed it included my local pyproject.py file that is not used with distribution
[18:50:33] <habnabit_> xsx, what do you put in it?
[18:51:30] <xsx> habnabit_: i use for local development, it includes much more packages than required and other stuff
[18:52:03] <habnabit_> xsx, it's an alternate setup.py?
[18:52:31] *** Quits: Notgnoshi (~nots@2001-48F8-8-40-2EF0-5DFF-FE04-24F7-dynamic.midco.net) (Quit: Leaving)
[18:52:39] *** Quits: wattux (~wattux@212.51.23.106) (Quit: Client closed)
[18:54:15] <xsx> habnabit_: yep, but only for my local development, my bad. anyway just veryfing what `setup.py sdist` produces to be sure all is good, and checked few other packages (e.g. black) that don't have dist-info or egg-info directory
[18:54:39] <habnabit_> xsx, don't use an alternate setup.py for that; use extras_require
[18:54:52] <habnabit_> xsx, ideally use setup.cfg instead of setup.py anyway
[18:56:49] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[18:56:49] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 244 seconds)
[18:57:15] *** Joins: Bardon (~Bardon@user/Bardon)
[18:57:26] *** Joins: aniruddha (~aniruddha@103.242.197.118)
[18:57:27] *** librenaut is now known as internaut
[18:57:31] <sybariten> good afternoon! I want to go through a string (which could be several words or just one word) and create a compound of all the capital letters in that string.
[18:58:00] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[18:58:18] <grym> ''.join([x for x in "FoO" if x.isupper()])
[18:58:27] <sybariten> If i first do a simple for eachCharacter in myString , will that work for the (outer) loop? In other words, will that go to each character, or would it look at each word?
[18:58:42] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 250 seconds)
[18:58:48] <habnabit_> grym, why the []
[18:59:01] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[18:59:25] <sybariten> didn't explain that very well maybe, i meant like this, if the sstring is "Alpha Beta Gamma", then the for thing will still look at each character right? Or in other words, spaces don't mean anythig special in a string
[18:59:32] *** Quits: sudorm (~sudorm@2a01cb0083a9c10030d22e882be2e3bc.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[18:59:36] *** Quits: Bardon_ (~Bardon@user/Bardon) (Ping timeout: 258 seconds)
[18:59:38] <grym> what i posted would return ABG
[18:59:50] *** Joins: argento (~argent0@168-227-97-29.ptr.westnet.com.ar)
[18:59:50] <grym> if run on that string
[18:59:53] *** Joins: ratrace (~ratrace@user/ratrace)
[18:59:55] <grym> whitespaces don't matter
[19:00:08] <grym> so if you gave it "Alpha BeTa Gamma", you'd get ABTG
[19:00:09] <sybariten> allright, thanks grym  . What does the "".join signify? I've seen and used it in other cases, why do we start with something emptyh?
[19:00:14] *** internaut is now known as librenaut
[19:00:27] <grym> sybariten: that's the separator character
[19:00:38] <grym> ",".join(...) would give you "A,B,T,G"
[19:00:43] *** Joins: twobitsprite (~twobitspr@66.115.175.38)
[19:00:52] *** Joins: paravida (~paravida@user/paravida)
[19:01:08] <sybariten> ooooh, i see.   Man, why couldnt they write those functions like bash tools or something  :)
[19:01:34] <grym> making strings with join is one of the weird feeling things
[19:01:37] <ratrace> Hello. I've built a custom prefix'ed python3.7 on debian bullseye (where regular packaged py is 3.9). I created a virtualenv based on that prefix, and once activated, I can start `python3.7`. But running pip throws ModuleNotFoundError: No module named 'pip._vendor.packaging'. HOWEVER, if I run pip with full path into virtualenv, it works. I'm obviously missing something here, not sure what.
[19:01:40] <grym> but once you know, you know
[19:01:59] <sybariten> grym: hehe yeah you agree that it feels a bit odd the way it's set up?
[19:02:03] <grym> ratrace: what does venv/bin/python -m pip do
[19:02:16] <grym> sybariten: it's an inversion that everyone goes "buh??" at the first time, yep
[19:02:36] <habnabit_> ratrace, (also look at using pyenv for installing alternate python versions; it's much easier)
[19:02:39] *** Joins: zumba_addict (~zumba_add@2601:240:4500:8320:4d13:46e7:735:15bc)
[19:03:08] *** Quits: VaniaPy (~VaniaPy@46.12.252.2.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[19:03:16] <sybariten> x for x in "FoO" if x.isupper() is also a very compact way to write it, i think i will go with some more dumb and longer approach first. But thanks!!
[19:03:38] <ratrace> grym: same error. And sorry, I meant I can run pip from the _prefix_ directory, but not the one from virtualenv, that always return the same pip._vendor.packaging error
[19:04:00] <ratrace> habnabit_: noted, thanks.
[19:04:09] <habnabit_> ratrace, how did you create the venv exactly?
[19:04:23] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112) (Quit: Leaving)
[19:04:38] <ratrace> virtualenv --python=/path/to/custom/prefix/python3.7 virtualenv-dir
[19:04:45] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112)
[19:05:07] <habnabit_> ratrace, can you try doing `/path/to/custom/prefix/python3.7 -m venv` instead?
[19:05:53] <Payam> I am learning wim
[19:05:54] <ratrace> habnabit_: huh.... that worked. yeah, I see
[19:05:55] <Payam> vim
[19:07:06] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.1)
[19:07:11] <ratrace> habnabit_: thanks. I should definitely get into the habit of using -m with explicit python path, not the `virtualenv` helper whatever
[19:07:33] <habnabit_> ratrace, virtualenv is an older tool that predates venv
[19:08:42] *** Joins: mkellis (~Calibellu@2607:9000:0:70::b31e)
[19:09:43] <ratrace> well that was easy. and here I was considering a whole chroot or a VM to get some legacy python3.7 working before upgradign that code to 3.9 compatibility :)
[19:10:16] <habnabit_> ratrace, nah. you just need pyenv at worst
[19:10:24] *** Quits: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[19:11:06] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[19:11:29] <sybariten> hmmm okay so i'm having a brain freeze apparently. I wanted to make it a bit different thatn grym's suggestion  https://bpa.st/QRSQ   so with a for loop like that i will get a list, but i need to do a simple add of every capital character to a new list right? How do i do that? (how do i continue)
[19:11:51] <habnabit_> sybariten, do you know how to append to a list?
[19:12:51] *** Joins: Fiji (~Fiji@user/fiji)
[19:13:19] <sybariten> habnabit_: uhh append ofcourse. newWordList.append(eachCharacter)   right?
[19:13:19] *** Joins: nre (~nre@55d47e91.access.ecotel.net)
[19:13:34] <sybariten> and it has to be defined before, maybe
[19:14:22] <habnabit_> sybariten, sounds like you've got it
[19:14:23] *** Joins: akk (~akk@75.161.144.97)
[19:14:49] <sybariten> but my lint says no  :)
[19:14:51] <grym> sybariten: https://bpa.st/YHWQ ?
[19:15:43] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:15:48] <ratrace> habnabit_: I know of the tool but I really don't do this .... at all. this is an exception caused by me prematurely upgrading the dev server to bullseye with 3.9, while the application being developed still relies on 3.7
[19:16:10] <ratrace> was faster to get the tarball, build it, virtualenv it, than to figure out how to get pyenv on bullseye :)
[19:16:34] <grym> ratrace: curl https://pyenv.run | bash really doesn't take very long to type :P
[19:16:52] <ratrace> curl | bash is something we hang people around here :/
[19:17:03] *** Quits: nre (~nre@55d47e91.access.ecotel.net) (Client Quit)
[19:17:04] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[19:17:04] <grym> eh
[19:17:07] <SnoopJ> yikes
[19:17:09] <ratrace> curl | sudo bash will get you insta-shot instead :)
[19:17:21] <grym> i pip install git+
[19:17:23] <grym> what's the difference
[19:17:23] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[19:17:59] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[19:18:04] <grym> but if you insist, manually cloning https://github.com/pyenv/pyenv-installer is also quick
[19:18:48] *** Quits: opa (~opa@cpe-212-85-170-66.cable.telemach.net) (Ping timeout: 272 seconds)
[19:19:11] <ratrace> jokes aside, the pyenv.run isn't really mentioned by the pyenv GH readme. so yeah, for me, 'twas faster to build python, than it'd take to read through the READMe which still doens't mention the trick
[19:19:43] <grym> ratrace: it's a separate repo by the same org, which i just linked
[19:20:09] <sybariten> grym: yeah i actually did something like this. Thanks . But your first suggestion is obviously much more compact, it's nice how the join encapsulates the for loop somehow. I need to learn that technique. And thanks habnabit_ too
[19:20:12] <grym> https://github.com/pyenv/pyenv#the-automatic-installer
[19:20:18] *** Joins: abraxas (~abraxas@2600:8805:c880:3:c7fe:fc8e:f2cc:8056)
[19:20:19] <grym> sybariten: and the comprehension
[19:20:34] <grym> sybariten: which i just baked right into the join because it's about as much work for one line as makes sense
[19:20:44] <ratrace> that's way down in the README. my EPYC server built python with -j32 before the end of third paragraph :)
[19:20:49] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[19:22:24] <grym> brrrrrr
[19:23:00] *** Joins: paravida_ (~paravida@user/paravida)
[19:23:33] <ratrace> understood tho, and thanks for the pointers. in the future if I ever need it, I'll probably consider it, but really building from tarball and getting -m venv run properly was soooo much faster than even getting acquainted with pyenv, 's my point.
[19:23:47] *** Quits: female_student_4 (~female_st@2a01:388:243:150::1:83) (Quit: Client closed)
[19:24:03] *** Quits: JimMadge (~jim@host86-141-21-184.range86-141.btcentralplus.com) (Quit: WeeChat 3.2)
[19:24:13] <habnabit_> (iff you have all the build deps already installed.. that's a thing pyenv warns you about)
[19:24:32] <grym> probably not as much as you'd think, but pyenv really shines when you want to have like 14 versions :)
[19:24:45] *** Quits: paravida (~paravida@user/paravida) (Ping timeout: 272 seconds)
[19:24:47] *** Quits: fofoni_ (~fofoni@user/fofoni) (Remote host closed the connection)
[19:24:55] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[19:25:07] *** Joins: fofoni_ (~fofoni@user/fofoni)
[19:25:15] <very_sneaky> i was under the impression that `virtualenv` was preferable over `venv`
[19:25:30] <grym> very_sneaky: other way around, these days, i should think
[19:25:53] <very_sneaky> did this change recently?
[19:25:57] <very_sneaky> like in the past.. year?
[19:26:01] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[19:26:15] <grym> i've been preferring venv over virtualenv since 3.6 or so
[19:26:34] *** Joins: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net)
[19:27:31] <grym> on the grounds of "why bother installing this other thing"
[19:27:41] <grym> venv is stdlib that actually works great, so.. that's fine by me
[19:28:24] <ELFrederich> Hi, my son is learning some programming on Khan Academy which uses JavaScript with the "Processing" library.  I was looking to see if they had a Python port of Processing.  Found it, but seems to be implemented via Jython which is stuck at Python 2.7 language.
[19:28:30] *** Quits: qunzhong_luxian (~qunzhong_@68.235.43.142) (Quit: Textual IRC Client: www.textualapp.com)
[19:28:38] *** paravida_ is now known as paravida
[19:28:53] <very_sneaky> https://virtualenv.pypa.io/en/latest/: "Since Python 3.3, a subset of it [virtualenv] has been integrated into the standard library under the venv module. The venv module does not offer all features of this library"
[19:28:57] <ELFrederich> Anyone know if Jython is abandoned, is it superseded by some other Python/Java bridge/interop library?
[19:29:25] <nedbat> ELFrederich: drawbox is like processing for python, but only runs on mac
[19:29:39] <nedbat> sorry, drawbot
[19:29:50] <very_sneaky> seems like virtualenv still claims to be superior, at least as at 14 Feb 2020
[19:29:59] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[19:30:27] <very_sneaky> grym: depends on your OS - on debian/ubuntu you still need to install venv using the system package manager
[19:30:30] <very_sneaky> god knows why though
[19:30:43] <grym> very_sneaky: nonsense, i ignore ubuntu's pythons completely because they suck :)
[19:30:58] <grym> see above re: pyenv
[19:31:08] *** Quits: orbatos[m] (~orbatos@2001:470:69fc:105::3450) (Changing host)
[19:31:08] *** Joins: orbatos[m] (~orbatos@user/orbatos)
[19:31:18] <grym> the OS python can do whatever it wants, my user doesn't know it exists
[19:31:25] <very_sneaky> no dispute, was just stating that their system distribution doesn't ship with venv module
[19:31:38] *** Quits: MrFantastik (~Thunderbi@98.1.50.67) (Quit: MrFantastik)
[19:31:41] <very_sneaky> pyenv circumvents that. i use it too :)
[19:31:43] <grym> their system distribution is broken, stupid, and ignorable :)
[19:31:50] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[19:31:50] <grym> https://gist.github.com/tiran/2dec9e03c6f901814f6d1e8dad09528e
[19:31:54] <nedbat> very_sneaky: debian has a packaging philosophy that differs from python's philosophy
[19:32:01] <ELFrederich> nedbat, I'm very close to buying a mac but can't bring myself to it.  I want it for music production.  If they had a laptop or 2-in-1 with touch support... or if their iPads would actually run OSX I'd buy one.
[19:32:03] *** Joins: pnoud (~pnoud@user/pnoud)
[19:32:25] <very_sneaky> nedbat: i'm sure :)
[19:32:30] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[19:32:46] <grym> very_sneaky: nedbat is being polite so i'd like to prepend a "for the python developer's needs, " to my message of :01
[19:34:05] <grym> presumably it's a sensible solution for distro packages that need subsets of python to function, but that's not my itch
[19:34:08] <ELFrederich> nedbat, if iPad Pro could run full version of GarageBand instead of iOS version, or Ableton Live... I'd be all about it.  I can justify buying 1 overpriced piece of hardware, but not 2.
[19:34:13] *** Quits: Nact (~l@host-85-27-124-155.dynamic.voo.be) (Quit: Konversation terminated!)
[19:34:29] <nedbat> ELFrederich: i am certainly not trying to dictate your purchases :)
[19:34:52] <ELFrederich> thanks for suggestion though on drawbot.  I'm looking for something cross-platform.
[19:35:13] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[19:35:15] <very_sneaky> it's actually interesting that this is an issue with ubuntu/debian almost exclusively - basically my only interaction with those distro's is through CI runners, where you want it to all work out of the box, as you would expect on any platform
[19:36:07] <jiffe> with python can you mix async with sync ?
[19:36:19] <grym> very_sneaky: i do truly evil things in dockerfiles sometimes
[19:36:28] *** Joins: anas (~anas@196.224.48.251)
[19:36:35] *** Joins: Notgnoshi (~nots@2001-48F8-8-40-2EF0-5DFF-FE04-24F7-dynamic.midco.net)
[19:36:37] <jiffe> with asyncio seems you'd have to run a loop which would really tie you to async
[19:36:43] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[19:36:45] <very_sneaky> grym: lol tell me about it
[19:36:52] *** Joins: nre (~nre@55d47e91.access.ecotel.net)
[19:37:06] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: leaving)
[19:37:12] <very_sneaky> grym: i'm sure there's a lot of collective shame from devs around the world when it comes to dockerfiles
[19:37:22] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:37:29] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[19:37:38] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[19:37:46] *** Joins: newdimension (~newdimens@171.red-83-47-155.dynamicip.rima-tde.net)
[19:38:02] *** Joins: supakeen (~user@python/site-packages/supakeen)
[19:38:03] <grym> very_sneaky: i added A Comment, it's fiiiiine: https://bpa.st/PXPA
[19:38:19] <grym> i'm especially proud of the last two lines :D
[19:38:41] <newdimension> Hi -- I've been away from IRC for a while. Is this the same #python from freenode? I'm reading posts about a migration
[19:38:44] *** Joins: alguien (~alguien@user/alguien)
[19:38:47] <grym> newdimension: yup, you found us
[19:38:57] <very_sneaky> lol
[19:38:58] <ELFrederich> There's Jython, Py4J, and I thought there was a 3rd one out there
[19:38:58] <jiffe> I'm trying to figure out I would add a tcp client to something that's already doing something else, ie run the tcp connect and recv/sends via asyncio but leave the other logic in place, maybe call a single asyncio loop every once in a while to poll for activity
[19:39:06] <newdimension> grym: :)
[19:39:20] *** Quits: akk (~akk@75.161.144.97) (Remote host closed the connection)
[19:40:18] *** Quits: DrNostril (~DrNostril@82.102.21.68) (Remote host closed the connection)
[19:40:38] *** Joins: DrNostril (~DrNostril@82.102.21.68)
[19:41:40] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:42:19] <habnabit_> jiffe, what does the rest of the code do?
[19:44:00] *** Joins: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net)
[19:44:15] *** Quits: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs) (Ping timeout: 265 seconds)
[19:44:24] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:44:24] *** Joins: acresearch (~acresearc@user/acresearch)
[19:44:31] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[19:44:40] <gitesh> can I go to siblings in directories, files and folders?
[19:44:49] <gitesh> to give a path to open function
[19:45:04] <gitesh> do i always need to go to parent directory, right?
[19:45:08] <acresearch> people if i have serversocket.bind(('localhost', 9000)) for a server    why can't i use fhand = urllib.request.urlopen('localhost:9000') as client? i get "Address already in use"
[19:45:09] <habnabit_> gitesh, https://docs.python.org/3/library/importlib.html#module-importlib.resources
[19:45:22] <grym> gitesh: it depends on your scripts pwd, which is dodgy
[19:45:31] <grym> gitesh: better to normalize paths, when you can
[19:47:58] *** Joins: derelict (~derelict@user/derelict)
[19:48:23] *** Joins: ray (~ray@user/re)
[19:48:24] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[19:48:25] *** Quits: wei2912 (~wei2912@112.199.250.21) (Quit: Lost terminal)
[19:48:32] *** Quits: ripdog_ (~quassel@user/ripdog) (Ping timeout: 250 seconds)
[19:48:34] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[19:49:34] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Ping timeout: 265 seconds)
[19:49:55] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[19:50:21] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 256 seconds)
[19:50:49] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 268 seconds)
[19:51:47] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[19:52:28] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 265 seconds)
[19:52:30] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[19:53:25] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:53:55] *** Quits: newdimension (~newdimens@171.red-83-47-155.dynamicip.rima-tde.net) (Quit: Leaving)
[19:54:12] *** Joins: MrFantastik (~Thunderbi@2603-7080-ae03-948a-df50-9334-2200-b3b6.res6.spectrum.com)
[19:55:02] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[19:55:20] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca)
[19:56:06] <bancroft> Is there an easy way to make 100,000-ish files distributed over multiple sub directories for a test?
[19:56:06] *** Joins: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com)
[19:56:10] *** Joins: newdimension (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com)
[19:56:23] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[19:56:39] <very_sneaky> bancroft: couple of for loops?
[19:56:43] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:56:48] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[19:57:10] <bancroft> yeah, might have to do that eh
[19:57:24] <bancroft> oh friday
[19:58:11] <grym> bancroft: with TemporaryDirectory, i should hope
[19:58:32] <bancroft> grym: always :)
[19:59:15] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:59:22] *** Quits: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[20:00:16] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[20:01:02] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:01:18] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 252 seconds)
[20:01:48] *** Joins: ripdog (~quassel@user/ripdog)
[20:01:52] *** Quits: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com) (Ping timeout: 272 seconds)
[20:03:36] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:03:54] *** Joins: ntdll (~ntdll@user/ntdll)
[20:03:57] *** Quits: filePeter (~filePeter@user/filepeter) (Quit: leaving)
[20:04:06] <SnoopJ> bancroft, distributed how?
[20:04:55] *** Joins: pnoud (~pnoud@user/pnoud)
[20:05:12] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[20:05:15] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[20:05:22] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:05:31] <bancroft> SnoopJ: just randomly, 500 in this folder, 400 there, doesn't really matter. I'm trying to reproduce a problem with ansible
[20:05:32] *** Quits: tims (~tims@193-82-247-42.tpgi.com.au) (Ping timeout: 244 seconds)
[20:07:18] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:08:06] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:08:11] <bancroft> ah haaa, I could git clone a huge repo and then do a find+delete the contents of each file
[20:08:51] *** Joins: akk (~akk@75.161.144.97)
[20:09:05] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[20:09:22] <SnoopJ> bancroft, `all_subdirs = [pth for pth in TARGET_PATH.glob("**") if pth.is_dir()]; dests = random.choices(all_subdirs, k=N)` maybe, then `testfiles = [dst.touch(random_filename()) for dst in dests]`
[20:09:41] *** Joins: sbanwart (~sbanwart@cpe-174-100-90-239.neo.res.rr.com)
[20:09:52] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:10:00] <SnoopJ> err, dst.joinpath(random_filename()).touch() rather
[20:10:06] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[20:10:21] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[20:10:30] <bancroft> SnoopJ: you're too quick, thanks
[20:10:31] *** Joins: reset (~reset@user/reset)
[20:10:43] <SnoopJ> bancroft, usually faster than my brain can keep up, hence the mistakes :)
[20:11:10] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[20:12:00] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 272 seconds)
[20:12:09] *** Joins: GrandPa-G (~GrandPa-G@www.rgconsulting.com)
[20:12:22] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:12:23] *** Joins: justinf210 (~justinf21@85.sub-97-43-192.myvzw.com)
[20:13:38] *** Joins: _ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net)
[20:14:09] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:14:29] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[20:14:39] <GrandPa-G> I have a python3 program on Raspberry. It has a for loop for n iterations. It does a few things, then does a wait(timeout=), then does one more thing and back to top. During one run, it appears to have stopped running for about 1 1/2 hours either at very bottom of loop or somewhere at top of next.
[20:14:45] *** Quits: nre (~nre@55d47e91.access.ecotel.net) (Quit: Leaving.)
[20:14:52] *** Quits: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net) (Remote host closed the connection)
[20:15:17] <GrandPa-G> I know this is vauge and I can't show code, but any thoughts on how this could just suspend from running? It seems arbritary when this happens.
[20:16:24] <supakeen> It's too vague but the kernel can pause processes, you could verify if there's any related messages in syslog before you dive into the code.
[20:16:51] <ammar2> also how do you know it's stopped at the bottom of the loop or near the top?
[20:16:53] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:16:57] <ammar2> is the python process still alive?
[20:17:05] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[20:17:51] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[20:18:41] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:18:58] *** Joins: PdimH (~pdimh@user/pdimh)
[20:19:02] <Nalt> I use Jupyter Lab for my small projects. In the Jupyter terminal, can I open python files to edit? I know I can just use my mouse and directory, but i am curious about this.
[20:19:33] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[20:20:36] <SnoopJ> Nalt, you can do anything you could do in a 'normal' terminal in the Jupyter terminal
[20:21:00] <GrandPa-G> ammar2, I have something that prints at various parts of the loop. One prints at very bottom and did print. No prints during the loop for next iteration printed.
[20:21:02] <SnoopJ> well, invocation of commands, anyway; the way it draws to the screen is a little idiosyncratic and that might break some apps, but I'm pretty sure I've used vim from it before
[20:21:16] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[20:21:26] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:21:30] <GrandPa-G> ammar2, yes, the process was alive as when that time passed it just keep processing as if nothing happened
[20:22:14] <Nalt> SnoopJ, okay. So how do I open the file to edit from the terminal? I've just been clicking on the file and it opens up an edit page
[20:22:45] <SnoopJ> Nalt, `your_preferred_editor_cmd path/to/that/file.py`
[20:23:15] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:23:29] <SnoopJ> assuming you have the terminal open already; I'm not sure you can use the point-and-click UI to automagically spawn a terminal and run a command in the stock version, but you could definitely do this with an extension
[20:23:47] <Nalt> but the editor is jupyter lol..
[20:23:56] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 258 seconds)
[20:24:24] <grym> Nalt: what does `open file.py` do in terminal?
[20:24:31] <SnoopJ> Nalt, Jupyter is a user interface that contains several editors.
[20:24:48] <SnoopJ> It also contains a terminal, and you can run stuff in that terminal, but there aren't really shortcuts for doing that. You open the terminal, then run your command.
[20:25:55] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:26:00] <grym> Nalt: if you're in the terminal, and want to type a command and have a new tab open in jupyterlab that contains that file, i don't know how to do it
[20:26:11] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[20:26:18] <grym> in the jupyterlab terminal*
[20:26:18] <Nalt> no worries.
[20:26:26] *** Joins: nerdraven (~nerdraven@196.45.51.47)
[20:26:53] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 2.3)
[20:26:54] <Nalt> the whole point of juptrer is to have a UI so :P
[20:27:03] <SnoopJ> kiiiinda
[20:27:10] <SnoopJ> it's a big project
[20:27:30] <grym> Nalt: clicky clicky is UI, right :)
[20:27:40] <Nalt> uh, I mean I thought
[20:27:42] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:27:53] <matsaman> anyway, you should still be able to open a file from the terminal, and have it open in the same jupyter IDE/window/whatever that's already open
[20:27:56] <matsaman> most likely
[20:28:07] <Nalt> anyway, what about notebook vs lab? what's the diff?
[20:28:09] <SnoopJ> I think you'd have to reload it from the UI to see the changes
[20:28:16] <Nalt> it looks different for sure
[20:28:24] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[20:28:30] <SnoopJ> Nalt, Notebook is just the notebook interface, but in a browser. Lab is more like an IDE.
[20:29:12] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[20:29:32] <SnoopJ> much of the machinery related to notebook cells is the same, JupyterLab is basically unifying all the things that were distinct components in the old versions
[20:29:41] *** Quits: sbanwart (~sbanwart@cpe-174-100-90-239.neo.res.rr.com) (Ping timeout: 265 seconds)
[20:30:25] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:32:11] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:33:13] *** Joins: jkl (~jkl@2600:1700:2420:6d10::3f1)
[20:34:18] *** Joins: Barones (~Barones@2804:48dc:8500:0:188c:f4ce:5e7e:aede)
[20:34:30] *** Joins: mekhami (~lawrence@135.84.115.18)
[20:34:58] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:35:08] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:35:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[20:35:58] *** Quits: bn_work (uid268505@id-268505.highgate.irccloud.com) ()
[20:36:54] *** Quits: justinf210 (~justinf21@85.sub-97-43-192.myvzw.com) (Remote host closed the connection)
[20:37:00] *** Joins: FluffyMask (~FluffyMas@user/fluffymask)
[20:37:59] *** Joins: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3)
[20:39:33] *** Quits: olegyam (~olegyam@85.119.150.238) (Quit: The Lounge - https://thelounge.chat)
[20:40:21] *** Quits: schumaml (~schumaml@dslb-178-002-190-100.178.002.pools.vodafone-ip.de) (Ping timeout: 244 seconds)
[20:41:06] *** Joins: pnoud (~pnoud@user/pnoud)
[20:41:15] *** Joins: jdmark (~jdmark@172.58.175.65)
[20:42:05] *** Joins: xheimlich (~xheimlich@179.218.1.150)
[20:42:22] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[20:42:49] <xheimlich> is there a way to know what some object does when I say "dict(this_gizmo)" without referencing the docs of the class this_gizmo instantiates?
[20:43:34] <xheimlich> what's the name of the function. So I can replace it in an object that inherits from it.
[20:43:41] <mekhami> xheimlich: __dict__
[20:43:43] <mekhami> ?
[20:43:49] <xheimlich> (I'm talking pydantic's BaseModel, it was designed for being subclassed)
[20:44:29] <graingert> xheimlich: I think dict calls `__iter__`
[20:45:09] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 265 seconds)
[20:45:41] <graingert> it calls .keys() first https://www.irccloud.com/pastebin/wM1lsZO2/dict_magic_mock
[20:45:50] <xheimlich> semi-relatedly, I'm confused about fluent interfaces. What happens with the old object when I return a new object from a method in it?
[20:46:02] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[20:46:04] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[20:46:06] <xheimlich> (Typical example from data science is pandas.)
[20:46:34] <graingert> it falls back to __iter__ if there's no .keys() method https://www.irccloud.com/pastebin/qaDmZmG9/mock_del_keys_dict.py
[20:46:56] <graingert> xheimlich: it depends
[20:47:09] <randall> xheimlich: In fluent interfaces you always return "self" to allow for method chaining.
[20:47:11] <graingert> xheimlich: some fluent interfaces mutate the object and return self
[20:47:17] <graingert> others return a new copy
[20:47:22] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:47:45] <graingert> returning a copy is better imho
[20:47:53] <graingert> the old object gets garbage collected
[20:48:01] <graingert> or the reference count drops to 0
[20:48:16] <randall> I haven't heard of interface returning a copy, but I admit I've not used fluent in python.
[20:48:18] <graingert> and it gets deleted immediately on cPython
[20:48:22] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[20:48:30] *** Joins: badsektor (~badsektor@user/badsektor)
[20:48:34] <graingert> randall: pandas dataframe doesn't mutate unless you specify in_place
[20:48:36] <xheimlich> if you for some reason want to know about context. I'm trying to serialize a networkx graph in some ADT (or what's it name in Python / typing / Pydantic etc context) organized fashion.
[20:48:37] <jiffe> anyone know why this doesn't work? https://pb.jiffe.com/4hygL6CnnAw3TBRLSrFe3S  .. if I comment out the sleep I get 4 lines printed, but with the sleep I get nothing
[20:48:46] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[20:48:50] <xheimlich> I'll do a bpaste but don't expect anyone to care. too much context.
[20:49:31] <graingert> jiffe: you're not waiting for any of your tasks
[20:49:44] <graingert> jiffe: also get_event_loop is deprecated
[20:49:44] <xheimlich> https://bpa.st/LTUA
[20:50:39] <gloomy> Can someone help me understand why one would do `object.__setattr__(self, "_extensions", extensions)` in an __init__ method?  (it comes from here: https://github.com/explosion/spaCy/blob/master/spacy/tokens/underscore.py)
[20:50:40] <randall> graingert: Ah, TIL!
[20:51:09] *** Joins: mikeliuk (~mikeliuk@213.205.198.125)
[20:51:31] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 244 seconds)
[20:51:54] *** Quits: zeden (~zeden@user/zeden) (Ping timeout: 272 seconds)
[20:52:28] <gloomy> I don't understand what those first lines do at all
[20:52:43] <grym> self._extensions=extensions, but spelled oddly
[20:53:07] <grym> maybe this is machine generated code
[20:53:11] *** Joins: gothicserpent (~gothicser@static-198-54-129-76.cust.tzulo.com)
[20:53:26] <graingert> https://www.irccloud.com/pastebin/4xr9mA17/jiffe.py
[20:53:35] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[20:53:58] <ammar2> it's likely to bypass the custom __setattr__ they have in the class
[20:54:02] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[20:54:13] <graingert> if you use run_until_complete asyncio will abort all other tasks
[20:54:25] <graingert> if you use asyncio.run it will cancel all other tasks and then wait for them
[20:54:28] *** Joins: TFKyle (~kyle@64.201.205.70)
[20:54:32] *** Quits: dambuster (~dambuster@185.193.170.225) (Quit: Leaving)
[20:55:08] <gloomy> grym: thanks and ammar2: yes, ok that would make sense
[20:55:15] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[20:56:00] <xheimlich> see, SursisGraph can't be immediately serialized-deserialized into dicts (and reimported to networkx or something that matches its APIs)
[20:56:15] <xheimlich> erm, https://bpa.st/LTUA
[20:56:21] *** Joins: zeden (~zeden@user/zeden)
[20:56:26] <graingert> jiffe: it's best to avoid asyncio.create_task imho
[20:56:34] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 250 seconds)
[20:57:11] <jiffe> graingert: why is that?
[20:57:23] *** Quits: PdimH (~pdimh@user/pdimh) (Quit: May we meet again)
[20:57:31] *** Quits: RavuAlHemio (~ondra@selene.ondrahosek.com) (Quit: ZNC 1.8.2 - https://znc.in)
[20:57:46] <xheimlich> wider context, I have this streamlit app that grew out like a furball to have some nontrivial backend calculations. I'm gradually extracting the back-end so I can maybe hire front-end devs to improve on my streamlit hairball.
[20:57:47] <ammar2> gloomy: yeah I think that's the case, see how the object.__setattr__ line doesn't trigger the method https://bpa.st/raw/ZPHA
[20:57:57] *** Joins: RavuAlHemio (~ondra@selene.ondrahosek.com)
[20:58:14] <graingert> I'd write it like this: https://www.irccloud.com/pastebin/vjv1VZxu/test.py
[20:58:19] <graingert> jiffe: ^
[20:58:20] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[20:58:46] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[20:59:08] *** Quits: jdmark (~jdmark@172.58.175.65) (Read error: Connection reset by peer)
[20:59:17] *** Parts: ratrace (~ratrace@user/ratrace) ()
[20:59:29] *** Joins: jdmark (~jdmark@67.8.137.130)
[20:59:32] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[20:59:33] <graingert> jiffe: https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/
[20:59:58] *** Joins: jdmark2 (~jdmark@172.58.175.65)
[21:00:57] *** Quits: jdmark2 (~jdmark@172.58.175.65) (Read error: Connection reset by peer)
[21:01:22] *** Joins: jdmark2 (~jdmark@67.8.137.130)
[21:02:11] *** Joins: ice9 (~ice9@user/ice9)
[21:02:34] <graingert> asyncio.create_task is very much like golang's `go ` keyword
[21:02:53] <jiffe> go statements in golang was awesome.. only reason I considered golang at all, the rest of the language is crap
[21:03:02] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[21:03:13] <supakeen> Let's also be honest here, we all like Trio but Trio *is* doing things differently from everything else :)
[21:03:27] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[21:03:30] <graingert> nah everything's moving to the Trio way
[21:03:33] <graingert> eg rust and swift
[21:03:46] <graingert> apple announced SC in wwdc
[21:04:11] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 272 seconds)
[21:04:27] *** Quits: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Read error: Connection reset by peer)
[21:04:57] <supakeen> Oh, I'm building a library in Nim that does it as well, I like it.
[21:05:07] <supakeen> And sure things might be moving *towards* it.
[21:05:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:05:36] *** Joins: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr)
[21:05:47] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[21:06:48] *** Quits: DrNostril (~DrNostril@82.102.21.68) (Remote host closed the connection)
[21:07:13] *** Joins: DrNostril (~DrNostril@82.102.21.68)
[21:08:38] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[21:08:39] *** Quits: aniruddha (~aniruddha@103.242.197.118) (Quit: WeeChat 1.9.1)
[21:10:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[21:12:26] *** Quits: upsala (~zcb@193.32.249.134) (Quit: WeeChat 3.2)
[21:14:41] <graingert> jiffe: basically under SC you can't get into the situation you did without explicitly opting in with a .cancel() call
[21:15:17] <graingert> eg tasks always run to completion be that an error or returning None
[21:15:22] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[21:16:13] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Lost terminal)
[21:16:15] *** Quits: mesaboogie (mesaboogie@user/mesaboogie) (Quit: !sync)
[21:16:19] *** Quits: GiLgAmEzH (~gilgamezh@181.47.117.104) (Ping timeout: 244 seconds)
[21:18:45] *** Quits: gothicserpent (~gothicser@static-198-54-129-76.cust.tzulo.com) (Ping timeout: 272 seconds)
[21:18:48] *** Joins: vicfred (~vicfred@user/vicfred)
[21:19:58] *** Quits: anas (~anas@196.224.48.251) (Ping timeout: 250 seconds)
[21:20:12] *** Quits: GvP (~GvP@ip70-162-85-176.ph.ph.cox.net) (Quit: Going offline, see ya!)
[21:20:27] *** Joins: feriman (~feriman@188.163.113.127)
[21:22:02] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:22:33] *** Quits: jdmark2 (~jdmark@67.8.137.130) (Ping timeout: 272 seconds)
[21:22:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:23:21] *** Joins: hwrd (sid64402@id-64402.tooting.irccloud.com)
[21:23:55] *** Quits: librenaut (~librenaut@user/librenaut) (Quit: leaving)
[21:24:42] *** Quits: humanBird (~humanBird@2603-8001-7003-5966-85fb-276a-8a04-c03b.res6.spectrum.com) (Quit: Client closed)
[21:25:09] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[21:25:34] *** Joins: qlixed (~qlixed@181.44.129.13)
[21:25:35] *** Joins: qlixed_again (~qlixed@181.44.129.13)
[21:25:44] *** Joins: librenaut (~librenaut@user/librenaut)
[21:25:59] *** Quits: qlixed (~qlixed@181.44.129.13) (Client Quit)
[21:26:45] *** Joins: Akuli (~Akuli@2001:999:40:c1fe:21e:65ff:fe37:6b62)
[21:27:50] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[21:28:17] *** Quits: kmh (~kmh@p200300df5f145f003cbf9841c92aa596.dip0.t-ipconnect.de) (Quit: Leaving)
[21:29:44] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Gone.)
[21:30:15] *** Quits: dominique_michel (~Dominique@mob-194-230-158-179.cgn.sunrise.net) (Ping timeout: 258 seconds)
[21:30:21] *** Quits: aslicedbanjo (~aslicedba@81.141.54.228) (Quit: Leaving.)
[21:32:16] *** Joins: pnoud (~pnoud@user/pnoud)
[21:32:32] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 250 seconds)
[21:32:57] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[21:33:21] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[21:34:06] *** Quits: mdemo (~mdemo@c-73-40-53-74.hsd1.va.comcast.net) (Quit: The Lounge - https://thelounge.github.io)
[21:34:20] *** Joins: mesaboogie (mesaboogie@user/mesaboogie)
[21:35:15] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[21:35:54] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 240 seconds)
[21:37:06] *** Quits: tbcr (~tbcr@user/tbcr) (Read error: Connection reset by peer)
[21:37:18] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 250 seconds)
[21:38:05] *** Joins: control (guesswho@user/control)
[21:39:50] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[21:40:18] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[21:41:08] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[21:42:31] *** Quits: qlixed_again (~qlixed@181.44.129.13) (Ping timeout: 258 seconds)
[21:43:12] *** Joins: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs)
[21:43:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:45:32] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[21:47:36] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[21:47:38] *** Quits: Dotz0cat (~Dotz0cat@h90.13.31.71.dynamic.ip.windstream.net) (Ping timeout: 252 seconds)
[21:47:47] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[21:48:43] *** Joins: pnoud (~pnoud@user/pnoud)
[21:48:48] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[21:49:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[21:49:15] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[21:52:32] *** Joins: qlixed (~qlixed@181.44.129.13)
[21:53:30] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[21:53:59] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[21:54:48] *** Joins: mdemo (~mdemo@c-73-40-53-74.hsd1.va.comcast.net)
[21:54:52] *** Joins: Steeve (~steve@user/steeve)
[21:55:50] *** Quits: rendar (~rendar@user/rendar) ()
[21:57:39] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 265 seconds)
[21:59:05] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[21:59:40] *** Quits: argento (~argent0@168-227-97-29.ptr.westnet.com.ar) (Ping timeout: 272 seconds)
[22:00:08] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[22:01:34] *** Quits: {HD} (~{HD}@102.165.16.62) (Ping timeout: 252 seconds)
[22:01:37] *** Joins: wololoer (~zeden@user/zeden)
[22:02:07] <yitz> Is there a clean-ish way to get a list of all the methods that a class defines?
[22:03:02] *** Joins: Celeo (~Celeo@user/celeo)
[22:03:13] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[22:03:48] <bjs> yitz: you mean, to like, look at?  or to do computation with?
[22:04:06] *** Quits: zeden (~zeden@user/zeden) (Ping timeout: 272 seconds)
[22:04:19] *** Joins: vsantana (~Thunderbi@2804:214:816e:9813:5887:44f7:92cf:a49f)
[22:05:37] <SnoopJ> yitz, you can filter the result of inspect.getmembers() with inspect.ismethod() if you're looking at an instance. Otherwise maybe isfunction()
[22:05:37] <bjs> yitz: help(SomeClass) is something I often use to see what methods/attributes are available on an object/class
[22:05:55] *** Parts: vsantana (~Thunderbi@2804:214:816e:9813:5887:44f7:92cf:a49f) ()
[22:06:04] *** Quits: chronon (~chronon@user/chronon) (Quit: leaving)
[22:06:16] *** Joins: vsantana (~Thunderbi@2804:214:816e:9813:5887:44f7:92cf:a49f)
[22:07:39] <p-i-> habnabit_: That paste is helping me tremendously
[22:07:50] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[22:08:25] <yitz> To do something with the. inspect.getmembers(fo, inspect.isfunction)   I suppose is my best bet
[22:08:34] <yitz> I feel a bit dirty about doing this
[22:08:57] *** Joins: chronon (~chronon@user/chronon)
[22:09:10] <p-i-> https://bpa.st/K63A#1L44 <-- is there any reason here not to have make_bot_aio as a trio-flavoured method, and wrap e.g. `@a2t @@bot.on(...) async def start(event)...`?
[22:09:12] <SnoopJ> it's dirty business, yep
[22:09:49] <bjs> jiffe: create_task'd tasks just hang around and it's your job to join them back (`await` them) and cleanup (e.g. catch any exceptions)
[22:10:44] <bjs> jiffe: your main just kind of fell off the end without waiting for any of the tasks to finish so main finished before any of them got a chance to print.
[22:10:54] *** Quits: zumba_addict (~zumba_add@2601:240:4500:8320:4d13:46e7:735:15bc) (Quit: Client closed)
[22:11:50] <p-i-> habnabit_: Also, did you consider using `with TelegramClient... as bot` to avoid requiring `run_until_disconnected`?
[22:12:24] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 250 seconds)
[22:12:42] *** Joins: tbcr (~tbcr@user/tbcr)
[22:13:17] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[22:13:17] *** Joins: Dotz0cat (~Dotz0cat@h180.89.187.173.dynamic.ip.windstream.net)
[22:13:47] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[22:14:07] <graingert> bjs: await doesn't even join a task :(
[22:16:03] *** Joins: rozbb (~ksundar@pool-96-239-34-154.nycmny.fios.verizon.net)
[22:16:08] <graingert> I think like this? https://www.irccloud.com/pastebin/h2pYTvR7/join.py
[22:16:12] <graingert> I'm not sure
[22:16:17] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:16:55] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[22:17:15] <rozbb> I've got python = "3.8" set in my pypoetry.toml file and yet I'm still getting an error when I try to add a dependency: "The current project's Python requirement (3.9.5) is not compatible with some of the required packages Python requirement..."
[22:17:27] <rozbb> why does it keep thinking I'm trying to use 3.9?
[22:17:51] <p-i-> rozbb: Poetry has a decent Discord btw
[22:17:58] *** Joins: Auron (Auron956@user/auron)
[22:18:08] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[22:18:12] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[22:18:22] *** Joins: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth)
[22:18:32] *** Joins: vsantana1 (~Thunderbi@fttx-17713614930.usr.predialnet.com.br)
[22:18:38] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112) (Quit: Leaving)
[22:18:39] *** Joins: diek (~diek@187.36.4.113)
[22:19:05] <bjs> graingert: I dont follow, why the loop
[22:19:16] <p-i-> rozbb: https://discord.gg/hPaUArxT
[22:19:19] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[22:19:24] <graingert> bjs: the current_task() can be cancelled before the joined task is cancelled
[22:19:39] <rozbb> p-i-: thank you
[22:19:43] *** Quits: DrNostril (~DrNostril@82.102.21.68) (Remote host closed the connection)
[22:19:49] <p-i-> rozbb: Did you check `python --version` reports 3.8?
[22:19:53] <graingert> so that task would exit before the joined task exits
[22:20:06] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[22:20:08] *** Joins: DrNostril (~DrNostril@82.102.21.68)
[22:20:23] <rozbb> p-i-: poetry run python --version returns 3.9.5. No idea why
[22:20:25] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[22:20:33] *** Joins: ominionx (~ominionx@38.135.235.14)
[22:20:54] *** Quits: vsantana (~Thunderbi@2804:214:816e:9813:5887:44f7:92cf:a49f) (Ping timeout: 244 seconds)
[22:20:54] *** vsantana1 is now known as vsantana
[22:21:20] <SnoopJ> rozbb, did you change the python version after installing the project with the old version? Could be using the old venv created by poetry
[22:21:33] <rozbb> nope it's brand new via poetry init
[22:22:02] <p-i-> rozbb: So there is your problem. You're telling poetry to require 3.8 but you have 3.9.5.
[22:22:02] *** Joins: argento (~argent0@168-227-97-29.ptr.westnet.com.ar)
[22:22:27] <rozbb> well I have lots of versions. how do I make it use 3.8?
[22:23:17] <SnoopJ> I usually have a per-project venv managed by direnv into which poetry is installed
[22:23:24] *** Quits: jbeimler (~jbeimler@75.177.73.34) (Quit: leaving)
[22:23:29] <SnoopJ> (which would be created with the desired Python version)
[22:24:06] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[22:24:22] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:24:31] *** Joins: ice9 (~ice9@user/ice9)
[22:24:39] <grym> rozbb: poetry env use, i think
[22:24:41] *** Joins: mickey (~user@user/mickey)
[22:24:45] <grym> look at poetry env --help
[22:25:05] *** Joins: zmt00 (~zmt00@user/zmt00)
[22:25:12] *** Joins: jbeimler (~quassel@75.177.73.34)
[22:25:14] *** Joins: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net)
[22:25:35] <bjs> graingert: okay but if it's cancelled _before_ the `await task` then fair enough (that's what makes managing this stuff manually a pain) but if it's cancelled at the `await task` line then the task should also be cancelled since a task is really a future
[22:25:53] <graingert> bjs: right but the task could catch the cancellederror
[22:26:00] <graingert> and do some cleanup
[22:26:23] <bjs> well if you're using create_task you kind of have to, if you want to do it nicely
[22:26:26] <p-i-> rozbb: https://github.com/python-poetry/poetry/issues/655#issuecomment-735634429 <-- this may sort it
[22:27:02] <p-i-> rozbb: did you try deleting and re-creating the .venv via poetry?
[22:27:07] *** Quits: xsx (~x@72.red-81-35-191.dynamicip.rima-tde.net) (Quit: leaving)
[22:27:20] *** Joins: {HD} (~{HD}@143.244.44.81)
[22:27:26] <bjs> graingert: I still don't see what the while loop is doing
[22:27:27] <rozbb> I don't have a venv. I'm trying grym's solution rn
[22:27:46] <graingert> bjs: for when the outer task get cancelled multiple times
[22:27:57] *** davidlowryduda is now known as dld
[22:28:14] <p-i-> rozbb: ah yes, that looks like the auto-way to do it
[22:28:21] *** Joins: aslicedbanjo (~aslicedba@81.141.54.228)
[22:29:24] <p-i-> SnoopJ: Nice solution!
[22:29:28] <bjs> graingert: okay but the only way that can happen is if the inner task swallows the cancellation and then naturally ends
[22:29:37] <bjs> graingert: but all that'll happen is the coro will be cancelled at the next await
[22:29:45] <bjs> nothing "Bad" happens here
[22:29:51] <SnoopJ> p-i-, direnv is very expedient in general, I'm a big fan
[22:29:54] <bjs> just a delayed cancellation in the parent task
[22:30:26] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[22:30:34] <graingert> bjs: no the joined task can do:
[22:30:34] <graingert> except asyncio.CancelledError: await sleep(forever)
[22:30:45] *** Joins: i0e (~is0ke3@user/is0ke3)
[22:31:05] <bjs> graingert: and how does your while loop help that
[22:31:15] <graingert> you don't want a situation where the joining task is .done() before the joined task is .done(), right?
[22:31:59] <graingert> and so it means the joining task needs to ignore cancellations every time the joined task ignores cancellations
[22:32:13] <rozbb> p-i- grym SnoopJ Ok it looks like it works when I do `poetry env use python3.8` and then `poetry install`. Thanks all!
[22:32:42] <bjs> graingert: but I don't follow
[22:33:01] <bjs> graingert: if the child task goes `await sleep(forever)` in the handler then the parent's `await task` just doesn't finish yet
[22:33:46] <bjs> I'm not sure `await task` should (can?) ever complete before the task has finished.
[22:34:11] <graingert> bjs: it can if the current_task() or joining task is cancelled
[22:34:16] <bjs> graingert: but how?
[22:34:19] <bjs> if the child swallows it...
[22:34:31] <graingert> Right but the parent gets cancelled as well
[22:34:39] <graingert> The cancel travels in both directions
[22:34:52] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 268 seconds)
[22:35:21] <bjs> graingert: does it really?
[22:35:38] *** Joins: Mat1010 (~Mat1010@168.181.209.58)
[22:35:49] *** Quits: rememberYou (~someone@user/rememberyou) (Ping timeout: 256 seconds)
[22:35:52] <Mat1010> Hi. Where can I find tutorials and code examples for a ChatBot?
[22:36:08] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[22:36:21] <bjs> graingert: I thought it just proapgated the cancellation down to the bottom of the chain of Futures
[22:36:55] *** Joins: wovixo (~wovixo@128.104.205.49)
[22:37:03] <bjs> oh god this is why asyncio is terrible, two people who supposedly know concurrency and async in Python really well don't even agree on what they think cancelling a task does ...
[22:38:16] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112)
[22:38:25] <ronny> Trio seems to be the best tool for the new syntax
[22:38:50] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 250 seconds)
[22:39:14] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[22:39:19] <p-i-> Trio's lovely
[22:39:21] <graingert> Til
[22:39:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:39:46] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[22:39:49] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 272 seconds)
[22:40:48] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[22:41:00] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[22:41:01] *** Joins: kmh (~kmh@p200300df5f145f004144ecc119e5a184.dip0.t-ipconnect.de)
[22:41:16] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:41:34] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 244 seconds)
[22:42:47] *** Joins: tdoss (~tdoss@wsip-70-166-238-194.ks.ks.cox.net)
[22:43:06] *** Quits: Mat1010 (~Mat1010@168.181.209.58) (Quit: Client closed)
[22:43:08] *** Joins: nbao (~nbao@187.20.162.127)
[22:43:10] *** Quits: control (guesswho@user/control) (Ping timeout: 250 seconds)
[22:43:33] *** Joins: N4G4R41 (~CircuitLo@user/n4g4r41)
[22:44:35] *** Parts: tdoss (~tdoss@wsip-70-166-238-194.ks.ks.cox.net) ()
[22:45:21] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[22:45:50] *** Quits: N4G4R41 (~CircuitLo@user/n4g4r41) (Client Quit)
[22:46:01] *** Quits: DodgeThis (~DodgeThis@246.102.90.149.rev.vodafone.pt) (Ping timeout: 256 seconds)
[22:47:47] *** Joins: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com)
[22:48:24] *** Joins: derelict (~derelict@user/derelict)
[22:49:42] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[22:50:56] *** Joins: glumanda (~manu@194-208-201-025.tele.net)
[22:51:43] *** Joins: lethu (~lethu@196.117.196.82)
[22:52:17] *** Quits: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com) (Ping timeout: 258 seconds)
[22:52:42] *** Quits: noneco (~noneco@dslb-090-186-083-254.090.186.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[22:52:56] *** Joins: u0_a117 (~u0_a117@191.35.79.147)
[22:53:07] *** Quits: sajran (~Thunderbi@2a02:a317:e438:d900:904d:d2ed:7f33:3fbb) (Ping timeout: 272 seconds)
[22:53:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[22:54:35] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[22:55:00] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[22:55:24] *** Joins: jdmark (~jdmark@67.8.137.130)
[22:55:24] <graingert> bjs: ah no you're right the _fut_waiter communicates with Task.cancel to avoid setting ._must_cancel
[22:55:25] *** Joins: maname (~maname@p200300c3ef2d3000e1b8716fc00672fb.dip0.t-ipconnect.de)
[22:55:44] *** Joins: ano (~weechat@user/ano)
[22:56:13] *** Joins: DodgeThis (~DodgeThis@246.102.90.149.rev.vodafone.pt)
[22:56:25] *** Joins: tdoss (~tdoss@wsip-70-166-238-194.ks.ks.cox.net)
[22:56:53] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[22:57:30] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Remote host closed the connection)
[22:57:42] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[22:58:37] *** Joins: schumaml (~schumaml@p200300e2ef04630053c1821a43d17d29.dip0.t-ipconnect.de)
[23:00:16] <graingert> ronny: at the moment anyio is way more popular, and there's a weird case where gentoo ship a copy of anyio with only asyncio support
[23:00:32] *** Joins: ice9 (~ice9@user/ice9)
[23:01:12] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[23:01:40] *** Joins: pnoud (~pnoud@user/pnoud)
[23:01:43] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 244 seconds)
[23:03:33] *** Joins: srhm (~ascii@user/srhm)
[23:04:34] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[23:06:51] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[23:08:00] *** Joins: alguien (~alguien@user/alguien)
[23:08:10] <bjs> graingert: I'm not sure what that means, I assume you looked at the source
[23:08:25] <bjs> Maybe someone should actually write a "Wtf happens when you cancel() a Task" section on the asyncio docs
[23:09:36] *** Quits: nerdraven (~nerdraven@196.45.51.47) (Ping timeout: 250 seconds)
[23:11:04] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[23:12:45] *** Joins: mexen (uid495612@user/mexen)
[23:14:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[23:14:30] *** Joins: sajran (~Thunderbi@user-5-173-253-182.play-internet.pl)
[23:14:54] *** Joins: nerdraven (~nerdraven@196.45.51.47)
[23:15:02] *** Joins: montybanksnyc (~montybank@2601:86:600:a2a:643b:fa56:c3e3:a7c8)
[23:15:10] *** Quits: sajran (~Thunderbi@user-5-173-253-182.play-internet.pl) (Client Quit)
[23:15:20] *** Joins: sajran1 (~Thunderbi@user-5-173-253-182.play-internet.pl)
[23:15:28] *** Quits: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt) (Ping timeout: 265 seconds)
[23:15:40] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 244 seconds)
[23:15:55] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[23:16:18] *** Quits: DrNostril (~DrNostril@82.102.21.68) (Remote host closed the connection)
[23:16:38] *** Joins: DrNostril (~DrNostril@82.102.21.68)
[23:16:45] *** Quits: glumanda (~manu@194-208-201-025.tele.net) (Quit: WeeChat 3.2)
[23:16:56] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 272 seconds)
[23:17:39] *** sajran1 is now known as sajran
[23:18:21] *** Joins: derelict (~derelict@user/derelict)
[23:19:15] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[23:19:26] *** Joins: pnoud (~pnoud@user/pnoud)
[23:19:35] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[23:19:35] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:19:41] <graingert> bjs: it is documented I just didn't understand it
[23:19:48] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[23:20:30] *** Joins: billoday (~bill@cpe-104-228-202-125.maine.res.rr.com)
[23:21:52] *** Quits: Deknos (~someone@user/menace) (Ping timeout: 244 seconds)
[23:23:43] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[23:24:47] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 272 seconds)
[23:24:49] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[23:26:09] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Quit: Good bye everyone!)
[23:26:20] *** Joins: x256 (~marc@i080.vpnclients.gwdg.de)
[23:26:26] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[23:26:30] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 250 seconds)
[23:26:44] *** Joins: the_emperor (~the_emper@103.60.172.10)
[23:27:54] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112) (Quit: Leaving)
[23:28:11] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:14b:79f8:9a0b:e112)
[23:28:38] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:28:42] *** Quits: vsantana (~Thunderbi@fttx-17713614930.usr.predialnet.com.br) (Ping timeout: 258 seconds)
[23:29:01] *** Joins: DaNeenjah (~jake@adsl-74-230-9-207.hsv.bellsouth.net)
[23:29:12] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[23:29:36] *** Joins: glumanda (~manu@194-208-201-025.tele.net)
[23:31:13] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[23:31:42] *** Quits: LuKaRo (~LuKaRo@p200300dfa71797375776d016cf464e3b.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[23:31:56] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[23:31:58] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[23:32:04] *** Joins: srhm (~ascii@user/srhm)
[23:32:32] *** Joins: LuKaRo_ (~LuKaRo@p57b15697.dip0.t-ipconnect.de)
[23:32:39] *** Joins: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt)
[23:32:46] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[23:33:45] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 244 seconds)
[23:34:23] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[23:35:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[23:35:10] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 250 seconds)
[23:35:36] *** Joins: Snyp (~rksht@49.207.198.3)
[23:35:49] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 244 seconds)
[23:36:46] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[23:38:02] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[23:40:10] *** Parts: tdoss (~tdoss@wsip-70-166-238-194.ks.ks.cox.net) ()
[23:40:37] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[23:41:08] *** Quits: glumanda (~manu@194-208-201-025.tele.net) (Quit: WeeChat 3.2)
[23:41:08] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:41:18] *** Quits: DrNostril (~DrNostril@82.102.21.68) (Remote host closed the connection)
[23:41:35] *** Joins: pnoud (~pnoud@user/pnoud)
[23:41:38] *** Joins: DrNostril (~DrNostril@82.102.21.68)
[23:42:35] *** Joins: bxsx (~x@72.red-81-35-191.dynamicip.rima-tde.net)
[23:43:50] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 250 seconds)
[23:44:36] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 252 seconds)
[23:44:39] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[23:46:32] <bxsx> hi, i want to do some benchmarking on my app right before sending request to API. the app works in threading (uses requests) or async mode (uses httpx). any idea how to get timing right before network I/O? i need to stop timer before accessing network but in case of asyncio there is awaitable coroutine so can't stop timer on the last public call to httpx
[23:46:53] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[23:48:45] *** Joins: staticvoidmaine (~staticvoi@cpe-184-153-179-95.maine.res.rr.com)
[23:49:25] <p-i-> Is there anyone around familiar with Telethon API?
[23:49:48] <SnoopJ> p-i-, let's suppose yes, what's the follow-up question?
[23:50:06] <p-i-> I've made a hello-world (trio-wrapping-asyncio) message-watcher.
[23:50:22] <p-i-> It runs, but it won't trigger when I send a message to my telegram test-group.
[23:50:32] <p-i-> https://bpa.st/TKCA#1L46
[23:50:39] <p-i-> ^ I think the problem may be this line
[23:51:12] *** Quits: mikeliuk (~mikeliuk@213.205.198.125) (Ping timeout: 250 seconds)
[23:51:47] <p-i-> oh LOL
[23:51:49] <p-i-> it DOES work
[23:51:52] <p-i-> WOW
[23:52:15] <p-i-> I just wasn't printing the value!
[23:52:24] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[23:52:25] <p-i-> trio-in-asyncio works FIRST TIME ROUND!
[23:52:32] <p-i-> wowzer
[23:53:44] <SnoopJ> another happy customer 😅
[23:53:58] <grym> ,next
[23:54:06] <p-i-> sUper happy!
[23:54:07] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[23:54:32] <p-i-> I get to bundle asyncio into a corner
[23:54:41] <Celelibi> What's the right way to partition a list of strings by their first letter?
[23:55:19] <graingert> p-i-: you might want to make a wrapper class around the whole Telethon library like this: https://github.com/python-trio/triopg/blob/master/triopg/_triopg.py
[23:55:29] <graingert> p-i-: that's an asyncpg wrapper
[23:55:32] *** Joins: GvP (~GvP@ip70-162-85-176.ph.ph.cox.net)
[23:55:40] <graingert> you could also try porting Telethon to anyio :P
[23:55:48] <matsaman> Celelibi: split can split by multiple delimiters, for one
[23:56:05] <graingert> Celelibi: like itertools.groupby?
[23:56:10] *** Joins: briian (uid321220@id-321220.highgate.irccloud.com)
[23:56:18] <grym> itertools.groupby(sorted(thelist), key=lambda x: x[0])
[23:56:38] <SnoopJ> groupby() was my first thought as well, but it does consecutive groups so you might want to sort the list first...otherwise I'd write a generator function that loops over the list and mutates a dict to be returned.
[23:56:40] <graingert> Celelibi: https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.partition ?
[23:56:47] <p-i-> I'm not sure there's any benefit to me of using anyio at the moment.
[23:57:02] <graingert> p-i-: it means everyone will be able to use Telethon with asyncio or tri
[23:57:02] <graingert> o
[23:57:15] <briian> if I have a data set of 200 items and I'm using a pool of 4 processes with multiprocessing and chunks of 10 each will it stop after 40 items or continue to use 4 processes for all 200?
[23:58:02] *** Joins: qunzhong_luxian (~qunzhong_@68.235.43.166)
[23:58:09] <briian> does that even make sense?
[23:58:13] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 258 seconds)
[23:58:35] *** Joins: gareppa (~gareppa@user/gareppa)
[23:58:55] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:58:58] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[23:59:23] <c4017w> After doing clr.AddReference("somedll"), how can I found out what's importable from the 'somedll' namespace?
[23:59:33] *** Joins: magla (~gelignite@55d4266d.access.ecotel.net)
