[00:01:25] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:04:54] *** Quits: Dynom_ (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[00:08:40] *** Joins: gaqwas (~john@dynamic-095-115-033-085.95.115.pool.telefonica.de)
[00:09:13] *** Quits: vcarvalho (~vcarvalho@161.230.15.110) (Ping timeout: 256 seconds)
[00:11:43] *** Joins: amb007 (~a_bakic@199.39.22.93.rev.sfr.net)
[00:21:20] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[00:21:36] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:22:49] *** Quits: amb007 (~a_bakic@199.39.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[00:24:21] *** Joins: amb007 (~a_bakic@93.151.22.93.rev.sfr.net)
[00:27:03] *** Quits: gaqwas (~john@dynamic-095-115-033-085.95.115.pool.telefonica.de) (Remote host closed the connection)
[00:31:42] <Josh_2> Rip didn't realize that dex:delete didn't handle the :content key, guess thats a problem of using apply, no warning :(
[00:35:49] *** Quits: amb007 (~a_bakic@93.151.22.93.rev.sfr.net) (Ping timeout: 240 seconds)
[00:37:27] *** Joins: amb007 (~a_bakic@137.36.22.93.rev.sfr.net)
[00:40:10] <Bike> should still have been signaled unless allow-other-keys is also involved
[00:41:37] *** Quits: amb007 (~a_bakic@137.36.22.93.rev.sfr.net) (Ping timeout: 240 seconds)
[00:42:50] *** Joins: amb007 (~a_bakic@65.14.23.93.rev.sfr.net)
[00:47:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[00:49:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:51:58] *** Quits: ASau` (~user@lmpc.drb.insel.de) (Quit: ERC (IRC client for Emacs 25.3.1))
[00:52:43] *** Joins: ASau (~user@lmpc.drb.insel.de)
[00:54:19] <phoe> or unless your safety is zero for some miraculous reason
[00:57:25] *** Joins: hashfunc102e (~user@162.254.115.155)
[00:58:11] <Josh_2> Yep safety 0
[00:58:11] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[00:58:27] <Bike> i would recommend not doing that.
[00:58:29] <phoe> guess whose fault it is then!
[00:58:50] <Josh_2> I think dex:request is safety 2 actually
[01:00:14] <phoe> oh, yes
[01:00:20] <phoe> at least on usocket
[01:00:27] <phoe> https://github.com/fukamachi/dexador/blob/811b834084b961843dd4f347dcea25e95e2e2f61/src/backend/usocket.lisp#L423 defun-careful sets safety to 2
[01:01:07] <phoe> ...why did it not fail on &key valiation then?
[01:01:25] <phoe> dex:delete does not have &allow-other-keys on its own, maybe it's something that calls it?
[01:03:00] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Quit: triffid)
[01:03:03] <Josh_2> Well I was using dex:delete with apply, and the args list contained a :content key, I received no errors
[01:03:11] <Josh_2> I only just realized that the :content was not being used
[01:03:17] <phoe> very weird
[01:03:17] *** Quits: amb007 (~a_bakic@65.14.23.93.rev.sfr.net) (Ping timeout: 240 seconds)
[01:03:23] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[01:03:28] <phoe> does your arg list contain :allow-other-keys?
[01:03:41] *** Joins: amb007 (~a_bakic@226.151.22.93.rev.sfr.net)
[01:03:51] <Josh_2> Nope
[01:04:10] <Josh_2> It is '(:headers ... :content ...))
[01:06:11] *** Quits: Brucio-61 (~Brucio-6@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 250 seconds)
[01:06:47] <phoe> (sb-ext:describe-compiler-policy) ?
[01:06:49] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 250 seconds)
[01:07:00] <phoe> what is your safety/debug?
[01:08:10] <hashfunc102e> I have one SBCL process running on my machine. I have one Emacs process running on my machine. I have one Slime-REPL running on my one Emacs process. I want to open another Emacs process/Slime-REPL on my machine, and connect it to the one SBCL process running on my machine. Is this possible?
[01:08:30] <phoe> hashfunc102e: yes
[01:08:50] <phoe> create a new Swank server and M-x slime-conect to it
[01:09:21] <Josh_2> phoe: I haven't changed the default for SBCL
[01:09:36] <hashfunc102e> phoe: oh ok, maybe that's what I'm doing wrong. I didn't create the Swank server
[01:09:38] <phoe> Josh_2: so the default, 1
[01:09:47] <Josh_2> I guess so, safety 1 speed 1
[01:09:52] <phoe> hmmmm
[01:10:08] <Josh_2> I didn't realize that was the default, think I'd rather have safety 3, speed 1 :facepalm:
[01:10:57] *** Quits: wacki (~wacki@87.122.91.78) (Quit: Leaving.)
[01:11:19] <phoe> Josh_2: sb-ext:restrict-compiler-policy
[01:11:38] <phoe> Josh_2: https://plaster.tymoon.eu/view/2939#2939
[01:11:43] <phoe> I cannot reproduce this
[01:12:13] *** Quits: dre (~dre@2001:8003:c932:c301:c29e:700:d5d3:6fcd) (Ping timeout: 240 seconds)
[01:14:00] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[01:14:10] <Josh_2> Oh, I think its my fault
[01:14:11] <Josh_2> dw
[01:15:34] <Josh_2> How do I set the safety and speed for an entire project? Declaim?
[01:15:47] <phoe> sb-ext:restrict-compiler-policy
[01:16:01] <phoe> declaim has undefined consequences and can leak out of the file
[01:16:07] <Josh_2> Right okay
[01:16:41] <phoe> I guess you could perform some witchcraft and use asdf's around-compile hook
[01:17:01] *** Quits: amb007 (~a_bakic@226.151.22.93.rev.sfr.net) (Ping timeout: 250 seconds)
[01:17:26] *** Joins: amb007 (~a_bakic@14.14.23.93.rev.sfr.net)
[01:17:31] <phoe> query the current policy, restrict the policy, unrestrict it back on exit
[01:18:03] <phoe> but that would be a bit overkill - I think it's better to restrict safety to something nonzero so you can e.g. load jonathan or jsown into your image without remorse
[01:18:23] <phoe> especially jsown
[01:19:13] <hashfunc102e> phoe: can you have more than one Emacs processes connect to the same Swank server?
[01:19:30] <hashfunc102e> *more than one Emacs process
[01:19:36] <hashfunc102e> *multiple Emacs processes
[01:19:46] <phoe> hashfunc102e: yes, but the server needs to be created with :dont-close t AFAIR
[01:19:52] <phoe> otherwise it will stop listening after a single connection
[01:20:04] <hashfunc102e> phoe: ahh, that must be what I'm running into
[01:20:23] <NotThatRPG> The around compile hook would give a portable solution instead of an sb-ext one....
[01:21:06] <phoe> NotThatRPG: portable, as in?
[01:21:20] <Josh_2> Safety and debug jammed at 3 now, thanks phoe :)
[01:21:22] <NotThatRPG> Using standard declarations.
[01:21:28] <phoe> AFAIK a DECLAIM inside the file can still leak out
[01:22:05] <phoe> and I don't think a portable solution would work
[01:22:07] <NotThatRPG> phoe: Can't we use the hook wrapper to wrap a normal declaration around compilation
[01:22:09] <NotThatRPG> ?
[01:22:20] <phoe> a DECLAIM inside the compile hook will be overwritten by any toplevel DECLAIM in the source file
[01:22:31] <phoe> that's the problem
[01:22:49] <NotThatRPG> phoe: Yeah, if someone puts a declaim in the source file, then they presumably know why they did that.
[01:23:12] <phoe> RESTRICT-COMPILER-POLICY is stronger than DECLAIM - if safety is restricted to 3 then no (declaim (safety 0)) will have any effect
[01:23:21] <phoe> but, as long as you don't mind it - yes, that would work
[01:23:23] <NotThatRPG> Any declaration in the source code will shadow anything around.
[01:23:30] <phoe> the only issue is querying current compiler policy
[01:23:38] <phoe> as in, checking the current values of the stadard OPTIMIZE declarations
[01:23:42] <phoe> and you need implementation support for that
[01:23:48] <NotThatRPG> phoe: Why do you need to if you are going to just set them?
[01:24:02] <phoe> NotThatRPG: so that you can set them back after the file is done being compiled
[01:24:19] <phoe> so that a toplevel DECLAIM does not leak out of that file and everywhere else, like it does e.g. on Allegro IIRC
[01:24:28] <phoe> AFAIR luis had a horror story regarding this
[01:24:51] <skeemer> is there any place where i can learn tricks with higher order functions?
[01:25:06] <NotThatRPG> phoe: We don't need declaim, do we?
[01:25:10] <phoe> skeemer: I think Practical Common Lisp has some materials for that
[01:25:12] <skeemer> like the (select (where ( ...))) shown in practical common lisp?
[01:25:20] <phoe> NotThatRPG: "need", as in? some projects will do exactly this
[01:25:21] <skeemer> phoe, i only found that example
[01:25:31] <phoe> NotThatRPG: see e.g. https://github.com/madnificent/jsown/blob/744c4407bef58dfa876d9da0b5c0205d869e7977/reader.lisp#L3-L4
[01:25:34] <Josh_2> functions that take functions as arguments :smirk:
[01:25:40] <Josh_2> cool functions
[01:26:21] <phoe> skeemer: hmmmmm
[01:26:28] <NotThatRPG> phoe: Isn't this what we need: :around-compile-hook (lambda (thunk) (locally (declare (optimize ...)) (funcall thunk)))
[01:26:29] <NotThatRPG> ?
[01:26:30] <phoe> you are right, they are only mentioned in a few places
[01:26:54] <phoe> NotThatRPG: I don't think that will work, these are declarations and not proclamations
[01:27:08] <phoe> and declarations only affect lexical scope
[01:27:24] <phoe> so only the funcall will be affected, but not the thunk itself
[01:27:29] <NotThatRPG> phoe: Ah, right...
[01:27:51] <phoe> we'd need something like (let ((policy (sb-ext:restrict-compiler-policy))) (unwind-protect (funcall thunk) (restore-policy policy)))
[01:28:15] <phoe> where RESTORE-POLICY does some alist stuff to PROCLAIM all the stuff again
[01:28:25] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:28:49] <NotThatRPG> so the compile-file call is not in the lexical environment of the declarations.
[01:28:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:29:23] *** Joins: Brucio-61 (~Brucio-6@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:29:35] <NotThatRPG> Pretty sure there is no ANSI method to query compiler settings.
[01:29:51] <NotThatRPG> But I think there's a library that tries to do it portably over a known set of implemenations.
[01:29:53] <phoe> yes
[01:30:00] <phoe> there is only CLtL2 stuff, DECLARATION-INFORMATION et al
[01:30:25] <NotThatRPG> Can't remember the library, unfortunately.
[01:30:27] *** Quits: amb007 (~a_bakic@14.14.23.93.rev.sfr.net) (Ping timeout: 250 seconds)
[01:30:28] <phoe> (sb-cltl2:declaration-information 'optimize)
[01:30:44] <phoe> (trivial-cltl2:declaration-information 'optimize)
[01:30:52] *** Joins: amb007 (~a_bakic@114.39.22.93.rev.sfr.net)
[01:31:02] <phoe> you can call this, grab the values from runtime, then PROCLAIM them again
[01:31:27] <phoe> like, loop over each list and apply #'proclaim to it
[01:33:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[01:33:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[01:34:22] <NotThatRPG> phoe: Thanks, that's good.
[01:34:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:34:37] <phoe> yes
[01:34:38] *** Quits: nature (~nature@45.32.235.173) (Quit: leaving)
[01:35:41] <phoe> I assume it could sound like an ASDF feature - on implementations that have any sort of support for cltl2'a DECLARATION-INFORMATION, or any other sort of informing at runtime about the optimization policy, make sure to save the compiler policy before compiling a system and then restore it via PROCLAIM afterwards
[01:36:05] <phoe> no idea if it is going to break anything in practice, but hey, I'll accept *any* solution that works around jsown's madness
[01:36:41] <phoe> and we'll be finally able to say that ASDF systems on some implementations have file-local OPTIMIZE settings or something
[01:37:34] *** Quits: amb007 (~a_bakic@114.39.22.93.rev.sfr.net) (Ping timeout: 260 seconds)
[01:37:55] *** Joins: amb007 (~a_bakic@207.150.22.93.rev.sfr.net)
[01:37:59] <fe[nl]ix> phoe: ASDF3 is at the end of its journey, you can't stretch it much further
[01:38:51] <fe[nl]ix> I want better isolation, but it's getting harder and harder to shoehorn that into the ASDF3 model
[01:39:22] <phoe> fe[nl]ix: sure
[01:40:44] <fe[nl]ix> if you're interested, I could write down a design doc about a purely functional build system (similar to Bazel), but I can't implement it all myself
[01:41:23] <phoe> I'm interested, but I'll be somewhat free in 2023 earliest - CLR2 is gonna keep me busy
[01:41:29] <phoe> so, sure
[01:41:40] <fe[nl]ix> it could even perhaps accept most of ASDF3 syntax, except the imperative stuff
[01:41:45] <fe[nl]ix> what's CLR2 ?
[01:42:06] <phoe> Common Lisp Recipes, 2nd Edi(tion)
[01:42:29] *** Quits: ebrasca` (~user@librepanther.com) (Remote host closed the connection)
[01:42:34] <phoe> ;; sorry for the pun
[01:42:38] <fe[nl]ix> ah, książka
[01:42:55] <phoe> dokładnie
[01:43:03] *** Joins: ebrasca (~user@librepanther.com)
[01:43:42] <fe[nl]ix> perhaps if I have a written doc I can find a gang to implement it
[01:44:03] <fe[nl]ix> i.e. students with way more free time than me
[01:44:05] <fe[nl]ix> :D
[01:45:31] <phoe> :D
[01:46:07] <phoe> either that or it's ASDF4 time to shine™
[01:46:11] <phoe> or both mayhaps
[01:46:13] <phoe> we'll see
[01:48:09] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:50:41] <Josh_2> Ooops, turning on safety 3 showed quite a few typing mistakes with defclass
[01:50:43] <Josh_2> ooppps
[01:50:51] <phoe> :D
[01:54:23] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:9d7d:7385:bf16:b209) (Ping timeout: 256 seconds)
[01:56:49] *** Quits: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net) (Quit: Leaving...)
[01:57:52] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:16:02] *** Quits: epony (~epony@user/epony) (Ping timeout: 240 seconds)
[02:21:05] *** Quits: lambdart (~lambdart@189.4.76.230) (Remote host closed the connection)
[02:21:07] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:22:00] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:26:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[02:27:47] *** Joins: jpl01 (~user@200116b8455fdf001361f7cc95f0c543.dip.versatel-1u1.de)
[02:31:54] *** Joins: dre (~dre@2001:8003:c932:c301:3b1d:32bd:2b3e:4d5b)
[02:33:30] *** Quits: hashfunc102e (~user@162.254.115.155) (Ping timeout: 268 seconds)
[02:34:13] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[02:38:04] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[02:39:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[02:43:49] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[02:44:36] *** Joins: semz_ (~semz@user/semz)
[02:46:45] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[02:47:10] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[02:48:26] *** Joins: hashfunc11c4 (~user@162.254.115.155)
[02:52:56] *** Quits: pve (~pve@178-55-163-48.bb.dnainternet.fi) (Quit: leaving)
[02:53:01] *** Joins: epony (epony@user/epony)
[02:57:39] *** Joins: igemnace (~ian@user/igemnace)
[03:03:54] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[03:07:43] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[03:08:34] *** semz_ is now known as semz
[03:10:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[03:10:24] *** Quits: amb007 (~a_bakic@207.150.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[03:10:53] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[03:16:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:17:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:23:48] *** Quits: hashfunc11c4 (~user@162.254.115.155) (Remote host closed the connection)
[03:30:20] *** Joins: serbest (~ike@user/serbest)
[03:30:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:30:44] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[03:34:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[03:38:58] <AeroNotix> uiop:read-file-string on a 100mb file results in crazy high memory usage
[03:39:20] <AeroNotix> enough to exhaust the heap
[03:39:37] <mfiano> That would depend on the implementation.
[03:39:40] <AeroNotix> sbcl
[03:39:56] <mfiano> That explains it. SBCL uses UTF32
[03:42:13] <AeroNotix> mfiano: but surely that's only ~4x increase
[03:42:27] <AeroNotix> it's exhausing the heap entirely, which on this system is 1GB by default
[03:42:34] <mfiano> Plus all the imtermediary buffering and copying
[03:43:38] <AeroNotix> seems pretty over-the-top
[03:43:42] <mfiano> 1GB is way too small. SBCL should really change that one of these days. It's not like it is allocated unless it is needed. I dedicate almost all 128G of mine
[03:43:48] <White_Flame> it goes through slurp-string stream, instead of reading the file length firsrt
[03:44:04] <White_Flame> the latter would be much smarter, but less abstract.  I'd still do it though
[03:44:26] <AeroNotix> well it's just as well that I am cffi wrapping iouring, then
[03:44:49] <AeroNotix> I was just comparing with some off the shelf 'read file to string' thing
[03:44:57] <AeroNotix> surprising that it uses so much memory
[03:45:18] <AeroNotix> mfiano: good call, though
[03:45:34] <AeroNotix> mfiano: only 128G?
[03:45:55] <AeroNotix> Maybe RAM prices will come down so you can upgrade soon
[03:45:57] <AeroNotix> ;)
[03:47:31] *** Joins: karlosz (~karlosz@47.151.136.69)
[03:47:57] <AeroNotix> (setq inferior-lisp-program "sbcl --dynamic-space-size 256000") there we go
[03:50:32] <White_Flame> --dynamic-space-size yes
[03:50:37] <AeroNotix> lol
[03:50:58] <AeroNotix> tbf, would that be a useful option?
[03:51:03] <White_Flame> man, I wish all GC environments had a growing heap option instead of just fixed size
[03:51:21] <AeroNotix> $DAYJOB runs into this a bunch with toad.js
[03:51:35] <AeroNotix> it's annoying but can be useful in some cases
[03:51:52] <AeroNotix> but yeah I wish the default was to use all available memory, if needed, but an option to limit it
[03:53:31] <AeroNotix> Will sbcl try to run gc if it sees an allocation cannot be made with the currently available heap?
[03:53:46] <AeroNotix> didn't seem like it would, just now. Would need to test it specifically, but thought I'd ask first
[03:56:28] <moon-child> that's what most gcs do...
[03:56:47] <AeroNotix> yeah that's what I expected
[03:57:06] <AeroNotix> like I said, I would need to go back and specifically try but it did not seem to do it just now when I was seeing heap exhaustion
[03:57:11] <AeroNotix> i'll check it out later
[04:00:13] <White_Flame> SBCL runs the GC when the nursery runs out
[04:00:18] <White_Flame> how that operates per-thread, not sure
[04:00:41] <White_Flame> or I should say, how tha tinteracts with multiple threads, not sure
[04:08:38] <AeroNotix> I'm sure it's fine and I probably wasn't paying attention to the order of events
[04:10:11] <AeroNotix> https://gist.github.com/AeroNotix/19806ae1663a7428a682fb9bd53148e9 decent
[04:10:49] <AeroNotix> I know that there are likely better libraries to compare against, more to just do some kind of apples:apples comparison
[04:11:13] <AeroNotix> f is a 100mb file created with: `cat /dev/urandom | strings | dd if=/dev/stdin of=f bs=1MB count=100 iflag=fullblock`
[04:12:33] <AeroNotix> I know in a real-world use you wouldn't yeet the entire file to memory, too, so am putting together an iouring stream interface, too
[04:25:00] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Remote host closed the connection)
[04:25:21] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[04:25:25] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[04:27:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:27:19] *** Joins: occ (~occ@user/occ)
[04:28:51] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[04:35:48] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:51:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[04:51:16] *** Quits: serbest (~ike@user/serbest) (Quit: Konversation terminated!)
[05:00:18] *** Joins: hashfunc95e (~user@162.254.115.155)
[05:01:32] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:06:13] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[05:08:45] *** Quits: VincentVega (~user@212.97.4.87) (Ping timeout: 256 seconds)
[05:10:53] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:12:20] *** Joins: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net)
[05:13:31] *** Noisytoot is now known as [
[05:16:51] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 250 seconds)
[05:21:11] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:22:12] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:25:34] *** Joins: Bike (~Bike@71.69.170.70)
[05:32:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:32:07] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[05:34:07] *** Rue is now known as Carp
[05:34:43] *** Carp is now known as hlz
[05:35:57] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:36:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[05:37:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[05:38:14] *** Quits: jpl01 (~user@200116b8455fdf001361f7cc95f0c543.dip.versatel-1u1.de) (Remote host closed the connection)
[05:39:17] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[05:49:36] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[05:51:51] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:54:18] *** Quits: Catie (~user@user/catie) (Quit: heading out)
[05:56:31] *** Quits: Brucio-61 (~Brucio-6@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Quit: Client Disconnect)
[05:56:38] *** Joins: Brucio-61 (~Brucio-6@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[06:00:19] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[06:10:23] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 250 seconds)
[06:10:40] *** Joins: jealousmonk (~user@user/jealousmonk)
[06:15:19] *** Quits: hashfunc95e (~user@162.254.115.155) (Remote host closed the connection)
[06:16:48] *** Joins: notzmv (~zmv@user/notzmv)
[06:17:00] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: Textual IRC Client: www.textualapp.com)
[06:23:15] *** Quits: AeroNotix (~xeno@185.107.67.252) (Quit: WeeChat 3.4)
[06:27:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[06:30:16] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:41:32] *** Joins: pillton (~user@193-116-202-67.tpgi.com.au)
[06:44:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[06:46:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:01:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:04:37] *** Quits: occ (~occ@user/occ) (Read error: Connection reset by peer)
[07:13:07] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[07:15:03] <dbotton> Is there a way from a running CL program to tell slime/swank to pull up a certain file in the emacs session that is connected?
[07:17:30] <Bike> i think you can use eval-in-emacs to do anything in emacs. i don't know if there's a more convenient/specific way.
[07:19:17] <dbotton> ok, I'll play around a bit.
[07:20:25] *** Joins: jeosol (~jeosol@user/jeosol)
[07:21:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[07:21:29] <pillton> dbotton: There is swank:ed-in-emacs.
[07:24:15] <dbotton> That works for files :)
[07:25:21] <dbotton> now if I can do by symbol :)
[07:25:38] <pillton> You said "pull up a certain file".
[07:25:53] <dbotton> I know and that is perfect
[07:26:05] <pillton> Oh ok. I thought I misread something.
[07:26:25] <dbotton> Do you know how to do the equiv of M-.
[07:28:33] <pillton> I don't know, but I'd probably start with applying M-. to swank:find-definition-for-thing.
[07:30:10] <beach> Good morning everyone!
[07:30:53] <ns12> Good morning beach.
[07:31:14] <dbotton> bike and pilton thanks!
[07:31:32] <Bike> glad to be of service
[07:32:55] <pillton> dbotton: I'd also do C-h k M-. and have a look at slime-edit-definition.
[07:33:09] <pillton> Best of luck.
[07:35:00] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (Read error: Connection reset by peer)
[07:46:17] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[07:46:22] *** Joins: fitzsim` (~user@69-165-165-189.dsl.teksavvy.com)
[07:47:06] *** Quits: fitzsim` (~user@69-165-165-189.dsl.teksavvy.com) (Client Quit)
[08:02:28] *** Quits: hlz (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[08:02:49] *** Joins: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net)
[08:06:13] *** Quits: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net) (Client Quit)
[08:07:14] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[08:10:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:12:14] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:13:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:15:34] *** Joins: semz_ (~semz@user/semz)
[08:17:51] *** Quits: semz (~semz@user/semz) (Ping timeout: 245 seconds)
[08:21:36] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[08:21:50] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[08:24:48] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[08:26:09] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[08:43:01] *** Joins: kathe (~kathe@49.32.236.3)
[08:43:23] <kathe> good morning everyone. :)
[08:47:57] *** Joins: serbest (~ike@user/serbest)
[08:48:38] <kathe> beach: will 'sicl' evovle from being a set of components for others to being a full common-lisp in itself?
[08:53:03] *** Joins: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net)
[08:56:04] <Guest74> any thoughts on user specified modifier keys and/or locks for keyboards? it seems at the kernel interface there's no difference between keys.
[08:56:19] *** Joins: akoana (~ah@user/akoana)
[08:56:26] *** Joins: akoana_ (~ah@user/akoana)
[08:56:32] *** Quits: akoana (~ah@user/akoana) (Client Quit)
[08:56:41] *** Quits: akoana_ (~ah@user/akoana) (Client Quit)
[08:56:53] <kathe> the 'repl' in 'cl' implementations should have some degree of the functionality of a 'cl' editor like "emacs" supporting features like parentheses balancing and syntax colouring.
[08:57:09] *** Joins: akoana (~ah@user/akoana)
[08:57:17] *** Quits: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net) (Client Quit)
[08:57:33] *** Joins: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net)
[08:57:54] <kathe> it could go a step further by allowing function code to be pulled-in to the 'repl' editor and written-out of the same in the appropriate location in a file.
[08:58:45] <kathe> hmnn, that's one more idea i would love to work on after i've gained command over common-lisp.
[08:59:13] <kathe> i think i'll target beach's 'sicl' while utilising code from his "second-climacs".
[09:01:55] <kathe> beach: sorry to have bothered you. just read that 'sicl' *will* become a full implementation (https://sicl.common-lisp.dev/).
[09:04:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:04:45] *** Quits: Bike (~Bike@71.69.170.70) (Quit: sleep)
[09:04:49] <kathe> somehow the modal switching between code editing and 'repl' execution feels uncomfortable. maybe because i'm not used to it yet.
[09:05:17] <kathe> it should be modeless, i.e. the code editing should be integrated with the 'repl'.
[09:05:52] <kathe> the value of modelessness was imbibed into me by my mentor; mr raskin.
[09:06:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:06:09] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:21:02] <beach> kathe: Yes, in fact, the components are currently not usable for a traditional implementation that starts with a "core" in something like C.  The reason is that our modules use the full Common Lisp language.
[09:21:56] <kathe> beach: yes, i realised that. so will 'sicl' eventually need to be compiled from another common-lisp implementation to get a working system?
[09:22:11] <kathe> beach: just the way 'sbcl' is currently?
[09:22:22] <beach> kathe: I think the right thing is to have an IDE rather than adding IDE-like features to a very simple REPL.
[09:22:29] <White_Flame> well, C-x C-e can evaluate straight from a source code buffer
[09:22:37] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[09:23:08] <White_Flame> so you can keep expressions positionally in a file instead of in history at hte repl
[09:23:25] <beach> kathe: SICL is bootstrapped from an existing Common Lisp implementation, which is the most reasonable way of writing a Common Lisp system.
[09:23:32] <kathe> beach: i guess you're right about the 'ide' part. a better approach would be improve your "second-climacs" to improve the user experience while writing code.
[09:24:06] <beach> kathe: Yes, the idea for Second Climacs is to provide much better feedback than existing editors.
[09:25:04] <kathe> beach: count me in on your "second-climacs" project. but it will take me around 8 years from now to be productive. sorry about that, but with my learning disability, study progress is very slow.
[09:25:29] <beach> kathe: There is a paper by Krystof that describes how SBCL is bootstrapped.  "SBCL, a Sanely Bootstrappable Common Lisp".  It is not nearly as ambitious as the bootstrapping technique used by SICL.
[09:26:55] <kathe> beach: that paper appears to be by someone else; christophe rhodes.
[09:27:08] <beach> That is who Krystof is.
[09:27:17] <kathe> ah, okay.
[09:28:12] <kathe> why do people on 'irc' assume identity labels which are far removed rom real world?
[09:28:30] <kathe> my surname is "kathe" so i'm kathe on 'irc', and my website is "kathe.in".
[09:28:34] <kathe> simple, isn't it?
[09:28:42] <kathe> is there some kind of fear of repurcussions?
[09:28:48] <beach> kathe: "Krystof", "Christof", "Xof" are pronounced the same way.
[09:29:26] <kathe> beach: alternatively, could it be because those handles aren't available?
[09:29:35] <beach> kathe: And "beach" and "spiaggia" are just literal translations of my last name.  It is just for kicks.  Few people are trying to be real anonymous.
[09:29:59] <kathe> beach: just for kicks! :D
[09:30:23] <beach> A large number of people here come to ELS pretty much every year, so we know one another fairly well.
[09:30:43] <kathe> beach: are you of italian ancestry?
[09:30:49] <beach> No.
[09:30:59] <beach> In fact, a significant number of people here have come to visit me at home. :)
[09:31:08] <kathe> i thought spiaggia is an italian surname.
[09:31:16] <moon-child> kathe: I do not maintain strong anonymity, but I do try to make the link between my digital presence and my real-life one moderately weaker rather than stronger.  Not using my real name as my IRC nickname is part of that
[09:31:32] <beach> kathe: "spiaggia" is just Italian for "beach".
[09:31:55] <kathe> beach: so which nationality is "strandh" from?
[09:32:01] <beach> Sweden.
[09:32:06] <kathe> ah, okay.
[09:32:40] <kathe> so "strandh" in swedish is associated with a beach?
[09:33:41] <beach> Swedish names are often references to nature, so "strand" means "beach" or "shore", but this is getting quite off topic, so let's leave it there.
[09:34:01] <kathe> beach: thanks. and you're right. stopping now.
[09:35:00] <beach> I'll be happy to talk more about IDEs and Common Lisp implementations, of course.
[09:35:09] <kathe> sure.
[09:35:45] <kathe> is "second-climacs" independent enough to earn it's own name?
[09:36:38] <kathe> i'll vouch for 'clide' "common lisp integrated development environment". :)
[09:36:50] <beach> It's a complete rewrite of (first) Climacs, so yes.  The buffer representation is better, and (first) Climacs did not attempt to analyze the buffer contents.
[09:37:33] <kathe> beach: if 'clide' isn't already taken, could you please use it?
[09:37:49] <kathe> 'clide' is simpler and neater. :)
[09:38:00] <beach> The IDE will likely be a bunch of independent components based on McCLIM.  People have strong preferences of how their windows are organized, so that aspect should be flexible.  We already have several components like an inspector, a backtrace inspector, etc.
[09:38:33] <beach> kathe: Second Climacs is not an IDE and won't be.
[09:38:40] <kathe> beach: just wait for me to be ready. i think i can contribute heavily to improve the "user experience".
[09:38:43] <beach> It will be just one of the many components.
[09:39:13] <kathe> beach: just read-up on "cannon cat" or "archie" editors.
[09:39:23] <kathe> i think it was "archy" editor.
[09:40:22] <kathe> beach: first rule of successful interface design is to reduce mental context switches as much as possible.
[09:40:27] <beach> The techniques for analyzing source code used by most editors won't be very useful for Common Lisp.
[09:41:59] <kathe> i used to have a one-handed keyboard in addition to my regular one because while working with smalltalk the context switching induced while moving the right-hand from the mouse to the keyboard was too much.
[09:42:50] <kathe> one-handed keyboard http://matias.ca/halfkeyboard/
[09:43:22] <kathe> my regular keyboard https://hhkeyboard.us/
[09:43:25] <beach> I am not an expert in user interaction, but that's not the important part of Second Climacs.  Since it uses McCLIM, that part can be easily replaced by any user.
[09:44:04] <kathe> beach: yes, that's one more part of the principle, the user-interface should be as easily modifiable on a per user basis as possible.
[09:44:10] <beach> The important part is the analysis of the code in the buffer, and how that result of that analysis is presented to the user.
[09:45:40] <kathe> beach: it's not just how well the presentation is for analysis, but also how natural it is for the user to "get back" in the game after analysis is over.
[09:46:06] <kathe> beach: every mental context switch is considered a penalty point. :)
[09:46:10] <beach> Er, what?
[09:46:38] <beach> There will be no beginning or end of the analysis.  Everything will be analyzed at typing speed.
[09:46:55] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[09:46:56] <kathe> beach: yes. that would be *very* impressive.
[09:46:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Read error: Connection reset by peer)
[09:47:42] <kathe> beach: but you do understand that the user moving his "attention" between writing code and noticing it's analysis is a "context switch".
[09:48:01] *** Joins: occ (~occ@user/occ)
[09:48:04] <beach> There is nothing I can do about that.
[09:48:18] <kathe> beach: just wait for me to get ready. :)
[09:48:37] <moon-child> I think the most problematic thing is a human<->computer round-trip.  So long as explicit feedback is not needed to shift attention, I do not think there is a problem
[09:49:43] <beach> Sounds right.  I don't plan for any feedback to impose any requirements on how the user proceeds.
[09:50:13] <kathe> moon-child: did you know the tooling used in microsoft visual studio while writing code; the drop-down code completion list, actually induces a context-switch?
[09:50:51] <moon-child> I have not used visual studio in any serious capacity
[09:50:56] <kathe> mr raskin beat me up on that point repeatedly, with a heated iron bar ;)
[09:51:00] <beach> kathe: I see absolutely no reason to take inspiration from Visual Studio.
[09:51:22] <kathe> beach: i'm saying the converse, "do not" get inspired by visual studio. :)
[09:51:38] <beach> I have never used any Microsoft product, so I'm safe.
[09:51:48] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:91b:49f7:fde:97e3)
[09:51:54] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:51:59] <kathe> beach: most of my professional life was spent under microsoft visual c++. :)
[09:53:28] <kathe> beach: the advantage with 'clim' based 'ide' is one can break new ground.
[09:53:44] <kathe> while learning from the past (genera, interlisp, etc.).
[09:54:56] <kathe> okay, i gotta go take my dad to the neurologist.
[09:55:03] <kathe> see you all after 6 hours.
[09:55:05] *** Quits: kathe (~kathe@49.32.236.3) (Quit: Leaving)
[10:00:17] *** Joins: aartaka (~aartaka@5.1.53.226)
[10:04:02] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[10:04:33] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[10:08:33] *** Joins: rain3 (~rain3___@2a02:2f09:d103:6400:778f:987:8477:e76d)
[10:11:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[10:13:05] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:27:13] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:ec96:d9ec:ea2:f365)
[10:28:14] *** Quits: rain3 (~rain3___@2a02:2f09:d103:6400:778f:987:8477:e76d) (Quit: Leaving)
[10:31:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:33:26] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:ec96:d9ec:ea2:f365) (Ping timeout: 250 seconds)
[10:33:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:38:03] <flip214> ELS22 is still planned to be on-site, right?
[10:38:30] <beach> Yes.
[10:43:19] *** Quits: aartaka (~aartaka@5.1.53.226) (Ping timeout: 256 seconds)
[10:43:33] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:46:31] *** Joins: xsperry (~xs@user/xsperry)
[10:47:31] <flip214> thanks!
[10:53:23] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[10:54:10] *** Joins: wacki (~wacki@87.122.93.189)
[11:03:45] *** Quits: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net) (Ping timeout: 250 seconds)
[11:11:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[11:12:25] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 250 seconds)
[11:12:47] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[11:13:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:16:25] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:16:46] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:18:36] *** Joins: shka (~herr@109.231.0.226)
[11:19:06] *** Joins: treflip (~user@user/treflip)
[11:19:15] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[11:21:10] <phoe> flip214: both on-site and virtual
[11:33:19] <flip214> phoe: well, I prefer to be there, possibly seeing the Atlantic
[11:36:01] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[11:37:09] <phoe> so will I, also helping with streaming
[11:37:27] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[11:37:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[11:39:21] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:91b:49f7:fde:97e3) (Quit: Textual IRC Client: www.textualapp.com)
[11:39:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:43:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[11:44:52] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:53:57] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[11:54:43] *** Joins: amb007 (~a_bakic@207.150.22.93.rev.sfr.net)
[11:57:04] *** Quits: dre (~dre@2001:8003:c932:c301:3b1d:32bd:2b3e:4d5b) (Ping timeout: 250 seconds)
[11:59:01] *** Joins: pve (~pve@176-93-53-84.bb.dnainternet.fi)
[12:02:54] *** Joins: Oddity (~Oddity@user/oddity)
[12:09:00] *** Joins: dre (~dre@119-18-1-208.771201.syd.nbn.aussiebb.net)
[12:09:49] *** Quits: jack_rabbit (~knusbaum@23.249.37.254) (Ping timeout: 240 seconds)
[12:18:15] *** Joins: knusbaum (~knusbaum@23.249.37.254)
[12:20:24] *** Quits: igemnace (~ian@user/igemnace) (Read error: Connection reset by peer)
[12:21:55] *** Quits: amb007 (~a_bakic@207.150.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[12:22:09] *** Joins: amb007 (~a_bakic@39.13.23.93.rev.sfr.net)
[12:28:55] <flip214> great, let'
[12:29:10] <flip214> let's have a nice time there
[12:37:35] *** Joins: igemnace (~ian@user/igemnace)
[12:37:57] *** Quits: amb007 (~a_bakic@39.13.23.93.rev.sfr.net) (Ping timeout: 240 seconds)
[12:38:15] *** Joins: amb007 (~a_bakic@246.12.23.93.rev.sfr.net)
[12:59:53] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[13:00:45] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[13:02:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:11:36] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[13:15:29] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:17:12] *** Quits: dre (~dre@119-18-1-208.771201.syd.nbn.aussiebb.net) (Quit: dinner with inlaws)
[13:27:38] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 250 seconds)
[13:31:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[13:33:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:37:49] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[13:39:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:40:06] <lisp123> Is there a way to do `(.... ,@(append .. .. `,@[list] ..))
[13:40:22] <lisp123> the inner `,@ is illegal, so wondering if there is another way to achieve it
[13:41:20] <lisp123> hmmm ignore me for now, the problem is more nuanced
[13:41:33] <jackdaniel> ,@(list* (append .. ..) ,list) ;?
[13:41:42] <jackdaniel> or `(... ,@(append .. ..) ,@list)
[13:42:28] <flip214> lisp123: if that matches your use-case, there's (alexandria:flatten (list ...))
[13:42:46] <lisp123> The actual problem is I have `(... ,@(append R O K R)) correctly becomes (R O K R)
[13:43:04] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[13:43:07] <lisp123> but K = (if (null 'something (:K K) nil)
[13:43:22] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[13:43:34] <lisp123> so I need to splice it twice, the second time after if (null 'something) or whatever gets evaluated
[13:43:58] <lisp123> Example: (APPLY #'PROMPT-FOR-TARGET-STRING-WITH-CLIENT CLIENT (REMOVE NIL (LIST PROMPT IF DIRECTION (:DIRECTION DIRECTION) NIL)))))
[13:44:36] <lisp123> The IF DIRECTION (:DIRECTION DIRECTION) ... part is my issue, I need to merge (:DIRECTION DIRECTION) into the higher list that starts with (REMOVE NIL (LIST ...)
[13:44:48] <jackdaniel> assuming that (if (null …)) can't be evaluated at compile time and that you write it in a macro, then it is not possible
[13:45:08] <jackdaniel> because the list to be appended is not available at compile time
[13:45:35] <lisp123> Yeah I think I need to figure out another way to do it
[13:45:48] <lisp123> (hopefully there is one)
[13:45:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[13:46:22] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Client Quit)
[13:46:29] <lisp123> because the list to be appended is not available at compile time -> unfortunately this is the problem
[13:47:09] <jackdaniel> that said, if you are intimate with what is passed, then you may expand to
[13:47:27] <jackdaniel> `(if (null something) ,(apply-without-something) (apply-with-something))
[13:47:42] <jackdaniel> throw a comma in the middle
[13:47:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:47:51] <lisp123> yes
[13:47:55] <lisp123> I am thinking something similar
[13:48:17] <lisp123> what I am thinking is to push the :direction out of the code, so that it no longer requires an append
[13:48:45] <lisp123> then write a function that removes :direction nil (which is the case that becomes an issue by pushing :direction out of the list
[13:49:00] <jackdaniel> or expand to `(apply a b c (append ,x ,y (if (null something) ,z q))
[13:49:23] <lisp123> yep
[13:49:37] <lisp123> that's what I have -> just z was before (:direction direction) and not a list
[13:49:41] <lisp123> not an atom*
[13:50:08] <lisp123> so I will fix that by doing `(apply a b c (append ,x ,y :direction (if (null something) ,z q))
[13:50:26] <lisp123> and then an intermediate function to remove :direction if something
[13:50:35] <lisp123> *fingers-crossed*
[13:51:19] <jackdaniel> Error: unbound variable *FINGERS-CROSSED*.
[13:51:52] <lisp123> :p
[13:52:26] <lisp123> jackdaniel: Why did you say (sorry if I'm mistaken) earlier that you didn't like how CLIM mixed optionals and keyword parameters?
[13:52:54] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[13:53:11] <jackdaniel> consider the function present, its lambda list goes like: (object &optional (object-type (ptype-of object)) &key stream some other options)
[13:53:23] <jackdaniel> now, usually indeed object-type is the right default
[13:53:35] <jackdaniel> but when I want to supply a different stream, then I need to always type (ptype-of object)
[13:53:45] <jackdaniel> what is braindead from the "defaulting" perspective
[13:53:58] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:fd11:9449:e2c7:833f)
[13:54:04] <jackdaniel> especially that it is not such short function name, it is (presentation-type-of object) ;)
[13:54:12] *** Joins: migap (~migap@docto-jac.u-strasbg.fr)
[13:54:40] <lisp123> thats true :)
[13:55:02] <jackdaniel> that said the fact that sbcl issues a style warning is also a hindrance, because when you have such lambda lists in the specification then you get style warnings you can only comment as "yeah, I know."
[13:55:30] <lisp123> I feel like the CL spec writers dropped the ball on &optional &key
[13:55:32] <jackdaniel> (because such lambda lists are very much in limit of the spec)
[13:55:33] <lisp123> *ducks*
[13:55:49] <lisp123> It's an aggressive style warning though
[13:55:59] <lisp123> Hopefully ECL is more nice :)
[13:56:08] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[13:56:10] <jackdaniel> hm, allowing mixing keyword and optional parameters was probably a decision to allow extending /existing/ software that has optional parameters with keywords
[13:56:12] <lisp123> Life would be much easier if &key was separate to &optional
[13:56:21] <jackdaniel> i.e you can't remove the optional part, but you may make the rest less annoying
[13:56:32] <lisp123> ah fair enough
[13:56:41] <jackdaniel> yes, that's the reason why this style warning is issues I suppose - to discourage doing that
[13:56:58] <jackdaniel> s/issues/issued/
[13:57:09] <jackdaniel> and not really "I suppose" - that's basically what I've been told by sbcl devs :)
[13:57:31] <ogamita> lisp123: but it is.
[13:57:34] <ogamita> lisp123: &key is used to parse &rest
[13:57:45] <ogamita> And would you discourage &optional with &rest ?
[13:58:00] <jackdaniel> yes, I would :)
[13:58:11] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[13:58:29] <mfiano> Is my guess that ogamita = pjb correct?
[13:58:32] <jackdaniel> yes
[13:58:34] <Shinmera> yes
[13:58:38] <mfiano> I win :)
[13:58:38] <lisp123> ogamita: No, &optional &rest are good together :)
[13:58:39] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[13:58:54] <flip214> lisp123: if you don't know at compile time, you need to build the argument list at runtime.
[13:59:19] *** Quits: pillton (~user@193-116-202-67.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[13:59:23] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[13:59:29] <flip214> (let ((args (list ...))) (when (...) (push :append args) (push :direction args)) ... (apply .... args))
[13:59:33] <lisp123> But, I would've thought a better parser could have been written?
[14:00:12] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Client Quit)
[14:00:13] <lisp123> But maybe I missed a step (worse one could have &optional &key without &rest, for those scenarios, don't collect &key into &optional)
[14:00:34] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:01:57] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:fd11:9449:e2c7:833f) (Ping timeout: 240 seconds)
[14:03:24] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Quit: WeeChat 3.4)
[14:03:41] <lisp123> flip214: Yup
[14:04:08] <jackdaniel> keyword arguments are on the other hand whole another problem
[14:04:56] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:99ac:6a4c:9a78:bb72)
[14:05:22] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:10:26] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:99ac:6a4c:9a78:bb72) (Killed (zinc.libera.chat (Nickname regained by services)))
[14:11:03] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[14:11:11] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[14:11:32] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[14:11:36] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:11:53] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:3027:c841:ac8b:d6f4)
[14:14:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:15:51] *** Joins: cosimone (~user@93-47-230-95.ip115.fastwebnet.it)
[14:17:01] *** Joins: lisp123w (~user@80.227.170.170)
[14:17:41] <lisp123w> the bigger issue which made my original comment wrong is there is already a minor overhead in parsing lambda lists
[14:17:58] <lisp123w> And any more advanced parsing will just slow down the system to allow edge cases to benefit
[14:18:16] <lisp123w> So I guess from that perspective it makes sense the way it is
[14:21:49] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:3027:c841:ac8b:d6f4) (Ping timeout: 256 seconds)
[14:29:23] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[14:29:50] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:30:27] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[14:31:36] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[14:32:51] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:35:04] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[14:37:48] <ns12> Hello, suppose I use the REPL to define function F and G. Function F makes use of function G. If I compile function F, and later call function G from the REPL, will I be executing the compiled version of function G?
[14:38:36] <moon-child> most modern implementations compile all functions.  Not sure exactly what you're asking, though, or why you would care if a function were compiled or not
[14:39:18] <lisp123w> Note that Re-evaluating F will not automatically re-evaluate G
[14:39:38] <lisp123w> And re-evaluating G means that every function that calls G gets the new version
[14:39:47] <moon-child> not if G is inlined
[14:39:48] <lisp123w> (unrelated but something I thought to flag)
[14:39:57] <lisp123w> moon-child: True :)
[14:39:59] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[14:40:03] <moon-child> (I assume that by 're-evaluating G' you mean 're-eevaluating the definition of G')
[14:40:06] <ns12> What do you mean by "re-evaluating"? Does it refer to a re-definition?
[14:40:14] <lisp123w> yes
[14:40:31] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:40:35] <phoe> that's redefining, not reevaluating
[14:40:53] <phoe> you can evaluate a function object a real lot of times and it'll always return itself
[14:41:14] <lisp123w> Yes of course :)
[14:41:33] <moon-child> (loop for x = #'f then (eval x))
[14:41:36] <lisp123w> I meant reevaluating the defun form, but redefining is a better term
[14:41:45] <lisp123w> I'm just used to C-x C-e ;)
[14:47:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[14:49:47] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:51:06] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[14:57:02] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[14:57:53] *** Joins: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de)
[15:01:09] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[15:08:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:10:45] *** Quits: cosimone (~user@93-47-230-95.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[15:14:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:19:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[15:23:02] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[15:23:28] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[15:25:18] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[15:30:49] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:31:59] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[15:32:25] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[15:32:47] *** Joins: cosimone (~user@93-47-230-95.ip115.fastwebnet.it)
[15:34:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[15:36:08] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:36:42] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:37:17] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:44:32] *** Quits: treflip (~user@user/treflip) (Quit: rebooting...)
[15:50:08] *** Joins: treflip (~user@user/treflip)
[15:52:02] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[15:54:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:11:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[16:11:45] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[16:13:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:16:17] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:833f:e9c7:6325:4206) (Ping timeout: 240 seconds)
[16:33:18] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[16:33:47] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[16:39:57] <dieggsy> huh, I went to install CCL just to check out how it compares to SBCL and found it's not in fedora's repos
[16:40:17] *** Joins: morganw (~user@80.225.24.132)
[16:42:09] *** Quits: serbest (~ike@user/serbest) (Quit: Konversation terminated!)
[16:45:48] <jackdaniel> it may be due to the sentiment some linux distributions have that packages need to be bootstrapped from C (possibly indirectly)
[16:45:59] <jackdaniel> while CCL is bootstrapped from its older version
[16:46:21] *** Joins: Everything (~Everythin@37.115.210.35)
[16:46:43] <jackdaniel> sbcl doesn't have this problem because it may be bootstrapped from either clisp or ecl that in turn require only standard toolchain plus a few popular libraries as dependencies
[16:47:05] <jackdaniel> dieggsy: ^
[16:49:01] <dieggsy> jackdaniel: oh, interesting. well. that feels a bit purist? jaja. I guess I'll build it myself. thanks for the info
[16:49:18] <dieggsy> I suppose it's as good a time as any to finally figure out how to set up a copr repo
[16:49:33] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[16:51:41] <dieggsy> ah i guess they also provide binaries
[16:52:44] *** Joins: Bike (~Glossina@71.69.170.70)
[16:53:14] <jackdaniel> rebuilding it is still worth it
[16:53:28] <jackdaniel> working C-. for the implementation symbols is the prime reason
[16:54:07] <dieggsy> Ah true
[16:54:24] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[16:56:37] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:59:19] *** Joins: VincentVega (~user@212.97.4.87)
[17:05:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[17:08:12] *** Quits: light (~light@user/light) (Ping timeout: 250 seconds)
[17:10:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:10:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:12:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:14:17] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Quit: hhdave)
[17:21:10] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[17:21:15] *** Joins: Guest4474 (~Guest44@95.175.104.64)
[17:23:04] *** Parts: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (WeeChat 3.4)
[17:24:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:25:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:25:52] <Guest74> anybody know how case to jump table conversion works on sbcl? Do the clauses have to be linear and sequential?
[17:27:11] <beach> Let me see whether I understand this correctly.  When we use ASDF COMPILE-OP, the FASLs resulting from the compilation are not loaded, yes?
[17:27:28] *** Joins: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net)
[17:27:35] <Bike> i think so?
[17:28:10] <beach> If so, then a system with file A and B in that order and where A defines a function the typical way, and B calls this function at compile time will not work.  Right again?
[17:28:15] <Bike> yeah, i just tried compiling one of my systems and it's not loaded, but it's clearly been read etc
[17:28:22] <jackdaniel> a common gotcha is that this is transient. if system A depends on B, and you compile-op A, then B will be loaded
[17:28:36] <jackdaniel> this is *not* transient
[17:28:51] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:5cd2:cc94:8c4b:19bb)
[17:28:57] <beach> "transient" how?
[17:29:14] <jackdaniel> your compile-op will trigger load-op of your dependencies afaik
[17:29:37] <jackdaniel> so this assertion that compile-op won't load the system is true only for your system, not for your dependecies
[17:29:40] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[17:29:41] <beach> How is that "transient"?
[17:29:47] <Guest74> I get away with defining functions normally in a file preceeding a macro and have no problem with them being available at compile time.
[17:29:49] <jackdaniel> I've corrected myself a line below
[17:29:55] <jackdaniel> that "this is *not* transient"
[17:30:03] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:bd48:3fa6:d41:7f9)
[17:30:24] <Guest74> s/a macro/a macro in another file/
[17:30:43] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[17:30:58] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[17:31:05] <_death> transitive.. "transient" means "temporary"
[17:31:17] <jackdaniel> ah, thanks, my bad then
[17:31:19] *** Quits: Guest4474 (~Guest44@95.175.104.64) (Ping timeout: 256 seconds)
[17:31:49] <jackdaniel> yes, I've meant that it is not transitive to your dependencies
[17:32:01] <beach> Ah, "transitive".  Now I understand.
[17:32:33] *** Joins: aeth (~aeth@user/aeth)
[17:33:00] <jackdaniel> a "false friend", in polish "przejściowy" have two meanings (it could be used as 'transient' and as 'transitive')
[17:33:41] <beach> Anyway, so it seems to me a bad idea for a system to do what I just described, i.e., define a function in A without (EVAL-WHEN (:COMPILE-TOPLEVEL) ...) and count on it being usable at compile time in B.
[17:35:53] <jackdaniel> if you do compile-op then this seems like a bad idea
[17:36:19] <jackdaniel> if you load the system then I don't know whether it first compiles all files and then loads them, or compile-and-load's them as it goes
[17:36:21] <beach> Yes, so I mean, the person designing such a system essentially rules out COMPILE-OP.
[17:37:03] *** Joins: kathe (~kathe@49.32.191.180)
[17:37:07] <beach> And that doesn't necessarily sound like a good idea.  At least not if the system is meant to be used by others, like a library for instance.
[17:37:18] <kathe> hello everyone.
[17:37:34] <jackdaniel> if someone uses it as a library, then compiling your system that depends on that library will cause this library to be loaded
[17:38:09] <beach> Yes, I understand that, but that's not the use case I am currently interested in.
[17:38:22] <Guest74> isn't this how asdf is specified to compile files?
[17:38:31] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[17:38:34] <beach> Guest74: "this"?
[17:38:59] <Guest74> how you described, not what jd: is going on about.
[17:39:06] *** Joins: AeroNotix (~xeno@185.107.67.252)
[17:39:11] *** Joins: light (~light@user/light)
[17:39:26] <kathe> circumstances on home front now prevent me from continuing with computing.
[17:39:26] <beach> Guest74: That was my first question, so apparently, the answer is "yes".
[17:39:50] <kathe> i am thankful for the good exchanges we've had in our short association.
[17:40:02] <kathe> i will no longer be able to spend time here.
[17:40:11] <beach> kathe: Sorry to hear that.  Take care!
[17:40:15] <kathe> sorry if i've bothered anyone, it wasn't intentional.
[17:40:34] <AeroNotix> uhhhhh
[17:40:36] <AeroNotix> drama?
[17:40:41] <kathe> beach: thanks. in particular, thanks for the exchanges we've had.
[17:40:49] <beach> Sure.
[17:40:50] <kathe> also thanks to "phoe".
[17:40:57] <etimmons> beach: I think it depends. Do you have :serial t? If so, then I'm fairly certain A's fasl will be loaded before B is compiled
[17:41:10] <kathe> goodbye. and may you all fare well. happy hacking.
[17:41:18] *** Quits: kathe (~kathe@49.32.191.180) (Client Quit)
[17:41:23] <AeroNotix> well that's a shame :(
[17:41:44] <etimmons> If you don't and the file components don't have a :depends-on list, then the fasls will not be loaded
[17:42:36] <beach> etimmons: Even with compile-op?
[17:42:37] <jackdaniel> etimmons: so compile-op will load all except for the last file if dependencies are specified?
[17:42:39] <etimmons> If B has a :depends-on (A), A's fasl will be loaded before B is compiled.
[17:43:00] <etimmons> I'm fairly certain. I can double check when my computer boots
[17:43:14] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:5cd2:cc94:8c4b:19bb) (Killed (zinc.libera.chat (Nickname regained by services)))
[17:43:37] <beach> etimmons: Let me re-read what you said.
[17:44:32] <beach> Wow, that's very surprising.
[17:44:44] <beach> ... and it contradicts what Bike said, no?
[17:45:28] <jackdaniel> I've just checked, with two files with serial dependency indeed the first one is loaded (and the second one is not) during compile-op
[17:46:08] <beach> My expectation would be that ASDF would reuse the compilation and evaluation environments between all the files, but that no files would be loaded.
[17:46:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[17:46:36] <beach> Anyway, I must adjust my expectations and perhaps invent my own ?-OP.
[17:46:54] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[17:48:04] *** Joins: aeth (~aeth@user/aeth)
[17:48:26] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:50:50] <etimmons> Computer booted. I see the same thing as jackdaniel
[17:52:00] <etimmons> beach: Is there a portable way for it to reuse the environment?
[17:52:16] <jackdaniel> perhaps with-compilation-unit
[17:52:53] <etimmons> It uses w-c-u, but I thought that only deferred warnings
[17:54:38] <jackdaniel> either way, assuming that the function use wrapped in (EVAL-WHEN (:COMPILE-TOPLEVEL) …) and it is used by some exported macro, then when the lisp is restarted and the system is loaded, then this macro will complain that the function doesn't exist
[17:55:00] <jackdaniel> so indeed that's a bad idea
[17:57:15] <etimmons> A quick test using w-c-u (on SBCL, at least) shows that two compile-files don't share the same compilation environment
[17:58:39] <jackdaniel> then all what is left is either concatenating files (asdf has such functionality afair) and then compiling the result or adopting first class global environments in all implementations and feeding them to compile-op
[17:59:41] <Bike> "and it contradicts what Bike said, no?" i compiled my own system which has no external dependencies, so it probably just compile-op'd all the files in the system
[17:59:41] <etimmons> Or use POIU :P
[17:59:47] <Bike> and apparently i'm not missing any eval-whens, so that's nice
[18:01:01] <Bike> oh wait. spoke to soon, it did load some stuff
[18:01:21] <Bike> yeah, it just didn't load the last file. everything else seems to be loaded. sorry for the confusion.
[18:01:32] <etimmons> ASDF's source file concatenation leaves some things to be desired. It'll work on most systems, but not on systems that use an around-compile hook or assume the _package_ binding is reset between files
[18:01:33] <jackdaniel> I've put big fat '(PRINT "AAAAAAAAAAAAAAAAA")' and '(PRINT "BBBBBBBBBBBB")' in my files a.lisp and b.lisp
[18:01:38] <jackdaniel> that's how I've verified it
[18:01:46] <jackdaniel> only aaaa was printed ,)
[18:02:07] <etimmons> And I'm sure there are other corner cases where it'll fail
[18:03:01] <jackdaniel> then concatenate files but put each file in (with-asdf-file-unit (…) …)
[18:03:07] <jackdaniel> it will be very asdf.lisp-esque
[18:03:32] <etimmons> yeah, I think that's what needs to be done
[18:03:55] *** Joins: Guest4461 (~Guest44@95.175.104.64)
[18:04:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[18:05:16] <jackdaniel> btw, text reflow by means of the incremental redisplay example (reposting from #clim): http://turtleware.eu/static/paste/1ada5b4e-reflow.webm
[18:06:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:07:06] <Guest74> is there something like SUBSTITUTE to replace sequences, e.g. (substitute "ab" "ba" "abababa")
[18:07:18] <phoe> Guest74: cl-ppcre
[18:08:12] *** Joins: lambdart (~lambdart@189.4.76.230)
[18:08:12] <Guest74> i should have prefaced, in the standard.
[18:08:40] <beach> etimmons: No, probably no portable way.
[18:08:41] <Bike> no. if the key and the replacement are the same length, you could maybe whip something up with SEARCH and REPLACE.
[18:08:51] <_death> jackdaniel: cool :)
[18:09:02] <jackdaniel> thanks
[18:09:24] <Guest74> oh, I have something.  Just wondering if there was something standard.  I've run into that before writing my own SEARCH.
[18:10:00] <etimmons> jackdaniel: That is very nice :)
[18:10:22] <beach> jackdaniel: I specifically stated that B used the function only at compile time.
[18:10:56] <jackdaniel> I see
[18:10:59] *** Quits: Guest4461 (~Guest44@95.175.104.64) (Ping timeout: 256 seconds)
[18:11:13] <beach> Bike: Ah, yes, no dependencies would explain the observation.
[18:14:13] <beach> Thanks for all the information about ASDF COMPILE-OP.  It does seem like I need to create a different operation.
[18:16:20] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[18:18:17] <AeroNotix> jackdaniel: are you familiar with McCLIM?
[18:18:23] <AeroNotix> how would you compare it to something like Qt/GTK?
[18:18:24] <jackdaniel> a little, yes
[18:19:16] <jackdaniel> qt/gtk manage sets of widgets while mcclim manages commands and presentations
[18:19:49] <jackdaniel> and mcclim is more lispy :)
[18:19:58] <AeroNotix> I'd hope so!
[18:20:14] <AeroNotix> I love Qt personally, but I find using it from anything which isn't C++/Python to be extremely tedious
[18:20:29] <jackdaniel> qml is also an option
[18:20:55] <AeroNotix> I never got deep into QML. I should take another look some time
[18:21:02] <AeroNotix> I got out of the Qt game around Qt4
[18:21:14] <jackdaniel> in fact Paul Ruetz works on lqml right now (that is an offshot of eql5 without dependencies on runtime libraries if I understand correctly)
[18:21:50] <AeroNotix> I'll take a gander, thanks
[18:21:57] <beach> AeroNotix: jackdaniel is being modest.  He is the main maintainer of McCLIM.
[18:22:05] <AeroNotix> :)
[18:22:52] <AeroNotix> I've seen a tonne of McCLIM screenshots over the years and there's just this great look n feel to them all that I really dig
[18:22:54] <beach> AeroNotix: If you can, I strongly recommend you try McCLIM.  More users and more contributors would be a good thing for the entire "community".
[18:23:03] <AeroNotix> beach: you mean all 50 of us?
[18:23:12] <AeroNotix> beach: I will definitely give it a fair go
[18:23:21] <beach> 50 is quite a decent number.
[18:23:29] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[18:23:44] <AeroNotix> is there anything like QtDesigner for McCLIM?
[18:24:15] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[18:24:20] <jackdaniel> I've seen some mentions of such tools for CLIM (not especially for McCLIM), but I've never used one (I don't know where to look for them)
[18:24:40] <jackdaniel> that said having :reinitialize-frames t options gives "update frame on recompilation" behavior, so you have interactive C-c C-c mechanism
[18:24:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:24:58] <jackdaniel> re presentations, here is a nice overview (not lisp related): http://www.textfiles.com/bitsavers/pdf/mit/ai/aim/AITR-794.pdf
[18:25:09] <AeroNotix> jackdaniel: 404
[18:25:13] <jackdaniel> yes, I've just noticed
[18:25:36] <jackdaniel> https://dspace.mit.edu/bitstream/handle/1721.1/41161/AI_WP_219.pdf
[18:25:36] <jackdaniel> here
[18:25:44] <AeroNotix> thanks
[18:26:05] <jackdaniel> July, 1981 :)
[18:26:10] <AeroNotix> a fine vintage
[18:26:52] <AeroNotix> jackdaniel: skimming through so far seems like the 'presentation' concept is an early iteration of MVC?
[18:27:25] <jackdaniel> perhaps? in mcclim you slap objects onto the screen and they retain their presentation-type
[18:27:47] <jackdaniel> so then when you have an input context that accepts i.e instances of the class rover, then "rovers" will be mouse sensitive
[18:28:23] <AeroNotix> does the presentation layer automatically update when domain objects update?
[18:28:42] <jackdaniel> you mean like change-class ?
[18:28:51] <AeroNotix> I mean sort of like how React operates
[18:28:58] <jackdaniel> I don't know how react operates
[18:29:00] <AeroNotix> some of the wording implies this might be the case
[18:29:12] <_death> you could marry mcclim and cells
[18:29:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[18:29:59] <jackdaniel> you may redisplay output records (and presentations are a kind of the output record), so you could plug something to update the screen on the model change that is not triggered by the command
[18:30:26] <jackdaniel> that said, the "traditional" way in clim to redisplay the screen is executing a command
[18:30:35] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[18:30:37] <AeroNotix> got it, thanks
[18:30:45] <jackdaniel> like REPL, but Read(command)Execute(command)Display(screen)Loop
[18:31:50] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:bd48:3fa6:d41:7f9) (Quit: Konversation terminated!)
[18:31:57] <jackdaniel> if you try it and have questions then there is #clim channel for troubleshooting and bragging (sometimes mild chit-chat:)
[18:33:36] <AeroNotix> thanks!
[18:34:58] <etimmons> AeroNotix: Regarding your question on #sbcl, you might be interested in osicat https://github.com/osicat/osicat
[18:35:06] <AeroNotix> etimmons: I use it a tonne
[18:35:21] <etimmons> ah, great :)
[18:35:51] <etimmons> I recently added a bunch of Windows specific APIs to it
[18:36:02] <AeroNotix> etimmons: do you maintain it?
[18:36:57] <etimmons> I recently got commit bits, but wouldn't say I maintain it. That's luis
[18:37:04] <AeroNotix> oh... ok then..
[18:37:06] <AeroNotix> nvm
[18:37:20] <AeroNotix> there's a bunch of symbols which aren't exported for C structs
[18:37:29] <AeroNotix> at least not in a way that is documented/discoverable
[18:37:40] <AeroNotix> in particular for iovec
[18:37:53] <AeroNotix> iovec itself isn't exported
[18:39:04] <etimmons> Hmm. I've never used iovec myself, so it'd take me a while to get up to speed on what it's supposed to do/if it makes sense to export the symbols/etc.
[18:39:16] <AeroNotix> etimmons: it makes sense to export the symbols for sure :)
[18:39:28] <AeroNotix> iovec is the means through which you perform scatter/gather IO
[18:39:50] <AeroNotix> a lot of APIs require you to provide a pointer to an iovec array in order to perform scatter/gather IO
[18:39:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:40:07] <AeroNotix> and you need to be able to set the fields of the individual iovec structs
[18:40:18] <AeroNotix> so you need the iovec symbol, and the struct field symbols
[18:41:44] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:43:40] <AeroNotix> additionally, another thing I don't understand is why it just sets the types to bare :pointer, rather than specifying the type of what the pointer is
[18:43:43] *** Joins: epony (epony@user/epony)
[18:43:46] <AeroNotix> it goes miles to explain the API
[18:45:03] <etimmons> If you make an MR, I'd be happy give it a one over. I do suspect it'd be preferred to export accessors instead of the slot names directly, though.
[18:45:24] <AeroNotix> nah I'm good for making a PR
[18:45:38] <etimmons> Basically, I don't think the end user should have to use cffi:foreign-slot-value to access them
[18:45:47] *** Joins: Tallund (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca)
[18:45:56] <AeroNotix> accessors or slot-names, whichever. Just anything which makes structs defined in the package to ... be able to be used?
[18:47:05] <etimmons> Yeah, it definitely does look odd currently. It doesn't even seem to be used internally?
[18:47:33] <AeroNotix> etimmons: well you'd know if it was used internally if the c functions didn't just use `:pointer` as the types :)
[18:47:48] <AeroNotix> there are a bunch of functions in osicat which actually take pointers to iovecs
[18:48:34] <AeroNotix> readv/writev are the easiest to go learn about etimmons
[18:48:42] <etimmons> Huh. ok. I just searched for iovec and didn't see anything except the cstruct
[18:48:48] <etimmons> Thanks, I'll take a look
[18:49:21] *** Quits: treflip (~user@user/treflip) (Quit: rebooting)
[18:50:01] <AeroNotix> etimmons: from my pov if there's a system which is just a bare cffi wrapper, it should export literally everything
[18:50:48] <Tallund> Hi, the Woo package's github page states '[Woo] is still BETA quality', meaning what, in practice? After seeing the last commit was 8 months ago, I had it in my head that it is mostly complete and entered a sort of maintenance mode
[18:55:43] <jackdaniel> woo is a web server, I think that it is in a state that satisfies the author, but not as tested or polished as he'd himself would expect non-beta quality software to be
[18:55:56] <jackdaniel> s/is a webserver,/is a webserver?/
[18:56:51] <etimmons> AeroNotix: I agree in principle. But it seems osicat is largely trying to hide the fact that it uses CFFI from the user. I suspect it's because it originally used UFFI and may use another library in the future
[18:57:22] <AeroNotix> etimmons: hiding the fact it uses CFFI is different from hiding entirely useful symbols the package goes to the trouble of setting up
[18:57:29] <etimmons> for sure
[18:58:10] <etimmons> And after looking at it a bit more, I think accessors should be definitely exported
[18:58:14] *** Joins: Tallund49 (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca)
[18:58:15] <AeroNotix> cool
[18:58:31] <AeroNotix> it'll save me at least.... 50 bytes in my source code :)
[18:58:42] *** Quits: cosimone (~user@93-47-230-95.ip115.fastwebnet.it) (Remote host closed the connection)
[18:58:54] <Tallund49> Ok, that's what I get for using a web app client like this one
[18:58:58] <AeroNotix> https://github.com/osicat/osicat/blob/99bdedb5c73f4c653f16c42eaa8005829a0eeb82/posix/unixint.lisp#L355 also constants don't see to be exported
[19:00:17] *** Joins: occ (~occ@user/occ)
[19:01:58] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[19:01:59] *** Quits: Tallund (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca) (Ping timeout: 256 seconds)
[19:04:37] *** Joins: pingpongball (~blacked@user/blacked)
[19:05:07] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[19:05:28] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[19:05:58] *** Joins: cosimone (~user@93-47-230-95.ip115.fastwebnet.it)
[19:06:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[19:07:05] *** Quits: Tallund49 (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca) (Ping timeout: 256 seconds)
[19:08:15] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Client Quit)
[19:09:07] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[19:10:40] *** Joins: Guest443 (~Guest44@95.175.104.78)
[19:12:11] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[19:14:37] *** Quits: [ (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 240 seconds)
[19:15:14] *** Joins: jealousmonk (~user@user/jealousmonk)
[19:18:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:21:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[19:22:54] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[19:24:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:30:29] *** Joins: treflip (~user@95.79.32.99)
[19:33:58] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:35:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:37:27] <lisp123> Is there a predicate in the standard for checking if an argument is a keyword?
[19:37:49] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[19:38:10] <random-nick> what do you mean by checking if an argument is a keyword?
[19:38:10] <beach> clhs keywordp
[19:38:11] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_kwdp.htm
[19:38:19] <lisp123> beach: Thanks!
[19:40:02] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[19:40:29] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[19:42:17] *** Joins: epony (epony@user/epony)
[19:43:33] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[19:47:02] *** Quits: treflip (~user@95.79.32.99) (Quit: ERC (IRC client for Emacs 27.2))
[19:47:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[19:47:21] *** Joins: treflip (~user@user/treflip)
[19:49:50] *** Quits: amb007 (~a_bakic@246.12.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[19:50:05] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[19:52:36] *** Joins: epony (epony@user/epony)
[19:55:58] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[19:56:20] *** Parts: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (WeeChat 3.4)
[20:04:31] <luis> fe[nl]ix: can we go back to Launchpad? GitHub issues apparently makes it too easy for people to submit issues about the Python CFFI *sigh* :)
[20:06:55] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[20:08:20] <luis> etimmons, AeroNotix: yeah, Osicat is meant to be a Lispy API and that is incompatible with exposing FFI guts.
[20:08:24] <AeroNotix> k
[20:08:43] <AeroNotix> luis: again though
[20:08:54] <phoe> luis: I can help with closing these if that's what's required
[20:08:56] <AeroNotix> that's completely unrelated to not exposing something the system explicitly sets up
[20:09:02] <AeroNotix> but feel free to just ignore me
[20:09:04] <AeroNotix> ;)
[20:09:33] <AeroNotix> cffi or not, it's literally creating bindings to something and then.... not using them / exposing them at all
[20:09:37] <AeroNotix> but you do you tho
[20:09:41] <AeroNotix> you maintain it after all :)
[20:10:39] <luis> AeroNotix: the osicat-posix bits are a bit more low level. Seems sensible to export things that are defined, yeah.
[20:10:44] <AeroNotix> k
[20:11:38] <luis> AeroNotix: warning: if you submit too many patches you will become a maintainer too
[20:11:51] <AeroNotix> luis: nah I'm good
[20:11:57] <AeroNotix> too much drama
[20:12:26] <luis> and hatemail!
[20:13:28] <luis> phoe: no, it's fine. Just feeling nostalgic about Launchpad.
[20:13:41] <AeroNotix> You can set up issue templates
[20:13:52] <AeroNotix> in the issue template you can explicitly call out that the repo is not for Python CFFI
[20:14:24] <AeroNotix> additionally it might be worth just mentioning in the README that it is NOT for anything other than Common Lisp.
[20:14:30] <AeroNotix> and maybe a link to the Python CFFI project, too
[20:15:24] <luis> AeroNotix: good idea, if this happens again I'll do the template thing.
[20:15:56] <luis> AeroNotix: ... or I can start opening Lisp CFFI bugs on their project page so that they suffer too
[20:16:08] <AeroNotix> That doesn't seem like something a good citizen would do
[20:16:45] <AeroNotix> it's a shame they are named similarly, but I have no idea why you'd want to call your cffi functionality for a platform anything other than cffi
[20:16:58] <luis> >:)
[20:17:50] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[20:19:39] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[20:24:09] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[20:24:18] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Quit: WeeChat 3.4)
[20:24:49] *** pingpongball is now known as blacked
[20:25:07] *** blacked is now known as pingpongball
[20:25:19] *** pingpongball is now known as blacked
[20:25:21] *** blacked is now known as pingpongball
[20:25:22] *** pingpongball is now known as blacked
[20:25:48] <phoe> why do we not have a common domestic function interface for code that is actually pure CL
[20:26:53] <luis> The Lisp CFFI predates the Python CFFI by about 7 years FWIW
[20:27:05] <phoe> I am aware, but it does not answer my question
[20:27:08] <phoe> :D
[20:27:20] * phoe ducks
[20:27:25] <AeroNotix> phoe: I'm not sure I follow your question tbh
[20:28:09] <phoe> just making fun of the fact we have a Common Foreign Function Interface but we do not have a Common Domestic Function Interface
[20:28:19] <AeroNotix> oh ok
[20:30:57] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 256 seconds)
[20:35:02] *** Quits: blacked (~blacked@user/blacked) (Quit: Client closed)
[20:46:14] *** Quits: cosimone (~user@93-47-230-95.ip115.fastwebnet.it) (Remote host closed the connection)
[20:50:13] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[20:51:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:51:21] *** semz_ is now known as semz
[20:53:10] *** Joins: raeda (~raeda@74.215.159.82)
[20:55:33] *** Joins: Oladon (~olad@98.43.81.226)
[20:59:10] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[21:01:05] *** Joins: rgherdt (~rgherdt@port-92-195-61-212.dynamic.as20676.net)
[21:07:12] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[21:12:38] *** Quits: migap (~migap@docto-jac.u-strasbg.fr) (Quit: leaving)
[21:20:51] *** Joins: Tallund (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca)
[21:21:57] *** Quits: Guest443 (~Guest44@95.175.104.78) (Ping timeout: 256 seconds)
[21:33:52] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[21:34:06] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[21:36:56] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[21:37:07] *** Joins: NotThatRPG_ (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[21:38:07] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:39:54] *** Quits: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[21:47:02] <fe[nl]ix> luis: I saw that, it's funny
[21:47:07] <fe[nl]ix> let me close those, don't mind them
[21:48:12] <AeroNotix> https://github.com/cffi/cffi/pull/311
[21:50:14] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[21:50:46] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[21:52:20] *** Joins: jeosol (~jeosol@user/jeosol)
[21:56:07] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[22:01:04] *** Joins: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de)
[22:06:48] <lisp123> From the earlier discussion, should I put all macro writing functions in EVAL-WHEN and not just rely on :serial t?
[22:07:24] <jackdaniel> if my understanding is correct then relying on serial t is fine
[22:07:53] <lisp123> Thanks
[22:08:33] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[22:09:32] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[22:09:32] *** karlosz_ is now known as karlosz
[22:12:36] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:12:51] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:19:31] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Quit: hhdave)
[22:22:46] *** Joins: treflip (~user@user/treflip)
[22:24:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:28:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:30:49] *** Joins: epony (epony@user/epony)
[22:32:17] *** Quits: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:32:57] *** Joins: notzmv (~zmv@user/notzmv)
[22:33:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:35:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:36:22] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[22:38:55] *** Joins: aeth_ (~aeth@user/aeth)
[22:39:01] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[22:39:06] *** aeth_ is now known as aeth
[22:41:45] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[22:42:45] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[22:44:46] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[22:47:07] *** Joins: treflip (~user@user/treflip)
[22:48:10] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[22:53:06] *** Joins: gpiero_ (~quassel@camale.rm-rf.it)
[22:54:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:54:18] *** Quits: gpiero (~quassel@camale.rm-rf.it) (Read error: Connection reset by peer)
[22:55:57] *** Joins: kpoeck (~kpoeck@2a01:598:92b7:6ea7:5066:804:f9a7:128c)
[23:04:41] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[23:07:19] *** Joins: cosimone (~user@93-47-230-95.ip115.fastwebnet.it)
[23:07:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:09:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:25:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:29:06] *** Quits: robin (~robin@user/terpri) (Ping timeout: 250 seconds)
[23:29:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[23:31:11] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[23:32:08] *** Joins: robin (~robin@user/terpri)
[23:39:07] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Remote host closed the connection)
[23:49:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[23:49:52] *** Joins: morganw (~user@80.225.24.132)
[23:51:06] *** Joins: epony (epony@user/epony)
[23:51:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
