[00:02:42] *** Quits: cuoops (~cuoops@user/cuoops) (Quit: kthxbye)
[00:04:26] *** Joins: cuoops (~cuoops@user/cuoops)
[00:05:33] *** Joins: Elzington_ (~Elzington@68.235.43.38)
[00:07:53] *** Quits: Elzington (~Elzington@static-68-235-44-10.cust.tzulo.com) (Ping timeout: 252 seconds)
[00:17:22] <Guest36> DerekKozel[m], Yes I was asking about FPGA's earlier.
[00:18:29] *** Quits: mallkrampus (~mallkramp@172.93.207.234) (Ping timeout: 256 seconds)
[00:21:58] <Guest36> for taking vector in and vector out data it's for writing a custom block. it's in python .
[00:30:31] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[00:30:39] *** Joins: jemius (~jemius@p200300d9670f420081bad946cf133ebe.dip0.t-ipconnect.de)
[00:31:10] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:1044:446b:4199:c370) (Quit: uros)
[00:31:49] *** Joins: mallkrampus (~mallkramp@172.93.207.236)
[00:35:25] *** Joins: greenriot (~greenriot@user/gr33nr10t)
[00:35:29] *** Quits: gr33nR10t (~greenriot@user/gr33nr10t) (Ping timeout: 256 seconds)
[00:39:51] *** Quits: Malvolio (~Malvolio@user/malvolio) (Killed (tantalum.libera.chat (Nickname regained by services)))
[00:42:29] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:43:20] *** Joins: yesno (~yesno@109.98.151.179)
[00:44:14] *** Joins: Malvolio (~Malvolio@user/malvolio)
[01:07:17] *** Quits: L555BAT (~weechat@79-69-105-65.dynamic.dsl.as9105.com) (Ping timeout: 256 seconds)
[01:09:18] *** Quits: Guest36 (~Guest36@2601:5c0:c280:8da0:4c0:ec72:371a:d430) (Quit: Client closed)
[01:09:37] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:1044:446b:4199:c370)
[01:10:48] *** Quits: jemius (~jemius@p200300d9670f420081bad946cf133ebe.dip0.t-ipconnect.de) (Quit: Leaving)
[01:34:45] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:38:33] *** Quits: DaNeenjah (~jake@adsl-74-230-8-177.hsv.bellsouth.net) (Quit: WeeChat 3.3)
[01:40:47] <muaddib[m]> <Guest36> "tried to tinker around or change..." <- Yea, I think I’ve pushed RFNoC/gr-ettus about as far as it can possibly  go in it’s current state. There are some patches for gr-ettus as well that I can share if needed. What are you trying to do?
[01:46:00] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:1044:446b:4199:c370) (Quit: uros)
[01:59:03] *** Joins: foz (~mt@156.146.51.90)
[01:59:29] *** Quits: Al2O3 (~Al2O3@user/al2o3) (Remote host closed the connection)
[01:59:49] *** Joins: Al2O3 (~Al2O3@user/al2o3)
[02:00:00] <patchvonbraun[m]> Well, keep firmly in mind that the RFNoC "palette" of DSP functions is quite limited.  To really see RFNoC "shine" you'd need to develop your own RFNoC CEs to do your app logic within the FPGA.  And to do *that* you need the right version of Vivado and non-trivial FPGA coding skills.
[02:06:17] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:17:03] *** Joins: infosecgnu (~fletc@cpc160711-chfd4-2-0-cust199.12-3.cable.virginm.net)
[02:33:39] <DerekKozel[m]> Guest keeps dropping off. I'm actively working on an FPGA co-processor integration in GNU Radio as a side-side project. It's going to get presented at FOSDEM (if accepted), but it's based around LiteX which has lots of info online. 
[03:02:49] <muaddib[m]> That’s awesome! So excited for where things are going with co-processing and the new scheduler!
[03:43:37] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:991a:b3a2:81ea:181a) (Read error: Connection reset by peer)
[03:45:31] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:991a:b3a2:81ea:181a)
[04:18:02] *** Joins: incog (~ayy@pool-108-46-169-14.nycmny.fios.verizon.net)
[04:26:20] <muaddib[m]> <DerekKozel[m]> "Guest keeps dropping off. I'm..." <- Which FPGA are you using?
[04:27:21] <patchvonbraun[m]> Imagine a Beowulf cluster../
[04:31:00] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[04:36:29] *** Quits: techwolf12 (~techwolf1@chix-ch.rev.red-panda.be) (Quit: Ping timeout (120 seconds))
[04:46:11] *** Quits: incog (~ayy@pool-108-46-169-14.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[04:55:28] *** Joins: techwolf12 (~techwolf1@chix-ch.rev.red-panda.be)
[05:02:00] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[05:10:16] <linge93[m]> Hi,Why does "stream CRC32" automatically delete the data at the end? I converted a string of data through "stream to tagged stream", and set "packet_len" to 96, but my string of original data has 100 pieces, passed through "stream CRC32" and "stream to tagged stream" in turn, and finally output only ( 96+4=100) bytes, then where did the remaining 4 bytes of data go?
[05:16:35] <jsallay[m]> Gnuradio doesn't make any promises that you will process all of the data you send in. You have to assume that you will loose some asking the way. In this case, I would bet that the crc32 block only works on blocks on packet_len, so it never even tries to process the last 4 bytes.
[05:17:48] <BarryDuggan[m]> linge93: the Async CRC32 in generate mode adds a 4-byte CRC to the payload.
[05:17:48] <BarryDuggan[m]> In check CRC mode, if the CRC is correct, the payload is passed on without the CRC, but if the CRC is not valid, there is no output
[05:19:00] <BarryDuggan[m]> Look at https://wiki.gnuradio.org/index.php/Packet_Communications (when the website is back up)
[05:25:37] <linge93[m]> I will check it after the website is restored, but I still want to ask, is the "Async CRC32" module a way to solve this problem? I haven't used it
[05:29:22] <BarryDuggan[m]> The Async is for messages; the Stream is for streams. From the docs:
[05:29:22] <BarryDuggan[m]> Byte-stream CRC block.
[05:29:22] <BarryDuggan[m]> Input: stream of bytes, which form a packet. The first byte of the packet has a tag with key \"length\" and the value being the number of bytes in the packet.
[05:29:22] <BarryDuggan[m]> Output: The same bytes as incoming, but trailing a CRC32 of the packet. The tag is re-set to the new length.
[05:30:58] <BarryDuggan[m]> Note that this says "length" rather than the expected "packet_len"
[05:32:26] <BarryDuggan[m]> My tutorial (above) uses messages for the original payload data rather than stream data, so I haven't worked with streams
[05:34:29] <BarryDuggan[m]> That would be a good thing to add another section using streams instead of messages.
[05:35:11] *** Joins: monowar (~Thunderbi@FL1-118-109-45-169.fko.mesh.ad.jp)
[05:38:27] <linge93[m]> > <@kv4fv:gnuradio.org> The Async is for messages; the Stream is for streams. From the docs:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/ad31613c617aa0d16a9a3b5eba1ca13d8f24b621)
[05:39:16] <linge93[m]> <BarryDuggan[m]> "My tutorial (above) uses..." <- I checked this block, its input and output are all messages, so it doesn’t seem to be used for streaming
[05:41:48] <BarryDuggan[m]> I'm assuming the stream CRC works in a similar fashion. is your input byte count before or after you run the data through the Generate CRC32 block?
[05:43:19] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[05:45:46] <linge93[m]> The number of input bytes is 100, but the label "packet_len" is set to 96. After adding 4 bytes at the end of the first packet, there should be (96+4)+4=104 packets, but in fact the output Only 96+4=100 packets
[05:47:46] <BarryDuggan[m]> linge93: if there are 100 input bytes, why is your packet_len set to 96?
[05:47:54] <patchvonbraun[m]> muaddib: So reading up on LiteX a bit, it's basically a competitor for Vivado.  But the final step of compiling your goop into the internal gate representation is done by proprietary tools, unless I'm mis-understanding what LiteX is.  Still cool still improves "accessibilty" for the FPGA design process.  But not Open-Source end-to-end.
[05:51:55] <linge93[m]> BarryDuggan[m]: Because what I originally did was to transfer a picture, its size was 736501 bytes, but I found that some data was missing after passing the "stream CRC" module, so in order to understand why there is less data, I created a Simple test (100 bytes) to verify my idea (this module will delete redundant data packets)
[05:54:26] <BarryDuggan[m]> as I mentioned above, if there is a CRC error, the packet is dropped. could that be where your data is missing?
[05:55:41] <BarryDuggan[m]> I'm going to wrap up for tonight. I'll be around tomorrow.
[05:56:28] <linge93[m]> BarryDuggan[m]: No, because I am here "Generate CRC", it hasn't been checked yet
[05:59:01] * linge93[m] uploaded an image: (28KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/3466de356ecb560f3e2034711f520b5106ee8eb7/test.png >
[05:59:34] <linge93[m]> Barry Duggan: Thank you very much for your kind reply, this is my GRC flow chart
[06:05:43] <BarryDuggan[m]> so I ask again: if there are 100 input bytes, why is your packet_len set to 96?
[06:07:23] *** Quits: infosecgnu (~fletc@cpc160711-chfd4-2-0-cust199.12-3.cable.virginm.net) (Read error: Connection reset by peer)
[06:12:36] <linge93[m]> Because I want to test the function of this module, simple numbers are easier to understand. In addition, the actual size of "source" is definitely not as good-looking, it may be a "prime number", then no matter how my "packet_len" is selected, input_num/packet_len cannot be integers. This is just to simulate this situation, so Set to 96, of course you can also set to 80, 81...
[06:14:41] <linge93[m]> For example, in this flow diagram, I set "packet_len"=80, then the output bytes of "stream CRC32" will become 84, which only operates on one packet
[06:15:36] <linge93[m]> So, where did the remaining 20 bytes go? This is the question we are discussing
[06:33:15] <jsallay[m]> These bytes are stuck in the input buffer to the crc block. That block will wait for packet_len bytes to be available before processing anything.
[06:33:15] <jsallay[m]> Gnuradio doesn't support the concept of "tails." You have to ask, what would you want the block to do in this case? Just output the last 20 bytes without crc? Do a crc on just the last 20 bytes? Or zero pad the data to packet_len and output a second packet?
[06:33:15] <jsallay[m]> Gnuradio punts on this question and just ignores the extra data.
[06:54:28] <linge93[m]> I understand now. In actual communication, I definitely don’t want the "tail" data to be lost. I hope it can be sent as a data packet. However, because the "tail" data volume is less than one "packet_len", GNURadio will not It can process "tail" data, so is it impossible to use this module to build a communication system? (The way I can think of is to add 0, or "control" the data source)
[06:54:50] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[08:33:59] *** Joins: wizardyesterday (~chris@user/wizardyesterday)
[08:34:19] *** Quits: mallkrampus (~mallkramp@172.93.207.236) (Ping timeout: 256 seconds)
[08:34:19] *** Joins: velotopian (~velotopia@user/velotopian)
[08:47:54] *** Joins: mallkrampus (~mallkramp@64.44.140.61)
[09:00:07] *** Quits: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net) (Remote host closed the connection)
[09:26:28] *** Quits: lum (0@user/res0) (Quit: lum)
[10:04:49] *** Quits: wizardyesterday (~chris@user/wizardyesterday) (Quit: leaving)
[10:08:07] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:33:25] *** Quits: DaViruz (~daviruz@host-95-197-81-223.mobileonline.telia.com) (Ping timeout: 252 seconds)
[10:45:32] *** Joins: DaViruz (~daviruz@host-95-197-14-23.mobileonline.telia.com)
[10:45:53] *** Joins: monkwitdafunk (uid238811@fsf/member/monkwitdafunk)
[10:46:04] *** Quits: velotopian (~velotopia@user/velotopian) (Quit: Leaving)
[10:55:57] *** Quits: mallkrampus (~mallkramp@64.44.140.61) (Read error: Connection reset by peer)
[10:56:09] *** Quits: foz (~mt@156.146.51.90) (Quit: Konversation terminated!)
[11:13:46] *** Joins: mallkrampus (~mallkramp@172.93.207.240)
[11:32:15] *** Quits: mallkrampus (~mallkramp@172.93.207.240) (Ping timeout: 256 seconds)
[11:45:50] *** Joins: mallkrampus (~mallkramp@64.44.140.61)
[11:48:04] *** Joins: massi (~massi@host-188-15-128-106.business.telecomitalia.it)
[12:03:09] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:1044:446b:4199:c370)
[12:30:09] *** Quits: spf1000[m] (~spf1000ma@2001:470:69fc:105::ec25) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: warnes[m] (~warnesgnu@2001:470:69fc:105::ec80) (Quit: You have been kicked for being idle)
[13:15:27] *** Quits: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt) (Ping timeout: 256 seconds)
[13:15:46] *** Joins: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt)
[13:17:57] <DerekKozel[m]> Adding some zeros at the end of an analog chain to flush buffers is a common solution. On the digital side that doesn't work as well, but a reliable digital communications system usually needs to include retransmission or at least duplicate transmission to handle interference so in a full system a few missing bytes usually isn't an issue
[13:21:17] <DerekKozel[m]> In this case, if the payload is not an integer number of packets it's up to your protocol design to decide how to handle that, padding with zeros up to the packet length would work and is a common answer in protocol design. Alternatively you could design a more specialized tagged stream block that handles the end of the file by adding a `packet_len` tag with a value of the remaining bytes
[13:28:31] <DerekKozel[m]> Re-reading that, I was a bit confusing. In flushing the analog side the number of zeros (no-energy samples) doesn't specifically matter. It just needs to be "long enough" to flush all the buffers, a few milliseconds is usually long enough.
[13:29:15] <DerekKozel[m]> On the digitial side padding packets/payloads means calulating the remainder and filling to that specific length
[13:52:41] *** Joins: jemius (~jemius@p200300d9670acc0074f1e463d2264d6e.dip0.t-ipconnect.de)
[14:19:47] *** Quits: monowar (~Thunderbi@FL1-118-109-45-169.fko.mesh.ad.jp) (Quit: monowar)
[14:32:38] <linge93[m]> What I need to achieve is only the function of the physical layer, so it does not involve the retransmission mechanism of the upper layer. It should be possible to fill with zeros. Then I thought about it carefully. CRC encoding is only an error detection code, and it cannot be used to correct errors. , Why don’t I change the way of channel coding? For example, LDPC\turbo codes, etc., they can all correct errors (though I haven't checked
[14:32:38] <linge93[m]> how these encoding methods are implemented in GNURadio)
[14:34:47] *** Quits: mallkrampus (~mallkramp@64.44.140.61) (Ping timeout: 256 seconds)
[14:47:52] *** Joins: mallkrampus (~mallkramp@172.93.207.238)
[14:56:04] <BarryDuggan[m]> Is the https://wiki.gnuradio.org/ server down?
[14:56:43] <Yamakaja[m]> Doesn't look very responsive to me either
[14:57:03] <Yamakaja[m]> Ah yes, 502
[14:59:27] <BarryDuggan[m]> Derek Kozel: The wiki server has been down since last evening.
[15:07:35] *** Quits: mallkrampus (~mallkramp@172.93.207.238) (Ping timeout: 256 seconds)
[15:15:26] *** Quits: monkwitdafunk (uid238811@fsf/member/monkwitdafunk) (Quit: Connection closed for inactivity)
[15:29:23] *** Quits: electrolytic (~electroly@gateway/tor-sasl/electrolytic) (Remote host closed the connection)
[15:29:50] *** Joins: electrolytic (~electroly@gateway/tor-sasl/electrolytic)
[15:45:24] *** Quits: jemius (~jemius@p200300d9670acc0074f1e463d2264d6e.dip0.t-ipconnect.de) (Quit: Leaving)
[15:49:11] <DerekKozel[m]> Thanks for the report! I passed it on to #infrastructure:gnuradio.org and Andrej solved the issue. 
[16:28:41] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:991a:b3a2:81ea:181a) (Read error: Connection reset by peer)
[16:32:26] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:d5f2:596d:2133:4501) (Read error: Connection reset by peer)
[17:16:17] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 256 seconds)
[17:16:48] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[17:43:02] *** Joins: DaNeenjah (~jake@adsl-74-230-8-177.hsv.bellsouth.net)
[17:43:20] *** Joins: melfvelin[m] (~melfvelin@2001:470:69fc:105::eb37)
[17:43:20] <melfvelin[m]> Hello guys! I'm trying to use a Varaible Config block to read from a file I've written according to instruction on the wiki, however when trying to use the variable in other blocks it doesn't work, and just takes the default value form the variable config rather than the value in the file. Does anyone know what could be wrong? I'm using gnuradio 3.8.2
[17:43:31] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 252 seconds)
[17:43:59] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[17:49:31] *** Joins: jaykelly450 (~vagrant@c-73-82-49-38.hsd1.ga.comcast.net)
[17:57:39] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 256 seconds)
[17:58:10] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[18:12:19] *** Quits: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net) (Quit: leaving)
[18:13:44] *** Joins: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net)
[18:14:11] *** Joins: __alex (~alex@ip1f1267ec.dynamic.kabel-deutschland.de)
[19:12:20] *** Quits: AdamHorden (~adam.hord@host81-150-189-121.in-addr.btopenworld.com) (Quit: Adam Horden)
[19:17:45] *** Quits: __alex (~alex@ip1f1267ec.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[19:35:24] *** Joins: uros1 (~Thunderbi@bl5-152-18.dsl.telepac.pt)
[19:37:44] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:1044:446b:4199:c370) (Ping timeout: 252 seconds)
[19:37:44] *** uros1 is now known as uros
[19:48:42] *** Joins: __alex (~alex@ip1f1267ec.dynamic.kabel-deutschland.de)
[20:03:03] *** Quits: jaykelly450 (~vagrant@c-73-82-49-38.hsd1.ga.comcast.net) (Quit: WeeChat 3.2)
[20:12:17] *** Joins: erts (~erts@user/erts)
[20:12:59] *** Parts: erts (~erts@user/erts) (.)
[20:26:49] *** Quits: massi (~massi@host-188-15-128-106.business.telecomitalia.it) (Remote host closed the connection)
[20:27:59] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:51:44] *** Joins: sbodin (~sbodin@185.12.224.98)
[21:00:04] *** Quits: sbodin (~sbodin@185.12.224.98) (Ping timeout: 256 seconds)
[21:13:09] *** Quits: __alex (~alex@ip1f1267ec.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[21:27:15] *** Quits: Malvolio (~Malvolio@user/malvolio) (Ping timeout: 256 seconds)
[21:40:04] *** Quits: uros (~Thunderbi@bl5-152-18.dsl.telepac.pt) (Quit: uros)
[21:41:41] *** Joins: Oxygene (~Oxygene@lfbn-lil-1-421-45.w81-49.abo.wanadoo.fr)
[21:56:53] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[22:12:00] *** Joins: jemius (~jemius@p200300d9670acc0074f1e463d2264d6e.dip0.t-ipconnect.de)
[22:17:40] *** Joins: __alex (~alex@ip1f1267ec.dynamic.kabel-deutschland.de)
[22:33:58] *** Quits: Hoernchen (~hornulus@osmocom/hoernchen) (Read error: Connection reset by peer)
[22:34:17] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 252 seconds)
[22:34:47] *** Joins: Hoernchen (~hornulus@osmocom/hoernchen)
[22:34:50] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[22:38:08] *** Quits: __alex (~alex@ip1f1267ec.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[23:07:20] *** Joins: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net)
[23:21:26] *** Quits: Al2O3 (~Al2O3@user/al2o3) (Remote host closed the connection)
[23:21:46] *** Joins: Al2O3 (~Al2O3@user/al2o3)
[23:40:56] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:b9f3:641d:b0ab:48c0)
[23:41:04] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:b9f3:641d:b0ab:48c0) (Remote host closed the connection)
[23:41:36] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:28e8:52c2:40a2:e18c)
[23:42:18] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:b9f3:641d:b0ab:48c0)
[23:48:13] *** Quits: jemius (~jemius@p200300d9670acc0074f1e463d2264d6e.dip0.t-ipconnect.de) (Quit: Leaving)
