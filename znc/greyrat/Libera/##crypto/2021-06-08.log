[00:03:49] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 245 seconds)
[00:08:07] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 252 seconds)
[00:09:42] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[00:26:19] *** Quits: Wintermute (~Wintermut@94.46.93.221) (Ping timeout: 245 seconds)
[00:32:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:34:20] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:38:22] *** Joins: auro (~d@191.101.132.72)
[00:39:36] *** Joins: mikeliuk (~mikeliuk@213.205.198.26)
[01:27:55] *** Quits: panda_roux (~panda_rou@2601:200:c000:6a5:54fb:2d82:b84f:81fd) (Quit: leaving)
[01:42:03] *** Quits: mikeliuk (~mikeliuk@213.205.198.26) (Quit: Connection closed)
[02:17:09] *** Quits: DaveHowe (~DaveHowe@static-87-75-110-64.vodafonexdsl.co.uk) (Ping timeout: 245 seconds)
[02:35:36] *** Joins: franco (~franco@37.218.244.249)
[02:35:55] <franco> Hello again people 
[02:36:38] <river> hi
[02:38:03] <franco> Somebody from Latin America? Diaspora!
[02:38:11] <franco> Hi river
[02:41:34] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 252 seconds)
[02:46:00] *** Joins: Fluxx (~Fluxx@user/fluxx)
[02:48:39] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[02:50:31] *** Quits: walton (quassel@gateway/vpn/airvpn/walton) (Read error: Connection reset by peer)
[03:00:27] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 252 seconds)
[03:40:38] *** Joins: Wulf4 (~Wulf@user/wulf)
[03:43:54] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[03:43:54] *** Wulf4 is now known as Wulf
[04:11:35] *** Joins: dez (~dez@user/dez)
[04:27:17] *** Joins: dez- (~dez@user/dez)
[04:29:50] *** Quits: dez (~dez@user/dez) (Ping timeout: 250 seconds)
[04:34:30] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:59:48] *** Quits: dez- (~dez@user/dez) (Ping timeout: 252 seconds)
[05:25:21] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[06:01:30] *** Quits: Guest23 (~Guest23@2601:2c2:a80:3160:1434:40a4:f80d:581a) (Quit: Client closed)
[06:04:14] *** Joins: newpy (~newpy@2602:ffc6:200:ce:cdda:49c3:129a:15ef)
[06:04:40] <newpy> did anyone here about the coloniol pipeline ransomware update?
[06:05:26] <newpy> the FBI somehow cracked the attacker's bitcoin acct?
[06:15:17] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[06:36:58] <TimMc> newpy: I doubt it was an attack on the cryptography itself. They probably contacted an exchange that was handling the money.
[06:37:00] *** Quits: richbridger (~richbridg@213-225-37-94.nat.highway.a1.net) (Ping timeout: 245 seconds)
[06:37:59] <newpy> TimMc, oh I didn't think attackers would use exchanges since they have Know Your Customer laws (I think?)
[06:43:38] <Alipha> People generally want to get their crypto into a fiat currency at some point though
[06:47:18] *** Joins: willyg_c_ (~joeuser@199.58.187.11)
[07:04:11] *** Joins: bobrex (~bobrex@pool-108-31-83-96.washdc.fios.verizon.net)
[07:07:15] *** Quits: willyg_c_ (~joeuser@199.58.187.11) (Quit: Textual IRC Client: www.textualapp.com)
[07:18:57] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[07:40:52] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[07:42:32] *** Quits: auro (~d@191.101.132.72) (Ping timeout: 272 seconds)
[07:43:12] *** Joins: thx (~thx@static-198-54-134-118.cust.tzulo.com)
[07:46:43] *** Quits: bobrex (~bobrex@pool-108-31-83-96.washdc.fios.verizon.net) (Remote host closed the connection)
[07:58:00] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[07:58:41] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:35:32] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:38:43] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 264 seconds)
[08:56:01] *** Quits: newpy (~newpy@2602:ffc6:200:ce:cdda:49c3:129a:15ef) (Quit: Leaving)
[09:11:36] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[09:11:44] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[09:11:55] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:04:00] *** Joins: Ohlov389517 (~0hlov3@dyndsl-091-248-233-213.ewe-ip-backbone.de)
[10:06:01] *** Quits: thx (~thx@static-198-54-134-118.cust.tzulo.com) (Quit: thx, but i am out! :))
[10:07:34] *** Quits: Ohlov38951 (~0hlov3@host-091-097-117-034.ewe-ip-backbone.de) (Ping timeout: 245 seconds)
[10:21:05] *** Joins: chomwitt (~Pitsikoko@2a02:587:dc02:b00:98b0:cd42:bd6f:8295)
[10:28:01] *** Joins: nwm (~nwm@2604:3d08:a57f:bbd7:e0b1:a48d:758d:b6cb)
[10:35:28] *** Quits: Iota (~Iota@user/iota) (Ping timeout: 268 seconds)
[10:43:05] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:46:07] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[10:46:58] *** Quits: chha (~chhs@user/chha) (Quit: Leaving)
[11:06:35] *** Joins: Guest5001 (~rc@ip-86-49-47-240.net.upcbroadband.cz)
[11:07:27] *** Joins: Iota (~Iota@user/iota)
[11:12:51] *** Quits: chomwitt (~Pitsikoko@2a02:587:dc02:b00:98b0:cd42:bd6f:8295) (Ping timeout: 272 seconds)
[11:16:09] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:22:37] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[11:25:55] *** Joins: chomwitt (~Pitsikoko@2a02:587:dc02:b00:98b0:cd42:bd6f:8295)
[11:29:55] *** Quits: kulak (~kulak@user/kulak) (Quit: kulak)
[11:31:45] *** Joins: kulak (~kulak@user/kulak)
[11:40:07] *** Joins: vernaz (~vernaz@148.63.127.167)
[11:42:44] *** Quits: Iota (~Iota@user/iota) (Ping timeout: 250 seconds)
[11:45:53] *** Joins: Wintermute (~Wintermut@94.46.93.221)
[11:46:44] *** Joins: torchic (~noturboo@2a04:dd00:2:61::7068)
[11:53:43] *** Quits: vernaz (~vernaz@148.63.127.167) (Ping timeout: 264 seconds)
[11:56:36] *** Quits: torchic_____ (~noturboo@2a04:dd00:2:61::7068) (Remote host closed the connection)
[12:03:08] *** Joins: Iota (~Iota@user/iota)
[12:04:27] *** Joins: mamilis (uid502224@id-502224.tinside.irccloud.com)
[12:05:16] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 250 seconds)
[12:14:52] *** Quits: nwm (~nwm@2604:3d08:a57f:bbd7:e0b1:a48d:758d:b6cb) (Ping timeout: 272 seconds)
[12:37:36] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[12:38:38] <kayabaNerve> Question about Ristretto. I thought existing Ed25519 points could be mapped without issue, yet this issue on dalek says otherwise: https://github.com/dalek-cryptography/curve25519-dalek/issues/329
[12:39:23] <kayabaNerve> So dalek uses Ed25519 points as an internal representation, and I'm almost certainly sure setting that internal repr to the Ed25519 basepoint and then encoding under Ristretto would produce the Ristretto basepoint
[12:39:35] <kayabaNerve> So is this a property unique to the basepoint? Is the commenter on the issue incorrect?
[12:40:20] <kayabaNerve> Source on that basepoint thing: I wrote a Python impl of Ristretto myself. It uses the Ed25519 reference code to generate the basepoint, then encodes it according to Ristretto, and it passes the test vectors for base point multiplication.
[12:41:14] <kayabaNerve> Asking as I needed an alternate basepoint and there's one widely known for Ed25519, at least, in my circles. Optimally, I'd simply map that to Ristretto and call it a day.
[12:42:02] <kayabaNerve> ... which I did using a modified form of Dalek exposing the internal representation. Question now is "Is this safe? Are they the same point? Even if they're not the same point, have I effectively generated yet another random point that's therefore suitable as a basepoint?"
[12:43:09] <kayabaNerve> Would really appreciate any insight into this :) It's a bit beyond my skills. And no, I'm not using my Python code in prod.
[12:43:57] *** Joins: mikeliuk (~mikeliuk@213.205.198.26)
[12:53:13] *** Joins: jorjor (~jorgemene@85.251.190.6.dyn.user.ono.com)
[13:06:58] *** Quits: muhkeesonni (~kvirc@85-76-49-103-nat.elisa-mobile.fi) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[13:10:01] *** Joins: SpydarOO7 (~spydar007@user/spydar007)
[13:10:13] *** Quits: JollyRoger (~JollyRoge@user/thejollyroger) (Ping timeout: 252 seconds)
[13:10:46] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (Ping timeout: 252 seconds)
[13:10:52] *** Quits: Spydar007 (~spydar007@user/spydar007) (Ping timeout: 268 seconds)
[13:12:30] *** Joins: JollyRoger (~JollyRoge@user/thejollyroger)
[13:15:42] *** SpydarOO7 is now known as Spydar007
[13:17:05] *** Joins: Sofia (~sofia@gateway/tor-sasl/sofia)
[13:17:18] *** Joins: gareppa (~gareppa@user/gareppa)
[13:19:40] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[13:34:23] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:38:21] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:38:40] *** Joins: somlis (~somlis@user/somlis)
[13:41:18] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[14:05:10] *** Quits: jorjor (~jorgemene@85.251.190.6.dyn.user.ono.com) (Quit: Konversation terminated!)
[14:18:30] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:21:56] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[14:28:45] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[14:32:19] *** Quits: Fusl (fusl@user/fusl) (Quit: freenode)
[14:32:48] *** Joins: Fusl (fusl@1.0.0.127.in-addr.arpa.li)
[14:35:31] *** Quits: chomwitt (~Pitsikoko@2a02:587:dc02:b00:98b0:cd42:bd6f:8295) (Ping timeout: 272 seconds)
[14:43:52] *** Joins: vernaz (~vernaz@148.63.127.167)
[14:49:18] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[14:56:21] *** Joins: ghwerig (~ghwerig@c-73-140-154-209.hsd1.wa.comcast.net)
[14:57:54] *** Quits: ghwerig__ (~ghwerig@2601:600:8080:3a00:7c26:f104:a92a:7136) (Ping timeout: 264 seconds)
[15:04:14] *** Joins: chomwitt (~Pitsikoko@athedsl-20549.home.otenet.gr)
[15:05:12] *** betelgeuse01 is now known as betelgeuse
[15:09:45] *** Quits: Iota (~Iota@user/iota) (Ping timeout: 252 seconds)
[15:10:56] *** Joins: nwm (~nwm@2604:3d08:a57f:bbd7:e0b1:a48d:758d:b6cb)
[15:11:43] *** Quits: chomwitt (~Pitsikoko@athedsl-20549.home.otenet.gr) (Ping timeout: 264 seconds)
[15:16:00] *** Quits: nwm (~nwm@2604:3d08:a57f:bbd7:e0b1:a48d:758d:b6cb) (Ping timeout: 272 seconds)
[15:23:07] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 264 seconds)
[15:24:02] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[15:30:10] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 258 seconds)
[15:30:52] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[15:32:23] *** Joins: blyat-73 (~hjgkjhgkj@79.101.60.163)
[15:48:00] *** Quits: Fluxx (~Fluxx@user/fluxx) (Ping timeout: 250 seconds)
[15:54:13] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[15:54:50] *** Joins: vernaz (~vernaz@148.63.127.167)
[15:59:18] *** Quits: vernaz (~vernaz@148.63.127.167) (Ping timeout: 258 seconds)
[16:20:48] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[16:21:08] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:23:06] *** Quits: mikeliuk (~mikeliuk@213.205.198.26) (Quit: Connection closed)
[16:24:08] *** Joins: Iota (~Iota@user/iota)
[16:24:16] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Max SendQ exceeded)
[16:25:09] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:28:18] *** Quits: Iota (~Iota@user/iota) (Read error: Connection reset by peer)
[16:28:46] *** Joins: Iota (~Iota@user/iota)
[16:29:25] *** Quits: Guest5001 (~rc@ip-86-49-47-240.net.upcbroadband.cz) (Quit: Leaving)
[16:35:43] *** Joins: chomwitt (~Pitsikoko@2a02:587:dc02:b00:90fc:3f0d:1f5e:369a)
[16:41:28] *** Joins: vernaz (~vernaz@148.63.127.167)
[16:42:25] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[16:43:00] *** Joins: vernaz (~vernaz@148.63.127.167)
[17:06:17] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[17:13:40] *** Joins: ionface (~ionface@user/ionface)
[17:15:33] *** Joins: mikeliuk (~mikeliuk@46.68.8.116)
[17:21:24] *** Quits: franco (~franco@37.218.244.249) (Ping timeout: 272 seconds)
[17:32:44] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:48:45] *** Joins: laguneucl (~Pitsikoko@2a02:587:dc02:b00:98b0:cd42:bd6f:8295)
[17:53:04] *** Quits: chomwitt (~Pitsikoko@2a02:587:dc02:b00:90fc:3f0d:1f5e:369a) (Ping timeout: 272 seconds)
[18:16:15] *** Joins: ionface_ (~ionface@user/ionface)
[18:17:51] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 252 seconds)
[18:21:16] *** Quits: mikeliuk (~mikeliuk@46.68.8.116) (Quit: Connection closed)
[18:21:25] *** Quits: ionface_ (~ionface@user/ionface) (Read error: Connection reset by peer)
[18:25:28] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[18:26:18] <cvmn> what's the best way to have a while loop to read a text file line b line?  it's a named pipe that i use for ipc, and i want the server process to block on the named pipe until a new line comes in.  advice please?
[18:26:34] <cvmn> err, wrong channel.  sry!  #python.
[18:27:44] <MacGyver> That being said, you can just loop over the file for that.
[18:28:03] <MacGyver> Any remaining questions should be directed to #python :P
[18:45:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[18:46:17] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[18:52:16] *** Joins: FeliceMente (~FeliceMen@host-79-35-17-175.retail.telecomitalia.it)
[19:13:08] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[19:15:59] *** Quits: FeliceMente (~FeliceMen@host-79-35-17-175.retail.telecomitalia.it) (Quit: Leaving)
[19:16:19] *** Joins: FeliceMente (~FeliceMen@host-79-35-17-175.retail.telecomitalia.it)
[19:17:12] *** Quits: FeliceMente (~FeliceMen@host-79-35-17-175.retail.telecomitalia.it) (Client Quit)
[19:18:52] *** Joins: ionface (~ionface@user/ionface)
[19:24:13] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 252 seconds)
[19:26:14] *** Quits: blyat-73 (~hjgkjhgkj@79.101.60.163) (Quit: Leaving)
[19:28:09] *** Quits: innermost (~innermost@user/innermost) (Ping timeout: 244 seconds)
[19:47:09] *** Quits: cehteh (~ct@mue-88-130-71-198.dsl.tropolys.de) (Ping timeout: 245 seconds)
[20:04:57] *** Joins: cehteh (~ct@mue-88-130-71-198.dsl.tropolys.de)
[20:06:10] *** Quits: jbis (~jbis@72.89.115.213) (Quit: Leaving...)
[20:14:59] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:20:38] *** Quits: Malin (~CIA@pirate.pt) (Quit: Ping timeout (120 seconds))
[20:20:56] *** Joins: Malin (~CIA@pirate.pt)
[20:38:22] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 272 seconds)
[20:40:51] *** Quits: Iota (~Iota@user/iota) (Ping timeout: 252 seconds)
[20:48:59] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[20:49:16] <Gravis> hmm... managed to replace the SHA2 constants table (640 bytes) with 1632 bytes of code that slowly calculates every cube root. ^_^
[20:49:32] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[20:49:53] *** Joins: mikeliuk (~mikeliuk@213.205.198.26)
[20:50:04] <Gravis> what kills me is that the long double is just barely not large enough to actually calculate it
[20:50:39] <Gravis> it flubs the final digit
[20:52:39] <danieldg> can you do the inaccurate calculation and then apply a correction table?
[20:53:08] *** Joins: softpaw (~softpaw@185.162.184.11)
[20:54:14] <Gravis> danieldg: I was thinking about doing just that buuuut... I still want to get 64-bit answers on 32-bit platforms which don't have long double support (to my knowledge)
[20:55:08] <Gravis> danieldg: but yeah, you totally could do that
[20:56:23] <TimMc> You could go the other way and cube the hardcoded constants at runtime and verify that they match the expected values. :-)
[20:56:34] <TimMc> This would require less precision, I believe.
[20:57:03] <TimMc> (you'd have to break up the calculation a bit though)
[20:57:44] <Gravis> the point is the generate the constants as to not have them hardcoded
[20:58:06] <Gravis> it's all just for fun but my fun has rules
[20:58:33] *** Joins: FeliceMente (~FeliceMen@host-79-35-17-175.retail.telecomitalia.it)
[20:59:29] *** Quits: FeliceMente (~FeliceMen@host-79-35-17-175.retail.telecomitalia.it) (Read error: Connection reset by peer)
[21:02:08] <TimMc> I understand, but I thought this might still fit within the rules -- it's still computational approach, just reversed.
[21:02:14] <TimMc> *still a
[21:05:19] <Gravis> TimMc: well the problem is that it actually lacks the precision to get the right answer
[21:05:47] <Gravis> literally, the constants are too large for a long double
[21:06:14] <Gravis> they also lack the first digit because they are only the decimal
[21:06:16] <TimMc> Yeah, but for cubing you could break them up into the high and low halves.
[21:06:26] <TimMc> then recombine
[21:06:53] <TimMc> (Maybe you could do that with cube root, but I don't know enough about the math there... ðŸ˜…)
[21:07:18] <TimMc> What are you using, anyhow? Newton's root-finding method?
[21:07:47] <Gravis> the simplest approach: increment, cube and check!
[21:08:05] <danieldg> floating point pow(x, 0.33333) :)
[21:08:18] <Gravis> it's the same way calculate primes. ;)
[21:11:34] *** Quits: beard (sid110468@user/beard) (*.net *.split)
[21:11:34] *** Quits: Disconsented (~quassel@107.170.227.20) (*.net *.split)
[21:11:34] *** Quits: davidc__ (~user13172@will.hack.for.beer) (*.net *.split)
[21:11:34] *** Quits: Peng (~mnordhoff@fin.mattnordhoff.net) (*.net *.split)
[21:11:34] *** Quits: sarnold (~sarnold@ubuntu/member/sarnold) (*.net *.split)
[21:11:34] *** Quits: artart78 (~artart78@user/artart78) (*.net *.split)
[21:11:35] *** Quits: kdave (dave@twin.jikos.cz) (*.net *.split)
[21:11:35] *** Quits: antto (~pewpew@antonsavov.net) (*.net *.split)
[21:11:35] *** Quits: Nebraskka (~Nebraskka@user/nebraskka) (*.net *.split)
[21:11:45] *** Joins: kdave (~kdave@twin.jikos.cz)
[21:11:45] *** Joins: beard_ (sid110468@user/beard)
[21:11:45] *** Joins: Peng__ (~mnordhoff@fin.mattnordhoff.net)
[21:12:05] <TimMc> Gravis: haha oh no
[21:12:09] *** Joins: artart78 (~artart78@2001:41d0:a:3ba6::1)
[21:12:12] *** Joins: Disconsented (~quassel@107.170.227.20)
[21:12:23] *** Joins: Nebraskka (~Nebraskka@user/nebraskka)
[21:12:39] <Gravis> if there is a way that takes less steps then I'll take it
[21:12:46] <TimMc> Newton's method.
[21:14:06] <Gravis> that is exceptionally complicated
[21:14:10] <TimMc> Or rather, the secant method: https://en.wikipedia.org/wiki/Secant_method
[21:14:13] <Gravis> it requires more steps
[21:14:27] <Gravis> also requires more steps
[21:14:50] <Gravis> TimMc: size of the code is the issue here
[21:14:54] <TimMc> ah
[21:15:21] <Gravis> the actually time it requires to reach the answer is of no consequence
[21:15:51] <Gravis> i found my method to be the most simplistic
[21:16:02] *** Peng__ is now known as Peng
[21:16:18] <TimMc> Optimizing for size of the code but *also* requiring minimal hardcoded constants?
[21:17:18] <Gravis> exactly
[21:17:19] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[21:17:38] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[21:18:20] <Gravis> they can be conflicting interests which is why it's fun :)
[21:19:03] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:20:55] <TimMc> Here's Newton's method applied to cube roots: https://en.wikipedia.org/wiki/Cube_root#Numerical_methods
[21:21:17] <TimMc> It doesn't look bad -- x_n+1 = (a/x_n^2 + 2*x_n)/3
[21:22:07] <TimMc> Nice: Â« With either method a poor initial approximation of x0 can give very poor algorithm performance, and coming up with a good initial approximation is somewhat of a black art. Some implementations manipulate the exponent bits of the floating-point number; i.e. they arrive at an initial approximation by dividing the exponent by 3.[1] Â»
[21:22:20] *** Quits: laguneucl (~Pitsikoko@2a02:587:dc02:b00:98b0:cd42:bd6f:8295) (Ping timeout: 244 seconds)
[21:22:31] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 264 seconds)
[21:24:49] <Gravis> TimMc: my method uses multiplication and addition only.  newton's method requires implementing division
[21:25:24] <Gravis> division usually require substration to be implemented too
[21:25:33] <TimMc> "implementing division"
[21:25:58] <TimMc> ...are you doing this on an FPGA or something?
[21:26:13] <Gravis> no, i'm using arbitrary precision numbers
[21:26:43] <TimMc> And they don't have division?
[21:27:04] <Gravis> i have to implement them in software because it's not a hardware feature
[21:27:51] <Gravis> i'm not using external libraries
[21:28:05] <Gravis> everything is builtin
[21:28:26] <Gravis> it wouldn't be fun if you could just import a HUGE library
[21:29:35] <Gravis> did some more optimizing.  down to 1352 bytes and I think that's about as good as I'll be able to do
[21:30:43] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[21:30:48] <Gravis> 1336*
[21:31:22] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[21:31:31] <TimMc> C doesn't have floating point division?
[21:31:47] <TimMc> I feel like I'm missing something very fundamental about your requirements.
[21:32:04] <Gravis> sure it does but that's not how calculating numbers with arbitrary precision works
[21:32:05] <danieldg> TimMc: floating point is insufficiently accurate
[21:32:15] <danieldg> that's the original issue
[21:33:52] <TimMc> aha
[21:34:48] <TimMc> You could use floating point division as the rough step and then brute force from there. :-P
[21:35:45] <danieldg> I think starting from a floating cube root would be easier
[21:36:33] <Gravis> TimMc: no, you can't brute force it because you cannot check if the answer is correct due to a lack of precision
[21:36:55] <TimMc> How many bits is it off by, though?
[21:37:32] <Gravis> TimMc: 2 or 3
[21:37:47] <TimMc> Perfect!
[21:38:07] <Gravis> TimMc: not really.  you can't check if the answer is correct.
[21:38:20] <TimMc> You can cube, right?
[21:38:35] <TimMc> with your arbitrary precision code?
[21:39:17] <Gravis> sure... but multiplication requires implementing addition as well.  you don't save anything
[21:40:10] <danieldg> 128-bit integers should suffice
[21:40:19] <TimMc> Run Newton's method cube root with floating point, convert to arbitrary precision, then walk the 4-bit window and check each one.
[21:40:51] <Gravis> TimMc: basically, i'm "brute forcing" it already, your method would only give me a head-start on getting the answer
[21:41:10] <Gravis> as such, it would require /more/ code
[21:41:30] <danieldg> with this your brute force could be simpler, perhaps
[21:42:20] <Gravis> it would require fewer iterations but the code would be mostly the same
[21:43:27] <TimMc> So you're currently checking on the order of 2^64 possibilities or what?
[21:45:10] <Gravis> no
[21:45:19] <Gravis> here's the code: https://pastebin.com/RppqKs4d
[21:47:33] <Gravis> it increments a digit, cubes the result and if the result is less than the target then the increment is accepted.  if it's not less than the target then the increment is rejected and it changes to incrementing the next digit
[21:48:21] <TimMc> Ah, coarse to fine?
[21:48:28] <Gravis> yes
[21:48:34] <TimMc> that makes more sense :-)
[21:49:35] <Gravis> it's extremely simple algorithm which means it takes the least code to implement
[21:51:37] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Connection closed)
[21:51:55] <TimMc> So that's... what, log(N) time?
[21:52:48] <Gravis> no, i think it's just N time
[21:53:03] <TimMc> N in digits, which is log(N) in size of N
[21:53:37] <Gravis> it scales linearly
[21:54:31] <Gravis> 16 possible answer per digit.
[21:55:26] <Gravis> so for 16 digits (64-bit) it's a maximum of 256 tests
[21:57:30] <danieldg> you might be able to cube faster by not using arbitrary-precision code, especially if you can assume a u64*u64->u128 primitive
[21:57:39] <danieldg> and by faster I mean less code too
[21:57:49] <Gravis> though the real answer is 17 digits so it's a maximum of 272 tests
[21:58:24] *** Joins: chomwitt (~Pitsikoko@athedsl-20549.home.otenet.gr)
[21:58:48] <Gravis> danieldg: ultimately, i have to use arbitrary-precision for the furthest digit, so having two ways of doing the same thing is more code
[21:59:16] <Gravis> danieldg: if you can improve upon my code, feel free.  i posted it so you could see.  https://pastebin.com/RppqKs4d
[21:59:30] <danieldg> I don't care that much
[21:59:50] <Gravis> ok
[22:00:21] <Gravis> just remember, more complicated = more code
[22:00:48] <danieldg> yes, I was proposing eliminating all the arbitrary-precision stuff
[22:00:57] <Gravis> how?
[22:01:12] <danieldg> just implementing basic ops for 128-bit integers
[22:01:27] <danieldg> and use them to cube the 68-bit value
[22:02:01] <Gravis> that's still arbitrary-precision, just limited to 128-bits. -_-
[22:02:17] <danieldg> yes, but you don't need the loops at that point
[22:02:36] <danieldg> 128-bit arbitrary precision is shorter unrolled
[22:03:43] <Gravis> umm... loop unrolling almost never results in shorter code
[22:03:59] <danieldg> Gravis: if the loop counter is 2 it does
[22:04:03] <danieldg> the fact you actually need 134-bit might make this worse though
[22:04:14] <danieldg> or whatever the actual need is
[22:05:51] <danieldg> ex: add(u192, u192) can be done in 3 instructions on x86-64
[22:06:16] <danieldg> it takes more than 3 instructions to code an arbitrary precision add loop
[22:06:48] <Gravis> umm... what about carries?
[22:06:57] <Riastradh> adc
[22:07:09] <danieldg> ^^ that's why I specified x86
[22:07:32] <Riastradh> (most reasonable CPU architectures have an add-with-carry instruction)
[22:07:33] <danieldg> but other cpus also have a carry bit, so you might just need one more instruction to load it
[22:09:10] <Gravis> but this also require assembly language.  If I was going to use assembly then I would have already done so.
[22:09:25] <danieldg> admittedly it is hard to write this in C, but I think there are some GCC builtins that expose add and the carry result
[22:09:56] <danieldg> but I think it sometimes is possible to convince the compiler to optimize code into adc
[22:11:14] <danieldg> __builtin_addc
[22:11:44] <Gravis> very nice
[22:12:34] <Gravis> also supported in clang which is a must
[22:13:18] *** Quits: g00fy (~g00fy@user/g00fy) (Quit: Ping timeout (120 seconds))
[22:13:39] *** Joins: g00fy (~g00fy@user/g00fy)
[22:17:39] *** Joins: ariedro (~ariedro@user/ariedro)
[22:19:18] *** Quits: mamilis (uid502224@id-502224.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[22:30:26] *** Quits: mikeliuk (~mikeliuk@213.205.198.26) (Quit: Connection closed)
[22:30:30] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[22:43:31] *** Quits: artart78 (~artart78@2001:41d0:a:3ba6::1) (Changing host)
[22:43:31] *** Joins: artart78 (~artart78@user/artart78)
[22:55:37] *** Joins: Iota (~Iota@user/iota)
[23:16:30] *** Quits: vernaz (~vernaz@148.63.127.167) (Ping timeout: 250 seconds)
[23:23:43] *** Joins: gueriLLaPunK (~textual@75.104.71.73)
[23:36:15] *** Quits: gueriLLaPunK (~textual@75.104.71.73) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:37:25] *** Joins: sarnold (~sarnold@ubuntu/member/sarnold)
[23:38:36] *** Joins: gueriLLaPunK (~textual@75.104.71.73)
[23:42:27] *** Quits: gueriLLaPunK (~textual@75.104.71.73) (Client Quit)
[23:43:23] <caveman> how to test if eof is reached?
[23:44:43] <caveman> should i just heck if line == ''?  (where line = f.readline()).
[23:49:18] <river> an empty line is not eof
[23:49:33] <river> ask #programming
[23:50:04] <Alipha> caveman: what language?
[23:50:05] *** Joins: gueriLLaPunK (~textual@75.104.71.73)
[23:51:15] <caveman> err, wrong channel again.  i thought i'm in #python!
[23:54:15] <MacGyver> How.
[23:54:52] <caveman> crypto.. prython.. python!
[23:59:07] <yawkat> the keys *are* right next to each other
