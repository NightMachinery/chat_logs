[00:00:48] *** Joins: LiftLeft (~LiftLeft@154.21.28.208)
[00:00:57] *** Quits: emika (~emika@185.207.249.155) (Ping timeout: 252 seconds)
[00:00:57] *** emika2 is now known as emika
[00:09:07] *** Joins: AlanMD (~AlanMD@5-12-8-103.residential.rdsnet.ro)
[00:09:17] *** Quits: xcombelle (~Xavier_Co@abayonne-651-1-41-161.w92-156.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[00:09:52] *** Joins: gloomy_desktop (~ldorigo@81.161.149.37)
[00:10:04] *** Quits: MaximB (~MaximB@87.68.164.32) (Ping timeout: 246 seconds)
[00:10:34] *** Joins: shimbles (~shimbles@158.sub-174-198-137.myvzw.com)
[00:10:36] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 272 seconds)
[00:10:48] *** Joins: ice9 (~ice9@user/ice9)
[00:11:17] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[00:11:45] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[00:11:47] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 245 seconds)
[00:11:49] *** Joins: molt (~molt@79.140.150.21)
[00:12:37] *** Parts: shimbles (~shimbles@158.sub-174-198-137.myvzw.com) ()
[00:13:06] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[00:13:46] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 272 seconds)
[00:14:51] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[00:15:38] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 244 seconds)
[00:16:14] *** Joins: mexen (uid495612@user/mexen)
[00:16:50] <dimbag> how to make python faster then php 8 ?
[00:18:11] <nedbat> dimbag: is your program too slow?  What does it do?
[00:23:16] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[00:24:48] <dimbag> nedbat, no it is not slow, just when i am test between them i see that php8 become faster, as i am fun of python, i want to know why
[00:25:04] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[00:25:24] <nedbat> dimbag: i'm not sure what kind of measurements you are looking at.
[00:26:11] <gordonjcp> dimbag: run it on a faster computer?
[00:27:59] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[00:28:54] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973) (Quit: Leaving)
[00:29:23] *** Quits: netsan (~netsan@user/netsan) (Remote host closed the connection)
[00:30:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:31:08] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::682e)
[00:31:41] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[00:31:51] *** Quits: mattil (~mattilinn@87-92-149-13.rev.dnainternet.fi) (Quit: Leaving)
[00:34:17] *** Joins: y1n (~y1n@84-115-65-189.wifi.dynamic.surfer.at)
[00:35:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[00:35:38] <sybariten> I got helped to this construction  sort_numbers = sorted(theDict.items(), key=lambda x: x[1], reverse=True)[:limitOfNumbers]     could someone help me break down whats going on more precisely? (Save for the last slice, i got that)  For instance, what does the lambda construction do?
[00:36:24] <grym> sybariten: the lambda is exactly the same as `def get_the_second_one(something):return something[1]`
[00:36:25] <deniska> sybariten: lambda does more or less the same thing as `def` statement, it creates a function
[00:36:47] <deniska> sybariten: except `def` assigns it to a name, and lambda is justâ€¦ there to be used, as an expression
[00:37:27] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::682e) (Quit: Konversation terminated!)
[00:37:37] <sybariten> hm
[00:38:12] <deniska> sybariten: and when you pass a key function to sorted, instead of comparing items directly, it applies the function to each item, and sorts using the result of this function
[00:38:13] *** Joins: Caesar-EW (~Caesar-EW@84.213.107.109)
[00:38:27] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 245 seconds)
[00:39:09] <sybariten> yeah i've seen the key thing before. So it's a way to make the sorting functino do a little bit of everything
[00:41:16] <sybariten> OK i think i have to look at some other examples of lambda then. In this case, i would like to make a new version of this sorting where i'm not picking out a value directly (x, i guess) but instead i'm dividing it by something each time. Could that division happen like this, perhaps?   sort_numbers = sorted(theDict.items(), key=lambda x: (x[1]/constant), reverse=True)[:limitOfNumbers]
[00:41:49] <sybariten> well constant will actually be a function call...  so i hope it can be looped somehow
[00:43:14] <az> I've a function in Telegram bot that I want to get a user input from and add it to a dictionary that is used elsewhere, I don't want to modify the the telegram bot function. is there anyway to get the data out from the function into a dictionary that is shared between all function? should I just use json file or a database for that?
[00:43:19] <deniska> sybariten: well, it doesn't really make sense to divide by the constant, it won't change the resulting order :)
[00:44:35] *** Joins: Julian (~tos9@python/site-packages/Julian)
[00:45:09] *** Quits: Haxxa (~Haxxa@122.199.45.186) (Quit: Haxxa flies away.)
[00:45:43] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:45:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[00:46:07] *** Joins: Haxxa (~Haxxa@122.199.45.186)
[00:46:07] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:46:13] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[00:47:42] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:47:46] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[00:47:56] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[00:48:01] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:49:03] *** Quits: magla (~gelignite@55d4cb3d.access.ecotel.net) (Quit: Stay safe!)
[00:49:38] *** Joins: matsaman (~matsaman@user/matsaman)
[00:49:44] *** Joins: Stenean (~Stenean@cpc83645-brig20-2-0-cust98.3-3.cable.virginm.net)
[00:50:40] *** Quits: Stenean (~Stenean@cpc83645-brig20-2-0-cust98.3-3.cable.virginm.net) (Remote host closed the connection)
[00:51:17] *** Joins: de-facto (~de-facto@user/de-facto)
[00:51:19] *** Joins: Stenean (~Stenean@cpc83645-brig20-2-0-cust98.3-3.cable.virginm.net)
[00:51:25] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[00:52:18] <de-facto> whats the most cannonical way to HTTP download with gz support and user agent etc?
[00:53:45] <sybariten> deniska: no no, it won't be a constant hehe. It's depending on a value from another dict  :)
[00:54:16] *** Quits: shailangsa (~shailangs@host86-186-142-59.range86-186.btcentralplus.com) (Ping timeout: 258 seconds)
[00:54:19] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 250 seconds)
[00:57:05] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[00:57:24] <deniska> de-facto: module called requests is popular
[00:58:52] *** Quits: mei (~mei@user/mei) (Ping timeout: 245 seconds)
[01:00:17] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[01:00:35] <de-facto> urllib?
[01:01:01] <josh_h> nah requests
[01:01:12] <grym> de-facto: no, https://docs.python-requests.org/en/master/
[01:01:30] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 240 seconds)
[01:01:31] <josh_h> most people don't use urllib directly it's got building blocks but it's tough to use directly - meanwhile requests is a de facto standard and pretty user friendly
[01:01:35] <de-facto> does it support proxy and headers?
[01:01:39] <josh_h> yeah
[01:01:46] <de-facto> also socks?
[01:01:49] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[01:02:09] <josh_h> I think so?
[01:02:17] <josh_h> it's supported everything I've ever realistically wanted to do
[01:02:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:02:19] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 258 seconds)
[01:02:28] <grym> de-facto: there's an extra for that i think
[01:03:01] <grym> de-facto: https://docs.python-requests.org/en/master/user/advanced/#socks , https://docs.python-requests.org/en/master/#beloved-features
[01:03:17] <de-facto> nice
[01:03:29] <grym> there's a reason it's the de facto library, yes
[01:04:57] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:05:15] *** Quits: yogoyo (~paddy@user/yogoyo) (Quit: good night)
[01:08:53] <de-facto> hmm
[01:09:50] <de-facto> resp = requests.get('https://www.google.com/')
[01:09:55] <de-facto> gives me "Syntax error: "(" unexpected"
[01:11:04] <grym> de-facto: and what's on the line above that
[01:11:23] <de-facto> import requests
[01:12:19] <de-facto> oh bogus shebang
[01:12:20] <de-facto> i see
[01:12:50] <de-facto> how do i properly start a portable python3 file?
[01:13:21] <grym> by calling it with the interpreter you want to run it with, usually? i don't use shebangs
[01:13:37] <grym> #!/usr/bin/env python is 'correct', however
[01:14:07] <de-facto> yeah i had that with python3
[01:14:08] <matsaman> python path/to/file
[01:14:11] <matsaman> python3 path/to/file
[01:14:12] <matsaman> etc.
[01:14:24] <matsaman> or you can try chmod +x and ./path/to/file
[01:14:34] *** Quits: MmeQuignon (~MmeQuigno@static-198-54-129-84.cust.tzulo.com) (Ping timeout: 272 seconds)
[01:14:43] <de-facto> yeah that works
[01:15:07] <matsaman> to me 'foo path/to/file' is literally one fewer step than chmod and ./ =P
[01:15:41] <grym> matsaman: and to me, a well configured entry_point gives me ./foo, which is better still
[01:15:43] <matsaman> you also can get better feedback, if you run it with one python version and it freaks out because it wants the other
[01:16:04] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[01:16:04] <matsaman> grym: yeah, if only that were always the case, heh
[01:16:08] <grym> (and then it's really hard to doof on the interpreter, even)
[01:16:14] <grym> matsaman: well, it is with _my_ code.
[01:16:15] <grym> :)
[01:16:16] <Orimendix> matsaman: If it's literally just a matter of one line versus two, you could write a shell function to chmod and run the file at once.
[01:16:19] <matsaman> naturally
[01:16:26] <grym> Orimendix: right, an entry point!
[01:16:30] <matsaman> Orimendix: nah, I don't believe that, that's impossible
[01:16:30] <grym> >:)
[01:16:56] <matsaman> unrelated: there's a weird key that has a high period on the same key as a comma on my keyboard
[01:18:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[01:18:45] <grym> matsaman: it's this foreign thing that java programmers need
[01:18:48] <grym> noone knows why its there
[01:19:52] <de-facto> nice i like requests
[01:20:03] <de-facto> does it automatically use gzip when offered?
[01:20:22] *** Quits: ice9 (~ice9@user/ice9) (Read error: Connection reset by peer)
[01:20:38] <grym> de-facto: https://2.python-requests.org/en/master/user/quickstart/#binary-response-content
[01:20:45] *** Joins: ice9 (~ice9@user/ice9)
[01:20:52] <grym> er, that may be very old docs; thanks google..
[01:21:33] <grym> oh, no, looks correct
[01:21:58] *** Quits: aha (~aha@user/hmmm) (Remote host closed the connection)
[01:22:24] <de-facto> so it does use those on network but transparently? do i have to enable those?
[01:23:01] <grym> i believe that you'll do gzip over the wire and decompress locally all automagically
[01:23:47] <grym> whether or not you get gzip over the wire is up to you and the endpoint, i think
[01:24:06] <grym> maybe it's automatic, maybe you have to ask, i can't know
[01:24:42] *** Quits: y1n (~y1n@84-115-65-189.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[01:26:21] <de-facto> it seems it requests with HTTP_ACCEPT_ENCODING:	gzip, deflate
[01:26:52] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[01:31:47] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 245 seconds)
[01:32:19] *** Joins: Abrax- (~Abrax@user/abrax)
[01:32:33] *** Quits: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy) (Quit: Client closed)
[01:36:06] *** Quits: Abrax (~Abrax@user/abrax) (Ping timeout: 272 seconds)
[01:36:10] *** Quits: resmo (~resmo@2a00:d420:9:8a00:85ee:5c6b:901e:b396) (Remote host closed the connection)
[01:36:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[01:37:10] *** Joins: Roey (~Roey@user/Roey)
[01:38:37] *** Joins: y1n (~y1n@84-115-65-189.wifi.dynamic.surfer.at)
[01:47:39] *** Joins: hendursa1 (~weechat@user/hendursaga)
[01:48:02] *** Quits: sazawal (~sazawal@122.161.170.192) (Quit: Leaving)
[01:48:03] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[01:48:15] <CrtxReavr> What's the best day to do a recursive glob. . . ie make a list of all the .yaml files under r'd:\foo\'?
[01:48:16] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[01:49:27] <TJ-> CrtxReavr: Tomorrow :)
[01:49:29] *** Quits: greedom (~greedom@2001:16b8:3242:3b00:a8ca:7197:5556:5289) (Remote host closed the connection)
[01:49:32] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[01:50:19] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[01:50:21] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:50:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[01:50:51] *** Joins: mickey8 (~user@user/mickey)
[01:51:46] *** Quits: devcpu (~rusty@ec2-35-183-244-153.ca-central-1.compute.amazonaws.com) (Quit: leaving)
[01:51:58] <CrtxReavr> o_O
[01:52:00] <CrtxReavr> way
[01:53:11] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[01:53:34] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[01:54:48] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 276 seconds)
[01:54:50] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[01:57:17] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[01:59:29] *** Joins: shailangsa (~shailangs@host86-185-58-139.range86-185.btcentralplus.com)
[02:00:29] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[02:00:56] *** Joins: thiras (~thiras@user/thiras)
[02:01:40] <de-facto> what is the cannonical library for CSV data manipulation? i need import, transpose, calculate (e.g. like excel), merge (on same date) etc
[02:02:22] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:ac0a:bb04:1852:c943)
[02:02:25] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[02:02:58] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[02:05:44] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:06:37] <BtbN> define "csv data"
[02:06:48] <BtbN> if you want to read a csv file, there's various libraries for that
[02:07:02] <BtbN> the data manipulation you describe has nothing to do with csv
[02:07:17] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[02:07:32] *** Quits: kindablue_ (znc@irc.tpurist.com) (Quit: System Rebooting..)
[02:09:50] *** Joins: resmo (~resmo@2a00:d420:9:8a00:e144:1cb8:c71:69a7)
[02:09:58] *** Quits: DaNeenjah (~jake@21.sub-72-106-110.myvzw.com) (Quit: WeeChat 3.2)
[02:11:24] *** Quits: Stenean (~Stenean@cpc83645-brig20-2-0-cust98.3-3.cable.virginm.net) (Quit: Quit)
[02:11:47] *** Quits: CoolerY (~CoolerX@user/coolerx) (Ping timeout: 245 seconds)
[02:11:53] *** Quits: ice9 (~ice9@user/ice9) (Read error: Connection reset by peer)
[02:12:41] *** Joins: kindablue (znc@irc.tpurist.com)
[02:12:58] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:14:13] *** Joins: kindablue_ (znc@207.246.111.155)
[02:15:13] *** Quits: kindablue_ (znc@207.246.111.155) (Client Quit)
[02:16:47] <de-facto> well yeah i will need to read csv from downloaded files, transpose it (swap cols and rows), iterate over it, merge rows on same value for e.g. a date col etc
[02:17:10] <de-facto> is there a lib that can do such things or would l need to do that all manually?
[02:17:50] <rndusr> mhm
[02:17:52] <rndusr> sounds like it
[02:17:55] <Repiphany_> Numpy
[02:18:03] <TJ-> de-facto: how about a pything interface to libreoffice calc? https://code.activestate.com/recipes/579147-pyoocalc-python-libreopen-office-calc-interface-ap/
[02:18:17] <Repiphany_> or pandas
[02:18:52] <jootoi_> definitely sounds like pandas thing more
[02:19:12] <de-facto> its going to run on a headless server
[02:19:18] *** Quits: rany_ (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[02:19:30] <de-facto> lo calc is neat but probably too big of an dependency
[02:21:08] *** Joins: rany (~rany@user/rany)
[02:21:30] *** Joins: locrian9 (~mike@cpe-104-173-20-162.socal.res.rr.com)
[02:23:25] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (Ping timeout: 268 seconds)
[02:24:53] *** Quits: y1n (~y1n@84-115-65-189.wifi.dynamic.surfer.at) (Ping timeout: 250 seconds)
[02:25:14] *** Quits: BernieMont (~BernieMon@2001:558:6005:3:f8c7:b5aa:4b69:d5ab) (Remote host closed the connection)
[02:27:27] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:28:13] *** Joins: kindablue_ (znc@207.246.111.155)
[02:30:09] *** Joins: BernieMont (~BernieMon@2001:558:6005:3:f8c7:b5aa:4b69:d5ab)
[02:32:54] *** Quits: Caesar-EW (~Caesar-EW@84.213.107.109) (Quit: WeeChat 3.2)
[02:33:12] *** Joins: Caesar-EW (~Caesar-EW@84.213.107.109)
[02:33:41] *** Quits: Akuli (~Akuli@87-94-110-245.bb.dnainternet.fi) (Quit: Leaving)
[02:37:53] *** Joins: y1n (~y1n@84-115-64-176.wifi.dynamic.surfer.at)
[02:37:54] *** Quits: Gerula (~Gerula@user/gerula) (Ping timeout: 240 seconds)
[02:39:18] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 258 seconds)
[02:41:30] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[02:42:03] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:42:54] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[02:44:21] *** Joins: digilink (~digilink@user/digilink)
[02:45:07] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 245 seconds)
[02:46:16] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Ping timeout (120 seconds))
[02:46:32] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[02:47:13] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[02:47:19] *** Quits: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619) (Remote host closed the connection)
[02:47:22] <jaggz> why's my sounddevice mic callback never get called?  https://paste.debian.net/1206990/
[02:47:33] *** Joins: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619)
[02:48:32] <jaggz> also, what's this "with sd.InputStream(...): stuff using self." people are using?  I assign the stream to a var called 'input'
[02:48:53] <jaggz> the only other 'with' I ever do is with open(..) as f:
[02:50:29] *** Quits: dcaro (~dcaro@user/dcaro) (Read error: Connection reset by peer)
[02:50:47] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[02:50:54] *** Joins: dcaro (~dcaro@user/dcaro)
[02:51:16] <KirkMcDonald> `with` is a context manager. It does setup when you enter the block and cleanup when you exit the block, as defined by the object being given in that initial expression.
[02:51:36] <jaggz> that'd be cleaner.  where does the return from sd.InputStream() go though?
[02:51:57] <KirkMcDonald> The "return from"? I'm not sure what you're asking.
[02:51:58] <jaggz> does the block become a member of its class? (hence the self. references people use?)
[02:52:12] <KirkMcDonald> `with` is unrelated to `self`.
[02:52:19] <jaggz> like, if you have:  with open(file) as foo:   foo.can_use_stuff_here
[02:52:23] <jaggz> i gave it a name
[02:52:43] <jaggz> but if I do with sd.InputStream():  how_access_stream?
[02:53:20] <KirkMcDonald> That would depend on the specific code or library. I don't know anything about this library.
[02:53:26] <jaggz> (I do see python in my pulseaudio recording streams.. it looks active, but my callback's never called)
[02:53:36] <jaggz> hm
[02:53:52] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[02:54:30] <jaggz> I'll try it on a newer debian install.  sounddevice uses libportaudio which is apparently flakey and might be worse on my older system
[02:54:47] <KirkMcDonald> When you do `with ... as`, the object being used as the context manager can give you an object that you can assign like that. Sometimes, as with your example using open(), that object is just the context manager (the file object) itself.
[02:55:13] *** Joins: cheater (~Username@user/cheater)
[02:55:27] <KirkMcDonald> But it can return anything it wants.
[02:55:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:57:53] *** Joins: rany_ (~rany@user/rany)
[02:58:15] *** Quits: rany (~rany@user/rany) (Ping timeout: 250 seconds)
[02:58:38] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:58:47] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:00:15] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:01:06] *** Joins: SuperLag (~akulbe@user/superlag)
[03:01:58] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:7802:faf8:53d5:9a78) (Read error: Connection reset by peer)
[03:02:10] *** Joins: Harlin (~DonQixote@2603:300b:663:e800:9551:fbe6:2bbc:5130)
[03:02:38] *** Joins: ice9 (~ice9@user/ice9)
[03:03:16] *** Quits: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de) (Quit: Lost terminal)
[03:04:52] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[03:05:55] <dba> I am using f.write(json.dumps(data)) to save a dict in a json file inside a func1(). but when I run func1() in multiple threading I get this error TypeError: Object of type int64 is not JSON serializable. my questoin is there a special way of handling saving data into json when using mutithreading ?
[03:06:48] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[03:07:12] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 245 seconds)
[03:08:49] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Quit: WeeChat 2.8)
[03:10:04] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[03:10:17] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Remote host closed the connection)
[03:13:30] *** Quits: treefrob (~robx@p57a969ef.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:14:11] <nedbat> dba: it's not clear how threading caused that error.  Can you link us to the code?
[03:14:11] *** Joins: hafat (~hafat@95.70.167.173)
[03:16:21] *** Joins: srhm (~ascii@user/srhm)
[03:16:46] *** Joins: cjb (~cjb@user/cjb)
[03:18:10] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[03:19:05] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Remote host closed the connection)
[03:19:13] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[03:19:55] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[03:22:21] <phy1729> Aside you can json.dump(data, f)
[03:23:01] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[03:24:17] *** Quits: Caesar-EW (~Caesar-EW@84.213.107.109) (Ping timeout: 245 seconds)
[03:25:18] *** Quits: y1n (~y1n@84-115-64-176.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[03:25:21] *** Joins: Slimgin (~slimgin@2603:9001:207:a100:119e:bb3f:cbc0:744c)
[03:26:09] *** Quits: tone0 (~tone0@071-011-252-111.res.spectrum.com) (Remote host closed the connection)
[03:28:08] *** Joins: treefrob (~robx@p57a9648f.dip0.t-ipconnect.de)
[03:29:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[03:30:56] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 252 seconds)
[03:32:15] *** Joins: CoolerY (~CoolerX@user/coolerx)
[03:32:31] *** Joins: dicajo (~dicajo@072-186-122-186.res.spectrum.com)
[03:32:52] *** Joins: m4v (~znc@ubuntu/member/m4v)
[03:32:54] *** Quits: dicajo (~dicajo@072-186-122-186.res.spectrum.com) (Client Quit)
[03:33:54] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 272 seconds)
[03:36:39] *** Joins: Bardon_ (~Bardon@user/Bardon)
[03:38:02] *** Quits: CoolerY (~CoolerX@user/coolerx) (Ping timeout: 245 seconds)
[03:38:25] *** Joins: y1n (~y1n@84-115-64-176.wifi.dynamic.surfer.at)
[03:38:54] *** Quits: Bardon (~Bardon@user/Bardon) (Ping timeout: 272 seconds)
[03:39:18] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[03:39:33] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:41:11] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:ac0a:bb04:1852:c943) (Quit: Leaving)
[03:41:41] *** Abrax- is now known as Abrax
[03:41:46] *** Quits: ChrisWarrick (kwpolska@user/kwpolska) (Ping timeout: 240 seconds)
[03:43:41] *** Joins: ChrisWarrick (kwpolska@user/kwpolska)
[03:47:33] *** Quits: securethemews (~securethe@5.80.55.13) (Quit: Leaving)
[03:52:53] *** Joins: skered (~dereks@user/skered)
[03:54:40] *** Joins: tone0 (~tone0@071-011-252-111.res.spectrum.com)
[03:56:57] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:57:49] *** Joins: tims (~tims@61.69.131.46)
[03:58:00] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Ping timeout: 252 seconds)
[04:01:31] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 250 seconds)
[04:03:31] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[04:04:24] *** Joins: Wulf4 (~Wulf@user/wulf)
[04:04:56] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[04:05:01] <nedbat> it's possible that 12 years after first implementing a trace function in C, I am only now understanding that C trace functions are not per-frame, as Python trace functions are.
[04:05:32] *** Quits: Bardon_ (~Bardon@user/Bardon) (Ping timeout: 245 seconds)
[04:06:16] *** Joins: Bardon (~Bardon@user/Bardon)
[04:06:31] <Slimgin> @nedbat - wha? I can read what you are writing, but have no idea what you are saying ;) Can you provide an example of what you mean?
[04:06:35] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[04:06:42] *** Joins: ano (~weechat@user/ano)
[04:07:04] *** Quits: infidel (~ecrump@75.161.232.127) (Read error: Connection reset by peer)
[04:08:02] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 245 seconds)
[04:08:06] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[04:08:07] *** Wulf4 is now known as Wulf
[04:09:09] <nedbat> Slimgin: https://docs.python.org/3/library/sys.html#sys.settrace and https://docs.python.org/3/c-api/init.html#c.PyEval_SetTrace
[04:09:49] <nedbat> Slimgin: it's ok to not know what I'm talking about, this is esoteric.
[04:12:05] <nedbat> Slimgin: mostly i'm just muttering to myself :)
[04:12:05] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[04:14:01] <Slimgin> Yeah even reading the Python page describing a trace, I still dont understand.. Much I have to learn.
[04:17:02] *** Joins: rany (~rany@user/rany)
[04:17:18] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 256 seconds)
[04:17:21] <nedbat> Slimgin: what are you working on?
[04:21:51] *** Joins: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net)
[04:22:33] *** starz is now known as starz-
[04:22:45] *** starz- is now known as starz
[04:23:03] <AhmedAmerican> is there more efficient way than that ? `[(q, 'Found') if q.lower() in r.text.lower() else (q, 'Not Found') for q in queries]`
[04:24:13] <Yhg1s> AhmedAmerican: well, there's [(q, 'Found' if q.lower() in r.text.lower() else 'Not Found') for q in queries]
[04:24:30] <Yhg1s> AhmedAmerican: but it's only slightly more efficient.
[04:25:01] *** Joins: Wafficus (~user@70.126.240.148)
[04:25:07] <AhmedAmerican> got it :P i was trying to do this actually :P
[04:25:12] <AhmedAmerican> thank you Yhg1s
[04:25:23] <Wafficus> hey there, can anyone please help me with Line 41: https://bpa.st/2TRQ
[04:25:29] *** Quits: y1n (~y1n@84-115-64-176.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[04:25:35] *** Joins: emika3 (~emika@83.136.182.82)
[04:25:42] <Wafficus> I'm trying to figure out how to obtain the pictures in the current directory I changed to on my site, but its not listing the files out like I want it to
[04:26:13] <Yhg1s> Wafficus: how is it listing them out, and how do you want to list them out instead?
[04:26:22] *** Joins: Nine_BAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net)
[04:26:38] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 258 seconds)
[04:27:04] *** Quits: Nine_BAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net) (Client Quit)
[04:27:31] *** Quits: emika (~emika@212.102.45.121) (Ping timeout: 250 seconds)
[04:27:31] *** emika3 is now known as emika
[04:28:33] *** Quits: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net) (Ping timeout: 258 seconds)
[04:28:52] *** Joins: Bardon_ (~Bardon@user/Bardon)
[04:29:29] <Wafficus> currently I'm just printing them
[04:29:47] <Wafficus> the idea is that I want to loop through each image directory, and create <img> tags accordingly
[04:29:52] <Wafficus> basically a self-building image gallery
[04:29:54] *** Quits: Bardon (~Bardon@user/Bardon) (Ping timeout: 252 seconds)
[04:30:02] <Yhg1s> Wafficus: that's what your code is doing, yes. Is it not working? Are you getting different output than you wanted?
[04:30:03] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[04:30:03] <Wafficus> that builds itself each day. Beats having to do this manually personally
[04:30:07] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[04:30:13] <Wafficus> its just giving me a blank array
[04:30:18] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 240 seconds)
[04:30:23] <Wafficus> '[]' when I went through that specific line mentioned above
[04:30:24] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:30:31] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[04:30:58] <Yhg1s> Wafficus: okay, then the os.listdir() didn't produce any paths for which os.path.isfile() is true. You should realise that os.listdir(directory) returns the files *without* the directory name.
[04:31:04] *** Joins: lethu (~lethu@196.117.151.28)
[04:31:31] *** Quits: lethu (~lethu@196.117.151.28) (Client Quit)
[04:31:40] <Yhg1s> Wafficus: I also recommend using pathlib instead of os.listdir and the os.path functions.
[04:32:29] <Wafficus> gotcha, I'll try to check out the docs for pathlib in that case
[04:32:32] <Wafficus> thanks for the heads up
[04:32:40] <Wafficus> its funny because I know I'm like 60% of the way there
[04:32:47] <Wafficus> just need that final push and I should be set
[04:33:06] *** Joins: lethu (~lethu@196.117.151.28)
[04:33:15] *** Quits: lethu (~lethu@196.117.151.28) (Remote host closed the connection)
[04:33:50] *** Joins: lethu (~lethu@196.117.151.28)
[04:34:00] *** Quits: lethu (~lethu@196.117.151.28) (Remote host closed the connection)
[04:34:47] *** Quits: locrian9 (~mike@cpe-104-173-20-162.socal.res.rr.com) (Quit: leaving)
[04:35:55] *** Joins: lethu (~lethu@196.117.151.28)
[04:36:09] *** Quits: lethu (~lethu@196.117.151.28) (Client Quit)
[04:39:01] *** Joins: y1n (~y1n@84-115-65-60.wifi.dynamic.surfer.at)
[04:39:42] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Ping timeout: 272 seconds)
[04:42:36] *** Joins: SuperLag (~akulbe@user/superlag)
[04:43:52] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 245 seconds)
[04:44:28] *** Repiphany_ is now known as Repiphany
[04:44:59] *** Quits: Slimgin (~slimgin@2603:9001:207:a100:119e:bb3f:cbc0:744c) (Remote host closed the connection)
[04:47:18] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[04:48:32] *** Joins: ente_ (~ente@p200300dc5f4358007418074540032b42.dip0.t-ipconnect.de)
[04:52:26] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[04:55:20] *** Joins: bigRoo (~user@131.236.55.20)
[04:59:54] <Wafficus> I tried using pathlib, and am still unable to print out any proper image paths in the directory with .glob(), on Line 41: https://bpa.st/5ZVQ
[04:59:56] <Wafficus> Yhg1s:
[05:00:33] <sveinse> Are there any optimized methods for creating a transpose of a iterable of dicts? Something like: ({a:1, b:2},{a:5, c:7}) => {a:(1, 5), b:(2, None), c:(None, 7)}
[05:02:12] <sybariten> if this is a call to sorted that sorts a dictionary on all the values....  sort_numbers = sorted(theDict.items(), key=lambda x: x[1], reverse=True)[:20]     then why will this not sort on all values divided by 10?     sort_numbers = sorted(theDict.items(), key=lambda x: (x[1]/10), reverse=True)[:20]
[05:02:13] *** Quits: mwilson (mwilson@2600:3c01::f03c:92ff:fe7f:1149) (Quit: Leaving!)
[05:02:25] <sybariten> or rather, am i thinking in the right direction at all
[05:02:25] *** Joins: mwilson (~mwilson@li159-72.members.linode.com)
[05:02:46] <grym> sybariten: it would, but it's unlikely to change your sort order!  and it won't update the values in the objects themselves
[05:03:01] <sybariten> ahaaaa, it won't update!
[05:03:07] <grym> (why or how could it?)
[05:03:12] <sybariten> It will still be displaying things from the original dictinary?
[05:03:20] <grym> there's only one dictionary there
[05:03:21] <sybariten> s/things/original things
[05:03:31] <sybariten> i think i thought it manipulated values on the fly somehow
[05:03:52] <grym> inside the lambda, per item, and immediately throws it away
[05:03:59] <sybariten> i see
[05:04:55] <sybariten> i'm at a total loss at how to sort a dictionary, on a "per-capita" value. I have the actual value for lots of countries in a dict, but i have the population for those countries in another dict...
[05:05:39] <Repiphany> sorted(d1.items(), key = lambda x : d2[x[0]])
[05:06:15] <sybariten> what is going on in the lambda function there?
[05:06:22] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[05:06:29] <jochum> sveinse: your example is not clear to me you have 3 keys but 2 values in tuple?
[05:06:40] *** Joins: rany (~rany@user/rany)
[05:06:59] *** Quits: yitz (~yitz@exercism/yitz) (Quit:  )
[05:07:33] <Repiphany> x is a (key, value) pair from d1.items() and the lambda uses the value of d2[x[0]] to sort over
[05:07:42] <Repiphany> assuming d1, d2 have the same keys
[05:07:47] *** Joins: yitz (~yitz@exercism/yitz)
[05:08:44] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[05:09:09] <sveinse> jochum: The input iter contains two dicts, so the output values should have two items. And the output dict should have all key that is encountered across all input dicts.
[05:09:33] *** Quits: madprops (hj8oijo@user/madprops) (Ping timeout: 250 seconds)
[05:10:28] <jochum> sveinse: maybe Repiphany understands you example, he/she seems to do good with that stuff.
[05:10:28] <Repiphany> Tuples of dicts doesn't seem too optimized to start with
[05:11:16] <sveinse> Forget that the example is written with tuple, rather think of it as a general iterator
[05:11:52] *** Quits: emerent (~quassel@p200300cd57058c26ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[05:12:08] <Samian> I've seen code before that creates a large list / array of something, and then converters each item in that large list to create a new list in the converted format.   But instead you could create the converted format from the get go by  doing it per element in the first creation loop.  For example, reading in a list of numbers as strings, and then later converting that large list to a list of type int32. instead of having a
[05:12:08] <Samian>  create-list-of-numbers-in-string-format and later a convert-to-list-of-type-int32,  there could be one for loop that does the conversion per iteration in the loop. Is there a name for this?
[05:12:13] *** Joins: emerent (~quassel@p200300cd57058ca1ba27ebfffed28a59.dip0.t-ipconnect.de)
[05:12:45] <sveinse> We don't have a syntax for a general iterator, do we?
[05:12:59] <Samian> the example I gave is a terrible one.
[05:14:29] <sveinse> Anyways, doing this with brute force O(N^2) is trivial enough.
[05:14:30] <Repiphany> Do you start knowing the size of your iterable, i.e. number of keys and dicts
[05:15:27] <nedbat> sveinse: what would "syntax for a general iterator" mean?
[05:15:34] <sveinse> Yes, I can always expand the iterable
[05:16:22] <sveinse> nedbat: Here on IRC when you want to say (a,b,c) but not need it to be a tuple (or list)
[05:16:42] <nedbat> sveinse: ah, i see.
[05:16:45] *** Joins: metal_egg (~metal0egg@pool-72-94-145-43.phlapa.fios.verizon.net)
[05:17:11] <jochum> hehe
[05:17:18] <Wafficus> can anyone help me with Line 41 please? kind of lost https://bpa.st/5ZVQ
[05:17:23] <sveinse> generators are beautiful <3
[05:17:29] <Wafficus> all I'm getting is a blank array
[05:18:08] <Repiphany> path.glob('*.jpg')
[05:19:29] <jochum> Wafficus: you want to print a list?
[05:19:35] <sybariten> not sure it would work, i'm just completely confused by the data structures and have a hard time seeing the calls to different items in front of me.   main dict or d1 would be {0: 11.422, 1: 5.026, 2: 159.929, 3: 30.876, 4: 0.028 .... etc   but the second dictionary is { Albania': {'area': 28748.0, id': 1, 'population': (3286070, 3086810, 2884169)} ....etc
[05:19:36] <jochum> Wafficus: ahh sorry
[05:19:46] <sybariten> (that was for Repiphany )
[05:20:22] <jochum> Wafficus: import pprint; pprint.pprint(picture_paths); <-- line 40 ?
[05:20:36] <Repiphany> Wafficus: Your glob in line 39 is missing a *
[05:20:47] <jochum> Repiphany: :)
[05:21:49] <Repiphany> sybariten: If you're trying to sort d1 by population density stored in another dict, the sort key is just a function that takes the item from d1 and returns the corresponding population density somehow
[05:22:19] <Repiphany> What are the keys of d1 and how do you get the population density from d2 using those keys
[05:22:56] <sybariten> Repiphany: well almost, it's a per-capita thing. the 5.026 that you see in the first dict there? Its a value for Albania (because albania has id 1) and it should be divided byone of the population values
[05:23:05] *** Joins: Fiji (~Fiji@user/fiji)
[05:23:22] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 258 seconds)
[05:23:25] *** Quits: y1n (~y1n@84-115-65-60.wifi.dynamic.surfer.at) (Ping timeout: 250 seconds)
[05:23:29] *** Joins: srhm (~ascii@user/srhm)
[05:23:58] <Repiphany> Can you write a function that takes an id and returns the value that you want to sort by
[05:24:01] <sybariten> heres how i solved an earlier exercise, where i didnt need to bother with populataion - just picking out values.
[05:24:42] *** Joins: lethu (~lethu@196.117.151.28)
[05:26:01] <Repiphany> It might help if you process a third dictionary that has the ids as keys and the same information as d2
[05:26:12] <sybariten> I sorted the first dict, which is only numbers...  sorted by value. using a lambda function. The resulting list (?) may also be sliced, optinally. Now i have a list of only numbers, but its sorted. I traverse it with a for loop and build up a new list, and for each countryID i make a call to a function i made, which just picks out the country name from the second dict
[05:26:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:28:19] <sybariten> Repiphany: hmm ok so i should start by writing a function that takes a countryID and returns the big value for that country, divided by population
[05:29:01] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[05:30:27] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:31:18] <Wafficus> jochum: Repiphany Thanks for the heads up on the missing asterisk, now even with pprint.pprint() I get this: <generator object Path.glob at 0x7fad00b5ec00>
[05:32:12] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 245 seconds)
[05:32:19] <Repiphany> `picture_paths_strings = [str(p) for p in picture_paths]` should work fine with that generator
[05:32:27] <Wafficus> latest paste https://bpa.st/323A
[05:32:31] <Wafficus> Repiphany:
[05:33:42] <Repiphany> Your code seems like it should work fine ignoring line 41, did you look at the output at all
[05:34:02] *** Joins: SuperLag (~akulbe@user/superlag)
[05:34:07] <Wafficus> you're right, I do get the output, '['temp/DonaldDChamberlin.jpg']'
[05:34:12] <Wafficus> however, dang, I kind of need the full path
[05:34:27] <Wafficus> like '/var/www/myWebsite/images/ArtGallery/' before it
[05:34:30] *** Joins: jess (~jess@libera/staff/jess)
[05:34:34] <Wafficus> getting closer I guess
[05:34:56] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Quit: Leaving)
[05:34:59] <grym> so str(p.resolve())
[05:35:01] <Wafficus> this is so I can get <img> tags going to auto-create an art gallery page once a day so I can just dump photos into folders, and not have to mess around with creating a new page, would be awesome
[05:35:01] <Repiphany> pucture_path.absolute()
[05:35:09] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 276 seconds)
[05:35:12] <Repiphany> picture
[05:35:19] <grym> puncture
[05:35:25] <Wafficus> pincture
[05:35:32] <Wafficus> just kidding
[05:35:34] <Wafficus> will try this, thanks
[05:35:39] <grym> tincture?
[05:37:05] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[05:38:52] *** Quits: lethu (~lethu@196.117.151.28) (Quit: Quit())
[05:39:00] <Wafficus> would it be ok if I did: picture_paths = Path(directory).glob("*.jpg").absolute()
[05:39:01] <Wafficus> Repiphany:
[05:39:27] *** Quits: kmh_ (~kmh@p5dcc60d3.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:39:36] <grym> tias
[05:39:44] <Wafficus> https://bpa.st/BEMQ
[05:39:49] <Wafficus> true
[05:40:02] <Wafficus> AttributeError: 'generator' object has no attribute 'absolute'
[05:40:08] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:40:09] <grym> sure doesn't
[05:40:23] <sybariten> Repiphany: did you mean building up a new dictionary?
[05:40:37] <grym> try (x.resolve() for x in Path(directory).glob("*.jpg"))
[05:40:43] <grym> (still a generator)
[05:41:23] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 258 seconds)
[05:41:24] *** brabrax_ is now known as brabrax
[05:42:39] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[05:44:07] <Repiphany> sybariten: Your dictionaries aren't particularly useful if you have to jump through hoops with ids and country names to get the information you're interested in
[05:44:22] <Wafficus> yep that works grym
[05:44:23] <Wafficus> awesome :)
[05:44:42] <Wafficus> where can I learn more about that kind of syntax that is often used though, I haven't seen this in an intro book
[05:44:46] <sybariten> Repiphany: no i guess they built this a little bit like a relational database for this exercise. Sigh
[05:44:51] <Wafficus> [str(p) for p in picture_paths]
[05:45:26] <grym> Wafficus: list comprehensions are pretty normal
[05:45:37] *** Quits: dzz007 (~dzz007@user/dzz007) (Read error: Connection reset by peer)
[05:45:39] <Wafficus> gotcha, list comprehensions, looking it up now, thanks
[05:47:40] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[05:48:06] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[05:48:28] *** Joins: Roey (~Roey@user/Roey)
[05:48:41] <Wafficus> yep, dang that's neat
[05:48:47] <Wafficus> converts that whole kind of segment into a 1 liner
[05:48:50] <Wafficus> beautiful stuff man
[05:49:27] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 276 seconds)
[05:50:38] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[05:53:52] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[05:53:54] *** Joins: vlm (~vlm@user/vlm)
[05:54:30] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[05:55:01] *** Quits: BernieMont (~BernieMon@2001:558:6005:3:f8c7:b5aa:4b69:d5ab) (Remote host closed the connection)
[05:55:20] *** Joins: BernieMont (~BernieMon@2001:558:6005:3:f8c7:b5aa:4b69:d5ab)
[05:55:46] *** Joins: dzz007 (~dzz007@user/dzz007)
[05:59:29] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[06:00:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[06:00:31] *** Joins: cheater (~Username@user/cheater)
[06:00:32] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[06:00:50] *** Joins: rany (~rany@user/rany)
[06:01:53] *** Quits: goldfish_ (~goldfish@user/goldfish) (Remote host closed the connection)
[06:03:37] *** Quits: ente_ (~ente@p200300dc5f4358007418074540032b42.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[06:05:24] *** Joins: ente_ (~ente@p200300dc5f058f00b82813af5062e873.dip0.t-ipconnect.de)
[06:06:40] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[06:07:36] <sybariten> in this article on multi dimensional dictinaries, they are looking at an employee dictinoary.   https://setscholars.net/beginners-guide-to-python-3-python-nested-dictionary/    under the headline "access nested dictionaries", they are printing that emp2 has the job type developer .
[06:07:59] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[06:08:52] <sybariten> As an analogy to my problems here, i would maybe be searching through the name things instead. The names are all unique in this simple example, and in my case, i i have a unique ID under the values too
[06:09:16] <sybariten> How would they have searched that the _name_ Kim, has the job type developer instead?
[06:09:30] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 256 seconds)
[06:10:38] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[06:10:49] *** lukedashjr is now known as luke-jr
[06:10:53] *** Joins: georgios (~georgios@user/georgios)
[06:11:27] <Repiphany> [(k, v) for k, v in D.items() if v['name'] == 'Kim' and v['job'] == 'Dev']
[06:11:46] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 256 seconds)
[06:12:08] <sybariten> oh man
[06:12:21] <Repiphany> or [v['job'] for v in D.items() if v['name'] == 'Kim'] or whatever
[06:12:32] <Repiphany> D.values() for the second one
[06:12:42] <sybariten> so these are not nested for loops
[06:13:34] *** Joins: SuperLag (~akulbe@user/superlag)
[06:17:06] <Repiphany> I mean you are looping over every item in the dictionary
[06:17:56] <sybariten> Aha
[06:18:45] <sybariten> I guess i have to get back at this tomorrow, it's all too foggy now.... i think i've spent 40 hours on one exercise, it's frustrating as hell . Maybe it'll go better tomorrow
[06:18:50] <sybariten> thanks for your help Repiphany !
[06:20:11] <Wafficus> The created site is 75% the way there, but the img tags are a bit weird, latest code here: 'https://bpa.st/2GGA'. The issue I am having with is that I want the 'id' portion to be the LAST portion of the path specified aka the name of the image minus the extension. Also, I want the 'src' tag to point to 'https://mywebsite.xyz/images/ArtGallery/temp/theImage.png', instead of the current one,
[06:20:12] <Wafficus> '/var/www/myWebsite/images/ArtGallery/temp/theImage.png'
[06:20:28] *** Quits: akk (~akk@75.161.157.26) (Quit: +++)
[06:23:17] *** Joins: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[06:23:57] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[06:25:45] *** Joins: rany_ (~rany@user/rany)
[06:25:57] *** Quits: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com) (Remote host closed the connection)
[06:26:10] *** Quits: rany (~rany@user/rany) (Ping timeout: 272 seconds)
[06:28:03] *** Joins: Warped (~Warped@user/warped)
[06:28:35] *** Quits: metal_egg (~metal0egg@pool-72-94-145-43.phlapa.fios.verizon.net) (Remote host closed the connection)
[06:31:35] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[06:31:52] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 272 seconds)
[06:32:06] *** Joins: Dexel (~Arco@68.40.3.32)
[06:40:12] *** Joins: astrocat (~astrocat@112.134.8.135)
[06:47:05] *** Joins: matsaman (~matsaman@user/matsaman)
[06:48:04] <Wafficus> grym: should I not use x.resolve() in this case, but opt for some kind of replacement?
[06:48:25] <Wafficus> also, can I use a glob to encompass '.png' as well?
[06:49:03] <Wafficus> https://bpa.st/Q6VQ
[06:49:14] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 258 seconds)
[06:50:38] <grym> Wafficus: you can glob for multiple things.  translating a file path on disk to a URL is not something pathlib (or os.path) can help you with all by itself.
[06:51:07] *** Quits: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619) (Remote host closed the connection)
[06:52:13] <jochum> Wafficus: do you know the static path to those images?
[06:52:32] <jochum> Wafficus: if so you could replace the static path with the url you know
[06:52:41] *** Joins: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619)
[06:53:03] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[06:53:38] <Wafficus> I see
[06:54:01] <Wafficus> couldn't I use a '|' pipe in this scenario too?
[06:54:05] <Wafficus> for the glob*
[06:54:15] <Wafficus> well
[06:54:59] <Wafficus> I know the cutoff, meaning I can just replacement the '/var/www/myWebsite' section and replace it with 'https://mySite.xyz/' and the tail end of it
[06:55:22] <Wafficus> I guess, I can just use basic string replacement is the first thing I could think of
[06:55:35] <jochum> yeah
[06:59:04] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:59:04] *** FinnElija is now known as Guest536
[06:59:04] *** finn_elija is now known as FinnElija
[06:59:36] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[07:01:19] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:01:54] *** Quits: Guest536 (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 240 seconds)
[07:02:32] *** Joins: zebrag (~chris@user/zebrag)
[07:07:38] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 258 seconds)
[07:08:31] *** Joins: locrian9 (~mike@cpe-23-240-34-32.socal.res.rr.com)
[07:08:52] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[07:10:59] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[07:11:02] <Wafficus> I can't seem to combine the two glob statements:             picture_paths = (x.resolve() for x in Path(directory) if x.suffix in [".jpg", ".png"])
[07:11:07] <Wafficus> grym:
[07:11:18] <Wafficus> found a similar SO post though: https://stackoverflow.com/questions/4568580/python-glob-multiple-filetypes
[07:11:20] *** Joins: matsaman (~matsaman@user/matsaman)
[07:13:14] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[07:13:33] *** Quits: rany_ (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[07:13:51] *** Joins: rany (~rany@user/rany)
[07:14:19] <cluelessperson> Wafficus, I would probably os.walk  and then check the extension rather than globbing repeatedly, but it's a bit harder.
[07:14:43] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:15:14] <cluelessperson> Wafficus, Pathlib supports just grabbing the filename and/or extension, just use that functionality.
[07:16:12] <cluelessperson> Wafficus, I suggest looking up "f strings" and simplifying your html
[07:16:39] <cluelessperson> Wafficus, I would suggest processing things first,  THEN replying with a simple template.
[07:17:12] <cluelessperson> Wafficus, if processing things takes too long and causes for the page to load slowly, you can put that into another "api" call.
[07:17:43] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (Quit: I Break D Ert)
[07:18:03] *** Joins: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[07:20:57] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[07:22:25] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[07:23:48] <Wafficus> I see, will write that down
[07:24:01] <Wafficus> however
[07:24:05] <Wafficus> its probably just easier to glob twice
[07:24:09] *** Joins: Betal (~Betal@user/betal)
[07:24:10] <Wafficus> I just need .jpg and .png
[07:24:24] <Wafficus> so if I could figure out what type of object that is, maybe .append(), maybe .extend() not sure
[07:24:54] <jochum> Wafficus: glob twice with the second solution from your so sounds neat
[07:25:28] <jochum> Wafficus: I'm not sure, if you have lots of files glob.twice will be slower as you run twice through everything
[07:26:37] <jochum> Wafficus: and if you concern about speed you should look at the answer of cluelessperson
[07:27:04] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[07:27:20] *** Joins: Betal_ (~Betal@user/betal)
[07:28:52] *** Quits: Betal (~Betal@user/betal) (Ping timeout: 245 seconds)
[07:29:04] <Wafficus> gotcha, we'll see
[07:29:20] <Wafficus> I think for now, I just want to at least get the images to appear, for .jpg first, and then worry about a double glob later
[07:30:00] *** Quits: ldm (~ldm@hacksoc/member) (Quit: 3w 6d 23h 59m 13s)
[07:30:32] <cluelessperson> Wafficus, so  right off,   I personally find glob and walk kinda annoying.   They're basic things that aren't made for what you're doing as much,  so instead of fiddling with working with them, I'd just use the simpler thing and make that obivous
[07:31:31] <cluelessperson> for thing in os.scandir(p):    if thing.is_file() and thing.endswidth(".jpg"):  print(thing)
[07:32:02] *** Quits: dba (uid502594@id-502594.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[07:32:22] <cluelessperson> glob is useful in some cases, but you don't want to be trying to fit your "programming logic" into the globbing/os function.    Just use the programming language for that.
[07:33:08] *** Joins: ldm (~ldm@hacksoc/member)
[07:33:27] <cluelessperson> Wafficus, I'm happy to guide you through these sorts of things. :)
[07:34:34] *** Betal_ is now known as Betal
[07:36:21] <Wafficus> that's the thing
[07:36:37] <Wafficus> its kind of like a necessity project since I don't really want any Wordpress type bloat, just wanted a basic image dump site
[07:37:04] <Wafficus> but yeah, I don't often code as much anymore, so I'll make some segmented headway, and then am like "eh, time to piece this together like legos with Stackoverflow posts"
[07:37:08] <cluelessperson> Sure, so far my suggestions have been pure simple python
[07:37:33] <Wafficus> anyway, I know what I"m stuck on, but I'll have to somehow iron it out or something, we'll see
[07:38:19] <Wafficus> well, string replacement worked so that's good
[07:38:26] <Wafficus> now to just glob for pngs somehow and I'm set
[07:39:16] <Wafficus> https://bpa.st/7M3Q
[07:39:18] <Wafficus> latest code ^
[07:43:10] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:45:39] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 244 seconds)
[07:48:27] *** Quits: hafat (~hafat@95.70.167.173) (Ping timeout: 245 seconds)
[07:48:59] *** Joins: ice9 (~ice9@user/ice9)
[07:51:42] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:53:59] *** Joins: HaMsTeRs (~mx@49.130.89.196)
[07:54:24] *** Quits: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619) (Remote host closed the connection)
[07:54:56] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[07:55:09] <jochum> Wafficus: you write your own html generator?
[07:55:14] *** Joins: rany (~rany@user/rany)
[07:55:56] *** Quits: riposte (~finalripo@2403-5800-3200-5c02--310.ip6.aussiebb.net) (Ping timeout: 258 seconds)
[07:56:10] <noarb-> is there a way to tell if a script was installed via pip? I have /home/<usr>/.local/bin/tmuxp (for example) on Ubuntu. Is there a way I can check if that's a pip installation?
[07:56:22] <Wafficus> jochum: its just writing to a html file
[07:56:25] *** Joins: maxking (~maxking@user/maxking)
[07:56:28] <Wafficus> *existing
[07:56:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:57:41] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 250 seconds)
[07:57:44] <jochum> Wafficus: when you use pprint.pprint(list(generator)) you get an actual output
[07:57:46] <matsaman> noarb-: what does 'file' say about it?
[07:58:16] <noarb-> Python script, ASCII text executable
[07:58:18] *** Quits: astrocat (~astrocat@112.134.8.135) (Ping timeout: 256 seconds)
[07:58:27] <jochum> noarb-: apt doesn't install in /home
[07:59:29] <jochum> noarb-: to be true, someone told me that some days ago.
[07:59:48] <noarb-> I think I installed this with pip --user using the system python. I have a vague memory of that
[08:00:26] <jochum> noarb-: head -n1 give's you the executer
[08:00:34] <matsaman> like with pipx?
[08:01:37] <jochum> executer as in shebang
[08:03:10] <cluelessperson> jochum, are you familiar with virtual environments?
[08:03:20] <jochum> cluelessperson: ofc
[08:03:36] <cluelessperson> oh sorry
[08:03:38] <cluelessperson> noarb-, ^
[08:03:55] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[08:07:27] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[08:09:17] *** Quits: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Ping timeout: 245 seconds)
[08:09:41] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[08:10:29] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[08:10:42] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[08:14:12] *** Joins: astrocat (~astrocat@112.134.8.135)
[08:19:50] *** Joins: i0e (~is0ke3@user/is0ke3)
[08:20:07] *** Quits: Quaking (~Quaking@c-98-223-238-153.hsd1.in.comcast.net) (Ping timeout: 245 seconds)
[08:21:30] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:d013:6cb2:eda6:d615)
[08:25:04] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 258 seconds)
[08:25:07] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 245 seconds)
[08:27:54] *** Joins: me-sudoer-dentne (~me-sudoer@45.112.144.181)
[08:28:44] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[08:29:48] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[08:29:57] *** Joins: rany_ (~rany@user/rany)
[08:30:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[08:31:22] *** Quits: rany (~rany@user/rany) (Ping timeout: 245 seconds)
[08:32:41] *** Joins: i0e (~is0ke3@user/is0ke3)
[08:34:15] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-c16b-4385-b975-2303.res6.spectrum.com) (Read error: Connection reset by peer)
[08:35:09] *** Quits: stdout (~stdout@50.115.255.72) (Quit: Leaving)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:38:44] *** Joins: mickey84 (~user@user/mickey)
[08:39:03] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[08:40:25] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 244 seconds)
[08:40:26] *** mickey84 is now known as mickey8
[08:41:28] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[08:48:34] *** Joins: riposte (~finalripo@2403-5800-3200-5c02-20c-29ff-fe65-f69c.ip6.aussiebb.net)
[08:49:38] *** Quits: riposte (~finalripo@2403-5800-3200-5c02-20c-29ff-fe65-f69c.ip6.aussiebb.net) (Client Quit)
[08:50:22] *** Quits: emika (~emika@83.136.182.82) (Ping timeout: 258 seconds)
[08:51:13] *** Joins: emika (~emika@185.207.249.212)
[08:53:16] *** Joins: khrbt (~khrbt@user/khrbt)
[08:58:47] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:04:34] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[09:06:01] *** Joins: iflema (~ian@user/iflema)
[09:06:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:07:24] *** Quits: Wafficus (~user@70.126.240.148) (Quit: ERC (IRC client for Emacs 27.2))
[09:09:25] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[09:09:48] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 268 seconds)
[09:10:02] *** Joins: khrbt (~khrbt@user/khrbt)
[09:11:56] *** Quits: khrbt (~khrbt@user/khrbt) (Client Quit)
[09:12:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[09:17:13] *** Joins: sebastianos (~sebastian@user/sebastianos)
[09:18:09] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[09:18:58] *** Joins: khrbt (~khrbt@user/khrbt)
[09:22:20] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Gone.)
[09:23:06] *** Quits: khrbt (~khrbt@user/khrbt) (Ping timeout: 240 seconds)
[09:23:38] *** Quits: locrian9 (~mike@cpe-23-240-34-32.socal.res.rr.com) (Quit: leaving)
[09:25:58] *** umamisoup is now known as spacemonkey
[09:26:18] *** spacemonkey is now known as spacemonkey_
[09:26:31] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 250 seconds)
[09:26:43] *** Joins: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net)
[09:27:01] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:27:44] *** Quits: Orimendix (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net) (Quit: Leaving)
[09:28:32] *** spacemonkey_ is now known as umamisoup
[09:28:49] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (*.net *.split)
[09:28:49] *** Quits: iflema (~ian@user/iflema) (*.net *.split)
[09:28:49] *** Quits: astrocat (~astrocat@112.134.8.135) (*.net *.split)
[09:28:50] *** Quits: Dexel (~Arco@68.40.3.32) (*.net *.split)
[09:28:50] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[09:28:50] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[09:28:50] *** Quits: vlm (~vlm@user/vlm) (*.net *.split)
[09:28:50] *** Quits: bigRoo (~user@131.236.55.20) (*.net *.split)
[09:28:50] *** Quits: digilink (~digilink@user/digilink) (*.net *.split)
[09:28:50] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (*.net *.split)
[09:28:50] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (*.net *.split)
[09:28:50] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[09:28:50] *** Quits: mkoskar (~mkoskar@user/mkoskar) (*.net *.split)
[09:28:50] *** Quits: jbe (~hellother@lysator/root/jbe) (*.net *.split)
[09:28:50] *** Quits: EGH (~EGH@185.25.195.104) (*.net *.split)
[09:28:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[09:28:50] *** Quits: knipster (~knipster@user/knipster) (*.net *.split)
[09:28:50] *** Quits: kenwoodfox (~quassel@user/kenwoodfox) (*.net *.split)
[09:28:50] *** Quits: uhu (~uhu@2a01:4f9:c010:1087::2) (*.net *.split)
[09:28:50] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[09:28:50] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[09:28:50] *** Quits: DerHorst (~derhorst@181.206.208.35.bc.googleusercontent.com) (*.net *.split)
[09:28:50] *** Quits: icy (~icy@user/icy) (*.net *.split)
[09:28:50] *** Quits: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54) (*.net *.split)
[09:28:50] *** Quits: Maikel (~Maikel@130.61.63.136) (*.net *.split)
[09:28:50] *** Quits: skreech (~skreech@user/skreech) (*.net *.split)
[09:28:50] *** Quits: twobitsprite (~twobitspr@195.181.171.244) (*.net *.split)
[09:28:50] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[09:28:50] *** Quits: fengshaun (~fengshaun@68.69.214.210) (*.net *.split)
[09:28:50] *** Quits: nbin (~nbin@user/nbin) (*.net *.split)
[09:28:50] *** Quits: JacobFrost (sid494713@tinside.irccloud.com) (*.net *.split)
[09:28:50] *** Quits: pacbard (~pacbard@user/pacbard) (*.net *.split)
[09:28:50] *** Quits: erica (~erica@user/erica) (*.net *.split)
[09:28:50] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (*.net *.split)
[09:28:50] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (*.net *.split)
[09:28:50] *** Quits: irrgit (~irrgit@192.241.175.183) (*.net *.split)
[09:28:50] *** Quits: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com) (*.net *.split)
[09:28:50] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (*.net *.split)
[09:28:50] *** Quits: lambda (~weechat@cyka.blyat.vodka) (*.net *.split)
[09:28:50] *** Quits: flimsypondreed[m (~flimsypon@2001:470:69fc:105::cd71) (*.net *.split)
[09:28:50] *** Quits: soft (~soft-matr@2001:470:69fc:105::c75) (*.net *.split)
[09:28:50] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (*.net *.split)
[09:28:50] *** Quits: neolem (~neolem@2001:470:69fc:105::c675) (*.net *.split)
[09:28:50] *** Quits: KeiraT (~k@lulzsec.co.uk) (*.net *.split)
[09:28:51] *** Quits: Allegretto (~allegrett@94-21-172-215.pool.digikabel.hu) (*.net *.split)
[09:28:51] *** Quits: morrigan (~m0rr1gan@user/m0rr1gan) (*.net *.split)
[09:28:51] *** Quits: ornxka (~ornxka@user/ornxka) (*.net *.split)
[09:28:51] *** Quits: michaelis (~michaelis@193.183.209.17) (*.net *.split)
[09:28:51] *** Quits: Affliction (affliction@user/affliction) (*.net *.split)
[09:28:51] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[09:28:51] *** Quits: fflam (~mdt@ip70-179-20-127.sd.sd.cox.net) (*.net *.split)
[09:28:51] *** Quits: milosz (~milosz@user/milosz) (*.net *.split)
[09:28:51] *** Quits: dbg (~dbg@user/dbg) (*.net *.split)
[09:28:51] *** Quits: Milos (~Milos@user/milos) (*.net *.split)
[09:28:51] *** Quits: doc (~doc@user/doc) (*.net *.split)
[09:28:51] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[09:28:51] *** Quits: cyberpear (uid364019@fedora/cyberpear) (*.net *.split)
[09:28:51] *** Quits: oprypin (~irc@pryp.in) (*.net *.split)
[09:28:51] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (*.net *.split)
[09:28:51] *** Quits: snalty (~Shhh@user/snalty) (*.net *.split)
[09:28:51] *** Quits: gaken (~gaken@user/galen) (*.net *.split)
[09:28:51] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (*.net *.split)
[09:28:51] *** Quits: sus (thelounge@user/zeromomentum) (*.net *.split)
[09:28:51] *** Quits: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (*.net *.split)
[09:28:51] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (*.net *.split)
[09:29:08] *** Joins: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net)
[09:29:08] *** Joins: iflema (~ian@user/iflema)
[09:29:08] *** Joins: astrocat (~astrocat@112.134.8.135)
[09:29:08] *** Joins: Dexel (~Arco@68.40.3.32)
[09:29:08] *** Joins: dzz007 (~dzz007@user/dzz007)
[09:29:08] *** Joins: vlm (~vlm@user/vlm)
[09:29:08] *** Joins: bigRoo (~user@131.236.55.20)
[09:29:08] *** Joins: digilink (~digilink@user/digilink)
[09:29:08] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[09:29:08] *** Joins: raydeeam (uid325131@dgplug/raydeeam)
[09:29:08] *** Joins: BUSY (~BUSY@user/busy)
[09:29:08] *** Joins: uhu (~uhu@2a01:4f9:c010:1087::2)
[09:29:08] *** Joins: mkoskar (~mkoskar@user/mkoskar)
[09:29:08] *** Joins: jbe (~hellother@lysator/root/jbe)
[09:29:08] *** Joins: EGH (~EGH@185.25.195.104)
[09:29:08] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[09:29:08] *** Joins: knipster (~knipster@user/knipster)
[09:29:08] *** Joins: kenwoodfox (~quassel@user/kenwoodfox)
[09:29:08] *** Joins: soft (~soft-matr@2001:470:69fc:105::c75)
[09:29:08] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[09:29:08] *** Joins: Isthmusi (~Isthmus@user/isveni)
[09:29:08] *** Joins: DerHorst (~derhorst@181.206.208.35.bc.googleusercontent.com)
[09:29:08] *** Joins: icy (~icy@user/icy)
[09:29:08] *** Joins: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54)
[09:29:08] *** Joins: Maikel (~Maikel@130.61.63.136)
[09:29:08] *** Joins: skreech (~skreech@user/skreech)
[09:29:08] *** Joins: twobitsprite (~twobitspr@195.181.171.244)
[09:29:08] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[09:29:08] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[09:29:08] *** Joins: nbin (~nbin@user/nbin)
[09:29:08] *** Joins: JacobFrost (sid494713@tinside.irccloud.com)
[09:29:08] *** Joins: pacbard (~pacbard@user/pacbard)
[09:29:08] *** Joins: erica (~erica@user/erica)
[09:29:08] *** Joins: ornxka (~ornxka@user/ornxka)
[09:29:08] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[09:29:08] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[09:29:08] *** Joins: irrgit (~irrgit@192.241.175.183)
[09:29:08] *** Joins: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com)
[09:29:08] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[09:29:08] *** Joins: lambda (~weechat@cyka.blyat.vodka)
[09:29:08] *** Joins: flimsypondreed[m (~flimsypon@2001:470:69fc:105::cd71)
[09:29:08] *** Joins: neolem (~neolem@2001:470:69fc:105::c675)
[09:29:08] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[09:29:08] *** Joins: KeiraT (~k@lulzsec.co.uk)
[09:29:08] *** Joins: Allegretto (~allegrett@94-21-172-215.pool.digikabel.hu)
[09:29:08] *** Joins: morrigan (~m0rr1gan@user/m0rr1gan)
[09:29:08] *** Joins: michaelis (~michaelis@193.183.209.17)
[09:29:08] *** Joins: Affliction (affliction@user/affliction)
[09:29:08] *** Joins: Teacup (~teacup@user/teacup)
[09:29:08] *** Joins: fflam (~mdt@ip70-179-20-127.sd.sd.cox.net)
[09:29:08] *** Joins: milosz (~milosz@user/milosz)
[09:29:08] *** Joins: dbg (~dbg@user/dbg)
[09:29:08] *** Joins: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[09:29:08] *** Joins: Milos (~Milos@user/milos)
[09:29:08] *** Joins: doc (~doc@user/doc)
[09:29:08] *** Joins: tabakhase (tabakhase@user/tabakhase)
[09:29:08] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[09:29:08] *** Joins: oprypin (~irc@pryp.in)
[09:29:08] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[09:29:08] *** Joins: snalty (~Shhh@user/snalty)
[09:29:08] *** Joins: gaken (~gaken@user/galen)
[09:29:08] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[09:29:08] *** Joins: sus (thelounge@user/zeromomentum)
[09:29:08] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[09:29:15] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Max SendQ exceeded)
[09:29:15] *** Quits: Teacup (~teacup@user/teacup) (Max SendQ exceeded)
[09:29:30] <skered> Is there a safe way to install pip in a venv using the system pip with a platform's python (cygwin) that has a broken ensurepip?
[09:29:30] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[09:29:32] *** Joins: Teacup (~teacup@user/teacup)
[09:30:28] *** Joins: stranac (~stranac@195.29.239.126)
[09:30:36] <skered> I was thinking with pip-install's --target however I think that might trying to move the system install to the new location.
[09:31:03] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[09:31:03] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (*.net *.split)
[09:31:03] *** Quits: wbn (~wbn@user/wbn) (*.net *.split)
[09:31:03] *** Quits: zopsi (~zopsi@irc.dir.ac) (*.net *.split)
[09:31:03] *** Quits: somlis (~somlis@user/somlis) (*.net *.split)
[09:31:03] *** Quits: BigShip (~BigShip@user/bigship) (*.net *.split)
[09:31:03] *** Quits: sirn (~sirn@user/sirn) (*.net *.split)
[09:31:03] *** Quits: zwindl (~abc@user/abc) (*.net *.split)
[09:31:03] *** Quits: asix (~Anders@user/asix) (*.net *.split)
[09:31:03] *** Quits: GNUtoo (~GNUtoo@cyberdimension.org) (*.net *.split)
[09:31:03] *** Quits: simplicity (~yti@user/simplicity) (*.net *.split)
[09:31:03] *** Quits: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com) (*.net *.split)
[09:31:03] *** Quits: shan (shan@user/shan) (*.net *.split)
[09:31:03] *** Quits: ferros (~ferros@vps-eacaba1b.vps.ovh.net) (*.net *.split)
[09:31:03] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[09:31:03] *** Quits: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com) (*.net *.split)
[09:31:03] *** Quits: topoi (~topoi@user/topoi) (*.net *.split)
[09:31:03] *** Quits: fleabag (~sirpengi@li587-65.members.linode.com) (*.net *.split)
[09:31:03] *** Quits: lystra (~lystra@d53-64-11-169.nap.wideopenwest.com) (*.net *.split)
[09:31:03] *** Quits: sivoais (~zaki@199.19.225.239) (*.net *.split)
[09:31:03] *** Quits: rigid (~rigid@user/rigid) (*.net *.split)
[09:31:04] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (*.net *.split)
[09:31:04] *** Quits: catdog (~quassel@birdperson.tuxzone.org) (*.net *.split)
[09:31:04] *** Quits: godlike (~godlike@user/godlike) (*.net *.split)
[09:31:04] *** Quits: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC) (*.net *.split)
[09:31:04] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[09:31:04] *** Quits: the4oo4- (~the4oo4@shenzhou.whatbox.ca) (*.net *.split)
[09:31:04] *** Quits: dob1 (~dob1@user/dob1) (*.net *.split)
[09:31:04] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[09:31:04] *** Quits: dimaa (~binchicki@165.22.169.69) (*.net *.split)
[09:31:04] *** Quits: Nei (~ailin@user/nemui) (*.net *.split)
[09:31:04] *** Quits: MightyMu (~MightyMu@104.131.138.31) (*.net *.split)
[09:31:04] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[09:31:04] *** Quits: mgubyt (u@mgub.yt) (*.net *.split)
[09:31:04] *** Quits: w1kl4s (~w1kl4s@user/w1kl4s) (*.net *.split)
[09:31:04] *** Quits: Techcable (~Techcable@168.235.93.147) (*.net *.split)
[09:31:04] *** Quits: {4144} (~{4144}@46.56.64.31) (*.net *.split)
[09:31:04] *** Quits: bdeshi (~bdeshi@bdeshi.space) (*.net *.split)
[09:31:04] *** Quits: zinc (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[09:31:04] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[09:31:04] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (*.net *.split)
[09:31:04] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (*.net *.split)
[09:31:04] *** Quits: paperManu (~paperManu@138.197.128.151) (*.net *.split)
[09:31:04] *** Quits: FunkyBob (~curtis@vhost3.tinbrain.net) (*.net *.split)
[09:31:04] *** Quits: mrec (~markus@user/mrec) (*.net *.split)
[09:31:04] *** Quits: _janus (~janus@blotter.ld-linux.so) (*.net *.split)
[09:31:04] *** Quits: Dan39 (~dan@user/dan39) (*.net *.split)
[09:31:04] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[09:31:04] *** Quits: encukou (~quassel@nat-pool-brq-t.redhat.com) (*.net *.split)
[09:31:04] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[09:31:04] *** Quits: ringo_ (~ringo@157.230.117.128) (*.net *.split)
[09:31:04] *** Quits: az (az@user/azz) (*.net *.split)
[09:31:04] *** Quits: Alan (~alan@user/alan) (*.net *.split)
[09:31:04] *** Quits: synbiose (~synbiose@user/synbiose) (*.net *.split)
[09:31:04] *** Quits: ochronus (~ochronus@user/ochronus) (*.net *.split)
[09:31:04] *** Quits: Khoyo (~khoyo@user/khoyo) (*.net *.split)
[09:31:04] *** Quits: voldial (~user@user/voldial) (*.net *.split)
[09:31:04] *** Joins: the4oo4 (~the4oo4@shenzhou.whatbox.ca)
[09:31:05] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[09:31:06] *** Joins: GNUtoo_ (~GNUtoo@cyberdimension.org)
[09:31:11] <Wulf> skered: you could copy/symlink pip into your venv
[09:31:15] *** Joins: FunkyBob_ (~curtis@vhost3.tinbrain.net)
[09:31:20] *** Joins: mbrndtgn5 (~mbrndtgn@undecidable.de)
[09:31:20] *** Joins: mgubyt_ (u@mgub.yt)
[09:31:25] *** Joins: khrbt (~khrbt@user/khrbt)
[09:31:25] *** Joins: wbn_ (~wbn@user/wbn)
[09:31:26] *** Joins: Techcable_ (~Techcable@168.235.93.147)
[09:31:27] *** Joins: axisys_ (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com)
[09:31:38] *** Joins: encukou_ (~quassel@nat-pool-brq-t.redhat.com)
[09:31:43] *** Joins: catdog (~quassel@2001:470:50f7:cdcd::cd1)
[09:31:52] <skered> Currently after activating the venv using 'curl ...pypa.io... | python'  I don't like it but it works
[09:31:55] *** Joins: BigShip (~BigShip@user/bigship)
[09:31:57] *** Joins: lystra (~lystra@d53-64-11-169.nap.wideopenwest.com)
[09:31:59] *** Joins: thekingofbandit (thekingofb@user/thekingofbandit)
[09:32:09] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Ping timeout: 250 seconds)
[09:32:11] *** Joins: Nei (~ailin@user/nemui)
[09:32:16] *** Joins: roguelazer (~jbrown@sietchtabr.roguelazer.net)
[09:32:16] *** Joins: w1kl4s (~w1kl4s@user/w1kl4s)
[09:32:18] *** Joins: rigid (~rigid@user/rigid)
[09:32:21] *** Joins: erry (~erry@errietta.me)
[09:32:21] *** Joins: dob1 (~dob1@user/dob1)
[09:32:21] *** Joins: phryk (~totallyno@user/phryk)
[09:32:22] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (Ping timeout: 256 seconds)
[09:32:23] *** Joins: {4144} (~{4144}@46.56.64.31)
[09:32:23] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[09:32:23] *** Joins: _janus (~janus@blotter.ld-linux.so)
[09:32:23] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[09:32:25] *** Joins: sirn (~sirn@user/sirn)
[09:32:28] *** Joins: i0e (~is0ke3@user/is0ke3)
[09:32:28] *** Joins: Spydar007 (~spydar007@user/spydar007)
[09:32:35] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Ping timeout: 240 seconds)
[09:32:35] *** Quits: binarymutt[m] (~binarymut@user/binarymutt) (Ping timeout: 250 seconds)
[09:32:35] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (Ping timeout: 250 seconds)
[09:32:35] *** Quits: gloomy (~glooomyma@2001:470:69fc:105::ce00) (Ping timeout: 250 seconds)
[09:32:38] *** Quits: orbatos[m] (~orbatos@user/orbatos) (Ping timeout: 245 seconds)
[09:32:39] *** Joins: abc_ (~abc@user/abc)
[09:32:39] <skered> Wulf: I would have to change the shebang line if I did that?
[09:32:40] *** Joins: bdeshi (~bdeshi@bdeshi.space)
[09:32:47] *** Joins: ringo_ (~ringo@157.230.117.128)
[09:32:56] *** Quits: jwon (~jwon@user/jwon) (Ping timeout: 256 seconds)
[09:33:00] *** Quits: flimsypondreed[m (~flimsypon@2001:470:69fc:105::cd71) (Ping timeout: 272 seconds)
[09:33:01] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (Ping timeout: 272 seconds)
[09:33:01] *** Quits: neolem (~neolem@2001:470:69fc:105::c675) (Ping timeout: 272 seconds)
[09:33:02] *** Joins: godlike (~godlike@user/godlike)
[09:33:03] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Ping timeout: 245 seconds)
[09:33:03] *** Quits: aifa[m] (~aifamatri@2001:470:69fc:105::d06e) (Ping timeout: 276 seconds)
[09:33:04] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (Ping timeout: 276 seconds)
[09:33:04] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Ping timeout: 276 seconds)
[09:33:14] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (Ping timeout: 268 seconds)
[09:33:14] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (Ping timeout: 268 seconds)
[09:33:14] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (Ping timeout: 268 seconds)
[09:33:30] *** Quits: psydroid (~psydroid@user/psydroid) (Ping timeout: 256 seconds)
[09:33:34] *** Quits: Alpha3031 (~alpha3031@wikipedia/alpha3031) (Ping timeout: 272 seconds)
[09:33:35] *** Joins: shan (shan@user/shan)
[09:33:38] *** Joins: MightyMu (~MightyMu@104.131.138.31)
[09:33:39] *** Quits: soft (~soft-matr@2001:470:69fc:105::c75) (Ping timeout: 272 seconds)
[09:33:42] *** Joins: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com)
[09:33:45] <skered> I want to fix ensurepip for cygwin but thought I might have the same issue for cases where the system didn't have ensurepip.
[09:34:18] *** Joins: paperManu (~paperManu@138.197.128.151)
[09:34:18] *** Quits: khrbt (~khrbt@user/khrbt) (Client Quit)
[09:34:50] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[09:36:39] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[09:36:40] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[09:36:41] *** Joins: jfb4 (~jfb4@178.62.2.68)
[09:36:44] *** Joins: y1n (~y1n@84-115-64-121.wifi.dynamic.surfer.at)
[09:36:44] *** Joins: sud (~sud@user/sud)
[09:36:44] *** Joins: adium (adium@user/adium)
[09:36:50] *** Joins: arti (~arti@2001:bb8:4008:2020::f)
[09:36:51] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[09:36:57] *** Joins: meti (~meti@user/meti)
[09:36:57] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[09:36:57] *** Joins: rookie101 (~rookie@207.154.204.166)
[09:36:58] *** Joins: DCTWD (~dc@uz.utmappro.com)
[09:37:02] *** Joins: erhandsome (~erhandsom@user/erhandsome)
[09:37:17] *** Joins: kgz (~kragniz@nyaa.kragniz.eu)
[09:37:26] *** Quits: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 272 seconds)
[09:37:32] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[09:37:41] *** Joins: Ara (~Ara@user/ara)
[09:37:55] *** Joins: HenryTheLongshot (~Henry@46.101.4.181)
[09:38:11] *** Joins: dvx (~dvx@185.63.97.64)
[09:38:30] *** Server sets mode: +Ccnrtf #python-unregistered
[09:39:49] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Ping timeout: 258 seconds)
[09:40:00] *** Joins: Moyst (~moyst@user/moyst)
[09:40:05] *** Joins: chilversc (~chilversc@user/chilversc)
[09:40:06] *** Joins: thib (~thib@wikimedia/Thibaut120094)
[09:40:08] *** Joins: bambams (~bambams@user/bambams)
[09:40:10] *** Joins: wintrmute (~wintrmute@bit.pappanaka.com)
[09:40:18] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 256 seconds)
[09:40:52] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[09:41:15] *** Joins: khrbt (~khrbt@user/khrbt)
[09:41:19] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[09:42:35] *** Joins: zerok (~zerok@user/zerok)
[09:43:05] *** Quits: khrbt (~khrbt@user/khrbt) (Client Quit)
[09:43:23] *** Joins: ammar2 (admin@i.diddled.with.the.opers.so.they.klined.me)
[09:46:12] *** Joins: s1b1 (~s1b1@user/s1b1)
[09:47:38] <skered> "No module named pip"... I would need to include the system site-package in the venv for that to work?
[09:48:20] *** Quits: gambl0re (~gambl0re@24.140.237.124) (Ping timeout: 252 seconds)
[09:48:33] <FunkyBob_> a properly formed venv should have all it needs
[09:48:41] <FunkyBob_> skered: are you sure the system python also has pip?
[09:48:53] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[09:49:46] <skered> FunkyBob_: Yes.  I have pip3.8 and python38-pip is installed.
[09:49:51] *** FunkyBob_ is now known as FunkyBob
[09:50:06] <FunkyBob> how did you create the venv?
[09:50:19] <skered> python3.8 -m venv testing.
[09:50:21] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[09:50:29] <skered> Sourced testing/bin/activate
[09:50:34] *** Joins: JanC (~janc@user/janc)
[09:50:54] <FunkyBob> and then "pip" ?
[09:51:19] <skered> No pip but I do have pip3.8 (from the system)
[09:51:24] <skered> er sorry
[09:51:26] <skered> duh..
[09:51:35] <skered> python3.8 -m venv --without-pip testing
[09:51:50] <skered> ensurepip from cygwin python3.x packages appears to be broken
[09:52:02] <skered> That's why I don't have pip in the venv.
[09:52:23] *** Joins: Ekho (~Ekho@user/ekho)
[09:52:41] <FunkyBob> I would have excpected after activiating your venv just 'pip' would suffice
[09:52:55] <FunkyBob> but cygwin... well
[09:53:11] <skered> Something with it looking for versions from wheels that don't exist in /usr/share/python-wheels/
[09:53:20] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[09:53:48] *** Joins: trashbird (~trashbird@user/trashbird)
[09:54:24] <skered> So after I activate it looks like if I change pyvenv.cfg include-system-site-packages to true then I can ... -m pip.
[09:55:29] <skered> However, before I would use the pip bootstrap script from https://bootstrap.pypa.io/get-pip.py to install pip into the venv.
[09:56:04] <skered> Thought maybe there was some magicly way to get it install via system pip instead having to download from the Internet and pipe into a program.
[09:56:16] <matsaman> you don't get a 'pip' executable out of python -m venv foo; source foo/bin/activate ?
[09:56:53] <skered> matsaman: No, since without --without-pip venv init. fails
[09:57:41] <skered> Error: Command '['.../python3.8.exe', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 1.
[09:58:09] <skered> So I need to include --without-pip with ... -m venv ...
[09:58:58] *** Quits: astrocat (~astrocat@112.134.8.135) (Ping timeout: 272 seconds)
[09:59:06] <matsaman> so you're trying to programmatically create a venv via python via cygwin
[09:59:44] <skered> Well via bash but yes.
[10:00:16] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:01:03] *** Joins: MantisToboggan (~MantisTob@107.175.105.157)
[10:01:04] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Client Quit)
[10:01:06] <matsaman> mmm
[10:01:10] *** Joins: niko (~niko@libera/staff/niko)
[10:01:11] <MantisToboggan> hello
[10:01:21] <matsaman> I've got a cygwin install here if you want to share your script I can give it a whirl
[10:01:24] <matsaman> hi mantis
[10:01:40] <skered> matsaman: The script isn't the issue.  It's ensurepip.
[10:01:47] <skered> or so think..
[10:02:13] <skered> Does 'python3.x -m venv dir'  work for you?
[10:02:13] <matsaman> ensurepip after the venv is activated?
[10:02:15] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:02:27] <matsaman> yeah never had an issue with that via cygwin
[10:02:44] <skered> ok well then there must be something wrong with my installation.
[10:02:54] <matsaman> or mine is old, etc.
[10:02:59] <skered> What version of python?
[10:03:18] <skered> matsaman: Maybe upate whatever 3.x you have and try again.
[10:03:31] <skered> Do you have /usr/share/python-wheels/ ?
[10:03:36] <matsaman> 3.8.10
[10:03:54] <matsaman> yes with: pip-19.2.3-py2.py3-none-any.whl  setuptools-41.2.0-py2.py3-none-any.whl  wheel-0.36.2-py2.py3-none-any.whl
[10:06:10] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[10:06:32] <skered> ok that's what cygwin pyton3.8 is expecting.. however mine doesn't exist.
[10:06:57] <matsaman> I'm looking in the installer, says I have...
[10:07:42] <skered> 3.8.10-1 is the latest.
[10:08:19] <skered> er well for python38 however pip is 21.1.1-1 and setuptools is 51.1.1-1
[10:08:53] <matsaman> python-pip-wheel, python27-pip, python36-pip, python38-pip, python-setuptools-wheel, python-wheel-wheel, python2, python27, python27-pip, python27-setuptools, python27-virtualenv, python3, python3-devel, python36, python36-devel, python36-pip, python36-setuptools, python36-virtualenv, python36-wheel, python38, python38-devel, python38-pip, python38-setuptools
[10:09:17] <jochum> ^ whats that list?
[10:09:26] *** Joins: node1 (~node1@user/node1)
[10:09:27] <matsaman> cygwin package names
[10:09:29] <skered> cygcheck.exe -l python38-pip | fgrep /usr/share/
[10:09:43] <skered> Does that have anyout out?
[10:10:00] <matsaman> /usr/share/doc/python38-pip/AUTHORS.txt; /usr/share/doc/python38-pip/LICENSE.txt; /usr/share/doc/python38-pip/NEWS.rst; /usr/share/doc/python38-pip/README.rst
[10:10:31] <matsaman> I'm not sure those are doing much, since I've been using -m venv
[10:10:47] <matsaman> oh no I do see a pip3 & pip3.8 exec
[10:10:56] <matsaman> was thinking of virtualenv =)
[10:11:13] * jochum looks at the package list and see 3.6 + 3.8 and 2.7 stuff
[10:11:22] <skered> matsaman: cygcheck.exe -f /usr/share/python-wheels/pip-19.2.3-py2.py3-none-any.whl
[10:11:23] <jochum> I have no clue about cygwin
[10:11:26] <skered> What owns that file?
[10:11:28] <matsaman> jochum: it's all separated
[10:11:46] <matsaman> skered: python-pip-wheel-19.2.3-1
[10:12:24] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 258 seconds)
[10:12:26] *** Joins: neolem (~neolem@2001:470:69fc:105::c675)
[10:13:07] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:ac0a:bb04:1852:c943)
[10:14:18] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Ping timeout: 256 seconds)
[10:15:00] <skered> Guess what... vevn now just works!
[10:15:09] <MantisToboggan> awesome!
[10:15:19] <matsaman> don't remember if I installed that manually of if it was a dep <shrug>
[10:15:23] <matsaman> but at least it's workin'
[10:15:26] <matsaman> or* if
[10:15:42] <skered> Had to install python-pip-wheel and python-setuptools-wheel to get 3.8's vevn to install ensure pip
[10:15:53] <matsaman> good to know
[10:15:54] <jochum> :-)
[10:15:57] <jochum> Very nice
[10:16:09] <MantisToboggan> anyone working on any cool projects rn?
[10:16:21] <matsaman> I'm working on staying positive...
[10:16:38] <MantisToboggan> thats a hard project these days
[10:16:38] <jochum> I'm working on helping people to learn :)
[10:16:51] <matsaman> I miss pyweek every time, I never mark my calendar
[10:17:11] *** Quits: Dexel (~Arco@68.40.3.32) (Remote host closed the connection)
[10:17:26] <matsaman> want to try godot with pure python still instead of gdscript
[10:18:26] <MantisToboggan> nice
[10:19:24] <matsaman> you?
[10:19:36] <matsaman> so many unfinished projects over here =P
[10:19:46] *** Joins: yogoyo (~paddy@user/yogoyo)
[10:19:54] *** Joins: i0e (~is0ke3@user/is0ke3)
[10:20:13] <MantisToboggan> trying to get linux setup on my laptop.  dual gpu fml
[10:21:11] <jochum> join #linux maybe someone has experience with dual gpu's.
[10:21:28] <skered> matsaman: Thanks for helping me flush that out.
[10:21:40] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[10:22:04] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[10:22:16] <MantisToboggan> matsaman: also been looking at implementing this paper https://www.cs.ryerson.ca/~aharley/vis/harley_vis_isvc15.pdf.  an implementation already exists but im planning on doing it with a different CV model.  hopefully should make a nice resume project
[10:22:46] <skered> Everything just works now... all bashrc's, venv frontend, and tmux configues.   Had almost zero changes for all this that runs on FreeBSD and EL/Fedora.
[10:22:47] <susam> MantisToboggan: I am working on a web-based mathematics board where we can quickly type of MathJax-LaTeX during and render equations during live meetings. How about you? Are you working on any nice projects?
[10:23:36] <skered> er and macOS.  So add cygwin to the list.
[10:23:54] <MantisToboggan> susam: yea i just finished a research project for the summer involving LIME https://christophm.github.io/interpretable-ml-book/lime.html
[10:24:00] <skered> Next hurdle is coc and nodejs. :(
[10:24:42] *** Quits: Deknos (~someone@user/menace) (Ping timeout: 245 seconds)
[10:24:57] <susam> MantisToboggan: Awesome! That is a huge volume of work.
[10:26:09] <MantisToboggan> thnx.  yea that book is a great reference for anyone interested in learning about interpretable ml.  im hoping to eventually contribute to the repo on github
[10:26:51] <MantisToboggan> i'd share the presentation documents from my summer project but i dont wanna dox myself lol
[10:27:20] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[10:28:06] <Samian> I'm looking at this and I don't see __init__.py in there: https://github.com/facebookresearch/dlrm/tree/master/tricks
[10:28:09] <Samian> why's that?
[10:28:26] <Samian> I thought __init__.py is needed to import
[10:29:24] *** Joins: i0e (~is0ke3@user/is0ke3)
[10:29:37] <MantisToboggan> Samian: https://stackoverflow.com/questions/37139786/is-init-py-not-required-for-packages-in-python-3-3
[10:29:48] <Samian> whoops
[10:30:02] <Samian> well... it's not a package
[10:30:08] <Samian> I don't see an installer
[10:30:34] <Samian> oh it is a package I guess, if package just means folder of folders within
[10:31:07] *** Joins: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27)
[10:31:12] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[10:31:35] <skered> MantisToboggan: Is it just dual monitors or really dual GPUs?
[10:31:51] *** Joins: roniez (~roniez@nixsec.se)
[10:32:02] <MantisToboggan> skered: yea its got a radeon igpu and a 3060
[10:32:03] * jochum was also thinking about dual GPU's LAPTOP??
[10:32:07] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[10:32:10] *** Joins: binarymutt[m] (~binarymut@user/binarymutt)
[10:32:13] *** Joins: penguinbrian (~penguinbr@2001:470:69fc:105::33d2)
[10:32:13] <jochum> ahh
[10:32:24] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[10:33:02] <skered> Mutliple gpus when they're different vneodrs isn't fun.
[10:33:43] * skered only has exp. with multi-gpu when it's all nvidia.
[10:33:49] <zamba> is there a way i can determine which exceptions that could be thrown?
[10:34:07] <zamba> currently i have a bare except, just to catch everything.. but that's of course a bad practice
[10:34:23] *** Joins: ihristov (~ihristov@212-5-158-33.ip.btc-net.bg)
[10:35:57] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[10:35:58] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:36:57] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:ac0a:bb04:1852:c943) (Quit: Leaving)
[10:37:23] <zamba> if that question even makes sense, that is :)
[10:37:29] *** Quits: y1n (~y1n@84-115-64-121.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[10:39:05] <MantisToboggan> just catch any exceptions you might need to handle
[10:39:42] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 245 seconds)
[10:40:03] <matsaman> print('<< QA goes here >>')
[10:40:35] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[10:41:31] *** Quits: node1 (~node1@user/node1) (Killed (NickServ (GHOST command used by node1_!~node1@1.39.188.212)))
[10:42:18] *** Joins: orbatos[m] (~orbatos@user/orbatos)
[10:42:34] *** Joins: gloomy (~gloomy@2001:470:69fc:105::ce00)
[10:44:12] *** Joins: allegary (~allegary@apache/committer/gjm)
[10:44:40] *** Joins: oscarcp (~CastleDwe@217.194.54.110)
[10:45:08] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[10:45:40] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[10:45:50] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:01] *** Joins: mei (~mei@user/mei)
[10:46:07] *** Joins: kosh (~kosh@user/kosh)
[10:46:09] *** Joins: node1 (~node1@user/node1)
[10:46:22] *** Joins: seednode (~seednode@user/seednode)
[10:51:03] *** Joins: y1n (~y1n@84-115-65-27.wifi.dynamic.surfer.at)
[10:51:07] *** Quits: dimbag (~dimbag@ppp-62-76-16-3.ppp.kmv.ru) (Ping timeout: 258 seconds)
[10:53:42] *** Joins: upsala (~zcb@185.213.155.160)
[10:54:00] *** Joins: djapo (~archangel@user/djapo)
[10:56:55] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:57:14] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 272 seconds)
[10:58:35] *** Joins: manti7 (~manti7@176.10.104.94)
[10:59:08] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[10:59:08] *** Lord_of_Life_ is now known as Lord_of_Life
[11:00:04] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[11:00:37] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[11:01:37] *** Joins: jwon (~jwon@user/jwon)
[11:01:48] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[11:01:59] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:03:34] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[11:04:34] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[11:04:53] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[11:05:29] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[11:06:10] *** Joins: gusto (~Augustus@2620:149:e0:6003::76)
[11:06:58] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[11:07:17] *** Quits: MantisToboggan (~MantisTob@107.175.105.157) (Quit: Leaving)
[11:07:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:07:54] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[11:08:22] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[11:09:28] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[11:09:29] *** Joins: flimsypondreed[m (~flimsypon@2001:470:69fc:105::cd71)
[11:09:29] *** Joins: psydroid (~psydroid@user/psydroid)
[11:09:30] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[11:11:19] *** Joins: jazzy (~jaziz@2600:380:8562:6b2:8c7e:762:5a80:c3e1)
[11:11:40] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[11:11:53] *** Quits: emika (~emika@185.207.249.212) (Quit: emika)
[11:12:22] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[11:12:24] *** Joins: rendar (~rendar@user/rendar)
[11:13:46] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:15:30] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Ping timeout: 240 seconds)
[11:17:14] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[11:17:54] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:19:15] *** Quits: resmo (~resmo@2a00:d420:9:8a00:e144:1cb8:c71:69a7) (Remote host closed the connection)
[11:19:28] *** Joins: resmo (~resmo@2a00:d420:9:8a00:4d57:5aca:5491:3a42)
[11:21:56] *** Quits: y1n (~y1n@84-115-65-27.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[11:24:38] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[11:26:31] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[11:26:46] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[11:27:44] *** Joins: chele (~chele@user/chele)
[11:28:04] *** Quits: HaMsTeRs (~mx@49.130.89.196) (Quit: Konversation terminated!)
[11:30:03] *** Quits: bigRoo (~user@131.236.55.20) (Remote host closed the connection)
[11:31:26] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 272 seconds)
[11:33:40] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[11:33:50] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[11:36:08] *** Quits: me-sudoer-dentne (~me-sudoer@45.112.144.181) (Ping timeout: 252 seconds)
[11:37:46] *** Quits: Doffi (~doffi@91.132.197.188) (Ping timeout: 240 seconds)
[11:39:04] *** Joins: khrbt (~khrbt@user/khrbt)
[11:40:26] *** Joins: ice9 (~ice9@user/ice9)
[11:42:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 276 seconds)
[11:43:23] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[11:45:20] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[11:45:33] *** Quits: LiftLeft (~LiftLeft@154.21.28.208) (Ping timeout: 258 seconds)
[11:49:35] *** Joins: Adoi (~Adoi@user/adoi)
[11:51:06] *** Joins: AlanMD_ (~AlanMD@193.105.140.131)
[11:53:27] *** Quits: AlanMD (~AlanMD@5-12-8-103.residential.rdsnet.ro) (Ping timeout: 245 seconds)
[11:55:30] *** Joins: jab416171 (~jab416171@c-174-52-176-66.hsd1.ut.comcast.net)
[11:56:25] *** Quits: ihristov (~ihristov@212-5-158-33.ip.btc-net.bg) (Ping timeout: 248 seconds)
[11:58:09] *** Joins: rsrx (~rsrx@43.224.169.207)
[11:58:32] *** Joins: palasso (~palasso@user/palasso)
[11:58:55] <rsrx> hi, does anyone know how I can rewrite following sql to sqlalchemy subquery: https://bpa.st/UFOA
[12:06:24] *** Quits: Vonter (~Vonter@user/vonter) (Quit: WeeChat 3.2)
[12:10:24] *** Joins: me-sudoer-dentne (~me-sudoer@45.112.144.181)
[12:10:40] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:10:43] *** Joins: Vonter (~Vonter@user/vonter)
[12:12:05] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[12:14:40] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[12:15:18] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[12:21:35] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[12:24:14] *** Quits: dre (~dre@2001:8003:c932:c301:201a:59c7:e77c:7ce) (Quit: Leaving)
[12:25:29] *** Joins: carpediembaby (~carpediem@185-19-224-14.reverse.ipexia.com)
[12:26:05] <jochum> rsrx: so this is postgres with json involved right?
[12:26:22] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[12:27:01] <carpediembaby> Hi, I'm looking to get some ideas about how to do deployments of python projects on servers which don't have access to internet. Currently, i'm using miniconda and creating an environment while deploying (through debian packages), which requires access to internet to download packages.
[12:27:15] <jochum> rsrx: first you need this: https://stackoverflow.com/questions/29974143/python-sqlalchemy-and-postgres-how-to-query-a-json-element
[12:28:48] <carpediembaby> I've seen that there is the possibility to use pip to download packages offline (but its risky as one needs to be sure about the OS and platform). There is also conda-package and docker. Was wondering if someone who has already done this and has some ideas to share.
[12:29:25] <jochum> carpediembaby: only an idea wheels?
[12:29:34] *** abc_ is now known as zwindl
[12:29:46] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 240 seconds)
[12:30:12] *** Joins: aslicedbanjo (~aslicedba@81.141.55.177)
[12:30:37] *** Joins: Claire254p (~Claire254@185.231.9.144)
[12:30:46] <Claire254p> Hi there
[12:30:53] <matsaman> hi
[12:31:34] <carpediembaby> jochum: How would that work? Ideally, I would also want to package python, since a project might need different version of python than another. How would I go about collecting all the wheels and then putting them in place on the server? Are wheels platform/OS independent?
[12:32:24] <jochum> carpediembaby: static python - i don't know this works - have to ask google.
[12:32:25] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[12:32:49] <Claire254p> ImportError: /usr/local/lib/libboost_python.so.1.57.0:
[12:32:50] <Claire254p> undefined symbol: PyUnicode_AsUTF8String
[12:32:58] <jochum> carpediembaby: seems static python is possible: https://wiki.python.org/moin/BuildStatically
[12:33:06] <Claire254p> I see the following error. Any idea ?
[12:33:19] *** Joins: simplicity (~yti@user/simplicity)
[12:33:43] <jochum> Claire254p: the .so is not there
[12:34:13] <jochum> Claire254p: hmm ... its there ... sorry
[12:34:17] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[12:35:49] *** Joins: coc0nut_ (~coc0nut@user/coc0nut)
[12:35:55] <Claire254p> I have this one too if I change : ImportError: /lib/x86_64-linux-gnu/libboost_python39.so.1.74.0: undefined symbol: PyUnicode_AsUTF8String
[12:36:02] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:14] <jochum> Claire254p: what gives ldd /usr/local/lib/libboost_python.so.1.57.0
[12:36:32] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 256 seconds)
[12:36:44] *** Joins: molt (~molt@79.140.150.21)
[12:37:49] <Claire254p> python 2.7
[12:38:31] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[12:38:36] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:13] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 258 seconds)
[12:40:14] <Claire254p> @jochum I update python but I need to use python 2.7. When I import my project now I have : ImportError: /lib/x86_64-linux-gnu/libboost_python39.so.1.74.0: undefined symbol: PyUnicode_AsUTF8String
[12:42:25] *** Joins: khrbt (~khrbt@user/khrbt)
[12:43:22] <carpediembaby> jochum: I'm a little out of depth here. What would building statically achieve, and what does it mean?
[12:44:28] *** Quits: audiocat (~audio@2603-8081-1800-00ad-4244-d5da-54a7-0c8c.res6.spectrum.com) (Ping timeout: 256 seconds)
[12:44:43] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:46:36] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[12:47:06] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:47:08] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::682e)
[12:47:42] *** Joins: mikeliuk (~mikeliuk@109.249.187.96)
[12:47:51] <Claire254p> jochum I want use untwister. So I makefile and when I import after launch python I have this error
[12:47:55] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:54d9:a686:a64c:8cd9)
[12:48:14] *** Joins: kmh (~kmh@p200300df5f031500dc05e9b97966e73c.dip0.t-ipconnect.de)
[12:48:47] <Claire254p> untwister
[12:49:15] <kosh> carpediembaby, isn't this a problem that people normally just build containers for?
[12:49:39] <kosh> carpediembaby, so you put all the stuff together into some kind of container and deploy that
[12:50:00] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:ac0a:bb04:1852:c943)
[12:50:02] *** Joins: damxsa (~damx@2001:16a2:cfd8:e500:40e7:6a69:a396:39e9)
[12:52:19] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:a614:4839:e43e:98b9:299d)
[12:52:45] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[12:53:20] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[12:53:29] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[12:54:17] *** Quits: p-i- (~Ohmu@mx-ll-171.6.227-32.dynamic.3bb.co.th) (Ping timeout: 245 seconds)
[12:54:45] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[12:55:42] *** wbn_ is now known as wbn
[12:57:30] *** Quits: drmessano (sid104353@user/drmessano) (Ping timeout: 240 seconds)
[12:57:57] *** Joins: drmessano (sid104353@user/drmessano)
[12:58:09] *** Joins: Gerula (~Gerula@user/gerula)
[12:58:32] *** Joins: zweimer (~zweimer@2a02:908:d20:26e0:bca6:175f:4f96:e428)
[12:58:36] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:59:19] <jochum> carpediembaby: yeah kosh is right
[13:01:34] <Claire254p> No idea jochum ? You need another informations ?
[13:02:09] <jochum> Claire254p: I'm at work, no time to think a lot.
[13:02:10] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[13:02:36] <Claire254p> Ok thanks ! Have a nice day jochum
[13:03:13] <jochum> Claire254p: try to ldd those libaries one by one
[13:03:20] <jochum> Claire254p: until you find the missing one
[13:03:52] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[13:04:16] *** Joins: bolnav[m] (~bolnavm]@2001:470:69fc:105::1683)
[13:05:24] <Claire254p> jochum I will do that !
[13:05:37] *** Joins: plastico (~plastico@neomutt/plastico)
[13:06:13] <jochum> Claire254p: on which OS are you?
[13:06:40] <Claire254p> jochum Kali
[13:07:00] <bolnav[m]> How do I pipe stdin into stdout with subprocess.run()?  This is wrong for mypy and gives `'bytes' object has no attribute 'fileno'`:  curl = subprocess.run(curl_args, stdout=subprocess.PIPE)  ;  pdftotext = subprocess.run(pdftotext_args, stdin=curl_process.stdout)
[13:08:32] <jochum> Claire254p: hmm seems untwister is python2.7 while your trying python 3.xx ?
[13:10:18] *** Quits: Elzington_ (~Elzington@68.235.43.37) (Ping timeout: 240 seconds)
[13:10:53] *** Joins: Elzington (~Elzington@68.235.43.21)
[13:10:56] <Claire254p> jochum I'm using python 2.7 but when I updated libboost It became libboost_python39
[13:11:12] <hexnewbie> bolnav[m]: run() executes the process and waits for it to complete, use Popen() instead, then manually wait on the two processes
[13:11:17] <zweimer> How can I add another column with probabilistic distributed values in a dataframe based on a condition? Something like: df['error'] = np.where(df['Error ID'].isin(error_list), 80% 1, otherwise 0). Or would there even be way not having it uniformly distributed (but instead laplace etc.)?
[13:12:06] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[13:12:16] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:12:37] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[13:13:55] <hexnewbie> bolnav[m]: curl_subprocess.stdout is already a bytes object, containing the stdout (in memory, which may not be good if that's a huge PDF),  which you can pass as run(..., input=curl_process.stdout)
[13:14:25] <hexnewbie> That would be a simpler adjustment, but less preferable (due to it storing the PDF in RAM, again)
[13:15:12] *** Joins: Alan (~alan@user/alan)
[13:16:57] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Ping timeout: 248 seconds)
[13:17:29] *** Joins: Somni (insomnia@77-88-237-24.gci.net)
[13:18:02] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:9551:fbe6:2bbc:5130) (Ping timeout: 245 seconds)
[13:19:47] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[13:20:48] *** Joins: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[13:20:58] *** Joins: streety_ (~streety@li761-24.members.linode.com)
[13:21:11] *** Parts: streety_ (~streety@li761-24.members.linode.com) ()
[13:21:16] <bolnav[m]> hexnewbie: thank you, input=... did it
[13:22:15] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:ac0a:bb04:1852:c943) (Quit: Leaving)
[13:22:54] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[13:24:24] *** Quits: Gerula (~Gerula@user/gerula) (Remote host closed the connection)
[13:24:32] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Quit: Leaving)
[13:24:50] *** Joins: Gerula (~Gerula@user/gerula)
[13:25:51] *** Parts: bolnav[m] (~bolnavm]@2001:470:69fc:105::1683) ()
[13:27:03] *** Quits: coc0nut_ (~coc0nut@user/coc0nut) (Ping timeout: 276 seconds)
[13:27:16] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 272 seconds)
[13:28:21] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[13:29:11] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[13:34:54] *** Joins: shad (~shad@user/shad)
[13:35:16] *** Joins: entuland (~entuland@user/entuland)
[13:35:32] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[13:36:37] *** Quits: jazzy (~jaziz@2600:380:8562:6b2:8c7e:762:5a80:c3e1) (Remote host closed the connection)
[13:36:57] *** Joins: jazzy (~jaziz@2600:380:8562:6b2:8c7e:762:5a80:c3e1)
[13:38:09] *** Joins: greedom (~greedom@2001:16b8:32cd:4700:b48a:1f5d:fa8:5e72)
[13:38:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:40:36] *** jazzy is now known as jazzy2
[13:40:52] *** jazzy2 is now known as jazzy
[13:41:12] *** jazzy is now known as Jazzy
[13:41:19] *** Jazzy is now known as jazzy
[13:42:29] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[13:46:01] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:48:12] <lericson> I keep forgetting the answer to this, but there is no numpy way to say element-wise a < arr[i] < b for an array right
[13:48:21] <lericson> you have to do (a < arr)*(arr < b)
[13:48:40] *** Quits: the4oo4 (~the4oo4@shenzhou.whatbox.ca) (Quit: bye)
[13:49:13] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[13:49:44] <zweimer> I have a dataframe and a array. Whenever a condition (if column in df is equals to ..) is met, I would like the assign the next value from the array to my dataframe.
[13:49:50] <zweimer> How could I do that?
[13:50:12] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[13:51:30] *** Joins: upsala (~zcb@185.213.155.160)
[13:52:02] *** Quits: damxsa (~damx@2001:16a2:cfd8:e500:40e7:6a69:a396:39e9) (Ping timeout: 272 seconds)
[13:52:49] *** Joins: damxsa (~damx@2001:16a2:cfd8:e500:2ad7:2047:d9ca:b11b)
[13:55:23] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[13:57:44] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:01:47] *** Bardon_ is now known as Bardon
[14:01:59] *** Quits: damxsa (~damx@2001:16a2:cfd8:e500:2ad7:2047:d9ca:b11b) (Quit: Leaving)
[14:02:50] <jinsun> lericson: (a < arr) & (arr < b) looks slightly better
[14:03:26] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[14:03:42] *** Joins: CoolerX (~CoolerX@user/coolerx)
[14:04:53] <jinsun> lericson: and yes you cannot do a < arr < b because that tries to do bool(a < arr) and bool(arr < b), and numpy complains that it is ambiguous what bool(arr) means
[14:05:19] *** Quits: rsrx (~rsrx@43.224.169.207) (Quit: Leaving)
[14:08:24] *** Quits: km (~km@static.55.93.181.135.clients.your-server.de) (Quit: Leaving)
[14:08:52] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 245 seconds)
[14:10:15] *** Joins: km (~km@static.55.93.181.135.clients.your-server.de)
[14:13:34] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:13:53] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[14:14:50] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: Textual IRC Client: www.textualapp.com)
[14:17:56] *** Joins: redgloboli (~redglobol@user/redgloboli)
[14:18:34] *** Joins: varaindemian (uid73404@id-73404.charlton.irccloud.com)
[14:19:32] *** Joins: mike18 (~geri@217-149-162-237.nat.highway.telekom.at)
[14:20:08] <mike18> hi - im looking for a good way to export python logging to http... convert to http string for use with flask... any idea?
[14:21:46] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[14:24:16] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Read error: Connection reset by peer)
[14:24:16] <nedbat> mike18: what do you mean by http string?
[14:24:27] <mike18> i have a flask server running
[14:24:38] <mike18> i want send a request to that server
[14:24:43] <mike18> and get back all logging data
[14:24:54] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 276 seconds)
[14:25:20] <nedbat> mike18: the data that that server has itself logged?
[14:25:29] <mike18> yeah
[14:25:45] <mike18> the request runs an algo
[14:25:51] <mike18> and has some logging.info
[14:25:58] <mike18> and i want to get back all logging
[14:26:03] <nedbat> so you only want the logging from one particular request?
[14:26:09] <mike18> no all
[14:27:18] *** Joins: mcope (~matt@user/mcope)
[14:27:51] <Ninpo> Can anyone help me with a pendulum parsing problem I'm having? I want it to read month and year from a string like history_12_2018, however after reading the docs from_format("history_12_2018", "[history_]MM[_]YYYY") and other permutations such as [history][_]MM[_]YYYY" all raise an exception
[14:27:53] <nedbat> mike18: i guess you could log to a file, and then have an endpoint that returned the contents of the file
[14:28:05] <mike18> i currently log to a string
[14:28:14] <mike18> but how to format that now to http string?
[14:28:19] <mike18> so i have nice formatting
[14:28:29] <mike18> so i can see it well in the browser
[14:28:35] <Ninpo> https://bpa.st/77JQ traceback from parsing attempt
[14:28:44] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[14:29:07] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[14:29:22] <nedbat> mike18: how about this:  "<pre>" + html.escape(that_string) + "</pre>"
[14:29:38] <lericson> or just send as text/plain?
[14:29:54] <mike18> whats pre?
[14:30:08] <nedbat> mike18: it's an html tag for pre-formatted content
[14:30:23] <mike18> but it will not have nice colors as i see in the console right?
[14:30:45] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[14:32:21] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[14:32:26] <nedbat> mike18: no, it won't.  I don't know what colors you see in the console.
[14:32:39] <mike18> what package is html?
[14:32:57] <nedbat> mike18: https://docs.python.org/3/library/html.html
[14:34:37] <Ninpo> oohh figured it out. The bracket escape is only for anything that could otherwise be a token. [h]i[s]tory_MM_YYYY as the format worked.
[14:34:46] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[14:34:49] *** Quits: NeoCore (~neocore@89.40.183.16) (Quit: Leaving)
[14:35:39] *** Joins: georgios (~georgios@user/georgios)
[14:36:14] *** Joins: Sky_Net (~Sky_Net@176.14.210.40)
[14:36:40] *** Quits: shad (~shad@user/shad) (Ping timeout: 256 seconds)
[14:37:38] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 272 seconds)
[14:38:19] *** Joins: Hax0r (~Hax0r@2001:16a2:c090:478a:9c13:a78b:11ce:bb41)
[14:40:39] <mike18> nedbat: let me try with "<pre>" + html.escape(that_string) + "</pre>"
[14:40:44] *** Quits: Samian (~Sami@2620:10d:c091:480::1:1def) (Ping timeout: 258 seconds)
[14:44:02] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:a614:4839:e43e:98b9:299d) (Remote host closed the connection)
[14:44:47] *** Joins: p-i- (~Ohmu@2403:6200:8870:a614:4839:e43e:98b9:299d)
[14:45:19] *** Joins: besnn (~besnn@user/besnn)
[14:45:24] <mike18> nedbat: looks good.
[14:47:25] <mike18> from foo import constants and from bla import constants in the same python file - will it resolve which constants to use?
[14:49:19] *** Quits: sybariten (~jake@78-47-86-21.cinfuserver.com) (Quit: WeeChat 2.8)
[14:50:59] <supakeen> It's the same as `constants = ...; constants = ...` the second one wins.
[14:52:56] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[14:55:22] *** Quits: Hax0r (~Hax0r@2001:16a2:c090:478a:9c13:a78b:11ce:bb41) (Ping timeout: 272 seconds)
[14:55:57] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 245 seconds)
[14:56:11] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[14:58:03] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[14:58:43] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[14:59:14] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[15:01:08] <mike18> nedbat: one thing i noticed is that json output doesnt get formatted pretty....
[15:01:18] <mike18> json output in the loggging...
[15:03:05] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 248 seconds)
[15:03:54] <nedbat> mike18: right, html has no idea that you want it formatted. does it appear formatted in your console?
[15:04:20] <mike18> yeah its formatted in console - but in the html its all in 1 line
[15:04:44] <nedbat> mike18: hmm, that seems odd.  Can you share a picture?
[15:04:56] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:05:16] <mike18> wait i might be worng
[15:05:22] <mike18> i only do: logging.info("Generated json: %s", json_data)
[15:05:50] <mike18> so its not formatted in console than...
[15:08:17] *** mozgalom is now known as bomb-on
[15:09:01] <mike18> nedbat: i changed to: logging.info("Generated json: %s", json.dumps(json.loads(json_data), sort_keys=True, indent=4))
[15:09:06] <mike18> now it looks pretty
[15:09:16] *** Abrax is now known as _]
[15:09:22] *** _] is now known as Abrax
[15:09:56] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[15:10:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[15:11:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:11:27] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:14:22] *** Mikaela is now known as Aminda
[15:14:45] *** Joins: wolfshappen (~waff@irc.furworks.de)
[15:15:28] *** Quits: agrest (~user@almyra.daemonized.org) (Quit: agrest)
[15:16:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[15:17:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:17:57] *** Quits: dbristow (~dbristow@user/dbristow) (Quit: Leaving)
[15:21:23] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[15:21:24] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[15:22:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:23:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:24:56] *** Quits: mike18 (~geri@217-149-162-237.nat.highway.telekom.at) (Remote host closed the connection)
[15:25:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:27:49] <gloomy> Can you recommend some resources to really grok how tensors (tensorflow) or numpy arrays with more than 2 axes behave? I'm finding it incredibly hard to reason about them and understand how operations are applied
[15:29:12] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[15:30:26] *** Joins: georgios (~georgios@user/georgios)
[15:30:59] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:31:10] <rendar> why -OO removes docstrings? do they make python running slower somehow?!
[15:31:30] *** Quits: p-i- (~Ohmu@2403:6200:8870:a614:4839:e43e:98b9:299d) (Read error: Connection reset by peer)
[15:31:50] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[15:32:00] <nedbat> rendar: they don't make it slower, but they sit in memory and if you don't use them, why keep them?
[15:32:11] *** Joins: p-i- (~Ohmu@2403:6200:8870:a614:6d2a:7d36:a53c:4413)
[15:32:14] *** Joins: wolfshappen (~waff@irc.furworks.de)
[15:32:22] <rendar> ok, right
[15:32:30] <gloomy> Or I'm interested in what the learning was like for people here. With one/two dimensions I have an intuition of what's what (as in matrix rows/columns), but beyond that I'm completely lost
[15:32:46] <rendar> -OO is the only flag i need to run python in "release" mode?
[15:33:01] <nedbat> rendar: you don't need to use that flag at all
[15:33:17] *** Joins: dbristow (~dbristow@user/dbristow)
[15:33:22] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 272 seconds)
[15:33:28] <rendar> why not? it disables asserts too
[15:33:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[15:34:07] <nedbat> rendar: "need" is the important word here.  Do you have asserts in your code?
[15:34:24] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[15:34:36] *** Joins: shad (~shad@user/shad)
[15:34:47] <rendar> yes, of course, and lots of them
[15:35:02] <nedbat> rendar: "of course": most people don't use asserts in their non-test code.
[15:35:15] <nedbat> rendar: but ok, it sounds like you want to use -O
[15:35:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:35:52] <nedbat> rendar: i hope you have been careful to avoid side-effects in your asserts
[15:36:06] <rendar> yes
[15:36:24] <rendar> also, i didn't get quite well what the -d flag does
[15:37:08] *** Joins: molt (~molt@79.140.150.21)
[15:37:20] <nedbat> rendar: i've never used -d, I suspect it only does something on debug builds of Python?
[15:37:35] <rendar> parser debug, so.. yeah i think so
[15:40:05] *** Joins: Atque (~Atque@user/atque)
[15:40:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[15:41:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:44:17] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[15:45:32] <Yhg1s> rendar: generally speaking, don't pass flags to Python.
[15:45:37] *** Quits: zweimer (~zweimer@2a02:908:d20:26e0:bca6:175f:4f96:e428) (Ping timeout: 246 seconds)
[15:45:40] <Yhg1s> (-O is really not worth it.)
[15:45:54] <rendar> Yhg1s: i see
[15:46:16] <rendar> Yhg1s: but there are also env variables, such as PYTHONTRACEMALLOC or that one for asyncio debug
[15:46:23] <rendar> shouldn't i use them too?
[15:46:27] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Remote host closed the connection)
[15:46:38] <Yhg1s> rendar: yes. They are for very specific purposes. You should only need them when you need that very specific thing.
[15:46:38] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:e817:6dcd:3832:b47a)
[15:47:05] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[15:47:22] <rendar> but i need to enhance debugging in asyncio...
[15:47:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:47:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:48:12] <Yhg1s> rendar: usually an easier way to enable it is to pass debug=True to asyncio.run(). That way it only affects that one appliation, instead of anything you might run.
[15:48:26] <Yhg1s> (or, calling loop.set_debug() for even more specific debugging)
[15:48:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:48:42] *** Joins: Julian (~tos9@python/site-packages/Julian)
[15:49:54] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:51:29] *** Joins: aifa[m] (~aifamatri@2001:470:69fc:105::d06e)
[15:52:00] <rendar> thanks
[15:52:16] *** sharperguy__ is now known as sharperguy
[15:53:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:53:11] <rendar> also, when __debug__ will be True? If I got it, with no flags __debug__==True, with -O or -OO, __debug__==False, m I right?
[15:53:31] <Yhg1s> rendar: -O sets __debug__ to False, yes.
[15:54:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:54:51] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[15:55:19] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[15:55:43] <rendar> ok thanks
[15:58:42] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[15:59:09] *** Quits: shad (~shad@user/shad) (Ping timeout: 276 seconds)
[15:59:46] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[16:00:22] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:01:15] *** Quits: resmo (~resmo@2a00:d420:9:8a00:4d57:5aca:5491:3a42) (Remote host closed the connection)
[16:01:30] *** Joins: resmo (~resmo@2a00:d420:9:8a00:873b:a3d2:cae1:a6d3)
[16:02:03] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[16:03:04] *** Joins: payam (~payam@138.106.57.132)
[16:03:25] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[16:03:46] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 272 seconds)
[16:07:45] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 258 seconds)
[16:07:58] *** Joins: fm (~fm@user/fm)
[16:08:41] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[16:09:16] *** Joins: y1n (~y1n@84-115-65-42.wifi.dynamic.surfer.at)
[16:10:22] *** Joins: AskerX (~AskerX@103.125.235.22)
[16:13:27] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[16:18:17] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 248 seconds)
[16:21:28] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[16:22:08] *** Joins: CoolerX (~CoolerX@user/coolerx)
[16:22:39] *** Quits: upsala (~zcb@185.213.155.160) (Read error: Connection reset by peer)
[16:22:41] *** Joins: upsala1 (~zcb@185.213.155.160)
[16:23:21] *** Joins: Roey (~Roey@user/Roey)
[16:24:48] *** Joins: bomb-on_ (~bomb-on@194.144.47.113)
[16:25:41] *** Joins: derelict (~derelict@user/derelict)
[16:25:54] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[16:27:54] *** Joins: somlis (~somlis@user/somlis)
[16:30:23] *** Joins: aha (~aha@user/hmmm)
[16:31:07] *** Joins: luckydonald (~luckydona@static.154.109.217.95.clients.your-server.de)
[16:32:36] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[16:32:39] *** Joins: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr)
[16:32:50] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 256 seconds)
[16:34:15] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 276 seconds)
[16:34:24] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:39:28] *** Joins: c10l (~c10l@89.34.167.207)
[16:40:39] *** Joins: omegatron (~some@p54849842.dip0.t-ipconnect.de)
[16:42:03] *** Joins: dev4449 (~dev4449@172.98.71.133)
[16:44:00] *** Joins: hafat (~hafat@95.70.167.173)
[16:48:00] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 258 seconds)
[16:48:14] *** Joins: nyah (~nyah@90.221.186.180)
[16:49:48] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:50:10] *** Quits: dvx (~dvx@185.63.97.64) (Ping timeout: 240 seconds)
[16:53:41] *** Joins: cheater (~Username@user/cheater)
[16:54:05] *** Quits: mikeliuk (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[16:54:16] *** Quits: bomb-on_ (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[16:54:29] *** Joins: mikeliuk84 (~mikeliuk@109.249.187.96)
[16:54:52] *** Joins: mcope (~matt@user/mcope)
[16:55:11] *** Joins: Armen (~Armen@armen138.com)
[16:56:08] *** Joins: gareppa (~gareppa@user/gareppa)
[16:56:54] *** Quits: y1n (~y1n@84-115-65-42.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[16:56:56] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:56:56] *** Joins: az (az@user/azz)
[16:57:15] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[16:58:17] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 248 seconds)
[16:59:05] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e)
[17:01:22] *** Quits: dev4449 (~dev4449@172.98.71.133) (Quit: dev4449)
[17:01:30] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[17:02:06] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[17:03:10] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[17:05:10] *** Joins: bomb-on_ (~bomb-on@194.144.47.113)
[17:08:37] *** Joins: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619)
[17:09:23] *** Joins: y1n (~y1n@84-115-64-176.wifi.dynamic.surfer.at)
[17:09:42] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:09:51] *** Joins: xcombelle (~Xavier_Co@abayonne-651-1-41-161.w92-156.abo.wanadoo.fr)
[17:10:14] *** Joins: dulanic (~dulanic@47.187.144.163)
[17:11:14] *** GNUtoo_ is now known as GNUtoo
[17:13:10] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:15:44] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[17:16:35] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[17:17:04] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[17:17:31] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[17:19:18] *** Joins: masber (~masber@vpn-76.cscs.ch)
[17:19:44] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[17:20:27] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:21:38] *** Quits: digilink (~digilink@user/digilink) (Quit: WeeChat 3.2)
[17:22:24] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:25:08] *** Joins: digilink (~digilink@user/digilink)
[17:25:46] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[17:26:04] *** Joins: sebastianos (~sebastian@user/sebastianos)
[17:26:29] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[17:27:35] *** Joins: hodapp (~mawson@user/hodapp)
[17:27:50] *** Joins: Hax0r (~Hax0r@2001:16a2:c011:5267:540d:f930:6f33:4)
[17:28:20] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[17:28:25] *** Joins: sharperguy_ (~sharpergu@2001:16b8:5c0a:2000:9f0d:f3c1:5524:8c0f)
[17:29:02] *** Joins: odinsbane (~mbs@pat-pool-138.crick.ac.uk)
[17:29:06] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[17:29:20] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[17:29:37] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:30:13] *** Joins: rjwiii (~mr-rich@072-187-028-004.res.spectrum.com)
[17:30:14] *** Joins: shad (~shad@user/shad)
[17:30:47] *** Quits: sharperguy (~sharpergu@2001:1438:4010:3101:10a::3133) (Ping timeout: 252 seconds)
[17:31:18] *** Parts: iiz (~iiz@c-67-172-73-103.hsd1.fl.comcast.net) ()
[17:31:24] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 250 seconds)
[17:32:29] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[17:32:55] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[17:33:29] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Ping timeout: 248 seconds)
[17:33:32] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[17:35:17] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[17:36:05] *** Joins: ihristov (~ihristov@217.145.94.71)
[17:36:27] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[17:38:18] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[17:40:21] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[17:40:39] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[17:41:00] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[17:41:03] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[17:41:32] *** Joins: zeden (~zeden@user/zeden)
[17:43:29] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:44:20] *** Joins: luxifer (~luxifer@185.238.253.180)
[17:44:42] <sveinse> Does it exits any search/index function that can input a predicate operating on a sequence? E.g. like .index() but as find(mylist, key=lambda x: <something>), similar to sort() and itertools.filterfalse() support.
[17:45:02] <sveinse> I assume not, I've searched the docs, but I might have missed something
[17:45:15] *** Quits: aha (~aha@user/hmmm) (Remote host closed the connection)
[17:45:22] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 256 seconds)
[17:45:44] *** Joins: MikZyth (~MikZyth@188.65.242.223)
[17:46:30] <Julian> sveinse: `next`
[17:46:49] <Julian> sveinse: i.e. `next(each for each in mylist if foo())`
[17:49:13] <sveinse> Julian: jep, that's a good way to pick the first element and not have to continue iterating on a match. Thanks
[17:50:27] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[17:50:58] *** Joins: dez (uid92154@user/dez)
[17:51:03] *** Joins: mei (~mei@user/mei)
[17:51:19] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:a614:f1a2:602:bcca:9a9f)
[17:52:44] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (Ping timeout: 268 seconds)
[17:53:46] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[17:54:26] *** Quits: p-i- (~Ohmu@2403:6200:8870:a614:6d2a:7d36:a53c:4413) (Ping timeout: 256 seconds)
[17:55:05] *** Quits: catdog (~quassel@2001:470:50f7:cdcd::cd1) (Ping timeout: 258 seconds)
[17:55:21] *** Quits: etch0 (~etch@user/etch) (Ping timeout: 248 seconds)
[17:56:09] *** Joins: catdog (~quassel@birdperson.tuxzone.org)
[17:56:25] *** Quits: y1n (~y1n@84-115-64-176.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[17:56:25] *** Joins: besnn (~besnn@user/besnn)
[17:57:44] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[17:58:59] *** Quits: Hax0r (~Hax0r@2001:16a2:c011:5267:540d:f930:6f33:4) (Remote host closed the connection)
[18:01:51] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[18:03:57] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 276 seconds)
[18:03:57] *** Quits: masber (~masber@vpn-76.cscs.ch) (Quit: Client closed)
[18:04:16] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[18:05:52] *** Joins: Falc (~Falc@193.191.206.243)
[18:09:31] *** Joins: y1n (~y1n@84-115-64-176.wifi.dynamic.surfer.at)
[18:11:45] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:14:15] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[18:14:33] *** Quits: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619) (Remote host closed the connection)
[18:14:46] *** Joins: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619)
[18:14:48] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[18:15:06] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-c16b-4385-b975-2303.res6.spectrum.com)
[18:17:32] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[18:17:55] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:18:39] *** Quits: hafat (~hafat@95.70.167.173) (Quit: Leaving)
[18:19:31] *** Quits: me-sudoer-dentne (~me-sudoer@45.112.144.181) (Quit: Leaving)
[18:20:14] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[18:20:20] *** Joins: vince (~vince@75.127.14.76)
[18:21:31] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[18:22:10] *** Joins: _bt (~bt@194.73.96.6)
[18:22:47] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[18:22:53] *** Joins: magla (~gelignite@55d4b6ce.access.ecotel.net)
[18:23:55] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:24:22] *** Quits: _bt (~bt@194.73.96.6) (Client Quit)
[18:24:32] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[18:24:45] *** Quits: Falc (~Falc@193.191.206.243) (Quit: Leaving)
[18:25:05] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[18:25:25] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:e817:6dcd:3832:b47a) (Ping timeout: 268 seconds)
[18:25:32] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[18:26:39] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[18:27:06] *** Joins: cdown (~cdown@89.32.122.5)
[18:28:41] *** Joins: mago (~mago@87.125.57.238)
[18:29:00] <mago> Hello, Got a wordlist and would like to change its order randomly..
[18:29:06] <mago> How can I do that with python?
[18:29:07] *** Joins: cdown_ (~cdown@163.114.131.1)
[18:29:49] <NoImNotNineVolt> sorted(wordlist, key=random.random())
[18:30:01] <bjs> mago: random.shuffle
[18:30:09] *** Quits: nrg (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[18:30:35] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[18:31:14] <carpediembaby> kosh, jochum: Yes, containers are one of the solutions. But I was wondering if there is something python-only or something simpler with a smaller overhead and learning curve.
[18:31:21] *** Joins: Warped (~Warped@user/warped)
[18:31:27] <NoImNotNineVolt> sorted(wordlist, key= lambda v: random.random()) # i think that's what i meant
[18:31:31] <NoImNotNineVolt> s/v/_/
[18:31:37] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 248 seconds)
[18:31:54] <NoImNotNineVolt> but random.shuffle is cleaner.
[18:32:04] <jochum> carpediembaby: I know only a big overhead, big learning curve solution for static python deployments. Static python and wheels.
[18:32:12] <kosh> carpediembaby, I don't know of anything simpler or standardized but it is also not a problem I have ever had to solve, all the systems I work with are internet connected at least part time
[18:32:17] <jochum> carpediembaby: I would go with containers, they are easy.
[18:32:49] *** Joins: chris_99 (uid26561@id-26561.tooting.irccloud.com)
[18:32:50] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[18:32:53] <kosh> for all my cases I just install anaconda and create a virtual environment
[18:32:53] <mago> bjs I was looking at that function.. NoIMotNineVolt : sorted(wordlist.txt, key= lambda v: random.random())
[18:32:57] <mago> Is that a one liner?
[18:33:14] <bjs> mago: you were looking at random.shuffle... but?
[18:33:26] <bjs> was it not what you were after?
[18:33:34] <mago> bjs im looking at the documentation but still dont know how to use it..
[18:34:03] <bjs> mago: oh, open the file, read the words into a list, random.shuffle(the_list), open the file and write the new words back out
[18:34:46] <carpediembaby> jochum, kosh: okay, I'll explore containers then. Yes, anaconda with virtual environment packaged into a debian package is what I am using currently. Was thinking maybe there is a robust solution similar to this, but with local storage of packages, instead of downloading it on the deployment machine.
[18:34:58] <NoImNotNineVolt> they're both one-liners :P
[18:35:02] *** Joins: nrg (~NRG@user/nrg)
[18:35:06] <phy1729> Do you by chance actually want random.choice? Do you need the full list to be shuffled or just get a few random choices from the list?
[18:35:09] *** Joins: roryrjb (~roryrjb@143.244.37.78)
[18:35:11] <mago> bjs, should i open the python thermina to start with or write script in a file?
[18:35:22] <NoImNotNineVolt> my approach returns a new list with a random order. bjs' modifies the input list to reorder it.
[18:35:42] <bjs> mago: the "thermina" ?
[18:35:44] *** Joins: gambl0re (~gambl0re@24.140.237.124)
[18:35:48] *** Quits: greedom (~greedom@2001:16b8:32cd:4700:b48a:1f5d:fa8:5e72) (Remote host closed the connection)
[18:35:56] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[18:36:12] <bjs> I don't know what that is
[18:36:14] <chris_99> Just wondering if anyone has any pointers, i wrote a rather naff script in python using paramiko that just connects to computers running ssh, to grab uptime, and run other commands such as 'tail' on a .csv file and then parse the line of the file locally.  I guess i'm wondering if instead there's a simple way to send a python 'job' to a number of computers and then can collect the results (ideally without having to install anything
[18:36:15] <chris_99> on these other computers)
[18:36:30] *** Quits: nrg (~NRG@user/nrg) (Client Quit)
[18:36:33] *** Quits: mago (~mago@87.125.57.238) (Quit: Client closed)
[18:36:35] *** Joins: greedom (~greedom@2001:16b8:32cd:4700:b48a:1f5d:fa8:5e72)
[18:36:44] <kosh> carpediembaby, sorry this is just a situation I have run into before so if there is a better way to do it I don't know it
[18:36:55] <NoImNotNineVolt> chris_99: ansible
[18:37:23] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:37:29] <kosh> that would still have to be installed on the computers
[18:37:43] *** Joins: Pickchea (~private@user/pickchea)
[18:37:46] <chris_99> NoImNotNineVolt: i didn't think about that. i have used ansible for updating packages, but you mean, i can send arbitrary python functions ?
[18:37:58] <kosh> do you realize how big of a security problem it would be if you could just send work to a remote computer and it would run it without having to install anything
[18:38:10] *** Joins: mago (~mago@87.125.59.149)
[18:38:11] <chris_99> ansilbe uses ssh kosh
[18:38:28] <mago> Sorry got disconnected
[18:38:32] <kosh> you would still need software installed on the remote system
[18:38:56] *** Quits: ihristov (~ihristov@217.145.94.71) (Quit: Connection closed)
[18:39:02] <kosh> it won't magically put python there along with all the libraries, packages etc you need
[18:39:12] *** Joins: cheater (~Username@user/cheater)
[18:39:51] <chris_99> i've only used it for sys admin type stuff, but it uses the installed python interpretter, you don't have to install it on each pc
[18:40:10] <bjs> mago: I asked what you meant
[18:40:39] <sveinse> Generators are just brilliant, but they have one major caveat if one doesn't pay attention: If consumed twice, you fail. I would assume that is by design, and perhaps the fault is that one relies on the thinking of tuple and list that can be consumed/iterated numerous times...
[18:41:20] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[18:41:20] <NoImNotNineVolt> it's easy to bootstrap a python environment on remote systems using ansible
[18:41:36] <chris_99> just looking at writing a module with it, cheers, that looks much better than the hack i've got
[18:41:52] *** Joins: lucasb (uid333435@id-333435.stonehaven.irccloud.com)
[18:43:13] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[18:43:44] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 256 seconds)
[18:45:40] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[18:46:00] *** Quits: jazzy (~jaziz@2600:380:8562:6b2:8c7e:762:5a80:c3e1) (Ping timeout: 256 seconds)
[18:46:02] <sveinse> Are there any ways to make a generator fail if tried as an iterator twice to avoid errors? it=myiterator(); for i in it: print(i); for i in it: print(i)  will silently pass the second loop.
[18:46:05] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:a614:f1a2:602:bcca:9a9f) (Read error: Connection reset by peer)
[18:46:34] <sveinse> However if myiterator() is a wrapper for a dict.keys() it'll repeat the loop twice
[18:46:47] <bjs> sveinse: no,  that's how generators work (And are supposed to work).  But you can make your own type or function that if it got called twice throws an error or something
[18:46:58] *** Joins: p-i- (~Ohmu@171.6.247.128)
[18:47:06] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Excess Flood)
[18:47:26] <sveinse> One needs to be very aware what kind of iterator one deals with and if they can be reiterated apparently
[18:47:34] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[18:49:21] <NoImNotNineVolt> also, while ssh is the default transport, it's not strictly required.
[18:49:36] <NoImNotNineVolt> [for ansible. you can e.g. use telnet if you prefer, etc.]
[18:49:41] *** Joins: nrg (~NRG@user/nrg)
[18:50:32] <bjs> sveinse: https://bpa.st/4MMQ for e.g.
[18:51:06] *** Quits: y1n (~y1n@84-115-64-176.wifi.dynamic.surfer.at) (Ping timeout: 256 seconds)
[18:51:23] <bjs> But this isn't perfect, or really very nice.
[18:51:39] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[18:51:40] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[18:52:05] <sveinse> I don't know how many times I've refactored an inner function returning an list or tuple into a generator and then breaking the outer parts because it turns out its consumes the iterator multiple times. Yet it doesn't fail, only silently continues.
[18:52:13] <sveinse> bjs: jep, I see (and agree)
[18:53:04] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:53:33] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:53:51] <mago> bjs : words= open("wordlist.txt", "r")  Will that be enought?
[18:53:53] <Repiphany> Could use yield functions instead
[18:53:59] <bjs> mago: that will open it
[18:54:07] <bjs> it won't read or anything
[18:54:10] <mago> And then shuffled = shuffle(words)
[18:54:34] <sveinse> Repiphany: that is what a generator is
[18:54:40] <bjs> mago: https://bpa.st/OKAQ
[18:55:24] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 272 seconds)
[18:55:36] <phy1729> sveinse: typing helps a lot with finding those breakages
[18:56:14] <mago> Mmm, ok, thanks bjs :)
[18:56:16] <Repiphany> I mean instead of using `gen = function(); for i in gen: ...; for j in gen: # oops`, just do `for i in function(): ...; for j in function(): ...`
[18:56:25] *** southey is now known as foxtrot
[18:57:39] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: Textual IRC Client: www.textualapp.com)
[18:58:10] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[18:58:13] <sveinse> phy1729: so mypy will warn on a generator function that is tried to consumed multiple times?
[18:58:21] *** ndimitrij is now known as ndim
[18:58:29] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:59:25] <mago> bj the script is not working
[18:59:30] <mago> bjs the script is not working
[18:59:39] <bjs> mago: "is not working"?
[18:59:44] *** Joins: wovixo (~wovixo@128.104.205.49)
[19:00:18] <mago> import-im6.q16: attempt to perform an operation not allowed by the security policy `PS' @ error/constitute.c/IsCoderAuthorized/408.
[19:00:21] <mago> I tried with sudo
[19:00:27] <bjs> mago: that doesn't look like a Python error
[19:00:31] <bjs> did you remember to run it with Python?
[19:00:37] <mago> lol
[19:01:24] <bjs> mago: ?
[19:01:31] <mago> thanks bjs, its working perfectly.
[19:01:41] <bjs> okay
[19:03:25] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[19:04:23] <rendar> GIL blocking is about *opcodes*, so every N operations, the GIL is freed, A thread election happens, one is picked, and that one continues... so in this scenario where only 1 opcode can be run *per process*, it's a serious thing that run_in_executor() will block the entire asyncio loop, when the secondary thread runs...
[19:04:25] *** Quits: greedom (~greedom@2001:16b8:32cd:4700:b48a:1f5d:fa8:5e72) (Remote host closed the connection)
[19:04:46] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[19:05:12] <bjs> rendar: really it's not about opcodes at all, it's about protecting operations over Python data structures (including internal ones). If two threads try perform an operation over any Python data structure at the same time, one will have to wait.
[19:05:20] *** Joins: akk (~akk@75.161.157.26)
[19:05:32] <phy1729> sveinse: hrm no, but it would mean you have to go look at all the places an argument is declared as a list/Sequence/Collection not an Iterator/Iterable
[19:05:35] <rendar> so more opcodes can be run?
[19:06:04] <bjs> rendar: the opcodes are mostly irrelevant. The GIL can be taken and released many times during a single opcode
[19:07:01] *** Joins: JordiGH (~jordi@user/jordigh)
[19:07:15] <JordiGH> line continuations: backslashes or unclosed brackets?
[19:07:25] <bjs> rendar: but if you say sleep(60) in the executor then the thread will touch the Python data structures for a microsecond (to lookup the "sleep" name in the Python scope, for example) but then the 60 seconds it spends sleeping its not touching Python data structures at all
[19:07:30] <bjs> so it won't block anything
[19:07:54] <rendar> ok, clear
[19:08:33] <bjs> rendar: asyncio is kind of not relevant here, because asyncio doesn't change anything. Just imagine two normal Python threads
[19:08:42] <bjs> whether the GIL is a problem depends on what both threads are doing
[19:09:40] *** Joins: lidenbrock (~lidenbroc@2804:14c:32:8120:a109:dea1:e873:f9a8)
[19:09:40] <rendar> bjs: yes, but with the difference that asyncio main thread has to do a millions of things *concurrently*, so one thing is blocking a single thread, one thing is blocking asyncio main thread, you lose alot much more
[19:09:42] <bjs> (namely, how much of their work involves touching Python data structures)
[19:10:13] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:10:18] <bjs> rendar: you lose exactly as much as if all those concurrent things were their own threads
[19:10:22] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 256 seconds)
[19:10:28] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:11:58] <jinsun> JordiGH: unclosed brackets obviously, also black will remove backslashes if you already have them in your code and put brackets instead
[19:12:23] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[19:12:46] *** Joins: ovnicraft (~ovnicraft@181.188.201.67)
[19:12:55] <JordiGH> jinsun: Nice. Backslashes were a mistake.
[19:13:25] <JordiGH> You can still also use <> instead of !=, can't you, like some Pascal caveman?
[19:13:45] <JordiGH> Ah, no.
[19:14:08] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[19:14:08] *** Quits: Vultyre (~vultyre@user/vultyre) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:14:08] <bjs> rendar: like, if you pick a pair of `async` things then if they are waiting on IO then it doesn't matter, if they're both trying to touch Python data structures asyncio stops them anyway.  If you pick an `async` thing and a `thread` thing, if one is waiting on IO then it doesn't matter, if they're both trying to touch Python data structures then the GIL stops them. If you pick two thread things, the same.
[19:14:24] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[19:14:58] <bjs> rendar: so... throwing asyncio in there doesn't make things worse, you just get exactly the same as before.
[19:15:14] *** Joins: Deneb (~johnch@93.125.7.51.dyn.plus.net)
[19:15:29] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[19:15:40] *** Quits: chris_99 (uid26561@id-26561.tooting.irccloud.com) ()
[19:16:08] *** Joins: Vultyre (~vultyre@user/vultyre)
[19:16:34] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[19:19:11] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[19:20:01] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[19:20:54] <bjs> rendar: I mean just generally threads in Python that do a lot of work inside Python have negative performance implications.  But always remember that this just means you're not efficiently using the hardware resources it's not that asyncio will be "blocked".
[19:20:56] <rendar> i see
[19:22:14] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Quit: leaving)
[19:23:19] <kosh> threads are complicated, if you are using them for async stuff they work fine in python, if you are using them for performance they won't work pretty much at all
[19:24:04] <bjs> rendar: one way to think about it is that if you say have 4 cores, one core is dedicated to running Python.  Any Python code always runs on that core,  and non-Python code (e.g. numpy) can run on the others.  Python is constantly going to be switching between each of the Python threads on that core (possibly in the middle of an opcode).
[19:24:31] <rendar> yes
[19:24:53] <bjs> So if it switches, the asyncio Python code can't run for a bit until Python switches back to asyncio a few microseconds later.  But most asyncio tasks spend most of their time just waiting anyway
[19:24:58] *** Joins: samathy (~samathy@user/samathy)
[19:25:37] <NoImNotNineVolt> the complexity of threading in python really makes multiprocessing very attractive :P
[19:25:53] *** Quits: Sky_Net (~Sky_Net@176.14.210.40) (Quit: Leaving)
[19:26:07] <bjs> even then multiprocessing isn't very attractive
[19:26:19] <NoImNotNineVolt> the cost of task switching and the overhead of maintaining separate processes is negligible compared against the pain of beating your head against the GIL
[19:26:21] <rendar> bjs: i see, problems arise when that "few microseconds later" starts to be a few *seconds* later, e.g. I/O blocking from NFS
[19:26:34] *** Quits: samathy (~samathy@user/samathy) (Client Quit)
[19:26:50] <bjs> rendar: I/O blocking shouldn't be affected by the GIL
[19:26:53] *** Joins: samathy (~samathy@user/samathy)
[19:26:55] *** Quits: Vultyre (~vultyre@user/vultyre) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:26:57] <bjs> or a well-written async library
[19:27:11] <bjs> (since reading files from NFS isn't anything to do with Python)
[19:27:22] <rendar> bjs: do you mean that, blocking I/O e.g. from a file, will release the GIL while waiting the I/O?
[19:27:30] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[19:27:31] <NoImNotNineVolt> if there's a more attractive way of getting more than one core to run cpu-bound python concurrently, i haven't seen it.
[19:27:48] <bjs> NoImNotNineVolt: well generally to not use Python
[19:27:56] <bjs> (or e.g. Python libraries not written in Python like numpy)
[19:27:58] <NoImNotNineVolt> bjs: so back to perl for string processing? :P
[19:28:16] <bjs> NoImNotNineVolt: it's a shame that Python behaves so badly for text-based computation
[19:28:30] <bjs> just in general it wasn't designed for it and there aren't any good libraries
[19:28:37] <NoImNotNineVolt> i just want to munge a lot of json, and python seems like a great tool for that, but, then GIL.
[19:28:40] <bjs> I think a lot of the `str` methods do release the GIL though
[19:28:45] <rendar> Python behaves badly for text-based computation? why?
[19:29:16] <bjs> rendar: ah you just spend so much time building and touching and deleting Python objects everywhere
[19:29:33] <bjs> rendar: hmm, I would guess reading a file would release the GIL. I'd have to check
[19:29:44] <rendar> bjs: but python is one of the most used languages for data downloading, parsing etc..
[19:29:46] <mav`rik> I've been trying to use anyio in an asyncio-based service and it seems to be working for the most part, but my integration tests are failing (for very specific tests) with a failure to import trio. Given I set a top-level conftest.py with anyio_backend fixture of asyncio, I don't know what could be causing this. Any pointers for debug?
[19:29:51] <bjs> rendar: yes
[19:30:03] <bjs> rendar: Python isn't used because it's efficient it's used because it's popular and easy and nice
[19:30:14] <rendar> ok
[19:30:24] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 276 seconds)
[19:30:24] *** ayusta is now known as ayustae
[19:30:27] *** Joins: Vultyre (~vultyre@user/vultyre)
[19:30:30] <mefistofeles> for IO stuff is pretty efficient
[19:30:41] *** Joins: shad (~shad@user/shad)
[19:30:44] <NoImNotNineVolt> it's easier to just use multiprocessing and not worry about what's io-bound and what's cpu-bound.
[19:31:01] <mav`rik> NoImNotNineVolt: tradeoffs with serialisation notwithstanding
[19:31:12] <mefistofeles> NoImNotNineVolt: that only works for distributed tasks
[19:31:25] <mefistofeles> or better, independent tasks
[19:31:33] *** Quits: Vultyre (~vultyre@user/vultyre) (Client Quit)
[19:31:34] *** Joins: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy)
[19:31:54] <NoImNotNineVolt> mefistofeles: shm, messaging, etc.
[19:32:35] <NoImNotNineVolt> mav`rik: if the cost of serialization is greater than the benefit of parallel processing, then sure, valid point.
[19:32:50] *** Joins: edr (~edr@user/edr)
[19:32:54] *** Joins: martums7 (martums@user/martums)
[19:32:55] <bjs> rendar: I think reading a file does release the GIL.
[19:33:24] <rendar> i think so
[19:33:25] <bjs> So reading from an NFS thing shouldn't block other threads...
[19:33:49] <bjs> and presumably any library that has `async` read/write would be even less blocking
[19:33:54] *** Quits: tims (~tims@61.69.131.46) (Ping timeout: 240 seconds)
[19:34:40] <mav`rik> bjs: file reading is awkward in Unix no matter which way you look at it. To add asyncio-compatible file handling in Python mandates a separate thread until POSIX get its act together and Python ports that support
[19:35:06] <bjs> mav`rik: and hence a library that supports `async` read/write will be even less blocking
[19:36:00] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[19:36:17] *** Quits: martums (~martums@user/martums) (Ping timeout: 252 seconds)
[19:36:18] *** martums7 is now known as martums
[19:38:02] <sveinse> blocking IO might release the GIL, but the kernel will put that thread to sleep, so python execution will stop unless there is another thread. Unless async OS mechanisms are used of course.
[19:38:19] *** Joins: d00gy (~d00gy@user/d00gy)
[19:38:31] <bjs> you have libraries like `aiofiles` that just have a File-like type that delegates all methods through a thread pool to get non-blocking calls (+ a Future for async tasks to wait on).
[19:38:35] <ssbr> sveinse: the GIL only makes any difference if there is another python thread anyway
[19:38:38] <ssbr> so yes
[19:38:49] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 248 seconds)
[19:39:01] <sveinse> mm
[19:39:20] *** Joins: Vultyre (~vultyre@user/vultyre)
[19:39:40] <bjs> I think ssbr has a very good point
[19:39:53] *** Quits: p-i- (~Ohmu@171.6.247.128) (Remote host closed the connection)
[19:40:16] *** Joins: georgios (~georgios@user/georgios)
[19:40:29] *** carbolymer_ is now known as carbolymer
[19:40:32] *** Joins: p-i- (~Ohmu@2403:6200:8870:1a99:c88b:63e3:832e:47e4)
[19:40:35] *** Joins: junktext (~junktext@109.201.152.168)
[19:40:50] <altendky> how should i state that a protocol expects a method that is defined by another protocol?  (or an adjustment of the problem as needed but retaining the underlying desire)  https://mypy-play.net/?mypy=latest&python=3.10&flags=strict&gist=5b52818fb4e1f79d92d77b6631c4a1fa
[19:41:03] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[19:42:30] <mav`rik> altendky: could you have the method as its own protocol so you could do subtyping?  class ProtocolX(SupportsY):
[19:43:06] <altendky> mav`rik: mm, instead of using `.__call__()`.  less flexible, but a good thought, thanks.
[19:43:37] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[19:44:20] <sveinse> Any async(io) event loop running is always pre-emptive, implying that the GIL serves no function there either. So as ssbr sais, it only comes to play where there is truly multiple py threads running.
[19:44:43] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[19:45:01] <altendky> *always cooperative?
[19:45:11] <mav`rik> altendky: I appreciate this might not help, but the docs for mypy are pretty good these days on the structural-subtyping front - https://mypy.readthedocs.io/en/stable/protocols.html#defining-subprotocols-and-subclassing-protocols
[19:45:12] *** Joins: Dan39 (~dan@user/dan39)
[19:45:57] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:46:16] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:46:46] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[19:46:52] <altendky> mav`rik: i can link actual code, but i have a function that takes other functions of defined form.  you can make up your own or use a class i provide that has methods that fill those forms.  so i want to hint both the function and the method and not repeating would be nice.  as opposed to the class/methods being the only place that matches.
[19:48:10] <mav`rik> altendky: So the problem isn't so much a class-with-protocol (defined shape/methods), but that the method/function itself must fulfil a given protocol?
[19:48:50] *** Joins: Hackerpcs (~user@user/hackerpcs)
[19:49:31] <mav`rik> (and the name isn't fixed?)
[19:49:55] <bjs> altendky: I think the PF protocol is unncessary, if you just made `fp: Callable[[int],bool]` you probably get the same error, then I think you have https://github.com/python/mypy/issues/9489 as the issue
[19:51:09] *** Joins: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net)
[19:52:11] <mav`rik> Ugh. I have a horrible feeling I have even read that issue before :)
[19:53:06] <kosh> NoImNotNineVolt, I have not seen anything better then some kind of multiprocessing, scoop, MPI etc
[19:53:15] <altendky> bjs: one point about using `Callable` is that you can't indicate names.
[19:53:15] *** Joins: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC)
[19:53:37] <kosh> NoImNotNineVolt, and all of them pay a high penalty to hand data back to the main process
[19:54:17] <bjs> altendky: I didn't mean you should use Callable I mean that the error isn't because PF is a Protocol (I think) but because mypy is trying to interpret it as a method
[19:55:03] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[19:55:11] *** Quits: AskerX (~AskerX@103.125.235.22) (Quit: Client closed)
[19:55:22] <mav`rik> altendky: I thought you could, with things like `DefaultArg`, and `NamedArge` from mypy_extensions, or do I misunderstand?
[19:55:40] <altendky> bjs: it does have the same error, plus more info https://mypy-play.net/?mypy=latest&python=3.10&flags=strict&gist=a94b53bb0ea314ba01be679135618fe6
[19:56:12] <altendky> mav`rik: i hadn't gone outside of mypy proper, but i'll take a look
[19:56:28] <mav`rik> altendky: https://mypy.readthedocs.io/en/stable/additional_features.html?highlight=callable#extended-callable-types
[19:56:43] <mav`rik> sorry, the callback-protocols
[19:56:55] <bjs> altendky: i'm guessing that the Protocol is the best way then as the first error there is the `self` confusion (and perhaps Protocol was avoiding that)
[19:56:58] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:57:07] <bjs> altendky: the second is more interesting it looks like it thinks the `def fp` is removing the setter
[19:57:29] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 248 seconds)
[19:57:43] <bjs> altendky: e.g. https://bpa.st/7SZQ which fails in mypy because the @property is read-only
[19:57:50] <bjs> whereas the Protocol says you're allowed to assign to it
[19:58:16] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:59:48] *** Joins: srhm (~ascii@user/srhm)
[19:59:51] <bjs> altendky: try make a `class P(Protocol): @property def fp(self) -> FP: ...` instead
[20:00:27] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[20:00:42] <altendky> mav`rik: i missed your :18 messages.  yes, i want the method to implement a interface/protocol and i want to use that same 'hint' elsewhere.
[20:01:08] <altendky> bjs: why does that look familiar...  hmm
[20:01:23] <bjs> altendky: I don't know why it looks familiar to you
[20:01:36] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[20:02:03] <altendky> yup, just a passing observation that it does
[20:02:36] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[20:02:40] <altendky> but it seems to work https://mypy-play.net/?mypy=latest&python=3.10&flags=strict&gist=fbd61c13c4940003edccd3b75cd161f8
[20:03:34] <mago> bjs
[20:03:55] <mago> The last part of your code:
[20:03:56] <mago> with open("wordlist.txt.shuffled", "w")
[20:04:28] <mago> Does that create the wordlist.txt.shuffled file or was it already created by random.shuffle(words)  ?
[20:04:41] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[20:04:48] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[20:04:51] <mago> bjs
[20:05:13] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[20:06:04] <mago> Or anyone else reading, thats the code: https://bpa.st/OKAQ
[20:06:31] *** Joins: sharperguy__ (~sharpergu@2001:1438:4010:3101:10a::3133)
[20:08:36] <altendky> bjs: thanks.  i feel like i got help with this for something else awhile back and forgot the trick.  it seems to be a step forward in the actual code (desert union support)
[20:09:02] <altendky> mav`rik: thanks for talking through this with me and pointing out the mypy-extensions features
[20:09:13] *** Quits: Claire254p (~Claire254@185.231.9.144) (Quit: Client closed)
[20:09:37] *** Quits: sharperguy_ (~sharpergu@2001:16b8:5c0a:2000:9f0d:f3c1:5524:8c0f) (Ping timeout: 268 seconds)
[20:10:11] *** Joins: Macuser (~Macuser@248.sub-174-206-65.myvzw.com)
[20:10:21] <bjs> mago: random.shuffle doesn't do anything with files. The code starts by reading the wordlist.txt file, it loads the words into a Python list in memory, it shuffles that list, then it creates the wordlist.txt.shuffled file and writes the shuffled words into the file and then finally it overwrites the original file with the shuffled one
[20:10:49] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:11:00] <mago> bjs yes i get that, but I want to know how wordlist.txt.shuffled is created?
[20:11:07] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[20:11:11] <bjs> mago: line 13
[20:11:11] <mago> is with open() ?
[20:11:12] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[20:11:29] <bjs> mago: yes, I open it and write to it.  Since it didn't exist it will be created.  That's what "w" means.
[20:11:57] <mago> Thanks bjs Im trying to understand cuz like that i learn..
[20:12:45] <bjs> mago: there are many modes for open(). See https://docs.python.org/3/library/functions.html#open  (https://docs.python.org/ -> Library Reference -> Built-In Functions -> open)
[20:12:52] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[20:13:12] *** Joins: qlixed (~qlixed@181.44.129.13)
[20:14:08] *** Joins: ozone89 (~ozone89@2001:b07:a99:b513:76ef:b47a:a788:422b)
[20:14:19] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[20:14:42] <mago> So far that's what i got in my own code: https://pastebin.com/raw/SWSp9K1b
[20:14:59] <mago> Not much but a start, thanks for help bjs.
[20:15:05] <bjs> mago: uhm,  I'd be careful here your code has a trap in it
[20:15:19] <mago> Trap?
[20:15:39] <bjs> mago: readlines() keeps the newlines on the end of the lines, but the last line might not have had one
[20:15:42] <bjs> so you must be careful
[20:16:10] <nomic> i use open(filename,"r").split("\n")
[20:16:12] <nomic> i dunno why
[20:16:17] <mago> Ok, is good to know i'll write that in a commented line. bjs
[20:16:36] <nomic> thats why
[20:16:50] <nomic> if you use split("\n") .. it addressses the newlines
[20:16:51] <bjs> nomic: mago: see f.read().splitlines()  which gets you a list of the lines without newlines
[20:16:56] <nomic> .readline .. keeps the newlines
[20:16:58] <ozone89> hello!
[20:17:44] <nomic> .split("\n") more concise
[20:17:50] <nomic> n i don't have to remember 'splitlines'
[20:17:51] *** Quits: sebastianos (~sebastian@user/sebastianos) (Read error: Connection reset by peer)
[20:18:01] <nomic> i will contineu to sue .read().split("\n")
[20:18:03] <nomic> use
[20:18:56] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[20:18:59] <ozone89> I know I can make two scripts, each running a flask app on a different port but... can I run two flask from the same script at once?
[20:19:15] <bjs> nomic: what if your lines end in \r\n not just \n
[20:19:24] *** Joins: sebastianos (~sebastian@user/sebastianos)
[20:19:27] <nomic> .. i don't have anything like /r/ in anything anywhere
[20:19:34] <nomic> wth is /r/
[20:19:40] <nomic> no idea. no interest
[20:20:00] <nomic> i have routines rc() and rcl() anyway .. remove controls from stirng and list
[20:20:08] <jinsun> one minor difference between split and splitlines, splitlines removes the last blank if the last line ended with a newline, split won't
[20:20:08] <nomic> nothing like that arrives in my data
[20:20:16] <nomic> like tabs. etc.
[20:20:17] <bjs> NoImNotNineVolt: no the two characters, \r and \n.  CR LF,  aka the carriage-return before the newline too
[20:20:19] <bjs> oops
[20:20:22] <bjs> nomic: no the two characters, \r and \n.  CR LF,  aka the carriage-return before the newline too
[20:20:44] <luckydonald> jinsun TIL
[20:20:44] <nomic> z.
[20:20:47] <bjs> nomic: ?
[20:21:24] <Emil> Hey
[20:21:29] <jinsun> so use split only if you want to keep that last blank in those cases
[20:21:32] *** Joins: mattil (~mattilinn@87-92-142-109.rev.dnainternet.fi)
[20:21:34] <Emil> Is there a way to get a subgrid of a 2d array?
[20:22:05] <jinsun> Emil: numpy?
[20:22:56] *** Joins: fikran (~fikran@user/fikran)
[20:23:56] <fikran> Hi all. I am trying to install a fairly old package I worked on a few years ago, but am getting this issue when trying to install the requirements.txt file. Here is the relevant snippet: https://dpaste.org/tsvx
[20:23:57] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[20:24:17] <fikran> I'm confused if this is a C issue or something is missing?
[20:24:29] *** Quits: ovnicraft (~ovnicraft@181.188.201.67) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:24:51] <jinsun> Emil: if numpy array then you can simply do `arr[start_row:end_row, start_col:end_col]` and remember that the end won't be included
[20:25:32] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:25:46] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[20:27:02] *** Joins: SuperLag (~akulbe@user/superlag)
[20:27:22] <Emil> jinsun: nope, just normal python
[20:28:43] *** Joins: synbiose (~synbiose@user/synbiose)
[20:28:57] <mav`rik> bjs: re: the earlier readlines and missing end-of-lines, the purist in me is gnawing at the bit to suggest that if a file _doesn't_ end in a newline then it's not _technically_ a text file ;)
[20:32:48] *** Joins: ovnicraft (~ovnicraft@181.188.201.67)
[20:35:07] <jinsun> Emil: ok so how did you make the "2d array", list of lists? if list of lists, you'll have to write a comprehension with slices and if condition
[20:35:22] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 256 seconds)
[20:35:27] <jinsun> something like, `[L[start_col:stop_col] for i, L in enumerate(LoL) if start_row <= i < end_row]`
[20:37:13] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[20:38:07] <mago> bjs made my own version and its working: https://pastebin.com/raw/bZAaMSq8
[20:38:15] *** Quits: pan (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:38:38] <mago> Thanks. :)
[20:38:41] *** Joins: pan (~quassel@pankid.club)
[20:38:47] <bjs> mago: I see you have the comment, but I will say again that this goes wrong if your last line doesn't end in a newline
[20:40:28] <mago> bjs I really dont understand what you mean, my  original least doesnt have \n and there's just 4 characters in the last line..
[20:40:36] <mago> readlines seems to put the \n in there..
[20:40:45] <bjs> mago: \n is the newline character
[20:40:54] <bjs> mago: readlines isn't "putting" them there, they're there in your file.
[20:41:29] <mago> My last line ends like that 9999, nothing under it..
[20:42:04] <mago> I mean.. What woudl break the script..? Putting an empty line under the 9999?
[20:42:19] *** Quits: Macuser (~Macuser@248.sub-174-206-65.myvzw.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:42:26] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 272 seconds)
[20:42:27] *** Joins: Betal (~Betal@user/betal)
[20:42:31] *** Joins: CoolerX (~CoolerX@user/coolerx)
[20:42:44] <bjs> mago: i dont have a good resource on hand to explain files so I'm gonna have to try by hand, sorry.  Files aren't made of "lines", they're just a single long line of characters. But there's a special character (often called \n, or newline) which means the line has ended
[20:42:49] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 248 seconds)
[20:43:12] <bjs> mago: readlines isn't "putting" the newline characters there, they are characters (that you probably cannot see just by looking at it with a text editor or whatever) that are actually in the file
[20:43:21] <mago> Ok, so the \n is behind the 9999 but I cant see it in gedit?
[20:43:34] <bjs> mago: I don't know, it might be it might not. gedit is hiding it from you
[20:43:44] <mago> Mmm ok, i think i understand now.
[20:43:55] <bjs> mago: if the last line doesn't end in a newline character, then the readlines() won't have it in that string, so when you shuffle and stick them back together it might be that there are two words that are from two lines but without a newline character between
[20:43:58] <bjs> so they'll just stuck together
[20:44:36] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:45:01] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:45:11] <bjs> mago: using f.read().splitlines() and then f.write("\n".join(words))  will fix that
[20:46:11] *** Quits: ozone89 (~ozone89@2001:b07:a99:b513:76ef:b47a:a788:422b) (Quit: Leaving)
[20:46:42] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 240 seconds)
[20:47:13] *** morguldir is now known as morgulidr
[20:47:18] *** morgulidr is now known as morguldir
[20:49:52] *** Joins: fassl (~fassl@2a02:8388:1987:9380:c874:362a:1527:74e6)
[20:50:02] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 272 seconds)
[20:50:22] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7)
[20:50:52] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:51:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[20:53:12] *** Quits: p-i- (~Ohmu@2403:6200:8870:1a99:c88b:63e3:832e:47e4) (Ping timeout: 272 seconds)
[20:53:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 272 seconds)
[20:54:05] *** Joins: fleabag (~sirpengi@li587-65.members.linode.com)
[20:54:58] *** Quits: mattil (~mattilinn@87-92-142-109.rev.dnainternet.fi) (Read error: Connection reset by peer)
[20:55:42] *** Joins: fikran (~fikran@user/fikran)
[20:56:00] *** Joins: audiocat (~audio@2603-8081-1800-00ad-312c-8a7d-098f-4cc5.res6.spectrum.com)
[20:56:03] *** Joins: Macuser (~Macuser@2600:1003:b442:1f56:107:3a7:16e9:706c)
[20:56:17] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[20:57:54] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Quit: Leaving)
[20:58:06] *** Quits: ovnicraft (~ovnicraft@181.188.201.67) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:58:09] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 276 seconds)
[20:59:47] *** Joins: eichin (sid27120@tinside.irccloud.com)
[20:59:53] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 248 seconds)
[20:59:59] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:00:09] *** Joins: ovnicraft (~ovnicraft@181.188.201.67)
[21:01:59] *** Quits: mago (~mago@87.125.59.149) (Quit: Client closed)
[21:03:36] *** Joins: Pandadub (~Barones@2804:48dc:8500:0:c40f:d26f:c0e2:127b)
[21:03:49] *** Quits: ovnicraft (~ovnicraft@181.188.201.67) (Client Quit)
[21:04:20] *** Joins: ovnicraft (~ovnicraft@181.188.201.67)
[21:04:31] *** Joins: ozone89 (~ozone89@2001:b07:a99:b513:76ef:b47a:a788:422b)
[21:04:54] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[21:06:52] *** Joins: mattil (~mattilinn@87-92-142-109.rev.dnainternet.fi)
[21:07:44] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[21:08:05] *** Joins: Doffi (~doffi@91.132.197.188)
[21:09:02] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:09:58] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[21:10:09] *** Joins: Kvothe (~weechat@user/elodin)
[21:11:11] *** Joins: cheater (~Username@user/cheater)
[21:11:20] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7) (Remote host closed the connection)
[21:12:27] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 276 seconds)
[21:13:23] *** Joins: darksun (~darksun@user/darksun)
[21:13:45] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 248 seconds)
[21:14:25] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 258 seconds)
[21:14:41] *** Joins: Naan (~Naan@user/naan)
[21:16:38] *** Joins: trace987 (~trace@95.90.106.112)
[21:17:00] *** Joins: killown (~killown@user/killown)
[21:17:16] *** Quits: bomb-on (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Ping timeout: 272 seconds)
[21:17:23] <killown> what's up https://bpa.st/H25A ??
[21:17:56] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (Ping timeout: 252 seconds)
[21:18:08] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:18:40] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[21:18:49] *** Quits: ozone89 (~ozone89@2001:b07:a99:b513:76ef:b47a:a788:422b) (Quit: Leaving)
[21:19:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:20:53] <Wooble> killown: did you read the error message? The sizes have to be numbers, not strings.
[21:21:07] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[21:21:11] <killown> oh sorry Wooble thank you
[21:21:15] *** Joins: LiftLeft (~LiftLeft@154.21.28.119)
[21:24:12] *** Joins: Pickchea (~private@user/pickchea)
[21:24:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[21:24:58] *** Quits: aslicedbanjo (~aslicedba@81.141.55.177) (Quit: Leaving.)
[21:25:30] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[21:25:54] <killown> Wooble, https://bpa.st/R4QQ
[21:26:24] <killown> this is the image renamed as test.png https://pngimg.com/uploads/mario/mario_PNG53.png
[21:26:37] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[21:26:41] *** Quits: mattypants (~quassel@66-90-146-141.dyn.grandenetworks.net) (Ping timeout: 258 seconds)
[21:26:59] <killown> Requirement already up-to-date: Pillow in /usr/local/lib/python3.8/dist-packages (8.3.1)
[21:29:40] *** Joins: nate44 (~Nathan22@S0106bcd16583c035.gv.shawcable.net)
[21:31:42] <Wooble> killown: im.thumbnail modifies im in place, it doesn't return a thumbnail.
[21:31:42] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:33:06] *** Joins: netsan (~netsan@user/netsan)
[21:33:19] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[21:34:35] <killown> Wooble, thank you, makes sense
[21:35:31] *** Joins: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com)
[21:35:47] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[21:35:48] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[21:37:07] <ses1984> i'd like to write an integration test that depends on a background process, i want to test that my code is interacting with that process in the way i want, it's an http server
[21:38:11] *** Quits: varaindemian (uid73404@id-73404.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[21:38:25] <ses1984> can i do something like `my_test_server = subprocess.Popen(...) ; with my_test_server: ... ` somewhere in my test py files?
[21:40:18] *** Joins: tijuco (~tijuco@user/tijuco)
[21:42:04] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[21:42:33] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 248 seconds)
[21:42:36] *** Quits: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54) (Ping timeout: 272 seconds)
[21:42:56] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[21:43:15] *** Joins: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54)
[21:44:54] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[21:45:32] *** Joins: c10l (~c10l@89.34.167.207)
[21:46:18] *** Joins: bam32 (~bambams@user/bambams)
[21:47:06] *** Parts: lidenbrock (~lidenbroc@2804:14c:32:8120:a109:dea1:e873:f9a8) ()
[21:49:07] *** Joins: p-i- (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7)
[21:49:12] *** Quits: ovnicraft (~ovnicraft@181.188.201.67) (Read error: Connection reset by peer)
[21:51:09] *** Quits: tijuco (~tijuco@user/tijuco) (Remote host closed the connection)
[21:51:30] *** Joins: tijuco (~tijuco@user/tijuco)
[21:52:22] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 258 seconds)
[21:53:15] *** Quits: mikeliuk84 (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[21:56:06] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 268 seconds)
[21:56:30] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[21:57:11] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:57:50] <sveinse> How can one "mark" a function as a generator without using yield? The use case is an empty function that doesn't yield anything, i.e. empty list, similar to what def fn(): pass would be
[21:58:29] *** Joins: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[21:59:25] *** Quits: netsan (~netsan@user/netsan) (Quit: Leaving)
[21:59:39] <Yhg1s> sveinse: 'if 0: yield'
[21:59:44] *** Joins: netsan (~netsan@user/netsan)
[21:59:46] <bjs> sveinse: you can't, just put a yield even if it's never executed
[21:59:53] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Read error: Connection reset by peer)
[21:59:55] <sveinse> thanks
[22:00:16] *** Quits: netsan (~netsan@user/netsan) (Remote host closed the connection)
[22:00:26] <KirkMcDonald> Or return an empty tuple.
[22:00:37] <bjs> sveinse: you can also `yield from []`
[22:03:12] <sveinse> Are dataclass faster than regular classes and do they consume less memory?
[22:03:18] *** Joins: tannerstirrat (~tannersti@c-76-25-57-28.hsd1.co.comcast.net)
[22:03:42] *** Quits: tannerstirrat (~tannersti@c-76-25-57-28.hsd1.co.comcast.net) (Client Quit)
[22:04:41] *** Quits: tijuco (~tijuco@user/tijuco) (Quit: Leaving)
[22:05:28] *** Joins: roadt (~roadt@36.5.94.204)
[22:06:10] <sveinse> I have 10M+ instances, which makes it both memory and execution time critical. I know numpy is perfect for large arrays, but I'd like to keep to vanilla python if I can.
[22:06:15] *** Joins: node1 (~node1@user/node1)
[22:06:36] <jinsun> there is no performance benefit of dataclass, it just automates creating the dunder methods like __init__ and gives you a regular class
[22:07:11] <sveinse> After setting __slots__, I'm down to approx 360 bytes/records, which is more than half from when I started.
[22:07:34] <bjs> sveinse: what's the minimum amount of memory you could feasibly use
[22:07:38] <bjs> and how far away are you?
[22:08:56] <sveinse> I can live with that, really. At some point the returns with dimish with exponential effort. And I wondered if dataclass was a silver bullet (which is rarely is) before I refactored for it.
[22:09:01] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[22:09:41] <sveinse> damn, my writing skills are bad today
[22:09:56] <bjs> sveinse: it'll be no better than using __slots__,  since all dataclasses is is some code that generates a normal class
[22:10:16] <sveinse> bjs: ok, thanks
[22:10:30] *** Quits: Socra (~Socra@206.217.216.27) (Ping timeout: 268 seconds)
[22:10:38] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e) (Quit: Leaving)
[22:11:47] *** Joins: Socra (~Socra@206.217.216.27)
[22:14:13] *** Quits: trace987 (~trace@95.90.106.112) (Ping timeout: 258 seconds)
[22:14:14] *** Quits: gusto (~Augustus@2620:149:e0:6003::76) (Read error: Connection reset by peer)
[22:14:27] <sveinse> ooi, since str are immutable, does cpython pool them and reuse them, so that all str objects in memory are distinct unique?
[22:14:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:15:17] <Wooble> sveinse: no. but things that vaguely look like identifiers are interned.
[22:16:23] <Wooble> (you *probably* wouldn't want the runtime holding on to every http response your crawler gets over several days of runtime. :) )
[22:19:04] <sveinse> Wooble: haha, no. I didn't mean that it should retain destroyed objs of course. Then you would loose mem pretty quickly. I meant if something has created the str "foobar" and use it, and something elsewhere also creates "foobar", does it have the same id()? That can be easily tested....
[22:19:21] *** Quits: DesCaFeinado (~CaFeINA@2001:8a0:ddef:9e00:4127:b042:79f6:deb6) (Quit: Leaving)
[22:19:36] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:e8d6:b4f8:666:c83e)
[22:19:36] *** Joins: DesCaFeinado (~CaFeINA@2001:8a0:ddef:9e00:4563:153b:eb53:663)
[22:20:05] *** Joins: gusto (~Augustus@109.255.100.54)
[22:20:11] <Wooble> sveinse: but there are no destroyed objects, if you intern them. for "foobar", yes, cpython will reuse it (as an implementation detail that can, but probably won't, change tomorrow.)
[22:20:46] *** Quits: Socra (~Socra@206.217.216.27) (Ping timeout: 268 seconds)
[22:20:55] *** Joins: FatDarrell (~textual@68.91.156.229)
[22:21:07] <sveinse> Wooble: understand. (ooi only, I didn't mean this to be something to rely on)
[22:21:30] *** Quits: rendar (~rendar@user/rendar) ()
[22:21:46] *** Joins: Socra (~Socra@206.217.216.27)
[22:26:14] <sveinse> My 10M+ records contains a large portion of strings which are the same. If cpython are using the same object behind the scene, there wouldn't be any use in optimizing this. Otherwise you could make this into a foreign key into another table containing unique strings, ala what you do for SQL. But we're quickly heading into hairy and smelly optimize-too-specifically-land which is never a good place to be.
[22:26:32] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[22:26:37] *** Joins: dontyouloveshort (~julius@ip5f5bc225.dynamic.kabel-deutschland.de)
[22:26:41] <bjs> sveinse: I mean you can just check if they're the same object under the hood
[22:26:44] <dontyouloveshort> hi
[22:26:50] <bjs> if they're not, you can do some optimization if it's worth it
[22:27:19] <dontyouloveshort> when i run: print(repr(str(item)))   i get:  "b'19:54:48.124423 IP 192.168.0.197.36889 > 192.168.0.1.8000: UDP, length 5\\n'"      what is with the double quoting?
[22:27:31] *** Quits: oscarcp (~CastleDwe@217.194.54.110) (Quit: oscarcp)
[22:27:40] <bjs> dontyouloveshort: because repr gives you the representation which includes quotes
[22:28:02] <bjs> dontyouloveshort: but then you also call str() which turns the item into a string first
[22:28:07] <Yhg1s> dontyouloveshort: item is bytes, so str(item) is actually repr(item). And then you call repr() on that string.
[22:28:32] <bjs> dontyouloveshort: if item is bytes, you'll get an extra layer of quotes.  Just use print(repr(item))  there's never a need to call str(item) too
[22:28:43] <dontyouloveshort> ah ok
[22:29:28] <bjs> dontyouloveshort: if print(repr(item)) still has the double quotes, then there is something else going on :)
[22:29:30] <dontyouloveshort> i was just wondering why:  m = re.match('(?P<time>\d\d:\d\d:\d\d\.\d{6}).*', str(item))       19:00:20.316913 IP 192.168.0.197.55699 > 192.168.0.1.8000: UDP, length 5    does not match, theres probably a high level abstraction for what im doing
[22:29:59] <bjs> dontyouloveshort: what is item?  str(some_bytes) is not how you turn bytes into a str
[22:30:01] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 248 seconds)
[22:30:16] <bjs> you might want  item.decode()
[22:30:30] *** Joins: mexen (uid495612@user/mexen)
[22:30:53] <dontyouloveshort> item is output from tpcdump packed into a queue.Queue
[22:30:53] <Yhg1s> dontyouloveshort: if you want to use regular expression on bytes, your pattern needs to be bytes too.
[22:31:14] <dontyouloveshort> i was thinking of converting it to str first
[22:31:35] *** Joins: bam32_ (~bambams@user/bambams)
[22:31:39] <Yhg1s> dontyouloveshort: are you getting the output from subprocess.Popen?
[22:31:45] <dontyouloveshort> yes
[22:31:52] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[22:31:55] *** Quits: bam32 (~bambams@user/bambams) (Killed (NickServ (GHOST command used by bam32_)))
[22:31:59] *** bam32_ is now known as bam32
[22:32:10] <Yhg1s> dontyouloveshort: you can get subprocess to decode the data for you, by passing text=True
[22:32:35] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[22:33:22] *** Joins: cheater (~Username@user/cheater)
[22:33:30] <dontyouloveshort> alright, text=True fixed it
[22:33:52] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[22:33:58] <dontyouloveshort> gonna read up about the difference between byte strings and normal stirngs
[22:34:41] *** Joins: georgios (~georgios@user/georgios)
[22:34:57] *** Joins: doc|work (~doc@user/doc)
[22:35:08] <doc|work> I've a package that will need to respond differently about an extra_requires on pypi vs conda because the dependency which is deprecated doesn't exist on pypi. I'm thinking the extras requires tries to figure out which package manager it's being installed under and raise an Exception on the one with no package if determining the package manager is possible. Anyone got any better suggestions?
[22:36:10] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[22:37:04] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[22:37:30] *** Joins: sybariten (~jake@157.90.217.120)
[22:37:39] <sybariten> oh hai
[22:38:47] <sybariten> I have the same issue as usual: i have a long dict with just key:value , and i want to sort it. Unfortunately not on value alone, but on value divided by a number from another dictionary.
[22:39:55] <sybariten> this other value (population) , it will be different for each pair of key:value . I have a function to get the population fron that dict, _but_ i need the key (from the first dict) every time. I'm completely lost as how to best write this sorting
[22:40:06] *** Joins: Caesar-EW (~Caesar-EW@84.213.107.109)
[22:40:44] *** Joins: ckdcreation (~ckdCreati@147.55.130.37)
[22:41:05] <hodapp> can't you just go by way of .items()?
[22:41:19] *** Quits: Macuser (~Macuser@2600:1003:b442:1f56:107:3a7:16e9:706c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:41:21] *** Joins: Matheo_bis (~matheo@user/matheo-bis/x-4309430)
[22:42:14] *** Joins: rany (~rany@user/rany)
[22:43:02] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 245 seconds)
[22:43:22] <sybariten> well, maybe...   in an earlier exercise where i sorted it (in a simpler way), i used .items .  sort_numbers = sorted(theDict.items(), key=lambda x: x[1], reverse=True)
[22:43:41] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[22:43:50] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[22:44:53] <jinsun> sybariten: the other dict has same keys as your "long dict" ?
[22:44:57] *** Quits: digilink (~digilink@user/digilink) (Quit: WeeChat 3.2)
[22:45:06] *** Quits: node1 (~node1@user/node1) (Read error: No route to host)
[22:45:21] *** Joins: digilink (~digilink@user/digilink)
[22:45:30] *** Quits: f8e4 (~user@159.89.21.45) (Ping timeout: 240 seconds)
[22:45:58] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Quit: Ping timeout (120 seconds))
[22:46:14] <sybariten> jinsun: yes but they are unfortunately , uh, hidden as "values" .. if that makes sense.
[22:46:19] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:46:27] *** Joins: cryocaustik (~cryocaust@user/cryocaustik)
[22:46:29] *** Joins: f8e4 (~user@159.89.21.45)
[22:46:42] *** Quits: rich (~rich@2a03:4000:3f:f1:b859:16ff:fe45:e87f) (Ping timeout: 240 seconds)
[22:47:05] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Ping timeout: 248 seconds)
[22:47:27] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[22:47:37] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[22:48:46] <jinsun> ok and you said you have a get_population function, does that take key from firrst dict as input and give the population you need from the second dict?
[22:49:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[22:49:45] *** Quits: hyper_dave (~hyper_dav@197.156.107.121) (Ping timeout: 248 seconds)
[22:50:10] *** jess is now known as j
[22:50:28] *** j is now known as jess
[22:50:52] <sybariten> jinsun: main dict     {0: 2.546, 1: 6.583,  2: 65.677, etc  ...  second/helper dict    'Austria': {'area': 83879.0, 'id': 10, 'population': (7723954, 8253656, 8819902)}, 'Azerbaijan': {'area': 86600.0, 'id': 11, 'population': (7242758, 8538610, 845316)}, ....etc
[22:51:41] *** Joins: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de)
[22:52:10] <sybariten> jinsun: i have made getPopulationById() which takes  countryID, countryDict, year   .  CountryID is that key value from the first dict, and also in the second dict...   countrydict could, well, could almost be hardcoded i suppose but well
[22:52:34] <sybariten> and finally year because as you can see there on the second dict, thjere are actually three different population values
[22:53:30] <sybariten> getPopulationById(24, emission_data.country_data, 2005)  ---> 1799077                  ....very exciting in'nit....
[22:54:27] <jinsun> and when you sort the countrDict will always be  emission_data.country_data and year will always be 2005?
[22:55:55] <sybariten> it will definitely always be that countrydict but it could be one out of three years... 1990  2005  2017. But you know what, i actually think i dont need to focus too much on that first, i could pretend it will always be 2005 for instance and imrpove that later
[22:56:09] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 248 seconds)
[22:56:28] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 256 seconds)
[22:56:53] *** Joins: skeld (~skeld@2601:148:200:ac70:7021:6011:d19c:6413)
[22:57:25] <jinsun> so you could do, `sorted(main_dict.items(), key=lambda pair: pair[1]/get_population(pair[0], emission_data.country_data, 2005))` ?
[22:57:50] <sybariten> I'm not sure if some clever lambda function in the sorting could do this...? But, I mean, as i understand it sorting is one thing and what i actually print from that dict is another thing right? I dont want to print these values from the first dict. I mean, basically i could just as well make a new dict1 also, where i just plow through them and rewrite the values
[22:58:36] *** Quits: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de) (Ping timeout: 272 seconds)
[22:58:53] <sybariten> so you'r eusing somehting called pair in your lambda...   is that just a variable or some function?  will a lambda always have a colon like that?
[22:59:10] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[22:59:20] <jinsun> it is just a name, you could call it x
[22:59:30] <sybariten> yeah ok
[23:00:03] <sybariten> pair[1] would be the value there, and you divide it with whatever comes out of my function
[23:00:05] *** Joins: hyper_dave (~hyper_dav@197.156.107.78)
[23:00:21] <jinsun> yup
[23:03:03] *** Quits: dontyouloveshort (~julius@ip5f5bc225.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[23:03:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 248 seconds)
[23:03:10] *** Joins: besnn (~besnn@user/besnn)
[23:04:00] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[23:04:59] *** Joins: fikran (~fikran@user/fikran)
[23:05:26] *** Quits: Deneb (~johnch@93.125.7.51.dyn.plus.net) (Quit: Leaving)
[23:06:27] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[23:06:51] *** Joins: supakeen (~user@python/site-packages/supakeen)
[23:07:06] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:08:48] *** Joins: Akuli (~Akuli@82-203-160-28.bb.dnainternet.fi)
[23:09:02] *** Joins: longstride (~longstrid@69.84.252.41)
[23:10:26] *** Quits: killown (~killown@user/killown) (Quit: Leaving)
[23:10:43] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[23:11:53] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[23:12:53] *** Quits: fassl (~fassl@2a02:8388:1987:9380:c874:362a:1527:74e6) (Quit: Leaving)
[23:13:32] <sybariten> hm, dang, i get an IndexError: list index out of range ...
[23:13:59] <sybariten> something with the getPopulationById, apparently
[23:15:14] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[23:15:24] *** Joins: shad (~shad@user/shad)
[23:15:55] <jinsun> can you paste the code and error?
[23:16:24] <jinsun> not here, on https://bpa.st/+python
[23:17:18] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e)
[23:17:21] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e) (Remote host closed the connection)
[23:18:04] *** Joins: stochasticlalo (~stochasti@2804:29b8:508d:d:dd9e:d83:4e9a:4775)
[23:18:54] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:19:12] *** Quits: longstride (~longstrid@69.84.252.41) (Quit: Client closed)
[23:19:19] *** Joins: mickey8 (~user@user/mickey)
[23:19:57] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[23:20:32] <sybariten> jinsun: hehe the code would not be pretty to paste here... or any of it.   code:  https://bpa.st/4CBQ   data:  https://bpa.st/YC6A   my last error:  https://bpa.st/HR3A
[23:20:49] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: Ping timeout (120 seconds))
[23:20:51] *** Quits: bomb-on_ (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[23:21:14] *** Joins: kenoba (~kenoba@user/kenoba)
[23:21:52] *** Joins: c10l (~c10l@89.34.167.207)
[23:22:04] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[23:23:20] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[23:23:23] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[23:23:39] <Wooble> sybariten: sounds like somewhere in your data has 'population': [ 0 or 1 item list here]
[23:24:13] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e)
[23:24:21] <sybariten> Wooble: could you explain that again?
[23:24:32] *** Quits: nicksloan (sid195124@user/nicksloan) (Read error: Connection reset by peer)
[23:24:41] *** Joins: nicksloan (sid195124@user/nicksloan)
[23:24:55] <jinsun> sybariten: the error is in getting the 2nd item of the population triplet, it has less than 2 items instead of 3, for id 24
[23:25:05] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:25:19] <Wooble> sybariten: your example data in your paste has 'population': (12412311, 25654274, 36296111) but somewhere there's a list, not a tuple, and it's too short of a list...
[23:25:39] <sybariten> jinsun: are you kidding me
[23:25:46] <jinsun> check your data where the id = 24
[23:25:49] *** Joins: oscarcp (~CastleDwe@217.194.54.110)
[23:26:09] <jinsun> ah no 24 worked for you
[23:27:15] <sybariten> yeah 24 is botswana, i see three tuples or what the term ...
[23:27:16] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:27:37] <sybariten> i see three items for id 24 under populatoin.. but maybne elsewhere ?
[23:27:57] *** Quits: rud0lf (rud0lf@user/rud0lf) (Remote host closed the connection)
[23:28:07] *** Joins: rud0lf (rud0lf@user/rud0lf)
[23:28:43] *** Quits: dxrt (~dxrt@user/dxrt) (Quit: ZNC - http://znc.sourceforge.net)
[23:28:55] *** Joins: dxrt (~dxrt@user/dxrt)
[23:29:10] *** Joins: sandb0y (pirate@user/sandb0y)
[23:29:25] *** Quits: xcombelle (~Xavier_Co@abayonne-651-1-41-161.w92-156.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[23:29:30] *** Quits: blackop (~ocloud@user/blackop) (Ping timeout: 240 seconds)
[23:29:31] <jinsun> so then first you have to find the id where it doesn't have 3 items, you could use pdb to find out, or maybe just print the id inside your getPopulationById and see the last id that was printed
[23:29:43] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[23:29:59] *** Joins: blackop (~ocloud@user/blackop)
[23:31:20] <sybariten> i did an ocular inspection now but couldnt see it, lets see if some bash magic can help it become more obvious
[23:32:13] <Wooble> the debug print will be faster :)
[23:33:15] <jinsun> or put that `return details["population"][1]` inside a try: block and `except IndexError: raise ValueError(f"Bad Id: {id}")`
[23:34:17] <sybariten> thatll make sure that its really that problem i have, right?
[23:34:35] <jinsun> replace `id` with `countryID`
[23:34:41] <sybariten> ah, wait, you will even printy which id yes ...
[23:34:50] *** Joins: y1n (~y1n@84-115-64-14.wifi.dynamic.surfer.at)
[23:34:53] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[23:34:57] <jinsun> ya that will give you the exact id that is causing the issue
[23:36:26] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[23:36:33] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[23:36:37] *** Quits: kenoba (~kenoba@user/kenoba) (Read error: Connection reset by peer)
[23:36:40] <meatballs> quit
[23:36:42] <meatballs> oops. sorry!
[23:36:53] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[23:37:01] *** Joins: kenoba (~kenoba@user/kenoba)
[23:37:33] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[23:38:55] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[23:39:35] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:40:06] *** Quits: akk (~akk@75.161.157.26) (Ping timeout: 256 seconds)
[23:40:16] <sybariten> ValueError: Bad Id: 4
[23:40:18] <sybariten> lets see
[23:40:33] <Akuli> i'm using a library that has its own event loop but not really anything to control io, and i want to flush the stdin of a subprocess without blocking the library's event loop
[23:40:39] *** Quits: mattil (~mattilinn@87-92-142-109.rev.dnainternet.fi) (Quit: Leaving)
[23:40:51] <Akuli> is there anything i can do that doesn't freeze even when the subprocess is not reading its stdin?
[23:41:03] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e) (Quit: Leaving)
[23:41:04] <sybariten> Anguilla. It's bloody empty here!!  Gggaah
[23:41:11] *** Quits: korros (~korros@li1845-92.members.linode.com) (Quit: WeeChat 2.8)
[23:41:38] <Wooble> I mean it's population is pretty low but I think they have some people. :)
[23:41:42] *** Joins: henistein (~henistein@2001:8a0:c1b3:6b01:d502:fdf6:12b1:c7b)
[23:41:43] <sybariten> Haha
[23:42:00] <sybariten> Don't think i ever heard of the place! And i'm pretty interested in geography
[23:42:15] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[23:42:54] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[23:43:02] <sybariten> I go directly to our courses discord chat and search for Anguilla - sure enough, in [many moons ago] when the others were struggling with this exercise, people have been mentioning this.
[23:43:22] <Akuli> maybe i'll just make a write queue and a thread that takes messages from the queue and writes and flushes
[23:44:36] <sybariten> my goodness one of the teachers mentions it's on purpose. What kind of satanic ideas are these...
[23:44:41] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 258 seconds)
[23:46:08] *** Joins: drjp (jeanpaul@112-54-174-82.ftth.glasoperator.nl)
[23:47:19] <henistein> I have a question for a long time: When using multidimensional arrays we use arr[x][y] , if we try arr[x, y] it raises an error because it is a tuple. So how can a library like numpy modify the brackets behaviour?
[23:48:25] <sveinse> henistein: because numpy accepts the tuple index arr[(x, y)] as argument to their functions
[23:48:26] <jinsun> henistein: you can make a class and write your own __getattr__ inside that
[23:49:23] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[23:49:29] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 248 seconds)
[23:49:51] <jinsun> ah no __getitem__
[23:50:22] <jinsun> __getatttr__ is for the dot notation
[23:50:27] <sveinse> you can defin.... what he said ^
[23:50:45] <jinsun> henistein: https://docs.python.org/3/reference/datamodel.html#object.__getitem__
[23:50:58] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[23:51:48] *** Quits: kenoba (~kenoba@user/kenoba) (Ping timeout: 272 seconds)
[23:53:53] *** Joins: harwiltz (~harwiltz@modemcable212.231-202-24.mc.videotron.ca)
[23:54:11] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[23:54:18] *** Joins: greedom (~greedom@2001:16b8:32cd:4700:b48a:1f5d:fa8:5e72)
[23:54:31] *** Joins: jokoon (~eio@2a01:e0a:542:e160:30f8:ebee:cb3d:7fb4)
[23:54:31] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[23:54:33] <jokoon> hello
[23:54:42] *** Joins: kenoba (~kenoba@user/kenoba)
[23:54:55] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[23:54:57] <jokoon> how can I get the syntaxerror message stuff returned by eval() ?
[23:55:14] <harwiltz> Hello all. I'm working with a python library that has a very "functional" style. Consequently I find myself writing lots of lambda functions that take the form of something like "lambda x: x.operation_1().operation_2().operation_3()...". How would you go about breaking this up into multiple lines?
[23:55:50] <harwiltz> In java for instance, you can put line breaks before each period, but this doesn't seem to work in python
[23:56:10] <jmcantrell> Make it a regular function
[23:56:35] <harwiltz> jmcantrell: yeah I guess that'll work, but then I would have to define a bunch of intermediate variables
[23:56:45] <jinsun> harwiltz: https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#call-chains
[23:56:53] <harwiltz> jinsun: thanks!
[23:57:17] <jinsun> harwiltz: just write it all in one line, then do `black your_file.py`
[23:57:19] <bjs> jokoon: it doesn't return it, it raises an exception.  In Python exceptions can be caught with a try/except statement.
[23:57:24] *** Quits: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy) (Quit: Client closed)
[23:57:38] <jokoon> bjs, I know, but how can I get the error message?
[23:58:00] <bjs> jokoon: it's part of the exception object, if you catch it you can get the message: `except SyntaxError as e: print(str(e))`
[23:58:12] *** Joins: gloomy_desktop (~ldorigo@81.161.149.37)
[23:58:14] <harwiltz> jinsun: But what is black? Will that code be interpretable by a standard python interpreter/
[23:58:57] *** Joins: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy)
[23:58:58] <bjs> harwiltz: black is just a tool that re-formats your .py files for you
[23:59:03] <jinsun> harwiltz: yes, it just reformats python code to match its own style
[23:59:18] <bjs> people like it and even if you don't use it yourself it can be instructive to see how it would format your code
[23:59:18] <harwiltz> Oh so you actually can split at the periods in python?
[23:59:27] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e)
[23:59:30] <harwiltz> Very neat
