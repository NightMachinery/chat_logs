[00:00:17] <[exa]> Graham31515: ok so, the rearrangement is based on tracing the equation for T(foldl(++))(k, m+1, n). There are 2 parts, first the T(++)(k,n) that "generates the actual work", in our case T(++)(k,n)==Θ(k+n), and T(foldr (++))(k+n, m, n) which recurses, increasing `k` by steps of `n` until `m` hits zero, on the way generating extra instances of the T(++) and then disappearing as Θ(1)
[00:00:35] *** Joins: dcoutts (~duncan@host86-151-44-233.range86-151.btcentralplus.com)
[00:02:51] <[exa]> Graham31515: if you look at all T(++)(k,n) that get generated here, you will have: T(++)(k,n)=Θ(k+n), T(++)(k+n,n)=Θ(k+2n), ...
[00:02:58] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[00:03:03] *** Quits: dcoutts_ (~duncan@host86-151-44-233.range86-151.btcentralplus.com) (Ping timeout: 260 seconds)
[00:03:30] <Graham31515> [exa]: yep, thanks, i can see how that goes
[00:03:41] <[exa]> Graham31515: which is described by the sum there, Σ_0^(m-1) ... 
[00:04:04] <[exa]> and finally you have a look at the beginning, finding that the original `k` is 0, and substitute that
[00:06:08] <Graham31515> i can sort of see how the parts fit together, thanks. But how would one proceed for a more complicated example? This doesn't feel particularly rigorous.
[00:06:33] *** Joins: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[00:06:52] <[exa]> Graham31515: the main counter-intuitive thing there is probably the recursion, kinda prolog-ish order (defining for m+1 instead of using m-1), when one can abstract over that most (haskell-ish) recursion cases get pretty simple
[00:06:53] <Graham31515> i don't see how to fill in the gaps following Bird's notation with T(..)(..) = ...
[00:07:42] <[exa]> for more complicated recursion schemes there's always the master cookbook theorem: https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)
[00:08:24] *** Joins: zmt00 (~zmt00@user/zmt00)
[00:08:38] *** Joins: rawley (~rawley@142.99.241.242)
[00:10:20] *** slac59003 is now known as slack1256
[00:11:07] <[exa]> Graham31515: btw the notation used there is not quite common, but kinda necessary for being able to argue recursively. In cases that do not recurse that easily one usually just writes "for m is the number of the lists, n the size of each list, the algorithm takes O(...m...n...)`
[00:12:00] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[00:13:00] <monochrom> Messing with your mind: You have heard of the Curry-Howard isomorphism. Have you also heard/thought of the Curry-Uncurry isomorphism? It just means that curry and uncurry are inverses to each other. >:)
[00:13:55] <[exa]> Graham31515: another common approach is just giving names, say A(m,n) := T(++)(m,n), F(k,m,n) := T(foldr (++))(k,m,n). The problem then looks much more humanely: F(k,m,n) = A(k,n) + F(k+n, m-1, n)
[00:14:31] *** Joins: ocean (~ocean@ip4d1528c2.dynamic.kabel-deutschland.de)
[00:14:54] <[exa]> monochrom: this implies unhoward-howard co-isomorphism
[00:15:02] <monochrom> hee hee
[00:15:57] <sm> maerwald :) on m1, latest GHC has gone from "only hope" to "shining star". Almost 3x speedup ! Worth working for
[00:16:50] <sm> (and, scratch that yesod issue.. turns out the silly thing landed in stackage nightly yesterday)
[00:17:21] <janus> is it possible to deprecate the construction of a constructor, but not the matching of it? and similarily, i want to deprecate the reading of a record field, but not the setting of it
[00:17:52] <maerwald> janus: PatternSynonyms for the first
[00:18:14] <Graham31515> [exa]: thanks! I'm starting to see how this goes now. And the master theorem looks like exactly what i need to read up on to understand it better!
[00:19:32] <[exa]> janus: people sometimes wrap such stuff in functions to allow a bit of constructor juggling, but I guess you don't have that choice anymore right? :]
[00:19:45] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Remote host closed the connection)
[00:20:08] <janus> [exa]: i think i do have that option, what would be the case where i wouldn't?
[00:20:23] *** Joins: acidjnk (~acidjnk@p200300d0c7049f67fc06a0258b52409e.dip0.t-ipconnect.de)
[00:20:36] <janus> currently trying to figure out why PatternSynonyms help with this...
[00:21:06] <janus> because i can turn off the deprecation warning in the Pattern Synonym, and then when i use there synonym, there is no error?
[00:21:24] <janus> but what prevents me from using it for construction?
[00:21:47] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:23:17] *** Joins: slac15323 (~slack1256@191.126.227.204)
[00:23:22] <[exa]> Graham31515: re master theorem, it gets useful for much more complicated stuff (e.g. it gets you the complexity of strassen matrix multiplication), for base haskell stuff you will probably be good just with visualizing how the work builds up. Logarithmic depth of computations (e.g. mergesort) pretty much tops the intuition required to understand the complexity of an overwhelming part of everyday programming
[00:24:53] <[exa]> janus: not sure honestly, constructors are kinda double-sided by definition so I guess that if you find anything that would allow you to modify just 1 side of that, it's going to be a serious ghc hack.
[00:25:52] *** Quits: slack1256 (~slack1256@186.11.57.103) (Ping timeout: 272 seconds)
[00:25:57] <janus> i understand, but from a software engineering perspective i think it makes sense to make sure you are not 'producing' any deprecated stuff, but you can still 'consume' it
[00:26:28] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[00:26:48] *** Joins: kenran (~kenran@200116b82baeab0017258e66ff76ea55.dip.versatel-1u1.de)
[00:27:29] <janus> but i guess since patterns are readily exchanged for guards that don't work with patterns, it can't be decided which context it is..
[00:27:37] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 260 seconds)
[00:28:15] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[00:28:38] <janus> like if i exchange 'case deprecated of Deprecated -> ...' with '| deprecated == Deprecated = ...'...
[00:28:49] *** Quits: ocean (~ocean@ip4d1528c2.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.4.1)
[00:30:29] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:38:01] *** Joins: slack1256 (~slack1256@186.11.57.103)
[00:40:18] *** Joins: Hash (~Hash@hey.howstoned.ru)
[00:40:28] *** Quits: slac15323 (~slack1256@191.126.227.204) (Ping timeout: 260 seconds)
[00:40:35] *** Joins: dextaa_ (~dextaa@user/dextaa)
[00:41:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:42:32] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[00:43:00] *** Joins: Pickchea (~private@user/pickchea)
[00:43:05] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[00:43:49] <Zemyla> I can't install unordered-containers because the process dies while compiling it.
[00:44:26] *** Lord_of_Life_ is now known as Lord_of_Life
[00:44:32] <tomsmeding> Zemyla: does it run out of memory?
[00:45:10] <maerwald> if your are on windows, the rule of thumb is: cabal build || cabal build || cabal build
[00:45:12] <maerwald> that usually does it
[00:45:34] <tomsmeding> :')
[00:46:08] <maerwald> tomsmeding: https://github.com/haskell/bytestring/blob/master/.github/workflows/ci.yml#L91
[00:46:10] <maerwald> xD
[00:47:25] <tomsmeding> software is just a pile of hacks that sometimes works
[00:49:36] *** Joins: dcoutts_ (~duncan@host86-151-44-233.range86-151.btcentralplus.com)
[00:50:25] <Zemyla> I'm on Linux, and it gets SIGKILLed.
[00:50:44] <tomsmeding> yeah out of memory most likely
[00:51:06] <tomsmeding> sudo fallocate -l 2G /swapfile ; sudo mkswap /swapfile ; sudo swapon /swapfile
[00:51:07] <tomsmeding> then try again
[00:51:21] <tomsmeding> remove the thing after you're done with 'sudo swapoff /swapfile ; sudo rm /swapfile'l
[00:51:27] <tomsmeding> without the l lol
[00:53:06] *** Quits: dcoutts (~duncan@host86-151-44-233.range86-151.btcentralplus.com) (Ping timeout: 272 seconds)
[00:54:04] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[00:55:06] <janus> Zemyla: you can look for the OOM KILLER in dmesg
[00:57:27] <Zemyla> Okay, adding swap worked.
[00:59:24] * tomsmeding has experience building haskell stuff on a 1GB RAM VPS
[01:01:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[01:01:58] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 260 seconds)
[01:03:41] *** Joins: zebrag (~chris@user/zebrag)
[01:04:06] *** Joins: pavonia (~user@user/siracusa)
[01:05:05] *** Quits: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[01:05:23] <tdammers> geekosaur: thanks so far, I'll try #xmonad
[01:08:51] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[01:10:14] <maerwald> tomsmeding: hang on
[01:10:49] <maerwald> I missed two spots
[01:10:52] <tomsmeding> maerwald: am fixing :p
[01:11:07] <tomsmeding> was literally typing out the commit message when you pinged
[01:11:23] <maerwald> when will we see a beta version?
[01:11:44] <tomsmeding> I let my friend audit the bwrap so we're cool :p
[01:11:47] <tomsmeding> half-/s
[01:12:00] <tomsmeding> I'm on the fence whether I trust bwrap enough
[01:12:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:12:18] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[01:12:18] <maerwald> it's developed for that purpose
[01:12:26] <maerwald> giving access to untrusted users
[01:12:49] *** Joins: jakalx (~jakalx@base.jakalx.net)
[01:12:50] <tomsmeding> I know, but it's still relying on the fact that the kernel does the correct separation on all the many contact points
[01:13:09] <tomsmeding> whereas a VM is... okay maybe a VM isn't much better
[01:13:20] <maerwald> VMs have bugs too
[01:13:31] *** Quits: haskl (~haskl@user/haskl) (Ping timeout: 260 seconds)
[01:14:32] <maerwald> and... what's the worst case? There's no sensitive data on that machine I guess. You could also put it on an isolated one and have the backend redirect internally
[01:14:59] <tomsmeding> I have a better idea: let's put this on a dedicated VPS, so the only compromising that can get done is 1. this app, and 2. the rest of the colocs at the server farm if _they_ mess up, but that is very far from my problem
[01:15:04] <tomsmeding> yes
[01:16:26] *** Joins: haskl (~haskl@user/haskl)
[01:18:25] <tomsmeding> maerwald: more DRY more better :p
[01:18:51] <maerwald> I'm not a strong believe in that principle, in fact
[01:19:01] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[01:19:09] <tomsmeding> agreed, actually
[01:19:16] <tomsmeding> but in this case it would have prevented the bug ;)
[01:21:48] <maerwald> who's going to make the CSS great again?
[01:22:09] <maerwald> I feel it's hard to find good frontend devs in Haskell :p
[01:22:14] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[01:22:16] <maerwald> I only know one
[01:22:39] <janus> what is 'a frontend dev in haskell'? is it a person that uses ghcjs?
[01:22:46] <tomsmeding> god no
[01:22:52] <maerwald> lol
[01:23:00] <[exa]> O_o
[01:23:04] * sm speaks pidgin CSS
[01:23:21] <maerwald> did I spell CSS wrong? I actually *meant* CSS :p
[01:23:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:23:49] <sm> maerwaldtomsmeding have you got a live demo yet ? that motivates front end folks
[01:24:05] <tomsmeding> I might set up a live demo very soon
[01:24:15] <sm> \o/
[01:24:22] <maerwald> sm: https://i.imgur.com/pZYs6fN.png
[01:24:33] <tomsmeding> just want to fix 1 more protection/security thing (ulimit memory limit)
[01:24:54] <sm> maerwald: looks fine! ship it!
[01:25:35] <tomsmeding> the overflow of the right column is really painful lol, at least that should be easy to fix with overflow-y: scroll
[01:25:38] <tomsmeding> actually let me fix that right now
[01:25:44] <maerwald> hehe yeah
[01:26:15] <maerwald> I suck so hard at CSS. It gives my anxiety. I can't see any structure in it.
[01:26:29] <maerwald> like chemistry
[01:26:46] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 246 seconds)
[01:26:47] <[exa]> css has the structure of duct tape baklava
[01:26:53] <maerwald> what worries me more is that the editor doesn't support haskell syntax
[01:26:59] <maerwald> and they use their own parser
[01:27:10] <maerwald> so we'd have to write haskell parser in js
[01:27:46] * tomsmeding finds out that it isn't as easy as overflow-y
[01:27:53] <tomsmeding> of course
[01:28:05] <carbolymer> just wrap whole linux & ghc in asm.js 
[01:28:29] <sm> I think CSS is one of those things that's probably worth learning properly for every dev
[01:28:38] <tomsmeding> define properly
[01:28:40] <sm> and I mean to do that any day now
[01:28:47] <DigitalKiwi> manage.hs: stack: createProcess: exec: invalid argument (Bad file descriptor)
[01:28:52] <tomsmeding> I can sort of fight my way through if necessary
[01:29:01] <carbolymer> sm: certainly kernel devs need css in their lives
[01:29:03] <tomsmeding> the _real_ issue is usually that I'm awful at design
[01:29:16] <sm> tomsmeding: reading enough of the basic docs to have a clear sense of things and see the structure
[01:29:28] <DigitalKiwi> https://github.com/Southern-Exposure-Seed-Exchange/southernexposure.com/tree/develop
[01:30:13] <tomsmeding> sm: I suppose I sorta kinda fulfill that criterion?
[01:30:30] <maerwald> sm just wants an excuse to not hire us
[01:30:32] <maerwald> :D
[01:30:54] <geekosaur> Bad file descriptor from exec?! Is this Windows?
[01:31:02] <sm> sorry, you lost me.. and no I should totally hire you
[01:31:29] <maerwald> I think it's a funny idea to ask lots of CSS  questions in a Haskell dev interview
[01:31:31] <geekosaur> DigitalKiwi, ^
[01:31:32] <DigitalKiwi> nixos
[01:31:37] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[01:31:37] <geekosaur> oy
[01:31:57] <sm> tomsmeding: are you really awful at design, or just busy with other things ? 
[01:32:07] <DigitalKiwi> i'm trying to get a haskell environment on windows to test if it's different
[01:32:20] <tomsmeding> sm: well for this playground thing it's actually both, which makes it worse :p
[01:32:35] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:32:43] <maerwald> arjun fixed the ghcup CSS, but I haven't seen him here in a while
[01:33:11] <maerwald> but apparently it was easy for him and I got scolded for doing stupid things
[01:33:19] <sm> I think a lot of us have used a ton of UIs so we have a pretty good idea of good design, or at least what's usable. We usually don't have the know-how to implement it though
[01:34:56] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:35:30] * sm signed up for https://courses.joshwcomeau.com/css-for-js a while back but hasn't got a round tuit
[01:35:47] <carbolymer> s/a lot/some/
[01:36:14] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 250 seconds)
[01:36:26] <maerwald> tomsmeding: maybe call for participation in haskell weekly?
[01:36:32] <carbolymer> the more websites I see, the more convinced I am that UX becomes some ancient knowledge which is getting forgotten
[01:37:06] <tomsmeding> maerwald: not a bad idea actually
[01:37:31] <DigitalKiwi> anyone know how to fix this script?
[01:38:04] <DigitalKiwi> https://stackoverflow.com/questions/41487629/piping-from-stdin-to-process?msclkid=ebf399daae7311ecbca80b7d2c0d940d
[01:38:12] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:38:32] <DigitalKiwi> ...snoyman describes the problem but doesn't actually say afaict how to solve it ;_;
[01:38:40] <sm> good UX doesn't go out of style, you can always find instances of it if you look
[01:39:24] <DigitalKiwi> and fwiw it seems to be working on windows
[01:39:30] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[01:39:44] <DigitalKiwi> soooo linux and/or nixos?
[01:39:57] <DigitalKiwi> i can maybe try some vm
[01:40:35] <monochrom> I thought "UX" was the trendy term, and it was "UI" that was the ancient forgotten term.
[01:41:05] <carbolymer> monochrom: UX is the science behind designing UIs afaik
[01:41:17] <DigitalKiwi> UX is how much you like the UI
[01:41:21] <Zemyla> > runCokleisli (left fc) (Left 1 :| [Right 2, Left 3])
[01:41:23] <lambdabot>  Left (f (1 :| [1,1]))
[01:41:40] <geekosaur> you did fdToHandle and then didn't do anything with the new Handle. it got closed by gc. just delete that line
[01:41:54] <sm> UX is UI + the other things that contribute to user experience, for me anyway
[01:41:54] <geekosaur> you want actual stdin, which getLine is using correctly
[01:41:58] <Zemyla> > cosieve (left fm) (Left 1 :| [Right 2, Left 3])
[01:42:00] <lambdabot>  Left (f (1 :| [3]))
[01:42:56] <janus> sm: but what is an example of something that doesn't contribute to the user experience?
[01:43:27] <sm> janus: non-user-visible implementation details ?
[01:43:31] <geekosaur> DigitalKiwi, ^^
[01:43:48] <geekosaur> last 2 lines I sent
[01:44:16] <DigitalKiwi> let's get something straight here i didn't do anything this is someone elses code lol ;p
[01:44:49] <geekosaur> okay
[01:44:57] <geekosaur> it's still weirdly wrong
[01:45:01] * sm gave a silly circular definition above. UX is User Experience. Pretty clear, no need to complicate it
[01:46:50] <carbolymer> DigitalKiwi: from what I understand what Snoyman is saying, `h` is getting GC'd, which closes stdin? so holding onto `h` for much longer would prevent from closing stdin?
[01:47:58] <tomsmeding> shouldn't thaat "h <- fdToHandle stdInput" line just be removed
[01:48:21] <geekosaur> which is what I said
[01:48:23] <DigitalKiwi> https://github.com/Southern-Exposure-Seed-Exchange/southernexposure.com/blob/develop/manage.hs
[01:48:34] <tomsmeding> ah yes
[01:48:37] <geekosaur> it does nothing except render fd 0 liable for being closed on gc of the unused h
[01:48:40] <carbolymer> yeah
[01:48:50] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[01:49:47] *** Quits: michalz (~michalz@185.246.204.126) (Remote host closed the connection)
[01:50:05] <DigitalKiwi> doesn't have any fdToHandle
[01:50:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:50:43] <carbolymer> DigitalKiwi: so which part of your 461 lines script is failing?
[01:51:11] *** Quits: kenran (~kenran@200116b82baeab0017258e66ff76ea55.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[01:52:22] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[01:52:24] <DigitalKiwi> around 396 does for sure (it fails in different spots depending on what arguments you give)
[01:53:20] <DigitalKiwi> the installing bits
[01:53:52] *** Quits: rawley (~rawley@142.99.241.242) (Remote host closed the connection)
[01:55:17] <DigitalKiwi> but on windows it doesn't have this problem lol it has a different problem
[01:55:34] <DigitalKiwi> and now my hdd is full thanks stack
[01:56:55] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[01:57:31] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[01:58:42] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:59:05] <DigitalKiwi> it's not that i couldn't fill it without you but it would take longer
[01:59:07] <sm> stack-clean-old is good for managing that
[02:00:10] <sm> (long term.. not if you made a too-small new VM)
[02:01:01] <DigitalKiwi> unfortunately my windows 10 laptop main drive is very small
[02:01:11] <sm> ack
[02:01:35] <DigitalKiwi> 107GB lol
[02:02:24] <sm> y'only need about 5 of those eh
[02:02:25] <DigitalKiwi> Transcend (T:) is 474GB though i try to install everything there
[02:02:34] <DigitalKiwi> only have 3 free ;p
[02:02:50] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[02:02:50] <sm> do what my wife does, start deleting photos
[02:02:54] <DigitalKiwi> i should get a new drive lol
[02:03:22] <DigitalKiwi> all 1.49MB of screenshots
[02:10:16] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[02:12:19] <tomsmeding> aaaaaaah i give up with css, sm I retract my claim of meager css skill, I have zero
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:12:56] <hpc> but you know that you know nothing
[02:13:02] <tomsmeding> now I do
[02:13:09] <hpc> if socrates has taught me anything, it's that you're now better than jon snow
[02:13:12] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:13:20] <tomsmeding> lol
[02:13:40] <monochrom> Wait what does this have to do with jon snow?
[02:14:15] <hpc> "you know nothing jon snow" was a frequently repeated line in GoT
[02:14:23] <monochrom> haha OK
[02:15:01] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:15:22] *** Joins: jtm (~jtm@user/jtm)
[02:17:31] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[02:20:24] <Zemyla> @let import Data.Profunctor.Traversing
[02:20:25] <lambdabot>  <no location info>: error:
[02:20:25] <lambdabot>      The package (base-orphans-0.8.2) is required to be trusted but it isn't!
[02:20:48] <Zemyla> Why is this not (a) trusted, and (b) reporting as a Profunctor?
[02:21:41] <hpc> in lambdabot, or in your own packaging?
[02:21:48] <DigitalKiwi> i just use twitter bootstrap and my websites went from plain text to acceptable lol
[02:23:43] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[02:24:24] <Zemyla> In lambdabot. I want to include it.
[02:25:24] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:b8bb:8dc:5301:55cc) (Remote host closed the connection)
[02:25:30] <Zemyla> But yeah, the fact that it reports as being in base-orphans rather than profunctors is sus.
[02:25:35] <geekosaur> % import Data.Profunctor.Traversing
[02:25:35] <yahb> geekosaur: 
[02:28:58] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[02:34:47] *** Quits: juri_ (~juri@178.63.35.222) (Ping timeout: 268 seconds)
[02:36:55] <Franciman> is there any connection between laziness and delimited continuations?
[02:39:01] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:40:08] *** Quits: slack1256 (~slack1256@186.11.57.103) (Ping timeout: 272 seconds)
[02:45:59] *** Joins: juri_ (~juri@178.63.35.222)
[02:50:41] <sm> tomsmeding: once it's live I'll test my CSS skillz
[02:52:53] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[02:54:37] *** Quits: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 246 seconds)
[02:54:53] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-d1c9-95f0-ca37-6e6f.res6.spectrum.com) (Remote host closed the connection)
[02:55:24] <unit73e> ugh.. I dislike css with passion
[02:55:34] <unit73e> well, the web in general
[02:56:02] <hpc> i find css to be relatively nice, but not objectively nice
[02:56:14] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:56:30] <hpc> although i also run noscript :P
[02:58:05] <tomsmeding> sm: I'm going to bed now but in case it finishes compiling correctly in half an hour or something, http://play-haskell.tomsmeding.com:8123
[02:58:31] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[02:58:37] <tomsmeding> (in case you get redirected to my homepage, http://78.47.27.56:8123)
[02:59:02] <unit73e> css is a poorly implemented good idea, html isn't being used for what it was supposed to, and javascript is a hack job that resulted in lots of strange code and people still trying to fix it. could have been 100% declarative. just my small rant.
[03:00:00] <unit73e> a useless rant because everything has some flaw
[03:02:26] <hpc> javascript makes a lot more sense once you realize it was originally going to be in the lisp family
[03:02:50] <hpc> then some execs at netscape wanted to cash in on the "java" name, oh and nobody was going to ever want to type that many parens
[03:03:27] <hpc> now instead they write (function(){}); instead :D
[03:03:44] <unit73e> Franciman, I know the original idea of laziness was to solve composition so I'd say yes but it's sort of a subset
[03:04:21] <unit73e> that does make some sense given the prototype nature of javascript
[03:04:34] <unit73e> although nowadays most devs use classes
[03:07:10] <Zemyla> Does anyone use delimited continuations? They aren't offered in an MT
[03:07:20] <Zemyla> MTL-style fashion.
[03:07:44] <abastro[m]> So JS departured too much from lisp style now
[03:07:58] *** Quits: acidjnk (~acidjnk@p200300d0c7049f67fc06a0258b52409e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[03:08:15] <abastro[m]> I thought callCC is kind of like delimited continuation
[03:08:47] <geekosaur> lisp didn't want it and java's afraid it'll take over? :þ
[03:08:58] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 250 seconds)
[03:09:20] <janus> Zemyla: what would it mean to have them in MTL style? with type classes?
[03:09:36] <janus> and n^2 instances?
[03:09:42] <sm> 👍️
[03:10:15] <Zemyla> Yeah. The only continuation typeclass is MonadCont, which provides escaping continuations.
[03:11:10] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Quit: ...)
[03:11:16] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[03:11:16] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[03:11:16] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[03:13:51] <int-e> Zemyla: It was complaining about base-orphans because Data.Profunctor.Traversing imports Data.Orphans, and relies on that module to be trusted in order to be inferred safe
[03:14:01] <Zemyla> :t Mealy
[03:14:01] <lambdabot> error: Data constructor not in scope: Mealy
[03:15:04] <int-e> Zemyla: base-orphans wasn't trusted because I minimized the list of packages to be trusted to cover just what's imported by default... but it's silly to distrust a package that provides instances transitively as soon as it's imported by a single module (profunctor *is* trusted) so I changed it now...
[03:16:24] <Zemyla> @let import Data.Profunctor,Traversing
[03:16:25] <lambdabot>  Parse failed: Parse error: ,
[03:16:31] <tomsmeding> sm: correction, put /play after those urls
[03:16:31] <Zemyla> @let import Data.Profunctor.Traversing
[03:16:32] <lambdabot>  Defined.
[03:16:37] <int-e> or hmm, no, profunctors used to be trusted but isn't at this time... is it all inferred safe now? I don't know.
[03:16:40] <tomsmeding> (not yet compiled)
[03:20:25] <int-e> Btw I saw this by poor chance... highlighting me for lambdabot issues might help getting my attention :)
[03:20:33] <int-e> *pure
[03:20:44] <int-e> (and now... off to bed)
[03:28:19] <tomsmeding> maerwald: sm: pastebin-haskell depends on libarchive with a version that's too new for ubuntu 20.04, so it doesn't work, more potentially later this week :p
[03:29:47] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:32:21] *** Joins: cosimone` (~user@93-44-187-176.ip98.fastwebnet.it)
[03:33:16] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 245 seconds)
[03:35:41] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 256 seconds)
[03:37:47] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[03:38:53] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4.1)
[03:41:34] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[03:42:30] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[03:42:50] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[03:47:00] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[03:47:53] <mstksg> is there a nice way to write really fast finite state machine
[03:47:56] <mstksg> oops
[03:48:00] *** mstksg is now known as jle`
[03:48:03] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-e11f-0c89-4074-605e.res6.spectrum.com)
[03:48:04] <jle`> ok
[03:48:16] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[03:48:48] <DigitalKiwi> ugh i still can't figure out how to get this stack script to work :(
[03:49:21] <nosewings> does anyone have experience with generic-data-surgery?
[03:50:45] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[03:52:09] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.235)
[03:53:04] <hpc> does it give "order of operations" a whole new meaning? :P
[03:54:09] <abastro[m]> Is this haskell being bad or something:
[03:54:09] <abastro[m]> https://eli.thegreenplace.net/2018/more-thoughts-on-the-expression-problem-in-haskell/
[03:54:32] <DigitalKiwi> alternatively does anyone know of some haskell ecommerce solutions
[03:55:03] <dminuoso> abastro[m]: Not reallz.
[03:55:07] <DigitalKiwi> davean: is your shopify still working?
[03:55:15] <hpc> abastro[m]: i don't think there's any language out there that adequately solves the expression problem
[03:55:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:950:287b:c4be:ac00) (Ping timeout: 260 seconds)
[03:55:40] <abastro[m]> Well they provide an example of clojure
[03:55:49] <abastro[m]> Which cleanly solves rbe problem
[03:55:56] <dminuoso> For some value of "cleanly"
[03:56:26] <dminuoso> Of course if you drop all notions of typing and just use generic hashmaps for *everything*, then yeah.. expression problem doesnt exist.
[03:56:26] <abastro[m]> Well at least the author claims it
[03:56:33] <abastro[m]> And it looks clean enough to me
[03:56:51] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.235) (Ping timeout: 260 seconds)
[03:56:58] <dminuoso> Well, it works precisely because the expression problem is about trading the difficulty of adding new types against adding new operations.
[03:57:13] <dminuoso> In strongly typed languages one is usually going to be simple, while the other is hard
[03:57:26] <dminuoso> Clojure works precisely because its untyped, so Im not convinced its a useful example
[03:57:40] <dminuoso> In principle the clojure trick can be done in haskell too
[03:58:04] <dminuoso> Just pass everything as `Map Dynamic Dynamic`, and have everything output `Map Dynamic Dynamic`
[03:58:12] <hpc> over time i have found that if you want something to be open in both dimensions, the idea of it isn't defined well enough to begin with
[03:58:16] <dminuoso> If you think about this for a second you will very rapidly realize this is not a clean solution.
[03:58:19] <dminuoso> It's just avoiding the problem
[03:59:19] <abastro[m]> How do you do the Map Dynamic Dynamic approach
[03:59:35] *** Joins: Axman6 (~Axman6@user/axman6)
[03:59:41] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:950:287b:c4be:ac00)
[03:59:57] <abastro[m]> Also it's not like the author fail to put some thought in the post
[03:59:57] <dminuoso> abastro[m]: Here, my libraries interface is this: `makeThing :: String -> Int -> Map Dynamic Dynamic`
[04:00:06] <abastro[m]> Surely they would have put lots of thought
[04:00:12] <dminuoso> I promie the return interface is *extensible* by me without breaking your compiler
[04:00:16] <dminuoso> And operations by you are exdtensible.
[04:00:37] <abastro[m]> What is `Dynamic`
[04:00:53] <hpc> Dynamic is the "i give up" type - it can have anything in it
[04:01:03] <dminuoso> What clojure has, essentially.
[04:01:04] <geekosaur> see Data.Dynamic
[04:01:08] <hpc> without having to actually know the type statically like a type variable
[04:01:28] <dminuoso> % import Data.Dynamic
[04:01:28] <yahb> dminuoso: 
[04:01:42] <geekosaur> the only requirement it has is thatyour type be Typeable, which ghc forces these days anyway
[04:01:48] <dminuoso> % x :: [Dynamic]; x = [toDyn (5 :: Integer), toDyn "foobar", toDyn c]
[04:01:48] <yahb> dminuoso: ; <interactive>:4:66: error: Variable not in scope: c
[04:01:51] <dminuoso> % x :: [Dynamic]; x = [toDyn (5 :: Integer), toDyn "foobar", toDyn 'c']
[04:01:51] <yahb> dminuoso: 
[04:01:55] <abastro[m]> Oh it exists in base
[04:02:14] <dminuoso> abastro[m]: So you can see, you can do a simple clojure style heterogenous list (or map) just fine in haskell.
[04:02:33] <abastro[m]> Though I mean, obviously it takes more work than clojure
[04:03:01] <dminuoso> abastro[m]: On the other hand we make you force to admit that if you expect a particular thing to be String to deal with the possibility that it may not. *shrugs*
[04:03:17] <dminuoso> Because realistically the only way to get the value back again is
[04:03:20] <dminuoso> % :t fromDyn
[04:03:20] <yahb> dminuoso: Typeable a => Dynamic -> a -> a
[04:03:22] <dminuoso> % :t fromDynamic
[04:03:22] <yahb> dminuoso: Typeable a => Dynamic -> Maybe a
[04:03:33] <monochrom> Dynamic lacks Eq and Ord, you can't even do associative lists.
[04:03:50] <dminuoso> Oh! Well I guess I can do `Map String Dynamic` then.
[04:03:53] <hpc> you can if you error on non-string keys
[04:03:53] <dminuoso> Which is good enough
[04:04:11] <hpc> dminuoso: not good enough! what if you want someone to be able to accidentally write an error into their code :P
[04:04:19] <monochrom> Falling back to String is sad, but haha.
[04:04:28] <dminuoso> abastro[m]: Anyway, the point is not that clojure can do this more simply - ask yourself rather whether this is an actual "solution" to the expression problem
[04:04:50] <abastro[m]> Well, the author claims it is
[04:05:05] <abastro[m]> And I am yet to be convinced otherwise tbh
[04:05:09] <dminuoso> Expression problem is something that affects untyped languages.
[04:05:17] <dminuoso> *typed err
[04:05:26] <dminuoso> It's fundamentally a typed language problem. To claim that an untyped language solves this is just ignorance.
[04:05:27] <abastro[m]> Oh right, actually
[04:05:28] <dminuoso> Sorry.
[04:05:50] <monochrom> Wait how does Dynamic or Map Dynamic have anything to do with the expression problem in the first place? Nevermind whether it is a solution.
[04:05:57] <abastro[m]> That was what I agree, by sacrificing strong typing you can avoid expression problem
[04:06:13] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[04:06:35] <dminuoso> monochrom: Well, if my interface is not some ADT but just a `Map String Dynamic`, then I can freely extend that object with more keys without causing compiler errors.. and you can also just freely extend operations on it..
[04:06:49] <monochrom> Or is this some kind of "if you don't expect correctness, then there is no software crisis" tautology?
[04:06:50] <abastro[m]> Dynamically typed language solve it in that it avoids the problem
[04:07:20] <jackdk> monochrom: sounds like it to me
[04:07:28] <hpc> monochrom: i have no types and i must scream?
[04:07:47] <monochrom> You have no types and you must Scheme. >:)
[04:07:51] <abastro[m]> Which is quite usable in that case it seems.
[04:07:55] <hpc> ah crap, that was the joke
[04:08:15] <hpc> dynamic typing never avoids the problem
[04:08:18] <dminuoso> abastro[m]: Id say the expression problem has a third dimension and clojure is quite negative on that dimension.
[04:08:39] <hpc> no matter what the problem is, imo
[04:08:42] <abastro[m]> Hm what is the third dimension?
[04:09:02] <abastro[m]> Uh dynamic does avoid the problem doesn't it
[04:09:15] <abastro[m]> Because it does not employ the fixed type
[04:09:33] <hpc> the type is still there, in your mind as you are reading
[04:09:44] <abastro[m]> (The author also mentions python being bad at it btw, by having monkey patching)
[04:10:06] <dminuoso> abastro[m]: So if we invert the problem into asking "how many guarantees can we get from the compiler", then its that haskell gives us the guarantee that the data interface hasnt changed, and in languages like java you get the guarantee that operations generally dont have to change if you extend your data type.
[04:10:13] <dminuoso> abastro[m]: then in clojure you dont get any guarantees.
[04:10:15] <abastro[m]> Yea I mean the imaginary type is still easily expansible
[04:10:46] <hpc> but how do you know it's that type?
[04:10:49] <monochrom> "The Phantom [of the] Type is inside my mind" :)
[04:10:57] <hpc> it could be some entirely other type
[04:11:10] <abastro[m]> I see, guarantee is kind of the thing dynamic language compromises for the flexibility
[04:12:04] <hpc> there's a good saying that applies here, a C programmer knows the cost of everything and the value of nothing
[04:12:08] <abastro[m]> Anyway the author is at least being fair to everyone, aren't they
[04:12:26] <hpc> (meaning you know how many cycles a bitshift or whatever might take, but not what the result will be)
[04:12:31] <hpc> similar with type systems
[04:13:32] <abastro[m]> <del>Haskell programmers know value of everything but cost of nothing</del>
[04:13:34] <monochrom> mtl = I know the kind of everything but the type of nothing :)
[04:14:11] <dminuoso> @quote monochrom dialectic
[04:14:11] <lambdabot> monochrom says: Programming is a dialectic class struggle between the author and the user.  My freedom is your slavery. Your ignorance is my strength.
[04:14:32] <hpc> perhaps dynamic types are like gymnasts - infinitely flexible but they can't help you get a couch upstairs
[04:15:30] <dminuoso> abastro[m]: Try working with `Map String Dynamic`, and evaluate it - but try and not get influenced by the additional noise of `toDyn` or `fromDyn`. Try it for a day, and tell me if you like writing software with that. :-)
[04:15:42] <dminuoso> That is, use it in place of ADTs.
[04:16:07] <hpc> in fact, you can't even write type signatures
[04:16:12] <abastro[m]> Clojure has better ergonomics at dealing with these dynamic types, no?
[04:16:25] <nosewings> do get influenced a little bit by `fromDyn`, because that makes explicit every point where you'd be maing an implicit assumption in a dynamically-typed language
[04:16:26] <hpc> and turn on deferred type errors, for the real experience
[04:17:10] <hpc> hah, that's a good point
[04:17:15] <hpc> every fromDyn is another 100 unit tests
[04:17:19] <abastro[m]> Idk, I don't want to be too judgy against other languages I do not know much
[04:17:58] <abastro[m]> Also I want to not dismiss a blog post which seems well-thought out and well-written as well
[04:18:33] <monochrom> well-thought-out and well-written are not enough.
[04:18:37] <hpc> abastro[m]: do the opposite, i think - don't accept what's written until you try it out, no matter how well-written it is
[04:18:45] <monochrom> You also need well-informed and unbiased.
[04:19:05] <hpc> to do otherwise is to invite https://en.wikipedia.org/wiki/Replication_crisis
[04:19:38] <hpc> (that includes everything discussed here)
[04:19:38] <monochrom> The conjunction of all those four is so rare you can safely just ignore all blogs.
[04:19:49] <monochrom> which is what I do.
[04:19:55] <abastro[m]> Well-informed is hard though
[04:20:04] <abastro[m]> I mean that way you'd ignore everything
[04:20:15] <hpc> until you evaluate the idea yourself it won't really be in your brain anyway
[04:20:18] <hpc> not in any usable form
[04:20:47] <monochrom> The statement "with no static typing there is no expression problem" is at the same time both true and showing a bias.
[04:21:00] <abastro[m]> Perhaps I wanted to give the blog a bit more credit because it got quite much upvotes in r/haskell
[04:21:16] <monochrom> As dminuoso explained, how about letting a type check watch your six.
[04:21:29] <monochrom> s/a type check/a type checker/
[04:21:42] <abastro[m]> Well, the blogger just said that clojure solved expression problem
[04:22:10] <abastro[m]> And that it is a hard problem in general
[04:22:32] <hpc> i didn't see any clojure code in that blog post, btw
[04:22:45] <dminuoso> Sometimes I do think that "dynamic typing" is grossly misleading and just framing. "Dynamic" sounds very positive, where "static" sounds constraining and rigid. Not quick.
[04:22:46] <abastro[m]> Oh, it has a linked post
[04:23:03] <dminuoso> It's weird because you generally wouldn't say runtime crashes are *dynamic* tests and test suites *static* tests.
[04:23:10] <dminuoso> But here we are, we do live in this world.
[04:23:14] <abastro[m]> https://eli.thegreenplace.net/2016/the-expression-problem-and-its-solutions/
[04:23:57] <hpc> hmm, maybe the blog is poorly styled or noscript is interfering or something - i couldn't find that link
[04:24:40] <abastro[m]> There are school of thought that good test suites could replace typing
[04:24:46] <abastro[m]> Type system*
[04:25:10] <dminuoso> The moment one equates a type system as a test suite, it should become immediately clear why doing this at runtime is not convincing to some.
[04:25:18] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[04:25:23] <hpc> what is "good"?
[04:25:29] <hpc> does your compiler write the test suite?
[04:25:36] <dminuoso> abastro[m]: type systems *are* test suites of a kind.
[04:25:47] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Max SendQ exceeded)
[04:25:53] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[04:25:59] <hpc> good subroutines could just as easily replace higher-order functions
[04:26:05] <abastro[m]> No, you write it as part of specification
[04:26:10] <hpc> good registers can replace memory addressing
[04:26:15] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[04:26:18] <abastro[m]> Also gives more flexibility and freedom
[04:26:31] <dminuoso> A type checker accepting `f :: String -> Int`, asserts that both this function *exactly* takes a String, and doesnt treat it as an Int, and it produces an Int, not a Float. And it asserts its used correctly accordingly in all call sites.
[04:26:38] <Axman6> Johnny SSA, and the infinite registers
[04:26:42] <monochrom> I think programmers are failing at testing, too.
[04:26:54] <hpc> monochrom: you just don't TDD :P
[04:26:58] <dminuoso> abastro[m]: Do you really think you can write a test suite that dynamically asserts this property?
[04:27:05] <dminuoso> I mean yeah, with instrumentation you can.
[04:27:08] <abastro[m]> Well they are certainly fine earning money at least
[04:28:15] <abastro[m]> I browse Programming Languages subreddit from time to time, and every so often there is a post about suggesting to replace type system with runnable constraints
[04:28:17] <abastro[m]> Constraints like test
[04:28:25] <hpc> fun fact: using "they are making money doing it" as an argument for correctness requires the efficient market hypothesis, which is true iff p=np - https://arxiv.org/pdf/1002.2284.pdf
[04:28:35] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:a3d9:5253:a1a8:660f) (Ping timeout: 252 seconds)
[04:28:38] <monochrom> It is relatively easy to make money, compared to doing things right.  https://danluu.com/nothing-works/
[04:28:58] <hpc> if p=np we don't need type systems
[04:28:59] <hpc> qed
[04:30:18] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[04:30:19] <geekosaur> aren't there already languages that work that way? (sather?)
[04:30:36] <abastro[m]> IIRC yes
[04:31:11] <hpc> all unit tests are runnable constraints, just not in a language that looks particularly like constraints
[04:31:21] <hpc> maybe if it was prolog
[04:31:24] <dminuoso> What does "runnable constraint" even mean?
[04:32:46] <abastro[m]> Btw this post comes to my mind
[04:32:46] <abastro[m]> https://hirrolot.github.io/posts/why-static-languages-suffer-from-complexity
[04:36:12] * dminuoso finds the vast majority of blogs to be not readworthy
[04:37:13] <abastro[m]> Why tho
[04:37:27] <abastro[m]> It at least reveals various perspectives of ppl
[04:37:39] <dminuoso> I find that published papers generally have a higher chance to fit in the 4 categories monochrom mentioned.
[04:37:45] <jackdk> Because someone said "you should blog, it's good for your career", so now everyone blogs, and the signal is lost in the noise
[04:37:53] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Ping timeout: 260 seconds)
[04:38:15] <geekosaur> and every wrong opinion out there is now broadcast to everyone
[04:38:21] <hpc> a person's perspective can be anything
[04:38:27] <monochrom> Frankly I am not interested in the perspectives of flatearthers and antivaxxers, for example.
[04:38:27] <hpc> see also: social networks :P
[04:38:30] <dminuoso> Mostly because people tend to spend a great deal of time on papers, there's usually peer review, there's cited literature, there's a standard format by which I can quickly get a gist of its content by skimming its abstracft and conclusions.
[04:38:46] <monochrom> Just examples to show that a ton of perspectives are valueless.
[04:39:12] <jackdk> monochrom: you just need to do the research. Then you'll understand how the lizards living inside the hollow flat earth established their system of control.
[04:39:32] <hpc> @quote staircase
[04:39:32] <lambdabot> hpc says: mountains are a lie perpetrated by big staircase
[04:39:53] <jackdk> That makes my day
[04:39:54] <monochrom> Human nature being human nature, programmers' blogs are no different. Like I said, failing in well-informed and unbiased, as most humans do.
[04:41:18] <abastro[m]> Well yep but it is how the world today runs
[04:41:31] <abastro[m]> Vast majority of ppl do not read papers
[04:42:24] <dminuoso> The world is run on technology whose foundation is in academia, though.
[04:42:57] *** Quits: fendor_ (~fendor@77.119.209.169.wireless.dyn.drei.com) (Remote host closed the connection)
[04:43:08] <abastro[m]> I often hear that academia is too slow, so technology is detached nowadays
[04:43:25] <abastro[m]> And companies do their own research if needed
[04:43:39] <abastro[m]> I mean, otherwise I cannot comprehend Go
[04:43:40] *** Joins: sayola (~vekto@dslb-002-201-085-116.002.201.pools.vodafone-ip.de)
[04:43:49] *** Joins: fendor_ (~fendor@77.119.209.169.wireless.dyn.drei.com)
[04:43:54] <jackdk> Go is not a product of research
[04:43:55] <abastro[m]> The very existence of it
[04:44:02] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Quit: Ping timeout (120 seconds))
[04:44:12] <monochrom> Before the web, you could have rightfully bet that if someone bothered to publish a book through a large publisher, then just all the hurdles of the process were enough screening that even if eventually the book proved to be wrong, you would still get some value out of going through the reading and refuting, for example maybe it's only partly wrong or it made some good points.  That would be what you call "at least some perspective".
[04:44:34] <abastro[m]> I mean, what does it indicate if not detachment of industry from research?
[04:44:36] *** Quits: paul1 (~kaskal@2001:4bb8:2e0:b5bd:e3c0:d71b:f32:84d8) (Ping timeout: 240 seconds)
[04:44:37] <dminuoso> Go was designed by Google as a means to hire masses of young developers. So its design was centered around "make this teachable to people out of high school in under three weeks" (a bit of a hyperbole here, but I hope you get the idea)
[04:44:40] <monochrom> Today, it's so cheap to just shout on the internet, you can't bet like that anymore.
[04:44:43] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[04:44:54] *** Quits: sayola1 (~vekto@dslb-002-201-085-116.002.201.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[04:44:56] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[04:45:02] <hpc> dminuoso: not much hyperbole
[04:45:15] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[04:45:32] <hpc> i would put maybe a factor of 50% either way on 3 weeks, and that's it
[04:45:37] *** Joins: kaskal (~kaskal@2001:4bb8:2e0:b5bd:e3c0:d71b:f32:84d8)
[04:45:47] <dminuoso> And I dont mean it to critize, Go exceeded that design goal.
[04:46:11] <dminuoso> Don't let the trolly gopher mascot side track you. :)
[04:46:28] <monochrom> I thought it was "make the language so easy that people out of high school can write a compiler for it under three weeks" >:)
[04:46:30] <hpc> in any event, most of what people perceive as corporate "research" is just discovering the right application for the right academic thing
[04:46:31] <abastro[m]> I wonder there was a branch of PL dedicated for learn-ability
[04:46:57] <hpc> to use another google example, mapreduce has it right in the name
[04:47:06] <hpc> they were not even remotely close to doing original research there
[04:47:07] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:47:15] <abastro[m]> Which research is `Go` based on
[04:47:28] <dminuoso> abastro[m]: companies do their own research not because of speed, but because of financial interests.
[04:47:30] <abastro[m]> I mean some are from research, yes
[04:47:34] <abastro[m]> Tho others?
[04:47:47] <dminuoso> Why publish a result? That would enable competitors to use your findings.
[04:48:15] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[04:48:19] <hpc> everything in go is basically algol, including the concurrency primitives - https://en.wikipedia.org/wiki/ALGOL_68#par:_Parallel_processing
[04:48:31] <dminuoso> The only way companies can usually fund research is by keeping results under a tight lock, getting patents, and then hoping they get to the goal faster than the competetion.
[04:48:45] *** Joins: HotblackDesiato_ (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[04:48:56] *** Quits: stiell_ (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 240 seconds)
[04:49:15] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 240 seconds)
[04:49:22] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Remote host closed the connection)
[04:49:26] <dminuoso> And usually the private sector has *tons* more money. A lot of research in universities is funded either by the private sector (in which case there's often agreements that keep the resulting master thesis secret), or by research grants, which are extremely limited.
[04:49:30] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[04:49:45] *** Joins: stiell_ (~stiell@gateway/tor-sasl/stiell)
[04:49:48] <dminuoso> This applies particularly to high tech
[04:49:57] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[04:50:03] <hpc> probably the last truly effective bit of "research" to come out of industry was packet switching from bell labs
[04:50:09] *** Quits: Trattue (~Trattue@152.70.182.158) (Ping timeout: 240 seconds)
[04:50:09] *** Quits: feliix42_ (~felix@gibbs.uberspace.de) (Ping timeout: 240 seconds)
[04:50:09] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[04:50:19] *** Joins: feliix42 (~felix@gibbs.uberspace.de)
[04:50:34] <Axman6> Hmmm, anyone else just have a bunch of messages arrive all at once?
[04:50:46] *** Joins: Trattue (~Trattue@152.70.182.158)
[04:50:53] <monochrom> Yeah, blaming academic research to be slow is a mixture of blaming the victim and denying that doing things properly is slow.
[04:51:09] <Axman6> I have nothing between 15 past and 20 pastm, then about 20 messages all together
[04:51:37] <hpc> Axman6: just you
[04:51:38] *** Joins: img (~img@2405:6580:b1c0:2500:7fee:4a8a:9cab:420)
[04:51:38] *** Quits: img (~img@2405:6580:b1c0:2500:7fee:4a8a:9cab:420) (Changing host)
[04:51:38] *** Joins: img (~img@user/img)
[04:51:44] <abastro[m]> I mean see the projection of university going largely out of fashion due to detachment from industry
[04:51:44] <abastro[m]> Due to fast-moving world
[04:51:44] <abastro[m]> Wait wha
[04:51:44] <abastro[m]> Go was (nearly) algol?
[04:51:44] <abastro[m]> Yea, by research of industry I meant them studying by themselves and not publishing
[04:51:44] <abastro[m]> Well, it is not blaming
[04:51:44] <abastro[m]> It is just that university student is taught something increasingly detached
[04:51:52] <hpc> oh, or maybe not
[04:51:53] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[04:51:55] <hpc> just got a burst myself
[04:52:01] <abastro[m]> Anyway I am honestly intimidated by Go's rising
[04:52:08] <Axman6> yeah, abastro[m] flood :P
[04:52:09] <abastro[m]> Sorry for being on matrix bridge
[04:52:26] <hpc> maybe one of libera's servers is slow
[04:52:33] <abastro[m]> I should perhaps get a proper libera client
[04:52:37] <Axman6> I don't think this is a matrix thing. glguy you know if something's going on with libra's servers?
[04:52:53] *** Joins: chenqisu12 (~chenqisu1@183.217.200.168)
[04:53:12] <abastro[m]> I am on matrix posting to this server, which is going through the matrix bridge btw
[04:54:38] <abastro[m]> Perhaps i am a bit irritated of some ppl I know pushing heavily on Go for its simplicity and "readability"
[04:54:54] <dminuoso> At the end businesses strive from finding the ideal balancing point between "ship early but potentially broken" and "ship late but potentially stable" in all kinds of technology.
[04:54:59] <abastro[m]> Tho tbf they are relatively beginner in programming
[04:55:04] <dminuoso> If you want, you end up spending more and giving the competition more time.
[04:55:06] <dminuoso> *wait
[04:55:40] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Ping timeout: 272 seconds)
[04:56:01] <dminuoso> If you publish products too early, you risk shipping an unviable product. So I guess a lot of the technologies in compsci in the last 20 years are an artifact of businesses looking for their own sweet spot.
[04:57:43] <abastro[m]> I guess In the end haskell was too restrictive
[04:57:49] <dminuoso> So yeah, some businesses have an interest in using JavaScript because, from a business perspective, you get masses of low-skilled developers, that can just plug and play half of npm together, and produce something that 80% of the time does its job. 
[04:58:07] <dminuoso> And if that enables you to get more money from investors constantly
[04:58:14] <dminuoso> Then it's a successful business strategy
[04:58:33] <glguy> Axman6: it seems like a hub was having network lag for a moment but I show it as recovered now
[04:59:44] <dminuoso> glguy: By the way, config-schema pull request. Can you weigh in on that? If that has a chance of getting merged, I would start rewriting a bunch of nixos modules against it. :p
[04:59:47] <Axman6> Cool, just thought I'd point it out in case it was something the champions running the place hadn't seen
[05:00:42] <monochrom> Yeah I think industry chooses languages by just how many people can apply to their jobs. Not even anything to do with type systems or "paradigms". Recall that, for example, there was a time Java and C++ was more fashionable than Tcl/Tk and Python (which did exist back then).
[05:01:26] <dminuoso> And availability of existing libraries they can plug in. Every used library is developer time saved.
[05:01:36] <abastro[m]> So if one is developing language nowadays, I guess it is better to be extremely easy
[05:01:41] <dminuoso> Which also explains why some of these products have an exploding depedency closure
[05:01:48] <monochrom> And today Java and C++ are still very important, despite how people pretend to talk only about Python and Javascript.
[05:01:51] <dminuoso> It's simply an artifact of saving developer time
[05:02:17] <abastro[m]> I thought ppl only talk about Java
[05:02:44] <hpc> java has a monopoly by way of android phones
[05:02:57] <hpc> anything high-performance on a desktop is going to be C++
[05:03:24] <hpc> including all those great big javascript interpreters
[05:03:39] <hpc> most python libraries are thin wrappers for C code
[05:03:54] <dminuoso> java is also very ubiquitous in corporate software
[05:04:41] <hpc> php is still everywhere too
[05:04:46] <hpc> and ruby
[05:04:47] <dminuoso> It's very hard to find larger companies that dont have either a few or even entire landscapes of Java software
[05:05:58] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[05:08:55] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[05:09:08] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[05:10:12] <glguy> dminuoso: Is that a big improvement over using a customSpec on textSpec?
[05:10:21] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[05:11:49] *** Quits: pnotequalnp (~kevin@user/pnotequalnp) (Ping timeout: 246 seconds)
[05:11:51] *** Quits: dpratt (sid193493@2a03:5180:f:1::2:f3d5) (Ping timeout: 250 seconds)
[05:11:51] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 250 seconds)
[05:11:51] *** Quits: ysh (sid6017@id-6017.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[05:11:51] *** Quits: megeve (sid523379@id-523379.hampstead.irccloud.com) (Ping timeout: 250 seconds)
[05:12:14] <glguy> dminuoso: like the hastily written: let textLiteral x = customSpec ("\"" <> x <> "\" literal") textSpec (\y -> if y == x then Right () else Left ("expected \"" <> x <> "\""))
[05:13:05] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[05:13:34] *** Joins: megeve (sid523379@id-523379.hampstead.irccloud.com)
[05:13:36] *** Joins: ysh (sid6017@id-6017.ilkley.irccloud.com)
[05:14:03] <glguy> or I wonder if it'd be better to replace AtomSpec and TextSpec with a more general ExactSpec that takes an arbitrary Value
[05:14:44] *** Joins: hook54321 (sid149355@user/hook54321)
[05:15:04] *** Joins: dpratt (sid193493@id-193493.helmsley.irccloud.com)
[05:16:02] <abastro[m]> And software will always be unreliable
[05:18:23] <abastro[m]> I hope ppl would not ditch research because "it is not worth the cost"
[05:20:57] <glguy> dminuoso: at a minimum I can imagine someone wanting to use specific numbers
[05:21:06] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[05:23:39] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[05:27:51] <tapas> sm: yo how was yesod blocked by base64 btw?
[05:28:11] <tapas> i'm not seeing the package being used, grepping through the code base. Is yesod migrating to it on some branch?
[05:29:28] <abastro[m]> (Any suggestion of using haskell in math btw? I am going for math major and it would be great if I could.. use it for sth)
[05:29:33] *** Joins: Mags0001 (~Mags@host-79-26-197-11.retail.telecomitalia.it)
[05:30:47] *** Parts: Mags0001 (~Mags@host-79-26-197-11.retail.telecomitalia.it) ()
[05:31:02] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[05:31:32] <tapas> just do math
[05:34:28] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[05:35:56] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[05:36:11] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2ad9:1465:5fb9:8672)
[05:36:14] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:36:14] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:36:14] *** Joins: wroathe (~wroathe@user/wroathe)
[05:40:27] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[05:40:38] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (Ping timeout: 272 seconds)
[05:42:09] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[05:42:17] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[05:42:49] *** Quits: Akiva (~Akiva@user/Akiva) (Quit: WeeChat 3.4)
[05:43:15] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[05:44:41] *** Joins: geoduck (~X@71.182.184.253)
[05:45:07] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[05:45:32] <abastro[m]> Welp okay..
[05:46:33] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[05:47:18] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:950:287b:c4be:ac00) (Ping timeout: 260 seconds)
[05:51:28] *** Joins: neurocyte1 (~neurocyte@IP-094016066081.dynamic.medianet-world.de)
[05:51:29] *** Quits: neurocyte1 (~neurocyte@IP-094016066081.dynamic.medianet-world.de) (Changing host)
[05:51:29] *** Joins: neurocyte1 (~neurocyte@user/neurocyte)
[05:53:50] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:53:50] *** neurocyte1 is now known as neurocyte
[05:56:01] *** Joins: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net)
[05:57:31] *** Joins: ddb (~ddb@2607:5300:203:9993::196)
[05:58:43] <sm> tapas that's a good question. It allowed stack install yesod to work here, but I saw the stackage folks didn't need it. Maybe somebody did a bounds revision, or I messed up somehow.
[05:59:42] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2ad9:1465:5fb9:8672) (Ping timeout: 260 seconds)
[06:00:31] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:203:625:d7c4:9b0)
[06:00:55] <sm> I assumed it just facilitated a viable install plan for yesod, rather than being used by yesod
[06:01:27] *** Joins: vglfr (~vglfr@88.155.45.251)
[06:05:58] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-e11f-0c89-4074-605e.res6.spectrum.com) (Remote host closed the connection)
[06:10:16] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 246 seconds)
[06:10:45] *** Joins: paraseba (~paraseba@187.10.123.216)
[06:10:59] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[06:15:18] *** Joins: mixfix41 (~homefame@user/mixfix41)
[06:15:55] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[06:17:07] <paraseba> How would one write isSorted using lens? It would have to zip together contiguous elements of a Fold I suppose?
[06:18:18] *** Joins: srk- (~sorki@user/srk)
[06:18:53] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[06:19:27] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[06:19:39] *** Quits: srk (~sorki@user/srk) (Ping timeout: 250 seconds)
[06:20:08] <janus> sm: it was enabled a couple of days ago: https://github.com/commercialhaskell/stackage/commit/74cfdcf03f96459a396f1b9b6f307b57069ea69b#diff-9949098b9af80e5fcef9a718fdda416f3fa8272ca8add4d67ae65fe892990939R5245
[06:21:02] *** srk- is now known as srk
[06:21:57] *** Joins: dcoutts__ (~duncan@host86-151-9-10.range86-151.btcentralplus.com)
[06:24:25] *** Quits: dcoutts_ (~duncan@host86-151-44-233.range86-151.btcentralplus.com) (Ping timeout: 250 seconds)
[06:26:57] *** Joins: pnotequalnp (~kevin@user/pnotequalnp)
[06:29:17] *** Quits: vglfr (~vglfr@88.155.45.251) (Ping timeout: 260 seconds)
[06:32:25] *** Joins: lispy (~lispy@82.212.115.165)
[06:38:22] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:38:27] *** Quits: justOkay (~justache@user/justache) (Quit: The Lounge - https://thelounge.chat)
[06:43:03] *** Joins: justOkay (~justache@user/justache)
[06:47:07] <Zemyla> :t \g s -> foldrOf g (\a r -> maybe (r (Just a)) (\b -> a >= b && r (Just a))) (const True) s Nothing -- paraseba 
[06:47:08] <lambdabot> Ord a => Getting (Endo (Maybe a -> Bool)) s a -> s -> Bool
[06:51:05] <paraseba> huh, that's a mouthful... interesting. Thank you!
[06:57:38] <abastro[m]> Very interesting code
[06:57:41] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:58:07] <abastro[m]> Continuation style, right?
[06:59:57] <Zemyla> Yep. I'm pretty sure there's a way to do it with less code.
[07:00:52] <abastro[m]> I wonder if continuation monad could be actually more manageable
[07:02:02] <Zemyla> Also, I spent all day getting excited that Mealy machines were Traversing Profunctors.
[07:02:39] <abastro[m]> ?!?!
[07:03:38] <Zemyla> newtype Mealy a b = Mealy { runMealy :: a -> (b, Mealy a b) }
[07:04:35] <Zemyla> It's a Profunctor and an Arrow, and it turns out it'd a Traversing as well.
[07:05:25] <Zemyla> class Traversing p where traverse' :: Traversable t => p a b -> p (t a) (t b)
[07:06:42] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[07:06:50] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[07:09:46] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:09:46] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:09:46] *** finn_elija is now known as FinnElija
[07:09:55] <abastro[m]> Woah
[07:10:07] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[07:10:13] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[07:10:15] <jle`> nice
[07:10:56] <abastro[m]> <del>`(b, Mealy a b)` requires applying `b -> c` to both side of the tuple tho</del>
[07:12:08] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Quit: Connection closed)
[07:12:27] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[07:12:28] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[07:13:29] <abastro[m]> What is the easy way to apply `f : a -> b` to `(a, a)` so I obtain `(b, b)`?
[07:13:37] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:52] <c_wraith> Zemyla: if I remember your definition correctly, anything with the two type arguments on the opposite side of the same -> type constructor is Traversing
[07:13:52] <Axman6> @hoogle (a -> b) -> (a,a) -> (b,b)
[07:13:52] <lambdabot> Data.Tuple.Extra both :: (a -> b) -> (a, a) -> (b, b)
[07:13:53] <lambdabot> Extra both :: (a -> b) -> (a, a) -> (b, b)
[07:13:53] <lambdabot> Text.Ginger.GVal pairwise :: (a -> b) -> (a, a) -> (b, b)
[07:14:01] <c_wraith> :t join bimap
[07:14:02] <lambdabot> Bifunctor p => (c -> d) -> p c c -> p d d
[07:14:51] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:15:38] <abastro[m]> Oh now `join bimap`, that is better
[07:15:39] <Axman6> abastro[m]: re: your earlier question, what sort of maths?
[07:16:02] <abastro[m]> Think I am going for algebra
[07:16:11] <Axman6> :t join `asAppliedTo` bimap
[07:16:12] <lambdabot> Bifunctor p => ((c -> d) -> (c -> d) -> p c c -> p d d) -> (c -> d) -> p c c -> p d d
[07:17:49] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[07:18:08] <abastro[m]> I mean, I am currently pursuing academic (traditional) mathematics
[07:18:18] <Axman6> I don't know of anything specifically aimed at algebra, but there is a lot of mathc related haskell stuff, given how mathy everything tends to be. 
[07:18:27] <Axman6> there's some nice number theory stuff IIRC
[07:18:46] <abastro[m]> Well true, but in math we also use lots of set theory rather than type theory
[07:19:51] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[07:20:14] <abastro[m]> I am curious about the number theory stuffs!
[07:20:26] <abastro[m]> How is haskell involved there?
[07:21:16] <Axman6> I haven't used it much but arithmoi has... things that are useful for... stuff. I remember there being alot of functions for number theoretic stuff
[07:21:21] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[07:21:38] <Axman6> most of my number theory stuff has been crypto related and cryptonite had everything I needed in it
[07:21:46] <abastro[m]> Hmm
[07:25:17] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[07:26:13] <abastro[m]> arithmoi?
[07:26:25] <Axman6> @hackage arithmoi
[07:26:25] <lambdabot> https://hackage.haskell.org/package/arithmoi
[07:28:47] *** Joins: rekahsoft (~rekahsoft@cpe001b21a2fd89-cm64777ddc63a0.cpe.net.cable.rogers.com)
[07:29:52] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[07:31:00] <byorgey> abastro[m]: in math we SAY that we use lots of set theory, but math as it is actually practiced is really something more like type theory.
[07:31:26] <byorgey> no one actually encodes everything as sets or even thinks about things that way.
[07:32:29] <abastro[m]> Thanks, Axman6!
[07:32:34] *** Joins: vglfr (~vglfr@88.155.45.251)
[07:32:57] <Axman6> Don't thank me, thank \x -> "https://hackage.haskell.org/package/" ++ x
[07:32:57] <Axman6> :P
[07:33:06] <abastro[m]> Hahaha
[07:33:49] <abastro[m]> byorgey, well mathematicians do practice alike type theory, but IIRC many stuffs actually benefit from flexibility set theory offers.
[07:33:54] <Axman6> @hackage abastro[m]
[07:33:54] <lambdabot> https://hackage.haskell.org/package/abastro[m]
[07:34:02] <abastro[m]> And subset being one huge factor
[07:34:47] <abastro[m]> Actually Quotient is bigger one but anyway
[07:35:11] <Axman6> subsets are just type classes, change my mind
[07:35:57] *** Joins: Buggys (~Buggys@185.149.90.52)
[07:37:04] <abastro[m]> Well then how do you deal with unions of subsets
[07:37:17] <Axman6> more type classes
[07:37:17] <Axman6> :P
[07:39:38] <abastro[m]> XD
[07:43:22] <abastro[m]> Type theory fluent on quotients when
[07:44:03] *** Quits: paraseba (~paraseba@187.10.123.216) (Quit: Client closed)
[07:44:46] <monochrom> One might say, type theory confluent on quotients, haha.
[07:45:55] <abastro[m]> wha
[07:54:13] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[07:59:00] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[08:00:18] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:203:625:d7c4:9b0) (Ping timeout: 260 seconds)
[08:00:24] *** Joins: nate1 (~nate@98.45.167.61)
[08:02:04] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-ab92-d9c1-c016-553e.res6.spectrum.com)
[08:04:22] *** Quits: Graham31515 (~Graham@user/Graham31415) (Read error: Connection reset by peer)
[08:04:28] *** Joins: Graham31415 (~Graham@user/Graham31415)
[08:04:58] *** Quits: nate1 (~nate@98.45.167.61) (Ping timeout: 260 seconds)
[08:08:55] *** Quits: benin (~benin@183.82.24.110) (Ping timeout: 246 seconds)
[08:12:40] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[08:15:55] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[08:21:46] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:22:00] *** Joins: mbuf (~Shakthi@122.173.70.161)
[08:23:16] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[08:25:01] *** Quits: vglfr (~vglfr@88.155.45.251) (Ping timeout: 246 seconds)
[08:25:33] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[08:26:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:27:42] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[08:30:46] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[08:35:10] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[08:35:10] *** Quits: zyklotomic (~ethan@res380d-128-61-85-52.res.gatech.edu) (Ping timeout: 246 seconds)
[08:36:36] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 245 seconds)
[08:37:11] *** Joins: zyklotomic (~ethan@res380d-128-61-83-149.res.gatech.edu)
[08:52:13] *** Joins: benin (~benin@183.82.24.110)
[08:53:46] *** Joins: benin5 (~benin@183.82.24.110)
[08:55:19] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[08:55:20] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:56:52] *** Quits: benin (~benin@183.82.24.110) (Ping timeout: 260 seconds)
[08:56:53] *** benin5 is now known as benin
[08:57:57] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:06:33] <tapas> sm: sounds more like this was a stackage issue than a yesod one
[09:06:34] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[09:06:50] <tapas> more precisely a stackage nightly
[09:07:47] <tapas> just tryna understand
[09:07:52] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[09:10:10] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[09:15:35] *** Quits: rekahsoft (~rekahsoft@cpe001b21a2fd89-cm64777ddc63a0.cpe.net.cable.rogers.com) (Ping timeout: 260 seconds)
[09:17:35] *** Joins: bahamas (~lucian@86.120.21.179)
[09:18:54] <tapas> gotta know thy stakeholders y'feel me
[09:19:15] <energizer> when haskellers talk about 'pretty printing' what are they referring to?
[09:20:10] <Axman6> formatting some data textually in a way that is nice for humans to read
[09:21:21] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[09:21:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[09:21:45] <energizer> ok
[09:22:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:24:11] *** Joins: dut (~dut@user/dut)
[09:26:21] *** Joins: Guest2 (~Guest2@2405:201:6002:a800:4d6a:452:e4e8:6bd9)
[09:26:31] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:27:39] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[09:27:44] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[09:32:27] *** Quits: bahamas (~lucian@86.120.21.179) (Ping timeout: 260 seconds)
[09:35:11] *** Quits: Guest2 (~Guest2@2405:201:6002:a800:4d6a:452:e4e8:6bd9) (Quit: Client closed)
[09:35:56] <Axman6> @hoogle Bool -> (a -> a) -> a -> a
[09:35:57] <lambdabot> Data.Function.Tools applyWhen :: Bool -> (a -> a) -> a -> a
[09:35:57] <lambdabot> Data.Function.Tools applyUnless :: Bool -> (a -> a) -> a -> a
[09:35:57] <lambdabot> Util applyWhen :: Bool -> (a -> a) -> a -> a
[09:36:14] <Axman6> "Util" *glares*
[09:41:56] *** Joins: dcoutts_ (~duncan@host86-151-9-10.range86-151.btcentralplus.com)
[09:44:31] *** Quits: dcoutts__ (~duncan@host86-151-9-10.range86-151.btcentralplus.com) (Ping timeout: 260 seconds)
[09:46:10] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.235)
[09:51:16] *** Joins: merijn (~merijn@c-001-002-001.client.esciencecenter.eduvpn.nl)
[09:55:13] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.235) (Ping timeout: 260 seconds)
[09:55:27] *** Joins: dcoutts__ (~duncan@host86-151-9-10.range86-151.btcentralplus.com)
[09:58:59] *** Quits: dcoutts_ (~duncan@host86-151-9-10.range86-151.btcentralplus.com) (Ping timeout: 260 seconds)
[09:59:53] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[10:02:47] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:04:19] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[10:09:15] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[10:16:43] *** Joins: mncheck (~mncheck@193.224.205.254)
[10:17:28] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:22:06] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Read error: No route to host)
[10:22:16] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:22:18] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.235)
[10:24:29] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[10:25:33] *** Quits: merijn (~merijn@c-001-002-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[10:26:59] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.235) (Ping timeout: 260 seconds)
[10:27:32] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 272 seconds)
[10:39:57] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[10:41:26] *** Joins: dcoutts_ (~duncan@host86-150-41-212.range86-150.btcentralplus.com)
[10:41:51] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[10:42:02] <jackdk> Axman6: `bool id f`
[10:42:29] <abastro[m]> `@hoogle bool`
[10:42:31] <abastro[m]> > @hoogle bool
[10:42:32] <lambdabot>  <hint>:1:1: error: parse error on input ‘@’
[10:42:43] <jackdk> > :i bool
[10:42:44] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[10:42:48] <jackdk> % :i bool
[10:42:48] <yahb> jackdk: bool :: a -> a -> Bool -> a -- Defined in `Data.Bool'
[10:42:51] <abastro[m]> Sorry..
[10:42:58] <abastro[m]> Data.Bool?
[10:43:01] <jackdk> we got there in the end
[10:43:13] <abastro[m]> `base`????
[10:43:41] <abastro[m]> And I thought there were no boolean eliminator in base
[10:44:15] *** Quits: dcoutts__ (~duncan@host86-151-9-10.range86-151.btcentralplus.com) (Ping timeout: 260 seconds)
[10:44:33] <jackdk> False
[10:44:54] <abastro[m]> was my entire worldview
[10:46:36] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:950:287b:c4be:ac00)
[10:48:05] *** Joins: acidjnk (~acidjnk@p200300d0c7049f4214af152190df7355.dip0.t-ipconnect.de)
[10:48:59] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[10:53:24] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[10:54:09] <Axman6> \f t -> f
[10:54:36] *** Joins: unyu (~pyon@user/pyon)
[10:56:57] *** Joins: Everything (~Everythin@37.115.210.35)
[10:58:42] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[10:59:53] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[11:02:28] *** Joins: dut_ (~dut@user/dut)
[11:03:22] *** Joins: dut__ (~dut@user/dut)
[11:06:12] *** Quits: dut (~dut@user/dut) (Ping timeout: 260 seconds)
[11:07:33] *** Quits: dut_ (~dut@user/dut) (Ping timeout: 260 seconds)
[11:09:23] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[11:14:07] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 260 seconds)
[11:14:32] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[11:15:09] *** Joins: Sgeo (~Sgeo@user/sgeo)
[11:16:11] *** Joins: img (~img@user/img)
[11:17:01] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 245 seconds)
[11:18:50] *** Quits: Sgeo__ (~Sgeo@user/sgeo) (Ping timeout: 272 seconds)
[11:19:16] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[11:20:11] *** Joins: jonathanx (~jonathan@c-5eea3313-74736162.cust.telenor.se)
[11:23:12] *** Quits: jonathanx (~jonathan@c-5eea3313-74736162.cust.telenor.se) (Read error: Connection reset by peer)
[11:23:30] *** Joins: jonathanx (~jonathan@94.234.51.19)
[11:25:43] *** Joins: michalz (~michalz@185.246.204.97)
[11:28:14] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:c0ae:bf23:cf6b:67df)
[11:29:49] *** Quits: jonathanx (~jonathan@94.234.51.19) (Ping timeout: 246 seconds)
[11:30:08] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:31:06] *** Joins: jonathanx (~jonathan@94.234.51.19)
[11:34:28] *** Joins: alp (~alp@user/alp)
[11:38:14] *** Joins: fef (~thedawn@user/thedawn)
[11:38:40] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[11:45:51] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[11:48:26] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[11:50:05] *** Quits: acidjnk (~acidjnk@p200300d0c7049f4214af152190df7355.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[11:54:35] *** Joins: ccntrq (~Thunderbi@2a01:c22:8de1:1200:c0e8:7704:b751:d68a)
[11:55:48] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[11:56:15] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 240 seconds)
[11:57:07] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[11:57:23] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[11:58:38] *** Quits: jonathanx (~jonathan@94.234.51.19) (Quit: Leaving)
[11:59:29] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[12:00:08] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[12:01:49] *** Joins: alp (~alp@user/alp)
[12:02:05] *** Joins: neurocyte8 (~neurocyte@IP-094016066081.dynamic.medianet-world.de)
[12:02:06] *** Quits: neurocyte8 (~neurocyte@IP-094016066081.dynamic.medianet-world.de) (Changing host)
[12:02:06] *** Joins: neurocyte8 (~neurocyte@user/neurocyte)
[12:02:13] *** Joins: kmein (~weechat@user/kmein)
[12:03:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[12:04:03] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[12:04:04] *** neurocyte8 is now known as neurocyte
[12:04:25] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[12:04:55] *** Joins: jakalx (~jakalx@base.jakalx.net)
[12:05:12] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[12:05:27] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:07:52] *** Joins: cfricke (~cfricke@user/cfricke)
[12:09:16] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:11:07] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.235)
[12:14:09] *** Joins: Hemmo (~Hemmo@185.112.82.222)
[12:15:44] *** [_] is now known as [itchyjunk]
[12:16:03] <Hemmo> Hello. I have a function I have managed to do with list comprehension and filter, but I would like to implement it with foldl as an exercise, but I am not sure how to go about it. Here's my function with filter; distanceFilter :: (String -> String -> Float) -> Float -> String
[12:16:03] <Hemmo>   -> [String] -> [String]
[12:16:03] <Hemmo> distanceFilter f d s ss = filter (\x -> f s x <= d) ss
[12:16:25] <Hemmo> and my attempt so far with foldl; distanceFilter f d s ss = foldl (\x -> f s x) <= d ss
[12:16:58] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[12:17:17] <Hemmo> The foldl simply throws errors, any pointers toward the right direction are appreciated =)
[12:17:46] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[12:18:03] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.235) (Ping timeout: 260 seconds)
[12:18:22] <Hemmo> And oh, here's what it does; given a distance function f, a Float d, a String s and a list of Strings ss, returns all the strings in ss that are at most d distance away from s.
[12:18:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:19:02] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:20:02] <merijn> Hemmo: You're writing: "(foldl (\x -> f s x)) <= d ss"
[12:20:32] <merijn> That's trying to compare a function with "d ss" using <=
[12:20:48] <merijn> Presumably wrong parenthesis?
[12:27:23] *** Quits: Hemmo (~Hemmo@185.112.82.222) (Ping timeout: 260 seconds)
[12:28:26] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:29:03] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[12:32:42] *** Quits: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[12:33:14] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[12:34:27] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[12:35:05] <abastro[m]> Implementing filter with foldl could be a bit complex at least from looks
[12:35:17] <Franciman> Zemyla: haskell's Cont monad represents delimited continuations
[12:35:36] <abastro[m]> One thing, `foldl` is just a folder which folds a list. So, you need some way to construct list other than folding
[12:36:18] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[12:36:53] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[12:40:27] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[12:45:10] *** Joins: kuribas (~user@ptr-25vy0i96ymkampl0mim.18120a2.ip6.access.telenet.be)
[12:46:41] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:47:20] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[12:50:55] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Remote host closed the connection)
[12:51:18] *** Joins: cdman (~dcm@27.2.217.171)
[12:51:18] *** Quits: cdman (~dcm@27.2.217.171) (Changing host)
[12:51:18] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[12:54:11] *** Quits: chenqisu12 (~chenqisu1@183.217.200.168) (Quit: Leaving)
[12:54:44] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:54:55] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[12:59:00] *** Joins: Midjak (~Midjak@82.66.147.146)
[13:01:48] *** Quits: pnotequalnp (~kevin@user/pnotequalnp) (Ping timeout: 240 seconds)
[13:02:03] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[13:05:52] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[13:11:26] *** Quits: ccntrq (~Thunderbi@2a01:c22:8de1:1200:c0e8:7704:b751:d68a) (Remote host closed the connection)
[13:11:43] *** Joins: ccntrq (~Thunderbi@2a01:c22:8de1:1200:c0e8:7704:b751:d68a)
[13:12:24] *** Joins: bahamas (~lucian@86.120.77.115)
[13:13:20] *** Joins: Hemmo (~Hemmo@91.221.67.198)
[13:13:51] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[13:15:27] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[13:16:46] <phma> I'm using "stack ghci" and I get a long prompt "*Data.GosperBase.Internals Data.GosperBase Data.GosperBase.Internals>". How do I shorten it? And what does the star mean?
[13:17:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:18:57] <abastro[m]> Uhm wait, it is listed twice?
[13:19:03] <abastro[m]> Doesn't look normal to me
[13:19:19] <Hemmo> abastro[m]: yeah it does seem a bit complex. I had no trouble coming up with a list comprehension and filter to solve it, but there was simply a suggestion by my teacher to solve it with foldl as well
[13:19:55] <abastro[m]> Hemmo: Yep, would be a great exercise, but would also take quite a bit of effort
[13:19:58] *** Joins: acidjnk (~acidjnk@p200300d0c7049f4214af152190df7355.dip0.t-ipconnect.de)
[13:20:08] <abastro[m]> Do you know how to construct the list, and how to pattern match on the list?
[13:20:46] <abastro[m]> If you can write recursive function for `filter`, you are halfway there
[13:22:00] <maerwald> phma: :set prompt
[13:22:22] <maerwald> e.g. :set prompt "> "
[13:23:00] <phma> maerwald: do I have to set prompt every time I run ghci?
[13:23:33] <maerwald> you can add that line to the file .ghci I think
[13:23:57] <phma> is .ghci in my home directory or the project directory?
[13:24:09] *** Joins: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[13:24:10] <Hemmo> abastro[m]: well yeah I mean I can match it on list comprehension, but not sure if I know how to do it without it
[13:24:46] <Hemmo> abastro[m]: recursive function for filter as in call filter on each item again or after each item?
[13:24:47] <abastro[m]> Yep, I propose you to write barebone recursion without using list comprehension
[13:25:04] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[13:25:11] <maerwald> phma: https://downloads.haskell.org/ghc/8.10.7/docs/html/users_guide/ghci.html?highlight=dot%20file#the-ghci-and-haskeline-files
[13:25:30] <abastro[m]> I mean, write:
[13:25:30] <abastro[m]> ```haskell
[13:25:30] <abastro[m]> filter :: (a -> Bool) -> [a] -> [a]
[13:25:30] <abastro[m]> ```
[13:25:47] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[13:26:00] <abastro[m]> `filter f l = (write your definition here, preferably by pattern matching on l)`
[13:26:54] *** Quits: lispy (~lispy@82.212.115.165) (Quit: Client closed)
[13:28:55] <Hemmo> abastro[m]: yeah cheers i'll give it a shot!
[13:29:53] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 260 seconds)
[13:30:08] *** Quits: pareto-optimal-d (~pareto-op@2001:470:69fc:105::1:b61f) (Quit: You have been kicked for being idle)
[13:41:41] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:41:53] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[13:43:18] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Ping timeout: 260 seconds)
[13:43:36] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:44:18] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[13:45:49] *** Joins: cdman (~dcm@27.2.217.171)
[13:45:49] *** Quits: cdman (~dcm@27.2.217.171) (Changing host)
[13:45:49] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[13:51:29] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Quit: Leaving)
[13:55:35] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 240 seconds)
[13:55:45] *** Joins: tiferrei2000 (~tiferrei@user/tiferrei)
[13:56:15] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[13:56:24] *** Joins: Major_Biscuit (~MajorBisc@c-001-024-026.client.tudelft.eduvpn.nl)
[13:56:48] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:57:11] *** Quits: Major_Biscuit (~MajorBisc@c-001-024-026.client.tudelft.eduvpn.nl) (Client Quit)
[13:57:28] *** Joins: Major_Biscuit (~MajorBisc@c-001-024-026.client.tudelft.eduvpn.nl)
[13:59:35] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 256 seconds)
[14:00:33] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:02:26] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[14:02:51] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 245 seconds)
[14:07:40] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[14:07:43] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[14:07:57] *** Joins: widelec-BB (~widelec@cpe-109-207-144-181.docsis.tczew.net.pl)
[14:09:06] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[14:09:07] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[14:11:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:13:47] *** Quits: cosimone` (~user@93-44-187-176.ip98.fastwebnet.it) (Ping timeout: 260 seconds)
[14:14:20] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:14:36] *** Parts: widelec-BB (~widelec@cpe-109-207-144-181.docsis.tczew.net.pl) ( )
[14:18:52] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[14:20:07] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[14:20:35] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[14:22:39] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[14:26:29] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:26:38] *** Joins: nattiestnate (~nate@202.138.250.9)
[14:27:56] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:28:37] *** Joins: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net)
[14:28:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[14:29:47] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[14:29:58] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[14:30:27] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:31:03] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[14:31:27] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[14:37:25] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[14:37:41] *** Joins: tfeb (~tfb@88.98.95.237)
[14:38:08] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[14:40:05] <tomsmeding> sm: maerwald: http://play-haskell.tomsmeding.com:8123/play
[14:41:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:42:41] *** Joins: __monty__ (~toonn@user/toonn)
[14:43:23] <maerwald> excellent
[14:45:08] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 260 seconds)
[14:46:52] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[14:48:16] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[14:48:19] *** Quits: acidjnk (~acidjnk@p200300d0c7049f4214af152190df7355.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:49:19] *** Quits: bahamas (~lucian@86.120.77.115) (Ping timeout: 246 seconds)
[14:51:48] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:61e3:f551:d48e:e2b3)
[14:52:16] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[14:54:26] <carbolymer> tomsmeding: nice! what was the reason this thing was born?
[14:56:28] <tomsmeding> https://github.com/haskell-infra/www.haskell.org/issues/185
[14:57:11] <tomsmeding> If y'all crash it it's not coming back, just in a simple tmux lol, sorry
[15:00:04] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:00:11] <maerwald> tomsmeding: it's not using bwrap?
[15:00:33] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[15:00:51] <Profpatsch> I’m looking into profiling a handler of ours a little.
[15:01:09] <Profpatsch> And a dumb idea before going for a full-blown benchmarking setup wa?:
[15:01:35] <Profpatsch> Is there a GHC function that I can call on a thunk, which will return the residential memory of that thunk at runtime?
[15:01:38] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[15:02:24] <Profpatsch> e.g. if I have a json value from a request, can I somehow introspect how much of it is realized into memory at runtime?
[15:06:04] <carbolymer> Profpatsch: something of that kind: https://stackoverflow.com/questions/3254758/memory-footprint-of-haskell-data-types ?
[15:06:27] <carbolymer> Profpatsch: https://hackage.haskell.org/package/ghc-datasize-0.1.2/docs/GHC-DataSize.html
[15:07:28] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:07:28] <Hemmo> GHCI gives me an error message: Variable not in scope:
[15:07:28] <Hemmo>       clusters :: (String -> String -> Float) -> t0 -> [String] -> t
[15:07:41] <Hemmo> but i have defined the function yet it won't work??clusters :: (String -> String -> Float) -> Float -> [String] -> [String]
[15:07:41] <Hemmo> clusters f d ss = [x | x <- ss, y <- ss, f x y < d]
[15:08:07] <Hecate> it's trying to look for a variable called cluster with the "wrong" type signature I think
[15:08:18] <Hecate> (or you've messed something when importing things? idk)
[15:08:28] <Hemmo> Uhh is it fixable somehow? ;D
[15:08:36] <Hecate> Hemmo: can you put a minimal repro code on paste.tomsmeding.com/ ?
[15:08:53] <Hemmo> Yes I can, uno momento
[15:09:37] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[15:10:04] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[15:10:23] <Profpatsch> carbolymer: hah, thank you
[15:10:27] <Profpatsch> not sure I could have found that
[15:11:13] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[15:11:44] <Hemmo> Hecate: Pasted it in there
[15:11:59] <Hecate> Hemmo: I'm gonna need the link now :)
[15:12:16] <Hemmo> Hecate: https://paste.tomsmeding.com/pUtz76bH
[15:12:17] <Hemmo> ;D
[15:12:44] *** alMalsamo is now known as lumberjack123
[15:13:38] <Hecate> λ❯ clusters distance1 0.3 ["aaabc", "aabdd", "a", "aa", "abdd", "bcbcb", "", "abcdefghij"]
[15:13:41] <Hecate> ["aaabc","aaabc","aabdd","aabdd","a","a","aa","aa","aa","abdd","abdd","bcbcb","","abcdefghij"]
[15:13:44] <Hecate> it :: [String]
[15:13:51] <Hecate> hmm.
[15:14:18] <Hemmo> It works for you?
[15:14:26] <Hecate> it does
[15:14:30] <Hecate> hmm
[15:14:31] <Hemmo> Yeah curious. Should for me too.
[15:14:32] <Hecate> what could it be
[15:14:41] <Hemmo> Let me do the classic thing and restart ghci lol
[15:14:45] <Hecate> I have a bunch of extensions in my .ghci that could affect the behaviour
[15:15:15] *** Quits: califax (~califax@user/califx) (Ping timeout: 240 seconds)
[15:15:25] <Hemmo> Lol. Restarting did the trick.
[15:15:31] <Profpatsch> carbolymer: do you know the difference between the `closureSize` function and the `recursiveSize` function?
[15:15:31] <Hemmo> My ghci bugs at times I've noticed
[15:15:42] <Hemmo> Ty though.
[15:15:45] <Profpatsch> I don’t think I understand the documentation
[15:15:49] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[15:16:06] <Hecate> Hemmo: well, nothing that can't be fixed by restoring to a previously known state. :) That's what aeronautics and Erlang do all the time!
[15:16:15] *** Joins: califax (~califax@user/califx)
[15:16:36] <Hemmo> Indeed. Should've thought of that first! Classic rookie mistake.
[15:17:04] <Hemmo> Related to that function and in general, is it possible to use list compr. and have a predicate that checks whether that element is in the list already?
[15:17:22] <Profpatsch> carbolymer: oh there’s a user guide, maybe that will make it clearer http://felsin9.de/nnis/ghc-datasize/
[15:17:27] <Hemmo> so in my example there are some duplicates
[15:18:06] <carbolymer> Profpatsch: not sure
[15:18:16] <Profpatsch> carbolymer: I think nothing beats just trying it out :)
[15:18:46] <Hecate> Hemmo: just `List.nub` them afterwards ;-)
[15:19:37] <Hecate> because if you looking for the whole list each time a new element is produced (to determine if it's already there), your complexity goes through the roof, as you have what amounts to a nested for-loop
[15:20:02] <Hecate> just create your list, and go over it to remove the duplicates once it's finished
[15:20:18] *** Quits: benin (~benin@183.82.24.110) (Quit: The Lounge - https://thelounge.chat)
[15:20:29] *** Joins: xkuru (~xkuru@user/xkuru)
[15:21:22] <Hemmo> Hecate: Thanks
[15:22:47] *** Quits: Hemmo (~Hemmo@91.221.67.198) (Remote host closed the connection)
[15:27:08] <dminuoso> Hecate: Well, I guess in some sense its not as much as "this definitely fixes it", but its rather "once your system doesn't behave as specified, you cant reason about it anymore"
[15:27:16] <dminuoso> That's at least the mentality in aeronautics
[15:27:34] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[15:29:38] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[15:31:55] *** Joins: jonathanx (~jonathan@dyn-2-sc.cdg.chalmers.se)
[15:32:23] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[15:32:45] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:32:48] *** Quits: mncheck (~mncheck@193.224.205.254) (Ping timeout: 272 seconds)
[15:33:07] *** Joins: mncheck (~mncheck@193.224.205.254)
[15:33:18] *** Joins: fef (~thedawn@user/thedawn)
[15:35:37] *** Joins: odnes (~odnes@5-203-245-187.pat.nym.cosmote.net)
[15:37:10] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:37:46] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[15:38:48] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[15:40:25] <Hecate> dminuoso: yes
[15:40:29] <Hecate> you are right
[15:40:30] *** Quits: dut__ (~dut@user/dut) (Quit: Leaving)
[15:40:49] *** Joins: razetime (~quassel@117.254.35.62)
[15:42:56] *** Quits: Ferdirand (~somebody@2001:4c78:2012:5000::2) (Remote host closed the connection)
[15:42:56] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[15:46:44] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[15:48:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:51:26] *** Quits: jonathanx (~jonathan@dyn-2-sc.cdg.chalmers.se) (Ping timeout: 260 seconds)
[15:52:12] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.235)
[15:56:27] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:56:52] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.235) (Ping timeout: 260 seconds)
[15:58:47] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:61e3:f551:d48e:e2b3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:58:49] *** Quits: jiribenes (~jiribenes@rosa.jiribenes.com) (Ping timeout: 250 seconds)
[16:00:12] *** Joins: benin (~benin@183.82.24.110)
[16:01:15] *** Quits: benin (~benin@183.82.24.110) (Client Quit)
[16:03:59] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[16:05:31] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[16:06:13] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 260 seconds)
[16:08:41] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[16:12:29] *** Joins: benin (~benin@183.82.24.110)
[16:12:48] *** Joins: jakalx (~jakalx@base.jakalx.net)
[16:18:01] <maerwald> https://github.com/haskellari/postgresql-simple/issues/58
[16:18:03] <maerwald> oh dear.
[16:19:02] *** Quits: benin (~benin@183.82.24.110) (Ping timeout: 272 seconds)
[16:19:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[16:19:56] *** Joins: benin (~benin@183.82.24.110)
[16:20:00] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:61e3:f551:d48e:e2b3)
[16:20:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:20:40] *** Joins: odnes_ (~odnes@5-203-245-187.pat.nym.cosmote.net)
[16:21:20] *** Quits: odnes (~odnes@5-203-245-187.pat.nym.cosmote.net) (Read error: Connection reset by peer)
[16:23:36] *** Quits: noddy (~user@user/noddy) (Quit: WeeChat 3.4)
[16:24:44] <tdammers> hey, that's my name on there!
[16:25:01] *** Joins: noddy (~user@user/noddy)
[16:25:07] <abastro[m]> `nub`? eh
[16:26:49] <merijn> Montly reminder that anyone close to NL has only 2 more weeks to register for NL-FP ;)
[16:26:56] <merijn> https://wouter-swierstra.github.io/fp-dag/
[16:27:36] <dminuoso> tdammers: Oh yeah, I actually started work to fix this!
[16:27:58] <tdammers> awesome!
[16:28:05] <dminuoso> But then a new season of Better Call Saul came out...
[16:28:18] <dminuoso> Priorities priorities...
[16:28:25] <dminuoso> Seriously though, I should wrap it up
[16:29:18] *** Joins: acidjnk (~acidjnk@p200300d0c7049f4214af152190df7355.dip0.t-ipconnect.de)
[16:30:54] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[16:35:22] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[16:35:23] *** Quits: Everything (~Everythin@37.115.210.35) (Ping timeout: 260 seconds)
[16:36:54] *** Joins: Everything (~Everythin@37.115.210.35)
[16:37:16] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[16:42:22] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[16:43:55] *** Joins: zmt00 (~zmt00@user/zmt00)
[16:44:38] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[16:44:59] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 260 seconds)
[16:49:43] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[16:51:09] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[16:51:20] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[16:52:09] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[16:52:56] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[16:55:55] <maerwald> tdammers: so use hasql instead?
[16:55:59] *** Joins: nathansquan[m] (~nathansqu@2001:470:69fc:105::1:e84c)
[16:57:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 246 seconds)
[16:57:18] <tdammers> maerwald: might give it a spin some time. so far my go-to has been HDBC
[16:57:26] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 245 seconds)
[16:57:40] <maerwald> tdammers: but https://nikita-volkov.github.io/hasql-benchmarks/
[16:57:59] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[16:59:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:59:15] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:59:28] <tdammers> sure sure, as I said, I might give it a spin
[16:59:57] <maerwald> I tried to compile the benchmarks, but they're 7 years old
[16:59:59] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:00:59] <tdammers> tbf., hasql is expected to be much faster than HDBC simply because it doesn't have to provide an abstraction layer over different DBMS backends
[17:02:33] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[17:03:20] <kuribas> also, why would query generation speed matter when it's swamped by the actual query call?
[17:04:33] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[17:04:33] <tdammers> that depends on the query, but yeah, a 200% performance difference in your database connectivity layer may not matter at all
[17:05:36] <merijn> kuribas: Depends on frequency and size of queries :p
[17:05:46] <romesrf> \o
[17:06:17] <kuribas> merijn: if you are doing a lot of single queries, isn't that the problem then?
[17:06:25] <kuribas> you can instead batch the queries.
[17:06:25] <merijn> Why?
[17:06:37] <merijn> Maybe you can, maybe you can't depends on the system
[17:06:50] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[17:07:18] <kuribas> for example with graphQL, you could fetch an entire tree in a single request.
[17:07:40] <kuribas> With some clever batching, this can reduce the request time by a large factor.
[17:08:31] <kuribas> So I would focus on the ergonomics of the connectivity layer, rather than the speed.
[17:10:32] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[17:11:59] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 252 seconds)
[17:13:48] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[17:14:48] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[17:17:29] *** Quits: fendor_ (~fendor@77.119.209.169.wireless.dyn.drei.com) (Remote host closed the connection)
[17:18:46] *** Joins: Guest19 (~Guest19@ip-86-49-182-248.zrnko.net)
[17:18:47] *** Joins: agumonkey (~user@88.163.231.79)
[17:19:03] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9dda:4bff:cdb5:90b8)
[17:20:06] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[17:20:41] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[17:21:28] *** Quits: mncheck (~mncheck@193.224.205.254) (Ping timeout: 260 seconds)
[17:22:07] <Guest19> Hello! I am working on a project with Parser (Text.Parsec) and I can't understand how to call try on my own parsers. For example, I create a parser using the do notation composed of multiple parser (e.g. first read a number, then string "hello", return the number as int). Now, when I use try on this custom parser, it seems to apply only to the
[17:22:07] <Guest19> first parser in the composition (i.e. the one reading a number in this case). Why is that? How can I prevent it?
[17:23:06] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[17:23:58] <maerwald> Guest19: you want "hello" to be parsed even if the number failed to parse?
[17:24:09] <Guest19> yes
[17:24:36] <maerwald> well, that obviously won't work when you wrap the entire parser in try
[17:25:05] <Guest19> No, sorry, misunderstood the question for a moment. I want the parser to try to read a number followed by the string "hello" and if anything fails, the whole parsing fails and the input (including the number) should not be consumed
[17:26:07] *** Quits: acidjnk (~acidjnk@p200300d0c7049f4214af152190df7355.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:28:42] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 272 seconds)
[17:29:23] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[17:30:59] *** Parts: jakalx (~jakalx@base.jakalx.net) (Disconnected: Replaced by new connection)
[17:31:00] *** Joins: jakalx (~jakalx@base.jakalx.net)
[17:31:17] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[17:34:24] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 272 seconds)
[17:37:24] *** Quits: razetime (~quassel@117.254.35.62) (Read error: Connection reset by peer)
[17:38:12] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 272 seconds)
[17:38:12] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Ping timeout: 272 seconds)
[17:39:09] *** Joins: bahamas (~lucian@84.232.140.158)
[17:39:13] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[17:40:23] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[17:41:08] *** Quits: gawen (~gawen@user/gawen) (Quit: cya)
[17:41:59] *** Joins: werdnA (~andrew@114.88.181.56)
[17:42:28] *** Joins: gawen (~gawen@user/gawen)
[17:42:39] <werdnA> I'd love to see some socket and tcp examples (and get screwed by IO ())
[17:42:54] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:45:39] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[17:47:40] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[17:49:25] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Remote host closed the connection)
[17:50:42] <kuribas> Guest19: use "try" if you need to backtrack.
[17:52:47] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 250 seconds)
[17:55:24] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[18:00:25] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[18:02:55] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[18:04:02] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 260 seconds)
[18:06:51] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[18:08:15] *** Joins: razetime (~quassel@117.254.35.62)
[18:08:36] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 272 seconds)
[18:09:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:09:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:09:26] *** Joins: wroathe (~wroathe@user/wroathe)
[18:11:06] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[18:15:34] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 272 seconds)
[18:15:39] *** Joins: acidjnk (~acidjnk@p200300d0c7049f4214af152190df7355.dip0.t-ipconnect.de)
[18:16:53] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[18:19:03] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:19:05] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[18:20:49] *** Quits: slaydr (~slaydr@193.19.109.228) (Ping timeout: 256 seconds)
[18:21:03] <Guest19> Try seems to work for only the first parser, however :(
[18:21:54] <geekosaur> how are you doing this?
[18:22:40] <geekosaur> if you have a series of parsers you want to apply `try` to, either give it a name or wrap the whole set in parentheses (`try (…)`)
[18:22:45] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[18:23:45] *** Joins: img (~img@user/img)
[18:24:24] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[18:25:58] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 246 seconds)
[18:26:16] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[18:27:19] *** werdnA is now known as An
[18:27:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[18:27:41] *** An is now known as werdnA
[18:28:12] *** Quits: img (~img@user/img) (Client Quit)
[18:28:33] *** Quits: alp (~alp@user/alp) (Ping timeout: 260 seconds)
[18:29:03] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:c0ae:bf23:cf6b:67df) (Quit: WeeChat 2.8)
[18:29:20] <Franciman> sml is GORG
[18:29:35] *** Joins: img (~img@user/img)
[18:30:09] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[18:30:52] <Franciman> let's see if haskell can at least keep the same performance
[18:31:22] <shapr> What's GORG?
[18:31:36] <geekosaur> Ipresume short for "gorgeous"
[18:32:05] <shapr> oh, huh
[18:32:09] <Franciman> it's the definition of sml
[18:32:32] <Franciman> i'll be good and use Data Sequence in haskell
[18:32:38] <Franciman> since list is a total clutter
[18:32:41] <Franciman> in this case
[18:32:45] <shapr> ich verstehe nicht
[18:32:47] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[18:32:50] <shapr> jag forstår inte
[18:32:56] <shapr> ik begrijp het niet
[18:33:01] *** Joins: slaydr (~slaydr@173.239.197.154)
[18:33:37] *** Joins: Pickchea (~private@user/pickchea)
[18:33:37] <Franciman> shapr: i'm confronting the implementations of my toy PL
[18:33:40] <Franciman> in haskell and in sml
[18:33:57] <shapr> oh!
[18:34:00] <Franciman> comparing* maybe
[18:34:01] <shapr> thanks for the explanation.
[18:34:08] <Franciman> haskell is SO SLOW
[18:34:10] <shapr> merci
[18:34:33] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[18:34:43] <Franciman> i remember somebody arguing that haskell was perfect for writing compilers. Imho it's a pretty decent second choice, after the awesome sml
[18:34:49] *** Joins: lispy (~lispy@82.212.115.165)
[18:34:57] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[18:34:59] <shapr> It's good to have tools you enjoy using.
[18:35:14] * shapr hugs lispy 
[18:35:40] <shapr> I like using laziness (non-strictness) to make my programs go faster.
[18:35:42] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[18:36:05] <Franciman> :)
[18:36:37] <lispy> I am learning both haskell and lisp and I am liking lisp a bit more I think :P  I was here cuz I had a few questions when I was learning haskell and most recently I joined the clisp channel
[18:36:37] <shapr> For example, comparing two files for equality with a lazy language means the comparison can stop early: https://github.com/shapr/takedouble/blob/main/src/Takedouble.hs#L32
[18:36:51] <shapr> lispy: Are you not monsieur Dagit?
[18:37:01] <shapr> Oh, I guess not.
[18:37:04] <lispy> Nope Lol
[18:37:17] <shapr> hi lispy! I've just been learning common lisp myself.
[18:37:23] <Franciman> shapr: uhm you can do that in strict languages too
[18:37:32] <shapr> Franciman: sure, but it's more work
[18:37:33] <Franciman> just use stream based interface
[18:37:39] <Franciman> and it stops early
[18:37:49] <Franciman> with good abstractions you get the same code
[18:38:06] <Franciman> sure in sml you don't have it builtin. You have to write it yourself by hand
[18:38:08] <Franciman> this is a big cons
[18:38:11] <shapr> That's the thing I like about languages, they're all equal when you get to turing completeness; so it's about what the languages make easy to do
[18:38:22] <Franciman> sure
[18:39:04] <shapr> So I like learning what a language makes easy
[18:39:17] <Franciman> shapr: thing is
[18:39:27] <Franciman> laziness makes that easy, and everything else PURE HELL
[18:39:34] <Franciman> it writes laziness, it reads cringiness
[18:39:34] <shapr> Huh, doesn't seem that way to me
[18:39:41] <Franciman> sure
[18:39:47] <shapr> I really enjoy writing lazy code
[18:39:47] <Franciman> it's better like this
[18:40:03] <Franciman> i've been wasting my last year trying to improve the performance of my interpreter
[18:40:05] <shapr> I get to tie the knot and do all kinda fun things with laziness.
[18:40:15] <Franciman> the answer was: just switch to sml and kick the ass out of GHC
[18:40:24] <shapr> That's certainly one answer.
[18:40:39] <Franciman> as you were previously stating: i also like learning what a languages makes easy
[18:40:42] <maerwald> shapr: I don't think it's more work. 1. lazy IO is *bad*, 2. you should be using a streaming library to do it, 3. you have those in strict languages too
[18:41:07] *** Quits: razetime (~quassel@117.254.35.62) (Remote host closed the connection)
[18:41:31] <shapr> maerwald: do you mean because you can have an inconsistent view of the filesystem? What other bad do you mean?
[18:41:46] <maerwald> uhm, because it's a hack
[18:41:46] <merijn> shapr: Leaks resources (like file descriptors)
[18:42:02] <Franciman> oh so laziness can't get correctness in presence of side effects?
[18:42:05] <Franciman> uh
[18:42:07] <Franciman> uh
[18:42:08] <maerwald> and many more issues...
[18:42:35] <maerwald> `tar` relies on lazy IO, but keeps a reference to something at some point somewhere, so boom -> everything gets forces into memory
[18:42:41] <shapr> I still haven't dug into streaming libraries in Haskell, I'd like to do that sometime soon.
[18:43:19] <shapr> maerwald: would use of a streaming library fix that problem?
[18:43:22] <maerwald> yes
[18:43:49] <maerwald> I was about to fix it that way, but then stopped, because libarchive came along
[18:43:54] <maerwald> and now I'm not using tar anymore
[18:44:17] <shapr> Wow, tar is from long ago
[18:44:18] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[18:44:18] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:44:33] <maerwald> yeah... the issue is  that during unpack, it forces the entire file into memory
[18:44:43] <maerwald> but otherwise streams correctly
[18:44:55] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[18:44:59] <maerwald> so if you have 2GB archive with max file size 1mb, you don't notice
[18:44:59] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[18:45:02] *** Joins: lechner (~lechner@debian/lechner)
[18:45:05] <shapr> huh, I wouldn't expect that, since tar is concat'd files
[18:45:12] <maerwald> if you have one huge file your ram blows up
[18:45:20] <shapr> I wonder why it does that?
[18:45:55] <shapr> I had that problem the first time I wrote a plugin for lambdabot 
[18:46:09] <maerwald> https://github.com/haskell/tar/blob/a0d722c1f6052bf144017d131a715ea1ae599964/Codec/Archive/Tar/Read.hs#L117-L119
[18:46:34] <shapr> oh
[18:46:40] <maerwald> LBS.drop, but then bs' is passed onto the next iteration
[18:46:41] *** Joins: odnes__ (~odnes@5-203-245-187.pat.nym.cosmote.net)
[18:46:42] *** Quits: odnes_ (~odnes@5-203-245-187.pat.nym.cosmote.net) (Read error: Connection reset by peer)
[18:46:43] <maerwald> so blocks stream fusion
[18:47:07] <maerwald> those things aren't easy to spot
[18:47:35] <shapr> Is there some way to automatically find that sort of thing?
[18:47:42] <shapr> or is it "use a streaming library" ?
[18:47:53] <maerwald> memory profiling 
[18:47:57] <shapr> Ah, makes sense
[18:48:02] <maerwald> but then you need to have the right input
[18:48:11] <maerwald> this was only spotted, because I had an archive with huge files
[18:48:14] <shapr> so, memory profiling + property based testing?
[18:49:08] <maerwald> another library abusing lazy bytestring is https://hackage.haskell.org/package/xeno ... we've been discussing with streamly authors to rewrite it in that
[18:49:20] <maerwald> because here again, you make a mistake and your performance regresses
[18:49:31] <shapr> huh, neato
[18:50:06] <Franciman> shapr: do you have a tutorial in tying the knot
[18:50:09] <Franciman> ?
[18:50:19] <Franciman> in my third world sml, i have to use mutation to implement it :<
[18:50:40] <Franciman> it's so neat when expressed in haskell tho *.*
[18:51:05] <shapr> Franciman: the simplest thing is "let ones = 1 : ones"
[18:51:27] *** Quits: jackalope (~jackalope@50-24-138-131.bcstcmta02.res.dyn.suddenlink.net) (Ping timeout: 260 seconds)
[18:51:35] <shapr> maerwald: if I want to use a streaming library in takedouble instead of lazy IO, what's the easiest one to start with?
[18:51:36] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:51:36] <Franciman> wanna look at my example to implement fix?
[18:51:39] <Franciman> it's SO NEAT
[18:51:48] <Franciman> 1-liner, no-brainer
[18:51:49] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[18:51:54] <shapr> Franciman: you can link me, but I'm about to walk to buy food, I can look when I get back :-)
[18:52:13] <Franciman>     let res = eval (envPushValue res env) body in res
[18:52:18] <maerwald> shapr: I'd like so claim streamly, but it probably isn't. It's just that I prefer it and find the API more natural. But the docs can be confusing.
[18:52:20] <Franciman> can you make it shorter?
[18:52:26] <Franciman> i'd like to do it without the let
[18:52:28] <Franciman> maybe using fix?
[18:52:31] <Franciman> :t fix
[18:52:32] <lambdabot> (a -> a) -> a
[18:52:42] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[18:52:46] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[18:53:05] <Franciman> looks like it does yeah
[18:53:06] <Franciman> thanks shapr 
[18:53:08] <Franciman> have a nice meal
[18:53:15] *** Joins: hololeap (~hololeap@user/hololeap)
[18:53:33] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[18:54:55] <maerwald> shapr: the main two approaches to streaming is 1. expressing actual streams (streamly), so like lists, 2. expressing pipes, so you have a transformer that processes input and produces an output
[18:55:00] <maerwald> conduit takes the latter
[18:55:06] <maerwald> and is probably the most popular atm
[18:55:21] *** Joins: ab8 (~ab@2401:4900:55ac:f030:5de5:a385:33c6:42ed)
[18:55:26] <Franciman> is conduit faster than streamly, maerwald ?
[18:55:29] <maerwald> no
[18:55:41] <Franciman> it also seems more difficult than streamly
[18:55:44] <Franciman> so why pick it?
[18:55:53] <maerwald> I wouldn't
[18:56:02] <Franciman> uhm. But does it have any sort of advantage?
[18:56:03] <maerwald> but some people find it more natural
[18:56:05] <Franciman> apart form the huge ecosystem
[18:56:13] <maerwald> Franciman: yes, performance is very *stable*
[18:56:23] <Franciman> uh uh i understand. Thanks ^^
[18:56:24] <maerwald> while in streamly, if you make a mistake, you can get huge regressions
[18:56:40] <maerwald> but you usually also get much better performance than conduit if you do it right
[18:56:56] <Franciman> got it, ty
[18:57:12] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[18:57:14] <maerwald> that's because  streamly depends heavily on inlining, to let GHC optimize your hot loops
[18:57:42] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[19:00:27] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[19:02:50] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[19:03:38] *** Joins: rawley (~rawley@142.99.241.242)
[19:05:35] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 240 seconds)
[19:06:05] *** Quits: Franciman (~Franciman@mx1.fracta.dev) (Remote host closed the connection)
[19:10:59] *** Quits: acidjnk (~acidjnk@p200300d0c7049f4214af152190df7355.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[19:11:29] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[19:11:29] *** gehmehgeh_ is now known as gehmehgeh
[19:12:06] *** Quits: ccntrq (~Thunderbi@2a01:c22:8de1:1200:c0e8:7704:b751:d68a) (Remote host closed the connection)
[19:12:16] *** Quits: ab8 (~ab@2401:4900:55ac:f030:5de5:a385:33c6:42ed) (Ping timeout: 250 seconds)
[19:12:24] *** Joins: ccntrq (~Thunderbi@2a01:c22:8de1:1200:c0e8:7704:b751:d68a)
[19:13:43] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Quit: Leaving)
[19:15:19] *** Joins: jackalope (~jackalope@165.91.13.217)
[19:18:49] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:20:35] *** werdnA is now known as CoWaxDanguin
[19:20:38] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[19:21:18] *** CoWaxDanguin is now known as werdnA
[19:21:24] *** Quits: dolio (~dolio@130.44.130.54) (Quit: ZNC 1.8.2 - https://znc.in)
[19:24:18] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:24:35] *** Quits: werdnA (~andrew@114.88.181.56) (Quit: WeeChat 3.4.1)
[19:24:40] <Franciman> back from testing. At first the haskell version was DAYUMN SLOW
[19:24:49] *** Joins: CoWaxDanguin (~andrew@114.88.181.56)
[19:24:53] <Franciman> so i had to turn StrictData on. I got 3x speedup
[19:24:54] *** CoWaxDanguin is now known as werdnA
[19:25:05] <Franciman> now it's faster than the sml version. Mostly because haskell's runtime is DAYUMN NIFTY
[19:25:09] <abastro[m]> Wh
[19:25:34] <Franciman> sml version does a 10x more page faults. It performs less computations, but spends half of the time talking to the kernel lol
[19:25:39] <abastro[m]> Hmm, doesn't StrictData just add strictness annotations
[19:25:43] *** Joins: razetime (~quassel@117.254.35.62)
[19:25:54] <Franciman> yes, it reduces thunks
[19:26:01] *** Quits: werdnA (~andrew@114.88.181.56) (Client Quit)
[19:26:12] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[19:26:15] *** Joins: werdnA (~andrew@114.88.181.56)
[19:26:16] <Franciman> and i don't know what other evil thing. And gave me a huge speedup from 3.0s to 0.7s
[19:26:23] <abastro[m]> But yea it could be great if you are tired at adding !
[19:26:24] <Franciman> unbellyveable
[19:26:42] <Franciman> haskell's runtime is really something!
[19:26:55] *** Joins: dolio (~dolio@130.44.130.54)
[19:27:20] <[exa]> what's the code doing btw?
[19:27:28] <[exa]> (just dayumn curious)
[19:27:30] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:544e:226a:9b44:a162)
[19:27:33] <Franciman> evaluating a lambda term that sums the first 10million numbers
[19:27:50] <Franciman> (using a recursive implementation)
[19:27:56] <abastro[m]> <del>Random pythonista I met days ago: Well idk I don't think it will beat python</del>
[19:28:32] <abastro[m]> Sum by Lambda term?
[19:28:34] <Franciman> lol python can't even sum the first million numbers without exhausting memory
[19:28:42] <Franciman> abastro[m]: i implemented this algorithm:
[19:28:48] <Franciman> sum 0 = 0; sum n = n + sum (n-1)
[19:28:50] <abastro[m]> Hehe
[19:29:05] <abastro[m]> Oh, so simple sum function?
[19:29:05] <[exa]> Franciman: is it on Ints or Integers?
[19:29:19] <Franciman> Int64. I would expect it to be too slow on integers :(
[19:29:29] <abastro[m]> Likely optimized into loops at least
[19:29:33] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[19:29:38] <[exa]> how long does it take with an accumulator?
[19:30:18] <Franciman> [exa]: sorry you mean doing: sum n 0 = n; sum n k = sum (n + 1) (k - 1) ?
[19:30:30] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[19:30:34] <abastro[m]> Wouldn't haskell be smart enough to unroll it as loop anyway
[19:30:35] <Franciman> i would assume roughly the same, because I didn't implement tail call optimisation, but let me check!
[19:30:47] <Franciman> wait people
[19:30:55] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:30:56] <Franciman> i think i couldn't explain things right
[19:31:03] <Franciman> I used haskell to implement a toy interpreter
[19:31:09] <Franciman> i'm not implementing the sum in haskell
[19:31:11] <Franciman> but in the toy language
[19:31:14] <abastro[m]> Now I see what you did
[19:31:19] <abastro[m]> Yea now understood
[19:31:41] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 252 seconds)
[19:31:46] *** Quits: odnes__ (~odnes@5-203-245-187.pat.nym.cosmote.net) (Remote host closed the connection)
[19:32:06] *** Joins: odnes__ (~odnes@5-203-245-187.pat.nym.cosmote.net)
[19:32:50] <kuribas> abastro[m]: probably not ghc, but llvm maybe.
[19:33:02] <kuribas> abastro[m]: at least if it is strict.
[19:33:27] <kuribas> by llvm I mean the ghc llvm backend.
[19:34:18] <abastro[m]> I think haskell could even optimize the toy language impl into loop
[19:34:24] <abastro[m]> But that is too wild of a gusss
[19:34:24] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[19:34:45] <Franciman> the program is not know at compile time 
[19:35:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 252 seconds)
[19:39:56] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 252 seconds)
[19:40:26] *** Quits: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Ping timeout: 272 seconds)
[19:40:50] <abastro[m]> Oh, read from file?
[19:41:22] *** Joins: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[19:42:22] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[19:42:25] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[19:47:31] *** Quits: jackalope (~jackalope@165.91.13.217) (Ping timeout: 246 seconds)
[19:47:37] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 250 seconds)
[19:50:03] <Franciman> yes, on the long run
[19:50:06] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[19:50:08] <Franciman> now it's hardcoded :P
[19:50:33] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.4.1)
[19:55:30] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[19:58:17] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[19:58:32] *** Quits: pie__ (~pie_bnc@user/pie/x-2818909) (Quit: pie__)
[19:59:28] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[20:01:27] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 260 seconds)
[20:02:22] *** Quits: rawley (~rawley@142.99.241.242) (Remote host closed the connection)
[20:02:44] *** Joins: rawley (~rawley@142.99.241.242)
[20:03:02] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 252 seconds)
[20:03:37] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[20:03:59] *** Joins: jackalope (~jackalope@50-24-138-131.bcstcmta02.res.dyn.suddenlink.net)
[20:04:57] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (Quit: pie_)
[20:05:48] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[20:07:07] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[20:08:02] *** Quits: razetime (~quassel@117.254.35.62) (Remote host closed the connection)
[20:09:00] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[20:09:18] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:10:24] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[20:11:16] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[20:12:59] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[20:14:38] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 272 seconds)
[20:14:39] *** Joins: razetime (~quassel@117.254.35.62)
[20:15:15] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[20:16:29] *** Joins: gdd (~gdd@129.199.146.230)
[20:17:52] *** Quits: ccntrq (~Thunderbi@2a01:c22:8de1:1200:c0e8:7704:b751:d68a) (Remote host closed the connection)
[20:18:10] *** Joins: ccntrq (~Thunderbi@2a01:c22:8de1:1200:c0e8:7704:b751:d68a)
[20:18:19] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[20:19:02] *** Quits: benin (~benin@183.82.24.110) (Quit: The Lounge - https://thelounge.chat)
[20:20:30] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[20:21:38] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:25:40] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[20:28:06] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[20:30:05] *** Quits: Deide (~deide@user/deide) (Quit: You have been kicked for being idle)
[20:30:08] *** Quits: Joe[m] (~jsricemat@2001:470:69fc:105::1:b4ce) (Quit: You have been kicked for being idle)
[20:30:08] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (Quit: You have been kicked for being idle)
[20:30:51] *** Quits: Major_Biscuit (~MajorBisc@c-001-024-026.client.tudelft.eduvpn.nl) (Ping timeout: 260 seconds)
[20:32:45] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:33:40] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[20:34:13] *** Quits: Digit (~user@user/digit) (Ping timeout: 256 seconds)
[20:35:36] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[20:40:36] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[20:41:05] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[20:41:07] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[20:41:34] *** Joins: odnes (~odnes@5-203-245-187.pat.nym.cosmote.net)
[20:41:49] *** Quits: odnes__ (~odnes@5-203-245-187.pat.nym.cosmote.net) (Ping timeout: 240 seconds)
[20:42:48] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[20:44:25] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 256 seconds)
[20:45:13] *** Joins: Digitteknohippie (~user@user/digit)
[20:47:02] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.235)
[20:47:32] *** Joins: Topsi (~Tobias@dyndsl-095-033-095-210.ewe-ip-backbone.de)
[20:48:04] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[20:48:24] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[20:48:27] *** Quits: Digitteknohippie (~user@user/digit) (Read error: Connection reset by peer)
[20:48:39] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[20:49:03] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 260 seconds)
[20:49:25] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[20:49:47] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[20:50:19] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[20:50:25] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[20:50:51] *** Joins: gdd (~gdd@129.199.146.230)
[20:50:53] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[20:51:38] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[20:53:17] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (Quit: pie_)
[20:54:34] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:56:01] *** Quits: mbuf (~Shakthi@122.173.70.161) (Quit: Leaving)
[20:56:08] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[20:57:17] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:57:52] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[20:58:17] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[21:00:34] *** Joins: alp (~alp@user/alp)
[21:05:17] *** Joins: bahamas (~lucian@84.232.140.158)
[21:06:29] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[21:06:34] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 272 seconds)
[21:09:25] *** Quits: ccntrq (~Thunderbi@2a01:c22:8de1:1200:c0e8:7704:b751:d68a) (Remote host closed the connection)
[21:09:37] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[21:10:08] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 260 seconds)
[21:13:59] *** Quits: Guest19 (~Guest19@ip-86-49-182-248.zrnko.net) (Quit: Client closed)
[21:16:11] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[21:20:45] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[21:22:57] *** Quits: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[21:23:18] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:23:31] <hololeap> streaming, pipes, lists, fusion... whenever anyone starts throwing these words around I kinda sorta get what they're talking about, but not really
[21:25:52] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[21:26:02] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:29:05] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[21:29:12] *** Quits: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Remote host closed the connection)
[21:29:34] *** Joins: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[21:30:32] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[21:33:24] <hololeap>  > the main two approaches to streaming is 1. expressing actual streams (streamly), so like lists, 2. expressing pipes, so you have a transformer that processes input and produces an output
[21:33:55] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[21:34:03] <hololeap> I understand #2 pretty well, I think, but how does it differ from #1? what is an "actual stream" and what makes it like a list, whereas #2 is _not_ like a list?
[21:34:07] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[21:38:45] <[exa]> hololeap: if I get it correctly, #1 gets efficient magically thanks to list fusion (if you have several functions like `f p (x:xs) = g x:f (h p) xs` and join them with (.), with a bit of luck it optimizes to something very efficient with almost no unnecessary allocation), and in #2 you use various high-level tricks to explicitly construct the efficient function yourself (avoiding the need for implicit luck)
[21:39:47] <geekosaur> and a stream structure (#1) is typically an infinite list: data Stream a = Stream a (Stream a)
[21:42:58] <[exa]> yeah because if you need to check for [], your amount of data is too low to even necessitate streaming. :D
[21:42:59] *** Joins: bahamas (~lucian@84.232.140.158)
[21:44:22] *** Joins: econo (uid147250@user/econo)
[21:46:16] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Quit: Connection closed)
[21:46:25] *** Joins: arjun (~arjun@user/arjun)
[21:46:44] *** Quits: arjun (~arjun@user/arjun) (Client Quit)
[21:47:06] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[21:47:44] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[21:48:37] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 246 seconds)
[21:48:37] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[21:52:47] *** Joins: vicfred (~vicfred@user/vicfred)
[21:53:26] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 272 seconds)
[21:53:48] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Remote host closed the connection)
[21:54:05] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[21:54:28] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.235) (Ping timeout: 260 seconds)
[21:55:19] *** Quits: razetime (~quassel@117.254.35.62) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:55:38] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[21:55:56] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[21:56:51] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[21:58:25] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 246 seconds)
[21:58:36] *** Quits: jackalope (~jackalope@50-24-138-131.bcstcmta02.res.dyn.suddenlink.net) (Ping timeout: 260 seconds)
[21:59:31] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[22:01:30] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[22:04:08] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[22:05:08] *** Joins: jakalx (~jakalx@base.jakalx.net)
[22:07:46] *** Quits: hgolden (~hgolden2@cpe-172-251-233-141.socal.res.rr.com) (Remote host closed the connection)
[22:08:47] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Quit: Leaving)
[22:09:02] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:09:36] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Read error: Connection reset by peer)
[22:09:48] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:09:54] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 272 seconds)
[22:11:11] *** Joins: bob (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:11:43] *** Quits: bob (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Read error: Connection reset by peer)
[22:11:51] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[22:12:01] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Client Quit)
[22:12:04] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[22:12:15] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:12:46] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[22:13:08] *** Quits: CATS (apic@brezn3.muc.ccc.de) (Remote host closed the connection)
[22:13:46] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:13:51] *** Joins: bob (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:13:51] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Client Quit)
[22:13:53] *** Quits: bob (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Read error: Connection reset by peer)
[22:16:01] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Quit: Connection closed)
[22:17:19] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:18:46] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 272 seconds)
[22:21:06] *** Joins: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl)
[22:21:12] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[22:22:14] *** Macbethwin is now known as Chargen
[22:22:40] *** Joins: pnotequalnp (~kevin@user/pnotequalnp)
[22:26:35] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 252 seconds)
[22:26:56] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.235)
[22:29:10] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[22:30:14] *** Joins: Macbethwin_ (~chargen@8.21.8.253)
[22:30:37] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[22:31:17] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.235) (Ping timeout: 256 seconds)
[22:33:39] <ProfSimm> What is this called in haskell when you have "fun arg arg arg arg arg"
[22:33:39] <ProfSimm> Application chain, but is there a name for it
[22:33:44] *** Quits: Chargen (~chargen@D964062A.static.ziggozakelijk.nl) (Ping timeout: 252 seconds)
[22:33:59] *** Macbethwin_ is now known as Chargen
[22:34:18] *** Quits: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com) (Ping timeout: 252 seconds)
[22:34:31] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[22:34:49] <tomsmeding> 12:30 <maerwald> tomsmeding: it's not using bwrap?
[22:34:54] <tomsmeding> what makes you say that?
[22:35:18] <maerwald[m]> tomsmeding: i dunno, maybe I'm high
[22:35:43] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[22:35:52] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 246 seconds)
[22:36:02] <tomsmeding> come back down then :p
[22:36:11] *** Joins: CATS (apic@brezn3.muc.ccc.de)
[22:36:21] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[22:39:40] <tomsmeding> ProfSimm: you mean a function applied to lots of arguments that arae the same?
[22:39:48] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[22:40:09] <ProfSimm> tomjaguarpaw: not the same, just the application chain or call chain
[22:40:19] <ProfSimm> Anywya
[22:40:22] <tomsmeding> an... n-ary application?
[22:40:30] <ProfSimm> Is that the official name?
[22:40:58] <tomsmeding> not sure what part of "applying a function to arguments" is what you're trying to find a name for :p
[22:42:37] <monochrom> There is no special name for application upon application upon appliction.
[22:43:11] *** Joins: jackalope (~jackalope@165.91.13.172)
[22:43:44] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4.1)
[22:43:55] <monochrom> Just like there is no special name to distinguish "((x+y)*(a-b))^(c/d)" from "x+y".
[22:44:14] <monochrom> Apart from "humongous mess".
[22:45:37] <monochrom> "epic formula" if you're in a good mood.
[22:45:45] <Rembane> Why not both?
[22:46:58] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[22:47:19] <monochrom> Sure, humongous mess, epic formula, emperor of the lone islands, defender of the faith. >:)
[22:47:29] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 252 seconds)
[22:47:47] <Rembane> Legendary!
[22:48:26] <monochrom> Err not epic enough. s/emperor of the lone islands/emperor of the lone islands and othe realms/ .  Now that's more like it heehee.
[22:49:12] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[22:49:39] <Rembane> Spicy!
[22:51:06] <tomsmeding> emperor of \underline{\mathbf{Set}}
[22:51:31] <tomsmeding> now that would be an impressive title
[22:51:52] <monochrom> you forgot "and other classes and categories" >:)
[22:51:56] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[22:52:10] <monochrom> and "defender of the types" haha
[22:52:32] *** Joins: jgeerds (~jgeerds@d5364b87.access.ecotel.net)
[22:53:19] <tomsmeding> Lord of the Higher Kinds
[22:53:35] <Rembane> Conqueror of P=NP
[22:54:37] <monochrom> Now it's my turn to go "why not both". Conqueror of P=NP and P≠NP.
[22:54:52] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 272 seconds)
[22:55:36] <Rembane> It's indeed your turn. This is good conquest.
[22:55:42] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[22:56:31] <monochrom> "think like a warmongering despot" :)
[22:56:39] <tomsmeding> just work in Falso http://sigtbd.csail.mit.edu/pubs/2016/paper9.pdf
[22:58:23] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[22:58:54] <monochrom> I was wondering why it's self-consistent. Then, oh, of course, no one says it's consistent (without self-). 
[22:59:18] <monochrom> "Falso proves itself consistent" is true. :)
[23:00:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[23:04:22] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 272 seconds)
[23:06:57] *** Joins: k8yun (~k8yun@user/k8yun)
[23:10:31] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[23:10:55] *** Quits: jackalope (~jackalope@165.91.13.172) (Quit: = "vale")
[23:13:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[23:18:41] *** Quits: Chargen (~chargen@8.21.8.253) (Quit: Leaving)
[23:19:05] *** Joins: Macbethwin (~chargen@8.21.8.253)
[23:19:31] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:544e:226a:9b44:a162) (Ping timeout: 245 seconds)
[23:23:32] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[23:29:44] *** Joins: bahamas (~lucian@84.232.140.158)
[23:31:31] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[23:37:55] *** Joins: riddler2d (~riddler2d@94.250.72.176)
[23:43:09] *** Joins: fendor (~fendor@178.165.199.73.wireless.dyn.drei.com)
[23:45:23] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[23:49:14] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:23b1:9164:bf8a:2d11)
[23:50:25] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[23:50:29] *** Joins: xcmw (~textual@dyn-72-33-2-250.uwnet.wisc.edu)
[23:51:12] <xcmw> Are there any downsides to query based compilers as described in https://ollef.github.io/blog/posts/query-based-compilers.html ?
[23:52:54] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[23:54:17] *** Joins: jonathanx (~jonathan@c-5eea3313-74736162.cust.telenor.se)
[23:55:25] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[23:58:07] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[23:58:11] *** Joins: neurocyte8 (~neurocyte@IP-094016066081.dynamic.medianet-world.de)
[23:58:11] *** Quits: neurocyte8 (~neurocyte@IP-094016066081.dynamic.medianet-world.de) (Changing host)
[23:58:11] *** Joins: neurocyte8 (~neurocyte@user/neurocyte)
[23:58:59] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
