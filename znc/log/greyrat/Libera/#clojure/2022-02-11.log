[00:04:03] *** Joins: kipz (~kipz@home.kipz.org)
[00:05:37] *** Quits: kipper (~kipz@home.kipz.org) (Ping timeout: 240 seconds)
[00:16:39] <aphyr> my favorite thing about the clojure-pretending-to-be-c interview story is that it takes advantage of ordered hashmaps for { ... } brace expressions
[00:16:48] *** Joins: kipper (~kipz@home.kipz.org)
[00:16:53] <aphyr> Er, hashmap -> arraymap
[00:17:25] *** Quits: kipz (~kipz@home.kipz.org) (Ping timeout: 250 seconds)
[00:17:25] <aphyr> so every other expression (0, 2, 4, ...) in a {...} needs to be (lexically) distinct
[00:17:36] <ridcully_> and pairwise
[00:17:59] <aphyr> whence, exploiting the alternate unicode spacing character to create single literals that look and parse like two literals
[00:18:24] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[00:18:35] <aphyr> just truly, *deeply* evil behavior
[00:18:40] <ridcully_> but you could cheat with the ; homoglyph to even the odds
[00:18:57] <aphyr> I think it does that too hahaha
[00:19:02] *** Joins: kipz (~kipz@home.kipz.org)
[00:19:06] <aphyr> if you look closely not all ;s have the same syntax highlighting
[00:19:13] <ridcully_> from the syntax high lighting you dont
[00:19:23] <ridcully_> it looks like it's only used in the for
[00:19:43] <aphyr> right, right
[00:19:47] <ridcully_> yeah
[00:20:20] <aphyr> "looks like C, writes like INTERCAL"
[00:20:26] <ridcully_> APL
[00:21:07] *** Quits: kipper (~kipz@home.kipz.org) (Ping timeout: 256 seconds)
[00:22:35] <seebs> oh wow, that's an additional layer of fuckery i had not detected
[00:22:53] <seebs> i think i'm migrating my stance to: "aphyr did it" is probably evidence *against* it being possible
[00:22:55] <ridcully_> told yah, ; is special
[00:23:57] *** Quits: kipz (~kipz@home.kipz.org) (Ping timeout: 256 seconds)
[00:24:42] <ridcully_> the whitespace around things deliberate too.  you could put a homoglyph ; after a closing ) - but the for needs them
[00:25:24] <ridcully_> but then again, a macro could destructure symbol "nonsense"
[00:26:21] <seebs> hmm
[00:26:22] <seebs> user=> (c
[00:26:22] <seebs>   x = 3;
[00:26:22] <seebs>   x++ / 5;
[00:26:22] <seebs> )
[00:26:22] <seebs> 4/5
[00:26:28] <seebs> actually shouldn't that have produced 3/5
[00:27:13] <ridcully_> where is the `return`?
[00:27:29] <ridcully_> (not that it would mattern for the result)
[00:28:21] <seebs> yeah, no idea.
[00:28:52] <seebs> i'm still sad that go spelled increment as x++ instead of ++x because idiomatically, in my default language, i pronounce it "increment x".
[00:29:15] <wink> and not xcrement?
[00:29:17] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[00:29:22] <ridcully_> does it behave like ++x?
[00:29:41] <ridcully_> e.g. is it always incremented before anything else?
[00:31:28] <seebs> in go, it's a statement-only, it can't be in an expression, so the question doesn't matter
[00:39:37] <ridcully_> now i want to swquash seqs into strings and instaparse them inside a macro...
[00:41:36] *** Joins: kipz (~kipz@home.kipz.org)
[00:48:15] <aphyr> Yeah, I didn't bother with effect precedence for mutations like x++ :-(
[00:48:26] <aphyr> This was very much a "minimal features for this particular code snippet" thing
[00:48:32] *** Joins: kipper (~kipz@home.kipz.org)
[00:48:53] *** Quits: kipz (~kipz@home.kipz.org) (Ping timeout: 256 seconds)
[00:49:11] <rovanion> That interview story is the first of them that I kindof understand, and I'm horrified.
[00:49:12] <aphyr> Actually not sure at ALL how the rewrite rules combined to make that work
[00:49:35] *** Quits: kipper (~kipz@home.kipz.org) (Remote host closed the connection)
[00:50:22] <aphyr> I imagine if you press even a little bit on that macro it does incredibly weird things
[00:50:47] *** Joins: kipz (~kipz@home.kipz.org)
[00:52:57] *** Quits: kipz (~kipz@home.kipz.org) (Read error: Connection reset by peer)
[00:53:03] *** Joins: kipper (~kipz@home.kipz.org)
[00:54:23] <seebs> right so clearly my "i want to learn this language" project should be to try to make one that handles it all correctly. :P
[00:55:30] <ggb> Implementing a compiler is an ambitious learning project. I like that about you, seebs.
[00:55:42] <ggb> Make sure it's also optimizing!
[00:59:05] *** Quits: kipper (~kipz@home.kipz.org) (Ping timeout: 256 seconds)
[01:01:06] <seebs> i'm new to clojure, not programming :P
[01:02:48] <ggb> Sorry, I meant implementing that Clojure C-compiling macro. That's a challenge for anyone.
[01:03:27] <ggb> Not intending to deride your abilities.
[01:08:44] *** Quits: blei (~blei@209.201.38.106) (Quit: Client closed)
[01:08:54] <seebs> oh, it's definitely way too hard
[01:09:04] <seebs> that's what makes it a good test case for trying to learn to think about the language well
[01:11:29] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Ping timeout: 268 seconds)
[01:19:17] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:26:40] *** Quits: op2 (~op2@user/op2) (Quit: connection reset by purr)
[01:30:37] <ToxicFrog> TIL that the aphyr who wrote Verbing the Technical Interview is the same aphyr who hangs out here
[01:30:39] <ToxicFrog> Those are delicious, thank you for writing them
[01:33:14] <seebs> there's probably not a ton of aphyrs out there
[01:35:18] *** Joins: op2 (~op2@user/op2)
[01:35:42] <manicennui> I think jepsen and the talks about jepsen are how most people know him.
[01:42:29] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[01:48:09] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:56:06] <TimMc> aphyr: I have, just once, run into the no-lexically-identical-keys-in-a-map issue in Clojure.
[01:56:56] <TimMc> I don't think it was something like {(gensym) 1, (gensym) 2}
[01:58:57] <TimMc> ...but I think it was in pursuit of swearjure or something
[01:59:29] <TimMc> (where we also encountered such difficulties as "maps must have an even number of elements")
[02:02:22] <aphyr> Used to be just one!
[02:02:58] <aphyr> Now there's some zoomer who also likes the name and we compete for it on new services, which is why my reddit handle is aphyr_ :-O
[02:03:15] <technomancy> TheRealAphyr
[02:04:01] <aphyr> Ah, yes, also the woman who kept sending me extremely detailed demands that I pay her for the name which I stole from her dreams
[02:04:04] <aphyr> usernames are *fun*
[02:06:10] <aphyr> gosh come to think of it I've had *several* flavors of that email
[02:06:34] <aphyr> one who saw "Riemann is a network monitoring system" and became fixated on the idea that I was somehow monitoring the details of his personal life :-O
[02:13:31] <technomancy> "I can't help you with that, but I can refer you to a talented therapist..."
[02:13:58] <aphyr> Pretty much, yeah. I apologized and explained as best I could that it wasn't that sort of monitoring
[02:14:39] <aphyr> Must have been a scary experience for him. I always wonder what the best way is to respond to that kind of thing in a way that's gentle and helpful.
[02:16:46] <technomancy> I mean, he's not wrong; there *are* people monitoring his social network. just not you.
[02:18:26] <TimMc> oh nooo
[02:20:31] <TimMc> I remember when I wanted the same name everywhere. But now I tend to use a new name for each place...
[02:24:05] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[02:43:07] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[03:04:13] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[03:09:55] *** Joins: kipz (~kipz@home.kipz.org)
[03:30:53] *** Quits: nivag (~gavin@103-76-144-176.ip.cis.gen.nz) (Remote host closed the connection)
[03:37:41] *** Joins: nivag (~gavin@103-76-144-176.ip.cis.gen.nz)
[04:13:57] *** Joins: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net)
[04:23:15] *** Quits: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net) (Quit: Leaving)
[05:35:57] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:40:45] *** Quits: yauhsien (~Yau-Hsien@61-231-45-223.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[05:45:01] *** Joins: yauhsien (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net)
[05:50:02] *** Joins: mbuf (~Shakthi@117.96.201.174)
[06:01:08] *** Quits: justGhost (~justache@user/justache) (Remote host closed the connection)
[06:02:44] *** Joins: justGhost (~justache@user/justache)
[06:18:18] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:39:56] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 245 seconds)
[07:04:58] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[07:20:15] <sobel> perhaps the person identified as a network and felt monitored
[07:20:17] <sobel> er
[07:20:46] <sobel> at least you're not the author of curl, who gets the same angry email from CEOs telling him to stop scanning their network
[07:49:55] *** Quits: op2 (~op2@user/op2) (Ping timeout: 256 seconds)
[07:55:59] <TimMc> lolsob
[08:15:36] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[08:40:52] *** Joins: puchka (~marius@165.73.240.44)
[08:46:01] *** Quits: puchka (~marius@165.73.240.44) (Ping timeout: 256 seconds)
[08:47:35] *** Joins: puchka (~marius@102.162.118.170)
[08:52:12] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Remote host closed the connection)
[09:08:42] *** Quits: yauhsien (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net) (Quit: Leaving)
[09:21:09] *** Quits: mbuf (~Shakthi@117.96.201.174) (Ping timeout: 256 seconds)
[09:35:18] *** Joins: mbuf (~Shakthi@122.173.240.119)
[09:40:40] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[09:48:55] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 256 seconds)
[09:51:43] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:91b:49f7:fde:97e3)
[09:55:36] *** Joins: tomku (~tomku@user/tomku)
[09:59:23] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Remote host closed the connection)
[10:00:34] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[10:08:06] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Remote host closed the connection)
[10:09:34] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[10:35:55] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[10:46:31] *** Joins: xsperry (~xs@user/xsperry)
[10:46:34] *** Joins: struchu (~struchu@staticline-31-183-182-64.toya.net.pl)
[11:01:13] *** Joins: shiranaihito (~textual@219.85.41.219)
[11:01:51] *** Quits: shiranaihito (~textual@219.85.41.219) (Read error: Connection reset by peer)
[11:01:55] *** Joins: shiranaihito_ (~textual@219.85.41.219)
[11:26:19] <andreyorst> am I understanding this correctly that nio uses threads for its "async" operations?
[11:26:42] <andreyorst> like writing to the file with AsynchronousFileChannel
[11:27:16] *** Joins: op2 (~op2@user/op2)
[11:27:17] *** Quits: DasBrain_ (DasBrain@user/dasbrain) (Ping timeout: 240 seconds)
[11:28:06] *** Quits: shiranaihito_ (~textual@219.85.41.219) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[11:28:10] <andreyorst> it seems to me that it spawns a new thread for every file I'm trying to write
[11:34:24] *** Joins: piotrts (~piotrts@188.146.233.58.nat.umts.dynamic.t-mobile.pl)
[11:35:11] <Para> andreyorst: seems someone's wondered the same on stackoverflow https://stackoverflow.com/questions/39501924/java-asynchronousfilechannel-thread-usage
[11:37:09] <andreyorst> yeah, I've seen that, but I've also read about that there's a possiblity of using direct mapping of memory, which AFAIK should not require a thread
[11:37:40] <Para> That'd be MappedByteBuffer, entirely different beast.
[11:38:19] *** Joins: shiranaihito (~textual@219.85.179.213)
[11:38:23] <andreyorst> I'm reading https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/ByteBuffer.html
[11:38:38] <andreyorst> > Given a direct byte buffer, the Java virtual machine will make a best effort to perform native I/O operations directly upon it.
[11:38:59] <andreyorst> maybe that's what I've read somewhere else, but I'm not sure
[11:39:21] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:91b:49f7:fde:97e3) (Quit: Textual IRC Client: www.textualapp.com)
[11:39:53] <andreyorst> but, well, spinning a thread for each file is not async, it's a joke...
[11:40:05] <Para> And the two next chapters say to use either ByteBuffer#allocateDirect or FileChannel#map; the latter returns a MappedByteBuffer.
[11:42:18] <Para> FWIW I've always found NIO to be semantically sensitive; I suppose that's why Netty, XIO and friends are a thing. All built on NIO, just a lot more focused on the semantics to keep things clear and fast.
[11:42:48] <Para> That is, NIO promises to be non-blocking and asynchronous; spawning a background thread for each IO op satisfies both.
[11:43:17] <andreyorst> well, I mean
[11:43:43] <andreyorst> it does the job I just dont think that op is async if it's a blocking op
[11:44:01] <andreyorst> it causes me a trouble so
[11:44:53] <Para> Something's gotta block at some point.
[11:46:31] <andreyorst> IIUC C# on windows can do pure async writes without relying on threads, but that's because kernel can do that, and Linux just can't
[11:49:03] *** Joins: kipper (~kipz@home.kipz.org)
[11:51:17] *** Quits: kipz (~kipz@home.kipz.org) (Ping timeout: 240 seconds)
[11:51:25] <andreyorst> as a workaround I've tried creating a writer and writing a small portions of data to it then parking the thread
[11:51:50] <andreyorst> this is still blocking, but it's possible to make small writes to several files from a single thread
[11:53:01] *** Quits: kipper (~kipz@home.kipz.org) (Ping timeout: 240 seconds)
[11:53:17] *** Quits: jhulten_ (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[11:54:51] <seebs> i vaguely thought linux was in the process of acquiring a better async I/O interface but haven't looked closely to see whether it's actually there yet
[12:00:13] <ridcully_> well there is clojure for clr...
[12:07:50] <andreyorst> windows server? no thanks :)
[12:20:52] *** Quits: shiranaihito (~textual@219.85.179.213) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[12:30:11] *** Joins: shiranaihito (~textual@219.85.179.213)
[12:37:48] *** Quits: piotrts (~piotrts@188.146.233.58.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[12:40:31] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[12:59:15] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:15:29] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:19:41] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[13:27:01] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Ping timeout: 240 seconds)
[13:50:33] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[14:03:23] *** Quits: shiranaihito (~textual@219.85.179.213) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[14:11:03] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[14:11:32] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[14:35:25] *** Joins: yauhsien (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net)
[14:36:26] *** Quits: puchka (~marius@102.162.118.170) (Ping timeout: 260 seconds)
[14:37:17] *** Quits: yauhsien (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[14:38:06] *** Joins: puchka (~marius@165.73.242.61)
[14:48:06] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Ping timeout: 260 seconds)
[14:49:20] *** Joins: yauhsien (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net)
[14:57:53] *** Joins: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de)
[15:00:15] *** Quits: puchka (~marius@165.73.242.61) (Quit: leaving)
[15:11:23] *** Joins: shiranaihito (~textual@2001-b011-4000-1d51-08c9-d720-1a52-d6d3.dynamic-ip6.hinet.net)
[15:13:22] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[15:15:57] *** Quits: shiranaihito (~textual@2001-b011-4000-1d51-08c9-d720-1a52-d6d3.dynamic-ip6.hinet.net) (Ping timeout: 250 seconds)
[15:38:06] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: Textual IRC Client: www.textualapp.com)
[15:54:02] *** Quits: henry40408 (~henry4040@123-204-141-191.adsl.dynamic.seed.net.tw) (Ping timeout: 240 seconds)
[15:58:14] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[16:06:56] *** Joins: henry40408 (~henry4040@123-204-141-191.adsl.dynamic.seed.net.tw)
[16:56:20] *** Joins: Afroboy (~afroboy@105.110.35.41)
[17:01:00] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:31:39] *** Joins: puchka (~marius@165.73.240.181)
[17:34:52] *** Quits: Afroboy (~afroboy@105.110.35.41) (Remote host closed the connection)
[17:37:14] *** Quits: henry40408 (~henry4040@123-204-141-191.adsl.dynamic.seed.net.tw) (Quit: The Lounge - https://thelounge.chat)
[17:40:08] <Para> You know what annoys me the most with Cursive? option+arrows do the exact same thing as command+arrows, while the latter should move the cursor to either beginning or end of the line.
[17:40:48] <Para> option+arrows is (usually) word/symbol break jump.
[17:41:07] <andreyorst> do you use paredit in cursive?
[17:41:55] <ridcully_> i'd expect that to configurable
[17:51:02] <Para> andreyorst: nope
[17:51:37] <Para> This is a side effect of Cursive not utilizing IDEA's own AST analysis thingamajig.
[17:51:57] <Para> and/or assumption that I would of course use only structural editing
[17:53:26] <Para> hah, that said, looks like I did the rubberduck thing - this keybinding can be removed, and yes, Cursive ships with overriding keybindings
[17:53:54] <Para> I guess I should read through all the key bindings Cursive has, they're not very intuitive...
[17:56:21] <Para> Not to mention some of them are plain broken, eg. Thread Form is ^+option, which on non-US keyboard layouts is something totally different, such as shift+Â¨Â¨+option
[17:57:06] <Para> IDEA is generally really good at avoiding those, which probably stems from fact that most of JetBrains staff is originally from ex. Soviet countries.
[18:08:10] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[18:08:18] *** Joins: Techcable (~Techcable@168.235.93.147)
[18:14:01] <andreyorst> we use US layout as our main. Only Apple for some reason thinks we use European layout
[18:14:42] <Para> I don't think Apple "thinks" :)
[18:14:59] <andreyorst> yeah, it's just a fruit
[18:15:13] <andreyorst> but maybe it thinks differently...
[18:15:19] <Para> Although, now that Ive is gone, they have shown some signs of intelligence again.
[18:16:20] <Para> This tangentially reminds me of a friend who managed to get his breakfast sausage's Thetans measured...Not much more to it than that, some expo had Scientologist booth, he went there, said that if he's more aligned than this sausage, he'll join. He wasn't.
[18:40:00] *** Quits: bcmiller (~bm3719@66.42.95.185) (Quit: leaving)
[18:43:18] *** Joins: henry40408 (~henry4040@123-204-141-191.adsl.dynamic.seed.net.tw)
[19:09:31] *** Quits: henry40408 (~henry4040@123-204-141-191.adsl.dynamic.seed.net.tw) (Quit: The Lounge - https://thelounge.chat)
[19:14:45] *** Joins: yoonkn (~user@175.197.208.79)
[19:18:09] *** Joins: henry40408 (~henry4040@123-204-141-191.adsl.dynamic.seed.net.tw)
[19:19:53] *** Quits: struchu (~struchu@staticline-31-183-182-64.toya.net.pl) (Quit: WeeChat 3.3)
[19:24:59] *** Joins: seschwar (~seschwar@user/seschwar)
[19:42:29] *** Quits: mbuf (~Shakthi@122.173.240.119) (Quit: Leaving)
[19:48:03] *** Quits: dadinn (~dadinn@host86-134-44-43.range86-134.btcentralplus.com) (Quit: leaving)
[20:09:58] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[20:24:18] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Quit: WeeChat 3.4)
[20:28:07] *** Quits: lunik1 (~lunik1@37.205.14.203) (Ping timeout: 256 seconds)
[20:28:19] *** Joins: egli` (~user@193-47-178-139.dyn.fiber.qlnet.ch)
[20:28:21] *** Joins: kipz (~kipz@home.kipz.org)
[20:29:08] *** Quits: egli (~user@nehebkau01.sbs.ch) (Quit: ERC (IRC client for Emacs 27.1))
[20:29:24] *** Quits: egli` (~user@193-47-178-139.dyn.fiber.qlnet.ch) (Client Quit)
[20:30:09] *** Joins: egli (~user@193-47-178-139.dyn.fiber.qlnet.ch)
[20:46:39] *** Joins: piotrts (~piotrts@188.146.233.58.nat.umts.dynamic.t-mobile.pl)
[20:47:32] *** Joins: kipper (~kipz@home.kipz.org)
[20:47:48] *** Quits: kipper (~kipz@home.kipz.org) (Remote host closed the connection)
[20:50:28] *** Quits: kipz (~kipz@home.kipz.org) (Ping timeout: 256 seconds)
[20:53:23] *** Quits: piotrts (~piotrts@188.146.233.58.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[20:54:15] *** Joins: tboehme (~tboehme@p200300ce1710ed4180c10c3bbf83411e.dip0.t-ipconnect.de)
[20:54:53] *** Quits: tboehme (~tboehme@p200300ce1710ed4180c10c3bbf83411e.dip0.t-ipconnect.de) (Client Quit)
[21:39:54] *** Quits: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[21:52:10] <seebs> <newbie voice> anyway paul graham says macros are the important part of lisp so i should probably just start writing and debugging macros to learn the language
[21:54:28] <technomancy> the first step in learning lisp is to ignore paul graham
[21:55:18] <logiz> lol
[21:55:19] <Para> Uncle Bob of Lisps
[21:55:24] <leah2> i liked the books...
[21:56:47] <technomancy> isn't a lot of On Lisp dedicated to how to write anaphoric macros?
[21:57:49] *** Quits: puchka (~marius@165.73.240.181) (Quit: leaving)
[21:58:50] <leah2> it's 1 chapter
[21:58:59] <leah2> 11 pages
[21:59:05] <seebs> so, according to a specialist in the field, i am technically not dyslexic
[21:59:30] <seebs> but in practice i am finding the ))) type stuff really hard, because i can't actually tell how many ) i'm seeing except "more than one" usually
[21:59:58] <seebs> i found a reference to an atom plugin which color-codes matching (), but apparently the github account hosting it disappeared
[21:59:59] <leah2> well without highlighting it's just a feel to me :p
[22:00:06] <technomancy> seebs: oh yeah, you definitely don't want to manually count parens; that's just a bad time for anyone
[22:00:12] <ToxicFrog> An editor that hilights matching parens helps there; one that does rainbow parens helps more.
[22:00:14] <leah2> but highlighting the current paren is good enough for me
[22:00:19] <ToxicFrog> I basically can't function without rainbow parens anymore.
[22:00:30] <leah2> and imo smart indentation > syntax highlighting :p
[22:00:32] <technomancy> IMO rainbow parens draw attention to parens, which is the opposite of what you want
[22:00:40] <seebs> i'm using atom currently because i also do a lot of go, and it has the only go highlighter i don't hate, which highlights identifiers in different colors per-identifier, rather than trying to tell me language syntax
[22:00:46] <Para> seebs: what you need is rainbow parentheses
[22:00:52] <Para> ...and some refactoring...
[22:00:54] <technomancy> you just want to have your editor always make sure there's the right amount of parens for you. you shouldn't have to acutally look at them.
[22:01:04] *** Joins: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de)
[22:01:19] <seebs> the issue isn't "are there the right number" but roughly "which of the things on this line are arguments to this function, and which are arguments to the function it returned"
[22:01:38] <Para> It's kind of a nice metric for identifying places worth refactoring. If your functions ends in ))))))))))))) maybe it deserves some love.
[22:01:41] <seebs> like, one of the koans in the set of koans i started with is
[22:01:44] <seebs> > (= 10 ((fn [n] (* 5 n)) 2))
[22:02:09] <seebs> and it's hard for me to quickly see that 2 is a parameter to the defined function, not a part of the function definition, etc.
[22:02:10] <technomancy> seebs: ah, in that case you probably need to develop an intuition for how indentation conveys that info
[22:02:24] <seebs> in a single-line example, it mostly doesn't :P
[22:02:35] <leah2> thats why you add a newline after [n] ;)
[22:02:39] <technomancy> right; in real code you would never see that on a single line
[22:02:45] <leah2> and after )) i guess
[22:02:51] <technomancy> I mean, if I submitted code like that it would never get past code review =)
[22:02:57] <Para> I've replaced my unnecessary saving habit with autoformatting.
[22:03:09] <Para> If I end up staring at piece of code for a bit, I'll autoformat it.
[22:04:28] <seebs> github.com/functional-koans/clojure-koans <-- i started with this because i tend to find this way of teaching a language comfortable
[22:05:39] <technomancy> I think koans would be a good way to learn the language constructs but probably not a good way to learn about readable code; literally the whole point is to be clever, right? =)
[22:06:10] <seebs> yeah, although mostly they're not so much clever as just "illustrating a point"
[22:06:30] * technomancy nods
[22:06:57] <Para> What even would be a golfable metric for Lisps, anyway? For Java cyclomatic complexity works really well but that doesn't feel natural for Clojure at least.
[22:07:16] <Para> And "less than x amount of y" is just magic.
[22:07:43] <seebs> hmm
[22:07:58] <seebs> i was going to say "times the reader looks confused" but i suppose lisp devs are usually aiming to maximize that
[22:10:39] *** Joins: OscarZ (~oscarz@95.175.104.142)
[22:11:20] *** Joins: bcmiller_ (~bm3719@66.42.95.185)
[22:13:43] <seebs> okay, philosophical question time
[22:13:54] <seebs> why `(< 1 2)` instead of `(< 2 1)`?
[22:14:23] <leah2> (+ 1 2 3) = 1+2+3  (< 1 2 3) = 1<2<3
[22:14:25] <seebs> like, if i had to describe one of "less-than one two" and "less-than two one" as true, it'd have been the second, because less-than-two is a modifier that is true of 1
[22:14:32] <seebs> ohh
[22:14:35] <seebs> okay that makes sense
[22:14:39] <leah2> does that help :)
[22:14:45] <seebs> yes! thank you.
[22:14:49] <leah2> not guess how many bugs i made because of (= 1) :>
[22:14:57] <leah2> s/not/now
[22:15:45] <technomancy> seebs: < is not "less than"
[22:15:53] <technomancy> seebs: < is "are the arguments in increasing order?"
[22:15:54] <seebs> i'm definitely gonna struggle with optional parameters
[22:16:41] <seebs> like, `(reduce fn vec)` -> `(reduce fn start vec)` confuses my fuzzy little brain, because the thing after fn *might* be a starting point or *might* be a vector
[22:17:01] <technomancy> seebs: it's almost always bad design to have an optional argument that is not at the end of the arglist
[22:17:08] <seebs> yes
[22:17:13] <technomancy> (for the exact reason you gave)
[22:17:18] <seebs> please tell reduce that
[22:17:26] <technomancy> rich doesn't return my calls any more =(
[22:17:57] <seebs> so i recall trying to do some emacs lisp for like four hours one afternoon back in like... possibly 1989
[22:18:21] <seebs> and then mostly not seeing it, and then i have a friend who's super into racket who will paste me 10-line things full of () and lambdas and assume that what they're doing is obvious
[22:18:22] <Para> `(< 1 2)` is also in Yoda
[22:18:22] <leah2> i think for reduce it's intuitive
[22:18:28] <technomancy> that's why I hustled off to make my own lisp, which doesn't have this problem =P
[22:19:09] <seebs> and for some reason i was expecting this to feel a lot harder than it does, possibly because friend is usually trying to convince me that there's a ton of real-world use cases where a y-combinator is super useful and it's not just the lisp equivalent of discovering you can build an entire CPU from nand gates
[22:19:10] <technomancy> leah2: I sort of agree, but I don't think one individual instance is worth breaking the overall rule of "optional arguments always go last"
[22:19:22] <leah2> well the rule is broken a lot more often :p
[22:19:25] <seebs> yeah
[22:19:51] <technomancy> lmao the Y-combinator? seriously?
[22:20:32] <leah2> i dont think you ever need it in clojure :p
[22:20:50] <technomancy> anyway yeah one of the biggest problems with lisps is that they tend to attract that kind of person who can say with a straight face that the y-combinator is a practical everyday technique
[22:20:54] <seebs> i'm like... yes, it does appear that this function allows you to do everything you could do with other functions, that's sort of neat, when exactly would it be the best way to do a thing?
[22:20:57] <ridcully_> seebs: with paredit or alike you usually just see through the parens.  the editor keeps them balanced
[22:21:18] <leah2> in clojure you just name the fn :p
[22:21:26] <ridcully_> also arent there ligature fonts that add counts to closing parens?
[22:21:35] <seebs> ... i haven't seen one but that's a lovely idea
[22:21:43] <leah2> then you need to do mental math, ugh
[22:21:43] <Para> (def (fn surprise! [] ...))
[22:21:59] <Para> ...gah, you know what I mean
[22:21:59] <seebs> so if you get a font that annotates your punctuation like that, are the resulting symbols ligature marks?
[22:22:22] <Para> ridcully_: oh I hate thaaat
[22:22:38] <leah2> ligatures are for printing, not for editing, now get off my lawn :p
[22:32:02] <ridcully_> oh i hate ligatures especially if they make no sense for the language.  but i was not offended by the screenshot that turned `)))))` into `)5` (where the 5 was the billiard ball)
[22:32:17] *** Quits: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:33:00] <Para> I prefer the visual clutter, it's easier to spot when glancing.
[22:33:04] <ridcully_> but than again i pay not much attention to parens
[22:33:17] <Para> Of course my eyesight is kinda crap so I prefer glanceability over convenience.
[22:33:57] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Read error: Connection reset by peer)
[22:35:30] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[22:35:44] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Read error: Connection reset by peer)
[22:36:25] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[22:42:30] <TimMc> technomancy: Hey, I *almost* needed the Y combinator for swearjure!
[22:42:38] <TimMc> very important
[22:42:48] <seebs> hmm
[22:43:13] <TimMc> (Instead, I had all functions just be passed a list of all the functions...)
[22:43:20] <seebs> (iterate (fn [x] x) :a) <-- repeat :a forever
[22:44:38] <seebs> oh, hmm.
[22:44:59] <TimMc> seebs: One thing about your previous example is that it contained a (( -- that's always a sign to sit up and pay closer attention.
[22:45:08] <seebs> so i thought "oh, but i can just write that as #(%1)", but of course i can't, because that's trying to call %1.
[22:45:59] <TimMc> seebs: Heh, yes. Big pitfall in -> as well.
[22:46:29] <TimMc> (-> ... #(foo bar %) ...) doesn't do what you'd think either.
[22:46:40] <seebs> i haven't encountered -> yet
[22:46:42] <TimMc> Has to be (-> ... (#(foo bar %)) ...)
[22:48:56] <seebs> so can the #/% form actually trivially express the same thing as (fn [x] x)? because it seems like i have to provide a function that just returns its argument...
[22:49:00] <seebs> user=> (take 5 (iterate #(quote %1) :a))
[22:49:00] <seebs> (:a p1__2# p1__2# p1__2# p1__2#)
[22:49:04] <seebs> i definitely did something
[22:49:53] <TimMc> #(do %)
[22:51:01] <ridcully_> also this is `identity` and the iterate is `repeat`
[22:51:22] <seebs> yeah, i know repeat already exists, i was just curious about how else i could spell it)
[22:52:35] *** Joins: lunik1 (~lunik1@37.205.14.203)
[22:52:42] <seebs> i'm now really curious what on earth my other iterate was doing, and what "p1__2#" means.
[22:55:36] <TimMc> seebs: First step in figuring something like this out is to throw ` in front of it.
[22:55:49] <TimMc> Try entering just `#(quote %1) in the REPL.
[22:56:26] <TimMc> (Then, if there are macros, put it through macroexpand. Not needed here, though.)
[22:56:51] <seebs> what's `
[22:57:12] <seebs> oh huh is that like ruby .inspect
[22:57:37] <aphyr> seebs: when you internalize `, please tell me, because almost ten years in I am *still* not sure how to explain it
[22:58:06] <seebs> i'm probably gonna just call it "you know, like ruby inspect or go %v"
[22:58:20] <TimMc> seebs: It's a fundamental part of the language called syntax-quote.
[22:58:22] <seebs> oh interesting.
[22:58:24] <aphyr> ` works like '--both prevent evaluation of the following form
[22:58:25] <seebs> user=> `(take 5 (iterate #(quote %1) :a))
[22:58:25] <seebs> (clojure.core/take 5 (clojure.core/iterate (fn* [p1__190__191__auto__] (quote p1__190__191__auto__)) :a))
[22:58:25] <seebs> user=> (take 5 (iterate #(quote %1) :a))
[22:58:25] <seebs> (:a p1__195# p1__195# p1__195# p1__195#)
[22:59:10] <aphyr> but ` does... *waves hands* qualification/lookup of symbols in the current lexical environment, and also supports a variety of syntax-splicing, like a template language
[22:59:24] <seebs> so there's a sequence-counting of transiently created things. what i'm not understanding, yet, is why the *first* iterate... oh, right. iterate yields its starting point first, then cycles calling that function on it, and that function is always producing the same thing
[22:59:56] <TimMc> seebs: This shows off most of what syntax-quote does: (let [x 5] `(list foo# ~x))
[22:59:59] <seebs> where p1__195# in some way hints at the meaning "195th thing made"
[23:00:19] <TimMc> Those are called gensyms.
[23:00:27] <aphyr> You can get your own via (gensym 'foo)
[23:00:39] <TimMc> Try (gensym "blah_")
[23:00:40] <seebs> i'd probably understand more of this if i knew what foo# and ~x meant
[23:00:40] <TimMc> yeah
[23:00:53] <seebs> oh hey and they all share a sequence
[23:00:54] <aphyr> Inside a `, #foo is short for "gensym a foo"
[23:01:12] <TimMc> It's only understood by syntax-quote.
[23:01:23] <aphyr> and notably, *every* use of #foo in the same ` is going to use the *same* automatically generated symbol
[23:01:34] <seebs> ohhh, interesting
[23:01:37] <aphyr> *high fives TimMc*
[23:01:47] <TimMc> You type fast!
[23:01:58] <aphyr> Likewise!
[23:02:19] <seebs> oh no. i have spent too long playing and now cats and an offspring are staring at me expectantly.
[23:02:30] <seebs> apparently other life forms want me to feed them??
[23:02:32] <aphyr> seebs: if it's helpful, I wrote https://aphyr.com/posts/305-clojure-from-the-ground-up-macros a while ago
[23:04:07] <TimMc> What's weird is ~
[23:08:20] <TimMc> (alter-var-root #'unquote (constantly class)) ^_^
[23:08:33] <aphyr> what on EARTH
[23:08:35] <TimMc> ~5 => java.lang.Long
[23:08:38] <TimMc> yay!
[23:08:55] <technomancy> IMO this quoting stuff is a lot easier to grasp after you've got a few weeks under your belt
[23:09:09] <TimMc> ^ ignore the thing I posted here, seebs
[23:09:27] <seebs> no no you have my interest
[23:09:38] <seebs> look if i went around learning things in a sensible order i would never get to have any fun
[23:09:46] <aphyr> Coming from ruby, one thing I found really helpful was to think of ` like a string "foo", and ~ as variable interpolation in that string: `(hello ~name) => "hello, #{name}"
[23:09:59] <technomancy> quoting and strings do have a lot in common
[23:10:05] <aphyr> except instead of strings, ` works on data structures
[23:10:05] <technomancy> even with like ... natural language
[23:10:24] <seebs> that said i am totally exiting and restarting clj to get away from whatever madness was invoked by that alter-var-root thing
[23:10:44] <aphyr> X-D
[23:10:46] <TimMc> alter-var-root is a way of totally ruining your execution environment
[23:10:52] <technomancy> like the way that quotation marks in a sentence remove it from being interpreted as a direct part of the sentence
[23:10:52] <seebs> yes
[23:11:25] <technomancy> like the difference between using a word as a word, and talking about a word like "word"
[23:11:41] <seebs> use/reference distinctions
[23:11:46] <technomancy> yeap
[23:11:49] <technomancy> distal access
[23:12:10] <aphyr> hang on, it's time for SEMIOTICS
[23:12:25] <technomancy> oh let me get my semiotics hat
[23:12:33] <seebs> or as they are called in the UK, LORRYOTICS
[23:13:23] <technomancy> lol
[23:14:08] <seebs> ohhh, i see. ~x is there for the reason that shell scripts do stuff like 'blahblahblah'"$var"'blahblahblah' to expand a variable inside an otherwise-unexpanded thing.
[23:14:15] <TimMc> bingo
[23:15:01] <seebs> also this is gonna wreck me because markdown, and discord, and like five other things use `foo` for code fragments, and go uses it for "really, just completely this sequence of unicode", and suddenly i'm using unmatched backticks for something else
[23:15:29] <seebs> also i want to thank y'all for being friendly, this is one of the best new-language-user experiences i've had
[23:15:30] <TimMc> There's more fun to be had there too. Try `["a" ~(range 5) "b"] and then swap out the ~ for ~@
[23:15:49] <aphyr> ~@ is incredible and I miss it so much in other contexts
[23:15:49] <seebs> aoooooh
[23:16:00] <TimMc> unquote-splicing
[23:16:01] <technomancy> single quotes being unpaired also throws people off
[23:16:21] <seebs> yeah, i dislike the "this modifier on an open paren modifies the close paren too" but it sort of makes sense
[23:16:52] <aphyr> Like @, it's one of those sigils that modifies the following expression
[23:16:55] <aphyr> `foo is also legal
[23:18:36] <seebs> ohhh
[23:18:46] <seebs> it's just likely that the expression will be in () because everything is
[23:18:51] <aphyr> Yep!
[23:18:52] <seebs> that makes a ton more sense
[23:18:58] <seebs> of course, now i *specifically* dislike it
[23:19:09] <seebs> for the same reason that i dislike if without {} and also if modifying {} in C
[23:19:12] <aphyr> If it bugs you, you can say (syntax-quote ...) instead of `...
[23:19:16] <seebs> yay
[23:19:27] <aphyr> Just like (deref foo) instead of @foo
[23:19:31] <technomancy> seebs: quote doesn't really modify the closing paren. the reader read the whole form, and then the quote affects a single form downstream of the reader
[23:19:50] <seebs> yeah, that makes more sense
[23:19:52] <seebs> huh
[23:20:33] <technomancy> understanding separation of reading and evaluation is one of those things that unlocks a lot of other concepts
[23:20:35] <seebs> *thinks* so could you make your own macro such that (mymacro ...) was equivalent to '(...)
[23:20:47] <TimMc> aphyr: Wait, you can?
[23:20:59] <aphyr> TimMc: hmm, lemme double-check
[23:22:02] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[23:22:23] <aphyr> Whoah, no, apparently I'm wrong. There's `unquote-splicing and `unquote but no `syntax-quote
[23:22:41] <TimMc> But quote is there
[23:22:47] <aphyr> Weird. We have ' = (quote)...
[23:22:50] <aphyr> Yeah, exactly
[23:23:40] <aphyr> Sorry seebs! This one's Just Weird (TM)
[23:26:37] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[23:27:31] <technomancy> weird question: have you ever explicitly used ' over ` because you wanted not only to convey that there was no unquoting, but specifically to ensure that unquoting did not happen?
[23:27:46] <aphyr> Oh, yeah, for anaphoric capture
[23:28:25] <technomancy> ah, ok. I'm fine with making that more difficult in fennel =)
[23:28:59] <technomancy> fennel has no regular-quote, only backtick, and I'm pretty sure that's fine but like ... maybe there's legitimate use cases I haven't thought of
[23:29:02] <seebs> what's an anaphoric capture
[23:29:25] <aphyr> Intentionally interfering with variables in lexical scope via a macro
[23:29:35] <technomancy> (anaphora don't count as legitimate use cases)
[23:29:42] <technomancy> seebs: evil macros
[23:30:32] <technomancy> it's not a story the jedi would tell you.
[23:30:42] <aphyr> For instance, a macro which introduces a specially named variable in scope. Like (with-fridge (close! door)); the with-fridge macro migth make a `door variable available to anyone in that with-fridge expression.
[23:31:27] <aphyr> The normal path is to let the user provide their own name for it, like (with-open [my-file (open-some "file.txt")] ...)
[23:32:10] <technomancy> it's a path to abilities that some would consider ... unnatural
[23:32:14] <aphyr> But in certain cases it'd be cumbersome for the user to reintroduce their own name for something every single time. `recur and `catch are language built-ins that have special meaning
[23:32:22] <seebs> "when-not" -> "when't"
[23:32:58] <technomancy> aphyr: huh... I never thought of catch as an anaphora before but I guess it checks out
[23:33:07] <aphyr> technomancy: yeah, this is most of my anaphora tbh
[23:33:15] <technomancy> I have always thought of it as a special form of `try`
[23:33:33] <aphyr> As a concrete example (and one I use constantly), I have a macro called with-retry that gives you a "magic" `(retry ...) expression
[23:33:36] <aphyr> https://github.com/aphyr/dom-top/blob/master/src/dom_top/core.clj#L253-L258
[23:33:41] <technomancy> it's not like a normal identifier because you can't like ... pass it around as an argument
[23:33:53] <technomancy> I think most of the discussion around anaphora is about first-class identifiers
[23:34:12] <aphyr> That `retry is basically a language keyword in the "mini-language" with-retry defines
[23:34:32] <aphyr> If you want to write a macro that *emits* a with-retry expression... it needs to generate an unqualified form like (retry ...)
[23:34:57] <aphyr> But if you say `(retry ...), it'll qualify retry in the local namespace. What you actually want is `(~'retry ...)
[23:35:32] <technomancy> I've always thought that the hygiene protections in backtick are really about special rules regarding locals
[23:35:40] <aphyr> https://github.com/jepsen-io/radix-dlt/blob/e599477376ea4b8a6b0c86368d28dc4efb447b8f/src/jepsen/radix_dlt/pubcheck.clj#L142
[23:36:35] <technomancy> like... I think that's the motivation for why they exist; they just happen to also affect "special-form" anaphora as well... huh.
[23:36:38] <technomancy> kind of by accident?
[23:36:43] <aphyr> technomancy: Yeah, I think that's spot on.
[23:37:05] <aphyr> I *like* the guardrails, but I drive through them often enough that I appreciate having a concise idiom for it
[23:37:24] <technomancy> honestly I am not sure whether most people mean this when they talk about anaphora
[23:37:33] <technomancy> I don't think it's an incorrect definition; it's just ... hm. it's different.
[23:37:42] <aphyr> Yeah, I may be extending the definition weirdly.
[23:39:14] <technomancy> what do you think about "special form" as a more specific term for that?
[23:39:15] <aphyr> Oh, and seebs, to your earlier question about defining your own quote macro: yep!
[23:39:19] <aphyr> (defmacro myquote [x] `(quote ~x))
[23:39:54] <aphyr> technomancy: I'll defer to people with more expertise in macro theory!
[23:40:01] <aphyr> I'm just an avid practitioner ;-)
[23:40:17] <technomancy> haha, sure. but I mean, if I said that `catch` is a special form of `try`; does it make sense to you?
[23:40:34] <technomancy> or ^thrown?` as a special form of `is`  (that one drives me nuts tbh)
[23:40:37] <aphyr> Yeah. I have a vague sense that special forms *can't* be interfered with by macros though
[23:40:59] <technomancy> most people think of them as things that are hard-coded into the compiler
[23:41:07] <aphyr> Like there's... I can't put my finger on how exactly, but sometimes I've tried to generate or rewrite try/catch and it doesn't behave like other forms
[23:41:21] <technomancy> but by analogy they could be hard-coded into the macro itself; in both cases they're weird constructs that aren't first-class
[23:41:23] <aphyr> So there's a sense in which `retry or the early return construct in https://github.com/aphyr/dom-top/blob/master/src/dom_top/core.clj#L344 aren't really special forms
[23:41:49] <aphyr> Yeah, they're this in-between thing. Definitely *syntax*, but also not baked into the language core.
[23:41:55] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[23:42:12] <technomancy> "doesn't have a corresponding var" being the commonality I guess
[23:42:33] <aphyr> let does that!
[23:43:06] <aphyr> and this is, weirdly enough, not exactly `let either. The way I implement retry, it actually overrides any local let binding of `retry!
[23:43:27] <technomancy> `let` has a var, but it's a thin wrapper around `let*` which I guess is implemented in java
[23:43:40] <aphyr> Oh, yeah, I mean that like, let variables don't have associated vars
[23:43:54] <technomancy> oh, you mean locals in general; sure
[23:43:59] <technomancy> but locals are absolutely first-class values
[23:44:11] <aphyr> Whoah, I need to think about that one!
[23:44:22] <aphyr> They are to... macros, right? But not at the evaluator level?
[23:44:36] <technomancy> errrrrr ok so
[23:44:45] <aphyr> (my hat is off to your language-designer skills here, I have NOT been able to wrap my head around this precisely)
[23:45:01] <technomancy> yeah, the values are first class but the name-ness of the local is not really
[23:45:07] <technomancy> definitely not in the way that vars are
[23:45:10] <technomancy> haha
[23:45:33] <aphyr> seebs: btw what technomancy and I are talking about has approximately zero bearing on anything you will probably ever need to do ;-)
[23:45:37] <technomancy> like you can pass a local to a function but you can't pass `catch` to a function
[23:45:46] <technomancy> oh, huh. so apparently the docstring of clojure.test/is does in fact call out `thrown?` as being a special form. so I guess I didn't make this up myself.
[23:45:53] <aphyr> Oh!
[23:46:04] <aphyr> And yeah thrown? is SUCH A WEIRD PART of the stdlib
[23:46:24] <technomancy> like sometimes you really want to create a helper function that uses it, but no. not allowed.
[23:47:01] <aphyr> I'm sure I've probably called things like `retry a "special form" too
[23:47:35] <technomancy> but if you had moved `thrown?` to being a macro, you could use it in helper functions, but you would lose out on the fancy reporting functionality that `is` offers. so there's a reason for it to be special.
[23:47:54] <technomancy> but then again, `is` also does special reporting on `=` which is absolutely available as first-class, so why not make it like that?
[23:49:50] <technomancy> anyway I think backtick is still fine for fennel because fennel doesn't solve hygiene by auto-namespacing; it just slaps a boolean on a symbol that comes from backtick which bans it from being used as a local, which I think means it solves the specific problem of hygiene without getting in the way of special-form anaphora that you've pointed out are still pretty legitimate so I count that as a win
[23:50:05] <ridcully_> so thrown? is something the is-ish macros look for inside the code they get and only transform there?
[23:50:17] <technomancy> ridcully_: yep!
[23:50:34] <technomancy> try using it outside `is` and you'll get a compile error
[23:52:28] <ridcully_> so if you write your own, you'd basically do something like turning the body into a try/catch where the last statement in the try is an assert, that fails
[23:53:18] <ridcully_> or rather add a catch for the exception you are looking for being the only branch, that does not assert
[23:56:56] <TimMc> It looks like the `is macro simply says "if a top-level expression in the body starts with 'thrown? emit this code", special-casing the symbol.
[23:57:15] <TimMc> It's not a "true" special form in the Clojure sense.
[23:57:52] <TimMc> not like 'if
