[00:02:06] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:07:17] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[00:08:38] *** Joins: subie (~subie@2601:4c0:4080:bc0:ca0f:1d28:f742:47b5)
[00:09:51] *** Joins: proller (~p@80.240.216.69)
[00:14:36] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Ping timeout: 252 seconds)
[00:15:48] *** Quits: subie (~subie@2601:4c0:4080:bc0:ca0f:1d28:f742:47b5) (Ping timeout: 240 seconds)
[00:18:44] *** Joins: subie (~subie@c-68-35-254-134.hsd1.fl.comcast.net)
[00:23:46] *** Quits: bbrtj (~bbrtj@185.24.91.138) (Ping timeout: 272 seconds)
[00:24:35] *** Joins: bbrtj (~bbrtj@185.24.91.138)
[00:35:10] *** Quits: martinus__ (~martin@139.30.201.77.rev.sfr.net) (Ping timeout: 272 seconds)
[00:36:50] * GumbyPAN CPAN Upload: BankAccount-Validator-UK-0.63 by MANWAR https://metacpan.org/release/MANWAR/BankAccount-Validator-UK-0.63
[00:39:54] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[00:46:56] *** Quits: magla (~gelignite@d536552c.access.ecotel.net) (Quit: Stay safe!)
[00:49:46] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:51:51] * GumbyPAN CPAN Upload: PPIx-QuoteLike-0.020_03 by WYANT https://metacpan.org/release/WYANT/PPIx-QuoteLike-0.020_03
[00:57:55] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 256 seconds)
[01:00:31] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:08:15] *** Joins: deadmarshal_ (~deadmarsh@95.38.230.121)
[01:09:05] <cjac> dwalker: cool!  you're welcome to contribute :-)
[01:10:01] <cjac> which reminds me.  I just added a 1.02.01
[01:13:10] *** Quits: deadmarshal_ (~deadmarsh@95.38.230.121) (Ping timeout: 272 seconds)
[01:14:34] *** Quits: bscan (~bscan@2600:380:5924:d197:c405:3c67:cb62:2293) (Read error: Connection reset by peer)
[01:14:58] *** Quits: cromedome (~cromedome@75-57-114-197.lightspeed.chrlnc.sbcglobal.net) (Quit: $cromedome->exit;)
[01:16:37] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[01:16:54] * GumbyPAN CPAN Upload: NIST-NVD-1.02.01 by CJCOLLIER https://metacpan.org/release/CJCOLLIER/NIST-NVD-1.02.01
[01:19:06] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[01:21:00] *** Joins: Trigon (~reuben@144.39.114.115)
[01:24:58] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[01:30:02] *** Joins: proller (~p@2a02:6b8:b081:b503::1:2e)
[01:31:49] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:37:01] *** Quits: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[01:39:46] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[01:46:31] *** Quits: proller (~p@2a02:6b8:b081:b503::1:2e) (Ping timeout: 260 seconds)
[01:47:55] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[01:49:49] *** Quits: bbrtj (~bbrtj@185.24.91.138) (Ping timeout: 256 seconds)
[01:50:18] *** Joins: hurl (~hurl@212.183.219.210.dyn.user.ono.com)
[01:51:58] * GumbyPAN CPAN Upload: Quiq-1.201 by FSEITZ https://metacpan.org/release/FSEITZ/Quiq-1.201
[01:53:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[01:55:17] *** Joins: fling (~fling@user/fling)
[01:58:03] *** Quits: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (Remote host closed the connection)
[02:00:40] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[02:00:57] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[02:01:27] *** Joins: not-n1to (~n1to@user/n1to)
[02:01:34] *** Quits: not-n1to (~n1to@user/n1to) (Remote host closed the connection)
[02:01:58] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[02:06:52] *** Quits: n1to (~n1to@user/n1to) (Quit: Leaving)
[02:19:04] *** Quits: ovid (~ovid@pop.92-184-112-154.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[02:23:06] <cjac> what am I doing wrong here...? @match = ( 'cpe:2.3:a:bigantsoft:bigant_server:5.6.06:*:*:*:*:*:*:*' =~ m{^(cpe(?::([^:]+)){5,12})$} )
[02:23:34] <cjac> shouldn't match include the full string, followed by the values within the colon delimiters?
[02:23:38] <cjac> all I'm getting is the last *
[02:24:27] <cjac> why not just a split?
[02:33:14] *** Joins: ovid (~ovid@pop.92-184-112-154.mobile.abo.orange.fr)
[02:34:38] <simcop2387> perlbot: farnsworth 0.8 Mpascal -> psi
[02:34:48] <simcop2387> hrm
[02:34:55] <perlbot> simcop2387:  116.030190184167 
[02:35:06] <simcop2387> ok plenty
[02:35:11] <simcop2387> dunno why that was so slow
[02:35:23] <xenu> eval: [@match = ( 'cpe:2.3:a:bigantsoft:bigant_server:5.6.06:*:*:*:*:*:*:*' =~ m{^(cpe(?::([^:]+)){5,12})$} )];
[02:35:27] <perlbot> xenu: ["cpe:2.3:a:bigantsoft:bigant_server:5.6.06:*:*:*:*:*:*:*","*"]
[02:36:54] <xenu> the first element of @match is $1, the second is $2
[02:37:44] <xenu> in other words, the first element is contents of the outer capture group, and the second is the inner capture group
[02:40:15] <kjetilho> is it defined if (.){3,5} return the first or the last character?
[02:41:16] *** Joins: proller (~p@2a02:6b8:b081:b646::1:3c)
[02:41:52] <xenu> kjetilho: i don't understand the question, i need more context
[02:42:52] <kjetilho> "abc" =~ m{(.){3,5}}  - is it well defined wheter $1 will be a, b or c?
[02:43:06] *** Joins: whynot (~whynot@46.96.183.23)
[02:43:57] *** Joins: rgrinberg (~textual@177.248.144.104)
[02:44:14] <simcop2387> perlbot: farnsworth 120 liter/hour -> floz/minute
[02:44:27] <perlbot> simcop2387:  (32000000000/473176473  /* apx (67.628045403686) */) 
[02:44:41] <simcop2387> ok so that can do half a gallon in a minute, that's more than plenty
[02:49:02] *** Quits: hurl (~hurl@212.183.219.210.dyn.user.ono.com) (Quit: Leaving...)
[02:54:01] <kjetilho> I can't find any mention of this in perlre(1).  I have never been tempted to write a regexp which depends on that behaviour anyway, I just got curious
[02:54:35] <xenu> kjetilho: i don't have a citation, the regex documentation is terrible, but yes, it should be always the last value
[02:55:14] <kjetilho> ok, thanks
[02:57:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[02:59:19] *** Joins: fling (~fling@user/fling)
[03:10:12] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[03:10:39] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[03:14:32] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[03:25:24] *** Quits: rgrinberg (~textual@177.248.144.104) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:33:48] *** Joins: pizdets (~pizdets@183.182.115.192)
[03:34:23] *** Quits: pizdets_ (~pizdets@183.182.110.13) (Ping timeout: 265 seconds)
[03:36:35] <buu> kjetilho: I mean, it's not like perl really defines things
[03:39:47] <kjetilho> heh
[03:40:21] *** Joins: mattil (~mattil@87-92-20-81.bb.dnainternet.fi)
[03:45:10] *** Quits: mattil (~mattil@87-92-20-81.bb.dnainternet.fi) (Ping timeout: 272 seconds)
[03:46:10] <simcop2387> cjac: if i wasn't going to split, i'd probably use named captures instead
[03:46:54] *** Quits: Pali (~pali@user/pali) (Ping timeout: 252 seconds)
[03:48:24] <simcop2387> but actually split is probably the nicer way.  @hash{qw/type type_version what vendor system_name perl_version other_1 other_2 other_3 .../} = split/:/,$string;
[03:51:42] <aquanight> yeah that looks like a job for split if ever the was one
[03:55:12] <simcop2387> split and slices is very nice
[03:55:51] *** Quits: llh (~UPP@user/llh) (Quit: :::: ( UPP ) ::::)
[03:58:10] <dwalker> cjac: I am using this regex for CPE 2.3 $cpe =~ /^cpe:2\.3:[aho\*\-](:(((\?*|\*?)([a-zA-Z0-9\-\._]|(\\[\\\*\?!"#$$%&'\(\)\+,\/:;<=>@\[\]\^`\{\|}~]))+(\?*|\*?))|[\*\-])){5}(:(([a-zA-Z]{2,3}(-([a-zA-Z]{2}|[0-9]{3}))?)|[\*\-]))(:(((\?*|\*?)([a-zA-Z0-9\-\._]|(\\[\\\*\?!"#$$%&'\(\)\+,\/:;<=>@\[\]\^`\{\|}~]))+(\?*|\*?))|[\*\-])){4}$/s;
[03:58:52] <dwalker> cjac: This uses NVD's regex (modified for Perl) to validate the CPE2.3 string See: https://csrc.nist.gov/schema/cpe/2.3/cpe-naming_2.3.xsd and https://stackoverflow.com/questions/37298968/regex-to-match-cpe-2-3/49588527
[03:58:53] <Paperbot> Link title(s): [ Regex to match CPE 2.3 - Stack Overflow ]
[03:59:08] <simcop2387> dwalker: you're summoning elder gods
[03:59:43] <dwalker> the CPE 2.3 schema is pretty gnarly
[04:02:40] <simcop2387> i still think i'd do split, and then validate each field separately. @system{qw/cpe cpe_version part vendor product version update edition language sw_edition target_sw target_hw other} = split /:/, $cpe_string, 13; 
[04:03:38] <simcop2387> dwalker: why are you allowing - and * for the part field? a quick reading seems to say it's only allowed to be [aho]?
[04:04:16] <dwalker> I agree, if split works then use it.  the horrid regex above is mainly to validate valid cpes.  I didnt write it, I took it from NVDs site and converted it to pcre
[04:04:51] <simcop2387> yea i'm assuming there's some stupid slightly non-standard things that that is meaning to validate also
[04:05:22] <dwalker> NVD
[04:05:25] <dwalker> NVD
[04:05:40] <dwalker> opps, NVD's regex is <xsd:pattern value="cpe:2\.3:[aho\*\-](:(((\?*|\*?)([a-zA-Z0-9\-\._]|(\\[\\\*\?!"#$$%&'\(\)\+,/:;<=>@\[\]\^`\{\|}~]))+(\?*|\*?))|[\*\-])){5}(:(([a-zA-Z]{2,3}(-([a-zA-Z]{2}|[0-9]{3}))?)|[\*\-]))(:(((\?*|\*?)([a-zA-Z0-9\-\._]|(\\[\\\*\?!"#$$%&'\(\)\+,/:;<=>@\[\]\^`\{\|}~]))+(\?*|\*?))|[\*\-])){4}"/>
[04:05:54] <simcop2387> ugh xslt
[04:06:16] <dwalker> CPE 2.2 was so much easier
[04:06:34] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:11:11] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:18:45] *** Quits: ovid (~ovid@pop.92-184-112-154.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[04:20:18] *** Joins: ovid (~ovid@pop.92-184-112-154.mobile.abo.orange.fr)
[04:20:19] <ology> my eyes - they bleed
[04:24:50] <dwalker> I should make a NVD::CPE::Validate module to hide that detail so no one else has to suffer.  Would that be a useful project for my first CPAN release?
[04:32:48] * v` pops in for a sec
[04:33:00] <cjac> better than if you had more Os!
[04:33:08] <v`> dwalker: \w ?
[04:33:11] <xenu> a more general NVD::CPE would've been even better
[04:33:24] <xenu> or NVD::CPE::Parser
[04:33:55] <dwalker> xenu: true
[04:36:05] <dwalker> v`: what do you mean?
[04:37:22] <v`> i was just wandering in in between eating dinner and saw the regex
[04:37:49] <v`> \w being [A-Za-z0-9_]
[04:40:00] <v`> but mostly <ology> my eyes - they bleed
[04:40:18] <dwalker> v` oh yes, but this was NVD's regex, I managed to get it working in perl from the NVD example and didn't feel up to trying to optimise it.  I jest needed a TRUE/FALSE result for a CPE string
[04:40:37] <v`> yep, was just kinda saying the first thing that came to mind i guess
[04:41:14] <xenu> that is true only if unicode isn't involved
[04:41:39] <dwalker> I don't really like making regex, I surprised when they work most of the time
[04:41:39] <xenu> i wonder if the original regex was supposed to allow non-ascii chars
[04:41:58] <xenu> in perl A-Z is always ascii, but in other regex implementations it varies
[04:42:59] <simcop2387> xenu: yea xslt doesn't have a proper \w iirc.
[04:43:21] <simcop2387> or a sane way to do non-case-sensitive stuff either
[04:43:28] <xenu> btw the fact that glibc and possibly other places use unicode in ranges of that kind is idiotic
[04:43:37] <xenu> it's literally never what the user wanted
[04:43:57] <xenu> it will match something like "ś" but not "ż" because it sorts after "z"
[04:44:20] <simcop2387> that's why i like perl's \w and such
[04:46:36] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 272 seconds)
[04:48:39] *** morpheus is now known as roblox
[04:50:58] <dwalker> I just checked the latest NVD CPE23 dictionary, and NONE of them have Unicode in the CPE name string, that's a relief.
[04:52:11] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[04:55:14] <simcop2387> ah yes, the two issues are, xslt doesn't support character classes in regex, nor does it support negative character stuff, so no [^:]+, no \w, no [[:wordchars:]] or anything like that.  for pcre that regex pattern can almost certaunly just be rewritten to use [^:]+ for each field
[04:55:28] <simcop2387> at least for a huge huge fraction of it
[04:56:03] <simcop2387> although looking at the spec again, split and [^:] will fail too
[04:56:17] <simcop2387> it looks like you're allowed to use \: to escape a : in a field
[04:57:38] <simcop2387> so the anemic regexp plus escaping is why it's like that
[05:01:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[05:02:47] <v`> i get myself into trouble because i can't resist golfing and sneaking in some \Q...\E and recursive (?1) and captured (\1) backrefs
[05:03:29] *** Joins: fling (~fling@user/fling)
[05:05:40] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[05:10:08] <v`> <dwalker> I don't really like making regex, I surprised when they work most of the time
[05:10:57] <v`> the heart of that is that every pattern eventually works when it should fail if enough strings are thrown at it
[05:11:49] <v`> the pattern + the lines of code that implent the pattern, i mean
[05:11:56] <v`> implement, even
[05:12:08] <simcop2387> i think you could make split work by doing some tricks with zero-width assertsion
[05:13:41] *** Quits: ovid (~ovid@pop.92-184-112-154.mobile.abo.orange.fr) (Remote host closed the connection)
[05:15:24] <v`> when i started out with regex it took me a while to see that an empty pattern, "//" a pattern with nothing in it, matches EVERYTHING
[05:16:04] <simcop2387> eval: my $x; $x=~//?"matched":"no match"
[05:16:06] <perlbot> simcop2387: Use of uninitialized value $x in pattern match (m//) at (IRC) line 1. matched
[05:16:17] <simcop2387> i might argue that undef shouldn't match that
[05:16:56] <v`> oh, sorry, i guess i meant in the abstract
[05:17:39] <simcop2387> i figured as much but i decided to not be
[05:21:45] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Read error: Connection reset by peer)
[05:21:45] *** Quits: perldoc (~perldoc@24.88.46.213) (Read error: Connection reset by peer)
[05:21:45] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Read error: Connection reset by peer)
[05:21:45] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Write error: Connection reset by peer)
[05:21:46] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Read error: Connection reset by peer)
[05:22:09] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[05:22:40] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[05:22:40] *** ChanServ sets mode: +v perlbot
[05:23:10] *** Joins: perldoc (~perldoc@2603-6081-6402-7801-ccfb-fc51-df28-5e01.res6.spectrum.com)
[05:23:41] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[05:24:11] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[05:30:34] *** Joins: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net)
[05:37:06] <aquanight> sweval: my $x; [ exists $x ]
[05:37:08] <perlbot> aquanight: ERROR: exists argument is not a HASH or ARRAY element or a subroutine at (IRC) line 1. 
[05:37:15] <aquanight> hm.
[05:49:01] *** eldritch_ is now known as eldritch
[06:02:57] *** Joins: rampart (~rampart@2607:fb90:a239:6f9e:bc2f:d06d:9220:b7c)
[06:03:52] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[06:04:41] *** Joins: csrf (~csrf@user/csrf)
[06:05:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[06:07:23] *** Joins: fling (~fling@user/fling)
[06:09:23] *** Joins: rgrinberg (~textual@177.248.144.104)
[06:20:39] *** Quits: rgrinberg (~textual@177.248.144.104) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:23:15] *** Joins: fstd (~fstd@xdsl-89-0-80-77.nc.de)
[06:26:17] *** Quits: fstd_ (~fstd@xdsl-78-35-89-30.nc.de) (Ping timeout: 240 seconds)
[06:32:35] *** Joins: gast0n (~g4570n@user/gast0n)
[06:34:43] *** Quits: gast0n (~g4570n@user/gast0n) (Client Quit)
[06:35:26] *** Joins: gast0n (~g4570n@user/gast0n)
[06:35:52] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[06:36:08] *** Quits: whynot (~whynot@46.96.183.23) (Quit: leaving)
[07:07:06] <cjac> dwalker: do you do the ::Validate modules generally?
[07:07:44] <cjac> dwalker: oh, uhm... if you want to package it up with NIST::NVD, I'd be happy to host you with the rest of the stuff.
[07:07:54] <cjac> dwalker: github username?
[07:09:35] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[07:10:56] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:10:56] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:10:56] *** finn_elija is now known as FinnElija
[07:11:23] *** Joins: fling (~fling@user/fling)
[07:15:55] <dwalker> cjac: dwwalker
[07:16:24] <rindolf> hi all
[07:16:43] <dwalker> cjac: could be useful, lets take this offline and discuss further, I have some other NVD code also
[07:19:58] *** Quits: rampart (~rampart@2607:fb90:a239:6f9e:bc2f:d06d:9220:b7c) (Remote host closed the connection)
[07:21:27] <cjac> sounds good, dwalker.  I've sent an invitation to collaborate.  This project has been authorized by the Mitre Corporation, in case you want to do that for your other projects, too. &
[07:21:51] <dwalker> cjac: accepted, thanks
[07:22:08] <cjac> how are you doing, Mr. Fish?
[07:25:47] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Ping timeout: 260 seconds)
[07:28:54] <rindolf> cjac: preparing another singalong cover
[07:30:22] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.47)
[07:36:03] *** Joins: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net)
[07:58:42] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[07:59:38] *** Joins: monkey_ (~user@190.104.116.153)
[08:04:14] *** Joins: Woodzy (~quassel@198.204.246.228)
[08:12:11] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 268 seconds)
[08:13:24] *** Quits: Martchus_ (~martchus@2a01:c22:6f2f:6200:d250:99ff:fe49:3cce) (Ping timeout: 240 seconds)
[08:13:50] *** Joins: Martchus (~martchus@2a01:c22:7bdc:7e00:d250:99ff:fe49:3cce)
[08:13:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[08:15:15] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[08:15:36] *** Joins: fling (~fling@user/fling)
[08:16:28] *** Quits: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com) (Quit: leaving)
[08:20:06] <cjac> oh gosh.  how do you turn those into dollars, do you know?
[08:27:17] <rindolf> cjac: https://www.shlomifish.org/humour/fortunes/show.cgi?id=prioritizing-money
[08:27:18] <Paperbot> Link title(s): [ Prioritizing Money - Fortune ]
[08:29:43] <rindolf> cjac: i'm also trying to fix fc-solve's gh actions win32 build
[08:29:46] *** Quits: Woodzy (~quassel@198.204.246.228) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:30:06] *** Joins: Woodzy (~quassel@198.204.246.228)
[08:32:42] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.47) (Ping timeout: 272 seconds)
[08:39:53] <rindolf> cjac: hbu?
[08:42:14] *** Joins: ekathva (~ekathva@2001:999:230:5e27:e9e2:3092:814c:5841)
[08:42:49] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:44:18] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[08:45:59] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[08:57:24] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Read error: No route to host)
[08:59:55] *** Joins: hamburger (~hamburger@user/hamburger)
[09:05:45] *** Quits: perlmaros (~perlmaros@master.k-1.com) (*.net *.split)
[09:05:45] *** Quits: Bossi_ (~quassel@p5dc59ffc.dip0.t-ipconnect.de) (*.net *.split)
[09:05:45] *** Quits: sysdef_ (~sysdef@user/sysdef) (*.net *.split)
[09:05:48] *** Quits: epony (epony@user/epony) (*.net *.split)
[09:05:49] *** Quits: Russell (russell@bnc4free/staff/russell) (*.net *.split)
[09:05:49] *** Quits: nicomen (~nicolas@178.124.223.35.bc.googleusercontent.com) (*.net *.split)
[09:05:49] *** Quits: k33p3r (kexik@2605:6400:c847:1948::8491) (*.net *.split)
[09:05:49] *** Quits: mb (~mb@x14.nl) (*.net *.split)
[09:05:49] *** Quits: _quaddam1ge (~quaddamag@222.87.206.35.bc.googleusercontent.com) (*.net *.split)
[09:05:49] *** Quits: w41_ (~w41@45.76.32.7) (*.net *.split)
[09:05:49] *** Quits: rozie (~rozie@2001:15e8:110:2913:1:1:1:2) (*.net *.split)
[09:05:49] *** Quits: riceandbeans (~zach@user/riceandbeans) (*.net *.split)
[09:05:49] *** Quits: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org) (*.net *.split)
[09:05:50] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (*.net *.split)
[09:05:52] *** Joins: perlmaros (~perlmaros@master.k-1.com)
[09:05:56] *** Joins: rozie (~rozie@2001:15e8:110:2913:1:1:1:2)
[09:05:57] *** Joins: w41 (~w41@45.76.32.7)
[09:06:02] *** Joins: riceandbeans (~zach@dev07.raasta.org)
[09:06:03] *** Joins: mb (~mb@x14.nl)
[09:06:04] *** Joins: nicomen (~nicolas@178.124.223.35.bc.googleusercontent.com)
[09:06:04] *** Joins: sysdef (~sysdef@user/sysdef)
[09:06:07] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[09:06:08] *** Joins: Bossi (~quassel@p5dc59ffc.dip0.t-ipconnect.de)
[09:06:09] *** Joins: Russell (russell@bnc4free/staff/russell)
[09:06:10] *** Quits: riceandbeans (~zach@dev07.raasta.org) (Changing host)
[09:06:10] *** Joins: riceandbeans (~zach@user/riceandbeans)
[09:06:14] *** Joins: _quaddamage (~quaddamag@222.87.206.35.bc.googleusercontent.com)
[09:06:20] *** Joins: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org)
[09:08:27] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 260 seconds)
[09:09:03] *** Joins: k33p3r (kexik@2605:6400:c847:1948::8491)
[09:09:51] *** Joins: Guest6037 (epony@lz2.eu)
[09:11:46] * GumbyPAN CPAN Upload: Mojo-Server-DaemonControl-0.03 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/Mojo-Server-DaemonControl-0.03
[09:12:33] <cjac> rindolf: NIST::NVD::Store::SQLite3's t/insert.t needs to be updated to use the new JSON data set I have for testing
[09:15:27] *** Quits: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net) (Ping timeout: 260 seconds)
[09:17:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[09:19:36] *** Joins: fling (~fling@user/fling)
[09:19:39] <rindolf> cjac: goodluck-i can try helping
[09:19:48] <rindolf> https://www.youtube.com/watch?v=qImhVeEXfIU
[09:19:48] <Paperbot> YouTube video linked by rindolf: Shlomi Fish singalong cover of First to 11's "you shook me all night long" - published by Shlomi Fish
[09:20:57] *** Joins: hamburger (~hamburger@user/hamburger)
[09:23:03] <cjac> rindolf: if you want to help with something, I would prefer to have help with github.com/cjac/google-auth-library-perl ; can you share your github userid?
[09:24:55] <rindolf> cjac: https://github.com/shlomif/
[09:24:57] <Paperbot> Link title(s): [ shlomif (Shlomi Fish) · GitHub ]
[09:27:05] *** Joins: polishdub (~polishdub@ip72-208-203-185.ph.ph.cox.net)
[09:27:17] <cjac> thanks for the offer!  Looking forward to any kind of review you might offer :-)
[09:27:34] <cjac> I'm going to call it a night.  see y'all soon!
[09:34:08] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 272 seconds)
[09:39:00] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.47)
[09:40:08] *** Quits: randir_ (~randir@95-31-138-202.broadband.corbina.ru) (Remote host closed the connection)
[09:40:33] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:42:27] *** Joins: EvanCarroll (~ecarroll@68-78-105-35.lightspeed.hstntx.sbcglobal.net)
[09:51:10] *** Joins: jplesnik (~jplesnik@83.240.62.151)
[09:54:45] <dwalker> cjac: goodnight
[09:56:49] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[10:09:13] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:14:12] *** Joins: hamburger (~hamburger@user/hamburger)
[10:15:08] <rindolf> EvanCarroll:  https://www.youtube.com/watch?v=qImhVeEXfIU
[10:15:08] <Paperbot> YouTube video linked by rindolf: Shlomi Fish singalong cover of First to 11's "you shook me all night long" - published by Shlomi Fish
[10:16:44] *** Quits: polishdub (~polishdub@ip72-208-203-185.ph.ph.cox.net) (Quit: leaving)
[10:18:04] <rindolf> dwalker: hi,sup?
[10:19:32] <dwalker> rindolf: yo. I spent all weekend tweaking my NVD scraping tool.  Got it working nicely with dzil.  I'm wondering if its worthy of posting to CPAN once I add some better tests.
[10:21:05] <dwalker> also, I know its wrong and bad to scrape HTML pages, and I will investigate integration with cjac's package which works on the downloaded data instead of scraping each time
[10:21:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[10:23:42] *** Joins: fling (~fling@user/fling)
[10:27:10] <rindolf> dwalker: https://www.shlomifish.org/humour/fortunes/show.cgi?id=shlomif-about-how-to-achieve-world-domination
[10:27:11] <Paperbot> Link title(s): [ How to Achieve World Domination? - Fortune ]
[10:29:27] *** Quits: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net) (Quit: because)
[10:30:06] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[10:32:04] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[10:34:28] <rindolf> dwalker: nice tho
[10:34:32] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[10:35:26] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[10:43:23] * dwalker reads rindolf's link
[10:49:45] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:49:49] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[10:50:26] *** Joins: KnoP (~KnoP@p4ff566f8.dip0.t-ipconnect.de)
[10:53:15] *** Joins: hamburger_ (~hamburger@user/hamburger)
[10:56:12] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 240 seconds)
[11:04:36] *** hamburger_ is now known as hamburger
[11:04:44] <rindolf> dwalker: thanks
[11:05:07] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 260 seconds)
[11:12:32] <dwalker> what am I doing wrong in my dist.ini? when I dzil build, all of the author tests are going into t/ and getting run by a normal end user.  I thought they should go in xt/ automatically?
[11:13:31] <dwalker> eg when I add "[Test::Perl::Critic]" is that not an automatic author test? or do I need to define that somewhere?
[11:14:36] <rindolf> dwalker: https://blog.codinghorror.com/learn-to-read-the-source-luke/
[11:14:36] <Paperbot> Link title(s): [ Learn to Read the Source, Luke ]
[11:15:23] <dwalker> rindolf: I did and I'm still confused.  I will keep reading...
[11:21:08] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[11:25:22] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Ping timeout: 246 seconds)
[11:25:35] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[11:27:46] *** Joins: fling (~fling@user/fling)
[11:29:13] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[11:32:13] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 240 seconds)
[11:32:41] *** Joins: randir (~randir@93.159.239.42)
[11:35:25] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[11:36:17] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[11:38:09] *** Joins: re101-zonkey-23 (~re101-zon@219.143.231.125)
[11:39:09] *** Parts: re101-zonkey-23 (~re101-zon@219.143.231.125) ()
[11:44:34] *** Joins: hamburger_ (~hamburger@user/hamburger)
[11:47:35] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[11:49:46] *** Quits: epsilonknot (~aisha@2001:470:69fc:105::13a) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: hussam (~hussam@user/hussam) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: ilmari_ (~ilmari@user/ilmari) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: roy[m]1 (~roybitnex@2001:470:69fc:105::93b) (Quit: Bridge terminating on SIGTERM)
[11:49:52] *** Quits: ehuelsmann[m] (~ehuelsman@2001:470:69fc:105::169a) (Quit: Bridge terminating on SIGTERM)
[11:49:52] *** Quits: graham (~gchristen@user/gchristensen) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: roders[m] (~rodersmat@2001:470:69fc:105::1:62f0) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: MitarashiDango[m (~mdangomat@2001:470:69fc:105::1:cb5e) (Quit: Bridge terminating on SIGTERM)
[11:49:59] *** Quits: Nataraj[m] (~dhyannata@2001:470:69fc:105::1:88f9) (Quit: Bridge terminating on SIGTERM)
[11:51:02] *** Quits: alex11 (~alex11@user/alex11) (Remote host closed the connection)
[11:51:28] *** Joins: alex11 (~alex11@user/alex11)
[11:53:03] *** Quits: hamburger_ (~hamburger@user/hamburger) (Read error: Connection reset by peer)
[11:54:27] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 256 seconds)
[11:55:20] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[11:55:21] *** Joins: ehuelsmann[m] (~ehuelsman@2001:470:69fc:105::169a)
[11:57:09] *** Joins: Pali (~pali@user/pali)
[12:10:27] *** Joins: Nataraj[m] (~dhyannata@2001:470:69fc:105::1:88f9)
[12:10:27] *** Joins: graham (~gchristen@user/gchristensen)
[12:10:27] *** Joins: roders[m] (~rodersmat@2001:470:69fc:105::1:62f0)
[12:10:27] *** Joins: hussam (~hussam@user/hussam)
[12:10:27] *** Joins: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831)
[12:10:27] *** Joins: ilmari_ (~ilmari@user/ilmari)
[12:10:27] *** Joins: MitarashiDango[m (~mdangomat@2001:470:69fc:105::1:cb5e)
[12:10:27] *** Joins: aisha[m] (~aisha@2001:470:69fc:105::13a)
[12:10:39] *** Joins: roy[m] (~roybitnex@2001:470:69fc:105::93b)
[12:15:46] *** Joins: mexen_wfh (uid495612@id-495612.ilkley.irccloud.com)
[12:15:46] *** mexen_wfh is now known as mexen
[12:30:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[12:31:54] *** Joins: fling (~fling@user/fling)
[12:32:09] * GumbyPAN CPAN Upload: MsOffice-Word-Template-1.02 by DAMI https://metacpan.org/release/DAMI/MsOffice-Word-Template-1.02
[12:32:38] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[12:36:07] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[12:45:31] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:47:25] *** Joins: haj1 (~haj@p200300eda707e00041227d2ecda25885.dip0.t-ipconnect.de)
[12:47:49] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:50:20] *** Joins: ccntrq (~Thunderbi@2a01:c22:89e6:e500:da63:dc92:f465:54d0)
[12:50:58] *** Joins: eroux (~eroux@102-65-72-61.ftth.web.africa)
[12:53:39] *** Joins: hamburger (~hamburger@user/hamburger)
[12:57:55] <EvanCarroll> rindolf: mad jam. I upvoted.
[12:58:35] *** Joins: jpn (~jpn@user/jpn)
[12:59:25] <rindolf> EvanCarroll: thanks. ♥
[12:59:27] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 260 seconds)
[12:59:41] *** Joins: art1 (~romeyke@p200300ccdf0462004176576d046ffee8.dip0.t-ipconnect.de)
[12:59:53] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[13:07:39] *** Joins: hamburger_ (~hamburger@user/hamburger)
[13:07:52] *** Parts: hethw (~heth@46.238.32.56) (Leaving)
[13:08:27] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 252 seconds)
[13:11:33] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[13:14:27] *** Quits: hamburger_ (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[13:16:12] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:d038:2ac1:e0ca:3ad2) (Ping timeout: 240 seconds)
[13:16:50] *** Joins: hamburger (~hamburger@user/hamburger)
[13:26:39] *** Quits: sokan (~sokan@2a02:587:9e19:4700:227:eff:fe16:865d) (Quit: Reality.is.a.lie)
[13:29:17] *** Joins: ovid (~ovid@pop.92-184-100-18.mobile.abo.orange.fr)
[13:31:39] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[13:32:10] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[13:33:18] *** Joins: hamburger_ (~hamburger@user/hamburger)
[13:33:44] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 252 seconds)
[13:37:17] * GumbyPAN CPAN Upload: Net-DNS-Resolver-Unbound-1.11 by RWF https://metacpan.org/release/RWF/Net-DNS-Resolver-Unbound-1.11
[13:41:10] *** Joins: Guest45224 (~Guest4522@193.110.182.11)
[13:41:17] * GumbyPAN CPAN Upload: Test-Smoke-1.78_01 by ABELTJE https://metacpan.org/release/ABELTJE/Test-Smoke-1.78_01
[13:45:56] <Guest45224> Hi! I'd need some help understanding how to use flags of modules. In my case, my program contains "print JSON::XS::encode_json $DATATREE;" and I would like to use the "canonical" feature of the module, as documented. It should be used as "$json = $json->canonical ([$enable])" or "$enabled = $json->get_canonical". Can I easily switch this on with my
[13:45:56] <Guest45224> simple statement from before or do I have to do a multistep object creation with slightly less performance?
[13:47:49] <Botje> if you look at the documentation you will see that encode_json already does the object creation internally
[13:48:56] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[13:49:17] <Botje> Guest45224: ^
[13:49:39] <Botje> Guest45224: if you are really worried about performance, construct and configure the JSON::XS object once and then use that everywhere.
[13:50:43] <Botje> can easily do that with sub encode_json { state $json = JSON::XS->new->utf8->canonical; return $json->encode(shift); }
[13:50:58] <Guest45224> Botje I only need the object once. However, the script itself is executed very often with different parameters each time. Regarding your hint: You want to tell me, that there should no additional performance penalty as an object is created in any case? What does the "Except being faster" statements in the docs mean?
[13:51:14] *** Quits: castawayc (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net) (Remote host closed the connection)
[13:51:36] <Botje> oh
[13:51:47] *** Joins: castawayc (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net)
[13:51:58] <Botje> compared to interpreter startup time, creating the JSON::XS object in the multi-step process is irrelevant.
[13:52:02] <Botje> don't worry about it.
[13:52:59] <Botje> Without looking at the implementation, I can imagine that encode_json calls an internal function with the right flags directly, whereas the object route creates the configuration as a perl value first and then disassembles it to get arguments to the internal encode function
[13:53:16] <Guest45224> Botje Thank you, you are right I'd think. In my scenario there is not a lot to gain. What would be the prettiest/clearest way to create my output? Three lines with (1) object creation, (2) setting the canonical option and (3) finally requesting the converted output?
[13:54:09] <Botje> I would do it in two lines, roughly like I did above.
[13:54:17] <Guest45224> Botje Thanks!
[13:55:24] *** Quits: Furai (~Furai@furai.pl) (Remote host closed the connection)
[13:55:52] *** Joins: Furai (~Furai@furai.pl)
[13:57:26] *** hamburger_ is now known as hamburger
[14:00:13] <Guest45224> Hmmm ... it does not do what I expect; hashes are still not sorted by keys on output :(
[14:03:42] <rindolf> Botje++
[14:03:52] <Botje> Guest45224: err, show code?
[14:04:21] <Guest45224> "my $json = JSON::XS->new->utf8->canonical; print $json->encode($DATATREE);"
[14:04:24] <rindolf> Guest45224: https://github.com/shlomif/how-to-share-code-online
[14:04:25] <Paperbot> Link title(s): [ GitHub - shlomif/how-to-share-code-online: How to share source code on online forums in order to ... ]
[14:04:47] <Botje> "This setting has currently no effect on tied hashes."
[14:05:00] <Botje> what is in $DATATREE?
[14:05:55] <hamburger> ah just frog
[14:06:12] <hamburger> like you understand perl -wnl -e "bla bla anyway " 
[14:06:13] <Guest45224> A hash reference. In that hash there are references to arrays and hashes, and if there's array, there are hashes in there again.
[14:06:20] <hamburger> super dellusion fuck one lah
[14:06:22] <hamburger> is him
[14:06:25] <hamburger> chong hon fah
[14:06:30] *** Parts: hamburger (~hamburger@user/hamburger) (Leaving)
[14:06:39] <Guest45224> Oh ... what is "tied"?
[14:07:02] <Botje> manipulated with the "tie" keyword.
[14:07:08] <Botje> either by you or some module you used.
[14:08:02] <Guest45224> I am pretty sure this is not used for the creation of this $DATATREE.
[14:08:13] <Guest45224> So this should not be a "tied" hash.
[14:08:27] <Botje> fair enough.
[14:08:47] <kjetilho> Guest45224: e.g., you can "tie" a berkeley-db file to a hash so you manipulate the database file as if it was a normal hash
[14:09:27] <Botje> how did you determine the sorting is not happening?
[14:11:17] <Botje> did it sort foo10 before foo1? because that is a valid sorting, albeit not the one you expect as a human
[14:11:20] * GumbyPAN CPAN Upload: Google-ProtocolBuffers-Dynamic-0.35 by MBARBON https://metacpan.org/release/MBARBON/Google-ProtocolBuffers-Dynamic-0.35
[14:11:32] <Guest45224> As you saw in my code snippet, I just print out the outcome, and I then do "json_pp" to prettyprint. Every time I do this, things are sorted differently.
[14:11:53] <Guest45224> I don't mind the actual order, I just expect it to be the same each time.
[14:12:12] <Botje> did you also tell json_pp to canonicalize output?
[14:12:16] <Guest45224> no.
[14:12:23] <Botje> well, there's your problem
[14:12:29] <Botje> json_pp -json_opt pretty,canonical
[14:13:26] *** Joins: xcombelle3 (~xavie@176-139-252-198.abo.bbox.fr)
[14:13:29] *** Joins: xcombelle1 (~xcombelle@176-139-252-198.abo.bbox.fr)
[14:15:14] <Guest45224> Oh fine, you are right. I was never expecting that tool to do any kind of sorting, I just thought it would reformat the data coming in ...
[14:15:28] <Guest45224> It turns out things work as expected then. Thank you for your great help!
[14:23:04] <Botje> np
[14:30:56] *** Quits: Guest6037 (epony@lz2.eu) (Quit: QUIT)
[14:39:21] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Quit: ZNC 1.8.2+cygwin4 - https://znc.in)
[14:40:43] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.47) (Ping timeout: 260 seconds)
[14:41:42] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[14:45:04] *** Joins: epony (epony@user/epony)
[14:49:15] *** Quits: epony (epony@user/epony) (Max SendQ exceeded)
[14:50:31] *** Joins: epony (epony@user/epony)
[14:54:46] <xcombelle3> rindolf: hi
[14:55:55] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[14:56:09] <rindolf> xcombelle3: hey, sup
[15:06:02] *** Quits: ovid (~ovid@pop.92-184-100-18.mobile.abo.orange.fr) (Remote host closed the connection)
[15:12:15] *** Quits: Guest45224 (~Guest4522@193.110.182.11) (Quit: Client closed)
[15:30:01] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 246 seconds)
[15:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:31:06] *** Joins: csrf (~csrf@user/csrf)
[15:33:42] *** Quits: fling (~fling@user/fling) (Remote host closed the connection)
[15:34:04] *** Joins: fling (~fling@user/fling)
[15:34:53] <dimbag> rindolf: Hi
[15:35:02] *** Quits: ilmari_ (~ilmari@user/ilmari) (Quit: User was banned)
[15:35:02] *** Quits: aisha[m] (~aisha@2001:470:69fc:105::13a) (Quit: User was banned)
[15:35:07] *** Quits: graham (~gchristen@user/gchristensen) (Quit: User was banned)
[15:35:11] *** Quits: hussam (~hussam@user/hussam) (Quit: User was banned)
[15:35:11] *** Quits: ehuelsmann[m] (~ehuelsman@2001:470:69fc:105::169a) (Quit: User was banned)
[15:35:20] *** Quits: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831) (Quit: User was banned)
[15:35:25] *** Quits: Nataraj[m] (~dhyannata@2001:470:69fc:105::1:88f9) (Quit: User was banned)
[15:35:37] *** Quits: roders[m] (~rodersmat@2001:470:69fc:105::1:62f0) (Quit: User was banned)
[15:35:58] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[15:37:04] *** Quits: MitarashiDango[m (~mdangomat@2001:470:69fc:105::1:cb5e) (Quit: User was banned)
[15:37:45] *** Quits: roy[m] (~roybitnex@2001:470:69fc:105::93b) (Quit: User was banned)
[15:38:58] <rindolf> dimbag: sup?
[15:48:01] <dimbag> rindolf: try to make something useful with mojolicious, plus listen to https://www.youtube.com/watch?v=lJxo4_Eza2I
[15:48:02] <Paperbot> YouTube video linked by dimbag: Sting and Cheb  Mami-Live-Desert Rose - published by Zadkiel602
[15:49:08] *** Joins: epony (epony@user/epony)
[15:49:32] *** Joins: ovid (~ovid@pop.92-184-100-18.mobile.abo.orange.fr)
[15:52:11] <rindolf> dimbag: ah
[15:55:05] *** Quits: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz) (Remote host closed the connection)
[15:55:52] *** Joins: gareppa (~gareppa@user/gareppa)
[15:56:41] *** Joins: jpn (~jpn@user/jpn)
[15:58:01] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[15:59:06] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[16:01:17] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 260 seconds)
[16:06:15] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:950:287b:c4be:ac00)
[16:06:34] * GumbyPAN welcomes KANONIKUS - Christian Mahlberg to CPAN!
[16:06:39] *** Quits: proller (~p@2a02:6b8:b081:b646::1:3c) (Ping timeout: 252 seconds)
[16:09:27] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:f9b9:c2d3:ad62:759d) (Ping timeout: 250 seconds)
[16:14:57] *** Joins: jpn (~jpn@user/jpn)
[16:17:37] *** Quits: discip (~discip@net-2-35-155-132.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[16:19:22] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 246 seconds)
[16:23:23] *** Joins: discip (~discip@net-2-35-155-132.cust.vodafonedsl.it)
[16:35:07] *** Joins: xcombelle2 (~xcombelle@176-139-252-198.abo.bbox.fr)
[16:37:50] *** Quits: fling (~fling@user/fling) (Remote host closed the connection)
[16:38:09] *** Joins: fling (~fling@user/fling)
[16:38:28] *** Quits: xcombelle1 (~xcombelle@176-139-252-198.abo.bbox.fr) (Ping timeout: 272 seconds)
[16:38:47] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[16:42:14] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[16:46:37] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[16:48:43] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[16:49:15] *** Joins: jpn (~jpn@user/jpn)
[16:54:06] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 245 seconds)
[17:02:47] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[17:05:15] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[17:07:27] *** Joins: jpn (~jpn@user/jpn)
[17:15:24] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 240 seconds)
[17:16:34] *** Quits: lopid (~lopid@user/lopid) (Quit: WeeChat 3.3)
[17:16:42] * GumbyPAN welcomes DAVIDI - David Ireland to CPAN!
[17:17:07] *** Quits: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[17:17:52] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:18:06] *** Joins: lopid (~lopid@user/lopid)
[17:20:32] *** Joins: ehuelsmann[m] (~ehuelsman@2001:470:69fc:105::169a)
[17:23:12] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Quit: Leaving.)
[17:25:58] *** Quits: eroux (~eroux@102-65-72-61.ftth.web.africa) (Ping timeout: 272 seconds)
[17:28:36] *** Joins: jpn (~jpn@user/jpn)
[17:32:17] *** Quits: mncheckm (~mncheck@193.224.205.254) (Ping timeout: 240 seconds)
[17:32:17] *** Quits: ovid (~ovid@pop.92-184-100-18.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[17:33:57] *** Quits: Woodzy (~quassel@198.204.246.228) (Ping timeout: 240 seconds)
[17:34:46] *** Joins: Woodzy (~quassel@198.204.246.228)
[17:35:32] *** Quits: KnoP (~KnoP@p4ff566f8.dip0.t-ipconnect.de) (Quit: ChatZilla 0.11 [SeaMonkey 2.53.11.1/20220321025623])
[17:37:16] *** Joins: Nataraj[m] (~dhyannata@2001:470:69fc:105::1:88f9)
[17:37:16] *** Joins: roders[m] (~rodersmat@2001:470:69fc:105::1:62f0)
[17:37:16] *** Joins: hussam (~hussam@user/hussam)
[17:37:17] *** Joins: graham (~gchristen@user/gchristensen)
[17:37:17] *** Joins: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831)
[17:37:17] *** Joins: aisha[m] (~aisha@2001:470:69fc:105::13a)
[17:37:17] *** Joins: ilmari_ (~ilmari@user/ilmari)
[17:37:17] *** Joins: MitarashiDango[m (~mdangomat@2001:470:69fc:105::1:cb5e)
[17:37:31] *** Joins: roy[m] (~roybitnex@2001:470:69fc:105::93b)
[17:37:51] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 245 seconds)
[17:38:56] *** Joins: hodbogi (~fatalnix@user/fatalnix)
[17:40:41] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 256 seconds)
[17:42:35] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[17:42:36] *** Joins: jpn (~jpn@user/jpn)
[17:43:23] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[17:43:31] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[17:43:48] *** Joins: ovid_ (~ovid@pop.92-184-100-18.mobile.abo.orange.fr)
[17:43:54] *** hodbogi is now known as FatalNIX
[17:44:13] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:44:22] *** Joins: fling (~fling@user/fling)
[17:44:51] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:46:57] *** Quits: japh (~scp1@user/japh) (Ping timeout: 250 seconds)
[17:47:10] *** Joins: randir_ (~randir@176.59.54.157)
[17:48:58] *** Joins: japh (~scp1@user/japh)
[17:49:06] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 245 seconds)
[17:50:03] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.47)
[17:50:11] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 260 seconds)
[17:50:37] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[17:50:58] *** Quits: randir (~randir@93.159.239.42) (Ping timeout: 260 seconds)
[17:51:18] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 272 seconds)
[17:52:09] *** Quits: ovid_ (~ovid@pop.92-184-100-18.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[17:52:10] *** Joins: ovid (~ovid@pop.92-184-100-18.mobile.abo.orange.fr)
[17:53:44] *** Joins: randir (~randir@93.159.239.42)
[17:54:13] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.47) (Ping timeout: 246 seconds)
[17:54:14] *** Joins: proller (~p@2a02:6b8:b081:6402::1:6)
[17:54:35] *** Quits: randir_ (~randir@176.59.54.157) (Read error: Connection reset by peer)
[17:56:44] *** Quits: ekathva (~ekathva@2001:999:230:5e27:e9e2:3092:814c:5841) (Ping timeout: 260 seconds)
[17:57:05] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[17:59:03] *** Joins: ekathva (~ekathva@2001:999:230:5e27:a0b1:eaf6:c841:8439)
[18:01:26] *** Quits: japh (~scp1@user/japh) (Ping timeout: 272 seconds)
[18:01:46] *** Joins: japh (~scp1@user/japh)
[18:02:48] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[18:03:39] *** Joins: jpn (~jpn@user/jpn)
[18:05:21] *** Quits: ccntrq (~Thunderbi@2a01:c22:89e6:e500:da63:dc92:f465:54d0) (Remote host closed the connection)
[18:08:05] *** Joins: mncheckm (~mncheck@193.224.205.254)
[18:08:16] *** Joins: mattil (~mattil@dy6nmv6mznspzkff9bv9t-4.rev.dnainternet.fi)
[18:11:48] * GumbyPAN CPAN Upload: Crypt-OpenSSL-Hash2Curve-0.02 by ABBYPAN https://metacpan.org/release/ABBYPAN/Crypt-OpenSSL-Hash2Curve-0.02
[18:12:14] *** Joins: bmeneg (~bmeneg@131.100.62.209)
[18:12:24] *** Quits: mattil (~mattil@dy6nmv6mznspzkff9bv9t-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:12:52] *** Joins: mattil (~mattil@dy6nmv6mznspzkff9bv9t-4.rev.dnainternet.fi)
[18:14:39] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[18:15:34] *** Quits: mattil (~mattil@dy6nmv6mznspzkff9bv9t-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:15:46] *** Joins: mattil (~mattil@dy6nmv6mznspzkff9bv9t-4.rev.dnainternet.fi)
[18:22:16] *** Quits: mattil (~mattil@dy6nmv6mznspzkff9bv9t-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:22:43] *** Joins: mattil (~mattil@dy6nmv6mznspzkff9bv9t-4.rev.dnainternet.fi)
[18:25:57] *** Quits: mattil (~mattil@dy6nmv6mznspzkff9bv9t-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:26:11] *** Joins: mattil (~mattil@dy6nmv6mznspzkff9bv9t-4.rev.dnainternet.fi)
[18:28:04] <aquanight> huh. TIL <<>> is a thing
[18:28:24] <LeoNerd> Ahyes, doublediamond
[18:28:40] <Botje> that something we nicked from PDF?
[18:28:54] <aquanight> it's <> but better
[18:29:02] <aquanight> because it's not a stupid two-arg open
[18:29:02] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 265 seconds)
[18:29:08] <LeoNerd> Botje: PDF?
[18:29:31] <aquanight> I found it when I was trying to remeber how perl decides whether <THING> is readline(THING) or glob(THING)
[18:29:40] *** Quits: mattil (~mattil@dy6nmv6mznspzkff9bv9t-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:29:43] <Altreus> Perl Data Format?
[18:30:06] *** Joins: mattil (~mattil@dy6nmv6mznspzkff9bv9t-4.rev.dnainternet.fi)
[18:30:09] <LeoNerd> Perl Done Fresh, aka Raku?
[18:30:58] <aquanight> and wow is it apparently weird
[18:31:07] <aquanight> <$x> is readline, <$x > is glob, apparently
[18:31:32] <LeoNerd> Mmmmm whitespace-sensitive? I'm shocked! Shocked I tell you
[18:31:37] <aquanight> at least if perldoc is believed
[18:31:39] <Botje> PDF uses << >> to construct dictionaries
[18:31:47] <aquanight> Botje: postscript oo
[18:31:49] <aquanight> too*
[18:33:19] <aquanight> though with postscript it's even weirder
[18:33:43] *** Quits: justOkay (~justache@user/justache) (Remote host closed the connection)
[18:33:53] <aquanight> it's just: /<< { mark } def />> { counttomark 2 div dup dict begin { def } repeat pop currentdict end } def
[18:34:14] *** Joins: aspic (~shifty~~~@1.145.111.192)
[18:34:16] * Botje squints
[18:34:35] <aquanight> that's straight from Adobe's PLRM
[18:34:35] *** Quits: mattil (~mattil@dy6nmv6mznspzkff9bv9t-4.rev.dnainternet.fi) (Ping timeout: 252 seconds)
[18:34:37] *** Joins: justOkay (~justache@user/justache)
[18:35:11] <aquanight> but you could define a dict with: [ /Duplex true /PageSize [612 792] >>
[18:35:19] <aquanight> because [ is also just 'mark'
[18:35:36] <aquanight> postscript is weird
[18:35:55] <Botje> "syntax recognizers all hate this one weird trick"
[18:37:28] <aquanight> LeoNerd: what's funny is that when you <> an object that uses an <> overload it doesn't matter if it's readline or glob (hell you could *spell out* readline or glob and it'll still go to the <> overload)
[18:38:02] <aquanight> I feel like <> for object iteration gets under-used
[18:38:07] <kjetilho> ehh.  is there an end-user documentation for Text::Balanced somewhere?
[18:38:12] <aquanight> everything is just "here's a big list of everything"
[18:38:28] <aquanight> and if you're lucky it's a lazy generator
[18:39:09] *** Quits: jplesnik (~jplesnik@83.240.62.151) (Quit: Leaving)
[18:41:53] <Botje> kjetilho: what is missing from the documentation for you?
[18:42:33] <kjetilho> Botje: I really don't know where to start.  Munin uses this and refers to the documentation for details.  but there is really nothing like what Munin does in the POD.
[18:42:51] <kjetilho> ${if:fofields OKs:${loop<,>:fofields  ${var:label} is ${var:value}${if:extinfo : ${var:extinfo}}}.}
[18:43:35] <Botje> that has nothing in common wth T::B
[18:43:48] <kjetilho> thank you for confirming my impression :-D
[18:45:49] <kjetilho> hehe.  # Homegrown templating engine. XXX - Not sure it's a very good idea
[18:46:35] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[18:47:09] <Botje> kjetilho: if I were to guess, I would say that that syntax uses "extract_quotelike" in a loop, applies the template, and joins the resulting stuff with the join character
[18:47:36] <kjetilho> yep, except it's extract_bracketed
[18:48:03] <kjetilho> and a nice recursive function
[18:48:11] *** Joins: fling (~fling@user/fling)
[18:48:40] <kjetilho> so it basically nothing to do with T::B.  it just uses it to handle the tricky bit of matching up {}
[18:49:06] <Botje> derp
[18:53:01] *** Joins: thrig (~thrig@207.108.197.156)
[18:59:55] *** Joins: tobybl_ (~tobybl@227.192.115.87.dyn.plus.net)
[19:00:25] *** Joins: mattil (~mattil@helsinki.portalify.com)
[19:01:31] *** Joins: scubanarc (~scubanarc@068-186-074-034.res.spectrum.com)
[19:02:43] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Ping timeout: 260 seconds)
[19:05:12] <cjac> hurpty
[19:13:33] <thrig> make great falls great again?
[19:13:45] <Altreus> Can we just get rid of for loops
[19:13:59] <thrig> sure, write it in ASM
[19:14:05] <Altreus> And instead have some nice syntax for generator functions
[19:14:25] <buZz> -funroll-loops? :)
[19:14:27] <Altreus> Not really sure, on reflection, why we need for loops
[19:14:33] <Altreus> funroll!
[19:14:41] <Altreus> some kind of sushi?
[19:15:19] <Altreus> I mean I was thinking why not some syntax like, say, while (@array --> my $item)
[19:15:21] <thrig> (LOOP UNLESS TUESDAY DOING ...
[19:15:30] <Altreus> what's the actual benefit of for loops? I suppose there must be one
[19:15:44] <thrig> "why not..." and thus raku
[19:16:08] <thrig> they are less scary to the shell or C programmer, for one
[19:16:11] <Altreus> yeah but raku seems like a playground of why-not, and sometimes the answer is "no reason"
[19:16:16] <kjetilho> why do we need while, when for(;;) can do it all?
[19:16:33] <Altreus> well sure, those are different ways of spelling the same thing
[19:16:46] <Altreus> You could iterate a generator with either, but my question is why do we need any other form of iteration?
[19:16:55] * GumbyPAN CPAN Upload: JavaScript-QuickJS-0.01_02 by FELIPE https://metacpan.org/release/FELIPE/JavaScript-QuickJS-0.01_02
[19:16:59] <kjetilho> recursion is all we need
[19:17:10] <Altreus> Seems like they all genericise to while my $thing = $generator->next
[19:17:12] <aquanight> from my $item in @array grep { defined $item && $item =~ m/\w+/ } select { uc $item }
[19:17:32] <aquanight> oops my C# is slipping out
[19:17:46] <Altreus> gotta look sharp to C#
[19:18:05] <thrig> it's just D flat
[19:18:12] <aquanight> though... I actually *am* seriously considering trying to figure out how to make that (LINQ query expresisons) real in perl
[19:18:48] <aquanight> the keyword interface seems great to do shenantics like this
[19:20:23] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.47)
[19:21:25] <aquanight> my biggest worry is just how many variables I would have to capture to be able to properly do deferred streaming queries without completely destroying the apparent scoping
[19:21:51] *** Joins: Darkcoal (~user@user/Darkcoal)
[19:21:59] <thrig> pretty sure HOP has a chapter on that
[19:22:24] <aquanight> @_ and lexicals are only the start
[19:23:44] <Altreus> aquanight: that's just gather/take with fewer braces, surely
[19:23:55] <aquanight> Altreus: maybe.
[19:24:33] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:24:34] <Altreus> gather { for my $item (@array) { take uc $item if defined $item && $item =~ m/\w+/ } }
[19:24:44] <aquanight> if gather/take exists in a usable form somewhere I'd grant that it's probably superior to C#-style linq queries
[19:24:52] <Altreus> yes it's List::Gather :)
[19:25:04] <aquanight> Altreus: but can it run as a deferred/streaming operation?
[19:25:09] *** Joins: Tempesta (~Tempesta@user/tempesta)
[19:25:14] <leont> No, it's not deferred/streaming
[19:25:16] <aquanight> we don't have enough of those in perl
[19:25:26] <leont> And that's exactly why it's silly IMO
[19:25:43] <aquanight> leont: ??
[19:25:57] <Altreus> I'm sure it could be written async fairly easily
[19:26:05] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[19:26:14] <Altreus> although that sounds like react/whenever/supply/emit
[19:26:21] <Altreus> which would be great if we could stop yak shaving the word supply
[19:26:51] *** Quits: subie (~subie@c-68-35-254-134.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[19:26:56] <Altreus> besides, when is @array ever going to be a streaming list?
[19:27:17] *** Quits: ovid (~ovid@pop.92-184-100-18.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[19:27:23] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[19:27:28] <aquanight> Altreus: for arrays, sure
[19:27:35] <aquanight> for other types of collections it might start to get important
[19:27:55] <thrig> while (@array) { pop ... push ... }
[19:28:13] <aquanight> <$file>, $sql_record_set, $text =~ m/stuff/g
[19:28:33] <Altreus> Sure, but now it sounds like we're talking about sugar for async stuff
[19:28:46] <aquanight> the last one especially because I'm annoyed there's not a convenient way to iterate and also extract captures that doesn't require fugly @{^CAPTURE}
[19:28:52] <ilmari> I like how rust's `for` is built around its `(Into)Iterator` trait. you can `for` anything that implements it
[19:29:14] <Altreus> plus, those are all things that we traditionally put a while around
[19:29:24] <Altreus> Which comes back to my original question: what's for for
[19:29:37] <aquanight> for is pretty much for arrays
[19:29:39] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Read error: Connection reset by peer)
[19:29:42] <Altreus> doesn't everything devolve into a generator pattern, which can then be dealt with either sync or async?
[19:29:46] <aquanight> because the alternative is while (each @array)
[19:29:52] <aquanight> and everyone hates 'each' for some reason
[19:30:12] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[19:30:13] <thrig> possibly due to the hidden state
[19:30:25] <Altreus> right, but I was suggesting that, in principle, some syntax that just creates generators from lists makes for loops obsolete
[19:30:26] <ilmari> `for foo in bar { … }` is more or less equivalent to `let mut iter = bar.into_iter(); while Some(foo) = bar.next() { … }`
[19:30:35] *** Joins: subie (~subie@c-68-35-254-134.hsd1.fl.comcast.net)
[19:30:38] <ilmari> s/bar.next/iter.next/
[19:30:44] <ilmari> s/while/while let/
[19:31:06] <Altreus> heck you could probably write a module to prove it: while (my $item = generator_from(@array))
[19:31:09] <aquanight> Altreus: we have a 'generator' for arrays. It's 'each'
[19:31:17] <aquanight> like
[19:31:20] <Altreus> that's not a generator because it mutates the array, not itself
[19:31:22] <aquanight> it is *literally* what each is
[19:31:34] <Altreus> oh right, that's the missing part
[19:31:48] <Altreus> you have to use the same generator in each loop
[19:31:52] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Remote host closed the connection)
[19:31:56] <Altreus> eh you could probably do it
[19:32:09] <Altreus> But no, each does not do that
[19:32:24] <Altreus> each gives the array some state of being iterated
[19:32:24] <aquanight> I suppose it's a problem you can't "generate" from the same array separately in parallel loops
[19:32:32] <aquanight> or that it leaves the array "partially generated" if you last out
[19:32:35] <Altreus> that is the exact problem with each, yes
[19:32:36] *** Joins: Darkcoal (~user@user/Darkcoal)
[19:32:48] <aquanight> but in practice
[19:32:52] <Altreus> it's why you should never use it on a ref, and this generalises to just avoid it
[19:32:59] <Altreus> cos it's shit anyway
[19:33:13] <Altreus> can't use it on not-arrays, for example
[19:33:19] <aquanight> I guess the other generator for arrays is C-style for
[19:33:20] <Altreus> can you?
[19:33:27] <aquanight> for (my $ix = 0; $ix < scalar(@array); ++$ix)
[19:33:34] <Altreus> eval: my @array; 1 while my $i = each keys @array;
[19:33:36] <perlbot> Altreus: ERROR: Experimental each on scalar is now forbidden at (IRC) line 1. Type of arg 1 to each must be hash or array (not keys on array) at (IRC) line 1, near "@array;" 
[19:33:36] <aquanight> but
[19:33:43] <aquanight> this is just foreach spelled out
[19:33:50] <Altreus> yeah it works on arrays, not lists
[19:33:55] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[19:34:08] <Altreus> But you could easily do while my $i = [iterator syntax] LIST
[19:34:15] <Altreus> er, generator syntax
[19:34:38] <aquanight> well
[19:34:49] <Altreus> but we don't, because normally you have to call next on that
[19:34:55] <aquanight> if I have it my way, [iterator syntax] just becomes: from my $item in LIST <do things> select $item;
[19:34:56] <Altreus> which is suddenly implied by while
[19:35:14] <aquanight> and there's your generator
[19:35:34] <Altreus> sure, which is almost exactly the same as a deferred gather/take
[19:35:39] <Altreus> which is a supply, in raku terms
[19:36:00] <Altreus> basically I think raku is too complicated but the ideas translate
[19:36:14] <aquanight> I don't know what to tell you then.
[19:36:23] <aquanight> 'foreach' exists because it's a language primitive
[19:36:36] <aquanight> "loop over what's in this list/array/whatever"
[19:36:41] <Altreus> yeah, cos we don't have these things :)
[19:36:52] <Altreus> but it's a shortcut, really, I think
[19:37:10] <aquanight> not only a lack of generalized generator/supply/gather/take natively
[19:37:19] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[19:37:19] <aquanight> perl does not have a standardized iterator in the first place
[19:37:34] <aquanight> the closest we get are each and <>
[19:37:52] <aquanight> which means the collection is maintaining the iterator state which is of course the each problem
[19:38:30] <FatalNIX> You can make an iterator in 5 seconds or less
[19:38:33] <aquanight> there's nothing like C++'s for (auto i = thing.begin(); i != thing.end(); ++i) { auto && thing = *i;
[19:38:54] <FatalNIX> Just write your own
[19:38:57] <aquanight> there's disagreement on if the "end of the iterator" is to return undef or an empty list or do something else entirely
[19:39:03] <ilmari> because perl doesn't have vocabuliary types like e.g. python and rust, so there's no standard way for a collection to tell perl how to iterate over it
[19:39:08] <Altreus> FatalNIX: but you can't make perl iterate it
[19:39:16] <Altreus> unless you overload <> like aquanight was saying
[19:39:18] <Altreus> but that's scary
[19:39:25] <aquanight> hell
[19:39:30] <aquanight> every time I look at overloading <>
[19:39:35] <ilmari> you can also overload @{}, but that's eager
[19:39:41] <Altreus> let's just start doing it and see what happens :D
[19:39:41] <aquanight> I'm not clear on if you're expected to only implement the scalar form and perl will handle the list logic for you
[19:39:47] <aquanight> or if you have to 'wantarray' to make it work right
[19:39:52] <Altreus> aquanight: TIAS!
[19:39:57] <Altreus> and then update the docs
[19:40:28] <aquanight> and of course
[19:40:34] <aquanight> everyone hates overloaded operators anyway
[19:40:41] <aquanight> so really you end up making a method to do it
[19:40:47] <aquanight> maybe you call it ->each
[19:40:59] <aquanight> or you call it ->iterator and make a whole separate object for iterator state
[19:41:12] <ilmari> which is what rust does with its IntoIterator and Iterator traits
[19:41:21] <aquanight> with core perl OO that's not so bad but O:P doesn't have "inner objects" that I know of
[19:41:32] <aquanight> nor does I think any of the other major OOP libraries for perl
[19:41:34] <ilmari> 16:10 < aquanight> and of course
[19:41:34] <aquanight> Moo/se etc
[19:41:38] <ilmari> bah
[19:42:13] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.47) (Ping timeout: 250 seconds)
[19:42:17] <aquanight> ilmari: C# takes a similar approach: it used to be foreach required implementing System.IEnumerable (or S.C.G.IEnumerable<T>) but has since allowed for pattern-based (since ref structs can't implement interfaces)
[19:42:41] <aquanight> i.e. just having a public MoveNext method and Current property to do the right things
[19:43:02] <aquanight> er sorry, a GetEnumerator method, which returns a thing that has MoveNext/Current
[19:43:08] <ilmari> in rust any type can implement traits
[19:43:16] *** Joins: rgrinberg (~textual@177.248.148.38)
[19:43:37] <aquanight> ilmari: ref structs are barred from implementing interfaces because managed pointers (that aren't object references) aren't allowed on the GC heap
[19:43:47] *** Joins: ovid (~ovid@pop.92-184-100-18.mobile.abo.orange.fr)
[19:44:11] <aquanight> (regular structs can't contain managed pointers that aren't object references, so they're allowed to be "boxed" into GC objects and thus are allowed to implement interfaces)
[19:45:17] <aquanight> for example, Span<byte> can't actually implement IEnumerable<byte> but because it has the right methods, it can be iterated with foreach
[19:46:17] <aquanight> I think it's just a technical limitation because they didn't want to have to deal with the GC having to track interior data pointers as well as whole-object references
[19:46:52] <aquanight> instead interior data pointers can only exist on the stack, so the method can just pin the containing object while the interior pointer exists
[19:46:58] * GumbyPAN welcomes CLEARBLT - Clearbuilt Technologies to CPAN!
[19:48:17] <aquanight> but rust doesn't have a GC heap, so it probably doesn't have to care about any of this
[19:48:57] <aquanight> point is, perl doesn't *have* a standardized iteration pattern where the iterator is separate from the collection
[19:49:17] <aquanight> all current forms have the iterator state carried as part of the collection (again, the each problem)
[19:49:57] <aquanight> whether it's the hash/array iterator via each, or the file position for readline($fh), or pos($text) for  m//g
[19:50:09] *** Quits: fling (~fling@user/fling) (Remote host closed the connection)
[19:50:29] *** Joins: fling (~fling@user/fling)
[19:52:16] <aquanight> in fact
[19:52:16] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 272 seconds)
[19:52:29] <aquanight> I think foreach (@array) is the *only* case in perl where iterator state is separated from the collection
[19:52:46] *** Joins: randir (~randir@95-31-138-202.broadband.corbina.ru)
[19:54:04] <aquanight> unfortunately, I believe foreach is straight-up awful for anything that isn't a simple non-tied array
[19:56:46] <vanfanel64> aquanight, "instead interior data pointers can only exist on the stack, so the method can just pin the containing object while the interior pointer exists", can they not be allocated using new on the heap?
[19:56:58] * GumbyPAN CPAN Upload: HTML-Parser-3.78 by OALDERS https://metacpan.org/release/OALDERS/HTML-Parser-3.78
[19:57:22] <aquanight> vanfanel64: nope. Like I said, managed pointers that aren't object references aren't allowed on the GC heap.
[19:57:51] <aquanight> so you can't box them either.
[19:58:05] <vanfanel64> Huh. Ok. I thought it could be one c++ ish though.
[19:58:13] <aquanight> they can't be fields of a class (or of a struct that isn't "ref struct")
[19:58:18] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[19:59:09] <vanfanel64> I have not used c# in some years so I might not be remembering correctly,
[19:59:18] <aquanight> vanfanel64: C++ might in theory be able to shenanigan some things while it's operating in unmanaged space, but as soon as GC sees your tomfoolery you'll get slapped in the face with an InvalidProgramException
[20:00:03] <vanfanel64> I do not remember c++ having GC
[20:00:14] <aquanight> vanfanel64: this is in reference to C# aka .NET/CLR
[20:00:29] <aquanight> C++ can also target CLR
[20:00:35] <vanfanel64> oh
[20:00:35] <aquanight> in which case it's dealing with the same GC
[20:01:06] <vanfanel64> I am not sure  what CLR is, other than a cleaner :)
[20:01:06] <aquanight> also, keep in mind you can most certainly have *unmanaged* pointers in the heap. But they are fully your responsibility at that point.
[20:01:29] <vanfanel64> yes
[20:03:05] <aquanight> if you for some reason want to point at the interior of a managed object with said unmanaged pointer, you're responsible for using GCHandle to pin the object in place
[20:03:10] <ilmari> vanfanel64: the Common Language Runtime. to C# as JVM is to Java
[20:03:15] <aquanight> and also implement IDisposable of course so that you can clean up your tomfoolery
[20:04:02] <ilmari> except it was designed from the beginning to be targeted by multiple different lanauges (hence "Common")
[20:04:30] <aquanight> ilmari: to a fault in some ways. I feel like some of the really good stuff were held back because VB.NET isn't quite as quick at feature integration as C# is
[20:06:06] <aquanight> and yes I have on occasion tried to think about how perl could get into the CLR stuff. I know Win32::CLR exists but it seemed kinda 'meh' when I looked at it.
[20:06:39] <ilmari> there was a rakudo backend for clr, iirc, but I think it stagnated
[20:10:25] <ilmari> ah, no, it's a completely separate compiler: https://github.com/sorear/niecza
[20:10:26] <Paperbot> Link title(s): [ GitHub - sorear/niecza: A Perl 6 compiler targetting the CLR with an experimental focus on optimi... ]
[20:12:27] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.47)
[20:15:38] *** Joins: Trigon (~reuben@144.39.114.115)
[20:15:44] <aquanight> ilmari: a perl backend for DLR might be fun though.
[20:15:55] <aquanight> an "IronPerl" so to speak
[20:16:00] <ilmari> the docklands light railway?
[20:16:19] <thrig> DeLorean Rust?
[20:16:21] <aquanight> ilmari: https://github.com/IronLanguages/dlr
[20:16:22] <Paperbot> Link title(s): [ GitHub - IronLanguages/dlr: Dynamic Language Runtime ]
[20:16:41] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.47) (Ping timeout: 250 seconds)
[20:21:02] *** Quits: aspic (~shifty~~~@1.145.111.192) (Read error: Connection reset by peer)
[20:21:30] *** Joins: aspic (~shifty~~~@1.145.111.192)
[20:22:31] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[20:25:07] <aquanight> what's not clear to me is how something like IronPython handles the standard python libraries, if any of it requires native code. Perl has to do the whole XSUB shenanigans to create perl-to-native bindings.
[20:26:16] <aquanight> and perl XS code is so heavily #defined that I have no idea how it can work in a CLR type of environment. I would be CL.EXE would choke on it.
[20:28:33] *** Joins: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de)
[20:29:19] *** Quits: thrig (~thrig@207.108.197.156) (Remote host closed the connection)
[20:29:33] *** Joins: thrig (~thrig@207.108.197.156)
[20:33:57] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[20:34:33] <aquanight> (I suppose, in fairness, perl with access to the CLR doesn't as much *need* CPAN.)
[20:34:46] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Remote host closed the connection)
[20:35:04] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[20:38:58] *** Quits: mncheckm (~mncheck@193.224.205.254) (Ping timeout: 260 seconds)
[20:39:07] <thrig> I'll stick with CPAN
[20:42:06] *** Joins: bbrtj (~bbrtj@185.24.91.138)
[20:46:48] <rindolf> there is https://metacpan.org/dist/Inline-Java/view/lib/Inline/Java.pod
[20:46:48] <Paperbot> Link title(s): [ Inline::Java - Write Perl classes in Java. - metacpan.org ]
[20:47:00] *** Joins: Tempesta (~Tempesta@user/tempesta)
[20:47:49] *** Joins: rawley (~rawley@142.99.241.242)
[20:50:35] *** Joins: unthrig (~thrig@207.108.197.156)
[20:51:05] *** Quits: unthrig (~thrig@207.108.197.156) (Client Quit)
[20:53:07] *** Quits: thrig (~thrig@207.108.197.156) (Ping timeout: 260 seconds)
[20:54:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[20:54:31] *** Joins: thrig (~thrig@207.108.197.156)
[20:56:34] *** Joins: fling (~fling@user/fling)
[20:57:25] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 240 seconds)
[21:03:36] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[21:08:18] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:14:27] *** Quits: tobybl_ (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[21:15:02] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.47)
[21:15:27] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:3581:d5f3:cd4:c078)
[21:21:24] *** Joins: morte_ (~user@190.104.116.153)
[21:25:27] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 265 seconds)
[21:25:38] *** Quits: art1 (~romeyke@p200300ccdf0462004176576d046ffee8.dip0.t-ipconnect.de) (Quit: Leaving.)
[21:26:49] *** Quits: aspic (~shifty~~~@1.145.111.192) (Read error: No route to host)
[21:28:47] *** Quits: ovid (~ovid@pop.92-184-100-18.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[21:30:14] *** Quits: ekathva (~ekathva@2001:999:230:5e27:a0b1:eaf6:c841:8439) (Remote host closed the connection)
[21:33:34] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) ()
[21:36:55] *** Joins: Tempesta (~Tempesta@user/tempesta)
[21:41:22] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 260 seconds)
[21:42:04] *** Quits: subie (~subie@c-68-35-254-134.hsd1.fl.comcast.net) (Ping timeout: 246 seconds)
[21:43:06] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Ping timeout: 268 seconds)
[21:45:12] *** Quits: mexen (uid495612@id-495612.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:47:55] <daemon> is there any modules in core that allow making a scalar readonly
[21:48:38] <simcop2387> i think so but forget what it is, let me look
[21:50:00] <simcop2387> daemon: yea Scalar::Util should be able to
[21:50:01] <ilmari> Internals::SvREADONLY($thing), but you really should use Const::Fast instead
[21:50:22] <daemon> use Scalar::Readonly ':all';
[21:50:24] <simcop2387> oh no that only reads it
[21:50:27] <ilmari> Internals::SvREADONLY($thing, 1), even
[21:50:30] <daemon> :)
[21:51:08] <Juerd> SvREADONLY(${\undef}, 0);  # >:)
[21:51:37] <simcop2387> eval: Internals::SvREADONLY(${\undef}, 0);
[21:51:39] <perlbot> simcop2387: No output.
[21:51:52] <simcop2387> eval: Internals::SvREADONLY(${\undef}, 0); my \$x = \undef; $x
[21:51:54] <perlbot> simcop2387: No output.
[21:52:04] <simcop2387> eval: Internals::SvREADONLY(${\undef}, 0); my \$x = \undef; $x = "foo"; my \$y = \undef; $y
[21:52:06] <perlbot> simcop2387: ERROR: Modification of a read-only value attempted at (IRC) line 1. 
[21:52:10] <ilmari> eval: Internals::SvREADONLY(${\undef}, 0); ${\undef} = 42; [ undef ]
[21:52:12] <perlbot> ilmari: ERROR: Modification of a read-only value attempted at (IRC) line 1. 
[21:52:18] <simcop2387> guess it doesn't work
[21:53:20] <daemon> https://dpaste.org/NA8Z - just making a template for those fast one time applications you end up scrabbling together
[21:53:21] <Paperbot> Link title(s): [ dpaste/NA8Z (Perl) ]
[21:53:32] <Juerd> Aww. That used to work. Gave a talk about it at a YAPC
[21:53:42] <Juerd> (Lightning talk titled "undef isn't")
[21:54:09] <simcop2387> Juerd: cool, i'll have to look it up.  I think python had something weird similarly before where you could redefine 2
[21:54:40] <Juerd> Oh, in Perl 4 you could redefine literals :)
[21:55:18] <Juerd> All it took was a for loop: sub foo { for $x (42) { $x-- } }, second call to foo would start with 42 being 41 :)
[21:56:01] <Juerd> It's all "why would anyone do that" until you find code that actually depends on it. And I did find code that depended on it, indirectly.
[21:57:19] <daemon> that sounds a hateful creation
[21:57:52] <ilmari> https://juerd.nl/files/slides/2006yapceu/undef.html -- but I can't seem to be able to get to the next slide
[21:58:07] <Juerd> Yeah, that javascript was made for 2006 browsers :)
[21:58:15] <Juerd> wontfix :P
[21:58:25] <Juerd> Just disable javascript or read the source
[21:58:30] <daemon> wget --mirror 
[21:58:47] <Juerd> daemon: w3m https://juerd.nl/files/slides/2006yapceu/undef.html
[21:58:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[22:00:19] <Juerd> ilmari: I brewed that entire lightning talk, including slides and the javascript, in the hours before the lightning talk
[22:00:29] *** Joins: fling (~fling@user/fling)
[22:00:42] <Juerd> Seemed faster than trying to evaluate different kinds of presentation software :)
[22:01:06] <daemon> :-)
[22:03:19] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[22:06:36] *** Joins: subie (~subie@2601:4c0:4080:bc0:ca0f:1d28:f742:47b5)
[22:06:38] *** Joins: jpn (~jpn@user/jpn)
[22:07:12] * GumbyPAN CPAN Upload: File-Process-0.03 by BIGFOOT https://metacpan.org/release/BIGFOOT/File-Process-0.03
[22:08:22] *** Joins: Trigon (~reuben@144.39.114.115)
[22:11:07] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 246 seconds)
[22:19:34] *** Quits: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[22:22:32] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[22:23:34] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[22:24:32] *** Quits: thrig (~thrig@207.108.197.156) (Remote host closed the connection)
[22:25:08] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[22:32:49] *** Joins: llh (~UPP@user/llh)
[22:35:40] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.47) (Ping timeout: 272 seconds)
[22:38:24] *** Joins: jpn (~jpn@user/jpn)
[22:39:54] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[22:42:39] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:43:50] *** Joins: ovid (~ovid@pop.92-184-100-18.mobile.abo.orange.fr)
[22:51:01] *** Quits: proller (~p@2a02:6b8:b081:6402::1:6) (Ping timeout: 240 seconds)
[22:51:34] *** Joins: bn_work (uid268505@id-268505.uxbridge.irccloud.com)
[22:53:29] *** Joins: xq (~xq@user/xq)
[22:55:32] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[22:56:28] *** Joins: cstls (~ruiner@2603-7081-0800-4824-0d98-81f7-6fb1-dc28.res6.spectrum.com)
[22:56:57] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[23:00:40] *** Joins: gareppa (~gareppa@user/gareppa)
[23:01:27] <daemon> anyone have any suggestions for this perl template: https://dpaste.org/8JSJ the idea is a basic template you can fling up for when you need to write a perl script to do some bizzare task that no normal application does
[23:01:28] <Paperbot> Link title(s): [ dpaste/8JSJ (Perl) ]
[23:01:47] <daemon> wonder if it would be benficial making stdout hot for such a thign
[23:01:49] <daemon> thing*
[23:02:23] *** Joins: proller (~p@2a02:6b8:b081:b70d::1:e)
[23:02:59] <daemon> maybe I should put all this stuff in a package so the top of the template is basically just my $stash = package->new(@ARGV);
[23:03:34] <daemon> that would be tidier
[23:04:34] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[23:05:11] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[23:08:24] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[23:08:43] *** Quits: gareppa (~gareppa@user/gareppa) (Quit: Leaving)
[23:09:52] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[23:10:50] <buu> ooh, signatures
[23:11:04] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[23:13:41] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 272 seconds)
[23:13:42] *** Quits: ovid (~ovid@pop.92-184-100-18.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[23:13:50] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[23:22:52] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 260 seconds)
[23:23:24] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[23:23:51] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[23:24:01] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:24:58] *** Joins: justOkay (~justache@user/justache)
[23:25:55] <haarg> if you want a readonly scalar, use a constant
[23:26:53] <daemon> eval: my $test = [1,2,3,4]; my $h = { a=>$test,b=>'test' }; Dumper $test
[23:26:56] <perlbot> daemon: $VAR1 = [           1,           2,           3,           4         ]; 
[23:27:03] <daemon> eval: my $test = [1,2,3,4]; my $h = { a=>$test,b=>'test' }; Dumper $h
[23:27:05] <perlbot> daemon: $VAR1 = {           'a' => [                    1,                    2,                    3,                    4                  ],           'b' => 'test'         }; 
[23:27:16] <daemon> hmmm I have something wrong somewhere
[23:27:59] <daemon> haarg, yeah am considering it
[23:28:23] <daemon> really I think I am now just playing about trying to make pretty :)
[23:31:25] *** Joins: jpn_ (~jpn@user/jpn)
[23:31:45] *** Joins: magla (~gelignite@d53668d6.access.ecotel.net)
[23:33:01] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 246 seconds)
[23:34:08] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-68.dsl.bell.ca)
[23:37:45] *** Quits: rawley (~rawley@142.99.241.242) (Ping timeout: 272 seconds)
[23:38:44] *** Quits: tomaw (tom@libera/staff/tomaw) (Quit: Quitting)
[23:39:24] *** Quits: WinterStar (~IceLight@user/icelight) (Quit: WeeChat 3.4.1)
[23:39:57] *** Joins: WinterStar (~IceLight@user/icelight)
[23:43:20] <cstls> folks, any instances when you prefer to reach for bash over perl?
[23:43:25] <cstls> or vice versa 
[23:43:49] <cstls> just out of curiosity
[23:43:55] *** Joins: tomaw (tom@libera/staff/tomaw)
[23:44:32] <El_Che> bash is fine for a short script where there is more execution of programs than text handling or logic
[23:45:42] <cstls> right that makes sense
[23:46:07] <cstls> i'm mostly relying on perl for text grepping
[23:46:44] <cstls> and am very noob with it still
[23:47:23] <daemon> haarg, https://dpaste.org/naj8
[23:47:23] <Paperbot> Link title(s): [ dpaste/naj8 (Perl) ]
[23:47:27] <daemon> seems a reasonable template I think
[23:47:36] <daemon> not super rigid, nice place to shove stuff
[23:48:33] <daemon> probably shove Env and a few other bits and pieces on the object
[23:49:02] <buu> Bash is a user interface
[23:49:05] <buu> perl is a programming language
[23:50:04] <huf> eh
[23:50:08] <huf> bash is also a programming language
[23:50:15] <buu> Only if you hate humanity
[23:50:18] <El_Che> bash is Turing-complete
[23:50:19] <El_Che> iirc
[23:50:24] <buu> so is your mother
[23:50:24] <huf> of course it's turing complete
[23:50:27] <buu> but I'm not programming her
[23:50:32] <huf> it's probably turing complete 927272 times over
[23:50:41] <haarg> daemon: one issue you can run into with a setup like that is that it implies _app_helper is a "normal" package
[23:50:47] <buu> magic the gathering is turing complete or some shit
[23:50:50] <haarg> as if it was a pm file
[23:50:51] <El_Che> buu: still programming mothers?
[23:50:54] <buu> lol
[23:50:58] <buu> El_Che: just not yours!
[23:51:09] <buu> (don't slap me)
[23:51:09] <El_Che> MILP
[23:51:31] <haarg> but anything in the runtime part of _app_helper will not be run, so patterns that expect that won't work
[23:51:42] <cstls> lol
[23:51:55] <buu> One of my long term soap boxes is people who try to "improve" bash by making it more formal/rigid/logical, in other words, easier for a computer and harder for a human, have completely missed the point
[23:52:22] *** Joins: joshisanonymous (~joshisano@2600:6c5a:457f:c4b5:4864:4440:e612:8308)
[23:52:23] <cstls> like zsh stuff?
[23:52:24] *** Quits: joshisanonymous (~joshisano@2600:6c5a:457f:c4b5:4864:4440:e612:8308) (Remote host closed the connection)
[23:52:28] <cstls> etc
[23:52:28] <buu> Possibly
[23:52:30] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:52:39] <El_Che> csh
[23:52:41] <buu> probably more like csh
[23:52:44] <El_Che> has modiles
[23:52:46] <El_Che> u
[23:52:47] <cstls> ah
[23:53:01] <cstls> i stick to straight bash
[23:53:15] <buu> Like, sure, there's some really weird shit in bash like [[ vs [ and ( and (( and however the hell arrays work
[23:53:29] <El_Che> I have a few small projects in Bourne shell, for portability
[23:53:33] <buu> It's obviously not perfect
[23:54:06] <buu> But we already have, roughly, 15000 "more logical" programming languages if we need something more consistent to write programs in
[23:54:13] <buu> We only have one bash
[23:55:06] <El_Che> I learnt to program in ksh before bash :)
[23:55:06] <buu> "I took bash and added namespaces and modules and built in hashes and objects!!" great, now you're reinvented perl
[23:55:28] <El_Che> with sigils!
[23:55:34] <xenu> there are plenty of problems with posix sh that can be fixed without changing the whole paradigm
[23:55:37] <xenu> for example quoting is stupid
[23:55:40] <buu> yeah
[23:55:46] <huf> yeah but it's irreparably stupid
[23:55:56] <huf> unless you want to break backward compatibility
[23:55:57] <El_Che> xenu: like groovy fixed quoting? 
[23:56:00] <huf> but then what's the point
[23:56:03] <buu> xenu: but the goal should be to create a better user experience, not a better compiler experience
[23:56:04] <El_Che> by making it way worse
[23:56:12] <xenu> i don't know what groovy is
[23:56:20] <huf> what i really really dont get is why almost no language has the equivalent of perl's q{} and qq{}
[23:56:26] <buu> ha
[23:56:35] <buu> huf: I'd rather have m{}
[23:56:36] <huf> it's like there's a fucking hole in the brain of people
[23:56:37] <El_Che> xenu: ruby inspired JVM language
[23:57:05] <buu> Having /\// is the ugliest thing in human history
[23:57:11] <El_Che> m.o. is keeping adding backslashes until it gets silly
[23:57:27] * ilmari has only encountered groovy in the context of Jenkinsfiles, and is very glad $ork is moving everything to Gitlab CI (despite yaml)
[23:57:28] <huf> buu: that's no different from the q/qq problem
[23:57:29] <huf> same thing
[23:57:31] <buu> sure
[23:57:35] <buu> But more important
[23:57:38] <huf> nah
[23:57:42] <huf> same importance
[23:57:45] <buu> print "foo said \"bar\"" is a lot less ugly
[23:57:55] <huf> except you actually use strings a lot more than regexes
[23:58:00] <buu> than .match(/blah\/part(\d)\//)
[23:58:27] <buu> huf: Yeah but switching between '' "" and `` gets you 99% of the way there
[23:58:36] <buu> Almost every language has a third quote char these days anyways
[23:58:49] <cstls> haha yep
[23:59:26] <buu> I just want a multi arg readpipe()
[23:59:36] <buu> eval: readpipe("a","b")
[23:59:39] <perlbot> buu: ERROR: Too many arguments for quoted execution (``, qx) at (IRC) line 1, near ""b")" 
[23:59:47] <buu> see, you could add that and keep back compat
[23:59:55] <buu> eval: readpipe(@_)
[23:59:58] <perlbot> buu: Can't exec "0": No such file or directory at (IRC) line 1. 
