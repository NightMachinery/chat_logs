[00:01:27] *** Quits: jdevoo (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch) (Quit: leaving)
[00:07:07] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[00:10:08] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[00:10:37] *** Joins: badkins (~badkins@136.56.92.199)
[00:15:14] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[00:20:07] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2)
[00:20:13] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:22:30] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[00:27:57] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:ebfe:7c9c:6080:5aca) (Quit: Client closed)
[00:32:34] *** Joins: seninha (~seninha@user/seninha)
[00:35:56] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[00:38:12] <jcowan> mdhughes: You didn't mention Google's backing, financial and technical.
[00:40:45] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[00:50:08] *** Joins: badkins (~badkins@136.56.92.199)
[00:54:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[00:59:02] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:08:24] *** Joins: badkins (~badkins@136.56.92.199)
[01:13:02] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[01:23:39] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Ping timeout: 276 seconds)
[01:26:38] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[01:43:54] *** Joins: badkins (~badkins@136.56.92.199)
[01:54:23] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Remote host closed the connection)
[02:03:49] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:09:41] *** Joins: seninha (~seninha@user/seninha)
[02:13:03] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[02:14:55] *** Joins: seninha_ (~seninha@user/seninha)
[02:16:02] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[02:17:34] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[02:19:11] *** Joins: seninha (~seninha@user/seninha)
[02:54:34] *** Joins: akarle (~akarle@user/akarle)
[02:55:20] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[02:57:57] *** Quits: klovett (~klovett@107.127.17.177) (Ping timeout: 240 seconds)
[03:00:43] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:03:07] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2) (Quit: Leaving)
[03:05:26] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:06:35] *** Joins: seninha (~seninha@user/seninha)
[03:09:28] *** em is now known as Em
[03:12:36] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[03:27:04] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[03:34:26] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:46:28] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[03:59:15] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[04:01:53] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 252 seconds)
[04:01:57] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[04:02:58] *** Joins: karlosz (~karlosz@47.151.136.69)
[04:03:13] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:14:34] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[04:23:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:30:24] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:46:37] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[04:50:57] *** Joins: badkins (~badkins@136.56.92.199)
[04:54:32] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[04:55:43] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:57:25] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Ping timeout: 240 seconds)
[04:57:35] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[04:57:35] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[04:57:59] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[04:58:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[04:58:16] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[04:58:19] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[04:58:40] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[04:58:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[04:58:58] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[04:59:01] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[04:59:22] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[04:59:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[04:59:40] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[04:59:43] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:00:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:00:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:00:22] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:00:25] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:00:46] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:00:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:01:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:01:07] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:01:28] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:01:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:01:43] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:01:46] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:01:49] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:02:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:02:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:02:28] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:02:31] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:02:53] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:03:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:03:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:03:13] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:03:34] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:03:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:03:52] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:03:55] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:04:16] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:04:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:04:34] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:04:37] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:04:59] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:05:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:05:16] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:05:18] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[05:05:19] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:05:42] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:05:53] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:06:00] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:06:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:06:24] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:06:35] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:06:42] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:06:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:07:06] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:07:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[05:07:17] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:07:24] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:07:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:07:48] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:07:59] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:08:06] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:08:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:08:30] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:08:41] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:08:48] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:08:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:09:12] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:09:23] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:09:30] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:09:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:09:52] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Closing Window)
[05:09:54] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:10:05] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:10:12] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:10:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:10:36] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:10:47] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:10:54] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:10:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:11:18] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:11:29] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:11:36] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:11:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:12:00] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:12:11] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:12:18] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:12:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:12:42] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:12:53] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:13:01] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:13:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:13:24] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:13:35] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:13:42] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:13:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:13:55] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:14:07] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:14:17] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:14:24] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:14:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:14:49] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:14:59] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:15:07] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:15:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:15:31] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:15:41] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:15:48] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:15:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:16:12] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:16:23] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:16:31] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:16:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:16:54] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:17:05] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:17:11] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:17:12] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:17:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:17:31] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[05:17:36] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:17:47] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:17:55] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:17:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:18:18] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:18:29] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:18:30] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:18:36] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:18:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:19:01] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:19:11] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:19:19] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:19:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:19:42] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:19:53] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:20:00] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:20:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:20:25] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:20:35] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:20:43] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:20:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:21:06] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:21:17] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:21:24] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:21:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:21:49] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:21:59] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:22:07] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:22:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:22:30] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:22:41] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:22:48] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:22:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:23:13] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:23:23] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:23:30] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:23:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:23:55] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:24:05] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:24:12] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:24:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:24:36] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:24:47] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:24:55] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:24:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:25:18] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:25:29] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:25:37] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:25:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:26:00] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:26:05] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[05:26:11] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:26:19] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:26:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:26:43] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:26:53] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:27:00] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:27:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:27:24] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:27:35] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:27:42] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:27:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:28:07] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:28:17] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:28:24] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:28:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:28:48] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:28:59] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:29:07] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:29:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:29:31] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:29:41] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:29:49] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:29:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:30:12] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:30:23] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:30:30] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:30:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:30:55] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:31:05] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:31:12] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:31:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:31:36] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:31:47] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:31:54] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:31:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:32:19] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:32:29] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:32:36] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:32:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:33:00] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:33:11] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:33:19] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:33:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:33:42] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:33:53] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:34:01] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:34:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:34:24] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:34:35] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:34:42] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:34:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:35:07] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:35:17] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:35:24] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:35:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:35:48] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:35:59] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:36:07] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:36:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:36:30] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:36:41] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:36:48] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:36:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:37:12] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:37:23] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:37:31] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:37:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:37:55] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:38:05] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:38:12] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:38:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:38:36] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:38:47] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:38:55] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:38:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:39:18] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:39:29] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:39:36] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:39:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:40:01] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:40:11] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:40:19] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:40:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:40:42] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:40:53] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:41:00] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:41:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:41:25] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:41:35] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:41:42] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:41:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:42:07] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:42:17] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:42:24] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:42:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:42:48] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:42:59] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:43:07] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:43:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:43:24] *** Joins: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net)
[05:43:31] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:43:41] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:43:48] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:43:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:44:12] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:44:23] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:44:31] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:44:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:44:54] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:45:05] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:45:12] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:45:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:45:36] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:45:47] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:45:54] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:45:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:46:18] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:46:29] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:46:36] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:46:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:47:00] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:47:11] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:47:19] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:47:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:47:42] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:47:47] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[05:47:55] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:48:02] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:48:05] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:48:26] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:48:37] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:48:44] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:48:47] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:49:08] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:49:19] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:49:27] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:49:29] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:49:50] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:50:01] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:50:08] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:50:11] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:50:32] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:50:43] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:50:50] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:50:53] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:51:14] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:51:25] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:51:33] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:51:35] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:51:56] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:52:07] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:52:14] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:52:17] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:52:38] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:52:49] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:52:56] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:52:59] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:53:20] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:53:31] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:53:38] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:53:41] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:54:02] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:54:13] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:54:21] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:54:23] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:54:44] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:54:55] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:55:02] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:55:05] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:55:26] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:55:37] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:55:44] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:55:47] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:56:08] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:56:19] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:56:27] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:56:29] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:56:50] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:57:01] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:57:08] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:57:11] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:57:32] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:57:43] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:57:51] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:57:53] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:58:14] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:58:25] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:58:32] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:58:35] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:58:56] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:59:07] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:59:15] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:59:17] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[05:59:38] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:59:49] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[05:59:56] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[05:59:59] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:00:21] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:00:31] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:00:39] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:00:41] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:00:41] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:01:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:01:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:01:23] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:01:25] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:01:46] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:01:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:02:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:02:07] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:02:29] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:02:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:02:47] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:02:49] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:03:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:03:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:03:29] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:03:31] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:03:52] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:04:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:04:11] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:04:13] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:04:34] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:04:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:04:51] *** Quits: lockywolf_ (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:04:53] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:04:55] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:05:17] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:05:17] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[06:05:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:05:34] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:05:37] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:05:59] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:06:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:06:17] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:06:19] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:06:40] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:06:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:06:59] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:07:01] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:07:23] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:07:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:07:41] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:07:43] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:08:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:08:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:08:22] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:08:25] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:08:36] *** Joins: lockywolf_ (~lockywolf@public.lockywolf.net)
[06:08:47] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:08:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:09:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:09:07] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:09:28] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:09:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:09:47] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:09:49] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:10:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:10:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:10:29] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:10:31] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:10:53] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:11:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:11:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:11:13] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:11:34] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:11:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:11:52] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:11:55] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:12:16] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:12:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:12:34] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:12:37] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:12:59] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:13:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:13:17] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:13:19] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:13:40] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:13:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:13:59] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:14:01] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:14:22] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:14:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:14:40] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:14:43] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:15:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:15:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:15:22] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:15:25] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:15:46] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:15:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:16:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:16:07] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:16:28] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:16:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:16:47] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:16:49] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:17:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:17:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:17:28] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:17:31] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:17:52] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:18:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:18:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:18:13] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:18:34] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:18:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:18:52] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:18:55] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:19:16] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:19:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:19:35] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:19:37] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:19:58] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:20:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:20:17] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:20:19] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:20:40] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:20:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:20:58] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:21:01] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:21:22] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:21:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:21:41] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:21:43] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:22:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:22:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:22:22] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:22:25] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:22:46] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:22:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:23:05] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:23:07] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:23:28] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:23:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:23:46] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:23:49] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:24:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:24:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:24:29] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:24:31] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:24:52] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:25:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:25:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:25:13] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:25:34] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:25:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:25:53] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:25:55] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:26:16] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:26:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:26:35] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:26:37] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:26:58] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:27:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:27:16] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:27:19] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:27:40] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:27:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:27:59] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:28:01] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:28:19] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[06:28:22] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:28:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:28:41] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:28:43] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:29:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:29:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:29:24] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:29:25] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:29:47] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:29:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:30:05] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:30:07] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:30:28] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:30:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:30:47] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:30:49] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:31:11] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:31:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:31:28] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:31:31] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:31:43] *** Joins: frost (~frost@user/frost)
[06:31:52] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:32:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:32:11] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:32:13] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:32:35] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:32:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:32:53] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:32:55] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:33:16] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:33:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:33:34] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:33:37] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:33:59] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:34:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:34:17] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:34:19] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:34:40] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:34:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:34:59] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:35:01] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:35:22] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:35:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:35:41] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:35:43] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:36:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:36:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:36:22] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:36:25] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:36:46] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:36:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:37:05] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:37:07] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:37:28] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:37:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:37:47] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:37:49] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:38:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:38:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:38:28] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:38:31] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:38:53] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:39:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:39:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:39:13] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:39:35] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:39:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:39:53] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:39:55] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:40:16] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:40:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:40:35] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:40:37] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Read error: Connection reset by peer)
[06:40:59] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:41:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:41:17] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:41:19] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:41:40] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:41:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:41:59] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:42:01] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:42:22] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:42:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:42:41] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:42:43] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:43:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:43:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:43:22] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:43:25] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:43:26] *** Joins: alMalsam1 (~alMalsamo@gateway/tor-sasl/almalsamo)
[06:43:46] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:43:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:44:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:44:07] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:44:28] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:44:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:44:47] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:44:49] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:44:58] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[06:45:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:45:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:45:29] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:45:31] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:45:52] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:46:03] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:46:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:46:13] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:46:34] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:46:45] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:46:52] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:46:55] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:47:16] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:47:27] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:47:35] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:47:37] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:47:58] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:48:09] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:48:16] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:48:19] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:48:40] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:48:51] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:48:58] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:49:01] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:49:22] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:49:33] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:49:40] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:49:43] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:50:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:50:15] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:50:23] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:50:25] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:50:46] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:50:57] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:51:04] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:51:07] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:51:28] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:51:39] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:51:46] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:51:49] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Remote host closed the connection)
[06:52:10] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[06:52:21] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Client Quit)
[06:52:38] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[07:11:48] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:16] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[07:14:00] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:14:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:16:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:19:03] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[07:27:01] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[07:29:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:30:15] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[07:31:51] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:35:54] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[07:42:26] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[07:43:51] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[07:45:27] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[07:48:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:49:01] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[07:55:31] *** Joins: Darkcoal (~user@user/Darkcoal)
[08:01:27] *** Quits: lockywolf_ (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:05:10] *** Joins: lockywolf_ (~lockywolf@public.lockywolf.net)
[08:13:06] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:27:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:28:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[08:29:18] *** Quits: lockywolf_ (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:29:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:32:57] *** Joins: lockywolf_ (~lockywolf@public.lockywolf.net)
[08:34:47] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:52:54] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:53:32] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[09:03:01] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Ping timeout: 240 seconds)
[09:29:45] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[09:39:09] *** Quits: Perryman_ (~perryman@216.97.249.113) (Ping timeout: 256 seconds)
[09:40:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:05:29] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[10:07:28] *** Joins: badkins (~badkins@136.56.92.199)
[10:09:27] *** Joins: masoudd (~masoudd@user/masoudd)
[10:11:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[10:26:47] <mdhughes> jcowan: For what?
[10:33:40] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:41:08] *** Joins: thevishy (~Nishant@2405:201:f005:c007:6cf1:7245:a05f:ea21)
[10:43:38] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[10:47:52] *** Joins: frost (~frost@user/frost)
[10:54:58] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:59:13] *** Quits: zwr (~zwr@2804:d45:b966:fb00:be03:2bc0:ec84:6a34) (Ping timeout: 250 seconds)
[10:59:52] *** Joins: zwr (~zwr@2804:d45:b966:fb00:768:90c7:1da:f56f)
[11:06:04] *** Quits: ahlk` (~user@2600:1700:31c0:3a10::43) (Remote host closed the connection)
[11:11:31] *** Joins: Perryman_ (~perryman@216.97.249.113)
[11:14:08] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:14:36] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[11:23:49] *** Joins: civodul (~user@guix/contributor/civodul)
[11:38:20] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[11:48:50] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[11:49:24] *** Joins: frost (~frost@user/frost)
[11:49:25] *** Joins: badkins (~badkins@136.56.92.199)
[11:53:38] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[12:05:49] *** Joins: silasfox (~sbv@p200300cec71adb000b1561d576288968.dip0.t-ipconnect.de)
[12:25:55] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:46:44] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:48:13] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[12:51:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:54:43] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 250 seconds)
[13:05:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:07:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:47:36] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[13:51:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:56:25] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[13:57:28] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[14:03:29] *** Joins: ASau` (~user@lmpc.drb.insel.de)
[14:03:42] *** Joins: Noisytoot_ (~noisytoot@sourcehut/user/noisytoot)
[14:04:18] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[14:04:24] *** Joins: sham1_ (~sham1@212-146-44-107.aboa.net)
[14:05:04] *** Joins: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it)
[14:05:34] *** Joins: ft_ (~ft@shell.chaostreff-dortmund.de)
[14:06:02] *** Joins: Zipheir_ (~wcm@98.4.178.27)
[14:06:18] *** Joins: manumanu_ (~mio@213-67-252-160-no79.tbcn.telia.com)
[14:06:44] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[14:06:53] *** Joins: badkins (~badkins@136.56.92.199)
[14:07:08] *** sudden is now known as Guest3567
[14:10:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[14:11:02] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[14:11:02] *** Quits: turlando (~turlando@user/turlando) (*.net *.split)
[14:11:03] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (*.net *.split)
[14:11:03] *** Quits: Guest6340 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (*.net *.split)
[14:11:03] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[14:11:03] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (*.net *.split)
[14:11:03] *** Quits: taw10 (~taw@46.235.227.49) (*.net *.split)
[14:11:03] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[14:11:03] *** Quits: ASau (~user@lmpc.drb.insel.de) (*.net *.split)
[14:11:03] *** Quits: manumanumanu (~mio@213-67-252-160-no79.tbcn.telia.com) (*.net *.split)
[14:11:03] *** Quits: aoh (~aki@haltp.org) (*.net *.split)
[14:11:03] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[14:11:03] *** Quits: Zipheir (~wcm@98.4.178.27) (*.net *.split)
[14:11:03] *** Quits: fgudin_ (~fgudin@sdf-eu.org) (*.net *.split)
[14:11:03] *** Quits: wingo (~wingo@li270-233.members.linode.com) (*.net *.split)
[14:11:03] *** Quits: wheeler (~josh@useirc.net) (*.net *.split)
[14:11:09] *** ft_ is now known as ft
[14:13:54] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 260 seconds)
[14:14:27] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[14:16:12] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[14:16:12] *** Joins: taw10 (~taw@46.235.227.49)
[14:16:12] *** Joins: aoh (~aki@haltp.org)
[14:16:12] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[14:16:12] *** Joins: wheeler (~josh@useirc.net)
[14:16:12] *** Joins: fgudin_ (~fgudin@sdf-eu.org)
[14:16:12] *** Joins: wingo (~wingo@li270-233.members.linode.com)
[14:29:02] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[14:29:16] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:30:00] *** Joins: frost (~frost@user/frost)
[14:47:33] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:9fb7:fcaa:76f6:5cca)
[14:54:42] *** Joins: daviid` (~user@179.210.52.91)
[14:56:03] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 250 seconds)
[15:08:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 260 seconds)
[15:16:12] * dpk considers rewriting Rosenfelder's Sound Change Applier in Scheme
[15:17:22] <dpk> (so much for not mixing historical linguistics and programming, but SCA really is just a tool to do essentially menial work automatically, faster, and without error)
[15:19:55] *** Joins: daviid`` (~user@179.210.52.91)
[15:21:11] *** Quits: daviid` (~user@179.210.52.91) (Ping timeout: 245 seconds)
[15:40:00] *** Joins: frost (~frost@user/frost)
[15:46:55] *** sham1_ is now known as sham1
[15:50:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[15:52:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:59:03] *** Joins: notzmv (~zmv@user/notzmv)
[16:00:58] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:08:01] *** Joins: badkins (~badkins@136.56.92.199)
[16:11:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[16:11:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:12:20] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[16:14:23] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Quit: WeeChat 3.3)
[16:14:52] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[16:18:40] *** Joins: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se)
[16:18:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[16:19:01] <skeemer> hello all i wanted to read the little schemer... but i  noticed that with chicken scheme the definition of atom? is different...
[16:19:11] <skeemer> does anybody recognize that? or am i doing something wrong?
[16:19:42] <sjamaan> skeemer: Nah, it's just somewhat ill-defined what atom? really should do
[16:20:08] <sjamaan> I guess it's supposed to be #f for the empty list, but CHICKEN returns #t, right?
[16:20:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:20:28] <skeemer> sjamaan, exactly
[16:20:37] <skeemer> (atom? (quote ()))
[16:20:44] <skeemer> this returns #t in chicken
[16:20:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 245 seconds)
[16:20:51] <sjamaan> But the empty list _is_ atomic; you can't break it up into anything
[16:20:54] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:21:00] <skeemer> but the book states that we should be sure that it returns false
[16:21:10] <sjamaan> It's just that the Little Schemer defines it differently
[16:21:12] <skeemer> so i am already confused by the fact that each scheme does something different
[16:21:15] <skeemer> okok
[16:21:18] <skeemer> good start
[16:21:25] <sjamaan> heh, yeah that's a bit shitty
[16:21:35] <sjamaan> You can just copy the definition of the book into your REPL and it should be okay
[16:30:44] *** Quits: silasfox (~sbv@p200300cec71adb000b1561d576288968.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[16:36:50] <skeemer> okok sjamaan 
[16:37:00] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:37:08] <skeemer> sjamaan, do you think "the little schemer" series of books is good? 
[16:38:21] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:cd96:474c:cc93:ce17)
[16:38:21] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:cd96:474c:cc93:ce17) (Changing host)
[16:38:21] *** Joins: skapata (~Skapata@user/skapata)
[16:42:02] <sjamaan> skeemer: Yeah, I loved the first three (haven't read the others)
[16:43:02] <skeemer> sjamaan, you mean little/seasoned/reasoned?
[16:43:48] <sjamaan> yeah
[17:04:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:05:01] *** Joins: yhsiveht (~Nishant@2405:201:f005:c007:51b9:2550:9b70:b031)
[17:05:37] *** Quits: thevishy (~Nishant@2405:201:f005:c007:6cf1:7245:a05f:ea21) (Ping timeout: 240 seconds)
[17:06:04] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[17:09:52] *** daviid`` is now known as daviid
[17:11:36] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[17:12:01] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:12:53] <skeemer> sjamaan, what are your favorite scheme books?
[17:25:59] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[17:29:43] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:31:06] <sjamaan> skeemer: The Little and Seasoned Schemer
[17:40:58] *** Joins: xsperry (~xs@user/xsperry)
[17:43:41] *** Joins: seninha (~seninha@user/seninha)
[18:02:08] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[18:05:52] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Ping timeout: 250 seconds)
[18:07:04] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[18:08:19] <theseb> does every evaluation alter the global environment for everybody?  which evaluations do NOT alter the global env?  (I'm forgetting details of how scopes work in lisp.)
[18:09:57] <theseb> just to be more clear...you only alter the env if you set a variable/symbol to a value.  BUT..you can define things everywhere right? hence my question
[18:10:42] *** Joins: tzar_bomba (~tzar_bomb@user/tzar-bomba/x-5218718)
[18:11:59] *** Joins: silasfox (~sbv@p200300cec71adb000b1561d576288968.dip0.t-ipconnect.de)
[18:12:37] <theseb> if i'm not mistaken, when you invoke a lambda function you *temporarily* set the params to the args right?  So that's an example where you alter the env (for the invocation) then you ROLLBACK the env right?
[18:16:26] *** Quits: tzar_bomba (~tzar_bomb@user/tzar-bomba/x-5218718) (Quit: Client closed)
[18:16:30] <theseb> actually it doesn't even have to be a lambda func...e.g. when (f a b c) is evaluated, a b and c will first get evaluated...if a, b or c have expressions that set vars then the env will get permanently altered globally yes?
[18:18:55] <tokie> theseb: define works differently at the top level vs. inside a lambda
[18:19:08] <tokie> if you define in a lambda body, it creates a lexical binding
[18:19:49] <theseb> tokie: yea after a function invocation....the effects on the environment are rolled back!
[18:20:10] <theseb> tokie: what are other cases where env is unwound as you say?...e.g. (if cond a b) <--- will affects of evaluating cond on the env be rolled back after?
[18:20:17] <tokie> because the variables are lexically bound
[18:20:33] <theseb> tokie: sorry...not good w/ the jargon...what do you mean by lexically bound?
[18:20:52] <tokie> evaluating cond does not have effects on the global or lexical environment
[18:21:37] <tokie> the bodies in your cond could call set! on a variable, and if that variable is globably bound then it could change that binding
[18:22:01] <tokie> theseb: (lambxa (x) x) <-- here x is lexically bound. its binding was created because it is an argument 
[18:22:34] <sjamaan> theseb: This "rolling back" is an interesting way of thinking about how scope works, and it *might* work, but it wouldn't be very efficient and I'm not 100% convinced it would work
[18:22:37] <tokie> (lambda (x) (define y 10) (+ x y)) <--here x and y are lexically bound
[18:22:56] <tokie> yeah, i think the rolling back is just their attempt to mentally model lexical bindings
[18:23:51] <tokie> in particular if you're trying to reason about something like when a lexical binding shadows a global binding
[18:23:58] <sjamaan> yeah
[18:24:31] <tokie> for example, if you do something like: (define x 10) (lambda (x y) (+ x y)) <-- x is globally bound to 10, but then the x in the lambda body is shadowed by the lexically bound x for the lifetime of that lambda 
[18:24:36] <sjamaan> But if, say, a lambda introduces a completely new binding, it doesn't make much sense to model it as if it were added to the global environment
[18:24:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[18:24:56] <tokie> but it's not "rolling back" when the lambda is finished evaluating. it's just that it's a different binding
[18:25:44] <tokie> (define x 10) ((lambda (x y) (+ x y)) 20 20) 
[18:25:53] <tokie> there. a left left lambda is better to demonstrate
[18:26:25] <tokie> theseb: i hope that helped
[18:26:51] *** Joins: aeth (~aeth@user/aeth)
[18:33:45] <theseb> tokie: yes..still thinking
[18:34:44] <theseb> tokie: (lambda (x y) (set! z 4)) <--- z stays in global env (i.e. not lexically bound yes?)
[18:34:50] <tokie> yes
[18:35:10] <theseb> tokie: (if (set! z 5) a b) <---- z stays in global env here too?
[18:35:17] <tokie> the spec actually says that set! should only work if z is already bound globally, too, but i believe all major schemes don't honor that rule
[18:35:47] <sjamaan> theseb: "if" is not a binding form so it doesn't introduce any new bindings
[18:35:50] <tokie> theseb: using the result of set! as a predicate (i.e. in that position of if) is kinda unspecified
[18:36:10] <tokie> in most schemes set! evaluates to something like #<void> or #<unspecified>
[18:36:37] *** cross_ is now known as cross
[18:37:36] <theseb> tokie: but if a lisp has a set! that say returned the value the var was set to...(e.g. (set! x (set! z 5)) sets x to 5)
[18:38:07] <tokie> sure
[18:38:12] <tokie> i don't think most schemes do that
[18:38:42] <theseb> tokie: ok so for my weird lisp  (if (set! z 5) a b) would put z=5 in global env?
[18:38:49] <tokie> but if a scheme did do that, then your if still doesn't make sense because 5 is never #f
[18:38:52] <theseb> i think you already said yes
[18:38:57] <tokie> so the if always takes the first branch
[18:39:02] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[18:39:19] <theseb> right
[18:39:20] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[18:39:20] <theseb> thanks
[18:39:49] <sjamaan> tokie: You could do (set! z (read)) and it might return false or something else
[18:40:42] <theseb> tokie: going back to the whole "rolling back" discussion...is it safe to say function/lambda func invocations like (f a b c) are the only times this rolling back happens?
[18:40:57] <tokie> sjamaan: sure, but i don't quite feel this mental exercise is useful in thinking about lexical vs. global bindings
[18:41:05] <sjamaan> Agreed
[18:41:09] <tokie> theseb: i don't know what you mean by rolling back
[18:41:18] <theseb> if you wonder why i care..i'm implementing a little lisp in C....i need to know when i need to rollback the env obviously
[18:41:19] <tokie> a lexically bound variable is in a different environment than a globally bound one
[18:41:37] <theseb> tokie: rolling back = you added stuff to env...now you remove it
[18:41:45] <tokie> if you think about (lambda (x) x), think about the lambda -creating- an environment that has one variable bound called x
[18:41:51] <sjamaan> theseb: You don't want to introduce a new binding into some global environment just because some LET expression somewhere just happens to use that variable, once.
[18:42:23] <tokie> theseb: you're not adding stuff to a global environment, though. try to think of each lambda as having its own environments
[18:42:54] <tokie> these environments can chain, even, if you have something like an adder: (lambda (x) (lambda (y) (+ x y)))
[18:42:55] <sjamaan> theseb: A more practical way of thinking of this would be to have a chain of environments; if a variable isn't in the uppermost, look one down etc
[18:43:34] <tokie> in my example fn(x) is an environment that has one binding, x. And then fn(y) has an environment that has two bindings: x and y
[18:43:48] <tokie> y came from its own arguments, x is chained to its immediate outer function (the outer lambda)
[18:43:52] <theseb> yea..a chain of envs is another way of looking at it
[18:43:56] <theseb> perhaps even better
[18:44:14] <theseb> i was mentally picture a SINGLE env...hence i was forced to imagine adding and removing things 
[18:44:30] <theseb> but i think the results for both of our mental models is the same
[18:44:48] <tokie> if you think about each lambda having its own environment then you do not need to reason about "rollback"
[18:45:12] <sjamaan> theseb: Not exactly, when you consider closures your way needs somewhere to stash away the closed-over values and reinstate them when calling into the closure
[18:45:25] *** Joins: klovett (~klovett@107.127.17.177)
[18:45:35] <tokie> sjamaan: yeah, like the adder example i gave
[18:45:39] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:46:09] <sjamaan> Right
[18:46:58] *** Quits: silasfox (~sbv@p200300cec71adb000b1561d576288968.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[18:48:22] <theseb> tokie, sjamaan: chains of envs might be better for our mental models, but, imagine implementing env in C......my C env is just a stack of key value pairs.....it is really easy to add and remove stuff from the top......if i did what you all say and implemented "chains of envs"..well that gets more complicated in C no?
[18:48:45] <Franciman> \o tokie !
[18:48:57] <sjamaan> theseb: Ah a stack like that would work, I suppose
[18:49:00] <theseb> why do multiple stacks when i can just add and remove from 1?
[18:49:05] <theseb> sjamaan: thank you! 
[18:49:12] <theseb> sjamaan: i'm not crazy then
[18:49:31] <tokie> theseb: the stack idea breaks down in the adder example
[18:49:32] <theseb> i'm not so confident in my ideas so that vote of encouragement means a lot
[18:49:34] <sjamaan> For closures you'd need somewhere to store the local value bindings though
[18:49:42] <tokie> ^^ what sjamaan said
[18:49:48] <tokie> (lambda (x) (lambda (y) (+ x y)))
[18:49:52] <sjamaan> So on entry, it pushes the bindings on the stack and on exit it removes them, keeping aside the mutated value somewhere
[18:49:59] <tokie> ((lambda (x) (lambda (y) (+ x y))) 10)
[18:50:18] <tokie> ^^ this example returns an adder that's captured the value of x
[18:50:25] <tokie> which is bound to 10
[18:50:39] <sjamaan> tokie: It'd probably work if the stack was a binding to cell pointer or something like that, and mutating a binding just changes the value in the cell it points to
[18:50:41] <tokie> things get even more complicated if your scheme needs to support set!
[18:51:06] <sjamaan> That way you'd only need to encode closures to set up the stack display to match the local bindings
[18:51:22] <sjamaan> Wouldn't be too efficient if the nesting is deep, I think
[18:51:27] <tokie> sjamaan: you would have to have a pointer to a pointer so that set! works
[18:51:38] <tokie> which is just modeling a lexical environment at that point
[18:51:42] <sjamaan> Yeah
[18:52:09] <tokie> there's no escape from chaining environments if you want set! to work. if you're building a scheme where you do not allow mutation, then there's shortcuts that could be taken
[18:52:30] *** Joins: badkins (~badkins@136.56.92.199)
[18:52:39] <tokie> Franciman: heyyy!
[18:53:12] <tokie> Franciman: how's your scheme ?:P
[18:53:22] <Franciman> super stalled 
[18:53:24] <Franciman> due to exams :D
[18:53:53] <tokie> you're still having exams?!
[18:54:08] <Franciman> yes
[18:54:15] <tokie> i broke 10k lines of code on friday 
[18:54:19] <tokie> :x
[18:54:27] <Franciman> getting serious!
[18:54:49] <tokie> i also can no longer claim to be r5rs because i decided to implement unicode support from r7
[18:54:58] <tokie> because not supporting unicode was harder than just supporting it
[18:55:19] <theseb> sjamaan, tokie: ug..here's another problem....( (lambda a (set! b a)) 5 ).....i first push a=5 onto stack..then b=5 onto stack...later when i rollback...i remove a=5 (lexical) but NOT b=5 (global)!
[18:55:43] <tokie> theseb: globals need to not be on the stack
[18:55:50] <theseb> now i'm forced to remove stuff from the middle of the stack (a=5) instead of just the top (b=5)
[18:55:51] <theseb> sigh
[18:55:54] <sjamaan> theseb: You wouldn't push b = 5 on the stack, you'd look up b in the stack and change what it points to
[18:56:07] <sjamaan> set! mutates an existing binding, it doesn't introduce a new one
[18:56:11] <tokie> at compile time you can be certain whether or not something is global or lexically bound
[18:57:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[18:57:48] <tokie> you can do it at runtime but you'll need some kind of symbol lookup 
[18:59:08] <tokie> for example, given: (lambda (x) (lambda (y) (lambda (z) (+ x y z w)))) you can know that x y and z are lexically bound, and w is globally bound by scanning downward and adding the arguments to each lambda to running set of lexical bindings
[18:59:21] <theseb> tokie: i mean to say ( (lambda a (define b a)) 5 )
[18:59:50] <tokie> theseb: this is why schemes have almost always needed a heap
[18:59:51] <theseb> there i'd push the new var b onto stack yes? (in my way of doing things)
[19:00:13] <theseb> sjamaan: that was for you
[19:00:22] <tokie> theseb: http://www.cs.unc.edu/xcms/wpfiles/dissertations/dybvig.pdf
[19:01:00] <tokie> theseb: yes, b is a new lexical binding
[19:01:16] <tokie> but if you plan on supporting set! then none of this will work
[19:01:30] <theseb> tokie: i don't support set!, only define
[19:01:48] <tokie> the paper i linked explores some of these problems
[19:01:56] <tokie> especially if you want to support closures and call/cc
[19:01:57] <theseb> tokie: but even with define i'm forced to remove stuff from the middle of the stack (the lexical bindings) and keep the new global bindings like b
[19:02:10] <theseb> tokie: i avoid closures and call/cc..just doing the basics
[19:02:12] <tokie> theseb: you don't "remove", you just "shadow"
[19:02:32] <theseb> but even w/ the basics i'm seeing that i'm having issues since lexical bindings i need to remove won't always be at the top
[19:06:07] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[19:07:22] <tokie> if you had (define (foo x) (+ x y)) and (define (bar x y) (foo x)) where do you think foo's y comes from?
[19:09:19] <theseb> tokie: thinking...just a min
[19:12:49] <theseb> still thinking
[19:13:31] <theseb> tokie: when you tried to evaluate  (define (foo x) (+ x y)), the y would already have to be in the env somewhere
[19:13:36] <theseb> otherwise it would be an error
[19:13:45] <sham1> y would be in your global environment
[19:13:47] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[19:13:47] <theseb> yes
[19:13:54] <theseb> it would have to be otherwise error
[19:14:30] <sham1> If you want a relevant C analogue, think about `extern int y; int foo(int x){return x + y;}`
[19:14:50] <theseb> BUT!! i do recall some subtlety wherein with lexical scoping...function somehow "carry around the env they were defined in"
[19:14:54] <theseb> dunno if that applies here
[19:15:04] <theseb> sorry i mean lexical BINDING
[19:15:07] <sham1> Ah yes, the closure
[19:15:18] <theseb> what i just said is called a closure?
[19:15:21] <tokie> theseb: you said you don't care about closures but all we've been talking about is closures, so i was confused
[19:15:21] <sham1> It'd be relevant for something like the following
[19:15:22] <sham1> Yes
[19:15:55] <theseb> tokie: lol...sorry i don't know the jargon...is a "closure" what you call all that crap where functions "carry around the env they were defined in"?
[19:16:09] <theseb> if so oops sorry
[19:16:10] <tokie> if you're trying to implement a scheme you need to know the jargon
[19:16:12] <tokie> :p 
[19:16:31] <sham1> (define (f y) (lambda (x) (+ x y))), in this case the procedure returned by f carries around a value of y from when f was called
[19:16:47] <tokie> it's not just the value for y - also the binding
[19:16:52] <sham1> Instead of looking it up from the global environment
[19:16:54] <tokie> this is a subtle important point
[19:16:56] <sham1> Well yes
[19:17:26] <tokie> because set! in fn(x) on y will affect the binding of y in the outer function
[19:17:48] <theseb> tokie: as it turns out...function definitions were the next/last thing to tackle after doing envs
[19:17:50] <sham1> Could also mention how it is probably modelled with stuff like De Brujin indices but you might argue that that's a bit more advanced
[19:18:32] <sham1> De Bruijn*
[19:18:41] <tokie> (lambda (x) (lambda (y) (set! x 10) (+ x y)) <-- the set! of x affects the binding for x in both lambdas
[19:19:19] <sham1> It becomes relevant if one had multiple ways of seeing that side-effect
[19:19:24] <tokie> yes
[19:19:29] <tokie> i have a unit test for that somewhere i think ...
[19:20:32] <tokie> oops, maybe i don't. scary
[19:21:53] <theseb> tokie: to answer your question about closures...presumably i would implement user defined functions (closures) as some big data structure that would include that extra bit of env it needs to carry around....and just push that whole blob onto my env stack
[19:22:42] <tokie> theseb: are you trying to avoid a heap?
[19:24:46] <theseb> tokie: the heap is what holds my env stack
[19:24:51] <tokie> gotcha
[19:25:07] <sham1> Maybe another C analogue might be helpful: `struct <some unique name for the closure>{ int (*f)(struct <unique name> *c, int x); int y; }; int inner_func_impl(struct <closure> *c, int x) { return x + c->y; } struct <you get the point> f(int y) { return { .f = &inner_func_impl, .y = y,}; }`
[19:25:29] <sham1> That's basically how one would translate the Scheme procedure I posted above into C
[19:25:44] <mdhughes> https://blog.racket-lang.org/2022/02/racket-v8-4.html in particular the first item!
[19:26:05] <sham1> Interesting
[19:26:24] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[19:26:25] <sham1> I don't know much about Chez's expression editing, but I would imagine it being neat
[19:27:03] <tokie> i feel like i don't heve chezscheme setup properly 
[19:27:07] <tokie> lol
[19:27:32] *** Joins: amk (~amk@109.255.169.126)
[19:30:04] <tokie> theseb: why C?
[19:30:09] <tokie> just curious
[19:31:10] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[19:34:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[19:35:45] *** Joins: aeth (~aeth@user/aeth)
[19:36:59] <mdhughes> It has the best REPL editor of any Scheme, really worth working with. https://cisco.github.io/ChezScheme/csug9.5/use.html#./use:h2
[19:37:30] <theseb> tokie: i have already implemented lisp in python!
[19:38:15] <tokie> i think you should do the next one in haskell
[19:38:21] <tokie> or zig
[19:38:27] <jcowan> mdhughes: For Kotlin.   It is now Google's preferred language on Android. 
[19:38:28] <theseb> tokie: I'm implementing something I call PyLayers...that show all these layers python subset -> abstract syntax tree -> lisp (intermediate representation) -> assembly -> machine code
[19:38:33] <jcowan> https://developer.android.com/kotlin/first
[19:39:02] <tokie> jcowan: oh, that's interesting
[19:39:16] <mdhughes> Oh, another reason to avoid Kotlin! Tho I suppose it improves quality of Android programs, which they desperately need.
[19:39:34] <theseb> tokie: i have all those steps (layers) done...my ONLY remaining one is the lisp -> assembly.....i figured before i implement lisp in assembly i should make sure I can do C!
[19:39:38] <tokie> i wrote a project at work years ago in early kotlin and i really disliked the language
[19:39:40] <theseb> tokie: so C isn't even my last target!
[19:39:52] <theseb> tokie: it is just a warm up for the hell of asm coming next!
[19:40:34] <tokie> theseb: https://queue.acm.org/detail.cfm?id=3212479
[19:40:37] <mdhughes> I'm surprised G hasn't bought JetBrains and made that unusable before shutting it down, as they do.
[19:41:27] <tokie> i haven't worked at google, but i heard they have very poweful web based IDEs internally
[19:41:34] <tokie> so they probably have no reason to want jetbrains
[19:41:49] <jcowan> That's as may be, but it defimitely undercuts your previous argument against Kotlin ("three Russians on an island in the Neva", or whatever)
[19:41:58] *** Noisytoot_ is now known as Noisytoot
[19:43:06] <mdhughes> Well, they *haven't* been bought, so it's still 3 Russians.
[19:43:51] <mdhughes> They actually have more than that; a Russian nerdling I know is at a school basically funded by JetBrains and used as an onboarding funnel.
[19:44:36] <theseb> tokie: if google has awesome web IDEs we don't know about...i'm surprised they haven't open sourced them
[19:44:59] <theseb> tokie: google has done that before...e.g. tensorflow.....they are smart enough to know open sourcing brings free dev help
[19:45:14] <theseb> and bug reports and community goodwill and ...
[19:45:23] <theseb> plus they'd get to compete w/ M$ VSCode
[19:45:23] <tokie> theseb: google has a ton of stuff they don't opensource because it's so entangled internally
[19:45:27] <theseb> so what the hell!?
[19:45:48] <theseb> tokie: i *really* want a real open source competitor to VSCode from google
[19:45:51] <tokie> i think their IDE stuff is entangled around their build infrastructure
[19:46:00] <tokie> so when you're writing code it's compiling on huge build farms
[19:46:10] *** Joins: epony (~epony@user/epony)
[19:46:11] <mdhughes> You don't need an IDE, just an editor and a shell to run builds from.
[19:46:30] <tokie> mdhughes: editors are all IDEs these days - even vim
[19:46:46] <mdhughes> They are not. You don't have to install a bunch of junk addons to vim.
[19:46:57] <tokie> vim has language server support builtin now
[19:47:08] *** Joins: daviid` (~user@179.210.52.91)
[19:47:09] <sham1> No it doesn't. Neovim does, however
[19:47:30] <mdhughes> Are you telling me we live in a fallen world full of horrible intrusive tech? Yes, I already knew that. Nevertheless, you can work without that nonsense.
[19:48:01] <tokie> i think writing kotlin in vim is a disaster
[19:48:10] <tokie> if i were writing kotlin professionally i would use intellij
[19:48:16] <tokie> if i'm writing C then vim is great
[19:48:22] <tokie> so i really think it depends what you're doing
[19:48:57] <mdhughes> But writing Kotlin's already a disaster, as we've established. Just less of one than Java. Maybe.
[19:48:58] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 260 seconds)
[19:49:44] <theseb> tokie: your link on C is important if i was implementing my stuff on a real cpu...i actually also am simulating a simple virtual cpu with an emulator! ;)
[19:50:16] <theseb> tokie: the point of your article i think is that today's cpus are so much more horrendously complex than we often imagine
[19:52:29] <tokie> theseb: yes, and i think people built up models how their C programs compile from working in C decades ago and that's not really true anymore
[19:54:13] *** Quits: nalaginrut (~nalaginru@14.20.89.6) (Ping timeout: 256 seconds)
[19:59:55] <sham1> tokie: that paper is a fan favourite in #c. A lot of disagreement and such
[20:00:55] *** Joins: aeth_ (~aeth@user/aeth)
[20:01:15] <tokie> sham1: i bet, lol
[20:01:39] <tokie> i'm a professional C/C++ programmer turned rust, so they probably do not like me either
[20:02:13] <tokie> mostly C++ professionally - i haven't written C seriously since around 2002-2003 i think 
[20:02:39] *** Quits: yhsiveht (~Nishant@2405:201:f005:c007:51b9:2550:9b70:b031) (Quit: Leaving)
[20:02:41] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[20:02:46] *** aeth_ is now known as aeth
[20:04:14] <theseb> tokie: how should we react to the info in your link?  should we all just give up trying to have a mental model of the cpu? is that the lesson?
[20:04:37] <sham1> Relevant counter-link: https://www.yodaiken.com/2021/05/21/your-computer-is-a-fast-pdp-11-and-more-on-c-the-c-standard-and-computer-architecture/
[20:04:38] <rudybot> https://teensy.info/VopLjohumP
[20:04:42] <Franciman> mental models are useful, but when measurements don't coincide. Just remember that it's a mental model
[20:04:44] <tokie> theseb: i think it's more just a mental exercise than a lesson
[20:04:49] <theseb> tokie: just imagine cpus as these black boxes
[20:04:53] <Franciman> and it requires adjustment
[20:05:12] <tokie> theseb: i think one of the lessons is to stop saying "i write C because it's the closest to the machine"
[20:05:19] <tokie> because that's arguably not true anymore
[20:05:28] <tokie> particularly with modern compilers that don't really care what you write
[20:06:09] <theseb> tokie: is one of your points..if you want to write the fastest code possible...(e.g. operating systems, graphics, games, etc.) you don't need to write in C/C++ anymore?
[20:06:21] <theseb> because compilers are THAT good now?
[20:06:26] <tokie> i had this friend that wrote a scheme compiler in C and they worked -really- hard to write a jmp table for their VM loop that was highly optimized, and as it turns out modern gcc or llvm probably would have just done that for them anyway
[20:06:47] <sham1> I don't think we're quite at Sufficiently Smart Compiler™ yet, but it is indeed the case that one can get good performance even without C
[20:07:02] <tokie> theseb: no, more that even a C compiler is smarter than you now and what you're writing in C no longer directly translates to what you think you're writing
[20:07:16] <tokie> at least not like it did in the 90s
[20:07:41] <sham1> Except with SIMD, but that's a problem with all languages it seems, unless it's some weird array language like APL, J, K, or stuff like Futhark
[20:07:45] <tokie> sham1: well, sure, and something like C++, rust and zig can all compare to C
[20:07:45] <Zipheir_> "Trying to outsmart a compiler removes most of the point of using one."
[20:07:54] *** Zipheir_ is now known as Zipheir
[20:08:00] <tokie> Zipheir_: yeah, that's what i was trying to say in less words
[20:08:29] <Zipheir> Ah, sorry for being so verbose.  I'll try to keep further quotes under five words. :)
[20:08:32] <theseb> tokie: so therefore i presume we should either...1. write C w/o trying to optimize so hard...or 2. write in something like Go that doesn't try to have pointers and gotos?
[20:08:41] <tokie> hell, even chezscheme is crazy with what it does with optimizations :p 
[20:08:50] <sham1> Until you show it set!
[20:09:16] <sham1> Whence it can no longer prove certain things and have it fall back on boxing which is SLOW in comparison
[20:09:41] <tokie> theseb: no, i think the takeaway from the article is to just not think of C as being "close to the machine" anymore. it's just an abstraction now
[20:10:37] <tokie> this is #scheme, though :p 
[20:11:00] <sham1> Always has been, is the thing, but even then the ACM article has some problems and misinformation. But yeah, this is #scheme. I suggest coming to #c if one wants to know more
[20:11:24] <Zipheir> I think it's a good idea to dispense with the "how close to the machine?" model of languages.
[20:11:43] <tokie> yeah, i think that's what the article was suggesting
[20:12:19] <sham1> I feel that this idea of a language being "high level vs low level" is like the whole idea that a language is fundamentally interpreted vs compiled
[20:12:30] <sham1> Which is hogwash as far as I am concerned
[20:12:36] <Zipheir> Granted that there's a big difference between memory management strategies, but that can give the illusion that a language like C is "just a thin layer" over ASM, or some such.
[20:13:37] <Zipheir> (Although "a thin layer" may well have been what ken & dmr intended C to be!  But that was long ago.)
[20:14:51] <tokie> yeah, memory models and concurrency twist things around too
[20:15:39] *** Joins: nalaginrut (~nalaginru@14.20.89.6)
[20:16:49] <theseb> tokie: ok brining it back to scheme...could someone write a scheme compiler that was so good that folks would start doing performance critical apps in int?
[20:16:56] <theseb> it? *
[20:17:08] <sham1> Yes. But it would be difficult
[20:17:17] <theseb> so we can't bury C yet then?
[20:17:33] <sham1> I mean, making C performant is also difficult
[20:17:35] <tokie> theseb: there are alternatives to C that perform as well as C
[20:18:21] <tokie> there's more choices today than ever, really
[20:18:23] <Zipheir> theseb: There have been Scheme compilers that produced faster code than the Pascal compilers of their day, if certain people are to be believed.
[20:19:00] <tokie> that sounds like early chezscheme vs. pascal/algol60?
[20:19:03] <Zipheir> theseb: And people have written operating systems in logic programming languages.  So this "fast language vs. slow language" thing has got to go.
[20:19:14] *** Joins: badkins (~badkins@136.56.92.199)
[20:19:24] <Zipheir> tokie: T, actually, one of the earliest Scheme compilers after RABBIT.
[20:19:29] <tokie> ahh
[20:19:54] <Zipheir> tokie: This is a really fun read http://www.paulgraham.com/thist.html
[20:20:13] <tokie> kent's 3 models of scheme paper really helped me with writing my scheme, and he referenced pascal and algol60 a lot 
[20:21:19] <Zipheir> tokie: Yes, that's a good paper.
[20:22:23] <tokie> there's an optimization in the paper where you can keep values directly on the stack if you can ensure they'll never be set! and i haven't yet implemented that
[20:22:57] <Zipheir> theseb: It's possible that part of the issue is that compiler writing isn't happening as much as it used to, and because the major C compilers use *so many* optimizations.
[20:23:01] *** daviid` is now known as daviid
[20:23:16] <sham1> tokie: sounds like unboxing
[20:23:21] <tokie> sham1: exactly
[20:23:43] <Zipheir> This is probably why Olin rails against set! in his SRFIs...
[20:24:31] <sham1> set! is the devil as far as performance is concerned
[20:26:52] <Zipheir> The discussion of GC techniques in "History of T" is also very interesting.
[20:27:12] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[20:27:25] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:28:43] <Zipheir> Though possibly totally irrelevant now.
[20:36:08] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[20:37:24] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[20:39:52] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[20:40:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:44:56] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[20:45:26] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[20:45:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:46:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:51:40] *** Quits: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[21:06:40] *** Joins: Everything (~Everythin@37.115.210.35)
[21:16:11] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[21:16:17] <tatsumaru> hey yall, what's up
[21:21:22] <Zipheir> Hi tatsumaru.
[21:21:50] *** Quits: nalaginrut (~nalaginru@14.20.89.6) (Ping timeout: 260 seconds)
[21:23:01] <tatsumaru> may i ask what is the main difference between a lisp and a scheme? i know scheme is a lisp, but not all lisps are schemes so I am wondering
[21:24:22] <Zipheir> Historically, the big change was from dynamic to lexical binding.  But CL has lexical binding, too, so that's not the classifier it used to be.
[21:24:47] <Zipheir> Probably the biggest distinction is Lisp-1 (Scheme, Racket) vs. Lisp-2 (CL and the rest)
[21:25:02] <gwatt> Is clojure a lisp 2?
[21:25:11] <Zipheir> Not sure.
[21:25:24] <dpk> given that CL came out in 1986, it was only ever distinctive for about ten years :P
[21:25:43] <jao> clojure is a lisp 1
[21:26:09] <gwatt> Every once in a while you hear about a company using common lisp. I think grammarly popped up recently. 
[21:26:38] <tatsumaru> Zipheir: what's the main difference between lisp-1 and lisp-2?
[21:27:00] <ski> functions/procedures vs. other values being in one or two namespaces
[21:27:21] <ski> (or, more accurately, the identifiers bound to them)
[21:27:24] <Zipheir> tatsumaru: In a nutshell, Lisp-2s treat function values as true functions.
[21:27:30] <Zipheir> SORRY. Lisp-1s.
[21:27:33] <sham1> Iirc Clojure is somewhere in between Lisp-1 and 2, although leaning towards lisp-1
[21:28:04] <gwatt> in a lisp-1, all identifiers exist in the same namespace and can shadow each other. In a lisp-2, identifiers for different things (variables, functions, classes, packages, etc) exist in different namespaces and which one is selected depends on usage context
[21:28:12] <Zipheir> tatsumaru: So, in Scheme you can (let ((f (lambda (x) (* x x)))) (f 2)), whereas in CL you'd need a funcall.
[21:29:02] <ski>   (defun dupleton (list) (list list list))  ; you can write this, in CL
[21:29:10] <sham1> Needing to use funcall makes things like higher-order functions look more out of place in CL
[21:29:22] <Zipheir> Oh yes, you also need defun.
[21:29:32] <sham1> Although as said, it allows for that
[21:29:37] <sham1> So it's tradeoffs
[21:30:18] <sham1> There's defun, flet, labels and such, which correspond to just let and letrec
[21:30:30] <sham1> Well, define, let and letrec
[21:31:04] <ski> (CL has `let' too, of course)
[21:31:15] <tatsumaru> gwatt what is shadow
[21:31:37] <sham1> Yes, but unlike Scheme let, one can't use the identifiers for functions, instead needing flet for it
[21:32:07] <ski> rudybot: eval (let ((x 3)) (list x (let ((x (* x x))) x) x))  ; shadowing
[21:32:08] <rudybot> ski: ; Value: '(3 9 3)
[21:32:10] <gwatt> tatsumaru: shadowing is where you have two identifiers that are the same. One of them "shadows" the other, meaning that the shadowing one is picked according to scoping rules
[21:33:03] <tatsumaru> i see, thanks
[21:33:12] <Zipheir> tatsumaru: Also, Scheme insists on tail-call optimization.  Most other Lisps do not.
[21:33:19] <Zipheir> (Although they often provide it.)
[21:33:27] <ski> s/tail-call optimization/proper tail recursion/
[21:33:34] <Zipheir> Whatever.
[21:33:49] <ski> not the same thing. Chicken doesn't do TCO, e.g.
[21:34:02] <Zipheir> tatsumaru: Hence Scheme was one of the first languages to not have looping constructs.
[21:34:06] *** Joins: nalaginrut (~nalaginru@121.35.189.213)
[21:34:12] <Zipheir> (Before `do` was added, at least.)
[21:34:23] <Zipheir> ski: I guess that makes sense, now.
[21:34:34] <gwatt> ski: so what happens when you hvae recursive behavior at runtime that you can't determine statically?
[21:35:08] <ski> "proper tail recursion" is also somewhat of a misnomer, since it doesn't, per se, have to do with recursion (specifically)
[21:35:14] <tatsumaru> in clojure loop only binds a name to a value where the iteration happens through 'recur'
[21:35:25] <ski> gwatt : you simply don't try to determine recursive behaviour
[21:35:35] <jcowan> `do` is meant for looping, but it is still recursive, unlike CL `do`, which is truly iterative.
[21:35:39] <tatsumaru> is that still considered a looping construct
[21:35:39] <Zipheir> tatsumaru: Clojure is very close to Scheme in many ways.
[21:35:49] <ski> (or, you can do that, as an optimization, sure. but plain "proper tail recursion" doesn't require you to)
[21:35:59] <Zipheir> tatsumaru: It's all (tail-)recursion at heart, in Scheme-like languages.
[21:36:31] <ski> tail-recursion *is* looping/iteration, yes
[21:37:25] <tatsumaru> so what is the main benefit of lisp-2 over lisp-1
[21:37:25] <ski> gwatt : "proper tail recursion" means that the implementation supports an unbounded number of procedure activations, in bounded space. how it decides to satisfy that spec is up to it. TCO is a common choice, but not the only one
[21:37:56] <sham1> If the procedure activations happen at tail positions
[21:38:49] <Zipheir> tatsumaru: Not much, in my biased opinion.
[21:39:21] <tatsumaru> is lisp-1 or lisp-2 closer to McCarthy's vision?
[21:39:21] <ski> (Chicken compiles to Continuation-Passing-Style C functions, that *never* returns. when the stack is full, a GC runs on it, compacting it, treating it like a heap. one could also just heap-allocate the activation frames (without relying on a C implementation using a C stack), and GC as usual (except when capturing continuations))
[21:39:43] <Zipheir> The two namespaces seems totally historical to me, and it makes a functional programming style harder to do in Lisp 2s.
[21:39:53] <Zipheir> *two namespaces design
[21:40:24] <ski> sham1 : sorry, yes. s/procedure activations/tail procedure activations/
[21:42:01] <sham1> One can also go the opposite way, using the platform stack as the holder of activation records
[21:42:16] <sham1> And then running GC with that, maybe with a stack map to help find all the pointers
[21:43:26] <gwatt> hmm, csi doesn't do proper tail recursion whereas csc does. that's annoying
[21:44:01] <ski> "CONS Should Not CONS Its Arguments, Part II: Cheney on the M.T.A." by Henry G. Baker in 1994 at <https://plover.com/~mjd/misc/hbaker-archive/CheneyMTA.html>
[21:48:30] <tatsumaru> Has Prof. Steele ever come to this channel?
[21:49:04] <ski> not that i can recall ..
[21:49:32] <sham1> Speaking of GC, I want to pick y'all's brains again. So, threads. Threads are awesome. Less awesome is designing a sheme (heh) for parallel memory management. Basically, should threads share a heap or should every thread have its own heap. The former makes it easy to share data between threads, while requiring locks and such to do allocation, and also for synchronisation for doing GC, even if with stuff like R/W barriers. Meanwhile per-thread heaps 
[21:49:32] <sham1> are nice because no need for sync, but the downside is that it makes sharing data a lot more difficult
[21:50:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:50:52] <sham1> SRFI 18 for example doesn't seem at a first glance give memory sharing primitives like channels, because it's a low-level threading system
[21:51:16] <jcowan> tatsumaru: "looping construct" is pretty well defined in most languages (including CL), but in Scheme `do` and named-let do not imply imperative execution.
[21:51:38] <Zipheir> "iterative"?
[21:52:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:52:22] <jcowan> sham1: I'm proposing a Go-style channel system (already present in Chicken Scheme)
[21:52:37] <jcowan> there are also proposals for CML-style channels
[21:52:57] <sham1> Mmm, that would allow for per-thread heaps because of course when sending data over the channel, you could just copy the data
[21:53:00] <ski> the looping variables are fresh, each round around the loop. they are not mutated to get to the next step
[21:53:51] <jcowan> Zipheir: That too, but the immediate difference between CL and Scheme `do` is that in CL the iteration variables are assigned new values, whereas in Scheme they are bound to new variables (with new values)
[21:54:50] <jcowan> Terminology in Scheme doesn't quite align with terminology elsewhere: meanings can overlap.
[21:56:38] <Zipheir> jcowan: Aha, yes.
[21:57:12] <Zipheir> Not requiring assignment when iterating seems like a Good Thing to me.
[21:57:28] <aeth> if someone wants to check logs of this or one of the CL channels, there's a specific test case to construct a DO that behaves differently in CL and Scheme
[21:57:38] <aeth> the way you have to do it is create a closure
[21:58:00] <sham1> Yeah, and if the implementation can prove stuff about escaping and such, it can just make the iterating based on assignment
[21:58:04] <sham1> Everyone wins!
[21:58:18] <aeth> iirc, this one... (do ((i 0 (+ 1 i)) (l '() (cons (lambda () i) l))) ((>= i 10) l))
[21:58:47] <aeth> in Scheme, that should be 0 to 9, in CL that should be 10 (because it sets and then stops) which never was even a valid value
[21:59:15] <aeth> e.g. in Racket, ((car (do ((i 0 (+ 1 i)) (l '() (cons (lambda () i) l))) ((>= i 10) l)))) => 9
[21:59:27] <aeth> in CL, (funcall (car (do ((i 0 (+ 1 i)) (l '() (cons (lambda () i) l))) ((>= i 10) l)))) => 10
[21:59:47] <aeth> (the order's reversed so it should be 9 8 7 6 5 4 3 2 1 0 in Racket)
[22:01:06] <aeth> everything can be written bilingual except CL requiring the funcall instead of trying to evaluate a potential lambda in the first position automatically
[22:02:24] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:02:51] <sham1> A great demonstration of Lisp-1 Vs Lisp-2 and why things like higher-order functions are more "weird" in lisp-2s like CL
[22:03:10] <aeth> I mean ((...)) to call a lambda implicitly is weird, too
[22:03:25] <aeth> Lisp-2 isn't as inferior here as it is when it's bound instead of anonymous
[22:03:28] <sham1> Could always do apply
[22:03:54] <sham1> Yeah, not talking down on CL, in fact the opposite. It's just something that guides the idioms in these languages
[22:06:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:07:09] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:08:23] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Remote host closed the connection)
[22:08:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:08:58] *** Joins: mdhughes (mdhughes@user/mdhughes)
[22:14:55] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:15:50] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[22:17:40] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:9fb7:fcaa:76f6:5cca) (Quit: Client closed)
[22:20:10] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[22:21:16] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:21:24] *** Joins: topoi (~topoi@user/topoi)
[22:27:27] <jcowan> It's a bad assumption that assignment is less efficient than rebinding, especially if the GC requires a write barrier.
[22:33:13] <ski> (less or more ?)
[22:33:43] <jcowan> s/less/more
[22:33:50] <jcowan> thanks
[22:34:02] <Zipheir> #scheme had a morning's-worth of conversation about faulty efficiency assumptions...
[22:34:45] <Zipheir> Well, "morning" for some.
[22:34:55] <gwatt> set! can also require allocations that wouldn't be necessary without re-assignment.
[22:34:58] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[22:38:22] <sham1> I suppose that the efficiency could come from things like actually unboxing values when it can be proven to be the correct thing. Of course it's mostly about numeric code in that case, but still
[22:39:58] <Zipheir> Some kind of special iteration form with only unboxed numeric state variables could make sense, I guess.
[22:40:47] <Zipheir> That's the kind of thing that's unnecessary if the type information is available, though.
[22:42:45] <jcowan> Which can typically be inferred when dealing with numbers.
[22:43:00] <sham1> And if not, can be mitigated with gradual typing
[22:43:21] <Zipheir> True.
[22:43:47] <Zipheir> Gradually-typed Scheme is a good idea in general.
[22:43:55] <jcowan> The trouble with gradual typing as a mitigation is that you are constantly type checking as you go in and out of untyped code.
[22:44:14] <dpk> the fun thing with Scheme compilers is, most of them will turn a variable that gets set! into an inefficient box, quite possibly on the heap, while rebinding the same variable in a loop gets a simple assignment on the stack or possibly even in registers
[22:44:58] <sham1> Even though they could try to also prove that if it doesn't escape, it needn't be boxed
[22:44:58] <Zipheir> jcowan: Unfortunately true, at least in all of the models I've read about.
[22:45:19] <Zipheir> jcowan: The idea seems to be that you gradually (hah) eliminate all the "untyped" terms.
[22:45:40] <dpk> sham1: i suspect it would still be ‘boxed’ (i.e. an extra level of indirection), just the box would be on the stack instead
[22:45:57] <Zipheir> Or all the untyped terms in hot corners, at least.
[22:46:08] <sham1> Maybe, but it could still be solved if the compiler was sufficiently smart about it
[22:46:17] <sham1> At least for a lot of the cases
[22:46:25] <jcowan> in Harlan (a PL I made up) types are mandatory on function/command parameters and structure fields, from which everything else can be reliably inferred.
[22:46:27] <dpk> meh. two pointer dereferences instead of one, what's the biggie
[22:46:57] <jcowan> Pointer dereferences are the big cost on modern CPUs.
[22:47:14] <jcowan> so you are saying "double the cost, what's the big deal"
[22:47:15] <sham1> Mmm, cache locality is important, and keeping as much in the registers even more so
[22:47:49] <sham1> And the more that can be done, the better
[22:48:35] <gwatt> jcowan: harlan was a gpu compiler eholk started: https://github.com/eholk/harlan
[22:48:40] <gwatt> based on scheme
[22:49:18] <jcowan> yes.  MyHarlan is unrelated to Scheme
[22:49:49] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:58:25] <mdhughes> In my fictional language, Ellison, everything is an integer or pointer into a memory buffer allocated with the program. No growable memory. The two types are interconvertible, so you can just point at part of an array. Oh wait I've reinvented C/BCPL.
[22:59:16] *** Joins: aeth_ (~aeth@user/aeth)
[22:59:22] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[22:59:24] *** aeth_ is now known as aeth
[23:00:15] <mdhughes> With enough enthusiasm for integer/pointers, you can make a language that no type-fetishist can sully.
[23:01:04] <dieggsy> can you create a circular list without using set! in scheme ? 
[23:01:15] <dieggsy> er, functionally create a circular list that is
[23:01:19] <dieggsy> i think i'm having brain block lol
[23:01:43] <gwatt> dieggsy: set! is different from set-cdr!
[23:02:17] <Zipheir> Very different.
[23:02:26] <dieggsy> gwatt: er, that's what i meant, been a second. I just mean creating a circular list  without actually mutating a list
[23:07:19] <karlosz> dieggsy: delay, force, letrec
[23:10:18] <Zipheir> Streams.
[23:10:18] <jcowan> In R7RS there is lexical syntax for constructing an immutable circular list: '=#1==(1 2 3 . #1#)
[23:10:48] <jcowan> s/==/=
[23:11:23] <jcowan> Some R5RS Schemes also allow this, and some may allow mutability.
[23:11:31] <sham1> SRFI 1 has a procedure
[23:11:42] <sham1> Whether it mutates is an implementation detail
[23:12:42] <sham1> Doesn't help if you're actually implementing that procedure yourself, of course
[23:13:33] <gwatt> of course, the graph syntax can be used for more than circular lists whereas (circular-list x ...) is only for circular lists
[23:15:09] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[23:16:09] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:22:35] <jcowan> I kinda regret that a random object is not treated by SRFI 1 as an improper list, per Olin's original design.
[23:22:37] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[23:23:03] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 250 seconds)
[23:24:07] <sham1> WDYM by a random object? That an object that isn't a proper or  cyclic list would result in improper-list? => #t?
[23:24:51] <jcowan> yes
[23:25:11] <jcowan> that makes the 3 functions define a trichotomy
[23:26:33] <jcowan> so since (improper-list? '(1 2 3 . 4) => #t, (improper-list (cdddr '(1 2 3 . 4)) => #t likewise
[23:26:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:26:54] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:28:57] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[23:29:15] <gwatt> looking at srfi-1, it seems like that definition still holds true in the document
[23:41:03] <dpk> yeah, that's the definition i applied in stx-improper-list? in syntax-case-extensions.md
[23:41:49] <dpk> *stx-dotted-list?
[23:42:01] <dpk> indeed, Chibi says (dotted-list? 'x) => #t, which i likewise consider correct
[23:42:39] <sham1> But that's not a dotted list
[23:43:14] <sham1> Like clearly. It makes the property of being an invalid list permiate through almost every type and every value of Scheme
[23:43:23] <dpk> yes, and? ;-)
[23:43:28] <sham1> Which I guess is fine, but is also odd IMO
[23:43:47] <dpk> the inverse would be odder, formally
[23:44:04] <sham1> I suppose
[23:45:50] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[23:46:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:47:33] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:49:03] <Zipheir> Just get rid of improper lists and make . special lambda syntax.
[23:49:09] <Zipheir> (Ha ha, only serious.)
[23:50:01] <sham1> (cons 'a (cons 'b (cons 'c 'd)))
[23:50:07] <sham1> I mean…
[23:50:29] <sham1> Although there is an argument to be had that one doesn't really use improper lists that often
[23:51:32] <aeth> alists?
[23:51:45] <aeth> all of the time in Scheme. Less common in Lisps with plists
[23:51:55] <aeth> you can do alists with an extra cons pair, ofc
[23:52:20] <Zipheir> The main use of . is for macros, pattern-matching, and lambda.  But that's all consistent with cons requiring its second argument to be a pair or null.
[23:52:37] <Zipheir> And yes, alists.
[23:52:42] <sham1> …honestly, I forgot alists
[23:52:54] <aeth> I personally prefer things like records
[23:53:03] <aeth> Zipheir: you also need a way to print improper lists even if you didn't intend to make them
[23:53:29] <Zipheir> sham1: Alists are good for 'describing' dictionary structures, e.g. in alist->mapping, alist->hash-table, etc.
[23:53:31] <sham1> Yeah, and if I need an association, I just use a hash map, much to the chagrin of Zipheir no doubt
[23:53:47] <Zipheir> aeth: True.
[23:54:14] <Zipheir> sham1: Oh, I'd *never* recommend alists as a serious dictionary structure!
[23:54:26] <sham1> We need to just formalize (λ (a b) (+ a b))
[23:54:53] <dpk> Zipheir: why special lambda syntax? borrow DSSSL's #!rest
[23:55:13] <Zipheir> dpk: Good point.  So no need for . at all, then.
[23:55:19] <dpk> and #!key as well, if you're feeling frisky
[23:55:29] <sham1> &rest, &key
[23:55:33] <dpk> (DSSSL forbade dotted lambda lists entirely)
[23:55:38] <aeth> need to modify the members? hash table. don't need to modify the members? record... alists are niche.
[23:55:42] <aeth> imo, anyway
[23:55:45] <Zipheir> (x #!rest xs) isn't as nice as (x . xs) or (x : xs), though.
[23:55:56] <aeth> (sorry, modify the keys, I guess)
[23:56:18] <Zipheir> Or one of the many mapping options if you have a large/variable number of elements.
[23:56:34] <sham1> Yeah, I've warmed up to using alists for representing things like deserialized JSON objects
[23:56:48] <dpk> aeth: i became a GNU Emacs user after XEmacs had already bit the dust (perchance it is not dead, but sleepeth?), but i recently learned that XEmacs had proper types for things and did not just abuse alists and vectors for everything and already i regret its demise
[23:56:50] <sham1> They can just be made into more reasonable data structures for actual processing
[23:57:26] <sham1> Like hash tables! Or I suppose RB trees
[23:58:41] <sham1> Wouldn't mind trying to experience xemacs one of these days, but I'd have to manually compile it and that just sounds like effort
