[00:00:51] *** Quits: cyrus_mc (~cyrus_mc@c-98-232-162-73.hsd1.or.comcast.net) (Quit: Connection closed)
[00:03:52] *** Quits: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com) (Remote host closed the connection)
[00:05:17] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[00:10:31] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:11:42] *** Quits: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net) (Remote host closed the connection)
[00:14:14] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[00:21:54] *** Parts: JosefHolzmayrThe (~theyoctoj@2001:470:69fc:105::e785) ()
[00:24:16] *** Joins: danmurf (uid480399@user/danmurf)
[00:25:42] *** Quits: rendar_ (~rendar@user/rendar) (Quit: Leaving)
[00:29:18] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[00:29:34] *** Joins: jla (~jordi@64.225.79.195)
[00:30:14] *** Joins: bancroft (~bancroft@142.162.53.67)
[00:34:26] *** Joins: phoenixh (~phoenixh@p200300dd6f194500e8c39111a660c6c7.dip0.t-ipconnect.de)
[00:35:38] <bancroft> i'm teaching myself go by trying to write a prometheus metric exporter but now I'm stuck. I don't understand how to get the vector https://go.dev/play/p/I7eZFnsrtMk basically i'm trying to create a dumb systemd service to give me output like this: https://bpa.st/QEEQ
[00:36:01] <bancroft> can someone help?
[00:36:30] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 260 seconds)
[00:38:06] <b0nn> bancroft: your example code isn't clear on what you are trying to achieve
[00:38:12] *** Joins: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea)
[00:38:41] <b0nn> I presume, for example, that the 'vector' you are trying to obtain is 'testingGaugeVec'?
[00:44:47] *** Quits: zer0bitz (~zer0bitz@185.112.82.230) (Read error: Connection reset by peer)
[00:49:07] *** Quits: tyson2 (~user@cpe9050cac49283-cm9050cac49280.cpe.net.fido.ca) (Remote host closed the connection)
[00:52:22] *** Joins: noarb (~noarb@user/noarb)
[00:54:15] *** Quits: arinov_ (~arinov@178.240.175.124) (Ping timeout: 268 seconds)
[01:02:41] <bancroft> b0nn: that would be exactly right
[01:07:34] <bancroft> I know that if I do factory.NewCounter(prometheus.CounterOpts{ ... I can create a counter but it would create a metric like `systemd_process_cpu_seconds_total=941` and not `systemd_process_cpu_seconds_total{a specific service}=419`
[01:07:56] <bancroft> well name="aspecificservice"
[01:08:20] <bancroft> I'm really justrying to recreate soemthing that exists
[01:08:42] <bancroft> in this case, the systemd exporter
[01:10:38] <bancroft> maybe I should just look at the source code for the systemd exporter then
[01:17:34] *** Quits: zwr (~zwr@2804:d45:b966:fb00:393a:ffee:2e04:d088) (Ping timeout: 260 seconds)
[01:18:22] *** Joins: zwr (~zwr@2804:d45:b966:fb00:9a15:fa56:81f7:4afc)
[01:22:34] *** Joins: lilgopher (~textual@2601:241:8000:38f0:c5e8:6dd:df4e:31d6)
[01:26:47] *** Joins: arinov_ (~arinov@213.194.126.155)
[01:28:56] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:36:30] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[01:39:12] *** Quits: phoenixh (~phoenixh@p200300dd6f194500e8c39111a660c6c7.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:39:37] *** Quits: beholders_eye (~weechat@2804:1b3:70c3:13a2:deb8:2ff4:2321:ba0c) (Ping timeout: 240 seconds)
[01:39:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[01:42:04] *** Joins: fikran (~fikran@user/fikran)
[01:43:08] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:45:15] *** Quits: halden (~halden@lden.im) (Remote host closed the connection)
[01:45:29] *** Joins: halden (~halden@lden.im)
[01:46:07] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[01:58:18] *** Quits: ivche (~ivche@77.28.123.251) (Quit: Lost terminal)
[01:58:19] *** Quits: Atlas (~atlas@user/atlas) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[02:00:05] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[02:00:43] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:00:56] *** Joins: Atlas (~atlas@user/atlas)
[02:01:56] *** Quits: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Quit: Leaving)
[02:02:00] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:08:36] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[02:16:10] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:19e6:cac8:69cd:f881) (Quit: WeeChat 3.4)
[02:27:41] *** Quits: remote (~self@user/hackers) (Remote host closed the connection)
[02:33:59] *** Quits: danmurf (uid480399@user/danmurf) (Quit: Connection closed for inactivity)
[02:59:04] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[03:09:46] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[03:13:05] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[03:16:20] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[03:23:11] *** Joins: hackers (~self@user/hackers)
[03:23:19] *** hackers is now known as remote
[03:23:22] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:26:19] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:34:54] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:41:44] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[03:49:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[03:51:20] *** Quits: hellstabber (~hellstabb@178.233.16.12) (Remote host closed the connection)
[03:51:25] *** Joins: fikran (~fikran@user/fikran)
[03:51:51] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[04:03:52] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[04:06:03] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:09:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[04:11:46] *** Joins: fikran (~fikran@user/fikran)
[04:13:56] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:14:30] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:15:24] *** Quits: Atlas (~atlas@user/atlas) (Quit: Textual IRC Client: www.textualapp.com)
[04:45:03] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:53] *** Quits: lilgopher (~textual@2601:241:8000:38f0:c5e8:6dd:df4e:31d6) (Quit: Textual IRC Client: www.textualapp.com)
[04:49:02] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 240 seconds)
[04:51:59] *** Joins: dsrt^ (~dsrt@207.5.54.6)
[04:53:06] *** Joins: jespada (~jespada@87.74.33.157)
[05:08:59] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 252 seconds)
[05:09:43] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[05:13:34] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:21:56] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[05:32:37] *** Joins: dead1 (~dead1@user/dead1)
[05:40:14] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[05:53:36] <fikran> I have a single go-file program that I'm editing in vim. Is there a way to run it without exiting vim?
[05:53:43] <fikran> some sort of IDE-like experience of vim?
[05:54:09] <b0nn> So, there are several
[05:54:17] <b0nn> 1) Open another terminal
[05:54:23] <fikran> I'm new'ish to vim beyond the basics
[05:54:27] <b0nn> 2) open another pane in a terminal (tmux)
[05:55:00] <b0nn> 3) Run the go binary with :!go run main.go
[05:55:33] <fikran> that might be it!
[05:55:36] <fikran> the latter one!
[05:55:45] <b0nn> 4) open a terminal inside vim (vim 8) :ter
[05:56:09] <d42> i'm quite fond of running my projects in a separate terminal tab ü§î
[05:56:29] <fikran> first emoji i've seen in the wild in IRC
[05:56:40] <fikran> Yay! my terminal rendered it too!
[05:57:33] <d42> üëç
[05:57:53] <d42> we are living in the future
[05:58:20] <fikran> We are! And yet things are still designed for VT100
[05:58:25] <b0nn> personally I'm a tmux fan so I have my terminal split into multiple panes as it is
[05:58:39] <fikran> One thing I like about Linux that annoys me about the BSDs is that they want things to work from the 1970s
[05:58:43] <b0nn> But I also use the :!go run foo and :ter options regularly
[05:59:36] <fikran> does :go have a help page?
[06:00:28] <b0nn> uhh that's probably a vim-go command :! go is using the :! to run a shell command
[06:00:56] <fikran> ohhh
[06:01:10] <b0nn> you can do any shell command from :!
[06:01:22] <b0nn> but that's more of a thing for #vim
[06:01:38] <fikran> yeah
[06:01:42] <fikran> thank you so much!
[06:01:48] <b0nn> np
[06:04:22] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[06:08:18] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:10:53] *** Joins: leitz (~LeamHall@072-182-158-027.res.spectrum.com)
[06:11:20] *** Quits: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net) (Remote host closed the connection)
[06:13:31] *** Quits: leitz (~LeamHall@072-182-158-027.res.spectrum.com) (Client Quit)
[06:17:47] *** Joins: nattiestnate (~nate@114.122.105.227)
[06:18:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[06:21:08] *** Joins: fikran (~fikran@user/fikran)
[06:24:48] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[06:32:40] *** Joins: leitz (~LeamHall@072-182-158-027.res.spectrum.com)
[06:33:31] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[06:35:45] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:49:21] *** Quits: hdm (sid500490@aha/hacker/hdm) ()
[06:52:09] *** Joins: hdm (~ghat@aha/hacker/hdm)
[06:54:20] *** Quits: foogiyama (~foogiyama@pool-71-172-157-172.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[06:55:48] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[06:59:28] *** Quits: hdm (~ghat@aha/hacker/hdm) (Quit: Client closed)
[06:59:46] *** Joins: hdm (~hdm@aha/hacker/hdm)
[07:12:02] *** Joins: loosh (~jason@vultr.bastion.pnj1.us.zj.is)
[07:26:22] *** Quits: leitz (~LeamHall@072-182-158-027.res.spectrum.com) (Quit: nappy time)
[07:32:00] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:37:11] *** Quits: moog (~moog@107.126.53.93) (Remote host closed the connection)
[07:47:58] <icy> how do i perform an error.Is check against a custom error? looks something like this: https://go.dev/play/p/7TS6cChcpMw
[07:49:32] *** Quits: dsrt^ (~dsrt@207.5.54.6) (Remote host closed the connection)
[07:50:59] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:58:52] *** Joins: srwm^ (~srwm@207.5.54.6)
[08:00:30] <icy> nvm, figured it out
[08:01:55] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[08:05:15] *** Joins: lalitmee_ (~lalitmee@180.94.33.76)
[08:05:15] *** Joins: amk (~amk@109.255.169.126)
[08:11:02] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:d0f9:73a0:3b19:1875)
[08:25:46] *** Joins: alrs (~alrs@tilde.team)
[08:28:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[08:29:55] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[08:30:05] *** Quits: alrs (~alrs@tilde.team) (Client Quit)
[08:30:29] *** Joins: fikran (~fikran@user/fikran)
[08:33:48] *** Joins: alrs (alrs@tilde.team)
[08:34:08] <fikran> this might not be a go question, but let me try here first - is there a way to run go in vim, and then jump to the first error?
[08:35:04] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[08:36:15] <avemestr> fikran: Everything is possible in vim :-)
[08:36:35] <avemestr> If you want a complete solution: https://github.com/fatih/vim-go
[08:41:12] <fikran> i think i have that...but I also didn't know what I was doing with plugins.../me checks
[08:42:35] <fikran> nevermind...I don't.
[08:42:47] <fikran> so then what was running some kind of go linter...
[08:44:20] <fikran> Checked. I have vim-go running.
[08:46:28] *** Joins: noxim (~noxim@user/noxim)
[08:47:37] *** Joins: souvik (~souvik@80.179.69.245.cable.012.net.il)
[08:48:33] <mfiano> Going through vim-go's documentation text file carefully is very rewarding. It is one of the most well-designed vim plugins.
[08:49:24] <fikran> yeah...
[08:50:54] <mfiano> Though I disable the linting and use neovim's builtin LSP for that with the golangci_lint_ls server to run all the linters enabled in my golangci-lint rc file
[08:51:45] <mfiano> I mostly just use vim-go for it's convenience commands I manaully map to keys
[08:56:45] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 256 seconds)
[08:58:15] *** Joins: noxim (~noxim@user/noxim)
[09:00:41] *** Quits: noxim (~noxim@user/noxim) (Client Quit)
[09:04:35] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Read error: Connection reset by peer)
[09:09:39] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:24:35] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[09:24:57] *** Joins: bindu (~bindu@user/bindu)
[09:35:16] *** Joins: lalitmee__ (~lalitmee@180.94.33.171)
[09:37:41] *** Quits: lalitmee_ (~lalitmee@180.94.33.76) (Ping timeout: 256 seconds)
[09:42:42] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:58:01] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[09:58:50] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[10:16:45] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[10:18:17] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:25:57] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Ping timeout: 240 seconds)
[10:38:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[10:39:50] *** Joins: fikran (~fikran@user/fikran)
[10:40:37] *** Joins: bilebucket (uid441769@user/bilebucket)
[10:48:42] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[10:49:35] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[10:52:03] *** Joins: ztx (~ztx@user/ztx)
[10:53:22] *** Joins: szahid (~szahid@user/szahid)
[10:53:26] <szahid> Hello
[10:55:46] *** Joins: lalitmee_ (~lalitmee@180.94.32.181)
[10:57:57] *** Quits: lalitmee__ (~lalitmee@180.94.33.171) (Ping timeout: 240 seconds)
[11:01:33] *** Parts: Yukkuri_ (~user@mayoinochikurin.eientei.org) ()
[11:02:57] *** Quits: bancroft (~bancroft@142.162.53.67) (Ping timeout: 240 seconds)
[11:05:07] *** Joins: rendar (~rendar@user/rendar)
[11:05:17] *** psil` is now known as psil
[11:10:41] *** Joins: johnjaye (~pi@154.6.152.74)
[11:10:51] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[11:14:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[11:15:57] *** Quits: chripell (~chripell@147.80.76.34.bc.googleusercontent.com) (Remote host closed the connection)
[11:19:18] *** Joins: mrig (~mrig@user/mrig)
[11:19:37] <icy> fikran: if you're running neovim, you can set this up pretty easily using neovim's built-in lsp
[11:20:33] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:24:28] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:27:53] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[11:29:48] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:31:37] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[11:33:43] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[11:34:39] *** Joins: jla (~jordi@64.225.79.195)
[11:35:30] *** Joins: bancroft (~bancroft@142.162.53.67)
[11:36:50] <szahid> icy: try spacevim
[11:38:50] *** Joins: lalitmee__ (~lalitmee@180.94.33.245)
[11:41:13] *** Quits: lalitmee_ (~lalitmee@180.94.32.181) (Ping timeout: 256 seconds)
[11:43:23] *** Quits: nattiestnate (~nate@114.122.105.227) (Quit: WeeChat 3.4)
[11:48:28] <icy> szahid: bloat
[11:50:13] <szahid> ;)
[11:51:46] *** Joins: lalitmee_ (~lalitmee@180.94.32.85)
[11:54:15] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[11:54:34] *** Quits: lalitmee__ (~lalitmee@180.94.33.245) (Ping timeout: 260 seconds)
[11:57:39] <fub> Im using neovim with lsp which is really good with go. It does also all the diagnostics, linting, formatting etc.
[11:57:45] <fub> You should give it a try
[11:58:26] *** Joins: arinov_ (~arinov@213.194.126.155)
[11:58:41] <mfiano> Same. I like to golang-lint client over gopls though
[11:58:52] <mfiano> s/to/the/
[11:59:00] <mfiano> err server
[11:59:03] * mfiano needs sleep
[12:01:41] *** Joins: danmurf (uid480399@user/danmurf)
[12:08:06] *** Joins: darkapex (~darkapex@user/darkapex)
[12:09:30] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 260 seconds)
[12:19:23] *** Joins: monoxane (~monoxane@user/monoxane)
[12:19:45] *** Quits: seebs (~seebs@24.196.59.174) (Ping timeout: 256 seconds)
[12:21:51] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:25:22] *** Quits: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea) (Quit: KonaArctic)
[12:26:32] *** Joins: Denver (~Denver@174-16-236-178.hlrn.qwest.net)
[12:32:42] *** Joins: sgt-hartman (~Srain@73.53.14.109.rev.sfr.net)
[12:36:01] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 268 seconds)
[12:36:22] *** Quits: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) (Remote host closed the connection)
[12:40:46] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 245 seconds)
[12:47:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[12:49:11] *** Joins: fikran (~fikran@user/fikran)
[13:00:22] *** Joins: darkapex_ (~darkapex@user/darkapex)
[13:01:17] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[13:04:08] *** Quits: mrig (~mrig@user/mrig) (Remote host closed the connection)
[13:04:22] *** Joins: mrig (~mrig@user/mrig)
[13:08:50] *** Joins: seebs (~seebs@24.196.59.174)
[13:09:23] <icy> can i define an interface that says Foo() can return either string or []string?
[13:09:37] *** Joins: idstam (~idstam@2.70.64.205.mobile.tre.se)
[13:09:51] *** Quits: idstam (~idstam@2.70.64.205.mobile.tre.se) (Client Quit)
[13:10:17] *** Joins: idstam (~idstam@2.70.64.205.mobile.tre.se)
[13:23:24] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[13:23:26] <j416> icy: sounds difficult to use
[13:23:29] <novns> icy, but why?
[13:23:35] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[13:24:02] <novns> icy, you can just return []string
[13:25:41] <novns> icy, or you can return both values, with nullable pointers
[13:25:47] <HisShadow> Is there a way to get remote end of the socket FD from a TCPConn? I know about File() method, but it returns a local end, but if you look in /proc/pid/fd there are actually 2 references to a socket with the same inode. Is there a way to get fd for the other one?
[13:26:43] <icy> novns: primarily because the change would require a big refactor and having a 'flexible' interface would simplify things
[13:27:03] <icy> but yeah, i think i'll just rewrite it to return []string
[13:28:27] <j416> made me curious though; I haven't read all of the generics proposal yet, but would it be doable? futile attempt https://go.dev/play/p/m4oK_TUW6k2?v=gotip
[13:28:44] <novns> icy, you can return interface{}, and check its .(type)
[13:29:45] <j416> simplified, this of course works https://go.dev/play/p/Mola-u15O3R?v=gotip
[13:29:48] <icy> that's possible i suppose, but if i'm changing return values, i might as well do it right.
[13:29:54] <icy> thanks anyway!
[13:31:04] <icy> j416: heh, neat
[13:31:31] <j416> well if it compiled :)
[13:33:19] <j416> seems like an odd use of generics either way :)
[13:34:38] <HisShadow> nvm
[13:34:40] *** Parts: HisShadow (~HisShadow@user/hisshadow) ()
[13:35:30] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[13:36:46] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[13:37:50] *** Joins: teasea6 (~teasea@user/teasea)
[13:40:48] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[13:47:03] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[13:59:35] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[14:08:21] *** Joins: arinov_ (~arinov@178.240.175.124)
[14:11:21] *** Quits: danmurf (uid480399@user/danmurf) (Quit: Connection closed for inactivity)
[14:16:17] *** Joins: lalitmee__ (~lalitmee@180.94.32.14)
[14:18:45] *** Quits: lalitmee_ (~lalitmee@180.94.32.85) (Ping timeout: 256 seconds)
[14:23:52] *** Quits: souvik (~souvik@80.179.69.245.cable.012.net.il) (Read error: Connection reset by peer)
[14:25:58] *** Joins: souvik (~souvik@103.59.73.98)
[14:30:19] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[14:30:46] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[14:31:47] *** Quits: souvik (~souvik@103.59.73.98) (Ping timeout: 256 seconds)
[14:33:32] *** Joins: souvik (~souvik@80.179.69.241.cable.012.net.il)
[14:36:22] *** Quits: dr0n (~nabromov@94.11.23.235) (Quit: WeeChat 3.3)
[14:36:31] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[14:36:41] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[14:39:21] *** Joins: shtirlic (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru)
[14:39:37] *** Quits: arinov_ (~arinov@178.240.175.124) (Ping timeout: 240 seconds)
[14:41:27] *** Joins: dr0n (~nabromov@94.11.23.235)
[14:41:59] *** Joins: The_Loko (~The_Loko@79.116.24.80)
[14:43:02] *** Quits: shtirlic_ (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru) (Ping timeout: 240 seconds)
[14:43:03] *** Quits: Denver (~Denver@174-16-236-178.hlrn.qwest.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[14:48:43] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[14:49:23] *** Quits: dr0n (~nabromov@94.11.23.235) (Quit: WeeChat 3.3)
[14:52:19] *** Joins: darkapex (~darkapex@user/darkapex)
[14:52:45] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[14:53:08] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[14:55:17] *** Joins: neurocyte0132889 (~neurocyte@IP-212232085135.dynamic.medianet-world.de)
[14:55:17] *** Quits: neurocyte0132889 (~neurocyte@IP-212232085135.dynamic.medianet-world.de) (Changing host)
[14:55:17] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:55:22] *** Joins: dr0n (~nabromov@94.11.23.235)
[14:56:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[14:58:32] *** Joins: fikran (~fikran@user/fikran)
[15:40:27] *** Joins: Xjs (~jannis@user/xjs)
[15:48:27] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (Quit: Bridge terminating on SIGTERM)
[15:49:02] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[15:50:35] *** Joins: shtirlic_ (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru)
[15:51:47] *** Joins: beholders_eye (~weechat@2804:1b3:70c3:13a2:deb8:2ff4:2321:ba0c)
[15:51:49] *** Quits: souvik (~souvik@80.179.69.241.cable.012.net.il) (Read error: Connection reset by peer)
[15:53:59] *** Quits: shtirlic (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru) (Ping timeout: 268 seconds)
[15:54:56] *** Quits: bilebucket (uid441769@user/bilebucket) ()
[15:57:24] *** Joins: souvik (~souvik@103.59.73.116)
[16:01:08] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[16:02:53] *** Quits: Batzy (~quassel@user/batzy) (Ping timeout: 256 seconds)
[16:07:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:29:11] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[16:30:03] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[16:31:42] *** Joins: neurocyte0132889 (~neurocyte@IP-212232085135.dynamic.medianet-world.de)
[16:31:42] *** Quits: neurocyte0132889 (~neurocyte@IP-212232085135.dynamic.medianet-world.de) (Changing host)
[16:31:42] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:33:43] *** Joins: cobber (~protorom@213.240.182.77)
[16:34:37] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[16:39:17] *** Quits: Xjs (~jannis@user/xjs) (Read error: Connection reset by peer)
[16:39:43] *** Joins: Xjs (~jannis@user/xjs)
[16:41:50] *** Joins: phoenixh (~phoenixh@p200300dd6f1e2a00bb785dfa58db4805.dip0.t-ipconnect.de)
[16:45:31] *** Joins: whaley (~whaley@097-082-197-228.res.spectrum.com)
[16:45:57] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[16:46:51] *** Joins: johnjaye (~pi@154.6.152.74)
[17:06:01] *** Joins: arinov (~arinov@213.194.126.155)
[17:06:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[17:07:53] *** Joins: fikran (~fikran@user/fikran)
[17:08:53] <dostoyevsky2> Is it a blessing if I can find a github Go lib on go.dev, like: https://pkg.go.dev/github.com/pierrec/lz4  ?  Or does that not say anything about trustworthyness?
[17:11:00] *** bpalmer` is now known as bpalmer
[17:11:37] <bpalmer> I don't think it says much about trustworthiness, if anything.
[17:17:48] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[17:18:49] *** Quits: resamvi (~resamvi@user/resamvi) (Quit: resamvi)
[17:21:28] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[17:21:28] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[17:21:28] *** Joins: resamvi (~resamvi@user/resamvi)
[17:21:28] *** Quits: kindablue (~kindablue@irc.tpurist.com) (Quit: System Rebooting..)
[17:21:51] *** Joins: kindablue (~kindablue@irc.tpurist.com)
[17:23:52] *** Quits: resamvi (~resamvi@user/resamvi) (Client Quit)
[17:27:47] <dostoyevsky2> godep wants my package to be under te $GOPATH... is there an easy way to install my package there?  `go install' i'd guess...
[17:30:45] <bookworm> chances are that if you find a project that is so horribly maintained that it still uses godep you shouldn't be using it
[17:30:54] <bookworm> as the author clearly doesn't care
[17:31:06] <dostoyevsky2> what can I use instead to do vendoring?
[17:31:13] <bookworm> go modules
[17:33:21] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[17:33:21] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[17:33:21] *** Joins: resamvi (~resamvi@user/resamvi)
[17:35:24] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:36:09] <dostoyevsky2> I just did `go mod vendor' in my directory.  This now created the vendor dir... How can I verify that `go build' is now using it?
[17:39:40] <bookworm> tried reading the docs?
[17:39:59] <bookworm> they pretty much tell you how to force the vendor dir
[17:41:50] <dostoyevsky2> > If the vendor directory is present in the main module‚Äôs root directory, it will be used automatically if the go version in the main module‚Äôs go.mod file is 1.14 or higher.
[17:42:23] *** Quits: Herby (~quassel@merkur.graeber-clan.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[17:42:57] <dostoyevsky2> % go build -n -o .b  |& grep vendor # no hits... it's printing packagefile github.com/pierrec/lz4=/home/go/.cache/go-build/85/85423ddc588525cdebdf821989726128bffc16fb976346bf38c7f44f3d372239-d
[17:43:19] *** Joins: Herby (~quassel@merkur.graeber-clan.de)
[17:43:22] <dostoyevsky2> I guess that's because it has already compiled the module before
[17:44:35] <dostoyevsky2> > When vendoring is enabled, build commands like go build and go test load packages from the vendor directory instead of accessing the network or the local module cache.
[17:44:55] <dostoyevsky2> but `/home/go/.cache/' is the local module cache, no?
[17:54:17] *** Quits: bancroft (~bancroft@142.162.53.67) (Ping timeout: 240 seconds)
[17:56:58] <fizzie> Add a syntax error to one of the packages in the vendor directory that's needed for the build, and see if the build fails?
[17:58:09] <dostoyevsky2> > vendor/github.com/pierrec/lz4/writer.go:3:1: syntax error: non-declaration statement outside function body
[17:58:21] <dostoyevsky2> fizzie: Yeah, it does fail! :)
[17:59:46] <fizzie> And /home/go/.cache/go-build is the *build* cache, not the module cache.
[18:00:40] <fizzie> The local module cache is whatever `go env GOMODCACHE` says.
[18:04:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:06:47] *** Quits: resamvi (~resamvi@user/resamvi) (Quit: resamvi)
[18:08:40] *** Joins: ivche (~ivche@77.28.122.151)
[18:08:47] <ivche> hey everyone
[18:10:17] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[18:11:34] *** Joins: casionaut (~casionaut@user/casionaut)
[18:17:17] *** Parts: sgt-hartman (~Srain@73.53.14.109.rev.sfr.net) ()
[18:17:29] *** Joins: leitz (~LeamHall@072-182-158-027.res.spectrum.com)
[18:18:05] *** Joins: i3iri5 (~i3i4i5i6@114.245.107.94)
[18:20:44] *** Quits: phoenixh (~phoenixh@p200300dd6f1e2a00bb785dfa58db4805.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:23:57] *** Joins: bancroft (~bancroft@142.162.53.67)
[18:34:30] *** Quits: bancroft (~bancroft@142.162.53.67) (Ping timeout: 260 seconds)
[18:37:15] *** remote is now known as alphabeta
[18:38:27] *** Joins: Guest7 (~Guest7@79.110.133.101)
[18:42:28] *** alphabeta is now known as alphabeta[m]
[18:45:03] *** alphabeta[m] is now known as remote
[18:46:41] *** Joins: eivindr (~eivindr@80.203.72.195)
[18:47:36] *** Quits: eivindr (~eivindr@80.203.72.195) (Client Quit)
[18:47:57] *** Joins: eivindr (~eivindr@80.203.72.195)
[18:51:24] *** Quits: Guest7 (~Guest7@79.110.133.101) (Quit: Client closed)
[18:53:04] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[18:53:30] *** Joins: bancroft (~bancroft@142.162.53.67)
[18:55:33] *** Joins: mickey8 (~user@user/mickey)
[18:56:34] <mickey8> how can i make json marshal ignore a field of a struct (i.e. `json:"-"`), but still have a name for it so unmarshal would still unmarshal it properly?
[18:57:35] <hdm> implement a custom Marshal/Unmarshal instead
[18:57:58] <mickey8> is that really necessary? it's only one field :/
[18:58:39] *** Joins: dadideo (~dadideo@proxy-109-190-254-61.ovh.net)
[18:58:40] <hdm> pretty sure there isn't a way to handle it with a tag; another option is to change the type of that one field from string to a wrapper, like what NodeExporter does with SecretString
[18:59:15] <hdm> they implement a custom marshal for the string so that it becomes '*' when marshaled, but still unmarshals normally
[18:59:52] <hdm> but if youre defining a custom type and marshal, might as well do it at the top level struct
[19:03:06] <hdm> reference: https://github.com/prometheus/common/blob/main/config/config.go#L26
[19:03:45] <hdm> they use Secret as an alias for string, create a custom marshaler that returns `<secret>` instead of the value
[19:05:39] *** Joins: moog (~moog@107.126.53.61)
[19:09:09] *** Quits: eivindr (~eivindr@80.203.72.195) (Quit: ZNC 1.8.2 - https://znc.in)
[19:14:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[19:16:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:17:13] *** Joins: fikran (~fikran@user/fikran)
[19:26:06] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-630-171.w86-246.abo.wanadoo.fr)
[19:32:54] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:35:41] *** Joins: mrig (~mrig@user/mrig)
[19:36:40] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[19:38:49] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[19:39:03] *** Joins: c10l (~c10l@user/c10l)
[19:39:11] *** Quits: c10l (~c10l@user/c10l) (Client Quit)
[19:39:25] *** Joins: c10l (~c10l@user/c10l)
[19:41:05] *** Quits: casionaut (~casionaut@user/casionaut) (Quit: bye)
[19:45:17] *** Quits: srwm^ (~srwm@207.5.54.6) (Remote host closed the connection)
[19:46:02] *** Joins: darkapex_ (~darkapex@user/darkapex)
[19:47:04] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 268 seconds)
[19:50:09] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[19:58:24] *** Joins: souvik_ (~souvik@80.179.69.241.cable.012.net.il)
[20:00:38] *** Quits: souvik (~souvik@103.59.73.116) (Ping timeout: 268 seconds)
[20:00:48] <bancroft> How can I implement the  reader method on a string? I essentially want to parse the csv output of a cli command so there's no physicaly file https://bpa.st/CRPQ
[20:03:23] <bookworm> bancroft: strings.Reader()
[20:03:43] <fizzie> s/Reader/NewReader/
[20:03:50] <bookworm> thanks
[20:04:25] <bookworm> "use autocompletion and fuzzy matching" coding doesn't translate well to IRC sometimes
[20:05:27] <fizzie> Though given the pasted context, you might want bytes.NewReader instead.
[20:06:05] <fizzie> (os/exec.Cmd's Output() method returns a []byte rather than a string, and while you can of course convert one to the other, there's no need to.)
[20:08:50] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[20:09:58] *** Joins: user217_ (~andrii@68.183.215.143)
[20:10:11] *** Joins: henry404089 (~henry4040@123-204-10-70.dynamic.seed.net.tw)
[20:10:31] *** Quits: i3iri5 (~i3i4i5i6@114.245.107.94) (Remote host closed the connection)
[20:11:29] <fizzie> And FWIW, you don't necessarily need to buffer all the unparsed output into a []byte if you don't want to; you could also do `cmd := exec.Command(...); stdout, err := cmd.StdoutPipe(); csvReader := csv.NewReader(stdout); err = cmd.Start(); data, err := csvReader.ReadAll(); err = cmd.Wait()`.
[20:11:53] *** Quits: henry40408 (~henry4040@175.181.175.129) (Ping timeout: 250 seconds)
[20:11:54] *** henry404089 is now known as henry40408
[20:12:38] <bancroft> fizzie: i'm just learning lol! this will help me understand types if I can make it work
[20:16:07] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[20:20:17] *** Quits: user217_ (~andrii@68.183.215.143) (Ping timeout: 240 seconds)
[20:20:20] *** Quits: souvik_ (~souvik@80.179.69.241.cable.012.net.il) (Ping timeout: 252 seconds)
[20:20:24] *** Joins: user217__ (~andrii@195.138.71.41)
[20:21:13] *** Joins: souvik (~souvik@80.179.69.241.cable.012.net.il)
[20:21:51] *** Joins: fjb (~fjb@2804:378:916c:500:7ad:69b:9ac2:6c1e)
[20:23:57] *** Quits: lalitmee__ (~lalitmee@180.94.32.14) (Ping timeout: 240 seconds)
[20:26:16] *** Joins: jhchabran (~jhchabran@user/jhchabran)
[20:28:03] *** Joins: dsrt^ (~dsrt@207.5.54.6)
[20:37:49] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9411-5ab1-d842-d165.res6.spectrum.com)
[20:38:29] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Ping timeout: 252 seconds)
[20:40:56] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[20:41:06] <bancroft> fizzie: ok so that gives me a deadlock, https://go.dev/play/p/cRfvNYPGHBq
[20:45:40] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Ping timeout: 268 seconds)
[20:50:24] *** Parts: leitz (~LeamHall@072-182-158-027.res.spectrum.com) (Later)
[20:52:55] *** Joins: christophergray (~christoph@190.148.50.74)
[21:00:37] *** Quits: bancroft (~bancroft@142.162.53.67) (Ping timeout: 240 seconds)
[21:01:04] *** Joins: lilgopher (~textual@2601:241:8000:38f0:6415:ac65:3de6:8743)
[21:03:04] *** Joins: no_good (~purekafro@athedsl-4369539.home.otenet.gr)
[21:03:47] *** Joins: hellstabber (~hellstabb@178.233.16.12)
[21:05:06] *** Joins: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com)
[21:08:13] *** Quits: no_good (~purekafro@athedsl-4369539.home.otenet.gr) (Ping timeout: 240 seconds)
[21:21:19] <fizzie> Yeah, that's because the csv.Reader returns an error (good reminder: check all errors, not just some of them) and doesn't read all the output, so the `ps` process never finishes.
[21:21:44] <fizzie> "2021/12/28 17:50:40 record on line 230: wrong number of fields" after adding an `if err != nil` check for the ReadAll() command.
[21:24:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[21:26:34] *** Joins: fikran (~fikran@user/fikran)
[21:28:57] *** Joins: nattiestnate (~nate@114.122.107.61)
[21:42:53] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 250 seconds)
[21:45:24] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[21:46:23] *** Joins: Jigsy (~Jigsy@user/jigsy)
[21:58:23] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9411-5ab1-d842-d165.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz‚Ä¶)
[22:05:34] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:10:16] *** Joins: bancroft (~bancroft@142.162.53.67)
[22:12:05] <bancroft> oh I think it's because of the cmd.wait()
[22:18:54] *** Joins: bailsman (~Mm1@xls01.freecult.org)
[22:19:12] *** Quits: dadideo (~dadideo@proxy-109-190-254-61.ovh.net) (Remote host closed the connection)
[22:20:14] <bailsman> Does adding something to a global map ensure it doesn't get freed?
[22:20:56] <bailsman> If yes, is that a reason to have a map that uses the same thing as both key and value? As in mymap[p] = p where p is a pointer to something? It feels incredibly dumb to do that
[22:21:04] <fizzie> bancroft: <fizzie> Yeah, that's because the csv.Reader returns an error (good reminder: check all errors, not just some of them) and doesn't read all the output, so the `ps` process never finishes.
[22:21:14] <fizzie> bancroft: <fizzie> "2021/12/28 17:50:40 record on line 230: wrong number of fields" after adding an `if err != nil` check for the ReadAll() command.
[22:21:34] <fizzie> At least that's my guess.
[22:22:42] <bailsman> Unless just having it as a key *also* ensures it doesn't get freed in which case I could do map[p] = struct{}{}
[22:22:55] <bailsman> but a key by itself isn't a reference to something, is it?
[22:23:06] <fizzie> Pretty sure it has to count as reachable even if it's just a map key.
[22:23:18] <fizzie> Because at any time you can iterate over the keys of the map and expect those pointers still be valid.
[22:23:55] <bailsman> Fair enough.
[22:24:16] <bancroft> fizzie: great, yeah I think I got it :)
[22:24:35] <bailsman> By the way is creating an empty map the idiomatic way to create a set?
[22:24:45] <bancroft> now, onto marshalling it in to a struct! (Am I using the term right? or is it unmarshall it into a struct?)
[22:25:10] <ikke> unmarshal
[22:25:22] <bancroft> ikke: thanks!
[22:26:02] <fizzie> Our style guide says if you need a set of T, the choice between `map[T]struct{}` and `map[T]bool` is a matter for your own conscience and not mandated.
[22:26:30] <fizzie> (But you'd use one of those two.)
[22:27:10] <bailsman> Oh NO! I hate things that are not mandated. Which one of those would you venture is the most common?
[22:29:16] *** Quits: cfebs (~cfebs@user/cfebs) (Quit: ZNC 1.8.2 - https://znc.in)
[22:29:37] <fizzie> I haven't made a survey. :) Definitely seen both in use, so I don't think either is orders of magnitude more common than the other.
[22:31:28] <fizzie> ISTR some people on-channel having very strong feelings about map[T]bool being a bad idea, because it allows for three states (absent, `false`, `true`), two of which are quite similar but not entirely equivalent.
[22:31:54] <b0nn> Hrm, also keep in consideration that only one struct{}{} exists in the entire runtime, so when you use that in your set, it's size isn't going to grow (the keys will take up space though)
[22:32:29] <fizzie> The size of the type `struct{}` is 0, so I think whether one or more "exists" is one of those philosophical questions.
[22:32:37] <b0nn> But some people advocate for bool on the grounds that checking is easier  : if map[val]
[22:32:38] <bailsman> Can I safely share a pointer to one of my objects to the outside world and then cast it back to a pointer (from json) or whatever, if I just use the set to check that it is still valid?
[22:33:39] <bailsman> Well, that's probably neither safe nor sane, but I wonder if the set mitigates any security risk or such-like
[22:33:48] <b0nn> Strictly speaking it's not zero because of the existence of the - I forget the name of it - single point in the runtime
[22:33:57] <b0nn> But it never grows
[22:34:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:34:50] <fizzie> I've always heard it said its size is zero. And `unsafe.Sizeof` says it's zero.
[22:35:20] <b0nn> it's /efeectively/ zero, which is slightly different
[22:35:39] *** Joins: epony (epony@user/epony)
[22:35:44] <b0nn> I'm trying to find the code now :)
[22:38:04] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[22:40:21] *** Quits: user217__ (~andrii@195.138.71.41) (Read error: Connection reset by peer)
[22:41:20] <bailsman> Oh hold on, can the garbage collector move my objects and make my pointers invalid?
[22:41:35] *** Quits: christophergray (~christoph@190.148.50.74) (Ping timeout: 268 seconds)
[22:41:45] <bailsman> That means I probably want to put the pointers as the values in my map, and use some other key as the key.
[22:44:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:45:22] <bailsman> Can I say something about the location of code and the location of non-code in memory such that for a certain range of numbers (that fits in uintptr), I can be sure that PC will never be in that range?
[22:46:13] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9411-5ab1-d842-d165.res6.spectrum.com)
[22:46:40] <bailsman> it seems to be true for 0x0c00XXXXXXXX on my system but I don't know if that's true in general or at least going to be true on most systems
[22:47:00] <b0nn> https://go.dev/src/runtime/malloc.go#L910
[22:47:03] <fizzie> https://go.dev/blog/ismmkeynote suggests the GC is a non-moving one, but I don't know if that's part of the guarantees or just a detail of the current implementation. I do know in the context of cgo specifically, it is allowed to pass pointers to Go objects to foreign code, if (and only if) those objects themselves contain no further pointers to Go objects.
[22:47:34] <b0nn> the name of the variable is "zerobase" (thanks to Ian Lance Taylor for telling me this)
[22:49:12] <b0nn> So, zerobase is what's used across the runtime when a variable has .. no size (effectively)
[22:50:18] <bailsman> fizzie: that being allowed seems to rely either on the gc being nonmoving OR on such pointers being declared in a special way
[22:50:36] <bailsman> like I need to keep a reference to unsafe.Pointer around for that to be true?
[22:51:30] <bailsman> I liked the idea of using the pointers themselves as key to my map because I can guarantee those are always outside of the code segment
[22:51:46] <bailsman> if I have some other way of guaranteeing something is outside the code segment, maybe it would work better than passing raw pointers
[22:52:07] <b0nn> bailsman: objects on the heap are kept in "spans" - and I don't think that there's a compaction phase in the GC
[22:52:59] <b0nn> so, assuming it's a heap, and not stack object (there may be different rules) I don't think it will get moved about
[22:53:11] <fizzie> b0nn: Hmm, well. That's clearly for _allocating_ a zero-sized block of memory. If you have a `struct{}` field in a larger structure, I'm pretty sure that "really" has size zero. And possibly also if it's a variable that doesn't escape. Map values, dunno.
[22:53:53] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9411-5ab1-d842-d165.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[22:54:36] <b0nn> fizzie: uhh allocation of memory is about the size of it, no?
[22:54:51] <fizzie> Yes, but it's not _all_ about the size.
[22:54:57] <b0nn> ...
[22:55:07] <fizzie> For example, from what I could glean from runtime/map.go quickly was that both keys and values of size <= 128 are "kept inline (instead of mallocing per element)".
[22:55:30] <bailsman> when you said "for cgo specifically" - is that a special way to generate the pointer with the guarantee that you can pass it to the outside?
[22:55:32] <fizzie> So if you have a zero-sized element type, it wouldn't surprise me at all it never involves any attempts to allocate 0-sized memory blocks.
[22:56:58] <b0nn> hrm, so you're saying that because memory has been allocated for a small map, that memory used ... is zero?
[22:57:24] <b0nn> I mean, it has to be able to say "there's a value here"
[22:57:37] <b0nn> even if it's for a struct{}{}
[22:57:41] <fizzie> No, I'm saying any special optimization in the malloc path to handle zero-sized allocations specifically isn't related to whether a `map[T]struct{}` requires any memory for its elements.
[22:57:56] <b0nn> sorry?
[22:58:18] <b0nn> how is it going to say there's a value there at all
[22:58:49] *** Joins: else- (sid23924@id-23924.tinside.irccloud.com)
[22:59:27] <bailsman> https://pkg.go.dev/runtime/cgo#Handle found it! This is exactly what I needed
[22:59:34] <fizzie> It's a hashmap. It needs to store the key and everything. All that other junk is what allows it to say if a value is present or not in the map. I'm just saying it doesn't need to reserve any extra space for storing the element, when the element's size is 0.
[22:59:54] <b0nn> ...
[23:00:41] <b0nn> that doesn't make any sense - I'd have to look at the code and ask people that are acquainted with the optimisations
[23:01:28] <b0nn> you said you looked at map.go?
[23:01:53] <fizzie> Very briefly, and only far enough to get to that comment about keeping small data "inline".
[23:02:45] <fizzie> I'm not making any claims about what the runtime actually does, just that there's no inherent need for zero-sized allocations to be involved in a `map[T]struct{}`.
[23:05:17] *** Joins: christophergray (~christoph@190.148.51.100)
[23:06:11] <fizzie> Or for other objects of struct{} type. For example, here's four struct{} objects: https://go.dev/play/p/-VZQNDNWcK0 -- in that instance, `a` and `b` have the same address (suggesting they "really" have zero size), while `c` and `d` too have the same address (since it's from `new`, guessing it's exactly that &zerobase), but different from the first two.
[23:09:57] *** Quits: christophergray (~christoph@190.148.51.100) (Ping timeout: 240 seconds)
[23:11:36] <b0nn> what's more likely is you are looking at stack vs heap difference
[23:11:38] <b0nn> s
[23:12:10] <fizzie> Pretty sure nothing in that example is on the stack.
[23:12:14] <b0nn> unfortunately the code I was linked to to understand stacks handling of these special cases has been moved :\
[23:12:35] <b0nn> It was in https://go.dev/src/cmd/compile/internal/gc/walk.go#L837
[23:12:56] <b0nn> uhh did you just say that it's not in the stack?
[23:13:03] <b0nn> so it's all on the heap?
[23:14:11] <fizzie> `a` and `b` are file-scope variables so they couldn't really be on the stack; I don't know if the memory model has a separate word for where those are kept.
[23:14:44] <fizzie> And `c` and `d` are from calls to new, which I kind of imagined were always allocated, but I guess it's not impossible for the implementation to change those to stack allocations if they don't escape.
[23:15:05] <fizzie> (Though given that I'm passing the pointers to `fmt.Printf`, that sounds unlikely.)
[23:15:40] <b0nn> This is zerobase on the stack https://cs.opensource.google/go/go/+/master:src/cmd/compile/internal/walk/convert.go;l=125?q=zerobase&ss=go%2Fgo:src%2Fcmd%2Fcompile%2Finternal%2F
[23:16:08] *** Quits: fjb (~fjb@2804:378:916c:500:7ad:69b:9ac2:6c1e) (Ping timeout: 268 seconds)
[23:16:34] <b0nn> As discussed with malloc, it looks at the size of the value (zero) and says, ok you can use zerobase here
[23:17:27] <fizzie> As far as I can quickly tell from the context, that's specifically for converting a value into an interface type.
[23:17:56] <fizzie> "Returns the data word (the second word) used to represent n in an interface." And it's called when "walk[ing] an OCONVIDATA node".
[23:18:36] <b0nn> n must not me of interface type
[23:19:08] <fizzie> Well, you can't put an interface inside an interface.
[23:20:31] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[23:20:37] <b0nn> Well, I'm going to go burn breakfast - if you can find code that deals with the empty struct (and other zero sized vals) on the stack I'd be keen to see
[23:21:46] <b0nn> I saw this earlier (it's a bug though) https://github.com/golang/go/issues/12884
[23:22:27] <fizzie> Anyway, sure. If you need a pointer that can represent a zero-sized value, makes sense to use &zerobase for that to avoid an allocation. That still doesn't mean all instances of zero-sized types everywhere would necessarily use that special pointer value. It's _definitely_ not the case for zero-sized fields of larger structs, consider for example this: https://go.dev/play/p/CbsQUZ4Wgjx
[23:22:45] *** Quits: bancroft (~bancroft@142.162.53.67) (Ping timeout: 256 seconds)
[23:24:11] *** Joins: bancroft (~bancroft@142.162.53.67)
[23:24:18] <fizzie> (I did come across https://github.com/golang/go/issues/9401 earlier though -- AFAICT, it makes zero-sized _last_ fields of otherwise non-zero-sized struct types actually take a byte, for implementation-related reasons.)
[23:28:07] *** Joins: arinov (~arinov@213.194.126.155)
[23:28:15] *** Joins: Denver (~Denver@174-16-236-178.hlrn.qwest.net)
[23:30:15] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[23:33:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[23:35:28] *** Quits: ivche (~ivche@77.28.122.151) (Quit: leaving)
[23:35:55] *** Joins: fikran (~fikran@user/fikran)
[23:37:55] *** Quits: hellstabber (~hellstabb@178.233.16.12) (Read error: Connection reset by peer)
[23:47:22] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[23:49:07] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Quit: The Lounge - https://thelounge.chat)
[23:49:17] <mickey8> so i have something like type xyz struct { Label string; Value string} where the label is basically a date and value is a number (forget the string definition, that's not the point). []xyz is basically the list of date-value pairs for a certain data. then i have a bunch of []xyz's that constitute wider data, in which ALL labels are dates and the
[23:49:17] <mickey8> values vary. so basically i ended up with [][]xyz right? the label may or may not share the same dates between []xyz's, but anyways it's always dates. what i need to do is to somehow "merge" that [][]xyz into a map[string][]string, where the label would be the key and then all values from all pairs would be in the []string
[23:49:21] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[23:49:48] <mickey8> something along the lines of python pandas' merge()
[23:50:56] <mickey8> is there some way of achieving that without infinite loops and stuff?
[23:52:23] *** Joins: notevil (~notevil@user/notevil)
[23:54:07] <fizzie> I couldn't really discover what (if anything) happens to zero-sized values on the stack. For the original motivation of `map[T]struct{}`, what I _think_ will happen is (but wouldn't bet on it) is, the relevant maptype.elemsize (https://cs.opensource.google/go/go/+/master:src/runtime/type.go;l=356) will equal zero, and the bucket data after the `bmap` header
[23:54:09] <fizzie> (https://cs.opensource.google/go/go/+/master:src/runtime/map.go;l=150) will just end after the keys, and the map access functions will just multiply by 0 when they're computing the element data location.
[23:54:19] <seebs> it doesn't take infinite loops or anything, but it takes some looping, and the reason is that what you mean by "merge" is actually potentially complex and different users would want different things.
[23:54:32] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[23:55:47] <seebs> the simplest is roughly `for _, xyzSlice := range items { for _, x := range xyzSlice { outMap[x.Label] = append(outMap[x.Label], x.Value) } }`
[23:57:58] *** Quits: jda (~jadra@chai.0xbad.coffee) (Quit: ZNC - https://znc.in)
[23:58:09] *** Joins: jda (~jadra@chai.0xbad.coffee)
[23:58:12] *** Quits: bancroft (~bancroft@142.162.53.67) (Ping timeout: 240 seconds)
[23:59:32] *** Quits: Lost (cold@user/lost) (Ping timeout: 240 seconds)
[23:59:35] *** Quits: souvik (~souvik@80.179.69.241.cable.012.net.il) (Ping timeout: 256 seconds)
