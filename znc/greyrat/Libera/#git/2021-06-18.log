[00:01:59] *** Joins: PhilipOakley (~PhilipOak@host-78-147-180-220.as13285.net)
[00:02:11] *** Quits: PhilipOakley (~PhilipOak@host-78-147-180-220.as13285.net) (Client Quit)
[00:04:50] *** Quits: anton (~anton@am32.org) (Quit: anton)
[00:05:33] *** Joins: anton (~anton@am32.org)
[00:06:29] *** Quits: anton (~anton@am32.org) (Read error: Connection reset by peer)
[00:06:37] *** Joins: anton1 (~anton@antonmcclure.com)
[00:09:07] *** Quits: anton1 (~anton@antonmcclure.com) (Client Quit)
[00:09:16] *** Joins: anton (~anton@antonmcclure.com)
[00:09:26] *** Quits: vodkra (~vodkra@user/vodkra) (Remote host closed the connection)
[00:13:20] *** Quits: britho (~britho3@071-081-142-203.res.spectrum.com) (Remote host closed the connection)
[00:13:42] *** Joins: britho (~britho3@071-081-142-203.res.spectrum.com)
[00:20:03] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Quit: Leaving)
[00:20:51] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 244 seconds)
[00:20:51] *** Quits: TomyWork (~TomyLobo@p200300e80f133c00352b009135baa02d.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:22:06] *** Joins: thebombzen (~thebombze@587232334.guest.umich.net)
[00:22:34] *** Joins: vodkra (~vodkra@user/vodkra)
[00:22:52] *** Quits: thebombzen (~thebombze@587232334.guest.umich.net) (Client Quit)
[00:24:13] *** Joins: thebombzen (~thebombze@587232338.guest.umich.net)
[00:25:30] *** Quits: bodiccea (~bodiccea@user/bodiccea) (Remote host closed the connection)
[00:27:54] <thebombzen> is there a way to "lazily" clone a git repo? I couldn't find the name for it in the docs
[00:28:38] <imMute> thebombzen: you can do a shallow clone and then unshallow it later.
[00:29:12] <j416> thebombzen: there is also --filter
[00:30:07] <thebombzen> looking at --filter docs for git-clone(1), it says: --filter=blob:none will filter out all blobs (file contents) until needed by Git
[00:30:21] <thebombzen> what does "until needed" mean in this context, if it needs a blob that's not present it then just fetches it?
[00:30:28] <j416> yeah
[00:30:32] <j416> iirc
[00:31:45] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[00:32:31] <thebombzen> interesting. so if I do --depth=1 --filter=blob:none, how would I then fetch the objects later, do I just do a "git fetch origin/master" or something?
[00:33:48] <j416> --unshallow
[00:34:03] *** Joins: skapata (~Skapata@user/skapata)
[00:34:11] <j416> I don't know how to unfilter.
[00:35:47] <thebombzen> git fetch --unshallow?
[00:35:59] <j416> yes, fetch --unshallow
[00:36:07] *** Joins: orbyt (~textual@172.92.4.78)
[00:36:47] <thebombzen> it looks like --depth=1 in the clone didn't do much, for some reason
[00:37:22] <j416> thebombzen: how'd you figure?
[00:37:26] <j416> thebombzen: try 'git log'
[00:37:41] <thebombzen> yea, it cloned only one commit, but it ate like several hundred MB
[00:37:54] <j416> that one commit maybe has many files
[00:38:24] <j416> commits record snapshots of the entire directory tree
[00:38:25] <thebombzen> and then follwing it up with git fetch --unshallow only ate about 400k of extra bandwidth
[00:38:43] <thebombzen> and I know the tree has images larger than that size that have been removed from prior commits
[00:44:18] *** Quits: Guest9 (~Guest9@103.240.170.8) (Quit: Connection closed)
[00:50:26] *** Quits: alzgh (~alzgh@216.155.158.214) (Quit: Client closed)
[00:50:59] *** Joins: alzgh (~alzgh@216.155.158.214)
[00:54:25] *** Quits: umbramalison (~umbramali@cust71-dsl49.idnet.net) (Quit: Client closed)
[00:56:45] *** Quits: ubique (~ubique@5-12-54-189.residential.rdsnet.ro) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:56:45] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[00:57:10] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[00:57:59] *** Joins: LordLion_ (sid31081@user/ktllo)
[00:58:03] *** Joins: Karyon_ (~Karyon@user/karyon)
[01:02:07] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[01:03:29] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 268 seconds)
[01:04:24] *** Joins: keypusher (keypusher@user/keypusher)
[01:05:05] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[01:05:05] *** Quits: LordLion (sid31081@user/ktllo) (*.net *.split)
[01:05:06] *** LordLion_ is now known as LordLion
[01:07:12] *** Quits: keypusher (keypusher@user/keypusher) (Remote host closed the connection)
[01:09:00] *** Quits: furrymcgee (~devuan@31.179.186.66) (Quit: leaving)
[01:09:21] <Walex> that "commits record snapshots of the entire directory tree" is the single biggest problem in getting people to understand 'git' because the 'git' terminology at the "porcelain" level is the same as that of VCS designs that records diffs instead of snapshots, and where things like "branches" are real instead of metaphysics like in 'git'
[01:10:06] <Walex> the traditional 'git' commands and terminology is utterly misleading.
[01:11:01] *** Joins: keypusher (keypusher@user/keypusher)
[01:11:15] *** Joins: Vonter (~Vonter@user/vonter)
[01:13:04] *** Joins: shabius (~shabius@2a0e:1c80:2:1021::1005)
[01:16:37] <imMute> Walex: misleading to people who have experience with other VCS.  I think it would be much more clear to explain to someone who has no such prior knowledge.
[01:17:35] <Walex> imMute: I think it is bad also for people with no prior knowledge, because 'git' really does not work like that, using it as if it was an old style VCS is going against the grain.
[01:18:01] <Walex> imMute: it is a matter of style of course, but style drives workflow.
[01:18:25] <imMute> Walex: I think it depends on how it's taught.  when yhou checkout a certain revision in SVN, you get a snapshot.  SVN may store it as deltas, but that's an implementation detail.
[01:18:50] <imMute> now how SVN branches work is very different than how Git branches work (from a forking/merging perspective), but I think either one is equally teachable.
[01:18:59] <nedbat> Walex: i'm curious what bad workflow decision you might make because you misunderstand how git works?
[01:19:00] <imMute> and actually git branches make way more sense to me than svn branches.
[01:19:06] *** Quits: britho (~britho3@071-081-142-203.res.spectrum.com) (Ping timeout: 240 seconds)
[01:19:26] <Walex> imMute: not quite an implementation detail, because storing as deltas makes certain operations very awkward that are very easy in 'git'.
[01:19:50] <imMute> Walex: such as?
[01:20:18] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 240 seconds)
[01:21:32] <Walex> nedbat: the typical 'git' user that I have seen uses 'git' as if it was SCCS or CVS: https://boyter.org/static/books/CpWvVOoW8AAjYmB.jpg
[01:22:11] <Walex> imMute: well, obviously rewriting history or merging and resplitting commits...
[01:22:47] <Walex> BTW my point above was occasionedy by the "shallow" discussion.
[01:23:18] <imMute> Walex: ah, I see.  I would see those as "not possible"  things with SVN.  which would drive your workflow to not use those (or do use them if you have git).  good point though - they're not possible in SVN because of how SVN is designed.
[01:23:24] <Walex> nedbat: then when they reach the limit of that SCCS/CVS approach, they come here because they have heard much more is possible.
[01:23:59] <nedbat> Walex: i guess i'm looking for details of what they are doing wrong by treating it as CVS?  That's what we all do.
[01:24:41] <nedbat> Walex: you mean they aren't using the full power, but earlier it sounded like you were saying they were using it in some bad way.
[01:24:58] <Walex> imMute: another example that I have been thinking of, and the opposite of "shallow": it is possible (skip over whether it is desirable...) to have a single 'git' repo with several completely different, or different but related, projects in it, by simply having multiple remote to different repositories.
[01:26:03] <imMute> nedbat: well one of those 6 commands is "git commit -a", which is a bad (well newbie) practice.  it hides alot of details and thus complexity, but it also limits what you can do
[01:26:25] <nedbat> imMute: ok, but it's got nothing to do with whether git stores deltas or snapshots
[01:26:30] <Walex> imMute: for example I have been thinking of doing that by having remotes do different variants of the Linux kernel, which of course then would share most of their history.
[01:26:41] *** Quits: alzgh (~alzgh@216.155.158.214) (Quit: Client closed)
[01:26:44] <nedbat> i'm interested in the details that git stores snapshots, but I think you can use git just fine without understanding that.
[01:26:56] <imMute> Walex: lol, you could even make it somewhat usable by using worktrees.  I dunno if it'd be worth it to figure it out though :/
[01:27:26] <imMute> nedbat: true, that one is more about that git has a index/stage while other VCS don't.  which opens up workflows that other tools can't
[01:27:33] *** Joins: armin (~armin@unix.porn)
[01:27:41] <nedbat> imMute: Walex made the claim that diff-based terminology was a big problem, and "utterly misleading".  That seems overblown to me.
[01:27:45] <imMute> nedbat: like it's impossible to commit *some* changes in a file with SVN but totally doable with Git.
[01:27:48] <Walex> imMute: nedbat: indeed I agree with "imMute" on "commit -a" because the "index", which should be called "the draft snapshot", gives huge opportunities.
[01:28:03] <imMute> nedbat: so someone coming from SVN would be confused as to what this index thing is because they've never heard of that feature.
[01:28:17] <nedbat> Walex: i agree with you that git becomes more powerful when you understand it more. i still don't think delta vs snapshot feeds into that much.
[01:28:19] <imMute> Walex: I think "stage" is better, but yeah "index" sucks.
[01:28:27] <nedbat> "cache" is even worse
[01:29:49] <Walex> imMute: nedbat: in essence the traditional "six commands" model of using 'git' means that people never even try to understand the "draft snapshot" and its role, and so get really confused between "branches" and "merges" and anything related.
[01:30:26] <nedbat> Walex: i agree with you that people need to understand branches, merging, staging to get the full power of git
[01:30:29] *** Joins: winircuser-337 (~winircuse@170.250.221.149)
[01:31:37] <Walex> I have previously mentioned in this channel that the two things for which Torvalds designed 'git' are 'add -i' and 'rebase -i', because they are central to *his* workflow.
[01:31:56] <nedbat> Walex: i guess I'm still not seeing the connection to snapshots vs diffs
[01:32:24] <imMute> nedbat: snapshots vs diffs is just one example, you're focusing too much on that one.
[01:32:33] <imMute> nedbat: the index is another example
[01:32:38] <nedbat> imMute: ok, it was the thing Walex started with.  I'm happy to move on.
[01:32:57] <Walex> nedbat: my argument is wider than  that: once people learn the "Six Git Commands" approach then understanding the rest of 'git' they get very confused, because they have learned the wrong mental model.
[01:33:00] <imMute> nedbat: examples of implementation details driving workflows (or something like that.  I'm not Walex)
[01:33:17] <nedbat> imMute: it was described as "the single biggest problem"  :)
[01:33:25] <Walex> nedbat: imMute: actualls the snapshot vs. diff is fairly crucial…
[01:33:34] <nedbat> Walex: can you explain how?
[01:33:41] <Walex> nedbat: sure, wait...
[01:33:52] <imMute> Walex: I disagree, but I'll wait for the explanation ;)
[01:34:01] <nedbat> as a data point, i was very good at add-i and rebase-i, branching, etc, before i understood it was snapshots
[01:35:08] <imMute> and honestly, rebase -i makes more sense as "replaying diffs" than whatever the snapshot-centric idea would be.
[01:35:22] <nedbat> yes, it does.
[01:35:36] <Walex> nedbat: if one stores history as full snapshots, it becomes trivially easy to do history editing: all you do it write a new commit with different ancestor refs, and then you adjust "head" refs.
[01:36:00] <nedbat> Walex: sure, but you could also do that by storing diffs, it just shifts the work around.
[01:36:02] <Walex> nedbat: with diffs instead you have to partially play back-and-forth, the diffs, to create hidden snapshots.
[01:36:39] *** Quits: winircuser-337 (~winircuse@170.250.221.149) (Read error: Connection reset by peer)
[01:36:41] <Walex> the mental mode is much clearer with snapshots, not just the implementation.
[01:36:43] *** Joins: raindrop22 (~raindrop@46.140.123.194)
[01:37:14] <nedbat> Walex: you don't think of rebase -i, as "replaying diffs"?
[01:37:35] <Walex> one of the differences is also this (I am not claiming it is that important, but it is illustrative):
[01:37:50] *** Quits: feriman (~feriman@188.163.113.127) (Ping timeout: 244 seconds)
[01:38:45] *** Quits: madewokherd (~urk@comcast.codeweavers.com) (Ping timeout: 268 seconds)
[01:39:12] <Walex> with 'git' ancestors refs are *arbitrary* since each commit stores the whole tree, each commit is fully standalone, and can in theory have entirely random ancestors pointers. This is not really possible in a 'diff' model, where history is a material fact of a series of 'diffs'.
[01:39:15] *** Quits: raindrop (~raindrop@46.140.25.34) (Ping timeout: 268 seconds)
[01:39:37] <Walex> 'git' commits are stateless, historyless, and 'diff' based commits are not.
[01:40:27] *** Joins: Kill-Anirnals (uid481358@id-481358.highgate.irccloud.com)
[01:40:38] <nedbat> Walex: but git goes to some trouble to present them as diffs. For example, cherry-picking a commit can produce a conflict.
[01:41:43] <Walex> that 'git' commits describe the actual succession of states of the worktree is entirely a convention. This allows very easy rewriting of history. In other VCSes history is a material fact embedded in a succession of diffs.
[01:41:45] <imMute> I guess the point is that implementing as snapshots makes it easier to *use* it as snapshots *or* diffs.  while storing as diffs makes it easy to *use* it as diffs, but much harder to deal with snapshots.
[01:42:32] <Walex> imMute: that's also a good way to look at it. But I think that snapshots is a bigger difference than that. Statlessness is a pretty big thing.
[01:42:33] *** Quits: Nixkernal (~Nixkernal@2a02:1205:34ed:fa00:8019:3df5:3af2:77da) (Quit: Leaving)
[01:43:09] <Walex> nedbat: when 'git' presents diffs is as an aid in rewriting history as to content too, if one wants to. It is an illustrative device.
[01:43:56] <nedbat> Walex: if all i knew about commits was that they were stateless snapshots, I would think that cherry-picking a commit just meant, "make this branch look just like that one over there"
[01:44:33] <nedbat> Walex: but it doesn't. "cherry-pick 123abc" means, apply the diff of 123abc^! to this branch.
[01:45:19] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[01:45:35] <Walex> nedbat: well, having snapshots means that one can choose to either copy, drop, or merge history, and if one wants to merge it as to contents too, diffs are nice illusrative device.
[01:45:42] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[01:46:08] *** Quits: ano (~weechat@user/ano) (Ping timeout: 252 seconds)
[01:46:31] <nedbat> Walex: right, i'm agreeing with imMute: snapshots make it easy to use either snapshot semantics or diff semantics.  that's why snapshots are the right storage mechanism
[01:46:45] <Walex> nedbat: the mental model is "merge these two snapshots", rather than "play back and forth two incompatible diff histories".
[01:46:53] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:47:03] *** Joins: ano (~weechat@user/ano)
[01:47:28] <nedbat> Walex: my mental model is: play this diff onto that branch.
[01:47:34] <nedbat> and it hasn't let me down yet.
[01:47:45] <imMute> I think you two are talking about two different things just now...
[01:47:58] <imMute> Walex sounds like merging, nedbat sounds like cherry-picking
[01:48:01] <nedbat> i was talking about cherry-pick
[01:48:04] <Walex> nedbat: well that model does not work for me, because it breaks in non-trivial cases.
[01:48:18] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[01:48:55] <imMute> can you give an example of where "cherry-pick is applying a diff" breaks down?   Conflicts are always possible (since the starting point isn't identical) but where does that mental model *break* ??
[01:50:52] *** Joins: h3ck (~rach@user/h3ck)
[01:51:04] <Walex> imMute: it breaks when one considers the relationship between the source histories and the target history. It gives the impression that there is a steam of diffs being copied from one history to another putting them in a kind of relationship.
[01:51:43] <Walex> I am not sure I am being clear here, it is difficult to express it.
[01:51:58] <imMute> but nedbat just said that cherry pick means "make a diff between X-1 and X and apply it here".  that doesn't mean that the history is stored as diffs, it just means synthesize one from two snapshots
[01:51:59] <h3ck> Hi, I'm working on a project where it requires me to pull data from another repo and use it for the current repo. I found submodule feature handy here. However, it's a bit difficult to understand as a beginner. Is there any other way to do the same job?
[01:52:32] <imMute> h3ck: subtrees are another option, but I think they might be even more difficult to understand as a beginner.  neither just aren't beginner tools.
[01:52:49] *** Quits: raindrop22 (~raindrop@46.140.123.194) (Ping timeout: 268 seconds)
[01:52:53] <h3ck> ... subtrees
[01:52:54] <nedbat> h3ck: can you just put the two repos side-by-side?  Why do they have to nest?
[01:53:05] <h3ck> side by side as in?
[01:53:27] <Walex> h3ck: which "data" do you want to pull? Do you want to just fork another repo?
[01:53:41] <nedbat> h3ck: two directories without one containing the other.  Both children of some other directory.
[01:54:18] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Remote host closed the connection)
[01:54:20] <h3ck> Walex, so there's a repo full of json files someone maintains, and i need to use that in my repo.
[01:54:46] <Walex> h3ck: you need to use the same JSON files in your project?
[01:54:53] <h3ck> nedbat, i could do that but the data repo gets updated every 2 week or so
[01:55:00] <h3ck> Walex, yes
[01:55:04] <nedbat> h3ck: ok, so pull new data every 2 weeks
[01:55:22] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[01:55:41] <Walex> h3ck: can't you just clone that repo and then add your stuff? If you cannot, a point I just made in our previous discussion comes handy.
[01:55:42] <imMute> h3ck: do you make changes to these files or just pull them in as is?
[01:56:47] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[01:56:54] <h3ck> Walex, imMute, I understand both points. I'm actually a mentee with 2 mentors above me. Both maintains different repos and I've got to revamp a server using the data from the other repo
[01:57:21] <imMute> h3ck: that makes even less sense now...
[01:57:32] <h3ck> it's confusing for me itself, i did ask why keep separate repo for same project purpose.
[01:57:46] *** Joins: oriba (~oriba@x4dbfdbb9.dyn.telefonica.de)
[01:57:48] <Walex> h3ck: lets do a simple check: what prevents you from just copying the JSON files in your project repo and checking them in?
[01:58:20] <Walex> h3ck: lets do a simple check: what prevents you from just copying the JSON files in your project working tree and checking them in?
[01:58:22] <h3ck> Walex, what does "checking" mean here?
[01:58:41] <Walex> h3ck: h3ck: committing them as new files...
[01:59:10] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[01:59:17] <Walex> h3ck: if you don't want to do that, is it because they get periodically updated, or because you want to save space?
[01:59:18] <h3ck> I did think that. My mentors chose to separate the json files themselves...
[01:59:27] <h3ck> to a separate repo
[01:59:40] <h3ck> they said it's clearer that way
[01:59:52] *** Parts: ecommence (~ecommence@136.243.16.102) ()
[02:00:06] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[02:00:16] <Walex> h3ck: do you the files to have a different path in your project than in the original project?
[02:00:22] <h3ck> ...i was left with no option but see how i can pull from the data repo into the main repo...so i chose submodule
[02:00:49] <h3ck> Walex, same path
[02:01:04] * Walex is thinking of a remote to the source repo, and then merging the remote into the local project.
[02:01:14] <h3ck> like serverrepo/data and datarepo/data
[02:01:33] <Walex> h3ck: a submodule is a bit of a complication in 'git', something a bit unnatural.
[02:01:42] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[02:01:47] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[02:02:05] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[02:02:07] <Walex> h3ck: that's why the other guys were a bit skeptical.
[02:02:26] <h3ck> Walex, ah then about your thought on merging... how exactly will that work?
[02:03:08] <Walex> h3ck: it is something not too different from "cloning" the "mentorrepo" to the "mentee" repo.
[02:03:12] <h3ck> but won't merging just mean I'm adding the data files to the server repo? which was not permitted by my higher authorities? :')
[02:04:16] <Walex> h3ck: please make clear what names you have chosen for your own project repo, and the data repo created by your mentors.
[02:04:24] *** Joins: madewokherd (~urk@65-128-250-224.mpls.qwest.net)
[02:05:04] <Walex> h3ck: saying "a repo", "another repo" is just confusing.
[02:05:41] <h3ck> Okk Walex. So both of the repo belong to the mentor. Names: server_repo is the main project repo. datarepo is the repo from where i need to pull json files
[02:06:32] <h3ck> now my task is to use the json files without including them into the server_repo
[02:06:55] <h3ck> including as in pushing them or merging them, whatever
[02:07:17] <imMute> h3ck: given that constraint, your only option is submodules.
[02:07:27] <h3ck> T-T
[02:07:37] <imMute> h3ck: or having a build script that clones the other repo and checks out whatever commit makes sense
[02:07:56] <nedbat> h3ck: can you say more about how the server code references the json data files?
[02:08:07] <Walex> h3ck: so you work on 'server_repo' and you want those files to appear under 'data/' in the working tree as well as those of 'datarepo'.
[02:08:08] <imMute> h3ck: what can I say.  you've been given non-beginner constraints, so you're gonna need to use non-beginner tools.
[02:08:36] <Walex> imMute: that "given that constraint, your only option is submodules" is not necessarily right.
[02:08:54] <h3ck> yes sure nedbat. The json files are read from and displayed as search results
[02:08:57] <imMute> Walex: what other option is there?  subtrees seem to be disqualified.
[02:09:25] <h3ck> imMute: I understand. I'm open to learning stuff. Just so i wanted to be sure on irc first
[02:09:27] <Walex> imMute: the directive 'h3ck' has received is to avoid putting those files in the 'server_repo', no in his local clone of the 'server_repo'. So he cannot "push" them.
[02:09:55] <Walex> imMute: but arguable he can put them in his clone of 'server'repo'.
[02:10:05] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 268 seconds)
[02:10:18] <imMute> Walex: I think t echnically that'd be allowed, but I don't see it as being an acceptable (to his mentors) solution :/
[02:10:27] <nedbat> h3ck: ok, but how does the server know where the json files are?
[02:10:52] <Walex> so what I am thinking is a local repo with two remotes, one to 'server_repo' and one to 'datarepo'.
[02:11:01] <imMute> nedbat: I would assume it has a configurable/hardcoded path to them.  why does it matter?
[02:11:07] <h3ck> Walex, you're indexing that i *might* have those files on my server_repo but not commit/push them?
[02:11:13] <nedbat> imMute: because if the two repos can simply be side-by-side, it will be simple
[02:11:42] <nedbat> imMute: we're headed down the path of one working tree with two remotes to unrelated repos, which is very very unusual
[02:11:47] <Walex> h3ck: with 'git' as a rule you don't work on 'server_repo', but on a local clone of 'server_repo'.
[02:12:13] <h3ck> Yes yes Walex. Got that
[02:13:15] <Walex> nedbat: "one working tree with two remotes to unrelated repos, which is very very unusual" HAHAHHA! :-) That is exactly the point I was making above about "traditional" VCS thinking blinding people to obvious possibilities.
[02:13:17] <h3ck> nedbat, the files can be thrown into a directory and the app.js is given the name of the directory from which it can access the files
[02:13:24] <nedbat> Walex: "obvious"
[02:13:41] <nedbat> Walex: you are very advanced.  most people would be confused by this. that doesn't make it the right solution.
[02:13:45] <Walex> nedbat: "obvious" in 'git', which is my point.
[02:13:55] <nedbat> Walex: you really don't consider it unusual?
[02:13:56] *** Joins: jmcantrell (~weechat@86.106.143.32)
[02:15:00] *** Joins: __jmcantrell__ (~weechat@89.45.224.250)
[02:15:11] <Walex> nedbat: it is "unusual" in the sense that it is something that it is almost inconceivable in traditional diff based VCSes, like 'add -i' or 'rebase -i', but trivial in 'git'.
[02:15:23] <nedbat> Walex: my question is about how git users would view it
[02:15:24] <h3ck> nedbat, imagining what you suggested. I'll tell a bit more. Server_repo: all app contents. Data_repo: readme+data_dir
[02:15:42] *** jmcantrell is now known as Guest715
[02:15:42] *** Quits: Guest715 (~weechat@86.106.143.32) (Killed (zirconium.libera.chat (Nickname regained by services)))
[02:15:42] *** __jmcantrell__ is now known as jmcantrell
[02:15:57] <h3ck> So... submodules it is for me :'D
[02:16:07] *** Joins: __jmcantrell__ (~weechat@89.45.224.149)
[02:16:07] *** Quits: jmcantrell (~weechat@89.45.224.250) (Killed (mercury.libera.chat (Nickname regained by services)))
[02:16:07] *** __jmcantrell__ is now known as jmcantrell
[02:16:07] <nedbat> Walex: and whether it is a good idea to suggest to someone who is asking what "checking in" means.
[02:16:18] <h3ck> imMute also suggested subtree, I'll see what i can make out of it
[02:16:23] <Walex> nedbat: 'git' users trained in the "Six Git Commands" would find it quite unusual, yes.
[02:16:49] <nedbat> Walex: i get your point: 99% of people are dopes who don't use the power of git.
[02:17:00] <Walex> nedbat: but again that they would find is quite unusual is my point.
[02:17:44] <nedbat> Walex: at least we agree that they would find it so
[02:18:03] <Walex> nedbat: it is not quite "dopes who don't use the power of git" but they have been trained to think in a non-'git' way, "against the grain".
[02:19:03] <Walex> If most 'git' users are trained to think of a particular restrictive mental model of 'git' that is only compatible with certain traditional workflows, they will indeed have difficulty imaginging different workflows.
[02:19:33] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[02:19:38] <imMute> Walex: I'm pretty experienced with Git and the idea of having totally unrelated histories in the same repo is unusual to me (even though I understand perfectly *how* it would work)
[02:19:55] <imMute> Walex: it's like an even higher tier than add-i/rebase-i is above the 6-git-commands.
[02:20:15] <Walex> imMute: but it should not be an even higher tier!
[02:20:19] <nedbat> Walex: help me understand: if you use two remotes like that, and they both have a README.txt, what will happen?
[02:20:52] <imMute> nedbat: you know how git can have more than one "first commit" (a commit with no parent)?   it's like that, except the two histories *never* merge.
[02:21:19] <imMute> nedbat: a given worktree can only have one of those histories chekced out. so the nanswer to "which README do you get" is "whichever one you checked out"
[02:21:33] <Walex> nedbat: is that a problem? They are _remotes_ and nobody forces people to checkout both of them.
[02:22:14] <Walex> imMute: because they are remotes, they can be merged on a local "branch", just list two local branches.
[02:22:38] <nedbat> Walex: ok, and if you merge on a local branch, the files will conflict, right?
[02:22:38] <imMute> Walex: right, that's basically what git-subtree does.
[02:23:03] <Walex> BTW the multiple remotes actually in a sense is a special case of a very common case.
[02:23:10] <imMute> nedbat: Walex is suggesting using this on two different repos that don't have overlapping files (or at least making them non overlapping when you merge).
[02:23:17] <imMute> so pretty much reimplementing git-subtree-merge
[02:23:43] <Walex> nedbat: so whart if they conflict? there are many ways of resolving the conflict, or avoiding it.
[02:23:48] *** Joins: alzgh (~alzgh@216.155.158.214)
[02:24:04] <nedbat> Walex: i'm just trying to understand the mechanics
[02:24:10] <Walex> nedbat: it depends on the objectives of having two remotes.
[02:24:38] <imMute> nedbat: "git init ; git remote add linux https://github.com/torvalds/linux.git ; git remote add u-boot https://github.com/u-boot/u-boot.git"  you now have a repo with 3 totally unrelated histories.  have fun :)
[02:24:42] <Walex> nedbat: BTW I like your objections because they sharpen my own understanding...
[02:24:45] <nedbat> h3ck: are you going to be updating the server code? or the data? or both?
[02:25:31] <nedbat> or neither?
[02:25:31] <Walex> imMute: that a workflow is trivially possible in 'git' does not mean that it always makes sense.
[02:25:48] <Walex> imMute: it all depends on circumstances.
[02:25:54] <imMute> Walex: oh for sure
[02:25:58] <nedbat> Walex: btw, i would adjust your use of "trivial" and "obvious" :)
[02:26:17] <h3ck> nedbat: for the moment, the data is on priority
[02:26:42] <nedbat> h3ck: ok, will you be updating the data and commit changes to it?
[02:26:49] <h3ck> server code may get updates if there are bug fixes in future
[02:27:19] <nedbat> h3ck: my question is about whoever will be using the arrangement you come up with: will they be changing and making commits?
[02:27:19] <Walex> nedbat: the mechanics are based on the idea that 'git' commits are standalone statless snapshots that don't need to be related to each other in any way, and that "remotes" are really just local "HEADS" with attached an URL.
[02:27:21] <h3ck> I won't change the data nedbat :) the higher authorities do that for me. I just pull the upstream changes
[02:27:31] *** Quits: sheepduck (~sheepduck@cpe98524a8cef7c-cm98524a8cef7a.cpe.net.cable.rogers.com) (Remote host closed the connection)
[02:27:52] *** Joins: sheepduck (~sheepduck@cpe98524a8cef7c-cm98524a8cef7a.cpe.net.cable.rogers.com)
[02:28:08] <imMute> Walex: I'd use a different term than "HEAD" there.  HEAD is a singular thing - the currently checked out commit in the current repo.
[02:28:41] <Walex> h3ck: imMute: I should have written "heads" lower case, I just used upper case for emphasis.
[02:29:07] <Walex> h3ck: imMute: to avoid writing something like "*heads*"...
[02:29:20] *** Quits: sheepduck (~sheepduck@cpe98524a8cef7c-cm98524a8cef7a.cpe.net.cable.rogers.com) (Remote host closed the connection)
[02:29:46] <imMute> Walex: you mean "branches" then?  cuz that's what they are.  just in a different namespace than most branches people interact with (refs/remotes/foo/ vs refs/heads/)
[02:30:05] <h3ck> i am mutely enjoying this conversation.
[02:30:39] <imMute> same.  usually discussions like these get shouty quickly, so this is enjoyable :)
[02:30:58] <Walex> imMute: one of my usual points is that "branches" are an illusion, metaphysics in 'git', and "heads" (head refs) are what one should mention :-)
[02:31:16] * h3ck is pleased to have asked the question
[02:31:21] *** Joins: sheepduck (~sheepduck@cpe98524a8cef7c-cm98524a8cef7a.cpe.net.cable.rogers.com)
[02:31:44] <Walex> h3ck: BTW your explanations of what you are trying to do seem to me quite confused.
[02:32:05] <nedbat> Walex: can you at least say "confusing", or "I am confused"?
[02:33:44] <h3ck> Walex, if the task was just simple fetch data from json data present in the repo, git would have nothing to do with it. Only that the challenge is the data files are in a separate repo. And they get updated regular :(
[02:34:07] <Walex> nedbat: I am not american with a "participation trophies" mindset :-), so it is quite diplomatic that I wrote "seem to me" :-)
[02:34:44] *** Joins: Nalt (~Nalt|||@cpe-173-174-25-173.stx.res.rr.com)
[02:35:15] *** Quits: Adoi (~Adoi@user/adoi) (Remote host closed the connection)
[02:35:30] *** Joins: Adoi (~Adoi@user/adoi)
[02:35:47] <nedbat> Walex: I am not an american with a participation trophies mindset.  I am kind.
[02:36:21] <Walex> h3ck: I dont' quite understand that "fetch data from json data" because while that may mean something to you, those are undefined terms to me, even if they seem vaguely related to things you have said previously.
[02:37:03] <Walex> nedbat: is it kindness to let people sink in the mire of confusion to avoid suggesting that as an impression?
[02:37:16] <nedbat> Walex: just say, "I am confused", and you will get more explanation
[02:37:43] <imMute> Walex: now you're just getting wordy.
[02:37:48] <nedbat> "your explanations are confused" is condescending
[02:37:59] <Walex> nedbat: there is a difference between "more explanation" and "more explanation that makes sense"
[02:38:18] <Walex> nedbat: I never said "your explanations are confused", even if I do think it.
[02:38:40] <Walex> nedbat: I said "seem to me quite confused".
[02:38:42] <h3ck> broadly speaking, it's just a application that searches for a keyword entered by a user, among the json data .
[02:40:19] <Walex> h3ck: and what is your task? What have you been asked to do?
[02:41:10] <h3ck> I've been ask to improve the UI of the application. Make it more user friendly, yk the developer stuff
[02:41:44] <Walex> h3ck: you have mentioned that there are upstream "server_repo" and "datarepo", but of them created by someone else, and you have to use both, and you have them currently both checked out, one as principal repo, and one as submodule.
[02:42:34] <h3ck> plus with this, this project was dead for few years. It got new maintainers, and *me* to revamp it.
[02:42:39] <nedbat> h3ck: i would avoid submodules if I were you
[02:42:51] <Walex> h3ck: someone else asked: which ones have you been asked to update? Just 'server_repo'? Just 'datarepo'? Both?
[02:43:27] <h3ck> nedbat, I've already started trying since you guys started the interesting conversation :'D
[02:43:39] <nedbat> h3ck: ok, i hope it goes well.
[02:43:57] <Walex> h3ck: we have also been told that you want the JSON files in both repos to appear in the working tree in the same directory. Is that still true?
[02:44:07] <nedbat> h3ck: i was trying to find out if the server could be configured to find the data files elsewhere than in the server code's working tree.
[02:44:10] <h3ck> Walex, the server repo will updated mostly by me(since I'm improving the UI) The data_repo will be updated by the mentors from time to time
[02:45:00] <Walex> h3ck: that is as I had imagined, but it took a bit of effort to be sure.
[02:45:02] <h3ck> Walex, about your working tree question, yes
[02:45:07] <Walex> h3ck: good.
[02:45:46] <h3ck> nedbat: hehe.
[02:45:59] <Walex> h3ck: so what your mentors have said is that you should not commiot the JSON files from the 'datarepo' to the 'server_repo', is that it?
[02:46:05] *** Joins: jazzy (~jaziz@2600:380:8739:55:6dd6:5004:ea3a:7085)
[02:46:21] <h3ck> Walex, YES! you're correct
[02:46:32] <Walex> h3ck: so the 'server_repo' should not contain duplicates of files in 'datarepo'.
[02:46:49] <h3ck> and though i did ask them WHY. I see the reason, they didn't want the server to stay bulky maybe
[02:47:17] <h3ck> Walex, it shouldn't, right? that's why i thought of submodules
[02:47:18] <Walex> h3ck: "the server" to me is a confusing term.
[02:47:53] <h3ck> Ahhh consider it's a directory with all app.js and config and html/css files and testing files
[02:48:03] <Walex> h3ck: "the server" to me is a confusing term. and inconsitent with "server_repo". If you use different terms to indicate the same thing it gets pretty messy.
[02:48:50] <Walex> h3ck: are you doing all this on a GNU/Linux system?
[02:48:58] <h3ck> yes yes
[02:49:10] <h3ck> I'm testing on 3 different distros
[02:49:11] <Walex> h3ck: then I think you have two options:
[02:49:35] <h3ck> SUSE being the most annoying T-T
[02:50:05] <Walex> premise: the two critical requirements that took a bit of effort to get out in the open are:
[02:50:34] <Walex> A) the working tree *must* be checked out from two different repos.
[02:50:35] * h3ck waiting patiently
[02:50:41] <Nalt> I am new to using git and interacting with repositories. I have cloned a repository from GitHub which I wish to contribute to. The next step I should do is make a Branch for the (local) Main repo, right?
[02:50:53] <Walex> B) the files checkeout from 'datarepo
[02:51:05] <Walex> B) the files checkeout from 'datarepo' must not be committed to 'server_repo'.
[02:51:34] <h3ck> B) correct and comprehensive for me
[02:52:05] <nedbat> h3ck: is A really true? Why must the data files be in the same working tree as the server code?
[02:52:27] <h3ck> because the app needs the data to function :')
[02:52:35] <h3ck> but wait
[02:52:44] <h3ck> it isn't in the working tree
[02:52:47] *** Parts: jmcantrell (~weechat@89.45.224.149) (WeeChat 3.2)
[02:52:47] <nedbat> h3ck: i don't understand this part: can the app be told where the data is?
[02:52:53] <nedbat> h3ck: oh, where is it?
[02:53:01] <h3ck> it's *just* in the server_repo directory
[02:53:03] *** Quits: m0viefreak (~asdf@user/m0viefreak) (Remote host closed the connection)
[02:53:22] <h3ck> it's not committed or...staged (I'm not good at these names)
[02:53:27] <nedbat> h3ck: can it be some place else than the server_repo directory?
[02:53:37] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3-dev)
[02:53:44] <nedbat> h3ck: you are working on the server code, right? you can change it.
[02:53:45] <h3ck> then i need to change the installation docs too
[02:53:59] <nedbat> h3ck: yes, you would need to do that too, but that is easy.
[02:54:00] <h3ck> which is..not good?
[02:54:03] <Walex> one obvious way to do it involves 'git' not at all: you clone 'server_repo' and 'datarepo' in two different places, and you create syumbolic links from the files in the checkout of 'datarepo' to the directory 'data' in the checkout of 'server_repo'.
[02:54:08] <nedbat> h3ck: why is that not good?
[02:54:29] <nedbat> h3ck: how is the server installed now? Where does the code come from, and where does the data come from?
[02:54:33] *** Quits: murd0c (~murd0c@user/murd0c) (Quit: WeeChat 2.6)
[02:54:42] <h3ck> Walex, I actually see light on the other side of the tunnel now.
[02:54:52] <Walex> nedbat: your understand why I have been asking for explanations that seem less confused to me" now.
[02:55:14] <nedbat> Walex: i always understood why you wanted more explanations.
[02:55:23] <nedbat> Walex: i also thought there were better ways to ask for them
[02:55:26] <h3ck> nedbat: server is cloned from github repo
[02:55:33] <nedbat> h3ck: ok, and the data?
[02:55:49] <Walex> h3ck: note that you must prevent 'git' from committing the symbolic links in some form or another.
[02:55:52] <h3ck> data too, a different repo
[02:55:55] <h3ck> on GitHub
[02:56:12] <nedbat> h3ck: ok, and do the installation instruction say where to clone them *to*? What directories?
[02:56:23] <h3ck> Walex, understood. I'll definitely consider this. Sounds neater
[02:56:55] <h3ck> nedbat: no no. Just "Clone the repo, then do this and that..."
[02:56:55] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[02:57:17] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[02:57:20] <nedbat> h3ck: ok, but there are two clone commands in the installation instructions already, yes? And the instructions result in a working server, right?
[02:58:01] <nedbat> Nalt: weird to ask about git things here, and then ask again in #python, and get a full discussion....
[02:58:16] <h3ck> Installation doc has yet to add the data part. As i told, it's an old project which was abandoned. So data linking will be done by the mentors in the coming days
[02:58:44] <Nalt> nedbat, well, I also had a question about using PyCharm, but apologies.
[02:58:44] <Walex> Nalt: that depends on the workflow you want to do.
[02:58:56] <h3ck> sorry, not data linking. Adding and updating the data_repo
[03:00:08] <Walex> Nalt: do you understand the difference between a remote ref and the matching local "head" ref?
[03:00:24] <Nalt> I have never heard of a "ref"
[03:00:41] <nedbat> Nalt: catch us up with the state of your question now
[03:00:53] <Walex> Nalt: they are sometimes confused with "branches"
[03:01:02] <nedbat> h3ck: ok, but the server already serves the data, right?
[03:01:46] <h3ck> nedbat: good question. Actually *not yet*
[03:02:00] *** Quits: natrys (~natrys@user/natrys) (Ping timeout: 268 seconds)
[03:02:01] <Walex> Nalt: I will suggest two things, one is an intro to 'git', and the other is describe two typical workflows that you can choose.
[03:02:25] <nedbat> h3ck: ok, then you will be writing the code that reads the data files, is that right?
[03:02:25] <Nalt> Question: What is the workflow for contributing to a repo? In this case, the repo is located on GitHub. -- Here is what I have done: git clone URL. Do I need to make a branch now?
[03:02:43] <Walex> Nalt:  as to the second, do you a vague mental concept of "branch"?
[03:02:45] <Nalt> Walex, for context I have been following: https://learngitbranching.js.org/
[03:02:52] <h3ck> and folks update: submodules is working. I'll take Walex' ln solution to them. Let's see what they say
[03:03:05] <Nalt> I think so. That is the second tutorial in the URL I shared above.
[03:03:17] <nedbat> h3ck: can you humor me for one moment while we finish this line of questioning?
[03:03:44] <h3ck> nedbat: No :'D that part is written. The logs of my server say "data xyz not found"
[03:03:46] <Walex> Nalt: OK, I will do violence to myself and use improper terminology in the following.
[03:04:05] <h3ck> nedbat: I'm here as long as you have questions sir
[03:04:05] <nedbat> h3ck: ok, but you can change that part if you want, right?
[03:04:14] <Walex> Nalt: when you clone you get *two "branches": "remote/main" and "main".
[03:04:29] <Walex> Nalt: initially they are the same.
[03:04:30] <h3ck> nedbat: yep, if I'm mighty enough
[03:04:51] *** Quits: d1b (~db@user/d1b) (Ping timeout: 272 seconds)
[03:04:52] <nedbat> h3ck: do you know where that line of code is?
[03:04:53] <h3ck> (which I don't feel currently)
[03:04:57] <Walex> Nalt: then you can modify "main", and this will not modify "remote/main".
[03:05:24] *** Joins: d1b (~db@user/d1b)
[03:05:26] <Walex> Nalt: "remote/main" represents the state of things on GitHub.
[03:05:28] <h3ck> it's not a line tbh nedbat. it's a method under a class. several lines :D
[03:05:33] <Nalt> Interesting okay.
[03:06:03] <Walex> Nalt: so you have option A and option B, the simplest:
[03:06:06] *** Quits: tsdh (~user@j289989.servers.jiffybox.net) (Remote host closed the connection)
[03:06:35] <h3ck> Walex, do you do the option A and B procedure often?
[03:06:50] <nedbat> h3ck: ok, good luck with the submodules, i bet it will work fine.
[03:07:18] <h3ck> It is fine actually. But when there are neater ways, it'll be good to explore
[03:07:44] <h3ck> I've never been on this channel for so long before lol. Thanks folks y'all are amazing
[03:08:08] <Walex> Nalt: A) you modify 'main' directly,  and use 'git pull' to get stuff from GitHub into 'remote/main' and then into 'main', which may then require a "merge", and then you do 'git push' to move your changes to 'remote/main' and then to GutHub.
[03:08:26] <Nalt> Yep yep
[03:09:25] <Nalt> So is there any point to making a branch of 'main' on your local computer?
[03:09:48] <Walex> Nalt: B) you clone branch 'main' into branch 'Nalt' (or 'local' or whatever), you work on that without caring much what happens to 'main', which you keep as an exact mirror of 'remote/main', and occasionally you merge 'main' to 'Nalt
[03:10:29] <Nalt> okay
[03:10:30] <Walex> Nalt: B) you clone branch 'main' into branch 'Nalt' (or 'local' or whatever), you work on that without caring much what happens to 'main', which you keep as an exact mirror of 'remote/main', and occasionally you merge 'main' to 'Nalt', and when you are ready, you merge back 'Nalt' to 'main' and push back to 'remote/main' and GitHub.
[03:10:59] <Nalt> right that is the flow I was thinking of
[03:11:25] <Nalt> though it seems redundant
[03:11:39] <Walex> A) is a bit simpler, B) allows a more detached development from "upstream".
[03:12:20] <Walex> Nalt: B becomes interesting when you have several 'Nalt' branches, each of them representing a different "feature" for example, or a different way to approach the problem.
[03:12:43] <Nalt> I suppose you would have several branches to work on different features of a project
[03:13:02] <Nalt> I spoke with others about this a day or so ago
[03:13:04] <Walex> Nalt: that's another typical workflow.
[03:13:27] <Walex> Nalt: multiple "feature" branches are also why there are "octopus" merges.
[03:14:17] *** Joins: richbridger (~richbridg@213-225-3-25.nat.highway.a1.net)
[03:15:14] <Walex> So I recommend an introduction: the O'Reilly booklet "Git Pocket Guide" that explains fairly well how 'git' actually works and how it can be used, at least in "traditiional" ways.
[03:15:31] <Walex> Then there is the eternal official 'git' SCM online book.
[03:16:10] *** Joins: ferdna (~ferdna@user/ferdna)
[03:16:21] *** Joins: Nalt| (~Nalt|||@cpe-173-174-25-173.stx.res.rr.com)
[03:16:27] <Walex> Nalt: also please forgive me when you realize that I have given you subtly misleading information talking about "branches" :-)
[03:16:30] <Nalt|> Apolgies, network issue.
[03:17:14] <Walex> Nalt: what's the last line you got?
[03:18:06] <Nalt|> "...also why there [they] are [called] "octopus" merges."
[03:18:25] <Walex> So I recommend an introduction: the O'Reilly booklet "Git Pocket Guide" that explains fairly well how 'git' actually works and how it can be used, at least in "traditiional" ways.
[03:18:28] <Nalt|> https://i.imgur.com/qkvhtaH.png seems to be what you are describing in our conversation
[03:18:38] <Walex> Nalt: also please forgive me when you realize that I have given you subtly misleading information talking about "branches" :-)
[03:18:47] <Walex> Then there is the eternal official 'git' SCM online book.
[03:18:54] *** Quits: Nalt (~Nalt|||@cpe-173-174-25-173.stx.res.rr.com) (Ping timeout: 264 seconds)
[03:19:06] <Nalt|> Gotcha okay. I'll grab those resources
[03:20:02] <Walex> Nalt|: https://boyter.org/static/books/CpWvVOoW8AAjYmB.jpg
[03:20:09] <nedbat> Walex: so you don't like the term "branch" either? :)
[03:20:57] <Walex> nedbat: I wrote that several times above: in a snapshot based filesystem they are illusions.
[03:21:22] <nedbat> Walex: if you say so
[03:21:44] <Nalt|> Okay so right now I want to make a branch of the 'main' branch to work on a specific feature (a parser of words) of the project. To do that, I will type: git branch parser. Now how do I know I am working in that branch when I want to modify code using PyCharm ?
[03:22:05] *** Quits: amanita_ (~amanita@user/amanita) (Ping timeout: 252 seconds)
[03:22:47] <nedbat> Nalt|: "git branch parser" makes a branch, but does not switch you to that branch.
[03:22:51] <Nalt|> oh, git checkout parser, would be what I need to do?
[03:23:25] <Nalt|> and then when I am done making my contributions, git commit, !
[03:23:27] <nedbat> Nalt|: i use "git switch -c parser" to do both, but yes, "git checkout parser" will work after "git branch parser"
[03:23:42] <Nalt|> switch :o ?!
[03:23:46] <Nalt|> that is new to me.
[03:23:51] <nedbat> Nalt|: you would use "git add" and then "git commit"
[03:24:02] <nedbat> Nalt|: it's a relative new command
[03:24:30] <nedbat> *relatively
[03:25:02] <Nalt|> is there a "help" command for seeing what arguments a command takes? For example, git help switch ?
[03:25:09] <nedbat> Nalt|: sure, try it
[03:25:26] <Walex> Nalt|: if you start using 'git' in the "Six Git Commands" way without realizing it is not quite right, you will learn bad habits. So don't be taken in :-)
[03:26:20] <Nalt|> "fatal: 'C:/Users/Nalt/Anaconda3/envs/Moros/Library/mingw64/share/doc/git-doc': not a documentation directory."
[03:27:16] <nedbat> Nalt|: what did you type that did that?
[03:27:18] *** Joins: gothicserpent (~gothicser@static-198-54-129-77.cust.tzulo.com)
[03:27:44] <nedbat> Nalt|: don't let alarmist experts put you off :)
[03:27:50] <Walex> Nalt|: use of Anaconda can cause serious illness or hallucinations. HEALTH WARNING :-)
[03:27:56] <Nalt|> nedbat, https://i.imgur.com/Q68Itde.png
[03:28:01] <Nalt|> Walex, but you recommended the book to me
[03:28:18] <nedbat> Nalt|: try this:  git switch --help
[03:28:34] <Nalt|> same error
[03:28:35] <nedbat> it might be the same, but maybe not
[03:28:37] <nedbat> ugh
[03:28:54] <Nalt|> I installed git using "conda install git" iirc
[03:28:58] <Walex> Nalt|: the "Six Git Commands" cover photos is a humorous fake, the booklet I recommended is ther ancient "Git Pocket Guide".
[03:29:03] *** Joins: amanita (~amanita@user/amanita)
[03:29:09] <Nalt|> Walex, oh,
[03:29:16] <Walex> Nalt|: https://boyter.org/static/books/CfSQdwUW8AErog1.jpg
[03:29:40] <Walex> Nalt|: https://boyter.org/static/books/Cf7eHZ1W4AEeZJA.jpg
[03:29:44] <Nalt|> you cannot make jokes with me yet. I am too new!
[03:29:58] <Walex> Nalt|: https://boyter.org/static/books/pRDPMx2.jpg
[03:31:05] <Walex> Nalt|: actually most people in your situation use a GUI frontend to 'git', not command line.
[03:31:23] <Walex> Nalt|: that has an advantage and a disadvantage:
[03:31:31] *** Quits: thiago (~thiago@2601:1c0:4501:635c:4ebf:e21f:b6ec:87cc) (Quit: Lost terminal)
[03:31:32] <Nalt|> I want to learn it this way
[03:31:53] *** Quits: jsrnop (~mark@pool-72-66-97-117.washdc.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[03:31:59] <nedbat> Nalt|: you are doing great.  the command line will be good.
[03:31:59] <s17> `man git-switch`
[03:31:59] <gitinfo> the git-switch manpage is available at https://gitirc.eu/git-switch.html
[03:32:04] <Walex> Nalt|: the advantage is that a GUI frontend allows you to see history and branching much more easily, the other is that it restricts you to certain workflow habits.
[03:32:22] *** Joins: jsrnop (~mark@pool-72-66-97-117.washdc.fios.verizon.net)
[03:32:32] *** Joins: thiago (~thiago@2601:1c0:4501:635c:50fe:568:2ce0:1e74)
[03:32:49] <Nalt|> s17, hm, I recall than "man" is like this help documentation thing but I don't have that in my anaconda environment. gitinfo, looking now thank you.
[03:32:49] <gitinfo> Nalt|: you're welcome, but please note that I'm a bot. I'm not programmed to care.
[03:32:56] <Nalt|> oh :(
[03:32:59] <Walex> Nalt|: it is dangerous to use a wrapper if you are taken in by it, but it is quite convenient if you keep in mind it is just a wrapper.
[03:33:02] <s17> lol
[03:34:14] * Walex often uses the EMACS simplest wrapper for 'git' and other SCMs and VCSes, when the workflow is simple.
[03:34:52] *** Joins: Nalt|| (~Nalt|||@cpe-173-174-25-173.stx.res.rr.com)
[03:37:42] *** Quits: Nalt| (~Nalt|||@cpe-173-174-25-173.stx.res.rr.com) (Ping timeout: 244 seconds)
[03:39:18] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 264 seconds)
[03:42:11] *** Joins: budo (~budo@c-24-62-207-85.hsd1.ma.comcast.net)
[03:42:36] *** Joins: Nalt (~Nalt|||@cpe-173-174-25-173.stx.res.rr.com)
[03:44:42] *** Quits: Nalt|| (~Nalt|||@cpe-173-174-25-173.stx.res.rr.com) (Ping timeout: 240 seconds)
[03:45:06] *** Quits: unluckyshrubbery (~unluckysh@097-070-104-004.res.spectrum.com) (Ping timeout: 240 seconds)
[03:45:16] <Nalt> so before I disconnect again...  after I make the new branch and switch to it within the terminal...do I have to do anything special when I open up PyCharm (my code editor)
[03:45:39] *** Joins: unluckyshrubbery (~unluckysh@097-070-104-004.res.spectrum.com)
[03:47:52] *** Quits: h3ck (~rach@user/h3ck) (Remote host closed the connection)
[03:48:02] <Nalt> ?*
[03:49:18] <s17> no
[03:50:25] *** Joins: Xenguy (~Xenguy@devuan/developer/Xenguy)
[03:51:57] <Nalt> Walex, git clone "Git Pocket Guide" doesn't work unfortunately lol. Though,I found the book and its downloading now.
[03:53:54] <Nalt> Thank you all for discussing with me so far. I have learned a lot!
[03:56:21] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:56:24] *** Quits: Xenguy (~Xenguy@devuan/developer/Xenguy) (Quit: Leaving)
[04:06:22] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 252 seconds)
[04:07:21] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 272 seconds)
[04:08:14] *** Quits: oriba (~oriba@x4dbfdbb9.dyn.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:09:45] *** Joins: Nalt| (~Nalt|||@cpe-173-174-25-173.stx.res.rr.com)
[04:11:23] *** Quits: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:12:50] *** Quits: Nalt (~Nalt|||@cpe-173-174-25-173.stx.res.rr.com) (Ping timeout: 244 seconds)
[04:19:06] *** Quits: thiago (~thiago@2601:1c0:4501:635c:50fe:568:2ce0:1e74) (Ping timeout: 240 seconds)
[04:19:30] *** Quits: alzgh (~alzgh@216.155.158.214) (Quit: Client closed)
[04:28:05] *** Quits: zeenk2 (~zeenk@82.76.113.130) (Quit: Konversation terminated!)
[04:36:36] *** Quits: Nalt| (~Nalt|||@cpe-173-174-25-173.stx.res.rr.com) (Ping timeout: 244 seconds)
[04:40:32] *** Joins: alzgh (~alzgh@216.155.158.214)
[04:41:56] *** Quits: orbyt (~textual@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:46:57] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[04:50:07] *** Joins: clf59 (~clf59@user/clf59)
[04:52:27] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:53:08] *** Joins: igemnace (~ian@user/igemnace)
[04:58:15] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[05:06:08] <thebombzen> Walex: re point earlier, this is a large source tree that includes images. that's where most of the several hundred MB are coming. that's *packed* btw, meaning after de-duplication
[05:06:22] <thebombzen> the actual size of the current HEAD (outside of the .git) directory is far smaller
[05:06:41] <thebombzen> and ideally if I do a shallow clone (depth=1) then it shouldn't download the entire history
[05:07:08] <thebombzen> unshallowing it only downloaded an additional 400k instead of several hundred megabytes, which suggests to me that the shallow clone actualy downloaded the whole thing and only shallowed itself locally
[05:08:02] <thebombzen> because I know for certain that there's images in that tree that are larger than 400k, so unshallowing it should then download those, not beforehand
[05:08:35] <thebombzen> even with git's distributed model this is not what I expected
[05:09:38] *** Quits: alzgh (~alzgh@216.155.158.214) (Quit: Client closed)
[05:10:26] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 252 seconds)
[05:12:47] <nedbat> thebombzen: how much have the files changed over the history of the repo?
[05:13:14] <thebombzen> a decent amount, but as I said unshallowing it only pulled about 400k additional
[05:13:43] <thebombzen> and there's images in the tree larger than 400k that have since been deleted and aren't present in HEAD
[05:14:48] <thebombzen> the repo itself is a react.js website source but has images that are tracked by git
[05:18:10] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 268 seconds)
[05:19:04] *** Joins: Quot_ (~Quot@2601:3c4:300:6a0:ddf5:f5dc:4514:fa70)
[05:23:53] *** Joins: Torr (~Torr@user/torr)
[05:28:46] *** Joins: apauli (~apauli@dynamic-077-008-138-110.77.8.pool.telefonica.de)
[05:29:57] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:412f:83fa:4c40:a575) (Remote host closed the connection)
[05:31:53] *** Quits: PaMeDa (~apauli@dynamic-077-003-081-116.77.3.pool.telefonica.de) (Ping timeout: 244 seconds)
[05:34:59] *** Quits: clf59 (~clf59@user/clf59) (Quit: Textual IRC Client: www.textualapp.com)
[05:36:17] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[05:36:34] *** Quits: ano (~weechat@user/ano) (Ping timeout: 252 seconds)
[05:38:26] *** Joins: ano (~weechat@user/ano)
[05:43:55] *** Joins: hbautista (~hbautista@187.171.126.106)
[05:45:23] *** Joins: thiago (~thiago@2601:1c0:4501:635c:c563:7036:6b7b:1a23)
[05:51:49] *** Quits: richbridger (~richbridg@213-225-3-25.nat.highway.a1.net) (Read error: Connection reset by peer)
[05:51:58] *** Joins: cliluw (~cliluw@47.147.80.149)
[05:52:07] *** Joins: richbridger (~richbridg@213-225-3-25.nat.highway.a1.net)
[05:57:18] *** Quits: mrquincy_ (~mrquincy_@c-76-113-57-134.hsd1.nm.comcast.net) (Ping timeout: 264 seconds)
[06:05:38] *** Joins: Kaedenn (~kaedenn@137.229.82.89)
[06:06:52] *** Joins: adlternative (~adl@117.32.216.71)
[06:07:29] *** Parts: Kaedenn (~kaedenn@137.229.82.89) ()
[06:08:29] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[06:10:14] *** Joins: pete443_ (~pete@user/pete443)
[06:10:42] *** Quits: pete443 (~pete@user/pete443) (Ping timeout: 268 seconds)
[06:11:27] *** Quits: daddy (~ryan@hashbang/bdfl) (Quit: WeeChat 2.9 <:3)~)
[06:13:08] *** Joins: daddy (~ryan@hashbang/bdfl)
[06:16:54] *** Joins: ecommence (~ecommence@136.243.16.102)
[06:17:26] <ecommence> Stupid question but is there a way to see the contents of all commits in one go, ie. "git show *"?
[06:17:57] <ecommence> Right now I have to "git log", copy paste the commit hash, and then "git show <hash>"
[06:21:06] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[06:21:48] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 268 seconds)
[06:23:25] *** Gustavo6046_ is now known as Gustavo6046
[06:23:54] <igemnace> ecommence: try git log --patch
[06:25:01] <igemnace> also, a bit further out there, but perhaps you'd like a git log viewer program for this? i like tig in particular
[06:25:16] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:30:56] *** Quits: hbautista (~hbautista@187.171.126.106) (Ping timeout: 268 seconds)
[06:32:47] <ecommence> igemnace: Thanks!
[06:33:21] <ecommence> Yeah a git log viewer sounds awesome
[06:35:46] *** Quits: sheepduck (~sheepduck@cpe98524a8cef7c-cm98524a8cef7a.cpe.net.cable.rogers.com) (Remote host closed the connection)
[06:35:57] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:36:09] *** Joins: sheepduck (~sheepduck@cpe98524a8cef7c-cm98524a8cef7a.cpe.net.cable.rogers.com)
[06:39:39] *** Quits: lgc (~lgc@2001:41d0:fe1d:5300:3ce7:c754:16dd:205e) (Quit: WeeChat 3.2-dev)
[06:46:40] *** Quits: thiago (~thiago@2601:1c0:4501:635c:c563:7036:6b7b:1a23) (Quit: Lost terminal)
[06:53:35] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[06:54:15] <k_sze> How do I check whether a commit or a branch is an ancestor of a tag?
[06:54:35] *** Joins: hbautista (~hbautista@187.171.126.106)
[06:55:49] *** Quits: Scotty_Trees (~Scotty_Tr@162-234-179-169.lightspeed.brhmal.sbcglobal.net) (Remote host closed the connection)
[06:56:12] *** Joins: Scotty_Trees (~Scotty_Tr@162-234-179-169.lightspeed.brhmal.sbcglobal.net)
[07:00:26] *** Joins: ferdna (~ferdna@user/ferdna)
[07:01:47] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 268 seconds)
[07:03:35] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:04:08] *** Joins: discipulus (~discipulu@user/discipulus)
[07:14:05] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:27:23] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[07:27:31] *** Joins: mud (~mud@user/kadoban)
[07:27:54] *** Quits: kadobanana (~mud@user/kadoban) (Ping timeout: 264 seconds)
[07:28:24] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[07:33:57] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Quit: Rebooting to update FreeBSD)
[07:37:46] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[07:47:01] *** Quits: adlternative (~adl@117.32.216.71) (Quit: Konversation terminated!)
[07:47:19] *** Joins: adlternative (~adl@117.32.216.94)
[07:48:47] *** Quits: anton (~anton@antonmcclure.com) (Quit: anton)
[07:48:51] *** Joins: thiago (~thiago@2601:1c0:4501:635c:93ff:11a3:b565:3e0c)
[07:50:01] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[07:56:55] *** Joins: anton (~anton@antonmcclure.com)
[07:57:46] *** Joins: dimi1947 (~dimi@5-203-193-108.pat.nym.cosmote.net)
[07:59:12] *** Joins: travaldo (~travaldo@159.203.88.148)
[08:00:10] *** Quits: schmillin (~schmillin@user/schmillin) (Ping timeout: 244 seconds)
[08:01:27] *** Joins: Xenguy (~Xenguy@devuan/developer/Xenguy)
[08:02:49] *** Quits: sheepduck (~sheepduck@cpe98524a8cef7c-cm98524a8cef7a.cpe.net.cable.rogers.com) (Ping timeout: 268 seconds)
[08:03:31] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[08:04:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[08:04:59] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:07:40] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[08:08:04] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[08:11:27] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[08:12:27] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[08:14:25] *** Joins: jetchisel (jetchisel@user/jetchisel)
[08:15:52] *** Quits: dimi1947 (~dimi@5-203-193-108.pat.nym.cosmote.net) (Quit: Leaving)
[08:26:37] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Remote host closed the connection)
[08:26:57] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[08:32:18] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[08:34:13] *** Quits: travaldo (~travaldo@159.203.88.148) (Quit: travaldo)
[08:35:29] *** Joins: schmillin (~schmillin@2a0d:5600:24:aae::b10d)
[08:36:45] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[08:39:14] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[08:40:29] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 244 seconds)
[08:42:44] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:42:44] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 252 seconds)
[08:44:31] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[08:44:47] *** Joins: tejr (~tejr@user/tejr)
[08:48:02] *** Quits: thiago (~thiago@2601:1c0:4501:635c:93ff:11a3:b565:3e0c) (Quit: Lost terminal)
[08:48:21] *** Joins: thiago (~thiago@2601:1c0:4501:635c:93ff:11a3:b565:3e0c)
[08:48:32] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:49:04] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 252 seconds)
[08:50:06] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 264 seconds)
[08:50:08] *** Joins: dimi1947 (~dimi@5-203-193-108.pat.nym.cosmote.net)
[08:51:18] *** Joins: cliluw (~cliluw@47.147.80.149)
[08:51:48] *** Joins: deltab (~deltab@95.154.230.49)
[08:52:26] *** Joins: Vonter (~Vonter@user/vonter)
[08:53:23] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 244 seconds)
[08:58:20] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:02:42] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[09:08:27] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:08:30] *** Joins: ferdna (~ferdna@user/ferdna)
[09:08:51] *** Quits: keypusher (keypusher@user/keypusher) (Remote host closed the connection)
[09:09:33] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:10:38] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Remote host closed the connection)
[09:10:56] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[09:13:22] *** Quits: vishal (~vishal@fedora/vishal) (Quit: ZNC 1.8.2 - https://znc.in)
[09:13:27] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:16:40] *** Joins: jmcantrell (~weechat@86.106.143.201)
[09:16:50] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[09:17:43] *** Joins: vishal (~vishal@fedora/vishal)
[09:18:14] <jmcantrell> in man pages and anything else that uses less for a pager, i can scroll with the mouse, but in git diffs (or anything else that pages), i can't. i've tried setting core.pager to less. what could be the problem?
[09:18:37] <jmcantrell> my terminal is alacritty
[09:18:45] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:34:01] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Read error: Connection reset by peer)
[09:35:42] *** Joins: kevr (~kevr@user/kevr)
[09:37:30] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[09:38:31] <jmcantrell> strange, while it was working in man without the option, in git, less required the --mouse option
[09:41:50] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[09:52:18] <ikke> jmcantrell: try LESS=FRX man foo
[09:52:28] <ikke> and see if the mouse still works
[09:53:12] *** Quits: apauli (~apauli@dynamic-077-008-138-110.77.8.pool.telefonica.de) (Ping timeout: 268 seconds)
[09:53:29] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:55:27] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:58:44] *** Quits: hbautista (~hbautista@187.171.126.106) (Quit: Leaving)
[09:59:51] *** Joins: hmmmas (~chenqisu1@183.217.200.246)
[10:02:27] *** Joins: hbautista (~hbautista@187.171.126.106)
[10:02:42] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 264 seconds)
[10:03:00] <jmcantrell> ikke: it does not
[10:03:31] <ikke> right, so one of those options is the cause
[10:05:47] *** Quits: Kulrak (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au) (Read error: Connection reset by peer)
[10:06:01] *** Joins: Kulrak (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au)
[10:07:21] <jmcantrell> looks like X
[10:08:53] <ikke> Yes, that would have been my guess
[10:09:20] <ikke> "Disables sending the termcap initialization and deinitialization strings to the terminal.  This is sometimes desirable if the deinitialization string does something unnecessary, like clearing the screen."
[10:10:52] <ikke> interestingly, for me it works with LESS=FRX
[10:11:25] <ikke> also alacritty
[10:12:11] *** Quits: jmcantrell (~weechat@86.106.143.201) (Quit: WeeChat 3.2)
[10:12:18] *** Quits: thiago (~thiago@2601:1c0:4501:635c:93ff:11a3:b565:3e0c) (Ping timeout: 264 seconds)
[10:12:55] *** Joins: jmcantrell (~weechat@86.106.143.201)
[10:14:08] *** Joins: kevr (~kevr@user/kevr)
[10:15:28] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:16:03] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 244 seconds)
[10:20:04] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[10:20:34] *** Joins: jetchisel (jetchisel@user/jetchisel)
[10:32:35] *** Quits: thunfisch (~thunfisch@user/thunfisch) (Quit: UAAARRR!)
[10:32:52] *** Joins: Kamilion (~kvirc@user/kamilion)
[10:35:27] *** Joins: indy (~indy@dsl-static-104.213-160-167.telecom.sk)
[10:37:00] *** Joins: vmittal (~vmittal@49.36.226.54)
[10:40:20] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 244 seconds)
[10:43:32] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:45:30] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 244 seconds)
[10:45:43] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[10:45:54] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[10:49:04] *** Joins: kevr (~kevr@user/kevr)
[10:50:25] *** Joins: mib_kmf2uh (~40e14fc3@ircip2.mibbit.com)
[10:53:21] *** Joins: raindrop (~raindrop@46.140.123.194)
[10:55:13] *** Quits: mib_kmf2uh (~40e14fc3@ircip2.mibbit.com) (Client Quit)
[10:57:20] *** Joins: paul (~paul@p4febfdb2.dip0.t-ipconnect.de)
[10:59:34] *** Quits: hmmmas (~chenqisu1@183.217.200.246) (Quit: Leaving.)
[11:02:12] *** Joins: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr)
[11:08:00] *** Joins: thunfisch (~thunfisch@user/thunfisch)
[11:08:03] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[11:11:06] *** Joins: ubique (~ubique@188.26.230.54)
[11:11:12] <vmittal> Reposting my question from yesterday: I am trying to get 'git sparse-checkout' working on Windows but failing. I have defined the files which I don't want in the 'sparse-checkout' file as !<file-name>. But checkout still fails with error, invalid file path
[11:11:31] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 268 seconds)
[11:11:41] <vmittal> the file is an invalid name on Windows. I am cloning the repo with --no-checkout --depth=1
[11:11:49] *** Quits: jmcantrell (~weechat@86.106.143.201) (Quit: WeeChat 3.2)
[11:16:06] *** Joins: chrysanthematic (~chrysanth@82.2.21.4)
[11:18:50] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:20:54] *** Joins: xrisovalantis (~stv@hermes.gatewaynet.com)
[11:22:14] *** Joins: feriman (~feriman@188.163.113.127)
[11:22:14] *** Joins: viral_mutant[m] (~viralmuta@2001:470:69fc:105::3905)
[11:22:31] *** Quits: vmittal (~vmittal@49.36.226.54) (Quit: Client closed)
[11:34:46] *** Quits: unluckyshrubbery (~unluckysh@097-070-104-004.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[11:37:05] *** Quits: chrysanthematic (~chrysanth@82.2.21.4) (Quit: chrysanthematic)
[11:44:18] *** Joins: zeenk (~zeenk@82.76.113.130)
[11:44:55] *** Quits: samian (~sami@174.27.107.153) (Read error: Connection reset by peer)
[11:44:56] *** Quits: paul (~paul@p4febfdb2.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[11:45:13] *** Joins: samian (~sami@174.27.107.153)
[11:46:08] *** Quits: MrMagic (~elrond@2607:f8f8:790:5::1:1) (Quit: ZNC 1.8.2 - https://znc.in)
[11:46:35] *** Quits: pizdets (~pizdets@183.182.115.196) (Quit: pizdets)
[11:47:16] *** Joins: pizdets (~pizdets@183.182.115.196)
[11:47:18] *** Joins: MrMagic (elrond@2607:f8f8:790:5::1:1)
[11:50:07] *** Quits: schmillin (~schmillin@2a0d:5600:24:aae::b10d) (Quit: Leaving)
[11:53:54] *** Joins: TomyWork (~TomyLobo@p200300e80f133c00082c9c745b3138fd.dip0.t-ipconnect.de)
[12:02:09] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[12:02:13] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[12:02:27] *** Joins: tejr (~tejr@user/tejr)
[12:02:37] *** Joins: ano (~weechat@user/ano)
[12:05:52] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[12:07:28] *** Joins: tejr (~tejr@user/tejr)
[12:09:39] *** Joins: Vonter (~Vonter@user/vonter)
[12:12:56] *** Joins: paul (~paul@p4febfdb2.dip0.t-ipconnect.de)
[12:23:36] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[12:24:45] *** Quits: alfredb (~abu@80-219-164-155.dclient.hispeed.ch) (Quit: leaving)
[12:25:44] *** Quits: raindrop (~raindrop@46.140.123.194) (Ping timeout: 244 seconds)
[12:27:03] *** Joins: apauli (~apauli@dynamic-077-008-138-110.77.8.pool.telefonica.de)
[12:33:20] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:45:33] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:f9a1:6a30:5a54:d88f)
[12:51:25] *** Quits: gothicserpent (~gothicser@static-198-54-129-77.cust.tzulo.com) (Ping timeout: 268 seconds)
[12:53:37] *** Joins: nyah (~nyah@90.221.186.180)
[12:53:51] *** Joins: gothicserpent (~gothicser@static-198-54-129-77.cust.tzulo.com)
[12:55:12] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[12:56:16] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:56:16] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[12:56:48] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[13:02:00] *** Joins: clime (~clime@ip-94-199-195-39.acvyskov.cz)
[13:06:11] *** Quits: Quot_ (~Quot@2601:3c4:300:6a0:ddf5:f5dc:4514:fa70) (Ping timeout: 252 seconds)
[13:07:30] *** Quits: yksi (~kvirc@user/yksi) (Ping timeout: 264 seconds)
[13:07:48] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[13:12:51] *** Joins: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se)
[13:14:45] *** Quits: ubique (~ubique@188.26.230.54) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:14:50] *** Quits: kixx (~kixx@user/kixx) (Ping timeout: 244 seconds)
[13:19:13] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[13:19:45] *** Joins: mgrabovs (~mgrabovs@redhat/mgrabovs)
[13:22:22] *** Quits: Scotty_Trees (~Scotty_Tr@162-234-179-169.lightspeed.brhmal.sbcglobal.net) (Quit: Leaving)
[13:22:33] <mgrabovs> Hi, I have a couple of remote branches in git branch -a (like remotes/fork/*) that don't exist in the remote anymore. Is it possible to prune these with a single command?
[13:24:30] <osse> mgrabovs: funny you should use the word "prune" :P
[13:24:37] <osse> git fetch --prune
[13:24:44] <bookworm> ^^
[13:24:54] <bookworm> intuition for the win
[13:25:02] <mgrabovs> osse: Aaah, I see what you did there
[13:25:04] <osse> might want --all if you have multiple remotes.
[13:25:04] <mgrabovs> nice
[13:25:14] <osse> and also: git config --global fetch.prune true  to make it default
[13:25:26] <bookworm> shove it in the global config.... that ^
[13:25:40] <mgrabovs> osse, bookworm: git for the win! Thank you very much :)
[13:28:15] *** Joins: unluckyshrubbery (~unluckysh@097-070-104-004.res.spectrum.com)
[13:28:58] *** Joins: Guest9 (~Guest9@42.106.12.98)
[13:30:16] *** Quits: clime (~clime@ip-94-199-195-39.acvyskov.cz) (Quit: WeeChat 3.0.1)
[13:32:44] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[13:34:28] *** Joins: jinsun (~quassel@user/jinsun)
[13:36:40] *** Joins: jmcantrell (~weechat@89.46.62.162)
[13:37:57] *** Joins: arcatech (~arcatech@user/arcatech)
[13:38:21] <jmcantrell> i've been updating my submodules to the latest commit by using `git submodule foreach git pull origin master` but some of them use a different default branch. is there a way to pull from whatever the default branch is for that submodule?
[13:40:31] <osse> jmcantrell: git submodule update --remote
[13:41:38] <osse> hmmm, maybe not 100%
[13:43:13] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 268 seconds)
[13:44:27] *** Quits: fabs (~fabs@samba.ethz.ch) (Quit: fabs)
[13:47:27] <jmcantrell> osse: what do you mean?
[13:47:57] <osse> I mean I think "git submodule update --remote" would be a better way to do what you want than "git submodule foreach git pull origin master"
[13:48:05] <osse> But I am not completely sure
[13:48:12] <jmcantrell> oh ok
[13:51:15] <osse> jmcantrell: --remote uses some config to figure out what to update to, but I'm not sure how much of that is set by default.
[13:51:50] <osse> I suppose you can: git submodule foreach git fetch; git submodule foreach git checkout origin/HEAD
[13:52:06] <jmcantrell> ok
[13:52:42] <osse> jmcantrell: does the channel name appear? :P
[13:53:04] <osse> I immediately regret writing that. Too creepy.
[13:53:13] <jmcantrell> O.O lol
[13:53:31] <jmcantrell> it's fine. yeah, it seems to work now :)
[13:54:34] <jmcantrell> i thought i asked in the wrong channel for a sec
[13:56:54] *** Joins: lgc (~lgc@2001:41d0:fe1d:5300:a13c:4fa7:335c:ab7f)
[13:59:47] *** Joins: lgc_ (~lgc@2001:41d0:fe1d:5300:f8ac:fe93:ac1:9559)
[14:00:46] *** Joins: kixx (~kixx@93.114.96.194)
[14:00:46] *** Quits: kixx (~kixx@93.114.96.194) (Changing host)
[14:00:46] *** Joins: kixx (~kixx@user/kixx)
[14:03:18] *** Quits: lgc (~lgc@2001:41d0:fe1d:5300:a13c:4fa7:335c:ab7f) (Ping timeout: 264 seconds)
[14:04:00] *** Parts: mgrabovs (~mgrabovs@redhat/mgrabovs) (Leaving)
[14:04:01] *** Joins: xkixx (~kixx@93.114.96.194)
[14:08:02] *** Quits: kixx (~kixx@user/kixx) (Ping timeout: 244 seconds)
[14:09:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[14:16:39] *** Joins: Natrick (~thelounge@vmd42932.contaboserver.net)
[14:17:41] *** xkixx is now known as kixx
[14:18:07] *** Quits: kixx (~kixx@93.114.96.194) (Changing host)
[14:18:07] *** Joins: kixx (~kixx@user/kixx)
[14:19:03] *** Joins: Adoi (~Adoi@user/adoi)
[14:21:32] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[14:22:15] *** Joins: jla (~Thunderbi@64.225.79.195)
[14:23:56] *** Quits: jla (~Thunderbi@64.225.79.195) (Client Quit)
[14:28:43] *** Quits: Guest9 (~Guest9@42.106.12.98) (Quit: Connection closed)
[14:34:17] *** Joins: stennowork (~stenno@user/stenno)
[14:34:46] *** Joins: fabs (~fabs@samba.ethz.ch)
[14:35:04] *** Quits: kixx (~kixx@user/kixx) (Read error: Connection reset by peer)
[14:35:05] *** Joins: jla (~jordi@64.225.79.195)
[14:35:10] <stennowork> good day, can i use cherry-picking if i used `git push --mirror otherRepo` to create my repository otherRepo?
[14:35:22] <stennowork> i hope this question makes sense
[14:35:27] *** Joins: kixx (~kixx@93.114.96.194)
[14:35:27] *** Quits: kixx (~kixx@93.114.96.194) (Changing host)
[14:35:27] *** Joins: kixx (~kixx@user/kixx)
[14:35:45] <selckin> sure why not
[14:36:03] *** Joins: raindrop (~raindrop@46.140.25.34)
[14:36:35] <stennowork> i mean cherry-picking a commit from the initial repo to the mirror'ed one
[14:36:37] <stennowork> ncie
[14:37:15] <ikke> cherry-picking requires a worktree
[14:38:03] <jmcantrell> osse: if the submodule author adds new commits to master/main after i've cloned and i do --init --remote, that will ensure it's up to date?
[14:38:04] *** Quits: jla (~jordi@64.225.79.195) (Client Quit)
[14:40:52] *** Joins: jla (~jordi@64.225.79.195)
[14:42:19] <stennowork> ikke, my understanding was that i cannot cherry-pick between repositories
[14:44:27] *** Quits: nickmass (~nickmass@nickmass.com) (Read error: Connection reset by peer)
[14:44:45] *** Joins: nickmass (~nickmass@nickmass.com)
[14:46:36] <osse> jmcantrell: --init once, --remote thereafter
[14:47:11] <osse> stennowork: to cherry-pick a commit, that commit must be present in the current repo (so you need to fetch or add a new remote or whatever)
[14:47:18] <osse> but all that not related to push
[14:47:30] <jmcantrell> osse: to simplify the script, is it safe to include --init anyway for subsequent calls?
[14:47:54] <osse> I don't know. I would guess yes
[14:47:58] *** Quits: kixx (~kixx@user/kixx) (Ping timeout: 268 seconds)
[14:48:07] <stennowork> hmm ok
[14:48:10] <stennowork> thanks
[14:49:04] *** Joins: masoudd (~masoudd@user/masoudd)
[14:55:08] *** Joins: luna (~luna@ubuntu/member/bittin)
[14:55:12] <luna> learned about git blame today :)
[14:59:48] *** Quits: jmcantrell (~weechat@89.46.62.162) (Ping timeout: 268 seconds)
[15:01:02] *** Quits: Trieste (~T@user/pilgrim) (Ping timeout: 268 seconds)
[15:01:05] *** Joins: Trieste_ (T@user/pilgrim)
[15:02:35] *** Joins: polyrob_ (~rob@user/polyrob)
[15:03:19] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 244 seconds)
[15:04:09] *** polyrob_ is now known as polyrob
[15:09:57] *** Joins: rsx (~dummy@ppp-188-174-141-49.dynamic.mnet-online.de)
[15:12:42] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[15:22:35] *** Quits: deltab (~deltab@95.154.230.49) (Ping timeout: 252 seconds)
[15:23:06] *** Quits: raindrop (~raindrop@46.140.25.34) (Ping timeout: 264 seconds)
[15:30:14] *** Joins: mschorm (~mschorm@2a02:8308:b086:8200:ee42:a390:9de4:5a04)
[15:30:19] *** Joins: raindrop (~raindrop@46.140.25.34)
[15:30:28] <mschorm> Hello.   I have a repository with many branches. I did "git clone --depth=5 <repo>". I got only the master branch.
[15:30:28] <mschorm> Now how do I now fetch another branch ?   "git fetch --all -a --unshallow" won't get me more branches.
[15:30:38] *** Joins: amanita_ (~amanita@user/amanita)
[15:30:40] <mschorm> I still can list the branches on the remote with "git ls-remote" and fetch a branch with "git fetch origin name:new_local_name". Why is just "git fetch origin name" not working though? (or better: what it actually do in this case?)
[15:30:44] <mschorm>   $ git fetch origin f26
[15:30:46] <mschorm>    * branch            f26        -> FETCH_HEAD
[15:30:48] <mschorm>   $ git fetch origin f26:f26
[15:30:50] <mschorm>    * [new branch]      f26        -> f26
[15:30:57] *** Joins: deltab (~deltab@95.154.230.49)
[15:31:38] <ikke> git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
[15:33:53] *** Quits: amanita (~amanita@user/amanita) (Ping timeout: 272 seconds)
[15:34:52] *** Parts: jla (~jordi@64.225.79.195) ()
[15:35:33] <mschorm> Cool. Thank you !
[15:36:05] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[15:37:45] <osse> luna: oh boy, wait till you hear about git annotate!
[15:37:55] <luna> osse: o: ?
[15:38:07] <osse> just kidding, it's basically the same
[15:38:22] <luna> :D
[15:38:35] <osse> "The only difference between this command and git-blame(1) is that they use slightly different output formats, (...)"
[15:38:43] <luna> ah
[15:38:47] <luna> got a tip about tig too
[15:39:28] *** Joins: vBrot (~vBrot@p54b2c799.dip0.t-ipconnect.de)
[15:39:36] *** Joins: arcatech (~arcatech@user/arcatech)
[15:40:06] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[15:40:53] <vBrot> Hey guys :)  In my repository, I have a changelog file, that contains a markdown list of all changes that are made to the product. Of course, this file attracts quite a log of merge conflicts as everyone appends to the list on their respective branches. My question now is: Is merge=union from gitattributes a good usecase for this, given that I
[15:40:53] <vBrot> don't care about the order of the changelog entries?
[15:42:24] <vBrot> I am asking because the documentation explicitely says "The user should verify the result. Do not use this if you do not understand the implications.". Therefore, I want to be sure that I have one of the rare usecases where such an automatic merge may make sense
[15:43:03] *** Parts: stennowork (~stenno@user/stenno) (Leaving)
[15:44:42] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 240 seconds)
[15:45:53] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[15:48:07] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[15:49:29] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[15:50:18] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[15:52:04] *** Joins: strk (~strk@user/strk)
[15:52:23] <strk> anyone familiar with the post-receive-email hook ? All of a sudden it's not including log commits anymore
[15:52:31] <strk> could that have to do with the use of symbolic refs ?
[15:52:48] <strk> ie: no incoming commit is ever considered "new" because it's present in other branches ?
[15:58:22] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[15:59:19] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[16:00:11] *** Joins: gareppa (~gareppa@user/gareppa)
[16:00:50] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[16:01:38] *** Quits: feriman (~feriman@188.163.113.127) (Ping timeout: 252 seconds)
[16:02:14] *** Joins: keypusher (keypusher@user/keypusher)
[16:02:14] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[16:02:25] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[16:03:47] *** Trieste_ is now known as Trieste
[16:04:59] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[16:06:06] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[16:10:20] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[16:11:33] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[16:13:11] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[16:14:18] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[16:16:04] *** Quits: thomas_25 (thomas_25@pls.just.stfu-kthx.bnc4you.xyz) (Quit: FreeZNC - Visit us! Server: irc.libera.chat Channel: #bnc4you)
[16:16:43] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[16:17:57] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[16:19:09] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[16:20:11] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[16:22:19] *** Joins: ath28 (~dimi@2a02:1388:82:1db:d0de:50e8:c4bc:7510)
[16:22:26] *** Quits: dimi1947 (~dimi@5-203-193-108.pat.nym.cosmote.net) (Ping timeout: 268 seconds)
[16:24:40] *** Joins: thomas_25 (thomas_25@pls.just.stfu-kthx.bnc4you.xyz)
[16:28:52] *** Quits: ath28 (~dimi@2a02:1388:82:1db:d0de:50e8:c4bc:7510) (Quit: Leaving)
[16:31:37] *** Joins: dimi1947 (~dimi@2a02:1388:82:1db:d0de:50e8:c4bc:7510)
[16:31:48] *** Quits: vBrot (~vBrot@p54b2c799.dip0.t-ipconnect.de) (Quit: Client closed)
[16:41:33] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 268 seconds)
[16:42:07] *** Joins: cliluw (~cliluw@47.147.80.149)
[16:42:40] *** Quits: discipulus (~discipulu@user/discipulus) (Ping timeout: 268 seconds)
[16:45:35] *** Joins: Nalt| (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[16:45:45] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 268 seconds)
[16:48:10] *** Joins: jl4 (~Thunderbi@64.225.79.195)
[16:56:02] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[16:56:30] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[16:59:15] *** Quits: xrisovalantis (~stv@hermes.gatewaynet.com) (Quit: leaving)
[17:02:28] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@2a01:e0a:5ea:1c10:1ac0:4dff:fe82:78e3)
[17:05:42] *** Quits: jl4 (~Thunderbi@64.225.79.195) (Ping timeout: 264 seconds)
[17:06:01] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[17:06:15] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[17:07:53] *** Joins: gareppa (~gareppa@user/gareppa)
[17:10:25] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 244 seconds)
[17:10:49] *** Joins: cliluw (~cliluw@47.147.80.149)
[17:14:06] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[17:14:39] *** Joins: pulse (~pulse@user/pulse)
[17:15:09] *** Joins: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net)
[17:15:44] *** Quits: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net) (Client Quit)
[17:16:51] *** Joins: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net)
[17:18:52] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[17:21:35] *** Joins: ano (~weechat@user/ano)
[17:22:59] *** Joins: krawe (~krawew@72.11.157.68)
[17:24:24] *** Quits: krawe (~krawew@72.11.157.68) (Client Quit)
[17:24:38] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[17:28:32] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[17:32:03] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 268 seconds)
[17:46:24] *** Quits: gareppa (~gareppa@user/gareppa) (Quit: Leaving)
[17:46:49] *** Quits: ThiefMaster (thief@indico/developer/thiefmaster) (Quit: meow.)
[17:47:03] *** Joins: ThiefMaster (thief@indico/developer/thiefmaster)
[17:48:27] *** Quits: Xenguy (~Xenguy@devuan/developer/Xenguy) (Quit: Leaving)
[17:54:19] *** Parts: cecep[m] (~cecep@2001:470:69fc:105::3994) ()
[17:56:04] *** Quits: mikeputnam (~mikeputna@wilug/mikeputnam) (Quit: WeeChat 2.8)
[17:56:21] *** Joins: cliluw (~cliluw@47.147.80.149)
[17:56:37] *** Joins: mikeputnam (~mikeputna@wilug/mikeputnam)
[17:58:35] *** Joins: igemnace (~ian@user/igemnace)
[17:59:22] *** Joins: pizdets_ (~pizdets@183.182.111.101)
[17:59:40] *** Quits: pizdets (~pizdets@183.182.115.196) (Ping timeout: 245 seconds)
[18:00:59] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 252 seconds)
[18:01:35] *** Joins: Torr (~Torr@user/torr)
[18:10:38] <another> mschorm: how are you determining whcih branches you have?
[18:13:21] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:13:32] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[18:13:44] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:14:16] *** Joins: Adois (~Adoi@user/adoi)
[18:17:29] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[18:18:24] *** Joins: jla (~Thunderbi@64.225.79.195)
[18:23:11] *** Quits: jla (~Thunderbi@64.225.79.195) (Ping timeout: 268 seconds)
[18:31:21] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[18:32:38] *** Joins: hbautista_ (~hbautista@187.171.126.106)
[18:34:03] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[18:34:07] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[18:34:21] *** Joins: igemnace (~ian@user/igemnace)
[18:34:26] *** Joins: masoudd (~masoudd@user/masoudd)
[18:35:31] *** Quits: Adois (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[18:35:31] *** Quits: hbautista (~hbautista@187.171.126.106) (Ping timeout: 268 seconds)
[18:39:48] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[18:40:05] *** Joins: igemnace (~ian@user/igemnace)
[18:40:23] *** Quits: igemnace (~ian@user/igemnace) (Client Quit)
[18:40:40] *** Joins: igemnace (~ian@user/igemnace)
[18:42:35] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[18:42:38] *** Joins: Adoi (~Adoi@user/adoi)
[18:42:54] *** Joins: masoudd (~masoudd@user/masoudd)
[18:42:55] *** Quits: raindrop (~raindrop@46.140.25.34) (Ping timeout: 268 seconds)
[18:44:10] *** Joins: raindrop (~raindrop@46.140.123.194)
[18:44:42] *** Quits: igemnace (~ian@user/igemnace) (Client Quit)
[18:45:00] *** Joins: igemnace (~ian@user/igemnace)
[18:45:09] *** Quits: dmc (~dmc@archlinux/trusteduser/polyzen) (Ping timeout: 272 seconds)
[18:46:17] *** TomyWork is now known as TomyLobo
[18:46:24] *** Joins: arcatech (~arcatech@user/arcatech)
[18:46:50] *** Quits: TomyLobo (~TomyLobo@p200300e80f133c00082c9c745b3138fd.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:47:11] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[18:47:23] *** Joins: dmc (~dmc@archlinux/trusteduser/polyzen)
[18:48:17] *** Joins: g2anj (~v@221.142.186.101)
[18:48:28] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[18:48:33] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[18:51:02] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 252 seconds)
[18:56:01] *** Joins: srinidhi (~srinidhi@49.206.4.186)
[18:56:10] *** Joins: Adoi (~Adoi@user/adoi)
[18:56:34] *** Quits: thebombzen (~thebombze@587232338.guest.umich.net) (Quit: attack.c:4: main: Assertion `I_can_beat_that_monster' failed. Aborted (core dumped))
[19:00:29] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@2a01:e0a:5ea:1c10:1ac0:4dff:fe82:78e3) (Quit: YuGiOhJCJ)
[19:01:22] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[19:01:30] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 264 seconds)
[19:01:34] *** Joins: masoudd (~masoudd@user/masoudd)
[19:06:14] *** Joins: Lusion (sid176568@id-176568.tinside.irccloud.com)
[19:06:49] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Quit: Lost terminal)
[19:07:12] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[19:07:18] *** Quits: dimi1947 (~dimi@2a02:1388:82:1db:d0de:50e8:c4bc:7510) (Quit: Leaving)
[19:07:37] *** Joins: dimi1947 (~dimi@2a02:1388:82:1db:d0de:50e8:c4bc:7510)
[19:08:39] <Lusion> anyone here familiar with git-crypt? i want to `git-crypt unlock` a repository which is cloned with --mirror, so that i can hit it with the bfg repo-cleaner
[19:09:24] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[19:09:33] <Lusion> normally git-crypt works by reading config files and keys which are checked into the repo
[19:09:39] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[19:13:39] *** Quits: jazzy (~jaziz@2600:380:8739:55:6dd6:5004:ea3a:7085) (Ping timeout: 272 seconds)
[19:16:17] *** Quits: dimi1947 (~dimi@2a02:1388:82:1db:d0de:50e8:c4bc:7510) (Quit: Leaving)
[19:16:36] *** Joins: dimi1947 (~dimi1947@2a02:1388:82:1db:d0de:50e8:c4bc:7510)
[19:17:10] *** Joins: gast0n (~g4570n@user/gast0n)
[19:17:19] *** Joins: thiago (~thiago@2601:1c0:4501:635c:93ff:11a3:b565:3e0c)
[19:21:39] *** Quits: hbautista_ (~hbautista@187.171.126.106) (Quit: Leaving)
[19:21:58] *** Joins: hbautista (~hbautista@187.171.126.106)
[19:22:27] *** Quits: andrzejv (~andrzejv@78-56-77-187.static.zebra.lt) (Remote host closed the connection)
[19:23:23] *** Joins: andrzejv (~andrzejv@78-56-77-187.static.zebra.lt)
[19:25:28] <mschorm> another: normally "git branch --all".  In case of shallow copy also "git ls-remote" to see the branches that haven't been fetched, but exists on the remote.
[19:26:03] <canton7> Lusion, from a quick read of the readme, I don't think unlock will help. The objects as stored in git's database will still be encrypted, git-crypt just transparently decrypts them when they're checked out. bfg doesn't work on checked-out files though
[19:27:16] <Lusion> makes sense. thanks canton7
[19:27:58] <canton7> (even if bfg was looking at checked-out files... at that point you'd probably need to have them checked out, in which case you'd need a working copy, in which case you can run git-crypt unlock)
[19:31:22] *** Quits: dimi1947 (~dimi1947@2a02:1388:82:1db:d0de:50e8:c4bc:7510) (Quit: Leaving)
[19:31:42] *** Joins: dimi1947 (~dimi1947@2a02:1388:82:1db:d0de:50e8:c4bc:7510)
[19:33:03] *** Joins: thebombzen (~thebombze@587232572.guest.umich.net)
[19:36:20] *** Joins: gareppa (~gareppa@user/gareppa)
[19:42:11] *** Joins: onizu (uid373383@id-373383.highgate.irccloud.com)
[19:43:45] *** Joins: Guest9 (~Guest9@103.250.137.30)
[19:43:57] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Quit: Leaving)
[19:45:48] *** Quits: gareppa (~gareppa@user/gareppa) (Quit: Leaving)
[19:45:56] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 244 seconds)
[19:46:14] *** Joins: gast0n (~g4570n@user/gast0n)
[19:46:33] *** Joins: nvmd (~nvmd@user/nvmd)
[19:48:02] *** Joins: GNUcifer (~ct@160-169-142-46.pool.kielnet.net)
[19:49:32] *** Quits: cehteh (~ct@225-167-142-46.pool.kielnet.net) (Ping timeout: 268 seconds)
[19:50:31] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[19:50:31] *** Joins: GeorgeK (~GeorgeK@cpe-70-92-5-228.wi.res.rr.com)
[19:52:59] *** Joins: jla (~Thunderbi@64.225.79.195)
[19:56:46] *** Quits: jla (~Thunderbi@64.225.79.195) (Client Quit)
[20:02:25] *** Quits: rsx (~dummy@ppp-188-174-141-49.dynamic.mnet-online.de) (Quit: rsx)
[20:07:50] *** Quits: filePeter (~filePeter@user/filepeter) (Quit: leaving)
[20:08:06] *** Joins: arcatech (~arcatech@user/arcatech)
[20:10:19] *** Joins: mekhami (~lawrence@135.84.115.18)
[20:11:16] <mekhami> given a main branch, and a new branch which has both new commits and merge comits from merging main into it; is there a way to unstage all the new commits so that i can re-commit them (so i have clearer commits and messages)
[20:11:39] *** Quits: dimi1947 (~dimi1947@2a02:1388:82:1db:d0de:50e8:c4bc:7510) (Quit: Leaving)
[20:12:39] <imMute> mekhami: interactive rebase sounds like it might be what you need
[20:12:49] *** Quits: srinidhi (~srinidhi@49.206.4.186) (Excess Flood)
[20:13:03] <imMute> that will let you base the branch on the new main branch, you can also reorder, modify, add, remove commits too
[20:13:19] *** Joins: andreas31 (~andreas@gateway/tor-sasl/andreas303)
[20:13:34] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[20:13:47] *** Joins: nvmd (~nvmd@user/nvmd)
[20:13:48] *** Joins: srinidhi (~srinidhi@49.206.4.186)
[20:17:50] *** Quits: andreas31 (~andreas@gateway/tor-sasl/andreas303) (Client Quit)
[20:18:20] *** Joins: andreas31 (~andreas@gateway/tor-sasl/andreas303)
[20:18:32] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[20:19:33] *** Quits: andreas31 (~andreas@gateway/tor-sasl/andreas303) (Client Quit)
[20:20:34] <mekhami> thanks. one more question; i want to write a shell alias that takes the current branch name, and checks out a new branch with a prefix and that name
[20:20:47] <mekhami> what git command can i use to just get the current branch name
[20:21:07] *** Quits: Kill-Anirnals (uid481358@id-481358.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[20:21:24] <bremner> maybe: git symbolic-ref HEAD
[20:24:49] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 252 seconds)
[20:24:58] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:25:35] <osse> that works
[20:25:41] <osse> recent gits have git branch --show-current
[20:31:24] <mekhami> okay awesome. i made it with work `git checkout -b "myprefix-"${$(git symbolic-ref HEAD)#"refs/heads/"}'
[20:31:42] <mekhami> although now that i saw osse's message, that would have made this so much easier lol
[20:32:11] <osse> mekhami: how about a middle ground: git symbolic-ref --short HEAD  :p
[20:32:37] <mekhami> either one works hah
[20:33:35] <thiago> you can add --short to git symbolic-ref
[20:33:40] <thiago> $ git symbolic-ref --short HEAD
[20:33:40] <thiago> main
[20:34:23] <mekhami> show-current works and is more clear about what i'm doing
[20:34:39] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Remote host closed the connection)
[20:35:08] *** Joins: andreas3- (andreas303@ip227.orange.bnc4free.com)
[20:35:09] *** Quits: bremner (~bremner@notmuch/developer/bremner) (Remote host closed the connection)
[20:35:10] <thiago> yeah, that makes sense
[20:35:22] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[20:35:46] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[20:38:46] *** Joins: blue_penquin (~blue_penq@gateway/tor-sasl/bluepenquin/x-11613850)
[20:45:02] *** Joins: mrquincy_ (~mrquincy_@c-76-113-57-134.hsd1.nm.comcast.net)
[20:46:00] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:47:56] *** Quits: themill (~stuart@user/themill) (Changing host)
[20:47:56] *** Joins: themill (~stuart@debian/stuart)
[20:48:02] *** Parts: Lusion (sid176568@id-176568.tinside.irccloud.com) ()
[20:48:11] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:50:57] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[20:51:20] *** Joins: ano (~weechat@user/ano)
[20:51:50] *** Quits: Strom (strom@fedora/strom) ()
[20:51:58] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[20:52:12] *** Joins: nvmd (~nvmd@user/nvmd)
[20:52:20] *** Joins: xall (~xall@2600:8800:8c02:3600:8563:d85f:5647:a78e)
[20:52:39] *** Quits: andreas3- (andreas303@ip227.orange.bnc4free.com) (Remote host closed the connection)
[20:52:51] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[20:53:58] *** Joins: Strom (strom@fedora/strom)
[20:56:00] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[20:56:14] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[20:58:07] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[20:58:08] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[20:59:30] *** Quits: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr) (Quit: chelas bien frias!)
[21:00:00] *** Joins: euouae (~euouae@user/euouae)
[21:00:07] *** Joins: orbyt (~textual@172.92.4.78)
[21:00:07] <euouae> Hello can you sign your commits using signify and publish on github?
[21:01:29] <anddam> howdy, I went reading the --track and --set-upstream-to description and I am not totally clear on those
[21:01:33] <canton7> I mean, I suppose you could sign the commit using signify and put the signature in the commit message, but noone else would know what on earth it was
[21:01:40] *** Quits: budo (~budo@c-24-62-207-85.hsd1.ma.comcast.net) (Ping timeout: 268 seconds)
[21:01:53] <anddam> what I get is that --track works when creating a branch and sets branchname's upstream, --set-upstream-to works at any time
[21:02:00] <anddam> is that it?
[21:02:11] <osse> yep
[21:02:13] <canton7> Yeah pretty much. --track is odd, it's set by default most of the time
[21:02:23] <canton7> !local_branch_from_remote
[21:02:23] <gitinfo> The following commands are all equivalent, assuming <branch> doesn't yet exist: 'git checkout -b <branch> <remote>/<branch>', 'git checkout -t <remote>/<branch>', 'git checkout <branch>'. The latter invokes some magic.
[21:02:46] <canton7> I don't think I've ever explicitly passed it
[21:03:01] <canton7> Whenever you create a new branch from a remote one, for instance, tracking is automatically set up
[21:03:23] <canton7> The other one you'll use is 'push -u' -- that pushes a branch to a remote, and also sets up tracking. It's useful when pushing a new branch
[21:04:39] *** Joins: fstd (~fstd@xdsl-87-79-153-206.nc.de)
[21:05:00] *** Joins: wm (~wmy@2a01:4f8:1c1c:7918::1)
[21:06:12] <anddam> thx
[21:07:07] <osse> the audience is listening
[21:08:48] *** Quits: blue_penquin (~blue_penq@gateway/tor-sasl/bluepenquin/x-11613850) ()
[21:10:45] *** Quits: fabs (~fabs@samba.ethz.ch) (Quit: fabs)
[21:11:41] *** Joins: budo (~budo@c-24-62-207-85.hsd1.ma.comcast.net)
[21:11:46] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:12:50] *** Joins: fabs (~fabs@samba.ethz.ch)
[21:14:19] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:15:37] *** Parts: strk (~strk@user/strk) (WeeChat 3.0.1)
[21:23:23] *** Joins: cornduck (~cornduck@2400:8901::f03c:92ff:fe22:2fd4)
[21:23:55] *** Joins: goldfish (~goldfish@user/goldfish)
[21:25:12] *** Quits: xall (~xall@2600:8800:8c02:3600:8563:d85f:5647:a78e) (Ping timeout: 250 seconds)
[21:26:57] *** Joins: mokulus (~mokulus@user/mokulus)
[21:26:57] *** Quits: mrquincy_ (~mrquincy_@c-76-113-57-134.hsd1.nm.comcast.net) (Ping timeout: 268 seconds)
[21:28:09] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Remote host closed the connection)
[21:28:32] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[21:28:57] *** Quits: m0viefreak (~asdf@user/m0viefreak) (Remote host closed the connection)
[21:31:39] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Remote host closed the connection)
[21:31:43] *** Joins: furrymcgee (~devuan@31.179.186.66)
[21:31:45] *** Quits: euouae (~euouae@user/euouae) (Quit: euouae)
[21:32:02] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[21:35:47] *** Joins: bremner (~bremner@notmuch/developer/bremner)
[21:35:50] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[21:37:53] *** Joins: mrquincy_ (~mrquincy_@c-76-113-57-134.hsd1.nm.comcast.net)
[21:39:35] *** Quits: bodiccea (~bodiccea@user/bodiccea) (Read error: Connection reset by peer)
[21:41:52] *** Quits: Guest9 (~Guest9@103.250.137.30) (Ping timeout: 268 seconds)
[21:45:58] *** Joins: cliluw (~cliluw@47.147.80.149)
[21:53:06] *** Quits: mrquincy_ (~mrquincy_@c-76-113-57-134.hsd1.nm.comcast.net) (Ping timeout: 264 seconds)
[22:01:10] *** Joins: Betal (~Beta@user/betal)
[22:01:44] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[22:07:25] *** Quits: dmc (~dmc@archlinux/trusteduser/polyzen) (Quit: WeeChat 3.2)
[22:08:29] *** Joins: jetchisel (jetchisel@user/jetchisel)
[22:09:06] *** Joins: dmc (~dmc@archlinux/trusteduser/polyzen)
[22:14:56] *** dmc is now known as url
[22:15:49] *** Quits: url (~dmc@archlinux/trusteduser/polyzen) (Changing host)
[22:15:49] *** Joins: url (~dmc@user/polyzen/bot/url)
[22:16:00] *** url is now known as dmc
[22:16:04] *** Quits: dmc (~dmc@user/polyzen/bot/url) (Changing host)
[22:16:04] *** Joins: dmc (~dmc@archlinux/trusteduser/polyzen)
[22:33:34] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[22:34:54] *** Joins: polyzen (~dmc@archlinux/trusteduser/polyzen)
[22:36:32] *** Quits: dmc (~dmc@archlinux/trusteduser/polyzen) (Ping timeout: 252 seconds)
[22:36:45] *** Quits: hbautista (~hbautista@187.171.126.106) (Remote host closed the connection)
[22:37:21] *** Joins: hbautista (~hbautista@187.171.126.106)
[22:42:00] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[22:42:19] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 252 seconds)
[22:42:22] *** Joins: ano (~weechat@user/ano)
[22:42:49] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[22:44:06] *** Joins: Guest9 (~Guest9@103.250.137.30)
[22:48:21] *** Quits: lacrymology (~lacrymolo@5.225.8.199) (Ping timeout: 272 seconds)
[22:53:40] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[22:55:41] *** polyzen is now known as dmc
[23:05:04] *** Joins: yksi (~kvirc@user/yksi)
[23:25:55] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:64e1:b475:180:88a7)
[23:25:55] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:64e1:b475:180:88a7) (Changing host)
[23:25:55] *** Joins: skapata (~Skapata@user/skapata)
[23:32:42] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[23:33:04] *** Joins: tejr (~tejr@user/tejr)
[23:33:16] *** Quits: acid (~acid@user/acid) (Ping timeout: 244 seconds)
[23:33:37] *** Joins: acid (~acid@user/acid)
[23:35:20] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 244 seconds)
[23:41:32] *** Quits: acid (~acid@user/acid) (Ping timeout: 244 seconds)
[23:42:08] *** Joins: acid (~acid@user/acid)
[23:43:09] *** Joins: Adoi (~Adoi@user/adoi)
[23:46:53] *** Joins: chrysanthematic (~chrysanth@109.70.150.245)
[23:49:42] *** Joins: mrquincy_ (~mrquincy_@c-76-113-57-134.hsd1.nm.comcast.net)
[23:57:23] *** Quits: mrquincy_ (~mrquincy_@c-76-113-57-134.hsd1.nm.comcast.net) (Ping timeout: 252 seconds)
