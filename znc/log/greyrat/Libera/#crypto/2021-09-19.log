[00:02:06] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 260 seconds)
[00:04:02] *** Joins: mouseghost (~draco@user/mouseghost)
[00:08:58] <Hash> Hmm
[00:09:11] <Hash> I run secbot in #security
[00:09:20] <Hash> Might be useful here? Title grabber for urls
[00:10:19] <riv> that's ok :)
[00:10:59] *** Quits: BOKALDO (~BOKALDO@46.109.203.51) (Quit: Leaving)
[00:12:11] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[00:12:55] <ms7821> I think EmmyNoether does that anyway
[00:14:42] <ms7821> also wtf ctfs do not need to be competitive
[00:14:51] *** Joins: rtypo (~alex@user/rtypo)
[00:16:19] *** Joins: igemnace (~ian@user/igemnace)
[00:17:04] *** Quits: kryptografos (~kryptogra@104.244.75.198) (Remote host closed the connection)
[00:18:17] *** Joins: kryptografos (~kryptogra@104.244.75.198)
[00:18:49] <wasamasa> they have leaderboards, lol
[00:19:10] <wasamasa> these leaderboards allow them to be listed on ctftime and award points to teams
[00:19:44] <ms7821> if you define ctfs as ones on ctftime, perhaps
[00:20:20] *** Quits: kryptografos (~kryptogra@104.244.75.198) (Read error: Connection reset by peer)
[00:20:29] *** Joins: kryptografos (~kryptogra@104.244.75.198)
[00:22:28] <wasamasa> alright, I'll bite, show me what you got
[00:22:38] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697) (Ping timeout: 260 seconds)
[00:22:47] <ms7821> what?
[00:23:02] <ms7821> ctf is a game that involves capturing a flag
[00:23:06] <riv> i think it is time to move on
[00:23:18] <wasamasa> ausnahmen best√§tigen die regel
[00:26:28] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 252 seconds)
[00:32:34] *** Quits: qbt (~edun@user/edun) (Remote host closed the connection)
[00:36:00] <yawkat> wasamasa has defined ctfs to be only the ctfs they participate in
[00:36:19] <yawkat> Any other ctfs are "the lowest of low" 
[00:38:48] <wasamasa> no worries, I've played bad ones
[00:38:56] <wasamasa> I've heard stories of even worse ones
[00:39:02] <wasamasa> no need to get mad
[00:39:40] *** Joins: rtypo (~alex@user/rtypo)
[00:40:58] <ericonr> I know people who do CTFs at work *shrug*
[00:41:15] <yawkat> It is just reaffirming my decision not to take part in competitive programming anymore. The atmosphere is toxic and many of the people are arrogant 
[00:47:07] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697)
[00:47:08] *** Joins: somlis2 (~somlis@user/somlis)
[00:49:15] *** Quits: somlis (~somlis@user/somlis) (Ping timeout: 260 seconds)
[00:52:47] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[00:54:05] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:00:53] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[01:02:40] *** Quits: monopuff (~Mr@102.129.153.49) (Quit: The Lounge - https://thelounge.chat)
[01:13:21] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[01:14:25] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:29:17] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[01:31:20] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[01:31:26] *** Quits: somlis2 (~somlis@user/somlis) (Quit: WeeChat 3.2.1)
[01:34:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:35:00] *** Quits: rtypo (~alex@user/rtypo) (Quit: WeeChat 3.2)
[01:35:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[01:36:47] *** Joins: rtypo (~alex@user/rtypo)
[01:37:40] *** Lord_of_Life_ is now known as Lord_of_Life
[01:39:12] *** Joins: somlis (~somlis@user/somlis)
[01:44:56] *** Quits: Guyver2 (~Guyver@2001:985:f3f:1:5ca8:becc:d400:5ea6) (Remote host closed the connection)
[01:53:25] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[01:57:41] *** Joins: sdfgsdfg_ (~sdfgsdfg@user/sdfgsdfg)
[01:58:12] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 265 seconds)
[02:03:29] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[02:03:49] *** Quits: kryptografos (~kryptogra@104.244.75.198) (Ping timeout: 252 seconds)
[02:06:38] <Elon_Satoshi> Was it in here that I learned that age and signify were good alternatives to gpg?
[02:07:54] <Elon_Satoshi> oh, it was age and minisign
[02:08:36] <ms7821> some of us are in the age evangelism strike force, yeah
[02:08:55] *** sdfgsdfg_ is now known as sdfgsdfg
[02:12:22] *** Joins: machinedgod (~machinedg@24.105.81.50)
[02:16:05] <Elon_Satoshi> lol
[02:16:54] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[02:23:43] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[02:44:58] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[02:48:03] *** Quits: srmo (~srmo@user/srmo) (Quit: Client closed)
[02:55:14] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 260 seconds)
[02:59:42] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[03:04:54] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 265 seconds)
[03:09:00] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[03:12:35] *** Quits: Narrat (~omnius@p200300df5f0ee19006ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[03:12:43] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:17:42] <dostoyevsky2> How could one proof of work for a webrequest?  E.g.: The hash of the request needs to be below a certain value... how can one influence the hash -- just writing random characters into a comment field?
[03:17:58] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Ping timeout: 252 seconds)
[03:20:11] <ms7821> you mean like hashcash, except the server doesn't reply unless you spent a certain amount of effort to generate the request?
[03:22:18] <dostoyevsky2> ms7821: yeah, like you have a Hash-Token header and the value needs to be under a certain value but still be a valid sha256 of the message, eg... so you'd have an additional tag header where you would generate random data into on the client side until the hash is under the desired value
[03:25:15] <ms7821> sounds like that will work, you're guaranteeing a certain amount of wasted CPU time on average, and it's easy for the server to validate
[03:25:34] <dostoyevsky2> Not sure if that could help with ddossing but you could just up the difficulty to scale down attacks
[03:26:20] <ms7821> I suppose, but you're then also telling non-malicious users that they have to spend CPU time to access the page, and most of them will go "eh, I'll get my content elsewhere"
[03:27:25] <ms7821> I wonder if brave could be used for something similar
[03:28:50] <dostoyevsky2> I don't think many people would notice a 1s delay for certain actions that much... but if you try to ddos from many servers thats a lot of time
[03:28:53] <iz> they would need a special browser that does the PoW and adds the header though, so that would be another ask of potential users
[03:29:16] <dostoyevsky2> iz: One could just generate the request in javascript
[03:29:17] <iz> or i guess there could be a plugin
[03:30:01] <iz> oh yeah, javascript could do it
[03:30:12] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (Ping timeout: 276 seconds)
[03:30:19] <ms7821> if DDoS is your concern, and you have control over the code, you should probably worry more about bandwidth than PoW
[03:30:32] <iz> but a malicious user w/ a video card could easily overwhelm
[03:31:28] <dostoyevsky2> I mean usually a web request would be handled by the webserver as a static page.. but some actions just take a lot of time on the server side and pow could even that out... even if it's just 500ms on the client.. it reduces imbalances
[03:32:23] <ms7821> most sites get around this by requiring logins or API tokens, but it's an interesting idea
[03:32:55] <dostoyevsky2> lots of hw used for DDoSing are rarely patched iot devices, e.g. cameras with internet fast enough to stream to a storage server...  they usually don't have fancy gpu cards
[03:33:27] <iz> that hardware is already botted w/ C&C
[03:33:27] <dostoyevsky2> yeah, just some thoughts... PoW seems fairly simple to implement
[03:33:53] <iz> so they could just have a video card generating hashes that get sent to the zombie iot devices
[03:34:08] <iz> there's no reason the device itself has to do the hash generation
[03:35:05] <dostoyevsky2> yeah, you could just generate a large database of messages on some gpu clusters
[03:36:59] <iz> yeah, i think you end up w/ a situation where a determined attacker can get around the system faster/easier than legitimate users trying to use it legitimately
[03:37:14] <ms7821> not if it's usually done transparently by JS
[03:37:30] <ms7821> but there is definitely a trade-off
[03:37:46] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697) (Ping timeout: 252 seconds)
[03:38:08] <iz> once you get an attacker using GPUs to do hashes, JS on CPU for legit users won't cut it
[03:38:23] <ms7821> and yeah if I'm gonna choose where to put engineering time it'll be on caching, or requiring registration to access the high-effort pages
[03:39:49] <ms7821> you only need to raise the cost for an attacker beyond it being worth their while
[03:44:22] <dostoyevsky2> and once you'd notice an attack, you could just change the hash implementation, since it's in js... so the attackers have to rework it into gpu code... you could also change the hashing based on time, but not sure how to do that in detail.  Or use a hashing algorithm that doesn't work well on gpus, e.g. requires random memory access... I think compression works pretty badly on gpus because of that, 
[03:44:28] <dostoyevsky2> since it can't predict the memory accesses
[03:45:43] <iz> and just hope no legitimate users try to use your site from a phone or tablet
[03:45:58] <ms7821> I suppose the problem then is that if the attacker doesn't need to make that many requests, they can just increase their effort and still cause inconvenience to users who suddenly find the site runs slowly
[03:46:26] <iz> yeah, that's what i was saying before.. it just makes a situation that you can only scale up by screwing your users
[03:47:01] *** Joins: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7)
[03:47:08] <ms7821> whereas caching mostly works the other way - the more content live in cache, the faster it is for everyone
[03:54:47] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[04:16:54] *** Quits: deusexbeer (~hedeo@37-146-228-227.broadband.corbina.ru) (Read error: Connection reset by peer)
[04:18:29] *** Joins: Sofia (~sofia@gateway/tor-sasl/sofia)
[04:29:18] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[04:44:52] *** Quits: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7) (Ping timeout: 268 seconds)
[05:01:13] *** Joins: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7)
[05:34:11] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[05:35:16] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:41:10] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[05:46:56] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[05:54:41] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[06:01:32] <onelegend> I encrypted encryption
[06:01:34] *** Parts: onelegend (onelegend@wireguard/tunneler/onelegend) (WeeChat 2.8)
[06:02:34] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[06:04:01] *** Quits: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7) (Ping timeout: 268 seconds)
[06:05:06] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[06:06:34] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 260 seconds)
[06:08:34] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 265 seconds)
[06:30:31] *** Quits: mcf (~mforney@netbsd/developer/mcf) (Excess Flood)
[06:30:40] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[06:35:09] *** Quits: machinedgod (~machinedg@24.105.81.50) (Quit: Lost terminal)
[06:38:05] *** Joins: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7)
[06:41:49] *** kish is now known as kish`
[06:42:58] *** Quits: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7) (Ping timeout: 260 seconds)
[06:52:24] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[07:40:46] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[07:42:51] *** Joins: Wulf (~Wulf@user/wulf)
[07:44:07] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[07:56:37] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Remote host closed the connection)
[07:56:38] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[07:56:53] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[07:57:00] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[08:01:35] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[08:09:46] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 260 seconds)
[08:16:29] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:30:19] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 252 seconds)
[08:31:11] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:46:58] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 252 seconds)
[08:47:08] *** Quits: TheJollyRoger (~JollyRoge@user/thejollyroger) (Quit: TheJollyRoger)
[08:52:10] *** Joins: NerdyGirl (adie@incest.quest)
[08:52:13] <NerdyGirl> hi
[08:52:52] <sdfgsdfg> hey nerdy gurl, you like coffee ?
[08:53:06] <NerdyGirl> nuh
[08:58:03] <ericonr> Hai
[09:06:46] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[09:23:42] *** Joins: nevivurn (~nevivurn@user/nevivurn)
[09:29:09] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[09:35:46] *** Parts: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com) (WeeChat 3.2.1)
[09:35:57] *** Quits: int-e (~noone@int-e.eu) (Ping timeout: 245 seconds)
[09:36:06] *** Joins: int-e (~noone@int-e.eu)
[09:37:05] *** Joins: Wulf (~Wulf@user/wulf)
[09:53:43] *** Joins: BOKALDO (~BOKALDO@46.109.203.51)
[09:55:33] *** Joins: bbbbbb (~peppbel@076-083-166-225.res.spectrum.com)
[09:56:17] *** Quits: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com) (Ping timeout: 268 seconds)
[09:56:43] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[10:01:23] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[10:07:16] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[10:21:28] *** Joins: qbt (~edun@user/edun)
[10:23:14] *** Quits: qbt (~edun@user/edun) (Remote host closed the connection)
[10:27:53] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:30:39] *** Joins: machinedgod (~machinedg@24.105.81.50)
[10:39:43] *** Joins: qbt (~edun@user/edun)
[10:43:44] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[10:47:44] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[10:51:48] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 265 seconds)
[11:50:18] *** Quits: electr0n (~electr0n@about/security/founder/electr0n) (Quit: WeeChat 3.2)
[12:01:38] *** Joins: chomwitt (~chomwitt@2a02:587:dc15:500:12c3:7bff:fe6d:d374)
[12:35:59] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:51:19] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[12:51:49] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[12:58:20] *** Joins: kryptografos (~kryptogra@104.244.75.198)
[12:59:43] *** Joins: azonenberg (~azonenber@2603:3023:241:40f8:216:3eff:fe6c:95a2)
[13:01:41] <azonenberg> Hi folks... I'm trying to parse an OpenSSH private key file and extract raw curve25519 curve points I can pass to crypto_scalarmult() or similar
[13:01:48] <azonenberg> Something is going wrong and i'm not sure what
[13:02:29] <Wulf> azonenberg: try ed25519 instead ;-)
[13:02:54] <riv> are you using code from openssh? 
[13:02:59] <riv> or wrote something new from scratch
[13:04:28] <azonenberg> I'm using tweetnacl and for now just copying chunks out of the file with a hex editor to see if i'm understanding the file format right
[13:04:32] <azonenberg> https://pastebin.com/FQ1rpR38
[13:04:51] <azonenberg> This is the test key file i'm using (dont worry, it's a brand new key generated just for this project)
[13:05:14] <azonenberg> I'm writing a new ultra minimalistic SSH server for deeply embedded applications
[13:05:16] <riv> well it might sound like a pain but - in your situation - i'd trace through the openssh code to see if it does anything funky
[13:05:18] <azonenberg> think double digit kB of RAM
[13:05:26] <azonenberg> on the whole chip
[13:05:36] <riv> cool :)
[13:05:43] <azonenberg> it supports aes-gcm and 25519 as the sole cipher suite
[13:05:56] <azonenberg> for prototyping i will use crypto++ on PC and a linux tap interface for the networking backend
[13:06:08] <azonenberg> the real deployment will use the hardware aes-gcm and sha256 on the MCU
[13:06:24] <azonenberg> but it doesnt have a public key accelerator so i'll have to supply my own 25519 and i'm currently using the one from tweetnacl
[13:06:42] <azonenberg> So to start, i'm trying to pull the actual private key out of an openssh key file and verify that i can compute the corresponding public key as a sanity check
[13:07:19] <azonenberg> my understanding is that i just need to multiply the private key by 9
[13:07:29] <azonenberg> and i'm getting completely wrong values
[13:07:54] <azonenberg> so either i broke something in tweetnacl by deleting the chacha/poly code i wasn't using (seems unlikely, i didn't alter any of the functions - just deleted stuff i didn't call)
[13:07:59] <azonenberg> or i'm giving it garbage inputs
[13:08:18] <Wulf> looks like the key exists thrice. What a broken format...
[13:08:20] <azonenberg> Yes
[13:08:41] <azonenberg> the raw file is ascii armored base64 decoded, i decoded it and pasted as a hexdump there
[13:08:48] <azonenberg> then manually copied bytes out into my C++ test program
[13:09:04] <Wulf> azonenberg: you can convert the key to other formats, e.g. pkcs#8
[13:09:06] <azonenberg> I *think* that the b2 c8 ... d1 a7 is the private key
[13:09:17] <azonenberg> and the f7 45 ... f4 bf is the public
[13:09:17] <Wulf> azonenberg: no, f7 45 ...
[13:09:24] <Wulf> oh, that might be possible
[13:09:43] <azonenberg> f7 45... is present in the .pub file
[13:09:45] <azonenberg> so i am confident of that
[13:10:05] <azonenberg> which leaves me confused because b2 c8... is the only other 32-byte string in the file that looks remotely key-like
[13:10:22] <azonenberg> so i'm wondering if it's endianness or something
[13:10:56] <azonenberg> https://pastebin.com/5R4FYvt3
[13:10:59] <azonenberg> this is my test code
[13:11:15] <azonenberg> Wulf: and AFAIK no
[13:11:32] <azonenberg> ssh-keygen seems to only suport the rfc 4253 format for ecc keys
[13:11:38] <azonenberg> and can only use PKCS for RSA/DSA
[13:12:48] <azonenberg> BridgeCryptoEngine: expected public host key:     f7 45 d2 13 13 4b 19 97 cf cf 86 98 cc 2b 0c d2 c0 45 b1 c9 d4 ba 22 9f 08 8c 66 90 f2 4b f4 bf 
[13:12:48] <azonenberg> BridgeCryptoEngine: computed public host key:     2b 90 26 a2 7b ce a3 c1 1a 3c 36 85 0a 38 e4 dd 02 7e 23 71 ae 86 b0 32 9c 68 ed 5f b3 12 f2 19  
[13:12:50] <azonenberg> This is what it prints
[13:13:08] <azonenberg> as you can see they have... nothing in common :p
[13:13:33] <Wulf> which reminds me that I wanted to build a converter program for various key formats...
[13:13:37] <azonenberg> Lol
[13:16:56] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[13:19:12] <Wulf> so, b2... should be the private key, yes.
[13:24:43] *** Quits: kryptografos (~kryptogra@104.244.75.198) (Ping timeout: 252 seconds)
[13:24:47] <Wulf> azonenberg: anyway, I already gave you the correct solution. See above. First answer.
[13:27:25] *** Joins: kryptografos (~kryptogra@104.244.75.198)
[13:28:14] <azonenberg> what do you mean?
[13:28:24] <Wulf> curve25519 != ed25519.
[13:29:09] <azonenberg> hmmmm
[13:29:39] <azonenberg> so if multiplying by 9 isnt how you get an ed25519 public key given the private
[13:29:42] <azonenberg> what DO you do?
[13:30:17] <Wulf> azonenberg: I use an ed25519 lib, load your private key (b2 ...) and ask it to return the public key. And I get f7 ...
[13:30:42] <azonenberg> so right key, wrong math on it. thats progress
[13:31:27] <azonenberg> what lib did you use?
[13:31:31] <Wulf> azonenberg: from nacl.signing import SigningKey; print(bytes(SigningKey(bytes.fromhex("b2c80c44b1ad19b57a665ea17c788b7b4d20bf194985979ef2793edc83f4d1a7")).verify_key).hex())
[13:31:46] <azonenberg> oh ok python.... thats no use
[13:31:56] <Wulf> https://pynacl.readthedocs.io/en/latest/signing/#reference
[13:32:07] <Wulf> azonenberg: it's a wrapper around libsodium (C).
[13:32:21] <azonenberg> i need a lib that can run on a mcu with no os and not even a memory allocator lol
[13:32:32] <azonenberg> and i was using tweetnacl
[13:32:42] <azonenberg> which is a stripped down nacl
[13:32:55] <azonenberg> which is the ancestor of sodium
[13:33:08] <azonenberg> so prob pebcak calling the wrong api/
[13:34:05] <rqsd> TweetNaCl provides you with no such API, neither does libsodium. You're meant to use crypto_sign_keypair() and then store the keypair.
[13:34:22] <rqsd> *neither does NaCl
[13:34:34] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[13:34:34] <rqsd> This restriction is, as far as I know, by design.
[13:34:54] <rqsd> In this scenario, you may wish to replace TweetNaCl with Monocypher; the latter lets you operate on the keys directly
[13:35:18] <rqsd> (or libsodium, but getting that integrated into your microcontroller may be a non-trivial amount of effort)
[13:36:49] *** Quits: kryptografos (~kryptogra@104.244.75.198) (Ping timeout: 252 seconds)
[13:36:55] <azonenberg> My ultimate goal is to generate ephemeral ECDH keys for SSH 
[13:37:05] <azonenberg> i can use the MCU's hardware RNG for making the private key then poke a few bits to get a valid key
[13:37:09] <azonenberg> but then i have to compute the pub key
[13:37:24] <azonenberg> I think i actually did it right for ECDH
[13:37:27] <azonenberg> but wrong for ECDSA
[13:37:42] <rqsd> You seem severely confused
[13:38:04] <azonenberg> My apparently incorrect assumption was that since x25519 and ed25519 used the same field over the same elliptic curve
[13:38:12] <azonenberg> that you could use the same operations to convert a private to a public key
[13:38:20] <azonenberg> i was trying to use a known ed25519 key to sanity check my code
[13:38:24] <azonenberg> It now seems that was incorrect
[13:38:45] <rqsd> You *can* translate an Ed25519 key to an X25519 key, yes. The procedure is quite involved, however; cf. https://doc.libsodium.org/advanced/ed25519-curve25519
[13:38:55] <azonenberg> That's not what I wanted to do
[13:39:09] <azonenberg> I wanted to sanity check my x25519 private -> public conversion by doing an ed25519 private->public conversion
[13:39:14] <azonenberg> but it seems the procedure to do so is not the same
[13:39:17] <rqsd> Indeed
[13:39:17] <azonenberg> So my sanity check is invalid
[13:39:32] <azonenberg> i think i was doing the right math for what i wanted to do, but verifying it wrong
[13:39:41] <azonenberg> Ultimately, what i need to do is 
[13:40:01] <azonenberg> a) generate a random 32-byte string and poke bits to make it a valid x25519 key (done)
[13:40:10] <azonenberg> b) compute the corresponding x25519 public key (done)
[13:40:21] <azonenberg> c) sign this with my host key (need to figure this part out still)
[13:40:32] <Wulf> azonenberg: Why x25519?
[13:40:35] <azonenberg> d) send it to the client, wait for them to do the same, then compute an x25519 shared secret between my key and theirs
[13:40:42] <Wulf> ah.
[13:40:45] <azonenberg> curve25519-sha256 ssh cipher suite
[13:40:49] <azonenberg> using ed25519 host keys
[13:41:47] <rqsd> And don't forget to hash the result and the entire conversation (public keys and the X25519 shared secret) for the actual key material
[13:42:00] <rqsd> So where does Ed25519 come into play?
[13:43:01] <Wulf> rqsd: mutual authentication?
[13:43:10] <rqsd> Correction
[13:43:15] <rqsd> So where does Ed25519 key conversion come into play?
[13:43:29] <rqsd> Oh, just as a sanity check
[13:44:18] <rqsd> Okay, I think I got it. The whole question is moot.
[13:44:56] <azonenberg> yeah. i only have to do x25519 conversion
[13:46:33] <azonenberg> i'm a long ways from actual key material
[13:47:10] <azonenberg> just trying to send a valid SSH_MSG_KEX_ECDH_REPLY for now
[13:47:47] <azonenberg> which means generating an ephemeral key pair and signing with the host key
[13:47:52] <rqsd> Oh, you're not rolling your own communications protocol, you're implementing SSH, got it.
[13:48:21] <azonenberg> yes. on a platform with a few tens of kb of ram, no os, and no malloc :)
[13:48:44] <azonenberg> think stm32f4
[13:49:11] <rqsd> I'm very intimately familiar with this class of devices
[13:49:16] <rqsd> It's hell down there
[13:49:21] <azonenberg> Yeah lol
[13:49:26] <azonenberg> anyway i looked around and found no good ssh servers
[13:49:38] <azonenberg> and telnet/rs232 management isnt my idea of a good wy to securely manage stuff
[13:49:49] <rqsd> dropbear not doing the job?
[13:50:05] <azonenberg> dropbear is probably two OOMs larger than i'm targeting
[13:50:23] <azonenberg> e.g. i violate the ssh rfc by having a 2kB max RX packet size instead of 32 kB
[13:50:29] <azonenberg> because 32 kB is like half the ram on th echip :p
[13:51:01] <azonenberg> it also expects posix apis
[13:51:18] <azonenberg> i depend on... memcpy and memsetlol
[13:52:41] <rqsd> Are you sure SSH is a protocol to use if complying to spec explodes your RAM? There's no guarantee your client will honor your packet size, after all.
[13:52:45] <azonenberg> i saw another "tiny"ssh that claimed to only need a megabyte of ram lol
[13:53:27] <azonenberg> it's for text console not like port forwarding or something
[13:53:38] <azonenberg> i struggle to imagine any situation in which typing commands into a CLI could possibly send a packet bigger than that
[13:53:46] <azonenberg> the largest packet i expect to see is the cipher suite negotiation
[13:54:29] <azonenberg> which is why my max isnt 1kb or less... to fit default openssh cipher suite list
[13:55:15] <azonenberg> quite large lol
[13:56:22] <azonenberg> my max is configurable at compile rtime though
[13:56:30] <azonenberg> you *could* do 32k
[13:58:06] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[13:59:39] *** Joins: kryptografos (~kryptogra@104.244.75.198)
[14:00:07] <rqsd> Interestingly, OpenSSH has code to resize the packet size, but it's apparently never called, so it's just 32k forever
[14:00:54] <azonenberg> yeah. but its never gonna hit that typing text on a keyboard
[14:01:23] <azonenberg> if te client does something bizarre i drop the connection safely
[14:01:38] <rqsd> I really don't know how I feel about violating spec because it supposedly never happens, especially if "implementations SHOULD check that the packet length is reasonable"
[14:02:28] <azonenberg> i bend a lot of rfcs here in the name of minimalism
[14:02:44] <rqsd> At which point I just wonder if there isn't a protocol that's more... fitting
[14:02:51] <azonenberg> like dropping all fragmented ip packets
[14:04:14] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:04:54] <azonenberg> My goal is to implement just enough tcp/ip and ssh to get an encrypted, authenticated management terminal that can interoperate with common SSH clients, with as little code and ram as possible
[14:05:10] <azonenberg> removing as many optional or rarely used corners of the protocol as possible
[14:05:33] <azonenberg> I don't do "real" cipher suite negotiation, for example. I advertise one suite and drop the connection if the client can't  support it
[14:06:09] <azonenberg> if you can't do curve25519-sha256, ed25519, and aes-gcm@openssh.com sucks to be you, i'm not talking to you
[14:06:17] <azonenberg> aes-128-gcm@openssh.com*
[14:06:39] <azonenberg> this is a UART replacement not an openssh replacement
[14:07:52] <azonenberg> i considered telnet over ssp21 but rejected it for being obscure without good client support
[14:08:01] <azonenberg> i can ssh from anything
[14:10:56] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[14:15:04] <azonenberg> incidentally that violates the rfc too
[14:15:11] <azonenberg> as 3des is mandatory
[14:15:29] <azonenberg> (being aes only i mean)
[14:39:20] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[14:40:48] *** Joins: RickSanchez (~RickSanch@2607:fb90:8873:4d11:8824:369d:32d0:c9dd)
[14:41:01] *** Quits: AllMyNames (~AllMyName@user/allmynames) (Ping timeout: 252 seconds)
[14:42:06] *** Quits: RickSanchez (~RickSanch@2607:fb90:8873:4d11:8824:369d:32d0:c9dd) (Remote host closed the connection)
[14:42:25] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[14:46:12] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Client Quit)
[15:01:55] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 252 seconds)
[15:02:00] *** Joins: RickSanchez (~RickSanch@2607:fb90:8873:4d11:8824:369d:32d0:c9dd)
[15:07:33] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[15:10:15] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[15:17:41] *** Quits: lord| (~lordpipe@user/lordpipe) (Read error: Connection reset by peer)
[15:21:12] *** Joins: lord| (~lordpipe@user/lordpipe)
[15:32:13] *** Quits: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name) (Ping timeout: 252 seconds)
[15:40:46] *** Quits: Wulf (~Wulf@user/wulf) (Read error: Connection reset by peer)
[15:41:21] *** Joins: Wulf (~Wulf@user/wulf)
[15:43:56] *** Joins: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name)
[15:45:25] *** Quits: sm2n_ (~sm2n@user/sm2n) (Ping timeout: 252 seconds)
[15:45:48] *** Joins: sm2n (~sm2n@user/sm2n)
[15:55:06] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Ping timeout: 276 seconds)
[15:56:07] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[16:03:40] *** Quits: yggdrasil (~yggdrasil@75-161-5-224.albq.qwest.net) (Ping timeout: 240 seconds)
[16:10:44] *** Joins: yggdrasil (~yggdrasil@67-0-6-124.albq.qwest.net)
[16:12:07] *** Joins: frost (~frost@59.71.243.104)
[16:14:58] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697)
[16:16:20] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[16:27:14] *** Quits: kryptografos (~kryptogra@104.244.75.198) (Ping timeout: 260 seconds)
[16:54:51] *** Quits: riv (~river@tilde.team/user/river) (Quit: Leaving)
[16:57:11] *** duck[m] is now known as duck[m]1
[16:57:28] *** duck[m]1 is now known as duck[m]
[17:00:11] *** Joins: riv (~river@tilde.team/user/river)
[17:06:45] *** Joins: kryptografos (~kryptogra@104.244.75.198)
[17:22:16] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:26:40] *** Quits: kryptografos (~kryptogra@104.244.75.198) (Ping timeout: 268 seconds)
[17:40:43] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:46:11] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 268 seconds)
[17:50:49] *** Quits: riv (~river@tilde.team/user/river) (Quit: Leaving)
[17:52:29] *** Joins: riv (~river@tilde.team/user/river)
[17:54:47] *** Joins: mouseghost (~draco@user/mouseghost)
[17:55:45] *** Joins: rtypo (~alex@user/rtypo)
[17:57:14] *** Joins: mersible (~mersible@92.119.17.211)
[18:03:21] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[18:04:52] *** Quits: X-Scale (~ARM@83.223.227.181) (Ping timeout: 265 seconds)
[18:05:18] *** X-Scale` is now known as X-Scale
[18:13:46] *** Joins: kryptografos (~kryptogra@104.244.75.198)
[18:14:48] *** Joins: X-Scale` (~ARM@46.50.5.115)
[18:16:04] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[18:16:22] *** X-Scale` is now known as X-Scale
[18:17:01] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:17:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:19:14] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[18:24:14] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[18:26:18] *** Joins: machinedgod (~machinedg@24.105.81.50)
[18:38:10] *** Quits: frost (~frost@59.71.243.104) (Quit: Connection closed)
[18:41:48] *** Joins: dez (uid92154@user/dez)
[18:43:20] *** Joins: shariashaman (~Rheanna@218.78.88.163)
[18:47:42] *** Quits: Elon_Satoshi (~elon@user/elon-satoshi/x-4242282) (Ping timeout: 260 seconds)
[18:49:32] *** Joins: Elon_Satoshi (~elon@user/elon-satoshi/x-4242282)
[18:56:35] *** Quits: chomwitt (~chomwitt@2a02:587:dc15:500:12c3:7bff:fe6d:d374) (Ping timeout: 260 seconds)
[19:26:52] *** Joins: szarkanet (~szarka@2001-48F8-9004-E05-55C2-D4FA-E6EF-8B62-dynamic.midco.net)
[19:29:40] *** Quits: szarkaorg (~szarka@2001-48F8-9004-E05-2D63-6CBC-91A2-476B-dynamic.midco.net) (Ping timeout: 240 seconds)
[19:33:36] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[19:38:04] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697) (Ping timeout: 252 seconds)
[20:01:46] *** Joins: Narrat (~omnius@p200300df5f4530f906ea56fffe2e7cdc.dip0.t-ipconnect.de)
[20:08:33] *** Quits: shariashaman (~Rheanna@218.78.88.163) (Remote host closed the connection)
[20:09:20] *** Joins: shariashaman (~Rheanna@101.91.192.124)
[20:11:49] *** Joins: lxlldr (~I@87-196-81-142.net.novis.pt)
[20:26:19] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[20:30:33] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[20:32:10] *** Quits: kryptografos (~kryptogra@104.244.75.198) (Quit: Konversation terminated!)
[20:35:42] *** Quits: rtypo (~alex@user/rtypo) (Quit: WeeChat 3.2)
[20:36:45] *** Joins: rtypo (~alex@user/rtypo)
[20:37:12] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[20:42:02] *** Quits: cwebber (~user@user/cwebber) (Ping timeout: 260 seconds)
[20:45:09] *** Joins: river (~river@tilde.team/user/river)
[20:47:22] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 252 seconds)
[20:47:28] *** Quits: riv (~river@tilde.team/user/river) (Ping timeout: 252 seconds)
[20:52:53] *** Quits: shariashaman (~Rheanna@101.91.192.124) (Remote host closed the connection)
[20:53:39] *** Joins: shariashaman (~Rheanna@101.91.192.124)
[20:54:18] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[20:58:15] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[20:59:07] *** Joins: cwebber (~user@user/cwebber)
[20:59:07] *** Quits: shariashaman (~Rheanna@101.91.192.124) (Remote host closed the connection)
[21:01:34] *** Joins: shariashaman (~Rheanna@218.78.77.129)
[21:01:37] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[21:05:22] *** Quits: RickSanchez (~RickSanch@2607:fb90:8873:4d11:8824:369d:32d0:c9dd) (Ping timeout: 260 seconds)
[21:06:11] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:98f2:b2c4:af2:3d41)
[21:11:26] *** Quits: cwebber (~user@user/cwebber) (Ping timeout: 260 seconds)
[21:12:12] *** Quits: RickSanchez (~RickSanch@2607:fb90:88aa:789:98f2:b2c4:af2:3d41) (Remote host closed the connection)
[21:12:44] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:98f2:b2c4:af2:3d41)
[21:17:43] *** Quits: RickSanchez (~RickSanch@2607:fb90:88aa:789:98f2:b2c4:af2:3d41) (Ping timeout: 252 seconds)
[21:39:10] *** Quits: qbt (~edun@user/edun) (Ping timeout: 252 seconds)
[21:48:30] *** Quits: shariashaman (~Rheanna@218.78.77.129) (Remote host closed the connection)
[21:54:39] *** Joins: shariashaman (~Rheanna@101.91.214.30)
[21:59:17] *** Joins: aleck1 (~aleck@user/aleck)
[22:01:50] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 260 seconds)
[22:02:32] *** Joins: qbt (~edun@user/edun)
[22:10:23] *** Joins: cwebber (~user@user/cwebber)
[22:11:27] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[22:12:53] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[22:21:50] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[22:31:35] *** Joins: SystemC (~asdf@port-92-196-28-200.dynamic.as20676.net)
[22:33:35] <SystemC> Does sb now about how deepy Tether is involved in the future Evergrande crash? Does sb have good resources?
[22:33:42] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[22:33:49] <SystemC> sry wrong group
[22:34:17] *** Parts: SystemC (~asdf@port-92-196-28-200.dynamic.as20676.net) ()
[22:36:49] *** Joins: mouseghost (~draco@user/mouseghost)
[22:38:41] *** Quits: shariashaman (~Rheanna@101.91.214.30) (Remote host closed the connection)
[22:39:01] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:98f2:b2c4:af2:3d41)
[22:40:19] *** Joins: shariashaman (~Rheanna@218.78.43.189)
[22:47:51] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[22:56:13] *** Joins: kish` (~aqua@user/aqua)
[22:59:18] *** Joins: Everything (~Everythin@37.115.210.35)
[23:07:30] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[23:13:51] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Ping timeout: 276 seconds)
[23:22:13] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[23:28:37] *** Quits: shariashaman (~Rheanna@218.78.43.189) (Remote host closed the connection)
[23:29:18] *** Joins: shariashaman (~Rheanna@101.91.193.123)
[23:35:57] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[23:37:02] *** Quits: lxlldr (~I@87-196-81-142.net.novis.pt) (Ping timeout: 260 seconds)
[23:37:24] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[23:42:12] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[23:47:07] *** Joins: imi (~imi@catv-80-98-11-3.catv.broadband.hu)
[23:54:32] *** Quits: BOKALDO (~BOKALDO@46.109.203.51) (Quit: Leaving)
[23:58:42] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
