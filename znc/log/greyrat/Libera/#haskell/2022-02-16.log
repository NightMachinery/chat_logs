[00:00:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:00:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:00:45] *** Joins: deadmarshal (~deadmarsh@95.38.117.142)
[00:01:15] *** ChanServ sets mode: +o litharge
[00:01:16] *** litharge sets mode: +b $a:lavaman
[00:01:27] *** litharge sets mode: -o litharge
[00:02:05] <monochrom> (hrm, so that's what it does)
[00:03:43] <ProfSimm> All programming paradigms, imperative, functional, dataflow, start looking like syntactical variations of the same thing when you look at it in a certain way
[00:04:56] <maerwald> yeah, because the hardware is the same
[00:05:23] <Sqaure> janus: Have you checked out Miso? Its just like Elm but haskell. 
[00:05:48] *** Quits: deadmarshal (~deadmarsh@95.38.117.142) (Ping timeout: 272 seconds)
[00:05:56] <Sqaure> ive had a solid experience with it.
[00:06:34] *** Joins: cfricke (~cfricke@user/cfricke)
[00:07:16] <ProfSimm> maerwald: well I mean at a higher level. 
[00:08:19] <maerwald> is that a snoop dogg meme?
[00:12:45] *** Quits: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk) (Remote host closed the connection)
[00:12:56] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: leaving)
[00:14:16] *** Quits: thyriaen (~thyriaen@simnet-nat-pool-185-130-54-167.stargrpns.pp.ua) (Quit: Leaving)
[00:15:16] <koala_man> how can I go Map k (Maybe v) -> Map k v by deleting all the Nothings? Is there something neater than mapMaybe + from/toAscList?
[00:16:26] <monochrom> Data.Map's filter may help.
[00:18:00] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[00:18:21] <koala_man> oh, there *is* a Map.mapMaybe, not sure how I missed that
[00:18:29] <jackdk> na, that's not type-changing. yeah you want mapMaybe id
[00:18:47] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:95ea:d1ff:55f2:9ea6) (Ping timeout: 250 seconds)
[00:18:58] <koala_man> thanks!
[00:18:58] <monochrom> Oh darn. Yeah mapMaybe.
[00:19:42] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[00:24:40] *** Quits: capo_greco (~textual@60-241-161-167.static.tpgi.com.au) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:25:02] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[00:28:52] *** Quits: ystael (~ystael@user/ystael) (Quit: Lost terminal)
[00:29:26] <Inst[m]> <ProfSimm> "All programming paradigms..." <- i mean tbh the easier way to arrive at this is just do FP in an imperative language
[00:29:33] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[00:30:49] <monochrom> No, do Prolog-style in imperative languages, to appreciate how it's "just" "syntax sugar".
[00:31:11] *** Joins: ystael (~ystael@user/ystael)
[00:31:12] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b) (Ping timeout: 252 seconds)
[00:31:46] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b)
[00:32:29] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:34:07] *** Joins: acidjnk (~acidjnk@p200300d0c7057500a04355ceabfe8d47.dip0.t-ipconnect.de)
[00:35:40] *** Joins: pavonia (~user@user/siracusa)
[00:36:47] *** Joins: capo_greco (~textual@60-241-161-167.static.tpgi.com.au)
[00:36:59] *** Quits: nunggu_ (~q@user/nunggu) (Remote host closed the connection)
[00:37:41] *** Joins: nunggu_ (~q@user/nunggu)
[00:37:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:49da:9bbf:6c0f:9f3d)
[00:38:09] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[00:38:57] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[00:42:09] <dolio> It's a mere 60 pages in SICP.
[00:43:35] <mjrosenb> Sqaure: janus: I've also had good experiences with miso.
[00:48:01] *** Quits: capo_greco (~textual@60-241-161-167.static.tpgi.com.au) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:48:45] *** Joins: samtoth (~igloo@90.208.227.189)
[00:50:24] *** Quits: samtoth (~igloo@90.208.227.189) (Remote host closed the connection)
[00:50:44] *** Joins: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk)
[00:50:46] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 272 seconds)
[00:52:19] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[00:52:40] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Ping timeout: 272 seconds)
[00:53:02] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[00:54:14] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:54:50] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:55:50] *** Quits: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk) (Ping timeout: 272 seconds)
[00:56:05] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[01:01:16] *** ChanServ sets mode: +o litharge
[01:01:17] *** litharge sets mode: -bo $a:lavaman litharge
[01:01:58] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[01:07:05] *** Joins: alp (~alp@user/alp)
[01:07:10] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[01:15:09] *** Quits: fendor (~fendor@77.119.209.21.wireless.dyn.drei.com) (Remote host closed the connection)
[01:18:44] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b) (Remote host closed the connection)
[01:24:11] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:24:30] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:26:12] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 252 seconds)
[01:29:11] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 256 seconds)
[01:29:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk)
[01:32:24] *** Joins: cynomys (~cynomys@user/cynomys)
[01:34:01] *** Quits: off^ (~off@50.235.176.163) (Remote host closed the connection)
[01:35:00] *** Joins: FernandoChu[m] (~ryunaqmat@2001:470:69fc:105::1:4dc0)
[01:36:04] *** Quits: kuribas (~user@ptr-25vy0i6vww7x1l8ynbn.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[01:36:22] *** Quits: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk) (Ping timeout: 272 seconds)
[01:36:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[01:37:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[01:39:39] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[01:46:08] *** Joins: coot_ (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[01:46:47] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[01:47:01] <zwro[m]> test
[01:47:17] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[01:47:35] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[01:48:36] *** Quits: coot (~coot@213.134.190.95) (Ping timeout: 240 seconds)
[01:52:18] *** Quits: michalz (~michalz@185.246.204.93) (Remote host closed the connection)
[02:01:01] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:03:43] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[02:05:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: Sorry, I need to scratch my left butt cheek.)
[02:14:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:15:34] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: leaving)
[02:15:45] *** Joins: cynomys (~cynomys@user/cynomys)
[02:16:34] *** Quits: cynomys (~cynomys@user/cynomys) (Client Quit)
[02:16:44] *** Joins: cynomys (~cynomys@user/cynomys)
[02:24:06] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:26:09] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[02:26:33] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[02:27:24] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[02:29:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[02:30:06] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-3d94-4d23-dc7c-c228.res6.spectrum.com)
[02:38:48] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[02:39:04] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:43:48] <jackdk> zwro[m]: hello
[02:47:36] *** Quits: coot_ (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot_)
[02:49:11] *** Joins: chenqisu12 (~chenqisu1@183.217.200.249)
[02:49:50] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 272 seconds)
[02:51:28] *** Quits: FernandoChu[m] (~ryunaqmat@2001:470:69fc:105::1:4dc0) (*.net *.split)
[02:51:28] *** Quits: acidjnk (~acidjnk@p200300d0c7057500a04355ceabfe8d47.dip0.t-ipconnect.de) (*.net *.split)
[02:51:28] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[02:51:28] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (*.net *.split)
[02:51:28] *** Quits: econo (uid147250@user/econo) (*.net *.split)
[02:51:28] *** Quits: polyphem (~rod@2a02:810d:840:8754:448e:47ff:4575:7cfb) (*.net *.split)
[02:51:28] *** Quits: megeve (sid523379@id-523379.hampstead.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: foul_owl (~kerry@207.244.125.36) (*.net *.split)
[02:51:28] *** Quits: myme (~myme@2a01:799:d5a:cd00:9ae3:d451:a989:e1e9) (*.net *.split)
[02:51:28] *** Quits: img (~img@user/img) (*.net *.split)
[02:51:28] *** Quits: kanin (~kanin@112.41.64.39) (*.net *.split)
[02:51:28] *** Quits: edwtjo (~edwtjo@user/edwtjo) (*.net *.split)
[02:51:28] *** Quits: hongminhee (sid295@2a03:5180:f::127) (*.net *.split)
[02:51:28] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[02:51:28] *** Quits: cbarrett (sid192934@2a03:5180:f:1::2:f1a6) (*.net *.split)
[02:51:28] *** Quits: Boarders_ (sid425905@id-425905.lymington.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: ellie (~ellie@user/ellie) (*.net *.split)
[02:51:28] *** Quits: Putonlalla (~sapekiis@it-cyan.it.jyu.fi) (*.net *.split)
[02:51:28] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (*.net *.split)
[02:51:28] *** Quits: Hafydd (~Hafydd@user/hafydd) (*.net *.split)
[02:51:28] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[02:51:28] *** Quits: tv (~tv@user/tv) (*.net *.split)
[02:51:28] *** Quits: elkcl (~elkcl@broadband-37-110-156-162.ip.moscow.rt.ru) (*.net *.split)
[02:51:28] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: Flow (~none@gentoo/developer/flow) (*.net *.split)
[02:51:28] *** Quits: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d) (*.net *.split)
[02:51:28] *** Quits: oats (~thomas@user/oats) (*.net *.split)
[02:51:28] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (*.net *.split)
[02:51:28] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: tinwood (~tinwood@canonical/tinwood) (*.net *.split)
[02:51:28] *** Quits: Pent (sid313808@lymington.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[02:51:28] *** Quits: dexterfoo (~dexter@li655-253.members.linode.com) (*.net *.split)
[02:51:28] *** Quits: fluxit (~fluxit@techsmix.net) (*.net *.split)
[02:51:28] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (*.net *.split)
[02:51:28] *** Quits: heath (~heath@user/heath) (*.net *.split)
[02:51:28] *** Quits: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de) (*.net *.split)
[02:51:28] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[02:51:28] *** Quits: noctuks (7vrDyCK6LH@user/noctux) (*.net *.split)
[02:51:28] *** Quits: cjay (cjay@nerdbox.nerd2nerd.org) (*.net *.split)
[02:51:28] *** Quits: notabled1 (~notabledu@ares.dbalan.in) (*.net *.split)
[02:51:28] *** Quits: sshine (~simon@hubris.eta.solutions) (*.net *.split)
[02:51:28] *** Quits: blades (~blades@204.48.29.163) (*.net *.split)
[02:51:28] *** Quits: kosmikus (~kosmikus@nullzig.kosmikus.org) (*.net *.split)
[02:51:28] *** Quits: Trattue (~Trattue@152.70.182.158) (*.net *.split)
[02:51:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:51:53] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[02:51:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:52:00] *** Quits: gurkenglas (~gurkengla@dslb-188-096-121-068.188.096.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[02:52:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:52:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:52:27] *** Joins: img (~img@user/img)
[02:52:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:52:36] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[02:52:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:53:43] *** Joins: Shiranai (~Shiranai@190.237.13.59)
[02:53:47] *** Joins: FernandoChu[m] (~ryunaqmat@2001:470:69fc:105::1:4dc0)
[02:53:47] *** Joins: acidjnk (~acidjnk@p200300d0c7057500a04355ceabfe8d47.dip0.t-ipconnect.de)
[02:53:47] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:53:47] *** Joins: fluxit (~fluxit@techsmix.net)
[02:53:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[02:53:47] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[02:53:47] *** Joins: econo (uid147250@user/econo)
[02:53:47] *** Joins: polyphem (~rod@2a02:810d:840:8754:448e:47ff:4575:7cfb)
[02:53:47] *** Joins: megeve (sid523379@id-523379.hampstead.irccloud.com)
[02:53:47] *** Joins: foul_owl (~kerry@207.244.125.36)
[02:53:47] *** Joins: myme (~myme@2a01:799:d5a:cd00:9ae3:d451:a989:e1e9)
[02:53:47] *** Joins: kanin (~kanin@112.41.64.39)
[02:53:47] *** Joins: edwtjo (~edwtjo@user/edwtjo)
[02:53:47] *** Joins: bjs (sid190364@user/bjs)
[02:53:47] *** Joins: hongminhee (sid295@2a03:5180:f::127)
[02:53:47] *** Joins: cbarrett (sid192934@2a03:5180:f:1::2:f1a6)
[02:53:47] *** Joins: Boarders_ (sid425905@id-425905.lymington.irccloud.com)
[02:53:47] *** Joins: ellie (~ellie@user/ellie)
[02:53:47] *** Joins: Putonlalla (~sapekiis@it-cyan.it.jyu.fi)
[02:53:47] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[02:53:47] *** Joins: drewr (~drew@user/drewr)
[02:53:47] *** Joins: Hafydd (~Hafydd@user/hafydd)
[02:53:47] *** Joins: tv (~tv@user/tv)
[02:53:47] *** Joins: elkcl (~elkcl@broadband-37-110-156-162.ip.moscow.rt.ru)
[02:53:47] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:53:47] *** Joins: Flow (~none@gentoo/developer/flow)
[02:53:47] *** Joins: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[02:53:47] *** Joins: oats (~thomas@user/oats)
[02:53:47] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[02:53:47] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[02:53:47] *** Joins: tinwood (~tinwood@canonical/tinwood)
[02:53:47] *** Joins: Pent (sid313808@lymington.irccloud.com)
[02:53:47] *** Joins: finsternis (~X@23.226.237.192)
[02:53:47] *** Joins: dexterfoo (~dexter@li655-253.members.linode.com)
[02:53:47] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[02:53:47] *** Joins: heath (~heath@user/heath)
[02:53:47] *** Joins: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de)
[02:53:47] *** Joins: noctuks (7vrDyCK6LH@user/noctux)
[02:53:47] *** Joins: notabled1 (~notabledu@ares.dbalan.in)
[02:53:47] *** Joins: cjay (cjay@nerdbox.nerd2nerd.org)
[02:53:47] *** Joins: sshine (~simon@hubris.eta.solutions)
[02:53:47] *** Joins: blades (~blades@204.48.29.163)
[02:53:47] *** Joins: kosmikus (~kosmikus@nullzig.kosmikus.org)
[02:53:47] *** Joins: Trattue (~Trattue@152.70.182.158)
[02:53:47] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Max SendQ exceeded)
[02:53:47] *** Quits: finsternis (~X@23.226.237.192) (Max SendQ exceeded)
[02:54:20] *** Joins: finsternis (~X@23.226.237.192)
[02:55:24] <FernandoChu[m]> <zwro[m]> "test" <- hello x2
[02:56:57] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[02:57:23] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[02:57:26] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 272 seconds)
[02:57:50] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:58:37] *** Joins: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk)
[02:59:31] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[03:01:04] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[03:03:00] *** Quits: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[03:08:54] *** Quits: chenqisu12 (~chenqisu1@183.217.200.249) (Read error: Connection reset by peer)
[03:09:34] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[03:09:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[03:10:26] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[03:14:08] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[03:14:54] *** Joins: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk)
[03:15:00] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[03:16:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[03:17:00] <dibblego> koala_man: catMaybes = mapMaybe id
[03:17:10] <dibblego> oh wait no Map, nothing nothing
[03:17:16] <koala_man> dibblego!!
[03:17:25] <dibblego> koala_man!! I'm about to head out
[03:18:05] <koala_man> dibblego: I have some knot tying I can't finish that you may have some thoughts on later
[03:18:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:18:12] <dibblego> ok, about an hour
[03:18:16] <koala_man> \o/
[03:22:08] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 272 seconds)
[03:28:12] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[03:28:54] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[03:31:07] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[03:40:26] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[03:41:13] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[03:42:26] *** Joins: lbseale_ (~ep1ctetus@user/ep1ctetus)
[03:42:55] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (Ping timeout: 256 seconds)
[03:45:24] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[03:45:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[03:45:30] *** Quits: max22- (~maxime@2a01cb0883359800f7b27aee14b4b0ce.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:45:36] <EvanR> is there a name or blog post for this concept: an abstract data type which supports querying/summarizing/reading but also editing. And internally it has two interchangable forms which are more efficient for repeated reading or repeated editing respectively
[03:45:47] *** Joins: cynomys (~cynomys@user/cynomys)
[03:46:12] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 272 seconds)
[03:47:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:47:34] <EvanR> and maybe policies for when to make the transformation one way or another
[03:47:35] *** Joins: alp (~alp@user/alp)
[03:49:47] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[03:50:24] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[03:50:38] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[03:51:33] *** Quits: acidjnk (~acidjnk@p200300d0c7057500a04355ceabfe8d47.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:51:51] *** Joins: kmein (~weechat@user/kmein)
[03:57:25] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[03:58:00] *** Quits: xff0x (~xff0x@2001:1a81:53dd:d400:b969:14d4:3062:a4) (Ping timeout: 252 seconds)
[03:58:59] *** Joins: xff0x (~xff0x@2001:1a81:53dd:d400:cfc4:5e91:8963:f0f2)
[04:01:19] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[04:02:24] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[04:03:11] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[04:05:13] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:05:20] <Inst[m]> monochrom: is the Church-Turing hypothesis proven?
[04:05:44] <Inst[m]> in which case, ProfSimms is just reiterating something rather trivial
[04:06:06] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[04:10:28] <monochrom> EvanR: Does a relational database count? It may be a little bit weak on having two forms, but declaring primary keys and/or secondary keys and/or foreign keys may count as that, because the b-tree structure is built based on which fields you declare as keys.
[04:10:57] <EvanR> yeah a database is great example of 1 form at a tmie
[04:11:27] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: Lost terminal)
[04:11:48] <EvanR> do you want to read a lot or query a lot, both. (Ok, they have some configuration options to make one or the other faster, but you set this option once to inform the form)
[04:12:13] <monochrom> On the other extreme, perfect hashing is a hash table so optimized for lookups that it bans editing altogether.
[04:13:09] <EvanR> s/read/edit/
[04:14:20] <monochrom> I do not know of things that let you flip a switch and causes "OK now rebuild for optimal read-only".
[04:14:47] <EvanR> it doesn't need to be the size of a database
[04:15:41] <EvanR> ok maybe this is a subproblem of just have forms that make some queries cheaper to do than others, since in pure functional an edit is like a kind of read
[04:15:59] <EvanR> which has as an example the complex number in rectangular form or polar form
[04:17:09] <EvanR> you could use rectangular form everywhere like we do, and "just" convert to polar any time the radius or angle is requested
[04:17:38] <monochrom> Even within read-only, optimal-for-lookup and optimal-for-folds may already be in conflict.
[04:17:59] <EvanR> that's basically what I just said
[04:18:04] <monochrom> Ah OK.
[04:18:15] <EvanR> lookup and fold being two examples of queries
[04:18:23] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:18:40] <EvanR> and substitution, getting an updated picture, a third example
[04:19:13] <EvanR> the standard method is to use something that's generally ok at everything
[04:19:58] <monochrom> Yeah it's hard to predict what your users want to do in the far future. :)
[04:20:31] <EvanR> what if instead of a history of the future, you had a (possibly evolving) probability model for what they will want next
[04:21:18] <EvanR> and when
[04:21:58] <EvanR> I guess then it's a combination of too complicated and not worth it
[04:22:01] <monochrom> OK you can have that model based on the past. A keyword may be "adaptive data structures".
[04:23:02] <EvanR> i can imagine a smart engineer saying, no, why don't we just use actual knowledge of what we will actually do instead
[04:23:34] <monochrom> Don't worry about worth. There are always crazy computer scientists who think up crazy solutions. :)
[04:24:43] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:c5cf:b717:584d:5dd3) (Remote host closed the connection)
[04:25:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:25:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:25:50] *** Joins: wroathe (~wroathe@user/wroathe)
[04:30:04] *** Quits: lbseale_ (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[04:30:36] *** Quits: jgeerds_ (~jgeerds@55d4b9df.access.ecotel.net) (Read error: Connection reset by peer)
[04:30:59] *** Joins: jgeerds_ (~jgeerds@55d4b9df.access.ecotel.net)
[04:31:07] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[04:32:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[04:34:13] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[04:34:14] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:edbf:f48a:9927:9718)
[04:35:07] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[04:36:23] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:edbf:f48a:9927:9718) (Client Quit)
[04:36:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[04:40:30] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:43:06] *** Quits: jgeerds_ (~jgeerds@55d4b9df.access.ecotel.net) (Ping timeout: 252 seconds)
[04:46:37] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:50:04] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[05:01:27] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[05:02:34] *** Joins: img (~img@user/img)
[05:03:00] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[05:05:02] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[05:06:13] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[05:07:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:08:17] *** Joins: Cajun (~Cajun@user/cajun)
[05:08:57] <Inst[m]> fuck, what's the hanzi for Lai
[05:08:58] <Inst[m]> monochrom
[05:09:14] <Inst[m]> should be addressing you as Lai 老师
[05:10:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[05:12:21] <Inst[m]> 巴黎的黎
[05:12:28] <Inst[m]> 黎老师
[05:12:46] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:13:16] <Inst[m]> was wondering, right now, my working definition of Haskell is "clusterfuck", i.e, it's ostensibly a "pure, functional programming language" where the language extensions and lib mean it technically has everything. Except Or-Patterns.
[05:13:49] <Inst[m]> i'm sure someone implemented objects via STRef / IORef somewhere in Hackage
[05:16:05] <Inst[m]> and yeah, OHaskell is a thing, so's Timber
[05:16:33] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[05:20:04] *** Joins: Merfont (~Kaiepi@156.34.47.253)
[05:20:09] *** Quits: Kaipi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[05:24:30] *** Joins: dsrt^ (~dsrt@50.235.176.163)
[05:25:00] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[05:30:12] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[05:30:16] *** Joins: vysn (~vysn@user/vysn)
[05:34:48] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[05:38:38] <Axman6> :t M.fromList . mapMaybe traverse
[05:38:39] <lambdabot> error:
[05:38:39] <lambdabot>     • Couldn't match type ‘t0 a -> f (t0 b)’ with ‘Maybe (k, a1)’
[05:38:39] <lambdabot>       Expected type: (a -> f b) -> Maybe (k, a1)
[05:38:50] <Axman6> :t M.fromList . mapMaybe sequence
[05:38:50] <lambdabot> Ord k => [(k, Maybe a)] -> M.Map k a
[05:39:06] <Axman6> :t M.fromList . mapMaybe sequence . M.toList
[05:39:07] <lambdabot> Ord k => M.Map k (Maybe a) -> M.Map k a
[05:39:07] *** Joins: jinsun__ (~jinsun@user/jinsun)
[05:39:36] <Axman6> :t M.fromAscList . mapMaybe sequence . M.toList -- koala_man (sorry, it's been churning away in the back of my mind)
[05:39:37] <lambdabot> Eq k => M.Map k (Maybe a) -> M.Map k a
[05:39:57] *** Quits: emf (~emf@2620:10d:c090:400::5:d01b) (Ping timeout: 240 seconds)
[05:41:45] <Axman6> :t M.traverseMaybeWithKey (\_k v -> Identity v)
[05:41:46] <lambdabot> M.Map k (Maybe b) -> Identity (M.Map k b)
[05:41:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[05:41:57] *** Quits: jinsun (~jinsun@user/jinsun) (Ping timeout: 252 seconds)
[05:42:20] <Axman6> that might be better, since it can reuse the structure of the tree
[05:43:08] <Axman6> > M.traverseMaybeWithKey (\_k v -> [Just v, Nothing]) (M.fromList $ zip [1,2,3] "abc")
[05:43:09] <lambdabot>  [fromList [(1,'a'),(2,'b'),(3,'c')],fromList [(1,'a'),(2,'b')],fromList [(1,...
[05:43:56] <Axman6> oh, there's also just mapMaybe id
[05:44:28] <Axman6> :t M.mapMaybe id -- which.. is what dibblego already said and then retracted
[05:44:29] <lambdabot> M.Map k (Maybe b) -> M.Map k b
[05:44:47] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:46:19] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:49:06] <jackdk> Axman6/koala_man : https://hackage.haskell.org/package/witherable-0.4.2/docs/Witherable.html#t:Filterable
[05:50:17] *** Quits: xff0x (~xff0x@2001:1a81:53dd:d400:cfc4:5e91:8963:f0f2) (Ping timeout: 250 seconds)
[05:51:11] *** Joins: xff0x (~xff0x@2001:1a81:53dd:d400:1a83:e659:64aa:a931)
[05:52:18] *** Joins: alp (~alp@user/alp)
[05:53:15] <shapr> Is there a table for postgresql-simple that has "suggested postgresql column type for defined ToField instances" ?
[05:59:33] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[06:03:57] *** Joins: gaff (~gaff@49.207.202.143)
[06:15:55] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 240 seconds)
[06:20:54] *** Joins: a6a45081-2b83 (~aditya@2601:249:4380:4f10::fe26)
[06:21:06] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:edbf:f48a:9927:9718)
[06:24:31] *** Quits: xff0x (~xff0x@2001:1a81:53dd:d400:1a83:e659:64aa:a931) (Ping timeout: 250 seconds)
[06:25:00] *** Quits: a6a45081-2b83 (~aditya@2601:249:4380:4f10::fe26) (Ping timeout: 240 seconds)
[06:25:02] *** Joins: f33f046c-a02e (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[06:26:23] *** Joins: xff0x (~xff0x@2001:1a81:5217:d600:a1de:a304:ac28:4386)
[06:27:19] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[06:27:55] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[06:28:41] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[06:41:00] *** Quits: gaff (~gaff@49.207.202.143) (Ping timeout: 272 seconds)
[06:41:08] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[06:44:13] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Client Quit)
[06:44:32] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[06:44:35] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Client Quit)
[06:44:54] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[06:45:05] *** Joins: zaquest (~notzaques@5.130.79.72)
[06:46:16] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[06:47:05] *** Quits: f33f046c-a02e (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[06:47:24] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[06:53:29] *** Joins: gaff (~gaff@49.207.202.143)
[06:57:51] *** Joins: emf (~emf@2620:10d:c090:400::5:6a6c)
[06:59:30] *** Quits: td_ (~td@94.134.91.25) (Ping timeout: 252 seconds)
[07:01:33] *** Joins: td_ (~td@muedsl-82-207-238-242.citykom.de)
[07:14:55] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[07:15:21] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:16:25] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Quit: Konversation terminated!)
[07:17:14] *** Quits: emf (~emf@2620:10d:c090:400::5:6a6c) (Quit: emf)
[07:18:36] *** Quits: gaff (~gaff@49.207.202.143) (Ping timeout: 240 seconds)
[07:22:18] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[07:24:21] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:26:01] *** Joins: deadmarshal (~deadmarsh@95.38.0.168)
[07:30:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[07:32:30] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[07:32:31] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:32:45] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[07:32:49] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:36:57] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Quit: Konversation terminated!)
[07:39:54] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 272 seconds)
[07:40:38] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[07:42:11] *** Joins: Erutuon (~Erutuon@user/erutuon)
[07:45:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:46:14] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 272 seconds)
[07:46:47] *** Joins: wroathe (~wroathe@user/wroathe)
[07:50:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 272 seconds)
[07:54:42] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Remote host closed the connection)
[07:59:19] *** Joins: mbuf (~Shakthi@122.162.72.100)
[08:00:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:03:18] *** Joins: deadmarshal_ (~deadmarsh@95.38.231.90)
[08:03:48] *** Quits: deadmarshal (~deadmarsh@95.38.0.168) (Ping timeout: 240 seconds)
[08:06:13] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:06:13] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:06:13] *** Joins: wroathe (~wroathe@user/wroathe)
[08:06:26] *** Joins: texasmynsted (~texasmyns@99.96.221.112)
[08:07:48] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[08:09:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:10:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:12:14] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:13:06] *** Joins: cyphase_eviltwin (~cyphase@user/cyphase)
[08:14:09] *** Joins: burnside_ (~burnsides@client-8-91.eduroam.oxuni.org.uk)
[08:14:10] *** Quits: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk) (Remote host closed the connection)
[08:15:00] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[08:17:39] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:17:48] *** Joins: notzmv (~zmv@user/notzmv)
[08:18:12] *** Quits: burnside_ (~burnsides@client-8-91.eduroam.oxuni.org.uk) (Ping timeout: 240 seconds)
[08:18:32] *** Quits: deadmarshal_ (~deadmarsh@95.38.231.90) (Ping timeout: 272 seconds)
[08:20:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:20:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:21:17] *** Joins: capo_greco (~textual@60-241-161-167.static.tpgi.com.au)
[08:29:09] *** Joins: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net)
[08:29:10] *** Quits: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[08:30:02] *** Joins: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net)
[08:30:10] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[08:32:26] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:34:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[08:34:39] *** Quits: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[08:37:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[08:38:09] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:39:00] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::99e7) (Ping timeout: 240 seconds)
[08:39:05] *** Quits: modnar (~modnar@shell.sonic.net) (Quit: No Ping reply in 180 seconds.)
[08:40:18] *** Joins: modnar (~modnar@shell.sonic.net)
[08:43:00] *** Quits: yauhsien (~Yau-Hsien@61-231-32-166.dynamic-ip.hinet.net) (Quit: Leaving)
[08:43:40] *** Joins: gaff (~gaff@49.207.201.232)
[08:52:15] *** Quits: capo_greco (~textual@60-241-161-167.static.tpgi.com.au) (Ping timeout: 252 seconds)
[09:02:32] *** Joins: deadmarshal (~deadmarsh@95.38.231.90)
[09:12:12] *** Joins: yauhsien (~yauhsien@61-231-32-166.dynamic-ip.hinet.net)
[09:14:19] *** Joins: yuvi (~uv125@192.54.96.185)
[09:17:26] *** Quits: yauhsien (~yauhsien@61-231-32-166.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[09:18:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:21:28] *** Quits: gaff (~gaff@49.207.201.232) (Quit: Bye ...)
[09:22:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[09:28:49] *** Quits: yuvi (~uv125@192.54.96.185) (Quit: WeeChat 2.8)
[09:30:37] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[09:35:24] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[09:36:34] *** Quits: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com) (Quit: leaving)
[09:38:27] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[09:39:36] *** Quits: pavonia (~user@user/siracusa) (Read error: Connection reset by peer)
[09:39:48] *** Quits: forell (~forell@user/forell) (Ping timeout: 240 seconds)
[09:39:51] *** Joins: pavonia (~user@user/siracusa)
[09:39:58] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[09:40:04] *** Joins: forell (~forell@user/forell)
[09:44:05] <ProfSimm> Why do we need map and filter when we have fold
[09:44:27] <Inst[m]> more specific
[09:44:34] <Inst[m]> haskell has the particular quality wherein there's like 20 different ways to do things
[09:44:43] *** Quits: foul_owl (~kerry@207.244.125.36) (Ping timeout: 250 seconds)
[09:44:45] <Inst[m]> map, sometimes you want to preserve a structure
[09:44:48] <Inst[m]> map is just a specific form of fmap
[09:45:10] <Inst[m]> also, fold can generate performance issues
[09:45:24] <Inst[m]> also
[09:45:38] <Inst[m]> the point of map / filter is to make it so that readers can understand your code, i.e, see what you're aiming to do
[09:45:53] <Inst[m]> fold, you often end up with weird lambdas the reader doesn't understand
[09:46:11] <Inst[m]> hence why there's like 20 different ways to do things, choose the best combination of readability, concision, and performance
[09:46:35] <ProfSimm> all you say makes sense.
[09:46:40] <ProfSimm> Which is why I don't accept it. 
[09:46:46] <ProfSimm> Gotta dig deeper :D
[09:46:50] <Inst[m]> ProfSimm: I met you on ##programing
[09:46:55] <Inst[m]> just now joining the Haskell club?
[09:47:03] <Inst[m]> also, in general
[09:47:06] <Inst[m]> Haskellers are fucking insane
[09:47:23] <Inst[m]> there's like 5 different ways to do a conditional in Haskell
[09:47:27] <ProfSimm> Inst[m]: let's say the more I think about programming from first principles, the more things start looking like Haskell and I'm being in a bit of denial right now
[09:47:28] <Inst[m]> within the prelude
[09:47:42] <Inst[m]> once you add libraries and language extensions
[09:47:46] <Inst[m]> there's probably like 10 different ways to do a conditional
[09:48:01] <Inst[m]> Haskell does not provide a unified style
[09:48:33] <Inst[m]> IMO it's an exceptionally good language for a beginner to struggle with the theory underlying programming languages because there's so many fucking different ways to do things and you have to think about how each way is "valid" or useful
[09:48:59] <Inst[m]> which is why i like it, but my ABC girlfriend needs me to help her with her Chinese, so I have to put Haskell aside for a bit
[09:49:13] <ProfSimm> Inst[m]: that thing that keeps me up at night is what's the most miminal core through which everything else can be represented as libraries
[09:49:27] <ProfSimm> Inst[m]: the problem with fold is that it's not paralellizable for ex.
[09:49:37] <Inst[m]> try {-# LANGUAGE NoImplicitPrelude #-}
[09:49:42] <ProfSimm> So while you can implement map via it, it sucks
[09:50:32] <Inst[m]> 黎老师，她是我的林黛玉。
[09:51:34] <Inst[m]> ProfSimm: what's your background?
[09:51:35] <Inst[m]> You seem to be an experienced programmer, possibly teaching comp sci at uni.
[09:51:38] <Inst[m]> I'm a Haskell-as-First-Language twit
[09:52:03] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:52:18] <ario> you learned haskell as your first language? 
[09:52:24] <ario> that's hardcore! 
[09:52:50] <dsal> It's probably easier to learn haskell as a first language than a third language.
[09:52:55] <ario> hah
[09:53:07] <ario> paradigm shift, i get that
[09:53:15] <ario> i had such a hard time with prolog 
[09:53:32] <dsal> I've never built anything slightly useful in prolog.
[09:53:48] <dsal> ProfSimm: Are you sure you can't parallelize a fold?
[09:54:12] <ario> i built an interpreter
[09:54:27] <ario> this was for some theoretical college course
[09:54:59] <ario> took me two weeks of bashing my head against it lol 
[09:55:39] <Yehoshua> dsal: Since in a fold, each step uses the output from the previous step, that makes sense.
[09:56:04] <dsal> :t fold
[09:56:05] <lambdabot> (Foldable t, Monoid m) => t m -> m
[09:56:28] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[09:56:29] <Yehoshua> :t foldl
[09:56:30] <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
[09:57:41] <dibblego> folds can be parallelised
[09:58:30] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:58:39] <Yehoshua> For only monoid, it seems some 
[09:58:42] <Yehoshua> s/some/so./
[09:59:05] <Yehoshua> (since a(bc) = (ab)c)
[10:00:17] <Yehoshua> However, a foldl/foldr can use the accumulator in such a way as to disallow that.
[10:00:50] <Inst[m]> <ario> "you learned haskell as your..." <- working on it
[10:00:54] <Inst[m]> need to finish a few textbooks first
[10:01:10] <Inst[m]> I think Haskell is an excellent first language and should be taught as such
[10:01:25] <ProfSimm> Inst[m]: I've been programming since i was a kid, but I'm teaching nobody at uni. Honestly my work is mostly traditional OOP and data processing pipelines.
[10:01:44] <dsal> To ProfSimm's question, there are different things you'd do with data structures.  Sometimes you want a structure-preserving transformation of values within it, so fmap is right.  Sometimes you want a catamorphism (or to reuse various Foldable functions like `sum` and `length`).  Sometimes you want an effectful transformation like traverse.  When you think about what you want done vs. how it's done, it gets easier.
[10:01:44] <Inst[m]> oh, research professor
[10:01:47] <Inst[m]> congrats :)
[10:02:01] <dsal> For a good read: https://maartenfokkinga.github.io/utwente/mmf91m.pdf
[10:02:33] <Inst[m]> profSimm: TBH, we're focusing on the same goal
[10:02:39] <Inst[m]> I'd like to know what a minimal Haskell teaching course looks like
[10:02:53] <Inst[m]> someone mentioned before that Haskell Report core is actually shorter than Python specification
[10:03:10] <Inst[m]> and scanr is often not mentioned, no one knew what until was, etc
[10:03:16] <Inst[m]> i'd like to know what the hell a combinator is
[10:03:52] <dsal> Do you want a minimal Haskell teaching course (of which there are many) or a course that covers every function that anyone's written?
[10:05:24] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 252 seconds)
[10:06:57] <Inst[m]> what's a minimal haskell teaching course, then?
[10:07:58] <dsal> Any one of the introductory courses is fairly minimal.
[10:09:49] <dsal> You might be assuming that your ideal minimal set is an accepted definition of minimal.  If it includes `scanr` it is definitely not minimal by any definition.  You could build scanr when you need it if you didn't know it existed from the base language.
[10:10:02] <dsal> @src scanr
[10:10:02] <lambdabot> scanr _ q0 []     = [q0]
[10:10:02] <lambdabot> scanr f q0 (x:xs) = f x q : qs
[10:10:02] <lambdabot>     where qs@(q:_) = scanr f q0 xs
[10:13:20] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[10:15:48] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[10:15:49] *** Joins: Pickchea (~private@user/pickchea)
[10:15:52] *** Joins: foul_owl (~kerry@23.105.36.232)
[10:17:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[10:18:57] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:27:27] *** Joins: coot (~coot@213.134.190.95)
[10:39:35] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[10:41:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:41:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:41:31] *** Joins: wroathe (~wroathe@user/wroathe)
[10:46:44] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[10:48:00] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:48:24] *** Joins: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e)
[10:48:52] *** Quits: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 250 seconds)
[10:49:18] *** Joins: ubert1 (~Thunderbi@p200300ecdf0994b46944f41320f0055f.dip0.t-ipconnect.de)
[10:49:18] *** Quits: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e) (Read error: Connection reset by peer)
[10:49:45] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[10:53:26] *** Joins: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se)
[10:57:06] *** Joins: fef (~thedawn@user/thedawn)
[10:58:57] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 256 seconds)
[10:59:40] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[11:03:03] *** Joins: yauhsien (~yauhsien@61-231-32-166.dynamic-ip.hinet.net)
[11:06:13] *** Joins: alp (~alp@user/alp)
[11:07:04] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[11:07:25] *** Joins: alp (~alp@user/alp)
[11:07:27] *** Quits: yauhsien (~yauhsien@61-231-32-166.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:08:18] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[11:08:34] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:11:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[11:12:46] *** Joins: acidjnk (~acidjnk@pd9e0b668.dip0.t-ipconnect.de)
[11:13:20] *** Quits: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 272 seconds)
[11:14:08] *** Joins: rusrushal13 (~rusrushal@103.85.18.34)
[11:16:25] *** Joins: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se)
[11:17:47] *** Joins: mzan (~quassel@mail.asterisell.com)
[11:18:31] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[11:18:31] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[11:18:31] *** Joins: turlando (~turlando@user/turlando)
[11:20:03] <Inst[m]> i'd disagree, it's hard to tell what should be included and what shouldn't be included, some courses spend a lot of time teaching list manipulation, others skip monads, etc
[11:20:06] <Inst[m]> but i'm not sober and i'm going to bed
[11:21:44] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:28:35] *** Joins: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[11:28:46] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:5b51:ad88:49b8:7439)
[11:29:38] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[11:31:18] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[11:31:37] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[11:31:45] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:edbf:f48a:9927:9718) (Quit: Leaving)
[11:32:14] *** Joins: yauhsien (~Yau-Hsien@61-231-32-166.dynamic-ip.hinet.net)
[11:34:00] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[11:35:38] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[11:36:05] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[11:36:25] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:37:05] *** Joins: lagash (lagash@lagash.shelltalk.net)
[11:38:23] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:42:11] *** Joins: alp (~alp@user/alp)
[11:42:11] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[11:42:43] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[11:45:18] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:46:05] *** Joins: fendor (~fendor@77.119.209.21.wireless.dyn.drei.com)
[11:50:03] *** Joins: cfricke (~cfricke@user/cfricke)
[11:51:10] *** Joins: cynomys (~cynomys@user/cynomys)
[11:55:16] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:57:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:57:18] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:57:18] *** Joins: wroathe (~wroathe@user/wroathe)
[11:57:22] *** Joins: chele (~chele@user/chele)
[11:58:09] *** Quits: rusrushal13 (~rusrushal@103.85.18.34) (Quit: Client closed)
[12:00:15] *** Joins: razetime (~quassel@49.207.198.36)
[12:00:55] *** Quits: razetime (~quassel@49.207.198.36) (Client Quit)
[12:02:44] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[12:03:57] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[12:05:43] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:08:49] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[12:09:48] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 240 seconds)
[12:10:41] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[12:11:27] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:11:34] *** Joins: rembo10 (~rembo10@remulis.com)
[12:11:52] *** Joins: cynomys (~cynomys@user/cynomys)
[12:14:03] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[12:15:05] *** Joins: mzan (~quassel@mail.asterisell.com)
[12:15:25] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:16:22] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:18:35] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:22:36] *** Quits: deadmarshal (~deadmarsh@95.38.231.90) (Ping timeout: 240 seconds)
[12:25:24] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 240 seconds)
[12:25:24] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:26:13] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:28:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:28:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:28:03] *** Joins: wroathe (~wroathe@user/wroathe)
[12:28:24] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:c9dd:301:29f7:88f5)
[12:30:23] *** Joins: michalz (~michalz@185.246.204.89)
[12:30:23] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:30:35] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:32:17] *** Joins: AlexZenon (~alzenon@178.34.150.24)
[12:32:36] *** Joins: Alex_test (~al_test@178.34.150.24)
[12:33:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:35:42] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[12:38:37] *** Joins: cynomys (~cynomys@user/cynomys)
[12:41:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:46:37] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:47:17] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:49:24] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:50:05] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:50:19] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[12:52:26] *** Quits: turlando (~turlando@user/turlando) (Quit: turlando)
[12:52:41] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[12:52:41] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[12:52:41] *** Joins: turlando (~turlando@user/turlando)
[12:53:43] *** Quits: turlando (~turlando@user/turlando) (Client Quit)
[12:54:12] *** Joins: turlando (~turlando@user/turlando)
[12:55:28] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[12:57:03] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:57:10] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:58:12] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[12:58:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:58:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:58:50] *** Joins: wroathe (~wroathe@user/wroathe)
[13:01:34] *** Joins: Erutuon (~Erutuon@user/erutuon)
[13:03:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[13:03:24] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:04:32] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:05:47] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[13:05:55] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[13:07:27] *** Joins: deadmarshal (~deadmarsh@95.38.231.90)
[13:07:46] *** Joins: rusrushal13 (~rusrushal@103.85.18.34)
[13:07:59] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:10:57] *** Joins: AlexNoo (~AlexNoo@178.34.150.24)
[13:11:37] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[13:20:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:21:38] <joel135> :t scanr
[13:21:39] <lambdabot> (a -> b -> b) -> b -> [a] -> [b]
[13:22:56] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[13:23:24] <joel135> so it's like fold with a history, didn't know about that
[13:24:48] <tomsmeding> :t \f z -> foldr (\x (y:r) -> f x y : y : r) [z]
[13:24:49] <lambdabot> Foldable t1 => (t2 -> a -> a) -> a -> t1 t2 -> [a]
[13:25:02] <tomsmeding> % :t +d \f z -> foldr (\x (y:r) -> f x y : y : r) [z]
[13:25:03] <yahb> tomsmeding: (t -> a -> a) -> a -> [t] -> [a]
[13:25:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 272 seconds)
[13:28:13] *** Joins: vysn (~vysn@user/vysn)
[13:28:44] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[13:29:02] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[13:33:18] *** Quits: acidjnk (~acidjnk@pd9e0b668.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[13:34:46] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[13:34:51] <jackson99> hi
[13:35:12] *** Quits: ystael (~ystael@user/ystael) (Ping timeout: 272 seconds)
[13:35:13] <jackson99> > Just 10 <|> undefined
[13:35:14] <lambdabot>  Just 10
[13:35:31] <jackson99> this is done lazily. but this isn't. why?
[13:35:43] <jackson99> liftA2 (<|>) action1 action2
[13:36:28] *** Joins: ystael (~ystael@user/ystael)
[13:37:42] *** Joins: __monty__ (~toonn@user/toonn)
[13:39:17] <jackson99> is this reasonable? it seems to work
[13:39:26] <jackson99> iftA2 (<|>) action1 (unsafeInterleaveIO action2)
[13:42:10] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 272 seconds)
[13:42:16] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[13:42:17] <lortabac> jackson99: can you give a little more context please?
[13:42:37] <jackson99> if action1 returns Nothing, and only then, I want to run action2
[13:42:55] <jackson99> action1 :: IO (Maybe a)  action2 :: IO (Maybe a)
[13:42:58] <merijn> jackson99: Those are two very different things, though
[13:43:08] <jackson99> what two things?
[13:43:25] <merijn> liftA2 (<|>) and <|>
[13:43:36] <merijn> jackson99: You say "one is lazy, the other isn't" <- disagree
[13:43:58] <merijn> tbh, it sounds like you want MaybeT
[13:43:59] <jackson99> action2 is performed regardless of what action1 returns. so it isn't lazy enough
[13:44:20] <merijn> jackson99: because liftA2 is the applicative of IO and IO is *always* sequenced
[13:44:36] <merijn> anyway, what you want is "MaybeT IO"
[13:44:52] <jackson99> is this a good use of unsafeInterleaveIO?
[13:45:01] <Ariakenom> and to be clear this is entirely unrelated to laziness
[13:45:12] <Ariakenom> jackson99 no
[13:45:22] <merijn> jackson99: not really, because MaybeT is the right one and not unsafe
[13:45:24] <jackson99> why? I did some testing and it works as expected
[13:46:04] <merijn> jackson99: That's because anything unsafeX isn't required to be nicely predictable and you cannot generalise behaviour from one example to another
[13:46:25] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:49da:9bbf:6c0f:9f3d) (Remote host closed the connection)
[13:46:28] <merijn> jackson99: "it seems to work as expected" is what unsafeX always does, right before it stabs you in the back and ruins your code :p
[13:46:50] <jackson99> isn't unsafeInterleaveIO used by lazy IO in haskell base? 
[13:47:17] <jackdk> there's a reason that for any nontrivial lazy IO, people reach for streaming libraries
[13:47:18] <merijn> lazy IO is 1) highly questionable and 2) there's only like, 3 or 4 functions using lazy IO in base
[13:47:27] <Ariakenom> "IO (Maybe a)" does not express "if action1 returns Nothing, and only then, I want to run action2". but "MaybeT IO" does.
[13:49:00] <jackson99> I don't want streaming. action1 and 2 perform some system C calls. action1 is faster, but may not always work. so if it worked, I don't want to call action2. I'm curious if, and how, could unsafeInterleaveIO fail in here
[13:49:49] <Ariakenom> ex: if you want to run the action but won't look at the result
[13:50:14] *** Joins: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net)
[13:50:28] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:50:38] <Ariakenom> you want to be explicit about what IO you run. not leave it to what values you look at
[13:51:39] *** Quits: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:52:54] <jackson99> so action2 may not run if I don't look at the value
[13:53:00] <jackson99> that's actually a reasonable behavior for this
[13:53:16] <Ariakenom> probably not. you'd want it to be consistent for action1
[13:53:39] *** Joins: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net)
[13:53:44] <Ariakenom> (I mean that action1 also doesnt run if you dont look at the result)
[13:53:46] <jackson99> if I don't inspect the value, there's no reason to run more expensive action. I'm only calling it for the value
[13:54:22] <jackson99> that's fine too :)
[13:54:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:55:04] <jackson99> hmm, I did x <- f in ghci, I did not inspect x, but both actions were ran
[13:55:36] <jackson99> nevermind, I also called some functions that forced evaluation. so action1 is ran, but action2 isn't, until I inspect value
[13:56:11] <jackson99> but that is completely fine for what I'm doing. I'll still look at MaybeT just out of curiosity
[13:56:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d5cb:a199:c5f8:d68d)
[13:57:00] *** Quits: foul_owl (~kerry@23.105.36.232) (Ping timeout: 240 seconds)
[13:57:09] <Ariakenom> what action are you doing?
[13:58:12] *** Quits: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[13:58:36] <jackson99> I am searching for a window using FindWindow and EnumWindows winapi functions. EnumWindows is about 200 times slower, and I'm polling for the value in a loop with 20 or so ms delay. not a big deal, but it does mean CPU usage is a couple of % instead of 0%
[13:58:53] *** Joins: mmhat (~mmh@55d4ce8c.access.ecotel.net)
[13:59:08] *** Quits: mmhat (~mmh@55d4ce8c.access.ecotel.net) (Client Quit)
[14:00:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d5cb:a199:c5f8:d68d) (Ping timeout: 240 seconds)
[14:01:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[14:02:25] <Ariakenom> so the result changes depending on when you run it. so leaving it up to when you evaluate a value is a ... muddy way to do it
[14:03:01] <jackson99> hmm, that is true
[14:05:29] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e573:86f9:f0cd:7c1f)
[14:07:39] *** Quits: ishutin (~ishutin@193-110-63-21.cable-modem.hdsnet.hu) (Ping timeout: 256 seconds)
[14:09:06] *** Joins: ishutin (~ishutin@92-249-150-129.static.digikabel.hu)
[14:09:48] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e573:86f9:f0cd:7c1f) (Ping timeout: 240 seconds)
[14:13:17] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[14:13:35] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[14:14:57] *** Joins: foul_owl (~kerry@23.82.193.104)
[14:18:09] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[14:23:28] *** Quits: rusrushal13 (~rusrushal@103.85.18.34) (Quit: Client closed)
[14:25:00] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[14:27:03] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[14:32:12] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[14:32:59] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[14:35:15] <jackdk> are there thread-safety concerns with those winapi functions? I wonder if the stuff in Control.Concurrent.Async could help here
[14:37:24] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[14:37:59] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[14:42:21] *** Quits: xff0x (~xff0x@2001:1a81:5217:d600:a1de:a304:ac28:4386) (Quit: xff0x)
[14:43:36] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[14:44:17] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[14:44:27] <jackson99> my program is single threaded, it just blocks, searches for windows, and then hides them if necessary. so I have no thread-safety concerns. but I think those functions are thread safe
[14:47:16] *** Joins: fendor_ (~fendor@91.141.40.92.wireless.dyn.drei.com)
[14:49:47] *** Quits: fendor (~fendor@77.119.209.21.wireless.dyn.drei.com) (Ping timeout: 250 seconds)
[14:51:31] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:53:11] <jackson99> Async would allow me to run functions concurrently, but I don't think that would decrease CPU usage? if anything, it would increase it
[14:58:33] *** Joins: xff0x (~xff0x@2001:1a81:5217:d600:8ce0:743c:22b0:b5ff)
[15:08:11] *** Quits: Shiranai (~Shiranai@190.237.13.59) (Quit: Connection closed)
[15:08:16] *** Joins: unyu (~pyon@user/pyon)
[15:09:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[15:10:16] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:10:50] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:11:38] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[15:18:28] *** Joins: acidjnk (~acidjnk@p200300d0c7057599445f812649320e47.dip0.t-ipconnect.de)
[15:21:24] *** Quits: deadmarshal (~deadmarsh@95.38.231.90) (Ping timeout: 240 seconds)
[15:22:40] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[15:23:05] <romesrf> hey everyone
[15:24:08] <romesrf> what's your preferred way to write fmap (fmap f) x
[15:24:31] <byorgey> I often write   (fmap . fmap) f x
[15:25:20] <romesrf> AH nice
[15:25:21] <byorgey> inspired by http://conal.net/blog/posts/semantic-editor-combinators
[15:25:31] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:3933:29:5fe1:cb6b)
[15:25:49] <romesrf> i'm convinced :)
[15:26:13] <byorgey> it generalizes nicely to things like   (fmap . first . fmap) f x   etc.
[15:26:48] <jackson99> I sometimes do fmap f <$> x
[15:27:25] <jackson99> nevermind, that does something different
[15:27:35] <byorgey> no, that's the same
[15:27:45] <jackson99> yeah it is :P
[15:29:16] <byorgey> I sometimes write that too.  I think it depends on whether I'm mapping over something I'm thinking of as a nested data structure  (in which case I would do (fmap . fmap))  or if it's like a functorial result from some kind of monadic action
[15:29:19] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 256 seconds)
[15:29:37] <byorgey> like if  x :: IO [String]  I would probably write   fmap read <$> x   instead of  (fmap . fmap) read x
[15:30:08] <romesrf> byorgey: i like the idiom in the post, nice :)
[15:30:36] <romesrf> and I agree, I also change syntax depending on the easiest way to visualize what i'm doing
[15:30:39] *** Joins: ph88 (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de)
[15:39:21] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:41:01] <dminuoso> % :t getCompose . fmap (+1) . Compose
[15:41:01] <yahb> dminuoso: (Functor f, Functor g, Num a) => f (g a) -> f (g a)
[15:41:02] *** Joins: dextaa_ (~dextaa@user/dextaa)
[15:41:29] <dminuoso> Depending on the surrounding context, this can be quite nice as well
[15:43:05] *** Quits: acidjnk (~acidjnk@p200300d0c7057599445f812649320e47.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[15:43:10] *** Joins: neurocyte0917090 (~neurocyte@IP-185117069029.dynamic.medianet-world.de)
[15:43:10] *** Quits: neurocyte0917090 (~neurocyte@IP-185117069029.dynamic.medianet-world.de) (Changing host)
[15:43:10] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[15:43:14] <dminuoso> In a pinch I generally write `fmap f <$> x` though
[15:44:57] *** Quits: rookie101 (~rookie@165.232.121.13) (Quit: WeeChat 1.9.1)
[15:48:20] <jackdk> a number of prelude replacements provide `(<<$>>)`, which I like enough to sometimes define locally
[15:48:50] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 272 seconds)
[15:49:07] *** Joins: acidjnk (~acidjnk@dynamic-046-114-170-094.46.114.pool.telefonica.de)
[15:49:11] <dminuoso> In one of my projects I locally defined `fmap1`, `fmap2`, `fmap3`, which is very similar I guess
[15:49:54] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:51:22] *** Joins: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net)
[15:51:24] <hpc> do like what base does with tuples and define (<<<<<<<<<<<<<<<<<<<<$>>>>>>>>>>>>>>>>>>>>) all the way up to 63
[15:51:35] <hpc> see what ghc's upper limit on identifier length is
[15:53:42] *** Joins: deadmarshal (~deadmarsh@95.38.231.90)
[15:54:07] <dminuoso> Was the memory corruption bug causing that artificial limit on tuple sizes ever found?
[15:54:49] <dminuoso> Recall some dark story about how the limit was the result of experimentation, but the underying bug was a mystery
[15:54:50] <merijn> No idea
[15:54:56] *** Joins: PaulTheNeko (~u0_a287@public-gprs522838.centertel.pl)
[15:55:56] *** Quits: acidjnk (~acidjnk@dynamic-046-114-170-094.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[15:55:58] *** Joins: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com)
[15:56:10] *** Joins: acidjnk (~acidjnk@dynamic-046-114-170-094.46.114.pool.telefonica.de)
[15:57:20] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[16:06:17] *** Joins: jgeerds_ (~jgeerds@55d4b9df.access.ecotel.net)
[16:07:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e573:86f9:f0cd:7c1f)
[16:07:50] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 272 seconds)
[16:08:12] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 240 seconds)
[16:11:24] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e573:86f9:f0cd:7c1f) (Ping timeout: 240 seconds)
[16:12:12] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[16:12:25] *** Quits: jgeerds_ (~jgeerds@55d4b9df.access.ecotel.net) (Read error: Connection reset by peer)
[16:13:47] *** Joins: jgeerds_ (~jgeerds@55d4b9df.access.ecotel.net)
[16:14:32] *** Joins: capo_greco (~textual@60-241-161-167.static.tpgi.com.au)
[16:15:53] *** Joins: neurocyte0917090 (~neurocyte@IP-185117069029.dynamic.medianet-world.de)
[16:15:53] *** Quits: neurocyte0917090 (~neurocyte@IP-185117069029.dynamic.medianet-world.de) (Changing host)
[16:15:53] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[16:16:15] *** Quits: nunggu_ (~q@user/nunggu) (Ping timeout: 240 seconds)
[16:18:52] <romesrf> cool stuff!
[16:19:01] <AndreasK> dminuoso: In recent times (since I started working on GHC) no one tried to increase the limit. Until someone reworks GHC to allow infinite tuples the current limit seems reasonable so there was little motivation.
[16:19:58] *** Joins: nunggu_ (~q@user/nunggu)
[16:21:59] <ProfSimm> Can the whole Haskell runtime tail recurse on itself.
[16:22:55] <merijn> ProfSimm: Not sure what that means, tbh :)
[16:23:20] <geekosaur> pretty sure the ghc runtime only does jumps
[16:23:46] <geekosaur> so depending on howyou thinkof it,either nothing or everything is a tail recursion
[16:23:49] <AndreasK> It's jumps all the way down, to the bottom of the stack.
[16:25:38] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:25:52] <zzz> ProfSimm: do you mean `main = do { whatever; main }` ??
[16:37:05] *** Quits: PaulTheNeko (~u0_a287@public-gprs522838.centertel.pl) (Read error: Connection reset by peer)
[16:37:25] *** Joins: PaulTheNeko (~u0_a287@apn-31-0-26-69.dynamic.gprs.plus.pl)
[16:37:57] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:42:02] *** Quits: PaulTheNeko (~u0_a287@apn-31-0-26-69.dynamic.gprs.plus.pl) (Ping timeout: 272 seconds)
[16:42:38] *** Joins: PaulTheNeko (~u0_a287@apn-31-0-26-69.dynamic.gprs.plus.pl)
[16:42:43] *** Quits: PaulTheNeko (~u0_a287@apn-31-0-26-69.dynamic.gprs.plus.pl) (Client Quit)
[16:43:53] *** Joins: dextaa_ (~dextaa@user/dextaa)
[16:44:35] *** Quits: Merfont (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[16:44:59] *** Joins: Merfont (~Kaiepi@156.34.47.253)
[16:47:48] *** Quits: xff0x (~xff0x@2001:1a81:5217:d600:8ce0:743c:22b0:b5ff) (Ping timeout: 240 seconds)
[16:48:44] *** Joins: xff0x (~xff0x@2001:1a81:5217:d600:567:b7a:e54:e078)
[16:51:42] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[16:54:19] *** Quits: acidjnk (~acidjnk@dynamic-046-114-170-094.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[16:54:39] *** Joins: acidjnk (~acidjnk@p200300d0c71d3b97a07e6bc3219efcf6.dip0.t-ipconnect.de)
[16:59:25] *** Joins: to_gl (~to_gl@193.164.24.245)
[16:59:33] *** Parts: to_gl (~to_gl@193.164.24.245) ()
[17:01:38] *** Quits: Merfont (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[17:01:58] *** Joins: Merfont (~Kaiepi@156.34.47.253)
[17:04:31] *** Joins: cynomys (~cynomys@user/cynomys)
[17:04:54] *** Joins: andreabedini (~andreabed@8s8kj680jt94n45xrsj1.ip6.superloop.com)
[17:05:56] *** Joins: thyriaen (~thyriaen@simnet-nat-pool-185-130-54-167.stargrpns.pp.ua)
[17:10:58] <ephemient> https://ro-che.info/articles/2017-01-10-nested-loop-space-leak :(
[17:12:56] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:13:51] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 252 seconds)
[17:15:23] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[17:19:47] <jackson99> how would this be done with TypeApplications? isNumber s = isJust (readMaybe s :: Maybe Int)
[17:20:12] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 240 seconds)
[17:20:18] <jackson99> I thought something like this would work, but I am getting errors:  isNumber = isJust . readMaybe @ Maybe Int
[17:20:34] <Ariakenom> % :t readMaybe 
[17:20:34] <yahb> Ariakenom: ; <interactive>:1:1: error: Variable not in scope: readMaybe
[17:20:49] <geekosaur> % import Text.Read
[17:20:49] <yahb> geekosaur: 
[17:21:03] <geekosaur> % isNumber s = isJust (readMaybe @Int s)
[17:21:04] <yahb> geekosaur: 
[17:21:12] <Ariakenom> % :t readMaybe 
[17:21:13] <yahb> Ariakenom: Read a => String -> Maybe a
[17:21:24] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:21:31] <jackson99> % isNumber = isJust . readMaybe @Int
[17:21:31] <yahb> jackson99: 
[17:21:37] <jackson99> nice
[17:21:39] <lortabac> jackson99: you have to look at the type variables
[17:21:57] <lortabac> in this case the first (and only) variable is 'a'
[17:21:58] <jackson99> yeah I get it now. it needs a, not Maybe a
[17:22:06] <romesrf> :)
[17:22:11] <geekosaur> the Maybe is fixed so it doesn'tget reflected in a typevariable. the a is obviously a typevariable, so go fir that
[17:22:26] *** Joins: rusrushal13 (~rusrushal@103.85.18.34)
[17:22:46] <lortabac> you can skip variables with @_
[17:22:46] <ephemient> also if you really did want Read (Maybe Int), you need to parenthesize it, as in readMaybe @(Maybe Int)
[17:23:03] <Ariakenom> how to see the type variables?
[17:23:21] <geekosaur> use :t
[17:23:37] <Ariakenom> I did but yahb didnt show me
[17:23:47] <geekosaur> > :t readMaybe
[17:23:48] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[17:23:57] <geekosaur> wrong bot :(
[17:24:01] <geekosaur> % :t readMaybe
[17:24:01] <yahb> geekosaur: Read a => String -> Maybe a
[17:24:20] <Ariakenom> I think it needs some extension to always show type variables
[17:24:22] <geekosaur> there's only one typevariable, so it's obviously the one TypeApplications will apply to
[17:24:37] <Clint> :t readMaybe
[17:24:38] <lambdabot> error: Variable not in scope: readMaybe
[17:24:40] <geekosaur> % :set -fprint-explicit-foralls
[17:24:40] <yahb> geekosaur: 
[17:24:43] <geekosaur> % :t readMaybe
[17:24:43] <yahb> geekosaur: forall {a}. Read a => String -> Maybe a
[17:24:49] <Ariakenom> yes but I want to show it anyway
[17:24:51] <Ariakenom> yay
[17:24:53] * merijn mumbles something about "TypeApplications considered harmful"
[17:26:27] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[17:26:30] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[17:28:33] *** Quits: capo_greco (~textual@60-241-161-167.static.tpgi.com.au) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:29:15] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 252 seconds)
[17:30:53] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[17:31:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[17:34:58] *** Joins: aehu6ce8 (~aehu6ce8@31.187.110.131)
[17:35:32] <kuribas> merijn: we should be able to pass types to functions like in idris :)
[17:36:17] <kuribas> in idris you can pass implicit types by name.
[17:36:39] <geekosaur> next ghc version
[17:36:43] <kuribas> Which would solve the problems that haskell TypeApplications have, since they are positional.
[17:36:58] <geekosaur> forall t -> …
[17:37:07] <merijn> kuribas: positional *and* implicitly ordered
[17:37:16] <kuribas> yeah, that's pretty bad.
[17:37:34] <alt-romes> is there a name for: data Ex m a = Ex (m a), instance Functor f => (Ex f) where fmap f (Ex x) = Ex $ fmap f x, and then I'd like to have something that has signatures (f a -> g a) -> (Ex f a) -> (Ex g a)
[17:37:49] <jackson99> implicitly ordered?
[17:37:51] <alt-romes> it looks like the type is just lifted to Ex but 
[17:38:03] <alt-romes> not really ahaha
[17:38:56] <alt-romes> so Ex is an instance of functor where I can alter `a` of Ex m a, and is an instance of ____ where i can alter `m` of Ex m a
[17:39:05] *** Joins: wonko (~wjc@user/wonko)
[17:41:49] *** Quits: xff0x (~xff0x@2001:1a81:5217:d600:567:b7a:e54:e078) (Ping timeout: 250 seconds)
[17:42:12] *** Quits: andreabedini (~andreabed@8s8kj680jt94n45xrsj1.ip6.superloop.com) (Quit: WeeChat 3.3)
[17:42:16] *** Joins: wroathe (~wroathe@user/wroathe)
[17:42:22] *** Joins: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net)
[17:43:40] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:44:28] <Ariakenom> you can implicitly order them. but you can also explicitly order them
[17:45:45] *** Joins: Everything (~Everythin@37.115.210.35)
[17:46:16] *** Joins: xff0x (~xff0x@2001:1a81:5217:d600:567:b7a:e54:e078)
[17:46:18] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:46:46] <kuribas> Ariakenom: which doesn't help if you didn't wrote the function you need to apply.
[17:47:10] <Ariakenom> it does not
[17:47:16] *** Quits: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[17:48:10] <Ariakenom> I agree that ::-typing is better than @-typing 
[17:48:38] *** Joins: AlexNoo_ (~AlexNoo@94.233.240.208)
[17:48:51] *** Quits: wonko (~wjc@user/wonko) (Remote host closed the connection)
[17:49:41] *** Joins: wonko (~wjc@user/wonko)
[17:49:54] <dminuoso> alt-romes: Such a transformation is called a natural transformation.
[17:51:04] *** Quits: AlexZenon (~alzenon@178.34.150.24) (Ping timeout: 272 seconds)
[17:51:37] <dminuoso> Or rather, `forall a. f a -> g a` is called a natural transformation
[17:51:42] *** Quits: Alex_test (~al_test@178.34.150.24) (Ping timeout: 272 seconds)
[17:51:51] <dminuoso> And the process of `(f a -> g a) -> (Ex f a) -> (Ex g a)` is usually called `hoisting` or `lifting`
[17:52:20] *** Quits: AlexNoo (~AlexNoo@178.34.150.24) (Ping timeout: 272 seconds)
[17:52:52] *** Quits: wonko (~wjc@user/wonko) (Remote host closed the connection)
[17:53:00] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[17:53:10] *** Joins: wonko (~wjc@user/wonko)
[17:53:30] *** Joins: xkuru (~xkuru@user/xkuru)
[17:53:48] <dminuoso> Since `Ex f a ~~~ f a`, that function `(f a -> g a) -> (Ex f a) -> (Ex g a)` is isomorphic to `(f a -> g a) -> f a -> g a`
[17:53:53] *** Quits: wonko (~wjc@user/wonko) (Remote host closed the connection)
[17:54:04] <dminuoso> So it's just something isomorphic to `id`
[17:54:30] *** Joins: Alex_test (~al_test@94.233.240.208)
[17:54:36] *** Quits: Alex_test (~al_test@94.233.240.208) (Client Quit)
[17:54:43] *** Joins: wonko (~wjc@user/wonko)
[17:55:07] *** Parts: Everything (~Everythin@37.115.210.35) ()
[17:55:25] <alt-romes> dminuoso: interesting, but what if I had Ex s m a = Ex (s -> m a)
[17:55:31] *** Joins: AlexZenon (~alzenon@94.233.240.208)
[17:55:31] *** Joins: Alex_test (~al_test@94.233.240.208)
[17:55:34] *** Joins: slack1256 (~slack1256@191.125.99.202)
[17:55:51] *** Joins: AlexZenon_2 (~alzenon@94.233.240.208)
[17:55:59] <alt-romes> should I settle for a hoistEx = ...
[17:56:18] <dminuoso> alt-romes: And what type signature would you be looking for with that type?
[17:56:23] <alt-romes> or is Ex a Hoistable ahaha
[17:56:45] *** Quits: AlexZenon_2 (~alzenon@94.233.240.208) (Client Quit)
[17:57:08] <alt-romes> instance ___ Ex s where ____ :: (m a -> n a) -> Ex s m a -> Ex s n a
[17:57:46] *** AlexNoo_ is now known as AlexNoo
[17:57:51] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[17:58:48] <alt-romes> dminuoso: i'm doing things and I like abstractions, and was looking for a cool new shiny one
[17:59:26] <alt-romes> this seemed like the kind of thing that might fit some theory
[17:59:38] <dminuoso> So to make this "shiny" and more confusion, you can introduce `type f ~> g = forall a. f a -> g a`
[17:59:50] <alt-romes> right, the Natural Transformation
[17:59:56] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[18:00:01] <dminuoso> Right, but that changes your types slightly since we're moving a forall quantification in there
[18:00:03] *** Quits: jgeerds_ (~jgeerds@55d4b9df.access.ecotel.net) (Ping timeout: 252 seconds)
[18:00:03] <dminuoso> So you have
[18:00:16] <alt-romes> :: (forall a. m a -> n a) -> ...
[18:00:25] <dminuoso> (m ~> n) -> Ex s m ~> Ex s n
[18:00:29] <alt-romes> oh!
[18:00:45] <dminuoso> Is that what you're after?
[18:00:49] <alt-romes> yes!
[18:01:20] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:01:38] <dminuoso> But yeah, I think the terms `hoist`, `lift` or `heave` come to mind.
[18:01:58] <alt-romes> thank you
[18:05:50] *** Joins: zmt01 (~zmt00@user/zmt00)
[18:05:50] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[18:06:09] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[18:07:00] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[18:07:24] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:5b51:ad88:49b8:7439) (Ping timeout: 240 seconds)
[18:07:40] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:5b51:ad88:49b8:7439)
[18:07:45] *** Joins: gaff (~gaff@49.207.229.178)
[18:07:48] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-3d94-4d23-dc7c-c228.res6.spectrum.com) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:b555:2e8f:fe4f:2e3d) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: emergence (emergence@2607:5300:60:5910:dcad:beff:feef:5bc) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: Unhammer (~Unhammer@user/unhammer) (Ping timeout: 240 seconds)
[18:08:15] *** Joins: Pickchea (~private@user/pickchea)
[18:08:28] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e573:86f9:f0cd:7c1f)
[18:08:29] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:c52d:7d43:3699:c92e)
[18:08:32] *** Joins: Unhammer (~Unhammer@user/unhammer)
[18:08:36] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[18:09:58] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[18:10:29] *** Joins: unyu (~pyon@user/pyon)
[18:11:44] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:12:07] <romesrf> made a `hoistBot` and am happy about it
[18:12:35] <gaff> this quickcheck code "gives up" if one of the functions f1 or f2 return `Nothing`:  forAll (arbitrary :: Gen String) $ \x -> do; x1 :: String <- f1 x :: Maybe String; x2 :: String <- f2 x :: Maybe String; return $ x1 === x2.  any idea why?
[18:12:41] <janus> romesrf: what does it do?
[18:13:01] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e573:86f9:f0cd:7c1f) (Ping timeout: 250 seconds)
[18:13:19] *** Joins: emergence (emergence@2607:5300:60:5910:dcad:beff:feef:5bc)
[18:14:16] <slack1256> gaff: Can you paste on pastebin?
[18:14:23] <gaff> ok
[18:14:25] <janus> gaff: shouldn't the do block be in the Gen monad? looks like it is in Maybe?
[18:14:33] <geekosaur> isn't that expected fro,m the Maybe monad?
[18:14:38] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[18:14:45] <romesrf> janus: oh just what we were discussing previously, i have a Bot m s i o = Bot (i -> s -> m o) and hoistBot :: (forall a. f a -> g a) -> Bot f s i o -> Bot g s i o
[18:15:08] <gaff> janus: Testable (Maybe Bool) works
[18:15:38] <gaff> geekosaur: why does it "give up" instead of just failing?
[18:15:56] <geekosaur> it *is* failing. but "giving up" is the definition of `fail` in Maybe
[18:16:07] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[18:16:13] <geekosaur> @src Maybe fail
[18:16:13] <lambdabot> fail _ = Nothing
[18:16:40] <geekosaur> so the whole do block produces Nothing at that point instead of continuing
[18:16:47] <gaff> yes, but quickcheck seems to give up generating test cases
[18:17:06] <gaff> soh i see
[18:18:03] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Remote host closed the connection)
[18:18:15] <gaff> geekosaur: i thought quickcheck "gave up" when it can not find enough test cases that staisy some condition when you use `===>`
[18:19:00] <gaff> which is why i am surprised to see it here in this code which does not use implication
[18:19:01] <geekosaur> in this case you're short-circuiting it because you inadvertently put it "under" Maybe
[18:19:09] <gaff> ah i see
[18:19:33] <gaff> thank you
[18:19:40] <dminuoso> romesrf: For reference, in servant you have: hoistServer :: HasServer api '[] => Proxy api -> (forall x . m x -> n x) -> ServerT api m -> ServerT api n
[18:19:55] <dminuoso> Which is quite similar to what you're doing
[18:19:59] <romesrf> dminuoso: yeah, ironicaly i was using it too hahaha
[18:20:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[18:20:48] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-4424-fc06-167e-bc32.res6.spectrum.com)
[18:21:46] <gaff> geekosaur: so this code i have pasted is just fine ... i just have to interpret quickcheck "gave up"  as a fail.
[18:22:10] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[18:22:12] <dminuoso> romesrf: The quantification is very useful by the way, because it ensures whatever you're passing to it is an actual natural transformation (this results from a free theorem)
[18:22:16] *** Joins: Guest|20 (~Guest|20@dynamic-185-082-205-148.glattnet.ch)
[18:22:17] <geekosaur> or rearrange the types so that only that particular test "gives up"
[18:22:25] <romesrf> :)
[18:22:30] <dminuoso> Otherwise the argument can do funky stuff
[18:22:34] <geekosaur> or even that oit just treats Nothing as a normal value
[18:22:40] <romesrf> dminuoso: I've actually just run against it
[18:22:40] *** Quits: Guest|20 (~Guest|20@dynamic-185-082-205-148.glattnet.ch) (Client Quit)
[18:22:56] <romesrf> and was wondering what would be the name for the same thing without quantification
[18:23:05] <romesrf> because it would also be useful
[18:23:25] <gaff> rearrange the types?
[18:23:36] <dminuoso> Without it it would be just some elaborate form of ($)
[18:23:48] <romesrf> ic :)
[18:23:58] <dminuoso> Or well, I guess that's already the case mmm
[18:24:21] <dminuoso> romesrf: The key difference is that you can infer less knowledge from what its use does.
[18:24:45] <romesrf> right, but without the natural transformation i can't call it hoist :)
[18:24:51] <dminuoso> So `hoistServer` by interface guarantees that the argument only modifies the monad, but not the result
[18:24:52] <romesrf> naming things is hard ™
[18:24:54] <dminuoso> It cant because its universally quantified
[18:25:09] <romesrf> right, and that's pretty cool
[18:25:19] <dminuoso> When you see its use, you immediately know about what this can do, what it cant.
[18:26:11] <dminuoso> If you lack the quantification, then its just some "unwrapping/wrapping/rewrapping" thing that can do anything
[18:26:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:26:44] <dminuoso> You could think of it as equivalent as just handing someone the constructor to pattern match, mess with its internals, and rebuild 
[18:26:50] *** Joins: asdfsfdasdfw (~asdfsfdas@12.182.213.210)
[18:26:55] <romesrf> yea, that seems like it
[18:27:14] *** Parts: asdfsfdasdfw (~asdfsfdas@12.182.213.210) ()
[18:27:19] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[18:28:52] *** Quits: Merfont (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[18:28:59] *** Joins: Kaipi (~Kaiepi@156.34.47.253)
[18:31:26] *** Quits: gaff (~gaff@49.207.229.178) ()
[18:31:36] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 272 seconds)
[18:32:24] *** Joins: dextaa_ (~dextaa@user/dextaa)
[18:37:20] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[18:38:00] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 252 seconds)
[18:39:25] <slack1256> Is there a package with a data structure for "buffer with at most 10 (or n) elements"?
[18:39:42] <slack1256> I know I could do this with n-tuples. Yet I want the wrapping/cycling semantics.
[18:40:29] <dminuoso> slack1256: Does it need to be generic over an arbitrary data type?
[18:41:07] <dminuoso> Or is an effective restriction on say Storable or Unbox reasonable?
[18:42:45] <pavonia> https://hackage.haskell.org/package/ring-buffers has different types
[18:43:21] <dminuoso> Ah that's neat 
[18:45:54] *** Joins: max22- (~maxime@2a01cb0883359800c7c4fab2785758f5.ipv6.abo.wanadoo.fr)
[18:46:54] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[18:49:07] *** Joins: vektor (~vektor@IP-094046083008.dynamic.medianet-world.de)
[18:49:13] <geekosaur> there's also a modified Chan somewhere
[18:49:56] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[18:51:06] <geekosaur> @hackage stm-chans
[18:51:06] <lambdabot> https://hackage.haskell.org/package/stm-chans
[18:53:53] <slack1256> dminuoso: If it holds ~Ints~ then I am good. Yet pavonia posted "ring-buffers" which seems to do what I want.
[18:54:03] <slack1256> Thanks guys!
[18:54:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[18:55:55] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Ping timeout: 240 seconds)
[18:58:17] *** Joins: Guest|7 (~Guest|7@31.134.188.207)
[18:58:25] *** Quits: Guest|7 (~Guest|7@31.134.188.207) (Client Quit)
[18:59:25] <slack1256> What packages do you guys use for "auth/secret management" on google cloud? There is a bunch on hackage at different stages of development.
[19:02:45] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:02:45] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:02:45] *** Joins: wroathe (~wroathe@user/wroathe)
[19:04:52] <slack1256> Oh base package "gogol" has it. nvm!
[19:06:00] *** Quits: thyriaen (~thyriaen@simnet-nat-pool-185-130-54-167.stargrpns.pp.ua) (Quit: Leaving)
[19:07:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:10:06] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[19:10:13] *** Quits: rusrushal13 (~rusrushal@103.85.18.34) (Quit: Client closed)
[19:12:22] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Remote host closed the connection)
[19:12:57] *** Quits: aehu6ce8 (~aehu6ce8@31.187.110.131) (Quit: aehu6ce8)
[19:15:09] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:15:51] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[19:15:53] *** Joins: kritzefitz_ (~kritzefit@debian/kritzefitz)
[19:16:36] *** Joins: k`` (~user@152.1.137.158)
[19:17:41] <k``> As a rule of thumb, should handwritten `Ord` instances be strict to match derived instances? Or should they be as lazy as possible in the second parameter?
[19:23:48] *** kritzefitz_ is now known as kritzefitz
[19:23:56] <merijn> I don't think there's any real rules/expectations
[19:25:08] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[19:25:20] *** Joins: zebrag (~chris@user/zebrag)
[19:25:26] *** Joins: Pickchea (~private@user/pickchea)
[19:25:43] <geekosaur> but as it's hard to compare two values without forcing both, I don't see what "as lazy as possible" can get you
[19:26:18] <geekosaur> suppose you could force only part of it in some cases
[19:27:44] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[19:27:55] <k``> Or for enumerations you can always check whether the first argument is `minBound` (or `maxBound`, depending on the comparison). `compare` is always going to be at least partially strict in any not trivial type.
[19:28:19] <vektor> Anyone familiar with works along the line of stephen diehl's Write You A Haskell? It covers many things I'm interested in, but leaves some questions open for me.
[19:28:45] <[exa]> vektor: likely. don't ask to ask. :]
[19:29:11] <geekosaur> sounded to me like they were asking *for* other such works
[19:29:22] <vektor> Indeed. I don't think that was a meta question.
[19:29:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[19:29:54] <[exa]> ah ok, I thought you have something specific in mind
[19:30:00] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b)
[19:31:10] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:5b51:ad88:49b8:7439) (Quit: WeeChat 2.8)
[19:31:44] *** Joins: neurocyte0917090 (~neurocyte@IP-185117069029.dynamic.medianet-world.de)
[19:31:45] *** Quits: neurocyte0917090 (~neurocyte@IP-185117069029.dynamic.medianet-world.de) (Changing host)
[19:31:45] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[19:31:47] <maerwald> k``: the caller can force the values themselves before passing them to compare, but they can't "add laziness"
[19:31:51] <vektor> Yesno. I'd like to have another look at the topic of WYAH from another perspective generally. The thing that's currently bugging me specifically is quite deep in the woods of HM inference, but I'm not sure picking up a book on that topic will do me much good.
[19:32:53] <maerwald> you can basically just provide a `compareStrict` function
[19:33:27] <[exa]> vektor: HM-style inference is a quite general topic, TypingHaskellInHaskell is a pretty good reading material, and there's SPJ's youtube video from zurihac with an explanation of what is _actually_ happening there nowadays
[19:35:07] <vektor> Ohhh, that sounds promising. I'm sure they're not going to answer my research question for me, but will hopefully get me closer. Thanks!
[19:35:12] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:35:18] <[exa]> vektor: perhaps try defining "deep in the woods"
[19:36:09] <geekosaur> that might be difficult if they're still kinda weak on H-M
[19:36:47] *** Quits: dextaa_ (~dextaa@user/dextaa) (Quit: The Lounge - https://thelounge.chat)
[19:36:56] <geekosaur> but unless you know Prolog THIH is probably the place to start
[19:37:04] <[exa]> honestly I wasn't able to fully grasp the wiki page on H-M before actually crunching through THIH
[19:37:43] <k``> maerwald: In this case I can either compare both parameters strictly and cheaply, or perform two comparisons to possibly short-circuit on the 1st parameter. I'm wondering whether the ability to short-circuit is worth baking in for the tiny added cost, or if the expectation is that comparisons will be strict and nothing that use `Ord` will benefit.
[19:37:58] <[exa]> true about Prolog though. :]
[19:38:12] <vektor> Well, if you must know: I've got me a language that is quite a bit like haskell superficially, but with way different semantics. Those semantics are only really valid in some cases. The boundary of that validity looks an awful lot like typing rules to me. The thing I'm not sure about is whether what Stephen Diehl describes as "Milner’s
[19:38:12] <vektor> observation was that since the typing rules map uniquely onto syntax, we can in effect run the
[19:38:13] <vektor> typing rules “backwards”" - whether that assumption of HM holds for my semantics.
[19:38:28] <vektor> I know a few bits about prolog, how can that help?
[19:38:45] <geekosaur> because H-M is something like 10 lines of Prolog
[19:38:53] <vektor> Oh wow. Hit me.
[19:38:54] <geekosaur> concise and elegant
[19:39:24] <[exa]> and with some care, you can run it in reverse there too. :]
[19:40:15] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[19:40:15] <geekosaur> https://wiki.haskell.org/BayHac2014/Prolog see also https://www.youtube.com/playlist?list=PLrsRTzxpFRaxw8-ioimlFmgJsOLf9kJmB
[19:40:23] <merijn> vektor: Has someone already made the obligatory TaPL comment?
[19:40:58] <geekosaur> waitr that's Haskell. the YT one should have the Prolog version
[19:41:02] <vektor> merijn Nope, what's that?
[19:43:34] <merijn> @where tapl
[19:43:34] <lambdabot> "Types and Programming Languages" by Benjamin C. Pierce in 2002-02-01 at <https://www.cis.upenn.edu/~bcpierce/tapl/>
[19:43:52] <merijn> vektor: The de facto standard book on type theory and how to implement your own stuff
[19:44:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[19:44:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[19:44:28] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[19:44:35] <merijn> I would consider it a mandatory read if you are trying to implement any form of type system that isn't absolutely trivial
[19:44:44] <vektor> Ohhh, I actually stumbled upon that myself. Sadly the Uni library doesn't have it, it seems.
[19:44:50] <merijn> (maybe not the whole book, but certainly, like, the first half)
[19:44:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[19:45:30] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[19:46:00] <vektor> Dang. Considering this whole type system is more of a side show, I'll have to see if I can dedicate as much time to it as you imply is required.
[19:46:22] *** Joins: gaff (~gaff@49.207.229.178)
[19:48:24] <merijn> The amount of time depends on how fancy you wanna be
[19:48:35] <merijn> And how much you already know/understand
[19:48:46] <merijn> The first chapters you can just breeze through in a weekend
[19:50:08] <vektor> Not at all fancy. It's a research project. I understand, well, more or less a haskell user's understanding + some WYAH. I don't need much polymorphism or recursive types or stuff like that though, so that should help.
[19:50:10] <[exa]> vektor: one nice exercise with random new type systems&languages is to see whether you can prove some "good" properties about them, such as existence of principial types, decidability of inference and type inhabitation problems, some kind of soundness, etc.
[19:50:34] <merijn> vektor: Recursive types is where it gets really hairy, yeah
[19:50:45] <merijn> the bits before that are fairly easy
[19:51:49] <vektor> @[e
[19:51:49] <lambdabot> Maybe you meant: wn v rc pl let id do bf @ ? .
[19:52:00] <vektor> oops
[19:52:52] <vektor> [exa] , I see. Honestly, I'm not even sure how to ask these questions right now, let alone answer them. I suppose if I want to do this, I'll have to read some more. :D
[19:54:01] <vektor> For anyone interested who's just reading, the zurihac video is unlisted: https://www.youtube.com/watch?v=x3evzO8O9e8
[19:57:15] *** Joins: bahamas (~lucian@84.232.140.52)
[19:57:48] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[19:58:27] <k``> Seems like a decent argument for making comparisons strict is so that `maxBound >= overflowError` is not `True`.
[19:58:30] *** Quits: mbuf (~Shakthi@122.162.72.100) (Quit: Leaving)
[19:59:52] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b) (Remote host closed the connection)
[20:00:46] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[20:02:59] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Quit: CiaoSen)
[20:04:06] *** Joins: wonko (~wjc@user/wonko)
[20:06:03] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[20:07:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[20:09:55] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[20:10:04] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:14:12] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[20:17:53] <vektor> [exa], looking at SPJ's talk for 15 minutes, he explains principal types and uniqueness of substitutions. I think this might be a challenge for my semantics.
[20:20:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:21:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Read error: Connection reset by peer)
[20:21:00] *** Joins: awschnap (~lavaman@98.38.249.169)
[20:21:13] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[20:21:26] <jackson99> should I be using Network.HTTP.Conduit for downloading html files? and can it automatically follow redirects?
[20:22:10] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[20:22:55] <janus> jackson99: you could use curl/wget like ghcup: https://github.com/haskell/ghcup-hs/blob/c2a8d39fb423be7ed998f9169c57db87fa1e1cf8/lib/GHCup/Download.hs
[20:23:17] <janus> then you won't be depending on foundation/memory/cryptonite
[20:23:56] <maerwald> jackson99: those libraries depend on haskell-tls, which is a non-audited crypto implementation in a garbage collected language
[20:23:56] *** Quits: awschnap (~lavaman@98.38.249.169) (Read error: Connection reset by peer)
[20:24:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:24:10] <jackson99> by fundation you mean  Haskell Foundation? why is it problematic to depend on their libraries?
[20:24:30] <maerwald> no, foundation is a library
[20:25:51] <janus> jackson99: https://github.com/haskell-foundation
[20:26:24] <maerwald> there is https://hackage.haskell.org/package/http-client-openssl but no http-conduit that depends on it... you could write one though
[20:26:55] *** Quits: acidjnk (~acidjnk@p200300d0c71d3b97a07e6bc3219efcf6.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[20:27:08] *** Joins: gdown (~gavin@h69-11-150-165.kndrid.broadband.dynamic.tds.net)
[20:27:34] <maerwald> if you don't need very precise error handling, shelling out to curl is the gold standard (cabal does that too)
[20:27:50] <maerwald> and works with esoteric proxy configurations
[20:28:18] <jackson99> hmm ok. I didn't know Network.HTTP.Conduit was considered problematic. I'm still not sure why that is the case
[20:29:15] <jackson99> I don't care about cryptography, I am just scraping a website :P
[20:29:41] <maerwald> then you can use whatever you want I guess
[20:29:44] <jackson99> FWIW simpleHttp is supposed to follow 10 redirects, but for some reason, that isn't working
[20:29:44] <vektor> jackson99, I believe it boils down to "don't roll your own crypto"-ish. Basically, the guys who built that library built their own crypto. Don't depend on that crypto to do anything sensible, because no one's checked.
[20:29:54] <vektor> But for scraping, that should be fine.
[20:30:34] <vektor> @maerwald - I believe that's basically what you meant, right?
[20:30:34] <lambdabot> Unknown command, try @list
[20:30:44] <maerwald> yeah
[20:31:04] <maerwald> and that no one knows whether Haskell is even a good language for crypto
[20:32:04] <vektor> I've found it quite useful for some light cryptoanalysis. ;) I haven't done any cryptography in it though, and I can understand the doubts.
[20:32:04] *** Joins: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net)
[20:32:44] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[20:36:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:36:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:36:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:36:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:36:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:37:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:37:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:37:21] *** Quits: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[20:37:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:37:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:37:39] *** ChanServ sets mode: +o litharge
[20:37:40] *** litharge sets mode: +b *!*@98.38.249.169
[20:37:51] *** litharge sets mode: -o litharge
[20:39:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:42:29] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[20:42:51] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 252 seconds)
[20:49:42] *** Joins: Akiva (~Akiva@user/Akiva)
[20:51:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[20:52:12] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 252 seconds)
[20:52:36] *** Quits: Alex_test (~al_test@94.233.240.208) (Ping timeout: 240 seconds)
[20:52:49] *** Joins: perohig (~user@85.255.234.173)
[20:52:50] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[20:53:00] *** Quits: AlexNoo (~AlexNoo@94.233.240.208) (Ping timeout: 240 seconds)
[20:53:17] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[20:53:21] *** Quits: AlexZenon (~alzenon@94.233.240.208) (Ping timeout: 250 seconds)
[20:54:15] *** Quits: perohig (~user@85.255.234.173) (Remote host closed the connection)
[20:57:24] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[20:57:45] <dminuoso> 17:59:54     vektor | But for scraping, that should be fine.
[20:58:21] <dminuoso> That depends entirely. The direction of dataflow is usually irrelevant, it's a matter of attack scenarios you conceive.
[20:59:27] <dminuoso> In the sense of, do you worry about a) a third party breaking confidentialy of the dataflow, or b) breaking integrity (say manipulating values to either let you process incorrect data, or worse, inject intentionally malformed data to attack your client side components)
[20:59:44] <vektor> Of course. Hence "should". There's some scenarios you could imagine. Generally, the scraped data might be malicious, but when scraping you usually don't trust the data you gather that much anyway; you treat it as data. Don't run javascript you scraped off stackoverflow.
[20:59:47] *** Quits: cosimone (~user@93-47-229-224.ip115.fastwebnet.it) (Quit: i really have to scratch my right butt cheek this time, sorry)
[21:01:10] <dminuoso> For most TLS needs at least you can get by with just nginx at least. Say if you want to use `http-client-tls`, instead you can just use `http-client` against a locally running nginx offloading TLS to openssl or libressl.
[21:02:22] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e573:86f9:f0cd:7c1f)
[21:02:27] <dminuoso> All our API authentication is offloaded onto `libsodium` which is just a thin FFI binding. For most needs I think there's simple and adequate solutions.
[21:04:19] <dminuoso> I find it a bit bizarre that this package in particular has so few users.
[21:05:05] <dminuoso> How do other folks verify credentials in public interfaces? Do they just do naive string comparisons? Rely on cryptonite? I dont know
[21:05:24] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[21:06:30] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[21:06:56] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[21:07:41] *** ChanServ sets mode: +o litharge
[21:07:42] *** litharge sets mode: -bo *!*@98.38.249.169 litharge
[21:08:29] *** Joins: alp (~alp@user/alp)
[21:08:44] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:08:55] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:10:42] <janus> dminuoso: we use happstack: https://hackage.haskell.org/package/happstack-server-7.7.1.2/docs/src/Happstack.Server.Auth.html#basicAuth
[21:12:03] <janus> looks like it just uses naive string comparison :O
[21:12:43] *** Joins: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net)
[21:12:53] *** Joins: AlexZenon (~alzenon@94.233.240.208)
[21:13:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:13:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:13:42] *** Joins: wroathe (~wroathe@user/wroathe)
[21:15:15] <dminuoso> Uh yeah..
[21:15:17] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:16:22] <janus> hackage uses md5 for hashing passwords, too :)
[21:16:35] *** Quits: gdown (~gavin@h69-11-150-165.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[21:17:32] *** Quits: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[21:18:38] <shapr> Anyone using Haskell at work? I'm trying to popularize #haskell-in-depth as roughly #haskell-at-work
[21:18:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[21:18:50] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[21:18:51] <dminuoso> hackage is just dry-aged. people pay top dollar for this if its edible.
[21:18:53] <dsal> I'm using Haskell at Work™
[21:19:03] *** Quits: cosimone (~user@93-47-229-224.ip115.fastwebnet.it) (Remote host closed the connection)
[21:19:03] <dminuoso> shapr: Yes, we use haskell at work too.
[21:19:20] <dminuoso> A fair chunk of our ISP core services run on it now. :)
[21:19:24] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[21:19:34] <dsal> Lazy routers
[21:19:40] <shapr> I've been asking about postgresql-simple and postgresql-query and etc in #haskell-in-depth
[21:19:46] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[21:19:47] <shapr> general every day production stuff
[21:19:53] <dsal> I didn't know about this.
[21:19:59] <shapr> COME ON OVER!
[21:19:59] <vektor> Does "I get paid to do the research I do, and I decided to write my code in haskell" count?
[21:20:16] <shapr> vektor: if you have questions like "how do I talk to this db?" then yes
[21:20:18] <dsal> I like postgresql-simple.  Got to understand it pretty well at the last thing.  New places uses persistent which I don't like very much, but don't dislike enough to fight about.
[21:20:53] <shapr> I have srs complaints about persistent
[21:20:55] <vektor> Oh F no. I had to work with DBs in python once and hated every second. I'm not touching a DB in haskell. :D
[21:21:08] <sm> seems not the best name shapr... people go plenty deep here also
[21:21:18] <shapr> sm: what would you suggest?
[21:21:22] <dminuoso> vektor: I find it's quite comfortable with postgresql-simple
[21:21:37] <dsal> shapr: we have the maintainer, so at least when something goes wrong, there's motivation to fix it.  :)
[21:21:42] <dminuoso> You just have to accept that SQL is a really nice, referentially transparent, pure language that is really well suited to its specific domain
[21:21:59] <shapr> dsal: oh good!
[21:22:31] <dsal> If I figure out a SQL query, I have to figure out how to write it in esqueleto so it compiles.  This is one of those things where I think the *idea* makes sense, but I'd rather write tests.
[21:24:16] *** Quits: cosimone (~user@93-47-229-224.ip115.fastwebnet.it) (Remote host closed the connection)
[21:24:31] <sm> also there's a book with that title. What about, hmm.. #haskell-production, #haskell-at-work, #haskell-practical, #haskell-real-world... ? Though I'm not sure how you'd distinguish it enough from here
[21:24:33] <shapr> We have the squeal author at work, I like squeal very much, but the packages I work on are using postgresql-simple and postgresql-query
[21:24:33] <dminuoso> dsal: I recently proposed an idea that we should perhaps solve at a hackathon
[21:24:40] <dsal> The terrible place I was working with terrible people wanted to use persistent and I decided against it because I could do better without out.  They really liked the migrations as almost the most important part, but the docs said not to use them in production.  Place I'm at now uses persistent but has never used the migrations because that's just an insane idea.
[21:24:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[21:25:02] <dminuoso> If we had an TH-time SQL parser that decodes into a relational algebra and fits it back into say opaleye or esqueleto, you could have the benefits of both worlds...
[21:25:05] <dminuoso> Or so I hope at least
[21:25:24] <dminuoso> That could be the missing link
[21:25:49] <dsal> That's kind of similar to that one postgres lib that compiles queries in TH (or QQ) right?
[21:25:51] <dminuoso> I dont think people really crave for esqueleto for the obscure type trickeries or absurd combinators - they just care for type system guarantees that everythign works out
[21:26:21] <dsal> Right, it makes sense.  I'm going to eventually have to understand it, I fear.
[21:26:43] <dsal> I don't really have a desire to learn a language that is exactly the same as another language, but with different words.
[21:27:02] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[21:27:45] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[21:28:11] <dminuoso> dsal: Ive not heard of that library, which one are you thinking of?
[21:28:19] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[21:28:50] <dsal> https://hackage.haskell.org/package/postgresql-typed
[21:29:21] <dsal> It's a neat idea, until you need a postgres server running with the current schema in order for compilation to succeed.
[21:29:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[21:31:42] <dminuoso> Ah it talks to the database at compile time?
[21:31:48] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[21:31:55] <dsal> Yeah.  It's a neat idea, for sure.
[21:31:57] <dminuoso> No I'd be fine with it using schema information, that's a compromise I'd be willing to make.
[21:32:02] *** Joins: vicfred (~vicfred@user/vicfred)
[21:32:04] <dminuoso> But perhaps that library can be repurposed to that end
[21:32:15] <dminuoso> Thanks! Ill bookmark this
[21:32:29] <dminuoso> Ah but I have a theory how this works
[21:32:46] <dminuoso> Im guessing it doesnt just get the schema, but rather interrogate postgresql about the resulting types of that query
[21:33:19] <dsal> Yeah, that's what it implies in the docs.  So it can verify if a value of a type that's passed in matches what can be coerced in the DB.
[21:33:35] <dminuoso> The coercion rules are an interesting topic
[21:34:15] <dminuoso> So if we did the type inference ourselves, we not only have to mimic all coercion rules that occur in the database, but there's some design decisions how that would work out with the Haskell type system
[21:34:45] *** Joins: vicfred_ (~vicfred@user/vicfred)
[21:35:17] *** Joins: alx741 (~alx741@181.199.42.143)
[21:37:35] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 256 seconds)
[21:37:53] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:39:05] *** Quits: vicfred_ (~vicfred@user/vicfred) (Client Quit)
[21:39:33] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[21:39:49] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[21:41:31] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[21:44:27] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[21:45:34] *** Joins: econo (uid147250@user/econo)
[21:48:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e573:86f9:f0cd:7c1f) (Remote host closed the connection)
[21:54:32] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:56:48] *** Joins: alx741 (~alx741@157.100.197.240)
[21:57:43] *** Joins: cfricke (~cfricke@user/cfricke)
[21:59:51] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[22:00:37] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:04:55] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[22:05:03] *** Quits: gaff (~gaff@49.207.229.178) (Remote host closed the connection)
[22:07:25] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[22:08:46] *** Joins: vysn (~vysn@user/vysn)
[22:09:49] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e573:86f9:f0cd:7c1f)
[22:11:47] *** Joins: simendsjo (~user@84.211.91.241)
[22:13:00] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[22:15:49] *** Quits: zaquest (~notzaques@5.130.79.72) (Read error: Connection reset by peer)
[22:16:15] *** Joins: zaquest (~notzaques@5.130.79.72)
[22:18:25] *** Joins: alx741 (~alx741@157.100.197.240)
[22:18:39] <slack1256> On haskell-stack, the stack.yml can specify git repository. By default it downloads the whole repo, where something like `git clone --depth 1` sufice. Any way to instruct it to do that?
[22:18:42] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[22:20:05] <sm> don't know slack1256, but the manual will say
[22:20:42] *** Joins: bahamas (~lucian@84.232.140.52)
[22:21:44] <slack1256> Searched the manual, did not find it.
[22:22:11] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[22:23:38] <dminuoso> janus: https://github.com/Happstack/happstack-server/pull/73
[22:23:49] <dminuoso> Weird that Im fixing software I dont even use, but this just gives me allergies.
[22:24:12] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[22:24:41] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:26:19] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[22:26:31] <sm> slack1256: not supported, then
[22:27:22] <slack1256> ;_; ok
[22:27:55] *** Quits: simendsjo (~user@84.211.91.241) (Remote host closed the connection)
[22:28:31] <janus> dminuoso: you do use it though, because hackage uses happstack ;)
[22:28:43] *** Joins: gaff (~gaff@49.207.229.178)
[22:28:52] <janus> dminuoso: thanks for the PR! let's see what stepcut says. but it may take a while
[22:29:04] <dminuoso> Dont care, I've done my duty. :P
[22:30:35] *** Joins: Alex_test (~al_test@94.233.240.208)
[22:32:50] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[22:33:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[22:33:54] *** Quits: cosimone (~user@93-47-229-224.ip115.fastwebnet.it) (Remote host closed the connection)
[22:33:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:34:39] *** Joins: simendsjo (~user@84.211.91.241)
[22:34:53] <EvanR> fire and forget pull request
[22:35:05] <EvanR> the best
[22:35:31] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[22:39:27] *** Quits: max22- (~maxime@2a01cb0883359800c7c4fab2785758f5.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[22:40:00] *** Joins: cynomys (~cynomys@user/cynomys)
[22:40:36] *** Quits: deadmarshal (~deadmarsh@95.38.231.90) (Ping timeout: 240 seconds)
[22:42:59] *** Joins: alx741 (~alx741@157.100.197.240)
[22:44:57] *** Quits: finsternis (~X@23.226.237.192) (Ping timeout: 252 seconds)
[22:45:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:45:54] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[22:46:09] *** Quits: gaff (~gaff@49.207.229.178) (Ping timeout: 256 seconds)
[22:47:31] *** Joins: notzmv (~zmv@user/notzmv)
[22:48:19] *** Joins: Pickchea (~private@user/pickchea)
[22:49:04] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:57:54] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[22:59:28] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[22:59:48] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[23:00:06] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Client Quit)
[23:00:42] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[23:00:43] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[23:00:59] *** Joins: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net)
[23:02:43] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Client Quit)
[23:03:19] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[23:03:34] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Client Quit)
[23:04:09] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[23:05:24] *** Quits: yauhsien_ (~yauhsien@61-231-32-166.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[23:11:30] <sm> dminuoso++
[23:11:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[23:11:44] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:12:39] <geekosaur> slack1256, one reason it might not be supported is it complicates things if you decide to pin it to a different commit later
[23:14:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:14:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:14:28] *** Joins: wroathe (~wroathe@user/wroathe)
[23:14:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:14:32] *** Lord_of_Life_ is now known as Lord_of_Life
[23:16:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:17:33] *** Joins: pgib (~textual@173.38.117.90)
[23:18:17] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[23:18:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:18:59] *** Joins: max22- (~maxime@2a01cb088335980088882a515c4c342d.ipv6.abo.wanadoo.fr)
[23:19:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[23:21:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 272 seconds)
[23:24:41] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Quit: emf)
[23:25:14] *** Joins: coot (~coot@213.134.190.95)
[23:26:23] *** Quits: slack1256 (~slack1256@191.125.99.202) (Ping timeout: 256 seconds)
[23:26:50] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[23:29:00] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[23:32:42] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[23:32:50] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[23:35:00] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:36:46] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:58] *** Joins: pavonia (~user@user/siracusa)
[23:38:07] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[23:45:43] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[23:46:23] <EvanR> pattern1, stack up a bunch of commands in a list (backwards), later reverse the list. pattern 2, stack up a bunch of DList appends, later flatten this to get a forward list. It's said 2nd one is more efficient, but is it really night and day?
[23:46:31] <EvanR> having trouble seeing the quantum jump in performance
[23:47:34] <EvanR> or is it a constant factor improvement
[23:47:35] *** Joins: dextaa_ (~dextaa@user/dextaa)
[23:48:21] <EvanR> how is the final application of DList not like reverse
[23:48:48] <monochrom> Certainly the only difference is a constant factor. But I don't know why either one is faster.
[23:49:08] <maerwald> why do I always understand 'filter' such that `filter (not . predicate)`?
[23:49:10] <geekosaur> seems to me like they should be equivalent; it's trying to build the list "right side around" that would be slower than either, because it has to traverse the list each time
[23:49:36] <EvanR> yeah that's bad
[23:49:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[23:50:07] <monochrom> It could also be super-sensitive to what the compiler does. Even though we only have one compiler. :)
[23:50:27] <geekosaur> my thought is it depends on how you use the list afterward
[23:50:50] <EvanR> so DList is really better when you have a mixture of associativities, not when it's just a bunch of appends
[23:52:11] <EvanR> or no one knows xD
[23:52:32] <EvanR> maerwald, me too
[23:52:35] <monochrom> It can be easily tested. But that still doesn't answer why. :)
[23:53:49] <maerwald> EvanR: pretty annoying, because boolean bugs are nasty anyway... I could never trust myself to get this one right :D
[23:54:03] <monochrom> Unless you just accept either "GHC super-optimizes list node allocation" or "GHC super-optimizes function composition" depending on the benchmark results.
[23:54:39] <EvanR> GHC, optimize my code from O(n) to O(1)
[23:55:08] <geekosaur> you joke. list fusion is more or less that
[23:55:11] *** Quits: machinedgod (~machinedg@24.105.81.50) (Remote host closed the connection)
[23:55:19] <geekosaur> of course list fusion can itself be black magic
[23:56:54] *** Joins: machinedgod (~machinedg@24.105.81.50)
[23:57:06] <EvanR> maerwald, burn upon your brain the rewrite rule "filter" => "keep"
[23:57:17] <EvanR> through all history
[23:57:24] <monochrom> I basically did that.
[23:57:36] <monochrom> I have long given up on "meaningful names".
[23:58:24] <monochrom> My philosophy on names is mnemonics and hamming distance.
[23:58:27] *** Joins: AlexNoo (~AlexNoo@94.233.240.208)
[23:58:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:58:54] <monochrom> Mnemonics implies that insider jokes are OK. Yes.
[23:58:57] <EvanR> since all math is made out of sets of nameless atoms, makes sense
[23:59:13] <maerwald> EvanR: maybe it's a sign of negative thinking :p ...we don't keep stuff, we throw it away
[23:59:32] <monochrom> Negative thinking is valuable too. :)
[23:59:36] <maerwald> coding = deleting code
[23:59:44] <geekosaur> just name everything f, g', h'''
[23:59:47] <monochrom> filter your code >:)
