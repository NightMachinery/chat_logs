[00:01:15] *** Joins: neurocyte0132889 (~neurocyte@94.46.81.14)
[00:01:16] *** Quits: neurocyte0132889 (~neurocyte@94.46.81.14) (Changing host)
[00:01:16] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:01:33] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[00:02:44] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:fcc8:d2a0:3b64:5912)
[00:03:58] *** Quits: deadmarshal (~deadmarsh@95.38.116.191) (Ping timeout: 256 seconds)
[00:03:59] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[00:04:57] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:04:58] *** Joins: pfurla (~pfurla@2804:18:5820:1d6d:8d43:ba5d:8061:64f4)
[00:05:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:05:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[00:06:47] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[00:09:15] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 268 seconds)
[00:10:51] *** Joins: alx741 (~alx741@157.100.93.160)
[00:11:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436)
[00:12:18] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[00:14:38] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[00:16:17] *** Quits: bbear58 (~bbear@2a01:e34:ec2b:d430:e0dd:e718:df68:1877) (Quit: Client closed)
[00:20:29] *** Joins: Pickchea (~private@user/pickchea)
[00:21:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:21:34] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:21:34] *** Joins: wroathe (~wroathe@user/wroathe)
[00:21:55] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:23:06] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:24:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:24:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:25:51] *** Joins: acidjnk (~acidjnk@p200300d0c7271e62c4e0968b1a8deb03.dip0.t-ipconnect.de)
[00:26:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[00:26:57] <dmj`> Is it a bug that the Haskell2010 report didn't include "qtycls" in the lexical spec. ? It's mentioned in BNF, but technically not a lexeme 
[00:30:19] <dmj`> GHC's parser doesn't include it as an identifier either https://github.com/ghc/ghc/blob/master/compiler/GHC/Parser.y#L691
[00:30:29] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:30:59] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:31:45] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:32:30] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[00:32:49] *** Quits: smartin (~Thunderbi@88.135.18.171) (Remote host closed the connection)
[00:33:07] *** Joins: smartin (~Thunderbi@88.135.18.171)
[00:33:07] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[00:33:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:34:10] <Pickchea> Why can't GHC type «let g = \x -> x in \f -> (f 0, f True)»? I thought that's what the let rule in the Hindley-Milner type system was for and it's called let-polymorphism.
[00:34:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:35:19] <lyxia> dmj`: I think it's intentional. Section 2.4 explicitly mentions "two namespaces" vs "six different kinds of names", although the exact meaning of this distinction remains vague.
[00:35:30] <glguy> Pickchea: did you mean to use g?
[00:35:32] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[00:37:21] <Pickchea> glguy, sorry, I meant: let g = (\x -> x) in (\f -> (f 0, f True)) g
[00:37:46] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 260 seconds)
[00:37:58] <glguy> Pickchea: the f in \f-> has to have one (unquantified) type
[00:38:11] <glguy> it doesn't have to do with let polymorphism
[00:38:15] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:38:16] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:38:16] *** Joins: wroathe (~wroathe@user/wroathe)
[00:38:21] <glguy> (\f -> (f 0, f True)) id
[00:38:23] <glguy> same thing
[00:39:05] <hololeap> so I can right click on a unexported function name and click on "quick fix" from the LSP menu. what does it do? 1. adds {-# OPTIONS_GHC -Wno-unused-top-binds #-} 2. adds the function name to the module exports 3. deletes the function entirely
[00:39:27] <hololeap> answer: all of the above XD
[00:40:21] *** Quits: dolio (~dolio@130.44.130.54) (Quit: ZNC 1.8.2 - https://znc.in)
[00:40:31] <Pickchea> glguy, I know that that doesn't work but I thought the let would permit polymorphic types that way.
[00:40:42] <glguy> it does:
[00:40:42] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 268 seconds)
[00:40:43] <glguy> :t let g = \x -> x in (g 0, g True)
[00:40:44] <lambdabot> Num a => (a, Bool)
[00:41:07] <c_wraith> as long as you actually use the *name* bound in the let
[00:41:19] <c_wraith> it's syntactic
[00:41:59] <glguy> This lambda just can't be typed: (\f -> (f (0::Int), f True))
[00:42:48] <glguy> With RankNTypes you can do:  (\(f :: forall a. a -> a) -> (f 'a', f True))
[00:42:59] <glguy> but it's up to you to annotate the polymorphism
[00:43:08] <Pickchea> glguy, ah I see. Yes, have tried RankNTypes already, crazy stuff.
[00:43:21] <Square> Whats going on in this exotic signature : f' :: RecordField from a -> ([] `Compose` (,) [Text] `Compose` (->) Value `Compose` (Except D)) ... (taken from https://hackage.haskell.org/package/schemas-0.3.0.2/docs/src/Schemas.Internal.html#local-6989586621679105056 )local-6989586621679105820
[00:43:59] <Square> I guess i mean ... whats the `Compose` thing? 
[00:45:05] <EvanR> it composes two type constructors
[00:45:29] <EvanR> like type level .
[00:45:41] *** Joins: dolio (~dolio@130.44.130.54)
[00:47:47] <Square> ah ok. Is that part of an extension or basic functionality? 
[00:47:56] <Square> ghc extension that is
[00:47:57] *** Joins: alx741 (~alx741@157.100.93.160)
[00:48:20] *** Joins: mmhat (~mmh@55d44624.access.ecotel.net)
[00:51:21] *** Quits: pfurla[m] (uid345156@id-345156.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[00:52:22] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:53:10] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[00:56:42] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/libraries/base-4.16.0.0/Data-Functor-Compose.html
[00:57:27] <dmj`> I still chuckle at this "Enable MultiParamTypeClasses to allow no-parameter classes"
[00:58:01] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[01:00:38] <hpc> in english, zero is plural
[01:03:49] <Square> geekosaur, thanks
[01:05:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:07:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[01:07:24] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[01:08:42] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:10:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[01:10:32] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:12:36] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 265 seconds)
[01:13:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[01:15:09] *** Joins: kranius (~kranius@222.186.245.213.rev.sfr.net)
[01:22:53] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[01:23:30] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 260 seconds)
[01:25:15] *** Joins: alx741 (~alx741@157.100.93.160)
[01:25:21] *** Quits: kranius (~kranius@222.186.245.213.rev.sfr.net) (Changing host)
[01:25:21] *** Joins: kranius (~kranius@user/kranius)
[01:26:17] <dmj`> lyxia: yea, a simple translation of the 2010 spec gives ~80 reduce/reduce conflicts in happy
[01:26:18] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[01:27:45] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Remote host closed the connection)
[01:28:01] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[01:29:01] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[01:29:35] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:29:35] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:29:35] *** Joins: wroathe (~wroathe@user/wroathe)
[01:30:32] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[01:31:30] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:32:54] *** Quits: kranius (~kranius@user/kranius) (Ping timeout: 265 seconds)
[01:33:09] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[01:34:31] *** Joins: husixu (~husixu@137.132.119.2)
[01:34:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[01:35:47] *** Quits: husixu (~husixu@137.132.119.2) (Remote host closed the connection)
[01:37:24] *** Joins: husixu (~husixu@137.132.119.2)
[01:39:05] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[01:39:08] *** Joins: pfurla_ (~pfurla@2804:18:5820:1d6d:1c52:bbfc:4fcf:e916)
[01:41:19] *** Quits: pfurla (~pfurla@2804:18:5820:1d6d:8d43:ba5d:8061:64f4) (Ping timeout: 250 seconds)
[01:43:32] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 240 seconds)
[01:44:14] *** Quits: pfurla_ (~pfurla@2804:18:5820:1d6d:1c52:bbfc:4fcf:e916) (Ping timeout: 268 seconds)
[01:44:52] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[01:45:12] *** Joins: pfurla (~pfurla@2804:18:5820:1d6d:95e6:204:998d:de68)
[01:46:21] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[01:48:48] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[01:49:30] *** Joins: pavonia (~user@user/siracusa)
[01:49:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:49:51] *** Joins: alx741 (~alx741@157.100.93.160)
[01:54:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[01:54:20] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[01:55:32] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[02:01:13] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[02:01:37] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:03:54] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:04:04] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:05:45] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[02:06:09] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[02:06:22] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[02:07:16] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[02:08:10] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[02:10:48] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[02:11:06] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[02:14:07] <hololeap> Square: it's mostly used to extend typeclass instances to composed type constructors, e.g. instance (Applicative f, Applicative g) => Applicative (Compose f g)
[02:14:33] <hololeap> so you could get the combined Applicative for e.g. [Maybe a]
[02:15:40] <Square> hololeap, oh right. And thats no possible wo that trick?
[02:16:53] <hololeap> it's possible. you could make a newtype wrapping [Maybe a] and then just define your own Applicative instance, but you'd most likely just be recreating the Applicative for (Compose [] Maybe)
[02:17:50] *** Joins: alx741 (~alx741@181.199.42.79)
[02:19:04] <hololeap> likewise, they could have wrapped [([Text], Value -> Except D a)] in a newtype, but they chose to leverage all the instances that you get by using Compose
[02:19:30] <hololeap> (at least I assume that's why they did that)
[02:20:31] <hololeap> personally, I like to use Compose with the DerivingVia extension, that way you don't have to have a bunch of Compose constructors that you will eventually have to deal with
[02:21:57] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:22:12] <hololeap> newtype MyThing a = MyThing (Either String [Maybe a]) ; deriving Applicative via Compose (Either String) (Compose [] Maybe)
[02:22:20] <hololeap> hope that makes sense
[02:27:18] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[02:29:26] *** Quits: husixu (~husixu@137.132.119.2) (Quit: Leaving)
[02:30:15] *** Joins: mud (~mud@user/kadoban)
[02:30:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:30:47] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[02:32:54] *** Joins: Axman6 (~Axman6@user/axman6)
[02:35:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[02:35:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[02:36:26] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Client Quit)
[02:37:02] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[02:43:36] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:943d:5b05:e9f7:79b5) (Quit: Leaving)
[02:44:14] *** Joins: alx741 (~alx741@181.199.42.79)
[02:46:07] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436) (Remote host closed the connection)
[02:49:13] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[02:51:19] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[02:52:40] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:3700:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[02:55:02] *** Quits: mmhat (~mmh@55d44624.access.ecotel.net) (Quit: WeeChat 3.3)
[02:55:05] *** Joins: machinedgod (~machinedg@24.105.81.50)
[02:56:39] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Remote host closed the connection)
[03:02:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:03:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:04:18] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 260 seconds)
[03:04:46] <smichel17[m]> Does anyone know how to get GHC to spit out all of the options it's being called with? I'm using stack, but would like to know what the actual ghc command that runs in the end is.
[03:05:42] <hololeap> that sounds like it should be a debug option for stack (I'm not a stack user)
[03:05:44] <geekosaur> shouldn't stack -v show you that?
[03:06:32] *** Joins: alx741 (~alx741@157.100.93.160)
[03:06:34] <smichel17[m]> Ah, maybe. `stack -v` spits out *a lot*, so I was hoping there was a quicker way to get to the point, but I'll take a look
[03:07:05] <geekosaur> usually there isn't, it's up to the invoker to show how it's invoking
[03:09:53] <sm> verbosity control is not great with stack/cabal/ghc
[03:10:23] <sm> you get too much, or too little
[03:10:36] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[03:12:32] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[03:17:24] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:17:55] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[03:19:30] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Remote host closed the connection)
[03:20:55] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:20:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:20:56] *** Joins: wroathe (~wroathe@user/wroathe)
[03:21:39] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[03:22:17] *** Quits: shapr (~user@pool-108-28-144-11.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[03:23:19] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Remote host closed the connection)
[03:24:11] <smichel17[m]> Thanks, it was there, after some digging
[03:24:13] *** Joins: jinsun__ (~quassel@user/jinsun)
[03:25:51] *** Joins: SoF3 (~skius@user/skius)
[03:25:54] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:25:59] *** Quits: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com) (Ping timeout: 252 seconds)
[03:26:14] *** Quits: SoF (~skius@user/skius) (Killed (NickServ (GHOST command used by SoF3)))
[03:26:14] *** SoF3 is now known as SoF
[03:26:51] *** Quits: ts2 (~ts@46.101.20.9) (Ping timeout: 250 seconds)
[03:26:56] *** Joins: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net)
[03:27:05] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 252 seconds)
[03:27:05] *** Quits: dcoutts (~duncan@71.78.6.51.dyn.plus.net) (Ping timeout: 252 seconds)
[03:27:09] *** Joins: ts2 (~ts@46.101.20.9)
[03:27:47] *** Quits: max22- (~maxime@2a01cb0883359800ce4fb8a82cc4438c.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[03:29:45] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:fcc8:d2a0:3b64:5912) (Quit: Textual IRC Client: www.textualapp.com)
[03:32:49] <koz> Can I specify that a test-suite depends on a library, but not its tests?
[03:32:56] <koz> I'm getting cyclic dependency errors in the solver.
[03:34:27] <hololeap> that's weird, I would think that what you want would be the default
[03:34:44] <koz> hololeap: Well, it's not, sadly.
[03:34:51] <hololeap> this is cabal?
[03:34:57] <koz> Yup.
[03:35:13] *** Joins: alx741 (~alx741@157.100.93.160)
[03:37:11] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[03:37:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[03:37:58] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[03:39:57] *** Quits: averell (~averell@user/averell) (Remote host closed the connection)
[03:43:28] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[03:43:31] <jackdk> It could be that the package is set up funny, like all the build-depends are in a common stanza or something. I know the nixpkgs haskell infrastructure disables checks on a bunch of libraries to break cycles
[03:43:50] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[03:43:53] *** Quits: acidjnk (~acidjnk@p200300d0c7271e62c4e0968b1a8deb03.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[03:45:44] <koz> jackdk: Not as far as I can tell.
[03:46:33] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436)
[03:46:46] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:47:14] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 256 seconds)
[03:49:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[03:50:01] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-80cc-6b44-5328-2ea1.res6.spectrum.com)
[03:50:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:50:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[03:50:55] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436) (Ping timeout: 252 seconds)
[03:51:10] *** Joins: aeka` (~aeka@2606:9580:100:c:8757:8ee:ec9c:991c)
[03:52:01] *** Joins: slice (~slice@user/slice)
[03:52:29] *** Quits: aeka (~aeka@2606:6080:1002:9:ffc4:b9c1:20ad:82f9) (Ping timeout: 268 seconds)
[03:55:36] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-80cc-6b44-5328-2ea1.res6.spectrum.com) (Remote host closed the connection)
[03:57:26] *** Joins: altern (~Sergii@altern.corbina.com.ua)
[03:57:53] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 252 seconds)
[04:04:21] <pfurla> how can I use language pragmas in a .lhs file?
[04:04:47] *** Joins: alx741 (~alx741@157.100.93.160)
[04:05:15] <jackdk> `{-# LANGUAGE DataKinds #-}` or whatever at teh very top of the file
[04:05:15] *** Joins: shailangsa_ (~shailangs@host86-186-127-128.range86-186.btcentralplus.com)
[04:06:03] <geekosaur> with .lhs I'd expect it to work the same way as anything else in a .lhs, precede with > or wrap in \begin{code} … \end{code}
[04:06:26] <pfurla> keep saying ``unlit' failed in phase `Literate pre-processor'. (Exit code: 1)` for {-# LANGUAGE LambdaCase #-}
[04:06:35] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[04:06:42] <geekosaur> I don't think it has to be the absolute first thing in the file because unlit runs before parsing]
[04:06:56] <pfurla> geekosaur same thing with >
[04:08:43] <monochrom> worksforme cannotreproduce
[04:08:51] <geekosaur> same
[04:08:56] <pfurla> interesting
[04:09:10] <geekosaur> @where paste
[04:09:10] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[04:09:16] <pfurla> I forgot a > in the last line of the source and it was causing the previous error
[04:12:50] <pfurla> yeah, ^ was the issue, thanks guys
[04:14:04] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-80cc-6b44-5328-2ea1.res6.spectrum.com)
[04:15:19] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 268 seconds)
[04:20:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:20:53] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:24:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[04:26:43] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[04:28:05] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436)
[04:28:31] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:38:19] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[04:38:32] *** Quits: Stotteren (~Stotteren@pool-108-20-79-41.bstnma.fios.verizon.net) (Remote host closed the connection)
[04:39:23] *** Joins: alx741 (~alx741@157.100.93.160)
[04:39:42] *** Joins: img (~img@user/img)
[04:40:06] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-80cc-6b44-5328-2ea1.res6.spectrum.com) (Remote host closed the connection)
[04:40:43] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-80cc-6b44-5328-2ea1.res6.spectrum.com)
[04:41:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436) (Remote host closed the connection)
[04:42:23] *** Quits: shailangsa_ (~shailangs@host86-186-127-128.range86-186.btcentralplus.com) ()
[04:43:41] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:46:17] *** Quits: altern (~Sergii@altern.corbina.com.ua) (Ping timeout: 252 seconds)
[04:47:04] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:48:08] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Read error: Connection reset by peer)
[04:48:35] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[04:49:57] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 252 seconds)
[04:50:44] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436)
[04:51:36] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[04:55:33] *** Joins: Guest48 (~Guest48@wireless-student-pt3-240-232.lut.ac.uk)
[04:56:12] <Guest48> Hey Im trying to make a function that creates a pattern like this
[04:57:13] <Guest48> https://imgur.com/a/lMho8qo
[04:57:17] <Guest48> so it takes 3 values
[04:57:19] <Guest48> x y z
[04:57:55] *** Joins: zebrag (~chris@user/zebrag)
[04:57:56] <Guest48> x is the the height y is the width and z is the steps
[04:58:05] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[04:58:13] <Guest48> My code right now looks like this
[04:58:20] <Guest48> steps :: Int -> Int -> String
[04:58:21] <Guest48> steps n m = putStr (unlines (replicate m (concat(replicate n " " ++ replicate n "*"))))
[04:58:57] <Guest48> so this creates the steps and the repetition
[04:59:49] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[04:59:54] <Guest48> but in the picture you can see if I specify n steps it should duplicate n times on a new line all the while the width is x+x every loop
[05:00:47] <Guest48> I was wondering how do I call my functions n times whilst updating the doubling n
[05:00:55] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[05:00:58] <Guest48> if anyone could help it would be highly appreciated
[05:01:09] <nosewings> What do you mean by "steps"?
[05:01:35] <Guest48> so in the picture the two lines are repeated 4 times downwards
[05:01:43] <Guest48> then the pattern is reversed
[05:01:52] <Guest48> forget about the reversed part
[05:02:16] <Guest48> but the 2 lines repeat 4 times whilst the number of spaces + number of astrexis double
[05:02:52] <nosewings> So what values of x,y,z would generate the image you posted?
[05:03:05] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[05:03:46] <Guest48> so 2 3 4. 2 being the height, 3 being the width and 4 being steps
[05:04:12] <Guest48> steps x y takes the height and the width
[05:04:16] <Guest48> but im struggling on the steps
[05:04:31] *** Joins: earendel (uid498179@user/earendel)
[05:04:32] <Guest48> all I would have to do is call steps 4 times and double the x every time its called
[05:05:06] *** Joins: alx741 (~alx741@157.100.93.160)
[05:05:08] <Guest48> sorry nosewings does that make sense
[05:06:05] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 252 seconds)
[05:06:12] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[05:07:55] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[05:08:46] <nosewings> Sure, but your type signature for steps doesn't seem right
[05:08:53] <nosewings> It should be steps :: Int -> Int -> IO ()
[05:09:58] <Guest48> yeah your right
[05:10:05] <Guest48> I changed that whilst testing something out
[05:11:31] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[05:12:38] <Guest48> nosewings you think you know how to do it?
[05:13:23] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[05:15:34] <nosewings> OK, so is the idea just that you want to do the same thing some number of times?
[05:15:46] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:17:01] <Guest48> yep
[05:17:23] <Guest48> nosewings but I need to update the parameters as well
[05:17:32] <nosewings> OK, there are functions in the standard library for that
[05:17:41] <nosewings> In this case, replicateM_ will do the job
[05:17:50] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[05:18:23] <Guest48> is there a way to do without using standard librarys?
[05:18:27] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[05:18:48] <Guest48> wait is it in built into haskell?
[05:19:14] <nosewings> It's not a primitive; it's written in regular haskell
[05:19:35] <Guest48> yh I can only use primitive
[05:19:52] <nosewings> Ah, okay
[05:20:44] <nosewings> Hm, but you're also using unlines, replicate, concat, ++; these are also not primitives
[05:21:10] <nosewings> Anyway, the way to do this is with recursion
[05:21:20] <Guest48> sorry im not allowed to import anything
[05:21:22] <Guest48> thats the base rule
[05:21:46] <nosewings> Oh, okay
[05:21:50] <Guest48> if replicateM is like unlines/ replicate/concat then Im allowed to use it
[05:22:06] <nosewings> It's not in the Prelude, so you can't use it
[05:22:11] <Guest48> ah right
[05:22:13] <Guest48> understood
[05:22:19] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 250 seconds)
[05:22:21] *** Joins: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com)
[05:22:25] <Guest48> how would you do this with recursion
[05:22:39] <nosewings> Actually, I don't think you even have to
[05:22:48] <Guest48> even better xp
[05:22:53] <nosewings> If you remove the `putStrLn`, you'll get a function that returns a String
[05:23:09] <nosewings> Then you want to print z copies of that string
[05:23:51] <Guest48> so would you use replicate again?
[05:24:29] <nosewings> Yeah, and then you'll have to concat the resulting string
[05:24:38] <nosewings> Er, resulting list
[05:24:45] <nosewings> Might have to be careful with newlines
[05:25:19] <Guest48> yh I tried that with replicate and concat but it gave me extra new lines
[05:25:27] <Guest48> because then I had to do unlines again
[05:26:47] <nosewings> Oh, but do you want to increase the number of asterisks at each step?
[05:27:10] <Guest48> yep
[05:27:17] <Guest48> so double them basically
[05:27:21] <Guest48> and double the amount of spaces
[05:27:50] <Guest48> not double
[05:27:53] <Guest48> x+x
[05:28:42] <nosewings> Okay, so you do have to use recursion
[05:29:23] <Guest48> no problem
[05:29:49] <nosewings> (Might be a fancy way to do it without it, but)
[05:30:06] <nosewings> The other trick is that you need to use some sort of helper function
[05:30:18] <Guest48> nah recursion is fine
[05:30:20] <nosewings> Oh, or maybe you don't
[05:30:30] <nosewings> So it will look something like
[05:30:40] <nosewings> steps m n 0 = ...
[05:30:44] <nosewings> steps m n p = ...
[05:31:06] <nosewings> Where the first one is the case where you have 0 steps left, and the second one is where you still have some steps left to go
[05:32:27] <Guest48> m has to increase as well
[05:32:39] <nosewings> Right, so you call the function again with a new value of m
[05:33:17] <Guest48> so steps m n 0, step m+m n 0, step m+m+m n p etc?
[05:33:38] *** Quits: xff0x (~xff0x@2001:1a81:5203:4200:40b7:e822:93c8:fd81) (Ping timeout: 268 seconds)
[05:33:45] *** Joins: alx741 (~alx741@157.100.93.160)
[05:34:05] <nosewings> The sequence of recursive calls will look like steps m n p, steps m (2*m) (p - 1), steps m (3*m) (p - 2) ...
[05:34:07] *** Joins: xff0x (~xff0x@port-92-195-24-10.dynamic.as20676.net)
[05:34:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:34:49] <Guest48> okk
[05:34:51] <Guest48> that makes sense
[05:35:00] <nosewings> i.e., `steps m n p` should end up calling itself like `steps (2*m) (n+m) (p - 1)
[05:35:15] <nosewings> You probably will need a helper function too, because you need to remember what the original value of m was
[05:35:24] <Guest48> got it
[05:35:55] <Guest48> so what would the helper function do
[05:36:33] <nosewings> The helper function would do basically all of the work
[05:37:22] <nosewings> Your function would end up looking something like steps m n p = steps' m n p where steps' x y z = ...
[05:37:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 252 seconds)
[05:38:09] <nosewings> And then steps' calls itself recursively like `steps' (x + m) (y + m) (p - 1)
[05:38:46] <Guest48> okk let me try and write this down, im new to haskell so im not entirely sure how to write this but Ill see
[05:38:50] <nosewings> The point is that this lets you remember what the original value of `m` was, so you always increase by the original amount instead of doubling
[05:39:03] <Guest48> i see
[05:39:24] <Guest48> whats the base case for the recursion?
[05:41:07] <nosewings> Something like `steps' x y 0 = ""`
[05:41:43] <Guest48> got it
[05:42:38] <nosewings> And then you append the strings at every step
[05:43:17] <Guest48> in the helper function or the main steps function
[05:43:37] <nosewings> In the helper function, because `steps` doesn't do anything except call the helper function
[05:43:53] <nosewings> Oh, look up where-syntax if you're unfamiliar with that keyword
[05:44:16] <Guest48> got it will do
[05:46:21] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:49:13] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[05:50:39] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[05:51:12] <snake> my haskell is spinning i wonder how long it will take to finish day 6 like this.. any suggestions? https://dpaste.com/7J4ZKM9FW
[05:53:14] <glguy> snake: you can probably finish part 1 like that, but not part 2
[05:53:40] <snake> yeah lol pt 1 was fast, but pt 2 is just... spinning away
[05:54:10] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:54:57] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[06:03:25] *** Joins: Guest4846 (~Guest48@wireless-student-pt3-240-232.lut.ac.uk)
[06:04:29] *** Joins: alx741 (~alx741@157.100.93.160)
[06:04:35] <dsal> snake: 256 is a bigger number than 80.  :)
[06:04:52] *** Quits: Guest48 (~Guest48@wireless-student-pt3-240-232.lut.ac.uk) (Ping timeout: 256 seconds)
[06:05:05] <snake> mhm, yeah im a total newbie with this haskell / functional stuff
[06:05:22] <dsal> It's not haskell/functional.  This is one of those where the examples gives you a clue.
[06:05:34] <dsal> For the small example, you'd have a list of 26,984,457,539 fish.
[06:06:05] <snake> o
[06:06:44] <dsal> For the 255th run, you'd need to traverse a list about that big and do stuff to each element, including making new elements.
[06:07:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:07:44] <glguy> We haven't had anything this year that will be particular hard just as a consequence of using Haskell
[06:07:51] <snake> oh i guess i could just count the newfish
[06:08:02] <snake> wait AAAH
[06:08:03] <snake> idk
[06:08:28] <dsal> I managed to make something really hard by trying to use ST Arrays and having type inference be able to keep up.
[06:08:35] <jackdk> Why does `transformers` package have an AccumT and a CPS WriterT? Is there a difference?
[06:08:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[06:08:51] <snake> maybe i can use like a count for each fish if they have a synchronized time
[06:08:58] <dsal> It's pretty weird.  I'll have code that works just fine, and then I'll add a newSTRef and it'll suddenly have no idea what these arrays are.
[06:11:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[06:13:09] *** Joins: spoofer (~spoofer@64.185.111.205)
[06:15:14] <glguy> dsal: which problem had you pull out mutable arrays?
[06:15:39] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:15:39] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[06:16:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:17:31] <Guest4846> 'steps :: Int -> Int -> Int -> IO ()
[06:17:31] <Guest4846> steps m n p = steps` m n p
[06:17:32] <Guest4846>   where
[06:17:32] <Guest4846>     steps` x y 0 = ""
[06:17:33] <Guest4846>     steps` x y z = steps` (x+n) n (p-1)
[06:17:33] <Guest4846>     steps` x y z = (unlines (replicate y (concat(replicate x " " ++ replicate y "*"))))
[06:17:34] <Guest4846> '
[06:17:47] <Guest4846> im getting some sort of parse error on this code? anyone know why
[06:18:15] <hololeap> jackdk: AccumT is like a more powerful WriterT or a restricted StateT. It threads state like StateT, so you can `look` at the current state, but it only lets you mappend using `add`
[06:18:36] <jackdk> hololeap: ah, missed the read-side bit
[06:19:02] <hololeap> it's fairly useful although it lacks a lot of the mtl instances
[06:19:59] <jackdk> yeah I'm trying to get a new transformer for amazonka right at the moment - I have "lift MonadFoo through AmazonkaT" but not "lift MonadAmazonka through FooT"
[06:20:17] <dsal> glguy: I was trying it on day 11.  It was… a little faster.
[06:20:23] <dsal> So much more code.
[06:20:28] <jackdk> and the design is awkward because ResourceT is a poo sometimes
[06:20:55] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[06:21:32] <jackdk> the main problem is that if I make the class provide `askEnv :: m Amazonka.Env` then I induce MonadResource constraints everywhere and lose mocking
[06:21:45] <nosewings> Guest4846: the problem is the backtick
[06:22:06] <nosewings> Backticks are syntax in Haskell; you need to use an an apostrophe
[06:23:56] <jackdk> if I make a class with methods like `sendEither :: (AWSRequest req, MonadAmazonka m) => req -> m (Either Error (AWSResponse req))` then I have to give up either GeneralizedNewtypeDeriving or `paginate :: (AWSPager req, MonadAmazonka m) => req -> ConduitT () (AWSResponse req) m ()`
[06:25:18] <jackdk> if I make a class whose method is a homomorphism from `Free (Coyoneda AWSAction) a -> m a` (a la ocharles), then I have to give up `reconfigure`/`within`/`once`/`timeout` combinators which are "`bracket`-like"
[06:25:27] <jackdk> very interested in opinions on how best to solve this
[06:25:54] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 260 seconds)
[06:26:53] <jackdk> Axman6: you around?
[06:33:18] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:33:18] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:33:18] *** Joins: wroathe (~wroathe@user/wroathe)
[06:34:04] *** Joins: alx741 (~alx741@157.100.93.160)
[06:34:45] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:38:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[06:39:27] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 250 seconds)
[06:40:27] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:40:27] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:40:27] *** finn_elija is now known as FinnElija
[06:43:34] *** Joins: jkaye (~jkaye@2601:281:8300:7530:d9cd:95:6ff7:6ae4)
[06:45:02] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 260 seconds)
[06:45:28] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[06:45:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:45:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:45:56] *** Joins: wroathe (~wroathe@user/wroathe)
[06:46:17] <dibblego> I'm dad but not around.
[06:46:47] <jackdk> dibblego: got any opinions onthe problem outlined above?
[06:47:06] <dibblego> woah context shift
[06:47:07] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:47:23] <dibblego> I'm not good at those without working with actual code tbh
[06:48:43] <dibblego> oh yeah, I roughly know that problem... I typically give up GeneralizedNewtypeDeriving since the other contenders are too useful to give up
[06:51:47] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[06:52:16] *** Quits: whatif (~user@2400:8902::f03c:92ff:fe60:98d8) (Quit: ERC (IRC client for Emacs 26.3))
[06:52:39] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[06:55:48] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[06:57:38] *** Quits: td_ (~td@muedsl-82-207-238-103.citykom.de) (Ping timeout: 256 seconds)
[06:58:07] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 268 seconds)
[06:58:39] *** Quits: jkaye (~jkaye@2601:281:8300:7530:d9cd:95:6ff7:6ae4) (Ping timeout: 252 seconds)
[06:59:16] *** Joins: td_ (~td@94.134.91.178)
[06:59:20] *** Joins: shapr` (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[07:00:51] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[07:03:02] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[07:03:39] *** Joins: alx741 (~alx741@157.100.93.160)
[07:05:51] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[07:06:05] *** Joins: mbuf (~Shakthi@122.174.40.28)
[07:06:29] <jackdk> dibblego: here is the problem https://www.irccloud.com/pastebin/JWvF4erR/MTLClassDesign.hs
[07:07:54] *** Quits: gustik (~gustik@2a01:c844:242f:ba20:72e:7030:46bf:1353) (Quit: Leaving)
[07:10:32] <dibblego> will look I promise, millions of things stacked
[07:12:35] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:48] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:15:25] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[07:15:46] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:18:07] <hololeap> jackdk: just a shot in the dark, but have you looked into using polysemy for this? personally, I haven't used it
[07:20:25] <jackdk> hololeap: in the effect system space I think you would need polysemy or something like it to write something like `within :: Region -> Eff effs a -> Eff effs a`. But the work codebase I'm upgrading is built on MTL and I want to do this right for MTL and opensource it, then worry about effect systems once things mature some more. polysemy needs plugins and isovector is on break from it, eff needs new ghc primops, etc.
[07:21:26] <jackdk> `freer-simple`, for example, is not powerful enough
[07:23:37] *** Joins: see (~see@wireless-student-pt3-240-232.lut.ac.uk)
[07:23:46] *** Quits: see (~see@wireless-student-pt3-240-232.lut.ac.uk) (Client Quit)
[07:24:21] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[07:28:12] <EvanR> stupid question after reading the ocharles blog link on monad stacks and APIs: why can't the API calls have type IO something
[07:29:08] <EvanR> is it then impossible to use from an enterprise haskell monad stack technology
[07:29:22] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 260 seconds)
[07:30:00] *** Quits: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0) (Quit: I seem to have stopped.)
[07:31:08] *** Joins: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0)
[07:31:52] *** Joins: alx741 (~alx741@157.100.93.160)
[07:32:16] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:35:15] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[07:35:35] *** Quits: Guest4846 (~Guest48@wireless-student-pt3-240-232.lut.ac.uk) (Quit: Client closed)
[07:36:50] *** Joins: Guest71 (~Guest71@167.179.75.123)
[07:36:58] <Guest71> ?src ($)
[07:36:58] <lambdabot> f $ x = f x
[07:37:03] <EvanR> IO is untestable?
[07:37:21] <Guest71> ?src (%)
[07:37:21] <lambdabot> x % y = reduce (x * signum y) (abs y)
[07:39:36] <Guest71> Hi, all. Is my typing of `?src ($)` visible to all of the people here?
[07:39:43] <EvanR> yes
[07:39:55] <EvanR> you could privmsg lambdabot if you want
[07:40:06] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[07:40:38] <Guest71> Ok, I wll try that. Thanks. I just need a way to check sources of commonly used functions.
[07:41:18] <dsal> Guest71: That's not the actual source.  You can click on the source link from the docs.
[07:41:34] <dsal> The @src thing just gives you a simple model to consider.
[07:41:41] <dsal> (though sometimes it's right)
[07:41:42] <dsal> @src fix
[07:41:42] <lambdabot> fix f = let x = f x in x
[07:42:25] <Guest71> I wish this functionality will be built into GHCi
[07:42:47] <dsal> You can easily add things like this to ghci
[07:42:59] <Guest71> Really? How?
[07:43:34] <dsal> With :def settings in your .ghci
[07:44:02] <Guest71> Great, I will try that. Thanks a lot.
[07:44:33] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[07:45:17] <dsal> Just clicking on "Source" while reading the docs is going to be the most reliable thing, though.
[07:45:55] <jackdk> EvanR: if you're just providing an API for direct calls, you often can (though a `MonadIO m` constraint) is often easier to use. But yeah, there's two parts AIUI: 1. the testability you mentioned; 2. having some kind of monadic context gives you a good place to stow things like API keys etc
[07:46:28] <Guest71> No, :def is used to define new commands, but I actually want a way to get definition of built in functions if available if GHCi, so I can find the info without leaving from my terminal.
[07:46:29] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[07:47:13] <EvanR> I see, open a long term session sort of thing
[07:48:43] <EvanR> Guest71, ghci generally doesn't have access to sources, and you can download the @src list if you want. But the real sources are also available
[07:49:05] <snake> my new screaming-fast solution for day 6: https://dpaste.com/7S4S87HV4
[07:49:24] <EvanR> oh man
[07:50:14] <EvanR> I implemented day 6 with 8 registers and now runtime is dominated by loading the program and printing out the answer :(
[07:50:40] <snake> registers?
[07:50:52] <dsal> snake: (f0:f1:f2:f3:f4:f5:f6:f7:f8:[])   is [f0, f1, f2, f3, f4, f5, f6, f7, f8]
[07:50:59] <EvanR> yeah, x86-64
[07:51:07] <snake> dsal, thanks :V
[07:52:10] <EvanR> each day can be computed with 1 add, if you do 9 days at a time, you can get away with no loop breaker checks xD
[07:52:23] <EvanR> if you do 99 at a time, even better, which loop unroll can help with
[07:52:33] <dsal> That's a neat way to do it, though it'll complain with -Wall.  I saw someone else do that with a tuuple.
[07:52:35] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[07:54:04] *** shapr` is now known as shapr
[07:56:03] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[07:58:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[08:01:06] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 256 seconds)
[08:03:16] *** Joins: alx741 (~alx741@157.100.93.160)
[08:04:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:07:38] <pfurla> snake: you can do `drop 9 . take 10 . iterate  breedFishes $ [0..8]` instead of `breedFishes [0..8] 10`
[08:08:12] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[08:12:22] *** Quits: Guest71 (~Guest71@167.179.75.123) (Ping timeout: 256 seconds)
[08:13:05] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[08:14:57] <dsal> drop 9 . take 10  sounds like (!! 10)
[08:15:10] <dsal> > drop 9 . take 10 $ [1..]
[08:15:11] <lambdabot>  [10]
[08:15:13] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:15:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:15:14] *** Joins: wroathe (~wroathe@user/wroathe)
[08:15:20] <dsal> > [1..] !! 10
[08:15:21] <EvanR> (:[]) . (!! 10) xD
[08:15:21] <lambdabot>  11
[08:15:40] <dsal> Off by one... but iterate is zero based.
[08:15:40] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[08:15:40] <EvanR> it's going to eat the 10 who is alarmed
[08:15:44] <pfurla> > [1.10] !! 11
[08:15:45] <lambdabot>  *Exception: Prelude.!!: index too large
[08:15:54] <dsal> You won't get that with iterate.
[08:16:05] <pfurla> > drop 11 . take 10 [1..10]
[08:16:07] <lambdabot>  error:
[08:16:07] <lambdabot>      • Couldn't match expected type ‘a -> [a1]’ with actual type ‘[a0]’
[08:16:07] <lambdabot>      • Possible cause: ‘take’ is applied to too many arguments
[08:16:09] <pfurla> > drop 11 . take 10 $ [1..10]
[08:16:10] <lambdabot>  []
[08:17:02] <dsal> iterate produces an infinite list.  you don't have to be careful to not run past the end of it
[08:17:14] <pfurla> oh, true
[08:17:46] <pfurla> but I generally ignore unsafe functions
[08:18:37] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-80cc-6b44-5328-2ea1.res6.spectrum.com) (Remote host closed the connection)
[08:18:54] <pfurla> the problem I wonder if using drop. take. iterate instead of direct recursion will use much more memory
[08:20:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[08:20:50] <EvanR> this problem requires zero ram xD
[08:20:52] <dsal> Safe is relative.  Sometimes you've gotta divide.
[08:21:04] <hololeap> snake: this is how I did it. similar, but using different tools: https://dpaste.com/EMAJUY2LG
[08:21:04] <dsal> EvanR: Is that a lot?
[08:22:03] <dsal> hololeap: what is MonoidalIntMap?
[08:23:07] <xerox> I'd wager an IntMap containing monoids
[08:23:21] <hololeap> it's a wrapper around IntMap that gives a different semigroup instance. it basically makes `unionWith (<>)` the semigroup instance
[08:23:36] <jackdk> why that was never the default instance is beyond me
[08:23:43] <dsal> oh cool.  The default one is kind of unexpected.
[08:23:58] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 260 seconds)
[08:24:02] <dsal> I've written that bug a few times.
[08:24:11] <hololeap> @hackage monoidal-containers
[08:24:11] <lambdabot> https://hackage.haskell.org/package/monoidal-containers
[08:24:20] <dsal> Things shouldn't compile if they don't do what I want.
[08:24:34] <int-e> dsal: easy!
[08:24:53] <int-e> dsal: it only gets tricky when you expect some things to actually compile
[08:24:55] <dsal> hololeap: Thanks.  I've needed that often.
[08:25:13] <dsal> int-e: I was doing some ST recently, so I stopped expecting things to compile.
[08:25:31] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-80cc-6b44-5328-2ea1.res6.spectrum.com)
[08:25:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:27:46] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[08:29:11] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-80cc-6b44-5328-2ea1.res6.spectrum.com) (Remote host closed the connection)
[08:30:18] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-80cc-6b44-5328-2ea1.res6.spectrum.com)
[08:30:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[08:31:05] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:31:24] *** Joins: deadmarshal (~deadmarsh@95.38.117.193)
[08:32:50] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 256 seconds)
[08:33:34] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[08:33:46] *** Joins: alx741 (~alx741@157.100.93.160)
[08:34:54] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[08:39:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[08:45:55] *** Joins: Jing_ (~hedgehog@2604:a840:3::10c8)
[08:47:55] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Ping timeout: 252 seconds)
[08:50:05] <int-e> c_wraith: after checking literally billions of initial configuration, https://paste.debian.net/1223190/ is the worst one I have, with 45174 steps before synchronizing. From what I've seen, finding one with 29734 after only 440k attempts was very lucky.
[08:50:16] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-80cc-6b44-5328-2ea1.res6.spectrum.com) (Remote host closed the connection)
[08:51:02] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[08:51:13] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[08:53:10] *** Joins: Guest48 (~Guest48@wireless-student-pt3-240-232.lut.ac.uk)
[08:53:29] *** Quits: Guest48 (~Guest48@wireless-student-pt3-240-232.lut.ac.uk) (Client Quit)
[08:59:27] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[09:04:02] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 240 seconds)
[09:04:08] *** jinsun__ is now known as jinsun
[09:04:57] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[09:05:23] *** Joins: hololeap (~hololeap@user/hololeap)
[09:09:29] *** Joins: alx741 (~alx741@157.100.93.160)
[09:10:10] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 260 seconds)
[09:10:17] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[09:10:17] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[09:10:18] *** Joins: turlando (~turlando@user/turlando)
[09:11:36] <xerox> int-e: today I have a chance
[09:16:06] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[09:16:06] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[09:21:03] <xerox> is there nothing like this for lists? file:///Users/user/.ghcup/ghc/9.3.20211020/share/doc/ghc-9.3.20211020/html/libraries/containers/Data-Set.html#v:splitMember
[09:22:40] <int-e> xerox: that link is surprisingly useless ;-)
[09:23:03] <xerox> hahaha
[09:23:10] <int-e> libraries/containers/Data-Set.html#v:splitMember
[09:23:12] <xerox> I made a point of having it locally but now... I see
[09:23:14] <int-e> ...
[09:23:21] <int-e> https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-Set.html#v:splitMember
[09:23:22] <xerox> yeah you can figure it out
[09:23:52] <int-e> This was Firefox screwing with me... I did select the link in the url bar and it still pasted a different selection.
[09:24:15] <EvanR> Data.Set (and Data.Map) are so cool
[09:25:06] <int-e> xerox: | (xs, _:ys) <- span (/= '|') "abc|def" -- works as a guard
[09:25:24] <xerox> > Data.Set.splitMember [] (Data.Set.fromList [["3","4"],["6","8"],[],["fold","along","y","5"]])
[09:25:25] <lambdabot>  (fromList [],True,fromList [["3","4"],["6","8"],["fold","along","y","5"]])
[09:25:38] <xerox> with lists it'd be... *chef kiss*
[09:25:46] <int-e> huh
[09:26:09] <int-e> I wouldn't want to rely on "fold" > "9"
[09:26:30] <xerox> no of course, in the case of lists the ordering would be of the elements of the list, not that :D
[09:27:09] <EvanR> your set is contaminated
[09:27:23] <EvanR> with the stringly typed
[09:28:27] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[09:30:55] <EvanR> haskell has advantage on tonights puzzle because it's good at folds
[09:31:01] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[09:31:10] *** Quits: deadmarshal (~deadmarsh@95.38.117.193) (Ping timeout: 260 seconds)
[09:32:17] <int-e> EvanR: that's a good pun, I approve
[09:32:42] *** Joins: alx741 (~alx741@181.199.42.79)
[09:35:50] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 260 seconds)
[09:39:15] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 252 seconds)
[09:40:11] *** Quits: pfurla (~pfurla@2804:18:5820:1d6d:95e6:204:998d:de68) (Quit: gone to sleep. ZZZzzz…)
[09:46:19] *** Joins: emf (~emf@cpe-174-109-36-85.nc.res.rr.com)
[09:51:23] *** Quits: emf (~emf@cpe-174-109-36-85.nc.res.rr.com) (Ping timeout: 268 seconds)
[10:00:28] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:3700:12c3:7bff:fe6d:d374)
[10:00:50] *** Joins: Akiva (~Akiva@user/Akiva)
[10:02:19] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:02:52] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[10:06:33] *** Joins: Guest71 (~Guest71@167.179.75.123)
[10:08:02] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 256 seconds)
[10:10:30] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[10:11:11] *** Joins: alx741 (~alx741@157.100.93.160)
[10:15:13] *** Quits: Guest71 (~Guest71@167.179.75.123) (Quit: Client closed)
[10:18:27] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[10:19:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:23:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[10:32:41] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:33:47] *** Joins: michalz (~michalz@185.246.204.122)
[10:34:34] *** Joins: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca)
[10:35:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:36:39] *** Joins: alx741 (~alx741@181.199.42.79)
[10:37:02] *** Joins: chele (~chele@user/chele)
[10:39:30] *** Quits: mimmy (~mimmy@bras-base-toroon63x9w-grc-22-174-88-20-30.dsl.bell.ca) (Ping timeout: 268 seconds)
[10:44:36] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[10:48:51] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 250 seconds)
[10:50:32] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[10:51:01] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[10:57:14] <dmj`> > (join bimap) (+1) (1,1)
[10:57:16] <lambdabot>  (2,2)
[11:00:37] <hololeap> :t join bimap
[11:00:38] <lambdabot> Bifunctor p => (c -> d) -> p c c -> p d d
[11:02:12] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[11:08:05] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[11:10:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[11:15:04] *** Joins: cfricke (~cfricke@user/cfricke)
[11:18:58] *** Joins: alx741 (~alx741@157.100.93.160)
[11:19:11] *** Joins: maplike (~maplike@31.209.100.216)
[11:28:45] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:1f7:bbc2:bf58:b649)
[11:30:12] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:30:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:30:51] *** Joins: trcc (~trcc@eduroam09.au.dk)
[11:32:48] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:37:03] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:46:02] *** Joins: nabaiste^ (~nabaiste@wsip-98-188-240-142.mc.at.cox.net)
[11:48:00] *** Joins: mncheck (~mncheck@193.224.205.254)
[11:49:27] <maplike> https://stackoverflow.com/a/69651010 - works, so it's likely I am misinterpreting the idea
[11:49:44] <maplike> since this is about _counting_ combinations, why Solved Cent and not Solved Int?
[11:50:36] *** Joins: alx741 (~alx741@157.100.93.160)
[11:53:16] <maplike> in divide, Solved 0/1 presumably signify failure/success?
[11:53:50] <maplike> in conquer, what does it mean to add the 2 params, a and b, of Pending? What do those 2 values (as Cents) signify?
[11:54:11] <maplike> in conquer, I would have expected we just need to sum the Solveds.
[11:54:12] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[11:54:31] <maplike> in conquer, a and b are Cents, whereas in divide they were ([Cent], Cent) (aka ChangePuzzleArgs) - I can't see how that transformation happens.
[11:54:55] <maplike> more questions than lines of code!
[11:55:22] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:56:12] *** Quits: Jing_ (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[11:56:14] *** Joins: kuribas (~user@ptr-25vy0i9k5aujcskch0c.18120a2.ip6.access.telenet.be)
[11:57:01] *** Joins: Jing (~hedgehog@125.106.89.200)
[12:02:47] *** Joins: phma_ (phma@2001:5b0:211c:2a58:d0c:f178:6e2:131e)
[12:03:41] *** Quits: phma (phma@2001:5b0:212a:ba68:a7e4:c90f:fe43:cf4b) (Read error: Connection reset by peer)
[12:09:39] *** Joins: acidjnk (~acidjnk@p200300d0c7271e62e04d49a98672dc3b.dip0.t-ipconnect.de)
[12:12:40] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[12:18:22] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[12:18:22] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[12:20:37] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[12:22:40] <EvanR> nice post
[12:24:30] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[12:25:41] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[12:26:47] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[12:27:05] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:27:25] <maplike> EvanR - the hylo one?
[12:34:45] *** Joins: alx741 (~alx741@157.100.93.160)
[12:35:18] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:36:04] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[12:40:38] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[12:41:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[12:42:40] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-80cc-6b44-5328-2ea1.res6.spectrum.com)
[12:42:47] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-80cc-6b44-5328-2ea1.res6.spectrum.com) (Remote host closed the connection)
[12:44:16] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-d088-4906-a1eb-3fe7.res6.spectrum.com)
[12:47:39] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[12:48:53] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-d088-4906-a1eb-3fe7.res6.spectrum.com) (Remote host closed the connection)
[12:49:10] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-d088-4906-a1eb-3fe7.res6.spectrum.com)
[12:50:35] *** Joins: arjun (~arjun@user/arjun)
[12:52:22] *** Parts: nosewings (~ngpc@2603-8081-3e05-e2d0-d088-4906-a1eb-3fe7.res6.spectrum.com) ()
[12:52:33] *** Joins: psygate (~psygate@user/psygate)
[12:52:40] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:52:49] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-d088-4906-a1eb-3fe7.res6.spectrum.com)
[12:52:52] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:a6e9:4af8:654:3268)
[12:53:29] <psygate> Given that I have a type 'data State a = Minimum a | Maximum a | Unclassified a', can I unpack a without knowing the specific constructor used?
[12:54:21] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-d088-4906-a1eb-3fe7.res6.spectrum.com) (Remote host closed the connection)
[12:54:59] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-d088-4906-a1eb-3fe7.res6.spectrum.com)
[12:55:03] *** Joins: xkuru (~xkuru@user/xkuru)
[12:55:29] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[12:56:41] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-d088-4906-a1eb-3fe7.res6.spectrum.com) (Remote host closed the connection)
[12:58:11] *** Quits: trcc (~trcc@eduroam09.au.dk) (Remote host closed the connection)
[13:01:33] <kuribas> psygate: getValue :: State a -> a; getValue (Minimum x) = x; getValue ...
[13:02:13] *** phma_ is now known as phma
[13:03:30] <kuribas> alternatively: data StateDescr = Minimum | Maximum | Unclassified; data State a = State a StateDescr.
[13:03:45] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[13:05:40] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:05:41] *** Joins: alx741 (~alx741@157.100.93.160)
[13:10:27] *** Quits: Jing (~hedgehog@125.106.89.200) (Read error: Connection reset by peer)
[13:12:53] *** Joins: trcc (~trcc@users-5343.st.net.au.dk)
[13:16:47] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:16:59] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[13:20:17] <psygate> kuribas, i like the second one, thank you
[13:21:54] *** Joins: josemotanet (~jose@2001:8a0:ee85:a00:d4ef:b473:6a8a:ba2e)
[13:22:24] <psygate> Ah, and is there a good way to implement Ord based on ''data State a = Minimum a | Maximum a | Unclassified a' ? I dont want to define compare x y for every constructor
[13:23:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[13:23:24] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[13:23:29] <hololeap> it depends on what behavior you're looking for
[13:24:05] <hololeap> do you want Maximum a > Minimum a > Unclassified a ?
[13:24:53] <psygate> No, I'd like to compare the contained values.
[13:24:59] <kuribas> only?
[13:25:10] <psygate> The outer type is just meant as a local wrapper, that ads a tag but shouldn't influence "how" it works
[13:25:46] <kuribas> instance Ord (State a) where compare (State x _) (State y _) = compare x y
[13:29:25] <hololeap> if you use the original data structure as opposed to kuribas' alternative, then you would have to a) enumerate all combinations of constructors b) write a function that can extract `a' from any of your constructors and compare on that directly
[13:29:29] <psygate> That doesn't work. I've got it defined as a "wrapper" so to say
[13:29:37] <psygate> Do I have to restructure the type to make it work like that?
[13:29:51] <psygate> Oh okay, well that answers it, thanks hololeap 
[13:32:12] *** Joins: teo (~teo@user/teo)
[13:32:20] <kuribas> yeah "compare = compare `on` getValue" for the first.
[13:32:50] <hololeap> by defining an Ord instance for (State a), you're kind of implying that (compare (Minimum 5) (Maximum 5)) is discrete from (compare 5 5). if you really _mean_ that you want to compare the inner values, then write it as such, IMO
[13:33:07] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[13:34:50] <psygate> I'll use kuribas suggestion for the type, it looks like a much cleaner solution
[13:35:37] <hololeap> yeah it's like rewriting (a + a + a) as (a * 3)
[13:36:19] <hololeap> you can do that kind of simple algebra on types, hence the name algebraic data types
[13:37:32] <psygate> Is there a solution for getter / setter now? I've seen there are record types
[13:39:28] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[13:39:30] <hololeap> you could use record syntax pretty painlessly here. data State a = State { stateVal :: a, stateDescr :: StateDescr }
[13:39:34] <kuribas> getter/setter = lens
[13:39:54] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:40:23] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[13:40:24] <hololeap> that would give you two functions that act as your getters: stateVal :: State a -> a ; stateDescr :: State a -> StateDescr
[13:41:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:41:24] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[13:41:30] <hololeap> and you can use record syntax as a setter as well: State 4 Minimum { stateVal = 10 } -- this yields (State 10 Minimum)
[13:41:58] *** Joins: kmein_ (~weechat@user/kmein)
[13:42:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436) (Remote host closed the connection)
[13:42:24] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:43:00] <hololeap> that little example would actually have to be written as: (State 4 Minimum) { stateVal = 10 }
[13:43:49] *** Quits: kmein (~weechat@user/kmein) (Ping timeout: 240 seconds)
[13:43:55] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 250 seconds)
[13:44:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[13:45:37] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:46:01] <hololeap> otherwise the record update would apply to Minimum (an error) as opposed to applying to the State that I'm constructing there
[13:47:48] *** Joins: zaquest (~notzaques@5.130.79.72)
[13:49:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:50:27] <psygate> Ahhh, and is there a way to constraint the State type to only orderable types?
[13:50:43] <psygate> Something like 'Ord a => data State a StateDesc' ?
[13:51:12] *** Joins: alx741 (~alx741@157.100.93.160)
[13:51:17] <hololeap> you'll want to put `Ord a => ...` on whatever functions actually need it
[13:51:27] <merijn> psygate: You can't really constraint types
[13:53:23] <psygate> makes sense, thanks. its been a while that ive used haskell. you may be able to tell.
[13:53:35] <dminuoso> psygate: We used to be able to do this, but it occured this was mostly pointless.
[13:53:51] <dminuoso> This does not have any meaningful gains and just artificially limits your code
[13:55:12] *** Joins: vpan (~0@212.117.1.172)
[13:55:42] <dminuoso> Instead we place constraints on function definition sites instead, like `f :: Ord a => State a StateDesc`, this has the cute benefit of allowing the creation of State for non-Ord choices of `a` in code regions that does not need `f`
[13:55:50] <dminuoso> So we get the freedom to write more code
[13:56:11] <dminuoso> Uh, the above was meant to read `f :: Ord a => State a StateDesc -> T`
[13:58:12] *** Quits: arjun (~arjun@user/arjun) (Remote host closed the connection)
[13:58:36] *** Joins: arjun (~arjun@103.57.87.133)
[14:00:26] <hololeap> if you had an Ord constraint on the whole type, then you wouldn't be able to make a Functor instance for State, for instance, because Functor requires that there are no constraints on `a'. it has to work with any function (a -> b) for _any_ `a' and `b'
[14:01:45] <kuribas> hololeap: perhaps you could with a GADT?
[14:02:58] <hololeap> I don't think so. you would run into the same problem that we have with Set no matter how you approach it
[14:03:25] <kuribas> But that's because Set doesn't have an Ord in the type.
[14:04:05] *** Quits: pavonia (~user@user/siracusa) (Read error: Connection reset by peer)
[14:06:04] <hololeap> it might as well. it requires Ord for anything that would involve modifying the data
[14:06:45] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:41d5:8d83:8f3c:c995)
[14:07:44] <sprout> can I post my egel solution for day 13,  task 2?
[14:10:13] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[14:10:59] <hololeap> only if it's egel
[14:11:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[14:11:43] *** Joins: pavonia (~user@user/siracusa)
[14:12:25] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[14:12:30] <sprout> yay!
[14:12:34] <sprout> https://github.com/egel-lang/aoc-2021/blob/main/day13/task2.eg <- day 13, task2, egel solution.  just waste cycles on it
[14:12:37] <sprout> https://pasteboard.co/WUoK7G5rKdWk.png <- with colors!
[14:13:18] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[14:13:42] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:14:19] <sprout> for haskellers.  egel is roughly untyped impure lambda calculus + constants.  so shouldn't be hard to read
[14:14:32] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[14:14:36] <sprout> (+eager)
[14:15:57] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:3700:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[14:16:21] *** Joins: earendel (uid498179@user/earendel)
[14:17:19] *** Joins: deadmarshal (~deadmarsh@95.38.114.19)
[14:21:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:25:02] <hololeap> looks interesting
[14:25:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[14:27:06] <kuribas> egel = e(a)g(er) (hask)el(l)?
[14:27:49] <merijn> Clearly sprout just likes hedgehogs :p
[14:28:31] <dminuoso> Eegel is german for Hihrudinea
[14:28:46] <dminuoso> I assume that is meant.
[14:28:48] <sprout> nah,  it's Dutch for hedgehog.   I sometimes have a hedgehog in my garden I try to take care of
[14:29:05] <merijn> hah!
[14:29:08] <merijn> I was right!
[14:29:26] <sprout> I's also a bit of a pun on Python.  hedgehogs are somewhat venom resitant
[14:29:30] <sprout> *resistant
[14:29:45] <merijn> Shoulda gone for mongoose then :p
[14:30:02] <sprout> when I add types!
[14:30:21] <kuribas> sprout: so you wasted a chance for a clever acronym? :-P
[14:30:24] <sprout> (probably not going to happen)
[14:30:49] *** Joins: alx741 (~alx741@157.100.93.160)
[14:31:13] <dminuoso> sprout: What is eager rewriting exactly?
[14:31:29] <dminuoso> Is that just fancy for graph reduction?
[14:31:30] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:32:01] <sprout> opposite of lazy.  I forgot,  it's right-to-left bottom up reduction?
[14:32:11] <dminuoso> right-to-left?
[14:32:24] <sprout> lazy is top-to-bottom left-to-right,  I think.  sorry forgot
[14:32:39] * dminuoso does not know what left or right means
[14:32:43] <merijn> kuribas: As long as you have a theme :p
[14:32:49] <sprout> yah,  when you look at a term graph there are a number of rewrite strategies
[14:33:03] <merijn> The CS group at my university had a running theme of naming all projects after black and white animals
[14:33:38] <kuribas> zebra?
[14:33:51] <kuribas> How many animals are white and black?
[14:33:57] <sprout> and some of them can fall in a taxonomy of 'what term do I rewrite' 
[14:34:20] <merijn> DAS (badger), Ibis and a bunch of others, I'd have to look up the list
[14:34:27] <sprout> I think laziness corresponds to always rewriting the top term of the graph,  but forgot
[14:37:57] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:41d5:8d83:8f3c:c995) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:41:34] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[14:42:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436)
[14:43:50] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[14:45:45] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:47:23] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436) (Ping timeout: 268 seconds)
[14:47:35] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[14:50:35] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[15:01:04] *** Joins: alx741 (~alx741@157.100.93.160)
[15:01:44] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[15:04:48] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:41d5:8d83:8f3c:c995)
[15:06:42] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 260 seconds)
[15:09:33] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:18:26] *** Joins: altern (~Sergii@altern.corbina.com.ua)
[15:19:40] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:23:00] *** Joins: boris_ (~chatzilla@149.62.206.183)
[15:25:11] *** Quits: boris_ (~chatzilla@149.62.206.183) (Client Quit)
[15:26:25] *** Joins: boris_ (~chatzilla@149.62.206.183)
[15:27:58] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[15:28:33] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 250 seconds)
[15:30:20] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[15:31:41] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:41d5:8d83:8f3c:c995) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:33:19] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:41d5:8d83:8f3c:c995)
[15:37:01] *** Joins: trcc_ (~trcc@eduroam09.au.dk)
[15:37:49] *** Quits: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com) ()
[15:37:58] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:41d5:8d83:8f3c:c995) (Ping timeout: 268 seconds)
[15:38:35] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[15:38:44] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[15:39:23] *** Quits: timCF (~timCF@m91-129-100-224.cust.tele2.ee) (Ping timeout: 250 seconds)
[15:40:29] *** Quits: trcc (~trcc@users-5343.st.net.au.dk) (Ping timeout: 250 seconds)
[15:40:39] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[15:41:21] *** Quits: trcc_ (~trcc@eduroam09.au.dk) (Ping timeout: 250 seconds)
[15:42:34] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:43:15] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:44:49] *** Quits: boris_ (~chatzilla@149.62.206.183) (Ping timeout: 252 seconds)
[15:45:46] *** Joins: boris_ (~chatzilla@149.62.206.183)
[15:46:28] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[15:49:21] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 250 seconds)
[15:54:08] *** Joins: cfricke (~cfricke@user/cfricke)
[15:55:13] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 268 seconds)
[15:56:25] *** Joins: timCF (~timCF@m91-129-100-224.cust.tele2.ee)
[15:57:01] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:57:09] *** Joins: jippiedoe (~david@2a02-a44c-e14e-1-d348-9a8a-50cc-26de.fixed6.kpn.net)
[15:59:05] *** Joins: alx741 (~alx741@157.100.93.160)
[16:02:28] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:05:58] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 260 seconds)
[16:07:55] *** Joins: jespada (~jespada@87.74.33.157)
[16:10:01] *** Quits: boris_ (~chatzilla@149.62.206.183) (Ping timeout: 268 seconds)
[16:10:47] *** Joins: boris_ (~chatzilla@149.62.206.183)
[16:12:30] *** Joins: Guest4833 (~Guest48@wireless-student-pt3-240-232.lut.ac.uk)
[16:13:32] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:13:37] *** Joins: neverfindme (~hayden@158.123.160.43)
[16:14:22] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[16:15:28] *** Joins: son0p (~ff@2800:484:1d81:b700::4)
[16:15:59] *** Quits: gabiruh (~gabiruh@vps19177.publiccloud.com.br) (Ping timeout: 252 seconds)
[16:15:59] *** Quits: Guest4833 (~Guest48@wireless-student-pt3-240-232.lut.ac.uk) (Client Quit)
[16:16:10] *** Joins: Guest4866 (~Guest48@wireless-student-pt3-240-232.lut.ac.uk)
[16:16:12] *** Joins: __monty__ (~toonn@user/toonn)
[16:16:32] *** Quits: Guest4866 (~Guest48@wireless-student-pt3-240-232.lut.ac.uk) (Client Quit)
[16:16:42] *** Joins: yuyua32 (~yuyua32@wireless-student-pt3-240-232.lut.ac.uk)
[16:17:31] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[16:17:54] *** Joins: neverfindme (~hayden@158.123.160.43)
[16:21:08] *** Joins: notzmv (~zmv@user/notzmv)
[16:21:23] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[16:23:51] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Remote host closed the connection)
[16:24:05] *** Joins: cosimone` (~user@93-47-228-207.ip115.fastwebnet.it)
[16:24:58] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[16:25:55] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[16:26:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 260 seconds)
[16:26:31] *** Joins: gabiruh (~gabiruh@vps19177.publiccloud.com.br)
[16:30:02] *** Joins: alx741 (~alx741@157.100.93.160)
[16:30:48] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Read error: Connection timed out)
[16:31:23] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 252 seconds)
[16:31:30] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[16:39:17] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[16:42:23] *** Quits: altern (~Sergii@altern.corbina.com.ua) (Ping timeout: 252 seconds)
[16:42:41] *** Quits: boris_ (~chatzilla@149.62.206.183) (Quit: ChatZilla 0.10 [SeaMonkey 2.53.10/20211111233623])
[16:43:46] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:46:03] *** Quits: arjun (~arjun@103.57.87.133) (Ping timeout: 252 seconds)
[16:49:05] *** Quits: yuyua32 (~yuyua32@wireless-student-pt3-240-232.lut.ac.uk) (Quit: Client closed)
[16:54:23] *** Joins: pfurla (~pfurla@177.25.184.160)
[16:55:51] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[16:56:52] *** Joins: arjun (~arjun@103.57.87.133)
[16:58:38] *** Joins: chomwitt (~chomwitt@ppp-94-67-201-96.home.otenet.gr)
[16:59:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[17:00:04] *** Joins: alx741 (~alx741@157.100.93.160)
[17:03:40] *** Quits: chomwitt (~chomwitt@ppp-94-67-201-96.home.otenet.gr) (Ping timeout: 268 seconds)
[17:18:30] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:19:10] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:20:54] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:23:21] *** Joins: mimmy (~mimmy@72.142.88.18)
[17:28:23] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 250 seconds)
[17:28:48] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[17:31:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:33:27] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[17:33:52] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[17:34:48] *** Joins: hololeap (~hololeap@user/hololeap)
[17:35:42] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[17:36:06] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:36:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[17:37:38] *** Joins: alx741 (~alx741@157.100.93.160)
[17:43:11] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[17:43:23] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:43:49] *** Quits: neverfindme (~hayden@158.123.160.43) (Ping timeout: 240 seconds)
[17:44:07] *** Joins: alx741 (~alx741@157.100.93.160)
[17:45:16] *** Joins: Guest19 (~Guest19@n110-33-34-202.hum1.act.optusnet.com.au)
[17:46:47] *** Quits: josemotanet (~jose@2001:8a0:ee85:a00:d4ef:b473:6a8a:ba2e) (Quit: WeeChat 3.3)
[17:47:22] *** Joins: yuyua32 (~yuyua32@wireless-student-pt3-240-232.lut.ac.uk)
[17:47:27] *** Joins: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com)
[17:49:25] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:50:52] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[17:51:09] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[17:54:28] *** Guest19 is now known as jz99
[17:56:39] *** Joins: singpolyma (8a1e37e5a6@tilde.team/user/singpolyma)
[17:57:24] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:57:25] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:57:25] <singpolyma> 👋️ I have an error in production: `CallStack (from HasCallStack):\n  error, called at DB.hs:116:16 in main:DB`  is there a way these days to get that call stack to be deeper than one level?
[17:59:00] *** kmein_ is now known as kmein
[17:59:53] *** Joins: fr33domlover (~fr33@2.55.169.194)
[18:01:16] *** Quits: timCF (~timCF@m91-129-100-224.cust.tele2.ee) (Quit: leaving)
[18:03:21] <dminuoso> Does POSIX have a mechanism to determine whether a given file is a symlink or a socket?
[18:03:49] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:03:50] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:03:50] *** Joins: wroathe (~wroathe@user/wroathe)
[18:06:18] *** Quits: yuyua32 (~yuyua32@wireless-student-pt3-240-232.lut.ac.uk) (Quit: Client closed)
[18:08:25] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:08:37] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 240 seconds)
[18:09:07] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[18:09:58] *** Joins: mimmy (~mimmy@72.142.88.18)
[18:10:09] *** Joins: jkaye (~jkaye@2601:281:8300:7530:8f84:8d09:7b68:c6ce)
[18:13:03] <[exa]> dminuoso: lstat?
[18:13:22] <geekosaur> lstat() aka https://downloads.haskell.org/ghc/latest/docs/html/libraries/unix-2.7.2.2/System-Posix-Files.html#v:getSymbolicLinkStatus
[18:13:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:14:16] *** Joins: alx741 (~alx741@157.100.93.160)
[18:15:05] *** Joins: yuyua32 (~yuyua32@wireless-student-pt3-240-232.lut.ac.uk)
[18:15:25] *** Quits: nabaiste^ (~nabaiste@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[18:16:13] *** Quits: deadmarshal (~deadmarsh@95.38.114.19) (Ping timeout: 240 seconds)
[18:17:36] *** Quits: yuyua32 (~yuyua32@wireless-student-pt3-240-232.lut.ac.uk) (Client Quit)
[18:17:59] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[18:19:10] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:19:46] *** Joins: alx741 (~alx741@157.100.93.160)
[18:21:15] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 250 seconds)
[18:22:06] *** Quits: maplike (~maplike@31.209.100.216) (Ping timeout: 256 seconds)
[18:26:47] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[18:28:59] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:29:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[18:29:51] *** Joins: mimmy_ (~mimmy@37.19.212.189)
[18:32:05] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 250 seconds)
[18:32:07] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Quit: Reconnecting)
[18:32:19] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[18:35:44] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[18:36:17] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[18:38:41] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[18:38:41] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[18:39:48] *** Joins: pfurla_ (~pfurla@177.79.117.40)
[18:41:07] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 268 seconds)
[18:42:25] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[18:42:29] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[18:42:34] *** Quits: pfurla (~pfurla@177.25.184.160) (Ping timeout: 256 seconds)
[18:43:20] *** Joins: emf (~emf@cpe-174-109-36-85.nc.res.rr.com)
[18:46:09] *** Joins: alx741 (~alx741@157.100.93.160)
[18:46:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[18:46:54] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:46:54] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:46:54] *** Joins: wroathe (~wroathe@user/wroathe)
[18:47:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436)
[18:48:35] *** Joins: jakalx (~jakalx@base.jakalx.net)
[18:48:54] <oats> anyone using emacs and lsp-haskell know how to disable these import suggestions? https://paste.xinu.at/JpHdi/
[18:49:58] <oats> I thought it might be `lsp-haskell-refineimports-on' set to nil, but that didn't do it
[18:49:59] *** Quits: emf (~emf@cpe-174-109-36-85.nc.res.rr.com) (Quit: emf)
[18:50:51] *** Joins: emf (~emf@cpe-174-109-36-85.nc.res.rr.com)
[18:51:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:52:04] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436) (Ping timeout: 265 seconds)
[18:53:00] <oats> oh nvm, I think `lsp-haskell-importlens-on' was it
[18:56:33] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[18:56:49] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[18:57:50] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:58:59] *** Joins: emf_ (~emf@2620:10d:c091:480::1:cbc8)
[18:59:09] *** Quits: emf (~emf@cpe-174-109-36-85.nc.res.rr.com) (Ping timeout: 252 seconds)
[19:04:35] *** Joins: deadmarshal (~deadmarsh@95.38.114.19)
[19:05:01] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[19:05:08] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Remote host closed the connection)
[19:05:32] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[19:07:35] <dminuoso> [exa], geekosaur: Thanks!
[19:07:55] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[19:07:57] <dminuoso> Unrelatedly, does conduit have some efficient way to find a substring in a bytestring conduit?
[19:08:18] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:08:27] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[19:08:58] <dminuoso> Or do I have to roll my own KMP ontop of it?
[19:09:22] *** Quits: deadmarshal (~deadmarsh@95.38.114.19) (Ping timeout: 260 seconds)
[19:13:06] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 260 seconds)
[19:13:27] *** Quits: arjun (~arjun@103.57.87.133) (Ping timeout: 252 seconds)
[19:14:21] *** Joins: alx741 (~alx741@157.100.93.160)
[19:14:30] *** Quits: mimmy_ (~mimmy@37.19.212.189) (Ping timeout: 260 seconds)
[19:14:46] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:16:50] *** Quits: acidjnk (~acidjnk@p200300d0c7271e62e04d49a98672dc3b.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[19:16:56] *** Joins: mimmy_ (~mimmy@37.19.212.190)
[19:21:03] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[19:22:26] *** Quits: johnjay (~pi@154.6.152.74) (Ping timeout: 268 seconds)
[19:23:59] *** Joins: johnjay (~pi@154.6.152.74)
[19:24:27] *** Quits: emf_ (~emf@2620:10d:c091:480::1:cbc8) (Ping timeout: 252 seconds)
[19:25:26] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[19:25:45] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:25:50] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:28:11] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:28:55] *** Joins: emf (~emf@2620:10d:c091:480::1:cbc8)
[19:30:06] *** Quits: acco[m] (~accotedom@2001:470:69fc:105::1:3236) (Quit: You have been kicked for being idle)
[19:32:30] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[19:33:27] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[19:33:32] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[19:33:43] *** Joins: cfricke (~cfricke@user/cfricke)
[19:34:46] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 268 seconds)
[19:35:12] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[19:36:32] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:36:34] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[19:37:57] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[19:39:08] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[19:39:13] *** Quits: jippiedoe (~david@2a02-a44c-e14e-1-d348-9a8a-50cc-26de.fixed6.kpn.net) (Quit: Leaving)
[19:41:35] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:41:39] *** Joins: samlamamma (~user@79.138.136.192.mobile.tre.se)
[19:42:00] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[19:42:43] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[19:42:58] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[19:43:04] <samlamamma> Is finding morphisms between ADT:s easy? F.ex. "Find isomorphism for inductively defined A and inductively defined B"
[19:44:06] *** Joins: zebrag (~chris@user/zebrag)
[19:44:09] <samlamamma> It sounds like an interesting and useful problem to me, but maybe I'm too out of the loop to know that this is simple :). I'm thinking it's easy!
[19:45:45] *** Joins: alx741 (~alx741@157.100.93.160)
[19:51:06] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:53:58] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Remote host closed the connection)
[19:55:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436)
[19:55:15] *** Quits: mimmy_ (~mimmy@37.19.212.190) (Ping timeout: 252 seconds)
[19:56:14] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[19:56:33] *** Joins: ephemient (uid407513@id-407513.lymington.irccloud.com)
[19:57:30] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Read error: Connection reset by peer)
[19:57:49] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:58:53] *** Quits: APic (~apic@apic.name) (Quit: [TLS] Client upgrade)
[19:59:03] *** Joins: APic (apic@apic.name)
[19:59:38] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 256 seconds)
[20:00:26] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:02:21] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:05:11] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:09:36] *** Joins: mimmy_ (~mimmy@37.19.212.189)
[20:10:14] *** Quits: mimmy_ (~mimmy@37.19.212.189) (Client Quit)
[20:10:28] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:13:43] <raehik> Just to confirm, I can't do "mixed" record syntax, right? Like "data A a = A a { a2 :: a } a"
[20:13:49] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:14:02] <raehik> I should just write my own function for it
[20:15:05] *** Joins: alx741 (~alx741@157.100.93.160)
[20:18:26] <xerox> what you you want that to do?
[20:19:27] *** Quits: johnjay (~pi@154.6.152.74) (Ping timeout: 252 seconds)
[20:19:58] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:1f7:bbc2:bf58:b649) (Quit: WeeChat 2.8)
[20:20:06] <geekosaur> projection function for just one field, presumably
[20:20:23] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[20:21:13] *** Joins: johnjay (~pi@154.6.152.74)
[20:23:03] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[20:23:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:24:07] <c_wraith> Funny, pattern-matching and construction syntax would both work fine* with that. *though obviously you couldn't match the unnamed field by name
[20:25:08] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[20:25:55] <raehik> c_wraith: what would that look like? I wasn't able to make an "unnamed" field
[20:26:02] <c_wraith> But it would require a pretty significant change to template haskell code that works with data types, and probably generics too
[20:26:23] <raehik> Ah I see, there's nothing in the language restricting it
[20:26:25] <c_wraith> raehik: oh, it's not possible. I was pondering how much would change if it was
[20:26:34] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[20:27:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[20:27:48] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:28:21] *** Quits: pfurla_ (~pfurla@177.79.117.40) (Read error: Connection reset by peer)
[20:28:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[20:28:29] *** Joins: pfurla (~pfurla@2804:18:585d:1964:1855:cca0:7d18:69de)
[20:29:09] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:29:50] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:30:20] <[exa]> samlamamma: depends on what you want from the morphism. Technically `Integer` is isomorphic to anything. :]
[20:30:41] <c_wraith> Usually that sort of thing means structural isomorphism
[20:30:56] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:31:14] <geekosaur> for that matter so is Int#, since that's how computers work with anything that isn't an Int#
[20:31:14] <kuribas> [exa]: not to Int?
[20:31:25] <[exa]> ok (*hides a little statue of godel*)
[20:31:32] <[exa]> kuribas: Int too small :'(
[20:31:55] <kuribas> anything countable infinite, right?
[20:32:05] <[exa]> well you can encode the generating function
[20:32:08] <c_wraith> So like...  Fix Maybe is structurally isomorphic to inductive Nat
[20:32:58] <kritzefitz> kuribas: I don't think computers can work directly with anything uncountably infinite.
[20:33:28] <kuribas> kritzefitz: maybe symbolically?
[20:33:57] <[exa]> hm, how complex it is to find a structural morphism? (ie isn't it undecidable if you encode something really ugly like PKP to your types?)
[20:34:14] <c_wraith> Korrespondence?
[20:34:27] <kritzefitz> kuribas:  Maybe, but wouldn't the symbols be countable and thus be isomorphic to Integer again?
[20:34:38] <[exa]> c_wraith: I'm from the korresponding part of the word, yeah :D
[20:34:39] <monochrom> Symbolically, you can only have countably many symbols.
[20:34:45] <[exa]> correspondence for sure. :D
[20:35:10] <monochrom> For example, Mathematica can still only represent countably many real numbers, not all real numbers.
[20:35:40] <c_wraith> [exa]: but yeah, when you start using data types with extra restrictions on them (GADTs), you can make structural properties arbitrarily complex
[20:35:43] <monochrom> Unless you go constructivism and declare "all real numbers" = "all constructible real numbers".
[20:36:59] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[20:37:03] <[exa]> actually (I hit this a while ago and kinda forgot to solve for myself) -- there's only countably infinite of constructible real numbers right? (because of the number of programs to construct them)
[20:37:13] <c_wraith> yes
[20:37:25] <monochrom> or number of strings you can write down
[20:37:25] <c_wraith> there are only countably infinite possible programs
[20:37:41] <[exa]> hmm
[20:37:50] <[exa]> any example of inconstructible one?
[20:37:55] <kuribas> kritzefitz: actually, computers cannot deal with anything infinite
[20:37:56] <[exa]> (not asking anyone to construct it)
[20:37:57] <c_wraith> I'm sure you can create a programming language such that possible programs = strings :)
[20:38:06] <c_wraith> [exa]: Chitin's Omega
[20:38:21] <c_wraith> err.  Chaitin
[20:38:30] <[exa]> uuuuuuh gooood, I didn't know this
[20:38:32] <[exa]> thanks
[20:38:48] <c_wraith> he is not a waxy exoskeleton
[20:38:51] <c_wraith> even if that'd be cool
[20:39:05] <monochrom> So even if you are classical and accept "I don't have to write how to produce, I just have to write a predicate for what to satisfy", which still is a string, as long as you are formal, you can only specify countably many real numbers.
[20:39:15] <samlamamma> Yup, interest really comes from me wasting time writing functions going from different serialization formats
[20:39:42] <monochrom> Which brings us to: There are countable models of set theory.
[20:40:15] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:40:49] <[exa]> yap I recall some of that, but I completely missed this halting probability
[20:42:49] <samlamamma> At work I write C/C++ in a meager environment. This means that I have to write a lot of boring code. So of course I'm interested in program
[20:42:49] <samlamamma> synthesis to help me out
[20:42:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:43:33] <monochrom> Now that the OP is here, my turn to talk about that. Generally, "isomorphism" is ambiguous in the Haskell community. Try it: Define "isomorphism".
[20:44:14] *** Joins: alx741 (~alx741@157.100.93.160)
[20:44:19] <monochrom> I may even be able to claim s/ambiguous/a buzzword/, i.e., you don't even know of one definition, lack alone multiple definitions.
[20:44:42] <[exa]> samlamamma: the conversion problem is hard. There are lenses to avoid conversion completely (allow you to work kinda the same way with many structures) and in Hs it's pretty easy to make a relatively universal ADT for all possibilities (which is roughly how pandoc went around that)
[20:44:58] <samlamamma> Probably f: A -> B, g: B -> A s.t. f(g(b)) == id(b) ^ g(f(a)) == id(a) for all a, b 
[20:45:34] <[exa]> samlamamma: not sure if any of that applies to C++ though, probably depends on what data you represent
[20:45:35] <samlamamma> Proof of isomorphism is given by finding g and f
[20:45:50] <monochrom> That's just bijection. But sure. Now see [exa]'s Integer answer.
[20:46:20] <monochrom> Does that help with understanding the correspondence between serialization formats?
[20:46:21] * [exa] hides the godel statue deeper in the bag
[20:46:22] <samlamamma> monochrom: But it's a lossless bijection, so what am I missing? (reading int ans now)
[20:46:24] <monochrom> I bet no.
[20:47:04] *** Joins: pfurla_ (~pfurla@2804:18:5002:3d2c:db:f3d4:1503:ae07)
[20:47:49] <[exa]> samlamamma: isomorphism differs from bijection in the assurance that it preserves some predefined structure. Actually the Integer answer is quite borderline on that
[20:48:04] <[exa]> predefined/assumed/required
[20:48:28] <monochrom> For example, both XML and Markdown are in bijection with Integer.
[20:48:32] <[exa]> samlamamma: what data types you have there? (just curious)
[20:48:32] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:48:35] <samlamamma> Right, but this "preserves [...]" would have to be encoded in some logical predicate
[20:48:50] <[exa]> samlamamma: yes, usually you have "relations to keep working"
[20:48:55] <samlamamma> [exa]: Oh, just D-Bus messages and JSON.
[20:49:00] <monochrom> That still doesn't help you with conversion, or alternatively to argue that there can't be a conversion.
[20:49:21] *** Joins: Erutuon (~Erutuon@user/erutuon)
[20:49:25] *** Quits: pfurla (~pfurla@2804:18:585d:1964:1855:cca0:7d18:69de) (Ping timeout: 240 seconds)
[20:50:22] <samlamamma> monochrom: I imagine that in most "reasonable" cases finding a conversion (let's not be classical) might be easy. After all, programmers can do it easily
[20:50:45] <monochrom> Yeah, about that.
[20:50:54] <monochrom> Programmers make bugs just as easily.
[20:51:03] <samlamamma> Haha :-)
[20:51:43] <[exa]> samlamamma: anyway, in this case in Hs you'd probabl just parse/format the dbus format to/from Aeson and let the rest generate jsons and yamls for you :]
[20:51:51] <monochrom> I don't accept "programmers can do it easily". I only accept "programmers can do it with bugs easily".
[20:52:53] <samlamamma> monochrom: That's fair enough!
[20:52:56] <samlamamma> [exa]: Yeah, "someone else having done the work" is the real answer here, but not as interesting!
[20:54:03] <[exa]> let's go to the morphisms then, what are the operations you're doing on the stuff?
[20:54:14] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:a6e9:4af8:654:3268) (Remote host closed the connection)
[20:54:33] <[exa]> if it's just conversion, the "common middle format" is usually the way, preferably with a good ADT
[20:54:42] *** Joins: pfurla (~pfurla@177.79.126.164)
[20:54:44] <samlamamma> I'd just like to give input/output examples and have my computer throw programs at me in <100ms and having me refine its responses with more
[20:54:44] <samlamamma> examples and logic! What's so hard about that??? /sarcasm
[20:55:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[20:55:33] <samlamamma> [exa]: That's the boring part, we're not doing anything with the data. We're just shuffling it around.
[20:55:37] *** Quits: kuribas (~user@ptr-25vy0i9k5aujcskch0c.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[20:56:13] <samlamamma> But now I think we're getting into org issues with my work re why no one has put in the effort for a common library to do this
[20:56:14] <samlamamma> stuff for us :-)
[20:56:18] <[exa]> good, just implement instance FromJson Dbus, instance ToJson Dbus, then convert=id
[20:56:45] <EvanR> isn't bijection literally shuffling things around
[20:56:50] <EvanR> in some sense
[20:56:53] <[exa]> yap
[20:57:22] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:57:23] *** Quits: pfurla_ (~pfurla@2804:18:5002:3d2c:db:f3d4:1503:ae07) (Ping timeout: 268 seconds)
[20:59:04] *** Joins: yuyua32 (~yuyua32@wireless-student-pt3-240-232.lut.ac.uk)
[20:59:05] *** Quits: ystael (~ystael@user/ystael) (Read error: Connection reset by peer)
[21:00:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[21:02:43] *** Quits: thevishy (~Nishant@2405:201:f005:c007:81f3:ee3c:76f0:8869) (Ping timeout: 252 seconds)
[21:02:43] *** Joins: yhsiveht (~Nishant@2405:201:f005:c007:d93e:9746:14f0:2f69)
[21:04:05] *** Quits: yhsiveht (~Nishant@2405:201:f005:c007:d93e:9746:14f0:2f69) (Client Quit)
[21:07:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[21:07:53] *** Quits: yuyua32 (~yuyua32@wireless-student-pt3-240-232.lut.ac.uk) (Quit: Client closed)
[21:07:54] *** Joins: deadmarshal (~deadmarsh@95.38.114.19)
[21:07:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:09:13] *** Joins: pfurla_ (~pfurla@177.79.116.198)
[21:10:51] *** Quits: pfurla (~pfurla@177.79.126.164) (Read error: Connection reset by peer)
[21:11:51] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[21:12:54] *** Joins: notzmv (~zmv@user/notzmv)
[21:13:51] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[21:13:51] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[21:13:54] *** allbery_b is now known as geekosaur
[21:15:52] *** Joins: alx741 (~alx741@157.100.93.160)
[21:17:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:19:06] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[21:20:06] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:20:06] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:20:06] *** Joins: wroathe (~wroathe@user/wroathe)
[21:20:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[21:23:09] *** Quits: pfurla_ (~pfurla@177.79.116.198) (Read error: Connection reset by peer)
[21:24:17] *** Joins: samlamam` (~user@2a02:aa1:1608:7ad3:e9b0:545c:1f5b:b2ec)
[21:26:34] *** Quits: samlamamma (~user@79.138.136.192.mobile.tre.se) (Ping timeout: 260 seconds)
[21:26:47] *** Joins: pfurla (~pfurla@2804:18:5804:7c6e:974:c347:e60e:e6)
[21:27:29] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:27:46] *** Quits: samlamam` (~user@2a02:aa1:1608:7ad3:e9b0:545c:1f5b:b2ec) (Remote host closed the connection)
[21:28:54] *** Quits: fr33domlover (~fr33@2.55.169.194) (Ping timeout: 260 seconds)
[21:29:27] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[21:30:54] *** Quits: mbuf (~Shakthi@122.174.40.28) (Quit: Leaving)
[21:31:58] *** Quits: xff0x (~xff0x@port-92-195-24-10.dynamic.as20676.net) (Quit: xff0x)
[21:33:32] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[21:33:59] *** Joins: Erutuon (~Erutuon@user/erutuon)
[21:35:21] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 252 seconds)
[21:35:45] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:38:25] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[21:41:23] *** Joins: xff0x (~xff0x@2001:1a81:5245:500:35c3:4c34:eb85:8494)
[21:41:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[21:42:12] *** Joins: arjun (~arjun@103.57.87.133)
[21:43:05] <dminuoso> Lazy IO strikes again.
[21:43:40] *** Quits: arjun (~arjun@103.57.87.133) (Remote host closed the connection)
[21:43:51] *** Joins: alx741 (~alx741@157.100.93.160)
[21:43:58] *** Joins: arjun (~arjun@103.57.87.133)
[21:44:23] <dminuoso> I think?
[21:44:24] <dminuoso> openBinaryFile: resource busy (file is locked)
[21:45:30] <dminuoso> This is so annoying, cant even figure out why :(
[21:46:08] <EvanR> windows?
[21:46:17] <dminuoso> Linux
[21:46:27] *** Quits: jz99 (~Guest19@n110-33-34-202.hum1.act.optusnet.com.au) (Quit: Client closed)
[21:46:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:47:08] *** Joins: Guest19 (~Guest19@n110-33-34-202.hum1.act.optusnet.com.au)
[21:47:08] <dminuoso> Im recursing nested zip files using `zip`, and for each entry I use withSystemTempFile, I write it to the provided handle, and then use `zip` to open the provided path
[21:47:23] <dminuoso> And in that recursive zip I get that error
[21:47:30] *** Joins: nvmd (~nvmd@user/nvmd)
[21:47:44] <dminuoso> The writing happens using Data.ByteString.hPut
[21:48:08] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-d088-4906-a1eb-3fe7.res6.spectrum.com)
[21:48:13] *** Quits: sander (~sander@user/sander) (Ping timeout: 240 seconds)
[21:48:34] *** Joins: sander (~sander@user/sander)
[21:48:40] <dminuoso> I wonder, does the GHC RTS employ some kind of internal locking when opening files?
[21:48:45] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:49:11] <EvanR> so opening a file for reading that is already open for writing and in the middle of things. But I thought writing wasn't lazy at all
[21:50:21] <dminuoso> I was suspecting lazy IO anyhow
[21:50:25] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436) (Remote host closed the connection)
[21:51:11] <dminuoso> I naively expected to simply get two separate file descriptors under the hood
[21:51:16] <EvanR> are you closing the file before opening it
[21:52:31] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:52:36] <dminuoso> Nope
[21:52:57] <dminuoso> https://hackage.haskell.org/package/base-4.16.0.0/docs/System-IO.html#g:8 suggests this would be fine
[21:53:10] <dminuoso> oh, but maybe I didnt read the warning right
[21:53:40] <dminuoso> I first start with a write handler via withSystemTempFile, and then (hopefully) a read only handle using zip
[21:54:07] <dminuoso> https://hackage.haskell.org/package/zip-1.7.2/docs/src/Codec.Archive.Zip.Internal.html#scanArchive
[21:54:07] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:54:12] *** Joins: xkuru (~xkuru@user/xkuru)
[21:54:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:54:28] <EvanR> if openBinaryFile error is about the large zip file you're reading, makes sense
[21:54:39] <EvanR> if it's about the temp file, not sure
[21:54:54] <EvanR> oh, are you trying to lazy I/O open the temp file...
[21:55:33] <dminuoso> Seems that way
[21:56:31] <EvanR> what if you strict open the temp file xD
[21:56:50] <dminuoso> Well I guess I can simply close the file and manage it with bracket myself
[21:56:52] <dolio> What is "strict open"?
[21:57:44] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[21:58:22] <dminuoso> Anyway, the RTS has some kind of lockFile that mkFD uses
[21:58:27] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 268 seconds)
[21:58:33] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:58:33] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:58:33] *** Joins: wroathe (~wroathe@user/wroathe)
[21:58:39] <dminuoso> Sadly without any comments or documentation. :(
[21:58:39] <EvanR> Data.ByteString.getContents
[21:59:06] <EvanR> er
[21:59:08] <EvanR> hGetContents
[21:59:29] <dolio> Okay, so nothing to do with opening a file.
[22:00:02] <EvanR> yeah
[22:00:17] <dminuoso> But judging from a skim, it seems that the RTS does not allow having two simultaneous non-ReadMode handles to the same file
[22:02:13] <EvanR> that's a concrete that to be tested
[22:02:19] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[22:02:21] <EvanR> to see if it's false at least
[22:02:33] <EvanR> concrete thing*
[22:02:45] <dminuoso> Well the code in mkFD is quite clear
[22:02:54] <dminuoso> It's just surprising because zip actually opens in ReadMode
[22:03:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[22:04:11] <EvanR> the docs for lazy bytestring suggests there's a lock on something that's being lazy I/O read
[22:04:15] *** Joins: mmhat (~mmh@55d455f3.access.ecotel.net)
[22:05:22] <dminuoso> Im not using lazy bytestrings though
[22:06:08] <EvanR> oh
[22:06:38] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:07:34] *** Joins: ystael (~ystael@user/ystael)
[22:07:55] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[22:09:01] *** Quits: arjun (~arjun@103.57.87.133) (Quit: Leaving)
[22:10:48] *** Joins: edrx (~Eduardo@2804:18:581c:883f:998:719e:3903:d0a1)
[22:11:32] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:12:05] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[22:12:26] *** Joins: alx741 (~alx741@157.100.93.160)
[22:13:33] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:14:21] <edrx> hi! I am learning Agda using Wadler's PLFA and Peter Selinger's lectures. Both Wadler and Selinger _define_ the logical connectives in their tutorials, but I can't find references to where these definitions are in Agda's stdlib... is there a module of Agda that I can import and that defines _∧_, _∨_, _↔_, etc, for truth-values?
[22:17:04] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:17:11] <earendel>  kritzefitz: hm. calculus can deal with infinitely small margins. lim->0 .. 
[22:17:41] *** Quits: Guest19 (~Guest19@n110-33-34-202.hum1.act.optusnet.com.au) (Quit: Client closed)
[22:19:00] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[22:19:24] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 268 seconds)
[22:19:56] *** Joins: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net)
[22:21:20] <earendel> however the coastline of england is infinitely long. the more precise you measure, the longer it gets. :)
[22:21:24] *** Quits: pfurla (~pfurla@2804:18:5804:7c6e:974:c347:e60e:e6) (Quit: gone to sleep. ZZZzzz…)
[22:21:28] <earendel> rough huh?
[22:21:56] <dolio> It probably isn't.
[22:21:56] <EvanR> even though there possible haskell programs is countable, you can't create a list of all Stream Bool (that could be generated by haskell)
[22:22:19] <earendel> dolio: it is.
[22:22:20] <EvanR> in haskell
[22:22:25] <geekosaur> isn't that just another form of zeno's paradox?
[22:22:49] <dolio> earendel: No, that's some idealized nonsense people say when talking about fractals.
[22:23:07] <dolio> The coastline of England isn't an actual mathematical fractal.
[22:23:40] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[22:23:57] <EvanR> yeah if you walk around it you get somewhere
[22:23:57] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Client Quit)
[22:23:59] <earendel> its not idealised. it says the more precise you measure the longer it gets. 
[22:24:08] <monochrom> I like an idealized England. :)
[22:24:54] <dolio> Okay, prove that it will always get longer the more precisely you measure.
[22:25:27] <geekosaur> it's idealised if only because there are limits both to precision and to fractal expansion in the real world as opposed to the mathematical one
[22:25:38] <dolio> Right.
[22:26:15] <earendel> which is a fact. it also elegenantly points at limitations as of primary: limits of the machines we use to compute. and time memory it would take too. for infinity it would be a lot. especially at its ends.
[22:26:31] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[22:28:55] *** Joins: econo (uid147250@user/econo)
[22:28:56] <monochrom> "The closer you look, the less you see."
[22:30:31] <earendel> dolio: ok. imagine you put a grid over england. of some arbitrary resolution. now you can draw the coast of england using nodes at the grid-snaps. now: the higer the resolution gets, the more precise you can map the coast on it right? so far so good. now consider this. the shortest distance between two points/nodes is .. a line! now if you add more nodes (higher resolution) the distance between the points can only get longer or stay equally long 
[22:30:31] <earendel> (with the additional node being exactly on that line)
[22:31:08] *** Joins: lechner (~lechner@debian/lechner)
[22:31:15] <geekosaur> so have you heard of zeno's paradox?
[22:31:18] <monochrom> You do not want your precision to exceed the atomic level (say). Because at that point the whole notion of "coast line" dissolves.
[22:31:35] <dsal> That describes how I understand things.
[22:31:54] <monochrom> But then once you bound your precision, you stop at a finite answer.
[22:32:10] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[22:32:12] <monochrom> Also technically you no longer have a fractal.
[22:32:25] <dsal> My gap of understanding has infinite precision.
[22:32:26] <dolio> Eventually they stay equally long, because the real coastline of England isn't actually a fractal.
[22:32:31] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:32:43] <monochrom> But I'm OK with an idealized English notion. We have idealized circles too.
[22:33:24] <geekosaur> for that matter, have you heard of banach-tarski?
[22:33:25] <earendel> one more on infinity; if the universe is infinite (and so far we can look now it seems to be perfectly flat .. ergo infinite) it was infinite even as the observable universe was the size close to smallest (at big bang)
[22:33:53] <dolio> I see no reason to assume the universe is infinite, either.
[22:34:12] *** Quits: edrx (~Eduardo@2804:18:581c:883f:998:719e:3903:d0a1) (Ping timeout: 268 seconds)
[22:35:00] <earendel> one more. during the inflation. the universe expanded in a very short time by the same factor it has expanded it expanded since then till today. and! by that time it was the size of an orange.
[22:35:03] *** Joins: alx741 (~alx741@157.100.93.160)
[22:35:13] * earendel drops the mike
[22:35:13] <monochrom> The Banach-Tarski paradox says that England can exit Europe twice in a row. (1st was Brexit, 2nd was losing the Euro Cup.) >:)
[22:35:22] <EvanR> lol
[22:36:59] <EvanR> anyway, countable uncountable is another one of those things that gets fantastic descriptions because it rarely has any practical relevance
[22:37:13] <EvanR> so no one gets the opportunity to call bullshit
[22:38:28] <dolio> Countability is much more interesting constructively.
[22:39:11] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-d088-4906-a1eb-3fe7.res6.spectrum.com) (Remote host closed the connection)
[22:39:25] <dolio> Like, you can't show that the extended naturals are countable, so the continuum hyptothesis is obviously false. :þ
[22:39:34] <earendel> im no good in maths, but from what i get informatics don't deal with limitations of hardware like egineers do. if something halts, it wouldn't matter if the universe still would exist at that time. it will halt. 
[22:39:36] <earendel> lol
[22:40:04] <earendel> not that engineering has no merits! 
[22:40:42] <earendel> and from what i get this is where you were pointing at. fuck circles. all is a polygon. xd the holy n-eck
[22:40:49] *** Quits: jkaye (~jkaye@2601:281:8300:7530:8f84:8d09:7b68:c6ce) (Ping timeout: 250 seconds)
[22:40:49] <dolio> There are probably constructively acceptable axioms that make it uncountable (like 'not countable'), even.
[22:41:38] <EvanR> in my mind there is a positive notion of uncountable somehow
[22:41:42] <dolio> Some continuity principle.
[22:41:48] <boxscape> ski: I think you had some notation in mind for the existential version (if that makes sense) of => at some point? I don't remember what it was, but just wanted to note, there's some discussion about what it should be in https://github.com/ghc-proposals/ghc-proposals/pull/473 - at least I think it's the same idea
[22:41:59] <monochrom> *>
[22:41:59] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:42:08] <boxscape> ah, right
[22:42:09] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436)
[22:42:13] <dolio> Oh yeah. Uncountable is actually stronger. Like, for any enumeration, you can produce a value not in the enumeration.
[22:42:56] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[22:43:01] *** Joins: jkaye (~jkaye@2601:281:8300:7530:770c:7340:e88b:8722)
[22:43:12] <boxscape> wait, ski isn't even online. Why is matrix telling me otherwise >:(
[22:43:20] <dolio> But, the extended naturals are just not provably countable if you don't add principles, because in classical mathematics they are countable.
[22:43:25] *** Quits: deadmarshal (~deadmarsh@95.38.114.19) (Ping timeout: 250 seconds)
[22:44:31] <EvanR> principles are cool
[22:44:42] *** Joins: pgib (~textual@173.38.117.69)
[22:44:44] <EvanR> principals, usually not
[22:45:20] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[22:45:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:46:48] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-43bd-64a7-1221-490e.res6.spectrum.com)
[22:49:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[22:52:00] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:53:27] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[22:54:53] <earendel> princesses are best <3
[22:55:11] <earendel> printhesses
[22:57:01] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[22:59:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436) (Remote host closed the connection)
[23:00:46] *** Joins: alx741 (~alx741@157.100.93.160)
[23:00:53] *** Joins: Akiva (~Akiva@user/Akiva)
[23:01:25] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[23:01:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[23:01:42] *** Joins: ubert (~Thunderbi@p200300ecdf1abbd3ca03b07f10ffc657.dip0.t-ipconnect.de)
[23:02:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:06:27] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:06:38] *** Joins: fr33domlover (~fr33@2.55.171.43)
[23:10:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[23:10:56] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:13:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:15:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f458:37c0:1547:7436)
[23:18:19] <sm> why does cabal fail on m1 mac with "unrecognized instruction mnemonic" / "you need clang" errors here: https://bpa.st/FJ2Q ?
[23:18:39] <sm> `cabal` is an x86 binary
[23:19:57] <sclv> i think its a ghc issue where its only able to compile for m1 via llvm?
[23:21:22] <sm> thanks, I'll ask them
[23:22:42] <geekosaur> if cabal is an x86 binary then it should be trying to build for x86, but the followup error suggests it's trying to build natively
[23:23:04] <geekosaur> "you need clang" is one of ghc's typically oh-so-helpful suggestions :)
[23:24:09] <geekosaur> I guess this in part because the assembly shown pretty clearly expects ; to be a comment character, which iirc it is on x86
[23:27:33] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 252 seconds)
[23:27:51] *** Joins: alx741 (~alx741@157.100.93.160)
[23:30:38] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[23:30:47] <sm> indeed.. I believe homebrew's haskell binaries switched to arm binaries semi recently. `brew install cabal-install` got me an arm cabal binary, which fixed it
[23:35:16] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 268 seconds)
[23:40:21] *** Joins: juhp (~juhp@128.106.188.82)
[23:40:48] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[23:42:00] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:45:59] *** Quits: mcglk (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[23:48:00] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[23:49:07] *** Joins: mcglk (~mcglk@131.191.49.120)
[23:50:16] *** Joins: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb)
[23:56:52] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[23:57:41] *** Joins: deadmarshal (~deadmarsh@95.38.114.19)
[23:59:01] *** Joins: alx741 (~alx741@181.199.42.79)
