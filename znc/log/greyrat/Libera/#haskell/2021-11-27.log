[00:00:09] <dminuoso> It seems too orthogonal
[00:01:00] <janus> but with language extensions, it also doesn't seem super straightforward to figure out if it is enabled or not
[00:01:14] <dminuoso> If I dont see RecordWildCards, it's not being used?
[00:01:35] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Ping timeout: 265 seconds)
[00:01:42] <hololeap> [itchyjunk]: nice! that's exactly how I did it :)
[00:01:43] *** wagle_ is now known as wagle
[00:01:55] <janus> well you have to look in the compiler flags, the cabal files, the package.yaml, however it works in nix, and the top of the file
[00:01:58] <hololeap> well, not quite, because I didn't reverse it
[00:02:17] <hololeap> but the layout is exactly the same
[00:02:51] *** Quits: hiruji` (~hiruji@2606:6080:1001:10:3c5b:63ff:df18:8486) (Ping timeout: 245 seconds)
[00:03:21] <dminuoso> janus: Id have to think about it for a while
[00:03:33] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6057:883c:398d:9dbd)
[00:04:04] <dminuoso> It doesn't come across as evidently wrong, but it doesn't feel right. If you ever propose this in a GHC issue or on the mailing list, let me know.
[00:04:13] <dminuoso> I'll definitely spend some thought on it
[00:04:25] * dminuoso has to go take care of some personal business now
[00:04:29] *** Joins: hiruji (~hiruji@user/hiruji)
[00:04:32] <monochrom> [itchyjunk]: There is not going to be any progress until you accept that h needs to be recursive on itself.
[00:04:34] <janus> dminuoso: i made this argument because i saw someone on the GHC proposals repo commenting that something didn't need to be an extension
[00:04:49] <janus> don't know which thread it was now...
[00:05:56] <hololeap> [itchyjunk]: yeah h needs to be recursive on itself
[00:06:10] <monochrom> [itchyjunk]: Err nevermind, I misread.
[00:06:46] <dsal> [itchyjunk]: Names are pretty good.  `f` is often called `dropWhile` and `g` is `takeWhile` (though each with a predicate)
[00:07:27] <dsal> Actually, I might be confused.  Lunch was good, though.
[00:07:55] <dsal> Yeah, it looks like `f` is `takeWhile`
[00:08:06] <dsal> > takeWhile (/= ' ') "some list of strings"
[00:08:08] <lambdabot>  "some"
[00:08:36] <tomsmeding> > span (/= ' ') "some list of strings"
[00:08:37] <lambdabot>  ("some"," list of strings")
[00:10:40] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[00:11:43] <dsal> I think DIYing them is a great exercise.  I also rant about long names.  But… short names can be hard, too.  Not a bad idea to encode a bit of intent into a toplevel identifier.
[00:11:50] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 268 seconds)
[00:12:29] *** Joins: hiruji (~hiruji@user/hiruji)
[00:12:37] *** Quits: hiruji (~hiruji@user/hiruji) (Remote host closed the connection)
[00:12:38] <monochrom> For the best of both worlds, use unguessable acronyms. >:)
[00:14:02] <dsal> > let gsaw = foldr (\x o -> if x == ' ' then [] else x:o) []   in gsaw "take the first word from a list of words"
[00:14:04] <lambdabot>  "take"
[00:15:12] <hololeap> [itchyjunk]: I'll just share with you what I did, although it doesn't reverse anything: http://sprunge.us/CWxlk1
[00:16:52] *** Joins: hiruji (~hiruji@user/hiruji)
[00:17:11] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[00:18:19] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[00:18:40] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[00:20:46] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 245 seconds)
[00:21:59] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[00:22:51] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[00:24:22] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:24:27] <energizer> how does operator precedence of `backtick` infix functions work?
[00:24:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[00:25:09] <[exa]> you can assign them normal priorities
[00:25:16] <monochrom> Just like all infix operators. Default to infixl 9. Can use e.g.  infixr 4 `foo` to non-default.
[00:25:23] <[exa]> by default they are something like ...yeah monochrom finished that. :D
[00:25:36] <xerox> energizer: «If no fixity declaration is given for ` op ` then it defaults to highest precedence and left associativity (see Section 4.4.2).»
[00:26:15] *** Quits: brettgilio (~brettgili@x-node.gq) (Ping timeout: 250 seconds)
[00:27:04] <hololeap> although there are other things that take higher precedence...
[00:27:28] <hololeap> namely function application and records
[00:27:36] *** Joins: xsperry (~xs@user/xsperry)
[00:28:15] <monochrom> \∩/ function application at 10, record at 11. "crank it up to 11"
[00:28:28] <energizer> ok
[00:29:16] <hololeap> I wish what is in the backticks could be an expression
[00:29:26] <yushyin> records are very metal it seems \m/
[00:29:41] <monochrom> Yeah, although then the fixity declaration business becomes untractible.
[00:29:55] <hololeap> that's fair
[00:30:00] <monochrom> infixr 4 `(.) . (.)`
[00:30:33] <hpc> ghc needs a language extension to replace `` with $()
[00:30:37] <hpc> you know, for best practice
[00:30:42] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[00:31:04] <hololeap> bwahaha
[00:31:11] <monochrom> f $(fmap) g $ x
[00:31:16] <hololeap> for nesting
[00:31:24] <monochrom> In fact, let me make it worse.
[00:31:27] <monochrom> f $(fmap) g $ (x)
[00:32:33] <tomsmeding> and then template haskell can go cry in a corner?
[00:32:38] * tomsmeding would approve
[00:33:04] <energizer> what is the issue with fixity?
[00:33:05] <boxscape_> % A {a = 3} {b = "foo"} {c = True}
[00:33:06] <yahb> boxscape_: A {a = 3, b = "foo", c = True}
[00:33:11] <boxscape_> hm I never tried chaining record updates before
[00:33:20] <energizer> for infix expressions
[00:33:23] <hpc> i like it
[00:33:41] <hpc> it's even only a little bit longer
[00:33:45] <hpc> one character per field
[00:33:52] <boxscape_> yeah
[00:34:18] <energizer> i mean what is this problem <monochrom> Yeah, although then the fixity declaration business becomes untractible.
[00:34:19] <geekosaur> energizer, you can declare a fixity for infix functions like `fmap`. declaring a fixity for an expression is kinda badly defined
[00:34:57] <hpc> downside though, having to explain to new people that (A 3) is a function and (A {a = 3}) has all the other fields left undefined
[00:35:08] <boxscape_> % 0 &foldl subtract$ [1..5] -- hololeap sometimes you can get away with combining $ and & instead of `` as an expression
[00:35:08] <yahb> boxscape_: 3
[00:35:11] <monochrom> That was hypothetical on supporting `arbitrary expression here like (.) . (.)`
[00:35:20] <xerox> O_O
[00:35:38] <boxscape_> hpc you also have to turn off -Wmissing-fields
[00:36:04] <hpc> boxscape_: only if you look at warnings :P
[00:36:15] *** Joins: jgeerds (~jgeerds@55d45b75.access.ecotel.net)
[00:36:21] <boxscape_> yeah but if you don't turn off the warning in yahb, it *only* shows you the warning :P
[00:36:24] <tomsmeding> can also technically not work if you do a type-changing record update where multiple fields share the same type (so you need to change them in parallel)
[00:36:27] <monochrom> A {a = 3} {b = "foo"} is a special case of let x = A{a=3) in x{b="foo"}
[00:37:01] <monochrom> "Clearly", both A{a=3} and x{b="foo"} are legal and have well-understood semantics.
[00:37:19] <monochrom> Now apply the cut lemma.
[00:37:34] <tomsmeding> or consider record update to be a postfix operator
[00:37:50] <tomsmeding> hey, haskell has postfix operators after all! In fact, an infinitude of them
[00:37:52] <boxscape_> I think it's not obvious that the fixity works out, i.e. A{a=3}{b="foo"} could be parsed as A({a=3}{b="foo"}). Wouldn't be very useful, but possible
[00:38:36] <monochrom> I don't have an objection to that.
[00:39:31] *** Quits: alx741 (~alx741@186.178.109.194) (Ping timeout: 245 seconds)
[00:39:57] <monochrom> (g y){b="foo"} is also OK but needs those parentheses.
[00:40:19] <hololeap> xerox: what I was referring to would be something like: [1,2,3] `zipWith (+)` [4,5,6]
[00:40:27] <hololeap> which you can't do
[00:40:30] *** Joins: alx741 (~alx741@181.196.69.248)
[00:40:37] <boxscape_> % [1,2,3] &zipWith (+)$ [4,5,6]
[00:40:37] <yahb> boxscape_: [5,7,9]
[00:40:43] <monochrom> I miss "xs `liftA2 op` ys" a lot.
[00:40:47] <hololeap> you can only put a function name in the backticks
[00:40:49] <xerox> first time I ever seen that, neat
[00:41:03] <monochrom> Ugh haha that's evil and helpful.
[00:41:14] <boxscape_> there's a hackage package that allows you to do [i|xs `op` ys|], but it's broken
[00:41:22] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:41:29] <dsal> Instead of using ``, you just have use the & and $ forms of parens.
[00:41:38] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[00:41:47] <boxscape_> (specifically for liftA2)
[00:41:52] <xerox> > [2,3] &liftA2 (*)$ [5,7]
[00:41:53] <lambdabot>  [10,14,15,21]
[00:42:26] <monochrom> xs & f & cross $ g $ ys
[00:42:52] <xerox> > [2,3] &(\x y -> (+) <$> x <*> y)$ [5,7]
[00:42:53] <lambdabot>  [7,9,8,10]
[00:43:50] <hololeap> dsal: you should start doing that at work
[00:44:14] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b) (Quit: gone to sleep. ZZZzzz…)
[00:44:42] <hpc> and then change your font so & is ( and $ is )
[00:45:06] <dsal> hololeap: I was just thinking I shouldn't do any work without that
[00:45:21] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[00:45:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:45:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:45:53] *** Joins: wroathe (~wroathe@user/wroathe)
[00:46:21] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[00:47:31] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6057:883c:398d:9dbd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:47:43] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[00:48:44] <boxscape_> Is there a hackage package that uses the GHC API to take in Haskell source code and produce template haskell? (If not I'm thinking about writing it)
[00:48:57] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[00:49:07] <boxscape_> s/template haskell/a template haskell AST
[00:49:25] <boxscape_> I know there is a package that does it for haskell-src-exts
[00:49:31] <boxscape_> but using the GHC API seems more robust
[00:49:52] <boxscape_> (that package being haskell-src-meta)
[00:50:17] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[00:50:33] <geekosaur> iirc there is not and it's hard enough to do that people use haskell-src-meta instead
[00:50:55] <geekosaur> also ghc api's ast changes too often
[00:51:19] <boxscape_> hmm but shouldn't the GHC API essentially already have the functionality to do that, since it must have that somewhere to take the string inside of [| |] and produce a template haskell AST?
[00:52:20] <dsal> I downloaded all of (the latest version of each package of) hackage today.  AMA.   Also, apparently my backups have been broken for a week, so now I'm backing them all up again.
[00:52:35] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b)
[00:53:25] <dsal> boxscape_: Isn't that Q?  It does something similar.
[00:53:38] <sm> dsal: which is the best package ?
[00:54:00] <dsal> Though I've never actually been able to use that stuff directly.  I always use to get started and then just write out myown TH stuff.
[00:54:00] <hololeap> are there any noop packages?
[00:54:17] <hololeap> like, just a .cabal file
[00:54:25] <boxscape_> dsal right basically I'm thinking I should be able to take the code that is used for Q and provide a convenient API to it
[00:54:30] <dsal> sm: Looks like hledger-1.23.tar.gz is as easy as 1,2,3.
[00:54:56] <sm> hooray ! :-)
[00:54:58] <dsal> hololeap: yeah
[00:55:07] <dsal> Well, and a Setup.hs
[00:55:21] <hololeap> lol I'm really not surprised :p
[00:55:34] <dsal> e.g., bools-0.1.1.tar.gz
[00:55:34] <sm> when is the HF going to do something about Setup.hs, eh ??
[00:55:34] <hpc> https://hackage.haskell.org/package/acme-one-0.0.2/src/
[00:55:50] <hpc> hololeap: ^
[00:55:57] <dsal> That's way more complicated than bools
[00:56:00] * sm thinks of HF as the County Council now
[00:56:13] <dsal> https://hackage.haskell.org/package/bools-0.1.1/src/
[00:56:19] <hololeap> rofl
[00:56:24] <hololeap> hpc
[00:56:31] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:56:56] <boxscape_> so acme-one is the identity element for package dependencies, interesting
[00:57:45] <dsal> The biggest package is liquidhaskell-0.8.10.7
[00:58:07] <dsal> Followed by sugarhaskell-0.1 if you prefer a solid
[00:58:07] <boxscape_> what is the package with the longest name
[00:58:27] <hpc> probably some web framework subpackage
[00:58:47] <dsal> Just kind of eyeing it, phonetic-languages-simplified-generalized-examples-array-0.13.1.0
[00:58:52] <boxscape_> nice
[00:59:43] <hololeap> lol I _knew_ it would be one by that guy
[00:59:55] <hololeap> looks like phonetic-languages-simplified-generalized-examples-common is longer
[01:00:10] <dsal> phonetic-languages-simplified-generalized-properties-array
[01:00:36] <hpc> what's the most deeply nested module name?
[01:00:44] <hpc> module A.B.C.D.etc
[01:00:52] <dsal> Oooh.  Hmm...
[01:01:04] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 260 seconds)
[01:01:23] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6057:883c:398d:9dbd)
[01:02:40] <tomsmeding> https://hackage.haskell.org/package/liquidhaskell-0.8.10.7/src/TODO.EASY.md
[01:02:46] <EvanR> sugar haskell + liquid haskell = solution?
[01:03:02] <tomsmeding> see the last todo item, doesn't sound very easy by that description
[01:03:03] <EvanR> haskell
[01:03:29] <dsal> The longest is Network.Google.Resource.Healthcare.Projects.Locations.DataSets.DicomStores.Studies.Series.Instances.Frames.RetrieveRendered
[01:03:37] <dsal> But I'm not sure that's the most deeply nested.
[01:03:40] <dsal> Just using shell hackery right now.
[01:03:44] <hololeap> O_O
[01:03:46] <hpc> jinkies
[01:04:04] <EvanR> haskell for healthcare
[01:04:14] <EvanR> the next killer app
[01:04:33] <dsal> lol
[01:04:54] <boxscape_> healthkell
[01:05:27] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e35059025bf8f5e09b5.dip0.t-ipconnect.de)
[01:05:29] <EvanR> 😱
[01:05:39] <janus> dminuoso: apropos RecordWildCards. not how Eisenberg is arguing for a new warning and a new way to have warnings in part of a module: https://github.com/ghc-proposals/ghc-proposals/pull/436
[01:05:44] <janus> *note
[01:06:20] <janus> jle`: Also apropos what we talked about
[01:07:17] <janus> I really don't like the original proposal but what Eisenberg suggests sounds fine to me. Though I mostly care about the new warning, not the selective warnings bit.
[01:07:25] <dsal> The most deeply nested outside of those Google APIs is Network.API.Telegram.Bot.Object.Update.Message.Content.Poll.Option
[01:07:44] <dsal> And if we're looking for something that's not a dumb REST API, I think we have Data.Number.ER.RnToRm.UnitDom.Base.Tests.Properties.Ring
[01:08:45] <hololeap> that sounds like a Henning Thielemann package
[01:09:24] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:09:43] <sm> boxscape_: lol instant classic project name there
[01:09:54] <boxscape_> yeah
[01:10:19] <sm> you should register that, I'd like to see it built :)
[01:10:30] <boxscape_> I don't know what it would do though :/
[01:10:44] <tomsmeding> specifically for people with a lisp?
[01:10:48] <janus> what about crowd-sourcing prostate cancer survival duration
[01:11:00] <boxscape_> from healthkell to healskell in just 3 weeks
[01:11:10] <janus> people upload their test results, system correlates with other people, tell you have long you have to live and whether your doctor is a crank
[01:11:46] <janus> if people stop logging on it means they died
[01:12:08] <tomsmeding> dsal: is sugarhaskell also the package with the most non-haskell files
[01:12:13] <boxscape_> I foresee false positives
[01:12:19] <hololeap> I don't think it has to do anything, computers + "health" = $$$
[01:12:36] <boxscape_> I'll just copy acme-one then
[01:13:02] *** Quits: jumper149 (~jumper149@static.6.71.203.116.clients.your-server.de) (Quit: WeeChat 3.3)
[01:13:16] <tomsmeding> boxscape_: I'd take acme-zero, at least then you're sure it doesn't do anything
[01:13:24] <dsal> tomsmeding: I've not actually looked inside any of these, but like... it's a bunch of java?
[01:13:43] <dsal> Things I didn't expect to find in hackage:  compiled class files in a junit directory.
[01:14:02] <dsal> It was packaged on my birthday, though, so there's that.
[01:15:00] <tomsmeding> dsal: yeah I look sugarhaskell up on hackage, saw just one module, was puzzled, clicked [browse], saw META-INF, jar files, $class files, and was even more puzzled
[01:15:41] <tomsmeding> also acme-zero has two versions
[01:15:51] <tomsmeding> first version was not good enough
[01:16:15] <dsal> Hard to get it right on the first upload.
[01:16:22] * hololeap makes a package that comes bundled with a debian ISO to run an executable
[01:16:59] <dsal> I worked at a place where a contractor basically did that.
[01:17:02] *** Quits: slack7679 (~slack1256@181.42.49.169) (Ping timeout: 240 seconds)
[01:17:18] <Rembane_> Sounds like Docker but more. 
[01:17:22] <dsal> Checked in an ISO for the thing you needed to run his code.  It very much a "Sir, this is a Wendy's" moment.
[01:18:08] <Rembane_> Putting it in code repository is... yeah...
[01:18:50] <janus> how would you store your smalltalk images? github seems like a good option
[01:19:11] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:21:41] <dsal> Smalltalk seems pretty neat for "my computer" but I never really figured out how to usefully move code in and out.
[01:21:55] <tomsmeding> dsal: in the same vein, I guess: how many different file extensions can you find
[01:22:03] <sm> janus: squeak/pharo have some tools for that
[01:22:47] <janus> sm: epicea? that looks like good old `.changes`. i think people use git now somehow?
[01:23:02] <sm> yes, there are tools for it
[01:23:43] <sm> also of course many native smalltalk alternatives, monticello and envy are two IIRC
[01:24:38] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:75c5:c6ed:c91:17fe) (Read error: Connection reset by peer)
[01:24:56] <sm> https://github.com/hpi-swa/Squot seems to be one
[01:25:30] <janus> oh my , that certainly looks exotic! thanks
[01:25:41] <sm> wow you nerdsniped me there. We could use more smalltalk in here, but I suppose it is off topic.. np
[01:25:54] <EvanR> more LambdaMOO obviously
[01:26:47] *** Joins: xkuru (~xkuru@user/xkuru)
[01:27:04] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6057:883c:398d:9dbd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:27:25] <dsal> λ> exts = Set.fromList  (takeExtension <$> files)
[01:27:25] <dsal> λ> length exts
[01:27:25] <dsal> 1301
[01:27:38] <tomsmeding> that's a lot
[01:28:12] <dsal> One of them is ""
[01:28:13] <tomsmeding> wanted to say, anything interesting, but that's quite the large collection to go through
[01:28:15] <dsal> So just 1300
[01:28:15] <boxscape_> what is `length files`?
[01:28:24] <dsal> 381164
[01:28:27] <boxscape_> I see
[01:28:55] <tomsmeding> in what position in the frequency ranking is .class
[01:29:02] <dsal> No obvious bitcoin wallets.
[01:29:53] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[01:31:40] <dsal> class is 22164.  I need to flip this map around or something to get distributions.
[01:31:53] <boxscape_> just write `flip files`
[01:34:00] <tomsmeding> dsal: ordering = sortBy (comparing snd) $ map ((,) <$> head <*> length) $ groupBy ((==) `on` fst) $ sortBy (comparing fst) $ map (\f -> (takeExtension f, f)) files
[01:34:15] <tomsmeding> imports Data.Ord, Data.Function, Data.List
[01:34:32] <tomsmeding> oh perhaps a reverse in front
[01:34:47] <dsal> This would be easier if my ghci worked
[01:35:03] <tomsmeding> and the resulting list has a filename component but that's just the first occurrence, which is uninteresting
[01:35:14] <tomsmeding> dsal: many things are easier if ghci works
[01:36:00] <tomsmeding> replace the 'head' with 'fst . head' in order to get rid of the filename
[01:36:18] <zzz> is Data.Set.fromList more efficient than Data.Foldable.fromList?
[01:36:24] <hololeap> tomsmeding: what about walking into Mordor. is that easier?
[01:36:26] <dsal> The thing I was doing gave me the top 10:  [(193776,".hs"),(23899,""),(22164,".class"),(17742,".cabal"),(12902,".md"),(7919,".h"),(6153,".c"),(5231,".yaml"),(5082,".txt"),(4382,".svg")]
[01:36:51] <tomsmeding> zzz: Data.Foldable doesn't have a fromList?
[01:36:55] <dsal> "" is at least partially directories... I got rid of the ones that didn't end in /
[01:37:22] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[01:37:49] <tomsmeding> hololeap: probably. At least you have an excuse if someone asks you why you haven't actually walked into Mordor yet -- laziness bit you
[01:38:49] <tomsmeding> dsal: Are those numbers the first occurrence in a list of all files sorted by extension ordered on extension prevalence?
[01:38:54] <tomsmeding> that's an... interesting metric
[01:39:19] <tomsmeding> oh they are occurrence counts
[01:39:23] <tomsmeding> that makes so much more sense
[01:39:51] * tomsmeding somehow thought that was the bottom 10, and tried to rationalise the numbers from there
[01:40:53] <dsal> I started with m = Map.fromListWith (<>) [(takeExtension f, Sum 1) | f <- files]
[01:40:57] <dsal> And then just flipped it.
[01:41:03] <dsal> The files list is the output of tar tf 
[01:41:33] <tomsmeding> that's quite a bit neater than my monster of an expression
[01:41:51] <dsal> Anything I try to edit in GHCI turns into garbage if I do anything other than append.
[01:41:58] <tomsmeding> I guess I re-implemented Map.fromListWith (<>)
[01:42:08] <dsal> Yeah, I and I reimplemented +
[01:42:13] <tomsmeding> :D
[01:42:22] <dsal> I had grander ideas when I started.
[01:42:35] <EvanR> rate my format style https://paste.tomsmeding.com/ab9Tfx0x
[01:42:40] <dsal> By the time I got to `Sum 1` there was no turning back.
[01:42:50] <EvanR> just kidding, give me a tip on how to make it look like not shit
[01:43:13] <dsal> lonely comma
[01:43:30] <tomsmeding> EvanR: put the definitions in a where block, use RecordWildCards and write defaultMini {..}
[01:43:44] <tomsmeding> except that uses RecordWildCards which is bad
[01:44:15] <geekosaur> didnt we determine binding {..} doesn't work anyway?
[01:44:17] <dsal> No, apparently RecordWildCards is good, but where is bad.  You should do the same thing in let first and then just {..} it all away.
[01:44:33] <geekosaur> I should say `binding {..}`
[01:45:06] <dsal> The Standard™ on this project is      `let someTypeNameField1 = 1; someTypeNameField2 = 2 in SomeType{..}`
[01:46:47] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[01:47:11] <tomsmeding> EvanR: honestly I'd just write https://paste.tomsmeding.com/ynvT5pJY
[01:48:50] <EvanR> alright
[01:49:07] <EvanR> i had a where clause then was mad that I had to come up with alternate names
[01:49:32] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[01:49:57] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51)
[01:50:21] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[01:50:43] <boxscape_> (I imagine it's apparent from the conversation so far but to be clear, you don't need alternate names for a where clause https://paste.tomsmeding.com/4Zf5CJVJ )
[01:51:05] <EvanR> ok I didn't grok the wildcards suggestion earlier
[01:51:34] <tomsmeding> boxscape_: doesn't that give shadowing warnings?
[01:51:40] <tomsmeding> though my suggestion did the same thing
[01:52:15] <boxscape_> erm don't you not get shadowing warnings for fields if NamedFieldPuns or RecordWildCards is enabled? I could be wrong
[01:52:22] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:52:29] <EvanR> ok this is NamedFieldPuns
[01:52:39] <boxscape_> yeah
[01:52:51] <EvanR> it would save me from needing a lambdacase, but ... the puns are weird
[01:53:08] <EvanR> but maybe its cool
[01:53:17] * tomsmeding doesn't like puns
[01:53:26] <tomsmeding> well, not in programming languages
[01:53:39] <dsal> I don't understand this word "pun"
[01:53:43] <monochrom> You will hate this:
[01:53:53] <monochrom> @quote monochrom faster.than
[01:53:53] <lambdabot> monochrom says: einstein's theory implies that haskell cannot be faster than c
[01:53:55] <tomsmeding> dsal: shadowing
[01:54:06] <dsal> But why "pun" ?
[01:54:15] <tomsmeding> monochrom: that's not a pun in a programming language, but I hate it nevertheless
[01:54:25] <geekosaur> because the same name is being used in two ways
[01:54:28] <EvanR> pun, the same words means different things
[01:54:31] <xerox> From Middle English ponnen, ponen, punen, from Old English punian, pūnian (“to pound, beat, bray, bruise, crush, grind”), from Proto-Germanic *punōną (“to break to pieces, pulverize”). See pound. As a kind of word play, from the notion of "beating" the words into place.
[01:54:32] <dsal> Ooh.  I get it.
[01:54:52] <tomsmeding> ooh ą 
[01:55:11] <Rembane_> It's like hack inverse 
[01:55:14] <monochrom> I thought typographers beat the words into place.
[01:55:22] <monochrom> or typesetters
[01:55:33] <EvanR> I was trying to wipe the dirt off my monitor near tomsmeding's ą
[01:55:41] <monochrom> hahaha
[01:55:43] * dsal too
[01:56:31] <EvanR> didn't see it in the xerox output
[01:57:59] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:58:14] <monochrom> I think I see what you did there
[01:58:32] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6057:883c:398d:9dbd)
[02:00:46] *** Quits: michalz (~michalz@185.246.204.58) (Remote host closed the connection)
[02:02:53] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[02:03:32] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Ping timeout: 240 seconds)
[02:03:45] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[02:04:47] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[02:04:49] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[02:06:10] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[02:07:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:08:05] <sm> successful hack: to get around my distaste for changelog editing, I made a tool that accepts an edit for just the oldest unedited pending item. Strangely, it works. Toil averted!
[02:08:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:08:12] *** Quits: kuribas (~user@ptr-25vy0i8ep4e11jhvxvb.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[02:08:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51) (Remote host closed the connection)
[02:09:23] <dsal> I wrote a tool while back that would generate changelogs from git tags with fancy little charts and stuff saying who contributed to each release.
[02:09:31] <dsal> So I just needed to write stuff in my tags.
[02:09:50] <dsal> ChangeLog files are weird to me because it's another place that you have to write the same stuff, but inside the thing that's taking the changes.
[02:10:17] <[itchyjunk]> hmm
[02:10:21] <arahael> dsal: To me, changelogs are more stakeholder focused.
[02:10:56] <arahael> (Which matters when your stakeholders aren't developers)
[02:11:11] <dsal> Sure, but I can put that same information in my tag.
[02:11:15] <dsal> And then just make the changelog on the fly.
[02:11:20] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[02:11:27] <dsal> Except you can't do that when the changelog is checked in.  So you have to copy and paste or something.
[02:12:12] <sm> dsal: nice. I generate them from commit messages (but they still need editing, hence another tool)
[02:12:28] *** Quits: gehmehgeh_ (~user@user/gehmehgeh) (Quit: Leaving)
[02:12:46] <EvanR> the changelog changelog
[02:13:19] <dsal> Apparently I wrote this in python:  https://github.com/dustin/bindir/blob/master/git-htmlchangelog
[02:13:21] <arahael> dsal: Yeah, that wors as well.
[02:13:24] <arahael> *works as well.
[02:13:52] <dsal> And it doesn't work because you need things that probably don't exist anymore.
[02:14:28] <dsal> I have no idea how to deal with python packages.  Guess I'll just not do that.
[02:15:12] <dsal> Here's an old example of what that would do:  http://dustin.github.io/java-memcached-client/changelog.html
[02:16:57] *** Joins: namkeleser (~namkelese@101.175.102.188)
[02:17:21] <EvanR> dang... your boss can easily tell who to fire, nice
[02:17:26] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[02:17:49] <EvanR> "it has come to my attention that you are not a very big piece of the pie"
[02:17:58] *** Quits: burnsidesLlama (~burnsides@dhcp168-025.wadham.ox.ac.uk) (Remote host closed the connection)
[02:19:02] <dsal> I had this cool realtime view of all of our repositories that did something like that.  It was pretty neat.  I made the most hideous conflation of a pie chart and a bar chart with a stream chart of changes over time.
[02:20:30] <sm> ooh, pretty
[02:20:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:21:00] <sm> what are the pie charts.. number of lines changed ?
[02:21:17] <dsal> Just commits
[02:21:23] <dsal> shortlog in pacman form
[02:22:51] <dsal> Here's a tiny screenshot of the "realtime" thing I'd built a while back: http://dustin.sallings.org/images/gerrit-small.png
[02:23:16] <dsal> It was fun to watch.
[02:23:38] <dsal> That was for our code review system.  Could see all the people doing all the things
[02:24:44] <dsal> Wish that were still running and/or I had a readable screenshot.  The weird chart in the bottom right was a combination of people, projects, activity levels, and something else.
[02:26:43] <tabemann> I hate project management tools
[02:27:26] <dsal> Oh, I do.  It was project specific, showing how many different people were participating on it and how many changes went in to each project. https://usercontent.irccloud-cdn.com/file/0Jbdncx5/gerrit.png
[02:27:29] *** Joins: slice (~slice@user/slice)
[02:27:54] <[itchyjunk]> where { (x,xs) = h s} makes sense right? h s returns a tuple (a,b)
[02:27:55] <dsal> I really like *implicit* project management tools.  I'm writing code.  Doing good commits, etc...  Let everything observe that and communicate stuff instead of making me do extra work to tell you again what I've done.
[02:28:25] <dsal> [itchyjunk]: Ask the compiler if it makes sense.
[02:28:50] <dsal> (but you probably don't need {} unless you're trying to shove a bunch of stuff onto a line)
[02:29:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[02:29:27] <arahael> Hmm, a bit of newbie help...  I've got this error: Data Constructor not in scope: Discover :: Amazonka.Auth.Credentials
[02:29:33] <arahael> How do I find out where that is, so that I can import it?
[02:29:49] <monochrom> [itchyjunk]: Yes. It is very useful.
[02:29:52] <arahael> I've tried searching hoogle, but I think Amazonka 2.0 isn't in stackage yet, so it isn't in hoogle.
[02:30:54] <dsal> arahael: I believe it's Network.AWS
[02:31:20] <arahael> dsal: Curious - I happen to know it's in Amazonka, but how do we find that out?
[02:31:23] <dsal> Oh yeah, it's Credentials, exported from Network.AWS
[02:31:45] <geekosaur> make sure you didn't do something like import Network.AWS (Credentials)
[02:31:54] <sm> dsal: awesome
[02:31:56] <geekosaur> without the trailing (..) to get its constructors
[02:32:08] <arahael> I mean, "import Amazonka" works.  I guess Amazonka might be doing a re-export.
[02:32:22] <dsal> I wasn't even aware of Amazonka as a module.
[02:32:44] <arahael> It's not a re-export.
[02:32:53] <arahael> https://github.com/brendanhay/amazonka/blob/main/lib/amazonka/src/Amazonka/Auth.hs#L258
[02:33:19] <arahael> I guess the method I should use when looking for "Foo.Bar.Baz" is to do a github search instead for "Foo.Bar"?
[02:33:23] <dsal> Amazonka has a lot of rexports.
[02:33:33] <arahael> dsal: That's the actual type.
[02:33:41] <dsal> Sure, but that's not how I got it.
[02:34:06] <dsal> Unless… did they move everything since the last 2.0 I tried?
[02:35:05] *** Joins: MironZ (~MironZ@nat-infra.ehlab.uk)
[02:35:09] <dsal> Amazonka exports Credentials it imports from Amazonka.Auth
[02:35:51] <arahael> So I guess Network.AWS must be re-exporting the Amazonka one.
[02:36:17] <geekosaur> mm, that error says it's coming from Amazonka.Auth
[02:36:27] <geekosaur> how are you importing Amazonka?
[02:36:43] *** Joins: deadmarshal (~deadmarsh@95.38.228.146)
[02:36:55] <arahael> "import Amazonka".
[02:37:05] <geekosaur> no list? that seems odd then
[02:37:06] <arahael> Or rather, I am now. :)
[02:37:13] <geekosaur> oh
[02:37:25] <arahael> geekosaur: The question was more: "How do I know that I need to do an Import Amazonka"?
[02:37:45] <arahael> geekosaur: As opposed to "Import Amazonka.Bazooka".
[02:37:45] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 250 seconds)
[02:37:58] <arahael> Or even as dsal thought, "import Network.AWS".
[02:38:00] <geekosaur> I would look at the type it listed and start drilling down
[02:38:09] <arahael> geekosaur: Yeah, how would you find that type? :D
[02:38:10] <geekosaur> Amazonka, then Amazonka.Auth
[02:38:17] <geekosaur> it's in the error message
[02:38:27] <geekosaur> "Data Constructor not in scope: Discover :: Amazonka.Auth.Credentials"
[02:38:32] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 240 seconds)
[02:39:05] <arahael> geekosaur: Right, so I've since suggested that maybe the method I need is to chop that last term off, and search for "Amazonka.Auth".
[02:39:22] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[02:39:23] <arahael> (Otherwise github will yield zero results)
[02:39:26] <geekosaur> I'd start from thre other end though, specifically to check for reexports
[02:39:39] <arahael> geekosaur: You'd search for "Amazonka"?
[02:39:43] <geekosaur> yes
[02:39:50] <arahael> That's a lot of github results.
[02:39:57] <geekosaur> on the assumption that it'd be reexporting the right module already
[02:40:14] <geekosaur> also I would not simply search github, I would search the source since I'm already targeted
[02:40:34] <arahael> Ah, "try it and see", import Amazonka, recomiple, if it fails, try "import Amazonka.Auth"?
[02:40:41] <geekosaur> you presumably know where you got amazonka 2.0 from so look in Amazonka.hs then Amazonka/Auth.hs
[02:40:46] *** Quits: deadmarshal (~deadmarsh@95.38.228.146) (Ping timeout: 245 seconds)
[02:41:00] <arahael> Ah, I see, so actually read the source.
[02:41:07] <dsal> I think there are good uses for re-exports and bad uses.  Just sticking everything everywhere so you can import whatever you want and it'll probably work *seems* kind of bad.
[02:41:23] <dsal> arahael: heh, that's what I was just doing.  Reading source.
[02:41:31] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[02:41:35] <arahael> dsal: Now, for the next example... Variable not in scope: getRegion :: ASetter Env a3 a4 Region
[02:41:50] <geekosaur> it seems weird to do a full github search when you have the source code already
[02:41:51] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[02:41:53] <dsal> This environment parser reexports stuff like <=< and optional, so all this code was using Env.<=< and Env.optional which I thought were somehow special.
[02:42:07] <dsal> arahael: welcome to 2.0
[02:42:12] <arahael> dsal: :)
[02:42:24] <arahael> geekosaur: Well, no, I constrain it to the specific repo, of course. :)
[02:42:39] <geekosaur> even so.
[02:43:11] <geekosaur> the error tells you exactly where to start searching, so start searching there instead of poking the whole project
[02:43:21] <dsal> arahael: newEnv Discover <&> set (field @"envRegion") r
[02:44:57] *** Quits: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:45:02] <arahael> dsal: I'm trying to figure out how I would find out that particular incantation, but thanks for that, that also helps. :D
[02:45:40] <dsal> It's generic lens now.  So you have to like, know the name of the field.
[02:45:45] <dsal> The compiler will tell you when you're wrong.
[02:46:02] <dsal> So just keep guessing strings until you're right, or find the object and see what fields exist on it and try to guess based on those.
[02:46:04] * [itchyjunk] riphair
[02:46:55] <arahael> dsal: I've loaded this into ghci: newEnv Discover <&> set _ NorthVirginia -- That does get me the ASetter Env b a0 Region ... Oh, wait, GTG - back in a moment...
[02:46:57] <arahael> Visitor.
[02:48:19] <[itchyjunk]> omg, i knew i had the signature wrong
[02:48:27] <[itchyjunk]> i removed the signature line and it compiled
[02:48:56] <geekosaur> now ask it for the correct signature
[02:49:01] <geekosaur> foo :: _
[02:49:16] <[itchyjunk]> and now that i :t myFunc, *facepalm*
[02:49:46] <dsal> arahael: Yeah, the setter is (field @"[field name]") -- I don't think you're going to get a lens hole working there, though I think there might be another module with more explicit things.
[02:50:06] *** Joins: burnsidesLlama (~burnsides@dhcp168-025.wadham.ox.ac.uk)
[02:50:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:52:15] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:52:29] <[itchyjunk]> I have a convoluted question about this : https://bpa.st/6Q4Q
[02:52:47] <[itchyjunk]> my function `i` does what i want but i have to manually compose it with h
[02:52:54] <[itchyjunk]> is `j` the best solution to it?
[02:53:03] <[itchyjunk]> j "this is a test"
[02:53:04] <[itchyjunk]> ["this","is","a","test"]
[02:53:09] <[itchyjunk]> j does what i was intending it to do
[02:54:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[02:55:01] *** Quits: namkeleser (~namkelese@101.175.102.188) (Quit: Client closed)
[02:55:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[02:56:51] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:59:03] <[exa]> [itchyjunk]: so `f` and `g` are take/drop word, h is "one word and rest", i iterates that, right?
[02:59:17] *** Joins: namkeleser (~namkelese@101.175.102.188)
[02:59:30] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[03:00:28] <[itchyjunk]> yes i think so
[03:00:36] <[exa]> [itchyjunk]: anyway, normally I'd go with `h s = f s:h (g s)`, generating a list of words, which kinda captures the recursion you have there right in the data
[03:00:45] <[itchyjunk]> f gets the first word, g gets everything but the first word
[03:00:55] *** Joins: hololeap (~hololeap@user/hololeap)
[03:01:12] <[itchyjunk]> hmm
[03:01:44] <[exa]> you might notice that you will have either [] or (head:rest) instead of ([],[]) and (head,rest), which may be a bit more convenient
[03:01:54] *** Quits: max22- (~maxime@2a01cb0883359800b686e733ae8fbdbc.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:01:56] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[03:02:01] *** Quits: AlexNoo (~AlexNoo@178.34.162.8) (Ping timeout: 245 seconds)
[03:02:01] *** Quits: Alex_test (~al_test@178.34.162.8) (Ping timeout: 245 seconds)
[03:02:08] <[exa]> e.g. you can distinguish between empty word on beginning vs no word on beginning
[03:02:26] *** Quits: AlexZenon (~alzenon@178.34.162.8) (Ping timeout: 245 seconds)
[03:02:28] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[03:03:03] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[03:04:29] *** Joins: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl)
[03:04:30] *** Quits: cosimone` (~user@93-47-228-243.ip115.fastwebnet.it) (Ping timeout: 268 seconds)
[03:04:55] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[03:05:15] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[03:07:39] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[03:07:39] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:08:21] <[itchyjunk]> hmm
[03:08:26] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[03:08:52] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51)
[03:10:53] *** Joins: emf (~emf@2620:10d:c090:400::5:acc4)
[03:12:21] *** Quits: emf (~emf@2620:10d:c090:400::5:acc4) (Client Quit)
[03:13:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51) (Ping timeout: 260 seconds)
[03:15:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:15:20] <[itchyjunk]> I forgot how to reverse list. the one i am writing compiles but gives me a "Non exhaustive pattern" 
[03:15:21] <[itchyjunk]> https://bpa.st/SEZA
[03:15:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:15:36] <[itchyjunk]> i went through an example [1, 2, 3] and i don't see where it goes wrong
[03:16:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:16:39] <[itchyjunk]> last [1] = 1 and init [1] = [] so reverseList (init [1]) = reverseList [] = []
[03:16:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:18:19] <arahael> dsal: Back.  Ok, so basically once I see "ASetter", I should assume "lens", but then how do I know what teh field name should be?
[03:18:47] <arahael> (Also: Why the @string?)
[03:19:49] <arahael> dsal: Hmm, using that syntax it says it's illegal, this is using new extensions I'm not familiar with!
[03:19:58] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:21:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[03:21:51] <dsal> arahael: That's generic lens.
[03:22:06] <dsal> DataKinds and TypeApplications
[03:22:29] <arahael> dsal: I've already got Control.Lens imported.  Ah, ok, I'll just enable those extensions then.
[03:23:16] <arahael> dsal: Somehow feel that I didn't need those extensions before with simple lens stuff.
[03:23:24] <dsal> No, this is generic lens.
[03:23:36] <dsal> the generic-lens package
[03:23:43] <dsal> @hackage generic-lens
[03:23:43] <lambdabot> https://hackage.haskell.org/package/generic-lens
[03:23:57] <arahael> Oh!
[03:24:01] *** Quits: namkeleser (~namkelese@101.175.102.188) (Quit: Client closed)
[03:24:04] <dsal> field is import           Data.Generics.Product        (field)
[03:24:39] <dsal> Instead of TH generating everything you might possibly do at compile time, we just add generics and sort it out when you need it.
[03:25:05] <arahael> Nice.
[03:25:50] <dsal> [itchyjunk]: I think you have a typo in that code you pasted.
[03:25:59] <dsal> Or something... it shouldn't compile
[03:26:28] <arahael> Ok, seems I need to sort out the versions for generic-lens, will do that later in the arvo.
[03:26:37] <arahael> dsal: Thanks for your guidance :)
[03:26:48] <dsal> Yeah, I went through all this on a couple of projects.  :)
[03:27:03] <dsal> Glad that time was more useful than just me playing around.
[03:27:42] *** Quits: MrNobody_0000000 (~MrNobody@user/mrnobody-0000000/x-9129771) (Ping timeout: 276 seconds)
[03:27:42] <arahael> Heh.  This has taught me a LOT about the haskell package ecosystem, most of it seems quite reasonable, particularly considering 9.2.1 isn't even a "recommended version" yet.
[03:28:14] <dsal> This is me converting my s3up project to amazonka2: import           Data.Generics.Product        (field)
[03:28:16] <dsal> damnit
[03:28:22] <dsal> https://github.com/dustin/s3up/commit/796f65cc2cc6bb92b1127f35d122972908b7f888
[03:29:44] <arahael> Nice.  I'm trying to abandon stackage, these days, but that looks helpful!  Somehow generic-lens doesn't build for me, but it's probably due to some package conflict or  yet another arch-specific bug.
[03:30:12] <dsal> I'm using stack on nix on M1.  If it builds for me, it should build for anyone.
[03:30:36] <arahael> Which llvm version?
[03:30:53] <dsal> no clue.  heh
[03:31:00] <arahael> I'm using clang --version: Apple clang version 13.0.0 (clang-1300.0.29.3)
[03:31:35] <dsal> something between stack and nix figure that out for me.
[03:31:44] <[itchyjunk]> oh i see the typo
[03:31:47] <[itchyjunk]> it also compiles
[03:31:49] <[itchyjunk]> wth?
[03:32:03] <dsal> I get all these cool errors, though:   sqlite-simple        > 'apple-a7' is not a recognized processor for this target (ignoring processor)
[03:32:08] <arahael> It's out of stack's hands.  Might be nix, but I thought nix on macos defers to the system xcode because of apple's shenagins.
[03:32:08] <[itchyjunk]> it doesnt compile after i fix the typo
[03:32:10] <[itchyjunk]> lmfao
[03:32:32] <dsal> arahael: It might.  *shrug*  I just bang on keyboard until it stops fighting back.
[03:33:19] <arahael> dsal: I'd be very interested to find out, because whilst i do actually have nix installed, I'm generally currently avoiding nix as I find it's sometimes more trouble than it's worth imho in my case.  (Especially as most of the time, I'm actually doing iOS dev).
[03:33:29] <arahael> dsal: And that iOS dev means I tend to be always on the very very latest. :(
[03:33:56] <dsal> I don't think I'm behind on anything in particular.  I like my edges bloody.
[03:34:00] <arahael> dsal: If you can enter a nix-shell for that project, then type 'clang --version', that would be illuminating.
[03:34:48] <arahael> dsal: The other problem with nix is that it does not implement --pure on macos. :(
[03:35:09] <arahael> (So it's difficult to tell if your nix build really is correct or if you're still missing something. :( )
[03:35:11] <dsal> I don't even use nix shells... stack manages that.  I actually have no clue how all those pieces work.
[03:35:16] <arahael> Ah.
[03:35:31] <arahael> Yeah, for me...  I started stripping out stack when stack basically fell apart for me.
[03:36:00] <arahael> stack and nix seems to have a fairly convoluted history for me, especially on nixos.
[03:36:08] <dsal> I never managed to get a project migrated away from stack because every time I try something annoying gets in the way.  I never remember what, so I try again thinking it's going to be easy, but then I don't manage to finish.
[03:36:31] <dsal> Sure, stack and nix and macos should be the hardest thing to get working, but I am trapped in here.
[03:39:47] <arahael> It does feel that way. :(
[03:44:21] <[itchyjunk]> this does what i want other than adding an extra space at the end :(
[03:44:22] <[itchyjunk]> https://bpa.st/WFKA
[03:44:59] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[03:45:04] <dsal> @src intercalate
[03:45:04] <lambdabot> intercalate xs xss = concat (intersperse xs xss)
[03:45:19] <dsal> There, now you're smarter.  heh
[03:45:22] <dsal> @src intersperse
[03:45:22] <lambdabot> intersperse _   []     = []
[03:45:22] <lambdabot> intersperse _   [x]    = [x]
[03:45:22] <lambdabot> intersperse sep (x:xs) = x : sep : intersperse sep xs
[03:45:31] <[itchyjunk]> i knew concat was a keyword, i tried using that and got in trouble
[03:45:31] <dsal> Yeah, that makes sense.
[03:45:37] <dsal> It's not a keyword.
[03:45:44] <[itchyjunk]> hmm
[03:45:48] <dsal> :t concat
[03:45:49] <lambdabot> Foldable t => t [a] -> [a]
[03:45:59] <dsal> It's just a function.  A less generic fold.
[03:46:00] <dsal> :t fold
[03:46:01] <lambdabot> (Foldable t, Monoid m) => t m -> m
[03:46:17] <[itchyjunk]> oh yeah i guess keyword is the wrong term
[03:46:20] <[itchyjunk]> reverved word?
[03:46:24] <dsal> nope
[03:46:27] <dsal> It's just a function
[03:46:31] <dsal> from a library
[03:46:35] <[itchyjunk]> what do you call it when a string is already taken?
[03:46:42] <geekosaur> just a convenient predefined function
[03:46:46] <[itchyjunk]> "concat" is already taken
[03:46:49] <dsal> a namespace collision?
[03:46:50] <[itchyjunk]> just like "if"
[03:46:55] <[itchyjunk]> hmmm
[03:46:55] <dsal> if is a reserved word
[03:47:02] <geekosaur> if is a keyword. concat is a predefined function
[03:47:26] <[itchyjunk]> i didn't realize reserved word and namespace collision weren't more or less the same.
[03:47:32] <geekosaur> you can redefine it in your code if you don't want the original (or are okay with saying Prelude.concat)
[03:47:36] <[itchyjunk]> i guess reserved word is stronger condition
[03:47:37] <dsal> > let concat x = "with cat" in concat ["this", "list", "of", "things"]
[03:47:39] <lambdabot>  "with cat"
[03:48:14] <geekosaur> you can't redefine "if" in the same way
[03:48:16] <[itchyjunk]> ah i can override inbuilt (?) functions
[03:48:21] <[itchyjunk]> right, makes sense
[03:48:34] <dsal> It's just a library function.  Much less special than you think.  :)
[03:48:42] <[itchyjunk]> i think i'll count my solution as valid (even though it has that extra " " at the end)
[03:48:47] <dsal> Prelude dumps a bunch of those into your namespace by default.
[03:48:51] <geekosaur> Haskell provides a bunch of predefined functions in the Prelude
[03:48:55] <dsal> Did you see what intersperse does?
[03:49:20] <[itchyjunk]> i didn't understand it :s
[03:49:43] <dsal> Well, the important part is that it just has an extra special case which you're missing.
[03:50:16] <dsal> > intercalate "," (words "insert commas here")
[03:50:17] <lambdabot>  "insert,commas,here"
[03:50:39] <dsal> It avoids the one on the end by special case.
[03:51:21] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[03:51:29] <[itchyjunk]> ah
[03:53:38] <[itchyjunk]> i too inspiration from it and added a special case
[03:53:45] <[itchyjunk]> concatation (x:[]) = x
[03:53:56] <[itchyjunk]> hurrah! \o/
[03:53:58] <dsal> (x:[])  == [x]
[03:54:02] *** Quits: dpratt__ (sid193493@helmsley.irccloud.com) (Ping timeout: 240 seconds)
[03:54:02] *** Quits: rune (sid21167@ilkley.irccloud.com) (Ping timeout: 240 seconds)
[03:54:30] *** zzz is now known as zero
[03:54:32] *** Quits: kaizen (sid501599@helmsley.irccloud.com) (Ping timeout: 240 seconds)
[03:54:32] *** Quits: iphy (sid67735@lymington.irccloud.com) (Ping timeout: 240 seconds)
[03:54:32] *** Quits: degraafk (sid71464@lymington.irccloud.com) (Ping timeout: 240 seconds)
[03:55:02] *** Quits: NemesisD (sid24071@lymington.irccloud.com) (Ping timeout: 265 seconds)
[03:55:18] <[itchyjunk]> hmm
[03:55:52] <dsal> > (x:[]) 
[03:55:53] <lambdabot>  [x]
[03:55:57] <[itchyjunk]> right, its saying if the list only has 1 element left, don't add " " to it
[03:56:01] <dsal> lambdabot agrees.
[03:56:12] <[itchyjunk]> i agree too, i think
[03:56:32] *** Quits: conjunctive (sid433686@helmsley.irccloud.com) (Ping timeout: 240 seconds)
[03:56:32] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 240 seconds)
[03:56:32] *** Quits: _0x47_ (sid508683@tinside.irccloud.com) (Ping timeout: 240 seconds)
[03:56:32] *** Quits: grfn (sid449115@helmsley.irccloud.com) (Ping timeout: 240 seconds)
[03:56:32] *** Quits: parseval (sid239098@helmsley.irccloud.com) (Ping timeout: 240 seconds)
[03:56:32] *** Quits: gregberns__ (sid315709@helmsley.irccloud.com) (Ping timeout: 240 seconds)
[03:56:54] *** Joins: kaizen (sid501599@id-501599.helmsley.irccloud.com)
[03:56:59] *** Quits: ephemient (uid407513@lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:00] *** Quits: tritlo (sid58727@user/tritlo) (Read error: Connection reset by peer)
[03:57:01] *** Quits: Adeon (sid418992@lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:01] *** Joins: hubvu (sid495858@user/hubvu)
[03:57:02] *** Quits: angerman (sid209936@ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:57:02] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (Ping timeout: 240 seconds)
[03:57:03] *** Quits: ehamberg (sid18208@hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:57:07] *** Joins: gregberns__ (sid315709@id-315709.helmsley.irccloud.com)
[03:57:09] *** Quits: teehemkay_ (sid14792@lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:11] *** Joins: degraafk (sid71464@id-71464.lymington.irccloud.com)
[03:57:11] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[03:57:11] *** Joins: tritlo (sid58727@user/tritlo)
[03:57:11] *** Joins: grfn (sid449115@id-449115.helmsley.irccloud.com)
[03:57:11] *** Joins: ephemient (uid407513@id-407513.lymington.irccloud.com)
[03:57:12] *** Joins: rune (sid21167@id-21167.ilkley.irccloud.com)
[03:57:13] *** Joins: Adeon (sid418992@id-418992.lymington.irccloud.com)
[03:57:13] *** Joins: angerman (sid209936@id-209936.ilkley.irccloud.com)
[03:57:14] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[03:57:15] *** Joins: ehamberg (sid18208@id-18208.hampstead.irccloud.com)
[03:57:16] *** Joins: teehemkay_ (sid14792@id-14792.lymington.irccloud.com)
[03:57:18] *** Joins: dpratt__ (sid193493@id-193493.helmsley.irccloud.com)
[03:57:27] *** Quits: awpr (uid446117@lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:32] *** Quits: meinside (uid24933@helmsley.irccloud.com) (Ping timeout: 240 seconds)
[03:57:34] *** Joins: kristjansson_ (sid126207@id-126207.tinside.irccloud.com)
[03:57:36] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[03:57:38] *** Quits: whez (sid470288@lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:45] *** Joins: whez (sid470288@id-470288.lymington.irccloud.com)
[03:57:48] *** Joins: _0x47_ (sid508683@id-508683.tinside.irccloud.com)
[03:58:11] *** Joins: iphy (sid67735@id-67735.lymington.irccloud.com)
[04:00:18] <zero> when to go for haskell vs for idris?
[04:00:21] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[04:00:48] *** Joins: parseval (sid239098@id-239098.helmsley.irccloud.com)
[04:01:36] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 245 seconds)
[04:02:02] *** Quits: mcfilib (sid302703@user/mcfilib) (Ping timeout: 240 seconds)
[04:02:26] *** Quits: astra` (sid289983@user/amish) (Ping timeout: 245 seconds)
[04:02:26] *** Quits: dsal (sid13060@lymington.irccloud.com) (Ping timeout: 245 seconds)
[04:02:26] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 245 seconds)
[04:02:26] *** Quits: taktoa[c] (sid282096@tinside.irccloud.com) (Ping timeout: 245 seconds)
[04:02:26] *** Quits: hamishmack_ (sid389057@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[04:02:51] *** Quits: jmct_ (sid160793@tinside.irccloud.com) (Ping timeout: 245 seconds)
[04:02:51] *** Quits: joel135 (sid136450@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[04:03:16] *** Quits: pjlsergeant (sid143467@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[04:03:16] *** Quits: amir (sid22336@user/amir) (Ping timeout: 245 seconds)
[04:03:19] *** Joins: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com)
[04:03:25] *** Joins: taktoa[c] (sid282096@id-282096.tinside.irccloud.com)
[04:03:31] *** Joins: obviyus (sid415299@user/obviyus)
[04:04:07] *** Joins: amir (sid22336@user/amir)
[04:04:10] *** Joins: astra` (sid289983@user/amish)
[04:04:11] *** Joins: mcfilib (sid302703@user/mcfilib)
[04:04:30] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[04:06:12] *** Joins: jmct_ (sid160793@id-160793.tinside.irccloud.com)
[04:06:35] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[04:06:49] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[04:07:20] *** Joins: hook54321 (sid149355@user/hook54321)
[04:09:35] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6057:883c:398d:9dbd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:10:18] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[04:11:19] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[04:11:42] *** Joins: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi)
[04:20:55] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[04:21:15] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[04:21:37] <EvanR> zero, haskell, probably xD
[04:23:01] <EvanR> so record fields get used in 4 ways all of which are affected by extensions... fields generate field selector functions for getting, fields are used in initial record construction, fields are used in pattern matching, and fields are used in update syntax
[04:23:17] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Quit: Lost terminal)
[04:23:23] <EvanR> what was the good, the bad, and the very bad wrt Wildcards again xD
[04:23:47] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[04:23:47] *** Quits: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[04:25:23] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[04:26:05] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[04:26:11] *** Quits: mmhat (~mmh@55d426e2.access.ecotel.net) (Quit: WeeChat 3.3)
[04:28:15] *** Joins: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net)
[04:29:00] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[04:29:17] <EvanR> because it seems pretty spiffy on construction
[04:29:32] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[04:31:12] *** Joins: renzhi (~xp@2607:fa49:6500:b100::5cef)
[04:32:23] <geekosaur> dminuoso didn't like its use in patterns because it'[s unhygienic, but liked use in construction
[04:33:04] <geekosaur> (and I couldn't find that in scrollback because I spelled "unhygienic" correctly…)
[04:33:42] <EvanR> what does that mean again
[04:34:11] *** Joins: namkeleser (~namkelese@101.175.102.188)
[04:34:40] <geekosaur> (silently) pollutes the namespace
[04:35:08] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e35059025bf8f5e09b5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:35:39] <monochrom> Consider foo Sum{..} = getSum + 1
[04:36:19] <EvanR> oh yeah, that's weird
[04:36:38] <EvanR> now I feel bad using in construction again
[04:36:45] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:36:58] <geekosaur> construction is fine, the namespace it would be "polluting" is that of fields
[04:37:09] <geekosaur> it's when it pollutes the bindings namespace that things get weird
[04:37:55] <geekosaur> that is, you still control the bindings during construction. wildcards *consume* part of your namespace in oatterns
[04:38:04] <geekosaur> *patterns
[04:40:40] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:43:04] <geekosaur> moreover, almost always your pattern in construction is something like let {field1 = …; field2 = …; …} in Record(..) (or where equivalent) so you can see which names are in use. with pattern wildcards you have to go hunt down the data definition to see what it's shoving into your bindings
[04:44:04] <geekosaur> granting that a good editor/IDE would let you mouseover the wildcard and see that, you shouldn't need to
[04:45:55] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[04:46:07] <EvanR> yeah, since the bindings originate at that spot but aren't visible anywhere close sucks
[04:46:25] <EvanR> unlike e.g. imports which originate at the import itself
[04:46:36] <ozzloy> https://paste.tomsmeding.com/NC7mkLIe how do i do multiple clauses in a helper function defined in a where clause?
[04:46:50] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:46:56] <ozzloy> line 18 shows the error i'm getting
[04:47:16] <EvanR> helper 0 _:_ _ = Nothing
[04:47:20] <EvanR> you need parens around _:_
[04:47:25] <geekosaur> your problem is you're missing parentheses around :
[04:47:36] <ozzloy> ah
[04:47:42] <geekosaur> so it thinks you're defining : and helper is a syntax error
[04:47:58] <geekosaur> same thing on the next line also
[04:48:31] <ozzloy> oh, also the code is wrong
[04:48:41] <ozzloy> thanks for the help
[04:48:48] <ozzloy> geekosaur, and EvanR 
[04:49:09] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:49:12] <ozzloy> i basically coded up takeMaybe instead of split
[04:50:12] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[04:50:42] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[04:51:06] *** Quits: jgeerds (~jgeerds@55d45b75.access.ecotel.net) (Ping timeout: 265 seconds)
[04:51:11] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:51:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:51:27] <EvanR> split is a good one
[04:51:59] *** Quits: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[04:52:40] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[04:53:11] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:54:42] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[04:55:09] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:56:37] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[04:56:48] *** Quits: Guest4609 (~cat@user/sudden) (Ping timeout: 256 seconds)
[04:57:08] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[04:57:12] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[04:57:36] *** sudden is now known as Guest6872
[04:58:37] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[04:59:19] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[05:00:27] <ozzloy> https://paste.tomsmeding.com/rsu9GWol now i'm trying to construct an infinite type?
[05:00:49] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:01:27] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:01:27] <ozzloy> i want to grab the first list out of accumulator, and make a new accumulator that has x at the front of that list, then put that new list and the remaining lists from the original accumulator into the accumulator for the next recursion
[05:01:51] <EvanR> elper 0 (x:xs) (a:as) = helper n xs ([x]:as) looks suspicious
[05:01:58] <dsal> infinite type is suggesting you're trying to have a type that's an `a` and a `[a]` at the same time
[05:01:58] <EvanR> are you sure you don't mean (x:as)
[05:02:17] <EvanR> where x is an item, as is a list
[05:02:27] <ozzloy> oh, yeah, i actually just changed that one
[05:02:42] <ozzloy> er...
[05:02:58] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:03:20] <ozzloy> so line 16, i want to create a new list
[05:03:27] <ozzloy> in the accumulator
[05:03:58] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:04:07] <ozzloy> the accumulator is a list of lists... so i think when n is 0, but there are still more elements in x, that means start a new inner list in the list of lists
[05:04:14] <ozzloy> maybe that's off-by-one?
[05:04:30] <dsal> Off by one won't give you a type error.
[05:05:03] <ozzloy> true, i agree.  i was thinking maybe there was also a semantic error
[05:05:08] <EvanR> you start a new list regardless it looks like
[05:05:12] <EvanR> on 15 and 16
[05:05:24] <EvanR> maybe you want to append to the list on 15
[05:05:29] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:05:30] <ozzloy> oh, i should renew the code
[05:06:18] <ozzloy> https://paste.tomsmeding.com/LbovQ5hn
[05:06:25] <ozzloy> still infinite type error
[05:06:31] <ozzloy> i'm asking something to be a and [a]
[05:06:41] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[05:07:06] <EvanR> what I was talking about is still there on 15 and 16
[05:07:46] <EvanR> as appears to be full of singleton lists xD
[05:07:50] <ozzloy> ah, then that must be what i'm not understanding!
[05:08:10] <dsal> (a:as)   is taking an `a` out of a list of `as` and you're later doing `([x:a]:as)` which makes a new list that includes `a` and putting it in `as`.
[05:08:10] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:08:54] <dsal> > let  f (x:xs) = [x]:xs   in f "not possible"
[05:08:56] <lambdabot>  error:
[05:08:58] <lambdabot>      • Occurs check: cannot construct the infinite type: a ~ [a]
[05:09:00] <lambdabot>        Expected type: [[a]]
[05:09:19] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:09:51] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:10:09] <EvanR> specifically make sure you know what [x:a]:as means before you insist on trying it xD
[05:10:26] <ozzloy> so ... i'd like for the accumulator to be a list of lists.  i'd like to grab the first of those inner lists and cons x onto it, then make a new accumulator that is a list with members including that newly created list, and all the other lists the accumulator used to have
[05:10:48] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:10:50] <EvanR> to cons use :
[05:11:01] <EvanR> to make a singleton list of x, use [x]
[05:11:05] <EvanR> or x:[]
[05:11:28] <dsal> > ['a',b']:[]
[05:11:29] <lambdabot>  error:
[05:11:29] <lambdabot>      • Variable not in scope: b' :: Char
[05:11:29] <lambdabot>      • Perhaps you meant one of these:
[05:11:37] <dsal> > ['a','b']:[]
[05:11:38] <lambdabot>  ["ab"]
[05:11:50] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:12:18] <dsal> chars always muddy the water...   But when you do that, you're making each element in the list be a list.
[05:12:31] <EvanR> > [0:[1,2]]:[[3,4,5], [6,7,8]] -- this what you're trying to do right now it seems
[05:12:32] <lambdabot>  error:
[05:12:32] <lambdabot>      • No instance for (Num [Integer])
[05:12:32] <lambdabot>          arising from a use of ‘e_1012345678’
[05:12:34] <ozzloy> so for line 15
[05:12:54] <EvanR> it's wrong but don't worry about the reason lambdabot gave xD
[05:13:03] <EvanR> numbers can't be lists normally
[05:13:19] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:13:24] <ozzloy> my intent is: x is a single element, a is the first list in the list of lists
[05:13:31] <EvanR> yeah I got that
[05:13:36] <ozzloy> xs is all the remaining elements
[05:13:38] <EvanR> I just don't wanna solve it for you xD
[05:13:46] <ozzloy> that makes sense
[05:14:09] <ozzloy> hopefully i can explain what i'm thinking and maybe it's just a syntactical thing
[05:14:19] <EvanR> yeah sounds like it
[05:14:23] <ozzloy> or maybe it's a thinking error
[05:14:24] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:14:28] *** Quits: namkeleser (~namkelese@101.175.102.188) (Quit: Client closed)
[05:14:35] <EvanR> no you just typed the wrong code xD
[05:14:41] <ozzloy> ...
[05:15:01] <dsal> `([x:a]:as)` is kind of weird.  If you read what that does, you might realize it's probably not what you meat.
[05:15:09] <EvanR> on 15 you introduced a new set of [ ]
[05:15:16] <EvanR> inappropriate
[05:15:26] <dsal> NSFW
[05:15:54] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:16:25] <ozzloy> ok, let's say x = 1, a = 2, as = [3,4].  does ([x:a]:as) = [1,2,3,4]?
[05:16:35] <EvanR> now a is not a list
[05:16:36] <dsal> ask lambdabot
[05:16:41] <EvanR> you can't cons onto it
[05:16:47] <ozzloy> i know, i'm asking about the syntax
[05:16:48] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:16:50] <ozzloy> oh right
[05:16:59] <dsal> > let x = 1; a = 2; as = [3,4]   in ([x:a]:as)
[05:17:01] <lambdabot>  error:
[05:17:01] <lambdabot>      • No instance for (Num [[Integer]]) arising from a use of ‘e_11234’
[05:17:01] <lambdabot>      • In the expression: e_11234
[05:17:06] <dsal> well, nevermind.  Don't ask lambdabot
[05:17:15] <EvanR> yeah, shut up lambdabot
[05:17:20] <EvanR> sorry lambdabot
[05:17:23] <EvanR> @botsnack
[05:17:23] <lambdabot> :)
[05:17:27] <ozzloy> ok, so let's say x = 1, a = [], as = [3,4], does ([x:a]:as) = [1,3,4] ?
[05:17:47] <ozzloy> > let x = 1; a = []; as = [3,4] in ([x:a]:as)
[05:17:48] <lambdabot>  error:
[05:17:48] <lambdabot>      • No instance for (Num [[Integer]]) arising from a use of ‘e_1134’
[05:17:48] <lambdabot>      • In the expression: e_1134
[05:17:54] <EvanR> work it out yourself
[05:18:18] <EvanR> [x:a]:as   ===>   [[1]]:as
[05:18:18] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:18:20] <EvanR> etc
[05:18:22] <dsal> What type is [x:a] ?
[05:19:09] <ozzloy> if x = 1, a = [], then [x:a] = [[1]], so list of list of int... so i have extraneous []?
[05:19:26] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:19:27] <EvanR> [[1]] won't fit into [3,4]
[05:19:33] <EvanR> not a number
[05:19:36] <dsal> You've gone too far.
[05:19:53] <dsal> What's the easiest way to shed the extra [ and ] ?
[05:19:55] <ozzloy> ok, so now i have ((x:a):as) and it type checks
[05:19:57] *** Joins: jkaye (~jkaye@2601:281:8300:7530:968d:4a00:8e7b:fc05)
[05:20:04] <dsal> You don't need those parens, but yeah.
[05:20:15] <EvanR> > 0:1:2:3:4:[]
[05:20:16] <lambdabot>  [0,1,2,3,4]
[05:20:34] <ozzloy> but i want accumulator to be a list of lists of integers
[05:20:49] <EvanR> your example didn't have that
[05:20:58] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:21:43] <EvanR> or in the words of linus torvalds, if it compiles, ship it (paraphrased)
[05:21:44] <ozzloy> sorry, i should have been more clear earlier when i was giving values to x, a, and as.  i was asking syntax questions, not specifically about x, a, and as in the problem
[05:22:03] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:22:07] <ozzloy> for the problem, i expect x to be an integer, a to be a list of integers, and as to be a list of lists of integers
[05:22:20] <dsal> OK, then try it that way.  :)
[05:23:03] <EvanR> write down every expression in sight with the type you think it has, then verify
[05:23:11] <ozzloy> so i want x:a to be a list of integers, and to put that list of integers onto as.
[05:23:13] *** Quits: burnsidesLlama (~burnsides@dhcp168-025.wadham.ox.ac.uk) (Remote host closed the connection)
[05:23:34] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:23:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:23:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:23:56] *** Joins: wroathe (~wroathe@user/wroathe)
[05:24:07] <ozzloy> > let x = 1; a = []; as = [] in x:a:as
[05:24:08] <lambdabot>  error:
[05:24:08] <lambdabot>      • No instance for (Num [()]) arising from a use of ‘e_11’
[05:24:08] <lambdabot>      • In the expression: e_11
[05:24:12] <EvanR> bzzz
[05:24:28] <hololeap> % :i (:)
[05:24:28] <yahb> hololeap: type [] :: * -> *; data [] a = ... | a : [a]; -- Defined in `GHC.Types'; infixr 5 :
[05:24:45] <EvanR> your x:a:as was parsed as x:(a:as)
[05:24:47] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:24:47] <dsal> My irc client rendered that code with a giant red box with an A on it.
[05:24:58] <ozzloy> > let x = 1; a = []; as = [] in (x:a):as
[05:24:59] <lambdabot>  [[1]]
[05:25:05] <EvanR> \o/
[05:25:17] <ozzloy> great
[05:25:22] <hololeap> that infixr 5 means (:) is right-associative
[05:25:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[05:25:34] <hololeap> so a:b:c == a:(b:c)
[05:25:35] <ozzloy> so ... what are the words i could have searched that pertain to this?
[05:26:10] <EvanR> just trying stuff like let x = 1; a = []; as = [] in (x:a):as in ghci helps me at least
[05:26:19] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:26:21] <EvanR> sanity checks
[05:26:22] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[05:26:42] <hololeap> hm, associativity of infix operators?
[05:26:55] <ozzloy> i feel like "figure it out" doesn't really apply here.  the syntax for expressing that idea _could_ have been different.  how would i reason my way to figuring it out?
[05:26:59] <hololeap> and how to check them using ghci
[05:27:09] <hololeap> that's one thing you could search for
[05:27:10] <EvanR> the precedence of : didn't really come up until the very end
[05:27:16] <EvanR> the first issue was putting too many [ ]
[05:27:29] <dsal> ozzloy: It helps to have an understanding of the infinite type error.  It's not the most user friendly thing because what it means and what causes it are often seemingly unrelated.
[05:27:32] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:28:14] <EvanR> "infinite type error" does lead you to stuff you can technically read xD
[05:28:27] <ozzloy> it also sounds neat
[05:28:33] <EvanR> it's pretty neat
[05:28:34] <dsal> Yeah, a lot of the results seem to be "you probably just made this mistake"
[05:28:46] <ozzloy> "what are you working on?"  "oh, just got an infinite type error.  nothing i can't handle."
[05:28:56] <dsal> > let  f (x:xs) = [x]:xs   in f "not possible"  -- this is a simple case
[05:28:57] * ozzloy puts on sunglasses
[05:28:58] <lambdabot>  error:
[05:28:58] <lambdabot>      • Occurs check: cannot construct the infinite type: a ~ [a]
[05:28:58] <lambdabot>        Expected type: [[a]]
[05:29:03] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:29:14] <EvanR> it's an infinite type error because the type checker saw you tried to put [a] into itself
[05:29:26] <EvanR> kind of like "put bag in bag" in old MUD servers
[05:29:32] <EvanR> which potentially crashes the server
[05:29:45] <dsal> GHC is just a mud server with that bug fixed.
[05:29:50] <EvanR> ^
[05:30:04] <dsal> Nobody's ever thinking type theory when they write that bug, though.
[05:30:13] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:30:32] <EvanR> a = [a] = [[a]] = [[[a]]] = ...
[05:30:38] <EvanR> wall of mirrors
[05:30:55] <dsal> It's usually making a type that recurses on itself infinitely like your list, or leaving off a function argument or something.
[05:31:21] <dsal> "You made a dumb mistake, but I'll try to make you sound smart with this error." -- GHC
[05:31:46] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:32:57] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:33:07] *** Joins: namkeleser (~namkelese@101.175.102.188)
[05:33:24] *** Joins: exbios (~ri@2806:2f0:90a0:876c:3f02:6e97:3cf3:656)
[05:34:27] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:35:40] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:37:11] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:38:19] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:39:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[05:39:49] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:39:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:41:17] <Square> Anyone got a good approach removing unused imports from a semi large project? 
[05:41:28] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:42:58] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:44:16] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:44:32] *** Joins: notzmv (~zmv@user/notzmv)
[05:45:48] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:47:14] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:48:45] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:50:14] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[05:51:47] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:52:52] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:53:02] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:54:33] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:54:55] <dsal> Turn on warnings and put on a movie.
[05:55:51] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:55:56] *** Joins: zebrag (~chris@user/zebrag)
[05:56:02] *** Quits: jkaye (~jkaye@2601:281:8300:7530:968d:4a00:8e7b:fc05) (Ping timeout: 240 seconds)
[05:57:24] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[05:58:40] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:00:07] <EvanR> isn't that something handled by an IDE?
[06:00:12] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[06:01:30] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:03:02] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[06:04:26] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:05:08] <Square> EvanR, idk really know how well my vscode + haskell-language-server setup is, but if the function is there. Its well hidden
[06:05:58] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[06:07:08] <hololeap> it underlines the unused imports as a warning in my IDE, but it might be because I have ghc-options: -Wall in my cabal file
[06:07:29] *** Quits: xff0x (~xff0x@2001:1a81:53bb:9600:5031:992:22e6:cca9) (Ping timeout: 250 seconds)
[06:08:15] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[06:09:34] *** Joins: xff0x (~xff0x@2001:1a81:53f8:4700:f84d:9d7f:7b09:bb62)
[06:09:52] <hololeap> there is also -Wunused-packages, although it seems a bit unreliable
[06:10:55] <hololeap> it seems like it will spit out a different list of unused packages at different times during the compilation process
[06:12:30] *** Joins: Cajun (~Cajun@user/cajun)
[06:13:07] <hololeap> that particular warning has no location info so you only see it when you build your project
[06:15:56] <hololeap> it would be cool if it gave location info inside your .cabal file, but alas
[06:16:42] <hololeap> I'm still on GHC 8.10 so I dunno if that's been improved at all
[06:18:17] <hololeap> I assume it would require more communication between GHC and cabal to have that kind of functionality
[06:19:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[06:20:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[06:22:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:22:08] *** Quits: matijja (~matijja@193.77.181.201) (Quit: ZNC 1.8.1 - https://znc.in)
[06:26:54] *** Joins: matijja (~matijja@193.77.181.201)
[06:28:58] <hololeap> I've been seeing a lot of these kind of errors as packages work their way toward GHC 9.2. what was the breaking change?
[06:29:01] <hololeap> Couldn't match expected type ‘Word#’ with actual type ‘Word16#’
[06:29:12] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[06:32:22] *** Joins: ubert1 (~Thunderbi@p200300ecdf0ba253e6b318fffe838f33.dip0.t-ipconnect.de)
[06:32:30] *** Quits: slice (~slice@user/slice) (Quit: cya)
[06:34:02] *** Quits: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:34:02] *** ubert1 is now known as ubert
[06:41:00] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[06:44:46] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:45:31] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[06:52:59] *** Quits: td_ (~td@94.134.91.33) (Ping timeout: 250 seconds)
[06:54:51] *** Joins: td_ (~td@94.134.91.117)
[06:54:56] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:11:12] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[07:12:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51)
[07:17:12] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51) (Ping timeout: 260 seconds)
[07:19:58] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 265 seconds)
[07:20:04] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:21:50] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[07:22:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:25:38] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[07:30:06] <Square> hololeap, thanks! When you mentioned the compiler flags i saw that i had suppression on unused imports. When i turned it on VSCode would show me all unused and shave them by file. 
[07:30:41] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[07:32:16] *** Joins: hiruji (~hiruji@user/hiruji)
[07:33:41] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Ping timeout: 245 seconds)
[07:35:50] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[07:36:30] *** Quits: hiruji (~hiruji@user/hiruji) (Read error: Connection reset by peer)
[07:36:33] *** Joins: hiruji` (~hiruji@pool-100-4-208-71.albyny.fios.verizon.net)
[07:40:29] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:42:29] *** Quits: hiruji` (~hiruji@pool-100-4-208-71.albyny.fios.verizon.net) (Read error: Connection reset by peer)
[07:48:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:49:30] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[07:50:43] <hololeap> np
[07:54:19] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 250 seconds)
[07:56:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[07:56:47] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 268 seconds)
[07:56:54] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:57:12] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[07:57:28] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[08:01:26] <EvanR> is there special magic required to use type applications in a pattern other than TypeApplications ?
[08:01:37] <EvanR> it keeps telling me Expression syntax in pattern
[08:02:01] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[08:02:02] *** Joins: MrNobody_0000000 (~MrNobody@user/mrnobody-0000000/x-9129771)
[08:05:07] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[08:06:40] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:11:24] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[08:12:58] *** Joins: hiruji (~hiruji@user/hiruji)
[08:25:05] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:28:14] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Quit: Lost terminal)
[08:28:52] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[08:30:21] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[08:30:52] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:31:27] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[08:31:43] *** Joins: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4)
[08:32:27] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[08:32:58] *** Joins: deadmarshal (~deadmarsh@95.38.228.146)
[08:34:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[08:35:46] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[08:36:17] <superstar64> Where can I learn about least / greatest fixed points?
[08:36:39] <superstar64> I've tried looking at https://homepages.inf.ed.ac.uk/wadler/papers/free-rectypes/free-rectypes.txt but it's a bit too category theory heavy for me at the moment.
[08:41:40] *** Quits: shailangsa (~shailangs@host86-186-133-114.range86-186.btcentralplus.com) (Ping timeout: 260 seconds)
[08:43:43] <c_wraith> fixed points are more part of domain theory
[08:44:00] <c_wraith> at least in this context
[08:44:49] *** Joins: Jing (~hedgehog@2604:a840:3::1065)
[08:46:19] <hololeap> superstar64: section 24.1 in milewski's category theory for programmers goes into it a bit
[08:46:50] <hololeap> and very briefly in 24.6
[08:46:57] <superstar64> thanks, i've been meaning to finish that book
[08:47:40] <hololeap> but it doesn't really go into what least vs greatest fixed point means
[08:48:11] <superstar64> c_wraith, any resources on domain theory then?
[08:48:26] <superstar64> at least things usable from the functional programming prospective.
[08:48:36] <hololeap>  > The initial algebra is the so called least fixed point, and the terminal coalgebra is the greatest fixed point. In Haskell, though, both are defined by the same formula, and they coincide.
[08:50:28] <c_wraith> superstar64: https://www.cs.nott.ac.uk/~pszgmh/domains.html
[08:52:56] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[08:53:00] *** Joins: rkrishnan (~user@171.48.57.101)
[08:54:47] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[08:58:16] *** Joins: hololeap_ (~hololeap@user/hololeap)
[08:58:47] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[08:59:04] *** Joins: img (~img@user/img)
[09:01:09] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[09:02:19] *** hololeap_ is now known as hololeap
[09:02:30] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:02:30] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:02:30] *** Joins: wroathe (~wroathe@user/wroathe)
[09:03:06] <hololeap> really, anything beyond Data.Fix isn't relevant to functional programming, AFAIK
[09:03:28] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Remote host closed the connection)
[09:03:42] <hololeap> but catamorphisms/anamorphisms are a useful abstraction
[09:03:56] *** Quits: namkeleser (~namkelese@101.175.102.188) (Quit: Client closed)
[09:04:01] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[09:04:19] <hololeap> generalized folds/unfolds
[09:04:46] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:05:44] <hololeap> they let you reason about a recursive data structures at a single level of recursion
[09:06:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51)
[09:06:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:07:29] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:07:44] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:08:10] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[09:08:29] *** Joins: reumeth (~reumeth@user/reumeth)
[09:09:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:09:27] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[09:10:08] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b) (Quit: gone to sleep. ZZZzzz…)
[09:10:18] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[09:11:40] <monochrom> haha scott domain = "a c3po"
[09:11:48] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:12:07] * hololeap wonders if there is any recursive data structure "larger" than rose trees expressible in haskell
[09:13:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:14:06] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[09:14:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:15:06] *** Quits: deadmarshal (~deadmarsh@95.38.228.146) (Ping timeout: 268 seconds)
[09:17:56] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:18:11] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Remote host closed the connection)
[09:18:42] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[09:21:16] <c_wraith> hololeap: I'm not sure what you mean by large, there.
[09:21:37] *** Joins: shailangsa (~shailangs@host86-186-136-24.range86-186.btcentralplus.com)
[09:21:56] <c_wraith> In another sense of large, you get things like newtype Hyper a b = Hyper (Hyper b a -> b)
[09:24:15] *** Joins: deadmarshal (~deadmarsh@95.38.228.146)
[09:25:15] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[09:26:32] <EvanR> once you include functions it gets... uh large
[09:27:02] <EvanR> normally wouldn't think of those as recursive though
[09:27:06] <c_wraith> apparently hyperfunctions aren't even a proper set - you need domain theory to model them.  though I'm just taking this from the paper
[09:28:22] <dolio> You might be able to have them constructively. But classical set theoretic models don't have them.
[09:28:48] *** Quits: renzhi (~xp@2607:fa49:6500:b100::5cef) (Ping timeout: 260 seconds)
[09:29:16] <dolio> For instance, there are constructive models where `Hyper Bool Bool` is the natural numbers.
[09:30:03] <dolio> Assuming this is some better behaved type theory, not Haskell.
[09:34:21] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Remote host closed the connection)
[09:34:54] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[09:38:16] <hololeap> c_wraith: what I meant was that all other recursive data structures could be expressed as (some form of) rose trees, but I wasn't thinking of structures with sum types
[09:39:42] *** Joins: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi)
[09:40:03] <hololeap> that Hyper type is interesting, although I don't see a terminal case for its recursion
[09:40:27] <EvanR> newtype U = U (U -> U) or something
[09:46:11] *** Quits: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[09:47:35] <hololeap> at some point, to run the thing, you would need a Hyper b a, but the only way to construct and run that is if you have a Hyper b a. I would guess leveraging laziness comes into play here
[09:47:47] *** Quits: exbios (~ri@2806:2f0:90a0:876c:3f02:6e97:3cf3:656) (Remote host closed the connection)
[09:48:08] <dolio> You can make a hyperfunction with `const b`.
[09:48:38] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[09:49:34] <hololeap> right, that makes sense
[09:50:38] <hololeap> what is the other type variable for?
[09:51:00] <hololeap> oh, because of the flip
[09:51:19] <dolio> Yeah, Hyper a b ~ ((Hyper a b -> a) -> b)
[09:52:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:53:32] *** Quits: deadmarshal (~deadmarsh@95.38.228.146) (Ping timeout: 240 seconds)
[09:54:21] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 250 seconds)
[09:55:04] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[09:57:01] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[09:57:21] *** Joins: mbuf (~Shakthi@122.174.185.81)
[09:58:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:59:19] *** Joins: deadmarshal (~deadmarsh@95.38.228.146)
[09:59:35] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[10:03:45] <hololeap> % newtype Hyper a b = Hyper { runHyper :: Hyper b a -> b }
[10:03:45] <yahb> hololeap: 
[10:03:54] <hololeap> % let z = Hyper (const True) in runHyper (Hyper (\(Hyper f) -> f undefined)) z
[10:03:54] <yahb> hololeap: True
[10:04:06] <hololeap> I am so confused by this thing
[10:06:35] <EvanR> my god it's full of lambdas
[10:07:04] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[10:08:13] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[10:08:41] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Ping timeout (120 seconds))
[10:11:27] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51) (Remote host closed the connection)
[10:15:55] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:15:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:15:56] *** Joins: wroathe (~wroathe@user/wroathe)
[10:16:33] <hololeap> % let z = Hyper (const True) in runHyper (Hyper (\(Hyper f) -> f (Hyper (\(Hyper g) -> g (Hyper (\(Hyper _) -> False)))))) z
[10:16:33] <yahb> hololeap: True
[10:16:42] <hololeap> what is the point of this thing
[10:17:01] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[10:17:48] <hololeap> % let z = Hyper (const True) in runHyper (Hyper (\(Hyper f) -> f (Hyper (\(Hyper g) -> g undefined)))) z
[10:17:49] <yahb> hololeap: True
[10:19:13] <hololeap> I guess it could become useful if you add another field to the Hyper constructor
[10:20:00] <hololeap> so it carries something other than just more of these bare Hyper functions
[10:20:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[10:21:29] <hololeap> and then you would be getting into "largeness" territory due to the exponential types
[10:24:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:26:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[10:26:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[10:27:17] <ozzloy> https://paste.tomsmeding.com/2FGxpKiE the prompt says to use map/filter.  i'm using it on line 40, but it seems clunky.
[10:27:22] *** Quits: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4) (Quit: Leaving)
[10:27:47] <ozzloy> the prompt also says to use foldr, and i am on line 52, but again, it feels clunky
[10:27:50] <EvanR> oh hold on, this was all supposed to be useful? xD
[10:28:24] <ozzloy> is there some clever thing i'm missing, or is it just kinda clunky?
[10:28:53] <ozzloy> i'm using filter and map to check if all the elements in a list are all the same as each other
[10:29:35] <xsperry> ozzloy, I'd use all instead of filter and map
[10:29:42] <xsperry> :t all
[10:29:43] <lambdabot> Foldable t => (a -> Bool) -> t a -> Bool
[10:29:43] <ozzloy> by mapping all the elements to whether they're equal to the first element, then filtering
[10:30:06] <ozzloy> xsperry, oh cool, sounds good.  i'll keep that in mind
[10:30:06] <xsperry> > all (==1) [1,1,1]
[10:30:07] <EvanR> I mean, you could just filter by (/=x)
[10:30:09] <lambdabot>  True
[10:30:22] <ozzloy> i'm guessing there's a 'some' too?
[10:30:27] <EvanR> any
[10:30:37] <ozzloy> i was in the middle of typing that out!
[10:30:39] <EvanR> > any (==0) [1,1,1]
[10:30:41] <lambdabot>  False
[10:30:58] <ozzloy> EvanR, oooh, i like that (==0)
[10:31:06] <ozzloy> i'll use that instead of the lambda
[10:31:17] <EvanR> (==x) in your case right
[10:31:40] <EvanR> @src all
[10:31:41] <lambdabot> all p = and . map p
[10:31:56] <ozzloy> what is dot?
[10:32:04] <EvanR> :t (.)
[10:32:05] <ozzloy> argument-goes-here ?
[10:32:05] <lambdabot> (b -> c) -> (a -> b) -> a -> c
[10:32:11] <EvanR> function composition
[10:32:19] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[10:32:20] <ozzloy> ah, like center-dot
[10:32:53] <EvanR> f ∘ g  like that
[10:32:59] <ozzloy> cool
[10:33:50] <EvanR> > (∘) = (.) in (and ∘ map (==0)) [1,1,1]
[10:33:52] <lambdabot>  <hint>:1:5: error: parse error on input ‘=’
[10:33:55] <ozzloy> so is there some other way of using map and filter to determine if a list has repeating subsequences, that is more slick than what i'm doing?
[10:33:57] <EvanR> > let (∘) = (.) in (and ∘ map (==0)) [1,1,1]
[10:33:58] <lambdabot>  False
[10:34:03] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:34:14] <EvanR> heh
[10:34:22] <EvanR> by slick you mean already implemented for you
[10:34:25] <EvanR> yeah
[10:34:43] <xsperry> @src and
[10:34:43] <lambdabot> and = foldr (&&) True
[10:34:49] <EvanR> > group [0,1,2,2,1,0]
[10:34:50] <lambdabot>  [[0],[1],[2,2],[1],[0]]
[10:35:08] <ozzloy> oh interesting
[10:35:54] <ozzloy> > group [[1],[1],[2],[2],[2],[3]]
[10:35:55] <lambdabot>  [[[1],[1]],[[2],[2],[2]],[[3]]]
[10:36:24] <ozzloy> > group [[1,2],[1,2],[2],[2],[2],[3]]
[10:36:25] <lambdabot>  [[[1,2],[1,2]],[[2],[2],[2]],[[3]]]
[10:36:31] <ozzloy> ooOOooh
[10:36:37] <ozzloy> neat
[10:37:25] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51)
[10:38:04] <ozzloy> i mean specifically using map and filter, or foldr in isRepeats''
[10:38:31] <EvanR> foldr is so general that you probably use it no matter what
[10:38:35] <EvanR> on some level
[10:38:41] *** Quits: xff0x (~xff0x@2001:1a81:53f8:4700:f84d:9d7f:7b09:bb62) (Ping timeout: 245 seconds)
[10:38:54] <EvanR> see the code for `and' up there
[10:39:15] <ozzloy> i made a more generic version of it
[10:39:28] <EvanR> a ... more generic version of foldr ? xD
[10:39:40] <ozzloy> it takes in a function for "head" and "cons" as well
[10:39:46] *** Joins: xff0x (~xff0x@2001:1a81:53f8:4700:341b:dd7e:779b:cbe2)
[10:39:57] <EvanR> that doesn't sound right
[10:40:03] <EvanR> foldr already does that
[10:40:32] <hololeap> foldr has to be implemented like that for any Foldable
[10:41:04] <EvanR> :t head
[10:41:05] <lambdabot> [a] -> a
[10:41:06] <ozzloy> hold on, i'll see if i can find the code.  might be better than trying to write it in words
[10:41:24] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[10:41:39] <hololeap> it sounds like you defined Foldable using functions instead of a typeclass
[10:42:13] <hololeap> defined/reinvented
[10:42:46] <ozzloy> possibly, that sounds plausible
[10:42:57] <ozzloy> so foldr assumes it's working on a list
[10:43:06] <ozzloy> (can't find it at the moment)
[10:43:17] <jollygood2> :t foldr
[10:43:18] <lambdabot> Foldable t => (a -> b -> b) -> b -> t a -> b
[10:43:19] <ozzloy> i wrote a version that doesn't assume that
[10:43:40] <ozzloy> i see
[10:44:05] <ozzloy> Foldable is something that has a "head"-like operation and a "cons"-like operation?
[10:44:12] <hololeap> no, it assumes it's working with a Foldable. more accurately, a Foldable is defined by the way it implements foldr
[10:44:38] <hololeap> yes, any foldable can be converted to a list, althought not necessarily the other way around
[10:44:48] <hololeap> :t toList
[10:44:49] <lambdabot> Foldable t => t a -> [a]
[10:44:56] <EvanR> head can be defined by foldr
[10:44:58] <ozzloy> can a number be converted to a Foldable?
[10:45:21] <EvanR> numbers don't have a type parameter
[10:45:24] <c_wraith> things aren't converted to Foldable - they either are or aren't
[10:45:27] <hololeap> no, it needs a type variable, for one
[10:45:31] <c_wraith> Foldable is a class, not a type
[10:46:02] <hololeap> it has to be (Something a) to be a Foldle, where it works with any a
[10:46:06] <hololeap> *Foldable
[10:46:08] <ozzloy> oh, that's interesting, what is the difference in haskell between a class and a type?
[10:46:20] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:46:25] <c_wraith> a class is a set of behaviors a type can have
[10:46:26] <EvanR> a type class
[10:46:41] <ozzloy> i should say the function i wrote was in scheme, not haskell, so maybe the terms don't quite carry over
[10:46:55] <c_wraith> like, the Eq class allows things that implement it to be compared for equality
[10:46:56] <ozzloy> i used it to convert a number into a list of 1s and 0s
[10:47:44] <ozzloy> so Foldable is a set of behaviors?
[10:47:58] <hololeap> really just one
[10:48:09] <ozzloy> or rather, a ... specification of the existence of behaviors?
[10:48:10] <EvanR> whatever you know about scheme, you can comprehend it in haskell by using a big sum type to represent the scheme values
[10:48:35] <EvanR> call it, that scheme over there
[10:48:47] <hololeap> if you want to define an instance of Foldable, you have to give it an implementation of foldr
[10:49:10] <ozzloy> i see
[10:51:30] <ozzloy> so that makes me think of the Enumerable mixin for ruby, where a (ruby) class has to implement #each
[10:51:57] <ozzloy> and then can mixin Enumerable, and gets a bunch of behavior defined in terms of #each
[10:52:05] <c_wraith> that aspect is similar - you get to implement a couple functions and opt in to a bigger ecosystem from it.
[10:52:19] <c_wraith> The way it plays out in a typed language has a lot of differences in details, though
[10:52:36] <ozzloy> makes sense
[10:52:44] <hololeap> % data TheTwo a = TheTwo { getOne :: a, getTwo :: a }
[10:52:44] <yahb> hololeap: 
[10:52:54] <hololeap> % instance Foldable TheTwo where foldr f b (TheTwo a1 a2) = f a1 (f a2 b)
[10:52:54] <yahb> hololeap: 
[10:53:04] <hololeap> toList (TheTwo 2 3)
[10:53:08] <hololeap> % toList (TheTwo 2 3)
[10:53:08] <yahb> hololeap: [2,3]
[10:53:16] <hololeap> (just a small example)
[10:53:51] <hololeap> and I did kind of lie, you can also define a Foldable instance in terms of foldMap. you can choose to define it either way
[10:54:22] <hololeap> they are just two different ways of thinking about the same concept
[10:54:39] <jollygood2> ozzloy, take Eq as an example, minimal complete definition requires defining either (==) or (/=). so when you make a function Eq a => f :: a -> [a] -> [a], and do f x xs, compiler is implicitly passing (==) and (/=) functions to f for the type of x
[10:55:39] <jollygood2> it is basically doing something like this for you: f :: (a -> a -> Bool) -> a -> [a] -> [a]
[10:55:47] <EvanR> it's easy to reach for custom type classes too early though
[10:56:02] <EvanR> like a replacement for classes, or interfaces from another language
[10:56:25] <ozzloy> very much feels like java interfaces, yeah
[10:56:39] <EvanR> yeah but its more than that
[10:57:16] <c_wraith> The type system details let you say things you can't say in an interface.
[10:57:25] <EvanR> you can do interfaces other ways in haskell that may be more convenient
[10:57:36] <ozzloy> closer to an abstract class from java, where a bunch of concrete methods are implemented in terms of an abstract method
[10:57:59] <ozzloy> yeah, and it sounds like you can add it in after-the-fact
[10:58:37] <ozzloy> like after defining the class(what's it called in haskell?) TheTwo
[10:58:57] <EvanR> TheTwo is a data type
[10:59:06] <ozzloy> then, _after_, you provided a definition of foldr
[10:59:18] <EvanR> potentially way after
[10:59:24] <ozzloy> that's cool
[10:59:38] <EvanR> after TheTwo was finished, compiled, packaged shipped without being Foldable
[10:59:52] <EvanR> somebody can ship a Foldable instance separately if necessary
[11:00:01] <ozzloy> also, TheTwo was just data, and not also methods thrown in
[11:00:11] <ozzloy> i like that
[11:00:30] <ozzloy> data is just data, even if it has a shape
[11:01:08] <ozzloy> thanks for the firehose to drink from
[11:01:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:01:40] <ozzloy> EvanR, hololeap, c_wraith, jollygood2, thanks
[11:02:26] *** Quits: deadmarshal (~deadmarsh@95.38.228.146) (Ping timeout: 245 seconds)
[11:04:28] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:06:13] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[11:06:59] <jollygood2> ozzloy, np
[11:10:11] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:10:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:12:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:14:43] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:15:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:15:42] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[11:15:56] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:16:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[11:18:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:18:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:20:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:20:53] *** Joins: deadmarshal (~deadmarsh@95.38.228.146)
[11:20:55] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:22:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:22:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:24:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:24:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:26:31] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:26:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:28:15] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:28:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:32:43] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[11:34:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:34:40] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:38:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:44:28] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[11:44:28] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[11:44:36] *** Joins: mmhat (~mmh@55d430d9.access.ecotel.net)
[11:45:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:45:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:45:56] *** Quits: ishutin (~ishutin@89-186-118-211.pool.digikabel.hu) (Ping timeout: 256 seconds)
[11:47:43] *** Joins: ishutin (~ishutin@87-97-82-128.pool.digikabel.hu)
[11:47:56] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[11:48:13] *** Joins: drdo (~drdo@roach0.drdo.eu)
[11:49:51] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[11:52:51] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[11:53:35] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 268 seconds)
[11:55:00] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[12:02:33] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[12:07:53] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[12:08:27] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e35059025bf8f5e09b5.dip0.t-ipconnect.de)
[12:11:02] *** Quits: rkrishnan (~user@171.48.57.101) (Ping timeout: 240 seconds)
[12:13:16] *** Joins: img (~img@user/img)
[12:13:56] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:14:07] *** Joins: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr)
[12:17:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:22:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[12:23:26] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[12:27:13] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51) (Remote host closed the connection)
[12:29:02] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[12:30:09] *** Quits: fakehacker[m] (~fakehacke@2001:470:69fc:105::b5f0) (Quit: You have been kicked for being idle)
[12:30:43] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:35:00] *** Joins: Lycurgus (~juan@98.4.112.204)
[12:38:19] *** Joins: notzmv (~zmv@user/notzmv)
[12:39:15] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[12:40:34] *** Joins: hololeap (~hololeap@user/hololeap)
[12:45:10] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[12:47:38] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:40] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:43] *** allbery_b is now known as geekosaur
[12:49:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[12:49:55] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[12:57:20] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:05:17] *** Joins: TMA (tma@twin.jikos.cz)
[13:06:31] *** Quits: ubert (~Thunderbi@p200300ecdf0ba253e6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[13:06:46] *** Joins: ubert (~Thunderbi@p200300ecdf0ba253e6b318fffe838f33.dip0.t-ipconnect.de)
[13:07:54] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 260 seconds)
[13:09:21] *** Joins: kuribas (~user@ptr-25vy0i9092f7cof0r9n.18120a2.ip6.access.telenet.be)
[13:14:39] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:17:31] <tom__> Does it make sense to write a test for each PBT generator to ensure it produces valid output?
[13:18:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:20:18] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:22:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[13:22:57] <[exa]> tom__: if the correctness is not obvious from the way the generator is coded, yes
[13:23:28] <[exa]> tom__: you may though hit an infinite loop on testing if the correctness test tests the correctness properly, etc
[13:27:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51)
[13:30:32] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[13:30:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:30:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:32:01] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51) (Ping timeout: 245 seconds)
[13:32:05] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[13:32:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:32:29] *** Joins: fef (~thedawn@user/thedawn)
[13:33:14] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:33:43] *** Lord_of_Life_ is now known as Lord_of_Life
[13:34:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:35:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:36:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:37:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:38:41] *** Joins: kadir (~user@88.251.54.110)
[13:39:02] *** Quits: Guest6872 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[13:39:02] *** Joins: Guest6872 (~cat@user/sudden)
[13:39:02] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:39:08] *** Guest6872 is now known as sudden
[13:39:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:41:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:42:08] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:43:28] *** Joins: smunix (~smunix@static.26.70.12.49.clients.your-server.de)
[13:43:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:43:50] *** Quits: smunix (~smunix@static.26.70.12.49.clients.your-server.de) (Client Quit)
[13:44:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:44:35] *** Joins: smunix (~smunix@static.26.70.12.49.clients.your-server.de)
[13:44:59] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[13:45:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:46:35] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:48:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:48:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:50:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:51:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:52:26] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 245 seconds)
[13:52:48] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:53:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:55:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:55:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:55:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:56:18] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Remote host closed the connection)
[13:56:33] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[13:56:35] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:57:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:58:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:59:31] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[13:59:32] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[13:59:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:59:56] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Remote host closed the connection)
[14:00:03] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: closed)
[14:00:14] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[14:00:16] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[14:00:42] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:01:59] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[14:02:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:03:11] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:04:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:05:42] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:07:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:07:36] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[14:07:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:08:30] <Guest17> why does haskell accept `1 : [2, 3]` but not `: 1 [2]` ?
[14:08:55] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 250 seconds)
[14:09:06] <Guest17> `: 1 [2, 3]` but you get the point
[14:09:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:09:36] *** Joins: jakalx (~jakalx@base.jakalx.net)
[14:10:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:10:27] <gehmehgeh> Guest17: ":" is an infix operator
[14:10:39] <gehmehgeh> try  (:) 1 [2,3]
[14:10:45] <gehmehgeh> :-)
[14:11:04] <gehmehgeh> (if you really want to use it that way)
[14:11:21] <Guest17> I know (:) is supposed to work, but I want to know if this is a limitation in the grammar or something else
[14:11:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:11:56] <gehmehgeh> No, you use parentheses if you want to employ an infix operator the normal way. You can also use normal functions infix-style
[14:11:58] <gehmehgeh> with backtics
[14:12:04] <gehmehgeh> 10 `div` 2
[14:12:08] <gehmehgeh> instead of:   div 10 2
[14:12:42] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:13:09] <[exa]> Guest17: the parentheses are there to turn the operator from a grammatical thing into a normal identifier. E.g. these 2 things do something different: `id (:) [id]`, `id : [id]`
[14:13:36] <[exa]> (both have valid semantics)
[14:14:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:14:18] <[exa]> to reduce the amount of danger&surprise, it's kinda natural to avoid reinterpreting the binary operator with a missing argument as a function
[14:15:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:16:26] <[exa]> example: when parsing `+ 1`, is it a function for incrementing numbers by 1, or did someone forget to write the left argument?
[14:16:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:17:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:17:57] <Guest17> [exa]: well if someone forgot to write the left argument that would be a type error down the line, I don't really see why that's dangerous or suprising
[14:18:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:19:11] <Guest17> I'm asking not to pick on haskell, but I'm laying out a parser for a toy-lang™ and I'm not so sure how to handle infix operators
[14:19:31] *** Quits: deadmarshal (~deadmarsh@95.38.228.146) (Ping timeout: 245 seconds)
[14:19:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:20:13] <zincy> [exa] Thanks
[14:21:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:22:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:23:01] *** Joins: deadmarshal (~deadmarsh@95.38.228.146)
[14:23:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:24:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:25:34] <[exa]> Guest17: if you want to support custom operators, the best option is to parse expressions as lists of things first, then run a specialized algorithm for making sense of the priorities
[14:25:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:26:26] <[exa]> re the "corner operator", the semantics of the expression would change dramatically if someone would (by error) infer the wrong type, which I don't see as a very welcome behavior but ymmv
[14:26:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:26:51] <[exa]> might make better sense elsewhere
[14:28:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:29:00] *** Joins: LittleLemon (~AdiIRC@170.55.34.132)
[14:29:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:30:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:30:57] <[exa]> Guest17: example, you have an expression like "f + g h + (c d)", that you parse to something like [f, +, g, h, +, [c, d]]; at that point you are usually able to source the infix declarations from the file, so you can guess which things are operators and which are not, getting something like [f, op +, app g h, op +, app c d], and then you just run the shunting yard alg.
[14:31:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:32:07] <Guest17> [exa]: crystal clear!
[14:32:51] <Guest17> [exa]: something puzzling me is: https://stackoverflow.com/questions/54726221/parsing-custom-infix-operators-implementation-with-fparsec
[14:33:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:33:56] <[exa]> nah, parsing is puzzling if you're doing too many things at once
[14:34:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:34:18] <Guest17> the OP talked about something like: `takeOpAndOther + x`, how would the Shunting yard algorithm apply here?
[14:34:41] <[exa]> the usual way of doign robust parsers of such stuff is to tokenize first, then parse
[14:34:41] *** Quits: LittleLemon (~AdiIRC@170.55.34.132) (Quit: Going offline, see ya! (www.adiirc.com))
[14:35:34] <Guest17> I'm doing that, I'm just not sure if I should parse `+` and `add` as identifiers or reserve a `Operator` token
[14:35:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:35:45] <[exa]> anyway, this is an ambiguous parse, precisely the reason why we have the parens around (+)
[14:36:13] <[exa]> do you allow user-defined operators?
[14:36:28] <Guest17> That's what I intend to do yes
[14:36:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:36:47] <[exa]> okay, then you first need to know what are all the operators _before_ you are even able to parse this right
[14:36:51] <Guest17> it's proving to be a bit paralyzing but I'm interested in implementing it
[14:36:58] *** Joins: jgeerds (~jgeerds@55d45b75.access.ecotel.net)
[14:37:38] <Guest17> [exa]: I suppose I could build a list of declared operators pre-parsing
[14:37:44] <[exa]> yes
[14:38:12] <[exa]> hm actually let's have a look at how haskells do
[14:38:14] *** Joins: LittleLemon (~AdiIRC@170.55.34.132)
[14:38:14] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:38:51] <Guest17> and if I encounter + I treat it as an operator in the SY algorithm otherwise if it's (+) it behaves the same as a normal idnetifier
[14:38:54] *** Joins: Moyst_ (~moyst@user/moyst)
[14:39:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:39:22] <Guest17> [exa]: by all means let's do that x)
[14:40:03] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[14:40:09] *** Joins: ub (~Thunderbi@p200300ecdf0ba253489968441493cf16.dip0.t-ipconnect.de)
[14:40:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:41:13] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 250 seconds)
[14:41:35] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:41:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:43:04] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:43:15] <Guest17> and in terms of the lexer, I could first try recognizing a keyword (`type`), then a normal `abc_123'` identifier, then a reserved operator like `->` and finally a user defined operator
[14:43:20] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:9d34:9ef:e98a:2cbe)
[14:43:34] <[exa]> Guest17: so anyway they have a pretty generous definition of an operator here: https://github.com/ghc/ghc/blob/master/compiler/GHC/Parser/Lexer.x#L182
[14:43:41] *** Quits: Moyst_ (~moyst@user/moyst) (Ping timeout: 245 seconds)
[14:44:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:44:48] *** Joins: Moyst_ (~moyst@user/moyst)
[14:44:50] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[14:45:07] <[exa]> and I see the .y file with parser somehow disappeared from ghc 9 :]
[14:45:25] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:45:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:45:35] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:45:42] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:46:20] <Guest17> `$unisymbol = \x04 -- Trick Alex into handling Unicode.` is the funniest comment I've seen
[14:46:35] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:46:57] <Hecate> :')
[14:48:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:49:03] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:49:15] <[exa]> Guest17: older version of the parser here: https://github.com/ghc/ghc/blob/ghc-8.10/compiler/parser/Parser.y#L3538
[14:49:38] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.3)
[14:49:47] *** Joins: ub1 (~Thunderbi@p548c9fcb.dip0.t-ipconnect.de)
[14:49:57] *** Quits: ub (~Thunderbi@p200300ecdf0ba253489968441493cf16.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[14:50:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:51:23] <[exa]> Guest17: and then somewhere around infixexp roughly here https://github.com/ghc/ghc/blob/ghc-8.10/compiler/parser/Parser.y#L2576 you can find that they are parsing basically lists of [exp, op, exp, op, exp, op, ...]
[14:51:29] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[14:52:04] *** ub1 is now known as ub
[14:52:12] <boxscape_> [exa] https://github.com/ghc/ghc/blob/master/compiler/GHC/Parser.y
[14:52:44] <boxscape_> module names follow modern haskell practice now
[14:52:50] <boxscape_> GHC.Parser
[14:52:55] <boxscape_> GHC.Parser.Lexer
[14:53:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:53:27] <[exa]> o nice thanks
[14:54:08] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:55:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:56:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:57:12] <Square> can i create Proxy (b a) from Proxy a ?
[14:57:13] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:d16e:d5f5:18a5:65d5)
[14:57:53] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:58:15] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:58:41] <boxscape_> % :t fmap @Proxy
[14:58:41] <yahb> boxscape_: (a -> b) -> Proxy a -> Proxy b
[14:59:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:59:18] <boxscape_> Square I think you can but why not just create a new Proxy of type `Proxy (b a)`?
[15:00:08] <Square> boxscape_, im afraid i dont have "a" available other than as a proxy
[15:00:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:00:56] <boxscape_> Square you can probabaly use ScopedTypeVariables to get access to it, and then write `Proxy :: Proxy (b a)` (or `Proxy @(b a)`)
[15:00:57] *** Quits: haskl[error] (~haskl@user/haskl) (Read error: Connection reset by peer)
[15:01:45] <boxscape_> % foo :: forall a b . Proxy a -> Proxy (b a); foo Proxy = (Proxy :: Proxy (b a))
[15:01:46] <yahb> boxscape_: 
[15:01:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:03:04] *** Joins: haskl (~haskl@user/haskl)
[15:03:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:03:40] <[exa]> Guest17: the parser code there is complicated so I didn't find the priority-solving part yet, maybe someone other will know
[15:04:21] <Guest17> [exa]: as far as I know its handled through infix statements yes?
[15:04:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:04:31] <[exa]> likely
[15:05:49] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:05:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:06:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:06:53] <Square> boxscape_, thanks for the advice! Appreciated
[15:07:01] <boxscape_> np
[15:07:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:08:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:09:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[15:10:27] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[15:11:08] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:12:00] *** Quits: ymherklotz (~ymherklot@2a0c:5bc0:40:107b:fdfc:4d2d:898a:f9f5) (Read error: Connection reset by peer)
[15:12:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:13:39] *** Parts: kadir (~user@88.251.54.110) (ERC (IRC client for Emacs 27.1))
[15:13:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:14:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:14:10] *** Joins: namkeleser (~namkelese@101.175.102.188)
[15:14:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:16:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[15:16:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:16:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:16:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[15:17:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:17:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:18:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[15:19:06] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:19:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:20:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:21:24] *** Quits: _xor (~xor@72.49.199.147) (Ping timeout: 268 seconds)
[15:21:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:22:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[15:22:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:23:33] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[15:24:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:25:29] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:26:08] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[15:26:14] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b)
[15:27:02] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:27:58] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:28:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:29:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:31:03] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:32:36] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:33:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:33:44] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 256 seconds)
[15:35:07] *** Joins: kayprish (~kayprish@185.37.27.218)
[15:35:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:36:14] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:37:14] *** Quits: LittleLemon (~AdiIRC@170.55.34.132) (Quit: Going offline, see ya! (www.adiirc.com))
[15:37:32] *** Joins: stefan-_ (~cri@42dots.de)
[15:37:38] *** Joins: LittleLemon (~AdiIRC@170.55.34.132)
[15:37:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:38:37] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:38:51] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:d16e:d5f5:18a5:65d5) (Quit: Textual IRC Client: www.textualapp.com)
[15:38:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:40:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:41:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:41:40] *** Quits: kayprish (~kayprish@185.37.27.218) (Ping timeout: 256 seconds)
[15:41:52] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[15:42:22] *** Quits: Moyst_ (~moyst@user/moyst) (Ping timeout: 268 seconds)
[15:43:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:43:39] *** Joins: FragByte (~christian@user/fragbyte)
[15:44:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:44:57] *** Joins: Moyst_ (~moyst@user/moyst)
[15:45:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:47:14] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:47:40] *** Joins: machinedgod (~machinedg@24.105.81.50)
[15:48:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:49:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:51:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:52:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:54:06] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:54:06] *** Joins: Moyst (~moyst@user/moyst)
[15:55:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:55:21] *** Joins: neurocyte0132889 (~neurocyte@195.80.52.229)
[15:55:21] *** Quits: neurocyte0132889 (~neurocyte@195.80.52.229) (Changing host)
[15:55:21] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[15:56:49] *** Quits: Moyst_ (~moyst@user/moyst) (Ping timeout: 250 seconds)
[15:56:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:58:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:58:48] *** Joins: ph88^ (~ph88@2a02:8109:9e00:71d0:fd99:6e74:1b49:af22)
[15:59:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:00:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:01:18] *** Quits: LittleLemon (~AdiIRC@170.55.34.132) (Quit: Going offline, see ya! (www.adiirc.com))
[16:01:57] *** Joins: LittleLemon (~AdiIRC@170.55.34.132)
[16:02:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:02:32] *** Quits: ph88_ (~ph88@2a02:8109:9e00:71d0:15f2:638c:7ed7:4999) (Ping timeout: 240 seconds)
[16:03:18] *** Joins: jumper149 (~jumper149@static.6.71.203.116.clients.your-server.de)
[16:03:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:04:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:05:21] *** Joins: Organizers|Robin (~Robin_Jad@152.67.64.160)
[16:06:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:07:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:08:44] *** Quits: LittleLemon (~AdiIRC@170.55.34.132) (Ping timeout: 265 seconds)
[16:08:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:10:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:11:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:13:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:13:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:14:26] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:15:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:17:09] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[16:17:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:18:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:19:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:19:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:21:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:22:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:23:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[16:24:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:24:46] *** Joins: Moyst_ (~moyst@user/moyst)
[16:25:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:25:51] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:26:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:26:47] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 268 seconds)
[16:27:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:27:45] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[16:28:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:28:40] *** Moyst_ is now known as Moyst
[16:28:54] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:29:35] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Client Quit)
[16:29:44] *** Quits: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[16:29:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:30:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[16:30:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:32:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:32:40] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:33:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:35:03] *** Parts: zero (~z@user/zero) ()
[16:35:10] *** Joins: zzz (~z@user/zero)
[16:35:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:35:49] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b) (Quit: gone to sleep. ZZZzzz…)
[16:36:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:37:14] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b)
[16:38:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:38:19] <zzz> for the past few year i've been learning haskell on my spare time and enjoying it with the help of books and this channel alone to the point of being very productive with it. you guy are awesome, thank you
[16:39:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:39:21] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Session timeout))
[16:39:51] <zzz> my 's' key is failing me today but you get the point
[16:40:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:41:06] <Axman6> that must uck zzz :)
[16:41:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:42:08] <zzz> it' very trful
[16:42:53] <zzz> *treful. oh no...
[16:43:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:44:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:46:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:47:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:48:32] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[16:48:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:49:59] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[16:50:08] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:50:42] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[16:51:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:52:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:53:27] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[16:53:54] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[16:54:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:55:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:56:04] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[16:57:14] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:57:21] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[16:58:02] *** Quits: jgeerds (~jgeerds@55d45b75.access.ecotel.net) (Ping timeout: 240 seconds)
[16:58:29] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:00:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:01:25] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:02:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:04:04] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:04:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:04:10] *** Joins: ph88_ (~ph88@2a02:8109:9e00:71d0:4444:8213:8d5f:108f)
[17:05:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:06:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:08:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:08:08] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[17:08:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:08:43] *** Quits: ph88^ (~ph88@2a02:8109:9e00:71d0:fd99:6e74:1b49:af22) (Ping timeout: 268 seconds)
[17:09:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:11:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:11:32] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:11:48] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 268 seconds)
[17:12:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[17:12:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[17:13:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:13:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:14:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:14:33] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:15:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[17:16:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:16:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:17:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[17:18:04] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:18:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:19:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:21:03] *** Joins: max22- (~maxime@2a01cb08833598000bfe347d6ecb53d2.ipv6.abo.wanadoo.fr)
[17:21:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:21:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:21:39] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:22:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:23:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:25:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:26:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:28:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:29:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:30:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:31:06] *** Joins: lagash (lagash@lagash.shelltalk.net)
[17:32:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:33:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:35:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:35:25] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2)
[17:35:46] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b) (Quit: gone to sleep. ZZZzzz…)
[17:36:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:37:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:39:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:39:57] *** Joins: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net)
[17:40:17] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[17:40:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:41:28] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[17:42:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:43:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:43:28] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Ping timeout: 260 seconds)
[17:44:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:45:03] *** Joins: _xor (~xor@72.49.199.147)
[17:45:12] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:45:24] *** Quits: hueso_ (~root@user/hueso) (Ping timeout: 265 seconds)
[17:46:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[17:47:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:48:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:49:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:50:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:50:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[17:51:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:53:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:53:35] *** Joins: nucranium (~nucranium@2a02:8010:6173:0:2164:de0d:a8d4:46df)
[17:53:42] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Ping timeout: 256 seconds)
[17:54:31] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:56:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:57:16] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:57:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:57:39] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[17:57:43] <L29Ah> is there a public service or a script that i can utilize to check whether my haskell projects build against the latest libs' releases?
[17:58:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:59:15] <fendor[m]> Can I avoid using 'makeLens' without writing it myself? E.g. Can I achieve the same as 'makeLens' without TH and not writing it myself? Or is this eating my cake and having it too?
[17:59:24] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[18:00:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:01:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:02:13] *** Joins: kayprish (~kayprish@185.37.27.218)
[18:02:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:03:59] <[exa]> L29Ah: if the thing is on hackage, you can have a look at the build matrix which is there for this purpose
[18:04:09] <Rembane_> fendor[m]: There are generics, I have never tried them myself though: https://github.com/kcsongor/generic-lens
[18:04:14] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[18:04:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:04:51] <[exa]> L29Ah: other than that I'm not sure but you might be happy with just having a CI on github that triggers regularly and tries it.
[18:05:00] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[18:05:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:05:56] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[18:06:12] <[exa]> wow, generic-lens claims almost zero overhead, good
[18:07:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:07:29] <Rembane_> I haven't really thought about it, but what's the overhead of the other approaches? 
[18:07:50] <kennyd> oh, 9.2 became stable! that's the Record Dot Syntax release, isn't it
[18:08:05] <geekosaur> yes
[18:08:35] <fendor[m]> Rembane_: Template Haskell? It affects recompilation checks
[18:08:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[18:09:34] *** Quits: deadmarshal (~deadmarsh@95.38.228.146) (Ping timeout: 256 seconds)
[18:10:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:10:33] <Rembane_> fendor[m]: It does indeed. Everything is always recompiled. :/
[18:11:07] <fendor[m]> yeah, it sucks a bit.
[18:11:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:11:41] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC)
[18:11:55] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[18:12:16] *** Quits: xsperry (~xs@user/xsperry) ()
[18:12:39] *** Joins: xsperry (~xs@user/xsperry)
[18:13:08] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[18:13:08] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:13:37] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b)
[18:14:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[18:14:42] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[18:15:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:16:20] <L29Ah> [exa]: is it possible to subscribe to failures or no-ip?
[18:17:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:18:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:18:59] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[18:19:02] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[18:19:31] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[18:20:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:21:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:22:39] *** Joins: Moyst_ (~moyst@user/moyst)
[18:22:51] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 245 seconds)
[18:22:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:24:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:25:21] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 245 seconds)
[18:25:47] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:27:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:28:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:30:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:31:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:32:22] *** Joins: reumeth (~reumeth@user/reumeth)
[18:32:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51)
[18:32:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:34:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:34:11] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[18:35:35] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:35:46] *** Joins: deadmarshal (~deadmarsh@95.38.228.146)
[18:36:43] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51) (Ping timeout: 250 seconds)
[18:37:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:37:05] *** Joins: xkuru (~xkuru@user/xkuru)
[18:38:36] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:38:37] *** Joins: exbios (~ri@2806:2f0:90a0:876c:954a:4038:b756:10de)
[18:40:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:41:35] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:42:42] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:43:04] *** Joins: Axman6 (~Axman6@user/axman6)
[18:43:58] <Axman6> fendor[m]: I disconnected for a bit, but did anyone suggest generic-lens?
[18:44:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:44:25] <fendor[m]> Axman6: Yep, Rembane did
[18:45:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:45:42] <Axman6> great
[18:47:02] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:48:09] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:48:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:48:27] *** Joins: ph88^ (~ph88@ip5f5af068.dynamic.kabel-deutschland.de)
[18:48:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:49:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[18:49:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:51:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:51:47] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[18:52:18] *** Quits: ph88_ (~ph88@2a02:8109:9e00:71d0:4444:8213:8d5f:108f) (Ping timeout: 260 seconds)
[18:52:19] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e35059025bf8f5e09b5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[18:52:35] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:53:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:54:31] *** Quits: deadmarshal (~deadmarsh@95.38.228.146) (Ping timeout: 245 seconds)
[18:55:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:56:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[18:56:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:57:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:57:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:57:27] *** Joins: wroathe (~wroathe@user/wroathe)
[18:58:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:58:31] *** Gurkenglas is now known as Gureknglas
[18:59:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:59:40] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[19:01:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:02:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:02:44] *** Quits: kayprish (~kayprish@185.37.27.218) (Ping timeout: 265 seconds)
[19:03:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:04:44] *** Joins: rk04 (~rk04@user/rajk)
[19:05:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:06:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:08:25] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:08:45] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:09:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:11:26] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:11:39] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[19:12:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:12:59] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[19:13:47] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[19:13:53] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[19:14:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[19:15:08] *** Joins: zaquest (~notzaques@5.130.79.72)
[19:15:46] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Ping timeout: 245 seconds)
[19:15:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:16:37] *** Joins: deadmarshal (~deadmarsh@95.38.228.146)
[19:17:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:18:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:20:03] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:21:03] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:21:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:22:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:24:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:25:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:27:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:27:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:28:31] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:30:06] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:30:18] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[19:31:03] *** Quits: shailangsa (~shailangs@host86-186-136-24.range86-186.btcentralplus.com) (Remote host closed the connection)
[19:31:18] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:32:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:33:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:33:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[19:35:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:35:56] *** Joins: jgeerds (~jgeerds@55d45b75.access.ecotel.net)
[19:36:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:37:27] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: closed)
[19:37:41] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[19:38:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:39:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:40:42] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[19:41:03] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[19:41:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:42:08] <iphy> where are the new yaml files for stack? https://github.com/commercialhaskell/lts-haskell only goes up to 14.27
[19:42:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:42:30] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[19:43:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:44:21] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[19:45:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:46:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:46:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:48:04] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:48:06] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[19:48:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:48:41] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[19:48:53] <zzz> "in the beginning, the universe and record syntax were created. this had made many people very angry and has been widely regarded as a bad move"
[19:49:33] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[19:49:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:50:06] <Rembane_> zzz: What's the source of that quote? :)
[19:50:16] <zzz> Haskeller's Guide to the GHC?
[19:50:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:52:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:52:34] <zzz> (it's the opening of The Restaurant at the End of the Universe (the 2nd book in hitchiker's guide to the galaxy), i just added record syntax)
[19:52:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[19:52:44] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Ping timeout: 268 seconds)
[19:52:54] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:53:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:54:31] *** Joins: kayprish (~kayprish@185.37.26.208)
[19:55:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:56:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:58:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:59:32] *** Quits: kayprish (~kayprish@185.37.26.208) (Ping timeout: 240 seconds)
[19:59:49] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:00:27] *** Joins: kayprish (~kayprish@77.243.23.219)
[20:01:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:02:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:04:02] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:05:08] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:06:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:06:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:08:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:09:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:10:13] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:10:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:11:05] *** Joins: shailangsa (~shailangs@host86-186-136-24.range86-186.btcentralplus.com)
[20:12:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:13:16] *** Quits: jgeerds (~jgeerds@55d45b75.access.ecotel.net) (Ping timeout: 245 seconds)
[20:13:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:13:59] *** Quits: hiruji (~hiruji@user/hiruji) (Quit: ZNC 1.8.2 - https://znc.in)
[20:14:46] *** Joins: hiruji (~hiruji@user/hiruji)
[20:15:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:15:56] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:16:49] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:18:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:19:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:21:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:21:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:21:26] *** Quits: kayprish (~kayprish@77.243.23.219) (Ping timeout: 260 seconds)
[20:22:13] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[20:22:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:22:31] *** Joins: Guest9947 (~Guest99@90-224-172-26-no129.tbcn.telia.com)
[20:23:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:23:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:25:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:25:26] *** Quits: Organizers|Robin (~Robin_Jad@152.67.64.160) (Ping timeout: 268 seconds)
[20:26:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:26:48] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Ping timeout: 260 seconds)
[20:28:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:28:27] *** Joins: fef (~thedawn@user/thedawn)
[20:29:04] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[20:29:34] *** Joins: alzgh (~alzgh@user/alzgh)
[20:29:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:30:03] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:30:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:31:43] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (Quit: WeeChat 3.3)
[20:32:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:32:54] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:32:55] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:32:55] *** Joins: wroathe (~wroathe@user/wroathe)
[20:33:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:33:58] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[20:35:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:35:21] *** Quits: max22- (~maxime@2a01cb08833598000bfe347d6ecb53d2.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[20:36:16] *** Joins: max22- (~maxime@2a01cb08833598002d178c07f23bab16.ipv6.abo.wanadoo.fr)
[20:36:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:37:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[20:37:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:39:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:40:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:41:43] *** Joins: lbseale_ (~ep1ctetus@user/ep1ctetus)
[20:41:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:43:04] *** Quits: lbseale_ (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[20:43:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:43:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:44:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:45:42] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 260 seconds)
[20:45:53] <janus> iphy: they were moved to a repo that contains both lts and nightly
[20:46:06] <janus> iphy: you can find it in the same org. if you can't find it, let me know
[20:46:17] <iphy> ah
[20:46:24] <iphy> janus: thanks
[20:46:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:46:39] <iphy> yup, found it: https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/17/2.yaml
[20:47:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:49:15] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:50:18] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:50:27] <EvanR> https://paste.tomsmeding.com/pEkhiK4j
[20:50:47] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:51:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:53:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:53:06] <dsal> When someone asks if you're a god, you say yes.
[20:53:14] *** fjmorazan_ is now known as fjmorazan
[20:54:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:55:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:57:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:57:48] <janus> god is not great enough, needs to be capitalized :P
[20:58:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:00:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:01:25] <dsal> Depends on whether we're talking about what type of person EvanR is, or whether it's just a value judgment.
[21:01:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:01:44] <EvanR> no I agree with dsal
[21:03:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:03:26] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 260 seconds)
[21:04:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:04:29] *** Quits: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2) (Ping timeout: 250 seconds)
[21:05:36] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:06:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:08:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:08:45] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[21:09:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:11:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:11:45] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:11:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:11:46] *** Joins: wroathe (~wroathe@user/wroathe)
[21:11:46] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[21:12:20] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2)
[21:12:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:13:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:15:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:16:08] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Ping timeout: 265 seconds)
[21:16:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:17:42] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:18:07] *** Quits: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2) (Ping timeout: 260 seconds)
[21:18:15] *** Joins: oxide (~lambda@user/oxide)
[21:19:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:20:30] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:22:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:22:48] *** Joins: retro_ (~retro@97e2ba2e.skybroadband.com)
[21:23:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:24:00] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[21:25:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:25:14] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[21:26:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:26:11] *** Parts: \dev\ice (~benner@2a01:4f8:1c1c:2178::1) ()
[21:27:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:28:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:30:19] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2)
[21:30:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:31:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:32:08] <mjrosenb> has anyone been able to get stack traces with ghjcs? I've added some HasCallStack contexts, but I'm not seeing anything in the error messages.
[21:33:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:34:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:36:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:37:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:38:38] *** Quits: SquidDev (~SquidDev@autoclave.squiddev.cc) (Quit: Bye!)
[21:39:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:39:26] *** Joins: SquidDev (~SquidDev@autoclave.squiddev.cc)
[21:40:30] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:41:58] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[21:42:06] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:43:12] *** Quits: deadmarshal (~deadmarsh@95.38.228.146) (Ping timeout: 256 seconds)
[21:43:35] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:43:54] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:45:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:45:26] *** Joins: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net)
[21:46:01] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[21:46:30] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:48:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:49:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:49:33] *** Joins: econo (uid147250@user/econo)
[21:50:28] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[21:50:47] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[21:50:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:52:18] *** Quits: MrNobody_0000000 (~MrNobody@user/mrnobody-0000000/x-9129771) (Quit: MrNobody_0000000)
[21:52:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:53:01] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[21:53:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[21:57:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:57:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:57:37] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[21:59:17] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:59:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:59:42] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[22:01:04] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[22:01:12] *** Quits: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net) (Read error: Connection reset by peer)
[22:03:14] <EvanR> Ah whitespace mattering in haskell (t':ts) vs (t ': ts)
[22:03:40] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (Quit: leaving)
[22:04:07] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:04:21] <Rembane_> EvanR: Didn't GHC like your new and fancy operator? 
[22:04:25] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:06:05] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:07:01] *** Joins: deadmarshal (~deadmarsh@95.38.228.146)
[22:07:06] *** Joins: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x)
[22:07:39] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:08:28] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[22:12:19] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[22:12:26] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:14:52] <hpc> you can name operators with '?
[22:15:47] <hpc> or just a typo?
[22:15:54] <Rembane_> hpc: Nope, I was wrong. It becomes a syntax error. 
[22:16:56] <int-e> :t Proxy :: Proxy ('() ': '[])
[22:16:57] <lambdabot> Proxy '['()]
[22:17:00] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:17:24] <Rembane_> Is that a type level list? 
[22:17:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:17:48] <int-e> yes
[22:17:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:18:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:18:00] *** Joins: wroathe (~wroathe@user/wroathe)
[22:18:54] <EvanR> t':ts it thinks t' is a variable, I think
[22:19:57] <EvanR> the poor lexer
[22:20:17] *** Quits: kuribas (~user@ptr-25vy0i9092f7cof0r9n.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[22:20:21] *** Quits: Gureknglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[22:21:33] <int-e> :t Proxy :: Proxy ('True':'[])
[22:21:34] <lambdabot> error:
[22:21:34] <lambdabot>     Not in scope: data constructor ‘True'’
[22:21:34] <lambdabot>     Perhaps you meant ‘True’ (imported from Data.Bool)
[22:21:46] <int-e> :t Proxy :: Proxy ('True ': '[])
[22:21:47] <lambdabot> Proxy '[ 'True]
[22:21:50] <int-e> unsurprising
[22:22:20] <awpr> another reason for https://gitlab.haskell.org/ghc/ghc/-/issues/20531
[22:22:38] <awpr> no single quote = no whitespace weirdness
[22:23:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[22:23:38] <int-e> 't' might also be a character literal, hmm
[22:23:39] *** Joins: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net)
[22:23:49] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:9d34:9ef:e98a:2cbe) (Read error: Connection reset by peer)
[22:24:43] <EvanR> oh jeez
[22:26:29] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[22:28:09] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:9d34:9ef:e98a:2cbe)
[22:32:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:32:30] *** Joins: rk04 (~rk04@user/rajk)
[22:34:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:34:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:35:07] *** Quits: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: Using Circe, the loveliest of all IRC clients)
[22:36:17] *** Joins: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x)
[22:38:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:38:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:41:27] <EvanR> awpr, wow... I don't even need the ' xD
[22:43:41] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[22:44:11] *** Quits: koz (~koz@121.99.240.58) (Ping timeout: 268 seconds)
[22:46:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:46:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:46:59] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b) (Quit: gone to sleep. ZZZzzz…)
[22:49:14] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[22:49:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:50:57] *** Joins: koz (~koz@121.99.240.58)
[22:51:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[22:52:38] <EvanR> is there something like a kind synonym
[22:53:23] <EvanR> or is the type synonym syntax supposed to work for that
[22:53:53] <geekosaur> type synonyms should work but you may need an extension
[22:53:55] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[22:55:35] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:55:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:55:56] *** Joins: jespada (~jespada@87.74.37.56)
[22:56:35] <hskpractice> when i build with stack i want to somehow inline a few text files that are basically non-code libraries, so that i don't have to ship with those libraries, but just have one self-contained binary. am i thinking about it in the wrong way?
[22:56:43] <hskpractice> any idea on how i would accomplish that?
[22:56:55] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51)
[22:57:03] *** Quits: jespada (~jespada@87.74.37.56) (Read error: Connection reset by peer)
[22:57:04] <EvanR> I tried to establish a sort of schema for a record like type X = [("symbol", Float)]
[22:57:13] <EvanR> it complains that "symbol" is a Symbol not a *
[22:57:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:57:32] *** Quits: deadmarshal (~deadmarsh@95.38.228.146) (Ping timeout: 240 seconds)
[22:57:35] *** Quits: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: Using Circe, the loveliest of all IRC clients)
[22:57:38] *** Joins: jespada (~jespada@87.74.37.56)
[22:58:04] <awpr> :kind! (,)
[22:58:17] <awpr> > :kind! (,)
[22:58:18] <geekosaur> % :kind! (,)
[22:58:18] <yahb> geekosaur: * -> * -> *; = (,)
[22:58:19] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[22:58:27] <EvanR> oh dang
[22:58:52] <awpr> that one would actually need a quote, since a promoted tuple is different from the type of tuples
[22:58:54] <EvanR> how is that working then... I'm using a pair of Symbol and * in the implementation of the record
[22:59:15] <geekosaur> % :set -XPolyKinds
[22:59:16] <yahb> geekosaur: 
[22:59:23] <geekosaur> % :kind! (,)
[22:59:23] <yahb> geekosaur: * -> * -> *; = (,)
[22:59:28] <geekosaur> feh
[22:59:39] <awpr> % :kind! '(,
[22:59:39] <yahb> awpr: ; <interactive>:1:4: error: parse error (possibly incorrect indentation or mismatched brackets)
[22:59:40] <awpr> % :kind! '(,)
[22:59:40] <yahb> awpr: a -> b -> (a, b); = '(,)
[22:59:55] <EvanR> ah it was the quote... and maybe also polykinds
[23:01:32] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[23:03:20] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Remote host closed the connection)
[23:03:39] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[23:03:58] <hpc> why is yahb formatting it like that?
[23:05:03] <hpc> oh, normalized type
[23:06:48] <EvanR> :kind (,)
[23:06:55] <EvanR> i see
[23:07:08] <sm> hskpractice: file-embed package ?
[23:07:26] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[23:08:16] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[23:09:01] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Quit: Lost terminal)
[23:11:54] <geekosaur> I think LB only understands it as :k and doesn't support :k!
[23:11:58] <geekosaur> :k (,)
[23:11:59] <lambdabot> * -> * -> *
[23:12:16] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[23:14:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:14:39] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:16:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:16:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:17:49] *** Quits: mbuf (~Shakthi@122.174.185.81) (Quit: Leaving)
[23:18:57] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[23:19:31] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 245 seconds)
[23:20:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:21:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:21:45] *** Joins: Everything (~Everythin@37.115.210.35)
[23:24:14] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[23:26:15] *** Quits: Guest9947 (~Guest99@90-224-172-26-no129.tbcn.telia.com) (Quit: Client closed)
[23:29:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:29:52] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Quit: Using Circe, the loveliest of all IRC clients)
[23:30:50] *** Quits: ub (~Thunderbi@p548c9fcb.dip0.t-ipconnect.de) (Quit: ub)
[23:33:56] *** Joins: rk04 (~rk04@user/rajk)
[23:35:19] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 260 seconds)
[23:35:22] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 268 seconds)
[23:36:44] *** Joins: juhp (~juhp@128.106.188.82)
[23:39:51] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:39:51] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:39:51] *** Joins: wroathe (~wroathe@user/wroathe)
[23:45:43] *** Joins: pavonia (~user@user/siracusa)
[23:48:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[23:51:42] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:55:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:56:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:57:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:58:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:58:40] *** Quits: rk04 (~rk04@user/rajk) (Quit: rk04)
[23:58:54] <hololeap>  /usr/lib64/x86_64-linux-ghc-9.2.1/libHSnetwork-uri-2.6.4.1-LtJsElfesy1349BRswtapk-ghc9.2.1.so
[23:59:04] <hololeap> anyone know what the string LtJsElfesy1349BRswtapk is?
[23:59:13] <geekosaur> ABI hash
[23:59:25] <hololeap> oh, how does that get calculated?
[23:59:31] <geekosaur> ghc computes it during compilation
