[00:48:55] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 240 seconds)
[01:55:34] *** Quits: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[02:13:47] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:42:26] <greenbagels> so i'm trying to write a physics simulation thing and im having some trouble with parametric structs and constructors
[02:43:35] <greenbagels> https://p.sicp.me/mpWDc.jl basically this is a cut-down version of teh code i'm trying to write; it simulates a process happening on an n-dimensional grid, and im trying to make it general enough to handle extensions to "reasonable enough" subtypes of AbstractLattice
[02:44:27] <greenbagels> the problem is, i'm not really sure how to handle the parametric in the Simulation struct; I had it working with a less general version, but recently ive been running into an error like:
[02:45:00] <greenbagels> ERROR: LoadError: LoadError: TypeError: in <:, expected Type, got a value of type TypeVar
[02:45:14] <greenbagels> (this would correspond to line 25 in the example)
[02:46:08] <greenbagels> the idea is that the constructor will have to do stuff that's type-dependent on the lattice type, so i'd later write outer constructors specializing to things like AbstractSquareLattice
[02:48:54] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 252 seconds)
[02:53:15] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[03:00:25] <greenbagels> (actually, i would write more inner constructors later for other types, not outer ones)
[04:05:11] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:33:24] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[04:44:11] <^[> greenbagels: I think line 29 should be "function Simulation{T, L}(dims::U) where {T<:Real, L<:AbstractLattice, U<:Tuple}".
[04:44:46] <^[> See https://docs.julialang.org/en/v1/manual/constructors/#Parametric-Constructors
[04:48:47] *** Joins: Sofia (~sofia@user/sofia)
[04:59:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[05:01:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:32:53] *** Joins: Batzy (~quassel@user/batzy)
[05:36:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[05:38:54] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:13:50] *** Quits: seds (sid492514@user/seds) ()
[06:14:04] *** Joins: seds (sid492514@user/seds)
[06:14:20] *** Parts: seds (sid492514@user/seds) ()
[06:18:28] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[06:27:13] <greenbagels> ^[: i see; at some point i must have mixed the two syntaxes together, odd
[06:27:15] <greenbagels> i will try that
[06:31:06] <greenbagels> ^[: works perfectly!
[06:52:09] *** Joins: notzmv (~zmv@user/notzmv)
[07:26:18] <^[> \o/
[07:29:29] <greenbagels> though now i do have a follow-up quesiton
[07:30:26] <greenbagels> so for things like BitArray{N}(undef, dims::NTuple{N, Int}) and AbstractArray{T, N}; is it normal for the "N" parameter to be of type Any?
[07:31:12] <greenbagels> i looked at Julia's implementation for these in Base and it seems to be that way; is that the standard way to handle parameters that are numeric constants?
[07:44:53] <adigitoleo> that's always how I've seen it done, good to know that it's an Any. I wonder if there's a good reason for that
[07:50:15] <greenbagels> adigitoleo: well i don't know that for sure (i'm not julia expert, hah) but thats what i surmised
[07:55:42] <greenbagels> i guess i should say its a subtype of Any? which isnt to say much since Any is at the top of the lattice of subtypes...
[07:57:57] <adigitoleo> Everything is a subtype of Any, I think
[07:58:04] <greenbagels> right
[07:58:30] <greenbagels> but i mean specifically like https://github.com/JuliaLang/julia/blob/bf534986350a991e4a1b29126de0342ffd76205e/base/tuple.jl#L19
[07:58:39] <greenbagels> > _counttuple(::Type{<:NTuple{N,Any}}) where {N} = N
[07:58:55] <greenbagels> "where {N}" is the same as where "{N <: Any}", right?
[08:01:02] <adigitoleo> Oh, that's the type parameter. It's just a placeholder that gets resolved to a specific type when the constructor is called. I think it's maybe a TypeVar type, not sure
[08:02:29] <adigitoleo> Sort of the same as N <: Any (again, that's implied for literally everything) but doesn't mean that N isa Any for the reified type
[08:03:53] <adigitoleo> not sure I'm explaining it well, I'm not very confortable with parametric types myself yet
[08:04:29] <greenbagels> i got what you mean
[08:04:48] <greenbagels> easy enough to test too, clearly if it were anything (aka subtype of Any) then you could make a tuple of floating-point length
[08:04:53] <greenbagels> which... you obviously cant, haha
[08:05:20] <greenbagels> yeah i need to get better at understanding the type system
[08:06:15] <adigitoleo> yeah, it helped me to think about parametric types as a compact syntax for a whole bunch of declarations, so there's not really a "N" type
[08:07:33] <greenbagels> right, they're those UnionAll things or whatever
[08:07:44] <greenbagels> i think of them as C++ template args, heh
[08:33:35] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[08:48:10] *** Joins: Sofia (~sofia@user/sofia)
[09:05:15] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[09:19:40] *** Joins: Sofia (~sofia@user/sofia)
[10:04:26] *** Quits: Sofia (~sofia@user/sofia) (Remote host closed the connection)
[10:04:49] *** Joins: Sofia (~sofia@user/sofia)
[12:33:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[13:16:19] <energizer> yes
[13:16:22] <energizer> julia> T where T
[13:16:22] <energizer> Any
[14:48:26] *** Joins: notzmv (~zmv@user/notzmv)
[17:11:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:28:33] *** Quits: kmh (~kmh@2a00:6020:5004:6800:5555:27f0:7629:76f0) (Quit: Leaving)
[19:41:14] *** Joins: kmh (~kmh@2a00:6020:5004:6800:94b4:4b15:429c:7c05)
[19:51:27] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[20:37:42] *** Quits: kmh (~kmh@2a00:6020:5004:6800:94b4:4b15:429c:7c05) (Quit: Leaving)
[20:44:26] *** Joins: kmh (~kmh@2a00:6020:5004:6800:94b4:4b15:429c:7c05)
[21:00:35] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 240 seconds)
[21:05:35] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[21:09:16] *** Joins: Sofia (~sofia@user/sofia)
[21:14:16] *** Quits: kmh (~kmh@2a00:6020:5004:6800:94b4:4b15:429c:7c05) (Remote host closed the connection)
[21:27:06] *** Joins: kmh (~kmh@2a00:6020:5004:6800:94b4:4b15:429c:7c05)
[21:55:30] *** Quits: kmh (~kmh@2a00:6020:5004:6800:94b4:4b15:429c:7c05) (Quit: Leaving)
[21:58:50] *** Joins: kmh (~kmh@2a00:6020:5004:6800:a487:bfd9:1cce:4fb7)
[22:11:15] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[22:11:48] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[22:26:41] *** Joins: Sofia (~sofia@user/sofia)
[22:33:49] *** Quits: kmh (~kmh@2a00:6020:5004:6800:a487:bfd9:1cce:4fb7) (Read error: Connection reset by peer)
[22:34:02] *** Joins: kmh (~kmh@2a00:6020:5004:6800:a487:bfd9:1cce:4fb7)
[23:05:20] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
