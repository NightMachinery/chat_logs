[00:00:45] <RandomReader> put another way, absent other requirements, I'd expect message dispatching like this to be handling pure message content .. at this level, every message is equivalent, because the sending side has serialized the data and the receiving side will deserialize it, so there's a raw data packet which has no inherent type
[00:00:48] <great_taste> i.e. heterogeneous vector
[00:01:08] <RandomReader> if it's *more* than that, it sounds like something other than a general message queue
[00:01:17] <great_taste> this is not raw data, there's no serialization
[00:02:14] <RandomReader> then I'd wonder why it's being expressed in generic form where it might duplicate data it doesn't understand
[00:02:25] <RandomReader> if there's this much structure, why isn't the usage of it already more defined?
[00:02:51] <RandomReader> (these are questions because I don't know your use case, I'm not picking on anything here)
[00:03:15] <great_taste> yeah I know, we'd have to get into too much detail for you to understand I guess
[00:03:36] <great_taste> but in short, I am using EnTT and I need to send entities and components from one registry into another
[00:03:54] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[00:04:03] <great_taste> so I have a vector of pools of components, which are internally (entity, Component) pairs
[00:04:27] <great_taste> and on the other end I need to call the virtual function to replace these components in the other registry
[00:04:49] <great_taste> the call to replace (literally registry.replace<Component>(entity)) must know the type.
[00:07:49] <RandomReader> ah, ok, unfortunately I'm not much use for EnTT concerns
[00:08:34] <RandomReader> but seems to boil down to what was already mentioned .. arrange for read-only, or implement cloning
[00:09:07] <great_taste> Thanks \o/
[00:11:55] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[00:15:20] *** Joins: joilerv (~joilerv@135.129.250.144)
[00:16:11] *** Quits: jsbach (~jsbach@2a01:c23:5cca:cf00:d5a:9b23:2dbc:fe19) (Ping timeout: 256 seconds)
[00:16:36] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:21:15] *** Joins: joilerv_ (~joilerv@135.129.250.144)
[00:22:46] *** Joins: jsbach (~jsbach@2a01:c23:5cca:cf00:d5a:9b23:2dbc:fe19)
[00:23:25] *** Quits: joilerv (~joilerv@135.129.250.144) (Ping timeout: 250 seconds)
[00:24:53] *** Joins: p-i-_ (~Ohmu@183.89.38.16)
[00:26:25] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:27:57] *** Quits: p-i- (~Ohmu@2403:6200:8978:8b4d:3897:4978:8f12:ada4) (Ping timeout: 240 seconds)
[00:28:39] *** malinus_ is now known as malinus
[00:28:47] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[00:29:10] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Client Quit)
[00:29:20] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 252 seconds)
[00:30:01] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:34:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:42:42] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[00:42:53] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Quit: Hello71)
[00:44:51] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:46:47] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[00:47:47] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[00:49:30] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[00:49:30] *** Quits: magla (~gelignite@55d4c694.access.ecotel.net) (Quit: Stay safe!)
[00:51:58] *** Joins: kilitary (~kilitary@188.242.105.134)
[00:54:23] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:54:29] <jokoon> using nohlman, json_obj["key"].get(vector<int>) generates an error...
[00:54:58] <jokoon> I used json_obj.count("key") to check presence
[00:58:14] *** Joins: df00z (~df00z@rrcs-50-75-26-170.nys.biz.rr.com)
[00:59:14] *** Quits: kilitary (~kilitary@188.242.105.134) (Remote host closed the connection)
[00:59:27] *** Joins: proller (~p@80.240.216.69)
[00:59:32] <PJBoy> did you literally put `vector<int>` as the function call argument?
[01:00:35] <PJBoy> more likely you wanted to write `get<vector<int>>()`
[01:02:51] *** Quits: robod34 (~Username@79.113.227.62) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:08:49] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Quit: varioust)
[01:09:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:09:34] <jokoon> PJBoy, yes of course that's what I wrote, sorry
[01:09:46] <jokoon> PJBoy, you're still there!
[01:10:03] <PJBoy> what kid of error then?
[01:10:14] <jokoon> I should try to find that wandbox thing where you managed to get an online C++ example
[01:10:24] <PJBoy> godbolt for that one
[01:10:27] <jokoon> Exception thrown: read access violation.
[01:10:27] <jokoon> **_Pnext** was 0xCCCCCCD0.
[01:10:34] <PJBoy> ah that's some uninitialised pointer
[01:11:48] <jokoon> Ill try writing a godblolt sample
[01:13:15] <jokoon> trying to write a raw string into godblot to parse it
[01:13:34] *** Quits: joilerv_ (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:14:36] <PJBoy> here's a random example I got from stack overflow https://gcc.godbolt.org/z/bYEnvbdxh
[01:17:55] *** Quits: df00z (~df00z@rrcs-50-75-26-170.nys.biz.rr.com) (Quit: Client closed)
[01:19:23] <jokoon> https://gcc.godbolt.org/z/rqnsT8Yzz
[01:19:42] <jokoon> also gets a crash with godbolt
[01:19:54] *** Quits: paul424 (~tom@ip-5-172-235-243.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[01:23:10] <PJBoy> invalid json
[01:24:13] <jokoon> https://gcc.godbolt.org/z/Mzj7serrq this works
[01:24:44] <PJBoy> and that one's valid json
[01:24:58] <PJBoy> the first one has too many braces
[01:25:08] <PJBoy> as reported by https://jsonlint.com/
[01:25:22] <PJBoy> and as reported by the exception on godbolt
[01:25:39] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:26:13] <PJBoy> (not super clearly, but still)
[01:26:55] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:27:32] <PJBoy> so this one works fine https://gcc.godbolt.org/z/j9G3Yjxz7
[01:27:52] <jokoon> cl : Command line error D8021 : invalid numeric argument '/Wextra' when using MSVC on godbolt
[01:28:07] <PJBoy> you can ignore the command line arguments
[01:28:19] <PJBoy> they're neither here nor there
[01:29:14] <jokoon> godbolt doesn't run the result?
[01:29:22] <PJBoy> for MSVC, it does not
[01:29:32] <jokoon> :(
[01:29:52] <jokoon> my court case is ruined
[01:30:15] <PJBoy> yeah I'm not sure what the deal with that is
[01:30:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[01:31:43] <jokoon> ok the exact same sample doesn't crash but my code does
[01:31:52] <jokoon> in my MSVC
[01:33:39] *** Quits: sbrothy (~sbrothy@213.83.133.231) (Read error: Connection reset by peer)
[01:35:13] *** Joins: markong (~kvirc@213.146.188.203)
[01:37:56] *** Joins: df00z (~df00z@rrcs-50-75-26-170.nys.biz.rr.com)
[01:38:07] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:38:57] <jokoon> you know what? Ill try tomorrow
[01:39:25] <df00z> https://pastebin.com/CmmBm5VN  Hey.    This is super weird.   The vector isn't getting a copy of the data.   buf->data()[0] and ptr[0] should be identical after that code is run...push_back definitely is adding to the end of a vector, right?
[01:39:35] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[01:42:06] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:14] *** ChanServ sets mode: +v npaperbot
[01:43:26] *** Quits: jokoon (~eio@2a01:e0a:542:e160:91df:1b1:2212:3eac) (Quit: Leaving)
[01:46:00] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[01:46:25] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[01:46:56] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:71fb:7a3d:845d:425d)
[01:46:56] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:71fb:7a3d:845d:425d) (Changing host)
[01:46:56] *** Joins: skapata (~Skapata@user/skapata)
[01:47:17] <df00z> Wierd.  uint8_t *newData = buf->data();  If I set newData[i] = ptr[i] the copy works fine.  I'm not understanding something but it's weird it threw no errors.
[01:47:23] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:47:26] <df00z> I can just memcpy
[01:47:34] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:54:46] *** Joins: Roughy (~mdaw45ns@user/roughy)
[01:56:50] *** Joins: arch_angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[01:59:25] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:59:33] *** Quits: df00z (~df00z@rrcs-50-75-26-170.nys.biz.rr.com) (Ping timeout: 256 seconds)
[02:06:17] *** Joins: tesuji (~quassel@2a02:908:180:9500:7dfb:8bc4:47fe:281d)
[02:10:23] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:12:30] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[02:25:26] *** Joins: kilitary (~kilitary@188.242.105.134)
[02:26:38] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:27:26] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:28:57] *** Joins: df00z (~df00z@cpe-104-229-40-4.rochester.res.rr.com)
[02:30:03] *** Quits: df00z (~df00z@cpe-104-229-40-4.rochester.res.rr.com) (Client Quit)
[02:30:14] *** Joins: df00z (~df00z@2603-7081-1e00-ce88-5c06-8e20-1ae9-b6be.res6.spectrum.com)
[02:31:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:31:31] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[02:33:50] *** Quits: df00z (~df00z@2603-7081-1e00-ce88-5c06-8e20-1ae9-b6be.res6.spectrum.com) (Client Quit)
[02:41:17] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:44:55] *** Quits: proller (~p@80.240.216.69) (Quit: Leaving)
[02:45:08] *** Joins: proller (~p@80.240.216.69)
[02:47:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Quit: varioust)
[02:52:30] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:54:26] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[02:57:53] *** Joins: df00z (~df00z@2603-7081-1e00-ce88-58b5-b412-28c1-be3c.res6.spectrum.com)
[03:05:26] <cbreak> df00z: push_back adds at the end of the vector, yes
[03:05:59] <cbreak> df00z: why the unique_ptr and not just a naked vector?
[03:06:05] *** Quits: kilitary (~kilitary@188.242.105.134) (Remote host closed the connection)
[03:06:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[03:06:47] <cbreak> df00z: if you want to insert multiple things, consider using insert
[03:06:58] <cbreak> if you want to assign a whole range of values, consider using assign
[03:07:07] <cbreak> https://en.cppreference.com/w/cpp/container/vector/assign
[03:07:21] <Alipha> oh, df00z is back
[03:08:29] <cbreak> df00z: do not keep the return value of vector::data for long, it will get invalidated in many circumstances, such as push_back
[03:08:30] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:09:08] <Alipha> df00z: auto buf = `std::make_unique<std::vector<uint8_t>>(len_data);` creates a vector with `len_data` elements. that is, if len_data is 10, then that creates a vector with 10 elements. then when you push_back, you'll be adding an 11th, 12th, etc. elements
[03:09:09] <cbreak> df00z: also: you create a vector of the requested size
[03:09:13] <cbreak> then you append at the end
[03:09:18] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:09:30] <cbreak> if you'd do as I said above and used std::assign instead, this wouldn't happen
[03:09:53] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[03:10:43] <Alipha> or just construct the vector with the appropriate values: auto buf = std::make_unique<std::vector<uint8_t>>(ptr, ptr + len_data);
[03:16:22] *** Joins: kilitary (~kilitary@188.242.105.134)
[03:20:26] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:20:47] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:20:52] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[03:20:57] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[03:23:03] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:27:19] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[03:27:44] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:688c) (Quit: Leaving)
[03:27:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:28:03] *** Quits: kilitary (~kilitary@188.242.105.134) (Remote host closed the connection)
[03:28:39] *** Quits: callq_ (~callq@2409:4062:202:fb53:35cf:a4ba:9e6b:cada) (Ping timeout: 250 seconds)
[03:31:35] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:42:42] *** Quits: markong (~kvirc@213.146.188.203) (Read error: Connection reset by peer)
[03:43:49] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[03:45:20] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b) (Remote host closed the connection)
[03:45:42] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b)
[03:50:47] *** Joins: kilitary (~kilitary@188.242.105.134)
[03:52:19] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[03:52:27] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[03:53:31] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[03:54:50] *** Joins: joaofukuda (~joaofukuk@2804:431:c7f4:345c:9441:82c4:a226:af6b)
[03:58:22] *** Quits: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:58:48] *** Quits: AmR (~AmREiSa@156.207.136.200) (Quit: Konversation terminated!)
[04:01:21] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:06:39] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:13:11] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 252 seconds)
[04:19:09] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[04:20:46] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4d74:be9c:8758:8859) (Ping timeout: 245 seconds)
[04:24:06] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 245 seconds)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:28:07] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[04:28:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:31:59] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:32:03] <df00z> I think what messed me up was push_back adding to the end of the size, not from the last element.
[04:41:04] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:44:59] <df00z> http://cpp.sh/9sfqg  Yeah I can get rid of unique_ptr too
[04:45:16] <df00z> I think I'd just have to initialize it in the queue or get the element with front() after adding it to the queue
[04:51:17] *** Quits: kilitary (~kilitary@188.242.105.134) (Ping timeout: 240 seconds)
[05:02:48] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:03:33] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:04:08] <RandomReader> std::vector<uint8_t>(10)  creates a vector containing 10 zeroes
[05:04:38] <RandomReader> if that's what you're after, ok, but since it's variable-sized it usually makes more sense to only .push_back the values it should actually contain
[05:06:14] <RandomReader> then .size() gives you a count of what's in it, range-for loops over everything, etc .. rather than a situation where those have no meaning and you have to check for the value 0 if you want to know if something is filled in
[05:08:05] <RandomReader> if on the other hand this vector is serving as a buffer, and something else needs a bare array of N values to assign to, then creating a vector of zeros and passing .data() to the "something else" makes sense
[05:09:49] <RandomReader> the original issue was *mixing* these two concepts, and your language a moment ago makes me think you're still not quite separating these in your head
[05:11:04] <RandomReader> as in, .push_back *does* add an additional element to the vector, after the last one .. the last one being [9], since you told it to start with 10 elements to begin with :P
[05:11:26] <RandomReader> .size() *is* the count of elements
[05:13:01] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[05:22:54] <df00z> I was thinking wrong, I am OK now.  I am copying buffers into a queue for later processing.
[05:26:00] <df00z> Buffers are in the form of void * array data from Emscripten JavaScript/C functions.   Copies of stuff from JS's environment's heap.   Copying those into std::vector buffers and putting those into a std::queue for future processing.
[05:28:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:28:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:30:51] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:32:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:34:09] <RandomReader> ah ok
[05:35:09] <RandomReader> then yeah, it sounds like Alipha's last suggestion fits, for creating a vector that starts out containing the data you need (automatically copied from the source buffer) as you queue it .. and later when grabbing them from the queue, .size() etc matches what you've got
[05:35:39] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:42:07] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:15] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:15] *** ChanServ sets mode: +v npaperbot
[05:43:17] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:47:26] <smallville7123> is anyone good with recursive iterators or sub-iterators/nested-iterators?
[05:48:30] <smallville7123> nvm
[05:50:36] *** Joins: hexingb (~hexingb@103.37.140.23)
[05:50:38] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[05:51:01] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[05:53:02] <smallville7123> how do i make a string iterator that can iterate over a parent string iterator
[05:54:50] <kalven> what does that mean?
[05:55:48] <smallville7123> eg StringIterator parent("12345");    StringIterator child("foo", parent.cbegin() + 1, parent.cbegin() + 3); // parent begin '2', parent end '4'
[05:56:34] <kalven> what is "foo" ?
[05:56:47] <smallville7123> the child would be able to iterate as if given a string of "1foo45"   (if i understand the begin and end iterators correctly)
[05:56:50] *** Quits: pulse (~pulse@user/pulse) (Quit: Visit https://indiedevs.net/ we have cookies)
[05:57:42] <kalven> WAT
[05:57:53] *** Quits: foul_owl (~kerry@94.140.8.107) (Ping timeout: 256 seconds)
[05:58:02] <smallville7123> cend is always 1 past the end of a string, right?
[05:59:13] <kalven> yes
[06:00:04] <smallville7123> so parent cbegin of cbegin+1 would translate to "1" and parent cend of cbegin+3 would translate to "5", right? as cbegin+3 would be '4' and 1 past that is '5'
[06:01:31] <kalven> how is child supposed to see "1" when it's handed an itertor to "2"?
[06:02:03] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[06:02:51] <smallville7123> i dont know
[06:03:06] <smallville7123> iterators are a bit confusing
[06:04:04] <kalven> and what's the point of this StringIterator thing?
[06:09:02] *** Joins: ferdna (~ferdna@user/ferdna)
[06:12:23] <smallville7123> basically something like this https://godbolt.org/z/bKxKxK3cx
[06:13:37] *** Joins: foul_owl (~kerry@23.82.193.178)
[06:14:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:15:09] <kalven> you want to make some kind of iterator that splices different sequences together behind the scenes?
[06:15:16] <smallville7123> yes
[06:16:50] <smallville7123> for now i only need to to be able to correctly iterate forward and backwards which i do not know how to do in the case of the parent
[06:18:02] *** Joins: hexingb (~hexingb@103.37.140.23)
[06:18:08] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[06:19:24] *** Quits: arch_angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Remote host closed the connection)
[06:19:41] *** Joins: arch_angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[06:22:42] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:23:07] *** Joins: hexingb (~hexingb@103.37.140.23)
[06:27:18] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:27:37] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[06:28:07] <kalven> and what do you need this for?
[06:29:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:30:24] <smallville7123> basically it would act like this for basic iteration: https://wandbox.org/permlink/v80LVH3RQ5iXmjpQ
[06:31:06] <kalven> yeah, but what is it for?
[06:31:16] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[06:33:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:35:20] <smallville7123> https://wandbox.org/permlink/AxqbLTZOeBxfW5d0 *
[06:35:50] <smallville7123> kalven: it is for a parser "tokenizer"
[06:37:33] <smallville7123> eg if the child tokenizer is passes a substring of "ab" and a parent of "abced" then when it grab "a", "b", then it will grab from parent, "c", "e", "d"
[06:42:19] *** Quits: foul_owl (~kerry@23.82.193.178) (Ping timeout: 256 seconds)
[06:43:43] <kalven> ok
[06:44:21] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 256 seconds)
[06:46:16] <kalven> is this for your effects system?
[06:46:23] <smallville7123> no
[06:46:51] <smallville7123> this is for my parser for a macro preprocessor
[06:47:11] <kalven> for shaders?
[06:47:24] <smallville7123> for C and C++
[06:47:59] <kalven> but why? we already have preprocessors
[06:48:42] *** Joins: p-i- (~Ohmu@183.89.35.200)
[06:49:37] <smallville7123> cus i want to make a proper preprocessor that is at least better than the current opensource C Preprocessor implementations on github which do work but are not perfect
[06:50:27] <kalven> yeah, but for what? did you just one day wake up and figure that this is a nice project?
[06:50:29] *** Quits: p-i-_ (~Ohmu@183.89.38.16) (Ping timeout: 256 seconds)
[06:51:20] <kalven> did you check out boost wave btw?
[06:51:54] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[06:55:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:55:59] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[06:56:21] *** Joins: adeliktas9 (~adeliktas@i59F5F08B.versanet.de)
[06:57:11] <smallville7123> eg https://github.com/danmar/simplecpp/issues , https://github.com/facebookarchive/warp (have not tested as it requires dlang programming language compiler), https://github.com/bnoazx005/tcpp , https://github.com/messer-cpp/messer , https://github.com/vittorioromeo/vrm_pp
[06:58:17] *** Quits: adeliktas (~adeliktas@i59F52850.versanet.de) (Ping timeout: 240 seconds)
[06:58:17] *** adeliktas9 is now known as adeliktas
[06:58:24] *** Joins: foul_owl (~kerry@23.82.193.176)
[06:58:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:00:35] <kalven> https://www.boost.org/doc/libs/1_78_0/libs/wave/
[07:00:38] <smallville7123> also https://github.com/bagder/fcpp/issues/5
[07:07:03] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:10:05] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:15:14] <smallville7123> basically it is intended to be a general purpose parser combinator library specifically designed to support the requirements of macro preprocessing which most parser's fail to support and are otherwise difficult to implement with a given parser
[07:15:41] <kalven> I suggest you start with something simpler
[07:15:49] <smallville7123> how so?
[07:16:37] <smallville7123> it is only the input iterator which i need to redesign in order to support correct token grabbing of parent input iterators
[07:18:17] <smallville7123> eg say a rule captures "FOOO X", and this it attempts to match this with a iterator, upon matching X it needs to test if X matches another rule and thus must obtain tokens from the parent input
[07:18:49] <smallville7123> and the parent input is "B(abc)" with "B" defined to "FOOO X"
[07:18:54] <kalven> because actually writing a compliant preprocessor is a lot of work
[07:19:23] <smallville7123> kalven: i dont mind
[07:19:42] <kalven> sure, but given your questions I don't think it's within your reach
[07:19:52] <smallville7123> how so?
[07:20:17] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[07:20:21] *** Joins: hexingb (~hexingb@2409:8900:2700:cdbd:6195:6818:cab0:ca48)
[07:21:27] *** Quits: hexingb (~hexingb@2409:8900:2700:cdbd:6195:6818:cab0:ca48) (Read error: Connection reset by peer)
[07:22:02] *** Joins: hexingb (~hexingb@2409:8900:2700:cdbd:6195:6818:cab0:ca48)
[07:25:48] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:26:51] <kalven> a lot of not so trivial work
[07:26:57] <kalven> and you're getting stuck on an iterator
[07:27:05] *** Quits: hexingb (~hexingb@2409:8900:2700:cdbd:6195:6818:cab0:ca48) (Read error: Connection reset by peer)
[07:29:06] <smallville7123> anyway how do i get my iterator to work like this? https://wandbox.org/permlink/8f3hEBLAKYrVWzU8
[07:29:55] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:30:36] <smallville7123> and im not getting stuck on the iterator, i am meerly attempting to upgrade my iterator to be able to iterate into parent iterators
[07:33:07] *** Joins: gauss (~gauss@136.53.92.204)
[07:33:33] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:33:49] *** Quits: gauss (~gauss@136.53.92.204) (Client Quit)
[07:36:09] *** Quits: foul_owl (~kerry@23.82.193.176) (Ping timeout: 256 seconds)
[07:39:40] *** Joins: callq (~callq@157.41.72.120)
[07:52:12] *** Joins: foul_owl (~kerry@192.145.116.101)
[07:52:30] *** Joins: hexingb (~hexingb@2409:8900:2700:cdbd:6195:6818:cab0:ca48)
[07:52:53] *** Quits: hexingb (~hexingb@2409:8900:2700:cdbd:6195:6818:cab0:ca48) (Read error: Connection reset by peer)
[07:59:53] *** Joins: hexingb (~hexingb@103.37.140.23)
[08:00:26] <smallville7123> https://wandbox.org/permlink/R7jZIFiFFv80Og44 *
[08:03:18] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:05:40] <smallville7123> ughhhhhhh why is this so difficult for people ;-;
[08:09:59] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[08:09:59] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[08:10:22] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[08:11:28] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[08:11:49] *** Joins: hexingb (~hexingb@103.37.140.37)
[08:14:09] *** Quits: p-i- (~Ohmu@183.89.35.200) (Read error: Connection reset by peer)
[08:14:45] *** Joins: p-i- (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th)
[08:14:54] *** Quits: hexingb (~hexingb@103.37.140.37) (Read error: Connection reset by peer)
[08:19:35] *** Quits: jsbach (~jsbach@2a01:c23:5cca:cf00:d5a:9b23:2dbc:fe19) (Ping timeout: 252 seconds)
[08:26:18] <kalven> if you're looking for help, you need to be more specific and not dump 500 lines of code
[08:30:25] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:32:11] *** Quits: joaofukuda (~joaofukuk@2804:431:c7f4:345c:9441:82c4:a226:af6b) (Quit: Leaving)
[08:33:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:42:57] *** Joins: hexingb (~hexingb@103.37.140.23)
[08:45:00] *** Quits: Dru (~BigDru@cpeac202e794c73-cmac202e794c70.cpe.net.fido.ca) (Remote host closed the connection)
[08:45:46] <df00z> I dont know\understand what you are doing and I'm wondering why you dont't use regex if it's like complex string parsing
[08:46:41] <df00z> If you're making a cpp preprocessor that's pretty advanced.
[08:49:35] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[09:06:00] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:10:33] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[09:11:21] *** Quits: foul_owl (~kerry@192.145.116.101) (Ping timeout: 256 seconds)
[09:11:23] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[09:17:50] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[09:24:06] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[09:26:43] *** Joins: hexingb (~hexingb@103.37.140.23)
[09:26:47] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[09:27:01] *** Joins: foul_owl (~kerry@23.82.194.141)
[09:28:13] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[09:29:44] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[09:30:21] *** Joins: letto (~letto@86.120.81.105)
[09:30:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:31:17] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:33:47] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:34:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:35:38] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[09:35:57] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Ping timeout: 240 seconds)
[09:40:01] *** Quits: emerent (~quassel@p200300cd57044377ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[09:40:04] *** Joins: emerent_ (~quassel@p200300cd5704433fba27ebfffed28a59.dip0.t-ipconnect.de)
[09:40:04] *** emerent_ is now known as emerent
[09:42:07] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:14] *** ChanServ sets mode: +v npaperbot
[10:01:49] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b) (Quit: Quit)
[10:06:37] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:20:11] *** Quits: dfkfs (~dfkfs@178.49.152.151) (Quit: Client closed)
[10:23:18] *** Quits: c4017 (~c4017@S0106c0943583f893.vf.shawcable.net) (Read error: Connection reset by peer)
[10:31:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:32:55] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:7d5c:9df3:79fe:43ff)
[10:34:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:43:59] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:50:32] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:54:23] *** Joins: hexingb (~hexingb@103.37.140.23)
[10:57:00] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[11:09:55] *** Joins: hexingb (~hexingb@103.37.140.23)
[11:12:26] <LordKalma> int main(int argc, char* argv[]){cout << system.call(f"gcc -E {argv[1]}"};
[11:12:28] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[11:12:39] <LordKalma> did a pre processor :D
[11:13:55] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:18:54] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[11:19:46] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:21:48] *** Joins: andreasbuhr (~quassel@p549db796.dip0.t-ipconnect.de)
[11:30:55] *** Quits: andreasbuhr (~quassel@p549db796.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:31:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:35:23] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[11:35:49] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[11:37:27] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[11:37:57] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[11:38:46] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Quit: Leaving)
[11:40:33] *** Joins: jsbach (~jsbach@2a01:c22:35dd:4000:2a8e:b1bb:9c1c:b6f2)
[11:44:20] *** gentooclimax is now known as climax
[11:44:28] *** climax is now known as gentooclimax
[11:47:51] <LordKalma> !rq
[11:47:52] <nolyc> LordKalma: <gehn> don't look a gift horse in the butt
[11:52:47] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:57:02] *** Quits: elemongw (~elemongw@20.107.36.50) (Quit: ZNC 1.6.5+deb1+deb9u2 - http://znc.in)
[11:57:36] *** Joins: elemongw (~elemongw@20.107.36.50)
[11:57:45] *** Quits: elemongw (~elemongw@20.107.36.50) (Client Quit)
[11:58:05] *** Joins: elemongw (~elemongw@20.107.36.50)
[12:00:27] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:08:30] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:09:48] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5321)))
[12:09:49] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[12:10:56] *** Quits: foul_owl (~kerry@23.82.194.141) (Read error: Connection reset by peer)
[12:14:46] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:21:25] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:24:04] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[12:25:21] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:28:14] *** Joins: limubs (~limubs@cgn-89-0-49-98.nc.de)
[12:28:44] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Ping timeout: 252 seconds)
[12:29:32] *** Joins: Uswald (~leandre@37.35.6.200)
[12:29:32] *** Quits: Uswald (~leandre@37.35.6.200) (Changing host)
[12:29:32] *** Joins: Uswald (~leandre@user/Uswald)
[12:30:07] *** Joins: foul_owl (~kerry@192.145.116.33)
[12:31:36] *** Joins: robod34 (~Username@79.113.227.62)
[12:31:41] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[12:32:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:35:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[12:51:08] *** Joins: xkuru (~xkuru@user/xkuru)
[12:53:54] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4d74:be9c:8758:8859)
[13:01:14] <sord937> I would love to introduce conan at $work but the conda dependency for it "jinja2 >=2.9,<3" is a deal breaker as we already use jinja3. Does anyone know how to overcome this obstacle?
[13:03:30] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[13:04:25] <TinoDidriksen> Isn't a major purpose of Conda that you can install separate things in isolated folders?
[13:04:37] <LordKalma> there are N venv managers
[13:04:43] <Shell> usually conan would live in its own venv (or distro equivalent) with its own dependencies, there's little reason it would impact your own Python code.
[13:04:48] <LordKalma> I use conda, there's pipenv, venv, whatever the hell
[13:05:06] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:05:20] <LordKalma> that said, I can see how it might be annoying anyway
[13:05:31] <LordKalma> your venv injects itself first in path, dunno how that would affect conan
[13:06:09] <sord937> LordKalma - thanks  - I guess I would have to activate one conda env for conan build, then switch to our usual conda env for normal usage
[13:06:22] <sord937> (I tried stacking conda envs but sys.path is broken then)
[13:06:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:06:35] <LordKalma> yeah, that's what I mean
[13:06:51] <LordKalma> the conan devs are in #conan at the cpplang slack, you can complain to them haha
[13:07:32] <smallville7123> how do i get my iterator to iterate like this? https://wandbox.org/permlink/R7jZIFiFFv80Og44
[13:08:24] *** Joins: hexingb (~hexingb@103.37.140.37)
[13:08:54] <sord937> thanks LordKalma !!
[13:09:02] <LordKalma> sord937, what's the name of Jinja 3 in conda?
[13:09:04] <LordKalma> I can't find it
[13:09:47] <LordKalma> oh shit it's called Jinja2 3.0
[13:09:48] <sord937> LordKalma: I am sorry, I meant jinja2 3.0.1
[13:09:50] <LordKalma> tjhat's not confusing at all
[13:09:55] <sord937> yeah
[13:10:51] <LordKalma> on windows you can get conan as a .exe
[13:11:03] <LordKalma> if only they distributed it like that in other system
[13:11:23] <LordKalma> λ where conan
[13:11:23] <LordKalma> C:\ProgramsUser\Miniconda3\Scripts\conan.exe
[13:11:35] <LordKalma> albeit, it already appears as an exe even on Python
[13:11:37] <LordKalma> so it can be called
[13:12:06] <sord937> oh I did not know, we are on purely Linux though
[13:15:36] <Shell> sord937: recent versions of conan have a Jinja2 bound of <4.0.0 btw.
[13:15:38] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[13:16:08] <Shell> so, this is a case of "the conda packaging is bad", probably.
[13:16:55] *** Joins: andreasbuhr (~quassel@p549db796.dip0.t-ipconnect.de)
[13:18:47] *** Quits: arch_angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Quit: Leaving)
[13:19:33] <LordKalma> I just tried λ conda create --name=test_conan python conan Jinja2
[13:19:43] <LordKalma> and it seems to want conan              conda-forge/noarch::conan-1.45.0-pyhd8ed1ab_0
[13:19:49] <LordKalma> and jinja2             conda-forge/noarch::jinja2-2.11.3-pyh44b312d_0
[13:20:10] <LordKalma> and this is conda-forge, the bleeding edge
[13:20:23] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[13:20:29] <LordKalma> sord937, well, you can always install conan with pip after, let's see how that would work
[13:21:07] <Shell> LordKalma: yup, but conan contains an official dependency list, which has been updated even though conda has not been: https://github.com/conan-io/conan/commit/bbdec0a377c8e30bf5ef0ad68ff4745bba43b20d
[13:21:16] <Shell> so the solution may be "install it manually"
[13:21:34] <LordKalma> maybe updating conda-forge :p
[13:22:16] *** Joins: lockywolf_ (~lockywolf@public.lockywolf.net)
[13:22:21] <LordKalma> https://bpa.st/SIFBSAILWFXYWLLEGOG3VP5NBM
[13:22:22] <LordKalma> oh look
[13:22:26] <LordKalma> installing with pip worked
[13:22:42] <LordKalma> conda create --name=test_conan python and then conda activate test_conan and pip install conan Jinja2
[13:22:52] <LordKalma> installed conan-1.45.0 and Jinja2-3.0.3
[13:22:55] <Shell> mhm
[13:23:09] <LordKalma> so it's the conda packaged who are wrong
[13:23:19] <LordKalma> sord937, want to make a PR to conda-forge? :D :D
[13:23:23] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:23:24] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:23:29] <Shell> I am shocked, /shocked/, that conda is outdated and broken. :p
[13:23:43] <LordKalma> hahah
[13:23:52] <LordKalma> are you... Shell shocked?
[13:23:59] * LordKalma sees himself out
[13:24:09] *** Joins: jsbach_ (~jsbach@2a01:c22:35dd:4000:8ce2:86f8:3e06:da68)
[13:24:33] <LordKalma> The annoying thing is that I have conda config --set pip_interop_enabled True
[13:24:58] <Shell> XD
[13:26:02] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:26:13] *** Quits: jsbach (~jsbach@2a01:c22:35dd:4000:2a8e:b1bb:9c1c:b6f2) (Ping timeout: 250 seconds)
[13:26:45] *** Joins: plastico (~plastico@neomutt/plastico)
[13:28:01] <LordKalma> https://gist.github.com/ruilvo/ae8f68559eb4636e9e04fd3ed0a2db52
[13:28:04] <LordKalma> hjere are both logs
[13:28:47] <LordKalma> sord937, consider yourself invited to fix conda[-forge] :D
[13:32:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:35:05] <LordKalma> Shell, honestly, I don't understand why conda just didn't use pip underneath
[13:35:12] <LordKalma> and had to have their own python repos
[13:36:47] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:39:51] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[13:40:18] *** Quits: hexingb (~hexingb@103.37.140.37) (Remote host closed the connection)
[13:40:35] *** Joins: hexingb (~hexingb@103.37.140.23)
[13:40:42] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[13:41:05] <Shell> LordKalma: python package management has long been a mess, and Anaconda's value proposition was "python package management that Just Works for scientific folks", which pip, uh, did not very well at the time.
[13:41:23] <thad_the_man> What do you call the part of an if statenebt that may oir may not be executed?
[13:41:36] <LordKalma> the body of said if?
[13:41:53] <Shell> the body, yeah.
[13:42:03] <LordKalma> Shell, honestly, when I have colleagues that need python for numpy work, I just tell them to install Anaconda, the 1Gb full version
[13:42:08] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:10] <LordKalma> they get a system that works, are happy, and that's it
[13:42:14] <Shell> mhm
[13:42:16] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:16] *** ChanServ sets mode: +v npaperbot
[13:42:24] <LordKalma> I use miniconda and manage the environment myself, because I know how to
[13:42:28] <LordKalma> but most don't anyway
[13:42:35] <thad_the_man> Funny on the MS webpage they call it a statement
[13:42:58] <LordKalma> if(bananas) foo(); // foo is a single statement
[13:43:05] <LordKalma> but that's for just a single instruction
[13:43:24] <LordKalma> [...] and i have agressive conda settings, like disabled channel priority, which makes it bleeding edge, in the conda scale
[13:43:29] <LordKalma> and sometimes I break shit
[13:44:13] *** Quits: rg (~r-g@163.172.90.106) (Read error: Connection reset by peer)
[13:44:57] <smallville7123> shouldnt this be in #python ?
[13:45:59] <Shell> at this point it is indeed off-topic, sure
[13:46:06] <thad_the_man> LordKalma: They use it for blocks too.
[13:46:55] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4d74:be9c:8758:8859) (Remote host closed the connection)
[13:47:05] <thad_the_man> It's in their EBNF.
[13:47:20] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102)
[13:47:34] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:623b)
[13:48:09] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[13:48:51] <smallville7123> how do i get my iterator to iterate like this? https://wandbox.org/permlink/R7jZIFiFFv80Og44
[13:49:03] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:49:47] <LordKalma> anyway, sord937, and Shell https://github.com/conda-forge/conan-feedstock/issues/158
[13:52:53] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:53:05] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:54:37] <LordKalma> smallville7123, can you explain by words what you mean?
[13:55:41] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[13:55:59] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:56:17] <smallville7123> i need a way to detect when i should and should not use the parent iterator when iterating the current iterator past begin/end
[13:58:26] <smallville7123> ill make up a small iterator class
[13:58:44] <LordKalma> I don't get it
[13:59:07] <LordKalma> do you start iterating on the "parent" or the "child"? what is the parent/child? what's the logic to switch between then? what is the datatype of parent/chil?
[14:02:51] <TinoDidriksen> Looks like you're implementing an iterator across multiple sequential containers. The easiest is to store iterator pairs and keep track of which is the current pair.
[14:07:23] *** Joins: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt)
[14:10:41] <sord937> LordKalma - thank you so much for raising that issue!!
[14:10:58] <LordKalma> you guys use forge?
[14:11:00] <smallville7123> LordKalma: https://wandbox.org/permlink/YG0sLSg4O2I0lLRF a basic iterator
[14:11:13] <LordKalma> sord937, I have no idea whre the repo for conda-main is
[14:13:30] *** Quits: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt) (Ping timeout: 260 seconds)
[14:17:58] <sord937> LordKalma - me neither, I could not even find the  conda-forge repo (I am a conda noob)
[14:18:52] <smallville7123> https://wandbox.org/permlink/K8gxeM7tCrsJ9Epz if i use it as it currently is (assuming it simply iterates from the start of the parent) then the previous value is incorrect
[14:19:46] <LordKalma> sord937, https://gist.github.com/ruilvo/f063a8f584efe6415dba77c4bc963f19
[14:21:28] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:22:41] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:22:42] *** Quits: joilerv (~joilerv@80.169.238.242) (Client Quit)
[14:27:09] <smallville7123> LordKalma: thad_the_man
[14:27:12] <smallville7123> LordKalma: TinoDidriksen
[14:27:21] <PJBoy> ...
[14:27:48] <LordKalma> smallville7123 is mad I was talking about conda (because conan)
[14:28:21] <LordKalma> morning PJBoy
[14:28:21] <TinoDidriksen> smallville7123, I mentioned a solution that doesn't involve storing anything about the container.
[14:28:32] <PJBoy> mornin' LordKalma
[14:29:02] <PJBoy> I have a good feeling about this week
[14:29:20] <smallville7123> 20:57:48 LordKalma: smallville7123 is mad I was talking about conda (because conan)
[14:29:26] <smallville7123> no im not
[14:30:33] <smallville7123> TinoDidriksen: how would i do that?
[14:30:53] <TinoDidriksen> By storing iterator pairs. That's also more flexible in general.
[14:32:05] *** Quits: foul_owl (~kerry@192.145.116.33) (Ping timeout: 256 seconds)
[14:32:44] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:33:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:34:33] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:35:38] *** Quits: joilerv (~joilerv@80.169.238.242) (Client Quit)
[14:36:51] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:39:47] <comrad> i have a c-array being passed into my function and i want to make a vector out of it. but it seems not to be able to use iterators on it
[14:39:57] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:40:56] <comrad> https://n0paste.tk/mBhVqUE/
[14:41:15] *** Quits: joilerv (~joilerv@80.169.238.242) (Client Quit)
[14:41:29] <PJBoy> that's right
[14:41:37] <LordKalma> poiter decay is lovely, isn't it?
[14:41:41] *** Joins: seninha (~seninha@user/seninha)
[14:41:49] <PJBoy> your `data` is a pointer, and pointers don't have begin's
[14:42:05] <LordKalma> just write data, data + data_len
[14:42:06] <ville> comrad: that's not an array, taht's a pointer
[14:42:08] <PJBoy> you want to just write `FormatAsHex(data, data + data_len)`
[14:42:15] <comrad> ville: i know, its coming from c
[14:42:32] <ville> comrad: you don't apparently do know. int xs[10] is an array
[14:42:47] <PJBoy> and pass `FormatAsHex(begin(myArr), size(myArr))` to that function
[14:42:50] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:42:52] <ville> comrad: as far as the types are concerned what you have is a pointer
[14:43:00] <PJBoy> although now I'm concerned about infinite recursion
[14:43:10] *** Quits: joilerv (~joilerv@80.169.238.242) (Client Quit)
[14:43:12] <ville> comrad: that it happens to point to an element of an array does not make the pointer an array in the eyes of the type system
[14:43:37] <comrad> oh bloddy hell, i tried to hard. std::vector<unsigned char>(data, data+len) is really working
[14:43:49] <comrad> thanks guys!
[14:45:38] *** Joins: cursey (~cursey@user/cursey)
[14:46:01] *** Joins: paul424 (~tom@ip-5-172-234-221.multi.internet.cyfrowypolsat.pl)
[14:48:01] *** Joins: foul_owl (~kerry@23.82.194.143)
[15:11:18] <smallville7123> so this?  https://wandbox.org/permlink/U1H0Mm3AihOaJPwh
[15:11:21] <smallville7123> TinoDidriksen:
[15:11:48] <TinoDidriksen> No, why do you need the parent?
[15:12:03] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:9511:1adf:ad63:3d17) (Quit: Client closed)
[15:12:33] <TinoDidriksen> All you need to store is std::vector<std::pair<std::string::const_iterator,std::string::const_iterator>> and a size_t to know which range you're in.
[15:12:57] <smallville7123> because the parent might also need to get from its parent if the parent currently cannot seek forward/backwards
[15:14:46] <Haohmaru> how do i express "and/or" in something that isn't C++ but meant for human consumption?
[15:15:02] <TinoDidriksen> ...just like that?
[15:15:18] <Haohmaru> "cat + [dog and/or mouse] = action"
[15:15:26] <Haohmaru> i want some shorter symbol
[15:15:42] <TinoDidriksen> Logically that's just an or.
[15:16:00] <Haohmaru> hm so | then
[15:17:13] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[15:17:27] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[15:21:40] *** Joins: pulse (~pulse@user/pulse)
[15:24:51] <LordKalma> my instruments programming manuals all have more or less a standard notation
[15:25:19] <LordKalma> <placeholder> [optional] [one|of|these], etc
[15:26:17] <LordKalma> <placeholder> [optional] {one|of|these}, *
[15:26:22] <PJBoy> hm, how would they express that an argument can be a combination like "one of" or "of these" or "one of these"
[15:26:43] <PJBoy> I guess it would just be `[one] [of] [these]`
[15:28:44] <LordKalma> your exact example would be [one [of [these]]]
[15:28:59] <PJBoy> ah yeah that too
[15:29:04] <PJBoy> the system works
[15:29:18] <LordKalma> like this: https://i.gyazo.com/eca00d105dd96dcf2bb4d848f40cf51d.png
[15:29:41] <LordKalma> the UPPERlower means only the UPPER part is mandatory to run the command, both syntaxes are accepted
[15:30:01] <LordKalma> CHANel means you can send CHAN or channel or CHANNEL (SCPI isn't case sensitive)
[15:30:08] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[15:30:10] <LordKalma> *CHANnel
[15:31:20] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[15:32:06] *** Joins: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[15:32:17] *** Joins: CalamityToo (~CalamityB@2603-8000-d907-cec8-205e-a251-a079-a4d7.res6.spectrum.com)
[15:32:40] <ville> optionality creates problems. don't do it
[15:33:21] <PJBoy> that mentality is how you stay on a good diet
[15:33:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:33:56] <ville> utf-8 bom could have been avoided
[15:34:18] <LordKalma> IEEE 488 standardized GPIB without standardizing the messages over it. that's why SCPI was born
[15:34:27] <LordKalma> and it's so shit :D
[15:35:10] *** Quits: CalamityBlue (~CalamityB@2603-8000-d907-cec8-414b-3d39-bc9b-3dcb.res6.spectrum.com) (Ping timeout: 260 seconds)
[15:37:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:40:32] <smallville7123> 21:41:49 TinoDidriksen: No, why do you need the parent?
[15:40:32] <smallville7123> 21:42:57 smallville7123: because the parent might also need to get from its parent if the parent currently cannot seek forward/backwards
[15:42:57] *** Quits: callq (~callq@157.41.72.120) (Ping timeout: 240 seconds)
[15:46:22] *** Joins: markong (~kvirc@213.146.188.203)
[15:50:49] *** Quits: paul424 (~tom@ip-5-172-234-221.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[15:54:47] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[15:55:34] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:58:31] *** Quits: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Quit: Leaving)
[15:59:51] *** Joins: callq (~callq@2409:4062:2d8d:345f:158c:2117:eab6:8c14)
[16:03:54] <callq> Anyone want to try to extract some hidden data from a PNG image for me?
[16:07:16] <smallville7123> nope
[16:07:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[16:07:58] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:13:29] <smallville7123> https://wandbox.org/permlink/U1H0Mm3AihOaJPwh how do i make previous() work correctly?
[16:24:47] <smallville7123> welp
[16:24:54] <smallville7123> how else can i do this?
[16:26:01] <smallville7123> auto arg = iterator.substr(match.begin, match.end);     auto replacement = std::string(arg);      function_name->match(replacement); // modifies replacement
[16:26:43] <smallville7123> in.replace(replacement);
[16:27:19] <smallville7123> in which in.string() returns iterator.substr(match.begin, match.end);
[16:28:27] *** Joins: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[16:29:23] <smallville7123> and in.replace does https://gist.github.com/e4c08dd91b858657ed1550c3c9f7011a
[16:33:34] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:34:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:37:53] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:37:55] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:38:13] *** Quits: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Ping timeout: 240 seconds)
[16:40:53] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:41:04] *** Joins: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[16:45:38] <smallville7123> as i cannot simply copy the iterator as it has a different source string
[16:45:54] <smallville7123> which is ")(z)"
[16:50:51] *** Joins: proller (~p@2a02:6b8:0:40c:5c0b:5f0f:95f3:a200)
[16:51:49] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 240 seconds)
[16:52:56] <mort> didn't C++20 get stream formatters for chrono
[16:56:01] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:58:09] <smallville7123> and i cannot construct a new input since the old input MUST be consumed when the current input has been exhausted
[17:01:08] *** Quits: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[17:01:36] <PJBoy> C++20 has stream formatters for chrono yeah
[17:08:23] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (tantalum.libera.chat (Nickname regained by services)))
[17:08:28] *** Joins: PJBoy (~PJBoy@user/pjboy)
[17:09:16] <smallville7123> and i seriously doubt i can simply do
[17:09:17] <smallville7123> Iterator<std::string> copy = in.getIterator().copy(); copy.advance(); copy.input.insert(in.getIterator().currentPosition(), arg);
[17:09:31] <smallville7123> without invalidating every iterator that depends on input
[17:18:12] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:18:45] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[17:19:45] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[17:19:59] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[17:21:31] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[17:21:47] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:26:19] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[17:31:43] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[17:31:45] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Read error: Connection reset by peer)
[17:31:58] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:32:50] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[17:32:52] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:34:50] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[17:34:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:35:13] *** Quits: df00z (~df00z@2603-7081-1e00-ce88-58b5-b412-28c1-be3c.res6.spectrum.com) (Quit: Client closed)
[17:35:57] *** Joins: joaofukuda (~joaofukuk@2804:431:c7f4:345c:9441:82c4:a226:af6b)
[17:38:31] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:38:37] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:39:56] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:40:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[17:40:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:55] *** ChanServ sets mode: +v npaperbot
[17:42:08] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:17] *** ChanServ sets mode: +v npaperbot
[17:45:21] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:45:24] <Haohmaru> !fact
[17:45:25] <nolyc> Haohmaru: A linkage specification does not establish a scope.
[17:45:55] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d091:25a9:e1c5:1d46)
[17:45:55] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d091:25a9:e1c5:1d46) (Changing host)
[17:45:55] *** Joins: skapata (~Skapata@user/skapata)
[17:46:13] *** Joins: jokoon (~eio@2a01:e0a:542:e160:f8f0:2d11:8195:8750)
[17:54:38] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[17:58:09] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:02:07] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[18:12:18] *** Quits: bv (~bv@user/bv) (Remote host closed the connection)
[18:12:31] *** Joins: bv (~bv@user/bv)
[18:13:32] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:16:59] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Remote host closed the connection)
[18:17:20] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[18:23:02] *** gentooclimax is now known as climax
[18:23:17] <Hello71> { extern "C" { int x; } long x; }
[18:23:17] <geordi> error: expected unqualified-id before string constant
[18:23:30] <Hello71> << x; extern "C" { int x; } long x;
[18:23:30] <geordi> error: conflicting declaration 'long int x'
[18:25:34] *** Joins: gehn (~gehn@user/gehn)
[18:26:41] *** climax is now known as gentooclimax
[18:30:11] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[18:35:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:37:12] *** Quits: Uswald (~leandre@user/Uswald) (Quit: WeeChat 2.8)
[18:39:09] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:49:19] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:53:25] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:54:13] *** Quits: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Ping timeout: 256 seconds)
[19:01:29] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Remote host closed the connection)
[19:02:07] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[19:04:54] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[19:05:27] *** Quits: limubs (~limubs@cgn-89-0-49-98.nc.de) (Ping timeout: 256 seconds)
[19:06:05] <smallville7123> welp imma just ignore the iterator as it is very complex
[19:08:11] <smallville7123> a sane macro preprocessor would push a macro onto the stack, expand macro, pop the macro from the stack, and then rescan, right?
[19:09:53] *** Quits: joaofukuda (~joaofukuk@2804:431:c7f4:345c:9441:82c4:a226:af6b) (Remote host closed the connection)
[19:10:08] *** Joins: joaofukuda (~joaofukuk@2804:431:c7f4:345c:19fc:7530:25c8:1eee)
[19:16:26] <ville> smallville7123: have you now bothered to read the pdf i've linked to you several times?
[19:16:41] <smallville7123> yes
[19:16:56] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Remote host closed the connection)
[19:17:13] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[19:17:33] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[19:18:45] <smallville7123> we push a macro to the stack, expand the macro, and then rescan the expansion until there are no more macro's to expand, and then we pop the macro from the stack and replace it with the resulting expansion,      right?
[19:21:54] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[19:23:45] <ashafq> Hi, I am dealing with C libraries which have their own "init" and "destroy" functions to initialize an object. I am trying to wrap that around C++ using std::unique_ptr<CWrapperClass>
[19:24:25] <smallville7123> make a wrapper for the class and put the "init" in the constructor and "destroy" in the destructor
[19:24:38] <ashafq> The only reason I want to do this is so I don't have to deal with move constructors. I also have deleted copy constructors.\
[19:25:06] <ashafq> smallville7123: It will involve me writing more code to deal with copy and move operation
[19:25:22] <smallville7123> additionally implement RAII (either copy/move do as one would expect, or copy acts as move)
[19:25:32] <ashafq> I want to know what is the simplest way to implement this without reimplementing copy and move operations
[19:25:34] <smallville7123> or copy always acts as move*
[19:25:48] <smallville7123> you cant
[19:25:51] <ashafq> is that it? there's no shortcut?
[19:26:00] <smallville7123> you MUST implement copy and move
[19:26:22] <fiesh> you can also delete them
[19:26:34] <smallville7123> (at least move, i think a copy will default to move if there is no defined copy destructor)
[19:26:52] <smallville7123> fiesh: yup but then they can only be referenced
[19:26:58] <fiesh> no, that would be very dangerous
[19:27:19] <smallville7123> true tho depends on the class
[19:28:12] <fiesh> ashafq: if you don't want copy / move semantics, just delete the constructors and assignment operators.  if you do want them, it's probably best to implement them correctly
[19:28:17] <smallville7123> eg if the class holds a resource such as an allocation then you will ALWAYS want to move this allocation unless you are able to duplicate this allocation
[19:29:22] <smallville7123> (moving the allocation is easiest if you dont know how to reconstruct the allocation from an existing allocation such that deleting the original allocation has zero effect on the reconstructed allocation)
[19:29:48] <fiesh> wat
[19:29:54] <smallville7123> (basically deep-copying the object)
[19:31:36] *** Joins: joaofukuda_ (~joaofukuk@191.255.113.250)
[19:31:59] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Remote host closed the connection)
[19:32:19] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[19:32:59] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[19:33:45] <smallville7123> say OBJ1 contains a member of type OBJ2, and OBJ2 contains an allocation,     simply copying OBJ2 might seem safe but will fail if OBJ2 is used in a way it is not intended such as copying it
[19:34:39] *** Quits: joaofukuda (~joaofukuk@2804:431:c7f4:345c:19fc:7530:25c8:1eee) (Read error: Connection reset by peer)
[19:34:43] <smallville7123> now, OBJ3 is a copy of OBJ1 and OBJ2 is a copy in both OBJ1 and OBJ3,    but OBJ1 and OBJ3 both contain the same allocation of OBJ2
[19:34:48] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 250 seconds)
[19:35:01] <smallville7123> allocation in*
[19:35:20] <smallville7123> eg, OBJ1.OBJ2.data == OBJ3.OBJ2.data
[19:35:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:36:53] <smallville7123> when both OBJ1 or OBJ3 are destroyed, OBJ2.data will (probably) be double freed as the destructor of OBJ2 will (probably unless managed elsewhere) delete data
[19:37:39] <smallville7123> this is assuming that we have minimal knowledge about OBJ2
[19:38:23] <Svitkona> ah yes
[19:38:51] <smallville7123> if we know that OBJ2 owns data and that data is an allocation then we would simply move OBJ2 by allocating it in OBJ1 and then moving this allocation in the copy and move constructors/assignments
[19:39:22] <ville> ashafq: what is the actual usage of these objects in your program?
[19:39:30] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[19:39:33] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[19:40:00] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:40:20] <ville> ashafq: if you just see them "temporarily" during the execution of some function, then simplest way to deal with such objects might be defer/scope guard-like
[19:40:23] <smallville7123> if we know that OBJ2 DOES NOT own the data and that data is an allocation then... we would probably need to tread carefully here, since data could be referenced by an external class as part of some allocation pool of sorts
[19:41:20] <smallville7123> in which case it would also be best to simply allocate OBJ2 and move it around
[19:41:21] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[19:41:26] <ville> ashafq: that'll avoid you having to remember to deinit them when you return from the function for whatever reason
[19:42:26] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:43:05] <Alipha> ashafq: what's wrong with putting the init call in CWrapperClass's constructor and the destroy call in the destructor and marking the copy constructor and copy operator= as `=delete;`?
[19:44:21] <Alipha> though if the C init function returns a pointer, then it's pretty trivial to write move ctor/op= which simply copies the pointer and then sets the original to nullptr
[19:44:42] <Alipha> and possibly changing your destructor to `if(p) foo_destroy(p);`
[19:45:00] *** Joins: Deneb (~johnch@23.143.9.51.dyn.plus.net)
[19:45:02] <Alipha> and then you don't need unique_ptr
[19:45:20] <smallville7123> also in the case of "know that OBJ2 owns data and that data is an allocation" it would be safe to assume that OBJ2 does not like it's data being swapped for another OBJ2's data (unless we have access to OBJ2's source code and can verify this) so we cannot make OBJ2 a local member and simply swap its data
[19:46:56] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[19:49:08] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Remote host closed the connection)
[19:49:23] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[19:49:48] *** Joins: k8yun (~k8yun@24.244.29.102)
[19:50:41] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[20:03:26] <ashafq> Alipha: For some reason the copy constructor is being called when I have it in another class ☹️
[20:04:16] <Alipha> ashafq: you deleted the copy constructor but it's still being called?
[20:05:00] <ashafq> I guess I will try with the copy constructor
[20:05:10] <ashafq> deleted copy constructor*
[20:05:32] <rpav> zombie constructor
[20:07:07] <Alipha> ashafq: what's "it" in your previous statement?
[20:08:23] <ashafq> Alipha: I have another class that is has the C wrapper class as a data member
[20:09:09] <ashafq> Alipha: In the constructor of the main class, I have to do some computation to initialize the C wrapper class, so I need to use the move semantics.
[20:10:59] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b)
[20:13:07] *** Joins: Uswald (~leandre@2a01cb040075f90081b4f6c36d1b3763.ipv6.abo.wanadoo.fr)
[20:13:07] *** Quits: Uswald (~leandre@2a01cb040075f90081b4f6c36d1b3763.ipv6.abo.wanadoo.fr) (Changing host)
[20:13:07] *** Joins: Uswald (~leandre@user/Uswald)
[20:13:45] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Read error: Connection reset by peer)
[20:16:36] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[20:19:12] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Read error: Connection reset by peer)
[20:20:53] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[20:20:55] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[20:25:07] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:26:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[20:27:23] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:27:41] <ashafq> Alipha: It's still calling the copy constructor even after std::move()
[20:28:56] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[20:31:31] <Alipha> ashafq: if a class only has a copy ctor, then the copy ctor will be called
[20:31:49] <Alipha> !give ashafq testcase
[20:31:51] <nolyc> ashafq: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[20:36:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:37:04] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:40:11] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:40:50] <pulse> !give pulse coffee
[20:40:52] <nolyc> pulse: Error: "coffee" is not a valid command.
[20:40:57] <pulse> lies
[20:42:50] <rpav> dcc send pulse coffee
[20:43:52] <pulse> ty
[20:58:31] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b) (Quit: Quit)
[21:00:15] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[21:14:03] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[21:28:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[21:31:01] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: Textual IRC Client: www.textualapp.com)
[21:36:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:38:13] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 240 seconds)
[21:39:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:40:28] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[21:42:09] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:17] *** ChanServ sets mode: +v npaperbot
[21:43:53] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[21:47:21] *** Joins: fldme (~fldme@178.49.152.151)
[21:47:53] <LordKalma> haha people asking if Qt will support rust officially
[21:47:54] <ashafq> Alipha: https://godbolt.org/z/81KG3xMM1 something like this, but this one works fine ☹️
[21:48:01] <PJBoy> pfft
[21:48:12] <PJBoy> next they'll be wondering if Qt will start releasing NFTs
[21:48:18] <ashafq> LordKalma: How will Qt support Rust?
[21:48:25] <LordKalma> don't ask me
[21:48:53] <ashafq> I mean, how do you even write inheritance in Rust?
[21:49:05] <Friithian> can we get rust NFTs
[21:49:08] <ashafq> Sorry, wrong channel, don't answer that 😊
[21:51:55] <PJBoy> well first they would rewrite the entire rust standard library
[21:51:55] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:6114:c56c:8a91:41ae)
[21:51:55] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:6114:c56c:8a91:41ae) (Changing host)
[21:51:55] *** Joins: skapata (~Skapata@user/skapata)
[21:51:58] <PJBoy> with Q prefices
[21:52:22] <PJBoy> then hopefully make conversion functions to and from rust stdlib classes
[21:52:36] <Friithian> let's rewrite rust be it's just C++
[21:52:42] <Friithian> ssbesbuts
[21:52:49] <LordKalma> rust + NFTs: https://twitter.com/isislovecruft/status/1489851156868206592
[21:53:15] <PJBoy> ahahaha
[21:53:19] <Friithian> someeone else click that for me as I don't want to see the hellscape it is
[21:53:46] <kalven> there are already qt bindings for rust
[21:54:00] <LordKalma> yeah, there's a crate somewhere
[21:54:16] <LordKalma> Friithian, it's an actual good joke
[21:54:32] <Friithian> ok whew
[21:54:35] <LordKalma> "> rust dev / > top / Pick one." Great reply haha
[21:55:40] <LordKalma> but rust doesn't have inheritance? interesting
[21:55:50] <fldme> is it a correct way to read a text file? it feels so overwhelming https://wandbox.org/permlink/vDx3gndbRPRe97e8
[21:57:31] *** Joins: markong (~kvirc@213.146.188.203)
[21:59:00] *** Quits: k8yun (~k8yun@24.244.29.102) (Quit: Leaving)
[21:59:02] <Alipha> ashafq: Stuff needs a move constructor and move assignment operator, because the compiler-generated one is simply going to copy ptr_. Not sure why you're not getting a double free runtime error
[22:00:23] <Alipha> Presumably you want the moved-from ptr_ to be set to nullptr
[22:00:25] *** Joins: Uswald (~leandre@2a01cb040075f90081b4f6c36d1b3763.ipv6.abo.wanadoo.fr)
[22:00:25] *** Quits: Uswald (~leandre@2a01cb040075f90081b4f6c36d1b3763.ipv6.abo.wanadoo.fr) (Changing host)
[22:00:25] *** Joins: Uswald (~leandre@user/Uswald)
[22:01:47] *** Quits: proller (~p@2a02:6b8:0:40c:5c0b:5f0f:95f3:a200) (Ping timeout: 256 seconds)
[22:02:27] *** Joins: k8yun (~k8yun@24.244.29.102)
[22:02:48] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:12:44] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[22:18:10] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[22:18:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b)
[22:23:49] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[22:25:58] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 250 seconds)
[22:28:22] *** Quits: joaofukuda_ (~joaofukuk@191.255.113.250) (Read error: Connection reset by peer)
[22:32:52] *** Joins: skapata (~Skapata@user/skapata)
[22:33:47] <LordKalma> https://bugreports.qt.io/projects/QTBUG/issues/QTBUG-100536 // They are indeed worried about performance :p
[22:35:43] *** Joins: jokoon2 (~eio@2a01:e0a:542:e160:b5ef:78c0:d3be:544c)
[22:35:58] <LordKalma> https://bugreports.qt.io/browse/QTBUG-100483
[22:36:00] <LordKalma> interesting
[22:37:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:37:42] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[22:37:49] *** Quits: jokoon (~eio@2a01:e0a:542:e160:f8f0:2d11:8195:8750) (Ping timeout: 240 seconds)
[22:38:09] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[22:40:53] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[22:43:14] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[22:43:26] *** Joins: rg (~r-g@163.172.90.106)
[22:45:38] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:55:36] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:57:09] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:57:24] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:58:07] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[22:58:57] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:02:36] *** Quits: andreasbuhr (~quassel@p549db796.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:05:12] <fldme> when I resize a vector, does it free the removed elements?
[23:07:52] *** Quits: AssKoala (~asskoala@user/asskoala) (*.net *.split)
[23:07:52] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[23:07:52] *** Quits: traxex (traxex@user/traxex) (*.net *.split)
[23:07:52] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[23:07:52] *** Quits: imMute (~immute@user/immute) (*.net *.split)
[23:07:52] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[23:07:52] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[23:07:52] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[23:07:53] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[23:07:53] *** Quits: shenghi (~shenghi@chrysocolla.mutablevoid.org) (*.net *.split)
[23:07:57] *** Joins: traxex_ (traxex@sdf.org)
[23:10:02] <PJBoy> it destroys them yeah
[23:12:25] *** Joins: AssKoala (~asskoala@user/asskoala)
[23:12:25] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[23:12:25] *** Joins: imMute (~immute@user/immute)
[23:12:25] *** Joins: xisop (~xisop@bnull.net)
[23:12:25] *** Joins: tabakhase (tabakhase@user/tabakhase)
[23:12:25] *** Joins: urdh (~urdh@user/urdh)
[23:12:25] *** Joins: computerquip (sid423484@user/computerquip)
[23:12:25] *** Joins: shenghi (~shenghi@chrysocolla.mutablevoid.org)
[23:13:11] *** Emet-Selch is now known as Azem
[23:16:13] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Ping timeout: 250 seconds)
[23:16:14] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Ping timeout: 240 seconds)
[23:16:14] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Ping timeout: 240 seconds)
[23:16:26] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Ping timeout: 250 seconds)
[23:16:36] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Ping timeout: 256 seconds)
[23:16:38] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Ping timeout: 252 seconds)
[23:16:38] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Ping timeout: 252 seconds)
[23:16:39] *** Quits: wielding (~wielding@user/wielding) (Ping timeout: 250 seconds)
[23:17:03] *** Quits: capjack[m] (~raffaem@2001:470:69fc:105::393) (Ping timeout: 268 seconds)
[23:17:40] <ashafq> Alipha: Thanks a lot
[23:20:16] <RandomReader> fldme - that wandbox does more than just reading a text file, and I wouldn't call it 100% correct as-is, it makes a few assumptions but probably fits its intended use case
[23:21:10] *** traxex_ is now known as traxex
[23:21:14] *** Quits: traxex (traxex@sdf.org) (Changing host)
[23:21:14] *** Joins: traxex (traxex@user/traxex)
[23:28:22] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[23:29:52] *** Joins: magla (~gelignite@d5366c9a.access.ecotel.net)
[23:31:05] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:34:03] *** Quits: gehn (~gehn@user/gehn) (Ping timeout: 256 seconds)
[23:34:45] *** Joins: proller (~p@80.240.216.69)
[23:37:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:38:36] <ashafq> Alipha: I think I made a terrible design
[23:39:02] <ashafq> Alipha: Wish I was able to use constructors inside a method
[23:39:30] <ville> ashafq: you can...
[23:39:45] <ashafq> ville: How? Maybe I am missing that...
[23:39:49] <RandomReader> Stuff seemed fine aside from the fact that you didn't follow Rule of 5, what's the current problem?
[23:39:53] <ville> just call it?
[23:40:21] <ashafq> RandomReader: can you point the rules to me again?
[23:40:32] <ville> however it would indeed be somewhat unusual circumstance if you've hte need to placement new on top of the object it self
[23:40:43] <RandomReader> https://en.cppreference.com/w/cpp/language/rule_of_three#Rule_of_five
[23:41:21] <RandomReader> (define *all* the special member functions, so in Stuff's case you need to create the move constructor and move assignment operators, and =delete the copy ones)
[23:41:28] <LordKalma> "if you need to write a destructor/{copy|move} constructor you [probably] need to define all of them"
[23:41:31] <LordKalma> basically that
[23:41:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:41:53] <LordKalma> "if you need to write a destructor/{copy|move} {constructor|assignment} you [probably] need to define all of them"
[23:42:05] <LordKalma> forgot that one
[23:42:07] <RandomReader> but just doing that seems logically fine
[23:42:21] <RandomReader> as in, at first glance, I would expect Stuff to behave well
[23:42:25] <RandomReader> afterward
[23:43:28] <ashafq> For some reason, the code I have is invoking copy constructor instead of move
[23:43:56] <ashafq> That's why I think I did something terrible.
[23:43:57] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[23:44:14] *** Joins: Uswald (~leandre@2a01cb040075f90081b4f6c36d1b3763.ipv6.abo.wanadoo.fr)
[23:44:14] *** Quits: Uswald (~leandre@2a01cb040075f90081b4f6c36d1b3763.ipv6.abo.wanadoo.fr) (Changing host)
[23:44:14] *** Joins: Uswald (~leandre@user/Uswald)
[23:44:29] <RandomReader> well if you follow Rule of 5 for this thing, you've specified both copy and move constructors, and =deleted the copy constructor
[23:44:42] <RandomReader> so at that point you'll get a compile error at the place trying to copy it inappropriately, and can fix that place
[23:46:02] <ashafq> RandomReader: https://godbolt.org/z/4Gxd4zrGz OK, now I get the same error
[23:46:37] <ashafq> RandomReader: so I have to write the move constructor by hand? no = default?
[23:46:46] <RandomReader> Stuff has no move operations, you still need to create those
[23:46:55] <RandomReader> yes, as Alipha said, the defaults won't do the correct thing anyway
[23:47:26] <ashafq> RandomReader: I see...
[23:47:31] <RandomReader> compiler has no idea what move is supposed to mean for your class, because the point is that your class has special non-default behavior
[23:47:40] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[23:48:05] <ashafq> I see, now that makes sense.
[23:48:09] <RandomReader> so, when you introduce special behavior, like by having a particular destructor .. this is exactly what Rule of 5 is for, to remind you that now everything is special and must be explicitly designed
[23:48:21] <ashafq> And for inherited base class, do I make move operations virtual?
[23:48:57] <RandomReader> no, constructors can't be virtual and operators .. well, that's complicated, but "should not be" virtual
[23:49:45] <RandomReader> when making defaults for the derived class, the compiler will do what it can from what the base allows .. so in this case, the base does not allow copy, so the defaults for the derived class will also delete copy
[23:50:11] <RandomReader> this is because compiler default is to recursively do the same thing to each member and base
[23:50:29] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[23:50:44] <Alipha> having base classes be copiable or movable is potentially questionable, as it could lead to accidental slicing
[23:50:48] <RandomReader> so, when compiler goes to create default copy constructor, it tries to *use* copy constructor for each member and base .. here it would find base's is deleted, and know it can't do that, so delete default  copy for derived too
[23:50:56] <RandomReader> same logic for every other default
[23:50:58] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[23:52:01] <Alipha> { void *p = new int; void *q = std::move(p); cout << p, q; }  // ashafq, and just to illustrate, moving a pointer (or any fundamental type) simply does a copy
[23:52:01] <geordi> 0x1be1530, 0x1be1530
[23:52:25] <RandomReader> if you're creating a polymorphic tree here, you probably want to mark the base ones "protected" to avoid slicing
[23:52:27] <Alipha> so if you want p to become nullptr, you have to do that yourself
[23:52:55] <RandomReader> (depends on exact usage though, the operations need to be there regardless)
[23:52:57] *** Joins: ivii (~ivan@user/ivii)
[23:53:23] <ashafq> Alipha, RandomReader: Thank you very much!
[23:53:56] <RandomReader> welcome
[23:54:40] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[23:56:05] *** Joins: mintograde (~mintograd@47.201.5.61)
[23:56:42] *** Joins: proller (~p@2a02:6b8:b081:a414::1:36)
[23:57:21] *** Joins: p-i-_ (~Ohmu@183.89.35.200)
[23:57:32] <PJBoy> on today's episode of MSVC can't optimise https://godbolt.org/z/PvY5Yf5Yv
[23:58:09] <PJBoy> creating a giant array on the stack that gets memset to 0, just so it can be memcpy'd into the destination array
[23:58:37] *** Quits: minto (~mintograd@47.201.5.61) (Ping timeout: 240 seconds)
