[00:00:04] *** Joins: YaoNai (~YaoNai@user/yaonai)
[00:16:35] * GumbyPAN CPAN Upload: AnyEvent-SOCKS-Client-0.051 by ZLOBUS https://metacpan.org/release/ZLOBUS/AnyEvent-SOCKS-Client-0.051
[00:16:35] * GumbyPAN CPAN Upload: SNMP-Info-3.75 by OLIVER https://metacpan.org/release/OLIVER/SNMP-Info-3.75
[00:17:35] *** Joins: aspic (~shifty~~~@ppp121-44-125-254.syd-gls-har-bras39.tpg.internode.on.net)
[00:20:07] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[00:40:10] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[00:49:02] <genio> Super fun. Run through an entire OS install process on a VMWare machine knowing you'll be building a template from it in just a few minutes... get done, and it won't boot. Rinse and repeat several times. 
[01:01:46] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:03:36] *** Quits: magla (~gelignite@55d4a93f.access.ecotel.net) (Quit: Stay safe!)
[01:03:51] *** Joins: oskie (usel@user/oskie)
[01:04:20] <oskie> hi, are you supposed to check the result of 'print' to a file handle? or is it enough to check the 'close' call?
[01:06:52] <lopid> perl will tell you if it failed. you are using strict and warnings, yes?
[01:09:47] *** Joins: whynot (~whynot@37.73.105.113)
[01:11:12] *** Quits: hudo (~hudo@62.68.27.70) (Ping timeout: 256 seconds)
[01:13:38] <Grinnz> it won't actually
[01:13:55] <Grinnz> the result of print is rarely useful, writes don't fail because it's all buffered
[01:14:19] <Grinnz> but you do want to check the return value of close() if you want to be sure of data consistency
[01:15:14] <Grinnz> autodie will cause close to throw exceptions on failure instead, among other things (but has some gotchas)
[01:16:05] *** Joins: vague_ (~vague@irssi/staff/vague)
[01:16:47] *** vague_ is now known as jari
[01:18:53] *** Quits: jari (~vague@irssi/staff/vague) (Client Quit)
[01:19:46] *** Joins: Guest71 (~Guest71@adsl-72-50-5-53.prtc.net)
[01:24:00] *** Joins: Vicissitude (~Vicissitu@user/vicissitude)
[01:25:36] *** Joins: johnjay (~pi@192.142.100.34)
[01:25:52] *** Parts: Vicissitude (~Vicissitu@user/vicissitude) ()
[01:31:41] *** rorx_ is now known as rorx
[01:31:43] * GumbyPAN CPAN Upload: MIDI-RtMidi-FFI-0.03 by JBARRETT https://metacpan.org/release/JBARRETT/MIDI-RtMidi-FFI-0.03
[01:35:30] *** Quits: furrymcgee (~devuan@31.179.186.66) (Quit: leaving)
[01:37:15] *** Quits: johnjay (~pi@192.142.100.34) (Read error: Connection reset by peer)
[01:43:13] *** Joins: johnjay (~pi@192.142.100.34)
[01:44:40] *** Quits: aspic (~shifty~~~@ppp121-44-125-254.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[01:45:09] *** Joins: aspic (~shifty~~~@ppp121-44-109-74.syd-gls-har-bras38.tpg.internode.on.net)
[01:45:17] *** Quits: PapaChub (~PapaChub@vzw-54.parabon.com) (Quit: Leaving)
[01:45:35] *** Quits: proller (~p@2a02:6b8:b081:a404::1:2c) (Ping timeout: 252 seconds)
[01:58:02] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 244 seconds)
[01:59:11] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[02:11:47] * GumbyPAN CPAN Upload: Acme-Cow-0.2 by HADFL https://metacpan.org/release/HADFL/Acme-Cow-0.2
[02:15:46] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 252 seconds)
[02:20:53] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (Quit: because)
[02:22:11] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[02:23:07] *** Quits: Guest71 (~Guest71@adsl-72-50-5-53.prtc.net) (Ping timeout: 256 seconds)
[02:23:48] <corwin> is there no place for bryan's book at all?  does he have any response to this litany of concerns?  I don't know bryan at all. Are they problematic, personally or something?
[02:25:14] <Grinnz> well, yes, but that's unrelated
[02:25:19] <Grinnz> also it's brian not bryan
[02:26:19] <Grinnz> https://www.reddit.com/r/perl/comments/mykrqm/is_there_any_way_to_make_a_subroutines_argument/gvviu1i/ is the most recent time i remember him "addressing" any of it
[02:26:21] <Paperbot_> Link title(s): [ Is there any way to make a subroutine's argument have a scalar context? : perl ]
[02:27:15] <Grinnz> to my knowledge he nor the other authors have never acknowledged that they are problems
[02:28:53] <corwin> Sure. I like Learning Perl. Do you think it's possible to learn programing via learning perl still, as a matter of practice?  I always thought of that as the real TM for that book.
[02:29:28] <Grinnz> no idea, probably - its problems are exceedingly specific to its refusal to show modern perl practices
[02:30:11] <corwin> mean acknowledge and prefer some conventions regarding "the right way to do it"?
[02:30:32] <Grinnz> meaning it starts off showing non-strict code and bareword filehandles (and apparently calling subs with &)
[02:30:43] <corwin> sure, which tbf, is a way to do it.
[02:30:52] <Grinnz> not a way to teach beginners
[02:31:00] <corwin> that it's not the preferred day may be a bit aside the point, e.g. a different book's problem.
[02:31:12] <Grinnz> well, that it's not the preferred way is why we don't recommend it
[02:31:21] <corwin> but, of course, I can see why you'd call it out before someone chose a book.
[02:32:35] <corwin> imo, not focusing on the development practice (like starting right off with the scoping to explain) might make it easier to learn programming/perl.
[02:32:43] <xenu> sadly there aren't that many alternatives, the only one i'm aware of is ovid's beginning perl
[02:32:47] <xenu> but it's pretty gold
[02:32:53] <xenu> old*
[02:33:03] <Grinnz> that's basically brian's argument, and i can see how it could work in a classroom like he explains. it's still a terrible idea for a book
[02:33:41] <corwin> yes, we don't make life-commitments to books unless perhaps we're authoring them. it's a "power of and" thing, right?
[02:33:53] <Grinnz> ?
[02:34:55] <Grinnz> if a book starts a newbie off with non-strict code and bareword filehandles, and another one and various tutorials don't, we're going to point people at the latter
[02:34:58] <Grinnz> it's really that simple
[02:35:24] <corwin> it feet like pretty hostile treatment of the book, considering the lack of attention to strict/warnings and failure to lead with that is the substitive complaint.  Maybe it would be more fair to recommend ovid's book if someone is only reading one, or first, or something vs (what sounded to me like) a do not read warning.
[02:36:09] <Grinnz> the person in this case kept insisting it was modern, which is false, that's why it went that way
[02:36:49] <corwin> modern is probably the ugliest word in the langage, imo.  but ya, points made. thanks for engaging.
[02:37:21] <Grinnz> i have no problem recommending learning perl to someone who is clearly aware of the problems with it. but such a person might be beyond the point of needing a beginner's book
[02:37:35] <Grinnz> and that person clearly did not fit that description
[02:38:42] <corwin> we can likely agree the key advice to learning a language (or to program) is.. read :) the manual, books, blogs.. mostly code.
[02:38:49] <Grinnz> so it's kind of more of a "case by case, and most of the cases don't favor it" thing
[02:43:07] <Grinnz> another key advice is everyone learns differently so find what works for you
[02:43:16] <corwin> :100:
[02:44:58] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[03:12:40] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[03:12:40] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[03:17:35] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[03:19:03] *** Joins: Adoi (~Adoi@user/adoi)
[03:20:21] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[03:20:47] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[03:22:19] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[03:23:39] *** Quits: whynot (~whynot@37.73.105.113) (Quit: leaving)
[03:32:46] *** Quits: pizdets_ (~pizdets@183.182.114.199) (Ping timeout: 252 seconds)
[03:34:02] *** Joins: pizdets (~pizdets@183.182.111.16)
[03:36:16] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[03:36:41] *** Quits: fstd (~fstd@xdsl-84-44-235-10.nc.de) (Remote host closed the connection)
[03:36:48] *** Joins: fstd (~fstd@xdsl-84-44-235-10.nc.de)
[03:37:01] *** Quits: vanfanel64 (~vanfanel6@user/vanfanel64) (Read error: Connection reset by peer)
[03:37:10] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 240 seconds)
[03:37:21] *** Joins: vanfanel64 (~vanfanel6@user/vanfanel64)
[03:50:51] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[03:50:52] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[03:53:44] *** Joins: Martchus_ (~martchus@dynamic-095-118-080-223.95.118.pool.telefonica.de)
[03:54:12] *** Quits: Martchus (~martchus@dynamic-077-009-156-048.77.9.pool.telefonica.de) (Ping timeout: 245 seconds)
[04:14:42] *** Quits: Pali (~pali@user/pali) (Ping timeout: 245 seconds)
[04:29:04] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:35:52] *** Joins: timlegge (~quassel@142.167.255.204)
[04:51:08] *** Quits: timlegge (~quassel@142.167.255.204) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[04:52:15] *** Joins: timlegge (~quassel@142.167.255.204)
[04:58:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[04:59:04] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:15:27] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 240 seconds)
[05:16:32] *** Joins: mattil (~mattil@87-92-211-212.rev.dnainternet.fi)
[05:21:05] *** Quits: mattil (~mattil@87-92-211-212.rev.dnainternet.fi) (Ping timeout: 244 seconds)
[05:22:20] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[05:22:46] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[05:22:46] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[05:22:53] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:25:14] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[05:25:47] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:26:05] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Client Quit)
[05:28:12] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[05:28:50] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[05:39:02] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:47:25] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[05:48:29] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:52:52] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Client Quit)
[05:53:05] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 252 seconds)
[05:56:33] *** Joins: pucara (~i@181.92.74.206)
[06:15:54] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[06:16:03] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Client Quit)
[06:16:36] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 250 seconds)
[06:25:57] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Remote host closed the connection)
[06:26:01] *** Quits: Su-Shee (~Susanne@p4ff4961e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:26:08] *** Joins: cation21 (cation@user/cation)
[06:27:07] *** Quits: cation (cation@user/cation) (Ping timeout: 252 seconds)
[06:27:51] *** Joins: Su-Shee (~Susanne@p4ffc7b1c.dip0.t-ipconnect.de)
[06:28:19] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[06:29:09] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[06:29:15] *** Joins: pj (~pj@ghettoforge/pj)
[06:29:36] *** cation21 is now known as cation
[06:38:27] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:38:27] *** FinnElija is now known as Guest4486
[06:38:27] *** Quits: Guest4486 (~finn_elij@user/finn-elija/x-0085643) (Killed (calcium.libera.chat (Nickname regained by services)))
[06:38:27] *** finn_elija is now known as FinnElija
[06:45:30] *** Joins: Michelle (~michelle@203.206.128.220)
[07:01:45] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[07:01:45] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Client Quit)
[07:05:09] *** Quits: cation (cation@user/cation) (Remote host closed the connection)
[07:08:15] *** Joins: cation (cation@user/cation)
[07:08:40] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[07:15:13] *** Joins: Medlir (Medlir@user/medlir)
[07:19:08] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[07:21:50] *** Joins: pj (~pj@ghettoforge/pj)
[07:24:19] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[07:27:09] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 244 seconds)
[07:27:17] *** Quits: aspic (~shifty~~~@ppp121-44-109-74.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[07:27:34] *** Joins: aspic (~shifty~~~@ppp121-44-126-166.syd-gls-har-bras39.tpg.internode.on.net)
[07:29:40] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[07:34:22] *** Joins: Manderson (~manderson@45.40.80.170)
[07:41:31] *** Joins: movingtxt (~movingtxt@user/movingtxt)
[07:42:28] *** Joins: pj (~pj@ghettoforge/pj)
[07:54:01] *** Quits: Martchus_ (~martchus@dynamic-095-118-080-223.95.118.pool.telefonica.de) (Ping timeout: 244 seconds)
[07:54:19] *** Joins: Martchus (~martchus@dynamic-077-004-073-206.77.4.pool.telefonica.de)
[07:56:47] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[08:06:39] *** Quits: Jonno_FTW (~come@api.carswap.me) (Changing host)
[08:06:39] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[08:26:12] *** Quits: aspic (~shifty~~~@ppp121-44-126-166.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[08:28:52] *** Joins: Manderson_ (~manderson@45.40.80.170)
[08:31:25] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[08:32:55] *** Joins: Linux77_ (~Linux7_7@186.233.182.237)
[08:35:08] *** Joins: gast0n (~g4570n@user/gast0n)
[08:36:52] *** Quits: Linux77 (~Linux7_7@237-182-233-186.raimax.com.br) (Ping timeout: 252 seconds)
[08:58:16] *** Joins: hudo (~hudo@62.68.27.70)
[09:07:12] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[09:17:12] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:21:17] <shlomif> it sucks that my system woke up from suspension
[09:26:03] *** Quits: jess (~jess@libera/staff/jess) ()
[09:26:46] *** Joins: furrymcgee (~devuan@31.179.186.66)
[09:36:09] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[09:42:33] *** Joins: Guest9056 (~Guest90@ip-178-200-124-190.hsi07.unitymediagroup.de)
[09:43:43] *** Quits: Guest9056 (~Guest90@ip-178-200-124-190.hsi07.unitymediagroup.de) (Client Quit)
[09:45:10] *** Quits: hudo (~hudo@62.68.27.70) (Ping timeout: 240 seconds)
[09:45:23] *** Quits: Maff (maff@user/maff) (Read error: Connection reset by peer)
[09:51:24] *** Joins: Maff (maff@user/maff)
[09:56:17] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:61e9:b352:c0b7:8092) (Ping timeout: 245 seconds)
[10:01:37] * GumbyPAN CPAN Upload: App-Netdisco-2.049002 by OLIVER https://metacpan.org/release/OLIVER/App-Netdisco-2.049002
[10:04:45] *** Joins: jplesnik (~jplesnik@83.240.60.31)
[10:06:04] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:22:31] *** Joins: Manderson (~manderson@45.40.80.170)
[10:25:10] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 240 seconds)
[10:46:35] *** Quits: Su-Shee (~Susanne@p4ffc7b1c.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[10:47:37] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[10:48:19] *** Joins: Su-Shee (~Susanne@p4ff49742.dip0.t-ipconnect.de)
[10:49:04] *** Joins: tobybl (~tobybl@189.192.115.87.dyn.plus.net)
[10:54:17] *** Joins: horsepatat (~horsepata@80.89.78.58)
[11:00:01] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 244 seconds)
[11:17:50] *** Quits: pucara (~i@181.92.74.206) (Quit: Lost terminal)
[11:20:55] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[11:25:46] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[11:29:52] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[11:30:51] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[11:39:20] *** Joins: Manderson_ (~manderson@45.40.80.170)
[11:40:50] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 244 seconds)
[11:41:47] * GumbyPAN CPAN Upload: App-Netdisco-2.049003 by OLIVER https://metacpan.org/release/OLIVER/App-Netdisco-2.049003
[11:43:11] *** Joins: last1 (~last1@109.100.153.87)
[11:45:09] <last1> is there a module that can append a text to an e-mail message ( both plain/html ) ?
[11:45:21] <Botje> perlbot: wmail
[11:45:22] <perlbot> Botje: No factoid found. Did you mean one of these: [email] [wsl] [wump] [wwnn] [wanna] [win32] [camel] [final] [ianal] [pbml]
[11:45:25] <Botje> perlbot: email
[11:45:25] <perlbot> Botje: Like HTML, email is deceptively complex. Whenever possible, avoid rolling your own solution and trust the ones put forth by those who work with it all day, every day. For sending mail, try Email::Stuffer. For more complicated cases of composing (or parsing): Email::MIME(::Kit). For working with email addresses, see Email::Address::XS. Also see <sending email>.
[11:49:24] <last1> I know it's complicated :| I was looking at Email::MIME  , but my goal is to add a piece of text at the beginning of the message, in either the text/plain or text/html parts
[11:49:52] <last1> I was thinking of walking all mime parts using walk_parts , but then it gets really complicated
[11:50:28] <last1> because some text/html parts are in fact attachments, not the mixed/alternative content which gets displayed
[11:57:57] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[11:59:09] <furrymcgee> there is mimeexplode in MIME::Tools
[11:59:43] *** Joins: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[11:59:57] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 244 seconds)
[12:00:52] *** Quits: movingtxt (~movingtxt@user/movingtxt) (Quit: leaving)
[12:08:36] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[12:09:08] *** Joins: mattil (~mattil@airio.portalify.com)
[12:09:55] <last1> alright, and last question.... is there a module to modify an html document and add some code right after the body tag ?
[12:10:30] <Botje> any HTML parsing module.
[12:10:57] <Botje> Mojo::DOM is popular nowadays, I like HTML::TreeBuilder 
[12:11:46] <mst> XML::Twig is also nice sometimes
[12:12:03] <mst> I'd tend to default to using whichever of the two Botje mentioned was handy though
[12:12:03] <Botje> right. I had HTML::Twig in mind but -ENOEXIST
[12:13:04] <last1> cool, I'm checking out Mojo::DOM right now - thank you
[12:13:24] <last1> when it says append/prepend methods, do those perform that action after the open of the tag or after ?
[12:13:59] <last1> how about I just test ;)
[12:14:43] <Botje> last1: it thinks in terms of "nodes". <foo>...</foo> is a node.
[12:14:48] <mst> it's quick enough to play with, yes
[12:15:08] <mst> the thing to remember is Mojo::Collection has ->first and ->last methods
[12:15:16] *** Quits: horsepatat (~horsepata@80.89.78.58) (Ping timeout: 252 seconds)
[12:15:18] <mst> so if you want to prepend a new first child
[12:15:28] <mst> $dom->at('body')->child_nodes->first->prepend(...);
[12:15:37] <mst> and if you wanted to append a new last child
[12:15:42] <mst> ->child_nodes->last->append(...)
[12:16:21] <last1> ok, it might not be enough. so long story short...I am trying to prepend html parts in email messages with a warning in a mail app
[12:16:36] <last1> I just test sent an e-mail from gmail and their text/html plain literally contains just: <div dir="ltr">test please ignore</div>
[12:16:45] <last1> no <html> tags, <head> <body> etc
[12:17:08] <last1> but other apps do send text/html content with all those tags
[12:17:34] <last1> how can I latch on to emails like Gmail sends
[12:17:35] <Botje> if the other side understnads it, why waste money sending <html>
[12:18:15] <mst> last1: my $target = $dom->at('body') || $dom->child_nodes->first;
[12:18:16] <mst> I guess
[12:18:20] <vague> last1, add your own start/end tags?
[12:18:54] <last1> just wanted to make sure this is legitimate behavior first..well, I guess, even if it isn't, I have to deal with it
[12:19:18] <mst> email is entirely about "what shit in the wild accepts" I'm afraid
[12:19:28] <Botje> perlbot: email hates the living
[12:19:29] <perlbot> Botje: http://www.youtube.com/watch?v=JENdgiAPD6c
[12:19:30] <mst> 'legitimate' is for unix beards to grumble about over a pint
[12:19:32] <Botje> <3
[12:19:43] <mst> and, like, we do totally grumble about it
[12:19:50] <mst> but reality must be dealt with as it exists :D
[12:19:54] <last1> :))
[12:20:03] <last1> I hate reality I guess :P
[12:20:15] <mst> working with email will do that
[12:20:16] <Botje> it is apathetic towards you
[12:20:24] <buu> AUGH BOTJE
[12:20:49] <Botje> DID I STEP ON SOMETHING
[12:20:59] *** Joins: choroba (~E.Choroba@88.146.255.106)
[12:21:03] <mst> Botje: yeah, you'
[12:21:09] <mst> Botje: yeah, you're tracking email in onto the carpet
[12:22:36] <tm604> that's the first time I've seen "in" used as a verb today, must be Friday
[12:24:01] *** Joins: art1 (~romeyke@p200300ccdf05e1002e06a3e1f28dd66b.dip0.t-ipconnect.de)
[12:24:14] *** Joins: fwg (~fwg@user/fwg)
[12:30:26] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[12:31:04] *** Joins: Pali (~pali@user/pali)
[12:31:51] *** Joins: horsepatat (~horsepata@80.89.78.58)
[12:33:01] *** Quits: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Quit: Leaving...)
[12:33:31] <last1> all in all, this is much better and easier than working with MIME::Signature
[12:34:41] *** Joins: aspic (~shifty~~~@ppp121-44-126-166.syd-gls-har-bras39.tpg.internode.on.net)
[12:34:43] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[12:43:21] *** Quits: Su-Shee (~Susanne@p4ff49742.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[12:44:14] *** Quits: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Quit: Leaving...)
[12:45:18] *** Joins: Su-Shee (~Susanne@p4ffc7689.dip0.t-ipconnect.de)
[12:49:59] *** Quits: gordonfish[m] (~gordonfis@user/gordonfish) (Ping timeout: 252 seconds)
[12:54:56] *** Joins: gordonfish[m] (~gordonfis@user/gordonfish)
[12:58:17] *** Joins: holyghost (~holyghost@109.136.39.83)
[13:01:37] *** Quits: Peppard (~quassel@2001:470:1f0b:751:2138:a51:b543:a7bd) (Quit: No Ping reply in 180 seconds.)
[13:02:49] *** Joins: Peppard (~quassel@2001:470:1f0b:751:f924:bb47:9aec:9c91)
[13:06:20] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[13:10:42] *** Quits: Kharec (~Kharec@lfbn-lyo-1-1955-56.w90-66.abo.wanadoo.fr) (Quit: Lost terminal)
[13:14:59] *** Quits: timeless (sid4015@id-4015.charlton.irccloud.com) ()
[13:15:15] *** Joins: timeless (sid4015@id-4015.ilkley.irccloud.com)
[13:19:48] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[13:27:27] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[13:28:04] *** Joins: aman (~aman@user/aman)
[13:28:18] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 244 seconds)
[13:32:45] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:39:01] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e)
[13:48:29] *** Quits: stephen87 (sid33834@user/stephen87) ()
[13:48:45] *** Joins: stephen87 (sid33834@user/stephen87)
[13:51:40] <mst> *snrk* https://news.ycombinator.com/item?id=28400755
[13:51:41] <Paperbot_> Link title(s): [ Also worth remembering that a perl statement can be converted into an expression... | Hacker News ]
[13:51:51] <homura> python sux
[13:51:53] <homura> perl rocks
[13:53:27] <lopid> that's some quick learning how to spell, there
[13:53:45] <mst> homura: explicit is better than implicit
[13:54:03] <mst> homura: which is why perl is superior because we have 'use strict' and python makes up variable names as it goes along
[13:54:42] <homura> agreed
[13:58:52] *** Quits: horsepatat (~horsepata@80.89.78.58) (Read error: Connection reset by peer)
[13:59:46] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[14:02:36] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Quit: Ping timeout (120 seconds))
[14:03:12] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[14:03:27] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e) (Ping timeout: 245 seconds)
[14:04:12] *** Quits: ilmari_ (~ilmari@user/ilmari) (Ping timeout: 245 seconds)
[14:06:04] *** Joins: ilmari_ (~ilmari@user/ilmari)
[14:13:02] <bugweiser> mst, javascript has that as well :)
[14:13:53] <mst> bugweiser: where do you think they stole it from?
[14:14:11] <mst> also javascript's is runtime rather than compile time, so not as effective
[14:14:17] <bugweiser> lisp ? lol
[14:14:19] <mst> but at least 'let' faithfully copied perl's 'my'
[14:14:21] <mst> no. us.
[14:14:30] <mst> 'use strict' and 'let' are both from perl
[14:15:16] <mst> ES6 has a lot of "perl programmers got annoyed and fixed things" features
[14:15:19] <mst> it's really quite pleasant
[14:15:54] <ehuelsmann[m]> "let"?
[14:16:01] <ehuelsmann[m]> ah.
[14:16:08] <ehuelsmann[m]> sorry, I should read backscroll.
[14:16:12] *** Couture_ is now known as dimbag
[14:16:25] <bugweiser> I'm not that much fan of a bunch of syntactic sugar in es6 (and classes shouldn't have been added, but just my opinion).
[14:17:00] <ehuelsmann[m]> let seems to have Lisp (Common Lisp) semantics too - and it's even called "let" in CL...
[14:17:04] <mst> ehuelsmann[m]: no
[14:17:27] <ehuelsmann[m]> no?
[14:17:32] <mst> lisp-style let does not, at all, have the same semantics
[14:17:42] <mst> it's a nesting based construct
[14:18:09] <mst> bugweiser: lexical scoping and getting an error on typo'ed variable names are both unarguable wins though
[14:18:19] <dimbag> Hi, do you suggest https://metacpan.org/pod/Crypt::JWT to create a JWT with nojolicious
[14:18:20] <Paperbot_> Link title(s): [ Crypt::JWT - JSON Web Token (JWT, JWS, JWE) as defined by RFC7519, RFC7515, RFC7516 - metacpan.org ]
[14:18:26] <dimbag> nojolicious*
[14:18:28] <bugweiser> agree
[14:18:32] <dimbag> mojolicious*
[14:18:37] <mst> dimbag: what's wrong with Mojo::JWT ?
[14:19:22] <mst> bugweiser: finally getting usable closures without having to do let-over-lambda style rock-banging with immediately invoked functions has mide my life noticeably more pleasant
[14:19:28] <dimbag> mst, the problem: I did not see it :D, thank you again
[14:20:55] <bugweiser> it wasn't untill es7 that the 'new' classes actually could do something that wasn't possible before (including in es6 classes which could be fully shimmed, should one be crazy enough).
[14:21:33] <mst> bugweiser: IMO the main advantage of the 'class' keyword in ES6 was that it automatically defaulted the body to more sensible scoping rules etc.
[14:22:06] <bugweiser> oh well. One thing from my current perspective I prefer dealing with in javascipt is 'strings'. Basically couse I understand them and I still fail to understand this matter in perl. Good tutorials *very* welcome.
[14:22:10] <mst> also I strongly suspect 'people who insisted on not understanding how prototype based objects work stopped complaining at the language team all the damn time' was worthwhile for them
[14:22:26] <bugweiser> ^ that (sadly)
[14:22:39] <bugweiser> anyhow. I'm not wanting to start a language 'topic' :)
[14:22:59] <mst> not sure what about strings in perl is weird
[14:23:04] <mst> 'foo bar' is a basic string
[14:23:11] <mst> "foo ${bar} baz" is a string with interpolation
[14:23:18] <homura> bugweiser: wat up homes
[14:23:19] <homura> wuu2
[14:23:20] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[14:23:20] <mst> just like in javascript you can do `foo $(bar) baz`
[14:23:44] <mst> shit
[14:23:50] <mst> just like in javascript you can do `foo ${bar} baz`
[14:23:55] * mst glares at his fingers
[14:24:21] <bugweiser> lol
[14:24:46] <mst> so basically they work the same way, javascript just spells it `...` instead of "..."
[14:25:54] <bugweiser> from my current prespective (being at day 2 of writing perl) the docs are very unclear and often conflicting regarding strings (encoding etc.). 
[14:26:50] <bugweiser> It took me the better part (and the kind help of user botje) to figure out that an 'upgraded' string is internally (what I'd call) wtf-8 and is called utf8 (no hyphen) in perl.
[14:28:13] <bugweiser> and that 2**63-1 is not unicode (but perl can accept it as a code point) and that perl doesn't say that 2*31-1 is 'not unicode'. Odd behaviour.. 
[14:29:35] <mst> bugweiser: did you read https://perldoc.perl.org/perlunitut ?
[14:29:35] <Paperbot_> Link title(s): [ perlunitut - Perl Unicode Tutorial - Perldoc Browser ]
[14:29:48] <mst> also never ever care what '
[14:29:52] <mst> also never ever care what 'upgraded' means
[14:30:03] <mst> that's something you should avoid knowing or thinking about
[14:30:24] <mst> use encode() and decode() to convert between text and bytes and make sure you always know which one a given variable contains
[14:31:07] <bugweiser> the perl faq literally says it's good that users get confused as they are not supposed to understand it. Other doc-pages say it's majorly important to understand for all the cases where perl interacts with the os and ships it's own internal encoding, and the encode docs even have a quote about "The useless has its use, A man has to understand the useless before you can talk to him about the useful."
[14:32:14] <mst> the FAQ is externally maintained and non-normative, I don't care what it says
[14:32:26] <bugweiser> ah, good to know
[14:32:44] <mst> perlunitut is the official tutorial and says exactly what I just told you
[14:32:51] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:33:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:33:48] <mst> periodically we talk some poor fool into rewriting another man page to be clearer, but when I say "read this one" there's usually a reason why I suggested that one
[14:33:57] *** Joins: csrf (~csrf@user/csrf)
[14:34:00] <mst> (the trouble with being a 25+ year old language)
[14:34:26] <bugweiser> I read those, but must read them again (and again). 
[14:34:56] <mst> people obsess over ::upgrade() and ::downgrade() and all that crap but it's just a way to cause yourself problems - I basically never ever do that in code
[14:35:06] <mst> I do what perluniintro tells you to because it's simpler and more reliable
[14:35:18] <mst> also the author is in here and does a lot of helping people who're stuck
[14:40:06] <bugweiser> my current understanding is: for 'code points' larger than 255 (8 bit) perl switches to a blob (byte-string) which encodes a variable width integers up to 2**31-1 OR 2**32-1 (signed / unsigned, I GUESS depending on platform)  *OR*  2**64-1 or 2**63-1  (I guess again depending on platform). And it's called utf8 (aka wtf-8 if you consider it just a variable width integer encoding without unicode-rules).
[14:40:56] *** Quits: mjgardner (sid182628@charlton.irccloud.com) ()
[14:41:02] <mst> bugweiser: what
[14:41:11] *** Joins: mjgardner (sid182628@id-182628.ilkley.irccloud.com)
[14:41:22] <mst> bugweiser: that's internals you should never need to worry about
[14:41:25] <bugweiser> Today I hope to figure out about code-points below 256. Some doc-pages say thy will be ISO 8859-1, other docpages say they will be platform native.
[14:41:46] <mst> unless you're writing C code that manipulates perl internals, none of that's relevant
[14:42:43] <bugweiser> so, when I have the flag UTF8 i can tell the string changed to perls utf8 internal encoding, ie, variable width integers (limited by platform preferred native integer size).
[14:42:51] <mst> never look at that flag
[14:42:54] <mst> that is also a mistake
[14:43:09] <mst> people insisting on fucking around in the internals is what causes most problems with perl and unicode
[14:43:18] <bugweiser> the docs say i's both relevant and unrelevant. I'll see if I still have that tab open that says it's relevant and post the link.
[14:43:29] <mst> perluniintro does not mention any of this
[14:43:30] <LeoNerd> The flag is badly named. If it had a different name people might be less confused about it
[14:43:31] <bugweiser> i'm not insisting on fucking around, lol.
[14:43:38] <mst> if you are not following what it says, you are doing it wrong
[14:43:53] <mst> bugweiser: except you are because I already told you not to touch any of that
[14:43:58] <mst> decode() on the way in, encode() on the way out
[14:43:59] <bugweiser> LeoNerd, probably true :)
[14:44:06] <mst> never touch the internals
[14:44:41] <mst> if I give you a piece of advice and then you immediately start talking about stuff that's exactly against the advice, then you are insisting on fucking around :P
[14:45:34] <mst> just like knowing that even though the rest of the world thinks in utf8 the javascript internals happen to use UTF-16 is not particularly useful when writing javascript
[14:47:14] *** Quits: patterner_ (sid212303@charlton.irccloud.com) ()
[14:47:28] *** Joins: patterner_ (sid212303@id-212303.ilkley.irccloud.com)
[14:49:01] *** Joins: horsepatat (~horsepata@80.89.78.58)
[14:49:19] *** Quits: genio (sid223130@id-223130.charlton.irccloud.com) ()
[14:49:34] *** Joins: genio (sid223130@id-223130.ilkley.irccloud.com)
[14:50:01] <bugweiser> mst, I didn't intend to go against your advice! (sidenote, javascript is ucs2 (only the last editions have some utf-16 additions)).
[14:51:25] <bugweiser> i'm currently looking for the link of the docs that say it IS important
[14:51:51] <mst> bugweiser: UTF-16 is effectively an extended UCS-2 and javascript now specifies UTF-16
[14:51:54] <bugweiser> Regardless of said link, i'm perfectly happy to ignore the 'usless' once I understand it sufficiently.
[14:52:06] * GumbyPAN CPAN Upload: curry-2.000000-TRIAL by MSTROUT https://metacpan.org/release/MSTROUT/curry-2.000000-TRIAL
[14:52:12] <mst> why are you trying to understand C-level internals?
[14:52:24] * LeoNerd votes UCS-2⅝
[14:52:40] <mst> tm604: thoughts on https://metacpan.org/release/MSTROUT/curry-2.000000-TRIAL please
[14:52:41] <Paperbot_> Link title(s): [ curry-2.000000-TRIAL - Create automatic curried method call closures for any class or object - me... ]
[14:53:26] <mst> bugweiser: like if you really want to you can use Devel::Peek to dump out the underlying representations of things, but I doubt you'll find it informative
[14:53:53] <mst> this is firmly in the category of "if I'm not writing C, I'm only going to look this up if I've bugged myself into a corner"
[14:54:03] <bugweiser> mst. javascript, yes. But the core low-level javascript string semantics are ucs-2. (I once had to link this 'lessons learned in internationalisation' (something like that) article (usually on IBM site) from the main designer for strings in javascript to Matthias Bynes when he initially thought and wrote that js was utf16).
[14:54:30] <bugweiser> mst,botje tought me Devel:Peek, it was of *great* help
[14:55:01] <mst> bugweiser: right, I'm talking about what's currently specified, the history of javascript, while fascinating, isn't the point
[14:56:11] <bugweiser> potatoes, potatoes :) they are still additions (and vastly incomplete, not even a native grapheme splitter). str.length still is ucs-2 (etc. )
[14:56:21] <bugweiser> anywho, i'm here for perl :)
[14:56:51] <mst> but really while it's still bytes, you interact in terms of bytes
[14:57:07] * GumbyPAN CPAN Upload: Text-ANSI-Tabs-0.06 by UTASHIRO https://metacpan.org/release/UTASHIRO/Text-ANSI-Tabs-0.06
[14:57:07] <mst> once you do decode() it's a string, and the internal representation belongs to perl and is not yours so please just leave it alone
[14:57:37] <LeoNerd> IMHO, "length" is a terrible question to ask of a string. What you want is "count", and to explain what kinds of things you are counting (bytes, codepoints, graphemes, maybe columns), or perhaps return a multipart object that has all of those counts in it
[14:57:39] <bugweiser> I *intend* to leave it alone! But I also want to sufficiently understand it.
[14:57:41] <mst> so groveling through that internal representation unless you're specifically trying to debug something somebody else's C code did is generally a bad idea
[14:57:55] <mst> bugweiser: and I'm saying "don't touch this" *is* sufficient understanding :P
[14:58:03] <bugweiser> LeoNerd, fully agree!
[14:58:41] <LeoNerd> "café".graphemes  should be unambigously the value 4. Whether  .codepoints is 4 or 5 depends on what actual codepoints are used in there; and in turn that would suggest if  .bytes  gives you 5 or 6
[14:59:12] <bugweiser> "don't touch" != "don't understand" (and I promise to post the link to the perl docs that say so).
[14:59:23] <mst> bugweiser: sigh
[14:59:41] <bugweiser> sigh ?
[14:59:45] <mst> ok, then use Devel::Peek to dump the guts of random things you constructed until you feel sufficiently knowledgeable
[14:59:51] <LeoNerd> The SvUTF8 flag on strings has as much relevance to *perl* programming, as the AvREAL flag has on arrays
[15:00:24] <LeoNerd> So if you're going to waste^W spend some time learning about SvUTF8 I would suggest you spend equal time on AvREAL
[15:00:52] <mst> I mean, I absolutely have read most of the C code in the perl tarball over the years
[15:00:55] <mst> it's good fun
[15:01:02] <mst> but I don't pretend it was necessary before I could use a string
[15:01:10] <LeoNerd> There's some real gems in there if you look in the right places ;)
[15:01:12] <LeoNerd> ... or the wrong ones
[15:02:21] <bugweiser> x-y problem: I look at x (how do strings work) to understand y (how do I do it correctly, ie how do I guarantee that what I indend to happen (ignoring internals) is gonna happen. Including regexes.
[15:02:49] <LeoNerd> "ignoring internals" ;)
[15:02:52] <mst> bugweiser: no, it's an actual X-Y problem and your going down a route that will make it harder to understand how things will work in userland.
[15:02:54] <LeoNerd> You said it
[15:03:06] <bugweiser> when I use for example \x{80} then what encoding will it mean ?
[15:03:10] <mst> bugweiser: remember X-Y problems indicate you should stop doing that.
[15:03:21] <mst> bugweiser: which is why I am suggesting you should stop doing that
[15:03:23] <LeoNerd> "encoding" is a property of filehandles
[15:03:41] <LeoNerd> What "encoding" that string gets written into a filehandle using, depends on the encoding set on that filehandle
[15:04:00] <mst> bugweiser: what the fuck is \x{80} ?
[15:04:38] <LeoNerd> "\x{80}"  creates the same thing that  chr(0x80)  does. I.e. a string containing a single codepoint, the number 0x80
[15:04:48] <bugweiser> ^
[15:04:54] <LeoNerd> If you write that into a bytewise filehandle (i.e. with no :encoding layer), you'll get a single 0x80 byte
[15:05:15] <LeoNerd> If you write that into a filehandle with an encoding, you'll get whatever bytes that encoding requires for the U+0080 Unicode character
[15:05:19] <bugweiser> LeoNerd, now what character does chr(0x80) mean ?
[15:05:21] <mst> LeoNerd: surely you'd want to use \N{U+<something>} for that
[15:05:30] <LeoNerd> It means the number 0x80
[15:05:34] <LeoNerd> I.e. 128
[15:05:41] <LeoNerd> 0200 in Octal
[15:05:51] <mst> \x{} is directly specifying code points
[15:05:56] <mst> and does not have an encoding at all
[15:05:57] <LeoNerd> CXXVII in Roman, if you prefer
[15:06:06] <bugweiser> ok, i'll rephrase: what unicode codepoint will it be?
[15:06:07] <LeoNerd> Or CXXVIII if you can count
[15:06:11] <LeoNerd> It might not be one at all
[15:06:18] <LeoNerd> We haven't decided that it definitely is yet
[15:06:27] <LeoNerd> Perl strings are just a compact way to store a vector of numbers
[15:06:28] <mst> bugweiser: you are asking what encoding
[15:06:33] <LeoNerd> What those numbers *mean* is up to you
[15:06:36] <mst> bugweiser: but you call encode() to specify an encoding
[15:07:02] <mst> bugweiser: so the answer is "it doesn't mean any encoding, it will mean an encoding when you call encode(), you are trying to understand something irrelevant to the question that doesn't actually exist"
[15:07:25] <mst> bugweiser: which is why I keep telling you that decode() on the way in, encode() on the way out, is how this works
[15:07:36] <mst> bugweiser: perluniintro also tells you this same fact
[15:07:48] <mst> seriously, you're barking up completely the wrong tree here
[15:08:28] <mst> this is why I keep sighing, you're asking nonsense questions because that's not how any of this works :P
[15:08:47] * mst considers starting a betting pool on how many times he's going to have to repeat that before bugweiser believes him
[15:09:01] <LeoNerd> Perl strings that store text don't remember if that text is in English or French. It is up to you, the programmer, to remember that distinction. They do not remember if the text is HTML-encoded, or not. Again that's your problem. They *also* do not remember if the numbers in those strings represent plain byte numbers, or Unicode codepoints, or anything else.
[15:09:08] <LeoNerd> All of these facts are *your problem*
[15:10:12] <LeoNerd> If you choose to write that string to a filehandle that *has* an :encoding layer, then you are telling perl "this string contains Unicode codepoints, trust me". And it will encode that string into bytes per that specification
[15:10:48] <LeoNerd> If you choose to write that that string to a filehandle that has a plain binmode that doesn't have an :encoding layer, then you are instead saying "this string contains plain bytes, please write them directly". and that is what will happen
[15:11:14] <LeoNerd> If it turns out you have made a mistake in that assumption, and you have written the wrong thing, then you will be talking French to an Englishman. So try not to do that.
[15:14:41] <bugweiser> LeoNerd, so an internal perl-string is *always* assumed to hold 'codepoints' equal to unicode's codepoints? (When we send this to an encode handler) ?
[15:15:16] <mst> bugweiser: when you call encode(), you *tell* it what the string holds
[15:15:37] <LeoNerd> bugweiser: that is completely oppposite of what I jsut wrote. please reread
[15:15:44] <bugweiser> ok
[15:15:52] <LeoNerd> A perl string contains a sequence of "numbers". Non-negative integers.
[15:16:01] <LeoNerd> Perl really doesn't care what those numbers might mean
[15:16:20] <LeoNerd> Some operations treat those numbers as being Unicode codepoints. Other operations treat those numbers as being bytes
[15:16:42] <LeoNerd> Yet other operations really don't care... e.g. something like  substr  just operates on a subsequence of the numbers, without having to care as to their meaning
[15:21:03] *** Quits: ignarps- (~iggy@user/ignarps) (Quit: ZNC - https://znc.in)
[15:21:10] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[15:23:16] *** Joins: APic (apic@apic.name)
[15:24:09] <bugweiser> I get that perl strings are a sequence of non-negative integers (either fixed width or var-width (flagged as UTF8 using 'utf8'(aka wtf-8) upto platform preference).  But I didn't ask about outputting this perl string to a binmode, but sending it to an encoding handler. Will the encoding handlers (not binmode) always assume the sequence of numbers (in the perl string) mean unicode points (and assume these integers are unicode codepoints and transla
[15:24:09] <bugweiser> te them according to the requested output charset and encoding)?
[15:24:51] <LeoNerd> An encoding function takes in a Unicode text string, and outputs a byte string. So yes, that function will presume a string coming in contains Unicode codepoints
[15:24:57] <LeoNerd> That is an assumption made by such a function
[15:25:24] <bugweiser> ok, clear
[15:25:31] <LeoNerd> If string functions have to care about the meaning of the values in the strings, they ought to document this
[15:25:35] <LeoNerd> But often authors are lazy and don't
[15:26:04] *** Quits: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[15:27:41] *** Joins: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net)
[15:29:12] <bugweiser> so, when I do: chr(0x80) then the 'perl string' will contain integer 0x80 and an encoding handler
[15:29:19] <LeoNerd> No
[15:29:20] <mst> no
[15:29:26] <mst> stop inventing encoding handlers!
[15:29:28] <LeoNerd> Just the number. encoding is a property of a _filehandle_
[15:29:30] * mst cries
[15:29:46] <LeoNerd> E.g.   binmode STDOUT, ":encoding(UTF-8)";
[15:29:56] <LeoNerd> There. Now the STDOUT filehandle will be encoded using UTF-8
[15:29:57] <bugweiser> whoops, I meant to delete that string, not hit enter.
[15:29:58] <mst> and that's basically a way of doing an encode() call as you print to the handle
[15:30:03] <LeoNerd> That's entirely a property of the _filehandle_, not the string
[15:30:11] *** Quits: itok (sid418430@2001:67c:2f08:3::6:627e) ()
[15:30:29] *** Joins: itok (sid418430@id-418430.ilkley.irccloud.com)
[15:32:39] <bugweiser> <mst> stop inventing encoding handlers!  << how is chr(0x80) inventing encoding handlers?
[15:33:19] <mst> bugweiser: "the 'perl string' will contain integer 0x80 and an encoding handler"
[15:33:30] <mst> bugweiser: is what you said
[15:33:42] <bugweiser> ahhhh
[15:33:47] <bugweiser> gotcha.
[15:33:59] <mst> and, no, it doesn't, cos there's no such thing
[15:34:15] <bugweiser> well I wanted to not send that message, but pressed enter instead. Indeed it didn't make sense (it wasn't even finished).
[15:34:28] <bugweiser> sorry for the confusion !
[15:34:54] <bugweiser> What I meant to ask was: 
[15:35:44] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[15:37:56] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:38:13] <bugweiser> suppose i'm on a windows CP-1252 (native) platform. I do 'chr(0x80)' in my perl-code. What would I get? Euro, or unicode PAD control ?
[15:38:27] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 245 seconds)
[15:38:29] <LeoNerd> "get"?
[15:38:33] <LeoNerd> What are you "get"ing?
[15:38:38] *** Joins: mattil (~mattil@airio.portalify.com)
[15:38:56] <LeoNerd> If you do  0x12  what are you "get"ing? You don't "get" anything.. it's just a value. You'll have to perform some operation to *get* something
[15:39:11] <LeoNerd> What *operation* are you performing?
[15:39:37] <mst> bugweiser: please explain what "Euro, or unicode PAD control" even means.
[15:40:36] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[15:40:37] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[15:40:44] <mst> because I am unable to parse that as anything related to anything we're talking about
[15:41:01] <bugweiser> sorry, creating a perl string. my $str = "\x{80}";
[15:41:24] <LeoNerd> Right. So now you have a string that contains one number. The number 0x80. 128. 0200 in octal. CXXVIII in Roman
[15:41:30] <LeoNerd> That's all. No other information
[15:42:12] <bugweiser> Euro currency symbol. vs control block 2 'PAD' character (in unicode).
[15:42:23] <LeoNerd> Those are some meanings of the number 128 sure.
[15:42:31] <LeoNerd> It might also be my height in cm
[15:42:37] <LeoNerd> It could be all sorts of other things
[15:42:38] <bugweiser> lol, ok
[15:42:44] <haj> "windows CP-1252 (native) platform" is irrelevant for Perl
[15:43:02] <LeoNerd> Until you *do* something with this string, what that number means doesn't matter. It Is Just A Number
[15:43:26] <mst> haj: yes, we've said that lots of times, we're into the repeating it but more specifically until the user believes us phase of the discussion :D
[15:43:42] *** Quits: aspic (~shifty~~~@ppp121-44-126-166.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[15:50:07] *** Joins: icedjava37 (~icedjava3@188.4.17.130.dsl.dyn.forthnet.gr)
[15:50:58] <haj> Sorry for the knee-jerk reaction.  I get "I'm on Windows, things are different there" way too often
[15:51:37] <bugweiser> mst, i'm sorry I appear to come across so 'bad'.. Not my intention. It's also not about 'not believing' something. I'm just trying to understand things. 
[15:51:54] <mst> bugweiser: except we tell you things, and then you ask the same question again phrased slightly differently
[15:52:03] <LeoNerd> You're "trying" to understand a bit too much, you're just putting more meaning into things than actually exists
[15:52:49] <mst> right, trying to understand things that you've invented in your head is a recipe for questions that don't make sense to anybody outside your head :D
[15:53:18] <bugweiser> what did I invent in my head?
[15:54:43] <Botje> that chr magically imbues meaning to numbers like 0x80 depending on locale.
[15:54:45] <mst> all this stuff about strings 'having' encodings and the idea that creating a specific byte means you 'get' a byte -in- an encoding rather than ... getting a byte
[15:55:12] <mst> encode() expects a string in the form of codepoints and returns an encoded set of bytes
[15:55:29] <mst> decode() expects en encoded set of bytes and returns a string of codepoints
[15:55:35] <mst> there is no more to it than that
[15:56:10] *** Quits: aman (~aman@user/aman) (Ping timeout: 240 seconds)
[15:56:57] <bugweiser> well, yes there is, defining what the numbers mean. But it appears LeoNerd addressed that: the endode and decode functions assume the numbers mean the unicode numbers.
[15:57:20] <mst> no, no there isn't
[15:57:31] <mst> read what I said again. carefully.
[15:57:44] <mst> what LeoNerd said is precisely the same thing as what I just said.
[15:57:50] <LeoNerd> The string -values- don't know or care what their numbers mean. The meaning is entirely put there by the functions -looking- at them
[15:58:10] <mst> which is why I said that encode() 'expects a string in the form of codepoints'
[15:58:16] <mst> every single word there means something
[15:58:31] <LeoNerd> The string "dec" - what does that mean? Is it referring to the month December? Or the operation "decrement"? Or maybe the long-dead computer equipment manufacturer DEC?
[15:58:46] <LeoNerd> The string doesn't know or care what that meaning is. That meaning is put there by whoever looks at the strign
[15:58:58] <LeoNerd> Same thing with the underlying numbers. Maybe they're unicode, maybe not.
[15:59:34] <last1> I have this line of code: $htmlsig=decode('UTF-8', decode_qp($ret->{'reply_text'}));   basically I store a UTF8 string as quoted printable in the DB and then try to get it out
[15:59:52] <mst> last1: um.
[15:59:55] <last1> but Perl complaints with: Wide character in subroutine entry at /usr/local/lib/perl5/site_perl/Email/MIME/Encodings.pm line 55, <STDIN> line 322
[16:00:04] <mst> last1: well, yes, because that line of code makes no sense
[16:00:19] <mst> you decode() things to get decoded from encoded. you encode() things to get encoded from decoded.
[16:02:16] *** Quits: horsepatat (~horsepata@80.89.78.58) (Ping timeout: 244 seconds)
[16:02:26] <bugweiser> https://perldoc.perl.org/perluniintro  says:
[16:02:26] <Paperbot_> Link title(s): [ perluniintro - Perl Unicode introduction - Perldoc Browser ]
[16:02:26] <mst> last1: that code doesn't make any sense and I don't even know what you're doing
[16:02:41] <bugweiser> Internally, Perl currently uses either whatever the native eight-bit character set of the platform (for example Latin-1) is, defaulting to UTF-8, to encode Unicode strings. Specifically, if all code points in the string are 0xFF or less, Perl uses the native eight-bit character set. Otherwise, it uses UTF-8.
[16:03:07] <mst> bugweiser: correct. which is exactly what I said as well.
[16:03:42] <mst> encode() expects a string in the form of codepoints and returns an encoded set of bytes
[16:03:48] <mst> decode() expects en encoded set of bytes and returns a string of codepoints
[16:03:59] <mst> bugweiser: ^^ please read those two sentences, carefully.
[16:04:01] <last1> ok, I may be confused
[16:04:12] <mst> last1: I have no idea what you're even doing right now, sorry
[16:05:10] <last1> user enters a string in the browser, I call encode_qp() on it and save it to the DB
[16:05:21] <mst> last1: why would you even do that
[16:05:32] *** Quits: dimbag (~Couture@dynamic-193-228-166-152.ppp.kmv.ru) (Ping timeout: 245 seconds)
[16:05:36] <mst> you got a warning from Email::MIME::Encodings
[16:05:45] <mst> that already handles qp-ing things if you wanted that
[16:06:08] <mst> though the whole thing seems strange to me
[16:06:10] <last1> I think I thought going through quoted printable is easier than having to store utf-8 in the DB directly
[16:06:21] <mst> but databases handle utf8 natively these days
[16:06:33] <mst> you're adding a bunch of extra weird complexity that'll maker your database's life harder
[16:06:36] <mst> and I don't understand why
[16:09:51] <last1> I'm trying all sorts of things to try and reach my goal :) I want to take that stored text and inserted into an HTML document
[16:09:58] <last1> *insert
[16:10:29] <last1> so right now, I insert using what you showed me earlier: $target->prepend_content($htmlsig);
[16:10:46] <mst> last1: which database are you using
[16:10:52] <last1> mysql
[16:10:58] <last1> and $htmlsig=decode_qp($ret->{'reply_text'});  
[16:11:05] <mst> last1: so DBD::MariaDB has automatic utf8 support and you don't need to do anything
[16:11:10] <last1> if I print $htmlsig, it shows the proper text on the terminal
[16:11:13] <mst> if it's a utf8mb4 column it'll just work
[16:11:50] <last1> well, say I want to finish it this way
[16:12:03] <last1> when I print $htmlsig, it says: <p>Анхааруулга:</p> which is ok
[16:12:05] <haj> with "print" and "terminal", we're back in encoding hell :) 
[16:12:36] <last1> but once it tries to add that to the message via prepend_content , it turns it into weird characters
[16:12:50] *** Quits: neilb___ (sid492745@id-492745.charlton.irccloud.com) ()
[16:12:56] <mst> last1: well I've no idea where you got 'reply_text' from so it's impossible to tell
[16:13:07] *** Joins: neilb___ (sid492745@id-492745.ilkley.irccloud.com)
[16:13:33] <last1> it shows up like this after the prepend, which I think is also quoted printable:     <body><p>=D0=90=D0=BD=D1=85=D0=B0=D0=B0=D1=80=D1=83=D1=83=D0=BB=D0=B3==D0=B0:
[16:13:50] <Botje> perlbot: utf8 d090
[16:13:51] <perlbot> Botje: U+D090 (ed 82 90): HANGUL SYLLABLE KYIL [킐] 
[16:13:53] <mst> can we please remove quoted printable from the entire situation
[16:13:57] <mst> because it makes no sense at all
[16:14:59] <haj> It looks like last1 isn't decoding form input from utf-8, nor encoding what they print on a terminal, so it "works" by cancellation of errors
[16:15:13] <mst> yeah
[16:15:28] <mst> but since they've not showed us where the web input came from or what they did with it
[16:15:41] <mst> finding -that- bug is being obscured by the obsession with the quoted printable error
[16:16:11] <last1> I have no control over the input...frontend guys are sending it like that :|
[16:16:19] <mst> last1: lies
[16:16:30] <mst> last1: you've still not even told me what you got from the frontend
[16:16:43] <mst> last1: you just decided to quoted-printable some stuff and then won't tell me what the original data was
[16:16:47] <last1> I have a value in the DB, stored as quoted printable
[16:16:50] <mst> why?
[16:17:01] <mst> the front-end guys wrote the value to the db?
[16:17:17] <mst> the web browser is directly writing to the database?
[16:17:21] <last1> yes, from a web form: this word: Анхааруулга:
[16:17:34] <last1> it goes through PHP and stored in the DB
[16:17:34] <mst> what handles the POST from the web form?
[16:17:51] <mst> ok, but *you* said that *you* thought quoted printable would be simpler
[16:18:17] <mst> "I think I thought going through quoted printable is easier than having to store utf-8 in the DB directly"
[16:18:34] <mst> so if it was your decision, I don't see how it's something you have no control over
[16:18:42] <last1> It's shorter than explaining the whole situation I guess
[16:18:55] <mst> ... don't do that!
[16:19:22] <mst> if you tell me things that aren't true, at some point I will notice and it will *really* piss me off because it wastes my time.
[16:19:33] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[16:19:41] *** Quits: i7c (~i7c@user/i7c) (Quit: !jensnds)
[16:19:57] <mst> we've spent more time with me having to play twenty questions until you finally told me the real truth, *and* I'm annoyed. this was not an improvement over just telling me the real problem in the first place.
[16:20:01] <last1> alright, sorry about that
[16:20:34] <mst> anyway, you tried a decode and a decode_qp
[16:20:39] <mst> and then said you got a wide character error
[16:20:45] <last1> I actually removed the decode('UTF-8', .. ) part and it works well
[16:20:47] <mst> is that because you did the double decode and then tried to 'print $string' ?
[16:20:52] <last1> I guess I had that decode in there for no reason
[16:21:55] <mst> I suspect what you wanted was
[16:21:59] <mst> Email::MIME::Encodings::decode(qp => $str)
[16:22:04] <mst> and then pass the result of that to Mojo::DOM
[16:22:22] <mst> but yeah, double-decode is usually wrong
[16:22:37] <last1> yes, and I realised Mojo::DOM is pretty smart
[16:22:48] <last1> it saw the content-encoding of the message was quoted-printable
[16:22:56] <last1> and inserted my string back as quoted printable
[16:23:02] <last1> that's what confused me again
[16:23:02] *** Joins: i7c (~i7c@user/i7c)
[16:23:09] <mst> wait, no
[16:23:15] <mst> no it didn't
[16:23:22] <last1> hmm, I'm pretty sure it did
[16:23:28] <mst> no.
[16:23:31] <last1> lol
[16:24:00] <mst> in fact, depending on what exactly you got from the database
[16:24:07] <mst> you may need a decode() before passing to Mojo::DOM
[16:24:16] <mst> I think the 'wide character in print' is because you tried 'print $thing'
[16:24:29] <mst> on a $thing that would've made sense if you'd passed it to ->prepend_content or whatever
[16:24:33] <last1> that was when I had the double decode
[16:24:35] <last1> so check this out
[16:24:38] <mst> but didn't make sense to print without an encode() call
[16:24:47] <mst> if you used the paste site in /topic to show me some actual code
[16:24:57] <mst> rather than fragments plus explanations I can't trust because you made half of them up
[16:25:02] <mst> thast would make things faster
[16:25:49] <last1> https://pastebin.com/sWFsk6Ka
[16:25:50] <Paperbot_> Link title(s): [ if ($uth->rows>0) {                $ret=$uth->fetchrow_hashref(); - Pastebin.com ]
[16:25:51] <Repaster> Repasted text from last1: http://perl.bot/p/1odj9p
[16:26:12] <mst> don't use pastebin.com for perl code. ever.
[16:26:17] <mst> it uses @ as a formatting character.
[16:26:23] <mst> this is not funny when perl code is involved.
[16:26:48] <last1> ok :|
[16:27:00] <mst> that's why e have a working site in /topic
[16:27:06] <mst> so you don't have to guess and pick a broken one
[16:27:30] <mst> of course, it occurs to me that we don't know *what* the front-end guys qp'ed into the database
[16:28:34] <mst> I would suggest that you deliberately put something with emojis in it into the web form
[16:28:42] <mst> and then see what that gets you in the database
[16:28:43] <last1> if I print $htmlsig right after the decode_qp () line, it shows: <p>Анхааруулга:
[16:28:51] <last1> which is what was entered
[16:29:04] <last1> so that part is fine
[16:29:20] <last1> and then that gets inserted into the html message, and I print $email->as_string
[16:29:47] <last1> and in there, I see it as: ><p>=D0=90=D0=BD=D1=85=D0=B0=D0=B0=D1=80=D1=83=D1=83=D0=BB=D0=B3==D0=B0:
[16:30:12] <mst> right, because that part of the email has been encoded as quoted-printable by ->as_string because that's how you put data like that in an email
[16:30:20] <mst> that's what's supposed to happen
[16:30:27] <perlbot> Anonymous pasted a new file at https://l.perl.bot/p/hzsiv5 - 
[16:30:30] <mst> you can then test it by viewing it in an actual email client
[16:31:02] <last1> yep, so Mojo::DOM saw that encoding and converted my UTF-8 to quoted printable
[16:31:08] <last1> at least that's what I understood
[16:31:09] <mst> no it didn't!
[16:31:19] <mst> gods damnit why aren't you listening to me :(
[16:31:37] <mst> the $email object did that part!
[16:31:43] <last1> ok, then who turned <p>Анхааруулга: to <p>=D0=90=D0=BD=D1=85=D0=B0=D0=B0=D1=80=D1=83=D1=83=D0=BB=D0=B3==D0=B0: ?
[16:31:48] <last1> ooh
[16:31:53] <mst> the email mime encoding, like I keep saying
[16:32:01] <last1> Email::MIME
[16:32:14] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[16:32:16] * mst grumbles
[16:33:28] <last1> so this part $target->prepend_content($htmlsig."<br>\n\n"); inserted my text as it was, in UTF-8
[16:33:49] <last1> but this: $part->body_set( $dom->to_string );  turned it to qp ?
[16:33:52] <mst> and I *suspect* you wanted to've decode()ed it before passing it
[16:34:08] <mst> well, when $part's body was serialised it will've been qp'ed
[16:34:32] <last1> yeah, I was doing an additional decode before
[16:34:38] <mst> and I think that was right
[16:34:47] <mst> and I suspect if you take the current email and try to read it in a client, it will be buggered
[16:34:54] <last1> lol, but it was throwing the wide character error
[16:35:07] <mst> last1: what was throwing it when? BE SPECIFIC
[16:35:24] <last1> let me show you the output
[16:35:25] * mst cries
[16:35:33] <mst> you won't even tell me the output from what :(
[16:37:06] <last1> https://l.perl.bot/p/p4aml9
[16:37:06] <Paperbot_> Link title(s): [ Perlbot Pastebin ]
[16:37:08] <last1> yes I will :))
[16:37:26] <mst> right, but doing 'print $htmlsig;' there is an error
[16:37:35] <mst> if you have the right data in $htmlsig that *should* produce wide character errors
[16:37:51] <mst> because you can't directly print decoded data
[16:37:58] <mst> but decoded data is what *Mojo::DOM* wants
[16:38:01] <last1> so my original code was right after all lol
[16:38:09] <haj> Well, as I wrote: Cancellation of errors.  "I can't decode because then print warns with wide characters".  BTST.
[16:38:09] <mst> that's what I've said about five times, yes
[16:38:28] <last1> ah wow
[16:38:36] <last1> thrown off by my testing methodology
[16:38:49] <mst> print encode('UTF-8', $decoded_string);
[16:38:54] <mst> is what you basically always want to be doing
[16:39:02] <mst> otherwise your print will only work when the data is broken
[16:39:16] <mst> like I've been (trying and failing at) explaining :D
[16:39:20] <gerikson> email was a mistake
[16:39:25] <gerikson> or UTF-8, can't decide
[16:39:29] <gerikson> ;)
[16:39:31] <mst> porque no los dos
[16:39:36] <gerikson> indeed! 
[16:39:45] <last1> well, ok, so I removed that print entirely
[16:39:58] <last1> now I just get the warning, the email as a whole won't even print anymore
[16:40:06] <mst> eh?
[16:40:16] <last1> let me show you the code again :)
[16:40:17] <LeoNerd> Annoyingly, UTF-8's "it sortof feels like ASCII" might actually be a bit of a downside of it. It allows encoding bugs to lurk somewhat unnoticed
[16:40:35] <LeoNerd> If you fail to encode/decode UTF-16 or UCS-4 incorrectly you'll notice *very* quickly
[16:40:43] <LeoNerd> er..
[16:40:44] <mst> ascii silly question, getty silly ansi
[16:40:47] <LeoNerd> If you fail to...
[16:40:56] <gerikson> LeoNerd: that's a good point
[16:41:00] <last1> https://l.perl.bot/p/d8cyg9
[16:41:00] <Paperbot_> Link title(s): [ Perlbot Pastebin ]
[16:41:18] <gerikson> otoh UTF-8 meant that US-EN text could be encoded at very little extra space cost
[16:41:21] <last1> this just outputs: Wide character in subroutine entry at /usr/local/lib/perl5/site_perl/Email/MIME/Encodings.pm line 55, <STDIN> line 322.
[16:41:28] <gerikson> which helps those that have "sympathy for the machine" 
[16:41:32] <last1> but if I remove that extra decode() , then it works fine
[16:41:52] <mst> last1: you're using prepend_content in one branch and prepend in the other
[16:41:56] <mst> last1: they are not the same thing
[16:42:18] <last1> I know, if I have a <body> tag I want to prepend inside it
[16:42:22] <LeoNerd> This is why I like to include some Espernato stuff in a proper Unicode text-handling test. It isn't even in Latin-1 so tends to uncover most of the likely encoding bugs. -- https://metacpan.org/release/PEVANS/Object-Pad-0.52/source/t/95utf8.t
[16:42:23] <Paperbot_> Link title(s): [ t/95utf8.t - metacpan.org ]
[16:42:26] *** Joins: horsepatat (~horsepata@80.89.78.58)
[16:42:41] <mst> last1: oh, I see what you're doing
[16:42:41] <last1> if there's no body tag, I want to prepend outside whatever tag it finds ( the first one )
[16:42:45] <mst> yeah, got that part, sorry
[16:42:58] <last1> this line works: $htmlsig=decode_qp($ret->{'reply_text'});  prints the e-mail as string
[16:43:14] <last1> with the extra decode() I get the wide character error and no e-mail gets printed at all
[16:43:41] <gerikson> LeoNerd: nice idea, just outside the Latin-1 space
[16:43:47] <gerikson> but not too hard to type
[16:44:05] <mst> last1: yeah, I think I need to remember wtf ... oooh, hang on
[16:45:12] <mst> last1: give me a minute, now I think I'm the confused one :D
[16:45:59] <last1> finally, I did it! :))
[16:46:27] <haj> LeoNerd: I only hope that non-ASCII identifiers don't get too popular.  They tend to throw off syntax-aware programs (like that metacpan highlighter at https://metacpan.org/release/PEVANS/Object-Pad-0.52/source/t/95utf8.t#L52)
[16:46:27] <Paperbot_> Link title(s): [ t/95utf8.t - metacpan.org ]
[16:46:58] <haj> Also in lines 21 and 34
[16:47:16] <LeoNerd> haj: Yup, it's a great test case for checking that kind of thing
[16:47:26] <LeoNerd> Indeed, metacpan doesn't realise ĝ is a fine letter for identifiers
[16:48:23] <gerikson> haj: isn't that a problem for highlighters? 
[16:49:15] <gerikson> afaik you've been able to use unicode for identifiers in Java since forever
[16:49:19] <mst> last1: aha. what happens if you keep the decode() but *then* do $node->prepend($dom->new_tag('p', $htmlsig)) ?
[16:49:57] <mst> last1: I think the problem here is you think you've got HTML, but if it was HTML then stuff like utf8 would already have been HTML encoded, but it isn't, and basically your input data from the db doesn't know what it is :/
[16:50:32] <mst> you might be able to get away with it by parsing the stuff in the db, then mangling it into html-with-actual-encoded-text, then pushing it back
[16:51:00] <mst> or you may just have to abandon the decode() and hope clients guess correctly
[16:52:02] <mst> last1: hrm. or maybe I'm overthinking now
[16:52:05] <haj> gerikson: Yes, it is.  I'm currently working on CPerl mode for Emacs, and it has the a-zA-Z stuff in quite a few places.  Also, Emacs uses "syntax tables" to map each character to its meaning (word, punctuation, ...).  You _can_ use syntax tables with unicode, but they blow up alot
[16:52:29] <mst> last1: you know what? go back to not having the decode(), let's assume I just confused myself, and test the resulting $email->to_string in an actual email client and see if it works
[16:52:42] <mst> last1: if it does, we're just going to assume this is me being lost unless/until somebody reports a bug
[16:52:44] <last1> I will run the code on a variety of messages, some without quoted printable encoding
[16:52:46] <last1> and see what happens
[16:53:27] <mst> last1: it *looks* like I was confused about Mojo::DOM and *it* actually wants encoded text and I was just being daft about that part
[16:54:59] <mst> last1: OOOOOOH I see what's going on!
[16:55:02] <last1> ok, let me check. I am testing on base64 encoding now
[16:55:25] <mst> last1: you're using $part->body and $part->body_set and *those* operate directly on encoded data
[16:55:37] <mst> last1: thing is if you get a $part that *isn't* in utf-8 that's going to break
[16:56:03] <mst> last1: $part->body_str and $part->body_str_set would both work with decoded data
[16:56:13] <mst> last1: and if you did *that* then decode('UTF-8' would be correct
[16:56:24] <last1> ok, so I have to find an e-mail not encoded in utf-8
[16:56:25] <mst> last1: and in *that* case your code would still work if the html part was encoded in not-utf-8
[16:56:39] <mst> last1: yes. because that's the only way to test my theory
[16:56:46] <mst> last1: and I think we've already proven that encodings hate me too :D
[16:56:49] <last1> ok, let me look through my e-mails
[16:56:51] <last1> :))
[16:57:10] *** Joins: ufobat (~martin@dynamic-095-114-004-008.95.114.pool.telefonica.de)
[16:57:20] <gerikson> haj: I figure the tools will catch up
[16:57:51] <last1> with base64 - utf8 it worked beautifully, let me find that non-utf8
[16:58:26] <mst> right, I *think* once you find one of those, body_str and body_str_set and decode('UTF-8' will be the way to make it all DTRT
[16:58:29] <mst> I *think*
[16:58:37] <mst> but I'm not going to believe me until you test it :D
[17:00:45] <last1> you are correct sirt
[17:00:47] <last1> *sir
[17:00:59] <mst> :D
[17:01:04] <perlbot> Anonymous pasted a new file at https://l.perl.bot/p/396j9q - 
[17:01:14] <mst> "mst is always right ... just not always on the first attempt" ;) ;) ;)
[17:01:23] <last1> that's what gets printed in a non utf-8 encoded message
[17:01:32] <mst> yeah, that ... *wince*
[17:01:38] <last1> ISO-8859-1 to be precise
[17:01:48] <mst> time to try body_str and body_str_set and decode() on the $htmlsig I guess :D
[17:02:05] <last1> hang on, let me read again what you wrote above
[17:02:21] <mst> last1: $part->body_str instead of $part->body will get you decoded body data
[17:02:39] <last1> and then I use the decode()
[17:02:40] <mst> last1: $part->body_str_set instead of $part->body_set will encode the new body data
[17:02:47] <mst> last1: right.
[17:03:18] <mst> last1: and those three things together should, I think, get the ISO message to come out a bit less mojibaked
[17:03:44] <mst> oh god except can ISO even represent those characters
[17:03:56] <haj> LeoNerd: I think it is ok that I add 95utf8.t to the Emacs test suite?
[17:04:02] <mst> you might have to just cry and re-encode the body
[17:05:05] <bugweiser> in html5 ISO-8859-1 means cp1252
[17:05:18] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 244 seconds)
[17:05:18] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 244 seconds)
[17:05:26] <mst> i.e. $part->charset_set('UTF-8'); $part->body_str_set94modified_body)
[17:05:29] <last1> yeah, it throws an error
[17:05:42] <last1> "\x{0410}" does not map to iso-8859-1 at /usr/local/lib/perl5/site_perl/Email/MIME.pm line 705, <STDIN> line 587
[17:05:45] <mst> yep
[17:05:54] <mst> on the upside, that's a much more accurate error :D
[17:06:12] <last1> so basically it doesn't make sense to print Russian chars in ISO-8859
[17:06:22] <LeoNerd> haj: Sure?
[17:06:24] <mst> right, *but*, now you're using body_str
[17:06:33] <mst> you can just set the charset before you call body_str_set
[17:06:41] <mst> and the body will end up as UTF-8 instead
[17:07:19] <mst> and at that point, the only thing that will break is an email that's lying about its own encoding - and you'll probably just have to detect those and not bother adding a signature to them or something
[17:07:46] <haj> budweiser: Nope.  cp1252 has the Euro symbol, ISO-8859-1 doesn't.  Look at the shaded symbols in https://en.wikipedia.org/wiki/Windows-1252#Character_set
[17:07:46] <Paperbot_> Link title(s): [ Windows-1252 - Wikipedia ]
[17:08:42] <bugweiser> haj, the html5 spec states that, for real
[17:09:16] <bugweiser> it requires that documents advertised as ISO-8859-1 actually be parsed with the Windows-1252 charset
[17:09:27] <mst> last1: on the upside, that last error was the sort of way I was *expecting* things to maybe break, which is frankly an improvement :D
[17:10:26] <bugweiser> haj, even your link says so :)
[17:10:32] <last1> it is, and it works, but now something else broke
[17:10:38] <last1> the text/plain part
[17:10:40] <last1> let me show code
[17:10:46] <mst> last1: you're going to have to do the same dance for that
[17:12:41] <last1> I did, but it seems to convert it to QP in text/plain ?
[17:12:49] <last1> at least those codes look like QP to me
[17:13:25] <last1> https://l.perl.bot/p/mncvxy
[17:13:25] <Paperbot_> Link title(s): [ Perlbot Pastebin ]
[17:13:54] <haj> budweiser: Sorry, you're correct.  That's ... weird.
[17:14:02] <last1> so the charset goes from ISO-8859 to UTF-8 as expected..but also qp ?
[17:14:35] <mst> that code's wrong.
[17:14:47] <mst> my $body = $part->body_str;
[17:14:53] <mst> $part->charset_set('UTF-8');
[17:15:08] <mst> $part->body_str_set($plainsig."\n\n".$body);
[17:18:02] <last1> same thing: https://l.perl.bot/p/nqp6g4
[17:18:03] <Paperbot_> Link title(s): [ Perlbot Pastebin ]
[17:18:03] <mst> you may also need to do $part->encoding_set('quoted-printable')
[17:18:12] <bugweiser> haj, np! while 'weird' I do think this was a good call (compare them both, the control block 2 has no use for html, it breaks nohing just adds chars and provides backward compatibility to when authors didn't grasp encodings at all and the majority wrote on windows..).  On linux I also often run into 0x80 just meaning Euro symbol.
[17:19:25] <bugweiser> ie, the html5 override makes more sense than adding some hybrid
[17:20:17] <last1> weird, so it does a convert to quoted printable
[17:20:41] <mst> I suspect what's happening is it's noticing it can't be 8bit
[17:20:43] <mst> encoding it as qp
[17:20:49] <mst> but not noticing it needed to do that
[17:20:52] <mst> whereas if we -force- qp
[17:20:56] <mst> you'll get the right result
[17:21:14] <last1> yeah, this solves it: $part->encoding_set('quoted-printable');
[17:21:27] <last1> woah, this seems like a very complete script now
[17:21:32] <last1> how much do I owe you ?
[17:21:57] * mst laughs
[17:22:04] <mst> I'll make you test some cpan code for me later :D
[17:22:27] <huf> so this code went for the <thing>_set pattern?
[17:22:31] <huf> just to be suuuper special?
[17:22:39] <mst> huf: it's Email::MIME
[17:22:46] <huf> why not cAMELcASE too?
[17:22:47] <mst> super special is inherent in the problem domain
[17:22:51] <huf> true, true
[17:23:06] <haarg> html5 succeeded largely by making those kinds of compromises. the initial spec was more about documenting how browsers actually behaved than trying to design a new perfect world, like xhtml did.
[17:24:27] <last1> thank you, much appreciated. I'll go test the hell out of this!
[17:25:10] <genio> I know, we'll make a REST API but we'll accept XML _AND_ JSON for some calls. We won't have a WSDL or a definition of any kind, and we'll make XML tag order significant.  Also, if you send us a JSON version of the method, we'll send you back an error response in XML. You'll love it!
[17:25:22] <bugweiser> I think a big win for html5 was also that it provided equivalent steps that real output should conform to. I find that an excelent method of specwriting (like es262). 
[17:27:13] <genio> I'm convinced that there's just someone out there working as a consultant that goes around to every single enterprise app designer and that someone is pulled in solely for the purposes of fucking up APIs
[17:27:43] <haarg> it should be possible to make an xml based api that isn't horrible to work with, but i've never seen one in the wild
[17:27:47] <huf> genio: that error part is how our ticket system works!
[17:27:49] <huf> it's great
[17:27:58] <huf> also there's only one error message
[17:28:33] <huf> oh and sometimes the api call succeeds but you get an error
[17:28:39] <huf> this is how you build trust :D
[17:28:42] *** Joins: tobybl_ (~tobybl@189.192.115.87.dyn.plus.net)
[17:28:43] <karjala> Is it true that CPAN modules will never start with the word Local:: ?
[17:29:06] <karjala> and ie I am safe to start my own modules with that hierarchy?
[17:29:35] <karjala> I think I remember reading something about it, but can't find it.
[17:29:50] <karjala> Or maybe its a different word?
[17:29:51] <haarg> https://pause.perl.org/pause/query?ACTION=pause_namingmodules#Local
[17:29:51] <genio> oh, get this. to update a user, you send to    /users/{id}   and then your payload must include the Id as well and that Id must match the one passed in the URI. why?
[17:29:52] <Paperbot_> Link title(s): [ PAUSE: The CPAN back stage entrance ]
[17:29:57] <karjala> Thanks!
[17:30:10] <haarg> note that it's "By convention"
[17:30:14] <mst> genio: LOL
[17:30:19] <haarg> there's nothing that enforces it
[17:30:55] <zgu> genio: multi factor security
[17:31:10] * genio palms all the faces
[17:31:31] *** Quits: tobybl (~tobybl@189.192.115.87.dyn.plus.net) (Ping timeout: 252 seconds)
[17:32:10] <mst> zgu: multi fucktor security
[17:33:00] <genio> ooooh. to create a user, you have to pass the Id field in. You'll get an error if you don't. BUT it's ignored on the call.   who the actual fuck designed this?
[17:34:27] <huf> lol designed
[17:34:31] <mst> genio: "this code was definitely generated by a tool"
[17:34:35] <huf> are you drunk?
[17:35:05] <zgu> yeah, what a tool
[17:35:36] <huf> if mindless idiocy is good enough for evolution...
[17:35:56] <genio> haha
[17:36:22] * GumbyPAN CPAN Upload: Text-ANSI-Fold-Util-0.06 by UTASHIRO https://metacpan.org/release/UTASHIRO/Text-ANSI-Fold-Util-0.06
[17:41:28] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[17:41:28] *** diskin_ is now known as diskin
[17:45:31] *** Joins: keir (~keir@user/keir)
[17:47:49] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[17:48:24] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:48:25] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:51:27] <bugweiser> mst, regarding the encode and decode you stressed. There is 'magic' in between. We get a blob and decode it as being in some meaning/charset TO 'magic'. We work on magic, and send magic to encode (specifiying what output charset/encoding we want). If I understood LeoNerd correctly, 'magic' here is a sequence of integers. And the encode / decode handlers translate the incoming/outgoing assuming 'magic' (the sequence of integers) mean "unicode code 
[17:51:27] <bugweiser> points".  Correct?
[17:51:38] <mst> bugweiser: there is NOT magic
[17:51:56] <Getty> mst: i am not silly ansi
[17:51:56] <mst> there is exactly what I said.
[17:52:01] <bugweiser> well, the 'perl string' we are not supposed to understand (hence 'magic')
[17:52:06] <Getty> :D
[17:52:20] <mst> decode() returns a string made up of code points. encode() accepts a string made up of code points. as the sentences I told you to read told you.
[17:52:25] <mst> which is exactly what LeoNerd also said.
[17:52:37] <bugweiser> *what codepoints* ??
[17:52:48] <bugweiser> *what do the numbers mean*
[17:53:00] <bugweiser> "unicode codepoints" ?
[17:53:07] <mst> yes. as we keep telling you.
[17:53:52] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 244 seconds)
[17:54:13] <bugweiser> but, it is the encode and decode handlers that assume the 'middle layer'/'magic'_perl_strings represent unicode codepoints? Correct?
[17:54:28] <mst> what?
[17:54:56] <mst> what middle layer?
[17:55:17] <bugweiser> the 'perl string' aka 'sequence of integers'
[17:55:47] <Grinnz> every string function makes an assumption about what the integers in the string you pass mean
[17:55:57] <Grinnz> encode assumes they represent unicode characters
[17:56:02] <Grinnz> decode assumes they represent bytes
[17:56:04] <mst> decode() returns a string made up of code points. encode() accepts a string made up of code points.
[17:56:20] <mst> this is just, like, basic "what those subroutines do"
[17:56:21] <mst> no magic.
[17:56:25] <haj> “It's still magic even if you know how it's done.”  -- Terry Pratchett, A Hat Full of Sky.  
[17:56:36] <bugweiser> lol
[17:56:39] <mst> haj: NOT HELPING :P
[17:56:57] <bugweiser> Grinnz, so i'm correct so far?
[17:57:10] <Grinnz> i don't think so
[17:57:17] <Grinnz> they don't mean unicode codepoints when they're interpreted as bytes
[17:57:22] <mst> bugweiser: no, you're still ignoring me and making shit up
[17:57:35] <mst> any description that involves the word 'magic' is wrong.
[17:57:50] <huf> "there is nothing magic about encode/decode"
[17:57:52] <bugweiser> mst, I'm really not ignoring you, i desperately try to understand you!
[17:57:52] <huf> ^ wrong
[17:58:27] <mst> bugweiser: and yet every time I tell you how things work, you add more stuff that doesn't exist and then ask me about the stuff that doesn't exist
[17:58:28] <bugweiser> mst, you continue to say 'code points', without defining what they mean.
[17:58:48] <Grinnz> a string contains abstract codepoints, not necessarily unicode codepoints
[17:58:56] <Grinnz> literally just a number which maps to something (as yet undefined)
[17:58:59] <buZz> bugweiser: https://en.wikipedia.org/wiki/Code_point
[17:59:00] <Paperbot_> Link title(s): [ Code point - Wikipedia ]
[17:59:08] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[17:59:35] <bugweiser> code point is the relation to a description of a character to an integer inside a character set.
[17:59:45] <haj> budweiser: the array of integers is interpreted as "array of code points" by encode, but there's no middle layer nor magic
[17:59:49] <Grinnz> yes, but there is no character set inherent in it
[18:00:06] <bugweiser> the 'code point' for Euro symbol in CP1252 =0x80. In unicode it's a waaay bigger value.
[18:00:10] <Grinnz> whatever you use the string in will determine what the interpretation is
[18:00:42] <mst> bugweiser: decode() returns logic unicode codepoints. CP1252 is irrelevant, as are all encodings. those are the *output* of encode(). we're talking about the input.
[18:01:35] <mst> bugweiser: and \N{...} lets you generate logical unicode values to interpolate into strings
[18:03:09] <bugweiser> mst, ok. So, decode() (supplying a blob and saying it is encoded as CP1252) returns a sequence of integer-values (the internal 'perl string') where the integer values correspond to the codepoints as used in the unicode repertoire?
[18:03:14] <mst> you never need to think about perl's internal representation of those codepoints.
[18:03:51] <Grinnz> it returns a sequence of integer values, which may be stored in different ways which don't matter to your perl code
[18:04:12] <haj> bugweiser:  "the 'code point' for Euro symbol in CP1252 =0x80." that's misleading terminology.  CP1252 _encodes_ the euro symbol as 0x80.
[18:04:28] <mst> Encode understands that format, \N{...} understands that format. you don't need to care about that format.
[18:04:29] <Botje> bugweiser: 0x80 is the cp1252 encoding of the unicode code point U+20AC. The corresponding utf8 encoding is e282ac
[18:04:50] <mst> right, bugweiser confusing code points and encodings isn't helping here
[18:05:45] <bugweiser> I don't use the terminology 'code point' exclusively for unicode code points.
[18:06:07] <Botje> yeah, that's confusing. stop that.
[18:06:23] <Grinnz> i've started using the term 'ordinals' for the abstract integers in a perl string
[18:06:26] <buZz> its not exclusive to unicode, indeed
[18:06:30] <Grinnz> because codepoint is unicode-charged
[18:06:33] <haj> “When I use a word,’ Humpty Dumpty said in rather a  scornful tone, ‘it means just what I choose it to mean — neither more  nor less.’ - just to annoy mst :)
[18:06:40] <bugweiser> buZz, thanks!
[18:06:51] <buZz> ^ also see the wikipedia link i posted ;)
[18:08:01] <mst> bugweiser: well, =0x80 in CP1252 is NOT a code point.
[18:09:16] <bugweiser> yes it is, depending on terminology! as buZz confirmed, code point is not exclusive to unicode.
[18:09:30] <haj> In Perl, "code points" refer to the stuff published by the Unicode Consortium.  The release notes always state which version of Unicode Perl knows about.
[18:09:32] <bugweiser> it's the number we assign in a character repertoire to a certain 'character'.
[18:09:53] <Botje> bugweiser: encodings such as cp1252 result in bytes, not code points.
[18:10:08] <Botje> this is central to the encoding mantra we've repeated to you several times now.
[18:10:23] <haj> bugweiser: So if you want to define your own assignment, that's not Perl.
[18:10:27] <Grinnz> the byte ordinals in character encodings are codepoints. just not unicode code points. please stop that argument
[18:11:07] <mst> bugweiser: if you want to invent your own terms, feel free, but in here, please try and use the terms that mean things to everybody else.
[18:11:14] <Grinnz> mst: you too
[18:11:25] * GumbyPAN CPAN Upload: App-week-1.0202 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-week-1.0202
[18:11:39] <mst> Grinnz: oh, yes, I manage to be an idiot about things regularly
[18:12:05] <bugweiser> I can not now (being new to perl) that in perl 'code point' excusively means "unicode code point"...
[18:12:19] <Grinnz> it doesn't really
[18:12:44] <mst> but the bytes in encoded data still aren't code points
[18:13:00] <Grinnz> their ordinals are
[18:13:22] <Grinnz> this is a meaningless confusion
[18:14:43] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Remote host closed the connection)
[18:14:56] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[18:15:02] <bugweiser> mst, you are correct! I confused "code unit" with "code point" 
[18:15:09] <huf> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :D
[18:15:16] <huf> another contender has entered the fight
[18:15:21] <mst> bugweiser: encodings hate us all :D
[18:15:30] <huf> so anyway, wanna see my unit? :D
[18:15:39] <mst> absolutely!
[18:16:18] <Grinnz> er, code unit is a whole different thing
[18:16:36] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[18:16:53] <Grinnz> a code unit is specific to unicode and it's the bytes that encode a character in a particular encoding
[18:16:53] <bugweiser> but then... perls internal string (created by decode) contains code units, not code points, no?
[18:16:54] * mst backs away slowly from the terminology questions
[18:17:03] <Grinnz> no
[18:17:19] <Grinnz> perl's internal string contains bytes which may or may not be relevant
[18:17:25] <Grinnz> and are not relevant to your code
[18:17:29] *** Joins: gggp (~gggp@111-251-157-238.dynamic-ip.hinet.net)
[18:17:40] <huf> well duh, they're things in memory, they always contain bytes
[18:17:48] <huf> it's their interpretation that matters, but yeah, what Grinnz said.
[18:17:58] <huf> you should aggressively not care about it
[18:17:59] <mst> Grinnz: so "CP-1252 uses =0x80 as the code unit encoding the U+20AC code point" is right?
[18:18:09] <Grinnz> no
[18:18:21] <mst> Grinnz: how so?
[18:18:28] <buZz> code -unit- ?
[18:18:35] <bugweiser> (and I was wrong, i was indeed talking about code points, not units after all).
[18:18:37] <Grinnz> i mean i guess it could be, but code unit refers to unicode encodings
[18:18:44] <Grinnz> UTF-8, UCS-2, etc
[18:18:54] <mst> ohhh, right, fair enough
[18:18:59] <bugweiser> agree Grinnz
[18:19:47] <bugweiser> the perl docs state (regarding caring about it):
[18:19:49] <bugweiser> but it becomes relevant when outputting Unicode strings to a stream without a PerlIO layer (one with the "default" encoding). In such a case, the raw bytes used internally (the native character set or UTF-8, as appropriate for each string) will be used, and a "Wide character" warning will be issued if those strings contain a character beyond 0x00FF.
[18:19:55] <Grinnz> perl's internal string has a downgraded form, in which the byte ordinals map exactly to the logical ordinals of the string; and an upgraded form, in which the byte ordinals are the UTF-8-ish encoding of the logical ordinals of the string
[18:20:07] <Grinnz> it's not exactly UTF-8, so they aren't necessarily code units even in that form
[18:20:29] <bugweiser> yes, I read about the distinction in perl between utf8 and utf-8
[18:20:34] <Grinnz> neither form implies anything about what those ordinals represent
[18:21:02] <Grinnz> yes, if you get a wide character warning, it indicates you've attempted something impossible (printed a wide character to a byte stream), and so perl dumped its internal buffer instead
[18:21:05] <bugweiser> and that utf8 (no hypen) is basically what i'd call wtf-8. In other words, it's a variable width integer encoding (when the UTF8 flag is active). Correct?
[18:21:19] <mst> bugweiser: if you output a string to a filehandle without encoding it first, your code is completely broken and the resulting behaviour should be treated as undefined
[18:21:29] <Botje> I really can't fathom the mindset of someone who gets into discussions like this on day 2 of learning a langage... wouldn't you rather study for loops and regexes :(
[18:21:29] <mst> bugweiser: the wide character warning means 'this code needs to be rewritten'
[18:21:43] <mst> bugweiser: so, no, it does -not- 'become relevant'
[18:21:46] <Grinnz> Botje: we all have our kinks
[18:21:56] *** Joins: _73 (~user@pool-96-252-123-136.bstnma.fios.verizon.net)
[18:22:11] <Botje> HELLO HASHTASH VB DOT NET TELL ME ALL ABOUT YOUR STRING TYPE
[18:22:34] <Grinnz> bugweiser: in that case it is a bug in your code. there are some other cases (filenames for example) where it's relevant because of a bug in perl
[18:22:41] <Grinnz> or broken XS code
[18:22:51] <mst> bugweiser: if you don't either have an encoding defined on the filehandle, or call encode() yourself, your code is simply broken and the output is irrelevant
[18:22:54] <Grinnz> but in normal string operations and correct use of handles, it's not relevant
[18:22:57] <bugweiser> Botje, if you are already a programmer (and understand charsets/encodings, otherwise how would one come up with these questions, lol) then that's kinda the first thing I look at: what are strings, how do they work (what is it that I pass to something, what am I getting in return) and how regexes work in relation to that.
[18:23:18] <mst> bugweiser: well, you clearly don't understand them or we'd've been done hours ago
[18:23:35] *** Quits: horsepatat (~horsepata@80.89.78.58) (Read error: Connection reset by peer)
[18:23:41] <Grinnz> i mean, he understands them more than a lot of people trying to discuss them
[18:23:54] <bugweiser> nope, I don't understand how i apply my understanding in perl.
[18:24:14] <mst> I'm not convinced *I* understand them, I just know not to go groveling in the perl internals and not to try and figure out undefined behaviour
[18:24:48] <mst> bugweiser: you keep trying to figure out internal-only C-level representations of things that you're supposed to interact with through the defined APIs
[18:24:53] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:61e9:b352:c0b7:8092)
[18:25:24] <mst> bugweiser: so if you do understand, then you've still completely missed the point of unicode, which is to let you *not* do that and just use the bloody API
[18:25:45] <bugweiser> I just quoted part of the docs that say when I actually should care to understand internal strings :)
[18:26:33] <haj> Maybe it's a good idea to remove that stuff from perluniintro
[18:26:33] <mst> bugweiser: no
[18:26:42] <bugweiser> the docs say:
[18:26:44] <bugweiser> Internally, Perl currently uses either whatever the native eight-bit character set of the platform
[18:26:49] <bugweiser> and:
[18:26:56] <bugweiser> Specifically, if all code points in the string are 0xFF or less, Perl uses the native eight-bit character set. Otherwise, it uses UTF-8.
[18:27:05] <mst> bugweiser: yes. you read that bit earlier. and I agreed that that describes the current implementation details.
[18:27:14] <mst> bugweiser: then I said you shouldn't care about that
[18:27:30] <mst> bugweiser: what remaining question do you have? because we've been over this like five times now and you're still asking the same questions
[18:27:44] <bugweiser> Hence i ask, what if i'm on a native 8bit character set called CP1252 and do 'chr(0x80)' ...
[18:27:56] <mst> oh, fuck this
[18:27:59] <bugweiser> and then pass that perlstring to an encode handler
[18:28:01] <Grinnz> you get an abstract ordianl which doesn't mean anything until you use it in something
[18:28:05] * mst stops letting bugweiser waste his time
[18:28:16] <Botje> mst++ I'm going to do the same.
[18:28:17] <Grinnz> the native charset doesn't matter
[18:28:25] <Botje> Despite getting repeatedly nerdsniped.
[18:28:33] <Botje> At least on stackoverflow I get internet points
[18:28:51] <mst> bugweiser: when you have an actual perl question, please ask that. otherwise, you're just asking "if I do this weird thing that I should not do, what happens?"
[18:28:51] <vague> botje++
[18:28:54] <vague> botje++
[18:28:59] <vague> botje++
[18:29:02] <vague> There :)
[18:29:06] <mst> bugweiser: you can read the fucking C code if you care that much, but I'm sick of you taking advantage of people trying to help you
[18:29:09] <mst> bugweiser: so. enough.
[18:30:20] <bugweiser> I'm terribly sorry to have ticked you off. In no way do I intend to waste anyones time. I did ask repeatedly for some good tutorials, that guarantee an uttery strict handling of strings and regexes.
[18:31:32] <vague> bugweiser, there probably isn't anything to the level you expect it to cover
[18:31:58] <bugweiser> The docs to me are wildly confusing and list exceptions upon exceptions upon exceptions, and I can barely keep track of when regex classes or string literals mean exactly *what*. Especially with the docs tossing in 'local platform charset'..
[18:32:20] <Grinnz> yes, many docs and people are confused about how exactly the "native charset" matters
[18:32:23] <Grinnz> it usually doesn't
[18:32:29] <Botje> Great. submit patches!
[18:32:43] <choroba> also, the best thing how to learn things it to try them yourself
[18:33:05] <choroba> write a short script, run it, change locale, run it again.
[18:33:12] *** Quits: jplesnik (~jplesnik@83.240.60.31) (Quit: Leaving)
[18:33:27] <choroba> don't fear to experiment
[18:33:53] <Grinnz> one thing that does matter is whether the local platform is ASCII or EBCDIC
[18:34:06] <bugweiser> yes
[18:34:50] <Grinnz> luckily almost nobody has to care about that
[18:35:01] <Botje> ah yes, EBCDIC. That universally-used technology.
[18:35:13] <buZz> :)
[18:35:22] <Grinnz> and you can autoamtically be portable to EBCDIC by always using \N{U+XX} to form text strings
[18:35:25] <Grinnz> rather than \x
[18:35:34] <Botje> Along with 36-bit words and middle-endian architectures.
[18:35:40] <Botje> and unicorns.
[18:35:40] <bugweiser> lol. Still, can't blame someone for wanting to understand it (how it works in perl). With the docs tossing it in all the time..
[18:37:32] <bugweiser> https://perldoc.perl.org/functions/chr  says:
[18:37:32] <Paperbot_> Link title(s): [ chr - Perldoc Browser ]
[18:37:40] <bugweiser> Note that characters from 128 to 255 (inclusive) are by default internally not encoded as UTF-8 for backward compatibility reasons.
[18:37:57] <Grinnz> yeah, that's internals details which really have no place there
[18:38:11] <Grinnz> also never use the bytes pragma that it mentions
[18:38:30] <Botje> use code'units; instead! (don't)
[18:38:58] <bugweiser> why? no bytes? (I can get why no code units)
[18:39:22] <Grinnz> the bytes pragma exposes the internal abstraction to perl code and thus is broken by design
[18:39:24] <bugweiser> choroba, i've been experimenting already with botje's excelent help yesterday!
[18:40:24] <pragma-> how else do you measure a unicode string in bytes for a byte-oriented protocol?
[18:40:32] <Grinnz> pragma-: by encoding it to bytes
[18:40:43] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e)
[18:40:44] <Botje> tape measure and some string. (pun intended)
[18:40:49] <bugweiser> Grinnz, wouldn't decode() return a 'perl string' holding 'unicode code points' (encoded as utf8 (no hyphen)), and thus be equivalent to UTF-8 (assuming the decode() handler operated correctly)?
[18:41:04] <Grinnz> no
[18:41:22] <Grinnz> decode returns a perl string holding unicode code points, which may be internally encoded in either of two methods
[18:41:32] <Botje> that's it, we're moving to UTF-16 in perl 5.40.
[18:41:49] <choroba> and back to UTF-8 in 5.42
[18:41:56] <bugweiser> Botje, Fine with me!
[18:42:17] <Grinnz> sadly it would break way too much XS code and also be really slow
[18:42:33] *** Joins: magla (~gelignite@55d44ca3.access.ecotel.net)
[18:42:33] <bugweiser> Grinnz, deal, there ist the flagged variable width integer sequence (UTF8) internal, and the non flag fixed width internal.
[18:42:45] <Grinnz> correct
[18:42:55] <Grinnz> neither of which matter to your perl code
[18:43:19] <Grinnz> and which perl will switch between as needed
[18:43:49] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[18:46:19] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 252 seconds)
[18:46:44] <mst> choroba: LeoNerd and I started trying to explain this four hours ago. bugweiser won't experiment, he just asks the same questions again in slightly different words every time we tell him the answers. hence why I'm now avoiding this conversation before I get -really- annoyed.
[18:49:11] <Grinnz> i will bbiab, don't self destruct while i'm gone
[18:49:16] <buZz> aw plz
[18:49:40] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 240 seconds)
[18:50:39] *** Quits: johnjay (~pi@192.142.100.34) (Read error: Connection reset by peer)
[18:51:46] *** Joins: johnjay (~pi@192.142.100.34)
[18:52:31] <bugweiser> mst, again I'm sorry I ticked you off. I could not know that 'code points' specifically means 'unicode code points' to you (or in perl terminology).
[18:53:13] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[18:53:30] <bugweiser> I did ask to clarify your use of 'code points' a number of times. I rephrased that question as I didn't seem to get an clear answer and I thought it was my fault in phrasing that question (for clarification).
[18:53:46] <mst> bugweiser: LeoNerd told you it was unicode code points three and a half hours ago.
[18:54:48] <mst> the entire conversation where I used 'code points' was in context of that, because I assumed you'd actually bothered to read what we were saying
[18:55:26] <bugweiser> I do bother to read what you are kindly helping me with!
[18:55:34] <mst> 11:54 < LeoNerd> An encoding function takes in a Unicode text string, and outputs a byte string. So yes, that function will presume a string coming in contains Unicode codepoints
[18:55:42] <mst> 11:55 < bugweiser> ok, clear
[18:55:51] <mst> so I proceeded on the assumption that it was, indeed, clear
[18:56:03] <mst> and that therefore you already *did* know what we meant unicode code points
[18:56:11] <mst> because we'd told you that, and you'd said that was clear
[18:56:24] <bugweiser> your later comments lead me to believe I was still not understanding it correctly.
[18:56:40] <mst> ...
[18:56:40] * mst sighs
[18:56:56] <bugweiser> anyway, I really *am* sorry to have ticked you off!
[18:57:10] * buZz puts a kettle on the table and pours some cups
[18:57:13] <mst> you made no indication whatsoever that you had decided to discard what leonerd said, and I said repeated that what I said *agreed* with what he said
[18:57:28] <buZz> hugs for everyone
[18:57:32] <mst> the fact that you'd done that without saying so does explain why your questions made no sense at all though :P
[18:58:27] *** Quits: Su-Shee (~Susanne@p4ffc7689.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[18:59:11] <mst> anyway, because of the weird backcompat "if it's all single byte size stuff, uses the local encoding" thing you still can't rely on the internal representation for much of anything
[18:59:16] <bugweiser> well, on the other hand, If I felt that you were hinting at a slightly different understanding, then it also wouldnt have been 'fair' to disregard that input due to previous understanding of LeoNerd.
[18:59:44] <mst> I did repeatedly say that what I was saying *agreed* with what leonerd had said
[19:00:13] <mst> so if you thought I was wrong about that, it would have helped if you'd actually said that you thought we disagreed and how
[19:00:28] *** Joins: Su-Shee (~Susanne@p4ff49458.dip0.t-ipconnect.de)
[19:01:11] <bugweiser> I attempted that, but I see I failed :) Please accept my apologies.
[19:01:15] <mst> honestly, if we *do* disagree, when it comes to encoding, he's almost certainly the one who's right - the only advantage I have is that it took me an hour or two longer than him to get sick of repeating myself and give up
[19:04:32] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e) (Ping timeout: 252 seconds)
[19:04:41] <mst> I'd also note
[19:04:42] <mst> < Grinnz> yeah, that's internals details which really have no place there
[19:05:17] <mst> bugweiser: so *everybody* has told you to stop obsessing over non-user-serviceable internals ... it would be nice if you actually did so :P
[19:05:54] <mst> also yes the docs talk about those bloody internals far too much, it's just we all keep getting distracted improving the VM and don't get around to auditing the docs
[19:06:08] <mst> maybe I should spend a weekend drunk going on a deletion spree at some point
[19:06:59] <bugweiser> well, that's not the only place where the docs warn about characters below 256..  Can you point me to an explenation why that's not true and needs to be deleted in a multiple of docs?
[19:07:07] <mst> eh?
[19:07:14] <mst> I didn't say it wasn't true
[19:07:31] <mst> I said thinking about it was an error because if you ever notice your code is already fucked and needs rewriting
[19:07:55] <mst> (note LeoNerd is actually one of the three members of the Perl Steering Committe responsible for the language design, Grinnz is on the perl core team, and I've carefully avoided having any official position because I do a lot of gunboat diplomacy and it's easier to not be part of any 'official' body that my yelling at people might reflect on ;)
[19:08:44] <mst> the reason I want to delete it is so people like you stop obsessing over non-user-serviceable implementation details that have zero relevance to actually learning perl
[19:08:55] <mst> we can keep it in a perluniguts doc or something for people writing C code
[19:10:18] <bugweiser> I'd like to (again) stress that i don't ask with the intention of meddling with the internals! Though (as the docs *also* say) it can be helpful to *understand* it. 
[19:11:08] <mst> they're clearly wrong though. you found the relevant bit of the docs hours ago and didn't stop asking questions
[19:11:14] <Grinnz> bugweiser: if you want to ask about specific docs mentions go ahead - there's no overarching consistency to how the docs present it, as you've found
[19:11:20] <mst> so it hasn't helped you or us :P
[19:11:33] <bugweiser> agree!
[19:11:53] <Grinnz> bugweiser: there are instances where characters below 256 are different for reasons unrelated to the internal representation, so this isn't just a single problem
[19:12:08] <mst> the only time any of it matters is if your code, buggily, tries to print perl internal string representation byte for byte direct to a filehandle without encoding them
[19:12:19] <mst> i mean the internal representation
[19:12:26] <mst> and in that case the answer is "that's a bug, fix the bug"
[19:13:00] <mst> fundamentally it's a good rule of thumb to assume that if you can even *tell* what the internal string representation is for a decoded string, your code is doing something malformed
[19:13:27] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[19:13:29] <mst> if you're curious about it for the sake of bloody mindedness, make yourself from strings and Devel::Peek them
[19:13:36] <mst> but it's not at all relevant to actually learning to use perl
[19:13:44] <bugweiser> Grinnz, it appears i grasp 'utf8' internal encoding. I don't yet grasp the 'switch' to the fixed width byte sized encoding in correlation to local charsets. And how/when it switches.
[19:13:54] <Grinnz> and certain things are known to be malformed: open, system, stat, similar syscalls, DBD::mysql
[19:14:15] <Grinnz> bugweiser: right so that doesn't matter, perl can do it whenever it wants for any reason
[19:14:16] <mst> right, eventually you have to care about stupid shit *anyway*\
[19:14:19] <mst> c'est la vie
[19:14:38] <Grinnz> bugweiser: and it's not correlated to local charsets.
[19:14:55] <Grinnz> bugweiser: it's correlated byte-to-ordinal, no charset involved in that decision
[19:14:59] <mst> bugweiser: implementation defined, may depend on atmospheric pressure and/or the phase of the moon, if your code even notices you're in Undefined Behaviour land
[19:14:59] *** Quits: Aniar (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net) (Ping timeout: 244 seconds)
[19:15:22] <holyghost> bugweiser, read a book about it, I'm not saying it's in perltuts or O'Reilly books but you will grasp it better
[19:15:25] <Grinnz> bugweiser: the local charset only matters if you then use that string in a context that interprets it as the bytes of the local charset
[19:16:33] <Grinnz> bugweiser: which honestly doesn't even happen much anymore now that most locales are utf-8
[19:17:05] <buZz> dont most of the citizens of the world live in regions that use utf-16 ?
[19:17:05] *** Joins: Aniar (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net)
[19:17:30] <Grinnz> erm, use of utf-16 is generally based on the system not the region
[19:17:43] <mst> bugweiser: microsoftistan does  a lot of utf-16
[19:18:05] <mst> buZz: the *n?x federation is basically all utf-8
[19:18:21] <mst> bugweiser: sorry, tab failure on my part, both of those lines were meant for buZz 
[19:18:24] <buZz> np
[19:18:54] <bugweiser> Grinnz. so if I understand that correctly, then encode() will *conceptually* translate a non UTF8 flagged (utf8 encoded perl string) (so bytes) as local charset to unicode code points and from these unicode points to the requested output charset/encoding?
[19:19:08] <bugweiser> mst, np
[19:19:13] <mst> the flag may or may not mean anything
[19:19:20] <mst> it is irrelevant to any conceptual model
[19:19:22] <Grinnz> bugweiser: whether it's flagged isn't relevant to the concept of encode
[19:19:51] <mst> in fact, generally, any code where you might have to care about the internals ... probably sets the flag to the wrong value as well
[19:19:52] <Grinnz> bugweiser: it conceptually translates unicode codepoints to the bytes representing it in the requested encoding, that's it
[19:20:12] <Grinnz> local charset is not involved
[19:20:19] <mst> < mst> encode() expects a string in the form of codepoints and returns an encoded set of bytes
[19:20:26] <mst> < mst> decode() expects en encoded set of bytes and returns a string of codepoints
[19:20:36] <mst> (from 3 hours 25 minutes ago)
[19:20:49] <mst> (the first time i said it, I tihnk this is four ;)
[19:21:02] <Grinnz> bugweiser: i think the problem is still over-dependence on this local charset notion - perl strings don't care about it, they are only abstract ordinals, and everything operates based on that
[19:21:32] * GumbyPAN CPAN Upload: Function-Return-0.13 by KFLY https://metacpan.org/release/KFLY/Function-Return-0.13
[19:21:36] *** Joins: Adoi (~Adoi@user/adoi)
[19:21:45] <mst> right, and if you want locale dependence, you have to use p3rl.org/locale to explicitly opt into it on a lexical basis
[19:22:20] *** Joins: vs^ (~vs@wsip-98-188-244-188.mc.at.cox.net)
[19:22:34] <Grinnz> bugweiser: put another way, a downgraded string is where the byte ordinals exactly match the string's logical ordinals
[19:23:16] <Grinnz> bugweiser: when you pass that to encode, those logical ordinals are interpreted as unicode codepoints
[19:23:30] <Grinnz> bugweiser: so there's no charset translation there
[19:24:14] * bugweiser processing
[19:24:58] <Grinnz> and upgraded string just has a different mapping of byte ordinals to logical ordinals in that process
[19:25:40] *** Quits: Aniar (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net) (Ping timeout: 240 seconds)
[19:26:30] <bugweiser> 'upgraded string' in perl means that we have the UTF8 flag and are using the variable width encoding internally, 'non upgraded' string is then 'local encoding' (if local encoding is a bytesized charset) ?
[19:26:57] <Grinnz> downgraded string is a byte-to-ordinal match, it is not a charset
[19:27:43] <Grinnz> if your downgraded string consists of "\N{U+FF}" then the internal storage will be a \xFF byte
[19:27:53] <Grinnz> that's it, nothing else to it
[19:27:58] *** Joins: Aniar (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net)
[19:28:42] <bugweiser> I feel I almost understand this last part..
[19:30:37] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[19:30:43] <LeoNerd> I'm struggling to understand what it is you don't understand here. We keep telling you there isn't much information here, and you keep imagining... inventing,... more information than is present
[19:31:05] <LeoNerd> It's like we're writing numbers on a piece of paper with a pencil, and you keep asking what colour those numbers are... as if that matters
[19:31:15] <Grinnz> remember the input to programs is all bytes - so perl gets byte strings which are already abstract ordinals, and doesn't care what those bytes represented
[19:31:19] <LeoNerd> They are numbers. They aren't written in an colour. So asking what colour the numbers are written in isn't a question that makes sense
[19:31:55] <Grinnz> if you write the string 'a' in a program, perl gets that as an ASCII byte, which it puts in a string
[19:32:20] <Grinnz> it doesn't use any charset to interpret that
[19:33:31] <Grinnz> things get a little more complex with "use utf8", but not by much - with that active, if you write a unicode character in a string, perl gets that as the UTF-8 code unit for that character, and puts it in an upgraded string
[19:33:37] <mst> LeoNerd: he's a student IIRC, he's learned enough to have been issued with his junior developer's cursed gauntlets of overthinking/overcomplication +2, but hasn't yet leveled up to be able to cast the relevant dispel magic
[19:34:00] <bugweiser> so if I do: $str="\N{EURO SIGN}"; on a CP1252 platform, then $str will not be an UTF8 flagged string (internally) becouse the locale could encode that as 0x80 which is below 256. Then when we ship that perl string to decode() it detects that it received an non-upgraded string and figures out that locally that 0x80 meant Euro sign ?
[19:34:12] <Grinnz> the platform doesn't matter
[19:34:13] <bugweiser> i'm using 'use utf8' right now.
[19:34:23] <LeoNerd> use utf8  tells perl what encoding your .pm file is in
[19:34:30] <LeoNerd> That source code -itself- was all in ASCII, so it didn't matter
[19:34:39] <mst> right, 'use utf8' is absolutely nothing to do with anything we've been discussing
[19:34:40] <LeoNerd> Conveniently, ASCII and UTF-8 agree where they overlap
[19:34:49] <Grinnz> if you do $str = "\N{EURO SIGN}" then that's a string with a single ordinal (U+20AC)
[19:35:02] <Grinnz> perl can only store that in an upgraded string
[19:35:06] <LeoNerd> Forwardslash, capital N, openbrace, capital E, capital U, capital R, ... these are all plain ASCII
[19:35:30] <bugweiser> Grinzz, the docs say: Specifically, if all code points in the string are 0xFF or less, Perl uses the native eight-bit character set.
[19:35:32] <mst> 'use utf8' tells the perl *compiler* what encoding your *code* is in
[19:35:37] <Grinnz> bugweiser: which docs?
[19:35:43] <LeoNerd> bugweiser: Hah. I think that's wishful thinking
[19:35:44] <bugweiser> https://perldoc.perl.org/perluniintro
[19:35:45] <Paperbot_> Link title(s): [ perluniintro - Perl Unicode introduction - Perldoc Browser ]
[19:35:53] <bugweiser> Perl's Unicode Model
[19:35:57] <Grinnz> bugweiser: yeah so there's a combination of problems with that wording
[19:35:59] <bugweiser> I'm not making these questions up :)
[19:35:59] <LeoNerd> I wouldn't trust that sentence. It's not at all accurate
[19:36:13] <mst> LeoNerd: then we need to poke Juerd with a stick
[19:36:22] <LeoNerd> It's easily possible to end up with strings that have the wide flag on despite only containing codepoints <= 0xFF
[19:36:40] <Grinnz> bugweiser: first: perl can use upgraded strings whenever it wants, even on ascii strings (it just doesn't make any difference in that case)
[19:37:02] <LeoNerd> The only thing really you can infer is that any string without the wide flag must necessarily contain only codepoints <= 0xFF, because it would literally not be possible for it to store anything else
[19:37:06] <Grinnz> bugweiser: second: downgraded strings aren't a native charset, they are just where the bytes match the string's ordinals
[19:38:00] <mst> bugweiser: note: if anything LeoNerd or Grinnz says appears to have disagreed with anything I said, it almost certainly means either I used the wrong words or I got something wrong - just assume they're right :D
[19:38:04] <Grinnz> bugweiser: it would be more correct to word it as: "If all code points in the string are 0xFF or less, Perl *can* use single-byte storage"
[19:38:18] *** Joins: thrig (~thrig@65.113.153.50)
[19:38:18] <mst> Grinnz: and decode() may -usually- do that
[19:38:27] <mst> but, still, No User Serviceable Parts Inside
[19:38:57] <LeoNerd> Yah.. often functions will do that if they notice they can, but it isn't guaranteed. In fact I think just today there's a perl core bug about the RE engine not picking a narrow codepath when it could, in some odd case
[19:39:03] <LeoNerd> So a small performance hack there
[19:39:22] <Grinnz> bugweiser: people often misinterpret single byte storage as "native charset" because the first 256 unicode characters map exactly to ISO-8859-1
[19:39:34] <LeoNerd> Still, aside from peeking at internals at the C layer, or really obscure benchmarking situations, these things aren't perl-level visible
[19:39:41] <bugweiser> Grinnz, I think I get it: that means that fixed width (byte sized) perl string is in ISO 8859-1  (at least from the point of the encode/decode) ?
[19:39:53] <Grinnz> bugweiser: but using a character that's in cp1252 and not ISO-8859-1 liek your example shows that's not the case
[19:40:10] <Grinnz> bugweiser: only because ISO-8859-1 is a subset of unicode.
[19:40:25] *** Joins: Maaaanu (~manuel@ip5b41c17b.dynamic.kabel-deutschland.de)
[19:40:32] *** Joins: txtsd (~txtsd@user/txtsd)
[19:41:10] <Grinnz> bugweiser: but remember, the string isn't *in* anything - it's encode or decode or another string function that determines how to interpret it
[19:41:14] *** Joins: jrmu (jrmu@jrmu.lemon.ircnow.org)
[19:41:19] <jrmu> I'm trying to take a command line utility and write an irc bot for it. However, there are times when it waits for user input (it is interactive but not an ncurses app); is there a way for me to use perl to wrap around this program and supply it with input?
[19:41:36] <LeoNerd> hoboy
[19:41:57] <thrig> i EXPECT there are various ways to do that
[19:42:06] <Grinnz> jrmu: that's a lot of layers to that question - but sounds like a job for expect
[19:43:05] <jrmu> perfect, I'll look up expect
[19:43:10] <jrmu> nice pun thrig :)
[19:43:25] <jrmu> the idea is to take monop from the bsd games and turn it into an irc bot :)
[19:43:27] <Grinnz> jrmu: alternatively you can use IO::Async::Process to run the process, which will integrate with Net::Async::IRC so that you don't have to block the irc bot to run your process
[19:43:31] <thrig> now you shouldn
[19:43:44] <thrig> 't have great EXPECTations and may run into DICKENS of problems
[19:44:08] <jrmu> thanks Grinnz , let me take a look
[19:44:38] *** Quits: holyghost (~holyghost@109.136.39.83) (Quit:  bbl)
[19:45:46] <Grinnz> jrmu: you'll have to set up the logic a little more manually, but basically you'd set up the stdin/stdout/stderr with https://metacpan.org/pod/IO::Async::Process#fdn-=%3E-HASH and the on_read callback will be fired when that handle sends data to you, and you can then send input back
[19:45:46] <Paperbot_> Link title(s): [ IO::Async::Process - start and manage a child process - metacpan.org ]
[19:49:50] *** Parts: art1 (~romeyke@p200300ccdf05e1002e06a3e1f28dd66b.dip0.t-ipconnect.de) ()
[19:52:36] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-205.prtc.net)
[19:52:42] *** Quits: gggp (~gggp@111-251-157-238.dynamic-ip.hinet.net) (Ping timeout: 244 seconds)
[19:53:53] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[19:54:24] <simcop2387> Lots of detail about the ol' nsa backdoored prng, https://news.ycombinator.com/item?id=28404219
[19:54:24] <Paperbot_> Link title(s): [ The NSA's Backdoor in Dual EC | Hacker News ]
[19:55:46] <Grinnz> bugweiser: maybe it will help to think of it this way: if you interpret a downgraded perl string as unicode codepoints, then the internal bytes are the ISO-8859-1 encoding of that; if you interpret an upgraded perl string as unicode codepoints, then the internal bytes are the UTF-8 encoding of that; but neither case means that's the only way to interpret that string
[19:56:06] <Grinnz> and also, neither of those are quite accurate because perl strings can contain things which aren't valid unicode
[19:56:27] <thrig> such as filenames from unix
[19:56:51] <Grinnz> not what i meant but yes :P
[19:58:18] <Grinnz> bugweiser: so it's only at the point of interpreting the ordinals in a certain way, that you can consider the internals to be in a certain encoding
[19:59:02] <bugweiser> Grinnz, regarding 'first': Good to know and I get that (it seems :) )
[20:00:16] *** Quits: tobybl_ (~tobybl@189.192.115.87.dyn.plus.net) (Remote host closed the connection)
[20:02:41] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:03:26] <Grinnz> bugweiser: here's an opposing example: say you have a byte string "\xE2\x82\xAC", and it's stored upgraded. that means the internal storage is 6 bytes. Perl can use those bytes combined with knowing it's upgraded to give you the 3 bytes that are actually in the string, but the internal storage on its own is not useful because you are interpreting the string as bytes, which don't have charsets
[20:03:37] <bugweiser> <Grinnz> bugweiser: it would be more correct to word it as: "If all code points in the string are 0xFF or less, Perl *can* use single-byte storage"   << the deciding factor then being when the ordinals (unicode code points) are the same as the extended ascii local character set in use?  So, even though CP1252 can encode Euro Sign (as 0x80) this 0x80 isn't the same as unicode's U+20AC code point. However for example 0xFF (Latin Small Letter Y with 
[20:03:37] <bugweiser> Diaeresis) have both the same byte and codepoint in unicode and cp1252, so on a cp1252 system it would be encoded internally as fixed width bytesized string ?
[20:03:39] <Grinnz> well not 6 bytes, but whatever length it will be
[20:03:56] <Grinnz> bugweiser: no.
[20:04:19] * bugweiser processing your comment I missed while typing
[20:04:19] <genio> open($fhctl, "<    ".$ctlfile);     WHY?!
[20:04:21] <Grinnz> bugweiser: it's not using a charset
[20:04:21] *** Joins: gggp_ (~gggp@111-251-157-238.dynamic-ip.hinet.net)
[20:04:31] <LeoNerd> I tend to switch off if people start talking about "extended ASCII" as it's often a sign they really have no idea what they're talking bout
[20:04:33] <LeoNerd> +a
[20:04:47] *** Joins: webstrand (~webstrand@user/webstrand)
[20:04:50] <thrig> which extended ascii?
[20:05:21] <bugweiser> LeoNerd, i used that phrase as an umbrella term. Binning such charsets/encodings together.
[20:05:24] <Grinnz> bugweiser: the storage of U+FF in a downgraded string is a 0xFF byte. this has nothing to do with charsets
[20:05:33] <LeoNerd> Indeed. It conflates so many problems and issues together
[20:05:42] <LeoNerd> It's similar to job postings that ask about "C/C++ experience"
[20:05:51] <LeoNerd> It's clear that the writer has no real knowledge of what they're writing about
[20:05:55] <huf> nah, that one's obvious
[20:05:57] <thrig> because e.g. Eastern Europe had all sorts of not-compatible things stuck into the hit bit area
[20:05:58] <huf> they mean borland c/c++
[20:06:04] <huf> that *is* a distinct language
[20:06:30] * LeoNerd also observes that the expression  c/c++  is UB in both the C and C++ languages
[20:06:36] * GumbyPAN CPAN Upload: Test2-Harness-1.000071 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-1.000071
[20:06:40] <Grinnz> bugweiser: and secondly, "it would be encoded internally as a fixed width bytesized string" is not true, only "it *may* be" is true
[20:07:08] *** Joins: ignarps (~iggy@user/ignarps)
[20:07:13] <bugweiser> where could I find more information about that?
[20:07:19] <Grinnz> perl can store U+FF downgraded or upgraded at its whim
[20:07:25] <thrig> float c=0.0;printf("%.f", c/c++);
[20:07:39] <Grinnz> bugweiser: about what exactly?
[20:07:42] <huf> floats? that's rather un-c-ish
[20:07:47] <huf> surely c is meant to be an int
[20:07:59] <thrig> division by float 0 is more fun
[20:08:03] <thrig> well, maybe 0
[20:08:07] <LeoNerd> thrig: it's UB... an expression involving `c++` can't additionally involve `c`
[20:08:45] <thrig> clang did yell at me a little
[20:08:52] <huf> if you simplify undefined, you get fined
[20:08:53] <LeoNerd> As it rightly should :)
[20:09:21] <ilmari> LeoNerd: is it UB, or merely unspecified?
[20:09:25] <Grinnz> bugweiser: the biggest thing is that "on a cp1252 system" doesn't affect how perl stores anything. the only thing that makes a difference to how perl stores U+FF is whether it's upgraded or downgraded, and whether the system is ASCII or EBCDIC
[20:09:43] *** Joins: Moonlight (~Moonlight@64.253.17.181)
[20:10:06] <Grinnz> bugweiser: *that* is why the native charset thing is a trap
[20:10:13] <bugweiser> Grinnz, when a 'perl string' uses fixed width encoding, and how for example an encode() then knows what the bytesized values it recieves mean.
[20:10:23] <LeoNerd> ilmari: Fairly sure it's proper UB,.. in that it's not even guaranteed to be either  do { (c/c; c++)[0] }  nor  do { (c/(c+1); c++)[0] }
[20:10:23] <thrig> a fully armed and operational native charset
[20:10:28] <Grinnz> encode makes an assumption. every string function has to
[20:10:29] <LeoNerd> It could be some other weird value
[20:10:47] <Grinnz> encode's assumption is that the values represent unicode codepoints. in a downgraded string, that means each byte represents a unicode codepoint with that ordinal
[20:12:00] *** Joins: jess (~jess@libera/staff/jess)
[20:12:51] <bugweiser> that line is utterly clear. But then, why isn't a downgrades string equivalent to ISO-8859-1 ?
[20:13:06] <bugweiser> the ordinals and codepoints for 0-255 are identical (by design).
[20:13:06] <Grinnz> it is, when you are interpreting it as unicode codepoints
[20:13:11] <Grinnz> and only then.
[20:13:24] <bugweiser> ahhhhh
[20:14:28] <bugweiser> so as it was clarified, it was the decode and encodes function to generally assume perl strings are unicode points. 
[20:14:39] <Grinnz> encode does. decode assumes its input is bytes
[20:15:01] <Grinnz> not the internal bytes, but logical byte ordinals
[20:15:14] <Grinnz> in a downgraded string those are the same, in an upgraded string they aren't
[20:15:43] <LeoNerd> I'm sure I said this about 3 hours ago
[20:16:00] <bugweiser> and it was our (programmers) job to keep track of what is what, and if I build a string in perl and ship it to an encode function it is my responsibility that the perl-string contains integers (either fixed width of variable width) wich both always (If I didn't f up) mean 'unicode code points'.
[20:16:06] <LeoNerd> encode()-like functions turn Unicode codepoint strings into byte strings, and decode()-like functions do the reverse - bytes into unicode
[20:16:16] <Grinnz> right.
[20:16:44] <Grinnz> but it's not your responsibility to care about whether it's upgraded or downgraded
[20:16:52] <Grinnz> unless dealing with bugs, that part is transparent to perl code
[20:17:13] <bugweiser> Grinnz (and others) thanks!! LeoNerd, at that point I hadn't trown in this 'misleading' phrases about native platform encoding which the docs cite for values below 256.
[20:17:19] <LeoNerd> Ideally it ought not to be *visible* to you, whether the string is wide or not. It was a bad idea to expose that in API, but we can't really get rid of it now
[20:17:30] <LeoNerd> Yes the docs are annoyingly misleading
[20:17:33] <LeoNerd> I keep telling you to ignore it
[20:17:37] <Grinnz> bugweiser: i think i'll have a pass at killing that phrase from the docs thanks to this conversation :P
[20:18:05] <ilmari> LeoNerd: you're right. I thought it was merely unspecified which value you got, but  Clause 6.5#2 of C99 says: "Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression. Furthermore, the prior value shall be accessed only to determine the value to be stored."
[20:18:09] <bugweiser> LeoNerd, well I agree. Here I am the case of someone actually reading the docs and this is the result.
[20:18:31] <LeoNerd> ilmari: Yah.. e.g it could be a multiword integer, and be in a temporarily inconsistent state
[20:18:47] <LeoNerd> Having had the LSW incremented, and a spare carry sitting around before the MSW gets done
[20:19:06] <thrig> hence house libatomic
[20:19:18] <ilmari> LeoNerd: and the footnote says «This paragraph renders undefined statement expressions such as `i = ++i + 1;` [and] `a[i++] = i;`»
[20:20:32] <LeoNerd> :)
[20:21:41] *** Joins: Adoi (~Adoi@user/adoi)
[20:22:17] <thrig> surely the contents of the paragraph and not the paragraph itself renders undefined...
[20:22:48] <Grinnz> that seems like a tautology, stating what it's rendering
[20:22:52] <Grinnz> well of course it does, it's right there!
[20:23:08] <bugweiser> Grinnz, regarding killing these phrase(S) from the docs, might I vote to clarify this a bit more instead? I *KNOW* i'm not the only one ever to ask about understanding perl strings! I've read loads of online documents and stackoverflow questions and forums.
[20:23:24] <huf> how did we get from melting fat out of stuff to putting pixels on a screen?
[20:23:28] <Grinnz> bugweiser: yes, i will be nuanced about it :)
[20:23:55] *** Joins: Adois (~Adoi@user/adoi)
[20:24:36] <mst> bugweiser: what I was proposing was kill them from the mainline docs *mostly* and have a perluniguts or something section that explains it all in detail in -one- place
[20:24:51] <huf> nah, split it in two
[20:24:51] <xq> when will we get separate byte and character string types?
[20:24:56] <thrig> perldoc perlunicodeherebedragons
[20:24:56] <perlbot> thrig: Your documentation is available at: https://perldoc.perl.org/perlunicodeherebedragons
[20:24:57] <bugweiser> Grinnz, also, the docs in multiple places state both that you shouldn't care and then that you should care (internal encoding of perl strings). It appears to me that the instances of when you should care seem important. I'd vote for a document more clearly explaining mostly of what we discussed.
[20:25:01] <mst> xq: ahahahahahahahahahahaha
[20:25:04] <huf> have one explain the part normal programmers should know
[20:25:08] <huf> and another explain the internals
[20:25:15] *** Parts: jrmu (jrmu@jrmu.lemon.ircnow.org) ()
[20:25:16] <huf> because that's how we explain it *here*
[20:25:30] <Grinnz> bugweiser: yeah, that's a more complicated design problem
[20:25:32] <bugweiser> It wouln't cater to new programmers, but for sure would help programmers (with experience) coming from different languages!
[20:25:48] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[20:26:35] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-205.prtc.net) (Ping timeout: 256 seconds)
[20:26:48] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 244 seconds)
[20:26:57] <bugweiser> likewise, if the perl-docs state that perl strings are a subset of unicode, then a very resonable question (of a programmer) is: define subset..
[20:27:14] <bugweiser> sorry !!! superset !!!
[20:27:32] <xq> if sub signatures ever evolve to the state where they are able to type-check arguments, byte vs character string check should be the very first thing that's implemented based on this
[20:27:33] <zgu> snippet that came up in a code review: "('(^\d$)', '{"type":"number", "min":0, "max":9, "rules":["greater_than[-1]","less_than[10]"]}')"
[20:27:47] <zgu> someone's comment: "i like how we have three different ways of saying 0 through 9"
[20:28:21] *** Quits: Moonlight (~Moonlight@64.253.17.181) (Ping timeout: 244 seconds)
[20:28:24] <thrig> does that \d have an /a on it?
[20:28:29] <huf> was about to say :)
[20:28:37] *** Quits: Adois (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[20:28:44] <huf> and also where does it say that it must be an int?
[20:29:11] <thrig> pi is a number, right?
[20:29:35] <zgu> i think this gets checked by some combination of js and php but i don't remember what libraries exactly
[20:29:42] <zgu> hmm, good point
[20:30:14] <thrig> natural number? something something grade school math I've forgotten multiple times now
[20:30:27] <zgu> oh there was an "integer" rule that i removed in my anonymization
[20:30:31] <huf> surely pi is very natural
[20:30:33] <huf> it's circly
[20:30:41] <zgu> but not in the number/min/max part
[20:30:48] <Grinnz> bugweiser: i would consider it less a "superset of unicode" as arbitrary codepoints which can be interpreted as unicode or bytes, or anything else really
[20:30:49] <zgu> unless number here implies integer
[20:31:00] <thrig> pie are square
[20:31:08] <Grinnz> bugweiser: "superset of unicode" implies that they're only for characters
[20:31:16] <huf> makes sense, easier to bake in a square oven
[20:32:18] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 256 seconds)
[20:32:27] <zgu> but the light bulb in easy bake oven is round so how consistent would the heat be?
[20:32:38] <zgu> also how do those work now that everything's LEDs?
[20:33:10] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:61e9:b352:c0b7:8092) (Ping timeout: 240 seconds)
[20:33:58] <xenu> that makes me wonder what do strings on ebcdic platforms contain
[20:34:07] <bugweiser> Grinnz, agree (if I understand correctly now). *theoretically* I could abuse a 'perl string' as an variable width encoded integer array (up to 32 or 64 bit signed/unsigned depending on platform) (just like one would abuse javascript strings (as uint16 array) prior to typed arrays). Correct?
[20:34:16] <Grinnz> yup
[20:34:32] <thrig> it's that what vec is for
[20:34:38] <thrig> isn't
[20:34:41] <Grinnz> it's usually inconvenient because there's no arraylike access to strings, but it's possible
[20:35:00] <bugweiser> Grinnz, thank you so so much!
[20:35:01] <LeoNerd> Yup...
[20:35:06] <LeoNerd> There's a reason I said that in the very beginning
[20:35:07] *** Quits: pizdets (~pizdets@183.182.111.16) (*.net *.split)
[20:35:07] *** Quits: Tempesta (~Tempesta@user/tempesta) (*.net *.split)
[20:35:11] <LeoNerd> A string is a vector of nonnegative integers
[20:35:18] <bugweiser> and all others who helped!
[20:35:20] <zgu> probably some kind of flax or sisal. i don't think they had modern fibers like PET back then
[20:35:33] <Grinnz> vec is unfortunately overly byte focused
[20:35:38] <LeoNerd> Mmmm
[20:35:54] *** Joins: pizdets (~pizdets@183.182.111.16)
[20:35:56] <Grinnz> which is probably convenient for its applications, but not for usign a string as an int array
[20:36:11] *** Joins: Tempesta (Tempesta@183.98.39.112)
[20:36:12] *** Quits: Tempesta (Tempesta@183.98.39.112) (Changing host)
[20:36:12] *** Joins: Tempesta (Tempesta@user/tempesta)
[20:36:12] *** Quits: Tempesta (Tempesta@user/tempesta) (Excess Flood)
[20:36:38] <huf> uvec when?
[20:37:01] <thrig> uvec, ivec, we all vec for vecvec
[20:37:11] <Grinnz> lvalue substr with chr/ord is generally the way to manipulate strings as int arrays
[20:37:13] <LeoNerd> Also, vec() isn't quite as useful as perhaps it could be. The "width" argument has to be a power of 2
[20:37:29] <LeoNerd> So you can treat the string as a vector of 1, 2, 4, 8,... etc.. bit quantities, but not e.g. 6 or 5
[20:37:45] <Grinnz> yes, it's also annoying that unpack doesn't let you do arbitrary bit sizes :P
[20:37:46] *** Joins: Tempesta (Tempesta@user/tempesta)
[20:37:46] *** Quits: Tempesta (Tempesta@user/tempesta) (Excess Flood)
[20:38:29] <xenu> like, iso-8859-1 happens to be the same as 1-255 unicode codepoints (by design). how the hell does it work on ebcidic platforms? what happens when you decode an ebcdic string? does the resulting string contain unicode codepoints?
[20:38:57] *** Joins: Tempesta (Tempesta@183.98.39.112)
[20:38:57] *** Quits: Tempesta (Tempesta@183.98.39.112) (Changing host)
[20:38:57] *** Joins: Tempesta (Tempesta@user/tempesta)
[20:38:57] *** Quits: Tempesta (Tempesta@user/tempesta) (Excess Flood)
[20:39:02] <LeoNerd> UTF-EBCDIC is a thing
[20:39:08] <LeoNerd> If you want to be scared, go read about it ;)
[20:39:17] *** Joins: Tempesta (Tempesta@user/tempesta)
[20:39:45] <xenu> but that's an encoding, i'm more worried about codepoints. lots of thing rely on the fact that e.g. "\n" is the same in decoded and encoded strings
[20:40:05] <huf> lots of things rely on not running on ebcdic
[20:40:10] <huf> at all
[20:41:04] <xenu> i guess you have to be sure that everything is properly decoded and "use utf8" is much more important than on ascii platforms
[20:41:09] <LeoNerd> Oh.. yeah. Much code relies on being x86, Linux, gcc... the further you stray away from that, the more you find stops working.
[20:41:31] <LeoNerd> Go far enough out and you find yourself in EBCDIC or VMS or somewhere weird, and all your basic assumptions just fall over
[20:41:46] <bugweiser> LeoNerd, xenu, these things also interest me !!
[20:43:24] <bugweiser> I used 'use utf8' thinking it would let me be sure my script is interpreted as such on an ebcdic platform (and additionally, if I restrain myself to use only 7-bit ascii, this would equally enforce the script encoding as such, ascii being subset of utf8 and utf-8)
[20:43:36] <mst> bugweiser: btw, the 'cursed gauntlets of overcomplication' thing was something I made up to explain the phenomenom to an employee we'd trained up from apprentice to junior developer
[20:43:47] <mst> bugweiser: it's -not- a criticism, I remember my own set :D
[20:43:47] <thrig> next you'll be telling us that CHAR_BITS may not be 8
[20:44:02] <LeoNerd> thrig: Oooh.. yes.. the 9/18/36bit platforms are fun too :)
[20:44:11] <LeoNerd> UTF-9 is also a thing there
[20:44:17] <thrig> ASCII *is* 7-bits.
[20:44:36] <ilmari> thrig: the existence of uint8_t in POSIX impliees CHAR_BITS==8
[20:44:51] <LeoNerd> POSIX requires that CHAR_BITS==8 indeed. That's one of its most basic assumptions
[20:45:24] <ilmari> LeoNerd: not until stdint.h added int8_t
[20:45:54] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 256 seconds)
[20:46:28] *** Joins: Adoi (~Adoi@user/adoi)
[20:46:35] <mst> LeoNerd: right, 3 bits of operation code, 15 bits of car, 3 bits of tag, 15 bits of cdr
[20:46:39] * GumbyPAN CPAN Upload: Text-Template-1.60 by MSCHOUT https://metacpan.org/release/MSCHOUT/Text-Template-1.60
[20:46:44] <bugweiser> mst, np; What I learned today is of great help for my understanding! 
[20:47:28] <xenu> speaking of weird platforms, unisys mainframes have interesting integer representations: OS2200 uses 1's complement and MCP uses signed magnitude
[20:47:32] <xenu> both are still developed and sold
[20:48:05] <xenu> (and unlike z/OS their emulators are free, so you can play with them if you want)
[20:48:11] <Grinnz> xenu: so it's not that important because nobody uses EBCDIC, but my understanding is that on EBCDIC, downgraded strings are stored as the EBCDIC bytes representing the unicode codepoints in the string, and upgraded strings are stored as UTF-EBCDIC which is sort of a made up encoding, and "\xFF" actually represents that EBCDIC codepoint not U+FF, but "\N{U+FF}" is translated to that EBCDIC codepoint
[20:48:12] <LeoNerd> Fun :)
[20:48:47] <Grinnz> xenu: logically, the string is the same, but \x are interpreted differently
[20:49:05] <Grinnz> \r\n and similar as well
[20:49:35] <Grinnz> and since literal characters on that platform will be in EBCDIC not ASCII, those already will be translated by converting the script to EBCDIC
[20:50:06] <LeoNerd> Oh, yeah.. \n will always give you the linefeed on your particular platform... it's not just \x0d
[20:50:12] <LeoNerd> or \x0a. I forget which
[20:50:22] <Grinnz> right, which is why i hate that CGI.pm and similar modules started using \x0a for "portability"
[20:50:31] <Grinnz> when it's literally the same on every platform and explicitly wrong on EBCDIC
[20:50:56] <Grinnz> they probably did it because of the "platform native newline" lie in the docs about \n
[20:51:28] <Grinnz> it's the :crlf layer that does that, not \n
[20:51:33] <xenu> i don't understand why IBM won't release z/OS emulators for free for personal usage
[20:51:37] <xenu> unisys does that, openvms does that
[20:51:40] *** Joins: Adois (~Adoi@user/adoi)
[20:51:54] <xenu> the result is that pretty much no one can test software on their platforms
[20:51:59] <xenu> and they're guessing things
[20:51:59] <LeoNerd> Is z/OS of actual interest still?
[20:52:13] <buZz> xenu: because IBM is still selling z/OS support and hardware
[20:52:23] <buZz> they will do so forever
[20:52:42] <xenu> so what they're selling it. OS2200, MCP and openvms are still being sold too
[20:52:59] *** Parts: keir (~keir@user/keir) ()
[20:53:01] <xenu> and they all have free versions for personal use
[20:53:05] <buZz> are any of those invented by IBM?
[20:53:16] *** Quits: Manderson_ (~manderson@45.40.80.170) (Remote host closed the connection)
[20:53:40] *** Joins: Manderson_ (~manderson@45.40.80.170)
[20:53:46] <xenu> and i don't know how they expect people to learn their technologies
[20:54:22] <thrig> presumably the company would (gasp) pay to train and mentor new hires?
[20:54:28] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[20:54:41] <xenu> yeah but that implies that z/OS can be used only in companies that are already using it
[20:55:13] <thrig> or Bob leaves company X founds Y buys IBM again
[20:55:14] <huf> isnt that the case?
[20:55:16] *** Quits: Manderson_ (~manderson@45.40.80.170) (Remote host closed the connection)
[20:55:27] <xenu> it is but it doesn't strike me as a good strategy
[20:55:27] <huf> ... why would anyone start using that shit?
[20:55:32] <xenu> remember borland?
[20:55:58] <huf> a good strategy would be just dropping it entirely and emulating it on a pc
[20:56:00] <xenu> delphi used to be very popular until they discontinued the free version
[20:56:16] <huf> and slowly letting it die of course
[20:56:32] *** Joins: Manderson (~manderson@45.40.80.170)
[20:56:45] <xenu> and considering that ibm's revenue is rapidly decreasing i suppose i'm right to be sceptical about their business strategy
[20:57:09] <LeoNerd> Companies don't care about products being popular; only as a side-effect of them being able to sell them more
[20:57:14] <daemon> ibm's business stratergy is simply a rhelic, almost the classical microsoft approach
[20:57:21] <LeoNerd> There's no point being popular if that's only because of free giveaways
[20:57:40] <daemon> relic* even
[20:57:46] <huf> eh, keeping mindshare is probably important and can be 
[20:57:49] <huf> mined for profit
[20:58:42] <daemon> I imagine it is now approaching the point that those ancient ibm z/OS systems are getting more commulatively expensive to support and license than it would be to simply hire 10-20 devs to replace it in parallel to its continued operation
[20:59:03] <daemon> hence the revenue plummet 
[20:59:31] <thrig> dunno, I've heard of replacements failing
[20:59:33] <huf> :D
[21:00:00] <huf> yeah, it's probably safer to keep sucking IBM's teat than to try to rewrite it and fail and have that budget blow up a million times and sink the company
[21:00:01] <thrig> because there's like a billion lines of COBOL to replace, or something
[21:00:40] <daemon> you would not do such a thing in an 'upgrade from cobol' way, you would investigate, plan and migrate
[21:00:46] <daemon> why would you want to emulate the past
[21:00:49] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[21:01:04] <daemon> sure it would cost a fortune, but certainly less than paying IBM till the end of time
[21:01:46] <xenu> s/cobol/perl/gi
[21:02:08] <xenu> although to be fair, at least perl is free!
[21:02:29] *** Joins: gast0n (~g4570n@user/gast0n)
[21:03:08] <daemon> I imagine the perfect migration would be first to identify all ingress to the system (ipx/tcp/udp) and write something to simply duplicate/clone what is sent to the original system and then to a secondary
[21:03:17] <daemon> then start building a secondary that can do what the old ones does
[21:03:32] <daemon> and from there start building the replacement, so legacy systems still operate but modern systems can deal with it also
[21:03:38] <daemon> costly for sure
[21:03:52] <Grinnz> perfect migrations always are
[21:04:51] <LeoNerd> If migrations are so costly, how come birds can afford to do it twice a year, mm?
[21:05:05] <thrig> ... production alarm fires as totally different coding team using a totally different language write the exact same bug as the old code had ...
[21:05:38] <mst> LeoNerd: ... bastardo!
[21:05:54] <thrig> but the new code was in Java instead of C++, so, uh, progress?
[21:06:14] <huf> so it's a safer bug then
[21:06:23] <bugweiser> Grinnz, so 'perl strings' can be in 2 modes? EBCDIC for downgraded (fixed width) and UTF-EBCDIC for upgraded (var width)   OR   ISO 8859-1 for downgraded (fixed width) and utf8 (no hyphen) for upgraded (var width). ?   Additionally, when using chr/ord and \x{} should not be passed values representing unicode code points when the string is in (utf-)ebcdic mode?
[21:06:57] <Grinnz> bugweiser: really the only modes that matter are upgrded or downgraded. whether it's EBCDIC or ASCII applies to the entire interpreter, there's never any switching between those states
[21:07:37] * LeoNerd still not sure why we're even talking about "upgraded vs downgraded"
[21:07:45] <LeoNerd> Just kill all the docs and forget it ever existed
[21:07:48] <Grinnz> bugweiser: but yes if you care about EBCDIC you always want to use \N{U+XX} for unicode codepoints, not \x
[21:08:06] <Grinnz> bugweiser: that's regardless of upgrading or downgrading
[21:08:13] <thrig> not really, the bug was Japanese names got encoded wrongly which meant the entire transaction batch filed and customer service had to call up customers to get them to re-enter their name on the website
[21:08:22] <mst> honestly if you use \x instead of \N in a proper string, ideally a small gnome exits the back of the computer and hits the developer with a mallet
[21:08:29] <thrig> luckily someone wrote a little perl script to look for this condition after the first time it happened
[21:08:39] <mst> thrig: "someone"
[21:08:41] <Grinnz> the only time you want ot use \x is when you want a specific byte, even on EBCDIC
[21:08:48] <Grinnz> which is perfectly valid, but not usually what you want for text strings
[21:08:49] <LeoNerd> \x is perfectly valid when you're dealing with actual raw protocol-level bytes, eg. on some network or IO device filehandle
[21:08:55] <Grinnz> right
[21:09:04] <Grinnz> dealing with network on EBCDIC is a whole other confusion
[21:09:10] <mst> LeoNerd: right, 'proper string' was me meaning 'not a byte string'
[21:09:20] <Grinnz> does the network speak EBCDIC or ASCII? i haven't cared enough to find out
[21:09:21] <mst> I couldn't think of the right words
[21:09:29] <Grinnz> i imagine both happen
[21:09:31] <LeoNerd> Mmmm
[21:09:48] <huf> thrig: *just* japanese names?
[21:09:51] <huf> what's the trick here?
[21:11:57] *** Quits: icedjava37 (~icedjava3@188.4.17.130.dsl.dyn.forthnet.gr) (Quit: Leaving)
[21:16:42] * GumbyPAN CPAN Upload: Nasm-X86-20210903 by PRBRENAN https://metacpan.org/release/PRBRENAN/Nasm-X86-20210903
[21:16:51] <bugweiser> mst, note taken about the small gnome!
[21:17:06] <bugweiser> boy do I have a headache now :)
[21:17:22] <mst> bugweiser: the mallet gnome is a regular participant in #perl discourse :D
[21:17:34] <mst> as is the vaguecat: http://trout.me.uk/vaguecat.jpg
[21:17:47] <bugweiser> :)
[21:18:09] <huf> yeah, it's an ecosystem
[21:18:43] <thrig> some would claim it has insufficient data
[21:19:50] <mst> ... oh well done.
[21:20:18] <mst> for bugweiser, that was a reference to http://trout.me.uk/data.jpg
[21:21:43] * GumbyPAN CPAN Upload: GraphQL-0.52 by ETJ https://metacpan.org/release/ETJ/GraphQL-0.52
[21:22:02] <bugweiser> lol
[21:23:19] <mst> bugweiser: I can, as you have already noticed, be a grumpy bastard, but I'm also incapable of taking myself (or anybody else) too seriously
[21:25:19] <bugweiser> I'll always prefer clear talk, even if that includes grumpy. :) 
[21:25:37] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[21:26:43] * GumbyPAN CPAN Upload: Minion-Backend-MongoDB-1.07 by EBRUNI https://metacpan.org/release/EBRUNI/Minion-Backend-MongoDB-1.07
[21:29:42] *** Quits: ufobat (~martin@dynamic-095-114-004-008.95.114.pool.telefonica.de) (Ping timeout: 245 seconds)
[21:29:50] *** Quits: gggp_ (~gggp@111-251-157-238.dynamic-ip.hinet.net) (Ping timeout: 244 seconds)
[21:32:04] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[21:32:25] *** Quits: Adois (~Adoi@user/adoi) (Ping timeout: 244 seconds)
[21:36:30] *** Joins: mattil (~mattil@84-253-251-139.bb.dnainternet.fi)
[21:37:13] *** Joins: KnoP (~KnoP@p57b21ac7.dip0.t-ipconnect.de)
[21:37:48] *** Joins: TieUpYourCamel (~david@99-111-133-221.lightspeed.chrlnc.sbcglobal.net)
[21:39:09] *** Joins: EGD (~egd@user/egd)
[21:40:40] *** Quits: mattil (~mattil@84-253-251-139.bb.dnainternet.fi) (Ping timeout: 240 seconds)
[21:42:30] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[21:49:12] <LeoNerd> A couple of "things to think about" ideas on my new `equ` operator. Thoughts welcome -- https://rt.cpan.org/Dist/Display.html?Name=Syntax-Operator-Equ
[21:49:13] <Paperbot_> Link title(s): [ Active bugs for Syntax-Operator-Equ <https://rt.cpan.org/Public/Dist/Display.html?Name=Syntax-Operator-Equ> ]
[21:51:48] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[21:54:38] *** Quits: Su-Shee (~Susanne@p4ff49458.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[21:56:21] *** Joins: Su-Shee (~Susanne@p4ffc7346.dip0.t-ipconnect.de)
[22:00:08] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 256 seconds)
[22:02:03] <xq> LeoNerd: say "TRUE" if $str equ $href;  ## is not true < this is suboptimal in my view. I see two possible results of this function that bring some kind of benefit: A) behave exactly as eq does, with the benefit of some semblance of backwards compatibility B) throw an exception, with a benefit of more sane behavior while sacrificing backwards compatibility. I do not see any benefit from introducing a new 
[22:02:09] <xq> behavior (which just returning false from such comparison is).
[22:02:53] <LeoNerd> Hmm.. throwing an exception...
[22:03:14] <LeoNerd> That's another possible thought
[22:03:34] <LeoNerd> Rather than just returning false, actually complain that really the question isn't possible
[22:03:43] <xq> yes
[22:03:55] <LeoNerd> So in effect it would act as though `no stringification` was in effect
[22:04:03] <LeoNerd> Yah.. hmm. that's another alternative
[22:04:54] * LeoNerd adds note
[22:08:14] <xq> LeoNerd: can you explain what a PL_infix_plugin-enabled perl is compared to a perl that one can get from `perlbrew install`?
[22:08:29] <LeoNerd> Yes. it's one in which you have merged my `infix-plugin` branch
[22:09:18] <LeoNerd> https://metacpan.org/pod/XS::Parse::Infix#DESCRIPTION
[22:09:18] <Paperbot_> Link title(s): [ XS::Parse::Infix - XS functions to assist in parsing infix operators - metacpan.org ]
[22:09:33] *** Quits: shlomif (~shlomif@87.68.240.100.adsl.012.net.il) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[22:10:57] *** Quits: KnoP (~KnoP@p57b21ac7.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[22:13:19] *** Quits: _73 (~user@pool-96-252-123-136.bstnma.fios.verizon.net) (Remote host closed the connection)
[22:29:45] *** Joins: root_ (~root@c-76-105-81-129.hsd1.ga.comcast.net)
[22:29:52] *** Joins: Manderson_ (~manderson@45.40.80.170)
[22:29:55] <root_> wazzzaaap?
[22:30:23] <lopid> nothing. what's up with you?
[22:30:39] <root_> just vibin to be real
[22:31:01] <root_> in one of these cloud/iot puff piece classes
[22:31:47] *** Quits: root_ (~root@c-76-105-81-129.hsd1.ga.comcast.net) (Client Quit)
[22:33:28] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[22:42:59] *** Joins: WinterStar (~IceLight@user/icelight)
[22:46:24] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:51:12] *** Quits: voegelas_ (~voegelas@www.andreasvoegele.com) (Remote host closed the connection)
[22:51:58] *** Joins: voegelas (~voegelas@www.andreasvoegele.com)
[22:53:09] *** Quits: SysPete (~SysPete@fin.sysnix.com) (Quit: ZNC - http://znc.in)
[22:53:19] *** Joins: SysPete (~SysPete@fin.sysnix.com)
[23:12:12] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 245 seconds)
[23:14:24] *** Quits: magla (~gelignite@55d44ca3.access.ecotel.net) (Remote host closed the connection)
[23:14:40] *** Joins: magla (~gelignite@55d44ca3.access.ecotel.net)
[23:17:10] *** Quits: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com) (Ping timeout: 240 seconds)
[23:18:58] *** Joins: EvanCarroll (~ecarroll@212.174.109.83)
[23:19:05] <EvanCarroll> IT IS I, EVAN THE GREAT
[23:20:41] <Grinnz> LeoNerd: my opinion is equ should not care about the reference question, and should respect whatever other stuff messes with that (like no stringification)
[23:20:53] <Grinnz> so basically xq's A
[23:21:11] <LeoNerd> Mmmm
[23:21:25] <Grinnz> because while it's a good addition, it doesn't really have anything to do with the purpose of equ
[23:21:31] <LeoNerd> I guess in the wider context of a `no stringification` or however we might spell it in terms of `strict`, ... that would make best sense
[23:21:32] <LeoNerd> Yah
[23:21:55] * GumbyPAN CPAN Upload: Signer-AWSv4-0.06 by JLMARTIN https://metacpan.org/release/JLMARTIN/Signer-AWSv4-0.06
[23:24:10] *** Quits: vs^ (~vs@wsip-98-188-244-188.mc.at.cox.net) (Ping timeout: 240 seconds)
[23:24:15] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[23:24:49] *** Lemniscate is now known as Sauvin
[23:25:16] *** Joins: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com)
[23:27:09] *** Joins: hudo (~hudo@62.68.27.70)
[23:31:56] * GumbyPAN CPAN Upload: URI-Fast-0.54 by JEFFOBER https://metacpan.org/release/JEFFOBER/URI-Fast-0.54
[23:34:14] <EvanCarroll> Who needs a job and writes/has wrote perl professionally? message me if you're looking. cPanel is hiring.
[23:35:49] *** Quits: VoidNoir0 (~VoidNoir0@72.80.203.52) (Quit: Connection closed)
[23:36:14] *** Joins: YaoNai (~YaoNai@user/yaonai)
[23:43:44] *** Joins: vs^ (~vs@wsip-98-188-244-188.mc.at.cox.net)
[23:49:59] <leont> cPanel is always hiring 😛
[23:50:44] <TieUpYourCamel> I've been employed as someone who sometimes does programming.  It was my choice to use Perl
[23:51:15] <TieUpYourCamel> was not hired specifically as a Perl programmer
[23:51:36] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[23:53:47] <TieUpYourCamel> I write web apps, but I don't really know Javascript or CSS.  My HTML skills are in the 90s.  I still use tables.
[23:54:09] <TieUpYourCamel> Boom.  honest interview. :D
