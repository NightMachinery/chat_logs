[00:06:37] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[00:10:57] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[00:24:06] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[01:14:08] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:16:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:22:26] *** Joins: sakasama (~sakasama@user/sakasama)
[01:28:17] *** Quits: kwon-young_ (~kwon-youn@lcs07-lyo-176-188-228-64.sfr.lns.abo.bbox.fr) (Ping timeout: 240 seconds)
[01:38:33] *** Joins: FreeFull (~freefull@user-5-173-152-46.play-internet.pl)
[02:08:09] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:12:59] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[03:11:25] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[03:51:48] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[03:52:39] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[03:57:30] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[04:06:31] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:24:19] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[04:28:37] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Ping timeout: 240 seconds)
[04:36:50] *** Quits: sakasama (~sakasama@user/sakasama) (Remote host closed the connection)
[05:12:32] *** Quits: FreeFull (~freefull@user-5-173-152-46.play-internet.pl) ()
[05:13:45] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[05:30:45] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[05:35:26] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[06:08:20] *** Joins: sakasama (~sakasama@user/sakasama)
[06:26:08] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:42:56] *** Joins: millido (~millido@84.210.150.128)
[06:43:10] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[07:03:41] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[07:30:24] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:31:25] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[07:43:52] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[07:57:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[09:27:14] *** Quits: Haxxa (~Haxxa@125-253-30-218.ip4.superloop.com) (Quit: Haxxa flies away.)
[09:48:45] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[09:49:37] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[10:02:30] *** Joins: skapata (~Skapata@user/skapata)
[10:06:51] *** Quits: sakasama (~sakasama@user/sakasama) (Remote host closed the connection)
[10:07:11] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[10:29:28] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:08:57] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:10:03] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[11:14:46] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[11:16:26] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[11:30:35] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:30:49] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[11:31:28] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[11:36:02] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[11:45:00] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[11:49:50] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[11:52:05] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[12:02:29] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:03:15] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[12:08:02] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[12:24:35] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:37:26] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[13:17:01] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 240 seconds)
[13:25:00] *** Joins: dvyd (~dvyd@2a0d:6fc2:47b0:1800:4cb3:a8b2:cbab:7b01)
[13:25:51] <dvyd> Is there a way to modify this query `room(R), loc(bob,R), connected(R,X).` so Prolog only returns the values for X? I still need R in the query, but I don't need to know its values.
[13:50:08] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:27:35] <ski> some Prolog implementations/interactors will (or can be configured to) omit displaying the value of a query variable, if it starts with `_'
[14:29:29] <ski> (obviously) another way is to define a helper predicate, like `foo(X) :- room(R), loc(bob,R), connected(R,X).' (or make `bob' a parameter too, if you wish), and then have the query `?- foo(X).' instead
[14:31:43] <ski> another alternative is to call `findall(R,( room(R), loc(bob,R), connected(R,X) ),Rs)' in the query .. possibly followed by `member(R,Rs)' (maybe with `Rs' renamed to `_Rs', as in the first alternative) if you want to get one solution at a time .. however, then it will compute (and retain) all the solutions at the same time, rather than incrementally
[14:32:32] <dvyd> ski , thank you. I was hoping there was a simple "Display X" only command. I'll continue to post-process the result after the query.
[14:32:38] <dvyd> (outside of Prolog)
[14:33:47] <ski> oh, another variant of this is to simply write a loop to make it output the solutions. like `?- forall(( room(R), loc(bob,R), connected(R,X) ),( write('R = '),write(R),nl )).' (or `?- room(R), loc(bob,R), connected(R,X),write('R = '),write(R),nl,fail.' if you must)
[14:35:20] <ski> oh, actually .. sorry, i managed to mix up which of `R' and `X' you wanted
[14:35:24] <dvyd> Thanks. Given my low level of Prolog understanding, it is easier and safer for me to process the result outside of Prolog I think.
[14:38:21] <ski> findall/3 will collect (values of given variables for) each solution of a goal, into a list. forall/3 will run a goal for each solution of another goal
[14:50:10] <ccx> Isn't this a case for simple setof()? Though I prefer using findall myself usually.
[14:54:25] <ccx> https://www.swi-prolog.org/pldoc/man?section=allsolutions
[14:59:37] <ski> they just wanted solutions, said nothing about sorting them, or removing duplicates, or grouping them
[15:03:21] <ccx> Right. I'm making assumptions about what they do with the results.
[15:06:35] <ccx> That is, it's the predicate for "get unique values of variable X for this query". Which sounded like decent match for `simple "Display X" only command`.
[15:07:39] <ccx> But I like your forall better anyway.
[15:10:22] <ski> if we had a blessed notation for existential quantification, then that would be the official way of doing this
[15:11:04] <ski> however, `R^ ..R..' is only a thing, in the goal parameter of setof/3,bagof/3 and similar
[15:15:16] <yauhsien> dvyd: there is lambda expression in SWI https://www.swi-prolog.org/pldoc/doc_for?object=(/)/9
[15:16:42] <yauhsien> dvyd: and those answers are like what you want. https://stackoverflow.com/questions/43183904/prolog-ignore-unwanted-variables-in-the-output
[15:21:39] *** Joins: rogersm (~rogersm@90.166.180.250)
[15:23:59] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[16:41:09] <dvyd> yauhsien, @ski
[16:42:02] <dvyd> yauhsien, ski, ccx I'm not using SWI but I'll see if it is available.
[16:42:07] <dvyd> thank you!
[17:33:47] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[17:38:53] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[18:07:46] *** Joins: kiki_lamb (~kiki_lamb@198-91-209-245.cpe.distributel.net)
[18:08:00] <kiki_lamb> What's the most Prolog-esque Lisp? Or the Lisp-iest Prolog? Someone must have tried to mash these things together somehow..
[18:18:47] <yauhsien> I do not believe those languages may have anything in common.
[18:21:39] <ccx> kiki_lamb: Completely different execution models. There are logical/relational libraries for Lisp, sure. MiniKanren is the most well known. Also writing symbolic interpreters is pretty darn easy in Prolog so certainly there's bunch of lisp-likes. But still quite strong division between how the languages operate.
[18:24:32] <ccx> Well, maybe the Clojure one is better known, but Byrd's work has been definitely close to spirit of Prolog an it's community.
[18:25:35] <ccx> kiki_lamb: Somebody merged Prolog with Haskell though https://mercurylang.org/ ;-)
[18:25:55] <ccx> Also Prolog has been one of significant influences on Erlang.
[18:26:29] <ccx> But really, the similarities in Prolog and Lisp are more in what they don't feature than what they do.
[18:32:47] <ccx> kiki_lamb: Honestly I think https://en.wikipedia.org/wiki/Refal is probably the most in-between thing between Prolog and LISPs. Not intentionally though. It's functional language based on pattern matching and rewriting rather than usual evaluation. And pattern matching is little sister of Prolog's unification. But it's still a language that's very much it's own thing.
[18:38:39] <ccx> Amusingly Wikipedia is wrong about the basic data structure of Prolog being a list. It's a "compound term" which is a tree, but differently shaped than in Refal. Prolog lists were traditionally constructed as unbalanced binary tree of cons operators with values in the leaves.
[18:46:24] <kiki_lamb> Wow, I've never heard of Refal, it's surprisingly old.
[18:53:06] <ccx> Last thing that comes to my mind is Icon (or rather Unicon) which has this "let's have Prolog's backtracking, but annoyingly manual" feature. Granted, still way more concise than writing backtracking without it in fully imperative language, but still it doesn't really compare.
[18:54:24] <ski> perhaps whoever wrote that had "solutions sequences" in mind, maybe ?
[18:55:08] <ccx> Yeah, it's a feature of their generators/iterators.
[18:55:45] <ski> ccx : hm, reminds me i've heard of old Prologers looping by bisection (e.g. over an arithmetic range), to bound the stack depth logarithmically (presumably before LCO)
[18:57:33] <ccx> (As aside, I still think Unicon is better at being Python2 than Python ever was. Not sure what Py3 wants to be but personally I think Nim is doing that one better. Too bad language design doesn't correspond with amount of libraries and bindings.)
[18:57:51] <dvyd> I'm using a version of Prolog written in C# that plays well with .NET. I've used Mercury a bit because it can compile to a .NET library. Mercury feels very different from Prolog even though unification works the same.
[18:59:06] <ccx> Yeah, it's very different indeed. Despite reusing most of the syntax.
[19:03:16] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:15:34] <White_Flame> kiki_lamb: while there are many prolog-in-lisp projects, there is also a full common lisp in prolog: https://github.com/logicmoo/wam_common_lisp
[19:25:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:27:38] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[19:29:10] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[19:32:13] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[19:40:50] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:42:57] *** Joins: kwon-young_ (~kwon-youn@2001:861:3dc0:4400:d529:8d16:4de5:a4a0)
[20:02:57] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:fcf8:6040:f413:fda1)
[20:02:57] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:fcf8:6040:f413:fda1) (Changing host)
[20:02:57] *** Joins: skapata (~Skapata@user/skapata)
[20:16:24] *** Quits: kwon-young_ (~kwon-youn@2001:861:3dc0:4400:d529:8d16:4de5:a4a0) (Ping timeout: 250 seconds)
[20:16:25] *** Joins: kwon-young (~kwon-youn@lcs07-lyo-176-188-228-64.sfr.lns.abo.bbox.fr)
[20:46:13] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[21:02:53] *** Quits: kwon-young (~kwon-youn@lcs07-lyo-176-188-228-64.sfr.lns.abo.bbox.fr) (Ping timeout: 256 seconds)
[21:14:32] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:16:48] *** Joins: rgrinberg (~textual@187.223.115.174)
[21:46:42] *** Joins: econo (uid147250@user/econo)
[21:46:42] *** Quits: rgrinberg (~textual@187.223.115.174) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:49:56] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[22:03:42] *** Joins: sakasama (~sakasama@user/sakasama)
[22:27:47] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:33:08] *** Joins: kwon-young (~kwon-youn@2001:861:3dc0:4400:d529:8d16:4de5:a4a0)
[22:45:04] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:48:08] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:54:34] *** Quits: kwon-young (~kwon-youn@2001:861:3dc0:4400:d529:8d16:4de5:a4a0) (Ping timeout: 250 seconds)
[22:58:21] *** Quits: dvyd (~dvyd@2a0d:6fc2:47b0:1800:4cb3:a8b2:cbab:7b01) (Quit: Client closed)
[23:19:32] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[23:24:02] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[23:58:20] <ski> <moon-child:#logicmoo> shen
[23:58:31] <ski> <moon-child:#logicmoo> and: https://github.com/logicmoo/wam_common_lisp kinda
