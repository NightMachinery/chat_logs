[00:01:02] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[00:02:15] *** Joins: ksqsf (~user@134.209.106.31)
[00:03:12] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[00:03:31] *** Joins: kmein (~weechat@user/kmein)
[00:07:02] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[00:09:23] *** Joins: ubert (~Thunderbi@p200300ecdf09949e91b35a252eb85141.dip0.t-ipconnect.de)
[00:09:26] *** Quits: ubert (~Thunderbi@p200300ecdf09949e91b35a252eb85141.dip0.t-ipconnect.de) (Client Quit)
[00:11:02] *** Quits: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 240 seconds)
[00:11:19] *** Joins: jkaye (~jkaye@2601:281:200:1958:2b64:9a7d:6899:8349)
[00:11:29] *** Joins: pfurla (~pfurla@2804:d41:4331:4800:31ef:1aaf:1e7:47d)
[00:16:58] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[00:18:15] *** Quits: kuribas (~user@ptr-25vy0ia11vvy5vw4h88.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[00:19:13] *** Joins: hololeap_ (~hololeap@user/hololeap)
[00:19:14] *** Quits: kojo5551 (~kojo5551@fep.grid.pub.ro) (Remote host closed the connection)
[00:19:18] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[00:20:49] *** Joins: val-host (~val-host@2a02:2f0f:9108:b00:6891:37fc:a7bd:3738)
[00:20:59] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:21:35] *** Joins: kojo5551 (~kojo5551@fep.grid.pub.ro)
[00:22:12] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[00:22:32] *** Quits: val-host (~val-host@2a02:2f0f:9108:b00:6891:37fc:a7bd:3738) (Client Quit)
[00:25:28] *** Joins: slac52114 (~slack1256@191.125.99.76)
[00:27:09] *** Quits: dut (~dut@user/dut) (Quit: Leaving)
[00:27:32] *** Quits: slack1256 (~slack1256@186.11.99.46) (Ping timeout: 240 seconds)
[00:30:13] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:31:36] *** Joins: ubert (~Thunderbi@p200300ecdf09949e91b35a252eb85141.dip0.t-ipconnect.de)
[00:32:15] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[00:33:03] *** Joins: pavonia (~user@user/siracusa)
[00:33:10] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[00:40:32] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[00:40:38] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:41:10] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:42:08] *** Joins: slack1256 (~slack1256@186.11.27.197)
[00:44:10] *** Joins: Pickchea (~private@user/pickchea)
[00:44:33] *** Quits: slac52114 (~slack1256@191.125.99.76) (Ping timeout: 256 seconds)
[00:46:35] *** Quits: _ht (~quassel@2a02:a468:b619:1:c1f2:a735:3541:23f8) (Remote host closed the connection)
[00:48:01] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[00:53:19] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:55:21] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[00:56:26] *** Joins: ksqsf (~user@134.209.106.31)
[01:01:41] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[01:02:05] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:03:24] *** Joins: dut (~dut@user/dut)
[01:06:43] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:07:57] *** Joins: jgeerds (~jgeerds@55d4090e.access.ecotel.net)
[01:11:03] *** Quits: xlei_ (~akans@pool-71-125-19-142.nycmny.fios.verizon.net) (Quit: ZNC 1.9.x-git-167-81df4dec - https://znc.in)
[01:13:48] *** Joins: Zugul (~Zugul@52.173.255.131)
[01:13:55] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[01:14:10] <Zugul> !help
[01:14:24] <Zugul> ??
[01:22:21] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[01:22:52] <geekosaur> yes?
[01:24:04] <monochrom> We have not bots here.
[01:24:15] <monochrom> err I can't type.  We have no bots here.
[01:24:32] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 240 seconds)
[01:25:05] * sm whispers /msg lambdabot @help
[01:26:29] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[01:27:17] <monochrom> Ugh I just rediscovered that "@quote monochrom monad" is full of past wisdom I forgot. :)
[01:28:14] * geekosaur sends monochrom a burrito
[01:32:43] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Quit: WeeChat 3.3)
[01:35:11] <monochrom> I had a quote that's way more general than burrito!
[01:35:18] <monochrom> @quote monochrom monad.*dinner
[01:35:18] <lambdabot> monochrom says: We the haskell community should henceforth use "what is a monad" as our secret code for "dinner time!"
[01:36:22] <Rembane> That's a very good quote.
[01:36:28] <monochrom> :)
[01:37:17] <wombat875> kl
[01:37:24] *** Quits: wombat875 (~neilfulwi@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[01:37:44] *** Joins: wombat875 (~neilfulwi@pool-72-89-24-154.nycmny.fios.verizon.net)
[01:38:06] <wombat875> lol sorry still trying to figure out weechat shortcuts
[01:40:00] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:41:15] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[01:42:08] *** Quits: fendor (~fendor@178.115.55.2.wireless.dyn.drei.com) (Remote host closed the connection)
[01:43:37] *** Quits: ystael (~ystael@user/ystael) (Ping timeout: 268 seconds)
[01:44:02] *** Quits: wombat875 (~neilfulwi@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[01:45:00] *** Joins: wombat875 (~neilfulwi@pool-72-89-24-154.nycmny.fios.verizon.net)
[01:45:01] *** Joins: ystael (~ystael@user/ystael)
[01:47:17] *** Quits: ystael (~ystael@user/ystael) (Read error: Connection reset by peer)
[01:47:28] *** Joins: ystael (~ystael@user/ystael)
[01:50:33] *** Joins: ksqsf (~user@134.209.106.31)
[01:53:30] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[01:54:01] <d34df00d> Is there anything in quickcheck that'll give me a random partition of a list?
[01:54:16] <d34df00d> (that is, a list of sublists such that their concatenation is equal to the original list)
[01:55:17] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[01:57:38] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[01:57:39] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Ping timeout: 256 seconds)
[01:57:42] <d34df00d> Ok, I think it's a three-liner and not worth a library.
[01:58:32] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[01:58:39] <hpc> it's worth a library if you write javascript^W^Wbelieve in yourself :D
[01:58:45] <Rembane> d34df00d: How did you solve it? :)
[01:59:42] <d34df00d> Rembane: for an empty or singleton list, return the list containing of that list. Otherwise, pick a number between (1; length xs), `take` that many off the list, recur on the `drop`, append the result of the `take` to the recursive call result.
[01:59:59] <d34df00d> Not proven to give statistically meaningful results, but OK for my purposes.
[02:00:09] <monochrom> A library would need to parametrize a lot of things, e.g., the distribution of how many splittings, the distribution of each actual splitting point, etc etc...
[02:00:55] <Rembane> d34df00d: Nice solution! You can use splitAt if you want to have take and drop in the same function.
[02:01:13] <d34df00d> Yep, that's in fact what I'm doing :]
[02:01:16] <hpc> i wonder how many quick checks haven't been written because writing that partitioning code yourself is too annoying
[02:01:40] <d34df00d> splitAt is nice and handy!
[02:01:48] <Rembane> d34df00d: Sweet! :) You can also use partitionM and feed it a Bool generator, but I don't know if it's worth that extra library.
[02:01:57] <Rembane> hpc: Seven! At least! 
[02:02:07] <d34df00d> Rembane: that'll mess up the ordering of the elements, I think?
[02:02:09] *** Joins: ksqsf (~user@134.209.106.31)
[02:02:23] <hpc> maybe even eight!
[02:02:33] <monochrom> Hrm, what does partitionM do again?
[02:02:38] <Rembane> d34df00d: Yup, I totally missed that you wanted the ordering to be the same. 
[02:03:03] <Rembane> monochrom: partition but with monads! https://hackage.haskell.org/package/extra-1.7.10/docs/Control-Monad-Extra.html#v:partitionM
[02:03:11] *** Quits: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[02:03:38] <monochrom> Thanks.
[02:04:22] <Rembane> np! 
[02:07:03] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[02:09:23] *** Joins: ksqsf (~user@134.209.106.31)
[02:11:22] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[02:12:46] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[02:13:14] <Swahili> Q: In ghci, the commands :l or :r, what are these called? Can I say utility commands?
[02:13:26] <Swahili> or is there a name for it?
[02:14:00] *** Joins: Sindai (~Sindai@2a01cb0583e8cd008d228a3c88136061.ipv6.abo.wanadoo.fr)
[02:14:05] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:14:50] <hpc> ghci's :help just calls them commands
[02:14:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:15:05] <hpc> unless you mean those specifically?
[02:15:24] <geekosaur> the user's guide doesn't distinguish either
[02:15:40] <geekosaur> the only commands it treats specially are :set and :seti
[02:18:11] <monochrom> You can safely say "command". If you really like "utility command", I think it is also clear.
[02:19:17] <Swahili> hpc: thank you!
[02:19:36] <Swahili> geekosaur: monochrom thank you!
[02:20:00] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[02:20:47] *** Quits: laslmtdbm^ (~laslmtdbm@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[02:24:36] *** Quits: ubert (~Thunderbi@p200300ecdf09949e91b35a252eb85141.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:27:08] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 250 seconds)
[02:27:15] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[02:28:37] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:28:37] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:28:37] *** Joins: wroathe (~wroathe@user/wroathe)
[02:30:14] *** Joins: notzmv (~zmv@user/notzmv)
[02:34:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[02:34:44] *** Quits: wombat875 (~neilfulwi@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[02:36:02] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Ping timeout: 268 seconds)
[02:36:22] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[02:39:04] *** Joins: alp (~alp@user/alp)
[02:40:37] *** Joins: ksqsf (~user@134.209.106.31)
[02:41:35] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[02:43:37] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:45:39] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[02:47:41] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[02:47:45] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 268 seconds)
[02:49:17] *** Quits: _FlawLess_ (~user@2a01:e0a:a4:7098::10) (Ping timeout: 240 seconds)
[02:56:27] *** Quits: unyu (~pyon@user/pyon) (Quit: Reboot.)
[02:57:43] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[02:58:48] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:00:43] *** Joins: shapr (~user@2601:7c0:c37c:46d0:9d97:8334:355a:b331)
[03:02:51] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[03:03:57] *** Quits: cosimone (~user@93-47-230-83.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[03:06:07] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[03:06:47] *** Joins: ksqsf (~user@134.209.106.31)
[03:10:08] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[03:11:32] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[03:13:51] *** Joins: laslmtduuuk^ (~laslmtduu@wsip-98-188-242-61.mc.at.cox.net)
[03:14:21] *** Quits: max22- (~maxime@2a01cb0883359800e30a3abeb76df7a4.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:14:56] *** Quits: Zugul (~Zugul@52.173.255.131) (Remote host closed the connection)
[03:15:21] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[03:15:50] *** Quits: newsham (~newsham@2603-800c-2d00-e994-c564-1d76-1f18-c3ec.res6.spectrum.com) (Quit: Client closed)
[03:17:47] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:edf9:3833:cff9:92b3) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:18:15] *** Quits: mmhat (~mmh@55d4d6e9.access.ecotel.net) (Quit: WeeChat 3.4)
[03:19:49] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 256 seconds)
[03:23:39] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[03:24:13] *** Joins: ksqsf (~user@134.209.106.31)
[03:27:19] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:31:59] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[03:34:11] *** Quits: shapr (~user@2601:7c0:c37c:46d0:9d97:8334:355a:b331) (Remote host closed the connection)
[03:34:24] *** Joins: shapr (~user@2601:7c0:c37c:46d0:9d97:8334:355a:b331)
[03:35:14] *** Quits: Sindai (~Sindai@2a01cb0583e8cd008d228a3c88136061.ipv6.abo.wanadoo.fr) (Quit: Client closed)
[03:36:03] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Read error: Connection reset by peer)
[03:36:20] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[03:36:28] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 250 seconds)
[03:37:02] *** Quits: jkaye (~jkaye@2601:281:200:1958:2b64:9a7d:6899:8349) (Ping timeout: 240 seconds)
[03:37:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[03:37:16] <qhong> Q: given (Typeable a, Typeable b) in a function signature, how can I call a function requiring a->b to be Typeable in its body?
[03:37:19] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:38:02] <EvanR> well there is a support function in Data.Dynamic called dynApply :: Dynamic -> Dynamic -> Maybe Dynamic
[03:38:09] <EvanR> Dynamic is basically a wrapped Typeable
[03:39:25] <jackdk> I don't understand the question, I'm sorry
[03:39:33] <EvanR> actually me neither sorry
[03:40:28] <Axman6> yeah, qhong can you give an example of what's not working?
[03:40:56] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[03:41:24] <qhong> so I have a library function with type f :: (Typeable a => Bool -> IO (Every a))
[03:41:54] <qhong> I want to use it as (f True :: IO (Every (a -> b)))
[03:42:23] <qhong> I declared type variable a and b to be Typeable, but GHC don't buy that a->b is Typeable
[03:42:47] <Axman6> You probably also need a Typeable (a -> b) constraint?
[03:42:48] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[03:42:49] <jackdk> what is Every?
[03:43:46] <qhong> jackdk: it's just a newtype alias, prob not relevant
[03:44:04] <qhong> Axman6: Let me try. Seems that need to turn on some extension
[03:44:29] <Axman6> I just follow whatever advice GHC gives me and turn on extensions until it stops complaining >_>
[03:44:53] <jackdk> probably FlexibleContexts at a guess
[03:45:20] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[03:45:31] <EvanR> {-# LANGUAGE WhateverYouWantDamn! #-}
[03:45:31] <Axman6> with that constraint you might only need Typeable (a -> b) and can leave out the other two
[03:45:39] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[03:45:49] <qhong> jackdk: Yes!
[03:45:50] <Axman6> EvanR: It's spelled {-# LANGUAGE DeferredTypeErrors #-}
[03:46:20] <EvanR> no that's to stop the programmer from complaining
[03:46:21] <qhong> Axman6: weird, it still says "Could not deduce (Typeable a1)"
[03:46:31] <Axman6> huh, well add it back then :)
[03:46:32] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[03:46:39] <geekosaur> that sounds like a different problem
[03:46:56] <Axman6> I would've thought that (Typeable a, Typeable b) => Typeable (a -> b) was a thing
[03:47:01] <jackdk> @where paste -- any chance you could share some code?
[03:47:01] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[03:47:07] <geekosaur> usually means you have either missed some connection between types, or you tried to reuse a type from the function signature
[03:47:17] *** Quits: shapr (~user@2601:7c0:c37c:46d0:9d97:8334:355a:b331) (Remote host closed the connection)
[03:47:37] <geekosaur> (the types in the signature do *not* scope over the function)
[03:47:39] <EvanR> Axman6, might overlap, since function types (of some sort) is already Typeable
[03:48:17] <qhong> geekosaur: Ah. so I can't use type variables in the type signature of a function?
[03:49:03] <geekosaur> yiou can use them there, yyou just can't reference them in the body by default
[03:49:25] *** Quits: jgeerds (~jgeerds@55d4090e.access.ecotel.net) (Ping timeout: 268 seconds)
[03:49:32] <geekosaur> you need the ScopedTypeVariables extension *and* "declare" a;; the type variables with an explicit "forall"
[03:49:46] <qhong> geekosaur: I see. Thanks!
[03:49:52] <geekosaur> I agree with jackdk, please show code
[03:50:40] *** Joins: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d)
[03:50:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:51:22] <qhong> geekosaur: it's working now after added forall. thanks a lot!
[03:51:34] *** Joins: cyphase (~cyphase@user/cyphase)
[03:51:48] <Axman6> I got bitten by that in a job interview (for the job I'm doing now, so not such a big deal =)
[03:53:05] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[03:53:07] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Ping timeout: 268 seconds)
[03:55:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[03:55:27] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[03:56:40] <EvanR> the ScopeTypeVariables "ritual" should be in the FAQ
[03:56:54] <EvanR> Scoped
[03:57:03] <EvanR> also there should be an FAQ
[03:57:10] *** Quits: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d) (Remote host closed the connection)
[03:57:23] *** Joins: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d)
[03:57:30] <Axman6> 360NoScopeTypeVaariables
[03:57:43] <jackdk> Vaariables?
[03:57:47] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[03:58:13] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:58:13] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:58:13] *** Joins: wroathe (~wroathe@user/wroathe)
[03:59:05] *** Quits: laslmtduuuk^ (~laslmtduu@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[03:59:14] <Axman6> like normal variables but even more 1337
[03:59:50] <Axman6> On a completely unrelated note, I found out the other day that PPC has both sub-normal and super-normal floating point numbers
[04:03:09] <EvanR> ah, super-normals...
[04:04:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:04:14] <EvanR> I'm starting to realize why I never understood the extreme ends of floating point
[04:04:36] <Henson> is there a way I can get Haskell to redo a computation it's already done?  Say I'm benchmarking something and want to use the same inputs over and over again 1 million times just to see how long it takes.  I'm under the impression that Haskell will not evaluate a function with the exact same arguments twice, right?  Or is that not correct?
[04:04:54] <EvanR> compute it in a function that takes a ()
[04:04:59] <EvanR> scheme style
[04:05:01] <Axman6> trying to figure out what they are, came across this code - the definition of fastfloor is making me cry: https://opensource.apple.com/source/Libm/Libm-315/Source/PowerPC/fpmacros.c.auto.html
[04:05:31] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[04:05:32] <Henson> EvanR: can you elaborate on that or give me a simple example?  I'm not sure I understand.
[04:05:34] <Axman6> Henson: you've just described exactly what criterion will do for you, but also give you pretty reports
[04:05:36] <EvanR> haskell will evaluate a function with the exact same arguments twice, unless you saved the result to some variable and use that
[04:05:50] <EvanR> or optimizations happen
[04:05:56] <Axman6> @hackage criterion
[04:05:56] <lambdabot> https://hackage.haskell.org/package/criterion
[04:06:04] * Henson loads
[04:06:20] <EvanR> let f () = 2^1000 :: Integer in (f (), f ())
[04:06:36] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[04:06:37] <ephemient> Axman6, https://en.wikipedia.org/wiki/Long_double "On some PowerPC systems, long double is implemented as a double-double arithmetic, where a long double value is regarded as the exact sum of two double-precision values" TIL, that's weird and I had no idea
[04:07:18] <Axman6> huh, interesting, that's just compensated arithmetic - see edwardk's compensated package
[04:08:08] <Axman6> also, I think I've realised why the alignment is so weird in that fpmacros file above - it's aligned to show which FP units should be running in parallel on the CPU
[04:08:13] <Axman6> (a guess)
[04:08:17] <EvanR> my example may not work because of Common Subexpression Elimination
[04:08:52] <EvanR> but you can try things to get that optimization to fail, anyway, a test suite is probably better
[04:08:59] <Axman6> does GHC actually do CSE? I thought it didn't because it can change the laziness of functions considerably
[04:09:13] <EvanR> yeah it does sometimes!
[04:09:22] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[04:10:00] <monochrom> I once saw it happen to a very simple toy example.
[04:10:08] <ephemient> it's not clear to me from the wiki whether that's just a software thing or if double-double is in ppc hardware
[04:11:03] <monochrom> But usually it is very easy to discourage GHC from doing CSE.
[04:11:47] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[04:13:45] <monochrom> BTW fpmacros.c contains misalignments too, look at where it uses tabs. :)
[04:14:36] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:14:36] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:14:47] <Axman6> yeah it's definitely kinda gross
[04:15:05] <Axman6> Apple: We'll do open source, but we won't like it, and we'll make your eyes bleed
[04:15:11] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[04:17:19] <ephemient> bad code indentation was present in Apple's goto fail; too
[04:18:43] <Axman6> you know you're having fun when you -funroll-all-loops
[04:20:51] *** Quits: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d) (Remote host closed the connection)
[04:21:05] *** Joins: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d)
[04:23:43] *** Joins: unyu (~pyon@user/pyon)
[04:24:04] *** Quits: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d) (Remote host closed the connection)
[04:24:17] *** Joins: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d)
[04:24:24] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[04:24:56] <Henson> Axman6: thanks for the pointer to Criterion
[04:25:41] <Axman6> if you use it, getting the output as HTML is very useful, definitely easier to read than the command line output
[04:28:16] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[04:29:44] <Henson> EvanR: so a function that takes an () will get computed no matter how many times you call it, unless you save the output?  Is there a way, in pure code, that I can get something to be evaluated many times even though the output isn't important.  If I were to use a map or a fold, the results would somehow have to be used, otherwise the code would never be called.  Would I use "evaluate" in IO?
[04:30:12] <EvanR> you foldl seq over the results
[04:30:25] <EvanR> and evaluate the result somehow, maybe with evaluate in IO
[04:31:14] <EvanR> > foldl seq () [(),(),(),(),()] 
[04:31:16] <lambdabot>  ()
[04:31:23] <EvanR> > foldl seq () [(),(),(),error "bomb",()] 
[04:31:25] <lambdabot>  *Exception: bomb
[04:31:42] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:32:32] <EvanR> > foldl seq () [(),(),let expensive = last [1..10000000] in expensive,(),()] 
[04:32:33] <lambdabot>  error:
[04:32:33] <lambdabot>      â€¢ No instance for (Num ()) arising from a use of â€˜expensiveâ€™
[04:32:33] <lambdabot>      â€¢ In the expression: expensive
[04:32:56] *** Joins: califax (~califax@user/califx)
[04:32:57] <EvanR> > foldl seq 0 [1,1,let expensive = last [1..10000000] in expensive,1,1] 
[04:32:59] <lambdabot>  1
[04:33:15] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[04:33:15] <EvanR> that was surprisingly inexpensive
[04:33:28] <Henson> haha
[04:33:50] <EvanR> > foldl seq 0 [1,1,let expensive = last [1..10000000000] in expensive,1,1] 
[04:33:56] <lambdabot>  mueval-core: Time limit exceeded
[04:33:59] <EvanR> k
[04:35:21] <EvanR> and you probably want foldl' if it's a long list
[04:36:02] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:36:50] <Henson> EvanR: so like foldl' seq 0 $ replicate numIterations functionToTest
[04:36:56] <albet70> can liftIO lift a series IO actions? liftIO $ do { ... }?
[04:37:03] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[04:37:19] <EvanR> > foldl' seq 0 []
[04:37:21] <Henson> EvanR: maybe with an "evaluate $" in front of everything?
[04:37:21] <lambdabot>  0
[04:37:34] <monochrom> albet70: Yes.
[04:37:42] <EvanR> > foldl' seq 0 (replicate 1000 1)
[04:37:44] <lambdabot>  1
[04:37:44] <albet70> ok
[04:37:48] <EvanR> Henson, sounds right
[04:38:11] <EvanR> if the results are all numbers
[04:38:27] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[04:38:34] <EvanR> if they are non-flat data, seq might not be a good indicator of "cost"
[04:38:53] <Henson> EvanR: right, if the results were all tuples of numbers, then the seq wouldn't work properly, it would only evaluate to (_,_) and not evaluate the contents, right?
[04:39:00] <EvanR> right
[04:39:12] <monochrom> IIRC criterion has a function for re-computing a thing n times.
[04:39:40] <monochrom> If this is also the nth time you hear "criterion", well, let this be the (n+1)th time.
[04:39:41] <Henson> EvanR: so I'd just have to wrap it in a function that would add the tuple contents together into a single number.  Or would that not be sufficient?
[04:39:49] <monochrom> Let this be an omen.
[04:40:02] <EvanR> a strict tuple would solve it
[04:40:18] <Henson> monochrom: I've already used Criterion to test my simple example and will use it tomorrow on my more complex production code
[04:40:19] <EvanR> data SP a b = SP !a !b
[04:40:21] *** Joins: waleee-cl (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[04:40:54] <EvanR> again assuming a and b are numbers or flat-ass values
[04:41:03] <monochrom> Also consider the deepseq library (comes with GHC).
[04:41:30] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:42:40] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:44:04] <Henson> monochrom: c_wraith said earlier than deepseq is more of a debugging tool, and probably wouldn't show up in production code.  Is it something that some people use in their libraries, or should it just be used for testing?
[04:44:52] <EvanR> maybe it's useful for stress testing, but I'm having a hard time seeing what else is tests xD
[04:45:27] <EvanR> performance testing, I'm not sure it makes sense
[04:45:39] <EvanR> not evaluating stuff is faster than deepseqing it, if you don't need it
[04:45:54] <EvanR> *huge memory footprints slowdown gc
[04:46:26] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[04:46:44] <Henson> I think I've got some ideas and tools now to help me probe this.  The Criterion library and EvanR's suggestions on evaluating functions many times will simplify my performance testing.  I've got some webpages on space leak probing to investigate as well.
[04:47:15] <Henson> thanks so much, everyone, for your advice and suggestions.  I'll be back tomorrow with more questions, but hopefully some answers, too :-)
[04:47:30] <monochrom> If you're too lazy to roll your own "data SP a b = SP !a !b" (I know I am) then "rnf mytuple" does the job just as well.
[04:47:36] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:47:46] *** Quits: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d) (Remote host closed the connection)
[04:47:55] <EvanR> ah true
[04:47:59] *** Joins: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d)
[04:48:13] <monochrom> So much for "not used in production".
[04:48:29] <monochrom> And then there is the history of deepseq.
[04:48:43] <jackdk> "space leak" - is that the name of a haskell Q&A platform?
[04:48:47] <monochrom> It used to be part of the parallelization library.
[04:49:25] <EvanR> still, like, "what is the airspeed velocity that I can construct a tuple with values in it" leaves some questions unanswered about how itll be used later, or not used
[04:49:25] <monochrom> By popular demand, there was enough people wanting the rnf feature but didn't want the whole parallelization library because they're using rnf outside parallelization.
[04:49:36] <monochrom> So tell me again how useless it is?
[04:50:06] <dolio> Just because a lot of people use it doesn't mean it's a good idea. :Ã¾
[04:51:19] *** Joins: ksqsf (~user@134.209.106.31)
[04:51:52] <Henson> javascript?
[04:52:48] <EvanR> not used in the production much
[04:56:02] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[04:56:43] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:57:20] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[04:58:52] *** Quits: nek0 (~nek0@nek0.eu) (Quit: The Lounge - https://thelounge.chat)
[05:01:15] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 256 seconds)
[05:02:57] *** Quits: rtsn (~nstr@user/rtsn) (Ping timeout: 256 seconds)
[05:10:06] *** Joins: Guest|38 (~Guest|38@50.38.63.144)
[05:10:32] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[05:10:34] *** Quits: Guest|38 (~Guest|38@50.38.63.144) (Client Quit)
[05:13:40] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[05:14:02] *** Joins: nek0 (~nek0@nek0.eu)
[05:16:54] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[05:17:04] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:18:17] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:1c4:1928:78d1:c799)
[05:21:22] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[05:21:51] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[05:28:06] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[05:30:09] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[05:34:37] *** Joins: califax- (~califax@user/califx)
[05:34:48] *** Quits: waleee-cl (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Remote host closed the connection)
[05:35:13] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[05:35:34] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[05:35:40] *** califax- is now known as califax
[05:39:58] *** Joins: Erutuon (~Erutuon@user/erutuon)
[05:40:50] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[05:41:51] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:1c4:1928:78d1:c799) (Remote host closed the connection)
[05:45:24] *** Joins: ksqsf (~user@134.209.106.31)
[05:45:39] *** Joins: vysn (~vysn@user/vysn)
[05:48:43] *** Joins: Cajun (~Cajun@user/cajun)
[05:50:22] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 250 seconds)
[05:50:57] *** Quits: xff0x (~xff0x@2001:1a81:5209:df00:b3fa:3a32:fd8e:f809) (Ping timeout: 240 seconds)
[05:51:41] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9841-fdb7-086b-ec04.res6.spectrum.com)
[05:53:11] *** Joins: xff0x (~xff0x@2001:1a81:5244:9c00:ed3e:b304:fdc1:f902)
[05:54:09] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[05:55:12] <Cajun> so im running into a problem when i try to avoid the State effect/monad in which i end up requiring constant binds to pass the game state. is there any better solution than this? https://paste.tomsmeding.com/LV3XYPLl
[05:55:34] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:57:04] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[06:01:13] <EvanR> name all the gameprimes the same so they shadow and you don't accidentally use an old one xD
[06:02:46] <EvanR> what the heck is that (>>) = (>>=) trick
[06:04:07] <Cajun> its set up such that using bind will compile (since the game gets passed to the drawN) but i cant use >>= in do notation without the arrow <-, and >> means i dont have to use an arrow, so it looks cleaner. problem being i cant use the normal >>......
[06:04:30] <Cajun> the extension that allows for (>>) = (>>=) is -XRebindableSyntax
[06:04:35] <EvanR> oh
[06:05:36] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:05:39] <Cajun> and the shadowing idea isnt bad, but doesnt solve the constant binding issue. i am not affront to it though
[06:06:35] <Cajun> i could use state in the interpreter for those functions, but i tried that and my code got messy *fast*
[06:06:38] <EvanR> also in a chain of commands that looks like f x y foo >>= \foo' -> g z w foo' >>= \foo'' -> ...
[06:06:57] <EvanR> that's f x y >=> g z w >=> ...
[06:07:18] <EvanR> or something
[06:07:26] <Cajun> well preferably none of the >>, >>=, >=>, or their ilk appear in the code, as do notation makes it cleaner
[06:08:05] <Cajun> s/appear/do not appear
[06:08:28] <Cajun> (wait dont change that, reading is hard)
[06:08:58] *** Quits: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d) (Remote host closed the connection)
[06:09:12] *** Joins: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d)
[06:12:51] <dsal> Well, if >> doesn't work for you and you don't want to keep naming the thing, then it sounds like do notation is making it less clean by your requirements.
[06:12:51] <Cajun> EvanR: thats >>= in that instance. more specifically, `f x y foo >>= g z w` is the same as `f x y foo >>= \foo' -> g z w foo'`
[06:13:43] <EvanR> I doubtted >=> would work
[06:13:49] <EvanR> never helped me none
[06:18:50] *** Joins: mbuf (~Shakthi@110.225.233.59)
[06:20:19] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[06:20:39] <EvanR> yeah I dunno how clear do notation is for someone who didn't write it 30 minutes ago, unless it's a very straightforward monad
[06:21:07] <dsal> I always find >=> weird -- I am confused by what it is or I need it and it's obvious.
[06:21:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:21:42] <Cajun> monadic function composition
[06:22:03] <EvanR> >=> and <=< feel like we left purely functional land and were composing functions that have side effects
[06:22:15] <EvanR> which... I never did
[06:22:28] <EvanR> applying functions with side effects is bad enough
[06:22:58] *** Joins: zmt01 (~zmt00@user/zmt00)
[06:23:35] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[06:24:16] *** Joins: akurilin_ (uid322841@id-322841.ilkley.irccloud.com)
[06:24:22] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[06:25:02] *** Quits: zmt01 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[06:26:16] *** Joins: zmt01 (~zmt00@user/zmt00)
[06:26:20] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[06:28:31] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Ping timeout: 268 seconds)
[06:30:17] <Cajun> i might try making a quasi quoter for it, but thatll be done later *shrug*
[06:31:44] *** Joins: ksqsf (~user@134.209.106.31)
[06:34:08] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 250 seconds)
[06:36:44] *** Joins: amk (~amk@109.255.169.126)
[06:37:17] <Axman6> Hmm, just had a possible terrible idea - when processing data which comes in as serialised binary, we usually parse it into a Haskell type with all the relevant fields, which can increase the size of the data quite a lot. Instead, we could read the data, parser it, but then use data MyType = MyType_ !ByteArray#; and provide pattern synonyms for the parsed type. Anyone know of this being done?
[06:37:53] <Axman6> (ByteArray# being somewhat arbitrary, it could be any representation of bytes with a length)
[06:38:26] <c_wraith> I'm not familiar with that exact technique, but I've certainly seen libraries that just allocate a thunk and only parse the inner elements if the thunk is demanded
[06:39:02] <c_wraith> which works very well on length-prefixed encodings.  Still works on other encodings, but it takes a little more effort.
[06:39:03] <EvanR> similar to javascript typed arrays
[06:39:57] *** Quits: raym (~raym@user/raym) (Remote host closed the connection)
[06:40:20] <EvanR> Axman6, so compact region, but skip the compacting part because it's already compacted xD
[06:40:44] <Axman6> possibly* yeah, sort of
[06:41:25] <EvanR> how complex is your data, just some value backed by bytes, or does it represent nested levels of stuff
[06:41:35] <Axman6> IIRC this is how capt'n proto or... one of those other serialisation libraries works, which aim to keep the in memory representation the same as the on the wire one
[06:43:29] *** Joins: raym (~raym@user/raym)
[06:45:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:47:21] <EvanR> an ADT programming interface on top of some big buffer of bytes would be cool
[06:48:01] <Axman6> on a somewhat related note, I wish we had the binary pattern matching syntax that Erlang has
[06:48:15] <EvanR> pattern matching would look into the buffer. Construction on the other hand
[06:51:16] <c_wraith> There is a big question of whether you do a check to see that the data parses correctly up-front
[06:51:28] <c_wraith> You probably *should*
[06:51:48] <c_wraith> unless you're able to trust the data, for some reason.  (It was signed by another instance of the same program, for instance)
[06:52:13] <Axman6> yeah, the only way to create them would be to parse them
[06:52:33] <c_wraith> not in length-prefixed binary data.
[06:52:43] <c_wraith> If you could trust it, you wouldn't even need to parse it
[06:53:55] <Axman6> sure - my question is mostly about the interface for working with the data, using pattern synonyms over some bytes
[06:54:35] <c_wraith> I think it has some value.  The real trick would be how to make it into a library
[06:54:38] <Axman6> storing things in memory encoded using CBOR :thinking-face:
[06:55:09] <c_wraith> there's no way to abstract over patterns :(
[06:55:55] <c_wraith> (you can abstract over encoding them as an algebra, but that's pretty far away from your suggestion in terms of usability)
[06:59:21] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[06:59:40] *** Joins: rtsn (~nstr@h-155-4-221-229.NA.cust.bahnhof.se)
[07:00:02] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[07:04:47] *** Quits: td_ (~td@muedsl-82-207-238-179.citykom.de) (Ping timeout: 256 seconds)
[07:05:20] <Axman6> not sure what you mean
[07:05:51] <Axman6> Also, I'm only considering the product types
[07:06:16] *** Joins: td_ (~td@muedsl-82-207-238-121.citykom.de)
[07:06:17] <EvanR> 'structs' xD
[07:06:42] <EvanR> that's what you should call the lib
[07:06:47] <Axman6> I'll give you one guess who wrote https://hackage.haskell.org/package/structs
[07:06:54] <EvanR> dangit
[07:06:56] <c_wraith> I don't need a guess, I know.
[07:07:14] <c_wraith> I feel like that library was never quite finished, somehow
[07:09:00] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[07:10:11] <c_wraith> anyway - my point was that this is not the sort of thing that easily fits into a library.  The kinds of library designs currently used for parsers tend to be very Applicative-centric, and it's hard to get the guarantees this needs out of Applicative.
[07:11:46] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[07:12:14] <Axman6> yeah it would need to be monadic
[07:12:38] <Axman6> assuming there are length prefixed values contained within
[07:13:24] <c_wraith> I don't think you can get the guarantees you need from that, either.
[07:13:34] <c_wraith> the problem is that they allow arbitrary functions to be embedded
[07:13:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[07:13:50] <c_wraith> So that people can and will happily parse things early
[07:14:19] <c_wraith> You need a more restrictive interface.
[07:14:40] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:15:27] <c_wraith> I guess there's QualifiedDo now.  That might solve a lot of issues.
[07:17:02] *** Quits: zmt00 (~zmt00@user/zmt00) (Client Quit)
[07:18:31] *** Quits: nunggu (~q@user/nunggu) (Remote host closed the connection)
[07:19:36] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:20:05] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[07:20:35] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[07:26:01] *** Joins: ksqsf (~user@134.209.106.31)
[07:28:11] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:28:11] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:28:11] *** finn_elija is now known as FinnElija
[07:30:32] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[07:31:29] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[07:32:23] *** Joins: russruss (~russruss@my.russellmcc.com)
[07:33:25] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[07:33:32] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[07:33:44] *** Joins: razetime (~quassel@49.207.203.87)
[07:37:15] <Axman6> I think if this were to be a library, it would be a TH based library, which would provide a quasiquoter which is passed a data declaration and it would produce the type and pattern synonyms
[07:39:42] <Axman6> so if you pass it data MyType = MyType { w8 :: Word8; i64 :: Int64; bs :: ByteString {- maybe not easy to handle? -}; } you'd get back data MyType = MyType_ !ByteArray#; pattern MyType w8 i64 bs = ... but I'm not sure what other problems you'd run into
[07:40:41] <Axman6> I'm imagining it working like a C struct though, where fields are indexable by offset ot offset plus the size of dynamically sized members appearing before
[07:42:28] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[07:43:30] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[07:43:32] *** Joins: ksqsf (~user@134.209.106.31)
[07:48:25] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[07:49:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[07:50:15] *** Joins: ksqsf (~user@134.209.106.31)
[07:55:09] *** hololeap_ is now known as hololeap
[08:01:30] *** Joins: zmt01 (~zmt00@user/zmt00)
[08:01:47] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[08:02:20] *** Quits: jenna8912 (~jenna@c-107-5-104-51.hsd1.mi.comcast.net) (Quit: Reconnecting)
[08:02:32] *** Joins: jenna8912 (~jenna@c-107-5-104-51.hsd1.mi.comcast.net)
[08:03:46] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:04:42] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[08:05:20] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 268 seconds)
[08:06:17] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[08:06:54] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[08:08:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:10:38] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[08:13:13] *** Joins: Guest48 (~Guest48@133.8.220.53)
[08:14:51] *** Joins: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[08:19:46] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[08:21:32] *** Quits: pavonia (~user@user/siracusa) (Ping timeout: 240 seconds)
[08:22:44] *** Guest48 is now known as faustind
[08:29:20] *** Joins: pavonia (~user@user/siracusa)
[08:29:22] *** Quits: pfurla (~pfurla@2804:d41:4331:4800:31ef:1aaf:1e7:47d) (Quit: gone to sleep. ZZZzzzâ€¦)
[08:37:43] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[08:38:53] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:39:46] <EvanR> I see there is no Stream type in base? Is there a conventional :ctor operator name for it
[08:39:50] <EvanR> :> or such
[08:40:10] *** Quits: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d) (Remote host closed the connection)
[08:40:24] *** Joins: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d)
[08:40:50] <faustind> Hi. My question is about the simplifier of the compiler. Specifically
[08:40:50] <faustind> about the interaction of inlining and rewrite rules.
[08:40:50] <faustind> I know that we can control the interaction of inlining and rules with phase numbers.
[08:40:51] <faustind> But I am curious, in the same run of the simplifier,
[08:40:51] <faustind> between inlining and rules application which one takes place first?
[08:40:52] <faustind> I read that inlining is relied upon to expose more opportunities
[08:40:52] <faustind> for optimization. So I think inlining happens first. But I am not sure.
[08:42:20] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:45:19] *** Quits: Erutuon (~Erutuon@user/erutuon) (Quit: WeeChat 2.8)
[08:46:29] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:47:19] <Axman6> I don't know the answer but GHC has quite a lot of information on its wiki, so I would start there
[08:49:27] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 256 seconds)
[08:50:45] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[08:51:51] *** Joins: amk (~amk@109.255.169.126)
[08:52:41] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[08:53:01] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: quit)
[08:53:25] *** Quits: xsperry (~xs@user/xsperry) ()
[08:54:03] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[08:55:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[08:57:05] <sclv> EvanR: in a lazy language, streams can often be just lazy lists
[08:57:39] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[08:57:52] <Axman6> @hoogle (:>)
[08:57:52] <lambdabot> Data.Sequence (:>) :: Seq a -> a -> ViewR a
[08:57:52] <lambdabot> Data.Sequence.Internal (:>) :: Seq a -> a -> ViewR a
[08:57:52] <lambdabot> Control.Lens.Cons pattern (:>) :: forall a b . Snoc a a b b => () => a -> b -> a
[08:57:54] <sclv> parameterized streams are also often done as cofree comonads like so https://hackage.haskell.org/package/free-5.1.7/docs/Control-Comonad-Cofree.html
[08:59:08] <EvanR> I mean specifically this data type
[08:59:17] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:59:23] <EvanR> data Stream a = a :? Stream a deriving everything
[08:59:43] <EvanR> a list that can't end
[09:00:09] <EvanR> i can't remember if there is a conventional ctor name
[09:00:35] <Axman6> :> feels familiar for that...
[09:01:12] <EvanR> yeah I knew it conflicted with Sequence
[09:01:37] <EvanR> apparently something in Lens
[09:01:49] <Axman6> it makes me uneasy that it should probably be a Foldable, but things like length will never work
[09:02:21] <EvanR> doctor, it hurts when I try to length an infinite structure!
[09:02:55] <EvanR> actually
[09:03:05] <EvanR> the length of a stream can be expressed as a lazy natural
[09:03:17] <EvanR> so "never work" for some value of work
[09:03:44] <EvanR> it could usefully be compared to finite lazy nats
[09:03:56] *** Joins: xsperry (~xs@user/xsperry)
[09:04:03] <Axman6> "Hopw long is that stream?" "At least this long.... S (S (S (S (S ..."
[09:04:32] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 268 seconds)
[09:05:08] <EvanR> exactly!
[09:05:57] <monochrom> Maybe is an instance of Alternative, and some (Just 0) hurts.  I think it's OK for length (your stream) to hurt, too. :)
[09:06:51] <EvanR> I don't particularly understand Alternative
[09:07:30] <Axman6> Alternative: or do you?
[09:07:33] <Axman6> ly*
[09:07:34] <Axman6> damn
[09:08:47] <EvanR> well, STM is an instance of Alternative, and I get that
[09:09:11] <EvanR> is some broken there too
[09:09:18] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[09:09:27] <Axman6> I feel both Maybe and list's instances make sense
[09:10:25] *** Quits: ishutin (~ishutin@91-83-11-240.pool.digikabel.hu) (Ping timeout: 256 seconds)
[09:10:37] *** Quits: shapr (~user@2601:7c0:c37c:46d0:a68f:6e87:2453:573d) (Ping timeout: 240 seconds)
[09:12:02] *** Joins: ishutin (~ishutin@84-236-1-73.pool.digikabel.hu)
[09:15:32] *** Joins: _ht (~quassel@82-168-34-160.fixed.kpn.net)
[09:22:42] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::55f8) (Ping timeout: 250 seconds)
[09:25:18] *** Quits: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[09:25:38] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[09:28:44] *** Joins: namkeleser (~namkelese@124.188.192.57)
[09:29:08] *** Quits: zaquest (~notzaques@5.130.79.72) (Quit: Leaving)
[09:36:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[09:39:01] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:a11d:216c:4ca3:2c86)
[09:39:32] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[09:40:12] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:40:47] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[09:41:42] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:44:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[09:46:53] <jackdk> I would've expected `some (Just 0)` to be an infinite list, not an infinite loop. What am I doing wrong?
[09:47:03] <jackdk> (in my brain, I mean)
[09:47:18] *** Joins: rusrushal13 (~rusrushal@2401:4900:5d14:5eb2:ab40:4205:c981:41c3)
[09:47:30] <hololeap> I think it tries to keep going until it hits a Nothing, which never happens
[09:48:15] <dsal> Hmm...  I think I also misunderstand some that way.  I expect it to be lazy and start giving me stuff.
[09:48:19] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 268 seconds)
[09:48:56] *** Quits: xff0x (~xff0x@2001:1a81:5244:9c00:ed3e:b304:fdc1:f902) (Ping timeout: 268 seconds)
[09:49:25] <hololeap> @src some
[09:49:25] <lambdabot> some v = some_v
[09:49:25] <lambdabot>   where many_v = some_v <|> pure []
[09:49:25] <lambdabot>         some_v = (:) <$> v <*> many_v
[09:50:21] *** Joins: xff0x (~xff0x@2001:1a81:525d:1e00:f1de:1cfe:e8a8:d6c0)
[09:51:50] <hololeap> % let some_v = (:) <$> Just 0 <*> some_v
[09:51:51] <yahb> hololeap: 
[09:52:02] <hololeap> % some_v
[09:52:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:52:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:52:03] *** Joins: wroathe (~wroathe@user/wroathe)
[09:52:07] <yahb> hololeap: [Timed out]
[09:53:31] <jackdk> right, but I need to case on the tail to know whether to return Just at all
[09:53:51] <jackdk> and because there's no tail, we spin forever
[09:54:05] <hololeap> since some_v always succeeds, it never gets to the second part of the <|> inside many_v
[09:54:31] <hololeap> I'm also trying to understand it more fully :)
[09:56:01] <hololeap> so it ends up being equivalent to:    fix $ liftA2 (:) (Just 0)
[09:56:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:59:02] *** Joins: chomwitt (~chomwitt@2a02:587:dc0b:200:12c3:7bff:fe6d:d374)
[10:01:25] *** Quits: rusrushal13 (~rusrushal@2401:4900:5d14:5eb2:ab40:4205:c981:41c3) (Ping timeout: 256 seconds)
[10:01:50] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[10:02:09] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:04:32] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:05:25] *** Joins: michalz (~michalz@185.246.204.101)
[10:05:48] *** Joins: ksqsf (~user@134.209.106.31)
[10:06:39] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:07:59] <hololeap> % foo :: StateT Int Maybe () ; foo = get >>= bool (modify (+1)) empty . (>=5)
[10:08:00] <yahb> hololeap: 
[10:08:10] <hololeap> % evalStateT (some foo) 0
[10:08:10] <yahb> hololeap: Just [(),(),(),(),()]
[10:11:13] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[10:11:24] <hololeap> % fix $ liftA2 (:) (Identity 0)
[10:11:29] <yahb> hololeap: Identity [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
[10:12:07] <hololeap> so it might have something to do with Maybe being more strict than Identity?
[10:12:22] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 268 seconds)
[10:13:16] <int-e> > liftA2 (:) (Just 0) $ liftA2 (:) (Just 0) $ liftA2 (:) (Just 0) $ Nothing
[10:13:17] <lambdabot>  Nothing
[10:13:48] <EvanR> at first I was boggling at how Maybe could be *more* strict than Identity, but I guess we're talking about Alternative instance
[10:13:53] *** Quits: vglfr (~vglfr@46.96.165.111) (Ping timeout: 256 seconds)
[10:14:11] <EvanR> @src Identity
[10:14:11] <lambdabot> newtype Identity a = Identity { runIdentity :: a }
[10:14:42] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:15:01] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 256 seconds)
[10:15:25] <int-e> > liftA2 (:) (pure 0) undefined :: Identity [Int]
[10:15:27] <lambdabot>  Identity [0*Exception: Prelude.undefined
[10:15:32] <int-e> > liftA2 (:) (pure 0) undefined :: Maybe [Int]
[10:15:34] <lambdabot>  *Exception: Prelude.undefined
[10:15:39] <hololeap> I'm pivoting to talking about why in ghci `fix $ liftA2 (:) (Just 0)` hangs but `fix $ liftA2 (:) (Identity 0)` will try to give you an infinite list ... it might explain why `some (Just 0)` also seems to hang
[10:15:55] <int-e> there you have your additional strictness demonstrated with actual bottoms
[10:16:20] <hololeap> right, that makes sense
[10:16:49] <int-e> but the *reason* is that you can't know that a later part of the computation won't be Nothing, which would collapse the result
[10:17:24] <hololeap> I see
[10:17:51] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:18:20] <hololeap> that's a good way to explain it
[10:21:01] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[10:21:47] *** Joins: zaquest (~notzaques@5.130.79.72)
[10:25:16] *** Joins: ksqsf (~user@134.209.106.31)
[10:30:02] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[10:30:02] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 240 seconds)
[10:47:50] *** Joins: kuribas (~user@ptr-25vy0i81lhv78yduvdy.18120a2.ip6.access.telenet.be)
[10:50:53] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[10:55:29] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[10:58:51] *** Joins: deadmarshal (~deadmarsh@95.38.230.192)
[11:01:26] *** Joins: cfricke (~cfricke@user/cfricke)
[11:01:59] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[11:01:59] *** Joins: ksqsf (~user@134.209.106.31)
[11:02:26] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:07:15] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[11:07:21] *** Joins: falafel (~falafel@2603-8000-d800-688c-7d7e-a81e-32e3-0736.res6.spectrum.com)
[11:08:25] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:15:21] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:15:23] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[11:15:39] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:15:41] *** Joins: ksqsf (~user@134.209.106.31)
[11:15:50] <qrpnxz> Maybe kills laziness because you need to finish to know if it's Just or Nothing, Identity doesn't have that problem.
[11:16:02] <qrpnxz> ah my bad, already explained
[11:16:23] *** Joins: notzmv (~zmv@user/notzmv)
[11:16:33] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[11:19:11] *** Joins: fef (~thedawn@user/thedawn)
[11:21:29] *** Quits: deadmarshal (~deadmarsh@95.38.230.192) (Ping timeout: 256 seconds)
[11:23:40] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:24:08] *** Joins: slac13033 (~slack1256@191.126.227.199)
[11:24:43] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[11:25:30] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:26:02] *** Quits: slack1256 (~slack1256@186.11.27.197) (Ping timeout: 240 seconds)
[11:26:04] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:27:56] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[11:31:10] *** Joins: simendsjo (~user@84.211.91.241)
[11:34:30] *** Joins: deadmarshal (~deadmarsh@95.38.230.192)
[11:34:37] *** Quits: falafel (~falafel@2603-8000-d800-688c-7d7e-a81e-32e3-0736.res6.spectrum.com) (Ping timeout: 240 seconds)
[11:35:56] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[11:36:35] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:39:26] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:40:49] *** Joins: fr33domlover (~fr33@5.102.195.159)
[11:45:08] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:50:47] *** Quits: faustind (~Guest48@133.8.220.53) (Ping timeout: 256 seconds)
[11:52:16] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 268 seconds)
[11:54:53] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[11:55:30] *** Joins: chele (~chele@user/chele)
[11:55:48] *** Joins: Major_Biscuit (~MajorBisc@c-001-018-021.client.tudelft.eduvpn.nl)
[11:58:53] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[11:59:40] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[12:00:00] *** Joins: falafel (~falafel@2603-8000-d800-688c-7d7e-a81e-32e3-0736.res6.spectrum.com)
[12:04:20] *** Quits: falafel (~falafel@2603-8000-d800-688c-7d7e-a81e-32e3-0736.res6.spectrum.com) (Ping timeout: 250 seconds)
[12:05:07] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[12:07:49] *** Joins: Erutuon (~Erutuon@user/erutuon)
[12:08:32] *** Quits: deadmarshal (~deadmarsh@95.38.230.192) (Ping timeout: 256 seconds)
[12:15:29] *** Joins: deadmarshal (~deadmarsh@95.38.230.192)
[12:17:02] *** Joins: ubert (~Thunderbi@p200300ecdf099420d5ce6ee7616221b3.dip0.t-ipconnect.de)
[12:18:15] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:20:30] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[12:20:44] *** Joins: mastarija (~mastarija@2a05:4f46:e0e:5000:c96c:6830:df6b:3edb)
[12:23:17] *** Quits: rtsn (~nstr@h-155-4-221-229.NA.cust.bahnhof.se) (Changing host)
[12:23:17] *** Joins: rtsn (~nstr@user/rtsn)
[12:28:36] *** Quits: dut (~dut@user/dut) (Quit: Leaving)
[12:28:37] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[12:30:24] *** Joins: mmhat (~mmh@55d4fa95.access.ecotel.net)
[12:32:17] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:32:37] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:edf9:3833:cff9:92b3)
[12:33:47] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:36:05] *** Joins: alp (~alp@user/alp)
[12:36:46] *** Quits: mastarija (~mastarija@2a05:4f46:e0e:5000:c96c:6830:df6b:3edb) (Quit: Leaving)
[12:37:05] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:38:37] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:39:14] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[12:39:40] *** Joins: ubert1 (~Thunderbi@p200300ecdf0994208629362fe72747a7.dip0.t-ipconnect.de)
[12:39:59] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[12:40:16] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 256 seconds)
[12:41:26] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Client Quit)
[12:41:44] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[12:42:03] *** Joins: antony (~The_viole@203.77.49.232)
[12:42:27] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[12:44:58] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[12:44:59] *** Joins: ardell (~ardell@user/ardell)
[12:45:19] *** Quits: antony (~The_viole@203.77.49.232) (Client Quit)
[12:45:38] *** Joins: antony (~The_viole@203.77.49.232)
[12:45:39] *** Joins: PVPANTHONY (~The_viole@203.77.49.232)
[12:46:07] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:81c9:f67f:1443:f972) (Remote host closed the connection)
[12:46:32] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 268 seconds)
[12:47:16] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[12:47:39] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:49:13] *** Quits: PVPANTHONY (~The_viole@203.77.49.232) (Client Quit)
[12:49:17] *** Quits: antony (~The_viole@203.77.49.232) (Client Quit)
[12:50:22] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[12:51:53] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:52:55] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[12:54:18] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:edf9:3833:cff9:92b3) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:02:05] *** Joins: jgeerds (~jgeerds@55d4090e.access.ecotel.net)
[13:02:34] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 268 seconds)
[13:05:18] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:07:22] *** Quits: namkeleser (~namkelese@124.188.192.57) (Quit: Client closed)
[13:10:32] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[13:14:48] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[13:16:30] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[13:16:42] *** Joins: raym (~raym@user/raym)
[13:16:50] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[13:16:55] *** Quits: slac13033 (~slack1256@191.126.227.199) (Ping timeout: 256 seconds)
[13:17:41] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Client Quit)
[13:17:59] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[13:20:34] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:5d8f:20db:5ddd:bcf4)
[13:21:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:798d:4129:9f07:fe5b) (Ping timeout: 240 seconds)
[13:25:20] *** Quits: phma (phma@2001:5b0:211b:a618:dfa3:a13:fe81:dc84) (Read error: Connection reset by peer)
[13:25:22] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:a11d:216c:4ca3:2c86) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:26:19] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:edf9:3833:cff9:92b3)
[13:26:43] *** Joins: phma (phma@2001:5b0:215d:e318:4fbc:412:b7cd:6bd5)
[13:28:05] *** Joins: vglfr (~vglfr@88.155.46.9)
[13:35:34] *** Joins: Jing (~hedgehog@115.207.51.203)
[13:38:29] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Read error: Connection reset by peer)
[13:39:17] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[13:40:21] *** Joins: rusrushal13 (~rusrushal@2401:4900:5d18:76e4:7b06:d89d:4706:dcce)
[13:42:02] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[13:43:49] *** Joins: raym (~raym@user/raym)
[13:45:51] *** Joins: Guest48 (~Guest48@M014008067225.v4.enabler.ne.jp)
[13:47:08] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b976:af3b:634a:9904)
[13:48:49] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[13:49:08] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:51:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b976:af3b:634a:9904) (Ping timeout: 250 seconds)
[13:51:29] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[13:52:02] *** Quits: jgeerds (~jgeerds@55d4090e.access.ecotel.net) (Ping timeout: 240 seconds)
[13:58:41] *** Quits: razetime (~quassel@49.207.203.87) (Ping timeout: 268 seconds)
[13:58:54] *** Joins: razetime (~quassel@49.207.203.87)
[14:11:52] *** Joins: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[14:12:21] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:13:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:13:38] *** Lord_of_Life_ is now known as Lord_of_Life
[14:17:04] *** Joins: pfurla (~pfurla@2804:d41:4331:4800:31ef:1aaf:1e7:47d)
[14:18:23] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[14:18:24] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:18:32] *** Quits: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 240 seconds)
[14:22:32] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[14:25:59] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[14:26:38] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[14:27:02] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[14:29:31] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 268 seconds)
[14:31:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[14:33:59] *** Quits: rusrushal13 (~rusrushal@2401:4900:5d18:76e4:7b06:d89d:4706:dcce) (Ping timeout: 256 seconds)
[14:34:37] *** Quits: fr33domlover (~fr33@5.102.195.159) (Ping timeout: 240 seconds)
[14:35:29] *** Joins: fr33domlover (~fr33@2.55.33.131)
[14:39:04] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[14:39:57] *** Joins: d0ku (~d0ku@178.43.152.233.ipv4.supernova.orange.pl)
[14:42:05] *** Joins: MiguelNegrao (~MiguelNeg@2001:818:dc71:d100:9e5a:44ff:fe17:1240)
[14:42:24] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:42:28] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 268 seconds)
[14:43:08] <MiguelNegrao> Hi all. What is the best/most popular solution for a generic uncurry function that uncurries for tuples of any length ?
[14:44:03] <MiguelNegrao> I found this one https://hackage.haskell.org/package/tuple-0.3.0.2/docs/Data-Tuple-Curry.html#v:uncurryN
[14:44:42] *** Quits: ubert (~Thunderbi@p200300ecdf099420d5ce6ee7616221b3.dip0.t-ipconnect.de) (Quit: ubert)
[14:44:42] *** ubert1 is now known as ubert
[14:45:52] <MiguelNegrao> I found this issue also ("curry & uncurry family of functions"): https://github.com/haskell-foundation/foundation/issues/223
[14:46:56] <MiguelNegrao> The solution here doesn't seem to be viable as type class instance is needed for the result type: https://ro-che.info/articles/2013-01-29-generic-uncurry
[14:46:59] <sshine> MiguelNegrao, I'd go with lists :D
[14:47:15] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[14:47:39] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4901:95ce:aaba:4aa1)
[14:47:42] <MiguelNegrao> lists, hum... ?
[14:47:52] <MiguelNegrao> How would that work ?
[14:48:14] <sshine> (what I mean is, if you want to perform an operation on a tuple of a variable size, then lists are data structures with a variable size.)
[14:48:31] <MiguelNegrao> basicaly, I need to transform any function of type (a1 -> b, a1 -> a2 -> b, a1 -> a2 -> a3 -> b, etc) into ( a -> b)
[14:48:34] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[14:49:01] <MiguelNegrao> because I need to use that function as arrow (think `arr` combinator) and the input must go in as a tuple
[14:49:41] <MiguelNegrao> The functions I need to turn into arrows, are any function of gi-gtk, so they already exist and I can't change them.
[14:52:02] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4901:95ce:aaba:4aa1) (Ping timeout: 240 seconds)
[14:52:07] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:52:07] <MiguelNegrao> In this case not exactly `arr` but `arrM :: Monad m => (a -> m b) -> MSF m a b` , e.g., from [here](https://hackage.haskell.org/package/dunai-0.8.1/docs/Data-MonadicStreamFunction-Core.html#v:arrM)
[14:53:49] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[15:00:13] *** Joins: vysn (~vysn@user/vysn)
[15:05:54] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 268 seconds)
[15:12:56] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:15:07] *** Joins: faustind (~faustin@240b:12:43e1:7b00:fc04:33:8474:c903)
[15:16:45] *** Quits: Guest48 (~Guest48@M014008067225.v4.enabler.ne.jp) (Quit: Connection closed)
[15:17:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:17:23] <tomsmeding> MiguelNegrao: you can also do this, but type inference breaks quite badly and you probably have to add type annotations everywhere: https://paste.tomsmeding.com/UflC766M
[15:17:50] <tomsmeding> this then works: `uncurryN (\x y z -> x + y + z :: Int) (1::Int, (2::Int, (3::Int, ()))) :: Int`
[15:18:09] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[15:18:34] <tomsmeding> advantage: works for any function arity. disadvantages: everything
[15:21:22] <MiguelNegrao> This approach with Generics looks promising: https://stackoverflow.com/a/28942478
[15:22:32] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:23:10] <tomsmeding> (another disadvantage of my approach: you can't choose how far to uncurry, i.e. the codomain of the uncurried function cannot be a function type)
[15:24:09] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:25:50] *** Quits: pfurla (~pfurla@2804:d41:4331:4800:31ef:1aaf:1e7:47d) (Quit: gone to sleep. ZZZzzzâ€¦)
[15:27:27] <MiguelNegrao> I think I will go with https://hackage.haskell.org/package/tuple-0.3.0.2/docs/Data-Tuple-Curry.html#v:uncurryN
[15:29:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:29:49] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[15:34:53] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[15:38:04] *** Joins: pfurla (~pfurla@2804:d41:4331:4800:31ef:1aaf:1e7:47d)
[15:42:35] *** Joins: simendsjo (~user@2a02:2121:6c0:42f8:d80b:8f5a:9182:35dd)
[15:47:10] *** Quits: bravespear|2 (~Ranhir@157.97.53.139) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[15:47:56] *** Joins: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[15:48:24] *** Quits: deadmarshal (~deadmarsh@95.38.230.192) (Ping timeout: 256 seconds)
[15:49:28] *** Joins: Guest5233 (~Guest52@80-100-97-100.ip.xs4all.nl)
[15:50:44] <qeqeqw1> Hi. I'm reading "learn you a haskell for great good" and the examples of function type declarations don't work. Like this one for example: "factorial :: Integer -> Integer" What is the correct syntax ?
[15:51:33] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[15:51:58] <Guest5233> qeqeqw1 What is the error you're getting?
[15:52:09] <Guest5233> That type signature should work
[15:52:56] <qeqeqw1> I'm getting this : â€¢ No instance for (Show (Integer -> Integer))
[15:52:56] <qeqeqw1>         arising from a use of â€˜printâ€™
[15:52:57] <qeqeqw1>         (maybe you haven't applied a function to enough arguments?)
[15:52:57] <qeqeqw1>     â€¢ In a stmt of an interactive GHCi command: print it
[15:53:01] *** Quits: pfurla (~pfurla@2804:d41:4331:4800:31ef:1aaf:1e7:47d) (Quit: Textual IRC Client: www.textualapp.com)
[15:54:51] <Guest5233> That error is not related to the type signature
[15:55:12] <Guest5233> Are trying to do the following?
[15:55:13] <Guest5233> show factorial
[15:55:35] <qeqeqw1> this is the factorial: "factorial n = product [1..n]"
[15:56:00] <Guest5233> The error is telling you that you're trying to `show` something that has the type `Integer -> Integer`. In other words, you're trying to `show` a _function_, rather than the _result_ of a function
[15:56:56] <Guest5233> (`show` is used by `print`, by the way)
[15:57:16] <qeqeqw1> I understand what you're saying but I do not understand what I am doing wrong
[15:57:40] <AWizzArd> HLS in vs code: how can I turn off formatting when saving a file? I only want to manually mark the area that I want to format. I already tried in my settings.json to do   "haskell.formattingProvider": "none"
[15:58:45] <Guest5233> qeqeqw1 Can you show me your full code?
[15:58:46] *** Quits: Jing (~hedgehog@115.207.51.203) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:59:32] <qeqeqw1> Guest5233, this is the full code : 
[15:59:34] <qeqeqw1> $ ghci
[15:59:34] <qeqeqw1> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
[15:59:34] <qeqeqw1> ghci> factorial n = product [1..n]
[15:59:34] <qeqeqw1> ghci> factorial :: Integer -> Integer
[15:59:34] <qeqeqw1> <interactive>:2:1: error:
[15:59:37] <qeqeqw1>     â€¢ No instance for (Show (Integer -> Integer))
[15:59:39] <qeqeqw1>         arising from a use of â€˜printâ€™
[15:59:41] <qeqeqw1>         (maybe you haven't applied a function to enough arguments?)
[15:59:43] <qeqeqw1>     â€¢ In a stmt of an interactive GHCi command: print it
[15:59:45] <qeqeqw1> ghci>
[16:00:22] <Guest5233> Ah, I see
[16:01:12] <Guest5233> When you want to include a type signature in GHCi, you should wrap your code in `:{` and `:}`
[16:01:28] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[16:01:31] <Guest5233> :{
[16:01:31] <Guest5233> factorial n = product [1..n]
[16:01:32] <Guest5233> factorial :: Integer -> Integer
[16:01:32] <Guest5233> :}
[16:01:33] <Guest5233> factorial 5
[16:01:33] <Guest5233> > 120
[16:01:35] <lambdabot>  120
[16:02:05] *** Joins: jgeerds (~jgeerds@55d4090e.access.ecotel.net)
[16:02:09] <Guest5233> More info here: https://downloads.haskell.org/~ghc/9.0.1/docs/html/users_guide/ghci.html#ghci-cmd-:{
[16:02:58] <qeqeqw1> Guest5233, Yes that worked! Thank you very much!
[16:03:45] <Guest5233> No problem!
[16:04:09] <qeqeqw1> Guest5233, I will read this. First time on #haskell and not disapointed :)
[16:04:59] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:05:24] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:ac4b:acb4:af59:598f)
[16:08:48] *** Joins: cfricke (~cfricke@user/cfricke)
[16:09:16] *** Parts: jakalx (~jakalx@base.jakalx.net) (Disconnected: Replaced by new connection)
[16:09:16] *** Joins: jakalx (~jakalx@base.jakalx.net)
[16:12:41] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[16:13:02] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[16:13:02] *** Joins: Hash_ (~Hash@hashsecurity.org)
[16:13:03] *** Joins: rembo10_ (~rembo10@remulis.com)
[16:13:07] *** Joins: kristjansson_ (sid126207@id-126207.tinside.irccloud.com)
[16:13:28] *** Joins: rubin55_ (sid175221@id-175221.hampstead.irccloud.com)
[16:13:31] *** Joins: EvanR_ (~EvanR@user/evanr)
[16:13:32] *** Joins: vgtw_ (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[16:13:45] *** Joins: the_proffesor (~theproffe@2601:282:847f:8010::85ac)
[16:13:45] *** Quits: the_proffesor (~theproffe@2601:282:847f:8010::85ac) (Changing host)
[16:13:45] *** Joins: the_proffesor (~theproffe@user/theproffesor)
[16:14:10] *** Joins: obfusk_ (~quassel@a82-161-150-56.adsl.xs4all.nl)
[16:14:21] *** Joins: carbolymer_ (~carbolyme@dropacid.net)
[16:14:29] *** Joins: szkl_ (uid110435@uxbridge.irccloud.com)
[16:14:46] *** Joins: caubert_ (~caubert@136.244.111.235)
[16:15:04] *** Joins: aforemny_ (~aforemny@static.248.158.34.188.clients.your-server.de)
[16:15:06] *** Joins: stilgart_ (~Christoph@chezlefab.net)
[16:15:09] *** Joins: mal1 (~mal@ns2.wyrd.be)
[16:15:12] *** Joins: Clint_ (~Clint@user/clint)
[16:15:12] *** Joins: Logio_ (em@kapsi.fi)
[16:15:14] *** Joins: jlamothe_ (~jlamothe@198.251.61.229)
[16:15:16] *** Joins: opqdonut_ (opqdonut@pseudo.fixme.fi)
[16:15:17] *** Joins: cls_ (~cls@chalk.lubutu.com)
[16:15:17] *** Joins: andjjj23_ (~irc@107.170.228.47)
[16:15:19] *** Joins: ddb1 (~ddb@ipv6two.tilde.club)
[16:15:20] *** Joins: hrdl_ (~hrdl@mail.hrdl.eu)
[16:15:21] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[16:15:21] *** Joins: PHO`__ (~pho@akari.cielonegro.org)
[16:15:26] *** Joins: farn_ (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[16:15:26] *** Joins: enicar (~enikar@user/enikar)
[16:15:28] *** Server sets mode: +Cnt 
[16:15:29] *** Joins: kmein_ (~weechat@user/kmein)
[16:15:31] *** Joins: ridcully_ (~ridcully@p57b52a9a.dip0.t-ipconnect.de)
[16:15:36] *** Joins: bravespear|2 (~Ranhir@157.97.53.139)
[16:15:37] *** Joins: w1gz_ (~do@159.89.11.133)
[16:15:44] *** Joins: sabx_ (~sabbas@user/sabbas)
[16:15:51] *** Joins: emf_ (~emf@2620:10d:c090:400::5:2d26)
[16:15:52] *** Joins: noddy_ (~user@user/noddy)
[16:15:55] *** Joins: Megant_ (megant@user/megant)
[16:16:04] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[16:16:05] *** Quits: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953) (Ping timeout: 240 seconds)
[16:16:05] *** Quits: b20n (sid115913@id-115913.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[16:16:05] *** Quits: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: davetapley (sid666@id-666.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: remexre (~remexre@user/remexre) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: tito (tito@tilde.team) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: lieven (~mal@ns2.wyrd.be) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: rtpg (sid443069@id-443069.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: jmct_ (sid160793@id-160793.tinside.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: megeve (sid523379@id-523379.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: ddb (~ddb@ipv6two.tilde.club) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: akurilin_ (uid322841@id-322841.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Flow (~none@gentoo/developer/flow) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: PHO`_ (~pho@akari.cielonegro.org) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: wallymathieu (uid533252@id-533252.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: tafa (~tafa@user/tafa) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: choucavalier (~choucaval@peanutbuttervibes.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Hafydd (~Hafydd@user/hafydd) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Clint (~Clint@user/clint) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Logio (em@kapsi.fi) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: phma (phma@2001:5b0:215d:e318:4fbc:412:b7cd:6bd5) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: kmein (~weechat@user/kmein) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: emf (~emf@2620:10d:c090:400::5:2d26) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: hays (rootvegeta@fsf/member/hays) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: EvanR (~EvanR@user/evanr) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: emergence (thelounge@2607:5300:60:5910:dcad:beff:feef:5bc) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: sabx (~sabbas@user/sabbas) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: cls (~cls@chalk.lubutu.com) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Hash (~Hash@hashsecurity.org) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: caubert (~caubert@136.244.111.235) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: carbolymer (~carbolyme@dropacid.net) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: hrdl (~hrdl@mail.hrdl.eu) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: opqdonut (opqdonut@pseudo.fixme.fi) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: nisstyre (~wes@user/nisstyre) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: hexology (~hexology@user/hexology) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: landonf (landonf@mac68k.info) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: stilgart (~Christoph@chezlefab.net) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: andjjj23 (~irc@107.170.228.47) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: rembo10 (~rembo10@remulis.com) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: theproffesor (~theproffe@user/theproffesor) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: codedmart (codedmart@2600:3c01::f03c:92ff:fefe:8511) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: noddy (~user@user/noddy) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: Megant (megant@user/megant) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: w1gz (~do@159.89.11.133) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: ridcully (~ridcully@p57b52a9a.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: enikar (~enikar@user/enikar) (Ping timeout: 240 seconds)
[16:16:08] *** jmct__ is now known as jmct_
[16:16:08] *** awpr_ is now known as awpr
[16:16:08] *** rtpg_ is now known as rtpg
[16:16:08] *** Joins: landonf (landonf@mac68k.info)
[16:16:13] *** b20n_ is now known as b20n
[16:16:13] *** davetapley_ is now known as davetapley
[16:16:13] *** erisco_ is now known as erisco
[16:16:13] *** akurilin__ is now known as akurilin_
[16:16:13] *** wallymathieu_ is now known as wallymathieu
[16:16:13] *** kristjansson_ is now known as kristjansson
[16:16:13] *** terrorjack0 is now known as terrorjack
[16:16:14] *** joel135_ is now known as joel135
[16:16:14] *** elvishjerricco_ is now known as elvishjerricco
[16:16:15] *** rubin55_ is now known as rubin55
[16:16:20] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[16:16:20] *** Joins: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962)
[16:16:23] *** Joins: remexre (~remexre@user/remexre)
[16:16:29] *** Joins: stefan-_ (~cri@42dots.de)
[16:16:31] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[16:16:31] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[16:16:32] *** kmein_ is now known as kmein
[16:16:38] *** Joins: biberu (~biberu@user/biberu)
[16:16:38] *** Joins: koolazer (~koo@user/koolazer)
[16:16:38] *** Joins: fef (~thedawn@user/thedawn)
[16:16:45] *** Joins: hays (rootvegeta@fsf/member/hays)
[16:17:05] *** Joins: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001)
[16:17:08] *** Joins: Hafydd (~Hafydd@user/hafydd)
[16:17:16] *** Joins: nisstyre (~wes@user/nisstyre)
[16:17:17] *** Joins: Flow (~none@gentoo/developer/flow)
[16:17:24] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:17:29] *** Joins: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se)
[16:19:17] *** Quits: jgeerds (~jgeerds@55d4090e.access.ecotel.net) (Ping timeout: 268 seconds)
[16:19:54] *** Quits: fr33domlover (~fr33@2.55.33.131) (Ping timeout: 268 seconds)
[16:19:57] *** Quits: hrdl_ (~hrdl@mail.hrdl.eu) (Ping timeout: 256 seconds)
[16:19:57] *** Quits: cls_ (~cls@chalk.lubutu.com) (Ping timeout: 256 seconds)
[16:19:57] *** Quits: szkl_ (uid110435@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[16:19:57] *** Quits: vgtw_ (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Ping timeout: 256 seconds)
[16:20:06] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:84bf:ceba:6161:c1f6)
[16:20:31] *** Quits: opqdonut_ (opqdonut@pseudo.fixme.fi) (Ping timeout: 256 seconds)
[16:20:31] *** Quits: biberu\ (~biberu@user/biberu) (Ping timeout: 256 seconds)
[16:20:34] *** Joins: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[16:21:34] *** Joins: hrdl (~hrdl@mail.hrdl.eu)
[16:21:39] *** Joins: cls (~cls@chalk.lubutu.com)
[16:21:46] *** Joins: szkl_ (uid110435@id-110435.uxbridge.irccloud.com)
[16:21:54] *** Joins: opqdonut (opqdonut@pseudo.fixme.fi)
[16:22:24] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Ping timeout: 256 seconds)
[16:22:37] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[16:23:15] <merijn> qeqeqw1: fwiw, I (and most people) would generally recommend not trying to write multiline code in ghci
[16:23:31] <merijn> qeqeqw1: It's generally easier to just write it in an editor, then load the file in ghci to play with
[16:26:31] <raehik> I've got an instance that I needed QuantifiedConstraints for to allow me to say "given an instance that works with any KnownNat n, we have an instance X". Now I can't figure out how to use it!
[16:27:07] *** Joins: deadmarshal (~deadmarsh@95.38.230.192)
[16:27:35] <hpc> in fact, i would recommend that anyway
[16:27:51] <hpc> vim foo.hs, ghci foo.hs, and :r in ghci as you make edits
[16:28:12] <hpc> easier than whatever fancy :l and :{ :} nonsense anyone could possibly come up with
[16:28:37] <hpc> the hardest part of the whole thing is exiting vim when you're done :D
[16:32:40] <raehik> is what I'm trying currently disallowed in the first place? https://gitlab.haskell.org/ghc/ghc/-/issues/18150
[16:34:01] <raehik> feels weird, I just want an instance that knows it can use any KnownNat rather than having to put each type nat in the instance head
[16:34:42] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:36:44] <merijn> is there a name for generalising quad-tree/oct-trees to N-dimensions?
[16:38:01] <hpc> space partition?
[16:38:48] *** Joins: slack1256 (~slack1256@191.125.227.223)
[16:39:02] <merijn> as in data structure name
[16:39:31] <merijn> so binary trees, quad trees, and oct trees are 1, 2, and 3 dimensional instance of ?? trees
[16:39:45] <merijn> Trying to figure out the ?? :p
[16:39:52] <qeqeqw1> merijn, Right I will start this habit then. That's a good tip. I'm not really the repl type anyway so it'all good
[16:40:01] <hpc> ah
[16:40:30] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Quit: Leaving)
[16:40:43] <merijn> qeqeqw1: You can simply do ":l yourfile.hs" and everything will be accessible
[16:40:45] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[16:40:48] <qeqeqw1> merijn, I think the term you're looking for is N-ary tree
[16:41:20] <merijn> (and ":r" or ":reload" to reload file after changes)
[16:41:25] <qeqeqw1> merijn, Yes, I've read it in the tutorial but thanks anyway
[16:42:03] <qeqeqw1> Does modifying functions in the repl and then do reload change the file, though ?
[16:42:36] <merijn> you can't really modify things in the repl, only define new things
[16:43:44] <qeqeqw1> right, that's a sensible behavior
[16:45:18] <hpc> qeqeqw1: that's "no more than N children" instead of "exactly N children", and N doesn't have to be a power of two
[16:47:40] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:48:41] <hpc> merijn: maybe give up on finding an existing term and call it a 2**n-ary space partition?
[16:49:19] <merijn> hpc: I need a name so I can search for whatever people have written about them :p
[16:49:25] <hpc> ah
[16:49:26] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ede6:9f76:f2c5:9990)
[16:50:12] <hpc> if it was me, i would try a search for "space partition" and just deal with the extra results
[16:50:35] <hpc> unless there's an ungodly huge number of search results, that seems easiest
[16:50:36] <merijn> especially how to get self-balancing right :p
[16:53:20] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[16:53:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ede6:9f76:f2c5:9990) (Ping timeout: 240 seconds)
[16:55:03] *** Quits: simendsjo (~user@2a02:2121:6c0:42f8:d80b:8f5a:9182:35dd) (Ping timeout: 268 seconds)
[16:55:52] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[16:57:05] *** aforemny_ is now known as aforemny
[16:58:58] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[17:01:39] *** Joins: fr33domlover (~fr33@141.226.10.136)
[17:01:58] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[17:02:02] *** Quits: deadmarshal (~deadmarsh@95.38.230.192) (Ping timeout: 250 seconds)
[17:02:18] *** Joins: alp (~alp@user/alp)
[17:03:55] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[17:04:26] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[17:04:55] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 268 seconds)
[17:04:58] *** PHO`__ is now known as PHO`
[17:07:19] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[17:07:56] <merijn> ah, feck, I don't think quad/oct trees are quite right for my problem anyway :\
[17:09:01] *** Quits: faustind (~faustin@240b:12:43e1:7b00:fc04:33:8474:c903) (Quit: Leaving.)
[17:14:38] *** Joins: __monty__ (~toonn@user/toonn)
[17:15:18] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[17:16:03] *** Quits: vglfr (~vglfr@88.155.46.9) (Ping timeout: 256 seconds)
[17:16:16] *** Joins: deadmarshal (~deadmarsh@95.38.230.192)
[17:16:20] *** Joins: vglfr (~vglfr@88.155.46.9)
[17:18:55] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
[17:25:07] *** Quits: deadmarshal (~deadmarsh@95.38.230.192) (Ping timeout: 256 seconds)
[17:26:16] *** Joins: max22- (~maxime@2a01cb0883359800afbe144533f29e72.ipv6.abo.wanadoo.fr)
[17:26:17] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[17:27:12] *** Clint_ is now known as Clint
[17:28:57] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[17:29:17] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[17:29:29] <merijn> ok, so help me out. I'm trying to invent something like IntervalMap from data-interval
[17:29:34] <merijn> @hackage data-interval
[17:29:34] <lambdabot> https://hackage.haskell.org/package/data-interval
[17:29:44] <merijn> Except, that only deals with 1-dimensional intervals
[17:29:47] *** mal1 is now known as lieven
[17:29:55] <merijn> And I need N-dimensional
[17:30:37] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[17:32:53] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[17:33:57] <merijn> I was looking at the data-interval implementation, but that stores the smallest point for each interval and then does a lookup, but that's...not as doable with N dimensions. At least I'm not sure how...
[17:34:25] <merijn> And octtrees seems like they'd inflict a lot of additional storage
[17:38:17] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:38:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:39:03] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Quit: leaving)
[17:39:10] <__monty__> Oof, are you a day ahead in AoC or something? : )
[17:39:18] *** Joins: joo-_ (~joo-_@80-62-117-53-mobile.dk.customer.tdc.net)
[17:39:18] *** Quits: joo-_ (~joo-_@80-62-117-53-mobile.dk.customer.tdc.net) (Changing host)
[17:39:18] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[17:40:53] *** Joins: deadmarshal (~deadmarsh@95.38.230.192)
[17:41:50] <merijn> __monty__: This is actual work >.>
[17:42:41] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[17:43:06] *** Joins: shapr (~user@2601:7c0:c37c:46d0:f28:8342:f51d:c5e2)
[17:43:10] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[17:44:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:47:03] <__monty__> Yeah, it's just that Octrees kinda popped up this year, for 3D intervals. It sounds like a pretty hard problem.
[17:47:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Client Quit)
[17:48:06] *** Joins: wombat875 (~neilfulwi@pool-72-89-24-154.nycmny.fios.verizon.net)
[17:50:12] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd9f:9c7:a4ae:c7f9)
[17:51:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:52:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:52:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:52:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:52:30] *** Joins: gdd (~gdd@129.199.146.230)
[17:52:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:54:13] *** Quits: max22- (~maxime@2a01cb0883359800afbe144533f29e72.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[17:54:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd9f:9c7:a4ae:c7f9) (Ping timeout: 240 seconds)
[17:55:43] *** Quits: jlamothe_ (~jlamothe@198.251.61.229) (Quit: leaving)
[17:56:37] *** Quits: deadmarshal (~deadmarsh@95.38.230.192) (Ping timeout: 240 seconds)
[17:57:21] <tomsmeding> merijn: why are oct trees not right for your problem?
[17:59:45] *** Joins: dut (~dut@user/dut)
[18:00:50] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[18:01:57] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[18:02:09] <tomsmeding> note that BVH also exists, but you probably already found that, and without knowing more about the problem it's impossible to say whether it will be more suitable anyway :)
[18:02:15] <xerox> people might be interested in POPL streamed live https://www.youtube.com/watch?v=83D2k5pgFlM
[18:02:28] <merijn> tomsmeding: Intervals that cover multiple branches will have to be split a lot
[18:02:54] *** Quits: wombat875 (~neilfulwi@pool-72-89-24-154.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[18:02:58] <tomsmeding> ah
[18:03:13] <merijn> tomsmeding: My intervals will most be large and dense
[18:03:16] <merijn> *mostly
[18:03:23] <tomsmeding> does IntervalMap even solve that issue? from a peek at the implementation it looked like it doesn't deal with overlapping intervals _at all_
[18:03:32] <merijn> tomsmeding: Which is, like, the pessimal case for octtrees
[18:03:42] <merijn> tomsmeding: There can't be overlap
[18:04:46] <merijn> tomsmeding: But with quad/octrees you end up doing a lot of gratuitous splitting to fit into the 4/8 quads/octs of the space
[18:04:58] <tomsmeding> yeah I see
[18:05:13] <merijn> Aha!
[18:05:25] *** Parts: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Leaving)
[18:05:26] <merijn> kd-tree, that was the name I was looking for earlier, I think
[18:05:29] <tomsmeding> BVH won't split (with the standard implementation -- you can make it split if you want), but it will just have an inefficient tree structure probably
[18:06:42] <tomsmeding> what dimensions are you looking at? <=3? <=10? <=10000?
[18:06:58] <merijn> tomsmeding: BVH seems more general than I want anyway, since I will never have overlap
[18:07:12] <merijn> tomsmeding: Let's say *at least* up to 5
[18:07:15] *** Joins: x_kuru (~xkuru@user/xkuru)
[18:07:20] <tomsmeding> bvh is just an alternative on kd trees
[18:07:40] <tomsmeding> the bounding volumes of the internal nodes will overlap
[18:07:55] <tomsmeding> where a kd tree would split things
[18:08:16] <tomsmeding> (that is, if I remember graphics class correctly :p )
[18:09:00] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:09:00] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:09:00] *** Joins: wroathe (~wroathe@user/wroathe)
[18:10:14] <merijn> tomsmeding: That makes sense for sparse items, in my case I'm looking more at dense things. That is most (if not all) of the space is assigned a value
[18:10:17] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 268 seconds)
[18:10:18] *** Joins: eron (~eron@2804:431:c7c2:3848:2c26:bc50:f8a2:a008)
[18:11:40] <merijn> So it's more like (in the 3d case) I have a collection of (non-overlapping) volumes and wanna efficiently query "what's the volume of point (x, y, z)?"
[18:12:04] <merijn> (I guess "what volume does (x, y, z) fall within?" is a more natural formulation)
[18:12:04] *** Quits: shapr (~user@2601:7c0:c37c:46d0:f28:8342:f51d:c5e2) (Remote host closed the connection)
[18:12:17] *** Joins: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b)
[18:12:32] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[18:13:33] <merijn> Which seems like it should be a solved problem, I just dunno what the solution is called :p
[18:13:37] <tomsmeding> store a list of neighbour volumes for each volume, and walk towards your destination
[18:13:44] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[18:13:58] <tomsmeding> more seriously, I don't know of anything better or more recent than a kd tree or bvh
[18:14:35] <tomsmeding> note that you can make a kd tree adaptive: select its split points depending on the volumes in your set
[18:14:36] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:14:41] <tomsmeding> instead of always in the middle
[18:14:57] <tomsmeding> whether that helps depends on your dataset I guess :p
[18:16:36] <merijn> tomsmeding: Yeah, but then I still need a sensible way to build a (semi-balanced) tree with the kd solution, which is unclear :p
[18:17:53] <merijn> That's my problem, most of these are talking about partitioning "sets of points" when constructing, but that only makes sense for sparse things
[18:19:51] *** Joins: ardell (~ardell@user/ardell)
[18:20:41] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[18:21:53] *** Joins: wombat875 (~neilfulwi@pool-72-89-24-154.nycmny.fios.verizon.net)
[18:22:06] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:22:55] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[18:23:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:23:44] <wombat875> \quit
[18:23:46] *** Quits: wombat875 (~neilfulwi@pool-72-89-24-154.nycmny.fios.verizon.net) (Client Quit)
[18:24:22] *** Joins: wombat875 (~neilfulwi@72.89.24.154)
[18:24:57] *** Quits: wombat875 (~neilfulwi@72.89.24.154) (Client Quit)
[18:26:05] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[18:26:29] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Client Quit)
[18:26:31] *** Joins: slac74781 (~slack1256@186.11.27.197)
[18:27:18] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[18:27:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[18:28:33] *** Joins: max22- (~maxime@2a01cb08833598003263d82d70b82807.ipv6.abo.wanadoo.fr)
[18:28:55] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:29:34] *** Quits: slack1256 (~slack1256@191.125.227.223) (Ping timeout: 250 seconds)
[18:30:43] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[18:32:51] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:35:37] *** Quits: fr33domlover (~fr33@141.226.10.136) (Ping timeout: 240 seconds)
[18:36:03] *** Quits: rembo10_ (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[18:36:06] <merijn> man, I seem to have accidentally stumbled into some really tricky nerd-snipy shit >.>
[18:36:23] *** Joins: rembo10 (~rembo10@remulis.com)
[18:37:42] *** Joins: deadmarshal (~deadmarsh@95.38.230.192)
[18:43:17] <merijn> I stumbled across R-trees, but I think something more efficient should be possible, since I *can* simply split my volumes if needed. But this whole thing requires more thinking than my brain can handle >.>
[18:46:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:46:54] *** Quits: polyphem (~rod@2a02:810d:840:8754:e450:3ca3:b389:687a) (Ping timeout: 250 seconds)
[18:48:33] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[18:52:50] *** hugo- is now known as hugo
[18:53:35] *** Joins: Guest70 (~Guest70@2a00:1fa1:8247:926e:abaa:e5d4:d634:d5d9)
[18:53:55] *** Parts: Guest70 (~Guest70@2a00:1fa1:8247:926e:abaa:e5d4:d634:d5d9) ()
[18:53:58] *** Quits: mmhat (~mmh@55d4fa95.access.ecotel.net) (Quit: WeeChat 3.4)
[18:55:10] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:55:10] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:55:10] *** Joins: wroathe (~wroathe@user/wroathe)
[18:55:45] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[18:56:09] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce)
[18:56:32] *** Joins: polyphem (~rod@2a02:810d:840:8754:e450:3ca3:b389:687a)
[18:58:03] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 256 seconds)
[18:59:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:59:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:02:12] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[19:03:39] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[19:04:50] *** Joins: ksqsf (~user@2001:da8:d800:611:d4b0:39ea:c0c9:ff22)
[19:08:13] *** Joins: fr33domlover (~fr33@141.226.170.143)
[19:08:53] <zwro[m]> question: are "bound" variables in let expressions called "closed" variables, and are these terms interchangeable?
[19:11:22] *** Quits: michalz (~michalz@185.246.204.101) (Remote host closed the connection)
[19:12:14] <merijn> tomsmeding: Oh!
[19:13:02] <merijn> tomsmeding: I think I *can* reformulate it into a (simple) 1D case, iff I only admit simple, "rectangular" (however that's called in higher dimensions) shapes
[19:13:05] <merijn> )
[19:13:07] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:13:31] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[19:16:12] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:19:38] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[19:22:11] <zzz>  zwro[m]: you mean bound vs free / closed vs _ ?
[19:22:26] <zwro[m]> zzz: exactly
[19:22:51] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[19:24:37] *** Joins: zebrag (~chris@user/zebrag)
[19:25:45] <zzz> as i understading there's a suble difference between bound vs free in math and in programming. in programming, a free variable is one that needs to be looked up the function call stack
[19:26:18] <zzz> no sure if that exactly correlates with all let/where bindings
[19:27:22] *** Quits: d0ku (~d0ku@178.43.152.233.ipv4.supernova.orange.pl) (Ping timeout: 268 seconds)
[19:28:02] <lortabac> zwro[m]: IIRC a term is called "closed" if it doesn't contain free variables
[19:28:29] <lortabac> a variable can't be closed, a term can
[19:29:04] <zwro[m]> i see. are terms called "open" in opposition?
[19:29:36] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[19:30:08] <zwro[m]> and can we set warnings for closed terms?
[19:31:34] <zwro[m]> i want to enforce (for stylistic purposes) defining all terms at the highest level
[19:32:52] *** Joins: Topsi (~Tobias@dyndsl-095-033-018-085.ewe-ip-backbone.de)
[19:34:14] <lortabac> zwro[m]: these are two different things
[19:35:16] <zzz> which things?
[19:35:22] <lortabac> you want to emit a warning when let or where is used?
[19:35:30] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:35:32] <lortabac> open/closed and toplevel/nested
[19:36:11] <zzz> i think they want to avoid let/where bindings without free variables
[19:36:38] <zzz> force defining them at the highest possile level
[19:37:51] <lortabac> so for example (f x = y + 1 where y = x + 2) would be allowed and (f = x where x = 1) would emit a warning?
[19:42:04] <zwro[m]> lortabac: yes
[19:42:20] <lortabac> I don't think such a warning exists in GHC, but it shouldn't be too hard to implement, I suppose
[19:44:15] *** Joins: jgeerds (~jgeerds@55d4090e.access.ecotel.net)
[19:44:47] <zzz> i was going to say that's superfulous because ghc probably treats all "closed" bindings the same as top-level but i see a point in zwro[m]'s style
[19:45:34] <zwro[m]> lortabac: it should be trivial
[19:46:14] <zwro[m]> how can i make sure the setting doesn't exist yet?
[19:46:24] *** Joins: HyperTimeBreaker (~HyperTime@202.3.77.166)
[19:46:31] *** Quits: MiguelNegrao (~MiguelNeg@2001:818:dc71:d100:9e5a:44ff:fe17:1240) (Quit: Client closed)
[19:47:13] <zwro[m]> zzz: mostly for conciseness and to avoid duplication, but there are other advantages
[19:47:58] *** Quits: HyperTimeBreaker (~HyperTime@202.3.77.166) (Client Quit)
[19:48:27] <lortabac> zzz: let expressions can be considered syntactic sugar for lambdas (it is the case in Scheme for example)
[19:49:31] <lortabac> (let x = 1 in x) is just sugar for ((\x -> x) 1)
[19:50:02] <lortabac> that's why we can say bound/free for both lambdas and lets
[19:51:51] <tomsmeding> merijn: cuboidal?
[19:52:02] <zzz> lortabac: there are some caveats regarding generalization of polymorphic types
[19:52:38] <EvanR_> is zwro[m] talking about supercombinators
[19:52:39] <merijn> tomsmeding: Anyway, I realised I'm wrong because I have a partial order that's screwing me over >.>
[19:53:24] <zwro[m]> EvanR_: am I?
[19:54:10] <EvanR_> nvm, I'm not sure why f = x where x = 1 would not be allowed
[19:54:15] <merijn> tomsmeding: I was thinking I could just order by (in 2d land, but generalises to N) by like the "top-most, leftmost point of an interval" and then lookup the greatest one "smaller than my target" and identify the volume it's in.
[19:54:31] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:ac4b:acb4:af59:598f) (Quit: WeeChat 2.8)
[19:54:41] <merijn> But that doesn't quite work, because a total (lexicographical) order on points gets you the wrong one sometimes
[19:54:55] <merijn> But a partial order doesn't play nice with a BST
[19:55:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:55:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:55:28] *** Joins: wroathe (~wroathe@user/wroathe)
[19:56:53] <zwro[m]> EvanR_: i just checked what supercombinators are. i guess that's more useful! that example not being allowed would just be an unfortunate side-effect
[19:57:29] <zwro[m]> if i'm understanding, any combinator can be trivially turned into a supercombinator, right?
[19:59:12] <zzz> (lortabac: MonoLocalBinds)
[19:59:26] <EvanR_> actually, sometimes just "combinator" is what people call a top level thing with no free vars
[20:00:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:00:11] <zzz> i see
[20:00:17] <EvanR_> whereas supercombinator is in an implementation context and often has an explicit arity for compiler purposes
[20:00:57] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[20:01:02] <zzz> haskell needs a compreehensive list of common terminology
[20:02:39] *** Quits: hyiltiz_ (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[20:03:00] *** Joins: hyiltiz (~quassel@31.220.5.250)
[20:03:23] <zwro[m]> so i guess i was not talking about it, exactly
[20:04:13] <zwro[m]> i just want to avoid having stuff limited by a function's scope when it has no reason to
[20:04:27] *** Joins: fendor (~fendor@77.119.169.94.wireless.dyn.drei.com)
[20:04:58] <EvanR_> sounds like xkcd style, there are only so many functions, we should never write the same combinator twice
[20:05:17] <zwro[m]> ScopedTypeVariables, which i have always on, complicates things
[20:05:21] <EvanR_> oh oh, there's the birding combinator book
[20:06:01] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[20:06:23] <EvanR_> https://hackage.haskell.org/package/data-aviary haven't thought of this in a while
[20:06:48] *** Quits: eron (~eron@2804:431:c7c2:3848:2c26:bc50:f8a2:a008) (Quit: Client closed)
[20:07:56] <dolio> The really technical definition is that combinators are defined like `f x y z ... = E` where `E` contains only application and previously defined combinators.
[20:08:07] <merijn> oh, wait, maybe this is rescuable by using manhattan distance to induce a total ordering!
[20:08:08] <zwro[m]> EvanR_: xkcd style? now i need a link
[20:08:10] <dolio> Oh, and the bound variables, of course.
[20:08:28] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:08:46] <EvanR_> on xkcd's irc network (who has their own irc network anyway) there is a channel where the bot is set up to stop you from using a previously spoken message
[20:08:47] <dolio> I.E. it's a formalism without lambda expressions.
[20:09:13] <EvanR_> seems similar to your not wanting to write the same combinator again xD
[20:09:59] <EvanR_> dolio, but doesn't e.g. Y combinator use lambdas
[20:10:21] <zzz> EvanR_: is Data.Aviary a reference to Smullyan?
[20:10:53] <EvanR_> yes
[20:10:59] <dolio> Not if you define it in a combinator calculus.
[20:11:24] *** Joins: laslmtdwbcs^ (~laslmtdwb@wsip-98-188-242-61.mc.at.cox.net)
[20:11:24] <zzz> how can Y be defined in Haskell?
[20:11:31] <zzz> fix ?
[20:11:45] <zzz> you can't excape the let
[20:12:26] <dolio> I don't have the combinator definition memorized, though, and don't really feel like working it out. :Ã¾
[20:12:34] *** Joins: johnjaye (~pi@154.6.152.74)
[20:12:55] <johnjaye> i'm looking at a build script and it has names like 'v1-install' as commands for building a haskell project. is that reasonable?
[20:12:59] <dolio> @pl \f -> (\x -> f (x x)) (\x -> f (x x))
[20:12:59] <lambdabot> ap (. join id) (. join id)
[20:13:13] <dolio> @pl (\x -> f (x x)) (\x -> f (x x))
[20:13:16] <lambdabot> (f . ap id id) (f . ap id id)
[20:13:16] <lambdabot> optimization suspended, use @pl-resume to continue.
[20:13:36] <EvanR_> @pl-resume
[20:13:42] <lambdabot> (f . ap id id) (f . ap id id)
[20:13:42] <lambdabot> optimization suspended, use @pl-resume to continue.
[20:13:45] <dolio> :)
[20:13:46] <maerwald> johnjaye: what do you mean witth reasonable?
[20:13:47] <EvanR_> nice
[20:13:52] <EvanR_> partiality monad
[20:14:18] <EvanR_> could be used for a "loading" screen in a video game
[20:14:30] <johnjaye> maerwald: i'm trying to figure out if it's an option to cabal, ghc, or something else
[20:14:41] <johnjaye> man cabal doesn't exist. oops
[20:14:47] <geekosaur> v1-install would be cabal
[20:15:06] <geekosaur> https://cabal.readthedocs.io/
[20:15:08] <johnjaye> ok  --help works
[20:15:14] <johnjaye> i see i there
[20:15:21] <geekosaur> but the v1-* commands are deprecated at this point
[20:15:25] <johnjaye> ok
[20:15:38] <geekosaur> they're a good way to make unsolvable messes
[20:15:45] <maerwald> johnjaye: cabal man
[20:16:27] <johnjaye> maerwald: illegal option -l
[20:16:32] <johnjaye> then some usage message about man. lol
[20:16:34] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:16:35] <johnjaye> on bsd
[20:16:55] <maerwald> yeah, it's a bug https://github.com/haskell/cabal/issues/7714
[20:17:25] <zzz> @type \f -> (\x -> f (x x)) (\x -> f (x x))
[20:17:26] <lambdabot> error:
[20:17:26] <lambdabot>     â€¢ Occurs check: cannot construct the infinite type: t0 ~ t0 -> t
[20:17:26] <lambdabot>     â€¢ In the first argument of â€˜xâ€™, namely â€˜xâ€™
[20:17:31] <zzz> ^
[20:18:33] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:18:37] <zzz> @type ap (. join id) (. join id)
[20:18:38] <lambdabot> error:
[20:18:38] <lambdabot>     â€¢ Occurs check: cannot construct the infinite type: a0 ~ a0 -> b
[20:18:38] <lambdabot>       Expected type: (a0 -> b) -> (a0 -> b) -> b
[20:18:40] *** enicar is now known as enikar
[20:19:04] <zzz> computer says no
[20:19:57] <zzz> dolio EvanR_
[20:20:06] <ksqsf> you'll need some recursive type to guide the type checking
[20:20:24] <ksqsf> a simpler and more evil way is to use unsafeCoerce
[20:20:51] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[20:20:57] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 240 seconds)
[20:21:04] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:21:07] <zzz> ksqsf: can we make it typecheck with a recursive type?
[20:21:08] <EvanR_> zzz, you wrote a Y combinator for untyped lambda calculus
[20:21:23] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:21:30] <zzz> EvanR_: yes, that's my point
[20:21:31] <EvanR_> many things from untyped lambda calculus don't work as is when you add types
[20:22:26] <tomsmeding> merijn: probably a bad idea, but (in 2d land): store for each rect with left-top (x,y) the other rect with left-top (a,b) such that a<=x, b>=y, and b is minimal with tiebreaker (a is maximal). Also store the symmetric thing on the top. Then by following these "other rect" pointers you kind of walk a convex hull thing around your query point, if you start with a rect with left-top (x,y) with x <=
[20:22:26] <tomsmeding> queryx and y <= queryy, optimised by some metric. Not sure if this actually works
[20:22:35] <ksqsf> zzz: yes, try newtype Mu a = Mu (Mu a -> a)
[20:24:04] <tomsmeding> @let newtype Mu a = Mu (Mu a -> a)
[20:24:05] <lambdabot>  Defined.
[20:24:21] <tomsmeding> @type \f -> (\(Mu x) -> f (x (Mu x))) (\x -> f (x (Mu x)))
[20:24:22] <lambdabot> error:
[20:24:22] <lambdabot>     â€¢ Couldn't match expected type â€˜Mu tâ€™
[20:24:22] <lambdabot>                   with actual type â€˜(Mu t -> t) -> t1â€™
[20:24:33] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[20:24:37] *** Quits: jgeerds (~jgeerds@55d4090e.access.ecotel.net) (Ping timeout: 240 seconds)
[20:24:46] <tomsmeding> @type \f -> (\x -> f (x (Mu x))) (\(Mu x) -> f (x (Mu x)))
[20:24:47] <lambdabot> (a -> a) -> a
[20:25:01] <merijn> tomsmeding: That's what I was thinking, but I don't think I can get a good enough ordering for "closest, left-top"
[20:25:18] <merijn> Because lexicographical ordering produces the wrong order
[20:25:25] <tomsmeding> also I now realise that this suffers from combinatorial explosion if d > 2
[20:25:44] <dolio> Ruling out the Y combinator is one of the reasons types were invented.
[20:25:53] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[20:25:59] <merijn> If you can smash the ordering into a 1-d total order the problem is "solved"
[20:26:18] <merijn> But I can't make that work
[20:26:19] *** Quits: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506) (Read error: Connection reset by peer)
[20:27:16] <johnjaye> is building with ghc -O1 a lot slower than with -O0?
[20:27:23] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:27:27] <johnjaye> ah there's a #ghc channel ok
[20:27:32] <geekosaur> not usually a "lot" slower
[20:27:43] <geekosaur> note that #ghc is a dev channel, they send user questions here
[20:27:50] <johnjaye> ok. i notice my processors aren't really working that hard
[20:28:01] <johnjaye> like one goes to 100% every few seconds
[20:28:26] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:28:56] <tomsmeding> johnjaye: soundsd like you're compiling using one thread, which makes sense since ghc compiles one component (library or executable) single-threaded
[20:29:09] <tomsmeding> the build parallelism is in compiling multiple packages in parallel, not really within one package
[20:29:16] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Remote host closed the connection)
[20:29:37] *** Quits: fr33domlover (~fr33@141.226.170.143) (Ping timeout: 240 seconds)
[20:30:24] *** Joins: neverfindme (~hayden@158.123.160.43)
[20:30:41] *** Quits: neverfindme (~hayden@158.123.160.43) (Max SendQ exceeded)
[20:30:46] <tomsmeding> merijn: also my idea doesn't work, found a counterexample (in the walking even, not the selection of the first rect)
[20:31:01] *** Joins: neverfindme (~hayden@158.123.160.43)
[20:31:50] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[20:31:51] *** Quits: mbuf (~Shakthi@110.225.233.59) (Quit: Leaving)
[20:32:00] <merijn> tomsmeding: it feels like there *should* be an efficient/simple solution, but I just can't make it work :(
[20:32:27] <johnjaye> i see
[20:32:55] <tomsmeding> johnjaye: there technically is a -j argument to ghc, but in my experience that is very successful in using more cores and keeping total compilation time roughly constant
[20:33:14] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[20:33:31] *** Joins: neverfindme (~hayden@158.123.160.43)
[20:33:44] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:33:59] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[20:35:11] <tomsmeding> (that's a different -j argument than the one to cabal; the cabal one is on by default and is for cross-package parallelism and works well)
[20:35:43] <tomsmeding> merijn: combination of these three examples defeated my idea https://tomsmeding.com/ss/get/tomsmeding/XEkacx
[20:36:05] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[20:36:24] <[itchyjunk]> Trying to see if i remember foldr. it took a function , element of type a, list [a] and returned [b] so foldr :: a -> a -> b -> a -> [a] -> [b] ?
[20:36:27] <[itchyjunk]> :t foldr
[20:36:28] <lambdabot> Foldable t => (a -> b -> b) -> b -> t a -> b
[20:36:33] <[itchyjunk]> ree
[20:36:39] <[itchyjunk]> thats what i had first lol
[20:36:55] <tomsmeding> missing some parens in your suggestion
[20:36:56] <[itchyjunk]> hmm
[20:37:02] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[20:37:02] <[itchyjunk]> oh right, oops
[20:37:06] <tomsmeding> a -> b -> c is not the same as (a -> b) -> c
[20:37:12] <tomsmeding> though it _is_ the same as a -> (b -> c)
[20:37:30] <[itchyjunk]> right, the second one suggests a function (a -> b)
[20:37:37] <tomsmeding> not only suggests
[20:37:38] <[itchyjunk]> right associativity
[20:37:52] <[itchyjunk]> implies is a better word, maybe
[20:38:02] <tomsmeding> 'a -> b -> c' = 'a -> (b -> c)' can be remembered by knowing that \x -> \y -> E is the same as \x y -> E
[20:38:41] <[itchyjunk]> hmm
[20:38:42] <EvanR_> a -> (b -> c) could be read as `a' implies `b -> c' xD
[20:38:56] <tomsmeding> EvanR_: or is that a => (b -> c) :p
[20:39:02] <johnjaye> incredibly the command line argument to ghc is 2,000 characters long
[20:39:13] <tomsmeding> or are => and -> secretly the same thing? hmmmmmmmmmm
[20:39:17] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[20:39:21] * EvanR_ dumps out a big bin of arrow glyphs on the table and starts searching through them
[20:39:24] <johnjaye> i think it put every submodule to build for the project on the command argument
[20:39:25] <zzz> ksqsf: tomsmeding: wow
[20:39:34] <tomsmeding> johnjaye: it does :p
[20:39:44] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[20:39:56] <tomsmeding> cabal collects what modules belong in the component, then passes the full list to ghc, which then compiles them all
[20:40:02] <[itchyjunk]> :t unfoldr
[20:40:04] <johnjaye> i see
[20:40:04] <lambdabot> (b -> Maybe (a, b)) -> b -> [a]
[20:40:10] <[itchyjunk]> now this monstrosity..
[20:40:14] <tomsmeding> the reason why it's one ghc process instead of one per module is that ghc does a _lot_ of caching of intermediate products
[20:40:24] <[itchyjunk]> it takes a function and another argument and returns a list
[20:40:59] <tomsmeding> > unfoldr (\x -> if x > 10 then Nothing else Just (-x, x + 1)) 1
[20:41:01] <lambdabot>  [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]
[20:41:01] <[itchyjunk]> ah, i need to find function with type b -> Maybe (a,b) first!
[20:41:08] <zzz> dolio: if types were invented to rule out the Y combinator, howcome we can still define it?
[20:41:14] <johnjaye> i guess it's time to use the old fashioned progress indicator - du
[20:41:25] <tomsmeding> zzz: because we then went on and introduced recursive types
[20:41:39] *** Joins: tito (tito@tilde.team)
[20:41:44] <tomsmeding> we can also leave those out; then you end up with the simply-typed lambda calculus, in which general recursion is not expressible
[20:42:35] <[itchyjunk]> okay, i can read you function up there i think, the \x one. but wouldn't it keep checking higher values of x forever and keep getting Nothing back?
[20:42:40] <[itchyjunk]> how does it know when to stop?
[20:42:43] <zzz> what wuold be a good book to read to introduce myself to these concepts?
[20:42:44] <tomsmeding> @src unfold
[20:42:44] <lambdabot> Source not found. Just what do you think you're doing Dave?
[20:42:47] <dolio> zzz: You can't. It's re-added as a basic thing when desired.
[20:42:51] <EvanR_> haskell restores the chaos of uncontrolled recursion with recursive bindings and recursive ADTs
[20:43:07] <tomsmeding> [itchyjunk]: https://hackage.haskell.org/package/base-4.14.0.0/docs/src/Data.OldList.html#unfoldr
[20:43:08] <[itchyjunk]> ahh, i'll file that under magic for now
[20:43:18] <EvanR_> but recursive ADTs are nice because they are lazy
[20:43:27] <tomsmeding> oh that's not very helpful with build there
[20:43:45] <tomsmeding> [itchyjunk]: read (:) instead of c, and [] instead of n
[20:44:15] <EvanR_> ADTs are necessarily guarded recursion
[20:44:25] <EvanR_> unlike let x = x in x
[20:44:52] <johnjaye> well that didn't work either. guess i'll go break and come back and hope ghc finished properly
[20:45:09] <tomsmeding> johnjaye: what are you even compiling :p
[20:45:15] <johnjaye> tomsmeding: agda
[20:45:26] <tomsmeding> and getting no progress feedback?
[20:45:29] <johnjaye> yes
[20:45:36] <zzz> EvanR_: but let x = f x in x is ok
[20:45:42] <tomsmeding> that's very odd
[20:45:47] <EvanR_> it depends on f
[20:45:56] *** phma_ is now known as phma
[20:46:03] <johnjaye> says Starting     Agda-2.6.3 (all, legacy fallback)
[20:46:08] <johnjaye> then building. then nothing
[20:46:11] <tomsmeding> ah right, as a dependency
[20:46:14] <zzz> EvanR_: oh i see
[20:46:17] <zzz> nice
[20:46:18] <[itchyjunk]> I need an exercise where i can practice writing functions with Maybe blah in the return type. :x what do i google for?
[20:46:28] <tomsmeding> johnjaye: yeah it's probably working, agda is a _really_ large package
[20:46:41] <johnjaye> ok. i should probably learn how cabal works
[20:46:43] <[itchyjunk]> adga is written in haskell?
[20:46:45] <johnjaye> that might help
[20:46:49] <johnjaye> [itchyjunk]: maybe
[20:46:53] <tomsmeding> yes
[20:46:54] <[itchyjunk]> hmmm
[20:46:57] <[itchyjunk]> i didn't know that
[20:47:25] <tomsmeding> idris too, raku too, ghc itself too, whitespace too
[20:47:28] <johnjaye> only 55.1% haskell
[20:47:36] <[itchyjunk]> never heard of any of those :D
[20:47:44] <johnjaye> 26.7% agda
[20:47:53] <ksqsf> the law of haskell syntax: if a language looks like haskell, its compiler is probably written in haskell
[20:48:06] <EvanR_> wait, I thought that was law of perl
[20:48:10] <zzz> [itchyjunk]: you should know ghc at least
[20:48:11] <johnjaye> tomsmeding: the raku one seems odd to me. wouldn't that defeat self-hosting?
[20:48:14] <[itchyjunk]> I don't really know what agda looks like other than seeing it on youtube
[20:48:16] <geekosaur> mm, raku's not written in haskell. pugs was
[20:48:25] <[itchyjunk]> zzz, i know of ghci
[20:48:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:48:48] <johnjaye> someone linked me to a youtube video about agda but i don't remember. it was like CS410 and had a whiteboard
[20:48:59] <johnjaye> yes one of those types of vids
[20:49:04] <[itchyjunk]> i watched it on that computerphile video.
[20:49:07] <zzz> [itchyjunk]: ghci stands for ghc interactive [environment]
[20:49:13] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:49:14] <tomsmeding> geekosaur: ah, I misremembered
[20:49:21] <[itchyjunk]> the claim was you can turn run time type error into compile time type error
[20:49:31] <zzz> [itchyjunk]: ghc is the haskell compiler you're probably using
[20:49:53] <johnjaye> i'm using ghc right now
[20:49:55] <[itchyjunk]> zzz, right. i still need to learn to compile my stuff :< its on the todo
[20:49:57] <tomsmeding> johnjaye: seems like all the .agda files are in test/
[20:49:57] <zzz> the glorious/glasgow haskell compiler
[20:50:28] <monochrom> [itchyjunk]: Have you done this? Recall that "maximum []" is undefined. Implement a "nicerMaximum :: Ord a => [a] -> Maybe a" such that nicerMaximum [] = Nothing, nicerMaximum non_empty_list = Just (the answer).
[20:50:49] <johnjaye> tomsmeding: do you think it will go way faster i if i turn off tests?
[20:51:03] <tomsmeding> johnjaye: turn off which tests how exactly?
[20:51:18] <[itchyjunk]> Oh i haven't learned maximum. so i could work on this. i suppose i take a list an return the largest element in it
[20:51:22] <tomsmeding> johnjaye: also, what process is taking cpu at the moment?
[20:51:30] <monochrom> yeah
[20:51:45] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[20:53:16] <johnjaye> it involves --ghc-options=O0
[20:53:32] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 240 seconds)
[20:53:41] <johnjaye> ghc is taking 100% of one cpu
[20:53:44] <tomsmeding> johnjaye: the command is ghc with flags? Then it's still building
[20:53:55] *** Joins: tomku (~tomku@user/tomku)
[20:53:59] <tomsmeding> I don't think it will be running any tests unless you specifically asked it somehow
[20:54:08] <johnjaye> no i mean the makefile has an option for a quick build. and the quick bu ild is adding --ghc-options=O0
[20:54:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:54:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:54:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:54:28] *** Joins: wroathe (~wroathe@user/wroathe)
[20:54:51] <tomsmeding> with O0 the resulting Agda binary will be a lot slower
[20:54:54] <ksqsf> Agda sure takes a long time to build, but I don't recall the compile time being so bad
[20:55:26] <ksqsf> probably due to GHC 9 being faster
[20:55:31] <tomsmeding> johnjaye: it has to build all these modules https://github.com/agda/agda/blob/master/Agda.cabal#L287-L645
[20:56:18] <tomsmeding> johnjaye: if you're on linux, open htop, select the ghc process taking cpu, and press the L key, then look at which .hs file it's currently looking at
[20:56:27] <johnjaye> ksqsf: how did you know i was using ghc-8.10.7?
[20:56:41] <tomsmeding> doesn't tell you much about how far it is, but it should show progress :p
[20:56:45] *** Joins: econo (uid147250@user/econo)
[20:56:50] <tomsmeding> s/progress/action/
[20:57:57] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[20:58:02] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:58:50] *** Joins: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6)
[20:58:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[20:58:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[20:59:19] *** Quits: razetime (~quassel@49.207.203.87) (Ping timeout: 256 seconds)
[21:01:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[21:01:58] <[itchyjunk]> I tried to write the regular version of maximum first, it's kinda works but it seems to have a weird issue
[21:01:59] <[itchyjunk]> https://bpa.st/TRLA
[21:02:19] <[itchyjunk]> i tried "apple", [1..10], [1..100]. works fine for first 2
[21:02:32] <[itchyjunk]> the thrid one just freezes
[21:03:10] *** Joins: Akiva (~Akiva@user/Akiva)
[21:03:40] <[itchyjunk]> myMaximum [2,1,6,0,3]
[21:03:40] <[itchyjunk]> 6
[21:03:57] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[21:04:01] <[itchyjunk]> So works for some list, but definately not for myMaximum [1..100] and i am wondering where i went wrong
[21:04:15] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[21:04:15] <tomsmeding> try 'myMaximum [1..20]'
[21:04:30] <monochrom> OK, do you know the efficiency difference between "f (n+1) = let y = f n in y+y" and "f (n+1) = f n + f n"?
[21:04:38] <[itchyjunk]> that worked but took a second.
[21:04:49] <[itchyjunk]> i do not know the efficiency difference there :<
[21:04:53] <monochrom> That is, one of them takes time proportional to n, the other exponential time.
[21:04:57] * tomsmeding is happy to have guessed the right number there
[21:05:03] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[21:05:11] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:05:31] <[itchyjunk]> ah i will file this under complexity theory and move on then :x
[21:05:31] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:05:50] <tomsmeding> first one: f 2 = let y = (let y = (let y = f 0 in y+y) in y+y) in y+y
[21:06:17] <tomsmeding> ahem, f 3 is that
[21:06:36] <tomsmeding> second one: f 3 = ((f 0 + f 0) + (f 0 + f 0)) + ((f 0 + f 0) + (f 0 + f 0))
[21:06:42] <monochrom> This one is very easy baby-level complexity.
[21:07:20] <monochrom> If you use "f (n+1) = f n + f n", f n makes 2^n calls to f 0.
[21:07:26] *** Joins: fr33domlover (~fr33@141.226.170.143)
[21:08:00] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[21:08:52] *** Joins: Guest80 (~Guest80@host-95-245-231-154.retail.telecomitalia.it)
[21:09:31] <monochrom> This is also why DRY is important.
[21:09:41] <[itchyjunk]> right, it makes 2^n calls for all f n it seems
[21:09:55] <[itchyjunk]> hmm my function looks pretty dry :x
[21:10:09] <monochrom> OK, why are you saying "myMaximum xs" twice?
[21:10:27] <monochrom> In the same way my "f (n+1) = f n + f n" says "f n" twice?
[21:10:38] <[itchyjunk]> oh
[21:12:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[21:12:20] <monochrom> I have had students who, for other problems, said "f (x:xs) = .... f xs .... f xs .... f xs ...", so, 3 times.
[21:12:35] <[itchyjunk]> https://bpa.st/B2XQ
[21:12:51] <monochrom> OK good.
[21:13:10] <monochrom> Did you also know: 2-argument "max" exists >:)
[21:13:20] <[itchyjunk]> no i did not
[21:13:46] <monochrom> "Based on your past searches, Amazon thinks you may be interested in..."
[21:13:54] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[21:15:12] <[itchyjunk]> oh max blah blah returns maximum of two
[21:15:33] <[itchyjunk]> right, i saw that. i used somethign similar to find the longest length of nodes in itchyTree
[21:16:18] <EvanR_> max is cool, it can potentially return an answer without knowing everything about the arguments, which is important if the arguments are infinite or otherwise inconvenient to get all of
[21:17:20] <EvanR_> where as maximum can't return if you give it an empty list or an infinite list
[21:17:34] <janus> EvanR_: can't (<>) of Max do the same?
[21:18:18] <janus> sconcat only works for NonEmpty lists, so that issue is also taken care of
[21:18:48] <janus> NonEmpty also supports infinite lists, i guess
[21:19:33] <EvanR_> isn't <> of Max just max
[21:20:04] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[21:20:15] <EvanR_> but yeah any combination of maxes also work
[21:20:23] <EvanR_> finite
[21:20:39] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[21:20:59] <Guest80> does anyone have any experience using Haskell on Mac M1 and VSCode? I'm getting some weird "relocateSection: unexpected internal relocation type 10" errors
[21:21:14] <janus> EvanR_: yes https://hackage.haskell.org/package/base-4.16.0.0/docs/src/Data.Semigroup.html#line-238
[21:21:27] *** Quits: Major_Biscuit (~MajorBisc@c-001-018-021.client.tudelft.eduvpn.nl) (Ping timeout: 268 seconds)
[21:21:39] <janus> Guest80: which version of ghc are you using?
[21:21:55] <EvanR_> semigroups in general are cool
[21:22:07] <Guest80> 8.10.7
[21:22:16] <Guest80> (sorry I'm not used to IRC)
[21:22:24] <geekosaur> also which version of llvm?
[21:22:47] <geekosaur> (and where did you get it?)
[21:23:06] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:23:46] <[itchyjunk]> this seems to work : https://bpa.st/PSQA
[21:23:47] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:84bf:ceba:6161:c1f6) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:23:56] <Guest80> This is what I get running llvm-gcc --version
[21:23:57] <Guest80> Apple clang version 13.0.0 (clang-1300.0.29.30)
[21:23:57] <Guest80> Target: arm64-apple-darwin21.2.0
[21:24:17] <[itchyjunk]> althought this makes me wonder how you would use the result of improvedMaximum for a function that wants type `a` as parameter and not `Just a`
[21:24:26] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[21:25:04] *** Quits: ksqsf (~user@2001:da8:d800:611:d4b0:39ea:c0c9:ff22) (Ping timeout: 250 seconds)
[21:25:06] <Guest80> I installed my GHC from brew, I believe
[21:26:19] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:edf9:3833:cff9:92b3) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:26:19] <Guest80> from a bit of digging around it looks like there is a missing case in ghc/MachO.hs, in GHC, type 10 seems to be ARM64_RELOC_ADDEND
[21:26:32] <Guest80> but I'm not really familiar with the compiler
[21:28:13] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[21:28:46] <fgaz> johnjaye: if you want to see building progress at the module level _and_ disable parallelism you can build with -j1
[21:29:17] *** Joins: neurocyte0917090 (~neurocyte@IP-195080055024.dynamic.medianet-world.de)
[21:29:17] *** Quits: neurocyte0917090 (~neurocyte@IP-195080055024.dynamic.medianet-world.de) (Changing host)
[21:29:17] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[21:29:57] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[21:31:19] *** Quits: Guest5233 (~Guest52@80-100-97-100.ip.xs4all.nl) (Ping timeout: 268 seconds)
[21:33:53] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[21:35:16] <janus> Guest80: i don't think many in here are super familiar with the compiler, you could try asking in #ghc regarding your patch
[21:38:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[21:38:32] <Guest80> janus: thanks, I'll give it a try
[21:39:37] *** Quits: fr33domlover (~fr33@141.226.170.143) (Quit: fr33domlover)
[21:40:08] <supersven> Guest80: You may want to try a newer version of GHC. AFAIK there were many changes on the AARCH support lately.
[21:42:26] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[21:42:36] <Guest80> supersven: that would be great, I'll try
[21:42:57] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Ping timeout: 256 seconds)
[21:43:20] *** Joins: ksqsf (~user@2001:da8:d800:611:d4b0:39ea:c0c9:ff22)
[21:43:20] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[21:44:30] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:45:52] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 250 seconds)
[21:45:57] *** Joins: alp (~alp@user/alp)
[21:46:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[21:46:39] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:46:39] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:46:39] *** Joins: wroathe (~wroathe@user/wroathe)
[21:46:42] <Guest80> supersven: by newer version do you mean GHC version 9 or above?
[21:47:20] <geekosaur> I would avoid 9.2.1: it has native (instead if LLVM) support but severe bugs were found in its code generation post-release
[21:47:27] <geekosaur> 9.0.2 might work better
[21:47:36] <geekosaur> *instead of
[21:48:37] *** Quits: ksqsf (~user@2001:da8:d800:611:d4b0:39ea:c0c9:ff22) (Ping timeout: 240 seconds)
[21:48:39] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[21:49:49] <geekosaur> there was a bit of a bobble with releases through that whole period so 9.0.2 is actually the most recent version of ghc. 9.2.2 is due later this month, I think
[21:50:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:52:31] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[21:52:35] <Guest80> geekosaur: thanks, sorry for the newbie question but how do I install GHC 9.0.2 on an M1? I can't see binaries for M1, do I need to compile it from source?
[21:53:38] <geekosaur> in general we use ghcup instead of brew or other platform repo to install ghc these days
[21:54:07] <geekosaur> it's possible brew has a cask (I think that's the right term?) for it
[21:54:14] *** Joins: Akiva (~Akiva@user/Akiva)
[21:54:23] <maerwald> also make sure to install 9.2.1, because that's the only one with native codegen... the others require llvm and may cause linker bugs
[21:54:44] <geekosaur> native codegen has sign extension bugs and produces bad code :(
[21:54:49] <maerwald> GG
[21:54:52] <yushyin> but also avoid 9.2.1 :)
[21:54:58] <maerwald> ok, so don't install Haskell
[21:55:26] <EvanR_> obviously ghc is shit and we should start writing a new compiler
[21:55:32] <geekosaur> glwt
[21:55:35] <EvanR_> lol
[21:55:36] <Guest80> lol
[21:56:03] <geekosaur> although sometimes I really wish jhc hadn't dropped off into the ether
[21:57:13] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 268 seconds)
[21:58:38] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[21:58:49] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[21:59:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[21:59:52] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[22:00:23] <Guest80> how do I specify GHC version on GHCup?
[22:00:43] <Guest80> the command curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh.Â  reinstalled 8.10.7 for me
[22:00:58] <maerwald> Guest80: https://www.haskell.org/ghcup/guide/#basic-usage
[22:01:31] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:01:39] *** Joins: ksqsf (~user@2001:da8:d800:611:5d60:36d8:624a:54af)
[22:03:32] *** Quits: jkaye (~jkaye@2601:281:200:1958:cc69:95b3:52f2:6773) (Ping timeout: 240 seconds)
[22:03:55] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[22:05:42] *** Joins: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[22:05:54] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:06:14] *** Quits: ksqsf (~user@2001:da8:d800:611:5d60:36d8:624a:54af) (Ping timeout: 250 seconds)
[22:06:24] <fizzsegfaultbuzz> so this isn't haskell per-se so feel free to tell me to buzz off, but i thought a programmer with more expertise might have a good answer to this question:
[22:08:10] *** Joins: ksqsf (~user@2001:da8:d800:611:5d60:36d8:624a:54af)
[22:08:27] <fizzsegfaultbuzz> i have a function which maps points onto points (2d points onto 2d points). if i start from a uniform distribution of 2d points and apply f iteratively, i get a "limit" distribution
[22:08:31] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:08:52] <fizzsegfaultbuzz> my problem is that f samples extremely un-evenly from the region of the XY plane i am interested in
[22:09:07] *** Joins: jgeerds (~jgeerds@55d4090e.access.ecotel.net)
[22:09:42] <EvanR_> using floats?
[22:10:05] *** Joins: fef (~thedawn@user/thedawn)
[22:10:07] <fizzsegfaultbuzz> so i have X in [0,1] and Y in [0,1] and i want to know what the limit distribution of f looks like in those regions, although i only care about a fixed resolution for X an Y (think of pixelization,...)
[22:10:33] <fizzsegfaultbuzz> my two dimensional points are floats, yes
[22:10:59] <EvanR_> if you were at [1,2] x [1,2] uniform float would be a lot simpler xD
[22:11:02] <fizzsegfaultbuzz> what happens is that f sends nearly all points to (0.5, 0.5) but once in a rare while they will land somewhere else
[22:12:47] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[22:17:07] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:17:31] *** Quits: deadmarshal (~deadmarsh@95.38.230.192) (Ping timeout: 256 seconds)
[22:18:13] <tomsmeding> fizzsegfaultbuzz: wouldn't the limit distribution then be just [(0.5, 0.5)]?
[22:18:23] <tomsmeding> oh wait no that's not true
[22:18:26] <Henson> EvanR_: according to Criterion, I've been able to get a 10-15 times speed increase in my code by using a custom recursive function that uses a strict data type and completely avoids tuples and zipping/unzipping anywhere, as well as inlining one of the functions.
[22:18:43] <monochrom> We don't know the actual f enough to tell.
[22:18:44] <tomsmeding> fizzsegfaultbuzz: is f random?
[22:18:46] *** Quits: Guest80 (~Guest80@host-95-245-231-154.retail.telecomitalia.it) (Quit: Client closed)
[22:19:13] <monochrom> I also refuse to believe that a program actually iterates f for infinitely many times and actually hits the limit.
[22:19:34] <EvanR_> Henson, by avoid tuples, do you mean the usual tuple type, or any form of tupling (strict tuples too)
[22:19:37] <monochrom> There is still a difference between iterating 100 times and the limit.
[22:19:50] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[22:20:32] <Henson> EvanR_: any form of tupling.  I needed to return 7 numbers from the function, so instead of a 7-tuple, I just made a new datatype with 7 strict Double fields in it.
[22:21:03] <monochrom> Sounds like s/tupling/lazy tupling/
[22:21:17] *** Quits: ksqsf (~user@2001:da8:d800:611:5d60:36d8:624a:54af) (Ping timeout: 240 seconds)
[22:21:23] <EvanR_> that's a 7 tuple
[22:21:29] <fizzsegfaultbuzz> i was thinking of creating a table mapping the preimage to the image and then uniformly perturbing the preimage of points which map to locations i like
[22:21:47] <fizzsegfaultbuzz> then i would iterate, updating that table
[22:22:21] <Henson> EvanR_: ok, well, it's not using a (Double,Double,Double,Double,Double,Double,Double)
[22:22:31] <fizzsegfaultbuzz> that would probably create a bit of a fixed error with respect to the limit distribution but that is probably ok
[22:22:36] <EvanR_> yeah strict records for that kind of data is often a big win
[22:22:52] <EvanR_> like data V2 a = V2 !a !a
[22:23:03] <EvanR_> good for Int, Double, etc
[22:23:21] <Henson> EvanR_: yes, like that
[22:23:27] <Henson> monochrom: right, no more lazy tupling
[22:23:52] <EvanR_> another way is to make sure the components of the lazy tuple are evaluated before constructing the tuple
[22:24:08] <EvanR_> which might be a pain in the ass or not, hence these types
[22:24:09] <Henson> EvanR_: like seq a $ seq b (a,b)
[22:24:13] <EvanR_> yes
[22:24:13] <tomsmeding> fizzsegfaultbuzz: so your function is [0,1]x[0,1] -> [0,1]x[0,1], and you want the distribution of lim_{n -> \infty} f^n((x, y)) if (x, y) is uniformly chosen from [0,1]x[0,1]?
[22:24:22] <EvanR_> Henson, or bang patterns
[22:24:39] <Henson> EvanR_: but bang patterns can only be used on the left hand side, correct?
[22:24:50] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:24:51] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[22:24:54] <EvanR_> yes
[22:25:02] <tomsmeding> if so, if f sends most (as in, more than half or something) of the points to (0.5,0.5), wouldn't the limit distribution then not just be {f((0.5,0.5))} ?
[22:25:02] <EvanR_> which is often a convenient place to put them
[22:25:10] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:25:11] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:25:22] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:25:30] <fizzsegfaultbuzz> tomsmeding: a bit of a correction there is that i initialize the distribution of points to be uniform
[22:25:37] <Henson> EvanR_: I did try seqing the variables before putting them in to a lazy 7-tuple, and that made the code about 2 times faster.  But using the strict data type made it 10-15 times faster.
[22:25:38] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[22:25:40] <tomsmeding> fizzsegfaultbuzz: is f random or deterministic?
[22:25:45] <fizzsegfaultbuzz> tomsmeding: and then iterative application of f leads to a fixed, complex, non-uniform distribution
[22:25:48] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[22:25:56] <fizzsegfaultbuzz> f is fixed
[22:26:00] <fizzsegfaultbuzz> no, sorry
[22:26:03] <fizzsegfaultbuzz> f is stochastic
[22:26:05] <tomsmeding> is f random or deterministic? :p
[22:26:06] <tomsmeding> ah
[22:26:07] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:26:15] <fizzsegfaultbuzz> so there's a sort of a coinflip with each call to f
[22:26:15] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[22:26:19] <tomsmeding> so f is a markov chain
[22:26:58] <EvanR_> Henson, I bet there was another optimization where your strict 7 tuple was also UNPACKed, hence having the Doubles in the record instead of pointers to something in the record
[22:27:41] <Henson> EvanR_: can you elaborate on that?  I don't really understand.
[22:27:53] <tomsmeding> fizzsegfaultbuzz: is f easily describable, you might be able to compute the limit distribution algebraically
[22:29:18] <tomsmeding> fizzsegfaultbuzz: what do you mean when you say "what the limit distribution of f looks like in a particular region"? What the limit distribution looks like when you sample input points only from that region, or what that portion of the limit distribution looks like if you start with fully uniform inputs?
[22:29:18] <tomjagua1paw> Henson: I would be very interested to know the performance if you put Strict around your tuple: https://hackage.haskell.org/package/strict-wrapper-0.0.0.0/docs/Data-Strict-Wrapper.html#v:Strict
[22:29:21] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[22:29:38] <EvanR_> most values in haskell are boxed, meaning they are manipulated as a pointer to heap object, containing the value. A tree data type is made of a bunch of pointer to boxes
[22:30:03] <EvanR_> a record or tuple is at best just a really flat tree
[22:30:19] <EvanR_> unpacking a record field means the value is stored in the record object itself
[22:31:22] *** tomjagua1paw is now known as tomjaguarpaw
[22:31:50] <EvanR_> now the verb "unpack" makes no sense to me, coffee failing me
[22:32:10] <tomsmeding> "do not pack inside a box"
[22:32:27] <monochrom> yeah, analogous to "unbox".
[22:32:53] <monochrom> Now, it is the name "Boxing Day" that makes no sense to me, why is it not "Unboxing Day"? >:)
[22:32:54] <tomjaguarpaw> Reversing the packing that implicitly happened.  Perhaps "nonpack" and "nonbox" would be better.
[22:33:09] *** Joins: vicfred (~vicfred@user/vicfred)
[22:33:31] <tomsmeding> monochrom: because the ones that pack the boxes are always late and still have to do it frantically on the unboxing day?
[22:35:20] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[22:35:51] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[22:35:54] *** Joins: johnjaye (~pi@173.209.65.233)
[22:36:17] <monochrom> {-# language Dec26 #-} = implies StrictData, and moreover, adds {-# UNPACK #-} wherever valid. >:)
[22:36:44] <tomsmeding> isn't that gibbon
[22:36:55] <monochrom> I don't know!
[22:36:57] *** Joins: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com)
[22:37:19] <tomsmeding> https://github.com/iu-parfunc/gibbon
[22:37:26] <tomsmeding> read some papers but never tried
[22:37:37] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd9f:9c7:a4ae:c7f9)
[22:37:42] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:37:55] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[22:38:18] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:39:01] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce) (Ping timeout: 240 seconds)
[22:39:10] <monochrom> Interesting, but Dec26 does not optimize data layout order.
[22:39:28] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[22:39:28] <tomsmeding> not sure gibbon does either
[22:39:52] <tomsmeding> but there is also parallel gibbon, which attemps to get a nice middle ground between serialising everything and still being able to process parts of a tree in parallel
[22:40:00] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[22:40:05] <monochrom> It sounds like one of the goals of gibbon. Although, "goal" also means work in progress.
[22:40:23] <tomsmeding> ah, could be
[22:40:37] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[22:41:19] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[22:41:19] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[22:41:24] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[22:43:06] <[itchyjunk]> behold, i am monading https://bpa.st/ZHTQ
[22:43:26] <monochrom> That's just functoring.
[22:43:53] <EvanR_> just a functor wound
[22:44:18] <monochrom> OK OK fine! "I'm Haskelling" can also mean doing just a little part of Haskell.
[22:44:50] <monochrom> I'm humaning.
[22:45:04] <[itchyjunk]> I am lifting a -> b to Maybe a -> Maybe b hence monading?
[22:45:09] <tomsmeding> monochrom: is a cat, I always knew it
[22:45:14] <ephemient> :t maybe Nothing . (Just .) -- pointless
[22:45:15] <lambdabot> (a1 -> a2) -> Maybe a1 -> Maybe a2
[22:45:33] <tomsmeding> [itchyjunk]: that's what fmap does, and fmap is in the Functor typeclass
[22:45:41] <tomsmeding> every Monad is a Functor, but a Functor does not make a Monad
[22:45:50] <monochrom> Actually that is not entirely pointless. Behind it is the theorem that a lot of fmap's are catamorphisms.
[22:46:51] *** Joins: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de)
[22:47:14] <EvanR_> [itchyjunk], lifting an (a -> b) to (f a -> f b) is decidedly functoring
[22:47:14] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:47:15] <boxscape_> Is there a way to have an export list that exports everything except for a single name (without explicitly listing everything else)?
[22:47:34] <tomsmeding> why does everyone have _ today
[22:47:42] <boxscape_> It's underscore day
[22:48:14] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[22:48:17] <tomsmeding> boxscape_: no, but you can put all the stuff in an internal module, then have the public module be 'module Public (module Internal) where import Internal hiding (stuff)'
[22:48:21] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:48:23] <monochrom> It's on the wishlists of many people.
[22:48:26] <boxscape_> okay, thanks
[22:48:32] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Quit: leaving)
[22:49:00] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[22:49:26] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:50:29] *** Joins: Akiva (~Akiva@user/Akiva)
[22:53:37] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[22:56:49] *** Joins: simendsjo (~user@84.211.91.241)
[22:58:28] <maerwald> tomsmeding: that produces annoying haddock, doesn't it?
[22:58:38] <tomsmeding> yeah it does
[23:00:11] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[23:00:41] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[23:02:09] <awpr> `{-# OPTIONS_HADDOCK not-home #-}` on the internal module should help: https://haskell-haddock.readthedocs.io/en/latest/markup.html#module-attributes
[23:06:47] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Remote host closed the connection)
[23:06:58] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce)
[23:09:21] <boxscape_> ah, good to know
[23:10:34] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[23:11:09] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[23:11:49] *** Joins: acidsys (~LSD@2.lsd.systems)
[23:12:06] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:12:06] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Client Quit)
[23:12:27] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce) (Ping timeout: 268 seconds)
[23:12:31] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[23:12:50] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:12:53] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Remote host closed the connection)
[23:13:27] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[23:13:45] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[23:14:09] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:14:42] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[23:15:26] *** Joins: jkaye (~jkaye@2601:281:200:1958:837d:401b:4a0:3b8f)
[23:15:40] *** Quits: ubert (~Thunderbi@p200300ecdf0994202d2de89ac733253b.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:16:38] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[23:16:39] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[23:16:58] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:17:38] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[23:17:46] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[23:19:50] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:21:33] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[23:22:12] *** Joins: Morrow (~Morrow@ool-1826f675.dyn.optonline.net)
[23:22:17] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[23:23:07] *** Joins: Guest80 (~Guest80@host-95-245-231-154.retail.telecomitalia.it)
[23:23:33] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[23:25:54] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[23:28:37] *** Quits: Morrow (~Morrow@ool-1826f675.dyn.optonline.net) (Ping timeout: 240 seconds)
[23:30:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:33:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd9f:9c7:a4ae:c7f9) (Remote host closed the connection)
[23:34:33] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[23:35:02] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:35:42] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd9f:9c7:a4ae:c7f9)
[23:37:48] *** Joins: juhp (~juhp@128.106.188.82)
[23:40:18] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce)
[23:40:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[23:41:11] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:41:57] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[23:42:08] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[23:44:11] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:45:50] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[23:46:13] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Ping timeout: 240 seconds)
[23:46:37] *** Joins: Pickchea (~private@user/pickchea)
[23:47:10] *** Quits: kuribas (~user@ptr-25vy0i81lhv78yduvdy.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[23:47:36] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 268 seconds)
[23:48:23] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[23:49:17] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[23:53:22] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:53:35] *** Joins: briandaed (~briandaed@185.234.208.208.r.toneticgroup.pl)
[23:54:33] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Quit: leaving)
[23:54:48] <fizzsegfaultbuzz> tomsmeding: i think that as long as the starting distribution isn't "strange" the limit distribution is always the same, although that's an informal statement
[23:54:55] <fizzsegfaultbuzz> tomsmeding: f is very nonlinear
[23:56:41] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[23:58:27] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[23:58:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:59:15] *** Quits: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com) (Remote host closed the connection)
[23:59:33] *** Joins: Erutuon (~Erutuon@user/erutuon)
