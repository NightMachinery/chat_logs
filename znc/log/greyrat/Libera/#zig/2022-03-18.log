[00:12:39] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[00:32:11] <cot> Hm, so const global structs (dunno about others) can't reference themselves (via a pointer)? Why is this?
[00:32:57] <cot> (i.e., 'pub const foo = Foo{ ... .bar = &foo }`
[00:33:42] <cot> I guess it's because codegen won't know where the &foo reference is until after the whole struct is processed?
[00:35:05] <ifreund> cot: it's a current limitation of the compiler, issue #131
[00:35:17] <cot> I see
[00:35:31] <cot> Well, I can work around it fairly easily, not a big deal
[00:52:24] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[00:52:45] *** Quits: moog_ (~moog@98.97.86.136) (Ping timeout: 256 seconds)
[00:58:31] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[00:59:15] <cot> Welp, just spent 30 min debugging something only to realize I was still running the binary from zig-cache/bin/
[01:09:32] *** Quits: marler8997 (~marler899@96-19-96-19-162-162.cpe.sparklight.net) (Ping timeout: 240 seconds)
[01:14:17] *** Quits: pkap (~pkap@193.32.127.231) (Ping timeout: 256 seconds)
[01:24:12] *** Joins: rgrinberg (~textual@177.241.245.222)
[01:31:26] *** Joins: moog (~moog@107.126.53.83)
[01:53:43] *** Quits: d0p1_ (~d0p1@gateway/tor-sasl/d0p1) (Remote host closed the connection)
[01:58:33] *** Quits: jemius (~imperator@200116b82d37d700178c48b50fab1f57.dip.versatel-1u1.de) (Quit: Leaving)
[02:07:11] *** Joins: moog_ (~moog@98.97.86.136)
[02:09:57] *** Quits: moog (~moog@107.126.53.83) (Ping timeout: 252 seconds)
[02:22:53] <haze> lol
[02:24:45] <novakane> I did the other way yesterday , change a lot of things, everything was working till I saw I was not running the bin in zig-cache lol
[02:25:12] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 250 seconds)
[02:26:33] *** Quits: boardwalk (~boardwalk@2605:a601:aac3:100:189f:8d9a:1874:af54) (Quit: Ping timeout (120 seconds))
[02:26:50] *** Joins: boardwalk (~boardwalk@2605:a601:aac3:100:8a2c:8f92:b935:d47a)
[02:27:23] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[02:28:26] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[02:32:40] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[02:32:57] *** Joins: marler8997 (~marler899@96-19-96-19-162-162.cpe.sparklight.net)
[02:46:33] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[02:48:32] *** Quits: ur5us (~ur5us@203.86.198.200) (Ping timeout: 240 seconds)
[03:03:51] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 252 seconds)
[03:29:56] *** Joins: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net)
[03:37:15] <andrewrk> -0.0 and +0.0 is an example of two different bit patterns that a float can be in memory and represent the same mathematical value. are there any other examples?
[03:37:28] <andrewrk> does NaN have more than 1 representation?
[03:39:49] <companion_cube> it does
[03:40:00] <companion_cube> (sorry if it was rhetorical?)
[03:45:34] *** Joins: ur5us (~ur5us@203.86.198.200)
[03:49:51] <leah2> a lot more :)
[03:50:12] <companion_cube> yeah, nan-packing is a thing for a reason
[03:50:17] <leah2> but all nan are different, even for the same bit pattern
[03:51:44] *** Quits: duck2 (~duck2@146.185.156.161) (Quit: Ping timeout (120 seconds))
[03:57:27] <andrewrk> good to know
[03:57:43] *** Joins: Kingsquee (~Kingsquee@node-1w7jr9plitnrvqeoejcxopijn.ipv6.telus.net)
[03:57:45] <andrewrk> had to normalize float values in the compiler's implementation of Value.hash because we want to use that as a key in a hash map
[03:58:04] *** Joins: duck2 (~duck2@146.185.156.161)
[03:59:44] *** Joins: ltriant_ (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com)
[04:00:09] <companion_cube> yeah basically you can't put a nan as a key
[04:00:37] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 240 seconds)
[04:00:45] <companion_cube> (or you'd have to bitcast it to something with actual equality)
[04:00:53] <companion_cube> it's why rust has PartialEq and PartialOrd: for floats
[04:02:05] <demize> I guess you could, but it would require rather unhelpful semantics.  Like, you couldn't then get the value out by the key, only by iterating over all values, and if you insert the same NaN key twice... it would have to store both values?
[04:02:20] <companion_cube> demize: yeah that's not useful, if you can't `get` it
[04:15:37] *** Quits: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[04:20:31] *** Joins: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net)
[04:25:26] <andrewrk> for zig we need something like `fn foo(comptime x: f32) void {}` to work though - the generic function has to get monomorphized if you instantiate it with NaN
[04:30:52] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[04:31:16] *** Joins: Tekk_ (~tekk@cpe-76-182-45-53.nc.res.rr.com)
[04:33:36] *** Quits: winter (~winter@user/winter) (Quit: The Lounge - https://thelounge.chat)
[04:33:58] *** Joins: winter (~winter@user/winter)
[04:33:58] *** Quits: Tekk (~tekk@89.45.224.87) (Ping timeout: 260 seconds)
[04:38:16] *** Quits: winter (~winter@user/winter) (Client Quit)
[04:38:24] <companion_cube> honestly, put a comptime assertion that !@isNan(x) or whatever
[04:38:29] <companion_cube> code that does that is just broken
[04:39:03] <companion_cube> (and if you can, you might have to cheat and compare nans bit-by-bit
[04:39:05] <companion_cube> )
[04:39:23] *** Joins: winter (~winter@user/winter)
[04:40:56] <leah2> hashing floats in general is already questionable :)
[04:41:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[04:45:20] <companion_cube> same reason really
[04:48:00] *** Quits: winter (~winter@user/winter) (Quit: The Lounge - https://thelounge.chat)
[04:48:03] <andrewrk> hmm I'll have to think about that - making it a compile error to instantiate a generic function with (even indirectly) a float value that is NaN
[04:48:33] <andrewrk> here's another fun one: [*:nan]f32
[04:49:08] *** Joins: winter (~winter@user/winter)
[04:49:22] <companion_cube> :D
[04:49:24] <companion_cube> my god
[04:49:33] <companion_cube> whose twisted mind could even dream of that
[04:54:56] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:a050:dd5c:be2b:f6f2) (Ping timeout: 252 seconds)
[04:58:04] <demize> Pleas no.  D;
[05:12:54] *** Quits: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[05:14:00] *** Quits: ndwk (~ndwk@user/ndwk) ()
[05:51:41] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[06:20:48] *** Joins: Tekk__ (~tekk@206.217.205.91)
[06:23:02] *** Quits: Tekk_ (~tekk@cpe-76-182-45-53.nc.res.rr.com) (Ping timeout: 240 seconds)
[06:46:26] *** Quits: NickH (~hastings@z213043.dynamic.ppp.asahi-net.or.jp) (Remote host closed the connection)
[06:46:48] *** Quits: rgrinberg (~textual@177.241.245.222) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:50:19] *** Joins: NickH (~hastings@z213043.dynamic.ppp.asahi-net.or.jp)
[07:12:32] *** Quits: frmdstryr (~jrm@172.58.206.180) (Ping timeout: 240 seconds)
[07:24:24] *** Tekk__ is now known as Tekk
[07:45:59] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[07:48:15] *** Quits: mikezackles__ (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[07:53:02] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[08:02:28] *** Joins: rgrinberg (~textual@177.241.245.222)
[08:09:17] *** Joins: cr1901_ (~cr1901@2601:8d:8600:911:a050:dd5c:be2b:f6f2)
[08:35:04] *** cr1901_ is now known as cr1901
[08:44:13] *** Quits: ur5us (~ur5us@203.86.198.200) (Ping timeout: 256 seconds)
[09:04:57] *** Quits: Kingsquee (~Kingsquee@node-1w7jr9plitnrvqeoejcxopijn.ipv6.telus.net) ()
[09:15:12] *** Joins: moog__ (~moog@98.97.83.146)
[09:17:51] *** Quits: moog_ (~moog@98.97.86.136) (Ping timeout: 252 seconds)
[09:20:46] *** Quits: moog__ (~moog@98.97.83.146) (Ping timeout: 250 seconds)
[09:43:39] *** Quits: rgrinberg (~textual@177.241.245.222) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:09:14] *** Quits: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net) (*.net *.split)
[10:09:14] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (*.net *.split)
[10:09:15] *** Quits: flux_control (~flux@sourcemage/wizard/flux) (*.net *.split)
[10:09:15] *** Quits: Miaourt1 (~Miaourt@static.10.244.203.116.clients.your-server.de) (*.net *.split)
[10:14:34] *** Joins: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net)
[10:14:34] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[10:14:34] *** Joins: flux_control (~flux@sourcemage/wizard/flux)
[10:14:34] *** Joins: Miaourt1 (~Miaourt@static.10.244.203.116.clients.your-server.de)
[10:49:48] *** Joins: arkurious (~arkurious@user/arkurious)
[11:17:28] *** Joins: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net)
[11:31:29] *** Joins: moog (~moog@98.97.81.132)
[12:06:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[12:42:37] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[12:59:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[13:02:55] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:18:02] *** Joins: mikezackles__ (~mikezackl@gateway/tor-sasl/mikezackles)
[13:42:35] *** Quits: mikezackles__ (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[13:48:35] *** Joins: lumo_e (~enrico@151.29.53.201)
[14:04:04] <bgiannan> is there an equivalent of getc in zig or do i have to use a one char long buffer ?
[14:07:24] <daurn> bgiannan: `reader.readByte()`
[14:09:17] <bgiannan> thx
[14:09:33] <bgiannan> didn't saw reader
[14:16:38] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[14:35:03] *** Joins: NeoCron (~NeoCron@p200300e47f277d00ff410b6acd6256a7.dip0.t-ipconnect.de)
[14:37:39] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[14:51:37] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7::4)
[15:02:32] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7::4) (Remote host closed the connection)
[15:02:56] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7::2)
[16:15:36] *** Joins: frmdstryr (~jrm@172.58.206.180)
[16:21:35] *** Joins: cr1901_ (~cr1901@2601:8d:8600:911:8593:dd28:815f:57dc)
[16:25:17] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:a050:dd5c:be2b:f6f2) (Ping timeout: 240 seconds)
[16:25:39] *** Joins: kamidev (~kamidev@h-158-174-187-116.NA.cust.bahnhof.se)
[16:26:11] *** Quits: kamidev (~kamidev@h-158-174-187-116.NA.cust.bahnhof.se) (Client Quit)
[16:51:03] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[16:53:42] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Quit: WeeChat 3.4)
[17:09:45] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[17:14:49] *** Quits: haliucinas (~haliucina@5.20.153.21) (Remote host closed the connection)
[17:20:08] *** Joins: haliucinas (~haliucina@5.20.153.21)
[17:25:45] *** Joins: mikezackles__ (~mikezackl@gateway/tor-sasl/mikezackles)
[17:50:10] *** Joins: pkap (~pkap@193.32.127.231)
[17:54:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:55:59] *** Quits: ovf (sid19068@2a03:5180:f:4::4a7c) (Ping timeout: 250 seconds)
[17:56:04] *** Quits: haliucinas (~haliucina@5.20.153.21) (Remote host closed the connection)
[17:57:15] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[17:57:24] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[17:57:32] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[17:57:46] *** Joins: ovf (sid19068@id-19068.hampstead.irccloud.com)
[17:58:57] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: I'm a quit message virus. Please replace your old line with this line and help me take over the world. <screw you aloo_shu my old line was better and more creative!>)
[18:04:48] *** Joins: haliucinas (~52b4903d@5.20.153.21)
[18:06:51] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7::2) (Remote host closed the connection)
[18:07:15] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7::2)
[18:13:36] *** Quits: pkap (~pkap@193.32.127.231) (Quit: Client closed)
[18:16:12] *** Quits: ravella (~ravella@user/ryanavella) (Ping timeout: 240 seconds)
[18:17:26] *** Joins: phaleth (~user@user/phaleth)
[18:29:02] *** Quits: frmdstryr (~jrm@172.58.206.180) (Ping timeout: 240 seconds)
[18:30:15] *** Joins: ravella (~ravella@user/ryanavella)
[18:30:26] *** Joins: frmdstryr (~jrm@172.58.206.180)
[18:33:30] *** Joins: pkap (~pkap@193.32.127.231)
[18:38:02] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7::2) (Ping timeout: 250 seconds)
[18:38:55] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7::2)
[18:40:01] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[18:42:21] *** Quits: pkap (~pkap@193.32.127.231) (Quit: Client closed)
[18:46:00] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:52:28] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[18:52:28] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[18:52:28] *** Joins: tane (~tane@user/tane)
[18:55:35] *** Joins: pkap (~pkap@193.32.127.231)
[18:58:22] *** Joins: hwj (~hwj@i5C7414E8.versanet.de)
[18:59:56] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 245 seconds)
[19:03:07] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[19:19:31] *** Joins: rgrinberg (~textual@177.241.245.222)
[19:20:07] *** Quits: rgrinberg (~textual@177.241.245.222) (Client Quit)
[19:29:41] *** Quits: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net) (Quit: Konversation terminated!)
[19:31:13] <cot> Is there any way to get longer stacktraces from the allocator complaining of leaked memory?
[19:31:36] <cot> I'm getting just four, all with addresses in array_list.zig in the stdlib, and none in my own code.
[19:33:47] <tsmanner> Is there a missing `.deinit` call on that array list?
[19:38:27] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:39:28] <cot> I'm pretty sure there is, but I'd have to check each usage of array_list in my code (there are a whole bunch of them)
[19:39:52] <cot> I'd rather the stacktrace hint at what isn't being deallocated
[19:40:50] <cot> http://ttm.sh/iHU.txt << this is the stacktrace I'm getting.
[19:41:13] <tsmanner> Meaning which insert/append/etc call the leaked elements came from?
[19:42:06] <cot> Yup, that would be it
[19:45:05] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[19:45:18] *** Quits: pkap (~pkap@193.32.127.231) (Quit: Client closed)
[19:45:22] <tsmanner> I suspect it's not due to any one insert/append, since it allocates memory only sometimes when a new element is added.  I wonder if there's an easy way to identify which ArrayList is the leaky one
[19:47:02] <cot> hm true
[19:47:29] <tsmanner> I don't see anything in the leak trace that identifies the allocator used, only the addresses that leaked and what looks like the instruction address for the line-of-code
[19:47:53] <cot> It occurs even when the program is immediately shut off, so I *think* can narrow it the leak down to some (bulky) initialization routines
[19:48:04] <cot> Still this will be unpleasant
[19:53:16] <tsmanner> Have you used valgrind memcheck before?  Assuming debug symbols are present, that should be able to provide the full stack for each memory allocation and emit an error for any mismatched new/delete.  IIRC it works with compiled zig code, though I haven't tried it myself.
[19:55:28] <cot> hm, I'll try that
[19:58:49] *** Joins: pkap (~pkap@193.32.127.231)
[19:58:57] <cot> yikes, no, valgrind's telling me that all heap blocks were freed
[19:59:24] <cot> Not sure how valgrind detects leaked memory, does it assume that the program will use valgrind's inbuilt malloc implementation?
[19:59:49] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[20:00:08] <cot> >9 allocs, 9 frees, 125,752 bytes allocated< Maybe I'm misunderstanding what "allocs" mean, but there are way more than 9 allocations going on
[20:00:19] <dutchie> iirc valgrind struggles with mmap'ed memory, which is what page_allocator uses
[20:00:28] <dutchie> there are some options you can pass which helps it out
[20:01:53] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:02:51] *** Quits: haze (~haze@user/haze) (Ping timeout: 256 seconds)
[20:04:03] <tsmanner> That could do it, also if the zig code isn't using libc malloc (which seems likely to me) then it won't notice.  You could probably get valgrind to notice if you use the c allocator, but that's starting to feel like a real duct-tape and toothpicks way to go about this.
[20:05:13] <luuk> cot: There's a `stack_trace_frames` option you can pass to increase this. For example, the self-hosted compiler has a configurable option to set this: https://github.com/ziglang/zig/blob/master/src/main.zig#L132
[20:05:48] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[20:05:50] <cot> Aha, this is what I was looking for, thanks!
[20:06:00] <luuk> You're welcome :)
[20:06:49] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[20:06:59] *** Quits: pkap (~pkap@193.32.127.231) (Quit: Client closed)
[20:07:01] *** Quits: lumo_e (~enrico@151.29.53.201) (Ping timeout: 240 seconds)
[20:09:49] <motiejus> hi folks. How can I make a list of anonymous struct literals? I can't get the syntax to work right, the problem is likely in the `<...>` of the second test: https://paste.sr.ht/~motiejus/6b744445472c8351e545a182c0a7690dba2eed3e
[20:12:54] *** Joins: pkap (~pkap@193.32.127.231)
[20:17:33] <luuk> motiejus: https://zigbin.io/0ed2b8
[20:18:57] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[20:19:28] <luuk> Note that in this case the 'want' case with '0' will have its type as `comptime_int`. So you need to coerce it in the expectEqual to ensure the result's type matches.
[20:19:46] <motiejus> @luuk that helps for top-level declaration, but the annoying part is the inner one where I always have to specify the `.want` and the `.got` fields
[20:20:19] <motiejus> trying variations of what you've sent ... 
[20:20:28] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[20:20:44] *** Joins: bindu (~bindu@user/bindu)
[20:21:40] <tsmanner> luuk you beat me to it, I went in the tuple direction with this https://godbolt.org/z/fsTe8f8d8
[20:22:02] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[20:22:04] <motiejus> i.e. the top-level array should be of whatever type (I am OK to specify it), but I am looking for a way to avoid specifying the type of each element
[20:22:05] <motiejus> and the field names
[20:23:32] <motiejus> inline was missing! Whoah. Thanks tsmanner!
[20:24:03] *** Joins: xackus (~xackus@185.15.0.3)
[20:24:22] <motiejus> ah, that's because it's unrolling a tuple. Nice!
[20:24:51] <tsmanner> I had it without that at first too, luuk's example got me to that :)
[20:25:03] <luuk> Teamwork :)
[20:32:05] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:45:25] *** Quits: hwj (~hwj@i5C7414E8.versanet.de) (Ping timeout: 240 seconds)
[21:22:49] *** Joins: rgrinberg (~textual@177.241.245.222)
[21:30:12] *** Joins: moog_ (~moog@107.126.53.19)
[21:30:28] *** Joins: hwj (~hwj@i5C740855.versanet.de)
[21:31:06] *** Quits: anthon (~Thunderbi@p2e52a817.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:31:25] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[21:32:05] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[21:32:12] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[21:32:40] *** Quits: moog (~moog@98.97.81.132) (Ping timeout: 250 seconds)
[21:34:13] *** Joins: moog__ (~moog@98.97.81.132)
[21:34:31] *** Quits: marler8997 (~marler899@96-19-96-19-162-162.cpe.sparklight.net) (Quit: Leaving)
[21:36:34] *** Quits: moog_ (~moog@107.126.53.19) (Ping timeout: 250 seconds)
[21:38:17] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:40:14] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[21:40:22] *** Joins: Techcable (~Techcable@168.235.93.147)
[21:47:46] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[21:49:57] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[22:02:00] *** Quits: linuxgemini (~linuxgemi@user/linuxgemini) (Remote host closed the connection)
[22:02:23] *** Joins: lun43 (~luna@user/lun4)
[22:02:36] *** Joins: linuxgemini (~linuxgemi@user/linuxgemini)
[22:03:08] *** Quits: lun4 (~luna@user/lun4) (Read error: Connection reset by peer)
[22:03:09] *** lun43 is now known as lun4
[22:03:26] *** Joins: noodlez (nathaniel@2600:3c01::f03c:92ff:fe58:e8ae)
[22:11:32] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[22:22:33] *** Quits: pkap (~pkap@193.32.127.231) (Quit: Client closed)
[22:25:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[22:25:41] *** Joins: anthon (~Thunderbi@p2e52a817.dip0.t-ipconnect.de)
[22:36:21] *** Quits: moog__ (~moog@98.97.81.132) (Ping timeout: 250 seconds)
[22:48:17] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:dc77:d173:a9b9:d810)
[23:15:40] *** Joins: ur5us (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d)
[23:23:30] *** Joins: pkap (~pkap@193.32.127.231)
[23:24:49] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[23:29:17] *** Joins: amk (~amk@109.255.169.126)
[23:32:06] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7::2) (Quit: WeeChat 3.4.1)
[23:36:05] *** Joins: d0p1 (~d0p1@gateway/tor-sasl/d0p1)
[23:37:57] *** Quits: ur5us (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d) (Ping timeout: 240 seconds)
[23:41:46] *** Quits: rgrinberg (~textual@177.241.245.222) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:41:47] *** Quits: hwj (~hwj@i5C740855.versanet.de) (Ping timeout: 250 seconds)
[23:43:20] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:53:32] *** Joins: moog__ (~moog@mobile-166-173-186-209.mycingular.net)
[23:55:21] *** Joins: pg42 (~pg42@2a02:a03f:8b17:ca00:2063:a423:9867:bba4)
[23:58:34] *** Joins: Guest49 (~Guest49@dynamic-077-179-068-059.77.179.pool.telefonica.de)
[23:58:55] *** Parts: Guest49 (~Guest49@dynamic-077-179-068-059.77.179.pool.telefonica.de) ()
