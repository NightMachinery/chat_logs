[00:26:57] *** Quits: tyson2 (~user@toroon12-3096782363.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[00:33:54] *** Quits: silasfox (~sbv@xdsl-87-78-183-74.nc.de) (Ping timeout: 240 seconds)
[01:04:12] <[itchyjunk]> Hi.
[01:04:15] <[itchyjunk]> "Consequently, assigning a variable a new value changes what object the variable refers to but has no effect on the previously referenced object."
[01:04:20] <[itchyjunk]> This is opposite of python right?
[01:04:43] <[itchyjunk]> i remember having a variable var and i did tmp = var to copy var but they both pointed to the same thing and i messed me up.
[01:05:00] <[itchyjunk]> It seems in common lisp, i can do tmp = var to copy ?
[01:05:50] <White_Flame> no, it's the same as python
[01:06:14] <White_Flame> if it's a mutable object, (let ((a b)) ...) means that A and B reference the same value
[01:08:12] <[itchyjunk]> hmm
[01:12:31] <[itchyjunk]> hmm so i wanted to have a function that has 3 inputs. if the sum of first 2 is equal to 3, print the product of first 2.
[01:12:42] <[itchyjunk]>  (defun test (a b c) (= (+ a b) c ) ) 
[01:13:04] <[itchyjunk]> one way to do it is use if with test and the other would be to use if within test right?
[01:13:10] <[itchyjunk]> Is there a better or worse way here?
[01:13:38] <White_Flame> if you have an IF within the test, then you're deciding between 2 other return values
[01:13:49] <White_Flame> or you need to pass in behavior you want on the true/false cases as function objects or something
[01:14:00] <White_Flame> what's wrong with the TEST function you currently have there?
[01:14:13] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:14:26] <[itchyjunk]> it doesn't have the if logic so i'd have to check if test is true and if so print a*b
[01:14:44] <[itchyjunk]> or return a*b rather
[01:15:03] <[itchyjunk]> if a+b = c, return a*b else do nothing
[01:15:10] <[itchyjunk]> would be roughtly what i want to do
[01:19:41] <[itchyjunk]> hm i was hoping this would work but didn't
[01:19:42] <[itchyjunk]> (defun zz (a b c) (if (test (a b c)) (* a b) (print "not true")))
[01:20:31] <[itchyjunk]> The function TEST is called with one argument, but wants exactly three.
[01:20:31] <[itchyjunk]> ; in: DEFUN ZZ
[01:20:31] <[itchyjunk]> ;     (A B C)
[01:22:44] <White_Flame> you can tell what that error message is describing, right?
[01:23:27] <[itchyjunk]> right but i can't quite tell why. i feel like test ( a b c) is calling test with 3 parameters
[01:23:59] <White_Flame> it's not
[01:24:09] <White_Flame> (test <param>) is what you have now
[01:24:14] <White_Flame> trying to call A as a function
[01:24:28] <[itchyjunk]> oh i see
[01:24:37] <[itchyjunk]> like (+ a b) not (+ (a b) )
[01:26:24] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[01:28:01] <[itchyjunk]> Can I do nothing if false?
[01:31:03] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[01:51:22] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 245 seconds)
[02:01:26] <White_Flame> (when <test> . <body>) runs the body on test being true, ignoring the 'else' case
[02:01:34] <White_Flame> same with UNLESS in the opposite direction
[02:01:45] <White_Flame> (if <test> <then>) is also valid, but you should use WHEN for that instead
[02:07:39] <[itchyjunk]> When i (load "file.lisp") i get a `T` as a return. that's just load doing it's thing and i don't need to worry about that ?
[02:07:44] <pjb> [itchyjunk]: (let ((a 42) b)  (setq b a)  #| a refers 42, b refers 42 |#  (setq b 33) #| has no effect on 42. 42 is still 42. |# (assert (= 42 a)) 'yep) #| --> yep |# 
[02:08:12] <pjb> [itchyjunk]: it would be a strange language, if 42 became 33 because you assigned 33 to b, no?
[02:08:46] <[itchyjunk]> hmm but 33 is a number and a and b variables no?
[02:09:14] <pjb> yes.
[02:09:38] <[itchyjunk]> i guess i don't know how let and setq works yet :P
[02:09:46] <[itchyjunk]> but here is my solution to my problem
[02:09:47] <[itchyjunk]> https://bpa.st/AAPQ
[02:10:04] <[itchyjunk]> well partial solution. i think i need to take a list of numbers and iterate through those but another day
[02:10:15] <pjb> You wrote: "hmm so i wanted to have a function that has 3 inputs. if the sum of first 2 is equal to 3, print the product of first 2."
[02:10:15] <pjb> This translates to:                   (defun foo        (a b c)   (if (= (+ a b)                    c) (print (* a b))))
[02:12:35] <pjb> [itchyjunk]: (mapcar (function returnprod) '(1 2 3  1 3) '(0 1 2  1 3) '(10 100 1000  2 9)) #| --> (nil nil nil 1 nil) |# 
[02:12:48] <pjb> [itchyjunk]: (mapcar (function returnprod) '(1 2 3  1 3) '(0 1 2  1 3) '(10 100 1000  2 6)) #| --> (nil nil nil 1 9) |# 
[02:13:33] <pjb> [itchyjunk]: let creates new variables.  setq just mutates existing variables.
[02:13:42] <[itchyjunk]> ah
[02:13:53] <pjb> [itchyjunk]: if the variable you assign in setq doesn't exist, then it's not defined what happens.  Don't do that.
[02:14:28] <pjb> [itchyjunk]: it's non-conforming = different implementations will do different things so your program will break depending on the implemenation.
[02:14:30] <[itchyjunk]> let (a b) defines a and b ?
[02:14:35] <pjb> Yes.
[02:14:45] <[itchyjunk]> so let ( (a 42) b ) defined (a 42) and b.
[02:14:51] <pjb> let also allows you to initialize the variables: (let ((a 2) (b 3)) (list a b)) #| --> (2 3) |# 
[02:14:51] <[itchyjunk]> What does (a 42) do?
[02:14:59] <[itchyjunk]> oh
[02:15:03] <pjb> provides an initialization expresion.
[02:16:59] <[itchyjunk]> hmm
[02:17:25] <[itchyjunk]> so a = 42. then when we say b = 42, b and a are pointing to same object inside my computer
[02:17:40] <[itchyjunk]> now i set b to something else, that changes a as well?
[02:20:10] <pjb> [itchyjunk]: no.  That changes only the variable b.
[02:20:23] <pjb> a continues to point to the object 42.
[02:23:16] <pjb> [itchyjunk]: the thing to understand, is that conceptually, all variables and all slots (in structures, in arrays, in objects, etc), in short, all "places", only hold references to lisp objects.  So two places can have references to the same lisp object. Or to different lisp objects. But always references.  The lisp objects are stored on the heap, independently of all variables or places.
[02:24:09] <[itchyjunk]> hmm
[02:24:21] <[itchyjunk]> so what if i have a and b point to something
[02:24:27] <[itchyjunk]> but i wanted to change that something itself
[02:24:36] <[itchyjunk]> rather than change where a and b points to
[02:24:43] <[itchyjunk]> or does that not make sense?
[02:25:05] <pjb> and yes, references can be implemented as pointers aka addresses.  You can imagine reference = pointers, but since the language doesn't impose a specific implementation (eg. you could use braids of wool linking  the lisp object to the places with knots at each end), we say "reference" instead.
[02:25:16] <pjb> [itchyjunk]: good question.
[02:26:23] <pjb> The lisp object can be mutable or immutable.  eg. a number or a character is immutable (even if eg. a complex number or a ratio number has several "parts" such as imaginary part and real part, or numerator and denominator).  immutable objects don't have any mutable slot.
[02:26:37] <pjb> mutable lisp objects will have mutable slots, places that can be mutated.
[02:26:48] <pjb> Those places are accessed using accessor functions.
[02:27:01] <[itchyjunk]> ah
[02:27:04] <pjb> For example a cons cell has two slots: the car slot, and the cdr slot.
[02:27:22] <pjb> (let ((kons '(a . d))) (car kons)) #| --> a |# 
[02:27:34] <pjb> (let ((kons '(a . d))) (setf (car kons) 'aa) kons) #| --> (aa . d) |# 
[02:27:49] <pjb> you can mutate a cons sell by using the car or cdr accessor with setf.
[02:28:12] <pjb> or some other macro that will use setf internally (or get-setf-expansion).
[02:28:31] <pjb> Oops! I mutated an IMMUTABLE object!
[02:28:39] <pjb> '(a . d) is IMMUTABLE, we cannot change it!
[02:28:50] <pjb> (it's not conforming to do it)
[02:28:51] <White_Flame> you really shouldn't leave out the outer parens, when you say "let (a b)" etc
[02:29:05] <White_Flame> ^[itchyjunk]
[02:29:11] <pjb> We must use CONS to create a mutable cons cell: (let ((kons (cons 'a  'dd))) (setf (car kons) 'aa) kons) #| --> (aa . dd) |# 
[02:29:28] <[itchyjunk]> oh okay
[02:29:42] <[itchyjunk]> (let (a b))
[02:29:57] <pjb> [itchyjunk]: (let ((kons (cons 1  2))) (incf (car kons)) (decf (cdr kons) 2) kons) #| --> (2 . 0) |# 
[02:30:17] <pjb> (let ((kons (cons 1 nil))) (push 'hello (cdr kons)) kons) #| --> (1 hello) |# 
[02:30:42] <[itchyjunk]> lol getting harder to mentally parse this by the second
[02:31:11] <pjb> copy and paste and insert newlines (let  ((kons (cons 1 nil))) #|here|#  (push 'hello (cdr kons)) #|and here|# kons)
[02:31:19] <White_Flame> yeah, this is much better as a pastebin than a single-line mashup
[02:31:51] <pjb> but in the flow, pastebins are a bump, and people don't like newlines in irc…  We could go private.
[02:32:02] <pjb> (let ((kons (cons 1 nil)))
[02:32:02] <pjb>    (push 'hello (cdr kons))
[02:32:02] <pjb>    kons)
[02:32:22] <White_Flame> but the composite objects have accessors to their components.  If you modify a component of a composite, any vars referencing the composite will "see" the change
[02:32:23] <pjb> where we could write it like that. But people don't like that in irc channels…
[02:32:41] <pjb> that was my next example.
[02:33:00] <[itchyjunk]> hmm
[02:33:10] <pjb> (let ((a (cons 1 2))) (let ((b a))  (incf (car b))   (values a b))) #| --> (2 . 2) ; (2 . 2) |# 
[02:34:08] <pjb> (setf *print-circle* t)    (let ((a (cons 1 2))) (let ((b a))  (incf (car b))   (list a b))) #| --> (#1=(2 . 2) #1#) |#
[02:34:40] <pjb> with *print-cicle*, if you print together the values of two places that are actually the same lisp object, you see it as references with #= and ##.
[03:58:51] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 276 seconds)
[04:36:31] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[05:15:29] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[05:18:01] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 258 seconds)
[05:20:59] *** Joins: zos (~zosthegoa@ool-457a8044.dyn.optonline.net)
[05:39:36] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 276 seconds)
[06:55:49] *** Quits: sts-q (~sts-q@212.53.219.185) (Ping timeout: 265 seconds)
[06:59:58] *** Joins: sts-q (~sts-q@91.200.108.155)
[07:35:23] <beach> Good morning everyone! 
[07:42:56] <[_]> hi
[07:44:36] <beach> [_]: Are you new here?  I don't recognize your nick. 
[07:45:43] <beach> Or, are you just [itchyjunk] in disguise? 
[08:00:20] <[_]> yes
[08:00:40] <[_]> we both point to the same object
[08:00:52] <beach> I see.
[08:10:14] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[08:58:48] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:59:03] *** Quits: zos (~zosthegoa@ool-457a8044.dyn.optonline.net) (Quit: WeeChat 2.8)
[09:42:31] *** Joins: selwyn (~selwyn@user/selwyn)
[10:37:53] *** Joins: shka (~herr@109.231.62.239)
[10:44:27] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 276 seconds)
[10:44:43] *** Joins: silasfox (~sbv@xdsl-87-78-183-74.nc.de)
[11:06:54] *** Quits: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net) ()
[11:06:54] *** Quits: DBa (~dickbaren@86-90-132-28.fixed.kpn.net) (Quit: Leaving...)
[11:09:44] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[11:11:36] *** Joins: rain3 (~rain3___@79.115.250.43)
[12:09:20] *** Quits: Harag (~user@105.243.9.173) (Ping timeout: 258 seconds)
[12:36:00] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:06] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:56:13] *** Joins: st_iron (uid370243@id-370243.highgate.irccloud.com)
[14:05:48] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:39:32] *** Joins: selwyn (~selwyn@user/selwyn)
[14:42:33] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:55:40] *** Joins: random-nick (~random-ni@87.116.182.181)
[15:53:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[16:01:06] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:23:50] *** Quits: rain3 (~rain3___@79.115.250.43) (Quit: Leaving)
[17:24:39] *** Joins: selwyn (~selwyn@user/selwyn)
[17:48:14] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:01:18] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:10:45] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:15:58] *** Joins: zos (~user@ool-457a8044.dyn.optonline.net)
[18:17:23] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:17:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:16:01] *** Quits: st_iron (uid370243@id-370243.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[19:30:14] *** Quits: zos (~user@ool-457a8044.dyn.optonline.net) (Remote host closed the connection)
[19:43:09] *** Joins: thrig (~thrig@65.113.153.50)
[19:58:54] *** Joins: selwyn (~selwyn@user/selwyn)
[20:31:21] *** Joins: aeth_ (~aeth@user/aeth)
[20:31:27] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[20:31:32] *** aeth_ is now known as aeth
[20:43:47] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[20:53:45] *** Quits: silasfox (~sbv@xdsl-87-78-183-74.nc.de) (Quit: WeeChat 3.2)
[20:53:59] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[21:04:30] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[21:04:40] *** Joins: thrig (~thrig@65.113.153.50)
[21:16:44] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 252 seconds)
[21:17:11] *** Joins: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de)
[21:34:46] <[itchyjunk]> hmmm
[21:35:30] <[itchyjunk]> (let (a 1)), wasn't this how we say we defined a ?
[21:35:51] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:36:10] <[itchyjunk]> I get a malformed LET binding
[21:37:10] <thrig> add more ()
[21:37:16] <[itchyjunk]> hmmm
[21:37:36] <[itchyjunk]> (let a) defines a ?
[21:38:07] <thrig> that's less (). you need more.
[21:38:35] <[itchyjunk]> I thought it was (function args) though. so if i assume let is a function :s
[21:38:50] <[itchyjunk]> so (let ((var value) (var value)) ) ?
[21:38:59] <thrig> what happens when you try that?
[21:39:10] <[itchyjunk]> The variable A is defined but never used.
[21:39:11] <[itchyjunk]> this error
[21:39:41] <derelict> let is a special form, it binds variables in a scope 
[21:39:48] <[itchyjunk]> hmmmm
[21:40:05] <derelict> (let (()))
[21:40:13] <derelict> whoops
[21:40:31] <derelict> (let ((var val)*) body*) is the form
[21:41:05] <[itchyjunk]> hmmm what is * doing here?
[21:41:29] <derelict> it means that you can have an arbitrary number of these declarations and bodies 
[21:42:04] <[itchyjunk]> (let ((a 1 )) )
[21:42:09] <[itchyjunk]> Doesn't that match your notation ?
[21:42:15] <[itchyjunk]> to set a to 1
[21:42:33] <derelict> yes, and that is correct syntax 
[21:42:38] <[itchyjunk]> hmmmm
[21:42:55] <derelict> it will signal a warning though, because you never use a 
[21:43:14] <[itchyjunk]> ahh yes was wondering about that
[21:44:09] <[itchyjunk]> can the value be a output of a function? (let ((a list 1 2)) )
[21:44:20] <[itchyjunk]> to make `a` a list containing 1 and 2
[21:44:40] <thrig> add more ()
[21:44:41] *** Joins: aeth_ (~aeth@user/aeth)
[21:44:41] <[itchyjunk]> (list 1 2) seems to output (1 2) which is what i want
[21:44:44] <[itchyjunk]> lol
[21:44:46] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[21:44:49] *** aeth_ is now known as aeth
[21:44:51] <derelict> sure, but remember that each function invokation needs its own parentheses
[21:44:59] <[itchyjunk]> (let (( a (list 1 2) )) )
[21:45:08] <derelict> yes, that should work
[21:47:06] <[itchyjunk]> hmmm
[21:48:07] <[itchyjunk]> I guess by the time i hit enter, a dies within the scope of let and i can'd use it. so whatever i want to do, has to be within the body* part?
[21:49:26] <derelict> yes, for global variables youd wanna do things differently
[21:49:42] <[itchyjunk]> ah
[21:50:15] <derelict> youd want to use defvar or defparameter there
[21:50:26] <[itchyjunk]> i have a function that take 3 input. it adds the first 2 and checks if it's equal to 3. if yes, returns the product of first 2. but the first 2 is supposed to come from a file or list or some such.
[21:50:33] <[itchyjunk]> So i guess i don't need it to be global
[21:51:08] <[itchyjunk]> I wan trying to create a data structure to test things, but i can include the test inside the body part i suppose
[21:51:24] <derelict> i mean, using let there would make sense
[21:51:53] <derelict> since you dont want to keep retrieving these numbers from files, it would repeat too much code 
[21:57:10] <[itchyjunk]> hmmmm
[21:59:36] <[itchyjunk]> i need to use `loop` and `while` together? (while (true) (stuff) )
[22:00:14] <thrig> what is `while` ?
[22:00:26] <[itchyjunk]> hmm
[22:01:11] <[itchyjunk]> Oh oops, i saw a stackexchange post and didn't realize the while being asked there is the question and not the solution
[22:01:23] <[itchyjunk]> i need to use loop for the answer says
[22:03:22] <derelict> so you need to loop over what?
[22:03:27] <derelict> can oyu share the post?
[22:04:23] <[itchyjunk]> it was a random post i was googling
[22:04:29] <[itchyjunk]> i was trying to iterate over a list
[22:04:46] <derelict> ok, so you can use LOOP or DOLIST
[22:04:47] <[itchyjunk]> but loop for tempvar in listname do ( stuff) seems to be the syntax
[22:05:27] <derelict> yeah you can use LOOP like that 
[22:05:59] <derelict> LOOP has a pretty extensive syntax
[22:06:12] <[itchyjunk]> deep down in my function, i have a when ( = a b), when this is true, i wanted the whole function to give me this value back and exit
[22:06:22] <[itchyjunk]> ah i see, will be a journey learning loop then
[22:07:22] <[itchyjunk]> http://www.ai.mit.edu/projects/iiip/doc/CommonLISP/HyperSpec/Body/mac_return.html
[22:07:44] <[itchyjunk]> This says return [results], if i put return a, will it exist out of all the nested functions
[22:07:48] <[itchyjunk]> i am a few deep
[22:09:48] <derelict> can you share source? ill probably get the idea of what you're trying to do that way 
[22:09:54] *** Joins: pjb` (~pjb@2a01cb040b1ae100445395ee53681b27.ipv6.abo.wanadoo.fr)
[22:10:10] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 240 seconds)
[22:10:37] <[itchyjunk]> okay
[22:11:34] <[itchyjunk]> https://bpa.st/OBLQ
[22:12:05] <[itchyjunk]> i want to pass a list and a value and if an element in the list is equal, return that element
[22:12:14] <[itchyjunk]> i know there are is member type functions already
[22:12:34] <[itchyjunk]> but i am just setting this up, i'll have to do additional oeprations before i check if it's equal to value in future
[22:12:40] <derelict> yeah but you're required to use loop too 
[22:13:02] <[itchyjunk]> i am using loop there
[22:16:21] <derelict> so you can use loop's own when to make your code more idiomatic, but the code itself should work correctly 
[22:16:39] <[itchyjunk]> ah ill try it then
[22:18:08] <derelict> id recommend looking up Common Lisp code writing conventions too, just for your code to be the most readable 
[22:19:16] <[itchyjunk]> it does work \o/
[22:19:22] <[itchyjunk]> oh right
[22:19:32] <[itchyjunk]> i did that cause the perenthesis was really messing with my head
[22:21:19] <[itchyjunk]> looks like some people do use the way i am using it  
[22:21:25] <[itchyjunk]> checking code samples on google, hehe
[22:21:36] <[itchyjunk]> some use the ending ) on the same line it seems
[22:22:06] <derelict> eventually you get used to them. writing CL code the correct way also makes interpreting your program easier since you see how the blocks are organized
[22:22:30] <[itchyjunk]> What do you consider the correct way?
[22:22:58] <derelict> moment 
[22:26:10] <derelict> https://lisp-lang.org/style-guide/
[22:31:27] <[itchyjunk]> hmmm
[22:31:49] <[itchyjunk]> (defun f ()
[22:31:51] <[itchyjunk]> )
[22:31:58] <[itchyjunk]>  is that what it means by 2 lines?
[22:41:04] <beach> [itchyjunk]: An open parenthesis is never followed by whitespace, and a closing parenthesis is (almost) never preceded whitespace, and that includes newlines.
[22:41:54] <beach> [itchyjunk]: If you look at almost any book on Common Lisp, you will never find the style of the code you showed.  That should tell you something.
[22:42:22] <beach> [itchyjunk]: And your indentation is wrong too.  Make sure you use an editor that can indent your code correctly.
[22:43:11] <beach> And with those words, I am off to spend time with my (admittedly small) family.
[22:43:23] <derelict> id recommend using Portacle if you want a full development environment that works well out of the box 
[22:43:40] <derelict> enjoy it beach :)
[22:53:28] <[itchyjunk]> hmmm
[23:00:50] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:15:55] <rdrg109> What do you call those symbols that start with ":"? In Emacs Lisp, there is the function "keywordp" that can be used to check whether a symbol start with ":", so I guess that those words are called "keywods", is that right?
[23:22:34] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 240 seconds)
[23:23:20] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[23:59:05] <derelict> correct rdrg109 
