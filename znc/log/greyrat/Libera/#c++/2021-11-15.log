[00:02:27] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Quit: WeeChat 3.3)
[00:04:11] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[00:08:06] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[00:10:38] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:11:44] *** Quits: Brainium (~brainium@user/brainium) (Remote host closed the connection)
[00:11:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[00:14:30] *** Joins: Brainium (~brainium@user/brainium)
[00:14:45] *** Joins: bindu (~bindu@user/bindu)
[00:15:07] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[00:15:46] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[00:21:22] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[00:22:27] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[00:22:51] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a660044e9a97451eba6ac.ipv6.abo.wanadoo.fr)
[00:25:24] *** Quits: Guest80 (~Guest80@pd9ed7762.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[00:26:27] *** Joins: badone (~badone@209.132.189.136)
[00:27:36] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[00:27:59] *** Quits: Brainium (~brainium@user/brainium) (Ping timeout: 264 seconds)
[00:28:42] <zava> https://gyazo.com/297d4d784a0a249f8e453bd322f08a21 ok this is the result of this code:
[00:28:50] *** Joins: llh (~llh@user/llh)
[00:29:08] <zava> https://bpa.st/MO2Q
[00:29:14] *** Quits: ania123 (~ania123@212.72.140.51) (Quit: Client closed)
[00:29:33] <zava> my question is why does my code not draw the negative x and y axis
[00:30:05] <zava> and why are the 4 lines I draw in 4 of my octants so few pixels and so far away from one another
[00:31:22] <TinoDidriksen> zava, looks like a question for #glfw or #C++-general
[00:31:33] <zava> ok ty
[00:31:34] <TinoDidriksen> Or even ##opengl
[00:36:53] *** Quits: fassl (~fassl@2a02:8388:1987:9380:748f:df5a:4428:caa1) (Ping timeout: 268 seconds)
[00:41:24] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[00:42:07] *** Joins: Brainium (~brainium@user/brainium)
[00:42:31] *** Quits: magla (~gelignite@55d41163.access.ecotel.net) (Quit: Stay safe!)
[00:42:58] *** Joins: obiwahn (~heini@user/obiwahn)
[00:43:19] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Quit: WeeChat 3.3)
[00:44:53] *** Quits: emerent (~quassel@p200300cd57430969ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:45:01] *** Joins: emerent (~quassel@p200300cd574309a3ba27ebfffed28a59.dip0.t-ipconnect.de)
[00:47:15] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[00:47:50] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[00:49:52] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[00:50:08] *** Joins: bindu (~bindu@user/bindu)
[00:50:34] *** Joins: totvs (~sidj@user/sidj)
[00:52:22] *** Quits: karonto_ (~karonto@2a02:3102:48e1:ff7e:552d:4a3f:2d0d:d58f) (Quit: This computer has gone to sleep)
[00:53:14] *** Quits: sidj (~sidj@user/sidj) (Ping timeout: 260 seconds)
[00:54:10] *** Quits: hightower2 (~hightower@213.147.110.20) (Ping timeout: 260 seconds)
[00:54:52] *** Joins: spaceangel_ (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[00:56:05] *** Joins: fassl (~fassl@2a02:8388:1987:9380:748f:df5a:4428:caa1)
[00:56:38] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[00:57:04] *** Quits: spaceangel_ (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[00:57:22] *** Joins: spaceangel_ (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[00:57:40] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[00:57:40] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Read error: Connection reset by peer)
[00:58:01] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[00:58:14] *** Quits: totvs (~sidj@user/sidj) (Ping timeout: 256 seconds)
[00:58:51] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-068.hsi5.kabel-badenwuerttemberg.de) (Ping timeout: 245 seconds)
[00:59:19] *** Quits: N4buc0- (~N4buc0@179.186.178.29.dynamic.adsl.gvt.net.br) (Remote host closed the connection)
[01:00:57] *** Quits: Leone (~Leo@216.154.50.172) ()
[01:02:35] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[01:03:20] *** Quits: X-Scale (~ARM@83.223.243.66) (Ping timeout: 256 seconds)
[01:05:00] *** X-Scale` is now known as X-Scale
[01:05:16] *** Joins: jfsimon1981 (~jfsimon19@82.199.121.78.rev.sfr.net)
[01:05:54] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[01:07:18] *** Quits: spaceangel_ (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[01:10:00] *** Joins: neshpion_ (~neshpion@gateway/tor-sasl/neshpion)
[01:10:00] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Killed (NickServ (GHOST command used by neshpion_)))
[01:10:02] *** neshpion_ is now known as neshpion
[01:10:08] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[01:10:27] *** Quits: zoneu (~zoneu@user/zoneu) (Quit: Leaving)
[01:11:19] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[01:11:20] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[01:12:06] *** Joins: neshpion_ (~neshpion@gateway/tor-sasl/neshpion)
[01:12:06] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Killed (NickServ (GHOST command used by neshpion_)))
[01:12:08] *** neshpion_ is now known as neshpion
[01:13:55] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[01:16:31] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[01:20:31] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:22:56] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:23:55] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:25:44] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:26:24] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:28:46] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[01:30:06] *** Quits: Brainium (~brainium@user/brainium) (Ping timeout: 260 seconds)
[01:35:04] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[01:36:44] *** Quits: fassl (~fassl@2a02:8388:1987:9380:748f:df5a:4428:caa1) (Quit: Leaving)
[01:37:35] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 264 seconds)
[01:38:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:38:11] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:38:11] *** ChanServ sets mode: +v npaperbot
[01:38:48] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:39:04] *** Quits: MarcoFe (~marcofe@host-82-49-154-107.retail.telecomitalia.it) (Quit: Konversation terminated!)
[01:41:07] *** Joins: edman007_ (~edman007@user/edman007)
[01:42:11] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 245 seconds)
[01:44:45] <edman007_> Hi, so question, I'm using a C library, it lets me give it a function pointer, f= int(int), where I don't have control of the only argument, I want to pass a pointer to something that does something a bit more advanced (noteably, do something that depends on the object state which is NOT passed in this API), I can use std::bind() to make an std:function that does what I want, but my google foo says I can't convert that to a C function pointer? Is there
[01:44:45] <edman007_> another way to do this?
[01:46:18] <anyone> global singleton
[01:46:52] <ville> global state. doesn't need to be singleton
[01:46:54] *** Joins: rgrinberg (~textual@190.113.102.153)
[01:47:09] <anyone> I can't think of any way that it would not be singular
[01:47:38] <anyone> Especially if the function being called does not take custom pointers
[01:47:46] <ville> if that state was an int, you could still have other int instances
[01:47:47] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 268 seconds)
[01:48:46] <anyone> think of f := abs
[01:51:14] <ville> i don't get why do you think it has to be a singleton
[01:51:34] *** Joins: Viewday118 (~Viewday@user/viewday)
[01:53:46] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:53:46] *** Viewday118 is now known as Viewday11
[01:53:47] <edman007_> hrm...but can that be done with multiple different states in parallel? since the goal is I have N objects in a threaded application, each calling the same API but with different arguments, does a global singleton get me N different function pointers that do N different things?
[01:54:44] <anyone> ville: like when there's some stupid void transform_some_array(ArrayOfInts *a, size_t n, int (*transform)(int)).
[01:54:47] <RandomReader> if the API doesn't supply any data that would let you distinguish the context for the call, there isn't any way for it to be magically added
[01:55:09] <anyone> then the function you're giving in just sees the elements of 'a', and has no other way to access anything except one global thing
[01:55:12] <ville> forget the term singleton. you just "want", or rather are forced to, have some global or translation-unit-local state
[01:55:16] <edman007_> really the API calls F with an array of ints and I have to pick one and return it, it's threaded, in parrallel, and on different objects I want to pick a different one
[01:55:17] <RandomReader> (side note: you'll want to make sure it supports multithreading at all .. if it doesn't explicitly say it does, assume it doesn't and probably has internal global state)
[01:55:20] <anyone> yeah perhaps dependent upon the value of some a[i], but you rarely want that
[01:55:40] <anyone> edman007_: show the code or it didn't happen
[01:56:08] <ville> anyone: still does not need to be singleton
[01:57:21] <ville> anyone: you/he get to control the function which pointer is passed. it can access as much of global state as needed. there's no requirement for singleton pattern to be involved
[01:57:44] <anyone> fact is that function needs to access some fixed place
[01:58:10] *** Quits: furrymcgee (~devuan@cgn-89-1-208-64.nc.de) (Quit: leaving)
[01:58:14] <ville> thread_local...
[01:58:18] <cbreak> std::bind?
[01:58:34] <ville> cbreak: re-read. c interface. takes pointer-to-function
[01:58:40] <cbreak> :(
[01:58:49] <anyone> C interface. Probably doesn't know thread_local.
[01:59:03] <cbreak> thread_local doesn't influence the interface
[01:59:32] <ville> you make the "global" thread_local
[01:59:33] <anyone> C code then. Really the entire question is a C question.
[01:59:41] <ville> it's not
[01:59:44] <cbreak> you could maybe synthesize a custom function pointer instead of bind, but that'd be highly platform specific, with runtime code gen
[02:00:07] <cbreak> not really c++ standard
[02:00:13] <ville> or if you wish you can have a hash table as your global state, and look the "thread local" state with your thread id
[02:00:54] <cbreak> your C API doesn't give any indication of identity at all?
[02:01:20] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[02:01:21] *** Quits: moontime0001 (~moontime1@2a02:a310:c15d:cb80:efaa:dddc:3182:9de) (Ping timeout: 268 seconds)
[02:02:34] *** Quits: skapata (~Skapata@user/skapata) (Quit: Äœis.)
[02:03:08] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[02:07:17] <ndorf> any opinions about the book "C++ High Performance" by Viktor Sehr? is it worthwhile?
[02:11:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[02:18:13] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:18:51] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 245 seconds)
[02:21:42] <RandomReader> I don't know it .. quickly skimming samples, it looks decent at first glance, although like almost anything coming from the perspective of game development I'd be cautious about potential mixing of standard vs platform-specific concepts
[02:21:57] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b1d7:e14b:5957:fa7f)
[02:21:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b1d7:e14b:5957:fa7f) (Changing host)
[02:21:58] *** Joins: skapata (~Skapata@user/skapata)
[02:22:37] <RandomReader> both are needed to be effective, but it's extremely important to be able to distinguish them in order to write effective code
[02:23:01] <RandomReader> a lot of material does a terrible job in that area, I have no idea how well this book would do without having read it myself
[02:23:39] <ndorf> fair assessment, thanks. i was hoping maybe someone has actually read it :)
[02:24:16] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[02:24:59] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:25:08] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[02:27:11] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[02:27:58] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 260 seconds)
[02:28:20] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[02:29:50] *** Joins: Enitin (~Enitin@82.102.22.84)
[02:33:26] *** Quits: pizdets (~pizdets@183.182.111.238) (Ping timeout: 256 seconds)
[02:33:50] *** Joins: pizdets_ (~pizdets@183.182.110.150)
[02:41:32] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:41:53] *** Joins: proller (~p@80.240.216.69)
[02:46:49] *** Joins: rgrinberg (~textual@190.113.102.153)
[02:47:29] *** Quits: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com) (Ping timeout: 246 seconds)
[02:48:24] *** Joins: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com)
[02:48:45] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[02:49:39] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:51:37] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[02:54:18] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[02:57:13] <Alipha> edman007_: you can use templates to make as many functions as you want, at compile time, and number them. eg, foo<0>::callback, foo<1>::callback, etc
[02:58:36] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Remote host closed the connection)
[02:59:28] *** Joins: ferdna (~ferdna@user/ferdna)
[03:00:34] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[03:03:04] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[03:03:45] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[03:04:00] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[03:08:09] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:16:12] *** Quits: imMute (~immute@user/immute) (Ping timeout: 260 seconds)
[03:16:20] *** Joins: imMute (~immute@user/immute)
[03:17:18] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:18:01] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:19:20] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:30:12] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:37] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:33:22] *** Joins: Atque (~Atque@user/atque)
[03:35:27] *** Joins: Guest25 (~Guest25@2601:404:d300:5a0:8019:c9dd:453e:462e)
[03:40:31] *** Joins: saohh (~saohh@ip-78-45-147-109.net.upcbroadband.cz)
[03:41:25] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[03:43:43] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[03:47:37] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 276 seconds)
[03:49:37] *** Quits: saohh (~saohh@ip-78-45-147-109.net.upcbroadband.cz) (Quit: Leaving)
[03:49:44] *** Joins: spithash (~spithash@user/spithash)
[03:56:05] *** Quits: dhch (~dhch@185.213.154.168) (Ping timeout: 246 seconds)
[03:58:45] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[04:03:51] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[04:06:25] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:07:35] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[04:08:17] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:08:39] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[04:08:48] *** Quits: Guest25 (~Guest25@2601:404:d300:5a0:8019:c9dd:453e:462e) (Quit: Client closed)
[04:14:38] *** Joins: Budd (~Budd@2001:470:8d44:1::5)
[04:17:21] <Budd> I'm writing C++ for a Pico microcontroller. When I introduce a std::vector, my compiled image grows from 50 kB to 145 kB. The code is being compiled (gcc) with -fno-exceptions and -fno-rtti. Any suggestions on how to keep things small?
[04:18:06] <vvdaiwrw> C
[04:18:24] <Budd> Looking at the list of added symbols, it seems that there are many related to stack unwinding and exceptions.
[04:18:48] *** Joins: dhch (~dhch@185.213.154.168)
[04:18:59] <vvdaiwrw> did you compile with -O2 or -O3?
[04:19:36] <Budd> -O3 (default for the pico-sdk environment)
[04:19:42] <vvdaiwrw> must be as 145kB is pretty slim, just not for pico
[04:20:13] <vvdaiwrw> I'd go for C instead of fighting a compilation system...
[04:20:53] <vvdaiwrw> it's usual for templates, can't do much, either that or look for an specialized container lib for that.
[04:21:21] <RandomReader> this topic would be better in ##c++-general, since it's about tooling rather than the language .. and there are options
[04:21:34] <Budd> Yeah, I've been moving from C to very lightweight C++ (just for namespaces, non-inherited classes, and other syntactic pleasures).
[04:21:39] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[04:22:02] <Budd> RandomReader: thanks - I'll go there.
[04:22:49] <Budd> It won't let me in without an invitation.
[04:23:19] <RandomReader> sorry, old habit, one hash:  #c++-general
[04:24:10] <Budd> Also capitalized, though I don't know if channels are case-sensitive.
[04:25:39] <vvdaiwrw> Budd: https://github.com/ETLCPP/etl
[04:27:19] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:28:09] <vvdaiwrw> TinoDidriksen likes stuff PascalCase, so sadly we're left with that. Personally I just find horrid having a single damn channel in my libera channel list to be capitalized, but alas, he must enjoy the thought of that.
[04:29:11] <Budd> vvdaiwrw: thanks. I've also considered trying incessant realloc()s on a pointer, since I'm only storing floats and integers.
[04:31:18] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[04:31:20] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[04:32:12] *** Quits: Brewster (~Brewster@104.145.226.5) (Changing host)
[04:32:12] *** Joins: Brewster (~Brewster@user/brewster)
[04:33:14] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[04:34:24] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:38:07] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f475:c7e0:4a6:d46) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:39:09] *** Joins: nostar (~nostar@68.51.221.108)
[04:48:18] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[04:48:19] <svm_invictvs> If I want to increment a void* pointer by X bytes, is it safe to cast to unsigned char* and then back?
[04:48:24] <svm_invictvs> Or am I breaking aliasing rules?
[04:49:05] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[04:53:58] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[04:54:09] *** Joins: malloy (~jimery@116.30.220.108)
[04:55:58] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[04:56:13] <anyone> you can increment the (charred) pointer; the real issues lie with dereferencing it
[04:59:49] *** Joins: X-Scale` (~ARM@31.22.167.45)
[05:00:11] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 268 seconds)
[05:02:03] <svm_invictvs> I just gets copied again.
[05:02:17] <svm_invictvs> It's byte data
[05:02:25] <svm_invictvs> I realized I should really just have the method accpet unsigned char
[05:02:29] *** X-Scale` is now known as X-Scale
[05:03:14] <anyone> for some values of X (most notably those that exceed the object), it won't be safe, whether the function takes unsigned char or not ;)
[05:03:44] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Quit: varioust)
[05:04:01] <Alipha> Budd: could write your own slimmed down vector class
[05:04:40] <Budd> Alipha: Just did that - decreased from 145kB to 80kB, which I think is reasonable.
[05:04:51] <svm_invictvs> anyone, I know the input and output types.
[05:04:51] <Budd> Of course, I haven't actually run it yet :)
[05:05:50] <RandomReader> svm_invictvs - as long as you don't dereference it, the conversions are safe and won't violate aliasing
[05:06:02] <svm_invictvs> I'm passing it to std::memcpy
[05:06:22] <svm_invictvs> I blieve std::copy and std::memcpy are "blessed" in that sense correct?
[05:06:48] <RandomReader> you don't have to worry about them dereferencing, no
[05:07:12] <svm_invictvs> They may
[05:07:27] <svm_invictvs> well, no they can't.
[05:07:28] <RandomReader> sorry, you don't have to worry about std::memcpy dereferencing
[05:07:40] <RandomReader> std::copy is not special and you would always need correct types
[05:07:56] <svm_invictvs> I thought std::copy was blessed for trivial types in that sense
[05:08:11] <svm_invictvs> No, I get an array of structs. I want to copy that to byte array to write to disk.
[05:08:32] <RandomReader> no, std::copy copies objects from iterators, it has nothing to do with bytes, trivial types make no difference
[05:08:38] <RandomReader> std::memcpy deals with storage/bytes
[05:08:40] <svm_invictvs> Oh, okay
[05:08:47] <svm_invictvs> Well
[05:08:55] <svm_invictvs> std::memcpy works for now.
[05:09:11] <RandomReader> if you know the type, why not just use that?
[05:09:12] <svm_invictvs> The structs shouldn't be part of this code and I'm a bit dumbstruck as why it does hit.
[05:09:13] <vdamewood> svm_invictvs: By the way, if you use memcpy to write a struct to a file, you will run into portability problems later on.
[05:09:31] <svm_invictvs> vdamewood, I know
[05:09:44] <vdamewood> Ah, okay.
[05:09:57] <svm_invictvs> vdamewood, First pass of fixing this code is getting the copy to work. Second pass is actually removing the rest of the undefined behavior
[05:10:19] <svm_invictvs> vdamewood, The struct is an pixel struct BGRA { unsigned char b,g,r,a; }
[05:10:25] <vdamewood> Step 1: Remove UB, Step 2: ???, Step 3: Profit!!!
[05:10:36] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:10:47] <svm_invictvs> The code assumes that that will always be 32 bits and the compiler doesn't pad. On all the tested platforms it works and works fine.
[05:11:04] <vdamewood> Are all tested platforms x86?
[05:11:07] <svm_invictvs> Yes
[05:11:41] <vdamewood> Have fun with ARM.
[05:11:45] <svm_invictvs> My next step after I get this PR done is to go in and just make the Image class deal with unsigned bytes and have a format and pixel depth flag.
[05:12:20] <svm_invictvs> The only reason it uses this is that the original author wanted to "simplify" it by using sizeof(BGRA) to represent 4 byte pixel depth.
[05:12:38] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[05:14:36] <svm_invictvs> What's realy dumb is that nowhere does this part of the code ever do any image processing. It doesn't care if the pixel format is BGRA, RGBA, or even what the pixel values do. It literally reads the image from one source, uses a bunch of OS calls to get it in the right format (BGRA) then hands it to another piece of code for downstream processing.
[05:15:07] <svm_invictvs> There is no logical reason it has to try to make sense of the image, other than it's primitive byte-by-byte format. Like it has a bunch of needless UB
[05:15:21] <svm_invictvs> Some of hte UB code is literally not used anywehre and has comments like 'This is ane xample."
[05:15:35] <svm_invictvs> It's a screen capture library
[05:17:20] <Hello71> isn't std::copy well-defined as equivalent to memcpy if you use a character type
[05:18:31] <svm_invictvs> Hello71, That's what I thought as well. That std::copy has an exception for the std::byte type
[05:18:42] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a660044e9a97451eba6ac.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[05:19:53] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 264 seconds)
[05:19:54] <Hello71> https://eel.is/c++draft/alg.copy#lib:copy: For each non-negative integer n<N, performs *(result + n) = *(first + n).
[05:20:32] <RandomReader> I have no idea what either of you are thinking of .. std::copy takes iterators for specific types that have to be assignment-compatible with each other
[05:20:36] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[05:21:30] <RandomReader> std::memcpy has special powers of storage transport
[05:21:31] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[05:21:49] <Hello71> the point is you can copy a trivially copyable type by std::copy(reinterpret_cast<char *>(...
[05:22:17] <RandomReader> that requires the use of the pointer that was reinterpret_cast'd to be valid
[05:22:25] <RandomReader> which is the entire problem, since most of the time it's not
[05:23:02] <Hello71> any memory can be accessed via a pointer to character type. it is one of the permitted types in the aliasing rule
[05:23:14] *** Joins: ferdna (~ferdna@user/ferdna)
[05:23:36] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[05:24:10] <RandomReader> yes, but you have to have a valid pointer-to-char first
[05:24:29] <RandomReader> which then runs into trouble with constraints like this: https://eel.is/c++draft/expr.add#4
[05:25:04] <Hello71> what?
[05:25:08] *** Quits: reset (~reset@user/reset) (Quit: reset)
[05:25:18] <RandomReader> and since you just pointed out that std::copy is defined as using exactly that operation, and doesn't have any special casing in the standard to enable it to work with arbitrary object representation, ...
[05:26:02] <RandomReader> that section requires the pointer be part of an array object to work, unless it's about to represent one-past-the-end for a single object
[05:26:15] <RandomReader> for arithmetic to work*
[05:26:41] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[05:26:43] <Hello71> the rule in the standard that makes float x; reinterpret_cast<int *>(&x) = 1; invalid is https://eel.is/c++draft/basic.lval#11, which specifically permits casting to a char, unsigned char, or std::byte
[05:27:13] <RandomReader> the pointer conversion is valid, the aliasing is valid, the pointer arithmetic is *not*
[05:27:13] *** Parts: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) ()
[05:27:31] <RandomReader> std::memcpy is not subject to this requirement, because it's called out explicitly
[05:27:43] <RandomReader> std::copy is the opposite and is defined in terms of normal object rules
[05:27:58] <RandomReader> this isn't an aliasing issue, if that's the confusion .. std::memcpy has powers beyond just aliasing
[05:29:09] <RandomReader> some of this may be resolved by a recent DR based on the trivial object fixups in C++20, which others in here have repeatedly commented on, but I haven't found the actual DR published yet
[05:29:10] <Hello71> so your claim is that float x; *(reinterpret_cast<char *>(&x)) = 1; is valid, but float x; *(reinterpret_cast<char *>(&x) + 1) = 1; is not, even if float is at least two bytes long?
[05:29:26] <RandomReader> yes
[05:29:46] <RandomReader> and I didn't make this up myself, this is what's been discussed about this very issue for the last few years
[05:29:57] <Hello71> sigh, C++.
[05:30:09] <RandomReader> along with C++17's pointer handling not making the conversion in the first place, so even the first is invalid, and other such irritating bits
[05:31:29] <RandomReader> if that DR shows up somewhere, it takes the form of implicitly generating a char[] object if that's all that would be needed to make it defined
[05:31:58] <RandomReader> which is classic C++ subtlety, but at least the code goes back to doing what people think it does
[05:33:18] <Hello71> by that logic, how are you supposed to use malloc to store an array?
[05:33:55] <RandomReader> you can't, since they still haven't fixed placement new[] :(
[05:36:16] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[05:36:20] <RandomReader> in practice if I'm ever dealing with that, it's been because I'm in platform-specific land, so I just put that in a file and leave the interface defined for the rest of the code
[05:36:38] <RandomReader> like as a operator new[] replacement or something
[05:38:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:38:11] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:38:12] *** ChanServ sets mode: +v npaperbot
[05:45:46] <Hello71> i think your interpretation is incorrect, on the basis of footnote 70 and http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2419
[05:47:49] *** Joins: Dreadnaught (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au)
[05:48:23] *** Quits: Tokamak (~Tokamak@172.58.191.72) (Ping timeout: 264 seconds)
[05:49:12] <Hello71> either reinterpret_cast<char *>(&x) points to no object, in which case *(reinterpret_cast<char *>(&x)) = 1; is invalid, or it points to an object that is not an array element, in which case it "is considered to belong to a single-element array for this purpose", or it points to an object that is an array element
[05:50:04] *** Joins: Tokamak (~Tokamak@172.58.188.114)
[05:50:45] *** Quits: Kulrak (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au) (Ping timeout: 268 seconds)
[05:51:31] <RandomReader> that would mean the result of the reinterpret_cast (I'll call it newptr) is effectively the address of the first element of a char[1], right?
[05:52:08] <RandomReader> so newptr+1 is past-the-end, not dereferenceable
[05:53:09] <Hello71> hm. possibly need to go back to the drawing board on this one
[05:53:46] <Hello71> i feel like 7.6.1.9 Static cast holds an answer
[05:58:36] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[05:58:52] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[06:04:57] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 268 seconds)
[06:06:01] *** Joins: jkaye (~jkaye@2601:281:8300:7530:a5dd:80a5:c74b:fea5)
[06:06:13] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[06:11:22] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[06:13:58] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[06:15:15] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[06:15:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[06:16:23] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[06:17:52] *** Joins: bindu (~bindu@user/bindu)
[06:20:27] *** Joins: furincleavagesit (~textual@47.203.181.175)
[06:23:48] *** Quits: furincleavagesit (~textual@47.203.181.175) (Quit: Textual IRC Client: www.textualapp.com)
[06:30:11] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:33:13] *** Joins: frost (~frost@user/frost)
[06:39:59] *** Quits: jkaye (~jkaye@2601:281:8300:7530:a5dd:80a5:c74b:fea5) (Ping timeout: 264 seconds)
[06:47:04] *** Joins: vqueiroz (uid340368@hampstead.irccloud.com)
[07:01:29] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[07:03:45] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[07:18:24] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:18:42] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 260 seconds)
[07:31:32] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:3e77:451f:a622:82a5)
[07:43:03] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[07:47:25] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[07:51:23] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 264 seconds)
[07:51:23] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[07:52:58] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[08:01:05] <svm_invictvs> RandomReader, The C++ standard does more or less give some extra conditions on certain ones.
[08:01:30] <svm_invictvs> RandomReader, I want to say std::copy<unsigned byte>() has a special case.It basically has to be similar to std::memcpy
[08:15:23] <InPhase> svm_invictvs: Do you mean unsigned char?
[08:15:35] <svm_invictvs> Yeah
[08:16:14] <InPhase> The standard is in fact very unforgiving about the allowed types.  char, unsigned char, and std::byte are now allowed.  uint8_t and int8_t yield undefined behavior, which is a terrible choice.
[08:18:28] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[08:23:11] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 264 seconds)
[08:35:29] *** Joins: Guest36 (~Guest36@54-240-198-32.amazon.com)
[08:35:48] <Guest36> https://godbolt.org/z/nra7joeGd wondering why valgrind is complaining about "Mismatched free() / delete / delete []"
[08:40:48] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:5141:283c:ef57:2767)
[08:45:03] *** Joins: RandomRead3r (~RandomRea@user/randomreader)
[08:45:59] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:5141:283c:ef57:2767) (Ping timeout: 264 seconds)
[08:47:22] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:48:14] *** Quits: RandomReader (~RandomRea@user/randomreader) (Ping timeout: 260 seconds)
[08:48:21] *** RandomRead3r is now known as RandomReader
[08:48:40] *** Joins: ania123 (~ania123@212.72.140.51)
[08:49:20] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[08:49:53] <InPhase> Guest36: Well, because you have a delete[] on line 22 and a non[] new on line 17.
[08:50:12] <InPhase> Guest36: So basically for the reason it says.  :)
[08:51:20] <InPhase> Guest36: Your comments indicate you intended something else on 17...
[08:54:16] <Guest36> InPhase: thanks got it.
[08:57:01] <Alipha> Guest36: https://godbolt.org/z/EGYb64PGj :-)
[09:09:15] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[09:12:39] <InPhase> Alipha: Maybe some year we'll actually get a multidimensional vector type.
[09:18:50] <InPhase> The bounds checking steps needed on that type of structure are quite excessive.  So then we're all left rolling our own multidimensional types to fix it.
[09:27:03] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[09:27:18] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[09:27:33] <Alipha> !matrix
[09:27:34] <nolyc> template<typename T> struct matrix { matrix(unsigned m, unsigned n) : m(m), n(n), vs(m*n) {} T& operator ()(unsigned i, unsigned j) { return vs[i + m * j]; } private: unsigned m; unsigned n; std::vector<T> vs; }; /* column-major/opengl: vs[i + m * j], row-major/c++: vs[n * i + j] */
[09:27:56] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[09:29:54] <InPhase> Right.  Now add all the other expected operators and behaviors.  :)
[09:31:07] *** Joins: Guest80 (~Guest80@pd9ed7c28.dip0.t-ipconnect.de)
[09:31:25] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[09:33:43] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[09:36:57] <vqueiroz> Any idea why I get SIGKILL if I summon 4 threads to read images simultaneously using libspng?
[09:38:04] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:38:13] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:38:13] *** ChanServ sets mode: +v npaperbot
[09:41:20] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:43:37] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:51:20] <TinoDidriksen> vqueiroz, sounds like the OOM-killer.
[09:54:58] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:55:26] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[09:55:53] *** Joins: bindu (~bindu@user/bindu)
[10:03:09] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:04:42] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[10:17:47] *** Quits: BigDru (~BigDru@cpeac202e794c73-cmac202e794c70.cpe.net.fido.ca) (Ping timeout: 264 seconds)
[10:18:51] *** Joins: NiD27 (~nid27@49.205.144.153)
[10:18:59] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[10:21:55] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[10:22:01] *** Joins: Enitin (~Enitin@82.102.22.86)
[10:23:42] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[10:26:13] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:28:39] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[10:28:39] *** Quits: zaratustra (~zaratustr@user/zaratustra) (*.net *.split)
[10:28:39] *** Quits: supernovah (~supernova@mail.ijk.nz) (*.net *.split)
[10:28:39] *** Quits: phoenix (phoenix@user/phoenix) (*.net *.split)
[10:28:39] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[10:28:39] *** Quits: traxex (traxex@user/traxex) (*.net *.split)
[10:28:39] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (*.net *.split)
[10:28:39] *** Quits: introom (introom@2600:3c01::f03c:92ff:fea3:2cf) (*.net *.split)
[10:28:39] *** Quits: malinus (~malinus@172.245.158.16) (*.net *.split)
[10:28:39] *** Quits: a5m (nop@asm.dj) (*.net *.split)
[10:28:39] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[10:28:39] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[10:28:39] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (*.net *.split)
[10:28:39] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (*.net *.split)
[10:28:39] *** Quits: mabi (~m42e@pb42.de) (*.net *.split)
[10:28:39] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[10:28:40] *** Quits: RokerHRO (~zonc@euporie.uberspace.de) (*.net *.split)
[10:28:40] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (*.net *.split)
[10:28:47] *** Joins: malinus (~malinus@172.245.158.16)
[10:28:47] *** Joins: RokerHRO (~zonc@euporie.uberspace.de)
[10:28:48] *** Joins: supernovah (~supernova@mail.ijk.nz)
[10:28:49] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[10:28:54] *** Joins: traxex (~traxex@sdf.org)
[10:28:54] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[10:29:08] *** Joins: zaratustra (~zaratustr@user/zaratustra)
[10:29:08] *** Joins: Exa (exa@irc.moe)
[10:29:11] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[10:29:13] *** Joins: phoenix (phoenix@sdf.org)
[10:29:17] *** Joins: mabi (~m42e@pb42.de)
[10:29:18] *** Joins: a5m (~nop@asm.dj)
[10:29:18] *** Joins: introom (introom@2600:3c01::f03c:92ff:fea3:2cf)
[10:29:22] *** Joins: Byteflux (~byte@byteflux.net)
[10:29:25] *** Quits: phoenix (phoenix@sdf.org) (Signing in (phoenix))
[10:29:25] *** Joins: phoenix (phoenix@user/phoenix)
[10:29:49] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[10:29:52] *** Joins: Oxyd (~oxyd@user/oxyd)
[10:29:55] *** phoenix is now known as Guest2104
[10:31:09] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[10:33:06] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:34:23] *** Quits: cncr04s (~cncr04s@afxr.net) (*.net *.split)
[10:34:23] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[10:34:23] *** Quits: NyB (~archon@2a02:169:1d9::1:0:0) (*.net *.split)
[10:34:50] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[10:34:57] *** Joins: NyB (~archon@2a02:169:1d9::1:0:0)
[10:35:17] *** Joins: cncr04s (~cncr04s@afxr.net)
[10:37:08] *** Joins: s1b1 (~s1b1@user/s1b1)
[10:40:22] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:3e77:451f:a622:82a5) (Remote host closed the connection)
[10:40:41] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:87f3:869a:3aa:dfd5)
[10:42:33] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: good night)
[10:48:01] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[10:49:43] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[10:51:20] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[10:54:46] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 260 seconds)
[11:01:11] *** Joins: the_lanetly_052 (~the_lanet@194.135.167.16)
[11:01:55] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[11:04:46] *** Quits: Guest36 (~Guest36@54-240-198-32.amazon.com) (Quit: Client closed)
[11:05:17] *** tner is now known as renopt
[11:05:32] *** Quits: renopt (~renopt@lisp.us.to) (Changing host)
[11:05:32] *** Joins: renopt (~renopt@user/renopt)
[11:07:26] <cbreak> vqueiroz: is that lib threadsafe?
[11:07:48] *** Quits: AmR (~AmREiSa@156.199.219.108) (Quit: Konversation terminated!)
[11:07:51] <cbreak> do you get a crash / assertion failure message, or something else? or an entry in dmesg?
[11:08:20] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[11:09:34] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:11:22] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[11:13:23] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[11:21:17] *** Joins: reset (~reset@user/reset)
[11:22:36] *** Joins: TheSchaf (~TheSchaf@p54833e1e.dip0.t-ipconnect.de)
[11:23:53] *** Joins: Electron (~ElectronA@user/electronapps)
[11:26:40] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Ping timeout: 256 seconds)
[11:32:54] *** Quits: rahl (~rahl@102.114.61.68) (Ping timeout: 256 seconds)
[11:34:52] *** Joins: rahl (~rahl@102.114.71.93)
[11:36:26] *** Joins: rendar (~rendar@user/rendar)
[11:48:34] *** Joins: onizu (uid373383@uxbridge.irccloud.com)
[11:51:04] *** Joins: Tas-sos (~Tas-sos@ppp046176221197.access.hol.gr)
[11:52:00] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[11:55:17] *** Joins: fivegruel (~fivegruel@HSI-KBW-109-192-195-188.hsi6.kabel-badenwuerttemberg.de)
[12:00:49] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:00:51] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[12:01:26] *** Quits: DrMax (~DrMax@node-1w7jra94757g02r478wxwr6fk.ipv6.telus.net) (Remote host closed the connection)
[12:01:26] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[12:04:01] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[12:06:38] *** Joins: andreasbuhr (~quassel@p549dbb0b.dip0.t-ipconnect.de)
[12:06:47] *** Quits: andreasbuhr (~quassel@p549dbb0b.dip0.t-ipconnect.de) (Client Quit)
[12:07:55] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:08:21] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Read error: Connection reset by peer)
[12:10:20] *** Quits: Guest80 (~Guest80@pd9ed7c28.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[12:10:50] *** Joins: DrMax (~DrMax@node-1w7jra94757fyzph62x7eqeod.ipv6.telus.net)
[12:11:02] *** Joins: karakedi (~eAC53C340@user/karakedi)
[12:16:49] *** Quits: vqueiroz (uid340368@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:19:30] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 265 seconds)
[12:23:01] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:25:15] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:27:08] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:87f3:869a:3aa:dfd5) (Quit: Leaving)
[12:27:25] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[12:27:34] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[12:28:04] *** Joins: evangeline (~Eleanor@178.79.105.181)
[12:29:15] *** Joins: andreasbuhr (~quassel@p549dbb0b.dip0.t-ipconnect.de)
[12:29:23] *** Quits: andreasbuhr (~quassel@p549dbb0b.dip0.t-ipconnect.de) (Client Quit)
[12:30:19] *** Joins: hightower2 (~hightower@213.147.110.20)
[12:31:51] *** Quits: traxex (~traxex@sdf.org) (Changing host)
[12:31:51] *** Joins: traxex (~traxex@user/traxex)
[12:38:56] *** Joins: Dave_R (~Dave_R@home.amunra.co.uk)
[12:42:21] *** lkor is now known as lionkor
[12:51:30] *** Joins: AmR (~AmREiSa@156.199.219.108)
[12:51:30] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[12:52:37] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:54:07] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[12:57:30] *** Guest2104 is now known as phoenix
[12:57:37] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:87f3:869a:3aa:dfd5)
[13:11:20] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:18] *** Joins: lovelace (~Elspeth@2.24.23.175)
[13:17:49] *** Joins: PJBoy (~PJBoy@2a00:23c7:8302:b301:e48c:9718:7fd3:95a8)
[13:17:49] *** Quits: PJBoy (~PJBoy@2a00:23c7:8302:b301:e48c:9718:7fd3:95a8) (Changing host)
[13:17:49] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:21:03] *** Joins: SenoraRaton (~noisebrid@192-195-83-130.static.monkeybrains.net)
[13:24:42] <SenoraRaton> I have a two dimenstional Array map[x][y] of points to objects of class Tile.  Tile has two variables std:pair<int,int> pos and std:tuple<bool,bool,bool> status.  How do I reference the *Tile.status<2> in the original 2d array(map).
[13:26:09] <SenoraRaton> O, also my tile variables are private, and can be accessed through the function Tile.getStatus() which returns the tuple of the status.
[13:26:18] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[13:28:01] *** Joins: robod34 (Username@79.113.195.239)
[13:29:45] *** Joins: moontime0001 (~moontime1@2a02:a310:c15d:cb80:efaa:dddc:3182:9de)
[13:31:54] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[13:32:06] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: leaving)
[13:32:20] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:33:22] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[13:33:57] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:38:04] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:38:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:38:12] *** ChanServ sets mode: +v npaperbot
[13:38:59] *** Joins: slidercrank (~slidercra@user/slidercrank)
[13:40:32] *** Quits: lpotter (~quassel@180-150-104-92.b49668.bne.static.aussiebb.net) (Ping timeout: 240 seconds)
[13:40:39] *** Quits: NiD27 (~nid27@49.205.144.153) (Quit: Leaving)
[13:41:31] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[13:43:24] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[13:43:35] *** Joins: lpotter (~quassel@180-150-104-92.b49668.bne.static.aussiebb.net)
[13:44:36] <cbreak> why store the coordinate of something in a grid?
[13:44:53] <cbreak> you know where it is already because you looked it up in a grid
[13:45:01] <cbreak> also, why use tuple of bool? Use a proper struct
[13:45:31] <cbreak> there you might even be able to use bit fields, if you're eager to make things space efficient, but at least you can use proper names, to make the code nicely readable
[13:47:54] <anyone> at that point one could ask why stdlib return std::pair<>s at all, if it could just be named nicely
[13:50:00] *** Quits: ania123 (~ania123@212.72.140.51) (Quit: Client closed)
[13:51:05] <cbreak> anyone: yeah. I've asked myself the same thing.
[13:51:07] <ville> because it sidesteps the most difficult part of it: naming them properly
[13:51:24] <cbreak> honestly, what is the meaning of first and second in std::map?
[13:51:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[13:52:01] <cbreak> answer: first is the iterator, second is a bool that tells you if insertion worked
[13:52:32] <ville> the "problem" the use of std::pair, or std::tuple, solves is the profiliation of one-off types you would make for these things that really are only used because of other language shortcomings
[13:52:39] <cbreak> but you wouldn't be able to tell based on the name
[13:53:15] <ville> the inability to return multiple values and how overload resolution works
[13:53:18] <cbreak> the problem tuple in particular solves is generic programming with limited introspection.
[13:53:23] <cbreak> but that's not what it's used for here.
[13:53:29] <cbreak> -> In my opinion, it's tuple abuse
[13:53:49] <ville> again they are being used for other language shortcomings
[13:53:53] <cbreak> multiple values can be returned with a struct, with properly named members
[13:54:16] <cbreak> which I'd prefer to having a pair
[13:54:41] <cbreak> or having two unnamed return values in a hypothetical C++ variant that allows more than one of them
[13:55:10] <ville> so what do you name it? say std::map::insert() you'd then name it std::map::insert_result?
[13:55:49] <cbreak> sure. With an "position" and "inserted" member
[13:56:18] <cbreak> or maybe "position" and "was_already_there"...
[13:56:18] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[13:56:39] <cbreak> either way, more intuitively usable than first and second.
[13:57:16] <cbreak> (there would obviously be a distinctly separate other struct, to replace the use of pair in map, with having "first" and "second" be replaced with "key" and "value"
[13:57:19] <ville> right, but the gained actual value there is... how much? would naming it result in some measurable improvement of some kind?
[13:57:37] <cbreak> the API would be more self-documenting
[13:57:50] <cbreak> that's the biggest improvement. Maybe the only one.
[13:58:10] <ville> cbreak: problem with that "value" being that containers chose to use value_type for something else, and it'd be mapped_value or such to match with mapped_type
[13:58:18] <PJBoy> gained value is the fact that I don't have to read code that says `it->first.second or whatever
[13:58:22] <cbreak> ville: makes sense, yes
[13:59:07] <PJBoy> and map::insert already has this
[13:59:25] <PJBoy> it has a map::insert_return_type return type with `position`, `inserted` and `node` members
[13:59:39] <cbreak> which map?
[13:59:42] <PJBoy> std::map
[13:59:47] <ville> oh they actually did it in 17
[13:59:52] <cbreak> https://en.cppreference.com/w/cpp/container/map/insert ?
[13:59:53] <PJBoy> it's just only available for the node overload
[14:00:08] <ville> if you insert a node, not a value_type
[14:00:19] <PJBoy> yeah they just realised that names are good too late
[14:00:30] <PJBoy> but stdlib's been working on that
[14:00:41] <PJBoy> all the ranges::algorithms have named return values too
[14:00:47] <cbreak> nice
[14:00:56] <cbreak> people agree with me! :D
[14:01:18] <ville> as much as i do advice against using pairs and tuples unfortunately in this case though i just don't think it's really one way or another
[14:02:56] <ville> it's in the who-gives-a-shit territory for me. now deciding to use a pair/tuple for an important data type in your domain that's used all over that's pretty clear cut "don't do it"
[14:03:19] <ville> as in i'll typedef a coordinate triplet as std::tuple<float, float, float>
[14:03:39] <PJBoy> tuple is considerably less usable than pair
[14:03:45] <PJBoy> get<0>(tup) etc.
[14:04:00] <fiesh> well that would just be an array<float, 3>
[14:04:16] <PJBoy> pair vs named struct I can understand, but tuple vs named struct is a one-sided debate
[14:04:18] <ville> PJBoy: then alias get<0> as x()
[14:04:55] <ville> PJBoy: don't follow that
[14:05:09] <ville> there's no difference between two-tuple and std::pair
[14:05:11] <fiesh> I see no advantage in pair over tuple to be honest...
[14:05:22] <PJBoy> pair at least has .first and .second
[14:05:32] <PJBoy> as opposed to get<0>() and get<1>()
[14:05:35] <fiesh> seems likes an anti-feature to me
[14:05:42] <PJBoy> you like get<>()?
[14:05:53] <fiesh> better than .first and .second any day
[14:06:00] <PJBoy> you're not welcome to my debates then
[14:06:17] <fiesh> .first and .second are awful for generic programming, get<> isn't
[14:06:59] <PJBoy> they're fine if you're generic programming with a pair
[14:08:21] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[14:08:33] *** Joins: teepee (~teepee@openscad/teepee)
[14:10:03] <cbreak> PJBoy: you sure you're not a secret pascal programmer?
[14:10:14] <cbreak> it should obviously be zeroth and first
[14:10:34] <PJBoy> I like my cardinals to start from 0 and my ordinals to start from first
[14:12:46] <anyone> Cardinal Richelieu would probably not concur ;)
[14:13:57] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:17:00] *** Quits: cnsunyour (~sunyour@129.226.182.99) (Ping timeout: 260 seconds)
[14:17:34] <fiesh> PJBoy: since mathematically, the cardinals are a subclass of the ordinals, this is a very dubious idea...
[14:17:49] <PJBoy> they're two different things
[14:17:51] <fiesh> cbreak: lhs and rhs would actually probably be better
[14:17:54] <fiesh> PJBoy: no they're not
[14:18:04] <PJBoy> you can create a mapping from one to a subset of the other, sure
[14:18:27] <PJBoy> but that would be like saying the primary colours are equivalent to the secondary colours
[14:18:35] <fiesh> PJBoy: no, alas you're wrong
[14:18:45] <PJBoy> ordinals denote order
[14:18:47] <fiesh> PJBoy: like I said, the cardinals are a subclass of the ordinals
[14:18:48] <PJBoy> cardinals don't
[14:18:54] *** Joins: jokoon (~eio@2a01:e0a:542:e160:516a:ffac:287b:2362)
[14:18:54] <PJBoy> they're clearly completely different
[14:18:56] *** Joins: cnsunyour (~sunyour@129.226.182.99)
[14:19:02] <fiesh> PJBoy: well you clearly have no clue what you're talking about
[14:19:20] *** Quits: jokoon (~eio@2a01:e0a:542:e160:516a:ffac:287b:2362) (Client Quit)
[14:19:20] <vvdaiwrw> they're equally countable, so, what's the matter?
[14:19:25] <PJBoy> define cardinal and ordinal for me
[14:19:42] <PJBoy> I'll let you know where you're missing the point
[14:19:50] *** Joins: jokoon (~eio@2a01:e0a:542:e160:516a:ffac:287b:2362)
[14:20:19] <vvdaiwrw> Cantor, where is you.
[14:20:27] <fiesh> PJBoy: seriously, up yours
[14:20:37] <PJBoy> oh do definitions offend you now?
[14:21:13] <fiesh> PJBoy: dude I was in academia for quite a while and worked in set theory, and this is the basics of the field
[14:21:25] <fiesh> PJBoy: I don't care if you think you know it better and can't look up definitions on the internet
[14:21:34] <vvdaiwrw> just joined here in the morning with my cup of chocolate, such a nice fight to watch :)
[14:21:38] <PJBoy> I did look it up
[14:21:40] <PJBoy> here's my result
[14:21:45] <PJBoy> Ordinal: "a number defining the position of something in a series, such as â€˜firstâ€™, â€˜secondâ€™, or â€˜thirdâ€™"
[14:21:50] <PJBoy> "A cardinal number is a number such as 1, 3, or 10 that tells you how many things there are in a group but not what order they are in"
[14:21:58] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 260 seconds)
[14:21:58] <PJBoy> see how blatantly different they are?
[14:22:07] <fiesh> if that's your level of mathematical definitions, have fun
[14:22:14] <PJBoy> you were in academia, but apparently not familiar with English
[14:22:19] *** Joins: alkino (~quassel@user/alkino)
[14:22:20] <PJBoy> that's sad
[14:22:22] <anyone> if that isn't your level of mathematical definitions, your loss
[14:22:53] <PJBoy> by all means use a definition of these words that completely miss the point so you can be right in this argument
[14:23:00] <PJBoy> but I was quite clear with what I was referring to
[14:26:52] <PJBoy> I don't even see any mathematical results about one set being the subset of the other
[14:27:05] <PJBoy> just results about mappings between the two, which is what I expected
[14:28:14] <PJBoy> in fact there's a result about cardinals and ordinals having a one-to-one correspondence
[14:28:31] <PJBoy> which is very non-subset like
[14:28:53] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:29:17] <PJBoy> seems your experience in academia has only resulted in insults and appeals to credential
[14:29:32] <SenoraRaton> I have a function that builds a 2d array of objects(Tile), and then returns that array.  What is its type, and how do I return it?
[14:29:50] *** Joins: smartmobili (~smartmobi@ec2-52-47-196-108.eu-west-3.compute.amazonaws.com)
[14:31:21] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[14:32:39] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:32:44] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 265 seconds)
[14:33:23] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[14:34:15] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[14:34:28] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[14:35:03] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:35:15] <SenoraRaton> I tried to define my array as "    Tile map[size][size];"  and it is telling me -> o matching function for call to â€˜Tile::Tile()â€™
[14:36:53] *** Joins: dfip^ (~dfip@h50.174.139.63.static.ip.windstream.net)
[14:38:03] *** Joins: karakedi (~eAC53C340@user/karakedi)
[14:38:04] <fiesh> PJBoy: it is obivously not a subset since it's a proper class.  an ordinal is a transitive set well-ordered by epsilon.  an ordinal delta is a cardinal if there is no eta < delta such that |eta| = |delta|, but of course things get subtle without AC here
[14:38:20] *** Joins: caramel_ (~caramel@user/caramel)
[14:38:33] <SenoraRaton> Why does it think that is a function call?  Its a decleration of a 2d array of *Tile
[14:40:03] <TinoDidriksen> SenoraRaton, it's not thinking it's a function call. It's trying to default-initialize all the elements, and Tile has no default constructor.
[14:40:17] <TinoDidriksen> Tile[][] is not Tile*[][]
[14:40:29] <fiesh> PJBoy: quoting wishy washy definitions and arguing just because you want to be right is not a scientific argument and does not warrant meaningful discussion -- however I apologize for getting emotional there, I shouldn't have
[14:41:07] * PJBoy powers down
[14:41:34] <PJBoy> I agree that arguing just to be right and not stating any kind of meaningful definition isn't conducive to meaningful discussion
[14:41:34] *** Quits: caramel (~caramel@user/caramel) (Ping timeout: 260 seconds)
[14:41:43] <PJBoy> and apologise too
[14:41:54] <fiesh> thank you
[14:42:04] <SenoraRaton> https://termbin.com/o1xu  I do define a default constructor though.
[14:43:04] <TinoDidriksen> There is no default constructor.
[14:43:13] <TinoDidriksen> The default constructor must be callable without any args.
[14:43:22] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 265 seconds)
[14:43:42] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Remote host closed the connection)
[14:44:11] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[14:44:22] <TinoDidriksen> But your generateMap is all wrong. If you want to allocate a 2D array, you're missing * and new. Ideally use std::vector and a 1D allocation that you address as 2D via math.
[14:45:04] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:45:19] *** Joins: cursey (~cursey@user/cursey)
[14:47:35] <SenoraRaton> Wait, you mean the call where I generate the object?  Or in the class decleration of the constructor?
[14:48:48] <TinoDidriksen> That depends on how you intend to solve it. Looks like you want to do it the allocation way, which means the generateMap function needs fixing. If you don't want to allocate, then the constructor needs fixing.
[14:49:39] *** Joins: furrymcg1e (~devuan@cgn-89-1-208-64.nc.de)
[14:49:44] *** Quits: furrymcg1e (~devuan@cgn-89-1-208-64.nc.de) (Client Quit)
[14:49:45] <SenoraRaton> I'm trying to track a minesweeper field. The field is static, so I should allocate?  I tied myself into knots of * trying to figure it out.
[14:50:15] <TinoDidriksen> Doesn't look static to me. Looks generated at runtime.
[14:50:22] *** Joins: furrymcgee (~devuan@cgn-89-1-208-64.nc.de)
[14:51:23] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 264 seconds)
[14:53:12] *** Joins: the_lanetly_052_ (~the_lanet@185.30.88.43)
[14:55:56] *** Quits: the_lanetly_052 (~the_lanet@194.135.167.16) (Ping timeout: 265 seconds)
[14:56:46] <SenoraRaton> Like so? https://termbin.com/un4f
[14:57:07] *** Quits: xq (~xq@user/xq) (Ping timeout: 268 seconds)
[14:57:28] *** Quits: Oxyd (~oxyd@user/oxyd) (Ping timeout: 256 seconds)
[14:57:29] <TinoDidriksen> Yeah, that's definitely better.
[14:59:52] *** Joins: Oxyd (~oxyd@user/oxyd)
[15:05:08] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[15:05:20] <vvdaiwrw> fiesh: ops, I went afk. Wasn't it "up yours" to back the "subclass" relation? You came with it first, it was not PJBoy, despite his disagreement. The discussion is dull indeed when not just one part, but *both* don't back anything they hold.
[15:05:45] <PJBoy> that's old shit now
[15:05:51] *** Joins: clime (~clime@37-48-56-191.nat.epc.tmcz.cz)
[15:06:00] <SenoraRaton> https://termbin.com/tdq7  How do I reference the xth element of the vector, and specifically the xth element of the vectors hasMine()?
[15:06:10] <vvdaiwrw> can't disagree.
[15:07:04] *** Joins: saohh (~saohh@ip-78-45-147-109.net.upcbroadband.cz)
[15:07:17] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:07:42] <TinoDidriksen> SenoraRaton, like you are, but you should take the vector by reference so it isn't copied and changes persist: std::vector<Tile>& tempmap
[15:07:43] <cbreak> SenoraRaton: vec[x]?
[15:07:47] <anyone> SenoraRaton: don't mix mine and bomb
[15:08:42] <SenoraRaton> anyone Good catch.;P
[15:09:40] <SenoraRaton> cbreak the vector is of objects, so I need to reference the object at vector[x], and specifically that objects hasMine() function.
[15:09:55] <cbreak> yes. that's what operator[] does.
[15:10:21] <cbreak> I think your design is weird though
[15:10:21] <SenoraRaton> I'm so confused.
[15:10:29] <cbreak> you have both 1D and 2D containers
[15:10:33] <cbreak> and seem to use them both at once
[15:10:36] <cbreak> I recommend not doing that
[15:10:41] <cbreak> pick one of the two
[15:10:45] <SenoraRaton> I'm transitioning to 1d containers.
[15:10:46] <TinoDidriksen> He doesn't. He just didn't update the code yet.
[15:10:55] <cbreak> also, why both tempmap and map?
[15:11:11] <cbreak> and why is tempmapa a parameter?
[15:11:18] <cbreak> if it's a temporary, the function should create it itself
[15:11:20] <SenoraRaton> here is the full code. https://termbin.com/bcwxd
[15:11:49] <cbreak> SenoraRaton: also, consider a better algorithm for random placement:
[15:11:59] <cbreak> random selection without putting back
[15:12:10] <SenoraRaton> I'm just trying to get something implemented, it was the simplest thing to code.
[15:12:18] <cbreak> it's nasty code
[15:12:25] <cbreak> since you modify the loop counter inside the loop body
[15:12:37] <cbreak> this can be very confusing
[15:13:01] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 265 seconds)
[15:13:31] <cbreak> there are ways to do this nicer, with a vector of indices and random picking, in different ways, but that's not free either.
[15:13:36] <SenoraRaton> None of this helps me understand what is going on, and how to fix it.
[15:13:57] <SenoraRaton> Increasing algorithmic complexity is the last thing I want to do.  I want a minimum viable product.
[15:14:07] <cbreak> your code's needlessly complicated, that's going on
[15:14:16] <cbreak> you should simplify it
[15:14:25] <cbreak> removing the branching I mentioned above
[15:14:35] <SenoraRaton> The branching is obvious and transparent.
[15:14:37] <cbreak> and the loop counter changing
[15:15:09] <SenoraRaton> So break one of the only parts of my program that functions...
[15:15:37] <cbreak> also, as I said some time ago: your Tile doesn't need to store the position
[15:15:37] <SenoraRaton> Maybe I just don't understand how I'm supposed to rewrite it, in any way.
[15:15:51] <cbreak> since the position is already known from the position the tile has in your map
[15:15:56] <SenoraRaton> How am I going to know the position of the tile in a 1d vector?
[15:16:05] <cbreak> from the position in the 1D vector
[15:16:26] <cbreak> not sure if you've already been given the formula to compute the 1D position from a 2D position
[15:16:29] <SenoraRaton> I feel like I was so close, and now I feel like I'm a million miles away again.
[15:16:32] <cbreak> but that's obviously invertible
[15:16:53] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:17:05] <cbreak> isKnown() // pointless function
[15:17:07] <SenoraRaton> I mean, you just modulus the position from the width of the "screen"
[15:17:14] <cbreak> hasMine: also pointless
[15:17:21] <cbreak> hasFlag: also pointless
[15:17:30] <cbreak> you can remove all of them, makes the code smaller
[15:17:31] <SenoraRaton> How am I to make calls to the function to check the states of its variables?
[15:17:46] <SenoraRaton> The variables are delcared private, and the function calls return the states of the variables.
[15:17:48] <cbreak> you can check the variables directly
[15:17:54] <SenoraRaton> If they are private?
[15:18:01] <cbreak> make them public
[15:18:06] <SenoraRaton> Why?
[15:18:10] <cbreak> because it's simpler
[15:18:18] <SenoraRaton> If they are public, then things can assign to them.
[15:18:23] <cbreak> so?
[15:18:43] <cbreak> if you really want the functions, and keep the vars private, then fix the functions
[15:18:51] <cbreak> make them const, and make them just return the value
[15:18:59] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:19:04] <SenoraRaton> So that means that potentially things could be broken because some random function a million lines away starts writing to the objects position.
[15:19:08] <cbreak> if (true) return true; else return false; // much easier to just return value;
[15:19:20] <cbreak> SenoraRaton: no
[15:19:32] <cbreak> it means you should chose your API boundaries well
[15:20:40] <cbreak> you making the variables private doesn't protect from change, since you provide functions to change it.
[15:20:46] <cbreak> it just makes the API more annoying to use
[15:21:18] <cbreak> accessors are useful if you want to provide some object invariance protection, or similar
[15:21:20] <SenoraRaton> They are protected, because they only have a finite set of changes that can occur.
[15:21:20] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[15:22:02] <anyone> computers are finite anyway, so even if they weren't protected, changes are finite
[15:22:04] <SenoraRaton> You can know set a square to isKnown=false.  You can only discover squares, and you can not change the position, and you can only place mines, not remove them.
[15:22:23] <cbreak> I can remove them
[15:22:37] <cbreak> thing = Tile{};
[15:22:47] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[15:22:50] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[15:22:55] <SenoraRaton> Thats not removing a mine from a Tile object.
[15:23:08] <cbreak> it is.
[15:23:17] <cbreak> it replaces the whole content of the tile object with one that doesn't have a mine
[15:23:35] <cbreak> since you don't protect operator=
[15:23:41] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[15:23:51] <SenoraRaton> How do I protect operator=?
[15:23:57] <cbreak> you don't need to.
[15:24:03] <cbreak> the whole notion of protecting against this is silly
[15:24:11] <cbreak> but if you want: implement operator= and check
[15:24:38] <cbreak> (but honestly, even if you do that, I can change it still, with increasingly more nasty ways :D)
[15:25:16] <SenoraRaton> I mean your the one that is presenting nefarious way, and then encouraging me to REDUCE the protections in my code....
[15:25:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 264 seconds)
[15:25:47] <cbreak> in my opinion, the goal when creating an API should be to make it easy to use, convenient, safe, powerful. And for something like this, a simple value struct fulfills those requirements
[15:26:10] <cbreak> I'm saying your protections are pointless
[15:26:21] <cbreak> since they make using the class more annoying
[15:26:21] <SenoraRaton> My goal when creating an api is code that compiles, and does 85% of what I told it to do.  Give or take a few %.
[15:26:40] <cbreak> that's a low bar :(
[15:27:09] <SenoraRaton> I have no idea what I'm doing, you dont' expect a toddler to run 100M hurdles.
[15:27:11] <cbreak> either way, there's a lot that can be simplified in that code
[15:27:16] <SenoraRaton> If it makes it across the room your impressed.
[15:28:43] <cbreak> I personally think that code should have a purpose, and help reach that purpose, in some non-redundant way
[15:28:54] <cbreak> that's why I also recommended removing the position from your tiles
[15:28:57] <cbreak> since it's redundant
[15:29:12] *** Joins: ko (~i.am@user/marlboro)
[15:29:48] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 260 seconds)
[15:29:49] <cbreak> there are more issues further down in your code.
[15:29:51] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[15:29:53] <SenoraRaton> Sure, maybe there is.  That doesn't solve my issue that I don't understand how to properly address this std::vector.  Lets assume I could just reference the variable.  is it tempmap[x].hasmine?
[15:29:54] <cbreak> you might have already fixed them
[15:30:03] <cbreak> yes
[15:30:05] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:30:08] <cbreak> vec[idx]
[15:30:08] <SenoraRaton> No, there are LOTS of issues with my code.  I repeat. I have no idea what I am doing.
[15:30:16] <SenoraRaton> idx?
[15:30:16] <cbreak> that gives you a reference to entry at idx
[15:30:20] <cbreak> index
[15:31:18] <cbreak> you can map from 2D coordinates to 1D index with idx = width * y + x;
[15:31:45] <cbreak> you can map in the other direction with x = idx % width; y = idx / width;
[15:32:08] <SenoraRaton> Sure, I cant access them though.
[15:32:16] <cbreak> sure you can.
[15:32:22] <cbreak> vec[idx]
[15:32:26] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:32:38] <cbreak> in your case, you call your vector map
[15:32:46] <SenoraRaton> That does not work.
[15:33:08] <cbreak> { std::vector<int> vec = {1,2,3}; std::cout << vec[1]; }
[15:33:09] <geordi> 2
[15:33:10] <SenoraRaton> https://termbin.com/j7qf
[15:33:11] <cbreak> works.
[15:33:44] <PJBoy> `count << 0` :/
[15:34:06] <PJBoy> tempmap<x> :\
[15:34:18] <cbreak> I decided to not list all the problems.
[15:34:54] <SenoraRaton> I'm refactoring it, so I have to rewrite it all over again.
[15:35:56] <cbreak> what I'd recommend is to use "Map" as API boundary, not Tiles
[15:36:07] <cbreak> so implement your member functions as part of a map class
[15:36:14] <cbreak> and have tiles just inside, as simple structs
[15:36:24] <cbreak> you can have the 1D <-> 2D logic in there too
[15:37:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:38:33] <SenoraRaton> Oh my god it compiles.
[15:39:24] *** Joins: xq (~xq@user/xq)
[15:40:59] *** Quits: clime (~clime@37-48-56-191.nat.epc.tmcz.cz) (Ping timeout: 250 seconds)
[15:42:55] *** Joins: magla (~gelignite@55d4d56a.access.ecotel.net)
[15:43:35] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[15:44:29] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:45:16] <SenoraRaton> https://termbin.com/lx6p  Its still giving me an error: class std::vector<Tile>â€™ has no member named â€˜mineâ€™   57 |             if (map[x].mine == true) {
[15:46:40] *** Joins: slavfox_ (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[15:47:07] <lloda> if ((*map)[x].mine) { ...
[15:47:32] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Ping timeout: 260 seconds)
[15:47:32] *** slavfox_ is now known as slavfox
[15:48:48] <cbreak> SenoraRaton: don't use pointers
[15:48:53] <cbreak> pass by reference.
[15:49:36] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Ping timeout: 256 seconds)
[15:50:54] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[15:51:04] *** Joins: proller (~p@2a02:6b8:0:40c:94a:2d18:3aad:1736)
[15:51:24] <SenoraRaton> Isn't a pointer passing by reference?
[15:51:36] <cbreak> no
[15:51:42] <cbreak> pointers are passed by value
[15:51:47] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[15:51:49] <SenoraRaton> https://termbin.com/7yzw  There is still something wrong with how I address the printmap function.  https://termbin.com/7yzw line 71
[15:51:58] <cbreak> std::vector<Tile> const & tiles
[15:52:03] <cbreak> this is how you pass by const-ref
[15:52:13] <cbreak> if you want an in-out or an out parameter, leave the "const"
[15:53:12] <cbreak> SenoraRaton: don't use pointers for it
[15:53:17] <SenoraRaton> so is is printMap(&map, sizeOfGrid)
[15:53:27] <cbreak> no
[15:54:25] *** Quits: hightower2 (~hightower@213.147.110.20) (Ping timeout: 265 seconds)
[15:55:32] <cbreak> SenoraRaton: you're using pointer-passing now
[15:55:45] <cbreak> as is seen by the function taking a pointer as parameter
[15:55:58] <cbreak> I'm suggesting you use reference passing instead
[15:56:04] <cbreak> as I mentioned above
[15:57:55] *** Quits: Dave_R (~Dave_R@home.amunra.co.uk) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:58:40] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:59:47] *** Joins: Atque (~Atque@user/atque)
[16:00:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[16:02:15] *** Pajus is now known as Tolkien
[16:02:18] *** Tolkien is now known as Pajus
[16:03:13] *** Pajus is now known as Pajus_0fF
[16:04:14] <ville> SenoraRaton: references are not pointers. and even the pointers in c++ are not necessarily the same as your machine's pointers, as they probably have all kinds of additional rules associated with them. although once you compile something and inspect the assembly references very likely end up looking like machine pointers
[16:04:42] *** Joins: Leone (~Leo@216.154.50.172)
[16:05:17] *** Joins: helloWorld123 (~panos@2a00:fe0:32a:fd0:3a26:640e:88d0:85e)
[16:05:28] <helloWorld123> hi
[16:05:32] <helloWorld123> why is this code excerpt valid? https://paste.centos.org/view/b0a09e45
[16:05:55] <ville> helloWorld123: and why wouldn't it be?
[16:06:07] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[16:07:45] <helloWorld123> idk, im just trying to understand why calling the function f() that we haven't even defined (we've only defined a reference to it)
[16:07:55] <helloWorld123> results in x being equal to 10
[16:08:11] <anyone> f was defined in line 6
[16:08:12] <ville> helloWorld123: lines 6-8 is the definition of the function
[16:08:22] <anyone> do you not spot this
[16:08:36] <ville> helloWorld123: f is a function taking no arguments and returning a reference-to-int
[16:08:47] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:09:20] <ville> helloWorld123: if you change your whitespace usage: int &f() to: int& f() it perhaps becomes clearer
[16:10:04] <helloWorld123> Yeah, it definitely is. f is a reference to an integer
[16:10:26] <helloWorld123> and calling f() in say, cout, results in the value of x (5) being returned
[16:10:36] *** Quits: saohh (~saohh@ip-78-45-147-109.net.upcbroadband.cz) (Quit: Leaving)
[16:10:48] <helloWorld123> but how's the whole assignment aspect thing happening? i may not understand how references work under the hood
[16:10:54] <ville> helloWorld123: f is not a reference-to-int. f is a function
[16:10:59] <helloWorld123> got it
[16:11:28] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[16:11:49] <ville> helloWorld123: functions have a name, parameter list and a return type. you just need to learn to identify those 3 parts
[16:12:12] <helloWorld123> if I have a function called int test() {std::cout<<10<<std::endl;} and another function called int& test2 { return test; }, will calling test2() result in calling test()?
[16:12:29] <ville> helloWorld123: no. it wouldn't compile
[16:12:42] <ville> helloWorld123: you're trying to convert a pointer-to-function to an int
[16:13:07] <helloWorld123> so if it were int test2 { return test; }, then test would be called :D
[16:13:32] <ville> helloWorld123: no.. that wouldn't compile either. now your "function" has no parameter list
[16:13:34] <cbreak> there's no call in test
[16:13:48] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[16:13:50] <cbreak> to call a function, you need (), either directly or indirectly
[16:13:52] <helloWorld123> i suck at this
[16:14:05] <ville> helloWorld123: c++ needs the () for empty parameter lists. when declraing/defining and when calling
[16:14:20] <helloWorld123> https://paste.centos.org/view/693cc721 this does compile according to what you've both told me
[16:14:30] <helloWorld123> (to clarify: not a question)
[16:14:58] <ville> helloWorld123: yes. but that's not what you asked above. above you didn't call "test". you implicitly took it's address because you didn't call it using ()
[16:15:02] <ville> err its
[16:16:14] <helloWorld123> yeah, i corrected it as soon as you told me about this
[16:17:12] <helloWorld123> so f2() = 10; is another way of writing &x = 10;?
[16:17:26] <ville> no.. the latter would't compile
[16:17:27] <helloWorld123> sorry, *f
[16:17:47] <helloWorld123> and since &f is a function that returns the address of int x, that's where the 10 goes
[16:18:24] *** Joins: Dave_R (~Dave_R@home.amunra.co.uk)
[16:18:26] <ville> if you have: int &f() you're still associating the & in the return type with the wrong thing. it's part of the return type, not the function "name"
[16:19:00] <ville> int &f() {} decomposes like so: function name: f, parameter list (), return type: int &
[16:19:06] <ville> well "decomposes"
[16:19:22] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[16:19:42] <helloWorld123> wait, sorry, so when i call int &f(), what do i get in return?
[16:19:57] <ville> an int &, a reference-to-int
[16:20:20] <ville> to go back to above, later doing &f would take the address of the function, not its return value as the function isn't called, which is funnily the same as doing just f which implictly converts to pointer-to-function
[16:21:21] <helloWorld123> yeah, we don't want the address of the reference, got it
[16:21:27] *** Joins: clime (~clime@37-48-56-191.nat.epc.tmcz.cz)
[16:22:06] <ville> umm that's not what i was getting at
[16:22:54] <helloWorld123> apologies
[16:23:03] <ville> doing: using one of the expressions of the form: f, &f, f() or &f() are distinct things.
[16:24:33] <ville> f implicitly converts the expressio into the address of the function, &f does the same explicitly. f() results in a reference-to-int. &f() results in the address of the int the function returned a reference to
[16:25:06] <helloWorld123> so &x == &f()
[16:25:10] *** Joins: xiongxin (~Thunderbi@113.116.34.48)
[16:26:03] <helloWorld123> yup, tried to compile it, seems like it
[16:26:23] <ville> yes given the original paste https://paste.centos.org/view/b0a09e45
[16:26:33] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Read error: Connection reset by peer)
[16:31:41] *** Quits: clime (~clime@37-48-56-191.nat.epc.tmcz.cz) (Ping timeout: 250 seconds)
[16:32:08] *** Quits: smartmobili (~smartmobi@ec2-52-47-196-108.eu-west-3.compute.amazonaws.com) (Quit: Client closed)
[16:32:11] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[16:33:59] *** Quits: froggy (~froggy@2.235.241.212) (Quit: ZNC 1.8.2 - https://znc.in)
[16:34:46] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:34:48] *** Joins: froggy (~froggy@2.235.241.212)
[16:34:50] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[16:36:12] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[16:39:29] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[16:39:40] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:42:04] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:42:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:44:54] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Read error: No route to host)
[16:45:59] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 250 seconds)
[16:46:17] *** Joins: Enitin (~Enitin@82.102.22.86)
[16:49:52] *** Joins: hightower2 (~hightower@213.147.110.20)
[16:50:00] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[16:50:27] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:51:16] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:51:27] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[16:51:48] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:52:23] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[16:52:40] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:87f3:869a:3aa:dfd5) (Quit: Leaving)
[17:01:19] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[17:03:36] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[17:04:14] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:09:37] *** Joins: fkdnd (~fkdnd@178.49.152.151)
[17:11:34] *** Quits: froggy (~froggy@2.235.241.212) (Quit: ZNC 1.8.2 - https://znc.in)
[17:11:47] *** Joins: froggy (~froggy@2.235.241.212)
[17:13:42] *** Quits: proller (~p@2a02:6b8:0:40c:94a:2d18:3aad:1736) (Remote host closed the connection)
[17:14:48] *** Joins: proller (~p@2a02:6b8:0:40c:7c4:4db1:a09b:f462)
[17:17:03] *** Quits: magla (~gelignite@55d4d56a.access.ecotel.net) (Quit: Stay safe!)
[17:23:50] *** Quits: helloWorld123 (~panos@2a00:fe0:32a:fd0:3a26:640e:88d0:85e) (Ping timeout: 265 seconds)
[17:26:17] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[17:27:38] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 256 seconds)
[17:27:56] *** Joins: fkdnd3 (~fkdnd@178.49.152.151)
[17:28:06] *** Joins: alkino (~quassel@user/alkino)
[17:28:48] *** Quits: fkdnd (~fkdnd@178.49.152.151) (Ping timeout: 256 seconds)
[17:33:10] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[17:36:28] *** Joins: bindu (~bindu@user/bindu)
[17:38:05] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:38:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:38:12] *** ChanServ sets mode: +v npaperbot
[17:40:16] *** Quits: proller (~p@2a02:6b8:0:40c:7c4:4db1:a09b:f462) (Ping timeout: 265 seconds)
[17:40:31] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:41:41] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:42:00] *** Joins: jokoon2 (~eio@2a01:e0a:542:e160:91b6:97b8:3d4e:720d)
[17:42:24] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[17:42:43] *** Joins: eio__ (~eio@2a01:e0a:542:e160:b1a5:edae:ef93:654e)
[17:45:06] *** Quits: jokoon (~eio@2a01:e0a:542:e160:516a:ffac:287b:2362) (Ping timeout: 265 seconds)
[17:45:16] *** Quits: Electron (~ElectronA@user/electronapps) (Read error: Connection reset by peer)
[17:45:32] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[17:46:10] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[17:47:02] *** Quits: jokoon2 (~eio@2a01:e0a:542:e160:91b6:97b8:3d4e:720d) (Ping timeout: 265 seconds)
[17:47:08] *** Pajus_0fF is now known as Pajus
[17:49:36] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:52:42] *** Joins: proller (~p@2a02:6b8:0:40c:9b16:3a15:48a7:1984)
[17:53:00] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 265 seconds)
[17:56:07] *** Joins: LucaTM (~LucaTM@user/lucatm)
[18:00:57] *** Joins: constxd (~brad@192.75.101.164)
[18:01:03] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Ping timeout: 265 seconds)
[18:03:47] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[18:04:29] *** Joins: bindu (~bindu@user/bindu)
[18:21:50] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 265 seconds)
[18:22:31] *** Joins: Atque (~Atque@user/atque)
[18:23:03] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[18:23:16] *** Joins: Enitin (~Enitin@82.102.22.86)
[18:23:55] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[18:25:02] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Client Quit)
[18:25:14] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[18:27:55] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:4ee:8c8e:69d7:47f4)
[18:27:55] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:4ee:8c8e:69d7:47f4) (Changing host)
[18:27:55] *** Joins: skapata (~Skapata@user/skapata)
[18:28:56] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[18:34:30] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 256 seconds)
[18:36:03] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[18:38:43] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[18:39:22] *** Joins: jkaye (~jkaye@2601:281:8300:7530:e618:9306:a767:ab2)
[18:40:40] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[18:41:08] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[18:41:29] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[18:44:21] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[18:45:29] *** Quits: froggy (~froggy@2.235.241.212) (Quit: ZNC 1.8.2 - https://znc.in)
[18:49:36] *** Quits: emerent (~quassel@p200300cd574309a3ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:49:51] *** Joins: froggy (~froggy@2.235.241.212)
[18:50:12] *** Joins: emerent (~quassel@p200300cd57430928ba27ebfffed28a59.dip0.t-ipconnect.de)
[18:55:02] *** Joins: shtrb (~shtrb@user/shtrb)
[18:55:52] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[18:56:38] *** Quits: fivegruel (~fivegruel@HSI-KBW-109-192-195-188.hsi6.kabel-badenwuerttemberg.de) (Ping timeout: 265 seconds)
[19:08:33] *** Quits: dfip^ (~dfip@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[19:09:42] *** Quits: SenoraRaton (~noisebrid@192-195-83-130.static.monkeybrains.net) (Quit: Konversation terminated!)
[19:11:12] *** Quits: Tokamak (~Tokamak@172.58.188.114) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:11:20] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 256 seconds)
[19:11:51] *** Joins: xkuru (~xkuru@user/xkuru)
[19:17:28] *** Joins: magla (~gelignite@55d4d56a.access.ecotel.net)
[19:18:20] *** Joins: Tokamak (~Tokamak@172.58.188.114)
[19:18:41] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:20:22] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:20:39] *** Joins: bindu (~bindu@user/bindu)
[19:23:11] *** Joins: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac)
[19:24:42] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:25:38] *** Quits: eio__ (~eio@2a01:e0a:542:e160:b1a5:edae:ef93:654e) (Ping timeout: 265 seconds)
[19:30:24] *** Quits: xiongxin (~Thunderbi@113.116.34.48) (Remote host closed the connection)
[19:31:26] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[19:31:30] *** Joins: pulse (~pulse@user/pulse)
[19:32:38] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:33:38] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[19:35:33] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[19:35:47] *** Joins: rgrinberg (~textual@152.231.136.22)
[19:37:14] *** Quits: proller (~p@2a02:6b8:0:40c:9b16:3a15:48a7:1984) (Ping timeout: 265 seconds)
[19:40:27] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Remote host closed the connection)
[19:40:55] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[19:45:01] *** Joins: great_taste (~great_tas@190.32.235.20)
[19:45:53] *** Joins: Enitin (~Enitin@82.102.22.85)
[19:46:13] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[19:50:25] *** Joins: vqueiroz (uid340368@hampstead.irccloud.com)
[19:51:13] *** Quits: Tokamak (~Tokamak@172.58.188.114) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:52:17] *** Quits: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com) (Ping timeout: 246 seconds)
[19:52:46] <vqueiroz> cbreak: "libspng is threadsafe as long as contexts are not shared across threads. It is safe to create multiple contexts on a thread." (source: https://libspng.org/#is-libspng-threadsafe)
[19:54:05] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[19:55:04] <vqueiroz> cbreak: So yes. I tried std::async but if I don't use std::launch::deferred I get the same problem e-e
[19:55:20] *** Joins: Tokamak (~Tokamak@172.58.188.114)
[19:55:26] <vqueiroz> Also it seems I can't debug the thing. It just never gets anywhere
[19:56:40] *** Joins: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c)
[19:57:23] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[19:58:23] *** Joins: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com)
[20:00:31] <vqueiroz> Process finished with exit code 137 (interrupted by signal 9: SIGKILL)
[20:00:32] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[20:02:07] <anyone> Some implementations of std::chrono uses long integers; e.g. stdlibc++'s steady_clock::duration uses chrono::nanoseconds [chrono::duration<uint_least_64_t,std::nano>]
[20:02:49] <anyone> That means one incurs 64-bit math if working with such scalars. I found that this is rather inefficient on x86(32), where it seems preferable to use a timespec-style approach of 2-ints-of-each-32bits..
[20:03:55] <anyone> changing stdlib isn't "easy" from a perspective of just using an implementation. Welcoming any random thoughts at this point.
[20:04:31] <vqueiroz> aha[Mon Nov 15 10:27:17 2021] Out of memory: Killed process 9272
[20:04:32] <anyone> basically, "are there any remedies against my implementation using the unfavorable uint_least64_t for their timekeeping"
[20:09:38] *** Joins: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com)
[20:14:34] *** Joins: proller (~p@2a02:6b8:0:40c:7d38:5495:f4b4:c9dc)
[20:15:11] <xq> random thought: it's 2021, don't use 32 bit cpus
[20:18:16] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[20:18:19] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 265 seconds)
[20:21:18] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[20:21:20] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[20:21:21] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 250 seconds)
[20:21:46] <mefistofeles> hey, would printing something after a return would ever be called/executed? That seems weird, but someone suggested that here
[20:22:52] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[20:23:12] <barometz> no, any code after a return in the same scope is dead code
[20:23:35] <PJBoy> unless it's goto'd
[20:23:38] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 260 seconds)
[20:23:41] *** Joins: alkino_ (~quassel@user/alkino)
[20:23:58] <z9z0b3t1c> but you can have a return statement inside a conditional scope, say, and then carry on with the function after that scope is closed.
[20:24:16] <z9z0b3t1c> if (blah) return 0;
[20:24:21] <PJBoy> if the return isn't executed
[20:24:55] <PJBoy> so if blah is false there, then you get your code execution from after that return
[20:25:02] <PJBoy> and if blah is true, you get returned and that's it
[20:25:08] <mefistofeles> yeah, it's in the same block and everything
[20:25:17] <mefistofeles> I guess they just meant before instead of after, and got confused
[20:25:20] *** Quits: Tokamak (~Tokamak@172.58.188.114) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:25:38] <z9z0b3t1c> as an example, this is commonly seen in a recursive function with a base case - you find the base case early and return. If the base case isn't hit, then you go onto the rest of the algorithm.
[20:32:55] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[20:33:28] <anyone> xq: Yeah pretty much. I'll just document the typical speeds to expect.
[20:36:25] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[20:36:45] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[20:36:52] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:40:16] *** Quits: onizu (uid373383@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:40:31] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:41:39] *** Joins: mattallmill_ (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[20:42:00] *** Quits: the_lanetly_052_ (~the_lanet@185.30.88.43) (Ping timeout: 256 seconds)
[20:42:29] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 265 seconds)
[20:48:01] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[20:49:40] *** Joins: SorinK (~SK@86.124.208.139)
[20:49:57] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:52:53] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[20:52:59] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[20:53:40] *** Parts: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com) ()
[20:53:50] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[20:55:02] *** Quits: mattallmill_ (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 256 seconds)
[20:56:51] *** Quits: keur (~keur@segfault.fun) (Quit: WeeChat 2.4)
[20:57:48] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[21:05:09] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[21:05:31] *** Joins: svm_invictvs_ (~svm_invic@user/svm-invictvs/x-6696469)
[21:05:56] *** Quits: Samian (~s@user/samian) (Ping timeout: 245 seconds)
[21:07:15] <shtrb> Was code like namespace std {bool operator()==(const mytype_t & lhs,const mytype_t&rhs) { return lhs.field == rhs.field; } }; was valid at some point or it was MSVC quirk it was matched ?
[21:08:04] <PJBoy> are the extra parentheses in `operator==(...)` there intentional?
[21:08:17] <shtrb> typo sorry
[21:08:19] *** Joins: Tokamak (~Tokamak@172.58.188.114)
[21:08:47] <shtrb> like this : namespace std {bool operator==(const mytype_t & lhs,const mytype_t&rhs) { return lhs.field == rhs.field; } };
[21:08:51] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:08:59] <PJBoy> and mytype_t is not from namespace std?
[21:09:02] *** Quits: lovelace (~Elspeth@2.24.23.175) (Quit: Konversation terminated!)
[21:09:03] <shtrb> yes
[21:09:20] <PJBoy> well it's certainly questionable code then
[21:09:37] <PJBoy> I think stdlib calls to operator== would probably match
[21:09:48] <PJBoy> and user code wouldn't
[21:10:09] <shtrb> Oh , so stdlib should match it , even if mytype is not member of std ?
[21:10:37] <PJBoy> I would expect so
[21:10:45] <shtrb> I see thanks
[21:10:51] <PJBoy> but I'm not sure, so
[21:10:56] <PJBoy> don't go around quoting my name
[21:11:22] <shtrb> With C++17 it find, in C++20 it is not, that is why I started to look , and thought I must had been sleep deprived when I wroe it
[21:11:26] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[21:11:32] <kalven> - PJBoy in #C++
[21:11:50] <shtrb> But thanks PJBoy
[21:11:51] <PJBoy> it's fine to add overloads to namespace std >_>
[21:12:39] <PJBoy> or were you just quoting me, right >_>
[21:13:06] <shtrb> I did not quote you :)
[21:13:44] <PJBoy> actually idk now, cppreference says adding any declaration to namespace std is UB
[21:13:48] <PJBoy> outside the list of exceptions
[21:14:08] <ville> yes that rule changed in... 14?
[21:14:30] *** Quits: SorinK (~SK@86.124.208.139) (Remote host closed the connection)
[21:14:32] <shtrb> PJBoy, can you give me a link ?
[21:14:36] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[21:14:41] <PJBoy> https://en.cppreference.com/w/cpp/language/extending_std
[21:14:48] <ville> 98,03 you could add overloads for user-defined types, then at some point they decided they'll deny everything by default
[21:14:51] <shtrb> thanks!
[21:15:35] <PJBoy> last time I tried to find the standard reference for it, I came up short though
[21:16:48] <PJBoy> here it is though http://eel.is/c++draft/namespace.std
[21:16:49] *** Quits: jkaye (~jkaye@2601:281:8300:7530:e618:9306:a767:ab2) (Ping timeout: 250 seconds)
[21:16:51] <shtrb> Wait, does that mean that namespace std { template<> struct std::less < mytype_t>(bool operator().. ) }; is also UB ?
[21:16:53] <ville> http://www.eelis.net/c++draft/constraints#namespace.std-1
[21:16:57] <PJBoy> idk what kind of crack I must have been smoking before
[21:17:07] <PJBoy> 'cause the wording is super clear
[21:18:42] *** Joins: z9z0b3t1_ (~z9z0b3t1c@host86-142-233-89.range86-142.btcentralplus.com)
[21:18:44] *** Quits: proller (~p@2a02:6b8:0:40c:7d38:5495:f4b4:c9dc) (Ping timeout: 265 seconds)
[21:19:46] *** Joins: cart_man (~rynot@host-78-144-121-1.as13285.net)
[21:21:00] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[21:21:03] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:21:14] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[21:21:47] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:21:53] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[21:22:36] *** Quits: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c) (Ping timeout: 265 seconds)
[21:23:09] *** Quits: Dave_R (~Dave_R@home.amunra.co.uk) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:26:21] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[21:27:08] *** Quits: Tokamak (~Tokamak@172.58.188.114) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:27:42] *** Joins: Moosadee (~Moosadee@216.185.233.28)
[21:28:46] *** Quits: rgrinberg (~textual@152.231.136.22) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:35:24] *** Joins: Samian (~s@user/samian)
[21:35:46] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[21:35:51] *** Joins: eio__ (~eio@2a01:e0a:542:e160:b1a5:edae:ef93:654e)
[21:38:05] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:38:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:38:14] *** ChanServ sets mode: +v npaperbot
[21:39:07] *** Joins: linguist (~autistic@user/linguist)
[21:44:46] *** Joins: Tokamak (~Tokamak@172.58.188.114)
[21:46:00] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:46:16] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Quit: Leaving)
[21:46:24] *** svm_invictvs_ is now known as svm_invictvs
[21:47:58] *** Joins: created (~created@bzq-79-178-12-243.red.bezeqint.net)
[21:49:14] <created> c++20 question - is there any workaround for wanting to use async RAII inside coroutine, other than manually calling the "async destructor" on every exit path?
[21:49:38] <created> (I see there's a spec proposal about this, but it seems dead-ish? http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1662r0.pdf)
[21:52:05] *** Quits: eio__ (~eio@2a01:e0a:542:e160:b1a5:edae:ef93:654e) (Quit: Leaving)
[21:56:58] *** Joins: horribleprogram (~user@user/horribleprogram)
[22:01:24] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[22:02:35] <PJBoy> [p1662]
[22:02:35] <npaperbot> P1662R0: [Evolution] Adding async RAII support to coroutines <https://wg21.link/p1662r0> (by Lewis Baker) (2019-06-17) (Related: https://wg21.link/p1662r0/github)
[22:02:49] <PJBoy> > The author tells me they won't bring an update to Prague, because async RAII is hard to retrofit into the current coroutines design. This might require a different approach to coroutines
[22:03:33] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[22:03:38] <PJBoy> yeah that's pretty dead looking
[22:08:59] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[22:15:29] *** Joins: jkaye (~jkaye@2601:281:8300:7530:7289:19f7:f3fa:e188)
[22:24:01] *** Joins: proller (~p@2a02:6b8:b081:8017::1:3c)
[22:24:45] *** Quits: fkdnd3 (~fkdnd@178.49.152.151) (Quit: Client closed)
[22:27:06] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[22:30:03] *** Quits: Moosadee (~Moosadee@216.185.233.28) (Remote host closed the connection)
[22:31:41] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:33:10] *** Quits: letto (~letto@86.120.85.133) (Read error: Connection reset by peer)
[22:34:39] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:e14a:d90e:46d2:87c4)
[22:36:32] *** Joins: letto (~letto@86.120.85.133)
[22:38:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 245 seconds)
[22:38:29] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:39:31] <created> Thanks. That's a real shame
[22:40:34] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[22:41:25] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[22:41:48] *** Parts: created (~created@bzq-79-178-12-243.red.bezeqint.net) (Leaving)
[22:43:29] *** Quits: xcm (~xcm@user/xcm) (Remote host closed the connection)
[22:43:46] *** Joins: xcm (~xcm@user/xcm)
[22:51:37] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[22:52:29] *** Quits: furrymcgee (~devuan@cgn-89-1-208-64.nc.de) (Quit: leaving)
[22:53:21] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[22:55:47] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Remote host closed the connection)
[22:56:12] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[22:56:13] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[22:57:49] *** Joins: rgrinberg (~textual@200.5.63.76)
[23:05:07] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[23:06:02] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[23:09:02] *** Joins: Betal (~Betal@user/betal)
[23:14:58] *** Quits: Tokamak (~Tokamak@172.58.188.114) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:18:19] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[23:18:58] *** Joins: Inline (~Inline@2a02:908:1252:7a80:7c12:e31e:34fb:c517)
[23:25:10] *** Joins: King_DuckZ (~quassel@2a00:66c0:1:1::51)
[23:25:56] *** Quits: CppCon (~istupy@2620:0:1003:206:efff:4122:1028:ce8d) (Ping timeout: 245 seconds)
[23:26:20] *** Quits: alkino_ (~quassel@user/alkino) (Ping timeout: 265 seconds)
[23:26:26] *** Joins: alkino (~quassel@user/alkino)
[23:26:42] *** Joins: Dave_R (~Dave_R@home.amunra.co.uk)
[23:27:28] <King_DuckZ> hey all, I have this code https://godbolt.org/z/1j68nra85 and I'd like line 28 to return V as it was at line 20. I know you can call virtual consteval methods but I'm not very familiar with that, do you think I could use that or any other language feature to make that V "leak out" of the constructor without adding it to class type itself?
[23:28:45] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4fe:2e55:2875:30e0)
[23:29:02] *** Quits: z9z0b3t1_ (~z9z0b3t1c@host86-142-233-89.range86-142.btcentralplus.com) (Remote host closed the connection)
[23:29:04] <King_DuckZ> or maybe there is just no way to do that in a constexpr context?
[23:31:09] *** Quits: Dave_R (~Dave_R@home.amunra.co.uk) (Ping timeout: 250 seconds)
[23:32:14] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[23:34:34] *** Joins: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c)
[23:37:10] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[23:37:52] *** Joins: CppCon (~istupy@2620:0:1003:206:982e:487c:2b24:6d9f)
[23:38:31] *** Joins: jokoon (~eio@2a01:e0a:542:e160:b1a5:edae:ef93:654e)
[23:38:32] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[23:40:22] <Alipha> King_DuckZ: closest that i got: https://godbolt.org/z/EvzPYzx1z
[23:41:25] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[23:41:54] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Read error: Connection reset by peer)
[23:42:10] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[23:42:34] <King_DuckZ> Alipha: hmmmm that's an interesting solution... thanks for providing it
[23:43:00] <King_DuckZ> I'll see if I can modify my real code to do something equivalent to that, with enough scaffholding
[23:43:11] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[23:46:20] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:47:47] *** Quits: cart_man (~rynot@host-78-144-121-1.as13285.net) (Quit: Konversation terminated!)
[23:51:16] *** Joins: Tokamak (~Tokamak@172.58.188.114)
[23:52:30] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a6600e117f75412d10382.ipv6.abo.wanadoo.fr)
[23:53:09] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[23:56:02] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[23:57:45] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 265 seconds)
