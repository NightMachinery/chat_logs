[00:02:18] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[00:03:25] <maroon> 1 out of 3 numbers ending with 'f' is 12n-1, so im not counting the other 2 as candidates
[00:03:47] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:04:03] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[00:04:42] <int-e> maroon: I knew that. But you write "my candidates are 12n-1 numbers at intervals of 2^64" initially, and that caused some dissonance (because 2^64 isn't divisible by 12)
[00:04:47] <int-e> *wrote
[00:07:41] <int-e> maroon: Note that the bottleneck could also be the modular reduction (`base % p`, where `base` is the base of the sieving range, and `p` is the prime you're sieving with)
[00:08:33] <int-e> In my gmp based code that takes somewhere around 30% of the time for 16384 bit size.
[00:09:19] <int-e> (And I actually expected a higher percentage.)
[00:11:19] <maroon> in your code, a = base?
[00:12:03] <maroon> or, a = base // p and c = base % p ?
[00:14:07] <maroon> in my method, im calculating remainder r = base % p, and i know that r changes by 'j = 3*2^64 mod r' between candidates, so i only need to calc r and j once per smallprime, so i was trying to find how many increments of r += j mod p were needed until r = 0
[00:15:33] *** Joins: CHENQIANHU (~CHENQIANH@cpc99618-brnt2-2-0-cust213.4-2.cable.virginm.net)
[00:17:45] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[00:18:41] <int-e> maroon: a is base/p. But you don't need a either. You can start with t = (base - c) % p  instead.
[00:19:21] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Max SendQ exceeded)
[00:20:47] <maroon> int-e, and 'c' is the 0xffff...ffff?
[00:20:56] <int-e> yes
[00:21:30] <maroon> so if i'm modifying my base to have the lowest bits be 0xfff..fff's, then i dont even need to use 'c' because that's zero
[00:23:03] <maroon> errr, lemme think that thru
[00:24:15] <int-e> Sorry, I've messed this up somewhere.
[00:26:37] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[00:30:47] <int-e> We want to start at a = floor((base + p-1) / p) (the smallest a with a*p >= base), which makes  a * p = base + (p-1) - (base - 1) % p
[00:32:23] <int-e> then we subtract c and reduce modulo 2^64 and that should leave us with just  (p-1) - (base - 1) % p  (assuming base = c (mod 2^64))
[00:34:37] *** Joins: gabriel1_ (~gabriel1@37.166.50.56)
[00:35:27] <[itchyjunk]> !
[00:36:00] <int-e> maroon: those details are so cumbersome to work out :-/
[00:37:03] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 252 seconds)
[00:42:49] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:43:51] <maroon> ok thanks, i think i get it. the downside for this method is that i can no longer use a shortcut to handle q and p together, by checking if (base % p) is 0 or 1
[00:47:01] <int-e> funnily I wanted to venture into this territory (sieving with a stride other than 12) myself... but I haven't gone there yet.
[00:52:18] *** Joins: holgersson (~quassel@user/holgersson)
[00:54:15] *** Quits: gabriel1_ (~gabriel1@37.166.50.56) (Read error: Connection reset by peer)
[00:55:38] *** Joins: gabriel1_ (~gabriel1@5.170.172.26)
[01:01:03] <TimMc> halosghost: I think you could parallelize a sieve in two ways: 1) Have each core work on crossouts in a different segment of the candidate space, and 2) have idle threads pick up unmarked numbers that are just beyond the lowest, accepting that some will end up being struck out as composite.
[01:01:16] <TimMc> I don't know if #2 works out in practice.
[01:01:33] <halosghost> mm
[01:03:28] <TimMc> I think the space between the lowest unmarked number and its square should not contain unmarked composites.
[01:04:57] <TimMc> There's probably an efficient way of sharing that information between cores, especially if you err on the side of race conditions that (rarely) pick up a composite or the same prime as another thread.
[01:11:03] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[01:11:03] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[01:11:16] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[01:11:19] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[01:16:01] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:16:01] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:19:38] *** Joins: gabriel1__ (~gabriel1@37.166.56.86)
[01:21:53] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[01:22:00] *** Quits: gabriel1_ (~gabriel1@5.170.172.26) (Ping timeout: 256 seconds)
[01:26:13] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:39:02] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 250 seconds)
[01:39:49] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[01:44:07] *** Joins: sobkas (~sobkas@95.175.17.217)
[01:51:33] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[01:52:58] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Remote host closed the connection)
[01:54:45] *** Quits: brolin (~brolin@179.13.18.50) (Remote host closed the connection)
[01:55:01] *** Quits: riotz (riotz@user/riotz) (Ping timeout: 240 seconds)
[01:55:37] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 240 seconds)
[01:55:44] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 272 seconds)
[01:56:12] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Ping timeout: 240 seconds)
[02:00:15] *** Joins: shayr_ (shayr@ip62.ip-91-134-189.eu)
[02:00:34] *** Joins: gde35 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[02:02:15] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: leaving)
[02:02:32] *** Joins: voiceofreason_ (~voiceofre@207.148.10.181)
[02:04:27] *** Joins: Wulf4 (~Wulf@user/wulf)
[02:04:35] *** Joins: sarnold_ (~sarnold@ubuntu/member/sarnold)
[02:05:25] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[02:07:05] *** Joins: danie1dg (~me@user/danieldg)
[02:09:02] *** Quits: Brnocrist (~spartak@user/brnocrist) (Ping timeout: 240 seconds)
[02:09:34] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[02:09:44] *** Quits: rg (~r-g@51-159-55-86.rev.poneytelecom.eu) (*.net *.split)
[02:09:44] *** Quits: machinedgod (~machinedg@24.105.81.50) (*.net *.split)
[02:09:44] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[02:09:45] *** Quits: danieldg (~me@user/danieldg) (*.net *.split)
[02:09:45] *** Quits: echoreply (~echoreply@45.32.163.16) (*.net *.split)
[02:09:45] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[02:09:45] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[02:09:45] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[02:09:45] *** Quits: _0ne (~one@user/0ne/x-2101768) (*.net *.split)
[02:09:45] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (*.net *.split)
[02:09:45] *** Quits: Luke- (~ldm@hacksoc/alumni/ldm) (*.net *.split)
[02:09:45] *** Quits: eth0p14 (~eth0p1@bacalhau.chourico.net) (*.net *.split)
[02:09:45] *** Quits: ssiyad (~ssiyad@user/ssiyad) (*.net *.split)
[02:09:45] *** Quits: sarnold (~sarnold@ubuntu/member/sarnold) (*.net *.split)
[02:09:45] *** Quits: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[02:09:45] *** Quits: shayr (shayr@ip62.ip-91-134-189.eu) (*.net *.split)
[02:09:45] *** Quits: zinc (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[02:09:45] *** Quits: AlienTrooper (~Alien@user/alientrooper) (*.net *.split)
[02:09:45] *** Quits: voiceofreason (~voiceofre@207.148.10.181) (*.net *.split)
[02:09:45] *** Wulf4 is now known as Wulf
[02:09:56] *** Quits: ze26zefo (bfa39a78db@ircbox.informatik.uni-erlangen.de) (Ping timeout: 245 seconds)
[02:10:02] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:10:12] *** Quits: halosghost (~halosghos@user/halosghost) (Ping timeout: 240 seconds)
[02:11:14] *** Joins: Brnocrist (~spartak@user/brnocrist)
[02:11:55] *** Joins: ze26zefo (bfa39a78db@ircbox.informatik.uni-erlangen.de)
[02:15:26] *** Joins: machinedgod (~machinedg@24.105.81.50)
[02:15:26] *** Joins: echoreply (~echoreply@45.32.163.16)
[02:15:26] *** Joins: Luke- (~ldm@hacksoc/alumni/ldm)
[02:15:26] *** Joins: eth0p14 (~eth0p1@bacalhau.chourico.net)
[02:15:26] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[02:16:43] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[02:17:01] *** Joins: koolazer (~koo@user/koolazer)
[02:17:50] *** Joins: _0ne (~one@user/0ne/x-2101768)
[02:21:14] *** danie1dg is now known as danieldg
[02:23:33] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[02:28:33] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[02:28:56] *** Quits: andreasbuhr (~quassel@p549db66c.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:28:59] *** Joins: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[02:32:00] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 252 seconds)
[02:35:21] *** Joins: halosghost (~halosghos@user/halosghost)
[02:36:08] *** Joins: riotz (riotz@is.only.here.for-some.fun)
[02:36:32] *** riotz is now known as Guest5732
[02:40:58] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[02:44:19] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[02:50:35] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[03:01:42] *** Quits: halosghost (~halosghos@user/halosghost) (Ping timeout: 252 seconds)
[03:03:24] *** Joins: Sofia (~sofia@user/sofia)
[03:04:31] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Remote host closed the connection)
[03:11:48] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[03:25:29] *** Joins: halosghost (~halosghos@user/halosghost)
[03:39:36] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[03:39:53] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[03:40:45] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[03:42:35] *** Joins: Wulf (~Wulf@user/wulf)
[03:59:12] *** Quits: NeoFAT32 (~UserNick@user/NeoFAT32) (Remote host closed the connection)
[03:59:13] *** Quits: xx (~xx@user/xx) (Ping timeout: 256 seconds)
[04:02:42] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[04:14:35] *** Joins: igemnace (~ian@user/igemnace)
[04:22:04] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:22:04] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:22:19] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[04:22:22] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[04:23:51] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[04:24:49] *** Joins: thunderlips (sid545775@id-545775.tinside.irccloud.com)
[04:26:23] *** Quits: thunderlips (sid545775@id-545775.tinside.irccloud.com) (Client Quit)
[04:27:34] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[04:28:46] *** Joins: Guest63 (~Guest63@185.51.139.212)
[04:30:57] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:30:57] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:43:04] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[04:43:07] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[04:50:34] *** Joins: jpn (~jpn@user/jpn)
[04:51:32] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[04:55:36] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[04:59:23] *** Joins: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2)
[04:59:23] *** Quits: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2) (Changing host)
[04:59:23] *** Joins: average (~average@user/average)
[05:05:33] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[05:05:33] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[05:05:49] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[05:05:50] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[05:10:45] *** Quits: Klotz (~Klotzoman@gateway/tor-sasl/klotz) (Quit: Klotz)
[05:14:01] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:14:35] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:39:41] *** Quits: jpn (~jpn@user/jpn) (Quit: leaving)
[05:46:32] <maroon> int-e, i'm stuck. i end up with a number that's a multiple of p, but not having the lowest part be 0xff's https://mypastebin.com/cByy9
[05:46:46] *** Joins: NeoFAT32 (~UserNick@user/NeoFAT32)
[06:05:17] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 272 seconds)
[06:05:52] *** Joins: skaro (~skaro@2600:8807:180:80:a99a:9415:60dc:9173)
[06:08:06] <hashfuncadb> i've generated a private/public key-pair using the following commands ... openssl genpkey -algorithm EC -out secret-key.txt -pkeyopt ec_paramgen_curve:secp256k1 && openssl pkey -in secret-key.txt -out public-key.txt -pubout ... and i'm trying to encrypt a file using the following command ... openssl pkeyutl -encrypt -pubin -inkey public-key.txt -in data.txt -out encrypted-data.txt ... but i get the folling error: "pkeyutl: Error
[06:08:06] <hashfuncadb> initializing context
[06:08:06] <hashfuncadb> 140381032296896:error:0608B096:digital envelope routines:EVP_PKEY_encrypt_init:operation not supported for this keytype:../crypto/evp/pmeth_fn.c:141:" ... what do i need to change in order for me to encrypt data.txt?
[06:08:35] <int-e> maroon: I'll have a look after some sleep
[06:08:44] <maroon> k
[06:09:20] <danieldg> hashfuncadb: you don't encrypt using EC keys
[06:10:05] <hashfuncadb> danieldg: really? is there nothing i can change (other than created non-EC keys)?
[06:11:14] <danieldg> hashfuncadb: you can -derive a key, that's supported
[06:16:07] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[06:17:28] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-0d13-db80-1316-2ed6.res6.spectrum.com)
[06:18:30] <hashfuncadb> danieldg: so i derive a secret from the private key or public key? and use that secret to encrypt/decrypt?
[06:18:51] <halosghost> out of interest, why do you want to use an EC key?
[06:19:03] <danieldg> have you looked at the manpage?
[06:19:11] <hashfuncadb> danieldg: i'm looking at it right now
[06:19:19] <hashfuncadb> i just don't know what all of this terminology means
[06:19:21] <hashfuncadb> it's all new to me
[06:19:23] <halosghost> (there are ways of using an EC key to encrypt/decrypt, but it's often a signal that you should consider something else)
[06:19:45] <hashfuncadb> halosghost: i like EC. so there isn't a way to do it directly in openssl?
[06:19:58] <halosghost> well
[06:20:06] <halosghost> there's only barely a way to do it at all ☺
[06:20:21] <hashfuncadb> barely is good enough for me lol
[06:20:25] <halosghost> (I mean, for the way most people want to encrypt/decrypt things)
[06:20:33] <halosghost> (namely, authenticated encryption)
[06:21:06] <hashfuncadb> but seriously tho, it looks like this in the man page will do the trick: "Derive a shared secret value: openssl pkeyutl -derive -inkey key.pem -peerkey pubkey.pem -out secret" 
[06:21:14] <danieldg> yes
[06:21:29] <hashfuncadb> so i suppose i substitute key.pem with my secret-key.txt
[06:21:31] <danieldg> that's how you do it; you then encrypt with the secret key
[06:23:04] <hashfuncadb> ok ok i need to get this straight. so, substituting the above with what i have, should it look like, ... openssl pkeyutl -derive -inkey secret-key.txt -peerkey public-key.txt -out secret.txt ??
[06:23:26] <hashfuncadb> what in the world is peerkey
[06:23:39] <danieldg> the other person's key
[06:24:06] <hashfuncadb> so i need another person's key to derive a key for myself? whaa?
[06:24:22] <danieldg> if you're just encrypting for yourself, don't use EC at all
[06:24:34] <danieldg> use symmetric
[06:24:36] <hashfuncadb> danieldg: that is my plan tho
[06:24:51] <danieldg> 'openssl enc'
[06:25:00] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[06:25:09] <danieldg> RSA or EC are for multiple parties
[06:25:13] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[06:26:17] <hashfuncadb> oh i see
[06:26:23] <hashfuncadb> so "secret" means "shared-secret"
[06:28:21] <Alipha> hashfuncadb: you could generate two keypairs and encrypt a message from one to the other :-)
[06:29:57] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:29:57] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:31:33] *** Joins: igemnace (~ian@user/igemnace)
[06:32:08] <hashfuncadb> ok, please, i need clarification on this: when deriving a secret, does "-inkey" and "-peerkey" both mean public keys (or could it be anything)?
[06:33:11] <hashfuncadb> Alipha: how do you encrypt the message using openssl? i thought that's what i was trying to do
[06:33:46] *** Joins: WishBoy (~WishBoy@user/wishboy)
[06:35:24] <hashfuncadb> Alipha: I'm trying to encrypt a message to my own public key
[06:35:34] <hashfuncadb> is there no way to do that? now i'm confused
[06:36:17] <danieldg> other people should be encrypting messages to your key
[06:36:25] <danieldg> so pretend to be someone else
[06:36:51] <Alipha> I'm actually not very familiar with the openssl tool.
[06:36:56] <hashfuncadb> danieldg: yes, but what is that command?
[06:37:12] <hashfuncadb> danieldg: i thought that's what i was trying to do all along
[06:37:13] <danieldg> pkey to generate a shared secret, then enc
[06:37:38] <Alipha> hashfuncadb: I assume you currently only have one key pair. So generate another key pair
[06:37:48] <hashfuncadb> oh my goodness i'm so confused now
[06:38:02] <hashfuncadb> so confused
[06:38:05] <danieldg> you need two keys for ECDH
[06:38:15] <danieldg> alice's and bob's
[06:39:01] <maroon> sender's and receiver's
[06:39:39] <hashfuncadb> WAIT
[06:39:46] <hashfuncadb> i think im having the aha moment
[06:39:54] <hashfuncadb> The EC algorithm supports sign, verify and derive operations. The sign and verify
[06:39:54] <hashfuncadb>        operations use ECDSA and derive uses ECDH. Currently there are no additional options
[06:39:54] <hashfuncadb>        other than digest. Only the SHA1 digest can be used and this digest is assumed by
[06:39:58] <hashfuncadb>        default.
[06:40:41] <hashfuncadb> so when i use derive, i'm using ECDH, got it. NOW..... am i using bothe alice and bob's public keys for derivation? 
[06:40:55] <danieldg> no, you need one public and one private
[06:41:07] <hashfuncadb> so peer-key means public
[06:41:11] <hashfuncadb> and in-key means private
[06:41:20] <danieldg> otherwise eve could derive the shared secret
[06:41:42] <hashfuncadb> openssl pkeyutl -derive -inkey key.pem -peerkey pubkey.pem -out secret
[06:42:00] <hashfuncadb> so why can't i use my own public and private keys for this scheme?
[06:42:16] <danieldg> I suppose nothing is stopping you
[06:42:22] <danieldg> it's kinda pointless
[06:42:30] <hashfuncadb> ok, so, -inkey means private tho right?
[06:42:34] <hashfuncadb> i just want to get that straight
[06:42:42] <hashfuncadb> adn -peerkey means public?
[06:42:42] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[06:42:51] <danieldg> that is documented, yes
[06:43:22] <maroon> peer is the thing that always resets you on irc :)
[06:43:48] <hashfuncadb> danieldg: ok thanks for the help ya'll
[06:43:50] <hashfuncadb> i think i got it
[06:53:30] <hashfuncadb> alright i got the secret, but how do i encrypt data with it now?
[06:53:45] <danieldg> enc
[06:53:53] <hashfuncadb> openssl pkeyutl -encrypt -pubin -inkey ??? -in ??? -out ???
[06:54:00] <danieldg> openssl enc
[06:55:36] <hashfuncadb> ok, so then i use the secret as the argument to "-pass"?
[06:55:46] <danieldg> or just as the key
[06:59:26] <hashfuncadb> openssl enc -K secret.txt -in data.txt -out encrypted-data.txt ... didn't work for me
[07:00:14] <danieldg> use pass then
[07:00:53] <halosghost> that's not how you use -K
[07:01:46] <hashfuncadb> I'm getting an "Invalid password argument" error
[07:02:50] <danieldg> keep reading
[07:03:05] <halosghost> openssl-enc(1) mentions to look at the “Pass Phrase Options” section of openssl(1)
[07:03:06] <hashfuncadb> openssl enc -pass $(cat secret-txt) -in data.txt -out encrypted-data.txt
[07:03:07] <halosghost> I might suggest that
[07:05:37] <hashfuncadb> it's not working, like it's not encrypting anything
[07:05:54] <hashfuncadb> openssl enc -pass file:secret.txt -in data.txt -out encrypted-data.txt
[07:06:38] <danieldg> you forgot a mandatory argument - the cipher
[07:07:22] *** Quits: average (~average@user/average) (Read error: Connection reset by peer)
[07:08:01] <danieldg> I'm guessing it defaults to the 'none' cipher, because of course that's a good idea
[07:08:09] <halosghost> lol
[07:10:03] <hashfuncadb> it works!
[07:10:07] <halosghost> danieldg: “it's hard having opinions” - The OpenSSL Devs
[07:10:32] <hashfuncadb> but i suppose that generating the secret is absolutely useless, since i can just use my EC private key as the password
[07:10:58] <halosghost> it depends on what you're doing
[07:11:11] <halosghost> if you're encrypting for your own personal use, then you should just use symmetric encryption
[07:11:12] <danieldg> yes, that's why I said that EC is only useful when you have two parties
[07:11:51] <halosghost> danieldg: or if you want to build a zk-proof about your encrypted data to convince yourself of its properties
[07:11:58] <halosghost> that seems like a very likely scenario
[07:12:27] <danieldg> convincing yourself about things you generate?
[07:12:35] <halosghost> yes
[07:12:40] <danieldg> I tend to be very good at that, no zk proofs needed :p
[07:12:50] <halosghost> :)
[07:13:04] <danieldg> it's hard to have zero knowledge of my own data anyway
[07:13:28] <hashfuncadb> i still don't understand the use-case of a shared secret
[07:13:33] <halosghost> a new cryptographic protocol: Alice doesn't trust herself, so she creates pedersen commitments to her diary entries and adds zk-proofs built on-top
[07:13:49] <halosghost> hashfuncadb: are you only encrypting things for yourself, or are you sending them to someone else?
[07:13:52] <hashfuncadb> why not just phone up Alice/Bob and tell them the password on the phone
[07:14:04] <hashfuncadb> halosghost: only encrypting for myself right now
[07:14:18] <halosghost> hashfuncadb: if you have a perfectly-secure alternative route to communicate, why not just use that to send the message in the first place?
[07:14:39] <halosghost> hashfuncadb: then a shared secret is totally useless for you (which is why we keep saying that you should just use symmetric encryption)
[07:14:40] <hashfuncadb> ok ok i'm starting to see the point
[07:14:48] <danieldg> the most common reason is that you have the perfectly-secure route today and not tomorrow
[07:15:33] <hashfuncadb> ok i think i get it now
[07:16:21] <hashfuncadb> so the shared secret is the symmetric cryptographic tool for Alice/Bob
[07:16:51] <danieldg> yep
[07:16:55] <hashfuncadb> freaking awesome
[07:17:07] <hashfuncadb> i think i'm really liking this stuff
[07:17:13] <hashfuncadb> thanks for all the help today ya'll
[07:19:34] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[07:21:09] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[07:22:03] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[07:27:55] *** Joins: atharv_ (~athar@2405:201:22:808b:85d2:bb06:5836:6ca9)
[07:31:48] *** Quits: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[07:37:52] *** Quits: atharv_ (~athar@2405:201:22:808b:85d2:bb06:5836:6ca9) (Quit: Leaving)
[07:41:11] *** Quits: Elzington (~Elzington@87.249.134.23) (Quit: Leaving)
[07:42:51] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Quit: linear_cannon)
[07:49:18] *** Joins: Elzington (~Elzington@87.249.134.23)
[07:50:55] *** Joins: frost (~frost@user/frost)
[07:56:01] *** Quits: NeoFAT32 (~UserNick@user/NeoFAT32) (Remote host closed the connection)
[07:56:31] *** Quits: Elzington (~Elzington@87.249.134.23) (Quit: Leaving)
[08:05:15] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[08:06:36] *** Joins: Elzington (~Elzington@87.249.134.23)
[08:11:59] *** Joins: WishBoy (~WishBoy@user/wishboy)
[08:15:02] *** Quits: WishBoy (~WishBoy@user/wishboy) (Client Quit)
[08:15:44] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[08:16:27] *** Quits: CHENQIANHU (~CHENQIANH@cpc99618-brnt2-2-0-cust213.4-2.cable.virginm.net) (Quit: Client closed)
[08:18:03] *** Joins: Sofia (~sofia@user/sofia)
[08:18:52] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[08:25:47] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[08:30:39] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:34:57] *** Joins: varayu8 (~thelounge@157.37.164.230)
[08:35:21] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[08:47:28] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[08:48:23] *** Quits: Gallomimia- (~Gallomimi@node-1w7jra2a2gqpyiirkvgiscr6c.ipv6.telus.net) (Remote host closed the connection)
[08:48:43] *** Joins: Gallomimia- (~Gallomimi@node-1w7jra2a2gqpwm3zo8udzw9li.ipv6.telus.net)
[08:49:20] *** Quits: lenish (~Rodya@205.185.115.119) (Ping timeout: 250 seconds)
[08:49:20] *** Quits: ado (sid462155@id-462155.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[08:49:46] *** Quits: Neoon (~Neoon@2607:5300:60:23a5::1111) (Ping timeout: 250 seconds)
[08:50:04] *** Quits: meyer (~nunyuh@user/cosanostra) (Quit: This thing of ours)
[08:50:04] *** Quits: pdg (sid395042@id-395042.lymington.irccloud.com) (Read error: Connection reset by peer)
[08:50:04] *** Quits: kd (sid418451@id-418451.lymington.irccloud.com) (Read error: Connection reset by peer)
[08:50:05] *** Quits: weyhmueller (~weyhmuell@blofeld.nc.w9r.de) (Quit: ZNC 1.8.2 - https://znc.in)
[08:50:06] *** Quits: BSaboia (~bsaboia@2a05:f480:1400:b88:5400:3ff:fe51:575c) (Quit: ZNC - https://znc.in)
[08:50:06] *** Quits: stoner19 (~stoner19@vmi221374.contaboserver.net) (Quit: keep on keepin' on...)
[08:50:06] *** Quits: Guest5732 (riotz@is.only.here.for-some.fun) (Quit: fBNC - https://bnc4free.com)
[08:50:07] *** Quits: krin (sid500722@user/krin) (Read error: Connection reset by peer)
[08:50:11] *** Joins: pdg (sid395042@id-395042.lymington.irccloud.com)
[08:50:12] *** Joins: kd (sid418451@id-418451.lymington.irccloud.com)
[08:50:16] *** Joins: ado (sid462155@id-462155.uxbridge.irccloud.com)
[08:50:24] *** Joins: krin (sid500722@user/krin)
[08:50:25] *** Joins: stoner19 (~stoner19@2a02:c207:2022:1374::1)
[08:50:26] *** Joins: BSaboia (~bsaboia@2a05:f480:1400:b88:5400:3ff:fe51:575c)
[08:50:40] *** Quits: Disconsented (~quassel@2604:a880:1:4a::3:c000) (Remote host closed the connection)
[08:51:12] *** Joins: riotz (riotz@is.only.here.for-some.fun)
[08:51:36] *** riotz is now known as Guest716
[08:51:48] *** Joins: Disconsented (~quassel@irc.disconsented.com)
[08:51:50] *** Joins: Neoon (~Neoon@2607:5300:60:23a5::1111)
[08:52:19] *** Joins: weyhmueller (~weyhmuell@blofeld.nc.w9r.de)
[08:52:57] *** Joins: meyer (~nunyuh@user/cosanostra)
[09:02:07] *** Joins: lenish (~Rodya@205.185.115.119)
[09:10:47] *** Joins: ravan (~ravan@user/ravan)
[09:20:19] *** Joins: AlienTrooper (~Alien@211.34.44.61)
[09:21:00] *** Quits: AlienTrooper (~Alien@211.34.44.61) (Changing host)
[09:21:00] *** Joins: AlienTrooper (~Alien@user/alientrooper)
[09:31:53] *** Joins: CHENQIANHU (~CHENQIANH@cpc99618-brnt2-2-0-cust213.4-2.cable.virginm.net)
[09:41:15] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[09:51:19] *** Joins: labrador (~labrador@user/labrador)
[09:55:11] *** Joins: Sofia (~sofia@user/sofia)
[09:59:35] *** Quits: stiell_ (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 240 seconds)
[10:01:07] *** Joins: stiell_ (~stiell@gateway/tor-sasl/stiell)
[10:06:04] *** Joins: NeoFAT32 (~UserNick@user/NeoFAT32)
[10:07:06] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[10:26:56] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[10:31:55] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:34:05] <maroon> int-e, i updated my pastebin. i think i mostly have it figured out
[10:34:46] <int-e> maroon: Ah, I was just looking at it
[10:39:59] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[10:41:29] *** Quits: NeoFAT32 (~UserNick@user/NeoFAT32) (Remote host closed the connection)
[10:43:43] <int-e> maroon: Hmm, https://paste.debian.net/1233907/ does print 35101, so that's nice...
[10:46:01] <int-e> Wow, I mean 50311
[10:46:11] *** Quits: labrador (~labrador@user/labrador) (Remote host closed the connection)
[10:46:24] *** Joins: labrador (~labrador@user/labrador)
[10:47:24] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[10:47:34] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[10:49:15] <int-e> maroon: Well, https://paste.debian.net/1233908/ is more meaningful. I see what you mean by p and q though... I haven't yet worked out whether there's a shortcut for that. (There should be a way to compute the required offset from the stride (2^64) and p, without looking at the base again)
[10:49:36] <maroon> int-e, just to be clear this doesnt need to loop 64 times, just while(ofs > 0) ?
[10:49:38] <int-e> (I also regret using p for the sieved prime...)
[10:49:55] <int-e> maroon: no it has to be 64 times... we want to divide by 2^64 in the process
[10:50:02] <int-e> (i.e., the stride)
[10:50:17] *** Joins: NeoFAT32 (~UserNick@user/NeoFAT32)
[10:51:03] <int-e> So it is sort of expensive (though there shouldn't be any conditional jumps if using ? : in a C-like compiled language on modern hardware, so it's not too bad)
[10:53:24] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:56:41] <int-e> maroon: (expensive... on the other hand, mult_inv does divisions and those are pretty slow)
[10:57:39] <maroon> yeah, for a typical prime around 1 million mine was doing somewhere 7-12 loops, but my loops were way busier
[10:57:51] <int-e> maroon: So this kind of loop might actually be the fastest way, needs profiling. (The loop is basically what you get when you implement the division free binary gcd algorithm)
[10:58:38] <int-e> And I believe people actually use that because it tends to be faster than the division thing.
[10:59:24] <maroon> so i cant use interval 3*2^64 with this because this interval would be 0x11000...
[11:00:05] <int-e> maroon: But it does look like you're close to something that works at least. So I'll not dive into the details of your paste unless there's a question?
[11:00:57] <int-e> maroon: Yeah, *but* you can adjust modulo 3 using the normal brute force loop in the end.
[11:01:30] <int-e> (while ofs % p != 0: ofs += p, followed by ofs /= 3)
[11:01:52] <int-e> well, ofs //= 3 in Python...
[11:02:22] <int-e> I'm just using that because it has easy access to bignums
[11:02:49] <int-e> so it's nice for prototyping
[11:03:13] <maroon> ok, the only other thing i think im missing is how the openssh code was building their sieve without a list of primes, and was doing it for millions of primes up thru 2^30 or so. but i'm thinking that's for later if i can port this code to something where something like that wouldn't be so horribly slow for me
[11:05:51] <int-e> They have *three* sieves (and so does my implementation... I think it's the right thing to do).  There's a "tiny" sieve that tracks odd numbers up to 2^16, and is used to compute odd primes up to that bound. Then there's a *small* sieve that is generated in chunks of size 2^19 or so using the tiny primes, and goes up to 2^32, generating all odd primes in that range incrementally.
[11:06:44] <int-e> And those are used for the "large sieve" where you only need to track numbers of the shape 12k - 11 to look for candidate safe primes.
[11:08:13] <int-e> The chunking pays off in two ways, 1) it saves memory, and 2) it makes the small sieve more cache friendly.
[11:08:21] <maroon> so each chunk of the small sieve could contain a few composites?
[11:10:07] <int-e> The small sieve only goes up to 2^32, and the tiny primes filter all composites in this range. (To generalize, if you want to sieve up to a bound B, the tiny sieve should go up to B^(1/2); there's no value in further chunking because the tiny primes will be used over and over again by the small sieve)
[11:10:38] <int-e> "further chunking" -- I mean chunking on the tiny sieve
[11:11:31] <int-e> But on modern machines you could just have a sieve of size 2^32 for the small primes and skip the tiny sieves. But it will be a bit slower.
[11:12:20] <int-e> (tracking only the odd numbers that's 2^31 bits, or 256MB, so... not terribly big)
[11:12:30] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[11:12:57] *** Joins: xx (~xx@user/xx)
[11:13:53] <maroon> my sieving did help measurably for long bit lengths like >= 6144 bits or so, in spite of the slow brute force. but putting in this change should avoid the almost-an-hour sieving :) and even allow using a larger prime table, until i figure out how to make use of more primes
[11:15:42] <int-e> Yeah, sieving up to 2^36 instead of 2^32 reduced the number of candidates from 3.6M to 2.7M or so for me (for 16384 bits size with a 2^32 range for q)... seems worth it.
[11:16:22] <int-e> (So that used a tiny sieve that goes up to 2^18.)
[11:19:33] <int-e> (It's probably worthwhile to sieve even furter... and at least consider parallelization for that step. Or maybe just continue sieving with one core while the rest is doing MR checks? There's a bunch of possibilities...)
[11:21:41] <int-e> Basically each doubling of the sieve range seems to catch about 5% of the candidates... there's clearly a point where this stops paying off but it's higher than 2^36 for this.
[11:25:11] <maroon> if you're feeling very adventurous, the next unknown here is largest 2^49152 safe prime :) https://oeis.org/A335313
[11:26:03] <maroon> at https://oeis.org/A181356 the next unknown is the harder largest 2^65536 bit safe prime
[11:26:20] <int-e> hmm, cute
[11:26:31] <maroon> these will be slower to modpow because nearly all bits except for the smallest few are 1 bits
[11:27:15] <maroon> though maybe there's a shortcut from some kind of squaring
[11:27:59] <int-e> I'm more worried about the reduced density... a factor (a bit more than) 4 from the larger numbers, a factor 16 from the reduced density... well it /should/ be doable
[11:28:49] <int-e> maroon: the easy shortcut for x^n is to precompute small powers (say x^1...x^15) and only do an extra multiplication every couple of (here, 4) bits.
[11:29:18] <int-e> pretty sure gmp does this kind of thing when the exponent is large, but I should check
[11:29:49] <maroon> x is your candidate?
[11:29:59] <int-e> x is the base for exponentiation
[11:30:47] <maroon> so precomputing up thru x^15 is saving only 15 of 64000 loops?
[11:30:59] <int-e> instead of  ((x^2)*x)^2*x etc. you'd compute (x^16*x^15)^16*x^15...
[11:32:34] <int-e> maroon: if all bits of n are set, you end up with 14 + 16000 multiplications instead of 64000. (You still have 64000 squarings)
[11:32:42] *** Quits: gabriel1__ (~gabriel1@37.166.56.86) (Remote host closed the connection)
[11:32:58] <maroon> i really need to get a different way of doing modpow, the dll im using is much faster than .net's builtin function, but it's still 14-15 seconds at 16384 bits
[11:33:05] *** Joins: gabriel1__ (~gabriel1@37.166.56.86)
[11:33:07] *** Quits: skaro (~skaro@2600:8807:180:80:a99a:9415:60dc:9173) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[11:37:52] <maroon> im estimating that 49152 bits with a sieve range of 2^28 would have an average of 1.8 safe primes
[11:38:24] <maroon> for 65536 bits that same range should have average of 1.03 safeprimes
[11:39:02] <int-e> Sieving a larger range isn't a huge deal... especially as the base gets larger.
[11:40:25] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[11:40:59] <int-e> But I'd definetely look at something manageable like 2^2^10 - k first and extrapolate :P
[11:42:00] <maroon> 1024 bits, wow adventurous :)
[11:42:14] <int-e> It's supposed to provide performance data
[11:42:16] <int-e> :P
[11:42:22] <int-e> without waiting for days
[11:42:41] <int-e> Anyway, I wanted to implement arbitrary base/stride for my thing anyway... so now "negative strides" is on the list as well :-P
[11:42:49] <maroon> last time i tested, my modpow's time seemed to be somewhere 6x-8x slower each time i doubled the bit length
[11:43:39] <maroon> im not seeing how q can piggyback off the p calc, though maybe both can be calc'ed individually inside the same loop?
[11:44:20] <maroon> ofs-p and ofs-q
[11:44:59] <int-e> maroon: the ssh-keygen thing does this, https://github.com/openssh/openssh-portable/blob/master/moduli.c#L214-L219
[11:45:47] <int-e> which at least saves the  bignum % s  (s being the small prime that's sieved by) part.
[11:47:08] <int-e> (r is computed as bignum % s on line 194)
[11:47:54] <maroon> ah, so if i instead do bignum-q % s, that can be adapted for p without a 2nd bignum calc
[11:48:30] <int-e> I don't know whether that tracks nicely through that 63 (for q)/64 (for p) iterations loop or whether we need two of those)
[11:48:38] <maroon> that makes up a little for not being able to do trial balance of p/q together by seeing if number mod s <= 1
[11:52:40] <int-e> Actually I marked too much... it's just line 215 that relates the q and p sieves. And it's one of the things that's obvious in retrospect.
[11:52:41] <maroon> i'd need to test if i could just make the loop be 63, plus extra commands for the OfsP's final loop
[11:52:57] <int-e> same here
[11:53:25] <int-e> And I'm not currently hacking on this nor thinking deeply... pending motivation ;)
[11:54:14] <int-e> I /suspect/ it'll be two loops, but it's so easy to miss a trick. :)
[11:54:35] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[11:59:06] *** Quits: NeoFAT32 (~UserNick@user/NeoFAT32) (Remote host closed the connection)
[12:16:18] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[12:18:37] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:27:59] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[12:28:02] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[12:30:36] *** Joins: gabriel1_ (~gabriel1@37.166.201.141)
[12:32:37] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:32:37] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:33:11] *** Quits: gabriel1__ (~gabriel1@37.166.56.86) (Ping timeout: 256 seconds)
[12:35:34] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:36:41] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 272 seconds)
[12:36:59] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:41:07] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 272 seconds)
[12:44:12] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[12:57:26] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[12:58:10] *** Joins: milesrout (ce261f06ff@2604:bf00:561:2000::257)
[12:59:12] <milesrout> has anyone had any experience with verifpal? it has a nice website and a nice manual but I'm not sure if it's worth spending time learning to use it or if it's too primitive (mind the pun) and I should just launch straight into a "proper" verification tool
[13:02:18] *** Quits: gabriel1_ (~gabriel1@37.166.201.141) (Ping timeout: 252 seconds)
[13:05:38] *** Joins: ivii (~ivan@user/ivii)
[13:07:02] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:22:49] *** Quits: ivii (~ivan@user/ivii) (Ping timeout: 256 seconds)
[13:25:36] *** Joins: ivii (~ivan@user/ivii)
[13:26:27] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[13:28:23] *** Quits: labrador (~labrador@user/labrador) (Quit: Leaving)
[13:34:23] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[13:36:06] *** Joins: labrador (~labrador@user/labrador)
[13:36:20] <maroon> big difference, int-e, went from 45 minutes to sieve 400k primes to 10 seconds for sieving a million primes
[13:36:54] *** Joins: blank (nullBlank@user/nullblank)
[13:37:05] <blank> doge sucks
[13:37:16] <labrador> blank, doge is memecoin
[13:37:24] <labrador> But this is #crypto
[13:37:32] <blank> yeah lol just realized
[13:38:44] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[13:38:58] <blank> can you guys recommend any  cryptanalyst forums 
[13:39:40] <maroon> you mean for recovering a lost password?
[13:40:11] <blank> to crack algorithms
[13:40:46] <blank> aes , des , u name it
[13:41:27] <blank> I have this book that i recently bought - Modern cryptography by Wenbo Mao, just interested in the field
[13:47:52] *** Quits: blank (nullBlank@user/nullblank) (Quit: WeeChat 2.8)
[13:48:58] *** Joins: Vitto (~Vitto@2a01:e0a:981:cd30:1216:5465:cd5f:e5ba)
[13:58:36] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[14:02:38] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[14:07:16] *** Joins: namkeleser (~namkelese@101.175.104.107)
[14:11:46] <namkeleser> How can I calculate phi if it has 4 factors for n?
[14:11:46] <namkeleser> Rsa
[14:11:47] <namkeleser> id_rsa.pub: https://pastebin.com/GEsFCECF
[14:11:47] <namkeleser> https://pastebin.com/r09RDp93
[14:15:03] <wasamasa> your n has 4 factors??
[14:15:09] <wasamasa> is this some CTF shit
[14:17:02] *** Joins: rockworld (therocker@user/rockworld)
[14:18:36] <river> phi(mn) = phi(m)phi(n) when gcd(m,n)=1
[14:19:05] <wasamasa> I've run into a 3 factor thing in a CTF
[14:19:14] <wasamasa> and once with non-distinct factors
[14:19:27] <wasamasa> so that's a gotcha to be aware of, the totient is defined in terms of distinct primes
[14:19:57] <wasamasa> https://en.wikipedia.org/wiki/Euler%27s_totient_function#Computing_Euler's_totient_function
[14:21:56] *** Joins: machinedgod (~machinedg@24.105.81.50)
[14:27:21] <namkeleser> river Is there a script or tool to do it?
[14:27:59] *** Parts: rockworld (therocker@user/rockworld) ()
[14:28:22] *** Joins: frost (~frost@user/frost)
[14:29:08] <river> pari/gp varphi(x) does it
[14:30:00] <int-e> isn't it called eulerphi()
[14:31:14] <wasamasa> you can write a very simple program to do it
[14:32:02] <namkeleser> wasamasa doesnt RSActftool do it?
[14:32:07] <namkeleser> on github
[14:34:55] *** Joins: rg (~r-g@gateway/tor-sasl/r-g)
[14:36:04] <wasamasa> I don't use these tools
[14:36:11] <wasamasa> it's a lot more educational if you write your own
[14:36:20] <wasamasa> you eventually learn all the tricks
[14:39:48] <namkeleser> I am just curious if its possible
[14:40:00] <namkeleser> using that tool for this scenario
[14:40:17] <namkeleser> https://github.com/Ganapati/RsaCtfTool
[14:53:10] <namkeleser> I think it has only 1 factor
[14:56:19] <wasamasa> lol
[14:56:28] <wasamasa> why'd you say before it has 4 factors?
[14:56:37] <wasamasa> you still didn't answer my question where that key is from
[14:56:59] <namkeleser> I've used factordb to find factors
[14:57:14] <namkeleser> I copied the wrong number
[14:57:18] <wasamasa> lol
[15:00:44] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[15:02:47] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:02:47] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:13:39] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:14:13] <namkeleser> wasamasa If n is prime, φ(n) = n-1. An SSH RSA public key shouldn't have less than 2 prime factors if it was generated properly, though, right?
[15:15:01] <wasamasa> n-1 is a common approximation, but it's not the whole truth
[15:15:12] <wasamasa> I mentioned a gotcha when it's not true
[15:15:31] <wasamasa> yes, n consists of two primes typically
[15:15:57] <wasamasa> you still haven't said whether this is from a CTF or not
[15:17:57] <namkeleser> n-1 is the exact value of phi(n) if n is prime
[15:18:39] <namkeleser> wasamasa its a challenge that was given to be by my friend
[15:18:45] <namkeleser> me*
[15:18:46] <wasamasa> lol
[15:18:52] *** Joins: sobkas (~sobkas@95.175.17.217)
[15:19:35] <namkeleser> If n is not prime, you need to compute its prime factors first
[15:27:09] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[15:27:33] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[15:35:18] *** Quits: JC5 (~X@user/jc5) (Quit: Bye)
[15:37:51] *** Joins: VoidSync (~sync@user/voidsync)
[15:40:18] <maroon> not sure what you mean, but by definition, n is not prime
[16:17:42] *** Joins: dez (uid92154@user/dez)
[16:23:27] *** Joins: maroon2 (tinycrypt@136.32.225.142)
[16:25:18] *** Quits: maroon (tinycrypt@user/maroon) (Ping timeout: 272 seconds)
[16:25:38] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Remote host closed the connection)
[16:34:40] *** Joins: Maxattax97 (~max@rrcs-96-10-153-226.midsouth.biz.rr.com)
[16:35:46] *** Quits: HumanG33k (~HumanG33k@dau94-2-82-66-65-160.fbx.proxad.net) (Quit: WeeChat 3.0)
[16:36:51] *** Quits: Maxattax97 (~max@rrcs-96-10-153-226.midsouth.biz.rr.com) (Remote host closed the connection)
[16:37:16] *** Joins: HumanG33k (~HumanG33k@2a01:e0a:95:5d90:215:c5ff:fe68:fb04)
[16:37:55] *** Quits: VoidSync (~sync@user/voidsync) (Remote host closed the connection)
[16:43:24] *** Quits: CHENQIANHU (~CHENQIANH@cpc99618-brnt2-2-0-cust213.4-2.cable.virginm.net) (Quit: Client closed)
[16:50:36] *** Joins: Klotz (~Klotzoman@gateway/tor-sasl/klotz)
[16:59:51] <namkeleser> wasamasa int-e river so do you think there is something weak about it? i.e non-distinct factors or some factors are small or all the factors are close together
[17:01:33] *** Quits: Vitto (~Vitto@2a01:e0a:981:cd30:1216:5465:cd5f:e5ba) (Ping timeout: 252 seconds)
[17:13:11] *** Joins: callq (~callq@2409:4062:2d00:5aa3:6c50:3c9f:aacc:f7d9)
[17:18:26] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:18:26] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:18:43] *** Joins: foobaz21215 (~foobaz212@213.205.198.102)
[17:18:43] *** Joins: foobaz21248467 (~foobaz212@213.205.198.102)
[17:18:52] *** Quits: foobaz21248467 (~foobaz212@213.205.198.102) (Client Quit)
[17:18:53] *** Quits: foobaz21215 (~foobaz212@213.205.198.102) (Write error: Broken pipe)
[17:19:24] *** Joins: foobaz21215 (~foobaz212@213.205.198.102)
[17:19:49] *** Quits: foobaz21215 (~foobaz212@213.205.198.102) (Client Quit)
[17:24:12] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[17:28:59] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:51:42] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[18:06:26] <int-e> if you've factored it, it's weak
[18:09:41] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[18:14:39] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[18:26:38] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:28:34] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[18:28:49] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 272 seconds)
[18:30:35] *** Joins: toulene (~toulene@user/toulene)
[18:30:38] *** Quits: semisimple (~semisimpl@user/semisimple) (Quit: WeeChat 3.4)
[18:31:05] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:31:09] *** Quits: labrador (~labrador@user/labrador) (Quit: Leaving)
[18:31:29] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[18:32:44] *** Joins: JC5 (~X@user/jc5)
[18:37:14] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[18:42:32] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:53:11] *** Quits: namkeleser (~namkelese@101.175.104.107) (Quit: Client closed)
[18:53:50] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[19:03:24] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-0d13-db80-1316-2ed6.res6.spectrum.com) (Ping timeout: 240 seconds)
[19:12:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:16:09] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-0d13-db80-1316-2ed6.res6.spectrum.com)
[19:17:49] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:18:16] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:26:55] *** Parts: Guyver2 (~Guyver@guyver2.xs4all.nl) (Closing Window)
[19:29:01] *** Joins: filename (~kilitary@188.242.105.134)
[19:29:53] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:31:02] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[19:32:28] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:32:30] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:33:04] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[19:33:05] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:34:26] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[19:34:31] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 245 seconds)
[19:37:10] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[19:40:30] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 252 seconds)
[19:41:14] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:41:38] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:44:59] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:46:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:46:58] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[19:47:21] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:47:32] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 240 seconds)
[19:47:45] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:48:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:53:18] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:53:42] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[20:00:02] *** Joins: clf059 (~clf059@212.102.46.25)
[20:08:40] *** Quits: callq (~callq@2409:4062:2d00:5aa3:6c50:3c9f:aacc:f7d9) (Quit: callq)
[20:10:35] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[20:12:00] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[20:20:49] *** Joins: clf059_ (~clf059@2603:3023:a2b:a800:f097:5796:35c8:7bc7)
[20:21:48] *** Quits: clf059 (~clf059@212.102.46.25) (Ping timeout: 250 seconds)
[20:30:46] *** filename is now known as leizes
[20:34:38] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:34:38] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:34:45] <MacGyver> Who was it recently who was asking about mailing links around in lieu of passwords?
[20:34:54] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[20:34:56] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[20:35:16] <MacGyver> For the love of all that is holy: SEND A TEXT/PLAIN.
[20:35:18] *** clf059_ is now known as clf059
[20:35:37] <MacGyver> If I had a buck for every time I had to fish a password reset link from the HTML source of a mail...
[20:35:44] *** Quits: clf059 (~clf059@2603:3023:a2b:a800:f097:5796:35c8:7bc7) (Quit: Textual IRC Client: www.textualapp.com)
[20:35:55] <MacGyver> (It's fine if you send both HTML and plain. Just don't only send HTML)
[20:36:22] <danieldg> MacGyver: but they tested it in all email clients (outlook, outlook web access, and gmail) and it worked fine!
[20:36:35] *** Joins: clf059 (~clf059@94.140.8.5)
[20:37:59] <TimMc> MacGyver: Same for OTP codes sent by email.
[20:38:14] <danieldg> it's also likely this is 'cost savings' due to reduced email size, never mind that the html is far larger than it needs to be
[20:38:16] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[20:38:33] <TimMc> I do have at least one bank or something that sends text/plain OTP.
[20:39:49] *** Joins: ivii (~ivan@user/ivii)
[20:39:54] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[20:39:57] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[20:40:31] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[20:46:35] *** Joins: igemnace (~ian@user/igemnace)
[20:54:57] *** Joins: OneWheelGeek (~OneWheelG@138.197.166.70)
[20:57:00] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 272 seconds)
[20:57:17] *** Joins: Pythayr` (~pither195@2600:1700:82f0:2fe0::1f)
[20:57:37] *** Quits: Pythayr (~pither195@vps-1494dc6f.vps.ovh.us) (Ping timeout: 240 seconds)
[20:57:54] *** Quits: Klotz (~Klotzoman@gateway/tor-sasl/klotz) (Quit: Klotz)
[20:59:13] *** Quits: platta (~platta@pool-98-110-52-37.cmdnnj.fios.verizon.net) (Read error: Connection reset by peer)
[20:59:37] *** Joins: platta (~platta@pool-98-110-52-37.cmdnnj.fios.verizon.net)
[21:00:15] *** Quits: Pythayr` (~pither195@2600:1700:82f0:2fe0::1f) (Client Quit)
[21:02:43] *** Joins: Pythayr (~pither195@vps-1494dc6f.vps.ovh.us)
[21:04:46] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[21:06:15] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[21:07:28] *** Quits: echoreply (~echoreply@45.32.163.16) (*.net *.split)
[21:07:28] *** Quits: Luke- (~ldm@hacksoc/alumni/ldm) (*.net *.split)
[21:07:28] *** Quits: eth0p14 (~eth0p1@bacalhau.chourico.net) (*.net *.split)
[21:07:28] *** Quits: ssiyad (~ssiyad@user/ssiyad) (*.net *.split)
[21:08:25] *** Quits: clf059 (~clf059@94.140.8.5) (Quit: Textual IRC Client: www.textualapp.com)
[21:11:15] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[21:12:55] *** Joins: echoreply (~echoreply@45.32.163.16)
[21:12:55] *** Joins: Luke- (~ldm@hacksoc/alumni/ldm)
[21:12:55] *** Joins: eth0p14 (~eth0p1@bacalhau.chourico.net)
[21:12:55] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[21:15:26] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Client Quit)
[21:16:56] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[21:17:10] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:17:30] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[21:17:57] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:19:53] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[21:20:18] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:21:53] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:21:53] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:27:24] *** leizes is now known as filename
[21:35:31] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:37:22] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[21:38:15] *** Quits: filename (~kilitary@188.242.105.134) (Quit: --fast)
[21:40:32] *** Joins: filename (~kilitary@188.242.105.134)
[21:41:55] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[21:55:06] *** Joins: Sofia (~sofia@user/sofia)
[22:03:38] *** Joins: Saloframes (~Saloframe@user/Saloframes)
[22:10:53] *** Quits: filename (~kilitary@188.242.105.134) (Remote host closed the connection)
[22:18:05] *** Amadiro__ is now known as Amadiro
[22:18:33] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:18:33] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:18:45] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:18:45] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[22:19:47] *** Joins: aleck (~aleck@user/aleck)
[22:21:23] *** Quits: aleck1 (~aleck@user/aleck) (Ping timeout: 256 seconds)
[22:25:55] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:25:55] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:29:29] *** Joins: Klotz (~Klotzoman@gateway/tor-sasl/klotz)
[22:36:55] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[22:48:13] *** Joins: Giovanni (~Giovanni@176.55.170.26)
[22:51:08] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Remote host closed the connection)
[22:51:30] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[22:56:16] *** Joins: filename (~kilitary@kilitary.xyz)
[22:56:36] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:56:59] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[22:57:20] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 272 seconds)
[23:05:17] *** Joins: andreasbuhr (~quassel@p5dcf991b.dip0.t-ipconnect.de)
[23:11:21] *** Quits: ua_ (~ua@public-gprs231422.centertel.pl) (Quit: Leaving)
[23:20:03] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:20:03] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:20:17] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:20:17] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[23:25:59] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:25:59] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:28:51] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:30:01] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:30:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[23:31:38] *** Lord_of_Life_ is now known as Lord_of_Life
[23:34:29] *** Quits: TimMc (~timmc@user/timmc) (Read error: Connection reset by peer)
[23:37:26] *** Joins: semisimple (~semisimpl@user/semisimple)
[23:38:22] *** Joins: TimMc (~timmc@user/timmc)
[23:43:06] *** Quits: mcf (~mforney@netbsd/developer/mcf) (Quit: quit)
[23:43:27] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[23:44:24] *** Quits: TimMc (~timmc@user/timmc) (Quit: leaving)
[23:44:34] *** Quits: maroon2 (tinycrypt@136.32.225.142) (Read error: Connection reset by peer)
[23:46:10] *** Joins: maroon2 (tinycrypt@136.32.225.142)
[23:46:33] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[23:53:57] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[23:54:03] *** Quits: maroon2 (tinycrypt@136.32.225.142) (Read error: Connection reset by peer)
[23:55:38] *** Joins: maroon2 (tinycrypt@136.32.225.142)
[23:59:00] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 252 seconds)
