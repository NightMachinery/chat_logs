[00:03:14] *** Joins: jokoon (~eio@2a01:e0a:542:e160:b834:754a:8345:66ba)
[00:06:14] <rpav> { auto ptr = nullptr; } // one reason not to use auto*?
[00:06:15] <geordi>  
[00:06:42] *** Joins: Deneb (~johnch@194.82.159.143.dyn.plus.net)
[00:06:48] <CarloWood> Is nullptr a pointer?
[00:06:56] <CarloWood> I think it is nullptr_t
[00:07:02] <rpav> it is
[00:07:13] <CarloWood> not sure if that is a pointer
[00:07:27] <CarloWood> It probably is though...
[00:07:32] <rpav> nullptr_t is not a pointer
[00:08:02] <CarloWood> I read 'any reason not to use...'
[00:08:08] <rpav> or to be pedantic-ish, a value whose type is nullptr_t is not a pointer, but it can be converted implicitly to a pointer whose value is nullptr
[00:08:15] <rpav> i think
[00:08:53] <CarloWood> Then auto can't know what.
[00:09:01] <rpav> it knows it's nullptr_t
[00:09:12] <CarloWood> { auto* ptr = nullptr; }
[00:09:12] <geordi> error: unable to deduce 'auto*' from 'nullptr'
[00:09:14] <CarloWood> that I mean
[00:09:29] <rpav> that's a different thing altogether
[00:09:52] <CarloWood> I thought you were asking why not to use auto* there...
[00:10:24] <rpav> no, i was saying .. entirely facetiously mind you .. that maybe we shouldn't use `auto*` because you can assign nullptr or a pointer value to it ;)
[00:10:46] <CarloWood> I'd never use 'auto*' anywhere anyway...
[00:10:53] <rpav> whereas you can't say what you said
[00:11:11] <rpav> i use auto* anywhere i expect a pointer, and auto& anywhere i expect a ref, because then it's an error if it's not
[00:11:53] <CarloWood> I see 'auto' as 'the type, with any references removed'.  A '*' is part of the type and not a reference... so it's part of the auto in my opinion.
[00:12:10] <rpav> though i prefer in my own code to use `ptr p = ...` or `ref r = ...` and i should really write something so i can `val v = ...` (always-copy never-pointer)
[00:12:31] <rpav> your opinion doesn't really align with the semantics
[00:13:17] <CarloWood> I think it does.
[00:13:25] <rpav> the annoying thing is pointers are also-just-values so there's no nice-builtin way to say "i'm expecting a non-pointer value"
[00:14:04] <CarloWood> Qed - don't make a difference between pointers and other types :p
[00:14:48] <CarloWood> You might have a vk::Handle  and think of it as an object, but in reality is it a  struct Opaque*;
[00:15:03] <rpav> opaque structs are pretty shit
[00:15:37] <rpav> i mean let's all just go back to writing C and living in caves
[00:16:27] <great_taste> !grab rpav
[00:16:27] <nolyc> great_taste: The operation succeeded.
[00:16:50] <PJBoy> one possible problem with `auto& ref = ...;` is that your ref might end up const
[00:17:50] <rpav> how can it end up const in some case where you don't expect and/or want that ðŸ¤”
[00:19:05] <PJBoy> only thing that comes to mind is in SFINAE
[00:19:24] <CarloWood> { auto& yay = return_temporary(); } struct Foo {}; Foo return_temporary() { return {}; }
[00:19:24] <geordi> error: cannot bind non-const lvalue reference of type 'Foo&' to an rvalue of type 'Foo'
[00:19:25] <PJBoy> like maybe you wanna check `auto& ref = *it;`
[00:19:44] <PJBoy> and *it possibly returns const ref
[00:19:59] <PJBoy> but you were hoping to check that you got a mutable reference back
[00:20:13] <PJBoy> I only mention it because it's unintuitive
[00:20:32] *** Quits: jokoon (~eio@2a01:e0a:542:e160:b834:754a:8345:66ba) (Quit: Leaving)
[00:21:26] <rpav> PJBoy: it would be nice if you had a specific and succinct way to say "i expect a non-const ref" / "i expect a const ref"
[00:21:28] <CarloWood> Not to me :/.  Perhaps everyone should start thinking about auto as "the type with reference removed" :P
[00:21:53] <CarloWood> Well - const too.
[00:22:30] <CarloWood> { auto yay = return_const(); Foo* p = &yay; } struct Foo {}; Foo const return_temporary() { return {}; }
[00:22:30] <geordi> error: 'return_const' was not declared in this scope
[00:22:37] <PJBoy> auto can be a reference
[00:22:38] <rpav> even with my e.g. `ref r = ...` i think that would deduce a ref<const T>
[00:22:43] <CarloWood> geordi: replace return_temporary with return_cost
[00:22:43] <geordi> error: 'return_const' was not declared in this scope; did you mean 'return_cost'? (fix known)
[00:22:46] <rpav> but i guess it would be fairly easy to make a c_ref / m_ref
[00:22:50] <PJBoy> you just have to try
[00:23:08] <PJBoy> { int x{}; f<int&>(x); } void f(auto) { BARK; }
[00:23:09] <geordi> f(auto:54) [with auto:54 = int&]
[00:23:16] <CarloWood> { auto yay = return_const(); Foo* p = &yay; } struct Foo {}; Foo const return_const() { return {}; }
[00:23:17] <geordi>  
[00:23:30] <CarloWood> but returning  'Foo const' is nonsense imho.
[00:23:33] <rpav> PJBoy: i feel like that's cheating _a bit_ but yeah
[00:23:53] <PJBoy> for sure
[00:24:39] <rpav> but, i think auto basically correlates with `typename T`
[00:25:12] <PJBoy> it exactly correlates with it I think
[00:25:14] <rpav> it's definitely possible for T to be some reference but you have to try similarly
[00:25:33] <rpav> it's hard because the usages don't really overlap
[00:25:45] <rpav> or rather the usages don't precisely overlap
[00:26:20] <rpav> in c++20 though it's a lot closer of course and then you have like the new `T auto& x` or whatever
[00:26:47] *** Quits: proller (~p@80.240.216.69) (Read error: Connection reset by peer)
[00:26:52] <PJBoy> where T is a concept, yeah
[00:26:54] *** Joins: proller (~p@80.240.216.69)
[00:29:12] <PJBoy> { vector v{1, 2, 3}; input_iterator auto it = begin(v), it_end = end(v); SHOW(span(it, it_end)); }
[00:29:13] <geordi> span(it, it_end) = {1, 2, 3}
[00:29:34] <PJBoy> I kinda feel like that compromised approach to auto for deduced iterator type is underrated
[00:29:41] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:30:23] <PJBoy> you specify enough to know what you're working with / requiring that the variables you're declaring work the way you want
[00:30:35] <PJBoy> but not going verbose / tied to specifics
[00:34:06] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 245 seconds)
[00:34:22] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[00:35:28] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 246 seconds)
[00:35:47] *** Joins: zmt00 (~zmt00@user/zmt00)
[00:36:28] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[00:37:49] <rpav> i'm not sure what you mean
[00:37:52] <ville> i don't understand
[00:38:04] <rpav> probably mostly "as opposed to what"
[00:38:31] <ville> concept auto x = f()?
[00:50:34] *** Quits: jsbach (~jsbach@2a01:c22:a54f:c100:73ba:ea8d:354e:db27) (Ping timeout: 260 seconds)
[00:50:49] *** Joins: markong (~kvirc@213.146.188.203)
[00:54:53] *** Joins: Guest62 (~Guest62@78.84.18.138)
[00:54:55] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[00:55:19] <Guest62> nvcc hello.cu -o helloÂ  Â ERROR: No supported gcc/g++ host compiler found.
[00:55:21] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:55:27] <Guest62> Build cuda_11.3.r11.3/compiler.29920130_0
[00:55:33] *** Joins: jsbach (~jsbach@2a01:c22:a54f:c100:7375:268b:9598:8445)
[00:55:35] <Guest62> gcc (Ubuntu 11.2.0-7ubuntu2) 11.2.0
[00:55:44] <Guest62> g++ (Ubuntu 11.2.0-7ubuntu2) 11.2.0
[00:58:05] <rpav> 1-2+3 .. probably most people expect this to be 2, not -4
[01:00:13] <Friithian> https://www.qt.io/blog/how-to-learn-qt *runs*
[01:03:49] <CarloWood> Guest62: I think you need cuda 11.6 for support of ubuntu LTS
[01:04:00] <CarloWood> https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html
[01:04:42] <CarloWood> Otherwise, I'd say your compiler is too new.
[01:04:50] <Guest62> I am on 21.10
[01:05:07] <Guest62> yeah I think I need to get 10 version of g++ and gcc
[01:05:22] <Guest62> https://stackoverflow.com/questions/6622454/cuda-incompatible-with-my-gcc-version
[01:05:34] <Guest62> 11.1, 11.2, 11.3, 11.4.0Â  Â  goes withÂ  10
[01:05:49] <PJBoy> rpav, as opposed to `auto it = ...` which is vague and possibly wrong, and opposed to `vector<int>::iterator` which is verbose and inflexible
[01:07:00] <CarloWood> The page I linked says that on ubuntu minor versions of gcc 10.2 are supported
[01:07:30] <Guest62> I have 11.2.0
[01:07:54] <CarloWood> oh right.
[01:08:04] <CarloWood> yeah then it should be 11
[01:08:12] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:7c79:3bd8:4c9e:2739)
[01:08:18] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:7c79:3bd8:4c9e:2739) (Client Quit)
[01:08:35] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:7c79:3bd8:4c9e:2739)
[01:09:35] <CarloWood> What does `nvcc -V` give as version?
[01:12:13] *** Quits: robod34 (~Username@79.115.134.214) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:16:24] <rpav> PJBoy: oh, so it properly captures references and whatnot? can `SomeConcept auto v = ...` make a reference?
[01:16:45] <Guest62> nvcc --verbose hello.cu -o hello
[01:16:46] <Guest62> gcc: No such file or directory
[01:16:48] <PJBoy> yeah all that stuff
[01:16:58] <Guest62> so I should use gcc: /usr/lib/gcc /usr/share/gcc
[01:17:01] <rpav> i think `ref auto v = ..` and `ptr auto v = ..` and `val auto v = ..` would probably be the nicest
[01:17:04] <PJBoy> `auto v = ...;` is just unconstrained concept auto
[01:17:07] <Guest62> how do I do that?
[01:17:24] <rpav> and you could throw some const in there
[01:18:11] <rpav> i think you mentioned before that using concepts for a constrained-auto non-pointer-value would be trivial
[01:18:32] <PJBoy> yeah indeed
[01:19:26] <PJBoy> { non_ptr auto x = 0; } template<typename T> concept non_ptr = !is_pointer_v<T>;
[01:19:27] <geordi>  
[01:19:29] <Guest62> nvcc --compiler-bindir=/usr/lib/gcc hello.cu -o hello
[01:19:30] <PJBoy> { non_ptr auto x = (void*)nullptr; } template<typename T> concept non_ptr = !is_pointer_v<T>;
[01:19:30] <geordi> error: deduced initializer does not satisfy placeholder constraints
[01:20:06] <rpav> now if we could make template syntax nicer
[01:24:43] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[01:25:14] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[01:27:05] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[01:27:11] <Guest62> hello.cu(10): error: expected an expression
[01:27:19] <Guest62> Uploaded file: https://uploads.kiwiirc.com/files/72f6296c6afeec2b5f1ee2aaee1e1781/pasted.txt
[01:27:50] *** Joins: pulse (~pulse@user/pulse)
[01:30:24] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[01:30:49] *** Joins: kevr (~kevr@user/kevr)
[01:31:24] *** Quits: vnf_ (~vnf@46.159.151.228) (Quit: Leaving)
[01:32:31] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[01:33:11] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[01:33:47] *** Joins: vnf (~vnf@46.159.151.228)
[01:34:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:35:57] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[01:36:36] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[01:37:09] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:42:16] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 272 seconds)
[01:43:23] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 260 seconds)
[01:44:00] *** Quits: Guest62 (~Guest62@78.84.18.138) (Quit: Connection closed)
[01:44:35] *** Quits: magla (~gelignite@55d42a76.access.ecotel.net) (Quit: Stay safe!)
[01:47:05] *** Joins: kenan2 (~kenanmara@user/kenanmarasli)
[01:47:16] *** Joins: Guest62 (~Guest62@78.84.18.138)
[01:49:09] *** Quits: kenan2 (~kenanmara@user/kenanmarasli) (Client Quit)
[01:49:53] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[01:51:08] *** Quits: kenantu (~kenanmara@user/kenanmarasli) (Ping timeout: 272 seconds)
[01:56:28] <Guest62> Checking whether the CUDA compiler is NVIDIA using "" did not match "nvcc: NVIDIA \(R\) Cuda compiler driver":
[01:56:32] *** Quits: vnf (~vnf@46.159.151.228) (Quit: Leaving)
[01:56:38] <Guest62> Build cuda_11.3.r11.3/compiler.29920130_0
[01:57:23] *** Joins: vnf (~vnf@46.159.151.228)
[01:57:28] *** Joins: badone (~badone@209.132.189.136)
[01:57:57] <Guest62> https://stackoverflow.com/questions/6622454/cuda-incompatible-with-my-gcc-version
[01:57:58] *** Joins: NoXzema_ (~cq-work@user/cq-work)
[01:58:06] <Guest62> says I need 10 version of compiler
[01:58:35] <Guest62> but I have set update-alternatives --config gcc
[01:58:39] <Guest62> has been set to 10
[01:59:01] <Guest62> that means my cmake 3.22.2 uses other version?
[01:59:03] *** Quits: cq-work (~cq-work@user/cq-work) (Ping timeout: 260 seconds)
[01:59:23] <Guest62> Â this is how I buildÂ  Â - /opt/cmake-3.22.3-linux-x86_64/bin/cmake  -B build
[02:02:23] *** Joins: jokoon (~eio@2a01:e0a:542:e160:b834:754a:8345:66ba)
[02:02:36] <johnny> and gcc --version says?
[02:02:56] *** Quits: vnf (~vnf@46.159.151.228) (Quit: Leaving)
[02:03:03] <johnny> i dn't know anything about cuda though so i can't help with that
[02:03:14] <Guest62> gcc (Ubuntu 10.3.0-11ubuntu1) 10.3.0
[02:03:37] <Guest62> I opened cmake gui chose default compiler and build it
[02:03:43] <johnny> and is that the same gcc stuff at /usr/lib/gcc or is that for another one
[02:03:44] <Guest62> then /opt/cmake-3.22.3-linux-x86_64/bin/cmake --build build --config RelWithDebInfo -j 16
[02:04:21] <johnny> just i odn't know anything about ubuntu either
[02:04:36] <Guest62> and it compiled
[02:04:41] <johnny> just wondering if /usr/lib/gcc is actually from a different gcc version
[02:04:46] <Guest62> I feel blessed by nvidia
[02:04:48] <Guest62> and God
[02:04:54] <johnny> lol
[02:05:29] <johnny> being forced into vendor specific stuff.. nobody sould feel blessed by that
[02:05:37] <Friithian> novideo!
[02:06:15] <johnny> nvidia was still the reasonable choice for any sort of gaming on linux until recently though
[02:06:39] <johnny> my laptop is from 2013, s i do have an nvidia card and i can still pay a fair amount of games on it
[02:07:01] <Friithian> nvidia? reasonable?? linuxâ€½â€½â€½
[02:07:20] <johnny> well yeah. considering i can play various ps4 ports of games to pc.. i feel pretty ok about that
[02:07:36] <johnny> from a laptop from 2013
[02:07:37] <Friithian> how frequently do you hang around places that provide support for people using linux?
[02:07:49] *** Quits: jokoon (~eio@2a01:e0a:542:e160:b834:754a:8345:66ba) (Quit: Leaving)
[02:08:02] <johnny> well i don't generally need support like that
[02:08:43] <johnny> but r/linux_gaming is pretty busy if i ever *really* needed help
[02:08:44] <Friithian> well, a lot of people do need that kind of support, and the ratio of people with novideo issues : people with amd issues rounds up to approx infinity
[02:09:09] <johnny> do i think the nvidia situation is great.. absolutely not
[02:09:15] <johnny> but it was the ONLY choice until recently
[02:10:06] *** Quits: Deneb (~johnch@194.82.159.143.dyn.plus.net) (Quit: Leaving)
[02:10:14] <johnny> i hope i can buy a laptop with a decent dedicated amd card soon
[02:10:48] <Raziel> ayyMD
[02:10:52] <johnny> my C++ application is too big.. i need to slim it down a bit.. but i can only do so much :(
[02:10:55] <johnny> it's 397K
[02:11:08] <Friithian> do you *need* to?
[02:11:08] <johnny> 200K some of it is the bluetooth stack itself
[02:11:11] <Raziel> 397k what? lines of code?
[02:11:17] <johnny> size of the binary
[02:11:21] <Raziel> ...
[02:11:29] <johnny> i have 1mb total flash storage!
[02:11:35] <Raziel> fair
[02:11:44] <johnny> i'd like to be able to use 2 bootloader slots
[02:11:55] <johnny> and the bootloader is 300 some
[02:12:20] <johnny> right now if it bricks on flash. it's bricked.. no fallback
[02:12:20] <Raziel> I'm assuuming you can't do much about the part that's the bluetooth stack itself?
[02:13:00] <johnny> wellit's not really *bricked* i could bring it back to life with a usb connection
[02:13:23] <johnny> to some extent i can, by removing client support, but i don't know much that'll actually help
[02:13:25] <johnny> i guess we'll see
[02:14:10] <johnny> right now i'm using a C++ based (although coded more like C with classes in a lot of ways) embedded os, but the project seems dead now.. which is sad
[02:14:18] <johnny> i might end up switching to something C based..
[02:14:27] <johnny> there aren't really any non C alternatives
[02:14:45] <johnny> at least not ones with a sizeable community a a fully qualified bluetooth stack
[02:16:21] <johnny> although the bootloader and application are so big because i effectively had 2 bluetooth stacks.. the proprietary nordic softdevice based one, plus the open source one usedby my application
[02:16:56] <johnny> the bootloader is super convienent.. it means i don't have to write the logic to actually flash the freakin chip over bluetooth!
[02:17:04] <Raziel> bluetooth always has to have something stupid related to it eh
[02:17:07] <Raziel> in any context where it appears
[02:17:08] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:17:17] <johnny> well i think ble does away with most bluetooth stupidness
[02:17:22] <johnny> this is actually a problem with nordic
[02:17:39] <johnny> nordic is switching over to an open source model and they based their sdk ontop of the zephyr embedded os
[02:18:09] <johnny> they also provided C based peripheral libraries separately from that effort so you can still use them with other stuff
[02:18:30] <johnny> the only thing lacking now is a bootloader as good as their one that requires the softdevice
[02:18:55] <johnny> the embedded os i use, used to use the softdevice, but they removed all support from it ,because it can to easily interfere with interrupts and things
[02:19:00] <johnny> and of course it's a black box
[02:20:03] *** Quits: jsbach (~jsbach@2a01:c22:a54f:c100:7375:268b:9598:8445) (Ping timeout: 260 seconds)
[02:23:03] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:24:39] *** Parts: m_ben (~m_ben@user/m-ben/x-7429725) (WeeChat 3.4.1)
[02:27:01] <ville> PJBoy: auto&& x = f(); if you care
[02:27:19] <PJBoy> yeah that's a thing
[02:27:37] <PJBoy> good for some short term polymorphism
[02:28:07] <ville> but having used all auto for past ~12 years i can't say there's been a single bug due to auto x = f();
[02:28:21] <johnny> all auto for what?
[02:28:34] <ville> for everything you can stick auto
[02:28:54] <johnny> so not just for function local vars?
[02:29:20] <johnny> i'm actually surprised you're an auto user
[02:30:09] <ville> where else would you stick in except function locals? can't do it for members... that leaves namespace scope?
[02:31:18] <johnny> i went on the fritz there. because i thought of auto function() -> actualreturntype   , you still specific it after
[02:31:58] <ville> you can leave -> out there if you feel specially frisky
[02:32:00] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:32:13] <johnny> if so.. how frisky are you feeling!
[02:32:26] <ville> i've used it. templated code.
[02:32:57] <johnny> i used it for that C++20 simple template whatever it's called
[02:33:09] <ville> void f(auto x)?
[02:33:23] *** Quits: Guest62 (~Guest62@78.84.18.138) (Quit: Connection closed)
[02:33:57] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[02:34:38] <ville> anyways for me auto is fine. sure it has its pitfalls but those don't seem to be too bad in practice
[02:34:39] <johnny> the one with concepts it think
[02:35:30] *** Joins: cq-work (~cq-work@user/cq-work)
[02:35:39] *** Quits: NoXzema_ (~cq-work@user/cq-work) (Ping timeout: 256 seconds)
[02:35:50] <johnny> f(conceptname auto i)
[02:36:28] *** Quits: rty (~rty@gateway/vpn/pia/rty) (Quit: rty)
[02:36:39] <johnny> nice.. it successfully flashed
[02:37:31] <ville> if you drop the preamble and use auto type placeholder it's an "abbreviated function template" i suppose
[02:37:33] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[02:37:52] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[02:38:15] <johnny> yes.. that's the word i was looking for
[02:38:21] <johnny> abbreviated function template
[02:44:41] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:44:51] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:44:52] *** ChanServ sets mode: +v npaperbot
[02:45:00] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[02:46:11] *** Quits: calcul0n (~calcul0n@2a01:e0a:150:6030:7d85:9901:c4f9:1225) (Ping timeout: 250 seconds)
[02:51:47] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:55:30] *** Joins: seninha (~seninha@user/seninha)
[02:57:53] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 250 seconds)
[02:59:32] *** Joins: NoXzema_ (~cq-work@user/cq-work)
[03:00:21] *** Joins: Praise (~Fat@user/praise)
[03:01:07] *** Quits: cq-work (~cq-work@user/cq-work) (Ping timeout: 260 seconds)
[03:01:46] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:06:05] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[03:10:18] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Remote host closed the connection)
[03:14:48] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5325)))
[03:14:49] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[03:20:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:22:50] <Alipha> johnny: since c++17, you have return type deduction.
[03:23:19] <Alipha> << TYPE(foo); auto foo() { return 3; }
[03:23:21] <geordi> lvalue int()
[03:23:24] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:26:38] <NoXzema_> << TYPE(foo); auto foo() { return (int)3; }
[03:26:38] <geordi> lvalue int()
[03:26:49] <NoXzema_> << TYPE(foo); auto foo() { return std::move(3); }
[03:26:50] <geordi> lvalue int()
[03:27:01] <NoXzema_> << TYPE(foo); int foo() { return std::move(3); }
[03:27:02] <geordi> lvalue int()
[03:28:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:29:58] <PJBoy> ville, you can make an auto as a static data member too
[03:32:55] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[03:33:21] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[03:35:48] <NoXzema_> I guess bash doesn't have a decent way of finding unused ports
[03:36:23] <NoXzema_> I'm not sure how to do that in C++ either, at least not without iterating the entire port range.
[03:42:22] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[03:46:51] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Ping timeout: 260 seconds)
[03:54:50] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 252 seconds)
[03:56:11] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[03:57:10] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[04:01:06] <xisop> when might someone reach for the solution of coroutines in C++?
[04:02:17] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[04:03:28] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:a737)
[04:06:33] *** Joins: HvszrStykp (~X@81.171.62.87)
[04:07:49] <Raziel> xisop, handling of async stuff can be potentially nicer with coroutines
[04:08:01] <Raziel> but the lack of support libraries makes it a bit painful still
[04:14:02] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:7c79:3bd8:4c9e:2739) (Ping timeout: 260 seconds)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:31:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:35:48] *** Quits: pa (~pah@user/pah) (Ping timeout: 272 seconds)
[04:35:50] *** Quits: lru (~lru@240.ip-51-79-50.net) (Quit: .)
[04:41:03] <johnny> Alipha, it's more about whether folksuse it than wheter it's possible
[04:42:11] <johnny> then again C++17 is pretty new when it come to adoption of C++ standards. but also it seems a lot of folks are just against it
[04:43:23] *** Joins: lru (~lru@240.ip-51-79-50.net)
[04:45:20] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:45:25] *** Joins: pah (~pah@user/pah)
[04:52:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:55:47] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:a737) (Quit: Client closed)
[04:55:52] *** Quits: smallville7123_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[04:57:52] *** Quits: minto (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[04:58:31] *** Joins: minto (~mintograd@47.201.5.61)
[04:59:11] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[04:59:55] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[05:00:21] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[05:11:19] <ville> yeah guess there's that
[05:12:21] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:428:432b:7486:55c7) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:13:57] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:14:12] <ville> johnny: it's pretty handy for templates. sometimes expressing the return type would be so verbose it's not worth writing it out as it's unreadable anyways
[05:15:53] <ville> say some kind of recursive template instantiation type of deal, you just end up repeating what the function body is anyways
[05:15:54] <Alipha> Throwing `if constexpr` into the mix, it's near impossible in some cases to explicitly write the return type
[05:17:09] <Alipha> template<bool B> auto foo() { if constexpr(B) return 3; else return "hello"; }
[05:18:36] <Alipha> Or, yeah, recursive templates
[05:23:15] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:27:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:30:06] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:32:57] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[05:33:27] <johnny> sure, but then you're begrudingly writing, not actually happy with it
[05:36:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:41:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[05:43:23] <xisop> Raziel: so, i haven't used it, but i was reading this author's take on c++ 20 coroutines and he mentions that you have to create your own types in order for it to work.. he also mentioned that it'd be nicer to have those in the stl as you did..
[05:43:45] <xisop> actually i think the guy's a fairly well known author in the C++ community.. nikolai something or another
[05:44:43] <xisop> Nicolai Josuttis
[05:51:55] *** Quits: xuxx (~xuxx@86.228.71.37.rev.sfr.net) (Ping timeout: 260 seconds)
[05:52:58] <Alipha> xisop: yeah, c++20 added just the bare minimum language features to enable writing a usable async library. Hopefully c++23 will provide a higher level library
[05:53:55] <xisop> I can barely keep up lol
[05:54:08] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:57:37] *** Joins: xiongxin (~Thunderbi@117.136.39.213)
[05:57:44] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:7c79:3bd8:4c9e:2739)
[05:59:00] <xisop> those monadic operations for std::optional should be really nice to use
[05:59:32] <xisop> the only way to do that without c++23 would be to extract the value right?
[06:00:18] <xisop> ah, nvm
[06:02:18] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[06:06:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:10:11] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5327)))
[06:10:12] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[06:10:20] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:296d:7f3d:c53e:c634:5e61)
[06:13:15] *** Quits: xiongxin (~Thunderbi@117.136.39.213) (Ping timeout: 256 seconds)
[06:14:36] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:296d:7f3d:c53e:c634:5e61) (Ping timeout: 240 seconds)
[06:22:20] *** Joins: Inline (~Inline@p200300cd470e1300a84f1effc05ae732.dip0.t-ipconnect.de)
[06:25:03] *** Quits: Inline__ (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:31:39] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[06:32:05] *** Joins: xiongxin (~Thunderbi@117.136.40.174)
[06:33:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:37:35] *** Joins: Cyp_ (~cyp@213.237.84.236)
[06:41:28] *** Quits: Cyp (~cyp@213.237.84.236) (Ping timeout: 260 seconds)
[06:44:42] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:44:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:44:49] *** ChanServ sets mode: +v npaperbot
[06:45:28] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[06:49:03] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 260 seconds)
[06:49:11] *** Joins: pulse (~pulse@user/pulse)
[06:52:18] <great_taste> ugh I don't think I can adapt to having a .clang-format in my project. I don't think it makes sense to enforce a strict code style everywhere...
[06:54:28] <great_taste> as an example... sometimes I want this `AlignConsecutiveAssignments: true`, most times I don't...
[06:54:55] <great_taste> it hurts the specific aesthetic I want for that part of the code.
[06:56:43] <Friithian> then don't include that one
[06:57:30] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:00:33] *** Joins: paule32_ (~paul@nat-91-137-16-12.net.encoline.de)
[07:00:33] *** Quits: paule32_ (~paul@nat-91-137-16-12.net.encoline.de) (Changing host)
[07:00:33] *** Joins: paule32_ (~paul@user/paule32)
[07:01:34] <great_taste> idk how
[07:02:36] <great_taste> I know some of the "code beautifiers" have options you can include in a comment above the line you want specific formatting but I don't know if clang-format has that
[07:02:38] <Friithian> have you read the clang-format documentation and options?
[07:02:53] <great_taste> a bit
[07:02:56] <Friithian> https://clang.llvm.org/docs/ClangFormatStyleOptions.html ^f AlignConsecutiveAssignments
[07:03:26] <great_taste> but how to apply it selectively?
[07:03:34] *** Joins: paule32__ (~paul@nat-91-137-21-12.net.encoline.de)
[07:03:34] *** Quits: paule32__ (~paul@nat-91-137-21-12.net.encoline.de) (Changing host)
[07:03:34] *** Joins: paule32__ (~paul@user/paule32)
[07:03:52] <johnny> pretty sure you can only do that in the .clang-format file
[07:04:15] *** Quits: paule32 (~paul@user/paule32) (Ping timeout: 260 seconds)
[07:04:19] <johnny> just disable it for the whole project.. although it's possible some readers of .clang-format might allow you to put it in a subdir and have that take precedence
[07:04:40] <johnny> clang-format isn't like clang-tidy in that you can disable it with comments
[07:06:09] <great_taste> I'm wasting my time with this... I should be productive instead :P
[07:06:25] *** Quits: paule32_ (~paul@user/paule32) (Ping timeout: 246 seconds)
[07:06:26] *** Joins: adeliktas9 (~adeliktas@i59F52E5A.versanet.de)
[07:06:35] *** Joins: paule32 (~paul@nat-91-137-21-12.net.encoline.de)
[07:06:35] *** Quits: paule32 (~paul@nat-91-137-21-12.net.encoline.de) (Changing host)
[07:06:35] *** Joins: paule32 (~paul@user/paule32)
[07:08:27] *** Quits: adeliktas (~adeliktas@i59F52D90.versanet.de) (Ping timeout: 260 seconds)
[07:08:28] *** adeliktas9 is now known as adeliktas
[07:09:04] *** Quits: paule32__ (~paul@user/paule32) (Ping timeout: 272 seconds)
[07:09:43] <johnny> disable it for the whole project and move on .. or just accept it
[07:09:54] <johnny> that's what i do with prettier in ts, and black in python
[07:10:02] <johnny> and i assume flks do with go and gofmt
[07:10:48] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[07:15:59] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[07:31:02] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 260 seconds)
[07:39:15] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:1a84:e291:3593:78a1:6401)
[07:42:00] *** Quits: xiongxin (~Thunderbi@117.136.40.174) (Ping timeout: 272 seconds)
[07:42:01] *** xiongxin1 is now known as xiongxin
[07:44:43] <geranim0> i'm surprised we're allowed do write code as if we allocate lambdas on the heap, it just allocates garbage memory that never gets accessed until deletion... is there a way to use this or make it work? https://godbolt.org/z/PTfWbW93d
[07:47:44] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[07:52:19] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:1a84:e291:3593:78a1:6401) (Ping timeout: 260 seconds)
[07:52:47] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[07:54:07] *** Quits: arch_angel (~arch-ange@user/arch-angel) (Remote host closed the connection)
[08:02:23] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[08:03:49] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[08:06:35] *** Quits: NoXzema_ (~cq-work@user/cq-work) (Ping timeout: 256 seconds)
[08:06:38] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:06:40] *** Joins: cq-work (~cq-work@user/cq-work)
[08:19:56] *** Quits: CalamityBlue (~CalamityB@user/CalamityBlue) (Ping timeout: 245 seconds)
[08:21:31] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[08:25:51] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[08:34:35] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[08:43:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[08:47:07] *** Joins: NoXzema_ (~cq-work@user/cq-work)
[08:47:51] *** Quits: cq-work (~cq-work@user/cq-work) (Ping timeout: 260 seconds)
[08:56:20] *** Quits: lockywolf (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:03:35] *** Joins: lockywolf (~lockywolf@public.lockywolf.net)
[09:08:33] *** Quits: toulene (~toulene@user/toulene) (Quit: The Lounge - https://thelounge.chat)
[09:10:52] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[09:14:31] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 246 seconds)
[09:58:26] *** Joins: vnf (~vnf@46.159.151.228)
[10:02:37] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:16:09] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[10:16:25] *** Joins: teepee (~teepee@openscad/teepee)
[10:25:48] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[10:28:11] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Ping timeout: 260 seconds)
[10:40:26] *** Quits: vnf (~vnf@46.159.151.228) (Quit: Leaving)
[10:41:17] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[10:44:42] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:44:51] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:44:51] *** ChanServ sets mode: +v npaperbot
[10:45:28] *** Joins: vnf (~vnf@46.159.151.228)
[10:45:41] *** Joins: calcul0n (~calcul0n@2a01:e0a:150:6030:7d85:9901:c4f9:1225)
[10:49:00] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[11:01:51] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[11:05:42] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Remote host closed the connection)
[11:10:17] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[11:11:27] *** Joins: plastico (~plastico@neomutt/plastico)
[11:12:25] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:13:44] *** pah is now known as pa
[11:21:51] *** Quits: emerent (~quassel@p200300cd5743c3afba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[11:22:00] *** Joins: emerent (~quassel@p200300cd5743c3dfba27ebfffed28a59.dip0.t-ipconnect.de)
[11:22:31] *** Joins: callq (~callq@2409:4062:2013:e445:c48c:fc50:229d:16f7)
[11:27:22] *** Joins: jsbach (~jsbach@2a01:c22:a897:3700:b47:eb4e:a51f:67e)
[11:27:41] *** Joins: xiongxin (~Thunderbi@117.136.39.222)
[11:33:08] *** Quits: jsbach (~jsbach@2a01:c22:a897:3700:b47:eb4e:a51f:67e) (Ping timeout: 260 seconds)
[11:38:05] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:41:59] *** Joins: kenantu (~kenanmara@user/kenanmarasli)
[11:43:53] *** Joins: jsbach (~jsbach@2a01:c22:a897:3700:910f:db5c:f2ee:8484)
[11:45:22] *** Quits: thad_the_man (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net) (Read error: Connection reset by peer)
[11:45:53] *** Joins: thad_the_man (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net)
[11:48:33] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[11:50:18] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[11:50:46] *** Joins: paul424 (~tom@ip-5-172-234-109.multi.internet.cyfrowypolsat.pl)
[11:51:32] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[11:51:48] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[11:52:27] *** Joins: johnny (~johnny@user/johnny)
[11:52:38] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b0e0:c4b0:8b04:fa76)
[11:52:38] *** Quits: ville (~ville@user/ville) (Quit: ville)
[11:55:07] *** Joins: ville (~ville@user/ville)
[12:00:09] *** Quits: AbleBacon_ (~AbleBacon@user/AbleBacon) (Quit: I am like MacArthur; I shall return.)
[12:04:27] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[12:09:43] *** Joins: nq_ (~nq@82.79.141.40)
[12:10:09] *** Quits: taiyu (~taiyu@user/taiyu) (Ping timeout: 250 seconds)
[12:11:51] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[12:11:58] *** Joins: taiyu (~taiyu@user/taiyu)
[12:12:44] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:3316:5adc:f35f:7fae:8bc4)
[12:14:58] *** Quits: xiongxin (~Thunderbi@117.136.39.222) (Ping timeout: 272 seconds)
[12:14:59] *** xiongxin1 is now known as xiongxin
[12:18:43] <LordKalma> C++ conferences love ridiculously long talks
[12:19:09] <LordKalma> 1h40m with title "warning: std::find() is bronken!" wtf
[12:19:27] <LordKalma> 1h40m to talk about std::find?! Who has that attention span? ffs
[12:21:00] *** Joins: robod34 (Username@79.115.134.214)
[12:21:30] <LordKalma> 100 minutes is enough for 8-ish talks at any scientific conference
[12:25:55] <fiesh> while I love Sean Parent's talks usually, this one is not really worth watching I feel... the math notation is rather broken, and the fact that == is not an equivalence relation for floating point types because nan == nan fails isn't that interesting either, especially for that long a talk
[12:27:33] <LordKalma> your second point means that std::find isn't broken, operator== for floats is
[12:27:34] <LordKalma> but sure
[12:27:51] <LordKalma> use std::any_of and put a a-b<std::eps in there
[12:28:59] <LordKalma> I don't have any prejudice against the talk, or the speaker. I just don't think 100 minutes is an admissibly time to speak about anything
[12:29:20] <LordKalma> nobody has that attention span, or capacity to focus for that long in a passive state
[12:29:48] <LordKalma> is an *inadmissible
[12:31:30] *** Quits: callq (~callq@2409:4062:2013:e445:c48c:fc50:229d:16f7) (Ping timeout: 260 seconds)
[12:34:08] *** Quits: paul424 (~tom@ip-5-172-234-109.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[12:36:28] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 246 seconds)
[12:36:30] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Quit: Konversation terminated!)
[12:44:07] <ville> LordKalma: two words: pause button
[12:44:37] <LordKalma> two words: live audience
[12:44:41] <LordKalma> which didn't have one
[12:46:14] <ville> and whose fault is it that they were in the audience?
[12:51:29] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:55:28] <ville> but sure lot of the talks have fluff i don't particularly care for
[12:59:19] <ville> then again what i might consider fluff now i might have viewed as interesting information 20 years ago
[13:07:10] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[13:09:17] *** Joins: vnf_ (~vnf@85.175.252.98)
[13:11:01] <CarloWood> Should one always be using std::unordered_map over std::map when possible?
[13:11:24] *** Quits: vnf (~vnf@46.159.151.228) (Ping timeout: 240 seconds)
[13:11:59] <CarloWood> Someone said that to me; claiming it is just always faster.
[13:13:00] <TinoDidriksen> Then flat_map is worth looking into.
[13:17:24] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:3316:5adc:f35f:7fae:8bc4) (Ping timeout: 240 seconds)
[13:24:30] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:26:36] *** Quits: m42e (~m42e@pb42.de) (Ping timeout: 240 seconds)
[13:26:39] <ville> CarloWood: nothing is faster or slower with out a measurement. having said that, i do pick a hash table implementation by default over other kinds of implementations
[13:36:08] *** Joins: xiongxin (~Thunderbi@117.136.39.211)
[13:36:53] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[13:37:26] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Remote host closed the connection)
[13:37:59] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[13:39:34] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:184f:2d11:2654:9001:c0ca)
[13:40:07] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (Quit: Ping timeout (120 seconds))
[13:40:40] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[13:41:31] *** Joins: evilpyro (~evilpyro@user/evilpyro)
[13:42:58] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Ping timeout: 246 seconds)
[13:43:13] *** Quits: xiongxin (~Thunderbi@117.136.39.211) (Ping timeout: 260 seconds)
[13:43:13] *** xiongxin1 is now known as xiongxin
[13:44:12] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Remote host closed the connection)
[13:44:13] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[13:44:25] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[13:56:31] *** Joins: cq-work (~cq-work@user/cq-work)
[13:56:37] *** Quits: NoXzema_ (~cq-work@user/cq-work) (Ping timeout: 246 seconds)
[13:56:47] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[14:00:36] <ville> but that's just the particular local culture. pick the hash table and no one asks you to explain your self. or wait is that one more way it's faster?
[14:02:17] *** Quits: suki (~jimery@116.30.222.11) (Ping timeout: 265 seconds)
[14:02:38] <PJBoy> it is yeah
[14:02:45] <PJBoy> it also saves money for that reason
[14:04:21] *** Joins: suki (~jimery@116.30.222.11)
[14:07:50] <Haohmaru> !angelscript
[14:07:51] <nolyc> Haohmaru: Error: "angelscript" is not a valid command.
[14:20:55] *** Joins: ivii (~ivan@user/ivii)
[14:21:10] <LordKalma> interesting, vscode now has a centered layout mode
[14:21:15] <LordKalma> could be interesting for wide monitors
[14:21:58] <ville> i hope it's doing center align on the text in true webtech fashion
[14:22:47] <ville> "you asked for the text to be centered and we delivered"
[14:23:04] *** Quits: suki (~jimery@116.30.222.11) (Ping timeout: 265 seconds)
[14:27:11] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:30:43] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[14:31:03] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[14:31:43] <Haohmaru> who even cares about indentation when you copy/paste all your codez from $internetz
[14:31:51] <Haohmaru> ;P~
[14:32:36] <Haohmaru> code is becoming like hashed values, you don't have to look at it or know wtf it means, just ctrl+a the whole thing
[14:32:51] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[14:33:28] <LordKalma> the feature is basically an editor that doesn't scale to the full width of the window
[14:33:33] <LordKalma> but rather keeps a sensible size in the middle
[14:34:01] <Haohmaru> uh, what's the point?
[14:34:18] <LordKalma> https://i.gyazo.com/86da936eb4f733230d6020e2f47b9aa3.mp4
[14:34:25] *** Quits: cq-work (~cq-work@user/cq-work) (Ping timeout: 246 seconds)
[14:34:32] <LordKalma> not breaking your neck looking left on an ultrawide
[14:35:01] <LordKalma> (probably?)
[14:35:02] <Haohmaru> why would you have to.. okay, it's M$
[14:35:03] *** Joins: cq-work (~cq-work@user/cq-work)
[14:35:21] <Haohmaru> my IDE is re-feng-shui'able
[14:35:50] <LordKalma>  yeah, the specially annoying thing with vscode being electron is the lack of multiwindow
[14:35:56] <LordKalma> it's like it's big disadvantage
[14:36:01] <LordKalma> *its
[14:36:35] *** Joins: m42e (~m42e@pb42.de)
[14:37:00] *** gentooclimax is now known as climax
[14:42:57] <ville> you can't run more than one instance?
[14:43:19] <ville> or you can't split and have more than one editor area/panel?
[14:43:31] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 246 seconds)
[14:44:26] <LordKalma> you can run many instances, but not of the same "workspace"
[14:44:40] <Haohmaru> aww
[14:44:43] <LordKalma> workspace, in the simple form, a directory (workspaces can have multi directories)
[14:44:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:44:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:44:53] *** ChanServ sets mode: +v npaperbot
[14:45:06] <LordKalma> (top level directories, of course that's what I mean)
[14:45:16] <ville> but you can split and view for example 2 editor areas side-by-side?
[14:45:18] <Haohmaru> does it have "bing" integration? ;P~
[14:45:21] <LordKalma> yes
[14:45:25] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:45:28] <LordKalma> to the question from ville
[14:45:58] *** Quits: m42e (~m42e@pb42.de) (Ping timeout: 246 seconds)
[14:46:06] <LordKalma> you can do this if you want: https://i.gyazo.com/92772fe570bb7e6dca6cec6a7a8295a5.png
[14:46:16] <LordKalma> but not multi top-level windows
[14:46:33] <LordKalma> Haohmaru, there's vscodium, which is vscode without any MS-proprietary code on it, if you want
[14:46:48] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:184f:2d11:2654:9001:c0ca) (Ping timeout: 260 seconds)
[14:46:48] <Haohmaru> i don't want more webbrowsers
[14:47:18] *** climax is now known as gentooclimax
[14:47:20] <LordKalma> tiling is nice
[14:47:25] <LordKalma> multiwindow would have been better
[14:47:35] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[14:47:37] <LordKalma> docking system best
[14:47:50] <Haohmaru> i don't have a use for multiple windows tbh
[14:48:06] <Haohmaru> altho i do sometimes open some text file in a text editor
[14:48:21] <LordKalma> sometimes I do want to be looking at a file on my other monitor
[14:48:29] <LordKalma> since I don't own an ultawide
[14:48:46] <Haohmaru> ah, multiple monitors on the same PC
[14:48:56] <Haohmaru> i have multiple PCs each with one monitor
[14:48:57] <LordKalma> yes
[14:49:21] <LordKalma> if you have tiling in the editor, other than weird L shapes, single-monitor usage is perfectly fine
[14:49:37] <Haohmaru> i haven't needed tiling
[14:49:47] <LordKalma> I use side-by-side sometimes
[14:49:51] <CarloWood> I need my edit windows to be full screen.
[14:49:52] <LordKalma> never did more than that haha
[14:50:09] <Haohmaru> mine has "split view"
[14:50:13] <LordKalma> yes
[14:50:14] <LordKalma> that's what I mean
[14:50:15] <Haohmaru> but i've not needed it
[14:50:34] *** Joins: suki (~jimery@116.30.222.11)
[14:50:44] <LordKalma> occasionally I do write files while looking at other files
[14:50:44] <Haohmaru> ultra-tall is nice btw..
[14:50:52] <Haohmaru> for code and datasheets
[14:51:32] <LordKalma> y eah
[14:51:37] <Haohmaru> well, i mean, maybe not "ultra" .. it's 1080x1920 here
[14:51:44] <LordKalma> I do write a lot looking at PDFs at the same time
[14:51:50] <PJBoy> I miss having a tall monitor
[14:51:55] <LordKalma> but since the pdf reader is another application, it's not important
[14:52:01] <Haohmaru> PJBoy just rotate it ;P~
[14:52:05] <LordKalma> I mean, relevant to the discussion
[14:52:14] <PJBoy> I have a laptop :(
[14:52:29] <Haohmaru> fold it into an L and put it side-ways
[14:52:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:52:38] <LordKalma> shouldn't have had a laptop
[14:52:39] <Haohmaru> attach keyboard and mouse
[14:52:40] <LordKalma> you're wrong :D
[14:52:47] <PJBoy> v_v
[14:52:47] <LordKalma> speaking of laptops
[14:52:47] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[14:52:50] <Haohmaru> yeah, who even uses laptops
[14:53:04] <PJBoy> laptops are good
[14:53:09] <LordKalma> the MS surface's decision of using a non-wide aspect ratio is genius for its job
[14:53:09] <PJBoy> I can bring jackbox to my mates' houses
[14:53:09] <Haohmaru> no
[14:53:16] <LordKalma> its the productivity machine
[14:53:22] <LordKalma> man, I love jackbox boxes
[14:53:29] <Haohmaru> dafuq's a jackbox
[14:53:32] <LordKalma> I played some of them over discord with friends in the lockdowns
[14:53:38] <LordKalma> Haohmaru, a series of mini-games
[14:53:44] <Haohmaru> meh, games
[14:53:52] *** Parts: furrymcgee (~devuan@cgn-89-1-210-48.nc.de) ()
[14:53:53] <LordKalma> https://www.jackboxgames.com/
[14:54:21] <LordKalma> IIRC i have the party pack 3 and 5
[14:54:33] <PJBoy> and I can opportunistically bring my laptop outside for the few days of summer here
[14:54:58] <LordKalma> you mean july 22th from 14h to 16:46?
[14:55:08] <PJBoy> hahahaha
[14:55:13] <PJBoy> yes
[14:55:52] <PJBoy> honestly it always feels like summer starts later each year
[14:56:01] <PJBoy> it was toasty in August last year
[14:56:07] <PJBoy> not so much July
[14:56:32] * PJBoy gets back to work
[15:03:29] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[15:07:45] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[15:09:18] *** Joins: andreasbuhr (~quassel@p549dba4c.dip0.t-ipconnect.de)
[15:09:29] *** Joins: markong (~kvirc@213.146.188.203)
[15:14:38] *** Joins: BluesBoy (~bboy@user/bluesboy)
[15:19:53] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[15:20:25] *** Joins: sigma_ (~sigma@5.119.242.251)
[15:20:27] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[15:22:34] *** Joins: proller (~p@2a02:6bf:fff0:1:35ba:e226:643d:c5ec)
[15:25:55] *** Quits: sigma_ (~sigma@5.119.242.251) (Quit: Konversation terminated!)
[15:27:47] *** Quits: proller (~p@2a02:6bf:fff0:1:35ba:e226:643d:c5ec) (Ping timeout: 260 seconds)
[15:27:48] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[15:28:09] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[15:32:51] <ville> LordKalma: why would ayone want to get assaulted by a screenfull of cmake?
[15:33:13] <Haohmaru> sounds like ritual suicide
[15:33:20] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[15:33:28] <vdamewood> Which is worse, CMake or Will Smith?
[15:34:27] <Haohmaru> when will smith slaps some cmake into criss rock
[15:36:23] <CarloWood> I suppose I can get rid of code duplication like this with a base class? Hmm ... https://bpa.st/JWLA
[15:37:53] <CarloWood> These both have `SynchronousTask` as base class, but that does not have to be the case - both need access to the base class of `SynchronousTask` however (AIStatefulTask), which I do not want to make a virtual base class.
[15:38:53] <CarloWood> I suppose I need a base class that is a template that I pass the base class to use for it, like:
[15:39:42] <CarloWood> class MoveNewPipelines : public Something<SynchronousTask, std::pair<vulkan::pipeline::Handle, vk::UniquePipeline>>
[15:43:05] <CarloWood> I think I will also have to give up having a descriptive name for have_new_pipeline / have_new_initialized_characteristics
[15:44:32] *** Joins: proller (~p@2a02:6b8:b081:b409::1:35)
[15:45:29] *** Quits: evilpyro (~evilpyro@user/evilpyro) (Quit: Leaving)
[15:46:33] <CarloWood> This std::deque<T> / std::mutex pair (aithreadsafe::Wrapper<container_type, aithreadsafe::policy::Primitive<std::mutex>> wraps the container and adds a mutex for synchronization of access to it) is basically a many-producer / single-consumer queue - and I'd love that to be fast; faster than locking a std::mutex and then inserting into a std::deque :/.
[15:47:17] <CarloWood> I really hate that lock-free ring buffers have trouble when they run full :/
[15:49:10] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:50:48] <CarloWood> geordi: { boost::intrusive_ptr<Foo> ptr; cout << "Yes, I have boost."; } struct Foo {};
[15:50:49] <geordi> error: 'intrusive_ptr' is not a member of 'boost'
[15:51:15] <PJBoy> it does, but you gotta include the header
[15:51:53] <PJBoy> geordi, append \\ #include <boost/smart_ptr/intrusive_ptr.hpp>
[15:51:53] <geordi> Same error.
[15:52:11] <PJBoy> well then
[15:53:04] <PJBoy> I guess it has some but not all of boost
[15:53:12] <CarloWood> it's not in smart_ptr
[15:53:20] <CarloWood> { boost::intrusive_ptr<Foo> ptr; cout << "Yes, I have boost."; } #include <boost/intrusive_ptr.hpp> \ struct Foo {};
[15:53:20] <geordi> error: 'intrusive_ptr_release' was not declared in this scope
[15:53:46] <CarloWood> but it's too much to add all that... I which geordi also included my libraries :P
[15:53:49] <PJBoy> the docs say it is
[15:53:52] <CarloWood> I wish*
[15:54:13] <PJBoy> https://www.boost.org/doc/libs/1_78_0/libs/smart_ptr/doc/html/smart_ptr.html#intrusive_ptr_synopsis
[15:55:15] <PJBoy> I got the backslash wrong as you pointed out
[15:55:34] <PJBoy> and now get the same error <_<
[15:55:39] <CarloWood> Yeah I see. Its in both places.
[15:55:57] <PJBoy> this is why people hate boost
[15:56:00] <CarloWood> I probably should start using /smart_ptr/ too
[15:56:23] <CarloWood> I don't hate it...
[16:00:46] <CarloWood> Anyway, I have a lock-free FIFO buffer for trivial types... I was wondering if I can make a boost::intrusive_ptr trivially movable by releasing after a memcpy
[16:01:49] *** Quits: proller (~p@2a02:6b8:b081:b409::1:35) (Ping timeout: 240 seconds)
[16:01:49] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[16:02:20] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[16:02:34] <CarloWood> Oh, that class is single-producer...
[16:03:15] *** Cyp_ is now known as Cyp
[16:03:21] <CarloWood> I have another one.. but that isn't FIFO.. more like FirstIn SometimeOut ... the order can be mixed up.
[16:13:59] <LordKalma> so... a linked list?
[16:14:08] * LordKalma runs
[16:15:27] <CarloWood> Yes
[16:16:38] <CarloWood> It is a singly linked list that other one: https://github.com/CarloWood/ai-utils/blob/master/threading/MpscQueue.h#L100
[16:18:14] <LordKalma> just occurred to me. if clang is called clang because it's the c-lang compiler, flang is the *f*ortran-lang compiler, shouldn't clang++ have been cxxlang? :D
[16:18:22] <LordKalma> c++lang, rather
[16:18:53] <PJBoy> eh
[16:19:03] <PJBoy> should XNOR be called NXOR?
[16:19:45] <PJBoy> because x XNOR y = NOT (x XOR y), much like how x NOR y = NOT (x OR y)
[16:20:18] <PJBoy> (the answer is yes, and this bothers me)
[16:21:18] <LordKalma> also
[16:21:22] <LordKalma> https://polly.llvm.org/docs/UsingPollyWithClang.html#make-polly-available-from-clang
[16:21:30] <LordKalma> never heard of polly before compiling llvm myself
[16:22:02] <PJBoy> nor me
[16:22:16] <LordKalma> also, I realized I don't understand how openmp works, since it's a library but uses pre-processor #pragma
[16:22:27] <LordKalma> I don't understand the relation between compiler support for openmp and an openmp runtime
[16:23:00] <LordKalma> https://polly.llvm.org/ Polly seems to be a tool to auto-vector and things like that
[16:23:01] <PJBoy> the runtime does runtime stuff and the compiler support does compile time transformations
[16:23:26] <PJBoy> so the runtime will let you know how many threads you have, does the forking process, dynamical load balancing
[16:23:43] <PJBoy> the compile time transformations are like "this loop should be parallelised, do that"
[16:23:57] <PJBoy> "make code for reducing over this binary operation"
[16:24:13] <PJBoy> "generate vector instructions here"
[16:27:52] <PJBoy> check out https://godbolt.org/z/1f5b43n1W
[16:27:58] *** Joins: toulene (~toulene@user/toulene)
[16:28:59] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 256 seconds)
[16:30:09] <PJBoy> also I'm surprised that gcc doesn't optimise this to `return 8128;`
[16:30:17] <PJBoy> (it does if you remove the openmp though)
[16:30:30] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:31:24] *** Joins: soman (~soman@83.139.179.68)
[16:32:01] <fiesh> well it does without the omp stuff
[16:32:57] <PJBoy> as mentioned >_>
[16:33:38] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[16:34:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Quit: Konversation terminated!)
[16:34:26] <paule32> hello, i have following flex file:  https://dpaste.com/DUMCJNDW6
[16:34:42] <paule32> in line 163, i get error: unrecognized rule
[16:34:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:35:25] <paule32> if someone use flex, and bison, then it would be great, if they can help
[16:35:53] <paule32> i have check the %x section of missing lexer rule, but i can not find the mistake
[16:36:21] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:7c79:3bd8:4c9e:2739) (Ping timeout: 256 seconds)
[16:36:59] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (Quit: Ping timeout (120 seconds))
[16:37:02] <paule32> when i delete lines 163 - 174, flex does not print error
[16:38:39] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[16:46:00] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[16:47:00] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:50:15] <paule32> i get it
[16:50:34] <paule32> line 176, and 177 was wrong
[17:05:44] <rpav> where is your first {% am i just blind
[17:06:00] <rpav> er %{ i guess
[17:06:14] <Haohmaru> scramble the contents untill it works
[17:06:22] <rpav> Haohmaru: strfry()
[17:07:03] <rpav> no manpage for memfrob?
[17:07:50] <Haohmaru> dafuq is that
[17:09:25] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:09:54] <rpav> man strfry and see
[17:11:50] <LordKalma> PJBoy, so the *compiler* convers the pragma into "notices" to openmp?
[17:11:59] <LordKalma> openmp API calls,
[17:12:19] <PJBoy> basically yeah
[17:12:37] <PJBoy> it affects some codegen directly too, like with the SIMD stuff
[17:12:56] <LordKalma> if ought to affect codegen always, as it needs to make said openmp API calls then
[17:13:06] <PJBoy> yeah
[17:13:07] <LordKalma> > call    GOMP_parallel
[17:13:10] <LordKalma> sounds legit
[17:14:08] <LordKalma> my problem with building clang from source is that I don't know if I'm doing it right
[17:14:16] <LordKalma> it doesn't seem to have mandatory dependencies
[17:14:27] <LordKalma> and I don't know if they just affect the performance of clang itself, or the codegen also
[17:14:40] <LordKalma> which in return makes the doubt of the pre-build binaries as well
[17:15:17] <LordKalma> and makes me want to try every compiler if I'm really going to make a DSP application
[17:16:50] <Haohmaru> rpav no, u
[17:17:10] <rpav> Haohmaru: oh, aren't you on linux?
[17:17:26] <rpav> though i think it's a glibc thing
[17:17:44] <Haohmaru> i have a debian and a crapdows7 machine here
[17:18:32] <rpav> oh well if you have manpages installed at all you should probably have it and probably the one for memfrob
[17:18:51] <Haohmaru> i feel too lazy to do such things right now
[17:19:28] <PJBoy> dang, gcc and clang don't have openmp 5.1
[17:19:48] <PJBoy> or maybe clang does actually
[17:20:10] <PJBoy> I guess they both do >_<;
[17:20:20] <Friithian> alright someone in another channel said the makefiles cmake creates are slow and that you should use cmake to generate ninja stuff instead, anyone know anything about this?
[17:20:25] *** Quits: Shell (~shell@user/shell) (Quit: ZNC 1.8.2 - https://znc.in)
[17:20:36] <PJBoy> check out the modern way of writing openmp crap https://godbolt.org/z/jzdvd5xvc
[17:20:56] <rpav> re: classes containing related classes .. the annoyances and restrictions are just too much at times
[17:21:15] <ville> Friithian: i don't know about the first claim that if the makefiles are slow compared to other makefiles, but there have been benchmarks where ninja beats make in general
[17:23:12] <rpav> the makefiles cmake creates aren't typically that much slower and probably not worth the switch alone, though the latency of _running_ make might be so
[17:23:14] *** Joins: Shell (~shell@user/shell)
[17:23:35] <rpav> e.g., overall your build is not going to save minutes, but `make && ./run` will feel a lot snappier
[17:23:57] *** Quits: Shell (~shell@user/shell) (Remote host closed the connection)
[17:23:58] <Friithian> so I have no real reason to change my workflow
[17:23:59] <Friithian> thanks!
[17:24:24] <rpav> or ratehr `ninja && ./run`, i made a `mk` script that figures out how to make and what -j and -v should do
[17:25:29] <rpav> also ninja has issues with colorized errors if that's something that matters to you
[17:25:43] <Friithian> well as long time ninja and time make give similar values
[17:25:53] <rpav> ime, ymmv
[17:26:07] <Friithian> oh, yeah I like ANSI escape codes a lot so if ninja doesn'tâ€¦
[17:26:24] <rpav> if you're not using lld, that's likely your biggest save
[17:26:43] <Friithian> I'm not actually sure what linker I am usig
[17:27:21] *** Joins: Shell (~shell@user/shell)
[17:28:42] <rpav> CMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld"
[17:28:43] <Friithian> oh god, -fuse-ld=lld, parsed as -f use-ld = lld
[17:28:53] <rpav> and CMAKE_SHARED_LINKER_FLAGS
[17:29:17] <rpav> Friithian: mentally? that's waht it means though
[17:29:38] <Friithian> yeah that's what it means, but I feel it weird when short options are used like that
[17:30:16] <rpav> dunno but it takes like a 20-30s link time down to like 3s
[17:30:20] <Friithian> dang
[17:30:32] <Friithian> now that sure is worth switching to
[17:30:36] <rpav> and mold is like instantaneous but still WIP and doesn't link a lot of stuff right
[17:30:56] <rpav> yeah if you have long/annoying links that's the most frustratingly annoying thing to me
[17:31:05] <fiesh> the only downside is that gold and lld lack some features, like I can't seem to change the stack size for the mingw toolchain
[17:31:12] <rpav> compile foo.cpp in like 2s then wait 30s to link thousands of files
[17:31:16] <Friithian> I'll just use gold like some outdated SO told me
[17:31:35] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:31:39] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:e082:8b12:97d8:5d28)
[17:31:58] <rpav> mold > lld > gold > ld
[17:32:01] <Friithian> now time to figure out how to tell scons to use lld
[17:32:27] <rpav> fiesh: not a huge deal unless your runtime depends on it .. if you want it for production then you can always do your release build with slow-linker
[17:32:36] *** Joins: evilpyro (~evilpyro@user/evilpyro)
[17:34:30] <fiesh> rpav: sure, if your runtime doesn't depend on a larger stack, there's no point in increasing it anyway ;-)
[17:35:07] <rpav> true though if your runtime depends on a _larger_ stack probably you have issues ;/
[17:35:18] <rpav> i was thinking reduced stack for smaller footprint or something
[17:35:39] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[17:37:13] *** Quits: nq_ (~nq@82.79.141.40) (Quit: Leaving)
[17:41:11] <fiesh> I don't think a stack size of say 8MB is an issue for an application targeting a typical desktop computer, for example
[17:44:07] *** Joins: pulse (~pulse@user/pulse)
[17:45:55] <ville> interesting if c and c++ committees decide to do similar moves: https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance
[17:46:46] <rpav> fiesh: what is justifiably reliant on a larger stack size?
[17:47:12] <rpav> i can see massively reducing that if you're implementing a language which manages its own stack or something, though even then one might consider FFI
[17:47:44] <rpav> but probably then you're doing your own sbrk or whatever
[17:48:21] <fiesh> rpav: for example big initializer lists for static data, having std::string in there and what not... somehow makes the compiler use a lot of stack size
[17:48:28] *** Joins: meator (~meator@user/meator)
[17:48:40] <fiesh> (and we're not talking huge amounts of data here but something that still results in acceptable compile time)
[17:49:29] <rpav> wait, are you changing the default stack size for your _produced_ program or the actual compiler tools
[17:50:15] <fiesh> the former, the compiler has no issue since it runs under linux where the stack tends to be big (like I have a soft ulimit of 8MB for it)
[17:50:29] <rpav> ah .. yeah that's what i initially thought
[17:50:38] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[17:52:10] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:56:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[18:04:04] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Quit: varioust)
[18:04:57] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:05:20] *** Joins: nq_ (~nq@195.254.133.193)
[18:08:46] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[18:09:00] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[18:09:57] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[18:11:23] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[18:17:16] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:19:05] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[18:19:18] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[18:20:20] *** Joins: proller (~p@2a02:6b8:b081:b409::1:35)
[18:20:39] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:25:46] *** Quits: msim__ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 245 seconds)
[18:26:47] *** Joins: msim_ (~msim@2001:8004:1d81:970:df0f:9e7:2f77:decb)
[18:31:01] *** Quits: nq_ (~nq@195.254.133.193) (Remote host closed the connection)
[18:31:57] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[18:35:23] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[18:36:44] *** Joins: nq_ (~nq@195.254.133.193)
[18:36:44] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[18:38:32] *** Quits: nq_ (~nq@195.254.133.193) (Remote host closed the connection)
[18:38:39] *** Quits: msim_ (~msim@2001:8004:1d81:970:df0f:9e7:2f77:decb) (Ping timeout: 260 seconds)
[18:38:58] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[18:39:22] *** Joins: nq_ (~nq@195.254.133.193)
[18:39:54] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[18:40:35] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[18:41:04] *** Quits: evilpyro (~evilpyro@user/evilpyro) (Quit: Leaving)
[18:44:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:44:51] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:44:51] *** ChanServ sets mode: +v npaperbot
[18:46:02] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: No route to host)
[18:46:31] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[18:49:02] *** Quits: paule32 (~paul@user/paule32) (Quit: Leaving)
[18:54:16] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[18:55:37] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[18:55:45] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[18:56:15] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[19:01:03] *** Quits: letto (~letto@188.27.114.171) (Ping timeout: 260 seconds)
[19:01:16] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[19:03:22] *** Joins: letto (~letto@188.27.114.171)
[19:05:22] *** Quits: msk` (~msk@103.213.213.64) (Ping timeout: 272 seconds)
[19:07:09] <Alipha> CarloWood: sometimes you want the ordering of std::map. (which also means you can do std::set_* operations on them, or std::lower_bound.) or you're lazy and you don't want to write a std::hash specialization :-)
[19:08:32] <rpav> #pragma twice
[19:08:47] <Friithian> hey that's my joke that I stole!
[19:09:52] <rpav> i would be surprsied if it didn't occur to a lot of people (or at least we smartasses) .. everytime they type #pragma once
[19:10:41] <Friithian> I am more surprised I don't see the joke more often
[19:10:42] <rpav> although you could do funky things like #ifdef FIRST_TIME
[19:11:13] <rpav> Friithian: yeah .. maybe a "too obvious" but this time i was just like "again? ok i can't resist"
[19:11:23] <Friithian> true
[19:11:54] <Alipha> PJBoy: i'm sure it's XNOR and not NXOR because the latter is even more difficult to pronounce :-)
[19:13:32] <rpav> everyone would probably say "nixor"
[19:13:42] *** Quits: letto (~letto@188.27.114.171) (Remote host closed the connection)
[19:13:46] <rpav> or "nexor"
[19:13:50] <PJBoy> probably no one ever pronounces XNOR anyway
[19:14:01] <rpav> i do in my head if i'm thinking about it, ex-nor
[19:14:42] <PJBoy> I would pronounce it "bitwise equals"
[19:15:06] <rpav> hah
[19:15:22] <rpav> i guess it is right .. does anyone actually implement it then?
[19:15:42] <Alipha> qbasic called it EQV
[19:15:57] <rpav> i mean, does anyone implement it and call it XNOR
[19:16:09] *** Joins: letto (~letto@188.27.114.171)
[19:16:14] <rpav> i only really think about what the bitwise functions do when i need one to do some specific thing
[19:28:18] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:e082:8b12:97d8:5d28) (Quit: Konversation terminated!)
[19:48:44] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[19:56:11] *** Joins: gareppa (~gareppa@user/gareppa)
[19:56:44] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[19:56:55] *** Joins: ARoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie)
[19:57:00] *** Joins: AlanRoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie)
[19:57:44] *** Joins: paul424 (~tom@ip-5-172-236-200.multi.internet.cyfrowypolsat.pl)
[19:58:16] *** Quits: AlanRoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie) (Client Quit)
[19:58:16] *** Quits: ARoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie) (Client Quit)
[19:58:32] *** Joins: ARoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie)
[19:58:34] *** Joins: AlanRoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie)
[19:58:38] *** Quits: AlanRoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie) (Remote host closed the connection)
[19:58:48] *** Quits: ARoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie) (Client Quit)
[19:59:02] *** Joins: ARoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie)
[20:00:45] *** Joins: rg (~r-g@gateway/tor-sasl/r-g)
[20:02:13] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[20:03:25] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:e082:8b12:97d8:5d28)
[20:09:14] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:10:13] *** Joins: meator (~meator@user/meator)
[20:11:17] *** Joins: magla (~gelignite@d5362fd7.access.ecotel.net)
[20:22:08] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:22:39] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[20:23:55] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[20:24:17] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:29:18] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[20:41:59] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:7c79:3bd8:4c9e:2739)
[20:42:07] <rpav> if tests were constexpr, if it compiled we could ship it
[20:48:36] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:48:53] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[20:51:17] <Friithian> sounds like assert() with extra steps
[20:52:20] <rpav> static_assert() with extra steps
[20:53:12] <Friithian> oh, yeah, forgot that part
[20:56:02] <rpav> basically if your gui isn't constexpr you're clearly doing it wrong ;)
[20:56:03] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:56:24] *** Quits: pulse (~pulse@user/pulse) (Quit: { indiedevs.net })
[20:56:37] *** Quits: ARoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie) (Ping timeout: 240 seconds)
[21:12:38] *** Joins: luizfrds (~Luiz@152.250.243.147)
[21:13:04] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 246 seconds)
[21:15:50] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[21:16:10] *** Joins: eck (~root@user/eck)
[21:18:19] *** Quits: nq_ (~nq@195.254.133.193) (Ping timeout: 246 seconds)
[21:26:32] *** Joins: ARoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie)
[21:27:50] *** Quits: magla (~gelignite@d5362fd7.access.ecotel.net) (Quit: Stay safe!)
[21:28:09] *** Quits: kenantu (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[21:31:13] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[21:31:21] *** Joins: nq (~nq@82.79.141.40)
[21:32:30] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[21:32:45] <LordKalma> jason turner loves constexpr so much that I bet if someone asked him to do some simulations he'd constexpr them. They'd take 2 months to compile and just return the result.
[21:32:55] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[21:34:20] *** Quits: soman (~soman@83.139.179.68) (Ping timeout: 250 seconds)
[21:35:35] *** Joins: kevr` (~kevr@user/kevr)
[21:36:50] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[21:36:55] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[21:46:52] *** Quits: ARoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie) (Remote host closed the connection)
[21:47:10] *** Joins: ARoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie)
[21:50:31] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:51:06] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Remote host closed the connection)
[21:51:39] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[21:53:32] <PJBoy> maybe he'll implement constexpr string/vector in libc++
[21:54:23] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Remote host closed the connection)
[21:54:36] *** Joins: Mat_42 (~mat_42@178.238.165.7)
[21:56:21] <PJBoy> :(
[21:56:51] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[22:00:11] *** Joins: pulse (~pulse@user/pulse)
[22:03:56] <Friithian> constexpr can be nice in certain circumstances
[22:04:44] <ville> the idea of compile time computation yes, constexpr no
[22:08:40] *** Joins: xuxx (~xuxx@86.228.71.37.rev.sfr.net)
[22:15:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:17:58] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:24:21] <ville> looks like go folks made a sligtly funny implementation choice for their generics/templates: they don't fully monomoprhize them. you can still end up with a vtable-ish lookup
[22:26:47] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:7c79:3bd8:4c9e:2739) (Ping timeout: 250 seconds)
[22:27:13] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:e082:8b12:97d8:5d28) (Quit: Konversation terminated!)
[22:33:31] *** Joins: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net)
[22:33:43] <acidtonic> anyone here familiar with .def files to do tricky linking?
[22:34:38] <acidtonic> trying to use .def files to join libraries built by mingw and visual studio, anyone used these?
[22:34:58] *** Quits: HvszrStykp (~X@81.171.62.87) (Ping timeout: 246 seconds)
[22:37:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:7c79:3bd8:4c9e:2739)
[22:37:26] <CarloWood> I generated this strongly connected digraph that exists of 150336 "black" nodes and 289544 "white" nodes. There are only edges from white to black (all of which have weight 0), or from black to white (with a weight of -2, -1, 0, 1 or 2).
[22:38:53] *** Quits: paul424 (~tom@ip-5-172-236-200.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[22:38:54] <CarloWood> I want to find an algorithm to find the cycles (loops) with a "stable" average weight. Here 'average' weight means: just sum up the weight of all the edges on the cycle and divide that by the length of the cycle.
[22:39:42] <CarloWood> And "stable" means that the two "strategies" that are involved can not be improved.
[22:40:53] <CarloWood> The two strategies are the black strategy and the white strategy: when on a black node, the black strategy selects an out going edge (to a white node thus) in order to minimize the average cycle weight.
[22:41:27] <CarloWood> And on a white node, the white strategy selects an out going edge in order to maximize the average cycle weight.
[22:42:43] *** Joins: gehn (~gehn@user/gehn)
[22:43:01] <CarloWood> When both strategies are optimal - we get a finite number of cycles that we can choose from that all have the same average weight and no change of strategy from either color can lower (black) or increase (white) that.
[22:43:35] <CarloWood> Does anyone have ideas on how I can do this? Brute force allowed ;).. if it finishes within a few hours.
[22:44:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:44:51] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:44:51] *** ChanServ sets mode: +v npaperbot
[22:45:13] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:7c79:3bd8:4c9e:2739) (Ping timeout: 250 seconds)
[22:46:41] <CarloWood> I can't even begin to formulate a brute force algorithm that would do this even if it is allowed to run forever :/.
[22:48:17] <CarloWood> Maybe define a strategy as the product of all choices of outgoing edges per node. Ie, with 4 white and 4 black nodes and a total of 20 edges or so, that might be doable :P
[22:49:06] <acidtonic> CarloWood, I'd look into graph theory
[22:49:35] <acidtonic> CarloWood, existing functions for traversing graphs, checking for cycles. Seems like you'd do that then work out the heuristics as you visit cycles
[22:50:09] <acidtonic> CarloWood, as for when to settle, I'd calculate variance and stop when it settles over time
[22:50:47] *** Joins: magla (~gelignite@d5362fd7.access.ecotel.net)
[22:51:11] <CarloWood> I can't find a single paper (research/study) where they even consider competing strategies. Everything is about finding a cycle with minimum weight, and I found some that are even about finding a minimum average cycle weight.
[22:51:45] <CarloWood> But this problem is not about minimum as on black nodes you try to do that - but from white nodes you try to maximize it.
[22:52:54] <acidtonic> CarloWood, yep, but at that point it's also above my head
[22:55:39] *** Quits: proller (~p@2a02:6b8:b081:b409::1:35) (Remote host closed the connection)
[22:56:37] <CarloWood> It *feels* like an NP-hard problem (https://en.wikipedia.org/wiki/NP-hardness) ...
[22:57:03] <CarloWood> And a solution if any even exists probably is one where you only approach the right path.
[22:57:09] <great_taste> can you reproduce this bug? I declare a static function in a cpp file and call in inside a lambda and keep getting a "Unused function" warning
[22:57:15] *** Joins: furrymcgee (~devuan@cgn-89-1-210-48.nc.de)
[22:59:05] <CarloWood> It would require something equivalent to marching ants - or neuroevolution (https://en.wikipedia.org/wiki/Neuroevolution)
[23:00:35] <CarloWood> { auto g = [](){ f(); } } static void f() { BARK; }
[23:00:35] <geordi> error: expected ',' or ';' before '}' token
[23:00:46] <CarloWood> { auto g = [](){ f(); }; } static void f() { BARK; }
[23:00:46] <geordi>  
[23:10:39] *** Joins: makeyavelly (~Thunderbi@88.135.63.38)
[23:11:05] *** Parts: makeyavelly (~Thunderbi@88.135.63.38) ()
[23:22:39] <xkoncek> c++ stdlib is still missing a non-owning erased function object type
[23:23:00] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[23:23:08] <xkoncek> i.e. pointer to function + pointer to data
[23:27:09] <rpav> hrm can you not deduce <R,Ts...> from `void foo(std::function<R(Ts...)>)`
[23:30:10] <CarloWood> That this compiles is really impressive - and I *LOVE* it that you can now initialize members with {} and then still use 'using BASE::BASE' for the constructor.
[23:30:12] <CarloWood> https://gyazo.com/3bf1815151b86fe92b95cce9200c4a0b
[23:31:00] <rpav> oh i probably need the regular function destructuring grumble
[23:31:05] <rpav> why is this stuff not in std
[23:31:06] <xkoncek> rpav: not sure if that is what you are looking for, it was stolen from std::function implementation https://gitlab.com/night-ripper/nwd/-/blob/master/src/main/cpp/nwd/utility/invoker.hpp#L112
[23:31:37] <xkoncek> that is for getting the lambda function type
[23:32:16] *** Quits: Mat_42 (~mat_42@178.238.165.7) (Remote host closed the connection)
[23:32:31] <ville> xkoncek: they are missing a fixed callable with no allocations. 98.755% of the cases you know exactly how many bytes of storage you need for your bound arguments
[23:32:49] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[23:33:04] <rpav> xkoncek: yeah .. i think that specialization is one part of the whole set (but a lot of the functions not necessary just for getting types)
[23:33:22] <xkoncek> std::function is great for being stored in another object / container
[23:33:46] <xkoncek> but there is another use case of type-erasing a visitor pattern
[23:34:18] <xkoncek> where you mostly just put either lambdas or other known callables
[23:34:53] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:e59a:4251:16bb:b170)
[23:34:53] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:e59a:4251:16bb:b170) (Changing host)
[23:34:53] *** Joins: skapata (~Skapata@user/skapata)
[23:35:15] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Remote host closed the connection)
[23:35:27] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[23:47:36] <rpav> wtf how am i forgetting how apply<pack> works
[23:49:21] <rpav> ah there we go
[23:51:09] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[23:52:26] *** Quits: pulse (~pulse@user/pulse) (Quit: { indiedevs.net })
[23:55:27] <ville> xkoncek: when wouldn't you know the required size for the callable? when you're loading a dso and code from there may store a callable, but then you should probably reverse who is holding the storage anyways
[23:57:29] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[23:57:40] <SaltHilStroller_> Anyone have advice on uploading Doxygen generated docs to Confluence?
[23:57:48] <SaltHilStroller_> I saw the recommendation to use the HTML macro, but that only allows for a single page. Ideally I'd upload the output html/ folder and just have it display as a page in Confluence
[23:59:25] *** Quits: jsbach (~jsbach@2a01:c22:a897:3700:910f:db5c:f2ee:8484) (Ping timeout: 240 seconds)
[23:59:57] <great_taste> why am I getting errors such as "undefined reference to operator new/delete..."?
