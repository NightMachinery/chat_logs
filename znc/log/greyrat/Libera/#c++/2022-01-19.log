[00:11:19] *** Joins: jkaye (~jkaye@2601:281:200:1958:2b64:9a7d:6899:8349)
[00:13:07] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[00:14:50] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:7d95:2034:27f9:a41b)
[00:14:51] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:7d95:2034:27f9:a41b) (Changing host)
[00:14:51] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:19:31] *** Joins: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a)
[00:23:43] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[00:26:03] *** Joins: EdFletcher (~PKD@user/edfletcher)
[00:29:11] *** Quits: Kerr (~Kerr@c-73-193-43-154.hsd1.wa.comcast.net) (Quit: Client closed)
[00:30:02] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:6d96:190f:824f:1d2) (Quit: Leaving)
[00:30:58] *** Quits: Vrganj (~vrganj@93-138-56-207.adsl.net.t-com.hr) (Quit: Leaving)
[00:34:08] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:f390:aec4:1ede:f0ea) (Remote host closed the connection)
[00:34:33] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:f390:aec4:1ede:f0ea)
[00:35:38] *** Joins: Viewday110 (~Viewday@user/viewday)
[00:36:15] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:36:15] *** Viewday110 is now known as Viewday11
[00:36:56] *** Quits: paulf (~paulf@lfbn-lyo-1-263-154.w2-7.abo.wanadoo.fr) (Quit: Connection closed)
[00:42:56] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[00:43:39] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:44:30] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a) (Remote host closed the connection)
[00:44:54] *** Quits: jhms (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[00:45:15] *** Joins: rvalue (~rvalue@user/rvalue)
[00:45:20] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:45:51] *** Joins: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a)
[00:49:38] *** Joins: fivegruel (~fivegruel@HSI-KBW-095-208-248-017.hsi5.kabel-badenwuerttemberg.de)
[00:53:30] *** Quits: jimmio92 (~jimmio92@pool-96-227-111-47.phlapa.fios.verizon.net) (Quit: Client closed)
[00:59:13] *** Quits: jsbach (~jsbach@2a01:c23:5cd4:5d00:242d:9ac5:ca5a:20b9) (Ping timeout: 268 seconds)
[00:59:24] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[01:00:06] *** Joins: Viewday113 (~Viewday@user/viewday)
[01:00:29] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[01:00:29] *** Viewday113 is now known as Viewday11
[01:00:59] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:02:28] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[01:02:41] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[01:02:51] *** Joins: Viewday111 (~Viewday@user/viewday)
[01:04:16] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[01:04:17] *** Viewday111 is now known as Viewday11
[01:05:01] *** Joins: EdFletcher (~PKD@user/edfletcher)
[01:06:48] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:07:43] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:2348:4014:f84d:cc8)
[01:07:44] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:2348:4014:f84d:cc8) (Changing host)
[01:07:44] *** Joins: RoKenn (~RoKenn@user/rokenn)
[01:09:20] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Remote host closed the connection)
[01:09:38] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[01:12:29] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[01:13:55] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[01:14:26] <elderK> Hey all, I was wondering where I should go to ask questions regarding implementing iterators for a custom container, such that it is standards compliant.
[01:14:26] <elderK> In particular, the issue I'm having is that I would like to have a forward_iterator whose reference type is not actually a real reference. From what I've read, this is not standard and I would have to implement an input_iterator instead.
[01:14:26] <elderK> Any guidance anyone could offer would be great.
[01:14:27] <elderK> The main reason I need to have a non-reference reference type for the iterator is that the values I'm "deferencing" are not directly addressable.
[01:14:28] <elderK> For those interested, it's for a custom dense_set class that is a dynamic bitset for unsigned integers.
[01:14:49] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:15:16] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:20:38] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:21:23] *** Quits: clime (~clime@78-80-115-5.customers.tmcz.cz) (Ping timeout: 256 seconds)
[01:21:31] *** BinarySavior_ is now known as BinarySavior
[01:22:39] *** Quits: BinarySavior (~BinarySav@josh.vet) (Changing host)
[01:22:39] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[01:23:02] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[01:23:36] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:24:23] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[01:25:06] *** Joins: malloy (~jimery@113.116.52.22)
[01:28:46] <PJBoy> C++20 concept std::forward_iterator doesn't require this
[01:29:03] <PJBoy> so you could try to ignore the old requirements
[01:29:59] <PJBoy> the new ranges algorithms all use that concept instead of the old requirements, so there's that
[01:32:43] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Quit: WeeChat 3.3)
[01:33:25] *** Quits: magla (~gelignite@55d4217a.access.ecotel.net) (Quit: Stay safe!)
[01:33:33] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:37:58] <anyone> Any guidance I offer is great. But only when I give it.
[01:38:39] <elderK> PJBoy: The new ranges stuff is hard for me to grok. Mostly because I only have cppreference to consult. Is there a way to easily use a pair of iterators as a range?
[01:38:51] <elderK> Say, so we can use for-range loops on the result of set equal_range?
[01:39:01] <PJBoy> yeah there's std::ranges::subrabge
[01:39:05] <PJBoy> subrange
[01:39:14] <anyone> well if you already have two iterators, just for(auto j=myiterator; j!=theotheriterator; ++j)..
[01:39:48] <elderK> anyone: I know but that can be very wordy in some cases.
[01:40:03] <anyone> humour me
[01:40:09] <elderK> PJBoy: What special steps do I need to do, to make it so that custom containers / iterators are all good with ranges?
[01:40:54] <elderK> anyone: You mean why is it wordy? auto someName = set.equal_range(whatever).
[01:40:55] <elderK> for ( ; someName.first != someName.second; .... )  { .... }
[01:41:11] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:12] <elderK> Depending on how you do all that, it can be very wordy.
[01:41:18] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:18] *** ChanServ sets mode: +v npaperbot
[01:41:18] <elderK> Sure, you can structure-bind and stuff and that makes life nicer.
[01:41:37] <elderK> It would be nice if we could just use for-range.
[01:41:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[01:41:55] <PJBoy> { for (auto [it_begin, it_end] = s.equal_range(5); int x : ranges::subrange(it_begin, it_end)) cout << x << ' '; } set s{3, 5, 7};
[01:41:56] <geordi> 5
[01:42:38] <PJBoy> probably best to make a function that converts the result of equal_range into a subrange, but that's the idea
[01:43:10] <PJBoy> elderK, the requirements are there on cppreference
[01:44:26] <elderK> Do you know of any good introductions to the ranges library? Say, to gain familiarity with which I can then attack cppreference?
[01:44:45] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:44:49] <PJBoy> nah I've always just attacked it
[01:44:59] <anyone> PJBoy: given that set s, why not just s.find(5)
[01:45:17] *** Quits: Sorcerer1 (~SorcererX@133.79-161-60.customer.lyse.net) (Ping timeout: 240 seconds)
[01:45:33] <PJBoy> because that wouldn't demonstrate the usage of subrange with equal_range
[01:45:36] *** Joins: jsbach (~jsbach@dynamic-077-191-115-085.77.191.pool.telefonica.de)
[01:46:08] <anyone> well ok, but since sets can only contain each element once, equal_range feels like total overkill (and perhaps that's a good example of overkill).
[01:46:48] <kalven> so multiset..
[01:49:13] <PJBoy> { for (auto [it_begin, it_end] = s.equal_range(NAN); double x : ranges::subrange(it_begin, it_end)) cout << x << ' '; } set<double> s{3.0, 5.0, 7.0};
[01:49:14] <geordi> 3 5 7
[01:49:27] <PJBoy> happy now?
[01:49:29] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:49:36] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:50:53] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[01:51:24] <kalven> this is worse
[01:52:58] <anyone> I don't think NAN qualifies (is it ordered with respect to s?)
[01:53:07] *** Joins: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a)
[01:53:08] <anyone> Going back to the set<int> example,
[01:53:27] <anyone> { for (auto i = s.find(5); i != s.upper_bound(5); ++i) cout << *i << ' '; } set s{3,5,7};
[01:53:28] <geordi> 5
[01:53:29] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-017.hsi5.kabel-badenwuerttemberg.de) (Ping timeout: 268 seconds)
[01:53:43] <anyone> seems a whole lot shorter than the ranges::subrange incantation, elderK
[01:54:16] *** Joins: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke)
[01:54:26] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[01:54:39] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[01:54:44] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[01:58:02] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[01:59:27] *** Quits: AmR (~AmREiSa@41.36.185.103) (Quit: Konversation terminated!)
[02:03:11] *** Quits: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[02:04:49] *** Quits: mintograde (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[02:05:12] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:05:14] *** Joins: mintograde (~mintograd@47.201.5.61)
[02:06:26] *** Quits: proller (~p@2a02:6b8:b081:8824::1:3) (Ping timeout: 268 seconds)
[02:09:32] <PJBoy> { for (int x : make_subrange(s.equal_range(5))) cout << x << ' '; } multiset s{3, 5, 5, 5, 7};  auto make_subrange(auto p) { auto [it_begin, it_end] = p; return ranges::subrange(it_begin, it_end); }
[02:09:33] <geordi> 5 5 5
[02:09:39] <PJBoy> would be the more sane usage
[02:10:58] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:11:49] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:16:01] <anyone> { for (auto i = s.find(5); i != s.upper_bound(5); ++i) cout << *i << ' '; } multiset s{3, 5, 5, 5, 7};
[02:16:01] <geordi> 5 5 5
[02:16:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:17:09] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:17:11] *** Joins: CaCode (~CaCode@user/cacode)
[02:17:45] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[02:18:45] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Remote host closed the connection)
[02:18:58] *** Joins: proller (~p@80.240.216.69)
[02:19:08] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:f390:aec4:1ede:f0ea) (Remote host closed the connection)
[02:19:32] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:f390:aec4:1ede:f0ea)
[02:20:47] *** Quits: laslmtdbm^ (~laslmtdbm@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[02:21:05] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[02:21:17] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Quit: leaving)
[02:21:17] <elderK> anyone: That's not exactly great either. You may call upper_bound more than once.
[02:21:25] <elderK> Sure, the compiler will probably cache the value but there's no guarantee, right?
[02:23:23] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[02:24:00] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[02:24:15] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Remote host closed the connection)
[02:31:37] *** Quits: orthoplex64 (~crm@70.120.0.94) (Remote host closed the connection)
[02:31:43] *** Joins: kit-ten (~u0_a391@2603-6010-a141-6fa3-f44f-d859-cfd9-2a3c.res6.spectrum.com)
[02:32:01] *** Joins: orthoplex64 (~crm@70.120.0.94)
[02:33:02] *** Quits: pizdets_ (~pizdets@183.182.114.123) (Ping timeout: 240 seconds)
[02:33:43] *** Joins: pizdets (~pizdets@183.182.114.168)
[02:34:57] *** Quits: kit_ten (~u0_a391@2600:380:a451:6557:78fd:fdbf:da0b:386a) (Ping timeout: 240 seconds)
[02:36:59] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[02:37:17] *** Joins: ferdna (~ferdna@user/ferdna)
[02:37:53] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[02:39:16] *** Quits: Cyp (~cyp@213.237.88.120) (Ping timeout: 250 seconds)
[02:41:27] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[02:50:55] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Ping timeout: 256 seconds)
[02:56:27] *** Quits: unyu (~pyon@user/pyon) (Quit: Reboot.)
[02:56:56] *** Joins: Cyp (~cyp@213.237.88.120)
[02:57:03] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:57:27] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[02:58:29] *** Joins: jimmio92 (~jimmio92@pool-96-227-111-47.phlapa.fios.verizon.net)
[03:03:10] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 268 seconds)
[03:03:57] *** Quits: cosimone (~user@93-47-230-83.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[03:10:13] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[03:14:29] *** Joins: waleid (~waleid@110.137.100.57)
[03:15:56] *** Joins: proller (~p@2a02:6b8:b081:7206::1:35)
[03:17:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[03:21:02] *** Quits: evelyette (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[03:22:17] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:803d:824b:a45b:692b) (Ping timeout: 268 seconds)
[03:22:35] *** Joins: stonkey (~stonkey@user/stonkey)
[03:23:25] *** Quits: ethoxy (~root@bison.sh3ll.ru) (Ping timeout: 240 seconds)
[03:31:52] <elderK> Also, I have a question regarding custom allocator aware containers that are built using standard containers. Say, for my custom dense_set: The allocator I'd accept would be allocator<T>. Looking at the requirements, I need to have allocator_type be that type, get_allocator return an instance of that allocator and so on.
[03:31:52] <elderK> But say the vector I'm using as storage has a different element type than the allocator is allocating. Would I need to rebind the top-level allocator to be the element type of the vector?
[03:31:52] <elderK> In this case, my custom container is using std::vector internally just to avoid doing the memory allocation stuff myself directly.
[03:33:26] *** Joins: waleid2 (~waleid@110.137.100.57)
[03:33:34] <elderK> Maybe scoped_allocator would be useful here?
[03:33:53] <sprout> is using 'uint_t' in c++ considered bad practice?
[03:34:00] *** Quits: waleid (~waleid@110.137.100.57) (Ping timeout: 268 seconds)
[03:34:15] <elderK> sprout: Do you mean uint8_t, etc?
[03:34:28] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[03:34:30] <sprout> no,  uint_t
[03:34:40] <elderK> Is it a custom typedef?
[03:35:02] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[03:35:04] <sprout> I seem to have used it but tracking it back I am not sure where it came from.
[03:35:28] <sprout> might have been included with a c header,  unsure
[03:36:23] <sprout> looked too much to at c embedded code so I seem to have defaulted to using it everywhere.  unsure that's bad practice
[03:36:51] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:37:02] *** Quits: jkaye (~jkaye@2601:281:200:1958:2b64:9a7d:6899:8349) (Ping timeout: 240 seconds)
[03:38:02] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[03:38:36] *** Joins: Enitin (~Enitin@82.102.22.84)
[03:39:36] <elderK> If you can, use the standard typedefs from cstdint.
[03:39:40] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[03:39:46] <elderK> If you really need to have uint_t, as long as you define it, it should be okay.
[03:39:47] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:7907:7dad:41ed:706e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:39:56] <elderK> I believe unsigned is shorthand for unsigned int, too, if that helps.
[03:40:02] *** Joins: seninha (~seninha@user/seninha)
[03:40:19] *** Quits: waleid2 (~waleid@110.137.100.57) (Quit: Nettalk6 - www.ntalk.de)
[03:40:56] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[03:42:48] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[03:43:13] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:45:23] <sprout> yah,  I also just read it's better avoided on some blog and I kind-of agree with the argument (doesn't detect under/overflow) so it's gonna be something else
[03:46:02] *** Quits: oknenavin (~nomo@95.87.208.95) (Ping timeout: 240 seconds)
[03:46:22] <elderK> Do you mean the typedef uint_t is bad, or the use of unsigned integers?
[03:47:27] <elderK> For the later, I'd say use the type that's appropriate. If values can never be negative, then it might as well be unsigned. If you subtract stuff, you should make sure that the subtraction is valid, or the addition. If that matters in your use case.
[03:47:33] *** Quits: Pook (~Pook@2001:8a0:f996:1400:f52a:cdb9:6fc2:dabd) (Quit: Leaving)
[03:47:51] <elderK> u -= v. Might as well have an assert: assert(u >= v), if the underflow behavior of unsigned ints is a problem.
[03:50:47] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:54:19] <elderK> Can anyone help with the allocator aware question above?
[03:57:56] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:00:06] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[04:00:32] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[04:00:37] *** vinleod is now known as vdamewood
[04:01:48] *** Parts: Burgundy (~NA@86.121.143.206) ()
[04:01:50] <sprout> both.  but I agree with Google practice that unsigned is better avoided even when you mean non-negative numbers
[04:02:05] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[04:02:32] <InPhase> sprout: Boo.  Unsigned is fully defined.  Signed leads to undefined behavior.
[04:02:55] <kalven> Undefined behavior means you can trap on it.
[04:03:04] <sprout> don't make me change my mind!
[04:04:36] <elderK> Google isn't always right. It depends on what makes sense to you, provided you know, you're sane :P
[04:04:52] <elderK> I find using an appropriate integer type to be useful for documentation purposes, as much as others.
[04:05:10] <sprout> https://www.learncpp.com/cpp-tutorial/unsigned-integers-and-why-to-avoid-them/ <- the blog.  I am tempted to agree
[04:05:25] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[04:05:31] <elderK> Say you have a function that accepts int as a parameter. Say it's defined to only accept positive values. In the implementation, you either assert or check that the parameter is not negative. If you use an unsigned integer type for the parameter, you don't need to perform this check.
[04:05:37] <InPhase> !give kalven stdcpp trap
[04:05:38] <elderK> It's like using references where appropriate vs. pointers.
[04:05:38] <nolyc> InPhase: Error: "stdcpp trap" is not a valid command.
[04:06:01] <InPhase> Wasn't that a thing in nolyc?
[04:06:05] <elderK> If the pointer parameter is expected to ALWAYS be non-null, you might as well pass a reference. That way, you don't have to assert in your function that the pointer is indeed non-null. Better documentation.
[04:06:08] <sprout> I use a type synonym now for documentation purposes
[04:06:28] <kalven> InPhase: yes, thanks. I know
[04:07:57] * sprout tempted to define `using positive_int_t = int` just to mindf*ck with people reading my code
[04:09:09] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:f390:aec4:1ede:f0ea) (Ping timeout: 268 seconds)
[04:14:03] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[04:15:39] *** Joins: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f)
[04:17:07] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:17:37] *** Quits: jsbach (~jsbach@dynamic-077-191-115-085.77.191.pool.telefonica.de) (Ping timeout: 256 seconds)
[04:23:43] *** Joins: unyu (~pyon@user/pyon)
[04:24:34] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[04:29:20] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[04:29:30] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[04:32:55] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[04:33:12] *** Joins: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com)
[04:36:17] *** Quits: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com) (Ping timeout: 268 seconds)
[04:42:40] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:48:33] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[04:50:11] *** Quits: feldim2425 (~feldim242@dynamic-2jh5bzwtlmjc9mwoif-pd01.res.v6.highway.a1.net) (Quit: ZNC 1.8.x-git-91-b00cc309 - https://znc.in)
[04:50:39] *** Quits: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[04:51:05] *** Joins: feldim2425 (~feldim242@178-191-253-102.adsl.highway.telekom.at)
[04:52:26] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:58:20] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[04:58:39] *** Quits: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com) (Changing host)
[04:58:39] *** Joins: Flannel (~flannel@user/flannel)
[04:59:45] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[05:00:20] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 268 seconds)
[05:02:11] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[05:02:32] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[05:07:53] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:09:51] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac) (Remote host closed the connection)
[05:19:14] *** Joins: waleid (~waleid@110.137.100.57)
[05:19:56] *** Parts: waleid (~waleid@110.137.100.57) ()
[05:21:24] *** kit-ten is now known as ca-t
[05:22:00] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:23:32] *** ca-t is now known as kit-ten
[05:23:33] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:28:47] <jimmio92> Oh and while you're at never using unsigned integers, treat all numbers as doubles because why not ignore types and their benefits/downfalls rofl. Can't believe that's even a thought that crosses people's minds. "Can't error" is way better than "have to catch potential error with an if statement" imo.
[05:29:23] <BurumaSerafuku> wut
[05:29:37] <kalven> way to miss the point
[05:30:04] <anyone> That reminds me of Qbasic, which would default to making all variables be a float (or double?) if you dared to miss the variable name trailing sigil to indicate an integer.
[05:30:19] <BurumaSerafuku> that's why I don't smoke grass, neither eat processed foods
[05:30:27] <jimmio92> Nah. There's other ways to handle errors that don't involve categorically tossing unsigned ints is all I'm sayin'.
[05:30:52] <BurumaSerafuku> anyone: inheritance of classic BASIC
[05:31:01] <jimmio92> Also I use Lua in my current project so... everything is doubles ;(
[05:31:16] <anyone> so.. don't use lua? (considering you're in #C++)
[05:31:23] * BurumaSerafuku loves Lua
[05:32:30] <jimmio92> anyone I was responding to what people were talking about earlier; not discussing Lua here. Was just mentioning why I said "treat everything as a double" as that's default behavior there.
[05:32:43] <BurumaSerafuku> there's a reason for that
[05:32:48] <BurumaSerafuku> but not for C++
[05:33:42] <jimmio92> I guess rofl doesn't come across as "making a joke", but that's what I attempted. May the good lord above strike me down for being misunderstood on the internet lol
[05:34:14] <BurumaSerafuku> you tried to joke to compensate your previous failure. that's why the joke didn't work
[05:37:05] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[05:37:20] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 268 seconds)
[05:38:00] *** Joins: EdFletcher (~PKD@user/edfletcher)
[05:39:58] <jimmio92> ...? What the fuck are you on about? Previous failure? What, to read a tutorial blog post that wastes my time when I'm busy? Maybe I should just fuck off IRC since y'all keep being dicks.
[05:40:07] *** Parts: jimmio92 (~jimmio92@pool-96-227-111-47.phlapa.fios.verizon.net) ()
[05:41:11] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:20] *** ChanServ sets mode: +v npaperbot
[05:46:30] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[05:46:53] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[05:51:41] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9841-fdb7-086b-ec04.res6.spectrum.com)
[05:56:48] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:58:25] *** Joins: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a)
[05:58:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:59:18] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Read error: Connection reset by peer)
[05:59:46] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[06:04:51] *** Joins: hwdyki (~hwdyki@user/hwdyki)
[06:04:55] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Remote host closed the connection)
[06:05:36] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:07:19] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Remote host closed the connection)
[06:08:35] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a) (Read error: Connection reset by peer)
[06:09:12] *** Joins: PureSine (~PureSine@user/PureSine)
[06:09:38] *** Joins: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a)
[06:15:55] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[06:19:19] <Alipha> { for (auto i = s.find(5); i != s.upper_bound(5); ++i) cout << *i << ' '; } multiset s{3, 5, 5, 5, 7}; // anyone, you should use lower_bound, not find. find can return any matching element, not necessarily the first
[06:19:20] <geordi> 5 5 5
[06:20:43] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[06:21:31] <jackson99> hi. are there any efficiency issues with returning std::string, as opposed to passing a std::string pointer/reference and then updating it?
[06:22:58] *** Joins: zmt01 (~zmt00@user/zmt00)
[06:24:04] <Alipha> jackson99: returning a string by value is actually likely to be faster than pointlessly default constructing a string in order to then pass a pointer/reference to it
[06:24:10] *** Joins: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca)
[06:24:21] <jackson99> ok, nice
[06:24:25] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:25:02] *** Quits: zmt01 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[06:26:16] *** Joins: zmt01 (~zmt00@user/zmt00)
[06:26:20] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[06:26:24] <Alipha> jackson99: in best case, "return value optimization" (RVO) in which case returning the string is completely free. In worst case, the string gets moved, which is very cheap
[06:31:55] <jackson99> I didn't give this much thought before, and just found it more convenient to return a string, as i can pass it directly to other functions. but then someone commented that there are efficiency concerns by doing that, so I was wondering if that is the case (I am glad it isn't)
[06:34:06] <Alipha> jackson99: pre-c++11, returning by value was quite expensive. It's not anymore
[06:34:38] <Alipha> It would have meant a copy
[06:35:34] <RandomReader> (aka person commenting may be in an environment that is over a decade out of date)
[06:35:59] *** Joins: frost (~frost@user/frost)
[06:36:39] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:42:40] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:44:23] *** Joins: waleid (~waleid@110.137.102.66)
[06:47:37] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[06:55:36] *** Joins: waleid2 (~waleid@110.137.102.66)
[06:56:02] *** Quits: waleid (~waleid@110.137.102.66) (Ping timeout: 240 seconds)
[06:57:45] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:c0b2:a7ad:8aa7:4387)
[06:58:39] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:04:12] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:05:45] *** Quits: nich04 (~nicholaus@2607:fb90:e54c:9133:f8e0:5d8a:0:7ca) (Remote host closed the connection)
[07:06:00] *** Quits: waleid2 (~waleid@110.137.102.66) (Quit: Nettalk6 - www.ntalk.de)
[07:07:33] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:09:16] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Remote host closed the connection)
[07:11:08] *** Joins: GIR (~GIR@64.145.93.51)
[07:11:21] *** GIR is now known as GIR0001
[07:12:27] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[07:13:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[07:14:40] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:16:44] *** Parts: hwdyki (~hwdyki@user/hwdyki) ()
[07:17:02] *** Quits: zmt00 (~zmt00@user/zmt00) (Client Quit)
[07:18:48] *** fbiagent_ is now known as fbiagent
[07:18:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:18:56] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Quit: Leaving)
[07:19:24] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[07:19:36] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:21:13] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[07:24:22] *** Joins: karakedi (~eAC53C340@user/karakedi)
[07:31:24] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:31:39] *** Quits: froggy_ (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[07:32:23] *** Joins: russruss (~russruss@my.russellmcc.com)
[07:33:20] *** Joins: froggyc (~froggy@2.235.241.212)
[07:37:10] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:41:43] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c931:b07d:80ed:31cb)
[07:43:53] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 256 seconds)
[07:44:27] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[07:46:25] *** Joins: KAHR-Alpha_ (~Alpha@lfbn-rei-1-185-156.w86-225.abo.wanadoo.fr)
[07:46:50] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c931:b07d:80ed:31cb) (Ping timeout: 268 seconds)
[07:48:41] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a66005c2c07b55be35b48.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[07:48:41] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[07:48:48] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:51:35] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[07:58:44] *** Joins: eelstrebor (~eelstrebo@199.47.67.38)
[07:58:49] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:01:30] *** Joins: zmt01 (~zmt00@user/zmt00)
[08:04:42] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[08:14:17] *** Joins: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a)
[08:14:49] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[08:18:49] *** Quits: eelstrebor (~eelstrebo@199.47.67.38) (Quit: Ex-Chat)
[08:30:13] *** Quits: samuelb (~samuelber@nata01.lip.pt) (Ping timeout: 240 seconds)
[08:32:14] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:43:58] *** Joins: samuelbernardo (~samuelber@194.210.119.251)
[08:53:01] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: quit)
[08:53:27] *** Joins: frost (~frost@user/frost)
[08:56:32] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[08:57:38] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:00:50] *** Joins: Burgundy (~NA@86.121.143.206)
[09:07:12] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[09:13:24] *** Quits: GIR0001 (~GIR@64.145.93.51) (Read error: Connection reset by peer)
[09:13:37] *** Joins: GIR (~GIR@64.145.93.50)
[09:15:06] *** GIR is now known as GIR0001
[09:32:05] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:33:28] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[09:35:27] *** Joins: EdFletcher (~PKD@user/edfletcher)
[09:35:52] *** Joins: mintoyatsu (~mint@ip24-255-4-17.tc.ph.cox.net)
[09:36:02] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[09:41:12] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:20] *** ChanServ sets mode: +v npaperbot
[09:43:03] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:43:33] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[09:43:45] *** Joins: rvalue (~rvalue@user/rvalue)
[09:50:12] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[09:57:03] *** Quits: KAHR-Alpha_ (~Alpha@lfbn-rei-1-185-156.w86-225.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[09:57:54] *** Parts: mintoyatsu (~mint@ip24-255-4-17.tc.ph.cox.net) (Leaving)
[10:00:32] *** Joins: wolf2k_huh (~wolfman20@2600:1700:3211:4140:c5b1:950b:d0b9:627e)
[10:00:41] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[10:02:39] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[10:04:17] *** Quits: wolfman2000 (~wolfman20@2600:1700:3211:4140:71a3:e11e:62e4:128) (Ping timeout: 240 seconds)
[10:04:32] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:05:05] *** Joins: EdFletcher (~PKD@user/edfletcher)
[10:06:05] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:06:27] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Quit: Leaving)
[10:07:39] *** Quits: furrymcgee (~devuan@cgn-89-1-208-165.nc.de) (Ping timeout: 256 seconds)
[10:07:53] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:08:12] *** Quits: emerent (~quassel@p200300cd570443e6ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:08:31] *** Joins: emerent (~quassel@p200300cd5704432fba27ebfffed28a59.dip0.t-ipconnect.de)
[10:09:16] <lockywolf> Is there some straightforward way to pass an object from a process to a process?
[10:10:10] <lockywolf> Both processes are from the same executable, and have the same class definitions, but different address spaces.
[10:10:18] *** Joins: frost (~frost@user/frost)
[10:12:14] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:17:15] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[10:17:39] <RandomReader> that's not something the standard would cover, would be better asked in #c++-general
[10:17:47] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:18:11] <RandomReader> (threads are about the only "execution" concept the standard covers .. processes, virtual memory, etc is all implementation specific)
[10:18:25] *** Quits: badone (~badone@209.132.189.152) (Ping timeout: 256 seconds)
[10:25:57] *** Quits: GIR0001 (~GIR@64.145.93.50) (Ping timeout: 256 seconds)
[10:26:57] *** Joins: fivegruel (~fivegruel@HSI-KBW-095-208-248-017.hsi5.kabel-badenwuerttemberg.de)
[10:27:20] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[10:27:21] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[10:27:48] *** Joins: evelyette (~Eleanor@178.79.105.181)
[10:28:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:28:59] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[10:32:04] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[10:34:58] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[10:45:16] *** Joins: luizfrds (~Luiz@152.250.243.147)
[10:46:02] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[10:46:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[10:47:39] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:48:04] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[10:50:02] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[10:51:10] *** Joins: llh (~llh@user/llh)
[10:58:34] *** Joins: frost (~frost@user/frost)
[10:59:47] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: gtg)
[11:02:43] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[11:02:45] *** Joins: rendar (~rendar@user/rendar)
[11:04:29] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:14:06] *** Quits: nuala (~nuala@user/nuala) (Quit: ()
[11:15:21] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:15:23] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[11:15:38] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:19:50] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:26:34] *** Joins: oknenavin (~nomo@95.87.208.95)
[11:30:00] *** Joins: jsbach (~jsbach@2a01:c22:a45c:8f00:f2aa:ffa:d568:c4df)
[11:31:31] *** Quits: oknenavin (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[11:35:03] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:35:07] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:37:23] *** Joins: waleid (~waleid@110.137.102.66)
[11:37:24] *** Joins: timmot (~tim@n1-42-160-66.mas1.nsw.optusnet.com.au)
[11:41:24] *** Joins: waleid2 (~waleid@110.137.102.66)
[11:41:25] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4)
[11:42:24] *** Quits: waleid (~waleid@110.137.102.66) (Ping timeout: 268 seconds)
[11:43:32] *** Joins: Furai (~Furai@furai.pl)
[11:44:56] *** Quits: timmot (~tim@n1-42-160-66.mas1.nsw.optusnet.com.au) (Quit: leaving)
[11:45:52] *** Joins: timmot (~tim@n1-42-160-66.mas1.nsw.optusnet.com.au)
[11:46:44] *** Quits: timmot (~tim@n1-42-160-66.mas1.nsw.optusnet.com.au) (Client Quit)
[11:47:07] *** Joins: timmot (~tim@n1-42-160-66.mas1.nsw.optusnet.com.au)
[11:55:48] *** Joins: Major_Biscuit (~MajorBisc@c-001-018-021.client.tudelft.eduvpn.nl)
[11:55:53] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[11:58:53] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[12:00:32] *** Quits: judabuda (kowbunga@user/judabuda) (Quit: Gone.)
[12:00:32] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Ping timeout: 240 seconds)
[12:04:34] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[12:07:36] *** Quits: ville (~ville@user/ville) (Quit: ville)
[12:10:22] *** Quits: andreyv (~andrey@user/andreyv) (Quit: ZNC - http://znc.in)
[12:10:46] *** Joins: ville (~ville@user/ville)
[12:15:20] *** Joins: mixfix41 (~homefame@user/mixfix41)
[12:19:50] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:30:09] *** Quits: popocka[m] (~popockama@2001:470:69fc:105::1:546e) (Quit: You have been kicked for being idle)
[12:32:26] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:fc6b:8b6c:d6d3:ec85)
[12:33:59] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[12:35:10] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:c0b2:a7ad:8aa7:4387) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:35:54] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:44:09] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:46:30] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[12:50:18] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[12:50:46] *** Quits: waleid2 (~waleid@110.137.102.66) (Quit: Nettalk6 - www.ntalk.de)
[12:54:10] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 250 seconds)
[13:01:38] *** Joins: stonkey (~stonkey@user/stonkey)
[13:05:08] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[13:06:11] *** Joins: seninha (~seninha@user/seninha)
[13:09:59] *** Joins: slavfox (~slavfox@93.158.232.111)
[13:13:43] *** Joins: plastico (~plastico@neomutt/plastico)
[13:15:38] *** Joins: PJBoy (~PJBoy@2a00:23c7:8302:b301:8101:9982:5894:6a0)
[13:15:38] *** Quits: PJBoy (~PJBoy@2a00:23c7:8302:b301:8101:9982:5894:6a0) (Changing host)
[13:15:38] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:20:34] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:5d8f:20db:5ddd:bcf4)
[13:21:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:798d:4129:9f07:fe5b) (Ping timeout: 240 seconds)
[13:22:09] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:31:20] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e54c:9133:f8e0:5d8a:0:7ca)
[13:34:47] *** Quits: PureSine (~PureSine@user/PureSine) (Read error: Connection reset by peer)
[13:35:11] *** Joins: PureSine (~PureSine@user/PureSine)
[13:37:44] *** Joins: PureSine_ (~PureSine@109.162.192.146)
[13:37:57] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 240 seconds)
[13:41:12] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:21] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:21] *** ChanServ sets mode: +v npaperbot
[13:41:28] *** Quits: PureSine (~PureSine@user/PureSine) (Ping timeout: 256 seconds)
[13:47:35] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (erbium.libera.chat (Nickname regained by services)))
[13:47:39] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:49:52] *** Joins: KAHR-Alpha_ (~Alpha@2a01cb0d024a6600b9fdb154cd8ce984.ipv6.abo.wanadoo.fr)
[13:50:20] *** Quits: timmot (~tim@n1-42-160-66.mas1.nsw.optusnet.com.au) (Quit: Lost terminal)
[13:51:21] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:55:54] *** Joins: stonkey (~stonkey@user/stonkey)
[14:06:56] *** Joins: Burgundy (~NA@86.121.143.206)
[14:16:54] *** Quits: Burgundy (~NA@86.121.143.206) (Remote host closed the connection)
[14:17:38] *** Joins: Burgundy (~NA@86.121.143.206)
[14:21:31] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[14:26:37] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[14:34:43] *** Joins: AmR (~AmREiSa@41.36.185.103)
[14:48:01] *** Quits: KAHR-Alpha_ (~Alpha@2a01cb0d024a6600b9fdb154cd8ce984.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[14:50:10] *** Joins: aakashi2001 (~aakashi20@103.61.255.0)
[14:50:10] *** Quits: aakashi2001 (~aakashi20@103.61.255.0) (Changing host)
[14:50:10] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[15:05:45] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[15:07:45] *** Quits: proller (~p@2a02:6b8:b081:7206::1:35) (Ping timeout: 268 seconds)
[15:08:04] *** Joins: NEYi (~NEYi@109.251.216.38)
[15:10:17] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 240 seconds)
[15:14:14] <anyone> https://wandbox.org/permlink/7FBidBbB3eccUiCa  Lambdas don't get copied, which I guess kinda makes sense, but what if.. what would prevent it?
[15:15:01] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:15:37] <PJBoy> lambdas can be copied
[15:17:30] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a66001939558a4e3f97d4.ipv6.abo.wanadoo.fr)
[15:19:50] <anyone> ok enough C++ for me for today :p
[15:20:55] *** Joins: supernova (~quassel@2405:9800:ba11:6207:5c0:30f8:5ca6:2f7)
[15:24:04] <PJBoy> here's more C++ https://wandbox.org/permlink/jzy1RxHADE5tDAti
[15:25:25] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:27:42] *** Joins: kit_ten (~u0_a391@2600:380:a423:cdf9:589f:965d:28e0:cc4c)
[15:30:43] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[15:31:32] *** Quits: kit-ten (~u0_a391@2603-6010-a141-6fa3-f44f-d859-cfd9-2a3c.res6.spectrum.com) (Ping timeout: 240 seconds)
[15:36:09] *** kit_ten is now known as kit-ten
[15:37:41] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[15:41:02] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[15:42:27] *** Joins: xiongxin (~Thunderbi@119.123.100.216)
[15:42:46] *** Joins: Enitin (~Enitin@82.102.22.84)
[15:45:17] *** Joins: furrymcgee (~devuan@cgn-89-1-208-165.nc.de)
[15:48:21] *** Joins: pulse (~pulse@user/pulse)
[15:51:32] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a66001939558a4e3f97d4.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[15:51:50] *** Quits: supernova (~quassel@2405:9800:ba11:6207:5c0:30f8:5ca6:2f7) (Ping timeout: 250 seconds)
[15:52:22] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:52:43] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Client Quit)
[15:53:35] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:58:27] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[16:04:29] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 268 seconds)
[16:09:04] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[16:09:35] *** Joins: stonkey (~stonkey@user/stonkey)
[16:09:41] *** Joins: proller (~p@2a02:6b8:0:40c:159c:f811:f62c:1848)
[16:12:41] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[16:13:02] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[16:13:03] *** Joins: derwolf_ (~DerWolf@2a01:4f8:c0c:554a::1)
[16:13:03] *** Joins: moberg1 (~moberg@luke.millenniumfalcon.org)
[16:13:07] *** Joins: tct_ (~tct@user/tct)
[16:13:15] *** Joins: kristjansson_ (sid126207@id-126207.tinside.irccloud.com)
[16:13:33] *** Joins: VShell (~shell@user/shell)
[16:13:36] *** Joins: blueminder__ (sid143388@id-143388.tinside.irccloud.com)
[16:13:44] *** Joins: Fleck (~fleck@user/fleck)
[16:13:53] *** Joins: iNKa (~NoBody@user/brocker)
[16:14:03] *** Joins: rpav_ (~rpav@user/rpav)
[16:14:22] *** Server sets mode: +Fcnt 
[16:14:23] *** Joins: Nixx_ (~quassel@bulbasaur.sjorsgielen.nl)
[16:14:23] *** Joins: mattgirv (quassel@apps.fossgalaxy.com)
[16:14:26] *** Joins: Gamah_ (~quassel@gamah.net)
[16:14:27] *** Joins: oj_ (oj@user/oj)
[16:14:32] *** Joins: nich04 (~nicholaus@2607:fb90:e54c:9133:f8e0:5d8a:0:7ca)
[16:14:35] *** Joins: ahlk` (~user@2600:1700:31c0:3a10::43)
[16:15:01] *** Joins: Karyon_ (~Karyon@user/karyon)
[16:15:02] *** Joins: dostoyev1ky2 (~sck@user/dostoyevsky2)
[16:15:04] *** Joins: ndorf_ (~nd@ob.noxio.us)
[16:15:13] *** Joins: segnior_ (segnior@user/segnior)
[16:15:14] *** Joins: Latexi95 (late@banhammer.fi)
[16:15:20] *** Joins: routeveg (~lee@197.ip-51-195-136.eu)
[16:15:24] *** Joins: w41_ (~w41@45.76.32.7)
[16:15:26] *** Joins: FlannelKing (~flannel@cpe-76-175-193-181.socal.res.rr.com)
[16:15:31] *** Joins: [dubiago] (~dubiago@167.99.238.127)
[16:15:40] *** Joins: tayy_ (~tayy@ns502531.ip-142-4-214.net)
[16:15:49] *** Joins: veverak1 (~veverak@ip-89-102-98-161.net.upcbroadband.cz)
[16:15:51] *** Joins: ericP_ (~eric@jay.w3.org)
[16:16:03] *** Joins: kit_ten (~u0_a391@2600:380:a423:cdf9:589f:965d:28e0:cc4c)
[16:16:05] *** Quits: blueminder_ (sid143388@id-143388.tinside.irccloud.com) (Ping timeout: 240 seconds)
[16:16:05] *** Quits: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: cncr04s_ (~cncr04s@afxr.net) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Karyon (~Karyon@user/karyon) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: tct (~tct@user/tct) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: segnior (segnior@user/segnior) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: ericP (~eric@jay.w3.org) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: dubiago (~dubiago@167.99.238.127) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: notevil (~notevil@user/notevil) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: geeknix (~pi@2001:e68:5432:a8c4:1393:329d:a357:f118) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: megeve (sid523379@id-523379.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Brocker (~NoBody@user/brocker) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: anyone (~filler@a4.inai.de) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: ndorf (~nd@ob.noxio.us) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Alipha (~AliphaX@user/alipha) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e54c:9133:f8e0:5d8a:0:7ca) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: kalven (~calvin@2a02:470:84:102::24) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Shell (~shell@user/shell) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: tafa (~tafa@user/tafa) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Flannel (~flannel@user/flannel) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: mebus (~mebus@2a00:8a60:e019:10de::ac22) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: wolf2k_huh (~wolfman20@2600:1700:3211:4140:c5b1:950b:d0b9:627e) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Nixx (~quassel@bulbasaur.sjorsgielen.nl) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: nshire (~nshire@user/nshire) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: keinbock (~pepsi@2a02:4780:1:1::1:a856) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: tayy (~tayy@ns502531.ip-142-4-214.net) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: routeveg_ (~lee@197.ip-51-195-136.eu) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Latexi95_ (late@banhammer.fi) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: mattgirv_ (quassel@apps.fossgalaxy.com) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: montpol (montpol@fine.mouses.xyz) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: raekye (~raekye@creatifcubed.com) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: rpav (~rpav@user/rpav) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Gamah (~quassel@gamah.net) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: undeclared (nullx@user/undeclared) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: veverak (~veverak@ip-89-102-98-161.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: tinloaf (~tinloaf@user/tinloaf) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: oj (oj@user/oj) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: derwolf (~DerWolf@static.143.125.47.78.clients.your-server.de) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: kit-ten (~u0_a391@2600:380:a423:cdf9:589f:965d:28e0:cc4c) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: miklcct_ (quasselcor@vps.miklcct.com) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: Flecks (~fleck@user/fleck) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: w41 (~w41@45.76.32.7) (Ping timeout: 240 seconds)
[16:16:08] *** Joins: anyone (~filler@a4.inai.de)
[16:16:08] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[16:16:08] *** undeclared8 is now known as undeclared
[16:16:08] *** Joins: keinbock (~pepsi@2a02:4780:1:1::1:a856)
[16:16:11] *** KnownSyntax_ is now known as KnownSyntax
[16:16:13] *** raekye3 is now known as raekye
[16:16:13] *** blueminder__ is now known as blueminder_
[16:16:13] *** greyblue9_ is now known as greyblue9
[16:16:13] *** kristjansson_ is now known as kristjansson
[16:16:13] *** montpol4 is now known as montpol
[16:16:25] *** kit_ten is now known as kit-ten
[16:16:34] *** Joins: Alipha (~AliphaX@user/alipha)
[16:16:38] *** Joins: biberu (~biberu@user/biberu)
[16:16:38] *** Joins: koolazer (~koo@user/koolazer)
[16:16:44] *** Joins: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net)
[16:16:48] *** Joins: geeknix (~pi@2001:e68:5432:a8c4:1393:329d:a357:f118)
[16:16:49] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[16:16:50] *** Joins: miklcct (quasselcor@vps.miklcct.com)
[16:17:05] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[16:17:07] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[16:17:09] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:803d:824b:a45b:692b)
[16:17:11] *** Joins: mebus (~mebus@2a00:8a60:e019:10de::ac22)
[16:17:24] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:17:29] *** Joins: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se)
[16:18:33] *** Joins: Viewday11 (~Viewday@user/viewday)
[16:18:56] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:19:07] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[16:19:19] *** Joins: cncr04s (~cncr04s@afxr.net)
[16:19:23] *** Quits: e2 (e2@sponsored.by.bnc4you.xyz) (Ping timeout: 256 seconds)
[16:19:42] *** VShell is now known as Shell
[16:19:57] *** Quits: routeveg (~lee@197.ip-51-195-136.eu) (Ping timeout: 256 seconds)
[16:19:57] *** Quits: Latexi95 (late@banhammer.fi) (Ping timeout: 256 seconds)
[16:19:57] *** Quits: segnior_ (segnior@user/segnior) (Ping timeout: 256 seconds)
[16:19:57] *** Quits: Gamah_ (~quassel@gamah.net) (Ping timeout: 256 seconds)
[16:19:57] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 256 seconds)
[16:19:57] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Ping timeout: 256 seconds)
[16:20:31] *** Quits: veverak1 (~veverak@ip-89-102-98-161.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[16:20:31] *** Quits: [dubiago] (~dubiago@167.99.238.127) (Ping timeout: 256 seconds)
[16:20:31] *** Quits: ndorf_ (~nd@ob.noxio.us) (Ping timeout: 256 seconds)
[16:20:31] *** Quits: biberu\ (~biberu@user/biberu) (Ping timeout: 256 seconds)
[16:20:31] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[16:20:32] *** Joins: Gamah (~quassel@gamah.net)
[16:21:04] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[16:21:20] *** Joins: ndorf (~nd@ob.noxio.us)
[16:21:27] *** Joins: Latexi95 (late@banhammer.fi)
[16:21:33] *** Joins: routeveg (~lee@197.ip-51-195-136.eu)
[16:21:37] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[16:21:44] *** Joins: [dubiago] (~dubiago@167.99.238.127)
[16:22:01] *** Joins: veverak1 (~veverak@ip-89-102-98-161.net.upcbroadband.cz)
[16:22:22] *** tct_ is now known as tct
[16:25:14] *** Joins: e2 (e2@sponsored.by.bnc4you.xyz)
[16:25:16] *** Joins: segnior (segnior@user/segnior)
[16:27:23] <RokerHRO>  
[16:27:24] <RokerHRO>  [](auto...) { std::puts("Garbage unused variables... Done."); } (
[16:27:24] <RokerHRO>         s1, s2, s3, s4, ar, ab, cr, ar2d1, ar2d2, ar2d3, std_ar2, std_ar1, u1
[16:27:25] <RokerHRO>     );
[16:27:26] <RokerHRO>  
[16:27:31] <RokerHRO> interesting code.... :-D
[16:28:14] *** Joins: kit_ten (~u0_a391@64.85.173.130)
[16:28:38] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:29:53] <pa> what's the most efficient and lock free way to concurrently map a small set of ints (thread ids) to their index? example:  200, 1400, 2700, 10000 -> 0,1,2,3
[16:31:23] *** Joins: seninha (~seninha@user/seninha)
[16:31:37] *** Quits: kit-ten (~u0_a391@2600:380:a423:cdf9:589f:965d:28e0:cc4c) (Ping timeout: 268 seconds)
[16:31:44] *** kit_ten is now known as kit-ten
[16:32:40] <ville> pa: something very situation-specific. should learn not to ask questions that contain phrases like "the best" or similar
[16:34:04] <pa> ok, so let me rephrase: what's a lock-free, and possibly efficient, way to concurrently map a small set of thread ids to their incremental index?
[16:34:09] <anyone> if it's just 4 elements, you might find that most contemporary hardware would exhibit least lookup time with a linear search.
[16:34:43] <pa> anyone: i'm happy to linearly search, but i'd like to insert in a lock-free fashion
[16:35:05] <pa> if that's possible
[16:35:18] <anyone> thread ids on a bunch of systems fit into fundamental types, so... std::atomic<T>
[16:35:21] <pa> also to search lock-free
[16:35:37] *** Joins: Viewday114 (~Viewday@user/viewday)
[16:35:39] <anyone> it's not necessary lock-free, depending on how hard you look at hardware details, but ... details details
[16:36:49] <pa> std::atomic is good for one element, but how do i pool these values and search them concurrently?
[16:36:57] <anyone> operating system kernels use atomics/spinlocks in certain places exactly because that's faster than what most people would consider a "typical lock"
[16:37:26] <anyone> to search concurrently, just launch threads?
[16:37:44] <pa> what i mean is: lets say i know i'm gonna have 10 threads
[16:37:47] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 268 seconds)
[16:37:47] *** Viewday114 is now known as Viewday11
[16:38:02] <pa> i would like to create an array<something, 10> and let each thread write into its own bucket lock-free
[16:38:20] <pa> but to find the bucket i need to first index it somehow based on thethread id
[16:39:40] <anyone> thread_local int my_thread_index, then populate that as you spin up threads.
[16:40:10] <anyone> So now we've gone from "concurrent access" to "percpu variables"
[16:40:27] <pa> hmm, not sure that approach would fit
[16:40:31] <anyone> or rather, perthread. But a similar concept is percpu in e.g. linux
[16:40:56] <pa> also because i need to collect all this data in the end
[16:41:06] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[16:43:19] <anyone> in the end you can use a lock
[16:48:10] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Ping timeout: 250 seconds)
[16:51:09] *** Joins: karakedi (~eAC53C340@user/karakedi)
[16:51:41] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:52:59] <CarloWood> I ran into something really strange... I have a header with the following content: https://bpa.st/F34A   When I compile Application.cxx it #include's at line 2 #include "Application.h", which in turn at line 4 includes LogicalDevice.h etc; lets write that sequence as:
[16:53:03] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Read error: Connection reset by peer)
[16:53:58] <CarloWood> Application.cxx:2 -> Application.h:4 -> LogicalDevice.h:6 -> Swapchain.h:4 -> ImageKind.h:6 -> VULKAN_KIND_DEBUG_MEMBERS.h
[16:54:27] <CarloWood> If I add #warning "We get here" just before line 15 in VULKAN_KIND_DEBUG_MEMBERS.h, the compiler then prints:
[16:54:34] <CarloWood> VULKAN_KIND_DEBUG_MEMBERS.h:15:2: warning: "We get here" [-W#warnings]
[16:55:01] <CarloWood> But it continues, and then #include's from Application.h line 5:
[16:55:45] <CarloWood> Application.h:5 -> SynchronousWindow.h:15 ->  SamplerKind.h:53:3: error: unknown type name 'VULKAN_KIND_DEBUG_MEMBERS'
[16:56:06] <CarloWood> How is it possible that at this point this macro isn't defined?
[16:56:16] <PJBoy> is VULKAN_KIND_DEBUG_MEMBERS in parentheses?
[16:56:38] <CarloWood> Not sure what you mean - but the answer is no I think.
[16:56:44] <PJBoy> oh wait that's just for functional macros
[16:56:51] *** rpav_ is now known as rpav
[16:57:08] <CarloWood> https://gyazo.com/564202199aba77f8c6e262e13996c223
[16:57:36] <CarloWood> oh
[16:57:43] <CarloWood> sigh - thanks for the help :)
[16:57:50] <CarloWood> I see the #undef now :/ wtf.
[16:57:58] <PJBoy> oh hah
[16:58:00] <PJBoy> ggs
[16:58:48] *** Quits: xiongxin (~Thunderbi@119.123.100.216) (Quit: xiongxin)
[16:59:47] *** Joins: Viewday111 (~Viewday@user/viewday)
[16:59:58] *** Joins: N4buc0- (~N4buc0@177.40.2.111)
[17:00:09] <CarloWood> At first I was only using this macro in ImageKind.h - so it was defined there and undef-ed at the bottom. Then I wanted to use it also in SamplerKind.h - so I moved the define to its own header - but forgot to remove the undef's at the bottom of ImageKind.h.
[17:00:11] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[17:01:10] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[17:01:11] *** Viewday111 is now known as Viewday11
[17:01:26] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:fc6b:8b6c:d6d3:ec85) (Remote host closed the connection)
[17:06:15] <CarloWood> Something else... My SamplerKind class has as constructor:
[17:06:23] <CarloWood>   SamplerKind(LogicalDevice const* logical_device, SamplerKindPOD data);
[17:07:42] <CarloWood> Where the logical_device is passed in order to finalize the initialization of the constructed SamplerKind. This is only important when the constructed object isn't a temporary though. Most notably, when passing it to a method of LogicalDevice itself:
[17:08:30] <CarloWood> vk::UniqueSampler LogicalDevice::create_sampler(SamplerKind const& sampler_kind) const { ...
[17:09:05] <ville> CarloWood: make a testcase
[17:09:22] <CarloWood> where sampler_kind is just a temporary, then it seems silly to have to pass the logical_device to the temporary object too :/.
[17:09:30] *** Quits: AmR (~AmREiSa@41.36.185.103) (Read error: Connection reset by peer)
[17:10:54] <CarloWood> Aka, m_background_texture.m_sampler = m_logical_device->create_sampler({}); should work, instead of having to do: m_logical_device->create_sampler({logical_device, {}});
[17:11:21] <CarloWood> Not sure what a "test case" would add.
[17:12:38] <CarloWood> To make this work I have to add a new constructor for SamplerKind, but one that only wants to create temporary objects. Is that possible?
[17:14:36] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:17:48] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[17:18:28] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:20:22] <CarloWood> ville: https://wandbox.org/permlink/6PuMxCRiv3aku8mO
[17:21:23] <CarloWood> Unfortunately, this doesn't work
[17:21:25] <CarloWood> prog.cc:13:27: error: ref-qualifier '&&' is not allowed on a constructor
[17:21:25] <CarloWood>   ImageKind(ImageKindPOD) && { }
[17:22:22] <anyone> constructors don't care if they are going to be used with a temporary.
[17:23:55] *** Joins: clime (~clime@78-80-115-5.customers.tmcz.cz)
[17:24:27] <anyone> C++ does not allow you to forbid temporaries from gaining a name.
[17:25:38] <pa> what happens if i have thread_local static class members? would that translate into as many instances as threads?
[17:25:56] <CarloWood> I'll solve it like this: https://wandbox.org/permlink/jzvR8m8vob7X2gqt
[17:27:27] *** yano1 is now known as yano
[17:30:02] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-017.hsi5.kabel-badenwuerttemberg.de) (Ping timeout: 240 seconds)
[17:33:15] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:1619:ead6:822:30d1)
[17:33:40] <anyone> pa: just like any not-in-class thread_local.
[17:35:20] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[17:39:03] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Quit: leaving)
[17:39:24] *** Joins: caramel_ (~caramel@user/caramel)
[17:40:09] *** Joins: Goreng (~Goreng@202.138.250.57)
[17:40:39] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[17:41:13] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:21] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:21] *** ChanServ sets mode: +v npaperbot
[17:41:47] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a66001940bf45dafd7f77.ipv6.abo.wanadoo.fr)
[17:42:32] *** Quits: caramel (~caramel@user/caramel) (Ping timeout: 240 seconds)
[17:44:01] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:44:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:45:42] *** Quits: Goreng (~Goreng@202.138.250.57) (Quit: Leaving)
[17:45:57] *** Joins: Goreng (~Goreng@202.138.250.57)
[17:47:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Client Quit)
[17:48:21] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[17:51:11] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[17:51:57] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[17:52:30] *** Joins: gdd (~gdd@129.199.146.230)
[17:57:01] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[17:57:43] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[17:57:45] *** Joins: bebyx (~Thunderbi@user/bebyx)
[18:06:00] *** Joins: fivegruel (~fivegruel@HSI-KBW-095-208-248-017.hsi5.kabel-badenwuerttemberg.de)
[18:07:15] *** Joins: x_kuru (~xkuru@user/xkuru)
[18:10:17] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 268 seconds)
[18:10:23] *** Quits: Electron (~ElectronA@user/electronapps) (Remote host closed the connection)
[18:14:32] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:19:34] <RokerHRO> << module;
[18:19:34] <geordi> error: 'module' was not declared in this scope; did you mean 'modfl'? (fix known)
[18:19:42] <RokerHRO> *lol* :-D
[18:22:06] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:22:58] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:31:52] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 268 seconds)
[18:32:33] *** Joins: Dave_R (~Dave_R@88.97.61.234)
[18:32:49] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:33:56] *** Quits: Goreng (~Goreng@202.138.250.57) (Quit: Leaving)
[18:34:44] *** Joins: Goreng (~Goreng@202.138.250.1)
[18:35:40] *** Joins: Viewday117 (~Viewday@user/viewday)
[18:36:02] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 240 seconds)
[18:36:49] *** jaakkos_ is now known as jaakkos
[18:37:09] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:37:50] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:37:50] *** Viewday117 is now known as Viewday11
[18:41:09] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:42:50] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[18:43:43] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[18:44:50] <Alipha> pa: std::array<std::atomic<int>, 10>, initialize all the elements to -1, and then to add to the array, search for -1 and use https://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange ?
[18:45:08] *** Joins: icedtea (~paul@141.217.247.7)
[18:47:11] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[18:47:51] *** Quits: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[18:54:45] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[18:55:07] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[18:58:44] *** Joins: pulse (~pulse@user/pulse)
[18:59:47] *** Joins: Viewday111 (~Viewday@user/viewday)
[19:00:37] *** Joins: NEYi_ (~NEYi@109.251.216.38)
[19:01:30] *** Joins: ania123 (~ania123@94.137.173.75)
[19:01:38] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[19:01:38] *** Viewday111 is now known as Viewday11
[19:03:56] *** Quits: NEYi (~NEYi@109.251.216.38) (Ping timeout: 268 seconds)
[19:09:07] *** Quits: Perry (~perry@coffee-break.at) (Quit: ZNC - http://znc.in)
[19:09:29] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[19:09:52] *** Joins: Perry (~perry@coffee-break.at)
[19:14:30] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[19:14:45] <Franciman> hi, what's the difference between constexpr and consteval?
[19:14:51] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[19:15:47] *** Joins: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke)
[19:16:25] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[19:17:06] *** Joins: zunino (~zunino@2804:7f5:f380:9c7a:661:c192:8fac:73f4)
[19:18:05] <anyone> https://stackoverflow.com/questions/64395622/consteval-vs-constexpr-on-variables
[19:18:22] *** Joins: AmR (~AmREiSa@156.199.9.4)
[19:18:42] <Franciman> luls, thanks
[19:18:50] <Franciman> i am scared to ask about constinit
[19:18:51] <Franciman> xd
[19:19:06] *** Quits: dld (~davidlowr@2601:197:600:1210:aca6:8c80:35d5:4f3c) (Ping timeout: 245 seconds)
[19:20:24] *** Joins: dld (~davidlowr@2601:197:600:1210:88d:2354:617:54b5)
[19:20:54] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:21:06] <PJBoy> constinit is a keyword that specifies that a variable is initialised as part of initialisation of constants in program startup
[19:21:12] *** Joins: kit_ten (~u0_a391@2600:380:a423:cdf9:ef64:8e84:c22b:29b8)
[19:21:37] <Franciman> so it's the old «static const» made portable ?
[19:22:24] <PJBoy> static const stuff can be initialised as part of dynamic initialisation
[19:22:38] <PJBoy> this constant initialisation stuff happens before dynamic initialisation
[19:22:53] <PJBoy> and basically works out as a memcpy from the program image
[19:23:18] <PJBoy> the only requirement on a type for it to be used for a constinit variable is for it to have a constexpr constructor
[19:24:10] <anyone> not consteval constructor?
[19:24:18] *** Quits: kit-ten (~u0_a391@64.85.173.130) (Ping timeout: 256 seconds)
[19:24:25] <PJBoy> nah
[19:24:26] *** kit_ten is now known as kit-ten
[19:24:50] <PJBoy> consteval is the most useless one, if you think anything needs consteval, you're most likely wrong
[19:24:54] <anyone> {} struct S { constexpr S() : z(new int) {} int *z; }; constinit S s;
[19:24:54] <geordi> error: 'constinit' variable 's' does not have a constant initializer
[19:25:41] *** Quits: PureSine_ (~PureSine@109.162.192.146) (Quit: Leaving)
[19:25:56] <anyone> { S s; } struct S { constexpr S() : z(new int) {} int *z; };
[19:25:57] <geordi>  
[19:26:11] <anyone> So the requirement of constinit *is* a little stricter than "just" having a constexpr constructor
[19:26:20] <PJBoy> it needs to be constexpr constructible
[19:26:47] <PJBoy> your use of constexpr is fake constexpr
[19:27:50] <PJBoy> which is IFNDR
[19:28:37] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (Read error: Connection reset by peer)
[19:31:06] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[19:34:32] <Franciman> nuuuts
[19:34:33] <Franciman> thanks
[19:34:47] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (TURBOquit(TM) - the fastest way to get out of awkward situations)
[19:34:59] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:37:10] *** Quits: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f) (Ping timeout: 250 seconds)
[19:37:51] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 268 seconds)
[19:39:11] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[19:45:13] *** Quits: orthoplex64 (~crm@70.120.0.94) (Remote host closed the connection)
[19:45:38] *** Joins: orthoplex64 (~crm@70.120.0.94)
[19:47:54] *** Joins: kit_ten (~u0_a391@64.85.173.130)
[19:49:45] *** Joins: Tokamak (~Tokamak@172.58.188.238)
[19:51:17] *** Quits: kit-ten (~u0_a391@2600:380:a423:cdf9:ef64:8e84:c22b:29b8) (Ping timeout: 240 seconds)
[19:52:21] *** kit_ten is now known as Kit-ten
[19:55:08] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-017.hsi5.kabel-badenwuerttemberg.de) (Remote host closed the connection)
[19:57:14] *** Quits: zunino (~zunino@2804:7f5:f380:9c7a:661:c192:8fac:73f4) (Quit: WeeChat 3.0.1)
[20:00:57] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[20:04:58] *** Joins: aAnalogueSteamPu (~lw@5-203-199-29.pat.nym.cosmote.net)
[20:06:01] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[20:09:04] *** Parts: aAnalogueSteamPu (~lw@5-203-199-29.pat.nym.cosmote.net) ()
[20:10:56] *** Joins: Betal (~Betal@user/betal)
[20:11:58] *** Joins: laslmtdwbcs^ (~laslmtdwb@wsip-98-188-242-61.mc.at.cox.net)
[20:12:05] *** notevil_ is now known as NOTevil
[20:18:33] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:22:53] *** Joins: stonkey (~stonkey@user/stonkey)
[20:24:51] *** Joins: badone (~badone@209.132.189.152)
[20:25:48] *** Joins: gareppa (~gareppa@user/gareppa)
[20:25:51] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[20:26:59] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[20:28:43] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 256 seconds)
[20:31:59] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:33:05] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[20:33:21] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:803d:824b:a45b:692b) (Ping timeout: 268 seconds)
[20:34:09] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[20:34:10] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:36:05] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[20:36:57] *** Quits: clime (~clime@78-80-115-5.customers.tmcz.cz) (Ping timeout: 240 seconds)
[20:37:06] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:38:25] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:39:44] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[20:45:24] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[20:49:12] *** Joins: riebers (~riebers@185.107.25.45)
[20:49:21] *** Joins: rgrinberg (~textual@2806:101e:7:2b:e4cc:85d6:c1e8:8785)
[20:49:57] *** icedtea is now known as BobTheTomato
[20:50:52] *** dostoyev1ky2 is now known as dostoyevsky2
[20:52:27] *** Joins: clime (~clime@78-80-115-5.customers.tmcz.cz)
[20:53:55] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[20:54:28] *** Joins: stonkey (~stonkey@user/stonkey)
[21:00:27] *** Quits: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[21:02:36] *** Parts: keinbock (~pepsi@2a02:4780:1:1::1:a856) (WeeChat 1.9.1)
[21:05:09] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[21:07:26] *** Quits: Goreng (~Goreng@202.138.250.1) (Quit: Leaving)
[21:08:07] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[21:08:17] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[21:10:17] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[21:15:35] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[21:16:19] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[21:21:04] *** Joins: Xardas (~Xardas@149.233.51.127)
[21:21:27] *** Quits: Major_Biscuit (~MajorBisc@c-001-018-021.client.tudelft.eduvpn.nl) (Ping timeout: 268 seconds)
[21:24:53] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:28:52] *** Quits: NEYi_ (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[21:30:02] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[21:31:51] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[21:36:10] *** Quits: Figworm (FiggyWitIt@user/figworm) (Quit: Figworm)
[21:38:53] *** Quits: reset (~reset@user/reset) (Quit: reset)
[21:39:01] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[21:39:20] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[21:41:13] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:21] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:21] *** ChanServ sets mode: +v npaperbot
[21:48:31] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[21:52:31] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[21:55:05] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:bc04:150b:5ca9:e842)
[21:56:15] *** Quits: ania123 (~ania123@94.137.173.75) (Quit: Client closed)
[22:02:46] *** Quits: proller (~p@2a02:6b8:0:40c:159c:f811:f62c:1848) (Ping timeout: 268 seconds)
[22:02:47] *** Quits: furrymcgee (~devuan@cgn-89-1-208-165.nc.de) (Ping timeout: 256 seconds)
[22:03:32] *** Quits: jkaye (~jkaye@2601:281:200:1958:cc69:95b3:52f2:6773) (Ping timeout: 240 seconds)
[22:04:13] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:08:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:08:33] *** Joins: reset (~reset@user/reset)
[22:10:29] *** Parts: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Leaving)
[22:19:49] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[22:22:26] *** Quits: Tokamak (~Tokamak@172.58.188.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:24:05] *** Joins: Tokamak (~Tokamak@172.58.188.238)
[22:25:29] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[22:25:45] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[22:26:47] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[22:28:58] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[22:29:31] *** Quits: indy (~indy@dsl-static-104.213-160-167.telecom.sk) (Quit: ZNC 1.8.2 - https://znc.in)
[22:31:57] *** Joins: magla (~gelignite@55d4c25e.access.ecotel.net)
[22:33:09] *** Joins: vicfred (~vicfred@user/vicfred)
[22:36:31] *** Joins: Figworm (~inoor@user/figworm)
[22:36:54] *** Quits: Figworm (~inoor@user/figworm) (Client Quit)
[22:37:42] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:37:52] *** Quits: mixfix41 (~homefame@user/mixfix41) (Remote host closed the connection)
[22:37:55] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:38:51] *** Joins: Figworm (FiggyWitIt@user/figworm)
[22:40:23] *** veverak1 is now known as veverak
[22:41:19] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[22:44:55] *** Quits: Friithian (~gunqqer@friithian.dev) (Quit: Lost terminal)
[22:49:15] *** Quits: riebers (~riebers@185.107.25.45) (Ping timeout: 256 seconds)
[22:52:46] *** Joins: mixfix41 (~homefame@user/mixfix41)
[23:00:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d)
[23:00:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d) (Changing host)
[23:00:25] *** Joins: skapata (~Skapata@user/skapata)
[23:00:51] *** Joins: proller (~p@80.240.216.69)
[23:01:15] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[23:02:23] *** Joins: Friithian (~gunqqer@friithian.dev)
[23:02:46] *** Joins: constxd (~brad@142.167.170.88)
[23:02:50] <constxd> kings
[23:03:27] <Alipha> constxd: hi
[23:03:40] <constxd> hey king
[23:03:55] <BurumaSerafuku> thanks for crowning me
[23:04:15] * BurumaSerafuku is here to help his subjects
[23:04:34] <constxd> am i allowed to initialize a static member with a call to std::make_shared
[23:04:43] <constxd> oops
[23:04:48] <constxd> i mean std::make_pair lol
[23:05:01] <BurumaSerafuku> I think so
[23:05:16] <BurumaSerafuku> but make_pair is so old
[23:05:24] <BurumaSerafuku> no reason to use it anymore
[23:05:40] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[23:06:03] <BurumaSerafuku> {} struct X { static pair<int,int> y; }; X::y = make_pair(1,2);
[23:06:03] <geordi> error: 'y' in 'struct X' does not name a type
[23:06:16] <BurumaSerafuku> {} struct X { static pair<int,int> y; }; pair<int,int> X::y = make_pair(1,2);
[23:06:17] <geordi>  
[23:06:22] <BurumaSerafuku> see? it works
[23:06:23] <constxd> im getting a segfault as soon as i launch my program
[23:06:29] <BurumaSerafuku> !give constxd testcase
[23:06:31] <nolyc> constxd: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[23:06:44] <BurumaSerafuku> {} struct X { static pair<int,int> y; }; pair<int,int> X::y = {1,2};
[23:06:45] <geordi>  
[23:06:50] <BurumaSerafuku> see? no make_pair needed
[23:06:58] <rpav> constxd: early to rise and all that
[23:07:20] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[23:07:34] <BurumaSerafuku> constxd: I answered your question, but you have a problem elsewhere. w/o a testcase I don't see how to help further
[23:07:45] <BurumaSerafuku> next subject, please!
[23:08:07] <constxd> thank you king
[23:08:15] <BurumaSerafuku> now you bow
[23:10:45] * constxd bows
[23:11:45] <BurumaSerafuku> now you try to isolate your problem with a simple testcase :)
[23:12:04] <constxd> i figured it out
[23:12:17] <constxd> the problem was actually the argument to make_pair
[23:13:27] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[23:15:26] *** Joins: jkaye (~jkaye@2601:281:200:1958:837d:401b:4a0:3b8f)
[23:15:47] *** Joins: kit_ten (~u0_a391@64.85.173.130)
[23:16:09] *** Joins: kit_ (~u0_a391@2600:380:a423:cdf9:7700:5d00:9296:b2ac)
[23:17:21] <BurumaSerafuku> \o/
[23:19:28] *** Quits: Kit-ten (~u0_a391@64.85.173.130) (Ping timeout: 256 seconds)
[23:20:02] *** Quits: kit_ten (~u0_a391@64.85.173.130) (Ping timeout: 256 seconds)
[23:21:02] *** Joins: proller (~p@2a02:6b8:b081:12::1:2e)
[23:21:02] *** kit_ is now known as kit-ten
[23:22:24] *** Joins: NEYi (~NEYi@109.251.216.38)
[23:22:30] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Ping timeout: 250 seconds)
[23:24:10] *** Joins: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke)
[23:30:24] *** Joins: CaCode (~CaCode@user/cacode)
[23:31:44] <PJBoy> would recommend avoiding make_pair
[23:43:34] <Alipha> wasn't there some gotcha with make_pair and references?
[23:45:30] <PJBoy> the gotcha I have in mind is that it unwraps reference_wrapper
[23:45:41] <PJBoy> although that's arguably more of a reference_wrapper gotcha than a make_pair gotcha
[23:47:17] <jkaye> I only use make pair when it helps with type deduction
[23:47:27] <jkaye> Which is rare, but useful when it comes up
[23:50:37] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:51:55] *** PJBoy is now known as Guest8943
[23:51:55] *** Quits: Guest8943 (~PJBoy@user/pjboy) (Killed (lithium.libera.chat (Nickname regained by services)))
[23:51:59] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:52:08] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:52:52] *** anyone is now known as zz
[23:54:36] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
