[00:00:27] *** Quits: p-i- (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[00:01:12] *** Quits: re101-toucan-55 (~re101-tou@87.140.193.0) (Quit: Client closed)
[00:02:17] <VectorX> well given your example https://regex101.com/r/P0mc7I/2
[00:02:17] <jhj> i thought [w+][o+][r+][d+]
[00:02:28] <VectorX> close
[00:02:34] <jhj> Ah yes it works
[00:02:42] <jhj> VectorX thanks
[00:03:01] <VectorX> + out of the [] would work like []+ but the way I gave it is more straight forward
[00:07:10] *** Joins: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[00:08:13] *** Parts: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) ()
[00:09:03] *** Joins: re101-bear-18 (~re101-bea@2001:8003:e097:0:69df:59d9:79f1:3941)
[00:09:18] *** Joins: kuhilas (~kuhilas@2001:470:69fc:105::3040)
[00:11:29] <jhj> VectorX your regex works like a charm :) thanks for your interest
[00:12:25] <jhj> im very new to regex. its fun to learn
[00:13:48] *** Joins: lkhn (~lkhn@user/lkhn)
[00:16:46] *** Parts: jhj (~androirc@user/zibby15) (AndroIRC)
[00:20:15] *** Joins: nicoty (~nicoty@user/nicoty)
[00:25:26] *** Joins: re101-toucan-55 (~re101-tou@87.140.193.0)
[00:40:30] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[00:42:16] *** Joins: wyre (~wyre@user/wyre)
[00:45:49] *** Quits: re101-toucan-55 (~re101-tou@87.140.193.0) (Quit: Client closed)
[00:57:44] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[00:59:17] *** Quits: Muzer (~muzer@tim32.org) (Ping timeout: 240 seconds)
[01:00:03] *** Joins: psydroid (~psydroid@user/psydroid)
[01:01:35] *** Quits: dandyn (~dandyn@user/dandyn) (Quit: Client closed)
[01:04:14] *** Quits: re101-bear-18 (~re101-bea@2001:8003:e097:0:69df:59d9:79f1:3941) (Quit: Client closed)
[01:05:22] *** Quits: psydroid (~psydroid@user/psydroid) (Write error: Connection reset by peer)
[01:05:23] *** Quits: nicoty (~nicoty@user/nicoty) (Write error: Connection reset by peer)
[01:05:23] *** Quits: v1dl00fyuq6f[m] (~v1dl00fyu@2001:470:69fc:105::1:6a20) (Read error: Connection reset by peer)
[01:05:23] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Write error: Connection reset by peer)
[01:05:24] *** Quits: lkhn (~lkhn@user/lkhn) (Read error: Connection reset by peer)
[01:05:25] *** Quits: kuhilas (~kuhilas@2001:470:69fc:105::3040) (Write error: Connection reset by peer)
[01:05:25] *** Quits: mysticspiral[m] (~mysticspi@2001:470:69fc:105::1:58fe) (Read error: Connection reset by peer)
[01:08:21] *** Joins: spanwysm[m] (~spanwysm@2001:470:69fc:105::e0a)
[01:10:09] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[01:13:03] *** Joins: re101-fousek-4 (~re101-fou@188.233.238.86)
[01:13:16] *** Quits: re101-fousek-4 (~re101-fou@188.233.238.86) (Client Quit)
[01:25:24] *** Joins: imcdonald (imcdona@fsf/member/imcdona)
[01:25:46] *** Quits: z_lehinsun__ (~lehinsun@188.113.178.220) (Quit: Leaving)
[01:28:17] *** Quits: imcdona (imcdona@fsf/member/imcdona) (Ping timeout: 240 seconds)
[01:40:59] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[01:44:27] *** Joins: re101-eagle-41 (~re101-eag@117.248.10.76)
[01:44:42] *** Quits: re101-eagle-41 (~re101-eag@117.248.10.76) (Client Quit)
[01:46:15] *** Joins: psydroid (~psydroid@user/psydroid)
[01:46:15] *** Joins: lkhn (~lkhn@user/lkhn)
[01:46:15] *** Joins: kuhilas (~kuhilas@2001:470:69fc:105::3040)
[01:46:15] *** Joins: mysticspiral[m] (~mysticspi@2001:470:69fc:105::1:58fe)
[01:46:15] *** ChanServ sets mode: +v mysticspiral[m]
[01:46:15] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[01:46:15] *** Joins: v1dl00fyuq6f[m] (~v1dl00fyu@2001:470:69fc:105::1:6a20)
[01:46:15] *** Joins: nicoty (~nicoty@user/nicoty)
[01:46:16] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[01:47:05] *** Joins: mintoyatsu (~mint@user/mintoyatsu)
[01:48:17] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Read error: Connection reset by peer)
[01:49:12] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 250 seconds)
[01:51:05] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[01:51:05] *** ChanServ sets mode: +v perlbot
[01:52:34] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:54:07] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[01:54:10] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Excess Flood)
[01:56:57] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-84c7-c5bc-e6ff-e9b1.fixed6.kpn.net) (Ping timeout: 240 seconds)
[02:00:10] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[02:00:10] *** ChanServ sets mode: +v perlbot
[02:00:52] *** Joins: d1cor (~diego@179.63.242.122)
[02:07:15] *** Joins: Muzer (~muzer@tim32.org)
[02:15:59] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-54c9-38ea-4e4f-782b.fixed6.kpn.net)
[02:20:35] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-54c9-38ea-4e4f-782b.fixed6.kpn.net) (Ping timeout: 250 seconds)
[02:56:57] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[03:05:28] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 250 seconds)
[03:08:23] *** Joins: re101-tapir-14 (~re101-tap@2800:200:e480:172:3d9d:edae:3d0d:8b5)
[03:09:40] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:18:57] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 240 seconds)
[03:19:18] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Read error: Connection reset by peer)
[03:19:29] *** Joins: re101-pika-40 (~re101-pik@kof-gw.datatrans.hu)
[03:19:52] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[03:21:59] *** Quits: re101-pika-40 (~re101-pik@kof-gw.datatrans.hu) (Client Quit)
[03:25:53] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[03:26:23] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[03:26:23] *** ChanServ sets mode: +v perlbot
[03:29:06] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-31b9-8b45-fe4d-30de.fixed6.kpn.net)
[03:33:25] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-31b9-8b45-fe4d-30de.fixed6.kpn.net) (Ping timeout: 240 seconds)
[03:34:39] *** Quits: d1cor (~diego@179.63.242.122) (Ping timeout: 256 seconds)
[03:34:50] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[03:38:16] *** Quits: luva (~luva@37.120.197.54) (Ping timeout: 245 seconds)
[03:38:46] *** Joins: luva0 (~luva@37.120.197.45)
[03:57:08] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 252 seconds)
[04:17:45] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:34:01] *** Quits: maroon (tinycrypt@user/maroon) (Quit: Insanity: doing the same thing over and over again and expecting different results. --Albert Einstein)
[04:34:23] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-31b9-8b45-fe4d-30de.fixed6.kpn.net)
[04:39:10] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-31b9-8b45-fe4d-30de.fixed6.kpn.net) (Ping timeout: 260 seconds)
[04:40:57] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[04:42:37] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102) (Ping timeout: 240 seconds)
[04:48:11] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[04:52:24] *** Joins: maroon (tinycrypt@user/maroon)
[04:52:24] *** ChanServ sets mode: +v maroon
[04:57:25] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[05:04:52] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:06:00] *** Quits: lehinsun (~ttytwiste@188.113.176.117) (Quit: Leaving)
[05:14:58] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[05:17:03] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-f5a6-96e2-7ab5-ad00.fixed6.kpn.net)
[05:21:08] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:21:17] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-f5a6-96e2-7ab5-ad00.fixed6.kpn.net) (Ping timeout: 240 seconds)
[05:28:33] *** Quits: luva0 (~luva@37.120.197.45) (Ping timeout: 256 seconds)
[05:29:51] *** Joins: luva (~luva@45.141.152.46)
[05:30:21] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:32:17] *** Quits: maetthew (~maetthew@user/maetthew) (Quit: ZNC 1.8.2 - https://znc.in)
[05:32:31] *** Quits: Tips|Cloud (sid62231@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[05:33:25] *** Joins: vlm (~vlm@user/vlm)
[05:33:31] *** Joins: Tips|Cloud (sid62231@id-62231.ilkley.irccloud.com)
[05:34:53] *** Joins: maetthew (~maetthew@c188-150-159-232.bredband.tele2.se)
[05:34:53] *** Quits: maetthew (~maetthew@c188-150-159-232.bredband.tele2.se) (Changing host)
[05:34:53] *** Joins: maetthew (~maetthew@user/maetthew)
[05:42:23] *** Quits: stutz (~stutz@user/stutz) (Ping timeout: 256 seconds)
[05:46:28] *** Parts: mysticspiral[m] (~mysticspi@2001:470:69fc:105::1:58fe) ()
[05:46:56] *** Joins: mysticspiral[m] (~mysticspi@2001:470:69fc:105::1:58fe)
[05:46:56] *** ChanServ sets mode: +v mysticspiral[m]
[05:48:56] *** Joins: stutz (~stutz@p5dd4700d.dip0.t-ipconnect.de)
[05:48:56] *** Quits: stutz (~stutz@p5dd4700d.dip0.t-ipconnect.de) (Changing host)
[05:48:56] *** Joins: stutz (~stutz@user/stutz)
[05:53:18] *** Joins: re101-cat-21 (~re101-cat@113.98.246.226)
[05:54:15] *** Quits: re101-cat-21 (~re101-cat@113.98.246.226) (Client Quit)
[05:56:53] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[05:59:37] *** Quits: r00tb0y (r00tb0y@p4fed4751.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[05:59:52] *** Joins: r00tb0y (r00tb0y@p4fed47f4.dip0.t-ipconnect.de)
[06:01:05] *** Quits: src (~src@user/src) (Ping timeout: 256 seconds)
[06:18:09] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:20:13] *** Joins: ahmedelgabri (~ahmedelga@77-164-236-89.fixed.kpn.net)
[06:27:29] *** Quits: ahmedelgabri (~ahmedelga@77-164-236-89.fixed.kpn.net) (Ping timeout: 256 seconds)
[06:55:46] *** Joins: adeliktas3 (~adeliktas@i59F5F474.versanet.de)
[06:56:57] *** Quits: adeliktas (~adeliktas@i59F5F08B.versanet.de) (Ping timeout: 240 seconds)
[06:56:57] *** adeliktas3 is now known as adeliktas
[06:57:00] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[07:05:54] *** Quits: p-i-_ (~Ohmu@183.89.35.200) (Read error: Connection reset by peer)
[07:06:34] *** Joins: p-i- (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th)
[07:09:02] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[07:18:13] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[07:22:03] *** Joins: lord_daemon (~lord_daem@187.36.203.244)
[07:22:05] <lord_daemon> :}
[07:22:24] <lord_daemon> um dos assuntos q eu mais gosto
[07:22:32] <lord_daemon> mas tenho muito a aprender
[07:22:33] <lord_daemon> ^^
[07:42:23] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-b5a7-78be-d695-ea86.fixed6.kpn.net)
[07:46:41] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-b5a7-78be-d695-ea86.fixed6.kpn.net) (Ping timeout: 250 seconds)
[07:56:47] *** Joins: re101-zebu-91 (~re101-zeb@ec2-13-233-52-63.ap-south-1.compute.amazonaws.com)
[07:58:00] <re101-zebu-91> Hi, i need to add the field values to find the total in onboarding 1.0 SAP sfsf. What would be the regx for this?
[08:21:46] *** Quits: re101-tapir-14 (~re101-tap@2800:200:e480:172:3d9d:edae:3d0d:8b5) (Quit: Client closed)
[08:37:53] *** Quits: re101-zebu-91 (~re101-zeb@ec2-13-233-52-63.ap-south-1.compute.amazonaws.com) (Quit: Client closed)
[08:56:43] *** Quits: lord_daemon (~lord_daem@187.36.203.244) (Quit: mimiu)
[09:18:49] *** Joins: minto (~mintograd@47.201.5.61)
[09:21:47] *** Quits: mintograde (~mintograd@47.201.5.61) (Ping timeout: 250 seconds)
[09:40:57] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[09:55:20] *** Joins: lavaball (felix@31.204.155.215)
[10:01:04] *** Joins: re101-wrasse-93 (~re101-wra@103.144.149.126)
[10:01:11] <re101-wrasse-93> anyone
[10:01:13] <re101-wrasse-93> ?
[10:19:37] *** Quits: znf (ibm86@blender.linge-ma.ro) (Excess Flood)
[10:19:51] *** Joins: znf (ibm86@2001:19f0:5001:3600:5400:3ff:fecd:9ee5)
[10:23:56] <purplex> a dot (.) for any single character!
[10:24:41] *** Quits: re101-wrasse-93 (~re101-wra@103.144.149.126) (Quit: Client closed)
[10:34:59] <p-i-> How to match a number that might be 123 or 45.6 or 16,300? There might be a '.' after the number, e.g. "Price is $43,500."
[10:38:31] <p-i-> gottit! \b\d+(?:[\.\,]\d+)?\b
[10:40:54] <p-i-> https://bpa.st/Y2VQ <-- I'm trying to use regex (not re) in Python to match numbers in a string. What am I doing wrong? 
[10:43:57] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[10:46:09] *** Joins: ahmedelgabri (~ahmedelga@77-164-236-89.fixed.kpn.net)
[10:48:55] *** Joins: re101-saola-49 (~re101-sao@155.190.51.7)
[10:48:58] <re101-saola-49> hi
[10:49:19] <re101-saola-49> how to extract any highlited text from a word doc?
[10:49:45] *** Quits: re101-saola-49 (~re101-sao@155.190.51.7) (Client Quit)
[11:07:53] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[11:22:37] <digitok> 07p-i-, (?&Number)
[11:30:31] <p-i-> digitok: still no output
[11:31:07] <p-i-> ah gottit
[11:31:13] <p-i-> I shouldn't have escaped the ,
[11:31:27] <p-i-> It's not a regex keyword
[11:34:56] *** Quits: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:36:41] <digitok> i would not have thought that would prevent a match
[11:37:07] <digitok> fwiw, you can also omit the escape on . when it is inside []
[11:40:31] *** Joins: palasso (~palasso@user/palasso)
[11:44:49] *** Joins: domtilson (~domtilson@2001:9e8:e178:e00:185b:45e8:519:4b33)
[11:54:05] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[11:57:34] <domtilson> Hi all! I pretty new to regex.
[11:57:34] <domtilson> I have two different kind of URLs and want to check whether the URL ends with a number.jpeg or characters.jpeg. How can I do this most efficiently ?
[11:57:35] <domtilson> Example URLs:
[11:57:35] <domtilson> https://x1y2z3.cloudfront.net/out/pictures/master/product/1/10101.jpeg
[11:57:36] <domtilson> https://x1y2z3.cloudfront.net/out/pictures/master/product/1/toner-black.jpeg
[11:57:36] *** rebot sets mode: +q domtilson!*@*
[11:57:37] <rebot> 14domtilson: For regex help, please share a https://regex101.com/ link. To share other data, see !paste. You will be unmuted in 30s.
[11:58:06] *** rebot sets mode: -q domtilson!*@*
[12:00:03] <domtilson> Hi all! I pretty new to regex.
[12:00:03] <domtilson> I have two different kind of URLs and want to check whether the URL ends with a number.jpeg or characters.jpeg. How can I do this most efficiently ?
[12:00:04] <domtilson> Example URLs:
[12:00:04] <domtilson> https:// x1y2z3.cloudfront.net/out/pictures/master/product/1/10101.jpeg
[12:00:05] <domtilson> https:// x1y2z3.cloudfront.net/out/pictures/master/product/1/toner-black.jpeg
[12:00:05] *** rebot sets mode: +q domtilson!*@*
[12:00:06] <rebot> 14domtilson: For regex help, please share a https://regex101.com/ link. To share other data, see !paste. You will be unmuted in 30s.
[12:00:35] *** rebot sets mode: -q domtilson!*@*
[12:03:53] <domtilson> !paste
[12:03:54] <perlbot> Please use https://bpa.st/ for sharing large amounts of code/data, or https://ideone.com/ to share an executable code sample.
[12:04:53] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[12:08:08] <mysticspiral[m]> something like this? https://regex101.com/r/38pdU4/1
[12:09:37] *** Joins: monoxane5 (~monoxane@user/monoxane)
[12:10:57] *** Quits: monoxane (~monoxane@user/monoxane) (Ping timeout: 240 seconds)
[12:10:57] *** monoxane5 is now known as monoxane
[12:12:54] *** Quits: JohnDoe1 (~johndoe1@184-091-099-189.res.spectrum.com) (Remote host closed the connection)
[12:24:15] <domtilson> That looks great, thank you!
[12:24:55] <mysticspiral[m]> note that if you use / as delimiter that you need to escape it /
[12:25:03] <mysticspiral[m]> \/
[12:27:28] <domtilson> yeah, that makes sense! thank you :)
[12:38:01] <p-i-> I'm trying to scrape the values from a trading-signal. Here's my current Python implementation, and an example signal: https://bpa.st/5QZQ
[12:38:42] <p-i-> It works. However, I'm going to have to repeat the work for a boatload of different signals providers, so I'd like to try to get this one clean before moving on to others.
[12:39:19] <p-i-> In fact, some of them are really scrappy, clearly handwritten without any template / data-validation.
[12:40:07] <p-i-> Can anyone help me get an orientation on a good-engineering way to approach this?
[12:40:59] <domtilson> Hey, it is me again ;)  can someone tell me how I have to change the regex so that it works in python?
[12:40:59] <domtilson> https://regex101.com/r/38pdU4/1
[12:41:53] <p-i-> domtilson: Are you pulling out multiple links from a single string?
[12:42:25] <p-i-> re.findall(r'...pattern...', src_string) returns a list of matches
[12:42:50] <mysticspiral[m]> domtilson: https://regex101.com/r/38pdU4/2
[12:45:38] <domtilson> Thank you a lot for the quick help!
[12:46:41] <p-i-> https://bpa.st/KERQ <-- tidied up the paste
[12:51:46] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:7465:4c52:7351:b51c)
[12:53:21] *** Quits: domtilson (~domtilson@2001:9e8:e178:e00:185b:45e8:519:4b33) (Quit: Client closed)
[13:03:57] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:13:03] *** Joins: f00 (~timm@user/timm)
[13:18:50] *** Joins: re101-dugong-53 (~re101-dug@2a02:26f7:d6c0:4000:41a:38fa:689:a167)
[13:19:21] *** Quits: re101-dugong-53 (~re101-dug@2a02:26f7:d6c0:4000:41a:38fa:689:a167) (Client Quit)
[13:23:39] *** Quits: f00 (~timm@user/timm) (Remote host closed the connection)
[13:24:00] *** Joins: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net)
[13:24:07] *** Joins: timm (~timm@user/timm)
[13:33:05] <mysticspiral[m]> > Can anyone help me get an orientation on a good-engineering way to approach this?
[13:33:05] <mysticspiral[m]> quit doing that and use a machine readable data source. if not available, weep
[13:56:59] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Remote host closed the connection)
[14:02:18] * p-i- weeps
[14:03:08] <p-i-> I'm almost tempted to offer a service to these providers that lets them enter their signals into a webpage and validates the data, producing a text-string they can copy/paste
[14:05:59] *** Quits: timm (~timm@user/timm) (Ping timeout: 252 seconds)
[14:14:21] *** Joins: lavaball (felix@31.204.155.215)
[14:53:41] <p-i-> Can anyone help me get this working? https://regex101.com/r/Xhc0cE/1
[14:58:09] *** Joins: timm (~timm@user/timm)
[14:59:16] <p-i-> https://regex101.com/r/Xhc0cE/2
[15:12:45] <digitok> how strict is the spacing
[15:13:07] <p-i-> https://regex101.com/r/Xhc0cE/3 ... I realized I can't whitespace in my regex
[15:13:31] <p-i-> I'm stuck with pulling a list e.g. '(foo, bar, quux)'
[15:14:33] <digitok> how strict is the spacing
[15:17:15] <p-i-> Unfortunately I can't rely on it
[15:17:41] <p-i-> These things seem to be handwritten, so I have to err on the side of leniency
[15:18:37] <p-i-> I was trying to copy some regex from OnlineCop where he seems to be able to whitespace the regex, making it look clean
[15:18:44] <p-i-> But I can't make it work
[15:19:03] <digitok> it requires the /x flag
[15:19:38] <p-i-> I don't see that flag in his regexp
[15:19:58] <digitok> i cannot see his regex :)
[15:20:10] <p-i-> ah I got it!
[15:20:19] <p-i-> regex101 so nice!
[15:24:08] *** Joins: JohnDoe1 (~johndoe1@184-091-099-189.res.spectrum.com)
[15:29:00] <digitok> 07, https://regex101.com/r/Xhc0cE/4
[15:29:04] <digitok> p-i-: https://regex101.com/r/Xhc0cE/4
[15:29:30] <p-i-> wow
[15:29:31] <digitok> groups 3 and 10 will require further processing
[15:31:12] <p-i-> That's so clean!
[15:39:38] *** Quits: ryu` (~ryu`@user/ryu/x-3206151) (Quit: ZNC 1.8.2 - https://znc.in)
[15:40:01] <p-i-> ((?:Target\s*\d+ \W*(?&n)\W*)+) ?: marks "non-capturing group", but it does capture
[15:40:40] *** Joins: d1cor (~diego@179.63.242.122)
[15:41:13] *** Joins: ryu` (~ryu`@user/ryu/x-3206151)
[15:58:13] <digitok> the outer group captures
[15:58:35] <digitok> the inner group is repeated with +
[15:59:05] <p-i-> Is there a way to pull out just that ?&n for every pass?
[15:59:48] <p-i-> Or do I need a second level or regex on the result?
[15:59:58] <digitok> correct
[16:00:07] <digitok> and the same for group 3
[16:00:42] <p-i-> I see, OnlineCop was telling me about this approach yesterday
[16:00:45] <digitok> the only language that allows you to do what you describe is .NET regex
[16:01:04] <digitok> it will stack quantified captures
[16:01:15] <digitok> all other languages overwrite them on each repetition
[16:01:32] <mysticspiral[m]> i wonder why
[16:02:11] <mysticspiral[m]> would be very useful to have
[16:09:33] <p-i-> Any ideas why `u = regex.findall(pattern, s, regex.X | regex.I | regex.M)` returns an empty list?
[16:10:01] <p-i-> I've copied that pattern into an R-string
[16:10:14] <p-i-> And I'm running it over the same text
[16:10:25] <p-i-> (I'm in Python)
[16:19:21] <purplex> | is bitwise OR, probably not what you want
[16:20:06] <purplex> put it inside a string, currently | is interpreted as a python's operator (not regex)
[16:20:37] <digitok> not sure. seems like it should work given those parameters
[16:20:50] <digitok> 50purplex, is that not how you apply flags in python?
[16:20:59] <digitok> i believe it is
[16:21:35] <digitok> matches = re.finditer(regex, test_str, re.MULTILINE | re.IGNORECASE | re.VERBOSE | re.DOTALL)
[16:21:37] <digitok> from re101
[16:21:54] <digitok> the .X etc is the shorthand alternative to those
[16:22:52] <purplex> yes, but its third argument
[16:23:00] <purplex> wait, it is third :p
[16:24:12] <digitok> :>
[16:24:28] <purplex> regex.MULTILINE still exists
[16:24:36] <purplex> that regex.M seemed strange
[16:28:14] <p-i-> I'm looking through https://github.com/mrabarnett/mrab-regex which is the Python regex module I'm using
[16:30:25] <purplex> you're not using 'regex' from pypy?
[16:30:30] <p-i-> Thanks digitok, now I'm getting something
[16:30:46] <digitok> what did you chnage
[16:30:48] <digitok> what did you change
[16:31:01] <p-i-> I just used your line
[16:31:03] <p-i-> <_regex.Scanner object at 0x7f8056d575d0>
[16:31:18] <p-i-> ^ That's the object I get back, now I just need to figure out how to get the values out of it
[16:32:56] <purplex> how did you use it?
[16:34:39] <purplex> object doesn't mean something was matched, anyway
[16:35:10] <purplex> its just an iterator..
[16:36:52] <p-i-> Yes, I don't yet know if it actually worked
[16:36:55] *** Quits: Tobbi_ (~Thunderbi@31.209.188.226) (Quit: Tobbi_)
[16:37:24] <p-i-> If I change 'finditer' to 'findall' it returns an empty list
[16:37:42] <purplex> can you paste your python code, i might test it
[16:38:03] <p-i-> https://bpa.st/SISA
[16:38:20] <p-i-> I needed `pip install regex` and `import regex`
[16:39:11] *** Joins: Tobbi_ (~Thunderbi@31.209.188.226)
[16:39:37] <purplex> yes
[16:40:50] <purplex> interesting how an emoji is part of pattern
[16:42:12] <purplex> triple quotes for 's' assignment?, that seems like a problem
[16:42:48] <purplex> usually ''' triple quotes is a multi line comment
[16:43:34] <p-i-> It's 'multiline string' actually. I think it's used for comments as a string in python is valid syntax.
[16:43:39] <p-i-> It just does nothing.
[16:44:53] <purplex> you're right, i don't stylize my strings like this too often
[16:47:18] <purplex> does it work on regex101?
[16:47:48] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:7465:4c52:7351:b51c) (Remote host closed the connection)
[16:48:11] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102)
[16:49:09] <p-i-> Got it!
[16:49:25] <p-i-> You're right. The unicode messes it up.
[16:49:35] *** Joins: re101-duck-21 (~re101-duc@207.171.224.199)
[16:50:04] <purplex> the regex works, i think its encoding of string?
[16:50:51] <p-i-> I think the regex is seeing the hex-bytes of the unicode chars as letters/numbers
[16:52:54] <digitok> are you using python2?
[16:53:01] <p-i-> hell no
[16:53:10] <digitok> :>
[16:53:29] *** Quits: Timvde (~tim@towely.vdeynde.com) (Remote host closed the connection)
[16:57:45] <p-i-> regex.findall(r'\d.*?(\d)', '1 ⬆️ 2') -> '2'
[16:58:07] <p-i-> regex.findall(r'\w.*?(\w)', 'a ⬆️ b') -> ''
[16:58:21] <p-i-> This is the problem
[17:00:54] <purplex> if you want to do it the right way, you'll need to add hex codes for those emoji things
[17:02:25] <purplex> i never / very rarely seen literally inserting emoji's into code
[17:04:03] <p-i-> It works with python's re
[17:04:05] <p-i-> just not regex
[17:04:08] <p-i-> I'm filing an issue
[17:09:42] *** Joins: Timvde (~tim@towely.vdeynde.com)
[17:09:42] *** ChanServ sets mode: +v Timvde
[17:11:40] <p-i-> https://github.com/mrabarnett/mrab-regex/issues/451 filed!
[17:12:22] <digitok> is that the same as pypi regex? or different
[17:13:43] <purplex> it seems same they just called it mrab (author) - regex
[17:16:19] <p-i-> Actually I don't know what regex `pip install regex` installs.
[17:16:26] <p-i-> It's an awkward google
[17:16:36] <p-i-> a bit like the 'processing' language
[17:17:07] <p-i-> which I think never got traction because people couldn't google answers to basic questions.
[17:17:27] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[17:18:50] <digitok> !py
[17:18:50] <perlbot> Python regex module: https://pypi.org/project/regex/ | Online compiler: https://www.online-python.com/	
[17:19:06] <digitok> pip installs that
[17:19:22] <digitok> so yea, i would say it is different
[17:19:25] <digitok> use that one
[17:20:34] <p-i-> yeah it's correct
[17:20:52] <p-i-> I filed an issue on the correct repo
[17:21:19] <purplex> link from pypy points to same repository in github
[17:21:45] <digitok> ah, indeed
[17:25:24] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:28:19] *** Joins: txtsd (~txtsd@user/txtsd)
[17:30:32] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[17:31:22] *** Joins: cebor (~cebor@user/cebor)
[17:34:01] <purplex> this will work as expected https://bpa.st/FF5Q
[17:35:21] <purplex> i am curious about direct use of emojis
[17:45:20] <purplex> p-i-: is this one https://unicode-table.com/en/2B06/ ?
[17:45:34] *** Quits: timm (~timm@user/timm) (Ping timeout: 250 seconds)
[17:46:49] <purplex> if so then bytes should be E2 AC 86 but when i enter your emoji directly it gives 6 bytes: E2 AC 86 EF B8 8F
[17:47:07] <p-i-> purplex: Would you care to comment on this issue?
[17:47:14] <p-i-> (or I could...)
[17:47:45] <purplex> it doesn't seem like regex issue
[17:48:29] <p-i-> well the testcase works on re but fails on regex
[17:48:44] <purplex> as if somewhere encoding is goes wrong, i want you to tell me the character, is it  https://unicode-table.com/en/2B06/ ?
[17:51:26] <p-i-> ⬆️
[17:51:54] *** Joins: Alex16 (~Alex@91.234.186.35)
[17:51:58] <Alex16> Hello :)
[17:53:55] <Alex16> how i must configure regex for polish lang? example [a-zA-Z]{2,} with ąĄłŁŚśĆćĘęÓóŻż
[17:54:04] <purplex> then its definitely that one
[17:55:16] <purplex> see how bytes are different: https://bpa.st/LIUA doesn't it surprise you?
[17:56:04] <mysticspiral[m]> @Alex16:libera.chat: just include the characters in the class [a-zA-ZąĄłŁŚśĆćĘęÓóŻż]
[17:57:21] <Alex16> how to do it universally, so as not to enter all the characters manually ?  :)
[17:57:48] <Alex16> I can make a mistake and forget to enter some unique characters for the Polish language
[17:58:15] *** Quits: luva (~luva@45.141.152.46) (Ping timeout: 256 seconds)
[17:58:49] *** Quits: re101-duck-21 (~re101-duc@207.171.224.199) (Ping timeout: 256 seconds)
[17:59:19] <Timvde> Alex16: I don't know it by heart, but have a look at https://www.regular-expressions.info/unicode.html
[17:59:26] *** Joins: luva (~luva@146.70.62.254)
[17:59:53] <Timvde> (Specifically the categories part)
[18:01:03] <mysticspiral[m]> Alex16: just do it right once, then copy paste
[18:02:33] <mysticspiral[m]> https://en.wikipedia.org/wiki/Polish_alphabet
[18:03:26] <Alex16> thank you
[18:03:47] <Alex16> Ą ą Ć ć Ę ę Ł ł Ń ń Ó ó Ś ś Ź ź Ż ż
[18:03:50] <Alex16> ;)
[18:07:59] <Alex16> [A-Za-zĄąĆćĘęŁłŃńÓóŚśŹźŻż]{2,}
[18:08:05] <Alex16> (y)
[18:24:56] *** Quits: Alex16 (~Alex@91.234.186.35) (Quit: Client closed)
[18:27:10] <p-i-> Thankyou everyone who got me there, I have it working now! https://bpa.st/MVZA
[18:35:53] <p-i-> Why won't (w+)\/[USDT|USD(T)] extract FOO from FOO/USD(T)?
[18:36:33] <p-i-> (w+)\/USDT extracts FOO from FOO/USDT
[18:36:55] <mysticspiral[m]> use (?:USDT|USD(T)) not [USDT|USD(T)]
[18:37:47] <purplex> im away for a bit but i'll recheck the regex issue, stay online 
[18:38:45] <mysticspiral[m]> forgot the escape: (?:USDT|USD\(T\))
[18:39:37] *** Quits: luva (~luva@146.70.62.254) (Ping timeout: 256 seconds)
[18:40:04] <p-i-> hm still no match (\d+)\/(?:USDT|USD\(T\))
[18:40:49] <p-i-> https://regex101.com/r/BjlO5o/1
[18:40:54] *** Joins: luva (~luva@146.70.62.236)
[18:40:59] <mysticspiral[m]> \d+ matches digits only
[18:41:18] <p-i-> DOH
[18:41:23] <p-i-> ok gottit
[18:42:24] <p-i-> There's one puzzling thing about this https://bpa.st/MVZA ... it's getting an extra '' match at the end.
[18:43:22] *** Quits: d1cor (~diego@179.63.242.122) (Ping timeout: 260 seconds)
[18:43:38] <mysticspiral[m]> can you reproduce in re101? i wouldnt want to look into python code now
[18:49:23] *** Joins: fandre1986 (~fandre198@181.29.33.88)
[18:50:48] *** Joins: ArHu (~ArHu@93.188.146.77.rev.sfr.net)
[18:51:02] <ArHu> Hello Dear
[18:51:23] <ArHu> I am a littel bit new on this chat
[18:51:37] <ArHu> mays I request some tips  ?
[18:52:19] <VectorX> ArHu you can ask your question and if someone knows the answer you might get a reply
[18:52:41] *** Quits: callq (~callq@2409:4062:2d8d:345f:158c:2117:eab6:8c14) (Quit: callq)
[18:53:05] <ArHu> thanks
[18:53:34] <ArHu> I have some string on many line:
[18:53:35] <ArHu> B1: Aextraire1a
[18:53:35] <ArHu> Aextraire1b
[18:53:36] <ArHu> Aextraire1c
[18:53:36] <ArHu> E1: qflkqsdfqskdgnk
[18:53:37] <ArHu> qfqfqf
[18:53:37] *** rebot sets mode: +q ArHu!*@*
[18:53:38] <rebot> 14ArHu: For regex help, please share a https://regex101.com/ link. To share other data, see !paste. You will be unmuted in 30s.
[18:54:07] *** rebot sets mode: -q ArHu!*@*
[18:54:07] *** Quits: luva (~luva@146.70.62.236) (Ping timeout: 256 seconds)
[18:54:07] <ArHu> I need to extract between B1 et E1 all line
[18:54:32] <ArHu> I just succeed to capture: Aextraire1a
[18:54:32] <ArHu> Aextraire1b
[18:54:33] <ArHu> Aextraire1c
[18:54:33] <ArHu> E1: qflkqsdfqskdgnk
[18:54:34] <ArHu> qfqfqf
[18:54:34] *** rebot sets mode: +q ArHu!*@*
[18:54:35] <rebot> 14ArHu: For regex help, please share a https://regex101.com/ link. To share other data, see !paste. You will be unmuted in 30s.
[18:55:04] *** rebot sets mode: -q ArHu!*@*
[18:55:50] *** Joins: luva4 (~luva@37.120.197.46)
[18:59:27] *** luva4 is now known as luva
[19:02:47] *** Joins: p-i-_ (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th)
[19:06:15] *** Quits: p-i- (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[19:07:43] <Bayes> superfluous questions but... when you store a regular expression on a variable in whatever your favorite language is, is there a convention you use to name such variable?
[19:08:37] <Bayes> regex101 code generator uses regex or re
[19:08:49] <purplex> p-i-_: its way \w works, it seems match nothing but those are "\xe2\xac\x86" bytes
[19:09:24] <purplex> you are using it with lazy *? so matches a part of bytes from your emoji
[19:09:42] <purplex> regex is correct, no issues.
[19:10:05] *** Joins: re101-tetra-81 (~re101-tet@2a02:2788:102a:121d:305a:8fd5:2ce3:12a4)
[19:10:24] *** Quits: re101-tetra-81 (~re101-tet@2a02:2788:102a:121d:305a:8fd5:2ce3:12a4) (Client Quit)
[19:10:31] <VectorX> Bayes keep it simple re work
[19:10:33] <VectorX> s
[19:10:56] *** Quits: luva (~luva@37.120.197.46) (Ping timeout: 250 seconds)
[19:11:22] <purplex> lets my test https://bpa.st/FGGA
[19:11:25] <Bayes> VectorX what if you have, say, two res close in code?
[19:12:14] <purplex> s\lets\here's
[19:12:17] *** Joins: luva (~luva@37.120.197.46)
[19:12:20] <purplex> lol
[19:12:36] <purplex> nvm
[19:12:40] <VectorX> Bayes its just a variable name, name them what ever you want
[19:13:06] *** Quits: lavaball (felix@31.204.155.215) (Ping timeout: 250 seconds)
[19:13:51] <purplex> just note that meaning of \w changes depending on regex flavor
[19:14:37] <VectorX> if it's single in a function etc, re would be less typing and generally descriptive, if you have multiple attach something to the string like re_name, regex_name etc if you are validating a name
[19:15:34] *** Joins: lavaball (felix@31.204.155.215)
[19:17:58] *** Joins: re101-gar-97 (~re101-gar@138.134.102.83)
[19:26:57] *** Quits: luva (~luva@37.120.197.46) (Ping timeout: 240 seconds)
[19:27:35] *** Joins: luva (~luva@37.120.197.52)
[19:28:32] <Bayes> yeah that's the kind of convention I'm using and so I was wondering how other people do it
[19:28:54] <Bayes> in my case I typically stick to camelCase variable names, and attach the "type" of variable at the end
[19:29:10] <Bayes> so fileRe, nameRe, propRe, etc
[19:32:22] *** Quits: re101-gar-97 (~re101-gar@138.134.102.83) (Quit: Client closed)
[19:36:03] *** Quits: luva (~luva@37.120.197.52) (Ping timeout: 256 seconds)
[19:53:05] *** Quits: fandre1986 (~fandre198@181.29.33.88) (Quit: Connection closed)
[20:18:33] *** Quits: ahmedelgabri (~ahmedelga@77-164-236-89.fixed.kpn.net) (Ping timeout: 256 seconds)
[20:19:09] <ArHu> the lazy *? work well
[20:19:11] <ArHu> thanks
[20:22:41] <purplex> does it? i think i missed it. do you have a regex link?
[20:22:56] *** Quits: ToAruShiroiNeko (~eva@178.249-241-81.adsl-static.isp.belgacom.be) ()
[20:25:48] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net)
[20:27:24] *** Joins: ToAruShiroiNeko (~eva@user/toarushiroineko)
[20:28:11] *** Quits: r00tb0y (r00tb0y@p4fed47f4.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[20:28:47] *** Joins: r00tb0y (r00tb0y@p4fed50ac.dip0.t-ipconnect.de)
[20:30:26] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net) (Ping timeout: 252 seconds)
[20:39:46] *** Quits: r00tb0y (r00tb0y@p4fed50ac.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[20:40:14] *** Joins: r00tb0y (r00tb0y@p57b5692f.dip0.t-ipconnect.de)
[20:40:54] *** Joins: re101-owl-14 (~re101-owl@p200300ed1f01cf001c23b8b56aa7e598.dip0.t-ipconnect.de)
[20:41:27] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net)
[20:41:36] *** Quits: re101-owl-14 (~re101-owl@p200300ed1f01cf001c23b8b56aa7e598.dip0.t-ipconnect.de) (Client Quit)
[20:43:30] *** Joins: lord_daemon (~lord_daem@187.36.203.244)
[20:43:37] *** Quits: ArHu (~ArHu@93.188.146.77.rev.sfr.net) (Quit: Client closed)
[20:51:17] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (Quit: issued !quit command)
[20:56:37] *** Quits: ttys000 (~ttys000@user/ttys000) (Ping timeout: 240 seconds)
[20:56:51] *** Joins: d1cor (~diego@179.63.242.122)
[21:01:09] *** Joins: luva (~luva@185.168.9.236)
[21:05:34] *** Joins: ttys000 (~ttys000@user/ttys000)
[21:06:15] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[21:27:25] *** Quits: luva (~luva@185.168.9.236) (Ping timeout: 250 seconds)
[21:33:02] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[21:33:38] *** Joins: p-i- (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th)
[21:39:36] <p-i-> https://github.com/mrabarnett/mrab-regex/issues/451
[21:39:40] <p-i-> What a mess!
[21:40:39] <p-i-> 256 squiggles was so much more manageable
[21:49:53] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Remote host closed the connection)
[21:50:08] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[21:50:08] *** ChanServ sets mode: +v OnlineCop
[21:52:11] <purplex> They are basically telling you the same thing I figured 
[21:55:17] *** Joins: dandyn (~dandyn@user/dandyn)
[21:55:36] <purplex> To sum up: \w includes unicode characters in 'regex' module, but under 're' its ASCII characters.
[21:55:50] *** Quits: rebot (~death@about/regex/rebot) (Read error: Connection reset by peer)
[21:56:38] *** Joins: digitok- (~death@199.19.95.109)
[21:56:54] *** Joins: rebot (~death@about/regex/rebot)
[21:56:54] *** ChanServ sets mode: +o rebot
[21:56:57] *** Quits: digitok (~death@about/regex/digitok) (Read error: Connection reset by peer)
[21:56:58] *** digitok- is now known as digitok
[21:56:59] *** Quits: digitok (~death@199.19.95.109) (Changing host)
[21:56:59] *** Joins: digitok (~death@about/regex/digitok)
[21:58:54] *** Joins: marcojr (~marcojr@62-11-169-12.dialup.tiscali.it)
[22:00:42] <marcojr> Hi. I need a regex which should basically match everything after a specific char and before another one. Like this example: https://regex101.com/r/6sO3Ap/2. How can I do this?
[22:01:57] <marcojr> Also, I know the first char after last matched char will always be `}`
[22:02:00] <OnlineCop> Typically, match the character(s) before what you want, but then capture the stuff you actually want to keep/process/use: https://regex101.com/r/6sO3Ap/3
[22:02:43] <OnlineCop> Although the other characters (like the ':') are part of the whole match, your capture group only contains what you want, and you can process that.
[22:03:06] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net) (Ping timeout: 260 seconds)
[22:04:41] <marcojr> OnlineCop thanks, but it seems it may not match something. Look: https://regex101.com/r/6sO3Ap/4
[22:05:11] <OnlineCop> Just remove the '{' from that character group.
[22:05:22] <OnlineCop> Do you need to handle nested {...{...{}.}..}  ?
[22:05:55] <OnlineCop> https://regex101.com/r/6sO3Ap/5
[22:05:59] <marcojr> OnlineCop, yes, I have to
[22:07:17] <marcojr> Mmh, https://regex101.com/r/6sO3Ap/5 doesn't seem to work properly
[22:08:28] <OnlineCop> Doesn't it capture exactly the text that you have in the line above it? "(one{)" without the leading ':'
[22:09:20] <marcojr> Matches also `{articleSlug:[a-z-]+}` while it should not
[22:09:25] <OnlineCop> If I match just from the ':' forward, it was showing your "comment line" as being the start of the match (since it didn't encounter a '}' up to that point) all the way down to the colon and then the text you wanted.
[22:10:11] <OnlineCop> So this is _matching_ the "anchor" text so you can be sure you're not grabbing the wrong text from different text. But then this is _capturing_ (hover your mouse over the different-color text within the match) only the stuff after the ':' and before the '}'.
[22:10:39] <marcojr> Ohhh ok, got it now
[22:10:44] <marcojr> Thanks
[22:11:15] <p-i-> https://regex101.com/r/Xhc0cE/5 Can anyone see what's going wrong here? This regex worked on other data and I don't see the difference
[22:11:24] <p-i-> It's failing on that ENTRY line
[22:13:22] *** Joins: c41e3a (~c41e3a@user/c41e3a)
[22:14:56] <OnlineCop> p-i-: If you comment out the ENTRY line, the match is going up to the text "This bad boy..."
[22:16:00] <OnlineCop> Throw in `(?!ENTRY).*\W*` before the ENTRY line.
[22:16:00] <marcojr> Still can't get it working. It seems matches everything
[22:16:37] <marcojr> And then something like `/{articleSlug:[a-z-]+}/{articleSlug1:[a-z-]+}` becomes `//`
[22:17:12] <OnlineCop> marcojr: Are you trying to substitute different text in there?
[22:17:38] <marcojr> Yes I am
[22:17:47] <marcojr> match + replace what matched
[22:18:10] <OnlineCop> All the text that was matched, whether it was captured or not, is going to be replaced. So if you want to KEEP `{articleSlug:` but replace the text after it, then you actually want to capture that first portion.
[22:18:48] <p-i-> OnlineCop: Could I be making these matches only go to the end of the line?
[22:18:48] <OnlineCop> What you'd do is capture `{articleSlug:` in a (capture group). Then, either match (or capture) the stuff after it, up to the closing '}'.
[22:19:07] <p-i-> `Trade \s Type       \W*(.+)\W*?` <-- I tried this and it correctly matches only to the end of the line, but I don't see how
[22:19:07] *** Parts: c41e3a (~c41e3a@user/c41e3a) ()
[22:19:25] <p-i-> I would have thought that suppending .*?\n would do the job
[22:19:41] <marcojr> Yes, basically should become from `/{articleSlug:[a-z-]+}/{articleSlug1:[a-z-]+}` to `/{articleSlug}/{articleSlug1}`
[22:20:02] <OnlineCop> marcojr: In your substitution, use the captured text to put it back into your document: https://regex101.com/r/6sO3Ap/6
[22:20:49] <OnlineCop> p-i-: The `\W*` matches everything until it hits a "word" character. In this case, "T" in "This bad boy" is a "word" character.
[22:21:07] <p-i-> I don't see how that regex is matching 2 words.  It looks like it should be only getting 1 word, but it gets both
[22:21:33] <OnlineCop> p-i-: https://regex101.com/r/Xhc0cE/6
[22:21:39] <p-i-> But if I do `Trade \s Type       \W*(.+)\W*?` it's only highlighting "Standard Trade"
[22:23:00] <OnlineCop> The `(.+)` matches everything until the end of the line. If that `\W*` after it fails to match, it would backtrack one step at a time over the "Standard Trade" text. But since that doesn't fail, it doesn't have to backtrack; it's happy at the end of the line, and that `\W*` matches the newline, the '-----' line (as it's not a "word"), and more whitespace. But just not the 'T' in "This bad boy".
[22:24:03] <p-i-> So am I not better off just matching to the end of the line and leaving it at that?
[22:24:22] <OnlineCop> I added line 7 into version /6, which says "If this text to the right does NOT equal "ENTRY" then...) and since that evaluates to TRUE, the `.*` and `\W*` after it come into play.
[22:24:49] <OnlineCop> I think the `(.+)\W*` (not `\W*?`) as it is now is just fine.
[22:25:16] <OnlineCop> The only time you want the non-greedy `\W*?` is if you're afraid you might match too far and have to backtrack a bunch.
[22:25:50] <p-i-> but `\W*(.+)` perfectly matches "Standard Trade". Can't I now just allow any characters until 'ENTRY'?
[22:26:03] <p-i-> seems like it would be cleaner
[22:26:50] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[22:27:06] <marcojr> OnlineCop turns out it does not substitute `:` https://regex101.com/r/6sO3Ap/7
[22:27:44] <p-i-> Trade \s Type       \W*(.+).*
[22:27:45] <p-i-> ENTRY               \W*((?&n)(?:\s*-\s*(?&n))?)\W*
[22:28:06] <p-i-> I don't see why this doesn't just fast-forward until ENTRY is found
[22:28:40] <OnlineCop> marcojr: ${1} looks like its substitutes to me.
[22:29:43] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net)
[22:30:03] <marcojr> Look at the link. It becomes `{articleSlug:}` instead of `{articleSlug}`
[22:31:04] <OnlineCop> p-i-: `Trade \s Type  \W*` matches the stuff between "Trade Type" and "Standard Trade", so the ':' and the space. Then the `(.+)` matches to the end of the line. That last `.*` does not match anything, since the '.' character is the same as `[^\n]`. So `[^\n]*` at the end of the line... matches 0 non-newline characters.
[22:31:26] <OnlineCop> marcojr: You probably just need to move the start and end of the (...) capture group.
[22:32:47] <OnlineCop> marcojr: You could, for example, capture from '{' up to the ':' but exclude it from the capture group. Then match a ':' outside of any capturing group. Then continue to match "everything else up to '}'" after that.
[22:33:03] <OnlineCop> Your ${1} would not contain the ':' character, nor would ${2}.
[22:33:38] <OnlineCop> You can add it back into the substitution string as needed: `${1}:some_text_here:${2}`
[22:33:40] <p-i-> So . only goes to the end of the line
[22:33:53] <OnlineCop> p-i-: Unless you use the /s (single-line mode) flag.
[22:33:57] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net) (Ping timeout: 240 seconds)
[22:33:58] <OnlineCop> Then `.` matches EVERYTHING.
[22:34:45] <OnlineCop> If any part of the regex uses `.` to mean `[^\n]` and you change to using the '/s' flag, it will likely mess up those portions.
[22:35:30] <OnlineCop> Like that `(?!ENTRY).*\W*` which matches till the end of the line (to get that "This bad boy...on it now"[endline]) and then match all the extra whitespace until 'ENTRY' is found.
[22:36:09] <marcojr> Ok, it works but I also need to handle this case: https://regex101.com/r/6sO3Ap/8
[22:38:13] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
[22:39:45] <OnlineCop> Ah, recursion. Golang and other RE2 regex engines don't support that.
[22:39:52] <marcojr> String could contain other `{}` groups inside, and I just need to substitute text between `: }`
[22:40:06] <OnlineCop> How many nested `{}` groups could you encounter?
[22:40:32] <OnlineCop> You could "cheat" and just assume 1-2 levels deep of them. But if it's unknown and can recurse more than that... you have to use something else to handle it.
[22:41:26] <OnlineCop> If this "articleSlug" is attempting to return regex patterns, and those contain a whole bunch of nested stuff, then... you'll need to switch to something like PCRE or .NET to handle that.
[22:42:07] <marcojr> Yes, can return big nested patterns
[22:42:15] *** Joins: luva (~luva@185.168.9.233)
[22:42:19] <OnlineCop> Does `{articleSlug: ... }` occur at the end of a line, so the '}' is always the last thing, or can it be in the middle of a line somewhere?
[22:42:45] <marcojr> `}` will always be the last char
[22:43:08] <OnlineCop> If that '}' is always at the end of the line, you can just match `(.+)\}$` and that wouldn't care whether it had multiple '{' and '}' within it.
[22:43:50] <OnlineCop> Line 8 of version /8 there has `{articleSlug:[a-z-]+{4}}/` so a trailing '/' at the end.
[22:44:29] <OnlineCop> https://regex101.com/r/6sO3Ap/9
[22:45:04] <OnlineCop> But your document has to be well-formed in order for either '}$' or '}/$' (where $ is end-of-line) to match properly.
[22:55:39] *** Joins: re101-deer-85 (~re101-dee@2409:4070:2c86:7f94:74a5:682f:701:b6ab)
[22:55:47] <re101-deer-85> Hi
[22:55:56] <p-i-> OnlineCop: Sorry for being dense. I can't get my head around this. Looking at your https://regex101.com/r/Xhc0cE/6 revision. So \W*(.+) matches to the end of the line. Now the \W+ moves us to the next word. If I comment out lower lines, I see this hilighted...
[22:56:22] <p-i-> Now I bring back the (?!ENTRY).*\W* line, and see it has moved the cursor to just before ENTRY
[22:56:26] <re101-deer-85> want a validation rule
[22:56:33] <p-i-> But how is that syntax accomplishing that?
[22:56:47] <OnlineCop> re101-deer-85: URL? Password?
[22:57:00] <re101-deer-85> to prevent use of two consecutive special characters
[22:57:29] <re101-deer-85> sorry am new here and not getting exactly
[22:57:47] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102) (Ping timeout: 256 seconds)
[22:58:02] <OnlineCop> re101-deer-85: capture the first character. Then use a negative lookahead to ensure that the next character isn't the same as the first: `([!@#$%^&*()])(?!\1)[!@#$%^&*()]`
[22:58:54] <re101-deer-85> in address section line, there should not be two same or consecutive special characters
[22:59:03] <p-i-> It's saying "Until we reach ENTRY, we pull out .*/W+ i.e. we match the max we can, that doesn't end with a non-word"
[22:59:04] <OnlineCop> re101-deer-85: You can have whatever special characters you want, but what this does is first match a '@' or something in the text. If the value you JUST captured (in this case, `\1`) is the same one as the one coming up, then the match fails at that point.
[22:59:22] <p-i-> sorry DOES end with non-word
[23:00:50] <OnlineCop> p-i-: The `(?!ENTRY)` is going to start matching where the old highlight finished. Since the `\W+` matches those "-----" and whitespace, then the match is sitting at that spot, ready for the next instruction. At that point, this negative lookahead says "Now, if I don't match ENTRY then continue. Otherwise, backtrack! Mwah-hah-hah."
[23:01:42] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Quit: Client closed)
[23:01:52] *** Joins: goddard (~goddard@user/goddard)
[23:02:01] <OnlineCop> p-i-: So as long as the text "right now" where the last `\W+` stopped matching doesn't start with "ENTRY", `.*` (match to the end of the line of all that text) and then `\W*` (match all the whitespace and non-"word" characters until it reaches one).
[23:03:09] <OnlineCop> I guess I didn't do it very smart, because if the text "This bad boy..." wasn't there, the entire match would fail, or at least, it would do "funky backtracking stuff" that I probably didn't want it to do. So I should have made that an optional condition to match "if it had to" until it could reach ENTRY.
[23:03:30] <re101-deer-85> sorry
[23:03:31] <re101-deer-85> can anyone please help me, iam new to regex.
[23:03:31] <re101-deer-85> my requirement is
[23:03:32] <re101-deer-85> in text area there should not be two consecutive same special characters and overall special characters should be limited to 5
[23:03:33] *** rebot sets mode: +q re101-deer-85!*@*
[23:03:34] *** Quits: gregu- (~gregu-@114-82-178-143.ftth.glasoperator.nl) (Quit: ZNC 1.8.2 - https://znc.in)
[23:03:34] <rebot> 14re101-deer-85: For regex help, please share a https://regex101.com/ link. To share other data, see !paste. You will be unmuted in 30s.
[23:03:39] <p-i-> There's gotta be a cleaner way to do this, surely
[23:03:46] <p-i-> This feels very brittle
[23:03:49] <OnlineCop> !password @ re101-deer-85
[23:03:49] <perlbot> re101-deer-85: Don't put arbitrary restrictions on passwords! Use an entropy-based system like zxcvbn (https://github.com/dropbox/zxcvbn), and make sure to use modern hashes (md5 is too old; argon2 is recommended, pbkdf2 or scrypt are acceptable). (https://www.xkcd.com/936/)
[23:04:02] <OnlineCop> Whoops; that's not the auto-text I wanted.
[23:04:03] *** rebot sets mode: -q re101-deer-85!*@*
[23:04:08] <p-i-> I am aware it is my understanding that is brittle and not regex
[23:04:17] <OnlineCop> re101-deer-85: Paste some example text on regex101, please. Share the link here.
[23:05:26] <OnlineCop> p-i-: No, I admit that my solution was brittle as well. Do you know whether there will always be text there before ENTRY, or that it may be optional?
[23:06:01] <p-i-> What I don't get is this: https://regex101.com/r/Xhc0cE/7 ... I've removed the \W+ from the end of the last active line. Everything makes sense here. But now I uncomment that #(?!ENTRY).*\W* line.
[23:06:11] <p-i-> And I'm expecting it to hilight up to ENTRY
[23:06:14] <p-i-> but it doesn't
[23:06:35] <p-i-> I think it's because . doesn't go past the newline character
[23:06:49] <OnlineCop> Notice on revision /7 where the highlighting ends: right after "Standard Trade" (it doesn't even match the newline after it).
[23:07:13] <OnlineCop> That's exactly right: the `(.+)` isn't matching the newline character. You could rewrite that as `([^\n]*)`.
[23:07:48] <OnlineCop> You know that `\w` is the same as `[a-zA-Z0-9_]` (letters, digits, and an underscore). So `\W` is exactly the opposite: anything BUT that, _including newlines_.
[23:08:19] <OnlineCop> So that `\W+` will match the newline after "Standard Trade", the leading spaces, those hyphens, another newline, and more spaces.
[23:09:29] <p-i-> If I want to match all characters including newlines, I would do [.\n]* ?
[23:10:05] <p-i-> What I'm worried about is: there might be an unknown number of lines before ENTRY is hit
[23:11:15] <OnlineCop> I see your point. I think in that case, you'd want to do an "any character including newline" but repeat it as FEW times as possible with `*?`. I like to put two "opposites" into a character group for that: `[\S\s]*?` or `[\W\w]*?` since that matches "THING" or "not-THING".
[23:11:34] <OnlineCop> https://regex101.com/r/Xhc0cE/8
[23:11:59] <p-i-> In my brain language I want to "Go to: 'Trade Type', capture to the end of the line, advance to 'ENTRY', read off 1 or 2 numbers, etc. 
[23:13:41] <re101-deer-85> repeating of same special characters like -- or ** or !! or ## shouldnot happen in the text field
[23:13:42] <re101-deer-85> please give me a validation rule for this
[23:13:49] <OnlineCop> Yep, so you have to define what the "pattern rule" is for the "advance to 'ENTRY'" logic. Any text? Whitespace only?
[23:14:11] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net)
[23:14:29] <OnlineCop> re101-deer-85: Didn't I give you this validation rule earlier? `([...special characters...])(?!\1)[...same special characters...]`
[23:14:31] <re101-deer-85> i dont know what is regex. i am hearing this word for first time from last 10mins
[23:15:59] <OnlineCop> re101-deer-85: What are the special characters allowed?
[23:16:07] <p-i-> \S\s ... so.. \s is whitespace (including \n). so \S is ^\s, i.e. non-whitespace. So that's matching the minimum number of "all-chars" (seems wierd there is no shorthand for that, and it needs that [\S\s] hack, no?) until the next match gets hit, which is ENTRY
[23:16:15] <p-i-> just parity-checking here
[23:17:01] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102)
[23:17:13] <OnlineCop> p-i-: Pretty much, yes. You _COULD_ use the /s flag so `.` works the same as `[\S\s]`, but then anywhere you want to match "just to the end of the line", you'll need to change it to be `[^\n]`.
[23:17:51] <p-i-> ok I feel like my brain is on the rails again
[23:17:53] <OnlineCop> p-i-: https://regex101.com/r/Xhc0cE/9 uses /s
[23:17:56] *** Quits: Tobbi_ (~Thunderbi@31.209.188.226) (Quit: Tobbi_)
[23:18:51] <OnlineCop> Line 6 was changed from `(.+)` to `([^\n]+)`. Then line 7 is using `.*?` which is "as few characters as possible" so that the stuff on the right (the text ENTRY) can match.
[23:19:31] <p-i-> Awesome, that feels cleaner to me
[23:19:34] <re101-deer-85> AND(
[23:19:34] <re101-deer-85> NOT(ISBLANK(Customer__r.Current_Correspondance_Address_Line_1__c)),
[23:19:35] <re101-deer-85> LEN( Customer__r.Current_Correspondance_Address_Line_1__c )<3,
[23:19:35] <re101-deer-85> NOT($User.Is_Upload_User__c )) && $Profile.Name <> 'Users'&& ISPICKVAL(Stage__c,'Address Details')
[23:19:36] <re101-deer-85> above validation is for min length should be 3. Please add the below validation
[23:19:36] <re101-deer-85> Repeating of same special characters like -- or ** or !! or ## shouldnot happen in the text field and maximum number of allowed special characters should be 5 in the Customer__r.Current_Correspondance_Address_Line_1__c
[23:19:37] *** rebot sets mode: +q re101-deer-85!*@*
[23:19:38] <rebot> 14re101-deer-85: For regex help, please share a https://regex101.com/ link. To share other data, see !paste. You will be unmuted in 30s.
[23:20:00] <p-i-> re101-deer-85: Use bpaste if it's not regexx
[23:20:07] *** rebot sets mode: -q re101-deer-85!*@*
[23:20:45] <p-i-> OnlineCop: Can I assert all of these keywords to be at the start of the line?  I'm familiar with using ^ and $, but those work at the level of the whole string.
[23:21:31] <OnlineCop> p-i-: ^ and $ work line-by-line if you have that '/m' flag activated (multiline).
[23:21:53] <re101-deer-85> yes, special characters might be in the beginning or may not be
[23:22:45] <OnlineCop> p-i-: Since your regex there is using /m as one of the flags, you can use ^ and $ for each line, if that helps. For example: `Trade \s Type  \W*([^\n]+)$` <-- that '$' at the end
[23:23:08] <OnlineCop> re101-deer-85: I provided you an answer.
[23:23:23] <p-i-> Gottit, great!
[23:23:26] <re101-deer-85> and the validation which i gave wont have more than 30 characters length
[23:23:40] <re101-deer-85> minimum length is 3 and maximum is 30
[23:24:16] <re101-deer-85> just add to that existing validation rule which i have sent
[23:24:31] <OnlineCop> re101-deer-85: I am not familiar with that NOT(...), LEN(...) programming language, so do not know how to format a regex to help you.
[23:25:21] <re101-deer-85> you can send me the validation rule with regex
[23:27:48] <OnlineCop> re101-deer-85: https://regex101.com/r/dgnWPK/1
[23:27:56] <re101-deer-85>  `([!@#$%^&*()])(?!\1)[!@#$%^&*()]`
[23:27:57] <re101-deer-85> this wont be accepting characters like !! or @@ or ## or $$ or %% or ^^ or && or ** or (( or ))
[23:27:57] <re101-deer-85> right?
[23:27:58] <re101-deer-85> how to add few more characters to it
[23:27:59] *** rebot sets mode: +q re101-deer-85!*@*
[23:28:00] <rebot> 14re101-deer-85: For regex help, please share a https://regex101.com/ link. To share other data, see !paste. You will be unmuted in 30s.
[23:28:29] *** rebot sets mode: -q re101-deer-85!*@*
[23:30:41] <OnlineCop> re101-deer-85: If that regex returns a success, then someone is using '--' or '!!' or '##'. You can NOT(...) its logic or whatever that code is doing.
[23:31:14] <re101-deer-85> okay
[23:31:28] <re101-deer-85> is punct a function?
[23:32:12] <OnlineCop> It's a whole range of special characters. Hover your mouse over it and it should say what it is.
[23:33:08] <re101-deer-85> yeah
[23:35:40] *** Quits: re101-deer-85 (~re101-dee@2409:4070:2c86:7f94:74a5:682f:701:b6ab) (Quit: Client closed)
[23:54:21] <p-i-> I'm playing around... https://regex101.com/r/Xhc0cE/10
[23:54:55] <p-i-> Each line says "Clear all cruft until the start of a new line. Then clear all non-wordiness. Then match!
[23:55:12] <p-i-> Oddly it won't work for 2 liens: Leverage and Trade
[23:55:23] <p-i-> I notice these are consecutive in the string.
[23:55:33] <p-i-> So it must be attempting to scrape the \n twice.
[23:55:52] <p-i-> But I can't see why
[23:56:15] <p-i-> It seems .*? doesn't yield to ^
[23:56:58] <p-i-> .*? is meant to be lazy, if I got the term right, ... shouldn't it therefore yield to a ^?
[23:57:33] <p-i-> Aha! If I use \n instead of ^ it works
[23:58:37] <p-i-> No wait it doesn't!
[23:58:50] <p-i-> Seems strange.
