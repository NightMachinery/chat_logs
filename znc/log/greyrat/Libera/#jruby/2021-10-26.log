[00:02:44] <edipofederle[m]> enebo: not sure I can use it, since these methods are dependent of runtime, which is a thing not available at this point, or I'm missing something here?
[00:10:53] <enebo[m]> edipo.federle: yeah.  hmm. I mean one possibility would be to load a runtime to call it but perhaps we just need a nice example of Java code piping to a process
[00:14:04] <enebo[m]> edipo.federle: So ProcessBuilder may be the route but you need to be able to provide its stdin and feed the strings
[00:14:56] <edipofederle[m]> yep, I will try exactly that. 
[00:16:32] <enebo[m]> edipo.federle: https://stackoverflow.com/questions/18903549/writing-to-inputstream-of-a-java-process
[00:16:50] <edipofederle[m]> currently on the same page :)
[00:16:56] <enebo[m]> nice
[00:17:14] <edipofederle[m]> I will try and see how it works, 
[02:25:39] <headius> pushed my last fix for the regressions... should be good on master other than the version check failing
[02:56:07] <edipofederle[m]> <headius> "pushed my last fix for the..." <- So, at the moment, the error on version check is 'expected'? (ref: https://github.com/jruby/jruby/commit/823cb5f464bb7cb8d37caf8f1b5273956b02a7c2#r58638618)
[02:58:38] <headius> Yeah until we fix those versions
[03:46:32] *** Joins: ivy31 (~ivy31@apn-46-169-255-222.dynamic.gprs.plus.pl)
[03:58:01] *** Quits: ivy31 (~ivy31@apn-46-169-255-222.dynamic.gprs.plus.pl) (Quit: Client closed)
[14:22:07] <kares[m]> have opened the jossl update against jruby-9.2 and tagged it for 9.2.20.0: https://github.com/jruby/jruby/pull/6909
[14:22:07] <kares[m]> but I will have no hard feelings if this is seen risky and postponed till 9.2.21.0
[14:22:07] <kares[m]> the pre was out for a few days and users did not report anything problematic, there's also a flag to force the legacy cert verification path ...
[15:37:03] <headius> That seems pretty good to me then
[17:38:05] <enebo[m]> kares: jruby-openssl is gem installable so people can back off to an older version if the workaround env is not enough?
[17:40:49] <kares[m]> yes - should be. there were issue due it being a default gem, I am actually not sure if that is still the case ...
[17:53:38] <enebo[m]> kares: The ability to downgrade with gem install is a factor in .20 or .21 but not really the only factor since multiple people are saying they are stuck without it
[17:54:07] <enebo[m]> since you have an env to essentially backoff that also makes it more appealing to get in sooner than later
[19:23:10] <headius> enebo: I am fixing the versioning issue with asm but I notice a lot of warnings in this build about overlapping classes: https://app.travis-ci.com/github/jruby/jruby/jobs/545051687
[19:23:14] <headius> seems like there's some double-shading going on or something
[19:24:08] <headius> https://app.travis-ci.com/github/jruby/jruby/jobs/545051687#L2797-L2994
[19:24:11] <headius> for example
[19:25:13] <headius> jruby-jars-9.3.2.0.pre.SHAPSHOT.gem
[19:25:25] <headius> I think I see the problem here
[19:25:38] <headius> you updated all the versions to SHAPSHOT
[19:29:56] <headius> easy fix is easy
[19:31:15] <headius> funny none of us noticed this
[19:31:53] <enebo[m]> HAHAHAH
[19:31:58] <enebo[m]> headius: OMG
[19:32:32] <enebo[m]> h is by n but I am so use to the pattern of chars I just must have mentally glossed over it
[19:33:02] <headius> yeah I didn't notice it looking at it several times
[19:33:22] <headius> finally went up to look at the jruby-jars filename and read it piece by piece to see if it matched
[19:33:27] <enebo[m]> SHAP SHOT
[19:33:30] <enebo[m]> HAHAH I am still laughing
[19:33:55] <enebo[m]> It could have only been a better mispelling if it was SLAPSHOT
[19:33:58] <headius> https://www.urbandictionary.com/define.php?term=shapshot
[19:34:06] <enebo[m]> Although I would have noticed that one
[19:34:13] <headius> your SNAPSHOT update turned out to be a shapshot
[19:34:41] <enebo[m]> shapshot is not actually a bad name for dev cycle software
[19:34:58] <enebo[m]> perhaps we should ask maven to allow it
[19:35:21] <headius> yeah I don't know whether SNAPSHOT is enforced or just de facto
[19:36:12] <enebo[m]> release plugin can do the auto naming
[19:36:43] <headius> that's true
[19:36:43] <enebo[m]> so there is at least something to it and sonatype also accepts the convention but that is probably just de facto
[20:55:06] <headius> kares: I would just go ahead and optimistically close those issues you tagged re: cert verification
[20:55:35] <edipofederle[m]> Guys, I'm facing problems to figure out how I can write equivalent code inside Jruby/Java: https://gist.github.com/edipofederle/6db4c057cd15ec720b0d697f0476a929 some advise? I try to look already into ShellLauncher, RubyIO and PopenExecutor but not sure how to pass that block, for example
[20:55:40] <headius> mark for 9.2.20 since we will update jossl there and we can't have multiple milestones on an issue
[20:56:57] <headius> edipo.federle: like, trying to write this code in Java? The block is really just convenience for opening the pipe, making some calls against it, and closing it (ensured/finallyed)
[20:57:16] <headius> or do you actually need to pass a Ruby block in Java?
[20:57:59] <edipofederle[m]> headius: no, block is not required, if same result
[20:59:14] <headius> ok if you have launched a process then it just would want a try/finally to close it down with this sort of logic in the body of the catch
[20:59:31] <headius> that's really all it does in Ruby
[21:00:10] <headius> it is also possible to make a Block from arbitrary Java code and pass that to e.g. RubyIO.popen but if you look in popen there's not much to the block logic
[21:00:59] <headius> https://github.com/jruby/jruby/blob/6c605fd042ca20b0a3b2d0dde359a899236c5132/core/src/main/java/org/jruby/RubyIO.java#L4276-L4281
[21:02:13] <edipofederle[m]> Let me try so, 
[21:13:48] <headius> edipo.federle: you should rebase this and eliminate the version changes: https://github.com/jruby/jruby/pull/6907
[21:14:03] <headius> also, are we not running the command line specs? I'm confused why we need this tag when we are green
[21:14:46] <headius> ugh, we are not!
[21:15:14] <headius> edipo.federle: nevermind that... I will add command line specs to the slow run and tag everything that fails
[21:15:33] <headius> oh nevermind we do run it in slow
[21:15:41] <headius> so I am back to confused about why we need the tag
[21:21:25] <edipofederle[m]> ah, please, this PR can be ignore, I will close it now. 
[21:21:53] <headius> easy peasy
[21:21:56] <edipofederle[m]> closed,
[21:34:07] <edipofederle[m]> <headius> "ok if you have launched a..." <- here you mean something like: `ShellLauncher.popen(runtime, "LESS", newIOOptions(runtime, 0).getModeFlags());` ?
[21:34:41] <headius> edipo.federle: maybe if you tell me what you are doing I can help better... there are several ways to launch a process
[21:37:35] <edipofederle[m]> Sure, I am trying to use open here: https://github.com/jruby/jruby/pull/6902#discussion_r735888554
[21:38:12] <edipofederle[m]> for send help usage string to PAGER (for example. `less). 
[21:38:34] <edipofederle[m]> From Plain Ruby, I can follow this approach: https://github.com/jruby/jruby/pull/6902#discussion_r735888554
[21:38:36] <edipofederle[m]> ops
[21:39:11] <edipofederle[m]> s/From Plain Ruby, I can follow this approach: https://github.com/jruby/jruby/pull/6902#discussion_r735888554/From Plain Ruby, I can follow this approachhttps://gist.github.com/edipofederle/6db4c057cd15ec720b0d697f0476a929/
[21:39:43] <edipofederle[m]> So, I am trying to achieve the same
[21:40:17] <edipofederle[m]> s/open/popen/
[21:40:23] <enebo[m]> ruby help output in Ruby 3 will pipe to whatever PAGER or RUBY_PAGER specifies.  So he wants to exec, for example, less and then send our help to its stdin
[21:41:01] <enebo[m]> which I think it just a ProcessBuilder with getOutputStream() to get that processes stdin
[21:42:09] <enebo[m]> Just to catch headius up because this is before runtime is defined it is easier to just use ProcessBuilder
[21:43:40] <edipofederle[m]> I can create a runtime with: Ruby runtime = Ruby.newInstance(config);, right? 
[21:44:20] <headius> ah tricky
[21:44:37] <enebo[m]> Is there an issue with ProcessBuilder?  This does not seem like it would be a lot of code
[21:45:18] <headius> so this is a new general feature for long output from flags and since it happens before we launch JRuby itself we need a pure Java option
[21:45:28] <enebo[m]> My first thought was to leverage popen logic we have but this is just exec + grabbing the stdin of what you are spawning
[21:45:33] <edipofederle[m]> enebo[m]: I cannot make it works without have the "bash" thing, as you notice on the PR... 
[21:45:39] <headius> this will be a little tricky because subprocess launching from Java does not work well at all with things like `less`
[21:45:58] <enebo[m]> edipo.federle: I notice you keep using 'LESS' that is not a unix command 
[21:46:04] <enebo[m]> Is that maybe a builtin in bash?
[21:46:10] <headius> less wants to take over the terminal but Java process logic manually "pumps" the in/out/err streams so they look like they are always empty
[21:46:18] <edipofederle[m]> enebo[m]: this in temp, I will remove it, and read from ENV
[21:46:40] <enebo[m]> ah
[21:46:58] <enebo[m]> ah to both of you I guess
[21:47:29] <enebo[m]> headius: so ProcessBuilder actually lacks the ability to interact with something needing a terminal?
[21:47:45] <enebo[m]> That feels pretty limiting :)
[21:48:16] <edipofederle[m]> Another think, quiick, and ugly, but works in Unix and Win, is to make a temp file with content  from Help, and just pass it to the PAGER command
[21:48:33] <headius> I think you can get some of the way by using ProcessBuilder and setting all streams to be inherited, but we actually want to pipe err to the input of `less`
[21:48:48] <edipofederle[m]> for example: https://gist.github.com/edipofederle/e75bec2514df9708ec9f6add99926d58
[21:49:46] <enebo[m]> edipo.federle: yeah I guess that would mostly work but gdepending on PAGER it will show the file name in some cases
[21:49:57] <enebo[m]> Feels really like MRI devs were bored on this feature
[21:49:57] <headius> ProcessBuilder provides no way to pipe one stream to another
[21:50:12] <edipofederle[m]> enebo[m]: exactly, the file name is present, at least until you page up/down
[21:50:21] <headius> it might be simpler to pump the entire output to a `less` that we exec
[21:50:31] <headius> we know we are exiting always right?
[21:50:46] <enebo[m]> I am confused about the err part of this
[21:50:58] <enebo[m]> we control the messages we want to send as strings don't we?
[21:51:13] <enebo[m]> This is only for putputting help 
[21:51:23] <enebo[m]> Or does it do more?
[21:51:35] <edipofederle[m]> just for help
[21:52:22] <enebo[m]> Can't we just writeAll on the getOutputStream of the new process 
[21:52:32] <headius> wow, nobu must have written this code
[21:52:35] <enebo[m]> hahah
[21:52:48] <enebo[m]> I sort of see the convience of this but it is hardly the unix way
[21:52:57] <headius> const char *const progname =
[21:52:58] <headius>     (argc > 0 && argv && argv[0] ? argv[0] :
[21:52:58] <headius>      origarg.argc > 0 && origarg.argv && origarg.argv[0] ? origarg.argv[0] :
[21:52:58] <headius>      ruby_engine);
[21:52:58] <headius> I mean really
[21:53:57] <enebo[m]> I wonder which system has argv[0] be NULL?
[21:54:33] <enebo[m]> I mean besides someone doing it in C after it has started
[21:55:00] <enebo[m]> I may be assuming too much about what those two values are from
[21:55:03] <edipofederle[m]> enebo[m]: need to check/try. 
[21:55:59] <enebo[m]> edipo.federle: you mean you need to see how much got written and pump the data and combined with what headius said there is an issue with talking to tty processes
[21:56:42] <enebo[m]> Another mechanism would be to just use our POSIX subsystem
[21:56:45] <headius> ok so CRuby just launches or fork/exec's the pager and then calls its logic to write help to that process's input (as a tty)
[21:56:52] <headius> so they change the target of the write to be the subprocess
[21:56:54] <enebo[m]> yeah
[21:57:20] <enebo[m]> it appears to just write help to whatever PAGER/RUBY_PAGER may be set to
[21:57:24] <enebo[m]> if nothing it just prints out
[21:57:45] <headius> yeah
[21:57:46] <enebo[m]> I also like that it sets LESS to 
[21:57:46] <enebo[m]> "-R"
[21:58:10] <headius> I think this is doable with processbuilder
[21:58:33] <headius> you would want to set it to inherit err and out and then write the help to its stdin
[22:00:27] <enebo[m]> which I think is just getOutputStream on that process 
[22:00:29] <edipofederle[m]> I see, well guys, I will try in that way. 
[22:00:31] <headius> so redirectOutput and redirectErr should be INHERIT
[22:00:57] <edipofederle[m]> yes, right now I;m using: builder.redirectOutput(ProcessBuilder.Redirect.INHERIT);
[22:01:11] <enebo[m]> oh you are saying you do not maybe even need that
[22:01:20] <enebo[m]> you just print and it will pick it up because it inherits
[22:01:39] <headius> default for in is PIPE so that should be fine... get the subprocess stdin and write+flush+close+waitFor
[22:01:53] <headius> you still need to actually write it to the input of the subprocess though
[22:02:01] <headius> so that may need changes to our help output
[22:02:06] <headius> (just passing a stream in though)
[22:02:24] <headius> edipo.federle: I think you are on the right track
[22:02:41] <headius> once you close the input I believe it should be reflected on `less` and it will do paging and then terminate
[22:02:52] <headius> terminal control is a big open question but this should work well enough for now
[22:03:08] <edipofederle[m]> great, thx a lot for the help guys
[22:03:17] <headius> you wouldn't be able to do this with `vim` for example because it needs a lot of tty control
[22:03:26] <headius> but less may be ok
[22:04:51] <headius> in any case I would try this and if it doesn't work we can go deeper
[22:29:29] <headius> enebo: I have not managed to get far with the M1 issues... untangling the variadic logic in jnr-ffi has been challenging
[22:29:53] <headius> I need to take a new approach and move the variadic logic from jnr-ffi into jffi and then start replacing it with the correct FFI calls from there I think
[22:30:37] <headius> for review... jnr-ffi manually does varargs set-up using native heap memory but M1 varargs uses a mix of stack and heap and so we lose args
[22:31:13] <headius> the right way to do this is to always use the ffi functions for setting up varargs calls, which will do it right on current platform... but I have to push this endpoint logic down from jnr-ffi into the native lib in jffi
[22:31:26] <headius> I have considered sending wmeissner an email
[22:31:30] <headius> he could fix this in a day
[22:32:14] <headius> I'm going to do a round of jnr releases to pick up recent minor fixes and land a few in-progress PRs on the jruby end
[22:33:01] <enebo[m]> heh
[22:33:03] <enebo[m]> hit up wayne...Maybe he will come back into the game
[22:33:21] <headius> won't know if we don't try
[22:33:38] <enebo[m]> It has been a long time since his retirement
[22:41:47] <headius> sent
[22:57:26] <basshelal[m]> That would be awesome if we could get his clarification or help on some things, struct by value support comes to mind
[22:59:39] <basshelal[m]> Thanks for the merges headius  😁
[23:05:12] <headius> for sure we could use some help
[23:08:53] <headius> ok I think I have all relevant things merged and closed in jnr-*
[23:09:07] <headius> basshelal: if you see anything I missed let me know... gonna grab some lunch here
[23:34:26] <headius> ok releases are happening
[23:50:27] <puritylake[m]> enebo: I realise how to fix one of the errors, seems I forgot the case where I could call to_str which one of the specs complains if it doesn't get called
[23:52:41] <puritylake[m]> Actual that is both in the call log you sent me
[23:53:59] *** Joins: danieljrubyquest (~danieljru@2001:470:69fc:105::d505)
[23:56:36] <headius> enebo: update jnr in 9.3 or 9.2?
[23:56:57] <headius> mostly small fixes, additional constants (syslog, sockets), s390x binary
[23:57:27] <puritylake[m]> s/Actual/Actually/
[23:58:14] <danieljrubyquest> :wave: Hi all! I'm attempting to upgrade from `jruby-9.2.19.0` to `jruby-9.3.1.0`, but am seeing a new NoMethodError when calling `map` on a Java list:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/604fb3592a378d5eeadfe19ebc2f0ca1e62e8bd1)
[23:59:11] <headius> hmmm
[23:59:28] <headius> it should be picking up map from Ruby Enumerable, which we mix into Java Collection (or List)
