[00:09:00] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 240 seconds)
[00:19:14] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[00:23:54] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:8a6:a8d3:62c4:7875) (Ping timeout: 260 seconds)
[00:23:56] *** Joins: jab416171 (~jab416171@c-67-161-208-65.hsd1.ut.comcast.net)
[00:26:07] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[00:34:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:40:41] *** Quits: Tang3nt-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[00:40:56] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:41:32] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:42:41] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:42:47] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:43:42] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:44:07] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:45:02] *** Joins: Tangent-Man (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:45:35] *** Quits: Tangent-Man (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:45:55] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 240 seconds)
[00:46:24] *** Joins: Tangent-Man (~Tangent-M@217.146.92.224)
[00:48:10] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[00:50:04] *** Joins: yauhsienhuangtw (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net)
[00:53:10] *** Quits: yauhsien_ (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[01:02:16] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:11:36] *** Quits: jab416171 (~jab416171@c-67-161-208-65.hsd1.ut.comcast.net) (Ping timeout: 272 seconds)
[01:12:10] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[01:15:05] *** Joins: jab416171 (~jab416171@c-67-161-208-65.hsd1.ut.comcast.net)
[01:16:41] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 256 seconds)
[01:17:27] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[01:17:47] *** Joins: machinedgod (~machinedg@24.105.81.50)
[01:18:46] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[01:31:42] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[01:32:00] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[01:34:29] *** Joins: moose` (~moose@user/moose)
[01:34:37] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[01:37:55] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 240 seconds)
[01:38:14] *** Quits: mikrosis (~mikrosis@dynamic-046-114-170-099.46.114.pool.telefonica.de) (Ping timeout: 252 seconds)
[02:02:10] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Remote host closed the connection)
[02:02:34] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[02:14:25] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[02:21:00] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[02:27:42] *** Joins: dez (uid92154@user/dez)
[02:30:56] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[02:34:19] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[02:37:24] *** flooded is now known as _flood
[02:40:48] *** Joins: jdmark (~jdmark@user/jdmark)
[02:45:35] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[02:46:13] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[02:52:12] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Ping timeout: 240 seconds)
[02:54:14] *** Joins: test_ (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[02:57:50] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[03:04:15] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[03:06:34] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[03:07:34] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[03:09:31] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 245 seconds)
[03:14:31] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Quit: WeeChat 3.4)
[03:15:17] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[03:15:43] *** Joins: tex (~super@user/dix)
[03:17:35] *** Joins: xenoterracide_ (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[03:19:57] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Ping timeout: 240 seconds)
[03:20:01] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Client Quit)
[03:22:57] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[03:23:48] *** Quits: xenoterracide_ (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Remote host closed the connection)
[03:27:22] *** Quits: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com) (Quit: The Lounge - https://thelounge.chat)
[03:27:28] *** test_ is now known as _flood
[03:28:06] *** Joins: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com)
[03:33:19] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Quit: WeeChat 3.4)
[03:40:55] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[03:46:46] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[03:48:15] *** Joins: igemnace (~ian@user/igemnace)
[03:48:20] *** Joins: Wulf (~Wulf@user/wulf)
[04:02:26] *** Quits: Tangent-Man (~Tangent-M@217.146.92.224) (Remote host closed the connection)
[04:02:47] *** Quits: tex (~super@user/dix) (Quit: tex)
[04:03:04] *** Quits: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com) (Quit: The Lounge - https://thelounge.chat)
[04:03:35] *** Joins: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com)
[04:06:49] *** Quits: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com) (Client Quit)
[04:06:57] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:07:18] *** Joins: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com)
[04:12:28] *** Quits: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com) (Quit: The Lounge - https://thelounge.chat)
[04:13:01] *** Joins: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com)
[04:13:05] *** Quits: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com) (Client Quit)
[04:13:32] *** Joins: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com)
[04:18:12] *** Quits: lithium_pt (~lithiumpt@a95-94-100-32.cpe.netcabo.pt) (Ping timeout: 240 seconds)
[04:18:55] *** Quits: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com) (Quit: The Lounge - https://thelounge.chat)
[04:19:24] *** Joins: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com)
[04:19:47] *** Quits: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com) (Client Quit)
[04:20:16] *** Joins: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com)
[04:32:22] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[04:36:14] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Quit: fBNC - https://bnc4free.com)
[04:36:46] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[04:40:54] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[04:43:17] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[04:46:12] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[04:47:35] *** Quits: sebbu (~sebbu@user/sebbu) (Ping timeout: 272 seconds)
[05:02:12] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[05:02:38] *** Joins: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net)
[05:05:37] *** Joins: frost (~frost@user/frost)
[05:12:32] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[05:12:58] *** Joins: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net)
[05:39:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:46:40] *** Joins: lithiumpt (~lithiumpt@178.239.165.148)
[05:47:53] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[05:48:19] *** Joins: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net)
[06:18:49] *** Quits: platta (~platta@pool-96-248-118-42.cmdnnj.fios.verizon.net) (Read error: Connection reset by peer)
[06:20:53] *** Joins: platta (~platta@pool-96-248-118-42.cmdnnj.fios.verizon.net)
[06:40:11] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[06:42:50] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 272 seconds)
[06:58:13] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[06:58:39] *** Joins: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net)
[06:59:18] *** Quits: instantp10neer (~instantp1@user/instantp10neer) (Ping timeout: 272 seconds)
[07:03:34] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[07:03:59] *** Joins: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net)
[07:13:54] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[07:14:20] *** Joins: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net)
[07:35:07] *** Joins: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney)
[07:41:59] *** Joins: instantp10neer (~instantp1@user/instantp10neer)
[07:48:43] *** Joins: Vitto (~Vitto@2a01:e0a:981:cd30:1216:5465:cd5f:e5ba)
[08:30:18] *** Quits: jtgd (~jtgd@user/jtgd) (Quit: WeeChat 3.4)
[08:33:09] *** Joins: jtgd (~jtgd@user/jtgd)
[08:34:20] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[08:49:56] *** Joins: TunnelJ (~TunnelJ@99-167-200-231.lightspeed.sndgca.sbcglobal.net)
[08:52:35] <TunnelJ> hey there, how y'all doin?
[09:05:00] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[09:24:31] *** Joins: sebbu (~sebbu@user/sebbu)
[09:59:00] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[10:04:21] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[10:13:19] *** Quits: TunnelJ (~TunnelJ@99-167-200-231.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 256 seconds)
[10:27:09] *** Quits: yauhsienhuangtw (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net) (Quit: Leaving)
[10:33:00] *** Quits: Vitto (~Vitto@2a01:e0a:981:cd30:1216:5465:cd5f:e5ba) (Ping timeout: 240 seconds)
[10:35:25] *** Quits: jab416171 (~jab416171@c-67-161-208-65.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[10:39:28] *** Joins: Douwd (~douwd@nexus.bsdpro.net)
[10:48:44] *** Quits: Malvolio (~Malvolio@user/malvolio) (Ping timeout: 256 seconds)
[11:06:10] *** Joins: Malvolio (~Malvolio@user/malvolio)
[11:11:13] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: WeeChat 3.4)
[11:26:09] *** Joins: MajorBiscuit (~MajorBisc@c-001-029-040.client.tudelft.eduvpn.nl)
[11:26:34] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[11:32:06] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Excess Flood)
[11:32:15] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[11:48:47] *** Joins: labrador (~labrador@user/labrador)
[12:07:02] *** Joins: jab416171 (~jab416171@c-67-161-208-65.hsd1.ut.comcast.net)
[12:07:32] *** Joins: frost (~frost@user/frost)
[12:09:00] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[12:10:36] *** Quits: labrador (~labrador@user/labrador) (Quit: Leaving)
[12:18:56] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:19:34] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:22:26] *** Joins: yauhsien (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net)
[12:59:48] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[13:35:04] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:38:22] <sshine> say I've got a random uint64_t, and I'd like a uniform random number in the range [0,n), where n < 2^64. what's the method?
[13:39:09] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-3498-71fb-df6e-0b01.res6.spectrum.com) (Quit: jarthur)
[13:39:28] *** Joins: frost (~frost@user/frost)
[13:39:28] <sshine> if n is any power of 2, I just & with a bitmask of that size.
[13:39:31] <yawkat> sshine: https://github.com/apple/swift/pull/39143
[13:39:42] <sshine> yawkat, haha, awesome!
[13:39:43] <yawkat> have fun with that rabbithole.
[13:39:49] <sshine> ;-)
[13:39:55] <sshine> I just need something slightly better than what I've got.
[13:40:16] <sshine> which is either not uniform random, or not guaranteed to terminate ;)
[13:53:45] *** Quits: lithiumpt (~lithiumpt@178.239.165.148) (Ping timeout: 256 seconds)
[13:53:58] *** Joins: lithiumpt (~lithiumpt@178.239.165.143)
[13:57:31] <yawkat> haha todays cryptle
[13:58:04] <yawkat> CRYPTLE #19 -/6 🟪🟦🟡🟦🟦🟦🟦🟦🟦 🟪🟦🟦🟦🟪🟡🟦🟦🟦 🟪🟦🟡🟡🟡🟦🟦🟦🟦 🟪🟦🟦🟡🟦🟦🟦🟡🟡 🟪🟦🟡🟦🟪🟡🟦🟦🟦 🟪🟡🟦🟡🟦🟦🟦🟦🟡
[13:58:12] <yawkat> couldnt even get the second letter
[13:59:51] *** Quits: Malvolio (~Malvolio@user/malvolio) (Ping timeout: 272 seconds)
[14:17:54] <nadio> yawkat: does that offer still stand today? :)
[14:19:44] *** Joins: sixie6e (~sixie6e@2600:1000:b06b:d422:d426:9f8b:563:7a83)
[14:27:23] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[14:33:35] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[14:39:03] *** Parts: sixie6e (~sixie6e@2600:1000:b06b:d422:d426:9f8b:563:7a83) ()
[14:53:28] <int-e> CRYPTLE #19 5/6 / 🟪🟡🟦🟦🟦🟦🟡🟦🟦 / 🟪🟡🟡🟡🟡🟦🟡🟦🟦 / 🟪🟦🟡🟦🟦🟦🟡🟡🟡 / 🟪🟪🟡🟡🟡🟡🟦🟦🟡 / 🟪🟪🟪🟪🟪🟪🟪🟪🟪 / ~30 minutes, and... uh, not happy with the selection of the term
[14:55:48] *** Quits: lithiumpt (~lithiumpt@178.239.165.143) (Ping timeout: 256 seconds)
[15:04:15] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 240 seconds)
[15:07:22] *** Joins: lithiumpt (~lithiumpt@178.239.165.143)
[15:09:35] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[15:14:19] *** Joins: kish` (~aqua@user/aqua)
[15:24:47] *** Joins: Sofia (~sofia@user/sofia)
[15:28:10] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[15:29:46] *** Joins: dez (uid92154@user/dez)
[15:32:04] *** Quits: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney) (Ping timeout: 256 seconds)
[15:33:16] *** Joins: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney)
[15:38:36] *** Quits: steam (~steam@user/steam) (Ping timeout: 240 seconds)
[15:44:33] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[15:52:53] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[16:12:33] *** Joins: Nimrodel (~Nimrodel@athedsl-55480.home.otenet.gr)
[16:14:55] <bw> what is the current state-of-the-art for machine-to-machine api authentication?
[16:15:26] <bw> i mean, mTLS is an option, but if there is something "simpler" i might like that more
[16:20:40] *** Quits: Nimrodel (~Nimrodel@athedsl-55480.home.otenet.gr) (Quit: Leaving)
[16:20:52] <MacGyver> API authentication via mTLS is non-trivial.
[16:21:09] <MacGyver> mTLS auth is on the transport layer, I'm not sure how to kick the credentials up to the application layer is standardized at all.
[16:22:22] <MacGyver> Isn't that usually handled by stuff like OAuth?
[16:22:44] <MacGyver> I tend to loathe, btw, this discrepancy between server and client authentication on different layers.
[16:23:04] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 256 seconds)
[16:39:43] <bw> yeah, getting the creds in the application layer is a problem in some languages
[16:40:36] <bw> we plan to use rust for our server and client atm, but obviously for an api it'd be ideal to allow others to write clients, in whatever language
[16:41:03] <bw> but mTLS has more issues than just that
[16:41:18] <bw> certificates are, imo, overly complicated
[16:41:45] <bw> it just seems like there are a million ways to "use them incorrectly"
[16:43:59] <bw> the basic flow i want is thus: client machines generate something like a keypair locally, register the public key with my api, a human then chooses to "approve" each client. after that, the keypair is used as some factor in authentication
[16:45:04] <bw> but basically, i need to figure out what algos to use for these bits
[16:46:21] <bw> i could imagine ways to use either key-agreement or signatures, but i'm not sure what a good combination is for this use-case
[16:46:31] <bw> and potential pitfalls
[16:47:45] <bw> i'd also like to avoid stuff like signed requests, because that seems like a large burden for clients (am i wrong?)
[16:48:33] <yawkat> if that is your flow you can also just use a token
[16:48:50] <yawkat> without any asymmetric crypto
[16:49:34] <bw> yeah, that's something else i'm considering
[16:49:55] <sonOfRa> We just use oauth2 with client_credentials grant types for machine-to-machine api authentication
[16:49:59] <bw> but something about that makes me a bit uneasy
[16:50:11] <bw> seems like it could be easier to leak, doesn't it?
[16:52:10] <bw> well, an important part of the flow i want is that the human doesn't have to be involved in the machine registering itself, obtaining a credential. obviously i can do that with tokens, but it might be more clunky
[16:52:35] <bw> like, wouldn't i need to store the tokens?
[16:53:50] <bw> ehh, maybe i could avoid that too, the same way i would with another method
[16:53:50] <bw> still, feels like more leak risk to me
[16:54:00] <yawkat> you would also need to store the public key
[16:54:35] <yawkat> tokens are just passwords, except with higher entropy.
[16:55:18] <bw> i could sign it, and they could present that with proof of control of the private key
[16:57:55] <bw> another thing to note: this is going to be on-prem. so i might just have multiple difference choices for how they want to do auth (the customer would pick one, only one would be active)
[17:02:29] *** Joins: brolin (~brolin@179.13.18.50)
[17:06:19] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[17:09:56] *** Quits: frost (~frost@user/frost) (Ping timeout: 245 seconds)
[17:16:21] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[17:16:40] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:18:53] *** flooded is now known as _flood
[17:23:24] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 240 seconds)
[17:24:28] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[17:30:43] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Remote host closed the connection)
[17:31:08] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[17:35:37] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Ping timeout: 240 seconds)
[17:47:30] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[17:48:17] *** Joins: akaWolf (~akaWolf@akawolf.org)
[17:50:34] <TimMc> The benefit of signing over tokens is that even if the receiving server is compromised, signing keys don't have to be rotated.
[17:51:04] <TimMc> Signing keys are only vulnerable to compromise of the sending server; tokens are vulnerable to compromise of either server or the transport.
[17:51:16] <TimMc> (and to accidental logging, etc.)
[17:51:36] <TimMc> So there's a real benefit to signatures.
[17:55:06] <TimMc> However, you could do something in-between, such as having the signing key only be used to sign messages like "I'm making a request to foo-server at time 456789010". Downsides: No signing of paths and parameters, which means tokens are replayable by an attacker if captured. Upsides: Attacker would still have to compromise a server or its logs or TLS; signing would be less of a burden *because* it wouldn't 
[17:55:12] <TimMc> be request-specific.
[17:55:33] <TimMc> I'd go for signed requests, if possible, though.
[17:55:52] <TimMc> (signature over canonicalized parameters)
[17:56:15] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[18:00:32] <TimMc> mTLS would be best, though, if you can configure it to accept any client cert at the TLS layer and then plumb the identity up to the application for authentication.
[18:01:20] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:03:35] *** Joins: aqua (~aqua@user/aqua)
[18:05:55] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 240 seconds)
[18:06:56] *** aqua is now known as kish`
[18:08:52] *** Joins: Guyver2_ (~Guyver@guyver2.xs4all.nl)
[18:11:00] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Ping timeout: 240 seconds)
[18:11:08] *** Guyver2_ is now known as Guyver2
[18:20:24] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[18:25:09] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:28:27] *** Joins: halosghost (~halosghos@user/halosghost)
[18:30:57] *** Joins: programmar (~whatever@118.69.128.37)
[18:31:07] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[18:31:08] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 256 seconds)
[18:31:55] *** Joins: noonien (~noonien@user/noonien)
[18:31:58] <noonien> hello folks
[18:32:25] <noonien> can anyone point me to handshake mechanisms in which the protocol version is also negotiated?
[18:32:30] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[18:32:32] <programmar> ok sorry if this question of mine is so stupid but i feel like it does involve cryptography somehow, but about the problems of "NFTs", i mean how the heck aren't they copy-able or i can just own it by screenshot ? i mean, they post a picture, gives it a price and it's unique online ?
[18:33:04] <programmar> if it's not related to crypto, please suggest me a good channel :(
[18:33:12] <noonien> preferably 2-way handshakes
[18:33:57] <noonien> programmar: this is not the right channnel, maybe there's #crypto or read the topic, also, NFTs are not pictures
[18:34:16] <noonien> this is a common misconception, and why people fall for all the scams
[18:34:58] <programmar> noonien: so.. #programming then ?
[18:35:20] <noonien> no, try cryptocurrency channels, not cryptography channels
[18:35:25] <noonien> or programming channels
[18:35:31] <programmar> ok thank
[18:37:55] <TimMc> programmar: Cryptographically, an NFT is basically a signature over a URL. That URL might point to a picture.
[18:38:13] <TimMc> If that sounds weird and flawed you're not wrong... https://moxie.org/2022/01/07/web3-first-impressions.html
[18:38:59] <artart78> noonien | can anyone point me to handshake mechanisms in which the protocol version is also negotiated? > doesn't SSL/TLS do that?
[18:42:45] <TimMc> programmar: A cryptocurrency channel would be a good place to get more details than that, but be aware that someone might try to sell you an NFT of the Golden Gate Bridge. :-P
[18:44:24] <programmar> no i am reading your link tho to understand more, and all i am interested in is how this weird tech works, not some bullcrap images that costs me a fortune :P
[18:44:53] <noonien> TimMc: a NFT is not a signature over an URL. it's simply a a token, which is usually just a normal number. NFTs have uses beyond representing IDs of memes and worthless jpgs. they can also be used in cryptography protocols where tokens are needed
[18:45:22] <noonien> programmar: the wikipedia page does a good job of explaining what a NFT is
[18:46:15] <noonien> artart78: no, afaik TLS handshake contain plaintext
[18:46:49] *** Quits: jringstad__ (~Amadiro@31.11.55.179) (Quit: Leaving)
[18:46:59] <noonien> for protocol negotiation and identification at least, as well as some other extensions, such as SNI
[18:47:02] <programmar> yea ok, it does say "non-fungible token", but i am having some fun about this in #programming already :P
[18:47:03] <programmar> thk btw
[18:47:17] *** Joins: Amadiro (~Amadiro@31.11.55.179)
[18:48:43] *** Joins: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de)
[18:49:19] *** Quits: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de) (Changing host)
[18:49:19] *** Joins: menace (~someone@user/menace)
[18:49:23] *** menace is now known as Deknos
[18:50:35] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:51:01] *** Parts: programmar (~whatever@118.69.128.37) (Leaving)
[19:00:53] <bw> TimMc: thanks
[19:07:56] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Quit: WeeChat 3.4)
[19:15:50] *** Joins: mikrosis (~mikrosis@dynamic-089-204-138-116.89.204.138.pool.telefonica.de)
[19:19:57] <TimMc> noonien: I'm vaguely aware that NFTs are a more generic system, but most people who talk about them are referring to ones that say "this represents such and such digital asset, at this URL".
[19:21:02] <cehteh> .. where every url eventually becomes a 404    *AT BEST* :)
[19:21:40] <noonien> TimMc: i'm not sure that's a good argument to describe something erroneously
[19:23:10] <TimMc> It appears to be what they were first used for, *and* what they're currently most used for, so... *shrug*
[19:25:11] <noonien> that is also not correct. the tokens are just 256bit IDs in most implementations
[19:25:33] <noonien> what the ID represents are just social contracts, that have nothing to do with cryptography
[19:26:03] <noonien> and interfaces that deal with the NFTs on the blockchains certainly assign no meaning to the IDs
[19:26:51] <noonien> you can find the interface for ERC-721, which i believe is the most used form of NFTs (on eth, and related blockchains atleast), here: http://erc721.org/
[19:29:09] <halosghost> this channel could use a bot
[19:29:14] <halosghost> !offtopic
[19:30:49] <Alipha> noonien | artart78: no, afaik TLS handshake contain plaintext --> yes, indeed. all* handshakes contain plaintext because you're doing a handshake in order to create an encrypted channel
[19:31:50] <Alipha> and yes, TLS negotiates the version during the handshake
[19:32:04] <noonien> agreed. i should have asked a better question
[19:32:49] <noonien> i guess what i'm looking for is an example of the handshake having the least amount of plaintext as possible, but obfuscating the plaintex would also be helpful
[19:38:50] <Alipha> i don't know of any protocols, but at a minimum, both sides could send an ephemeral encryption public key and then start an encrypted connection. then inside the encrypted connection, exchange signing keys, the signature of the handshake (ie, the 2 ephemeral public keys), and protocol version. but if you want to allow for different encryption algorithms (which if you're doing a versioned protocol, then that's
[19:38:52] <Alipha> likely), you'll have to exchange that outside of the encryption channel so that the two endpoints will know what algorithm the encrypted channel will use
[19:40:12] <TimMc> Depends how much flexibility you want.
[19:40:34] <noonien> yeah, that was my thought process as well. perhaps two version mechanisms, one for the initial part of the handshake, where public keys are excanged, and another one for the rest of the handshake. both of which can be sent in just one message. i do wonder about obfuscation techniques for hiding the plaintext version negotiation
[19:41:04] <Alipha> any obfuscation is pretty pointless
[19:41:58] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[19:42:30] <noonien> from a cryptographical point of view, yes, but it does hinder reverse engineering and perhaps fingerprinting since it would "look" random at first glance. however, this might make it even more fingerprint-able
[19:42:34] <Alipha> obfusication would only stop non-serious attackers, whom would probably not be able to attack the algorithm anyway
[19:42:57] <TimMc> If your protocol allows for different *kinds* of public keys, then you need to do protocol negotiation before the public keys are exchanged. Otherwise, could work...
[19:42:57] <Alipha> i suppose the fingerprinting angle might be valid
[19:44:14] <noonien> for obfuscation, i was thinking of initially sending a random number, the same size as the version number, multiplying that number by a pre-shared secret, and using the result to xor the inital version
[19:49:19] <Alipha> what's this pre-shared secret? a hardcoded secret that all clients and servers use?
[19:52:04] <noonien> yes
[19:52:35] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[19:53:30] <halosghost> so then de-obfuscation of the version number is trivial, yes?
[19:53:59] <noonien> yes, just multiply the random number with the pre-shared secret, then xor with the provided obfuscated version
[19:54:14] <iz> clients have the secret also?
[19:54:34] <halosghost> so, if the pre-shared secret is hard-coded and thus easily discoverable by an attacker, the only benefit is gained when the attacker doesn't know to look for it?
[19:54:54] <halosghost> feels like an additional layer of complexity with very little benefit
[19:54:58] <noonien> i would like a better method, but i can't think of one, apart from having random numbers for versions, but this would stop me from having backward compatible changes without keeping a list of version number mappings
[19:55:01] <halosghost> (perhaps that misunderstanding on my part)
[19:55:15] <iz> yeah, it's pretty trivial to reverse engineer something like that out of a client
[19:55:18] <noonien> halosghost: yes, this would be an obfuscation method, not cryptographcally sound
[19:55:21] <iz> even if they use binary obfuscation
[19:55:44] <halosghost> noonien: I feel like if there's something we could learn from TLS regarding protocol versioning, it's that you should try really hard to avoid encoding a version
[19:55:55] <noonien> i'm mostly wondering about reverse engineering and fingerprinting, without access to the binary
[19:56:21] <iz> why wouldn't they have access to the client though?
[19:56:46] <halosghost> As an interesting thought-experiment, you could use the hash of all the public function signatures as the version “number”
[19:56:47] <noonien> in the case where only network captures are available
[19:57:04] <iz> sounds like a contrived example
[19:57:33] <halosghost> it's not clear what it is, it cannot get out-of-sync from the code (since it's dependent specifically on the code), and it tells you immediately if you have a mis-matched version
[19:58:21] <halosghost> the tough bit is that will only tell you if expected versions mismatch; it makes the process of figuring out if one side can choose to speak the other side's language far less trivial
[19:59:31] <noonien> as discussed above, this will probably not be a version number, but just a "stage1 handshake type", since the handshake will probably have 2 stages. one to determine how to setup a secure channel, and once that is done, another mechanism for discovering the capabilities of the channel, over the encrypted channel itself
[20:00:12] <noonien> so, basically [stage 1 handshake type][pubkey]<encrypted channel capabilities/information>
[20:00:39] <noonien> the stage1 handshake type basically specifies what typeof pubkey to use, currently just one is available
[20:00:57] <noonien> nothing apart from that is negociated
[20:01:12] <noonien> before establishing encryption, i mean
[20:13:40] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[20:16:28] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Remote host closed the connection)
[20:20:12] *** Joins: TunnelJ (~TunnelJ@64.201.243.34)
[20:28:33] <Alipha> noonien: or instead of multiplying, just xor
[20:28:51] *** Joins: WishBoy (~WishBoy@user/wishboy)
[20:29:22] <Alipha> send "random_number" and "random_number ^ pre_shared_secret ^ version"
[20:29:29] <Alipha> (where ^ is xor)
[20:31:34] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[20:34:10] *** Joins: goodfella (~archer@user/tessio)
[20:34:31] *** Parts: goodfella (~archer@user/tessio) (WeeChat 3.4)
[20:35:39] *** Joins: goodfella (~archer@user/tessio)
[20:36:20] <goodfella> sorry for the noob question but why in RSA the public key is sent along with the signature ( encoded message ) ?
[20:36:32] <goodfella> for authentication
[20:37:25] <maroon> the public key is needed to verify the signature
[20:38:23] <maroon> the public key is 'e' and 'n', and the signature=message^d mod n, and the verify is signature^e mod n
[20:39:06] <maroon> so whoever's pubkey that is, they're the one who signed the whatever
[20:39:27] <goodfella> ill just post something from the Cisco website that doesn't make sense
[20:39:36] <goodfella> The figure shows an example of RSA authentication. At the local device, the authentication key and identity information are sent through the hash algorithm to form the hash for the local peer (Hash_L). Then the Hash_L is encrypted using the local device’s private encryption key. This creates a digital signature. The digital signature and a digital certificate are forwarded to the remote device.
[20:39:38] <goodfella> The public encryption key for decrypting the signature is included in the digital certificate.
[20:39:59] <goodfella> i understood everything up until the last sentence
[20:40:28] <goodfella> isn't the whole point is for the remote host will have already the key for deciphering the message and not to send it through the internet ? 
[20:41:23] <goodfella> if we sending the means for deciphering our own messages what's the point ?
[20:43:11] <maroon> rsa is not a normal encryption like you're thinking of being done by AES
[20:43:24] <Alipha> goodfella: if you're just sending the public key with no validation that that public key is the correct public key, then indeed, that's no good. but for instance, in https/TLS, our browser receive public keys (certificates) which are then signed by certificate authorities (CAs) so that we know that we can trust the public key that was sent to us
[20:44:10] <maroon> i think the confusing part for him is how "encrypting with the private key" is the same as "creating a signature"
[20:44:33] <Alipha> goodfella: https://www.cs.cornell.edu/courses/cs5430/2015sp/notes/rsa_sign_vs_dec.php
[20:45:43] <noonien> Alipha: yes, that also works, thanks!
[20:46:04] <Alipha> goodfella: it's super annoying that that description you pasted from Cisco is conflating encryption/decryption with signing/verification
[20:46:30] <goodfella> Alipha: ok thanks
[20:46:39] *** Joins: xenoterracide_ (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[20:47:24] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Ping timeout: 240 seconds)
[20:49:50] *** Quits: mweckbecker (~matthias@weckbecker.name) (Ping timeout: 260 seconds)
[20:50:01] *** Joins: System_Error (~SystemErr@user/systemerror)
[20:50:45] *** Joins: sobkas (~sobkas@95.175.17.217)
[20:52:35] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[20:56:22] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:56:27] *** Joins: mweckbecker (~matthias@weckbecker.name)
[21:02:28] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[21:03:17] *** Quits: xenoterracide_ (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Ping timeout: 240 seconds)
[21:09:47] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[21:13:59] *** Joins: xenoterracide_ (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[21:16:19] *** Joins: Guyver2_ (Guyver@guyver2.xs4all.nl)
[21:16:26] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Ping timeout: 260 seconds)
[21:17:23] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[21:17:58] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[21:18:32] *** Quits: xenoterracide_ (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 252 seconds)
[21:19:09] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Ping timeout: 256 seconds)
[21:19:11] *** Guyver2_ is now known as Guyver2
[21:20:57] *** Quits: MajorBiscuit (~MajorBisc@c-001-029-040.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:21:19] *** Joins: xenoterracide_ (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[21:22:35] *** Quits: xenoterracide_ (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Remote host closed the connection)
[21:22:56] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Ping timeout: 252 seconds)
[21:22:57] *** Joins: xenoterracide_ (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[21:28:33] *** Quits: arcadiancomp (~anon626@96-91-245-193-static.hfc.comcastbusiness.net) (Quit: Leaving)
[21:37:31] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[21:40:37] *** Joins: aleck1 (~aleck@user/aleck)
[21:40:54] *** Quits: xx (~xx@user/xx) (Ping timeout: 272 seconds)
[21:43:26] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 272 seconds)
[21:59:16] *** Quits: goodfella (~archer@user/tessio) (Ping timeout: 272 seconds)
[22:01:14] <TimMc> It doesn't have to be sent along.
[22:01:24] <TimMc> oops, was in scrollback
[22:01:58] <int-e> stuck in the past
[22:02:20] <TimMc> I'm always a few lightmilliseconds behind, very frustrating.
[22:02:27] <TimMc> err, milliseconds
[22:17:48] *** Joins: Wintermute (~Wintermut@94.46.93.221)
[22:24:37] *** Quits: GiverOfDomani (sid538075@id-538075.tinside.irccloud.com) ()
[22:28:09] *** Joins: dez (uid92154@user/dez)
[22:31:34] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[22:33:15] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 240 seconds)
[22:41:12] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[22:42:46] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[22:44:03] *** Quits: Pythayr (~pither195@vps-1494dc6f.vps.ovh.us) (Remote host closed the connection)
[22:46:45] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:4939:5e11:de52:5ed3) (Quit: dingdreher)
[22:49:08] *** Joins: Pythayr (~pither195@2600:1700:82f0:2fe0:d8c9:982a:266d:4a30)
[22:53:24] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[22:55:00] *** Quits: Pythayr (~pither195@2600:1700:82f0:2fe0:d8c9:982a:266d:4a30) (Ping timeout: 240 seconds)
[22:55:31] *** Joins: asalor (~asalor@user/asalor)
[23:07:47] *** Joins: Pythayr (~pither195@vps-1494dc6f.vps.ovh.us)
[23:12:55] *** Quits: Pythayr (~pither195@vps-1494dc6f.vps.ovh.us) (Quit: Leaving)
[23:13:17] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-6d72-f335-2f9d-689a.res6.spectrum.com)
[23:15:14] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:16:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:16:31] *** Lord_of_Life_ is now known as Lord_of_Life
[23:21:17] *** Quits: xenoterracide_ (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Ping timeout: 240 seconds)
[23:21:42] *** Joins: Pythayr (~pither195@vps-1494dc6f.vps.ovh.us)
[23:28:59] *** Joins: System_Error (~SystemErr@user/systemerror)
[23:35:35] *** Joins: Malvolio (~Malvolio@user/malvolio)
[23:38:16] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[23:38:49] *** Quits: mikrosis (~mikrosis@dynamic-089-204-138-116.89.204.138.pool.telefonica.de) (Quit: Connection closed)
[23:41:55] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[23:42:53] *** Joins: navigator (~Navigator@2605:6440:3008:d001::a39)
[23:43:21] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[23:44:30] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Ping timeout: 256 seconds)
[23:46:30] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[23:50:33] *** Joins: xenoterracide_ (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[23:51:28] <TunnelJ> any pqc signature folks?
[23:56:29] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[23:56:56] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[23:58:43] *** Joins: mikrosis (~mikrosis@dynamic-089-204-138-116.89.204.138.pool.telefonica.de)
