[00:02:08] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:1173:6f21:463c:2e4f)
[00:03:50] *** Joins: sm2n (ae95cb1267@user/sm2n)
[00:10:09] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[00:11:05] *** Joins: badkins (~badkins@136.56.92.199)
[00:31:45] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[00:37:38] <dpk> is chibi-ffi incapable of generating bindings to procedures with more than four arguments, or am i going mad
[00:37:43] <dpk> (i'm probably going mad)
[00:37:49] <dpk> it gives me "chibi_hyphen.c:25:27: error: use of undeclared identifier 'arg5'"
[00:37:59] <ecraven> I think they just aren't defined
[00:39:33] <dpk> or have i declared them wrong? they're pretty wacky argument types beginning with exactly that argument, making me suspect my way of declaring them is wrong
[00:39:46] <dpk> in C: char *** rep, int ** pos, int ** cut
[00:40:02] <dpk> (i have no idea why double and triple indirection is needed)
[00:40:12] <ecraven> probably for writing
[00:40:31] <ecraven> char ***rep is probably actually a string[]*
[00:43:55] <dpk> okay, yes, if i just change them to (result string), the error about arg5 being undefined goes away. (it then complains about the types being wrong, of course, but one step at a timeÂ â€¦)
[00:44:17] <dpk> so the question is how i declare those types in the .stub file. or if i just give up and write the C binding myself
[00:44:25] <dpk> ecraven: yes, they're results
[00:45:07] <dpk> so i tried (result pointer string), (result (pointer string)), (pointer (result string)) for the first oneÂ â€¦
[00:46:47] <dpk> any kind of nesting of the type modifiers seems to cause it not to generate the args to the C function correctly
[00:48:16] <dpk> ahh, you don't nest them, you list them. i was nearly there with (result pointer string)
[00:48:44] <ecraven> I haven't used the chibi ffi much, sorry :-/
[00:48:59] <ecraven> so (result pointer pointer string)?
[00:50:19] <amazigh> (someone told me to use dlopen...)
[00:51:05] *** Joins: cjb (~cjb@user/cjb)
[00:52:04] <ecraven> well, you shouldn't *need* to, right?
[00:52:08] <ecraven> this should be possible with the ffi
[00:53:07] <amazigh> I am just kidding with dpk 
[00:53:47] <dpk> (result string) turns intoÂ â€¦Â char ** ðŸ¤¨
[00:56:17] <sham1> result probably means that it's an output arg
[00:56:24] <dpk> yes, see https://synthcode.com/scheme/chibi/#h2_CFFI
[00:56:32] <sham1> Well in that case it makes sense
[01:06:47] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[01:10:14] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:1173:6f21:463c:2e4f) (*.net *.split)
[01:10:14] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (*.net *.split)
[01:10:14] *** Quits: taylan (~taylan@user/taylan) (*.net *.split)
[01:10:14] *** Quits: Franciman (~Franciman@mx1.fracta.dev) (*.net *.split)
[01:10:14] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e16c:4540:80bf:ba53) (*.net *.split)
[01:10:14] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[01:10:14] *** Quits: zwr (~zwr@2804:d45:b966:fb00:3ac9:5265:a79e:4a2a) (*.net *.split)
[01:10:15] *** Quits: mononote (~mononote@user/mononote) (*.net *.split)
[01:10:15] *** Quits: seninha (~seninha@user/seninha) (*.net *.split)
[01:10:16] *** Quits: sdu (~doo@185.44.146.165) (*.net *.split)
[01:10:16] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (*.net *.split)
[01:10:16] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[01:10:16] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[01:10:16] *** Quits: shawn (~shawn_w@152.44.212.188) (*.net *.split)
[01:10:17] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:bda3:983e:438:ddd3) (*.net *.split)
[01:10:17] *** Quits: klu (~klu@user/klu) (*.net *.split)
[01:10:17] *** Quits: robin (~robin@user/terpri) (*.net *.split)
[01:10:17] *** Quits: mdhughes (~mdhughes@user/mdhughes) (*.net *.split)
[01:10:17] *** Quits: tokie (~strtok@thales.strtok.net) (*.net *.split)
[01:10:17] *** Quits: akarle (~akarle@user/akarle) (*.net *.split)
[01:10:17] *** Quits: h_m (~h_m@186-149-117-154.bitcointernet.co.za) (*.net *.split)
[01:10:17] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (*.net *.split)
[01:10:17] *** Quits: d_run (sid83858@id-83858.hampstead.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: choas (~lars@ppp-188-174-58-126.dynamic.mnet-online.de) (*.net *.split)
[01:10:18] *** Quits: nrr__ (sid20938@lymington.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: duncanm (sid287146@tinside.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: groovy (sid62069@hampstead.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[01:10:18] *** Quits: rudybot (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com) (*.net *.split)
[01:10:18] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[01:10:18] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (*.net *.split)
[01:10:18] *** Quits: Zipheir (~wcm@98.4.178.27) (*.net *.split)
[01:10:18] *** Quits: lockywol- (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (*.net *.split)
[01:10:18] *** Quits: wingo_ (~wingo@li270-233.members.linode.com) (*.net *.split)
[01:10:18] *** Quits: Cathrinus (~meow@vyos/developer/Lulu) (*.net *.split)
[01:10:18] *** Quits: johnjay (~pi@192.142.100.50) (*.net *.split)
[01:10:19] *** Quits: kori (~kori@user/kori) (*.net *.split)
[01:10:19] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[01:10:19] *** Quits: oneofvalts (~oneofvalt@2001:19f0:6c01:2d9c:5400:2ff:fea2:a386) (*.net *.split)
[01:10:19] *** Quits: Menchers (Menchers@user/menchers) (*.net *.split)
[01:10:19] *** Quits: _________ (~nobody@user/noodly) (*.net *.split)
[01:10:19] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (*.net *.split)
[01:10:19] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[01:10:19] *** Quits: DeeEff (~DeeEff@user/deeeff) (*.net *.split)
[01:10:19] *** Quits: eMBee (~eMBee@realss.com) (*.net *.split)
[01:10:20] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[01:10:20] *** Quits: dbohdan (~dbohdan@user/dbohdan) (*.net *.split)
[01:10:20] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (*.net *.split)
[01:10:20] *** Quits: drakonis (drakonis@user/drakonis) (*.net *.split)
[01:10:20] *** Quits: dpk (~dpk@xn--issum-vva.nonceword.org) (*.net *.split)
[01:10:20] *** Quits: sheb (~sheb@31.223.228.71) (*.net *.split)
[01:10:20] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[01:10:20] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[01:10:20] *** Quits: rickbutton (sid410078@id-410078.helmsley.irccloud.com) (*.net *.split)
[01:10:21] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[01:10:21] *** Quits: fgudin (fgudin@sdf-eu.org) (*.net *.split)
[01:10:21] *** Quits: pinoaffe (~pinoaffep@2a01:4f9:c010:3f2a:1:1:3:10) (*.net *.split)
[01:10:21] *** Quits: casaca (~casaca@user/casaca) (*.net *.split)
[01:10:21] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[01:10:21] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[01:10:21] *** Quits: croc (quassel@2600:3c00::f03c:91ff:fe18:29d6) (*.net *.split)
[01:10:21] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (*.net *.split)
[01:10:21] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[01:10:22] *** Quits: harlchen[m] (~harlchent@2001:470:69fc:105::1:3b28) (*.net *.split)
[01:10:22] *** Quits: elflng (~elflng@5.28.137.182) (*.net *.split)
[01:10:22] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (*.net *.split)
[01:10:22] *** Quits: ramrunner (~dsp@78.141.218.152) (*.net *.split)
[01:10:22] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[01:10:22] *** Quits: light (~light@user/light) (*.net *.split)
[01:10:23] *** Quits: sjamaan (~sjamaan@chicken/developer/sjamaan) (*.net *.split)
[01:10:23] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (*.net *.split)
[01:10:23] *** Quits: topoi (~topoi@user/topoi) (*.net *.split)
[01:10:23] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[01:10:23] *** Quits: pyro (~root@zhaozhou.dcollins.info) (*.net *.split)
[01:10:23] *** Quits: even4void (even4void@came.here.for-some.fun) (*.net *.split)
[01:10:23] *** Quits: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (*.net *.split)
[01:10:23] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (*.net *.split)
[01:10:23] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[01:10:24] *** Quits: fizzie (irc@selene.zem.fi) (*.net *.split)
[01:10:24] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[01:10:24] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[01:10:24] *** Quits: amazigh (~amirouche@user/amirouche) (*.net *.split)
[01:10:25] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[01:10:25] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: lavaflow (~lavaflow@c-76-104-248-66.hsd1.wa.comcast.net) (*.net *.split)
[01:10:25] *** Quits: aoh (~aki@haltp.org) (*.net *.split)
[01:10:25] *** Quits: vito (sid1962@user/vito) (*.net *.split)
[01:10:25] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[01:10:25] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (*.net *.split)
[01:10:25] *** Quits: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com) (*.net *.split)
[01:10:25] *** Quits: Kooda2 (~kooda@natsu.upyum.com) (*.net *.split)
[01:10:26] *** Quits: manumanumanu (~mio@213-67-252-160-no79.tbcn.telia.com) (*.net *.split)
[01:10:26] *** Quits: lloda (~user@11-206-127-185.static.world-connect.ch) (*.net *.split)
[01:10:26] *** Quits: jgart (16dd2205e4@irc.cheogram.com) (*.net *.split)
[01:10:26] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[01:10:26] *** Quits: gwatt (~gmw@2605:2700:0:5::4713:955c) (*.net *.split)
[01:10:26] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[01:10:26] *** Quits: nmeum (~nmeum@barium.8pit.net) (*.net *.split)
[01:10:26] *** Quits: jrmu (jrmu@jrmu.lemon.ircnow.org) (*.net *.split)
[01:10:26] *** Quits: Perryman (~perryman@user/perryman) (*.net *.split)
[01:10:26] *** Quits: libfud (~libfud@2600:1700:48e8:d1cf:aaa1:59ff:fe53:95b8) (*.net *.split)
[01:10:26] *** Quits: weinholt` (weinholt@h-37-123-132-162.A785.priv.bahnhof.se) (*.net *.split)
[01:10:27] *** Quits: evdubs (~evdubs@user/evdubs) (*.net *.split)
[01:10:27] *** Quits: DeeEff_ (~deeeff@user/deeeff) (*.net *.split)
[01:10:27] *** Quits: nazarii[m] (~nazariim]@2001:470:69fc:105::63a) (*.net *.split)
[01:10:27] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[01:10:27] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[01:10:27] *** Quits: fadein (~Erik@c-24-10-167-68.hsd1.ut.comcast.net) (*.net *.split)
[01:10:27] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[01:10:28] *** Quits: teiresias (~chris@blvuug/founder/teiresias) (*.net *.split)
[01:10:28] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[01:10:29] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[01:10:29] *** Quits: tantanmen[m] (~tantanmen@2001:470:69fc:105::1:2212) (*.net *.split)
[01:10:29] *** Quits: Keele (~keele@91-158-68-128.elisa-laajakaista.fi) (*.net *.split)
[01:10:29] *** Quits: deltab (~deltab@user/deltab) (*.net *.split)
[01:10:29] *** Quits: xaltsc (~xaltsc@user/xaltsc) (*.net *.split)
[01:10:29] *** Quits: bsima (~bsima@2604:a880:400:d0::19f1:7001) (*.net *.split)
[01:10:30] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (*.net *.split)
[01:10:30] *** Quits: madage (~madage@user/madage) (*.net *.split)
[01:14:19] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[01:14:19] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:1173:6f21:463c:2e4f)
[01:14:19] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[01:14:19] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[01:14:19] *** Joins: taylan (~taylan@user/taylan)
[01:14:19] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[01:14:19] *** Joins: tokie (~strtok@thales.strtok.net)
[01:14:19] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[01:14:19] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e16c:4540:80bf:ba53)
[01:14:19] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[01:14:19] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:14:19] *** Joins: mononote (~mononote@user/mononote)
[01:14:19] *** Joins: jrmu (jrmu@jrmu.lemon.ircnow.org)
[01:14:19] *** Joins: madage (~madage@user/madage)
[01:14:19] *** Joins: zwr (~zwr@2804:d45:b966:fb00:3ac9:5265:a79e:4a2a)
[01:14:19] *** Joins: sjamaan (~sjamaan@chicken/developer/sjamaan)
[01:14:19] *** Joins: topoi (~topoi@user/topoi)
[01:14:19] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[01:14:19] *** Joins: mjsir911 (~bnc@user/mjsir911)
[01:14:19] *** Joins: pyro (~root@zhaozhou.dcollins.info)
[01:14:19] *** Joins: even4void (even4void@came.here.for-some.fun)
[01:14:19] *** Joins: drakonis (drakonis@user/drakonis)
[01:14:19] *** Joins: DeeEff (~DeeEff@user/deeeff)
[01:14:19] *** Joins: dpk (~dpk@xn--issum-vva.nonceword.org)
[01:14:19] *** Joins: eMBee (~eMBee@realss.com)
[01:14:19] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[01:14:19] *** Joins: shawn (~shawn_w@152.44.212.188)
[01:14:19] *** Joins: sdu (~doo@185.44.146.165)
[01:14:19] *** Joins: nckx (~nckx@tobias.gr)
[01:14:19] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[01:14:19] *** Joins: sheb (~sheb@31.223.228.71)
[01:14:19] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[01:14:19] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[01:14:19] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[01:14:19] *** Joins: Perryman (~perryman@user/perryman)
[01:14:19] *** Joins: xsperry (~xs@user/xsperry)
[01:14:19] *** Joins: lagash (lagash@lagash.shelltalk.net)
[01:14:19] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[01:14:19] *** Joins: Oshawott (~archenoth@2604:3d09:681:f00:bda3:983e:438:ddd3)
[01:14:19] *** Joins: klu (~klu@user/klu)
[01:14:19] *** Joins: ns12 (~ns12@user/ns12)
[01:14:19] *** Joins: sudden (~cat@user/sudden)
[01:14:19] *** Joins: buhman (sid411355@user/buhman)
[01:14:19] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[01:14:19] *** Joins: rickbutton (sid410078@id-410078.helmsley.irccloud.com)
[01:14:19] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[01:14:19] *** Joins: robin (~robin@user/terpri)
[01:14:19] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[01:14:19] *** Joins: libfud (~libfud@2600:1700:48e8:d1cf:aaa1:59ff:fe53:95b8)
[01:14:19] *** Joins: lavaflow (~lavaflow@c-76-104-248-66.hsd1.wa.comcast.net)
[01:14:19] *** Joins: aoh (~aki@haltp.org)
[01:14:19] *** Joins: weinholt` (weinholt@h-37-123-132-162.A785.priv.bahnhof.se)
[01:14:19] *** Joins: Zipheir (~wcm@98.4.178.27)
[01:14:19] *** Joins: lockywol- (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[01:14:19] *** Joins: wingo_ (~wingo@li270-233.members.linode.com)
[01:14:19] *** Joins: Cathrinus (~meow@vyos/developer/Lulu)
[01:14:19] *** Joins: akarle (~akarle@user/akarle)
[01:14:19] *** Joins: johnjay (~pi@192.142.100.50)
[01:14:19] *** Joins: evdubs (~evdubs@user/evdubs)
[01:14:19] *** Joins: vito (sid1962@user/vito)
[01:14:19] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[01:14:19] *** Joins: h_m (~h_m@186-149-117-154.bitcointernet.co.za)
[01:14:19] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[01:14:19] *** Joins: d_run (sid83858@id-83858.hampstead.irccloud.com)
[01:14:19] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[01:14:19] *** Joins: choas (~lars@ppp-188-174-58-126.dynamic.mnet-online.de)
[01:14:19] *** Joins: harlchen[m] (~harlchent@2001:470:69fc:105::1:3b28)
[01:14:19] *** Joins: nrr__ (sid20938@lymington.irccloud.com)
[01:14:19] *** Joins: duncanm (sid287146@tinside.irccloud.com)
[01:14:19] *** Joins: groovy (sid62069@hampstead.irccloud.com)
[01:14:19] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[01:14:19] *** Joins: rudybot (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com)
[01:14:19] *** Joins: hexology (~hexology@user/hexology)
[01:14:19] *** Joins: kori (~kori@user/kori)
[01:14:19] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[01:14:19] *** Joins: mzan (~quassel@mail.asterisell.com)
[01:14:19] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[01:14:19] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[01:14:19] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[01:14:19] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[01:14:19] *** Joins: tantanmen[m] (~tantanmen@2001:470:69fc:105::1:2212)
[01:14:19] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[01:14:19] *** Joins: elflng (~elflng@5.28.137.182)
[01:14:19] *** Joins: oneofvalts (~oneofvalt@2001:19f0:6c01:2d9c:5400:2ff:fea2:a386)
[01:14:19] *** Joins: Menchers (Menchers@user/menchers)
[01:14:19] *** Joins: _________ (~nobody@user/noodly)
[01:14:19] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[01:14:19] *** Joins: Oxyd (~oxyd@user/oxyd)
[01:14:20] *** Joins: dbohdan (~dbohdan@user/dbohdan)
[01:14:20] *** Joins: bsima (~bsima@2604:a880:400:d0::19f1:7001)
[01:14:20] *** Joins: teiresias (~chris@blvuug/founder/teiresias)
[01:14:20] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[01:14:20] *** Joins: fadein (~Erik@c-24-10-167-68.hsd1.ut.comcast.net)
[01:14:20] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[01:14:20] *** Joins: dstein64 (~dstein64@dannyadam.com)
[01:14:20] *** Joins: nmeum (~nmeum@barium.8pit.net)
[01:14:20] *** Joins: lonjil (~quassel@user/lonjil)
[01:14:20] *** Joins: gwatt (~gmw@2605:2700:0:5::4713:955c)
[01:14:20] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[01:14:20] *** Joins: amazigh (~amirouche@user/amirouche)
[01:14:20] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[01:14:20] *** Joins: lloda (~user@11-206-127-185.static.world-connect.ch)
[01:14:20] *** Joins: manumanumanu (~mio@213-67-252-160-no79.tbcn.telia.com)
[01:14:20] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[01:14:20] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[01:14:20] *** Joins: Kooda2 (~kooda@natsu.upyum.com)
[01:14:20] *** Joins: light (~light@user/light)
[01:14:20] *** Joins: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com)
[01:14:20] *** Joins: croc (quassel@2600:3c00::f03c:91ff:fe18:29d6)
[01:14:20] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[01:14:20] *** Joins: AndrewYu (~andrew@user/andrewyu)
[01:14:20] *** Joins: casaca (~casaca@user/casaca)
[01:14:20] *** Joins: pinoaffe (~pinoaffep@2a01:4f9:c010:3f2a:1:1:3:10)
[01:14:20] *** Joins: fgudin (fgudin@sdf-eu.org)
[01:14:20] *** Joins: phoe (~phoe@user/phoe)
[01:14:20] *** Joins: ramrunner (~dsp@78.141.218.152)
[01:14:20] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[01:14:20] *** Joins: deltab (~deltab@user/deltab)
[01:14:20] *** Joins: Keele (~keele@91-158-68-128.elisa-laajakaista.fi)
[01:14:20] *** Joins: fizzie (irc@selene.zem.fi)
[01:14:43] *** Joins: badkins (~badkins@136.56.92.199)
[01:16:18] *** Quits: nmeum (~nmeum@barium.8pit.net) (Remote host closed the connection)
[01:16:54] *** Joins: nmeum (~nmeum@barium.8pit.net)
[01:17:40] *** Quits: taiju (~taiju@240b:253:ec40:2400:2d48:f53f:bd4f:c325) (Ping timeout: 264 seconds)
[01:18:31] *** Joins: taiju (~taiju@240b:253:ec40:2400:2d48:f53f:bd4f:c325)
[01:20:08] <amazigh> rejoince wasamasa is gone!
[01:20:18] <amazigh> oops!
[01:20:31] <sham1> Rude
[01:20:37] <amazigh> :D
[01:34:45] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:1173:6f21:463c:2e4f) (Quit: Leaving...)
[01:36:43] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:1173:6f21:463c:2e4f)
[01:41:39] *** Joins: seninha (~seninha@user/seninha)
[01:44:51] *** Quits: h_m (~h_m@186-149-117-154.bitcointernet.co.za) (Remote host closed the connection)
[01:47:41] *** Joins: h_m (~h_m@186-149-117-154.bitcointernet.co.za)
[01:49:00] <ecraven> dpk: I don't understand the code chibi-ffi generates at all :-/
[01:49:23] <ecraven> (define-c string test ((result pointer pointer string) (result pointer pointer int) (result pointer pointer int))) results in code that doesn't look correct to me at all
[01:50:01] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 256 seconds)
[01:58:11] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 252 seconds)
[02:03:09] <dpk> using pointer resulted for me in it not generating the right number of args to the function!
[02:03:13] <dpk> i had to use reference instead
[02:07:22] *** Parts: tokie (~strtok@thales.strtok.net) (WeeChat 1.9.1)
[02:09:06] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:1173:6f21:463c:2e4f) (Quit: Leaving...)
[02:10:36] *** Joins: seninha (~seninha@user/seninha)
[02:11:55] *** Joins: xcmw (~textual@dyn-72-33-2-173.uwnet.wisc.edu)
[02:16:40] *** Joins: tripfand_ (~tripfanda@2a00:a040:19e:72a1:1173:6f21:463c:2e4f)
[02:17:01] *** Quits: tripfand_ (~tripfanda@2a00:a040:19e:72a1:1173:6f21:463c:2e4f) (Client Quit)
[02:21:26] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:1173:6f21:463c:2e4f)
[02:22:33] *** Quits: xsperry (~xs@user/xsperry) ()
[02:38:39] *** Joins: Lysandros (~Lysandros@user/lysandros)
[02:43:30] *** Joins: xsperry (~xs@user/xsperry)
[03:03:16] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (Ping timeout: 245 seconds)
[03:21:59] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:34:35] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:34:49] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:35:21] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[03:43:28] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 264 seconds)
[03:45:28] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:50:22] *** Joins: klovett (~klovett@107.115.32.2)
[03:51:25] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[03:51:35] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:26:40] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 264 seconds)
[04:27:46] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:30:15] *** Joins: badkins (~badkins@136.56.92.199)
[04:55:00] *** lockywol- is now known as lockywolf
[05:06:55] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:08:50] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:11:16] *** Joins: badkins (~badkins@136.56.92.199)
[05:16:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[05:17:27] *** hexology is now known as hexology_
[05:17:51] *** hexology_ is now known as hexology__
[05:18:08] *** hexology__ is now known as hexology`
[05:18:12] *** hexology` is now known as hexology_`
[05:18:57] *** hexology_` is now known as hexology
[05:22:15] *** Joins: klovett_ (~klovett@107.115.32.2)
[05:23:54] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[05:25:24] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[05:26:32] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[05:30:32] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[05:30:51] *** Joins: madage (~madage@user/madage)
[05:31:49] *** Parts: jrmu (jrmu@jrmu.lemon.ircnow.org) ()
[05:50:52] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[05:51:25] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[05:59:40] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 264 seconds)
[06:02:27] *** Joins: s-liao (~s-liao@101.86.99.70)
[06:02:49] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:08:40] *** Quits: taiju (~taiju@240b:253:ec40:2400:2d48:f53f:bd4f:c325) (Ping timeout: 264 seconds)
[06:10:28] *** Quits: jao (~jao@45.152.183.60) (Ping timeout: 264 seconds)
[06:14:38] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Quit: WeeChat 3.3)
[06:14:54] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[06:17:26] <lockywolf> I found that fontification is great.
[06:17:51] <lockywolf> I have most greek symbols fontified in Emacs.
[06:18:48] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[06:20:20] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[06:22:05] *** Joins: s-liao (~s-liao@101.86.99.70)
[06:22:10] <lockywolf> It would have been great to have fontification right in the eye neurons, but alas.
[06:30:46] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[06:38:11] *** Joins: badkins (~badkins@136.56.92.199)
[07:04:26] *** Joins: hiruji (~hiruji@user/hiruji)
[07:06:28] *** Joins: pi0 (~default@user/pi0)
[07:06:48] <pi0> how do you write an or statement in scheme?
[07:08:19] <light> (or ...)
[07:10:03] <mdhughes> Or (logior) - logical inclusive or
[07:11:38] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:11:42] <pi0> ~paste
[07:11:49] <pi0> is there a recommended paste place
[07:12:23] <ns12> Why do Schemers love to use the unofficial RnRS "standards" instead of using the real IEEE Scheme standard?
[07:12:50] <light> pi0: https://paste.debian.net
[07:13:33] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[07:15:21] <pi0> https://paste.debian.net/1221304/
[07:15:45] <pi0> it still mul's even if numbers are all positive 
[07:16:01] <light> what is this procedure supposed to do?
[07:16:42] <pi0> A function that takes three real numbers as arguments. It returns the product of these three numbers if at least one of them is negative.
[07:16:47] <pi0> i need to create this function
[07:17:55] <light> do you know what or does?
[07:18:35] <pi0> i ran it
[07:18:38] <pi0> i did it
[07:18:44] <ns12> You probably want something like this: (and (and (real? a) (real? b) (real? c)) (or (negative? a) (negative? b) (negative? c)))
[07:18:48] <pi0> but even if i do (mul 1 2 3)
[07:18:51] <pi0> i get 6
[07:19:00] <pi0> but none of the numbers are negative
[07:19:49] <light> pi0: or stops as soon as it evaluates an expression to true
[07:21:06] <light> so if you gave it a=3,b=cat,c=#f the result of your or expression would still be #t and it would try to multiply 3 * cat * #f
[07:23:04] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 264 seconds)
[07:23:16] <pi0> should not eval
[07:23:25] <pi0> it should print wrong args
[07:23:44] <pi0> even if a=1 b=2 c=3
[07:24:00] <pi0> cat and #f are not real numbers 
[07:24:01] <light> you need to re-write your procedure with the correct logic
[07:24:50] <light> my understanding is that they all need to be real numbers, and one of them needs to be negative? otherwise return an error
[07:25:14] <pi0> correct
[07:25:19] <light> how would you express this?
[07:25:32] <pi0> that is were i am asking for advice :)
[07:25:48] <light> how do you check that all inputs are real numbers?
[07:25:56] <light> i.e. how do you check that a is real, and b is real, and c is real?
[07:27:56] <ns12> The logic is: (and (real? a) (real? b) (real? c) (or (negative? a) (negative? b) (negative? c)))
[07:28:49] <light> this is his homework
[07:29:37] <pi0> yes inputs will be real numbers 
[07:29:40] <pi0> and yep hw
[07:29:46] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[07:30:09] <ns12> light: Sorry. I wrongly assumed that it is a beginner's self-learning exercise.
[07:31:59] <pi0> well you could call it that
[07:35:34] <pi0> can someone explain sort in scheme
[07:37:02] <ns12> pi0: Which Scheme implementation are you using?
[07:37:50] <ns12> There is no "sort" procedure in R5RS or R7RS.
[07:40:22] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:40:44] <light> he's using racket, sort takes a list and a procedure that compares the items in that list, e.g. (sort '(3 4 1 2) <)
[07:40:52] <pi0> well shoot
[07:40:56] <pi0> what does dr racket use
[07:43:31] <ns12> Documentation for "sort": https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._sort%29%29
[07:43:32] <rudybot> https://teensy.info/PFnY2tjHUT
[07:45:27] <ns12> pi0: There are various languages in dr racket that can be selected using the "language" menu in the menu bar.
[07:47:07] <ns12> In the Dr Racket REPL, there will be something like "Welcome to DrRacket, version 7.2 [3m]. Language: racket, with debugging; memory limit: 128 MB.". What does your say?
[07:47:25] <ns12> s/your/yours/
[07:52:31] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[07:52:57] <pi0> 8.3
[07:55:17] <ns12> What does the "Language: ..." part say?
[07:58:07] *** Joins: mononote (~mononote@user/mononote)
[07:59:52] *** Joins: sbodin_ (~sbodin@185.12.224.251)
[08:02:49] <ns12> pi0: Btw, there is a #racket channel if you need help with DrRacket.
[08:09:13] *** Parts: sbodin_ (~sbodin@185.12.224.251) ()
[08:24:26] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[08:24:50] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[08:29:04] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 264 seconds)
[08:30:16] <ns12> Will there be an object system like Common Lisp's CLOS in R7RS large?
[08:36:11] <mdhughes> But R6RS has list-sort, vector-sort, vector-sort! as one might expect.
[08:59:35] <Zipheir> ns12: I seem to remember that being off-limits as a 'rat-hole'.
[09:00:01] <Zipheir> No two programmers can agree on the meaning of 'object', it seems.
[09:19:04] <mdhughes> An object(n) is a thing you can object(v) to.
[10:02:19] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[10:18:44] *** Joins: s-liao (~s-liao@101.86.99.70)
[10:32:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:50:29] <pi0> https://dpaste.org/mKck
[10:50:33] <pi0> out of bonds
[10:54:59] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:97df:ebe3:251c:f0f6)
[11:16:53] <wasamasa> amazigh: hmm?
[11:17:13] * amazigh was trying to make a joke
[11:17:17] <amazigh> sorry not funny
[11:18:21] <wasamasa> but yeah, I was gone for a whole afternoon/evening
[11:19:40] <amazigh> I was joking  after the netsplit
[11:21:01] <wasamasa> I see
[11:38:48] <dpk> i would see adopting CLOS or a CLOS-like system straight up as an unforgivable violation of the Prime Clingerism
[11:40:55] <dpk> i can't think of a more canonical example of piling of feature on top of feature. at least in the Lisp world
[11:41:20] <amazigh> aren't generics CLOS-like?
[11:41:51] <amazigh> also I have been thinking single-dispatch is enough for my /use-case/ (that is support the several implementation of the same interface)
[11:41:52] <dpk> exactly ;-)
[11:44:35] <amazigh> I started to implement my `lambda*` that I eventually dubbed `gamma` that is merge of `case-lambda`, `match` and `generic` it seems without syntax-case it is not possible to implement the prefix compression I was thinking about
[11:45:12] <dpk> prefix compression?
[11:46:19] * dpk . o O ( surely Î¼-calculus comes after Î»-calculusÂ â€¦ )
[11:46:36] <amazigh> yes, such as (match foobar ((? predicate? a) x ...) ((? predicate? a) y)) is turned into (match foobar ((? predicate a) rest ...) (match rest ((x ...) ...) ((y ...)))
[11:46:47] <dpk> (oh, it existsÂ â€¦ https://en.wikipedia.org/wiki/Modal_Î¼-calculus)
[11:47:08] <amazigh> prefix compression in that case, will factor the predicate? test to one level up, so that the check is done only once.
[11:47:20] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[11:47:22] <dpk> hmm
[11:47:47] <amazigh> hmm?
[11:48:49] <sham1> Gamma calculus sounds like an interesting name
[11:48:49] <dpk> that would, i think, be possible in SRFI 148 eager syntax-rules, and thus ipso facto in vanilla syntax-rules as well. however, i think the vanilla s-r version would be hairier than even i'm willing to contemplate ;-)
[11:49:10] <sham1> Well syntax-case is coming
[11:49:25] * dpk checks the latest voting
[11:49:40] <amazigh> also, without some kind of predicates algebra it is not possible to warn the user about programming errors.
[11:50:08] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[11:50:19] <amazigh> I do not believe predicates algebra will make it to R7RS.
[11:50:38] <sham1> Also, is there any agreement on the keyword syntax? Because #:foo might probably be the best option. And it'd allow for #:|this as well|
[11:51:41] <sham1> There exists prior art, after all
[11:51:57] <dpk> no, lexical notation will be handled last, though i've tried to make the case that if we do adopt a keyword system with keyword datums distinct from symbols or identifiers, we should make an exception and decide the lexical notation right away
[11:52:13] <amazigh> I was under the impression that let-keywords solved the problem of keywords.
[11:52:34] <amazigh> what's the point of having a separate type for keywords?
[11:53:24] <dpk> because they're fairly useless if you have to use (string->keyword ...) every time you want to pass a keyword argument, and although macros can help bridge the gap in the meanwhile, Kawa (and slightly less importantly Racket) interoperability with actual literal keyword datums
[11:53:29] <sham1> I feel that keywords should be disjointed from symbols. Of course having them be just sugar or special looking symbol also works, but it would be nicer for implementations since they can easily detect keyword arguments during evaling
[11:53:32] <dpk> err. * interoperability needs
[11:54:27] <amazigh> I am still fuzzy about this keywords thing. I will surely vote no for such SRFI, except let-optionals / let-keywords.
[11:54:30] <sham1> One could define a keyword as a symbol with a certain syntax, like "Keyword is a symbol where the first character is :" or something. It'd just be annoying to have to quote it for kwargs
[11:55:23] <amazigh> how does keywords with a disjoint type, adapt to match?
[11:55:38] <sham1> You just match them. eqv?
[11:55:57] <amazigh> would it be possible to do something like (match-lambda ((#:my-keyword foo . rest) (frob foo)))
[11:56:00] <sham1> Or maybe even eq? if you want them interned
[11:56:08] <sham1> I'd like that
[11:56:51] <amazigh> but then it mess a little bit match semantic, because #:keyword as part of signature have no ordering unlike matched s-expr where the order matters.
[11:57:15] <dpk> amazigh: let-keywords requires consing a rest argument list
[11:57:27] <dpk> have you read my review? ;-)
[11:57:36] <dpk> (if not, wait a while, there's a major revision upcoming)
[11:57:47] <sham1> Lots of alloc
[11:58:09] <amazigh> yes maybe no, that optimization is an short-term quick-win, with proper partial evaluation, one can avoid the consing.
[12:00:35] <dpk> i'm not sure partial evaluation can completely eliminate consing
[12:00:38] <dpk> in this case
[12:00:50] <sham1> Not generally, at least
[12:00:58] <amazigh> I mean, at least as part of the language, the charter doesn't forbid consing.
[12:01:07] <amazigh> s/I mean,//
[12:01:40] <sham1> Well it'd be weird for a managed language to forbid automatically allocating stuff
[12:01:40] <amazigh> so far, keywords seems like pilling up features 
[12:03:38] * amazigh can't find the charter at http://www.scheme-reports.org/
[12:04:07] <dpk> we need some form of keywords for some proposals currently on the dockets list. we can change those proposals to only use positional arguments, of courseÂ â€¦
[12:04:07] <amazigh> R7RS-small charter at http://www.scheme-reports.org/2009/working-group-1-charter.html
[12:05:10] <sham1> Yeahâ€¦ no thanks. Making things with a lot of (probably optional) positional arguments is pain
[12:07:38] <amazigh> I will read the next review when it is published, I hope there will practical proof of the usefulness of keywords as a disjoint type that avoid extra-consing :)
[12:08:21] <dpk> jcowan: are all the votes cast for the Yellow docket so far by people who are actually correctly registered to vote in the R7RS large process?
[12:08:26] <dpk> if so â€¦ *shudder*
[12:08:49] <sham1> On the Google form?
[12:08:51] <amazigh> the only argument I read about keywords, is that it allows sloppy programming as in: "I can add a keyword here, check it is set, then bypass some existing machinery to make it do what I want in production code"
[12:08:51] <dpk> i hope the people who decided to write in their own votes are the only ones with such a warped understanding of what we're actually trying to do here
[12:09:24] <amazigh> what are you trying to do here? I am not sure I understand.
[12:09:28] <sham1> amazigh: readability
[12:09:51] <dpk> because i still don't understand what "Only as a SRFI" is meant to mean, but all the interpretations i can think of suggest the person did not know what R7RS Large is about
[12:10:10] <amazigh> dpk: ty for the explanation.
[12:10:46] <sham1> "I don't want it in R7 proper but I want it available as only an SRFI" so yeah, probably doesn't get what R7-large is
[12:11:44] <dpk> anyway, i'm not actually too dissatisfied with the results of the Yellow ballot so far
[12:12:16] <dpk> there are things that have firm majorities which i voted against, but of those, the only one i'm close to being unhappy about it SRFI 26 (cut/cute)
[12:13:01] <amazigh> how do you read the results?
[12:13:04] <dpk> and then there's explicit renaming, about which the less said the better
[12:13:06] <amazigh> I mean what is the url?
[12:13:07] <dpk> https://docs.google.com/forms/d/e/1FAIpQLScAfyfkdq2eL5LgrUyatufD-iIcKGCKIOq-A6IrmsKW-RxdkQ/viewanalytics
[12:14:24] <dpk> but i will huff and puff about that at a later date until we get a spec that's actually technically implementable
[12:22:13] <sham1> What is the process of actually getting one's vote counted
[12:23:29] <amazigh> see /topic
[12:24:31] <sham1> But that's the ballot
[12:24:52] <amazigh> yes, you vote count if you take part in the ballot
[12:25:01] <sham1> Oh good
[12:25:20] <sham1> So no special stuff needed beside that
[12:25:34] <amazigh> indeed
[12:32:42] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:af82:872:cdf:b83b)
[12:52:38] <dpk> sham1: no, you need to register to vote!
[12:52:49] <dpk> you send a mail to the scheme-reports-wg2 list
[12:52:57] <dpk> withÂ â€¦Â some biographical information
[12:53:04] <dpk> hang on, let me find the actual process
[12:53:29] <sham1> I was wondering whether there was another step
[12:55:08] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:05:12] <dpk> all i can find is one person's registration, sigh. but based on that, just send an email with some information on what interests you about Scheme to the scheme-reports-wg2 mailing list
[13:05:29] <dpk> and the name you vote(d) under
[13:06:28] <sham1> I'll send it later today
[13:15:40] <amazigh> \o/
[13:19:47] *** Quits: xcmw (~textual@dyn-72-33-2-173.uwnet.wisc.edu) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:42:39] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:07:46] *** Quits: eMBee (~eMBee@realss.com) (Ping timeout: 265 seconds)
[14:09:24] *** Joins: s-liao22 (~s-liao@101.86.99.70)
[14:09:32] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:26:32] *** Quits: s-liao22 (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:28:04] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:39:55] *** Joins: winning-luser (~winning-l@2601:8c1:80:70d0::756)
[14:44:25] <dpk> so, https://gitlab.com/dpk/presrfis/-/blob/master/syntax-case-extensions.md is more or less ready to be SRFI'd, though i won't actually submit it until (a) the Yellow ballot is finalized and (b) i have more time to actually shepherd it through the process (i expect M N-W will have much to say about it)
[14:46:32] <dpk> coincidentally, those two essentially align
[14:52:47] <lockywolf> I liked kwards when my main programming language was Matlab.
[14:52:54] <lockywolf> *kwargs
[14:53:12] <lockywolf> Makes the code much more self-documenting.
[14:55:56] <sham1> Makes MATLAB almost tolerable
[14:55:57] <sham1> Almost
[14:58:45] <lockywolf> matlab is okay...
[14:58:53] <lockywolf> it's kinda like Fortran
[14:59:00] <lockywolf> with bells and whistles
[15:00:05] * lockywolf used to program Matlab Java-style, and Scheme Matlab-style, and now C++ Scheme-style.
[15:00:39] <lockywolf> In half year at a new job, I haven't written a single loop.
[15:05:43] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[15:17:25] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[15:18:40] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:af82:872:cdf:b83b) (Ping timeout: 256 seconds)
[15:21:30] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[15:21:46] <winning-luser> powerful
[15:30:45] *** Joins: siiky (~siiky@2001:8a0:ff7d:dd00:1f5d:a8bd:3bdc:60a8)
[15:35:22] <AndrewYu> C++ scheme style- 
[15:35:33] * AndrewYu implements (if) with preprocessor macros
[15:35:55] <AndrewYu> I don't think C++ compilers turn your tail-call recursions into GOTOs
[15:36:09] *** Joins: jao (~jao@45.152.183.54)
[15:37:08] *** Joins: badkins (~badkins@136.56.92.199)
[15:40:07] *** Joins: amoe (~amoe@visarend.solasistim.net)
[15:41:40] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 264 seconds)
[15:44:13] <amazigh> there is https://github.com/pietro/gcc-musttail-plugin
[15:49:25] <sham1> A sufficiently smart C or C++ implementation will do tail calls
[15:49:31] <sham1> But yeah, not required
[15:54:16] *** Quits: jao (~jao@45.152.183.54) (Ping timeout: 264 seconds)
[15:55:04] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[15:56:08] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[15:57:49] <phoebos> hi. i have a function using a bunch of variables to store parts of the calculation before doing the final calculation, and i'm using let* for this- (something like (let* ((x 1) (y 2)) (+ x y))
[15:58:51] <phoebos> i want to wrap this into a function but just putting (define ) makes the function call a function called the result of my let
[15:59:02] <phoebos> i just want to return the value of the let
[15:59:08] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[15:59:49] <phoebos> i may be approaching this in a too procedural way
[16:00:21] <amazigh> (define my-proc (lambda () ...))
[16:00:47] <amazigh> such as (define my-proc (lambda () (let* (...) (+ x y)))
[16:03:04] <phoebos> ok thanks
[16:03:28] <phoebos> if my function takes arguments do i need to call the lambda inside the function
[16:04:08] <phoebos> like (lambda (x y) (let* (...) (+ x y)) num1 num2)
[16:04:55] <phoebos> at the moment my-proc is returning the lambda function, not its result
[16:08:21] <phoebos> ah, i had parantheses in the wrong place
[16:08:25] <phoebos> thanks amazigh
[16:22:31] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 250 seconds)
[16:23:56] *** Joins: s-liao (~s-liao@101.86.99.70)
[16:24:00] *** Joins: johnjay (~pi@192.142.100.50)
[16:28:33] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:d1b6:b8ac:f1fb:836e)
[16:28:33] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:d1b6:b8ac:f1fb:836e) (Changing host)
[16:28:34] *** Joins: skapata (~Skapata@user/skapata)
[16:33:07] <phoebos> is it more idiomatic to make a lot of small functions for each subexpression in an expression or to use variables to store each step of the calculation?
[16:33:34] <phoebos> or, which is more common
[16:38:08] *** Joins: em-bee (~eMBee@realss.com)
[16:52:45] <amazigh> it depends
[16:59:04] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 264 seconds)
[17:28:11] *** Quits: kopiyka (~user@2001:983:fe8b:1:b26e:bfff:fe2b:503f) (Ping timeout: 268 seconds)
[17:48:17] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[17:49:57] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[17:50:40] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 264 seconds)
[17:56:53] *** Joins: seninha (~seninha@user/seninha)
[18:00:19] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[18:01:22] *** Joins: s-liao (~s-liao@101.86.99.70)
[18:15:12] *** Joins: badkins (~badkins@136.56.92.199)
[18:19:23] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[18:23:42] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[18:25:07] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:1173:6f21:463c:2e4f) (Read error: Connection reset by peer)
[18:26:33] *** Joins: tripfandango (~tripfanda@5.29.56.77)
[18:31:29] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Ping timeout: 252 seconds)
[18:34:06] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[18:35:35] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[18:36:31] *** Joins: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net)
[18:44:46] *** Joins: jao (~jao@45.152.183.54)
[18:44:59] *** Quits: xsperry (~xs@user/xsperry) (Killed (NickServ (GHOST command used by ahahaha!~xs@cpe-188-129-101-182.dynamic.amis.hr)))
[18:45:29] *** Joins: xsperry (~xs@user/xsperry)
[18:47:53] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[19:07:44] <mdhughes> I tend to use (let*) and a long chain of intermediate step vars, so I can read what I'm doing later. It's not a huge drain on resources.
[19:08:16] <mdhughes> Of course if anything's repeated, it gets its own function.
[19:09:40] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[19:12:32] *** Joins: badkins (~badkins@136.56.92.199)
[19:26:11] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[19:33:38] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e16c:4540:80bf:ba53) (Ping timeout: 252 seconds)
[19:34:57] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:35:18] *** Joins: klovett (~klovett@107.115.32.2)
[19:40:43] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c8e1:ef7b:3ea9:8366)
[19:42:48] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[19:54:15] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:97df:ebe3:251c:f0f6) (Quit: WeeChat 2.8)
[19:56:08] *** Joins: mononote (~mononote@user/mononote)
[19:56:08] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[19:56:47] *** Joins: klovett_ (~klovett@107.115.32.2)
[19:59:04] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 264 seconds)
[20:02:44] *** Joins: klovett (~klovett@107.115.32.2)
[20:03:46] *** Joins: klovett__ (~klovett@107.115.32.2)
[20:04:21] *** Joins: klovett___ (~klovett@107.115.32.2)
[20:05:40] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 264 seconds)
[20:07:08] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[20:08:40] *** Quits: klovett__ (~klovett@107.115.32.2) (Ping timeout: 264 seconds)
[20:13:15] *** Joins: mario-go` (~user@static.172.139.76.144.clients.your-server.de)
[20:13:22] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (Ping timeout: 256 seconds)
[20:13:47] *** Joins: mala (~mala@user/malaclyps)
[20:14:06] *** Joins: sp1ff` (~user@c-73-189-25-64.hsd1.ca.comcast.net)
[20:14:30] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: taw10 (~taw@46.235.227.49) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: malaclyps (~mala@user/malaclyps) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: mario-goulart (~user@chicken/developer/mario-goulart) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: nisstyre (~wes@user/nisstyre) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: samph (~quassel@li1210-9.members.linode.com) (Ping timeout: 256 seconds)
[20:15:15] *** Joins: samph (~quassel@li1210-9.members.linode.com)
[20:16:08] *** Joins: taw10 (~taw@46.235.227.49)
[20:16:12] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[20:16:19] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[20:20:35] *** Joins: klovett (~klovett@107.115.32.2)
[20:22:26] *** Quits: klovett___ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[20:28:18] *** Joins: nisstyre (~wes@user/nisstyre)
[20:29:31] *** Joins: klovett_ (~klovett@107.115.32.2)
[20:29:53] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:30:28] *** Joins: badkins (~badkins@136.56.92.199)
[20:32:34] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 268 seconds)
[20:34:08] *** Joins: klovett (~klovett@107.115.32.2)
[20:34:15] *** Quits: sp1ff` (~user@c-73-189-25-64.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[20:34:49] *** Joins: sp1ff`` (~user@c-73-189-25-64.hsd1.ca.comcast.net)
[20:35:04] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 264 seconds)
[20:36:02] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[20:38:54] *** Joins: klovett_ (~klovett@107.115.32.2)
[20:41:04] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 264 seconds)
[20:42:52] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Ping timeout: 264 seconds)
[20:59:59] *** Quits: zwr (~zwr@2804:d45:b966:fb00:3ac9:5265:a79e:4a2a) (Ping timeout: 252 seconds)
[21:05:47] *** Joins: klovett (~klovett@107.115.32.2)
[21:08:20] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[21:24:55] *** Joins: lazr (~lazr@45.76.248.123)
[21:26:45] *** Joins: dokma (~user@dh207-49-247.xnet.hr)
[21:27:09] *** Parts: dokma (~user@dh207-49-247.xnet.hr) (ERC (IRC client for Emacs 27.1))
[21:30:00] *** Joins: seninha (~seninha@user/seninha)
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:43] *** Joins: ns12 (~ns12@user/ns12)
[21:30:44] *** Joins: zwr (~zwr@2804:d45:b966:fb00:3e37:1000:411e:c48c)
[21:30:44] *** Joins: sbodin (~sbodin@185.12.224.251)
[21:56:20] *** Joins: badkins (~badkins@136.56.92.199)
[21:56:31] *** Joins: klovett_ (~klovett@107.115.32.2)
[21:59:54] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[22:01:22] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[22:03:06] *** Joins: badkins (~badkins@136.56.92.199)
[22:07:48] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[22:09:16] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 264 seconds)
[22:18:07] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Remote host closed the connection)
[22:18:32] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[22:30:27] *** Quits: jao (~jao@45.152.183.54) (Ping timeout: 256 seconds)
[22:31:31] *** Parts: mario-go` (~user@static.172.139.76.144.clients.your-server.de) ()
[22:32:45] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:40:30] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[22:40:38] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 252 seconds)
[22:42:46] *** Joins: jao (~jao@45.152.183.62)
[22:53:40] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 264 seconds)
[22:56:00] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 256 seconds)
[22:58:09] *** Joins: badkins (~badkins@136.56.92.199)
[23:02:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[23:12:25] *** Joins: badkins (~badkins@136.56.92.199)
[23:14:44] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Remote host closed the connection)
[23:32:12] *** Joins: Inline (~Inline@aftr-37-201-240-100.unity-media.net)
[23:35:33] *** Quits: Perryman (~perryman@user/perryman) (Quit: Konversation terminated!)
[23:38:33] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c5ed:3c67:1c78:cc2e)
[23:38:34] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c5ed:3c67:1c78:cc2e) (Changing host)
[23:38:34] *** Joins: skapata (~Skapata@user/skapata)
[23:48:15] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:49:20] <wasamasa> amazigh: do you plan to look into making the scheme comparator thing more accurate or is it a patch-only thing?
[23:50:50] <wasamasa> amazigh: maybe have something in-between and ask people familiar with the scheme in question to fill out some questionnaire
[23:58:06] *** Joins: kopiyka (~user@2001:983:fe8b:1:b26e:bfff:fe2b:503f)
