[00:37:19] <FromDiscord> <Elegantbeef> @geekrelief\: i have to ask, have you taken a look at nimscripter v2 yet?
[00:53:29] <FromDiscord> <geekrelief> In reply to @Elegantbeef "<@109484839480107008>\: i have to": Yeah I just tried it out a bit last night.
[00:54:22] <FromDiscord> <geekrelief> It's been a while since I last looked at it.  It was only a cursory glance just to see if things were working.
[00:55:28] <FromDiscord> <geekrelief> It feels nicer compared to last time I checked.  I'm looking forward to see how this works out with TM.
[00:59:13] <FromDiscord> <Elegantbeef> Yea, i'm much happier with the API as it is, odd what a year of making macros/writting code can do 😀
[00:59:30] <FromDiscord> <Elegantbeef> Honestly thinks the fancy to/fromVm macros were purely from fixing the compiler
[00:59:56] <FromDiscord> <geekrelief> In reply to @Elegantbeef "Yea, i'm much happier": Definitely, the first time I tried nimscripter, I couldn't figure how to make it work with nim devel.  :p
[00:59:58] <FromDiscord> <geekrelief> (edit) ":p" => "😄"
[01:01:51] <FromDiscord> <geekrelief> Hopefully, I want to dive into the nimscripter source more once I get my TM bindings further along.  There's gotta be a way to make the bindings from to nim to nims smoother.
[01:02:16] <FromDiscord> <geekrelief> (edit) 04removed "Hopefully,"
[01:03:22] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3AQQ
[01:03:50] <FromDiscord> <geekrelief> Creating that wrapping seems tedious.
[01:03:59] <FromDiscord> <Elegantbeef> Yep having the compiler as a dependancy with nimble does nothing but cause issues
[01:06:12] <FromDiscord> <Elegantbeef> Well the issue is typeclasses/generics, but it's doable
[01:07:31] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3AQR
[01:08:24] <FromDiscord> <Elegantbeef> Typeclasses are a bitch though, so i have to think on it a bit
[01:08:38] <FromDiscord> <Elegantbeef> The one idea is a bunch of try excepts on parsing, but that's shit for obvious reasons
[01:08:43] <FromDiscord> <geekrelief> In reply to @Elegantbeef "Well the issue is": Can you elaborate on why typeclasses/generics are tedious to deal with?  I haven't used much of either, but then again I'm going to be dealing with a C binding.
[01:08:58] <FromDiscord> <Elegantbeef> Generics will not be supported as it's just unfeasible
[01:09:07] <FromDiscord> <Elegantbeef> typeclasses can be, so i will offer it
[01:11:31] <FromDiscord> <Elegantbeef> Ideally we can export an entire module to a script, but we'll see 😀
[01:11:57] <FromDiscord> <geekrelief> That would be sweet!
[01:12:19] <FromDiscord> <Elegantbeef> Well you cannot overload on nimscript for VM procs
[01:12:22] <FromDiscord> <Elegantbeef> So you have to figure out the proc to call from parsing
[01:12:43] <FromDiscord> <Elegantbeef> Or export a bunch of aliases that call mangled names
[01:13:26] <FromDiscord> <geekrelief> In reply to @Elegantbeef "Or export a bunch": For my purposes, that's ok.  What happens if you try overloading?
[01:13:42] <FromDiscord> <Elegantbeef> square for instance has `int or float` for every parameter, so that means you need every combination of type classes
[01:13:42] <FromDiscord> <Elegantbeef> so `int, int, int, int` `int, int, int, float` `int, int, float, int` ....
[01:14:08] <FromDiscord> <Elegantbeef> So one side will make the nimscript bloated, the otherside will make interop more costly with try excepts for flow control
[01:14:39] <FromDiscord> <Elegantbeef> Generics are just impossible to support due to needing to have a nim generic instantiated
[01:15:04] <FromDiscord> <Elegantbeef> Since generics instantiate procs when called, and you dont know what type the nimscript is sending you, you just cannot use generics
[01:15:27] <FromDiscord> <Elegantbeef> Typeclasses  will work purely due to the fact you know the limited allowed types so can generate code to support them
[01:15:39] <FromDiscord> <Elegantbeef> composite type classes like `seq` will not work either for the same reason as generics
[01:16:18] <FromDiscord> <Elegantbeef> Well you cannot overload VM procs, there is a single `someProcName` for the nimscript side solution it involves emitting all permutations of the proc then calling a mangled version internally
[01:16:53] <FromDiscord> <Elegantbeef> so you might have `squareintintintint` or something similar emitted by nimscripter so when you do `square(10, 10, 10, 10)` it calls that one
[01:17:26] <FromDiscord> <Elegantbeef> But if you did `square(10d, 10d, 10fint, 10int)` it'd call `squarefloatfloatintint`
[01:17:55] <FromDiscord> <Elegantbeef> Probably better to just use `gensym` for the naming
[01:17:57] <FromDiscord> <Elegantbeef> But you get the point
[01:18:07] <FromDiscord> <Elegantbeef> Each permutation needs it's own generated nimscript side proc
[01:19:22] <FromDiscord> <geekrelief> I wonder if that's going to be a real issue in practice.
[01:19:43] <FromDiscord> <Elegantbeef> Well i'm going to walk dogs now, so will be back to talk more in a bit if you have any more ideas/concerns
[01:19:52] <FromDiscord> <geekrelief> alright thx!
[01:20:55] <FromDiscord> <Elegantbeef> It'll be 100% hidden either way
[01:21:14] <FromDiscord> <Elegantbeef> So it's a non issue for users, just implementation issues
[01:31:02] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:851b:fda3:c3ae:2b90) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:32:08] <FromDiscord> <geekrelief> In reply to @Elegantbeef "Well you cannot overload": So I just answered my own question.  I was wondering what would happen if you attempt to overload: Overloading on parameter types we get output to the console about mismatched types, but overloading on argument count I got unexpected behavior.  Why is the circle growing?! https://media.discordapp.net/attachments/371759389889003532/894705973724348466/dYCBallUFf.mp4
[01:44:06] <FromDiscord> <geekrelief> I guess we can deal with different argument counts with default parameters.
[01:56:22] <nrds> <06Prestige99> In a c lib I'm wrapping there are checks like `#if CP_USE_DOUBLES` How should I go about wrapping that?
[01:56:50] <nrds> <06Prestige99> atm it appears to be falsey so I had to declare a type with cfloat instead of cdouble
[01:56:51] <FromDiscord> <impbox [ftsf]> Sounds like it's an option
[01:56:59] <FromDiscord> <impbox [ftsf]> Probably with a define
[01:57:15] <FromDiscord> <impbox [ftsf]> The user of the library can use whether they want doubles or floats
[01:57:33] <FromDiscord> <impbox [ftsf]> Assuming CP is the library
[01:57:37] <nrds> <06Prestige99> hm yeah I found #if defined(__LP64__) && __LP64__
[01:57:44] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[01:57:53] <nrds> <06Prestige99> that determines CP_USE_DOUBLES
[01:58:03] <FromDiscord> <impbox [ftsf]> `when defined(useDoubles)`
[01:58:15] <FromDiscord> <impbox [ftsf]> Yeah i dunno then
[01:59:08] <FromDiscord> <impbox [ftsf]> Instead of using cfloat or cdouble you probably want to use a type that is defined to one of those depending on that
[02:00:11] <nrds> <06Prestige99> hmm yeah maybe
[02:00:21] <FromDiscord> <impbox [ftsf]> when defined (useDoubles): type creal = cfloat↵else: type creal = cfloat32
[02:04:49] <FromDiscord> <Elegantbeef> @geekrelief\: yea parameter count overloading works fine it's type overloading that's an issue
[02:05:21] <FromDiscord> <Elegantbeef> Going to work on the module wide exporting now
[02:06:13] <FromDiscord> <geekrelief> In reply to @Elegantbeef "Going to work on": I was just looking at the source. Is there a reason `nimscripter` doesn't export `expose`?
[02:06:58] <FromDiscord> <Elegantbeef> Other than me being a dullard, nope
[02:14:44] <FromDiscord> <Elegantbeef> So seems there isnt presently a way to get the module body from a macro
[02:21:37] <FromDiscord> <geekrelief> In reply to @Elegantbeef "So seems there isnt": Just throwing this out there, can we read the module file and use the compiler to parse it?
[02:33:45] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[02:35:41] <FromDiscord> <Elegantbeef> This is a shame really, cause i dont even see a way in the compiler to do that
[02:36:08] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3AR8
[02:36:10] <FromDiscord> <geekrelief> but I get an importc error
[02:36:24] <FromDiscord> <geekrelief> C:\Nim\compiler\options.nim(547, 22) Error: cannot 'importc' variable at compile time; stderr
[02:36:41] <FromDiscord> <Elegantbeef> Yea that's not the right way around this problem
[02:37:12] <FromDiscord> <Elegantbeef> On top of it you're going to get symbols that dont match the ones in the cache
[02:38:12] <FromDiscord> <Elegantbeef> The proper solution is to patch the compiler so `skModule`s return their sem'd AST but they dont seem to store that so it's a pipedream
[02:38:22] <FromDiscord> <geekrelief> yeah don't listen to me, I barely have an inkling of what I'm talking about. I was inspired by looking at nimterop's code 😄
[02:38:25] <FromDiscord> <Elegantbeef> It might be possible to get the symbols they expose though, which might make it possible
[02:38:52] <FromDiscord> <Elegantbeef> It's fine, just looking at the compiler to see if we can gracefully add this
[02:45:33] <FromDiscord> <Elegantbeef> Well i do not see how so i guess we'll have to settle for the tedious impl until
[03:04:27] <FromDiscord> <impbox [ftsf]> _is sad push can't be used for this, seems perfect_
[03:06:51] <FromDiscord> <Elegantbeef> It may be possible i guess, idk i'd prefer just `exportToNimscript(module, nimscriptModuleName)`
[03:07:33] <NimEventer> New post on r/nim by hayden_suse: Nim Windows Containers, see https://reddit.com/r/nim/comments/q1ibtl/nim_windows_containers/
[03:08:33] <FromDiscord> <impbox [ftsf]> yeah i guess that'd be rad too
[03:08:48] <FromDiscord> <impbox [ftsf]> time to hack the compiler
[03:09:36] <FromDiscord> <Elegantbeef> Well i did see if there is a way for us to get exported symbols from a module easily, if so we can make a new VM op
[03:14:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3ARe
[03:24:41] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[03:31:14] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[03:37:23] *** Quits: sagax (~sagax_nb@user/sagax) (Remote host closed the connection)
[03:38:34] <FromDiscord> <el__maco> sent a code paste, see https://play.nim-lang.org/#ix=3ARo
[03:38:44] <FromDiscord> <el__maco> (edit) "https://play.nim-lang.org/#ix=3ARo" => "https://play.nim-lang.org/#ix=3ARp"
[03:38:57] <FromDiscord> <impbox [ftsf]> echo typeof(slice)
[03:39:23] <FromDiscord> <el__maco> ``seq[int]`` they say
[03:40:49] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/system.html#%5B%5D%2Carray%5BIdx%2CT%5D%2CHSlice%5BU%2CV%5D
[03:59:52] <FromDiscord> <el__maco> sent a code paste, see https://play.nim-lang.org/#ix=3ARs
[04:01:32] <FromDiscord> <timotheecour> copied; for sharing you'd need this PR: https://github.com/nim-lang/Nim/pull/14869 (there's also `--experimental:views` but it has documented limitations)
[04:03:45] <FromDiscord> <el__maco> right. Thanks for the answers
[04:05:23] <FromDiscord> <el__maco> I clearly need to think about this a bit more. If slice isn't the right mechanism for what I'm trying to do, and a pointer isn't an option, then what would be the right tool 🤔
[04:05:41] <FromDiscord> <impbox [ftsf]> @elmaco what are you trying to do?
[04:08:54] <FromDiscord> <el__maco> I have a relatively big two dimensional array, and I need to pick a subarray from it and read values from that
[04:09:31] <FromDiscord> <impbox [ftsf]> why not just read from your original array?
[04:10:54] <FromDiscord> <el__maco> I guess I could do that for now
[04:12:13] <FromDiscord> <impbox [ftsf]> what's the point of the slice?
[04:16:37] *** Joins: Guest40 (~Guest40@2600:1700:74c4:a070:1a7:f4ea:b6b0:c5ba)
[04:18:49] <FromDiscord> <el__maco> I'm porting something I made in C(++), where I used a pointer to the array which makes the code much cleaner and probably faster too
[04:22:22] <FromDiscord> <el__maco> instead of saying something like ``big_array[row][col8+0],big_array[row][col8+1],...`` I basically do ``int p=big_array[row]+col8; p[0],p[1],...``
[04:22:39] <FromDiscord> <impbox [ftsf]> well you can do that in nim if you want, you could also make a view type
[04:23:23] <FromDiscord> <impbox [ftsf]> are you doing graphics surface stuff?
[04:23:40] <FromDiscord> <el__maco> kind of?
[04:24:33] <FromDiscord> <el__maco> I'm trying to evaluate Nim as a potential replacement for hobby projects
[04:24:56] <FromDiscord> <el__maco> started yesterday so I'm not very far yet 😅
[04:25:01] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[04:25:01] *** Joins: greaser|q (greaser@user/greasemonkey)
[04:25:04] <FromDiscord> <impbox [ftsf]> yup, doing a direct port of C++ code to nim is probably not as nice as doing it in a nimmy way
[04:25:04] *** greaser|q is now known as GreaseMonkey
[04:25:13] <FromDiscord> <impbox [ftsf]> but you can just use a pointer for a direct mapping if you like
[04:25:40] <FromDiscord> <el__maco> I was able to obtain the pointer, but I wasn't able to say p[1]. Nim seems to want to only do p[]
[04:25:58] <FromDiscord> <ElegantBeef> Nope the issue is `ptr char` is indexable
[04:26:03] <FromDiscord> <ElegantBeef> (edit) "is" => "isnt"
[04:26:08] <FromDiscord> <ElegantBeef> you want `ptr UncheckedArray[char]`
[04:26:11] <FromDiscord> <impbox [ftsf]> `var p = cast[UncheckedArray[uint8]](myArray)`
[04:26:22] <FromDiscord> <ElegantBeef> it distinguishes pointers for type safety
[04:26:24] <FromDiscord> <impbox [ftsf]> (edit) "cast[UncheckedArray[uint8]](myArray)`" => "cast[ptr UncheckedArray[uint8]](myArray)`"
[04:27:35] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3ARy
[04:27:35] <FromDiscord> <impbox [ftsf]> can also do something like this to make it neater
[04:28:14] <FromDiscord> <impbox [ftsf]> then each index is a whole pixel
[04:28:32] <FromDiscord> <el__maco> seems ptr UncheckedArray might be what I'm looking for. However its 4am now and I really need to sleep so I'll have to return to this tomorrow. Thanks for the tips
[04:32:49] <FromDiscord> <el__maco> I feel like I got pretty far. My code compiles, and once I can figure out how to read png image to an Nim array I can start pulling my hair and debugging why the program isn't doing anything like its supposed to
[04:34:08] <FromDiscord> <impbox [ftsf]> you can check out nimPNG for reading a png
[04:34:35] <FromDiscord> <el__maco> sent a code paste, see https://play.nim-lang.org/#ix=3ARF
[04:35:04] <FromDiscord> <el__maco> because writing an image works, I assume I might have the pixels in "data", but the bridge from there to an Nim array is still unclear
[04:36:00] <FromDiscord> <el__maco> might just copy them or something, but that's for tomorrow
[04:36:02] <FromDiscord> <impbox [ftsf]> you might want `{.importc,cdecl.}`
[04:36:12] <Guest40> Hello everyone, is it possible cross a nim program to the linux version from the windows machine?
[04:37:48] <FromDiscord> <impbox [ftsf]> not familiar with lodepng sorry, but if you want to get up and running quick, i'd recommend using nimPNG
[04:39:15] <FromDiscord> <auxym> Hi, I'm looking into setting up something using rabbitMQ/ZeroMQ/Something similar. Does anyone have experience with something similar in Nim? A good library?
[04:39:18] <FromDiscord> <el__maco> I think that call fills ``w`` and ``h`` with the corresponding values, and ``data`` would be a pointer with wh pixels in it
[04:40:14] <FromDiscord> <impbox [ftsf]> `  error = lodepng_decode32_file(&image, &width, &height, filename);`↵`var error = lodepng_decode32_file(data
[04:44:45] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[04:51:32] <FromDiscord> <impbox [ftsf]> @elmaco https://gist.github.com/ftsf/99669def17ea8ba0dd57d7fb6ad83ea1 this seems to work
[04:55:45] <FromDiscord> <el__maco> sent a code paste, see https://play.nim-lang.org/#ix=3ARK
[04:56:04] <FromDiscord> <el__maco> now I just have to figure out a way to return a variable sized array somehow 😅
[04:56:09] <FromDiscord> <ElegantBeef> `seq`
[04:56:17] <FromDiscord> <impbox [ftsf]> there's no variable sized arrays in nim use seqs
[04:56:35] <FromDiscord> <ElegantBeef> Also pixie exists 😛
[04:56:37] <FromDiscord> <el__maco> ``c`` is the result, and it is a seq
[04:56:51] <FromDiscord> <el__maco> but I'm adding each pixel with c.add 😭
[04:57:07] <FromDiscord> <impbox [ftsf]> yeah you can precreate the seq as the correct size
[04:57:22] <FromDiscord> <el__maco> how?
[04:58:47] <FromDiscord> <impbox [ftsf]> `result = newSeq[uint8](whchannels)`
[05:00:34] <FromDiscord> <el__maco> I guess I should then return that result from the function instead of the argument by reference
[05:00:45] <FromDiscord> <impbox [ftsf]> it's probably more idiomatic yes
[05:01:13] <FromDiscord> <impbox [ftsf]> though i'd recommend returning an object that includes the width and height
[05:01:24] <FromDiscord> <impbox [ftsf]> so you can reference it correctly after the call
[05:02:08] <FromDiscord> <impbox [ftsf]> you can also make a nice `[]` operator that takes x,y
[05:02:34] <FromDiscord> <impbox [ftsf]> so you can do `echo image[x,y]` instead of `echo image[x+yimage.w]`
[05:03:34] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3ARL
[05:08:17] *** Quits: Guest40 (~Guest40@2600:1700:74c4:a070:1a7:f4ea:b6b0:c5ba) (Quit: Client closed)
[05:20:47] <NimEventer> New thread by Treeform: Show Nim: Use Nim code from other languages (genny + pixie-python), see https://forum.nim-lang.org/t/8479
[05:26:04] <FromDiscord> <impbox [ftsf]> @treeform nice! maybe i'll try with nico
[05:26:07] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Ping timeout: 252 seconds)
[05:26:27] <FromDiscord> <Elegantbeef> Impbox will have so much tooling to try with nico in the coming days 😜
[05:26:42] <FromDiscord> <impbox [ftsf]> \o/ exciting
[05:27:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3ARO
[05:27:48] <FromDiscord> <Elegantbeef> only downside is if you have overloads you need to explicitly make the alias
[05:28:09] <FromDiscord> <treeform> In reply to @impbox "<@!107140179025735680> nice! maybe i'll": That would be a great project for this. Many people could use the nico.
[05:28:22] <FromDiscord> <impbox [ftsf]> mmm nico uses quite a few overloads, maybe i can get rid of some and replace with default args
[05:28:29] <FromDiscord> <treeform> we support overloads
[05:28:41] <FromDiscord> <Elegantbeef> Well treeform we're talking about two different things 😀
[05:28:59] <FromDiscord> <treeform> See: https://github.com/treeform/pixie/blob/master/bindings/bindings.nim#L129-L130
[05:29:20] <FromDiscord> <impbox [ftsf]> @treeform how does that work when exporting to C?
[05:29:26] <FromDiscord> <Elegantbeef> I'm talking about nimscripter which will require more work for supporing overloads
[05:30:17] <FromDiscord> <treeform> In reply to @impbox "<@!107140179025735680> how does that": C gets prefixed with the first arguments type
[05:30:31] <FromDiscord> <treeform> so `draw_image` and `draw_mask`
[05:30:44] <FromDiscord> <treeform> the python thing works with just draw (as python supports overloading kind of)
[05:30:47] <FromDiscord> <Elegantbeef> Suffixed
[05:30:52] <FromDiscord> <impbox [ftsf]> gotcha
[05:30:58] <FromDiscord> <impbox [ftsf]> postprefixed
[05:31:02] <FromDiscord> <treeform> midfixed
[05:31:03] <FromDiscord> <Elegantbeef> Lol
[05:31:22] *** Joins: stutonk (~stutonk@c-71-56-188-137.hsd1.va.comcast.net)
[05:31:49] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:34:29] <stutonk> Anyone know what kind of thing I should pass in on the Nim side to receive a callee-allocated array pointer from a wrapped C function? 
[05:34:36] <FromDiscord> <Elegantbeef> Emitting a proc with all permutations of typeclasses is fun!
[05:34:47] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[05:34:50] <FromDiscord> <Elegantbeef> `ptr UncheckedArray[T]`
[05:35:08] <FromDiscord> <Elegantbeef> Depends on the C proc though
[05:37:32] <stutonk> This is the official Nim binding for Xlib. The proc is XQueryTree. The parameter in question is a `PPWindow` which is a `ptr PWindow` and a PWindow is a `ptr Window`.
[05:39:16] <stutonk> Whatever I try that typechecks crashes with a nil deref
[05:39:40] <FromDiscord> <Elegantbeef> You make some `var yourWindow: PWindow` and pass those into your proc
[05:42:15] <FromDiscord> <Elegantbeef> So for that proc you will do something like https://play.nim-lang.org/#ix=3ARS
[05:44:30] *** Quits: krux02 (~krux02@p200300ca8f0d0300fb0f49e84c91d652.dip0.t-ipconnect.de) (Quit: Leaving)
[05:50:21] <stutonk> The children part of that doesn't typecheck
[05:54:03] <stutonk> And casting it causes a SIGSEGV
[05:55:11] <FromDiscord> <Elegantbeef> `proc XQueryTree(para1: PDisplay, para2: Window, para3: PWindow, para4: PWindow, para5: PPWindow, para6: Pcuint)`
[05:55:33] <FromDiscord> <Elegantbeef> Without proper output cannot say much
[05:59:53] <stutonk> Right. `ptr UncheckedArray[PWindow]` doesn't typecheck as a `ptr ptr Window` and casting it to one causes a segfault. The compiler also won't let me cast the other way
[06:00:17] <FromDiscord> <Elegantbeef> So use a PPWindow
[06:01:09] <stutonk> I can just create a var of type `PPWindow` but can't do anything with it. I don't know how to cast it so it can be indexed like an array
[06:09:35] <stutonk> And it looks like just using a var of type `PPWindow` in the call at all typechecks but causes a segfault
[06:09:41] <FromDiscord> <retkid> how can i convert seq to an immutable type?
[06:14:08] <stutonk> You mean to an array? Or do you mean to just make a particular seq immutable?
[06:14:38] <FromDiscord> <retkid> i have no preference
[06:14:43] <FromDiscord> <Elegantbeef> `let immSeq = otherSeq`
[06:14:44] <FromDiscord> <retkid> just want my seq to be immutable
[06:14:57] <FromDiscord> <retkid> In reply to @Elegantbeef "`let immSeq = otherSeq`": that works
[06:15:00] <stutonk> Yeah, just use a let binding
[06:15:18] <FromDiscord> <retkid> i thought there would be a more elegant solution
[06:37:17] <FromDiscord> <Elegantbeef> @geekrelief\: We're now at https://play.nim-lang.org/#ix=3ARZ which generates overloads as such https://play.nim-lang.org/#ix=3AS1
[06:37:37] <FromDiscord> <Elegantbeef> It presently doesnt generate overloads for every single parameter, but eitherway it's nicer
[06:38:53] <FromDiscord> <Elegantbeef> When there is ambiguity one needs to make a procedure now, which makes it a tinge better, but ideally all of those symbols would get caught/exported
[06:43:47] <FromDiscord> <retkid> normally i dont like oop
[06:43:51] <FromDiscord> <retkid> java kinda ruined it fo me
[06:43:52] <FromDiscord> <retkid> (edit) "fo" => "for"
[06:44:13] <stutonk> Alright, Elegantbeef. I figured it out. It looks like the solution was to use a var of type `PWindow` and then calling the function with `ppwVar.addr` For some reason, directly using a `ptr ptr` segfaults. Then I can cast to a `ptr UncheckedArray[Window] and it works as expected. Thank you for your help
[06:44:15] <FromDiscord> <retkid> but when I do it in Nim, i feel like "woah this actually makes sense"
[06:44:22] <FromDiscord> <Elegantbeef> But nim isnt oop
[06:44:31] <FromDiscord> <retkid> you can do oop in nim
[06:44:32] <FromDiscord> <cabboose> HERETIC
[06:44:36] <FromDiscord> <cabboose> HERETIC
[06:44:52] <FromDiscord> <cabboose> Nah kidding. What do you mean by oop in nim though
[06:45:05] <FromDiscord> <retkid> type x = ref object of RootObj
[06:45:08] <FromDiscord> <Elegantbeef> I mean you can do OOP in Nim, and it's not too different to Java if you arent using interfaces and the like
[06:45:10] <FromDiscord> <retkid> is technically oop
[06:45:25] <FromDiscord> <retkid> yes  but in Java it sucksa
[06:45:28] <FromDiscord> <retkid> and in Nim it makes sesne
[06:45:31] <FromDiscord> <retkid> (edit) "sesne" => "sense"
[06:45:43] <FromDiscord> <retkid> like for example
[06:45:46] <FromDiscord> <cabboose> Definitely covers inheritance to a degree and dynamic dispatching
[06:47:50] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3AS3
[06:48:15] <FromDiscord> <retkid> i prefer nim here
[06:48:17] <stutonk> It's simpler because Nim objects don't encapsulate behavior. They're basically syntactic sugar over C structs
[06:48:20] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3AS3" => "https://play.nim-lang.org/#ix=3AS4"
[06:48:29] <FromDiscord> <retkid> well yea i was about to point out
[06:48:36] <FromDiscord> <retkid> i dont like how methods aren't in the class body
[06:48:43] <FromDiscord> <retkid> it looks strange to me
[06:49:21] <FromDiscord> <retkid> I'd probably like it if they did what Kotlin does with reflections
[06:49:27] <stutonk> Yeah, it's a lot like Common Lisp's generic functions
[06:49:49] <FromDiscord> <Elegantbeef> There are a multitude of macros that give class like declaration
[06:49:56] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3AS5
[06:51:07] <FromDiscord> <retkid> In reply to @stutonk "Yeah, it's a lot": been thinking about learning a lisp dialect
[06:51:10] <FromDiscord> <retkid> like racket
[06:51:50] <stutonk> Racket is pretty sweet. Especially for experimental programming
[06:54:48] <FromDiscord> <retkid> Clojure looks disgusting
[06:56:12] <stutonk> It's actually also pretty nice once you wrap your head around the level of immutability it imposes. The only thing really painful about it is the error messages and some of the namespacing stuff
[06:56:38] <FromDiscord> <retkid> yea
[06:56:40] <FromDiscord> <retkid> that looks not fun
[06:56:58] <stutonk> Nim is right there in the sweetspot of compiler magic and helpful type system though
[06:57:13] <FromDiscord> <retkid> I solve all my problems with lists and arrayas
[06:57:15] <FromDiscord> <retkid> (edit) "arrayas" => "arrays and sets"
[06:57:38] <FromDiscord> <retkid> if I go to a functional programming language I'll learn stuff but I dunno if i want to learn that lession lol
[06:59:46] <stutonk> What lesson do you mean?
[07:00:50] <FromDiscord> <retkid> about solving problems with immutability \
[07:01:53] <stutonk> In the S-expression languages it's pretty natural. You don't even notice you're doing it
[07:03:06] <stutonk> The only real hurdle there is just understanding how recursion works
[07:05:01] <stutonk> And really, there are functions that simplify most iteration tasks like `map` and `fold`
[07:06:28] <stutonk> And in Clojure they have the threading macros for threading a piece of data through a sequence of functions
[07:10:44] <FromDiscord> <NullCode> man it still takes me too long to do simple nim things
[07:11:20] <FromDiscord> <NullCode> took me 40 minutes to make a proc that returns battery percentage
[07:12:02] <stutonk> Is that on a *Nix system?
[07:14:33] <FromDiscord> <NullCode> win
[07:15:42] <stutonk> Is there some kind of complicated API for it on Windows? On Linux all you have to do is read from a specific file
[07:16:48] <FromDiscord> <NullCode> yeah on nix it's really easy
[07:16:53] <FromDiscord> <NullCode> on win is easy too tbh
[07:17:19] <FromDiscord> <NullCode> you just need to extract battery percentage from a command output
[07:17:27] <FromDiscord> <NullCode> `WMIC PATH Win32_Battery Get EstimatedChargeRemaining`
[07:17:43] <stutonk> What was difficult doing it with Nim?
[07:19:14] <FromDiscord> <NullCode> nothing at all
[07:19:18] <FromDiscord> <NullCode> it's just, I'm an idiot
[07:19:36] <FromDiscord> <NullCode> and still can't memorize what the regex procs do
[07:19:43] <FromDiscord> <NullCode> (edit) "regex" => "important"
[07:19:46] <FromDiscord> <Elegantbeef> Easy dont use regex
[07:19:53] <FromDiscord> <NullCode> i need to dig around docs everytime i wanna do something
[07:20:11] <FromDiscord> <NullCode> mainly os, (str|seq)utils and regex
[07:20:14] <FromDiscord> <NullCode> In reply to @Elegantbeef "Easy dont use regex": lmao
[07:20:30] <FromDiscord> <NullCode> (edit) "os," => "os(proc),"
[07:20:35] <FromDiscord> <NullCode> what do i do then
[07:21:00] <FromDiscord> <Elegantbeef> I generally use scanf from strscans
[07:21:03] <FromDiscord> <NullCode> can't think of easier way than `findAndCaptureAll(output, reg_string).join()`
[07:21:15] <FromDiscord> <NullCode> In reply to @Elegantbeef "I generally use scanf": and here i am having no idea about strscans
[07:21:17] <FromDiscord> <NullCode> wait lemme see docs
[07:30:21] *** Quits: stutonk (~stutonk@c-71-56-188-137.hsd1.va.comcast.net) (Quit: Client closed)
[07:35:23] *** Terry[m] is now known as Theodore[m]
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:28] <FromDiscord> <NullCode> i have arrived after reading docs
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:34] <FromDiscord> <NullCode> and my head is still spinning
[07:36:59] <FromDiscord> <Elegantbeef> It's just a regex alternative for simple string -\> variables
[07:37:17] <FromDiscord> <NullCode> yeah i think i can use it now
[07:38:30] <FromDiscord> <NullCode> btw question about strscans
[07:38:44] <FromDiscord> <NullCode> do i have to copy the entire string to match the vals i need
[07:38:47] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/894798245916729374/unknown.png
[07:39:09] <FromDiscord> <Elegantbeef> Yea for somethings
[07:39:16] <FromDiscord> <NullCode> like do "EstimatedChargeRemaining$i$i"
[07:39:25] <FromDiscord> <NullCode> because then it might not work
[07:39:27] <FromDiscord> <Elegantbeef> well just one `$i`
[07:39:32] <FromDiscord> <NullCode> oh
[07:39:38] <FromDiscord> <NullCode> (edit) ""EstimatedChargeRemaining$i$i"" => "`"EstimatedChargeRemaining$i$i"`"
[07:39:47] <FromDiscord> <NullCode> ok then all good
[07:49:11] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/894800862998831136/unknown.png
[07:49:13] <FromDiscord> <NullCode> uhh what
[07:49:33] <FromDiscord> <NullCode> should be 77
[07:49:34] <FromDiscord> <impbox [ftsf]> is there a reason you're posting screenshots of text?
[07:49:36] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/894800967663505418/unknown.png
[07:49:40] <FromDiscord> <impbox [ftsf]> just post the text
[07:49:48] <FromDiscord> <NullCode> In reply to @impbox "is there a reason": idk lmfao
[07:49:57] <FromDiscord> <NullCode> didn't even notice i was sending screenshots of text
[07:50:01] <FromDiscord> <Elegantbeef> yo ucan jusut do `result` instead of \`life
[07:50:20] <FromDiscord> <NullCode> sent a code paste, see https://play.nim-lang.org/#ix=3AS8
[07:50:29] <FromDiscord> <NullCode> In reply to @Elegantbeef "yo ucan jusut do": alright
[07:50:59] <FromDiscord> <impbox [ftsf]> if the if passing?
[07:51:19] <FromDiscord> <impbox [ftsf]> (edit) "if" => "is"
[07:52:05] <FromDiscord> <NullCode> In reply to @Elegantbeef "yo ucan jusut do": `Error: type mismatch: got <bool> but expected 'int'`
[07:52:14] <FromDiscord> <NullCode> doing the if statement is better
[07:52:21] <FromDiscord> <NullCode> In reply to @impbox "is the if passing?": i think so
[07:52:28] <FromDiscord> <NullCode> wait i forgot doing something important
[07:52:33] <FromDiscord> <Elegantbeef> `discard scanf()`
[07:52:59] <FromDiscord> <impbox [ftsf]> well it might fail, so you shouldn't discard it
[07:53:28] <FromDiscord> <Elegantbeef> If it fails it'll be `0` so it's up to you
[07:53:47] <FromDiscord> <impbox [ftsf]> but it could also actually be 0
[07:53:56] <FromDiscord> <NullCode> In reply to @impbox "but it could also": yes
[07:54:24] <FromDiscord> <NullCode> why is it 0 and not 80
[07:54:26] <FromDiscord> <NullCode> sent a code paste, see https://play.nim-lang.org/#ix=3ASb
[07:54:40] <FromDiscord> <NullCode> here's what I'm doing
[07:54:42] <FromDiscord> <NullCode> sent a code paste, see https://play.nim-lang.org/#ix=3ASc
[07:55:12] <FromDiscord> <NullCode> I'm just wondering if i should use regex instead
[07:55:15] <FromDiscord> <Elegantbeef> there is a space
[07:55:21] <FromDiscord> <NullCode> oh
[07:55:23] <FromDiscord> <NullCode> siht
[07:55:26] <FromDiscord> <NullCode> (edit) "siht" => "shit"
[07:55:33] <FromDiscord> <Elegantbeef> I mean you can use regex if you want
[07:56:02] <FromDiscord> <NullCode> now that i yeeted the space
[07:56:03] <FromDiscord> <NullCode> fixed
[07:56:04] <FromDiscord> <NullCode> thanks a lot
[07:56:07] <FromDiscord> <NullCode> sent a code paste, see https://play.nim-lang.org/#ix=3ASd
[07:56:12] <FromDiscord> <NullCode> In reply to @Elegantbeef "I mean you can": nah ill keep using this
[07:56:39] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3ASe
[07:56:57] <FromDiscord> <impbox [ftsf]> (edit) "https://play.nim-lang.org/#ix=3ASe" => "https://play.nim-lang.org/#ix=3ASf"
[07:58:02] <FromDiscord> <NullCode> hmm yeah that works
[07:58:29] <FromDiscord> <NullCode> are there any benefits to doing `std/strscans`
[07:58:35] <FromDiscord> <impbox [ftsf]> it makes beef happy
[07:58:55] <FromDiscord> <NullCode> alright making beef happy too
[07:59:34] <FromDiscord> <impbox [ftsf]> it makes sure it imports from the standard library, even if you had a local file called strscans.nim it'd use the standard library one
[08:03:12] <FromDiscord> <cabboose> Also new std library modules will enforce that iirc
[08:03:36] <FromDiscord> <cabboose> Like setutils will need the std prefix
[08:05:36] <FromDiscord> <NullCode> bruh
[08:05:54] <FromDiscord> <NullCode> ig I'm gonna put std/ on every built in lib then
[08:06:10] <FromDiscord> <impbox [ftsf]> beef is gonna be so happy
[08:06:47] <FromDiscord> <NullCode> XD
[08:07:15] *** Joins: Guest20 (~Guest20@99-6-76-144.lightspeed.rcsntx.sbcglobal.net)
[08:07:21] <FromDiscord> <NullCode> sent a long message, see http://ix.io/3ASg
[08:07:35] *** Quits: Guest20 (~Guest20@99-6-76-144.lightspeed.rcsntx.sbcglobal.net) (Client Quit)
[08:07:41] <FromDiscord> <impbox [ftsf]> `"EstimatedChargeRemaining$s$i"`
[08:07:43] <FromDiscord> <NullCode> (edit) "http://ix.io/3ASg" => "http://ix.io/3ASh"
[08:08:01] <FromDiscord> <impbox [ftsf]> `$s    Skips optional whitespace.`
[08:08:14] <FromDiscord> <NullCode> thats faster?
[08:08:16] <FromDiscord> <NullCode> amazing
[08:08:26] <FromDiscord> <NullCode> man i still have so much to learn from nim
[08:08:26] <FromDiscord> <impbox [ftsf]> very likely faster than doing a string replace
[08:08:30] <FromDiscord> <NullCode> it's kinda depressing
[08:08:38] <FromDiscord> <NullCode> In reply to @impbox "very likely faster than": i see
[08:08:39] <FromDiscord> <impbox [ftsf]> lots to learn means lots of fun to be had
[08:09:50] <FromDiscord> <impbox [ftsf]> string replace is relatively expensive
[08:10:34] <FromDiscord> <impbox [ftsf]> but likely none of this will matter for your use case unless you're doing stuff for realtime
[08:10:41] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:11:24] <FromDiscord> <NullCode> I'm planning on making an exe that runs in background
[08:11:31] <FromDiscord> <NullCode> and shouts at you when battery is toolow
[08:11:35] <FromDiscord> <NullCode> (edit) "toolow" => "too low"
[08:11:48] <FromDiscord> <NullCode> (it's a personal project because my laptop keeps shutting down at 5%)
[08:12:09] <FromDiscord> <impbox [ftsf]> yaa, just remember, optimise later when you need to
[08:12:17] <FromDiscord> <NullCode> yup
[08:12:24] <FromDiscord> <impbox [ftsf]> as long as it works ( '')b
[08:14:41] <FromDiscord> <NullCode> well it needs to be fast too :D
[08:16:11] <FromDiscord> <impbox [ftsf]> works and slow is better than not working at all, can always make it faster later
[08:19:13] <FromDiscord> <NullCode> unless you're an idiot who knows only 5% of a language lmfao
[08:24:41] *** Joins: User11 (~kaliyuga@2601:601:200:5b30::8a1f)
[08:27:30] *** Joins: dongbei (~dnprog8@c-71-198-117-25.hsd1.ca.comcast.net)
[08:30:17] <dongbei> hiya, i'm trying to figure out how to use a .so library compiled from a .cpp in nim.  when I used c2nim on the header file it generated a bunch of `discard "foward declaration of blah"` for a struct blah.  the .so has the definition but I don't know how to bring it in.  
[08:31:44] <dongbei> every time I try to compile my server.nim file i get the compiler error "Error: undeclared identifier: 'blah'"
[08:32:28] <dongbei> does anyone have experience with getting c libraries into a nim prog?
[08:45:33] <FromDiscord> <retkid> so
[08:45:44] <FromDiscord> <retkid> i have imports which are conflicting
[08:45:52] <FromDiscord> <retkid> (edit) "are" => "has" | "hasconflicting ... " 03added "variables"
[08:45:57] <FromDiscord> <retkid> json, and tables
[08:46:10] <FromDiscord> <retkid> .keys on a table returns the json version...
[08:46:20] <FromDiscord> <retkid> whats the solution for this
[08:49:50] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3ASp
[08:49:59] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3ASp" => "https://play.nim-lang.org/#ix=3ASq"
[08:50:09] <FromDiscord> <Elegantbeef> keys is an iterator so that's just bad usage
[08:50:16] <FromDiscord> <retkid> wait yea i just noticed that
[08:50:19] <FromDiscord> <retkid> lets see
[08:51:23] <FromDiscord> <retkid> the only reason it wasn't red when i removed Json was because everything else was red 🤦‍♀️
[08:59:23] <FromDiscord> <impbox [ftsf]> @dongbei you'll need to wrap the cpp header to expose the procs to nim
[08:59:42] <FromDiscord> <impbox [ftsf]> c2nim might do that for you, but you might be better of doing it by hand
[08:59:48] <FromDiscord> <impbox [ftsf]> or at least tweaking the output
[09:20:30] *** Joins: kaliyuga_ (~kaliyuga@2601:601:200:5b30::8a1f)
[09:20:30] *** Quits: User11 (~kaliyuga@2601:601:200:5b30::8a1f) (Read error: Connection reset by peer)
[09:21:18] *** Quits: kaliyuga_ (~kaliyuga@2601:601:200:5b30::8a1f) (Client Quit)
[09:32:13] <FromDiscord> <geekrelief> In reply to @Elegantbeef "<@109484839480107008>\: We're now at": I'm a little confused with what the output https://play.nim-lang.org/#ix=3AS1 is supposed to mean.  How do the procs with `discard` get implemented?
[09:32:56] <FromDiscord> <Elegantbeef> Those are implemented by the Nim binary
[09:33:23] <FromDiscord> <Elegantbeef> When you call `loadScript`
[09:33:54] <FromDiscord> <Elegantbeef> They need a body for obvious reasons but the VM overrides their functionality on load
[09:34:04] <FromDiscord> <Elegantbeef> So a simple `discard` works
[09:34:09] <FromDiscord> <geekrelief> In reply to @Elegantbeef "Those are implemented by": I'm not sure I follow.  What's the Nim binary you're talking about?
[09:34:19] <FromDiscord> <Elegantbeef> The binary you're scripting
[09:34:44] <FromDiscord> <Elegantbeef> `implNimscriptModule` generates a list of the VM procs + overriding logic
[09:34:56] <FromDiscord> <geekrelief> So in the samples script only 4 procs work?
[09:35:04] <FromDiscord> <geekrelief> `background`, `stroke`, etc.
[09:35:43] <FromDiscord> <Elegantbeef> No all the procs work, the ones with discard are implemented in the VM by code generated with `implNimscriptModule`
[09:36:09] <FromDiscord> <Elegantbeef> It's all an implementation detail that no one will see unless they name procs similarly
[09:36:38] <FromDiscord> <geekrelief> ok, I guess I'll trust it just works.  I'll have to read your code to understand what's going on.
[09:36:53] <FromDiscord> <geekrelief> But implNimscriptModule does all the magic I guess.
[09:37:18] <FromDiscord> <geekrelief> nice work!
[09:47:40] <NimEventer> New thread by Xflywind: Contribution-friendly issues for Hacktoberfest 2021, see https://forum.nim-lang.org/t/8480
[09:49:55] <FromDiscord> <Elegantbeef> Fun, got the generating code for properties done, now global variables can be used in `exportTo` block
[09:50:10] <FromDiscord> <geekrelief> In reply to @Elegantbeef "No all the procs": nice!
[09:50:23] <FromDiscord> <geekrelief> I skimmed over the code for `expose.nim`
[09:50:30] <FromDiscord> <Elegantbeef> But there is a reprocudable bug on the call due to dumb stuff i'm doing
[09:50:35] <FromDiscord> <Elegantbeef> Yea i know it needs comments 😛
[09:50:35] <FromDiscord> <geekrelief> I'll have to play with this more tomorrow
[09:51:14] <FromDiscord> <geekrelief> no worries. I've gotten used to reading code without comments though.
[09:51:39] <FromDiscord> <geekrelief> I'll just bug you if there's something I don't understand. 😄
[09:52:16] <FromDiscord> <geekrelief> heading to bed g'night
[09:52:22] <FromDiscord> <Elegantbeef> Buh bye
[10:00:59] *** Joins: neurocyte013288 (~neurocyte@45.10.63.237)
[10:00:59] *** Quits: neurocyte013288 (~neurocyte@45.10.63.237) (Changing host)
[10:00:59] *** Joins: neurocyte013288 (~neurocyte@user/neurocyte)
[10:23:09] <FromDiscord> <NullCode> question
[10:23:13] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/894839629260419114/unknown.png
[10:23:21] <FromDiscord> <NullCode> how to safely exit after getting SIGINT
[10:23:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:851b:fda3:c3ae:2b90)
[10:26:18] <Amun-Ra> NullCode: https://nim-lang.org/docs/system.html#setControlCHook
[10:26:35] <Amun-Ra> also: https://rosettacode.org/wiki/Handle_a_signal#Nim
[10:28:16] <FromDiscord> <NullCode> thamk
[10:35:50] <FromDiscord> <Mike> Hey, if anyone is awake\: is there a way for me to do something like `readChar(stdin)`, but not line buffered?
[10:36:30] <FromDiscord> <Mike> As in I want to get the character that a user types immediately and not have to wait for a newline
[10:36:47] <FromDiscord> <Elegantbeef> `terminal.getch`?
[10:37:17] <FromDiscord> <Elegantbeef> that blocks until a character is entered, not sure that's what you want either though
[10:37:46] <FromDiscord> <Mike> No that is actually what I want
[10:38:16] <FromDiscord> <Mike> That's perfect, thank you ❤️
[10:38:42] <FromDiscord> <Elegantbeef> No problem
[10:53:14] <FromDiscord> <NullCode> nice I've arrived to the part where i wanna play some audio
[10:53:55] *** Joins: max22- (~maxime@2a01cb0883359800777e1cc5db01489a.ipv6.abo.wanadoo.fr)
[10:56:08] *** Joins: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net)
[11:08:35] *** Quits: max22- (~maxime@2a01cb0883359800777e1cc5db01489a.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[11:13:47] *** TechAspirer is now known as kayabaNerve
[11:15:15] *** Joins: pro (~pro@user/pro)
[11:16:25] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:851b:fda3:c3ae:2b90) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:24:56] *** Joins: Vladar (~Vladar@46.162.2.53)
[11:29:55] <FromDiscord> <haxscramper> Is casting `set[I]` to unsigned integers considered an implementation detail exploitation, or this is an acceptable way to interface with C's `unsigned int flags` for passing multiple enum values at once?
[11:30:40] <FromDiscord> <Elegantbeef> I'd say it's acceptable, given the logic of how sets work
[11:31:25] <FromDiscord> <Elegantbeef> Bitsets afterall are just human friendly abstractions ontop of bitwise ops
[11:32:26] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.3)
[11:35:51] <NimEventer> New Nimble package! feta - A domain-specific for general purpose office automation. The language is embedded in Nim and allows for quick and easy integration of different office software environments., see https://github.com/FlorianRauls/office-DSL-thesis
[11:35:54] <nrds> <12R2D299> 4GitHub: 7"2021 Bachelor Thesis repository for development of an office automatization DSL in Nim"
[11:38:44] *** Joins: sagax (~sagax_nb@user/sagax)
[11:42:39] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (*.net *.split)
[11:42:40] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (*.net *.split)
[11:42:40] *** Quits: Freneticks (~Frenetick@gw.ptr-80-238-209-252.customer.ch.netstream.com) (*.net *.split)
[11:42:40] *** Quits: mst (~matthewt@vps-6c71e929.vps.ovh.net) (*.net *.split)
[11:54:23] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[11:54:23] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[11:54:23] *** Joins: Freneticks (~Frenetick@gw.ptr-80-238-209-252.customer.ch.netstream.com)
[11:54:23] *** Joins: mst (~matthewt@vps-6c71e929.vps.ovh.net)
[12:24:11] *** Joins: max22- (~maxime@2a01cb08833598008bbf230aeaa6be66.ipv6.abo.wanadoo.fr)
[12:29:55] <FromDiscord> <kunitoki> Hey there ! I've tried registering multiple times with different email addresses in the forum but i keep not getting the confirmation emails so i cannot post. And now i run out of email addresses... Anything can be done ?
[12:31:03] <FromDiscord> <kunitoki> in some cases my user is even broken, can't login. keep getting unknown error in the login page
[12:32:36] <FromDiscord> <xflywind> In reply to @kunitoki "Hey there ! I've": You may contact with @dom96 or other admins.
[12:32:57] <FromDiscord> <xflywind> (edit) "admins." => "admins of Nim forum."
[12:43:58] <FromDiscord> <enthus1ast> sent a long message, see https://paste.rs/fQJ
[12:45:03] <FromDiscord> <enthus1ast> i've build the libhydrogen normally with their makefile, and also with their cmake/make
[12:48:51] <FromDiscord> <dom96> In reply to @flywind "You may contact with": make sure to ask people for their nick, that way I can immediately fix it
[12:48:58] <FromDiscord> <dom96> instead of asking for their nick 🙂
[12:54:08] <PMunch> Well this is annoying. I get an error from macros saying an identifier isn't defined, but outputting the `repr` and then importing that as a file works just fine..
[12:57:51] <FromDiscord> <enthus1ast> when i look with objdump -t ↵all the functions are there... https://gist.github.com/enthus1ast/8b8660989eac3d8ccb23978e1f852969
[13:02:00] <FromDiscord> <Varriount> In reply to @PMunch "Well this is annoying.": Sounds like a compiler bug then.
[13:02:07] <PMunch> Yeah probably
[13:04:08] <FromDiscord> <enthus1ast> mhh i got it working
[13:04:18] <FromDiscord> <enthus1ast> i've linked from the commandline
[13:04:28] <FromDiscord> <enthus1ast> not from the wrapper pragma
[13:05:11] <FromDiscord> <Varriount> I wonder how well something like dependency injection could be done with Nim macros. I've been looking at https://python-dependency-injector.ets-labs.org/ for use in something at work, and the concept struck me as one that Nim could possibly do quite well.
[13:13:49] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[13:14:08] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[13:18:11] <PMunch> New version of Futhark: https://github.com/pmunch/futhark it now supports a wide range of #DEFINE statements and the renaming scheme is vastly improved
[13:18:13] <nrds> <12R2D299> 4GitHub: 7"Automatic wrapping of C headers in Nim"
[13:23:41] *** Quits: dongbei (~dnprog8@c-71-198-117-25.hsd1.ca.comcast.net) (Quit: leaving)
[13:27:18] <FromDiscord> <impbox [ftsf]> i always read that lib's name as fthat, and it makes snse because that's what I think about having to writing C wrappers.
[13:27:21] <FromDiscord> <impbox [ftsf]> (edit) "writing" => "write"
[13:30:58] <PMunch> Hmm, I think the renaming is a bit messed up in the new version..
[13:31:02] <PMunch> Damn it
[13:31:04] <FromDiscord> <Rika> I keep on reading “fut hark”
[13:32:58] <PMunch> That would be pretty close to how you're supposed to pronounce it
[13:33:34] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3ATn
[13:33:42] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3ATo
[13:34:11] <FromDiscord> <haxscramper> Version string is not guaranteed to be stable, but I don't think they will break it so drastically any time sonn
[13:34:20] <FromDiscord> <haxscramper> So for C compiler include paths I use this
[13:34:40] <PMunch> The problem is though that we don't know if they're compiling against clang or GCC
[13:34:50] <PMunch> Or even if they are on Linux for that matter..
[13:35:13] <FromDiscord> <haxscramper> You can do additional heuristics and checks
[13:35:38] <FromDiscord> <haxscramper> ah, and by they way, do you generate fully hardcoded include paths?
[13:36:17] <FromDiscord> <haxscramper> Like, it does not really matter what compiler they use if you cut down wrappers before they reach into things like `bits/features.h` or `bits/endian.h`
[13:36:30] <FromDiscord> <haxscramper> And if you are in the library wrappers it is all the same
[13:47:19] <PMunch> I basically just feed those paths to clang and then query clang for the types in the original files I wanted to include
[13:47:51] <PMunch> So if there are some differences in those file it might bubble up. But I haven't noticed any issues with cross-using the headers yet
[14:37:28] *** Joins: krux02 (~krux02@p200300ca8f0d0300fb0f49e84c91d652.dip0.t-ipconnect.de)
[14:41:37] <FromDiscord> <Goel> So into a proc, since i can't write `else: break` to end a loop if the earliers conditions are not met, using `else: return` does the same?
[14:44:57] <FromDiscord> <Rika> You can break a loop
[14:45:10] <FromDiscord> <Rika> What’s the full picture
[14:45:29] <FromDiscord> <NullCode> can you break an if else tho
[14:45:37] <FromDiscord> <NullCode> I don't know about that
[14:46:52] <FromDiscord> <NullCode> (edit) "don't know about that" => "said previously was stupid"
[14:48:43] <FromDiscord> <Rika> BRB checking irc to read what you said
[14:54:51] <FromDiscord> <NullCode> alright
[14:55:05] <FromDiscord> <NullCode> wait, you can check in irc if discord users edit message?
[14:55:06] <FromDiscord> <NullCode> oh NO
[14:55:31] <FromDiscord> <Rika> Of course
[14:56:03] <FromDiscord> <NullCode> too bad
[14:56:29] <FromDiscord> <Rika> > break an if else↵Bruh
[14:56:29] <FromDiscord> <Goel> sent a code paste, see https://play.nim-lang.org/#ix=3ATR
[14:56:32] <FromDiscord> <NullCode> ive sent shit i wasnt meant to in another irc bridge server
[14:56:41] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[14:56:44] <FromDiscord> <NullCode> In reply to @Rika "> break an if": yeah totally stupid
[14:56:50] <FromDiscord> <Rika> sent a code paste, see https://paste.rs/5rj
[14:56:59] <FromDiscord> <NullCode> now delete thanks
[14:57:23] <FromDiscord> <Goel> What do you mean there is not loop?
[14:57:32] <FromDiscord> <NullCode> if else aint a loop
[14:57:37] <FromDiscord> <NullCode> it's a condition statement
[14:57:47] <FromDiscord> <NullCode> and also, try `else: discard`
[14:58:00] <FromDiscord> <NullCode> it works for me (although idk about loops)
[14:58:05] <FromDiscord> <NullCode> (edit) "loops)" => "procs)"
[14:58:22] <FromDiscord> <Rika> Did you know that you’re not required to put an else
[14:58:43] <FromDiscord> <Rika> Else discard is equivalent to not having an else section
[14:58:56] <FromDiscord> <Goel> Nope doesn't work with else: discard, and if i delete the `else` doesn't work either as expected
[14:59:12] <FromDiscord> <Goel> Only works with `else: return`
[14:59:26] <FromDiscord> <NullCode> well whatever works for you
[14:59:53] <FromDiscord> <NullCode> btw
[14:59:59] <FromDiscord> <NullCode> how can i play an audio file using nim
[15:00:22] <FromDiscord> <NullCode> https://gist.github.com/zacharycarter/846869eb3423e20af04dea226b65c18f
[15:00:26] <FromDiscord> <NullCode> hmm just found this
[15:01:06] <FromDiscord> <Goel> https://nimble.directory/search?query=audio+player
[15:01:59] <FromDiscord> <NullCode> oh shit I've never seen nimble.directory
[15:02:01] <FromDiscord> <NullCode> this is cool
[15:03:55] <FromDiscord> <Goel> Oh yes it is, bookmark it immediatly! :nimble:
[15:07:39] <FromDiscord> <Rika> Honestly I just search on GitHub or other hubs because there’s a lot of stuff not on nimble
[15:10:00] <FromDiscord> <NullCode> yeah I've been searching on github too
[15:10:12] <FromDiscord> <NullCode> but I don't know, it's a lil cumbersome
[15:10:18] <FromDiscord> <NullCode> having to hit next page every now and again
[15:10:29] <FromDiscord> <NullCode> sometimes, a shorter list is better
[15:10:36] <FromDiscord> <Rika> Isn’t it the same issue on the directory
[15:10:44] <FromDiscord> <Rika> You can filter by language in GitHub
[15:11:44] <FromDiscord> <NullCode> i don't see a next page on directory
[15:11:45] <FromDiscord> <NullCode> so yeah
[15:11:52] <FromDiscord> <NullCode> lemme search for something a lil more vague
[15:12:18] <FromDiscord> <NullCode> nope
[15:12:22] <FromDiscord> <NullCode> everything''s inside a single page
[15:12:27] <FromDiscord> <NullCode> (edit) "everything''s" => "everything's"
[15:12:35] <FromDiscord> <NullCode> thats one of the things i love about nim docs
[15:15:21] <FromDiscord> <Rika> Eh some people aren’t a fan of infinite scroll
[15:16:05] <FromDiscord> <NullCode> why not
[15:16:14] <FromDiscord> <NullCode> just control f on one page only
[15:18:21] <FromDiscord> <tbrekalo> how can I return string view from a function?
[15:18:37] <FromDiscord> <enthus1ast> when a c function gets an array, it must be a ptr right? ↵Do i need to do this in nim as well? (so addr arr[0]) or is this handled automatically?
[15:18:38] <FromDiscord> <NullCode> string view?
[15:19:30] <FromDiscord> <tbrekalo> let str = "aabbcc"↵and I want to return from a funciton str[2 .. 4] without making a copy of data
[15:21:43] <FromDiscord> <auxym> nim has copy semantics. why do you want to do this?
[15:21:49] <FromDiscord> <Rika> In reply to @NullCode "why not": If the page unloads you lose your position
[15:21:51] <FromDiscord> <NullCode> sent a code paste, see https://play.nim-lang.org/#ix=3ATX
[15:22:05] <FromDiscord> <NullCode> In reply to @Rika "If the page unloads": just control f there again
[15:22:08] <FromDiscord> <enthus1ast> afaik this is a copy↵(@NullCode)
[15:22:13] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3ATZ
[15:22:16] <FromDiscord> <NullCode> oh
[15:22:21] <FromDiscord> <auxym> afaik also
[15:22:41] <FromDiscord> <Rika> Why do you want no copies?
[15:22:49] <FromDiscord> <tbrekalo> large amounts of data
[15:23:00] <FromDiscord> <Rika> There are experimental views afaik
[15:23:07] <FromDiscord> <enthus1ast> i'm not aware of a build in way, but i know there was a discussion about this somewhere on github, you could however build it yourself for your usecase
[15:23:38] <FromDiscord> <tbrekalo> I saw the view experimental feature; wondering was there a standard way of doing it
[15:23:44] <FromDiscord> <tbrekalo> without experimental features
[15:24:13] <FromDiscord> <tbrekalo> but I have a large string and I need to format it that after each 80 chars comes a new line in the output
[15:24:39] <FromDiscord> <Rika> https://nim-lang.org/docs/manual_experimental.html#view-types ?
[15:24:45] <FromDiscord> <Rika> No
[15:24:57] <FromDiscord> <Rika> You can do it in an unsafe way
[15:25:03] <FromDiscord> <Rika> Non experimental but still unsafe
[15:25:18] *** Quits: max22- (~maxime@2a01cb08833598008bbf230aeaa6be66.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[15:25:28] <FromDiscord> <auxym> what is "large"? Are you sure copies are really a problem? If so could you just return indices into it or something like that, instead of a view?
[15:25:29] <FromDiscord> <Rika> In reply to @tbrekalo "but I have a": You need to construct a new string for this anyway…
[15:25:55] <FromDiscord> <Rika> Unless you already use ropes or a gap buffer
[15:26:04] <FromDiscord> <auxym> Yeah, making a copy of 80 bytes shouln't be an issue
[15:26:29] <FromDiscord> <Rika> You can’t do that with no copying afaik
[15:26:55] <FromDiscord> <tbrekalo> ehhh.... I still think in tearms of c++ while doing nim
[15:27:21] <FromDiscord> <Rika> We’re slowly getting to views but I don’t see how views would help with the modification you propose
[15:27:32] <FromDiscord> <Rika> You want to insert something, which means shifting memory
[15:27:39] <FromDiscord> <Rika> Or just constructing a new string
[15:27:42] <FromDiscord> <enthus1ast> would the memory grow when you insert newline?
[15:27:49] <FromDiscord> <Rika> Exactly what I mean
[15:29:13] <FromDiscord> <tbrekalo> Would save me an extra copy; maybe.. give me a moment
[15:29:43] <FromDiscord> <tbrekalo> an extra copy per line format
[15:30:08] <FromDiscord> <Rika> Mind showing why
[15:30:09] <FromDiscord> <Rika> ?
[15:30:35] *** Joins: pro (~pro@user/pro)
[15:30:47] <FromDiscord> <tbrekalo> give me few mins to code it up
[15:32:00] <FromDiscord> <Rika> Sorry
[15:32:22] *** Quits: pro (~pro@user/pro) (Client Quit)
[15:36:00] <FromDiscord> <Marvel> is there a way to do something like `if a+ b == c and x + y == z` in nim? i tried `&`, `&&`, `and` but none worked
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:13] <FromDiscord> <enthus1ast> and
[15:36:30] <FromDiscord> <enthus1ast> could be that you must overload and
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:49] <FromDiscord> <Marvel> huh
[15:36:55] <FromDiscord> <Marvel> when i do that i get type mismatch
[15:37:19] <FromDiscord> <Rika> Avoid having unequal spaces around operators
[15:37:52] <FromDiscord> <Rika> !eval echo 1+1==2 and 2+2==4
[15:37:55] <NimBot> true
[15:40:08] <FromDiscord> <tbrekalo> Data is once copied into a temporary which is returned from a function and that temporary is then used to copy data onto the result variable; unless compiler omits the return temporary https://media.discordapp.net/attachments/371759389889003532/894919381694439495/unknown.png
[15:41:39] <FromDiscord> <Rika> If you want to not use experimental, return the indices and access them in the loop perhaps
[15:41:56] <FromDiscord> <tbrekalo> In reply to @Rika "If you want to": ye; was thinking about that
[15:41:56] <FromDiscord> <Rika> I can see that it would still copy though
[15:42:08] <FromDiscord> <tbrekalo> ye but one copy instead of two
[15:42:11] <FromDiscord> <Rika> But I believe it is unavoidable since Nim doesn’t really have the support yet
[15:42:36] <FromDiscord> <tbrekalo> thanks
[16:04:26] <FromDiscord> <enthus1ast> to answer my question\: no need to get the addr of an array for c interopt, (just call the correct functions ;) )
[16:24:31] <FromDiscord> <juan_carlos> So I am responding like questions about Nim, one of the questions is "Maximum length of string", what would be the best answer ?.
[16:24:39] *** Joins: arkurious (~arkurious@user/arkurious)
[16:24:57] <FromDiscord> <juan_carlos> "No limit" ?, "Limited by memory capacity" ?
[16:28:09] <FromDiscord> <demotomohiro> I think it is `min(memory space size, available memory size)`
[16:30:04] <FromDiscord> <Rika> What language has a coded maximum string length?
[16:32:03] *** Joins: rockcavera (~rc@192.12.113.70)
[16:32:04] *** Quits: rockcavera (~rc@192.12.113.70) (Changing host)
[16:32:04] *** Joins: rockcavera (~rc@user/rockcavera)
[16:34:51] <FromDiscord> <el__maco> Pascal had a maximum length of 255, because the first byte of the string array was its length
[16:35:43] *** Joins: Guest9 (~Guest9@99-6-76-144.lightspeed.rcsntx.sbcglobal.net)
[16:37:00] <Guest9> Hello everyone. I have a quite naive question. Is it possible to omit the proc definition/prototyped even if the proc is used before it is implemented? Like in Java?
[16:38:58] <FromDiscord> <demotomohiro> You can do it like C.↵Just declare it like↵`proc foo(a: int)`
[16:39:04] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[16:39:11] <FromDiscord> <Rika> In reply to @el__maco "Pascal had a maximum": Ah I guess technically Nim has this limit as well, except it’s 2^32 or was it 64?
[16:39:34] <FromDiscord> <Rika> In reply to @demotomohiro "You can do it": But the proc has to be implemented later in the same file
[16:40:35] <FromDiscord> <el__maco> you can also avoid forward declararing if you use the most awesome feature of Nim, code reordering
[16:40:57] <FromDiscord> <el__maco> <https://nim-lang.github.io/Nim/manual_experimental.html#code-reordering>
[16:41:08] <Guest9> I will have a look the reordering. Thank you
[16:41:59] <FromDiscord> <el__maco> its experimental feature so there might be some caveats, but so far its been working well for me
[16:42:53] <FromDiscord> <juan_carlos> I think the only caveat of code reordering is that is not aware of macro-generated proc.
[16:43:14] <Guest9> Understood. Actually it is ok to me to put lots of function prototype at the beginning of the program since I used the C language daily. Just curious.
[16:44:27] <FromDiscord> <el__maco> personally I find it rather silly that its 2021 and we're still forward declaring functions. A clerical task that's trivial for the computer to do 😔
[16:46:30] <Guest9> I think the forward declaring functions is good for software quality in some sense, I think.
[16:46:34] <FromDiscord> <juan_carlos> I kinda like that functions are declared from top to bottom tho.
[16:47:08] <FromDiscord> <juan_carlos> In Python I have to jump around top-bottom and back to find randomly placed function declarations.
[16:47:18] <Guest9> You can write the functions definition first and fill the implementation later. Make sure everything matches.
[16:48:25] <FromDiscord> <juan_carlos> I think is not trivial, I think is speeds up parsing a lot.
[16:49:34] <FromDiscord> <el__maco> I think computer science curriculums need more Bret Victor in them 😔
[16:52:24] <FromDiscord> <el__maco> the modern computer is mind boggingly fast. Scanning through a megabyte of text to find some symbol names is not slow at all, or it should not be at least 🤷‍♂️
[16:53:29] <FromDiscord> <xflywind> there are two PRs which intend to solve the forward declare issue
[16:53:30] <FromDiscord> <xflywind> https://github.com/nim-lang/Nim/pull/18818
[16:53:38] <FromDiscord> <xflywind> https://github.com/nim-lang/Nim/pull/18822
[17:06:45] *** Joins: dukester (~dnormandi@node-1w7jr9ydqpxqblsm62c2zjhms.ipv6.telus.net)
[17:08:59] *** Joins: rockcavera (~rc@192.12.114.196)
[17:08:59] *** Quits: rockcavera (~rc@192.12.114.196) (Changing host)
[17:08:59] *** Joins: rockcavera (~rc@user/rockcavera)
[17:09:32] <dukester> noob here! Is there program structure that I should follow? Any main() ? Or is Nim code just free-flow; anything goes - except indentation.
[17:10:44] <FromDiscord> <juan_carlos> A `main()` is ok, not mandatory tho.
[17:10:59] <FromDiscord> <juan_carlos> If is named `potato()` it will work anyway.
[17:11:40] <dukester> OK thanks
[17:13:14] *** Parts: dukester (~dnormandi@node-1w7jr9ydqpxqblsm62c2zjhms.ipv6.telus.net) (Leaving)
[17:16:15] <FromDiscord> <NullCode> In reply to @dukester "noob here! Is there": anything goes lmao
[17:16:27] <FromDiscord> <NullCode> you can do whatever you want, functionally nothing will happen
[17:16:32] <FromDiscord> <NullCode> well it might look bad, but yea
[17:18:29] <FromDiscord> <NullCode> anywho, i need some pointers on nigui
[17:18:38] <FromDiscord> <NullCode> https://github.com/trustable-code/NiGui/
[17:18:40] <nrds> <12R2D299> 4GitHub: 7"Cross-platform desktop GUI toolkit written in Nim"
[17:18:53] <FromDiscord> <NullCode> specially, https://github.com/trustable-code/NiGui/blob/1f453d5dac6f42e2bbfd260215c5269324a45603/src/nigui.nim#L2840
[17:19:13] <FromDiscord> <NullCode> i wanna turn the editable into `false`, but i dont understand how
[17:27:07] *** Quits: asd (~noname@user/asd) (Ping timeout: 250 seconds)
[17:27:32] *** Quits: Guest9 (~Guest9@99-6-76-144.lightspeed.rcsntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[17:30:51] <FromDiscord> <NullCode> ok nvm, no need
[17:31:09] <FromDiscord> <NullCode> i need some other pointers on niGui now
[17:33:12] <FromDiscord> <NullCode> this doesn't work
[17:33:14] <FromDiscord> <NullCode> sent a code paste, see https://play.nim-lang.org/#ix=3AUL
[17:33:17] <FromDiscord> <NullCode> (i don't expect this to work)
[17:33:33] <FromDiscord> <NullCode> but i need to periodically add some shit to the textBox
[17:33:45] <FromDiscord> <NullCode> (edit) "textBox" => "textArea without the use of buttons and stuff"
[17:33:49] <FromDiscord> <NullCode> i wanted it to be automatic
[17:34:06] <FromDiscord> <NullCode> is there a way to do this with Nim/any other "light" gui lib
[17:34:32] <FromDiscord> <NullCode> (edit) "https://play.nim-lang.org/#ix=3AUL" => "https://play.nim-lang.org/#ix=3AUM"
[17:43:13] *** Joins: max22- (~maxime@2a01cb088335980036d4a1972afb126b.ipv6.abo.wanadoo.fr)
[17:53:15] *** Joins: dukester (~dnormandi@node-1w7jr9ydqpxqblsm62c2zjhms.ipv6.telus.net)
[17:58:55] *** Joins: asd (~noname@user/asd)
[18:01:23] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[18:11:59] <FromDiscord> <Archion> Hi
[18:14:34] <FromDiscord> <NullCode> hi
[18:15:30] <FromDiscord> <enthus1ast> @NullCode\: you need to to it via timeouts
[18:16:06] <FromDiscord> <enthus1ast> or, what i like to do, is to drive an async loop via gui timeouts/callbacks, and code the stuff with async procs
[18:16:16] <FromDiscord> <enthus1ast> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/894958482221064202): @NullCode\: you need to do it via timeouts
[18:17:04] <FromDiscord> <enthus1ast> https://github.com/trustable-code/NiGui/blob/1f453d5dac6f42e2bbfd260215c5269324a45603/src/nigui.nim#L549
[18:17:22] <FromDiscord> <enthus1ast> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/894958482221064202): @NullCode\: you need to do it via \~\~timeouts\~\~ Timers
[18:18:25] <FromDiscord> <enthus1ast> the app.run() blocks the execution so your loop is run after the gui loop is done
[18:18:37] <FromDiscord> <NullCode> i see
[18:19:26] <FromDiscord> <NullCode> lemme see if i can figure out timers
[18:20:03] <FromDiscord> <enthus1ast> https://github.com/trustable-code/NiGui/blob/732acf350fbd46e058eeb852b80edfc2142d4004/examples/example_08_timers.nim
[18:20:37] <FromDiscord> <NullCode> yeah I'm seeing that one
[18:20:50] <FromDiscord> <NullCode> it uses buttons so yeah
[18:21:08] <FromDiscord> <enthus1ast> so?
[18:21:21] <FromDiscord> <enthus1ast> just call the startRepeatingTimer somewhere
[18:21:33] <FromDiscord> <enthus1ast> (before the call to app.run() )
[18:22:43] <FromDiscord> <enthus1ast> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/894959951598997524): just call the startTimer / startRepeatingTimer somewhere
[18:26:37] *** Parts: dukester (~dnormandi@node-1w7jr9ydqpxqblsm62c2zjhms.ipv6.telus.net) (Leaving)
[18:26:57] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/894961360222453790/unknown.png
[18:27:01] <FromDiscord> <NullCode> amazing
[18:27:05] <FromDiscord> <NullCode> thanks lots
[18:29:35] *** Joins: dukester (~dnormandi@node-1w7jr9ydqpxqblsm62c2zjhms.ipv6.telus.net)
[18:33:01] *** Parts: dukester (~dnormandi@node-1w7jr9ydqpxqblsm62c2zjhms.ipv6.telus.net) ()
[18:47:35] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[18:48:01] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[18:50:25] *** Gustavo6046_ is now known as Gustavo6046
[19:11:47] *** Joins: NeoCron (~NeoCron@p200300c4cf1c96002e5e9f24316d1b2a.dip0.t-ipconnect.de)
[19:15:58] <FromDiscord> <xflywind> !eval const _ =12; echo _
[19:16:01] <NimBot> 12
[19:22:00] <FromDiscord> <Archion> !eval const =12; echo
[19:22:03] <NimBot> Compile failed: /usercode/in.nim(1, 7) Error: identifier expected, but got '='
[19:22:04] <FromDiscord> <Archion> What
[19:23:17] <FromDiscord> <xflywind> well, the text is `!eval const _ = 12; echo _`
[19:23:28] <FromDiscord> <Archion> O_o
[19:23:46] <FromDiscord> <Archion> !eval const e=12; echo e
[19:23:48] <NimBot> 12
[19:24:15] <FromDiscord> <xflywind> however
[19:24:16] <FromDiscord> <xflywind> !eval let _ = 12; echo _
[19:24:19] <NimBot> Compile failed: /usercode/in.nim(1, 18) Error: undeclared identifier: '_'
[19:27:47] <FromDiscord> <Archion> !eval int xd=3+4; echo xd
[19:27:50] <NimBot> Compile failed: /usercode/in.nim(1, 5) Error: undeclared identifier: 'xd'
[19:28:14] <FromDiscord> <enthus1ast> let xd\: int
[19:28:58] <FromDiscord> <enthus1ast> !eval let xd\:int = 3 + 4; echo xd
[19:29:01] <NimBot> Compile failed: /usercode/in.nim(1, 9) Error: ':' or '=' expected, but got 'int'
[19:29:20] <FromDiscord> <enthus1ast> !eval let xd\: int = 3 + 4; echo xd
[19:29:23] <NimBot> Compile failed: /usercode/in.nim(1, 10) Error: ':' or '=' expected, but got 'int'
[19:30:04] <FromDiscord> <enthus1ast> bridge must break something
[19:32:11] <Amun-Ra> !eval let xd: int = 3 + 4; echo xd
[19:32:14] <NimBot> 7
[19:32:35] <Amun-Ra> it appears it escapes :
[19:39:17] <FromDiscord> <cgay (Carl Gay)> Hi folks. I was just trying the Playground and when I set it to generate C++ code instead of C I get a 502 error.  Just using the default example\: https://play.nim-lang.org/#ix=2lK1
[19:39:49] <FromDiscord> <cgay (Carl Gay)> Just want to let someone know in case you're not aware of it yet. Not really a problem for me. Thanks.
[19:52:24] <FromDiscord> <gnu+linux user> yes you are correct
[19:54:14] <FromDiscord> <gnu+linux user> {using \n defeeats whole urpose of using nim for crossplatofrm)
[19:56:18] <FromDiscord> <iffy (Matt Haggard)> I'm working on fixing choosenim, which means fixing zippy. Is there a better way to convert bitmasks to a set of enums as I'm doing here? https://github.com/iffy/zippy/blob/master/src/zippy/tarballs.nim#L38 If you don't want to click, I'm just doing this for every bit I want to check\: `if filemode.masked(TUREAD) != 0: result.incl(fpUserRead)`
[19:57:11] <FromDiscord> <cabboose> bra
[19:57:12] <FromDiscord> <cabboose> jesus christ
[19:57:26] <FromDiscord> <cabboose> is that
[19:57:28] <FromDiscord> <cabboose> is that
[19:57:33] <FromDiscord> <cabboose> is that blank space
[19:57:38] <FromDiscord> <cabboose> they are in perfect 3s
[19:57:52] <FromDiscord> <cabboose> anyway, are those enums in order
[19:58:07] <FromDiscord> <cabboose> where are they defined
[19:59:17] <FromDiscord> <iffy (Matt Haggard)> The enums are from the stdlib\: https://nim-lang.org/docs/os.html#FilePermission
[19:59:40] <FromDiscord> <enthus1ast> does not look too bad imho, its readable an all that
[20:00:43] <FromDiscord> <cabboose> well now it really depends on how a set of flags are cast into an int
[20:01:16] <FromDiscord> <cabboose> https://github.com/nim-works/loony/blob/main/loony/ward.nim
[20:01:27] <FromDiscord> <cabboose> that does int-\>set stuff
[20:01:57] <FromDiscord> <cabboose> if it was just cast from set -\> int then you can just do the same thing the other way
[20:02:03] <FromDiscord> <cabboose> enum sets are just bit sets anyway
[20:02:45] <FromDiscord> <treeform> In reply to @iffy (Matt Haggard) "I'm working on fixing": Do you mean to add stream tarball functionlity?
[20:05:26] <FromDiscord> <iffy (Matt Haggard)> treeform\: no, just preserving permissions un untar/unzip
[20:06:41] <FromDiscord> <treeform> Oh that should not be hard
[20:06:58] <FromDiscord> <treeform> Choosenim relies on that?
[20:11:32] <FromDiscord> <iffy (Matt Haggard)> it does in the newest version
[20:11:42] <FromDiscord> <iffy (Matt Haggard)> I've got tars working -- now trying to understand zip files
[20:39:34] <FromDiscord> <iffy (Matt Haggard)> oh, you can just use `and` instead of `masked`
[20:42:14] <FromDiscord> <cabboose> why dun you just make it so you can cast between them
[20:42:56] <FromDiscord> <iffy (Matt Haggard)> That sounds great. How do you suggest doing that?
[20:43:24] <FromDiscord> <cabboose> did you look at the link
[20:43:37] <FromDiscord> <cabboose> or just give me sample code and i'll do it
[20:44:02] <FromDiscord> <iffy (Matt Haggard)> https://github.com/iffy/zippy/blob/master/src/zippy/tarballs.nim#L38
[20:45:55] <FromDiscord> <iffy (Matt Haggard)> I looked at the link, but I think casting depends on controlling the order the enums are defined (or their value), right?
[20:58:40] <FromDiscord> <cabboose> yeah
[20:59:04] <FromDiscord> <cabboose> you wouldnt have a problem if the os flags werent in the wrong order
[21:01:09] <FromDiscord> <cabboose> so im just going to rotate them
[21:01:11] <FromDiscord> <cabboose> and then cast them to a set
[21:01:14] <FromDiscord> <cabboose> and that should be fine
[21:01:31] <FromDiscord> <cabboose> im just retarded and have to figure out what the binary representations are of these constants you have here
[21:02:04] <FromDiscord> <juan_carlos> sent a long message, see http://ix.io/3AVX
[21:02:24] <FromDiscord> <cabboose> is websocket a ref?
[21:02:57] <FromDiscord> <juan_carlos> Yes, ooh
[21:03:47] <FromDiscord> <cabboose> you can probably set the destroy for the actual object itself
[21:04:19] <FromDiscord> <treeform> is this `ws`'s WebSocket or some other one?
[21:05:16] <FromDiscord> <juan_carlos> Sorry, you right, error message is not too helpful for ref.  😛
[21:07:37] <FromDiscord> <cabboose> can you try cast the filemode into a uint16, rotate left 10 positions, decrement by 1 and then cast?
[21:08:24] <FromDiscord> <cabboose> or just rotate right
[21:08:28] <FromDiscord> <cabboose> whatever floats your jimmies
[21:11:56] <FromDiscord> <cabboose> hah hold on
[21:13:55] <FromDiscord> <cabboose> omg screw it im just going to rearrange the damn bits manually
[21:17:19] <NimEventer> New question by Alex Craft: Iterate over multiple tuples in Nim?, see https://stackoverflow.com/questions/69455064/iterate-over-multiple-tuples-in-nim
[21:22:21] <FromDiscord> <iffy (Matt Haggard)> hehe... cabboose, tag my name when you're done so I can see the result
[21:33:27] <FromDiscord> <cabboose> sent a code paste, see https://play.nim-lang.org/#ix=3AW6
[21:33:48] <FromDiscord> <cabboose> there you go. That wouldnt have taken so long if my eyes werent bleeding
[21:33:54] <FromDiscord> <cabboose> annoying.
[21:35:24] <FromDiscord> <cabboose> sent a code paste, see https://play.nim-lang.org/#ix=3AW9
[21:47:31] <NimEventer> New thread by Pixeye: Macro work strange behavior, see https://forum.nim-lang.org/t/8481
[21:51:32] <FromDiscord> <el__maco> I think I got my first Nim program working, yay. A quick benchmark seems to indicate a ~20% performance penalty compared to the C program I modeled it after. Not ideal, but also could be worse I guess
[21:52:09] <FromDiscord> <enthus1ast> maybe you can speed it up
[21:54:10] <FromDiscord> <enthus1ast> -d\:release --opt\:speed --passl\:-flto --passc\:-flto
[21:54:37] <FromDiscord> <el__maco> I used ``-d:danger -d:release --opt:speed``
[21:57:14] <FromDiscord> <el__maco> ``Command line warning D9002 : ignoring unknown option '-flto'``
[21:58:01] <FromDiscord> <el__maco> ah, I'm using msvc that must be why
[21:58:04] <FromDiscord> <Rika> -d:release not needed when -d:danger
[21:58:59] <FromDiscord> <enthus1ast> idk if and how msvc can do link time optimization
[22:01:30] <FromDiscord> <el__maco> I'm sure there are things I could do to improve the performance. The C counterpart is using 32 bit ints like C++ does. And there are some pointer shenanigans that probably could be more efficiently expressed if I knew how
[22:02:47] <FromDiscord> <enthus1ast> what do you mean?
[22:05:14] <FromDiscord> <el__maco> I mean I have not looked at the end result that the nim compiler produced, but I'm fairly sure there are things I could do to reduce overhead. Kinda depends on how smart the compiler is optimizing multidimensional array access
[22:06:29] <FromDiscord> <el__maco> there's more of that in the code compared to the C side where its mostly just dereferencing pointers
[22:08:16] <FromDiscord> <el__maco> how stable is the compiler I'm wondering
[22:08:45] <FromDiscord> <el__maco> I already got into a weird situation that looked kinda like a compiler bug, but I'm not sure 😅
[22:18:47] <FromDiscord> <Schelz> hi, how can I read the input from keyboard, not input type.
[22:21:18] <FromDiscord> <enthus1ast> stdin.readLine()
[22:21:45] <FromDiscord> <enthus1ast> but you should be more specific
[22:22:49] <FromDiscord> <Schelz> for example in a game idk know how to check if (w, a, s, d) is pressed or not
[22:23:12] <FromDiscord> <Schelz> (edit) 04removed "idk know how"
[22:23:16] <FromDiscord> <enthus1ast> this depends on the engine you're useing
[22:24:13] <FromDiscord> <Schelz> for example win32api.GetAsyncKeyState(0x20)
[22:26:33] <FromDiscord> <enthus1ast> yes on windows you could certainly do this, but i would read the engine's manual how you're supposed to get keyboard input
[22:27:55] <FromDiscord> <enthus1ast> afaik GetAsyncKeyState also get you keypresses when the windows is not active, certainly not what you want
[22:32:05] <FromDiscord> <Schelz> thx 😊
[22:40:01] <nrds> <06Prestige99> Are there any c++ nim wrappers I could check out? I'm thinking of wrapping box2d if it's possible
[22:51:35] <FromDiscord> <qb> sent a code paste, see https://play.nim-lang.org/#ix=3AWw
[22:51:39] <FromDiscord> <qb> How could i realize that piece of python code?
[23:02:44] <FromDiscord> <enthus1ast> you define a type and cast the memory to this type
[23:02:54] <FromDiscord> <enthus1ast> but it depends i think
[23:03:19] <FromDiscord> <enthus1ast> better parse then cast i guess
[23:05:17] <FromDiscord> <enthus1ast> https://github.com/OpenSystemsLab/struct.nim
[23:05:20] <nrds> <12R2D299> 4GitHub: 7"Python-like 'struct' for Nim"
[23:13:54] <FromDiscord> <dom96> @iffy thanks for looking into fixing that in zippy, fwiw choosenim actually has functionality to add the +x perms after extracting
[23:14:13] <FromDiscord> <dom96> I was planning to patch that
[23:14:36] <FromDiscord> <dom96> [iffy (Matt Haggard)](https://matrix.to/#/@iffy-529c6cd8ed5ab0b3bf04da13:gitter.im)\: ^
[23:28:24] <FromDiscord> <dom96> oh, I see it's already in latest zippy, nice
[23:47:14] *** Quits: neurocyte013288 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[23:52:01] <FromDiscord> <dom96> I don't suppose anyone's around to test a new choosenim release for me? 🙂
[23:52:13] <FromDiscord> <dom96> (edit) "for" => "with"
[23:54:51] <FromDiscord> <dom96> ooh, Github's release notes auto-gen is nice: https://github.com/dom96/choosenim/releases/tag/v0.8.2
[23:55:48] <FromDiscord> <dom96> I'm gonna go make food, once I eat I'll create a macOS binary and finalise release
[23:55:52] <FromDiscord> <dom96> testing appreciated
