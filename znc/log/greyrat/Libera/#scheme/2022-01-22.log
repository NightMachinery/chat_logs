[00:19:54] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca)
[00:30:08] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[00:37:28] *** Joins: livoreno (~livoreno@user/notzmv)
[00:46:06] *** Joins: johnjaye (~pi@173.209.65.233)
[00:48:29] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 268 seconds)
[00:53:07] *** Quits: Darkcoal (~user@130.164.163.44) (Quit: Darkcoal)
[00:56:15] *** Quits: sheb (~sheb@31.223.228.71) (Quit: Leaving)
[01:02:25] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:10:07] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[01:12:31] *** Joins: seninha (~seninha@user/seninha)
[01:17:47] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:18:50] <wasamasa> so, uh: https://mitpress.mit.edu/books/structure-and-interpretation-computer-programs-1
[01:19:00] <wasamasa> SICP confirmed to migrate over to JS
[01:20:22] <sonny> makes sense, it's widely available
[01:22:27] <Zipheir> Still, ugh.
[01:23:42] <Zipheir> If they really wanted to stick to dynamic typing, then I'd expect them to just explicitly use Racket.
[01:24:29] <sonny> Zipheir: the alternative is to provide a super small comercial friendly scheme, and a web interpreter with the book
[01:24:40] <Zipheir> Also, goodbye, tail loops.
[01:26:17] <Zipheir> sonny: There are a number of Racket Web REPLs...
[01:27:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:27:17] <sonny> it's a tough decision but I'm ok with it
[01:27:27] <Zipheir> It's just bonkers.  They'll have to rewrite most of the recursive programs in the book, among other things.
[01:29:00] <Zipheir> And MIT already gave up on SICP in favor of Python-flavored intro classes, so I can't see what the point of a JS version is.
[01:29:26] <sonny> python is "difficult to access"
[01:30:19] <gwatt> You can still get the scheme version of sicp
[01:30:20] <Zipheir> I can see the advantage of using a language that most devices have a built-in interpreter for.
[01:30:54] <sonny> yeah, even on tablets, phones
[01:31:02] <Zipheir> But it's really not an improvement over Scheme, IMO, so it's going backwards.
[01:31:49] <sonny> the priority seems like it's to get the ideas out, if there's interest they can always get racket or something I imagine
[01:31:59] <Zipheir> Yeah, they're not going to burn the Scheme edition or anything.
[01:32:21] <gwatt> at my previous job, we did a bit of sicp in the book club. Up until the pictures chapter, we had people using several languages. One guy used scala, another scheme, I did a bit of it in erlang
[01:32:48] <sonny> oh yeah, with JS you get graphics for free
[01:33:01] <sonny> that's compelling
[01:33:02] <gwatt> I don't remember if anybody did JS
[01:33:30] <Zipheir> JS's support for functional programming is still anemic, and then there's the weak type system...
[01:33:30] <gwatt> One guy did rust, and another tried everything in C
[01:33:58] <Zipheir> SICP in C is hardcore!
[01:34:35] <tokie> C is kinda on its way out, though, so it's not a great choice either
[01:35:14] <Zipheir> C is not even close to on its way out.
[01:35:19] <gwatt> The point is to learn what SICP is teaching. the language is merely a vehicle
[01:35:31] <sonny> agreed
[01:35:32] <Zipheir> JS is a poor vehicle.
[01:36:15] <sonny> get with the times old man! :P
[01:36:39] <Zipheir> Oh, you want a *new* language?  Why didn't they use Idris? :)
[01:37:00] <Zipheir> Sussman is grumpy about static typing, I suppose.
[01:37:15] <gwatt> that would be pretty funny, considering Idris2 is written in chezscheme
[01:37:18] <sonny> I don't even have to check, but I'm pretty sure that doesn't support Windows 
[01:37:31] <Zipheir> gwatt: Exactly.
[01:38:12] <Zipheir> sonny: Sure it does. https://github.com/idris-lang/Idris-dev/wiki/Idris-on-Windows
[01:38:29] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:38:46] <sonny> via msys2, ok that's better than nothing
[01:38:47] <Zipheir> But, if the criterion for an easy-to-use language is "no installation required", you can't beat JS these days.
[01:38:48] <gwatt> well, it's done using msys.
[01:39:49] <Zipheir> It's quite possible Idris would be a pretty hard vehicle.
[01:40:11] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:c67d:fb9e:353d:4cf3) (Ping timeout: 256 seconds)
[01:51:10] *** Joins: gproto23 (~gproto23@user/gproto23)
[01:51:11] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca) (Remote host closed the connection)
[01:56:12] <Zipheir> I'll stop being grumpy about it.  More people reading SICP is undoubtedly a Good Thing.
[02:14:22] * jao takes the batton of being grumpy (and sad)
[02:25:54] <Menchers> oh hey did you see that SICP-- oh yes we've already seen it here
[02:26:08] *** Joins: daviid (~user@2804:14d:5c21:8f86::1001)
[02:26:08] <Menchers> wow
[02:32:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:33:04] *** Quits: klovett_ (~klovett@166.205.90.179) (Ping timeout: 256 seconds)
[02:38:28] <wasamasa> it's kind of disappointing because lisps in general have this quality of being so easy to understand you rarely if ever fight the language
[02:38:37] <wasamasa> so you can fully concentrate on solving your problem
[02:38:48] <wasamasa> simplicity and consistent semantics help with that
[02:39:04] <wasamasa> doesn't need to be a lisp for that, smalltalk felt pretty similar in this aspect
[02:39:12] <wasamasa> JS however is full of nasty surprises
[02:39:42] <Franciman> phew, scheme's lexical structure is hard
[02:40:11] <Franciman> there are 200 things starting with # :)
[02:40:22] <wasamasa> it's a dispatch character in CL
[02:42:15] <Franciman> i don't think i understand it
[02:42:32] <johnjaye> speaking of SICP. that new book by hanson and sussman looks kind of interesting
[02:42:43] <johnjaye> i like how it summarizes all of scheme in about 10 pages in appendix B.
[02:48:18] <Franciman> i'll finally learn javascript
[02:48:31] <Franciman> how to write proper code in javascript
[02:50:16] <sham1> By writing in TypeScript
[02:50:55] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[02:51:30] <Franciman> :)
[03:14:57] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[03:23:13] <teiresias> I literally thought the SICP thing was a badly timed April Fools joke or prank.
[03:27:57] <X-Scale> Indeed, i'm still trying to recover from the initial shock.
[03:48:27] <tokie> implementing syntax-rules makes my head spin
[03:48:45] <tokie> lotsa breaks!
[04:02:08] *** Joins: klovett (~klovett@166.205.90.179)
[04:02:25] *** Quits: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt) (Ping timeout: 256 seconds)
[04:03:48] *** Joins: ouestbillie (~gallup@185.195.233.158)
[04:09:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:11:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[04:12:14] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[04:12:20] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:14:00] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:27:16] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[04:32:48] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[04:52:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:55:48] <ns12> SICP in JavaScript is wonderful news! SICP will be even more attractive to programmers, further spreading the ideas in the book. There will be no excuse to not read it.
[04:56:49] <ns12> However, this might reduce the number of Scheme programmers in the long term.
[04:59:31] <ns12> https://stackoverflow.com/tags/sicp will start to be filled by JavaScript questions.
[05:19:12] *** Quits: daviid (~user@2804:14d:5c21:8f86::1001) (Ping timeout: 268 seconds)
[05:23:08] *** Joins: evdubs_ (~evdubs@user/evdubs)
[05:25:43] *** Quits: evdubs (~evdubs@user/evdubs) (Ping timeout: 256 seconds)
[05:29:55] <wasamasa> the horror
[05:31:29] <ns12> wasamasa: What horror? It is a huge gift to the anti-Lisp programmers, who would otherwise not be exposed to the ideas in the book.
[05:31:56] <wasamasa> imagine being a schemer, finding an unanswered question and not being able to answer it because JS
[05:33:25] <ns12> You mean... not being able to answer it because JS and npm :D :(
[05:34:34] <ns12> npm will be filled with SICP libraries, and readers are going ask questions about SICP + npm!
[05:35:13] <ns12> e.g. "Why did npm give this error when I try to install SICP?"
[05:36:39] <drakonis> aight, that's something.
[05:39:08] <ns12> It'd be interesting to read the reviews of this book, both by those who have read the Scheme edition(s) and by those who used the JavaScript edition as their course textbook.
[05:40:34] <ns12> On the optimistic side, the JavaScript edition may end up as a gateway drug to Scheme in the long term.
[05:40:43] <drakonis> that'd be fairly optimistic
[05:41:17] <drakonis> https://github.com/lokke-org/lokke is this a gateway drug to scheme for clojurians?
[05:48:55] <ns12> drakonis: Well, I came to Scheme from JavaScript. I haven't looked back. I tried to read "Eloquent JavaScript" by Marijn Haverbeke as my first ever programming book. It was far too difficult at the time, but I somehow figured out that the best method to learn about all these anonymous functions and objects is by reading SICP.
[06:13:19] *** Quits: ouestbillie (~gallup@185.195.233.158) (Ping timeout: 256 seconds)
[06:15:08] *** Joins: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt)
[06:17:39] *** Joins: klovett_ (~klovett@166.205.90.179)
[06:21:02] *** Quits: klovett (~klovett@166.205.90.179) (Ping timeout: 250 seconds)
[06:23:57] *** Quits: klovett_ (~klovett@166.205.90.179) (Ping timeout: 240 seconds)
[06:27:57] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[06:36:51] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:48:39] *** Joins: Everything (~Everythin@37.115.210.35)
[06:56:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:57:14] <mdhughes> anti-lispers aren't going to learn anything regardless of the language used.
[06:57:43] <mdhughes> I guess if they use Safari they can keep writing recursive code, because it's the only JS engine with TCO.
[07:01:56] <ns12> mdhughes: Isn't it silly that I can write correct JavaScript programs that won't execute?
[07:02:36] <mdhughes> Well, that's true in any language if you find the bugs/local implementation errors.
[07:02:49] <ns12> How the sicpJS deal with recursive code? Isn't this going to frustrate lots of people when their sicpJS code results in stack overflow?
[07:03:04] <mdhughes> See my constant fights with each Scheme impl to run "maintest".
[07:03:37] <ns12> s/How the/How does/
[07:04:12] <ns12> What's "maintest"?
[07:04:17] <mdhughes> Gambit needs a command-line option to find libraries in the same dir! Racket needs a completely nonstandard require command to load a library.
[07:04:38] <mdhughes> https://mdhughes.tech/scheme/ under Modules Example
[07:05:05] *** Joins: klovett (~klovett@166.205.90.179)
[07:05:44] <ns12> Time to s/freenode.net/libera.chat/ on that web page.
[07:06:30] <mdhughes> Oh, good catch!
[07:09:41] <ns12> Most browsers don't support proper tail calls. Where are the SICP/JS readers going to run their code?
[07:09:41] <ns12> https://kangax.github.io/compat-table/es6/ 
[07:12:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:14:32] <Zipheir> That was my thought, too.  Hence "goodbye, tail loops".
[07:16:16] <ns12> They'd probably be forced to buy an Apple product. "SICP JavaScript Edition - sponsored by Apple Inc."
[07:16:17] <Zipheir> And that's really a symptom of the issue with porting SICP to a more limited language. 
[07:16:22] *** Quits: skapate (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[07:18:06] <ns12> Get ready for all the SICP stack overflow questions on stackoverflow.com
[07:19:57] <mdhughes> Well, I don't use stackunderflow anyway, and discourage its use. Idiots teaching other idiots incorrect answers.
[07:20:08] <Zipheir> ns12: I see what you did there.
[07:27:33] <ns12> If I (define define 123), how do I get back the original "define" syntax?
[07:36:59] *** Quits: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net) (Remote host closed the connection)
[07:39:36] <jrincayc> Hm, I am not sure you can (unless you did something like (define old_define define) ahead of time)
[07:41:31] <ns12> jrincayc: (define old_define define) isn't valid.
[07:41:49] <jrincayc> Hm, is (define define 123) valid?
[07:43:22] <jrincayc> I consider it a defect that r7rs does not define define.
[07:43:29] <jrincayc> (so I fixed that in https://github.com/jrincayc/r7rs-tiny-spec/releases/tag/version_0.2 )
[07:43:32] <ns12> (define define 123) seems to work in the Scheme implementations I have (MIT, Chez, Guile, Chibi, Racket).
[07:44:06] <jrincayc> Guile:
[07:44:06] <jrincayc> scheme@(guile-user)> (define define 123)
[07:44:06] <jrincayc> While compiling expression:
[07:44:06] <jrincayc> ERROR: Syntax error:
[07:44:06] <jrincayc> unknown file:1:0: cannot define keyword at top level in subform define of (define define 123)
[07:44:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:45:05] <jrincayc> (guile 2.0.14 to be exact)
[07:45:21] <ns12> I am using Guile 3.0.7. There is no error.
[07:46:06] <ns12> (define define 123) (+ define define)  ; returns: 246
[07:46:25] <jrincayc> That is interesting.
[07:46:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[07:47:25] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[07:49:46] <ns12> R7RS-small defines "define" in section 5.3 "Variable definitions" (p. 25).
[07:50:02] <ns12> jrincayc: Are you still online?
[07:53:22] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[08:00:55] *** Joins: frost (~frost@user/frost)
[08:08:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[08:18:06] *** Quits: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.0)
[08:20:30] *** Joins: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[08:49:29] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[09:01:47] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[09:06:57] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[09:11:26] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[09:19:16] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[09:20:53] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:53:17] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Quit: Quit)
[09:59:03] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[10:10:57] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:11:14] *** Joins: daviid (~user@179.210.52.91)
[10:15:09] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[10:15:37] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:16:05] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[10:43:34] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Quit: Quit)
[10:46:57] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[10:51:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:53:31] *** Joins: s-liao39 (~s-liao@101.86.96.21)
[10:56:39] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:57:52] *** Joins: notzmv (~zmv@user/notzmv)
[11:11:23] *** Quits: s-liao39 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:13:34] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:14:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:25:17] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Ping timeout: 240 seconds)
[11:25:51] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[11:26:57] *** Joins: jdevoo (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch)
[11:49:57] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:50:28] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:11:41] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[12:12:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:25:23] *** Joins: ManDay (~manday@user/manday)
[13:05:03] *** Quits: ManDay (~manday@user/manday) (Quit: TURBOquit (tm) - the fastest way to get out of an awkward situation)
[13:41:51] <wasamasa> ns12: we'll see in february, lol
[13:42:53] <s-liao> your guys will have a meet-up?
[13:45:11] <wasamasa> the new SICP book is released then
[13:58:26] *** Quits: jdevoo (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch) (Ping timeout: 268 seconds)
[14:07:14] <Franciman> the core idea i missed for a lot of time is that identifiers can be bound to both syntax and values
[14:08:20] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:47:45] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:09:17] *** Joins: vats (~vats@103.158.91.8)
[15:19:13] *** Joins: paul_j (~user@67.26.169.217.in-addr.arpa)
[15:33:32] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 250 seconds)
[15:59:15] *** Joins: seninha (~seninha@user/seninha)
[16:03:33] *** Joins: ManDay (~manday@user/manday)
[16:11:35] *** Joins: frost (~frost@user/frost)
[16:22:19] *** Joins: gproto23_ (~gproto23@user/gproto23)
[16:22:39] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[16:22:45] *** Quits: gproto23_ (~gproto23@user/gproto23) (Remote host closed the connection)
[16:23:06] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:24:22] *** Quits: vats (~vats@103.158.91.8) (Ping timeout: 256 seconds)
[16:40:03] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[16:44:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:47:25] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[16:48:40] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[16:58:15] *** Joins: frost (~frost@user/frost)
[17:17:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:20:21] *** Joins: m455 (~m455@user/m455)
[17:25:04] *** Joins: silasfox (~fox@p200300cec749ab00c73f14147946d259.dip0.t-ipconnect.de)
[17:36:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:59:53] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:08:57] *** Quits: ManDay (~manday@user/manday) (Quit: TURBOquit (tm) - the fastest way to get out of an awkward situation)
[18:15:05] *** Joins: frost (~frost@user/frost)
[18:17:11] *** Joins: ManDay (~manday@user/manday)
[18:17:42] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[18:20:31] <Franciman> so r7rs just requires me to just support ASCII
[18:20:46] <Franciman> supported characters
[18:20:52] <Franciman> and i can optionally support more
[18:20:55] <Franciman> for identifiers
[18:21:03] <Franciman> i like this choice, I can't afford unicode for now :(
[18:23:38] <sham1> Unicode isn't expensive
[18:24:27] <Franciman> it is
[18:24:40] <Franciman> you have to either learn and use an external library
[18:24:50] <Franciman> or learn the whole normalization business
[18:24:53] <Franciman> and implement it
[18:26:31] <Franciman> if you don't use normalization, you can get visually equal identifiers not comparing equal
[18:26:40] <Franciman> that's quite a bit unfriendly
[18:29:23] *** Joins: johnjaye (~pi@173.209.65.233)
[18:30:30] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:9850:4c31:3544:119b)
[18:30:30] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:9850:4c31:3544:119b) (Changing host)
[18:30:30] *** Joins: skapata (~Skapata@user/skapata)
[18:36:47] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:40:14] *** Joins: vats (~vats@103.216.143.18)
[18:53:31] <edgar-rft> just use unicode abnomally :-)
[18:54:46] <edgar-rft> replace all unicode characters with random emojis
[18:55:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[18:56:42] <Franciman> :D
[19:15:50] *** Joins: civodul (~user@guix/contributor/civodul)
[19:16:58] *** Joins: bsima (~bsima@2604:a880:400:d0::19f1:7001)
[19:24:09] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[19:42:19] <Oxyd> R7RS doesn't require normalisation. I'm not even sure it allows it, since strings in R7RS are treated as sequences of code points, and their equivalence is defined as such.
[19:44:47] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[19:53:53] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[20:12:09] <sham1> Oxyd: then again, identifier <> string
[20:21:47] <lagash> wasamasa: oh? a new edition of SICP? interesting..
[20:22:05] <Zipheir> Yeah :-/
[20:26:44] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[20:44:29] *** Quits: silasfox (~fox@p200300cec749ab00c73f14147946d259.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[20:55:56] <Zipheir> I don't know whether I think porting SICP to a new language makes or breaks the book's points about programming languages.
[20:56:14] <Franciman> yes string != identifier
[20:57:11] <lagash> Zipheir: hmm? what's the new language now?
[20:57:19] <Zipheir> JavaScript.
[20:57:45] <lagash> What? Really? Ouch.
[20:58:02] <Zipheir> Yes, ugh.
[21:03:11] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[21:04:51] <X-Scale> Structure and Incomprehensibility of Computer Programs
[21:12:56] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[21:14:19] <Franciman> i can't wait to finish the lexer, it's the most taxing part
[21:17:42] <dpk> lexer for Scheme?
[21:19:54] <sham1> Yeah, not really needed for (read) at least
[21:20:00] <dpk> you shouldn’t need one tbh, just parse the input byte stream directly
[21:20:08] <sham1> It's a scannerless parser
[21:20:24] <dpk> or Unicode character stream, rather
[21:21:05] <dpk> (or do an re2 and parse UTF-8 character ranges with a DFA over the individual bytes)
[21:21:19] <sham1> Code unit stream if we want to get to this
[21:25:16] <Franciman> sure
[21:25:22] <Franciman> it's just a mental distinction
[21:25:26] <Franciman> i mean the lexical part of the grammar
[21:25:35] <Franciman> it is helpful to ignore whitespaces
[21:25:40] <Franciman> not much
[21:29:46] *** Quits: turlando (~turlando@user/turlando) (Read error: Connection reset by peer)
[21:30:23] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[21:34:17] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[21:34:17] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[21:34:17] *** Joins: turlando (~turlando@user/turlando)
[21:42:52] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:25ff:41f8:15ee:65e1)
[21:44:39] <lottaquestions_> Hi all, I am currently reading software flexibility for design by Hanson and Sussman and on page 25 they have the function definition iterate as shown in https://pastebin.com/7buzFm04
[21:45:19] <lottaquestions_> Why is the function "header" defined like this (define ((iterate n) f) ?
[21:46:05] <lottaquestions_> Why is the parameter n in the same s-exp as the function name, whereas the parameter f is on its own?
[21:46:34] <lottaquestions_> I tried googling to figure out that syntax structure, but I cannot see anything about it anywhere.
[21:47:30] <lottaquestions_> Basically, what would the difference be between (define ((iterate n) f) and (define (iterate n f)  ?
[21:50:00] <Zipheir> It's curried procedure syntax.
[21:50:43] <Zipheir> lottaquestions_: See https://srfi.schemers.org/srfi-219/srfi-219.html.  It means that iterate is a procedure which takes an argument n and returns a procedure taking an argument f.
[21:51:05] <Zipheir> i.e. it's equivalent to (define (iterate n) (lambda (f) ...))
[21:51:11] <lottaquestions_> Zipheir: Thanks
[21:51:50] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:51:53] <Zipheir> I'm kind of surprised that Sussman & Hanson use that without explaining it.
[21:52:15] <lottaquestions_> Interesting why to curry. I am more familiar with the second way  (define (iterate n) (lambda (f) ...))
[21:52:41] <lottaquestions_> which I came across in the Little Schemer and Seasoned Schemer
[21:52:56] <lottaquestions_> interesting way*
[21:52:59] <Zipheir> That's the only standard way, ATM.  Though it looks like the nested notation will be standardized by r7rs-large.
[21:53:55] <Zipheir> There's also https://srfi.schemers.org/srfi-232/, currently in draft, which originates with the Little Books authors.
[21:57:08] *** Quits: zwr (~zwr@2804:d45:b966:fb00:7343:4b4d:81a6:38d9) (Remote host closed the connection)
[21:57:19] *** Joins: zwr (~zwr@2804:d45:b966:fb00:53d8:218c:4a2e:e687)
[21:58:19] <Franciman> please don't make r7rs-large huge T.T
[21:58:21] <Franciman> ahahah
[21:58:40] <Franciman> i'd love to have all functions to be curried by default, tho
[22:02:22] <Zipheir> lambda* provides a way to do that that actually works, IMHO.
[22:03:15] <Zipheir> I mean, it doesn't curry everything automagically, that would be nuts.  But it allows you to write (f 1 2 3), ((f 1) 2 3), or (((f 1) 2) 3) interchangeably.
[22:07:40] <Franciman> why would it be nuts?
[22:07:49] <Franciman> i like the haskell way of currying everything
[22:08:01] <Franciman> sure it makes the implementation a little bit trickier
[22:08:21] <Franciman> but there are papers showing how to implement the concept efficiently
[22:09:56] <Franciman> Zipheir: excuse me, where can I read about lambda* ?
[22:11:14] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:11:51] *** Joins: seninha (~seninha@user/seninha)
[22:12:53] <Zipheir> Franciman: SRFI 232: https://srfi.schemers.org/srfi-232/  Please send feedback!  We're still figuring out the details.
[22:13:27] <Franciman> thanks!
[22:14:20] <Zipheir> Or just write any thoughts about it here and I'll make sure they get mentioned on the ml.  (I'm the author of SRFI 232.)
[22:14:51] <Franciman> :D
[22:14:56] <Franciman> i like the idea for sure
[22:15:01] <dpk> it doesn't really make sense in a Scheme context, where we have variadic functions moderately often
[22:15:24] <dpk> and also implies losing at least some of the general isomorphism of procedure call and return
[22:15:45] <Zipheir> dpk: Universal currying?
[22:15:54] <dpk> yeah
[22:16:24] <Zipheir> Right.  Things like curried +, *, etc. (the "omniadic" Scheme procedures) make no sense at all.
[22:18:21] <Franciman> variadic functions are not as handy as automatic currying
[22:18:34] <Franciman> because you need to manually specify the logic for dealing with different numbers of parameters
[22:18:43] <Franciman> while they allow for better control of many situations
[22:20:15] <Zipheir> I'm not sure I understand.
[22:20:57] <Franciman> i mean that you can fake currying by using variadic functions
[22:21:06] <Franciman> so you return different things depending on the number of the arguments
[22:21:18] <Franciman> that's how i interpreted dpk's message
[22:21:19] <Zipheir> Can you give an example?
[22:22:02] <Franciman> i am not really proficient with scheme's library names, so please be patient
[22:22:05] <Franciman> but i mean something like:
[22:23:35] <Franciman> (define (sum . args) (cond ((= 1 (len args)) (lambda (y) (+ (car args) y))) (... other cases))
[22:24:09] <ecraven> you may want to look into `case-lambda'
[22:26:10] <Zipheir> Franciman: OK, I think I understand.
[22:26:58] <dpk> that's basically what lambda* does for you, automatically
[22:27:01] <Zipheir> Franciman: So by wrapping a variadic procedure like + you can make curried procedures fairly easily?
[22:27:02] <Mrtn[m]> <Mrtn[m]> "(define (define name . rest..." <- What?
[22:27:16] <dpk> (we do need a better name than lambda* …)
[22:27:25] <Zipheir> dpk: I agree wholeheartedly.
[22:27:29] <Franciman> curry-lambda? :P
[22:27:31] <dpk> maybe we should just call it church!
[22:27:39] <dpk> (church (x y z) ...)
[22:27:40] <Franciman> not bad!
[22:27:43] <Zipheir> church is catchy.
[22:27:53] <Franciman> if you want to be consistent with history
[22:27:58] <Zipheir> I suggested kappa for [k]urry.
[22:28:05] <Franciman> what about (i'm joking) shoefinkel ?
[22:28:13] <Zipheir> MNW suggested that (of course).
[22:28:31] <Franciman> (shoe (x y z) ..)
[22:28:33] <Franciman> :P
[22:28:41] <Mrtn[m]> Zipheir: Maybe "the-church" ?
[22:28:44] <Zipheir> Sorry, he suggested шейнфинкель.
[22:28:58] <Franciman> hahaha
[22:29:08] <Franciman> Zipheir: yes re. wrapping variadic procedures
[22:29:37] <Mrtn[m]> Sheynfinkell?
[22:29:42] <Zipheir> Mrtn[m]: That's getting kind of ecumenical...
[22:29:52] <sham1> (haskell (a b c) ...) <=> (lambda (a) (lambda (b) (lambda (c) ...))) ofc
[22:30:00] <sham1> Named after Haskell Curry
[22:30:04] <sham1> What else
[22:30:23] <Zipheir> Hah, not bad either.\
[22:30:26] <Mrtn[m]> Zipheir: 😅
[22:31:31] <Mrtn[m]> Zipheir: What is "sheyfinkell"?
[22:31:33] <Zipheir> Franciman: An example for lambda* is (define add (lambda* (a b) (+ a b)))  (map (add 2) '(1 2 3)) ; => (3 4 5)
[22:31:47] <dpk> (https://tenor.com/bdxu8.gif)
[22:31:51] <Mrtn[m]> s/sheyfinkell/sheynfinkell/
[22:31:56] <Franciman> Mrtn[m]: is the inventor of this idea of currying
[22:32:02] <Zipheir> Mrtn[m]: https://en.wikipedia.org/wiki/Currying#History
[22:32:08] <Franciman> Zipheir: i like it very much
[22:32:39] <Zipheir> Priority pedants like to insist that currying should be called schönfinkeling.
[22:33:10] <Mrtn[m]> Zipheir: Sehr schön ...
[22:33:24] <Franciman> :)
[22:34:16] <Zipheir> Franciman: Great!  I'm glad there are people who like it.
[22:34:29] <dpk> i do like kappa as well. but with greek letters you do have to make sure nobody's using it for something else already, especially if that thing is very similar …
[22:34:31] <Zipheir> MNW has been waging quite a war against lambda*.
[22:34:56] <Zipheir> dpk: True.
[22:35:08] <Franciman> who is MNW, and why?
[22:35:09] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:35:13] <sham1> Or if one wanted to be very cheeky
[22:35:26] <dpk> with kappa you should also possibly be alert to uses of ϗ, which is kai, and derived from κ
[22:35:47] <sham1> (monad-is-a-monoid-in-the-category-of-endofunctors (a b c) ...) /s
[22:36:07] <Zipheir> Franciman: Marc Nieper-Wißkirchen.  Some of his thoughts on it: https://srfi-email.schemers.org/srfi-232/msg/18631444/
[22:36:22] <Zipheir> sham1: lol
[22:36:38] <sham1> I do agree with MNW, lambda* is a bit meh of a name
[22:36:43] <dpk> it is often hard to dissuade M N-W
[22:36:54] <dpk> or indeed to persuade him
[22:36:55] <Zipheir> sham1: So say we all.
[22:36:59] <sham1> It could be pretty much anything
[22:37:04] <Franciman> Zipheir: no matter what, i am implementing it in my scheme r7rs
[22:37:16] <Zipheir> Great.
[22:38:02] <sham1> clambda is a bit better, although that's still not great. Meanwhile `curried-lambda` is a bit verbose
[22:38:11] <Zipheir> dpk: He proposes an alternative form https://srfi-email.schemers.org/srfi-232/msg/18703770/  I really don't know whether I think it's a good idea.  It's certainly more complicated.
[22:38:29] <Zipheir> clambda is funny to me.
[22:38:38] <sham1> Also don't we already have lambda* and define* with the keywords and optional argument procedures
[22:39:05] <dpk> inn SRFI 89, yes, but it's unlikely that SRFI 89 will be adopted
[22:39:35] <dpk> -n. argh, keyboard still playing up
[22:40:32] <dpk> (there is a ‘drive inn’ bakery near me, and i don't know who told the person who made the sign that that’s how that’s spelt in English. presumably they thought they needed a noun, looked in the dictionary and saw that ‘inn’ is one but ‘in’ isn’t, and didn’t bother to look at the definition)
[22:46:13] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[23:10:06] *** Joins: tfeb (~tfb@195.213.60.52)
[23:11:55] *** Joins: johnjaye (~pi@173.209.65.233)
[23:18:18] *** Quits: johnjaye (~pi@173.209.65.233) (Quit: WeeChat 3.3)
[23:25:07] *** Quits: ManDay (~manday@user/manday) (Quit: TURBOquit (tm) - the fastest way to get out of an awkward situation)
[23:31:57] *** Quits: tfeb (~tfb@195.213.60.52) (Quit: died)
[23:35:27] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[23:39:55] *** Joins: gproto23 (~gproto23@user/gproto23)
