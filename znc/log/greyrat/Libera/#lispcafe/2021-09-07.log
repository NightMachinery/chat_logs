[00:02:59] *** Quits: nckx (~nckx@tobias.gr) (Quit: Updating my Guix System <https://guix.gnu.org>)
[00:04:55] *** Joins: nckx (~nckx@tobias.gr)
[00:17:00] <copec> The non-lispy language I have an affinity for is Pascal. It's terrible but it's like the block based minecraft of languages
[00:18:06] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 256 seconds)
[00:18:45] <copec> It becomes easy to think about building many things when you only have to think in terms of your base blocks, just it becomes molasses if it isn't one of those many things
[00:19:14] <lotuseater> for building pyramids :)
[00:19:50] <shka> uh, i respect pascal
[00:20:06] <shka> it is pretty well designed language given the input set of constraints
[00:20:54] <copec> I feel the same way, like it isn't CL, but I really like it
[00:20:57] <shka> it fell out of favor sadly 
[00:21:36] <shka> which is a shame because it is much better language to teach programming then let's say C
[00:21:46] <shka> while still being pretty low level
[00:24:29] <copec> https://castle-engine.io/modern_pascal_introduction.html
[00:24:31] -ixelp- Modern Object Pascal Introduction for Programmers
[00:25:53] <copec> You mess around with Julia much shka?
[00:26:05] <shka> sadly not
[00:26:27] <shka> at work it is always python, and at home i am the hopeless lisper
[00:26:46] <shka> i am trying to make lisp relevant for data science
[00:30:06] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[00:31:24] <shka> because i think that in theory lisp has a lot of potential in the domain
[00:31:34] <shka> it is just that there are no tools
[00:31:37] <shka> :/
[00:33:25] <lotuseater> yeah if you mean tools for "general" use like pandas
[00:33:40] <shka> i made this, it is pretty cool: https://github.com/sirherrbatka/vellum
[00:33:42] -ixelp- GitHub - sirherrbatka/vellum: Data Frames for Common Lisp
[00:33:50] <lotuseater> ok
[00:34:46] <shka> and also statistical-learning which is like 99% decision trees and forests
[00:34:47] <shka> https://github.com/sirherrbatka/statistical-learning/blob/master/examples/covtype.lisp
[00:34:48] -ixelp- statistical-learning/covtype.lisp at master Â· sirherrbatka/statistical-learning Â· GitHub
[00:35:00] <shka> but it is nice because it is OO random forest library
[00:36:01] <shka> so for instance to implement isolation forests, well i had to simply implement a bunch of methods, as shown here https://github.com/sirherrbatka/statistical-learning/blob/master/source/isolation-forest/methods.lisp
[00:36:02] -ixelp- statistical-learning/methods.lisp at master Â· sirherrbatka/statistical-learning Â· GitHub
[00:42:33] <shka> and i also made https://github.com/sirherrbatka/clusters
[00:42:34] -ixelp- GitHub - sirherrbatka/clusters: Variety of clustering tools for the Common Lisp
[00:42:53] <shka> and stuff for plotting
[00:42:57] <shka> but i am but one man
[01:02:52] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 256 seconds)
[01:38:26] <copec> Those look excellent shka
[01:52:11] *** Quits: dra (~dra@2a04:4540:640e:9b00:5a7:7a68:df84:eb4e) (Quit: Leaving)
[01:55:10] <gilberth> Good morning #lispcafe!
[02:00:38] *** Joins: Alfr (~Alfr@user/alfr)
[02:02:37] <hayley> Good morning everyone!
[02:03:48] <Alfr> Hello hayley.
[02:04:59] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[02:05:41] *** Joins: APic (apic@apic.name)
[02:08:36] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[02:13:24] <gilberth> All this nursery stuff reminds me of my Lisp interpreter in C, where I would cons new environments on the stack by default and evacuate it to the heap only when a closure is constructed. This was quite a performance boost.
[02:19:55] *** Joins: selwyn (selwyn@user/selwyn)
[02:23:56] <hayley> https://www.youtube.com/watch?v=6P4ELM0nB9M
[02:23:56] -ixelp- Messages (Remastered) - YouTube
[02:27:55] <hayley> gilberth: Sure, though by tossing out the whole nursery in one go, evacuation is O(1), whereas replication in ML is O(graph) and evacuation with mutable objects is O(nursery).
[02:29:46] <hayley> gilberth: "Well, there will always be people who are more of a leader than others. That's natural." And they're not making a hierarchy by leading if they can't fire anyone (loosely speaking). And then someone has to find a reason to need a leader of course.
[02:32:20] <selwyn> are parallel complexity classes useful? why don't i hear more about them?
[02:32:22] <gilberth> hayley: Don't forget that most want a leader, because thinking and decision-making hurts the brain. Otherwise: Projects can be forked all the time. See, I quit McCLIM for my reasons. For one thing I was too bad at convincing others about my ideas how to implement things.
[02:36:44] <gilberth> selwyn: They are from a theoretical point of view. This also is loosely connected to HW. E.g. take a ripple carry adder, its O(n). [n = number of bits] A carry lookahead adder is O(log n), but needs more transistors. You could say that addition is O(log n) given unlimited [die] space or parallelism. It still is O(n) with serial processing.
[02:37:18] <selwyn> i see
[02:39:02] <gilberth> Not all problems could benefit from parallelism. At the end of the day this boils down to data dependency. So, yes, talking about parallel complexity classes can be useful.
[02:40:04] <selwyn> thing is that quantum computational complexity classes are often compared to p and np
[02:40:19] <hayley> OTOH I have to wonder if it is safe to have a region which is being collected while a thread is allocating into it. I'd like to reuse partly filled regions if memory is tight, but it is more complicated to do that.
[02:41:34] <selwyn> sorry, bpp and qma (which is a kind of probabilistic np)
[02:41:47] <gilberth> selwyn: I know very little about quantum computing. But similar reasoning about complexity classes should apply here, too.
[02:41:47] <hayley> While it could be made to work (even with a bitmap, one 128 byte line is one byte) it'd be false sharing hell.
[02:41:53] <selwyn> but why not parallelise those. perhaps the parallelisation is not interesting enough
[02:43:22] <selwyn> anyway, goodnight 
[02:43:31] <gilberth> Take care!
[02:44:12] <hugo> How is Lisp as a platform for learning Open GL? I have seen a few implementations, but still wondering if C would be a "safer" bet?
[02:45:50] <moon-child> most of the resources are for c, but the api is the same in either case.  It should not be very difficult to translate
[02:45:56] <hayley> Well, I could apply similar reasoning as I did for the read barrier. You don't compact pages with lots of objects, as they wouldn't be fragmented. So I wouldn't reuse pages with many objects as allocation buffers either.
[02:46:34] *** Quits: selwyn (selwyn@user/selwyn) (Quit: Connection closed)
[02:46:50] <hayley> G1 only apparently uses free regions. Hm.
[02:47:21] *** Joins: christophergray (~christoph@190.148.50.1)
[02:47:56] <hayley> Not a fan, as we are able to avoid compacting by reusing regions like this.
[02:49:30] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:49:49] <hayley> The worst a collector can do is turn a filled line free, which would be nice but not necessary to catch. And the worst a mutator can do is turn a free line filled. So logically they don't really affect each other? 
[02:52:38] <hayley> Hm, no. Another thing is that we might allocate some object, then put a reference somewhere to it, which trips the write barrier, and there would be a race as the object may or may not be written. But surely there is some rule for it in the memory model? I guess the write barrier emits a memory fence somewhere.
[02:54:53] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[02:56:52] <hayley> https://www.youtube.com/watch?v=IEqYDv8lMHM
[02:56:52] -ixelp- Motion And Heart (2003 Digital Remaster) - YouTube
[02:58:15] *** Joins: dra (~dra@2a04:4540:640e:9b00:cc6b:9d67:9237:28f8)
[03:10:21] <hayley> https://www.youtube.com/watch?v=tBvAxSx0nAM
[03:10:21] -ixelp- Welcome To The Machine - YouTube
[03:10:37] * hayley goes to class at 8:30 in the morning
[03:12:13] *** Joins: APic (apic@apic.name)
[03:17:45] *** Joins: X-Scale` (~ARM@128.229.28.37.rev.vodafone.pt)
[03:18:34] *** Quits: X-Scale (~ARM@238.72.108.93.rev.vodafone.pt) (Ping timeout: 240 seconds)
[03:18:42] *** X-Scale` is now known as X-Scale
[03:20:44] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[03:22:37] <kakuhen> early class
[03:26:48] <hayley> So there will be another "hackathon" where we do free design work for a company. Should I prepare an invoice this time?
[03:27:52] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[03:28:09] <kakuhen> just sneak in and take as many freebies and food as you can
[03:28:15] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[03:29:12] <moon-child> better: sabotage them
[03:30:36] *** Quits: christophergray (~christoph@190.148.50.1) (Quit: WeeChat 3.2)
[03:36:23] <hayley> Considered it, didn't feel like getting into that much trouble.
[03:37:13] <pl> tfw you start a ship-building cad to draw a kitchen
[03:37:24] <hayley> Very specific.
[03:38:32] <pl> hayley: I find myself in need for 2D drawings for a bunch of elements in the house
[03:39:05] <pl> I might have ... acquired, in the past, a CAD system used among other things in shipbuilding and indeed it came with shipbuilding addon
[03:39:05] <hayley> https://www.youtube.com/watch?v=na7pBbK9EnA
[03:39:05] -ixelp- Me, I Disconnect from You (Live) - YouTube
[03:39:15] <hayley> Come on, another AI researcher teaching us? Fucking hell.
[03:40:08] <pl> so, I'm looking currently at tutorial about turning the 3D model into 2D drafting renders, because NX is 3D shape first, unlike AutoCAD
[03:44:10] *** Quits: dra (~dra@2a04:4540:640e:9b00:cc6b:9d67:9237:28f8) (Ping timeout: 240 seconds)
[03:45:06] <hayley> The only person I know who isn't doing AI research is the course writer who does distributed systems.
[03:45:48] <gilberth> pl: For planing things in the house, I usually use my ECAD application for that. I have a floor plan and furniture as parts in a library. This works quite well. When ever I move, the first thing I would do is to make a floor plan. And as it is an application to make PCBs, all basic elements like lines are on some layer, I could freely make visible or not and assign colours to them.
[03:47:15] <hayley> "We don't expect you to be able to generate a village at <presenter>'s quality :)" It looks like shit. Surely you expect _higher_ of course.
[03:49:00] <pl> gilberth: ECAD?
[03:52:01] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[03:56:35] <hayley> https://www.youtube.com/watch?v=PTaM-C1LqwY
[03:56:35] -ixelp- One Of These Days (BBC Radio Session, 30 September 1971) - YouTube
[03:59:49] *** Joins: notzmv (~zmv@user/notzmv)
[04:14:03] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[04:14:38] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:15:06] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[04:17:33] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[04:18:52] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 245 seconds)
[04:55:58] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[05:06:40] *** Quits: random-nick (~random-ni@87.116.180.118) (Ping timeout: 240 seconds)
[05:26:35] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[05:28:35] <gilberth> pl: PCB design, schematics, thus electronics. Also called EDA.
[05:32:44] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[06:17:55] *** Quits: molson (~michael@2001-48F8-704A-CA1-0-0-75F-1007-static.midco.net) (Ping timeout: 252 seconds)
[07:49:09] *** Joins: fengshaun_ (~fengshaun@S0106bc9b6886e536.cg.shawcable.net)
[08:07:26] *** Quits: fengshaun_ (~fengshaun@S0106bc9b6886e536.cg.shawcable.net) (Ping timeout: 252 seconds)
[08:07:58] *** Quits: raeda (~raeda@72.49.219.33) (Read error: Connection reset by peer)
[08:14:17] <gilberth> Can I have this: <http://clim.rocks/nocturnal/opt-notes.html>? Please.
[08:15:10] <gilberth> I wonder whether I could find any literature about that kind of optimizations.
[08:19:03] <gilberth> But this is basically inlining and/or loop-unrolling. Both of which are more or less the same.
[08:42:04] * hayley spent the morning tweaking an A* implementation a fellow student wrote.
[08:44:09] <hayley> Seemed to get on well. We discussed GCs for some reason (perhaps that I use a picture of myself with the Handbook as a profile picture), leading to the olde "Moon patiently told the student a story" koan on refcounts. Then a strategy for optimising Python code.
[08:44:10] <hayley> Well, also that the script we got started Minecraft with a pretty small heap size.
[08:46:26] <hayley> Fun to tweak the search heuristic. If you properly account for diagonal moves (remembering we use a 3d Cartesian grid and generate moves in {-1, 0, 1}^3) being longer then it's less wobbly. Make it more expensive to build bridges and it switches to traversing chasms.
[08:54:16] <hayley> I was worried that using arrays rather than sets and priority queues would be slow, but apparently it was fine when doing mazes someone made. Except with an outdoors area there's more states to traverse.
[08:59:38] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:04:25] <moon-child> I don't think cyclicality is a good argument against rc.  _If_ rc were otherwise optimal, cycles are rare enough that it would be acceptable to perform an occasional trace
[09:05:35] <moon-child> (however cyclicality is perhaps a good demonstration of the fact that rc doesn't solve your actual problem)
[09:06:48] *** Quits: X-Scale (~ARM@128.229.28.37.rev.vodafone.pt) (*.net *.split)
[09:06:48] *** Quits: commandoline (~commandol@ubuntu/member/commandoline) (*.net *.split)
[09:06:56] *** Joins: commandoline (~commandol@ubuntu/member/commandoline)
[09:08:01] *** Joins: X-Scale (~ARM@128.229.28.37.rev.vodafone.pt)
[09:08:22] <hayley> Yeah, perhaps it's only the most known argument and not the best.
[09:09:30] <hayley> Though I am not sure about cycles being rare. At least the Cleavir compiler puts almost every instruction and datum in a loop (predecessor/successor, input/output, used-by/input, etc).
[09:11:43] <dave0> maw
[09:11:53] <hayley> Hey dave0
[09:11:56] <dave0> hi hayley 
[09:11:59] <dave0> how's it going?
[09:12:37] <hayley> Fine, thanks. You?
[09:13:13] <dave0> alright
[09:13:25] <dave0> my friend paid me back
[09:13:32] <dave0> so i have a little extra cash
[09:27:14] *** Quits: ck_ (~ck@plskthx.org) (*.net *.split)
[09:27:14] *** Quits: luis (~luis@lisp/luis) (*.net *.split)
[09:27:14] *** Quits: rugan (~mich@srv1.demonlabs.be) (*.net *.split)
[09:28:21] *** Joins: luis (~luis@lisp/luis)
[09:34:51] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[09:57:15] *** Joins: APic (apic@apic.name)
[09:57:42] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[10:07:17] *** Joins: APic (apic@apic.name)
[10:07:20] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[10:14:10] *** Quits: chiselfu1e (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[10:32:17] *** Joins: APic (apic@apic.name)
[10:33:16] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[10:37:17] *** Joins: APic (apic@apic.name)
[10:37:52] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[10:39:00] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[11:01:25] *** Joins: shka (~herr@109.231.62.239)
[11:09:21] *** Joins: APic (apic@apic.name)
[11:09:26] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[11:14:21] *** Joins: APic (apic@apic.name)
[11:14:22] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[11:16:21] *** Joins: ck_ (~ck@plskthx.org)
[11:19:21] *** Joins: APic (apic@apic.name)
[11:19:28] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[11:50:24] *** Joins: APic (apic@apic.name)
[11:50:27] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[11:55:24] *** Joins: APic (apic@apic.name)
[12:12:10] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Ping timeout: 240 seconds)
[12:14:48] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[12:16:09] *** Joins: vats (~vats@180.149.226.8)
[12:35:58] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:40:20] *** Quits: X-Scale (~ARM@128.229.28.37.rev.vodafone.pt) (Read error: Connection reset by peer)
[12:48:58] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[12:50:30] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[12:50:53] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[13:10:46] <dave0> wow money talk really killed the conversation !
[13:11:27] *** Quits: APic (apic@apic.name) (Quit: [TLS] Client upgrade)
[13:11:44] *** Joins: APic (apic@apic.name)
[13:12:20] <shka> didn't notice anything 
[13:13:53] <kakuhen> i found a really clever way to avoid having to use ccl:assq just now, but i dont want to talk abt it
[13:20:33] *** Quits: APic (apic@apic.name) (Quit: Boot tut gutâ¢)
[13:30:30] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[13:36:34] <pjb> (assoc key alist :test 'eq) ?
[13:38:39] <pjb> There could be a compiler-macro on assoc to transform it to ccl:assqâ¦  Perhaps add a feature request issue on github?
[13:42:42] <moon-child> cl-compat:assq!
[13:42:56] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 252 seconds)
[13:44:03] * gilberth wants CASEQ and MEMQ!
[13:44:59] <gilberth> And IMPLODE and EXPLODE. And a Porsche, on a stick!
[13:48:03] <gilberth> BTW CCL has a compiler macro for ASSOC, what did you expect? And it's open coded.
[13:48:26] <pjb> I didn't see it in the test I triedâ¦
[13:48:54] <pjb> (disassemble (compile nil (lambda (key alist) (declare (optimize (speed 3) (space 3) (compiler-time 0) (safety 3) (debug 0))) (assoc key alist :test 'eq))))
[13:49:18] <pjb> but indeed, the compiler macro for assoc seem to sbustitute :test 'eq -> assq, etc.
[13:49:42] <gilberth> Funny. I tried same but with a defun and no DECLARE
[13:50:09] <pjb> The declare was added when I see no application of the compiler-macroâ¦
[13:51:00] <gilberth> pjb: I tried your exact same form and I get the [my] same result. Open coded for EQ.
[13:51:15] <pjb> and still assoc is called, with defun without declareâ¦ and even with compile-file.
[13:51:38] <pjb> Well, something disables the compiler macros in my ccl?
[13:51:42] <gilberth> Hell, what are we missing? The compiler macro should kick in, no matter what.
[13:52:56] <gilberth> pjb: Silly question. You use CL:ASSOC? And CL:EQ?
[13:53:04] <pjb> Yes.
[13:56:40] <gilberth> Then what the hell is going on? When there is some bug, I'd like to fix it.
[13:58:30] <pjb> Unfortunately, I don't have the time now to investigate.
[14:00:16] <gilberth> pjb: Well, when you have time, tell me your version and platform. I'd then look into it. Thanks!
[14:01:12] * shka may reduce the fan speed so the temperature will peak at the 80 degrees
[14:12:24] <pjb> (lisp-implementation-version) #| --> "Version 1.12.1 (v1.12.1-7-g4912320e) Darwinx8664" |# 
[14:24:28] <hayley> Why does Gil Tene still follow me on the birdsite
[14:53:31] *** Joins: treflip (~user@95.79.32.99)
[14:58:22] *** Joins: notzmv (~zmv@user/notzmv)
[15:36:28] *** Joins: random-nick (~random-ni@87.116.182.103)
[15:43:04] *** Joins: selwyn (~selwyn@user/selwyn)
[15:52:50] *** Joins: vats (~vats@180.149.226.8)
[16:07:03] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[16:27:50] <hayley> https://web.archive.org/web/20100610024621/http://www.ess.uci.edu/esmf/ibm_compiler_docs/xl_optimization.pdf A C compiler for which -O4 and -O5 do things!
[16:32:59] <lotuseater> oh I didn't know these options are existent
[16:35:51] *** Quits: vats (~vats@180.149.226.8) (Remote host closed the connection)
[16:36:37] *** Joins: vats (~vats@180.149.226.8)
[16:45:25] *** Quits: vats (~vats@180.149.226.8) (Remote host closed the connection)
[16:47:54] *** Joins: vats (~vats@180.149.226.8)
[17:03:15] *** Joins: robin (~robin@user/terpri)
[17:45:18] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:b88b:1406:d882:ba49)
[17:48:39] <dave0> nite all
[17:48:46] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:17:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:17:53] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:25:56] *** Joins: selwyn (~selwyn@user/selwyn)
[18:30:32] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 250 seconds)
[18:34:32] *** Joins: selwyn100 (~selwyn@user/selwyn)
[18:36:37] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 265 seconds)
[18:40:33] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[18:48:56] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:57:07] *** Joins: Alfr (~Alfr@user/alfr)
[18:57:54] <selwyn100> https://nitter.net/pic/media%2FE-nyhGEXsAcxsuz.jpg%3Fname%3Dorig
[18:58:10] <selwyn100> is o'brien drinking a guinness?
[19:00:59] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[19:32:05] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 260 seconds)
[19:40:56] <pjb> Next time you're asked why CL? answer: Why C? <https://www.youtube.com/watch?v=chpT0TzietQ>  ;-)
[19:40:56] -ixelp- c - YouTube
[19:42:07] <shka> selwyn100: are you an evolved selwyn?
[19:42:13] <selwyn100> 100%
[19:44:12] <shka> cl has so much going for it
[19:44:20] <shka> i wish i would know a better way to market it
[20:18:44] *** Quits: selwyn100 (~selwyn@user/selwyn) (Quit: Connection closed)
[20:30:06] <pjb> shka: start up a 3-comma company using CL exclusively?
[20:30:39] <pjb> shka: alternatively, start-up a 3-comma company, sell it, and use the money to promote CL and develop its ecosystem.
[20:31:10] <pjb> shka: or just buy yourself an island and retire, or pour money into SpaceX to escape this asylum.
[21:47:57] *** Joins: APic (apic@apic.name)
[21:57:55] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[22:37:09] *** Joins: raeda (~raeda@72.49.219.33)
[22:48:47] *** Quits: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa) (Ping timeout: 245 seconds)
[23:02:48] *** Joins: jasom (~aidenn@ip98-185-238-13.sb.sd.cox.net)
[23:22:43] *** Joins: vats (~vats@42.111.21.216)
[23:24:51] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[23:24:52] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[23:25:40] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[23:26:14] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[23:27:37] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[23:30:31] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[23:45:35] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:b88b:1406:d882:ba49) (Read error: Connection reset by peer)
[23:51:43] *** Joins: Alfr (~Alfr@user/alfr)
[23:53:21] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
