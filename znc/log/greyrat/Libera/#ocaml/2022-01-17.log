[00:08:38] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[00:20:22] *** Quits: bartholin (~bartholin@109.53.6.212) (Quit: Leaving)
[00:48:27] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[00:55:57] *** Quits: jlrnick (~josephler@2a01cb040a1594007c4273d50a89f6ac.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[00:56:24] <LACampbell> for lists, am I better off doing a filter_map then a join? or a filter then a return? (assuming the jane street base library with monadic stuff in there)
[00:57:14] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[00:57:15] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Remote host closed the connection)
[00:58:20] <LACampbell> sorry, filter_map + join VS filter + bind. obviously I don't get monads and just figured out what flatten and flatmap were called
[01:10:37] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: No Ping reply in 180 seconds.)
[01:12:00] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[01:25:01] *** Quits: nerdypepper (~nerdypepp@user/nerdypepper) (Ping timeout: 240 seconds)
[01:25:02] *** Quits: chrisz (w5wsvkz160@55d42bf3.access.ecotel.net) (Ping timeout: 240 seconds)
[01:26:48] *** Joins: chrisz (iiakz0jmo6@55d4b9b5.access.ecotel.net)
[01:27:54] *** Joins: nerdypepper (~nerdypepp@user/nerdypepper)
[01:45:29] *** Joins: oriba (~oriba@dynamic-089-012-117-098.89.12.pool.telefonica.de)
[01:58:27] *** Joins: bobo_ (~bobo@37.173.4.151)
[01:58:32] *** Quits: spip (~bobo@37.173.4.151) (Ping timeout: 240 seconds)
[02:00:20] *** Quits: rgrinberg (~textual@2806:101e:7:2b:a509:6fda:5123:c5ae) (Ping timeout: 250 seconds)
[02:00:46] *** Quits: salkin (~salkin@84.212.156.62) (Ping timeout: 250 seconds)
[02:37:47] <b0o> Noob here. I'm trying to get the output of a command as a string. How bad is this approach? https://gist.githubusercontent.com/b0o/602744e0a6bf6400c2322eca34cc029a/raw/b869dc825381bcf4cd4939bd18117e24f4538ba0/Commands.ml
[02:37:52] <b0o> (I know that the command will terminate a │nd the output should not be more than a few hundred kb)
[02:39:28] <b0o> (and I still haven't decided what I'm going to do in the `None -> "TODO"` branch, please ignore it)
[03:04:05] <d_bot> <Fermion> What's a good way to improve error message generation with menhir?
[03:04:14] <d_bot> <Fermion> I'm only getting a position
[03:05:18] <dmbaturin> Fermion: I wrote a whole post about that: https://baturin.org/blog/declarative-parse-error-reporting-with-menhir/
[03:08:36] <dmbaturin> b0o: This isn't too bad, though concatenating strings like that is not very efficient. If you are using mutability anyway, you should rather use the Buffer module. Create a buffer with `Buffer.create`, then use `Buffer.add_string` to append retrieved strings to it.
[03:10:46] <d_bot> <Fermion> hmm does this require that I come up with an entry in .message for each error condition?
[03:11:04] <d_bot> <Fermion> I'm maybe a bit more used to things like megaparsec where they carry enough state around to say what the error is
[03:13:15] <dmbaturin> There may be a way to generate them based on the token stack for cases you don't have a specific messae for, but I haven't looked into that. I try to supply a message for every case.
[03:21:27] <d_bot> <Fermion> Are there any other recommended parser generators or is menhir kinda king?
[03:24:06] <dmbaturin> There are some relatively popular parser combinators, e.g. angstrom.
[03:32:41] <dh`> in general parser combinators are terrible
[03:32:53] <dmbaturin> Yeah, I'm not a fan.
[03:33:12] <dh`> the problem with parser generators and error messages is that yacc is 40-year-old tech by now, ocamlyacc is a slavish clone, and menhir is only slightly more advanced
[03:35:31] <dh`> but it's also really hard to get traction with anything different
[03:36:25] <dmbaturin> dh`: What approach offers better error reporting?
[03:36:56] <dh`> the parser generator knows the state you were in and the unexpected token it saw
[03:37:27] <dh`> it is perfectly capable of producing a reasonably coherent error message, it just doesn't because it's not entirely trivial in the generator code and nobody wants to work on it
[03:37:40] <dh`> like I said, it's really hard to get traction with anything different
[03:37:58] <dmbaturin> Well, .messages is a pretty big step forward.
[03:38:24] <dh`> yeah
[03:38:33] <dh`> is it documented somewhere?
[03:38:37] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[03:39:03] <dmbaturin> Menhir's docs could be better... that post I linked above is an attempt to make up for it.
[03:39:32] <dmbaturin> Well, they aren't bad, but I'd like to see more examples there.
[03:40:28] <dh`> given that it only has to compete with ocamlyacc, whose docs are last I recall pretty much nonexistent... well
[03:40:33] <dh`> anyway I'll take a look at that
[03:40:56] <dh`> quick scan suggests it's all rather exposed cogs and pulleys
[03:40:59] <dh`> :-|
[03:42:06] <dmbaturin> dh`: Here's an example of how it's very not perfect with highly ambiguous grammars: https://github.com/dmbaturin/otoml/blob/main/src/lib/toml_parser.messages :)
[03:43:25] <dmbaturin> The parser indeed knows the state, but translating it to a coherent message isn't always trivial even for a human.
[03:43:48] <dh`> I've had in mind for years a scheme for doing best-fit approximate parses to generate actually good syntax errors
[03:43:56] <dh`> but haven't had time to build it uot
[03:44:27] <dmbaturin> I'd be very curious to try it out.
[03:44:52] <dh`> right, part of the problem is that parser generators are slaves to their automata models and it doesn't occur to the people writing them to break out of that model when it would be useful
[03:46:21] <companion_cube> What would that mean?
[03:47:16] <dh`> one fairly obvious possibility: inspecting extra lookahead tokens after reaching an error state
[03:48:01] <dh`> or disambiguating what rule you're actually in by looking at the stack
[03:48:43] <companion_cube> Hmm the second one seems unclear to me, unless you mean the user could do that
[03:49:28] <dh`> the generated code could
[03:51:32] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 240 seconds)
[03:52:22] <companion_cube> By definition if it's ambiguous, it means the stack doesn't help :D
[03:52:39] <dh`> well, if the grammar itself is ambiguous it should be rejected :-)
[03:52:50] *** Joins: spip (~bobo@37.171.250.135)
[03:53:01] <companion_cube> Ah, yes, conflating two issues.
[03:53:14] <dh`> the issue I think we were talking about is when you have a token sequence that can mean X or Y and you accidentally write something that causes the parser to proceed on Y even though you meant an X
[03:53:17] *** Quits: bobo_ (~bobo@37.173.4.151) (Ping timeout: 256 seconds)
[03:53:24] <companion_cube> I think the main menhir authors have been working towards better error recovery, but it's just hard
[03:53:36] <dh`> and so you get an error like "missing semicolon after Y" when you don't even have a Y
[03:53:44] <dh`> oh, it's definitely hard
[03:54:23] *** Joins: Soni (~quassel@autistic.space)
[03:58:06] <dh`> ...at least compared to deterministically grinding rulesets into automata
[04:03:00] <dh`> why does the menhir incremental interface expose its internal state?
[04:04:20] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-157.elisa-laajakaista.fi) (Quit: Leaving.)
[04:04:34] <dh`> surely it should just be f: parserstate -> token -> result where result = Done of value | Error of error-info | Ok of parserstate
[04:05:09] <dh`> that is, you shouldn't need to do anything other than feed it tokens until it either finishes or complains
[04:08:35] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:29:46] <b0o> dmbaturin: is there an efficient way to do it without mutability?
[04:32:53] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[04:42:24] <d_bot> <crab> Does ocaml have native data science and ml libraries?
[04:53:50] *** Quits: oriba (~oriba@dynamic-089-012-117-098.89.12.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:06:19] <hackinghorn> there is ml in Ocaml, its the last 2 letters
[05:06:56] <d_bot> <NULL> I imagine it's not the L user expected
[05:10:21] *** Joins: zebrag (~chris@user/zebrag)
[05:15:02] *** Quits: spip (~bobo@37.171.250.135) (Ping timeout: 240 seconds)
[05:15:15] *** Joins: spip (~bobo@37.171.250.135)
[05:31:53] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:36:03] <d_bot> <hcarty> @creativcoder There are some building blocks in place. Not to the extent you have in Python for example. Owl is probably the most complete
[05:37:40] <d_bot> <hcarty> https://ocaml.xyz/ is the project's main site if you want to check it out
[05:39:40] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca)
[05:40:26] <d_bot> <Fermion> I don't know if it's blastphemy to say such things but f# might satisfy your ML needs and I think the .net ecosystem has a pretty serious collection of machine learning/data science libraries
[05:41:20] *** Quits: jochensp (~jochensp@dyndsl-085-016-211-061.ewe-ip-backbone.de) (Ping timeout: 250 seconds)
[05:43:49] *** Joins: jochensp (~jochensp@dyndsl-031-150-024-170.ewe-ip-backbone.de)
[05:44:32] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:45:48] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca)
[06:10:01] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[06:13:53] <d_bot> <crab> I would honestly use f# instead for data science and ml, but I was wondering if ocaml had some support
[06:14:11] <d_bot> <crab> Honestly, for me I would use ocaml for lang dev
[06:17:01] *** Quits: chrisz (iiakz0jmo6@55d4b9b5.access.ecotel.net) (Ping timeout: 240 seconds)
[06:18:56] *** Joins: chrisz (ofx4q7xwd9@55d41ac7.access.ecotel.net)
[07:00:13] <d_bot> <rawburt> in what sense?
[07:22:34] *** Joins: rgrinberg (~textual@2806:101e:7:2b:6129:f312:6bd3:a55)
[07:28:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:49:20] *** Quits: tizoc (~user@li296-221.members.linode.com) (Quit: Coyote finally caught me)
[07:55:56] *** Joins: tizoc (~user@li296-221.members.linode.com)
[07:59:33] *** Joins: mbuf (~Shakthi@223.178.78.253)
[08:25:40] *** Joins: nefarious (~nefarious@2607:fb90:ba43:fa06:a0a3:c410:269b:cbbf)
[08:26:22] <nefarious> How do I learn all about the OCaml type system? I want to start working on some of the OCaml type system development work.
[08:26:53] <companion_cube> there's papers and PhD theses, mostly
[08:27:08] <nefarious> Ahh... no softer introduction?
[08:27:50] <nefarious> Not a fan of sifting through dense mathematics
[08:28:22] <companion_cube> honestly, I'm afraid that digging into the type system requires some mathematics
[08:28:54] <nefarious> I agree, but not the mathematics they put in PhD theses :)
[08:28:57] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Quit: Leaving)
[08:29:48] <companion_cube> true, true.
[08:30:08] <companion_cube> skme more recent aspects like GADTs are probably quite hairy though.
[08:30:32] <nefarious> Ok, anyways, well what are those papers and theses then... if I must
[08:30:34] <companion_cube> I do wonder why there isn't a nice "bibliography" page on the website (cc octachron? :3)
[08:32:03] <nefarious> Ahh I just want to work on type systems
[08:32:15] <nefarious> I asked some Haskell folk and it was even worse over there
[08:32:57] <companion_cube> https://caml.inria.fr/pub/papers/ ah !!!!
[08:33:02] <companion_cube> !biblio = https://caml.inria.fr/pub/papers/
[08:33:02] <ocabot> Success
[08:34:45] <nefarious> Oh boy
[08:34:59] <companion_cube> the last one seems cool, hadn't opened it in a while
[08:35:02] <nefarious> We should get a reading group going
[08:35:03] <companion_cube> the Zinc machine
[08:35:17] <companion_cube> (that's Caml/OCaml in the late 90s I think)
[08:35:26] <nefarious> Amazing
[08:35:31] <companion_cube> oops, 02/1990
[08:35:36] <companion_cube> early nineties :D
[08:37:55] <companion_cube> so for example https://caml.inria.fr/pub/papers/garrigue_remy-poly-ic99.pdf might be important for "modern" OCaml
[08:38:16] <companion_cube> explains how to mix classic ML polymorphism, with explicit type annotations that are often required with, say, GADTs
[08:47:03] *** Quits: nefarious (~nefarious@2607:fb90:ba43:fa06:a0a3:c410:269b:cbbf) (Quit: Client closed)
[08:55:48] <d_bot> <monk> nice
[09:02:44] *** Joins: bobo_ (~bobo@37.171.250.135)
[09:03:25] *** Quits: spip (~bobo@37.171.250.135) (Ping timeout: 256 seconds)
[09:17:54] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[09:47:01] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:49:21] <d_bot> <PureFunctor> Does anyone know of any https://www.haskell.org/arrows/ -like libraries for OCaml?
[09:52:46] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[10:15:23] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 256 seconds)
[10:29:30] <d_bot> <darrenldl> @rawburt (i dont think irc users see which message you're replying to)
[10:29:30] <d_bot> <darrenldl>
[10:29:31] <d_bot> <darrenldl> but im guessing some if what dh meant was some things are more difficult without a lexing stage
[10:30:27] <d_bot> <darrenldl> and you dont get static analysis (as a compilation step) on whether your parser has conflicts etc
[10:31:24] <d_bot> <darrenldl> parsing things like comments will require you to essentially do a text replace pass before feeding into a constructed parser in combinator world
[10:31:40] *** Parts: jochensp (~jochensp@dyndsl-031-150-024-170.ewe-ip-backbone.de) (WeeChat 3.4)
[10:36:26] *** Quits: rgrinberg (~textual@2806:101e:7:2b:6129:f312:6bd3:a55) (Ping timeout: 250 seconds)
[10:38:22] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[10:40:04] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:01:42] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[11:14:34] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[11:18:33] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[11:29:09] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[11:41:01] *** Quits: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:41:31] <LACampbell> where is everyone here chatting if not IRC?
[11:43:22] *** Joins: mro (~mro@port-92-195-169-120.dynamic.as20676.net)
[11:50:56] <zozozo> LACampbell: the IRC channel is bridged with a discord channel (through d_bot on the irc side)
[12:12:56] *** Joins: jlrnick (~josephler@2a01cb040a1594007c4273d50a89f6ac.ipv6.abo.wanadoo.fr)
[12:25:02] *** Quits: bobo_ (~bobo@37.171.250.135) (Ping timeout: 240 seconds)
[12:25:09] *** Joins: bobo_ (~bobo@37.171.250.135)
[12:45:26] *** Quits: mro (~mro@port-92-195-169-120.dynamic.as20676.net) (Remote host closed the connection)
[12:45:36] *** Joins: mro (~mro@port-92-195-169-120.dynamic.as20676.net)
[12:47:35] *** Joins: spip (~bobo@37.171.250.135)
[12:47:49] *** Quits: bobo_ (~bobo@37.171.250.135) (Ping timeout: 256 seconds)
[13:05:28] <d_bot> <Inst> why are all the bot relays cats?
[13:06:05] <d_bot> <NULL> Why not I guess, it's a way to have different images for every user
[13:12:01] *** Joins: bobo_ (~bobo@37.171.250.135)
[13:12:11] *** Quits: spip (~bobo@37.171.250.135) (Ping timeout: 256 seconds)
[13:30:40] *** Quits: mro (~mro@port-92-195-169-120.dynamic.as20676.net) (Remote host closed the connection)
[13:33:25] *** Joins: mro (~mro@port-92-195-169-120.dynamic.as20676.net)
[13:43:15] *** Joins: olle (~olle@p57840094.dip0.t-ipconnect.de)
[13:49:32] <d_bot> <Alistair> Bonsai uses ppx let to implement something like Yallops arrow calculus, which is similar
[14:02:32] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Ping timeout: 240 seconds)
[14:09:20] *** Joins: bartholin (~bartholin@158.110.70.210)
[14:16:08] *** Joins: salkin (~salkin@138.251.92.62.static.cust.telenor.com)
[14:31:55] *** Quits: salkin (~salkin@138.251.92.62.static.cust.telenor.com) (Ping timeout: 256 seconds)
[14:59:25] *** Joins: kakadu (~kakadu@195.19.236.234)
[15:12:47] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[15:13:21] *** Quits: mro (~mro@port-92-195-169-120.dynamic.as20676.net) (Remote host closed the connection)
[15:14:47] *** Joins: mro (~mro@2002:5cc3:a978:0:9c62:64c2:52e9:ab50)
[15:24:33] *** Quits: mro (~mro@2002:5cc3:a978:0:9c62:64c2:52e9:ab50) (Remote host closed the connection)
[15:33:32] *** Joins: mro (~mro@port-92-195-169-120.dynamic.as20676.net)
[15:35:39] *** Quits: mro (~mro@port-92-195-169-120.dynamic.as20676.net) (Remote host closed the connection)
[15:35:50] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[15:44:05] *** Joins: mro (~mro@port-92-195-169-120.dynamic.as20676.net)
[15:49:28] *** Quits: mro (~mro@port-92-195-169-120.dynamic.as20676.net) (Remote host closed the connection)
[15:52:26] *** Joins: spip (~bobo@37.164.94.173)
[15:52:57] *** Quits: bobo_ (~bobo@37.171.250.135) (Ping timeout: 256 seconds)
[15:55:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:08:34] *** Joins: romildo (~Romildo@ip-191-5-85-76.isp.valenet.com.br)
[16:09:48] <romildo> When building irmin on NixOS I am getting some type errors:
[16:09:57] <romildo> File "src/irmin/commit.ml", line 493, characters 19-37:
[16:09:58] <romildo> 493 |         let n, v = decode_bin buf off in
[16:09:58] <romildo>                          ^^^^^^^^^^^^^^^^^^
[16:09:58] <romildo> Error: This expression has type string but an expression was expected of type
[16:09:58] <romildo>          'a * 'b
[16:11:07] <romildo> I have tried the 3 latest versions of irmin.
[16:11:59] <romildo> I have also tried with ocaml 4.8, 4.9, 4.10, 4.11, 4.12 e 4.13.
[16:12:04] <romildo> Any clues?
[16:14:27] *** Joins: Haudegen (~quassel@91.114.49.10)
[16:18:33] *** Joins: salkin (~salkin@138.251.92.62.static.cust.telenor.com)
[16:18:47] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[16:19:41] *** Joins: xenu_ (~xenu@carychium-tridentatum.xenu.pl)
[16:20:03] *** Quits: xenu (~xenu@carychium-tridentatum.xenu.pl) (Read error: Connection reset by peer)
[16:20:29] *** Quits: romildo (~Romildo@ip-191-5-85-76.isp.valenet.com.br) (Quit: Leaving)
[16:22:33] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Remote host closed the connection)
[16:22:57] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[16:26:12] *** xenu_ is now known as xenu
[16:52:33] *** Joins: mro (~mro@port-92-195-169-120.dynamic.as20676.net)
[16:55:47] <kakadu> you should check in which library function decode_bin is declared.
[16:58:13] *** Quits: spip (~bobo@37.164.94.173) (Quit: Konversation terminated!)
[17:02:05] *** Joins: spip (~bobo@37.164.94.173)
[17:32:10] *** Joins: xiongxin (~Thunderbi@119.123.101.209)
[17:32:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:48:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:50:16] *** Quits: xenu (~xenu@carychium-tridentatum.xenu.pl) (Read error: Connection reset by peer)
[17:50:23] *** Joins: xenu (~xenu@carychium-tridentatum.xenu.pl)
[17:56:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:58:18] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[18:01:02] *** Quits: xiongxin (~Thunderbi@119.123.101.209) (Ping timeout: 250 seconds)
[18:01:08] *** Joins: xiongxin1 (~Thunderbi@119.123.101.209)
[18:01:49] *** Quits: mro (~mro@port-92-195-169-120.dynamic.as20676.net) (Remote host closed the connection)
[18:02:02] *** Quits: salkin (~salkin@138.251.92.62.static.cust.telenor.com) (Ping timeout: 240 seconds)
[18:02:39] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:03:26] *** xiongxin1 is now known as xiongxin
[18:03:37] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:19:29] *** Joins: mro (~mro@port-92-195-169-120.dynamic.as20676.net)
[18:24:02] *** Quits: mro (~mro@port-92-195-169-120.dynamic.as20676.net) (Ping timeout: 240 seconds)
[18:28:25] <dmbaturin> You should also use a paste service like bpaste.net :)
[18:28:40] *** Joins: biog (~user1@159.224.42.85)
[18:50:48] <hackinghorn> hi, what are these [@@ ] and [@@@ ] I'm seeing?
[18:51:48] <zozozo> hackinghorn: these are attributes, see https://ocaml.org/manual/attributes.html
[18:52:19] <hackinghorn> ahh thankss
[19:01:20] *** Joins: mro (~mro@port-92-195-169-120.dynamic.as20676.net)
[19:03:08] *** Quits: mro (~mro@port-92-195-169-120.dynamic.as20676.net) (Remote host closed the connection)
[19:10:35] <d_bot> <rawburt> ah didn't realize this was synced with IRC. thanks for your reply 🙂 that makes sense
[19:15:04] *** Quits: xiongxin (~Thunderbi@119.123.101.209) (Remote host closed the connection)
[19:15:46] *** Joins: salkin (~salkin@138.251.92.62.static.cust.telenor.com)
[19:18:28] *** Joins: mro (~mro@port-92-195-169-120.dynamic.as20676.net)
[19:20:21] *** Quits: salkin (~salkin@138.251.92.62.static.cust.telenor.com) (Ping timeout: 256 seconds)
[19:24:26] *** Quits: mro (~mro@port-92-195-169-120.dynamic.as20676.net) (Remote host closed the connection)
[19:37:06] *** Joins: mro (~mro@port-92-195-169-120.dynamic.as20676.net)
[19:43:47] *** Quits: mro (~mro@port-92-195-169-120.dynamic.as20676.net) (Remote host closed the connection)
[19:49:20] *** Joins: mro (~mro@port-92-195-169-120.dynamic.as20676.net)
[19:53:12] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[19:54:45] *** Quits: mro (~mro@port-92-195-169-120.dynamic.as20676.net) (Remote host closed the connection)
[19:56:44] *** Joins: mro (~mro@2002:5cc3:a978:0:9c62:64c2:52e9:ab50)
[20:14:03] *** Quits: mro (~mro@2002:5cc3:a978:0:9c62:64c2:52e9:ab50) (Remote host closed the connection)
[20:15:56] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:22:55] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:24:03] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:26:59] *** Quits: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:34:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:34:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:35:13] *** Quits: bartholin (~bartholin@158.110.70.210) (Quit: Leaving)
[20:36:27] *** Joins: megeve (sid523379@id-523379.hampstead.irccloud.com)
[20:50:13] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[20:57:11] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[20:57:51] <hannes> earlier (4.05) OCaml systems worked with a brief patch to configure on FreeBSD/armv7 devices (32 bit) (patch: https://github.com/freebsd/freebsd-ports/blob/main/lang/ocaml/files/patch-configure -- relevant part is line 43), newer ocaml compilers (4.12.1) now fail to compile on armv7 and FreeBSD -- https://bz-attachments.freebsd.org/attachment.cgi?id=231087 (with the patch at
[20:57:56] <hannes> https://bugs.freebsd.org/bugzilla/attachment.cgi?id=231075) -- any clues how to deal with that (nowadays, it looks like TARGET_armv7 and MODEL_armv7 is used, but that leads to no definition of Saved_return_address and Callback_link in runtime/stack.h)
[20:58:48] <hannes> so, how would one push a TARGET_arm through the autoconf layer? how does this work on e.g. a GNU/Linux system?
[21:01:08] <hannes> (in runtime/Makefile I see OC_NTAIVE_CPPFLAGS= -DNATIVE_CODE -DTARGET_$(ARCH) -- and ARCH should be arm -- but somehow it is armv7!? (unfortunately I don't have a armv7 FreeBSD system to conduct testing)
[21:04:20] *** Quits: olle (~olle@p57840094.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[21:05:05] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[21:23:20] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[21:26:24] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[21:28:48] <Anarchos> i have a Unix.read on a socket which is blocked, but netstat show that the sender (netcat) has a Send-Q at 32768. I don't know how to investigate why the read call doesn't eat the 32768 bytes ?
[21:31:21] <d_bot> <NULL> I can't find a way to add a `[@warning "-8"]` in a monadic `let*` binding. Am I missing something ?
[21:34:43] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:00:57] *** Joins: zebrag (~chris@user/zebrag)
[22:30:49] *** Quits: mbuf (~Shakthi@223.178.78.253) (Quit: Leaving)
[22:36:27] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[22:53:47] *** Joins: salkin (~salkin@84.212.156.62)
[22:59:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:01:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:07:35] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[23:15:02] *** Quits: jlrnick (~josephler@2a01cb040a1594007c4273d50a89f6ac.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[23:15:52] *** Joins: gwizon (~gwizon@ool-45798cb0.dyn.optonline.net)
[23:23:18] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[23:39:58] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[23:47:05] *** Quits: gwizon (~gwizon@ool-45798cb0.dyn.optonline.net) (Remote host closed the connection)
[23:59:17] *** Joins: mro (~mro@port-92-195-169-120.dynamic.as20676.net)
