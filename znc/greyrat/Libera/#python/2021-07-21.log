[00:00:10] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[00:01:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[00:01:16] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[00:01:33] *** Joins: wyclif (~wyclif@user/wyclif)
[00:01:44] <jinsun> paule32: what did you expect year to be if it didn't give error? 2021?
[00:02:35] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:02:44] <drd> I've setup a python package to use setuptools, although building it with "python -m build" and "python setup.py build" yield different results, why is so?
[00:02:47] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 255 seconds)
[00:03:22] <ChrisWarrick> drd: what different results?
[00:03:42] *** Joins: Trashlord (~trash@user/trashlord)
[00:05:01] *** Joins: bambams_ (~bambams@user/bambams)
[00:06:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[00:06:36] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[00:06:46] <nubonix> Payam are you scraping?
[00:07:05] *** Joins: wyclif (~wyclif@user/wyclif)
[00:07:29] <nubonix> Payam: i didnt read the code you posted earlier
[00:07:49] *** Quits: Barones (~Barones@2804:48dc:8500:0:f0cd:c0f8:8dcc:5d4) (Remote host closed the connection)
[00:08:03] *** Joins: Barones (~Barones@2804:48dc:8500:0:3100:1852:23b9:80b6)
[00:08:36] <paule32> jinsun: only the current year
[00:08:40] <paule32> jinsun: 2021
[00:09:28] <jinsun> paule32: so you want date.today().year, date.year is not a function
[00:09:43] <paule32> oh, thx
[00:10:28] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[00:10:39] <drd> ChrisWarrick: "python -m build" produces in dist/ both a tar and a wheel file, "python setup.py build" and creates an egg file
[00:11:20] <ChrisWarrick> drd: okay, different this way. yeah, don’t run setup.py directly, it will produce legacy results you don’t want
[00:11:28] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Ping timeout: 252 seconds)
[00:12:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:12:50] *** Joins: wyclif (~wyclif@user/wyclif)
[00:14:12] <drd> ChrisWarrick: problem is, i'm trying to create an AUR package, and i've read on the package guidelines that it's preferrable to use "python setup.py install". Has anyone any experience with this? Is it wrong to use other commands such as "python -m build" or even "pip install ."?
[00:14:26] *** Quits: gvsa123 (~gvsa123@d50-93-28-5.abhsia.telus.net) (Quit: Leaving)
[00:14:42] <drd> Maybe it's better to ask in the arch linux channel
[00:14:44] <grym> drd: `pip install` is the way python things should expect to be installed
[00:14:53] <grym> drd: `python setup.py <something>` is deprecated
[00:15:20] <grym> (so i tend to `pip wheel` to make a wheel and then `pip install` to install that wheel)
[00:15:46] <altendky> `python -m build` is the latest
[00:15:50] <drd> grym: You mean in the PKGBUILD or generally speaking?
[00:15:59] <grym> drd: what's a pkgbuild
[00:16:22] <jinsun> it is the arch linux build script thing
[00:16:28] <grym> oh.  then i have no idea
[00:16:30] <jinsun> or pacman really
[00:16:32] <altendky> mostly reiterating, but basically in python-land you don't run `setup.py` directly (if you even bother having one at all).  but yeah, i don't know my way around linux package building habits.
[00:16:58] <grym> the way i know how to install stuff is 1. make a venv 2. thatvenv/bin/pip install <stuff> 3. profit.
[00:16:59] *** Joins: drant (~drant@2a05:f480:1c00:d82::)
[00:17:03] <altendky> (where i should clarify that by not having a `setup.py` i don't mean not having an installable project.  rather, having a setup.cfg and pyproject.toml)
[00:17:35] <drd> grym: Just the AUR packaging scheme, think of it as a setup.py but for another repository. I'll check in with the arch folks, thanks for clarifying my doubts
[00:17:40] <grym> (so i tend to think of the atomic unit of a distributable python package as the *.whl)
[00:17:43] <grym> drd: good luck!
[00:17:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:18:25] *** Joins: wyclif (~wyclif@user/wyclif)
[00:18:51] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[00:19:42] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[00:21:36] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:544f:ff3e:f177:8d6c) (Quit: Leaving)
[00:22:29] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[00:23:46] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[00:26:36] *** Quits: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net) (Ping timeout: 246 seconds)
[00:27:54] <jinsun> drd: looks like the popular ones are all doing `setup.py build` + `setup.py install --root=$pkgdir` for example https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=python-spotipy
[00:28:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:28:37] <grym> a different world
[00:28:49] *** Joins: tadamono (~tadamono@c-98-222-81-32.hsd1.in.comcast.net)
[00:29:10] *** Quits: mexen (uid495612@user/mexen) ()
[00:29:15] <jinsun> but maybe you can replace those by `python -m build` + `pip install`, but not sure about that --root=$pkgdir thing if we can do that with pip
[00:29:23] *** Joins: wyclif (~wyclif@user/wyclif)
[00:30:12] *** Joins: argento (~argent0@168-227-96-53.ptr.westnet.com.ar)
[00:30:58] <ChrisWarrick> I wouldn’t expect pip to be friendly with package managers
[00:33:40] <grym> i have distro packages filed away under "weird stuff i don't know or care about"
[00:33:47] <grym> so i'm not going to be very useful :)
[00:34:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[00:34:54] *** Joins: wyclif (~wyclif@user/wyclif)
[00:35:34] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 252 seconds)
[00:36:46] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[00:37:02] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[00:39:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[00:41:10] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 252 seconds)
[00:42:37] *** Quits: s8n (~s8n@user/s8n) (Quit: The Lounge - https://thelounge.chat)
[00:42:57] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[00:43:31] *** Joins: s8n (~s8n@user/s8n)
[00:43:50] *** Joins: kmikita (uid461814@id-461814.brockwell.irccloud.com)
[00:44:01] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[00:44:13] <marduk> Don't know about arch but gentoo has an "eclass" (build library) for python packages so really you just point it to the python sources and it takes care of setup.py vs pyproject.yaml building, etc.
[00:45:05] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[00:45:05] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 255 seconds)
[00:45:23] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[00:46:07] *** Joins: wyclif (~wyclif@user/wyclif)
[00:46:16] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:46:52] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 265 seconds)
[00:47:50] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[00:49:46] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 265 seconds)
[00:50:16] *** Joins: abhixec_ (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[00:50:41] *** Joins: fivegruel (~fivegruel@HSI-KBW-095-208-248-149.hsi5.kabel-badenwuerttemberg.de)
[00:50:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[00:51:04] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[00:51:41] *** Joins: wyclif (~wyclif@user/wyclif)
[00:52:06] <jinsun> so arch apparently just recommends to convert pyproject.toml to setup.py https://wiki.archlinux.org/title/Python_package_guidelines#pyproject.toml_(PEP_517)
[00:55:18] <Ninpo> ChrisWarrick | I wouldn’t expect pip to be friendly with package managers <-- absolutely this don't use pip in build scripts for package management since they usually run with enough privileges to start a lot of trouble
[00:55:26] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.2)
[00:56:00] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[00:56:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[00:57:24] *** Joins: wyclif (~wyclif@user/wyclif)
[00:58:40] *** Quits: vsantana (~Thunderbi@fttx-17713614973.usr.predialnet.com.br) (Ping timeout: 252 seconds)
[00:59:03] *** Joins: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-27.dsl.bell.ca)
[01:02:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[01:02:41] *** Joins: wyclif (~wyclif@user/wyclif)
[01:02:59] *** Quits: grawity (grawity@star.nullroute.eu.org) (Remote host closed the connection)
[01:03:10] <greatgatsby> Hi.  I'd like to use poetry for a project at work.  We have two locations, each with their own pypi mirror since the dev workstations cannot talk out to the internet.  I'm struggling to get a pyproject.toml configured that supports both environments.  How can I include 2 tool.poetry.source repositories, where only 1 will be accessible?  Is there a better solution?
[01:04:05] *** Quits: rud01f (rud0lf@user/rud0lf) (Read error: Connection reset by peer)
[01:04:14] <greatgatsby> poetry doesn't seem to gracefully handle an unreachable repo
[01:04:20] *** Joins: grawity (~grawity@star.nullroute.eu.org)
[01:04:24] <SnoopJ> greatgatsby, can you depend on them only by name and use pip.conf to configure the index-url?
[01:04:34] <SnoopJ> oh, nevermind, poetry >_>
[01:04:37] <greatgatsby> SnoopJ, I thought... yeah
[01:04:53] <SnoopJ> I'm not sure to what extent (any?) it cares about that
[01:05:03] <greatgatsby> I can use a simple setup.py instead of poetry, I've just really started to like poetry :-)
[01:05:33] <greatgatsby> poetry just dies if it can't reach the repo
[01:05:37] *** Joins: rud01f (rud0lf@user/rud0lf)
[01:06:22] *** Quits: beshr (~beshr@user/beshr) (Ping timeout: 252 seconds)
[01:06:34] <greatgatsby> I tried with env vars too, but couldn't get it to work, but that would be suitable too, each location would just set env vars for their source
[01:06:47] <greatgatsby> need a poetry guru :-)
[01:07:28] <SnoopJ> the sites could `poetry config respositories.fooproject https://local.repo/simple` I think, but that's an annoying extra step
[01:07:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[01:07:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:08:51] *** Joins: witten (~witten@user/witten)
[01:09:06] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[01:09:13] <greatgatsby> I'm ok with that, was trying that... do I not still have to actually specify a url in pyproject.toml?  That, from my testing, only seemed to apply for publishing.  I'll try to do a test here (I'm back at home, harder to test)
[01:09:36] <SnoopJ> POETRY_REPOSITORIES_FOOPROJECT = "https://local.repo/simple" is I think the env var spelling
[01:09:36] *** Joins: emika (~emika@83.136.182.91)
[01:09:58] <SnoopJ> (but I'm just looking at the docs, haven't used/tested this)
[01:10:08] <witten> when a subprocess exits, should its stdout be closed? because I'm not seeing that, and in fact select() is still saying it's ready...
[01:10:09] <greatgatsby> ah, ok, I'll still try a test
[01:10:39] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[01:10:46] <witten> s/be/appear/
[01:11:59] <SnoopJ> oh cool, I didn't realize you could ask it to make its venv inside the project dir, I might add that to my poetry envrc :)
[01:12:43] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Ping timeout: 255 seconds)
[01:13:10] <graingert> witten: I think sigchld?
[01:13:29] <graingert> witten: you might have bytes buffered still
[01:13:59] *** Joins: wyclif (~wyclif@user/wyclif)
[01:14:06] <witten> graingert: I'm continuing to read and it's just getting empty values forever..
[01:14:10] <graingert> witten: also pretty sure select will say fds are ready for reading and then you read them and get a b''
[01:14:31] <graingert> witten: oh right non-blocking closed fds return b'' on read
[01:14:39] <witten> okay, interesting
[01:14:45] <witten> that's.. unexpected
[01:15:05] <graingert> Eg the other end did await sock.send_eof()
[01:15:27] <graingert> So it's your responsibility to close your end now
[01:15:29] <graingert> Afaik
[01:15:36] <witten> thanks.. I'll have to code around that
[01:15:49] <graingert> Ask njs in https://gitter.im/python-trio
[01:16:15] <graingert> witten: out of interest how did you hit this?
[01:17:49] <witten> graingert: I'm using Python to pipe output from one program to another.. the destination program ended "early" and kept spewing empty strings from its own stdout
[01:18:55] <graingert> witten: you should be able to just use Popen and pass the streams to each other
[01:19:03] <graingert> witten: show your code?
[01:19:20] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[01:20:06] <witten> graingert: https://projects.torsion.org/witten/borgmatic/src/branch/master/borgmatic/execute.py#L48
[01:21:49] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[01:22:11] <witten> the intent is to let all processes run to completion before exiting this function, but I'm running into at least one case in which the destination of the pipe exits, and this function loops forever
[01:22:30] <witten> so I suspect it's due to its buffer being "ready" even when that process exits
[01:23:26] <graingert> https://github.com/pycontribs/subprocess-tee does that help?
[01:24:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:24:42] <witten> not directly, because I need to log output, not print it.. but I can look at this source and see if it provides any inspiration for an analogous solution
[01:25:01] *** Quits: stoneware (~stoneware@user/stoneware) (Quit: I'll be back soon)
[01:25:03] *** Joins: wyclif (~wyclif@user/wyclif)
[01:26:07] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[01:26:16] *** Joins: pnoud (~pnoud@user/pnoud)
[01:26:21] <witten> thanks
[01:26:47] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[01:27:30] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[01:28:08] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[01:28:13] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[01:28:24] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[01:28:54] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[01:30:03] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:30:13] *** Jefren3 is now known as Jefren
[01:30:47] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[01:30:57] *** Joins: wyclif (~wyclif@user/wyclif)
[01:31:00] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[01:31:10] *** Quits: paule32 (~paule32@user/paule32) (Quit: Leaving)
[01:31:26] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[01:32:08] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[01:32:12] *** Quits: riposte (~finalripo@2403-5800-3200-5c02-20c-29ff-fe65-f69c.ip6.aussiebb.net) (Quit: Quitting)
[01:32:15] *** Quits: abhixec_ (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: leaving)
[01:32:17] <hodapp> any xarray ninjas? I am stuck with this pattern that I have a dataset with some number of dataarrays, all of which depend on some common coordinate, but I cannot find a clean way to move in lockstep through all these dataarrays at once
[01:32:19] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[01:32:55] *** Joins: cedric (~cedric@2a01:cb11:867:c200:5414:5c5c:251c:872e)
[01:33:57] <SnoopJ> hodapp, can you tell us some more or show us some sample data? It's hard to understand what you mean by "depend on some common coordinate"
[01:34:42] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 268 seconds)
[01:35:02] <hodapp> sorry, meant they all depend on a common dimension.
[01:35:10] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:35:14] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[01:36:06] <hodapp> e.g. I have coordinate variable "id", let's say, and data variables "foo", "bar", "baz", which all respectively use 'id' as a coordinate (and some have their own dimensions as well).
[01:36:06] *** Joins: ali1234 (~al@user/ali1234)
[01:37:01] *** Joins: Samian (~Sami@2620:10d:c091:480::1:f422)
[01:37:10] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 268 seconds)
[01:38:35] *** Joins: riposte (~finalripo@2403-5800-3200-5c02--310.ip6.aussiebb.net)
[01:39:45] <hodapp> so I can do something like... row = ds.sel(id=whatever); foo = row["foo"]; bar = row["bar"], ...  and get the corresponding foo, bar, baz for id=whatever. The problem I run into is that 'sel' is rather slow and not meant to be done in a loop
[01:41:12] *** Quits: user3456 (user3456@user/user3456) (Quit: ZNC - https://znc.in)
[01:41:33] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[01:42:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[01:42:55] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[01:44:16] *** Quits: Barones (~Barones@2804:48dc:8500:0:3100:1852:23b9:80b6) (Quit: Leaving)
[01:45:37] *** Joins: jetchisel (jetchisel@user/jetchisel)
[01:45:38] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[01:46:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:46:25] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[01:46:30] *** Joins: wyclif (~wyclif@user/wyclif)
[01:46:37] <SnoopJ> hodapp, okay, so you have many values of `id` and want to get an array of shape (N, 3) if I understand right?
[01:46:55] *** Joins: user3456 (user3456@user/user3456)
[01:47:17] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 265 seconds)
[01:47:24] *** Quits: CodenameTim (~CodenameT@154.21.28.103) (Quit: Client closed)
[01:47:50] *** Joins: CodenameTim (~CodenameT@154.21.28.103)
[01:47:57] <SnoopJ> I'd think you could do `rows = ds.sel(id=ids_you_want)`
[01:48:36] *** Joins: stoneware (~stoneware@user/stoneware)
[01:48:46] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[01:51:19] <hodapp> that just gives me another dataset that I then still don't know to effectively iterate over
[01:51:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:51:55] <SnoopJ> ideally *you* don't do iteration at all, you express something that can be carried out on the fast side of the FFI
[01:52:01] *** Joins: wyclif (~wyclif@user/wyclif)
[01:52:21] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[01:52:28] <hodapp> and an array of (N,3) wouldn't work; some of the data variables have other dimensions
[01:52:44] <nubonix> alright altendky heres as far as ive got now, managed to pass qtscheduler i think, but im getting a nonetype when trying to resume the job https://gist.github.com/nubonics/65de855f798aed4fd8d678cf30030035
[01:52:52] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 268 seconds)
[01:52:56] *** Joins: r3m (~launch@user/r3m)
[01:53:00] <SnoopJ> hodapp, it would help a lot to see the data you want and the transformation you're trying to apply. Without that all I can really say is that you're right, there are better idioms
[01:53:01] <hodapp> ultimately I have each 'row' (so to speak) of (foo, bar, baz) - each at a given ID - being used as arguments to a function
[01:53:18] *** Quits: Jefren (~Jefren@70.35.66.207) (Ping timeout: 252 seconds)
[01:53:54] <nubonix> self.qtscheduler is a nonetype @ https://gist.github.com/nubonics/65de855f798aed4fd8d678cf30030035#file-homepage-py-L426
[01:54:02] <hodapp> the only reason for iteration is that; the API it's going into isn't vectorized
[01:54:48] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[01:56:02] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[01:56:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:57:29] *** Joins: Jefren (~Jefren@70.35.67.178)
[01:57:41] *** Joins: wyclif (~wyclif@user/wyclif)
[01:58:09] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:544f:ff3e:f177:8d6c)
[01:59:32] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[02:00:50] *** Quits: Akuli (~Akuli@82-203-165-130.bb.dnainternet.fi) (Quit: Leaving)
[02:01:12] *** Joins: MysteryBlokHed (~Adam@174.114.207.70)
[02:02:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:03:17] *** Joins: wyclif (~wyclif@user/wyclif)
[02:04:53] *** Quits: MysteryBlokHed (~Adam@174.114.207.70) (Quit: The Lounge - https://thelounge.chat)
[02:06:12] <hodapp> ugh. I guess I can do something like... for foo, bar, baz in zip(*[v for _,v in ds.sel(id=list_of_ids)][["foo", "bar", "baz"]].items()]): ...
[02:07:53] *** Quits: Jefren (~Jefren@70.35.67.178) (Ping timeout: 255 seconds)
[02:08:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:08:45] *** Joins: wyclif (~wyclif@user/wyclif)
[02:08:58] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 250 seconds)
[02:09:43] <mat001> Is this legit: result = var == somevalue ?
[02:10:09] *** Joins: Jefren (~Jefren@208.104.190.58)
[02:11:50] <drant> yes
[02:12:47] <mat001> ty
[02:13:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:14:20] *** Joins: wyclif (~wyclif@user/wyclif)
[02:14:22] <nedbat> mat001: it looks a little better with parens around var and somevalue
[02:14:55] *** Quits: Alex123 (~Adium@2603-8000-db03-afbf-01f2-fb55-5ffe-baf3.res6.spectrum.com) (Quit: Leaving.)
[02:15:24] <mat001> ok
[02:16:08] *** Parts: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) ()
[02:16:58] *** Joins: x_kuru (~xkuru@user/xkuru)
[02:18:49] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::9885) (Quit: Konversation terminated!)
[02:19:08] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 255 seconds)
[02:19:13] *** Quits: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de) (Quit: Leaving.)
[02:19:17] *** Quits: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster) (Quit: Leaving)
[02:19:43] *** Quits: Jefren (~Jefren@208.104.190.58) (Ping timeout: 268 seconds)
[02:20:45] *** Quits: kor1 (~kor1@user/kor1) (Quit: Leaving.)
[02:21:25] *** Joins: zebrag (~chris@user/zebrag)
[02:21:32] *** Joins: Jefren (~Jefren@70.35.66.160)
[02:24:24] <voldial> This is nice to work with: https://github.com/coleifer/greendb/blob/master/greendb.py#L1047 except, I wonder if I am missing something obvious, as it is, .keys() or .values() will call self._cursor_op() (line 982) and build a list of results with accum.append()... and then return accum, so if for example there are 100GB of values, it might a very long time for the .values() command to return that list, and
[02:24:26] <voldial> it's going to fail because it cant fit in ram anyway... redis has a cursor, so a large redis key is iterated over like "while cursor != 0: cursor, values = r.sscan(self.key, cursor)"... greendb.client.values() takes 3 positional args, start, stop, count, but since it's a B+tree (ordered) it's possible to miss k/v pairs that were inserted after the query started...
[02:24:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:25:21] *** Joins: wyclif (~wyclif@user/wyclif)
[02:25:28] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[02:25:41] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:26:30] *** Quits: Jefren (~Jefren@70.35.66.160) (Ping timeout: 268 seconds)
[02:26:40] *** Joins: p-i- (~Ohmu@node-hb1.pool-118-173.dynamic.totinternet.net)
[02:27:46] *** audioduck is now known as audiocat
[02:27:51] *** Joins: Jefren (~Jefren@70.35.66.212)
[02:29:15] *** Joins: Jefren1 (~Jefren@206.253.157.219)
[02:29:20] *** Quits: p-i-_ (~Ohmu@node-126c.pool-118-173.dynamic.totinternet.net) (Ping timeout: 265 seconds)
[02:30:00] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:30:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:30:30] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[02:30:51] *** Joins: wyclif (~wyclif@user/wyclif)
[02:32:02] <voldial> The underlying storage engine, LMDB, has no problem iterating, "txn.cursor().iternext(values=False)" will iterate over all the keys
[02:32:20] *** Joins: cman (~Cody@2603:9000:d104:8465:c874:df99:8583:75ed)
[02:32:32] *** Quits: Jefren (~Jefren@70.35.66.212) (Ping timeout: 252 seconds)
[02:32:40] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 268 seconds)
[02:32:57] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: gildasio)
[02:33:17] *** Joins: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:894c:5001:bada:3aea)
[02:34:53] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 255 seconds)
[02:35:13] *** Quits: argento (~argent0@168-227-96-53.ptr.westnet.com.ar) (Quit: leaving)
[02:35:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:36:02] *** Quits: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:4ec5:6765:26be:8e46) (Ping timeout: 268 seconds)
[02:36:17] *** Joins: Jefren2 (~Jefren@206.253.157.226)
[02:36:21] *** Joins: wyclif (~wyclif@user/wyclif)
[02:36:53] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[02:37:46] *** Quits: emika (~emika@83.136.182.91) (Quit: emika)
[02:38:03] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[02:38:11] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:38:28] *** Joins: emika (~emika@83.136.182.22)
[02:38:37] *** Joins: zeenk (~zeenk@2a02:2f04:a008:d600:18f2:3421:bac6:8f38)
[02:38:40] *** Quits: Jefren1 (~Jefren@206.253.157.219) (Ping timeout: 255 seconds)
[02:40:21] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[02:40:44] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 255 seconds)
[02:41:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:41:11] *** Quits: Samian (~Sami@2620:10d:c091:480::1:f422) (Ping timeout: 255 seconds)
[02:41:53] *** Joins: wyclif (~wyclif@user/wyclif)
[02:44:51] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 246 seconds)
[02:45:03] *** Joins: dcaro_ (~dcaro@user/dcaro)
[02:46:03] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[02:46:05] *** dcaro_ is now known as dcaro
[02:46:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:47:23] *** Joins: wyclif (~wyclif@user/wyclif)
[02:47:28] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 268 seconds)
[02:49:36] *** Joins: Jefren3 (~Jefren@70.35.67.100)
[02:50:19] *** Joins: Alex123 (~Adium@2603-8000-db03-afbf-ed5e-2f35-0ac2-f32a.res6.spectrum.com)
[02:51:13] *** Joins: MysteryBlokHed (~Adam@174.114.207.70)
[02:51:43] *** Quits: Jefren2 (~Jefren@206.253.157.226) (Ping timeout: 255 seconds)
[02:52:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[02:52:33] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[02:52:54] *** Joins: wyclif (~wyclif@user/wyclif)
[02:55:27] *** Joins: astiak (~astiak@ownage.biz)
[02:55:43] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[02:57:20] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[02:57:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:58:24] *** Joins: wyclif (~wyclif@user/wyclif)
[03:00:16] *** Quits: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs) (Ping timeout: 255 seconds)
[03:01:06] *** Joins: homerj (~homerj@user/homerj)
[03:01:14] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[03:03:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:03:54] *** Joins: wyclif (~wyclif@user/wyclif)
[03:04:31] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[03:04:36] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:04:42] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[03:05:02] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 255 seconds)
[03:08:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:09:25] *** Joins: wyclif (~wyclif@user/wyclif)
[03:10:16] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[03:10:25] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[03:11:19] *** Quits: zeenk (~zeenk@2a02:2f04:a008:d600:18f2:3421:bac6:8f38) (Quit: Konversation terminated!)
[03:13:13] *** Joins: Classic (~floks@user/classic)
[03:15:13] *** Joins: Jefren4 (~Jefren@70.35.67.182)
[03:16:42] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[03:16:42] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (Ping timeout: 258 seconds)
[03:17:39] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Quit: The Lounge - https://thelounge.chat)
[03:17:40] *** Quits: Jefren3 (~Jefren@70.35.67.100) (Ping timeout: 265 seconds)
[03:18:00] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:18:43] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 255 seconds)
[03:18:54] *** Joins: quasineutral (~quaisneut@user/quasineutral)
[03:18:55] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: Blackpajamas)
[03:19:09] *** Quits: CodenameTim (~CodenameT@154.21.28.103) (Ping timeout: 246 seconds)
[03:19:12] *** Joins: wyclif (~wyclif@user/wyclif)
[03:19:54] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[03:21:25] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:22:52] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[03:23:57] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 265 seconds)
[03:25:57] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[03:26:01] *** Quits: cedric (~cedric@2a01:cb11:867:c200:5414:5c5c:251c:872e) (Quit: Konversation terminated!)
[03:27:06] *** Joins: pnoud (~pnoud@user/pnoud)
[03:27:34] *** Quits: baltazar (~baltazar@178-164-154-141.pool.digikabel.hu) (Remote host closed the connection)
[03:27:34] *** Quits: Elzington (~Elzington@68.235.43.172) (Remote host closed the connection)
[03:28:17] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[03:29:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:29:24] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[03:29:35] *** Joins: baltazar (~baltazar@178-164-154-141.pool.digikabel.hu)
[03:29:59] *** Joins: Elzington (~Elzington@68.235.43.172)
[03:30:12] *** Joins: wyclif (~wyclif@user/wyclif)
[03:30:50] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Quit: Turning off a portion of this simulation.)
[03:31:22] *** Joins: tims (~tims@220-245-254-151.static.tpgi.com.au)
[03:31:29] *** Quits: tonberry (~tonberry@user/d00gy) (Quit: WeeChat 3.0)
[03:31:56] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[03:34:20] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[03:34:22] *** Quits: redgloboli (~redglobol@user/redgloboli) (Quit: ended)
[03:34:39] *** Joins: redgloboli (~redglobol@user/redgloboli)
[03:34:52] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[03:37:33] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[03:38:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:38:52] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[03:40:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:41:12] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[03:41:13] *** Joins: wyclif (~wyclif@user/wyclif)
[03:41:25] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:41:29] *** MysteryBlokHed is now known as adamts
[03:42:26] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:6cf3:aa58:e4f9:2fac)
[03:43:17] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-149.hsi5.kabel-badenwuerttemberg.de) (Ping timeout: 265 seconds)
[03:43:50] *** Joins: Jefren (~Jefren@70.35.66.247)
[03:44:24] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[03:45:04] *** Quits: Jefren4 (~Jefren@70.35.67.182) (Ping timeout: 258 seconds)
[03:45:42] *** Joins: Jefren1 (~Jefren@70.35.66.77)
[03:46:14] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.2)
[03:47:51] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[03:48:31] *** Quits: Jefren (~Jefren@70.35.66.247) (Ping timeout: 258 seconds)
[03:50:01] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[03:50:38] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 252 seconds)
[03:50:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:52:15] *** Joins: wyclif (~wyclif@user/wyclif)
[03:52:34] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[03:56:14] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[03:57:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:57:27] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[03:57:38] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[03:57:45] *** Joins: wyclif (~wyclif@user/wyclif)
[03:58:03] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (Quit: fail)
[03:58:36] *** Joins: tg (~tg@rockylinux/infra/tg)
[03:59:13] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 255 seconds)
[03:59:23] *** Joins: ihaveamac (~ihaveamac@ihaveahax.net)
[04:00:10] *** Quits: cul8r (~cul8r@198.133.178.20) (Ping timeout: 252 seconds)
[04:01:09] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[04:02:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[04:03:16] *** Joins: wyclif (~wyclif@user/wyclif)
[04:04:06] *** Quits: adamts (~Adam@174.114.207.70) (Changing host)
[04:04:06] *** Joins: adamts (~Adam@user/mysteryblokhed)
[04:04:20] *** Joins: Jacktar_ (~whiteshad@gateway/tor-sasl/jacktar)
[04:04:53] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Ping timeout: 244 seconds)
[04:05:00] *** Jacktar_ is now known as jacktar
[04:05:10] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[04:07:25] <nubonix> looking for some help with AsyncIOScheduler [apscheduler] super simple example of using buttons to start an async job, however, the buttons appear to do nothing atm. When i use `self.scheduler.start(paused=False)` the app runs as expected, except the buttons still do nothing, but the gui updates L1 and L2 labels https://bpa.st/45SQ
[04:08:02] <nubonix> This is a learning exercise with apscheduler [that i came up with myself] so that i can better understand how apscheduler works
[04:08:15] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[04:08:47] *** Joins: wyclif (~wyclif@user/wyclif)
[04:08:53] *** Quits: akk (~akk@75.161.155.222) (Quit: +++)
[04:10:04] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[04:10:18] *** Quits: fannagoganna (uid110488@id-110488.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[04:10:45] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:11:59] <nubonix> ah okay, weird, so `self.scheduler.start(paused=True)`
[04:11:59] <nubonix> makes it so the entire scheduler is paused, and jobs cannot be resumed because the scheduler itself is paused
[04:11:59] <nubonix> so, allowing the scheduler to start normally with paused=False, i can then add a job and pause it immediately afterwards to achieve the result i am looking for
[04:12:13] *** Quits: adamts (~Adam@user/mysteryblokhed) (Quit: That's all Folks!)
[04:12:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[04:12:25] <nubonix> the rest of the code stays the saame
[04:12:51] *** Gustavo6046_ is now known as Gustavo6046
[04:13:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[04:13:51] *** Quits: wymiller (~wymiller@096-042-164-072.res.spectrum.com) (Remote host closed the connection)
[04:14:17] *** Joins: wyclif (~wyclif@user/wyclif)
[04:16:25] *** Joins: y1n (~y1n@84-115-64-185.wifi.dynamic.surfer.at)
[04:19:11] *** Joins: lidless (~jessy@user/jabberwock)
[04:19:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[04:19:48] *** Joins: wyclif (~wyclif@user/wyclif)
[04:20:35] *** Quits: jabberwo- (jessy@user/jabberwock) (Ping timeout: 268 seconds)
[04:22:57] *** Joins: Wulf4 (~Wulf@user/wulf)
[04:24:14] *** Quits: y1n (~y1n@84-115-64-185.wifi.dynamic.surfer.at) (Ping timeout: 255 seconds)
[04:24:40] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:24:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[04:25:18] *** Joins: wyclif (~wyclif@user/wyclif)
[04:25:39] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 246 seconds)
[04:25:39] *** Wulf4 is now known as Wulf
[04:26:04] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Ping timeout: 244 seconds)
[04:26:06] *** Joins: y1n (~y1n@84-115-64-73.wifi.dynamic.surfer.at)
[04:26:22] *** Joins: jacktar (~whiteshad@gateway/tor-sasl/jacktar)
[04:26:52] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:27:51] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[04:28:01] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 255 seconds)
[04:28:32] *** Gustavo6046_ is now known as Gustavo6046
[04:28:36] *** Joins: dre (~dre@2001:8003:c932:c301:482c:1f78:f040:9036)
[04:30:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[04:30:50] *** Joins: wyclif (~wyclif@user/wyclif)
[04:32:58] *** Quits: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com) (Remote host closed the connection)
[04:35:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[04:36:20] *** Joins: wyclif (~wyclif@user/wyclif)
[04:37:01] *** Quits: ano (~weechat@user/ano) (Quit: ano)
[04:37:48] *** Joins: ano (~weechat@user/ano)
[04:38:17] *** Quits: ano (~weechat@user/ano) (Client Quit)
[04:38:23] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[04:39:11] *** Joins: ano (~weechat@user/ano)
[04:40:29] *** Joins: byzandula (~byzandula@beerbq.net)
[04:40:45] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[04:40:53] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:41:00] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[04:41:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[04:41:33] *** Quits: bambams_ (~bambams@user/bambams) (Ping timeout: 268 seconds)
[04:41:50] *** Joins: wyclif (~wyclif@user/wyclif)
[04:43:48] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[04:44:20] *** Joins: Jefren2 (~Jefren@70.35.67.220)
[04:44:35] *** Joins: bninja (~bloodninj@user/bloodninja)
[04:44:38] *** Quits: {4144} (~{4144}@46.56.64.31) (Ping timeout: 268 seconds)
[04:46:17] *** Quits: Jefren1 (~Jefren@70.35.66.77) (Ping timeout: 255 seconds)
[04:46:26] *** Joins: deivislk (~deivislk@189.7.117.212)
[04:46:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[04:47:00] *** Joins: {4144} (~{4144}@46.56.64.31)
[04:47:21] *** Joins: wyclif (~wyclif@user/wyclif)
[04:48:57] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Ping timeout: 268 seconds)
[04:56:58] *** Joins: bjb (~bjb@sourcerer.ca)
[04:57:14] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:57:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[04:58:12] *** Quits: y1n (~y1n@84-115-64-73.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[05:00:14] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 255 seconds)
[05:01:14] *** Joins: wyclif (~wyclif@user/wyclif)
[05:04:42] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[05:08:03] *** Joins: duckmcscrooge (~bsantanad@89.45.224.208)
[05:10:03] *** Quits: drant (~drant@2a05:f480:1c00:d82::) ()
[05:10:14] *** Parts: duckmcscrooge (~bsantanad@89.45.224.208) ()
[05:10:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[05:14:40] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[05:25:43] *** Parts: Alex123 (~Adium@2603-8000-db03-afbf-ed5e-2f35-0ac2-f32a.res6.spectrum.com) ()
[05:27:56] *** Joins: pnoud (~pnoud@user/pnoud)
[05:28:39] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 265 seconds)
[05:29:03] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:30:17] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:41] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[05:33:05] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[05:34:00] *** Joins: vlm (~vlm@user/vlm)
[05:35:01] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[05:36:59] *** Joins: nirix (uid48447@id-48447.tinside.irccloud.com)
[05:37:23] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 258 seconds)
[05:38:39] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Quit: Teleporting ...)
[05:40:07] *** Joins: cer-0 (~cer-0@189.228.170.154)
[05:42:26] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[05:43:35] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[05:44:22] *** Joins: kofuyu1 (~kofuyu@user/kofuyu)
[05:45:15] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:45:34] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 265 seconds)
[05:46:18] *** Quits: KeiraT (~k@lulzsec.co.uk) (Ping timeout: 268 seconds)
[05:46:25] *** Quits: kofuyu (~kofuyu@user/kofuyu) (Ping timeout: 252 seconds)
[05:46:25] *** kofuyu1 is now known as kofuyu
[05:47:02] *** Quits: nyah (~nyah@90.221.186.180) (Remote host closed the connection)
[05:47:45] *** Joins: sgn (~sgn@user/sgn)
[05:49:44] *** Quits: hposca (~hposca@node-1w7jr9phoke2tnetlghxkyj3n.ipv6.telus.net) (Ping timeout: 255 seconds)
[05:54:45] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[05:56:46] *** Joins: califax- (~califax@user/califx)
[05:56:59] *** Joins: KeiraT (~k@lulzsec.co.uk)
[05:57:03] <nubonix> how can i run a fastapi server and run a qasync pyqt5 app in the same program? https://gist.github.com/nubonics/f265358d72c4cad4f72f8357dce7c276
[05:57:45] <nubonix> i want to start the server in a background process, and then start the gui [having them both run at the same time]
[05:58:33] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[05:58:33] *** califax- is now known as califax
[05:58:44] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 255 seconds)
[05:59:16] *** Joins: brabrax (~brabrax@user/brabrax)
[06:00:10] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 252 seconds)
[06:01:06] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 268 seconds)
[06:02:20] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[06:03:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[06:04:00] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[06:05:39] *** Joins: AlbertoP (~AlbertoP@user/albertop)
[06:06:12] *** Parts: AlbertoP (~AlbertoP@user/albertop) ()
[06:09:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:09:54] *** Joins: Lando-HoloNet (~LandoC@user/lando-spacepimp)
[06:11:31] *** Quits: kenoba (~kenoba@user/kenoba) (Read error: Connection reset by peer)
[06:11:55] *** Joins: kenoba (~kenoba@user/kenoba)
[06:12:04] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[06:12:15] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[06:13:23] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:13:26] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 268 seconds)
[06:13:46] *** Quits: emerent (~quassel@p200300cd57058c81ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 255 seconds)
[06:14:20] *** Joins: emerent (~quassel@p200300cd57058c7cba27ebfffed28a59.dip0.t-ipconnect.de)
[06:15:29] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[06:15:40] *** Joins: heco (~redrum@user/redrum88)
[06:16:18] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[06:18:53] *** Joins: HaMsTeRs (~mx@14-0-230-253.static.pccw-hkt.com)
[06:22:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[06:23:45] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:25:30] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[06:26:02] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:26:16] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:19bc:45bb:c530:25ad) (Read error: Connection reset by peer)
[06:27:09] *** Joins: winny (~winny@user/winny)
[06:27:54] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[06:27:58] <winny> is there a pypi package to get summaries of english texts?  I found one called get-summary, but the github no longer exists, not sure if there is a better option out there?
[06:28:53] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:65b5:1d12:3300:5dd4)
[06:29:23] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:65b5:1d12:3300:5dd4) (Read error: Connection reset by peer)
[06:36:25] *** Joins: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu)
[06:37:23] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[06:39:58] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[06:42:58] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[06:43:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[06:43:05] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 255 seconds)
[06:43:48] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 255 seconds)
[06:43:48] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[06:44:18] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[06:44:30] *** Quits: Lando-HoloNet (~LandoC@user/lando-spacepimp) (Read error: Connection reset by peer)
[06:44:47] *** Quits: richrd (~wavi@thelounge/maintainer/wavi) (Quit: Ping timeout (120 seconds))
[06:45:06] *** Joins: richrd (~wavi@thelounge/maintainer/wavi)
[06:46:13] *** Joins: Jefren3 (~Jefren@208.104.190.60)
[06:47:04] *** Quits: Jefren2 (~Jefren@70.35.67.220) (Ping timeout: 252 seconds)
[06:49:08] *** Joins: emika1 (~emika@185.207.249.104)
[06:49:13] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[06:52:34] *** Quits: emika (~emika@83.136.182.22) (Ping timeout: 252 seconds)
[06:52:34] *** emika1 is now known as emika
[06:54:05] *** Joins: sydbarret (~anton@static-186-121-195-51.acelerate.net)
[06:55:50] <sydbarret> i created a stripe subscription using api. how do I automate montly email invoices now?
[06:56:19] *** Joins: adamts (~Adam@user/mysteryblokhed)
[06:56:27] <HaMsTeRs> cronjob ?
[06:56:31] <HaMsTeRs> taskscheduler
[06:56:37] <Roey> Eating too much cake is the sin of gluttony. But eating too much pie is okay, because the sin of pi is always zero.
[06:56:48] <HaMsTeRs> powerautomate
[06:58:18] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:59:03] <domhnall> sydbarret: https://support.stripe.com/topics/billing
[06:59:03] *** Joins: ionface (~ionface@user/ionface)
[07:00:16] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (Ping timeout: 252 seconds)
[07:02:52] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[07:02:59] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[07:03:35] <sydbarret> seems its only a setting https://stripe.com/docs/invoicing/sending#dunning
[07:04:10] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:04:10] *** FinnElija is now known as Guest222
[07:04:10] *** finn_elija is now known as FinnElija
[07:04:54] *** Joins: syb0rg (~syb0rg@184.170.242.152)
[07:05:03] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[07:05:18] *** Joins: c10l (~c10l@89.34.167.207)
[07:05:38] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[07:06:15] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[07:07:12] *** Quits: goepsilongo (~chacho@2603-7000-ab00-62ed-0000-0000-0000-0bd0.res6.spectrum.com) (Quit: Konversation terminated!)
[07:07:12] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 255 seconds)
[07:07:14] *** Quits: Guest222 (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[07:09:26] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[07:10:17] <MightyMu> Roey: hah
[07:10:25] *** Joins: tg (~tg@rockylinux/infra/tg)
[07:10:49] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:11:32] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[07:11:54] <Roey> :)
[07:12:04] <Roey> also, mightymu, https://www.humoar.com/all-food-must-go-to-the-lab-for-testing/
[07:14:26] <dale> Bit off-topic, perhaps, but does anyone have an example of documenting something like a data format in Sphinx?  I've actually got a pile of fairly shallow JSON messages but I'd look at something like a CSV file format or a database format in Sphinx too.  I'm having trouble making it look nice.
[07:15:20] <MightyMu> that's a hapy lab
[07:16:15] *** Quits: floatingpoint (~floatingp@net-2-36-142-160.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[07:19:37] *** Quits: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com) (Quit: ZNC - http://znc.sourceforge.net)
[07:19:44] <SnoopJ> dale, what looks not-nice about throwing your messages into a formatted code block?
[07:20:40] <dale> SnoopJ: I was looking for something more like a list of the fields, their data types, and a description of their meaning, constraints, etc.  Formatted code blocks would be aces for examples, of course.
[07:21:46] *** Joins: i0e (~is0ke3@user/is0ke3)
[07:21:49] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[07:24:54] *** Quits: deivislk (~deivislk@189.7.117.212) (Quit: deivislk)
[07:25:01] <dale> Maybe I'm just using the wrong tool for the job (Sphinx).
[07:25:05] <SnoopJ> dale, sorry, that sounds more like the *content* of the documentation than the "make it look nice" part. Are you tackling both of those tasks, or just one?
[07:25:31] <dale> SnoopJ: I do have to write the content and I would also like to make it look nice.
[07:25:35] <lantech19446> would python be a good option to write something that checks periodically to make sure a website is up and texts me or emails me if it's down?
[07:26:05] <dale> lantech19446: Sure.  Be advised there are also various services for this, though I'm not sure any of them still have free tiers, if that's a concern.
[07:26:31] <lantech19446> yea they all function off snmp which is a royal pain to setup so i didn't want to go that route
[07:26:49] <dale> lantech19446: Ooh, no, there should definitely be others that don't need SNMP.
[07:27:10] <dale> ISTR there was some service called Pingdom, for example.  Dunno if they're still around, but they would just hit your top page and send you an email if your site returned something other than 200.
[07:27:17] <lantech19446> hmm ok well i'll definitely check before i embark on learning an entire language to reinvent the wheel
[07:27:37] <SnoopJ> dale, for data that can be described by jsonschema, this extension looks nice: https://sphinx-jsonschema.readthedocs.io/en/latest/directive.html#an-example
[07:28:05] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[07:28:12] *** Joins: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com)
[07:28:17] <dale> SnoopJ: Yeah, I guess it's a matter of taste.  That looks ugly to me, personally.
[07:28:48] <dale> I may just say "eff it" and model these messages as Python objects with attributes.  That's the look I'm going for.
[07:28:50] *** Joins: pnoud (~pnoud@user/pnoud)
[07:29:10] <SnoopJ> I guess I'm not really sure what to recommend since most of what I'm hearing is what you *don't* want
[07:29:55] <dale> SnoopJ: Right, I don't know what exactly I want, which is why I was hoping someone had done this before so I could look at examples to inspire me for what it should look like.  I'm far from a graphic designer, so I'm very shy about designing these things.
[07:30:26] <SnoopJ> dale, well, the appearance is mostly a matter of the theme. The hard part is getting the data into the document :)
[07:30:57] <SnoopJ> Redoc produces gorgeous output, if your documentation fit inside the bounds of OpenAPI
[07:30:57] <dale> SnoopJ: I actually have the data in a YAML file, but I need to know what kind of rST/Markdown to generate.
[07:31:27] <SnoopJ> dale, is the YAML file of your own creation, or some format?
[07:32:16] <dale> SnoopJ: Hm, stuff like https://api-reference.rebilly.com/tag/Customers#operation/GetCustomerCollection is pretty good looking.  (That's Redoc.)
[07:32:34] <dale> SnoopJ: It's JSON Schema in YAML with a few extra properties for my use.
[07:33:09] <SnoopJ> The problem with OpenAPI is that it's pretty web specific :/
[07:33:59] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[07:34:24] *** Joins: jazzy2 (~jaziz@2600:380:c07e:8a82:64d5:2b35:3886:56b2)
[07:34:33] <dale> Yeah.  There's a Sphinx HTTP domain that is kind of interesting but it really wants to do requests and responses, and I don't have those.
[07:35:18] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:35:31] *** Quits: alexyov (~alexyov@79.124.0.2) (Ping timeout: 268 seconds)
[07:35:52] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[07:35:54] *** Quits: jazzy (~jaziz@2600:380:c07e:8a82:1dd8:59e9:1c54:8960) (Ping timeout: 240 seconds)
[07:36:31] <dale> Also, I think something is wrong with me that I can *never* find what I want in the Sphinx documentation.  Like, I can't find where the Python domain is discussed now.
[07:37:07] <dale> Oh, it's just in "Domains".  All the domains are in one document.  OK.
[07:37:10] <SnoopJ> It's best to think of Sphinx as what it is: an engine for understanding the structure of your documentation and organizing it appropriately. How it *looks* is the theme's problem >:)
[07:37:50] <dale> SnoopJ: I think that's well put.
[07:37:52] *** Joins: mustang (~mustang@c-67-176-208-145.hsd1.il.comcast.net)
[07:38:46] <dale> Though at this point I'm about to start writing stuff like "* **fooField** (``int``): blah blah blah" at which point I think I'm really doing formatting rather than strictly content.
[07:41:22] <SnoopJ> yea, all that said, it does seem like this is an underserved need
[07:42:24] <dale> Given how many people are surely having to do things like sling CSV files around, I agree. :)
[07:42:38] *** Quits: paravida (~myChateau@user/paravida) (Remote host closed the connection)
[07:44:00] *** Quits: adamts (~Adam@user/mysteryblokhed) (Quit: That's all Folks!)
[07:48:33] <SnoopJ> looks like styling is something the author of that extension is interested in: https://github.com/lnoor/sphinx-jsonschema/issues/55#issuecomment-791910526
[07:50:12] <dale> I actually can't quite understand how that extension's code even works.  I think I, uh, hadn't found the correct part of the Sphinx developer documentation, so I gave up after a bit.
[07:50:42] <syb0rg> I just finished the tutorial. Are there particular modules outside the standard library that *every* python programmer should know about? And is there another good tutorial/learning source to continue with?
[07:50:46] <dale> I don't actually envy the position of anyone trying to write a JSON Schema documentation generator, because schemas can be so complex.
[07:51:33] <circuitbone> I use mockaroo for the data
[07:52:40] <dale> syb0rg: IMHO you can get a *lot* of mileage out of what's in the standard library.  You might get better answers if you can elaborate on what you want to do with Python next.
[07:54:09] *** Parts: sydbarret (~anton@static-186-121-195-51.acelerate.net) (Closing Window)
[07:54:11] <SnoopJ> dale, I'm no Sphinx wizard, but if I understand it right, __init__.py defines the directive itself. Sphinx calls into that as needed and you end up here: https://github.com/lnoor/sphinx-jsonschema/blob/master/sphinx-jsonschema/__init__.py#L55-L57 which takes you into the formatter, which looks like it walks the schema recursively, depth-first.
[07:54:19] <dale> (If you're in the metric system, do you get meterage or kilometerage or something?)
[07:55:15] <dale> SnoopJ: Oh, my bad, I must have been looking at the code for the HTTP domain instead: https://github.com/sphinx-contrib/httpdomain/blob/main/sphinxcontrib/httpdomain.py
[07:55:23] *** Joins: alexyov (~alexyov@79.124.0.2)
[07:55:29] <dale> SnoopJ: That jsonschema generator actually looks a bit more comprehensible.
[07:56:29] <SnoopJ> dale, this looks substantially more structured, but I'm not sure that's really what you want, especially for the broader task you're interested in
[07:57:03] *** Joins: bigRoo (~user@131.236.53.209)
[07:58:42] <dale> Maybe the list of Sphinx examples could use some curation.
[07:58:56] <dale> I'm just going to emit :field: syntax and make some stuff up.
[08:00:06] <syb0rg> dale: Yeah, for sure the standard library seems very capable. I am just trying to make sure I am set with general python knowledge before I start working on projects to cement that knowledge
[08:01:12] <syb0rg> Definitely next up is checking out the modules in the standard library one by one
[08:01:20] <dale> syb0rg: I'd probably start doing something with the standard library, and if you feel you're having to fight with the API too much, or write too much code for what should be a solved problem, I'd google to see if there's a third-party library that can help you out (and/or ask here).
[08:01:39] <syb0rg> Fair :-)
[08:02:39] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[08:04:36] <dale> Of course, this presupposes you've got some programming experience in other languages, otherwise you might not have a good idea of what should be hard and what should be easy. :)
[08:05:46] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 240 seconds)
[08:05:48] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 258 seconds)
[08:08:09] <syb0rg> Yeah, I have some experience with a couple other languages. I've done too much "coding in a vacuum" being self-taught though, so I'm working on developing better coding practices. Thus my interest in making sure I have read everything I should read before I start developing habits in Python, lol
[08:10:30] *** Quits: pan (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:11:36] *** Joins: eyepeetee (~aa@075-135-186-198.res.spectrum.com)
[08:11:44] *** Joins: pan (~quassel@pankid.club)
[08:12:18] <eyepeetee> hi, is there some trick for minimizing the amount of space various objects take up in memory, like lists, dicts, strings?
[08:12:39] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[08:14:08] <eyepeetee> for example if i have a string like '1 2 3 4 5', does [1,2,3,4,5] take up less space in memory?
[08:14:10] <eyepeetee> or vice versa?
[08:14:16] <eyepeetee> or it is the same?
[08:14:28] <SnoopJ> eyepeetee, "don't duplicate data" is useful universal rule. Strings you get basically for free.
[08:14:41] <eyepeetee> i would assume list would be less, since each int i'd assume is 2 bytes, and that string is 9
[08:15:22] <dale> I would *guess* the list is taking up something like 5 * sizeof(void *) plus overhead for the list struct.
[08:15:41] <eyepeetee> SnoopJ: thank you - i've optimized things procedurally as much as possible for this process short of parsing the data in chunks, just wondering if there's a way to know how much space different objects will take up in memory
[08:15:48] <eyepeetee> that could be tricked out to hold more data
[08:15:55] <Repiphany> I smell premature optimization
[08:15:57] <dale> Based on the idea that the small integers are probably singleton objects.  But maybe a list of ints has a nicer representation in Python, in which case it's like sizeof(struct list) + 5*sizeof(int)?
[08:16:03] <SnoopJ> dale, yea, that's pretty much how CPython stores them.
[08:16:16] *** Joins: derelict (~derelict@user/derelict)
[08:16:20] *** Quits: pan (~quassel@pankid.club) (Client Quit)
[08:16:20] <SnoopJ> and yes, small integers (-5 through 256) are interned by the compiler by default
[08:16:44] <Repiphany> You can estimate how much space an object takes up with len(pickle.dumps(obj))
[08:16:47] <SnoopJ> it will also do some interning based on your source files
[08:16:58] <dale> There's also sys.getsizeof
[08:16:59] <SnoopJ> Repiphany, that is not a very useful estimate
[08:17:18] *** Quits: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com) (Remote host closed the connection)
[08:17:37] *** Joins: pan (~quassel@pankid.club)
[08:17:52] <SnoopJ> dale, you have to be careful with that one, because it's the size of the underlying CPython struct
[08:18:00] <SnoopJ> i.e. it's implementation trivia
[08:18:11] <dale> SnoopJ: Agreed.
[08:18:35] <dale> SnoopJ: Though I was hoping that, if you're using it, you are at the point where you're needing to worry about implementation details. :)
[08:18:38] <Repiphany> About as useful as trying to optimize between '1 2 3 4 5' and [1,2,3,4,5]
[08:18:42] <SnoopJ> eyepeetee, there aren't really a lot of "tricks" to it. When you start worrying about it, it's usually time to profile it.
[08:20:16] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-0c88-90bf-c374-a374.res6.spectrum.com)
[08:20:53] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[08:24:35] <eyepeetee> Repiphany, dale, SnoopJ, thank you very much for the advice. my plan is to rework this to parse these data files i'm working with in chunks.
[08:24:37] <eyepeetee> this form of optimization is certainly less than ideal, but a temporary measure to make sure things keep churning
[08:25:02] <SnoopJ> eyepeetee, on the contrary, not holding more in memory than you need is often a great way to bring the memory burden down.
[08:25:12] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:26:25] <eyepeetee> SnoopJ: that's what i'm currently doing right now - clearing the memory of parsed records as they are used, and removing things that are never used, prematurely
[08:27:32] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[08:27:33] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[08:29:43] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[08:30:46] *** Joins: pnoud (~pnoud@user/pnoud)
[08:32:08] <u4t> async hurts my head
[08:34:07] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[08:34:29] *** Joins: r3m (~launch@user/r3m)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:10] *** Joins: upsala (~zcb@185.213.155.160)
[08:36:36] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:39:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:40:04] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Remote host closed the connection)
[08:41:42] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:894c:5001:bada:3aea) (Ping timeout: 255 seconds)
[08:42:12] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Ping timeout: 245 seconds)
[08:42:13] *** Quits: kenoba (~kenoba@user/kenoba) (Ping timeout: 258 seconds)
[08:43:07] <PanamaCity3003> u4t: learn 2 love it
[08:43:09] *** Quits: Strom (strom@fedora/strom) ()
[08:43:21] <PanamaCity3003> its rly gr8
[08:43:57] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[08:44:01] <u4t> yah i'm sure it is but i'm struggling to learn how to use it
[08:44:27] <PanamaCity3003> u just go bopity boo, await u()
[08:44:40] *** Joins: Strom (strom@fedora/strom)
[08:45:41] <u4t> but i don't want blocking code :P
[08:46:12] <u4t> i want an async callback thingy
[08:46:51] <PanamaCity3003> it doesn't actually block the thread from working on other things
[08:46:55] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[08:47:31] <PanamaCity3003> a, b, c = await asyncio.gather(get_a(), get_b(), get_c())  # 3 "blocking" things running at "once" !
[08:47:52] <u4t> but the await itself is blocking
[08:48:10] <gimzmoe> I'm able to run mpi4py on a single host, but when I specify multiple hosts in my -hostfile I get an odd orte error.  I feel like there should be some setup on these otherwise unwitting hosts.
[08:48:37] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[08:49:01] *** Joins: r3m (~launch@user/r3m)
[08:49:08] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:50:08] *** Quits: r3m (~launch@user/r3m) (Client Quit)
[08:50:27] *** Joins: r3m (~launch@user/r3m)
[08:50:34] <PanamaCity3003> u4t: not sure where you are in your understanding, and this isn't Python, but it's async at a high level, and this guy is a really charismatic speaker, talking about "callback hell": https://www.youtube.com/watch?v=yJxFPoxqzWE
[08:52:28] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:52:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[08:53:03] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[08:53:09] *** Joins: wyclif (~wyclif@user/wyclif)
[08:57:38] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 255 seconds)
[08:59:10] *** Joins: floatingpoint (~floatingp@net-2-36-142-160.cust.vodafonedsl.it)
[09:00:58] *** Quits: HaMsTeRs (~mx@14-0-230-253.static.pccw-hkt.com) (Read error: Connection reset by peer)
[09:01:30] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 255 seconds)
[09:01:51] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 268 seconds)
[09:02:10] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[09:07:03] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[09:09:03] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[09:10:32] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 245 seconds)
[09:14:08] *** Joins: m4v (~znc@ubuntu/member/m4v)
[09:14:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[09:16:52] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:17:40] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:17:49] *** Quits: asix (~Anders@user/asix) (Ping timeout: 265 seconds)
[09:17:56] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:19:32] *** Joins: asix (~Anders@user/asix)
[09:22:49] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Ping timeout: 268 seconds)
[09:23:33] *** Quits: eyepeetee (~aa@075-135-186-198.res.spectrum.com) (Ping timeout: 255 seconds)
[09:24:03] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[09:28:22] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[09:29:14] *** Joins: stranac (~stranac@195.29.239.126)
[09:29:21] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[09:32:41] *** Quits: bninja (~bloodninj@user/bloodninja) (Ping timeout: 268 seconds)
[09:33:22] *** Quits: no_maam (~chat@gauss.datenzone.de) (Ping timeout: 246 seconds)
[09:33:58] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 258 seconds)
[09:38:03] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[09:38:05] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:38:24] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[09:39:48] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[09:43:10] *** Joins: bninja (~bloodninj@user/bloodninja)
[09:45:23] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:46:26] *** Quits: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net) (Quit: Lost terminal)
[09:47:20] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:47:23] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Ping timeout: 258 seconds)
[09:48:19] <BrenBarn> the await doesn't block "globally" it just means that particular task won't resume until that thing is done
[09:48:28] <BrenBarn> which means it can switch to other things until they have something they need to wait for
[09:49:33] *** Joins: no_maam (~chat@gauss.datenzone.de)
[09:52:02] *** Joins: HaMsTeRs (~mx@14-0-227-103.static.pccw-hkt.com)
[09:53:32] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:56:03] *** Joins: PiRATA (~weechat@user/pirata)
[09:56:50] *** Quits: gravy (~gravy@220-245-7-193.static.tpgi.com.au) (Read error: Connection reset by peer)
[09:57:15] *** Joins: gravy (~gravy@220-245-7-193.static.tpgi.com.au)
[09:58:32] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[10:00:03] *** Quits: ckdCreations (~ckdCreati@147.55.133.129) (Read error: Connection reset by peer)
[10:00:40] *** Quits: tims (~tims@220-245-254-151.static.tpgi.com.au) (Ping timeout: 252 seconds)
[10:01:18] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[10:01:24] *** Quits: dmat (~noone@user/dmat) (Ping timeout: 252 seconds)
[10:01:42] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[10:01:45] *** Joins: tims (~tims@220-245-254-151.static.tpgi.com.au)
[10:02:15] *** Quits: faceface (~faceface@user/faceface) (Remote host closed the connection)
[10:03:00] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Remote host closed the connection)
[10:03:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[10:03:34] *** Joins: eyepeetee (~aa@075-135-186-198.res.spectrum.com)
[10:03:42] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[10:04:00] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:04:11] *** Joins: wyclif (~wyclif@user/wyclif)
[10:04:28] *** Joins: dvx (~dvx@185.63.97.64)
[10:06:25] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[10:06:33] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 258 seconds)
[10:07:36] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 265 seconds)
[10:09:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[10:09:37] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Ping timeout: 258 seconds)
[10:09:38] *** Joins: bilb_ono_ (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[10:09:40] *** Joins: wyclif (~wyclif@user/wyclif)
[10:09:54] *** Joins: andrews (~andrews@user/andrews)
[10:12:59] <andrews> I like programming leetcode in python
[10:13:10] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:13:18] <andrews> anyhow gtg
[10:13:20] *** Quits: andrews (~andrews@user/andrews) (Quit: Leaving)
[10:13:23] *** Quits: cer-0 (~cer-0@189.228.170.154) (Ping timeout: 268 seconds)
[10:14:05] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[10:14:32] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[10:14:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[10:14:40] *** Joins: m4v (~znc@ubuntu/member/m4v)
[10:15:08] *** Joins: wyclif (~wyclif@user/wyclif)
[10:17:03] *** Joins: frost (~frost@59.71.241.179)
[10:18:25] *** Joins: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de)
[10:24:21] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[10:29:15] *** Joins: sandeepk (~sandeepk@223.130.30.221)
[10:31:27] *** Joins: djapo (~archangel@user/djapo)
[10:33:45] *** Joins: kosh (~kosh@user/kosh)
[10:34:43] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[10:35:08] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-0c88-90bf-c374-a374.res6.spectrum.com) (Quit: jarthur)
[10:36:04] *** Joins: palasso (~palasso@user/palasso)
[10:36:42] *** Quits: zbr (~zbr@h.sbarnea.com) (Quit: The Lounge - https://thelounge.chat)
[10:38:03] *** Quits: AlanMD_ (~AlanMD@193.105.140.131) (Ping timeout: 265 seconds)
[10:39:02] *** Joins: zbr (~zbr@h.sbarnea.com)
[10:39:11] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:39:17] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[10:39:17] *** Quits: HaMsTeRs (~mx@14-0-227-103.static.pccw-hkt.com) (Read error: Connection reset by peer)
[10:41:15] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[10:41:17] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[10:43:01] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 246 seconds)
[10:45:54] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 255 seconds)
[10:45:54] *** Quits: Derailed_ (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[10:46:18] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:45] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:46:50] *** Joins: seednode (~seednode@user/seednode)
[10:47:21] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:48:01] *** Quits: bilb_ono_ (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono_)
[10:48:03] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:48:32] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[10:48:32] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[10:48:40] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:52:56] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[10:53:03] *** Joins: arischow (~arischow@103.97.201.36)
[10:54:11] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 255 seconds)
[10:54:45] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:54:55] *** Quits: arischow (~arischow@103.97.201.36) (Client Quit)
[10:55:42] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[10:55:46] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[10:56:15] *** Quits: bigRoo (~user@131.236.53.209) (Remote host closed the connection)
[10:56:18] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[10:56:31] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:56:36] <graingert> u4t: the trio tutorial is pretty great https://trio.readthedocs.io/en/stable/tutorial.html
[10:57:08] *** Joins: arischow (~arischow@103.97.201.36)
[10:59:09] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:59:38] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Ping timeout: 268 seconds)
[11:03:54] *** Joins: pnoud (~pnoud@user/pnoud)
[11:04:05] *** Joins: gusto (~Augustus@2620:149:e0:6002::3b)
[11:07:02] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[11:07:16] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[11:10:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:14:42] *** Quits: emika (~emika@185.207.249.104) (Ping timeout: 255 seconds)
[11:15:10] *** Joins: emika (~emika@185.207.249.1)
[11:17:29] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:17:31] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Remote host closed the connection)
[11:18:12] *** Joins: logithack (~logithack@p200300cfbf1ab100939dd759fe5c4fd5.dip0.t-ipconnect.de)
[11:21:54] *** Quits: audiocat (~audio@2603-8081-1800-00ad-54b0-eacb-9c51-4be4.res6.spectrum.com) (Ping timeout: 255 seconds)
[11:26:01] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[11:29:50] *** Joins: rendar (~rendar@user/rendar)
[11:31:12] *** Joins: fivegruel (~fivegruel@hsi-kbw-095-208-248-149.hsi5.kabel-badenwuerttemberg.de)
[11:31:35] *** Joins: greedom (~greedom@i577bc6f7.versanet.de)
[11:31:39] *** Quits: arischow (~arischow@103.97.201.36) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:34:27] *** Quits: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de) (Quit: Leaving.)
[11:34:47] *** Joins: arischow (~arischow@103.97.201.36)
[11:34:54] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[11:35:01] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[11:36:34] *** Joins: Hackerpcs (~user@user/hackerpcs)
[11:38:44] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[11:39:39] *** Joins: rsrx (~rsrx@103.225.150.81)
[11:40:07] <cvmn> does stderr.write block when terminal running python script closes?
[11:40:17] *** Joins: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs)
[11:40:34] *** Quits: greedom (~greedom@i577bc6f7.versanet.de) (Remote host closed the connection)
[11:41:04] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:544f:ff3e:f177:8d6c) (Quit: Leaving)
[11:41:37] *** Joins: y1n (~y1n@84-115-64-255.wifi.dynamic.surfer.at)
[11:42:53] *** Joins: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10)
[11:42:54] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[11:43:12] <cvmn> how does python terminate app/script if i close the terminal?
[11:44:05] *** Joins: Hackerpcs (~user@user/hackerpcs)
[11:44:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[11:45:54] *** Quits: frost (~frost@59.71.241.179) (Ping timeout: 252 seconds)
[11:46:39] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.2)
[11:47:01] *** Joins: frost (~frost@59.71.241.179)
[11:47:05] *** Joins: doev (~doev@p549d761c.dip0.t-ipconnect.de)
[11:48:56] <graingert> cvmn: pretty sure it's done with signals
[11:49:05] <cvmn> which signal?
[11:49:21] *** Joins: szymon (~ugh@staticline-31-183-187-232.toya.net.pl)
[11:49:40] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 258 seconds)
[11:49:40] <graingert> cvmn: https://docs.python.org/3/library/signal.html#signal.SIGHUP
[11:49:58] *** Joins: cqi (~cqi@2408:8207:252f:75a0:8cf2:f40a:73a7:dfd6)
[11:50:34] <cvmn> does atexit catch it?  i'm surprised my script is not doing atexit things by terminal closing.
[11:50:42] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[11:52:17] <mdk> cvmn: maybe a broken pipe ?
[11:53:08] <cvmn> it's this code (~800 lines):  https://github.com/al-caveman/nsapass/tree/dev
[11:53:09] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[11:54:55] *** Joins: chele (~chele@user/chele)
[12:00:20] <cvmn> i already have atexit, but it's not working when i close the terminal/window that's running my script by window manager.
[12:01:42] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[12:01:55] *** Quits: petaflot (~root@lutolf.vserver.nimag.net) (Ping timeout: 268 seconds)
[12:02:30] *** Joins: petaflot (~root@lutolf.vserver.nimag.net)
[12:04:04] *** Joins: anandprabhu (~anandprab@45.86.201.3)
[12:05:06] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[12:05:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[12:06:48] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[12:10:13] *** Joins: mickey (~user@user/mickey)
[12:10:18] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[12:10:52] *** Quits: frdy (~mcfrdy@user/mcfrdy) (Ping timeout: 246 seconds)
[12:11:27] <graingert> cvmn: I think by default there's no signal handler set
[12:12:07] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[12:12:55] *** Joins: mickey (~user@user/mickey)
[12:13:44] *** Joins: HaMsTeRs (~mx@14-0-227-103.static.pccw-hkt.com)
[12:15:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:15:31] <sharperguy_> Anyone know how in tkinter you can delete all entires in a menu? There is menu.delete(startindex, stopindex), but what if you don't know how many indexes should be in the menu?
[12:16:52] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Quit: nurupo.ga)
[12:17:16] *** Joins: Gerula_ (~Gerula@user/gerula)
[12:17:16] *** Quits: Gerula (~Gerula@user/gerula) (Killed (copper.libera.chat (Nickname regained by services)))
[12:17:16] *** Gerula_ is now known as Gerula
[12:17:22] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[12:18:05] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Quit: WeeChat 2.8)
[12:20:04] *** Joins: zeenk (~zeenk@2a02:2f04:a008:d600:18f2:3421:bac6:8f38)
[12:20:51] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 255 seconds)
[12:21:25] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:23:26] *** Joins: wyclif (~wyclif@user/wyclif)
[12:25:32] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[12:26:07] *** Joins: Atque (~Atque@user/atque)
[12:26:18] <sharperguy_> to answer my own question: menu.delete(0, tk.END)
[12:27:45] *** Joins: neibo (~neibo@86.127.254.176)
[12:28:25] *** Joins: Julian (~tos9@python/site-packages/Julian)
[12:28:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[12:28:59] *** Joins: wyclif (~wyclif@user/wyclif)
[12:29:14] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[12:30:44] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[12:32:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 258 seconds)
[12:33:00] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:33:41] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[12:33:52] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[12:34:02] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[12:34:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[12:34:44] *** Joins: wyclif (~wyclif@user/wyclif)
[12:34:53] *** Quits: daidoji (~daidoji@104-52-250-5.lightspeed.gnvlsc.sbcglobal.net) (Ping timeout: 268 seconds)
[12:36:36] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:44] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[12:37:50] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[12:37:57] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 255 seconds)
[12:39:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[12:39:43] *** Jigsy` is now known as Jigsy
[12:40:04] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:40:06] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[12:40:15] *** Joins: wyclif (~wyclif@user/wyclif)
[12:43:03] *** Joins: shad (~shad@user/shad)
[12:43:06] *** Joins: pnoud (~pnoud@user/pnoud)
[12:45:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[12:45:42] *** Quits: y1n (~y1n@84-115-64-255.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[12:45:47] *** Quits: anandprabhu (~anandprab@45.86.201.3) (Ping timeout: 255 seconds)
[12:46:26] *** Joins: y1n (~y1n@84-115-64-203.wifi.dynamic.surfer.at)
[12:47:46] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[12:48:13] *** Joins: wyclif (~wyclif@user/wyclif)
[12:48:54] *** Quits: lavadonut (~lavadonut@user/lavadonut) (Ping timeout: 276 seconds)
[12:49:48] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[12:50:52] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:53:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[12:53:52] *** Quits: y1n (~y1n@84-115-64-203.wifi.dynamic.surfer.at) (Ping timeout: 245 seconds)
[12:54:59] *** Joins: wyclif (~wyclif@user/wyclif)
[12:56:31] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:56:48] *** Quits: nirix (uid48447@id-48447.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[12:58:38] *** Joins: y1n (~y1n@84-115-64-196.wifi.dynamic.surfer.at)
[12:59:39] *** Joins: newtoliberachat (~xyz@49.206.29.212)
[13:00:03] *** Joins: plissken (~plissken@158.62.156.168)
[13:01:09] <plissken> is it possible to get a small amount of input from a user under X in text mode?  I have tried opening xterm as a subprocess, but xterm doesn't seem to capture any output
[13:01:48] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:01:50] *** Joins: ambv (~ambv@c138-59.icpnet.pl)
[13:02:14] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[13:02:47] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[13:03:47] *** Quits: rio (~rio@2601:345:4203:41c0:1b83:5855:3366:1bff) (Ping timeout: 255 seconds)
[13:04:01] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Client Quit)
[13:04:17] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Ping timeout: 245 seconds)
[13:04:52] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[13:06:12] *** Quits: ambv (~ambv@c138-59.icpnet.pl) (Ping timeout: 256 seconds)
[13:07:02] *** Quits: pkapp (~pkapp@c-75-74-40-214.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[13:08:16] *** Joins: ambv (~ambv@c138-59.icpnet.pl)
[13:08:40] *** Joins: nyah (~nyah@90.221.186.180)
[13:09:15] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[13:10:27] <gcbirzan> How do I remove rows that have NaNs from a dataframe?
[13:10:43] <Julian> .drop_na() IIRC
[13:10:52] <Julian> which you can do columnwise or rowwise (again IIRC)
[13:12:09] <gcbirzan> dropna(), thanks!
[13:12:30] *** jazzy2 is now known as jazzy
[13:13:14] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[13:17:39] *** Joins: rajkohaxor (~rajkosto@8.40.111.71)
[13:18:40] *** Quits: Elon_Satoshi (~elonsatos@46.102.153.243) (Ping timeout: 252 seconds)
[13:18:58] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[13:20:28] *** Joins: Elon_Satoshi (~elonsatos@46.102.153.243)
[13:20:42] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 255 seconds)
[13:20:54] *** Quits: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs) (Ping timeout: 258 seconds)
[13:21:39] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:21:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[13:25:14] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[13:25:52] *** Quits: mustang (~mustang@c-67-176-208-145.hsd1.il.comcast.net) (Quit: leaving)
[13:29:03] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:29:24] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[13:30:00] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::9885)
[13:33:27] *** Joins: varaindemian (~varaindem@86.124.78.162)
[13:35:30] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[13:36:30] *** Quits: Widdershins (widders@ps.mad.cash) (Quit: 🤔)
[13:36:40] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[13:38:50] *** Joins: pnoud (~pnoud@user/pnoud)
[13:40:13] *** Joins: bitrot (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs)
[13:41:42] *** Quits: fivegruel (~fivegruel@hsi-kbw-095-208-248-149.hsi5.kabel-badenwuerttemberg.de) (Quit: leaving)
[13:43:30] *** Joins: goldfish (~goldfish@user/goldfish)
[13:43:39] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[13:43:54] *** Quits: rajkohaxor (~rajkosto@8.40.111.71) (Ping timeout: 258 seconds)
[13:45:25] <deniska> plissken: you may want to take a look at zenity
[13:46:08] <plissken> deniska: I am using zenity now, but I want to eliminate the dependency.  I also want to understand the root of the problem better.
[13:46:12] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 258 seconds)
[13:46:56] <deniska> plissken: well, there's tkinter
[13:47:24] <deniska> which is kinda built into python, but then many distros chop it in the separate package
[13:47:32] <plissken> yes; that is what I was thinking also
[13:47:50] <plissken> I am also looking into pinentry
[13:48:07] <plissken> but I would really kind of like another way
[13:48:30] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:48:51] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[13:49:44] <jor> you gonna need 'a dependency', which ever way you find :/
[13:49:49] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[13:50:28] <plissken> well tkinter is built in
[13:50:56] *** Joins: Widdershins (widders@ps.mad.cash)
[13:51:07] *** Lord_of_Life_ is now known as Lord_of_Life
[13:51:08] <plissken> I guess I'm hung up on the fact that I would really just like to use Python's input() function and find a way to just run that in X as needed.
[13:51:16] <jor> well, as stated earlier, some distros chop it off
[13:51:56] <jor> hmm, well, the you really need to start a terminal... xterm would be the most common
[13:52:27] <plissken> jor: that's what I hoped would work.  But xterm doesn't seem to return any data.
[13:53:02] <jor> plissken: no, you need another transport. A pipe would be my first idea
[13:54:50] *** Quits: ttkap (~ttkap@user/ttkap) (Quit: WeeChat 3.2)
[13:54:55] <plissken> jor: I am fuzzy on the difference between pipes & sockets
[13:56:10] *** Joins: upsala (~zcb@185.213.155.160)
[13:56:18] <jor> plissken: pipe easier to implement in this cause, I would think, it's basically just a special type of file you create in the main process. And write to in the process under the xterm
[13:56:38] <jor> socket would take a bit more boilerplate code to get to work I would think
[13:56:58] *** Quits: rsrx (~rsrx@103.225.150.81) (Read error: Connection reset by peer)
[13:57:16] *** Joins: rsrx (~rsrx@103.225.150.81)
[13:57:26] *** Joins: pnoud (~pnoud@user/pnoud)
[13:57:46] <deniska> fwiw xterm is not currently installed on my system :)
[13:58:16] <deniska> And I'm not sure how displaying a terminal is better than running input()… presumably while being in a terminal
[13:58:26] <jor> yeah, you need to add a big list you loop over to try. probably {a-z}term ;)
[13:58:40] *** Joins: fivegruel (~fivegruel@HSI-KBW-095-208-248-149.hsi5.kabel-badenwuerttemberg.de)
[13:58:50] <plissken> deniska: the issue is when we are *not* in a terminal.
[13:59:00] <plissken> specifically, executing via a hotkey
[13:59:11] <jor> I'm kinda presuming the main process is a background/daemon kind of application here
[13:59:38] <deniska> plissken: for personal stuff I often hook up to clipboard as input/output
[14:00:09] <plissken> me too but for this one I have been reading from zenity and writing via xte
[14:00:20] <plissken> (when in X, which is the typical case)
[14:00:29] *** Quits: logithack (~logithack@p200300cfbf1ab100939dd759fe5c4fd5.dip0.t-ipconnect.de) (Quit: Leaving)
[14:00:59] *** Joins: iomari891 (~iomari891@105.112.138.38)
[14:02:37] *** Quits: y1n (~y1n@84-115-64-196.wifi.dynamic.surfer.at) (Ping timeout: 245 seconds)
[14:02:47] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[14:03:04] *** Joins: y1n (~y1n@84-115-64-196.wifi.dynamic.surfer.at)
[14:03:12] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[14:03:49] <plissken> thanks jor and deniska
[14:04:48] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:05:21] *** Joins: tspng (~tspng@2a02:168:a1a1:1:4c44:25bb:4ae3:4fe2)
[14:05:24] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 265 seconds)
[14:07:38] <jor> still, i'd go for tkinter option. suspect that's more reliable compared to depending on a terminal
[14:08:03] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 258 seconds)
[14:08:12] <plissken> I think I am coming around to that as well.
[14:08:23] *** Joins: ttkap (~ttkap@user/ttkap)
[14:10:46] <jor> at least as a start, use it as a fallback mechanism... then write the fancy openGL UI with all the fireworks ;p
[14:10:48] *** Joins: ZenixOwler (~zenix@118.69.128.37)
[14:10:48] *** Quits: traptrip (trip@brigaid.xs4all.nl) (Ping timeout: 276 seconds)
[14:11:24] <ZenixOwler> question, is function, classes and standard datatype functions the only type kind of object which have "__dict__" attribute by default ?
[14:11:54] <Julian> ZenixOwler: __dict__ is an implementation detail
[14:12:00] <Julian> No object is really guaranteed to have it in a portable way
[14:12:12] <Julian> (Avoid using or accessing it) -- what are you trying to do with it?
[14:12:17] <ZenixOwler> well if i declare a = 2, then how is there any case a will have it ?
[14:12:30] <ZenixOwler> Julian: just studying and researching about magic methods
[14:12:34] <ZenixOwler> i think that is what they are called
[14:12:47] <Julian> ZenixOwler: (__dict__ is an attribute technically, not a method)
[14:13:09] <ZenixOwler> awh right, not callable
[14:13:27] <ZenixOwler> that prefixing underscores always got me
[14:13:27] <Julian> But yeah I'd mostly ignore that one, and all you should know about it is it occasionally exists, and when it does, it contains the attributes mapping
[14:13:43] <deniska> ZenixOwler: if you want to write foo.__dict__, you can write vars(foo) instead, that way it's easier to sneak through code review
[14:13:43] *** Quits: szymon (~ugh@staticline-31-183-187-232.toya.net.pl) (Ping timeout: 246 seconds)
[14:14:01] <Julian> the only time you're even tempted into using it is when using things like __get__ or __getattr__ or __getattribute__.
[14:14:20] <ZenixOwler> deniska : well yes i do know about vars, just wanna know if there is any other kind of object or classes which possesses that bu defaulyt :P
[14:14:58] <deniska> ZenixOwler: anything with a type which doesn't define __slots__
[14:15:02] <Julian> ZenixOwler: Instances of classes that .. what deniska siad
[14:15:20] <Julian> But that's only true on CPython technically.
[14:15:47] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 255 seconds)
[14:16:41] <ZenixOwler> deniska: i tried to initilize a variable with value of 2 which is int tho, it doesn't have __slots__ and also doesn't have __dict__
[14:17:34] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[14:19:21] <deniska> ZenixOwler: types which are implemented directly in C don't have to have __slots__ to opt out of having __dict__
[14:20:52] <deniska> https://docs.python.org/3/reference/datamodel.html mentions __dict__ plenty of times, so I wouldn't treat it as an implementation detail
[14:22:21] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 255 seconds)
[14:25:05] <deniska> yeah, just checked micropython 1.8 port for DOS, an instance of a user defined class has __dict__ for sure :)
[14:25:24] *** Joins: fpetk (~thepetk@ipa18.10.tellas.gr)
[14:26:06] <caveman> does communicate(input=...) in subprocess  require input to be text?
[14:26:07] <PinealGlandOptic> Oh, someone still use DOS
[14:26:45] <deniska> caveman: it can be either text or bytes depending on some other options
[14:27:07] <caveman> what's the difference between text or bytes?
[14:27:31] <deniska> caveman: by text I mean instances of `str` type
[14:27:35] <PinealGlandOptic> caveman: text is an array of unicode symbols. which can be encoded in utf-16 (windows) or utf-8 (linux, web)
[14:27:49] <caveman> why would it matter?  its stdin to some other app.
[14:27:53] <PinealGlandOptic> caveman: bytestring is lower level of abstraction
[14:28:10] <PinealGlandOptic> caveman: it doesn't matter if you use only Latin characters
[14:28:11] <ZenixOwler> deniska: also about "implementation detail" what do you mean exactly ? Stackoverflow got it clarified but not sure if it fits in this case
[14:28:27] <caveman> PinealGlandOptic: it's a binary file.  so it will have all sorts of crazy things.  would it matter now?  how?
[14:29:05] <PinealGlandOptic> caveman: ah, no idea
[14:29:06] <PinealGlandOptic> sorry
[14:29:06] <deniska> ZenixOwler: it's kinda hard to tell what exactly "implementation detail" is given the lack of a "proper" specification
[14:29:43] <ZenixOwler> deniska: well in your earlier statement of "i wouldn't treat it as an implementation detial"
[14:29:53] <deniska> ZenixOwler: but say "some objects have __dict__ which contains attribute mappings for that object" I consider not to be an implementation detail, and "id() gives you a memory pointer of an object" to be an implementation detail
[14:30:18] <deniska> ZenixOwler: not being implementation detail I'd expect it to be present in other python implementations like pypy or micropython
[14:31:04] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:32:35] <caveman> will python change byte value of a variable if it's str or bytes?  or will it only affect how python, say, prints it with print function?
[14:32:40] <ZenixOwler> deniska: awh, so it is expected to be a feature being built to the core of cpython then
[14:32:45] *** Joins: pnoud (~pnoud@user/pnoud)
[14:32:55] *** Quits: plissken (~plissken@158.62.156.168) (Quit: Client closed)
[14:33:02] <deniska> ZenixOwler: basically "implementation detail" means a property of a specific system/compiler/interpreter etc which you can't rely on, because it can be different in another system or even another version of the same system
[14:33:29] <ZenixOwler> caveman: when you print it out, i assume python still convert things in the background to str, but when you print it out you will still see something very alike to bytes being represented
[14:33:40] <deniska> caveman: there's a nice read on this topic: https://nedbatchelder.com/text/unipain.html
[14:34:16] <ZenixOwler> deniska: ok got it
[14:34:19] <ZenixOwler> thk
[14:34:45] *** Quits: HaMsTeRs (~mx@14-0-227-103.static.pccw-hkt.com) (Read error: Connection reset by peer)
[14:35:57] <nedbat> caveman: if you say it is text, Python will try to decode the bytes into text. It sounds like that might fail in your case, so you should use bytes.
[14:36:38] <caveman> nedbat: if py decodes it into text, will it change the byte value?
[14:36:55] <nedbat> caveman: there won't be byte values any more, there will be unicode code points.
[14:36:59] <bjs> caveman: the `str` variable doesn't store bytes
[14:37:30] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[14:37:32] <caveman> nedbat: so each letter will be some multi byte variable (unless subset of ascii)?
[14:37:45] <nedbat> caveman: close enough, yes
[14:38:13] <caveman> what if i make the bytes encoded as ascii.  will it be identical to original bytes?
[14:39:16] <bjs> caveman: the same text will give the same bytes each time with the same encoding
[14:39:18] <nedbat> caveman: are you asking about your code now, or in general?
[14:39:33] <caveman> both.
[14:39:57] <caveman> bjs: i'm trying to compare it with the original bytes before python processed them.  i want them to be identical.
[14:40:03] <bjs> caveman: what are the "original bytes"
[14:40:16] <caveman> some binary file on disk.  e.g. executable.
[14:40:28] <nedbat> caveman: the simple answer here is that if you care about the bytes, avoid text, and use bytes
[14:40:48] <caveman> basically i want the sha2sum of the file to not change.
[14:41:10] <bjs> caveman: no what I really mean is that bytes have some encoding. When you turn them into a str the bytes are gone.  If you encode() them back into bytes with the same encoding you'll get the same bytes. But if you use a different encoding (or have a different string) you'll get different bytes.
[14:41:17] <bjs> caveman: do you want to do any text operations on it?
[14:41:22] *** Quits: upsala (~zcb@185.213.155.160) (Ping timeout: 246 seconds)
[14:41:33] <bjs> (what are you going to *do* with the bytes/str in Python?)
[14:41:43] <nedbat> caveman: what are you doing to the file that might change the shasum?
[14:41:47] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Quit: leaving)
[14:42:18] <caveman> nedbat: but i pass those bytes as stdin, using some configuration variable that formats it.  e.g. stdin_format = f'some command: {stdin}'.  i wish '{stdin}' part to be binary.  stdin as a variable is already bytes, but it is causing python to literally pass "b'asdfadfs\nasd\n'"  (b' literally sent)
[14:43:08] *** Joins: entuland (~entuland@user/entuland)
[14:43:13] <bjs> caveman: okay well its not the bytes or text that's the problem here, it's just your formatting.  f'{some_bytes}' doesn't work
[14:43:24] *** Joins: upsala (~zcb@185.213.155.160)
[14:43:34] <caveman> how to solve it?
[14:43:37] <bjs> well, it doesn't work *because* the format output is a string and not bytes
[14:44:03] <dob1> it's not clear to me how to manage python script when you use virtualenv/venv. Suppose that I have created a script in a virtualenv and I want to run it as a program put /usr/local/bin, what is the right way?
[14:44:25] <bjs> caveman: `stdin_format = "some command: ".encode() + stdin`
[14:44:28] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[14:44:37] <dob1> how do I invoke this script that I put in /usr/local/bin ?  I have to activate every time virtualenv, right?
[14:44:55] <bjs> caveman: this will just append the stdin bytes to the end
[14:45:39] <caveman> bjs: how about i make the {stdin} as str, use the config variable normally as i said before.  then before sending stdin_format i encode it into ascii?
[14:45:40] <deniska> dob1: put /path/to/venv/bin/python as a shebang in this script
[14:46:16] <dob1> deniska, in case of virtualenv?
[14:46:19] <bjs> caveman: you mean make the stdin variable a str, and yes that would also work (so long as the original stdin bytes were ascii)
[14:46:47] <caveman> bjs: original were not ascii.  maybe some pure binary file.  possibly even bytes from /dev/random.
[14:46:48] <deniska> dob1: yeah, virtualenv more or less just makes a small isolated copy (symlinked in case if the system supports it) of a python installation
[14:46:50] <bjs> caveman: but putting "some command: " before the line will certainly change the sha2sum, so I'm not sure where this is going
[14:46:59] <bjs> caveman: well if it's not even text then you can't even decode to str
[14:47:20] <caveman> bjs: not even ascii?  isn't each possible byte already represented by a symbol in ascii?
[14:47:21] <dob1> deniska, how does it will be activated?
[14:47:34] <nedbat> caveman: ascii is only up to 127. You mean isolatin1
[14:48:32] <bjs> caveman: no,  there are some encodings that map every byte to a character and back,  but the `str` you get will probably be nonsense and I'm not sure what useful thing you can do with it if the input wasn't actually text
[14:48:54] <nedbat> caveman: bjs's suggestion is better: use bytestrings instead.
[14:48:59] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[14:49:16] <caveman> nedbat: byte strings will strip me from being able to use fancy format strings.
[14:49:44] <nedbat> caveman: format the text parts first, then encode to bytes, and join with your binary data
[14:49:45] *** Parts: dukwon (~dukwon@physics.horse) (Leaving)
[14:50:04] <nedbat> caveman: or decode your binary data with latin1, but it seems like it will lead to trouble.
[14:50:08] <caveman> so i should manually split my config string?
[14:50:08] <dob1> I change my question that is similar, you can create a "package" of your python script with all library included ?
[14:50:22] <deniska> dob1: "activation" just changes PATH
[14:50:48] <deniska> dob1: so you can just run a script with this specific interpreter inside the venv directory, and it will run as if it's activated
[14:51:04] *** Joins: pnoud (~pnoud@user/pnoud)
[14:51:11] <deniska> dob1: so that's why I suggest to alter #! line to point to venv
[14:51:23] *** Joins: sid-maddy (~sid-maddy@103.76.57.169)
[14:51:36] <deniska> dob1: there're many ways of packaging python programs with various trade offs, which to pick depends on your usecase
[14:51:39] <caveman> nedbat: any idea why would it lead to trouble with latin1?
[14:52:00] *** Joins: kenoba (~kenoba@user/kenoba)
[14:52:14] <nedbat> caveman: because encoding defaults to utf8 in various places, so your text string might fail to encode someplace.
[14:52:24] <dob1> deniska, ok I got this, but so I can put my script in /usr/local/bin and what is the common place to put the virtualenv script dir?
[14:52:39] *** Joins: Ergo^ (~ergo@91.238.59.144)
[14:52:46] <dob1> deniska, can you name some of them ? just to take them a look
[14:52:52] <dob1> the most used
[14:54:45] <sid-maddy> dob1: PyInstaller, PyOxidizer to name a few
[14:54:49] <caveman> UnicodeEncodeError: 'latin-1' codec can't encode characters in position 0-5: ordinal not in range(256)
[14:55:01] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::9885) (Remote host closed the connection)
[14:55:26] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::791f)
[14:55:54] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[14:56:38] <deniska> dob1: there're basically 3 broad usecases, packaging python code for python developers, packaging code for users who already have python installed in a specific way (e.g. in a linux distro), and creating a standalone installer/executable
[14:57:58] <nedbat> caveman: can you print the repr of the string you are dealing with?
[14:58:30] <nedbat> caveman: wait, why are you encoding?
[14:58:37] <caveman> nedbat: i gave up.  i'll just add a special option to write binaries to stdout.
[14:59:01] <nedbat> caveman: these are solvable problems, but ok
[14:59:07] <p-i-> I need to speed up json.loads() operations. I'm looking at orjson. Is it possible to deserialize direct into a @dataclass object?  And is there any speed benefit in doing so? (like... it knows what to expect)?
[14:59:33] *** Quits: floatingpoint (~floatingp@net-2-36-142-160.cust.vodafonedsl.it) (Quit: leaving)
[14:59:35] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:59:57] <caveman> <nedbat> caveman: wait, why are you encoding?   <--  because in my app i have a general configuration parameter that allows user to define any external app to deal with the output of my app.  the configuration parameter says "stdin_format = "blah blah {STDIN} blah blah".  then i should put STDIN there.  it would be nice if i could put binary STDIN there, too.
[15:00:54] <nedbat> caveman: do you have non-ascii data in your configuration value? can you link us to any of this code?
[15:01:18] <deniska> dob1: the first is covered by something like setuptools, for the second usecase pex comes to mind, and for the latter already mentioned pyoxidizer, pyinstaller, cx_freeze, nuitka
[15:01:35] <jor> sounds to me you need a stdin_enconding configuration param
[15:01:44] <deniska> (or just packaging a .deb/.rpm etc if you are targeting a specific linux distro)
[15:01:49] <caveman> nedbat: possible.
[15:01:59] <dob1> deniska, I got it
[15:02:06] *** Quits: AkechiShiro (~licht@user/akechishiro) (Ping timeout: 258 seconds)
[15:03:13] *** Quits: y1n (~y1n@84-115-64-196.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[15:03:34] *** Joins: y1n (~y1n@84-115-65-109.wifi.dynamic.surfer.at)
[15:03:46] <nedbat> caveman: do you have other template variables other than {STDIN} ?
[15:04:22] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[15:04:50] <caveman> nedbat: yes.  https://github.com/Al-Caveman/nsapass/blob/dev/nsa#L74
[15:06:24] <nedbat> caveman: can you share the code that got the encoding error you showed?
[15:06:36] <sid-maddy> p-i-: checked https://pythonspeed.com/articles/faster-json-library?
[15:10:40] <caveman> nedbat: basically i `nsa -V create`, `nsa -V start`, `nsa -V add -t test -f somefile`, `nsa -V do test -k > output_somefile`.  then sha2sum somefile and output_somefile don't match.
[15:10:57] *** Quits: newtoliberachat (~xyz@49.206.29.212) (Ping timeout: 245 seconds)
[15:11:40] <p-i-> sid-maddy: yeah I settled on orjson from reading that article
[15:11:42] <nedbat> caveman: i meant a link to the version of the Python code with the .encode that failed
[15:12:34] <caveman> nedbat: for isolatin1?
[15:12:58] <nedbat> caveman: yes, for whatever you did that caused this: UnicodeEncodeError: 'latin-1' codec can't encode characters in position 0-5: ordinal not in range(256)
[15:14:37] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Remote host closed the connection)
[15:15:20] *** Joins: Naan (~naan@user/naan)
[15:16:00] <Dev0n> hey, so every 5mins or so, mysql logs are showing Aborted connection 13 to db, so the next flask request always fails, but ones following that work. I'm using sqlalchemy with pymysql. I just sqlalch by default handles aborted connections and reconnect?
[15:16:13] <Dev0n> Is there some additional config I need to include as a part of create_engine?
[15:16:25] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[15:16:31] <Dev0n> I thought*
[15:17:21] *** Joins: Atque (~Atque@user/atque)
[15:17:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:18:10] <caveman> nedbat: i put some arabic letters, like ض.
[15:18:33] <nedbat> caveman: but the code: are you running the exact code you linked us to? Or you had changed it locally?
[15:19:06] <sid-maddy> p-i-: re: deserializing to dataclasses, https://github.com/ijl/orjson#will-it-deserialize-to-dataclasses-uuids-decimals-etc-or-support-object_hook
[15:19:33] <caveman> nedbat: yes.  i just changed setting ENCODING='utf-8' into 'latin-1'
[15:23:48] <jor> Dev0n: disable connection pooling or timeout matching/shorter then the server-side config of the connection timeout
[15:25:21] *** Quits: sandeepk (~sandeepk@223.130.30.221) (Remote host closed the connection)
[15:26:02] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[15:26:29] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[15:27:01] <Dev0n> jor, ah, I thought this stuff was already handled by default since I haven't changed any settings on the mysql server or timeout settings on SQLAlch, alas, I'll mess around with the timeouts and see if that improves
[15:28:13] <jor> Dev0n: yeah, that's cause mysql isn't the 'default' itself ;p
[15:28:26] *** Quits: ntdll (ntdll@user/ntdll) (Quit: WeeChat 3.2)
[15:29:29] *** Quits: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10) (Ping timeout: 252 seconds)
[15:29:39] *** Joins: ntdll (ntdll@user/ntdll)
[15:30:22] <Dev0n> heh gotcha
[15:30:25] *** Joins: azazello (~azazello@109.75.158.195)
[15:30:42] *** Joins: noctavian_ (~noctavian@gateway/tor-sasl/noctavian)
[15:31:19] <nedbat> caveman: ok, that's not what i suggested.
[15:31:36] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[15:31:41] *** Quits: arischow (~arischow@103.97.201.36) (Quit: Textual IRC Client: www.textualapp.com)
[15:31:47] <nedbat> caveman: you don't want any encoding on your subprocess call. You want to send bytes to the subprocess
[15:31:48] <Dev0n> jor, so just be clear, options are to disable connection pooling in sqlalch options, meaning that each flask request will create a new connection and close it, or, set a timeout in the sql alch options?
[15:33:40] <jor> Dev0n: yeah. But probably even easier is to configure the pool to validate the connetion before use (e.g. SELECT 1 query). But I can never remember what sqla names that config option :)
[15:34:07] <Dev0n> jor, just reading the docs, think you mean this one? pool_pre_ping?: https://docs.sqlalchemy.org/en/14/core/pooling.html#pool-disconnects-pessimistic
[15:34:22] <jor> but matching the timeouts would be the 'proper' thing to do
[15:34:29] <caveman> nedbat: if i delete that part, then encode stdin as latin1, it gives error.  UnicodeEncodeError: 'latin-1' codec can't encode characters in position 0-1: ordinal not in range(256)
[15:34:31] <jor> Dev0n: yeah, that's it :)
[15:36:50] <Dev0n> great, thanks
[15:40:42] *** Quits: emika (~emika@185.207.249.1) (Ping timeout: 240 seconds)
[15:40:52] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 246 seconds)
[15:41:10] *** Joins: emika (~emika@83.136.182.159)
[15:41:25] *** Joins: Julian (~tos9@python/site-packages/Julian)
[15:41:34] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:42:00] *** Quits: ZenixOwler (~zenix@118.69.128.37) (Ping timeout: 255 seconds)
[15:44:02] *** Quits: fpetk (~thepetk@ipa18.10.tellas.gr) (Remote host closed the connection)
[15:44:09] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[15:44:12] <bjs> caveman: where are you getting stdin from? Why is stdin text?
[15:45:41] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[15:45:46] *** Quits: varaindemian (~varaindem@86.124.78.162) (Ping timeout: 246 seconds)
[15:46:03] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[15:46:21] *** Joins: wyclif (~wyclif@user/wyclif)
[15:46:32] <nedbat> caveman: I think you will need to encode your configuration strings to bytes, then use .replace() on them instead of .format().
[15:47:03] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[15:47:53] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[15:47:56] *** Joins: freeman_h (~freeman_h@90.208.166.19)
[15:48:13] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[15:48:32] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:48:57] *** Joins: noarb (~noarb@user/noarb)
[15:49:21] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Client Quit)
[15:49:41] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[15:51:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[15:51:58] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[15:53:11] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[15:54:23] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[15:54:25] *** Joins: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de)
[15:54:32] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[15:55:30] *** Quits: tspng (~tspng@2a02:168:a1a1:1:4c44:25bb:4ae3:4fe2) (Remote host closed the connection)
[15:58:05] *** Joins: shad (~shad@user/shad)
[15:59:23] *** Joins: tspng (~tspng@2a02:168:a1a1:1:d973:b37f:8db3:c6b8)
[16:00:31] *** Parts: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) ()
[16:01:34] *** Joins: newtoliberachat (~xyz@49.206.29.212)
[16:02:11] *** Joins: AkechiShiro (~licht@user/akechishiro)
[16:02:34] *** Quits: y1n (~y1n@84-115-65-109.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[16:02:48] *** Joins: Jefren (~Jefren@32.sub-174-215-189.myvzw.com)
[16:02:50] *** Joins: y1n (~y1n@84-115-65-109.wifi.dynamic.surfer.at)
[16:03:03] <Classic> Hi folks, best python IDE on mac to build, debug, run console apps?
[16:03:16] *** Quits: lexandrop (~lex@user/lexandrop) (Ping timeout: 246 seconds)
[16:03:25] <Classic> Me new on OSX
[16:03:30] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[16:04:09] <deniska> Classic: pycharm for a full IDE experience, vscode for a text editor with a lot of extras
[16:04:31] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[16:05:45] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[16:06:10] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[16:06:52] <Classic> Cool thanks deniska, never thought of vscode on osx is that good?
[16:08:24] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[16:09:11] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 258 seconds)
[16:09:19] *** Quits: noctavian_ (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[16:10:35] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 265 seconds)
[16:10:39] *** Joins: ionface_ (~ionface@user/ionface)
[16:10:43] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[16:11:36] <deniska> Classic: should be pretty similar to other platforms, it's an electron app after all :)
[16:13:00] *** Joins: szymon (~ugh@staticline-31-183-187-232.toya.net.pl)
[16:13:16] <Classic> : )
[16:13:36] <Classic> Trying it out right now, feel lightweight and nice
[16:15:13] *** Joins: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:4ec5:6765:26be:8e46)
[16:21:09] *** Quits: Jefren (~Jefren@32.sub-174-215-189.myvzw.com) (Quit: CoreIRC for Android - www.coreirc.com)
[16:22:42] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:24:37] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[16:26:36] *** Joins: nirix (uid48447@id-48447.tinside.irccloud.com)
[16:29:15] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 255 seconds)
[16:30:26] *** Joins: luna-is-here (~quassel@ip-95-223-58-13.hsi16.unitymediagroup.de)
[16:35:02] *** Quits: woky (~woky@li1651-31.members.linode.com) (Quit: Nothing in this world is hopeless!)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:53] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Remote host closed the connection)
[16:42:18] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[16:42:41] *** Joins: zeden (~zeden@user/zeden)
[16:45:20] *** Joins: shad (~shad@user/shad)
[16:45:33] *** Quits: luna-is-here (~quassel@ip-95-223-58-13.hsi16.unitymediagroup.de) (Read error: Connection reset by peer)
[16:45:48] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[16:47:31] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 258 seconds)
[16:48:48] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[16:49:24] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:49:33] *** Joins: zeden (~zeden@user/zeden)
[16:50:13] *** Quits: ephemer0l (~ephemer0l@organizedmagnetism.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[16:50:14] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[16:50:17] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[16:50:34] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[16:51:04] *** Joins: dez (uid92154@user/dez)
[16:51:41] *** Joins: yogoyo (~yogoyo@user/yogoyo)
[16:51:52] *** Joins: ephemer0l (~ephemer0l@organizedmagnetism.com)
[16:51:54] *** Joins: pnoud (~pnoud@user/pnoud)
[16:52:05] <AhmedAmerican> someone seen such value like that before ? https://bpa.st/F3RA
[16:52:14] *** EWDurbin_ is now known as EWDurbin
[16:52:16] <dez> i'm trying to cut the strings of a dataframe into its 3 first characters
[16:52:27] <dez> anyone got any idea how to do it with pandas?
[16:53:38] *** Joins: woky (~woky@li1651-31.members.linode.com)
[16:56:59] *** Joins: shoobie (~shoobie@user/shoobie)
[16:57:06] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[16:57:15] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[17:00:25] *** Quits: homerj (~homerj@user/homerj) (Quit: leaving)
[17:01:04] <wyre> how should I install a package when I've created the setup.py?
[17:01:27] <wyre> should I perform `python3 setup.py install` or just `sudo pip3 install .`?
[17:01:30] <Yhg1s> wyre: 'pip install .'
[17:01:36] <Yhg1s> not 'sudo', no. never 'sudo'.
[17:01:43] <Yhg1s> use a virtualenv.
[17:02:04] <wyre> Yhg1s, what about for a system-wide installation?
[17:02:31] <AhmedAmerican> wyre: don't use `sudo`! never ever :) if you care about security.
[17:03:08] *** Quits: y1n (~y1n@84-115-65-109.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[17:03:16] <wyre> well, anyway ... pip3 install . is not installing anything
[17:03:17] <AhmedAmerican> wyre: you will not check each library code one by one. so don't give permission for library to use system priv!
[17:03:41] <AhmedAmerican> wyre: `pip3 -V` output?
[17:03:57] <Yhg1s> wyre: for a system-wide installation, use your system's package manager.
[17:04:02] <Yhg1s> wyre: what does your setup.py file contain?
[17:04:06] *** Joins: y1n (~y1n@84-115-65-109.wifi.dynamic.surfer.at)
[17:04:30] <AhmedAmerican> ahhh it's about installing from `setup.py`
[17:04:55] <wyre> https://bpa.st/G34Q
[17:04:58] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[17:06:35] <wyre> https://bpa.st/5FSQ
[17:06:41] <wyre> why is happening this?
[17:07:07] *** Joins: computeiro (~Wender@189.37.65.69)
[17:07:50] *** Quits: rsrx (~rsrx@103.225.150.81) (Ping timeout: 252 seconds)
[17:08:00] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[17:08:35] *** Quits: ambv (~ambv@c138-59.icpnet.pl) (Ping timeout: 255 seconds)
[17:08:43] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[17:08:59] <Yhg1s> wyre: your 'dp1642gwapi' package uses 'packages=find_packages()', which means it finds any directories with __init__.py files in the same directory as the setup.py file, and installs them as packages. Can you show the rest of the directory?
[17:10:05] *** Joins: pnoud (~pnoud@user/pnoud)
[17:11:01] *** Joins: ambv (~ambv@196.240.57.220)
[17:12:11] *** Quits: cqi (~cqi@2408:8207:252f:75a0:8cf2:f40a:73a7:dfd6) (Quit: Leaving)
[17:12:20] <wyre> Yhg1s, I have not __init__.py file in the same directory
[17:12:43] <Yhg1s> wyre: good. you shouldn't have it. You should, however, have a sub-directory with an __init__.py file in that directory.
[17:13:00] <Yhg1s> wyre: unless you don't actually want to install packages, in which case you need py_modules to tell setup.py what to install.
[17:13:15] <wyre> this is what I want to package https://bpa.st/SWXA
[17:13:46] <wyre> also with the fonts, but I think I should have to use the package_data directive, right?
[17:14:27] <Yhg1s> wyre: so the top-level module (package) you want it to install is 'dp1642gw'?
[17:14:35] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:14:54] <wyre> nope, I want to package all this directory
[17:15:08] <Yhg1s> wyre: what module *do* you want to install?
[17:15:11] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[17:15:15] <wyre> I'd like to have available also api-dp1642gw.py, clock.py and test-dp1642gw.py
[17:15:25] <Yhg1s> '-' is not valid in a module name.
[17:15:32] <wyre> sure
[17:15:33] <Yhg1s> so that would not be a good idea. Do you mean for them to be usable as scripts?
[17:15:46] <wyre> Yhg1s, exactly
[17:15:50] *** Joins: gravyy (~gravy@220-245-7-193.static.tpgi.com.au)
[17:15:51] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[17:15:53] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:16:00] <Yhg1s> okay, so let's talk about that later. First let's talk about the *module* you want to install.
[17:16:13] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[17:16:30] <Yhg1s> wyre: the 'dp1642gw' subdirectory, how do you want to import it? With 'import dp1642gw' or 'import dp1642gwapi.dp1642gw' or 'import dp1652gwapi'?
[17:16:44] <Yhg1s> eh, 1642gwapi.
[17:17:02] <wyre> import dp1642gw
[17:17:30] <Yhg1s> wyre: good, that's what it already does. Can you not do 'import dp1642gw' after you pip install the package? (Your paste only has you trying dp1642gwapi)
[17:17:51] <wyre> well, let's see
[17:17:59] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:18:02] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:18:07] <azidhaka> Hi everyone, please suggest a better way to write this (regex are the same on every line): http://p.ip.fi/QFWs
[17:18:49] <wyre> yes, I'm able to import it
[17:19:00] *** Joins: darksun (~darksun@user/darksun)
[17:19:04] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[17:19:09] <Yhg1s> wyre: okay. Is there anything else you want to import as 'dp1642gwapi' then?
[17:19:26] <wyre> oh, sorry, I was able to import it because I was in the folder
[17:19:42] *** Quits: gravy (~gravy@220-245-7-193.static.tpgi.com.au) (Ping timeout: 265 seconds)
[17:19:56] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[17:20:05] <wyre> yes, but I'm able to import it
[17:20:22] <wyre> and the module is installed at ~/.local/lib/python3.7/site-packages/dp1642gw
[17:20:23] <Yhg1s> wyre: the package you showed wouldn't install anything under the 'dp1642gwapi' name.
[17:20:23] *** Joins: seednode (~seednode@user/seednode)
[17:20:34] <Yhg1s> wyre: that's dp1642gw, not dp1642gwapi
[17:20:39] <wyre> sure
[17:20:44] *** Joins: boxelephant (~boxelepha@209.143.87.130)
[17:20:48] <wyre> I've modified the name to set it as dp1642gw
[17:20:56] <wyre> (inside the setup.py, I mean)
[17:21:10] <Yhg1s> wyre: your paste had you try 'import dp1642gwapi', I just want to make sure you didn't mean to install something under that name.
[17:21:15] *** Quits: mpmc (~mpmc@user/mpmc) (Ping timeout: 258 seconds)
[17:21:43] <Yhg1s> wyre: the name in setup.py only matters to pypi.org, for uploading and for then running 'pip install packagename'. It doesn't have to correlate to the actual modules installed (although it's a good idea to make it the same).
[17:21:44] *** Joins: derelict (~derelict@user/derelict)
[17:21:55] <Repiphany> azidhaka: https://bpa.st/FJKA
[17:22:23] <wyre> well, the module it's apparently being installed properly
[17:22:29] <wyre> but I'm lacking the fonts
[17:23:05] <azidhaka> Repiphany: much nicer, thanks!
[17:23:07] <Yhg1s> wyre: for api-dp1642gw.py, test-dp1642gw.py and clock.py, you can list them in 'scripts', or you can turn them into modules in the package and use entry_points.
[17:23:11] <wyre> should I use then package_data?
[17:23:46] <Yhg1s> wyre: yes, or include_package_data plus a MANIFEST.in file listing them.
[17:24:17] <dez> i'm trying to cut the strings of a dataframe into its 3 first characters,  anyone got any idea how to do it with pandas?
[17:25:18] <wyre> Yhg1s, but should I use the relative path?
[17:25:57] <wyre> like package_data=['fonts/VictorBold.ttf', 'fonts/The_Impostor.ttf'] ?
[17:26:09] *** Joins: mpmc (~mpmc@user/mpmc)
[17:27:40] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[17:27:52] <jor> dez: .str.slice(0, 3)
[17:28:09] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[17:28:50] <dez> jor: thank you, its a lot of values, would it use pandas vetorization?
[17:29:20] <wyre> Yhg1s, what about data_files?
[17:29:44] <jor> dez: yes
[17:30:22] <dez> thank you very much
[17:31:24] *** Quits: sid-maddy (~sid-maddy@103.76.57.169) (Read error: Connection reset by peer)
[17:31:35] *** Joins: Blankspace (~abcd@user/blankspace)
[17:33:17] *** Quits: neibo (~neibo@86.127.254.176) (Quit: Lost terminal)
[17:33:47] <kline> im trying to get a mysql query built up but it ends up generating a syntax error - i think its the mysql module thats doing it as it works fine when filled in by hand. the source, logs, and traceback is here: https://gist.github.com/AbstractBeliefs/c61c326fe78f49a7d4815755338a59ae
[17:33:54] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[17:34:06] <kline> you can see the query generated and the tuple of `("user",)` being fed in
[17:35:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[17:36:25] *** Joins: wyclif (~wyclif@user/wyclif)
[17:39:06] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-149.hsi5.kabel-badenwuerttemberg.de) (Ping timeout: 240 seconds)
[17:40:23] *** Joins: zkv (~zkv@46.216.147.164)
[17:40:28] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[17:40:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[17:41:54] *** Joins: wyclif (~wyclif@user/wyclif)
[17:42:45] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[17:43:01] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Ping timeout: 246 seconds)
[17:43:24] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[17:43:29] <PJBoy> is there a neat python expression for `obj.var if hasattr(obj, "var") else None`?
[17:45:01] <Yhg1s> PJBoy: getattr(obj, "var", None)
[17:45:15] <Yhg1s> wyre: data_files isn't the thing you want to use for this.
[17:45:23] <jor> kline: my guess would be the real error is somwhere earlier in the query
[17:45:39] <PJBoy> Yhg1s, oh wow, thanks :D
[17:45:50] <PJBoy> that was very negligent of me
[17:45:51] <jor> kline: hmm, my guess would be the database table/column need escaping. e.g. `user` is a reserved word
[17:46:08] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[17:46:19] <wyre> Yhg1s, according this https://docs.python.org/3/distutils/setupscript.html#installing-additional-files is what I need to add additional files 🤔
[17:46:20] <jor> another good read to not reinvent the wheel, use sqlalchemy core ;p
[17:46:53] <kline> jor, i got it from #mysql a min ago, it was because i need to use query, not criteria, in the query_db() call at the end
[17:47:02] <Yhg1s> wyre: no, what you have is package data, not data files outside of the package.
[17:47:04] <kline> im making one query and then using a different chunk of text :(
[17:47:10] <kline> all fixed now, thanks for taking a look
[17:47:12] <Yhg1s> wyre: see https://docs.python.org/3/distutils/setupscript.html#installing-package-data
[17:47:49] <Yhg1s> wyre: I also recommend reading packaging.python.org instead of the docs for distutils.
[17:47:51] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[17:48:05] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 258 seconds)
[17:48:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:50:19] *** Joins: dulanic (~dulanic@47.187.144.163)
[17:51:21] *** Quits: reset (~reset@user/reset) (Quit: reset)
[17:51:27] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[17:51:36] *** Quits: jazzy (~jaziz@2600:380:c07e:8a82:64d5:2b35:3886:56b2) (Ping timeout: 255 seconds)
[17:52:19] *** Quits: boxelephant (~boxelepha@209.143.87.130) (Read error: Connection reset by peer)
[17:52:23] *** Joins: luke__80 (~luke__80@host-82-52-56-128.retail.telecomitalia.it)
[17:52:34] *** Joins: boxelephant (~boxelepha@209.143.87.130)
[17:53:13] <luke__80> hi everyone. What is the correct name for a python module where I put all the custom dataclasses and enums for a project? i called it 'structs' but i'm not sure about that
[17:53:55] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[17:54:32] <grym> luke__80: there isn't a single correct name.  i've used `models.py` before
[17:54:46] *** Quits: shoobie (~shoobie@user/shoobie) (Ping timeout: 252 seconds)
[17:54:48] <entuland> I personally don't like structuring stuff around in a project by what that stuff is, I find it more useful to structure about what something _does_ or relates to instead
[17:54:48] <grym> which is a fastAPI-ism, probably
[17:54:49] <bjs> luke__80: it's not a very common thing to do,  normally you group any classes,functions and variables into related modules rather than having a dedicated module for _all_ of the classes.
[17:54:52] *** Joins: cer-0 (~cer-0@189.228.170.154)
[17:54:55] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[17:55:01] <bjs> luke__80: so there isn't a standard name for it.
[17:55:09] *** Joins: shoobie (~shoobie@user/shoobie)
[17:56:14] *** Joins: drant (~drant@2a05:f480:1c00:d82::)
[17:56:25] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[17:57:21] *** Joins: rsx (~dummy@ppp-188-174-131-253.dynamic.mnet-online.de)
[17:57:23] <jor> 'structs' is just a very unfortunate name, since struct is in the stdlib and has a very specific meaning/usage
[17:57:27] <luke__80> bjs that's what I'm doing: it's a separate tiny project, 2 files as of now, one of this is 'struct.py'
[17:58:02] <luke__80> jor that's the issue i was expecting. I'll change it to 'helpers.py'
[17:58:12] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[17:58:38] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[17:58:40] <bjs> luke__80: most naming conventions (and so what would be the "correct" name) come from conventions used in larger projects. and those large projects don't do this otherwise they'd just have 1 100k-line "structs.py" file or something :)
[17:58:47] <bjs> so I guess you can choose whatever name you want
[17:59:24] *** Joins: zebrag (~chris@user/zebrag)
[17:59:30] *** Quits: luke__80 (~luke__80@host-82-52-56-128.retail.telecomitalia.it) (Quit: Client closed)
[18:00:07] *** Joins: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10)
[18:00:25] <bjs> luke__80: for example, this not -very- big but popular project requests https://github.com/psf/requests/tree/master/requests is split over many files, with classes in almost all of them.  But it calls the one that contains the "key" Request/Response objects "models.py" like grym does
[18:01:28] <jor> ugh, helpers is also bad., that won't help any future developer. data model and enum constants are usually pretty central to the functionality :)
[18:02:06] <bjs> jor: I think for requests specifically they're in models.py because the Request/Response objects don't actually "do" anything, they just hold onto some values
[18:02:35] *** Quits: y1n (~y1n@84-115-65-109.wifi.dynamic.surfer.at) (Ping timeout: 255 seconds)
[18:02:39] <bjs> and the actual work to create and use sessions are in sessions.py
[18:02:51] *** Quits: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001) (Ping timeout: 276 seconds)
[18:03:37] <jor> yeah, models.py is better. But if, when explaining it to others, you are calling it dataclasses, mabye it should go into dataclasses.py :)
[18:03:39] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:544f:ff3e:f177:8d6c)
[18:03:58] *** Joins: zaquest (~notzaques@5.128.210.178)
[18:04:02] *** Joins: nmoura (~nmoura@177.192.16.58)
[18:04:13] <bjs> jor: dataclasses.py probably isn't a good name for the same reason as you gave for "structs"
[18:04:43] <bjs> except it's worse, because structs was just similar to a stdlib module but "dataclasses" *is* the name of a stdlib module
[18:04:44] <jor> ohh, crap yeah... stupid 3.7 ;p
[18:05:05] *** Joins: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001)
[18:05:06] *** Quits: Linux77 (~kvirc@66-183-233-186.raimax.com.br) (Ping timeout: 255 seconds)
[18:07:40] <grym> bjs: models also may be a vestige of my c# MVVMisms still wearing off :)
[18:08:02] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:08:10] *** Quits: Blankspace (~abcd@user/blankspace) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[18:08:39] <bjs> grym: the word "model" is so overloaded, but I think most of those pattern things that use the word "model" use it in a similar or roughly compatible way
[18:08:56] <jor> in my head, I still import dataclasses from pydantic :)
[18:09:42] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[18:11:07] <AhmedAmerican> how to get a list of date ? something like `['2021-07-20', '2021-07-21']`
[18:11:14] <grym> bjs: it gets especially silly in scientific code where models/ is a package full of modules named, oh, `auditory_nerve.py`
[18:11:23] <AhmedAmerican> dateparser have a range func ?
[18:14:23] <agronholm> AhmedAmerican: explain?
[18:14:29] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[18:14:31] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:15:30] *** Joins: ppw (~ppw@user/ppw)
[18:15:30] <AhmedAmerican> agronholm: say that i want to have a list of date range between `2021-06-20` to `2021-07-21`
[18:18:17] <agronholm> AhmedAmerican: the calendar module might have something for that
[18:18:46] <AhmedAmerican> cool, i will chat that now
[18:19:10] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Remote host closed the connection)
[18:19:31] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[18:20:17] *** Quits: sectec84 (~sectec84@24.18.109.173) (Ping timeout: 258 seconds)
[18:20:50] *** Joins: seoul_man (~meh@user/seoul-man/x-5066766)
[18:20:55] * SnoopJ renames models/ to processes/
[18:21:05] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 252 seconds)
[18:21:54] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[18:22:07] <grym> SnoopJ: 'shellac'.  there we go
[18:22:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[18:22:55] *** Quits: gravyy (~gravy@220-245-7-193.static.tpgi.com.au) (Read error: Connection reset by peer)
[18:22:58] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[18:24:34] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[18:24:52] *** Quits: Elon_Satoshi (~elonsatos@46.102.153.243) (Ping timeout: 268 seconds)
[18:25:21] *** Quits: ATAD (~ATAD@user/atad) (Ping timeout: 255 seconds)
[18:30:06] *** Quits: tspng (~tspng@2a02:168:a1a1:1:d973:b37f:8db3:c6b8) (Quit: Leaving, bye!)
[18:31:06] *** Quits: ambv (~ambv@196.240.57.220) (Ping timeout: 240 seconds)
[18:32:33] *** Quits: newtoliberachat (~xyz@49.206.29.212) (Ping timeout: 268 seconds)
[18:33:00] *** Joins: CodenameTim (~CodenameT@154.21.114.49)
[18:33:03] *** Joins: ambv (~ambv@c138-59.icpnet.pl)
[18:33:38] *** Quits: zkv (~zkv@46.216.147.164) (Ping timeout: 252 seconds)
[18:34:11] *** Joins: akk (~akk@75.161.155.222)
[18:34:29] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[18:36:04] *** Quits: janemba (~janemba@94.204.254.193) (Ping timeout: 265 seconds)
[18:37:03] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 250 seconds)
[18:37:36] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 244 seconds)
[18:37:49] *** Joins: janemba (~janemba@185.107.80.152)
[18:38:01] *** Joins: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net)
[18:38:18] *** Quits: riposte (~finalripo@2403-5800-3200-5c02--310.ip6.aussiebb.net) (Ping timeout: 240 seconds)
[18:38:47] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Quit: leaving)
[18:38:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[18:39:45] *** Joins: wyclif (~wyclif@user/wyclif)
[18:40:18] *** Joins: spithash (~spithash@user/spithash)
[18:40:50] *** Joins: ATAD (~ATAD@user/atad)
[18:41:21] *** Quits: janemba (~janemba@185.107.80.152) (Read error: Connection reset by peer)
[18:42:07] *** Joins: janemba (~janemba@185.107.80.152)
[18:42:51] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Quit: Leaving)
[18:43:04] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:44:15] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[18:44:31] *** Joins: jim (~jim@about/linux/staff/jim)
[18:45:32] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[18:47:33] *** Quits: finsternis (~X@23.226.237.192) (Remote host closed the connection)
[18:49:20] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[18:50:09] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (Remote host closed the connection)
[18:50:24] <Luyin> hi, I have a package that I can install with `pip install -e .` when would I instead run `python setup.py develop`?
[18:50:33] <grym> Luyin: never
[18:50:45] *** Parts: ppw (~ppw@user/ppw) ()
[18:51:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[18:51:33] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:51:44] <Luyin> well, that was easy
[18:51:46] <Luyin> why?
[18:51:48] <Luyin> :D
[18:52:18] <wyre> Yhg1s, where are installed the scripts?
[18:52:31] <cvmn> i read passwrods from getpass.getpass() or input().  does this mean that my input is necessarily string?  can i make it bytes?
[18:53:10] <wyre> I mean, that's what I have https://bpa.st/O2OQ
[18:53:16] <wyre> and it's apparently working as expected
[18:53:41] <wyre> but where and how's installing the py scritps?
[18:54:28] <cvmn> nedbat: thanks for .replace() suggestion.
[18:54:31] <wyre> oh, they are in ./local/bin ...
[18:54:36] <grym> Luyin: pip's better at it
[18:55:02] <Luyin> thx
[18:56:28] *** Joins: mexen (uid495612@user/mexen)
[18:56:42] *** Joins: goldfish (~goldfish@user/goldfish)
[18:57:16] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[18:57:36] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[18:57:51] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 258 seconds)
[18:58:21] *** Quits: goldfish (~goldfish@user/goldfish) (Read error: Connection reset by peer)
[18:58:22] *** Joins: tlgs (~tlgs@188-141-56-55.dynamic.upc.ie)
[19:00:33] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[19:00:58] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[19:01:40] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[19:01:56] *** Joins: KombuchaKip (~kip@192.252.230.5)
[19:02:09] *** Joins: bambams_ (~bambams@user/bambams)
[19:03:12] *** Joins: riposte (~finalripo@2403-5800-3200-5c02--310.ip6.aussiebb.net)
[19:03:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[19:04:03] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 255 seconds)
[19:05:11] *** Joins: wyclif (~wyclif@user/wyclif)
[19:05:53] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[19:06:38] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:544f:ff3e:f177:8d6c) (Quit: Leaving)
[19:07:45] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:08:04] *** Joins: pr0t07ype99 (~pr0t07ype@user/pr0t07ype)
[19:08:11] *** Quits: Confusioned (~AnySomebo@p5b15fbbc.dip0.t-ipconnect.de) (Quit: ZNC - https://znc.in)
[19:08:30] *** Quits: pr0t07ype99 (~pr0t07ype@user/pr0t07ype) (Client Quit)
[19:08:33] *** Joins: Confusioned (~AnySomebo@p5b15fbbc.dip0.t-ipconnect.de)
[19:08:58] *** Joins: pr0t07ype (~pr0t07ype@user/pr0t07ype)
[19:10:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[19:10:08] *** Quits: nirix (uid48447@id-48447.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[19:10:16] *** Joins: nmoura (~nmoura@177.192.16.58)
[19:10:27] *** Joins: Elon_Satoshi (~elonsatos@46.102.153.243)
[19:10:42] *** Joins: wyclif (~wyclif@user/wyclif)
[19:10:56] *** Joins: pnoud (~pnoud@user/pnoud)
[19:11:00] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[19:11:04] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[19:11:49] *** Joins: heco (~redrum@user/redrum88)
[19:11:50] <cvmn> can i use **dict for .replace()?
[19:12:14] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[19:12:30] *** Joins: reset (~reset@user/reset)
[19:13:47] <sco1> wdym?
[19:13:56] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:14:27] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[19:14:40] <CodenameTim> cvmn: string.replace only takes three arguments: https://docs.python.org/3/library/stdtypes.html#str.replace So while you could, it's probably not the best way to handle it in case your dict has keys that don't match the arguments.
[19:15:25] *** Quits: doev (~doev@p549d761c.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[19:15:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[19:15:55] *** Joins: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr)
[19:15:55] <cvmn> CodenameTim: bytes.  my string/bytes define sequence for stdin.
[19:16:09] *** Joins: wyclif (~wyclif@user/wyclif)
[19:16:11] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[19:16:31] <bjs> cvmn: bytes.replace() takes the same arguments as str.replace()
[19:16:33] <VaniaPy> how can i access a value of each element from a list?
[19:16:40] *** Joins: tachoknight (~tachoknig@45.20.162.1)
[19:16:44] <bjs> VaniaPy: access how?  Like, loop over them?
[19:17:22] <bjs> VaniaPy: `for elem in some_list: print(elem.value)`   you can do something like that.
[19:17:30] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[19:17:33] <VaniaPy> bjs yes loop but return every element's value
[19:17:35] <bjs> cvmn: what would your dict contain?
[19:17:43] <bjs> VaniaPy: make a list of the values then
[19:17:54] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 268 seconds)
[19:17:57] <bjs> VaniaPy: and return that list of values
[19:18:01] <cvmn> bjs: stuff to pass to STDIN to some external apps.
[19:18:12] <cvmn> bjs: passwords.  binary files.
[19:18:17] *** Quits: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net) (Quit: Leaving)
[19:18:23] <bjs> cvmn: no I meant, what keys and values
[19:18:42] <bjs> cvmn: I assume you didn't just mean to pass the arguments to replace() as a dictionary, but you wanted to do something more interesting than what replace() does?
[19:18:50] <cvmn> bjs: b'{DATABASE_PASSWORD}\n{DATABASE_DATA}'
[19:18:59] <CodenameTim> cvmn: Sorry, I didn't catch the bytes part. If you're looking to call replace a number of times based on a dict you can use something like: https://bpa.st/SCXA
[19:19:32] <bjs> cvmn: and DATABASE_PASSWORD is bytes?
[19:19:42] <bjs> cvmn: why not `DATABASE_PASSWORD + b"\n" + DATABASE_DATA`
[19:19:52] *** Quits: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:19:57] <cvmn> bjs: because use may choose a different format.  i'm not sure if it is always the 1st.
[19:20:09] <bjs> cvmn: if the _format_ is chosen by the user, then the format itself is text
[19:20:21] <bjs> so it probably shouldn't be bytes
[19:20:35] <cvmn> what if password \n is text, but then it's binary later on?
[19:21:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[19:21:21] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Quit: Leaving)
[19:21:38] *** Joins: wyclif (~wyclif@user/wyclif)
[19:22:12] *** Joins: paule32 (~paule32@user/paule32)
[19:22:21] <VaniaPy> bjs something like this you mean? https://dpaste.org/2fAD
[19:22:37] <paule32> hello, can write to me, if python27 hard coded into the sources?
[19:22:48] <paule32> how can i upgrade to python3 ?
[19:22:49] <bjs> VaniaPy: no you cannot `return str(er)` because er is just one of the values. You have to return the whole `values` list
[19:23:07] <bjs> paule32: which sources?  you can just download python3 from your package manager or from python.org/
[19:23:15] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:23:36] <paule32> bjs: yes, sorry, that was a wrong start up
[19:23:54] <paule32> i useing notepad++ and would like use python3
[19:24:03] <bjs> cvmn: no what I mean is that the format you have is clearly text, it's some brackets and some words
[19:24:07] <paule32> but the console give me output of using python27
[19:24:08] <bjs> but the data you're trying to fill is just bytes
[19:24:16] <VaniaPy> ok right
[19:24:19] <VaniaPy> thanks
[19:24:23] *** Joins: nmoura (~nmoura@177.192.16.58)
[19:24:43] <bjs> paule32: are you on Windows?  "give me output" how?  what did you run in the console?
[19:25:01] <paule32> bjs: yes, https://community.notepad-plus-plus.org/topic/21529/python3-under-windows-10-pro-64-bit-include-external-script-dialogs-how
[19:25:22] *** Quits: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10) (Ping timeout: 240 seconds)
[19:25:32] *** Joins: gggp (~gggp@123.113.187.192)
[19:25:57] <gggp> shoud I train model in a distributed network?
[19:26:11] <bjs> gggp: I don't know, should you?
[19:26:27] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:26:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[19:26:37] *** Quits: akk (~akk@75.161.155.222) (Quit: +++)
[19:26:40] <bjs> paule32: I'm not sure what this link is.
[19:27:10] *** Joins: wyclif (~wyclif@user/wyclif)
[19:27:12] <gggp> bjs, is more node more fast train
[19:27:15] <paule32> bjs: community of notepad++, but they dont write how to config
[19:27:32] <paule32> the first, and last 2 replies are from me
[19:27:40] <bjs> paule32: how to config what? and what does notepad++ have to do with it?  Are you running the file from *inside* Noetpad++ somehow?
[19:28:13] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[19:28:18] <bjs> paule32: Sorry I don't know what F6 does in Notepad++, and this is more a Notepad++ question.  Somewhere in the options will be something that configures what F6 does, and you can probably just tell it to not use python2 but to use python3 instead.
[19:28:37] <paule32> yes, notepad++ is a text editor which comes with plugins, so you could use PythonScript plugin
[19:29:01] <paule32> and in the configuration, you can set a option, to load custom python
[19:29:28] <paule32> and this config option is in sample file StartupWithLocalPython.py
[19:29:47] <paule32> you can see my modified version in the link bellow
[19:29:50] <bjs> paule32: I'm not really sure this channel is the right place, it's not really a Python question it's a Notepad++ configuration question.  I'm sure the options menu has the right config in it somewhere.
[19:30:21] <bjs> paule32: yeah your link shows you've installed Python 3 correctly and have Python 3 running on your machine.  You can just run your script from the console directly rather than using Notepad++
[19:31:26] <paule32> yes, that clear, but i would like to write a plugin script that update my source edited files with current date and tume
[19:31:43] *** Quits: launchd (examknow@bitbot/launchd) (Quit: updates!)
[19:31:55] <paule32> so, the script use the notepad++ api, and i would like use tkinter
[19:32:27] <bjs> paule32: use tkinter to do what
[19:32:38] <paule32> for dialogs, so the user (me) can input some text, press button, and the script change the text in notepad++ session
[19:33:09] <bjs> paule32: okay well you can use tkinter to show dialogs and let you push the button, the other person in your link has a screenshot where they have a tkinter dialog there.
[19:33:38] <paule32> yes, and this seems to me python27
[19:33:45] <paule32> but i would like python3
[19:33:48] <bjs> paule32: seems to you how?
[19:33:48] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[19:34:12] <bjs> paule32: what makes you say *their image* is using Python 2?
[19:34:49] <bjs> it looks like your code, and a screenshot of Notepad++(?) with a tk dialog box open, then they give you some information on how to do it
[19:34:51] *** bambams_ is now known as bam32
[19:35:13] *** Joins: launchd (examknow@bitbot/launchd)
[19:35:22] <paule32> when i open the console, which comes with notepad++, the python27 version is display on screen, so i think they use python27,  because  the interpreter  claim that  txt = f"{foo}"; has the invalid syntax
[19:35:45] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:36:00] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 265 seconds)
[19:36:00] <bjs> paule32: okay but forget what *you* do, there is a person who replied to your thread. *they* have a version that is running your code, and shows a tk box and doesn't error and they explain how they did it and how it runs Python 3.9
[19:36:19] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-f513-f13a-b418-4a09.res6.spectrum.com)
[19:36:39] <paule32> ok
[19:36:42] *** Quits: gggp (~gggp@123.113.187.192) (Ping timeout: 252 seconds)
[19:36:45] <paule32> have to look ...
[19:37:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[19:37:05] *** Quits: tims (~tims@220-245-254-151.static.tpgi.com.au) (Ping timeout: 255 seconds)
[19:37:27] *** Quits: launchd (examknow@bitbot/launchd) (Client Quit)
[19:37:41] <paule32> ah, ok
[19:37:55] *** Joins: launchd (examknow@bitbot/launchd)
[19:37:58] <paule32> so i have to download the plugin source and compile with python3 settings
[19:38:12] *** Joins: wyclif (~wyclif@user/wyclif)
[19:39:34] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[19:40:08] *** Quits: freeman_h (~freeman_h@90.208.166.19) (Read error: Connection reset by peer)
[19:40:30] *** Quits: codl (~codl@user/codl) (Ping timeout: 255 seconds)
[19:41:31] *** Parts: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr) ()
[19:42:05] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[19:42:14] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 268 seconds)
[19:42:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:43:42] *** Joins: wyclif (~wyclif@user/wyclif)
[19:43:44] *** Quits: Elon_Satoshi (~elonsatos@46.102.153.243) (Ping timeout: 265 seconds)
[19:43:51] <gitesh> so it's said that it is good if your list has same type of data
[19:44:07] <grym> gitesh: i'd agree to that, yes
[19:46:38] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 265 seconds)
[19:48:49] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[19:49:40] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[19:49:56] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[19:52:04] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:52:21] *** Joins: Linux77 (~kvirc@186.235.105.168)
[19:52:52] <wyre> Yhg1s, how should I handle the displays.json file? https://bpa.st/VL2Q
[19:52:59] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:53:06] <wyre> it's not part of the module but it's used by api_dp1642gw.py script
[19:53:49] *** Joins: pr0t07ype14 (~pr0t07ype@user/pr0t07ype)
[19:53:59] *** Quits: pr0t07ype14 (~pr0t07ype@user/pr0t07ype) (Client Quit)
[19:54:05] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:54:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[19:54:44] *** Joins: wyclif (~wyclif@user/wyclif)
[19:55:19] *** Quits: pr0t07ype (~pr0t07ype@user/pr0t07ype) (Ping timeout: 246 seconds)
[19:55:20] *** Joins: bambams_ (~bambams@user/bambams)
[19:55:57] *** Joins: bambams__ (~bambams@user/bambams)
[19:55:57] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[19:57:37] <grym> wyre: you can include artifacts in your packages if you need to. in your setup.py, you can specify where it is with the package_data={pkgname:["relative/path/to/thingie",]} argument
[19:57:57] *** Joins: Elon_Satoshi (~elonsatos@46.102.153.243)
[19:58:03] <grym> and then when you make a wheel or w/e, you'll copy over the file
[19:59:04] *** Quits: bam32 (~bambams@user/bambams) (Ping timeout: 252 seconds)
[19:59:09] *** Joins: sudorm (~sudorm@lfbn-orl-1-1760-187.w90-107.abo.wanadoo.fr)
[19:59:13] <wyre> grym, but it's not a thing of the module/package
[19:59:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[19:59:36] <wyre> it's a thing that the scripts that will be installed in /bin are using it
[19:59:57] *** Quits: bambams_ (~bambams@user/bambams) (Ping timeout: 258 seconds)
[20:00:14] *** Joins: wyclif (~wyclif@user/wyclif)
[20:00:41] *** Joins: pkapp (~pkapp@c-75-74-40-214.hsd1.fl.comcast.net)
[20:00:48] *** Quits: andrewSC (~andrewSC@95.179.141.168) (Quit: WeeChat 3.2)
[20:01:05] <sharperguy_> strange, when i try to send an email with smtplib, I get an infinite recursion error. I open an SMTP_SSL instance, and pass in an EmailMessage() object to server.send_message()
[20:02:19] <grym> wyre: i don't know what that means.  the things that get put in /bin should be entry_points in your setup.py, and the static resources inside your packages are resources inside your package
[20:02:25] <wyre> grym, it's not in fact inside the package folder
[20:02:37] <grym> wyre: is displays.json something a user is meant to edit? or does it just need to be there
[20:03:01] *** Joins: wovixo (~wovixo@128.104.205.49)
[20:03:12] <wyre> grym, right now is being used by api_dp1642gw.py but yes, it could be modified
[20:03:21] <wyre> and is not part of the dp1642gw package
[20:03:31] <wyre> at least the package doesn't need it
[20:03:46] <wyre> package/module
[20:04:01] <grym> wyre: ok.  so for "i will fiddle this sometimes" configuration data, i tend to use the appdirs package to look in XDG- places for configuration data and load a default (which is a package resource) if there aren't any
[20:04:05] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 255 seconds)
[20:04:19] *** Quits: bninja (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[20:04:29] *** Joins: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[20:04:30] <grym> sometimes also a "create if not exists" logic on first startup is a good pattern, not sure if that's relevant here
[20:04:43] <[Syntax]> trying to figure out how to use __import__ to import another python script and then use a function inside it..
[20:04:55] <wyre> grym, but that apparently means that I'll have to modify the api_dp1642gw.py code
[20:05:07] <wyre> because right know it's looking for the file in the same folder than itself
[20:05:10] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Read error: Connection reset by peer)
[20:05:14] <grym> wyre: if you've hardcoded `load ./displays.json`, yes'
[20:05:16] <[Syntax]> when I import the script with the code not in a function, the main script runs the imported code as soon as its imported.. but when I put the code inside the imported file as a function
[20:05:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:05:26] <[Syntax]> when I try to call the function I get a not defined
[20:05:30] <grym> wyre: yeah, i wouldn't expect magic file locations that way
[20:05:45] *** Joins: wyclif (~wyclif@user/wyclif)
[20:05:53] <bjs> [Syntax]: "a" not defined?  What is not defined?
[20:05:55] <wyre> grym, well, it has the absolute path
[20:05:57] <wyre> but sure
[20:06:00] <wyre> it's hardcoded
[20:06:01] <grym> wyre: that's even worse
[20:06:03] <grym> :)
[20:06:04] <[Syntax]> the function I called is not defined
[20:06:20] <wyre> so what do you recommend me then?
[20:06:22] <sharperguy_> about my message above, here is my code: https://pastebin.ubuntu.com/p/HT2pVGSMmD/
[20:06:24] *** Quits: emika (~emika@83.136.182.159) (Ping timeout: 252 seconds)
[20:06:26] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[20:06:32] <bjs> [Syntax]: _which_ function? the one that called __import__?  maybe you can just share some example code and the error so we can see what you see
[20:07:09] <grym> wyre: https://github.com/ActiveState/appdirs ; look in userdatadir or maybe sitedatadir for the file, perhaps
[20:07:12] *** Joins: emika (~emika@83.136.182.55)
[20:07:27] <[Syntax]> bjs, inside the file I imported theres a function called get_temp()  when I call get_temp I get NameError: name 'get_temp' is not defined
[20:07:32] <wyre> but can be this implemented in setup.py?
[20:07:45] <grym> wyre: no, you do it at runtime
[20:07:58] <bjs> [Syntax]: you said you were calling __import__ though.  Why are you using __import__ rather than the import statement?
[20:08:14] <[Syntax]> its a .py file in the same folder as the script Im executing
[20:08:18] <wyre> grym, so you mean to use appdirs in api_dp1642gw.py?
[20:08:37] *** Quits: Elon_Satoshi (~elonsatos@46.102.153.243) (Ping timeout: 246 seconds)
[20:08:38] <bjs> [Syntax]: okay but why does that mean you need to use __import__? I'm not quite following the situation here.
[20:08:54] <bjs> [Syntax]: but yes, __import__ returns the module it doesn't define any names that weren't defined already
[20:08:59] <wyre> that's a good point, but now I need to manage the displays.json installation via setup.py
[20:09:23] <grym> wyre: maybe.  i'm not used to packages that have business logic outside the package
[20:09:23] <[Syntax]> I assumed that was the way I needed to import that file in order to run functions from it.. according to a site I was reading earlier this morning..
[20:09:33] <bjs> [Syntax]: there is an `import` statement
[20:09:34] <grym> wyre: so i'm not sure how to think about it
[20:09:41] <[Syntax]> it worked to just splice code in.. but as soon as I started putting things into functions, it all broke
[20:09:43] <bjs> like `import foo` or `from foo import some_function`
[20:10:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[20:11:15] *** Joins: wyclif (~wyclif@user/wyclif)
[20:11:39] *** Joins: ckdCreations (~ckdCreati@147.55.130.34)
[20:11:40] *** Joins: ckdcreation (~ckdCreati@147.55.130.34)
[20:12:26] *** Quits: ckdcreation (~ckdCreati@147.55.130.34) (Client Quit)
[20:13:04] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:6cf3:aa58:e4f9:2fac) (Quit: Textual IRC Client: www.textualapp.com)
[20:13:10] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[20:13:34] <[Syntax]> bjs heres what Im doing.. https://pastebin.com/rhs376JW
[20:14:37] <[Syntax]> I have a database with a list of files that contain functions for different things, it pulls the ones that are enabled, and then imports those files
[20:14:38] *** Quits: bambams__ (~bambams@user/bambams) (Remote host closed the connection)
[20:14:43] <bjs> [Syntax]: well the problem is you're not doing anything with new_module, which is what has the get_bm280 function (I assume?)
[20:15:15] *** Joins: bambams__ (~bambams@user/bambams)
[20:15:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:16:11] <[Syntax]> ok.. I saw that earlier but wasnt sure, because when the code inside the imported file wasnt in a function, it ran it..
[20:16:38] <[Syntax]> so I assumed the function inside the file would be appended as well..
[20:16:49] *** Joins: wyclif (~wyclif@user/wyclif)
[20:16:55] <[Syntax]> Im new to this.. python at least..
[20:17:02] <bjs> [Syntax]: in Python, importing a file means running it.  The names defined in that file (e.g. functions) aren't just dumped into your file though, you have to access them through the imported name
[20:17:31] <sudorm> Hi
[20:17:49] <bjs> [Syntax]: e.g. if you `import math` it doesn't just dump the `sqrt` function into your file, you have to call it like `math.sqrt(16)`
[20:17:57] <sudorm> when doing "import sqlite3", where does it find the sqlite3 shared library, on linux?
[20:18:20] <sudorm> I have multiple versions of this library (with more recent versions of sqlite3, manually compiled)
[20:18:32] <sudorm> and I'd like to know which one Python chooses
[20:18:33] <bjs> sudorm: sqlite3 usually comes with Python, so it'll be found where the Python installation is found probably.
[20:18:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:19:22] <[Syntax]> so how should I import these 5 or so .py files so that all of their functions are available? because the method Im using now is apparently overwriting the new-module with every loop..
[20:19:47] <sudorm> bjs, by default on Debian or Ubuntu, where would it be?
[20:19:58] <grym> [Syntax]: you usually want to make a package
[20:20:58] <bjs> sudorm: well, it'll be where you installed Python to :)
[20:21:09] <sudorm> bjs, it's installed by default :)
[20:21:33] *** Quits: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de) (Quit: Leaving.)
[20:21:34] <bjs> [Syntax]: well what *I* usually do is just import all 5 of them at the top of the file then you can just decide which one's get_bm280 function to call using an `if` statement.
[20:21:56] <sudorm> There is: /usr/lib/x86_64-linux-gnu/libsqlite3.so  but also /usr/lib/python2.7/lib-dynload/_sqlite3.x86_64-linux-gnu.so
[20:22:04] <InPhase> sudorm: print(sqlite3.__path__)
[20:22:16] <[Syntax]> well Im building a project, where everything is modular.. and I dont know which sensors people are going to use to build this thing..
[20:22:18] <bjs> sudorm: run `python -m site` to see roughly the places it looks for packages. I have a "..lib/python3.9/lib-dynload" listed, which is where my sqlite3 so is
[20:22:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[20:22:22] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Quit: WeeChat 3.2)
[20:22:27] <bjs> InPhase: that'll give you the *Python wrapper* not the shared library it's actually using
[20:22:33] <[Syntax]> so I made a front end that lets the user mark which sensors they used to build the device..
[20:22:59] <[Syntax]> so when this script runs, it checks the database to see what sensors they selected, and then only runs code for those sensors..
[20:23:05] <sudorm> InPhase, this gives /usr/lib/python2.7/sqlite3
[20:23:13] *** Joins: wyclif (~wyclif@user/wyclif)
[20:23:20] <sudorm> it's not the shared library itself, but only the Python package
[20:23:34] <[Syntax]> and this allows other people to write additional scripts so that a larger variety of sensors can be added to the project without the main code needing to be modified
[20:23:59] <bjs> [Syntax]: hmm, I mean this approach works fine, you just need to actually use the module object you get back from __import__. I'd be wary of just running whatever files the database tells you, especially if other people can tell you what to run
[20:24:04] <bjs> what if they tell you to run something dangerous :)
[20:24:30] <[Syntax]> well its gonna be running on their pi..
[20:24:36] <bjs> [Syntax]: ah okay
[20:24:58] <bjs> [Syntax]: well your approach is a little "hacky", there are 'real' plugin systems out there that do similar things so it's not totally unusual
[20:25:24] <bjs> [Syntax]: either way, when you run the file by importing it you get back a module object that you can access the function on and your code just wasn't using that object. That's why it got the NameError
[20:25:42] <sudorm> bjs, never heard of the module site, what does it do?
[20:25:52] <bjs> sudorm: it prints out where Python looks for packages :)
[20:26:15] <bjs> (well, the `site` module is also responsible for a lot of the setting up of looking for the packages in various places)
[20:26:24] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 258 seconds)
[20:26:37] *** Joins: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr)
[20:27:01] <VaniaPy> how can i sort a list of time values?
[20:27:08] <bjs> VaniaPy: what are "time values"?
[20:27:08] <[Syntax]> well I thought I was close.. but Im totally lost now..
[20:27:11] <sudorm> bjs, also now that I found that it's in ../lib/.../lib-dynload, how would you change Sqlite shared lib by a new one?
[20:27:20] <sudorm> I could just replace the file, but it could be dangerous
[20:27:42] <[Syntax]> Im about ready to just give up on publishing this thing, and just build a working one for me.. non modular.. and be done with it..
[20:27:50] <bjs> sudorm: typically if it's the version of Python that came with your OS, I never touch it because it came with your OS because your OS is using it somehow
[20:27:50] <VaniaPy> bjs let's say i have a list with time and date and i need to sort them by the latest
[20:27:59] <VaniaPy> i tried sorted
[20:28:04] <bjs> VaniaPy: but what is a "time and date", a string? a number? a datetime.datetime object?
[20:28:09] <bjs> VaniaPy: oh okay, you tried sorted, what happened?
[20:28:11] <VaniaPy> but i'm getting  TypeError: '<' not supported between instances of 'float' and 'datetime.datetime'
[20:28:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[20:28:20] *** Joins: hposca (~hposca@node-1w7jr9phoke2u784enbks8vht.ipv6.telus.net)
[20:28:37] <bjs> VaniaPy: okay, maybe you should show what you're doing, because it just sounds like your "time and date"s weren't _all_ "time and date"s
[20:28:42] *** Joins: wyclif (~wyclif@user/wyclif)
[20:28:42] *** Joins: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de)
[20:29:09] <sudorm> bjs, exactly
[20:30:05] *** Joins: Komu (~Komu__@2a02:3037:410:a07a:2c30:6ac3:176a:6ecd)
[20:30:19] *** Quits: eldenring0 (uid506233@id-506233.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[20:30:21] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[20:31:00] *** Joins: sectec84 (~sectec84@24.18.109.173)
[20:31:28] <bjs> sudorm: I would hope that sqlite3 (the Python package) would look for a version installed globally before falling back to that .so though,  although I'm not 100% on that
[20:32:55] <bjs> wait I'm being silly here,  the .so that you're looking at in the lib-dynload is the Python _sqlite3 shared object (aka the thing you get when you `import _sqlite3`)
[20:33:06] <bjs> if that's the .so you're looking at
[20:33:16] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:33:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[20:34:09] *** Joins: wyclif (~wyclif@user/wyclif)
[20:34:26] *** Joins: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[20:34:48] *** Joins: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[20:36:24] <[Syntax]> bjs how would I import the file using import if I do import variable * it looks for a file named "variable" to import
[20:36:31] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:36:41] <bjs> [Syntax]: your __import__ works fine, it doesn't matter which import you do you just need to use the object
[20:36:53] <bjs> [Syntax]: like when you `import math` you can't just `print(sqrt(16))` you have to `print(math.sqrt(16))`
[20:37:01] *** Quits: syb0rg (~syb0rg@184.170.242.152) (Quit: Client closed)
[20:37:28] <[Syntax]> but that loop is importing multiple files they cant all be imported under the same name either..
[20:37:31] <bjs> [Syntax]: like, `print(new_module.get_whatever_sensor(...))`
[20:37:53] <bjs> [Syntax]: well, then save them to different names (or to a list)
[20:37:56] <[Syntax]> new_module gets overwritten 5 times..
[20:38:10] <bjs> [Syntax]: how do you know _which_ module contains the function you want to call?
[20:38:50] <[Syntax]> database field that has the types of data each file can provide
[20:39:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:39:09] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (Read error: Connection reset by peer)
[20:39:41] *** Joins: wyclif (~wyclif@user/wyclif)
[20:40:04] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[20:41:34] *** Quits: bitrot (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs) (Quit: Leaving)
[20:41:51] <sudorm> bjs, do you mean "import sqlite3" does in fact "import _sqlite3". why?
[20:42:10] <bjs> sudorm: roughly because sqlite3.py goes `import _sqlite3`
[20:42:22] <nedbat> [Syntax]: can you give us a link to your code that isn't working? You had said you were using __import__, right?
[20:42:30] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:43:17] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[20:43:30] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[20:43:32] <bjs> sudorm: and _sqlite3 is a Python (but written in C) module that defines e.g. the Python Connection() class and such, and *it* is what uses sqlite3 (the real, not Python, library)
[20:43:57] <sudorm> bjs i'm a bit lost
[20:44:25] <sudorm> sqlite/dbapi2.py goes like "import _sqlite3" (the latter is C compiled)
[20:44:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:44:32] <sudorm> where is this _sqlite3 compiled code?
[20:45:12] *** Joins: wyclif (~wyclif@user/wyclif)
[20:45:18] <bjs> sudorm: the .so file you were looking at earlier one, the one that had "cpython" in its name is that.
[20:45:31] <bjs> i think :)
[20:45:41] <sudorm> bjs: ohhhhhhh so this .so is not the sqlite shared library
[20:45:56] <sudorm> it's the C compiled part of Python stdlib for _sqlite3
[20:45:57] <bjs> sudorm: I am not entirely sure
[20:46:16] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:544f:ff3e:f177:8d6c)
[20:47:20] *** Joins: Barones (~Barones@2804:48dc:8500:0:14c8:a0:c616:44e1)
[20:47:27] *** Joins: nmoura (~nmoura@177.192.16.58)
[20:47:46] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Client Quit)
[20:48:02] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[20:48:14] *** Joins: xkuru (~xkuru@user/xkuru)
[20:49:21] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 255 seconds)
[20:49:35] *** Joins: thiras (~thiras@user/thiras)
[20:49:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[20:49:58] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:544f:ff3e:f177:8d6c) (Client Quit)
[20:50:26] <sudorm> bjs, i juste posted this: https://stackoverflow.com/questions/68472969/duplicate-the-built-in-sqlite3-module-into-another-one-to-use-a-newer-version-o
[20:50:43] *** Joins: wyclif (~wyclif@user/wyclif)
[20:51:44] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[20:51:53] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[20:52:43] *** Joins: duckmcscrooge (~bsantanad@89.45.224.117)
[20:53:17] *** Parts: duckmcscrooge (~bsantanad@89.45.224.117) ()
[20:53:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[20:54:02] *** Joins: Intruder777 (~Intruder7@user/intruder777)
[20:54:05] *** Parts: Intruder777 (~Intruder7@user/intruder777) ()
[20:54:17] *** Quits: sudorm (~sudorm@lfbn-orl-1-1760-187.w90-107.abo.wanadoo.fr) (Read error: Connection reset by peer)
[20:54:31] *** Joins: upsala (~zcb@185.213.155.160)
[20:54:58] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-27.dsl.bell.ca) (Ping timeout: 240 seconds)
[20:55:01] <bjs> sudorm: if you just want to see if your SQLite3 version is what's being used you can just print https://docs.python.org/3/library/sqlite3.html#sqlite3.sqlite_version
[20:55:09] *** Quits: rsx (~dummy@ppp-188-174-131-253.dynamic.mnet-online.de) (Quit: rsx)
[20:55:16] <bjs> I can't find how Python chooses which one on the system to use though
[20:55:21] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[20:55:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[20:55:59] <bjs> but like I said, it's probably just looking through the standard places to find the globally installed one
[20:56:01] <bjs> oh they've gone :)
[20:56:13] *** Joins: wyclif (~wyclif@user/wyclif)
[20:56:13] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 246 seconds)
[20:56:33] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[20:56:37] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Client Quit)
[20:58:17] *** vd is now known as v2d
[20:59:01] *** Quits: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[21:01:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[21:01:38] *** Joins: andrewSC (~andrewSC@95.179.141.168)
[21:01:41] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[21:01:44] *** Joins: wyclif (~wyclif@user/wyclif)
[21:02:19] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[21:02:30] *** Joins: pnoud (~pnoud@user/pnoud)
[21:02:43] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:03:45] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 2.3)
[21:05:37] *** Joins: rsrx (~rsrx@103.225.150.81)
[21:06:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[21:07:15] *** Joins: wyclif (~wyclif@user/wyclif)
[21:07:21] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[21:07:53] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:08:02] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:544f:ff3e:f177:8d6c)
[21:08:59] *** Joins: Intruder777 (~Intruder7@user/intruder777)
[21:09:06] *** Parts: Intruder777 (~Intruder7@user/intruder777) ()
[21:13:44] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[21:14:51] *** thm_ is now known as thm
[21:15:22] *** Quits: andrewSC (~andrewSC@95.179.141.168) (Changing host)
[21:15:22] *** Joins: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC)
[21:15:54] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[21:15:54] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 255 seconds)
[21:16:35] *** Joins: tannerstirrat (~tannersti@c-76-25-59-209.hsd1.co.comcast.net)
[21:16:57] <tannerstirrat> i've got one method in a class that i'm using to select another method as a part of initialization
[21:17:01] <tannerstirrat> and i'm getting an error: Incompatible return value type (got "function", expected "Callable[..., Any]")
[21:17:03] <tannerstirrat> with mypy
[21:17:18] <tannerstirrat> is there something obvious to check here, or is there something with mypy where it isn't great at this sort of indirection?
[21:18:11] <tannerstirrat> where the selector is typed as: def _choose_perspective_strategy(self, perspective_type: PerspectiveType) -> Callable:
[21:18:23] *** Joins: Celeo (~Celeo@user/celeo)
[21:18:34] *** Joins: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com)
[21:18:34] <tannerstirrat> and the function call that it's grumpy about is typed as: def _choose_group_perspective_strategy(self, perp_id: str) -> Callable:
[21:18:36] *** Quits: gusto (~Augustus@2620:149:e0:6002::3b) (Quit: Textual IRC Client: www.textualapp.com)
[21:18:58] *** Joins: pnoud (~pnoud@user/pnoud)
[21:19:02] <tannerstirrat> mypy doesn't complain about the typing on `choose_group_perspective_strategy`, but it does complain about what's returned from it
[21:19:16] <tannerstirrat> in `_choose_perspective_strategy`
[21:19:59] <BrokenCog> hellos.  I'm using the ncurses library and recently line characters are no longer displayed correctly.  the terminal is via PuTTY;  I'm wondering if there is some sort of caching of bad state info? or what PuTTY terminal settings to fiddle with?
[21:19:59] <SnoopJ> tannerstirrat, Callable is a generic, so annotating Callable instead of Callable[..., ReturnT]
[21:20:05] <SnoopJ> might be the problem*
[21:20:11] *** Joins: MaxFury16 (~MaxFury@139.5.251.79)
[21:20:15] <tannerstirrat> hmm
[21:21:12] *** ghost43_ is now known as ghost43
[21:22:06] *** MaxFury16 is now known as MaxFury
[21:22:08] <tannerstirrat> SnoopJ: is mypy smart enough to read the type annotations of a method?
[21:22:20] <SnoopJ> tannerstirrat, yes
[21:24:16] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[21:24:21] *** Joins: Betal (~Beta@user/betal)
[21:24:27] *** Quits: MaxFury (~MaxFury@139.5.251.79) (Quit: Client closed)
[21:24:39] *** Joins: MaxFury (~MaxFury@139.5.251.79)
[21:25:28] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:e4b7:9e54:e07b:5e56)
[21:26:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:26:42] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 255 seconds)
[21:27:02] *** Joins: wyclif (~wyclif@user/wyclif)
[21:28:18] *** Quits: boxelephant (~boxelepha@209.143.87.130) (Ping timeout: 268 seconds)
[21:29:49] *** Quits: CodenameTim (~CodenameT@154.21.114.49) (Ping timeout: 246 seconds)
[21:30:43] *** Joins: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi)
[21:31:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:31:56] *** Joins: boxelephant (~boxelepha@209.143.87.130)
[21:32:32] *** Joins: wyclif (~wyclif@user/wyclif)
[21:32:43] *** Quits: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca) (Quit: Client closed)
[21:34:23] <tannerstirrat> SnoopJ: the weird thing is that inlining the logic in `_choose_group_perspective_strategy` made it happy
[21:34:37] <tannerstirrat> i think there might be something weird about a method returning another method in mypy?
[21:35:39] *** Quits: rendar (~rendar@user/rendar) ()
[21:35:46] <anddam> I tried to upgrade pip for what I thought was an user install of 3.8.9 on windows 10, I got https://gist.github.com/adab4d/43ed7e903ffd40ee5173931e203a64a9
[21:35:58] <Jigsy> An e-mail from Code Academy!
[21:35:59] <Jigsy> >Python 2 vs. Python 3: Which should you learn?
[21:36:09] <Jigsy> Why would anyone even be advocating learing Python 2?
[21:36:47] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[21:36:50] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 265 seconds)
[21:36:55] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[21:37:13] *** Joins: pnoud (~pnoud@user/pnoud)
[21:37:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[21:37:47] <anddam> that path is in my user home folder, despite the error I ran the command using 'python -m pip' again and pip is now 21.1.3, is that expected?
[21:37:57] <ttkap> so they can sell you a second course about migrating your code from python2 to python3 :)
[21:38:04] *** Joins: wyclif (~wyclif@user/wyclif)
[21:38:21] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[21:38:42] <nedbat> Jigsy: they got you to read the email, and they got you to repeat their name here.  email succeeded.
[21:38:58] <SnoopJ> tannerstirrat, I don't think there's enough information to conclude that mypy is doing the wrong thing with the annotation, but it's hard to say without seeing the code. If you think it's a bug, you should file it with them if it isn't open already.
[21:39:02] <Jigsy> I didn't read the e-mail. I just saw the header in my inbox.
[21:39:08] <Jigsy> I generally delete crap on principle. :P
[21:39:21] <tannerstirrat> SnoopJ: yeah, makes sense.
[21:39:26] *** Quits: tannerstirrat (~tannersti@c-76-25-59-209.hsd1.co.comcast.net) (Quit: WeeChat 3.2)
[21:40:41] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[21:40:41] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Client Quit)
[21:41:06] *** Joins: skapata (~Skapata@user/skapata)
[21:42:18] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[21:43:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:43:34] *** Joins: wyclif (~wyclif@user/wyclif)
[21:44:31] *** Joins: fivegruel (~fivegruel@HSI-KBW-095-208-248-149.hsi5.kabel-badenwuerttemberg.de)
[21:47:38] *** Quits: MaxFury (~MaxFury@139.5.251.79) (Quit: Client closed)
[21:48:50] <NoImNotNineVolt> so this is my first time trying to use Micro Focus Fortify Static Code Analyzer with a python project and :(
[21:49:49] <jim> is the entire problem description inside the :(?
[21:49:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:50:15] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:703d:a760:f1e7:a405) (Quit: Leaving)
[21:50:33] <NoImNotNineVolt> basically.
[21:50:38] *** Joins: wyclif (~wyclif@user/wyclif)
[21:50:49] <NoImNotNineVolt> it just seems like a square peg / round hole problem.
[21:50:55] <theseb> nedbat: what is python's stand regarding backwards compatibility?  If removing/changing something makes sense will they do it?
[21:51:00] <NoImNotNineVolt> corporate requirement for "everything" to get a static scan using this tool.
[21:51:26] <theseb> nedbat: i don't know much about Java and Windows but i think they suffer from 100% devotion to backward compatibility....not sure if python is anything like that
[21:51:29] <jim> wel, I think you should say more about the problem: is it not behaving as you expect? what do you expect? what does it do instead?
[21:52:02] <NoImNotNineVolt> i'm more rambling/complaining than seeking help, sorry :P
[21:52:27] <p-i-> VSCode's .ipynb thing has a bug. If I 'await foo' the linter complains 'await must be in async func'. But the .ipynb is in asyncio context. Has runloop. So code executes fine. Any way to fool the linter so it doesn't spatter squiggles all over my beautiful working correct code?
[21:52:42] <grym> theseb: python cheerfully bins old things, often to much grousing
[21:53:18] *** Quits: shailangsa (~shailangs@host86-186-142-108.range86-186.btcentralplus.com) (Ping timeout: 268 seconds)
[21:53:34] <NoImNotNineVolt> there doesn't seem to be explicit support for tox, for one. so it's not even clear how to integrate it with out build tools.
[21:54:09] *** Quits: szymon (~ugh@staticline-31-183-187-232.toya.net.pl) (Quit: szymon)
[21:54:16] <theseb> grym: i like that!  just like linux kernel....keep it clean and mean and lean
[21:54:23] <SnoopJ> theseb, there are breaking changes sometimes, but they're generally signaled far in advance and documented.
[21:54:43] <theseb> SnoopJ: oh sure..that's just being polite...i'm ok w/ that
[21:55:07] <SnoopJ> curious way to put it
[21:55:40] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[21:55:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[21:56:07] *** Quits: computeiro (~Wender@189.37.65.69) (Remote host closed the connection)
[21:56:09] *** Joins: wyclif (~wyclif@user/wyclif)
[21:56:23] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[21:56:38] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[21:58:19] *** Quits: v2d (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[21:58:32] <octav1a> I have another numpy / shared memory question if anyone would like to take a crack at it.
[21:58:39] <octav1a> oops pressed enter too fast.
[21:59:17] *** Quits: bambams__ (~bambams@user/bambams) (Ping timeout: 255 seconds)
[22:00:17] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[22:00:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[22:01:00] <octav1a> in my child processes I have something like this: https://bpa.st/TLQQ (get the reference to the shared memory, and then use it for the rest of the program. It's a fairly large array: (90338345,). I expect this function to return near instantly -- it should not be copying all of the array contents to thechild process to return.
[22:01:18] *** Joins: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca)
[22:01:41] *** Joins: wyclif (~wyclif@user/wyclif)
[22:01:48] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Ping timeout: 255 seconds)
[22:01:48] <octav1a> However what I find is that this "return" like will run for a _very_ long time, whereas is I replace it with "return np_array[:10000] , it will go faster.
[22:01:50] *** Joins: computeiro (~Wender@189.37.65.69)
[22:01:55] <jim> NoImNotNineVolt, https://mk4raoz.medium.com/fortify-static-code-analyzer-6a09cee0ec45
[22:01:55] <octav1a> line*
[22:02:15] <NoImNotNineVolt> i think i just got it to work, somewhat. but thanks, i'll take a look
[22:02:22] <octav1a> I thought this would be passed by reference, why does the return time seem to sepend on the array size?
[22:02:26] *** Parts: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) ()
[22:02:30] <octav1a> depend*
[22:02:39] *** Parts: nickodd (~nickodd@user/nickodd) ()
[22:03:15] <bjs> octav1a: because it's a different process, you cannot deal with references when there's another process
[22:03:28] <NoImNotNineVolt> er, jim, that page has no mention of python :P
[22:03:36] <NoImNotNineVolt> let alone tox.
[22:04:00] <octav1a> bjs: the work using that shared memory is inside the other processes, and used only by that other process.
[22:04:12] <bjs> octav1a: but here you're returning the numpy array
[22:04:13] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[22:04:35] <octav1a> yeah, I see my understanding of "returning the numpy array" is off.
[22:04:36] <NoImNotNineVolt> but good tips at the bottom with -show-files and -show-loc, nice.
[22:04:36] <NoImNotNineVolt> thanks.
[22:04:38] <bjs> if it's shared memory, why are you returning it?  I assumed by your comments that this return was the child Process's `target`
[22:04:56] <bjs> so if the numpy array was shared, why would the Process need to `return` it at all?
[22:05:06] <octav1a> bjs: I would like to now have to do the lines in this function, in every place I need to access the shared memory.
[22:05:12] <octav1a> to not have to *
[22:05:21] <SnoopJ> octav1a, it would help a lot to see this code in the context of its use
[22:05:23] <NoImNotNineVolt> seems that -show-files is only listing setup.py. lol.
[22:05:35] <theseb> Is this ok?   [e.delete() for e in bunch_of_objects] ??? My point is...I don't care about output of e.delete()....i only care that list comprehensions are more compact than a for loop?
[22:05:37] <SnoopJ> nothing looks amiss with what you've shown us here
[22:05:40] *** Quits: Celeo (~Celeo@user/celeo) (Ping timeout: 256 seconds)
[22:05:42] <SnoopJ> but you haven't shown us much
[22:05:43] <jim> NoImNotNineVolt, looked like a cheatsheet to me
[22:05:43] <octav1a> this "return" is not of any final result, it's just to get a handly on the shared memory / numpy object, inwide th eworker process.
[22:05:51] <grym> theseb: typically that's considered a smell
[22:05:52] <bjs> octav1a: this `return` isn't really doing any work
[22:05:57] <bjs> it's only the very top return of the process
[22:05:57] <theseb> For this question...just imagine the objects have some destructor method called delete
[22:06:01] <grym> theseb: list comprehensions should build new lists that you use; you're not doing that
[22:06:10] <bjs> octav1a: you should be able to do this once, and save it to a variable to re-use in the process over and over
[22:06:12] <theseb> grym: exactly!!!!
[22:06:17] <theseb> grym: but why is that bad?
[22:06:22] <SnoopJ> octav1a, are there a bunch of threads in the process that executes this code, maybe?
[22:06:36] <theseb> grym: we both agree it more compact than a standard for loop...isn't that reason enough to do that?
[22:06:41] <NoImNotNineVolt> god, auditworkbench is a gtk app, this is ridiculous :P
[22:06:46] <NoImNotNineVolt> i'm on a headless server via ssh
[22:06:50] <grym> theseb: no, if i'm going to go through the trouble of making a list, i will want to use it
[22:06:55] <grym> a list of Nones is kind of silly
[22:06:59] <grym> why make it?
[22:07:02] <octav1a> bjs: to saving to a variable will do something different than returning (what I thought was) the reference?
[22:07:03] <SnoopJ> hmm, actually, nevermind that, if it were GIL contention I would think it'd be any one of those lines stalling
[22:07:11] <octav1a> I can use an instance variable instead..
[22:07:12] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 245 seconds)
[22:07:18] <theseb> grym: because it is a for loop in one line
[22:07:20] <SnoopJ> octav1a, Python doesn't have references
[22:07:38] <grym> theseb: it is not
[22:07:39] <theseb> grym: and if i don't assign the list to a var it gets garbage collected
[22:07:53] <SnoopJ> that code creates a new object (an ndarray) and returns that object
[22:08:13] <theseb> grym: [e.do_some_work() for e in foo] <----- compact for loop in 1 line
[22:08:14] <grym> theseb: it happens to iterate over something, but if all you want to do is call a method that returns None and you'll never use those Nones, use `for ...`
[22:08:33] <octav1a> SnoopJ: please explain, if I make a list with 1 million elements and return it from a function, won't python just pass the location of the list to the caller, not copy the entire list into a new place in memory on return?
[22:08:39] <grym> theseb: like i said, stylistically your spelling is not preferred
[22:08:51] <SnoopJ> octav1a, it does neither of those things, it returns the *object*
[22:09:03] <theseb> grym: what do you mean "spelling" ?
[22:09:06] <grym> theseb: you're making a list of things you'll never use and throwing that list away immediately
[22:09:11] *** Joins: fannagoganna (uid110488@id-110488.tinside.irccloud.com)
[22:09:13] <Yhg1s> octav1a: yes, Python doesn't copy anything. Yes, everything is a reference.
[22:09:13] <theseb> grym: i don't deny that
[22:09:17] <grym> theseb: spelling as "way of expressing an operation"
[22:09:21] <theseb> ah
[22:10:14] <NoImNotNineVolt> aha, i think i figured out what i was doing wrong. got it actually translating/analyzing all the python now, fantastic.
[22:10:16] <octav1a> SnoopJ: I can agree that the code makes a new instance of an ndarray object, but it's backed with a buffer which should not be copied.
[22:10:33] <octav1a> but yet it appears to be being copied.
[22:10:40] *** Joins: Paul (~Paul@user/paul)
[22:10:42] <SnoopJ> octav1a, do you have reason to believe there's a copy occurring, or is that a guess because it's taking a lot of time?
[22:10:57] <Yhg1s> octav1a: passing objects around doesn't copy anything.
[22:11:22] <octav1a> SnoopJ: yes, it was a few tests with a massive time difference just be changing this return line to subset to the first 10,000 elements of the array, as I mentioned above.
[22:11:27] <Yhg1s> octav1a: but numpy is certainly free to copy things from the buffer. How, exactly, are you creating the ndarray?
[22:11:47] <SnoopJ> Yhg1s, they shared their code and it looks like they're using `buffer` correctly to me: https://bpa.st/TLQQ
[22:12:00] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[22:12:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:12:12] *** Quits: radu2424 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[22:12:15] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[22:12:42] *** Joins: wyclif (~wyclif@user/wyclif)
[22:13:01] <octav1a> If I do an interrupt during the very long return line, this is the hangup I get: https://bpa.st/QXOQ
[22:13:05] *** Quits: rsrx (~rsrx@103.225.150.81) (Ping timeout: 265 seconds)
[22:13:15] <Yhg1s> As far as I know, that still copies the data into the array, so that the array owns the data. It's not an array-shaped view onto the buffer, it's copying the data from the buffer.
[22:13:38] *** Joins: radu24240 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[22:13:40] <Yhg1s> octav1a: that just means it's waiting for a lock.
[22:13:41] <SnoopJ> Yhg1s, if that's the case, multiprocessing's docs are very wrong about this
[22:14:10] <octav1a> Yhg1s: but I want actual shared memory, a ndarray stored in one place, and the ability to read slices of it from the other processes.
[22:14:26] <octav1a> This should not need to copy the whole array to read slices.
[22:14:33] <Yhg1s> SnoopJ: where in multiprocessing does it claim numpy would not be copying data?
[22:14:36] <octav1a> or why even call it shared memory?
[22:16:30] <bjs> octav1a: you can't have *Python* objects in shared memory, because Python objects are made of lots of references
[22:16:43] <theseb> Yhg1s: do you a python dev?  i.e. do you work on the releases and/or add new features?
[22:16:46] <theseb> are*
[22:16:50] <bjs> octav1a: but you can make the buffer that numpy stores the actual data in shared
[22:17:15] <SnoopJ> Yhg1s, hmm, it doesn't claim that it doesn't copy, but the example it shows does exactly this, and I thought if you specify `buffer` you get an object with OWNDATA=False whose `data` member points there, but maybe I'm mistaken.
[22:17:15] <octav1a> bjs: indeed, that's what I'm trying to do.
[22:17:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[22:17:39] <octav1a> the small numpy object overhead can be disregarded
[22:17:56] <Yhg1s> theseb: I don't know why you ask this.
[22:18:01] <bjs> octav1a: but if you try pass the *numpy* object between processes, then I can see why that would go wrong
[22:18:06] <Yhg1s> SnoopJ: yeah, you're right, it is supposed to work that way. numpy's docs aren't clear about this.
[22:18:11] *** Joins: wyclif (~wyclif@user/wyclif)
[22:18:19] *** Joins: greedom (~greedom@2001:16b8:2ecc:6100:5e86:e87e:285:914e)
[22:18:27] <octav1a> bjs: yes, I understand that, this is entirely in one process, a worker, though.
[22:18:28] <theseb> Yhg1s: you seem so knowledgeable about python...wondered if that comes from working with guido and the other inner crew
[22:18:59] <SnoopJ> Yhg1s, yea, definitely room for more clarity. Do you agree with my hunch that this isn't a copy, but might be lock contention? I wonder if the spelling where they slice it just reduces the data burden on the whole system and the lock clears faster...
[22:19:08] <bjs> octav1a: okay then that `return` you showed earlier seems like it wasn't doing any work, and there shouldn't have been any coping, nor will saving to variables or anything like that. just "normal" python behaviour inside the process
[22:19:52] <Yhg1s> SnoopJ: it's not a copy, *except* if the object created is being passed *to another process*
[22:20:02] *** Quits: drant (~drant@2a05:f480:1c00:d82::) ()
[22:20:05] <Yhg1s> It's certainly not 'return' that's causing a copy.
[22:20:21] * SnoopJ nod
[22:20:22] <bjs> octav1a: obviously if you make that function return [:1000] or something the whole program will probably go faster anyway
[22:21:09] <octav1a> Right, it's just that's the only change I've introduced.
[22:21:16] <shan> Does python have tail call optimisation?
[22:21:19] <bjs> shan: no
[22:21:20] <SnoopJ> shan, no
[22:21:25] <shan> okay thanks
[22:21:27] *** Joins: derelict (~derelict@user/derelict)
[22:21:35] <theseb> For anyone that knows calculus..imho python is a "local maximum" of language simplicity...what i mean is.....it seems to have become about as simple as a lang can get....i don't see any competitor dethroning it for a long time....agree?
[22:21:49] <bjs> octav1a: sure but if you have a big program that uses numpy arrays, and you just arbitrarily make one of the arrays much much smaller then the whole program will probably just run faster because the arrays are smaller
[22:22:02] <SnoopJ> octav1a, it could be a very big change based on the level of inter-dependency you have silhouetted for us previously. It could mean the difference between a noticeably long wait time for a lock and one that isn't perceptible.
[22:22:04] <bjs> octav1a: so maybe that's all that happened? It's hard to tell
[22:22:23] <mefistofeles> theseb: I don't think it is that simple (pun intended)
[22:22:35] *** Joins: djapo (~archangel@user/djapo)
[22:22:49] <Yhg1s> octav1a: or perhaps what's going on is that you're calling something in the wrong process and passing around the numpy array, rather than the shared buffer, across process boundaries.
[22:22:55] <theseb> mefistofeles: what's wrong w/ my claim?
[22:22:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:23:14] *** Quits: ST47 (~ST47@wikimedia/st47) (Ping timeout: 265 seconds)
[22:23:17] <bjs> theseb: not sure that Python can really be called "simple"
[22:23:22] <bjs> have you looked at the rules for attribute lookup :)
[22:23:28] <SnoopJ> Yhg1s, would that end up calling __copy__ on the ndarray or somesuch, which ends up copying the data member?
[22:23:41] <bjs> SnoopJ: it has to pickle it if you send it from one to another
[22:23:41] *** Joins: wyclif (~wyclif@user/wyclif)
[22:23:48] <mefistofeles> theseb: I mean, you could argue under some simplicity/complexity metrics that languages like brainfuck are actually much more simple. And that is, it depends on how you are actually "measuring" complexity/simplicity, which is a really hard thing to do and it's commonly pretty subjective for real-life scenarios.
[22:23:50] <bjs> which will end up copying the buffer for a numpy object probably
[22:23:52] <Yhg1s> SnoopJ: I imagine it would end up pickling the numpy array.
[22:23:57] <theseb> bjs, mefistofeles: i have answer to that...python is as simple as a "general purpose beginner friendly" can get....let's all ignore Scheme for now
[22:24:02] <SnoopJ> well, if it's just the ndarray object, that's not much
[22:24:17] <theseb> bjs: mefistofeles : einstein said we should make things as simple as possible but no simpler
[22:24:21] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[22:24:42] <SnoopJ> but I know multiprocessing does A Lot and if that includes explicitly trying to copy, I can see how that might duplicate the buffer
[22:25:18] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Remote host closed the connection)
[22:25:22] <Yhg1s> SnoopJ: pickle doesn't know shared memory from Adam, so it would serialize the buffer, too.
[22:25:29] <SnoopJ> makes sense
[22:25:42] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Quit: Leaving)
[22:26:04] <SnoopJ> octav1a, ^ if you pass the resulting ndarray around, you probably *will* be copying data. We can't tell you whether that's happening from the code we've seen.
[22:26:27] <bjs> theoretically here you could be clever since the mmap'd region should be copied over too?  although that would require multiprocessing, pickle and numpy to all collaborate
[22:26:33] <bjs> which seems unlikely
[22:26:38] <theseb> mefistofeles: well ok ..i suppose you could make a case that simplicity is a slippery definition.....What is indisputable is that it is simple for MANY people's definition of simplicity as shown by its popularity
[22:27:00] <theseb> mefistofeles: at least in my world it "feels" like the right kind of simplicity for me
[22:27:03] <theseb> fwiw
[22:27:05] <bjs> theseb: idk, Python isn't that simple of a language, it depends on how you define simple
[22:27:12] *** Joins: codl (~codl@user/codl)
[22:27:23] <bjs> We certainly see the not-simpleness of Python trip up new programmers so very often here
[22:27:25] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:27:28] <SnoopJ> bjs, yea, it's possible but I think not probable? easy enough to test, anyway. Since interrupting it hits a lock my money is still on lock contention somewhere else in what sounds like a very big, complicated program.
[22:27:32] *** Joins: nmoura (~nmoura@177.192.16.58)
[22:28:06] <theseb> bjs: yes but can you name a general purpose lang that is simpler?
[22:28:15] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:544f:ff3e:f177:8d6c) (Quit: Leaving)
[22:28:21] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:e4b7:9e54:e07b:5e56) (Ping timeout: 255 seconds)
[22:28:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:28:41] <bjs> theseb: how do you define "simple"? Java is probably "simpler" for many definitions of simple
[22:28:56] <theseb> bjs: srsly?
[22:29:01] <bjs> theseb: Yes?
[22:29:02] <theseb> bjs: when is java simpler than python
[22:29:03] <SnoopJ> theseb, BASIC :)
[22:29:06] <bjs> I don't say it's better
[22:29:12] *** Joins: wyclif (~wyclif@user/wyclif)
[22:29:18] <theseb> bjs: in my workd simpler == better
[22:29:23] <theseb> world*
[22:29:34] <theseb> not sure why anyone would not think simpler == better
[22:29:36] <SnoopJ> Strong argument to be had that Lua is simpler, too
[22:29:43] <theseb> i mean..think simpler != better
[22:29:45] *** Quits: greedom (~greedom@2001:16b8:2ecc:6100:5e86:e87e:285:914e) (Ping timeout: 250 seconds)
[22:29:45] <bjs> theseb: because they're different words with different meanings?
[22:29:56] <mefistofeles> :)
[22:30:08] <SnoopJ> "better" is in my experience mostly a waste of time: I encounter too many kinds of problem context.
[22:30:32] *** Joins: Blankspace (~androirc@user/blankspace)
[22:30:42] <SnoopJ> YMMV, but I see people spinning their wheels trying to pursue The Best Thing more often than I see people pragmatically using the tool that fits best to the work they want to do and the resources they have at their disposal.
[22:30:43] <theseb> bjs: in programming you want things as simple as possible....i.e. you don't want any unnecessary complexity yes?
[22:31:05] <SnoopJ> (fits best in their personal subjective view, that is)
[22:31:06] <bjs> theseb: again it depends how you define simple
[22:31:25] <bjs> does simple mean fewest rules?  lambda calculus is simple.
[22:31:32] *** Joins: Celeo (~Celeo@user/celeo)
[22:31:55] <theseb> bjs: i agree....scheme is also simpler than python....yet it hurts many people's brains
[22:31:56] <NoImNotNineVolt> <module 'jq' from '/home/username/projectname/.tox/unittest/lib/python3.7/site-packages/jq.cpython-37m-x86_64-linux-gnu.so'>
[22:32:05] <bjs> theseb: so scheme is better than Python?
[22:32:16] <NoImNotNineVolt> hm. so, obviously jq is a native dependency, but how does pyjq work?
[22:32:17] <theseb> bjs: so it might be in part *mysterious* why python "feels simpler" to more people
[22:32:33] <NoImNotNineVolt> is there no actual python module anywhere, just the shared object binary?
[22:32:57] <SnoopJ> NoImNotNineVolt, the binding layer is written in Cython: https://github.com/doloopwhile/pyjq/blob/master/_pyjq.pyx
[22:33:09] <bjs> NoImNotNineVolt: https://pypi.org/project/jq seems to be a Cython extension
[22:33:09] <theseb> bjs: to be precise..scheme has simple syntax...logic would conclude it *SHOULD* feel simpler than python but in practice for many it doesn't seem to do that...again not 100% sure why
[22:33:20] <theseb> simpler*
[22:33:20] <bjs> theseb: because simple != better :)
[22:33:46] <NoImNotNineVolt> so, without needing to learn what cython is, presumably this will inevitably foil any sort of static analysis tool.
[22:33:47] *** Quits: Paul (~Paul@user/paul) (Quit: Leaving)
[22:33:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:33:55] <theseb> bjs: ok..than what word am i looking for if not "simpler"?
[22:34:00] <theseb> bjs: "easiest" ?
[22:34:00] <bjs> theseb: "better"
[22:34:15] *** Joins: Paul (~Paul@user/paul)
[22:34:24] <SnoopJ> NoImNotNineVolt, what kind of tool? You can provide type stubs for an extension module with mypy, other tools might have similar bodges here
[22:34:42] *** Joins: wyclif (~wyclif@user/wyclif)
[22:34:47] <NoImNotNineVolt> micro focus fortify static code analyzer.
[22:34:47] *** Joins: CodenameTim (~CodenameT@154.21.28.53)
[22:34:48] <SnoopJ> and I think Cython has pretty good support for generating a module that has annotations right in place
[22:34:50] <mefistofeles> theseb: easy is also pretty subjective... tbh, it is all pretty subjective and this is just commonly a waste of time, as SnoopJ said
[22:35:09] <mefistofeles> trying to define the "better", "easier", "simpler", etc.
[22:35:17] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[22:35:22] <theseb> bjs: ok fine...i love python to pieces and i can't 100% explain why....i'll die on that hill
[22:35:31] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-149.hsi5.kabel-badenwuerttemberg.de) (Quit: Lost terminal)
[22:35:35] <bjs> theseb: Python is a good language and people like it,  I wouldn't go so far as to call it "simple" because well, it's just not objectively "simple"
[22:35:58] <SnoopJ> "simple" stops somewhere around a 555 timer, for me
[22:36:12] <bjs> theseb: one of the reasons it's nice is because of all that complexity, to build abstractions to make your life easier when using it
[22:36:18] <SnoopJ> or maybe an op-amp? :)
[22:36:28] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[22:36:29] <philipp64|work> A couple of days ago I reached out and asked about debugging some mod_wsgi.so issues… It wasn’t clear if the “mount point” (first argument) from WSGIScriptAlias /mount-point /full/path/to/script.py got trimmed from the URL that gets passed to Flask… The answer is, “yes, yes, it does indeed”.
[22:36:30] *** Joins: ST47 (~ST47@wikimedia/st47)
[22:37:18] <theseb> mefistofeles: i agree but that scares me because it shows how hard it is to do programming language theory
[22:37:26] <bjs> theseb: the complexity of the language: all those functions, and exception handling, and attribute lookup, and classes, and inheritance, and importing libraries from all over the computer, and its large and hard-to-list-everything builtin datatypes and standard library
[22:37:40] <bjs> are all there to help you, they make the language better (mostly); not worse.
[22:37:41] <philipp64|work> SnoopJ: nothing simple about analog electronics…
[22:37:43] <SnoopJ> NoImNotNineVolt, never heard of it, sounds like a question for their docs/support. Their user manual seems pretty thin on details about how they do Python
[22:37:58] <SnoopJ> philipp64|work, my personal opinion stands corrected.
[22:38:09] <theseb> mefistofeles: that would make me think it is partly luck that guido got a lot of things right...not because he was this super genius psychologist/user interface expert
[22:38:30] <philipp64|work> or maybe you’re just better at it than I am.
[22:38:33] <bjs> theseb: the language Guido designed ~25 years ago is certainly not the language you're using today
[22:38:44] <bjs> a lot has changed as people learned :)
[22:38:59] <bjs> and will continue to.
[22:39:00] <bjs> (hopefully !)
[22:39:13] <philipp64|work> I always end up with feedback, ground plane noise, crosstalk between channels, etc….
[22:39:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[22:39:19] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[22:39:20] <SnoopJ> philipp64|work, or we have different perspectives on it, because we're different people. This appears to frequently be a source of much angst.
[22:39:30] <SnoopJ> (also, it was half a joke)
[22:39:36] <theseb> bjs: i can't read this mind but i would guess he initially went with his gut and what "felt right".....as it turns out a lot of people's brains worked like his
[22:39:37] <philipp64|work> No angst here.
[22:39:54] <philipp64|work> But LM555’s rock.
[22:40:02] <SnoopJ> it's a good IC bront
[22:40:13] *** Joins: wyclif (~wyclif@user/wyclif)
[22:40:27] *** Quits: philipp64|work (~philipp64@174.27.8.12) (Quit: philipp64|work)
[22:40:34] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:40:45] <theseb> bjs: i think a lot of innovation in programming, music, painting etc is people just going with their intuition
[22:40:55] *** Joins: philipp64|work (~philipp64@174.27.8.12)
[22:42:11] <philipp64|work> back… had to restart Colloquy which is a memory pig… and doesn’t apparently use disk for saving channel traffic…
[22:43:35] <bjs> theseb: I think that view is very poetic, but perhaps doesn't quite capture all work and effort that went into studying and building different ideas and the teams of people that worked on stuff and the whole communities that build around the language which create feedback loops
[22:43:59] <theseb> Why is the "wait" command in multiprocessing called "join"?
[22:44:20] <theseb> "block" or "wait" ...anything but "join"
[22:44:24] <bjs> theseb: historically there were two commands to do concurrency, a "fork" to turn 1 process into 2
[22:44:26] <bjs> and a "join" to turn 2 into 1
[22:45:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[22:45:26] <theseb> bjs: yea....guido and gang combined lots of hard work plus intuition for when the answers weren't obvious
[22:45:28] <bjs> concurrency is riddled with terrible, just awful, terminology from decades ago
[22:45:28] <octav1a> bjs: / SnoopJ : here I am trying to expand on the problem a little more to give an idea. all of these cases I am running with just one process in the pool (so, mainthread and one pool worker) : https://bpa.st/XE7Q
[22:45:37] <bjs> just be thankful that we somehow avoided P and V :D
[22:45:43] *** Joins: wyclif (~wyclif@user/wyclif)
[22:46:26] <octav1a> So reading a 100 length data from the array works instantly at least for printing..
[22:46:42] <theseb> bjs: makes sense...thanks
[22:46:44] <octav1a> and everything seems to be happening in the worker thread based on the process names.
[22:46:54] *** Joins: audiocat (~audio@2603-8081-1800-00ad-791c-8967-7040-5249.res6.spectrum.com)
[22:47:14] <octav1a> however, it hangs doing....something, before being able to use the data returned from the runction
[22:47:21] <octav1a> function*
[22:47:31] <bjs> octav1a: something is very suspicious here, you're claiming the work happens when you go `data = shared` but this line doesn't... do anything... just a tiny amount of bookkeeping about names
[22:47:48] <octav1a> the output is what I pasted
[22:47:51] <SnoopJ> n.b. that it does not hang on the return
[22:48:08] <octav1a> it's very strange to me too or I wouldn't be asking here. :s
[22:48:14] <bjs> octav1a: is the line that is hanging `data = shared[start:end]` or `data = shared` ?
[22:48:23] <bjs> i guess it has to the first?
[22:48:29] <octav1a> yes, for both cases
[22:48:35] <octav1a> these are two runs
[22:48:36] <bjs> octav1a: it doesn't make sense for both cases
[22:48:43] <bjs> the second case doesn't do anything, how can it hang?
[22:48:56] <octav1a> well, I think it hangs o nthe print
[22:49:00] <octav1a> not the assignment
[22:49:10] <octav1a> (the line "GOT DATA")
[22:49:31] <octav1a> something there is blocking the read
[22:49:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:49:44] <bjs> octav1a: well if the data is really big it's going to take a long time to print it out
[22:50:01] <SnoopJ> print() can be dreadfully slow, yea
[22:50:12] <octav1a> it's not, it's the same data that is in BEFORE RETURN2
[22:50:20] <octav1a> I.e. 100 bytes
[22:50:32] <SnoopJ> although numpy at least tries to be careful about not giving you the entire object with the default printoptions
[22:50:33] *** Joins: nmoura (~nmoura@177.192.16.58)
[22:50:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[22:50:41] *** Joins: fluffyballoon (~fluffybal@pat-verona-l.epic.com)
[22:51:15] *** Joins: wyclif (~wyclif@user/wyclif)
[22:51:24] <octav1a> That's what I'm trying to show, in the second run, the print of the "about to be returned" data, works fine in the upper function, but after it's returned, something blocks.
[22:51:41] <bjs> octav1a: but your BEFORE RETURN2 line looks odd too, because your print() has 3 things in it, but it only prints 1
[22:51:46] <bjs> octav1a: what happened to the prints of start and end?
[22:51:47] *** Quits: ST47 (~ST47@wikimedia/st47) (Ping timeout: 245 seconds)
[22:52:16] <octav1a> sorry, I didn't save that last edit before copying
[22:52:17] <octav1a> https://bpa.st/NEQA
[22:52:21] <octav1a> this shows the small size.
[22:52:39] *** Joins: Basilic (~Basilic@228-221-190-109.dsl.ovh.fr)
[22:52:42] <Basilic> hello all
[22:52:47] <bjs> octav1a: but this output doesn't even show GETTING DATA,  so now I'm extra confused
[22:53:01] <bjs> is it that print which is hanging instead?
[22:53:03] <Basilic> I have a problem with logging that I can't solve
[22:53:25] <octav1a> all of them hang, I just didn't copy that line. >.>
[22:53:30] <SnoopJ> Basilic, perhaps we can help. Tell us about your problem
[22:53:51] <Basilic> sometime my log file was corrupt I think it's by a variable that containt non ascii char
[22:53:52] *** Quits: Madda (~Madda@208.249.9.51.dyn.plus.net) (Remote host closed the connection)
[22:53:56] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[22:54:09] <octav1a> bjs: the full entire output of the second run: https://bpa.st/66RQ
[22:54:15] <bjs> octav1a: it makes me very suspicious when the person is deleting lines from the output and the code,  what if one of those lines is the actual key ? :P
[22:54:19] <bjs> very nervous*
[22:55:03] <octav1a> bjs: it's an effort to show only what's relevant, most of the time people would get annoyed at too much output.
[22:55:11] <octav1a> Sorry about it, though.
[22:55:30] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[22:55:31] *** Joins: Madda (~Madda@208.249.9.51.dyn.plus.net)
[22:55:34] <Basilic> I log error on a serial transmission, sometime I get the print of string "" but len is more one or more
[22:55:57] *** Quits: Blankspace (~androirc@user/blankspace) (Read error: Connection reset by peer)
[22:56:03] <Basilic> I have try mystring.encode(), unicode(mystring, "utf-8")
[22:56:13] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[22:56:15] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[22:56:17] <Basilic> without result
[22:56:20] *** Joins: c10l (~c10l@89.34.167.207)
[22:56:26] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[22:56:33] <bjs> Basilic: what exactly are you printing?
[22:56:45] *** Joins: wyclif (~wyclif@user/wyclif)
[22:57:38] <Basilic> in my class the command is like: self.logger.error("My sentance of error: %s" %Variable)
[22:58:19] <bjs> octav1a: it's hard to say what's going on here, can you print other information about `shared` (or `data`) like print(type(data), data.shape, data.dtype)
[22:58:24] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Client Quit)
[22:58:25] <Basilic> if I do print ("Variable is '%s'" %Variable) I get : Variable is ''
[22:58:42] <Basilic> If I print len(Variable): 1
[22:58:44] *** Quits: rickygee (~ricky@236-53-74-65.gci.net) (Read error: Connection reset by peer)
[22:59:09] <bjs> Basilic: maybe it has an unprintable character in it
[22:59:26] <nedbat> Basilic: what does this show?  print(repr(Variable))
[22:59:42] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[22:59:46] <Basilic> yes that my think, the raisson I have test encode(encoding='utf-8', errors= replace)
[22:59:56] <Basilic> but without effect
[23:00:03] <nedbat> Basilic: or:  print("Variable is %r" % Variable)
[23:00:42] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:01:04] <Basilic> oki nedbat I will try it tomorow (the problem is at my work)
[23:01:34] <octav1a> bjs: ill check that in a sec, but here is the most revealing and annoying thing: if I do it in one function, like this: https://bpa.st/SDGQ   -- there is no problem! And it doesnt't hang!
[23:01:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:02:11] <octav1a> I'm just trying to follow basic DRY and not have those lines for the shared block read and convert to numpy pasted everwhere.
[23:02:13] <Basilic> I accept all other test to be done ;)
[23:02:16] *** Joins: wyclif (~wyclif@user/wyclif)
[23:03:44] <bjs> octav1a: none of the things you observe seem to make any sense :)
[23:04:10] *** Joins: bambams__ (~bambams@user/bambams)
[23:04:19] <octav1a> bjs: this is annoying me enough to perhaps take the time to assemble a full clean file to demonstrate this.
[23:04:21] <bjs> given what you've shown
[23:04:49] <octav1a> because it really doesn't and it steadies my sanity a little that you agree.
[23:05:29] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[23:05:37] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[23:05:46] <SnoopJ> all the more reason to be sure we're discussing the same input/output pairs
[23:06:32] <bjs> octav1a: if you make a single .py file that imports only numpy and multiprocessing or something that we could "just run" to see ourselves, that'd be the best option obviously
[23:06:58] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[23:07:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:07:11] <octav1a> bjs: yup, just need to weigh these things ebcause it will take a bit of time to make something out of this level of complexity...
[23:07:25] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[23:07:46] *** Joins: wyclif (~wyclif@user/wyclif)
[23:07:55] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-a526-3669-b829-020d.res6.spectrum.com)
[23:08:24] *** Quits: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[23:10:21] *** Quits: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi) (Quit: brylie)
[23:12:10] *** Joins: ST47 (~ST47@wikimedia/st47)
[23:12:16] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Quit: leaving)
[23:12:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[23:13:17] *** Joins: wyclif (~wyclif@user/wyclif)
[23:14:08] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 252 seconds)
[23:16:36] *** Joins: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10)
[23:17:01] *** Joins: sid-maddy (~sid-maddy@103.76.57.169)
[23:17:08] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 255 seconds)
[23:17:10] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[23:17:11] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[23:17:38] *** Quits: ttkap (~ttkap@user/ttkap) (Ping timeout: 244 seconds)
[23:18:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[23:18:47] *** Joins: wyclif (~wyclif@user/wyclif)
[23:19:18] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[23:19:38] *** Joins: ttkap (~ttkap@user/ttkap)
[23:20:24] *** Joins: nmoura (~nmoura@177.192.16.58)
[23:20:55] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[23:21:41] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[23:23:38] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-0828-a8d3-d830-5275.res6.spectrum.com)
[23:23:39] *** Quits: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Quit: WeeChat 3.1)
[23:23:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[23:23:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[23:24:10] *** doc|home is now known as doc
[23:24:15] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-a526-3669-b829-020d.res6.spectrum.com) (Ping timeout: 252 seconds)
[23:24:18] *** Joins: wyclif (~wyclif@user/wyclif)
[23:24:27] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[23:24:29] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:24:34] *** Joins: Blankspace (~abcd@user/blankspace)
[23:25:23] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:6858:e1e6:8f1d:bd31)
[23:25:26] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:26:23] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[23:26:41] <octav1a> bjs: okay, here is the most minimal I have it so far: https://bpa.st/S4MQ
[23:26:57] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[23:27:11] <octav1a> obviously there are still come parts of the academic base program left over in the names :p
[23:28:13] <octav1a> "getSequenceIsolated" is just like "getSequence" except it doesn't have part of the code places in the helper function.
[23:28:20] *** Joins: cheater (~Username@user/cheater)
[23:28:48] *** Quits: dimaa (~binchicki@165.22.169.69) (Quit: dimaa)
[23:29:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[23:29:21] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[23:29:49] *** Joins: wyclif (~wyclif@user/wyclif)
[23:29:56] <Basilic> thank nedbat I think in python-fr we found the problem a char '\0' seems the perfect guilty because I know that this char is in my transmission
[23:30:07] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[23:30:25] <Basilic> and it's product the same effect on my quick test at home
[23:31:23] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[23:31:28] *** Joins: Auron (~Auron956@user/auron)
[23:31:48] <octav1a> oh and I'm using 3.8.6 is that matters
[23:31:52] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[23:33:19] <AhmedAmerican> how to get that dataframe shape ? https://bpa.st/2MVA
[23:33:48] *** Quits: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC) (Quit: WeeChat 3.2)
[23:33:59] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[23:34:05] *** Joins: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC)
[23:34:16] <Basilic> thank for all
[23:34:19] *** Parts: Basilic (~Basilic@228-221-190-109.dsl.ovh.fr) (Leaving)
[23:34:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:34:41] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[23:34:49] <octav1a> if either of you are still not finished putting up with my I just wanted to mention I'm going to go find some lunch now but I'm of course stil very interested in figuring out what the heck is going on here so I'll be back soon...
[23:35:09] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[23:35:17] <no_gravity> Good Evening
[23:35:20] *** Joins: wyclif (~wyclif@user/wyclif)
[23:35:36] *** Quits: cheater (~Username@user/cheater) (Remote host closed the connection)
[23:35:41] <no_gravity> I just benchmarked Pythons regex engine against PHPs. Holy moly. Python is 10x slower.
[23:35:53] <no_gravity> Is there anything that causes this? Anything that can be done about it?
[23:37:20] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[23:37:51] *** Joins: Blankspace (~abcd@user/blankspace)
[23:38:03] *** Joins: pnoud (~pnoud@user/pnoud)
[23:38:33] <AhmedAmerican> no_gravity: don't blame python/regex. blame your regex lookup then. measure it's performance
[23:38:46] <no_gravity> AhmedAmerican: "My regex lookup"?
[23:39:21] <AhmedAmerican> the regex metacharacters you've used to lookup the pattern!
[23:39:21] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[23:39:21] <SnoopJ> no_gravity, the `regex` module might offer better performance. It would help to know what kind of pattern you're testing.
[23:39:45] <bjs> no_gravity: I'd not be surprised if it's much slower,  but make sure you're testing the actual same regexes rather than just the same string.  There's probably also ways to make regexes that Python can eat through faster with care
[23:40:04] <AhmedAmerican> share via regex101.com so we can check :)
[23:40:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:40:15] <Joel> using executor.map(thread_function, map(3)) to create three threads... all further arguments expect tuples. If I need to pass a string as a second arg, would you argue I make it a tuple somehow, and pass it in, or am I better off using a loop to make threads, then .map?
[23:40:24] <no_gravity> SnoopJ, bjs: This is the test I did: https://pastebin.com/raw/eGgWuEiu
[23:40:50] *** Joins: wyclif (~wyclif@user/wyclif)
[23:41:06] <SnoopJ> no_gravity, you timed each of these programs in their entirety?
[23:41:09] *** Quits: radu24240 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[23:41:10] <no_gravity> On my laptop, PHP takes 2.9s and Python takes 20.7s
[23:41:25] <bjs> no_gravity: have you actually timed to see *which* parts of the Python program are taking that time?
[23:41:28] <no_gravity> SnoopJ: Yes, just with "time <program>" on Linux.
[23:41:37] *** Joins: nickodd (~nickodd@user/nickodd)
[23:41:38] <no_gravity> bjs: Nope, just the whole thing.
[23:41:41] <SnoopJ> no_gravity, you cannot draw this conclusion from that timing data
[23:41:43] *** Joins: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il)
[23:41:45] <bjs> no_gravity: then maybe it's not regex that's slow
[23:41:46] <bjs> but something else?
[23:41:50] <bjs> like str(s)
[23:41:53] <no_gravity> bjs: Hard to imagine the loop doing nothing takes 20, right?
[23:41:55] <no_gravity> bjs: Hard to imagine the loop doing nothing takes 20s, right?
[23:42:03] <bjs> no_gravity: if it were doing nothing then yes
[23:42:04] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[23:42:13] <bjs> thankfully yours isn't doing nothing, it's converting integers to strings
[23:42:13] <no_gravity> SnoopJ: What else could take 20s in that program?
[23:42:15] <SnoopJ> (not *that* hard, __next__() isn't free)
[23:42:22] <AhmedAmerican> Linux form timer issue! Ha
[23:42:26] <AhmedAmerican> fork&
[23:42:52] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[23:43:04] <SnoopJ> no_gravity, I'm guessing the string concat is the expensive part here, but surely $i++ is going to be easier to optimize around than `for i in range(n)`. If you want to compare the regex engines, you should instrument these programs and compare the time it spends just in the regex.
[23:43:06] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[23:43:06] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[23:43:11] <bjs> octav1a: my only guess is it's the SharedMemory object caring about where in the stack it was created, but I can't think why
[23:43:25] *** Joins: radu24240 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[23:43:27] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[23:43:31] *** Joins: dalan67 (~dalan@61-68-95-57.static.tpgi.com.au)
[23:43:41] <SnoopJ> bjs, is it strange at all to pass the SharedMemory instance across the process boundary this way?
[23:43:51] <SnoopJ> strikes me as the kind of thing that could be an antipattern
[23:44:48] *** Quits: Blankspace (~abcd@user/blankspace) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[23:44:51] *** Quits: dalan6 (~dalan@27-32-31-114.tpgi.com.au) (Ping timeout: 255 seconds)
[23:44:51] *** dalan67 is now known as dalan6
[23:45:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[23:45:52] <no_gravity> SnoopJ: Changing "x+=f(i)" to "x=f(i)" changes the time from 20s to 19.5s. So that is not what is slow.
[23:46:06] <bjs> no_gravity: like I said... you're converting an int to a str
[23:46:21] *** Joins: wyclif (~wyclif@user/wyclif)
[23:46:22] <bjs> I'd fully expect that to take some time as Python isn't exactly caring about making such an operation fast
[23:46:37] *** Joins: Techcable (~Techcable@168.235.93.147)
[23:46:45] <bjs> and Python's function calls aren't exactly fast either
[23:46:47] <SnoopJ> no_gravity, if you aren't interested in properly timing it, you aren't interested.
[23:46:53] *** Quits: cer-0 (~cer-0@189.228.170.154) (Ping timeout: 258 seconds)
[23:47:45] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 250 seconds)
[23:47:46] <bjs> no_gravity: it's hard to draw conclusions from this test other than "a big loop that converts numbers to strings, calls a function and does some regex match() is slow" but it doesn't tell you which of those parts are slow;  maybe all of them are
[23:48:00] <no_gravity> bjs: Changing "x=f(i)" to "x=f("abc")" improves the time only by 10%. So that is not what makes it slow either.
[23:48:14] <SnoopJ> it's entirely possible SRE is slower, but certainly you cannot draw this conclusion from this kind of timing
[23:48:44] <bjs> no_gravity: does it print the same number?
[23:48:52] <no_gravity> bjs: Of course not.
[23:49:03] <bjs> no_gravity: I mean the PHP and the Python ones you showed originally
[23:49:08] <no_gravity> bjs: Of course
[23:49:32] <no_gravity> bjs: Thats what I print the numbers for. To make sure the programs do the same.
[23:50:24] <no_gravity> Replacing the "if re.match(...) return 1" with just "return 1" brings the time down by 90%. So I am pretty sure it is the regex engine.
[23:51:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[23:51:44] <bjs> no_gravity: okay,  so, the regex engine is slow.
[23:51:53] *** Joins: wyclif (~wyclif@user/wyclif)
[23:52:31] <no_gravity> bjs: Dead slow. Slow enough to justify rewrite Python code in PHP for production.
[23:52:37] *** Joins: cedric (~cedric@2a01:cb11:867:c200:8050:3c13:186f:dfe9)
[23:52:40] <phy1729> no_gravity: Have you tried if '3' in str   instead?
[23:52:46] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 244 seconds)
[23:53:06] <no_gravity> phy1729: I am testing regex performance because my real world application is doing a ton of regex juggling.
[23:54:21] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[23:54:23] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Remote host closed the connection)
[23:54:31] <bjs> no_gravity: probably Python's regex engine could be to detect regular expressions and go faster like in your example, I'm assuming it's doing something more complicated otherwise
[23:54:42] *** Joins: mickey (~user@user/mickey)
[23:54:52] *** Joins: jacktar (~whiteshad@gateway/tor-sasl/jacktar)
[23:55:10] <bjs> you c ould try use re.compile() it first,  and you can try using the `regex` library
[23:56:13] <SnoopJ> huh, it's not an artifact of storing the SharedMemory instance as far as I can tell
[23:56:43] <no_gravity> bjs: How do I find the documentation of the "regex" module?
[23:56:45] *** Joins: akaWolf (~akaWolf@akawolf.org)
[23:57:00] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[23:57:11] <bjs> no_gravity: https://pypi.org/project/regex/
[23:57:19] <no_gravity> bjs: Thanks. Reading...
[23:57:23] *** Joins: wyclif (~wyclif@user/wyclif)
[23:57:36] <bjs> no_gravity: I doubt it's really much faster though
[23:57:57] <bjs> It was a very simple regex and even the `re` module can't really have spent *that* much time actually doing the match.
[23:58:31] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[23:58:35] *** Joins: y1n (~y1n@84-115-65-229.wifi.dynamic.surfer.at)
[23:58:57] <no_gravity> bjs: How do you mean?
[23:59:06] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[23:59:42] <bjs> no_gravity: I mean, your regex was very simple, so simple it was actually regular.  I cannot imagine any regex library actually spending very long doing the match check.  It probably spent a long time building random Python objects to return and things
[23:59:44] <dob1> why a code like this one on windows https://dpaste.org/4gAN   will put 2 \r ?
[23:59:45] <SnoopJ> it's expressable as a Thompson NFA: https://swtch.com/~rsc/regexp/regexp1.html
[23:59:54] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Ping timeout: 265 seconds)
