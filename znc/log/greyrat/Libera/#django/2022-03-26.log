[00:02:18] <Wooble> I think if you did have something to do with the course people would probably like it even more.
[00:03:46] <doismellburning> legit, but good call on being explicit about CoI ;)
[00:04:00] <jaybe> jim: thank you for sharing and enlightening; i've long-wanted to work django into some projects so i could get exposure and have some fun. i did the tutorial and have been digging through the docs and frankly puttering. perhaps this course will reinvigorate and help me along. thanks!
[00:04:11] <doismellburning> (I guess _potential perceived_ CoI)
[00:06:38] <jim> nedbat, that particular course gives intros to all the techs... html/css, git, python, javascript, django, others
[00:07:04] <jim> seems to do a good job too
[00:07:21] <jaybe> i'd love a good quality modern current comprehensive overview (again)
[00:07:34] <jaybe> i'll sign up and give back and get the certificate too
[00:10:42] <jim> jaybe, so you're familiar with django already?
[00:11:23] <jim> if no, there are lots and lots of tutorials
[00:11:25] <jaybe> jim: i've long-known what it is, etc. and have been around in other areas a long time. as i mentioned i did go through the intro, tutorial (polls), etc.
[00:12:43] <jim> nedbat, you were in that podcast 99 interview, do you happen to know who took over "the django book" and ported it to django-4?
[00:12:46] <jaybe> over the 'demic i was pleased to get the go through the stanford python course
[00:13:12] <jim> is that a free one too?
[00:13:16] <jaybe> it was
[00:13:29] <jaybe> would you like me to check to see if it still exists and link?
[00:13:45] <jim> nedbat, is edx just harvard? or?
[00:14:21] <jim> sure
[00:14:56] <jaybe> jim, this should be a reasonable 'front door' - https://compedu.stanford.edu/codeinplace/v1/#/course
[00:15:49] <jim> seems to be there
[00:16:16] <jaybe> piech led
[00:16:34] <jim> wut dat?
[00:17:04] <nedbat> jim: edx has courses from ~150 different institutions
[00:17:19] <jim> oh ok
[00:17:47] <jim> are they usually free-unlees-you-want-a-cert?
[00:18:26] *** Joins: jmd (~user@de.cellform.com)
[00:18:29] <nedbat> jim: tbh, i'm not sure what the most common model is these days.  I work on the open source aspects
[00:19:20] <jim> probably offtopic... I'm trying to learn electronics... are there any intro courses?
[00:19:40] <jim> or, I should look at the list
[00:19:53] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:20:16] <nedbat> jim: funny you should ask: it was the very first course ever offered:  https://www.edx.org/course/circuits-and-electronics-1-basic-circuit-analysi-2
[00:20:35] <jaybe> woot win
[00:21:16] <jim> I'll look at that
[00:24:24] <jim> interesting, it says it's an entry-level course, except for a few points, which I think I have
[00:28:40] *** Joins: summersault (~summersau@179.221.251.36)
[00:28:41] <nedbat> jim: one thing to note: it's an entry-level *MIT* course :)
[00:29:04] <jaybe> heh*
[00:29:12] <Wooble> ah, the CMU of massachusetts.
[00:29:18] <nedbat> cute
[00:33:11] *** Quits: summersault (~summersau@179.221.251.36) (Ping timeout: 256 seconds)
[00:33:28] <jim> nedbat, I studied the MIT sicp stuff, there's a python sicp out there too
[00:36:33] <jim> the math review includes first and second order differential equasions...
[00:36:40] *** Joins: Donitz (~Donitz4@88-115-149-215.elisa-laajakaista.fi)
[00:39:51] *** Quits: Elzington (~Elzington@66.63.167.156) (Quit: Leaving)
[00:46:47] *** Quits: Guest8018 (~Guest80@pool-96-253-74-73.rcmdva.fios.verizon.net) (Ping timeout: 256 seconds)
[00:49:17] *** Quits: audio (~audio@user/audio) (Ping timeout: 240 seconds)
[00:51:41] *** Joins: Elzington (~Elzington@66.63.167.156)
[00:53:00] *** Quits: jaybe (~~@user/jaybe) (Quit: ~)
[00:57:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:03:36] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:04:21] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:04:40] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:21:34] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:21:34] *** ChanServ sets mode: +v EvilDMP
[01:33:20] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[01:55:31] *** Quits: dor (~erg@188.147.0.47.nat.umts.dynamic.t-mobile.pl) (Remote host closed the connection)
[02:29:03] *** Quits: kostkon_ (~androirc@2a02:587:a106:f8d0:5455:7996:42cf:6660) (Remote host closed the connection)
[02:59:13] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[03:13:18] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:17:56] *** Quits: MerrinX (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.4.1)
[03:50:38] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:57:11] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[03:58:35] <stats4647> HI, is it legal to nest comment tags, like so -- {% block content %}{% comment %}{% comment %}{% endcomment %}{% endcomment %}{% endblock%} ?
[04:21:27] *** Quits: rje (~textual@65.141.156.170) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:28:59] *** Joins: d8alus (~stevensmi@cpe-98-10-60-195.rochester.res.rr.com)
[04:34:18] <FunkyBob> stats4647: why not try it and see?
[04:34:48] <stats4647> FunkyBob: I did and it broke, but wasn't sure if it was me doing something wrong
[04:35:06] <FunkyBob> 'broke' how, exactly?
[04:35:35] <stats4647> parsing errors, endcommend when should have been something else, etc
[04:36:17] <FunkyBob> so from that I take it's treating its content as not template [which makes sense], up to the first {% endcomment %}...
[04:36:24] <FunkyBob> so no, you can't nest them
[04:37:30] <stats4647> FunkyBob: got it, tk u
[04:41:58] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[04:46:16] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:59:43] <wez> stats4647: I mean, you won't go to prison or anything. The worst that would happen is you see an error and the app crashes.
[05:44:17] *** Joins: jaybe (~~@user/jaybe)
[06:16:32] *** Joins: rje (~textual@50.35.241.164)
[06:38:42] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Ping timeout: 252 seconds)
[06:39:48] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[06:42:00] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[06:44:12] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Ping timeout: 240 seconds)
[07:00:57] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:22:03] *** Quits: humanBird (~humanBird@2603-8001-7000-3642-0961-7b0a-4f50-8e44.res6.spectrum.com) (Quit: Client closed)
[07:31:45] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:38:13] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[08:12:20] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:17:06] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 272 seconds)
[08:24:48] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[08:50:07] *** Joins: yanchai (~yanchai@115.147.34.99)
[09:19:57] *** Joins: djapo (~archangel@user/djapo)
[09:20:45] *** Quits: sreve (~quassel@p4ff44d34.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[09:21:13] *** Joins: sreve (~quassel@p54a71d5a.dip0.t-ipconnect.de)
[09:25:06] <yanchai> when using class based view does it automatically include the prefetch_related?
[09:43:34] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[09:53:25] *** Joins: audio (~audio@user/audio)
[10:14:00] <bparker> no
[10:14:06] <bparker> why would that be related
[11:10:47] <yanchai> i was thinking loading a list with related fields like profile to a user?
[11:28:00] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[11:35:35] *** Joins: dor (~erg@188.147.39.255.nat.umts.dynamic.t-mobile.pl)
[11:39:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[11:41:59] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[11:42:17] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[12:08:07] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[12:18:53] *** Joins: djapo (~archangel@user/djapo)
[12:19:02] *** Quits: dor (~erg@188.147.39.255.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 272 seconds)
[12:20:00] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[12:26:11] *** Joins: dor (~erg@188.147.39.255.nat.umts.dynamic.t-mobile.pl)
[12:26:45] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:32:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[12:44:28] *** Quits: dor (~erg@188.147.39.255.nat.umts.dynamic.t-mobile.pl) (Remote host closed the connection)
[12:50:13] *** Joins: dor (~erg@188.147.39.255.nat.umts.dynamic.t-mobile.pl)
[12:52:29] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[12:53:54] *** Joins: djapo (~archangel@user/djapo)
[12:54:17] *** Quits: dor (~erg@188.147.39.255.nat.umts.dynamic.t-mobile.pl) (Remote host closed the connection)
[13:06:01] *** Quits: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Read error: Connection reset by peer)
[13:06:07] *** Joins: idontnee_ (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[13:13:06] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[13:14:29] *** Quits: idontnee_ (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Read error: Connection reset by peer)
[13:14:47] *** Joins: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[13:15:26] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:15:26] *** ChanServ sets mode: +v EvilDMP
[13:28:21] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:30:21] *** Joins: djapo (~archangel@user/djapo)
[13:55:37] *** Joins: MerrinX (~merrinx@ti0028a400-3686.bb.online.no)
[14:04:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[14:11:38] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:11:38] *** ChanServ sets mode: +v EvilDMP
[14:11:46] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 272 seconds)
[14:12:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:27:40] *** Quits: MerrinX (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.4.1)
[14:28:36] *** Joins: MerrinX (~merrinx@ti0028a400-3686.bb.online.no)
[14:54:57] *** Quits: pepper (~pepper@user/pepper) (Quit: Leaving)
[15:18:46] <jim> hi folks. so, we (a friend and I) have gone through a few of these tutorials, and constructed a couple (a few?) apps. what should we do next?
[15:21:03] *** Quits: yanchai (~yanchai@115.147.34.99) (Ping timeout: 260 seconds)
[15:23:10] *** Joins: xkuru (~xkuru@user/xkuru)
[15:24:55] <dodo> jim: what's your goal?
[15:26:19] <jim> good question... at first is was to see some of django... here's the thing, we don't have a particular idea for a project, and no employer who wants django apps...
[15:26:40] <jim> one thing I was thinking, try to discover the structure of the docs
[15:28:02] <dodo> what kind of apps have you built so far?
[15:29:00] *** Joins: yanchai (~yanchai@115.147.34.99)
[15:29:35] <jim> it was just a couple tutorials, the docs tutorial (so the polls app) and schafer's video series, I think that was a blog and a user's app (login/logout/maybe apply permissions)
[15:31:21] <jim> we're looking at the hafvard/edX treatment of django, I'm not sure it's going to get more advanced (at least not by much) than the tutorials we've already seen
[15:36:48] <jim> while you cogitate/are otherwise busy, I have a couple items in the house that needs doing... I'll check back in about 5 mins
[15:38:24] <colo> jim, maybe try reading and understading (both of you together, in some kind of passive pair programming session :)) a real-life django application?
[15:44:31] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[15:49:59] <jim> dodo, that sounds like a good idea... I can get source for some?
[15:56:28] <jim> oh, got the nick wrong... sorry colo
[15:57:38] <FunkyBob> i'd say read over t he docs contents page, find something curious or interesting, and dive
[15:59:41] <yanchai> FunkyBob: what is the alternate or equivalent for decorators @@login_required
[15:59:42] <jim> hi FunkyBob, sounds good too...
[15:59:58] <yanchai> im am using a class based view
[16:06:32] *** Joins: Kalov (~Thunderbi@181.226.96.240)
[16:10:01] <yanchai> nvm got it!
[16:13:54] *** Quits: Kalov (~Thunderbi@181.226.96.240) (Quit: Kalov)
[16:31:32] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[16:33:39] *** Joins: xkuru (~xkuru@user/xkuru)
[16:45:42] *** Joins: explore (uid233125@id-233125.hampstead.irccloud.com)
[16:45:48] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[18:04:35] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[18:06:29] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:10:44] *** Parts: rtpg (sid443069@id-443069.ilkley.irccloud.com) (Konversation terminated!)
[18:11:10] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 272 seconds)
[18:11:29] *** Joins: iomari891 (~iomari891@197.210.53.228)
[18:29:46] <wez> yanchai: nvm is node.js though, not Django.
[18:32:43] *** Joins: thiras (~thiras@user/thiras)
[18:43:17] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[18:53:27] *** Quits: TrentP (~quassel@c-24-20-193-248.hsd1.or.comcast.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:53:38] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:53:45] *** Joins: TrentP (~quassel@c-24-20-193-248.hsd1.or.comcast.net)
[18:55:43] *** Quits: TrentP (~quassel@c-24-20-193-248.hsd1.or.comcast.net) (Client Quit)
[19:03:35] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:03:47] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:04:52] *** Parts: texasmynsted (~texasmyns@99.96.221.112) (WeeChat 3.4)
[19:14:25] *** Joins: TrentP (~quassel@c-24-20-193-248.hsd1.or.comcast.net)
[19:14:44] *** Joins: dor (~erg@188.147.39.255.nat.umts.dynamic.t-mobile.pl)
[19:21:22] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:25:47] *** Joins: soul-d (~uknown@user/soul-d)
[19:34:45] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[19:35:26] *** Quits: explore (uid233125@id-233125.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[19:40:41] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Ping timeout: 256 seconds)
[19:40:57] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[19:43:36] *** Joins: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl)
[19:45:55] *** Quits: tubogram4 (~tubogram@user/tubogram) (Quit: See ya later!)
[19:48:06] *** Joins: tubogram4 (~tubogram@user/tubogram)
[19:48:06] *** Quits: tubogram4 (~tubogram@user/tubogram) (Client Quit)
[19:50:10] *** Joins: tubogram4 (~tubogram@user/tubogram)
[19:56:33] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 256 seconds)
[19:59:24] *** Joins: pepper (~pepper@user/pepper)
[20:09:52] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[20:10:12] *** Joins: thiras (~thiras@user/thiras)
[20:22:36] *** Quits: dor (~erg@188.147.39.255.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 252 seconds)
[20:22:48] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:27:31] *** Joins: dor (~erg@188.147.39.255.nat.umts.dynamic.t-mobile.pl)
[20:27:33] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[20:37:25] *** Quits: yanchai (~yanchai@115.147.34.99) (Ping timeout: 240 seconds)
[20:47:08] *** Joins: Kalov (~Thunderbi@181.226.96.240)
[20:48:37] *** Quits: Kalov (~Thunderbi@181.226.96.240) (Client Quit)
[21:01:26] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:03:52] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[21:04:24] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[21:05:00] *** Quits: audio (~audio@user/audio) (Ping timeout: 240 seconds)
[21:12:21] <bparker> what's a good way to check if an uploaded file (specifically, an image) has already been previously uploaded by the user? since the filename may change but not the image contents, I'm thinking I'm going to have to checksum the actual bytes or something
[21:13:31] <GinFuyou> bparker, you can use checksum of file, or set of pixels
[21:19:12] <jim> basically, you'd have to keep some sort of track of the user's uploads
[21:19:56] <GinFuyou> well, if you use checksum, you just have unique or unique together field
[21:21:37] <jim> I just mean, if you want to know about previous uploads, you need a history of uploads to look throubh :)
[21:22:27] <GinFuyou> handling uploads in django most usually means you have a model with file\image field
[21:22:39] <GinFuyou> so typically it's already there
[21:23:07] <bparker> jim: yea I think this is a better approach
[21:23:35] <bparker> the client can keep track of image IDs already uploaded, if they submit anything different then I know to make changes
[21:24:03] <jim> I dunno, I just think that's the simplest most basic... then how you -implement- that, is a different matter
[21:24:03] <bparker> e.g. I can attach an 'existing ID' to images that were already there
[21:24:12] <bparker> so I know if they added/changed/deleted anything
[21:25:03] <bparker> trying to shoehorn an existing 'edit' functionality into an app that wasn't designed to have that from the beginning (it was add-only before)
[21:25:16] <bparker> existing app*
[21:25:50] <bparker> so I'm having to go over every field submitted and check if they changed anything
[21:26:04] <bparker> fun times
[21:27:14] <GinFuyou> you know forms track changed fields, right?
[21:27:36] <bparker> yes but this case is unfortunately too complex
[21:28:01] <GinFuyou> also, not sure what you mean by "attaching existing ID"
[21:28:04] <jim> of course, GinFuyou is far more experienced than I, and can speak to what's already present, etc (my thing is like, "if you're going to have your shoes stuck to some gum on the sidewalk, first you need at least one shoe, some gum and a sidewalk")
[21:28:13] <bparker> or at least, at this point trying to put all this logic into a form would be counter-productive
[21:29:02] <GinFuyou> Sounds a bit questionable, but surely I don't know your case
[21:29:18] <bparker> GinFuyou: the client app downloads a serialized version of a model instance
[21:29:24] <bparker> and displays fields the user can edit
[21:29:40] <bparker> but initially, only some fields were designed to be editable, and certain other fields were always add-only
[21:29:49] <bparker> but now they want to be able to edit those add-only fields, which includes images
[21:30:08] <bparker> so now I need to track what was already uploaded before, and not duplicate them when submitting
[21:30:16] <bparker> and also handle any deletions
[21:31:05] <bparker> and the user still needs to see what WAS already uploaded, and be able to add more or delete existing images etc.
[21:31:05] <GinFuyou> I guess then question is how data is stored now
[21:31:51] <GinFuyou> But so far I don't see fundamentally problematic parts
[21:32:51] <bparker> on the client side I could keep track of which images belong to a model instance already
[21:33:29] <bparker> I can send that info when they download the serialized model
[21:34:12] <GinFuyou> how client knows about instances?
[21:34:19] <bparker> and also send that along on upload too, so then I know if I see an ID that's already there, leave it alone, if one is missing from client, then delete that one on the server side, otherwise if client has one the server doesn't, then *add* it instead
[21:34:48] <GinFuyou> that sounds like a bad pan
[21:34:51] <GinFuyou> *plan
[21:34:56] <bparker> unless you have a better idea
[21:35:28] <GinFuyou> Why source of truth is the client? User input can't be trusted
[21:36:05] <bparker> this is not a public website, it's for internal company use... if I can't trust the client input I have way bigger problems
[21:36:13] <bparker> so I don't care
[21:37:04] <GinFuyou> It's not a reason to go with genereally bad practice, or adding another security hole
[21:37:54] <bparker> I don't think you have enough info to make that statement on my behalf in this case, but whatever
[21:37:59] *** Joins: bayman (~bayman@c-73-15-245-176.hsd1.ca.comcast.net)
[21:38:04] <GinFuyou> I meant there might be a reason to go with that, but I don't see one, why can't server decide as usual?
[21:38:22] <bparker> because then I would have to resort to checksum comparisons
[21:38:34] <bparker> of image bytes
[21:38:41] <GinFuyou> So? I'm doing that
[21:38:46] <bparker> so I don't want to.
[21:38:51] <bayman> I have a model Blog and I want to limit the number of Blogs a user can create to 100.  Should I do that in a model method or a form clean method?
[21:40:21] <GinFuyou> bayman, database constraints perfectly. But you probably want model clean() method anyway
[21:41:06] *** Joins: gitly (~gitly@148.252.132.39)
[21:56:16] *** Quits: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net) (Quit: Client closed)
[22:09:59] <bayman> GinFuyou: how can I write the constraint for Q() here? https://dpaste.org/F2Lv#L13
[22:16:17] *** Quits: iomari891 (~iomari891@197.210.53.228) (Ping timeout: 256 seconds)
[22:19:03] <bparker> I had no idea that even existed
[23:08:51] *** Joins: Kalov (~Thunderbi@181.226.96.240)
[23:11:03] *** Quits: Kalov (~Thunderbi@181.226.96.240) (Client Quit)
[23:22:55] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:24:28] *** Joins: justOkay (~justache@user/justache)
[23:34:10] *** Joins: MCx (~MCx@user/mcx)
[23:55:24] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 240 seconds)
