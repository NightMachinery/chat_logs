[00:12:31] <FromDiscord> <deech> How do I convert a string to a `typedesc` at compile time? eg. if I have some type `MyType` , I would like to be pass it as a string, convert that string to a typedesc and do various operations like `getTypeImpl` or whatever ...
[00:13:18] <FromDiscord> <leorize> `bindSym`
[00:15:10] <FromDiscord> <deech> Thanks!
[00:15:58] <FromDiscord> <deech> Why doesn't `ident("MyType")` work?
[00:19:22] <krux02> deech: don't typedesc
[00:20:05] <krux02> ident"MyType" should work, if the type is in scope (a known identifier for the compiler) in the context where the macro is expanded
[00:21:30] <FromDiscord> <Elegantbeef> bindsym will only work if the symbol is on the scope of macro
[00:24:55] <FromDiscord> <deech> sent a code paste, see https://play.nim-lang.org/#ix=3M1a
[00:28:07] <FromDiscord> <Elegantbeef> Yea `bindsym` will find the symbol(s) in the scope and give you a `symbol`
[00:28:25] <FromDiscord> <Elegantbeef> anything that relies on type information needs to be typed which means you need symbols
[00:28:38] <FromDiscord> <deech> Awesome, does that work with imported symbols as well?
[00:28:58] <FromDiscord> <Elegantbeef> `ident` is just "fancy string" it's an non typed symbol
[00:29:34] <FromDiscord> <Patitotective> Does _npeg_ supports indentation? Or do I need to create my own system?
[00:29:37] <FromDiscord> <Elegantbeef> Any symbol in scope
[00:30:25] <FromDiscord> <Elegantbeef> Nim macros can go pretty deep to get whatever information you need
[00:31:03] <FromDiscord> <Elegantbeef> Npeg is pattern matching so wouldnt indention be apart of the pattern?
[00:31:42] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[00:32:28] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3M1c
[00:33:59] <arkanoid> PMunch: I'm back on the SIGSEGV problem
[00:34:03] <FromDiscord> <Elegantbeef> I've never used npeg so i dont know what it can do
[00:34:07] <FromDiscord> <Elegantbeef> It's all magic to me
[00:34:53] <arkanoid> PMunch: but this time with libclang-10 debug symbols
[00:35:24] <arkanoid> sigsegv is in #0  clang_getTranslationUnitCursor () at /build/llvm-toolchain-10-yegZYJ/llvm-toolchain-10-10.0.0/clang/tools/libclang/CIndex.cpp:4208
[00:37:19] <FromDiscord> <Patitotective> Also, if I were going to convert https://github.com/zevv/npeg/blob/master/tests/examples.nim#L58 into an actual json parser (that outputs a `JsonNode`) how could I difference when some `JSON` rule matched a `jnumber` or a `jobject`?↵Doing `JSON <- ?S  ( >jnumber | >jobject | >jarray | >jstring | >jtrue | >jfalse | >jnull )  ?S` doesn't let me difference between the matched value
[00:37:40] <FromDiscord> <Patitotective> (edit) "when" => "if"
[00:39:56] <Zevv> it can do indentation, but it's not trivial
[00:40:16] <Zevv> look at https://github.com/zevv/npeg/blob/master/misc/indent.nim for inspiration
[00:40:31] <Zevv> you need to do some bookkeeping yourself
[00:41:44] *** Ekho- is now known as Ekho
[00:42:02] <Zevv> also, that json parser only matches and parsers, but does not build a jsonnode ast
[00:43:07] <FromDiscord> <Patitotective> In reply to @Zevv "also, that json parser": yes i know, i was asking for how to know which rule some rule matched
[00:44:04] <Zevv> you could put capture operators on the individual rules and add nim code that executes when the rule matches
[00:44:54] <FromDiscord> <Patitotective> does the define order of the rules matter?
[00:44:57] <Zevv> here is an example that does some real world AST building for an early generation of the Rod languge: https://github.com/zevv/npeg/blob/master/misc/rod.nim
[00:45:01] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:45:09] <Zevv> order does not change functionality, but it affects generated code size and performance
[00:45:33] <Zevv> rule A depends on rule B: if you define B before A it gets inlined, otherwise it gets called
[00:45:41] <Zevv> calls have some overhead, but generate smaller parsers
[00:45:55] <Zevv> see https://github.com/zevv/npeg#grammars
[00:46:05] <FromDiscord> <Patitotective> my parser does create a table and the keys are matched first so i would need to store keys and values in sequences to then convert them into a table (?)
[00:46:29] <Zevv> that would work, yes
[00:47:07] <Zevv> I typically store captures on a stack, and then put pieces of nim code in the grammar that take the last few matches from the stack to perform some operation on them, like putting them in a map or in some AST data structure
[00:47:26] <Zevv> the rod example does that
[00:48:06] <FromDiscord> <Patitotective> In reply to @Zevv "that would work, yes": but is it efficient?
[00:48:50] *** Joins: Guest14 (~Guest14@109.72.4.22)
[00:48:50] <Guest14> hey
[00:49:05] *** Quits: Guest14 (~Guest14@109.72.4.22) (Client Quit)
[00:51:33] <Zevv> I do not see how it is not sufficient
[00:51:42] <Zevv> you get your captures in the order as they appear in the subject string
[00:51:58] <Zevv> you need to store them somewhere until you have all the parts complete to build your particular bit of AST
[00:52:18] <Zevv> as you want this to be recursive safe, you cant just store them in a var, so a stack is a natural fit
[00:53:05] <Zevv> if you super care about efficiency, you probably want to build a recursive descent or something similar by hand
[00:53:15] <Zevv> you get twice at fast, probably
[00:53:26] <FromDiscord> <SecureThisShit> sent a long message, see http://ix.io/3M1j
[00:55:12] <FromDiscord> <treeform> so strings can always be cased to seq[byte]
[00:55:28] <FromDiscord> <treeform> writeFile(string, cast[string](bytes))
[00:55:30] <FromDiscord> <treeform> should work
[00:55:33] <Zevv> in the current implementation of nim, that is
[00:55:41] <FromDiscord> <treeform> yes
[00:55:44] <Zevv> there are no guarentees this will always work in the future
[00:55:50] <FromDiscord> <treeform> I rely on this quite heavily though
[00:55:57] <Zevv> we all make mistakes, right
[00:56:11] <FromDiscord> <SecureThisShit> I tried converting to a string and writing to a file. But I couldn't get the same bytes back when reading the file.
[00:56:20] <FromDiscord> <SecureThisShit> So something seams to convert wrong.
[00:56:41] <FromDiscord> <treeform> make a simple test case, verify it
[00:57:29] <FromDiscord> <treeform> once the seq[byte] to string breaks my tests will tell me right away and I will complain
[00:59:43] *** Joins: rockcavera (~rc@192.12.112.107)
[00:59:44] *** Quits: rockcavera (~rc@192.12.112.107) (Changing host)
[00:59:44] *** Joins: rockcavera (~rc@user/rockcavera)
[01:01:01] <FromDiscord> <Elegantbeef> There is and will be `toOpenArrayByte` in the future, so that's a possible avenue
[01:08:57] <FromDiscord> <leorize> how come `seq[byte]` doesn't match into an `openArray[byte]`?
[01:09:18] <FromDiscord> <SecureThisShit> I got it to work via casting to string now.
[01:09:25] <FromDiscord> <SecureThisShit> Seamed to be an layer 8 issue before 😛
[01:10:14] <FromDiscord> <Isofruit> Man, I had this halfway epic written
[01:10:27] <FromDiscord> <Isofruit> And then I realized the answer to my problem was, that what I was trying to do needs macros
[01:10:33] <FromDiscord> <Isofruit> And I don't think the easy kind either
[01:11:41] <FromDiscord> <treeform> if you can solve problem without macros you should
[01:12:07] <FromDiscord> <treeform> but if you are echo ing out nim code to compile leter... macros are probably better?
[01:12:10] <FromDiscord> <Isofruit> I don't think I can, at least not without a performance penalty by moving a calculation to runtime that imo I should be performing at compile time
[01:12:12] <FromDiscord> <hmmm> is there a macro of the easy kind? 🤔
[01:12:25] <FromDiscord> <treeform> yes its called a `template`
[01:13:08] <FromDiscord> <Isofruit> Beef demonstrated a somewhat simple one that helps unpack type A from within type B like this(https://play.nim-lang.org/#ix=3M1h), it's pretty nifty and not toooooo crazy
[01:13:11] <FromDiscord> <Isofruit> Though still dark magic
[01:13:35] <FromDiscord> <treeform> beefmagic
[01:13:57] <FromDiscord> <hmmm> yea def too much beefwizardry there
[01:14:40] <FromDiscord> <hmmm> I'd like to see a macro do var x = 42 just to see if I can grasp it lol
[01:15:58] <FromDiscord> <treeform> that macro is like 1 line?
[01:16:19] <FromDiscord> <hmmm> the best kind then 😃
[01:18:38] <FromDiscord> <Isofruit> sent a long message, see http://ix.io/3M1m
[01:19:16] <FromDiscord> <Isofruit> So the entire part of "figure out the foreign key field names for the query and the unpacking-macro" I wanted to move to compile time as much as possible
[01:19:29] <FromDiscord> <Isofruit> (edit) "unpacking-macro"" => "unpacking-macro from the type-definitions""
[01:21:01] <FromDiscord> <Isofruit> Currently I have a proc for that with a lot of when statements to figure that out, but it doesn't really act at compile time because it uses a lot of functions from norm (https://play.nim-lang.org/#ix=3M1l)
[01:21:41] <FromDiscord> <Isofruit> The only way for me to actually do all of that "figure out the field name for me" stuff at compile time is macros I think
[01:22:24] <FromDiscord> <hmmm> I'm eyeballing you will need a macro for every time you said "figure out" 😃
[01:22:27] <FromDiscord> <Isofruit> (edit) "for me"" => "on type A that points to type B""
[01:23:06] <FromDiscord> <Isofruit> ~~I just really do not want to write out this stuff every time I have a many to many relationship~~
[01:23:31] <FromDiscord> <Isofruit> Which, I will admit, I have in my own application like... maybe 8 or so of
[01:23:37] <FromDiscord> <Isofruit> (edit) "Which, I will admit, I have in my own application ... like..." 03added "only"
[01:23:43] <FromDiscord> <Isofruit> But still!
[01:28:13] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3M1p
[01:28:34] <FromDiscord> <Isofruit> In reply to @hmmm "I'm eyeballing you will": That's actually only a single macro, one that eats 2 Model-types and spits out their related field as a static string if there is one
[01:29:52] <FromDiscord> <Isofruit> But writing that functionality as a proc was already hard enough because there's a lot of ways to have field X be an FK to another Model (like 4 strictly speaking, though 2 are identified though the same way, so more like 3)
[01:30:23] <FromDiscord> <Isofruit> (edit) "But writing that functionality as a proc ... was" 03added "that runs partially at runtime"
[01:30:39] <FromDiscord> <Isofruit> (edit) "FK" => "FK-Field"
[01:32:10] <FromDiscord> <Isofruit> I guess in the end it doesn't matter too much... whatever performance penalty this has pales in comparison to a db query... still grinds my gears though
[01:49:32] *** Quits: oprypin_ (~irc@pryp.in) (Ping timeout: 240 seconds)
[01:51:07] *** Joins: oprypin (~irc@pryp.in)
[01:52:28] <FromDiscord> <Isofruit> Wait, I'm an idiot, of course my code wouldn't compile, I tried to assign a static string that only exists at compile time to a let expression in a proc that acts at runtime
[01:53:07] <FromDiscord> <Elegantbeef> Not certainly impossible↵(@Isofruit)
[01:53:51] <FromDiscord> <Isofruit> Hmmm whenever I tried to use my "getRelatedFieldNameOn" to give me a compile-time-static-string and tried to assign that to a var, my compiler exploded
[01:54:09] <FromDiscord> <Isofruit> Let me whip up an example
[02:06:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:07:13] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[02:11:05] <FromDiscord> <Isofruit> https://play.nim-lang.org/#ix=3M1A
[02:12:21] <FromDiscord> <hmmm> after dabbling with the manual I made my first macro 😃  https://play.nim-lang.org/#ix=3M1z
[02:12:29] <FromDiscord> <Isofruit> I can use the `mapModel` macro, which takes a static string, only when I pass in `A.getRelatedFieldNameOn(B)` directly in into the macro call.↵The moment I try `let s: static string = A.getRelatedFieldNameOn(B)`, I get compiler complaining. If I leave out the type annotation, I think it turns the static string into a normal string and I can't use it with the macro anymore
[02:13:36] <FromDiscord> <hmmm> still I don`t get what is the nnk thingy supposed to be. Manual just says it"s appropriate for the debug macro
[02:14:45] <FromDiscord> <Isofruit> I can tell you that `nnkDotExpr.newTree(ident"it", ident field)`  is the equivalent of `it.walumba` if `field` contains the string `"walumba"`
[02:15:14] <FromDiscord> <Isofruit> So if nnkDotExpr is like `.` ... nnk maybe is just a general prefix for dark compiler magic macros?
[02:15:17] <FromDiscord> <Isofruit> (edit) "macros?" => "macro stuff?"
[02:17:22] <FromDiscord> <hmmm> hmm let's wait for the beefy lectures "on demystifying macros and other fun stuff to do at compile time"
[02:18:01] <FromDiscord> <Isofruit> I swear I'll read that article, I actually don't want to get into macros _yet_ , but my web project just kinda forces my hand there
[02:18:07] <FromDiscord> <Isofruit> (edit) "I swear I'll read that article, I ... actually" 03added "just"
[02:25:46] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[02:26:44] <FromDiscord> <Elegantbeef> do `let s = static: A.getRelatedFieldNameOn(B)`
[02:27:23] <FromDiscord> <Elegantbeef> you have a proc that can only be used at compile time but you want to use it to set a let, you need the `static` to make it so Nim knows "hey call this at compile time and insert the result here"
[02:28:12] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3M1C
[02:28:32] <FromDiscord> <Elegantbeef> nnkDotExpr is just an enum↵(@Isofruit)
[02:29:03] <FromDiscord> <Elegantbeef> I'd have answered sooner but i went for a walk since it's finally a warm 4c out and my dogs havent walked for a month or so
[02:29:29] <FromDiscord> <Isofruit> Perfectly fine, I took forever to post my example as well and I'm just thankful you're answering either way!
[02:29:58] <FromDiscord> <Elegantbeef> You dont need the `nnkStmtList` you can just do `newCall("echo", x)`↵(@hmmm)
[02:30:20] <FromDiscord> <Elegantbeef> Also there is a `newStmtList()` procedure which takes a varargs[NimNodes]
[02:32:16] <FromDiscord> <Isofruit> In reply to @Elegantbeef "you have a proc": So I don't prefix the type with `static`to signal it exists at compile time, I prefix the `proc` to tell it to run that at compile time, ahhhh
[02:32:45] <FromDiscord> <Elegantbeef> Well something that returns `static string` means it runs at compileTime only↵(@Isofruit)
[02:33:02] <FromDiscord> <Elegantbeef> It's implicit compile time only
[02:33:44] <FromDiscord> <hmmm> beef are the examples in the macro section of the manual working implementations in real nim? Things like "withfile", "items", "enumerate". If so, consider my mind blown
[02:33:51] <FromDiscord> <Elegantbeef> So if it runs at CT only and you attempt to assign it to let you need to say "Yes i want this to run at compile time"
[02:34:39] <FromDiscord> <Elegantbeef> Why would they show impossible examples
[02:35:02] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (Ping timeout: 240 seconds)
[02:35:33] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:35:34] <FromDiscord> <hmmm> but they are used in that form in nim? they seem far too simple 🤔
[02:36:15] <FromDiscord> <hmmm> still, impressive stuff
[02:36:20] <FromDiscord> <Elegantbeef> What do you mean?
[02:36:41] <FromDiscord> <Elegantbeef> Templates are by definition code substitution
[02:37:05] <FromDiscord> <Elegantbeef> So there is no introspection it's just paste expanded code here
[02:37:32] <FromDiscord> <hmmm> for some reason I always tought thare was some  sort of complex machinery behind some magic keyword I use daily lol
[02:37:48] *** Joins: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733)
[02:37:54] <FromDiscord> <Elegantbeef> Well builtins have magic behind them
[02:38:04] <FromDiscord> <Elegantbeef> https://github.com/beef331/constructor/blob/master/src/constructor/constructor.nim here is a relatively simple macro
[02:38:33] <FromDiscord> <Isofruit> Just ran it on play.nim-lang, I think it still explodes. https://play.nim-lang.org/#ix=3M1E
[02:38:43] <Mister_Magister> Hi, i'm trying to use nimscript to run a command and get it's output but when i try to run execProcess i get undeclared indentifier so i import std/os or std/osproc but then i get cannot 'importc' variable at compile time
[02:39:01] <FromDiscord> <Elegantbeef> that takes a `proc init(_: typedesc[MyType], args: int): MyType = discard` and turns it into `proc init(_: typedesc[MyType], args: int) : MyType = MyType(args: args)`
[02:39:42] <FromDiscord> <Elegantbeef> Oh yea that wont work
[02:39:47] <FromDiscord> <Elegantbeef> change it to `const`
[02:39:58] <FromDiscord> <Isofruit> Ohhhhh , allow me to faceplant
[02:40:05] <FromDiscord> <Isofruit> Dangit, I know of const
[02:40:10] <FromDiscord> <Elegantbeef> `mapModel` is a macro which needs compile time values
[02:40:16] <FromDiscord> <Elegantbeef> I didnt realize that was the issue
[02:40:28] <FromDiscord> <Elegantbeef> didnt know the playground had the modules so just guessed the issue
[02:40:54] <FromDiscord> <mratsim> In reply to @treeform "writeFile(string, cast[string](bytes))": don't do that, string needs to end with nul byte which the cast doesn't guarantee
[02:41:03] <FromDiscord> <Elegantbeef> In a nimscript module it's just `exec`
[02:41:47] <FromDiscord> <Isofruit> Yeah, don't even need the static, nim knows through const automatically that stuff needs to run at compile time
[02:42:20] <FromDiscord> <Elegantbeef> Mratsim does that need to end with \\
[02:42:24] <FromDiscord> <Elegantbeef> '\\0\`?
[02:42:33] <FromDiscord> <Elegantbeef> Since it's a file IO operation
[02:42:49] <FromDiscord> <Elegantbeef> You could have a '\\0' anywhere in the data
[02:42:56] <FromDiscord> <mratsim> In reply to @Isofruit "So if nnkDotExpr is": nnk is nim node kind
[02:43:13] <Mister_Magister> hmmm i don't think its doable
[02:43:40] <FromDiscord> <Elegantbeef> It's just `exec`
[02:43:47] <Mister_Magister> yeah and exec doesn't give output
[02:44:07] <FromDiscord> <mratsim> In reply to @Elegantbeef "You could have a": EOF is sometimes \0, for example when reading from stdin
[02:44:44] <FromDiscord> <Isofruit> In reply to @mratsim "nnk is nim node": Ahhhh, thanks for clearing that up!
[02:44:53] <FromDiscord> <mratsim> and since it's file IO, the copy is basically costless compared to the IO
[02:45:08] <FromDiscord> <mratsim> and there is a writeBytes proc anyway iirc
[02:45:25] <FromDiscord> <Elegantbeef> Yea was going to say eitherway you can just write the bytes
[02:45:30] <FromDiscord> <mratsim> or you open as stream and write to it
[02:46:34] <FromDiscord> <Elegantbeef> You can use `gorgeEx` mister\_magister
[02:46:40] <FromDiscord> <Elegantbeef> or `gorge`
[02:47:54] <FromDiscord> <mratsim> for example here I had to use C EOF instead of Nim's not sure why https://github.com/mratsim/trace-of-radiance/blob/master/trace_of_radiance/io/h264.nim#L278
[02:48:51] <FromDiscord> <mratsim> (yes you can do a H264 encoder in 250 lines)
[02:51:10] <FromDiscord> <Elegantbeef> `endOfFile` doesnt work either?
[02:51:41] <FromDiscord> <Elegantbeef> `return c < 0'i32` if not i think it's this
[02:53:15] <FromDiscord> <mratsim> I tried the Nim one in std/io, it hanged iirx
[02:53:20] <FromDiscord> <mratsim> (edit) "iirx" => "iirc"
[02:54:07] <FromDiscord> <Elegantbeef> If it hung it's probably due to that check being `<0` and not `<=` but i dont know
[02:55:42] <FromDiscord> <Elegantbeef> I dont know if you seen my response but the issue for your staccato example is due to this line https://github.com/mratsim/weave/blob/a2e118b36373d61346d7443f9f345b808501cf66/experiments/e01_staccato/task_worker.nim#L27 unrelated to the `FibTask` really
[02:56:29] <FromDiscord> <Elegantbeef> Nim's generic cannot handle a `T or var T` so it cries at attempting to generate the code
[02:56:58] <FromDiscord> <mratsim> ah good catch
[02:57:46] <FromDiscord> <Elegantbeef> Removing that the error goes away but then there are symbol issues that appear
[02:57:53] <FromDiscord> <Elegantbeef> Namely that it cannot get `t.child`
[02:59:09] <FromDiscord> <mratsim> well that was trying to explore multithreading runtime before I wrote the Picasso/Weave RFC
[02:59:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[03:00:37] <FromDiscord> <mratsim> it was one of the most C++ runtimes thanks to their decision to stack allocate everything (at unfortunately the cost that not all code could be parallelizable)
[03:00:45] <FromDiscord> <Elegantbeef> Of course if you want the abillity to have `T or var T` you need to either discriminate it statically or with an object variant 😀
[03:00:58] <FromDiscord> <mratsim> (because you needed to know the "fork factor" of each task
[03:01:46] <FromDiscord> <Elegantbeef> Yea i noticed it was 2 years old, was interested if my fixes to recursive generics changed it, cause i cannot read what sixte wrote
[03:02:18] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3M1J
[03:03:31] <FromDiscord> <mratsim> ah the joy of `when` in a typesection
[03:03:42] <FromDiscord> <Elegantbeef> Indeed
[03:03:51] <FromDiscord> <Elegantbeef> Atleast it doesnt destroy type intropsective macros
[03:03:52] <FromDiscord> <mratsim> I don't miss fighting to have that working
[03:04:21] <FromDiscord> <mratsim> still is broken in some very annoying ways
[03:04:25] <FromDiscord> <Elegantbeef> to be fair though your example code was a generic with 0 way to resolve which
[03:05:29] <FromDiscord> <FractalCycle> installation zip on nim-lang.org seems broken, just me?
[03:05:45] <Mister_Magister> can i concat two arrays into pairs?
[03:05:47] <FromDiscord> <Elegantbeef> Did you antivirus prevent the installation?
[03:05:52] <FromDiscord> <Elegantbeef> your\
[03:06:00] <FromDiscord> <FractalCycle> In reply to @Elegantbeef "Did you antivirus prevent": no it said "failed - network error"
[03:06:14] <FromDiscord> <Elegantbeef> do you mean take two arrays and make it [(a1, a2), (b1, b2)]\`?
[03:06:18] <FromDiscord> <mratsim> In reply to @Mister_Magister "can i concat two": concat or zip?
[03:06:30] <Mister_Magister> connect together?
[03:06:40] <Mister_Magister> marry them or smth
[03:06:54] <FromDiscord> <Elegantbeef> So `[a1, a2, b1, b2, b3]`
[03:07:16] <Mister_Magister> as in connect array a and b into key and values
[03:07:32] <Mister_Magister> map can do this i think?
[03:07:34] <FromDiscord> <mratsim> so zip
[03:07:45] <FromDiscord> <Elegantbeef> zip is what you want it sounds like
[03:08:00] <FromDiscord> <Elegantbeef> An input and output is easier than words
[03:08:11] <FromDiscord> <Elegantbeef> Give an example of input and expected output
[03:08:22] <FromDiscord> <Elegantbeef> Easierr than playing guess what i mean 😛
[03:09:43] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:09:47] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/7uT
[03:10:04] <FromDiscord> <Elegantbeef> that should be `min(a.len, b.len)`
[03:10:10] <FromDiscord> <Isofruit> The more I code in nim the more I learn to appreciate the insane amounts of freedom
[03:10:51] <FromDiscord> <Elegantbeef> Just wait till i actually fix `type T[A; Y:static A]` 😀
[03:10:59] <FromDiscord> <Elegantbeef> Then we'll even be able to have modulo types
[03:11:28] <FromDiscord> <Isofruit> I mean, right now I'm in the beginner phase of all the meta programming stuff, I assume I'll look at my current code in disgust once I've developed a better feel for what leads to more readable code
[03:11:41] <Mister_Magister> i think zip is the way to go 
[03:11:45] <FromDiscord> <Isofruit> But dang
[03:11:56] <Mister_Magister> can i iterate through zip result so that i have key and value variables?
[03:12:14] <FromDiscord> <Elegantbeef> for (x, y) in zip(a, b)\`
[03:12:40] <FromDiscord> <Elegantbeef> Worth noting that `zip` makes a new collection so you're allocating a collection `min(a.len, b.len)`
[03:12:47] <Mister_Magister> i tried it but it gives me Error: identifier expected, but got '(' :/
[03:12:52] <Mister_Magister> you probably will want the code xd
[03:13:02] <FromDiscord> <Elegantbeef> Yea
[03:13:13] <Mister_Magister> https://paste.opensuse.org/8c0225a5
[03:13:50] <FromDiscord> <Elegantbeef> What version of nim are you on?
[03:14:01] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3M1M it runs fine
[03:14:04] <Mister_Magister> 0.19.6
[03:14:06] <Mister_Magister> o
[03:14:08] <Mister_Magister> ooof
[03:14:16] <FromDiscord> <Elegantbeef> A bit fucking outdated arent you bud
[03:14:27] <Mister_Magister> yeah… i forgot nobody updates it in opensuse repos
[03:14:33] <Mister_Magister> i tried updating it but they rejected it eh
[03:14:37] <Mister_Magister> choosenim where are you
[03:14:48] <FromDiscord> <Elegantbeef> I think you've won oldest Nim version i've seen someone try to use
[03:14:57] <Mister_Magister> xd
[03:15:08] <Mister_Magister> well i've been using nim for some time now
[03:15:18] <FromDiscord> <Isofruit> You can say that again
[03:15:23] <FromDiscord> <Elegantbeef> Hopefully not that version
[03:15:29] <Mister_Magister> nah nah
[03:15:37] <Mister_Magister> like im saying its just outdated in repos and i didn't notice
[03:15:39] <Mister_Magister> chill
[03:15:44] <FromDiscord> <Elegantbeef> Bunch of cool features in the future dude, you're going to be excited for tuple for loop
[03:15:47] <FromDiscord> <Elegantbeef> I'm joking
[03:15:59] <Mister_Magister> :P
[03:16:10] <Mister_Magister> F my vim freezed
[03:16:17] <FromDiscord> <Elegantbeef> I forget that not everyone is an active user here and knows my humour/jokes
[03:17:24] <FromDiscord> <Elegantbeef> @mratsim\: also if you have any examples of breaky when statements i'd be interested in seeing them
[03:17:54] <FromDiscord> <Elegantbeef> I'm only a pretend compiler dev, but it's fun to look at these issues nonetheless
[03:18:00] <Mister_Magister> i'm now on 1.6.2
[03:18:02] <Mister_Magister> now we talking
[03:18:09] <Mister_Magister> newer than the one in topic
[03:18:11] <FromDiscord> <Elegantbeef> Welcome to 2022
[03:19:58] <Mister_Magister> how about doing `[a1, a2, b1, b2, b3]` ?
[03:20:11] <FromDiscord> <Elegantbeef> There is no array concatenation in the stdlib
[03:20:17] <FromDiscord> <Elegantbeef> But you can make it quickly
[03:20:22] <FromDiscord> <mratsim> In reply to @Elegantbeef "<@570268431522201601>\: also if you": mmmmh I think those in stint were all solved, took years but yeah.↵↵There there is "supportsCopyMem" in a when typesectionxnot sure if solved
[03:20:25] <Mister_Magister> forget it
[03:20:29] <Mister_Magister> i'll bypass it
[03:20:40] <Mister_Magister> i mean, map would do it wouldn't it
[03:20:44] <FromDiscord> <mratsim> and then there is a veeeerrryyyy ugly issue that loat me a week and hair
[03:20:45] <Mister_Magister> it totally would
[03:23:00] <FromDiscord> <mratsim> https://github.com/nim-lang/Nim/issues/13193↵↵@elegantbeef, but the issue is not when it seems
[03:23:51] <Mister_Magister> yeah map did the job
[03:24:23] <Mister_Magister> @Elegantbeef https://paste.opensuse.org/2d0145e7
[03:24:31] <Mister_Magister> you proud of me papa
[03:25:24] <FromDiscord> <Elegantbeef> It's messy but here is how you'd do it https://play.nim-lang.org/#ix=3yC8
[03:25:28] <FromDiscord> <Elegantbeef> Had to hunt this down
[03:25:55] <Mister_Magister> did it cleaner
[03:26:02] <Mister_Magister> for my purpose
[03:26:03] <FromDiscord> <Elegantbeef> Not really that happy so many allocations!
[03:26:12] <FromDiscord> <mratsim> also https://github.com/status-im/nimbus-eth2/issues/2219 @ElegantBeef↵↵> Additional hacks to support when statement within an object declaration were needed or the serialization offsets were wrong
[03:26:20] * Mister_Magister angery screeching
[03:26:35] <FromDiscord> <mratsim> getTypeImpl is broken with when in types
[03:27:10] <FromDiscord> <mratsim> and when branches with fields of the same name
[03:27:40] <FromDiscord> <mratsim> and getImpl
[03:27:49] <FromDiscord> <mratsim> that was all uber ugly
[03:27:55] <FromDiscord> <Elegantbeef> Yea seems so
[03:28:06] <FromDiscord> <Elegantbeef> one of those shouldnt have `when` branches at all
[03:28:27] <FromDiscord> <Elegantbeef> Cant think of which at the moment
[03:28:35] <FromDiscord> <mratsim> https://github.com/nim-lang/Nim/issues/16639
[03:29:10] <FromDiscord> <Elegantbeef> `getImpl` shouldnt have the when trees in the ast
[03:29:43] <FromDiscord> <Elegantbeef> the implementation of `Attestation[Untrusted]` should be the transformed instantiated generic
[03:29:49] <FromDiscord> <mratsim> when + static enums cause visibility issues as well
[03:30:54] <FromDiscord> <Elegantbeef> The fact you get the `when` branches  on introspection  without introspecting `Attestiation` is odd
[03:31:06] <FromDiscord> <Elegantbeef> So yea this is a mess
[03:31:42] <FromDiscord> <Patitotective> In reply to @Zevv "as you want this": When you say _stack_ do you mean a sequence or?
[03:32:23] <FromDiscord> <mratsim> a stack can be backed by a sequence but it's just a data structure with push/pop from thr end only
[03:32:49] <FromDiscord> <mratsim> no lookup in arbitrary places for example, no iteration
[03:32:55] <FromDiscord> <Elegantbeef> In Nim atleast sequences are generally used as a stack since they have `pop`
[03:33:07] <FromDiscord> <mratsim> (edit) "thr" => "the"
[03:33:29] <FromDiscord> <Elegantbeef> It's an `O(1)` insertion at the tail and a `O(1)` removal
[03:33:39] <FromDiscord> <Patitotective> Ok thanks 🙃
[03:33:55] <FromDiscord> <Elegantbeef> unless you need to grow the collection
[03:34:18] <FromDiscord> <Elegantbeef> That's so odd that you do not get the instantiated AST
[03:34:27] <FromDiscord> <Elegantbeef> still amazed by that
[03:35:53] <FromDiscord> <Elegantbeef> Oh right you're getting a bracket expression
[03:38:30] <FromDiscord> <Elegantbeef> Mratsim do you know the hack for the https://github.com/nim-lang/Nim/issues/16639 of assigning the type to a variable and passing the variable to an actual macro?
[03:38:31] <FromDiscord> <mratsim> I get nodes with just "Type" as well
[03:39:30] <FromDiscord> <mratsim> I know that hack and I know the hack of not assigning a type to a variable and passing it directly as well
[03:39:58] <FromDiscord> <Elegantbeef> What's the latter hack look like?
[03:40:20] <FromDiscord> <mratsim> sent a long message, see http://ix.io/3M1V
[03:40:45] <FromDiscord> <mratsim> https://github.com/status-im/nimbus-eth2/commit/ce0f7af862a5319a49e74ef3539d9ad8016e181d
[03:40:59] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:41:11] <FromDiscord> <mratsim> L219 for the storing, and L114 for the unstoring
[03:45:51] <FromDiscord> <Elegantbeef> Yea this stuff is silly
[03:45:59] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3M1W isnt a good solution 😀
[03:47:26] <FromDiscord> <Elegantbeef> I just had to make 100% certain i wasnt crazy
[03:47:55] <FromDiscord> <Elegantbeef> I guess the issue is that passing a generic typedesc doesnt mean instantiation ever occured
[03:48:06] <FromDiscord> <Elegantbeef> Whereas assigning it a variable means it occurs
[03:57:52] <arkanoid> been wasting a lot of time on a weird futhark/clang SIGSEGV that I've reproduced in a minimal example case in docker
[03:58:03] <arkanoid> I'm not sure what's going on here
[04:01:41] <FromDiscord> <Patitotective> Is there a `parseSeq` procedure?
[04:03:43] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[04:04:14] <FromDiscord> <Elegantbeef> There is not
[04:04:29] <FromDiscord> <Elegantbeef> `parseSeq` is ambiguous there is no common seq format
[04:05:11] <FromDiscord> <Patitotective> so?
[04:05:31] <FromDiscord> <Elegantbeef> So what?
[04:26:56] <FromDiscord> <tsoj> How can I remove every last bit of choosenim and nimble from my machine (Manjro Linux)?
[04:31:21] <FromDiscord> <Patitotective> In reply to @Elegantbeef "So what?": so how do i parse a sequence that's represented in a string?
[04:32:05] <FromDiscord> <Elegantbeef> Depends on the string
[04:32:33] <FromDiscord> <Elegantbeef> Assuming it's `[]` you iterate over it parsing each element internally
[04:32:52] <FromDiscord> <Patitotective> `"@[1, "a"]"`↵And I need to convert each element to a `PrefsNode`
[04:32:55] <FromDiscord> <Elegantbeef> Then nested collections require you counting open/closed\`
[04:33:15] <FromDiscord> <Patitotective> In reply to @Elegantbeef "Assuming it's `[]` you": do i need to parse the sequence manually? like split the elements manually?
[04:33:19] <FromDiscord> <Rika> Yes
[04:33:23] <FromDiscord> <Elegantbeef> Dont split it
[04:33:41] <FromDiscord> <Patitotective> In reply to @Elegantbeef "Dont split it": then?
[04:33:42] <FromDiscord> <Rika> You can use parse utils for that
[04:33:48] <FromDiscord> <Rika> No splitting needed
[04:33:49] <FromDiscord> <Elegantbeef> iterate over it
[04:34:07] <FromDiscord> <Elegantbeef> parseutils is a nice API to iterate over it
[04:34:14] <FromDiscord> <evoalg> `@[1, "a"]` is not a valid seq
[04:34:27] <FromDiscord> <Elegantbeef> Eh they're using object variants so it's a representatiion
[04:34:52] <FromDiscord> <Elegantbeef> Either way you need to identify the type, if it doesnt start with a `"` you know it's an int or float
[04:34:59] <FromDiscord> <Elegantbeef> if it doesnt have a `.` you know it's an int
[04:34:59] <FromDiscord> <Patitotective> In reply to @Elegantbeef "parseutils is a nice": could you give me an example?
[04:35:10] <FromDiscord> <Elegantbeef> Fine
[04:35:16] <FromDiscord> <Patitotective> yea, i already have the types defined in my parser grammar
[04:35:20] <FromDiscord> <Elegantbeef> Lazy bums! 😛
[04:35:21] <FromDiscord> <Rika> Beef you are weak smh
[04:35:44] <FromDiscord> <Elegantbeef> I'm not going to do it nicely
[04:36:42] <FromDiscord> <Patitotective> In reply to @Elegantbeef "Lazy bums! 😛": hey, at least i dont have a dog in my pfp lmao
[04:36:52] <FromDiscord> <Elegantbeef> The fuck does that mean
[04:36:55] <FromDiscord> <Elegantbeef> Leave my dog out of this
[04:39:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3M26
[04:40:34] <FromDiscord> <Elegantbeef> `  assert s.toOpenArray(0, 1) == ['@', '[']` better
[04:40:46] <FromDiscord> <Patitotective> Thanks 😺
[04:41:12] <FromDiscord> <Elegantbeef> See rika it's a really shitty impl that assumes 900 things
[04:42:06] <FromDiscord> <Rika> Why don’t you use skip while?
[04:42:51] <FromDiscord> <Elegantbeef> Instead of the setting to `2`?
[04:43:01] <FromDiscord> <Rika> No instead of skipping until
[04:43:11] <FromDiscord> <Elegantbeef> It's the same thing
[04:43:22] <FromDiscord> <Rika> Not if you want to expand out of integers
[04:44:03] <FromDiscord> <Elegantbeef> If you want to support {float, string, int} all you have to do is `skipUntil(Digits + {'.', '"'})`
[04:44:47] <FromDiscord> <Elegantbeef> skipWhile is afterall just the opposite of skipuntil
[04:44:54] <FromDiscord> <Elegantbeef> They do the same thing you just pass the opposite flags
[04:45:09] <FromDiscord> <Rika> I know, you don’t need the digits set of you use skip while though
[04:45:18] <FromDiscord> <Rika> You don’t need to even use the opposite set
[04:45:33] <FromDiscord> <Rika> Just pass the same set as the last one
[04:45:39] <FromDiscord> <Elegantbeef> `Skips all characters while one char from the set token is found.`?
[04:46:30] <arkanoid> I have a minimal C example and a minimal Nim example calling the same C functions, the C one works, the Nim SIGSEGV. I'm trying to track down the issue, but I'm failing. The testcase is very small: Nim -> https://github.com/arkanoid87/futhest/blob/master/src/futhest.nim , C -> https://github.com/arkanoid87/futhest/blob/master/csrc/futhest.c
[04:47:14] <FromDiscord> <Elegantbeef> Rika I'm probably just misunderstanding what you mean
[04:47:19] <FromDiscord> <Rika> Likely
[04:47:25] <FromDiscord> <Rika> I don’t know how
[04:47:46] <FromDiscord> <Elegantbeef> Well i'm an idiot
[04:47:47] <FromDiscord> <Elegantbeef> So that doesnt help
[04:56:43] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:12:34] <FromDiscord> <auxym> Hey @ElegantBeef my nim tinyusb stuff is compiling. Not doing anything useful yet, but at least correctly showing up as hid+cdc under linux
[05:12:57] <FromDiscord> <Elegantbeef> Nice!
[05:17:38] <FromDiscord> <Elegantbeef> @mratsim\: after looking at what's going on I do think not being able to get the instantiated type information makes sense for `A[int]` but there should be a VM operation like `instantiateType` which takes a `nnkBracketExpr` and instantiates it returning a `sym` to it
[05:22:08] <NimEventer> New thread by Giaco: Tracking down SIGSEGV. What's the difference between this Nim and C code?, see https://forum.nim-lang.org/t/8796
[05:24:29] <arkanoid> yup, that's me, if you have some FFI knowledge should be easy to track down. I just can't see where the problem is
[05:28:09] <FromDiscord> <Patitotective> How can I ignore some rule in _npeg_? Like ignore a comment, or match something but not include it
[05:29:06] <FromDiscord> <Rika> just parse it and do nothing with it
[05:35:55] <FromDiscord> <Patitotective> In reply to @Rika "just parse it and": LOL it worked, hehe i was thinking on other parser
[05:38:03] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3M2l
[05:56:31] *** Joins: neurocyte091705 (~neurocyte@user/neurocyte)
[05:58:48] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:58:48] *** neurocyte091705 is now known as neurocyte09170
[06:22:51] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:393a:180b:7a9e:c656) (Quit: adigitoleo)
[06:43:52] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:9535:ae81:77e9:3952)
[07:11:09] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:38:47] <NimEventer> New thread by Xioren: Thoughts on error vs fatal log levels?, see https://forum.nim-lang.org/t/8797
[08:21:23] <arkanoid> Yardanico: you got it, it is a regression
[08:21:33] <arkanoid> damn I've wasted so many hours on this
[08:48:49] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[08:56:13] *** Quits: kayabaNerve_ (~kayabaNer@user/kayabanerve) (Ping timeout: 240 seconds)
[08:58:32] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[09:06:03] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:13:00] <FromDiscord> <blans> sent a code paste, see https://play.nim-lang.org/#ix=3M2M
[09:13:10] <FromDiscord> <Elegantbeef> it's for generics
[09:13:16] <arkanoid> do you know why querySetting(nimcacheDir) has suffix _check when executed by nimsuggest?
[09:13:17] <FromDiscord> <Rika> Here is beef
[09:13:26] <FromDiscord> <Rika> About to write an essay on this
[09:13:30] <FromDiscord> <blans> what does it do?
[09:13:51] <FromDiscord> <Elegantbeef> when used in a generic `bind` says "Hey only use procedures declared above named `x`" in the case you did `bind x`
[09:14:08] <FromDiscord> <Elegantbeef> It closes the symbol's resolution to the generic's declaration
[09:14:18] <FromDiscord> <Elegantbeef> So it only looks at what is available
[09:14:30] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#generics-bind-statement
[09:14:31] <FromDiscord> <blans> why can you set it to a type then
[09:14:38] <FromDiscord> <Rika> Mixin is the reverse if you wonder
[09:14:44] <FromDiscord> <Elegantbeef> Why would you be able to
[09:14:49] <FromDiscord> <blans> see the syntax above
[09:14:51] <FromDiscord> <blans> it compiles for some reason
[09:14:53] <FromDiscord> <Elegantbeef> `type A = bind int` makes no sense
[09:15:01] <FromDiscord> <Elegantbeef> dumptree isnt typed
[09:15:03] <FromDiscord> <blans> it uses `nnkBind` instead of `nnkBindStmt`
[09:15:05] <FromDiscord> <Elegantbeef> It's not semantically checked
[09:15:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3M2N
[09:15:34] <FromDiscord> <Elegantbeef> Untyped code does not have to be semantically checked
[09:15:36] <FromDiscord> <blans> why would it have its own node then
[09:15:38] <FromDiscord> <Elegantbeef> It just has to parse
[09:15:41] <FromDiscord> <blans> why is it parsing
[09:15:51] <FromDiscord> <Rika> Because that’s syntax not semantically checked yet
[09:15:52] <FromDiscord> <Elegantbeef> Cause it's written Nim code?
[09:16:04] <FromDiscord> <blans> no other statement works
[09:16:11] <FromDiscord> <blans> how do I say this
[09:16:20] <FromDiscord> <blans> it looks like there is supposed to be some use of `bind` for types specifically
[09:16:22] <FromDiscord> <Rika> There needs to be a representation for code that has been checked in syntax but not in semantics
[09:16:29] <FromDiscord> <blans> and there is specific parser behavior for it
[09:16:35] <FromDiscord> <Rika> Again it makes no sense semantically but it does syntactically
[09:16:41] <FromDiscord> <Elegantbeef> There  isnt↵(@blans)
[09:16:44] <FromDiscord> <Rika> That is probably reserved for future use
[09:17:02] <FromDiscord> <Elegantbeef> that works aswell
[09:17:07] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/Ncz
[09:17:10] <FromDiscord> <blans> that could work
[09:17:29] <FromDiscord> <blans> sent a code paste, see https://play.nim-lang.org/#ix=3M2O
[09:17:31] <FromDiscord> <Rika> sent a code paste, see https://paste.rs/Twz
[09:17:38] <FromDiscord> <Rika> In reply to @blans "that could work": But it doesn’t, because that isn’t there
[09:17:48] <FromDiscord> <Rika> You could say bind could work too if you made the template for it…
[09:18:01] <FromDiscord> <blans> I have no gripes with you guys' point of what dumpTree does
[09:18:02] <FromDiscord> <Rika> Though actually
[09:18:05] <FromDiscord> <Rika> I think it’s a keyword
[09:18:16] <FromDiscord> <blans> I was just confused by why it's parsed specifically and differently than the regular bind statement and for types only
[09:18:20] <FromDiscord> <blans> it also works in generic constraints
[09:18:27] <FromDiscord> <Rika> Not for types only I assume
[09:18:37] <FromDiscord> <Rika> Try assigning a var to “bind something”
[09:18:40] <FromDiscord> <Rika> Prolly has the same node
[09:18:45] <FromDiscord> <Elegantbeef> If bind is on the right side of any `=` it turns into `nnkBind`
[09:18:51] <FromDiscord> <Rika> Yup
[09:18:53] <FromDiscord> <Elegantbeef> For instance
[09:18:55] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3M2P
[09:19:08] <FromDiscord> <Rika> Beef ignored my insult lmfao
[09:19:08] <FromDiscord> <blans> that is weird
[09:19:11] <FromDiscord> <Rika> Not really
[09:19:12] <FromDiscord> <Elegantbeef> nnkBindStmt doesnt make sense when it's returned
[09:19:17] <FromDiscord> <Rika> Expression and statement distinction
[09:19:26] <FromDiscord> <Elegantbeef> Indeed
[09:19:32] <FromDiscord> <Elegantbeef> I seen it rika
[09:19:38] <FromDiscord> <blans> yes I am just confused by whether or not there is supposed to be an actual bind expression
[09:19:40] <FromDiscord> <blans> sorry
[09:19:48] <FromDiscord> <Elegantbeef> Well then ask that question 😛
[09:19:51] <FromDiscord> <Rika> There could be in the future
[09:19:58] <FromDiscord> <Rika> Now there is not
[09:20:01] <FromDiscord> <Elegantbeef> The answer is presently there is not, but there could be in the future not that it makes sense
[09:20:26] <arkanoid> is it normal that querySetting(nimcacheDir) ends with "_d" or "_r" for my project, but for "_check" for nimsuggest and code completion?
[09:20:27] <FromDiscord> <Rika> It’s just an “in case someone changes their mind and thinks it’s a good idea we at least have it reserved”
[09:20:31] <FromDiscord> <Elegantbeef> Nim generally implicitly adds to scope, so a bind expression would be an oddity
[09:20:43] <FromDiscord> <Rika> In reply to @arkanoid "is it normal that": D and r means debug and release no?
[09:20:52] <FromDiscord> <Rika> I assumed it’s what it meant
[09:21:34] <arkanoid> yes, and I'm ok with it, but I'm fighting with nimsuggest not working because he it's looking for files in ~/.cache/nim/myproject_check, that does not exist
[09:22:05] <FromDiscord> <Rika> It probably does for a brief moment when it runs then gets deleted? Not sure, Nim suggest is a nightmare I’d say
[09:22:41] <arkanoid> oh :( ok
[09:23:08] <arkanoid> so it must be a bug in futhark
[09:23:10] <FromDiscord> <Rika> I’m just guessing here
[09:25:17] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[09:27:36] <arkanoid> apparently it is like you said. You can't use querySetting(nimcacheDir) in macros otherwise nimsuggest would error out
[09:27:46] <arkanoid> relevant issue https://github.com/PMunch/futhark/issues/12
[09:27:58] *** Quits: rb (~augh@theguntretort.com) (Quit: ZNC - https://znc.in)
[09:28:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:29:10] *** Joins: rwb (~augh@theguntretort.com)
[09:32:54] <arkanoid> is nimsuggest code all here? https://github.com/nim-lang/nimsuggest? If I search for "cache" or "check" I'm getting zero result. I want to understand when querySetting(nimcacheDir) results in suffix "_check" and when not
[09:35:23] <FromDiscord> <xflywind> In reply to @arkanoid "is nimsuggest code all": https://github.com/nim-lang/Nim/tree/devel/nimsuggest
[09:35:58] <FromDiscord> <xflywind> here you are
[09:57:56] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Read error: Connection reset by peer)
[09:59:22] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[10:07:03] *** Quits: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com) (Quit: Ping timeout (120 seconds))
[10:07:17] *** rwb is now known as rb
[10:07:21] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[10:14:42] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Read error: Connection reset by peer)
[10:17:18] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[10:26:16] *** Joins: vicfred (~vicfred@user/vicfred)
[10:28:03] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Read error: Connection reset by peer)
[10:28:43] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[10:33:04] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[10:33:32] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[10:36:09] *** Joins: PMunch (~PMunch@user/pmunch)
[10:42:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[11:06:46] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 260 seconds)
[11:54:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:49:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[12:55:56] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[13:04:07] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:46:36] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3M3H
[13:48:41] <FromDiscord> <hmmm> I'm possibly missing a return / result somewhere lol
[13:51:09] <FromDiscord> <Hamid_Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3M3I
[13:51:32] <FromDiscord> <hmmm> 👀
[13:51:54] <FromDiscord> <hmmm> b-b-ut I want to do it with the nnks
[13:52:11] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3M3J
[13:53:01] <FromDiscord> <Tanguy> `nnkEmpty.newNimNode` could also be `newEmptyNode` if that's your jam
[13:53:48] <FromDiscord> <hmmm> I was missing a bunch of trees lol 😃
[13:56:09] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[13:56:21] <FromDiscord> <Elegantbeef> `newVarStmt` 😛
[13:57:19] <FromDiscord> <hmmm> beef you still around! go sleep man, by the time you wake up I will have a non working version of for i in seq: echo i macro to submit to you
[13:57:53] <FromDiscord> <Rika> Just use quote…
[13:58:11] <FromDiscord> <Elegantbeef> I mean i think they're attempting to learn the AST
[13:58:14] <FromDiscord> <Elegantbeef> So the answer is "just use dumptree\`
[13:58:25] <FromDiscord> <hmmm> heh I'm still in the part of the manual in which quote is not introduced so I can't use it
[13:58:52] <FromDiscord> <Elegantbeef> use dumptree and you'll learn AST faster
[13:59:05] <FromDiscord> <hmmm> make example on how to use dumptree
[13:59:08] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3M3K
[13:59:08] <FromDiscord> <hmmm> ah ok
[13:59:20] <FromDiscord> <hmmm> I see!
[13:59:22] <FromDiscord> <hmmm> very comfy
[13:59:24] <FromDiscord> <Elegantbeef> Have you not read my macros tutorial?
[13:59:47] <FromDiscord> <Elegantbeef> Also dont use quote, `std/genasts` is nicer!
[13:59:49] <FromDiscord> <hmmm> nu beef they are 2 or 3 orders of magnitude harder than I can grok, the thing that for now it's working is the manual lol
[14:00:06] <FromDiscord> <Elegantbeef> I mean it shows dumptree
[14:00:13] <FromDiscord> <hmmm> link!
[14:00:17] <NimEventer> New thread by Trisub: Get formatted SQL query, see https://forum.nim-lang.org/t/8799
[14:00:18] <FromDiscord> <Elegantbeef> https://dev.to/beef331/demystification-of-macros-in-nim-13n8
[14:00:35] <FromDiscord> <hmmm> ok I'll read it 🥳
[14:08:12] <FromDiscord> <Elegantbeef> And now to take your advice and to go to sleep
[14:24:18] <FromDiscord> <Rika> In reply to @Elegantbeef "Also dont use quote,": Sell me on it later when you wake
[14:30:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[14:39:02] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Ping timeout: 240 seconds)
[14:41:35] *** Quits: oprypin (~irc@pryp.in) (Remote host closed the connection)
[14:49:39] *** Joins: Vladar (~Vladar@46.162.2.53)
[15:05:25] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:07:38] *** Joins: oprypin (~irc@pryp.in)
[15:13:22] *** Quits: oprypin (~irc@pryp.in) (Quit: Bye)
[15:14:27] <PMunch> genast just looks like quote with extra steps 
[15:52:04] *** Joins: rockcavera (~rc@192.12.112.107)
[15:52:04] *** Quits: rockcavera (~rc@192.12.112.107) (Changing host)
[15:52:04] *** Joins: rockcavera (~rc@user/rockcavera)
[16:00:12] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (Quit: oddish)
[16:18:13] *** Joins: yann-kaelig (~yann-kael@static.235.1.76.144.clients.your-server.de)
[16:18:23] *** Parts: yann-kaelig (~yann-kael@static.235.1.76.144.clients.your-server.de) ()
[16:25:26] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[16:33:40] <FromDiscord> <eyecon> In reply to @Elegantbeef "https://dev.to/beef331/demystification-of-macros-in": Ah, you wrote that - that was a nice article indeed
[16:33:43] <FromDiscord> <eyecon> Thanks
[16:34:37] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:44:58] <PMunch> arkanoid, you around?
[16:49:00] <PMunch> Hmm, it's a shame that nimble doesn't have any kind of hooking infrastructure..
[16:53:15] <FromDiscord> <Bung> @PMunch https://github.com/PMunch/nimlsp/pull/109 could this be merged so that I can split rest part of my big PR
[16:53:53] <PMunch> That is still a massive PR to go through, haven't had time for it
[16:54:13] <PMunch> Probably won't have time for it until after the FOSDEM video recording deadline, possibly not until after FOSDEM itself
[16:56:23] <PMunch> You should still be able to split it up
[17:25:09] <FromDiscord> <Patitotective> does _npeg_ has an example of parsing nim?
[17:25:14] <FromDiscord> <Patitotective> (edit) "has" => "have"
[17:25:42] <FromDiscord> <Patitotective> (edit) "does _npeg_ have an example of parsing nim? ... " 03added "i'm trying to parse a string but i'm not sure how"
[17:25:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[17:26:03] <FromDiscord> <Patitotective> (edit) "how" => "how↵are java strings similar to nim? (because there's a java example)"
[17:27:03] <PMunch> You want to parse the same kind of strings that Nim can parse?
[17:27:10] <FromDiscord> <Patitotective> yea
[17:27:14] <PMunch> I.e. "Something \t with escapes" etc
[17:27:32] <FromDiscord> <Patitotective> yes
[17:27:37] <PMunch> Do you also want to support """ and things like r"raw string"
[17:27:47] <FromDiscord> <Patitotective> just raw strings
[17:27:54] <PMunch> Just raw strings?
[17:28:07] <FromDiscord> <Patitotective> i dont want multiline strings
[17:28:10] <FromDiscord> <Patitotective> (edit) "multiline" => "multi-line"
[17:28:17] <FromDiscord> <Patitotective> (edit) "i dont want ... multi-line" 03added "to parse"
[17:28:36] <PMunch> Raw strings don't have any escaping
[17:29:05] <PMunch> Well apart from double "" to mean one "
[17:30:07] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3M4t
[17:30:48] <FromDiscord> <Patitotective> So I don't have to say which characters are valid and which are not (?)
[17:30:59] <FromDiscord> <Patitotective> Just take everything in quotes
[17:31:06] <FromDiscord> <Rosen> Won't 1 be greedy? I feel like that will gobble 2 strings on one line into 1 string
[17:31:24] <FromDiscord> <Rosen> Should do a character class of everything but " I feel for that 1 term
[17:31:42] <FromDiscord> <Patitotective> my syntax only allows one string per line
[17:32:06] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3M4w
[17:32:14] <PMunch> It should be starts with ", followed by "" or !", ending with "
[17:32:22] <Zevv> '"' * >*(1-'"') * '"'
[17:32:44] <Zevv> if you want to handle escapes, look at the json parser
[17:32:53] <Zevv> like "this\"contains a quote"
[17:33:44] <FromDiscord> <Patitotective> In reply to @Zevv "like "this\"contains a quote"": but in nim that's not valid, isn't it?
[17:33:51] <Zevv> sure it is
[17:33:55] <FromDiscord> <Patitotective> you should `\"`
[17:35:24] <Zevv> I did, didn't I?
[17:35:35] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3M4z
[17:36:00] <Zevv> the unicode escape is not nim
[17:36:10] <FromDiscord> <Patitotective> ok
[17:36:22] <Zevv> https://nim-lang.org/docs/manual.html#lexical-analysis-string-literals
[17:36:54] <Zevv> there is also a complete valid java parser in misc/java.nim
[17:37:05] <Zevv> but it's huge and nasty to understand all of it
[17:37:20] <Zevv> you can steal StringLiteral from there I guess
[17:40:33] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3M4A
[17:40:38] <FromDiscord> <Patitotective> or `OctalEscape` too?
[17:40:48] <FromDiscord> <Patitotective> (edit) "or `OctalEscape` too?" => "and `OctalEscape`?"
[17:49:54] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3M4C
[17:50:03] <FromDiscord> <Patitotective> (edit) "https://paste.rs/Q2D" => "https://play.nim-lang.org/#ix=3M4D"
[17:50:13] <FromDiscord> <Patitotective> In reply to @Zevv "https://nim-lang.org/docs/manual.html#lexical-analy": According to that
[17:51:26] <FromDiscord> <Patitotective> But I'm not sure about the `escape | 1` part
[17:52:02] <FromDiscord> <Patitotective> If It's not an escaped character, what it should be? alphanum characters? printable characters?
[17:54:47] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3M4G
[17:54:54] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3M4G" => "https://play.nim-lang.org/#ix=3M4H"
[18:06:13] <FromDiscord> <Patitotective> Is there a parse string procedure? I have a raw string `"\asd"` and I want to parse it into `"\7sd"`
[18:21:18] *** Joins: arkurious (~arkurious@user/arkurious)
[18:26:29] <FromDiscord> <Patitotective> I was https://nim-lang.org/docs/strutils.html#unescape%2Cstring%2Cstring%2Cstring
[18:26:38] *** Quits: cuibonobo (~cuibonobo@c-73-43-219-210.hsd1.ga.comcast.net) (Quit: Leaving)
[18:37:56] <FromDiscord> <Michal Maršálek> Hi, how can I make the following code work? Thank you. https://play.nim-lang.org/#ix=3LOC
[18:48:19] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[19:01:06] <termer_> what's it supposed to do?
[19:01:09] <termer_> you have to give some details
[19:10:24] <FromDiscord> <Patitotective> Hey @PMunch, I'm having a problem with the _npeg_ stuff↵I did use a stack, as you said, to save the key and the value and at the end I converted that stack into a table but the thing is that when it matches a sequence (`?"@"  "["  ( val  (','  ?S  val)  ?',' )  "]"`) it matches `val` first and I'm not able to add them to the sequence because I capture the sequence after the values were captured
[19:10:32] <FromDiscord> <Patitotective> What should I do?
[19:11:12] <FromDiscord> <Patitotective> (edit) "converted" => "convert"
[19:12:03] <FromDiscord> <Michal Maršálek> In reply to @termer_ "what's it supposed to": Ok, consider this simpler case: https://play.nim-lang.org/#ix=3M52
[19:12:06] <FromDiscord> <Michal Maršálek> This works
[19:15:59] <FromDiscord> <Michal Maršálek> And I just need to change it so that the type of the result of `f ` is parametrized by a field of `M` rather than `M` itself.
[19:17:52] <FromDiscord> <Isofruit> Curious question: I have a proc that throws a FieldDefect-Exception at compile time when you do sth wrong (looks if a field pointing to model A is on model B. Since model definitions are known at compile time, this proc can work at compile time). I wanted to unittest that proc, ala "if you use this proc with the wrong models then this shall throw an error"... how do I test if a proc breaks the compiler if it is used wrongly when the co
[19:18:37] <termer_> I'm honestly not sure, I'm not very advanced with that sort of thing in Nim Michal
[19:20:40] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3M55
[19:59:02] <FromDiscord> <mratsim> In reply to @Isofruit "Curious question: I have": `when compiles(something)` is the ultimate hack
[19:59:33] <FromDiscord> <Isofruit> No way
[19:59:41] <FromDiscord> <mratsim> yesway
[19:59:42] <FromDiscord> <Isofruit> there's a proc, macro or whatever it is that checks if a piece of code compiles?
[19:59:47] <FromDiscord> <mratsim> yes
[20:00:01] <FromDiscord> <Isofruit> You can't hear it, but dear god am I laughing
[20:00:34] <FromDiscord> <Isofruit> Is that std lib?
[20:01:00] <FromDiscord> <mratsim> in system
[20:01:05] <FromDiscord> <mratsim> no need to import anything
[20:01:12] <FromDiscord> <mratsim> Ultimate hack I tell you: https://github.com/numforge/loop-fusion/blob/master/loopfusion.nim#L38-L41
[20:03:11] <FromDiscord> <Isofruit> I just tested it in my test, it works
[20:03:16] <FromDiscord> <Isofruit> I am legitimately impressed and amused
[20:04:06] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3M5i
[20:06:25] <NimEventer> New thread by Prestige: Editor issues, nimsuggest reporting false errors?, see https://forum.nim-lang.org/t/8800
[20:28:27] <FromDiscord> <TurtleP> hey, so I've been trying to use <https://github.com/Yardanico/nim-taglib> library, but taglib fails to read some of my files due to accented/other chars being in the path or filename. anyone know how I might be able to fix it?
[20:31:53] <FromDiscord> <Yardanico> oh, totally forgot about this repo
[20:32:04] <FromDiscord> <Yardanico> In reply to @TurtleP "hey, so I've been": can you show how you're using the lib?
[20:32:50] <FromDiscord> <TurtleP> sure
[20:33:11] <FromDiscord> <TurtleP> let me throw this on GitHub reaaaal quick
[20:35:31] <FromDiscord> <TurtleP> <https://github.com/TurtleP/MusicScraper/tree/dev/nim>
[20:36:07] <FromDiscord> <Yardanico> also how you installed taglib?
[20:36:10] <FromDiscord> <TurtleP> basically: <https://github.com/TurtleP/MusicScraper/blob/dev/nim/src/tagscraper.nim#L71>
[20:36:24] <FromDiscord> <TurtleP> used my existing msys2 to install that and then copied it over
[20:36:34] <FromDiscord> <Yardanico> no, i mean what repo specifically
[20:36:38] <FromDiscord> <Yardanico> mine or the original?
[20:36:50] <FromDiscord> <TurtleP> oh, your repo, the fork version
[20:37:16] <FromDiscord> <TurtleP> the original repo doesn't even work on latest nim 😅
[20:37:32] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[20:37:35] <FromDiscord> <Yardanico> also btw, you don't need those hacks to get the nimble package version from the nimble package - you can just use NimblePkgVersion strdefine :) but that's another thing
[20:37:46] <FromDiscord> <TurtleP> TIL
[20:38:32] <FromDiscord> <Yardanico> and what is the exact issue?
[20:38:44] <FromDiscord> <Yardanico> i just checked and it worked first try on my music folder with some songs having japanese or similar utf characters
[20:38:51] <FromDiscord> <Yardanico>  https://media.discordapp.net/attachments/371759389889003532/931233340500095056/unknown.png
[20:39:08] <FromDiscord> <TurtleP> is that on Windows or Linux?
[20:39:10] <FromDiscord> <Yardanico> linux
[20:39:14] <FromDiscord> <TurtleP> yeah I'm on Windows
[20:39:23] <FromDiscord> <TurtleP> sent a code paste, see https://play.nim-lang.org/#ix=3M5y
[20:39:39] <FromDiscord> <TurtleP> paths/filenames with these chars don't open
[20:40:39] <FromDiscord> <TurtleP> the lib I used for python, pytaglib, that uses wchar for the path on Windows
[20:40:49] <FromDiscord> <TurtleP> idk if that's helpful to know or not
[20:40:53] <FromDiscord> <TurtleP> and that one works
[20:41:02] <FromDiscord> <TurtleP> but I want to switch to nim for performance reasons
[20:41:46] <FromDiscord> <Yardanico> also just saying - taglib_set_strings_unicode is not needed if you import `taglib` as it does that by itself
[20:42:01] <FromDiscord> <TurtleP> hm, that's what I figured
[20:42:18] <FromDiscord> <TurtleP> I tried setting that to false too, but that didn't fix it
[20:42:19] <FromDiscord> <Yardanico> i can try running with `wine` to see if i can get an error
[20:46:06] *** Joins: mahlon (~mahlon@martini.nu)
[20:47:38] <FromDiscord> <Ksr> sent a code paste, see https://play.nim-lang.org/#ix=3M5B
[20:47:47] <FromDiscord> <Rika> you read the expectations
[20:47:58] <FromDiscord> <Yardanico> In reply to @Ksr "How exactly should I": this is not a full error
[20:48:09] <FromDiscord> <Yardanico> most lines after `:` also  belong to it
[20:48:18] <FromDiscord> <xx_ns> In reply to @TurtleP "hm, that's what I": try converting strings to utf-16 with https://nim-lang.org/docs/encodings.html#convert%2Cstring%2Cstring%2Cstring
[20:48:26] <FromDiscord> <Ksr> Yes. I mean the expectation are clear. I wonder how to interpret the part between < >
[20:48:36] <FromDiscord> <Yardanico> it shows the argument types that you got
[20:48:38] <FromDiscord> <TurtleP> In reply to @xx_ns "try converting strings to": I believe I tried doing that already
[20:48:41] <FromDiscord> <Yardanico> it's hard to say without code
[20:48:48] <FromDiscord> <TurtleP> oh, maybe not that
[20:48:50] <FromDiscord> <TurtleP> I tried runes
[20:49:06] <FromDiscord> <Yardanico> In reply to @xx_ns "try converting strings to": i don't think it's needed here as nim stdlib already does all needed stuff for supporting unicode filenames on windows
[20:50:18] <FromDiscord> <Ksr> (edit) "expectation are" => "expected list is"
[20:52:34] <NimEventer> New thread by Fzrg: Why don't build Nim libraries ecosystem on Rust ecosystem?, see https://forum.nim-lang.org/t/8801
[20:52:52] <FromDiscord> <Yardanico> "Rust is safer and faster than Nim, and has a bigger community." instant classic
[20:53:14] <FromDiscord> <Yardanico> ok finally mingw boost built
[20:53:58] <FromDiscord> <Yardanico> "So a Rust libraries is better than a Nim library (safer,faster,more actively maintened,..)"
[20:54:24] *** Joins: vicfred (~vicfred@user/vicfred)
[20:54:35] <FromDiscord> <Rika> cant tell if theyre just trying to get a reaction out of us\
[20:54:40] <FromDiscord> <Yardanico> maybe
[20:55:02] <FromDiscord> <TurtleP> I've tried rust and it's .. not fun tbh
[20:55:09] <FromDiscord> <Yardanico> @TurtleP where did you get libtag_c.dll ?
[20:55:24] <FromDiscord> <TurtleP> it's from msys2's packages
[20:55:25] <FromDiscord> <Isofruit> I'm... confused how Rust is supposedly safer, is that about the match operator and how Rust forces you to cover all possible outcomes of your program with Option and Result?
[20:55:26] <FromDiscord> <Yardanico> ah nvm i have it too now yeah
[20:55:27] <FromDiscord> <TurtleP> I copied it over
[20:55:29] <FromDiscord> <Yardanico> just not the correct folder
[20:55:57] <FromDiscord> <Yardanico> In reply to @Isofruit "I'm... confused how Rust": they probably talk about memory safety, but memory safety is just one of the many aspects of safety
[20:56:05] <FromDiscord> <Yardanico> and nim isn't really "memory unsafe" either
[20:56:11] <FromDiscord> <Yardanico> if you don't use the unsafe features
[20:56:17] <FromDiscord> <Isofruit> But your beginners default on nim is GC'ed
[20:56:28] <FromDiscord> <Isofruit> that is literally the most memory safe you can be I'd argue
[20:57:00] <FromDiscord> <hmmm> well for the libs we should concede at least the actively mantained and less buggier statement by virtue of raw number headcount. The average rust lib has 100 contributors lol
[20:57:53] <FromDiscord> <Yardanico> "average" rust lib has 1 contributor, just like with nim
[20:58:10] <FromDiscord> <Yardanico> maybe 2 at most
[20:58:11] <FromDiscord> <hmmm> really?
[20:58:19] <FromDiscord> <Yardanico> do you know what "average" is?
[20:58:27] <FromDiscord> <hmmm> yea ok but you know what I mean lol
[20:58:30] <FromDiscord> <Rika> its not that the average is higher
[20:58:38] <FromDiscord> <Rika> its more like there are more high-contrib libs
[20:59:12] <FromDiscord> <Rika> it is true maybe a rust wrapping system would be nice
[20:59:30] <FromDiscord> <Rika> the op is just being a shithead expressing it, i guess
[20:59:35] <FromDiscord> <Yardanico> In reply to @Rika "it is true maybe": that already exists
[20:59:41] <FromDiscord> <Rika> it does?
[20:59:43] <FromDiscord> <Rika> 👀
[20:59:47] <FromDiscord> <Yardanico> but he also does some bold claims like rust is safer, faster, etc
[20:59:52] <FromDiscord> <Yardanico> and we should all just use rust libs instead of making nim ones
[20:59:56] <FromDiscord> <Yardanico> In reply to @Rika "it does?": yes
[21:00:12] <FromDiscord> <Yardanico> https://forum.nim-lang.org/t/5816
[21:00:40] <FromDiscord> <Rika> dope
[21:00:53] <FromDiscord> <Rika> do people still say dope
[21:00:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:01:49] <FromDiscord> <Isofruit> I do, I am people, so yes
[21:02:15] <FromDiscord> <hmmm> I mean the bold claim is thinking sane people that have nim would ever write a line of rust in their life
[21:02:28] <FromDiscord> <Yardanico> @TurtleP yeah i can kind of get the same errors, i'll try to see if i can do anything about that https://media.discordapp.net/attachments/371759389889003532/931239286303490068/unknown.png
[21:02:36] <FromDiscord> <Yardanico> maybe taglib behaves different under windows or something (this is with wine)
[21:08:00] <FromDiscord> <Yardanico> ill see
[21:08:38] <FromDiscord> <Isofruit> @Yardanico A lot more diplomatically put than I'd have felt responding, kudos (to the forum post)
[21:09:21] <FromDiscord> <Yardanico> well i just responded how i felt in the moment, didn't think a lot about the post :P
[21:09:49] <FromDiscord> <Yardanico> ah right @TurtleP you said that there's a python binding, right?
[21:09:52] <FromDiscord> <TurtleP> mhm
[21:10:01] <FromDiscord> <Yardanico> i wonder how they handle that
[21:10:10] <FromDiscord> <TurtleP> using wchar iirc
[21:10:12] <FromDiscord> <Isofruit> The post just smelled a bit like dishonest discourse to me
[21:10:13] <FromDiscord> <Yardanico> what C function do they call specifically, because taglib_file_new only takes `const char filename`
[21:10:17] <FromDiscord> <Yardanico> there's no overload for wchar with it
[21:10:22] <FromDiscord> <TurtleP> hmm
[21:10:25] <FromDiscord> <Isofruit> (edit) "The post just smelled a bit like dishonest discourse to me ... " 03added "(from the OP)"
[21:10:27] <FromDiscord> <Yardanico> i'll check the source
[21:10:51] <FromDiscord> <TurtleP> <https://github.com/supermihi/pytaglib/blob/main/src/taglib.pyx#L84>
[21:10:54] <FromDiscord> <Yardanico> oh yeah, just like I suspected, pytaglib wraps taglib's C++ API, not the C API
[21:11:10] <FromDiscord> <TurtleP> ah
[21:11:45] <FromDiscord> <Yardanico> and tagpy wraps the C++ api too
[21:12:09] <FromDiscord> <Yardanico> i'll check other bindings too
[21:12:49] <FromDiscord> <TurtleP> btw is there any way to make nim see taglib? apparently it suddenly stopped compiling with it..
[21:13:00] <FromDiscord> <Yardanico> not sure what you mean by "see"
[21:13:09] <FromDiscord> <TurtleP> I had it copied to the mingw folder under lib
[21:13:37] <FromDiscord> <Yardanico> windows needs the .dlls to be present in the same folder as the binary
[21:13:39] <FromDiscord> <Yardanico> or in $PATH
[21:13:45] <FromDiscord> <TurtleP> it is in path, iirc
[21:14:03] <FromDiscord> <TurtleP> well, not the path that nimble can see I guess
[21:14:40] <FromDiscord> <Yardanico> if you mean the nim library itself - nimble will ensure all paths are correct with `nimble build` or `nimble run` or similar commands
[21:14:48] <FromDiscord> <Yardanico> and $PATH is a system variable
[21:15:43] <FromDiscord> <TurtleP> oh, not user
[21:19:55] <FromDiscord> <Yardanico> yeah @TurtleP i think there are two ways - either write a more complete taglib C api wrapper and use it with nim, or write a C++ binding to TagLib and use it with Nim (then you'll have to always compile with the C++ backend)
[21:20:28] <FromDiscord> <Yardanico> it seems that the C wrapper of the taglib is not really maintained and only has a few most common functions, and even maintainers said that it only has the most basic stuff wrapped
[21:21:10] <FromDiscord> <TurtleP> welp
[21:21:26] <FromDiscord> <TurtleP> yeah nim doesn't even want to compile with taglib here now.. not sure why
[21:21:48] <FromDiscord> <Yardanico> well if it was compiling before then you changed something that made it stop compiling?
[21:21:52] <FromDiscord> <TurtleP> nope
[21:21:56] <FromDiscord> <Yardanico> huh
[21:22:05] <FromDiscord> <Yardanico> maybe you opened a different terminal window without msys or something
[21:22:16] <FromDiscord> <TurtleP> both msys and pwsh fail to build
[21:22:26] <FromDiscord> <Yardanico> changed the environment somehow (build variables, etc)
[21:22:34] <FromDiscord> <Yardanico> it can't magically stop compiling by itself really
[21:22:39] <FromDiscord> <TurtleP> ¯\_(ツ)_/¯
[21:23:19] <FromDiscord> <TurtleP> might just stick with the python version then, idk what's going on
[21:25:21] <FromDiscord> <Yardanico> well I can't help you much here sadly, I'm not really interested in wrapping TagLib's C++ API :( maybe someone else is
[21:26:18] <FromDiscord> <TurtleP> getting taglib compiled n stuff alone is a pain tbf haha
[21:26:56] <FromDiscord> <Yardanico> well it's very easy on linux and was a littler harder for wine with mingw, luckily someone already added mingw taglib to AUR so I just built it from here
[21:27:23] <FromDiscord> <TurtleP> which is what I did.. so like idk what's going on why nim can't find it ¯\_(ツ)_/¯
[21:27:29] <FromDiscord> <Yardanico> what exactly can't it find?
[21:27:35] <FromDiscord> <Yardanico> the C library? the nim library? the dll?
[21:27:45] <FromDiscord> <TurtleP> The dll
[21:28:39] <FromDiscord> <Yardanico> have you tried copying the taglib DLL to the folder with the .exe?
[21:28:45] <FromDiscord> <Yardanico> you'll also need to copy all DLLs that are dependencies of that DLL
[21:28:49] <FromDiscord> <Yardanico> (excluding system ones)
[21:29:47] <FromDiscord> <TurtleP> Hmm I haven’t. Though with it refusing to build I dunno what to do.
[21:29:54] <FromDiscord> <Yardanico> and why does it refuse to build?
[21:30:02] <FromDiscord> <Yardanico> it doesn't need the dll to build, dll is only needed for runtime
[21:30:05] <FromDiscord> <TurtleP> Linking issues finding some other stuff
[21:30:14] <FromDiscord> <TurtleP> I’ll check in a few
[21:30:20] <FromDiscord> <TurtleP> Currently doing work things
[21:59:55] <FromDiscord> <konsumlamm> In reply to @hmmm "I mean the bold": the bold claim is thinking that this is true
[22:04:52] <FromDiscord> <Yardanico> https://forum.nim-lang.org/t/8801#57363
[22:05:09] <FromDiscord> <Isofruit> Yeh, I think shoving rust off does a disservice to the very real discussion that can be had there... but chances are, that has already been had a dozen times. ↵↵Rust has stuff going for it, but also a learning curve that is effectively a wall at a 90° angle that forces you to re-learn how to do everything the "right" way(s) in rust. ↵Same for nim, whose learning curve is much gentler, yet punches in the same weight class.
[22:08:53] <FromDiscord> <Isofruit> (That's from a webdev perspective, not systems programming, as I realize I should really prefix that because boy does mratsim's reply there open up a ton of topics I have no connection to)
[22:12:33] <FromDiscord> <konsumlamm> half the points aren't really relevant though...
[22:13:04] <FromDiscord> <konsumlamm> Nim does have a borrow checker but it's far less strict than Rust's (and it's not like Rust's borrow checker is unnecessarily strict for no reason), so you can't really say "this isn't an advantage of Rust because Nim has it too"
[22:13:19] <FromDiscord> <konsumlamm> DrNim isn't worked on currently
[22:14:08] <FromDiscord> <konsumlamm> comparing it to Ada SPARK (which is designed for formal verifying) is a bit disgenious as well
[22:15:20] <FromDiscord> <hmmm> hmm ye but I mean the point isn't about who is better, the point is that a random dude not nim user comes to nim forum asking to rewrite all in rust because rust is the best of the best. Obv people will contest that
[22:17:00] <FromDiscord> <konsumlamm> as for Rust being safer, i don't know why there's even discussion about that, it clearly is safer, it's pretty easy to invoke UB in Nim (since many things just compile to C without additional checks), whereas it's impossible in Rust without `unsafe` (unless there's a bug, and it's not like people regularly use `unsafe`)
[22:17:45] <FromDiscord> <konsumlamm> In reply to @hmmm "hmm ye but I": your point was that "no sane Nim programmer would touch Rust"
[22:17:56] <FromDiscord> <konsumlamm> which i heavily disagree with
[22:18:08] <FromDiscord> <konsumlamm> obviously it's a dumb idea to rewrite the Nim ecosystem in Rust
[22:19:11] <FromDiscord> <hmmm> that's because if you write in nim you appreciate what nim has to offer and probably you wouldn't exchange nim for rust better safety or whatever else rust might be better at
[22:19:37] <FromDiscord> <leorize> I might exchange nim for a working compiler, though \:p
[22:20:42] <FromDiscord> <Isofruit> a working compiler of... rust?
[22:22:14] <FromDiscord> <leorize> yea, rust biggest advantage is that your code tends to explode less
[22:25:36] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[22:26:04] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[22:26:34] <FromDiscord> <Isofruit> I don't have enough experience with either language to say much about that.↵I'd have gladly taken a longer look at rust if there were better learning material out there given how harsh the language's learning curve is. The frustration levels in it  just made it a not all that attractive choice to learn in my spare time where I'd actually like to enjoy coding.
[22:26:50] <FromDiscord> <Isofruit> (edit) "I don't have enough experience with either language to say much about that.↵I'd have gladly taken a longer look at rust if there were better learning material out there given how harsh the language's learning curve is. The frustration levels in it  just made it a not all that ... attractive" 03added "an"
[22:27:42] <FromDiscord> <Isofruit> Nim is just an order of magnitude more accessible to me which makes it actually fun to code in it, even to touch dark magic like macros
[22:30:59] <FromDiscord> <konsumlamm> honestly the official rust book is pretty good imo
[22:31:18] <FromDiscord> <konsumlamm> while i find the Nim tutorials ok
[22:32:44] <FromDiscord> <Isofruit> The rust book is a good introduction to get you introduced to the concepts
[22:33:25] <FromDiscord> <Isofruit> You learn to consciously understand them in a broad way, though not massively in-depth to the point you feel very confident in applying it
[22:33:41] <FromDiscord> <Isofruit> (edit) "You learn to consciously understand them in a broad way, though not massively in-depth to the point you feel very confident in applying it ... " 03added "with only few issues"
[22:34:49] <FromDiscord> <Isofruit> You can get to understand borrow checking in rust on a superficial level and still be frustrated for hours on how on earth you're supposed to set up config files with that concept in a framework that supposedly supports it but whose documentation in that regard is very hard to understand unless you already have the concept that the rust book merely introduces ingrained into your mind
[22:35:35] <FromDiscord> <Isofruit> The middle step from "introduction" to "becoming an expert" is something I've missed a lot in Rust, often hunting down solutions for the issues you stumble into when "exploring" the language and writing code in it took way longer than it should have.
[22:35:56] <FromDiscord> <mratsim> In reply to @konsumlamm "comparing it to Ada": The underlying question is, if you want safety, why aren't you writing Ada sparks
[22:35:57] <FromDiscord> <leorize> eventually you will also have to
[22:35:59] <FromDiscord> <leorize> fight nim
[22:36:10] <FromDiscord> <mratsim> (edit) "sparks" => "spark"
[22:36:13] <FromDiscord> <leorize> but the bar of entry is much lower, thankfully
[22:36:26] <FromDiscord> <Isofruit> Yeah, but by the time I have to fight nim I'm pretty sure I'll have understand a lot more aspects around the language
[22:36:31] <FromDiscord> <mratsim> Yeah you only need to use converters, static and generics ....
[22:36:46] <FromDiscord> <leorize> destructors, concepts, etc.
[22:36:53] <FromDiscord> <leorize> basically half of the language features
[22:37:01] <FromDiscord> <mratsim> destructors works for me (TM)
[22:37:09] <FromDiscord> <Isofruit> I use static, generics and macros and while yes, it's hard, it's also not unmanageable like it often felt in rust
[22:37:17] <FromDiscord> <Isofruit> (edit) "it" => "topics"
[22:37:27] <FromDiscord> <mratsim> concepts do work as well nowadays.
[22:37:44] <FromDiscord> <Isofruit> though I guess macros would be still a sealed book if I had never had chats with you guys
[22:37:56] <FromDiscord> <leorize> my concept 🥪 is not fixed so I still can't use them
[22:38:08] <FromDiscord> <konsumlamm> In reply to @mratsim "The underlying question is,": because you also want other things beside safety :P
[22:38:27] <FromDiscord> <konsumlamm> ~~like pattern matching with exhaustiveness checks~~
[22:38:29] <FromDiscord> <mratsim> if you want Evangelism sure use Rust 😉
[22:38:42] <FromDiscord> <Isofruit> Pattern matching is the one thing I really, really liked in rust
[22:38:56] <FromDiscord> <mratsim> ah yes pattern matching. I'd like something like in Haskell
[22:38:57] <FromDiscord> <Isofruit> It made me actually start consider using switch case with enums in java
[22:38:58] <FromDiscord> <leorize> I spent too much time chasing out destructors interaction bugs \:p
[22:39:12] <FromDiscord> <Isofruit> (edit) "It made me actually start consider using switch case with enums in java ... " 03added "(I use java at work for context)"
[22:39:22] <FromDiscord> <mratsim> you're a webdev that use Java?
[22:39:25] <FromDiscord> <mratsim> oh my
[22:39:30] <FromDiscord> <Isofruit> I live in germany
[22:39:46] <FromDiscord> <Isofruit> German software development, particularly webdev, is almost all java
[22:39:50] <FromDiscord> <Isofruit> It's insane
[22:40:08] <FromDiscord> <Isofruit> I literally have to pick that language up on the job because I hadn't written it before, merely some groovy scripting
[22:40:44] <FromDiscord> <Isofruit> Spring or custom REST backend, Angular frontend
[22:40:45] <FromDiscord> <leorize> btw @mratsim, are you gonna look at cps anytime soon? \:p
[22:40:51] <FromDiscord> <Isofruit> Tends to be a pretty popular combo
[22:59:39] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (Ping timeout: 256 seconds)
[23:01:41] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[23:03:09] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3M69
[23:03:17] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3M69" => "https://play.nim-lang.org/#ix=3M6a"
[23:03:33] <nrds> <06Prestige99> I do not miss the days of spring, spring boot, etc
[23:03:38] <FromDiscord> <Yardanico> Node(node)
[23:03:42] <FromDiscord> <Yardanico> why are you trying to convert the type
[23:03:46] <FromDiscord> <Yardanico> you have to convert the variable, right?
[23:03:51] <FromDiscord> <Yardanico> `var newNode = Node(node)`
[23:03:55] <FromDiscord> <Patitotective> 😐
[23:03:56] <FromDiscord> <Patitotective> LOL
[23:04:02] <FromDiscord> <Patitotective> thanks
[23:04:29] <FromDiscord> <Patitotective> anyways, doesn't work
[23:04:49] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3M6c
[23:06:06] <FromDiscord> <Patitotective> https://play.nim-lang.org/#ix=3M6d
[23:07:54] <FromDiscord> <leorize> sounds like a bug to me
[23:08:05] <FromDiscord> <huantian> hm it works on my system 😛
[23:08:29] <FromDiscord> <Patitotective> should I report it?
[23:08:39] <FromDiscord> <Yardanico> what's your nim version?
[23:10:06] <FromDiscord> <demotomohiro> `newNode` copys only`val`, not `age`. Doesn't Nim compiler print that error because it is partial copy?
[23:10:08] <FromDiscord> <Yardanico> ah yeah it fails on 1.6.2
[23:10:21] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3M6f
[23:11:14] <FromDiscord> <Yardanico> i don't remember if it's supposed to work without `ref
[23:11:18] <FromDiscord> <Yardanico> this works
[23:11:22] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3M6g
[23:12:25] <FromDiscord> <Patitotective> why `ref`?
[23:12:39] <FromDiscord> <Patitotective> (edit) "why `ref`? ... " 03added "i mean, is that documented?"
[23:13:34] <FromDiscord> <Yardanico> https://github.com/nim-lang/Nim/issues/17602
[23:19:08] <FromDiscord> <demotomohiro> Araq says: https://github.com/nim-lang/Nim/issues/11592#issuecomment-506363819
[23:27:47] <FromDiscord> <ajusa> how can I export just a single type? and I mean `export` keyword, I'm trying to just export the `VNode` definition from karax
[23:29:17] <FromDiscord> <Yardanico> In reply to @ajusa "how can I export": just use `` on that type?
[23:29:29] <FromDiscord> <Yardanico> and what do you mean by "definition"? just the type itself or all fields too?
[23:30:28] <FromDiscord> <Yardanico> isn't it already exported? https://github.com/karaxnim/karax/blob/master/karax/vdom.nim#L151
[23:30:35] <FromDiscord> <ajusa> sent a code paste, see https://paste.rs/ili
[23:31:11] <FromDiscord> <ajusa> eg I just want to do `export VNode` or `export karax.VNode`. The actual type is defined in `karax/vdom` but I'm trying to keep it simple ehre
[23:31:14] <FromDiscord> <ajusa> (edit) "ehre" => "here"
[23:32:13] <FromDiscord> <Yardanico> so what's the issue?
[23:32:23] <FromDiscord> <Yardanico> that just works
[23:32:26] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3M6q
[23:33:54] <FromDiscord> <ajusa> huh, must be a bug elsewhere in my code then, I'm probably forgetting to export a related field. Thanks!
[23:34:13] <FromDiscord> <Yardanico> i tried writing this in a file and importing it from another file and I can use VNode
[23:34:48] <FromDiscord> <ajusa> yup, I also verified it worked with a similar example. Part of my issue is that I'm using the experimental dotOperators which just destroys pretty much all error messages
[23:37:45] <FromDiscord> <exelotl> In reply to @Isofruit "German software development, particularly": on the bright side, at least it's not PHP 😅
[23:42:01] <FromDiscord> <Yardanico> that fzrg guy is still going strong on the forum
[23:54:38] <FromDiscord> <xx_ns> In reply to @exelotl "on the bright side,": hot take: PHP in 2022 is _not bad_
[23:54:58] <FromDiscord> <Yardanico> PHP 8 is not as bad as it was before, yes
[23:55:02] <FromDiscord> <Yardanico> but IMO it's already too late
[23:55:19] <FromDiscord> <exelotl> I used it for the last 2 years in my day job, it's awful
[23:55:24] <FromDiscord> <Isofruit> I've not tried PHP yet but have heard not too many great things about it
[23:55:26] <FromDiscord> <Yardanico> most big companies like facebook or VK who used PHP made their own versions
[23:55:37] <FromDiscord> <Yardanico> VK made kPHP which compiles a subset of PHP to C++, Facebook made Hack and HHVM
[23:55:46] <FromDiscord> <ajusa> In reply to @Yardanico "that fzrg guy is": To be fair, tapping into an existing ecosystem is hardly the worst idea for Nim. c2nim, futhark, Nimpy, etc are all projects trying to use existing code in other languages
[23:56:13] <FromDiscord> <Isofruit> fzrg I'm still on a coin flip in terms of if he's trolling or not
[23:56:54] <FromDiscord> <Isofruit> At best he doesn't know what he's talking about. I mean, I don't either for that matter, I'm just aware that language performance matters tend to be fairly complicated discussions
[23:57:18] <FromDiscord> <Isofruit> We have debates to this day whether Java is a very performant language on par with C/C++ after all
[23:58:13] <FromDiscord> <Isofruit> (edit) "We have debates to this day whether Java is a very performant language ... onwith" 03added "that can be" | "that can beon par with C/C++ ... after" 03added "with proper optimizations"
[23:58:28] <FromDiscord> <exelotl> In reply to @Yardanico "PHP 8 is not": pretty much this - they have been adding nice features like arrow functions and enum types, but the foundations are so poor that it's basically polishing a turd at this point
[23:58:33] <FromDiscord> <Isofruit> (edit) "We have debates to this day whether Java is a very performant language that can be on par with C/C++ with proper optimizations after all ... " 03added "(at which point you go down the rabbit hole of how much optimization is fair to assume yada yada yada)"
