[00:08:59] *** Joins: molson (~molson@2001:48f8:704a:123d::75f:1021)
[00:11:04] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[00:12:06] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[00:13:26] <hobo> haha
[00:13:39] <hobo> oops, wrong window
[00:14:30] <nij-> A modern webpage is similar to a interactive program hosted in the browser. If it were CL (but not JS) that dominated the web, it'd be possible to launch a slynk server from-within the webpage, and hack it through emacs. CL didn't dominate the web, but I suspect something like this is possible. Is there some script I can run from-within a webpage that effectly enables me to hack the page with CL, sly, and emacs?
[00:14:45] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[00:17:03] <Josh_2> If I have a list like '(a b c d) how can I compute every possible combination of those elements?
[00:17:10] <Josh_2> the order doesn't matter
[00:17:30] <Josh_2> just like '(a) '(b) '(c) '(d) '(a b) '(a c) '(a d) etc
[00:18:28] <Josh_2> '(a d) and '(d a) being equiv
[00:18:48] <Bike> meaning you only get (a d), or you get both (a d) and (d a)?
[00:18:51] <_death> (dotimes (i n) (alexandria:map-combinations fn objects :length i))
[00:19:08] <rotateq> ehm looking into TAoCP volume 4A maybe?
[00:19:16] <_death> or rather n+1
[00:19:40] <edgar-rft> in case of doubt there's a "Common Lisp" code example section here -> https://rosettacode.org/wiki/Permutations
[00:20:59] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:22:36] <nij-> Josh_2: https://bpa.st/ZROQ
[00:23:50] <nij-> Josh_2: (length (comb '(a b c d e f))) ; => 64
[00:24:21] <Josh_2> That has worked other than the nil on the end :)
[00:24:30] <Josh_2> I almost had yours working _death
[00:24:45] <Josh_2> Fortunately this will be done at compile-time so efficiency doesn't matter
[00:24:52] <Alfr> Josh_2, to get all (that's 2^n) subsets, you can consider the numbers 0 to 2^n-1, every number n corresponds to a selection for elements, e.g. bit i set, choose element i to be part of the n-th set.
[00:25:11] <EdLangley[m]> nij-: Clojurescript works like this
[00:25:12] <Alfr> Josh_2, that's assuming all elements are distinct in the given list.
[00:25:15] <nij-> Josh_2: NIL is also a combination :-(
[00:25:20] <Josh_2> :(
[00:25:32] <nij-> EdLangley[m]: yes but it's not CL .. :'(
[00:25:32] <EdLangley[m]> I haven’t really seen a CL equivalent
[00:25:55] <nij-> EdLangley[m]: There's js+swank.. and there's parenscirpt. So I guess something like this should work.
[00:26:16] <EdLangley[m]> Although, it’s not too hard to rig something up with parenscript
[00:26:35] <mfiano> I usually do what _death suggested
[00:26:38] <EdLangley[m]> And there is a CL-in-js implementation
[00:26:53] <nij-> EdLangley[m]: which impl did you mean?!?!
[00:27:08] <mfiano> Josh_2: something like: (let ((list '(a b c d)) (result nil)) (dotimes (i (length list)) (alexandria:map-combinations (lambda (x) (when x (push x result))) list :length i)) result)
[00:27:18] <_death> the way clog works is by sending arbitrary js via a websocket.. you can generate that js using parenscript
[00:27:20] <mfiano> remove the WHEN check if you want to NIL
[00:27:40] <mfiano> s/to/the/
[00:27:41] <EdLangley[m]> https://github.com/jscl-project/jscl
[00:27:49] <nij-> Josh_2 just to compare the length of code.. (defun comb (list) (let ((l (length list))) (cond ((= l 0) nil) ((= l 1) (list list nil)) (t (append (mapcar (lambda (x) (cons (car list) x)) (comb (cdr list))) (comb (cdr list)))))))
[00:28:22] <EdLangley[m]> It’s a subset of CL, but it might be useful
[00:29:04] <EdLangley[m]> You can also use something like htmx and just use html over the wire
[00:29:05] <EdLangley[m]> And do all the logic in the backend
[00:29:10] *** Joins: gaqwas (~john@dynamic-077-004-108-247.77.4.pool.telefonica.de)
[00:29:37] <mfiano> Josh_2: Also might want to nreverse the retval, if you want them in increasing order
[00:30:45] <Josh_2> I had to append the original list but otherwise it works, thanks mfiano
[00:31:09] <mfiano> APPEND? THat is usually a red flag.
[00:31:16] <mfiano> I dont seewhy it is needed here.
[00:31:31] <Josh_2> Well because I also want the original list as part of the combinations
[00:31:50] <mfiano> Oh do :length (1+ i)
[00:32:05] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[00:32:12] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[00:32:18] <nij->   EdLangley[m]: I understand that Parentscript can turn on a server that runs its own webpage. Do you know if it can hack a page that's already running?
[00:32:18] <Josh_2> Okay that worked thanks
[00:32:22] <Josh_2> two working solutions, tyvm
[00:32:26] <mfiano> Not the first time zero-indexing got me today.
[00:32:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:33:56] <mfiano> Josh_2: with the 1+ you can remove the WHEN test
[00:34:19] <mfiano> Fixed code: (let ((list '(a b c d)) (result nil)) (dotimes (i (length list)) (alexandria:map-combinations (lambda (x) (push x result)) list :length (1+ i))) (nreverse result))
[00:36:16] <mfiano> Also note that you can use :copy nil if you have unshared data
[00:36:20] <mfiano> For less consing
[00:37:52] <Josh_2> Thanks
[00:39:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[00:40:36] *** Quits: foxfromabyss (~foxfromab@2a01:c23:5dd2:b500:8434:c48a:1cdd:6dd5) (Quit: Client closed)
[00:40:38] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:41:02] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:41:10] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:41:33] *** Joins: theos (~theos@user/theos)
[00:41:50] *** Parts: theos (~theos@user/theos) (holy cow)
[00:42:52] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[00:45:05] <EdLangley[m]> nij-: JavaScript has eval and friends
[00:45:36] <EdLangley[m]> Do you can rig up a system for live code reload
[00:46:00] <EdLangley[m]> s/D/S/
[00:48:11] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:49:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[00:51:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:52:50] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f9:bc97:9c27:b08b:694:5f0b)
[00:55:21] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[00:55:51] *** Quits: pve (~pve@178-55-97-144.bb.dnainternet.fi) (Quit: leaving)
[01:12:03] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) ()
[01:12:14] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[01:13:55] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[01:14:22] *** Joins: foxfromabyss (~foxfromab@2a01:c23:5dd2:b500:8434:c48a:1cdd:6dd5)
[01:20:28] *** Quits: kevingal (~quassel@2001:770:c0:401:896d:e00e:eb5c:d428) (Remote host closed the connection)
[01:23:09] *** Joins: VincentVega (~user@212.97.1.64)
[01:25:55] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f9:bc97:9c27:b08b:694:5f0b) (Read error: Network is unreachable)
[01:28:26] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[01:30:57] *** Parts: VincentVega (~user@212.97.1.64) (ERC (IRC client for Emacs 27.2))
[01:32:43] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Quit: WeeChat 3.3)
[01:33:11] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:38:37] *** Quits: molson (~molson@2001:48f8:704a:123d::75f:1021) (Quit: Leaving)
[01:39:21] *** Quits: foxfromabyss (~foxfromab@2a01:c23:5dd2:b500:8434:c48a:1cdd:6dd5) (Ping timeout: 256 seconds)
[01:41:13] *** Joins: pillton (~user@203.221.214.12)
[01:41:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:42:05] <masinter> (defun comb (x) (if x (let ((y (comb (cdr x)))) (mapc #'(lambda '(z) (push (cons (car x) z) y)) y)
[01:42:30] <masinter> '(nil)))
[01:43:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:47:44] *** Quits: gaqwas (~john@dynamic-077-004-108-247.77.4.pool.telefonica.de) (Remote host closed the connection)
[01:52:03] *** Quits: neocron (~NeoCron@p200300c4cf1b4400f695d81d4d068b5c.dip0.t-ipconnect.de) (Quit: Leaving)
[01:54:02] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[02:03:11] *** Quits: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[02:05:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[02:07:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:12:24] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[02:14:05] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:14:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:21:09] *** Joins: igemnace (~ian@user/igemnace)
[02:25:59] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[02:30:20] *** Parts: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) ()
[02:30:41] *** Joins: notzmv (~zmv@user/notzmv)
[02:32:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[02:34:22] <rotateq> lel a friend of mine to who i talked more than one time about CL said "you need some object-oriented language like Java to get a job"
[02:34:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:40:30] *** Joins: toner (~tony@ppp046177003005.access.hol.gr)
[02:42:31] *** Joins: jeosol (~jeosol@user/jeosol)
[02:50:11] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:51:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:54:34] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-101F-static.midco.net)
[02:56:27] *** Quits: unyu (~pyon@user/pyon) (Quit: Reboot.)
[02:59:28] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 268 seconds)
[03:03:40] *** Parts: toner (~tony@ppp046177003005.access.hol.gr) (Leaving)
[03:03:57] *** Quits: cosimone (~user@93-47-230-83.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[03:06:50] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:dc6a:cea3:1af:140f)
[03:10:08] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[03:19:05] *** Joins: pjb (~pjb@user/pjb)
[03:24:08] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 268 seconds)
[03:24:12] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:27:19] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:37:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[03:47:30] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[03:55:25] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[04:04:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:10:08] *** Joins: gaqwas (~john@dynamic-077-004-108-247.77.4.pool.telefonica.de)
[04:18:45] *** Quits: gaqwas (~john@dynamic-077-004-108-247.77.4.pool.telefonica.de) (Ping timeout: 256 seconds)
[04:23:34] *** Joins: Oladon (~olad@98.43.81.226)
[04:23:43] *** Joins: unyu (~pyon@user/pyon)
[04:27:32] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:36:02] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:37:03] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[04:40:21] *** Joins: waleee-cl (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:12:05] <mfiano> Hmm regarding the about combination mapping function, what if I had a list of 3 elements, such as '(0 128 256), and I wanted to find every 4-tuple with repetitions allowed? Can alexandria (or anyone else here) help me?
[05:15:47] <mfiano> '((0 0 0 0) (0 0 0 128) (0 0 0 256) (0 0 128 0) ... (256 256 256 256))
[05:16:13] <_death> nested dolists
[05:16:15] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:17:40] <semz> alexandria:map-product with the list repeated four times would work too
[05:19:38] <mfiano> Ah map-product was the one I was remembering, thanks!
[05:21:41] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Using Circe, the loveliest of all IRC clients)
[05:24:54] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:26:52] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[05:32:33] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[05:34:32] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:34:48] *** Quits: waleee-cl (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Remote host closed the connection)
[05:35:13] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[05:43:32] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-101F-static.midco.net) (Ping timeout: 240 seconds)
[05:46:33] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:dc6a:cea3:1af:140f) (Remote host closed the connection)
[05:50:08] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[05:50:28] <pjb> mfiano: https://termbin.com/w52k
[05:50:54] <mfiano> pjb: cesarum's license scares me :)
[05:51:02] <pjb> AGPL3 !
[05:51:09] <mfiano> I know.
[05:53:15] <mfiano> It's unsuitable for my uses.
[05:57:04] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[06:04:51] *** Joins: Common-Lisp (~o@2600:1700:94cc:cf:cec6:abc9:37c0:8449)
[06:08:26] <EdLangley[m]> I've actually been considering AGPL3 for "applications" and MIT for libraries
[06:09:15] <EdLangley[m]> That way, I don't have to worry about the license of my application's dependencies and my libraries don't impose too much on their users
[06:11:15] <Common-Lisp> I exclusively license my crap in AGPLv3
[06:15:29] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[06:17:22] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:21:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:26:58] <aeth> I exclusively use the MIT license because all code's reusable library code if you're clever enough.
[06:27:40] <aeth> My code starts specific and then generalizes until I spin it off. I probably could keep a monorepo instead and skip the last step.
[06:27:53] <EdLangley[m]> The great thing about not having any contributors is you can just copy it to a library :)
[06:28:29] <EdLangley[m]> I have a library of utilities I use in all my projects and I just move useful things there
[06:28:33] <aeth> If I had a corporation, I'd consider doing something more complicated with licenses.
[06:28:48] <aeth> But then you'd also have to consider e.g. a CLA, and people might not like a CLA that could turn AGPL into MIT
[06:29:00] <aeth> Even if it's just for things that get moved elsewhere
[06:30:13] <aeth> And I can't really blame them. Promises are kept until you're acquired by one of the 10 tech megacompanies.
[06:34:08] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 250 seconds)
[06:35:36] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1021-static.midco.net)
[06:35:43] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[06:35:50] <aeth> I suppose everyone could assign their copyright to, say, the Common Lisp Foundation or something
[06:36:44] *** Joins: amk (~amk@109.255.169.126)
[06:42:40] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:49:25] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1021-static.midco.net) (Remote host closed the connection)
[06:49:27] *** Quits: jealousmonk (~user@2804:431:e7c4:f875:847b:37db:2997:bc93) (Quit: ERC (IRC client for Emacs 27.1))
[06:50:00] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1021-static.midco.net)
[06:53:39] *** Joins: Bike (~Bike@71.69.170.70)
[06:53:39] *** ChanServ sets mode: +o Bike
[07:04:24] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1021-static.midco.net) (Remote host closed the connection)
[07:05:26] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1021-static.midco.net)
[07:13:41] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[07:27:55] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[07:28:30] <ns12> aeth: Dangerous! When an evil beast takes control of the Common Lisp Foundation, they will change the license to a proprietary one! Say goodbye to all the open source Common Lisp libraries!
[07:30:10] <beach> Good morning everyone!
[07:30:26] <ns12> Good morning beach!
[07:30:27] *** Joins: karlosz (~karlosz@47.151.136.69)
[07:30:59] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[07:35:16] <beach> contrapunctus: define-save-info specifies a list of "save entries", where a save entry is a list of two symbols, an initarg (usually for some slot) and the name of a reader that corresponds to that initarg.
[07:35:20] <mfiano> I don't mind using copyleft software, but developing with, especially for the purpose of making a living, is out of the question.
[07:45:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:45:48] <lisp123> When connecting to a remote image in SLY on your current machine, I'm experiencing a tiny amount of lag - does anybody else have this?
[08:01:06] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[08:08:42] <Josh_2> Nope
[08:13:33] <lisp123> Josh_2: Thanks
[08:13:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[08:14:44] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[08:17:14] <Josh_2> I have very fast internet though and my remote server isn't far
[08:18:48] <Josh_2> Jonathan should swap to parsing as a hash table by default
[08:19:13] <Josh_2> It should be more explicit :sob:
[08:22:43] *** Joins: semz_ (~semz@user/semz)
[08:25:02] *** Quits: semz (~semz@user/semz) (Ping timeout: 240 seconds)
[08:42:20] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:50:45] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[08:51:51] *** Joins: amk (~amk@109.255.169.126)
[08:59:09] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:07:18] *** Joins: xsperry (~xs@user/xsperry)
[09:09:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:25:18] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[09:25:38] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[09:30:14] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[09:35:56] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[09:36:44] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:a8a2:51c9:cbc6:437b)
[09:38:55] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:a11d:216c:4ca3:2c86)
[09:40:55] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 268 seconds)
[09:42:09] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:a8a2:51c9:cbc6:437b) (Ping timeout: 268 seconds)
[09:44:53] *** Quits: Common-Lisp (~o@2600:1700:94cc:cf:cec6:abc9:37c0:8449) (Quit: Leaving)
[09:49:58] *** Joins: shka (~herr@109.231.0.226)
[09:55:28] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:58:46] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:00:39] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 268 seconds)
[10:16:56] <contrapunctus> beach: thanks for the response. In trying to find out "when or why does client code need to use `define-save-info`?", I tried to run `do-things-1` and got this error - https://paste.rs/MEQ
[10:17:52] <beach> Every class that has instances that need to be saved needs a method.
[10:18:27] <beach> The demos should work though.  I haven't changed anything.
[10:22:04] *** Quits: pillton (~user@203.221.214.12) (Remote host closed the connection)
[10:28:56] *** Joins: gaqwas (~john@dynamic-095-114-116-030.95.114.pool.telefonica.de)
[10:34:31] <EdLangley[m]> Josh_2: did you happen to use the OpenAPI spec for cl-matrix? or handwrite the api wrappers?
[10:34:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[10:37:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:40:59] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[10:42:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[10:44:29] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 256 seconds)
[10:47:34] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[10:48:13] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[10:56:02] *** Joins: Algernon91 (~Algernon6@88.124.69.179)
[10:57:08] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f9:bc97:8941:18b:7fe2:5d44)
[11:00:55] *** Quits: Algernon91 (~Algernon6@88.124.69.179) (Ping timeout: 256 seconds)
[11:04:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:15:21] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:15:23] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[11:15:39] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:16:37] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[11:16:51] *** Joins: notzmv (~zmv@user/notzmv)
[11:21:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:22:03] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:22:10] *** Joins: amb007 (~a_bakic@33.145.204.77.rev.sfr.net)
[11:30:41] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[11:31:08] *** Joins: pve (~pve@178-55-100-139.bb.dnainternet.fi)
[11:31:55] *** Joins: simendsjo (~user@84.211.91.241)
[11:35:30] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:52:16] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 268 seconds)
[11:55:48] *** Joins: Major_Biscuit (~MajorBisc@c-001-018-021.client.tudelft.eduvpn.nl)
[11:58:43] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[11:58:53] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[12:00:34] *** Joins: pjb (~pjb@user/pjb)
[12:01:02] *** Quits: gaqwas (~john@dynamic-095-114-116-030.95.114.pool.telefonica.de) (Ping timeout: 240 seconds)
[12:07:17] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[12:11:45] *** Quits: amb007 (~a_bakic@33.145.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[12:11:54] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:13:04] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[12:44:34] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[13:02:27] <pve> Hi, is the "defsystem" syntax used in "asd" files based on some specification? Just curious..
[13:02:54] <pve> I noticed it seems pretty similar to the syntax used in mk:defsystem.
[13:04:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:05:10] <jdz> pve: Documentation has the grammar (not sure if that's what you're asking): https://asdf.common-lisp.dev/asdf.html#The-defsystem-grammar
[13:10:24] <pve> jdz: Thanks, I meant if the syntax was defined in conjunction with the development of ASDF in an ad-hoc fashion, or if the syntax (or parts of it) had been specified earlier by someone else.
[13:11:23] <jdz> Pretty sure previous versions of system definition facilities (hence the A in the name) were considered when the library was being written.
[13:15:16] <pve> jdz: ok, I understand
[13:16:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:19:07] *** Joins: varjagg (~user@188.95.247.249)
[13:22:02] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 240 seconds)
[13:22:13] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:7406:7abe:8241:4b9f)
[13:23:53] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[13:24:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[13:25:22] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:a11d:216c:4ca3:2c86) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:26:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:32:51] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Remote host closed the connection)
[13:35:33] *** Joins: Jing (~hedgehog@115.207.51.203)
[13:39:11] <pve> I was reading this thread about ASDF where some people suggested having a specification for a system definition facility (as opposed to a just a single implementation) and it sounded like a pretty cool idea.
[13:39:25] <phoe> it's cool but infeasible
[13:39:27] <pve> but apparently this has never been attempted?
[13:39:53] <phoe> we can't even get the CDR process going again
[13:40:13] <phoe> how can we attempt at a whole specification for a system loader
[13:40:27] <phoe> ;; for any sane definition of "we"
[13:43:42] <pve> well that's a bummer
[13:43:58] <phoe> not really a bummer, more like our harsh reality
[13:44:20] <phoe> ASDF is the local optimum until there happens to be a force that can move everything to a different local optimum
[13:45:33] *** Joins: rogersm (~rogersm@90.166.180.250)
[13:47:02] *** Quits: osp (~osp@84.19.72.107) (Ping timeout: 240 seconds)
[13:51:30] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[13:51:43] *** Joins: osp (~osp@84.19.72.107)
[13:53:45] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:54:23] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:00:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:09:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:11:50] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[14:12:21] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:13:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:13:38] *** Lord_of_Life_ is now known as Lord_of_Life
[14:18:32] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 240 seconds)
[14:23:44] <frodef> Does SLIME have a mechanism to remove methods? (based on a DEFMETHOD form)
[14:24:54] <rotateq> hm i see slime-undefine-function
[14:25:46] <rotateq> or with FMAKUNBOUND ?
[14:25:46] <frodef> I think ELI had that years back, and it's very useful.
[14:26:11] <rotateq> yes i think you want to do it on certain specializations
[14:26:41] <frodef> FMAKUNBOUND is kind of the big hammer solution :)
[14:26:56] <rotateq> like when i defined naively an initialize-instace :before which should be with :after and then i wondered why the other still tried to fire ^^
[14:27:06] <rotateq> yes indeed
[14:27:55] <rotateq> hm there's also REMOVE-METHOD, or you look what closer-mop has in charge additionally
[14:28:23] <rotateq> i don't know yet how to use REMOVE-METHOD correctly
[14:29:02] <frodef> you have to FIND-METHOD first. It's quite tedious, which is why it should be in the IDE.
[14:29:41] <rotateq> ah that makes sense, like when i figured out how to list only certain EQL specializer methods for a generic function with closer-mop
[14:30:29] <rotateq> so you would want to be with the cursor in your source file and then call slime-undefine-method?
[14:30:55] <frodef> right
[14:31:41] <frodef> Also, some sort of generic function inspector where you can see and remove methods would be nice.
[14:31:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[14:31:58] <rotateq> FIND-METHOD seems also a bit tedious
[14:32:15] <rotateq> there is closeau
[14:32:33] <rotateq> for having an inspector
[14:37:02] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 240 seconds)
[14:39:49] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[14:40:08] <jdz> frodef: slime-inspect-definition
[14:40:43] <jdz> frodef: You may need to load slime-fancy-inspector.el.
[14:41:28] <frodef> jdz: there it is! thanks!
[14:42:34] <frodef> seemed like an obvious thing to have, happy to see it's there.
[14:43:51] <frodef> strange thing it's not bound to any key by default.
[14:44:08] <frodef> (or menu)
[14:44:17] <beach> It is.
[14:44:35] <beach> Middle click on presentation (I think) and then inspect.
[14:46:10] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:46:27] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:47:34] <frodef> beach: But I don't have presentations in my .lisp buffer.
[14:47:34] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:48:23] *** Joins: amb007 (~a_bakic@1.145.204.77.rev.sfr.net)
[14:48:50] <beach> Ah, I see.  Right.
[14:49:47] <beach> Emacs has a very approximate idea of what is in your .lisp buffer.  I mean, it can't even indent or highlight correctly.  Expecting it to recognize a method or a generic function would be too much.
[14:50:39] <frodef> beach: is this a climacs rant? :)
[14:50:39] *** varjagg is now known as varjag
[14:50:47] <frodef> (is that still a thing?)
[14:51:56] <beach> You could see it as a Second Climacs rant.  (first) Climacs is no longer a thing, and Second Climacs is being developed very slowly, so not usable yet.
[14:52:26] <frodef> Oooh.. multiple climacs!
[14:53:14] <beach> Well, the first one was already better for Common Lisp editing than Emacs, at least in some respects.  Second Climacs uses a Common Lisp reader (Eclector) to parse the buffer contents, so it has a much better idea of the contents.
[14:53:25] <beach> And it can handle things like custom reader macros.
[14:54:28] <frodef> sounds like good work (as ususal!)
[14:55:00] <rotateq> even when i define a new %DEFCLASS macro it doesn't indent anymore correctly
[15:01:45] *** Quits: amb007 (~a_bakic@1.145.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:02:16] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[15:03:03] *** Joins: amb007 (~a_bakic@1.145.204.77.rev.sfr.net)
[15:06:32] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[15:10:50] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f9:bc97:8941:18b:7fe2:5d44) (Ping timeout: 268 seconds)
[15:12:04] *** Joins: lisp123win (~user@80.227.170.170)
[15:12:56] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:13:39] <lisp123win> For my understanding, why are there so many revisions and changes to ASDF (or any other build tool)? The naive part of me just wants now to write a series of LOAD forms and be done with things
[15:14:11] <lisp123win> But I'm sure there are some aspects I am clearly missing
[15:14:22] <rotateq> ohai lisp123win
[15:14:39] * rotateq looks through the windows
[15:14:41] <lisp123win> (and I was programming in another language, and building was a complete DISASTER, so I do appreciate ASDF alot)
[15:15:10] <lisp123win> rotateq: Hello from a closed source machine where my every key is tracked into M$ ML models :-)
[15:15:55] <rotateq> what i also got to like is this Shake Haskell tool to fight against Make madness. but it's not really normally usable yet, a bit complicated and hmm. but in the long run it does things better too
[15:16:03] <rotateq> nice
[15:16:12] <mcoll> what is the canonical way to interact with cairo in common lisp? I see cl-cairo2 but it's almost 10 years old, is it up to date enough? is the cairo API that stable?
[15:17:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:18:00] <rotateq> mcoll: don't confuse this with being "out of date" :) there is real legacy with CL and it could also mean "finished and usable"
[15:18:09] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[15:18:33] <lisp123win> rotateq: Interesting to hear, sounds like I should try haskell sometime too
[15:18:55] <rotateq> lisp123win: phew, hmm, but not just because of that then
[15:19:31] <lisp123win> I am have started to branch into other languages just for fun, but now we are going off topic so I will shut up :-)
[15:19:42] <mcoll> yeah, fair enough, maybe my question could be reformulated, what is the best way currently in CL to generate images with text rendering?
[15:19:53] <rotateq> so that's why i've sended in query
[15:20:09] <rotateq> okay, i don't know :)
[15:24:21] *** Joins: foxfromabyss (~foxfromab@2a01:c22:3423:3200:a4e5:84ec:d05:1192)
[15:26:19] <foxfromabyss> Hi! How can I achieve partial application in CL?
[15:26:19] <foxfromabyss> I have a function of 2 arguments, and would like to pass it as `:test` in `find` with one of them already supplied, as `find` requires a function of 1 argument
[15:26:20] <foxfromabyss> I tried making a function of 2 arguments return a lambda requiring 1 argument, with 1 argument already applied, but that failed to compile for some reason
[15:27:13] <mcoll> foxfromabyss: that should work I think
[15:29:35] <foxfromabyss> https://plaster.tymoon.eu/view/2880#2880 :(
[15:29:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:29:50] <foxfromabyss> I would guess i am just holding it wrong
[15:30:27] <jdz> foxfromabyss: Maybe you want to supply :key instead of :test?
[15:31:24] <foxfromabyss> that was my initial idea, but I have a `cons point_1 point_2` and would like to check if either of them satisfies equality
[15:31:33] <mcoll> foxfromabyss, I think you're closing the lambda parenthesis, so you're not returning a lambda so B is not defined
[15:32:08] <rotateq> mcoll: what i saw now too :)
[15:33:57] <foxfromabyss> that is true, thanks :D
[15:33:58] <foxfromabyss> but how do I call that now? `((test 5) 6)` and `(6 (test 5))` fails with illegal function call
[15:34:16] <foxfromabyss> but `(test 5)` returns a lambda successfully
[15:34:51] <flip214> foxfromabyss: (funcall (test 5) 6)
[15:35:25] <foxfromabyss> I see, thanks!
[15:36:37] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f9:bc97:8941:18b:7fe2:5d44)
[15:37:46] <mcoll> np :)
[15:40:22] <mcoll> well, it looks like cl-cairo2 loads and the demos work, so I guess I'll continue with this until I hit a wall
[15:42:34] *** Joins: simendsjo (~user@2a02:2121:6c0:42f8:d80b:8f5a:9182:35dd)
[15:43:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:47:50] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[15:58:46] *** Quits: Jing (~hedgehog@115.207.51.203) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:06:08] <flip214> Can I deftype a range of characters without using SATISFIES?
[16:07:10] <phoe> MEMBER?
[16:07:26] <phoe> I assume you can generate a proper MEMBER type with a macro in order to avoid typing them all in
[16:07:33] <phoe> or even just via DEFTYPE
[16:08:10] <phoe> (deftype characters-between (first last) `(member ,@(loop for code from first to last collect (code-char code)))) or something
[16:12:41] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[16:13:02] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[16:13:03] *** Joins: derwolf_ (~DerWolf@2a01:4f8:c0c:554a::1)
[16:13:08] *** Quits: beach (~user@2a01:cb19:150:3400:ae66:f55f:4595:b209) (Killed (NickServ (GHOST command used by beach`!~user@2a01:cb19:150:3400:c20e:ab91:8f25:19ba)))
[16:13:17] *** beach` is now known as beach
[16:13:43] *** Joins: robin__ (~robin@user/terpri)
[16:13:55] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:25ff:41f8:15ee:65e1)
[16:14:09] *** Joins: splittist_ (sid17737@tinside.irccloud.com)
[16:14:25] *** Joins: szkl_ (uid110435@uxbridge.irccloud.com)
[16:14:26] *** Joins: ahlk` (~user@2600:1700:31c0:3a10::43)
[16:14:31] *** Joins: |3b|` (bbb@user/3b/x-2324788)
[16:14:32] *** Joins: etimmons_ (m-fyxyzb@li834-247.members.linode.com)
[16:14:33] *** Joins: gko` (~user@2400:8902::f03c:91ff:fe70:e605)
[16:14:43] *** Server sets mode: +Ccntz 
[16:15:01] *** Joins: dstein64- (~dstein64@dannyadam.com)
[16:15:04] *** Joins: greaser|q (greaser@antihype.space)
[16:15:09] *** Joins: mal1 (~mal@ns2.wyrd.be)
[16:15:15] *** Joins: kagevf_ (~jfh@ip68-108-33-76.lv.lv.cox.net)
[16:15:19] *** Joins: Demosthe1ex (~Demosthen@user/demosthenex)
[16:15:24] *** Joins: ck__ (~ck@plskthx.org)
[16:15:27] *** Joins: engblom_ (~foo@86-60-190-113.dynamic.lounea.fi)
[16:15:29] *** Joins: Xach_ (~xach@66-63-89-62.static.suscom-maine.net)
[16:15:53] *** Joins: SAL9000_ (~SAL9000@shirakumo/sal9000)
[16:16:06] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: remexre (~remexre@user/remexre) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: lieven (~mal@ns2.wyrd.be) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: dale (dale@user/dale) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: megeve (sid523379@id-523379.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:2107:8a12:e730:473f) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Xach (~xach@user/xach) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: etimmons (m-fyxyzb@li834-247.members.linode.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: engblom (~foo@user/engblom) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: kagevf (~jfh@ip68-108-33-76.lv.lv.cox.net) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: sveit (~sveit@2001:19f0:ac01:247:5400:ff:fe5c:689f) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: drakonis (drakonis@user/drakonis) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: |3b| (bbb@user/3b/x-2324788) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: gko (~user@user/gko) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: ck_ (~ck@plskthx.org) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: dim (~dimlibera@2a02:2178:2:4:1658:d0ff:fe49:408c) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: hexology (~hexology@user/hexology) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: derwolf (~DerWolf@static.143.125.47.78.clients.your-server.de) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Catie (~user@user/catie) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: hobo (~hobo@69.218.33.204) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: luis (~luis@lisp/luis) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: splittist (sid17737@id-17737.tinside.irccloud.com) (Ping timeout: 240 seconds)
[16:16:08] *** Joins: drakonis (drakonis@2600:3c02::f03c:92ff:fe5e:b8bf)
[16:16:13] *** dstein64- is now known as dstein64
[16:16:13] *** luis7 is now known as luis
[16:16:13] *** terrorjack0 is now known as terrorjack
[16:16:21] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[16:16:23] *** Joins: remexre (~remexre@user/remexre)
[16:16:27] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[16:16:27] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[16:16:30] *** Joins: antoszka (sid528518@id-528518.uxbridge.irccloud.com)
[16:17:07] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[16:17:13] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[16:18:01] *** Quits: drakonis (drakonis@2600:3c02::f03c:92ff:fe5e:b8bf) (Client Quit)
[16:18:12] *** Joins: drakonis (drakonis@user/drakonis)
[16:18:23] *** Parts: lisp123win (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[16:18:48] *** Joins: dale (dale@user/dale)
[16:19:18] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:19:23] *** Quits: splittist_ (sid17737@tinside.irccloud.com) (Ping timeout: 256 seconds)
[16:19:25] *** etimmons_ is now known as etimmons
[16:19:57] *** Quits: szkl_ (uid110435@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[16:19:57] *** Quits: dale_ (~dale@user/dale) (Ping timeout: 256 seconds)
[16:20:07] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:84bf:ceba:6161:c1f6)
[16:20:31] *** Quits: Xach_ (~xach@66-63-89-62.static.suscom-maine.net) (Ping timeout: 256 seconds)
[16:20:31] *** Quits: Demosthe1ex (~Demosthen@user/demosthenex) (Ping timeout: 256 seconds)
[16:21:03] *** dimlibera is now known as dim
[16:21:26] *** Joins: Demosthenex (~Demosthen@user/demosthenex)
[16:21:42] *** Joins: szkl_ (uid110435@id-110435.uxbridge.irccloud.com)
[16:21:52] *** Joins: Xach (~xach@66-63-89-62.static.suscom-maine.net)
[16:22:20] *** Joins: splittist_ (sid17737@id-17737.tinside.irccloud.com)
[16:26:19] *** Quits: amb007 (~a_bakic@1.145.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[16:26:51] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:27:05] *** Joins: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de)
[16:34:53] *** Quits: Xach (~xach@66-63-89-62.static.suscom-maine.net) (Changing host)
[16:34:53] *** Joins: Xach (~xach@user/xach)
[16:34:53] *** ChanServ sets mode: +o Xach
[16:38:13] *** semz_ is now known as semz
[16:41:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:46:27] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[16:46:58] <|smlckz|> is there any format incarnation to convert T ans NIL to 1 and 0 respectively?
[16:47:08] <|smlckz|> *inchantation
[16:47:44] <|smlckz|> **incantation
[16:51:17] <scymtym> "~:[0~;1~]"
[16:51:58] <rotateq> hehe
[16:55:03] *** Quits: simendsjo (~user@2a02:2121:6c0:42f8:d80b:8f5a:9182:35dd) (Ping timeout: 268 seconds)
[16:59:56] *** robin__ is now known as robin
[17:02:02] <Krystof> what no (setf zerop)?
[17:04:34] <rotateq> :D
[17:06:56] *** ck__ is now known as ck_
[17:07:19] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[17:19:43] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:7406:7abe:8241:4b9f) (Ping timeout: 268 seconds)
[17:29:47] *** mal1 is now known as lieven
[17:31:22] *** Joins: Bike (~Glossina@71.69.170.70)
[17:31:22] *** ChanServ sets mode: +o Bike
[17:33:51] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[17:38:17] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:38:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:48:11] *** Joins: vats (~vats@180.149.226.41)
[17:53:36] *** Joins: bauripalash (~bauripala@2401:4900:3823:df65:1:2:7c07:6d35)
[17:53:36] *** Quits: bauripalash (~bauripala@2401:4900:3823:df65:1:2:7c07:6d35) (Client Quit)
[17:54:13] *** Quits: foxfromabyss (~foxfromab@2a01:c22:3423:3200:a4e5:84ec:d05:1192) (Quit: Client closed)
[17:54:19] *** Joins: clos-encounters (~user@167-248-4-131.oa01.lnk01.ne.dynamic.allophone.net)
[17:56:01] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[17:57:22] *** Joins: random-nick (~random-ni@87.116.167.125)
[18:11:17] *** Quits: hobo_ (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Quit: ZNC 1.8.2 - https://znc.in)
[18:13:33] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[18:16:41] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:18:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[18:23:36] *** Parts: anddam (~anddam@user/anddam) (WeeChat 3.4)
[18:23:53] *** Joins: domovod (~domovod@176.196.122.197)
[18:28:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:33:26] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[18:43:39] *** Quits: sveit_ (~sveit@2001:19f0:ac01:247:5400:ff:fe5c:689f) (Quit: Bye)
[18:43:59] *** Joins: sveit (~sveit@2001:19f0:ac01:247:5400:ff:fe5c:689f)
[18:46:09] *** Quits: vats (~vats@180.149.226.41) (Ping timeout: 256 seconds)
[18:47:05] *** Joins: parjanya (~esb@200.173.177.134)
[18:50:57] *** Quits: clos-encounters (~user@167-248-4-131.oa01.lnk01.ne.dynamic.allophone.net) (Ping timeout: 240 seconds)
[18:52:50] *** hugo- is now known as hugo
[18:53:35] *** Joins: Guest70 (~Guest70@2a00:1fa1:8247:926e:abaa:e5d4:d634:d5d9)
[18:53:53] *** Parts: Guest70 (~Guest70@2a00:1fa1:8247:926e:abaa:e5d4:d634:d5d9) ()
[18:59:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:02:01] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[19:03:20] *** Joins: kevingal (~quassel@2001:770:c0:401:c05c:9bd4:6992:748e)
[19:21:24] *** Joins: jealousmonk (~user@2804:431:e7c4:f875:847b:37db:2997:bc93)
[19:28:05] <beach> http://metamodular.com/SICL/environment-info.pdf is the latest version of our paper on Trucler to be submitted to ELS'22.  Feel free to give us feedback.  I am not sure whether we should include CLISP in the section on previous work, and I am not sure where to find the most recent CLISP code.  Opinions are welcome.
[19:28:26] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[19:28:37] <beach> The deadline is presumably this coming Sunday, but I fully expect another week of extended deadline.
[19:29:07] <phoe> beach: https://gitlab.com/gnu-clisp/clisp/
[19:29:14] <beach> Thanks.
[19:29:22] <phoe> as for whether to include it or not, absolutely no idea
[19:29:34] <beach> Yeah.  I hesitate.
[19:29:45] <phoe> no release in a decade is telling, even if it has some commits in the past year
[19:30:09] <phoe> ;; and an unmerged PLN implementation
[19:30:14] <beach> I'll dig a bit and then make a decision.
[19:32:46] <beach> It has no CLtL2 environment functions.  I might have a look at the native environment representation, but it is likely to be in C.
[19:36:28] <phoe> let me make a quick check...
[19:36:45] <rotateq> hehe testing with quickcheck phoe :)
[19:37:01] <rotateq> hm i _could_ try to read the paper till sunday
[19:37:03] *** |3b|` is now known as |3b|
[19:37:45] <phoe> beach: https://plaster.tymoon.eu/view/2881#2881
[19:37:50] <phoe> that's from CLISP
[19:38:02] <phoe> it seems that its lexenvs are some sort of Lisp structures
[19:38:22] <phoe> but there's no good way to access them from the outside, I can't find any good interface after a really quick look
[19:39:07] <beach> phoe: Good catch.  Thank you.
[19:39:38] <beach> It looks like a vector of vectors to me.
[19:39:49] <phoe> mind the #<FUNCTION ...> thing
[19:40:08] <phoe> whatever it is, it prints some lambda-like Lisp forms, so it has to keep them memorized somewhere
[19:40:33] <beach> I see, yes.
[19:40:46] <phoe> oooh wait a second
[19:41:11] <phoe> https://clisp.sourceforge.io/impnotes.html#eval-environ
[19:41:39] <phoe> that's a macro to return the current environment, similar to what I've done above, I guess
[19:42:30] <beach> Seem that way.
[19:42:37] <phoe> ext:eval-env is also there
[19:43:11] <beach> Good hints.  That will help a lot.  Thanks again!
[19:43:30] <phoe> also see CLISP 37.3 - it seems that there's some bytecode representation for lexenvs
[19:43:35] <phoe> maybe this can provide some insight too
[19:43:48] <beach> Yeah.
[19:49:33] <contrapunctus> beach: re: clobber-demo, to get the aforementioned error ( https://paste.rs/MEQ ) all I did was `(ql:quickload :clobber) (in-package :clobber-demo) (do-things-1)` ...any idea why that's happening?
[19:50:06] <beach> contrapunctus: Not really.  Let me have a look.
[19:52:46] *** SAL9000_ is now known as SAL9000
[19:52:51] <beach> I can reproduce that at least.
[19:53:06] <phoe> (CLOBBER:LOG-TRANSACTION (NEW-BANK #<BANK {10031C7933}>) NIL)
[19:53:15] <phoe> is the second argument meant to be NIL?
[19:53:22] <phoe> that looks like the root of the problem to my unclobbered eye
[19:53:32] <contrapunctus> I thought it was supposed to be a symbol, perhaps, but quoting it didn't change anything
[19:54:23] <rotateq> beach: Your papers always have a nice layout. :)
[19:54:36] <contrapunctus> (i.e. `'*transaction-log*` instead of `*transaction-log*` ) ...and, well, it gave a different error.
[19:55:29] <beach> contrapunctus: I think you need to execute START first.
[19:55:56] <beach> contrapunctus: And STOP afterwards.
[19:56:07] <beach> START is what associates a log file with the code.
[19:56:25] <beach> rotateq: The physical layout is determined by ACM.
[19:56:56] <contrapunctus> beach: ah, that works, thanks! 🙂️
[19:56:58] <beach> Sure.
[19:59:42] <beach> contrapunctus: I am sorry that it's not better documented.  I wrote it mostly as a concrete suggestion in the debate about prevalence, serialization, etc.
[20:03:14] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (Remote host closed the connection)
[20:11:57] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[20:13:59] <beach> And there should of course be a more explicit check that START has been executed.
[20:15:51] <beach> contrapunctus: If you feel like improving it, just go ahead.
[20:17:10] <contrapunctus> beach: just made a PR 😀️ see if you like this as the README - https://github.com/robert-strandh/Clobber/blob/fb401800f0bb9f986691279d4349dc4925823cf3/README.md
[20:18:41] <beach> Perfect.  Merged!  Thanks!
[20:20:37] <phoe> contrapunctus: added a random suggestion
[20:20:49] <phoe> maybe it's feasible, maybe not, just a thing that occurred to me
[20:21:53] <contrapunctus> phoe: oh lol, I was thinking the same thing myself xD
[20:22:06] <beach> I'll let y'all work on that.  I still need to work on the paper.
[20:25:27] *** Joins: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3)
[20:25:32] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 240 seconds)
[20:26:00] *** Joins: santiagopim (~user@90.167.94.91)
[20:27:25] *** Joins: Catie (~user@user/catie)
[20:28:38] <phoe> sounds good
[20:28:47] <phoe> ah, the joy of not submitting anything to ELS
[20:28:56] <beach> Heh.
[20:29:20] <phoe> I am free to instead write 50 kB of Markdown regarding the state of our Common Lisp world in light of some recent kerfluffles that echoed through it
[20:29:24] <phoe> and I'm not yet done!
[20:29:29] <rotateq> phoe: Maybe I have something interesting in a few years. :)
[20:29:35] <phoe> rotateq: let's hope so
[20:29:55] <beach> phoe: Oh, anything I can read?
[20:30:13] <phoe> beach: yes, as soon as I have all of my stuff written down
[20:30:23] <beach> phoe: Is this about the "community" debate?
[20:31:31] <phoe> I touch that topic a little bit, but with a twist
[20:31:59] <beach> I look forward to reading what you come up with.
[20:32:09] <phoe> sure,
[20:35:15] <beach> It seems to me that people spend more energy obsessing about this "community" thing than they spend working to get more stuff done.
[20:39:58] *** Joins: treflip (~user@user/treflip)
[20:40:46] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[20:41:24] <phoe> IMO not really
[20:42:04] <beach> OK.
[20:44:12] <Bike> not that i've been paying much attention, but "somebody is hassling the ASDF dev enough that they want to quit" seems like a specific actionable issue
[20:45:12] <phoe> I gotta finish my article about that since finger-pointing at people is a thing that is both dangerous and missing the point
[20:45:15] * phoe digs back into emacs
[20:45:47] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f2:194d:8941:18b:7fe2:5d44)
[20:48:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:49:13] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:49:23] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f9:bc97:8941:18b:7fe2:5d44) (Ping timeout: 268 seconds)
[20:52:43] <rotateq> phoe: Thanks that you believe in me. :) [when I didn't interpret too wrongly]
[20:55:21] <phoe> rotateq: no problem, and you didn't interpret that wrongly
[20:58:10] <rotateq> oki, I'm glad to be allowed to learn so much from you all, as exchange of thoughts is very important
[20:59:44] <phoe> I have no idea if it's explicit permission - IMO it's more like, you simply are a decent citizen of #commonlisp
[21:00:25] *** Joins: brown121407 (1fd27a54a7@gnu/webmaster/smarton)
[21:01:24] <phoe> no spamming, no trolling, no personal attacks, no asking the same question over and over again, no soliciting money after proclaiming yourself to be the sole worthy leader of the Common Lisp community at large and the only savior from some almighty mafia thing that is both otherwise undefeatable and comically impotent in stopping you altogether
[21:01:47] <phoe> just hanging out and asking questions is more than fine, that's what #commonlisp is for
[21:01:47] <jackdaniel> that's technically pointing fingers
[21:02:01] <phoe> jackdaniel: right, apologies
[21:02:39] * phoe is still sore after that, will need to take proper care in the future
[21:04:55] *** Quits: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3) (Remote host closed the connection)
[21:07:33] <rotateq> yes right, like you for example. I'm no programming genius like gilberth or others here, but I try to get better every day.
[21:07:43] *** Joins: Oladon (~olad@98.43.81.226)
[21:12:42] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[21:13:24] <Bike> nother obscure standard question
[21:13:29] <Bike> "ffloor, fceiling, ftruncate, and fround handle arguments of different types in the following way: If number is a float, and divisor is not a float of longer format, then the first result is a float of the same type as number. Otherwise, the first result is of the type determined by contagion rules;"
[21:13:35] <Bike> how is this different from the contagion rules?
[21:13:36] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Quit: ZNC 1.8.2 - https://znc.in)
[21:13:58] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[21:14:28] <Bike> by the contagion rules, if divisor is a rational it's converted to a float of number's type, so the result will be of that type
[21:14:47] <Bike> and if it's a float of shorter or equal format, by the contagion rules it will be converted ot the larger format, again giving you the type of number
[21:14:58] <semz> Are contagion rules defined for operations with optional arguments?
[21:15:27] <Bike> not specifically, but the way this is phrased the divisor clearly exists, presumably defaulting to 1 if necessary
[21:15:31] <phoe> Bike: maybe it's a repetition; see e.g. CLHS STRING which does not mention the term "string designator" and instead spells out the "string, symbol, or character" thing fully
[21:15:48] <phoe> I mean, I wouldn't be surprised if these *are* contagion rules
[21:16:13] <Bike> yeah but the page on the string function doesn't also use the phrase "string designator"
[21:18:28] <phoe> Bike: that's exactly what I mean
[21:18:35] <phoe> it could use the term "string designator" but it doesn't
[21:18:41] <phoe> even though CLHS Glossary S defines that term
[21:19:40] <Bike> no, but i mean, the way this ftruncate is written, it's phrased as if these rules are different from the general contagion rules
[21:20:40] <aeth> could just be a side effect from how the standard was written?
[21:20:50] <aeth> perhaps it was defined before the contagion rules
[21:21:27] *** Quits: Major_Biscuit (~MajorBisc@c-001-018-021.client.tudelft.eduvpn.nl) (Ping timeout: 268 seconds)
[21:21:41] <Bike> but it mentions the contagion rules!
[21:21:49] <semz> wait, aren't ffloor et al required to return a float even if you do (ffloor 1)?
[21:21:56] <semz> the contagion rules don't specify that
[21:21:56] <Bike> if it just repeated the contagion rules, that would be one thing. but no, it says "do this, except sometimes do the contagion rules instead"
[21:22:21] <aeth> yes, but were the contagion rules different at some point?
[21:22:38] <Bike> beats me
[21:23:01] <aeth> it could've just been something that wasn't caught in the editing process as the standard changed over time
[21:23:08] <Bike> semz: point, but then if we follow the text as written, we do follow the contagion rules if number is a rational (so if the divisor is also a rational, the result would be)
[21:23:12] <Bike> so maybe it's just broken
[21:23:39] <semz> hm
[21:23:41] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[21:23:47] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:84bf:ceba:6161:c1f6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:24:46] <semz> might be worth looking into the proper standard, it might be a CLHS error
[21:25:02] <jasom> In theroy if you did ffloor 1.0d 'a then the result would need to be a double-float since the divsor is not a float of a longer format :P
[21:25:06] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[21:32:34] <jasom> Also, it might matter for implementations with subtypes of real other than integer and float?
[21:32:49] <jasom> e.g. an implementation with a builtin decimal or computable type?
[21:33:02] <sm2n> I think rational is required?
[21:33:17] <jasom> Also, it might matter for implementations with subtypes of real other than rational and float?
[21:33:21] <Bike> jasom presumably means like quaternions or whatever
[21:33:31] <Bike> or if they have to be reals, i dunno, computables
[21:34:30] <jasom> log-scaled numbers would apply, maybe fixed-point too (though those are arguably rationals)
[21:34:47] <jasom> it does have to be real, per the spec
[21:34:49] <Bike> i get the idea, anyway
[21:36:15] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Ping timeout: 268 seconds)
[21:36:33] <semz> CLHS is accurate here for the record.
[21:38:49] *** Joins: jeosol (~jeosol@user/jeosol)
[21:39:05] <Bike> meaning it reflects the standard?
[21:41:02] <semz> yes
[21:46:03] <Bike> right, thanks.
[21:50:38] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 250 seconds)
[21:50:52] *** Joins: amb007 (~a_bakic@49.145.204.77.rev.sfr.net)
[22:06:18] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[22:06:37] *** Quits: amb007 (~a_bakic@49.145.204.77.rev.sfr.net) (Ping timeout: 240 seconds)
[22:07:02] *** Joins: amb007 (~a_bakic@32.42.131.77.rev.sfr.net)
[22:07:30] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:08:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:11:52] *** Quits: parjanya (~esb@200.173.177.134) (Ping timeout: 250 seconds)
[22:13:52] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f2:194d:8941:18b:7fe2:5d44) (Ping timeout: 268 seconds)
[22:17:07] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:27:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:30:29] *** Quits: treflip (~user@user/treflip) (Quit: good night ☺/)
[22:37:42] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:37:55] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[22:37:56] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:38:18] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:43:35] *** Quits: amb007 (~a_bakic@32.42.131.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:44:03] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:56:49] *** Joins: simendsjo (~user@84.211.91.241)
[22:58:48] <rotateq> phoe: but if you would like it, i could come up from time to time here with another erc instance and give statements (rather than expressions) like "all those silly parentheses!" and then leave :D
[22:59:00] <phoe> please no
[22:59:05] <phoe> ;; #lispcafe would be better for that
[22:59:13] <rotateq> of course it was a big joke
[22:59:18] <phoe> :D
[23:01:09] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[23:01:11] <rotateq> i remember this one dude some months ago immediately "is clhs the best that can be done?" or others
[23:01:26] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[23:03:42] *** Quits: kevingal (~quassel@2001:770:c0:401:c05c:9bd4:6992:748e) (Remote host closed the connection)
[23:06:29] *** Quits: osp (~osp@84.19.72.107) (Quit: Leaving)
[23:10:22] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[23:11:40] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 250 seconds)
[23:12:02] *** Quits: dre (~dre@2001:8003:c932:c301:3dc2:f775:99d4:76ef) (Ping timeout: 240 seconds)
[23:22:59] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[23:22:59] *** Joins: greaser|q (greaser@user/greasemonkey)
[23:23:02] *** greaser|q is now known as GreaseMonkey
[23:23:49] *** Quits: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de) (Quit: WeeChat 3.4)
[23:29:10] *** Joins: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de)
[23:34:47] <simendsjo> In some languages, I can use _ as a variable (or prepend _) to indicate a variable is unused. In CL, this is `(declare (ignore x))` as I understand it. While it does what I want, it's very verbose, especially in short lambdas. Are there a shorthand/hack available?
[23:35:01] <phoe> not really
[23:35:47] <simendsjo> I see, no big deal.
[23:36:07] <semz> Within loop forms you can use nil to indicate that the variable is unused, but this is a special case.
[23:36:08] <phoe> the only helpful thing is that required arguments in DEFMETHOD don't have this behavior
[23:36:19] <phoe> because they are implicitly used for method dispatch
[23:36:23] <phoe> and what semz said
[23:38:31] <EdLangley[m]> You can just use the variable
[23:38:35] <EdLangley[m]> (lambda (_) _ 42)
[23:38:48] <jmercouris> anyone can think of an elegant way of collecting every other element from a list? E.G. (list 0 1 2 3 4) -> (list 1 3)
[23:38:56] <EdLangley[m]> Some might say its inelegant, but its concise
[23:39:02] <jmercouris> now, note that this list isn't a number, so I can't do evenp or some other such heuristic
[23:39:02] <moon-child> here is a fun trick: name function parameters + and -
[23:39:07] <jmercouris> s/heuristic/predicate
[23:39:08] <phoe> (loop for (x y) on list by #'cddr collect y)
[23:39:17] <jmercouris> phoe: I like
[23:39:18] <moon-child> since those are special, they will not be complained about
[23:39:18] <jmercouris> thanks
[23:39:27] <phoe> except for the NIL at the end
[23:39:40] <phoe> you can try to work around that one somehow
[23:39:40] <jmercouris> hm, that is problematic isn't it
[23:39:53] <phoe> or maybe not, gimme a sec
[23:39:58] <EdLangley[m]> jmercouris: (mapcan (let ((it nil)) (lambda (v) (setf it (not it)) (if it (list v) (list)))
[23:39:59] <EdLangley[m]> s/jmercouris: (mapcan (let ((it nil)) (lambda (v) (setf it (not it)) (if it (list v) (list)))/jmercouris: (mapcan (let ((it nil)) (lambda (v) (setf it (not it)) (if it (list v) (list)))/
[23:40:01] <EdLangley[m]> Hmm, no emacs to count parens
[23:40:25] <phoe> (loop for cons on '(0 1 2 3 4) by #'cddr for (x y) = cons when (cdr cons) collect y)
[23:40:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[23:40:40] <jmercouris> hm, that is starting to become a little bit convoluted
[23:40:53] <jmercouris> I mean, I understand it, but at glance goin through the codebase, I would do a double take
[23:41:06] <moon-child> (loop for x in '(0 1 2 3 4) for flag = nil then t when flag collect x)
[23:41:09] <moon-child> err
[23:41:11] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:41:12] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[23:41:13] <moon-child> for  flag = nil then (not flag)
[23:41:16] <EdLangley[m]> The predicate would be: (let ((it t)) (lambda (v) (setf it (not it)) (if it (list v) (list))))
[23:41:42] <jmercouris> phoe: (loop for (x y) on (list 0 1 2 3 4) by #'cddr when y collect y)
[23:41:48] <EdLangley[m]> (mapcan 'true-every-other-time '(0 1 2 3 4))
[23:41:52] <phoe> (let ((list '(0 1 2 3 4))) (remove-if #'evenp list :key (alexandria:rcurry #'position list)))
[23:41:52] <moon-child> jmercouris: what if you have nil in your list?
[23:41:57] <phoe> jmercouris: that will fail i--- yes
[23:42:03] <jmercouris> there are no nils in my list
[23:42:07] <EdLangley[m]> Where true-every-other-time is: (let ((it t)) (lambda (v) (setf it (not it)) (if it (list v) (list))))
[23:42:18] * moon-child still likes  for flag = nil then (not flag)
[23:42:37] <jmercouris> I'm not sure the flag adds clarity here
[23:42:58] <rotateq> yes, first clarity by reading
[23:43:06] <jmercouris> too bad there is no mapcaddr
[23:44:13] <jmercouris> rotateq: CLHS is not beginner friendly, but it is good
[23:44:21] <jmercouris> personally I do not like all the restrictions placed around the source material
[23:44:30] <jmercouris> can't reproduce it in this way or that way without the icons etc etc
[23:44:41] <phoe> jmercouris: (loop for thing in '(0 1 2 3 4) for i from 0 when (oddp i) collect thing)
[23:44:50] <mfiano> That is a particular derivation of the source material
[23:44:53] <jmercouris> phoe: indeed, that also works! and solves the nil problem
[23:45:08] <mfiano> Not the canonical source
[23:45:19] <jmercouris> mfiano: sure, but I don't see any PDFS of the ansi spec
[23:45:22] <mfiano> The canonical source is almost illegible and costs $$$
[23:45:26] <jmercouris> I've looked... but cannot find
[23:45:38] <mfiano> But the next best thing is dpANS which is mostly the same
[23:45:55] <phoe> jmercouris: https://franz.com/support/documentation/cl-ansi-standard-draft-w-sidebar.pdf
[23:46:19] <mfiano> You are looking for the draft, not the ANSI spec
[23:46:20] <jmercouris> ah! thank you again
[23:46:38] <mfiano> ANSI controls the spec and you would need a license.
[23:46:45] <mfiano> THe draft is almost hte same though
[23:47:02] <phoe> AFAIK the same plus minus whitespace and front matter
[23:47:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:47:16] <jmercouris> any LaTeX sources available? or just the PDF?
[23:47:54] <phoe> https://github.com/antoszka/dpANS3/
[23:48:17] <jmercouris> got it, thanks
[23:48:27] *** Parts: engblom_ (~foo@86-60-190-113.dynamic.lounea.fi) ()
[23:48:33] <rotateq> jmercouris: i remember very well the situation i was in when beginning, so yes, not very beginner friendly :)
[23:48:48] <jmercouris> rotateq: I too remember, I was just a little baby tomato in Lisp 4 years ago
[23:49:00] <jmercouris> I tried to fit everything into my mental model of previous languages
[23:49:08] <jmercouris> felt like starting over completely
[23:49:10] <rotateq> hehe. and riping more every day
[23:49:23] <jmercouris> when I decided to forget everything and learn lisp from a "blank" slate
[23:49:34] <rotateq> yes and it teaches much from another and well thought point of view
[23:49:41] <jmercouris> It was difficult as I had been programming already for around a decade
[23:50:22] <rotateq> oh i can imagine, for me not so much, but other "not normal" stuff and more math things before
[23:51:18] <semz> Lisp often feels like some alternate history where Unix didn't win
[23:51:40] <rotateq> and now you're so deeply into the AWESOME project of nyxt jmercouris, or don't i remember that correctly?
[23:51:42] <EdLangley[m]> That's one critique of lisp (and Smalltalk) you'll find
[23:51:51] <jmercouris> rotateq: you are correct, that is what I am working on
[23:51:54] <rotateq> semz: in other universes
[23:52:06] <EdLangley[m]> CL impls like to pretend the rest of the system doesn't exist
[23:52:33] <rotateq> firefox annoys me more and more, but i have to redo the nyxt tutorial and manual, so finally can get productive at serious browsing too
[23:52:47] <rotateq> EdLangley[m]: :)
[23:52:50] <jmercouris> well, 2.2.4 is quite good, and I would say is a suitable replacement for a standard browser
[23:53:01] <jmercouris> it is significantly more stable than all previous versions
[23:53:16] <rotateq> running on 2.2.3 here :)
[23:53:26] <jmercouris> there is a big improvement then for 2.2.4!
[23:53:34] <rotateq> okay!
[23:53:43] <semz> EdLangley[m]: Funny enough that's really a criticism of everything outside Lisp in disguise
[23:53:52] <rotateq> wait, better in #nyxt ... (watches for the offtopic-police)
[23:54:01] <jmercouris> lol :-)
[23:54:28] *** Joins: morganw (~user@80.225.24.132)
[23:55:34] <rotateq> EdLangley[m]: the "owning" reminded me on one of the good quotes from Erik Naggum
[23:56:01] <rotateq> "… it's just that in C++ and the like, you don't trust anybody, and in CLOS you basically trust everybody. The practical result is that thieves and bums use C++ and nice people use CLOS."
[23:57:12] <theothornhill> jmercouris: (loop for x in (cdr '(0 1 2 3 4)) by #'cddr collect x)
[23:57:38] <rotateq> isn't :ON then better?
[23:57:48] <rotateq> or hm okay
[23:58:27] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[23:58:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
