[00:00:01] <zincy_> Do you have a diagnosis?
[00:00:04] <tomsmeding> head hunted as in, as HVAC specialist? ;)
[00:00:17] <geekosaur> most specifically I have always had hypersensitivity issues, and they've been getting rather worse the past decade or so
[00:00:27] <geekosaur> tomsmeding, those are not the big three
[00:00:30] <tomsmeding> fair :)
[00:00:38] <zincy_> hypersensitivity to what?
[00:00:39] <geekosaur> I had to turn down amazon and facebook the other day
[00:01:30] <geekosaur> zincy_, you know how your eyes can adapt from seeing with any trace of light in the dark to dealing with the noonday sun? mine get "stuck" at that low settiing and then even room light is too much for me
[00:01:36] <geekosaur> same happens with hearing
[00:02:13] <geekosaur> (well, maybe you don't know, night blindness is a thing)
[00:02:20] <zincy_> that sounds tough!
[00:02:31] <geekosaur> it's a  matter of filtering. my brain's filters don't work right
[00:02:58] <geekosaur> I'm on a shitload of medication, which helps a bit but not quite enough sometimes
[00:03:44] <tomsmeding> don't know what medication you're getting, but sometimes the side effects of that are on par with the thing they're meant to combat
[00:03:46] <zincy_> Do you have people around for support?
[00:03:58] <tomsmeding> hope that's not the case for you
[00:04:35] <geekosaur> tomsmeding, primary medication is valproate which is pretty safe (except for prednant women, which is one I don't have to worry about :)
[00:04:40] <geekosaur> *pregnant
[00:05:26] <geekosaur> zincy_, my sister, but she really doesn't understand the problem, she's one of those "it's all in your head, just work your way through it" types
[00:05:38] <tomsmeding> that's nice, could've been worse :)
[00:05:49] <tomsmeding> oh meh
[00:05:54] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:06:03] <geekosaur> she can tell me that after she's been stuck in a fully darkened room for a few hours becausde even a little light causes severe pain
[00:06:14] <zincy_> That will make you feel worse
[00:06:16] <geekosaur> and shuts my brain down ~completely
[00:06:28] <zincy_> photophobia and phonophobia?
[00:06:34] <geekosaur> yes
[00:07:10] <zincy_> How were they brought on?
[00:07:41] <geekosaur> occasionally it extends to hyperosmia. rarely, to nociception, although I think I mostly have the opposite problem there, possibly because I've always been so overloaded that my brain has had to learn to ignore it almost completely to function?
[00:08:31] <geekosaur> depends. stress definitely exacerbates them, but sometimes thye occur on their own. overexposure also makes them more likely, as does lack of sleep (I'm careful about amount of sleep these days)
[00:09:44] <zincy_> Yeah so starting a new job is going to be hard
[00:09:48] <geekosaur> I also get into weird halfway states, where my brain is partially working but partially shut down / stuck. like a siren too near me causes my balance to go weird (the world starts flipping sideways on me)
[00:10:01] <tomsmeding> if stress makes things worse, your choice to not take up a big three offer is probably a good one
[00:10:14] <geekosaur> yeh. it'd be easier even if I could just predict when the problems would happen, or time things
[00:10:28] <geekosaur> yeh, I know thye're pretty stressful places
[00:11:00] <zincy_> If you have a diagnosis could you perhaps get some kind of leniency from employers?
[00:11:22] <zincy_> As in these are the working conditions I need to be healthy
[00:11:24] <tomsmeding> the induced real-life problems feel similar to epilepsy, though somehow worse sometimes?
[00:11:25] <geekosaur> I have a diagnosis but they'd have to be *awfully* lenient
[00:12:41] <zincy_> How did you cope with interviews from big 3
[00:12:43] <geekosaur> and, I was starting earlier this year to ramp up toward getting back in the job market because it seemed like the valproate had things under control, then I had another attack midsummer
[00:12:48] <zincy_> Surely that would be mega stressful
[00:12:58] <geekosaur> didn't reach that far. like I said, headhunted.
[00:13:05] <zincy_> ah right
[00:13:09] <geekosaur> I did interview at AMZN a decade ago
[00:14:07] <geekosaur> (AMZN headhunters aren't necessarily any better than anyone else, they were looking for C++/OOP devs, what part of resume+interview made them think I was one?)
[00:14:31] <geekosaur> esp. since I was interviewing for a job that was more sysadmin than programmer back then
[00:14:35] <zincy_> How many years of Haskell experience fo you have?
[00:14:39] <zincy_> *do
[00:15:36] <geekosaur> been playing with it since 2007, but not much more than playing despite being titular head of the xmonad project (that's mostly because I've been around for so long, plus I was the one who yanked it onto github when code.haskell.org went away)
[00:16:28] <zincy_> Thats a while
[00:16:48] <zincy_> Im wondering at what point you actually feel confident
[00:17:00] <geekosaur> not yet, at any rate
[00:17:04] <zincy_> Seems like you can do Haskell for ten years and still feel inept
[00:17:28] <geekosaur> I still haven't quite adjusted to applicative and it seems like all the cool kids are doing lenses and type level programming
[00:18:04] * tomsmeding does some badass type levvel programming, but lenses are scary
[00:18:08] <tomsmeding> s/vv/v/
[00:19:47] <zincy_> Seems like lenses are way more complicated than nearly all the language extensions 
[00:20:01] <Cajun> well they are also quite powerful
[00:20:08] <zincy_> Yes
[00:20:16] <geekosaur> not convinced of that, most of them seem to be fancy uses of Functor
[00:20:18] <tomsmeding> I mean, my average file nowadays has at least 6 extensions on or something
[00:20:36] <tomsmeding> lately made one with 14
[00:20:46] <geekosaur> but I really need to at some point sit down with a lens tutorial _with exercises_ and work through them
[00:20:49] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[00:20:54] <tomsmeding> o/
[00:21:02] *** Joins: Cajun (~Cajun@user/cajun)
[00:21:03] <zincy_> Theres a book called optics by example
[00:21:10] <zincy_> looks friendly
[00:21:18] <Cajun> theres a book on it? gotta give that a read
[00:21:49] <zincy_> You can do big things in crazily concise ways with lens
[00:21:57] <Cajun> honestly optics/lenses arent too useful if you just use getters and non-nested setters
[00:22:38] <zincy_> Yeah only after moving on from the boring getters and setters did I go aha
[00:23:26] <geekosaur> also at one point I was thinking of looking into the optics library because the errors are supposed to be better, but on the other hand it kinda loses the point that lenses are mostly Functors and the like
[00:23:35] <geekosaur> and that's where their power comes from
[00:23:52] <geekosaur> so now I feel like I should just jump in the deep end and learn them properly
[00:24:12] <zincy_> Yeah its tricky to know what to learn in haskell
[00:24:13] <Cajun> i used optics to learn it (i havent used actual lenses) and they work fine, but some things are different between them
[00:24:27] <zincy_> Lens, recursion schemes, ...
[00:24:33] <Cajun> the documentation is definitely nicer on hackage for optics :)
[00:24:42] <Cajun> recursion schemes are still beyond me
[00:25:06] <monochrom> I haven't been in appreciation of the "compose easily" side of lense because I don't have a lot of nested data. (Don't worry, when one day I have much nested data, I'm sure I will be grateful!)
[00:25:08] <zincy_> I think recursion schemes are when you are leaving the intermediate stage
[00:25:28] <monochrom> But what I appreciate much at this stage is the "first class" side of it.
[00:25:36] <zincy_> Yeah
[00:26:19] <zincy_> monochrom: Did you get any epiphanies from recursion schemes?
[00:26:52] <monochrom> Suppose I have binary search trees. Suppose I have two algorithms, they're mirrors of each other, one works on the left, the other works on the right, but they do the same thing except left vs right.
[00:27:37] <monochrom> lens says I just have one algorithm, and I pass "the left lens" or "the right lens" as a parameter.
[00:28:13] <monochrom> In particular, consider all those rotation algorithms for balancing BSTs!
[00:28:57] <zincy_> yeah lenses are powerful
[00:29:38] <monochrom> Not except catamorphisms and anamorphisms.
[00:31:21] <zincy_> You mean those two were enlightening?
[00:31:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[00:31:31] <monochrom> Yes.
[00:31:44] <monochrom> You know what, I had to look up "epiphany" heh
[00:32:21] <monochrom> The rest of recursion schemes I consider "just more ad hoc complications"
[00:33:32] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[00:33:54] <monochrom> What really impressed and enlightened me is the fairly recent Ralf Hinze work of conjugating cata/anamorphism with a left/right adjoint of an adjunction pair. That covers a whole lot of cases uniformly, not ad hoc at all.
[00:34:22] <monochrom> s/with/by/  # we conjugate foo by bar, eh?
[00:35:01] <monochrom> http://www.cs.ox.ac.uk/ralf.hinze/publications/index.html#P32  "adjoint folds and unfolds"
[00:35:34] <monochrom> It is the only thing that convinced me to learn adjunction :)
[00:35:49] <monochrom> And eventually, perhaps to learn Kan extensions too.
[00:36:25] <monochrom> (For decades, merely Galois connections have been enough to serve me.)
[00:38:45] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[00:40:13] <zincy_> ok cool.
[00:44:25] <zincy_> monochrom: What are your recommendations for self teaching programming language theory?
[00:44:44] <zincy_> Any good intro books or courses?
[00:44:53] <monochrom> Not sure my recommendation would be good, but I'll try.
[00:45:14] <zincy_> sure go for it
[00:46:17] <monochrom> Harper's Practical Foundations for Programming Languages is an inexpensive book for that. But it's pretty dense. I understand it because, only because, I've already learned much stuff elsewhere.
[00:47:53] <zincy_> ah yes seen that on on amazon
[00:48:24] <monochrom> I have not read the Software Foundation series or the Wadler et al. PLFA. This is only because they came out after I had already learned the stuff. But perhaps they are really good places to start today.
[00:49:05] <zincy_> So does Software foundations teach PL theory as well as formal verification?
[00:49:10] <monochrom> Yes.
[00:49:17] <zincy_> ah nice
[00:50:03] <monochrom> volume 2 "Programming Language Foundations" sounds like it.
[00:51:06] *** Quits: fendor (~fendor@178.165.200.199.wireless.dyn.drei.com) (Remote host closed the connection)
[00:52:07] <monochrom> When I learned this stuff a long time ago, I was using Mitchell's Foundations of Programming Languages and Pierce's TaPL. But today they're both pretty old and expensive, not exactly a must given that there are more and newer choices.
[00:53:23] <monochrom> Although, TaPL and its sequel may still be a must if you later want to specialize in type systems.
[00:53:57] <monochrom> For example if you *gasp* want to explain OOP by subtyping and/or bounded polymorphism.
[00:54:15] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[00:54:51] <hpc> well ubuntu just scared the crap out of me
[00:54:56] <zincy_> awesome thanks
[00:55:03] <hpc> i had two processes taking all my cpu
[00:55:09] <hpc> tracker-extract, and tracker-miner
[00:55:13] <hpc> first thought: virus
[00:55:24] <hpc> second thought: unfortunate choice in name
[00:55:54] <hpc> turns out it's the thing that indexes your stuff for when you do the desktop search thing
[00:56:10] <zincy_> haha great names
[00:57:30] <zincy_> monochrom: Thanks for your help, I have been basing my rough learning plan on your advice so far 
[00:57:38] <zincy_> and its going well
[01:02:42] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:04:26] <tomsmeding> hpc: that's _really_ bad naming
[01:08:08] <hpc> it was also running out of /usr/libexec, just to look extra-weird
[01:18:36] <tomsmeding> gotta do it all
[01:37:31] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[01:42:09] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[01:46:09] <janus> hpc: it's a gnome project, unfair to attribute it to ubuntu https://wiki.gnome.org/Projects/Tracker
[01:48:54] <hpc> ah
[01:49:09] <hpc> allow me to be even more unfair then by blaming debian :D
[01:52:08] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 258 seconds)
[01:55:16] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:04:29] <geekosaur> gnome has wormed itself into every distribution: see also: everyone switching to systemd because gnome required it
[02:27:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:43:35] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 264 seconds)
[02:55:15] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:02:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[03:08:42] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Remote host closed the connection)
[03:21:09] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[04:05:25] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[04:20:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:57:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:13:13] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[05:14:53] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[05:32:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[06:57:19] *** Quits: carter (sid14827@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[07:00:04] *** Joins: carter (sid14827@id-14827.helmsley.irccloud.com)
[07:28:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:29:00] <ongy[m]> Network Manager... that's a gnome project iirc
[07:44:47] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 264 seconds)
[07:45:05] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[08:03:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[08:25:28] <DigitalKiwi> kdes version of tracker (baloo) indistinguishable from virus
[08:53:13] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[09:09:11] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[09:49:33] *** Joins: Inst__ (~Inst@2601:6c4:4080:3f80:7857:9ec8:a629:d6a8)
[09:53:26] *** Quits: Inst_ (~Inst@2601:6c4:4080:3f80:9ce5:6f05:3959:43f5) (Ping timeout: 245 seconds)
[09:53:29] *** Joins: lortabac (~lortabac@atoulouse-256-1-14-70.w92-136.abo.wanadoo.fr)
[09:55:05] *** Joins: fendor (~fendor@178.165.200.199.wireless.dyn.drei.com)
[09:59:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:22:11] *** Quits: Inst__ (~Inst@2601:6c4:4080:3f80:7857:9ec8:a629:d6a8) (Ping timeout: 245 seconds)
[10:42:36] <zincy> https://en.wikipedia.org/wiki/Rule_of_least_power
[10:42:55] <zincy> Why wouldn't you want the most powerful programming language possible?
[10:43:00] <zincy> Am I being naive
[10:44:41] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[10:48:41] <zincy> Keep it simple is not an argument for using assembly to write a web server.
[10:50:47] <zincy> "Sometimes simplicity is confused with 'easy to understand"."
[10:50:51] <zincy> +1
[10:50:56] <zincy> https://www.w3.org/DesignIssues/Principles.html
[10:53:47] <sshine> zincy, the higher the computation class your language belongs to, the less you can say about what it does without running it.
[10:54:07] <sshine> zincy, essentially, if you can avoid Turing-complete for a particular purpose, that is a good thing.
[10:54:25] <zincy> interesting
[10:54:30] <sshine> zincy, if your problem can be solved by a DFA, then you both get efficiency and ability to reason about it.
[10:56:03] <sshine> zincy, https://docs.dhall-lang.org/discussions/Safety-guarantees.html -- here's an example of a configuration language that isn't Turing-complete.
[10:56:33] <zincy> So this applies to DSL design.
[10:57:01] <zincy> Don't make your server html templating language turing complete
[10:57:18] <sshine> general-purpose programming is supposedly always Turing-complete, but you can always have dedicated subsets of your language that aren't. for example, if you have a regex library, you'd love for those functions to have predictable performance and scope of execution, right?
[10:57:37] <zincy> yeah
[10:57:48] <sshine> yeah, especially templating and configuration are DSLs where you really don't want too much expressive power :)
[10:58:14] <zincy> So what is the pitfall of too much expressiveness there?
[10:58:19] <zincy> Harder to validate?
[10:59:51] <lortabac> think of the difference between using explicit recursion and using 'map'
[11:00:17] <sshine> the dhall article on safety discusses some aspects.
[11:00:23] <lortabac> when you use 'map' you know, for example, that the structure of the list is not going to change
[11:00:45] <lortabac> map is less powerful but its intent is clearer
[11:01:49] <zincy> Whats the structure that can change with explicit recursion?
[11:02:48] <lortabac> you can literally return anything, for example 'foo (x:xs) = x'
[11:02:54] <sshine> for (i = 0; i < n; i++) { if (i == 5) { a.delete(i); } ... }
[11:03:19] <zincy> Ah yes the general case of recursion 
[11:03:29] <zincy> map is functorial
[11:03:43] <lortabac> yes, that's what I meant
[11:03:48] <zincy> so the functorial structure is a safety rail
[11:05:05] <zincy> Is there a way of proving that one is less expressive than the other
[11:06:03] <zincy> I guess you would have to show that one construction out of the same primitives isnt possible
[11:06:13] <zincy> Whereas the other is
[11:07:53] <lortabac> I think there are formal definitions of what "more expressive" means
[11:08:30] <lortabac> there was a video that explained the idea in an accessible way, but I don't have the link right now
[11:32:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[11:47:34] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[11:47:34] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[11:47:37] *** allbery_b is now known as geekosaur
[11:52:48] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Remote host closed the connection)
[12:00:21] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[12:01:24] <kuribas> It's not possible to use tuples in a SQL `in`, is it?
[12:02:48] <kuribas> I'll need to use multiple `and` and `or`?
[12:03:21] <kuribas> where (field1 = 'foo' and field2 = 1) or (field1 = 'bar' and field2 = 0) or ...
[12:12:16] <kuribas> oh, apparently I *can* do where (field1, field2) in (('foo', 1), ('bar', 0))!
[12:16:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:21:37] <kuribas> hmm, I am reading that mysql doesn't optimize it.
[12:21:42] <kuribas> Why is it so shitty...
[12:25:13] <kuribas> Though this information is quite old.
[12:28:21] <kuribas> https://dba.stackexchange.com/questions/174945/mysql-not-using-index-on-large-where-in-clause
[12:28:32] <kuribas> "Most importantly... "Tuples" are not optimized. That is, the Optimizer does a terrible job with WHERE (a,b) IN ((1,2), (3,4)), regardless of the indexes. Don't use it if you want performance."
[12:50:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[12:53:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[12:58:03] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Ping timeout: 260 seconds)
[13:04:16] *** Joins: fendor_ (~fendor@178.165.166.121.wireless.dyn.drei.com)
[13:06:59] *** Quits: fendor (~fendor@178.165.200.199.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[13:08:06] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[13:08:33] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[13:35:53] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[13:36:37] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[13:59:56] <geekosaur> yeh, I was gonna say they should work but good luck with optimization
[14:00:30] <geekosaur> back when I was doing databases even the commercial ones didn't handle tuples very well
[14:01:31] <kuribas> shouldn't they just compile to a conditional?
[14:01:53] <kuribas> I don't understand why databases don't compile to a smaller intermediate language.
[14:01:58] <kuribas> Like ghc does with ghc code.
[14:02:00] <kuribas> core.
[14:02:29] <geekosaur> as I understand it, in a sense they do… to a smaller intermediate *table* with no indexes
[14:02:46] <geekosaur> they're databases, not compilers
[14:03:11] <kuribas> yeah, but at high level they are like a compiler, no?
[14:03:23] <kuribas> You have a big language with complicated semantics.
[14:03:32] <kuribas> Couldn't you compile to a smaller language with simpler semantics.
[14:03:33] <kuribas> ?
[14:04:07] <kuribas> And then have different strategies based on the size, storage and layout of the data.
[14:06:39] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[14:07:57] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[14:26:36] *** Joins: Cajun (~Cajun@user/cajun)
[14:37:13] <hpc> kuribas: the thing to google is "query planning"
[14:37:56] <hpc> or the thing for me to do is read another page up in scrollback lol
[14:38:30] <hpc> but yeah, i would consider the query plan to be a smaller dsl that general sql gets translated to
[14:46:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:50:02] <tomsmeding> kuribas: same disclaimer as hpc, scrollback not read, but https://paste.tomsmeding.com/DVkfIG3j
[14:55:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[14:59:47] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Ping timeout: 264 seconds)
[15:21:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[15:51:59] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[16:02:48] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[16:03:08] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[16:41:21] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[16:41:36] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[16:56:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[17:01:39] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Ping timeout: 260 seconds)
[17:17:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:30:39] <zincy> What part of a partially applied function is "too much abstraction" for a clojure programmer
[17:33:38] <geekosaur> I thought Schemes didn't like partial application?
[17:38:35] <zincy> Why not?
[17:39:59] <geekosaur> try writing one
[17:40:15] <zincy> :D
[17:40:31] <geekosaur> you end up using a lambda and apply
[17:40:34] <kuribas> zincy: you have "partial"
[17:41:17] <kuribas> ((partial str "abc") "def") => "abcdef"
[17:41:17] <kuribas>  
[17:41:19] <kuribas> (in clojure)
[17:41:26] <lortabac> I wouldn't say partial application is too much abstraction, but it does have some downsides
[17:41:48] <kuribas> partial application doesn't work with variable arguments.
[17:41:57] <kuribas> for example map is map + zip in most lisps
[17:42:01] <lortabac> think of error messages such as "No instance for Num (a -> Int)"
[17:42:08] <kuribas> also not with keyword arguments.
[17:42:47] <lortabac> it also introduces a small overhead, because the runtime needs to keep track of the arity
[17:43:14] <kuribas> that's true of any closure
[17:43:27] <kuribas> even if you don't have partial application
[17:43:47] <lortabac> not in statically-typed languages
[17:45:05] <lortabac> whatever arity a function is expecting, you know it will always be saturated after application
[17:45:21] <lortabac> whereas with currying it's not necessarily the case
[17:45:38] <kuribas> you can create a closure on the fly
[17:46:24] <lortabac> yes, but in those languages I guess you would need two distinct applications
[17:46:32] <lortabac> foo(1, 2)(3)
[17:46:47] <lortabac> whereas in Haskell you can do foo 1 2 3 and the runtime figures out all the details
[17:49:32] <zincy> Ah ok so different language different trade offs
[17:50:20] <zincy> Its not too much abstraction more that this is a faff in my language
[17:51:43] <lortabac> anyway I was talking about automatic currying (a la Haskell), not about specific uses of partial application (like Clojure's "partial")
[17:51:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[18:15:41] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 264 seconds)
[18:26:56] *** Quits: lortabac (~lortabac@atoulouse-256-1-14-70.w92-136.abo.wanadoo.fr) (Quit: WeeChat 2.8)
[18:58:20] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[19:02:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Ping timeout: 245 seconds)
[19:06:07] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[19:19:14] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Remote host closed the connection)
[19:39:41] *** Quits: fendor_ (~fendor@178.165.166.121.wireless.dyn.drei.com) (Remote host closed the connection)
[19:41:28] *** Joins: fendor (~fendor@178.165.166.121.wireless.dyn.drei.com)
[19:47:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:50:24] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[20:06:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[20:22:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[20:36:25] <ongy[m]> :t curry
[20:36:26] <lambdabot> ((a, b) -> c) -> a -> b -> c
[20:37:13] <ongy[m]> does it automatically curry? I thought it's just automatic partial application
[20:51:03] *** Joins: Inst__ (~Inst@2601:6c4:4080:3f80:258f:7b54:f932:b719)
[20:58:17] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 264 seconds)
[20:59:59] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:32:11] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 245 seconds)
[21:43:06] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:50:26] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 258 seconds)
[22:18:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:21:38] <janus> ongy[m]: i guess it depends on your definition of "currying"? the function "curry" involves tuples as you can see
[22:25:11] <janus> (and calls to it are not automatically inserted)
[22:27:23] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:37:30] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Remote host closed the connection)
[22:37:36] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 245 seconds)
[22:38:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[22:45:10] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 260 seconds)
[22:45:14] *** Joins: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it)
[22:53:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[23:11:40] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[23:19:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Remote host closed the connection)
[23:22:27] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
