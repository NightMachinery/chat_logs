[00:02:35] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[00:05:06] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 264 seconds)
[00:07:12] *** Quits: sp41 (~spal@70.241.120.35) (Quit: Lost terminal)
[00:08:28] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:09:11] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[00:09:31] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:49aa:7cc4:2149:f0f9)
[00:18:17] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[00:25:06] *** Joins: ilshad (~user@91.202.45.54)
[00:40:53] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[00:50:35] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[00:51:58] *** Quits: ilshad (~user@91.202.45.54) (Remote host closed the connection)
[00:52:11] *** Joins: ilshad (~user@91.202.45.54)
[00:54:07] *** Joins: ramenbytes (~vir@071-009-124-057.res.spectrum.com)
[00:54:39] *** Joins: trocado (~trocado@bl18-243-251.dsl.telepac.pt)
[00:56:34] *** Quits: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:00:12] *** Joins: Guest5775 (~Guest57@151.30.85.5)
[01:00:29] *** Quits: Guest5775 (~Guest57@151.30.85.5) (Client Quit)
[01:00:56] *** Joins: tfb (~tfb@88.98.95.237)
[01:05:03] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[01:06:52] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 252 seconds)
[01:17:09] *** Joins: kakuhen (~kakuhen@2600:6c50:103f:f86e:c14d:8c7a:993e:3fea)
[01:17:09] *** Quits: kakuhen (~kakuhen@2600:6c50:103f:f86e:c14d:8c7a:993e:3fea) (Changing host)
[01:17:09] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:31:36] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 258 seconds)
[01:40:49] *** Quits: x88x88x (~x88x88x@188.214.106.69) (Ping timeout: 258 seconds)
[01:41:27] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[01:51:48] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[02:05:07] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[02:05:20] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 258 seconds)
[02:06:09] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[02:10:35] *** Quits: bilegeek (~bilegeek@2600:1008:b017:63a6:c26d:d119:faaa:a6d7) (Quit: Leaving)
[02:22:31] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[02:22:47] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 265 seconds)
[02:27:11] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 258 seconds)
[02:27:34] *** Quits: ramenbytes (~vir@071-009-124-057.res.spectrum.com) (Remote host closed the connection)
[02:33:00] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[02:34:27] *** Joins: Oladon (~olad@98.43.81.226)
[02:34:38] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.2)
[02:41:07] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:4812:3940:14e1:1806) (Ping timeout: 265 seconds)
[02:41:23] <jcowan> beach: I was traveling this weekend so read all the papers available from the SICL page: a master class in CL implementation!
[02:42:07] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b018:5ea9:91ca:6b3c:19c1:dc76)
[02:47:19] *** Joins: bilegeek (~bilegeek@2600:1008:b017:63a6:c26d:d119:faaa:a6d7)
[02:50:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[02:53:43] *** Joins: rest (~rest@159.89.237.107)
[02:56:05] *** Joins: rabbit_05 (~cmr@205-233-44-158.3rivers.net)
[02:57:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 265 seconds)
[02:57:19] *** Joins: tyson2``` (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[03:01:55] *** Quits: tyson2``` (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 265 seconds)
[03:05:29] *** Quits: rabbit_05 (~cmr@205-233-44-158.3rivers.net) (Remote host closed the connection)
[03:06:06] *** Quits: frgo_ (~frgo@p200300deef27d7003cd976f651aaf725.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:06:34] *** Joins: frgo (~frgo@p200300deef27d7003cd976f651aaf725.dip0.t-ipconnect.de)
[03:15:14] *** Quits: rest (~rest@159.89.237.107) (Quit: Client closed)
[03:17:09] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[03:23:55] *** Quits: Quasus (~Quasus@a89-152-209-125.cpe.netcabo.pt) (Ping timeout: 258 seconds)
[03:32:21] *** Quits: trocado (~trocado@bl18-243-251.dsl.telepac.pt) (Ping timeout: 265 seconds)
[03:51:36] *** Joins: cjb (~cjb@user/cjb)
[03:54:08] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:49aa:7cc4:2149:f0f9) (Remote host closed the connection)
[04:34:18] *** Joins: eddof13 (~textual@187.246.227.157)
[04:37:36] *** Quits: random-nick (~random-ni@87.116.177.92) (Ping timeout: 265 seconds)
[04:39:14] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[04:41:48] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[04:41:57] *** Quits: silasfox (~sbv@2001-4dd6-57a2-0-a504-35b8-bb69-198e.ipv6dyn.netcologne.de) (Ping timeout: 265 seconds)
[04:42:48] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[04:49:46] *** Quits: eddof13 (~textual@187.246.227.157) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:50:01] *** Joins: unyu (~pyon@user/pyon)
[05:10:06] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[05:35:22] *** Joins: eddof13 (~textual@187.246.227.157)
[06:01:42] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[06:01:56] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[06:02:40] *** Quits: ilshad (~user@91.202.45.54) (Ping timeout: 265 seconds)
[06:08:49] *** Joins: igemnace (~ian@user/igemnace)
[06:09:27] *** Quits: igemnace (~ian@user/igemnace) (Client Quit)
[06:09:55] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[06:10:56] *** Joins: igemnace (~ian@user/igemnace)
[06:16:37] *** Quits: eddof13 (~textual@187.246.227.157) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:19:09] *** Quits: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Remote host closed the connection)
[06:23:24] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[06:27:11] *** Joins: Bike (~Bike@2603-6081-2340-023a-fd79-934a-adff-ad47.res6.spectrum.com)
[06:27:11] *** ChanServ sets mode: +o Bike
[06:28:17] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 265 seconds)
[06:32:20] *** Joins: ilshad (~user@91.202.45.54)
[06:36:37] *** Quits: Bike (~Bike@2603-6081-2340-023a-fd79-934a-adff-ad47.res6.spectrum.com) (Quit: Client closed)
[06:38:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Remote host closed the connection)
[06:39:12] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:44:20] *** Joins: shka (~herr@109.231.62.239)
[07:05:32] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[07:06:18] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 264 seconds)
[07:06:30] *** Quits: ilshad (~user@91.202.45.54) (Ping timeout: 265 seconds)
[07:06:32] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[07:23:29] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[07:24:14] *** Joins: dsk (~dsk@user/dsk)
[07:37:54] <beach> Good morning everyone!  And happy solstice!
[07:38:30] <beach> jcowan: Thanks!
[07:45:36] <phantomics> Happy solstice beach
[07:51:14] <phantomics> Here's a question that's kind of the opposite of yesterday's: when I have a dynamic variable with a definition assigned to it that's effective within a scope, is it possible to set the variable's top-level value from inside the scope? Here's an example:
[07:51:24] <phantomics> (defvar ab 10) (funcall (lambda (a) (let ((ab ab)) (set-toplevel ab 20) (+ a ab))) 15) ab
[07:52:26] <phantomics> The (set-toplevel) is a theoretical macro that sets the value of ab at its top level so the end result of this will be 20. If setf or (set (symbol-value ...)) is used in place of set-toplevel, the result is always 10
[07:53:55] <beach> There is no standard way.  But the implementation may have something.  Most implementations would assign to the top-level binding if you create a new thread and do it in that thread.
[07:54:19] <phantomics> Right, I ran into that problem with threads before
[07:55:16] <beach> Problem?
[07:55:34] <phantomics> I had a variable scoping issue when using threads
[07:56:00] *** Joins: wanagnuj (~wanagnuj@101.95.97.158)
[07:56:01] *** Quits: wanagnuj (~wanagnuj@101.95.97.158) (Client Quit)
[07:56:33] <phantomics> Was confusing because the nesting looked right, realized I couldn't get the variable value I wanted because threads were being spawned inside one of the functions
[07:57:11] <beach> I see.
[07:57:17] *** Joins: wanagnuj (~wanagnuj@101.95.97.158)
[07:57:38] <phantomics> That's a pain if the implementation can't be counted on though, I may have to find another way
[07:58:10] *** Quits: wanagnuj (~wanagnuj@101.95.97.158) (Client Quit)
[07:58:43] *** Joins: wanagnuj (~wanagnuj@101.95.97.158)
[07:59:08] *** Quits: wanagnuj (~wanagnuj@101.95.97.158) (Client Quit)
[07:59:25] <beach> I know of no implementation that does it differently.
[07:59:26] <phantomics> In APL it's possible to assign both values that are scoped inside a function and the top-level dynamic variable outside a function using different syntax
[08:01:04] <phantomics> Outside-scope assignment is a fairly obscure thing to do anyway, I can just implement it with a thread and see if there's ever a problem
[08:01:16] <jcowan> beach: What I expected to find in the inlining paper was a discussion of inlining functional arguments, as when you want to inline a call (mapcar car list-of-pairs), where you could not just inline mapcar but also inline car within it.
[08:01:30] <mfiano> Writing a macro that expands to two defvars?
[08:02:09] <mfiano> I mean you are basically accessing for a dynamic variable to not be dynamic, so you'll have to use additional storage
[08:02:13] <beach> Oh, right, DEFVAR or DEFPARAMETER may work.
[08:02:18] <mfiano> s/accessing/asking/
[08:03:09] <beach> jcowan: Sorry to have disappointed you.  That's not the focus at all of that paper.
[08:03:53] * beach goes to look at the definition of DEFVAR and DEFPARAMETER.
[08:05:07] <phantomics> mfiano: yeah, I'd need two defvars, and I'd have to remember to reference the top-level variable in the (let) block of any function definition done at the top level
[08:05:36] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:05:53] <beach> It is not clear to me whether those two affect the innermost binding or the top-level binding.
[08:06:01] <jcowan> phantomics: If your macro expands to two defvars, it should instead map to (progn (defvar ...) (defvar ...))
[08:06:01] <mfiano> beach: defparameter as a non toplevel form does not have to recognize that the variable should be special
[08:06:31] <beach> What does that mean?
[08:06:36] <beach> Where do you see that?
[08:06:41] <jcowan> beach: Sure.  I just thought it would be mentioned, that's all
[08:06:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[08:06:50] *** Lord_of_Life_ is now known as Lord_of_Life
[08:06:56] <beach> jcowan: Right, thanks.
[08:07:29] <jcowan> I don't know if any Lisps actually implement it: Kottlin does
[08:07:46] <beach> I see.
[08:07:57] <mfiano> beach: "However, the compile-time side effects described below only take place when they appear as top level forms"
[08:08:12] <mfiano> where the side-effects are that they be recognized to establish a special variable
[08:08:38] <beach> mfiano: Right, but that's different from what binding is affected at run time.
[08:08:41] *** Joins: x88x88x (~x88x88x@188.214.106.89)
[08:09:47] <beach> Just for kicks, let's see what SBCL does.
[08:11:04] <beach> SBCL DEFPARAMETER affects the innermost binding.
[08:11:08] <mfiano> Yes, it would be up to the impl I believe.
[08:11:17] <beach> It looks that way, yes.
[08:12:04] <beach> Note to self: In WSCL, specify which binding is affected by non-top-level DEFPARAMETER and DEFVAR.
[08:12:39] <mfiano> That case is probably extremely rare, at least in the non-code-smell sense.
[08:12:56] <beach> Indeed.  But I see no reason not to specify it.
[08:13:02] <mfiano> Yes
[08:13:16] <beach> I mean, at least specify that the implementation has a choice.
[08:13:24] <mfiano> Agreed
[08:16:35] <moon-child> phantomics: you might consider not relying on cl's dynamic scoping, and instead using your own binding stack
[08:17:03] <mfiano> ^
[08:17:21] <mfiano> I second this. Then you can maintain pointers to the top and bottom
[08:17:32] <moon-child> alternately, use some standard prefix for local variables (use a separator, like +; even if you allow rebinding +, you will never allow rebinding ++, so it avoids collisions)
[08:18:41] <phantomics> moon-child: perhaps an ideal solution... but a lot of work
[08:22:05] <beach> phantomics: Maybe.  But it is often a bad idea to rely on the semantics of the implementation language matching the language being implemented.
[08:23:16] <moon-child> I do not agree
[08:23:27] <moon-child> first: there are certain things that it makes sense to rely on.  Integer arithmetic, for instance
[08:23:56] <moon-child> second: if you are designing a language that integrates closely with its target (as april seems to with cl), then it makes sense to try to express things idiomatically in terms of the target, where possible
[08:24:07] <beach> Oh, I didn't mean the way certain functions work.  I was referring to the overall semantics.
[08:24:27] <moon-child> right.  Second argument is more relevant, in that case
[08:24:50] <beach> Right.  If you want integration, that's a different story.
[08:25:03] <phantomics> APL is orthogonal to CL in many ways, there are just a few hangups
[08:25:20] <beach> "orthogonal"?
[08:25:25] <moon-child> phantomics: here's an option: discard dynamic scoping in april entirely :)
[08:25:25] <beach> That sounds bad.
[08:26:40] <phantomics> Orthogonal in that many of the concepts are 1-1 mappings. a+⎕←b×c is the same as (+ a (print (* b c))) for example
[08:28:01] <beach> That's not how I think about "orthogonal", but hey.
[08:28:36] <phantomics> What does it mean to you? Going against the grain of CL?
[08:28:53] <beach> "being totally unrelated"
[08:29:51] <mfiano> phantomics: I think you mean the opposite
[08:30:09] <beach> mfiano: No, the opposite to opposite.
[08:30:27] <phantomics> April produces CL arrays you can easily interact with in CL, its workspace are CL packages. APLs implemented in other languages make special data structures that you can't process using the host language, especially since most are written in languages that don't support multidimensional arrays
[08:30:52] *** Joins: ad_absurdum (~ad-absurd@2600:100a:b018:5ea9:91ca:6b3c:19c1:dc76)
[08:31:26] *** Joins: kakuhen_ (~kakuhen@2600:6c50:103f:f86e:c14d:8c7a:993e:3fea)
[08:31:51] <moon-child> well, depends on what you mean by 'process using the host language'.  Dyalog apl (for instance) is written in c++; its arrays are implemented in terms of c++ structures and are surely manipulable from the (c++) implementation
[08:32:24] <mfiano> Right. When I see "orthogonal" I think geometrically, as in, on an orthogonal axis, not even comparable.
[08:32:29] <moon-child> you can even write plugins in c that manipulate those arrays
[08:32:33] *** Joins: fiddlerwoaroof_ (~fiddlerwo@user/fiddlerwoaroof)
[08:33:38] <beach> mfiano: Exactly.  And I don't think that is what phantomics meant.
[08:34:48] <phantomics> I remember hearing it used differently. I would say instead that APL parallels Lisp in many respects
[08:35:58] *** Joins: ggoes_ (~gregf@user/ggoes)
[08:36:11] *** Joins: derelict_ (~derelict@user/derelict)
[08:36:25] <moon-child> now I am thoroughly confused.  I would say that apl parallels lisp in one respect (power derived through manipulation of a homogenous data structure) and almost no others
[08:36:27] <moon-child> :)
[08:37:18] <phantomics> Their history is kind of similar too: both are mainframe languages, both were used essentially as operating systems and frontend user interfaces on their host machines. Both fell out of favor when the microcomputer revolution happened due to needing a powerful computer to be useful
[08:37:38] <moon-child> yes
[08:38:06] <moon-child> (though lisp did a better job of surviving, I think because it was academic so there were free implementations)
[08:38:47] <phantomics> Vector languages have traditionally been more proprietary than other language families, see k
[08:39:36] *** Quits: dsk (~dsk@user/dsk) (*.net *.split)
[08:39:36] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b018:5ea9:91ca:6b3c:19c1:dc76) (*.net *.split)
[08:39:36] *** Quits: kakuhen (~kakuhen@user/kakuhen) (*.net *.split)
[08:39:36] *** Quits: ggoes (~gregf@user/ggoes) (*.net *.split)
[08:39:36] *** Quits: derelict (~derelict@user/derelict) (*.net *.split)
[08:39:36] *** Quits: eta (~eta@chat.i.eta.st) (*.net *.split)
[08:39:37] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[08:39:38] <phantomics> Also, APL has historically mostly been an interpreted language, deploying it means you have to deploy interpreters. It also means there are a few APL features you can't implement with a compiler
[08:39:39] <moon-child> yes.  But I mean originally, lisp was used for ai at universities, and apl was used for finance at businesses, and this was in the era before commercial languages were generally opensource
[08:40:04] <moon-child> there were a few historical apl compilers.  One I was even able to dig up source for (though I couldn't get it running)
[08:40:08] *** ggoes_ is now known as ggoes
[08:40:18] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:40:37] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[08:41:25] <phantomics> The main APL compiler is called Apex: http://www.snakeisland.com/apexup.htm
[08:41:46] <phantomics> It's been around since the 80s
[08:41:54] <moon-child> ooh, that's a new one I didn't know about
[08:43:39] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[08:46:26] <phantomics> To me the main similiarities between the languages are their simple syntax and how they model arrays and functions. Working on them "feels" similar, even if the appearance of the code is very different. Especially because both are designed around a REPL.
[09:02:09] *** Joins: ilshad (~user@91.202.45.54)
[09:02:59] *** Quits: x88x88x (~x88x88x@188.214.106.89) (Ping timeout: 265 seconds)
[09:10:18] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[09:29:22] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[09:30:08] *** Quits: ChanServ (ChanServ@services.libera.chat) (shutting down)
[09:31:17] *** Quits: bilegeek (~bilegeek@2600:1008:b017:63a6:c26d:d119:faaa:a6d7) (Quit: Leaving)
[09:35:27] *** Joins: x88x88x (~x88x88x@188.214.106.84)
[09:35:48] *** Quits: ilshad (~user@91.202.45.54) (Ping timeout: 268 seconds)
[09:44:42] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Remote host closed the connection)
[09:44:54] *** Joins: ChanServ (ChanServ@services.libera.chat)
[09:44:54] *** iridium.libera.chat sets mode: +o ChanServ
[09:44:54] *** ChanServ sets mode: +oo beach jackdaniel
[09:47:45] *** Quits: kakuhen_ (~kakuhen@2600:6c50:103f:f86e:c14d:8c7a:993e:3fea) (Quit: Leaving...)
[09:47:47] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[09:47:54] *** Joins: kakuhen (~kakuhen@2600:6c50:103f:f86e:c14d:8c7a:993e:3fea)
[09:47:55] *** Quits: kakuhen (~kakuhen@2600:6c50:103f:f86e:c14d:8c7a:993e:3fea) (Changing host)
[09:47:55] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[09:57:04] *** Quits: ad_absurdum (~ad-absurd@2600:100a:b018:5ea9:91ca:6b3c:19c1:dc76) (Quit: Leaving)
[10:00:43] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:04:17] *** Quits: cjb (~cjb@user/cjb) ()
[10:10:10] *** Joins: dsk (~dsk@user/dsk)
[10:17:12] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:4812:3940:14e1:1806)
[10:23:40] *** Quits: x88x88x (~x88x88x@188.214.106.84) (Ping timeout: 258 seconds)
[10:24:19] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[10:29:01] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 265 seconds)
[10:34:41] *** Joins: derwolf (~quassel@81.161.232.13)
[10:49:18] *** Joins: Cymew (~ante@c-ef9c225c.023-1144-7570702.bbcust.telenor.se)
[10:53:30] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.2)
[11:00:23] *** Joins: ilshad (~user@91.202.45.54)
[11:01:00] *** Joins: leeb_ (~leeb@KD111239158072.au-net.ne.jp)
[11:03:32] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[11:03:55] *** Quits: leeb (~leeb@KD111239153103.au-net.ne.jp) (Ping timeout: 258 seconds)
[11:04:52] *** Joins: unyu (~pyon@user/pyon)
[11:05:59] *** Quits: unyu (~pyon@user/pyon) (Client Quit)
[11:13:28] <gigo> Why should we use with-standard-io-syntax when not using it also works fine. Code I wrote to test it out: https://plaster.tymoon.eu/view/2506
[11:13:54] <mfiano> Consider the case when the user sets the default float read format
[11:15:37] <kakuhen> bootstrapping ccl has got to be one of the most tedious things i've done lately
[11:15:52] <phoe> kakuhen: which version did you download as the bootstrapper?
[11:16:05] <kakuhen> my current working copy of 1.12
[11:16:16] <phoe> gigo: (setf *print-length* 3) and then try writing the DB
[11:16:28] <phoe> (and also say goodbye to all sequences longer than 3)
[11:16:51] <kakuhen> phoe: i am trying to bootstrap 1.12.1 and I kept running into a bunch of mysterious compiler errors; so far i have managed to produce the 1.12.1 kernel and some bootstrapping binary from my existing ccl installation
[11:17:28] <kakuhen> somehow (ccl:compile-ccl) immediately gave me some error about x8664arg something, but (ccl:compile-ccl t) went smoothly
[11:17:44] <phoe> kakuhen: huh
[11:17:54] <phoe> which platform are you on?
[11:18:00] <kakuhen> freebsd/amd64
[11:18:23] <kakuhen> latest release is 1.12 for it, and i am attempting to get 1.12.1 on it
[11:19:05] <kakuhen> what i've done so far is merge my /usr/local/lib/ccl with the ccl-1.12.1 folders, but obviously not overwrite any overlapping files
[11:19:18] <kakuhen> then i compiled the ccl kernel, and gave it my existing 1.12 heap image
[11:19:31] <phoe> oh wait, does this work?
[11:19:40] <kakuhen> no idea; this is my first time ever bootstrapping ccl lol
[11:19:42] <phoe> mixing a heap image from 1.12 with a kernel from 1.12.1
[11:19:56] <phoe> it might fail in mysterious ways
[11:20:11] <kakuhen> well the ccl guys dont provide any heap image for freebsd
[11:20:26] <phoe> the general procedure of bootstrapping CCL is, you use the existing CCL to build a new minimal heap image, and you compile the C kernel
[11:20:26] <kakuhen> I tried running their little getbinaries script and using that heap image
[11:20:30] <kakuhen> but ccl would immediately segfault
[11:20:42] <phoe> the getbinaries script is ancient and should not be used
[11:21:00] <kakuhen> i see
[11:21:17] <phoe> I see that https://github.com/Clozure/ccl/releases has 1.12 for freebsd
[11:21:48] <kakuhen> right, but no 1.12.1
[11:21:50] <kakuhen> Anyway, I ran the 1.12.1 kernel with the 1.12 heap image, and then I ran (ccl:xload-level-0), which compiled all the newer lisp files without error and produced a bootstrapping image
[11:21:50] <phoe> yes
[11:22:03] <gigo> mfiano: phoe: So if I don't change the default IO settings, then not using (with-standard-io-syntax ...) would be okay?
[11:22:12] <kakuhen> phoe: im assuming i should be using this bootstrapping image when I invoke (ccl:compile-ccl) and not my 1.12 heap image
[11:22:15] <phoe> gigo: yes, but you can't tell anyone to not change the default settings
[11:22:25] <phoe> kakuhen: I actually am not sure
[11:22:42] <phoe> I think the bootstrapping image only contains enough facilities to be able to load FASLs
[11:22:44] <gigo> phoe: makes sense. thanks. so I should keep the (with-standard-io-syntax ...) as a best practice.
[11:22:51] <phoe> which contain t[12:04:56] *** Quits: ilshad (~user@91.202.45.54) (Ping timeout: 268 seconds)
[12:05:06] *** Joins: derwolf_ (~quassel@81.161.232.13)
[12:06:08] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[12:08:35] *** Quits: derwolf (~quassel@81.161.232.13) (Ping timeout: 265 seconds)
[12:08:42] *** Joins: igemnace (~ian@user/igemnace)
[12:09:26] *** Joins: jgkamat (~jay@user/jay)
[12:10:51] *** Joins: derwolf (~quassel@81.161.232.13)
[12:13:38] *** Joins: derwolf__ (~quassel@81.161.232.13)
[12:14:12] *** Quits: derwolf_ (~quassel@81.161.232.13) (Ping timeout: 268 seconds)
[12:16:48] *** Quits: derwolf (~quassel@81.161.232.13) (Ping timeout: 265 seconds)
[12:19:09] *** Joins: derwolf (~quassel@81.161.232.13)
[12:22:36] *** Quits: derwolf__ (~quassel@81.161.232.13) (Ping timeout: 265 seconds)
[12:22:49] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[12:28:34] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[12:36:35] *** Joins: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net)
[12:36:40] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:30] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:45:58] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[12:50:34] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 268 seconds)
[13:19:55] *** Joins: rogersm (~rogersm@107.pool85-56-92.dynamic.orange.es)
[13:30:22] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[13:31:11] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[13:35:58] *** Joins: x88x88x (~x88x88x@188.214.106.74)
[13:43:19] *** Joins: domovod (~domovod@ppp222-162.dialup.corbina.ru)
[13:57:10] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[13:57:10] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[14:00:34] *** Joins: ilshad (~user@91.202.45.54)
[14:00:41] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:02:49] *** Joins: hendursa1 (~weechat@user/hendursaga)
[14:06:17] <gigo> mfiano: phoe: In our discussion a little while back I learnt that if I don't use (with-standard-io-syntax ...) while writing to a file, reading it may become impossible. Is there an example where if I don't use (with-standard-io-syntax ...) while reading, it may cause problem?
[14:07:28] *** Quits: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net) (Quit: Client closed)
[14:09:26] <phoe> a heavily customized readtable, I guess
[14:09:35] <phoe> something that has custom behavior for standard reader macros
[14:09:52] *** Joins: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net)
[14:12:53] <susam> phoe: so not something straightforward a beginner like me can reproduce easily? that's fine. I will keep it in mind and try it out later when I have learnt more CL.
[14:13:25] <susam> phoe: this discussion has been most interesting. Unfortunately I have not learnt reader macros yet.
[14:13:48] <phoe> oh wait
[14:13:55] <phoe> floats will have issues, too
[14:14:19] <phoe> reading floats will be an issue if the defaul read formt has been modified
[14:14:49] <susam> In fact, it never occurred to me earlier that with-standard-io-syntax was important while reading and writing files. I guess because I mostly write them out in a custom format that I have to parse. But yes, after the few examples cited earlier today in this channel I see why it is important.
[14:15:16] <gigo> phoe: Thanks!
[14:15:40] <gigo> phoe: What should I do with floats to cause an issue?
[14:16:01] <phoe> mismatch the format between writing and reading them, in general
[14:18:26] *** Joins: tfb (~tfb@88.98.95.237)
[14:18:44] <gigo> phoe: https://plaster.tymoon.eu/view/2507#2507 - this works fine. what kind of mismatch should I make?
[14:20:17] *** Joins: selwyn (~selwyn@user/selwyn)
[14:20:26] <phoe> (let* ((string (prin1-to-string 1.0f0)) (*read-default-float-format* 'double-float)) (read-from-string string))
[14:21:06] *** Quits: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net) 