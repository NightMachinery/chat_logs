[00:07:18] *** Quits: briandaed (~root@109.95.142.93.r.toneticgroup.pl) (Ping timeout: 252 seconds)
[00:08:44] *** Quits: Guest27 (~Guest27@c-174-63-99-174.hsd1.ma.comcast.net) (Quit: Client closed)
[00:11:48] *** Quits: yauhsien_ (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:12:08] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Remote host closed the connection)
[00:14:36] *** Joins: yauhsien_ (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[00:19:17] *** Quits: yauhsien_ (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[00:21:02] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Quit: Leaving)
[00:21:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[00:23:44] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:653f:80d3:c158:3650)
[00:24:35] *** Joins: xcmw (~textual@dyn-72-33-0-152.uwnet.wisc.edu)
[00:32:32] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[00:34:48] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 252 seconds)
[00:36:38] *** Joins: Guest84 (~Guest84@2601:602:87f:4220:33a4:a2a9:5b0:4f1e)
[00:37:17] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[00:37:49] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:37:51] *** Joins: Pickchea (~private@user/pickchea)
[00:37:55] <Guest84> Hello! I was wondering how I would make a list by doing something like: [16,8..0] but rather than returning [16,8,0] it would return [16,8,4,2,0].... I want the decrement to be division
[00:38:51] <geekosaur> you can't do that automagically
[00:39:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[00:39:12] <Guest84> How would you suggest it be done?
[00:39:13] <geekosaur> the various list iteration syntaxes are all invocation of Enum methods
[00:39:25] <Guest84> Right
[00:39:37] <geekosaur> also you're not getting 0 from a division, did you mean 1?
[00:40:02] <Guest84> Yes
[00:40:33] *** Lord_of_Life_ is now known as Lord_of_Life
[00:40:54] <geekosaur> mmm
[00:41:50] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[00:42:19] <geekosaur> > let divs 1 = [1]; divs x = x : divs (x `div` 2) in divs 16
[00:42:20] <lambdabot>  [16,8,4,2,1]
[00:43:05] <Guest84> Awesome!
[00:43:15] <Guest84> Thank you!!
[00:44:08] *** Joins: pgib (~textual@173.38.117.90)
[00:44:22] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[00:44:29] *** Joins: Techcable (~Techcable@user/Techcable)
[00:45:41] *** Joins: yauhsien_ (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[00:45:51] <tomsmeding> > takeWhile (> 0) (iterate (`div` 2) 16)
[00:45:52] <lambdabot>  [16,8,4,2,1]
[00:46:45] <abastro[m]> > map (shiftL 2) [4..0]
[00:46:46] <lambdabot>  []
[00:47:00] <tomsmeding> > map (shiftL 2) [4,3..0]
[00:47:01] <lambdabot>  [32,16,8,4,2]
[00:47:05] <abastro[m]> Duh me
[00:47:14] <tomsmeding> > map (shiftL 1) [4,3..0]
[00:47:15] <lambdabot>  [16,8,4,2,1]
[00:47:32] <tomsmeding> > map bit [4,3..0]
[00:47:34] <lambdabot>  [16,8,4,2,1]
[00:47:41] <tomsmeding> that may be the shortest you're going to get
[00:47:48] <abastro[m]> Oh right, shiftL 1.
[00:47:54] <Guest84> that is awesome
[00:48:05] <abastro[m]> `bit` is indeed better
[00:48:11] <tomsmeding> but only works for powers of 2, these last ones :p
[00:48:18] <Guest84> what does bit do?
[00:48:18] <abastro[m]> I hope it is also faster than division
[00:48:33] <tomsmeding> Guest84: https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Bits.html#v:bit
[00:48:35] *** Joins: mohy (~mohy@2001:718:1e03:5128:9f94:1a5f:91e3:d539)
[00:48:49] *** Joins: jakalx (~jakalx@base.jakalx.net)
[00:48:59] <abastro[m]> " bit i is a value with the ith bit set and all other bits clear. "
[00:49:10] <geekosaur> should be for Int, not guaranteed fr nteger which is what this will be using by default
[00:49:10] <tomsmeding> abastro[m]: meh, (`div` 2) is almost certainly optimised to >>1, at which point it is a while-loop until that reaches zero instead of a for-loop with a shiftL
[00:50:16] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:50:30] <abastro[m]> Hmmm. I see, but is while loop faster?
[00:50:56] <abastro[m]> (I did not know that ghc can perform such optimization consistently)
[00:50:59] *** Quits: yauhsien_ (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[00:51:41] <tomsmeding> a loop with known iteration bounds is usually faster than one without known iteration bounds, so from that perspective the 'map bit' one should be faster -- but this is already making quite deep assumptions on exactly what codegen is going to do
[00:51:44] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:52:01] <abastro[m]> Hm, true
[00:52:08] <tomsmeding> abastro[m]: (`div` 2) to (`shiftR` 1) is a standard compiler optimisation called "strength reduction"
[00:52:15] <tomsmeding> LLVM does it even if you pass -O0
[00:53:04] *** Joins: alp (~alp@user/alp)
[00:53:18] <abastro[m]> TIL
[00:54:01] <tomsmeding> (I don't actually know anything about GHC in this regard, but I would assume and hope that it does do this :p )
[00:54:09] *** Quits: yauhsien (~Yau-Hsien@61-231-38-131.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[00:57:08] <abastro[m]> Hm after asking this on haskell discourse, I wonder how would this chat ppl wohld solve this problem:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/e72d79b35c54430ff6544b9ec3fe62e87d9a16f3)
[00:58:12] <abastro[m]> (I mean exhaustively pairing the list into (n, n+k) pairs)
[00:58:24] <tomsmeding> what is the intended time complexity :p
[00:59:20] <abastro[m]> Well, O(n)
[00:59:39] <abastro[m]> Seems like O(n^2) is easier going declarative style
[01:00:21] <tomsmeding> O(n^2) is definitely easy, O(n log n) is quite easy with a Map, O(n) is possible only if k is constant, or if you're using a constant-time-access hash map
[01:00:23] <tomsmeding> i think
[01:00:39] <tomsmeding> and if the list is sorted
[01:00:56] <abastro[m]> Oh right
[01:01:09] <abastro[m]> We assume the list is sorted
[01:01:39] <abastro[m]> And isn't it possible to O(n) using IntSet
[01:02:43] <tomsmeding> hm, right, because Int has a bounded number of bits
[01:02:48] <abastro[m]> Btw we can do double iterator approach to avoid usage of Map. Tho using Map is more intuitive, I guess.
[01:03:06] <tomsmeding> if it's sorted then yes you can do a double iterator approach ;)
[01:03:39] <tomsmeding> oh right, with that approach it's actually also easy
[01:04:31] <abastro[m]> Easy??
[01:04:47] <tomsmeding> ok "easy" :p
[01:05:38] <abastro[m]> I see, I wonder how to do double iterator approach elegantly in haskell though.
[01:06:42] <tomsmeding> hm
[01:10:31] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[01:10:34] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:13:23] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[01:13:24] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:15:20] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[01:16:05] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[01:16:12] *** Quits: oooottoo (~oooottoo@c-24-9-197-96.hsd1.co.comcast.net) (Quit: Client closed)
[01:16:25] *** Joins: oooottoo (~oooottoo@c-24-9-197-96.hsd1.co.comcast.net)
[01:16:33] *** Quits: xcmw (~textual@dyn-72-33-0-152.uwnet.wisc.edu) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:18:00] <abastro[m]> In general, I am curious how one would encode multiple iterator approach in haskell.
[01:20:05] *** Quits: Guest84 (~Guest84@2601:602:87f:4220:33a4:a2a9:5b0:4f1e) (Quit: Client closed)
[01:22:08] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:22:20] *** Joins: Pickchea (~private@user/pickchea)
[01:22:41] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[01:23:57] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[01:24:29] <tomsmeding> I may have an interesting laziness-based approach
[01:25:02] <tomsmeding> the need to skip with the first pointer that have been taken by the second pointer makes things complicated
[01:25:43] <monochrom> IMO iterators and generators are poor people's emulations of lazy lists. In Haskell, we have real lazy lists, so why want emulations.
[01:26:16] <tomsmeding> this one is not just a lazy list, it's a lazy list where the tail depends on the head :p
[01:26:29] <tomsmeding> like the classic `fix (\l -> 0 : 1 : zipWith (+) l (tail l))`
[01:26:38] <maerwald> if laziness was enough, there would be no streaming libraries
[01:26:46] <monochrom> But we have real fixed points like that, too.
[01:26:49] <maerwald> laziness is poor people's streaming
[01:26:52] <dminuoso> monochrom: Mmm, that's not entirely correct. In other languages you often interleave them with side effectsd.
[01:27:01] <dminuoso> Then you get something closer to ListT
[01:27:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[01:27:40] <monochrom> Yeah. Well, we have real ListT and it's a library rather than at the mercy of language builtins, too.
[01:27:51] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[01:29:27] <monochrom> And we have Cont (and it's also user-definable) so you can also do http://www.vex.net/~trebla/haskell/cont.xhtml#yield if you want to syntactically look like writing a loop that calls "yield".
[01:31:52] *** Joins: pavonia (~user@user/siracusa)
[01:31:58] *** Joins: acidjnk (~acidjnk@p200300d0c7049f94c956cb44f746ab1f.dip0.t-ipconnect.de)
[01:32:05] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 250 seconds)
[01:32:08] <monochrom> I haven't extended that to ContT for interleaving yield with your choice of monadic effect. But you get the point.
[01:32:08] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:32:54] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[01:33:10] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[01:33:24] <monochrom> (I hope to come back and write that in the future. But for now, learning Lean is more interesting, haha.)
[01:34:16] <tomsmeding> abastro[m]: https://paste.tomsmeding.com/NWCbieCw seems to work
[01:34:19] *** Quits: mohy (~mohy@2001:718:1e03:5128:9f94:1a5f:91e3:d539) (Ping timeout: 260 seconds)
[01:36:03] *** Quits: oooottoo (~oooottoo@c-24-9-197-96.hsd1.co.comcast.net) (Quit: Client closed)
[01:37:39] *** Quits: remedan (~remedan@octo.cafe) (Remote host closed the connection)
[01:41:19] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[01:42:16] *** Joins: deadmarshal_ (~deadmarsh@95.38.112.219)
[01:44:23] <abastro[m]> Wow, that is such a brilliant solution!
[01:44:36] <mon_aaraj> Hello! I've been trying to configure GHCi, but it seems that it isn't quite working how it is meant to. If I read any documentation, it says that it can read a file from ~/.config/.ghci, but it never reads the file from there. But it does work when I put it in ~/.ghci. I might already know of the source of the issue, since I had the same problem with GHCup not handling symlinks correctly, and my
[01:44:38] <abastro[m]> I like your use of Boolean list for stack.
[01:44:38] <mon_aaraj> ~/.config directory is a symlink to ~/Git, could that be the issue? If not, then I am probably doing something wrong. Here's my ~/.config/.ghci: https://bpa.st/G5LA
[01:44:56] *** Joins: remedan (~remedan@octo.cafe)
[01:46:06] <tomsmeding> abastro[m]: it's not really a stack, rather a queue
[01:46:41] <tomsmeding> that's why I took the self-recursive definition here; if it was a queue I could just pass it down the iteration in 'go' like a normal value
[01:46:59] <abastro[m]> Oh, I meant processing inside the go function.
[01:47:08] <abastro[m]> Wait
[01:47:12] *** Quits: deadmarshal_ (~deadmarsh@95.38.112.219) (Ping timeout: 272 seconds)
[01:47:25] <tomsmeding> mon_aaraj: where did you read that ~/.config/.ghci should work?
[01:47:39] <abastro[m]> I guess I saw something wrong, yea it is queue
[01:48:40] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:48:50] *** Joins: Pickchea (~private@user/pickchea)
[01:49:10] <tomsmeding> abastro[m]: producing a proper Either containing the error instead of throwing is an exercise for the reader ;p
[01:50:30] <abastro[m]> 👍
[01:50:59] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[01:51:27] <mon_aaraj> tomsmeding: https://downloads.haskell.org/ghc/latest/docs/html/users_guide/ghci.html#the-ghci-files
[01:52:08] <mon_aaraj> I also think this file is in the source of GHC, so I'm not sure, maybe there's something weird going on with the documentation 
[01:53:57] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[01:54:28] <tomsmeding> in any case this changed in ghc 9.2, the 9.0.1 docs have "$HOME/.ghci" instead of "$XDG_CONFIG_HOME/.ghci"
[01:55:00] *** Quits: nsyd (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net) (Quit: i'm still here dont worry)
[01:55:10] *** Joins: karim (~karim@156.200.129.163)
[01:55:25] <mon_aaraj> Ah, so I am using an old version, I didn't realise. Thank you so very much!
[01:55:38] <tomsmeding> but it doesn't seem to work for me in 9.2.1 either :p
[01:55:59] <tomsmeding> mon_aaraj: not so much "old", 8.10.7 is still the "recommended" for stable production use kindof
[01:56:05] <monochrom> If you go for 9.2.*, please go for 9.2.2 :)
[01:56:59] <monochrom> In particular 9.2.2 has extra accomdation code for trying both $HOME and $XDG_whatever
[01:56:59] <tomsmeding> ah, "GHC now follows by default the XDG Base Directory Specification. If $HOME/.ghc is found it will fallback to the old paths to give you time to migrate. This fallback will be removed in three releases."
[01:57:24] <maerwald> yeah, so in order to figure out GHC behavior, you need an excel sheet
[01:57:35] <mon_aaraj> Definitely! Thank you so very much monochrom!
[01:57:39] <abastro[m]> When did GHC pick LTS scheme?
[01:57:49] <monochrom> 9.2.1 had "no more $HOME, exclusively XDG" hardcoded, thus the quarrel.
[01:58:10] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:58:23] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[01:58:35] <maerwald> mon_aaraj: how does ghcup not handle symlinks correctly?
[01:59:17] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[01:59:26] <monochrom> One excel sheet is not enough. Things actually get multi-dimensional. For example here is a 3D situation: http://www.vex.net/~trebla/haskell/cabal-cabal.xhtml#shared
[01:59:43] <maerwald> 3d excel?
[02:00:12] <mon_aaraj> Oh no, it does. It just reminds me of when it didn't, a really nice person helped me to fix the issue and committed a fix into ghcup a while ago, so I thought that might've been the culprit, but I was just using the wrong GHC version
[02:00:27] <maerwald> surely a nice person
[02:00:49] <maerwald> the last bug was sed replacing symlinks (because that is sed's default behavior)
[02:00:53] <monochrom> "We'll see about that" :)
[02:01:10] <maerwald> after decades of unix, I didn't even know that one
[02:02:21] *** Quits: karim (~karim@156.200.129.163) (Ping timeout: 256 seconds)
[02:04:41] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[02:05:08] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:05:16] *** Joins: slack1256 (~slack1256@191.125.227.76)
[02:07:08] *** Joins: Pickchea (~private@user/pickchea)
[02:12:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:13:54] <mon_aaraj> hmm, well after updating GHC and trying to use it, there's this warning which isn't bad, but it seems to be quite incorrect: ``[ Warn  ] Possibly insufficient disk space on /tmp. At least 5000 MB are recommended, but only 3934.59 are free. Consider freeing up disk space or setting TMPDIR env variable.``, what could be causing this? there's tons of free space on my root partition, and also it seems
[02:13:56] <mon_aaraj> to work perfectly. running ``df -h /tmp`` shows that the size is 3.9 gigabytes, with only 7 megabytes being used, which I guess is the source of the error?
[02:14:04] <mon_aaraj> *GHCup
[02:14:41] <maerwald> that's not an error
[02:15:06] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[02:15:17] <maerwald> there's no easy way to determine exactly how much disk space you need
[02:15:26] <maerwald> 5GB should be enough for everyone
[02:16:00] <tomsmeding> mon_aaraj: /tmp is probably a tmpfs on your system (like on most), hence being a lot smaller than your root partition: it's as large as the amount of RAM, sortof
[02:16:49] <mon_aaraj> ah, i see. i have about 8 gigs of ram, so I guess is scales based on the amount of ram i have 
[02:16:50] <Maxdamantus> /tmp is not usually tmpfs afaik, though it will typically be cleared on boot.
[02:17:05] *** Quits: mmhat (~mmh@55d49226.access.ecotel.net) (Ping timeout: 256 seconds)
[02:17:10] <maerwald> It's quite annoying that some distros are advertising for /tmp to be a small partition. FHS and no other standard say this.
[02:17:12] <Maxdamantus> oh, on their system, nvm.
[02:17:30] <mon_aaraj> yeah, it is a tmpfs on my system
[02:17:36] <Maxdamantus> And yes, default tmpfs size is 50% of RAM.
[02:17:37] <tomsmeding> Maxdamantus: my arch machine has a tmpfs /shrug/
[02:17:47] <tomsmeding> ah TIL 50%
[02:18:01] <Maxdamantus> You can probably resize it using something like `mount -o remount,size=75% /tmpfs`
[02:18:01] <maerwald> the "clean on reboot" is exactly why we like to use /tmp instead of some custom dir
[02:18:18] <geekosaur> it'sa real partition on my system but I generally force that during sinstallation
[02:18:43] <dminuoso> We're currently evaluating switching to clean-on-reboot with tmpfs on / currently :)
[02:18:48] <dminuoso> For our entire server fleet
[02:19:24] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:19:59] <maerwald> small files you can just dump in /tmp and forget about it... bigger files you try to clean up, but don't need to worry if your process crashes before that
[02:20:16] <maerwald> for anything else, you're implementing cleanup logic manually or start getting angry user reports
[02:20:45] <Maxdamantus> I think I just have the default debian behaviour, which is clean-on-reboot. I don't bother separating things into different partitions. I just have a btrfs filesystem over a few SSDs, and debian is one subvolume in that, with tmp included.
[02:21:01] <dminuoso> Because why have any implicit state at all. Of course this only works because we have nixos, so at boot the entire system is synthesized.
[02:21:15] <maerwald> yeah, but some distros advertise /tmp to be a small partition (less than a gigabyte)
[02:21:49] <Maxdamantus> Those distros seem evil.
[02:22:09] *** Joins: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net)
[02:22:23] <Maxdamantus> Maybe they're just not designed for desktop use.
[02:22:49] *** Quits: gnyeki (~gnyeki@user/gnyeki) (Remote host closed the connection)
[02:22:50] <Maxdamantus> For desktop use, I expect to be able to just chuck a 5 GiB file into /tmp, even if I've only got 8 GiB of RAM.
[02:23:13] <Maxdamantus> Don't have to put it somewhere persistent where I can forget to clean it up later.
[02:23:23] <mon_aaraj> ah, yeah, nixos seems like an interesting idea to put servers to use. it's certainly a nice concept 
[02:23:57] <mon_aaraj> Maxdamantus: what distro don't do it, i wonder? i mean i also use arch and it does the tmpfs thing 
[02:24:43] <Maxdamantus> mon_aaraj: afaik, debian, since I don't think I've seen that on any of my installations.
[02:24:46] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Remote host closed the connection)
[02:25:12] <mon_aaraj> ah, interestinhg 
[02:25:51] *** Joins: slack2414 (~slack1256@186.11.117.121)
[02:25:54] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[02:26:28] *** Quits: slack1256 (~slack1256@191.125.227.76) (Ping timeout: 272 seconds)
[02:27:34] <yushyin> there is also /var/tmp/ (usually cleaned up by tmpfiles.d after 30days, but `man hier' describes /var/tmp/ as a variant of /tmp, where the duration is not specified)
[02:28:07] <Maxdamantus> I sometimes put things in /dev/shm, if I actually want to put it on tmpfs.
[02:29:15] <monochrom> I don't think "desktop" implies either "large /tmp" or "small /tmp" either. Too many users with too many different prejudices.
[02:29:34] *** slack2414 is now known as slack1256
[02:29:48] <monochrom> If there are n users, you can count on having 1.5n+35 rivalling opinions.
[02:29:54] *** Joins: vysn (~vysn@user/vysn)
[02:30:09] <monochrom> That's right, because some people actually are self-inconsistent.
[02:30:10] <Maxdamantus> Historically, /tmp would very likely have not been tmpfs.
[02:30:29] <Maxdamantus> I suspect if some distros do it, that's probably a recent thing, since people sometimes have lots of RAM now.
[02:30:59] <monochrom> Plus SSD has more wear-out problems.
[02:31:09] <monochrom> Historically, SSD did not exist.
[02:31:20] <dminuoso> Wear-out problems are a myth that affect virtually nobody *shrugs*
[02:31:23] <Maxdamantus> Right, so there probably weren't even performance expectations of /tmp
[02:31:24] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[02:31:32] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[02:31:42] *** Joins: alp (~alp@user/alp)
[02:31:49] <hpc> i mean, if we're really talking history, historically /var was tape
[02:31:51] <Maxdamantus> It was just more harddrive space, which was conventionally able to be cleared from time to time.
[02:31:59] <dminuoso> We're switching to all flash storage because it turns out that spinning disks, averaged, die faster than spinning disks.
[02:32:08] <monochrom> Yeah, historically, what's "desktop"? >:)
[02:32:08] <dminuoso> *spinning disks die faster than ssds
[02:32:16] *** Joins: segfaultfizzbuzz (~segfaultf@2602:306:cd3c:9350:d42a:6ce2:77df:38ee)
[02:32:29] <segfaultfizzbuzz> is optimization ai-hard?
[02:33:06] <Maxdamantus> dminuoso: that's also a fairly recent development (last 5 years or so).
[02:33:34] <abastro[m]> Oh I should use tmp directory more, I am sick of huge downloads
[02:34:09] <Maxdamantus> Though I guess SSDs have had more predictable failures than HDDs for a while.
[02:34:29] <monochrom> I agree that I don't worry about SSD wearing out. But there were just a couple of years when it was a valid concern. That was a historical factor of the tmpfs convention today. I mean, speaking of historical legacies.
[02:34:34] <Maxdamantus> (since even the SSDs from 5 years ago would be able to tell you when they're going to run out of TBW)
[02:34:46] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[02:34:46] <abastro[m]> SSDs are basically better now, then?
[02:34:56] <Maxdamantus> Yes.
[02:35:21] <Maxdamantus> Unless you actually want large amounts of storage, in which case HDDs are cheaper.
[02:35:28] <monochrom> There is also "when you power off, you should lose /tmp data, because better privacy".
[02:36:33] <Maxdamantus> Does /tmp actually store a lot of private data?
[02:36:52] <Maxdamantus> Presumably /home would be a bigger concern.
[02:36:53] <monochrom> I guess depends on the user?
[02:37:19] <monochrom> I don't mean to say that I agree with the paranoid concern.
[02:37:42] <monochrom> But some people think like that, and they are also more vocal.
[02:38:11] <monochrom> Now add herding effects.
[02:38:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[02:38:27] <abastro[m]> Is trying to be conscious about password choice being paranoid?
[02:38:45] <abastro[m]> Now I am worried if I am suffering paranoia
[02:38:51] <monochrom> Yes and no?
[02:39:18] <hpc> it's not paranoia if the clowns really are trying to eat you :P
[02:39:19] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:a9ba:a14e:e332:b83f) (Remote host closed the connection)
[02:39:20] <monochrom> Because if you use an automatic password randomizer, then you no longer need to be conscious about it >:)
[02:39:35] <abastro[m]> Oh wait
[02:39:36] <maerwald> abastro[m]: being paranoid about being paranoid is a classical sign of being paranoid xD
[02:39:36] <hpc> you do have to take care of that system though
[02:39:50] *** Joins: machinedgod (~machinedg@mtrlpq02-1168108095.sdsl.bell.ca)
[02:39:59] <abastro[m]> Did not know about automatic pw randomizer
[02:40:08] <abastro[m]> Guess next time I am registering in a strange website, I should use that
[02:40:12] <maerwald> is it *really* random?
[02:40:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:40:24] <monochrom> OK, they're more commonly called "password manager".
[02:40:30] <maerwald> who wrote those?
[02:40:31] <hpc> maerwald: there's a joke about urandom in there somewhere
[02:40:31] <abastro[m]> Oh no I should stop being paranoid about paranoid
[02:40:44] <monochrom> But one of its function is to generate randomized passwords.
[02:41:24] <maerwald> does Kaspersky have a pssword manager?
[02:41:30] <abastro[m]> At least many enough ppl just use single password everywhere so that hackers would not bother to break the pseudorandom
[02:41:38] <segfaultfizzbuzz> lol kapersky password manager lol
[02:41:41] <monochrom> Is a randomizer really random? Does a programmer really program? >:)
[02:42:02] <segfaultfizzbuzz> kapersky bitcoin wallet lol
[02:42:36] *** Quits: segfaultfizzbuzz (~segfaultf@2602:306:cd3c:9350:d42a:6ce2:77df:38ee) (Quit: segfaultfizzbuzz)
[02:43:49] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 240 seconds)
[02:44:06] <abastro[m]> So how secure is random number generator in haskell
[02:44:18] *** Joins: unyu (~pyon@user/pyon)
[02:44:29] <monochrom> The compiler doesn't come with one.
[02:44:36] <abastro[m]> Wait, haskell base even does not have random number generator right
[02:44:42] <monochrom> Then you go to hackage and choose one you want.
[02:44:54] <abastro[m]> I can already hear ppl complaining abt it
[02:45:16] <abastro[m]> Anyway, how about random package?
[02:45:21] <abastro[m]> Is it secure?
[02:45:28] <monochrom> It is not cryptographic.
[02:46:10] <monochrom> There are some in cryptographic packages.
[02:46:19] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 256 seconds)
[02:46:27] <maerwald> I think there is no reasonable definition of security. There's a scientific definition of insecurity though
[02:46:30] <monochrom> But I might just read from /dev/urandom
[02:46:48] <hpc> read from /dev/random, there's no difference anymore
[02:46:59] <abastro[m]> Thanks, I should be more careful about using random package then
[02:47:00] <hpc> there never really was, imo
[02:47:08] <monochrom> Oh heh OK I guess shorter name to type.
[02:47:43] <abastro[m]> Oh If /dev/random is HW-generated random
[02:47:45] <abastro[m]> That would be great
[02:47:53] <hpc> people had these really weird hangups about needing to block for randomness for a couple more bytes, but it's somehow totally fine to have a 2048-bit key encrypting gigabytes of traffic at a timme
[02:48:27] <monochrom> I agree. Another paranoid concern.
[02:48:32] <hpc> abastro[m]: /dev/random is whatever linux has to do to get you a non-blocking stream of entropy that it safe to use
[02:48:38] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[02:48:47] <hpc> likely a mix of hw and seeded randomness
[02:49:19] <abastro[m]> Interesting, great one
[02:49:32] <abastro[m]> Finally, I do not need to use random package
[02:49:58] <monochrom> The random package is great for Monte Carlo purposes.
[02:50:26] <monochrom> But I admit that the conversation started with privacy etc.
[02:52:26] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:4199:73fa:f378:33d) (Ping timeout: 245 seconds)
[02:53:22] <maerwald> privacy is so oldschool
[02:56:36] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[02:59:01] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[03:01:55] *** Joins: deadmarshal_ (~deadmarsh@95.38.112.219)
[03:03:37] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:05:59] *** Joins: Akiva (~Akiva@user/Akiva)
[03:06:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[03:06:43] *** Quits: deadmarshal_ (~deadmarsh@95.38.112.219) (Ping timeout: 260 seconds)
[03:06:46] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[03:08:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:10:48] *** Quits: michalz (~michalz@185.246.204.57) (Remote host closed the connection)
[03:11:05] <koala_man> sm[i]: shellcheck's error IDs are 1xxx emitted by the parser, 2xxx by the AST analysis, 3xxx are individual POSIX and shell support violations (also AST analysis)
[03:13:30] <sm> aha, thanks
[03:14:15] <sm> and just numbered increasingly as you add them I guess
[03:21:41] *** Joins: slac45879 (~slack1256@191.126.227.64)
[03:23:31] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 260 seconds)
[03:23:33] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[03:23:59] *** Quits: slack1256 (~slack1256@186.11.117.121) (Ping timeout: 260 seconds)
[03:25:32] *** kraftwerk28_ is now known as kraftwerk28
[03:27:16] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[03:33:48] *** Quits: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[03:37:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[03:39:11] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[03:40:32] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[03:41:12] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[03:41:52] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[03:43:01] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[03:44:43] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[03:47:24] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 240 seconds)
[03:56:15] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[03:56:41] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[03:57:00] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[03:57:37] *** Quits: machinedgod (~machinedg@mtrlpq02-1168108095.sdsl.bell.ca) (Ping timeout: 240 seconds)
[04:01:47] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:653f:80d3:c158:3650) (Ping timeout: 260 seconds)
[04:02:37] *** Joins: leah2 (~leah@vuxu.org)
[04:02:59] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:03:35] *** Joins: catch22 (~catch22@204.40.96.58.static.exetel.com.au)
[04:03:47] *** Quits: acidjnk (~acidjnk@p200300d0c7049f94c956cb44f746ab1f.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:03:58] *** Joins: Crash0verrid3 (~IceChat95@2601:151:4500:17b:981f:f251:77de:55e5)
[04:08:59] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[04:14:08] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[04:14:29] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[04:15:01] *** Quits: dsrt^ (~dsrt@96-67-120-105-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[04:15:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[04:15:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:16:37] *** Joins: Everything (~Everythin@37.115.210.35)
[04:18:22] *** Joins: slack1256 (~slack1256@186.11.118.121)
[04:19:45] <Axman6> koala_man: how have I never connected that you are _the_ shellcheck koalaman. Love you work my friend, Shellcheck is a godsend
[04:19:46] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:19:56] <koala_man> aww, I'm happy you find it useful!
[04:20:55] *** Quits: slac45879 (~slack1256@191.126.227.64) (Ping timeout: 260 seconds)
[04:23:38] <Axman6> I've been subscribed to the infamous zsh ticket for years and live in hope but understanding =)
[04:23:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[04:24:10] <koala_man> haha yup, zsh is quite different from the rest both syntactically and semantically
[04:25:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:26:03] <geekosaur> zsh is nice for those of us who know both tcsh and sh/bash, but yes, the combination is … interesting
[04:27:03] *** Joins: slac45998 (~slack1256@191.125.227.64)
[04:27:15] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[04:27:28] <Axman6> I wish all languages had tools as nice as shellcheck, imagine having something that nice for Haskell
[04:28:27] <hpc> but what language would it be written in? :P
[04:29:07] *** Quits: slack1256 (~slack1256@186.11.118.121) (Ping timeout: 256 seconds)
[04:30:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[04:30:48] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[04:30:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[04:34:09] *** Quits: slac45998 (~slack1256@191.125.227.64) (Remote host closed the connection)
[04:34:48] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Quit: Konversation terminated!)
[04:35:22] *** Quits: Crash0verrid3 (~IceChat95@2601:151:4500:17b:981f:f251:77de:55e5) (Quit: For Sale: Parachute. Only used once, never opened, small stain.)
[04:37:03] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Ping timeout: 256 seconds)
[04:37:30] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[04:37:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[04:40:07] <dons> shellcheck is excellent.
[04:40:57] *** Joins: dsrt^ (~dsrt@96-67-120-105-static.hfc.comcastbusiness.net)
[04:41:00] <koala_man> praise from caesar
[04:41:35] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[04:48:11] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[04:50:56] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:55:14] *** Quits: pavonia (~user@user/siracusa) (Read error: Connection reset by peer)
[04:55:24] *** Joins: pavonia (~user@user/siracusa)
[04:57:39] <sm> Axman6: I was in here saying the same thing a few weeks ago. Conclusion: that's GHC plus hlint, isn't it ?
[05:02:26] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[05:02:40] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:03:05] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[05:03:18] <Axman6> I've never really felt like the experiences are really comparable, but the problem is also significantly more difficult in Haskell IMO
[05:03:57] <Axman6> adding a type system where things aren't just nearly always strings makes things much harder to automate good advice
[05:06:45] <sm> what makes the experience different ? shellcheck can give more definite concrete advice ?
[05:07:19] <sm> I think hlint is pretty good at that, but GHC less so - unless you restrict to some kind of Simple Haskell maybe
[05:08:03] <sm> that's why we need racket-like language levels (I think Helium does that)
[05:08:53] *** Joins: chenqisu1 (~chenqisu1@183.217.201.88)
[05:12:08] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[05:12:57] *** Joins: nautical (~nautical@2601:602:900:1630::7cbb)
[05:13:37] *** Joins: gardnan (~max@c-75-70-252-201.hsd1.co.comcast.net)
[05:15:10] *** Quits: phma (phma@2001:5b0:2172:dab8:f6f:c543:829a:340a) (Read error: Connection reset by peer)
[05:16:32] *** Joins: Akiva (~Akiva@user/Akiva)
[05:16:45] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:17:28] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[05:20:15] *** Joins: phma (~phma@host-67-44-209-94.hnremote.net)
[05:22:45] *** Quits: phma (~phma@host-67-44-209-94.hnremote.net) (Read error: Connection reset by peer)
[05:23:56] *** Quits: nautical (~nautical@2601:602:900:1630::7cbb) (Quit: WeeChat 3.4)
[05:24:49] *** Joins: phma (~phma@host-67-44-209-94.hnremote.net)
[05:26:49] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[05:28:17] *** Joins: nicbk (~nicbk@user/nicbk)
[05:30:57] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[05:35:12] *** Quits: dsrt^ (~dsrt@96-67-120-105-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[05:39:57] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[05:40:32] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[05:41:18] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[05:42:20] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[05:45:02] *** Parts: Everything (~Everythin@37.115.210.35) ()
[05:47:25] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[05:48:30] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[05:52:33] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[05:52:39] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[05:56:33] *** Quits: Benzi-Junior (~BenziJuni@88-149-64-179.du.xdsl.is) (Quit: ZNC 1.8.2 - https://znc.in)
[05:58:05] <abastro[m]> What language is shellcheck made in?
[06:01:24] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-2420-4733-60a5-9d17.res6.spectrum.com) (Ping timeout: 240 seconds)
[06:04:40] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-0874-3206-ce5b-fa50.res6.spectrum.com)
[06:05:16] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-0874-3206-ce5b-fa50.res6.spectrum.com) (Remote host closed the connection)
[06:11:24] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[06:11:49] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[06:12:37] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[06:15:48] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[06:18:18] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-0874-3206-ce5b-fa50.res6.spectrum.com)
[06:19:08] <boxscape_> abastro[m] haskell
[06:19:24] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-0874-3206-ce5b-fa50.res6.spectrum.com) (Read error: Connection reset by peer)
[06:20:06] <abastro[m]> ?!?!? Wait
[06:20:06] <lambdabot> Unknown command, try @list
[06:20:09] <abastro[m]> How?
[06:20:46] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-0874-3206-ce5b-fa50.res6.spectrum.com)
[06:21:03] <boxscape_> abastro[m] haskell is typically well suited to parsing languages and handling ASTs (in this case a bash AST), so it kind of makes sense
[06:21:31] <abastro[m]> I see. Seems it would be hard to gather contributors though.
[06:21:50] <boxscape_> https://github.com/koalaman/shellcheck says there are 126 contributors
[06:22:54] <boxscape_> though of course as with all repos almost all of them have only a couple of commits
[06:22:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[06:23:49] <abastro[m]> Wow, impressive
[06:24:59] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[06:31:50] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[06:33:49] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[06:35:48] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[06:36:27] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:37:38] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[06:39:47] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:44:33] *** Quits: catch22 (~catch22@204.40.96.58.static.exetel.com.au) (Quit: Client closed)
[06:50:36] *** Joins: notzmv (~zmv@user/notzmv)
[06:59:27] *** Joins: vglfr (~vglfr@88.155.118.203)
[07:01:14] *** Joins: Guest39 (~Guest39@49.207.207.238)
[07:02:37] *** Quits: Guest39 (~Guest39@49.207.207.238) (Client Quit)
[07:02:52] *** Joins: cyphase (~cyphase@user/cyphase)
[07:04:12] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[07:04:53] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[07:09:27] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[07:10:07] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[07:15:23] *** Joins: mud (~mud@user/kadoban)
[07:16:50] *** Quits: vglfr (~vglfr@88.155.118.203) (Ping timeout: 252 seconds)
[07:24:04] <sm> why would it be hard ? everyone who ever wrote a shell script needs this tool :)
[07:25:41] <sm> well maintained, well documented, highly practical haskell code - what could be more pleasant 
[07:26:06] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (Quit: leaving)
[07:28:48] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[07:28:57] <sm> oh, you mean why would haskellers sully themselves enabling the writing of more shell scripts. Well yes.. they're just too useful and we can't live without them
[07:30:40] <abastro[m]> Oh, that as well. Shell scripts are painful
[07:31:49] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 268 seconds)
[07:32:35] <sm> they kind of magically became not so painful when I noticed my editor showing errors and advice in real time
[07:32:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:32:41] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:32:41] *** Joins: wroathe (~wroathe@user/wroathe)
[07:33:17] <sm> I never even configured it, AFAIK. What ? It's unheard of
[07:33:35] <abastro[m]> Wow, I should use that as well then
[07:33:55] <abastro[m]> But mostly I meant how many ppl don't know haskell
[07:34:33] <abastro[m]> As haskell is relatively unpopular language, it is harder for people to volunteer. A price to pay.
[07:34:47] <sm> there's a great https://github.com/koalaman/shellcheck/wiki/DevGuide, and it looks like you could contribute to this knowing very little haskell
[07:40:33] <sm> also, haskell might be relatively unpopular in industry, but it's highly popular among curious software devs. One of the largest IRC channels, etc
[07:41:14] <sm> lots of high quality free support, relative to some languages
[07:43:27] <sm> ok I suppose python, javascript, C sharp, Java, C++ are not lacking in support 
[07:45:56] *** Quits: abradabara (~abradabar@185.183.97.187) (Quit: Lost terminal)
[07:47:12] <koala_man> boxscape_: yeah there's basically 2-3 people who have made substantial Haskell improvements
[07:47:26] <boxscape_> I see
[07:48:20] <sm> have there been similar shell-checking tools built in other languages ?
[07:48:38] <koala_man> shfmt in Go
[07:50:36] <sm> shfmt related projects doesn't mention ShellCheck. Because it doesn't reformat things I suppose
[07:52:01] <koala_man> ShellCheck never cared about formatting except as it relates to correctness, and shfmt filled in that gap. It's since added some checking functionality of its own which is neat
[07:52:01] <abastro[m]> I wonder how you guys think about block/visual coding, would it make stuffs easier?
[07:52:36] <boxscape_> I definitely think coding by writing an ASCII string isn't the pinnacle of user experience, but I'm not sure what a better interface would actually look like
[07:53:04] *** [_] is now known as [itchyjunk]
[07:53:10] <sm> it seems usually not to abastro, with a few exceptions with constrained scope (scratch.. that lab ide thing..)
[07:54:05] <abastro[m]> Oh, so it should be like, Domain-specific. Right?
[07:55:13] <sm> yes, that can be a better fit
[07:55:17] <sm> have you tried https://code.world/blocks  ?
[07:55:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[07:55:53] <sm> it looks like scratch in haskell
[07:56:09] <koala_man> one such formatting issue is one of my favorite checks that never triggers, SC2262. If you run   alias f='echo foo'; f;   then it won't print 'foo' the first time
[07:56:18] <koala_man> but it will the second time
[07:56:28] <sm> yikes
[07:56:31] <koala_man> yup
[07:57:05] <sm> as a shell user, I'd never try something that crazy of course
[07:57:38] <sm> though, now with flycheck and shellcheck at my back, I totally would 👍️
[07:58:08] <koala_man> haha
[07:58:26] <sm> you made me dangerous with bash, koala_man 
[07:59:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:59:46] <koala_man> haha
[07:59:48] <koala_man> oof
[08:01:57] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[08:01:57] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[08:01:57] *** finn_elija is now known as FinnElija
[08:04:03] *** Joins: machinedgod (~machinedg@24.105.81.50)
[08:04:45] <abastro[m]> How have you felf about haskell, koala_man?
[08:08:02] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[08:12:51] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[08:12:54] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[08:12:57] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[08:13:49] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[08:14:11] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[08:18:01] *** Joins: dsrt^ (~dsrt@96-67-120-105-static.hfc.comcastbusiness.net)
[08:20:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:22:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:23:28] <jackdk> koala_man: that makes sense - I assume alias expansion happens before the first command in a compound is evaluated?
[08:29:59] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[08:30:33] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[08:32:57] <Axman6> oh ouch, yeah I was trying to figure out whyit would be the case. that's very gross
[08:34:05] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[08:34:22] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:34:38] <Axman6> so, semicolons are not the same as new lines. that's so gross
[08:35:26] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[08:37:05] <Axman6> koala_man: you've ruined my day now, I'm mad about this and I've never even run into the problem, because it now complicated my mental model of the already insane nature of bash
[08:37:21] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Quit: Leaving)
[08:38:06] *** Joins: vglfr (~vglfr@88.155.118.203)
[08:42:25] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[08:43:15] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[08:45:48] *** Joins: deadmarshal_ (~deadmarsh@95.38.112.219)
[08:48:39] <hololeap> shellcheck has lsp support?
[08:54:22] <abastro[m]> I found it in VSCode, tho it says nothing about lsp
[08:54:32] <abastro[m]> https://marketplace.visualstudio.com/items?itemName=timonwong.shellcheck&ssr=false#overview
[08:55:07] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[08:55:20] <Axman6> I wonder how shellcheck handles those fun files where someone decides that storing binaries in shell scripts is a good idea...
[08:55:48] <abastro[m]> Ewwww
[08:56:24] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2b3e:70f8:165f:be99) (Ping timeout: 252 seconds)
[09:01:25] <monochrom> I hope it is a "utf-8 decoding error" >:)
[09:01:48] <Axman6> last time I saw it it was base64'd
[09:01:59] <Axman6> I think the vmwaretools installer does this
[09:02:00] <monochrom> "switching to EBCDIC mode"
[09:02:46] <monochrom> OK, base64 may be just forgiven and ignored.
[09:03:31] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[09:04:33] <Axman6> looking at https://kb.vmware.com/s/article/1018414 it might actually be a perl script
[09:07:05] <monochrom> ooohhhh now I wonder what shellcheck would complain about a perl script >:)
[09:07:25] <jackdk> Axman6: I find that bash is more predictable if you imagine a rushed C programmer wrote the interpreter. The same is true for Python
[09:09:41] <abastro[m]> When I somehow unironically like C :<
[09:10:29] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:11:05] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[09:14:04] *** Joins: rvbcldud (~rvbcldud@2601:602:87f:4220:c526:c452:c7e1:199e)
[09:14:14] <Axman6> C is mostly fine for what it is and the time it comes from
[09:15:51] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[09:17:01] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[09:17:06] <abastro[m]> Yea, I mean for low-level / embedded dev
[09:17:19] <abastro[m]> Granted, it might be due to my lack of affinity with rust.
[09:17:28] *** Quits: dsrt^ (~dsrt@96-67-120-105-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[09:17:40] <Axman6> If I did have to do that sort of work these days though, I would probably use it as an excuse to learn rust
[09:17:43] *** Quits: vglfr (~vglfr@88.155.118.203) (Ping timeout: 260 seconds)
[09:18:50] *** Joins: jack-fs (~textual@125-209-162-166.tpgi.com.au)
[09:19:14] <Axman6> So stackoverflow gave me access to review queues... and they put in tests to make sure you're up to the task; like showing posts which are spam and making sure you flag them, but also posts from communities you're familliar with which have been already accepted as good, to make sure you also keep the good stuff. it's a kinda cool system
[09:20:29] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[09:21:06] <abastro[m]> I wonder how mainstream rust would have become in embedded/driver dev space
[09:21:30] <abastro[m]> I mean, how is rust fairing now there?
[09:23:05] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:16b7:58d0:d6fd:f99c)
[09:23:51] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Remote host closed the connection)
[09:24:16] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[09:25:44] *** Quits: jack-fs (~textual@125-209-162-166.tpgi.com.au) (Ping timeout: 272 seconds)
[09:26:13] *** Joins: mbuf (~Shakthi@223.178.127.254)
[09:32:39] *** Joins: monochrom (trebla@216.138.220.146)
[09:33:06] <Axman6> Aren't they allowing Rust in the linux kernel these days?
[09:35:15] <abastro[m]> Did they? How?
[09:36:03] <Axman6> https://security.googleblog.com/2021/04/rust-in-linux-kernel.html looks like it would give some good answers tot hat
[09:36:42] *** Quits: quintasan (~quassel@quintasan.pl) ()
[09:37:15] *** Joins: quintasan (~quassel@quintasan.pl)
[09:37:39] <abastro[m]> Oh, so rust got actually afloat
[09:37:51] <abastro[m]> I envy them a bit
[09:37:58] <Axman6> well, it's been in Firefox for years now
[09:38:06] <Axman6> it'as not exactly a toy language these days
[09:38:50] <abastro[m]> Eek, that implies haskell is toy language :<
[09:39:13] <Axman6> why?
[09:39:26] <Axman6> It's being used in lots of places commercially
[09:39:45] <abastro[m]> Haskell is comparably less popular than rust, you know
[09:39:54] <abastro[m]> So if rust is not exactly a toy language.. haskell is..
[09:39:54] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:40:04] <Axman6> If you've used Facebook in the past few years your posts were filtered through the Haskell based spam filtering system there
[09:42:14] <abastro[m]> <del>Yea but I do not use facebook so apparently that does not count</del>
[09:42:54] <abastro[m]> Btw, does facebook employ haskell/FP programmers then?
[09:46:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:46:51] <Axman6> yes, some of the best. dons is one of them
[09:46:59] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[09:47:37] *** Quits: deadmarshal_ (~deadmarsh@95.38.112.219) (Ping timeout: 240 seconds)
[09:48:00] <jackdk> abastro[m]: I don't have anything against C or C programmers. But imagining how a C programmer would've implemented something is often a great way to predict its behaviour
[09:49:03] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[09:49:12] <abastro[m]> Yea, I agree, it is hard
[09:49:54] <Axman6> Aww geez, more strings? better do the most confusing thing for the user I can think of...
[09:50:54] *** Quits: Me-me (~me-me@user/me-me) (Quit: Disconnecting on purpose.)
[09:50:56] <abastro[m]> Hm on a different note, FunctionalDependencies did not make it to GHC2021 it seems
[09:51:33] <Axman6> probably they're not clearly a better choice than associated type families or something
[09:52:59] *** Joins: Me-me (~me-me@tunnel690570-pt.tunnel.tserv12.mia1.ipv6.he.net)
[09:54:15] <abastro[m]> Associated type families?
[09:54:29] *** Quits: Me-me (~me-me@tunnel690570-pt.tunnel.tserv12.mia1.ipv6.he.net) (Changing host)
[09:54:29] *** Joins: Me-me (~me-me@user/me-me)
[09:59:42] *** Joins: deadmarshal_ (~deadmarsh@95.38.112.219)
[10:00:29] <Axman6> class Request a where type family Response a :: Type; send :: a -> IO (Response a); instance Request GetObject where type instance Responce GetObject = GetObjectResponse; send :: GetObject -> IO (Response GetObject) -- a.k.a send :: GetObject -> IO GetObjectResponse
[10:00:46] <Axman6> stealing an example from jackdk from a day or so ago
[10:03:13] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[10:03:30] <abastro[m]> Oh, the one using type families?
[10:03:41] <abastro[m]> IIRC type families are also not in GHC2021
[10:04:36] <Axman6> right, they're mostly equivalent to fundeps, so choosing which should be enabled by default makes sense; and IMO it's the sort of extension I would want to know is being used in a file by having a LANGUAGE  pragma
[10:06:01] <jackdk> I don't think you can do bidirectional inference through an associated TF?
[10:06:14] <jackdk> whereas you can do `class C a b | a -> b, b -> a`
[10:07:08] <abastro[m]> I see, good rationale
[10:08:45] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[10:10:05] *** Quits: benin (~benin@183.82.207.30) (Quit: The Lounge - https://thelounge.chat)
[10:10:15] *** Quits: amino_ (~amino@94.13.111.159) (Ping timeout: 256 seconds)
[10:11:20] *** Joins: bahamas (~lucian@84.232.140.158)
[10:11:37] <Axman6> yeah they're not completely equivalent
[10:13:14] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[10:13:45] *** Joins: benin (~benin@183.82.207.30)
[10:15:48] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[10:16:09] *** Quits: _xor (~xor@74.215.232.169) (Quit: WeeChat 3.4)
[10:22:27] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[10:28:25] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[10:31:09] *** Joins: inversed (~inversed@94.13.111.159)
[10:35:10] *** Joins: Akiva (~Akiva@user/Akiva)
[10:38:32] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[10:38:41] *** Joins: vysn (~vysn@user/vysn)
[10:49:08] *** Joins: pnotequalnp (~pnotequal@207-118-121-128.dyn.centurytel.net)
[10:53:46] *** Joins: leungbk` (~user@2603-8000-1201-2dd2-1c2f-c4f4-0d21-a4ac.res6.spectrum.com)
[10:55:17] *** Quits: Hash (~Hash@hey.howstoned.ru) (Ping timeout: 240 seconds)
[10:56:12] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 240 seconds)
[10:58:28] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[11:03:44] *** Joins: Pickchea (~private@user/pickchea)
[11:04:09] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[11:04:11] <abastro[m]> I just found the moment where I thought my algorithm was wrong
[11:04:31] <abastro[m]> But actually it was typo in input
[11:12:31] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 260 seconds)
[11:12:50] <abastro[m]> I wonder if this code is standard haskell enough:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/497e661378c1c8fecaea658f6eab322cb7aec18f)
[11:12:59] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[11:16:46] *** Quits: tadyshev (uid547048@id-547048.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:19:37] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:20:35] *** Joins: acidjnk (~acidjnk@p200300d0c7049f7644ba050f51358f71.dip0.t-ipconnect.de)
[11:21:10] <Axman6> this feels like that brackets problem from a few days ago, but using a queue instead of a stack
[11:21:48] *** Joins: karim (~karim@156.200.223.2)
[11:22:16] <Axman6> it looks fine as far as it is Haskell, but I am struggling a lot with what it actually does
[11:23:21] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 256 seconds)
[11:23:59] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[11:27:03] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[11:29:14] *** Joins: Hash (~Hash@hey.howstoned.ru)
[11:31:53] <abastro[m]> Yep, brackets problem
[11:32:05] <abastro[m]> Hmm, perhaps I am bad at writing readable code.. :<
[11:32:34] <Axman6> if it's for matching pairs of brackets, then you probably want a stack/list no?
[11:32:54] <Axman6> I don't really understand why k is there though, so I probably don't understand the problem at all
[11:33:44] <abastro[m]> Oh, I see.
[11:34:08] <abastro[m]> It is to exhaustively consume a list into (n, n+k) pairs
[11:34:39] <abastro[m]> So, for k = 5 and [1,3,4,6,6,8,9,11], it gives [(1,6),(3,8),(4,9),(6,11)]
[11:35:49] <rvbcldud> Hello! I have a function that inserts an element into a list that does not work how I want it to. Currently it can start at an a singleton, go to a Tree with 3 elements, but after this I want to alternate which side I want to add to.
[11:36:05] <rvbcldud> treeInsert _ x (Node num left elem right)
[11:36:06] <rvbcldud>     | left == Leaf = Node num (Node (num-1) Leaf x Leaf) elem right
[11:36:08] <rvbcldud>     | right == Leaf = Node num left elem (Node (num-1) Leaf x Leaf)
[11:36:10] <rvbcldud>     | otherwise = Node num newLeft elem right
[11:36:12] <rvbcldud>     where newLeft = treeInsert 0 x left
[11:36:14] <rvbcldud>           newRight = treeInsert 0 x right
[11:36:16] <rvbcldud> This is my current function
[11:36:18] <abastro[m]> (Guess I have to delay my explanation)
[11:36:23] <rvbcldud> Sorry!
[11:36:25] <Axman6> @where paste
[11:36:25] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[11:36:26] <abastro[m]> (I mean on my problem)
[11:36:40] *** Quits: zaquest (~notzaques@5.130.79.72) (Quit: Leaving)
[11:36:45] <abastro[m]> Sorry for confusion, I was describing my algorithm when you came in.
[11:37:19] <rvbcldud> https://paste.tomsmeding.com/blIuVvbM
[11:37:20] <abastro[m]> I meant to say, I'll explain my algorithm later. What was your problem, rvbcldud? As suggested above, could you make a paste?
[11:37:33] <abastro[m]> (Oops, bridge delay)
[11:38:19] *** Joins: zaquest (~notzaques@5.130.79.72)
[11:38:40] <abastro[m]> You want a criteria to decide which side you'd add the element to, I think.
[11:38:43] *** Joins: vglfr (~vglfr@88.155.118.203)
[11:38:45] <rvbcldud> Basically, after it sees that both the right and left are not Leaves ... I want it to add the element to the right and left, alternating
[11:38:50] <rvbcldud> Basically
[11:39:18] <Axman6> is it possible to do this from the bottom up?
[11:39:19] <rvbcldud> Perhaps that is not the best explanation or implementation of what I want to accomplish, but I hope you get what I am saying
[11:39:24] <Axman6> rather than top down?
[11:39:42] <abastro[m]> What is "alternating" here? So you insert into the tree many times?
[11:39:50] <rvbcldud> I am sure, what would you do?
[11:40:20] <Axman6> given treeInsert 0 [1,2,3,4,5], what should we get back?
[11:41:07] <rvbcldud> I apologize, I did not include my type signature
[11:41:29] <Axman6> uh yeah, that's definitely not the right way to call that
[11:41:33] *** Joins: pottsy (~pottsy@2400:4050:b560:3700:95a9:bb69:4209:aa9b)
[11:41:49] <rvbcldud> treeInsert takes an Integer, which we don't have to worry about right now, the element we want to add, and the current list
[11:42:15] <Axman6> list? not tree?
[11:42:37] <rvbcldud> So I would call something like: treeInsert 0 "B" (Node 1 Leaf "A" Leaf)
[11:42:40] <rvbcldud> Tree, my bad
[11:43:19] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 260 seconds)
[11:43:43] *** Joins: mmhat (~mmh@55d4e56a.access.ecotel.net)
[11:43:57] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:4b28:938b:c022:9725)
[11:43:59] <rvbcldud> Does that make sense? The output would be (Node 1 (Node 0 Leaf "B" Leaf) "A" Leaf)
[11:44:30] <Axman6> sure - what should happen if you insert "C" into that result?
[11:45:00] <rvbcldud> We would then have (Node 1 (Node 0 Leaf "B" Leaf) "A" (Node 0 Leaf "C" Leaf) 
[11:45:14] <Axman6> and then "D"?
[11:45:16] <rvbcldud> But NOW I want to add "D" to the left of B
[11:45:22] <abastro[m]> Oh, so you want some kind of balance?
[11:45:26] <rvbcldud> Exactly
[11:45:39] <Axman6> and "E" would go to the right of "B"?
[11:45:54] <Axman6> or somewhere right of "A"?
[11:46:05] <rvbcldud> I would probably want to put it to the left or right of "c"
[11:46:39] <Axman6> this feels a lot like a finger tree
[11:46:50] <Axman6> which Data.Sequence is built on
[11:47:06] <abastro[m]> Do you have a specific kind of balance you need? Like https://en.wikipedia.org/wiki/AVL_tree or something
[11:47:13] <abastro[m]> Oh wait. Finger tree?
[11:48:13] <rvbcldud> I don't need a specific balance, I just want balance ... preferably one that isn't too difficult to understand
[11:48:20] <Axman6> rvbcldud: if you stored the size of each side, then you could do this pretty easily
[11:48:21] <rvbcldud> I am learning haskell, after all
[11:48:57] <rvbcldud> like writing a function that calculates the height, given the side
[11:48:57] <Axman6> each Node stoores how many elements are in it and below it, and then you always inset into the side with the smaller size
[11:49:09] <Axman6> use a smart constructor to ensure those sizes are always kepy up to date
[11:49:12] <Axman6> kept*
[11:49:40] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:72bf:4d2e:4b07:eb6c)
[11:51:41] <Axman6> data Tree a = Node { size :: Int, num :: Int, left :: Tree a, elem :: a, right :: Tree a } | Leaf; node :: Int -> a -> Tree a -> Tree a -> Tree a; node n a l r = Node {size = 1 + s l + s r, num = n, left = l, elem = a, right = r} where s Leaf = 0; s Node{size} = size
[11:53:32] <Axman6> then to insert, you so something like: insert a (Node s n l e r) | if s l <= s r = node n a (insert a l) r (a lot missing here because I need to leave)
[11:54:38] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:55:50] *** Quits: mmhat (~mmh@55d4e56a.access.ecotel.net) (Ping timeout: 272 seconds)
[11:55:52] <rvbcldud> I think I figured out a similar implementation ... although yours is a bit tricky to read for me
[11:56:16] <rvbcldud> https://paste.tomsmeding.com/DMmBJMZQ
[12:02:47] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:06:35] <rvbcldud> Thanks for all your help guys!! It works
[12:07:40] *** Joins: neurocyte0917090 (~neurocyte@IP-094046076012.dynamic.medianet-world.de)
[12:07:41] *** Quits: neurocyte0917090 (~neurocyte@IP-094046076012.dynamic.medianet-world.de) (Changing host)
[12:07:41] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[12:08:19] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[12:12:08] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:13:26] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:13:41] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[12:14:08] *** Joins: ccntrq (~Thunderbi@2a01:c22:8401:2f00:927:6de8:e589:73f0)
[12:15:20] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::ffef)
[12:17:51] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[12:19:43] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:22:34] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[12:24:59] *** Joins: mikoto-chan (~mikoto-ch@84.199.144.235)
[12:28:14] *** Joins: cfricke (~cfricke@user/cfricke)
[12:30:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[12:32:39] *** Joins: july541[m] (~july541ma@2001:470:69fc:105::1:e416)
[12:33:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[12:34:24] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[12:36:27] *** Quits: pnotequalnp (~pnotequal@207-118-121-128.dyn.centurytel.net) (Ping timeout: 256 seconds)
[12:41:41] *** Joins: alp (~alp@user/alp)
[12:43:44] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[12:45:18] *** Joins: michalz (~michalz@185.246.204.61)
[12:45:33] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[12:46:08] *** Joins: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl)
[12:49:56] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 245 seconds)
[12:54:55] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::ffef) (Ping timeout: 256 seconds)
[12:55:17] *** Joins: fendor (~fendor@178.115.46.236.wireless.dyn.drei.com)
[12:57:22] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:01:59] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:02:15] *** Quits: ccntrq (~Thunderbi@2a01:c22:8401:2f00:927:6de8:e589:73f0) (Ping timeout: 252 seconds)
[13:02:33] *** Joins: ccntrq (~Thunderbi@2a01:c22:897f:4a00:b1c:1884:168b:a47f)
[13:06:22] *** Joins: mmhat (~mmh@55d4e56a.access.ecotel.net)
[13:08:37] *** Joins: jpds1 (~jpds@gateway/tor-sasl/jpds)
[13:08:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[13:12:10] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Read error: Connection reset by peer)
[13:12:18] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[13:14:09] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:18:31] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 260 seconds)
[13:18:48] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 272 seconds)
[13:18:59] *** Quits: acidjnk (~acidjnk@p200300d0c7049f7644ba050f51358f71.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[13:24:30] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 272 seconds)
[13:28:52] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:29:51] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[13:30:26] *** Quits: FernandoChu[m] (~ryunaqmat@2001:470:69fc:105::1:4dc0) (Quit: You have been kicked for being idle)
[13:30:26] *** Quits: MosheTeutsch[m] (~moteutsch@2001:470:69fc:105::1:c250) (Quit: You have been kicked for being idle)
[13:34:12] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[13:36:27] *** Joins: dcoutts__ (~duncan@host86-167-90-249.range86-167.btcentralplus.com)
[13:37:34] *** Quits: gardnan (~max@c-75-70-252-201.hsd1.co.comcast.net) (Quit: Lost terminal)
[13:38:57] *** Quits: dcoutts_ (~duncan@host86-167-90-249.range86-167.btcentralplus.com) (Ping timeout: 240 seconds)
[13:39:50] *** Joins: _xor (~xor@74.215.232.169)
[13:42:42] *** Joins: AlexZenon (~alzenon@178.34.150.116)
[13:42:54] *** Quits: hsw (~hsw@112-104-141-52.adsl.dynamic.seed.net.tw) (Remote host closed the connection)
[13:43:10] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[13:43:24] *** Joins: hsw (~hsw@2001-b030-2303-0104-0172-0025-0012-0132.hinet-ip6.hinet.net)
[13:44:39] *** Quits: hsw (~hsw@2001-b030-2303-0104-0172-0025-0012-0132.hinet-ip6.hinet.net) (Client Quit)
[13:44:51] *** Joins: hsw (~hsw@2001-b030-2303-0104-0172-0025-0012-0132.hinet-ip6.hinet.net)
[13:46:19] *** Quits: _xor (~xor@74.215.232.169) (Quit: brb)
[13:51:40] *** Quits: vglfr (~vglfr@88.155.118.203) (Read error: Connection reset by peer)
[13:51:53] *** Joins: acidjnk (~acidjnk@p200300d0c7049f76ad7ddf43206a2c16.dip0.t-ipconnect.de)
[13:52:52] *** Joins: vglfr (~vglfr@88.155.118.203)
[13:53:31] *** Quits: karim (~karim@156.200.223.2) (Ping timeout: 260 seconds)
[13:53:46] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:59:32] *** Joins: Alex_test (~al_test@178.34.150.116)
[13:59:43] *** Joins: AlexNoo (~AlexNoo@178.34.150.116)
[14:01:14] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Quit: Leaving)
[14:04:47] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[14:07:46] <siers> is it possible to write code that would make a list that would contain all the cases of an ADT and verify this at compile time? you can check that all inputs of an ADT are handled, but I assume not this
[14:10:10] <merijn> siers: What is the use case, exactly?
[14:11:58] <siers> merijn, I want the compiler to remind me to write tests about each case for code that handles that data structure 
[14:12:25] <merijn> -Wall warns about missed cases already?
[14:16:19] <lortabac> siers: what do you want to do with all the constructors? just print them?
[14:19:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[14:20:07] *** Quits: vglfr (~vglfr@88.155.118.203) (Read error: Connection reset by peer)
[14:20:19] *** Joins: vglfr (~vglfr@88.155.118.203)
[14:21:23] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:25:29] *** Joins: toulene9 (~toulene@user/toulene)
[14:25:49] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 240 seconds)
[14:25:49] *** toulene9 is now known as toulene
[14:29:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:31:00] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 272 seconds)
[14:41:18] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:6d76:5070:aa75:b09)
[14:42:51] *** Quits: haskl (~haskl@user/haskl) (Ping timeout: 245 seconds)
[14:43:26] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[14:45:48] *** Quits: vglfr (~vglfr@88.155.118.203) (Read error: Connection reset by peer)
[14:45:55] *** Joins: vglfr (~vglfr@88.155.118.203)
[14:46:48] *** Joins: notzmv (~zmv@user/notzmv)
[14:49:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[14:49:20] *** Quits: vglfr (~vglfr@88.155.118.203) (Read error: Connection reset by peer)
[14:49:34] *** Joins: vglfr (~vglfr@88.155.118.203)
[14:51:07] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:53:18] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[14:53:37] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[14:59:48] *** Quits: vglfr (~vglfr@88.155.118.203) (Read error: Connection reset by peer)
[14:59:57] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:00:00] *** Joins: vglfr (~vglfr@88.155.118.203)
[15:00:30] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[15:02:13] *** Quits: vglfr (~vglfr@88.155.118.203) (Read error: Connection reset by peer)
[15:02:44] *** Joins: vglfr (~vglfr@88.155.118.203)
[15:03:23] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Quit: Konversation terminated!)
[15:05:11] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:05:46] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:06:12] *** Joins: haskl (~haskl@user/haskl)
[15:07:55] *** Quits: mmhat (~mmh@55d4e56a.access.ecotel.net) (Quit: WeeChat 3.4.1)
[15:09:13] <maerwald> don't worry, technically the compiler fills out missed cases for you :D
[15:09:49] <maerwald> hey, I wonder if you could hook wingman into GHC such that it tries to fill out those instead of throwing error
[15:10:04] *** Quits: vglfr (~vglfr@88.155.118.203) (Read error: Connection reset by peer)
[15:10:16] *** Joins: vglfr (~vglfr@88.155.118.203)
[15:12:17] *** Quits: vglfr (~vglfr@88.155.118.203) (Read error: Connection reset by peer)
[15:12:48] *** Joins: vglfr (~vglfr@88.155.118.203)
[15:15:04] <dminuoso> Haha
[15:15:37] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[15:15:50] <dminuoso> Who wouldn't want their compiler to provide a guessed implementation for missing code paths.
[15:16:31] <kuribas> What was the limitation again with higher kinded types?  That type families have to be fully applied?
[15:16:37] <maerwald> dminuoso: a truly lazy language
[15:17:06] <dminuoso> maerwald: Why not rig GPT3 into the runtime, and all you do is just write a README.md?
[15:17:23] *** Quits: vglfr (~vglfr@88.155.118.203) (Ping timeout: 256 seconds)
[15:17:33] <dminuoso> This is where we are headed already.
[15:17:42] <tomsmeding> not into the runtime, hopefully
[15:17:56] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:17:57] <kuribas> Does that include data families?
[15:18:02] <[exa]> tomsmeding: adds situational awareness
[15:18:30] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 272 seconds)
[15:18:32] <kuribas> like MyHKD f = MyHKD {field1 :: f Int, field2 :: f Double}
[15:19:27] <kuribas> f cannot be a type family?
[15:19:52] <tomsmeding> f cannot be a type family that does case analysis on its argument
[15:20:04] <maerwald> dminuoso: does it mean I won't have to code anymore?
[15:20:23] <tomsmeding> like, you could have `type family F a where F a = a` and then `MyHKD (F Maybe)`
[15:20:30] <kuribas> tomsmeding: so that excludes a data family?
[15:20:47] <tomsmeding> because then F is fully applied, even though it resolves to something of kind * -> *
[15:20:56] <tomsmeding> I guess so
[15:20:58] <romesrf> program synthesis is a real thing :) it does just the kind of thing you mentioined
[15:21:24] <kuribas> tomsmeding: now I wrap it with a newtype, and that works :)
[15:21:29] <tomsmeding> precisely :)
[15:21:31] <maerwald> alright, I'll look for another job then
[15:21:33] <tomsmeding> that's the fix usually
[15:21:37] <dminuoso> maerwald: To be fair, this already exists. It's called management position. :p
[15:22:07] <tomsmeding> it will be many years until I attain a management position
[15:22:18] <dminuoso> If you want it at all.
[15:22:25] <tomsmeding> many could be >100
[15:22:29] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 256 seconds)
[15:22:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[15:22:43] <maerwald> so Haskell is dying after all!
[15:25:03] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[15:26:03] <abastro[m]> Whhh
[15:26:36] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[15:26:39] <maerwald> an AI will be doing our work and this channel will be occupied by managers instead
[15:28:02] <abastro[m]> Indeed
[15:29:05] <dminuoso> Heck, if we have plugged GPT into writing code, we might as well go all the way and have just a bunch of GPT3 bots talk to each other here in IRC.
[15:29:11] <maerwald> maybe we need to destroy all AI technology to save Haskell
[15:29:13] <dminuoso> No need to converse either.
[15:29:42] <dminuoso> We already have the occasional markov chain bot :)
[15:31:19] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[15:32:26] <jackdk> dminuoso: Why is it you say that We already have the occasional markov chain bot :)?
[15:33:24] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:36:40] *** Joins: razetime (~quassel@117.193.6.156)
[15:37:21] *** Quits: chenqisu1 (~chenqisu1@183.217.201.88) (Quit: Leaving)
[15:37:25] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[15:39:56] <abastro[m]> I mean
[15:40:07] <abastro[m]> AI would not only threaten haskell
[15:40:22] <abastro[m]> It would threaten most fields of study!
[15:40:41] <abastro[m]> Clearly, only looks would matter afterwards
[15:42:40] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:42:47] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[15:43:33] *** Quits: In0perable (~PLAYER_1@fancydata.science) (Quit: All your buffer are belong to us!)
[15:44:18] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:50:23] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[15:58:12] <romesrf> dminuoso: that's a funny idea for an IRC channel. Imagine the conversations
[15:59:23] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[15:59:29] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:59:36] <kuribas> I don't think AI will threaten anything.  Except democracy, through facebook...
[15:59:37] <geekosaur> M-x psychoanalyze-pinhead
[15:59:51] <Franciman> M-x cure-rsi
[16:00:00] <Franciman> too futuristic?
[16:02:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[16:03:21] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.4.1)
[16:03:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:09:57] <abastro[m]> I thought we were talking satiristically
[16:10:07] <abastro[m]> Satirically*
[16:11:35] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:6d76:5070:aa75:b09) (Quit: WeeChat 3.4)
[16:13:41] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 245 seconds)
[16:14:18] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:14:48] <dminuoso> jackdk: Recall fog?
[16:15:54] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:17:47] *** Joins: Midjak (~Midjak@82.66.147.146)
[16:18:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[16:20:16] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:21:34] *** Quits: acidjnk (~acidjnk@p200300d0c7049f76ad7ddf43206a2c16.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:24:05] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::ffef)
[16:24:13] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[16:24:31] *** Quits: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl) (Ping timeout: 245 seconds)
[16:24:49] *** Quits: alp (~alp@user/alp) (Ping timeout: 256 seconds)
[16:27:38] *** Joins: Pickchea (~private@user/pickchea)
[16:29:13] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[16:30:12] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:16b7:58d0:d6fd:f99c) (Ping timeout: 240 seconds)
[16:33:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[16:33:52] <siers> merijn, Wall warns about code that is not added, but not about tests, because the test is dependent on the values which, if a new case is added, won't show a warning, because the types would be satisfied
[16:35:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:37:46] *** Joins: boxscape_ (~boxscape_@vpn-44-78.hq.eso.org)
[16:37:57] <lortabac> siers: can you give an example? I don't understand what you mean
[16:39:11] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[16:39:19] <siers> "data X = A | B; f A = 1; f B = 2". if you add "| C" to X later, you'll be reminded by the compiler to update f, but not reminded to add a C case in tests
[16:39:19] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:39:54] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[16:41:08] <lortabac> siers: what's the difference between tests and the rest?
[16:41:24] <abastro[m]> Which tests?
[16:41:32] <lortabac> maybe they don't do pattern-matching?
[16:41:37] <abastro[m]> The test project?
[16:41:47] <siers> unit tests
[16:41:58] <siers> the test code would be "f A `assert` 1; f B `assert` 2".
[16:42:09] *** Joins: vglfr (~vglfr@46.96.167.246)
[16:42:17] <abastro[m]> (I mean, yourproject:test or something)
[16:42:22] <lortabac> maybe you forgot to enable -Wall in the tests
[16:42:45] <siers> what would the test code look like? if the tests look like I wrote, Wall won't help
[16:42:57] <siers> am I completely off base?
[16:43:09] <lortabac> oh sorry I misread your tests :D
[16:43:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[16:43:18] <lortabac> now I understand
[16:43:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[16:43:55] <siers> suppose you had a list of [(X, Int)] for test cases – I would like to know that the Xs had all possible values exactly
[16:43:59] <abastro[m]> Oh, ya that is not pattern matching
[16:44:06] <abastro[m]> If you are just testing concrete cases
[16:44:08] <siers> I am here to be told "no can do"
[16:44:17] <lortabac> siers: it's doable
[16:44:22] <abastro[m]> Perhaps assert is not a good way to test that
[16:44:23] <siers> template haskell?
[16:44:39] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[16:44:39] <lortabac> in fact we have a similar problem in my team
[16:44:39] <siers> abastro[m], tests are literally all asserts
[16:44:42] <abastro[m]> Though `f` is possibly too simple to test imho
[16:44:57] <lortabac> and the solution is simply that these cases must be checked during code reviews
[16:45:28] <siers> lortabac, haha, yeah, that's a soft solution. I am just checking that there is no obvious way to get the compiler to tell you
[16:45:48] <lortabac> you can use Data.Data
[16:45:50] *** Joins: vysn (~vysn@user/vysn)
[16:45:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[16:46:20] <lortabac> find the number of constructors with Data.Data and compare with the number of unique constructors in the tests
[16:46:38] <abastro[m]> Oh, I thought those tests are like equivalent to..
[16:47:00] *** Joins: acidjnk (~acidjnk@p200300d0c7049f76ad7ddf43206a2c16.dip0.t-ipconnect.de)
[16:47:03] <siers> lortabac, I guess that is the solution, yeah
[16:47:14] <abastro[m]> g A = fA
[16:47:14] <abastro[m]> g B = fB
[16:47:14] <abastro[m]> g C = fC
[16:47:14] <abastro[m]> And tests that f == g
[16:47:23] <siers> that is kind of what I was thinking was the only way
[16:47:56] <abastro[m]> Uhm tests are asserts? Oh wait it is.. duh me
[16:48:01] <lortabac> there is a function called 'dataTypeConstrs', it should do the job
[16:48:04] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[16:48:43] <abastro[m]> Right, if the ADT is complex, approach of defining g and testing against it might not work
[16:48:58] <siers> lortabac, nice
[16:49:56] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Client Quit)
[16:51:28] <lortabac> however the solution proposed by abastro[m] is simpler
[16:51:29] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[16:51:48] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[16:51:48] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[16:51:52] *** allbery_b is now known as geekosaur
[16:51:56] <siers> complex meaning nested?
[16:52:09] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:52:15] <lortabac> erm no, you still need to verify that all constructors are fed to 'g'
[16:52:27] <lortabac> so you are back to square 1
[16:52:59] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[16:54:26] <abastro[m]> I mean, g is pattern matching function.
[16:54:34] <abastro[m]> So it is subjected to exhaustiveness checker
[16:54:46] <abastro[m]> Problem is, ofc, when you dislike having a function g
[16:55:02] <lortabac> yes, but if you want to test all the cases you need to do 'g A', 'g B', 'g C'
[16:55:13] <lortabac> and the compiler doesn't check that
[16:55:44] <siers> you write map assert listTestCases and that's kind of taken care of, because it don't need changing the next time something's added to the ADT and you just check that the list of test cases is long enough
[16:55:51] *** Quits: vglfr (~vglfr@46.96.167.246) (Read error: Connection reset by peer)
[16:56:03] *** Joins: vglfr (~vglfr@46.96.167.246)
[16:56:27] <lortabac> yeah, so at some point you need some trick like the one with Data.Data
[16:57:15] <lortabac> otherwise you can't check that listTestCases contains all the constructors
[16:57:46] <siers> yes, that's the puzzle piece I was wondering about, so my inquiry is resolved
[16:58:19] <jackdk> dminuoso: I think so, but mostly I was LARPing the chatty doctor program I had in my emacs once
[16:59:09] *** Joins: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:00:10] <abastro[m]> I guess I need to learn more about testing
[17:04:20] *** Joins: mmhat (~mmh@55d4e56a.access.ecotel.net)
[17:04:50] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[17:07:07] *** Quits: mmhat (~mmh@55d4e56a.access.ecotel.net) (Client Quit)
[17:08:37] *** Joins: mmhat (~mmh@55d4e56a.access.ecotel.net)
[17:12:37] *** Quits: vglfr (~vglfr@46.96.167.246) (Read error: Connection reset by peer)
[17:12:48] *** Joins: vglfr (~vglfr@46.96.167.246)
[17:13:00] *** Quits: dispater (~dispater@user/brprice) (Ping timeout: 240 seconds)
[17:13:00] *** Quits: orcus (~orcus@user/brprice) (Ping timeout: 240 seconds)
[17:13:02] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Remote host closed the connection)
[17:14:12] *** Joins: dispater (~dispater@user/brprice)
[17:14:44] *** Joins: orcus (~orcus@user/brprice)
[17:15:10] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[17:15:10] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[17:15:10] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[17:16:32] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 260 seconds)
[17:18:26] *** Joins: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl)
[17:18:42] *** Joins: jakalx (~jakalx@base.jakalx.net)
[17:19:49] *** Quits: vglfr (~vglfr@46.96.167.246) (Read error: Connection reset by peer)
[17:20:24] *** Joins: vglfr (~vglfr@46.96.167.246)
[17:20:43] *** Quits: belphegor666 (~satan@user/belphegor666) (Ping timeout: 260 seconds)
[17:20:58] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[17:25:11] *** Quits: vglfr (~vglfr@46.96.167.246) (Read error: Connection reset by peer)
[17:25:20] *** Joins: vglfr (~vglfr@46.96.167.246)
[17:27:30] *** Quits: vglfr (~vglfr@46.96.167.246) (Read error: Connection reset by peer)
[17:27:42] *** Joins: vglfr (~vglfr@46.96.167.246)
[17:32:47] *** Quits: vglfr (~vglfr@46.96.167.246) (Read error: Connection reset by peer)
[17:33:09] *** Joins: vglfr (~vglfr@46.96.167.246)
[17:34:18] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[17:34:40] *** Quits: deadmarshal_ (~deadmarsh@95.38.112.219) (Ping timeout: 272 seconds)
[17:35:39] *** Quits: acidjnk (~acidjnk@p200300d0c7049f76ad7ddf43206a2c16.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[17:36:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:37:27] *** Quits: ystael (~ystael@user/ystael) (Quit: Lost terminal)
[17:37:31] *** Quits: vglfr (~vglfr@46.96.167.246) (Ping timeout: 260 seconds)
[17:38:05] *** Joins: vglfr (~vglfr@46.96.132.108)
[17:38:05] *** Joins: __monty__ (~toonn@user/toonn)
[17:38:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:40:08] *** Joins: boxscape_25 (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[17:40:34] *** Quits: vglfr (~vglfr@46.96.132.108) (Read error: Connection reset by peer)
[17:40:46] *** Joins: vglfr (~vglfr@46.96.132.108)
[17:41:43] *** Quits: boxscape_ (~boxscape_@vpn-44-78.hq.eso.org) (Ping timeout: 260 seconds)
[17:43:07] *** Quits: __monty__ (~toonn@user/toonn) (Ping timeout: 260 seconds)
[17:44:03] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[17:45:47] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:45:59] *** Joins: vysn (~vysn@user/vysn)
[17:46:21] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[17:47:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:49:16] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:49:21] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 252 seconds)
[17:55:43] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 260 seconds)
[18:00:07] *** Joins: alp (~alp@user/alp)
[18:02:31] *** Quits: pottsy (~pottsy@2400:4050:b560:3700:95a9:bb69:4209:aa9b) (Remote host closed the connection)
[18:04:35] *** Joins: pottsy (~pottsy@2400:4050:b560:3700:95a9:bb69:4209:aa9b)
[18:05:49] *** Joins: deadmarshal_ (~deadmarsh@95.38.112.219)
[18:10:03] *** Quits: deadmarshal_ (~deadmarsh@95.38.112.219) (Ping timeout: 250 seconds)
[18:18:58] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[18:19:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:19:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:19:31] *** Joins: wroathe (~wroathe@user/wroathe)
[18:23:15] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[18:24:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:25:14] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[18:30:35] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[18:31:46] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::ffef) (Quit: WeeChat 3.4)
[18:33:55] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[18:35:02] *** Quits: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl) (Ping timeout: 260 seconds)
[18:37:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:46:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:49:44] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[18:51:43] *** Quits: mikoto-chan (~mikoto-ch@84.199.144.235) (Ping timeout: 260 seconds)
[18:52:29] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 256 seconds)
[18:54:17] *** Joins: vysn (~vysn@user/vysn)
[18:55:06] *** Quits: benin (~benin@183.82.207.30) (Quit: Ping timeout (120 seconds))
[18:57:34] *** Joins: dextaa_ (~dextaa@user/dextaa)
[19:00:07] *** Joins: benin (~benin@183.82.207.30)
[19:03:54] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[19:03:54] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[19:03:57] *** allbery_b is now known as geekosaur
[19:04:53] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:10:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[19:10:53] *** Joins: nicbk (~nicbk@user/nicbk)
[19:12:13] *** Quits: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:17:51] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[19:19:52] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Quit: Connection closed)
[19:20:11] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:20:11] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:20:11] *** Joins: wroathe (~wroathe@user/wroathe)
[19:20:16] *** Joins: rkrishnan (~user@2402:e280:215c:2cd:4a3a:c3a9:68b9:db9a)
[19:20:20] *** Quits: Digit (~user@user/digit) (Read error: Connection reset by peer)
[19:20:26] *** Joins: acidjnk (~acidjnk@p200300d0c7049f76ad7ddf43206a2c16.dip0.t-ipconnect.de)
[19:26:24] *** Quits: benin (~benin@183.82.207.30) (Quit: Ping timeout (120 seconds))
[19:29:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:31:17] *** Joins: benin (~benin@183.82.207.30)
[19:41:55] *** Quits: jpds1 (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[19:42:48] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[19:43:22] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:966d:f1e8:4bae:826f)
[19:44:03] *** Quits: benin (~benin@183.82.207.30) (Quit: Ping timeout (120 seconds))
[19:44:22] *** Joins: benin (~benin@183.82.207.30)
[19:44:53] *** Joins: jpds1 (~jpds@gateway/tor-sasl/jpds)
[19:45:05] *** Joins: __monty__ (~toonn@user/toonn)
[19:46:28] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:46:53] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[19:50:40] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:51:41] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[19:56:13] *** Joins: bahamas (~lucian@84.232.140.158)
[19:56:45] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[19:57:26] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:966d:f1e8:4bae:826f) (Ping timeout: 245 seconds)
[19:58:38] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[19:58:41] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:4042:4584:26e0:bc36)
[20:01:15] *** Joins: xkuru (~xkuru@user/xkuru)
[20:03:07] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 260 seconds)
[20:03:51] *** Joins: cfricke (~cfricke@user/cfricke)
[20:04:44] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[20:04:57] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[20:06:38] *** jpds1 is now known as jpds
[20:11:55] *** Joins: Pickchea (~private@user/pickchea)
[20:14:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:16:51] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[20:18:16] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[20:18:17] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:4b28:938b:c022:9725) (Quit: WeeChat 2.8)
[20:19:22] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:21:15] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[20:23:24] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[20:24:51] *** Joins: nicbk (~nicbk@user/nicbk)
[20:30:46] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 245 seconds)
[20:33:20] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[20:34:06] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:34:46] *** Joins: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de)
[20:34:55] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[20:35:48] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 272 seconds)
[20:38:20] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:38:54] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Quit: Quitting IRC :()
[20:38:55] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[20:39:12] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[20:40:09] *** Quits: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:40:42] *** Quits: razetime (~quassel@117.193.6.156) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:42:07] *** Joins: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de)
[20:42:49] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[20:44:02] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[20:44:58] *** Joins: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl)
[20:46:20] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[20:52:05] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:52:50] *** Joins: Digit (~user@user/digit)
[20:53:41] *** Quits: pottsy (~pottsy@2400:4050:b560:3700:95a9:bb69:4209:aa9b) (Ping timeout: 265 seconds)
[20:54:45] *** Joins: maroloccio (~marolocci@pousada3ja.mma.com.br)
[20:56:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[20:58:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:59:05] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[20:59:49] *** Quits: acidjnk (~acidjnk@p200300d0c7049f76ad7ddf43206a2c16.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:59:52] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[21:00:17] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[21:01:39] *** Quits: michalz (~michalz@185.246.204.61) (Read error: No route to host)
[21:03:18] *** Joins: alp_ (~alp@user/alp)
[21:03:43] *** Joins: michalz (~michalz@185.246.204.109)
[21:03:56] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[21:04:11] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[21:04:26] *** Joins: bahamas (~lucian@84.232.140.158)
[21:05:49] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[21:06:01] *** Quits: ccntrq (~Thunderbi@2a01:c22:897f:4a00:b1c:1884:168b:a47f) (Remote host closed the connection)
[21:06:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[21:07:26] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:08:44] *** Joins: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net)
[21:12:11] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[21:15:02] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[21:15:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:15:35] *** Joins: jtm (~jtm@user/jtm)
[21:16:21] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[21:16:57] *** Quits: rkrishnan (~user@2402:e280:215c:2cd:4a3a:c3a9:68b9:db9a) (Ping timeout: 240 seconds)
[21:17:04] *** Joins: alp (~alp@user/alp)
[21:18:29] *** Joins: benin0 (~benin@183.82.207.30)
[21:19:11] *** Quits: alp_ (~alp@user/alp) (Ping timeout: 260 seconds)
[21:20:01] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[21:20:03] *** Quits: benin (~benin@183.82.207.30) (Ping timeout: 256 seconds)
[21:20:03] *** benin0 is now known as benin
[21:20:31] *** Quits: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de) (Changing host)
[21:20:31] *** Joins: belphegor666 (~satan@user/belphegor666)
[21:21:00] *** Joins: Guest94 (~Guest94@94.54.249.160)
[21:21:31] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.4.1)
[21:21:31] *** Joins: Guest9446 (~Guest94@94.54.249.160)
[21:22:03] *** Joins: Akiva (~Akiva@user/Akiva)
[21:22:28] *** Quits: Guest94 (~Guest94@94.54.249.160) (Client Quit)
[21:23:08] *** Parts: Guest9446 (~Guest94@94.54.249.160) ()
[21:23:14] *** Joins: Guest9446 (~Guest94@94.54.249.160)
[21:26:10] *** Quits: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[21:28:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:29:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:29:31] *** Joins: shiraeeshi (~shiraeesh@77.94.25.181)
[21:30:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[21:30:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:39:17] *** Quits: mbuf (~Shakthi@223.178.127.254) (Quit: Leaving)
[21:41:17] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[21:44:36] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[21:45:09] <cdsmith> Is there a way to get cabal to print the commands that it's running?  I'm trying to get a different build system to do things that I know how to do with cabal.
[21:46:54] <cdsmith> (Specifically, building an so file for a c++ library that uses foreign exports from Haskell)
[21:47:08] <maerwald> cabal -v3?
[21:47:35] <cdsmith> Ah, I should have just tried --verbose before asking.  That does it!
[21:48:37] *** Quits: raym (~raym@user/raym) (Read error: Connection reset by peer)
[21:49:21] *** Joins: raym (~raym@user/raym)
[21:49:31] *** Joins: erts (~erts@user/erts)
[21:52:58] *** Joins: fendor_ (~fendor@178.115.44.78.wireless.dyn.drei.com)
[21:54:20] *** boxscape_25 is now known as boxscape__
[21:55:21] *** Quits: fendor (~fendor@178.115.46.236.wireless.dyn.drei.com) (Ping timeout: 245 seconds)
[21:55:56] *** Joins: vglfr (~vglfr@46.96.132.108)
[21:58:15] *** Quits: Guest9446 (~Guest94@94.54.249.160) (Quit: Client closed)
[21:58:32] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[21:59:17] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[21:59:41] *** Joins: Benzi-Junior (~BenziJuni@dsl-149-64-179.hive.is)
[22:04:31] *** Joins: Pickchea (~private@user/pickchea)
[22:04:51] *** Joins: econo (uid147250@user/econo)
[22:11:58] *** Joins: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net)
[22:14:27] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[22:15:14] <Putonlalla> How do you open issues or submit pull requests for this package? It doesn't have a `pngcairo` terminal and the author has made it impossible to add new instances. https://hackage.haskell.org/package/gnuplot
[22:17:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[22:17:28] *** Quits: fendor_ (~fendor@178.115.44.78.wireless.dyn.drei.com) (Remote host closed the connection)
[22:19:19] <geekosaur> email henning thielemann, I guess, since the listed repo and issue tracker both went away some years ago
[22:19:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:20:32] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:20:42] <Putonlalla> I need a few days to gather enough politeness to do that.
[22:21:40] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[22:22:54] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[22:23:16] <Putonlalla> The author should look at the `graphviz` package to learn how to make proper bindings.
[22:23:18] <geekosaur> yeh, I know that one only too well
[22:23:39] <geekosaur> henning is … opinionated about such things
[22:24:58] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:b200:f874:1c07:de06:7cf8)
[22:25:32] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 240 seconds)
[22:26:25] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[22:27:59] <Putonlalla> Even looking past the stupid programming style, this issue would have never arisen if the package was engineered properly.
[22:28:20] <opqdonut> now I'm curious, how is it impossible to add new instances?
[22:28:42] <Putonlalla> The class is exported, but its methods are not.
[22:29:13] <opqdonut> ah
[22:29:28] <Putonlalla> It's the difference between `C` and `C (..)`.
[22:29:36] <opqdonut> yeah
[22:29:48] *** Joins: fef (~thedawn@user/thedawn)
[22:32:42] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[22:33:29] *** Joins: vicfred (~vicfred@user/vicfred)
[22:34:57] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 240 seconds)
[22:38:26] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:39:50] *** Joins: zebrag (~chris@user/zebrag)
[22:41:09] *** Joins: bahamas (~lucian@84.232.140.158)
[22:44:18] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[22:45:53] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 250 seconds)
[22:51:38] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:51:52] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[22:52:16] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[22:54:54] *** Quits: ph88^ (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de) (Quit: Leaving)
[22:54:57] *** Quits: boxscape__ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:55:49] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[22:56:24] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[22:56:32] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[22:56:57] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:57:23] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[22:57:55] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[22:58:07] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:58:52] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[22:59:54] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[23:01:13] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[23:01:29] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[23:01:42] *** Joins: nicbk (~nicbk@user/nicbk)
[23:02:03] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[23:02:34] *** Joins: hololeap (~hololeap@user/hololeap)
[23:03:42] *** Joins: vglfr (~vglfr@46.96.132.108)
[23:08:21] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[23:12:00] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[23:12:04] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[23:13:09] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 256 seconds)
[23:13:20] <mason0> hi. what's a better way of expressing this?
[23:13:34] <mason0> > (\n -> foldr (\_ acc -> acc / 2) 100 (replicate n 0)) 3
[23:13:36] <lambdabot>  12.5
[23:14:05] <mason0> > 100 / 2 / 2 / 2   -- with 3 as an argument
[23:14:05] <gurkenglas> Thoughts on HVM? It sounded amazing to me until I heard that "clone's can't clone their own clones" and now it sounds like a scam because surely this pops up all the time...
[23:14:07] <lambdabot>  12.5
[23:14:25] <gurkenglas> s/clone's/clones/
[23:14:31] <tomsmeding> > iterate (/2) 100 !! 3
[23:14:32] <lambdabot>  12.5
[23:14:49] *** Joins: bahamas (~lucian@84.232.140.158)
[23:15:32] <mason0> it is prettier and more concise, but won't that create a list from 0 to n?
[23:15:44] <tomsmeding> hm?
[23:15:49] <tomsmeding> > take 10 (iterate (/2) 100
[23:15:51] <tomsmeding> > take 10 (iterate (/2) 100)
[23:15:51] <lambdabot>  <hint>:1:26: error:
[23:15:51] <lambdabot>      parse error (possibly incorrect indentation or mismatched brackets)
[23:15:53] <lambdabot>  [100.0,50.0,25.0,12.5,6.25,3.125,1.5625,0.78125,0.390625,0.1953125]
[23:16:03] <mason0> yeah, a list with n elements
[23:16:14] <tomsmeding> ah right, I see what you mean
[23:16:31] <tomsmeding> well, yours will too with the same reasoning :p
[23:16:43] <mason0> yes. but I was looking for an improvement :)
[23:16:56] <tomsmeding> but most probably 'iterate' and '!!' will be inlined and the intermediate list fused away
[23:17:18] <mason0> so there's no "repeat a function N times" combinator?
[23:17:28] <tomsmeding> not in base at least
[23:17:36] <tomsmeding> let me check about the fusion
[23:18:07] <mason0> mine probably won't create a list at all? I'm not even touching the list arguments
[23:18:50] <mason0> apart from pattern matching on (:)
[23:19:17] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[23:20:00] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[23:20:26] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[23:21:00] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:21:20] *** Joins: pnotequalnp (~pnotequal@207-118-121-128.dyn.centurytel.net)
[23:21:57] <tomsmeding> why does ghc not inline interate and !!
[23:21:58] *** Joins: justOkay (~justache@user/justache)
[23:22:37] <tomsmeding> mason0: your foldr/replicate thing has similar Core to the explicit 'foo x 0 = x ; foo x k = foo (x / 2) (k - 1)', but my version just calls iterate and !! from Prelude
[23:23:48] <tomsmeding> oh apparently iterate is marked NOINLINE [1]
[23:24:01] <tomsmeding> Does anyone in this channel know what that [1] means?
[23:24:49] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[23:25:48] <mason0> interesting
[23:26:01] <mason0> does this seem like a good name, and good argument order?
[23:26:02] <mason0> reapply :: Int -> (a -> a) -> a -> a
[23:27:15] <mason0> reapply 3 (++"!") "foo"   =>   "foo!!!" 
[23:27:19] <mason0> maybe reap? apN?
[23:27:27] <tomsmeding> argument order yes, name meh but I honestly don't know anything really better; I might have done 'ntimes' but not sure
[23:29:10] <pnotequalnp> composeN
[23:29:29] *** Joins: alp (~alp@user/alp)
[23:29:30] <pnotequalnp> composeN 3 f = f . f . f
[23:31:03] <tomsmeding> quite good
[23:32:15] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[23:33:15] <tomsmeding> mason0: https://tomsmeding.com/vang/0Ke4zm/report.html
[23:33:30] <tomsmeding> apparently I didn't judge the Core correctly
[23:34:15] <tomsmeding> with this source https://paste.tomsmeding.com/Zbav9zzQ
[23:34:21] <tomsmeding> (pasting the cabal file to show that I'm using -O2)
[23:34:41] <byorgey> tomsmeding: the [1] has something to do with phases, it's some kind of hacky way to ensure that various rewriting/inlining rules fire in the right order.  I don't know the details though.
[23:35:17] <tomsmeding> byorgey: thanks! Can that be the cause that 'iterate' isn't inlined here? (!!) is marked INLINABLE, which sounds promising but it too is not inlined
[23:35:48] <gurkenglas> > (\n -> foldr (.) id . replicate n) 3 (/2) 100
[23:35:50] <lambdabot>  12.5
[23:35:53] <byorgey> no idea. All this stuff is black magic to me.
[23:37:30] <byorgey> tomsmeding: that's unfortunate, I always assumed  iterate f x !! k  would fuse away the intermediate list.
[23:37:43] <tomsmeding> gurkenglas: nice, has the same performance (up to .02 ns -- I expect same Core) as the original foldr-replicate version
[23:37:55] <tomsmeding> byorgey: me too :p
[23:38:01] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[23:39:43] <gurkenglas> :t [ala Endo foldMap, foldr (.) id]
[23:39:45] <lambdabot> Foldable t => [t (b -> b) -> b -> b]
[23:40:19] <tomsmeding> wow ok so using iterate' instead of iterate gives a huge performance improvement; direct-recursive is still faster, but not by much anymore https://tomsmeding.com/vang/HQzhtC/report.html
[23:42:02] *** Joins: neurocyte0917090 (~neurocyte@IP-094046076012.dynamic.medianet-world.de)
[23:42:03] *** Quits: neurocyte0917090 (~neurocyte@IP-094046076012.dynamic.medianet-world.de) (Changing host)
[23:42:03] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:44:06] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 252 seconds)
[23:45:37] <gurkenglas> > (under (_Wrapping Endo) . stimes) 3 (/2) 100
[23:45:39] <lambdabot>  12.5
[23:45:40] <tomsmeding> so somehow, `iterate' (/2) x !! k`, where neither iterate' nor !! are inlined, ends up being faster than the foldr-replicate version where everything is inlined and the only calls are to GHC.Prim operations
[23:45:56] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[23:46:58] <pnotequalnp> Have you tried foldl'?
[23:47:04] <pnotequalnp> It should be faster since `/` is strict
[23:47:48] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[23:49:01] *** Joins: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54)
[23:50:47] <tomsmeding> interesting, the foldr-replicate version with foldr replaced by foldl' and the lambda flipped, but nothing else, makes it optimise down to the same as the direct recursive one
[23:50:51] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 260 seconds)
[23:50:58] <tomsmeding> and indeed the runtime is the same, i.e. fastest
[23:51:35] <tomsmeding> at this point it's 2.15ns for recursive or foldl'-replicate, 5.5ns for iterate'-!!, 10.1ns for foldr-replicate, and 102ns for iterate-!! on my machine
[23:52:31] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[23:52:38] <pnotequalnp> I really want to try benchmarking unlifted versions of stuff but Criterion doesn't support that yet (levity polymorphism yada yada) and I don't feel like implementing it myself.
[23:53:21] <tomsmeding> pnotequalnp: why does criterion need to support unlifted levity in order to benchmark it?
[23:53:38] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:53:49] <tomsmeding> in any case, the fastest ones are already worker-wrapper transformed to do the actual inner loop on unlifted values only
[23:54:39] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[23:55:39] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:58:24] <pnotequalnp> Hmm I suppose I could just use the lower level interface. I've just been thinking about the whnf-type utilities.
[23:58:55] <tomsmeding> pnotequalnp: you can use this template https://paste.tomsmeding.com/Zbav9zzQ
