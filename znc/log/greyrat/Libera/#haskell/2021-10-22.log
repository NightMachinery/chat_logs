[00:00:24] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[00:00:34] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:01:41] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:02:11] *** Quits: timCF (~timCF@m91-129-111-87.cust.tele2.ee) (Ping timeout: 264 seconds)
[00:02:35] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:03:01] *** Joins: timCF (~timCF@m91-129-111-87.cust.tele2.ee)
[00:03:23] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:84fc:7e49:3098:491f) (Ping timeout: 264 seconds)
[00:03:41] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:04:35] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:05:11] *** Quits: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 264 seconds)
[00:05:41] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:05:48] *** Joins: Guest3072 (~Guest30@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:06:35] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:07:37] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[00:07:42] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:08:35] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:08:41] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 258 seconds)
[00:09:13] *** Quits: ub (~Thunderbi@77.119.198.223.wireless.dyn.drei.com) (Quit: ub)
[00:09:42] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:10:36] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:11:42] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:12:20] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e)
[00:12:36] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:13:43] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:14:36] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:15:43] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:16:16] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:16:36] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:17:43] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:18:29] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[00:18:37] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:19:43] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:20:37] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:20:37] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.126) (Read error: Connection reset by peer)
[00:21:44] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:22:37] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:23:44] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:24:37] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:25:44] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:26:38] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:27:44] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:28:38] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:29:44] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:29:55] *** Joins: Cajun (~Cajun@user/cajun)
[00:30:38] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:31:44] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:32:38] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:33:45] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:34:38] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:35:45] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:36:39] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:37:45] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:38:30] *** Quits: fendor (~fendor@178.115.78.81.wireless.dyn.drei.com) (Remote host closed the connection)
[00:38:39] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:38:43] <monochrom> Ah, Bird's Thinking Functionally with Haskell is the one that suffers "right before AMP".
[00:39:46] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:40:39] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:40:54] *** Quits: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[00:41:46] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:42:39] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:43:46] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:44:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:44:40] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:45:46] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:46:40] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:47:05] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[00:47:46] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:47:50] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:48:40] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:49:46] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:50:40] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:51:47] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:52:11] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:7fe4:4b4a:851b:ca4d) (Quit: Client closed)
[00:52:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:52:41] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:53:47] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:54:41] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:55:10] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[00:55:48] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:56:41] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:57:23] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[00:57:41] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[00:57:41] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[00:57:44] *** allbery_b is now known as geekosaur
[00:57:48] *** Joins: Guest372 (~xxx@47.245.54.240)
[00:58:42] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[00:59:48] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:00:42] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:01:40] *** Quits: ubert (~Thunderbi@77.119.198.223.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[01:01:49] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:02:11] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[01:02:42] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:03:06] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 260 seconds)
[01:03:23] *** Quits: Guest3072 (~Guest30@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[01:03:48] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:04:42] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:05:49] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:06:43] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:07:15] *** Quits: wonko (~wjc@62.115.229.50) (Ping timeout: 265 seconds)
[01:07:49] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:08:43] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:09:15] *** Joins: Guest54 (~Guest54@207.151.52.24)
[01:09:50] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:10:43] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:11:50] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:12:44] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:13:34] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[01:13:50] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:14:44] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:15:50] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:16:44] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:17:51] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:18:44] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:19:51] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:20:44] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:21:25] *** Quits: max22- (~maxime@2a01cb0883359800acc7df5c88e6f73e.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[01:21:51] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:22:45] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:23:51] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:24:45] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:25:35] *** Quits: Guest54 (~Guest54@207.151.52.24) (Ping timeout: 256 seconds)
[01:25:51] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:26:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[01:26:45] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:27:52] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:28:34] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[01:28:45] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:29:52] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:30:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:30:46] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:31:52] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:32:46] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:33:53] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:34:46] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:35:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[01:35:52] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:36:08] <dsal> Is it possible to have a function that uses a type without declaring the type it uses?  I want to make a thing that, for example, verifies round tripping of an enum without having to specify the values since it's a bounded enum already.
[01:36:20] <dsal> I guess I can use a Proxy.
[01:36:46] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:37:11] <monochrom> Yeah I would use a proxy type.
[01:37:33] <monochrom> Type application can also be acceptable in simple cases.
[01:37:53] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:38:47] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:39:53] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:40:47] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:41:27] *** Quits: Guest28 (~Guest28@93-172-116-38.bb.netvision.net.il) (Ping timeout: 256 seconds)
[01:41:53] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:42:46] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[01:42:47] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:43:54] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:44:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:44:37] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:44:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:44:47] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:44:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:45:54] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:46:48] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:47:54] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:48:48] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:49:54] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:50:21] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[01:50:48] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:51:18] *** Quits: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184) (Remote host closed the connection)
[01:51:23] *** Joins: mestre (~mestre@191.177.175.57)
[01:51:55] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:52:48] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:53:33] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[01:53:51] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[01:53:55] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:54:00] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[01:54:49] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:55:55] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:56:17] *** Joins: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184)
[01:56:49] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:57:55] *** Joins: Guest372 (~xxx@47.245.54.240)
[01:58:30] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[01:58:49] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[01:58:50] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[01:59:28] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[01:59:56] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:00:50] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:01:08] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:e12b:5f61:be92:9101)
[02:01:32] <Inst> oh
[02:01:33] <Inst> hey guys
[02:01:40] <Inst> Just want to troll a bit more:
[02:01:50] <Inst> It turns out I have a friend who's been described as a champion influencer.
[02:01:56] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:02:13] <Inst> She's a scanlator as a hobby, meaning she scans manga (japanese comics) / manghwa (korean comics)
[02:02:22] <Inst> translates it, then publishes the illegal pirates
[02:02:30] <Inst> it turns out that in some game, #1
[02:02:36] <Inst> she managed to recruit 1000 or more players almost singlehandedly
[02:02:50] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:02:58] <Inst> #2, in return for scanlated manga, she was able to use the recruited players to generate the real money equivalent of 16,000 USD
[02:03:25] <Inst> putting this into a haskell context
[02:03:56] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:03:57] <Inst> I'm thinking, even though HF thinks it's currently a bad idea
[02:04:09] <Inst> to target non-programmers and other low-level developers
[02:04:13] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Ping timeout: 252 seconds)
[02:04:50] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:05:32] <monochrom> I think HF is OK with targetting non-programmers, if I understand Andrew Boardman's Haskell.Love talk correctly.
[02:05:56] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:06:26] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[02:06:37] <jackdk> I have had good experience teaching Haskell to first-year university students with no prior programming experience
[02:06:50] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:07:57] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:08:50] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:09:43] <monochrom> Low-level developers is a very different story to be sure. Multiple factors such as low ROI.
[02:09:57] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:10:11] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[02:10:50] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:11:27] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[02:11:48] <jackdk> dsal: these days you could also use explicit type applications if that feels better
[02:11:57] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:12:51] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:13:54] *** Quits: _bo (~bo@217.18.216.247) (Read error: Connection reset by peer)
[02:13:57] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:14:41] *** Joins: cjb (~cjbayliss@user/cjb)
[02:14:51] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:14:54] *** Quits: cjb (~cjbayliss@user/cjb) (Client Quit)
[02:15:58] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:16:06] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[02:16:51] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:17:58] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:18:35] <Inst> @monochrom: the problem is the instruction, if experienced developers are bad at grokking haskell, what are the odds that non-haskell programmers would get it?
[02:18:35] <lambdabot> Unknown command, try @list
[02:18:52] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:18:54] <monochrom> Indeed.
[02:19:01] <Inst> IMO, there's two issues, #1, the ecosystem (haskell jobs) is not properly developed, but doing a supply side drop (there's tons of coders and they all know haskell)
[02:19:10] <Inst> might work, although it'd be risky
[02:19:20] <Inst> #2, the education quality has to be assured beforehand
[02:19:35] <Inst> if you convert someone to try haskell, and it doesn't stick, you're going to have a much harder time trying to convert them again
[02:19:37] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:19:38] <Inst> but i'm trying to point out
[02:19:49] <monochrom> If 90-yos are bad at learning a musical instrument, what chance do 9-yos have?  Or do they?
[02:19:58] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:20:02] <Inst> you can do a supply side drop, although it might not be "avoid success at all costs"
[02:20:45] <Inst> if you use a guerrilla marketing technique which is Standard Operating Procedure in China
[02:20:50] <Inst> i.e, use influencers to advertise your language
[02:20:52] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:21:02] <Inst> it's not "avoid success at all costs" because it'll damage Haskell's reputation
[02:21:18] <Inst> "that time Haskell became popular because someone dumped an advertising budget into Youtube influencers"
[02:21:26] <monochrom> BTW what's the connection with the champion influecer and scanlating and making 100k?
[02:21:39] <Inst> I mean she's a good influencer
[02:21:56] <Inst> she scanlated Manhwa (Korean comics) to generate the equivalent of 16,000 USD in a MMO
[02:21:57] <monochrom> Hell, what's the connection between those 3 in the first place hahah
[02:21:58] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:22:05] <yushyin>  /fa Inst
[02:22:07] <Inst> by using the Manhwa as a lure
[02:22:10] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Ping timeout: 260 seconds)
[02:22:13] <yushyin> oh, sorry
[02:22:36] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[02:22:47] <yushyin> damn space key
[02:22:52] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:23:01] <aegon> i've been working on a project for ~7 months in haskell now and most of my collegues are low level code enthusiasts from the gaming land (very c++ / lua happy). My experience sharing code and war stories with them about haskell is that they actually really dig it, just don't see a route to using it professionally. I think its more a chicken and egg scenario. IMO a high quality open implementation of 
[02:23:07] <aegon> something that people say "haskell is not good" for would do wonders 
[02:23:57] <Inst> i mean, well, are you saying the supply side is already there?
[02:23:59] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:24:02] *** Quits: meinside (uid24933@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:24:04] <monochrom> Well, IOHK is causing people to think "Haskell is a blockchain language" now.
[02:24:50] <Inst> by the way
[02:24:52] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:24:54] <aegon> i think the want to work in it is there, the route to that is unclear. I've gotten the most serious conversations about it from linking articles about low level optimization and what it looks like in haskell
[02:24:57] <Inst> this is 100% doable in Haskell, right?
[02:24:59] <Inst> The influencer girl
[02:25:11] <Inst> One way to sell Haskell to her would be to say, automate her scanlation process
[02:25:23] <Inst> build a Haskell-based framework that can process JPgs / PNGs
[02:25:32] <aegon> i think something low level folks really want to know is more what does optimizing look like and how painfull is it, they want simpler and more concise / composable things, they just don't want it at the cost of resources
[02:25:47] <Inst> run text recognition on existing text
[02:25:52] <Inst> aegon: but it's always at the cost of resources, no?
[02:25:59] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:26:11] <monochrom> Oh OK, I see.
[02:26:14] <Inst> run text recognition on an existing text, rip it off the jpg/png, and input new text
[02:26:29] <Inst> so she'd have a haskell-based tool for her scanlation hobby
[02:26:34] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[02:26:37] <Inst> and consequently she'd need haskellers to maintain it
[02:26:38] <aegon> Inst: debatable, it depends on if hte language gives you all the tools ot not cost resources when you don't want to. Like ify ou want to you can hack away at haskells intermediary language and pin memory etc. there are quite a few tools for optimizing haskell out there
[02:26:43] <monochrom> Does "low-level developer" means they write asm code? Or does it mean they are low in the corporate ladder?
[02:26:51] <monochrom> Because I thought the latter.
[02:26:52] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:27:00] <Inst> (very c++ / lua happy)
[02:27:20] <aegon> monochrom: i mean they work on game engines and such all day, trying to sqeeze perf out of consoles with bare bones hardware
[02:27:44] *** Joins: wroathe (~wroathe@173-160-115-161-Minnesota.hfc.comcastbusiness.net)
[02:27:44] *** Quits: wroathe (~wroathe@173-160-115-161-Minnesota.hfc.comcastbusiness.net) (Changing host)
[02:27:44] *** Joins: wroathe (~wroathe@user/wroathe)
[02:27:47] <monochrom> I guess in the game dev industry the two are equivalent >:)
[02:27:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[02:27:59] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:28:21] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:28:29] <aegon> lol
[02:28:53] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:28:53] <Inst> i also sort of wish Android / iOS supported Haskell as compiled code ;_;
[02:29:03] <Inst> or at least as intermediary code for their VMs
[02:29:09] <Axman6> Inst: to be perfectly honest, that sounds like an incredibly boring project
[02:29:09] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[02:29:32] <Inst> Axman6: you mean the autmoating scanlation thing?
[02:29:37] <Inst> It's boring if you're not the end-user.
[02:29:39] <aegon> haskell on mobile is scary to me because i don't know how to reason about the rts's garbage collector and power usage
[02:29:53] <monochrom> I am pessimistic about pitching to game engine tweakers.
[02:29:57] <aegon> if that were an option i would be concerned about power usage
[02:29:59] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:30:03] <Axman6> it sounds like a couple of days od work in bash, no need for haskell
[02:30:09] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[02:30:11] <monochrom> I now how to explain Haskell code optimization, both by hand and what GHC does.
[02:30:28] <monochrom> I'm also pretty sure that after I'm done, the conclusion is "carry on".
[02:30:38] <monochrom> s/now/know/
[02:30:53] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:30:57] <aegon> monochrom: heh, what makes you say that. What aspect of the perf stuff.
[02:31:19] <Inst> I mean there's a reason I'm going initially for a C++ / Haskell combo
[02:31:59] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:32:14] <monochrom> Haskell code optimization involves very advanced techniques.
[02:32:32] <Axman6> I don;t actually think writing well performing Haskell code is that difficult, optimisation is very _different_ to other languages, but people put in a shitload of effort to learn to optimise code in other languages. I don't understand why people think that you shouldn't also spend some time learning how optimisations in haskell work
[02:32:37] <monochrom> and knowledge
[02:32:40] *** Quits: pmk (~user@2a02:587:9414:7d03:fb87:7810:40ab:edc0) (Ping timeout: 260 seconds)
[02:32:48] <Inst> iirc is it valid to dumb it down to "Haskell, as a functional language, is going to have intrinsic performance losses compared to an imperative language"?
[02:32:53] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:33:07] <awpr> no.  bash is an imperative language
[02:33:15] <monochrom> And don't seem to worth learning if one isn't forced to use Haskell.
[02:33:15] <aegon> i woudl like to read up on more. Yeah these are people who spend hours reading up on lvalue / rvalue semantics in new langauge standards to save a couple cycles
[02:33:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:33:30] <aegon> i'd think they'd be up to the task
[02:33:35] <Axman6> the C++ / Haskell combo is working well for Facebook...
[02:33:40] <Inst> but assembly is imperative
[02:33:57] <Inst> you're being sardonic, right?
[02:34:00] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:34:03] <Inst> given their recent massive service outage
[02:34:16] <Axman6> Inst: no, that's not a fair description of Haskell's performance
[02:34:33] <Axman6> No, it was a comment about their Sigma system
[02:34:53] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:34:56] <monochrom> In this case, the sunk cost policy applies.
[02:34:58] <Inst> ah
[02:35:30] <Axman6> aegon: yeah exactly, and IMO optimisations in imperative languages are just kind of boring
[02:35:31] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[02:35:45] <monochrom> Hypothetically if you are starting to write a game engine from scratch now, Haskell and C++ are equally painful, just in different ways.
[02:36:00] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:36:01] <Inst> who writes game engines from scratch now?
[02:36:10] <monochrom> But who actually starts to write a game engine from scratch now?
[02:36:13] <Axman6> like, I love me some low level code, I keep a copy of Hacker's Delight on hand for a reason, because I like writing that sort of code, but real optimisation comes from a higher level
[02:36:20] <Inst> iirc they just license an engine and call it a day
[02:36:29] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[02:36:31] <monochrom> All the existing game engine tweakers have already finished learning C++ optimizations.
[02:36:54] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:37:07] <Inst> have you seen, like, Astral Chain?
[02:37:08] <geekosaur> doesn't Cale's company have a Haskell game engine? then again who's going to license it much less learn how to tweak it
[02:37:19] <monochrom> "carry on" carries no extra cost, that cost is already sunk.  "switch to Haskell" carries huge extra costs, this is important even though it's <= C++ sunk cost.
[02:37:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[02:37:57] <Inst> it's amazing since Astral Chain was originally intended to be multiplatform, but it ended up being a Nintendo Switch exclusive
[02:38:00] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:38:10] <Inst> and the Switch is running on mobile hardware
[02:38:19] <Inst> but it looks incredible
[02:38:54] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:38:57] <Inst> just saying ,the optimizers have gotten really good
[02:39:43] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[02:40:00] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:40:16] <aegon> yeah, a lot of that is that the graphics apis have gotten really flexible, and ify ou know the exact hardware your running on you can do silly things like optimize thread timing and pin threads / spread them out optimally across the given cores
[02:40:44] <Axman6> Inst: I have to ask, do you have a point to any of this? I feel like you're saying a lot of stuff while not saying very much at all, and "Just want to troll a bit more" is feeling more and more true by the minute.
[02:40:54] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:40:55] <aegon> a lot of work in pushing consoles is staring at cor usages and tweaking
[02:42:01] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:42:54] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:43:11] <aegon> monochrom: aye, ultimately all of them were more open to it as a langauge that could be used but happy with c++. I want to some day play around with a game engine in hask but the recent findings about run time library loading on windows are a downer. If you have refernce on haskell optimization i'd love to grab em and read through it. I'm workign off of what i've been able to find on the wiki and some blog 
[02:43:17] <aegon> posts
[02:43:36] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[02:43:55] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[02:44:01] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:44:04] <aegon> also apparently up untill GHC 9 the concurrency loop was using an incorrect api from the kernel and messing with the scheduler / greedy looping?
[02:44:19] <Inst> i mean the point re astral chain is that it's a heavily optimized game that uses certain tweaks to be able to run on mobile hardware, but taking a 10-20% penalty in haskell might make it inoperable
[02:44:21] <aegon> i forget the talk but i think it was sometime recent
[02:44:55] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:45:03] <aegon> Inst: i'm not sure haskell woudl incur a 10 - 20% penalty given what i've read and how much of that is actually just shipping things off to the gpu / apu
[02:45:13] <Inst> it already has framerate drops on existing hardware, although it's also an example insofar as switch devs typically make stylistic choices in order to avoid taxing the tegra x1
[02:45:32] <Axman6> I've never considered making games in Haskell, it doesn't seem like a niche it would be well suited to, making other real world apps makes much more sense. 
[02:46:01] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:46:18] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:46:38] <sm> lots of people have though, #haskell-game:matrix.org / #haskell-game:libera.chat is where they hang out
[02:46:50] <Axman6> the gaming world has found their local minima with C++ (and really, pushing everything to the GPU). I can't see what advantages there would be persuing that given the amount of money invested in the games world already
[02:46:55] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:47:05] <aegon> Inst: a lot of times frame hiccups are caused by memory allocation /deallocation or reading from disk more so than cpu throughput, i'm not sure haskell would be better or worse w.r.t.
[02:47:39] <Axman6> yeah absolutely, not saying it can't be done, but the fact that Haskell isn't (currently) well suited to that domain doesn't make it not a good choice of language for gettingh real work done. It'd been paying my bills doing that for like 7 years, so something's working out
[02:48:02] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:48:37] <Inst> also given that virtually everyone's already running off an engine, and everything else is just a mod to an engine, would haskell actually be useful since development and testing times wouldn't necessarily be that big a part of total development?
[02:48:49] <Inst> they spend a lot of time and resources on graphical assets, music, plots, etc
[02:48:55] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:49:09] <aegon> i'm just a haskell enthusiast from the gaming world, I want to try pushing it into that niche for fun. c++20 concepts might change my mind but i'm tired of pushing things in that world from a c++ perspective, its like infinate boiler plate thats inflexible no matter what you do
[02:49:09] <Inst> total development -> add resource expenditures
[02:49:10] <Cale> geekosaur: It's not really in a state where it would be licenseable at the moment... and it's full of arrow-y FRP, which we'd probably want to rewrite to use Reflex if we were resuscitating it today.
[02:50:02] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:50:15] <Axman6> Can someone do something about Guest372?
[02:50:36] <Axman6> just realised every second line of my log is them joining or parting
[02:50:40] <Inst> aegon: maybe if someone needs a completely different engine, there might be a chance to get haskell in there
[02:50:52] <aegon> Axman6: lol, connection woes?
[02:50:55] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:51:09] <sm> I think Zig is more likely the next big thing for games, https://news.ycombinator.com/item?id=28897469
[02:51:17] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:51:21] <Inst> alternate possibility: they're on mobile internet
[02:51:40] <Inst> and they're driving in and out of a tunnel, say, in Italy or something
[02:51:59] <Inst> oh, cool
[02:52:02] <Inst> i just checked the IP out
[02:52:03] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:52:47] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:52:56] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:53:08] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:53:12] <sm> so here's a piece of haskell-related trivia: if you're using Show/Read to serialise/deserialise, you can use pretty-show to make a more human readable format, and still read by just stripping the newlines
[02:53:42] <Inst> is it considered rude to point out guest372's ip?
[02:54:02] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:54:04] <sm> usually a bit invasive and off topic Inst, yes
[02:54:19] <Axman6> and we can all see it if we want to
[02:54:19] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[02:54:24] <aegon> also its not hidden in irc, i get a message with it everytime they leave or go
[02:54:27] <Inst> no, but where the IP resolves to
[02:54:29] <davean> Inst: probably considered generally passive agressive to do it indirectly.
[02:54:39] <Inst> fine, it's an alibaba ip
[02:54:56] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:55:08] <Inst> then again, alibaba has cloud services so it might have nothing to do with the actual firm
[02:55:31] <aegon> yeah I'd feel uncomfortable if someone started discussing my geolocation even though its out there by default
[02:55:45] <davean> Especially being so weird about it
[02:55:50] <davean> instead of just saying what they want to get at
[02:56:02] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:56:04] <davean> like clearly Inst is uncomfortable with what they're thinking, which is super suspicious
[02:56:07] *** Quits: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184) (Remote host closed the connection)
[02:56:10] <sm> so can we talk about Haskell again
[02:56:15] <davean> Please
[02:56:20] <Axman6> yeah
[02:56:55] <Inst> davean: it's cloud, but I just thought it would have been cool if Alibaba programmers were expressing an interest in Haskell
[02:56:56] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:57:02] <sm> Can Haskell Be Marketed To Beginners As A Better Python
[02:57:03] <Axman6> hey anyone want to review a PR on my package amazonka-s3-streaming? it's been mostly rewritten because it was honestly absolutely awful initally https://github.com/axman6/amazonka-s3-streaming/pull/25
[02:57:44] <sm> also, when GHC 9.2!
[02:57:53] <davean> sm: Oh man
[02:57:55] <davean> sm: uh about that
[02:58:03] *** Joins: Guest372 (~xxx@47.245.54.240)
[02:58:04] <Axman6> sm: yes! https://www.youtube.com/watch?v=BvECNQRrjCY
[02:58:06] <davean> WTF knows
[02:58:21] <Axman6> GHC 9.2????
[02:58:25] <aegon> sm: pythoners don't know what types are
[02:58:34] * aegon let my bias out
[02:58:46] <aegon> i worked in it for 6 years in the web world and its maddening
[02:58:47] <davean> Axman6: Yah, its a bit cursed with fixes ATM
[02:58:56] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[02:59:08] <aegon> loose dicts everywhere
[02:59:27] <Axman6> I've been translating a python project into HAskell, they've gone all in on using the python typing stuff, makes the job a hell of a lot easier
[02:59:42] <sm> nice
[02:59:59] <Axman6> (it's code from Microsoft that's pretty academic so I'm not too surprised)
[03:00:03] <aegon> thats rare imo, i have yet to see a python project at a company attempt types
[03:00:03] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:00:11] <Axman6> loose dicts sink ships
[03:00:23] <Inst> lol ax, sorry, i'll stop annoying you guys
[03:00:34] <Inst> nice video
[03:00:48] <Axman6> I think this has been using types from the outset, and it feels fairly haskellish a lot of the time. deciding when something should be a typeclass is a bit of a pain
[03:00:57] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:00:59] <davean> aegon: Do the python programmers you know not write type systems?
[03:01:21] <monochrom> "Inside every Haskell discussion is a Python discussion that tries to get out" >:)
[03:01:24] <davean> aegon: you know types are required for some of the accelerated python stuff?
[03:01:36] <davean> aegon: several companies I know use the python-to-machine-code compilation stuff
[03:01:49] <aegon> davean: heallll no. its funcs that take dicts all the way down.
[03:02:03] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:02:13] <davean> I mean thats the language semantics sure - but that deosn't mean the dicts aren't nominal structures
[03:02:22] <aegon> but i jumped from web land to game / graphics land ~4-ish years ago and have only ever gone back to python to play with machine learning so I'm probably out of date there
[03:02:37] <davean> aegon: yah I'm talking web python here
[03:02:40] <aegon> and most the companies i interact with are now using node / typescript for web stuff
[03:02:48] <Axman6> I feel like every haskeller who comes up against criticism from pythonisters should have that video on speed dial
[03:02:57] <davean> aegon: honestly its the web where I've seen python need the performance to get compiled with types
[03:02:57] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:03:32] <davean> Things like science and machine learning and data analysis are all on like numpy and scipy that have C backends already
[03:03:45] <davean> its the business logic stuff thats slow and needs direct perforamnce improvements
[03:04:04] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:04:10] <davean> anyway, still not Haskell, but at least closer :)
[03:04:57] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:05:54] <aegon> roger. I hope i don't hav to python again but it wouldn't be the end of the world. the type system last time i used it felt about on par with typescripts stuff. I didn't know they were using it to inform compilation anywhere
[03:06:04] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:06:54] <aegon> i've been eager to try my hand at optimizing some haskell after reading up on it but haven't come across any place where its needed yet. monochrom do have a good toy project idea that will put in c-- land? :D or other resources on optimization
[03:06:57] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:07:15] <aegon> i guess i should say optimizing GHC
[03:07:18] <davean> aegon: oh optimizing Haskell is fun!
[03:07:28] <monochrom> I don't.
[03:07:39] <davean> I did a talk on that almost a year ago now
[03:08:04] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:08:06] <monochrom> But look for "fusion" papers and SPJ's "core" talks.
[03:08:33] <monochrom> "core" referring to the intermediate language in GHC.
[03:08:58] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:09:32] <monochrom> SPJ's "core" talks don't just teach you it, they also show you an optimization pass that interested SPJ at the time of the talk.
[03:10:04] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:10:21] <davean> aegon: what sort of optimizations are you interested in doing?
[03:10:58] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:11:18] <davean> Are you interested in optizing Haskell libraries, programs, GHC specificly, or the code GHC produces in general (Or something I've missed as an option)
[03:11:38] <aegon> monochrom: awesome, collecting links based on those criteria
[03:12:05] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:12:58] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:13:35] <aegon> davean: i want to have more experience optimizing memory usage and the code ghc produces. Get a better feel for reasoning about how nested recursion or iterating over a list is going ot actually play out in core land and if it doesen't remove the complexity i expect it to, where to poke or look for in the source
[03:13:37] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[03:14:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[03:14:05] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:14:11] <davean> Ok so specific programs (or maybe libraries)
[03:14:13] *** Quits: jgeerds (~jgeerds@55d4da80.access.ecotel.net) (Ping timeout: 258 seconds)
[03:14:26] <aegon> i'm writing haskell right now as if its going to take everything up into lambda calculus land and distill it into the best iterative set of instructions possible but i know thats a pretty brittle / bad assumption
[03:14:58] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:15:19] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[03:15:27] <aegon> I've read up on fusion, inlining pragmas, the stages of compilation but just have no reasonable experince with hacking at any of it. The stuff i've written so far performs well enough which means GHC is great :D because i'm not being particularly careful
[03:16:05] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:16:14] <davean> yah usually GHC compiles Haskell code well, even though it doesn't even try that hard
[03:16:53] <aegon> but I'm also mainly processing lazy bytestrings for the "work" of the application. I should probably be forming everything as pipes or with conduit but when i started those were super scary libraries
[03:16:54] <sm> Axman6: I have now watched your video and understand, that's great :)
[03:16:59] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:17:11] <sm> this new language looks a bit verbose, but powerful
[03:17:13] <davean> aegon: oh but machines is so much more fun :)
[03:17:45] <Axman6> verbosity gives the ~compiler~ interpreter more options for optimisation
[03:18:01] <awpr> lazy bytestrings get a lot of undeserved hate because they get conflated with lazy IO returning lazy bytestrings
[03:18:05] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:18:13] <monochrom> I like the machines package too.
[03:18:19] <monochrom> My only complain is:
[03:18:23] *** Quits: akspecs__ (~akspecs@user/akspecs) (Ping timeout: 264 seconds)
[03:18:26] <monochrom> Data.Machine and Control.Lens
[03:18:39] <monochrom> Does anyone see the oxymorons I see?
[03:18:50] <monochrom> Why is it not Control.Machine and Data.Lens?
[03:18:50] <geekosaur> that ship sank years ago :(
[03:18:55] <davean> monochrom: Oh I see it, but I just read them as different jokes
[03:18:57] <awpr> at this point `Data.` is basically the `.com` of Haskell module names
[03:18:59] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:19:18] <davean> I really just need to figure out my selector transformer semantics
[03:19:21] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Quit: WeeChat 2.3)
[03:19:21] <monochrom> Both Data. and Control. are .com
[03:19:24] <davean> So I can publish that package :(
[03:19:33] <davean> instead of just having a bunch of non-composible transformers
[03:19:39] <monochrom> Hell, even better:
[03:20:02] <awpr> `Com.Kmett.Lens` go full Java style
[03:20:05] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:20:08] <davean> I'm actually sad "Control.Lens" wasn't just "Lens"
[03:20:13] <geekosaur> Control is a misnomer because your data *is* control structures
[03:20:25] <monochrom> (|Data> + |Control>)/sqrt2 = (|.com> + |.org|)/sqrt2
[03:20:59] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:21:39] <geekosaur> and of course everything is data, so we reach ==davean
[03:22:03] <geekosaur> well, or codata
[03:22:06] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:22:59] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:23:27] <aegon> Axman6: python 5 looks dope
[03:24:06] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:25:00] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:26:06] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:26:56] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb932154b917507392a6.dip0.t-ipconnect.de)
[03:27:00] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:28:06] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:29:00] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:29:39] <dolio> They're on 5 now? I thought 3 was still controversial.
[03:30:02] <awpr> just wait until Python 6 lands with `-XDependentHaskell`
[03:30:07] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:30:29] <aegon> i'd never heard of Machines
[03:30:34] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c703cb87897f933eeab9e85f.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:30:52] <aegon> gripe to share that i can't fix and don't think is super unreasonable but a perfect example of the hardest part of haskell to me...
[03:31:00] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:31:05] <geekosaur> can't be outdone by perl now, can they? }:>
[03:31:23] <Axman6> dolio: https://www.youtube.com/watch?v=BvECNQRrjCY
[03:31:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:31:35] <aegon> i needed to to matrix math recently and ended up on linear which i was super happy with, until i started using it and realizing everything was mathy. I'm still happy with it but trying to find out how to get an inverse of a quaternion was a journey
[03:32:04] <dolio> Oh, I see. :þ
[03:32:07] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:32:14] <geekosaur> you were doing matrix math and expecting it to not be mathy?
[03:33:01] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:34:03] <aegon> i didn't expect to have to dig into an instance class called RealFrac on quaternion to find that given a unit quaterion i can use recip to get the inverse normally given in math libs
[03:34:03] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[03:34:07] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:34:42] <aegon> like i ended up cross referencing and digging into what Hamiltonian was to find out how to do some basic stuff. which is fair, it is a mathy thing, but i do wish the docs had some practicality / notes
[03:34:54] *** wrengr is now known as wrengr_away
[03:35:01] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:35:02] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[03:36:07] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:37:01] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:38:07] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:39:01] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:39:53] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:40:08] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:40:12] <aegon> i guess i don't know how it could be done better and still use the right classes for the things it does but mapping from the type classes to normal use cases was a journey. Hopefully in a month or so on theo ther end of this i'll remember to try a pr with a overview doc or something
[03:41:01] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:41:03] <aegon> but it feels like that happens a lot in hask land compared to other langauges where theres this awesome library that does something really slick and well but good luck using it if you aren't the author and know what some very high level concepts mean
[03:42:08] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:43:02] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:43:13] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 252 seconds)
[03:43:40] <aegon> imo learning them and digging into it is a better path to understanding what your working with but since we were talkign about haskells marketablility. Seemed relevant. Scotty / Spock are awesome, but it took me like 3 days to understand how to use either
[03:44:08] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:44:34] <dsal> jackdk: I'm doing a type application to type the proxy, but I'm not sure how to name a function that uses a type internally, but doesn't have any parameters that reference the type.
[03:44:56] *** Quits: jaitoon (~Jaitoon@2a02:c7f:a5f:1d00:3901:d03b:2d77:c4b6) (Quit: Leaving)
[03:45:02] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:45:28] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:45:59] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[03:46:09] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:46:45] *** Lord_of_Life_ is now known as Lord_of_Life
[03:47:03] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:47:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:48:09] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:49:00] <aegon> geekosaur: yeah, keep math out of my math libs, and don't start talking about science and facts please :P
[03:49:03] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:49:27] <jackdk> dsal: Here is an example. You need `-XTypeApplications` to select the type to `fromEnum`, `-XScopedTypeVariables` to be able to reference the type var `a` inside the body, and `-XAllowAmbiguousTypes` to defer the ambiguity check to the use site. https://www.irccloud.com/pastebin/SJhDUCgy/EnumIndices.hs
[03:50:09] <jackdk> dsal: you then call it like `enumIndices @Bool`, which evaluates to `[0, 1]`
[03:50:09] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:50:29] <monochrom> Heh I wrote a similar example.  whee = fromEnum (minBound :: a) == 1
[03:50:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e) (Remote host closed the connection)
[03:51:03] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:51:42] <jackdk> oh yeah right you don't need to use a type application enumIndices; a type annotation suffices there
[03:52:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[03:52:09] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:52:10] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb932154b917507392a6.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[03:53:03] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:53:23] <aegon> its a dumb criticism to bring up, obvously if your using haskell you should be comfortable navigating all that stuff as part of the language. And i certainly oculdn't write a linear library to match linear. But on top of the functional part being rough for newcomers navigating the libraries is also often rough until you grok it.
[03:54:00] <monochrom> I still like the proxy approach though.
[03:54:10] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:54:37] * aegon goes back to working on this 14000 line pile of hask with little to no comments and 3 letter vars all over the place. <_< >_>
[03:55:03] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:55:09] <monochrom> You can ellide all 3 extensions, especially when you also use "whee p = ... (minBound `asProxyTypeOf` p) ..."
[03:56:10] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:57:04] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:58:10] *** Joins: Guest372 (~xxx@47.245.54.240)
[03:59:04] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[03:59:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e)
[04:00:11] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:00:24] <Inst> bingo
[04:00:27] <Inst> let's see how it goes
[04:00:34] <Inst> i talked my champion influencer friend into learning haskell
[04:01:04] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:01:11] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[04:01:29] <Inst> only a matter of time before i talk her into trying to bribe randumbs into learning haskell so they can get a hold of korean comics before they're officially released stateside
[04:02:11] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:02:50] <aegon> Inst: i'm very curous how this scheme plays out. Its very hustler-ey
[04:03:05] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:03:34] <Inst> well, main thing is that she's a bit ADHD-ish
[04:03:38] <Inst> she's studying to be an accountant
[04:03:44] <Inst> any way I can keep her away from Python, she's at CUNY
[04:03:45] <Inst> ?
[04:04:11] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:05:05] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:06:00] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[04:06:01] *** Joins: Guest87 (~Guest87@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[04:06:12] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:06:14] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[04:06:16] <Guest87> can I have a -fno-warn-incomplete-patterns for exactly one case of 
[04:06:27] <dsal> jackdk: Thanks.  I'm not sure which version I like more.   The one without the proxy is slightly easier on the user, I guess.
[04:06:32] <Guest87> without disabling the warning in all of the file
[04:06:46] *** Joins: burnsidesLlama (~burnsides@client-8-91.eduroam.oxuni.org.uk)
[04:06:55] <aegon> Guest87: not that I know of, why not complete the patterns?
[04:07:05] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:07:25] <Inst> ah crap, this sucks
[04:07:30] <Inst> CUNY -> City University of New York
[04:07:31] <monochrom> Yeah, easier to write the one single missing pattern.
[04:07:37] <Inst> they have like 20 different colleges spread throughout the city
[04:07:44] <Guest87> because it doesn't make sense in my case, I have a oneOf parser and if I don't get the value I expect the parser failed anyway
[04:07:55] <Inst> google it: not a single college offers a haskell-based intro course, the only Haskell course I see is graduate level
[04:08:10] <Guest87> well I'll just use some "default" value and call it a day
[04:08:12] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:08:30] <monochrom> a oneOf parser doesn't need incomplete patterns.
[04:08:40] <dsal> Guest87: You can define your own error or let the compiler make one up that you may or may not recognize.
[04:08:53] <aegon> Guest87: but without the rest of the patterns it will fail in a way you cant control, if it can fail shouldn't you handle the error case instead of undefined behavior land
[04:09:06] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:09:35] <aegon> you wont care about it till that case happens and you don't know why the program crashes
[04:09:35] <Guest87> monochrom: then how do I match against its result ?
[04:10:12] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:10:46] <Guest87> aegon: yeah but *in theory" it should never crash because I matched against all the inputs in oneOf
[04:10:55] <monochrom> oneOf s = anyChar >>= \c -> if c `elem` s then pure c else empty    --- where is the incomplete pattern?
[04:11:06] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:11:11] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[04:11:15] *** Quits: burnsidesLlama (~burnsides@client-8-91.eduroam.oxuni.org.uk) (Ping timeout: 260 seconds)
[04:11:43] <monochrom> And anyChar doesn't need incomplete pattern either, if that's what you mean.
[04:12:12] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:12:35] <Guest87> monochrom: I apparently wasn't clear, I'm something like `s <- oneOf "abc"` and then `case s of 'a' -> ...`
[04:12:56] <Guest87> s,something,doing something
[04:13:06] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:13:17] <monochrom> Then it is not a lot of work to add: _ -> error "doesn't happen"
[04:13:28] <awpr> `choice [char 'a' *> ..., char 'b' *> ..., char 'c' *> ...]`
[04:14:09] <awpr> (or just add the error and mention "impossible" in the message)
[04:14:13] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:14:31] <monochrom> I mean, suppose in the file there are like 20 places where you have to do that, sure, that's annoying.
[04:14:37] <monochrom> But you said just one place.
[04:14:46] <aegon> awpr: neat
[04:14:53] <monochrom> In fact, if there are 20 places, I turn off the warning altogether.
[04:15:03] <monochrom> In fact, I turn off the warning altogether, always.
[04:15:06] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:15:30] <Guest87> thank you very much, both solutions are perfect
[04:16:13] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:17:07] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:17:14] *** Quits: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net) (Ping timeout: 260 seconds)
[04:18:13] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:18:17] <aegon> :t *>
[04:18:19] <lambdabot> error: parse error on input ‘*>’
[04:18:24] <aegon> :t (*>)
[04:18:25] <lambdabot> Applicative f => f a -> f b -> f b
[04:19:07] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:20:15] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:21:07] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:22:14] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:22:46] <dsal> I don't appreciate the judgment of warnings.
[04:23:07] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:24:14] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:25:08] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:25:52] *** Joins: skreli (~skreli@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[04:26:05] <skreli> ?src ($)
[04:26:06] <lambdabot> f $ x = f x
[04:26:14] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:27:08] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:27:25] <aegon> ?src (&)
[04:27:25] <lambdabot> Source not found. My pet ferret can type better than you!
[04:27:31] <geekosaur> pity @src tells half the story there
[04:27:33] <aegon> rude
[04:27:35] <aegon> lol
[04:28:15] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:28:41] <dsal> Yeah, there's kind of an important feature missing from that src thing.
[04:29:08] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:29:15] <geekosaur> hm, intended to say less than half
[04:29:27] <geekosaur> since the fixity's the whole point of it
[04:29:49] <dsal> Oh.  Is there another important piece missing?
[04:30:15] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:30:20] <geekosaur> I was thinking of its response to ($)
[04:30:35] <geekosaur> where the whole point is `infixr 9`
[04:30:46] <geekosaur> sorry, 0
[04:30:53] <geekosaur> kee reversing the fixity levels
[04:31:09] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:32:07] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[04:32:15] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:32:49] <skreli> True, but you can get that half in ghci
[04:32:50] <dsal> % :i (&)
[04:32:50] <yahb> dsal: (&) :: a -> (a -> b) -> b -- Defined in `Data.Function'; infixl 1 &
[04:33:01] <skreli> :i ($)
[04:33:09] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:33:17] <skreli> % :i ($)
[04:33:17] <yahb> skreli: ($) :: (a -> b) -> a -> b -- Defined in `GHC.Base'; infixr 0 $
[04:34:15] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:34:19] <geekosaur> yes, but it'd be nice if @src reported it since what it does report is kinda useless
[04:35:07] <dsal> Where does @src come from?
[04:35:09] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:35:29] *** Quits: mmhat (~mmh@55d45d75.access.ecotel.net) (Ping timeout: 258 seconds)
[04:36:08] <geekosaur> hardcoded database in the lambdabot repo
[04:36:16] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:37:10] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:37:56] *** Parts: skreli (~skreli@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (WeeChat 3.3)
[04:38:11] *** Joins: skreli (~skreli@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[04:38:16] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:39:10] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:40:17] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:40:57] <aegon> is there a way to turn on warnings for shadowing vars?
[04:41:10] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:41:52] *** skreli is now known as Clark
[04:42:14] <geekosaur> -Wname-shadowing ?
[04:42:16] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:43:10] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:44:11] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 264 seconds)
[04:44:17] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:44:36] *** Clark is now known as Hayek
[04:45:10] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:45:46] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:e12b:5f61:be92:9101) (Remote host closed the connection)
[04:46:02] <aegon> geekosaur: thanks 
[04:46:03] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:e12b:5f61:be92:9101)
[04:46:17] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:47:11] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:48:17] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:49:11] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Read error: Connection reset by peer)
[04:49:11] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:49:18] *** Joins: mmhat (~mmh@55d456b5.access.ecotel.net)
[04:49:45] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[04:50:17] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:51:11] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:52:18] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:53:11] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:53:20] *** Parts: Hayek (~skreli@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (WeeChat 3.3)
[04:54:18] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:54:55] <dsal> :t (>=>)
[04:54:56] <lambdabot> Monad m => (a -> m b) -> (b -> m c) -> a -> m c
[04:55:12] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:55:16] <dsal> It's only ever occurred to me that I should use that once.  But I've used it more than once.  I should probably understand it at some point.
[04:55:35] <dsal> I guess it reads pretty clearly.
[04:56:18] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:57:12] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:57:46] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[04:58:19] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:58:30] *** Joins: mud (~mud@user/kadoban)
[04:58:57] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:59:12] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:00:19] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:01:12] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:02:19] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:03:13] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:04:20] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:05:13] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:06:20] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:07:13] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:08:20] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:08:25] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[05:09:01] *** Quits: jespada (~jespada@2803:9800:9842:7a62:9560:3718:bb2f:f5ee) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:09:14] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:09:53] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 265 seconds)
[05:10:20] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:10:57] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::4b63)
[05:11:14] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:11:27] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[05:12:20] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:13:14] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:13:19] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Read error: Connection reset by peer)
[05:14:20] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:14:55] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[05:15:14] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:16:21] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:17:14] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:18:21] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:19:15] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:20:21] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:21:15] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:22:21] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:22:46] *** Quits: xff0x (~xff0x@2001:1a81:524c:400:5205:21d5:64e1:92) (Ping timeout: 252 seconds)
[05:23:15] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:23:49] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[05:23:54] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[05:24:21] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:24:25] *** Joins: xff0x (~xff0x@2001:1a81:5287:aa00:5b1b:a88f:ea9:b216)
[05:24:46] *** Joins: guydb89 (~guy@98.40.140.117)
[05:25:15] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:26:22] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:27:15] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:28:22] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:29:16] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:30:22] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:31:16] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:32:23] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:32:36] *** Quits: mmhat (~mmh@55d456b5.access.ecotel.net) (Ping timeout: 258 seconds)
[05:33:16] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:34:23] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:35:16] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:36:23] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:37:17] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:37:17] *** Joins: Hayek (~skreli@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[05:38:23] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:39:05] *** Parts: Hayek (~skreli@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) ()
[05:39:17] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:39:19] *** Joins: Hayek (~skreli@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[05:39:35] *** Parts: Hayek (~skreli@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) ()
[05:39:38] *** Joins: Hayek (~skreli@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[05:40:01] *** Quits: Guest87 (~Guest87@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[05:40:24] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:40:24] *** Quits: Hayek (~skreli@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Client Quit)
[05:40:41] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[05:41:17] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:42:24] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:42:24] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[05:43:18] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:43:18] *** Joins: MQ-17J (~MQ-17J@8.21.10.17)
[05:44:08] <sm> how do I make an IOException, so I can throwIO it ?
[05:44:24] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:45:18] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:46:22] <sm> call ioError or userError msg, I guess - IOError seems to be a synonym
[05:46:25] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:46:26] *** Joins: ente1 (~ente@p200300dc5f17790014214a4427ad1af6.dip0.t-ipconnect.de)
[05:46:40] *** Joins: mmhat (~mmh@55d497bf.access.ecotel.net)
[05:46:57] <ente1> what would you use for wring a json rest api in haskell?
[05:47:02] *** ente1 is now known as ente_
[05:47:04] <monochrom> Yeah, ioError (userError msg)
[05:47:18] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:48:25] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:49:19] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:49:21] <monochrom> or s/ioError/throwIO/ if you like. Doesn't matter which.
[05:49:48] <aegon> ente_: Scotty
[05:49:49] <Hayek> ?src zipWith
[05:49:50] <lambdabot> zipWith f (a:as) (b:bs) = f a b : zipWith f as bs
[05:49:50] <lambdabot> zipWith _ _      _      = []
[05:50:18] <aegon> ente_: Scotty + Aeson
[05:50:25] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:51:13] <aegon> theres a real world scotty example app but its kinda over the top in class seperation imo
[05:51:19] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:52:23] <aegon> ente_: what kind of storage are you communicating with
[05:52:25] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:53:19] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:54:26] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:55:19] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:56:01] <ente_> aegon: do you mean database? I honestly have no idea; before I just always used postgres (in conjunction with Go)
[05:56:26] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:56:30] <shapr> I wrote a scotty app if you want to see something that works.
[05:56:50] *** Quits: mrianbloom (sid350277@id-350277.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[05:56:50] *** Quits: mcfilib (sid302703@user/mcfilib) (Ping timeout: 260 seconds)
[05:56:50] *** Quits: teehemkay (sid14792@id-14792.lymington.irccloud.com) (Ping timeout: 260 seconds)
[05:56:50] *** Quits: td_ (~td@94.134.91.188) (Ping timeout: 260 seconds)
[05:56:52] *** Quits: kristjansson_ (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 252 seconds)
[05:56:52] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 252 seconds)
[05:56:53] <aegon> ente_: depending on how comfy you are with haskell persistent then postgresql-simple and resource-pool are good
[05:57:03] *** Joins: td_ (~td@94.134.91.188)
[05:57:08] *** Quits: grfn (sid449115@id-449115.helmsley.irccloud.com) (Ping timeout: 258 seconds)
[05:57:10] <aegon> persistent is more black boxey than postgresql-simple
[05:57:19] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:57:25] *** Quits: gaze___ (sid387101@id-387101.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[05:57:27] <ente_> aegon: I have never used anything
[05:57:44] <ente_> aegon: but postgresql-simple sounds ... simple
[05:58:00] *** Quits: rune (sid21167@id-21167.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[05:58:00] *** Quits: sclv (sid39734@haskell/developer/sclv) (Ping timeout: 260 seconds)
[05:58:26] *** Joins: Guest372 (~xxx@47.245.54.240)
[05:58:31] *** Quits: econo (uid147250@user/econo) (Ping timeout: 252 seconds)
[05:58:31] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 252 seconds)
[05:58:35] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 260 seconds)
[05:58:35] *** Quits: Adeon (sid418992@id-418992.lymington.irccloud.com) (Ping timeout: 260 seconds)
[05:58:35] *** Quits: whez (sid470288@id-470288.lymington.irccloud.com) (Ping timeout: 260 seconds)
[05:58:40] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Ping timeout: 258 seconds)
[05:58:56] <ente_> aegon: bruh https://imgur.com/a/kj0TE7p
[05:58:59] *** Joins: gaze___ (sid387101@helmsley.irccloud.com)
[05:59:03] *** Joins: whez (sid470288@lymington.irccloud.com)
[05:59:03] <aegon> it is, i used it and was happy, now that i'm more familiar with haskell stuff though I wish i'd gone with persistent for all the magic it provides. 
[05:59:04] *** Joins: mcfilib (sid302703@user/mcfilib)
[05:59:04] *** Joins: bitmapper (uid464869@lymington.irccloud.com)
[05:59:05] *** Joins: teehemkay (sid14792@lymington.irccloud.com)
[05:59:06] *** Joins: grfn (sid449115@helmsley.irccloud.com)
[05:59:20] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[05:59:21] <ente_> aegon: hmm... I'll have a look at both ig
[05:59:21] *** Joins: rune (sid21167@ilkley.irccloud.com)
[05:59:24] *** Joins: mrianbloom (sid350277@ilkley.irccloud.com)
[05:59:30] *** Joins: hubvu (sid495858@user/hubvu)
[05:59:36] *** Joins: econo (uid147250@user/econo)
[05:59:42] *** Joins: sa (sid1055@tinside.irccloud.com)
[05:59:45] <aegon> if shapr has code thats public that'd be a huge time saver, i ended up with something like this https://github.com/scotty-web/scotty/blob/master/examples/reader.hs in the reader i threw a resource-pool of postgresql-simple connections
[05:59:47] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[06:00:04] <ente_> btw - how do you install libraries in haskell 
[06:00:09] *** Joins: sclv (sid39734@haskell/developer/sclv)
[06:00:19] <aegon> and took some of the monad transformer / effect composition stuff from this https://github.com/eckyputrady/haskell-scotty-realworld-example-app
[06:00:22] <ente_> I have seen stack and ghc-pkg but am still a bit coonfused
[06:00:26] *** Joins: Guest372 (~xxx@47.245.54.240)
[06:00:29] *** Joins: hook54321 (sid149355@user/hook54321)
[06:00:38] <ente_> (sorry if that's a *very* noob question)
[06:01:20] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[06:01:50] *** Joins: Adeon (sid418992@lymington.irccloud.com)
[06:01:53] <aegon> ente_: stack or cabal i think but i'm old and don't do nix stuff. imo if your new stack is the easiest way to get rollin but i think an equal number would say cabal has caught up in features
[06:02:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:04:10] <shapr> Yeah, either one is fine.
[06:05:20] <c_wraith> Is there any fancy number theory trick to efficiently distinguish a prime from the square of a prime?
[06:06:15] <shapr> here's something I wrote three years ago that uses spock: https://github.com/shapr/sporkle/blob/master/app/Main.hs
[06:06:19] <shapr> it was a demo for teaching others.
[06:06:59] <shapr> here's a different thing I wrote using Scotty: https://github.com/shapr/fermatslastmargin
[06:09:15] <byorgey> c_wraith: I don't know of any way to do better than e.g. testing if the number is a square (by computing the square of its integer square root) or testing for primality.
[06:10:12] <aegon> ente_: and heres the bits i can share of the scotty thing i did https://paste.tomsmeding.com/SOgubUXf
[06:10:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:10:38] *** Quits: td_ (~td@94.134.91.188) (Ping timeout: 260 seconds)
[06:11:27] <byorgey> c_wraith: hmm, I guess you can get a tiny bit of mileage out of the fact that odd squares in base 10 must end in 1, 5, or 9
[06:12:17] <byorgey> and maybe you can quickly rule out some other cases by considering the remainder modulo some other divisors
[06:12:24] *** Joins: td_ (~td@94.134.91.189)
[06:12:57] <Inst> yeah, here's the problem with getting drunk and BS-ing, no one will answer your haskell questions
[06:13:03] <Inst> okay, I have something weird
[06:13:15] <Inst> or maybe not
[06:13:54] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 260 seconds)
[06:13:59] <Inst> yup, debugged it, it's weird
[06:14:42] <Inst> i tried a simple recursive function, it's probably a syntax error on VSCode GHCi somewhere
[06:14:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[06:15:35] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:17:17] <c_wraith> byorgey: hmm.  all odd squares have remainder 1 mod 8.  That's probably good enough of a first pass that testing the integer square root is ok as the next pass.
[06:18:13] <byorgey> c_wraith: ah, nice
[06:18:48] <byorgey> and you don't even have to do any division, just look at the last 3 bits
[06:18:53] <c_wraith> yeah
[06:19:08] <byorgey> also, how big are these numbers?
[06:19:32] <c_wraith> in all honesty, probably small enough that just doing a floating point square root would work. But I don't want to count on it
[06:20:04] <byorgey> fair enough
[06:21:07] *** Quits: mmhat (~mmh@55d497bf.access.ecotel.net) (Quit: WeeChat 3.3)
[06:24:54] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Remote host closed the connection)
[06:25:02] <aegon> ente_: if this is like your first whack at haskell monad transformers were super scary for me and every web framework has em at the base, this is long but good https://www.fpcomplete.com/haskell/tutorial/monad-transformers/
[06:25:25] *** Quits: MQ-17J (~MQ-17J@8.21.10.17) (Ping timeout: 260 seconds)
[06:26:23] <dsal> I'm fairly anti-persistent after having gone through that debate recently.
[06:26:33] <aegon> ente_: and i think the thing that really tripped me up is that the runReaderT etc create the context
[06:26:53] <dsal> It's probably cool if you don't care about databases, but there were too many things I couldn't figure out how to do in persistent even before I got to the stuff it wouldn't do at all.
[06:27:07] <aegon> dsal: yeah i had to ad postGIS types to postgresql-simple and i don't think i would have been able to figure out how to do that with all the complexitiy of persistent
[06:27:15] <aegon> *add
[06:27:15] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[06:27:28] <dsal> Right.  enums and postgis both look nightmarish.
[06:28:12] <dsal> PG enums are why I was asking about proxies/type applications earlier.  I realized I've never actually looked at how type applications worked, just sort of cargo culted them around.  Made life easier.
[06:28:36] <dsal> Now I have a test thing that's like `pgEnumsMatch @HaskellType "postgres_type"` and it does all the fancy tests.
[06:29:07] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[06:30:14] <aegon> dsal: did any blog post or docs get you to an aha moment? I used type applications in HaskTorch's gradually typed stuff and thought I knew them, then went to use em in a new project and chased my tail around for a day before reforming the problem to not need them
[06:31:01] <aegon> (type applications that is)
[06:31:22] <dsal> I just read this:  https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/type_applications.html
[06:31:34] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[06:32:37] <dsal> I usually don't need them, but my problem here was basically the above.  I want to test that of this haskell type occupants are the same as the postgres enum values.  I'm going to have a few of these, so I just wanted to do the thing once.
[06:35:22] *** Quits: InstX1 (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[06:36:15] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[06:36:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[06:36:47] <dsal> Turns out reading documentation can really shave some time off of understanding things.  I also hadn't looked up AllowAmbiguousTypes.  That sounds scary, but it's for exactly this type of thing.
[06:37:30] <awpr> yeah, a lot of GHC extensions suffer from people being needlessly scared of them
[06:37:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:37:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:37:47] *** Joins: wroathe (~wroathe@user/wroathe)
[06:38:26] <dsal> It's kind of a scary sounding name.
[06:38:57] <aegon> for whatever reason it seems impossible for me to find the ghc users guide when i want it. I'll get tons of monday morning haskell / fp complete posts but never a link to the actual docs. need to up my google / duckduckgo game
[06:39:15] <awpr> exactly, that's what I mean.  `UndecidableInstances` is also really scary sounding, but it just means to turn off the guard rails that stop you from writing infinite loops in your types
[06:40:29] <dsal> Heh, I just went off to read about UndecidableInstances and came back and you were talking about it.
[06:41:23] <aegon> i thought there was a vote around default enabling some extensions
[06:41:39] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[06:41:42] <dsal> It's really helpful to read these things, but I like to wait until I'm maximally dumb.  I remember reading about `FunctionalDependencies` and kind of glazed over a bit and couldn't imagine a case where I needed that.  A couple of days later…
[06:44:40] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 258 seconds)
[06:45:58] *** Joins: mbuf (~Shakthi@136.185.83.238)
[06:48:54] *** Quits: guydb89 (~guy@98.40.140.117) (Ping timeout: 260 seconds)
[06:48:59] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 264 seconds)
[06:49:16] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 258 seconds)
[06:49:24] *** Joins: cheater (~Username@user/cheater)
[06:54:25] <davean> aegon: How about IncoherentInstances?
[07:05:37] *** Joins: dut (~dut@user/dut)
[07:07:16] <Axman6> @djinn (b -> c) -> (d -> e -> b) -> d -> e -> c
[07:07:16] <lambdabot> f a b c d = a (b c d)
[07:12:36] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[07:14:17] *** Quits: dut (~dut@user/dut) (Quit: Leaving)
[07:15:06] <aegon> davean: not familiar with it, it seems Incoherent
[07:20:47] <davean> aegon: you'll take the instance we give you, and don't expect us to be consistent about it!
[07:21:23] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[07:24:54] <davean> aegon: never wanted to instances of Ord for one type?
[07:26:27] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[07:29:35] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[07:30:42] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[07:34:48] *** Joins: fawful (~guy@c-76-104-217-93.hsd1.wa.comcast.net)
[07:34:56] <aegon> how would it choose? that sounds like a recipe for disaster
[07:36:47] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:37:57] *** Quits: fawful (~guy@c-76-104-217-93.hsd1.wa.comcast.net) (Client Quit)
[07:38:57] *** Joins: fawful (~guy@c-76-104-217-93.hsd1.wa.comcast.net)
[07:39:08] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:45:24] <davean> aegon: It would choose whichever it wanted at any given moment of course
[07:46:10] *** Quits: fawful (~guy@c-76-104-217-93.hsd1.wa.comcast.net) (Quit: WeeChat 3.2)
[07:47:10] <davean> Look, we promise you'll only be given one of them in a given case - isn't that good enough for you?
[07:50:01] <aegon> well, the compiler knows best, i'll run with it
[07:57:39] <davean> aegon: its the scariest language extension I think a sane programemr will have to use at some point
[07:58:06] <davean> or put another way, that its the scariest langauge extension that there might not be a better way to do it
[07:59:30] *** Quits: bitmapper (uid464869@lymington.irccloud.com) (Quit: Connection closed for inactivity)
[08:04:20] *** Joins: reumeth (~reumeth@user/reumeth)
[08:06:34] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.125)
[08:09:23] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Ping timeout: 258 seconds)
[08:10:31] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[08:11:05] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[08:11:28] <aegon> davean: looks like it was changed to OverlappingInstances
[08:16:52] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[08:18:42] *** Quits: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net) (Read error: Connection reset by peer)
[08:18:55] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[08:21:12] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[08:23:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:23:11] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:26:19] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:29:01] <davean> aegon: no - there was a change but it was to make it specific to a given instance istead of a general language extension
[08:30:59] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::4b63) (Ping timeout: 264 seconds)
[08:32:24] *** Joins: schuelermine (~anselmsch@user/schuelermine)
[08:32:25] <davean> aegon: and incoherent is far worse than overlapping
[08:32:38] <schuelermine> what even is the use for -XIncoherentInstances?!
[08:32:42] <davean> See https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/instances.html#overlapping-instances
[08:32:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:33:36] <davean> schuelermine: If you have to ask, I don't want to put ideas into your head ...
[08:34:39] <schuelermine> I feel like the advantages of coherence could be done by simply allowing types to carry instances, i.e. a dumbed down dependent typing system, then type classes could be handled as ?implicit parameters
[08:34:52] <aegon> overlapping sounds like sfinae 
[08:34:56] <schuelermine> I guess ‘simply’ is a big word here
[08:35:06] <schuelermine> aegon: what the hell do you mean by that?
[08:35:07] <dsal> -XSurpriseInstances
[08:35:56] <aegon> whoa, that  was a strong reaction :P I mean in template substitution where in c++ it will choose the most specific match
[08:36:04] <aegon> https://en.cppreference.com/w/cpp/language/sfinae
[08:36:11] <schuelermine> aegon: the reaction was not meant negatively, I was merely confused
[08:36:18] <davean> aegon: most specific match is what overlapping instances does
[08:36:19] <schuelermine> sorry if that came accross the wrong way
[08:36:42] <aegon> oh sorry i mistook it, i wasn't offended just poking fun
[08:37:08] <c_wraith> however...  sometimes the most specific match can become...  hidden.
[08:37:13] <aegon> and most specific isn't really related to sfinae, :X i just heard it in the same video from cpp weekly where he was going over function resolution
[08:37:28] <davean> c_wraith: yah, I mean it doesn't work in a sane manner
[08:37:35] <davean> there can be ... incoherence
[08:37:44] <schuelermine> I guess people find “what the hell” strong? idk, but I think I’ve had one other instance of people reacting negatively to that…
[08:37:46] <davean> but its not the same as incoherent instances
[08:37:53] <aegon> c_wraith: so ghc could stop searching for a "most specific" in some cases?
[08:38:11] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[08:38:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[08:39:14] <c_wraith> aegon: it sometimes can't see that there's something more specific due to calling patterns.  I don't actually know how to trigger the behavior, I just know I've seen it before.
[08:39:23] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[08:39:53] *** Joins: wroathe (~wroathe@user/wroathe)
[08:39:56] <c_wraith> aegon: like when working in a polymorphic context, sometimes the instance selection gets deferred to a location that no longer has the necessary information
[08:40:54] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[08:42:51] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[08:43:40] *** Joins: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184)
[08:44:03] <davean> aegon: out of curiosity what made you think incoherent instances was replaced by overlapping?
[08:44:10] <davean> That might be a documentation weakness somewhere?
[08:44:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:44:47] *** Quits: emf_ (~emf@2620:10d:c090:400::5:70ff) (Ping timeout: 264 seconds)
[08:44:51] <aegon> no its a bad reading by me, I read the section title as Overlapping Instances then processed taht IncoherentInstances was a "deprecated extension" so i assumed it was replaced
[08:45:06] <aegon> reading the whole section clarifies though, they both exist but they are more specific now / tied to an instance
[08:45:18] <aegon> i'm still digging into it, it does sound scary
[08:45:26] <aegon> i cant think of a time I'd want the Incoherent behavior
[08:47:42] <davean> Its not the behavior you'd want
[08:47:51] <davean> Its that its the only way you could encode what you *did* want in Haskell
[08:47:57] <davean> Its the removal of the restriction
[08:50:40] *** Quits: schuelermine (~anselmsch@user/schuelermine) (Ping timeout: 252 seconds)
[08:51:24] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:57:21] <aegon> i see, hmm, well, maybe not. I don't see what you'd have to encode this way. It seems to add more flexibility for instance resolution, i've used FlexibleContexts before but I don't see what would *require* Incoherent instances, is it a side effect of the intermidiate stage thats needed by the compiler before it determines the overlapping resolution?
[08:59:26] <c_wraith> Incoherent instances are for when you have overlapping instances where options are tied in specificity
[08:59:37] <c_wraith> That is in no way required by FlexibleContexts
[09:00:22] <c_wraith> The only way incoherent instances would get involved is if you have *multiple* instances that differ only on constraints, or something like that
[09:03:41] <aegon> is there a sane example of where you need that? I'm trying to contrive up something and coming up blank
[09:04:15] <aegon> if i'm understanding correctly your talking aobut something like instanse Show (Int, b) and instance Show (b, Int)
[09:05:07] *** Joins: Guest27 (~Guest27@2601:281:d480:2ce0:28de:914f:fac6:10b7)
[09:05:25] <c_wraith> that's an example, yes
[09:05:37] <c_wraith> there's no most-specific option to match (Int, Int)
[09:06:43] <aegon> but like, why would a lib dev want such a thing :?
[09:07:30] <aegon> or i guess need to be able to allow for such a thing
[09:07:30] *** Joins: mei (~mei@user/mei)
[09:07:35] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[09:08:36] <c_wraith> The cases I've seen where it actually is *helpful* is when you happen to know that for whatever reason, every instance it might select is equivalent
[09:09:08] <c_wraith> And you have other requirements that prevent expressing it as a single constraint
[09:09:27] <c_wraith> It's not a common thing.  Most people never need it.
[09:15:30] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.125) (Quit: mikoto-chan)
[09:15:57] <aegon> theres some cool info in the users guide i glossed over. this stuf is neat. I've kinda just accepted FlexibleInstances, FlexibleContexts etc as hand wavy things some libs need in order to be used
[09:19:53] *** Quits: Guest27 (~Guest27@2601:281:d480:2ce0:28de:914f:fac6:10b7) (Ping timeout: 256 seconds)
[09:28:18] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[09:35:00] *** Quits: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 260 seconds)
[09:35:23] <davean> aegon: more people should RTFM
[09:36:30] <davean> aegon: Honestly it wouldn't take that long to get a basic idea of every extension by reading the manual - if you're bored some day ...
[09:36:57] <aegon> i'll definitely do it, for some reason i read all of real world haskell and learn you a haskell then skimped on the manual
[09:37:00] <aegon> derp
[09:37:16] <aegon> i gotta read the inside of my eye lids for a couple hours though :)
[09:37:43] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[09:44:05] *** Joins: benin (~benin@183.82.207.116)
[09:45:36] *** Joins: chele (~chele@user/chele)
[09:48:42] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[09:51:02] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:70bb:31e2:9b65:43)
[09:52:27] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[09:53:05] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 260 seconds)
[09:57:35] *** Joins: jakalx (~jakalx@base.jakalx.net)
[10:00:38] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[10:01:00] *** Joins: ArctVaulMarsHMPJ (~pjetcetal@128-71-225-36.broadband.corbina.ru)
[10:01:21] *** Quits: ArctVaulMarsHMPJ (~pjetcetal@128-71-225-36.broadband.corbina.ru) (Read error: Connection reset by peer)
[10:03:12] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[10:04:02] *** Quits: connrs (~connrs@conners.plus.com) (Read error: Connection reset by peer)
[10:04:20] *** Joins: connrs (~connrs@conners.plus.com)
[10:04:35] *** Quits: timCF (~timCF@m91-129-111-87.cust.tele2.ee) (Ping timeout: 264 seconds)
[10:12:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:14:47] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 264 seconds)
[10:15:11] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: Reconnecting)
[10:15:34] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[10:16:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[10:18:22] *** Joins: pfurla (~pfurla@ool-182ed2e2.dyn.optonline.net)
[10:19:01] *** Quits: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184) (Remote host closed the connection)
[10:22:21] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[10:23:04] *** Quits: pfurla (~pfurla@ool-182ed2e2.dyn.optonline.net) (Ping timeout: 252 seconds)
[10:24:00] *** Joins: pfurla (~pfurla@216.151.180.27)
[10:30:50] *** Quits: hueso_ (~root@user/hueso) (Ping timeout: 246 seconds)
[10:31:26] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[10:36:38] *** Joins: Guest27 (~Guest27@2601:281:d480:2ce0:28de:914f:fac6:10b7)
[10:37:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:38:11] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:e12b:5f61:be92:9101) (Ping timeout: 264 seconds)
[10:38:16] *** Joins: michalz (~michalz@185.246.204.41)
[10:41:41] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[10:42:07] *** Joins: ubert (~Thunderbi@178.165.203.151.wireless.dyn.drei.com)
[10:43:37] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[10:44:29] *** Joins: vpan (~0@212.117.1.172)
[10:45:52] *** Joins: hueso (~root@user/hueso)
[10:46:10] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 258 seconds)
[10:49:08] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[10:50:26] *** Quits: Guest27 (~Guest27@2601:281:d480:2ce0:28de:914f:fac6:10b7) (Quit: Client closed)
[10:50:50] *** Quits: xff0x (~xff0x@2001:1a81:5287:aa00:5b1b:a88f:ea9:b216) (Ping timeout: 260 seconds)
[10:52:20] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:54:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[10:55:03] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[10:55:03] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[10:57:27] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:01:17] *** Quits: alx741 (~alx741@186.178.108.23) (Quit: alx741)
[11:03:07] *** Joins: xff0x (~xff0x@2001:1a81:5287:aa00:5b1b:a88f:ea9:b216)
[11:04:43] <dminuoso> 08:54:08          davean | [06:05:23] aegon: more people should RTFM
[11:04:46] <dminuoso> This channel would be so quiet.
[11:04:49] <dminuoso> :>
[11:05:17] <dminuoso> Something like half questions in here are covered in GHC or cabal manuals.. 
[11:07:25] <Profpatsch> Just because it’s written down doesn’t mean it’s discoverable
[11:07:52] <davean> Profpatsch: I mean its basicly the definition of discoverable to be in the manual
[11:08:06] <davean> If you haven't read the manual for tools you use, are you even trying to understand?
[11:09:53] <tomsmeding> TBH the ghc user's guide amounts to a huge amount of pages. Now actually the user's guide is actually structured quite well (and indexed in search engines) so you can actually find what you want, but in general "it's in the manual = discoverable" is untrue: "it's in a 300 page scanned PDF" is _not_ discoverable.
[11:10:27] <davean> the GHC manual was never in a PDF during the time I've been in Haskell which is over a decade
[11:10:41] <davean> but even then - don't you read the manuals of your tools when you start using them?
[11:10:50] <tomsmeding> not if they're hundreds of pages long, no
[11:11:03] <Rembane_> Knowing what to google to find the right thing in the manual is a skill in itself, a skill many here have, but probably not the people who ask the RTM-worthy questions. 
[11:11:05] <tomsmeding> but I agree the GHC manual has discoverable materual :)
[11:11:08] <tomsmeding> *material
[11:11:09] <davean> The GHC manual was a tiny fraction of what I read getting started with Haskell
[11:11:12] <tomsmeding> Was just responding to the general remark
[11:11:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[11:12:00] <tomsmeding> maybe I'm one of those stupid young people that can't bother to spend days reading a manual before getting started, but no, I don't :p
[11:12:20] *** Quits: son0p (~ff@181.136.122.143) (Read error: Connection reset by peer)
[11:12:23] <davean> tomsmeding: Saved me a lot more than the day it took to read - and it was an interesting day
[11:12:27] <davean> a day worth it all on its own
[11:13:01] <davean> Honestly a large portion of the problems I've had with GHC were not keeping up
[11:13:13] <Profpatsch> davean: are you saying you have read the manual of every tool you use?
[11:13:18] <Profpatsch> *doubt*
[11:13:22] *** Joins: cfricke (~cfricke@user/cfricke)
[11:13:25] <[exa]> #haskell the best hackage indexing service
[11:13:30] <davean> Profpatsch: I read the manual for every tool thats a major part of what I do
[11:13:43] <davean> I mean the gcc one was pretty bad
[11:13:58] <Profpatsch> I mean, good on you
[11:14:15] <dminuoso> tomsmeding: Honestly I think over the past decades, the velocity of things have trained people to refuse consulting or reading long documents.
[11:14:21] <Profpatsch> But like, can’t expect everybody to do that (esp if neurodivergent)
[11:14:22] <dminuoso> Webpages like stackoverflow did great damage in that regard.
[11:14:35] <Profpatsch> It’s called lazy evaluation
[11:14:45] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:14:57] <Profpatsch> Plus, UX research has somewhat progressed
[11:15:10] <davean> Profpatsch: UX has nothing to do with understanding
[11:15:14] <davean> UX can't think for you
[11:15:18] <Profpatsch> (although a single greppable html page is somehow still the pinnacle of discoverability …)
[11:15:46] <davean> You need a library of knowlege to build on
[11:16:00] <Rembane_> davean: Have you ever considered making a podcast where you review manuals? 
[11:16:01] <davean> if you don't have the basic ideas you can't think the thoughts
[11:16:23] <Profpatsch> davean: I have the library of all possible books, and I tend to lazily recurse into what seems useful at the time
[11:16:31] <davean> Rembane_: People would get bored on episode 30 of "I wonder why people wanted this" about the emacs manual
[11:16:36] <Profpatsch> https://libgen.is/
[11:16:55] <Rembane_> davean: I would listen! So you would have an audience of > 0 :D
[11:17:32] <davean> (actually the emacs manual wasn't that long, its just cut up into tiny pieces)
[11:17:41] <davean> (Theres a lot of non-manual stuff)
[11:17:47] <Profpatsch> imho the change in how people consume information hasn’t so much to do with stackoverflow
[11:17:51] <Profpatsch> as it has with the hyperlink
[11:18:06] <Profpatsch> You don’t *have* to study Tomes front-to-back, so people tend not to
[11:18:06] <davean> BTW Profpatsch I use to act like you do
[11:18:28] <davean> But it was after a decade of slowly realizing it had caused a rotten foundation and I was fundimentally worse at the things I did for it that I changed
[11:18:38] <davean> it was a very slow change
[11:18:59] <davean> Of realizing having expediently answered a question didn't teach me the principals behind it
[11:21:17] <davean> Well sorta. I mean thats more broad
[11:21:44] <davean> eh, the details and nuance are a long discussion and I want to go to bed
[11:22:04] <tomsmeding> just getting started with the day :)
[11:23:11] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:23:26] <maerwald> the best thing is writing tutorials for others, because then you see all the things you can't explain
[11:23:31] <Profpatsch> davean: I feel like it’s a complementary approach
[11:23:48] <Profpatsch> e.g. having to study the whole manual before writing your first line of code is not a good approach
[11:24:16] <Profpatsch> cause you usually want to evaluate quickly in the beginning before you invest a bunch of time
[11:24:46] <Profpatsch> but once you decide it’s the way to go and have some initial experience, it makes sense to sit your ass down and actually study the manual
[11:24:46] <maerwald> depends on the person
[11:24:49] <davean> more than slightly but less than significantly agree
[11:25:12] <tomsmeding> ("sort of"?)
[11:25:35] <Profpatsch> with nix I agree it would have been best to just study the manual
[11:25:52] <maerwald> there's no right way to learn nix, because it's not a structured ecosystem
[11:25:59] <Profpatsch> Would have saved me a lot of wtf and being annoyed at how arbitrary it all seemed
[11:26:10] <maerwald> well, it is arbitrary, that's the point... 
[11:26:19] <maerwald> it grew into all directions
[11:26:21] <Profpatsch> maerwald: the manuals are rather good, but also poorly structured so it’s hard to see why you want to read them and in what order
[11:26:22] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[11:26:32] <davean> maerwald: I think its the truth, and I try not to accept its the point
[11:26:34] <Profpatsch> But that’s a UX thing again
[11:26:40] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[11:26:49] <Profpatsch> GHC also has a User manual and the Haskell standard, and multiple other things
[11:27:11] <Profpatsch> e.g. knowing the GHC runtime flags is not super useful when you are learning how to HAskell
[11:27:23] <Profpatsch> esp since you are going to forget them as soon as yo uread them
[11:27:43] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[11:28:54] <davean> I'd thought I forgot them
[11:29:02] *** Joins: jumper149 (~jumper149@80.240.31.34)
[11:29:03] <davean> until years later I had a problem and had an idea how to fix it
[11:29:51] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[11:30:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:30:57] <davean> anyway this would be a fun seriously long off topic discussion
[11:31:03] <davean> but not now and not in #haskell
[11:33:28] <maerwald> you only need remember one: -fspecialise-aggressively
[11:33:30] <maerwald> :D
[11:33:39] <davean> maerwald: :<
[11:34:35] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 260 seconds)
[11:34:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[11:35:00] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[11:37:22] <davean> maerwald: So I take it your code doesn't have a lot of loops?
[11:37:35] <davean> (specificly that reuse class methods in multiple points in the loop)
[11:37:58] <maerwald> it safed my ass yesterday, optimizing streamly code
[11:38:23] <davean> Interesting - why wasn't the relivent functions marked INLINABLE?
[11:38:34] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[11:39:27] *** Quits: xff0x (~xff0x@2001:1a81:5287:aa00:5b1b:a88f:ea9:b216) (Ping timeout: 258 seconds)
[11:40:18] *** Joins: xff0x (~xff0x@2001:1a81:5287:aa00:b3ce:25bf:d052:b94e)
[11:44:04] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:46:29] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[11:46:55] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[11:47:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:48:35] *** Joins: MoC (~moc@user/moc)
[11:55:46] <dminuoso> Im using servant to accept a multi-form request, my wai application has a simple logger middleware around it. When I do simple `curl https://url -XPOST -F "data=@./sample.csv"` the logger middleware properly logs some `Content-Disposition: form-data; name="data"; filename="sample.csv"` followed by the blob of that file
[11:55:57] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb932154b917507392a6.dip0.t-ipconnect.de)
[11:56:14] <dminuoso> However, when our client sends a request to that same endpoint, the servant multiform part works properly, but the logger middleware acts as if this was no multiform post without any content disposition.
[11:56:50] <dminuoso> The request happens too rarely that I can simply sniff it the next time
[11:56:59] <maerwald> davean: there's INLINE everywhere, but if I remove this flag, performance drops from 7.5s to 8.5
[11:57:52] <dminuoso> Sorry I should have elaborated, servant expects `MultipartForm Mem (MultipartData Mem)`
[11:57:56] <c_wraith> dminuoso: the middleware would need to read the body to see that info.  If something else has already read it, it would only see an empty body
[11:58:05] <c_wraith> mutability!
[11:59:32] *** Joins: ub (~Thunderbi@178.165.203.151.wireless.dyn.drei.com)
[11:59:53] <dminuoso> c_wraith: Sure, but that would apply to my request as well as theirs.
[11:59:55] <dminuoso> It's the same server
[12:00:11] <dminuoso> Thing Im wondering is, are there multiple styles of multipart form-data that I dont know about?
[12:00:38] <c_wraith> oh, I missed that.  I see.
[12:01:05] <dminuoso> The confusing thing is, to the logger this is just http and headers.
[12:01:16] *** Joins: jgeerds (~jgeerds@55d40de2.access.ecotel.net)
[12:01:31] *** Quits: xff0x (~xff0x@2001:1a81:5287:aa00:b3ce:25bf:d052:b94e) (Ping timeout: 252 seconds)
[12:01:32] <c_wraith> is it logging request size?
[12:02:31] *** Joins: xff0x (~xff0x@2001:1a81:5287:aa00:fcfc:7af3:e2b:ab16)
[12:02:51] <dminuoso> Ohhh hold on.
[12:03:05] <dminuoso> c_wraith: I think you gave me an idea.
[12:04:23] <dminuoso> c_wraith: Perfect thanks! The logger middleware in wai-extras seems to only log request bodies if they are smaller than 2KiB.
[12:04:42] <c_wraith> huh.  that makes sense, but I wouldn't have thought of it.  Nice find.
[12:04:50] <tomsmeding> that's really obscure
[12:05:06] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:709e:32b8:8140:3ed0)
[12:05:12] <tomsmeding> oh _smaller_. I guess that makes sense in a way
[12:05:27] <c_wraith> it definitely makes sense.  it has to buffer anything it reads
[12:05:30] <dminuoso> It should be configurable.
[12:05:40] <dminuoso> I dont mind it defaulting to that limit, but I should be able to say "log everything"
[12:05:45] <c_wraith> and there's no limit on upload size.
[12:05:51] <dminuoso> Mmm
[12:05:59] <dminuoso> Well, at least I wanna be able to raise the threshold to something reasonable.
[12:06:00] <c_wraith> You really don't want someone to be able to make your server buffer multi-gigabyte files
[12:06:17] <dminuoso> c_wraith: You have to authenticate to that API anyway
[12:06:17] <c_wraith> yeah, even 100k wouldn't be an issue
[12:06:37] <dminuoso> I think this is a small fix to wai-extras
[12:06:42] <c_wraith> I'm less worried about attacks and more worried about bugs. :)
[12:06:44] <dminuoso> For now Ill simply log the data in the servant handler instead.
[12:07:12] <dminuoso> c_wraith: This is an API for just a single customer. If they DoS is it, it's their service that is degraded.
[12:07:20] <dminuoso> It's very simple for us to point fingers then.
[12:07:31] <c_wraith> heh.  With a single user, ok.  Once you get a second user....
[12:07:37] <dminuoso> We wont
[12:07:42] <dminuoso> This is a dedicated API that only this customer will ever see.
[12:07:53] <c_wraith> But in any case, you can certainly make it bigger than 2k without risk
[12:08:25] <dminuoso> Yeah, I can safely just add another field to https://hackage.haskell.org/package/wai-extra-3.1.7/docs/Network-Wai-Middleware-RequestLogger.html#t:RequestLoggerSettings
[12:08:40] <dminuoso> Some `Maybe Int` should be fine
[12:10:52] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e) (Remote host closed the connection)
[12:11:36] *** Joins: desantra (~skykanin@user/skykanin)
[12:12:24] *** Quits: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[12:12:41] *** Quits: desantra (~skykanin@user/skykanin) (Client Quit)
[12:15:44] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[12:16:06] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c703cb93c8c758eae23fe552.dip0.t-ipconnect.de)
[12:17:10] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[12:18:02] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:19:31] *** Joins: nehsou^ (~nehsou@wsip-68-227-92-38.mc.at.cox.net)
[12:19:42] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb932154b917507392a6.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[12:22:35] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[12:27:42] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 260 seconds)
[12:34:58] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[12:35:02] *** Joins: alzgh (~alzgh@user/alzgh)
[12:37:23] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[12:38:11] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[12:46:28] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[12:49:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[12:52:58] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[12:57:25] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 260 seconds)
[13:00:49] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb93c8c758eae23fe552.dip0.t-ipconnect.de)
[13:04:10] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c703cb93c8c758eae23fe552.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[13:11:17] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[13:15:46] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Ping timeout: 252 seconds)
[13:25:11] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[13:26:55] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[13:27:45] *** Quits: michalz (~michalz@185.246.204.41) (Ping timeout: 260 seconds)
[13:33:17] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[13:37:35] <Profpatsch> Word64 please :)
[13:45:29] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[13:57:45] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[14:00:15] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:00:15] <dminuoso> Sounds reasonable actually
[14:01:58] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 252 seconds)
[14:13:12] *** Joins: fendor (~fendor@91.141.35.79.wireless.dyn.drei.com)
[14:13:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:18:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[14:19:08] *** Joins: neurocyte0132889 (~neurocyte@213.188.113.91)
[14:19:08] *** Quits: neurocyte0132889 (~neurocyte@213.188.113.91) (Changing host)
[14:19:08] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:25:30] *** Joins: fusion86 (~fusion@2a02-a44c-e6e5-1-309e-d6f5-67ba-dda3.fixed6.kpn.net)
[14:27:17] *** Joins: michalz (~michalz@185.246.204.41)
[14:27:42] *** Joins: mmhat (~mmh@55d497bf.access.ecotel.net)
[14:30:52] *** Joins: alx741 (~alx741@186.178.108.23)
[14:33:34] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[14:36:58] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 260 seconds)
[14:45:56] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[14:46:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:46:29] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[14:49:07] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[14:49:17] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[14:50:58] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[14:53:47] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[14:54:22] <fusion86> Hey all. I have a small question about the record syntax and pattern matching. Pattern matching on your record usually results in less code to do the same thing, but when having nested records it can get clusterfucky. In the first snippet the code is small enough so that it doesn't really matter, but for the second snippet it really makes a difference. Which solution would be better? https://paste.tomsmeding.com/ohEg
[14:54:22] <fusion86> shI4
[14:54:47] <fusion86> Unfortunate max text size, link -> https://paste.tomsmeding.com/ohEgshI4
[14:55:37] <Rembane_> fusion86: I'm quite fond of composing the accessor functions, as in the second example 
[14:56:13] <Cajun> this seems like something lens and optics are meant to solve, right?
[14:57:28] <Rembane_> They do, but they also might be absolutely overwhelming depending on the developer 
[14:58:12] <fusion86> Yeah I am trying to keep it a bit simple because it's also a group project
[14:58:38] <Rembane_> That seems like a good approach 
[14:58:46] <fusion86> I've already caused enough feature creep :) Though I'll make a mental note to look at those two sometimes later.
[14:58:53] <Rembane_> :D
[14:58:54] *** Quits: shapr (~user@pool-108-28-144-11.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[14:59:02] <dminuoso> fusion86: lens/optics provide a language to do this pattern matching.
[14:59:25] <dminuoso> They are designed precisely for operating on deeply nested data structures.
[15:00:09] <dminuoso> I dont know the surrounding code, but perhaps they might be worth a lok into
[15:09:40] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[15:13:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[15:16:00] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[15:17:43] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[15:17:47] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Ping timeout: 264 seconds)
[15:18:48] <Profpatsch> fusion86: For records I’m quite fond of (&) a f = f a
[15:19:02] <Profpatsch> foo & barfield & bazfield
[15:19:30] <Profpatsch> Which is fine as long as you don’t need to update nested records a lot, in that case (micro)lens is a good solution
[15:19:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:19:32] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[15:20:57] * dminuoso thinks `optics` should always be mentioned alongside lens.
[15:21:42] <dminuoso> Their problem domain would already include Prisms, so microlens is not even an option
[15:22:53] <Cajun> optics (at least the library with the name) is a lot more friendly, good errors and very good documentation
[15:23:08] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[15:23:09] <Cajun> though isnt it possible to just make your own lenses with zero dependencies by just following the format?
[15:23:10] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[15:25:25] <dminuoso> sure, and optics can consume VL style optics too
[15:25:36] <dminuoso> There's helpers to build the profunctor representation for all (?) of them
[15:27:23] <Inst> [exa]
[15:27:26] *** Joins: Guest4208 (~neo3@cpe-292712.ip.primehome.com)
[15:27:34] <Inst> I have a friend, she's apparently a champion influencer and she's at CUNY
[15:27:50] <Inst> I'm selling her Haskell as her first language, with some lies about how Haskell is so incredibly remunerated when it's hard to get a job in Haskell
[15:27:51] <Franciman> Columbia University of New Yowk?
[15:27:58] <Inst> City University of New York
[15:28:29] <Inst> It used to be like UC system, then CUNY had some mandate to accept everyone and they jumped the shark
[15:28:37] <dminuoso> What is a champion influencer?
[15:28:49] <Franciman> somebody with a lot of instagram followers?
[15:28:58] <maerwald> is this still about evangelizing haskell?
[15:29:01] *** Guest4208 is now known as neo
[15:29:03] <Inst> dminuoso: on social media she can get people to listen to what she says, she's notorious for recruiting 1000 people to some webgame
[15:29:06] *** neo is now known as Guest9859
[15:29:12] *** Guest9859 is now known as neo3
[15:29:15] <unit73e> what's the haskell religion called?
[15:29:21] <unit73e> haskellism?
[15:29:44] <Inst> I'm wondering if you know anyone at CUNY, who might be able to guide her through independent study, although CUNY is so bad they have Haskell in graduate courses
[15:29:46] <dminuoso> Inst: Oh so champion is just a qualifier?
[15:29:53] <Inst> yeah
[15:29:55] <dminuoso> Inst: For a moment I wasnt sure whether that was a reference to some platform.
[15:29:56] <Hecate> unit73e: there is a sect called the Church of 𝛈-reduction
[15:30:03] <maerwald> coding is awful, I always tell people to pick a different career
[15:30:18] <Inst> it's money
[15:30:19] <unit73e> Hecate, lol there's always a religion about something
[15:30:28] <Hecate> unit73e: it's not a real one :P
[15:30:30] <Inst> alternatives might be to work 72 hours a day at minimum or near minimum wage for 40k a year incomes
[15:30:33] <dminuoso> maerwald: You generally sound very frustrated. Have you considered carpentry? :>
[15:30:44] <maerwald> dminuoso: I am an actual brick layer.
[15:30:48] <unit73e> wait, cuny? seriously?
[15:30:54] <Inst> also, in theory, if people are fine with adding to the list of people looking and waiting for Haskell jobs
[15:31:01] <dminuoso> maerwald: By actual, do you mean trained?
[15:31:05] <maerwald> yes
[15:31:07] <Inst> we could just deploy her to drag people into an online course
[15:31:09] <Inst> for haskell
[15:31:14] <Inst> as a first language / intro level, etc
[15:31:21] <dminuoso> maerwald: Interesting, how do go from masonry to software development?
[15:31:22] <Inst> might be able to get 100 students if you're interested in such
[15:31:30] <maerwald> dminuoso: it felt like the natural thing to do... LOL
[15:31:30] <unit73e> that's an unfortunate short name for a university
[15:31:40] <Inst> why?
[15:31:47] <Inst> I'm an ex-New Yorker. CUNY is perfectly natural.
[15:31:58] <maerwald> dminuoso: building crap and cheating your customers... it's kinda the same
[15:32:07] <unit73e> Inst, because cunny also means another thing
[15:32:09] <Inst> Oh, I think in American slang CUNY -> female genitalia is not a natural association.
[15:32:20] <dminuoso> maerwald: Except its not. Software development is better because there's absolutely no liability ever.
[15:32:24] <dminuoso> ;)
[15:32:26] <maerwald> true
[15:32:38] <Inst> Female genitalia is a common profanity in British slang, far less so in American English.
[15:32:42] <maerwald> for mixing concrete wrong you can get into prison in certain circumstances
[15:32:43] <unit73e> I laught at companies losing millions
[15:32:50] <unit73e> it's funny
[15:33:07] <Inst> CUNY happens to be a massive system, though, it's NYC
[15:33:17] <dminuoso> maerwald: Yeah I bet you can. There's tons of regulations on construction from what I hear.
[15:33:50] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[15:33:58] <unit73e> tbf if you cared about bugs involving lots of money you wouldn't sleep at night
[15:34:03] <dminuoso> Apparently you cant even use cement when its over an hour old?
[15:34:12] <dminuoso> *concrete
[15:34:45] <maerwald> "this function was written 4 years ago, can we still use it"
[15:34:46] <maerwald> xD
[15:34:46] <unit73e> huh yeah because it will dry
[15:35:03] <unit73e> that's not common knowledge?
[15:35:06] <maerwald> I only use frest functions
[15:35:09] <maerwald> *fresh
[15:35:19] <dminuoso> unit73e: No it's mostly just arbitrary regulation. After an hour it will not be dried out.
[15:35:31] <dminuoso> And it's a very conservative threshold
[15:35:36] <maerwald> dminuoso: there's concrete that hardens in 15 minutes 
[15:35:42] <maerwald> with lots of chemicals
[15:35:45] <Profpatsch> maerwald: funny thing but I think “this JS framework was written 4 years ago can we still use it”
[15:35:56] <Profpatsch> is being said thousands if not millions of times per day
[15:36:00] <dminuoso> maerwald: Interesting, Im guessing there's little to no water involved?
[15:36:09] <maerwald> it's fun to get those chemicals on your skin
[15:36:13] <maerwald> (not)
[15:36:21] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 258 seconds)
[15:36:47] <maerwald> at least while coding I can chill inside without getting burned by chemicals, crushed by cranes and stones etc
[15:36:52] <dminuoso> Profpatsch: Even in Haskell we started developing these common transitive dependencies that have been unmaintained for a long while.
[15:37:06] <dminuoso> Some of them are well written to the point it doesnt really matter, but others.. *shrugs*
[15:37:22] <maerwald> dminuoso: some statistics suggest the likelihood of dying is higher when working in construction compared to going to war
[15:37:44] <dminuoso> maerwald: and apparently agriculture has one of the highest injury rates ever.
[15:37:53] <maerwald> in software, it's more about suicide (it's amongst the top 10 suicidal jobs)
[15:37:59] <dminuoso> But that makes a lot of sense considering that farmers have to handle very large and dangerous equipment on their own every day..
[15:38:12] <zincy> maerwald: Where is the source for that stat?
[15:38:23] <maerwald> I read it on the internet lol
[15:38:28] <zincy> 4chan?
[15:38:34] <maerwald> not sure if it's a study
[15:39:30] <zincy> Suicidal jobs sounds like a curious way of raising the unemployment rate
[15:40:06] <dminuoso> *lowering you mean
[15:40:12] <dminuoso> people keep freeing up those jobs.
[15:40:35] <zincy> Suicidal jobs I read as the "job" is suicidal
[15:40:38] <maerwald> if you must code, avoid fintech and you'll be fine
[15:40:48] <zincy> Why avoid fintech?
[15:40:58] <unit73e> dminuoso, it has to be a paste or it will end up being clumps. I do get it that it's convervative
[15:41:04] <maerwald> I've never been in a more stressful environment than fintech in my entire life
[15:41:12] <zincy> Really? Tell more
[15:41:34] <maerwald> well, try it
[15:41:36] <maerwald> :D
[15:41:39] <dminuoso> I guess fintech has that extreme wall street mentality of "giving 170% on 22 hours a day"?
[15:41:40] <zincy> I am :D
[15:41:45] <dminuoso> With extreme pressure?
[15:41:55] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[15:42:20] <zincy> Yeah I can imagina some fintechs try and emulate goldman sachs culture
[15:42:45] <zincy> Most good coders have the luxury of just witching jobs no?
[15:42:49] <zincy> *switching
[15:42:51] <unit73e> maerwald, according to urban dictionary "Wall Street will be replaced by fintech some day in the near future."
[15:43:42] <maerwald> do it when you're young
[15:43:47] <maerwald> :D
[15:43:55] <dminuoso> zincy: Yes, no, perhaps.
[15:44:10] <dminuoso> It depends on your flexibility and what you want.
[15:44:11] <maerwald> sadly, Haskell is much more prominent in fintech
[15:44:22] <zincy> Something Something Cardano
[15:44:25] <dminuoso> I could probably switch a job in a pinch if I dont give a damn about what language or environment I'd work in.
[15:44:50] <zincy> dminuoso: Yes finding a good job is really hard
[15:44:52] <dminuoso> Got a couple outstanding offers that Im simply not interested in for one reason or another.
[15:44:57] <maerwald> zincy: well, Cardano at least has extremly high engineering standards
[15:45:02] <zincy> If you want to choose the language / culture/ good colleagues
[15:45:17] <maerwald> I much rather have quality than time pressure
[15:45:23] <unit73e> usually you don't get perfect everything
[15:45:23] <zincy> But do they?
[15:45:29] <maerwald> zincy: yes
[15:45:56] <zincy> Ok Ill take your word for it
[15:46:04] *** Quits: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[15:46:21] <zincy> Have you read Stephen Diehl's blog
[15:46:22] <unit73e> in my anedoctal experience if you prioritize language in your job you end up having zellot nerds as colleagues
[15:46:35] <zincy> hahaha ^
[15:46:36] <maerwald> zincy: pff... I sold my sould to the devil long ago
[15:47:01] <dminuoso> unit73e: Or more likely, you wont find a job that is close by nearby or has the payment you want.
[15:47:11] <dminuoso> Or the flexibility you need.
[15:47:31] <unit73e> that's true as well
[15:47:45] <dminuoso> I wouldn't want a full presence vacation, for instance. Right now I work 5 days a week from home with a fully flexible time schedule.
[15:47:49] <zincy> Yeah, hence why I am looking at typescript jobs - bigger pool
[15:47:50] <dminuoso> To me this is very valuable.
[15:47:53] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[15:48:09] <maerwald> zincy: I know a haskeller who switched to typescript and never looked back
[15:48:12] <maerwald> a good haskeller
[15:48:33] <unit73e> I have mostly worked with Java. It's not a great language but at least you have a lot of offer.
[15:48:36] <zincy> Tons of jobs in Typescript and you can use some of your knowledge from Haskell. :)
[15:48:40] <maerwald> yes
[15:48:43] <maerwald> it's a good choice
[15:48:59] <maerwald> and it's quite pragmatic
[15:49:10] <maerwald> you won't be staring at Generics code for 3 hours
[15:49:26] <maerwald> until you realize you have no idea what's going on
[15:49:51] <unit73e> clients love typescript programmers because you actually see the results. I work mostly backend so the client is never impressed.
[15:50:14] <unit73e> except when I spit some 5min frontend code, then the client is impressed :\
[15:50:23] <janus> unit73e: so clients are super impressed by purescript?
[15:50:28] <dminuoso> unit73e: So we offload some our tasks to another shop, they do mostly just invisible backend stuff. Im generally impressed with their results.
[15:50:39] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[15:50:40] <maerwald> unit73e: managers kinda understand frontend development these days. But they don't understand that you can't apply the same mindset/workflow/practices to backend.
[15:50:51] <dminuoso> But then again, their work is submitted as a PR that I approve... :)
[15:50:57] <unit73e> janus, if the end result is pretty yes lol
[15:51:38] <maerwald> deploy often, iterate quickly: yes, for frontend. For backend, I'll go with the opposite: deploy only if you absolutely must, iterate slowly, wait before you understand the data.
[15:52:35] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[15:53:37] <maerwald> but hey, frontend is more stress
[15:53:48] <maerwald> talking to actual users etc.? Oh god.
[15:54:17] <maerwald> "do you like this?"
[15:54:24] <maerwald> "can we make the button green?"
[15:55:08] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 265 seconds)
[15:55:11] <maerwald> or make it perpendicular
[15:55:45] <zincy> The good thing about backend is your project manager probably doesn't have an opinion on cache invalidation
[15:56:23] <maerwald> having a project manager being tech-savy is usually worse... you'll have to explain every single decision and everything becomes an argument
[15:57:14] <zincy> That sounds awful
[15:58:02] <maerwald> there are only two options: 1. a team with natural synergy or 2. a team with clear hierarchy
[15:58:32] <maerwald> and 3. open source anarchy
[15:58:32] <dminuoso> maerwald: tech savvy managing can work perfectly as long as they understand that they are no longer in the process of making technical decisions.
[15:59:06] <maerwald> dminuoso: right
[15:59:29] <maerwald> that's the same with parenting
[15:59:33] *** Joins: trainlag1602 (~saroa@user/trainlag1602)
[15:59:51] <dminuoso> In what way?
[15:59:52] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:59:54] <maerwald> tends to work with a delay of 2 decades
[15:59:57] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[16:00:30] <dminuoso> Oh yes, as a parent you make pedagogical decisions, irrespective of having a childhood experience your own.
[16:00:38] <dminuoso> Well some do.
[16:00:50] *** Joins: mei6 (~mei@user/mei)
[16:00:54] <maerwald> tech is about emotions
[16:01:05] <dminuoso> My current emotion is extremely negative.
[16:01:09] <maerwald> although we pretend we're all scientist nerds
[16:01:10] *** Quits: mei (~mei@user/mei) (Ping timeout: 260 seconds)
[16:01:11] *** mei6 is now known as mei
[16:01:14] <dminuoso> Something-something-django-something-something
[16:01:25] <zincy> Pythonic!
[16:01:52] <maerwald> dminuoso: I actually picked python over haskell for a microservice :D
[16:01:56] <zincy> Duplication is better than abstraction
[16:02:46] <maerwald> like, the input data was absolute trash... I needed something that's good with xml and that I can code up in 4 hours
[16:02:47] *** Quits: neo3 (~neo3@cpe-292712.ip.primehome.com) (Ping timeout: 264 seconds)
[16:02:48] <maerwald> -> python
[16:03:13] <maerwald> no point in desinging anything when the input is trash
[16:04:20] <maerwald> Also, I think django swallows every 200 requests or so
[16:04:38] <maerwald> sometimes a request just fails and the next one works
[16:04:51] <maerwald> close enough, lets ship
[16:04:57] <dminuoso> maerwald: Ive not been impressed with the django ecosystem. The websockets stuff is horrendously bad.
[16:05:17] <zincy> Concurrency in python is so odd
[16:05:25] <maerwald> I found it lovely... my test suited ended up 5 times as big as the actual implementatiooon
[16:05:30] <dminuoso> Perhaps
[16:05:56] <maerwald> but if it's low-maintenance, I don't see a point for Haskell
[16:06:02] <maerwald> where I OCD over details
[16:06:15] <dminuoso> maerwald: Right now Ive been spending 2 hours on some "oh there's an N+1 query. add prefetch_related..." and that worsened the N+1 by 2 orders of magnitude.
[16:06:26] <dminuoso> So yeah..
[16:06:31] <dminuoso> This is very high maintenance. :P
[16:06:38] <dminuoso> But then again, the entire project is of non-trivial size
[16:07:02] <maerwald> another good reason to pick python over haskell: selenium
[16:07:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:07:27] <dminuoso> maerwald: honestly you can also simply do a mixing of both.
[16:07:48] <dminuoso> But for web development things are not particularly pretty in haskell yeah
[16:07:56] <dminuoso> Yesod hasnt convinced me, and there's nothing else
[16:08:03] <maerwald> 1. relying on undermaintained haskell bindings, why? 2. why would I need strong types for a procedural/imperative test configuration
[16:08:11] <dminuoso> For APIs you can get away with some basic libraries just fine
[16:08:37] <zincy> dimunoso: Why are web programs in Haskell not pretty?
[16:08:37] <maerwald> I have the same opinion about propellor... there even is a Debian type
[16:08:50] <maerwald> and I never figured out why I need types for that sort of configuration
[16:08:54] <maerwald> it never prevented real bugs
[16:09:39] <maerwald>  if then else combined with ++ can give you real bugs :)
[16:10:06] <zincy> Haskell is great for web dev because most of it is concurency and de/serialisation 
[16:10:16] <zincy> But it isnt "pretty" haskell
[16:10:35] <zincy> In the same way a compiler for lambda calculus is pretty
[16:11:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:11:37] <maerwald> > if False then [1] else [2] ++ [4]
[16:11:38] <lambdabot>  [2,4]
[16:11:45] <maerwald> now imagine the ++ is on the next line
[16:11:51] <maerwald> carefully aligned
[16:11:52] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[16:11:54] <maerwald> will you realise it?
[16:12:33] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[16:12:54] <dminuoso> 14:38:37           zincy | dimunoso: Why are web programs in Haskell not pretty?
[16:13:06] <dminuoso> There's only yesod, and that's all very opinionated.
[16:13:14] *** Joins: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi)
[16:13:25] <dminuoso> If you dont like shakespear, I dont know whether there are any reasonable alternatives
[16:13:27] <maerwald> this is where a linter would actually help... not these nonsensical hlint rules, but here telling me "do you understand the precedence here? Do you really mean that?"
[16:13:37] <zincy> dminuoso: Servant?
[16:13:54] <dminuoso> servant is okayish for APIs
[16:13:58] *** Joins: alzgh (~alzgh@user/alzgh)
[16:14:05] <dminuoso> But it doesnt have much else for web development
[16:14:15] <zincy> Yeah barebones
[16:14:25] <dminuoso> And in fact if you treat HTTP seriously, servant is very cumbersome because its very poor on the semantic side
[16:14:28] <dminuoso> like cache control
[16:14:29] <zincy> So you mean Haskell lacks a killer web framework
[16:14:46] <dminuoso> I dont think a "killer <anything> framework" really exists in any language
[16:14:48] <zincy> As in Elixir has Phoenix (which seems very good)
[16:15:05] <dminuoso> I actually wrote some elixir stuff in phoenix, incidentally that was my gateway drug to Haskell
[16:15:30] <dminuoso> At the end I got so annoyed by the lack of any static analysis (dialyzr has awful gibberish output)...
[16:15:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[16:15:50] <zincy> Yeah
[16:16:01] <dminuoso> Combined with very magical things like |> being implemented as a macro, which means it "magically" doesnt work in all the places you'd expect it to, and generate awful diagnostics when it doesnt...
[16:16:13] <dminuoso> To me it caused a lot of frustrationg
[16:16:18] <dminuoso> But I can see how people might enjoy elixir
[16:16:27] <dminuoso> It just wasn't the right fit for me
[16:16:42] <zincy> Yeah the dynamic typing is annoying
[16:16:47] <vaibhavsagar[m]> what do you mean about servant being poor on the semantic side?
[16:16:52] <zincy> But seems like they have a ton of well maintained libaries for web
[16:16:55] <dminuoso> zincy: also, much of phoenix - in particular ecto - is just tons of tons of macros piled ontop of each other.
[16:16:57] <vaibhavsagar[m]> it's a DSL for APIs
[16:17:00] *** Parts: trainlag1602 (~saroa@user/trainlag1602) ()
[16:17:05] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:17:06] <dminuoso> zincy: which generally makes for a horrible user experience
[16:17:21] <dminuoso> vaibhavsagar[m]: HTTP is a deeply semantic protocol.
[16:17:37] <maerwald> vaibhavsagar[m]: it's also an actual server
[16:17:50] <maerwald> and uses wai under the hood
[16:17:59] <vaibhavsagar[m]> yes, I know that
[16:18:01] <jumper149> vaibhavsagar[m]: Some parts of the HTTP protocol don't translate nicely to a servant API. For example returning a different status like 400, can't be represented in the API.
[16:18:01] <zincy> dminuoso: I was wondering about when is the right time to create a DSL, seems like coders like to implement them a lot just because they are fun)
[16:18:04] <dminuoso> vaibhavsagar[m]: So say if you have a servant client, and the server sets a cache control header, do you imagine the servant client will respect that? :-)
[16:18:07] *** Joins: trainlag1602 (~saroa@user/trainlag1602)
[16:18:08] <maerwald> so it's NOT just a DSL
[16:18:17] <jumper149> Not trivially at least.
[16:18:46] <dminuoso> vaibhavsagar[m]: Mind you, I use servant heavily in some of our projects. I like what its good at, but I can definitely see its problems.
[16:19:14] <vaibhavsagar[m]> sure, I'm not trying to defend Servant, I haven't used it at all in a while
[16:19:17] <zincy> dminuoso: What is your favourite alternative to servant?
[16:19:21] <vaibhavsagar[m]> but I was curious about what you meant
[16:19:31] <dminuoso> zincy: the swagger ecosystem is mostly similar
[16:19:51] <dminuoso> And you get more guaranteed interop from it
[16:20:06] <zincy> Sorry similar to ... ?
[16:20:08] <dminuoso> Since swagger generators/tools are available for a plethora of langauges
[16:20:12] <dminuoso> zincy: to servant.
[16:20:17] <maerwald> jumper149: but there's UVerb now
[16:20:23] <zincy> Oh yeah
[16:20:28] <dminuoso> You can think of servant as simply being code generics
[16:20:37] <dminuoso> It just generates some boilerplate code around some API
[16:20:57] <maerwald> jumper149: https://github.com/haskell-servant/servant/pull/1314
[16:21:19] <dminuoso> vaibhavsagar[m]: I think HTTP being a semantic protocol is part in why I dislike it being used for APIs so much
[16:21:28] <dminuoso> It's a wild abuse for the purpose of re-using tooling and authentication
[16:21:33] <maerwald> https://github.com/haskell-servant/servant/blob/master/doc/cookbook/uverb/UVerb.lhs
[16:21:46] *** Joins: bartavelle (~bartavell@2001:41d0:1:744c::1)
[16:21:58] <vaibhavsagar[m]> yeah, that's fair
[16:22:06] <vaibhavsagar[m]> I've used servant a bit at previous jobs
[16:22:23] <vaibhavsagar[m]> it seemed like it choked when I wanted a JSON body in a non-200 response
[16:22:42] <vaibhavsagar[m]> which AFAICT is definitely possible according to HTTP semantics
[16:23:04] <vaibhavsagar[m]> but you had to contort servant into a pretzel to get it to do that
[16:23:16] <jumper149> maerwald: Nice, that's pretty cool!
[16:23:54] <zincy> I remember auth headers being a pain in Servant
[16:24:06] <zincy> When trying to generate swagger docs
[16:24:18] *** Parts: bartavelle (~bartavell@2001:41d0:1:744c::1) ()
[16:24:34] *** Joins: reumeth (~reumeth@user/reumeth)
[16:25:05] <zincy> Are there any good articles about the design space of building a web framework?
[16:25:13] <zincy> As in what tradeoffs are at play
[16:25:48] *** Quits: jgeerds (~jgeerds@55d40de2.access.ecotel.net) (Ping timeout: 258 seconds)
[16:26:12] <maerwald> yes
[16:27:12] <maerwald> https://haskell-servant.github.io/posts/2018-07-12-servant-dsl-typelevel.html
[16:27:32] <maerwald> the alternative would have been TH
[16:27:46] <maerwald> the motivation was to *generate* clients
[16:28:02] <maerwald> something many people forget when they pick servant, thinking it's the only choice
[16:28:30] <maerwald> if you don't generate clients or do other stuff like auto-generating swagger from the types
[16:28:34] <maerwald> what's the point even
[16:29:03] <maerwald> I think for internal API, this matters very little
[16:29:16] <maerwald> the types are an interface for tools
[16:29:55] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb93c8c758eae23fe552.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:30:40] *** Joins: python476 (~user@88.160.31.174)
[16:31:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[16:31:44] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[16:32:36] *** Joins: hendursaga (~weechat@user/hendursaga)
[16:32:47] <adamCS> Anyone using emacs with hls and the autocomplete suggestion list thing gets very (very) slow?  Is there a way to turn it off or somehow shorten the list of suggestions (if that's the issue)?
[16:33:41] *** python476 is now known as agumonkey
[16:37:07] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[16:38:03] <Profpatsch> I’m in the camp of generating source from swagger/openapi definitions in a typed language, and using that in your client code.
[16:38:23] <jumper149> maerwald: I just looked at UVerb. One could argue that is glued on top of servant and isn't nicely integrated (yet?). Also I'm not saying that servant can't be extended to someday represent all of the HTTP protocol nicely on the type level.
[16:40:21] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[16:40:31] <zincy> maerwald: I found the generation to be a bit lacking for reasonml at least.
[16:41:57] *** Joins: burakcank (burakcank@has.arrived.and.is.ready-to.party)
[16:43:21] *** Joins: jespada (~jespada@2803:9800:9842:7a62:c904:aff:1e1a:fc0a)
[16:44:46] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 252 seconds)
[16:46:00] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:46:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:47:43] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[16:51:11] <Franciman> is there any material about using LinearTypes extension?
[16:54:16] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[16:54:49] *** Joins: delipickle (~delipickl@097-086-022-157.res.spectrum.com)
[16:55:21] <xerox> this is a start I guess https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0111-linear-types.rst
[16:55:55] <Franciman> I want to understand if lineartypes can allow me to stop using the garbage collector
[16:55:57] <Franciman> thanks xerox 
[16:56:53] <adamCS> Another Pipes question:  is there a way to do "joinProducer :: m (Producer a m ()) -> Producer a m ()"?
[16:57:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[16:57:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:57:56] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[16:58:34] *** Joins: __monty__ (~toonn@user/toonn)
[16:58:35] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 264 seconds)
[16:59:39] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[16:59:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Read error: Connection reset by peer)
[17:00:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:00:32] <vaibhavsagar[m]> Franciman: they can't, AFAICT linear types haven't been integrated with the garbage collector at all
[17:00:48] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[17:00:52] <Franciman> thanks vaibhavsagar[m] 
[17:01:00] <Franciman> this makes me relieved
[17:01:22] <Franciman> I was afraid there was something cool I could not achieve 
[17:01:27] <Franciman> but now I know I just need to wait
[17:02:32] *** Joins: max22- (~maxime@2a01cb0883359800a17b4351977e7c2e.ipv6.abo.wanadoo.fr)
[17:05:47] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 264 seconds)
[17:06:47] <vaibhavsagar[m]> AFAIK the current status is "look at this cool thing we can make the type system do" instead of "here's how you can actually use this to manage resources"
[17:07:14] *** Quits: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi) (Ping timeout: 260 seconds)
[17:07:18] <Franciman> getting the same vibe, tbf
[17:07:58] *** Quits: fusion86 (~fusion@2a02-a44c-e6e5-1-309e-d6f5-67ba-dda3.fixed6.kpn.net) (Quit: Leaving)
[17:08:12] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:08:53] *** Quits: jumper149 (~jumper149@80.240.31.34) (Quit: WeeChat 3.2)
[17:12:43] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:e9cf:d82f:5daa:fcc1)
[17:14:52] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[17:17:11] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:709e:32b8:8140:3ed0) (Ping timeout: 264 seconds)
[17:17:42] <maerwald> are you saying it's all marketing for a company? :p
[17:18:20] <Franciman> V lang made us learn a lot of things
[17:18:55] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:19:19] <vaibhavsagar[m]> society if V lang actually delivered even 50% of what it promised
[17:19:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Ping timeout: 264 seconds)
[17:20:03] <Hecate> vaibhavsagar[m]: hahahahaha
[17:20:06] <Hecate> clearly
[17:20:14] <Franciman> ahahahahah
[17:20:47] <Hecate> https://joannakarpowicz.pl/ I love the Anubis
[17:21:55] <vaibhavsagar[m]> does anyone else remember how they sold it as "fully statically linked" and when it was revealed they had a dependency on glibc the project owner said "well i meant statically linked except for system libraries"
[17:22:12] <vaibhavsagar[m]> yeah, nice work, that's totally what those words mean
[17:22:46] <vaibhavsagar[m]> i would be less annoyed if they hadn't called it V lang, since I go by V in most places
[17:22:54] <maerwald> vaibhavsagar[m]: he meant you can go through hoops and link with musl. Clearly
[17:22:55] <merijn> I don't blame him, who the fuck wants to fight with linking glibc statically :p
[17:23:47] <gehmehgeh> V lang?
[17:23:49] <maerwald> technically not a lie
[17:23:56] <vaibhavsagar[m]> > compiles to native binaries without any dependencies
[17:23:56] <vaibhavsagar[m]> https://vlang.io/
[17:23:58] <lambdabot>  error:
[17:23:58] <lambdabot>      Variable not in scope:
[17:23:58] <lambdabot>        compiles
[17:24:01] <vaibhavsagar[m]> nonsense
[17:24:37] <merijn> Just blame your decision to support OpenBSD if you need an excuse to not link libc dynamically >.>
[17:24:59] <Franciman> oh i love the new v webpage
[17:25:11] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[17:25:45] *** Joins: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi)
[17:25:49] <merijn> I mean, if your website looks that sleek, you're spending to much time on the marketing and not enough on the implementation ;)
[17:26:01] <vaibhavsagar[m]>  > This tool already supports C and will soon support the latest standard of notoriously complex C++. It does full automatic conversion to human readable code.
[17:26:16] <merijn> lol
[17:26:21] <vaibhavsagar[m]> this is literally impossible
[17:26:27] <maerwald> looks like it was meant as competition to C++
[17:26:30] <merijn> Tell me you don't know C++, without telling me you don't know C++
[17:26:39] <vaibhavsagar[m]> I guess on a long enough timescale everything is "soon"
[17:27:15] <vaibhavsagar[m]> or maybe what they mean by "human readable code" is assembly, which is technically human readable I guess
[17:27:18] <Franciman> so now I want to add a -XVmode extension to haskell
[17:27:24] <Franciman> with all the features coming SOON
[17:27:38] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[17:28:11] <vaibhavsagar[m]> Nim, Zig, and Rust are all players in that space
[17:28:18] <vaibhavsagar[m]> and none of the devs involved there make grandiose promises they can't keep
[17:28:26] <maerwald> I like Jai language better (from Jonathan Blow), which is ONLY marketing. None of the code is published xD
[17:28:39] <vaibhavsagar[m]> call it -XLinearDependentTypes
[17:28:50] <maerwald> Supposedly, he's been working on Jai since 2014
[17:28:59] <maerwald> held several talks about it over the years
[17:29:03] <maerwald> but there's no *CODE*
[17:29:23] <lortabac> ahah roc is a good competitor too, zero published code, plenty of conferences with amazing benchmarks
[17:29:41] <merijn> I mean, Jonathan Blow isn't an engineer, he's an "artiste", why would you expect a serious general language from him?
[17:29:44] <vaibhavsagar[m]> hah fair, Roc is pretty new though
[17:30:21] <lortabac> I'm always amazed by the marketing skills of these people
[17:30:21] *** Joins: Guest22 (~Guest22@wificampus-098210.grenet.fr)
[17:30:58] <merijn> lortabac: Well, they have time, 'cause not programming :p
[17:31:38] <lortabac> in the case of Roc it seems the product is for real, we'll see in a couple of years
[17:32:01] <vaibhavsagar[m]> all you have to do is convince one foolish CS grad student that your ideas contain at least one PhD
[17:32:11] <vaibhavsagar[m]> and they'll do the implementation for you
[17:32:11] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[17:32:17] *** Joins: bontaq` (~user@ool-45779fe5.dyn.optonline.net)
[17:32:17] <merijn> I mean, anyone doing a phd is foolish by definition...
[17:32:29] <Franciman> phoolish doctor
[17:32:32] <vaibhavsagar[m]> good point
[17:32:37] <Guest22> if I have a parser p in Parsec/Megaparsec, is there a helper function to simply do something like `Text -> Parser a -> Bool` telling me if the parser matches the given string? without having the pull the full runParser?
[17:33:10] <Franciman> Guest22: I think you want isRight . runParser ?
[17:33:12] <Guest22> parseTest looks like a good fit but that still involves exceptions
[17:33:22] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[17:33:54] <Guest22> but if I get a Left I will still have an exception to handle
[17:34:10] <merijn> how so?
[17:34:19] <merijn> :t either (const False) (const True)
[17:34:20] <lambdabot> Either b1 b2 -> Bool
[17:34:22] <merijn> Solved
[17:34:37] <Franciman> :t runParser
[17:34:39] <lambdabot> error: Variable not in scope: runParser
[17:34:40] <Franciman> sad
[17:34:56] <vaibhavsagar[m]> isRight . runParser "-"
[17:35:49] <vaibhavsagar[m]> since runParser takes the name of the source file as its first argument
[17:36:25] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[17:36:50] *** Quits: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net) (Ping timeout: 260 seconds)
[17:37:17] <Guest22> :t isRight
[17:37:19] <lambdabot> Either a b -> Bool
[17:37:32] <Guest22> oh oh nevermind! thanks
[17:37:33] <vaibhavsagar[m]> oh actually \parser string -> isRight $ runParser parse "-" string
[17:37:35] *** Quits: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi) (Ping timeout: 264 seconds)
[17:38:36] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:38:37] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:38:37] *** Joins: wroathe (~wroathe@user/wroathe)
[17:39:01] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[17:40:31] <merijn> hah, I think I just Fairbairned isRight. I'm proud of myself :p
[17:41:02] *** Quits: Guest22 (~Guest22@wificampus-098210.grenet.fr) (Quit: Client closed)
[17:43:44] <Franciman> you what
[17:45:11] <merijn> Franciman: "The Fairbairn threshold is the point at which the effort of looking up or keeping track of the definition is outweighed by the effort of rederiving it or inlining it."
[17:45:21] <maerwald> merijn: I use `either` and `maybe` much more than fromMaybe etc
[17:45:48] <Franciman> lolz
[17:45:49] <Franciman> takk
[17:46:16] <merijn> maerwald: I use fromMaybe sometimes still, when I don't directly do anything with the result, but probably at least 50/50 for Maybe
[17:46:30] <maerwald> maybe foo id
[17:46:32] <merijn> I don't use the fromLeft/fromRight...ever, I think?
[17:46:39] *** bontaq` is now known as bontaq
[17:47:10] <maerwald> because here the naming is crystal clear
[17:47:16] <maerwald> `fromMaybe` already confuses me
[17:48:14] <maerwald> > :t listToMaybe
[17:48:14] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 265 seconds)
[17:48:16] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[17:48:20] <maerwald> :t listToMaybe
[17:48:21] <lambdabot> [a] -> Maybe a
[17:48:22] <maerwald> even worse
[17:48:43] <Franciman> natural transformation, i reckon
[17:48:45] *** Joins: xsperry (~xs@user/xsperry)
[17:48:46] <merijn> Entirely unrelatedly
[17:48:54] <merijn> Is it two's complement or twos' complement?
[17:49:06] <Franciman> first
[17:49:40] <merijn> Franciman: That's my instinct to, but the internet also says my instinct for one's complement is wrong and that it is ones' complement
[17:50:28] <Franciman> we say
[17:50:35] <Franciman> complemento a due
[17:50:38] <Franciman> ah
[17:50:54] <Franciman> i just recongized the the plural of due is due
[17:51:02] <Franciman> so no clu anymore :O
[17:54:02] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[17:54:53] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[17:56:05] *** Quits: ubert (~Thunderbi@178.165.203.151.wireless.dyn.drei.com) (Remote host closed the connection)
[17:56:06] *** ub is now known as ubert
[17:56:40] *** Quits: trainlag1602 (~saroa@user/trainlag1602) (Ping timeout: 260 seconds)
[17:59:00] *** Joins: zebrag (~chris@user/zebrag)
[18:05:17] <janus> % :m +Data.Time.Clock Data.Time.Calendar Data.Time
[18:05:18] <yahb> janus: 
[18:05:27] *** Joins: trainlag1602 (~saroa@user/trainlag1602)
[18:05:28] <janus> % toEnum minBound :: Day
[18:05:28] <yahb> janus: -25252734927764696-04-22
[18:05:56] <janus> why was it chosen to provide an Enum instance for Day when it can construct invalid values?
[18:06:19] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[18:07:24] <kritzefitz> Why would that day be invalid?
[18:09:14] <janus> ooh maybe it isn't.  i had assumed that because zero is 1858-11-17. hadn't considered the concept of negative julian dates, this date seems a weird choice if negative values are also allowed. it could just have been 0000-00-00
[18:11:15] <janus> or Jan 1st :P oh well
[18:11:25] <janus> ok, good to know it can be negative. thanks!
[18:16:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[18:17:15] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[18:18:44] *** Joins: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[18:18:47] *** Joins: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi)
[18:19:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[18:19:56] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:20:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[18:20:30] *** Quits: trainlag1602 (~saroa@user/trainlag1602) (Ping timeout: 260 seconds)
[18:20:47] *** Quits: ubert (~Thunderbi@178.165.203.151.wireless.dyn.drei.com) (Remote host closed the connection)
[18:21:34] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 252 seconds)
[18:22:39] <davean> janus: no theres good reason its that date
[18:23:22] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:30:46] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 258 seconds)
[18:37:32] *** Quits: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi) (Ping timeout: 265 seconds)
[18:38:37] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[18:40:51] *** Joins: trainlag1602 (~saroa@user/trainlag1602)
[18:42:49] *** Joins: mud (~mud@user/kadoban)
[18:44:16] *** Quits: trainlag1602 (~saroa@user/trainlag1602) (Remote host closed the connection)
[18:50:35] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:51:56] *** Joins: delipickle_ (~delipickl@gateway/vpn/pia/delipickle)
[18:52:44] *** Quits: delipickle_ (~delipickl@gateway/vpn/pia/delipickle) (Client Quit)
[18:54:34] *** Quits: delipickle (~delipickl@097-086-022-157.res.spectrum.com) (Ping timeout: 260 seconds)
[18:55:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[18:55:42] *** Quits: NotIndonesian (znc@Indonesians.are.sick.bnc.HUNTERS.thats.bad.mn) (Remote host closed the connection)
[18:59:13] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[18:59:38] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:02:58] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[19:03:35] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[19:04:23] <maerwald> https://github.com/composewell/streamly/blob/master/docs/streamly-vs-async.md
[19:04:29] <maerwald> hmm, I never tried to use streamly for async
[19:04:52] <maerwald> apparently it's equipped for that
[19:04:52] *** Joins: Guest81 (~Guest81@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[19:05:13] <shapr> davean: what is that good reason?
[19:05:23] <Guest81> what is an idiomatic way to write a one-to-one map using only base?
[19:05:25] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[19:06:08] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[19:06:18] <Guest81> a function (or whatever really) that can be ran on its inputs as well as its outputs
[19:06:51] <Rembane_> Guest81: Data.Map twice, and swap keys and values for the second one 
[19:06:57] <Guest81> like an f and f^-1, somehow running my case/of in reverse ... I hope I'm making sense
[19:07:58] <merijn> Guest81: Sounds like you mean an isomorphism?
[19:08:08] *** Joins: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184)
[19:08:39] <merijn> Guest81: And isomorphism is a pair of functions 'f' and 'g where "f(g(x)) = x" and "g(f(x)) = x" for all 'x'
[19:08:40] <Guest81> yes! an isomorphism, objective function you name it. But I really don't want to add unecessary dependencies to my little project
[19:08:56] <Guest81> bijective*
[19:09:32] <merijn> I mean, you can just do "newtype Isomorphism a b = Isomorphism (a -> b, b -> a)"?
[19:10:31] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 252 seconds)
[19:10:36] <Guest81> I totally agree .. except it's overkill for me if I'm only using it for one function
[19:11:03] <merijn> What's overkill?
[19:11:11] <Guest81> how would swap keys and values on a Data.Map though? https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-Map.html
[19:11:25] <merijn> You don't, and also, that's not in base :p
[19:12:07] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:70bb:31e2:9b65:43) (Quit: WeeChat 2.8)
[19:12:25] <Guest81> oh so I must've misunderstood what Rembane_ said
[19:12:36] *** Joins: son0p (~ff@181.136.122.143)
[19:13:08] <merijn> I mean, you can write a bunch of code that converts the Map to a list of tuples, swap the tuples and build a new map
[19:16:55] <davean> shapr: thats 2400000 days from the Julian Day
[19:17:02] <davean> er
[19:17:07] <davean> shapr: thats 2400000.5 days from the Julian Day
[19:17:36] <davean> It aligns it with the standard UTC day edge, and rescales it to the standard day magnitude
[19:20:11] <geekosaur> janus, I'd also point out that the year starting on 1 Jan is actually fairly recent. like England used 25 Mar for a long time, and other places used other dates
[19:20:25] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[19:20:46] <davean> geekosaur: well the Julian Day is actually Jan 1st
[19:20:57] <merijn> And in some places it still doesn't start on 1 January :p
[19:21:12] <geekosaur> the calendar came from rome, I'd not be surprised if 1 Jan did too
[19:21:13] <merijn> Hell, it doesn't even start on the same gregorian date every year in some places
[19:21:16] <davean> So the Julian calendar *is* Jan 1st aligned
[19:21:30] <davean> and we're talking Julian days here
[19:21:34] <Rembane_> Guest81: It's my fault, I hoped that Data.Map was in base, but it itsn't. :)
[19:21:57] *** Joins: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi)
[19:22:57] <janus> % addUTCTime (-1) (UTCTime (toEnum minBound) 0)
[19:22:57] <yahb> janus: -25252734927764696-04-21 23:59:59 UTC
[19:23:55] <janus> i wonder if that is also valid given that it contains a day that can't be constructed from an enum.. hmm
[19:24:21] <merijn> I mean the best solution is to just forget Enum exists >.>
[19:24:29] <merijn> It's a deeply problematic and bad class >.>
[19:24:43] <merijn> Just, like, never assume that toEnum does anything remotely sensible
[19:24:52] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Remote host closed the connection)
[19:24:53] <janus> but what is the better way to construct Day then?
[19:25:08] <davean> Day?
[19:25:25] <merijn> For what purpose?
[19:25:44] <davean> pattern YearDay :: Year -> DayOfYear -> Day
[19:26:03] <merijn> There's a number of function for constructing Days, yeah
[19:26:27] <janus> how is YearDay used? not too familiar with patterns
[19:26:47] <merijn> janus: Pattern synonyms are basically "fake" constructors
[19:26:54] *** Joins: econo (uid147250@user/econo)
[19:26:56] <janus> % :t YearDay
[19:26:56] <yahb> janus: ; <interactive>:1:1: error: Data constructor not in scope: YearDay
[19:27:00] <merijn> Allowing you to expose custom patterns you can match on
[19:27:10] <merijn> janus: So you use it like a constructor
[19:27:32] <merijn> "foo (YearDay year day) = .." "foo :: Day -> ..."
[19:27:45] <merijn> Of "YearDay 2021 156"
[19:28:09] <janus> but then that's deconstructing? why can't yahb see it?
[19:28:51] <janus> davean: seems to me like the Day constructor isn't exposed. if that is what you suggested when you said "Day?"
[19:29:07] <davean> janus: it is exposed via the pattern I offered
[19:29:17] <davean> yahb is dumb?
[19:30:22] <janus> ok, let's assume i have a local ghci session (much smarter than yahb, right? ;). how do i make a Day using YearDay?
[19:30:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:31:33] <merijn> "YearDay 2021 156" done
[19:32:13] <merijn> % import Data.Time.Calendar.OrdinalDate
[19:32:13] <yahb> merijn: 
[19:32:20] <merijn> % YearDay 2021 156
[19:32:20] <yahb> merijn: ; <interactive>:74:1: error: Data constructor not in scope: YearDay :: t0 -> t1 -> t
[19:32:30] <merijn> Ah, I guess it doesn't work for constructing
[19:32:33] *** Joins: pavonia (~user@user/siracusa)
[19:32:49] <merijn> I mean, there's also just:
[19:33:00] <merijn> % fromOrdinalDate 2021 156
[19:33:00] <yahb> merijn: 2021-06-05
[19:33:17] <janus> but it says "bidirectional abstract consturctor". so i thought bidirectionality means construction/destruction
[19:33:32] <merijn> janus: I mean, yahb might just have an old version of time
[19:33:57] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[19:34:18] <Hecate> hi lbseale :)
[19:34:24] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 258 seconds)
[19:35:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[19:36:38] <merijn> Once I become a millionair I'll just pay someone to document my code so I don't have to do it myself >.>
[19:36:47] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[19:37:00] *** Joins: hyiltiz (~quassel@31.220.5.250)
[19:37:13] <janus> ooh ok. this works: cabal repl -b time==1.11; :m +Data.Time.Calendar.OrdinalDate; :t case undefined of YearDay a b -> a
[19:37:49] <lbseale> Hecate: salut
[19:37:50] <janus> and 1.11 is from October 2020, so pretty new
[19:38:18] <janus> i had somehow assumed that the feature would be available with the stock time on GHC 9, but that is not the case
[19:38:36] <davean> ... a year old is new?
[19:38:44] <merijn> davean: I mean, sure
[19:39:12] <janus> if we call GHC 9 new, we must also call time 1.11 new ;)
[19:39:15] <davean> But yes, YearDay is bidirectional
[19:39:21] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[19:39:21] <davean> I wouldn't call GHC 9 new
[19:39:25] <merijn> I would
[19:39:35] <merijn> I'm not using it yet :p
[19:39:38] <dolio> I'm still using 8. :þ
[19:39:39] <davean> I'm working on moving to 9.2
[19:40:01] <merijn> dolio: Nothing wrong with 8.10 :p
[19:41:50] <davean> If you haven't updated to 9.0 at this point, I'd think you'd just skip it
[19:41:55] *** Quits: max22- (~maxime@2a01cb0883359800a17b4351977e7c2e.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[19:41:59] <merijn> davean: I probably will
[19:42:11] <dolio> I have it installed. I just don't think I've used it.
[19:42:16] <davean> GHC 9 wasn't a glorious release IMO
[19:42:47] <merijn> I haven't installed it yet, because I haven't had time to update my personal projects yet (still need to migrate most of them away from Travis CI >.>)
[19:42:52] <dolio> Skipping X.0 versions isn't such a bad idea in general. :)
[19:43:16] <davean> dolio: I agree and 9.0 is quite skippable
[19:43:16] <merijn> And the only "work" project I have will probably never get 9.x support, tbh
[19:43:29] <merijn> Unless it happens to "Just Work (TM)" with minor bounds fiddling
[19:43:57] <davean> EOL?
[19:44:59] <merijn> davean: Well, assuming minimal procrastination from me tonight/this weekend, the thesis goes to the committee on Tuesday and seeing as no one's paying my, I've running a severe "fucks" deficit :p
[19:45:21] <davean> so yes, EOL :-p
[19:45:33] <merijn> Arguably it's been EOL since it started :p
[19:46:46] <davean> There was still stuff to prove with it then
[19:48:46] <lbseale> I have a ByteString that I am trying to pipe to a little shell program that takes input on stdin, and puts its output to stdout. When I call it with `createProcess`, it hangs and never finishes. How do I get it to finish?
[19:48:48] <davean> merijn: what is the thesis?
[19:48:51] <merijn> Actually, it's only fairly recently reached the point I can *start* proving stuff ;)
[19:49:03] <merijn> davean: But in classic phd fashion, that happened after money ran out
[19:49:21] *** Joins: wonko (~wjc@62.115.229.50)
[19:49:21] <lbseale> I don't understand unix pipes well enough to know what is going on with it
[19:49:46] <geekosaur> lbseals, do you ever close the pipe handle?
[19:49:47] <merijn> davean: Ostensibly graph processing on GPUs, in practice it's more about "jesus, everyone in empirical computer science is shite at science, so let me figure out how to do that first" :p
[19:49:55] <geekosaur> lbseale ^^
[19:50:18] <merijn> geekosaur: 10 dollar says you're right ;)
[19:50:38] <geekosaur> programs fed through pipes buffer their output so it's just waiting for more data, probably
[19:50:38] <lbseale> geekosaur: I have tried that, but it seems like it never gets past the line where it's reading from stdOut
[19:51:10] <lbseale> I'm not sure which ByteString function to use to read it
[19:51:11] <merijn> lbseale: code?
[19:51:25] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[19:51:33] <geekosaur> oh, you're trying to do open3-type stuff. you need either the writer or the reader in a thread if either the input or the output is larger than the system pipe buffer, because it'll hang otherwise
[19:51:47] <geekosaur> you need to read and write at the same time to avoid deadlock
[19:52:12] <lbseale> https://paste.tomsmeding.com/0Ko5iJuT
[19:52:22] <lbseale> this represents every hack I tried at the end of the day yesterday
[19:52:56] <lbseale> I can't remember what I did, but I also got it to do something where it ran out of memory
[19:53:04] <merijn> And the shell script?
[19:53:46] <merijn> I mean, if the output is huge, it might be blocked on writing output
[19:53:46] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[19:53:52] <lbseale> it's this thing: https://metacpan.org/dist/JSON-PP/view/bin/json_pp
[19:54:11] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:54:31] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[19:54:43] <merijn> oh
[19:54:45] <lbseale> I know that I could probably use aeson-pretty but it will be a hassle for me to get it installed and I'm curious to figure this out now
[19:54:53] <merijn> You should close stdIn before reading from stdOut
[19:54:59] <lbseale> aha!
[19:55:04] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[19:55:06] <merijn> Fat chance the process won't produce output until it finishes reading
[19:55:20] <merijn> If you're blocked reading the process blocks indefinitely for more input
[19:55:37] <merijn> So, effectively, you're not close stdin :p
[19:55:42] <merijn> *closing
[19:55:44] <lbseale> makes sense
[19:56:44] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[19:57:37] <lbseale> heyyy that worked! Thanks merijn !
[20:01:16] <lbseale> merijn: do I need to close stdOut after? Or do some other cleanup action?
[20:01:35] *** Quits: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi) (Ping timeout: 264 seconds)
[20:02:23] <Guest81> I'm not too sure how class instances work but can I override them?
[20:02:33] <Guest81> something like Pretty here:
[20:02:33] <geekosaur> Guest81, no
[20:02:34] <Guest81> https://hackage.haskell.org/package/prettyprinter-1.7.1/docs/Prettyprinter.html
[20:02:41] <merijn> Guest81: You can't
[20:03:21] <Guest81> So if pretty Bool is already defined, how could I "customize" it for my formatter?
[20:03:35] <Guest81> suppose I want pretty True == "true"
[20:03:48] <Guest81> I may be missing something
[20:05:30] <merijn> Use a newtype of write your own function to serialise it that doesn't use the Pretty instance
[20:05:56] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[20:06:08] <Guest81> but how do I lift whatever I end up with into Doc ann ?
[20:06:15] <merijn> Like, you don't *have* to use the Pretty instance, you can also do 'case myBool of True -> "true"; False -> "false"'
[20:06:15] *** Joins: alzgh (~alzgh@user/alzgh)
[20:06:57] <merijn> Doc has an OverloadedStrings instance
[20:08:02] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:08:38] <Guest81> that works, could I also use viaShow? As that uses Strings, I think it would hurt prettyprinter as it was made to only use Text
[20:09:12] <merijn> But viaShow will to the same thing as just "pretty" for Bool?
[20:09:17] <merijn> > show True
[20:09:19] <lambdabot>  "True"
[20:09:40] <Guest81> oh .. I can't override Show for Bool either, yikes!
[20:10:34] <Guest81> um using OverloadedStrings only works if I write literals, is that right?
[20:11:06] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[20:11:07] <Guest81> I can't just convert a Text to Doc ...
[20:11:29] <merijn> I mean, you can just do "pretty" on Text
[20:11:39] <merijn> Which will just take it "as-is"
[20:13:20] <Guest81> so I could just do `case boolean of True -> pretty "true" ...`
[20:13:26] <merijn> yeah
[20:13:46] <Guest81> that's enough flexibility for me :^)
[20:14:29] <Guest81> I can finally scrap my crappy Show instances
[20:15:25] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[20:15:59] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[20:17:04] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[20:18:49] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:19:44] *** Joins: emf (~emf@2620:10d:c090:400::5:bb17)
[20:20:45] *** Quits: aa (~douglasco@200.146.85.128.static.gvt.net.br) (Quit: Leaving)
[20:23:26] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[20:23:46] <janus> Guest81: you can also make newtypes and then make your instances on them
[20:23:59] <janus> ah right, merijn said that at 18:35
[20:24:00] *** Quits: mbuf (~Shakthi@136.185.83.238) (Quit: Leaving)
[20:24:29] <Guest81> janus: oh I haven't thought of that, and I guess I didn't understand what merijn meant by it
[20:24:34] <Guest81> very sneaky
[20:25:10] <janus> Guest81: consider why there are Sum and Product newtypes
[20:25:21] *** Joins: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi)
[20:26:53] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[20:27:11] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[20:34:22] <shapr> Does anyone have a good way to handle haddock errors for an automated hoogle rebuild?
[20:36:08] *** Joins: jkaye (~jkaye@2601:281:8300:7530:8275:c2bd:871b:678c)
[20:36:57] <c_wraith> another day, another wish  b -> (a -> [a] -> b) -> [a] -> b   was in base
[20:40:56] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[20:47:47] *** Quits: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi) (Ping timeout: 264 seconds)
[20:48:58] *** Joins: spopooi (~spopooi@2804:431:cfea:8190:1e39:18d9:9d9e:69d4)
[20:54:09] *** Joins: pfurla_ (~pfurla@ool-182ed2e2.dyn.optonline.net)
[20:54:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:56:44] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 265 seconds)
[20:56:55] *** Quits: pfurla (~pfurla@216.151.180.27) (Ping timeout: 260 seconds)
[20:56:56] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[20:56:57] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[20:56:57] *** Joins: turlando (~turlando@user/turlando)
[20:57:13] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[20:57:55] <dsal> Is there an easy way to see what all amazing things I'm missing in ghc by being on an older version?
[20:58:43] <dsal> I generally dislike smaller numbers but I feel like quantifying that might be good.  :)
[20:59:03] *** Quits: turlando (~turlando@user/turlando) (Read error: Connection reset by peer)
[20:59:07] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:59:34] *** heath1 is now known as heath
[21:00:36] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[21:00:37] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[21:00:37] *** Joins: turlando (~turlando@user/turlando)
[21:01:20] <jkaye> What version are you using?
[21:01:24] *** Joins: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi)
[21:03:22] <dsal> 8.4.4
[21:03:37] <dsal> Some older nix snapshot
[21:06:05] *** piele_ is now known as piele
[21:07:49] <jkaye> Lots of changes from there to current, but the biggest will be in the release note highlights for 9.0.1, which you can find here: https://downloads.haskell.org/ghc/9.0.1-rc1/docs/html/users_guide/9.0.1-notes.html
[21:10:03] <c_wraith> and I'd recommend not using 9.0.1.  8.10.7 is in better shape.  9.0 has a lot of bugs that we're apparently just waiting on 9.2 to get fixed
[21:10:31] *** Quits: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[21:11:18] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[21:11:58] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[21:14:06] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[21:15:35] *** Joins: Psybur (~Psybur@mobile-166-170-29-82.mycingular.net)
[21:16:11] <geekosaur> 9.2.1 currently has a codegen bug on ARM, but as keeps happening to it, it's raised even bigger issues
[21:16:43] <geekosaur> they're currently worried that they will have to scrap and redo all the sub-word codegen
[21:18:56] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[21:19:53] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Remote host closed the connection)
[21:22:09] <c_wraith> ah, so that's what's holding up 9.2
[21:22:44] *** Joins: hololeap (~hololeap@user/hololeap)
[21:23:54] <geekosaur> sub-word support is a huge change to ghc, it's always been word-based
[21:24:23] <geekosaur> but m1 native codegen needs proper sub-word support
[21:24:25] <c_wraith> is this like sub-word field sizes in data?
[21:24:50] <geekosaur> yeh
[21:25:04] <c_wraith> uh-oh, maybe field order important!
[21:25:05] <geekosaur> affects all FFI etc.
[21:25:08] <c_wraith> *making
[21:25:11] <hololeap> extractKnown t = case extract t of
[21:26:05] <hololeap> how can I use LambdaCase here to avoid naming `t`?
[21:26:30] <monochrom> Can't. Consider pattern guards or view patterns.
[21:26:44] <c_wraith> you'd need to put the entire case in parens to be like (\case .....) . extract
[21:26:57] <geekosaur> yeh, I was thinking becheaty with a vuiew pattern to do the extract and then you can lambdacase
[21:27:05] <geekosaur> or that
[21:27:52] <c_wraith> putting the whole thing in parens is the worst option available. :P
[21:28:30] *** Joins: fusion86 (~fusion@2a02-a44c-e6e5-1-2ff7-7242-c0bf-93e9.fixed6.kpn.net)
[21:29:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:29:56] <c_wraith> I used a view pattern today.  It felt weird, but it's part of the standard now.  I should get over it.
[21:30:05] <c_wraith> err.  pattern guard.
[21:30:08] <c_wraith> not view pattern
[21:30:21] <dsal> Every time I've used a view pattern, it didn't seem to make anything really better.
[21:30:32] <c_wraith> view patterns are clearly awesome
[21:30:39] <c_wraith> pattern guards are the sketchy ones
[21:31:01] <dsal> I use pattern guards a lot.  :)
[21:31:03] <c_wraith> well...  view patterns when combined with pattern synonyms
[21:31:24] <dsal> Oh.  Yeah, just doing them explicitly usually makes things that you could just as easily make without.
[21:31:28] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[21:31:41] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:31:50] <fusion86> Hey all, I once again come to seek wisdom. Why some something like this not get caught by the compiler/linter? https://paste.tomsmeding.com/JDBcANE1
[21:32:19] <c_wraith> pattern guards just make me sad because they have weird scoping rules.
[21:33:08] <fusion86> And is there a way to enforce a function to only accept a 'RecordA' instance, and not a 'RecordB'? Because when you just take a 'Thing' you could get either of those.
[21:33:08] <c_wraith> fusion86: I'd be all for forbidding record syntax with multiple constructors, but I don't think it's a thing that's ever seriously been considered
[21:34:13] <fusion86> Because I used that syntax in my game project like this. Would it be better to write it in another way then? https://paste.tomsmeding.com/QfpsgAy9
[21:34:15] <dsal> https://gitlab.haskell.org/ghc/ghc/-/issues/7169 left me a bit confused.
[21:34:19] <c_wraith> fusion86: the underlying problem is caused by making RecordA and RecordB the same type
[21:34:57] <c_wraith> fusion86: separate them into their own types, then have a sum type over that. Sure it adds an extra level of constructor, but it lets you actually express what you mean
[21:35:18] <dsal> You could also just not name them.
[21:35:24] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[21:35:52] *** Joins: hololeap (~hololeap@user/hololeap)
[21:35:58] <c_wraith> dsal: that doesn't help with the follow-up asking how to say something should only accept a RecordA
[21:36:29] <dsal> Oh, right.  You limit what types things can accept by making them different types.  :)
[21:37:07] *** Quits: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184) (Remote host closed the connection)
[21:37:08] <dsal> The partial record thing is a bit of an annoyance.
[21:38:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[21:38:50] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[21:38:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:39:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:39:49] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[21:40:27] *** Joins: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184)
[21:40:39] <monochrom> Do you really have functions, at the design level (so, not at the detailed coding level), that really says it doesn't want RecordB.
[21:41:42] <monochrom> Because at this point I don't trust that this is not the XY problem of "the only reason I'm asking is because I want to use a field name as a function and I want it total".
[21:42:20] <monochrom> which is an artifact of a flawed way of coding, not a consequence of the design.
[21:43:46] <monochrom> If your have two cases and they have fundamentally disjoint field names, such as in Scene...
[21:44:23] <monochrom> I can respect the field names serving a self-documentation purpose.  I mean "data T = C1 Int Int Int | C2 Int Int Int Int Int Int" is very unhelpful.
[21:45:05] <monochrom> But then I can't understand in what sense "field names are function names" is meaningful.
[21:45:07] <fusion86> Not really I think. I was writing a renderPlayer function which takes both a 'World' and a 'Player' type. But the 'Gameplay' world has a player inside it, so I started thinking what would happen if I used the record accessor function on 'World' type which does not have a player.
[21:45:22] *** Quits: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi) (Ping timeout: 260 seconds)
[21:45:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:45:52] <fusion86> At the bottom of this link https://medium.com/@willkurt/why-sum-types-matter-in-haskell-ba2c1ab4e372 is that the sum types you were talking about?
[21:45:53] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 258 seconds)
[21:46:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:46:36] <fusion86> Honestly most of my field names are there for self-documentation purposes though, is that a bad thing?
[21:46:47] <hololeap>  > I was thinking be cheaty with a view pattern to do the extract and then you can lambdacase -- geekosaur, can you show me an example of this?
[21:47:05] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[21:47:25] *** Joins: tfeb (~tfb@88.98.95.237)
[21:48:01] <merijn> fusion86: Sounds like you want -XNoFieldSelectors which should be in 9.2, I think?
[21:48:29] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[21:48:34] <merijn> fusion86: Then you can reuse fieldnames without clashes, because it eliminates the implicit functions
[21:48:59] <merijn> -XNoFieldSelectors is one of the few extensions I'm actually excited about, unlike stuff like LinearHaskell :p
[21:49:45] <fusion86> And in the rare case where I would want to have such a function I just implement it myself? Or is there some magic for that too?
[21:49:45] <hololeap> this actually works, although it may trigger nerd rage in some individuals: http://sprunge.us/42nMnn
[21:50:12] <merijn> fusion86: You just implement it yourself, yeah
[21:50:21] *** Quits: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184) (Remote host closed the connection)
[21:50:34] <dsal> hololeap: I'm not sure that introduces clarity.  :)
[21:50:41] <geekosaur> extractKnown (extract t -> t') = \case ... -- guess it's not actuallyt an improvement :(
[21:50:56] <merijn> You could rewrite that to just use regular case of and it'd be infinitely easier
[21:51:19] <monochrom> geekosaur: "this is getting out of hand. now there are two of them!"
[21:51:51] <dsal> Isn't it just `extractKnown  (extract -> t) = ...` ?
[21:52:02] <dsal> You still have `t`, but you no longer have to call `extract` on it.
[21:52:05] <geekosaur> maybe?
[21:52:09] <merijn> monochrom: We should replace more educational material with memes :p
[21:52:12] <monochrom> failing to eliminate t, now we have t' too, and Star Wars episode I
[21:52:31] *** Joins: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184)
[21:52:47] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Ping timeout: 240 seconds)
[21:54:07] *** Quits: Guest81 (~Guest81@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[21:54:45] <shapr> Is there a recipe for building haddock + hoogle in Jenkins (or other CI) and then emitting the results onto a server where I can run the hoogle server?
[21:55:03] <agumonkey> anybody knows about naperian functors ?
[21:55:33] <merijn> I'm gonna go with "yes"
[21:55:51] <hololeap> also, just want to give a shout-out to the hasklig font. cool stuff :)
[21:56:30] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[21:56:49] <agumonkey> merijn: I've been trying to read about them but couldn't find "easy" enough material
[21:57:00] <agumonkey> if you know some, feel free to slap me with it like a large truit
[21:57:22] <merijn> Oh, I've never heard about them, but I just assume someone knows about those ;)
[21:57:22] <dolio> They're probably another word someone invented for representable functors.
[21:57:51] <c_wraith> yes, they're the same as representable functors
[21:57:56] <agumonkey> yeah one blog mentioned they were derived from repr
[21:58:07] <agumonkey> merijn: I found about it on a book by gibbons and hinze IIRC
[21:58:18] <hololeap> @hackage naperian
[21:58:18] <lambdabot> https://hackage.haskell.org/package/naperian
[21:58:26] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 260 seconds)
[21:58:26] <hololeap> "Efficient representable functors"
[21:58:38] <agumonkey> so i'm not on a quest for repr functors
[21:58:40] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[21:59:10] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[22:01:10] <agumonkey> man functors are fascinating
[22:01:19] <agumonkey> i get barely nothing but I like adjoint functors
[22:01:28] *** Joins: MQ-17J (~MQ-17J@2607:fb90:47:70f6:3994:460d:fb23:b675)
[22:01:31] *** Joins: notzmv (~zmv@user/notzmv)
[22:03:21] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:07:53] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[22:09:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:14:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[22:14:59] *** Joins: neo3 (~neo3@cpe-292712.ip.primehome.com)
[22:15:36] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[22:16:35] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[22:20:27] <fusion86> Is it possible to use GHC 9.2 with stack? The latest stackage snapshot only goes up to 9.0.1 
[22:20:47] <merijn> No clue
[22:20:56] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[22:21:40] *** Joins: timCF (~timCF@m91-129-111-87.cust.tele2.ee)
[22:22:20] <jkaye> Looks like even nightly is on 9.0.1, so not that I am aware of
[22:22:37] <geekosaur> there are ways to force stack to use 9.2 prerelease. it would then be on you to constrain versions to get a functioning "resolver"
[22:22:59] <jkaye> geekosaur: how would you do something like that? Mostly just interested
[22:23:14] <geekosaur> I would assume fpcomplete is waiting for a working 9.2.1 release
[22:23:34] <geekosaur> since currently there are only prereleases and various of those have problems
[22:25:07] <geekosaur> I'm not a stack user so I can't give details off the top of my head but there's a command line option and corresponding stack.yaml entry to specify a compiler which in this case would be 9.2.0.<date>
[22:25:30] <geekosaur> I don't recall how you constrain versions to get packages that willl work with that compiler
[22:27:09] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:27:29] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[22:28:45] *** Joins: aegon (~mike@174.127.249.180)
[22:29:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:30:18] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:31:32] <fusion86> In case anyone is interested, I used this config to get it 'working' https://raw.githubusercontent.com/DanBurton/stack-setup-info-gen/master/output/stack-ghc-9.2.1-rc1.yaml
[22:31:47] <fusion86> And with 'working' in mean that GHC works but all my dependencies are rip
[22:32:05] <fusion86> But that's a problem for future me. Anyway, thanks for all the help with all my questions :)
[22:33:02] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:34:41] *** Quits: fusion86 (~fusion@2a02-a44c-e6e5-1-2ff7-7242-c0bf-93e9.fixed6.kpn.net) (Quit: Leaving)
[22:36:09] *** Quits: spopooi (~spopooi@2804:431:cfea:8190:1e39:18d9:9d9e:69d4) (Remote host closed the connection)
[22:38:00] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:39:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:39:35] *** Joins: max22- (~maxime@2a01cb088335980063b7aac9e60f4864.ipv6.abo.wanadoo.fr)
[22:44:31] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Remote host closed the connection)
[22:44:43] *** Joins: benin3 (~benin@183.82.207.116)
[22:45:14] *** Quits: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184) (Remote host closed the connection)
[22:45:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:6cb0:bf84:22bf:3285)
[22:46:55] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[22:47:10] *** Quits: benin (~benin@183.82.207.116) (Ping timeout: 260 seconds)
[22:47:10] *** benin3 is now known as benin
[22:48:18] <awpr> crowdsourcing time again: with type-level naturals, it's natural (...) to do induction on them as if they were Peano numbers.  does anyone know of a meaningful use for type-level _integers_?  would they be the subject of some useful form of induction?  if so, what form?
[22:51:57] <ski> agumonkey : perhaps the "What is a Naperian container?" by Peter G. Hancock in 2005-06-19 and "The universal property of logarithms" by Neil Ghani (via Hancock) in 2005-08-02 posts, both accessible at "Container Types" (blag) <http://sneezy.cs.nott.ac.uk/containers/blog/>, could be of some interest ?
[22:52:56] <ski> agumonkey : er, sorry. the link should be <https://web.archive.org/web/20161104231529/http://sneezy.cs.nott.ac.uk/containers/blog/>
[22:53:43] <awpr> e.g. would there be cases where you'd want to look at the sign and count towards a base case of zero?  would there be cases where you'd always want to recurse on the successor (resp. predecessor) regardless of the relation to zero?  count down to a negated power of two and terminate there?  or is there just no important form of induction on integers?
[22:54:19] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[22:55:27] <ski> awpr : not sure what the difference between the "look at the sign and count towards a base case of zero" and "recurse on the successor (resp. predecessor) regardless of the relation to zero" was ?
[22:55:52] <awpr> count towards zero is either the predecessor or successor depending on sign
[22:56:13] <awpr> always the successor counts towards +infinity, and always the predecessor counts towards -infinity
[22:57:01] <awpr> (the latter two are weird, because they don't terminate)
[22:58:29] <ski> integers are "normally" defined as a quotient (grothendieck group) -- iow, you keep a pair of a credit/"positive" and a debit/"negative" part, and identify two pairs when "they cancel to the same"
[22:58:56] <awpr> indeed.  it's a bit clunky to use that in Haskell though, especially at the type level
[22:59:18] <ski> oic
[22:59:43] <awpr> gotta normalize by performing subtraction before you can ask anything meaningful about the values, and it's harder to make things abstract at type level
[22:59:52] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 258 seconds)
[23:00:08] <ski> you can do computations without normalizing all the time. e.g. (order) comparision
[23:01:42] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[23:01:45] <awpr> so `compare (x - y) (z - w) = compare @Nat (x + w) (z + y)`?
[23:01:54] <ski> yes
[23:02:16] <awpr> ok, that representation might be more usable than I thought
[23:02:25] <ski> (also negation, addition, subtraction, multiplication, &c.)
[23:02:30] <awpr> it's still a bit awkward that `x == y` doesn't imply `x ~ y`
[23:02:42] <awpr> right, arithmetic is easily done without normalizing
[23:03:14] <awpr> the question still  remains of what the use-case might be; what would one actually use them for after all the arithmetic is done?
[23:03:48] <ski> hm, oh, i missed that part of your question
[23:03:49] <awpr> like, with naturals, you can make fixed vectors, complete binary trees, finite set types, etc.
[23:04:07] <ski> repetitions of an invertable transformation ?
[23:04:19] <awpr> oh nice
[23:04:35] <awpr> hmm, but that seems equally well served by value-level integers
[23:04:56] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[23:05:02] <awpr> I guess if you have an invertable type-level transformation somehow, but I've never seen such a thing
[23:05:12] <ski> i guess you could do free abelian group on some generators, by associating an integer with each generator
[23:05:21] *** Quits: arkeet (arkeet@moriya.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[23:05:49] <ski> yea, i'm not sure where it'd reasonably come up, on the type level
[23:06:34] *** Joins: arkeet (arkeet@moriya.ca)
[23:07:01] <awpr> maybe one of the reasons this seems weird is: most of the ways you'd use naturals is to make products or natural powers of things, but negative numbers would lead that into quotients or negative powers, and Haskell doesn't really have those in its type vocabulary
[23:10:50] *** Quits: agumonkey (~user@88.160.31.174) (Remote host closed the connection)
[23:15:45] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 260 seconds)
[23:15:46] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (Ping timeout: 252 seconds)
[23:17:28] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 252 seconds)
[23:17:37] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[23:18:42] <awpr> context: I've got https://github.com/awpr/dependent-literals/tree/gamma_kinds, and I sort of just cargo-culted in the idea that it should support negative integers, but I'm realizing a) the current representation is unwieldy, b) the negative numbers are especially unwieldy and make naturals more complicated, c) I've never really used them, and d) I can't even figure out how to contrive a use for them
[23:19:49] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[23:19:49] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Remote host closed the connection)
[23:20:07] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[23:21:30] <awpr> and e) lazy binary naturals seem to work pretty well (so far), but generalizing it to integers by adding a constructor for negatives is awkward: addition can't be lazy because the top-level sign constructor depends on the entire operands.  negabinary seems promising, but then the question is... why?  should I bother?
[23:23:48] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[23:25:13] *** Quits: MQ-17J (~MQ-17J@2607:fb90:47:70f6:3994:460d:fb23:b675) (Read error: Connection reset by peer)
[23:26:00] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[23:29:26] *** Joins: jgeerds (~jgeerds@55d40de2.access.ecotel.net)
[23:31:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:32:20] <dminuoso> merijn: Re statically linking glibc. I absolutely loathe the part that if you rely on nss or iconv, you need to dynamically link against glibc still, and it better be the same version..
[23:32:40] <koz> Does anyone know which of the GHC plugin interfaces (as documented here: https://downloads.haskell.org/~ghc/9.0.1/docs/html/users_guide/extending_ghc.html#compiler-plugins) the record-dot-preprocessor plugin uses?
[23:33:20] <ski> awpr : hmm .. i suppose maybe one might want slices of such vectors, keeping the index subrange .. and then, perhaps also want to generalize and support index ranges including negatives ?
[23:33:47] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[23:34:52] <dminuoso> And neither is necessarily easy to control, especially since NSS is likely used if anything of it uses getaddrinfo, which is more than likely.
[23:35:31] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 258 seconds)
[23:35:59] *** Joins: evocatus (~evocatus@84.51.113.13)
[23:36:47] <geekosaur> also looking up users and groups, which is done by more than just network programs
[23:37:02] <awpr> ski: interesting, like the Python notion of negative indices counting back from the end?
[23:37:12] *** Joins: juhp (~juhp@128.106.188.220)
[23:38:24] <awpr> is there a reason to want a slice 2..4 to be a different type from a slice 3..5?  or even more questionable, 2..4 of a 4-vector vs. -2..0 of a 4-vector?
[23:40:14] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb93c8c758eae23fe552.dip0.t-ipconnect.de)
[23:40:41] <ski> awpr : i was just thinking of stuff like `listArray (-4,4) [i^3 | i <- range (-4,4)]'
[23:41:21] <awpr> oh, interesting, a generalized vector with indices being a subset of some numeric type
[23:42:14] <ski> awpr : not sure. one could perhaps imagine an operation on a sequence with indices `a .. b-1' together with one with `b .. c - 1', combining them into one with `a .. c-1'
[23:42:36] <ski> well, a contiguous subset, for the slice idea
[23:42:53] <ski> (one could perhaps also imagine higher dimensional stuff ..)
[23:43:43] <awpr> yeah, I guess this generalizes to: when you start getting into implementing refinement types, then integers start to make sense at the type level whenever the value level involves integers
[23:44:04] <ski> (or perhaps one could allow other strides, hmm ..)
[23:44:07] * ski . o O ( "Multi-dimensional array views for systems programmers" by pervognsen (Per Vognsen) in 2019-01-20(?) - 2019-04-30 at <https://gist.github.com/pervognsen/0e1be3b683d62b16fd81381c909bf67e> )
[23:44:23] <awpr> ooh time to name-drop https://hackage.haskell.org/package/orthotope
[23:44:56] <awpr> in that, though, strides are only ever value-level, it's only the bounds that are (sometimes) type-level
[23:46:02] <awpr> this seems like good enough justification that I shouldn't paint things into a corner where signed numbers are ruled out, but maybe it's fine to leave them as "TODO"
[23:47:45] <awpr> it might be profitable to have the main class be `HasNaturalLiterals a`, and then (optionally) have `class HasNaturalLiterals a => HasIntegerLiterals a`.  then the integers don't interfere with naturals behaving nicely
[23:48:26] * ski . o O ( <https://en.wikipedia.org/wiki/SAC_programming_language> )
[23:48:31] *** Joins: Pickchea (~private@user/pickchea)
[23:49:11] <ski> mhm
[23:49:36] * awpr keeps this open in a tab.  might want to harvest ideas/techniques for my actual job
[23:51:22] *** Quits: arkeet (arkeet@moriya.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[23:54:55] <awpr> koz: looks like it's a source plugin pre-type-checking, `parsedResultAction`
[23:56:51] <koz> awpr: Ah, OK. So it basically modifies the parsed AST or something?
[23:59:04] <awpr> looks that way.  if it let the `(.)` operators make it to type-checking, they'd basically always be type errors, right?
[23:59:48] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Remote host closed the connection)
[23:59:51] <koz> Yeah, that makes sense.
