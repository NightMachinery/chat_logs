[00:04:06] <PMunch> Because you're looking at `untyped` data
[00:39:28] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[00:48:04] *** Quits: advesperacit (~quassel@185.219.140.52) (Quit: advesperacit)
[00:54:54] <FromDiscord> <sOkam!> Does this mean nim can use "header" files?‚ÜµIs there a preffered filetype for them, if that's the case? https://media.discordapp.net/attachments/371759389889003532/910641670314401822/unknown.png
[00:57:35] <FromDiscord> <Recruit_main707> nope, forward declarations must happen within the same file as the definition afaik, sadly
[00:58:15] <FromDiscord> <Elegantbeef> You're right
[00:58:48] <FromDiscord> <Elegantbeef> Forward declarations in nim are about having cyclical procedure calls in a file
[00:59:19] <FromDiscord> <Elegantbeef> I originally didnt like it, but i've grown to like that i know code i'm calling is declared or forward declared above the code i'm currently at
[01:00:24] <FromDiscord> <Recruit_main707> im still originally disliking it xD
[01:03:53] <FromDiscord> <sOkam!> i mean, if you include a file, is that not immediately added to the top of the current one? ü§î‚Üµthought that was the context of the `include` keyword
[01:04:10] <FromDiscord> <Elegantbeef> Eh you never really want to use include
[01:04:18] <FromDiscord> <Elegantbeef> include is more for splitting a file across multiple files
[01:04:38] <FromDiscord> <Recruit_main707> now that you mention it i guess it would work xd, but why tho
[01:04:39] <FromDiscord> <Elegantbeef> You can technically use it for forward declarations, but Nim is not C there is no benefit to that
[01:05:53] <FromDiscord> <z3nchada> hello. I am looking for a contact for a nim-lang dev for a potential bug disclosure. Would anyone happen to have a contact?
[01:06:23] <FromDiscord> <Elegantbeef> A security bug or a normal bug?
[01:07:03] <FromDiscord> <Elegantbeef> If security related https://github.com/nim-lang/security/security/policy#reporting-a-vulnerability
[01:07:14] <FromDiscord> <sOkam!> In reply to @Recruit_main707 "now that you mention": dunno if there's any benefit, just trying to understand the boundaries of the language ü§∑‚Äç‚ôÇÔ∏è‚Üµi'm guessing it could serve for sorting functions in a non-linear way, so you avoid making the mistake of calling something that hasn't been declared yet.‚Üµalso guessing it could potentially become useful if the app is very interconnected (as in oop)
[01:07:21] <FromDiscord> <z3nchada> In reply to @Elegantbeef "A security bug or": potential security. Exploitability is unknown potentially unlikely. It is a DOS vector and could be used maliciously depending on the project.
[01:07:45] <FromDiscord> <Elegantbeef> So then yea follow the link
[01:07:46] <FromDiscord> <z3nchada> In reply to @Elegantbeef "If security related https://github.com/nim-lang/sec": thanks. Sorry I didn't see this earlier.
[01:07:52] *** Quits: terminalpusher (~terminalp@2a01:586:9390:1:2e06:28a4:de81:31aa) (Remote host closed the connection)
[01:07:58] <FromDiscord> <Elegantbeef> It's fine
[01:08:47] <FromDiscord> <Elegantbeef> I dont know if i follow how it benefits, if something isnt declared yet it errors
[01:09:03] <FromDiscord> <Elegantbeef> You can forward declare all your procedures in the file you're working on, if you  want that behaviour
[01:09:20] <FromDiscord> <Elegantbeef> Though you rarely need forward declarations, only in the rare case you have a cyclical proc call
[01:09:27] <FromDiscord> <sOkam!> In reply to @Elegantbeef "I dont know if": unless it has been declared in a header-like file
[01:10:08] <FromDiscord> <sOkam!> that's what i'm understanding at least atm, might be wrong ofc
[01:10:14] <FromDiscord> <Elegantbeef> It'd still lack a definition and error
[01:10:22] <FromDiscord> <sOkam!> why?
[01:10:25] <FromDiscord> <Elegantbeef> And nim's `include` only works on a single file, and not globally
[01:10:52] <FromDiscord> <ynfle (ynfle)> Is the bridge to gitter working?
[01:11:00] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Fil
[01:11:00] <FromDiscord> <Elegantbeef> It's matrix so hopefully
[01:12:07] <FromDiscord> <sOkam!> sent a code paste, see https://play.nim-lang.org/#ix=3Fin
[01:12:20] <FromDiscord> <Elegantbeef> Exactly my point, if you only have the forward declaration it'll error
[01:12:58] <FromDiscord> <sOkam!> so that tutorial is wrong then? ü§î‚Üµnot reading from the manual yet, but got the link from the official website
[01:13:11] <FromDiscord> <sOkam!> if i understood, that last image will error?
[01:13:28] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Fio
[01:13:34] <FromDiscord> <Elegantbeef> What you just linked will work
[01:14:02] <FromDiscord> <Elegantbeef> The thing is Nim doesnt make a single file like C so a forward declaration is only in a module's scope
[01:14:30] <FromDiscord> <Elegantbeef> So the point of making an "header" is pointless
[01:15:23] <FromDiscord> <sOkam!> In reply to @Elegantbeef "So the point of": sorting things in non-linear way is the point I was initially thinking about
[01:15:43] <FromDiscord> <Elegantbeef> I dont follow
[01:16:42] <FromDiscord> <sOkam!> if you define A, then B, then C... and they depend on the previous one to work, then you are forced to sort them in that order inside your file
[01:16:55] <FromDiscord> <Elegantbeef> Yes
[01:17:10] <FromDiscord> <sOkam!> with a "header"-like file I was mentioning, you could sort them C, B, A and they would work
[01:17:11] <FromDiscord> <Elegantbeef> Or you can forward declare all of them and then dont have a order issue
[01:17:28] <FromDiscord> <Elegantbeef> Sure, but you dont need a header for that, you just forward declare them
[01:18:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Fit
[01:18:32] <FromDiscord> <sOkam!> In reply to @Elegantbeef "Sure, but you dont": its for organization. starting to read a file and having to scroll through tens of lines of declarations to reach the first block of not-boilerplate content is kinda annoying in terms of tidiness
[01:18:48] <FromDiscord> <Elegantbeef> Sure but you dont often need forward declarations
[01:18:58] <FromDiscord> <Elegantbeef> I rarely use them
[01:19:13] <FromDiscord> <sOkam!> ofc in terms of functionality its the same, but for organization in a non-linear way it could work. at least that thought is what started the Q
[01:19:34] <FromDiscord> <Elegantbeef> But i'd be lying if i said i didnt find it nicer to read since code you depend upon is written above where you're at unless it's forward declared
[01:20:14] <FromDiscord> <Elegantbeef> There is the experimental code reordering though that'll probably soon be deprecated soon and might not always work
[01:20:27] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual_experimental.html#code-reordering if you want to read about that
[01:20:35] <FromDiscord> <sOkam!> it takes mental energy to read that boilerplate, even if skimming. i noticed so far, in my personal case, that if I reduce that annoyance then I can code for much much longer
[01:21:12] <FromDiscord> <sOkam!> hence why i got interested in nim, since there is no damn curly bracers everywhere, and everyting can be so cleanly organized
[01:22:16] <FromDiscord> <sOkam!> (edit) "everyting" => "everything"
[01:24:03] <FromDiscord> <Elegantbeef> I'm curious, what code are you talking about?
[01:24:43] <FromDiscord> <sOkam!> In reply to @Elegantbeef "I'm curious, what code": wdym?
[01:25:05] <FromDiscord> <Elegantbeef> > ‚Üµ> takes mental energy to read that boilerplate, even if skimming. i noticed so far‚Üµ>
[01:25:32] <FromDiscord> <sOkam!> In reply to @Elegantbeef ">  > takes": Everything verbose c# style is the perfect example
[01:25:42] <FromDiscord> <sOkam!> Reading that style exhausts me real fast
[01:25:54] <FromDiscord> <Elegantbeef> Ok so this is a hypothetical
[01:26:09] <FromDiscord> <Elegantbeef> I thought you were reading a nim module with a lot of forward declares
[01:27:08] <FromDiscord> <sOkam!> In reply to @Elegantbeef "I thought you were": ah nope. im going through the introductory tutorials, and trying to make a mental model of whats possible in nim
[01:28:04] <FromDiscord> <Elegantbeef> Ah, then yea forward declare is a relatively uncommon tool, unless you need it. So i wouldnt be overly concerned about it
[01:29:07] <FromDiscord> <Elegantbeef> it does require linearity so i guess there is the issue anyway
[01:29:09] <FromDiscord> <K.io.S> hey guys I was reading this article:‚Üµhttps://users.rust-lang.org/t/nim-multithreading-faster-than-rust/36239‚ÜµThey claim that since Nim version 0.19.4, there are "random thread contention problems" in Nim. Can anybody confirm that threading is randomly broken? I haven't used it, but I haven't heard that to be the case.
[01:29:19] <FromDiscord> <Elegantbeef> But i'll shush since i'm just repeating myself
[01:30:01] <FromDiscord> <sOkam!> In reply to @Elegantbeef "Ah, then yea forward": i found myself naturally sorting in a nonlinear way. thankfully the language that im using supports it, otherwise I would have had a lot of trouble resorting things in my mental model ü§∑‚Äç‚ôÇÔ∏è
[01:31:56] <FromDiscord> <Elegantbeef> I dont know if there are any thread problems with Nim, i've used them a bit in a variety of projects and no issues
[01:33:10] <FromDiscord> <Elegantbeef> https://streamable.com/5antvr is 1024x1024 multi threaded particles, never had random issues with it, so guess might depend on what they're doing?
[01:35:43] <FromDiscord> <K.io.S> In reply to @Elegantbeef "https://streamable.com/5antvr is 1024x1024 multi": My thoughts were that they might be using things that became obsolete after the GC changes. Who knows.
[01:36:04] <FromDiscord> <Elegantbeef> I mean 0.19 and 1.0 are still 2+ years old now
[01:36:23] <FromDiscord> <Elegantbeef> are 2+ years old now\
[01:36:41] <FromDiscord> <Elegantbeef> So between new GCs and just general progression, might not be an issue anymore
[02:12:02] <FromDiscord> <evoalg> I read here sometimes of people meantioning nim.cfg ... what is nim.cfg used for?
[02:13:31] <FromDiscord> <Elegantbeef> there are multiple ways to pass flags to the compiler on a project basis, `nim.cfg` is one way of doing such, say you have a program which requires threads and you want that on you make a config file with `--threads:on` then you never have to pass that option
[02:14:10] <FromDiscord> <Elegantbeef> `nim.cfg` is more meant for locally, you can do `yourFile.nims` or `config.nims` aswell
[02:14:25] <FromDiscord> <Elegantbeef> the `nims` are running nimscript which means you have a subset of Nim at your disposal
[02:14:44] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/nimc.html#compiler-usage-configuration-files
[02:15:46] <FromDiscord> <evoalg> Thank you for your answer that explains everything! (and that I can understand)
[02:16:03] <FromDiscord> <Elegantbeef> Eh they dont explain everything, everything is a lot
[02:16:39] <FromDiscord> <Elegantbeef> To answer that email here, i dont have anything setup for that
[02:17:06] <FromDiscord> <evoalg> no worries I'd though I'd ask üòâ
[02:20:16] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[02:30:28] <FromDiscord> <evoalg> "flatty" was mentioned some time ago ... "Flatty - serializer and tools for flat binary blobs" .. what does this module do? What is a binary blob and why would I want to flatten one? Or should I just not worry about it since it's probably to do with some C stuff that I'm not interesting in right now?
[02:30:50] <FromDiscord> <evoalg> The module description didn't really tell me
[02:30:51] <FromDiscord> <Elegantbeef> If you want to convert an object to a binary format and store it or share it
[02:32:17] <FromDiscord> <evoalg> ahh instead of using some json to store it or share it, ok
[02:39:56] <FromDiscord> <IsaacPaul> I had to look up what it means to be flat lol‚Üµ> Access to serialized data without parsing/unpacking
[02:41:45] <FromDiscord> <IsaacPaul> I suppose you get through-put at the cost of increased bandwidth compared to protocol buffers
[02:43:08] <FromDiscord> <Elegantbeef> Well you can always apply compression to reduce the bandwidth a bit
[02:44:09] <FromDiscord> <IsaacPaul> That's true.. I wonder if that makes up for the difference ü§î  it would be interesting to compare
[02:44:58] <FromDiscord> <treeform> In reply to @evoalg "ahh instead of using": Flatty is like 10x faster then jsony. I made flatty for binary files and network packets.
[02:45:43] <FromDiscord> <treeform> I recommend using supersnappy to compress the whole thing after.
[02:47:02] <FromDiscord> <treeform> I use flatty when I controll both ends. I use JSON when I don't.
[02:49:30] <FromDiscord> <evoalg> makes sense thank you!
[02:50:19] <FromDiscord> <IsaacPaul> I've written a serializer before (in c#).. it was a pretty fun project. (https://github.com/izackp/AutoBuffer)
[02:51:40] <FromDiscord> <Elegantbeef> I've written multiple serializers for Nim, it's quite fun
[02:51:56] <FromDiscord> <Elegantbeef> This reminds me i should replace my RPC's backing with disruptek's frosty
[02:57:44] *** Quits: src (~src@user/src) (Quit: Leaving)
[03:09:15] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 250 seconds)
[03:17:18] *** Joins: vicfred (~vicfred@user/vicfred)
[03:17:22] <FromDiscord> <hmmm> In reply to @treeform "Flatty is like 10x": hey tformy last time I tried flatty I remember it didn't eat seq[seq[float]] or something, while jsony gobbled it just fine. Was I drunk or it's true and there is some reason for it?
[03:18:59] *** Joins: mahlon (~mahlon@martini.nu)
[03:41:14] <FromDiscord> <treeform> I don't think so, open an issue with small repro case and I'll fix it.
[03:42:41] <FromDiscord> <sealmove> when you compile with the `outDir` switch, are relative paths in imports resolved based on that dir, or are they resolved based on `$PWD`?
[03:43:50] <FromDiscord> <Elegantbeef> outDir should be based off your current work directory
[03:44:12] <FromDiscord> <sealmove> ? if it's the same then what's the point of the switch alltogether?
[03:44:31] <FromDiscord> <Elegantbeef> to change the output directory?
[03:44:37] <FromDiscord> <sealmove> oh
[03:44:49] <FromDiscord> <sealmove> change _to_ the output dir?
[03:44:55] <FromDiscord> <Elegantbeef> you can have a `configs.nim` with `--outputdir:"bin/"`
[03:45:04] <FromDiscord> <Elegantbeef> `outDir`\
[03:45:29] <FromDiscord> <Elegantbeef> `--outdir:DIRset the path where the output file will be written`
[03:46:14] <FromDiscord> <sealmove> i know that the executable is placed in `outdir`, but if you have an import with a relative path, will it be relative to `outdir`?
[03:46:27] <FromDiscord> <Elegantbeef> No
[03:46:55] <FromDiscord> <sealmove> are you 100% sure? :)
[03:46:59] <FromDiscord> <Elegantbeef> having imports depend on outDir would wreak havoc on reproducable builds
[03:47:17] <FromDiscord> <Elegantbeef> Why would outDir change the imports, that's just hell
[03:49:19] <FromDiscord> <sealmove> I didn't say it should. Just trying to understand my program
[03:51:31] <FromDiscord> <sealmove> Thanks Elegantbeef
[04:43:10] *** Quits: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:45:42] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[04:45:57] *** Joins: Colt (~Colt@user/colt)
[05:02:38] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:35:44] <FromDiscord> <Jakraes> Hey guys, quick question, how do I open txt files with nim?
[05:36:53] <rockcavera> jakraes see std/streams
[05:37:58] <FromDiscord> <Jakraes> Thanks!
[05:38:04] <rockcavera> =)
[05:51:57] <FromDiscord> <deech> sent a code paste, see https://play.nim-lang.org/#ix=3FjB
[05:52:16] <FromDiscord> <Elegantbeef> Cause it's a constant
[05:53:34] <FromDiscord> <deech> Is there any documentation on `lent`  outside of `destructors.rst`?
[05:54:07] <FromDiscord> <Elegantbeef> It's just a mutable reference so everything that applies to `var` applies to it
[05:54:17] <FromDiscord> <Elegantbeef> immutable\
[05:54:52] <FromDiscord> <Elegantbeef> Just like `var T` presently it does copy on assignment and all that jazz, but if you dont store it will not copy
[05:58:50] <FromDiscord> <Elegantbeef> I know not overly helpful, but i dont think there are any other docs on the matter
[06:04:40] <FromDiscord> <deech> Then what's the advantage to returning a `lent T` instead of `T` since neither can be passed to a `var T` argument.
[06:05:16] <FromDiscord> <Elegantbeef> `lent` is borrowed always
[06:05:39] <FromDiscord> <deech> So it just avoids a copy?
[06:06:01] <FromDiscord> <Elegantbeef> Yes, plus when views become standard you'll be able to get save views
[06:06:06] <FromDiscord> <Elegantbeef> safe views\
[06:06:39] <FromDiscord> <deech> Why are they unsafe now?
[06:06:47] <FromDiscord> <deech> BTW thanks for answering my questions.
[06:07:44] <FromDiscord> <Elegantbeef> Well views are experimental is what i mean, presently without them you have to use pointers to get views and manually ensure they dont outlive the place of borrowing
[06:08:14] <FromDiscord> <deech> Ah, ok, so if you enable `{experimental: views.}` you do get safe views?
[06:08:25] <FromDiscord> <Elegantbeef> the thing is with lent annotations copies wont be made unless it's needed with viewtypes when they become standard
[06:08:33] <FromDiscord> <Elegantbeef> Yea they should be safe
[06:08:37] <FromDiscord> <impbox [ftsf]> experimentally safe
[06:08:58] <FromDiscord> <deech> I caught that nuance thanks. üôÇ
[06:10:24] <FromDiscord> <Elegantbeef> lent is much like openarray, in that smart usage can make code faster üòõ
[06:11:18] <FromDiscord> <impbox [ftsf]> can idiotic usage code make slower?
[06:11:36] <FromDiscord> <Elegantbeef> Not really since Nim knows to copy when it needs to
[06:11:41] <FromDiscord> <impbox [ftsf]> win
[06:12:16] <FromDiscord> <Elegantbeef> Like `proc doThing(s: SomeObj): lent SomeOtherObj = s.field` will only copy when you do `var a = someObj.doThing()` and things like it
[06:12:33] <FromDiscord> <Elegantbeef> but if you do `echo someObj.doThing()` it'll be borrowed
[06:13:22] <FromDiscord> <Elegantbeef> Nim's move semantics and borrowing is quite nice, but the caveat is that there is no way of barring copies in a limited capacity, say you have a hotpath you never want to copy and want `sink` to actually sink, you're up shit creek
[06:13:56] <FromDiscord> <Elegantbeef> You either make everything under a specific scope incapable of copying on sink, or you manually ensure copies dont happen
[06:14:45] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/RFCs/issues/432 RFC that talks about that
[06:15:02] <FromDiscord> <deech> How does copy do the right thing when `SomeOtherObj` is an object with a `ptr` field?
[06:16:14] <FromDiscord> <Elegantbeef> so you're saying like `lent ptr int`?
[06:17:00] <FromDiscord> <deech> Like `type O = object; p: ptr int; proc f():lent O = ...`
[06:17:49] <FromDiscord> <Elegantbeef> Well it'd copy  the ptr in that case, which is of course dangerous, but in the future with view types it'd be a borrowed immutable view
[06:18:26] <FromDiscord> <Elegantbeef> Cause `lent T` will have the same semantics as `strictFuncs` in that any mutation to the object would be a compile time error afaik
[06:19:09] <FromDiscord> <Elegantbeef> I suppose i could be wrong about this stuff, i'm a lowly numpty afterall üòÄ
[06:24:24] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[06:25:02] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[06:25:16] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca)
[06:29:03] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca) (Client Quit)
[06:30:15] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca)
[07:13:20] <FromDiscord> <Jakraes> Another question, is there a library that allows nim to create image files?
[07:16:21] <FromDiscord> <impbox [ftsf]> I use nimPNG for loading and saving PNGs
[07:16:46] <FromDiscord> <impbox [ftsf]> stb_image is pretty easy to use
[07:17:35] <FromDiscord> <Jakraes> Sounds great, I'll try it out, thanks!
[07:18:12] <FromDiscord> <impbox [ftsf]> stb_image is a wrapped c header library, can do a bunch of formats, nimPNG just does PNG but is pure nim
[07:19:31] <FromDiscord> <Jakraes> I think nimPNG is probably the best for what I'm trying to make, just wanna keep it really simple
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:41:45] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:48:26] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:10:12] <FromDiscord> <Yardanico> In reply to @Jakraes "I think nimPNG is": For more complex stuff there's pixie
[09:10:22] <FromDiscord> <Yardanico> It has a lot of features
[09:57:18] *** Quits: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder) (Ping timeout: 260 seconds)
[10:24:16] <FromDiscord> <treeform> Yes pixie can also read and write png files.
[10:24:54] <FromDiscord> <treeform> Here are some speed numbers: https://discord.com/channels/371759389889003530/706542664643772436/794660369741905930
[10:25:38] <FromDiscord> <treeform> Like nimPNG pixie has a pure nim png reader/writer.
[10:50:24] *** Joins: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[11:07:49] <NimEventer> New thread by Kobi: MetaCall, see https://forum.nim-lang.org/t/8635
[11:13:26] *** Joins: neurocyte0132889 (~neurocyte@45.131.37.7)
[11:13:26] *** Quits: neurocyte0132889 (~neurocyte@45.131.37.7) (Changing host)
[11:13:26] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[11:41:51] *** Joins: advesperacit (~advespera@185.219.140.135)
[11:50:14] *** Quits: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:09:05] *** Joins: Vladar (~Vladar@46.162.2.53)
[12:26:57] <FromDiscord> <ynfle (ynfle)> Why are object fields in a TypeDef Ident not Sym?
[12:27:45] *** Joins: PMunch (~PMunch@user/pmunch)
[12:28:36] <FromDiscord> <Elegantbeef> What's the macro?
[12:28:41] <FromDiscord> <Elegantbeef> Is it a typed or untyped macro?
[12:31:01] <PMunch> @Elegantbeef, tried to tell him yesterday :P https://irclogs.nim-lang.org/17-11-2021.html#20:34:06
[12:31:28] <FromDiscord> <Elegantbeef> It could be typed data, but if it's a typedef the syms arent bound since they'd point to nothing
[12:33:28] <FromDiscord> <Elegantbeef> For instance https://play.nim-lang.org/#ix=3FkE
[12:43:13] <FromDiscord> <ynfle (ynfle)> @Pmunch The gitter bridge was broken so I didn't see the reply. Either way it was typed
[12:43:29] <PMunch> Ah, that's a bummer
[12:43:44] <PMunch> Hmm, then I guess ElegantBeef has the correct answer
[12:43:59] <FromDiscord> <ynfle (ynfle)> @beef what do you mean by point to nothing?
[12:44:33] <FromDiscord> <Elegantbeef> Well what'd the symbols access when you wrote them
[12:44:40] <FromDiscord> <Elegantbeef> There isnt anything instantiated to reference
[12:45:00] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3FkH for the better comparison of AST
[12:47:28] <FromDiscord> <ynfle (ynfle)> Makes sense
[12:47:31] <FromDiscord> <ynfle (ynfle)> I think
[12:48:40] <FromDiscord> <Elegantbeef> What are you trying to do?
[12:58:07] <NimEventer> New thread by Planetis: Always confused with float conversions, see https://forum.nim-lang.org/t/8636
[13:00:03] <FromDiscord> <ynfle (ynfle)> Lots of stuff, but I was just curious. I wast using a modified version of `macrotuils.forNode` that doesn't modify the value so it can work on typed ASTs to gather all the types that are use in the code that are defined in the current module. For some reason it didn't visit the field of an object or tuple
[13:01:01] <FromDiscord> <Elegantbeef> Ah i was more asking the overall goal if that is a blocker üòÄ
[13:01:30] <FromDiscord> <ynfle (ynfle)> Just trying to figure out why they weren't visited
[13:02:27] <FromDiscord> <Elegantbeef> Ah then i guess you have the answer üòÄ
[13:11:11] <PMunch> ynfle_(ynfle), if you make modifications to macroutils please share them :)
[13:11:49] <FromDiscord> <ynfle (ynfle)> With pleasure.
[13:11:50] <FromDiscord> <Rika> Is it bound by license
[13:12:32] <FromDiscord> <ynfle (ynfle)> There isn't any license
[13:12:55] <FromDiscord> <Elegantbeef> Well shit
[13:13:03] <PMunch> There is
[13:13:05] <PMunch> It's MIT
[13:13:36] <PMunch> https://github.com/PMunch/macroutils/blob/master/macroutils.nimble#L6
[13:13:41] <FromDiscord> <ynfle (ynfle)> @Pmunch what should I call it? It is a modified version of forNode that doesn't modified the AST
[13:14:03] <FromDiscord> <ynfle (ynfle)> Sneaky for not putting it in the repo
[13:14:17] <PMunch> I just keep forgetting..
[13:14:34] <PMunch> I give them MIT when Nimble asks me and I don't think about it again
[13:15:02] <FromDiscord> <ynfle (ynfle)> All good
[13:15:59] <PMunch> Hmm, what to call it is tricky
[13:16:23] <FromDiscord> <ynfle (ynfle)> I called it forNodeImut
[13:16:24] <PMunch> Can you inspect the action argument and just not modify the tree if it doesn't return anything?
[13:16:33] <PMunch> That way they can both be called forNode
[13:16:54] <FromDiscord> <ynfle (ynfle)> Let me see
[13:17:01] <FromDiscord> <ynfle (ynfle)> I can just over load I think
[13:17:16] <PMunch> Oh yeah, it takes a proc as an argument. So you should be able to just add an overload
[13:17:58] <PMunch> Please make forNodePos also work like this if you don't mind :)
[13:17:59] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[13:18:31] <FromDiscord> <Elegantbeef> Wow pmunch getting free labour and will make millions off of it!
[13:19:11] <PMunch> Haha, millions with my MIT licensed work :P
[13:19:57] <PMunch> I mean I do make a couple bucks a year off-of GitHub sponsorships. I think it's like $40 or something
[13:20:17] <FromDiscord> <Elegantbeef> Damn disruptek paying those bills üòõ
[13:25:10] <PMunch> Huh, apparently I've calculated all wrong, I actually get a nice little sum. About a beer a month
[13:44:18] <NimEventer> New thread by Wiltzutm: Energy efficiency, see https://forum.nim-lang.org/t/8637
[13:51:20] <FromDiscord> <Stuffe> How do you check if an integer has an enum value associated with it? Like `if 5 in my_directions: ...`
[13:51:37] <FromDiscord> <Stuffe> That one doesn't work of course. Do I have to use try/catch?
[13:51:44] <FromDiscord> <Elegantbeef> Are the enums sequentially stored?
[13:51:55] <FromDiscord> <Stuffe> right now yes
[13:52:14] <FromDiscord> <Stuffe> ah you are thinking of using my_directions.high?
[13:52:26] <FromDiscord> <Elegantbeef> `if x in MyEnum.low.ord .. MyEnum.high.ord`
[13:53:14] <FromDiscord> <Stuffe> ok thank you, I was hoping to use this enum as IDs, so would rather not commit to no holes
[13:53:52] <FromDiscord> <Stuffe> I mean I don't want to be able to store these enum integers and never rearrange even if one of the enum fields are deleted
[13:54:01] <FromDiscord> <Stuffe> (edit) 04removed "don't"
[13:54:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FkX
[13:54:34] <FromDiscord> <Elegantbeef> I personally despise holey enums
[13:54:43] <FromDiscord> <Stuffe> I see
[13:55:40] <FromDiscord> <Stuffe> well in general I would rather keep things simple as well, but sometimes reality complicates things
[13:57:01] <FromDiscord> <Elegantbeef> Well it's less about simple imo, just that they suckkkkkkk üòÄ
[13:58:06] <FromDiscord> <Stuffe> well explicitly keeping track of key value pars has other downsides
[13:58:29] <FromDiscord> <Stuffe> I could see myself doing that sometimes
[13:58:48] <FromDiscord> <Stuffe> but I think its less readable
[13:59:37] <FromDiscord> <Elegantbeef> Anyway for holey read this forum post and choose your favourite https://forum.nim-lang.org/t/8188
[14:01:11] <FromDiscord> <Stuffe> oh god. Why isn't there an easy check like `if x in my_enum:`
[14:01:30] <FromDiscord> <Elegantbeef> Cause holey enums suck üòÄ
[14:02:02] <FromDiscord> <Elegantbeef> Joke aside, https://forum.nim-lang.org/t/8188#52705 has the basis for that
[14:02:27] <FromDiscord> <Elegantbeef> and now `enumAsSet` isnt needed since `setUtils` now exists
[14:03:21] <FromDiscord> <Elegantbeef> It's still pretty bad so i guess time for a PR to enum utils üòâ
[14:40:50] *** Quits: fputs (~fputs@67.59.83.166) (Remote host closed the connection)
[14:41:42] *** Joins: fputs (~fputs@67.59.83.166)
[14:49:15] <FromDiscord> <haxscramper> You can overload 'contains' for enum typedesc‚Üµ(@Stuffe)
[14:50:02] <FromDiscord> <haxscramper> `proc [E: enum](Enum type: typedesc[E], value: int): bool`
[14:51:57] <FromDiscord> <Stuffe> I see
[14:53:53] <FromDiscord> <Stuffe> Really contiguous enums and non contiguous enums should be 2 different things completely in my opinion and simple things like this should be in the standard lib
[15:22:13] <PMunch> Hmm, is there a way to use Nim types in GDB?
[15:22:52] <PMunch> I need to cast a generic pointer to a Nim type, and currently I use the obfuscated name, but it would be nice to not have to check the C file to find those names every time
[15:25:24] <FromDiscord> <Yardanico> In reply to @PMunch "Hmm, is there a": https://github.com/nim-lang/Nim/blob/devel/tools/nim-gdb.py should work
[15:25:50] <FromDiscord> <Yardanico> but it's not perfect
[15:28:20] <PMunch> Hmm, nim-gdb is installed in .nimble. But it doesn't work because it requires /home/peter/.nimble/tools/nim-gdb.py which isn't installed :P
[15:29:11] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[15:35:41] <PMunch> Hmm, it wasn't able to do casting to types though..
[15:35:57] <PMunch> `print *(tyObject_ModuleQueryData__mgCg2qkWiF7TTb2pRsGCMQ*)qstate.minfo[1]`
[15:36:01] <PMunch> This is what I'm doing now
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:25] <PMunch> To print the `qstate.minfo[1]` field as a `ptr ModuleQueryData`
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:49:28] <FromDiscord> <gingerBill> sent a code paste, see https://play.nim-lang.org/#ix=3Fln
[15:49:47] *** Joins: rockcavera (~rc@192.12.113.76)
[15:49:47] *** Quits: rockcavera (~rc@192.12.113.76) (Changing host)
[15:49:47] *** Joins: rockcavera (~rc@user/rockcavera)
[15:49:59] <FromDiscord> <haxscramper> no, there is no flag toggle function
[15:50:05] <FromDiscord> <Yardanico> there is in stdlib
[15:50:12] <FromDiscord> <haxscramper> oh, there is now
[15:50:13] <FromDiscord> <Yardanico> https://nim-lang.github.io/Nim/setutils.html#%5B%5D%3D%2Cset%5BT%5D%2CT%2Cbool
[15:50:28] <FromDiscord> <Yardanico> In reply to @gingerBill "For bitsets in Nim,": hi, are you improving a wasm4 nim version or something? :P
[15:50:31] <FromDiscord> <gingerBill> Okay, so bit sets allow for indexing with that overload.
[15:50:35] <FromDiscord> <gingerBill> In reply to @Yardanico "hi, are you improving": No.
[15:50:35] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[15:50:51] <FromDiscord> <Yardanico> just generally interested in Nim? it's nice to see creators of other languages here though :)
[15:51:17] <FromDiscord> <gingerBill> I used to be on this Discord and for some reason I wasn't any more. I also make sure to research as many languages as I can.
[15:51:22] <FromDiscord> <Yardanico> oh, okay
[15:52:08] <FromDiscord> <gingerBill> So does Nim not also overload `[]`?
[15:52:31] <FromDiscord> <Rika> You can make it overload that
[15:52:37] <FromDiscord> <gingerBill> So the answer is no
[15:52:54] <FromDiscord> <Rika> I mean if that‚Äôs what you interpret it as then sure
[15:53:04] <FromDiscord> <gingerBill> Seems really bizarre that std/setutils only overloads `[]=` and not `[]`
[15:53:15] <FromDiscord> <Rika> Huh
[15:53:24] <FromDiscord> <Rika> I‚Äôll look wait
[15:53:35] <FromDiscord> <Rika> Huh
[15:53:44] <FromDiscord> <Yardanico> In reply to @gingerBill "Seems really bizarre that": yeah it's a bit weird
[15:53:47] <FromDiscord> <Rika> It‚Äôs a pretty new module so
[15:53:48] <FromDiscord> <Rika> I don‚Äôt know
[15:53:54] <FromDiscord> <Yardanico> yeah, it's fair to make a feature request
[15:55:30] <FromDiscord> <Yardanico> In reply to @gingerBill "Seems really bizarre that": ahh right i understand what you're asking for
[15:55:41] <FromDiscord> <Yardanico> nim has a `contains` defined for sets
[15:55:43] <FromDiscord> <Yardanico> so you can do
[15:55:51] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Flo
[15:55:57] <FromDiscord> <gingerBill> The other reason I find it a little weird is that it seems to be treating a set as if its an array of packed booleans _semantically_ whilst its normal behaviour is to use `x in y` rather than `y[x]`
[15:56:42] <FromDiscord> <Rika> So what should it be instead of []=?
[15:56:44] <FromDiscord> <Yardanico> In reply to @gingerBill "The other reason I": well I can't think of a simpler syntax for conditional inclusion
[15:56:47] <FromDiscord> <gingerBill> (edit) "rather than" => "and now the new "
[15:56:52] <FromDiscord> <Rika> .toggle()?
[15:57:00] <FromDiscord> <Rika> Or I don‚Äôt know I‚Äôm just asking
[15:57:02] <FromDiscord> <gingerBill> There is a reason I'm asking this question üòõ
[15:57:36] <FromDiscord> <gingerBill> Because in the past, if you wanted to do this in Pascal variants, you had to make wrapper procedures for each of them
[15:57:39] <FromDiscord> <Rika> Well I feel like []= was just chosen because of lack of better syntax
[15:57:45] <FromDiscord> <Yardanico> In reply to @gingerBill "Because in the past,": interesting
[15:57:55] <FromDiscord> <Yardanico> Nim is pascal-influenced quite a lot, but it's better to treat it as a separate language
[15:57:59] <FromDiscord> <gingerBill> And it was a procedure call rather than an operator
[15:58:10] <FromDiscord> <gingerBill> In reply to @Yardanico "Nim is pascal-influenced quite": I understand that very well
[15:58:25] <FromDiscord> <Yardanico> default set operations are described here https://nim-lang.org/docs/manual.html#types-set-type
[15:58:31] <FromDiscord> <Yardanico>  https://media.discordapp.net/attachments/371759389889003532/910869072231686184/unknown.png
[15:58:51] <FromDiscord> <gingerBill> I should be clear, I'm looking to see if Nim has solved this problem before and how because both Nim and Odin have bit set types which we both nicked from Pascal.
[15:59:22] <FromDiscord> <gingerBill> And it looks like Nim's current approach is just hacking it in, for the lack of a better word.
[16:01:42] <FromDiscord> <Rika> Hacking how
[16:01:47] <FromDiscord> <Rika> What‚Äôs the hack in this case
[16:02:07] <FromDiscord> <gingerBill> Only overloading `[]=` is a hack/bodge
[16:02:30] <FromDiscord> <Yardanico> In reply to @Rika "Hacking how": How []= for toggling a set is overloaded but to check the presence of an element in a set you use `contains`
[16:02:39] <FromDiscord> <Rika> I see
[16:02:44] <FromDiscord> <Rika> It‚Äôs half assed I guess yeah
[16:02:47] <FromDiscord> <Yardanico> well, i don't know if adding `[]` which aliases to `contains` to setutils would be a good idea or not
[16:03:20] <FromDiscord> <Rika> My messages are sending late because I live in the middle of fucking nowhere so just a disclaimer
[16:03:52] <FromDiscord> <Rika> In reply to @Yardanico "well, i don't know": The better idea IMO is to rename []= I guess
[16:03:59] <FromDiscord> <gingerBill> Well this is a design problem. I'm not a huge fan of the idea of allowing `[]` on bit sets because they are not arrays. If it was than `[]=` is a logical conclusion of that logic. But it is the `[]` that is question.
[16:04:33] <FromDiscord> <gingerBill> So it does look like the solution to the problem is to just make a helper procedure to do the same thing similar to `incl` and `excl`
[16:04:39] <FromDiscord> <Yardanico> In reply to @Rika "The better idea IMO": the PR was in https://github.com/nim-lang/Nim/pull/17272
[16:04:57] <FromDiscord> <Rika> In reply to @gingerBill "So it does look": Wonder what it should be named though
[16:05:15] <FromDiscord> <Yardanico> apparently it was []= because D, swift and C++ have the same way
[16:05:26] <FromDiscord> <Yardanico> but yes there were arguments against that syntax
[16:05:33] <FromDiscord> <Rika> Mask?
[16:05:33] <FromDiscord> <Rika> Actually doesn‚Äôt sound too bad, I believe that bitops module uses the same name
[16:05:33] <FromDiscord> <gingerBill> `std::bitset` in C++ allows `[]` access and thus makes sense
[16:05:48] <FromDiscord> <Rika> Again my messages are sending way late
[16:05:50] <FromDiscord> <Rika> Goodness
[16:05:51] <FromDiscord> <gingerBill> It's more of a "put bit" like operation but that is a poor name
[16:05:54] <FromDiscord> <Yardanico> In reply to @gingerBill "`std::bitset` in C++ allows": yeah, you're right, it's weird that []= was added but not [] :)
[16:09:45] <FromDiscord> <eyecon> I think I'm having a brain/reading comprehension fart: how do I specify that a .nim file is always to be compiled with `-d:ssl`? There was a pragma for that, I thought, but I can't find it atm
[16:11:08] <FromDiscord> <Yardanico> In reply to @eyecon "I think I'm having": just add -d:ssl to yourfile.nim.cfg
[16:11:10] <FromDiscord> <Rika> No pragma here, please use the Nim config file
[16:11:17] <FromDiscord> <Yardanico> or switch("define", "ssl") if you prefer to use .nims
[16:11:39] <FromDiscord> <Rika> In reply to @Yardanico "just add -d:ssl to": Needs to be --define:ssl I believe
[16:11:43] <FromDiscord> <Rika> Unless that has changed
[16:11:47] <FromDiscord> <eyecon> Ah, thanks
[16:12:00] <FromDiscord> <Yardanico> @gingerBill feel free to comment on https://github.com/nim-lang/Nim/issues/19163, i just quickly made it
[16:12:05] <FromDiscord> <eyecon> In reply to @Rika "Needs to be --define:ssl": `-d:ssl` seems to work for me
[16:12:12] <FromDiscord> <Yardanico> In reply to @Rika "Needs to be --define:ssl": no
[16:12:22] <FromDiscord> <Yardanico> .cfg files have the same argument format as the nim compiler
[16:12:29] <FromDiscord> <Yardanico> so both -d and --define work
[16:12:38] <FromDiscord> <Rika> Huh okay
[16:14:12] <arkanoid> is there a table that keeps columns of different types? I need to operate on data like pandas. I could surely add a layer over arraymancer dataframes, but seems an overkill
[16:15:02] <FromDiscord> <Yardanico> @arkanoid I think it'd be better if you ask in #nim-science  as well
[16:15:10] <FromDiscord> <Yardanico> that channel is focused on stuff like this
[16:16:08] <arkanoid> too many people there! :P
[16:16:19] <FromDiscord> <Yardanico> ü§î
[16:25:07] <FromDiscord> <vindaar> Just because there isn't a lot of active discussion going on there lately, doesn't mean we aren't there to answer questions üòâ‚Üµ(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[16:36:13] <FromDiscord> <Fish-Face> I am going to give a short (15m) talk to some co-workers about Nim, just to introduce it. The main point will be "it has nice syntax but it's faster than python". Anyone got some ideas of good - and simple - things to cover or use as examples will making that point? I was wondering about a simple example that makes use of macros.
[16:37:41] <FromDiscord> <Rika> Personally would recommend not going too hard on macros, people tend to dislike it even if irrationally
[16:38:17] <FromDiscord> <Fish-Face> hmm interesting
[16:39:55] <FromDiscord> <xflywind> https://github.com/nim-lang/website/blob/master/jekyll/_posts/2021-10-19-version-160-released.md#why-use-nim
[16:57:56] <FromDiscord> <Yardanico> In reply to @Fish-Face "I am going to": See https://forum.nim-lang.org/t/8503 for example too
[16:58:28] <FromDiscord> <Yardanico> Also don't forget to mention https://github.com/yglukhov/nimpy as a point about smaller ecosystem
[16:58:37] <FromDiscord> <Yardanico> Tell them that they can reuse Python modules :)
[16:58:56] <FromDiscord> <Yardanico> But of course no performance benefit if heavy calculations are done in this module
[16:59:06] <FromDiscord> <Yardanico> (edit) "this module" => "Python modules"
[17:00:12] <arkanoid> I think I've just found a single project where I will use all nim backends at the same time
[17:00:19] <FromDiscord> <Yardanico> All?
[17:00:34] <FromDiscord> <Yardanico> C, C++, Objective C, JS?
[17:00:48] <arkanoid> damn, I forgot about ObjectiveC
[17:00:51] <arkanoid> so not all
[17:00:54] *** Joins: neurocyte0132889 (~neurocyte@45.131.37.7)
[17:00:54] *** Quits: neurocyte0132889 (~neurocyte@45.131.37.7) (Changing host)
[17:00:54] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:00:56] <FromDiscord> <Yardanico> :)
[17:01:02] <arkanoid> :)
[17:02:09] <FromDiscord> <Rika> Objective C is the most neglected backend (though it‚Äôs not the least polished) ngl
[17:09:12] <arkanoid> I've was an ObjectiveC programmer during the iPhone 1,2 era
[17:09:39] <arkanoid> language was ok, but xcode and apple docs were incredible
[17:09:42] <FromDiscord> <Rika> Wow that‚Äôs a while back
[17:09:55] <FromDiscord> <Rika> Apple docs are no longer incredible xd
[17:10:14] <arkanoid> well yeah everything was simple there
[17:10:26] <arkanoid> now it's same hell as android, but I thing android aged better
[17:10:30] <arkanoid> *think
[17:10:47] <FromDiscord> <Rika> Yeah afaik Apple really neglected documentation
[17:11:40] <arkanoid> I've stopped using Apple stuff when I realized it shifted from professional tools for developers to stuff for hipsters
[17:13:08] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[17:14:14] <arkanoid> I have to setup the environment for a frontend/backend app made in nim. I'm not sure what's the best way to split the two. Two independent nimble projects, or a larger one with custom nimble tasks? I prefer the second one, as here what shines is the shared logic, but I'm not sure
[17:14:49] <FromDiscord> <Rika> Ah this problem again haha
[17:14:55] <FromDiscord> <Rika> I remember someone asking this before
[17:15:32] <FromDiscord> <Rika> I believe if you‚Äôre gonna publish this later you should do two packages
[17:15:40] <FromDiscord> <Rika> If not then I guess whichever you think is best
[17:22:24] *** Quits: advesperacit (~advespera@185.219.140.135) (Ping timeout: 268 seconds)
[17:22:32] *** Joins: advesperacit_ (~advespera@45.12.220.60)
[17:26:41] *** Joins: arkurious (~arkurious@user/arkurious)
[17:52:11] <FromDiscord> <hmmm> rika it's time for you to get to Tokyo. Incredibly speedy internet there I hear üëò
[17:54:28] <FromDiscord> <tandy> is the objective c backend even documented?‚Üµ(@Yardanico)
[18:15:42] <FromDiscord> <Rika> In reply to @hmmm "rika it's time for": Haha I can‚Äôt
[18:15:50] <FromDiscord> <Rika> Expensive to live there
[18:16:17] <FromDiscord> <Rika> I‚Äôd prolly have rent that‚Äôs 4x my current rent if I did
[18:42:04] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[18:43:45] <arkanoid> and now let's see if antivirus will trigger rust toolchain too https://kerkour.com/rust-crate-backdoor/
[18:44:12] <arkanoid> I guess not, thanks to https://www.rust-lang.org/sponsors
[18:45:15] *** Joins: neurocyte0132889 (~neurocyte@45.131.37.7)
[18:45:15] *** Quits: neurocyte0132889 (~neurocyte@45.131.37.7) (Changing host)
[18:45:15] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:47:56] *** Joins: lumo_e (~enrico@151.29.48.90)
[19:12:34] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[19:13:05] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[19:23:15] <PMunch> arkanoid, I guess a three way split might be a good solution
[19:23:36] <arkanoid> yes
[19:23:38] <PMunch> Common logic in one module, server logic in another, and client logic in a third
[19:34:09] *** Quits: pch (~pch@66.49.131.33) (Read error: Connection reset by peer)
[19:34:15] *** Joins: pch (~pch@66.49.131.33)
[19:39:19] <FromDiscord> <retkid> what does <type>
[19:39:20] <FromDiscord> <retkid> (edit) "what does <type> ... " 03added "mean"
[19:46:48] <PMunch> What a type means?
[19:50:58] <FromDiscord> <retkid> <> signifies the type is immutable
[19:54:08] *** Quits: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1) (K-Lined)
[19:54:15] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (K-Lined)
[19:56:04] <NimEventer> New post on r/nim by GeroSchorsch: How to enforce functional programming in nim?, see https://reddit.com/r/nim/comments/qwtff3/how_to_enforce_functional_programming_in_nim/
[20:05:29] *** Quits: ormiret (sid314108@lymington.irccloud.com) (Ping timeout: 264 seconds)
[20:06:41] *** Quits: euantorano (sid180289@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[20:06:42] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[20:07:44] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (Ping timeout: 246 seconds)
[20:08:35] *** Joins: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[20:09:33] *** Quits: robertmeta (sid514@user/robertmeta) (Ping timeout: 250 seconds)
[20:10:02] *** Quits: LyndsySimon (sid34452@lymington.irccloud.com) (Read error: Connection reset by peer)
[20:11:34] *** Joins: ormiret (sid314108@lymington.irccloud.com)
[20:11:56] *** Quits: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:12:30] *** Joins: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[20:12:51] *** Joins: LyndsySimon (sid34452@lymington.irccloud.com)
[20:13:19] *** Joins: robertmeta (sid514@user/robertmeta)
[20:21:01] *** Joins: euantorano (sid180289@helmsley.irccloud.com)
[20:25:42] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[20:31:26] *** Joins: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1)
[20:31:34] *** Quits: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1) (Quit: Client limit exceeded: 20000)
[20:35:37] <NimEventer> New thread by Serge: Nim stopped working on my Mac M1 : string.h missing (problem with homebrew or Xtools)?, see https://forum.nim-lang.org/t/8638
[20:36:18] *** Joins: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1)
[20:42:19] <FromDiscord> <ùôßùôöùô¢> could anyone help me w/ an issue im having while trying to write a x11 wm
[20:42:56] <FromDiscord> <ùôßùôöùô¢> sent a code paste, see https://play.nim-lang.org/#ix=3FmL
[20:43:00] *** Quits: lumo_e (~enrico@151.29.48.90) (Ping timeout: 265 seconds)
[20:43:12] <FromDiscord> <ùôßùôöùô¢> sent a code paste, see https://play.nim-lang.org/#ix=3FmM
[20:43:19] <FromDiscord> <ùôßùôöùô¢> saying im getting a type mismatch?
[20:44:59] <FromDiscord> <ùôßùôöùô¢> https://pastebin.com/zbNbqBgC‚Üµthis is my nim code i put it here bc it was kinda spammy
[20:45:46] <FromDiscord> <ùôßùôöùô¢> i just wanna check if the table contains a `KeyMapping` object
[20:59:16] <FromDiscord> <ùôßùôöùô¢> can anyone help me w/ why this isnt working?
[21:04:31] <FromDiscord> <konsumlamm> In reply to @ùôßùôöùô¢ "https://pastebin.com/zbNbqBgC this is my": that doesn't seem to be your `whim.nim`, there is no `in` in line 60
[21:05:12] <FromDiscord> <noow> it's on line 55
[21:05:12] <FromDiscord> <ùôßùôöùô¢> that is it
[21:05:19] <FromDiscord> <ùôßùôöùô¢> sent a code paste, see https://play.nim-lang.org/#ix=3FmT
[21:05:27] <FromDiscord> <ùôßùôöùô¢> so it works if i make the key of the map a tuple, but not an object
[21:05:41] <FromDiscord> <ùôßùôöùô¢> any idea how to fix that
[21:05:57] <PMunch> Use `hasKey` from the tables module?
[21:06:08] <PMunch> Not sure if `in` is supported on a Table
[21:06:27] <PMunch> Aah, apparently it's supposed to
[21:06:28] <PMunch> Hmm
[21:06:33] <FromDiscord> <noow> In reply to @PMunch "Not sure if `in`": doesn't the compiler resolve it to HasKey correctly, according to the error log
[21:06:35] <FromDiscord> <ùôßùôöùô¢> In reply to @PMunch "Use `hasKey` from the": tried that
[21:06:37] <FromDiscord> <ùôßùôöùô¢> it doesnt work
[21:06:41] <FromDiscord> <ùôßùôöùô¢> same error
[21:07:07] <FromDiscord> <ùôßùôöùô¢> yet as soon as i change it from key of KeyMapping to key of (char, cuint)
[21:07:09] <FromDiscord> <ùôßùôöùô¢> it works?
[21:07:10] <FromDiscord> <noow> by the way, your KeyMapping is a ref object, and you're calling an initializer every time you get a key object, I doubt you will ever do a correct lookup if my understanding of nim semantics is correct
[21:07:32] <FromDiscord> <noow> I would not use "ref" for KeyMapping
[21:07:39] <PMunch> Ditto
[21:07:48] <PMunch> I would use a normal object for KeyMapping
[21:08:06] <FromDiscord> <ùôßùôöùô¢> hm ok
[21:08:19] <PMunch> I think the problem is that you don't have a `hash` proc for `KeyMapping`, Nim seems to try and create one for you but fails
[21:08:26] <PMunch> A normal object should work
[21:08:44] <FromDiscord> <noow> since calling the initializer on a ref object will create a new instance, and when you create a table with ref object as the key, you will be actually indexing by the specific instance, not the contents
[21:09:00] <FromDiscord> <noow> since it will use its pointer as a key by default
[21:09:01] <PMunch> Cool that more people are doing Window managers in Nim :)
[21:09:12] <FromDiscord> <noow> (edit) "since it will use its pointer as a key by default ... " 03added "(unless im wrong)"
[21:09:37] <FromDiscord> <noow> In reply to @PMunch "I think the problem": oh wait maybe that's what is causing the compiler error
[21:09:45] <FromDiscord> <noow> if yes ignore my last sentence
[21:09:50] <FromDiscord> <ùôßùôöùô¢> i removed the ref and i think it works but lemem try and compile
[21:09:57] <FromDiscord> <ùôßùôöùô¢> yeah that fixed it
[21:10:12] <FromDiscord> <ùôßùôöùô¢> any reason why>?
[21:10:13] <FromDiscord> <noow> oh then PMunch is right and ignore me
[21:12:29] <PMunch> @noow, that is what's causing the error. But I think the reason why Nim won't create a hash proc for you is because of the ref/instance issue you mentioned
[21:12:30] <FromDiscord> <ùôßùôöùô¢> nim reminds me of ada or haskell tbh
[21:12:46] <PMunch> This is a minimal example with the full error message by the way: http://ix.io/3FmU
[21:13:02] <PMunch> A bit more obvious that you need a `hash` procedure
[21:13:18] <FromDiscord> <ùôßùôöùô¢> ah
[21:13:25] <FromDiscord> <ùôßùôöùô¢> and i assume bc its a reference type it panics?
[21:13:28] <FromDiscord> <noow> so, defining the hash procedure makes the error disappear?
[21:14:06] <PMunch> Yup
[21:14:24] <PMunch> Yes it's because it's a reference type
[21:14:44] <FromDiscord> <noow> In reply to @ùôßùôöùô¢ "and i assume bc": yes, it's ambiguous whether you want to index by the contents or the specific instance of the object
[21:14:52] <PMunch> The thing is that when you have a reference type, its ambiguous if the key is the data in the object, or the reference itself
[21:14:59] <PMunch> Haha, exactly
[21:15:19] <FromDiscord> <noow> i think most languages would just assume you want to reference by the pointer value of the reference
[21:15:32] <FromDiscord> <noow> unless the hash is defined
[21:17:05] <PMunch> It's easy enough to write a hash procedure which does that
[21:19:08] <PMunch> You also need to supply a `==` procedure though
[21:19:15] <PMunch> Because of how tables work
[21:21:55] <PMunch> If you run this example and look at the output it might be a bit more clear what's going on: https://play.nim-lang.org/#ix=3FmV
[21:22:53] <PMunch> There you can see that I still use a ref object as a key, but I implement `hash` and `==` to work on the underlying objects
[21:23:21] <PMunch> And running them you can see when they are called
[21:23:49] <PMunch> A Table in Nim is what's called a hash table
[21:24:18] <PMunch> It is essentially backed by a seq[seq[tuple(key, value)]]
[21:24:59] <PMunch> Oh wait, it's actually just a seq[tuple(key, value)]
[21:25:20] <FromDiscord> <noow> by the way what's the fastest way of initializing objects that are ref, but the type is not ref
[21:25:35] <PMunch> What do you mean?
[21:26:36] <FromDiscord> <noow> sent a code paste, see https://play.nim-lang.org/#ix=3FmX
[21:26:42] <PMunch> Anyways, imagine the underlying sequence is 10 elements long. We insert one element by hashing the key (turning it into a number by some clever algorithm) and then putting it in position `hash(key) mod 10` in our sequence
[21:26:43] <FromDiscord> <noow> (yes this also needs a hash function defined btw)
[21:27:34] <PMunch> But since this will cause collisions if two hashes mod 10 yields the same number it needs to actually store and compare the keys as well.
[21:28:01] <PMunch> Well, technically it only needs to compare the hashes to be reasonably sure
[21:28:26] <FromDiscord> <noow> i wonder how often do hash collisions occur and break critical systems
[21:28:45] <PMunch> Hmm, I'd say it's pretty rare
[21:30:00] <FromDiscord> <noow> is it too expensive to also compare the values
[21:30:22] <PMunch> I think you can do: var a = new(MyObject)
[21:30:30] <PMunch> Well, depends on your key
[21:30:38] <PMunch> Nim seems to compare the actual keys
[21:30:55] <FromDiscord> <noow> oh wait i meant the keys
[21:31:01] <FromDiscord> <noow> compare the actual keys
[21:31:24] <PMunch> Yeah, that's what I read it as :P
[21:31:33] <PMunch> Obviously you wouldn't know the value already
[21:32:15] <FromDiscord> <noow> about the shorthand, so no short hand for the whole thing, including the code and modifiers? üò¶
[21:32:41] <FromDiscord> <noow> i guess i can always define a template
[21:33:18] <PMunch> Yeah..
[21:33:37] <PMunch> Or just define a type `MyObjectRef = ref MyObject`
[21:34:32] <PMunch> Like so: https://play.nim-lang.org/#ix=3Fn4
[21:37:25] <FromDiscord> <haxscramper> TIL i learned we have a proper logs of all nim rooms after bridging to matrix https://view.matrix.org/?query=%23nim
[21:46:13] *** Joins: elph (uid286227@lymington.irccloud.com)
[21:48:29] *** Joins: lumo_e (~enrico@151.29.48.90)
[21:59:00] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[21:59:35] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[22:23:44] *** Joins: terminalpusher (~terminalp@2a01:586:9390:1:57d1:ba2a:466c:e93f)
[22:30:11] *** Quits: lumo_e (~enrico@151.29.48.90) (Remote host closed the connection)
[22:30:24] <NimEventer> New thread by Serge: What is the directory assumed for C include files and C libraries location for Him?, see https://forum.nim-lang.org/t/8639
[22:32:30] <FromDiscord> <dom96> In reply to @haxscramper "TIL i learned we": cool, too bad there is no trivial way to go back to a certain date
[22:38:06] *** Joins: xet7 (~xet7@user/xet7)
[23:38:51] *** Joins: src (~src@user/src)
[23:51:05] <FromDiscord> <hmmm> what's our brypt like reference lib?
[23:51:13] <FromDiscord> <hmmm> bcrypt
[23:51:54] <FromDiscord> <hmmm> I found easybcrypt from a dude with a spiffy anime avatar so I'm strongly considering it ü§î
[23:53:15] <FromDiscord> <hmmm> it is known that people that favor anime avatars are supreme coders üëë
