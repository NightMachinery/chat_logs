[00:00:08] *** Joins: monkey_ (~user@190.104.116.153)
[00:04:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b1d4-3f07-bb3f-aa7e.res6.spectrum.com)
[00:04:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:04:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:04:20] *** Joins: wroathe (~wroathe@user/wroathe)
[00:04:53] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[00:05:11] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[00:08:17] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b1d4-3f07-bb3f-aa7e.res6.spectrum.com) (Ping timeout: 240 seconds)
[00:09:40] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3d4a:739b:93a2:f67)
[00:14:34] *** Joins: Charadon (~Charadon@155.138.164.183)
[00:15:49] *** Quits: AmR (~AmREiSa@156.199.202.96) (Quit: Konversation terminated!)
[00:16:23] *** Joins: ProperN[out] (~holyShizn@user/propernoun)
[00:16:34] *** Quits: Guest16 (~Guest16@151.29.94.152) (Quit: Client closed)
[00:16:39] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 250 seconds)
[00:17:18] *** Joins: nehsou^ (~nehsou@207.5.54.6)
[00:17:40] *** Joins: nuxil (~nuxil@141.195.51.213)
[00:20:21] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Ping timeout: 256 seconds)
[00:21:51] <johnjaye> i didn't know plan9 used c. i thought it would be some arcane dialect like Vala
[00:23:07] <sham1> It's not standard C
[00:23:17] <johnjaye> ah.
[00:23:38] <johnjaye> wikipedia says it was supposed to be the successor to unix
[00:23:56] <johnjaye> so idk if that ever worked out. like technically is it better and linux/bsd just happened to be the norm so ppl use that
[00:24:07] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[00:24:14] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Client Quit)
[00:24:16] *** Joins: damxsa (~damx@2001:16a2:cfed:3100:d614:626b:5937:395b)
[00:24:17] <pragma-> http://doc.cat-v.org/plan_9/programming/c_programming_in_plan_9
[00:24:47] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) ()
[00:25:25] *** Quits: reezoh (~reezoh@173.168.223.85) (Read error: Connection reset by peer)
[00:25:38] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 268 seconds)
[00:27:09] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 256 seconds)
[00:27:43] *** Quits: damxsa (~damx@2001:16a2:cfed:3100:d614:626b:5937:395b) (Client Quit)
[00:30:13] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:30:32] *** Joins: Enitin (~Enitin@82.102.22.84)
[00:31:02] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[00:31:18] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[00:34:06] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:34:06] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 245 seconds)
[00:37:23] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[00:40:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 240 seconds)
[00:40:49] *** kenanmarasli_ is now known as kenanmarasli
[00:41:22] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[00:42:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:43:27] *** Joins: stonkey (~stonkey@user/stonkey)
[00:47:12] *** Joins: AmR (~AmREiSa@156.199.202.96)
[00:49:35] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[00:50:57] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[00:50:58] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[00:51:49] *** Joins: useretailz (~useretail@31.41.69.140)
[00:52:24] *** Joins: u0_a391 (~u0_a391@2600:380:a469:742a:b47:fe14:5678:b9f2)
[00:52:46] *** Quits: beastie (~lcu@user/thebeastie) (Ping timeout: 268 seconds)
[00:56:28] *** Quits: Kit (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Ping timeout: 268 seconds)
[00:57:10] *** Quits: magla (~gelignite@55d48631.access.ecotel.net) (Quit: Stay safe!)
[00:58:06] *** Joins: u0_a3911 (~u0_a391@2603-6010-a141-6fa3-995e-1663-5011-4cc5.res6.spectrum.com)
[00:58:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:58:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:58:52] *** Joins: wroathe (~wroathe@user/wroathe)
[01:00:10] *** Quits: duuude (~user@user/duuude) (Ping timeout: 268 seconds)
[01:00:23] *** Joins: echoSMILE (uid504326@user/echosmile)
[01:00:47] *** Quits: zer0bitz (~zer0bitz@194.34.133.91) (Ping timeout: 268 seconds)
[01:01:02] *** Quits: u0_a391 (~u0_a391@2600:380:a469:742a:b47:fe14:5678:b9f2) (Ping timeout: 240 seconds)
[01:03:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[01:04:23] *** Joins: Mentor (~Ionut@92.86.217.127)
[01:04:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[01:08:54] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[01:11:52] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:12:10] <begriffs> What is the type of a string literal? Is it char*, or an array? I saw some code that does sizeof "0123456789". Tested it with clang and that returns 11, suggesting that the string literal is an array. But wondering if this is made explicit in the standard somewhere?
[01:12:58] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:12:59] <johnjaye> in c they're equvialent i thought. i.e. a[j] is defined as *(a+j)
[01:13:20] <caze> ,cc sizeof "0123456789";
[01:13:21] <johnjaye> c makes a lot more sense once you figure out all the weird assumptions it makes
[01:13:23] <candide> caze: no output: sizeof "0123456789" = 11
[01:13:30] <caze> It's an array.
[01:13:55] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[01:14:10] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:203e:45d6:8d1a:1058)
[01:14:39] <begriffs> caze is that implementation defined behavior, or mandated by the standard?
[01:14:53] <caze> begriffs: ,c11 6.4.5p6
[01:14:55] <candide> begriffs: http://www.iso-9899.info/n1570.html#6.4.5p6 [String literals] In translation phase 7, a byte or code of value zero is appended to each multibyte character sequence that results from a string literal or literals.78) The multibyte character sequence is then used to initialize an array of static storage duration and length just sufficient to contain the sequence. For character string literals, the ... <truncated; https://0x0.st/osAD.txt>
[01:15:32] <begriffs> Nice
[01:17:44] *** Joins: smoke (~smoke@user/smoke)
[01:18:36] *** Quits: Mentor (~Ionut@92.86.217.127) (Quit: Leaving)
[01:18:56] *** Joins: pulse (~pulse@user/pulse)
[01:21:44] <johnjaye> i wonder which ruleset is more complicated, c11 or modern yugioh
[01:24:11] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:24:46] *** Joins: nvrhome (~Bop@user/nvrhome)
[01:25:20] <caze> If you learn the standard, you'll be a competent language lawyer.
[01:26:28] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[01:28:09] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[01:28:18] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[01:30:48] *** Joins: rsjw (~quassel@user/rsjw)
[01:36:06] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[01:36:51] *** Joins: useretailz (~useretail@31.41.69.140)
[01:37:57] *** Quits: apchar (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[01:42:06] *** Quits: Darkcoal (~user@167.86.137.72) (Quit: Darkcoal)
[01:43:49] *** Joins: beastie (~lcu@user/thebeastie)
[01:47:00] <neiluj> fun error: malloc.c:2397: sysmalloc: Assertion `(old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)' failed. :)
[01:47:22] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[01:47:48] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[01:51:17] *** Joins: malina (~malina@user/malina)
[01:51:30] *** Quits: Akuli (~Akuli@85-76-111-135-nat.elisa-mobile.fi) (Quit: Akuli)
[01:52:29] *** Quits: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[01:52:30] <neiluj> can you parse it? I see page sizes, could it be an overlap?
[01:55:52] <Learath2> maybe you managed to damage the header of an allocation? a buffer overrun?
[01:56:08] <Learath2> I'm fairly certain ASAN would tell you whatever happened
[01:58:13] <neiluj> will check out ASAN, thanks for the pointers
[01:58:36] *** Quits: V-T60 (~v@gateway/tor-sasl/v-t60) (Ping timeout: 276 seconds)
[01:58:43] <neiluj> it turns out the error went away after decreasing the range of a loop, so probably a kind of out of range
[01:58:47] <neiluj> so buffer overrun
[01:59:19] <neiluj> but from experience it would raise a segfault no?
[01:59:40] <Learath2> Doesn't have to
[02:00:01] <neiluj> good
[02:00:46] <Learath2> sigsegv (atleast on linux) happens when you access memory you are not supposed to have access to, nothing prevents you overrunning one allocation to the next
[02:01:42] <neiluj> oh by the way? How does malloc allocates data to the heap? by manipulating physical pages?
[02:01:56] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:02:12] <neiluj> hum there's a distinction indeed
[02:02:14] *** Quits: ckdCreations (~ckdCreati@2607:fb90:8346:bdfd:400d:4e86:1eca:ba46) (Ping timeout: 252 seconds)
[02:02:15] <caze> Which malloc.
[02:02:19] <Learath2> very very very implementation defined
[02:02:31] <neiluj> from stdlib
[02:02:36] <Learath2> which stdlib :D
[02:02:43] <neiluj> :) linux
[02:02:44] <caze> Which stdlib.
[02:03:36] <caze> void *malloc(size_t n) { return NULL; }
[02:03:43] *** Joins: seninha (~seninha@user/seninha)
[02:03:50] <Learath2> glibc malloc e.g. will ask for heap memory from the OS using sbrk
[02:03:58] <neiluj> yes gnu one
[02:04:05] <Learath2> s/OS/kernel/ to be more exact I think
[02:04:33] <caze> ^standard conformant impl
[02:06:26] <neiluj> interesting
[02:06:41] <neiluj> now I want to make a super efficient mallocTM :D
[02:07:07] <earnestly> neiluj: Read about jemalloc as a general approach
[02:07:13] *** Joins: Everything (~Everythin@37.115.210.35)
[02:07:38] <Learath2> There are a lot of approaches to implementing malloc, most are arena based nowadays iirc
[02:09:32] <neiluj> so cool, thanks!
[02:09:38] <earnestly> glibc is ptmalloc
[02:09:56] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 252 seconds)
[02:10:41] <Learath2> warning: glibc source is pain to read, I wouldn't suggest using that as a reference :D
[02:11:50] <earnestly> Hm, interestingly their malloc.c is quite alright, and is utterly filled with comments
[02:12:27] <earnestly> Has some initial history, explains almost everything with a paragraph of comments
[02:13:20] <earnestly> > C                                1            995 (blank)           1766 (comments)           2850 (code)
[02:14:30] <caze> void free(void *p) { } corresponding free implementation to go with void *malloc(size_t n) { return NULL; }
[02:14:32] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[02:15:21] <Learath2> I guess glibc might be a better place to look at than jemalloc atleast
[02:15:50] <earnestly> jemalloc has a whitepaper which is quite alright to get an overview of that kind of design, which is fairly modern (as you note, arena, class based, etc.)
[02:16:06] *** Joins: Dotz0cat_ (~Dotz0cat@h146.184.39.162.static.ip.windstream.net)
[02:16:23] <earnestly> https://www.bsdcan.org/2006/papers/jemalloc.pdf
[02:16:31] *** Quits: Dotz0cat (~Dotz0cat@h8.47.90.75.dynamic.ip.windstream.net) (Ping timeout: 256 seconds)
[02:16:50] <earnestly> It has pictures and stuff
[02:17:02] *** Dotz0cat_ is now known as Dotz0cat
[02:17:26] <Learath2> Oh, that's quite nice actually
[02:17:44] <caze> I wonder if that's what OpenBSD uses.
[02:18:30] <earnestly> Nope
[02:18:41] *** Quits: finalriposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (Quit: Quitting)
[02:18:41] <Learath2> FreeBSD uses jemalloc, no idea about openbsd tho
[02:19:19] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:19:19] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:19:19] *** Joins: wroathe (~wroathe@user/wroathe)
[02:20:08] <Learath2> hm, seems they have their own thing
[02:20:34] <earnestly> "omalloc"
[02:20:53] <earnestly> It's obviously more security focused, with code to detect various exploits and such
[02:20:53] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[02:21:12] <earnestly> E.g. https://undeadly.org/cgi?action=article&sid=20081123034225
[02:21:14] <candide> Title of earnestly's link: omalloc improvements
[02:21:18] *** Joins: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net)
[02:21:51] *** Joins: useretailz (~useretail@31.41.69.140)
[02:21:56] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.189)
[02:22:33] <earnestly> neiluj: The nicest code, imo, as an example for an implementation of libc and such is musl
[02:23:02] <earnestly> Someone has helpfully collected a bunch here https://github.com/emeryberger/Malloc-Implementations
[02:23:57] <earnestly> Old though
[02:24:52] *** Joins: u0_a3912 (~u0_a391@2600:380:a469:742a:4e3d:9a6e:9782:818f)
[02:25:01] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[02:25:51] *** Parts: tdg (~pi@user/tdg) (WeeChat 3.0)
[02:25:52] <johnjaye> apparently Principles of Operating System by Stuart discusses the inferno kernel and libraries
[02:26:05] <johnjaye> inferno being the successor to plan9 which was the successor to unix
[02:26:15] <johnjaye> so it's the successor(successor(unix))
[02:26:48] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[02:27:57] *** Quits: u0_a3911 (~u0_a391@2603-6010-a141-6fa3-995e-1663-5011-4cc5.res6.spectrum.com) (Ping timeout: 240 seconds)
[02:28:06] <earnestly> inferno wasn't a successor per-se
[02:28:28] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[02:29:26] <earnestly> But the history is free to read, it was a future that could have been
[02:29:43] <sham1> void *malloc(size_t size) { void *ret = bump_ptr; bump_ptr += size; return ret; }
[02:29:45] <sham1> Best malloc
[02:30:15] <earnestly> Something that plan9 could have worked on was 9P, being synchronous does actually hurt when network latency gets involved
[02:30:21] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:32:34] *** Quits: pizdets_ (~pizdets@183.182.111.125) (Ping timeout: 250 seconds)
[02:32:39] *** Joins: ChromaCat248 (~ChromaCat@user/chromacat248)
[02:33:20] *** Quits: acerbic (~acerbic@cs-xdata-50-86-55-96.cspire.com) (Read error: Connection reset by peer)
[02:33:40] *** Joins: pizdets (~pizdets@183.182.110.8)
[02:34:05] <johnjaye> earnestly: is that url to the pdf itself?
[02:34:17] <johnjaye> curl barfed on it and got a 301
[02:34:44] <rsjw> you can use -L to follow redirects
[02:35:35] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:36:39] <johnjaye> ah thanks that works
[02:37:01] <johnjaye> i use curl more than wget these days since windows now includes it by default
[02:37:23] <rsjw> yeah me too but s/windows/some other OS/
[02:38:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:38:47] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[02:40:03] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[02:40:15] *** Joins: ferdna (~ferdna@user/ferdna)
[02:41:48] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[02:41:59] *** Joins: loganlee (~Thunderbi@user/loganlee)
[02:44:37] *** Quits: mahmutov (~mahmutov@37.155.21.58) (Ping timeout: 240 seconds)
[02:45:16] *** Joins: semeion (~semeion@user/semeion)
[02:46:14] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c4c6:c62c:ab52:6d38) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:47:48] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:48:17] *** Quits: chomwitt (~chomwitt@2a02:587:dc1e:c100:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[02:49:01] *** Joins: soapsudsxx (~soapsudsx@141.193.188.154)
[02:50:49] *** Joins: acerbic (~acerbic@cs-xdata-50-86-55-96.cspire.com)
[02:50:50] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[02:51:49] *** Joins: useretailz (~useretail@31.41.69.140)
[02:56:59] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:59:05] <cherrry9> 	Arg arg;
[02:59:10] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[02:59:20] *** Quits: cherrry9 (~jan@deg219.neoplus.adsl.tpnet.pl) (Quit: leaving)
[03:03:04] *** Joins: Torr_ (~Torr@user/torr)
[03:04:30] *** Joins: ethrl (~ethereal@user/doforlove33)
[03:04:41] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[03:06:35] *** Joins: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747)
[03:06:36] *** Quits: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net) (Ping timeout: 245 seconds)
[03:08:03] *** Quits: p0g0 (~p0g0@216.211.153.38) (Quit: p0g0)
[03:11:41] *** Joins: chenqisu12 (~bhca7d@183.217.200.22)
[03:12:11] *** Quits: ethrl (~ethereal@user/doforlove33) (Remote host closed the connection)
[03:14:21] *** Joins: Trashlord (~trash@user/trashlord)
[03:14:21] <nitrix> sham1, That can be problematic on some platforms.
[03:14:27] *** Joins: Fl1pFl0p (~FlipFlop@user/fl1pfl0p)
[03:14:45] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[03:14:49] *** Quits: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:15:25] <nitrix> sham1, malloc(1) followed by malloc(sizeof (int)) would produce a pointer that's unaligned.
[03:16:17] *** Quits: chenqisu12 (~bhca7d@183.217.200.22) (Ping timeout: 240 seconds)
[03:16:26] *** Joins: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747)
[03:17:17] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[03:17:40] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[03:17:57] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 240 seconds)
[03:19:37] <nitrix> On platforms where that's tolerated, the fetch needs twice as many cycles on top of probably messing up the cache (line split, etc).
[03:20:57] *** Quits: mrig (~mrig@user/mrig) (Quit: Bye for now)
[03:20:58] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[03:21:49] *** Joins: useretailz (~useretail@31.41.69.140)
[03:22:06] *** Quits: MrFantastik (~f@2607:f598:bbda:10:4e9d:551a:bc14:258e) (Ping timeout: 260 seconds)
[03:34:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[03:37:31] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[03:38:08] *** Quits: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:38:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[03:38:40] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:39:39] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[03:40:01] *** Quits: malina (~malina@user/malina) (Quit: malina)
[03:40:14] *** Joins: Enitin (~Enitin@82.102.22.86)
[03:42:05] *** Quits: palindrome (~palindrom@64.43.171.63) (Ping timeout: 256 seconds)
[03:42:14] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:44:52] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:47:09] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:50:17] *** Quits: useretailz (~useretail@31.41.69.140) (Ping timeout: 240 seconds)
[03:54:53] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[03:55:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[03:56:16] *** Joins: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747)
[04:03:34] *** Joins: Enitin (~Enitin@82.102.22.84)
[04:05:22] *** Joins: squidrin (~squidrin@75.165.136.107)
[04:08:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[04:09:01] *** Quits: freep (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:10:02] *** Quits: squidrin (~squidrin@75.165.136.107) (Remote host closed the connection)
[04:10:17] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[04:12:08] *** Joins: Wulf (~Wulf@user/wulf)
[04:13:24] *** Joins: MrFantastik (~f@c-73-93-240-190.hsd1.ca.comcast.net)
[04:13:48] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[04:14:16] *** Joins: loganlee (~Thunderbi@user/loganlee)
[04:14:20] *** Parts: loganlee (~Thunderbi@user/loganlee) ()
[04:17:42] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:fbac:4b24:8942:27e4)
[04:17:51] *** Joins: reedrichards (~f@c-73-93-240-190.hsd1.ca.comcast.net)
[04:18:07] *** Quits: MrFantastik (~f@c-73-93-240-190.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[04:19:58] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Ping timeout: 268 seconds)
[04:20:03] *** Joins: seninha (~seninha@user/seninha)
[04:20:30] *** Joins: MrFantastik (~f@c-98-210-128-179.hsd1.ca.comcast.net)
[04:22:37] *** Quits: reedrichards (~f@c-73-93-240-190.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[04:25:45] *** Joins: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net)
[04:27:06] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[04:27:09] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[04:27:37] *** Quits: beencubed (~beencubed@209.131.238.248) (Ping timeout: 240 seconds)
[04:27:47] *** Joins: loganlee (~Thunderbi@user/loganlee)
[04:27:58] *** Joins: u0_a3913 (~u0_a391@2603-6010-a141-6fa3-995e-1663-5011-4cc5.res6.spectrum.com)
[04:28:44] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:28:44] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:28:44] *** Joins: wroathe (~wroathe@user/wroathe)
[04:28:53] *** loganlee is now known as zx2A^zx3F
[04:30:56] *** Joins: peve (~peve@185.65.135.234)
[04:31:42] *** Quits: u0_a3912 (~u0_a391@2600:380:a469:742a:4e3d:9a6e:9782:818f) (Ping timeout: 268 seconds)
[04:33:00] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3d4a:739b:93a2:f67) (Quit: Quit)
[04:41:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[04:41:11] *** Joins: beencubed (~beencubed@209.131.238.248)
[04:42:27] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[04:43:19] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[04:43:39] *** Quits: acerbic (~acerbic@cs-xdata-50-86-55-96.cspire.com) (Read error: Connection reset by peer)
[04:45:09] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:45:09] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:45:09] *** Joins: wroathe (~wroathe@user/wroathe)
[04:45:17] *** Joins: dlx (~tom@05432be4.skybroadband.com)
[04:45:38] <dlx> hi, does c89 require a certain version of posix?
[04:45:56] <dlx> or the other way round
[04:46:10] *** zx2A^zx3F is now known as loganlee
[04:47:02] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 240 seconds)
[04:47:04] <dave0> i believe c is a subset of posix ... posix adds a few guarantees to c programs that standard c doesn't
[04:47:20] <dave0> i don't know if posix removes anything that c has
[04:50:51] <dlx> ah okay, I ask because I seem to remember getting warnings when I enabled -std=c89 in the past, and wondered if c89 isn't compatible with some versions of posix
[04:51:11] <dlx> warnings about certain posix functions not being available
[04:52:30] <fizzie> That's just because `-std=c89` tends to enable a mode that conforms more strictly to the C standard, and therefore does not declare the POSIX extensions as part of the C standard headers when enabled.
[04:53:49] <dlx> ah I see
[04:54:27] <dlx> that makes sense, thanks
[04:58:09] <fizzie> FWIW, it's also the case that the current version of POSIX (POSIX-1.2017) is "aligned" with the C99 version of the C standard (+ its three corrigenda), not the more recent C11 one nor the older C89.
[04:59:03] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[05:01:11] *** Joins: acerbic (~acerbic@cs-xdata-50-86-55-96.cspire.com)
[05:02:11] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:02:21] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[05:02:31] *** Quits: MrFantastik (~f@c-98-210-128-179.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[05:02:33] *** Quits: Everything (~Everythin@37.115.210.35) (Ping timeout: 256 seconds)
[05:04:03] *** Joins: Everything (~Everythin@178-133-112-180.mobile.vf-ua.net)
[05:06:57] <dlx> ah okay do you know if c89 was aligned with a particularly version?
[05:07:02] *** Joins: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:07:02] <dlx> particular*
[05:09:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:10:11] <dave0> dlx: are you developing on a posix system?
[05:11:20] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[05:11:50] <dlx> well, debian
[05:12:30] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[05:12:45] *** Quits: Everything (~Everythin@178-133-112-180.mobile.vf-ua.net) (Quit: leaving)
[05:12:55] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:13:10] <fizzie> It's POSIX that picks which C version it's based on, not the other way around. But I would imagine some of the earlier versions -- well, at least anything before 1999 -- used C89 as a base document.
[05:17:22] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 260 seconds)
[05:18:17] *** Quits: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:18:26] <fizzie> Here's a bit from the POSIX-1.2017 introduction: "The following standards contain provisions which, through references in POSIX.1-2017, constitute provisions of POSIX.1-2017. -- ISO C (1999): ISO/IEC 9899:1999, Programming Languages - C, including ISO/IEC 9899:1999/Cor.1:2001(E), ISO/IEC 9899:1999/Cor.2:2004(E), and ISO/IEC 9899:1999/Cor.3."
[05:18:37] <fizzie> It also contains an encouragement to "investigate the possibility of applying the most recent editions of the standards listed below", and in practice a POSIX system with a C11-conforming C implementation would presumably do that, so I don't think there's all that much practical consequence from whatever C version POSIX is nominally based on.
[05:18:39] *** Joins: p0g0 (~p0g0@216.211.153.38)
[05:18:56] *** Joins: slavfox (~slavfox@93.158.232.111)
[05:19:49] <dlx> right so they're more separate than I realised
[05:20:09] <dlx> thank fizzie and dave0!
[05:20:13] <dlx> thank you*
[05:21:49] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[05:26:17] <dave0> no worries :-)
[05:26:39] *** Joins: peve_ (~peve@2601:281:8700:3c10::bc48)
[05:29:02] *** Quits: peve (~peve@185.65.135.234) (Ping timeout: 240 seconds)
[05:29:45] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 250 seconds)
[05:30:14] *** Joins: MrFantastik (~f@c-98-210-128-179.hsd1.ca.comcast.net)
[05:33:19] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[05:34:10] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 260 seconds)
[05:37:01] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[05:37:39] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:39:42] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[05:40:24] *** Quits: soapsudsxx (~soapsudsx@141.193.188.154) (Remote host closed the connection)
[05:41:15] <tk> so it's clear what void foo(char bar[static 10]) means. But what does void foo(char *foo, char bar[static strlen(foo)]) mean?
[05:41:37] <tk> am I missing something in the standard, it says that it has to be an expression not a constant expression
[05:41:38] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[05:42:09] *** Joins: peve__ (~peve@185.65.135.232)
[05:42:53] *** Joins: monkey_ (~user@190.104.116.153)
[05:42:57] *** Quits: MrFantastik (~f@c-98-210-128-179.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[05:43:00] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[05:43:11] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Ping timeout: 250 seconds)
[05:43:41] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[05:44:09] <tk> but, does any compiler do anything with this?
[05:44:12] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[05:44:17] *** Quits: peve_ (~peve@2601:281:8700:3c10::bc48) (Ping timeout: 240 seconds)
[05:44:36] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[05:44:37] *** Quits: acerbic (~acerbic@cs-xdata-50-86-55-96.cspire.com) (Read error: Connection reset by peer)
[05:45:50] *** Joins: malloy (~jimery@116.30.221.255)
[05:47:39] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[05:48:00] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[05:50:05] *** Joins: fe23 (~fe23@2409:8a34:464:4990:b118:78f:c21d:a9b3)
[05:50:38] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[05:52:40] *** Joins: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca)
[05:53:39] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[05:54:19] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Ping timeout: 268 seconds)
[05:56:23] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[05:56:38] <fizzie> And as a corollary, is the expression guaranteed to be evaluated or not evaluated? (I don't know.)
[05:56:59] <fizzie> ,cc void foo(char foo[static printf("hello")]) { puts(foo); } foo("world"); // it's evaluated here, on this implementation
[05:57:01] <candide> fizzie: helloworld
[05:57:17] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:58:30] <dave0> is it evaluated at compile time?
[05:59:57] <dave0> ,cc extern int foo(char bar[static printf("hello")]);
[06:00:00] <candide> dave0: Success (no output).
[06:00:04] <fizzie> It's evaluated (apparently) every time the function is called.
[06:00:38] <dave0> oh okay
[06:01:54] <fizzie> That's what I would expect to happen for something like `int foo(char (*bar)[printf("hello")]) { ... }`, but when it's a "top-level" array-typed parameter that gets converted to a pointer, it feels a lot more vague.
[06:02:04] <dave0> i thought the foo[static n] syntax was to help the optimizer
[06:02:18] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Quit: Quit)
[06:02:35] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[06:03:03] *** Quits: Charadon (~Charadon@155.138.164.183) (Remote host closed the connection)
[06:03:09] *** kurahaupo is now known as kurahaupo_
[06:03:35] *** Quits: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com) (Quit: leaving)
[06:03:42] *** Joins: smoke (~smoke@user/smoke)
[06:03:44] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Remote host closed the connection)
[06:03:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:03:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:03:48] *** Joins: wroathe (~wroathe@user/wroathe)
[06:04:06] <smol-hors> #include <dave0_os/types.h>
[06:04:07] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[06:04:29] <smol-hors> int main(void) { printf("Welcome to dave0 OS\n"); return 0; }
[06:04:54] <dave0> segfault core dumped
[06:04:57] <smol-hors> rip
[06:05:32] *** Quits: zlg (~zlg@user/zlg) (Ping timeout: 240 seconds)
[06:05:59] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[06:08:19] <mcf> ah, this is explained in the function definition section
[06:08:21] <mcf> ,c11 6.9.1p10
[06:08:21] <candide> http://www.iso-9899.info/n1570.html#6.9.1p10 [Function definitions] On entry to the function, the size expressions of each variably modified parameter are evaluated and the value of each argument expression is converted to the type of the corresponding parameter as if by assignment. (Array expressions and function designators as arguments were converted to pointers before the call.)
[06:09:06] *** Parts: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) ()
[06:10:09] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:11:10] <mcf> but yeah, it's not clear to me whether it's talking about parameter types before or after adjustment to pointer
[06:12:36] *** Quits: dlx (~tom@05432be4.skybroadband.com) (Ping timeout: 240 seconds)
[06:13:31] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:13:49] *** Joins: register (~squidrin@75.165.136.107)
[06:14:00] *** Joins: dlx (~tom@05432be4.skybroadband.com)
[06:14:13] *** register is now known as Guest6655
[06:14:33] *** Quits: Guest6655 (~squidrin@75.165.136.107) (Client Quit)
[06:14:35] <dave0> ,cc int bar(char a[puts("x")]) { puts(a); return 1; } int foo(char a[bar("1")], char b[bar("2")], char c[bar("3")]){ return 1; } foo("a","b","c");
[06:14:38] <candide> dave0: x 1 x 2 x 3
[06:14:46] *** Joins: squidrin (~squidrin@75.165.136.107)
[06:15:30] <dave0> i like it. does it work with recursion?
[06:16:41] *** u0_a3913 is now known as Kit
[06:16:57] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:16:58] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[06:17:03] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[06:17:58] *** Quits: squidrin (~squidrin@75.165.136.107) (Client Quit)
[06:20:08] *** Joins: zlg (~zlg@user/zlg)
[06:30:47] *** Quits: gnoo (gnoo@user/gnoo) (Quit: IRCNow and Forever!)
[06:32:30] *** Quits: Torr_ (~Torr@user/torr) (Quit: leaving)
[06:32:54] *** Quits: peve__ (~peve@185.65.135.232) (Quit: Leaving)
[06:32:57] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:37:01] <dave0> ,cc int fact(int n, char x[1][n > 0 ? n * fact(n - 1, 0) : 1]) { return sizeof *x; } printf("%d ", fact(5, 0));
[06:37:03] <candide> dave0: [warning: implicit declaration of function 'fact' [-Wimplicit-function-declaration]] 120
[06:37:31] <dave0> sorta
[06:40:51] <rsjw> do you need the [1] for it to be a VLA?
[06:41:22] <dave0> yeah otherwise it's a pointer
[06:42:18] <rsjw> even with a non-constant expression? hmm
[06:42:20] <fizzie> Well, it's still a pointer, just pointer to a VLA.
[06:42:21] <dave0> ,cc int fact(int n, char x[][n > 0 ? n * fact(n - 1, 0) : 1]) { return sizeof *x; } printf("%d ", fact(5, 0));
[06:42:23] <candide> dave0: [warning: implicit declaration of function 'fact' [-Wimplicit-function-declaration]] 120
[06:42:53] <dave0> i lied i don't really like it
[06:43:03] <rsjw> I meant just removing the whole dimension
[06:43:15] <dave0> it's probably undefined behaviour anyways
[06:46:11] *** Joins: ixokani (~swinnenb@user/swinnenb)
[06:46:12] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[06:46:57] <fizzie> I'm just confused the special [*] syntax doesn't allow getting rid of that implicit-declaration warning.
[06:47:05] <fizzie> ,cc int fact(int, char (*)[*]); int fact(int n, char (*x)[n > 0 ? n * fact(n - 1, 0) : 1]) { return sizeof *x; } printf("%d", fact(5, 0)); // expected this to be okay
[06:47:08] <candide> fizzie: [warning: mismatch in bound 1 of argument 2 declared as 'char (*)[(long int)(n > 0 ? fact(n - 1, 0) * n : 1) - 1]' [-Wvla-parameter]  note: previously declared as 'char (*)[0]'] 120
[06:48:03] <fizzie> ,clang int fact(int, char (*)[*]); int fact(int n, char (*x)[n > 0 ? n * fact(n - 1, 0) : 1]) { return sizeof *x; } printf("%d", fact(5, 0)); // the other compiler is fine with it
[06:48:06] <candide> fizzie: 120
[06:48:20] <mcf> was just about to try that. i think it should be fine as well
[06:48:43] <fizzie> Also not quite sure where GCC got that `(long int)` cast and -1 from in the warning. :)
[06:49:31] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:49:50] *** Quits: saribro (~swinnenb@user/swinnenb) (Ping timeout: 268 seconds)
[06:50:21] <mcf> yeah, that's pretty weird
[06:51:14] *** Quits: echoSMILE (uid504326@user/echosmile) ()
[06:51:48] *** Joins: gnoo (gnoo@user/gnoo)
[06:54:19] *** Joins: smoke (~smoke@user/smoke)
[06:54:28] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:23] *** Quits: dlx (~tom@05432be4.skybroadband.com) (Ping timeout: 252 seconds)
[06:55:31] <mcf> interesting, trying different gcc versions with godbolt and it looks like the warning first showed up in gcc 11. gcc 10 is fine with it. but i don't see the weird cast and -1 in any version
[06:56:32] <dave0> ,cc int memo[10]; int fib(int n, char x[][n > 0 ? memo[n] > 0 ? memo[n] : (memo[n] = fib(n - 1, 0) + fib(n - 2, 0), memo[n]) : 1]) { return sizeof *x; } printf("%d %d %d ", fib(3, 0), fib(4, 0), fib(5, 0));
[06:56:35] <candide> dave0: [warning: implicit declaration of function 'fib' [-Wimplicit-function-declaration]] 5 8 13
[06:56:39] <dave0> nice
[06:57:41] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[06:57:43] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) ()
[07:05:42] <mcf> https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97548 seems related. sounds like the -Wvla-parameter warning was introduced in gcc 11, and it still has some problems (for example, see comment 6)
[07:05:44] <candide> Title of mcf's link: 97548 – [11 Regression] bogus -Wvla-parameter on a bound expression involving a parameter
[07:12:09] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[07:12:57] *** Quits: gry_ (~quassel@botters/gry) (Ping timeout: 240 seconds)
[07:17:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[07:18:30] *** Joins: Enitin (~Enitin@82.102.22.84)
[07:19:22] *** Quits: Torr (~Torr@user/torr) ()
[07:20:39] *** Joins: monkey_ (~user@190.104.116.153)
[07:23:02] *** Quits: daurnimator (~daurnimat@vultr.daurnimator.com) (Quit: WeeChat 3.3)
[07:23:37] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 240 seconds)
[07:24:37] *** Joins: daurnimator (~daurnimat@vultr.daurnimator.com)
[07:26:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[07:27:58] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[07:30:20] *** Quits: gnoo (gnoo@user/gnoo) (Quit: IRCNow and Forever!)
[07:33:50] <|smlckz|> ,c11 6.3.2.1p2
[07:33:51] <candide> http://www.iso-9899.info/n1570.html#6.3.2.1p2 [Lvalues, arrays, and function designators] Except when it is the operand of the sizeof operator, the _Alignof operator, the unary & operator, the ++ operator, the -- operator, or the left operand of the . operator or an assignment operator, an lvalue that does not have array type is converted to the value stored in the designated object (and is no longer an l... <truncated; https://0x0.st/osBD.txt>
[07:35:54] <|smlckz|> what is meant by ''an object of automatic storage duration that _could have been_
[07:35:56] <|smlckz|> declared with the register storage class''?
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:57] *** Joins: gco (~gco@2601:647:4c80:2424:adcf:788d:2425:1357)
[07:41:06] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 260 seconds)
[07:41:36] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[07:41:59] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[07:42:12] *** Joins: Enitin (~Enitin@82.102.22.86)
[07:42:54] *** Joins: smoke (~smoke@user/smoke)
[07:43:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:43:57] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[07:45:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:46:35] *** Joins: retro (~retro@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[07:47:05] <retro> hi how can I replace the character ⦁ with \n⦁ online
[07:47:11] <retro> where \n is newline
[07:47:50] <retro> word/excel/gdocs does not have a checkbox in find and replace dialog box for 'new line'
[07:47:55] <retro> you have to learn regex
[07:48:15] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[07:49:24] *** Parts: rsjw (~quassel@user/rsjw) ()
[07:49:40] *** Joins: Torr (~Torr@user/torr)
[07:50:44] *** Joins: rgrinberg (~textual@177.246.221.96)
[07:51:19] <pnbeast> retro, I would suggest iterating over your input, checking each character, and if the character is your chosen character, emit a newline, then emit the input characters.
[07:51:33] <retro> notepad++ removed my line breaks
[07:52:08] <pnbeast> I see.
[07:52:22] <retro> because it uses stupid linux encoding
[07:52:38] <pnbeast> I hate stupid linux encoding.
[07:52:51] <retro> crlf should be used everwhere
[07:52:57] <smol-hors> encoding of what?
[07:53:01] *** Joins: Leonard (~Administr@114.55.127.80)
[07:53:03] <retro> not just lf or cr
[07:53:04] *** Joins: gnoo (gnoo@user/gnoo)
[07:53:08] <smol-hors> not a rhetorical q, I just got here
[07:53:11] <retro> text
[07:53:14] <pnbeast> Yeah, everywhere!
[07:53:40] <|smlckz|> *sigh* retro, try that in ##programming instead
[07:53:57] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 240 seconds)
[07:54:27] <Twix> crlf is redundant. Usually it only means "line ends, next line follows". Why should we need two symbols? It is quite rare that i do not want the carriage return. "Linux Encoding" ftw.
[07:54:57] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[07:55:02] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[07:55:21] <fizzie> |smlckz|: One that never had it's address taken. IIRC it said that as a footnote too?
[07:55:35] *** Joins: Leonard (~Administr@114.55.127.80)
[07:55:59] <fizzie> Oh, not a footnote, a parenthetical remark.
[07:56:03] <retro> you need two symbols so that you dont have to waste time asking on IRC how to do such and such like how I am
[07:56:25] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 268 seconds)
[07:57:51] <fizzie> As in, it would have been possible to add the storage-class specifier `register` to the declaration of the designated object without violating any constraints, then the rest of that sentence applies.
[07:58:03] <fizzie> +"if"
[07:58:57] <|smlckz|> hmm
[07:59:08] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[07:59:58] <|smlckz|> ,cc register struct { int x; } a = {1}; printf("%d", a.x);
[08:00:01] <candide> |smlckz|: 1
[08:01:34] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:01:34] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:01:34] *** Joins: wroathe (~wroathe@user/wroathe)
[08:03:03] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[08:03:57] <fizzie> `int x; printf("%d", x);` -> undefined because the lvalue undergoing lvalue conversion designates an object that _could_ have been declared with `register` (even though it wasn't) and the object is uninitialized. `int x; &x; printf("%d", x);` -> not undefined for that reason (because the object couldn't have been declared with `register`), though the value of the expression is still indeterminate, and
[08:03:59] <fizzie> may be a trap representation (if the type has any).
[08:06:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:06:15] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3d4a:739b:93a2:f67)
[08:07:09] *** Quits: concrete-houses (~g@209.6.150.53) (Remote host closed the connection)
[08:08:09] <retro> ok noteoad++ did it fine actually
[08:14:31] *** Quits: ChromaCat248 (~ChromaCat@user/chromacat248) (Remote host closed the connection)
[08:14:43] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:16:11] <trinity> retro: i can't imagine a scenario where you'd want the LF without a preceding CR. at that point you're wasting bytes
[08:17:27] <pnbeast> Can it be?  notepad++ didn't snarf your data with stupid linux encoding?
[08:19:54] <trinity> int main(){ int c; while((c = getchar()) != EOF){ if(c == '\n') putchar('\r'); putchar(c); } return 0; }
[08:23:12] *** Quits: learner-monad (~ehanneken@user/learner-monad) (Quit: WeeChat 3.4)
[08:25:06] *** Quits: reset (~reset@user/reset) (Quit: reset)
[08:25:22] <|smlckz|> fizzie: what is trap representation?
[08:31:17] *** Quits: Feuermagier_ (~Feuermagi@84.17.49.78) (Quit: Leaving)
[08:31:28] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:33:08] *** Quits: Nitrousoxide_ (~msdos@user/nitrousoxide) (Remote host closed the connection)
[08:34:05] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:34:24] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[08:44:25] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[08:45:14] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[08:47:10] *** Joins: malloy (~jimery@116.30.221.255)
[08:47:11] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[08:48:15] <dave0> i don't know the technical explanation but i know trap representations were almost extinct until ansi brought them back with _Bool
[08:48:43] <|smlckz|> dave0: how?
[08:50:31] <dave0> |smlckz|: _Bool can be 0 or 1, but the actual type is wider than 1 bit... if you force a value of for example 2 into a _Bool you get a trap representation    _Bool a = false; *(unsigned char *)(&a) = 2;  .. now a has trap..
[08:51:34] <dave0> that's contrived, but you can easily misuse memset to do it too
[08:54:44] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:00:27] <caze> trinity: '\n' is just C's meaning of newline. Your implementation can use something else under the hood, including more than one character.
[09:00:44] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[09:01:16] <dave0> and windows does do that under the hood
[09:02:19] *** Joins: kdc (~kdc@196.211.197.159)
[09:04:59] <mcf> |smlckz|: here's an example of undefined behavior triggered by accessing a _Bool with a trap representation:
[09:05:03] <mcf> ,cc -fno-sanitize=undefined int f(_Bool x) { return x ? 1 : 0; } printf("%d\n", f(*(_Bool *)&(char){3}));
[09:05:05] <candide> mcf: 3
[09:06:44] <caze> ,c11 7.21.2p2
[09:06:46] <candide> http://www.iso-9899.info/n1570.html#7.21.2p2 [Streams] A text stream is an ordered sequence of characters composed into lines, each line consisting of zero or more characters plus a terminating new-line character. Whether the last line requires a terminating new-line character is implementation-defined. Characters may have to be added, altered, or deleted on input and output to conform to differing conven... <truncated; https://0x0.st/osM8.txt>
[09:09:07] <|smlckz|> mcf: hmm
[09:09:10] <dave0> i read an interesting note, that i have now lost, that changing the case of a string can change it's length because unicode :-p
[09:09:35] <dave0> that had never occured to me before
[09:09:36] <|smlckz|> dave0: e.g. german ß
[09:10:00] <dave0> |smlckz|: ehehe awesome!
[09:13:15] <|smlckz|> ,c11 3.19.4
[09:13:16] <candide> http://www.iso-9899.info/n1570.html#3.19.4 [Terms, definitions, and symbols] 1 trap representation an object representation that need not represent a value of the object type
[09:14:27] *** Joins: freep (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr)
[09:14:34] *** Joins: soapsudsxx (~soapsudsx@141.193.188.154)
[09:14:39] *** Quits: monkey_ (~user@190.104.116.153) (Quit: ERC (IRC client for Emacs 27.2))
[09:15:56] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[09:17:38] *** Joins: monkey_ (~user@190.104.116.153)
[09:19:32] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[09:21:37] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[09:21:40] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.189) (Quit: Raccoon's not another IRC transgenre wannabe who can't fap at the dead american dream, fhackerz)
[09:23:30] *** Joins: stblaha (~stblaha@user/stblaha)
[09:27:55] *** Joins: gce108_ (~gce@64-250-5-223.gvec.net)
[09:29:37] *** Quits: gce108 (~gce@user/gce108) (Ping timeout: 240 seconds)
[09:29:55] *** Quits: jimboj1m (~jimboj1m@static-71-166-63-68.bltmmd.fios.verizon.net) (Quit: Leaving)
[09:32:24] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[09:32:39] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[09:35:28] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.4)
[09:37:35] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[09:55:36] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:58:40] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[10:05:20] *** Quits: retro (~retro@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Quit: Client closed)
[10:06:21] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.189)
[10:14:10] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[10:15:55] *** Joins: Everything (~Everythin@178-133-112-180.mobile.vf-ua.net)
[10:15:55] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[10:21:29] *** Joins: Lazenca (~lazenca@user/lazenca)
[10:22:00] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.189) (Quit: Raccoon's not another IRC transgenre wannabe who can't fap at the dead american dream, fhackerz)
[10:22:26] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.189)
[10:23:17] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[10:31:24] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[10:33:32] *** Joins: malloy (~jimery@116.30.221.255)
[10:35:01] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:35:17] *** Quits: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca) (Ping timeout: 240 seconds)
[10:37:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[10:38:55] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.189) (Quit: Raccoon's not another IRC transgenre wannabe who can't fap at the dead american dream, fhackerz)
[10:39:20] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.189)
[10:41:11] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3d4a:739b:93a2:f67) (Quit: Quit)
[10:46:41] *** Quits: rgrinberg (~textual@177.246.221.96) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:46:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:46:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:46:44] *** Joins: wroathe (~wroathe@user/wroathe)
[10:48:36] *** Joins: rgrinberg (~textual@177.246.223.46)
[10:51:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[10:53:49] *** mendel_munkis is now known as munkis
[11:01:00] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[11:01:07] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3d4a:739b:93a2:f67)
[11:01:18] *** Quits: gco (~gco@2601:647:4c80:2424:adcf:788d:2425:1357) (Quit: ZZZzzz…)
[11:01:23] *** Joins: Leonard (~Administr@114.55.127.80)
[11:02:27] *** Joins: MrFantastik (~f@c-98-210-128-179.hsd1.ca.comcast.net)
[11:03:56] *** Quits: MrFantastik (~f@c-98-210-128-179.hsd1.ca.comcast.net) (Remote host closed the connection)
[11:11:22] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[11:11:45] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[11:16:38] *** Quits: et09 (~et09@user/et09) (Ping timeout: 252 seconds)
[11:21:28] *** Quits: rgrinberg (~textual@177.246.223.46) (Read error: Connection reset by peer)
[11:22:09] *** Joins: rgrinberg (~textual@177.246.221.96)
[11:33:10] *** Joins: loganlee (~Thunderbi@user/loganlee)
[11:35:08] *** Quits: rgrinberg (~textual@177.246.221.96) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:35:43] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Read error: Connection reset by peer)
[11:35:59] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[11:36:43] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Client Quit)
[11:37:45] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[11:38:20] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.189) (Quit: Raccoon's not another IRC transgenre wannabe who can't fap at the dead american dream, fhackerz)
[11:38:46] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3d4a:739b:93a2:f67) (Quit: Quit)
[11:38:58] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.189)
[11:41:20] *** Joins: lleo (~lleo@188-206-104-153.mobile.kpn.net)
[11:44:39] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[11:45:42] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:46:08] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.189) (Quit: Raccoon's not another IRC transgenre wannabe who can't fap at the dead american dream, fhackerz)
[11:46:24] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[11:46:36] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.189)
[11:49:31] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[11:49:57] *** Quits: nvrhome (~Bop@user/nvrhome) (Ping timeout: 240 seconds)
[11:50:37] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[11:50:54] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au)
[11:55:54] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[11:57:52] *** Joins: malloy (~jimery@116.30.221.255)
[11:59:20] *** Joins: Darkcoal (~user@2001:16a2:7a1f:b00:ca86:5f6b:1065:2cb)
[12:01:18] *** Joins: magla (~gelignite@55d465a4.access.ecotel.net)
[12:03:44] *** Joins: kernelspace (~heisenbug@user/ad/x-9056428)
[12:03:49] <kernelspace> hi gm
[12:04:06] <kernelspace> is there a way to avoid
[12:04:09] <kernelspace> error: this statement may fall through [-Werror=implicit-fallthrough=]
[12:04:13] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[12:04:28] <kernelspace> in the code, without disabling the error ?
[12:05:15] <dave0> ehhh is it gcc?
[12:05:34] <kernelspace> yes
[12:05:37] <dave0> sometimes you can make a comment /* FALLTHROUGH */
[12:05:39] <kernelspace> gcc 9
[12:05:45] <dave0> otherwise maybe use a goto
[12:06:04] <kernelspace> ok, let's see if it likes the comment way
[12:06:41] <pragma-> __attribute__ ((fallthrough));
[12:06:43] <dave0> this is really a stackoverflow question
[12:06:54] <dave0> oh thanks pragma-, hiya
[12:07:16] <kernelspace> pragma-: oh, thanks
[12:07:41] <pragma-> https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Warning-Options.html#index-Wimplicit-fallthrough
[12:07:42] <candide> Title of pragma-'s link: Using the GNU Compiler Collection (GCC): Warning Options
[12:08:43] <dave0> it's the kind of warning like when it complains about   if(something);
[12:08:59] <dave0> to insert a space before the ;   lol
[12:09:07] <pragma-> apparently -Wimplicit-fallthrough can be defined to 4 different levels by supplying an integer
[12:09:34] <pragma-> oh, no, 5 levels.
[12:10:10] <pragma-> yeah, level 3 is the default level, so the comment trick should work as well.
[12:10:17] *** Quits: Darkcoal (~user@2001:16a2:7a1f:b00:ca86:5f6b:1065:2cb) (Ping timeout: 240 seconds)
[12:12:21] <kernelspace> pragma-: dave0 thanks :) the comment works
[12:12:26] *** Joins: meator (~meator@user/meator)
[12:12:34] *** Joins: Darkcoal (~user@2001:16a2:7a1f:b00:ca86:5f6b:1065:2cb)
[12:12:39] <pragma-> That's weird, though.
[12:12:47] <kernelspace> i have already seen /* fallthrough */ stuff, likely, was not only a meaning comment
[12:12:48] <dave0> kernelspace: awesome, no worries
[12:12:52] <pragma-> Comments don't usually affect the compiler's behavior.
[12:13:04] <kernelspace> yeah, quite strange :)
[12:13:08] <dave0> pragma-: oh oh oh there's a word for thaat
[12:13:25] <pragma-> I'd have expected it to be a preprocessor macro of some sort instead.
[12:13:36] <pragma-> using comments for metaprogramming isn't very typical in C
[12:13:41] <pragma-> linters aside
[12:13:49] <dave0> you might be able to disable that warning with a #pragma but it aint gonna be portable
[12:14:14] <kernelspace> well, learned a good trick to puff-off experience :)
[12:14:21] <pragma-> Like the gcc attribute is portable :p
[12:14:47] <kernelspace> yeah, i am in kernel module so it's ok
[12:16:09] *** Quits: Lazenca (~lazenca@user/lazenca) (Remote host closed the connection)
[12:18:17] <pragma-> well, 6 levels if you count 0 as a level
[12:18:32] *** Quits: Darkcoal (~user@2001:16a2:7a1f:b00:ca86:5f6b:1065:2cb) (Ping timeout: 240 seconds)
[12:18:54] *** Joins: Darkcoal (~user@167.86.137.72)
[12:19:24] <pragma-> dave0: what's the word!
[12:21:21] <NRK[m]> dave0: just /* fall through */ should work as well, no need for yelling :p
[12:21:38] <NRK[m]> level 3 matches a regex, case insensitively iirc
[12:21:52] <pragma-> sensitively. 2 is insensitive.
[12:21:57] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[12:22:10] <dave0> pragma-: i can't find it!
[12:22:30] <pragma-> rip
[12:22:58] <NRK[m]> ahh, nevermind then. i guess you'll need to yell
[12:23:30] <pragma-> no, it also has lowercase regexs
[12:23:42] <dave0> i only ever saw it in uppercase
[12:23:48] <NRK[m]> -_-
[12:23:55] <pragma-> ,recall me http
[12:23:55] <candide> [16m14s ago] <p​ragma-> https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Warning-Options.html#index-Wimplicit-fallthrough
[12:24:00] * pragma- points NRK[m] at link
[12:24:15] <NRK[m]> yeah, i have the man page
[12:24:23] <NRK[m]> much faster than opening a link
[12:24:46] <pragma-> yet you said inaccurate things
[12:24:59] <NRK[m]> i was correct about the no yelling part!
[12:25:07] <NRK[m]> just not the case sensitive part
[12:25:38] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:26:17] <pragma-> yeah, bit weird how it specifies insensitively and sensitivty but then has regex for both cases so it's insensitive in practice
[12:26:25] <robyn> Just asking, but are curses lib projects written in c on-topic? or is there a better channel?
[12:27:09] <NRK[m]> depends if your question is more to do with C or more to do with curses
[12:27:17] <dave0> found it: https://en.wikipedia.org/wiki/Magic_(programming)    "Any comment that has an effect on the code is magic."
[12:27:44] <NRK[m]> it doesn't have any effect on the code though, just the warning flag
[12:27:45] <dave0> my brain retains mostly useless shit
[12:28:08] <dave0> NRK[m]: eeeehhhh it's pretty close though
[12:28:30] <NRK[m]> how? the code generation isn't affected at all
[12:29:06] <dave0> a warning is an effect
[12:29:10] <dave0> :-)
[12:29:52] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[12:30:00] *** Joins: duuude (~user@user/duuude)
[12:30:05] <dave0> need another beer
[12:30:42] <pragma-> Figures that there'd be a lot of references to Perl5 code in that Magic article.
[12:30:58] <kernelspace> jfyi, i am a fun of minor, so tested also /* fallthrough */ it works anyway :)
[12:31:23] <pragma-> candide: are you a fun of minor?
[12:31:28] <candide> p​ragma-, That gives me an idea!
[12:31:33] <kernelspace> maybe whatever comment line works ?
[12:31:37] <nitrix> I don't like where this is going.
[12:32:01] <NRK[m]> no, not "whatever comment"
[12:32:06] <NRK[m]> it matches a regex
[12:32:17] <kernelspace> NRK[m]: oh ok :)
[12:33:09] * pragma- mutters and takes a screenshot since nobody seems to be finding the relevant section in his link
[12:33:13] <pragma-> https://i.imgur.com/3B0wOAi.png
[12:33:37] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[12:33:56] <pragma-> (once again, 3 is the default)
[12:34:35] *** Joins: mrig (~mrig@user/mrig)
[12:36:06] * kurahaupo_ hypnotizes dave0; when you wake up, you will be unable to remember any useless sh**
[12:36:17] <dave0> oh no now my brain is empty
[12:38:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c4c6:c62c:ab52:6d38)
[12:38:34] <nitrix> I can finally forget that the first people convicted of speeding was going only 8 mph.
[12:38:44] <nitrix> person*
[12:38:56] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.239)
[12:39:31] <nitrix> And then re-learn it when my bouncer replays the logs.
[12:39:32] <dave0> riding a horse? ;-)
[12:40:05] <nitrix> No, a Benz car, going 4 times the speed limit.
[12:40:17] *** Quits: the_lanetly_052_ (~the_lanet@185.30.88.216) (Ping timeout: 240 seconds)
[12:40:31] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[12:40:37] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.189) (Ping timeout: 240 seconds)
[12:40:52] *** Quits: freep (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr) (Quit: Leaving)
[12:41:00] <nitrix> A horse would've been faster.
[12:41:12] <dave0> haha
[12:41:13] <kurahaupo_> nitrix: 20 km/h in a 5km/h zone?
[12:41:23] <pragma-> So I just looked this up. One horse has 15 horsepower.
[12:41:27] * pragma- squints.
[12:41:30] <dave0> lol
[12:41:55] <kurahaupo_> pragma-: Sprinting or working all day?
[12:41:56] <dave0> that's worth of a ,fact command
[12:42:06] <dave0> worthy*
[12:42:11] <pragma-> Hm, a human at peak condition is about 5 horsepower.
[12:42:29] <dave0> i weigh that much
[12:42:31] <kurahaupo_> pragma-: That seems a bit optimistic.
[12:42:55] <pragma-> Well, it does say "peak condition"
[12:43:02] <pragma-> So, like, Arnold Swartzenegger.
[12:43:19] <kurahaupo_> Peak output for a human sprinter is more like 2kW (~3 hp)
[12:43:29] <pragma-> Sprinters are puny.
[12:43:44] <smol-hors> sprintf
[12:43:53] <kurahaupo_> Ben Johnson "puny"?
[12:43:59] <smol-hors> it's called that cause it's fast, right?
[12:44:17] <nitrix> slow-print-fast.
[12:44:39] <pragma-> https://www.cbc.ca/news/thenational/sport-doping-scandal-ben-johnson-russia-ioc-steroids-1.4511130
[12:44:44] <nitrix> It needs momentum and has to ramp up.
[12:46:33] *** Parts: kernelspace (~heisenbug@user/ad/x-9056428) (WeeChat 3.3)
[12:47:11] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[12:47:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:47:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:47:32] *** Joins: wroathe (~wroathe@user/wroathe)
[12:47:50] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[12:52:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[12:57:31] *** Joins: aradesh (~aradesh@user/aradesh)
[12:59:23] *** Joins: V-T60 (~v@gateway/tor-sasl/v-t60)
[12:59:32] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[13:01:58] *** Joins: sokan (~sokan@2a02:587:9e06:9a00:75e2:fabb:5cd0:92cc)
[13:02:41] <sokan> Is there some recommended beginner's book on learning C with programming exersises?
[13:03:20] <pragma-> Depends on your criteria for "beginner"
[13:03:44] <pragma-> K&R2 is often recommended, but it can be terse and doesn't really teach programming but rather teaches C to people who are already programmers.
[13:03:56] <pragma-> KNK is more non-programmer friendly.
[13:04:12] <Learath2> My goto book recommendation for a true beginner is still "C Programming" by King
[13:04:24] <pragma-> ,knk
[13:04:24] <candide> 'C Programming: A Modern Approach' by K. N. King (2nd Ed, 2008) is a recommended C book that teaches both C89 and C99. http://knking.com/books/c2/index.html
[13:05:59] <sokan> This semester we're doing a course on C for people aho come in contact with programming for the first time. And I'd like to get into programming mentality. Our prof taught memaloc and none of us knows what a byte and bit is :P So I'd like to study on my own to understand better what's going on. I have
[13:06:01] <sokan> https://www.amazon.com/Teach-Yourself-C-Herbert-Schildt/dp/0078823110/ref=sr_1_6?keywords=C+herbert+schildt&qid=1638090601&s=books&sr=1-6 but somehow it doesn't really stick well
[13:07:49] <pragma-> smh
[13:07:50] <pragma-> ,schildt
[13:07:50] <candide> Please avoid Herbert Schildt's C books. See http://www.seebs.net/c/c_tcn4e.html and http://www.lysator.liu.se/c/schildt.html -- Other stuff to avoid: http://www.iso-9899.info/wiki/Main_Page#Stuff_that_should_be_avoided
[13:07:54] *** Joins: Klinda (~superleag@user/klinda)
[13:09:15] <chiselfuse> if i have #include <sys/socket.h> and then i use the socket() function, then i do gcc main.c, how does the linker know where socket() is defined and thus link that unit?
[13:09:43] *** Joins: seninha (~seninha@user/seninha)
[13:09:50] *** Quits: lleo (~lleo@188-206-104-153.mobile.kpn.net) (Quit: beforge.net)
[13:11:17] <pragma-> chiselfuse: not by the header. You typically need to provide linker flags unless the compiler already has some hard-coded knowledge.
[13:11:17] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[13:11:43] <pragma-> e.g., -lsocket
[13:12:03] <chiselfuse> pragma-: do you know how to make the linker/compiler output all that it links agains?
[13:12:10] <chiselfuse> gcc for instance
[13:12:41] <pragma-> chiselfuse: gcc -v perhaps
[13:12:56] <sokan> candide: thank you for the valuable info
[13:13:03] <candide> np, s​okan
[13:13:11] <sokan> same with Learath2, pragma- :)
[13:14:10] <sokan> I've come to learn (from learnpythonthehardway and people "tutoring" me) that I should always ask before starting to read :)
[13:14:11] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[13:14:28] <sokan> btw, are there online tutorials other than books on C? non-programmer friendly
[13:14:49] <pragma-> Oh, that reminds me. There's also ,{lcthw}
[13:14:50] <candide> Learn C The Hard Way is an online book that should be avoided. It does not teach you C, but rather shows how C might work on a specific implementation. It contains numerous errors, bad examples and absurd arguments. See http://hentenaar.com/dont-learn-c-the-wrong-way and https://kellett.im/a/hardway
[13:15:11] <pragma-> Apparently the Python book by the same author is okay. But Python doesn't have undefined behaviors.
[13:15:41] *** Joins: searemind (~searemind@122.161.52.5)
[13:15:57] *** Quits: searemind (~searemind@122.161.52.5) (Remote host closed the connection)
[13:16:02] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[13:18:47] <Klinda> what happens if you free two times a malloc?
[13:21:59] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[13:22:18] <Learath2> sokan: I'm not aware of any good C resources online sadly, C can get quite tricky which is not very compatible with online tutorials that try to be very friendly
[13:24:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:24:50] *** Quits: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net) (Quit: WeeChat 2.7.1)
[13:25:17] <Learath2> Klinda: UB
[13:26:49] <sokan> Learath2: no worries. Checking out King's book as we speak. Will have me covered :)
[13:27:20] *** Quits: malloy (~jimery@116.30.221.255) (Quit: WeeChat 3.0)
[13:27:21] <pragma-> The channel wiki in the channel /topic may have some links.
[13:31:09] <NRK[m]> "I am no longer the mildly autistic kid who had never really studied writing or communication; I'm now a mildly autistic adult with years of experience writing and communicating, including experience writing publishable material."
[13:31:10] <NRK[m]> LOL
[13:31:24] <pragma-> huh, it's 2022 right now in Kiritimati
[13:32:18] <chiselfuse> extern int socket (int __domain, int __type, int __protocol) __THROW; i don't understand what this __THROW macro is and why it's written in the declaration, can i run the preprocessor only on socket.h?
[13:33:01] *** Joins: freep (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr)
[13:34:19] <Learath2> Happy New Year to all the C programmers in Kiritimati
[13:35:21] <Learath2> chiselfuse: it's a header that is shared between C and C++, so for C code I suspect it's just `#define __THROW `
[13:36:02] <chiselfuse> Learath2: i found this #  define __THROW  __attribute__ ((__nothrow__ __LEAF))
[13:36:13] <chiselfuse> and it goes on and on
[13:36:24] <chiselfuse> i want to just preprocess socket.h and see what it comes to
[13:36:42] <chiselfuse> or idk maybe i'm trying to do it the stupid way
[13:36:50] *** Joins: dlx (~tom@05432be4.skybroadband.com)
[13:37:14] <Learath2> gcc has a -E flag that might help, attribute nothrow shouldn't really exist for C
[13:38:40] <novns> chiselfuse, https://gcc.gnu.org/onlinedocs/gcc-11.2.0/gcc/Common-Function-Attributes.html
[13:39:28] <novns> it's for exception handling, and for C it's usually an ampty define
[13:39:28] <novns> *empty
[13:41:12] <chiselfuse> this is what gcc -E gave me:
[13:41:13] <chiselfuse> extern int socket (int __domain, int __type, int __protocol) __attribute__ ((__nothrow__ , __leaf__));
[13:41:26] <chiselfuse> i don't even understand the syntax of that
[13:41:51] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:42:42] <chiselfuse> so func(type arg) x;   x is an "attribute"
[13:43:03] <novns> no, only __attribute__() is an attribute
[13:43:11] <Learath2> can you try cc -E?
[13:43:11] <chiselfuse> aha
[13:43:18] <chiselfuse> ok one moment
[13:43:40] <chiselfuse> Learath2: same output
[13:43:45] <novns> chiselfuse, https://gcc.gnu.org/onlinedocs/gcc-11.2.0/gcc/Attribute-Syntax.html
[13:44:20] <markand> do you think it's bad style to avoid double indent in that case? http://sprunge.us/eYLdDv
[13:44:45] <Wulf> markand: that's horrible.
[13:45:13] <Learath2> It's interesting that you get attribute nothrow on there, but either way, it shouldn't really mean anything in the context of C
[13:45:32] <Wulf> markand: put the while on its own line!
[13:46:03] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[13:46:34] <chiselfuse> >it shouldn't really mean anything in the context of C, i find it strange that it compiles at all then
[13:46:54] *** Joins: Akuli (~Akuli@85-76-42-63-nat.elisa-mobile.fi)
[13:46:55] <chiselfuse> Learath2: could you please try it on your machine? maybe there's something wrong with my system
[13:47:54] <chiselfuse> just #include <sys/socket.h> int main(){}     # cc -E 2>&1 | grep "int socket"
[13:47:59] <novns> Learath2, it still matters if some C++ project uses your C library and your C library uses libc functions marked with attributes
[13:48:23] <novns> it's just some hints to a compiler
[13:52:52] <pragma-> markand: are you expecting x to wraparound 0 or something?
[13:52:58] *** Quits: Darkcoal (~user@167.86.137.72) (Quit: Darkcoal)
[13:53:11] *** Joins: Darkcoal (~user@2001:16a2:7a1f:b00:ca86:5f6b:1065:2cb)
[13:54:32] <Learath2> chiselfuse: well on my macOS with clang there is no __THROW on that declaration to begin with
[13:55:21] <novns> chiselfuse, what's the problem with these attributes?
[13:55:39] <Learath2> on linux I do also get that attribute
[13:55:47] <novns> if everything is compiling and linking
[13:56:46] <chiselfuse> novns: it's just that i didn't understand the syntax or how that affected the function, i was just trying to read the code of the function
[13:57:08] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:57:30] <novns> chiselfuse, nothrow affects optimizations in C++ code
[13:57:41] <novns> for C it makes nothing
[13:58:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:58:10] <Learath2> chiselfuse: The syntax for attributes is documented in that gcc link novns sent, if you are interested in understanding
[13:58:26] *** Lord_of_Life_ is now known as Lord_of_Life
[13:58:52] <chiselfuse> i'm not too into c++ :P
[14:00:18] <chiselfuse> how do IDEs like codeblocks get the "implementation" (i assume they mean definition) of a function or symbol? do they just look it up in a list of directories of libraries?
[14:00:53] *** Quits: Darkcoal (~user@2001:16a2:7a1f:b00:ca86:5f6b:1065:2cb) (Ping timeout: 268 seconds)
[14:02:28] *** Joins: Darkcoal (~user@167.86.137.72)
[14:03:19] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:03:19] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:03:19] *** Joins: wroathe (~wroathe@user/wroathe)
[14:04:02] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[14:04:02] *** Joins: zer0bitz (~zer0bitz@196.244.192.54)
[14:04:07] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[14:05:15] <novns> yes, thy use ctags or something like this
[14:05:28] <novns> *they
[14:07:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:09:55] <chiselfuse> it can't find the definition of socket() and i tried searching for solutions, can't find anything, is there a way to add lookup directories from stuff that gcc links to?
[14:09:56] <markand> pragma-, no I've seen some style like this in musl
[14:10:46] <sham1> I'd think that codeblocks would nowadays just use clang
[14:12:43] <chiselfuse> sham1: i don't understand what that means, you mean clang has some functionality to look definitions up like some language server? i also think that you can make codeblocks use any compiler, i have mine configured to use gcc by default
[14:13:36] <chiselfuse> i just want it to jump to the definition of socket()
[14:13:37] <sham1> You can use clang to parse code and dump the AST, from which you can then build a database for things like code locations and stuff like that. It's indeed used with language servers
[14:13:55] <chiselfuse> they lied to me when they said IDEs were easier to use and just worked
[14:15:00] <novns> chiselfuse, did you try ctrl+click on a call to socket(), or just put a mouse pointer over it and wait for a hint popup
[14:15:55] <chiselfuse> novns: ctrl+click does nothing, the hint however is just the declaration of socket()
[14:16:19] <chiselfuse> when i right click and tell it to go to "implemenetation" it says it doesn't find it
[14:16:29] <novns> chiselfuse, you need to install libc sources and configure your IDE to lookup there
[14:16:34] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.190)
[14:17:27] <novns> chiselfuse, but socket() is a syscall, so in libc sources you will see how they call that syscall
[14:17:31] <novns> and nothing more
[14:18:08] <chiselfuse> i already have sources, if it's the glibc package
[14:18:21] <chiselfuse> it's that one, right/
[14:18:22] <chiselfuse> ?*
[14:19:55] <chiselfuse> novns: do you maybe recommend a different IDE?
[14:19:57] <novns> it depends on your distributive, the glibc package are just binaries usually
[14:20:16] <novns> chiselfuse, I will not, they are all nice
[14:20:23] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[14:20:43] *** Joins: earnestly (~earnest@user/earnestly)
[14:20:56] <novns> I use vscode these days, but it doesn't matter
[14:21:07] <rahl> When capturing single keypress from stdin, having set the terminal to not wait for newline, what might be a good way to not print a keypress to stdout?
[14:21:27] <chiselfuse> rahl: set the terminal not to echo back
[14:21:34] <novns> I just love the dark color scheme and some extensions
[14:21:41] <chiselfuse> rahl: stty
[14:21:45] <rahl> chiselfuse: vim for "IDE" ;)
[14:21:53] <rahl> chiselfuse: thanks, ideal. will have a read
[14:22:17] <chiselfuse> novns: can you hint me on how to find the package name of libc sources?
[14:22:41] <chiselfuse> if you give me the name of a source file that comes with it, i can look it up for my distro
[14:22:49] <novns> chiselfuse, use package tools of your distributive
[14:23:05] <HisShadow> chiselfuse: deb or rpm?
[14:23:28] <chiselfuse> arch repos, i treid `pkgfile socket.c` but apparently that's not the name of a file in the sources
[14:23:32] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:23:35] <chiselfuse> because it output unrelated things
[14:25:46] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:27:51] <chiselfuse> heh, i thought it had some know conventional name, like libc-sources or whatever
[14:29:00] <rcf> chiselfuse: see the PKGBUILD, also makepkg --nobuild
[14:29:30] <rcf> (also the package is glibc)
[14:29:44] <rcf> Be warned that you're going to be much more confused trying to make sense of that.
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:31] <rahl> chiselfuse: https://gitlab.gnome.org/GNOME/glib.git
[14:30:38] <chiselfuse> rcf: nah, i get it, i just look into how glibc package is built from source
[14:30:50] <rcf> rahl: that's a separate thing altogether
[14:30:58] *** Joins: csrf (~csrf@user/csrf)
[14:30:59] <rahl> ah sorry
[14:31:21] *** Joins: ko (~i.am@user/marlboro)
[14:31:26] <rahl> yep, my mistake, was misreading
[14:32:57] *** Quits: AmR (~AmREiSa@156.199.202.96) (Ping timeout: 240 seconds)
[14:34:05] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:34:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:34:05] *** Joins: wroathe (~wroathe@user/wroathe)
[14:36:15] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[14:38:24] *** Joins: Windshield (~Windshiel@120.20.217.5)
[14:38:34] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[14:38:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:39:13] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[14:39:45] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au)
[14:40:18] *** Quits: Guest15 (~Guest15@pool-108-17-122-33.pitbpa.fios.verizon.net) (Quit: Client closed)
[14:40:37] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[14:47:13] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.239) (Ping timeout: 250 seconds)
[14:48:25] *** Joins: reset (~reset@user/reset)
[14:48:37] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[14:49:26] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[14:52:26] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au) (Ping timeout: 245 seconds)
[14:53:13] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[14:55:24] <cassepipe> I was wondering how often do you resort to write your own "garbage collector", that is a getter that return a static struct that holds all allocated pointer and that you destroy() at the end ?
[14:57:18] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[14:57:57] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[14:58:14] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:59:06] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[15:01:46] <sham1> You mean an object pool?
[15:01:59] <sham1> Although some might call it an arena allocator instead
[15:02:18] <cassepipe> sham1: I wasn't sure of the terminology
[15:02:52] <cassepipe> Is is a pattern you use much ?
[15:02:59] <sham1> Occasionally
[15:03:14] <cassepipe> Is there anything that recommends against it ?
[15:03:39] <sham1> Well, it can look weird if one doesn't know that it's what is happening
[15:03:58] <sham1> And of course it's the most efficient if you for example need to allocate a lot of the same size thing
[15:04:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:04:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:04:52] *** Joins: wroathe (~wroathe@user/wroathe)
[15:06:22] <cassepipe> sham1: Right I read some code and I wasn't sure what was happening at first
[15:10:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:16:15] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 250 seconds)
[15:19:21] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[15:19:33] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[15:22:45] *** Joins: kish` (~sid742412@user/aqua)
[15:25:23] *** Joins: badsektor (~badsektor@user/badsektor)
[15:28:20] *** Joins: strajder (~strajder@user/strajder)
[15:35:08] *** Quits: duuude (~user@user/duuude) (Ping timeout: 252 seconds)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:36] *** Quits: magla (~gelignite@55d465a4.access.ecotel.net) (Quit: Stay safe!)
[15:38:21] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[15:40:53] *** Joins: plastico (~plastico@neomutt/plastico)
[15:41:34] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[15:56:42] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[15:57:58] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[15:59:29] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:59:54] *** Joins: semeion (~semeion@user/semeion)
[15:59:56] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:00:30] *** Joins: Rounin (~david@84.212.130.215)
[16:00:50] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[16:01:45] *** Joins: shivesh (~shivesh@user/shivesh)
[16:03:24] *** Joins: ntwk (~ntwk@user/ntwk)
[16:04:36] *** Quits: stblaha (~stblaha@user/stblaha) (Quit: leaving)
[16:04:54] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[16:06:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[16:06:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[16:06:03] *** Joins: wroathe (~wroathe@user/wroathe)
[16:06:51] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[16:08:02] *** Joins: kts (~kts@103.73.237.57)
[16:10:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[16:11:49] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[16:12:13] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[16:14:34] *** Joins: Burgundy (~yomon@79.115.213.171)
[16:15:18] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:15:55] *** Joins: pulse (~pulse@user/pulse)
[16:21:50] *** Quits: kts (~kts@103.73.237.57) (Quit: Konversation terminated!)
[16:23:54] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[16:24:22] *** Joins: Satin (uid193953@user/Seten)
[16:27:49] *** Quits: Windshield (~Windshiel@120.20.217.5) (Read error: Connection reset by peer)
[16:28:03] *** Joins: Windshield (~Windshiel@120.20.217.5)
[16:28:29] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 252 seconds)
[16:29:28] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Remote host closed the connection)
[16:34:59] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:36:05] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[16:36:36] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c657:4fa8:ebc0:a8bd) (Ping timeout: 245 seconds)
[16:37:31] *** Joins: zwr (~zwr@2804:d45:b966:fb00:7f50:bd17:59b3:3c7a)
[16:38:42] *** Quits: V-T60 (~v@gateway/tor-sasl/v-t60) (Ping timeout: 276 seconds)
[16:39:43] *** Joins: tolog (~tolog@89.36.78.172)
[16:41:51] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[16:42:24] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[16:42:45] *** Joins: kish` (~sid742412@user/aqua)
[16:43:37] *** Joins: palindrome (~palindrom@51.37.129.66)
[16:46:40] *** Joins: terminalpusher (~terminalp@2a01:586:8ebf:1:95d1:de18:2dd9:e4a2)
[16:50:08] *** Joins: V-T60 (~v@gateway/tor-sasl/v-t60)
[16:51:27] *** Quits: V-T60 (~v@gateway/tor-sasl/v-t60) (Remote host closed the connection)
[16:53:32] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:d8e5:b45f:7ffd:50ed)
[16:53:32] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:d8e5:b45f:7ffd:50ed) (Changing host)
[16:53:32] *** Joins: skapata (~Skapata@user/skapata)
[16:54:02] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[16:59:57] *** Joins: upgreydd (~upgreydd@public-gprs424091.centertel.pl)
[17:01:03] <upgreydd> Hey guys. I'm is anyone familiar with MCUXpresso SDK
[17:03:17] <upgreydd> I'm trying to modify a little fsl_sd.c library to replace data in fly. At this moment I'm able to find files headers but have problem to replace them. The thing is I need to convert char to uint32_t
[17:05:00] *** Joins: stonkey (~stonkey@user/stonkey)
[17:07:03] *** Joins: random-nick (~random-ni@87.116.180.98)
[17:07:56] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[17:09:55] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[17:11:23] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:11:55] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Client Quit)
[17:12:27] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[17:14:40] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.239)
[17:18:06] <markand> even though I write in C99 and C11, I still prefer C89 /* comments */. anyone else or you all use // ?
[17:18:12] <markand> (friday question)
[17:18:18] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (Remote host closed the connection)
[17:18:28] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[17:18:57] <dave0> i.. don't know
[17:20:59] <sham1> I sometimes use /* */ and sometimes //
[17:21:02] <sham1> It depends on the mood
[17:21:07] <dave0> a quick grep shows about 9/10 of my comments are /**/
[17:21:43] <sham1> And of course this only matters with a novel codebase. Of course for an established codebase you just follow whatever style has been used before
[17:22:56] *** Quits: cruncher (~cruncher@90.68.118.49) (Quit: Leaving)
[17:23:25] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[17:23:51] <chiselfuse> i use // to disable lines of code, /* */ to document
[17:24:01] * APic uses // for short Comments and /**/ for longer ones
[17:25:57] *** Quits: palindrome (~palindrom@51.37.129.66) (Quit: WeeChat 3.3)
[17:26:55] <markand> #if 0 #endif is better to comment line of codes
[17:27:03] *** Quits: asd (~noname@user/asd) (Read error: Connection reset by peer)
[17:27:33] *** Quits: fstd (~fstd@xdsl-78-35-82-60.nc.de) (Read error: Connection reset by peer)
[17:27:44] *** Joins: fstd (~fstd@xdsl-78-35-82-60.nc.de)
[17:28:33] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:28:43] *** Quits: nehsou^ (~nehsou@207.5.54.6) (Remote host closed the connection)
[17:29:02] *** Quits: tolog (~tolog@89.36.78.172) (Ping timeout: 240 seconds)
[17:29:04] *** Joins: acerbic (~acerbic@cs-xdata-50-86-55-250.cspire.com)
[17:30:00] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[17:32:21] *** Joins: cart_man (~rynot@host-78-144-125-216.as13285.net)
[17:33:17] <dave0> why are you commenting things in the first place? it just helps people read your code
[17:33:33] *** Joins: kts (~kts@103.73.237.150)
[17:33:49] <sham1> One way is always to do the doxygen/javadoc-like comments where /** and */
[17:33:59] <sham1> And generate API documentation that way
[17:34:13] *** Quits: dlx (~tom@05432be4.skybroadband.com) (Remote host closed the connection)
[17:34:33] *** Joins: dlx (~tom@05432be4.skybroadband.com)
[17:35:36] <zwr> I use /* */ for everything
[17:36:00] <chiselfuse> comments are bad because they don't affect how the code runs at all, they just waste extra bytes in TUs
[17:36:39] <sham1> Uhu
[17:37:11] <sokan> Learath2, candide the book is amazing!
[17:38:21] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:48bd:d670:ba22:4ac3)
[17:38:34] <dave0> also half my comments are either /* !!! */ or /* careful */
[17:38:54] *** Joins: monkey_ (~user@190.104.116.153)
[17:39:14] <EtherNet> happy new C year for everyone.. for those who don't know C yet and will learn along 2022 and those who are masters kind of Kernighan and Richie =) happy new year for everone guys.
[17:42:40] <heiner_> chiselfuse: writing good comments is almost as difficult as writing good code.
[17:42:55] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:42:59] <chiselfuse> happy new year or so
[17:43:14] <heiner_> no new year here, yet
[17:43:43] <chiselfuse> neither here but wishing for others
[17:44:00] <EtherNet> not yet either. but there are people already on the other side of the world enjoying 2022 already
[17:44:09] <sham1> It's only new year when it hits midnight on UTC
[17:44:15] <chiselfuse> "enjoying"
[17:44:21] <EtherNet> sham1: wow .. never heard that, but makes sense
[17:44:37] <EtherNet> sham1: how long until that ?
[17:44:42] <EtherNet> +7 hours ?
[17:45:07] <sham1> Well it's 14:15 on UTC, so
[17:45:26] <sham1> 9-ish hours
[17:46:09] <chiselfuse> since we are on libera it's only new year when libera's servers time hits midnight
[17:46:16] <EtherNet> lol
[17:46:19] <EtherNet> good law
[17:46:33] <chiselfuse> any ops here?
[17:46:37] <EtherNet> 15:16:28  Libera  -- | strontium.libera.chat Friday December 31 2021 -- 14:16:28 +00:00
[17:47:12] <chiselfuse> how do you get that?
[17:47:13] <chiselfuse> motd?
[17:47:18] <EtherNet> chiselfuse: /time command
[17:47:24] <EtherNet> on the server's window
[17:47:31] <heiner_> sham1: 34975 secods
[17:47:36] <heiner_> ...seconds...
[17:47:38] <dave0> it's 1:15am 1-jan-2022 here :-)
[17:47:47] <chiselfuse> palladium.libera.chat Friday December 31 2021 -- 14:17:30 +00:00
[17:47:48] <chiselfuse> aha
[17:48:18] <markand> 15h18 here in france
[17:48:23] * markand still in the past
[17:48:34] <EtherNet> markand: same here in Spain
[17:48:37] <heiner_> same here, Germany
[17:49:25] <sham1> Well it's 16:19 local time
[17:49:46] <sham1> But again, local time is less meaningful on the Internet and thus UTC
[17:49:53] <chiselfuse> dave0: you're on molybdenum.libera.chat [Quebec, CA]   so you're in canada
[17:50:46] <chiselfuse> i mean, on irc you're in canada
[17:50:53] <chiselfuse> which is the only one that counts
[17:51:22] *** Joins: bud (~bud@user/bud)
[17:51:33] <bud> hello everybody!
[17:51:44] <sham1> Hello
[17:51:51] <chiselfuse> hello onlybud
[17:51:58] <bud> :D
[17:52:08] <sham1> onlybuds
[17:52:16] <chiselfuse> fresh buds
[17:53:27] <bud> im about to do something in C, i use getopt.h and have gnu longoptions for the cli part of a program.
[17:53:53] <heiner_> chiselfuse: if you are on a linux system, you can get a countdown as follows: echo "$(date -d 2022-01-01 +"%s")-$(date +"%s")" | bc
[17:54:05] <bud> i think i want to make a strcut _o with all options.
[17:54:23] <sham1> An option struct is a nice way of doing things if you have a lot of options
[17:54:31] <sham1> I approve
[17:54:39] <bud> cool, i have a lot of them!
[17:54:44] *** Joins: damxsa (~damx@2001:16a2:cfed:3100:d614:626b:5937:395b)
[17:55:09] <bud> but i was wondering about flags, should i use stdbool.h and bool type for them?
[17:55:22] <sham1> Like for toggles? I'd say so
[17:55:42] <chiselfuse> heiner_: lol nice
[17:56:08] <sham1> bud: of course you'd then have to document that you expect C99 or later, but that's probably assumed
[17:56:16] <sham1> I mean, it's been two decades
[17:56:36] <upgreydd> guys please can someone tell me where do I have error: https://bpa.st/TUPQ
[17:56:46] <chiselfuse> upgreydd: post error
[17:57:13] <upgreydd> @chiselfuse, wdym?
[17:57:24] <chiselfuse> what error are you getting?
[17:57:31] <chiselfuse> ah nvm
[17:57:50] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[17:57:57] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[17:58:04] <sham1> > &target + 1
[17:58:07] <sham1> Um, why is it like that
[17:58:20] *** Joins: asd (~noname@user/asd)
[17:58:49] <bud> sham1: yeah, i never used stdbool.h before, i just read https://iq.opengenus.org/boolean-in-c/ , and thought maybe its correct to use for this. but i see that the size of bool is 1 byte, when only 1 bit is needed.. is it possible to create a 1 bit datatype?
[17:59:24] <upgreydd> sham1, what's wrong with that? there's &targer + i
[17:59:45] <sham1> upgreydd: that's undefined behaviour
[17:59:50] <sham1> It's not doing what you think it's doing
[18:00:20] <sham1> You're getting into some UB territory
[18:00:27] <|smlckz|> upgreydd: what are you intending to do?
[18:00:47] <caze> upgreydd: What is sizeof name?
[18:01:18] <caze> upgreydd: "johndoe" has 8 characters, but char name[10] has ten elements.
[18:02:22] <dave0> bud: technically yes, with bitfields, but it's pretty useless
[18:02:36] *** Quits: damxsa (~damx@2001:16a2:cfed:3100:d614:626b:5937:395b) (Ping timeout: 268 seconds)
[18:02:40] <sham1> A bitfield would still end up being at least CHAR_BITS bits long
[18:02:47] <dave0> bud: just use good old int
[18:02:48] <upgreydd> caze: ah OK, replaced name for `paste` purpose. in code I have name[7]
[18:02:57] <caze> upgreydd: Also, memcpy(&target... you're copying to the exact same location every iteration of the loop.
[18:02:58] *** Joins: JarbonFeh (~JarbonFeh@197.15.249.236)
[18:03:14] <dave0> good old int, nothing beats that
[18:03:19] <sham1> dave0: _Bool
[18:03:24] <dave0> doh!
[18:03:24] <sham1> Semantic types, pls
[18:03:26] <caze> upgreydd: That is incorrect. "johndoe" requires 8 elements.
[18:03:33] <sham1> Just do char name[]
[18:03:41] <sham1> If you intend on the name being a string literal
[18:03:44] <sham1> It will figure it out
[18:04:16] <caze> upgreydd: Can you explain what you intend for the code to do?
[18:04:31] *** Quits: JarbonFeh (~JarbonFeh@197.15.249.236) (Client Quit)
[18:04:45] *** Joins: JarbonFeh (~JarbonFeh@197.15.249.236)
[18:05:38] <bud> sham1: i saw that i can use _Bool instead of including stdbool.h and bool is that "better" what is most common, or do people just use int for bools most of the time?
[18:06:18] <sham1> I'd say using stdbool.h is more common. It doesn't really matter since bool is just an alias for _Bool, true for 1 and false for 0
[18:06:25] <sham1> It just makes the code look nicer
[18:06:51] <bud> thanks
[18:07:01] <caze> bud: They didn't make bool a keyword since there was already a lot of existing code that already uses that as an identifier.
[18:07:03] <upgreydd> OK from beginning cause I'm not familiar with C at all so it's shitty code. I'm trying to modify kinetis SDK fsl_sd.c library to replace data in fly. https://github.com/kylemanna/kinetis-sdk2/blob/master/middleware/sdmmc_2.0.0/src/fsl_sd.c here in line 854 I'm trying to replace buffer with custom one
[18:07:50] <caze> bud: So they made _Bool the keyword, and then you can optionally use bool if you use stdbool.h, and presumably, you would know if that would break your code.
[18:08:02] <sham1> upgreydd: oh, you mean the data.rxData
[18:09:11] <caze> upgreydd: What do you want target to contain?
[18:10:00] <upgreydd> sham1, caze. let me paste my shitty code
[18:10:10] <caze> upgreydd: No, tell me in english.
[18:10:17] <|smlckz|> bud: _Bool is available from C99 onwards.. if you are writing for C89, you either define your own bool, or use int instead.. if you read old C code, you'll find people using 0, 1, and int instead of false, true and bool
[18:10:41] <NRK[m]> why int and not uchar?
[18:10:42] <bkhl> Or more commonly char I guess?
[18:10:53] <upgreydd> caze, I'm getting data from rxData, inverting blocks, joining to string, comparing with desired hex if hex match then I wanna replace it
[18:11:19] <NRK[m]> also, incrementing or decrementing _Bool with pre/postfix operator is UB, right?
[18:11:26] <caze> upgreydd: Can you explain in the context of the code you pasted? https://bpa.st/TUPQ
[18:11:32] <NRK[m]> since it's not a real or pointer type
[18:11:43] <rcf> |smlckz|: I'd say that's too simplistic, in part because success or failure (a boolean concept if there ever was one) in the standard library reverses the values.
[18:11:48] <caze> What do you mean by "real"/
[18:11:54] <caze> ?
[18:12:02] <NRK[m]> idk, i just learned about it now
[18:12:21] <caze> NRK[m]: "reals" are floats, doubles, etc.
[18:12:21] <NRK[m]> ,c99 6.5.3.1
[18:12:23] <candide> http://www.iso-9899.info/n1256.html#6.5.3.1 [Prefix increment and decrement operators] 1 The operand of the prefix increment or decrement operator shall have qualified or unqualified real or pointer type and shall be a modifiable lvalue. Semantics 2 The value of the operand of the prefix ++ operator is incremented. The result is the new value of the operand after incrementation. The expression ++E is equi... <truncated; https://0x0.st/oseB.txt>
[18:12:40] <sham1> ,cc _Bool f = 0; ++f; // Should work
[18:12:40] <NRK[m]> so, it is ub to ++/-- a bool?
[18:12:43] <candide> sham1: [warning: increment of a boolean expression [-Wbool-operation]] no output: f = true
[18:12:53] <sham1> ,cc _Bool f = 0; ++f; //
[18:12:55] <candide> sham1: Same output.
[18:12:56] <caze> NRK[m]: And what category is _Bool?
[18:12:58] <sham1> ,cc _Bool f = 0; ++f; ++f;
[18:13:01] <candide> sham1: [warning: increment of a boolean expression [-Wbool-operation]  warning: increment of a boolean expression [-Wbool-operation]] Invalid operation on booleans.
[18:13:19] <sham1> Hmrm
[18:14:07] <sham1> So yeah. You can at least do preincrements
[18:14:09] <NRK[m]> ,c99 6.2.5p2
[18:14:10] <candide> http://www.iso-9899.info/n1256.html#6.2.5p2 [Types] An object declared as type _Bool is large enough to store the values 0 and 1.
[18:14:15] <sham1> ,cc _Bool f = 0; f++; // Should work
[18:14:18] <candide> sham1: [warning: increment of a boolean expression [-Wbool-operation]] no output: f = true
[18:14:18] <NRK[m]> i don't think it's specificed what _Bool is
[18:14:22] <sham1> Yup
[18:14:26] <caze> NRK[m]: Keep reading.
[18:14:39] <caze> p6
[18:15:11] <NRK[m]> oh, i see. so it's unsigned int.
[18:15:28] <caze> No, that's not what it says.
[18:15:28] <NRK[m]> so shouldn't be UB then
[18:15:49] <caze> "int" and "integer" are not the same thing, and you should not use "int" as an abbreviation for "integer".
[18:16:16] <upgreydd> caze, here's the rest of shitty code: bool startsWith(const char *pre, const char *str)
[18:16:16] <upgreydd> {
[18:16:16] <upgreydd>     size_t lenpre = strlen(pre),
[18:16:16] <upgreydd>            lenstr = strlen(str);
[18:16:16] <upgreydd>     return lenstr < lenpre ? false : memcmp(pre, str, lenpre) == 0;
[18:16:16] *** ChanServ sets mode: +o candide
[18:16:17] *** candide sets mode: +b *!~upgreydd@*.centertel.pl
[18:17:28] *** candide sets mode: -b *!~upgreydd@*.centertel.pl
[18:17:29] <upgreydd> 	}
[18:17:31] <upgreydd> 	return data;
[18:17:33] <upgreydd> }
[18:17:35] <upgreydd> sorry
[18:17:38] *** Joins: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[18:17:38] <upgreydd> sorry. caze here's a paste: https://bpa.st/6STQ
[18:18:28] <NRK[m]> caze: no to "it shouldn't be UB" or to me using "int" as abbreviation of interger?
[18:18:32] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:48bd:d670:ba22:4ac3) (Ping timeout: 240 seconds)
[18:18:44] <caze> <NRK[m]> oh, i see. so it's unsigned int.
[18:19:47] <NRK[m]> hmm, got it. so it's definitely not UB.
[18:19:49] <|smlckz|> rcf, yes, i'm aware of that kind of usage.. the convention i learnt is that you use 1 and 0 as a result of a predicate or a value of a flag.. success or failure of an operation might use 0 for success and non zero value for failure [ different values for different kinds of failures ].. there might be weirder conventions depending on the kind of problem being solved..
[18:19:49] *** Joins: mrig (~mrig@user/mrig)
[18:19:50] <EtherNet> l
[18:20:31] <NRK[m]> since _Bool should qualify as a "real type"
[18:20:41] <caze> NRK[m]: That is correct.
[18:21:00] *** Quits: fstd (~fstd@xdsl-78-35-82-60.nc.de) (Read error: Connection reset by peer)
[18:21:17] *** Joins: fstd (~fstd@xdsl-78-35-82-60.nc.de)
[18:21:18] <NRK[m]> thank you
[18:21:36] <dave0> |smlckz|: i tell people to go with what the standard library does
[18:22:28] <dave0> it's fairly consistent
[18:22:52] <upgreydd> caze, https://bpa.st/6STQ this is what I'm trying to do with data.rxData
[18:22:54] <dave0> string stuff gets a bit weird
[18:23:04] <dave0> stdio is mostly EOF on error
[18:23:14] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[18:23:17] <dave0> pointer stuff is uaually NULL
[18:23:22] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[18:23:53] <caze> upgreydd: Your code is broken, I cannot reliably infer what your intention is, by examining your broken code.
[18:24:43] <|smlckz|> dave0: i'd tell people follow some variation of the linux style guide for C
[18:25:18] <dave0> |smlckz|: but it's not even hosted
[18:25:37] *** Joins: mrig_ (~mrig@lfbn-mar-1-375-99.w86-216.abo.wanadoo.fr)
[18:25:42] <dave0> i thought the *bsd's had a better reputation for good code
[18:25:52] <sham1> They do
[18:25:56] <|smlckz|> or follow the existing convention the codebase being maintained, if not writing from scratch..
[18:25:58] <rcf> There is no such thing as good code
[18:26:04] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:26:11] <rcf> Style-wise, anyway.
[18:26:11] *** Joins: mrig__ (~mrig@lfbn-mar-1-375-99.w86-216.abo.wanadoo.fr)
[18:26:17] <rcf> Somebody is going to hate everything.
[18:26:36] *** Quits: mrig__ (~mrig@lfbn-mar-1-375-99.w86-216.abo.wanadoo.fr) (Client Quit)
[18:27:48] <NRK[m]> why do you need a separate "startswith" function?
[18:28:01] <|smlckz|> as long as the style is more or less consistent throughout a given codebase..
[18:28:11] *** kurahaupo_ is now known as kurahaupo
[18:28:18] <NRK[m]> if (strcmp(start, str) == str) printf("true\n");
[18:28:36] <caze> NRK[m]: The reason why sham1 was getting a warning is because _Bool does not have the same wrap-around behavior as the other unsigned integer types.
[18:29:02] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:29:02] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:29:02] *** Joins: wroathe (~wroathe@user/wroathe)
[18:29:06] <rcf> NRK[m]: what on earth is that actually supposed to do
[18:29:16] <trenka> NRK[m]: strcmp returns int
[18:29:24] *** kurahaupo is now known as opuaharuk
[18:29:29] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 252 seconds)
[18:29:32] <NRK[m]> oops, my bad
[18:29:41] <NRK[m]> i intended to write strstr
[18:29:47] *** Quits: upgreydd (~upgreydd@public-gprs424091.centertel.pl) (Quit: Leaving)
[18:29:52] *** opuaharuk is now known as kurahaupo
[18:30:12] <NRK[m]> though, i think u neeed to reverse the arguments.
[18:30:28] <caze> NRK[m]: ,cc _Bool b = 0; for (int i = 0; i < 10; i++) { printf("%d ", b++); }
[18:30:31] <candide> NRK[m]: [warning: increment of a boolean expression [-Wbool-operation]] 0 1 1 1 1 1 1 1 1 1
[18:30:32] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:30:37] *** Quits: mrig_ (~mrig@lfbn-mar-1-375-99.w86-216.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[18:30:38] <caze> NRK[m]: ,cc _Bool b = 0; for (int i = 0; i < 10; i++) { printf("%d ", b--); }
[18:30:40] <NRK[m]> caze: i didn't even notice them. was busy reading the standard
[18:30:41] <candide> NRK[m]: [warning: decrement of a boolean expression [-Wbool-operation]] 0 1 0 1 0 1 0 1 0 1
[18:31:37] <caze> NRK[m]: ,cc unsigned char c = 5; for (int i = 0; i < 10; i++) { printf("%d ", b--); }
[18:31:39] <candide> NRK[m]: error: 'b' undeclared
[18:31:41] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 252 seconds)
[18:31:45] <caze> NRK[m]: ,cc unsigned char c = 5; for (int i = 0; i < 10; i++) { printf("%d ", c--); }
[18:31:47] <candide> NRK[m]: 5 4 3 2 1 0 255 254 253 252
[18:32:14] <caze> NRK[m]: ,cc unsigned char c = UCHAR_MAX - 5; for (int i = 0; i < 10; i++) { printf("%d ", c++); }
[18:32:16] <candide> NRK[m]: 250 251 252 253 254 255 0 1 2 3
[18:32:30] *** Joins: nuxil (~nuxil@141.195.51.213)
[18:32:31] *** Joins: egm (~egm@user/egm)
[18:32:32] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:32:38] *** Parts: nuxil (~nuxil@141.195.51.213) ()
[18:32:53] <caze> NRK[m]: _Bool doesn't wrap around when you do ++, but it does when you do --.
[18:33:30] <caze> NRK[m]: Whereas all the unsigned integer types wrap around similarly to this unsigned char example.
[18:33:39] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:33:46] <caze> *all the other
[18:33:53] <egm> i'm wanting to convert a rgb tuple in the form 255,255,255 to a 32 bit rgba tuple in the form ffff,ffff,ffff,ffff
[18:34:14] *** Joins: nuxil (~nuxil@141.195.51.213)
[18:34:31] <caze> What do you want the last 8 bits to be?
[18:34:44] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[18:34:48] <egm> alpha channel
[18:35:31] *** Quits: nuxil (~nuxil@141.195.51.213) (Remote host closed the connection)
[18:35:42] *** Joins: nuxil (~nuxil@141.195.51.213)
[18:35:50] <caze> You can multiply the rgb by 256, and then add the alpha.
[18:35:51] <trenka> if 0xffff is 16 bits, then it's 64
[18:36:25] <egm> thanks
[18:37:01] *** Quits: nuxil (~nuxil@141.195.51.213) (Remote host closed the connection)
[18:37:05] <caze> egm: Be careful to assign the rgb to the 32 bit type first, and then multiply by 256.
[18:37:09] *** Joins: inlight (~inlight@user/inlight)
[18:37:12] *** Joins: nuxil (~nuxil@141.195.51.213)
[18:37:40] <NRK[m]> ,cc const char *str = "1234"; if (strstr(str, "12") == str) printf("str starts with \"12\"\n");
[18:37:43] <candide> NRK[m]: str starts with "12"
[18:38:22] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[18:38:31] *** Quits: nuxil (~nuxil@141.195.51.213) (Read error: Connection reset by peer)
[18:39:32] <egm> caze: thanks
[18:42:55] *** Joins: damxsa (~damx@2001:16a2:cfed:3100:d614:626b:5937:395b)
[18:43:55] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:44:48] <|smlckz|> caze: what kind of behaviour of _Bool with ++ and -- is specified in standard?
[18:46:06] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[18:46:24] *** Quits: esselfe (~steph@user/esselfe) (Read error: Connection reset by peer)
[18:47:25] <caze> |smlckz|: The one I just demonstrated.
[18:48:17] <|smlckz|> yes, fully defined, implementation defined, undefined.. ?
[18:48:48] <caze> |smlckz|: It's fully defined.
[18:52:41] <caze> |smlckz|: It's not explicitly written though, but it's the only behavior possible when you put together the relevant parts of the specification.
[18:53:03] <caze> |smlckz|: Starting with:
[18:53:10] <caze> ,c11 6.3.1.2p1
[18:53:11] <candide> http://www.iso-9899.info/n1570.html#6.3.1.2p1 [Boolean type] When any scalar value is converted to _Bool, the result is 0 if the value compares equal to 0; otherwise, the result is 1.59) FOOTNOTE.59 NaNs do not compare equal to 0 and thus convert to 1.
[18:53:19] <|smlckz|> please point me to the relevant parts of the specification ;)
[18:54:41] *** Joins: esselfe (~steph@user/esselfe)
[18:56:32] <|smlckz|> hmm so increment always leaves with a non-zero value, decrement might give -1 which is converted back to 1.. is that what's happening?
[18:58:49] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 256 seconds)
[18:59:00] <caze> |smlckz|: Yes, essentially, both postfix and prefix have a paragraph that says, "See the discussions of additive operators... for information on ... conversions."
[18:59:22] <caze> |smlckz|: And if you go to additive operators, there is:
[18:59:41] <caze> ,c11 6.5.6p4
[18:59:42] <candide> http://www.iso-9899.info/n1570.html#6.5.6p4 [Additive operators] If both operands have arithmetic type, the usual arithmetic conversions are performed on them.
[19:00:44] *** Joins: malina (~malina@user/malina)
[19:00:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[19:01:10] <caze> And then from "usual arithmetic conversions", you get to integer promotions, and specifically, 6.3.1.1p2 says, "If an int can represent all the values of the original type... the value is converted to int."
[19:02:15] *** Quits: damxsa (~damx@2001:16a2:cfed:3100:d614:626b:5937:395b) (Quit: Leaving)
[19:02:42] <caze> |smlckz|: So a _Bool with value 0 is promoted to int, and then 1 is subracted, giving you -1. Since -1 "does not compare equal to 0", when it it converted back to _Bool, it gets the value 1.
[19:02:58] *** Joins: mrig (~mrig@user/mrig)
[19:03:52] *** Joins: meator (~meator@user/meator)
[19:04:03] <caze> And if you follow the same flow for a _Bool of value 1, it stays 1.
[19:04:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[19:05:05] <kurahaupo> Strike another reason why applying standard integer promotions to _Bool was a bad idea. Defining postfix ++ and -- as performing test-and-set and test-and-clear respectively would have been much more useful
[19:05:12] *** Joins: Enitin (~Enitin@82.102.22.84)
[19:05:57] <kurahaupo> That is, treat additive operations as range-truncating rather than wrapping
[19:06:32] <caze> They could've just not made it an unsigned integer type.
[19:06:51] <kurahaupo> So 1+1==1, 0-1==0
[19:07:20] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[19:07:45] <kurahaupo> caze: That would be one net effect of defining addition & subtraction as non-wrapping
[19:09:09] *** Joins: duuude (~user@user/duuude)
[19:09:22] <kurahaupo> Or rather, it would be a prerequisite for allowing arithmetic to have a different definition:
[19:10:12] *** Joins: pert (~pert@fsf/member/pert)
[19:11:35] *** Joins: et09 (~et09@user/et09)
[19:12:18] *** Joins: malina (~malina@user/malina)
[19:12:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:12:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:12:51] *** Joins: wroathe (~wroathe@user/wroathe)
[19:13:19] *** Joins: Torr (~Torr@user/torr)
[19:13:47] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[19:14:24] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Read error: Connection reset by peer)
[19:14:35] <caze> Or just keep using int.
[19:15:04] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[19:15:10] <sham1> Or don't try to do arithmetic on something that's clearly a boolean
[19:15:45] *** Joins: kuoi (~kuoi@109.175.166.59)
[19:16:28] *** Quits: acerbic (~acerbic@cs-xdata-50-86-55-250.cspire.com) (Read error: Connection reset by peer)
[19:17:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:17:39] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[19:18:27] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 268 seconds)
[19:21:36] *** Quits: meator (~meator@user/meator) (Ping timeout: 245 seconds)
[19:22:24] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[19:23:01] <caze> Just do b = !b;
[19:23:20] <caze> Too bad there is no != operator.
[19:23:29] *** Joins: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com)
[19:23:34] <sysRPL> hi
[19:23:48] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[19:23:48] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:23:52] <sysRPL> someone local is selling their 46" samsung tv for $25
[19:24:10] <sysRPL> this is the model -> https://www.bhphotovideo.com/c/product/544292-REG/Samsung_LN46A550P3FXZA_LN_46A550_46_1080p.html
[19:28:38] <NRK[m]> caze: there _is_ a != operator though :p
[19:28:47] <caze> NRK[m]: I know.
[19:28:56] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:28:57] *** Quits: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[19:28:59] <NRK[m]> yeah me too
[19:29:32] *** Joins: sysRPN (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com)
[19:29:36] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[19:30:17] *** Joins: stonkey (~stonkey@user/stonkey)
[19:30:41] *** Joins: sebag (~guest@91.245.82.2)
[19:30:47] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) ()
[19:32:07] *** Joins: jusski (~user@88.118.91.237)
[19:33:54] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[19:34:09] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[19:34:10] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:34:16] *** Parts: winning-luser (~wl@2601:8c1:80:70d0::414b) ()
[19:36:49] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[19:37:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:37:04] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:37:04] *** Joins: wroathe (~wroathe@user/wroathe)
[19:42:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[19:43:26] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[19:46:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[19:46:40] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[19:47:12] *** Joins: Enitin (~Enitin@82.102.22.85)
[19:49:21] *** Quits: JarbonFeh (~JarbonFeh@197.15.249.236) (Remote host closed the connection)
[19:49:23] <APic> ,o0(I play the Operator with my Pocket Calculator! 😉)
[19:49:23] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[19:49:32] <APic> candide: ♥
[19:49:32] <candide> No such factoid '♥'; /msg A​Pic \♥ -channel #c: invalid escape sequence: \â¥ at /home/compiler/pbot/bin/../lib/PBot/Core/Commands/Factoids.pm line 1165.
[19:49:38] <APic> Sorry. Will shut up again now.
[19:49:42] *** Joins: JarbonFeh (~JarbonFeh@197.15.249.236)
[19:50:07] *** Quits: duuude (~user@user/duuude) (Ping timeout: 250 seconds)
[19:54:04] *** Joins: Iarfen (~quassel@ec2-3-225-168-229.compute-1.amazonaws.com)
[19:54:12] *** Quits: mrig (~mrig@user/mrig) (Remote host closed the connection)
[19:54:25] *** Joins: mrig (~mrig@user/mrig)
[19:55:41] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[19:56:47] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[19:56:50] *** Joins: meator (~meator@user/meator)
[19:58:40] <pragma-> Hmm.
[19:58:52] <pragma-> I should fix that encoding warning.
[20:02:39] *** Quits: terminalpusher (~terminalp@2a01:586:8ebf:1:95d1:de18:2dd9:e4a2) (Remote host closed the connection)
[20:03:14] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[20:04:17] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[20:06:14] *** Joins: magla (~gelignite@55d465a4.access.ecotel.net)
[20:07:07] *** Joins: duuude (~user@user/duuude)
[20:09:02] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 252 seconds)
[20:11:19] <neiluj> Hello! When does your function return a pointer to a structure (initialized with a malloc) or just the structure itself?
[20:11:31] <duuude> how long is C++ standard vs the C one? I am too lazy to find and check for my self
[20:11:57] <EtherNet> neiluj: can't get your question
[20:12:11] <duuude> someone said they are about the same length but I can't believe
[20:12:50] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:13:22] <neiluj> for instance, struct my_struct* f(...) {struct my_struct*s = malloc(..); ... return s; } or struct my_struct f(...) {return my_struct{};}
[20:13:33] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[20:14:00] <fizzie> Without actually opening them, pdfinfo says C11 draft is 700 pages, C++11 1300+.
[20:14:05] <neiluj> I already did the former, now I was thinking to do the latter since I don't mind where the struct is allocated
[20:14:14] <fizzie> So not quite twice as long, but almost.
[20:14:25] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[20:14:49] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[20:16:26] *** candide sets mode: -o candide
[20:16:52] *** Joins: Teckla (~Teckla@user/teckla)
[20:17:50] <sham1> neiluj: in that case what I'd do is have an out parameter, like so: void /* or int or whatever that you might want to return, maybe an error */ f(..., struct my_struct *s) { *s = ... }
[20:18:51] <neiluj> oh yes, that leaves room for an integer error code
[20:18:54] <neiluj> thanks, sham1
[20:19:25] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:22:57] *** Quits: Iarfen (~quassel@ec2-3-225-168-229.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[20:23:06] <neiluj> sham1: then I guess you have to specify in the documentation if you expect a non null input pointer to the structure
[20:24:36] <sham1> Yes, although it might be obvious in context if the function is explictly for initializing the struct
[20:25:37] <neiluj> indeed, thanks
[20:28:22] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[20:41:22] *** Quits: jusski (~user@88.118.91.237) (Ping timeout: 260 seconds)
[20:43:32] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[20:44:41] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[20:44:56] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[20:45:28] *** Joins: meator (~meator@user/meator)
[20:46:37] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 256 seconds)
[20:48:59] *** Quits: fe23 (~fe23@2409:8a34:464:4990:b118:78f:c21d:a9b3) (Quit: fe23)
[20:49:53] <fizzie> `struct my_struct s[static 1]` if you're feeling funny.
[20:50:01] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[20:50:31] <sham1> I see someone has been looking at clang/llvm
[20:51:01] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[20:51:02] *** Joins: monkey_ (~user@190.104.116.153)
[20:51:09] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 256 seconds)
[20:51:22] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[20:51:54] <ioxzev1z> neiluj, if your struct holds 1M of data you might want to return a pointer to avoid the copies
[20:52:06] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[20:52:31] <ioxzev1z> ,static
[20:52:31] <candide> static is used if the function/variable should be limited to one source file, at translation unit scope; variables of this storage class are initialised to zero; variables of this storage class which are declared in functions maintain their value between calls to the function
[20:52:37] <ioxzev1z> ,static 1
[20:52:46] <ioxzev1z> ,[static 1]
[20:53:16] <ioxzev1z> fizzie, where in the C standard is static 1 described?
[20:53:30] *** Joins: Guest88 (~Guest88@dyx0pyyh22tn8v8mxlq-t-3.rev.dnainternet.fi)
[20:53:34] <fizzie> ,c11 6.7.6.3p7
[20:53:36] <candide> http://www.iso-9899.info/n1570.html#6.7.6.3p7 [Function declarators (including prototypes)] A declaration of a parameter as ``array of type'' shall be adjusted to ``qualified pointer to type'', where the type qualifiers (if any) are those specified within the [ and ] of the array type derivation. If the keyword static also appears within the [ and ] of the array type derivation, then for each call to the ... <truncated; https://0x0.st/os_9.txt>
[20:53:46] *** Joins: jusski (~user@88.118.91.237)
[20:53:46] <fizzie> The part that gets truncated, specifically.
[20:53:57] <ioxzev1z> Thanks
[20:54:03] *** Joins: slidercrank (~slidercra@user/slidercrank)
[20:57:14] *** Joins: moog (~moog@107.126.53.61)
[20:59:23] *** Quits: Guest88 (~Guest88@dyx0pyyh22tn8v8mxlq-t-3.rev.dnainternet.fi) (Quit: Client closed)
[20:59:58] *** Joins: mnemonic (~semeion@user/semeion)
[21:01:18] *** Joins: WAR10CK (~WAR10CK@14.223.181.120)
[21:01:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[21:03:53] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:05:01] *** Quits: JarbonFeh (~JarbonFeh@197.15.249.236) (Read error: Connection reset by peer)
[21:07:38] <ioxzev1z> I actually need an example of that explanation
[21:08:50] *** Joins: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net)
[21:09:12] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[21:09:26] *** Parts: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) ()
[21:09:36] <fizzie> `void f(int p[static 1]) { ... }` means you as the programmer are guaranteeing that for every call to the function `f`, the pointer `p` given as an argument provides access to at least 1 or more `int` objects. Or in other words, is not null. But of course it doesn't _have_ to be 1, it could be some larger number.
[21:09:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:09:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:09:56] *** Joins: wroathe (~wroathe@user/wroathe)
[21:10:08] *** Joins: Klinda (~superleag@user/klinda)
[21:10:21] <ioxzev1z> Ah, so you can skip the if p != NULL check in the function?
[21:10:59] *** Quits: Klinda (~superleag@user/klinda) (Client Quit)
[21:11:21] *** OverCoder is now known as UnderCoder
[21:11:22] <fizzie> Or the compiler might remove any `p != NULL` checks, since you've told it the pointer is never null. It'd be undefined behavior if you then did in fact actually call `f` with a null pointer.
[21:11:34] <ioxzev1z> Ah, thanks
[21:12:04] *** Joins: ferdna (~ferdna@user/ferdna)
[21:14:53] *** Joins: dudebbn (~dudebbn@cpe-174-97-16-77.cinci.res.rr.com)
[21:16:44] <fizzie> ,sh echo 'int f(int p[static 1]) { if (!p) return -1; return *p; }' | clang -x c - -o - -S -O2 -fno-verbose-asm | sed -e '/^[ \t]*[.#]/d'  # clang does that
[21:16:46] <candide> fizzie: f: 	movl	(%rdi), %eax 	retq
[21:17:50] *** Joins: JarbonFeh (~JarbonFeh@197.15.249.236)
[21:18:05] *** Quits: baltazar (~baltazar@85-238-65-123.pool.digikabel.hu) (Ping timeout: 268 seconds)
[21:19:17] <sham1> ,sh echo 'int f(int p[static 1]) { if (!p) return -1; return *p; }' | gcc -x c - -o - -S -O2 -fno-verbose-asm | sed -e '/^[ \t]*[.#]/d'
[21:19:19] <candide> sham1: f: 	testq	%rdi, %rdi 	je	.L3 	movl	(%rdi), %eax 	ret 	movl	$-1, %eax 	ret
[21:19:19] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 268 seconds)
[21:19:20] *** Joins: baltazar (~baltazar@84-236-61-122.pool.digikabel.hu)
[21:19:25] <sham1> Hm, GCC doesn't do that
[21:20:19] <fizzie> Yeah, I don't think I've gotten GCC to generate different code for `[static N]`, though it does use it for extra warnings.
[21:20:38] <pert> ,sh gcc --version # I wonder what version it is; I think GCC 11 had some pertinent changes
[21:20:39] <candide> pert: gcc (GCC) 11.2.1 20210728 (R​ed Hat 11.2.1-1) Copyright (C) 2021 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
[21:20:52] *** Joins: teut (~teut@2401:4900:1c68:4942:fd32:de7a:2e8b:a50a)
[21:20:59] <teut> https://godbolt.org/z/rfo8W7TdW  how to make this code work?
[21:21:01] <fizzie> ,cc int f(int p[static 1]) { if (!p) return -1; return *p; } f(0); // for example, this warning
[21:21:04] <candide> fizzie: [warning: argument 1 to 'int[static 4]' is null where non-null expected [-Wnonnull]  note: in a call to function 'f']  Success (no output).
[21:21:27] <fizzie> (Also, `static 4`? That's not what I said.)
[21:21:31] *** Joins: Burgundy (~yomon@79.115.213.171)
[21:21:43] <sham1> teut: you want to use a proper pointer type
[21:22:08] <fizzie> ,cc long f(long p[static 1]) { if (!p) return -1; return *p; } f(0); // just checking
[21:22:11] <candide> fizzie: [warning: argument 1 to 'long int[static 8]' is null where non-null expected [-Wnonnull]  note: in a call to function 'f']  Success (no output).
[21:22:29] <fizzie> Guessing whoever wrote the warning forgot a size field is being tracked in bytes or something.
[21:22:42] <sham1> teut: something like "void (*ptr)(int [], int) = &sum;"
[21:22:42] *** Quits: myon98 (~myon98@user/myon98) (Ping timeout: 250 seconds)
[21:22:44] *** Joins: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca)
[21:23:47] <teut> https://godbolt.org/z/5W8PYbzas
[21:23:51] <fizzie> And add a 0 at the end of that array, the function expects it.
[21:24:07] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[21:24:08] <teut> the result doesnt  look like correct
[21:24:22] <fizzie> Yes, because there's no 0 at the end of the array.
[21:24:24] <sham1> Also yeah, what fizzie said
[21:24:51] <sham1> What I don't get is why one would use '\0' there. It works, but semantically that tells me that you're trying to do stuff with characters but in this case that's not happening
[21:25:51] <fizzie> Yeah, I was going to suggest `nums[i] != 0` too. Of course there's no difference between 0 and '\0' to the compiler, but there is to a human reader.
[21:27:32] <teut> oh so fizzie was talking to  me, I didnt realize it
[21:29:39] <teut>     int nums[] = {1, 2, 3, 4, '\0'};
[21:29:39] <teut>   like this?
[21:29:52] <fizzie> Or just {1, 2, 3, 4, 0}.
[21:29:53] <sham1> Or just int nums[] = {1, 2, 3, 4, 0};
[21:30:14] *** Joins: rgrinberg (~textual@2806:101e:7:33a5:94b6:4a60:d424:26d4)
[21:30:15] *** Joins: Akiva (~Akiva@user/Akiva)
[21:30:16] <fizzie> They are `int`s, and using '\0' makes it look like something more special than a plain old 0 is going on.
[21:30:19] <teut> ya but 0 would be a good choice for null chararcyer
[21:30:27] <teut> t*
[21:30:36] <fizzie> There's no difference between 0 and '\0', they're both just integer constants with the value 0.
[21:30:39] *** Quits: cart_man (~rynot@host-78-144-125-216.as13285.net) (Quit: Konversation terminated!)
[21:30:47] <sham1> The other values aren't characters, why would the sentinel be
[21:30:50] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:203e:45d6:8d1a:1058) (Ping timeout: 260 seconds)
[21:31:17] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[21:31:32] <fizzie> It's an element of an array of `int`s, so it's going to be an int no matter what. Writing it as '\0' just makes it look more confusing.
[21:31:48] <teut> I meant 0 is not a good choice *
[21:32:16] *** Joins: Satin (uid193953@user/Seten)
[21:32:16] <fizzie> Well, that depends on context. It's not a good choice if 0 is a valid value too, sure.
[21:32:18] <teut> ya thats true too
[21:32:18] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-140.cspire.com)
[21:32:40] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:d365:2d3d:255:f608)
[21:33:16] <teut> so how to compute the length of the array if it has 0 in it?
[21:33:35] <sham1> sizeof(nums)/sizeof(*nums)
[21:33:37] <fizzie> -1 and INT_MIN are probably the two other "typical" sentinel values for a list of ints. (The first one of course only for lists of nonnegative numbers.)
[21:34:05] <fizzie> In the function, it's just a pointer, so `sizeof` won't be useful.
[21:34:20] <sham1> Well that's why functions usually want you to pass the array length
[21:34:37] <sham1> Unless it is something like a string where you indeed have a sentinel value
[21:34:45] <teut> ohhh, I completely  forgot how sizeof technique
[21:34:52] <teut> forgot about*
[21:35:08] <sham1> Indeed, I'd even call it idiomatic to pass the array and its length
[21:35:09] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[21:35:26] <teut> understood now,  thanks
[21:35:27] <sham1> Maybe in the order of length and then the array itself because of the stuff said in the C11 spec or whatever
[21:35:58] <teut> is there anything else to know about pointer to a function ?
[21:38:01] *** Quits: dlx (~tom@05432be4.skybroadband.com) (Ping timeout: 250 seconds)
[21:39:14] <fizzie> The first three things that come to mind are; (a) `void *` isn't necessarily able to represent pointers to functions; (b) a pointer to a function can be converted to any other pointer to a function, as long as you convert it back before using, so an arbitrary type like `void (*)(void)` can work for storing any function pointers; and (c) I forgot it while I was writing up (a) and (b).
[21:40:03] <fizzie> Oh, I think it was probably something along the lines of the syntax for a function that returns a pointer to a function being pretty terrible.
[21:41:06] <sham1> Can't do recursive function pointers
[21:44:33] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[21:46:01] <ioxzev1z> teut, '\0' is only useful for char arrays where the string contained inside is terminated with '\0'. You don't need to terminate an int array with '\0'
[21:46:16] *** Joins: Betal (~Betal@user/betal)
[21:46:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:46:19] <ioxzev1z> In fact you don't need to terminate a char array with '\0' either if you are not using functions that depend on that terminator
[21:46:51] <teut> ya but then how do I count number of 0's in an array?
[21:47:03] <ioxzev1z> char c[4] = { 'a', 'b', 'c', 'd' }; is perfectly valid without '\0', but that code will not work with something that requires '\0' at the end
[21:47:14] <fizzie> The example code here involved a function that expected a 0-terminated array of ints.
[21:47:25] <ioxzev1z> fizzie, ah, didn't read that far up
[21:47:36] <ioxzev1z> Or down, actually
[21:47:45] <fizzie> (I do agree that passing a length is probably more typical.)
[21:48:56] <teut> ya, passing length, I completely keep forgetting it
[21:49:22] <teut> was using c++ , python , and it just doesnt strike the head
[21:50:05] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[21:50:20] <sham1> Well in C++ you also have to pass the length, it's just passed via the template parameter :P
[21:50:31] <sham1> And implicitly by the array type
[21:51:26] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[21:52:54] *** Quits: fstd (~fstd@xdsl-78-35-82-60.nc.de) (Read error: Connection reset by peer)
[21:53:02] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[21:53:04] *** Joins: fstd (~fstd@xdsl-78-35-82-60.nc.de)
[21:54:03] *** Joins: NEYi (~NEYi@109.251.216.38)
[21:54:57] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[21:55:51] *** Joins: AmR (~AmREiSa@156.199.20.227)
[21:56:02] *** Joins: Burgundy (~yomon@79.115.213.171)
[21:57:00] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[21:57:19] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::6)
[21:58:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:58:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:58:30] *** Joins: wroathe (~wroathe@user/wroathe)
[22:00:11] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:00:11] *** Joins: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[22:00:58] <teut> sham1, in c++  most people use vectors
[22:01:38] *** Quits: jusski (~user@88.118.91.237) (Ping timeout: 260 seconds)
[22:01:50] <sham1> Depends on what they are doing. After all, constructing a vector and allocating it is expensive if you know the array length at compile time and know it won't change
[22:02:43] <teut> there is vector.reserve() which confines its capacity
[22:02:54] <sham1> I know
[22:03:14] <sham1> That's still done at runtime
[22:03:15] *** Joins: yomon (~yomon@79.115.213.171)
[22:03:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[22:03:57] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[22:07:00] <teut> I didnt know that
[22:07:31] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[22:07:54] <teut> nice, I came here to learn c, also learned something in c++
[22:07:58] <teut> thanks
[22:08:59] <sham1> Using std::vector is like malloc'ing a new buffer, and then occasionally realloc'ing it to make more room. reserve just tells the implementation "get as much space as you think is necessary to hold this number of elements" i.e. you'd realloc enough stuff into your array that you don't need to do a new allocation later when inserting items
[22:10:18] <sham1> To do the C comparison, std::array is like just doing a C array like `int arr[]` except the type information of the std::array also contains the capacity via the template stuff. Meanwhile in C you pass it by yourself, idiomatically something like void func(size_t arr_len, int arr[arr_len]) or so
[22:11:57] <johnjaye> ah yes. the standard c paradigm of func(array,length of array)
[22:12:19] <johnjaye> at some point it's probably easier to just wrap it in a struct with its length
[22:12:34] <sham1> IIRC one of the C11 rationales said that going forward they might just do it the way of func(length_of_array, array) because it integrates better with VLAs
[22:12:46] <johnjaye> vla?
[22:12:53] <sham1> Variable-length array
[22:12:54] <johnjaye> very large arithmetic?
[22:13:08] <NRK[m]> but c11 made VLA optional
[22:13:10] <johnjaye> yeah i was thinking something like that. in memory you probably want the length first for that reason
[22:13:11] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:13:39] <johnjaye> someone linked to the plan9 document archive earlier
[22:14:22] <johnjaye> there's a funny page about how to program from rob pike. in it he says to never have includes doing the ifndef guard and OO is basically just function pointer management
[22:14:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:14:38] <johnjaye> meaning you can get 90% of the benefit of OO by just managing the pointers yourself
[22:14:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:16:07] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:17:49] *** Joins: tiotags (~tiotags@user/tiotags)
[22:21:04] <teut> ya , thanks, I read about that vector uses an array for implementation and creates an array of 2x size whenever it exceeds capacity
[22:21:09] *** Joins: smoke (~smoke@user/smoke)
[22:23:00] <johnjaye> what is a "linear" switch?
[22:23:04] <johnjaye> i see this term being used a bit
[22:23:13] <johnjaye> is that just normal keyboard keys?
[22:24:30] <johnjaye> Kalih Silver Speed has the "shortest actuation point" according to this site
[22:24:49] * johnjaye didn't realize the graph of a key's force curve over time mattered
[22:25:30] <johnjaye> ah my bad.
[22:25:35] <johnjaye> wrong chanel. lol
[22:26:31] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[22:27:25] *** Quits: Phil-Work (~phil@62.3.100.20) (Remote host closed the connection)
[22:29:44] *** Quits: JarbonFeh (~JarbonFeh@197.15.249.236) (Remote host closed the connection)
[22:32:02] *** Joins: dlx (~tom@05432be4.skybroadband.com)
[22:32:25] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[22:32:35] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[22:32:44] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:213b:87ea:ae62:6dd4)
[22:35:15] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[22:36:13] *** Joins: jimboj1m (~jimboj1m@static-71-166-63-68.bltmmd.fios.verizon.net)
[22:36:35] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[22:36:51] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:37:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:37:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:37:32] *** Joins: wroathe (~wroathe@user/wroathe)
[22:45:00] *** Quits: rgrinberg (~textual@2806:101e:7:33a5:94b6:4a60:d424:26d4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:45:01] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[22:45:28] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-140.cspire.com) (Read error: Connection reset by peer)
[22:46:03] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[22:46:22] *** Joins: cursey (~cursey@user/cursey)
[22:48:26] *** Joins: rsjw (~quassel@user/rsjw)
[22:49:20] *** Joins: pulse (~pulse@user/pulse)
[22:51:49] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 268 seconds)
[22:54:03] *** Quits: kts (~kts@103.73.237.150) (Quit: Konversation terminated!)
[22:55:41] *** Joins: ethrl (~ethereal@user/doforlove33)
[22:57:15] *** Joins: rgrinberg (~textual@2806:101e:7:b2bc:b9e9:b5b0:1484:bd77)
[22:59:26] *** Quits: rgrinberg (~textual@2806:101e:7:b2bc:b9e9:b5b0:1484:bd77) (Client Quit)
[22:59:57] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[23:01:00] *** Joins: rgrinberg (~textual@2806:101e:7:b2bc:b9e9:b5b0:1484:bd77)
[23:02:07] *** Quits: rgrinberg (~textual@2806:101e:7:b2bc:b9e9:b5b0:1484:bd77) (Client Quit)
[23:02:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[23:03:38] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-140.cspire.com)
[23:03:42] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Read error: Connection reset by peer)
[23:04:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:04:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:04:16] *** Joins: wroathe (~wroathe@user/wroathe)
[23:04:25] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[23:05:25] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[23:09:40] *** Joins: whatshisface (~jon@catv-178-48-246-132.catv.broadband.hu)
[23:11:23] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:213b:87ea:ae62:6dd4) (Quit: Leaving)
[23:13:38] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[23:14:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[23:18:02] *** Quits: ethrl (~ethereal@user/doforlove33) (Remote host closed the connection)
[23:20:48] *** Joins: meator (~meator@user/meator)
[23:25:57] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:492a:4f1b:6342:37fe)
[23:27:30] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 260 seconds)
[23:28:24] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:28:24] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:28:24] *** Joins: wroathe (~wroathe@user/wroathe)
[23:31:35] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[23:32:16] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::6) (Quit: Leaving)
[23:34:04] *** Quits: magla (~gelignite@55d465a4.access.ecotel.net) (Quit: Stay safe!)
[23:39:53] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-140.cspire.com) (Read error: Connection reset by peer)
[23:42:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[23:44:56] *** Quits: dlx (~tom@05432be4.skybroadband.com) (Ping timeout: 245 seconds)
[23:45:37] *** Joins: mnemonic (~semeion@user/semeion)
[23:48:02] *** Joins: Charadon (~Charadon@155.138.164.183)
[23:53:36] *** Joins: semeion (~semeion@user/semeion)
[23:53:36] *** mnemonic is now known as Guest7561
[23:53:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:53:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:53:40] *** Joins: wroathe (~wroathe@user/wroathe)
[23:53:48] *** Joins: dlx (~tom@05432be4.skybroadband.com)
[23:54:37] *** Quits: Guest7561 (~semeion@user/semeion) (Ping timeout: 240 seconds)
[23:55:20] *** Joins: the_lanetly_052_ (~the_lanet@194.135.166.92)
[23:57:17] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.239) (Ping timeout: 252 seconds)
[23:57:23] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:58:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:492a:4f1b:6342:37fe) (Quit: Quit)
