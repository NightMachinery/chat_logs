[00:12:44] <FromDiscord> <tandy> the vfio one?â†µ(<@709044657232936960_=41mun-=52a=5b=49=52=43=5d>)
[00:13:04] <FromDiscord> <tandy> isnt this missing a bunch of talks?â†µ(<@709044657232936960_=4eim=45venter=5b=49=52=43=5d>)
[00:16:20] <Amun-Ra> concurrency one
[00:16:45] <Amun-Ra> oh, it's online now
[00:17:40] *** Joins: xiamx (~xiamx@2001:470:69fc:105::1:5692)
[00:47:50] <FromDiscord> <Evrensel KiÅŸilik> Unity made me crazy
[00:48:00] <FromDiscord> <Evrensel KiÅŸilik> im making the game from stratch with Godot
[00:48:08] <FromDiscord> <Evrensel KiÅŸilik> Unity is broken and buggy
[00:48:21] <FromDiscord> <Evrensel KiÅŸilik> Netcode doesn't support WebSocket
[00:48:42] <FromDiscord> <Evrensel KiÅŸilik> community's WebSocket thing is not usable for WebGL exports
[00:48:58] <FromDiscord> <Evrensel KiÅŸilik> Unity's HTML5 export support is broken
[00:49:19] <FromDiscord> <Evrensel KiÅŸilik> Godot is 10000000000000000000000x better for everything
[00:59:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[01:05:23] *** Quits: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1) (Write error: Connection reset by peer)
[01:05:24] *** Quits: cheer[m] (~cheertchn@2001:470:69fc:105::39de) (Read error: Connection reset by peer)
[01:05:25] *** Quits: xiamx (~xiamx@2001:470:69fc:105::1:5692) (Read error: Connection reset by peer)
[01:08:39] *** Joins: cheer[m] (~cheertchn@2001:470:69fc:105::39de)
[01:39:11] <anddam> how many times better?
[01:39:18] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[01:39:18] *** Joins: xiamx (~xiamx@2001:470:69fc:105::1:5692)
[01:39:18] *** Joins: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1)
[01:40:59] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[01:52:34] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[02:16:48] *** Joins: vicfred (~vicfred@user/vicfred)
[02:23:42] <FromDiscord> <Yepoleb> About twice as good
[02:26:23] <anddam> Yepoleb: are you from Discord?
[02:26:52] <FromDiscord> <Yepoleb> I am using discord
[02:27:05] <anddam> good so the nick-renamer-plugin thingy works
[02:27:41] <anddam> https://i.ibb.co/VgrgHW2/2022-02-07-235713-465x103-scrot.png
[02:27:58] <anddam> back to the nimgl topic
[02:47:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[02:50:40] <FromDiscord> <Evrensel KiÅŸilik> In reply to @anddam "how many times better?": sooooooooooooooooooooooooooooooooooooooooooooooooo many times
[02:51:10] <FromDiscord> <Evrensel KiÅŸilik> i saw some games written in Nim with Godot
[02:51:22] <FromDiscord> <Evrensel KiÅŸilik> does it worth for performance?
[02:52:07] <FromDiscord> <Elegantbeef> Well it's native code so it'd be better than gdscript for performance
[02:52:28] <FromDiscord> <Evrensel KiÅŸilik> In reply to @Elegantbeef "Well it's native code": sooooooooooooooooooooooooooooooooooooo
[02:52:32] <FromDiscord> <Evrensel KiÅŸilik> i know but
[02:52:41] <FromDiscord> <Evrensel KiÅŸilik> GDScript is already very fast
[02:52:55] <FromDiscord> <Elegantbeef> Sure but gdscript doesnt have many features that nim has ðŸ˜œ
[02:52:56] <FromDiscord> <Evrensel KiÅŸilik> how is Nim debugging with Godot?
[02:53:11] <FromDiscord> <Elegantbeef> No clue
[02:53:28] <FromDiscord> <Evrensel KiÅŸilik> im waiting for my new keyboard's shipment
[02:53:40] <FromDiscord> <Evrensel KiÅŸilik> damn keyboard is still in China
[02:55:25] <FromDiscord> <Evrensel KiÅŸilik> https://cdn.shopify.com/s/files/1/0012/4957/4961/files/61_Keys_Compact_Mechanical_Keyboard_wWhite_and_Pink_Color_Keycaps.jpg?v=1631087168
[02:55:28] <FromDiscord> <Evrensel KiÅŸilik> this
[03:05:28] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 250 seconds)
[03:09:40] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:57:08] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 252 seconds)
[04:14:17] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:31:39] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:40:57] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[04:48:11] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[04:57:25] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[04:58:40] <FromDiscord> <Arathanis> @ElegantBeef thanks for pointing me in that direction, its helped a lot. If you have some time tonight ( and I find the time) i was wondering if you could walk me through some of the finer points of how all this fits together.â†µâ†µAlso I don't know if you saw my previous message, but I believe you need to add `netty` as a requirement in nettyrpc's deps!
[04:58:51] <FromDiscord> <Evrensel KiÅŸilik> sooooooooo
[04:59:11] <FromDiscord> <Evrensel KiÅŸilik> is Nim bindings for Godot stable and full-featured?
[04:59:15] <FromDiscord> <Elegantbeef> Lol did i not have netty as a dep ðŸ˜€â†µ(@Arathanis)
[04:59:24] <FromDiscord> <Elegantbeef> How the fuck did i manage to do that ðŸ˜€
[04:59:55] <FromDiscord> <Arathanis> its easy, nimble doesn't add them automatically
[05:00:00] <FromDiscord> <Arathanis> i struggle with it too
[05:00:07] <FromDiscord> <Elegantbeef> Nah that's not my point
[05:00:14] <FromDiscord> <Elegantbeef> I somehow didnt run into any compilation issues
[05:00:55] <FromDiscord> <Arathanis> oh, well it should work fine if netty is installed with nimble, since nimble access your global environment you wont see any areas. Its if you take a clean nim environment and do `nimble install` that you are in trouble
[05:01:10] <FromDiscord> <Elegantbeef> you're telling me things i know
[05:01:27] <FromDiscord> <Arathanis> i dont doubt it, but I am reinforcing my own knowledge by repeating it. it helps me
[05:01:34] <FromDiscord> <Elegantbeef> Ah
[05:01:51] <FromDiscord> <Arathanis> also you mentioned not having compilation issues so i was seeking to explain since I assumed that meant you were at least partially confused. I mean no disrespect
[05:02:27] <FromDiscord> <Arathanis> you clearly have a stronger grasp on nim than I do :P
[05:02:35] <FromDiscord> <Elegantbeef> It's no problem just my behaviour ðŸ˜›
[05:04:04] <FromDiscord> <Elegantbeef> Hey my pong still works!
[05:04:13] <FromDiscord> <Elegantbeef> Well thanks for that
[05:04:43] <FromDiscord> <Elegantbeef> So you had questions?
[05:04:52] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:04:53] <FromDiscord> <Evrensel KiÅŸilik> @ElegantBeef
[05:04:56] <FromDiscord> <Evrensel KiÅŸilik> hewwoooo
[05:05:09] <FromDiscord> <Evrensel KiÅŸilik> :meat:
[05:05:14] <FromDiscord> <Evrensel KiÅŸilik> beeeeeeeeeef
[05:05:16] <FromDiscord> <Elegantbeef> Hello
[05:05:21] <FromDiscord> <Evrensel KiÅŸilik> soooooooooooooooooooooooooooooooooooooooooooooooooooo
[05:05:45] <FromDiscord> <Evrensel KiÅŸilik> is Nim bindings mature enough?
[05:06:02] <FromDiscord> <Elegantbeef> I mean people have used them to make games
[05:06:11] <FromDiscord> <Elegantbeef> I've toyed with them a bit I havent used them much
[05:06:21] <FromDiscord> <Evrensel KiÅŸilik> people are using Unity tooooooo ðŸ˜±
[05:06:24] <FromDiscord> <Elegantbeef> They seem to work although are underdocumented
[05:06:36] <FromDiscord> <Evrensel KiÅŸilik> oh
[05:06:43] <FromDiscord> <Evrensel KiÅŸilik> thank you
[05:11:52] <FromDiscord> <Elegantbeef> @Arathanis\: did you dieded? ðŸ˜›
[05:14:58] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[05:16:10] <FromDiscord> <Arathanis> In reply to @Elegantbeef "<@136570191038513152>\: did you dieded?": nope!
[05:16:11] <FromDiscord> <Arathanis> still around
[05:16:17] <FromDiscord> <Arathanis> oh sorry
[05:16:23] <FromDiscord> <Arathanis> your query about questions was for me hjaha
[05:16:26] <FromDiscord> <Arathanis> (edit) "hjaha" => "haha"
[05:17:07] <FromDiscord> <Arathanis> im just trying to parse all the specifics of how the macro works, especially how it can be applied to a ensuring the type of a proc is appropriate for loading into the handler sequence
[05:17:39] <FromDiscord> <Arathanis> i noticed you have a proc for creating a list of parameter names and a mapping of names to types
[05:19:02] <FromDiscord> <Elegantbeef> Ok so you want a compile time error if you attempt to load the wrong proc?
[05:19:16] <FromDiscord> <Elegantbeef> Do you by any chance have the macro i gave you yesterday?
[05:20:38] <Amun-Ra> hmm, is there a doNotOptimizeOutThisCode pragma in nim?
[05:21:03] <FromDiscord> <Elegantbeef> Not that i know of
[05:21:08] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:22:11] <FromDiscord> <Rika> Technically exportc in some way lol
[05:24:44] <Amun-Ra> the other (non portable way) is importc: "memset_s"
[05:26:47] <Amun-Ra> (I need to make sure I zero sensitive data at the end of a main)
[05:27:25] <FromDiscord> <Elegantbeef> Use orc and a destructor?
[05:28:22] <Amun-Ra> hmm
[05:28:36] <Amun-Ra> good idea
[05:28:52] <FromDiscord> <Elegantbeef> I have them occasionally
[05:29:34] <Amun-Ra> ;)
[05:30:56] <Amun-Ra> "/dev/null".writeFile buf
[05:30:58] <Amun-Ra> ;)
[05:31:06] <FromDiscord> <Evrensel KiÅŸilik> ðŸ˜±
[05:31:10] <FromDiscord> <Evrensel KiÅŸilik> nooooo ()
[05:31:13] <FromDiscord> <Evrensel KiÅŸilik> oh nooo
[05:31:31] <FromDiscord> <Evrensel KiÅŸilik> it is terrible for code search
[05:31:59] <Amun-Ra> what do you mean?
[05:32:29] <Amun-Ra> the joke code as a whole or the order of args?
[05:33:04] <FromDiscord> <Evrensel KiÅŸilik> i meaaaan
[05:33:20] <FromDiscord> <Evrensel KiÅŸilik> im finding codes by searching patterns like `foo(`
[05:33:40] <FromDiscord> <Rika> Lol
[05:33:42] <FromDiscord> <Rika> Have fun
[05:33:44] <Amun-Ra> :>
[05:34:03] <FromDiscord> <Rika> Youâ€™re gonna have to account for MCS and style insensitivity I gues
[05:34:13] <Amun-Ra> I usually write (if it's doable): writeFile "arg1", arg2
[05:35:38] <FromDiscord> <Elegantbeef> Depends on the procedure name but yea
[05:38:48] <FromDiscord> <Evrensel KiÅŸilik> ðŸ˜±
[05:38:51] <FromDiscord> <Evrensel KiÅŸilik> oh nooooooooooooo
[05:38:59] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3OZE
[05:39:00] <Amun-Ra> I'm team snake case and I would write write_file but there's no such option in vim and vscode plugins
[05:39:01] <FromDiscord> <Evrensel KiÅŸilik> you are razy
[05:39:05] <FromDiscord> <Elegantbeef> There you go arathanis ðŸ˜›
[05:39:13] <FromDiscord> <Arathanis> In reply to @Elegantbeef "Ok so you want": pretty much, I want to pass in a proc to be a handler and get a compile time error if its function signature doesn't match, and at least stitch the function signature up so you can omit params you dont need but it will be patched into the function to ensure it type matches the handler sequence
[05:39:25] <FromDiscord> <Arathanis> sorry i had to step away
[05:39:34] <FromDiscord> <Arathanis> dog caught a mouse, had to clean up the aftermath >_>;;
[05:39:43] <FromDiscord> <Elegantbeef> My dogs would probably run away
[05:39:53] <FromDiscord> <Arathanis> haha
[05:40:05] <FromDiscord> <Elegantbeef> Well you can do the patching inside that if branch now
[05:40:19] <FromDiscord> <Elegantbeef> Hopefully it makes sense you can do `pdef[3]` or `allowedImpl[3]` to get the parameters
[05:40:22] <FromDiscord> <Elegantbeef> first one is the return type
[05:40:35] <FromDiscord> <Elegantbeef> If you havent played with macros before it might be confusing but i do have a basic writeup to explain tooling to make it easier
[05:40:46] <FromDiscord> <Arathanis> ohhhh a writeup would be very useful
[05:41:01] <FromDiscord> <Arathanis> I wish the nim nodes used named parameters instead of numerical indexes
[05:41:05] <FromDiscord> <Elegantbeef> I need to expand it more for typed macros but it atleast explains the basic API https://dev.to/beef331/demystification-of-macros-in-nim-13n8
[05:41:05] <FromDiscord> <Arathanis> it would make code a lot more readable
[05:41:21] <FromDiscord> <Elegantbeef> For procedures you can do `.name` `.params` and a few other i think
[05:41:23] <FromDiscord> <Rika> In reply to @Arathanis "I wish the nim": There are third party libraries that do this
[05:41:27] <FromDiscord> <Elegantbeef> But you need to know it's a procedure node
[05:41:49] <FromDiscord> <Elegantbeef> Personally I wish NimNodes were 100% distinct, each node was it's own Node type
[05:42:09] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:42:09] <FromDiscord> <Arathanis> In reply to @Rika "There are third party": i figured this would exist, shame it isn't the standard
[05:42:13] <FromDiscord> <Elegantbeef> I know there are some packages that have started with that
[05:42:23] <FromDiscord> <Rika> In reply to @Elegantbeef "Personally I wish NimNodes": Not feasible
[05:48:42] <FromDiscord> <Arathanis> In reply to @Elegantbeef "I need to expand": this is pretty great
[05:49:12] <FromDiscord> <Elegantbeef> When ever i see a response like that i expect a "but...."
[05:49:19] <FromDiscord> <Arathanis> not this time
[05:49:44] <FromDiscord> <Arathanis> now im just tossing the specifics around in my hea
[05:49:45] <FromDiscord> <Arathanis> (edit) "hea" => "head"
[05:51:30] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3OZH
[05:52:23] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3OZI
[05:52:38] <FromDiscord> <Elegantbeef> Yep
[05:53:28] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3OZL
[05:53:45] <FromDiscord> <Arathanis> rather than `s`
[05:54:11] <FromDiscord> <Arathanis> I suppose the easiest way would be to based it entirely on the type, and not the name and just make sure the parameter order is always the same
[05:54:21] <FromDiscord> <Elegantbeef> I mean any parameter they didnt define is `_: TheType`
[05:54:21] <FromDiscord> <Elegantbeef> They cannot use it internally if they didnt define it
[05:55:31] <FromDiscord> <Arathanis> your article helped me understand the real value of dumpTree
[05:55:42] <FromDiscord> <Arathanis> apply it to the result you want -> see your goal
[05:55:49] <FromDiscord> <Arathanis> apply it to what you want to type -> see your starting position
[05:56:32] <FromDiscord> <Elegantbeef> Since it has to compile before the macro gets it
[05:56:32] <FromDiscord> <Elegantbeef> since the AST is typed they can only use parameters they supplied
[05:56:53] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[05:57:32] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3OZM
[05:58:13] <FromDiscord> <Elegantbeef> Well you could just have an untyped macro
[05:58:25] <FromDiscord> <Rika> Macros can be pragmas if you still donâ€™t know
[05:58:47] <FromDiscord> <Arathanis> yeah i think that is what ElegantBeef was referring to, we were initally discussing using `{.myMacro.}`
[05:58:55] <FromDiscord> <Rika> What happened then
[05:58:57] <FromDiscord> <Arathanis> but that means the proc has to be semantically valid
[05:59:10] <FromDiscord> <Elegantbeef> No only if it's a typed macro
[05:59:15] <FromDiscord> <Elegantbeef> Untyped macros do not have to be semantically checked
[05:59:23] <FromDiscord> <Arathanis> even when used as a pragma?
[05:59:35] <FromDiscord> <Elegantbeef> Even when used as a pragma
[05:59:48] <FromDiscord> <Arathanis> so the proc could be nonsense and it would be ok? lol that is amazing
[06:00:11] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3OZN
[06:00:17] <FromDiscord> <Elegantbeef> But if it's not semantically checked you dont get types
[06:00:27] <FromDiscord> <Elegantbeef> So that means you have to rely on names being the same
[06:01:15] <FromDiscord> <Elegantbeef> Which means things like type aliases will not work
[06:01:46] <FromDiscord> <Elegantbeef> Personally I'm very much on the "Try to not inject anything that's unclear" now
[06:02:16] <FromDiscord> <Arathanis> that's honestly probably for the best
[06:02:21] <FromDiscord> <Arathanis> explicit is better than implicit kind of thing
[06:02:57] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3OZQ
[06:03:07] <FromDiscord> <Elegantbeef> You know what arguments the procedure wants
[06:03:17] <FromDiscord> <Elegantbeef> So you can see which ones you need to pass and in what order
[06:03:58] <FromDiscord> <Arathanis> ohh turn it into a closure which automatically has the right signature and just introspect how to construct the internal call?
[06:04:06] <FromDiscord> <Arathanis> well
[06:04:06] <FromDiscord> <Elegantbeef> This does add another proc of indirection but it makes it so they can reuse the code without hidden variables
[06:04:07] <FromDiscord> <Arathanis> not a closure
[06:04:08] <FromDiscord> <Elegantbeef> It's not a closure, but yes
[06:04:09] <FromDiscord> <Arathanis> a wrapper
[06:04:16] <FromDiscord> <Elegantbeef> It's just a anonymous proc yes
[06:04:35] <FromDiscord> <Arathanis> i can dig that
[06:04:37] <FromDiscord> <Elegantbeef> It allows the most code reuse without introducing any funky shit
[06:04:42] <FromDiscord> <Arathanis> good advice
[06:05:02] <FromDiscord> <Elegantbeef> Funky shit isnt nice, i've learned that playing with macros ðŸ˜€
[06:05:09] <FromDiscord> <Arathanis> or, and hear me out, i could take the advice of Ruby and Perl devs and make it as obtuse as possible
[06:05:12] <FromDiscord> <Arathanis> :^)
[06:05:52] <FromDiscord> <Elegantbeef> Like you can do cool stuff with macros, but doing anything that introduces hidden things is kinda bad form, I strive to avoid it as much as possible where it makes sense
[06:06:48] <FromDiscord> <Elegantbeef> I find it funny to say given that this was pretty much my first usage of macros
[06:06:50] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/940435978038956093/image.png
[06:07:10] <FromDiscord> <Elegantbeef> Super unintuitive API brought to you by silly ideas
[06:08:11] <FromDiscord> <Elegantbeef> It's now replaced by the following
[06:08:12] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/940436322965946369/image.png
[06:08:31] <FromDiscord> <Elegantbeef> One is vastly more sensible due to not making a new language for something simple ðŸ˜›
[06:08:58] <FromDiscord> <Arathanis> so how am I supposed to know `expectRoutine` exists if its not in the docs for `std/macros` u_u
[06:10:04] <FromDiscord> <Elegantbeef> isnt it `.expect(Routines)`?
[06:10:22] <FromDiscord> <Arathanis>  https://media.discordapp.net/attachments/371759389889003532/940436870205173760/unknown.png
[06:10:41] <FromDiscord> <Elegantbeef> It's not exported
[06:10:45] <FromDiscord> <Elegantbeef> So you arent supposed to know about it
[06:10:51] <FromDiscord> <Evrensel KiÅŸilik> soooooooooo
[06:10:56] <FromDiscord> <Evrensel KiÅŸilik> tell me a reason to use Nim
[06:10:57] <FromDiscord> <Evrensel KiÅŸilik> plsss
[06:11:12] <FromDiscord> <Arathanis> In reply to @Elegantbeef "It's not exported": oh you are right lmao, im deep in the source code following def links
[06:11:17] <FromDiscord> <Arathanis> i followed it from `params`
[06:11:20] <FromDiscord> <Arathanis> which is exported
[06:11:30] <FromDiscord> <Elegantbeef> It's a nice to write language with a bunch of utilities to make pleasurable to write efficient code ðŸ˜€
[06:11:51] <FromDiscord> <Evrensel KiÅŸilik> sooooooooooooooooooo
[06:11:57] <FromDiscord> <Evrensel KiÅŸilik> it is garbage collected
[06:12:05] <FromDiscord> <Arathanis> yes
[06:12:08] <FromDiscord> <Elegantbeef> It has a GC and reference counting like RAII
[06:12:11] <FromDiscord> <Arathanis> but iirc you have full control over the GC
[06:12:12] <FromDiscord> <Evrensel KiÅŸilik> and we can write code like scripting
[06:12:35] <FromDiscord> <Evrensel KiÅŸilik> buuuuuuut we can use pointer arithmetic tooooo right?
[06:12:46] <FromDiscord> <Elegantbeef> It's a system progrraming language
[06:13:00] <FromDiscord> <Evrensel KiÅŸilik> sooooooo is there an OS written in Nim?
[06:13:02] <FromDiscord> <Elegantbeef> It doesnt have pointer arithmetic built in since it prefers type safe things, but yes
[06:13:14] <FromDiscord> <Elegantbeef> https://github.com/dom96/nimkernel
[06:13:41] <FromDiscord> <Evrensel KiÅŸilik> In reply to @Elegantbeef "It doesnt have pointer": i don't like safe coding
[06:13:47] <FromDiscord> <Arathanis> ive been selling it to people by saying its like statically typed python, with the low level power of C or C++ but it puts the footguns behind a few doors that you have to open explicitly instead of just handing them to you
[06:13:58] <FromDiscord> <Evrensel KiÅŸilik> even GDScript is not totally memory safe
[06:14:04] <FromDiscord> <Evrensel KiÅŸilik> it is not garbage collected tooo
[06:14:07] <FromDiscord> <Evrensel KiÅŸilik> ðŸ˜±
[06:14:20] <FromDiscord> <Elegantbeef> Who said memory safe
[06:14:25] <FromDiscord> <Elegantbeef> Typesafety is not memory safety
[06:14:29] <FromDiscord> <Evrensel KiÅŸilik> oh
[06:14:35] <FromDiscord> <Evrensel KiÅŸilik> you meant type safety?
[06:14:52] <FromDiscord> <Arathanis> type safety as in if you say a variable is an integer and assign anything but an integer to it it screams at you
[06:14:57] <FromDiscord> <Arathanis> its strong, statically typed
[06:14:57] <FromDiscord> <Evrensel KiÅŸilik> sooooooo i can't interpret memory with structs in Nim?
[06:15:31] <FromDiscord> <Elegantbeef> Nim differentiates pointers from pointers to an array
[06:15:32] <FromDiscord> <Elegantbeef> `ptr int` is a pointer to a single int `ptr UncheckedArray[int]` is a pointer to an array of ints
[06:15:32] <FromDiscord> <Elegantbeef> You can index the latter the former you cannot
[06:15:32] <FromDiscord> <Elegantbeef> This is similar to what Odin and Zig also do
[06:15:45] <FromDiscord> <Elegantbeef> You can
[06:15:50] <FromDiscord> <Arathanis> In reply to @Evrensel KiÅŸilik "sooooooo i can't interpret": my understanding is that you can, its just the memory unsafe procedures-- the footguns -- are behind doors.â†µâ†µit defaults to safe, you can be unsafe but you have to say you are going to be unsafe
[06:15:56] <FromDiscord> <Elegantbeef> Nim allows you to do the same as you would in any other system language
[06:16:02] <FromDiscord> <Elegantbeef> It just prefers by default to be type safe
[06:16:07] <FromDiscord> <Arathanis> its one of the things i think a lot of people like
[06:16:13] <FromDiscord> <Arathanis> is that you can be super low level and unsafe
[06:16:15] <FromDiscord> <Elegantbeef> There are like 6 unsafe keywords in nim
[06:16:17] <FromDiscord> <Arathanis> but you have to be explicit about it
[06:16:21] <FromDiscord> <Arathanis> and the defaults are safe
[06:16:21] <FromDiscord> <Evrensel KiÅŸilik> soooooooooooo
[06:16:23] <FromDiscord> <Evrensel KiÅŸilik> i like it
[06:16:33] <FromDiscord> <Elegantbeef> `pointer/ptr` `addr` `cast`
[06:16:39] <FromDiscord> <Rika> Nim doesnâ€™t like restricting by design lol
[06:16:40] <FromDiscord> <Evrensel KiÅŸilik> i don't have time to play with Nim now
[06:16:41] <FromDiscord> <Elegantbeef> What else am i missing
[06:16:41] <FromDiscord> <Evrensel KiÅŸilik> buuuuuut
[06:16:44] <FromDiscord> <Elegantbeef> `unsafeaddr`
[06:16:47] <FromDiscord> <Evrensel KiÅŸilik> i will do something
[06:17:01] <FromDiscord> <Elegantbeef> Nim can be used just as you'd use C but with a better typesystem, macros, and CTE
[06:17:16] <FromDiscord> <Elegantbeef> You can do `--gc:none` all day long if you wished
[06:17:32] <FromDiscord> <Elegantbeef> But most people would say do `--gc:arc` and use the RAII inspired memory management
[06:17:36] <FromDiscord> <Evrensel KiÅŸilik> soooooooooooo
[06:17:47] <FromDiscord> <Elegantbeef> Which is based off move semantics and destructors just like..... C++/Rust afaik
[06:17:56] <FromDiscord> <Evrensel KiÅŸilik> i can build some specific things without GC and statically link them right?
[06:17:58] <FromDiscord> <Elegantbeef> Well C++'s smartptr or w/e they're called
[06:18:04] <FromDiscord> <Elegantbeef> Yes
[06:18:07] <FromDiscord> <Rika> Sure
[06:18:09] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:18:16] <FromDiscord> <Evrensel KiÅŸilik> goooooooooooooooooooooooooooooooooooooooooooooooooooood
[06:18:25] <FromDiscord> <Rika> Itâ€™s not very nice looking but itâ€™s possible
[06:18:32] <FromDiscord> <Elegantbeef> Though you could  consider the arc instead since it's deterministic and a bit safer ðŸ˜›
[06:18:36] <FromDiscord> <Evrensel KiÅŸilik> soooooooooooo
[06:18:43] <FromDiscord> <Elegantbeef> Well they're a C lover so not very nice looking is what they like ðŸ˜›
[06:18:52] <FromDiscord> <Evrensel KiÅŸilik> if i don't have anything that needs to be garbage collected
[06:19:12] <FromDiscord> <Evrensel KiÅŸilik> would it affect my code complexity
[06:19:13] <FromDiscord> <Evrensel KiÅŸilik> (edit) "complexity" => "complexity?"
[06:19:18] <FromDiscord> <Rika> Oh thatâ€™s gonna look no different from normal GC on code I believe
[06:19:23] <FromDiscord> <Evrensel KiÅŸilik> i mean compiled code
[06:19:55] <FromDiscord> <Elegantbeef> It may depend on the memory management you use
[06:19:58] <FromDiscord> <Rika> The GC will still initialise if itâ€™s on, but the Nim code should be the same between the two
[06:20:24] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3OZS
[06:20:32] <FromDiscord> <Evrensel KiÅŸilik> oh
[06:20:32] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/mm.html
[06:20:37] <FromDiscord> <Evrensel KiÅŸilik> `ptr` and `ref`
[06:20:41] <FromDiscord> <Evrensel KiÅŸilik> soooooooooooooooooooooooooooooooooo
[06:20:48] <FromDiscord> <Elegantbeef> `ref` is a managed pointer
[06:20:52] <FromDiscord> <Evrensel KiÅŸilik> what is `ref`?
[06:20:54] <FromDiscord> <Elegantbeef> `ptr` is a unmanaged pointer
[06:20:55] <FromDiscord> <Evrensel KiÅŸilik> sooooooooooooo?
[06:20:58] <FromDiscord> <Arathanis> reference
[06:21:03] <FromDiscord> <Arathanis> its like a pointer the GC manages iirc
[06:21:04] <FromDiscord> <Evrensel KiÅŸilik> what is managed?
[06:21:06] <FromDiscord> <Elegantbeef> `ref` is managed by the GC and the "safe" way to do pointers in Nim
[06:21:12] <FromDiscord> <Arathanis> the GC will reference count it
[06:21:22] <FromDiscord> <Evrensel KiÅŸilik> damn
[06:21:22] <FromDiscord> <Elegantbeef> I say GC but more memory manager
[06:21:24] <FromDiscord> <Arathanis> `ptr` is a ref and you are telling the GC to butt out
[06:21:31] <FromDiscord> <Evrensel KiÅŸilik> what will the GC free?
[06:21:39] <FromDiscord> <Elegantbeef> Since people dont like GC when talking about determnistic RCs
[06:21:44] <FromDiscord> <Elegantbeef> Depends on the memory management you use
[06:21:47] <FromDiscord> <Elegantbeef> ARC is a deterministic memory management system
[06:21:58] <FromDiscord> <Arathanis> GC should free any non-ptr memory with no external reference... i think
[06:22:23] <FromDiscord> <Arathanis> pretty sure you can import the gc and turn it off and on during runtime too
[06:22:27] <FromDiscord> <Elegantbeef> ARC decrements the counter at end of scope and it it's 0'd it calls the destructor afaik
[06:22:39] <FromDiscord> <Evrensel KiÅŸilik> sooooooooooo
[06:22:48] <FromDiscord> <Elegantbeef> Refc is deferred reference counter
[06:23:02] <FromDiscord> <Elegantbeef> The link to memory mangement explains the systems
[06:23:19] <FromDiscord> <Evrensel KiÅŸilik> sent a code paste, see https://play.nim-lang.org/#ix=3OZW
[06:23:23] <FromDiscord> <Evrensel KiÅŸilik> what is GC about?
[06:23:48] <FromDiscord> <Rika> ?
[06:23:55] <FromDiscord> <Rika> References cannot be stack pointers
[06:23:55] <FromDiscord> <Elegantbeef> the `ref` is stack allocated since it's a pointer but the `bar` would be heap allocated
[06:24:09] <FromDiscord> <Elegantbeef> `ref T` can only refer to values allocated on the heap
[06:24:22] <FromDiscord> <Evrensel KiÅŸilik> sooooooooooooooooooooooooooooooooo
[06:24:30] <FromDiscord> <Evrensel KiÅŸilik> what will be garbage collected?
[06:24:33] <FromDiscord> <Rika> If you donâ€™t want the GC use ptr
[06:24:38] <FromDiscord> <Rika> All ref is GCed
[06:24:39] <FromDiscord> <Elegantbeef> The heap allocated object
[06:24:50] <FromDiscord> <Evrensel KiÅŸilik> buuuuuuuut refs are stack variables
[06:24:59] <FromDiscord> <Evrensel KiÅŸilik> In reply to @Elegantbeef "The heap allocated object": oh
[06:25:00] <FromDiscord> <Evrensel KiÅŸilik> damn
[06:25:00] <FromDiscord> <Rika> Yes, the data in ref
[06:25:02] <FromDiscord> <Evrensel KiÅŸilik> sooooooooo
[06:25:04] <FromDiscord> <Elegantbeef> The pointer is stack allocated
[06:25:04] <FromDiscord> <Evrensel KiÅŸilik> you mean
[06:25:07] <FromDiscord> <Evrensel KiÅŸilik> oh wait
[06:25:09] <FromDiscord> <Evrensel KiÅŸilik> damn
[06:25:12] <FromDiscord> <Evrensel KiÅŸilik> you mean
[06:25:18] <FromDiscord> <Rika> ??
[06:25:23] <FromDiscord> <Elegantbeef> Just like any other language the pointer is on the stack
[06:25:28] <FromDiscord> <Elegantbeef> The data it points to is on the heap
[06:25:33] <FromDiscord> <Evrensel KiÅŸilik> i have an allocated thing
[06:25:39] <FromDiscord> <Evrensel KiÅŸilik> and i don't use it anymore
[06:25:42] <FromDiscord> <Rika> Yes
[06:25:44] <FromDiscord> <Evrensel KiÅŸilik> and it will be garbage collected
[06:25:47] <FromDiscord> <Evrensel KiÅŸilik> buuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuut
[06:25:49] <FromDiscord> <Rika> If it is a reference
[06:25:53] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/TfA
[06:26:07] <FromDiscord> <Evrensel KiÅŸilik> if i use the allocated variable
[06:26:09] <FromDiscord> <Elegantbeef> In the above case the integer will be freed when the GC system says to
[06:26:13] <FromDiscord> <Evrensel KiÅŸilik> it would not be garbage collected
[06:26:15] <FromDiscord> <Evrensel KiÅŸilik> buuuuuuuuuuuuuut also
[06:26:26] <FromDiscord> <Evrensel KiÅŸilik> it is same if i use a reference to it
[06:26:36] <FromDiscord> <Evrensel KiÅŸilik> it will not be garbage collected also
[06:26:38] <FromDiscord> <Evrensel KiÅŸilik> right?
[06:26:50] <FromDiscord> <Rika> I donâ€™t understand
[06:26:58] <FromDiscord> <Elegantbeef> Me either
[06:27:03] <FromDiscord> <Evrensel KiÅŸilik> ban @Rika
[06:27:04] <FromDiscord> <Evrensel KiÅŸilik> pls
[06:27:21] <FromDiscord> <Evrensel KiÅŸilik> soooooooooooooooo i just mean
[06:27:31] <FromDiscord> <Evrensel KiÅŸilik> using a ref to an allocated thing
[06:27:38] <FromDiscord> <Rika> Okay
[06:27:45] <FromDiscord> <Evrensel KiÅŸilik> avoids garbage collection for that allocated thing
[06:27:46] <FromDiscord> <Evrensel KiÅŸilik> right?
[06:27:49] <FromDiscord> <Elegantbeef> If you allocate a reference it's heap allocated and will be freed when the GC says so(nothing points to it)
[06:28:00] <FromDiscord> <haolian9 (é«˜æµ©äº®)> hi all, is there a guide on using log inside a library?â†µi checked out some libraries which did not use log, what if i need some log info to debug those libraies?
[06:28:09] <FromDiscord> <Rika> If you have a reference and itâ€™s still being used it will not be reallocated
[06:28:09] <FromDiscord> <Evrensel KiÅŸilik> soooooooooooooo?
[06:28:10] <FromDiscord> <Evrensel KiÅŸilik> yes or no?
[06:28:14] <FromDiscord> <Rika> Deallocated 
[06:28:30] <FromDiscord> <Evrensel KiÅŸilik> In reply to @Rika "If you have a": sooooooooooooooooooooooooo it is a yes
[06:28:31] <FromDiscord> <Rika> In reply to @haolian9 (é«˜æµ©äº®) "hi all, is there": Add logs then
[06:28:42] <FromDiscord> <Evrensel KiÅŸilik> buuuuuuut it is not same for `ptr`
[06:28:53] <FromDiscord> <Rika> In reply to @Evrensel KiÅŸilik "sooooooooooooooooooooooooo it is a": By the way, you cannot convert ptr to ref without reallocation
[06:29:02] <FromDiscord> <Evrensel KiÅŸilik> hmmmmmmmmmmmmmm
[06:29:06] <FromDiscord> <Evrensel KiÅŸilik> convert?
[06:29:11] <FromDiscord> <Rika> You must stay in one or the other
[06:29:22] <FromDiscord> <Rika> You canâ€™t make a ptr into a ref and vice versa
[06:29:22] <FromDiscord> <Elegantbeef> pointers are unmanged the Nim memory management cannot know how many things point to the data
[06:29:44] <FromDiscord> <Elegantbeef> Pointers work just like they do in C
[06:29:48] <FromDiscord> <Rika> Pointers are plain pointers like in C
[06:29:49] <FromDiscord> <Rika> Yes
[06:29:55] <FromDiscord> <Elegantbeef> though in Nim they're 0-init'd
[06:29:56] <FromDiscord> <Elegantbeef> So they're always nil by default
[06:30:15] <FromDiscord> <Rika> So like calloc
[06:30:24] <FromDiscord> <Elegantbeef> Though like i mentioned before Nim doesnt have pointer arithmetic by default
[06:30:33] <FromDiscord> <Elegantbeef> Cause that's a very silly thing \:
[06:31:13] <FromDiscord> <Rika> You can make it do pointer arithmetic but itâ€™s not pretty
[06:31:48] <FromDiscord> <Elegantbeef> https://github.com/kaushalmodi/ptr_math just use this ðŸ˜›
[06:31:58] <FromDiscord> <Evrensel KiÅŸilik> high level things are always cauising unpredictable issues
[06:32:12] <FromDiscord> <Elegantbeef> Yea like lowlevel things never do
[06:32:31] <FromDiscord> <Evrensel KiÅŸilik> low level things are always difficult
[06:32:31] <FromDiscord> <Elegantbeef> No one has ever accidently dereferenced a non 0-init'd pointer in C
[06:32:37] <FromDiscord> <Evrensel KiÅŸilik> but never unpredictable
[06:32:45] <FromDiscord> <Elegantbeef> No one has ever forgot the `\0` inside a cstring ðŸ˜€
[06:32:53] <FromDiscord> <Elegantbeef> Well there is no unpredictable issues
[06:32:55] <FromDiscord> <Evrensel KiÅŸilik> i left Unity and switched back to Godot
[06:33:05] <FromDiscord> <Evrensel KiÅŸilik> the problam was being fucking high level
[06:33:06] <FromDiscord> <Rika> Unpredictability is not the only issue
[06:33:13] <FromDiscord> <Rika> Something being obtuse causes bugs too
[06:33:24] <FromDiscord> <Evrensel KiÅŸilik> soooooooooooooo
[06:33:28] <FromDiscord> <Evrensel KiÅŸilik> dooooon't worry
[06:33:29] <FromDiscord> <Elegantbeef> The problem with Unity isnt about highlevel but more about the fact the engine lacks anything but a rendering backend
[06:33:36] <FromDiscord> <Evrensel KiÅŸilik> i will write some articles about my philosophy
[06:33:48] <FromDiscord> <Rika> Unity is pretty confusing ngl
[06:33:52] <FromDiscord> <Elegantbeef> Unity's biggest issue is that you have to make everything yourself or buy an asset
[06:34:08] <FromDiscord> <Evrensel KiÅŸilik> simply
[06:34:11] <FromDiscord> <Evrensel KiÅŸilik> it is broken
[06:34:12] <FromDiscord> <Elegantbeef> Anyone that uses Unity "properly" makes their own tooling, cause Unity lacks it
[06:34:31] <FromDiscord> <Evrensel KiÅŸilik> Unity's Netcode thing is extremely buggy
[06:34:35] <FromDiscord> <Elegantbeef> All the people I know that use Unity just use it as a BGFX like library
[06:34:55] <FromDiscord> <Evrensel KiÅŸilik> it doesn't support WebSocket and there is a community thing for that but it is not working for web exports
[06:35:08] <FromDiscord> <Evrensel KiÅŸilik> ummmmm also web exports are totally buggy in Unity
[06:35:18] <FromDiscord> <Evrensel KiÅŸilik> i was about to crazy today
[06:35:23] <FromDiscord> <Evrensel KiÅŸilik> (edit) "i was about to ... crazy" 03added "go"
[06:35:25] <FromDiscord> <Evrensel KiÅŸilik> buuuuut
[06:35:35] <FromDiscord> <Evrensel KiÅŸilik> it is always same
[06:35:54] <FromDiscord> <Evrensel KiÅŸilik> some people write some shit codes with shit architectures
[06:36:28] <FromDiscord> <Evrensel KiÅŸilik> and other ones make something that will force them to write better architectured code
[06:36:33] <FromDiscord> <Elegantbeef> Hey i'm right here just say it to my face
[06:36:34] <FromDiscord> <Evrensel KiÅŸilik> this is just a curse
[06:36:49] <FromDiscord> <Evrensel KiÅŸilik> In reply to @Elegantbeef "Hey i'm right here": what?
[06:37:04] <FromDiscord> <Elegantbeef> > some people write some shit codes with shit architectures
[06:37:10] <FromDiscord> <Evrensel KiÅŸilik> oh
[06:37:12] <FromDiscord> <Evrensel KiÅŸilik> lol
[06:37:15] <FromDiscord> <Evrensel KiÅŸilik> i mean for example
[06:37:18] <FromDiscord> <Evrensel KiÅŸilik> JavaScript
[06:37:32] <FromDiscord> <Evrensel KiÅŸilik> tons of people write shit codes
[06:37:52] <FromDiscord> <Evrensel KiÅŸilik> and damn virus frameworks are occuring
[06:38:02] <FromDiscord> <Evrensel KiÅŸilik> frameworks are viruses
[06:38:26] <FromDiscord> <Evrensel KiÅŸilik> soooooooooo breaking programmability
[06:38:31] <FromDiscord> <Evrensel KiÅŸilik> this is the problem
[06:40:29] <FromDiscord> <Evrensel KiÅŸilik> soooooooo GDScript is very high level yes
[06:40:43] <FromDiscord> <Evrensel KiÅŸilik> but not in meaning of breaking programmability
[06:47:32] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:58:13] <NimEventer> New thread by Haoliang: Best practice or guidelines on using log in a library?, see https://forum.nim-lang.org/t/8880
[06:58:30] <FromDiscord> <Evrensel KiÅŸilik> In reply to @NimEventer "New thread by Haoliang:": you are a real bot?
[06:58:35] <FromDiscord> <Evrensel KiÅŸilik> i hope you are
[06:58:45] <FromDiscord> <Elegantbeef> That's a real bot
[06:58:57] <FromDiscord> <Evrensel KiÅŸilik> In reply to @Elegantbeef "That's a real bot": just like you!!!!
[06:59:11] <FromDiscord> <Evrensel KiÅŸilik> your avatar scaring me
[06:59:18] <FromDiscord> <Elegantbeef> Leave my doggo alone
[06:59:18] <FromDiscord> <Evrensel KiÅŸilik> plssss get out here
[06:59:31] <FromDiscord> <congusbongus> says the anime dp guy
[06:59:54] <FromDiscord> <Evrensel KiÅŸilik> ðŸ˜±
[07:00:16] <FromDiscord> <congusbongus> just kidding
[07:00:37] <FromDiscord> <Evrensel KiÅŸilik> im hungry
[07:00:43] <FromDiscord> <Evrensel KiÅŸilik> please make me some fooods
[07:01:02] <FromDiscord> <Evrensel KiÅŸilik> maybe a beef toast
[07:01:06] <FromDiscord> <evoalg> Sometimes I think I'm the only human here
[07:01:15] <FromDiscord> <Elegantbeef> Clearly you're not human
[07:01:24] <FromDiscord> <Evrensel KiÅŸilik> In reply to @Elegantbeef "Clearly you're not human": yes
[07:01:27] <FromDiscord> <Evrensel KiÅŸilik> yesssssssssssssssssssss
[07:01:55] <FromDiscord> <Evrensel KiÅŸilik> sooooooooo this 1440p monitor is not enough
[07:01:56] <FromDiscord> <congusbongus> Tell me more about Sometimes I think I'm the only human here
[07:02:00] <FromDiscord> <Rika> Sometimes I think
[07:02:10] <FromDiscord> <Rika> Only sometimes though
[07:02:30] <FromDiscord> <Evrensel KiÅŸilik> i will get a 4K monitor
[07:02:47] <FromDiscord> <Evrensel KiÅŸilik> buuuuuut curved one
[07:04:34] <FromDiscord> <Elegantbeef> You're a programmer you dont need horizontal display you need vertical display
[07:07:13] <FromDiscord> <Evrensel KiÅŸilik> In reply to @Elegantbeef "You're a programmer you": oh
[07:07:23] <FromDiscord> <Evrensel KiÅŸilik> it is correct
[07:07:26] <FromDiscord> <Evrensel KiÅŸilik> buuuuuuuuuut
[07:07:46] <FromDiscord> <Evrensel KiÅŸilik> im using soooo many windows
[07:08:02] <FromDiscord> <Evrensel KiÅŸilik> it is correct while coding
[07:09:03] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[07:09:03] <FromDiscord> <Evrensel KiÅŸilik> buuuuuuut sometimes
[07:09:07] <FromDiscord> <Evrensel KiÅŸilik> for example debugging
[07:09:17] <FromDiscord> <Evrensel KiÅŸilik> we need horizontal space
[07:09:25] <FromDiscord> <Evrensel KiÅŸilik> ummmmmmm there are soooo many times
[07:09:29] <FromDiscord> <Evrensel KiÅŸilik> that we need horizontal space
[07:10:38] <FromDiscord> <Evrensel KiÅŸilik> this new monitor's feet is not gooooooood it only has vertical movement
[07:10:57] <FromDiscord> <Evrensel KiÅŸilik> i need a custom monitor feet
[07:13:03] <FromDiscord> <Evrensel KiÅŸilik> why do i love Godot this much?
[07:13:34] <FromDiscord> <Rika> Thatâ€™s an idea soup if Iâ€™ve ever seen one
[07:13:47] <FromDiscord> <Evrensel KiÅŸilik> In reply to @Rika "Thatâ€™s an idea soup": whaaaaaaaaaaaaaaaaaaaat
[07:13:53] <FromDiscord> <Evrensel KiÅŸilik> whatt soup??
[07:14:02] <FromDiscord> <Evrensel KiÅŸilik> will you make a soup for me?
[07:14:05] <FromDiscord> <Evrensel KiÅŸilik> you mean that?
[07:42:48] <FromDiscord> <creikey> sent a code paste, see https://play.nim-lang.org/#ix=3P0i
[07:43:10] <FromDiscord> <creikey> if I wanted to create a windy window like this and return it from a function, how should I capture the window for the resize callback?
[07:43:18] <FromDiscord> <creikey> doing this results in a compile error about memory safety
[07:43:31] <FromDiscord> <creikey> sent a code paste, see https://play.nim-lang.org/#ix=
[07:45:37] <FromDiscord> <Elegantbeef> One way would be to make the `result` type a `ref T`
[07:46:03] <FromDiscord> <Elegantbeef> The issue is that `result` is a stack variable so once the procedure is done it's unsafe to reference it i assume
[07:46:41] <FromDiscord> <Elegantbeef> Really the `onResize` should probably take a parameter `window` so you can access that stuff internally
[07:47:53] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3P0j
[07:50:10] <FromDiscord> <creikey> In reply to @Elegantbeef "The issue is that": it's only referenced by a function also tied to the lifetime of the window
[07:50:57] <FromDiscord> <Elegantbeef> What?
[07:51:17] <FromDiscord> <creikey> like the `window.onResize` proc will also be freed with the `window` variable
[07:51:39] <FromDiscord> <Elegantbeef> Sure but that's not related to what i said
[07:51:41] <FromDiscord> <creikey> so it should be fine to capture `window` in it as when window dies it dies
[07:51:46] <FromDiscord> <creikey> I mean I guess you can still copy the function
[07:51:49] <FromDiscord> <Elegantbeef> It's not capturing window
[07:51:59] <FromDiscord> <Elegantbeef> It's capturing the window on the result
[07:52:04] <FromDiscord> <creikey> it's capturing result which is a Window ooh wait
[07:52:06] <FromDiscord> <creikey> I see what you're saying
[07:52:29] <FromDiscord> <Elegantbeef> What is the type of `result`?
[07:59:17] <FromDiscord> <creikey> In reply to @Elegantbeef "What is the type": I stashed those changes as I decided refactoring everything into a separate file and api wasn't really worth it but it was just an object with window in it
[07:59:45] <FromDiscord> <Elegantbeef> Ah so i was right that it was a stack variable
[07:59:59] <FromDiscord> <creikey> yeah returned from the function
[08:00:24] <FromDiscord> <creikey> I can just git submodule nimble packages from a fork if I want to edit them right
[08:00:25] <FromDiscord> <Elegantbeef> Then yea i'm 99% certain the bug would've went away with the ref change or the direct reference of the window
[08:00:31] <FromDiscord> <Elegantbeef> Well compile error
[08:00:40] <FromDiscord> <Elegantbeef> Uhh i just fork clone and `nimble develop` which symlinks it
[08:00:47] <FromDiscord> <creikey> oh yo that sounds nice
[08:26:40] <FromDiscord> <noow> any way to mark an import used, when importing it has a side effect
[08:27:14] <FromDiscord> <noow> i know i know importing modules mutating global variables is not the best design, but sometimes it's convenient in a module-loadingy thingy
[08:28:18] <FromDiscord> <Elegantbeef> You can do `import x {.used.}`
[08:28:31] <FromDiscord> <Elegantbeef> you can also put `{.used.}` inside the body of the proc
[08:28:35] <FromDiscord> <Elegantbeef> i mean module
[08:28:39] <FromDiscord> <noow> thank
[08:28:45] <FromDiscord> <noow> i guess i could also use includes
[08:28:49] <FromDiscord> <noow> but this one seems fine for now
[08:28:52] <FromDiscord> <Elegantbeef> No
[08:28:57] <FromDiscord> <Elegantbeef> Dont use include unless you actually need it
[08:29:30] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#pragmas-used-pragma
[08:30:16] <FromDiscord> <noow> Error: invalid pragma, expected: {all}
[08:31:05] <FromDiscord> <Elegantbeef> Guess you cannot use it on imports
[08:31:09] <FromDiscord> <Elegantbeef> So just throw it inside the module
[08:31:18] <FromDiscord> <noow> oki
[09:53:30] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:58:37] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[10:03:30] *** Quits: lain (~lain@172.16.254.xxx) (Quit: brb)
[10:05:09] *** Joins: lain (~lain@172.16.254.xxx)
[10:05:14] *** Quits: cyraxjoe (~joe@2806:109f:13:c804::1ee3) (Quit: I'm out!)
[10:06:55] *** Joins: cyraxjoe (~joe@2806:109f:13:c804:36b7:20:f08d:4c5f)
[10:08:55] *** Quits: cyraxjoe (~joe@2806:109f:13:c804:36b7:20:f08d:4c5f) (Client Quit)
[10:10:45] *** Joins: cyraxjoe (~joe@2806:109f:13:c804:373:4657:373c:77c9)
[10:30:22] <FromDiscord> <Someone.one> is it possible to have non-continuous range types?
[10:30:34] <FromDiscord> <Elegantbeef> No
[10:31:08] <FromDiscord> <Elegantbeef> You could use a `sequence[Slice[T]]`
[10:31:13] <FromDiscord> <Elegantbeef> jeez
[10:31:16] <FromDiscord> <Elegantbeef> `seq[Slice[T]]`
[10:34:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3P0G
[10:34:59] *** Joins: PMunch (~PMunch@user/pmunch)
[10:42:55] <FromDiscord> <Arathanis> whats the best way to make a new expression node? Specifically a ExprEqExpr?
[10:43:12] <FromDiscord> <Elegantbeef> `nnkExprEqExpr.newTree(a, b)`
[10:46:57] <FromDiscord> <Phil> reads the bit about "you can just turn on the gc arc flag with your currently written code
[10:46:59] <FromDiscord> <Phil> squints
[10:47:10] <FromDiscord> <Phil> (edit) "code" => "code""
[10:47:37] <FromDiscord> <Phil> Are you sure I wouldn't have to do some code adjustments here or there to make different GC's such as ARC work?
[10:48:06] <FromDiscord> <Phil> Like, I haven't tried, but I'd be willing to bet the compiler explodes somewhere if I turned that flag on right now
[10:48:23] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3P0H
[10:48:35] <FromDiscord> <Elegantbeef> You shouldnt need to do anything to make ORC work
[10:48:42] <FromDiscord> <Elegantbeef> With ARC you have to ensure you dont have cycles
[10:48:48] <FromDiscord> <Elegantbeef> But it will "work" without that
[10:49:11] <FromDiscord> <Elegantbeef> Arc/Orc should not require changing code
[10:51:23] <FromDiscord> <Phil> Wait, can arc compile even if I have cycles or does it explode as would be appropriate?
[10:51:33] <FromDiscord> <Elegantbeef> It compiles it just doesnt free
[10:51:50] <FromDiscord> <Phil> Well... that's unfortunate for me
[10:51:51] <FromDiscord> <Phil> hm
[10:51:58] <FromDiscord> <Elegantbeef> You leak cycles
[10:52:02] <FromDiscord> <Arathanis> does `ident` not let you make arbitrary identifier nodes?
[10:52:06] <FromDiscord> <Elegantbeef> Use orc or handle cycles yourself
[10:52:13] <FromDiscord> <Elegantbeef> "arbitrary identifiers"?
[10:52:20] <FromDiscord> <Arathanis>  https://media.discordapp.net/attachments/371759389889003532/940507822846771210/unknown.png
[10:52:22] <FromDiscord> <Phil> I don't know if I leak cycles, having the compiler check for me would be nice ^^'
[10:52:24] <FromDiscord> <Elegantbeef> `genSym` is what you want
[10:52:36] <FromDiscord> <Arathanis> ohhhh ok
[10:52:44] <FromDiscord> <Elegantbeef> I mean i thin kti's what you want
[10:52:49] <FromDiscord> <Elegantbeef> Do you want to be able to access the symbol?
[10:53:21] <FromDiscord> <Phil> Was just a matter of whether it could've been a low-hanging-fruit optimization - Just enable the flag, adjust the parts of your code where the compiler screams and enjoy having arc
[10:54:20] <FromDiscord> <Arathanis> In reply to @Elegantbeef "Do you want to": im trying to use it to make a `ExprEqExpr`
[10:54:50] <FromDiscord> <Elegantbeef> so then `ident"number", yourValHere`
[10:54:54] <FromDiscord> <Arathanis> sent a code paste, see https://paste.rs/jd0
[10:55:15] <FromDiscord> <Elegantbeef> Oh you've fallen for the trap
[10:55:28] <FromDiscord> <Arathanis> getting trapped is part of learning :]
[10:55:32] <FromDiscord> <Arathanis> (edit) "https://play.nim-lang.org/#ix=3P0L" => "https://play.nim-lang.org/#ix=3P0K"
[10:55:37] <FromDiscord> <Elegantbeef> inside an arg list it's not a `nnkExprEqExpr` it's a `nnkIdentDef`
[10:55:50] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/macros.html#newIdentDefs%2CNimNode%2CNimNode
[10:56:13] <FromDiscord> <Elegantbeef> Wait you're doing named parameters
[10:56:13] <FromDiscord> <Elegantbeef> I'm dumb
[10:56:30] <FromDiscord> <Elegantbeef> What's the compiler error?
[10:56:45] <FromDiscord> <Arathanis> undeclared identifier: "number"
[10:56:52] <FromDiscord> <Elegantbeef> do me a favour and do `echo result.repr` at the end of the macrro
[10:56:53] <FromDiscord> <Arathanis> same for message
[10:56:56] <FromDiscord> <Arathanis>  https://media.discordapp.net/attachments/371759389889003532/940508982026592276/unknown.png
[10:57:01] <FromDiscord> <Arathanis> it has a problem there
[10:57:12] <FromDiscord> <Elegantbeef> Like i said `echo result.repr`
[10:57:30] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3P0M
[10:57:44] <FromDiscord> <Elegantbeef> Yea then run the code
[10:57:47] <FromDiscord> <Elegantbeef> Or attempt to compile it
[10:57:53] <FromDiscord> <Elegantbeef> it'll give you the generated Nim code out
[10:57:56] <FromDiscord> <Elegantbeef> I want to see that
[10:58:44] <FromDiscord> <Arathanis> k let me make sure its cleaned up so im only giving you relevant output
[10:58:49] <FromDiscord> <Arathanis> scratchpaper folder lol
[10:59:27] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3P0O
[10:59:40] <FromDiscord> <Elegantbeef> Ah there you go
[10:59:42] <FromDiscord> <Elegantbeef> You can probably see the issue now
[11:00:09] <FromDiscord> <Arathanis> oh its in the uhh
[11:00:16] <FromDiscord> <Arathanis> genAst call isnt it
[11:00:18] <FromDiscord> <Elegantbeef> `genAst` gensyms symbols by default, so you need to do `genAst(..., number = ident"number", message = ident"message")`
[11:00:40] <FromDiscord> <Elegantbeef> Dont know if it respects `{.inject.}`
[11:00:48] <FromDiscord> <Elegantbeef> you could try that aswell
[11:01:02] <FromDiscord> <Arathanis> how would i try inject?
[11:01:07] <FromDiscord> <Elegantbeef> `proc (number {.inject.}: int, message {.inject.}: string)`
[11:01:16] <FromDiscord> <Arathanis> ohhh
[11:01:19] <FromDiscord> <Arathanis> ill try that
[11:01:23] <FromDiscord> <Arathanis> also your first idea totally worked
[11:01:37] <FromDiscord> <Elegantbeef> Who'd i be if i couldnt write macros
[11:02:02] <FromDiscord> <Elegantbeef> Where's rika to say "Useful"
[11:02:13] <FromDiscord> <Arathanis> it does respect inject
[11:02:48] <FromDiscord> <Arathanis> it also autoformats things really terribly
[11:02:56] <FromDiscord> <Arathanis> this looks awful https://media.discordapp.net/attachments/371759389889003532/940510496233234472/unknown.png
[11:03:04] <FromDiscord> <Arathanis> apparently it wants it to look that way lol
[11:03:20] <FromDiscord> <Elegantbeef> I mean you can disable nimpretty
[11:03:37] <FromDiscord> <Elegantbeef> Or increase the line limit
[11:03:40] <FromDiscord> <Elegantbeef> 80 is quite small
[11:03:53] <FromDiscord> <Elegantbeef> Someone is writting a fucking essay and i'm scared
[11:04:08] <FromDiscord> <Elegantbeef> Oh did the bridge just glitch
[11:04:23] <FromDiscord> <Arathanis> nah i decided i didnt need to hit enter :P
[11:04:37] <FromDiscord> <Arathanis> extended the line length to 120
[11:04:39] <FromDiscord> <Arathanis> and now its sane
[11:04:43] <FromDiscord> <Elegantbeef> Not you the person that asked about the ranges
[11:04:47] <FromDiscord> <Arathanis> ohhhh
[11:04:57] <FromDiscord> <Elegantbeef> Just dont go too wild with the horizontal size
[11:05:03] <FromDiscord> <Elegantbeef> Vertical \> horizontal
[11:05:49] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/jCB
[11:06:08] <FromDiscord> <Elegantbeef> If you dont want the random `add` that is
[11:06:30] <FromDiscord> <Arathanis> that seems, almost weird
[11:06:42] <FromDiscord> <Elegantbeef> Macros really benefit from the fun Nim syntax imo
[11:06:46] <FromDiscord> <Arathanis> haha
[11:06:58] <FromDiscord> <Elegantbeef> You come to love the block call logic Nim has
[11:07:10] <FromDiscord> <Arathanis> oh i do, its just about internalizing it all
[11:07:19] <FromDiscord> <Arathanis> lots of... i think the word is currying
[11:07:34] <FromDiscord> <Arathanis> well i really appreciate the help
[11:07:37] <FromDiscord> <Elegantbeef> Currying is different but we'll take it ðŸ˜€
[11:07:45] <FromDiscord> <Elegantbeef> No problem
[11:07:50] <FromDiscord> <Arathanis> im finally at the point where i understand macros enough to be dangerous lmao
[11:07:55] <FromDiscord> <Arathanis> now i can experiment
[11:08:04] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3P0R
[11:08:06] <FromDiscord> <Elegantbeef> Personally I view `error` much better than `expect`
[11:08:37] <FromDiscord> <Arathanis> i agree, but I was going for quick and dirty get it working before working on, "now that it works, make it better"
[11:09:08] <FromDiscord> <Elegantbeef> Ah ok
[11:09:15] <FromDiscord> <Elegantbeef> Getting that wonderful line information is one thing i wanted to push in the recent additions i did to that tutorial
[11:09:21] <FromDiscord> <Elegantbeef> Getting line information is so much nicer than just not compiling
[11:09:38] <FromDiscord> <Elegantbeef> If you want more macros to look at i have no shortage of them ðŸ˜›
[11:10:02] <FromDiscord> <Elegantbeef> Oh right i did link a bunch of my macro projects on that writeup
[11:10:39] <FromDiscord> <Arathanis> so "error" lets pass a string and the node causing the error, so you get better line number indication of where the actual problem is?
[11:10:49] <FromDiscord> <Elegantbeef> Yep
[11:11:00] <FromDiscord> <Elegantbeef> You also can give a custom error message which helps more than just a "Bitch this wrong"
[11:11:19] <FromDiscord> <Elegantbeef> If you have error message reporting for the line number (code lens in vscode) it's glorious
[11:11:24] <FromDiscord> <Arathanis> how smart is it, could i for example see that the first parameter in the wrapped function's type is incorrect and raise an error on that specific node?
[11:11:32] <FromDiscord> <Elegantbeef> Yes
[11:11:36] <FromDiscord> <Arathanis> beautiful
[11:11:38] *** Quits: crem1 (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (Ping timeout: 260 seconds)
[11:11:41] <FromDiscord> <Elegantbeef> It copies the line information of the Nimnode
[11:12:02] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/940512782493814804/image.png
[11:12:04] <FromDiscord> <Elegantbeef> I mean it's wonderful
[11:12:15] <FromDiscord> <Arathanis> ha
[11:12:18] <FromDiscord> <Arathanis> it totally works
[11:12:40] <FromDiscord> <Arathanis>  https://media.discordapp.net/attachments/371759389889003532/940512944402350110/unknown.png
[11:12:49] <FromDiscord> <Arathanis>  https://media.discordapp.net/attachments/371759389889003532/940512980955705414/unknown.png
[11:13:03] <FromDiscord> <Elegantbeef> Yea it really makes the macros feel like compiler extensions rather than some silly procs
[11:13:17] <FromDiscord> <Elegantbeef> I highly suggest codelens since it seems you're using vscode
[11:13:36] <FromDiscord> <Arathanis> yeah this solves the problem i experienced with macros before
[11:13:39] <FromDiscord> <Arathanis> extension?
[11:13:44] <FromDiscord> <Elegantbeef> Yea
[11:13:57] <FromDiscord> <Elegantbeef> Sorry it's called errorlens
[11:14:03] <FromDiscord> <Elegantbeef> codelens is just the feature
[11:14:22] <FromDiscord> <Arathanis> i see two, im guessing the 500k+ one is the good one and the other is a horrible fork
[11:14:38] <FromDiscord> <Elegantbeef> No clue i'm on vscodium using openvsix so i have 1
[11:15:01] <FromDiscord> <Arathanis> ah thats really nice, ngl
[11:15:03] <FromDiscord> <Arathanis> looks good
[11:15:26] <FromDiscord> <Elegantbeef> The thing i'd suggest to do now is make that macro a `typed` one then inspect the arguments to see if they match the definition
[11:15:51] <FromDiscord> <Arathanis> can you elaborate on that just a tad? im gonna have to go to bed so I can work tomorrow.
[11:15:53] <FromDiscord> <Elegantbeef> Then support nothing, `string` `string, int` `int`
[11:16:26] <FromDiscord> <Elegantbeef> Well use typed macros so you can see if they have a `string, int` parameter and then when you call the event pass the argument in the proper order
[11:16:59] <FromDiscord> <Elegantbeef> This way you can do `proc myProc(a: string, b: int)` or `proc myProc(a: int, b: string)` ðŸ˜€
[11:17:16] <FromDiscord> <Elegantbeef> The reason you'd want typed is so you can support aliases
[11:18:52] <FromDiscord> <Elegantbeef> then also handle nice error reporting if they have a return type, if they have too many parameters or none of the right kind ðŸ˜›
[11:19:01] <FromDiscord> <Arathanis> i guess im just not quite sure how to do that and exactly what typed buys me
[11:19:04] <FromDiscord> <Elegantbeef> Then you can say "I've done it"
[11:19:34] <FromDiscord> <Elegantbeef> `typed` macros are semantically checked, so you can get what the types are from the `parameter[^2]` ast
[11:19:55] <FromDiscord> <Elegantbeef> you can do `parameter[^2].sameType(bindSym"string")` for instance
[11:22:37] <FromDiscord> <Arathanis> what does `sameType` do
[11:23:11] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/macros.html#sameType%2CNimNode%2CNimNode
[11:23:12] <FromDiscord> <Arathanis> oh it ensures they are the same
[11:23:13] <FromDiscord> <Elegantbeef> It's supposed to compare the type of two semantically checked nodes
[11:23:30] <FromDiscord> <Arathanis> so i will also have to make my idents semantically checked as well
[11:25:06] <FromDiscord> <Elegantbeef> No your output ones dont need to be
[11:25:06] <FromDiscord> <Elegantbeef> The compiler is what semantically checks them
[11:25:47] <FromDiscord> <Arathanis> ok, i will have to follow up on this tomorrow after work
[11:25:56] <FromDiscord> <Arathanis> thanks again, this has helped a lot
[11:26:28] <FromDiscord> <Elegantbeef> Here's an example anyway
[11:26:34] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3P0V
[11:26:56] <FromDiscord> <Elegantbeef> You probably wont need the `getType` stuff, but for this example it was needed
[11:27:03] <FromDiscord> <Elegantbeef> Go to sleep now!
[11:34:22] *** Joins: crem1 (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[11:41:25] <FromDiscord> <Someone.one> In reply to @Elegantbeef "You encouraged me to": this is quite helpful, thanks. is it possible to get and set `a` without using a discrete method? kind of like a transparent replacement for something like `var z: range[1..10]`  ?
[11:42:36] <FromDiscord> <Elegantbeef> Nope that'd require return type inference
[11:42:56] <FromDiscord> <Elegantbeef> Atleast i dont think so
[11:44:27] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[11:45:07] <FromDiscord> <Elegantbeef> we can steal `:=` https://play.nim-lang.org/#ix=3P11
[11:45:24] <FromDiscord> <Elegantbeef> Nim would be more expressive if we could write custom `=` for non equivalent types though
[11:47:11] <FromDiscord> <Someone.one> In reply to @Elegantbeef "we can steal `:=`": ah, this is nice. but the situation for the getter would still be the same, no?
[11:47:14] <FromDiscord> <Elegantbeef> Though `..=` might make sense as it's "range assign"
[11:47:28] <FromDiscord> <Elegantbeef> What?
[11:51:04] <FromDiscord> <Someone.one> In reply to @Elegantbeef "What?": to get the value we still need to do a.val
[11:51:15] <FromDiscord> <Elegantbeef> Yes
[11:51:28] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[11:53:50] *** Joins: Zevv (~Zevvvvv@185.238.131.12)
[11:53:53] <Zevv> PMunch: moin
[11:54:09] <PMunch> Mornin' Zevv 
[11:54:20] <FromDiscord> <Elegantbeef> Morning
[11:54:36] <Zevv> i believe you'd like to have `[]` on the capture object, right?
[11:55:15] <Zevv> I forgot the details, but I remember struggling with that for some reason
[11:55:29] <FromDiscord> <Elegantbeef> Context?
[11:55:55] <Zevv> a ticket on npeg from pmunch : https://github.com/zevv/npeg/issues/40
[11:56:42] <FromDiscord> <Elegantbeef> Ah
[11:58:48] <PMunch> Yes, so that you could still do captures[1..^1]
[11:59:10] <FromDiscord> <Elegantbeef> Yea i dont see any reason why you could not do `[1..^1]`
[11:59:25] <Zevv> right. i'll have to look into that, I had a fight with nim over that IIRC
[12:00:03] <PMunch> Wouldn't the simple implementation just be a template which passes it on to the sequence?
[12:00:28] <FromDiscord> <Elegantbeef> `proc `[]`[S](cs: Captures[S], i: Slice[Natural]): Capture[S]` and  `proc `[]`[S](cs: Captures[S], i: HSlice[Natural, BackwardsIndex]): Capture[S]` should work
[12:00:36] <Zevv> *should* work, yes
[12:00:56] <FromDiscord> <Elegantbeef> Could it been an iterator you were trying?
[12:01:10] <Zevv> i have no idea
[12:01:22] <PMunch> Zevv, haha yes I remember struggling with those myself at some point
[12:01:36] <PMunch> There are (or at least was) some dragons there
[12:01:38] <FromDiscord> <Elegantbeef> Well if it doesnt work anymore ping me and i'll look into it
[12:01:52] <FromDiscord> <Elegantbeef> Well `[]` should work for an iterator now
[12:02:04] <FromDiscord> <Elegantbeef> I never ran into an bug with `[]` operators
[12:02:28] <Zevv> there is https://github.com/zevv/npeg/blob/master/src/npeg/capture.nim#L80-L87 now
[12:02:42] <Zevv> but no slices, true
[12:07:51] <Zevv> hm ok, there still is something dragoning me, the naive implementation does not work, I only get type mismatches and nim is not able to find the proper proc for doing the slice
[12:08:01] <Zevv> I'll shelve this for now, need to do $work first
[12:13:39] <PMunch> Zevv, this is apparently what it gets now: <Captures[system.char], HSlice[system.int, system.int]>
[12:13:57] <PMunch> Not sure if Slices/Hslices would cause the mistmatch
[12:14:03] <PMunch> Or if it's Natural vs. int
[12:14:29] <FromDiscord> <Elegantbeef> The natural/int shouldnt matter
[12:14:36] <Zevv> yeah, the ints was the mismatch - but I can't seem to remember why I changed the Capture type in the first place
[12:14:42] <Zevv> natrual/int does matter
[12:15:18] <Zevv> the commit message was not helpful: "refactoring captures"
[12:15:21] <Zevv> thank you Zevv
[12:15:29] <Zevv> past zevv is a bitch, sometimes
[12:15:49] <Zevv> I always tell people to put the *why* in the commit messages, not the *what*
[12:15:54] <Zevv> but for some reason, I do not do as I preach
[12:16:59] <PMunch> It looks like you wanted better error messages
[12:18:11] <Zevv> i guess i did :)
[12:19:19] <FromDiscord> <Elegantbeef> Ah the generic first parameter is causing an weird behaviour
[12:20:58] <FromDiscord> <Elegantbeef> Ah guess i was wrong Natural does cause issues due to the slice creation
[12:21:20] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3P1b for posterity this seems to work fine
[12:21:28] <Zevv> while you're at it, could you fix PMunch's issue and PR it :)
[12:23:21] <FromDiscord> <Elegantbeef> I spose
[12:23:21] <FromDiscord> <Elegantbeef> Not doing anything else atm
[12:23:27] <Zevv> hehe
[12:26:35] <FromDiscord> <Elegantbeef> I have 0 clue how to test this though
[12:27:05] <PMunch> But now you have to deref Elegant :(
[12:27:23] <FromDiscord> <Elegantbeef> No
[12:27:44] <FromDiscord> <Elegantbeef> `proc `[]`[S](cs: Captures[S], slice: HSlice[int, BackwardsIndex] or Slice[int]): Captures[S] = Captures[S](capList: cs.s[slice])` should be it
[12:28:48] <FromDiscord> <Elegantbeef> I have 0 idea the API here so i dont know how to fix it nor test it
[12:28:52] <FromDiscord> <Elegantbeef> So i'll just leave it with pmunch
[12:30:16] <PMunch> I was thinking something like this: https://play.nim-lang.org/#ix=3P1c
[12:30:42] <PMunch> But not entirely sure if returning a seq[Capture[S]] is the right way to go
[12:30:46] <FromDiscord> <Elegantbeef> I mean i'm looking at Zevv's code
[12:30:58] <FromDiscord> <Elegantbeef> I dont know the API so i can only copy it based of what `[]` does
[12:31:06] <PMunch> You do lose the Captures bit
[12:31:12] <FromDiscord> <Elegantbeef> I have 0 clue what it should do or how it should behave
[12:35:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[13:01:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[13:24:42] <NimEventer> New thread by Drkameleon: NImScript task and using a shebang line, see https://forum.nim-lang.org/t/8881
[14:06:40] *** Joins: Vladar (~Vladar@46.162.2.53)
[14:39:51] <NimEventer> New post on r/nim by mavavilj: Any place where we could focus on comparing how Nim does or does not replace Java/C#?, see https://reddit.com/r/nim/comments/snhp05/any_place_where_we_could_focus_on_comparing_how/
[15:39:04] <FromDiscord> <haxscramper> sent a long message, see http://ix.io/3P1I
[15:39:53] <FromDiscord> <haxscramper> (edit) "http://ix.io/3P1I" => "http://ix.io/3P1J"
[15:42:17] <FromDiscord> <haxscramper> the "good error message" request for the compiler is a multi-month refactoring at best
[15:56:36] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[16:12:23] <FromDiscord> <Clonkk> Okay, I didn't know that. I thought the information was abstracted and the formatted (that would have made sense conceptually)â†µ(@haxscramper)
[16:16:37] <FromDiscord> <haxscramper> Yes, that would ceratinly make a lot more sense
[16:17:47] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3P1T
[16:17:47] <FromDiscord> <haxscramper> format strings in-place
[16:26:03] <FromDiscord> <rishav> sent a code paste, see https://play.nim-lang.org/#ix=3P1Y
[16:27:09] <FromDiscord> <haxscramper> `var` in arguments means that parameter is mutable
[16:27:53] <FromDiscord> <haxscramper> `var ps: ParseStack` is a statement declaring mutable variable, `(ps: var ParseStack)` is an mutable argument
[16:29:30] <FromDiscord> <rishav> Thank!
[16:29:36] <FromDiscord> <rishav> (edit) "Thank!" => "Thanks!"
[16:55:59] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:17:02] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:17:27] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[17:42:13] *** Joins: vicfred (~vicfred@user/vicfred)
[18:02:48] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[18:13:06] *** Joins: arkurious (~arkurious@user/arkurious)
[18:37:40] <nixfreaknim[m]> I want to find all vowels in a string , with C I can just call char but how do I do that with nim
[18:40:13] <nixfreaknim[m]> so basically I create an echo asking for a string then use readLine to scanf the string and use a case statement to look for the vowels 
[18:42:19] <FromDiscord> <xx_ns> maybe use find?
[18:42:23] <FromDiscord> <xx_ns> https://nim-lang.org/docs/strutils.html#find,string,set%5Bchar%5D,Natural,int
[18:44:28] <nixfreaknim[m]> hmm , is there no other way to do this without a builtin function ? 
[18:46:16] <FromDiscord> <xx_ns> I mean there's loads of ways
[18:46:45] <FromDiscord> <xx_ns> you iterate over each character in the string and see if it's in your predefined set of wovels for example
[18:48:20] <FromDiscord> <xx_ns> see the second example here
[18:48:22] <FromDiscord> <xx_ns> https://nim-lang.org/docs/sequtils.html
[18:50:42] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:52:24] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[19:10:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[19:14:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Client Quit)
[19:17:39] <FromDiscord> <eqf0> Why can't you do it the same way as in C?â†µ(<@709044657232936960_nixfreaknim=5b=4datrix=5d>)
[19:20:59] <FromDiscord> <huantian> Yeah you can just iterate though each character in the string and check if itâ€™s a vowel
[19:21:43] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[19:27:04] <NimEventer> New post on r/nim by Familiar_Ad_8919: apparently summing floats as part of tuples is a sin, see https://reddit.com/r/nim/comments/snnh4t/apparently_summing_floats_as_part_of_tuples_is_a/
[19:32:02] <FromDiscord> <Rika> ???
[19:36:33] <FromDiscord> <huantian> I wonder what that post was  about lmao
[19:39:35] <nixfreaknim[m]> <FromDiscord> "<huantian> Yeah you can just..." <- every time i do that I get mismatch string and char
[19:40:04] <FromDiscord> <huantian> Are you for looping?
[19:40:51] <nixfreaknim[m]> yes , then use a case statement
[19:42:05] <FromDiscord> <xx_ns> can you post your code on play.nim-lang.org
[19:43:41] <nixfreaknim[m]> https://play.nim-lang.org/#ix=3P37
[19:44:40] <nrds> <06Prestige99> https://play.nim-lang.org/#ix=3P38 ?
[19:47:49] <nixfreaknim[m]> yeah that doesn't work , I have tried thtat 
[19:47:53] <nixfreaknim[m]> s/thtat/that/
[19:48:08] <nixfreaknim[m]> /Users/aaronm/.env/nim/practice/vowels.nim(5, 10) Error: type mismatch: got <char, char>
[19:48:26] <nrds> <06Prestige99> It works in the playground, what are you trying to do?
[19:48:51] <nixfreaknim[m]> vowels.nim(5, 10) Error: type mismatch: got <char, char>
[19:49:13] <nixfreaknim[m]> am I missing a module ? 
[19:50:01] <nrds> <06Prestige99> show your code
[19:51:25] <nixfreaknim[m]> yeah thats not search through the string to find the vowels though 
[19:52:06] <nrds> <06Prestige99> I'm not sure what you want to do, add all the vowels to a seq or something?
[19:52:23] <nixfreaknim[m]> ok , I thought you had to do of 'a' in volume 
[19:52:30] <nixfreaknim[m]> s/volume/vowel:/
[19:52:47] <nixfreaknim[m]> its just of 'a': 
[19:54:53] <nixfreaknim[m]> ok so you can't use  "in" in  a case statement 
[19:55:25] <FromDiscord> <xx_ns> what would that even do?
[19:56:11] <FromDiscord> <xx_ns> case statements match a value against different cases...
[20:23:11] <NimEventer> New thread by Tubbs: Webscrape, see https://forum.nim-lang.org/t/8882
[20:24:55] *** Joins: jjido (~Denis@94.4.149.217)
[20:41:22] *** Joins: PMunch (~PMunch@user/pmunch)
[20:48:06] <FromDiscord> <TurtleP> sent a long message, see http://ix.io/3P3s
[20:54:35] <FromDiscord> <Clonkk> Have you tried https://nim-lang.org/docs/parsecfg.html ? INI and Toml syntax are mostly identicalâ†µ(@TurtleP)
[20:56:21] <FromDiscord> <TurtleP> I haven't
[20:56:44] <PMunch> Uuh, I'd advise using anything but a TOML parser for parsing TOML files..
[20:57:29] <FromDiscord> <Clonkk> Is there some wierd specificity to toml ?â†µ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[20:57:36] <FromDiscord> <TurtleP> I think their point was more "try using an INI file instead because this is easier"
[20:57:42] <PMunch> You could probably write a macro that tries to read the fields of the objects you pass in from the runtime-parsed TOML file
[20:57:46] <FromDiscord> <Clonkk> Well if it's just config you want, then yeah
[20:57:47] <Amun-Ra> Clonkk: indentation, array, etc.
[20:58:01] <FromDiscord> <Clonkk> Yeah but are you using those ?â†µ(<@709044657232936960_=41mun-=52a=5b=49=52=43=5d>)
[20:58:10] <PMunch> Ooh there's plenty
[20:58:29] <PMunch> And I would know, I'm the one who rewrote the TOML parser
[20:59:14] <FromDiscord> <TurtleP> hmm.. I mean afaik I don't need anything specific about the TOML format to use it
[20:59:23] <FromDiscord> <TurtleP> versus a regular INI file, but idk
[20:59:41] <PMunch> INI files are terrible, use TOML
[20:59:48] <PMunch> Do you have a sample I could work with?
[20:59:55] <FromDiscord> <TurtleP> toml file?
[21:00:37] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[21:01:00] <PMunch> Yes
[21:01:07] <FromDiscord> <TurtleP> <https://github.com/lovebrew/lovebrew/blob/dev/next/src/data/resources/lovebrew.toml>
[21:01:14] <FromDiscord> <TurtleP> this is the toml file I'm using
[21:01:21] <FromDiscord> <Clonkk> Terrible is a bit strong. INI is nice when you need something simple.â†µ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[21:01:55] <PMunch> Well apart from that INI isn't really one format, so it's terrible to write a parser for that handles anything but a single format
[21:02:12] <PMunch> TOML is essentially INI properly specified with a couple added niceties
[21:02:57] <FromDiscord> <Clonkk> It looks simple enough. I'm fairly confident, you should be able to parse it with `std/parsecfg`â†µ(@TurtleP)
[21:03:47] <FromDiscord> <Clonkk> That's the one ? https://github.com/NimParsers/parsetomlâ†µ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[21:04:50] <PMunch> Yes
[21:05:02] <PMunch> @TurtleP, just give me a minute, I'll whip you up something nice
[21:05:08] <FromDiscord> <TurtleP> aight
[21:05:48] <FromDiscord> <TurtleP> cause I might rearrange this toml file a tiny bit, so hopefully whatever you come up with will be generic :p
[21:05:57] <PMunch> It will be
[21:14:46] *** Joins: pro (~pro@user/pro)
[21:15:03] <nixfreaknim[m]> Yeah I need to read more about that 
[21:32:31] <nixfreaknim[m]> ahh in only works in collections 
[21:32:51] <nixfreaknim[m]>  let collection = {'a', 'x', 'r'}
[21:32:51] <nixfreaknim[m]>         assert 'a' in collection
[21:33:04] <nixfreaknim[m]> easier to find in the book then the manual 
[21:38:58] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[21:44:07] *** Quits: pro (~pro@user/pro) (Quit: pro)
[21:47:01] <PMunch> @TurtleP, here you go: http://ix.io/3P3L
[21:47:44] <FromDiscord> <TurtleP> jesus that looks complex haha
[21:47:52] <PMunch> It handles objects, nested objects, sequences, and enums
[21:47:58] <FromDiscord> <TurtleP> oooh
[21:48:00] <PMunch> But not objects in sequences I believe
[21:48:24] <PMunch> If you look at the compile-time output you can see what it does
[21:48:42] <PMunch> http://ix.io/3P3M
[21:49:29] <PMunch> It just recursively generates calls to itself until it gets to the base types it can read, then it simply outputs a statement like: `config.build.searchPath = toml["build"]["searchPath"].getStr()`
[21:50:50] <FromDiscord> <TurtleP> huh, neat
[21:52:06] <PMunch> As an exercise to the reader you can try to check that the TOML value is in fact the correct type (now it just uses a default value if it's the wrong type)
[21:52:12] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[21:52:54] <PMunch> And of course handle more types
[21:53:03] <PMunch> By the way you had two misnamed fields
[21:53:35] <FromDiscord> <TurtleP> oh, heh
[21:54:06] <PMunch> config.output.asRaw was called "rawData" and config.build.searchPath was called binSearchPath
[21:54:32] <PMunch> Those will give you an error because the key doesn't exist
[21:55:06] <FromDiscord> <TurtleP> yeah, it's some breaking changes I did
[21:57:11] *** Joins: pro (~pro@user/pro)
[22:01:50] *** Quits: pro (~pro@user/pro) (Client Quit)
[22:02:33] <FromDiscord> <TurtleP> thanks again! ðŸ™‚
[22:02:52] <PMunch> No problem, always fun to write a small macro :)
[22:03:30] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[22:04:00] <FromDiscord> <TurtleP> though wouldn't it also be useful for this to be part of the `parsetoml` library?
[22:13:47] <NimEventer> New post on r/nim by _SleepingOwl: Nim for game development? What are some good frameworks &amp; libs?, see https://reddit.com/r/nim/comments/snrgdc/nim_for_game_development_what_are_some_good/
[23:31:38] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[23:46:31] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:55:04] <FromDiscord> <vindaar> toml is awesome
