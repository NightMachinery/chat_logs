[00:01:33] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:a4cf:e53:898c:2741) (Read error: Connection reset by peer)
[00:02:09] *** Joins: matsaman (~matsaman@user/matsaman)
[00:02:27] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:02:32] *** Joins: jonascj (~jonascj@5.186.121.200.cgn.fibianet.dk)
[00:04:03] *** Joins: grys (~quassel@botters/gry)
[00:05:08] *** Joins: CodeGeek (~codegeek@about/java/CodeGeek)
[00:08:39] *** Quits: bninja (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[00:08:39] *** Quits: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001) (Quit: Bye)
[00:09:03] *** Joins: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001)
[00:09:22] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 260 seconds)
[00:09:51] *** Quits: alkino (~quassel@user/alkino) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:10:37] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (Ping timeout: 252 seconds)
[00:11:11] *** Quits: Fiji- (~Fiji@user/fiji) (Ping timeout: 264 seconds)
[00:11:18] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Remote host closed the connection)
[00:11:18] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[00:11:43] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[00:13:05] *** Joins: yac (~user@user/yac)
[00:13:40] *** Joins: haise01 (~haise01@user/haise01)
[00:14:03] <haise01> Activ8: that is the point of Windows Terminal
[00:14:10] <haise01> I can't go without it on Windows
[00:14:23] <haise01> oops
[00:14:30] *** Parts: haise01 (~haise01@user/haise01) (Leaving)
[00:14:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[00:15:14] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-319d-d758-b30c-53f0.res6.spectrum.com)
[00:15:22] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 258 seconds)
[00:15:41] *** Joins: haise01 (~haise01@user/haise01)
[00:16:50] *** Joins: fikran (~fikran@user/fikran)
[00:17:06] *** Joins: Dr-007 (~nope@92-108-90-26.cable.dynamic.v4.ziggo.nl)
[00:20:01] *** Quits: Dr-007 (~nope@92-108-90-26.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[00:22:19] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[00:22:55] *** Quits: ijr (~user@user/ijr) (Remote host closed the connection)
[00:23:00] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[00:24:42] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[00:24:53] *** southey is now known as foxtrot
[00:26:19] *** Joins: argento (~argent0@168-227-96-26.ptr.westnet.com.ar)
[00:26:23] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[00:28:05] *** Joins: georgios (~georgios@user/georgios)
[00:31:09] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[00:31:35] *** Quits: fluffyballoon (~user@131.93.208.196) (Ping timeout: 264 seconds)
[00:31:41] *** Joins: djhankb (~djhankb@208.113.164.68)
[00:31:47] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[00:32:06] *** Joins: resmo (~resmo@2a00:d420:9:8a00:25e0:3622:ecd:7823)
[00:33:48] *** Joins: slee (~slee@user/slee)
[00:33:52] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[00:35:23] <slee> hi, trying to figure out how i would go about replacing a dynamic piece of a string? i know of str.replace and str['3]..etc...but lets say i have a string dfdfd#1234sdsd and i want to replace just the # and the next 4 characters like #1234
[00:35:43] <slee> err, str[:3]
[00:35:50] <grym> slee: re.sub
[00:36:05] <slee> ty
[00:37:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:38:22] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 258 seconds)
[00:39:27] *** Quits: magla (~gelignite@55d4df94.access.ecotel.net) (Quit: Stay safe!)
[00:39:39] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ncwbqcfe)
[00:42:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[00:43:08] *** Joins: aztec (~Felipe@2804:2238:7b0:7c00:f99a:d3ba:30e9:7585)
[00:43:31] *** Joins: neil (~kneel@rockylinux/infra/neil)
[00:43:34] *** Quits: mcglk_ (~mcglk@131.191.49.120) (Quit: (zzz))
[00:43:45] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Ping timeout: 260 seconds)
[00:43:45] *** Quits: ubert (~Thunderbi@91.141.57.54.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[00:44:52] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[00:48:32] *** Joins: fluffyballoon (~user@131.93.208.196)
[00:49:21] *** Quits: raxor2k (~raxor2k@78.158.233.120) ()
[00:49:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:50:11] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 264 seconds)
[00:54:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[00:56:57] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:58:18] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:00:24] *** Joins: dre (~dre@2001:8003:c932:c301:a599:763f:a8fa:b8c1)
[01:01:43] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:01:47] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[01:07:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[01:08:33] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[01:09:43] <grawity> oh no I'm typing "from cryptography.hazmat.primitives.ciphers.aead import" once again
[01:09:57] <grawity> why are the fancy high-level libraries not interoperable :(
[01:10:06] *** Quits: klu (~klu@user/klu) (Ping timeout: 245 seconds)
[01:11:54] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[01:12:55] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 260 seconds)
[01:13:05] *** Joins: pycurious (~Adium@user/pycurious)
[01:14:35] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[01:14:54] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[01:15:14] <Soni> habnabit_: hi, may we pm?
[01:15:58] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[01:17:49] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-319d-d758-b30c-53f0.res6.spectrum.com) (Quit: Leaving.)
[01:18:07] *** Quits: henistein (~henistein@2001:8a0:fc8f:9501:e84c:2e88:ae63:c9cb) (Quit: Client closed)
[01:18:10] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 260 seconds)
[01:19:31] *** Parts: pragma- (~chaos@user/pragmatic-chaos) (Bye!)
[01:20:29] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:20:37] *** Quits: Narrat (~omnius@p200300df5f49119906ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:20:47] *** Quits: FireFish5000 (~FireFish5@user/firefish5000) (Ping timeout: 264 seconds)
[01:20:57] *** Joins: FireFish5000 (~FireFish5@user/firefish5000)
[01:21:40] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:e425:e861:b579:c88b) (Ping timeout: 260 seconds)
[01:22:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:22:35] *** Quits: jazzy (~jaziz@user/jaziz) (Quit: Beddie bye-bye)
[01:23:11] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 264 seconds)
[01:24:46] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Remote host closed the connection)
[01:25:06] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[01:26:18] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:26:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[01:26:49] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Ping timeout: 268 seconds)
[01:27:40] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-d8aa-8705-3051-d896.res6.spectrum.com)
[01:29:01] *** Joins: jazzy (~jaziz@user/jaziz)
[01:29:05] *** Joins: dre_ (~dre@120.156.30.159)
[01:29:44] *** Joins: cheater (~Username@user/cheater)
[01:29:52] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[01:30:18] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 244 seconds)
[01:30:42] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[01:31:13] *** Joins: djhankb (~djhankb@208.113.164.68)
[01:31:28] *** Quits: dre (~dre@2001:8003:c932:c301:a599:763f:a8fa:b8c1) (Ping timeout: 252 seconds)
[01:31:31] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[01:32:12] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Read error: Connection reset by peer)
[01:33:40] *** Joins: iflema (~ian@user/iflema)
[01:35:14] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[01:36:15] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Ping timeout: 260 seconds)
[01:36:43] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[01:37:35] *** Quits: DaNeenjah (~jake@adsl-74-230-9-207.hsv.bellsouth.net) (Ping timeout: 264 seconds)
[01:39:40] *** Joins: atrigent (~atrigent@50-235-42-169-static.hfc.comcastbusiness.net)
[01:39:43] *** Quits: rannnn8888 (~rannnn888@bzq-79-176-138-108.red.bezeqint.net) (Quit: Client closed)
[01:39:43] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[01:40:05] *** Joins: Shou (~nyah@wikipedia/Davepeta)
[01:41:09] *** Quits: kirua (~Username@134.238.50.4) (Ping timeout: 244 seconds)
[01:42:06] *** Quits: Akuli (~Akuli@213.216.211.158) (Quit: Leaving)
[01:43:13] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 244 seconds)
[01:43:26] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:43:27] *** Quits: jonascj (~jonascj@5.186.121.200.cgn.fibianet.dk) (Quit: Connection closed)
[01:43:32] *** Quits: akk (~akk@75.161.146.115) (Ping timeout: 265 seconds)
[01:43:46] *** Joins: Mindscape (~Lindis@user/lindis)
[01:44:02] <twainwek> I have a web application that is structured like this: https://paste.debian.net/plainh/9ab2a112 -- config.py defines general settings of the application. If i use setup.py to package it up and install it, the config.py gets lost. what's the idomatic way of dealing with projects that are structured like this and contain files outside the source directory?
[01:44:06] *** Quits: Bakunin (~Lindis@user/lindis) (Killed (NickServ (GHOST command used by Mindscape)))
[01:44:15] *** Mindscape is now known as Bakunin
[01:44:58] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:47:27] <twainwek> very quiet today
[01:48:35] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:d3d1:c27a:b7b1:3f00) (Quit: Konversation terminated!)
[01:49:47] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[01:50:17] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[01:55:53] *** Parts: Wafficus (~Wafficus@70.126.240.148) ()
[01:57:10] *** Quits: lovelace (~Elspeth@2.24.23.175) (Quit: Konversation terminated!)
[01:57:18] <ChrisWarrick> twainwek: where do you want the config.py file to end up?
[01:57:48] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[01:59:14] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:59:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:59:41] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[02:00:30] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:01:18] *** Quits: fluffyballoon (~user@131.93.208.196) (Ping timeout: 244 seconds)
[02:01:26] <twainwek> i actually don't know. now i'm wondering if web applications ever get distributed via sdist
[02:02:48] <ChrisWarrick> depends on the application and how it's setup, but I would guess that not many are
[02:03:26] *** Quits: vit (~vit@chello085216193138.chello.sk) (Ping timeout: 245 seconds)
[02:03:33] *** Joins: fuxaches (~terry@S01060cb6d29d89df.ed.shawcable.net)
[02:03:47] <twainwek> then how can i deploy it and not have all the additional blobs like .git, tests, etc on the server
[02:03:59] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 264 seconds)
[02:04:09] <ChrisWarrick> why are those a problem?
[02:04:22] <twainwek> unnecessary and take up space
[02:04:43] <ChrisWarrick> how much space realyl?
[02:04:45] <ChrisWarrick> really?*
[02:05:05] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[02:07:18] *** Joins: fluffyballoon (~user@131.93.208.196)
[02:07:31] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[02:07:51] <ChrisWarrick> for some frameworks, the default setup is compatible with an install to site-packages (eg. django’s); you could perhaps change your structure to put the config file inside your code if you really want that
[02:08:06] *** Joins: palasso_ (~palasso@user/palasso)
[02:08:15] <bpalmer> having a reasonable set of defaults in the code that will apply if there's no config file is not a bad way to write things.
[02:08:31] *** Quits: palasso_ (~palasso@user/palasso) (Client Quit)
[02:11:15] *** Quits: palasso (~palasso@user/palasso) (Ping timeout: 260 seconds)
[02:11:39] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:12:30] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[02:13:35] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[02:13:43] *** Joins: pycurious (~Adium@user/pycurious)
[02:14:24] *** Joins: tg (~tg@rockylinux/infra/tg)
[02:16:52] *** Quits: ghost43_ (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[02:17:44] *** Quits: aztec (~Felipe@2804:2238:7b0:7c00:f99a:d3ba:30e9:7585) (Quit: Leaving)
[02:18:02] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[02:20:26] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:21:03] *** Quits: cdown_ (~cdown@89.32.122.5) (Quit: https://chrisdown.name)
[02:21:58] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 244 seconds)
[02:24:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[02:24:29] *** Quits: nomic (~nomic@85.203.36.101) (Quit: Leaving)
[02:26:11] *** Joins: fikran (~fikran@user/fikran)
[02:26:37] *** Quits: argento (~argent0@168-227-96-26.ptr.westnet.com.ar) (Ping timeout: 244 seconds)
[02:28:05] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:28:31] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:29:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[02:29:43] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[02:31:03] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[02:31:41] *** Joins: djhankb (~djhankb@208.113.164.68)
[02:32:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[02:33:54] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:35:13] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[02:35:59] *** Quits: curiosity (uid511277@user/cypris) (Quit: Connection closed for inactivity)
[02:36:33] *** Joins: Fiji (~Fiji@user/fiji)
[02:37:13] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:39:24] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[02:39:46] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-d8aa-8705-3051-d896.res6.spectrum.com) (Quit: Leaving.)
[02:41:10] *** Quits: Fiji (~Fiji@user/fiji) (Client Quit)
[02:44:11] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 264 seconds)
[02:44:27] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[02:48:46] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[02:49:22] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[02:50:05] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:52:04] *** Quits: spiderman (~spiderman@user/spiderman) (Quit: WeeChat 3.2)
[02:52:11] *** Joins: humanBird (~humanBird@2603-8001-7003-5966-491b-5a54-bf80-483a.res6.spectrum.com)
[02:52:26] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 244 seconds)
[02:54:00] *** Quits: TMan459 (~TMan459@068-187-099-141.res.spectrum.com) (Remote host closed the connection)
[02:54:27] *** Joins: Wulf (~Wulf@user/wulf)
[02:55:44] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[02:55:56] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[02:58:41] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[03:00:58] *** Quits: ali1234 (~al@user/ali1234) (Ping timeout: 258 seconds)
[03:01:53] *** Joins: white_magic (~white_mag@2600:1700:6ae2:a20:cda8:a1b4:3c13:5ba)
[03:02:04] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:03:06] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[03:03:31] *** Joins: TMan459 (~TMan459@068-187-099-141.res.spectrum.com)
[03:03:56] *** Joins: kenoba7 (~kenoba@user/kenoba)
[03:04:02] *** Quits: kenoba (~kenoba@user/kenoba) (Ping timeout: 258 seconds)
[03:04:02] *** kenoba7 is now known as kenoba
[03:06:23] *** Quits: dbristow (~dbristow@user/dbristow) (Ping timeout: 244 seconds)
[03:08:23] <white_magic> Can someone  advise me on a general approach to writing complex objects using SqlAlchemy? If I have a good amount of data coming as json where the structure is something like input_json = "{ [a, b: {c: { "d1"... } ], [a, b: {c: { "d2"... } ], ... entry_9999}"" - and some of these objects already have an entry in the db - would I want to first
[03:08:24] <white_magic> extract from 'input_json' some of the 'inner' values that *may* have entries in the db and then get back objects with primary keys? E.g. give object colletion "d*" (d1.. d2) from my example, if d1 is in the db, I might get an object back with a PK of 1, then I could write d2 to DB get a PK ID of 2. Now I have all the primary keys of these objects
[03:08:24] <white_magic> that I can attach to other objects as foreign keys. Is this a right way to approach such a problem? I could, of course, iterate over the 9999 entres input collection and do this one entry at a time, but it seems inefficient.
[03:08:58] <oneforall2> ok in virtualenv.py  I changed import distutils.sysconfig  to import sysconfig  and from distutils.version import LooseVersion  to from packaging.version import Version as LooseVersion   then I get  No protocol specified
[03:10:50] *** Joins: dbristow (~dbristow@user/dbristow)
[03:11:17] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[03:11:44] *** Quits: humanBird (~humanBird@2603-8001-7003-5966-491b-5a54-bf80-483a.res6.spectrum.com) (Quit: Client closed)
[03:12:21] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[03:14:39] *** Joins: ali1234 (~al@user/ali1234)
[03:15:59] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[03:17:34] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:18:41] *** Joins: argento (~argent0@168-227-96-26.ptr.westnet.com.ar)
[03:19:05] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:21:18] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:21:20] *** Joins: adder (~adder@user/adder)
[03:24:25] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:24:29] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 244 seconds)
[03:25:20] *** Quits: slee (~slee@user/slee) (Quit: Leaving)
[03:25:34] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[03:25:48] *** Joins: cdown_ (~cdown@163.114.131.1)
[03:26:49] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[03:28:35] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 264 seconds)
[03:28:42] *** cdown_ is now known as cdown
[03:28:46] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[03:30:20] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:44] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:31:36] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[03:31:40] <kevr> Hello. I have some pytests, I'm trying to mock a particular function in my code-base that is reused numerous times in a test call, but I only want the mocked operation to occur for specific inputs. I cannot simply pass it through in a side effect, because I just get infinite recursion (because the mock is trying to call what is being mocked for the non-mocked values).
[03:31:50] <kevr> I'm using unittest.mock currently.
[03:32:02] <kevr> Anybody have a link to an example of doing this?
[03:32:26] *** Joins: brabrax (~brabrax@user/brabrax)
[03:34:10] <bpalmer> there are probably other ways to do this, but why not just replace it with a fake that you control the exact implementation of?
[03:34:56] <kevr> bpalmer: Because mocking makes doing that cleaner without adding specific test code for that purpose.
[03:35:11] <kevr> Or, it can, at least.
[03:35:52] <bpalmer> If it gets to the point that you're spending more than a few minutes looking up how to work around the mocking library ...
[03:36:09] <bpalmer> at any rate. That's my suggestion for how to accomplish the task, others may have others.
[03:37:06] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:37:59] <kevr> bpalmer: Yeah, you're right. A fake function might just be the way to go.
[03:38:35] <kevr> Hmm...
[03:40:59] *** Joins: pycurious (~Adium@user/pycurious)
[03:41:21] *** Quits: zepolen (~zepolen@2a02:587:8625:db90:7403:55bd:fb54:a40f) (Ping timeout: 245 seconds)
[03:41:25] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[03:42:24] <kevr> Screw it.
[03:42:36] <kevr> Feels hacky, but mock doesn't seem to have a straightforward way to do this.
[03:42:46] <kevr> Which feels pretty weird. That is... part of what mocks are kinda good for.
[03:42:50] <kevr> It has to be a thing.
[03:42:55] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 252 seconds)
[03:43:17] <kevr> bpalmer: Thanks for correcting my approach!
[03:43:43] *** Joins: amo (~amogorkon@port-92-196-19-82.dynamic.as20676.net)
[03:44:40] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-2856-a84d-e2a6-040f.res6.spectrum.com)
[03:45:58] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[03:46:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:46:42] *** Quits: amogorkon (~amogorkon@port-92-196-68-210.dynamic.as20676.net) (Ping timeout: 244 seconds)
[03:47:09] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:47:25] <twb> OK so I have something like chroot_path, bin_path = pathlib.Path('/tmp/c'), pathlib.Path('/bin/runuser')
[03:47:41] <twb> And (chroot_path / bin_path) doesn't do what I want
[03:48:03] <twb> Is there a less awful workaround than chroot_path.joinpath(*bin_path.parts[1:]) ?
[03:48:18] *** SallyAhaj_ is now known as SallyAhaj
[03:48:37] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Remote host closed the connection)
[03:49:13] <bpalmer> kevr: I just have little patience for the subtleties of mock libraries. Glad it worked.
[03:49:16] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 244 seconds)
[03:49:26] <bpalmer> twb: what do you want?  '/tmp/c/bin/runuser' ?
[03:49:29] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[03:49:30] <twb> bpalmer: right
[03:49:37] <twb> it's not Just Working because bin_path is absolute
[03:52:09] <kevr> bpalmer: They definitely could do some work to make it a bit more straight-forward. For some reason they don't, though. Perhaps they think it's "golden" :P
[03:54:37] *** Joins: zepolen (~zepolen@2a02:587:8625:db90:7403:55bd:fb54:a40f)
[03:56:30] *** Quits: fluffyballoon (~user@131.93.208.196) (Ping timeout: 244 seconds)
[03:56:31] *** Quits: alex11 (~alex11@user/alex11) (Ping timeout: 244 seconds)
[03:58:14] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[03:58:54] <bpalmer> twb: I think that may honestly be the best approach; there doesn't seem to be any good graft functions for the tree.
[03:59:10] <twb> OK, thanks for the sanity-check anyway
[03:59:22] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[03:59:25] <twb> bpalmer: I considered something like .with_anchor(None) but I can't see a nice way to do that
[04:04:49] *** Joins: nomic (~nomic@85.203.36.101)
[04:05:05] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[04:07:19] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:08:26] *** Quits: yac (~user@user/yac) (Ping timeout: 245 seconds)
[04:08:31] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[04:09:44] *** Joins: yac (~user@user/yac)
[04:11:46] *** Joins: zebrag (~chris@user/zebrag)
[04:12:13] *** Quits: fannagoganna (uid110488@id-110488.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[04:14:35] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:14:40] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[04:15:03] *** Joins: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[04:16:06] *** Quits: twobitsprite (~twobitspr@66.115.175.48) (Ping timeout: 258 seconds)
[04:16:16] *** Joins: chenqisu1 (~xirndc@183.217.203.91)
[04:16:58] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[04:16:59] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[04:17:50] *** Joins: twobitsprite (~twobitspr@66.115.175.46)
[04:18:06] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:18:49] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-2856-a84d-e2a6-040f.res6.spectrum.com) (Quit: Leaving.)
[04:19:02] *** Quits: oz4ga (~tim@93.90.4.233) (Ping timeout: 260 seconds)
[04:20:01] *** Quits: dre_ (~dre@120.156.30.159) (Quit: Leaving)
[04:20:20] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[04:20:44] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[04:21:49] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[04:25:41] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:26:11] *** Quits: flokuehn (~flokuehn@muedsl-82-207-236-004.citykom.de) (Ping timeout: 264 seconds)
[04:27:43] *** Joins: flokuehn (~flokuehn@i577BC67B.versanet.de)
[04:28:35] *** Quits: hurley (~svgsponer@2a02:168:6f92:0:ef5f:4af3:1e56:2577) (Ping timeout: 264 seconds)
[04:29:22] *** Quits: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[04:29:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:29:40] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-15ca-f83b-0b2f-e606.res6.spectrum.com)
[04:30:26] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:30:37] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 244 seconds)
[04:31:18] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[04:31:52] *** Joins: djhankb (~djhankb@208.113.164.68)
[04:33:30] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[04:33:51] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-15ca-f83b-0b2f-e606.res6.spectrum.com) (Ping timeout: 245 seconds)
[04:34:14] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 244 seconds)
[04:34:14] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 244 seconds)
[04:34:14] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[04:35:31] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[04:35:32] *** Joins: fikran (~fikran@user/fikran)
[04:36:42] <oneforall2> No protocol specified .Too few arguments
[04:37:18] *** Quits: white_magic (~white_mag@2600:1700:6ae2:a20:cda8:a1b4:3c13:5ba) (Quit: Client closed)
[04:38:20] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:39:01] *** Quits: Jefren1 (~Jefren@70.35.67.111) (Ping timeout: 252 seconds)
[04:39:07] *** Quits: yitz (~yitz@exercism/yitz) (Remote host closed the connection)
[04:39:27] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-ada9-bec7-b88d-273e.res6.spectrum.com)
[04:40:00] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 260 seconds)
[04:41:50] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-ada9-bec7-b88d-273e.res6.spectrum.com) (Client Quit)
[04:43:25] *** Quits: argento (~argent0@168-227-96-26.ptr.westnet.com.ar) (Quit: leaving)
[04:43:35] *** Joins: hrob (~hrob@31-209-232-158.dsl.dynamic.simnet.is)
[04:43:39] *** Joins: Vonter (~Vonter@user/vonter)
[04:47:23] *** Quits: atrigent (~atrigent@50-235-42-169-static.hfc.comcastbusiness.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:49:13] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 244 seconds)
[04:51:04] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[04:52:11] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 245 seconds)
[04:52:20] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:52:40] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[04:52:57] *** Joins: brabrax (~brabrax@user/brabrax)
[04:54:35] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[04:54:51] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[04:55:13] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[04:57:04] *** Joins: vlm (~vlm@user/vlm)
[04:57:17] *** Quits: adder (~adder@user/adder) (Remote host closed the connection)
[05:00:15] *** Joins: The_Jag (~The_Jag@host-79-13-46-237.retail.telecomitalia.it)
[05:02:07] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[05:03:23] *** Quits: The_Jag_ (~The_Jag@host-87-15-17-212.retail.telecomitalia.it) (Ping timeout: 264 seconds)
[05:03:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[05:04:53] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[05:05:14] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[05:08:28] *** Quits: gableroux (~gableroux@bras-base-jnqrpq0202w-grc-22-76-65-187-26.dsl.bell.ca) (Ping timeout: 265 seconds)
[05:09:48] *** Quits: jazzy (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[05:10:17] *** Joins: jazzy (~jaziz@user/jaziz)
[05:14:07] *** Joins: mossman93 (~quassel@user/mossman93)
[05:14:29] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[05:16:04] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 244 seconds)
[05:16:35] *** Joins: Player001 (~Player001@user/player001)
[05:18:42] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[05:20:20] *** Quits: nomic (~nomic@85.203.36.101) (Quit: Leaving)
[05:22:14] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[05:25:15] *** Joins: jazzy2 (~jaziz@user/jaziz)
[05:25:43] *** Quits: jazzy (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[05:25:53] *** Joins: nomic (~nomic@85.203.36.101)
[05:25:55] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Quit: Going offline, see ya! (www.adiirc.com))
[05:26:03] *** Joins: jazzy3 (~jaziz@user/jaziz)
[05:26:24] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[05:26:31] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Remote host closed the connection)
[05:27:16] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[05:28:27] *** Joins: srhm (~srhm@user/srhm)
[05:28:57] *** jazzy3 is now known as jazzy
[05:29:58] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 260 seconds)
[05:30:49] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[05:31:01] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[05:31:08] <oneforall2> python >>> how do I clear ir to start over ?
[05:31:18] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[05:31:31] *** Joins: zaz\ (~zaz@poneybl.eu)
[05:31:53] *** Joins: djhankb (~djhankb@208.113.164.68)
[05:32:09] *** Quits: sharperguy (~sharpergu@89.244.121.254) (Ping timeout: 265 seconds)
[05:32:11] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[05:33:37] *** Joins: sharperguy (~sharpergu@89.244.123.89)
[05:34:57] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:35:29] *** Joins: minip (~minip@user/minip)
[05:35:50] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[05:36:58] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Ping timeout: 260 seconds)
[05:38:10] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:38:48] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 244 seconds)
[05:40:27] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[05:42:50] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[05:44:05] *** Quits: hrob (~hrob@31-209-232-158.dsl.dynamic.simnet.is) (Quit: Client closed)
[05:46:11] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 258 seconds)
[05:47:12] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Ping timeout: 260 seconds)
[05:47:47] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[05:47:56] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[05:48:50] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[05:52:56] *** Quits: ethrl (uid524335@user/doforlove33) (Read error: Connection reset by peer)
[05:53:01] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Read error: Connection reset by peer)
[05:53:11] *** Quits: dez (uid92154@user/dez) (Ping timeout: 264 seconds)
[05:54:30] *** Joins: ethrl (uid524335@user/doforlove33)
[05:54:31] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[05:54:55] *** Joins: dez (uid92154@user/dez)
[05:55:32] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[05:57:09] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[05:57:56] *** Parts: fuxaches (~terry@S01060cb6d29d89df.ed.shawcable.net) ()
[06:00:00] *** Quits: Shou (~nyah@wikipedia/Davepeta) (Remote host closed the connection)
[06:01:01] *** Quits: nomic (~nomic@85.203.36.101) (Quit: Leaving)
[06:03:32] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:04:05] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:05:22] *** Joins: lastshell (~lastshell@user/lastshell)
[06:05:31] *** Joins: alex11 (~alex11@user/alex11)
[06:06:22] *** Joins: emf (~emf@2620:10d:c090:400::5:b46d)
[06:07:45] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 244 seconds)
[06:11:22] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 244 seconds)
[06:13:32] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:13:45] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[06:15:10] *** Joins: srhm (~srhm@user/srhm)
[06:19:44] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:20:24] *** Joins: srhm (~srhm@user/srhm)
[06:20:30] *** Quits: Player001 (~Player001@user/player001) (Quit: read Deleuze)
[06:22:05] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[06:22:30] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:22:36] *** Joins: nomic (~nomic@85.203.36.101)
[06:24:50] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:25:17] *** Joins: srhm (~srhm@user/srhm)
[06:28:57] *** Joins: Fiji (~Fiji@user/fiji)
[06:29:13] *** Quits: km (~km@user/km) (Remote host closed the connection)
[06:29:39] *** Joins: km (~km@user/km)
[06:30:36] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[06:31:11] *** Joins: djhankb (~djhankb@208.113.164.68)
[06:31:58] *** Joins: ItsLandon (~quassel@2601:1c0:6d03:1cb0:48b5:e936:6723:d87c)
[06:32:37] *** Quits: lastshell (~lastshell@user/lastshell) (Quit: WeeChat 3.0)
[06:32:45] <ItsLandon> If I've done `pip3 download <package>` is there a way to later check whether the whl for <package> is the latest?
[06:33:48] <dude-x> ItsLandon pip3 list -o
[06:34:03] <dude-x> ItsLandon pip3 list -o | grep <package>
[06:35:28] <ItsLandon> dude-x: Doesn't that just show outdated for installed modules?
[06:35:47] <dude-x> it shows every outdated package you've installed
[06:36:01] <dude-x> you can grep for the ones that you're interested in though
[06:36:23] <ItsLandon> So for example if I've done `pip3 download pip` it will download pip-21.3.1-py3-none-any.whl and save it to the working directory.  If I wanted to check whether pip-21.3.1-py3-none-any.whl is up to date, how would I do that?
[06:37:29] <dude-x> if the package is a wheel it's a safe bet (but not guaranteed) that if a library/module is updated to a newer version, it will be available as a wheel
[06:38:02] <ItsLandon> How do I check whether pip-21.3.1-py3-none-any.whl is the latest version though?
[06:38:32] <dude-x> for pip itself, it will tell you if there is a new version available
[06:38:39] <dude-x> any other package you can check with pip list -o
[06:38:53] <ItsLandon> How do I get pip to tell me?
[06:39:23] <dude-x> pip list -o will list all the outdated packages, meaning there is a new version is available. however some packages may have pinned versions
[06:39:30] <dude-x> so you may have to ignore that info
[06:39:45] <ItsLandon> I'm not asking how to check for updates for modules that I've installed.
[06:39:53] <dude-x> jsut for wheels?
[06:40:04] <ItsLandon> I think so.
[06:40:05] <dude-x> you would probably have to probe the pypi index
[06:40:24] <dude-x> but that's not nice
[06:41:11] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:41:20] <ItsLandon> I could just download it any time I need it :/
[06:41:39] <ItsLandon> Less efficient but easier.
[06:41:54] <dude-x> if you want to scan the list of wheels, and check for new versions, i don't know why you won't want to use pip list -o
[06:42:00] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-14d5-eaa7-7c2b-6e6a.res6.spectrum.com)
[06:42:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[06:43:24] <ItsLandon> I'm manually unzipping them to site-packages in the Python3 that gets shipped with Libreoffice for Windows because they don't know how to ship pip3 with it and it's not possible to bootstrap it.
[06:43:53] <dude-x> i see. i think pypi has an api to check packages
[06:44:18] <dude-x> it should tell you what images are available (packed zip files and wheels)
[06:44:53] *** Joins: fikran (~fikran@user/fikran)
[06:45:09] <ItsLandon> Prolly. I'm not gonna worry too hard about it tbh. It's not mission-critical
[06:45:16] <ItsLandon> Thanks for your help though
[06:45:25] *** Quits: ItsLandon (~quassel@2601:1c0:6d03:1cb0:48b5:e936:6723:d87c) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:45:45] <dude-x> you might consider using a caching Pypi sever like devpi and modify the code to check periodically
[06:47:46] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[06:53:08] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:56:31] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[06:56:47] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 264 seconds)
[06:58:42] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[06:58:55] *** Joins: anonymeowo (~anonymeow@185.213.154.243)
[06:59:41] *** Joins: Warped (~Warped@user/warped)
[06:59:49] *** Joins: parv (~quass@user/parv)
[07:00:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:02:17] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:02:34] *** Joins: dre (~dre@2001:8003:c932:c301:a599:763f:a8fa:b8c1)
[07:02:40] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:03:07] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:f580:3b47:1a1c:cfb5) (Quit: Textual IRC Client: www.textualapp.com)
[07:03:20] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:04:09] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[07:05:00] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[07:05:37] *** Joins: minip (~minip@user/minip)
[07:06:48] *** Joins: Nact (~l@host-85-27-120-251.dynamic.voo.be)
[07:08:36] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 258 seconds)
[07:09:13] *** Joins: rany (~rany@user/rany)
[07:10:11] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[07:13:38] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[07:14:53] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:a8a9:e2b3:d3e0:ca13)
[07:16:13] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[07:18:10] *** Joins: yitz (~yitz@exercism/yitz)
[07:18:53] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[07:21:04] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Remote host closed the connection)
[07:21:23] *** Quits: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[07:21:36] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[07:21:39] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[07:26:16] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 244 seconds)
[07:27:33] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:27:59] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:595a:f6da:32d3:4e89) (Ping timeout: 264 seconds)
[07:28:45] *** Joins: dre_ (~dre@120.156.30.159)
[07:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[07:31:10] *** Joins: djhankb (~djhankb@208.113.164.68)
[07:31:13] *** Quits: dre (~dre@2001:8003:c932:c301:a599:763f:a8fa:b8c1) (Ping timeout: 258 seconds)
[07:31:58] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 244 seconds)
[07:32:48] *** Quits: Bakunin (~Lindis@user/lindis) (Remote host closed the connection)
[07:33:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[07:33:38] *** Joins: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net)
[07:33:46] *** Quits: llh (~llh@user/llh) (Read error: Connection reset by peer)
[07:33:49] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[07:35:58] *** Joins: jamer05 (~jamer05@user/jamer05)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:51] *** Joins: Player001 (~Player001@user/player001)
[07:37:48] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[07:38:29] *** Joins: srhm (~srhm@user/srhm)
[07:38:42] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[07:39:14] *** Joins: mickey8 (~user@user/mickey)
[07:39:42] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 260 seconds)
[07:39:59] *** Joins: mei (~mei@user/mei)
[07:41:27] *** Joins: analoq (~yashi@user/dies)
[07:43:19] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 244 seconds)
[07:43:40] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[07:53:13] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:a8a9:e2b3:d3e0:ca13) (Quit: Textual IRC Client: www.textualapp.com)
[07:55:12] *** Joins: grandrew (~grandrew@2601:642:c301:c600:f22f:74ff:feac:90a3)
[07:55:12] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[07:55:43] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:55:57] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Ping timeout: 276 seconds)
[07:56:01] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[07:58:57] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[08:01:23] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[08:02:33] *** Joins: mcglk (~mcglk@131.191.49.120)
[08:03:23] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:a8a9:e2b3:d3e0:ca13)
[08:04:05] *** Joins: whatsupdoc57 (~whatsupdo@148.64.20.46)
[08:04:24] *** Quits: KevinX (~KevinX@94.140.8.81) (Ping timeout: 265 seconds)
[08:04:42] *** Joins: KevinX (~KevinX@212.102.47.75)
[08:07:54] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[08:08:26] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (Ping timeout: 246 seconds)
[08:08:59] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:09:14] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[08:09:37] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[08:11:13] *** Joins: Batzy (~Batzy@user/batzy)
[08:13:34] *** Joins: zaquest (~notzaques@5.128.210.178)
[08:14:01] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[08:15:33] *** Quits: Batzy (~Batzy@user/batzy) (Client Quit)
[08:15:54] *** Joins: Batzy (~Batzy@user/batzy)
[08:17:27] *** Joins: kia (~kia@user/kia)
[08:18:23] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 264 seconds)
[08:19:36] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[08:19:47] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-14d5-eaa7-7c2b-6e6a.res6.spectrum.com) (Quit: Leaving.)
[08:20:11] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 264 seconds)
[08:20:40] *** Joins: lethu (~lethu@user/lethu)
[08:21:33] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[08:22:36] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:23:09] *** Quits: whatsupdoc57 (~whatsupdo@148.64.20.46) (Quit: Client closed)
[08:24:02] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-b022-535d-865a-b86f.res6.spectrum.com)
[08:25:28] *** Joins: Vonter (~Vonter@user/vonter)
[08:25:41] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 244 seconds)
[08:27:30] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:27:42] *** Joins: carl- (~carl-@185.103.188.130)
[08:28:50] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[08:28:59] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[08:29:40] *** Joins: stranac (~stranac@195.29.239.126)
[08:30:24] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (*.net *.split)
[08:30:25] *** Quits: rolandog[m] (~rolandogm@2001:470:69fc:105::972f) (*.net *.split)
[08:30:25] *** Quits: dngray[m] (~dngray@user/dngray) (*.net *.split)
[08:30:25] *** Quits: bim9262[m] (~bim9262@user/bim9262) (*.net *.split)
[08:30:25] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (*.net *.split)
[08:30:25] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (*.net *.split)
[08:30:25] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (*.net *.split)
[08:30:25] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[08:30:25] *** Quits: pie__ (~pie_bnc@user/pie/x-2818909) (*.net *.split)
[08:30:25] *** Quits: prime (~prime@user/prime) (*.net *.split)
[08:30:25] *** Quits: sale_ (~sale@ypocit.initech.link) (*.net *.split)
[08:30:25] *** Quits: aeadio (~aead@user/aead) (*.net *.split)
[08:30:25] *** Quits: sdfgsdfg (sdfgsdfg@user/sdfgsdfg) (*.net *.split)
[08:30:25] *** Quits: dskull (~dskull@user/dskull) (*.net *.split)
[08:30:25] *** Quits: f8e4_ (~user@159.89.21.45) (*.net *.split)
[08:30:25] *** Quits: Raichvent (~Raichvent@193.123.33.210) (*.net *.split)
[08:30:25] *** Quits: jpaa_ (~jpaa@87.118.126.66) (*.net *.split)
[08:30:25] *** Quits: waveform (~quassel@waveform.plus.com) (*.net *.split)
[08:30:25] *** Quits: saschi (~saschi@user/saschi) (*.net *.split)
[08:30:25] *** Quits: enkrypt (~enkrypt@user/enkrypt) (*.net *.split)
[08:30:25] *** Quits: OMGOMG (~bobrobert@poppy.ifi.uio.no) (*.net *.split)
[08:30:25] *** Quits: trench (trench@user/trench) (*.net *.split)
[08:30:25] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[08:30:25] *** Quits: taru9 (~realTaru9@user/taru9) (*.net *.split)
[08:30:25] *** Quits: fredrikh1 (~fhl@myrsnipa.uio.no) (*.net *.split)
[08:30:25] *** Quits: gizmo_ (~gizmo@45.91.125.2) (*.net *.split)
[08:30:25] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[08:30:25] *** Quits: tnez (~el@user/tnez) (*.net *.split)
[08:30:25] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[08:30:25] *** Quits: lorenzosu (~lorenzosu@user/lorenzosu) (*.net *.split)
[08:30:25] *** Quits: kantlivelong (~kantlivel@octoprint/kantlivelong) (*.net *.split)
[08:30:25] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (*.net *.split)
[08:30:25] *** Quits: richrd (~wavi@thelounge/maintainer/wavi) (*.net *.split)
[08:30:25] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (*.net *.split)
[08:30:25] *** Quits: introom (introom@2600:3c01::f03c:92ff:fea3:2cf) (*.net *.split)
[08:30:25] *** Quits: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) (*.net *.split)
[08:30:25] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[08:30:25] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (*.net *.split)
[08:30:25] *** Quits: braxas (sid508886@lymington.irccloud.com) (*.net *.split)
[08:30:25] *** Quits: setuid (sid191390@canonical/setuid) (*.net *.split)
[08:30:25] *** Quits: vinay_ (~Vinay@user/vinay-keshava) (*.net *.split)
[08:30:25] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[08:30:25] *** Quits: effprime (~effprime@user/effprime) (*.net *.split)
[08:30:25] *** Quits: Darkfoe1 (~chuck@drunk.serverfail.party) (*.net *.split)
[08:30:25] *** Quits: mboehn (mathias@hh1.nuxis.org) (*.net *.split)
[08:30:25] *** Quits: spaceone (~spaceone@wc1.wechall.net) (*.net *.split)
[08:30:25] *** Quits: paperManu (~paperManu@138.197.128.151) (*.net *.split)
[08:30:25] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[08:30:25] *** Quits: Wooble (~Wooble@107.170.27.240) (*.net *.split)
[08:30:25] *** Quits: marienz__ (~marienz@libera/staff/marienz) (*.net *.split)
[08:30:25] *** Quits: roniez (~roniez@nixsec.se) (*.net *.split)
[08:30:25] *** Quits: lxdr (~lxdr@user/lxdr) (*.net *.split)
[08:30:25] *** Quits: jocke-l (jocke-l@a.x0.is) (*.net *.split)
[08:30:33] *** Joins: OMGOMG (~bobrobert@poppy.ifi.uio.no)
[08:30:35] *** Joins: trench (trench@user/trench)
[08:30:35] *** Joins: vinay (~Vinay@user/vinay-keshava)
[08:30:36] *** Joins: lorenzosu (~lorenzosu@user/lorenzosu)
[08:30:38] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[08:30:38] *** Joins: fredrikhl (~fhl@myrsnipa.uio.no)
[08:30:41] *** Joins: carbolymer (~carbolyme@dropacid.net)
[08:30:44] *** Joins: braxas (sid508886@id-508886.lymington.irccloud.com)
[08:30:51] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[08:30:51] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[08:30:51] *** Joins: waveform (~quassel@waveform.plus.com)
[08:30:54] *** Joins: jpaa (~jpaa@87.118.126.66)
[08:30:55] *** Joins: Deaygo (~Deaygo@let.deaygo.in)
[08:30:59] *** Joins: richrd (~wavi@thelounge/maintainer/wavi)
[08:31:00] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[08:31:05] *** Joins: dskull (~dskull@user/dskull)
[08:31:06] *** Joins: jocke-l (jocke-l@a.x0.is)
[08:31:06] *** Joins: Raichvent (~Raichvent@193.123.33.210)
[08:31:18] *** Joins: taru9 (~realTaru9@user/taru9)
[08:31:20] *** Joins: paperManu (~paperManu@138.197.128.151)
[08:31:23] *** Joins: lxdr (~lxdr@user/lxdr)
[08:31:24] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[08:31:26] *** Joins: f8e4_ (~user@159.89.21.45)
[08:31:26] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[08:31:26] *** Joins: effprime (~effprime@user/effprime)
[08:31:28] *** Joins: roniez (~roniez@nixsec.se)
[08:31:30] *** Joins: prime (~prime@user/prime)
[08:31:30] *** Joins: sale (~sale@ypocit.initech.link)
[08:31:31] *** Joins: Wooble (~Wooble@107.170.27.240)
[08:31:31] *** Joins: djhankb (~djhankb@208.113.164.68)
[08:31:32] *** Joins: upsala (~zcb@185.213.155.160)
[08:31:35] *** Joins: kantlivelong (~kantlivel@octoprint/kantlivelong)
[08:31:37] *** Joins: marienz__ (~marienz@libera/staff/marienz)
[08:31:38] *** Joins: aead (~aead@user/aead)
[08:31:49] *** Joins: Darkfoe1 (~chuck@drunk.serverfail.party)
[08:32:14] *** Joins: tnez (~el@user/tnez)
[08:32:44] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Client Quit)
[08:33:16] *** Joins: Ekho (~Ekho@user/ekho)
[08:33:26] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[08:33:27] *** Joins: bim9262[m] (~bim9262@user/bim9262)
[08:33:50] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 260 seconds)
[08:33:55] *** Joins: dngray[m] (~dngray@user/dngray)
[08:34:33] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[08:34:38] *** Quits: Batzy (~Batzy@user/batzy) (Quit: lata)
[08:34:41] *** Joins: sdfgsdfg (sdfgsdfg@user/sdfgsdfg)
[08:36:59] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:37:53] *** Joins: avikalp (~avikalp@49.36.99.188)
[08:38:48] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[08:41:43] *** Quits: mawk (~mawk@wireguard/contributor/mawk) (Ping timeout: 244 seconds)
[08:42:19] *** Quits: sandb0y (~pirate@user/sandb0y) (Quit: Time for another great escape)
[08:44:45] *** Quits: damonlynch (~ngaio@static-68-235-44-55.cust.tzulo.com) (Quit: Leaving)
[08:47:43] *** Joins: dvx (~dvx@185.63.97.64)
[08:48:01] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[08:48:36] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[08:51:41] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[08:52:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[08:52:58] *** Quits: carl- (~carl-@185.103.188.130) (Ping timeout: 260 seconds)
[08:53:37] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[08:54:14] *** Joins: fikran (~fikran@user/fikran)
[08:57:53] *** Joins: snalty_ (~Shhh@user/snalty)
[08:59:02] *** Quits: snalty (~Shhh@user/snalty) (Ping timeout: 260 seconds)
[09:02:34] *** Joins: djapo (~archangel@user/djapo)
[09:02:56] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[09:03:34] *** Joins: nemosaltat (~nemosalta@cpe-45-50-45-153.socal.res.rr.com)
[09:07:20] *** Joins: FurCoatStarlette (~FurCoatSt@45.133.7.84)
[09:07:29] *** Quits: km (~km@user/km) (Quit: Leaving)
[09:08:37] <FurCoatStarlette> Hi all, random question! The secrets module provides cryptographically secure generation of pseudo random numbers. I may be in need of glasses, because I can't see if it is still using the Mersenne Twister method (just modified somehow), or an alternate generator method like Intel's RDRAND. Can anyone advise how the secrets module differs from the random module in this sense?
[09:10:34] *** Joins: mindofjoe (~joe@user/lighthouse6)
[09:10:37] *** Quits: nemosaltat (~nemosalta@cpe-45-50-45-153.socal.res.rr.com) (Ping timeout: 265 seconds)
[09:12:28] <Peng> It uses os.urandom().
[09:12:33] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[09:12:51] <Peng> (which usually uses something other than /dev/urandom)
[09:13:41] *** Joins: Vonter (~Vonter@user/vonter)
[09:13:55] <FurCoatStarlette> Thank you Peng
[09:15:31] *** Joins: km (~km@user/km)
[09:15:38] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[09:17:13] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[09:18:12] *** Joins: mawk (~mawk@wireguard/contributor/mawk)
[09:19:06] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:19:47] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[09:20:21] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[09:21:26] <aphysically> there was some politics on whether or not RDRAND is included in the kernel's entropy pool
[09:21:55] <aphysically> I think it ended with it becoming an explicitly opt-in kernel option with scary sounding wording; and I'm not sure if most dists opted to keep using it
[09:22:33] <Peng> IIRC it's used but is counted as providing zero entropy
[09:23:30] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 260 seconds)
[09:24:06] <aphysically> I think there was a patch to bring up the hardware randomness for a chinese company's processor, and the resulting furor on the mailing list about trustworthiness of hw random number generators led to the kernel option being introduced
[09:24:10] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Client Quit)
[09:24:22] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[09:24:31] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[09:24:57] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Quit: Leaving)
[09:25:13] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:8290:1de9:acaa:3a39)
[09:25:48] <supakeen> Peng: since 4.21 or so RDRAND is trusted to seed the CSPRNG :)
[09:26:33] <aphysically> is AMD allowed to seed or do they just have a blocklist for their bad processors?
[09:27:26] <supakeen> aphysically: AMD chips provide RDRAND as well.
[09:27:27] <aphysically> I feel like for some reason I perennially see something about AMD processors with completely broken (like, generates all 1s broken) hardware random
[09:28:00] <aphysically> and I'm not sure if that ever got figured out or if they just blocked AMD processors from contributing to the pool or what
[09:28:36] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[09:28:46] <supakeen> They didn't, most distros have the trust cpu flag turned on for seeding :)
[09:29:01] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[09:29:03] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 260 seconds)
[09:29:45] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 244 seconds)
[09:30:11] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[09:30:42] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[09:30:43] *** Joins: spiderman (~spiderman@user/spiderman)
[09:30:49] *** Joins: vit (~vit@chello085216193138.chello.sk)
[09:31:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:31:12] <aphysically> it probably doesn't make much of a difference in boot time for desktop systems anyway
[09:31:16] *** Joins: djhankb (~djhankb@208.113.164.68)
[09:31:18] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[09:31:35] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[09:32:19] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[09:32:32] <supakeen> AFAIK it's only really relevant for the very first boot without a seed file.
[09:32:47] *** Quits: mawk (~mawk@wireguard/contributor/mawk) (Ping timeout: 260 seconds)
[09:33:12] <supakeen> Systems which actually routinely run into problems tend to have no hardware provisions for CSPRNGs.
[09:33:43] <supakeen> (those mostly idle embedded thingies in your house)
[09:34:43] <aphysically> did you see one of the intel mitigations slowed down their RDRAND by a factor of 100 or something?
[09:34:55] <aphysically> I don't remember how many generations it was; just that my processor was included
[09:35:53] <aphysically> 1% prior performance would be pretty outrageous if it was anything except something like this that doesn't really matter for runtime performance (unless something is being weird and using RDRAND directly instead of urandom or some such )
[09:36:54] <aphysically> supakeen: yeah I hate when my fridge can't turn on cause it doesn't have enough entropy ;^)
[09:38:15] <supakeen> I don't know if the mitigations for that are turned on in Linux.
[09:38:30] <aphysically> it was in a microcode update actually
[09:38:52] <aphysically> (so you'll have it if you're affected and up-to-date)
[09:39:10] *** Joins: carl- (~carl-@185.103.188.130)
[09:39:38] <aphysically> anyone else start wondering what's gonna be announced in a few months time when they get a new microcode update? :D
[09:39:47] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:40:35] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[09:41:02] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[09:41:08] <supakeen> It's also 'just a flag' to turn the special register protection on and off.
[09:41:20] *** Quits: anonymeowo (~anonymeow@185.213.154.243) (Quit: Konversation terminated!)
[09:42:02] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 265 seconds)
[09:43:27] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Read error: Connection reset by peer)
[09:43:54] <aphysically> there was some interesting discussion on the ML about new typing syntax and the question of scope came up again
[09:44:49] <aphysically> it seems a number of people want a way to declare the typevar in the scope it's used in (like in the <T> by the def in e.g. typescript) so that it's less confusing for people
[09:45:36] *** Joins: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d)
[09:45:40] <aphysically> but I just don't see the community buying into new syntax based on what I've seen on the ML for most syntax stuff
[09:45:55] <aphysically> so I think it would have to be figured out how to do it without parser changes
[09:45:56] *** Joins: alkino (~quassel@user/alkino)
[09:46:59] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:47:20] *** Quits: seednode4 (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:48:04] *** Joins: seednode4 (~seednode@user/seednode)
[09:49:18] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[09:49:20] *** Joins: alzgh (~alzgh@user/alzgh)
[09:49:30] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[09:49:37] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Client Quit)
[09:50:06] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[09:50:20] *** Quits: twb (~twb@159-196-230-25.9fc4e6.mel.nbn.aussiebb.net) (Ping timeout: 260 seconds)
[09:53:23] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Quit: Leaving...)
[09:54:09] *** Quits: jazzy (~jaziz@user/jaziz) (Quit: Beddie bye-bye)
[09:54:32] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:54:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[09:54:56] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[09:57:51] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[09:57:57] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[09:58:00] *** Joins: hanaan (~naan@user/naan)
[09:58:28] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 265 seconds)
[10:00:06] *** Quits: dre_ (~dre@120.156.30.159) (Quit: Leaving)
[10:00:42] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[10:00:44] *** Joins: swensson (~swensson@213.88.131.10)
[10:01:19] *** Quits: Naan (~naan@user/naan) (Ping timeout: 252 seconds)
[10:02:11] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-0d00-af10-da91-027d.res6.spectrum.com) (Ping timeout: 245 seconds)
[10:03:47] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[10:04:17] *** Joins: kosh (~kosh@user/kosh)
[10:04:30] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-0d00-af10-da91-027d.res6.spectrum.com)
[10:04:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[10:04:43] <parv> Is there a way to hasten the file read when getting SHA 256 message digest of a file? Currently I am reading a file & passing it to hashlib.sha256().update()
[10:05:56] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 244 seconds)
[10:06:05] *** Quits: swensson (~swensson@213.88.131.10) (Quit: Client closed)
[10:08:00] *** Quits: sharperguy (~sharpergu@89.244.123.89) (Ping timeout: 258 seconds)
[10:08:09] *** Joins: manti7 (~manti7@176.10.104.94)
[10:08:11] *** Quits: PixelRobot (~PixelRobo@139.47.80.69) (Ping timeout: 264 seconds)
[10:08:43] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 260 seconds)
[10:09:47] *** Joins: sharperguy (~sharpergu@fnord.cryptophone.de)
[10:10:01] *** Joins: OnceMe (~stefan@user/onceme)
[10:10:24] <OnceMe> how to add --turboMode which is optional, so when user pass --turboMode I can in script to check if its true?
[10:11:03] *** Joins: Batzy (~Batzy@user/batzy)
[10:11:14] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[10:11:21] <KirkMcDonald> OnceMe: The argparse module can help with this.
[10:11:23] <parv> File reading & getting digest example: https://termbin.com/zpwz
[10:11:48] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[10:12:21] <KirkMcDonald> parv: You can also do it piece-by-piece if the file is too large to read all at once.
[10:12:34] <parv> Reading file over NFS surely does not help
[10:13:04] <KirkMcDonald> NFS rarely does.
[10:13:07] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Read error: Connection reset by peer)
[10:14:19] *** Quits: sharperguy (~sharpergu@fnord.cryptophone.de) (Ping timeout: 260 seconds)
[10:15:06] *** Joins: sharperguy (~sharpergu@89.244.123.89)
[10:15:31] <parv> KirkMcDonald, There is more enough RAM (64GB) to read ~25MB file in one go. Do you imply that reading in chunks would be faster?
[10:15:57] <supakeen> With NFS all bets are off. That file is small enough to just read in 'one go'.
[10:16:07] <parv> Aye
[10:16:11] <supakeen> Any optimizations to file reads are usually super dependent on your system and the actual size of the file.
[10:16:37] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[10:16:50] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 265 seconds)
[10:16:50] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[10:17:23] <KirkMcDonald> 25 MB is small enough that you can probably decide not to worry about it.
[10:18:03] *** Quits: resmo (~resmo@2a00:d420:9:8a00:25e0:3622:ecd:7823) (Remote host closed the connection)
[10:18:17] *** Joins: resmo (~resmo@2a00:d420:9:8a00:3231:b19f:574:4c10)
[10:18:18] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[10:18:29] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[10:18:34] <parv> Ok then. I will just leave the existing state as is
[10:19:05] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[10:20:50] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[10:20:50] *** Quits: nomic (~nomic@85.203.36.101) (Quit: Leaving)
[10:24:38] <parv> KirkMcDonald, supakeen  Thanks
[10:25:46] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[10:26:30] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[10:27:33] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[10:28:12] *** Joins: iomari891 (~iomari891@105.112.138.38)
[10:29:11] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 244 seconds)
[10:30:44] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[10:31:20] *** Joins: djhankb (~djhankb@208.113.164.68)
[10:31:26] *** Joins: jonthesnow (~xizhendu@240e:404:8510:f62f:dadc::30c0)
[10:33:30] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:38:47] *** Joins: ubert (~Thunderbi@77.119.171.187.wireless.dyn.drei.com)
[10:39:31] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 260 seconds)
[10:39:51] *** Quits: nrg (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[10:40:30] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 260 seconds)
[10:41:36] *** Joins: jonaskabrink (~jonaskabr@ip1f128470.dynamic.kabel-deutschland.de)
[10:42:09] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[10:42:23] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[10:43:45] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[10:45:26] *** Quits: jamer05 (~jamer05@user/jamer05) (Ping timeout: 260 seconds)
[10:50:01] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[10:50:19] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[10:53:32] *** Joins: ub (~Thunderbi@77.119.171.187.wireless.dyn.drei.com)
[10:56:35] *** Joins: chele (~chele@user/chele)
[10:56:54] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[10:59:24] *** Joins: nrg (~NRG@user/nrg)
[10:59:57] *** Joins: Vonter (~Vonter@user/vonter)
[11:00:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:00:42] *** Parts: mindofjoe (~joe@user/lighthouse6) (Leaving)
[11:01:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[11:03:35] *** Joins: fikran (~fikran@user/fikran)
[11:08:22] *** Quits: parv (~quass@user/parv) (Quit: parv)
[11:08:27] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 244 seconds)
[11:08:57] *** Joins: alkino (~quassel@user/alkino)
[11:08:59] <gitesh> I am trying to get `app = Flask(__name__)`
[11:09:21] <gitesh> an argument to Flask class can be a module name or a package name?
[11:09:27] <gitesh> and what does that mean?
[11:10:28] *** Joins: tobybl (~tobybl@213.31.135.91)
[11:10:37] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[11:10:54] *** Joins: tobybl (~tobybl@213.31.135.91)
[11:11:05] *** Joins: rendar (~rendar@user/rendar)
[11:11:15] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 260 seconds)
[11:11:35] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[11:11:43] *** Quits: sharperguy (~sharpergu@89.244.123.89) (Ping timeout: 260 seconds)
[11:13:22] *** Joins: brelod (~me@90.244.150.142)
[11:13:39] *** Joins: sharperguy (~sharpergu@fnord.cryptophone.de)
[11:13:40] *** Joins: maharg101 (~maharg101@savoy.force9.co.uk)
[11:13:51] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 245 seconds)
[11:14:17] *** Joins: alkino (~quassel@user/alkino)
[11:18:42] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:18:54] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:19:05] <gitesh> https://www.irccloud.com/pastebin/QTkA9tCM/
[11:19:29] <dav1d> __name__ is the current package name
[11:20:45] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:22:12] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[11:22:17] *** Joins: fdan (~fdan@192.146.154.3)
[11:22:23] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:23:01] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:23:32] *** Quits: dharrigan (~dharrigan@user/dharrigan) (Quit: ZNC - https://znc.in)
[11:24:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:24:59] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[11:25:01] *** Joins: mrwick (~mrwick@user/mrwick)
[11:26:23] *** Joins: dharrigan (~dharrigan@user/dharrigan)
[11:26:33] *** Joins: slav0nic (slav0nic@python.su)
[11:26:35] *** Quits: OnceMe (~stefan@user/onceme) (Quit: Konversation terminated!)
[11:26:46] *** Quits: jess (~jess@libera/staff/jess) (Quit: Lost terminal)
[11:29:12] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Read error: Connection reset by peer)
[11:29:43] *** Joins: Proxysna (~Proxysna@62.119.254.142)
[11:30:05] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[11:30:08] *** Joins: vladoski (~vladoski@2001:b07:add:d406:c85f:d31e:61c2:9e8e)
[11:30:10] *** Joins: ice9 (~ice9@user/ice9)
[11:30:43] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[11:30:52] *** Joins: Tas-sos (~Tas-sos@46-219-149.adsl.cyta.gr)
[11:31:11] *** Joins: shad (~shad@user/shad)
[11:31:18] *** Joins: djhankb (~djhankb@208.113.164.68)
[11:32:56] *** Joins: jess (~jess@libera/staff/jess)
[11:33:24] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Client Quit)
[11:34:15] <vladoski> is it possible to edit a dictionary and return it in a list comprehention?
[11:34:29] <vladoski> comprehension*
[11:35:09] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[11:35:25] <jinsun> no, list comprehensions return lists
[11:35:43] <jinsun> you can write a dict comprehension to make a new dict
[11:35:44] *** Joins: hendursaga (~weechat@user/hendursaga)
[11:36:12] <vladoski> jinsun, yes I know but I want to know if it's possible IN the list comprehension to edit a dict in place
[11:36:39] <jinsun> but for modifying an existing dict, an old school for loop is best
[11:38:54] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:10] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[11:40:02] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[11:40:23] <jinsun> you can call dict.pop and dict.__setitem__ in a list comprehension I guess, but that would be ugly and also inefficient because you create an unneeded list
[11:40:40] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:41:06] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (Read error: Connection reset by peer)
[11:41:30] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[11:41:38] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[11:42:02] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[11:42:39] <mgedmin> walrus!
[11:44:22] *** Joins: shad (~shad@user/shad)
[11:44:32] <jinsun> oh ya with walrus you can avoid setitem too I guess
[11:45:33] *** Joins: tobybl_ (~tobybl@213.31.135.91)
[11:46:21] *** Quits: jonthesnow (~xizhendu@240e:404:8510:f62f:dadc::30c0) (Ping timeout: 245 seconds)
[11:47:42] *** Quits: tobybl (~tobybl@213.31.135.91) (Ping timeout: 244 seconds)
[11:49:09] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[11:50:10] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:204f:2d77:869f:b8f2)
[11:50:22] <mgedmin> there's also the old hack of using an additional for loop to do an assignment, e.g. [x for k in a_list for x in [expensive_function(k)] if x]
[11:50:44] <mgedmin> which is basically [x for k in a_list if x := expensive_function(k)], compatible with pythons that don't have :=
[11:50:50] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[11:50:54] <mgedmin> and I wouldn't recommend using it, ever
[11:53:45] *** Quits: defn (~n0b0dy@user/defn) (Read error: Connection reset by peer)
[11:53:59] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (Ping timeout: 265 seconds)
[11:54:11] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[11:54:39] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 260 seconds)
[11:55:39] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[11:57:14] *** Quits: hanaan (~naan@user/naan) (Quit: Leaving)
[11:57:32] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[11:57:48] *** Joins: djapo (~archangel@user/djapo)
[11:57:53] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[11:57:59] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 264 seconds)
[11:58:31] *** Joins: flying_sausages (~flying_sa@user/flying-sausages/x-2113186)
[11:58:44] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[11:58:51] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 260 seconds)
[11:59:31] *** Joins: defn (~n0b0dy@user/defn)
[12:00:16] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Client Quit)
[12:00:31] *** Quits: FireFish5000 (~FireFish5@user/firefish5000) (Remote host closed the connection)
[12:00:50] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[12:04:22] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[12:04:41] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[12:05:04] <vladoski> understood.
[12:05:08] <vladoski> i'll stick with the plain for loop
[12:05:17] <vladoski> thanks
[12:05:23] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 260 seconds)
[12:06:20] <gitesh> what does setting an environment variable for flask means?
[12:07:38] <deniska> gitesh: environment variables is one of the mechanisms of passing data to created processes https://en.wikipedia.org/wiki/Environment_variable
[12:07:40] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:c147:ffa9:831e:1edb)
[12:07:42] *** Quits: avikalp (~avikalp@49.36.99.188) (Read error: Connection reset by peer)
[12:10:03] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[12:10:38] *** Joins: plastico (~plastico@neomutt/plastico)
[12:11:49] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:c147:ffa9:831e:1edb) (Client Quit)
[12:12:24] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[12:13:10] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[12:13:22] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:c147:ffa9:831e:1edb)
[12:13:27] *** Joins: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net)
[12:13:46] *** Joins: arinov (~arinov@213.194.126.155)
[12:14:49] *** Joins: jim87 (~gfurlan@2001:b07:5d37:f91e:c08b:dbe4:b466:4b28)
[12:14:56] <jim87> hello!
[12:15:19] *** Joins: Nspace (~Nspace@user/nspace)
[12:15:39] *** Quits: vladoski (~vladoski@2001:b07:add:d406:c85f:d31e:61c2:9e8e) (Ping timeout: 260 seconds)
[12:16:58] *** Joins: grandfso (~quassel@199.232.237.35.bc.googleusercontent.com)
[12:17:07] <jim87> I'm going to develop a daemon+client application, which I'd like to ditribute on more than one Linux distro. I'm thus facing the issue that I should probably configure the program to accept some build parameters, like (in my case) the OS preferred mount points (es. /run/media/<user> like some distros like to mount on). Is there a standard way to do this?
[12:19:15] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[12:19:35] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:19:36] *** Joins: legola (~legola@46.235.101.181)
[12:24:13] *** Joins: Klinda (~superleag@user/klinda)
[12:24:35] *** Joins: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul)
[12:24:49] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[12:25:34] *** Quits: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul) (Client Quit)
[12:26:11] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:26:40] *** Joins: darksun (~darksun@user/darksun)
[12:26:40] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[12:26:59] *** Quits: grys (~quassel@botters/gry) (Ping timeout: 244 seconds)
[12:27:02] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[12:27:31] <Feuermagier> I want to write a simple fuzzer in python, which opens a subprocess and sends it random input until it segfaults. How can I open many subprocesses in parallel (as my target file uses a sleep() function)?
[12:27:37] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[12:29:20] *** Joins: Atque (~Atque@user/atque)
[12:29:30] *** Joins: Intelo (~Intelo@88.246.77.74)
[12:29:32] <Intelo> While doing integration test for api testing. What is a good way to test? a) make api call inside test code and also directly check (fetch/select) entries in database those were supposed to be created by that api cal. b) in response of real api call, always return json of objects created in database (e.g user created, even if its a GET call and 200
[12:29:32] <Intelo> response might have been ok, just to test what was created, I should return what was inserted / updated in database for each api call c) try to check one api with another api (this might not always be possible). e.g test create user api with user profile api. If user was created successfully, then profile api should return correct data. c) any
[12:29:33] <Intelo> other?
[12:30:08] *** Quits: binarymutt[m] (~binarymut@user/binarymutt) (Quit: You have been kicked for being idle)
[12:30:19] *** Quits: RiFo (~RiFo@user/rifo) (Read error: Connection reset by peer)
[12:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[12:31:10] <supakeen> You would use 'a'.
[12:31:13] *** Joins: djhankb (~djhankb@208.113.164.68)
[12:31:22] <dav1d> Feuermagier, you can just use the subprocess module and never wait for the process to finish?
[12:32:15] <dav1d> Intelo, a mix between a) and c) depends on how far integration/black box testing you're looking for
[12:32:24] <Feuermagier> dav1d, how do I p.communicate without waiting? - I need to find the exit code and check if it is != 1 (that's when I'm done. 0 and SIGSEV are fine)
[12:32:58] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:33:01] <Intelo> dav1d what might be  a sane and effective way?
[12:33:02] *** Quits: mpmc (~mpmc@user/mpmc) (Ping timeout: 246 seconds)
[12:33:18] <dav1d> Feuermagier, you can access stdin and stdout without communicate, and you would have to peridoically check the exit status, I dont know if there is an async way of doing it (other than launching a thread which signals that the process exited)
[12:33:35] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Quit: Leaving)
[12:34:08] *** Joins: e2m4n (~ezman@user/e2m4n)
[12:34:17] <Feuermagier> dav1d, hmm. maybe Python is simply not the right tool for this.
[12:34:35] *** Joins: RiFo (~RiFo@user/rifo)
[12:34:50] <mgedmin> Feuermagier: have you considered using threads?
[12:34:53] <supakeen> You'd have the same problem in any language.
[12:34:57] <dav1d> Intelo, mh? a) is probably what you're looking for, c) goes more in the direction of verifying a program implements a requirement correctly independently of what program is actually running
[12:35:12] <dav1d> Feuermagier, it is, all other languages struggle with the same problem
[12:35:37] <dav1d> you can't epoll/select a process status (as far as I am aware)
[12:35:45] *** Joins: avikalp (~avikalp@49.36.99.188)
[12:36:12] <supakeen> You can, with signalfd.
[12:36:16] <dav1d> TIL
[12:36:18] <supakeen> (and SIGCHILD)
[12:36:42] <dav1d> thanks, that's good to know
[12:37:26] <Saxtheowl> I am trying to get the result of the second minimum number of a set minus the minimum one, it is working for small set but fail on larger one, I am not sure why https://paste.ofcode.org/q9FM9LTXm8aSqz7aTr5TrC
[12:37:42] <rindolf> Saxtheowl: hi
[12:37:44] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:38:11] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[12:38:12] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[12:38:13] <rindolf> Saxtheowl: dat_list[-1]
[12:38:35] <rindolf> Saxtheowl: dat_list[-2] rather
[12:38:48] *** Joins: srhm (~srhm@user/srhm)
[12:38:59] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[12:39:16] *** Joins: R035N3R (~phobos@user/r035n3r)
[12:40:11] <rindolf> Saxtheowl: oh wait - i misread
[12:40:11] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[12:41:46] *** Joins: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr)
[12:42:42] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[12:43:48] <rindolf> Saxtheowl: your code gives 2 (= 3 - 1)
[12:44:44] *** Joins: Nspace (~Nspace@user/nspace)
[12:45:36] <Saxtheowl> yes, it is working but small list, but fail on large list like 50 000 numbers
[12:46:22] <rindolf> Saxtheowl: ping! and you can use https://docs.python.org/3/library/heapq.html
[12:46:42] *** Joins: mike18 (~geri@217-149-167-230.nat.highway.telekom.at)
[12:46:43] *** Joins: akaWolf (~akaWolf@akawolf.org)
[12:46:44] <mike18> h
[12:46:45] <mike18> i
[12:46:54] <rindolf> Saxtheowl: ah
[12:48:56] <rindolf> Saxtheowl: your code looks fine. are all the items of type 'int'?
[12:50:09] <rakoon> Why doing sorted([d.items() for d in dict_list]) is different with sorted([list(d.items()) for d in dict_list])? (basically converting each .items() to list
[12:51:34] <Saxtheowl> I am trying to reproduce the error
[12:51:40] <rindolf> rakoon: which order does d.items() return?
[12:51:59] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 265 seconds)
[12:52:02] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[12:52:05] <mgedmin> d.items() returns a set-like dictionary view where < is a subset check rather than a lexicographical comparison like it is for lists
[12:53:33] <rakoon> rindolf: hmm i dont know, are u saying that d.items() can return in whatever order?
[12:54:09] <mgedmin> I don't recommend calling sorted() on dict views; sorting usually requires a total ordering which set.__lt__ doesn't give
[12:54:23] *** Joins: computeiro (~Wender@189.37.67.74)
[12:54:49] <rakoon> alright i understood that i should not use it :D
[12:54:53] *** Joins: OnceMe (~stefan@user/onceme)
[12:54:59] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 264 seconds)
[12:55:03] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[12:55:21] <rakoon> I thought because they are tuples i can sort them
[12:55:54] <jinsun> items() is not tuple
[12:56:00] <OnceMe> when I use requests lib, and do something like try: response = requests.post(..) response.raise_for_status() except Exception as ex: log.error(str(ex)) prints somethibg like 401 client error, ** My question is how to get original response from the endpoint, which I would get with response.text ?
[12:56:06] <jinsun> when you iterate over it then you get tuple
[12:56:30] <OnceMe> do I need to access ex.getRequest().getText() or something?
[12:56:41] *** Quits: botfather (~botfather@shell1.dds.nl) (Remote host closed the connection)
[12:56:41] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[12:57:30] <deniska> OnceMe: if it's in the same scope, you still have access to `response` object
[12:57:45] <mgedmin> OnceMe: except requests.HTTPError as error:, and then use error.request and error.response
[12:58:10] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[12:59:16] <OnceMe> mgedmin: but what if I caught it only in Exception as ex?
[12:59:23] <OnceMe> there's no way to get the error response?
[12:59:24] <mike18> hi i have a question to concurrent.futures: https://ideone.com/am1KQo when will i need .get(block = False) ?
[12:59:32] <mike18> in line 7
[12:59:36] <OnceMe> deniska: how is in the same scope, when response is inside try ?
[12:59:56] *** Joins: SoF (~skius@user/skius)
[13:00:21] <deniska> OnceMe: try-except doesn't introduce new scopes
[13:00:21] <mgedmin> OnceMe: if you catch Exception, you don't know what it is -- might be an AttributeError because you misspelled .raise_fro_status() or something
[13:00:35] <mgedmin> if you want to catch HTTPError, then catch HTTPError
[13:00:43] <deniska> OnceMe: only `def` do, and (sorta) `class`
[13:00:54] <OnceMe> !paste
[13:01:48] <OnceMe> deniska: https://bpa.st/NBRA this wont work
[13:02:01] <OnceMe> local variable might be referenced before assignment
[13:03:02] <deniska> OnceMe: linter warning?
[13:03:11] <rakoon> jinsun: thanks
[13:03:14] <supakeen> no, response might be unassigned in the block
[13:03:15] <mgedmin> if requests.post() raises a requests.ConnectionError or something, the assignment to a local 'requests' never happens
[13:03:15] <OnceMe> regardless, Ive tried it and its just printing empty message
[13:03:18] <supakeen> (except block)
[13:03:24] <mgedmin> err, a local 'response'
[13:03:42] <supakeen> (you want e.response.bla)
[13:03:44] <deniska> I mean, if requests.post(...) raises, then sure
[13:03:53] <OnceMe> ?
[13:03:56] <OnceMe> how would it look then?
[13:03:58] <deniska> that's why it's a bad idea to blanket except Exception :)
[13:04:23] <OnceMe> I guess I need to raise HttpError then
[13:04:24] *** Parts: doosboox (~doosboox@194.132.186.60) (The Lounge - https://thelounge.chat)
[13:04:30] <OnceMe> and on the end Exception
[13:04:35] <mike18> does someone know about blocking vs none blocking queues?
[13:04:52] <OnceMe> I mean to catch it*
[13:05:05] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:05:12] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:06:03] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 260 seconds)
[13:06:09] *** Joins: cdown (~cdown@163.114.131.1)
[13:07:50] <braxas> I'm trying to gradually type RDFLib, but there are some growing pains here. Currently we have only very few type annotations, but I added py.typed. Is the idea that you should only add py.typed once you have all type annotations in place? Some details here https://github.com/RDFLib/rdflib/issues/1447#issuecomment-950402660 and https://github.com/python/typing/discussions/911
[13:08:20] <braxas> My reasoning is better to have py.typed in rdflib even with partial type annotations so that they at least can be used.
[13:08:37] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[13:08:53] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:08:56] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[13:09:23] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[13:10:25] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:10:34] <braxas> with no py.typed type annotations that are there have no value to users of the library and they basically just fall back to not type checking anything relating to the library.
[13:11:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[13:12:56] *** Joins: fikran (~fikran@user/fikran)
[13:13:06] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[13:17:05] *** Joins: wender (~Wender@189.15.149.142)
[13:18:03] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:18:08] *** Quits: computeiro (~Wender@189.37.67.74) (Read error: Connection reset by peer)
[13:19:17] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:a1cc:f344:a47d:7d01) (Ping timeout: 256 seconds)
[13:19:48] *** Joins: upsala (~zcb@185.213.155.160)
[13:20:17] *** Joins: computeiro (~Wender@189.37.67.74)
[13:21:20] *** Joins: death916 (~death916@user/death916)
[13:21:28] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 265 seconds)
[13:21:29] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:21:52] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:22:16] *** Quits: wender (~Wender@189.15.149.142) (Ping timeout: 244 seconds)
[13:22:48] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:22:58] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[13:26:35] *** Joins: wender (~Wender@189.37.66.146)
[13:27:44] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[13:28:43] *** Joins: fandre1986 (~fandre198@178-36-241-155.adsl.inetia.pl)
[13:29:37] *** Joins: mpmc (~mpmc@user/mpmc)
[13:30:19] *** Quits: computeiro (~Wender@189.37.67.74) (Ping timeout: 260 seconds)
[13:30:23] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[13:30:29] *** Joins: goepsilongo_ (~goepsilon@2603-7000-ab00-62ed-0000-0000-0000-0806.res6.spectrum.com)
[13:30:37] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[13:30:51] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:31:03] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 244 seconds)
[13:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[13:31:08] *** Joins: ghost43_ (~ghost43@gateway/tor-sasl/ghost43)
[13:31:17] *** Joins: orangeextract (~orangeext@user/orangeextract)
[13:31:43] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:32:00] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Ping timeout: 276 seconds)
[13:32:37] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[13:33:04] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-0d00-af10-da91-027d.res6.spectrum.com) (Ping timeout: 252 seconds)
[13:36:55] *** Joins: botfather (~botfather@shell1.dds.nl)
[13:37:10] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 260 seconds)
[13:38:43] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:40:07] <OnceMe> if I do raise_for_status() and Timeout exception happens, will except HTTPError as e: catch it?
[13:40:19] <OnceMe> or I need after HTTPError general Exception as e error catching?
[13:40:43] <oprypin> braxas, this concept always baffled me as well, so i just use "pytype" type checker which has no such limitation
[13:40:49] <supakeen> only if you can recover from such problems
[13:40:57] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[13:41:03] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[13:41:46] <Intelo> dav1d  lets say I am testing a user registration api. It has name, email, address. How will I verify that the user actually got registered and the data was saved in the database?
[13:41:55] <Intelo> supakeen ^
[13:42:02] <supakeen> you ask the database
[13:43:14] <Intelo> hm.. that would be a lot of code
[13:43:19] <Intelo> but very reliable
[13:43:40] <Intelo> can I just call another api ? e.g see /user/profie results and match them?
[13:43:40] <supakeen> alternatively, if you have a route to also request data from your API you can do things this way (for example): https://github.com/supakeen/pinnwand/blob/master/test/test_http_website.py#L497
[13:43:47] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[13:43:50] <supakeen> but integration tests are meant to check if things integrate
[13:43:52] <Intelo> supakeen this way both apis will be checked
[13:44:01] <supakeen> so that generally means you need to check both the things that integrate
[13:44:38] *** Quits: Nact (~l@host-85-27-120-251.dynamic.voo.be) (Ping timeout: 260 seconds)
[13:45:08] *** Joins: Nspace (~Nspace@user/nspace)
[13:45:14] <Intelo> lets say its 'api' testing only
[13:45:30] *** Joins: cursey (~cursey@user/cursey)
[13:45:50] <Intelo> supakeen in that case, should I only see database or do country api checks
[13:46:01] <Intelo> e.g /register/user is checked by /user/profile
[13:46:29] <Intelo> if /user/profile sends same data which I posted in /register/user then both api's work fine.
[13:46:31] <Intelo> right?
[13:46:35] <supakeen> then you check the API only but you have to ensure your testcases are not coupled to the database as in, you don't want the current testcase to affect the next testcase
[13:46:48] <supakeen> e.g. you want to recreate the database for each testcase
[13:47:03] <Intelo> correct. there can be  a grouping
[13:47:04] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 244 seconds)
[13:47:06] <dav1d> Intelo, usually you'd just go straight into the database, your code already has a way to communicate with the database (e.g. an ORM or just a layer that interacts with the db), you can reuse these modules for your tests
[13:47:19] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[13:47:47] <dav1d> for test-data remaining in the databse, there usually is some way of TRUNCATE for a db table or just a DELETE FROM x WHERE 1=1
[13:48:19] <Intelo> dav1d actually I would have to write the db fetching code from raw again because that written code in app layer can be broken too. That is actually what would be testing in api as well. (part of testing)
[13:49:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[13:49:09] <mike18> hi Intelo
[13:49:14] <Intelo> hi
[13:49:14] <dav1d> Intelo, no not really, you could have tests for that layer as well, rewriting that layer doesn't really give you anything other than lots of extra work
[13:49:40] <Intelo> dav1d i only have api tests
[13:49:45] <Intelo> not doing unit tests
[13:49:47] <supakeen> I'd also like to say to not overthink it too much.
[13:50:01] <supakeen> Start writing tests, if it works great, if it doesn't then you know what the actual problem you need to solve is.
[13:50:06] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[13:50:14] <supakeen> It's hard reasoning about all of this without knowing the codebase, the people working with it, etc.
[13:50:14] <Intelo> supakeen true but this design make a difference in time and results.
[13:50:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:50:50] <supakeen> Start with writing small tests, e.g, 'this route should return a 400 if i miss a parameter', 'this route should return a 403 if i don't send this header', etc.
[13:50:58] <dav1d> Intelo, sure, but at some point you have to trust your code or write tests for everything, having api tests for put and seeing if get returns the right results doesnt actually test everything either (what if it is just an in memory cache that returns the values but doesnt actually persist, your test wont catch that)
[13:50:59] <Intelo> supakeen well it "works" in all the options I listed but time + reliablity is the debate here.
[13:51:14] <Intelo> supakeen I already have written many tests
[13:51:30] <dav1d> Intelo, so at some point you have to trust at least a little bit of code or you actually have to test everything with unit and integration tests (which is a lot of work)
[13:51:44] <dav1d> having worked at an Airport, it's *a lot* of work
[13:52:23] <OnceMe> is RequestException more broad than HTTPError ?
[13:52:28] <OnceMe> will it catch timeout etc?
[13:52:37] <Intelo> dav1d I see
[13:52:42] <supakeen> And one has to be careful that you might end up testing external dependencies that might already have their own test suite when one gets too much into it ;)
[13:53:06] <Intelo> supakeen hm.. I see
[13:53:15] <dav1d> ^ exactly, if you have an sql alchemy layer, just re-use it, sql alchemy will work *fine* (for the most part ;=))
[13:53:34] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[13:53:47] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 244 seconds)
[13:54:21] <Intelo> so I take that it is best to 1) check from db  but 2) check with counter api is also ok and acceptable + less time consuming?
[13:54:48] <Intelo> 3) great to have unit tests but assume this is not the case
[13:55:04] <dav1d> I usually revert to unit tests for parts with business heavy logic and do integration tests with checking (and preparing the databse) directly for basically anything else and to generate documentation I do some integration tests that check the interaction of put+get API (and documentation is generated from these tests if possible)
[13:55:24] <Intelo> dav1d supakeen i don't know why i do not want to trust any code (including sql alchemy layer) that is written by app/devs
[13:55:41] <Intelo> dav1d supakeen i don't know why i do not want to trust and reuse any code (including sql alchemy layer) that is written by app/devs
[13:55:46] <dav1d> Intelo, I mean it makes sense to not trust it, but it's just too much work to verify everything
[13:55:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[13:55:56] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[13:56:01] <supakeen> Just think about what you're going to do if you find a problem in sqlalchemy.
[13:56:13] <supakeen> Any bug would likely already surface in your usage of it (which is being tested).
[13:56:38] <dav1d> you'll spend more time writing tests than getting anything done and if you can survive bugs (dont work on an airport or car software), it's not too bad to not verify everything
[13:56:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:57:01] <dav1d> and yeah most stuff comes up anyways in an integration test
[13:57:42] <deniska> Don't forget to test your test harness :P
[13:57:45] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:58:16] *** Joins: |\n (~x0a@user/n/x-7623025)
[13:58:23] <Jong> Why throw an exception or SystemExit or assert when the "crash" does the same thing.
[13:58:39] <Jong> Would we just be throwing an exception a little earlier?
[13:59:02] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[13:59:58] <Intelo> supakeen dav1d I see
[14:00:03] <Intelo> deniska test harness?
[14:00:16] <deniska> Intelo: unittest/pytest/etc :)
[14:00:31] <dav1d> and dont forget to test your tests to make sure they test the right thing
[14:00:58] <Intelo> unit tests? ya I am skipping those and doing api tests just to save time and have a sweet spot between time and test results
[14:01:46] <Intelo> dav1d test withing test? Inception?
[14:01:56] <Intelo> dav1d test within test? Inception?
[14:02:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[14:02:05] <Intelo> the move inception I mean :0
[14:02:07] <Intelo> :)
[14:02:22] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 260 seconds)
[14:02:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:03:13] <dav1d> at some point you need tests that can test themselves or else you'll never be done
[14:03:27] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:2541:21bc:c9f8:d237)
[14:03:45] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Client Quit)
[14:04:00] <Intelo> dav1d then who will test the tests that I used to test the primary tests
[14:04:12] <Intelo> dav1d I am new but is this a never ending loop?
[14:04:31] <mgedmin> integration tests are a fun way to save time initially, but eventually your test suite takes 60 minutes to run and it's a pain
[14:04:35] <dav1d> just get an AI ;)
[14:04:39] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[14:04:41] <deniska> Jokes aside, any tests are better than no tests
[14:04:51] <deniska> I kinda prefer starting with unit tests though
[14:04:52] <dav1d> mgedmin, then only run it occasionally
[14:04:55] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:05:21] <dav1d> and if you change code, just run the ones that are relevant
[14:05:29] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[14:05:43] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:05:44] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[14:05:48] *** Quits: R035N3R (~phobos@user/r035n3r) (Ping timeout: 276 seconds)
[14:06:17] *** Joins: R035N3R (~phobos@user/r035n3r)
[14:06:24] *** Joins: c10l (~c10l@user/c10l)
[14:07:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[14:08:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:10:35] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 264 seconds)
[14:12:17] *** Joins: akimbo (~akimbo@customer-145-40-27-9.stosn.net)
[14:13:07] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:13:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[14:13:55] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[14:14:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:14:48] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[14:15:29] *** Quits: goepsilongo_ (~goepsilon@2603-7000-ab00-62ed-0000-0000-0000-0806.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:16:00] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-3830-04d0-020e-96bb.res6.spectrum.com)
[14:16:01] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-3830-04d0-020e-96bb.res6.spectrum.com) (Client Quit)
[14:18:51] *** Joins: clarkk1 (~clarkk@45.12.223.85)
[14:19:06] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 244 seconds)
[14:19:19] *** Quits: clarkk1 (~clarkk@45.12.223.85) (Client Quit)
[14:19:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[14:19:57] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[14:20:07] *** Joins: wedwards (~wedwards@rtr0.17.31.bogert.cyberfusion.cloud)
[14:20:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:21:01] *** Quits: Dotz0cat (~Dotz0cat@h11.46.90.75.dynamic.ip.windstream.net) (Read error: Connection reset by peer)
[14:21:39] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Ping timeout: 260 seconds)
[14:22:12] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 244 seconds)
[14:22:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:24:27] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 260 seconds)
[14:24:38] <mike18> hi i have a question to concurrent.futures: https://ideone.com/am1KQo when will i need .get(block = False) ?
[14:24:43] <mike18> not sure if someone saw...
[14:24:47] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Ping timeout: 265 seconds)
[14:25:44] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:26:20] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[14:26:44] *** Joins: Nspace (~Nspace@user/nspace)
[14:26:47] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 260 seconds)
[14:27:21] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 244 seconds)
[14:27:52] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:27:55] *** Joins: Dotz0cat (~Dotz0cat@h194.118.90.75.dynamic.ip.windstream.net)
[14:29:36] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[14:29:37] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:30:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[14:30:44] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[14:30:59] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 244 seconds)
[14:31:19] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:31:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:32:23] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[14:32:26] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[14:32:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:33:05] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:33:58] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[14:34:15] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 260 seconds)
[14:34:33] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:36:40] *** Quits: shad (~shad@user/shad) (Ping timeout: 244 seconds)
[14:37:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:37:11] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 244 seconds)
[14:37:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:37:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:39:23] *** Quits: dld (~davidlowr@2601:197:600:1210:5db6:6f5a:3b6e:25f9) (Ping timeout: 264 seconds)
[14:40:32] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:42:21] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 244 seconds)
[14:42:54] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:42:58] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Quit: hyskaru)
[14:43:09] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[14:44:25] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[14:46:55] *** cache is now known as cacheyourdreams
[14:49:25] *** Joins: nomic (~nomic@85.203.36.101)
[14:51:12] *** Quits: jonaskabrink (~jonaskabr@ip1f128470.dynamic.kabel-deutschland.de) (Quit: jonaskabrink)
[14:51:20] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[14:54:04] *** Joins: shad (~shad@user/shad)
[14:54:13] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:55:01] *** Joins: bloody (~bloody@user/bloody)
[14:56:43] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[14:56:58] *** Joins: UnnamedBeer (~UnnamedBe@100.red-83-54-17.dynamicip.rima-tde.net)
[14:57:19] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 244 seconds)
[14:57:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:58:57] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:a8a9:e2b3:d3e0:ca13) (Ping timeout: 258 seconds)
[15:00:07] *** Joins: Nact (~l@host-85-27-120-251.dynamic.voo.be)
[15:00:54] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567377-189.dhcp.inet.fi)
[15:01:19] <gitesh> I have a question of flask
[15:01:23] <gitesh> "If GET is present, Flask automatically adds support for the HEAD method and handles HEAD requests according to the HTTP RFC. Likewise, OPTIONS is automatically implemented for you."
[15:01:35] <gitesh> what is HEAD method and what is OPTIONS ?
[15:01:39] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:02:01] <bpalmer> gitesh: HTTP defines several standard verbs, like GET and POST. HEAD is another one.
[15:02:15] <gitesh> bpalmer: oh i see
[15:02:33] <gitesh> I was only used to GET and POST
[15:02:37] <bpalmer> (as is OPTIONS). For the details, you should take a look at the http spec
[15:03:21] <bpalmer> but, basically, HEAD is like GET that only sends the response headers. OPTIONS lets a client ask for what options the server supports.
[15:03:25] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Changing host)
[15:03:25] *** Joins: TJ- (~root@user/tj-)
[15:03:34] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (Read error: Connection reset by peer)
[15:03:35] <bpalmer> for what methods
[15:03:38] *** Joins: Vonter (~Vonter@user/vonter)
[15:03:58] <bpalmer> again, see the http spec or MDN for the real details if they matter, but this is mostly a matter of convenience.
[15:04:09] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[15:06:25] <mike18> hi bpalmer
[15:06:41] <gitesh> I have this flask program here -----> https://bpa.st/UG3A
[15:06:55] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[15:06:55] <mike18> may i ask you something to ThreadPoolExecutor and queue?
[15:07:05] <gitesh> I want to print url_for, it's not printing in the command prompt anything
[15:07:25] <dreamer> don't ask to ask. just ask
[15:07:35] <mike18> sorry for repost: i have a question to concurrent.futures: https://ideone.com/am1KQo when will i need .get(block = False) ?
[15:07:57] <mike18> is there any risk when an exception in the worker occurs?
[15:08:10] <mike18> what happens than?
[15:08:54] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[15:08:58] <mike18> also i would like to know if a none blocking queue should be used in the worker?
[15:08:59] *** Joins: masta_ (~oyster@user/masta/x-2645138)
[15:09:16] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[15:09:22] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[15:09:39] <mike18> fetch_data uses conn btw...
[15:09:55] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[15:14:28] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Ping timeout: 260 seconds)
[15:17:09] *** Quits: masta_ (~oyster@user/masta/x-2645138) (Quit: Going offline, see ya! (www.adiirc.com))
[15:17:48] *** Quits: daoudr (~daoudr@2a02:1205:c690:ca10:1f8f:22dc:9967:691a) (Quit: Leaving)
[15:18:17] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 256 seconds)
[15:18:21] *** Joins: frostschutz (~frostschu@2a01:c23:851b:d500:9e68:74cf:8ee1:8134)
[15:19:14] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[15:20:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[15:22:17] *** Joins: fikran (~fikran@user/fikran)
[15:23:28] *** Joins: jonaskabrink (~jonaskabr@eduroam-165-125.wlan.tu-harburg.de)
[15:24:54] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[15:27:02] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[15:27:50] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:28:10] *** Joins: arinov (~arinov@213.194.126.155)
[15:29:21] *** Joins: st327 (~st327@user/st327)
[15:30:13] *** Parts: lxwulf (~lxwulf@user/lxwulf) (Leaving)
[15:30:56] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[15:31:30] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:39] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 260 seconds)
[15:32:18] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 258 seconds)
[15:33:38] *** Quits: nomic (~nomic@85.203.36.101) (Quit: Leaving)
[15:33:53] *** Joins: pycurious (~Adium@user/pycurious)
[15:34:46] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 260 seconds)
[15:34:48] *** Quits: st327 (~st327@user/st327) (Quit: Leaving)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:45] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[15:38:08] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-b022-535d-865a-b86f.res6.spectrum.com) (Quit: Leaving.)
[15:38:09] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 244 seconds)
[15:38:32] *** Joins: sgn (~sgn@user/sgn)
[15:38:34] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: The Lounge - https://thelounge.chat)
[15:39:13] *** Joins: kenoba (~kenoba@user/kenoba)
[15:39:17] <Feuermagier> I'd like to take a subset of a "bytes" - that is everything, but throw the last 8 byte away. How do I do this?
[15:39:34] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Remote host closed the connection)
[15:39:39] *** Quits: Madda (~Madda@216.51.198.146.dyn.plus.net) (Read error: Connection reset by peer)
[15:39:55] <grym> Feuermagier: mything[:-8]
[15:40:04] <Feuermagier> ooh, cool
[15:40:25] <grym> bytes slice like other iterablea
[15:40:29] <amo> that looks like a funky smiley
[15:40:38] <amo> [:-8]
[15:40:44] <grym> ( ͡° ͜ʖ ͡°)
[15:40:48] <The-Compiler> amo: I mean, if you do P = 8, you can do [:-P] too
[15:40:58] *** Joins: Madda (~Madda@216.51.198.146.dyn.plus.net)
[15:40:59] <amo> ;-p
[15:41:10] <grym> The-Compiler: i know whats going in my next PR
[15:41:27] <The-Compiler> :D
[15:42:25] <bpalmer> [:-(P:=8)] ?
[15:42:36] <bpalmer> I don't know precisely what that expression is, but ...
[15:42:43] <The-Compiler> stop! :D
[15:43:37] <grym> bpalmer: are you looking for dental recommendations? that smiley looks like it could use some {
[15:44:43] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 260 seconds)
[15:44:43] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 260 seconds)
[15:45:19] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[15:46:26] *** Joins: Ilyu (~quassel@78.202.228.230)
[15:46:50] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[15:47:42] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:47:50] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[15:47:56] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[15:48:12] *** Joins: Ergo^ (~ergo@91.238.59.144)
[15:49:17] *** Joins: Naan (~Naan@user/naan)
[15:49:54] *** Joins: Ecophobia (~Ecophobia@mobile-access-2e841d-103.dhcp.inet.fi)
[15:50:56] *** Joins: Soldofor (~Guest19@2a02:2f0f:b212:ad00:a8ce:5d91:7c39:12e0)
[15:51:18] *** Quits: Ecophobia (~Ecophobia@mobile-access-2e841d-103.dhcp.inet.fi) (Client Quit)
[15:51:20] <Soldofor> Hello everyone
[15:51:23] *** Quits: wender (~Wender@189.37.66.146) (Remote host closed the connection)
[15:51:25] *** Joins: Jefren1 (~Jefren@70.35.67.22)
[15:51:51] *** Joins: computeiro (~Wender@189.37.66.146)
[15:52:07] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::60cb)
[15:53:05] *** Quits: computeiro (~Wender@189.37.66.146) (Client Quit)
[15:53:06] <The-Compiler> hey Soldofor
[15:53:23] *** Joins: julia (~quassel@user/julia)
[15:53:29] *** Quits: TMan459 (~TMan459@068-187-099-141.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[15:53:38] <gitesh> What do you think a web application is?
[15:53:56] <gitesh> For example if I do app =    Flask()
[15:54:14] <gitesh> So means app is an application?
[15:54:34] <gitesh> And we have to fill up app
[15:54:46] <grym> i think a web application is any program whose primary means of transmitting or recieving information is done over TCP/IP
[15:54:55] <grym> usually over HTTP(s)
[15:55:05] <The-Compiler> grym: so an IRC client is a web application? :P
[15:55:38] <The-Compiler> gitesh: usually a "web application" just means an application accessible via the web - in case of Flask, it's main instance of the "Flask" class is usually called "app" too: https://flask.palletsprojects.com/en/2.0.x/tutorial/factory/
[15:55:43] <gitesh> Yes IRC client is web app I'm using
[15:55:49] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[15:55:52] <grym> The-Compiler: sure.  why wouldn't it be?
[15:55:58] <bpalmer> the web is all about embracing various forms of media across many protocols.
[15:56:08] <bpalmer> It's only in the last few years, for example, that "web browsers" stopped supporting FTP
[15:56:12] <The-Compiler> okay, got me, I meant an IRC client not used via a browser :D
[15:56:14] <grym> The-Compiler: i get semantically very lazy about distinguishing between "the web" and "the internet" and whatnot
[15:56:51] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[15:57:00] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[15:57:19] <The-Compiler> grym: I mean, for starters, because it's probably older than "the web"
[15:57:29] <The-Compiler> (IRC, that is)
[15:57:57] <grym> The-Compiler: by uh... 4 years?
[15:58:01] <grym> maybe 3
[15:58:43] <The-Compiler> IMHO, "the web" implies having documents which are linked to each other in some way, so I wouldn't call mails or IRC or whatever part of the web (at least as long you don't use them via a web client)
[16:00:06] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 245 seconds)
[16:01:21] *** Joins: computeiro (~Wender@189.37.66.146)
[16:01:52] <grym> so if i have a website with no hyperlinks ...
[16:02:07] <grym> just a single page wall of text ... :D
[16:02:30] <grym> and noone ever links to that URI...
[16:02:33] <grym> i'm the internet :)
[16:02:46] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:04:33] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[16:05:16] *** Quits: rany (~rany@user/rany) (Ping timeout: 258 seconds)
[16:05:35] *** Joins: wovixo (~wovixo@128.104.205.49)
[16:06:02] *** Quits: zepolen (~zepolen@2a02:587:8625:db90:7403:55bd:fb54:a40f) (Ping timeout: 258 seconds)
[16:06:09] *** Joins: zepolen_ (~zepolen@ppp-94-66-223-231.home.otenet.gr)
[16:06:11] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 260 seconds)
[16:07:34] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:08:10] *** Joins: rany (~rany@user/rany)
[16:08:41] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:09:39] *** Joins: Nspace (~Nspace@user/nspace)
[16:11:06] *** Quits: rany (~rany@user/rany) (Client Quit)
[16:11:39] <Soldofor> grym That's an unexpected conclusion to draw from The-Compiler's definition. Could you please expand?
[16:12:02] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[16:12:40] <grym> Soldofor: i'm just goofing around
[16:12:51] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[16:13:02] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 260 seconds)
[16:13:16] <Soldofor> Ah, ok :)  Thought I was misunderstanding something
[16:13:17] <rindolf> Saxtheowl: hi, any luck?
[16:15:32] *** Joins: Trieste (T@user/pilgrim)
[16:15:37] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:15:56] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:16:05] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[16:17:20] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:17:31] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[16:17:58] *** Joins: BSaboia (~bsaboia@177.37.198.218)
[16:18:52] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[16:18:55] *** Quits: avikalp (~avikalp@49.36.99.188) (Read error: Connection reset by peer)
[16:19:12] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[16:20:27] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[16:22:35] <mike18> hi - i have a question to concurrent.futures: https://ideone.com/am1KQo when will i need .get(block = False) ?
[16:22:40] <mike18> is there any risk when an exception in the worker occurs?
[16:25:52] *** Joins: Ecophobia (~Ecophobia@mobile-access-2e841d-103.dhcp.inet.fi)
[16:26:00] *** Joins: ub1 (~Thunderbi@178.165.171.196.wireless.dyn.drei.com)
[16:27:04] *** Quits: ub (~Thunderbi@77.119.171.187.wireless.dyn.drei.com) (Ping timeout: 265 seconds)
[16:27:10] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:2541:21bc:c9f8:d237) (Quit: Leaving)
[16:27:11] *** Quits: ubert (~Thunderbi@77.119.171.187.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[16:27:12] *** ub1 is now known as ubert
[16:27:16] *** Quits: jim87 (~gfurlan@2001:b07:5d37:f91e:c08b:dbe4:b466:4b28) (Quit: Konversation terminated!)
[16:27:31] *** Quits: Ecophobia (~Ecophobia@mobile-access-2e841d-103.dhcp.inet.fi) (Client Quit)
[16:27:31] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:2541:21bc:c9f8:d237)
[16:28:01] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:28:06] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[16:29:10] *** Joins: ExeciN (~ExeciN@user/nicexe)
[16:29:37] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[16:30:12] *** Joins: aztec (~Felipe@2804:2238:7b9:c300:49a0:a834:ba60:b8fa)
[16:30:44] *** Joins: shiriru (~shiriru@user/shiriru)
[16:30:52] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[16:30:54] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[16:31:11] *** Quits: shiriru (~shiriru@user/shiriru) (Remote host closed the connection)
[16:31:26] *** Joins: djhankb (~djhankb@208.113.164.68)
[16:31:40] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[16:33:15] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[16:33:22] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[16:34:27] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:35:02] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[16:35:07] *** Joins: whoopla (user@gateway/vpn/protonvpn/whoopla)
[16:35:23] <whoopla> Good morning/day/evening everyone.
[16:35:34] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:36:01] *** Quits: carl- (~carl-@185.103.188.130) (Ping timeout: 244 seconds)
[16:37:01] <nedbat> whoopla: hey there
[16:38:23] *** Quits: Tas-sos (~Tas-sos@46-219-149.adsl.cyta.gr) (Ping timeout: 260 seconds)
[16:38:31] *** Quits: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr) (Quit: Client closed)
[16:38:52] <aztec> mornin whoopla
[16:40:14] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[16:40:37] *** Joins: zepolen (~zepolen@2a02:587:8625:db90:7403:55bd:fb54:a40f)
[16:40:40] *** Quits: zepolen_ (~zepolen@ppp-94-66-223-231.home.otenet.gr) (Ping timeout: 244 seconds)
[16:41:47] <whoopla> So I'm working w/ argparse and validating user input. I've got this program querying an API and I want the user to set their own limit, and there is date validation as well. I'm having trouble with passing the correct data types and I could use some pointers. The code and traceback are here: https://bpa.st/OHEQ I understand the traceback in that it is expecting an integer when it is getting a string, but
[16:41:53] <whoopla> I'm not sure how to convert them in this fashion. Thoughts?
[16:42:49] *** Quits: bpalmer (~user@user/bpalmer) (Ping timeout: 252 seconds)
[16:42:55] <whoopla> I feel like I could pop an int() around the values in the if statement, but I don't think that would resolve it.
[16:42:59] <The-Compiler> whoopla: yes, similar to what you did with validate_date already, your validate_limit will get the user-supplied value as a string
[16:43:32] <whoopla> So normally I'
[16:43:33] <The-Compiler> whoopla: so indeed an  "limit = int(limit)"  or so would probably help
[16:44:06] *** Quits: jonaskabrink (~jonaskabr@eduroam-165-125.wlan.tu-harburg.de) (Quit: jonaskabrink)
[16:44:38] <whoopla> Heheheh sometimes I overthink things
[16:44:58] <The-Compiler> whoopla: also note that you can do chained comparisons in Python:    if 1 <= limit <= 10000:   (you'd need to swap around the conditions though)
[16:45:28] <The-Compiler> whoopla: finally, you won't need the sys.exit there, as raising an exception will already terminate your function, so it'll never run
[16:46:09] *** Quits: Nact (~l@host-85-27-120-251.dynamic.voo.be) (Quit: Konversation terminated!)
[16:46:14] <whoopla> Well that all makes sense.
[16:46:49] <whoopla> This is my first 'big' program and I'm cobbling it together as I go :P
[16:46:57] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[16:47:05] <The-Compiler> getting your hands dirty is the best way to learn a programming language, IMHO :)
[16:47:40] *** Joins: NeoCore (~neocore@37.120.204.180)
[16:48:08] *** Joins: anonymeowo (~anonymeow@5.34.180.230)
[16:48:20] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[16:49:24] <whoopla> I started as a kid making horrible html tables lmao
[16:50:03] *** Quits: dvx (~dvx@185.63.97.64) (Ping timeout: 260 seconds)
[16:52:55] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[16:54:02] <gitesh> So flask is an app, while django is a project.
[16:54:11] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[16:55:30] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[16:57:06] <The-Compiler> gitesh: not really, you can say django app or flask project just as well
[16:57:17] <The-Compiler> gitesh: flask just happens to usually call the main Flask instance "app"
[16:58:32] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[16:59:09] *** Joins: mickey8 (~user@user/mickey)
[16:59:32] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:59:35] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[17:00:09] <grym> you could call it "bob
[17:00:11] <grym> " if you wanted
[17:00:14] <grym> or anything else
[17:02:15] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:ec1b:c682:f28e:c15c)
[17:03:28] *** Joins: jonaskabrink (~jonaskabr@eduroam-165-125.wlan.tu-harburg.de)
[17:03:36] <The-Compiler> wait, is the naming of bottle/flask a pun on WSGI, or were the frameworks there first and WSGI followed later?
[17:03:54] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[17:04:06] *** Joins: de-facto (~de-facto@user/de-facto)
[17:04:16] <grym> wsgi is 2003, so that's old enough to have come first
[17:04:32] <The-Compiler> looks like it, https://www.python.org/dev/peps/pep-0333/ doesn't mention Bottle/Flask
[17:04:35] <grym> flask is 2010
[17:04:52] <The-Compiler> yeah, bottle 2009 it seems
[17:04:54] <grym> bottle is 2009, so they could both be puns
[17:05:07] *** Joins: avikalp (~avikalp@49.36.99.188)
[17:05:46] <The-Compiler> yeah, I suppose bottle is a pun on WSGI and Flask is a pun on bottle, but dunno
[17:05:59] <grym> where's the obvious jar framework
[17:06:05] <SnoopJ> in Java
[17:06:08] <The-Compiler> :D
[17:06:20] <SnoopJ> I never realized the pun potential against WSGI
[17:06:33] <The-Compiler> I only realized once I heard someone say it
[17:06:42] *** Quits: luva (~luva@5.180.62.231) (Ping timeout: 260 seconds)
[17:07:04] <grym> java's like a prison, right? that scans :)
[17:07:28] *** Joins: zyweo (~Svew@user/zyweo)
[17:08:03] *** Quits: jonaskabrink (~jonaskabr@eduroam-165-125.wlan.tu-harburg.de) (Ping timeout: 244 seconds)
[17:08:11] <grym> and now that we all have the pogues / metallica stuck in our heads, we can begin our day!
[17:08:21] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:08:30] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:08:36] *** Joins: jonaskabrink (~jonaskabr@eduroam-165-125.wlan.tu-harburg.de)
[17:08:39] *** Quits: orangeboxcutter (~orange@user/orangeboxcutter) (Quit: ZNC - https://znc.in)
[17:09:06] *** Joins: orangeboxcutter (~orange@user/orangeboxcutter)
[17:09:09] *** Joins: zebrag (~chris@user/zebrag)
[17:09:24] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[17:11:03] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[17:12:55] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[17:13:23] *** Quits: jonaskabrink (~jonaskabr@eduroam-165-125.wlan.tu-harburg.de) (Ping timeout: 260 seconds)
[17:14:42] *** Joins: carl-- (~carl-@185.103.188.130)
[17:14:43] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:16:37] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567377-189.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:17:07] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 260 seconds)
[17:17:46] *** Quits: anonymeowo (~anonymeow@5.34.180.230) (Quit: Konversation terminated!)
[17:18:42] *** Joins: ExeciN (~ExeciN@user/nicexe)
[17:19:34] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:20:14] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 265 seconds)
[17:20:22] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[17:20:27] *** Joins: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC)
[17:21:02] *** Quits: chenqisu1 (~xirndc@183.217.203.91) (Quit: Leaving)
[17:22:41] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:23:04] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[17:23:12] *** Joins: Atque (~Atque@user/atque)
[17:24:50] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:25:43] *** Joins: vulpes_vulpes (~vulpes_vu@88-144-232-205.host.pobb.as13285.net)
[17:25:45] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[17:26:13] *** Joins: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[17:27:10] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-edc6-f9da-a755-45ea.res6.spectrum.com)
[17:27:23] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[17:27:27] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Quit: Going offline, see ya! (www.adiirc.com))
[17:27:33] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[17:27:52] *** Joins: ExeciN (~ExeciN@user/nicexe)
[17:27:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:28:43] *** Quits: carl-- (~carl-@185.103.188.130) (Ping timeout: 244 seconds)
[17:28:51] *** Joins: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[17:28:56] *** Joins: anonymeowo (~anonymeow@185.213.154.243)
[17:29:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[17:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[17:30:34] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[17:30:55] *** Joins: grooverman (~grooverma@177.95.12.14)
[17:30:56] *** Quits: avikalp (~avikalp@49.36.99.188) (Ping timeout: 245 seconds)
[17:31:07] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[17:31:07] *** Joins: djhankb (~djhankb@208.113.164.68)
[17:31:19] <OnceMe> when doing different execution, should I pass connection and cursor to methods? or open/close each time I perform an operation?
[17:31:23] *** Joins: de-facto (~de-facto@user/de-facto)
[17:31:38] *** Joins: fikran (~fikran@user/fikran)
[17:32:11] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: pees oot)
[17:32:20] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 244 seconds)
[17:32:38] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[17:32:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:34:13] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:35:05] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:35:17] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[17:35:43] *** Joins: ub (~Thunderbi@178.115.41.93.wireless.dyn.drei.com)
[17:37:29] *** Quits: ubert (~Thunderbi@178.165.171.196.wireless.dyn.drei.com) (Ping timeout: 244 seconds)
[17:37:30] *** ub is now known as ubert
[17:37:54] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:38:32] *** Quits: OnceMe (~stefan@user/onceme) (Quit: Konversation terminated!)
[17:38:37] *** Joins: akk (~akk@75.161.146.115)
[17:39:03] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 260 seconds)
[17:40:30] *** Joins: dntreou (~yakiza@global-5-45.nat-1.net.cam.ac.uk)
[17:40:48] *** Joins: Ecophobia (~Ecophobia@mobile-access-2e841d-103.dhcp.inet.fi)
[17:41:23] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 260 seconds)
[17:41:34] *** Joins: alkino (~quassel@user/alkino)
[17:41:40] *** Joins: vladoski (~vladoski@2001:b07:add:d406:c85f:d31e:61c2:9e8e)
[17:41:59] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[17:42:09] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 244 seconds)
[17:42:50] <jinsun> how is bottle a pun on WSGI? WSGI has some meaning outside of python?
[17:43:16] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[17:43:18] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[17:43:19] *** Quits: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au) (Ping timeout: 252 seconds)
[17:43:26] <SnoopJ> jinsun, it's often pronounced like "whiskey"
[17:43:28] *** Joins: magla (~gelignite@55d4378c.access.ecotel.net)
[17:43:54] <SnoopJ> "wiss-ghee"
[17:44:13] *** Quits: julia (~quassel@user/julia) (Ping timeout: 244 seconds)
[17:44:18] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[17:44:18] *** Quits: Ecophobia (~Ecophobia@mobile-access-2e841d-103.dhcp.inet.fi) (Client Quit)
[17:44:42] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[17:44:59] <jinsun> oh okay, never saw someone pronounce it
[17:45:07] *** Quits: dntreou (~yakiza@global-5-45.nat-1.net.cam.ac.uk) (Ping timeout: 260 seconds)
[17:45:17] <gitesh> what is 'PACKAGE CONTENTS' ?
[17:45:19] * mrwick always says each letter.
[17:45:22] <gitesh> are they modules?
[17:45:26] *** Quits: kaleido (~adam@user/kaleido) (Ping timeout: 260 seconds)
[17:45:35] <mrwick> "double-u ess jee eiye"
[17:45:38] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[17:45:44] <gitesh> i did `help(flask)`
[17:45:51] <jinsun> my default pronounciation is each letter separately too
[17:46:09] <jinsun> even for gif vs gif
[17:46:29] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[17:46:31] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[17:46:46] *** Joins: jonaskabrink (~jonaskabr@eduroam-165-125.wlan.tu-harburg.de)
[17:46:50] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--2d4.oracle-ocna.com)
[17:47:20] <SnoopJ> gitesh, yes
[17:47:29] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:47:30] *** Quits: jonaskabrink (~jonaskabr@eduroam-165-125.wlan.tu-harburg.de) (Client Quit)
[17:48:04] *** Joins: julia (~quassel@user/julia)
[17:48:09] <SnoopJ> more specifically, it's the modules you find when you call pkgutils.iter_modules() on the __path__ for the object whose documentation you're looking at
[17:49:01] *** Joins: Nspace (~Nspace@user/nspace)
[17:49:54] *** Joins: jonaskabrink (~jonaskabr@eduroam-165-125.wlan.tu-harburg.de)
[17:50:18] *** Joins: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au)
[17:50:18] *** Parts: |\n (~x0a@user/n/x-7623025) ()
[17:50:46] <gitesh> SnoopJ: and what I get if i do `dir(flask)` ? contents? of all modules?
[17:52:15] <SnoopJ> gitesh, the defined names
[17:52:20] *** Joins: lethu (~lethu@user/lethu)
[17:52:36] <gitesh> SnoopJ: Okay
[17:52:58] <SnoopJ> help(dir) explains: "Return an alphabetized list of names comprising (some of) the attributes of the given object"
[17:54:05] *** Joins: thnee (~thnee@h-85-24-144-199.a328.priv.bahnhof.se)
[17:54:30] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[17:55:34] *** Joins: rany (~rany@user/rany)
[17:56:00] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[17:57:21] *** Quits: iflema (~ian@user/iflema) (Remote host closed the connection)
[18:00:45] <gitesh> SnoopJ: Flask class is in app module but I can do `from flask import Flask`
[18:01:08] <gitesh> who takes care of where is Flask?
[18:01:30] <SnoopJ> the name Flask is available in flask, yes
[18:02:46] *** Joins: node1 (~node1@user/node1)
[18:03:02] <Wooble> gitesh: flask/__init__.py will have an import from the app module
[18:03:39] <gitesh> yes it has
[18:03:48] <SnoopJ> Which makes the name available there
[18:04:18] <gitesh> i see
[18:05:10] *** Quits: legola (~legola@46.235.101.181) (Remote host closed the connection)
[18:05:33] <mike18> hi - i have a question to concurrent.futures: https://ideone.com/am1KQo when will i need .get(block = False) ? is there any risk when an exception in the worker occurs?
[18:06:20] *** Quits: fandre1986 (~fandre198@178-36-241-155.adsl.inetia.pl) (Quit: Connection closed)
[18:08:38] *** Quits: Phase (~phase@user/phase) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[18:08:59] <bjs> mike18: where would you put that .get(block=False) ? You didn't say
[18:09:09] <mike18> line 7
[18:09:24] <mike18> i currently have a blockging call - is that ok?
[18:09:26] <bjs> mike18: is connection_q a queue.Queue ?
[18:09:29] <mike18> yes
[18:09:36] <bjs> mike18: "blocking" just means "wait"
[18:09:45] <mike18> wait indefinately
[18:09:46] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:09:50] <bjs> potentially yes
[18:09:51] *** Quits: lericson (~lericson@user/lericson) (Ping timeout: 258 seconds)
[18:10:03] <mike18> i wonder if that has some risks
[18:10:18] <bjs> mike18: well it has the risk that if the other side never puts anything, this side will wait forever for it to arrive
[18:10:22] <mike18> i create connections and put in the queue
[18:10:38] <Midjak> Hi I looking for documentation about "async for" and "async with" I have some difficult to understand how to use them. I have read all asyncio chapter and I didn't see where this constructs are mentioned . Am I miss something ? I would like initialize my own async generator and iterate from another async generator provided by a third library.
[18:10:46] <mike18> than each worker picks it from the queue
[18:10:55] <mike18> @bjs what about exceptions in the fetching?
[18:10:57] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[18:11:00] <bjs> mike18: fetching where?
[18:11:03] <mike18> the fetching uses the connection btw
[18:11:07] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[18:11:11] <mike18> line 9
[18:11:14] <bjs> mike18: you mean the self.fetch_data() call?
[18:11:25] <Midjak> this is the library https://pypi.org/project/aiocsv/
[18:11:29] <bjs> if that raises an exception then line 12 won't be called, so the value won't be put on the queue
[18:11:32] *** Joins: Phase (~phase@user/phase)
[18:11:34] <mike18> @bjs yeah i forgot to add that fetch_data uses the connection
[18:11:56] <mike18> yeah but if it doesnt put in the queue - thats bad
[18:12:13] <mike18> it runs out of connections basically
[18:12:24] <mike18> or will it return to line 22?
[18:12:27] *** Joins: stdout (~stdout@216.163.21.11)
[18:12:40] <mike18> which is the except Exception as exc:
[18:13:07] <bjs> mike18: yes, the result() call will raise the exception in the other thread
[18:13:24] <mike18> do you see something wrong with this code?
[18:13:38] <mike18> not entire sure about line 7 still
[18:13:44] <bjs> Midjak: https://docs.python.org/3/reference/compound_stmts.html#coroutines has the documentation for those things.  But really `async for` and `async with` are just versions of for/with for versions of the things that are defined with `async def ...`s
[18:14:15] <bjs> mike18: if one thread tries to .get() and no other thread put()s then it will wait forever.  The code is kind of weird though,  it takes the connection off the queue then puts it back on?
[18:14:38] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[18:14:59] <bjs> mike18: there's like no context to this code though, so it's hard to say;  this exact code might be totally fine and exactly what you want/need in one scenario and totally broken in another
[18:14:59] *** Quits: Ergo^ (~ergo@91.238.59.144) (Ping timeout: 260 seconds)
[18:15:00] *** Joins: Avonrepublic (~avonrepub@77.100.130.118)
[18:15:21] <mike18> it basically uses x connections to fetch data and process stuff
[18:15:28] <mike18> because i/o is slow
[18:15:28] *** Parts: anarcat (~anarcat@user/anarcat) ()
[18:16:08] <mike18> so if worker is called it fetches data xyz from the server using connect from the q
[18:16:25] *** Joins: mawk (mawk@wireguard/contributor/mawk)
[18:16:26] <mike18> after fetch is done - next worker can do the same
[18:16:38] <Midjak> yes bjs in the lib I have linked I don't understand how to yield a row from my own async generator instead of printing it . Where should I intialize the iterator ?
[18:16:41] <mike18> so i make sure only x connectons are used concurrently
[18:16:53] <mike18> not to overload server
[18:16:59] <mike18> @bjs does that make sense?
[18:17:11] <bjs> Midjak: you mean where it has `print(row)  # row is a dict`  in the docs there?  What about just `yield row`
[18:17:27] *** Joins: pycurious (~Adium@user/pycurious)
[18:18:17] <gitesh> thank you guys :)
[18:18:21] <bjs> mike18: sure,  but I mean I'm still just going to say the same thing. If one thread calls .get() and nothing ever .put()s back on the queue then it'll wait forever.  There's only so many ways I can re-phrase this same thing over and over, you'll just have to work through the code and figure out if there's any situation where you can get into a bad case
[18:18:24] <Midjak> don't work bjs
[18:18:31] <bjs> Midjak: what does "dont work" mean?
[18:18:39] <Midjak> right now I have this (which doesn't work) https://bpa.st/47IA
[18:18:44] <mike18> bjs: it only waits as long as the other server replied....
[18:18:57] <mike18> why wait forever?
[18:19:04] <Midjak> and I can return to my previous attempt with yield (which doesn't work too)
[18:19:16] <Saxtheowl>  what does [0, v] mean in this command "r.append([0, v])" ?
[18:19:32] <grym> Saxtheowl: it means append a list contining the values 0 and v
[18:19:35] <grym> (whatever v is )
[18:19:36] <bjs> Saxtheowl: it's a list of length 2, with first element the number 0 and the second element the value v
[18:19:39] <gitesh> is there an image of flask? that says Flask is an central object and other things are aroung it?
[18:19:45] <mike18> bjs: should i construct a better example?
[18:20:06] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567377-189.dhcp.inet.fi)
[18:20:16] *** Joins: Atque (~Atque@user/atque)
[18:20:25] <bjs> mike18: I don't really know what you're looking for here, you can come up with 100 more examples and I can just repeat the behaviour of .get() 100 more times
[18:20:36] *** Joins: lericson (~lericson@user/lericson)
[18:20:37] *** Parts: Avonrepublic (~avonrepub@77.100.130.118) ()
[18:20:53] <mike18> bjs: i try to lookup to speed up fetching data from a very slow server. using concurrent threads
[18:20:56] <bjs> but you're going to have to look at your code and think about whether the "bad case" you're worried about (a .get() that waits forever) can happen
[18:21:02] <mike18> bjs: i cant use aync
[18:21:44] <mike18> yeah - what are other ways to speedup fetching data from a very slow server?
[18:21:48] <bjs> Midjak: what is that asyncio.task thing,  this is very old?
[18:21:50] <mike18> without aync
[18:22:24] <hexnewbie> Got bit by a fancy 2to3 bug: enumerate(d.items()) is not refactored: https://bpa.st/B3PA
[18:22:26] <Midjak> bjs I tried several thing
[18:22:34] <Midjak> this is my first attempt https://bpa.st/5SXA
[18:22:55] *** Quits: cul8r (~cul8r@76.113.95.199) (Quit: Leaving)
[18:23:19] <Midjak> it fails at l-29 : 'async for' received an invalid object from __anext__: async_generator
[18:23:37] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[18:24:02] <hexnewbie> Although, enumerate(sorted(d.items())) did get turned into enumerate(sorted(iter(d.items())
[18:24:03] *** Joins: Nspace (~Nspace@user/nspace)
[18:24:16] <hexnewbie> er, d.iteritems()
[18:24:20] <bjs> Midjak: it looks like you confused __iter__ and __next__ (or their async variants)
[18:24:38] <bjs> Midjak: you can *return* from next,  or *yield* from iter. You tried it the other way, but that's backwards.  Here: https://bpa.st/YJIA
[18:24:47] <Midjak> If I return instead I get the first line of the file infinitely
[18:25:09] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[18:26:04] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 244 seconds)
[18:26:35] *** Quits: Nspace (~Nspace@user/nspace) (Client Quit)
[18:26:36] *** Quits: dcaro_ooo (~dcaro@user/dcaro) (Ping timeout: 265 seconds)
[18:26:55] <Midjak> Where can I open the file and initiate the iteration  ?
[18:26:57] <bjs> Midjak: you do exactly the same thing you do normally with __iter__/__next__; __aiter__ should return an asynchronous iterator which has an __anext__ method.  It's just that the next thing is awaitable rather than immediate (e.g. the __anext__ is an `async def` or that the __aiter__ is an async generator)
[18:27:17] <bjs> Midjak: did you see my paste?  You can just do things inside the __aiter__
[18:27:24] <bjs> and yield the things you want
[18:27:37] *** Quits: regulate (~regulate@koduro.com) (Ping timeout: 244 seconds)
[18:27:46] *** Joins: dcaro (~dcaro@user/dcaro)
[18:28:15] <Midjak> bjs I don't understand how to transpose this to my problem
[18:28:35] <bjs> Midjak: you had https://bpa.st/5SXA, but your __anext__ is really what you wanted __aiter__ to be
[18:28:40] <bjs> because it's trying to yield many things
[18:28:59] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[18:29:12] <bjs> Your __anext__ is trying to yield things but that's probably not what you wanted, you wanted to write an __aiter__ that yielded things.
[18:29:19] <bjs> Like how you write normal __iter__'s that yield things
[18:29:38] <Midjak> yes because I don't know where I can open the file and do the async for
[18:29:40] *** Joins: regulate (~regulate@koduro.com)
[18:29:44] *** Joins: Ergo^ (~ergo@91.238.59.144)
[18:29:47] <Midjak> I understand I cannot do that
[18:29:52] <bjs> Midjak: cannot do what?
[18:30:15] <Midjak> this https://bpa.st/5SXA
[18:30:41] <bjs> Midjak: yes that paste is almost correct (apart from idk what the asyncio.task thing is doing) except you're writing __anext__ there
[18:30:51] <bjs> you meant to write __aiter__,  __aiter__ is the thing that returns the iterator
[18:31:09] <bjs> rename it "__aiter__"
[18:31:13] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[18:31:55] *** Quits: pankid (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:32:06] <Midjak> ah...
[18:32:12] *** Joins: pankid (~quassel@pankid.club)
[18:32:42] <mike18> bjs: what are other ways to speedup fetching data from a very slow server without aync?
[18:32:45] <bjs> Midjak: like with normal classes, you can write an __iter__ that returns a generator (because a generator is an iterator) you can write an __aiter__ that returns an async generator (because async generators are async iterators) just by writing the function with "yield"s in it
[18:33:04] <bjs> mike18: what's wrong with the way you have?  I mean having connections and a pool of threads what other ways are there?
[18:33:13] <Midjak> Ok
[18:33:15] <bjs> move your computer closer to the server? :P
[18:33:22] <mike18> hehe
[18:33:23] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[18:33:32] <mike18> bjs: or write good server code? :)
[18:33:36] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:33:36] <mike18> improve slow db
[18:33:59] *** Quits: SallyAhaj_ (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[18:34:20] <Midjak> like this import asyncio
[18:34:20] <Midjak> import csv
[18:34:20] <Midjak> import aiofiles
[18:34:20] <Midjak> from aiocsv import AsyncReader, AsyncDictReader, AsyncWriter, AsyncDictWriter
[18:34:20] <Midjak> class RefParser:
[18:34:21] <mike18> bjs: i just need to check the timeout case - if server doesnt reply within x seconds - if i get a exception or so from that fetching lib
[18:34:21] <Midjak>     def __init__(self, path):
[18:34:21] *** litharge sets mode: +q $a:Midjak
[18:34:52] *** litharge sets mode: -q $a:Midjak
[18:34:53] <Midjak>       like this bjs https://bpa.st/JNJQ ?
[18:34:53] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[18:34:55] <Midjak> sorry
[18:34:55] <bjs> Midjak: i think the bot quieted you, try use a pastebin
[18:35:05] <bjs> mike18: sure you can do that if you want
[18:35:07] *** Quits: raph_ael (~raphael@user/raph-ael/x-7806685) (Quit: WeeChat 3.1)
[18:35:21] <Midjak> yes I have a copy/paste incident :-)
[18:35:23] <mike18> bjs: yeah thx
[18:35:32] <Midjak> https://bpa.st/JNJQ
[18:35:36] <bjs> Midjak: that looks like Python for sure,  does it work? :P
[18:35:43] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[18:35:46] <Midjak> it works
[18:35:50] <Midjak> thank you bjs
[18:36:17] <Midjak> but I am not sure to understand
[18:36:26] <bjs> Midjak: what part do you not understand?
[18:36:41] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:37:41] <Midjak> I think it's the __iter__ and __next__ method and therefore __anext__ and __aiter__
[18:38:18] *** Joins: tobybl (~tobybl@213.31.135.91)
[18:38:28] *** Quits: regulate (~regulate@koduro.com) (Ping timeout: 244 seconds)
[18:38:32] *** Joins: rany (~rany@user/rany)
[18:38:36] *** Joins: regulate (~regulate@koduro.com)
[18:38:39] <Midjak> you are right when you said I "confused __iter__ and __next__ "
[18:39:20] *** Quits: orangeextract (~orangeext@user/orangeextract) (Quit: Leaving)
[18:39:27] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[18:40:43] <Midjak> I thought I always need to provide a __next__ when I implement a __iter__
[18:41:07] *** Quits: tobybl_ (~tobybl@213.31.135.91) (Ping timeout: 260 seconds)
[18:41:09] <bjs> Midjak: __iter__ has to return a type that has a __next__,  it doesn't have to be *you* that writes that type though
[18:41:25] <Midjak> yes...
[18:41:43] *** Parts: leftyfb (leftyfb@ubuntu/member/leftyfb) (Leaving)
[18:41:48] *** Quits: achilleas (ach@user/achilleas) (Quit: :wq)
[18:42:06] *** Joins: luva (~luva@5.180.62.230)
[18:42:23] <bjs> Midjak: https://bpa.st/QQKA
[18:42:36] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[18:42:55] *** Quits: RiFo (~RiFo@user/rifo) (Quit: ... and thanks for all the fish.)
[18:43:06] <bjs> Midjak: __iter__ has to return an iterator, and the iterator object needs a __next__ (and also an __iter__ which returns itself, to be technically correct)
[18:43:20] <Midjak> Thank you bjs I am going to keep this example aside.
[18:43:52] <Midjak> It seems obvious now... :-(
[18:44:07] *** Joins: fannagoganna (uid110488@id-110488.tinside.irccloud.com)
[18:45:44] *** Joins: imakestuff (~imakestuf@197.156.77.192)
[18:46:12] *** Joins: FluffyMask (~masque@user/fluffymask)
[18:46:35] <imakestuff> can anyone recommend a good article how an MRO is created during multiple inheritance?
[18:46:55] *** Joins: achilleas (ach@user/achilleas)
[18:47:02] <Yhg1s> imakestuff: https://www.python.org/download/releases/2.2.3/descrintro/#mro
[18:47:35] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Ping timeout: 260 seconds)
[18:47:35] <imakestuff> Yhg1s: can you help me this snippet please? why the MRO  is the way it is...
[18:47:36] <imakestuff> https://dpaste.org/Mh92
[18:47:40] *** Joins: de-facto (~de-facto@user/de-facto)
[18:47:43] <bjs> imakestuff: https://docs.python.org/3/glossary.html#term-method-resolution-order has a link to https://www.python.org/download/releases/2.3/mro/ for the actual algorithm,  is that the kind of thing you wanted?
[18:47:51] <imakestuff> it gives me:
[18:47:53] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[18:48:17] <imakestuff> [<class '__main__.Spiderpig'>, <class '__main__.Pig'>, <class '__main__.Nameable'>, <class '__main__.Spider'>, <class '__main__.Animal'>, <class '__main__.LivingThing'>, <class 'object'>]
[18:48:38] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[18:48:40] <bjs> imakestuff: and is there a particular class that isn't in the place you expected it to be in the MRO?
[18:48:44] <imakestuff> I'm wondering why <class '__main__.Animal'> didn't come after <class '__main__.Spiderpig'>?
[18:48:44] *** Quits: zoid (~zoid@user/taxationistheft) (Changing host)
[18:48:44] *** Joins: zoid (~zoid@user/zoid)
[18:49:04] <imakestuff> I mean <class '__main__.Pig'>
[18:49:05] <bjs> imakestuff: you before Pig ?
[18:49:32] <imakestuff> just because Nameable is in the middle parent classes were taken to the end...
[18:49:57] <bjs> imakestuff: what about Spider?  Spider also has Animal
[18:49:58] <imakestuff> but if Nameable is at the end of the multiple interitance Animal comes before it
[18:50:06] <bjs> you wouldn't want Animal appearing *before* Spider in the MRO
[18:50:19] *** Joins: Nspace (~Nspace@user/nspace)
[18:50:19] <imakestuff> hmmm
[18:50:21] <imakestuff> aha
[18:50:40] <imakestuff> so it checks there are no child classes before it starts appending the parents?
[18:50:50] *** Quits: UnnamedBeer (~UnnamedBe@100.red-83-54-17.dynamicip.rima-tde.net) (Quit: WeeChat 2.3)
[18:51:19] <bjs> imakestuff: roughly yes, it looks at all of the classes and all of the children before building the MRO
[18:52:07] <bjs> Like here it needs to make sure Animal comes after all the classes that inherit Animal, and same with LivingThing and Nameable and object itself :)
[18:52:17] <imakestuff> Great
[18:52:21] <imakestuff> that makes sense now
[18:52:30] <imakestuff> thanks!
[18:52:36] <bjs> it needs to take the whole graph of classes and puts them in an order so that the parents come before the children always
[18:52:42] <imakestuff> yeah
[18:52:45] <imakestuff> one more question
[18:52:46] <bjs> imakestuff: Yhg1s's link explains in more detail *how* Python does this
[18:52:48] <bjs> sure
[18:53:11] <imakestuff> jeff = Spiderpig()
[18:53:11] <imakestuff> pprint(jeff.here())
[18:53:11] <imakestuff> next = super(Spiderpig, jeff)
[18:53:12] <Yhg1s> (and also why.)
[18:53:33] <imakestuff> next is Pig instance of jeff
[18:53:51] <Yhg1s> imakestuff: there isn't a 'Pig instance of jeff'. There is only one instance. It's 'jeff'.
[18:53:51] <imakestuff> what do I use instead of super if i want Spiderpig instance of jeff
[18:54:05] <ldericher> Hi! I'm creating a YML file using PyYAML, `yml_string = yaml.dump(...)`, then doing a `re.sub` on that string, then prepending something to that. Can I also do this in a dedicated `yaml.Dumper` class instead?
[18:54:08] <bjs> imakestuff: there is only 1 instance, it's called "jeff" (or self)
[18:54:17] <imakestuff> i mean jeff with Pig's methods prioritized
[18:54:19] <imakestuff> right
[18:54:23] <bjs> the super()s don't give different instances, just let you look up the methods from different classes
[18:54:26] <imakestuff> it's used to call methods from super classes
[18:54:30] *** Joins: RiFo (~RiFo@user/rifo)
[18:54:35] <imakestuff> bjs: that's what I wanted to mean
[18:54:38] <Yhg1s> imakestuff: it's used to call the method that would have been called had the class not defined the method.
[18:54:38] <imakestuff> sorry
[18:54:43] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[18:54:55] <Midjak> bjs to sumarize : "A generator is a class which provides a method __next__ .
[18:54:55] <Midjak> An iterable is a class which provides a __iter__ method returning a generator which returns at each call to __next__ an element among the elements to iterate. " Do you agree with this ?
[18:55:00] <imakestuff> yeah what method do i use instead of super() to pass specific class
[18:55:02] <bjs> imakestuff: surely just jeff on its own will get you the actual methods you want?  I'm not sure what you're asking
[18:55:06] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--2d4.oracle-ocna.com) (Ping timeout: 245 seconds)
[18:55:09] <Yhg1s> imakestuff: you can't call a specific class.
[18:55:18] <Wooble> imakestuff: you can do Pig.method(jeff) but... probably don't?
[18:55:22] <imakestuff> i have to find the child and user super?
[18:55:28] <Yhg1s> imakestuff: that's not how MI works. It can't work like that. If you need to call a specific class's method, you neeed to either not use MI, or make it a _different_ method.
[18:55:42] <imakestuff> yeah
[18:55:44] <bjs> Midjak: well an iterator* is something that has a __next__.  Generators are iterators. So is my ManualIterator class.
[18:55:47] <imakestuff> i am just doing the koans and learning
[18:56:05] <imakestuff> so i need to look into Pig.method(jeff)
[18:56:09] <imakestuff> Cls.method()
[18:56:32] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[18:56:43] <Yhg1s> imakestuff: no, don't call Pig.method(jeff).
[18:56:47] *** Joins: de-facto (~de-facto@user/de-facto)
[18:56:48] <imakestuff> is it Cls.method( inst, *args, **kwargs)
[18:56:51] <Midjak> I thought an iterator as a kind of generator.
[18:56:55] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[18:57:03] <imakestuff> Yhg1s: why not/
[18:57:04] <Yhg1s> Midjak: it's the opposite. Generators are iterators, but not all iterators are generators.
[18:57:05] <imakestuff> ?
[18:57:08] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--f2.oracle-ocna.com)
[18:57:08] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[18:57:16] <bjs> Midjak: other way around,  "iterator" is the generic name for any type that has a __next__. Generators are one such type, but there are others
[18:57:22] <Yhg1s> imakestuff: because it will unintentionally skip methods in the MRO, or call methods multiple times.
[18:57:56] <imakestuff> Midjak: generators are types of iterators whose values are generated on the fly
[18:58:15] <imakestuff> e.g. reading file and returning new line on every __next__
[18:58:45] *** Joins: nomic (~nomic@85.203.36.101)
[18:58:45] <Midjak> ok so an incrementor is an iterator ?
[18:58:49] <imakestuff> Yhg1s: so it's not recommended to skip the inheritance tree?
[18:58:54] <bjs> Midjak: what is "an incrementor" ?
[18:59:03] <imakestuff> Yhg1s: and I don't understand why it might call multipole times?
[18:59:05] <Yhg1s> imakestuff: it is not a sensible thing to do.
[18:59:08] *** Joins: Nspace (~Nspace@user/nspace)
[18:59:12] <Midjak> a thing which provide 0, 1, 2, 3, ...
[18:59:23] <Midjak> without stop
[18:59:30] <bjs> Midjak: if that "thing" is an instance of a class, and that class defines a __next__ then yes it's an iterator
[18:59:34] <imakestuff> Midjak: depends how it's implemented
[18:59:35] <bjs> "iterator" just means "has a __next__ method"
[18:59:41] <Midjak> ok
[18:59:42] <imakestuff> but  should be a generator
[19:00:03] <SnoopJ> point of clarification: iterators must also have __iter__ which returns themselves, but __next__ is the meaningful part
[19:00:18] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:a1cc:f344:a47d:7d01)
[19:00:40] *** Quits: Nspace (~Nspace@user/nspace) (Client Quit)
[19:00:42] *** Joins: matrixbot_bartab (~matrixbot@195.200.221.101)
[19:00:55] <Midjak> so my Parser is not an Iterator according to your definition SnoopJ
[19:01:58] *** Joins: hodapp (~mawson@user/hodapp)
[19:02:00] <SnoopJ> Midjak, it's not my definition, FWIW, it's Python's
[19:02:00] <bjs> Midjak: and in my pastehttps://bpa.st/QQKA neither GeneratorIterable or ManualIterable are iterators
[19:02:18] <bjs> because they only have __iter__ not __next__.
[19:02:22] <Midjak> I mean the defintion you gave SnoopJ
[19:02:32] <Soldofor> Quick question please. In this: https://dpaste.org/Mh92 Where he declares the Spiderpig(Pig, Nameable, Spider, ) class, what does the trailing comma do? Usually it is used to write a tuple literal, but I didn;t encounter this usage before
[19:02:33] <bjs> Lots of types are like this,  lists, dictionaries, tuples, sets etc all have __iter__ but not __next__. :)
[19:02:36] <Midjak> ok it's clear
[19:02:40] <bjs> Soldofor: nothing
[19:02:43] <Midjak> thank you all
[19:02:49] *** Joins: Nspace (~Nspace@user/nspace)
[19:02:55] <bjs> Soldofor: you can put trailing commas in Python and they do nothing,
[19:03:08] <Soldofor> bjs Thanks
[19:03:11] <Wooble> (except when you can't, but good luck remembering when that is. :) )
[19:03:13] <Soldofor> Thought so :)
[19:03:19] *** Joins: hacksword (~hacksword@67.212.238.215)
[19:03:44] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[19:04:48] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[19:04:52] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:04:56] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[19:05:18] <plainoldcheese> hi, is there a way to save a matplotlib plot as a pdf but have the actual data portion of the plot an image (like png or jpeg) i have a plot with a ton of data points that needs to be included in a pdf and it's making the pdf load slow (or crash) and i would like to save it as an image but still keep the axis labels and titles as selectable text. Is this possible?
[19:05:21] <jinsun> SnoopJ: there was a debate about that definition recently https://bugs.python.org/issue45250
[19:05:33] <Soldofor> bjs One more thing, in the example imakestuff gave with the class inheritance, it seems the order is the one declare in the class definition
[19:05:38] <SnoopJ> jinsun, yea I'm not sure what async adds to the mix here
[19:06:03] <Soldofor> class Spiderpig(Pig, Spider,Nameable,  ): pprint(type(Spiderpig()).mro()) returns [<class '__main__.Spiderpig'>,
[19:06:03] <Soldofor>  <class '__main__.Pig'>,
[19:06:04] <Soldofor>  <class '__main__.Spider'>,
[19:06:04] <Soldofor>  <class '__main__.Animal'>,
[19:06:05] <Soldofor>  <class '__main__.LivingThing'>,
[19:06:05] <Soldofor>  <class '__main__.Nameable'>,
[19:06:05] *** litharge sets mode: +q $a:Soldofor
[19:06:20] <bjs> liam: well it's not quite the order, but yes, what's the question?
[19:06:21] *** Joins: theprophet (~theprophe@85.114.228.184)
[19:06:23] <bjs> oops
[19:06:28] <bjs> Soldofor: well it's not quite the order, but yes, what's the question?
[19:06:36] *** litharge sets mode: -q $a:Soldofor
[19:06:46] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[19:06:48] <bjs> (also don't paste lots of lines, otherwise the litharge bot gets angry)
[19:06:49] <Soldofor> bjs Wasn't that his initial question? Why the order is as it is
[19:06:57] <bjs> Soldofor: yes, are you just asking the same question?
[19:07:32] *** Quits: Nspace (~Nspace@user/nspace) (Client Quit)
[19:07:59] <Soldofor> No, I was getting different answers when I was reading through them
[19:08:06] <theprophet> Whenever Django encounters include(), it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing.
[19:08:11] <bjs> Soldofor: different answers?
[19:08:20] *** Quits: RiFo (~RiFo@user/rifo) (Quit: ... and thanks for all the fish.)
[19:08:24] <theprophet> can you guys help me deconstruct the text here? i am copying this from django doc
[19:08:35] <theprophet> i am not getting the matched up part.
[19:09:01] <theprophet> to what point exactly?
[19:09:13] <Wooble> theprophet: #django is likely a better place to ask
[19:09:34] <deniska> theprophet: include('/some/url', another_router) when encountering /some/url/here will send /here to another_router
[19:09:46] <bjs> Soldofor: oh when you change the order of the classes you get a different order in the MRO?  Yes, that's correct
[19:09:50] <deniska> (or whatever the exact django syntax)
[19:09:51] *** Joins: RiFo (~RiFo@user/rifo)
[19:09:54] <Soldofor> bjs imakestuff: "wondering why <class '__main__.Animal'> didn't come after <class '__main__.Spiderpig'>?"
[19:09:55] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:10:08] <Soldofor> bjs18:39:47
[19:10:08] <Soldofor> Soldofor: oh when you change the order of the classes you get a different order in the MRO?  Yes, that's correct Yes
[19:10:10] <bjs> Soldofor: yeah, because there's also Spider and Animal has to come after Spider too
[19:10:58] <bjs> infact all the children have to appear in the MRO before their parents
[19:11:26] *** Quits: FieryMewtwo (cheezyfry@user/fierym2) (Excess Flood)
[19:11:27] *** Quits: matrixbot_bartab (~matrixbot@195.200.221.101) (Ping timeout: 260 seconds)
[19:11:28] <theprophet> deniska is there any source with examples for that? because your answer is kind of confusing me .
[19:11:51] *** Quits: Syroth (~Syroth@pool-96-244-212-50.bltmmd.fios.verizon.net) (Quit: Leaving)
[19:12:07] <theprophet> deniska i dont want to be annoying.
[19:12:18] <deniska> theprophet: https://docs.djangoproject.com/en/3.2/ref/urls/#path
[19:12:28] <Soldofor> bjs Thanks
[19:12:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[19:12:42] *** Joins: pro_z (~pro_z@37.214.49.15)
[19:13:24] <bjs> Soldofor: that's basically all the algorithm is, there's not many ways you can put them so that all the children come before their parents, then you just break the ties with the left->right rule
[19:14:11] *** Quits: zyweo (~Svew@user/zyweo) (Ping timeout: 264 seconds)
[19:15:01] <theprophet> deniska i understand the include() in very simple way, like it will include orther urlconfs in root url which is django project url. but is there anything else to know, on such simple level?
[19:15:10] <Soldofor> bjs Basically up the tree, right?
[19:15:26] <Soldofor> Level by level
[19:15:46] <bjs> Soldofor: https://en.wikipedia.org/wiki/C3_linearization
[19:15:59] *** Quits: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net) (Read error: Connection reset by peer)
[19:16:14] *** Joins: matrixbot_bartab (~matrixbot@195.200.221.101)
[19:16:29] <Soldofor> bjs Thanks!
[19:16:29] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--f2.oracle-ocna.com) (Read error: Connection reset by peer)
[19:16:59] *** Joins: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net)
[19:17:07] *** Quits: Intelo (~Intelo@88.246.77.74) (Quit: Client closed)
[19:18:10] <deniska> theprophet: it doesn't necesserily have to be a root url, includes can be nested
[19:19:55] <theprophet> deniska ok ill have that in mind thank you. , can you please be a little bit more specific on  "matched up to that point" , i will litteraly take 5 minutes from you, if i dont get it, ill leave.
[19:20:31] <deniska> theprophet: Imagine you created a forum app, which may have a /post_message route
[19:20:43] <theprophet> ok
[19:21:06] <deniska> theprophet: then you can include it with base url of /forum, then if a user goes to /forum/post_message, the /post_message of the forum app gets triggered, /forum part was chopped off as the docs say
[19:21:58] <theprophet> ohhhh ok ok, ok, i get this. thankks , big thanks..
[19:22:07] <theprophet> deniska thank you
[19:24:11] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[19:25:28] <foo> Can someone confirm, a dictionary - even if someone does timeline = dict(sorted(items)) on it - will not guarantee it's order. Correct?
[19:25:58] <deniska> foo: dicts maintain insertion order since some python version
[19:26:02] <grym> foo: in 3.7+ dicts preserve insertion order
[19:26:10] <foo> oh, I didn't know this.
[19:26:40] <grym> sets are i think the last remaining unsorted container builtin
[19:26:43] <bjs> foo: also see collections.OrderedDict
[19:27:03] <foo> grym: thank you, helpful.
[19:27:12] <mawk> is jupyter not compatible with python 3.10 ? when I run the terminal console it fails with a wrong call signature in asyncio
[19:27:24] <mawk> like "TypeError: asyncio.wait() got an unexpected keyword argument 'loop'"
[19:27:35] <mawk> the browser thing works fine though
[19:27:47] <mawk> as well as the Qt console
[19:28:21] <Yhg1s> mawk: Yes, the 'loop' parameter to asyncio.wait and a bunch of other functions was deprecated in 3.8, removed in 3.10.
[19:29:03] <mawk> I see thanks, I suppose an update will come in the next days if it's easy to fix like that
[19:29:05] *** Joins: hwrd (sid64402@lymington.irccloud.com)
[19:29:36] *** Joins: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul)
[19:29:55] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[19:30:56] *** Quits: Ilyu (~quassel@78.202.228.230) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:30:59] *** Joins: djhankb (~djhankb@208.113.164.68)
[19:31:00] *** Joins: kaleido (~adam@user/kaleido)
[19:31:00] *** Quits: MikachuPi (~Mikachu@2001:bc8:47a8:559::1) (Quit: Mikachuuuuuuu !)
[19:31:14] *** Quits: wolfgang (~wolfgang@101.174.167.116) (Remote host closed the connection)
[19:31:22] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[19:31:58] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:31:59] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[19:32:29] <Wooble> mawk: I wouldn't bet on "days", bug report has been open since july 2, and it would have been issuing a warning for years...
[19:32:34] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[19:33:00] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:33:32] *** Quits: lethu (~lethu@user/lethu) (Quit: Leaving)
[19:33:37] <grym> 3.7 broke tensorflow for months :)
[19:33:53] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[19:34:10] *** Joins: Macuser (~Macuser@216.30.159.201)
[19:34:13] <mawk> maybe I should look at it myself Wooble
[19:34:28] *** Quits: thm (~thomas@fedora/thm) (Remote host closed the connection)
[19:34:31] <mawk> they clearly fixed it for other parts of jupyter like notebook and qtconsole, they just "forgot" or whatever the regular console
[19:34:36] <mawk> unless these other two parts do not use asyncio at all
[19:34:54] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[19:34:54] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[19:35:12] *** Parts: kaleido (~adam@user/kaleido) ()
[19:35:19] *** Joins: slee (~slee@user/slee)
[19:36:03] *** Quits: matrixbot_bartab (~matrixbot@195.200.221.101) (Ping timeout: 265 seconds)
[19:36:37] <slee> hi, trying to figure out how i'd use re.sub to replace any instance of say #1234...# plus the next 4 following characters in a string
[19:36:42] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[19:36:57] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[19:37:03] <mawk> using a group for the next 4 characters
[19:37:39] <slee> yes, [0-0]...but i'm not sure how i'd tell it # and the next 4 [0-9]
[19:37:46] <mawk> ah no not using a group nevermind
[19:37:46] <slee> err, 0-9
[19:37:59] <mawk> #[0-9]{4}#.{4}
[19:38:02] <mawk> like this?
[19:38:11] <slee> lemme try
[19:38:57] <mawk> yeah it works
[19:39:05] <mawk> you can use the website regex101 to try regexes like this it's very useful
[19:39:09] <slee> sweet, thanks
[19:39:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[19:39:48] *** Joins: ballingt (sid190590@helmsley.irccloud.com)
[19:40:27] *** Quits: jonaskabrink (~jonaskabr@eduroam-165-125.wlan.tu-harburg.de) (Quit: jonaskabrink)
[19:40:44] <mawk> do you understand the regex slee ?
[19:40:50] <mawk> a{4} means 4 occurences of a
[19:40:58] *** Joins: fikran (~fikran@user/fikran)
[19:41:11] <mawk> [0-9] means 0, 1, 2, 3, 4, 5, 6, 7, 8 or 9; and . means anything
[19:41:21] <mawk> maybe you don't want anything after the second # so you can be more specific
[19:41:53] <slee> just need to replace the 4 numbers after the # in a string, nomatter how many instances of it
[19:42:02] <slee> txt, n = re.subn('#[0-9]{4}', '*', str)
[19:42:08] <slee> is working
[19:42:26] <mawk> between # no?
[19:42:29] <mawk> that's what you wanted
[19:42:39] <mawk> it's more precise, '#[0-9]{4}#'
[19:42:46] *** Joins: lethu (~lethu@user/lethu)
[19:42:57] <slee> yes, wanting to replace the 4 numbers that follow the # with '*'
[19:42:58] <mawk> also use r'' for regexes slee , then you don't have to double escape when you use escapes (and your IDE will light up the regex maybe)
[19:43:09] <mawk> yes slee but you want to match only numbers between # right
[19:43:22] <mawk> otherwise your regex will match #1234lolol and you don't want that, right?
[19:43:30] <mawk> you want to match #1234#lol
[19:44:04] <slee> to convert sssss#1234ssss#4543ssssss to sssss#****ssss#****ssssss
[19:44:09] <mawk> ah
[19:44:11] <mawk> ok, right
[19:44:36] <mawk> why are you using subn?
[19:44:46] <slee> i'm trying everything
[19:44:52] <mawk> re.sub('#[0-9]{4}', '****', str)
[19:45:00] <mawk> no sorry: re.sub('#[0-9]{4}', '#****', str)
[19:45:30] <mawk> you can compile your regex if you're going to use it many times: regex = re.compile(r'#[0-9]{4}'); then you use it like regex.sub('#****', str)
[19:45:48] <Wooble> the re module will compile it for you anyway.
[19:45:55] <slee> that works, thanks
[19:45:56] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:45:59] <Wooble> (and cache it)
[19:46:52] <mawk> a
[19:47:05] <mawk> so re.compile is never useful Wooble ? unless you exceed the cache size I guess
[19:47:22] <mawk> anyway it's still useful to give a name to the regex
[19:47:43] <ldericher> anyone familiar with ruamel.yaml?
[19:47:43] <slee> it was the {4} i was needing..thanks for the help
[19:47:46] *** Quits: orangeboxcutter (~orange@user/orangeboxcutter) (Remote host closed the connection)
[19:48:00] *** Joins: avikalp (~avikalp@49.36.99.188)
[19:48:02] *** Joins: orangeboxcutter (~orange@user/orangeboxcutter)
[19:48:29] *** Joins: megaTherion (~therion@unix.io)
[19:48:56] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[19:49:46] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[19:50:19] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[19:50:21] *** Quits: slee (~slee@user/slee) (Quit: Leaving)
[19:50:57] <moonmoon> ldericher: yeah I use it
[19:51:31] *** Quits: RiFo (~RiFo@user/rifo) (Ping timeout: 265 seconds)
[19:51:41] *** Quits: nomic (~nomic@85.203.36.101) (Quit: Leaving)
[19:51:50] *** Quits: davor (~davor@user/davor) (Ping timeout: 244 seconds)
[19:52:06] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[19:52:19] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:a1cc:f344:a47d:7d01) (Quit: Client closed)
[19:52:41] <ldericher> moonmoon, how can I specify indentation on a dump?
[19:53:01] <ldericher> I only see `yaml.indent` as a property
[19:54:20] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:54:23] *** Joins: davor (~davor@user/davor)
[19:56:00] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[19:57:11] <foo> bjs: thanks, I wonder what the value is of collections.OrderedDict though if I sort a dict and it can now retain its order
[19:58:21] *** Quits: imakestuff (~imakestuf@197.156.77.192) (Quit: Leaving...)
[19:58:22] *** Quits: vladoski (~vladoski@2001:b07:add:d406:c85f:d31e:61c2:9e8e) (Remote host closed the connection)
[19:58:32] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[19:59:05] <grym> foo: explicitness and backcompat
[19:59:17] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[19:59:25] <aphysically> it has new methods and uhhh I think comparison works different?
[19:59:41] <moonmoon> ldericher: not sure, isn't something I've played around with. Does adjusting that do anything? Documentation is unfortunately quite sparse
[20:00:00] *** Quits: Soldofor (~Guest19@2a02:2f0f:b212:ad00:a8ce:5d91:7c39:12e0) (Quit: Client closed)
[20:00:42] *** Quits: aztec (~Felipe@2804:2238:7b9:c300:49a0:a834:ba60:b8fa) (Killed (NickServ (GHOST command used by Felipe)))
[20:01:33] <jinsun_> foo: when you compare dicts order doesn't matter
[20:01:41] *** Joins: MikachuPi (~Mikachu@2001:bc8:47a8:559::1)
[20:02:15] *** Quits: KevinX (~KevinX@212.102.47.75) (Ping timeout: 260 seconds)
[20:02:44] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[20:03:25] <aphysically> jinsun_: so I did remember that correctly :)
[20:05:06] <jinsun> yeah, `{1:2, 3:4} == {3:4, 1:2}`, but `OrderedDict({1:2, 3:4}) != OrderedDict({3:4, 1:2})`
[20:05:13] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[20:06:03] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 260 seconds)
[20:06:31] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[20:06:41] *** Joins: nisstyre (~wes@user/nisstyre)
[20:07:13] *** Joins: KevinX (~KevinX@185.153.176.133)
[20:07:27] <jinsun> OrderedDicts also have 2 kinda useless methods, to pop item without giving key and to pop from the "front" and insert from the "back"
[20:07:29] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[20:07:42] <jinsun> but those you can recreate for normal dicts also now
[20:07:48] <wib_jonas> foo: in old versions of python 3, dict didn't retain its insertion order. but sometimes people wanted a dictionary that retains insertion order, so collections.OrderedDict was added that does that. later dict got changed, but we don't want to remove collections.OrderedDict now because some scripts may be using it. there are other slight differences
[20:07:49] <wib_jonas> between dict and collections.OrderedDict but they rarely matter.
[20:08:07] *** Joins: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net)
[20:08:13] *** Quits: runelind (~runelind@user/runelind) (Quit: ZNC 1.8.2 - https://znc.in)
[20:08:33] *** Joins: runelind (~runelind@user/runelind)
[20:09:32] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[20:10:06] <Stench> is there an easy way to get someone's age today from a given date?
[20:10:24] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:10:26] <Stench> i feel like there's probably something in the standard library for this, my attempts to code up the logic keep getting bugs
[20:10:29] <grym> Stench: not without their birthday ...
[20:10:38] <Stench> grym: given their birthday, :P
[20:10:51] <Stench> like say i have 2000-12-01. My function right now says they're 21 years old, woops.
[20:11:13] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[20:11:35] <grym> Stench: you can subtract datetimes
[20:12:11] <Stench> grym: ... for some reason i ... just didn't even think to subtract
[20:12:16] <grym> they are 76333 days old!
[20:12:27] <grym> 7633*, probably
[20:12:36] <grym> plus or minus a day :)
[20:13:05] <akk> yeah, that doesn't actually give you exact number of years
[20:13:07] <Stench> oh wait i remember the problem
[20:13:13] <Stench> yeah leap years messed that up
[20:13:28] <grym> leap years ought to be accounted for in that day count
[20:13:32] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 244 seconds)
[20:13:37] <Stench> grym: what do you divide it by to find years, though?
[20:13:46] <akk> yes, but if you want to map back to years you need to know the number of leap years in the interval.
[20:13:47] <Stench> grym: even with 365.25 we got wrong answers sometimes
[20:14:21] <Stench> maybe if i do today.year - birthday.year, then subtract an extra one if birthday-in-the-current-year is greater than today?
[20:14:25] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[20:14:43] <akk> If you're just looking for an integral number of years, that might be the best bet.
[20:15:07] <akk> If you need "you are 21 years and 7 days old", you need more smarts.
[20:15:18] <Stench> haha yeah. I just need the number of years.
[20:15:56] <Stench> https://bpa.st/LKEQ here's what i've got
[20:15:57] <grym> "you can drink!"
[20:16:02] <Stench> :P
[20:16:03] <grym> "that was fast"
[20:16:04] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[20:16:06] <grym> "yeah, saw the 19"
[20:16:07] <grym> :(
[20:16:35] *** Quits: c4017w (~c4017@209.52.68.8) (Quit: Leaving)
[20:17:40] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[20:18:07] <Stench> yeeeah :(
[20:18:21] <foo> grym / jinsun_ / wib_jonas: thank you. :)
[20:18:29] <grym> np
[20:18:33] *** Joins: jazzy (~jaziz@user/jaziz)
[20:18:41] <foo> This is throwing a KeyError: new_data[lower_lot_num]["timeline"] = remainder_timelines.pop(lower_lot_num) -> but how do I know which side is throwing a keyerror, the former or latter? Pretty sure it's the pop()
[20:19:09] <jinsun> Stench: with dateutil it is easier, `dateutil.relativedelta.relativedelta(datetime.datetime.today(),  dateutil.parser.parse("2000-12-01")).years`
[20:19:09] <grym> foo: temporarily refactor it into a preassignment
[20:19:51] *** Joins: djapo (~archangel@user/djapo)
[20:19:59] <Stench> jinsun: hm... i'll keep that in mind if this function doesn't work out, we run the test that uses it every night so by this time next year we should know whether or not it works :P
[20:20:01] <foo> grym: eg. remainder_timeline = remainder_timelines.pop(lower_lot_num) *before* the new_data[lower_lot_num]["timeline"] I assume.
[20:20:07] <sco1> Stench: Perhaps dateutil.relativedelta: https://dateutil.readthedocs.io/en/stable/relativedelta.html
[20:20:09] <foo> grym: right?
[20:20:16] <grym> foo: yeah, and see what blows up
[20:20:18] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[20:20:18] <sco1> I believe it takes care of the "smart" math
[20:20:22] <Stench> thanks to you too, sco1 :)
[20:21:04] *** Joins: orangeextract (~orangeext@user/orangeextract)
[20:21:37] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Client Quit)
[20:22:51] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[20:22:59] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[20:23:41] *** Joins: dulanic (~dulanic@47.187.144.163)
[20:24:51] *** Joins: n1t2 (~n1t2@hag-hkibng42-58c32d-192.dhcp.inet.fi)
[20:26:54] <OliverUK> Hello, what is the IDE of choice for Python?  I've been using Notepad++ but I'm probably missing out some
[20:27:03] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[20:27:22] <sco1> There isn't a singular answer. Many different editors bring people joy
[20:27:38] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567377-189.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:28:05] <tpr> pycharm, vscode are popular choices
[20:28:31] *** Joins: Narrat (~omnius@p200300df5f49111d06ea56fffe2e7cdc.dip0.t-ipconnect.de)
[20:28:46] <OliverUK> sco1: Yeah, I'm just wondering which ones are popular and possibly good for beginners
[20:28:47] <SnoopJ> OliverUK, text editors edit text. Best advice: try a bunch and see what you like. PyCharm and VS Code are both popular for more complex features that "IDE" usually implies
[20:28:50] <OliverUK> tpr: thanks
[20:29:09] <SnoopJ> JupyterLab is also very serviceable as an IDE if you have a tendency towards notebooks
[20:29:24] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[20:30:00] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[20:30:39] <OliverUK> I suppose you am looking for something that can be fancy like completion of function and variable names etc.  Perhaps running a script from the editor.  Perhaps doing fancy editing things like closing parentheses when you open one etc
[20:31:06] <OliverUK> But I don't know what I don't know, perhaps there are many other things that would be helpful that I don't know about
[20:31:27] <SnoopJ> yea, hence "try a bunch," it's more of a personal aesthetics thing anyway so it's hard to do more than gesture to what's out there
[20:31:29] *** Quits: kia (~kia@user/kia) (Quit: kia)
[20:32:15] * SnoopJ uses VS Code and vim about equally, but has been meaning to try PyCharm because of its testing/debugging
[20:32:33] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[20:32:52] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:33:16] <OliverUK> Ooh debugging
[20:33:26] <OliverUK> Hadn't thought about that but that could be good
[20:33:41] * ldericher uses PyCharm and loves it <3
[20:33:49] <OliverUK> Especially because my scripts suck!
[20:33:54] *** Joins: adder (~adder@user/adder)
[20:33:56] <tpr> (remote) debugging & ability to explore large code bases are probably my most used features on pycharm
[20:34:00] <SnoopJ> it's mostly the testing experience that interests me, because I'm very happy with pudb as an all-purpose debugger :)
[20:34:05] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[20:34:31] <tpr> being able to inspect the state of variables, and clicking around symbols in editor to browse the code makes things just so much easier
[20:34:39] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[20:34:58] <SnoopJ> yea, a good variable inspector is very valuable
[20:35:03] <OliverUK> My scripts do all end up working but the process of getting there can be VERY janky
[20:35:21] <tpr> SnoopJ: does pudb handle nested structures nicely?
[20:35:27] <SnoopJ> tpr, in what sense?
[20:35:36] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Remote host closed the connection)
[20:35:40] <SnoopJ> you can expand pretty arbitrarily in the inspector
[20:36:09] <tpr> SnoopJ: ah, okay, that's what I was wondering. will have to try it out at some point :-)
[20:36:13] <SnoopJ> and you can write your own custom summaries per type if you have particularly complicated objects
[20:36:15] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[20:36:45] <tpr> when working with external libraries, pycharm makes it easy to dig deep into their structures when needed
[20:36:54] <SnoopJ> tpr, it probably loses out to something integrated into an IDE for a very tight develop-debug loop
[20:37:08] <SnoopJ> but I don't really mind having two windows open :)
[20:37:39] <SnoopJ> OTOH, I haven't given PyCharm a fair shake yet, so who knows, maybe I'll be swayed. I find it helpful to remember that tools are tools
[20:38:14] <tpr> fair enough 👍
[20:39:20] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Remote host closed the connection)
[20:39:22] *** Quits: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 244 seconds)
[20:41:27] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[20:41:43] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Read error: Connection reset by peer)
[20:42:19] *** Joins: saschi (~saschi@user/saschi)
[20:44:14] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[20:45:34] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 260 seconds)
[20:47:21] *** Joins: SuperLag (~akulbe@user/superlag)
[20:47:33] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[20:47:38] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:50:34] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[20:50:35] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[20:50:52] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[20:51:07] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:a1cc:f344:a47d:7d01)
[20:51:58] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:698d:dceb:89d9:beb7)
[20:52:24] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:52:55] *** Joins: iomari891 (~iomari891@105.112.138.38)
[20:53:10] <SnoopJ> long shot: anybody know how to get SwigPyIterator to correctly inherit the type name of the iterator it's wrapping? I feel like maybe I just have to write my own subclass..
[20:53:58] *** Joins: seanh (sid72485@ilkley.irccloud.com)
[20:54:06] <SnoopJ> clarification: I'm doing swig::make_output_forward_iterator(...) on a C++ iterator, but the objects I get when I iterate have type 'unknown'
[20:55:58] *** Quits: Telvana (~capo@user/telvana) (Quit: ZNC 1.9.x-git-156-ac57c0e5 - https://znc.in)
[20:56:02] *** Quits: avikalp (~avikalp@49.36.99.188) (Read error: Connection reset by peer)
[20:56:21] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: pees oot)
[20:57:14] <SnoopJ> pretty sure the pointers are valid
[20:57:37] <OliverUK> Sno
[20:57:56] <OliverUK> SnoopJ: have you tried editing it in N++?
[20:58:01] <OliverUK> :-D
[20:59:44] <SnoopJ> OliverUK, I had to look at the generated code in an editor just to figure out these features exist, they aren't documented :(
[20:59:47] *** Quits: orangeextract (~orangeext@user/orangeextract) (Quit: Leaving)
[21:00:21] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:00:33] *** Joins: luva9 (~luva@5.180.62.230)
[21:01:29] *** Quits: luva (~luva@5.180.62.230) (Read error: Connection reset by peer)
[21:01:29] *** luva9 is now known as luva
[21:02:11] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 264 seconds)
[21:02:34] *** Joins: wolfgang (~wolfgang@101.174.167.116)
[21:02:47] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 264 seconds)
[21:03:58] *** Joins: Roey (~Roey@user/Roey)
[21:04:16] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:2541:21bc:c9f8:d237) (Ping timeout: 258 seconds)
[21:05:36] *** Joins: djapo (~archangel@user/djapo)
[21:06:26] <OliverUK> SnoopJ: I haven't run into anything yet that wasn't covered by a whole bunch of tutorials or docs
[21:06:59] * SnoopJ would love to find documentation of this feature
[21:08:26] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-b577-7320-e582-000f.res6.spectrum.com)
[21:09:41] <OliverUK> I don't understand why it wouldn't be documented
[21:10:06] <OliverUK> If you create something then release it out you document it, don't you?
[21:10:19] <OliverUK> Otherwise nobody is gonna know how it works
[21:10:31] <Wooble> well that's how you get paid for support.
[21:10:33] <SnoopJ> Unfortunately, software with incomplete docs is just a fact of life
[21:11:01] <SnoopJ> It could be that this is meant to be internal machinery, but more likely it's just something they haven't gotten around to describing in the docs (which aren't exactly thorough in the first place)
[21:11:39] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-b577-7320-e582-000f.res6.spectrum.com) (Client Quit)
[21:12:22] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[21:12:28] *** Joins: sandb0y (~pirate@user/sandb0y)
[21:12:48] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[21:14:49] *** Joins: node1 (~node1@user/node1)
[21:15:17] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:15:54] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[21:17:43] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:18:01] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[21:18:31] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:18:45] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:ec1b:c682:f28e:c15c) (Quit: Textual IRC Client: www.textualapp.com)
[21:19:05] *** Joins: ubert1 (~Thunderbi@178.115.41.93.wireless.dyn.drei.com)
[21:19:07] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[21:20:04] *** Joins: Telvana (~capo@user/telvana)
[21:23:31] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 260 seconds)
[21:24:33] *** Joins: djapo (~archangel@user/djapo)
[21:26:07] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 258 seconds)
[21:27:13] <aphysically> oooo I found something that confused me B^)
[21:28:33] <aphysically> https://github.com/willmcgugan/rich/blob/eb673d1204340738d3084ebc2e4c789a35a4e49b/rich/console.py#L1858
[21:28:37] *** Quits: n1t2 (~n1t2@hag-hkibng42-58c32d-192.dhcp.inet.fi) (Quit: Leaving ...)
[21:29:07] <aphysically> this is deleting all the contents of the list only?
[21:29:19] <bjs> aphysically: only as opposed to what?  but yes, it's like doing .clear()
[21:29:24] <SnoopJ> aphysically, right, it has the same effect as list.clear() if the underlying type is a list
[21:29:46] <aphysically> yeah it's a list
[21:30:22] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[21:30:30] <SnoopJ> aphysically, it might make more sense from the perspective that `del` is not deleting objects, it's deleting references to objects. Frequently the reference is a name, but not always.
[21:31:07] *** Quits: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9) (Quit: Leaving)
[21:32:07] * aphysically hasn't really used del
[21:33:52] <SnoopJ> `foo = bar = 42` attaches the strings (names) "foo" and "bar" to the integer 42 in the current scope, and `del foo` "forgets" one of those
[21:33:59] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:a1cc:f344:a47d:7d01) (Ping timeout: 256 seconds)
[21:34:16] <SnoopJ> but for subscriptable stuff it does something slightly different
[21:35:03] <SnoopJ> `lst = [1,2,3]` creates a list that contains (refers to) three integers, `del lst[0]` drops the first reference, `del lst[:]` drops every reference
[21:35:35] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:35:40] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[21:36:17] <SnoopJ> so there, the list object continues to exist, but it doesn't contain anything after the operation is done
[21:36:42] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:38:11] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 264 seconds)
[21:39:44] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[21:39:51] <mat001> I know namedtuple can be used as structs. But can namedtuple (or some struct equivalent in Py) have smth like __init__ method?
[21:40:08] <mat001> I'm converting some code from swift where structs can have init method
[21:40:14] *** Joins: node1 (~node1@user/node1)
[21:40:19] *** Quits: ubert1 (~Thunderbi@178.115.41.93.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[21:40:36] <SnoopJ> mat001, dataclasses are a reasonable analogue for classes that are mostly structural
[21:40:55] <SnoopJ> or rather, you can build those kinds of objects as dataclasses
[21:40:57] <mat001> hmm, SnoopJ dataclasses are Py 3.7+ correct?
[21:41:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:41:06] <SnoopJ> mat001, there's the attrs library if you want something more portable
[21:41:25] <SnoopJ> dataclasses is basically attrs-lite for the stdlib
[21:41:28] *** Quits: x2f (~x2f@45.183.79.27) (Ping timeout: 252 seconds)
[21:42:02] *** Joins: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de)
[21:42:52] <mat001> SnoopJ: thx, looking into attrs lib.  U know would using a class be also ok, don't think it needs to be a named tuple
[21:43:11] <SnoopJ> sure
[21:43:21] <SnoopJ> namedtuple is often one of the worse choices
[21:43:26] <mat001> I'm thinking of the advantages of using a namedtuple vs a class...
[21:43:45] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:e159:7ddf:f7bb:a877)
[21:44:00] * SnoopJ can't think of any
[21:44:01] <sartan> py2 compatiblity? :)
[21:44:24] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
[21:44:30] <Wooble> unless you're replacing a tuple in legacy code with something more usable, you *probably* don't want a namedtuple.
[21:45:14] <Wooble> you do get immutability for free, though.
[21:45:14] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:45:17] <mat001> I would use namdtuple for simplicity and if I'm sure I wouldn't need any initialization
[21:45:25] <mike18> is queue.Queue() thread safe in python? what happens if multiple worker call queue.get() and queue.put() at same time ?
[21:45:31] <grym> mike18: but it's less simple
[21:45:34] <grym> er, mat001
[21:45:49] <mike18> grym: :)
[21:46:16] <grym> mat001: https://www.attrs.org/en/stable/why.html#namedtuples
[21:46:39] <Wooble> mike18: it does its own locking; the whole point is to be threadsafe.
[21:46:57] <SnoopJ> mat001, attrs/dataclass are pretty simple (I would argue *moreso* than namedtuple) and don't come with quite as many gotchas
[21:47:03] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[21:47:38] <SnoopJ> but nobody's going to stop you if you are absolutely sure you want to use namedtuples. They're just kind of a weird/confusing solution to a specific kind of problem
[21:47:47] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Quit: Leaving)
[21:47:47] <cerill> If I have a bunch of user input variables I want to write to a config file on disk,  is there a good way of escaping the input to make sure nothing bad/dangeroues ends up in the config file?
[21:48:14] *** Quits: mike18 (~geri@217-149-167-230.nat.highway.telekom.at) (Remote host closed the connection)
[21:48:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[21:48:24] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[21:48:27] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[21:48:49] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[21:49:25] *** Joins: Maikel (~Maikel@130.61.63.136)
[21:49:35] <sartan> you can sort of mess with __init__ type stuff with namedtuple by playing something like 'x = namedtuple('X', 'foo bar baz'); x.__new__.__defaults__ = ('str', ) * len(x._fields)
[21:49:51] *** Joins: MarderIII (~MarderIII@enneman.demon.nl)
[21:50:06] <sartan> can be helpful to add defaultdicts as attrs and that sort of thing
[21:50:20] *** Joins: fikran (~fikran@user/fikran)
[21:50:28] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[21:50:34] <SnoopJ> oof
[21:51:20] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[21:52:07] <mat001> SnoopJ: grym thx. I don't quite see a benefit in namedtuples really, based on this. They look neat and short, but it kinda ends there. I have been trying to use smth like structs in other languages, an dit seems using classes would be most readable and mainatinable
[21:52:13] *** Quits: pro_z (~pro_z@37.214.49.15) (Ping timeout: 244 seconds)
[21:52:14] <mat001> I think...
[21:52:44] <grym> mat001: yes, a dataclass or attrs or pydantic are what i use for structlike behavior
[21:52:48] <grym> i'm very fond of them
[21:52:53] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[21:52:53] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[21:53:13] <mat001> I do need "structs" to be compatible with v3.5 onwards. And Py 2.7 - which we're sunsetting though
[21:53:16] <grym> (note that all three of those things just make classes, but often in very nice ways )
[21:53:30] <grym> attrs supports 2.7 (2.6?) and up
[21:53:58] <mat001> thx grym
[21:54:06] <grym> so that's what i'd look at first
[21:54:30] <aphysically> I've been trying to look at rich's threading problem but it uses a buffer system that's a bit opaque
[21:55:26] <grym> mat001: and dataclasses are stdlib as of 3.7; pydantic supports 3.6+; looks like attrs is a win for you on version requirements
[21:55:32] *** Joins: seabre (~seabre@user/seabre)
[21:56:36] *** Joins: lionslicer (~lionslice@2804:d41:a71d:ff00:ade9:83f1:bcfc:fd6a)
[21:56:44] <lionslicer> hey guys
[21:57:00] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[21:57:07] <lionslicer> I just started my college. I'm studying CS and we're learning python
[21:57:14] <grym> lionslicer: welcome
[21:57:44] <lionslicer>  I have a copy of Python Crash Course, but for now I'm mostly focusing on classes. But I'll definitely use it as a resource
[21:57:59] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Client Quit)
[21:58:35] *** Joins: rama_ (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[21:58:48] <lionslicer> But once I have learnt the basics, what sort of project you guys suggest I work on? In your opinion, what kind of project would be fun and challenging for someone who's starting out?
[21:59:27] <grym> lionslicer: usually, the most promising projects for beginners are born out of annoyance
[21:59:49] <grym> like "gah, why doesn't my stupid computer ... ", and then write that code
[22:00:08] <lionslicer> lol, thats a good idea
[22:00:08] *** Joins: mike18 (~geri@216.200.232.252)
[22:00:20] <mike18> @Wooble what about for a simple lst?
[22:00:21] <mike18> list
[22:00:30] <mike18> regarding thread safety
[22:00:30] <lionslicer> at first I though some sort of list, yeah
[22:00:47] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:db7:a2d6:e7e0:dacc) (Quit: Textual IRC Client: www.textualapp.com)
[22:00:51] <grym> a todo list is a pretty common thing to reinvent
[22:01:32] <rama_> When doing dict(sorted({'b':1, 'aa':2, 'a':3}.items())) should you specify that the key is what you want to use for sorting rather than the value? It looks like py 3.8.3 uses value by default...
[22:01:41] <lionslicer> I thought a good idea would be to make some sort of data base
[22:02:31] <grym> lionslicer: that's a pretty deep mine, but storing data and retrieving it nicely is always promising
[22:02:42] <SnoopJ> mat001, namedtuples are a hack, basically. They're useful in some limited cases, but often the foot-guns they come with aren't worth it vs. something less hacky
[22:03:07] <grym> lionslicer: in fact i keep mulling over writing a tagging index for my sick dank memes or something
[22:03:21] <grym> since i have a few thousand images with meaningless filenames
[22:03:33] <KirkMcDonald> rama_: I am pretty sure that will sort by key first.
[22:03:57] *** Joins: x2f (~x2f@45.183.79.26)
[22:04:15] <KirkMcDonald> rama_: Because it's sorting the (key, value) tuples, and tuples are ordered lexicographically.
[22:04:42] <mike18> is there a tool in python to check if the code is thread safe?
[22:05:58] <lionslicer> I think a good ideia would be to make a list of anime I've watched and make some sort of graphic or mathematical sublist
[22:07:08] *** Quits: adder (~adder@user/adder) (Quit: Leaving)
[22:07:10] <SnoopJ> mike18, pretty hard problem, even in languages with far more explicit features for that kind of thing
[22:07:28] <mike18> SnoopJ: golang has a race detector for example :D
[22:07:36] <mike18> is there something like that in python too?
[22:08:11] <KirkMcDonald> Go's race detector is part of its goroutine scheduler.
[22:08:19] *** Joins: cparker (~cparker@c-76-127-239-113.hsd1.ma.comcast.net)
[22:08:26] *** Joins: stealth[] (~stealth]@2001:9e8:36df:0:f596:40bc:3202:61ea)
[22:08:37] <KirkMcDonald> Python's threads are just OS threads; it's rather more difficult to do the same thing.
[22:09:01] *** Quits: stealth[] (~stealth]@2001:9e8:36df:0:f596:40bc:3202:61ea) (Client Quit)
[22:09:12] *** Joins: stealth[] (~stealth]@2001:9e8:36df:0:f596:40bc:3202:61ea)
[22:09:41] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[22:09:55] <SnoopJ> the ideas that occur to me would have an instrumentation burden that would probably outweigh what it would take to make something explicitly threadsafe
[22:11:08] <mike18> KirkMcDonald: how to know if i do something bad than?
[22:11:34] <SnoopJ> cheeky answer: if you're using threads directly, you kinda already are
[22:11:43] <mike18> i currently use a list to store error logs - which is shared between thread if the worker have an exception - bad right?
[22:11:55] <mike18> i use thread pool
[22:12:48] *** Joins: s33ker (~s33ker@cpe-31-15-146-122.cable.telemach.net)
[22:12:56] <s33ker> hi
[22:14:26] *** Quits: vulpes_vulpes (~vulpes_vu@88-144-232-205.host.pobb.as13285.net) (Quit: Leaving)
[22:15:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[22:15:12] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[22:15:39] *** Joins: srhm (~srhm@user/srhm)
[22:16:40] *** Joins: Fiji (~Fiji@user/fiji)
[22:16:40] *** Quits: Fiji (~Fiji@user/fiji) (Client Quit)
[22:17:34] <mike18> KirkMcDonald: i currently use a list to store error logs - which is shared between thread if the worker have an exception - bad right?
[22:17:48] <mike18> KirkMcDonald: i use a thread pool with workers...
[22:18:20] *** Joins: oz4ga (~tim@93.90.4.233)
[22:19:20] <Wooble> mike18: list.append is threadsafe
[22:19:25] <mike18> oh
[22:20:02] <Wooble> (whatever else you do with the list may or may not be.)
[22:20:10] <mike18> just append
[22:20:28] <mike18> and wann all thread finish - iterate and create a log file
[22:20:32] <mike18> and if all
[22:20:37] <KirkMcDonald> As a consequence of the GIL. So that may not be true in some future where the GIL is removed.
[22:20:56] <mike18> KirkMcDonald: suggest to use a queue instead?
[22:21:04] *** Quits: MarderIII (~MarderIII@enneman.demon.nl) (Quit: Leaving)
[22:21:18] <Wooble> KirkMcDonald: I'd guess any such implementation would probably make .append atomic in some other way but that's all hypothetical
[22:21:35] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[22:22:19] *** Quits: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul) (Ping timeout: 265 seconds)
[22:22:43] *** Quits: cparker (~cparker@c-76-127-239-113.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[22:22:47] <SnoopJ> well, a successful GILectomy in the first place is >_>
[22:23:40] <grym> a new contender has recently stepped up; i wonder how far it'll go
[22:24:04] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[22:24:09] <grym> though it's kind of above my pay grade
[22:24:30] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:24:49] <KirkMcDonald> This sort of thing is probably the biggest problem with removing the GIL: All the code that relies on it, which would no longer behave as expected.
[22:24:49] *** Joins: dhill_ (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[22:25:46] <raek> hmm. is it intentional that patlib.Path("some-dir").glob("some-existing-file") return no results?
[22:26:11] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[22:26:30] <raek> I'd expect glob to return exactly one entry if the file with that exact name exists
[22:26:31] <grym> raek: no, i suspect you have a bug
[22:26:38] *** Quits: orangeboxcutter (~orange@user/orangeboxcutter) (Remote host closed the connection)
[22:26:40] *** Quits: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca) (Ping timeout: 265 seconds)
[22:26:41] <SnoopJ> raek, it's intentional if the glob doesn't actually match the file, can we have the specifics?
[22:26:42] <grym> (i just tried it, i got a list with one thing)
[22:26:56] <phy1729> Not all globs match themselves (notably [abc])
[22:27:01] *** Joins: orangeboxcutter (~orange@user/orangeboxcutter)
[22:27:24] <raek> seems to be broken for me on 3.8, 3.9, and 3.10
[22:27:26] <raek> hmm
[22:27:28] *** Joins: Nspace (~Nspace@user/nspace)
[22:27:41] <raek> in my case it is a "dangling" symlink
[22:27:48] <raek> I wonder if that makes a difference
[22:27:52] <grym> glob might not see symlinks
[22:27:54] <grym> i'm not sure
[22:27:55] <SnoopJ> it seems unlikely that it's broken, but we can't see as much of the problem as you can
[22:28:26] <raek> it works for normal files
[22:28:35] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 264 seconds)
[22:29:40] <raek> minimal example: ln -s /nonexisting_target my_symlink
[22:29:44] <SnoopJ> should work for symlinks too, but I see the same result for a dangling symlink
[22:29:52] <raek> list(pathlib.Path(".").glob("my_symlink")) => []
[22:29:53] <SnoopJ> (works fine for a non-broken one)
[22:30:23] * SnoopJ has the vague recollection of this coming up before
[22:30:23] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[22:30:25] <Wooble> is a dangling symlink a "file of any kind"?
[22:30:40] <SnoopJ> Wooble, you would kinda think so!
[22:30:47] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[22:30:53] <raek> SnoopJ: does that example return a list of one for you?
[22:31:01] *** Quits: akk (~akk@75.161.146.115) (Ping timeout: 265 seconds)
[22:31:03] <Wooble> *I* wouldn't; it's not a file. :P
[22:31:24] <SnoopJ> raek, it works for a non-broken symlink, it does not work for a broken one.
[22:31:54] <Wooble> cat my_symlink => No such file or directory  see?
[22:32:02] <raek> okay
[22:32:19] <mike18> hi guys is there a python lib to call a function with max retries and exponential backoff?
[22:33:00] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[22:33:07] <grym> mike18: tenacity, i think
[22:33:09] <raek> my use case is that I want to remove a bunch of symlinks (because they might be dangling) that follow a pattern. so I used a glob.
[22:33:18] <Wooble> (on the other hand, my shell's globbing finds it so, uh... yeah.)
[22:33:28] <jinsun> raek: .glob("my_symlink*") shows that weirdly
[22:33:32] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[22:33:33] <mike18> grym: is it able to forward the excpetion if it it reached max retry?
[22:33:36] <grym> raek: i'd walk the tree and test
[22:33:42] <grym> mike18: i don't know; read the docs
[22:33:46] <mike18> ok
[22:33:52] <raek> jinsun: yeah, that too makes me think it is a bug
[22:33:52] <mike18> or implement code myself...hm
[22:34:12] <raek> yeah, I can work around it.
[22:34:13] *** Quits: sandb0y (~pirate@user/sandb0y) (Quit: Time for another great escape)
[22:34:20] <SnoopJ> raek, IIRC this came up before and the punchline is that it's resolving the link in the innards
[22:34:36] <grym> mike18: it looks like it does what you want, though (from a quick skim of https://tenacity.readthedocs.io/en/latest/ )
[22:34:46] <mike18> grym: looks nice
[22:34:48] <grym> @retry(wait=wait_exponential(multiplier=1, min=4, max=10))  etc
[22:35:43] <mike18> and how to forward excpetion in case it fails?
[22:35:45] <raek> SnoopJ: ok, so that's an explanation why it behaves that way. but should it? :-)
[22:35:54] <mike18> or where to log exeption in the retry?
[22:36:00] <grym> mike18: catch and raise and log like normal i think
[22:36:06] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-88d0-d5e8-f775-5f00.res6.spectrum.com)
[22:36:18] *** Joins: voices (~voices_@84.238.197.28)
[22:36:21] <SnoopJ> raek, I don't know the answer to your question
[22:36:23] <mike18> but raise it can only if it reaches max coutn 10
[22:36:24] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[22:36:35] *** Quits: rama_ (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Remote host closed the connection)
[22:37:04] *** Joins: sandb0y (~pirate@user/sandb0y)
[22:37:25] *** Joins: d0ku (~d0ku@178.43.15.137.ipv4.supernova.orange.pl)
[22:38:51] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 245 seconds)
[22:40:36] *** Quits: stealth[] (~stealth]@2001:9e8:36df:0:f596:40bc:3202:61ea) (Quit: Leaving)
[22:41:36] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[22:41:56] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:42:08] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[22:42:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[22:43:03] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:43:54] <mike18> grym: looks like whats what reraise=True, is for....
[22:44:02] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[22:44:11] <grym> could be!
[22:45:07] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:45:10] *** Joins: cparker (~cparker@c-76-127-239-113.hsd1.ma.comcast.net)
[22:45:19] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[22:45:26] *** Quits: vit (~vit@chello085216193138.chello.sk) (Quit: Konversation terminated!)
[22:45:50] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:45:59] <SnoopJ> raek, after having a look, if it's not a wildcard glob, it ends up calling os.stat() on the broken link, which is definitely going to fail, so it certainly seems deliberate. Documenting the edge would be nice though :/
[22:46:45] *** Quits: whoopla (user@gateway/vpn/protonvpn/whoopla) (Ping timeout: 260 seconds)
[22:47:28] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:48:46] <raek> SnoopJ: I'm writing a bug ticket to describe this edge case. I found other tickets relating to pathlib, glob and symlinks, but they didn't match this corner case...
[22:49:16] *** Quits: nvz (~user@nvz.farted.online) (Ping timeout: 245 seconds)
[22:49:40] *** Quits: emptynine (tkk@cybertron.redlight.li) (Ping timeout: 252 seconds)
[22:50:05] <SnoopJ> that should clear up whether it's intentional or not
[22:50:17] <mike18> grym: multiplier=1, min=4, max=10 ... is that max 10 seconds?
[22:50:23] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[22:50:33] <grym> mike18: i don't know.  only one way to find out :)
[22:50:42] <grym> (kick open a repl, try it out)
[22:50:45] <mike18> their docs says: Wait 2^x * 1 second between each retry starting with 4 seconds, then up to 10 seconds, then 10 seconds afterwards
[22:50:57] <mike18> whats 10 afterwards?
[22:51:19] <raek> SnoopJ: https://bugs.python.org/issue45606
[22:51:56] <SnoopJ> raek, it's possible that exists() could check is_symlink() first for PosixPath, but I don't know what making that change would break
[22:52:18] <SnoopJ> or perhaps it doesn't need to be a change, but can raise an exception with a specific message
[22:52:23] *** Joins: emptynine (tkk@cybertron.redlight.li)
[22:53:06] *** Joins: jamiejackson (~jamiejack@207.172.87.34)
[22:53:07] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 260 seconds)
[22:53:22] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[22:54:16] <raek> ah, so exists() "sees the other end" of the symlink? hmm. symlink semantics are tricky...
[22:54:25] <nedbat> mike18: they seem to mean to wait 4 sec, then 8 sec, then 10 sec, 10 sec, 10 sec, ...
[22:54:35] <mike18> and how often?
[22:54:36] *** Joins: luva8 (~luva@5.180.62.230)
[22:54:46] <mike18> seems not specified?
[22:55:16] *** Joins: nvz (~user@nvz.farted.online)
[22:55:26] <mike18> i better use: @retry(reraise=True, wait=tenacity.wait_exponential(multiplier=2), stop=tenacity.stop_after_attempt(5))
[22:55:44] <mike18> wait 2, 4, 6, 8, 10 sec
[22:55:46] <mike18> if more stop
[22:55:49] *** Joins: Auron (~Auron956@user/auron)
[22:55:56] <mike18> and reraise expcetion
[22:56:23] *** Quits: luva (~luva@5.180.62.230) (Ping timeout: 260 seconds)
[22:56:24] *** luva8 is now known as luva
[22:56:39] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Read error: Connection reset by peer)
[22:57:15] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:57:36] <nedbat> mike18: 2,4,6,8,10 is not exponential.
[22:57:43] <SnoopJ> raek, right, exists() is basically `try: os.stat() except OSError: ...`
[22:58:45] *** Joins: Betal (~Betal@user/betal)
[22:58:57] *** Joins: whoopla (user@gateway/vpn/protonvpn/whoopla)
[22:59:05] <Jong> Suppose a call to a low level library throws an exception under a certain condition. Would there be a point to code a sys.exit if that condition is detected? Wouldn't we simply be throwing an exception a little earlier? Does it matter whether the exception is thrown in your code, or the calling code?
[23:00:39] <SnoopJ> raek, ah, and this error is one of the _IGNORED_ERROS that gets swallowed and turned into False
[23:00:41] <Julian> Jong: What do you mean by a low level library?
[23:01:06] *** Joins: c4017w (~c4017@209.52.68.8)
[23:01:08] <Julian> Jong: Your program certainly might want to exit if something really bad happens -- and yes you may or may not want the mechanism by which it exits be "let the exception propagate"
[23:01:09] <raek> right. and lstat is the other function that specifically looks at the symlink
[23:01:24] <Julian> Jong: (Rather than explicitly exiting and not seeing the traceback which may be helpful)
[23:01:35] *** Quits: mei (~mei@user/mei) (Ping timeout: 264 seconds)
[23:01:46] <Jong>  my question is irrespective of whether the library is lowlevel or not, so I probably shouldn't have added "low level" as that just causes confusion and places emphasis in the wrong place
[23:02:17] *** Joins: superboot (~agentgasm@user/superboot)
[23:02:33] *** Joins: vicfred (~vicfred@user/vicfred)
[23:02:38] <nedbat> Jong: if your main program knows that ending the program is the right thing to do, then it's fine to catch the exception and stop.  You might want to prevent the display of a python traceback, for example.
[23:04:09] *** Quits: voices (~voices_@84.238.197.28) (Remote host closed the connection)
[23:05:05] <Jong> nedbat  if the traceback is understandable, maybe it's fine to let the program dive down the stack and propogate up the exception message, instead of creating an early exit?  Likewise, maybe it's a good idea to make our own early exit when the traceback message is not informative?   Is that your view?
[23:05:22] <nedbat> Jong: yes. that's one consideration.
[23:05:36] <Jong> Thanks
[23:05:45] *** Quits: c4017w (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[23:06:30] <SnoopJ> raek, easy enough to write a subclass that is aware of this: https://bpa.st/WDVA  (not sure what would be different on other platforms, though)
[23:07:01] <SnoopJ> possibly you can just subclass Path and not PosixPath (my import is a little goofed up from copy/paste from pathlib.py)
[23:08:07] <SnoopJ> ah, no, you can't, but hopefully the idea is clear enough
[23:09:21] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:10:15] *** Joins: pequoid (~Thunderbi@173-8-231-121-Colorado.hfc.comcastbusiness.net)
[23:13:54] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:98a0:181d:c4ff:b2ac)
[23:17:23] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 260 seconds)
[23:17:36] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[23:18:23] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[23:19:12] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:21:44] *** Quits: s33ker (~s33ker@cpe-31-15-146-122.cable.telemach.net) (Quit: Client closed)
[23:22:32] *** Quits: magla (~gelignite@55d4378c.access.ecotel.net) (Quit: Stay safe!)
[23:22:34] <raek> the problem I was trying to solve was to remove systemd unit files for some services. some are named foo-bar.service, but others are named baz-quux@some-name.service
[23:22:56] <raek> so I wanted to delete foo-bar.service, baz-quux@.service, and baz-quux@*.service,
[23:23:38] <raek> (input is the list ["foo-bar.service", "baz-quux@.service"])
[23:24:12] <raek> so I ended up deleating the name as-is (if it exists) and then also replacing @ with @* and deleting files matching that glob
[23:24:59] <raek> I had hoped that only the second part would be enough, but the problem was easily worked around
[23:25:38] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[23:25:47] <SnoopJ> baz-quux@*.service should cover the empty case too, but you could also just greedily glob everything here and do your own filtering
[23:25:58] <raek> https://github.com/raek/pladder/blob/master/pladder/systemd/main.py#L43
[23:26:04] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-88d0-d5e8-f775-5f00.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:26:16] <SnoopJ> or use a subclass with whatever behavior you want for exists() heh
[23:26:22] <raek> I know about unlink(missing_ok=True) but I wanted to print a line if something was deleted
[23:26:43] <aphysically> well some of this threading code in rich seems just wrong
[23:27:06] *** Quits: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net) (Read error: Connection reset by peer)
[23:27:38] *** Joins: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net)
[23:28:07] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 260 seconds)
[23:29:04] <raek> SnoopJ: thanks for the suggestions!
[23:29:52] <raek> the pathlib library was not that scary to look inside :-)
[23:30:02] *** Quits: pequoid (~Thunderbi@173-8-231-121-Colorado.hfc.comcastbusiness.net) (Quit: pequoid)
[23:30:08] *** Joins: Bakunin (~Lindis@user/lindis)
[23:30:14] <mike18> hi why is retry not working here? https://replit.com/join/lycduijupl-surfman19
[23:31:04] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[23:31:12] <mike18> at least i expect to see some 5 x print saying it got that exception
[23:31:28] <mike18> bc i set tenacity.stop_after_attempt(5)
[23:31:36] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:31:44] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[23:32:15] <SnoopJ> raek, the stdlib can be pretty scary in places, but pathlib is refreshingly straightforward to read :)
[23:32:34] *** Joins: Nspace (~Nspace@user/nspace)
[23:33:15] *** Quits: Julian (~tos9@python/site-packages/Julian) (Client Quit)
[23:34:01] *** Joins: hrob (~hrob@31-209-232-158.dsl.dynamic.simnet.is)
[23:34:58] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[23:36:46] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:37:07] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:37:25] <raek> agreed :-)
[23:37:37] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[23:37:59] *** Joins: srhm (~srhm@user/srhm)
[23:40:11] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[23:40:12] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-88d0-d5e8-f775-5f00.res6.spectrum.com)
[23:40:47] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[23:40:48] *** Joins: CombatVet (~c4@user/combatvet)
[23:41:22] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[23:42:13] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[23:42:16] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:42:41] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[23:43:59] *** Joins: Nspace (~Nspace@user/nspace)
[23:44:09] <SnoopJ> aha, there's a tiny bit of documentation at the top of pyiterators.swg that makes it clear that users can subclass SwigPyIterator, at least. No information about how name resolution works with them, though :/
[23:44:39] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[23:44:39] *** Quits: darksun (~darksun@user/darksun) (Read error: Connection reset by peer)
[23:44:43] *** Quits: whoopla (user@gateway/vpn/protonvpn/whoopla) (Quit: leaving)
[23:45:51] *** Joins: darksun (~darksun@user/darksun)
[23:45:51] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[23:46:01] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:698d:dceb:89d9:beb7) (Ping timeout: 256 seconds)
[23:46:34] *** Joins: tokerboker (~tokerboke@c-73-71-182-125.hsd1.ca.comcast.net)
[23:48:59] *** Quits: Nspace (~Nspace@user/nspace) (Ping timeout: 264 seconds)
[23:49:07] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 260 seconds)
[23:52:04] *** Joins: Akuli (~Akuli@213.216.209.22)
[23:53:02] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[23:54:15] *** Joins: white_magic (~white_mag@2600:1700:6ae2:a20:8db6:71c:be4f:cf6e)
[23:56:36] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-edc6-f9da-a755-45ea.res6.spectrum.com) (Read error: Connection reset by peer)
[23:56:38] *** Quits: redoc (~redoc@user/redoc) (Remote host closed the connection)
[23:57:23] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 264 seconds)
[23:57:28] <white_magic> anyone here use SqlAlchemy in an async way? I'm having a hard time figuring out how to make a reqest that returns a large resultset. For example, querying based on a specific ID works well:
[23:57:29] <white_magic> stmt = select(models.Shape).where(models.Shape.related_id == arg_id)
[23:57:29] <white_magic> res = (await session.execute(stmt)).scalars().all()
[23:57:30] <white_magic> However, what if I want to do something like this:
[23:57:30] <white_magic> id_collection = [77,2,52,5,67,99...]
[23:57:31] <white_magic> stmt = select(models.Shape).where(models.Shape.related_id in id_collection)
[23:57:31] *** litharge sets mode: +q $a:white_magic
[23:57:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[23:57:51] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[23:58:03] *** litharge sets mode: -q $a:white_magic
[23:58:30] *** Joins: redoc (~redoc@user/redoc)
[23:59:03] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-88d0-d5e8-f775-5f00.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[23:59:40] *** Joins: fikran (~fikran@user/fikran)
