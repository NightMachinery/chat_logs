[00:41:20] *** Joins: ltriant (~ltriant@118.102.122.246)
[00:46:52] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 272 seconds)
[01:12:50] *** Quits: pro (~pro@user/pro) (Ping timeout: 260 seconds)
[01:24:45] <FromDiscord> <pmunch> Depends on what logging library you use↵(@Phil)
[01:24:58] <FromDiscord> <Phil> std
[01:31:02] <FromDiscord> <SoicBR> sent a code paste, see https://play.nim-lang.org/#ix=3QES
[01:34:39] <FromDiscord> <ynfle> In reply to @SoicBR "What's the correct way": Which nim version are you using?
[01:34:50] <FromDiscord> <SoicBR> 1.6.4
[01:35:16] <FromDiscord> <Elegantbeef> That's the proper way to loop a table it calls the `pairs` iterator
[01:35:26] <FromDiscord> <Elegantbeef> What data is in your table?
[01:35:54] <FromDiscord> <SoicBR> uint64 (an id), one struct
[01:36:05] <FromDiscord> <SoicBR> object
[01:36:11] <FromDiscord> <SoicBR> (edit) "struct" => "object"
[01:36:39] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3QET
[01:36:44] <FromDiscord> <Elegantbeef> Runs fine for instance
[01:37:28] <FromDiscord> <Elegantbeef> Are you sure you havent added the same key multiple times?
[01:43:27] <FromDiscord> <SoicBR> Yes but I found the problem
[01:45:15] <FromDiscord> <ynfle> In reply to @SoicBR "Yes but I found": What is it?
[01:47:55] *** Joins: ltriant (~ltriant@118.102.122.246)
[02:04:35] <FromDiscord> <ShalokShalom> In reply to @ynfle "`*` is basically a": But how would it look like in Nim?
[02:05:06] <FromDiscord> <ShalokShalom> Since the documentation seems to not show all the details to compare it to 1:1
[02:05:20] <FromDiscord> <Elegantbeef> What are we talking about?
[02:05:27] <FromDiscord> <Elegantbeef> Looks like a HKT or union?
[02:06:37] <FromDiscord> <ShalokShalom> Union
[02:06:51] <FromDiscord> <ShalokShalom> But idk how to express that
[02:08:48] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QEX
[02:18:28] <FromDiscord> <ShalokShalom> For what is the ek?
[02:18:45] <FromDiscord> <ShalokShalom> Just abbreviating ExitKind?
[02:21:13] <FromDiscord> <Elegantbeef> I dont like pure enums, overlodable enums arent enabled by default, so least bad thing
[02:24:41] <FromDiscord> <ShalokShalom> Why aren't they enabled by default?
[02:24:59] <FromDiscord> <Elegantbeef> They were added in 1.6 and will be default in a future version
[02:25:04] <FromDiscord> <ShalokShalom> What would it look like with pure enums?
[02:25:07] <FromDiscord> <ShalokShalom> Ah, I see
[02:25:15] <FromDiscord> <ShalokShalom> So I could just omit it then
[02:25:27] <FromDiscord> <ShalokShalom> I like to compare it 1:1 as possible
[02:25:36] <FromDiscord> <ShalokShalom> To contextualize it in my head
[02:25:40] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QEZ
[02:26:02] <FromDiscord> <ShalokShalom> And what you dont like about them?
[02:26:06] <FromDiscord> <ShalokShalom> Thanks
[02:26:14] <FromDiscord> <Elegantbeef> They namespace the enum
[02:26:39] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QF0
[02:26:53] <FromDiscord> <Elegantbeef> Well they dont force a namespace, only with ambiguity is it forced
[02:27:04] <FromDiscord> <Elegantbeef> Overloadable is the best since it uses static logic to reason the type
[02:28:02] <FromDiscord> <ShalokShalom> sent a code paste, see https://play.nim-lang.org/#ix=3QF3
[02:28:17] <FromDiscord> <Elegantbeef> Yep, it usaes the `kind`'s type to reason the type
[02:28:17] <FromDiscord> <ShalokShalom> Ok
[02:28:25] <FromDiscord> <ShalokShalom> Nice
[02:28:39] <FromDiscord> <ShalokShalom> Reason in the sense of type inference?
[02:28:46] <FromDiscord> <Elegantbeef> Yes
[02:28:49] <FromDiscord> <ShalokShalom> Yeah
[02:28:52] <FromDiscord> <ShalokShalom> Thx
[02:29:30] <FromDiscord> <Elegantbeef> https://nim-lang.github.io/Nim/manual_experimental.html#overloadable-enum-value-names
[02:29:38] <FromDiscord> <ShalokShalom> Is this kinda less used in it Nim?↵Considering support for overloaded enums comes so late?
[02:29:48] <FromDiscord> <Elegantbeef> What?
[02:29:53] <FromDiscord> <ShalokShalom> What else is coming?
[02:29:57] <FromDiscord> <ShalokShalom> Of functional stuff
[02:29:59] <FromDiscord> <Elegantbeef> It's a new feature so it's relatively unused yes
[02:30:10] <FromDiscord> <ShalokShalom> I mean, why is it new
[02:30:20] <FromDiscord> <ShalokShalom> Opposed to be a standard feature
[02:30:23] <FromDiscord> <Elegantbeef> Cause features have to be thought of and added by people
[02:30:35] <FromDiscord> <ShalokShalom> Yeah sure
[02:30:37] <FromDiscord> <Elegantbeef> I dont get the question of "Why is it new"
[02:30:53] <FromDiscord> <Elegantbeef> An RFC was made that suggested it, it was accepted and implemented
[02:31:35] <FromDiscord> <ShalokShalom> I mean, it seems the culture here is embracing a different style of coding, since it seems unusual to me, that what seems a basic feature gets added so late into a languages history
[02:31:48] <FromDiscord> <ShalokShalom> Considering it has so many edge cases covered a lot
[02:32:05] <FromDiscord> <ShalokShalom> But I guess that is an edge case in the imperative world
[02:32:29] <FromDiscord> <ShalokShalom> I just start coding and come from the functional world.
[02:32:50] <FromDiscord> <Elegantbeef> I mean it's a feature which needs to be implemented, so it has to come somewhere
[02:33:06] <FromDiscord> <Elegantbeef> The general convention was to use prefixes like i suggested before this
[02:33:14] <FromDiscord> <Elegantbeef> So it wasnt really needed, but is a nice to have
[02:33:50] <FromDiscord> <ShalokShalom> And what do you use in place of record types?
[02:34:08] <FromDiscord> <Elegantbeef> Objects are records
[02:34:14] <FromDiscord> <ShalokShalom> Ah, ok
[02:34:31] <FromDiscord> <ShalokShalom> So objects are not what objects are in the OO world?
[02:34:46] <FromDiscord> <ShalokShalom> Like, are they unmutable?
[02:35:03] <FromDiscord> <Elegantbeef> They're mutable if declared mutable
[02:35:11] <FromDiscord> <ShalokShalom> Ah, I see.
[02:35:13] <FromDiscord> <Elegantbeef> Nim's objects dont care mutabillity their declaration does
[02:37:31] <FromDiscord> <ShalokShalom> Seems like you can accomplish similar things with a very different approach
[02:37:36] <FromDiscord> <ShalokShalom> Or syntax, at least
[02:37:53] <FromDiscord> <Elegantbeef> Nim doesnt have HKT or ADTs so yea
[02:38:00] <FromDiscord> <Elegantbeef> You have to use tagged unions
[02:38:09] <FromDiscord> <ShalokShalom> I would suggest a "Nim for FSharp/OCaml/Haskell" section in the docs.
[02:38:24] <FromDiscord> <Elegantbeef> Well the wiki exists so have fun 😛
[02:38:25] <FromDiscord> <ShalokShalom> FSharp doesnt have HKT either
[02:38:35] <FromDiscord> <ShalokShalom> ADT would be nice
[02:38:59] <FromDiscord> <ShalokShalom> I guess some community library might exist
[02:39:17] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "Well the wiki exists": For that, first I have to know
[02:39:24] <FromDiscord> <ShalokShalom> Egg/hen issue.
[02:39:54] <FromDiscord> <ShalokShalom> You are connecting via a bridge, thats why you are having the Bot label on?
[02:40:12] <FromDiscord> <Elegantbeef> Yes i'm using matrix
[02:42:12] <FromDiscord> <ShalokShalom> Cool
[02:42:44] <FromDiscord> <ShalokShalom> I just looked, and Wikipedia actually quote a very similar example to yours, and says its an ADT
[02:43:16] <FromDiscord> <Elegantbeef> Oh i wasnt talking about the wikipedia
[02:43:19] <FromDiscord> <Elegantbeef> was talking about https://github.com/nim-lang/Nim/wiki
[02:43:38] <FromDiscord> <ShalokShalom> I kinda like, how it uses more basic parts of the language, and builds something that can achieve something comparable
[02:44:33] <FromDiscord> <ShalokShalom> https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(algebraic_data_type)#Nim
[02:44:58] <FromDiscord> <ShalokShalom> I looked into Wikipedia, didnt mean or suggested you said something about it
[02:45:21] <FromDiscord> <ShalokShalom> Just googled "Nim ADT" to find a community repo, and found its article.
[02:49:06] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 272 seconds)
[02:54:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:57:40] <FromDiscord> <ShalokShalom> sent a code paste, see https://play.nim-lang.org/#ix=3QF6
[02:58:07] <FromDiscord> <ShalokShalom> And that's giving me a record?
[03:01:30] <FromDiscord> <Elegantbeef> I dont know what a "Record" is really
[03:01:45] <FromDiscord> <Elegantbeef> The record i know is synonymous with a struct or object in nim
[03:02:05] <FromDiscord> <Elegantbeef> So reading that I'd make it `type Item = distinct Details`
[03:03:34] <FromDiscord> <ynfle> In reply to @Elegantbeef "So reading that I'd": It's not. it's a struct with field Details
[03:06:11] <FromDiscord> <Elegantbeef> Which is just a dumb distinct
[03:06:50] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QF8
[03:10:51] <FromDiscord> <ShalokShalom> Would mine be correct?
[03:12:20] <FromDiscord> <ynfle> In reply to @ShalokShalom "Would mine be correct?": Yes
[03:12:51] <FromDiscord> <ynfle> sent a code paste, see https://play.nim-lang.org/#ix=3QF9
[03:13:59] <FromDiscord> <ShalokShalom> Thanks
[03:19:26] <FromDiscord> <Elegantbeef> Sure but the 1\:1 translation sucks
[03:42:53] <FromDiscord> <QueenFuckingAdrielle> Does anyone know of a command to get the current cpu temperature on linux? Bonus points if its native and not an apt package
[03:43:28] <FromDiscord> <auxym> probably something under /dev/ that you can read from
[03:43:32] <FromDiscord> <QueenFuckingAdrielle> I should specify, I mean a bash command. a nim function would be great, but I'm pretty sure that isn't a thing.
[03:43:50] <FromDiscord> <QueenFuckingAdrielle> yea thats what I was thinking.
[03:43:54] <FromDiscord> <Elegantbeef> `sensors` exists but dont know how portable
[03:44:37] <FromDiscord> <QueenFuckingAdrielle> I can always write multiple functions for it. trying to flesh out a system monitor module.
[03:46:27] <FromDiscord> <auxym> apparently google tells me it's under `/sys/class/thermal` though I assume whatever is in there is highly hardware-dependant
[03:47:28] <FromDiscord> <auxym> Why not use `sensors` though?
[03:48:03] <FromDiscord> <auxym> or lm-sensors: https://wiki.archlinux.org/title/Lm_sensors
[03:48:15] <FromDiscord> <auxym> anyways this doesn't really have anything to do with nim...
[03:48:28] <FromDiscord> <Elegantbeef> Well they want to get linux temperature in Nim 😀
[03:48:41] <FromDiscord> <auxym> oh yeah
[03:48:56] <FromDiscord> <Elegantbeef> I'd say use libsensors and ship that with your binary
[03:49:11] <FromDiscord> <QueenFuckingAdrielle> yea its for a system monitor written in nim, lol also I'm not sure my other programming discord servers would know honestly
[03:49:26] <FromDiscord> <QueenFuckingAdrielle> In reply to @Elegantbeef "I'd say use libsensors": this is probably what I'll do.
[03:49:53] <FromDiscord> <QueenFuckingAdrielle> I'll look at /thermal but youre right that seems like its hw dependent.
[03:50:36] <FromDiscord> <QueenFuckingAdrielle> I'm trying to keep the dependency list a slim as possible, or at least keep many of the dependencies optional
[03:51:27] <FromDiscord> <auxym> my understanding is that libsensors/lm-sensors is basically a high-level interface over the stuff in /sys, to make it more portable across HW, etc.
[03:51:33] <FromDiscord> <QueenFuckingAdrielle> this is for a robotics application so dependencies can be costly and painful
[03:51:50] <FromDiscord> <Elegantbeef> Indeed aux
[03:52:02] <FromDiscord> <QueenFuckingAdrielle> In reply to @auxym "my understanding is that": yea i figured, itll save me the trouble of maintaining it
[03:52:04] <FromDiscord> <Elegantbeef> Well it also doesnt directly use files 😀
[03:52:42] <FromDiscord> <auxym> the readme seems to imply that libsensors can be statically linked (https://github.com/lm-sensors/lm-sensors), though it's lgpl
[03:54:17] <FromDiscord> <QueenFuckingAdrielle> Maybe I'll search for some system monitor source code on gh and see how others have done it.
[03:54:44] <FromDiscord> <QueenFuckingAdrielle> its ironic that ambient temp sensors are easier and more straightforward to deal with
[03:55:00] <FromDiscord> <QueenFuckingAdrielle> but they dont tell me much about cpu temp
[04:38:05] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:51:07] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:15:01] *** Joins: ltriant (~ltriant@118.102.122.246)
[06:20:00] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 272 seconds)
[06:45:09] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:23:43] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:23:42] *** Quits: GnuYawk (~GnuYawk@user/gnuyawk) (Quit: GnuYawk)
[08:27:42] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:41:19] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:23:15] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[09:45:08] *** Joins: pro (~pro@user/pro)
[09:50:12] *** Quits: pro (~pro@user/pro) (Ping timeout: 240 seconds)
[10:37:31] *** Joins: ltriant (~ltriant@118.102.122.246)
[10:42:46] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 256 seconds)
[10:54:18] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[11:28:37] *** Joins: PMunch (~PMunch@user/pmunch)
[12:32:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:47:43] <NimEventer> New thread by JPLRouge: Dear Nim enthusiasts, see https://forum.nim-lang.org/t/8949
[12:51:06] <FromDiscord> <Rika> i dont understand
[12:52:54] <FromDiscord> <Phil> I read JPL's post, I understand the gist, I have no idea what a designer screen type is
[12:53:20] <FromDiscord> <Phil> (edit) "I read JPL's post, I understand the gist, I have no idea what a designer screen type is ... " 03added "or what he wanted to express with "console handling""
[12:53:36] <FromDiscord> <Phil> (edit) "gist," => "gist being "nim is nice, readable and fast","
[12:54:03] <FromDiscord> <Elegantbeef> I'm uncertain but i think they've made a ncurses like library that supports those console versions?
[12:54:44] <FromDiscord> <Phil> I don't know what any of those things are either, though I know the word "library"
[12:55:06] <FromDiscord> <Phil> console versions means stuff like zsh, fsh, the default bash console etc.?
[12:55:15] <FromDiscord> <Elegantbeef> No those are shells
[12:55:40] <FromDiscord> <Elegantbeef> 5250 is an ibm terminal https://i.pinimg.com/originals/f0/e9/9f/f0e99f1a60a7d09c592979aae9fbc0c0.jpg
[12:56:12] <FromDiscord> <Elegantbeef> As is a 3270
[12:56:27] <FromDiscord> <Phil> Wait, like, "terminal = ancient computer" ?
[12:56:33] <FromDiscord> <Elegantbeef> Yea
[12:56:44] <FromDiscord> <Elegantbeef> terminal isnt really a computer as much as an interface with the computer
[12:58:19] <FromDiscord> <Elegantbeef> Ncurses is a library that abstracts terminal applications
[12:59:49] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[13:00:31] <FromDiscord> <haolian9 (高浩亮)> sent a code paste, see https://paste.rs/scV
[13:07:36] <FromDiscord> <Schelz> Nim support esp32 ?
[13:08:19] <FromDiscord> <Elegantbeef> https://github.com/elcritch/nesper stuff like this exists
[13:08:26] <FromDiscord> <Schelz> Thx
[13:17:48] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:26:11] <FromDiscord> <haolian9 (高浩亮)> done. it requires `--out` option, but nim did not honor the option actually
[13:34:09] <FromDiscord> <fbpyr> sent a code paste, see https://play.nim-lang.org/#ix=3QGB
[13:34:38] <FromDiscord> <haolian9 (高浩亮)> but i believe the generated tags is not compatible with universal-ctags
[13:36:55] <FromDiscord> <fbpyr> nvm, got it via `btn.inner_text` 🙂
[13:37:01] <FromDiscord> <Elegantbeef> `btn.innerText = "test_btn"`?
[13:37:30] <FromDiscord> <Elegantbeef> The object's fields arent visible due to the doc gen, but here they're https://github.com/nim-lang/Nim/blob/version-1-6/lib/js/dom.nim#L183-L205
[13:37:46] <FromDiscord> <ajusa> can I subclass `string`? Tried doing↵`type mystr = object of string` and `type mystr = string of RootObj` but neither of those worked
[13:37:57] <FromDiscord> <Deceptive> How do I migrate from std/json to jsony?
[13:38:02] <FromDiscord> <Elegantbeef> You cannot inherit from string
[13:38:14] <FromDiscord> <Elegantbeef> you can make a distinct string which is kinda like a subclass
[13:38:30] <FromDiscord> <Elegantbeef> `type MyStr = distinct string` is similar to what you want I imagine
[13:38:47] <FromDiscord> <Elegantbeef> replace all your serializer function calls with jsony ones?
[13:38:55] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[13:39:26] <Amun-Ra> ajusa: what do you want to achieve?
[13:39:32] <FromDiscord> <Elegantbeef> Ajusa are you after custom logic to your `mystr`?
[13:39:37] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[13:39:38] <FromDiscord> <Elegantbeef> Yea what amun said!
[13:39:59] <FromDiscord> <ajusa> custom logic and data to a string, while retaining all existing string operations
[13:40:07] <FromDiscord> <ajusa> distinct doesn't do the latter afaik
[13:40:17] <FromDiscord> <Elegantbeef> converter with distinct does
[13:40:20] <FromDiscord> <Elegantbeef> We went over this!
[13:40:24] <FromDiscord> <Deceptive> In reply to @Elegantbeef "replace all your serializer": I will try that I guess.
[13:40:30] <FromDiscord> <ajusa> but converters don't work with generics
[13:40:40] <Amun-Ra> {.borrow.} should work too
[13:40:55] <FromDiscord> <Elegantbeef> They work for generics, just have to be concrete, what're you doing fully
[13:41:01] <FromDiscord> <Elegantbeef> I might be able to help
[13:41:04] <FromDiscord> <fbpyr> thank you [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org) 😌
[13:41:15] <Amun-Ra> yes, a-z problem
[13:42:19] <FromDiscord> <ajusa> https://github.com/ajusa/nimtenbrew/blob/7cab445edba2910a9a93db0e362f697be927f341/src/v2.nim#L19
[13:42:46] <FromDiscord> <Elegantbeef> You dont use cast for distinct conversions
[13:42:51] <FromDiscord> <ajusa> I believe the issue with this code was that the `toSize` converter isn't concrete, which means I can't use it
[13:42:53] <FromDiscord> <Elegantbeef> it's just `SubType base`
[13:43:01] <FromDiscord> <Elegantbeef> But yes that is the issue
[13:43:19] <FromDiscord> <ajusa> so what was the workaround I should use?
[13:44:59] <FromDiscord> <Elegantbeef> There isnt a great work around here since the converter needs to be instantiated manually
[13:45:21] <FromDiscord> <Elegantbeef> So you basically need a template that emits a converter with a type
[13:46:22] <FromDiscord> <ajusa> so every time someone uses a specific generic type, I need to somehow make a concrete converter for it? is there an easy way to do that?
[13:46:32] <FromDiscord> <Elegantbeef> There isnt really
[13:47:57] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QGD
[13:48:50] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3QGE
[13:49:22] <FromDiscord> <ajusa> In reply to @Elegantbeef "You need to do": does makeTyp need to be called before each use of a generic then?
[13:49:59] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QGF
[13:50:09] <FromDiscord> <Elegantbeef> I'd really say type conversions on distincts are hardly that annoying
[13:50:18] <FromDiscord> <ajusa> well it's double the code then isn't it
[13:50:31] <FromDiscord> <Elegantbeef> How?
[13:51:00] <FromDiscord> <ajusa> I need to call makeTyp and then also use the exact same type definition in an object. the type is basically being defined in two places
[13:51:22] <FromDiscord> <Elegantbeef> What?
[13:51:34] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3QGG
[13:52:08] <FromDiscord> <ajusa> sent a code paste, see https://paste.rs/uO4
[13:52:46] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QGH
[13:53:08] <FromDiscord> <ajusa> oh
[13:53:29] <FromDiscord> <Elegantbeef> It creates and L-value and dont need to use cast
[13:54:21] <FromDiscord> <ajusa> it's acceptable, but as the fields increase I figured it might get annoying... I think I'll start simple and try the converters if it actually is annoying
[13:54:21] <FromDiscord> <Elegantbeef> Users can of course borrow procedures they want generically
[13:54:51] <FromDiscord> <ajusa> didn't know about the lvalue conversion lol, I was doing converters to the right side which felt awful
[13:56:49] <FromDiscord> <Elegantbeef> Perhaps there is an RFC idea, making it so converters do generic inference for distincts
[13:58:00] <FromDiscord> <Elegantbeef> Although the issue is more that borrowing is hard
[13:58:03] <FromDiscord> <ajusa> oh is that even possible? I thought it was more of a "really hard to solve" problem, kind of how you can't have converters go a -> b -> c automatically, they are limited to a single step
[13:58:30] <FromDiscord> <ajusa> seems like it would slow down compile time a ton, but I have no clue about compiler internals
[13:58:42] <FromDiscord> <Elegantbeef> I mean really distincts should havea `{.borrow: all.}`
[13:59:19] <FromDiscord> <Elegantbeef> which would mean in everycase a base would be valid this would be aswell
[13:59:30] <FromDiscord> <Elegantbeef> Probably could make an RFC and implement it very easily
[13:59:31] <FromDiscord> <ajusa> In reply to @Elegantbeef "I mean really distincts": yeah this would be fantastic
[13:59:33] <PMunch> Is it then distinct any more?
[13:59:39] <FromDiscord> <Elegantbeef> Yes
[13:59:44] <FromDiscord> <Elegantbeef> It's still a distinct type
[14:00:06] <PMunch> But if it behaves exactly like the base type?
[14:00:16] <FromDiscord> <Elegantbeef> It doesnt behave exactly
[14:00:26] <FromDiscord> <Elegantbeef> you can attach type information and the base cannot dispatch into it
[14:00:39] <FromDiscord> <Elegantbeef> And two distincts that both borrow all are not interopable
[14:00:45] <FromDiscord> <Elegantbeef> They need converted
[14:01:32] <FromDiscord> <ajusa> clearly I've got some sort of convoluted use case that would be easier with it lol, so a distinct type that borrows all of the other operations would be cool.
[14:02:57] <FromDiscord> <ajusa> sent a code paste, see https://paste.rs/7Q7
[14:03:54] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[14:04:21] <FromDiscord> <ajusa> I'll try and open a really simple RFC, but I'm not a compiler dev so I can only provide reasonable usecase and expected behavior
[14:04:25] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/v5E
[14:04:25] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[14:04:31] <FromDiscord> <Elegantbeef> Pmunch that's what i'm proposing
[14:04:36] <FromDiscord> <ajusa> yep that exactly
[14:05:10] <FromDiscord> <Elegantbeef> Eh i have a RFC for nimskull somewhat related though talks about removing generic type aliases
[14:07:09] <FromDiscord> <Elegantbeef> There are many usages of distinct, it's not just safety
[14:08:12] <nrds> <03YouLoveIran/freenode99> hi, #freenode is moderated because you American motherfuckers don't want to hear the truth? root Andrew Lee bitch, what happened with free speech you motherfucker?
[14:08:15] <nrds> <03YouLoveIran/freenode99> US Congress wants to expel Russia from UN Security Council - https://www.rt.com/russia/550558-congress-expel-russia-security-council/ I can't wait to see China joining the fight! Prepare for a world war American bitch! Hide your family underground! We coming for you!
[14:08:19] <nrds> <03YouLoveIran/freenode99> root you're a fucking bitch, you destroyed freenode and silenced everyone who speak against terrorism by the United States of America, where is my free speech Andrew fucking Lee? I would jump on you and beat you death you mofo
[14:08:54] <FromDiscord> <Elegantbeef> lol
[14:09:33] <FromDiscord> <Elegantbeef> Gotta feel bad when they share a RT link, really hurts the morale
[14:10:46] <FromDiscord> <Elegantbeef> Anyway ajusa make a well thoughout RFC for why you want to borrow all and i'll probably pile on
[14:11:20] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[14:11:43] <FromDiscord> <ajusa> oh god it has to be good?
[14:13:13] <FromDiscord> <Elegantbeef> I mean it doesnt have to be amazing thoughout, but a single compelling use case or reason to add it is all that's really needed
[14:13:47] <FromDiscord> <Elegantbeef> I can probably make the PR relatively quick if i'm not wrong, but not going to spend any time without an RFC personally
[14:14:39] <FromDiscord> <ajusa> gotcha, well I'm working on it now (and I can edit it if looks bad or not well written)
[14:15:38] <PMunch> @Prestige, we really need some kind of filter to remove these trolls
[14:15:47] <PMunch> Otherwise we'll have to kick the nrds bot..
[14:16:16] <FromDiscord> <Elegantbeef> It's mostly just a summary of what I said, i'll be going to sleep soon so cant give any input now
[14:16:27] <FromDiscord> <Elegantbeef> What pmunch you dont like literal russian trolls 😀
[14:19:19] <PMunch> Haha, I don't mind the Russian trolls any more than the other trolls spamming messages about Freenode being bad..
[14:19:36] <PMunch> Neither are on topic for this channel
[14:30:30] <FromDiscord> <ajusa> @ElegantBeef not sure if you are still awake but https://github.com/nim-lang/RFCs/issues/450
[14:39:05] *** Joins: ltriant (~ltriant@118.102.122.246)
[14:43:48] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 240 seconds)
[14:51:23] <FromDiscord> <fbpyr> is there a way to use html strings generated with `htmlgen` directly in `dom` to create a new node?
[15:05:00] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[15:24:14] <FromDiscord> <mratsim> @ajusa don't vote for your own RFC
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:41:41] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[15:44:07] <NimEventer> New thread by Arnetheduck: Raises tracking and no more cyclic references in `chronos`, see https://forum.nim-lang.org/t/8950
[15:45:57] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:46:16] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:57:57] <FromDiscord> <System64 ~ Flandre Scarlet> Is it normal autocompletion is broken? https://media.discordapp.net/attachments/371759389889003532/946745331234779168/unknown.png
[16:03:09] <FromDiscord> <Rika> kinda
[16:03:18] <FromDiscord> <Rika> nimsuggest is shoddy
[16:04:04] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @Rika "nimsuggest is shoddy": what should I do?
[16:04:25] <FromDiscord> <Rika> use a mixture of nimsuggest and other autosuggest engines like "in buffer"
[16:04:56] <FromDiscord> <System64 ~ Flandre Scarlet> is "in buffer" a plugin?
[16:06:24] <FromDiscord> <auxym> built in vim
[16:07:02] <FromDiscord> <System64 ~ Flandre Scarlet> Oh no! VIM!
[16:07:05] <FromDiscord> <System64 ~ Flandre Scarlet> 😱
[16:09:15] <FromDiscord> <Rika> idk man i use vim and thats what its called
[16:09:35] <FromDiscord> <System64 ~ Flandre Scarlet> Ah I see↵I use VS Code
[16:34:50] <FromDiscord> <ajusa> In reply to @mratsim "<@!102899813149855744> don't vote for": Sorry about that, didn't know!
[16:35:13] <FromDiscord> <ajusa> (edit) "In reply to @mratsim "<@!102899813149855744> don't vote for": Sorry about that, didn't know! ... " 03added "Removed my like"
[16:35:13] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:35:26] <FromDiscord> <ajusa> (edit) "know!" => "know the likes were actually used to make decisions!"
[16:40:34] <FromDiscord> <Traveler> Hey guys, how does one `echo` with a carriage return?
[16:41:16] <FromDiscord> <Traveler> the docs state `\c` but `echo fmt"{somevar}\c"` does not rresult in a carriage return
[16:43:15] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3QHv
[16:43:41] <FromDiscord> <enthus1ast> !echo repr @[1,2,3]
[16:43:44] <FromDiscord> <Traveler> @hmmm  does `repr` work
[16:43:48] <FromDiscord> <Traveler> ^
[16:43:56] <FromDiscord> <enthus1ast> withouth the !
[16:44:07] <PMunch> !eval echo repr @[1, 2, 3]
[16:44:11] <NimBot> 0x7fa62174d050@[1, 2, 3]
[16:44:14] <FromDiscord> <fbpyr> @Traveler\:   iirc there is a warning on newline chars. for that you could use `&"some {var_str}\n"`
[16:44:17] <FromDiscord> <enthus1ast> ah eval
[16:44:59] <FromDiscord> <hmmm> what's this 0x7fa62174d050
[16:45:07] <FromDiscord> <enthus1ast> the address
[16:45:09] <PMunch> The address in memory of the sequence
[16:45:14] <FromDiscord> <System64 ~ Flandre Scarlet> Yeah
[16:45:19] <FromDiscord> <System64 ~ Flandre Scarlet> like Java I think
[16:45:24] <PMunch> !eval echo $(@[1, 2, 3])
[16:45:25] <FromDiscord> <hmmm> hmm
[16:45:26] <NimBot> @[1, 2, 3]
[16:45:34] <FromDiscord> <hmmm> perfect!
[16:45:40] <PMunch> Just a normal $ works fine :P
[16:45:50] <FromDiscord> <hmmm> haha
[16:46:01] <FromDiscord> <System64 ~ Flandre Scarlet> !eval echo $([1, 2, 3])
[16:46:02] <PMunch> Echo of course does that by default
[16:46:02] <FromDiscord> <Rika> You could just not $ when suing echo
[16:46:03] <FromDiscord> <Rika> Using
[16:46:04] <NimBot> [1, 2, 3]
[16:46:07] <PMunch> !eval echo @[1, 2, 3]
[16:46:10] <NimBot> @[1, 2, 3]
[16:46:13] <FromDiscord> <System64 ~ Flandre Scarlet> ah yeah it works without the at
[16:46:21] <FromDiscord> <System64 ~ Flandre Scarlet> (edit) "ah yeah it works without the at ... " 03added "symbol"
[16:46:32] <PMunch> Yeah the @ is just to make it a sequence and not an arary
[16:46:44] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @PMunch "Yeah the @ is": what's the difference
[16:46:46] <FromDiscord> <System64 ~ Flandre Scarlet> (edit) "difference" => "difference?"
[16:46:55] <FromDiscord> <Traveler> array has fixed length at compile time
[16:47:04] <FromDiscord> <Traveler> sequence is similar to vector in c++
[16:47:09] <FromDiscord> <enthus1ast> and i guess is allocated on the stack or?
[16:47:13] <FromDiscord> <Traveler> heap
[16:47:14] <FromDiscord> <Rika> Stack yes
[16:47:21] <FromDiscord> <Traveler> array = stack
[16:47:22] <FromDiscord> <Rika> Or do you mean seq
[16:47:30] <FromDiscord> <enthus1ast> no array
[16:47:47] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @Traveler "array has fixed length": so it's like C arrays
[16:47:54] <FromDiscord> <Traveler> yes
[16:48:02] <FromDiscord> <System64 ~ Flandre Scarlet> familiar then
[16:48:05] <FromDiscord> <Traveler> at leas that is how i understand it
[16:48:11] <FromDiscord> <System64 ~ Flandre Scarlet> and sequences are kinda arraylists in Java
[16:48:12] <PMunch> Yes
[16:48:30] <PMunch> Not sure about arraylists
[16:48:34] <PMunch> Those might be linked lists
[16:48:36] <FromDiscord> <Traveler> but the carriage return i cant figure out
[16:49:04] <PMunch> Sequences are just a malloced array that will be realloced if it runs out of space
[16:49:25] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @PMunch "Sequences are just a": so like Java, C#, ...?
[16:49:28] <PMunch> @Traveler, printing a carriage return?
[16:49:36] <FromDiscord> <Rika> In reply to @Traveler "the docs state `\c`": fmt is a raw string, use & to mitigate or add a space between fmt and the string
[16:49:38] <PMunch> @System64_~_Flandre_Scarlet, maybe?
[16:49:54] <FromDiscord> <Rika> In reply to @Rika "fmt is a raw": fmt without the space makes a raw string
[16:49:54] <FromDiscord> <konsumlamm> ArrayLists are based on arrays
[16:49:59] <FromDiscord> <Traveler> I am using `echo &"T={ti} \c"`
[16:50:06] <FromDiscord> <Traveler> this produces newlines in my terminal
[16:50:18] <FromDiscord> <Rika> Sounds right, what’s the issue?
[16:50:28] <Amun-Ra> Traveler: echo does that by default
[16:50:43] <FromDiscord> <Traveler> carriage return should reset it to the beginning to the line
[16:50:50] <Amun-Ra> Traveler: if you don't want to have NL use stdout.write
[16:50:50] <FromDiscord> <Rika> Oh you don’t want them, yeah use “stdout.write”
[16:50:56] <FromDiscord> <Traveler> i want this print("test", end = "\r")
[16:51:02] <FromDiscord> <Traveler> (in python)
[16:51:09] <Amun-Ra> stdout.write "foobar\r"
[16:51:31] <FromDiscord> <Traveler> ah ok ik will have look
[16:51:48] <FromDiscord> <enthus1ast> does python print flushes the output stream?
[16:52:01] <FromDiscord> <Traveler> not if you use end
[16:52:02] <FromDiscord> <enthus1ast> if yes then you have to do a\:↵stdout.flushFile()
[16:52:15] <Amun-Ra> that is OS dependent
[16:52:32] <Amun-Ra> you don't have to flush stderr in general, you have to flush stdout
[16:52:35] <FromDiscord> <enthus1ast> ok ic↵(@Traveler)
[16:53:44] <FromDiscord> <enthus1ast> @Traveler\: if you want to have even more control, have a look at the terminal module  and illwill
[16:54:51] <FromDiscord> <Traveler> https://nim-lang.github.io/Nim/terminal.html this one?
[16:55:13] <FromDiscord> <enthus1ast> this and https://github.com/johnnovak/illwill
[16:56:30] <FromDiscord> <Traveler> Thanks!
[16:56:50] <FromDiscord> <Traveler> haha point 3 https://media.discordapp.net/attachments/371759389889003532/946760149081681950/unknown.png
[16:57:21] <FromDiscord> <enthus1ast> another point\: don't use it if your input is non ascii ;)
[16:57:25] <FromDiscord> <enthus1ast> does not work yet
[16:58:15] <FromDiscord> <enthus1ast> will do it once i need illwill (and non ascii input)  again
[17:05:40] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://paste.rs/Jhq
[17:18:18] <FromDiscord> <mratsim> sent a code paste, see https://play.nim-lang.org/#ix=3QHB
[17:19:06] <FromDiscord> <mratsim> Parameter passing:↵- By default, Nim passes objects larger than 24 bytes by reference (the {.nimcall.} convention). For FFI, you can use {.bycopy.} or {.byref.} to force one behavior or the other.
[17:19:56] <FromDiscord> <System64 ~ Flandre Scarlet> I'm interoperating with a C library in this case
[17:20:03] <FromDiscord> <mratsim> Copy behavior:↵- objects have value semantics, they are copied on assignment and on the stack↵- ref objects have reference semantics, there is a refcount, commonly called Nim "GC"
[17:20:51] <FromDiscord> <mratsim> for interop with C I usually start by using c2nim on the C header and then go over  by hand.
[17:21:10] <FromDiscord> <System64 ~ Flandre Scarlet> It's what I did I think
[17:21:34] <FromDiscord> <mratsim> though sometimes I change the bycopy/byref if I see that a type is always used by ref
[17:22:03] <FromDiscord> <mratsim> example: https://github.com/status-im/nim-blscurve/blob/master/blscurve/blst/blst_abi.nim#L84-L121
[17:22:18] <FromDiscord> <auxym> since we're on the topic... any idea why c2nim really wants to annotate all object defs with `bycopy`?
[17:22:23] <FromDiscord> <mratsim> and they will be passed by pointers here: https://github.com/status-im/nim-blscurve/blob/master/blscurve/blst/blst_abi.nim#L196-L214
[17:22:39] <FromDiscord> <mratsim> In reply to @auxym "since we're on the": Because by default C is bycopy
[17:22:50] <FromDiscord> <auxym> my understanding was that object have value semantics by default
[17:22:58] <FromDiscord> <auxym> (edit) "object" => "objects"
[17:23:09] <FromDiscord> <mratsim> then if you see that all procs are `ptr MyObject` just change byref and remove the `ptr`
[17:24:00] <Amun-Ra> mratsim: does it work exactly like passing pointers to objects in C?
[17:24:23] <FromDiscord> <mratsim> yes
[17:24:28] <Amun-Ra> good to know
[17:24:36] <FromDiscord> <Deceptive> sent a code paste, see https://paste.rs/SNe
[17:28:26] *** Joins: rockcavera (~rc@192.12.112.205)
[17:28:26] *** Quits: rockcavera (~rc@192.12.112.205) (Changing host)
[17:28:26] *** Joins: rockcavera (~rc@user/rockcavera)
[17:31:29] <nrds> <06Prestige99> PMunch yeah I'm doing to ask them to just remove the freenode bridge at this point, don't think there's a way to filter it out
[17:31:47] <FromDiscord> <Deceptive> sent a code paste, see https://play.nim-lang.org/#ix=3QHF
[17:32:42] <FromDiscord> <enthus1ast> imho jsony directly converts to object
[17:33:13] <FromDiscord> <enthus1ast> and does not have a JsonNode (like the std/json)
[17:33:49] <FromDiscord> <enthus1ast> so you could just define an object with the stuff you want, and later use jsony to generate a json string
[17:34:22] <FromDiscord> <Deceptive> How it would like in the code? I am don't really have a good grasp in Nim :/
[17:34:58] <FromDiscord> <enthus1ast> is this the structure?
[17:35:07] <FromDiscord> <enthus1ast> or could it change?
[17:36:15] <FromDiscord> <Deceptive> In reply to @enthus1ast "is this the structure?": Like uh... it's structure↵↵The software itself should insert the stuff which is `"value": "" & test & "",` here. And test will be replaced with other thing.
[17:38:21] *** Joins: arkurious (~arkurious@user/arkurious)
[17:41:08] <FromDiscord> <enthus1ast> something like this maybe\:
[17:42:12] <FromDiscord> <enthus1ast> https://play.nim-lang.org/#ix=3QHL
[17:42:57] <FromDiscord> <enthus1ast> if the fields structure is modular you could also just use a table for this
[17:45:40] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3QHM
[17:45:47] <FromDiscord> <enthus1ast> yes works
[17:48:53] *** Joins: enyc (~enyc@user/enyc)
[17:49:14] <FromDiscord> <Deceptive> In reply to @enthus1ast "https://play.nim-lang.org/#ix=3QHL": Damn, looks a bit of clunky
[17:49:34] <FromDiscord> <Deceptive> If I will compare the stuff I made above, and one you wrote.
[17:49:56] <FromDiscord> <enthus1ast> mine is type safe
[17:50:29] <FromDiscord> <enthus1ast> but i guess there are others ways to make it unclunky
[17:51:20] <FromDiscord> <enthus1ast> do you just wanto store the json string?
[17:52:43] <FromDiscord> <Deceptive> In reply to @enthus1ast "do you just wanto": yeah
[17:53:05] <FromDiscord> <enthus1ast> then just add a $ \:)
[17:53:08] <FromDiscord> <enthus1ast> $ %\
[17:54:33] <FromDiscord> <Deceptive> sent a code paste, see https://paste.rs/Txb
[17:54:38] <FromDiscord> <Deceptive> I am not sure if the code is valid tho
[17:54:47] <FromDiscord> <enthus1ast> $ %\
[17:55:13] <FromDiscord> <Deceptive> (edit) "https://play.nim-lang.org/#ix=3QHP" => "https://play.nim-lang.org/#ix=3QHQ"
[17:55:15] <FromDiscord> <Deceptive> `var data = $ %{"content": begin & testing, "username": "Test"}`↵↵good?
[17:57:28] <FromDiscord> <enthus1ast> i think jsony does not have the %\ macro
[17:58:04] <FromDiscord> <Deceptive> `var data = ${"content": begin & testing, "username": "Test"}`
[17:58:06] <FromDiscord> <Deceptive> Good?
[17:58:09] <FromDiscord> <enthus1ast> for jsony to work, you need a type any how
[17:58:22] <FromDiscord> <enthus1ast> it just converts from string to type
[17:58:29] <FromDiscord> <enthus1ast> and back
[17:58:44] <FromDiscord> <enthus1ast> and does not have a JsonNode representation
[17:59:17] <FromDiscord> <enthus1ast> this is what %\ would create
[17:59:59] <FromDiscord> <enthus1ast> in std/json you would then convert this JsonNode tree to a type
[18:00:48] <FromDiscord> <enthus1ast> what is your goal, and why would you want to use jsony again? \:)
[18:11:09] *** Joins: shalokshalom (~quassel@2a02:1748:dd5e:7f60:b5dc:871:61:d7)
[18:22:45] <FromDiscord> <fbpyr> sent a code paste, see https://play.nim-lang.org/#ix=3QI1
[18:41:02] *** Joins: ltriant (~ltriant@118.102.122.246)
[18:46:09] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 256 seconds)
[18:48:18] <FromDiscord> <fbpyr> if I leave the await and the check for the status out it compiles and even performs the request. ↵but how would I await / waitFor the response/promise and get the content?
[18:52:39] <FromDiscord> <qb> does `eraseScreen` from `terminal` for you guys work?
[18:57:17] <FromDiscord> <enthus1ast> yes it works for me, but i can imagine that it works better if the terminal is not in linemode
[18:57:28] <FromDiscord> <enthus1ast> (or how this mode is called again)
[19:04:45] <NimEventer> New thread by Mardiyah: Declaration/definition array of array 2 elements in which's  the 2nd is array, see https://forum.nim-lang.org/t/8951
[19:12:06] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[19:13:08] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[19:13:27] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[19:14:29] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[19:31:08] <FromDiscord> <System64 ~ Flandre Scarlet> I can't AND with 2 enum elements? https://media.discordapp.net/attachments/371759389889003532/946798983739740180/unknown.png
[19:33:54] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[19:38:26] <FromDiscord> <haxscramper> is this `enum class`?
[19:41:32] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3QIE
[19:42:38] <FromDiscord> <haxscramper> sorry, the code looked like C, so I got confused. No, in nim you can't `and` two enusm together, it is not safe because the resulting value is not guaranteed to be an anum
[19:42:54] <FromDiscord> <haxscramper> to use enums like sets use `set[TLN_OVERLAY]`
[19:43:28] <FromDiscord> <haxscramper> If you are interefacing with C API you can do `TLN_OVERLAY_APERTURE.cint or TLN_OVERLAY_SCANLINES.cint`, but this can't be converted back to enum
[19:43:47] <FromDiscord> <haxscramper> unless there is an enum that has `.cint` with necessary value
[19:44:39] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3QIF
[19:45:54] *** Joins: pro (~pro@user/pro)
[20:03:31] <FromDiscord> <demotomohiro> If `TLN_Overlay` is a bit mask, you can change first parameter type to `set[TLN_Overlay]` and pass `{TLN_OVERLAY_SCANLINES, TLN-OVERLAY_APERTURE}`.
[20:19:45] <NimEventer> New post on r/nim by Ruri: Segmentation Faults when calling Win32 API, see https://reddit.com/r/nim/comments/t18h1s/segmentation_faults_when_calling_win32_api/
[21:02:36] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (Ping timeout: 250 seconds)
[21:15:22] *** Joins: vicfred (~vicfred@user/vicfred)
[21:20:42] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3QJ5
[21:32:21] <FromDiscord> <bartimus> Good Morning/Afternoon everyone had a question regarding dynlib and passing ptr's to them. I am creating a shared channel, I am then passing the ptr of that channel to the dynlib function to write to, when checking the addresses of the channel in both places, they are the same, but the address in the dynlib function points to nil, instead of the underlying channel.
[21:33:07] <FromDiscord> <Elegantbeef> Not having a procedure definition that stretches the entire screen is a good practice, make the parameter list vertical!
[21:33:48] <FromDiscord> <bartimus> sent a code paste, see https://play.nim-lang.org/#ix=3QJb
[21:34:58] <FromDiscord> <Elegantbeef> Code?
[21:35:44] <FromDiscord> <bartimus> sent a code paste, see https://play.nim-lang.org/#ix=3QJe
[21:36:23] <FromDiscord> <bartimus> sent a code paste, see https://play.nim-lang.org/#ix=3QJf
[21:37:06] <FromDiscord> <bartimus> the create shared channel is just a generic wrapper i wrote that uses allocshared0
[21:37:12] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @Elegantbeef "Not having a procedure": Ah thanks
[21:37:19] <FromDiscord> <Elegantbeef> `var ptr` is the issue
[21:37:38] <FromDiscord> <Elegantbeef> that's a `ptr ptr Channel`
[21:38:58] <FromDiscord> <bartimus> oh srry that was from debugging
[21:41:10] <NimEventer> New thread by Ctclmsn: Nim wrapper for C library; data segment question, see https://forum.nim-lang.org/t/8952
[21:41:29] <FromDiscord> <bartimus> sent a code paste, see https://play.nim-lang.org/#ix=3QJg
[21:42:27] <FromDiscord> <Elegantbeef> Sending the instruction that way is 100% unsafe
[21:43:04] <FromDiscord> <Elegantbeef> But anyway `c[].send` is what you need to do
[21:43:32] <FromDiscord> <bartimus> yeah, let me update the function to the other way I had before I started going crazy with debug
[21:44:24] <FromDiscord> <bartimus> k i updated it, i did do the c[], but in that case everything runs but the channel never gets the msg, just loops
[21:46:11] <FromDiscord> <Elegantbeef> Can we change it to a `Channel[int]` for now to make it less convoluted?
[21:48:01] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3QJh
[21:49:01] <FromDiscord> <bartimus> @ElegantBeef yeah let me try
[21:49:15] <FromDiscord> <System64 ~ Flandre Scarlet> Btw I have default parameters for initWindow(), but can I pass only one parameter? I want to change the 7th one
[21:49:44] <FromDiscord> <Elegantbeef> Nim has named parameters
[21:49:53] <FromDiscord> <Elegantbeef> so you can do `initWindow(overlay = "Hello world")`
[21:50:06] <FromDiscord> <Waldecir Santos> I wish we had named varargs, run.....
[21:50:28] <FromDiscord> <Elegantbeef> A pointless thing in a static language
[21:50:31] <FromDiscord> <System64 ~ Flandre Scarlet> Aaah alright
[21:50:59] <FromDiscord> <Waldecir Santos> I'm just messing with you, I know.
[21:52:11] <FromDiscord> <bartimus> sent a code paste, see https://play.nim-lang.org/#ix=3QJi
[21:52:55] <FromDiscord> <Elegantbeef> again do `c[].send(1)`
[21:54:23] <FromDiscord> <bartimus> ok
[21:54:49] <FromDiscord> <Elegantbeef> I might be wrong but i have the wacky belief that the copy is the issue
[21:55:37] <FromDiscord> <bartimus> sent a code paste, see https://play.nim-lang.org/#ix=3QJj
[21:55:54] <FromDiscord> <Elegantbeef> Did you change it to an int in the main program?
[21:55:54] <FromDiscord> <Phil> >_> Turns out norm gives you back `"your_table_name"` and I did not account for the quotation marks.↵As for getting rid of them, is my choice `s.substr(1, s.len()  - 2)` Or do we have something where I can go `s.substr(1, -1)` (doesn't have to be substr, I'll take any proc) ?
[21:56:26] <FromDiscord> <Elegantbeef> `s[1..^2]` or `s.toOpenArray(1, s.len - 2)`
[21:56:48] <FromDiscord> <Elegantbeef> the latter is more efficient if you take `openArray[char]`
[21:57:03] <FromDiscord> <bartimus> sent a code paste, see https://play.nim-lang.org/#ix=3QJl
[21:58:14] <FromDiscord> <Phil> In reply to @Elegantbeef "the latter is more": It's something that happens once per HTTP request, so readability is more likely to be king here. s[1..^2] is definitely better, thanks for that!↵Just to bad we don't have the wrap-around indexing defined for negative indexing
[21:58:24] <FromDiscord> <Elegantbeef> Uhhh no clue anymore bart, guess i should run it myself
[21:58:39] <FromDiscord> <Elegantbeef> "wrap-around indexing defined for negative indexing" ?
[21:58:54] <FromDiscord> <Phil> s[1..-1]
[21:59:20] <FromDiscord> <Phil> Sorry, it's late and I had to write a spring service today
[21:59:22] <FromDiscord> <Phil> My brain is messed up
[22:00:05] <FromDiscord> <Elegantbeef> Well negative indexes wouldnt be defects then, which means more likely to have errors
[22:00:12] <FromDiscord> <Phil> My word choice is horrendous, errr I just meant something along the lines that I'd have loved for this notation to support negative indices at the end and interpret them as `s.len() - 1 - X`, So that I could do s[1..-1]
[22:00:24] <FromDiscord> <Phil> Fair point
[22:00:40] <FromDiscord> <Phil> Given that I harp on a lot about wanting my code to blow up in my face at compile time, I guess that's for the better overall
[22:00:53] <FromDiscord> <Elegantbeef> You can always write your own `[]` 😛
[22:01:13] <FromDiscord> <bartimus> @ElegantBeef yeah, I was at a loss too (i'm kinda new to nim, used it a little before v1). I'll try to read into dynlib and maybe i can track down whats going on.
[22:01:28] <FromDiscord> <Elegantbeef> Nim is one of the few languages that a lot is implemented in user space
[22:01:29] <FromDiscord> <Phil> In reply to @Elegantbeef "You can always write": I wish I could express how much too lazy for that I am 😄
[22:01:47] <FromDiscord> <Elegantbeef> Can i get the full code again bart, i'll also take a look
[22:02:48] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[22:02:50] <FromDiscord> <Elegantbeef> And that laziness is a good thing, cause it discourages people from doing things wrong
[22:02:55] <FromDiscord> <bartimus> yeah pre changes?
[22:03:03] <FromDiscord> <Elegantbeef> Post changes
[22:03:23] <FromDiscord> <bartimus> k
[22:03:32] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 240 seconds)
[22:03:39] <FromDiscord> <Elegantbeef> Distinct backwards index is capable of being statically checked!
[22:07:05] *** Joins: rockcavera (~rc@192.12.112.205)
[22:07:05] *** Quits: rockcavera (~rc@192.12.112.205) (Changing host)
[22:07:05] *** Joins: rockcavera (~rc@user/rockcavera)
[22:09:24] <FromDiscord> <bartimus> @ElegantBeef https://github.com/bartimus-primed/shared_code
[22:10:37] <FromDiscord> <Phil> In reply to @Elegantbeef "And that laziness is": Typically that lazyness encourages me to write templates to do one very complex thing instead of doing 40 near identical medium complex things
[22:10:52] <FromDiscord> <Phil> And then remove the 10 near identical medium complex things I already wrote
[22:24:32] <FromDiscord> <Elegantbeef> Well the issue is https://github.com/nim-lang/Nim/blob/version-1-6/lib/system/channels_builtin.nim#L390 bart, one of the two types are wrong for whatever reason
[22:29:33] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[22:42:36] *** Joins: ltriant (~ltriant@118.102.122.246)
[22:47:35] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 256 seconds)
[22:58:41] <FromDiscord> <sOkam!> sent a code paste, see https://play.nim-lang.org/#ix=3QJu
[22:59:26] <FromDiscord> <sOkam!> (edit) "https://play.nim-lang.org/#ix=3QJu" => "https://play.nim-lang.org/#ix=3QJv"
[23:22:12] <FromDiscord> <bartimus> @ElegantBeef ahhh, I shall debug, i greatly appreciate your help
[23:41:56] *** Quits: pro (~pro@user/pro) (Quit: pro)
[23:43:21] <FromDiscord> <Phil> In reply to @sOkam! "What's the correct way": No idea on my end, at first glance I'd say the case statement in general requires newlines to break and can't handle semicolons well.↵Outside of that though, I am morbidly curious. What brought you to this question?
[23:43:32] <FromDiscord> <Phil> (edit) "In reply to @sOkam! "What's the correct way": No idea on my end, at first glance I'd say the case statement in general requires newlines to break and can't handle semicolons well.↵Outside of that though, I am morbidly curious. What ... brought" 03added "usecase"
[23:45:41] <FromDiscord> <sOkam!> In reply to @Isofruit "No idea on my": oneliner at the top of the script, so i can do with vim shortcuts `r -> v` to change the nimscript to verbose, or `r -> w` to change to whatif↵and, at the same time, not have the thing eat up 7 lines of code, making the top of the script not visible on first glance when opening
[23:46:03] <FromDiscord> <sOkam!> (edit) "whatif↵and," => "whatif. and,"
[23:51:39] <NimEventer> New thread by BarrOff25: Bbqueue in Nim, see https://forum.nim-lang.org/t/8953
[23:55:16] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
