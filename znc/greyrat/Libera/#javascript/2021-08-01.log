[00:00:18] <wroathe> Them's fightin' words.
[00:00:25] <celphi> lmao
[00:01:06] <han-solo> :)
[00:01:53] *** Joins: FightingFalcon (~none@user/fightingfalcon)
[00:02:09] *** Quits: Northwoods (~Northwood@223.130.30.69) (Ping timeout: 250 seconds)
[00:02:15] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Read error: Connection reset by peer)
[00:02:47] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[00:03:31] *** Quits: Poboy (~Poboy@user/poboy) (Ping timeout: 246 seconds)
[00:07:08] <GreenJello> maybe something like this: https://ject.dev/?rtab=console&saved=5NzoNnTCdnyrV
[00:07:15] *** Joins: Intelo (~Intelo@88.246.74.102)
[00:08:01] <wroathe> GreenJello: That scrollbar in your JS window doesn't like it when the window resizes
[00:08:09] <wroathe> the browser window resizes*
[00:09:11] <GreenJello> if you resize a pane that fixed it, but will add a window resize handler
[00:09:16] <GreenJello> fixes*
[00:09:32] *** __jmcantrell__ is now known as jmcantrell
[00:10:35] <wroathe> GreenJello: Why not just use overflow-y: scroll, and style the scrollbar?
[00:10:53] <wroathe> Custom scrollbars are one of my UI pet peeves :P
[00:11:13] <wroathe> That and custom media players for HTML5 video elements (which are almost always universally awful)
[00:11:23] <wroathe> media player controls*
[00:11:53] <GreenJello> it's the monaco editor
[00:12:02] <wroathe> Ah. Shame on them.
[00:12:43] <Donitz> n> -0 === 0
[00:12:44] <jellobot> (okay) true
[00:13:14] <wroathe> GreenJello: Neat. I like the idea of abstracting away the size as a callback
[00:13:29] *** Joins: Poboy (~Poboy@user/poboy)
[00:13:51] <Donitz> is it possible to get the binary representation of numberse in javascript in any way?
[00:13:54] <Donitz> just curious
[00:14:00] <Donitz> numbers*
[00:14:41] *** Joins: l__q (~modinfo@dynamic-002-247-253-068.2.247.pool.telefonica.de)
[00:14:50] <farn> n> Object.is(-0, 0)
[00:14:51] <jellobot> (okay) false
[00:14:55] <farn> (in case that's relevant to your question)
[00:15:03] <Donitz> n> Object.is(0, 0)
[00:15:04] <jellobot> (okay) true
[00:15:06] <Donitz> hah
[00:15:20] <Donitz> there have been times when I would have used for the actual values
[00:15:32] <Donitz> I mean, actual binary data, mantissa etc.
[00:15:32] *** Quits: junktext (~junktext@109.201.152.167) (Ping timeout: 245 seconds)
[00:16:52] <han-solo> (num >>> 0).toString(2) // seems so cool
[00:18:01] <han-solo> wait
[00:18:13] *** Joins: summersault (~summersau@179.221.251.16)
[00:18:18] <han-solo> you don't need that, just num.toString(radix) // seems to do it
[00:18:52] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[00:19:06] <han-solo> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString#parameters
[00:19:07] <GreenJello> it's different for negative numbers, or numbers >2^32
[00:19:18] <GreenJello> or non-integer numbers
[00:19:36] <GreenJello> >=2^32*
[00:20:20] <han-solo> oh, that's a shame
[00:20:25] <farn> Donitz: https://stackoverflow.com/a/17156580
[00:21:20] *** Joins: zacts (~zacts@user/zacts)
[00:22:28] <wroathe> Donitz: han-solo: That's different than the representation though. That's just converting the represented value to base 2. The binary representation would be a 64 bit IEEE-754 floating point representation
[00:22:39] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[00:23:08] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:b8ff:dfa4:4e98:96af) (Quit: Textual IRC Client: www.textualapp.com)
[00:23:13] <Donitz> would it be though, or would it be some kind of custom format based on implementation?
[00:23:35] <Donitz> I mean, it's not like js numbers are 100% typical
[00:24:14] <wroathe> Donitz: No, the standard says it's an IEEE-754 number
[00:24:37] <wroathe> Donitz: So it's guaranteed to be represented as such in all conforming JS implementations
[00:25:03] <wroathe> https://tc39.es/ecma262/#sec-terms-and-definitions-number-value
[00:28:55] *** Joins: Guest9 (~Guest9@103.240.169.29)
[00:35:39] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[00:36:19] *** Joins: N4buc0 (~N4buc0@2001:1284:f013:305b:93f9:5c18:6642:4482)
[00:38:48] *** Joins: N4buc0- (~N4buc0@2001:1284:f013:305b:71d2:34a1:44af:7617)
[00:41:18] *** Quits: N4buc0 (~N4buc0@2001:1284:f013:305b:93f9:5c18:6642:4482) (Ping timeout: 272 seconds)
[00:43:43] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[00:45:15] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.1)
[00:45:32] *** Joins: anddam (~anddam@user/anddam)
[00:48:22] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[00:52:31] *** Parts: ciphrCat (~ciphrCat@user/ciphrcat) ()
[00:53:05] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[00:54:00] *** Joins: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net)
[00:55:12] *** Quits: l__q (~modinfo@dynamic-002-247-253-068.2.247.pool.telefonica.de) (Quit: slow internet connection)
[00:57:59] *** Quits: nuncanada (~dude@179.235.162.215) (Read error: Connection reset by peer)
[01:00:42] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[01:01:10] *** Joins: cbleslie5 (~cbleslie@47.148.37.14)
[01:01:21] *** Joins: Celeo (~Celeo@user/celeo)
[01:01:43] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[01:01:49] *** Quits: cbleslie5 (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[01:01:55] *** Quits: cbleslie (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[01:02:13] *** Joins: cbleslie (~cbleslie@47.148.37.14)
[01:02:23] *** Quits: Northwoodss (~Northwood@223.130.30.69) (Quit: Leaving)
[01:05:12] *** Joins: dudek (~dudek@185.150.236.155)
[01:06:40] <dudek> Hi. Anyone familiar with Plotly JS library? I'm wondering if it's possible to insert multiple plots into one div? For what I can see from the documentation, it will overwrite existing plot in the div :/
[01:06:57] <Donitz> nope, have only used flot
[01:07:09] <Donitz> I thought the other libraries like plotly and highcharts were way bloated
[01:07:15] <dudek> I'm trying to have a user interface that would allow to create multiple plots but not sure if that would work
[01:07:45] <Donitz> what kind of chart?
[01:07:48] <Donitz> line, pie, column
[01:07:51] <Donitz> scatter
[01:08:10] <dudek> line
[01:08:29] <Donitz> how many plots?
[01:08:42] <Donitz> or, how many axes
[01:09:02] <dudek> from 1 to infinity ;-), Depeneds on what user wants.
[01:09:11] <Donitz> https://www.flotcharts.org/flot/examples/axes-multiple/index.html
[01:09:12] <Donitz> like this
[01:09:15] <Donitz> I am not recommending flot
[01:09:18] *** Joins: nuncanada (~dude@179.235.162.215)
[01:09:19] <Donitz> I am using it as an axmple
[01:09:21] <Donitz> example*
[01:09:39] <Donitz> or do you want multiple seperate graphs
[01:09:49] <Donitz> in which case, you just need to create more graphs side by side
[01:09:52] <Donitz> whichever lib you use
[01:10:47] <Donitz> oh yeah
[01:10:47] <Donitz> d3
[01:10:51] <dudek> Yeah thats what I would want, for each generation (clicking a button) for it to create a new graph. Now I'm a big n00b in JS, I'm not sure if I can create a new div on the fly (because from what I understand, it will overwrite the one I have)
[01:10:54] <Donitz> that was the lib which I thought was stupidly bloated
[01:11:01] <Donitz> I ended up using chart.js the last time
[01:11:11] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[01:11:33] <Donitz> usually with these libs, you just give the chart a parent container
[01:11:40] *** Quits: nuncanada (~dude@179.235.162.215) (Client Quit)
[01:11:41] <Donitz> so you just create a new div with a chart in js
[01:11:56] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[01:11:58] <Donitz> you can give the div a size and float attribute in css
[01:12:03] <Donitz> so they automatically stack nicely
[01:12:12] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[01:13:20] <Donitz> https://codepen.io/venturads/pen/OyNejq
[01:13:23] *** Joins: wroathe (~wroathe@96-88-30-181-static.hfc.comcastbusiness.net)
[01:14:04] <Donitz> they put all the code in the html tab
[01:14:05] <Donitz> good job
[01:15:32] <dudek> Looks like plotly is overwriting the plot in the div :/
[01:16:02] <dudek> Is it possible to create a div in JS script, before I call the function to create a plot and then pass it in the function?
[01:16:10] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 240 seconds)
[01:16:43] <dudek> Ok I think I found a way on SO, let me see if this will work
[01:17:12] <Donitz> document.createElement('div');
[01:17:22] <Donitz> parentContainer.appendChild(newDiv);
[01:17:50] <Donitz> or document.querySelector('.parentClass').appendChild(newDiv);
[01:20:17] *** Quits: cbleslie (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[01:21:35] *** Joins: cbleslie (~cbleslie@47.148.37.14)
[01:21:37] *** Joins: mearp (~mearp@154.13.1.91)
[01:21:39] <Poboy> Is it really this difficult to search through an associative array?
[01:21:46] <Poboy> .includes() don't do shit
[01:22:28] <dudek> Donitz, works like a charm. Thanks!
[01:22:32] *** Joins: Akimbas (~Akimb@78-58-31-17.static.zebra.lt)
[01:23:09] <GreenJello> Poboy, associative arrays aren't a thing in JS
[01:23:25] <Poboy> return this.contacts.filter((contact) => { return contact.includes(myVariable) })  is definitely not what I need
[01:24:43] <wroathe> Poboy: .find() ?
[01:25:53] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 265 seconds)
[01:26:13] <Poboy> All I can do is trust the internet.  "If you need to find if a value exists in an array, use Array.prototype.includes()."
[01:26:26] <Donitz> or indexOf(value) > -1
[01:26:39] *** Quits: Guest9 (~Guest9@103.240.169.29) (Quit: Connection closed)
[01:26:45] <farn> It sounds like you want to find something in an object though
[01:26:54] <Donitz> afaik, includes is newer
[01:26:58] <Donitz> so indexOf works on older browsers
[01:27:48] <wroathe> Poboy: .includes uses sameValueZero to determine equality, which may or may not be what you want
[01:28:46] <Donitz> what
[01:28:47] <Donitz> oh no
[01:29:30] <Poboy> @farn Yes, if any string (even 1 character!) within each array inside of my contacts array matches, then I want to keep it.
[01:30:20] <Donitz> oh
[01:30:30] <Donitz> same value zero vs === just has one difference
[01:30:31] <Poboy> probably some incarnation of .includes, .find, .some is what I need.  Not really sure, so I'm just hacking away until I figure it out
[01:30:37] <Donitz> in that nan supposedly compares differently
[01:30:57] <Donitz> n> sameValueZero
[01:30:58] <jellobot> (fail) ReferenceError: sameValueZero is not defined
[01:31:02] <Donitz> n> 1..sameValueZero
[01:31:03] <jellobot> (okay) undefined
[01:31:17] <GreenJello> it's an internal spec operation
[01:31:39] <Donitz> n> Object.is(nan, 0)
[01:31:40] <jellobot> (fail) ReferenceError: nan is not defined
[01:31:43] <GreenJello> but it's just === iirc
[01:31:43] <Donitz> n> Object.is(NaN, 0)
[01:31:44] <jellobot> (okay) false
[01:31:49] <Donitz> n> NaN === 0
[01:31:50] <jellobot> (okay) false
[01:31:52] <Poboy> Yeah, .includes is for strings and I am searching through arrays
[01:31:54] <Donitz> n> NaN === NaN
[01:31:55] <jellobot> (okay) false
[01:31:57] <Donitz> n> Object.is(NaN, NaN)
[01:31:57] <jellobot> (okay) true
[01:31:58] <Donitz> ah
[01:32:08] <farn> Poboy: includes is also for arrays
[01:32:15] <wroathe> n> const a = [3, 5, 7]; a.includes(5);
[01:32:16] <jellobot> (okay) true
[01:32:25] *** Quits: Intelo (~Intelo@88.246.74.102) (Ping timeout: 246 seconds)
[01:32:33] <Donitz> n> const a = [0, NaN, 0].indexOf(NaN);
[01:32:34] <jellobot> (okay) undefined
[01:32:37] <Donitz> n> const a = [0, NaN, 0].includes(NaN);
[01:32:38] <jellobot> (okay) undefined
[01:32:44] <wroathe> n> const x = {}; const a = [{}, x, {}]; a.includes(x);
[01:32:45] <jellobot> (okay) true
[01:32:46] <Donitz> ymm
[01:32:51] <Donitz> whups
[01:32:55] <Donitz> n> const a = [0, NaN, 0]; a.indexOf(NaN);
[01:32:56] <jellobot> (okay) -1
[01:32:56] <GreenJello> oh it's not ===
[01:33:00] <Donitz> n> const a = [0, NaN, 0]; a.includes(NaN);
[01:33:01] <jellobot> (okay) true
[01:33:20] <Donitz> that's fair
[01:33:23] <Donitz> I would expect it to return true
[01:33:30] <Donitz> NaN isn't some "magical" number
[01:33:40] <Poboy> so if they are not associative arrays, do you call arrays that contain arrays objects?  I dont' think that's right
[01:33:40] <GreenJello> n> Object.is(0, -0)
[01:33:41] <jellobot> (okay) false
[01:33:54] <Poboy> either way, I need to search through an array that has multiple arrays for a string
[01:33:56] <GreenJello> I don't think SameValueZero is actually exposed
[01:34:07] <Donitz> an array of arrays
[01:34:17] <Donitz> just search in a nested find
[01:34:37] <wroathe> Donitz: https://tc39.es/ecma262/#sec-samevaluezero
[01:34:47] <GreenJello> Poboy, it's not clear what your values are here
[01:34:49] <farn> Poboy: My guess was that this.contacts is an array of objects. If it's an array of arrays then your original code is at least close.
[01:34:57] <GreenJello> you haven't given an example of inputs
[01:35:11] <Donitz> n> const a = [["a", "b"], ["c", "d"], ["e", "f"]]; a.findIndex(b => b.includes("b"));
[01:35:12] <jellobot> (okay) 0
[01:35:15] <Donitz> n> const a = [["a", "b"], ["c", "d"], ["e", "f"]]; a.findIndex(b => b.includes("d"));
[01:35:16] <jellobot> (okay) 1
[01:35:39] <GreenJello> Poboy, if you don't know the terminology, then explaining with words isn't effective
[01:36:02] <Poboy> Yeah, after however many years I probably won't learn the terminology I suppose
[01:36:06] *** Quits: eXistenZ (~biskit@bzq-79-182-123-73.red.bezeqint.net) (Read error: Connection reset by peer)
[01:36:20] <Donitz> well, you said you wanted to search for something
[01:36:24] <Donitz> but you didn't say WHAT you wanted to find
[01:36:29] <Donitz> because you know the string you want to find
[01:36:32] <Donitz> so what do you want to get
[01:36:39] <wroathe> A pony
[01:36:44] <wroathe> And a firetruck
[01:37:06] <Donitz> maybe you want the entire array
[01:37:10] <Donitz> n> const a = [["a", "b"], ["c", "d"], ["e", "f"]]; a.find(b => b.includes("d"));
[01:37:10] <jellobot> (okay) [ 'c', 'd' ]
[01:37:11] <Donitz> there
[01:37:20] <Poboy> sure.  could be a pony, a firetrack
[01:37:36] <Poboy> it's a string that is located inside an array, that is located inside an array
[01:38:32] *** Quits: mearp (~mearp@154.13.1.91) (Quit: leaving)
[01:38:38] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[01:40:53] <farn> n> let contacts = [["foo", "bar"], ["bars"]]; let myVariable = "bar"; contacts.filter((contact) => { return contact.includes(myVariable) })
[01:40:54] <jellobot> (okay) [ [ 'foo', 'bar' ] ]
[01:42:33] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[01:42:39] <wroathe> n> const addTo = (possessions, item) => possessions.push(item); const poboysPossessions = []; addTo(poboysPossessions, 'pony'); console.log(poboysPossessions);
[01:42:39] <jellobot> (okay) [ 'pony' ]
[01:48:10] *** Joins: Intelo (~Intelo@88.246.74.102)
[01:48:23] <Poboy> contact.includes is not a function
[01:48:40] <farn> then contact is not an array
[01:49:00] <Poboy> object
[01:52:18] <Poboy> an array of objects I guess?  If it's contacts = [ { id:1, "email": ["yourmomgoestocollege@fubar.com"]}, { id:2, "email": ["thing1@thing2.com"]}]
[01:52:51] <wroathe> contact.email.includes('thing1@thing2.com')
[01:53:14] <Poboy> right, but that's not what I'm trying to do
[01:53:33] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[01:53:35] <Poboy> any portion of contact needs to include my variable
[01:53:51] <Poboy> could be in id or email or any of the other properties
[01:54:12] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[01:54:34] <wroathe> const x = ...; contact.id === x || contact.email.includes(x)
[01:55:22] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[01:56:10] <farn> "or any of the other properties"
[01:56:18] <farn> I'm guessing they also want to find just "fubar"
[01:56:29] <farn> basically a full-text search
[01:56:34] <farn> that's going to be more than a one-liner
[01:56:35] <Poboy> exactly farn
[01:57:06] <Poboy> could literally be the letter "m" then if any contact contains the letter m, keep that contact
[01:57:28] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[01:59:44] <farn> the one hacky one-liner I can think of is this.contacts.filter(contact => JSON.stringify(contact).includes(myVariable))
[02:00:07] <Poboy> ah
[02:01:22] <GreenJello> Object.values(contacts).some(value => typeof value === 'string' || Array.isArray(value) ? value.includes(myVariable) : false)
[02:01:30] <GreenJello> Object.values(contact)*
[02:01:46] <Poboy> @farn that was exactly what I needed to do
[02:01:48] <GreenJello> or similar
[02:02:02] <GreenJello> Poboy, wouldn't recommend JSON.stringify here
[02:02:02] <farn> GreenJello: it needs to find substrings
[02:02:12] <Poboy> Thanks, and my apologies for being dumb, but if I don't 'get it' by now, I probably never will, lol
[02:02:21] <farn> Poboy: it's seriously hacky, there are several issues with it
[02:02:29] <GreenJello> Object.values(contacts).flat().some(value => typeof value === 'string' ? value.includes(myVariable) : false)
[02:02:41] <Poboy> @farn what issues?
[02:02:51] *** Joins: wintersky (uid453465@id-453465.brockwell.irccloud.com)
[02:03:13] <farn> for one, it would also find the names of keys in your objects
[02:03:20] <GreenJello> with the JSON version, you'll also be matching on keys, and some things are escaped by JSON.stringify, so e.g. a " or \n won't match correctly
[02:03:44] <Poboy> true
[02:03:52] <farn> GreenJello's last suggestion might do the trick
[02:05:01] <farn> assuming there aren't other types of values in these objects that you haven't told us about
[02:05:14] <farn> that you also want to search in
[02:09:33] <wroathe> Untested, but I'd maybe do something like: https://gist.github.com/JustinChristensen/9e543e77cc38ab7e456b373dee1b4d08
[02:09:36] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[02:10:08] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:10:25] <wroathe> Oops
[02:10:35] <wroathe> x === o, not x === 0 :P
[02:11:34] <farn> we need substring matches
[02:11:50] <farn> your isObject rejects { id: 1 }
[02:12:09] <Poboy> Thanks everyone, and please forgive my ineptitude
[02:12:56] <wroathe> Errr, whoops
[02:13:47] <wroathe> farn: There. Updated. I'm too lazy to look up a robust definition of that function :P
[02:14:07] *** Joins: jcig (~jcig@2607:fb90:8299:6d28:fd6e:78b3:8b49:a5f4)
[02:15:54] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[02:20:16] *** Quits: strive (~strive@user/strive) (Quit: WeeChat 3.2)
[02:30:02] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:21] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[02:30:29] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:31:03] *** Quits: Intelo (~Intelo@88.246.74.102) (Quit: Client closed)
[02:34:02] *** Quits: sillyslux__ (~silly@user/silly) (Ping timeout: 272 seconds)
[02:34:31] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[02:35:54] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[02:37:08] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:39:06] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[02:42:19] *** Joins: silly (~silly@user/silly)
[02:43:43] *** Quits: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[02:45:09] *** Joins: jess (~jess@libera/staff/jess)
[02:47:59] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[02:50:55] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[02:53:24] *** Joins: jazzy (~jaziz@2600:380:c145:1176:2597:c2d0:40d3:bffe)
[02:55:24] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 258 seconds)
[02:58:32] <deltab> typeof value === 'string' ? value.includes(myVariable) : false   can be written as   typeof value === 'string' && value.includes(myVariable)
[03:02:19] <GreenJello> 👍
[03:04:59] *** Quits: silly (~silly@user/silly) (Ping timeout: 258 seconds)
[03:06:00] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[03:07:47] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[03:10:06] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 256 seconds)
[03:12:02] *** Quits: wroathe (~wroathe@96-88-30-181-static.hfc.comcastbusiness.net) (Ping timeout: 272 seconds)
[03:12:20] *** Joins: thiras (~thiras@user/thiras)
[03:16:34] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[03:18:01] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 250 seconds)
[03:23:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:25:13] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[03:25:37] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[03:26:46] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[03:27:26] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[03:37:42] *** Quits: Poboy (~Poboy@user/poboy) (Quit: Client closed)
[03:42:47] *** Quits: dudek (~dudek@185.150.236.155) (Quit: Leaving)
[03:46:31] *** Joins: eleutheria (~el@user/eleutheria)
[03:46:52] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:85c9:8156:1a0a:3c1c) (Ping timeout: 272 seconds)
[03:51:34] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Quit: Lost terminal)
[03:53:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:00:38] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Quit: Lost terminal)
[04:02:04] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[04:04:34] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:10:32] *** Quits: haniaF_ (~haniaF@83.24.40.67.ipv4.supernova.orange.pl) (Ping timeout: 258 seconds)
[04:15:22] *** Quits: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net) (Ping timeout: 272 seconds)
[04:16:51] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:23:57] *** Joins: bongobrown (~omary@cpe-76-185-215-2.satx.res.rr.com)
[04:25:10] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[04:25:52] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[04:27:09] <eleutheria> close
[04:27:13] *** Parts: eleutheria (~el@user/eleutheria) (WeeChat 3.2)
[04:28:35] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[04:29:57] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 250 seconds)
[04:30:02] *** Quits: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f) (Quit: Oops)
[04:30:44] *** Joins: friend (friend@c-73-43-171-169.hsd1.ga.comcast.net)
[04:31:02] *** Joins: zopsi (~zopsi@irc.dir.ac)
[04:31:36] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[04:34:11] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Quit: Atum_)
[04:34:31] *** Joins: MaXxer01 (~MaXxer0@i5E86B25C.versanet.de)
[04:34:42] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[04:34:42] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Client Quit)
[04:35:30] *** Quits: MaXxer0 (~MaXxer0@mue-88-130-53-249.dsl.tropolys.de) (Ping timeout: 240 seconds)
[04:44:42] *** Quits: bongobrown (~omary@cpe-76-185-215-2.satx.res.rr.com) (Ping timeout: 240 seconds)
[04:46:32] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[05:01:00] *** Joins: silly (~silly@user/silly)
[05:13:37] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[05:31:57] *** Joins: MaXxer0 (~MaXxer0@mue-88-130-53-097.dsl.tropolys.de)
[05:32:23] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 265 seconds)
[05:32:38] *** Quits: MaXxer01 (~MaXxer0@i5E86B25C.versanet.de) (Ping timeout: 272 seconds)
[05:32:58] *** Joins: keypusher (keypusher@user/keypusher)
[05:37:38] *** Quits: tabakhase (tabakhase@user/tabakhase) (Quit: ZNC - http://znc.in)
[05:43:40] *** Joins: tabakhase (tabakhase@user/tabakhase)
[05:47:29] *** Joins: kmh_ (~kmh@p200300df5f413a00506705faab94af6a.dip0.t-ipconnect.de)
[05:49:06] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[05:49:44] *** Quits: kmh (~kmh@p200300df5f2fd50048f006e6baaf7fa7.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[05:57:08] *** Joins: summersault (~summersau@179.221.251.16)
[06:01:08] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[06:05:08] *** Joins: summersault (~summersau@179.221.251.16)
[06:07:51] *** Joins: zacts (~zacts@user/zacts)
[06:14:38] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[06:15:32] *** Joins: zacts (~zacts@user/zacts)
[06:18:51] *** Joins: zacts47 (~zacts@user/zacts)
[06:20:31] *** Quits: zacts (~zacts@user/zacts) (Killed (NickServ (GHOST command used by zacts47)))
[06:20:42] *** zacts47 is now known as zacts
[06:22:39] *** Quits: Bombo (atom@user/bombo) (Ping timeout: 265 seconds)
[06:23:55] *** Joins: Bombo (atom@p2e58e190.dip0.t-ipconnect.de)
[06:23:56] *** Quits: Bombo (atom@p2e58e190.dip0.t-ipconnect.de) (Changing host)
[06:23:56] *** Joins: Bombo (atom@user/bombo)
[06:24:34] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 272 seconds)
[06:24:41] *** Joins: blahboybaz (~blahboyba@c-67-183-225-44.hsd1.wa.comcast.net)
[06:28:43] *** Joins: optimant (~prime@user/optimant)
[06:31:09] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[06:31:56] *** Joins: zacts (~zacts@user/zacts)
[06:32:56] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[06:33:23] *** Parts: zacts (~zacts@user/zacts) ()
[06:36:10] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[06:38:18] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 240 seconds)
[06:38:32] *** Joins: thiras_ (~thiras@user/thiras)
[06:39:16] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[06:40:24] *** Joins: keypushe- (keypusher@user/keypusher)
[06:40:25] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 258 seconds)
[06:41:40] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 272 seconds)
[06:43:15] *** keypushe- is now known as keypusher
[06:43:56] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[06:45:07] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[06:56:10] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[07:14:35] *** Joins: momus (uid511116@id-511116.brockwell.irccloud.com)
[07:16:30] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[07:21:08] *** Quits: Lyn (~Lyn@user/law) (Ping timeout: 265 seconds)
[07:27:08] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:33:06] *** Quits: IceMichael (~IceMichae@dynamic-046-114-152-144.46.114.pool.telefonica.de) (Ping timeout: 240 seconds)
[07:33:21] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[07:36:46] *** Quits: Naan (~naan@user/naan) (Ping timeout: 272 seconds)
[07:38:43] *** Joins: IceMichael (~IceMichae@dynamic-046-114-156-063.46.114.pool.telefonica.de)
[07:39:28] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[07:49:05] *** Quits: thiras_ (~thiras@user/thiras) (Remote host closed the connection)
[07:50:57] *** Quits: IceMichael (~IceMichae@dynamic-046-114-156-063.46.114.pool.telefonica.de) (Ping timeout: 258 seconds)
[07:53:24] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[07:53:39] *** Joins: IceMichael (~IceMichae@dynamic-046-114-156-063.46.114.pool.telefonica.de)
[08:04:25] *** Joins: matsaman (~matsaman@user/matsaman)
[08:07:22] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[08:15:22] *** Joins: yaalon (~yaalon@40.sub-174-195-195.myvzw.com)
[08:17:05] *** Joins: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com)
[08:17:13] *** Quits: yaalon (~yaalon@40.sub-174-195-195.myvzw.com) (Remote host closed the connection)
[08:26:25] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[08:29:37] *** Joins: Guest9 (~Guest9@43.250.157.202)
[08:29:58] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[08:31:00] *** Quits: realies (~realies@user/realies) (Quit: ~)
[08:35:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 250 seconds)
[08:38:01] *** Joins: realies (~realies@user/realies)
[08:39:53] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[08:40:25] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[08:43:16] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[08:43:44] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[08:44:41] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[08:46:00] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[08:46:38] *** Joins: jmcantre2 (~weechat@user/jmcantrell)
[08:46:40] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[08:47:10] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[08:47:17] *** Joins: Celeo (~Celeo@user/celeo)
[08:49:36] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[08:49:56] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[08:50:52] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[08:53:03] *** Quits: jmcantre2 (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[08:55:55] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:56:28] *** Joins: smuxki (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b)
[08:59:13] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[09:00:47] *** Joins: ferdna (~ferdna@user/ferdna)
[09:01:30] *** Quits: matsaman (~matsaman@user/matsaman) (Ping timeout: 240 seconds)
[09:03:11] *** Joins: matsaman (~matsaman@user/matsaman)
[09:05:26] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[09:05:46] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[09:07:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:08:34] *** Quits: Akimbas (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 240 seconds)
[09:08:36] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[09:09:49] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[09:12:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[09:14:56] *** Quits: doji (~doji@user/doji) (Ping timeout: 272 seconds)
[09:16:12] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[09:17:27] *** Joins: codebam (~codebam@user/codebam)
[09:18:00] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[09:21:03] *** Joins: thekingofbandit (tkob@user/thekingofbandit)
[09:21:16] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 256 seconds)
[09:23:30] *** Quits: smuxki (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b) (Ping timeout: 240 seconds)
[09:24:33] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[09:25:26] *** Quits: Celeo (~Celeo@user/celeo) (Read error: Connection reset by peer)
[09:27:38] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[09:28:14] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[09:30:08] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[09:31:10] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[09:31:28] *** Joins: mattil (~mattilinn@84-253-253-42.bb.dnainternet.fi)
[09:32:36] *** Quits: mattil (~mattilinn@84-253-253-42.bb.dnainternet.fi) (Remote host closed the connection)
[09:32:38] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[09:33:08] *** Joins: mattil (~mattilinn@84-253-253-42.bb.dnainternet.fi)
[09:33:31] *** Joins: jmcantre2 (~weechat@user/jmcantrell)
[09:34:04] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[09:34:47] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[09:36:28] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[09:37:08] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[09:37:31] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[09:38:03] *** Quits: EgonX (~EgonX@2601:2c6:47f:8884:bd1d:aac:1edc:b180) (Ping timeout: 250 seconds)
[09:38:29] *** Quits: jmcantre2 (~weechat@user/jmcantrell) (Ping timeout: 250 seconds)
[09:41:14] *** Joins: EgonX (~EgonX@2001:558:6022:6d:6459:b2e5:afa3:9bdb)
[09:41:15] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[09:41:21] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[09:43:38] *** Quits: Jigsy` (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy)))
[09:43:44] *** Joins: Jigsy (~Jigsy@user/jigsy)
[09:48:57] *** Quits: Guest9 (~Guest9@43.250.157.202) (Quit: Connection closed)
[09:51:05] *** Quits: mattil (~mattilinn@84-253-253-42.bb.dnainternet.fi) (Remote host closed the connection)
[09:52:56] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[09:54:11] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[09:54:18] *** Quits: Drgonz0 (~Drgonz0@107-179-254-222.cpe.teksavvy.com) ()
[09:54:50] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[09:55:58] *** Joins: codebam (~codebam@user/codebam)
[10:12:34] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 240 seconds)
[10:16:51] *** Joins: BUSY (~BUSY@user/busy)
[10:19:07] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[10:23:50] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 265 seconds)
[10:35:01] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[10:38:46] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[10:39:48] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[10:40:04] *** Quits: g2anj (~v@221.142.186.101) (Quit: .)
[10:43:11] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[10:51:14] *** Joins: g2anj (~v@221.142.186.101)
[10:51:52] *** Joins: eXistenZ (~biskit@bzq-79-182-123-73.red.bezeqint.net)
[10:51:58] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[10:53:03] *** Quits: name_ (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 276 seconds)
[10:56:17] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[10:56:54] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[10:57:10] *** Joins: codebam (~codebam@user/codebam)
[10:59:21] *** Joins: straykitten (~straykitt@subs24-116-206-8-19.three.co.id)
[11:00:12] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 276 seconds)
[11:02:00] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[11:02:15] *** Quits: straykitten (~straykitt@subs24-116-206-8-19.three.co.id) (Client Quit)
[11:03:08] *** Joins: Akimbas (~Akimb@78-58-31-17.static.zebra.lt)
[11:06:06] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 256 seconds)
[11:09:16] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 265 seconds)
[11:10:26] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[11:10:45] *** Joins: codebam (~codebam@user/codebam)
[11:11:07] *** Quits: eXistenZ (~biskit@bzq-79-182-123-73.red.bezeqint.net) (Read error: Connection reset by peer)
[11:14:43] *** Joins: eXistenZ (~biskit@bzq-79-182-123-73.red.bezeqint.net)
[11:15:10] *** Joins: runvnc_ (~runvnc@177.239.161.20)
[11:15:16] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[11:21:47] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 258 seconds)
[11:23:14] *** Joins: codebam (~codebam@user/codebam)
[11:27:21] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[11:32:22] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[11:35:36] *** Joins: yaalon (~yaalon@2600:1012:b12b:cb46:d07f:5d39:b3c0:82c4)
[11:35:46] *** Joins: robyndrake (~robyndrak@user/robyndrake)
[11:37:57] *** Joins: runvnc (~runvnc@192.145.119.186)
[11:37:58] *** Quits: runvnc_ (~runvnc@177.239.161.20) (Write error: Connection reset by peer)
[11:39:14] *** Quits: IceMichael (~IceMichae@dynamic-046-114-156-063.46.114.pool.telefonica.de) (Ping timeout: 265 seconds)
[11:41:39] *** Quits: blahboybaz (~blahboyba@c-67-183-225-44.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[11:46:14] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:78ab:5131:c5c0:cd6c)
[11:46:40] *** Quits: Akimbas (~Akimb@78-58-31-17.static.zebra.lt) (Read error: Connection reset by peer)
[11:55:10] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[11:58:54] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:02:47] *** Joins: coc0nut (~coc0nut@128.90.139.163)
[12:06:23] *** Quits: eXistenZ (~biskit@bzq-79-182-123-73.red.bezeqint.net) (Quit: Leaving)
[12:11:36] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[12:14:48] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[12:15:13] *** Quits: runvnc (~runvnc@192.145.119.186) (Quit: Lost terminal)
[12:15:58] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[12:21:35] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[12:25:06] *** Quits: yaalon (~yaalon@2600:1012:b12b:cb46:d07f:5d39:b3c0:82c4) (Remote host closed the connection)
[12:26:34] *** Quits: doc (~doc@user/doc) (Ping timeout: 256 seconds)
[12:29:09] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[12:29:15] *** Joins: doc (~doc@user/doc)
[12:30:16] *** Joins: vysn (~vysn@user/vysn)
[12:32:14] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 256 seconds)
[12:32:37] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[12:32:54] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[12:34:03] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[12:37:18] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[12:37:22] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[12:38:11] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:40:08] *** Quits: ferdna (~ferdna@user/ferdna) (Ping timeout: 272 seconds)
[12:40:37] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[12:41:04] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:45:43] *** Joins: yaalon (~yaalon@2600:1012:b1b9:6c22:3d91:ba67:dd43:9f3f)
[12:46:18] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 240 seconds)
[12:48:03] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:48:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[12:51:29] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:53:03] *** Joins: ferdna (~ferdna@user/ferdna)
[12:56:34] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[13:03:36] *** Joins: eXistenZ (~biskit@bzq-79-182-123-73.red.bezeqint.net)
[13:04:00] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[13:05:41] *** Joins: mei (~mei@user/mei)
[13:09:37] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 265 seconds)
[13:14:24] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[13:15:30] *** Joins: entuland (~entuland@user/entuland)
[13:17:36] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[13:19:32] *** Joins: deltab (~deltab@95.154.230.49)
[13:25:59] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 258 seconds)
[13:28:12] *** Quits: yaalon (~yaalon@2600:1012:b1b9:6c22:3d91:ba67:dd43:9f3f) (Remote host closed the connection)
[13:28:22] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:6467:aa41:cd69:bd89)
[13:31:51] *** Joins: Lyn (~Lyn@user/law)
[13:33:23] *** Joins: Popzi_ (~Popzi@95.150.161.225)
[13:33:47] *** Quits: Popzi (~Popzi@95.150.161.253) (Ping timeout: 265 seconds)
[13:34:18] *** Quits: eXistenZ (~biskit@bzq-79-182-123-73.red.bezeqint.net) (Quit: Leaving)
[13:34:59] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[13:35:14] *** Quits: azizLIGHT (~azizLIGHT@user/azizlight) (Ping timeout: 265 seconds)
[13:35:34] *** Joins: Guest9 (~Guest9@43.250.157.202)
[13:36:18] *** Joins: azizLIGHT (~azizLIGHT@user/azizlight)
[13:38:25] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[13:38:25] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[13:38:51] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[13:41:06] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 240 seconds)
[13:42:41] *** Joins: Noustropos (~Noustropo@91.221.89.43)
[13:43:07] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[13:45:23] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[13:46:18] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[13:47:41] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[13:48:31] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 250 seconds)
[13:50:59] *** Joins: coc0nut_ (~coc0nut@128.90.138.207)
[13:51:11] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[13:53:34] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[13:54:14] *** Quits: coc0nut (~coc0nut@128.90.139.163) (Ping timeout: 272 seconds)
[13:54:41] *** coc0nut_ is now known as coc0nut
[13:56:35] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[14:06:17] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (Ping timeout: 250 seconds)
[14:16:59] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[14:16:59] *** Quits: Noustropos (~Noustropo@91.221.89.43) (Read error: Connection reset by peer)
[14:18:04] *** Joins: Noustropos (~Noustropo@91.221.89.43)
[14:19:30] *** Quits: deltab (~deltab@95.154.230.49) (Changing host)
[14:19:30] *** Joins: deltab (~deltab@user/deltab)
[14:20:42] *** Quits: keypusher (keypusher@user/keypusher) (Remote host closed the connection)
[14:21:29] *** Joins: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net)
[14:24:29] *** Joins: keypusher (keypusher@user/keypusher)
[14:33:18] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:46:28] *** Joins: Heraes (~Heraes@119.12.203.77.rev.sfr.net)
[14:46:28] *** Quits: Heraes (~Heraes@119.12.203.77.rev.sfr.net) (Changing host)
[14:46:28] *** Joins: Heraes (~Heraes@user/romarain)
[14:46:57] *** Joins: fweht (uid404746@id-404746.tooting.irccloud.com)
[14:51:28] *** Quits: Heraes (~Heraes@user/romarain) (Quit: Leaving)
[14:52:41] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[14:57:03] <hassoon> 'morning
[15:27:27] *** Quits: Guest9 (~Guest9@43.250.157.202) (Quit: Connection closed)
[15:38:28] <theskillwithin> 👋
[15:48:23] <robyndrake> o/
[15:50:40] *** Joins: pulse (~pulse@user/pulse)
[15:58:02] *** Joins: haniaF (~haniaF@83.24.40.67.ipv4.supernova.orange.pl)
[16:01:54] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 256 seconds)
[16:05:54] *** Joins: thiras (~thiras@user/thiras)
[16:05:58] *** Quits: Brianmancer (~Neuromanc@user/briandamag) (Ping timeout: 272 seconds)
[16:13:49] *** Joins: silly_ (~silly@user/silly)
[16:14:39] *** Joins: sillyslux__ (~silly@user/silly)
[16:18:00] *** Quits: silly (~silly@user/silly) (Ping timeout: 272 seconds)
[16:18:47] *** Joins: Mattia_98 (~Mattia_98@host-213-45-162-248.retail.telecomitalia.it)
[16:19:16] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 272 seconds)
[16:33:58] *** Joins: mearp (~mearp@154.13.1.91)
[16:38:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:45:41] *** Joins: masber (~masber@178.197.197.167)
[16:46:51] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.2)
[16:47:27] *** Joins: anddam (~anddam@user/anddam)
[16:48:46] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[16:49:42] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[17:00:46] *** Joins: andikadinata (~andikadin@116.206.42.105)
[17:06:03] *** Quits: andikadinata (~andikadin@116.206.42.105) (Quit: The Lounge - https://thelounge.chat)
[17:09:54] *** Joins: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[17:13:06] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 272 seconds)
[17:22:13] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[17:22:42] *** Joins: andika (~andika@116.206.42.105)
[17:24:02] *** Joins: andika9 (~andika@116.206.42.84)
[17:24:41] *** Quits: andika (~andika@116.206.42.105) (Read error: Connection reset by peer)
[17:24:41] *** andika9 is now known as andika
[17:26:00] *** Quits: andika (~andika@116.206.42.84) (Client Quit)
[17:26:24] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[17:26:36] *** Joins: andika (~andika@116.206.42.84)
[17:29:06] *** Quits: andika (~andika@116.206.42.84) (Client Quit)
[17:29:44] *** Joins: andika (~andika@116.206.42.84)
[17:31:39] *** Quits: andika (~andika@116.206.42.84) (Client Quit)
[17:32:14] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Read error: Connection reset by peer)
[17:33:31] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 265 seconds)
[17:39:23] *** Joins: matthewr (~matthewr@102.132.241.206)
[17:40:18] *** Quits: jazzy (~jaziz@2600:380:c145:1176:2597:c2d0:40d3:bffe) (Ping timeout: 240 seconds)
[17:41:10] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Quit: Leaving)
[17:41:26] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[17:42:16] *** Joins: Guest28 (~Guest28@188.112.157.133)
[17:42:18] *** Joins: lawr3nce (~lawr3nce@5.170.228.233)
[17:45:30] *** Quits: lawr3nce (~lawr3nce@5.170.228.233) (Client Quit)
[17:46:40] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:47:49] *** Joins: Poboy (~Poboy@user/poboy)
[17:48:57] *** Quits: matthewr (~matthewr@102.132.241.206) (Quit: Leaving)
[17:50:18] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[17:57:11] *** Joins: lawr3nce (~lawr3nce@gateway/tor-sasl/lawr3nce)
[17:57:18] <lawr3nce> how do jwt work?
[17:58:30] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[17:58:47] *** Joins: thiras (~thiras@user/thiras)
[17:59:44] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:00:13] <theskillwithin> jtw.io
[18:00:30] <theskillwithin> jwt.io
[18:02:56] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:03:26] <lawr3nce> theskillwithin, I'll do a more specific question. this is an unsigned JWT: {"typ":"JWT","alg":"RS256","kid":"http://localhost:7070/privKey.key"} ...
[18:03:53] <lawr3nce> ... I can inject another value on the `kid` parameter, so I can set an URL I want (hosting my private key)
[18:04:26] <lawr3nce> the code that gets that url on the application is: privKey = RSA.import_key(requests.get(header['kid']).text.encode())
[18:04:33] <lawr3nce> is this a SSRF vulnerability?
[18:05:07] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[18:05:31] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[18:06:25] *** Joins: Mattia98 (~Mattia_98@host-213-45-162-248.pool21345.interbusiness.it)
[18:06:56] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[18:08:42] *** Quits: Mattia_98 (~Mattia_98@host-213-45-162-248.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[18:09:06] <optimant> Seems like a safe implementation wouldn’t blindly fetch from whatever URI provided by the token, whether it’s SSRF depends on more context than you’ve given. But it seems like a risky pattern to me.
[18:09:45] <lawr3nce> optimant: what do you need to know to understand if it's a SSRF?
[18:10:08] <lawr3nce> I was looking into jtw.io, linked from theskillwithin... and I couldn't really understand the mechanism
[18:10:20] <lawr3nce> I don't understand if the private key is fetched from the server or from my browser
[18:11:57] <optimant> it seems like an implementation decision.  a safe implementation might have a constrained list of sources to fetch from. or hand off to a worker in an unprivileged position to do the fetching. or a few other ideas
[18:14:08] <lawr3nce> optimant, I don't know, but you may be wrong. I think it's a standard JWT mechanism where it acts by letting server do a GET request to my custom URL and then return back the signed JWT (which will be transfered through my HTTP request later typically through Authorization HTTP header)
[18:14:46] <lawr3nce> I don't think it's an implementation decision, it's just how Json Web Tokens do work.
[18:14:57] *** Joins: jazzy (~jaziz@2600:380:c145:1176:2597:c2d0:40d3:bffe)
[18:16:42] <lawr3nce> is it possible for the server to sign the JWT (including the private key) without fetching the URL (and so leading it to Server Side Request Forgery)? maybe somehow where just the client will fetch the private key URL
[18:16:42] *** Quits: Guest28 (~Guest28@188.112.157.133) (Quit: Client closed)
[18:16:49] <Alexendoo> It's not a standard thing, https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.4
[18:17:11] <Alexendoo> kid is an arbitrary string, interpreting it as a URL would be an application decision
[18:18:42] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[18:18:59] <lawr3nce> Alexendoo, yes. but where will be that private key I was talking about be stored, in this case?
[18:19:38] *** Joins: hrth (~hrth@2a01:6f01:b602:d438:cc53:766b:18f3:f8dd)
[18:20:12] *** Joins: summersault2 (~summersau@2804:7f0:3886:c810:81aa:5e4d:9476:179f)
[18:21:25] *** Joins: McMattia_98 (~Mattia_98@151.82.198.139)
[18:21:56] <optimant> i could have a map that says https://localhost:1234/key.pem is fetched from /etc/keys/1234, or a database, etc. and providing a set of keys out of band of the JWT itself. in other words treat kid like a pointer not an instruction to do a specific fetch.
[18:22:14] *** Quits: fweht (uid404746@id-404746.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[18:22:21] <wroathe> lawr3nce: I don't know the full context of this conversation, but JWTs are typically cryptographically signed to prevent tampering
[18:22:39] <wroathe> lawr3nce: So modifying claims within won't be the most productive form of SSRF
[18:23:24] <wroathe> lawr3nce: But yes, you've understood the general idea. Any time you provide a URL as a parameter to the server you have the opportunity for SSRF
[18:23:47] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 265 seconds)
[18:24:33] <optimant> ^
[18:24:48] *** Quits: Mattia98 (~Mattia_98@host-213-45-162-248.pool21345.interbusiness.it) (Ping timeout: 276 seconds)
[18:25:22] <lawr3nce> optimant, I don't mean that. I'm asking if it's the server or me that makes a GET request to the `kid` value parameter (injected URL from me)... in the first case, that leads to SSRF. in the last case, it's not SSRF
[18:26:19] <Alexendoo> I would be wary of anything that 1) exposes private keys over the web 2) fetches some private key to use
[18:26:42] <lawr3nce> wroathe: could you elaborate the "So modifying claims within won't be the most productive form of SSRF" part?
[18:27:11] <wroathe> lawr3nce: Because tampering will be detected, and the token will be rejected by the token validator
[18:27:24] <wroathe> lawr3nce: The backend won't have an opportunity to do anything with the URLs you provide in claims
[18:28:25] <lawr3nce> yes, but in my case I can get the JWT signed (with my custom URL, my new hosted private key file). so it's SSRF?
[18:28:35] <lawr3nce> https://pastebin.com/YyFutzFq
[18:28:38] <lawr3nce> this is the code
[18:28:55] <wroathe> lawr3nce: It would need to be signed by _their_ private key, which won't be exposed to you
[18:29:01] <wroathe> lawr3nce: Creating your own private key and signing it won't work
[18:30:04] <wroathe> lawr3nce: (I'm assuming you're the hypothetical attacker in this situation, since you keep asking about SSRF)
[18:31:04] <lawr3nce> wroathe: https://cdn.hashnode.com/res/hashnode/image/upload/v1616225393075/v2TJSq1Hb.png?auto=compress,format&format=webp
[18:31:28] <lawr3nce> it would need to be signed by token validator public key
[18:31:29] *** Joins: Harlin (~DonQixote@2603:300b:663:e800:47ee:5b65:7103:9641)
[18:31:39] <optimant> so in this case kid seems like it is implemented wrongly
[18:32:06] <optimant> because the kid is to hint the server which of several pre agreed keys may be used to validate the signature
[18:32:48] <optimant> but in your paste the server is downloading the kid (!) and then trusting it to validate the payload itself (!!) AND set the admin_cap flag (!!!)
[18:33:04] <lawr3nce> optimant: that leads to SSRF?
[18:33:31] <optimant> SSRF sure on the request but more importantly it’s just trusting the cookie to set the admin_cap
[18:33:53] <optimant> Might as well save some cpu cycles and let the requestor send ?admin=1
[18:33:56] <wroathe> lawr3nce: "When tokens are signed using public/private key pairs, the signature also certifies that only the party holding the private key is the one that signed it."
[18:34:03] <wroathe> lawr3nce: https://jwt.io/introduction
[18:34:14] <Alexendoo> That assumes that you don't mess it up wroathe
[18:34:39] <wroathe> Alexendoo: Well, if you're messing this up you've got more than just SSRF as a problem on your hands
[18:34:43] <optimant> This implementation looks very messed up, assuming no validation done out of scope of the paste (unlikely)
[18:34:47] *** Parts: no_gravity (~no_gravit@user/no-gravity/x-5639427) ()
[18:35:14] <Alexendoo> wroathe: Yeah, I would say that paste does have more problems than that
[18:35:45] <wroathe> Alexendoo: Dunno. I haven't looked at the pastes :P Just hoping that my architectural explanations will turn on some lightbulbs, and trying to drink my coffee :P
[18:35:54] <Alexendoo> Whoever is keeping count for JWT inspired vulnerabilities can add one to their tally, if they have enough room left for an extra mark
[18:37:23] <lawr3nce> optimant, ok. maybe there could have been a different implementation where the private key was downloaded from the client and not the server? and maybe without having SSRF?
[18:37:43] <wroathe> No. Do not share private keys.
[18:37:47] <optimant> lawr3nce: the paste has multiple problems including likely SSRF. it is an incorrect application of JWT and it’s not inherent to JWT that the kid claim be handled this way. may whomever’s code your reviewing be bestowed forgiveness and fix it all up forthwith
[18:37:48] <Alexendoo> Downloading a private key is inherently incorrect
[18:38:10] *** Quits: Poboy (~Poboy@user/poboy) (Quit: Client closed)
[18:38:33] <optimant> anyone who sends a cookie to this app can impersonate any user and say they’re an admin, absent other checks not depicted.
[18:40:37] <lawr3nce> wroathe: I didn't mean to share the private keys. I've crafted my own private key and I was asking if there was a way to not lead to a SSRF by fetching myself that `kid` value URL (to get my own private key) and then transfer it plain to the server (without letting it fetching the url) to sign it.
[18:41:32] <optimant> the server should not be getting fed private keys from the client
[18:42:34] <lawr3nce> optimant: why? what changes if I send, instead of the url via `kid` parameter, the content of that URL (the private key)?
[18:43:04] <optimant> the server still trusts the key being sent _with the cookie_ to validate the cookie payload
[18:43:19] <lawr3nce> optimant, yes... but that would solve SSRF?
[18:43:23] <lawr3nce> what I was trying to say?
[18:43:36] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[18:43:56] <Alexendoo> Trying to solve the SSRF here is like worrying about an insect bite next to a missing leg
[18:44:18] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 272 seconds)
[18:44:19] <optimant> Yep
[18:44:20] <lawr3nce> Alexendoo, I know. I was just trying to understand the mechanism behind it. I know it's not a priority
[18:44:42] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[18:44:45] <optimant> SSRF is any time you convince the server to do a network request you defined so yes. Technically correct.
[18:45:32] <optimant> None of this is a function of JWT spec. The implementation has the perception of trust reversed and is worthless as a matter of establishing authentication or authorization security.
[18:46:07] <optimant> Strongest possible words here that this is dangerously wrong code and does not do what it says that it does
[18:48:05] <optimant> You’ll pass the “no SSRF” finding on a pen test and your attacker will still get super admin.
[18:48:10] *** Quits: jcig (~jcig@2607:fb90:8299:6d28:fd6e:78b3:8b49:a5f4) (Quit: Leaving)
[18:48:26] <lawr3nce> optimant: ok thanks, I've understood many things now. so the application in this case uses its own private key to verify integrity of the token by taking for granted that a JWT verified through that key is valid. So you can make sure that the server uses a different key (SSRF as we educate the server to contact an external host) to validate the token, and also gives for granted that if this verification is successful then the token is
[18:48:27] <lawr3nce> valid, it just uses one pair of allowed keys.
[18:48:47] <lawr3nce> am I correct?
[18:50:16] <optimant> what I imagine the flow should be: 1. User authenticates with credentials. Gets a JWT signed by a private key known only to server. 2. User later presents JWT to server, no need to include a key or kid at all. 3. Server validates against its private key.
[18:50:49] *** Quits: lawr3nce (~lawr3nce@gateway/tor-sasl/lawr3nce) (Remote host closed the connection)
[18:51:01] *** Joins: lawr3nce (~lawr3nce@gateway/tor-sasl/lawr3nce)
[18:51:07] <optimant> the implementation should not retrieve the private key from the client because that’s the same as using no key at all.
[18:51:09] <lawr3nce> optimant, am I correct?
[18:51:38] <lawr3nce> I don't understand, what's exactly wrong of what I said?
[18:52:01] *** Joins: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[18:52:02] *** Quits: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Changing host)
[18:52:02] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[18:52:11] <optimant> lawr3nce: the server should not be retrieving a different key at any point
[18:52:26] <optimant> Or at least not one specified by the token
[18:53:19] *** Joins: zxtx (~zxtx@sunnythinking.org)
[18:53:25] <lawr3nce> optimant: did I say that in this case the server should be retrieving a different key at any point?
[18:53:49] <lawr3nce> maybe you've misinterpreted me
[18:54:14] <optimant> Yes I think I didn’t understand when you said the server would be educated to use a different key
[18:54:45] <lawr3nce> I meant the new injected URL (my custom private key)
[18:55:02] <optimant> There should be no URL retrieval in the implementation
[18:55:10] <lawr3nce> I know, but there is.
[18:55:32] <lawr3nce> more importantly, the application in this case uses its own private key to verify the integrity of the token by taking for granted that a JWT verified through that key is valid.
[18:55:34] <lawr3nce> right?
[18:55:44] <zxtx> Hey, I am trying to open-source a web-app I made that has a gigantic frontend part where I'm using lots of libraries. What's the current best practice to specifying those dependencies? Is webpack/babel/npx still alright?
[18:56:10] <optimant> Then I’m not sure what is the purpose of the extra key and kid
[18:56:33] <Alexendoo> The paste you sent contains no indication it has its own key
[18:56:39] <zxtx> Also as a followup question, if I patched some of the dependencies, what's the standard way to bundle those patches
[18:57:03] <lawr3nce> Alexendoo, wait... but then how does it sign the token?
[18:57:16] <lawr3nce> with the public key?
[18:57:32] *** Quits: Noustropos (~Noustropo@91.221.89.43) (Ping timeout: 272 seconds)
[18:57:48] *** Joins: Noustropos (~Noustropo@2a00:f41:28cc:5d8a:7388:676c:d6e2:8f9e)
[18:58:18] <Alexendoo> Then sure, if it's signing keys it will have its own keys, but it's not using it to verify
[18:58:26] <Alexendoo> signing tokens*
[19:00:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:00:26] <lawr3nce> Alexendoo: (from that paste) you meant that the fetched private key integrity is just unverified, and then server just uses public key to sign it?
[19:00:50] <optimant> lawr3nce: the paste does not depict the signing or verification steps you’re saying exist elsewhere
[19:00:58] <optimant> So unable to confirm either way
[19:01:22] *** Quits: saikub (saikub@saikub.thunderirc.net) (Ping timeout: 240 seconds)
[19:01:30] <optimant> It may or may not be verifying anything at all, if you can manipulate the payload without knowing the server’s private key then it’s not actually verifying.
[19:01:59] <optimant> At which point again the SSRF is a symptom of bad design and not merely a vulnerability
[19:02:41] *** Quits: birkoff (birkoff@user/birkoff) (Ping timeout: 250 seconds)
[19:02:47] <lawr3nce> optimant, ok. I understood that. but then does the server possibly use its own private (or public?) key to sign it?
[19:03:06] <optimant> As written or in a fixed design?
[19:03:13] <lawr3nce> as written
[19:03:19] *** Quits: hassoon (hassoon@user/hassoon) (Ping timeout: 258 seconds)
[19:03:19] <lawr3nce> and in a fixed design
[19:03:24] *** Joins: hmw[at] (~hmw@80-108-56-158.cable.dynamic.surfer.at)
[19:03:26] <lawr3nce> I just don't understand if the server uses a private or public key to sign it.
[19:03:35] <optimant> I don’t see any server verification or signing in the paste provided and if you can manipulate the URL then it’s not happening as written.
[19:03:45] <hmw[at]> My simple webcam program seems to eat up all my RAM. Why? https://paste.debian.net/1206240/
[19:04:10] *** Joins: IceMichael (~IceMichae@dynamic-046-114-156-063.46.114.pool.telefonica.de)
[19:04:14] <theskillwithin> putting access level in the token is clearly a mistake no one makes anymore
[19:04:32] <optimant> The correct design would be the server uses its private key to sign the JWT (preventing modification by the client) and then the server can verify that signature when it sees the token again
[19:04:51] <optimant> The client never needs to know the private key
[19:05:05] <optimant> (This is the aspect that makes the key “private”)
[19:05:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 258 seconds)
[19:05:30] <hmw[at]> It started when I switched from img.onload to fetch
[19:05:32] <optimant> theskillwithin: ikr
[19:05:48] <lawr3nce> optimant, in the paste (https://pastebin.com/YyFutzFq), if in this case the server doesn't use public key then what's the purpose of `pubKey = privKey.publickey().export_key()`?
[19:05:59] <lawr3nce> as you said, it's not something relevant to token signing.
[19:06:02] <lawr3nce> but then what?
[19:06:04] <optimant> That is bad coding and I can’t imagine the correct purpose.
[19:06:22] <Alexendoo> Private keys sign, public keys verify. You can derive the public key from a private one
[19:06:22] <optimant> Might as well skip the key steps at all if you let the client pick the key to verify the signature with.
[19:06:28] *** Quits: jazzy (~jaziz@2600:380:c145:1176:2597:c2d0:40d3:bffe) (Ping timeout: 272 seconds)
[19:07:26] <lawr3nce> Alexendoo, well then that piece of code I was talking about `pubKey = privKey.publickey().export_key()` is used to verify that private key.
[19:07:36] <cis> hmw[at]: you could add in some performance checks to see where it's struggling: https://developer.mozilla.org/en-US/docs/Web/API/Performance
[19:07:37] <optimant> Analogy: I give you a warrant that I say lets me search your home. The info from the court says call this number to confirm. You call that number and it’s my cell phone and I tell you it’s legit.
[19:07:49] <optimant> Do you let me search your home or do you look up the court yourself
[19:08:06] <Alexendoo> lawr3nce: no it doesn't do that
[19:08:07] <lawr3nce> that's not what optimant was trying to say tho.
[19:08:15] <hmw[at]> cis: There is only one fetch and a timeout
[19:08:18] <lawr3nce> Alexendoo, huh, then what?
[19:08:25] <cis> hmw[at]: one thing you probably don't have to do in the loop is call querySelector... you can assign those variables outside the loop
[19:08:30] <Alexendoo> That's not verifying the key, it's just getting the corresponding public key for that private key
[19:08:48] <optimant> it derives mathematically a public key from the clients provided private key
[19:08:53] <hmw[at]> cis: I did this before. I moved everything inside the loop to make sure nothing stays around
[19:09:04] <optimant> Which is no better than just trusting everything the client sent without keys at all
[19:09:12] <hmw[at]> After doing more web searches, it get the impression it might be a bug
[19:09:15] <hmw[at]> in Chrome
[19:09:42] <lawr3nce> Alexendoo, then it's just getting the public key and passing it into the `username` cookie?
[19:09:54] <hmw[at]> Hm. I hope there is img.onerror
[19:10:26] <cis> img.onerror does exist
[19:10:48] <Alexendoo> lawr3nce: I don't know what you mean by that, it uses that public key to "verify" authCookie, which as mentioned is the same as not verifying it at all
[19:11:33] <hmw[at]> ah fine. I'll just revert to img.onload and add img.onerror, so my camera thing stays running when a frame does not come back. Weird issue tho.
[19:11:44] <Alexendoo> There's no username cookie mentioned in that paste, username there is from the payload of the JWT
[19:12:18] <lawr3nce> Alexendoo, yes. sorry, I meant the username on the JWT payload
[19:12:45] <lawr3nce> could you explain why "it's not the same as not verifying it at all"?
[19:12:52] *** Joins: netameta (~netameta@2a00:a040:193:50fe:6509:3813:1fff:e44c)
[19:13:31] <Alexendoo> Since the key can be supplied by anyone, the verification is worthless
[19:13:33] <cis> hmw[at]: window.requestAnimationFrame instead of setTimeout might be good as well, since there's not much point updating the image between frames
[19:13:44] <hmw[at]> cis: right
[19:13:59] <hmw[at]> well. No timeout anymore now
[19:14:36] *** Quits: hrth (~hrth@2a01:6f01:b602:d438:cc53:766b:18f3:f8dd) (Quit: Client closed)
[19:14:52] *** Joins: doji (~doji@user/doji)
[19:15:01] <hmw[at]> I had it running with img.onload for weeks without issue and today I changed to fetch so I can continue on error. But it still looks like it's leaking
[19:15:13] <hmw[at]> Computers.
[19:15:29] <cis> who needs em?
[19:18:09] <hmw[at]> Also, that little program uses 300MB
[19:20:12] <cis> without fetch?
[19:20:50] <hmw[at]> It drops from 1750 (free) to about 1200 in a few seconds. Now it seems to stabilize in that region ("only" eating 2.5MB/s)
[19:21:18] <cis> must be GC trying to keep up with the stream of images
[19:21:30] <hmw[at]> *maybe* it starts GC when RAM gets even lower. Or I need an OS reboot
[19:22:03] <hmw[at]> Before my box started swapping heavily
[19:22:37] <hmw[at]> Lynx + libcaca maybe?
[19:35:38] *** Quits: masber (~masber@178.197.197.167) (Quit: Client closed)
[19:46:30] <lawr3nce> Alexendoo and optimant and wroathe and all others, thank you all for sharing your knowledge. I've understood now!
[19:47:58] *** Quits: lawr3nce (~lawr3nce@gateway/tor-sasl/lawr3nce) (Remote host closed the connection)
[19:50:42] <optimant> no problem, cheers and hope this gets sorted out
[19:55:54] *** Joins: ferdna (~ferdna@user/ferdna)
[19:58:59] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[19:59:01] *** Quits: Noustropos (~Noustropo@2a00:f41:28cc:5d8a:7388:676c:d6e2:8f9e) (Ping timeout: 250 seconds)
[19:59:11] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Client Quit)
[19:59:14] *** Joins: Noustropos (~Noustropo@91.221.89.43)
[20:00:04] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:47ee:5b65:7103:9641) (Quit: Leaving)
[20:00:11] *** Joins: hassoon (hassoon@grape.ircnow.org)
[20:00:18] *** Joins: Harlin (~DonQixote@2603:300b:663:e800:c509:49f3:687:e96a)
[20:02:08] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[20:04:23] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[20:04:47] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[20:05:22] *** Joins: Rockwood (~Rocky@user/rocky)
[20:09:10] *** Quits: IceMichael (~IceMichae@dynamic-046-114-156-063.46.114.pool.telefonica.de) (Ping timeout: 272 seconds)
[20:09:33] *** Joins: IceMichael (~IceMichae@dynamic-046-114-156-063.46.114.pool.telefonica.de)
[20:10:02] *** Joins: Drgonz0 (~Drgonz0@107-179-254-222.cpe.teksavvy.com)
[20:11:49] *** Joins: nomic2 (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[20:12:16] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Remote host closed the connection)
[20:12:52] *** nomic2 is now known as nomic
[20:14:39] *** Parts: zxtx (~zxtx@sunnythinking.org) (Leaving)
[20:17:49] *** Joins: codebam (~codebam@user/codebam)
[20:18:26] <theskillwithin> https://i.redd.it/guz3xj9cx7e71.jpg
[20:20:18] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 256 seconds)
[20:24:22] <paulcarroty> LOL
[20:24:33] <paulcarroty> typical google point of view
[20:24:50] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Ping timeout: 252 seconds)
[20:25:37] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[20:25:50] *** Joins: Rockwood (~Rocky@user/rocky)
[20:28:34] *** Joins: smuxki (~smuxki@186.222.60.158)
[20:31:38] *** Quits: hassoon (hassoon@grape.ircnow.org) (Changing host)
[20:31:38] *** Joins: hassoon (hassoon@user/hassoon)
[20:34:38] *** Quits: smuxki (~smuxki@186.222.60.158) (Quit: Leaving)
[20:34:59] *** Joins: smuxki (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b)
[20:35:58] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[20:39:55] <theskillwithin> its too late to complain,  were already fucked
[20:43:44] <Rockwood> theskillwithin, cheers
[20:47:36] <Rockwood> theskillwithin, i have created this http://jsfiddle.net/rL4qnjew/
[20:47:42] <Rockwood> hows looking?
[20:48:35] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[20:55:33] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:56:11] *** Joins: name_ (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[20:56:49] <wroathe> Did we get to the bottom of the earlier JWT mystery?
[20:59:25] *** Joins: qswz (~caub@91-175-196-225.subs.proxad.net)
[21:00:40] *** Joins: smuxki_ (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b)
[21:00:49] *** Quits: smuxki (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b) (Quit: Leaving)
[21:00:56] *** smuxki_ is now known as smuxki
[21:02:59] *** Joins: masber (~masber@178.197.197.167)
[21:03:10] *** Joins: Betal (~Beta@user/betal)
[21:03:18] <qswz> 38% remote workers work from bed
[21:03:41] <Rockwood> really
[21:03:53] <Rockwood> me too mostly
[21:03:55] <Rockwood> lol
[21:03:57] <GreenJello> that's unfortunate if true
[21:04:22] <theskillwithin> its not true
[21:04:49] <qswz> technically I sit on the floor, against a wall, and also sleep on the floor on a yoga mat, so it's like working from bed
[21:05:08] <wroathe> GreenJello: Why is that unfortunate?
[21:05:19] <wroathe> GreenJello: And follow up, where would be a fortunate place to work?
[21:05:32] <theskillwithin> qswz and also make up fake statistics
[21:05:45] <Rockwood> bathroom :D
[21:05:52] <GreenJello> wroathe, it's not good for you physically or mentally
[21:06:22] *** Joins: mattil (~mattilinn@87-92-237-144.rev.dnainternet.fi)
[21:06:24] <qswz> best position: https://www.reddit.com/r/pcmasterrace/comments/6ufrjb/the_infamous_lan_party_duct_tape_ceiling_guy_from/
[21:06:26] <Rockwood> on mobile dev work possible?
[21:06:27] <GreenJello> a desk or table in a proper chair would go a long way
[21:07:11] <wroathe> GreenJello: All things in moderation
[21:07:17] <GreenJello> and short periods of time elsewhere are also fine
[21:07:29] <qswz> actually I'm love to lie down on the floor, and have a support for my laptop to adjust upside down wher eit should
[21:07:35] <qswz> I'd love*
[21:07:35] *** Joins: birkoff (birkoff@birkoff.thunderirc.net)
[21:07:36] *** Quits: birkoff (birkoff@birkoff.thunderirc.net) (Changing host)
[21:07:36] *** Joins: birkoff (birkoff@user/birkoff)
[21:07:50] <wroathe> qswz: You're a couple of pieces of plywood from making your dream a reality.
[21:07:51] <Rockwood> i love bed
[21:07:55] <Rockwood> lol
[21:09:21] *** Quits: mattil (~mattilinn@87-92-237-144.rev.dnainternet.fi) (Remote host closed the connection)
[21:09:22] <qswz> do laptop appreciate to be upside down tho?
[21:09:27] <theskillwithin> oof well the nsa investigated you,  and just found a shit ton of porn
[21:09:48] *** Joins: mattil (~mattilinn@87-92-237-144.rev.dnainternet.fi)
[21:10:07] <cthulchu> my folks, is there a big difference whether I do assignment in ternary or outside? So like a = b?c:d or b?a=c:d
[21:10:22] <qswz> inside is nasty
[21:10:29] <cthulchu> it is...
[21:10:38] <qswz> yea really ugly
[21:10:55] <qswz> better to a = bool ? foo : bar
[21:11:07] *** Joins: pavonia (~user@user/siracusa)
[21:11:14] <cthulchu> thanks :)
[21:11:20] <wroathe> cthulchu: Well, in the latter case a doesn't get assigned a value in the false case
[21:11:23] <cthulchu> you develop my sense of beauty
[21:11:30] <qswz> uou expect expressions inside ternaties, no statements
[21:11:32] <cthulchu> yes, thought so wroathe
[21:11:32] <qswz> you*
[21:11:34] <wroathe> cthulchu: So those two things are semantically different
[21:19:58] <Rockwood> entuland, yes i am here as well as
[21:20:56] <entuland> http://jsfiddle.net/entuland/6v1nz5Lc/
[21:22:00] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:c509:49f3:687:e96a) (Quit: Leaving)
[21:22:01] <entuland> why did you change a perfectly valid direct comparison with that math.round thing?
[21:22:15] *** Joins: Harlin (~DonQixote@2603:300b:663:e800:c509:49f3:687:e96a)
[21:23:03] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[21:23:05] <entuland> http://jsfiddle.net/entuland/6v1nz5Lc/1/ no need to round that value there
[21:24:24] <entuland> in theory you should recompute also when the window is resized
[21:25:07] <entuland> cause there are cases when a fully scrolled bar may become not fully scrolled - probably overkill
[21:25:28] <hassoon> entuland: where did you get that http tag from when you copied the url ? https works but not http
[21:25:29] <entuland> but that's a consequence of these unnecessary buttons
[21:25:39] <hassoon> firefox could not even oad it for me
[21:25:46] <hassoon> until i changed http to https
[21:25:51] <hassoon> * load *
[21:25:54] <entuland> I may have copypasted the url wrong by mistake
[21:25:58] <entuland> no idea
[21:26:01] <entuland> let me check one thing
[21:26:10] <hassoon> you got a weird clipboard manager ?
[21:26:13] <entuland> ah yes, not my fault
[21:26:28] <entuland> I opened Rockwood's fiddle linked in #css that had no https
[21:26:36] <entuland> and when I saved it stayed http
[21:26:54] <hassoon> ya http cannot load for me in firefox
[21:27:03] <hassoon> page keeps loading forever
[21:27:09] <entuland> I'll try and pay attention to that next time
[21:27:19] <hassoon> na just telling
[21:27:21] <hassoon> no worries
[21:27:30] <entuland> that's good, thanks for the heads-up
[21:28:39] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[21:29:02] *** Joins: Intelo (~Intelo@88.246.74.102)
[21:29:15] *** Joins: LSD (~LSD@2.lsd.systems)
[21:29:32] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Quit: Atum_)
[21:31:13] *** Joins: Safa_[A_Boy] (~Safa@89.148.21.239)
[21:32:11] <Safa_[A_Boy]> Hi all. My development server is looping in a hot-reload cycle on Chrome. Things work fine on Firefox, but not in Firefox Developers Edition. Any ideas?
[21:32:39] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:c509:49f3:687:e96a) (Quit: Leaving)
[21:32:53] *** Joins: Harlin (~DonQixote@2603:300b:663:e800:c509:49f3:687:e96a)
[21:33:28] <hassoon> Safa_[A_Boy]: what server is that
[21:33:43] <hassoon> node/npm ? apache? what
[21:34:20] <Safa_[A_Boy]> npm, webpack5, sorry
[21:34:33] <Safa_[A_Boy]> And it was working just fine this morning.
[21:35:19] <Safa_[A_Boy]> (I'm gmt+3, it's 8PM)
[21:38:02] <theskillwithin> #css banned me cuz i kept trying to tell people with bootstrap questions how to do in pure css
[21:38:26] <hassoon> theskillwithin: you serious ?
[21:39:10] *** Joins: saikub (saikub@saikub.thunderirc.net)
[21:39:25] <theskillwithin> yep
[21:39:33] <Rockwood> really
[21:39:37] <Rockwood> amazing
[21:39:52] <theskillwithin> not on this network, but on the old one, u can prob still see my ban
[21:40:24] <theskillwithin> or wait nvm the old one was reset
[21:43:17] <hassoon> theskillwithin: forget about the old network
[21:43:33] <hassoon> theskillwithin: it's overtaken by evil people , no we exist in Libera
[21:44:02] <cis> seems like this network is much more active now
[21:44:28] *** Quits: mdemo (~mdemo@c-73-40-53-74.hsd1.wv.comcast.net) (Quit: The Lounge - https://thelounge.github.io)
[21:46:31] <Rockwood> anyway good night
[21:46:34] <Rockwood> cya
[21:46:36] <Rockwood> tc
[21:47:00] <Rockwood> entuland, \o ty cya
[21:47:11] <Rockwood> i am feeling to much tired
[21:47:25] <entuland> o/ have good rest Rockwood
[21:47:25] <Rockwood> all day hard work
[21:47:51] <Rockwood> at morning i will fit that code my react project
[21:48:03] <Rockwood> at morning i will fit that code in my react project
[21:50:13] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[21:51:56] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[21:52:22] <qswz> the the olympics.com site has such a bad UX and bugs with the header
[21:53:18] <theskillwithin> i still haven't seen a single olympic event this year
[21:55:16] <cthulchu> typeof is a function. it should always use parentheses for arguments. What's wrong with it?
[21:55:32] <wroathe> cthulchu: typeof is not a function
[21:55:35] <cthulchu> wow
[21:55:36] <wroathe> cthulchu: typeof is an operator
[21:55:38] <ljharb> cthulchu: it is absolutely not a function
[21:55:41] <cthulchu> ooooh
[21:55:50] <cthulchu> oh this is very interesting.
[21:55:50] <ljharb> cthulchu: and that confusion is precisely why you never ever use parens with it
[21:56:13] <cthulchu> ok, so I shouldn't use them either I guess. Cuz in this case parentheses only create a group
[21:56:21] <cthulchu> no harm tho
[21:56:48] <qswz> typeof is a russian vilain, Mickail typov
[21:56:54] <cthulchu> ahahahah
[21:57:25] <cthulchu> do we have more operators that have names like functions typically do?
[21:57:41] <qswz> throw
[21:57:47] <wroathe> delete
[21:57:58] <qswz> but there's a throw as function proposal
[21:58:05] <qswz> b> throw('ball')
[21:58:06] <cthulchu> delete is the one that removes a property from an object?
[21:58:06] <jellobot> (fail) ball
[21:58:13] <qswz> n> throw('ball')
[21:58:14] <jellobot> (fail) ball
[21:58:31] <wroathe> void, await
[21:58:46] <cthulchu> and what does void do?
[21:59:24] <qswz> nothing very usseful
[21:59:30] *** Quits: haniaF (~haniaF@83.24.40.67.ipv4.supernova.orange.pl) (Ping timeout: 240 seconds)
[21:59:35] <systemfault> Take a parameter and returns undefined... not sure why it was included in the language.
[21:59:37] <theskillwithin> it doesn't return
[22:00:38] <qswz> haha no idea
[22:01:05] <qswz> "let's make a useless operator", probably on a Apr 1st
[22:01:05] *** Joins: beencubed (~beencubed@209.131.238.248)
[22:01:24] <systemfault> I mean, back in the days... "undefined" was reassignable... and void was a way to get a real "undefined" back...
[22:02:14] <systemfault> That's why you had wrapped code similar to this: (function (window, undefined) { ....})(this, void 0)
[22:03:48] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 272 seconds)
[22:05:19] <wroathe> The good old days. Before all this newfangled hullabaloo.
[22:05:34] <cthulchu> and now void is only good for staring into it...
[22:05:39] <wroathe> We liked our oldfangled hullabaloo just fine.
[22:06:24] <qswz> n> void Infinity
[22:06:25] <jellobot> (okay) undefined
[22:07:31] <qswz> everytime I see "infinity" the guru josh project song starts in me
[22:07:39] *** Quits: McMattia_98 (~Mattia_98@151.82.198.139) (Read error: Connection reset by peer)
[22:07:41] <cthulchu> join guarantees the order?
[22:07:54] *** Joins: McMattia_98 (~Mattia_98@host-213-45-162-248.pool21345.interbusiness.it)
[22:08:13] <qswz> .join() ?
[22:08:15] <systemfault> join?
[22:08:16] <cthulchu> so like [1,2,3,4,5].join("+1=") is always fine
[22:08:20] *** Quits: unixcat64 (thelounge@envs.net) (Changing host)
[22:08:20] *** Joins: unixcat64 (thelounge@fedora/hyperreal)
[22:08:40] <systemfault> Well... that would suck if order wasn't respected...
[22:08:46] *** Joins: Albright (~Albright@149.28.13.173)
[22:08:48] <cthulchu> indeed
[22:08:50] <qswz> n> eval([1,2,3,4,5].join('+'))
[22:08:51] <jellobot> (okay) 15
[22:09:09] <systemfault> qswz: There ya go.... ghetto-sum function
[22:09:13] <qswz> n> eval(`+${[1,2,3,4,5].join('+')}`)
[22:09:14] <jellobot> (okay) 15
[22:09:20] <cthulchu> why do you have eval there?
[22:09:24] <qswz> n> eval([1,2,3,4,5].join('-'))
[22:09:25] <jellobot> (okay) -13
[22:09:32] <qswz> n> eval(`+${[1,2,3,4,5].join('-')}`)
[22:09:33] <jellobot> (okay) -13
[22:09:39] <qswz> hmm weird
[22:10:08] <qswz> cthulchu: indeed, not needed
[22:10:12] <cthulchu> oh, you're trying to make it do math
[22:10:18] <cthulchu> it is doing it :)
[22:11:34] <cthulchu> oh, it doesn't see it's a string. cuz from n perspective all we type is a string
[22:11:38] <cthulchu> this is very funny
[22:11:45] <cthulchu> damn, JS is so beautiful
[22:11:55] *** Joins: Mattia98 (~Mattia_98@host-213-45-162-248.pool21345.interbusiness.it)
[22:11:59] <qswz> do other programming languages have an eval?
[22:12:12] <cthulchu> all of JS level do, I believe
[22:13:12] <GreenJello> and the rest can embed scripting languages
[22:14:25] <systemfault> Most programming languages that are not AOT'ed have eval (AFAIK)
[22:14:46] *** Quits: McMattia_98 (~Mattia_98@host-213-45-162-248.pool21345.interbusiness.it) (Ping timeout: 256 seconds)
[22:15:02] <qswz> the non-compiled langs so
[22:15:08] *** Joins: Mattia_98 (~Mattia_98@151.46.15.192)
[22:16:01] <systemfault> Technically, there's nothing "forbidding" a AOT'ed language to have a compiler "service" that could be called to compile code on the fly at runtime...
[22:16:28] <systemfault> https://docs.microsoft.com/en-us/troubleshoot/dotnet/csharp/compile-code-using-compiler For example..
[22:17:08] <systemfault> But yeah... most languages having eval are non-compiled
[22:17:14] *** Quits: Mattia98 (~Mattia_98@host-213-45-162-248.pool21345.interbusiness.it) (Ping timeout: 265 seconds)
[22:17:25] *** Joins: Celeo (~Celeo@user/celeo)
[22:19:06] *** Quits: Drgonz0 (~Drgonz0@107-179-254-222.cpe.teksavvy.com) ()
[22:19:31] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[22:19:54] *** Quits: jess (~jess@libera/staff/jess) ()
[22:20:09] *** Joins: Drgonz0 (Drgonz0@107-179-254-222.cpe.teksavvy.com)
[22:24:28] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Read error: Connection reset by peer)
[22:24:54] *** Joins: c4ntelope (~cantelope@173-27-116-255.client.mchsi.com)
[22:24:56] *** Quits: cantelope (~cantelope@173-27-116-255.client.mchsi.com) (Read error: Connection reset by peer)
[22:25:38] *** Joins: pwnd_sfw6 (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[22:26:11] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[22:26:11] *** pwnd_sfw6 is now known as pwnd_sfw
[22:30:29] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[22:37:19] *** Joins: WishBoy (~WishBoy@user/wishboy)
[22:37:37] *** Quits: mattil (~mattilinn@87-92-237-144.rev.dnainternet.fi) (Read error: Connection reset by peer)
[22:39:49] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:6467:aa41:cd69:bd89) (Quit: Textual IRC Client: www.textualapp.com)
[22:44:41] <FightingFalcon> I have a weird problem. https://www.abnehmenclub.de/  please navigate here with mobile mode. Javascript code hides the header when you scroll down. just scroll down some and then click on hamburger menu. when you click it creates a scroll event and hides the header even though the nav. menu is opened
[22:48:43] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[22:49:37] <qswz> it's simple normally, just a bit of CSS
[22:50:31] <qswz> the header only appears if you scrroll up, not bad idea
[22:51:19] <qswz> but once you open the nav menu it's offset too high, it should just be position: fixed top: 0
[22:51:42] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[22:54:06] *** Joins: Ducki_ (~ducki@user/ducki)
[22:54:48] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[22:54:52] *** Joins: Guest9 (~Guest9@43.250.157.202)
[22:55:04] <FightingFalcon> wow thanks
[22:55:06] *** Quits: Ducki (~ducki@user/ducki) (Ping timeout: 252 seconds)
[22:56:32] *** Joins: fef (~thedawn@user/thedawn)
[22:56:50] <sheetjs> is sequelize recommended in 2021?
[22:58:17] <qswz> https://blog.logrocket.com/why-you-should-avoid-orms-with-examples-in-node-js-e0baab73fa5/
[22:58:58] <wroathe> sheetjs: I would probably reach for something lower level like a knex before reaching for an ORM
[22:59:02] <wroathe> sheetjs: Depending on the project
[22:59:25] <qswz> yea that's the spirit we do in my company
[22:59:37] <qswz> trying to avoid complex queries anyway
[23:00:05] <sheetjs> so i wanted to "give back" to the community beyond just maintaining an open source project
[23:00:32] <qswz> hmm let's find anither project
[23:00:52] <sheetjs> sequelize looks like it could use someone to work on it full time for a few months to clear backlog and make the big modernization changes
[23:00:54] <theskillwithin> knex is awesome,  but i guess its not an orm?
[23:01:03] <theskillwithin> maybe its like semi orm
[23:01:05] <sheetjs> https://github.com/sequelize/sequelize/issues/12291#issuecomment-645053060
[23:01:31] <sheetjs> so here's a case where a maintainer is explicitly saying they'd probably do it for some sum of money
[23:01:33] <wroathe> theskillwithin: No, it's a query builder. There's overlap between an ORM because an ORM will also need to build queries, but it does so behind the scenes while you call a higher level API
[23:01:47] <theskillwithin> ah ic
[23:02:00] <theskillwithin> objectionjs might be more orm
[23:02:22] <wroathe> theskillwithin: For example, an ORM will typically have something like a User.findWhere(...) operation, and the ORM will then construct a query for selecting a user with a where clause behind the scenes
[23:02:24] <qswz> you could give to ajv, I love this project
[23:02:56] <wroathe> theskillwithin: Where a query builder would just expose tools to compose together a select query like select() and where()
[23:02:59] <qswz> well, classic maintainer begging for money
[23:03:07] *** Quits: Safa_[A_Boy] (~Safa@89.148.21.239) (Quit: Leaving)
[23:03:30] <sheetjs> im looking at it from the other side
[23:03:42] <sheetjs> where would it be most effective
[23:04:06] <sheetjs> and what would be the threshold where people wouldn't feel awkward accepting it
[23:04:20] <wroathe> sheetjs: I would say donate to the projects that you personally have benefitted from most
[23:04:45] <sheetjs> verdaccio, but the last time we donated the team just gave it to other projects :(
[23:04:51] <sheetjs> haha i dunno why that bothered me
[23:05:18] *** Quits: MaXxer0 (~MaXxer0@mue-88-130-53-097.dsl.tropolys.de) (Remote host closed the connection)
[23:05:36] <wroathe> That reminds me, if I'm going to be your lightning rod, we should probably talk about my retention fee
[23:05:50] <sheetjs> i thought the negotiated rate was 1 internet point a year
[23:06:09] <wroathe> Turns out I can't spend internet points on decorative Winston Churchill action figures
[23:06:25] <sheetjs> you're getting paid in exposure :P
[23:06:44] <wroathe> Oh, you're right. I hadn't thought of the exposure. Good point.
[23:06:50] <wroathe> I'll be insta famous in no time.
[23:06:59] <sheetjs> in all seriousness, we probably could pay for someone to do the work of analyzing projects and deciding where it would be most effective
[23:07:01] <wroathe> The Logan Paul of javascript developers
[23:08:24] *** Quits: smuxki (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b) (Ping timeout: 272 seconds)
[23:09:10] <theskillwithin> wroathe wtf, why are u trying to make fun of sheetjs.  thats not cool.  also doesn't even make sense
[23:09:13] <qswz> I can't think of some kick-ass useful npm package
[23:09:30] <qswz> other than mainstream ones that don't need funding
[23:09:45] <wroathe> theskillwithin: Haha. Why are you assuming malicious intent :P? This is an ongoing joke from a conversation he and I had a few days ago
[23:10:02] <theskillwithin> oh
[23:11:12] <wroathe> theskillwithin: We were talking about unethical licensing models, and we agreed that I would be the lightning rod for blame over unethical business practices and be paid 1 internet points for my services
[23:11:28] <wroathe> theskillwithin: If you don't understand something you shouldn't immediately assume malicious intent :P
[23:11:43] <qswz> sheetjs your donations for svgo where certainly a good thing, recently saw than another cntributors starting cleaning things up
[23:13:09] <Donitz> I would donate to three.js
[23:13:12] <Donitz> I probably should
[23:13:14] <sheetjs> yeah now they have an opencollective
[23:14:11] <wroathe> sheetjs: What if you funded the full release of Express 5?
[23:14:41] <sheetjs> how much do they need?
[23:15:03] <wroathe> sheetjs: No idea. I'm just assuming money might light a fire under them to get it done quicker.
[23:15:04] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[23:15:09] <wroathe> sheetjs: It's been pending for years and years now.
[23:15:45] <wroathe> sheetjs: (And I don't know what the actual status is, beyond it not being released. Just something to consider.)
[23:16:07] <qswz> oh express5
[23:16:13] <theskillwithin> wroathe true,  i think i got a bit hot headed when u did that logan paul comment
[23:16:29] <qswz> planned for 2028
[23:16:37] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Remote host closed the connection)
[23:16:42] <wroathe> He is a divisive people.
[23:17:51] <sheetjs> there are two types of donations
[23:18:07] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[23:18:11] <sheetjs> "appreciation for what has been done" and "fuel for future work"
[23:19:42] <sheetjs> "funding express 5" is tricky when there's maybe one or two people who can decide when express 5 is done in the first place
[23:19:55] <systemfault> qswz: You're too optimistic
[23:20:18] <wroathe> sheetjs: Indeed. My point was moreso to say that it might be worth reaching out to see if there's a finish line defined, and any barriers that a little extra cash might break down.
[23:22:13] <sheetjs> its part of the node.js foundation now?
[23:22:26] *** Quits: masber (~masber@178.197.197.167) (Quit: Client closed)
[23:22:26] <wroathe> no idea
[23:22:32] <sheetjs> https://www.infoworld.com/article/3031686/nodejs-foundation-to-shepherd-express-web-framework.html
[23:23:18] <ashnur> that's some old thing
[23:23:29] <wroathe> Yeah, looks like they're now part of what's called the OpenJS foundation
[23:23:34] <wroathe> Which is a merger of that foundation and a few others
[23:24:16] <wroathe> sheetjs: Maybe they'd be a good organization to reach out to for donation ideas
[23:26:51] <sheetjs> they'd probably recommend becoming a member and paying dues
[23:27:11] <sheetjs> which isn't really the point of this.  there are plenty of organizations ready to soak up cash
[23:27:26] <wroathe> sheetjs: No reason you can't lead with "I have no interest in becoming a member and paying dues, but..." :P
[23:27:51] <wroathe> I just figure they'd have people with their finger on the pulse of where funding is needed
[23:28:04] <theskillwithin> oh dang, well im starting an organization now
[23:28:24] <sheetjs> the "people with their finger on the pulse of where funding is needed" would never have suggested svgo
[23:28:27] <theskillwithin> meh im over it already
[23:28:45] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Remote host closed the connection)
[23:28:55] <sheetjs> and honestly, it was an excellent recommendation from qswz
[23:29:15] <qswz> yea, happy it works
[23:30:51] <sheetjs> haha theskillwithin plenty of people have tried, but the problem is that none of the organizations really bring in more donations than they eat in administrative fees
[23:31:39] <sheetjs> opencollective works to an extent because it provides plausible deniability over an ad scheme
[23:34:05] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 265 seconds)
[23:34:14] <theskillwithin> https://youtu.be/e35AQK014tI
[23:34:14] <skillbot> YouTube Title: Futurama: Blackjack and hookers
[23:35:30] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[23:37:16] *** Joins: N4buc0 (~N4buc0@2001:1284:f013:cc94:ff80:486b:bc69:ca86)
[23:38:48] *** Quits: birkoff (birkoff@user/birkoff) (Ping timeout: 272 seconds)
[23:39:12] *** Quits: saikub (saikub@saikub.thunderirc.net) (Ping timeout: 256 seconds)
[23:39:22] *** Quits: hassoon (hassoon@user/hassoon) (Ping timeout: 272 seconds)
[23:40:04] *** Quits: N4buc0- (~N4buc0@2001:1284:f013:305b:71d2:34a1:44af:7617) (Ping timeout: 272 seconds)
[23:41:35] *** Joins: Poboy (~Poboy@user/poboy)
[23:44:26] *** Quits: sillyslux__ (~silly@user/silly) (Ping timeout: 272 seconds)
[23:44:38] *** Joins: brian_da_mage (~Neuromanc@user/briandamag)
[23:44:53] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[23:45:37] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Client Quit)
[23:50:17] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:51:37] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[23:53:15] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Client Quit)
[23:53:43] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:c509:49f3:687:e96a) (Quit: Leaving)
[23:54:58] *** Joins: pulse_ (~pulse@user/pulse)
[23:55:54] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 272 seconds)
[23:56:27] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[23:58:26] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[23:58:49] *** Joins: matsaman (~matsaman@user/matsaman)
