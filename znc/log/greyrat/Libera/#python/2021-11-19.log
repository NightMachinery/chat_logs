[00:00:01] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:00:09] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 268 seconds)
[00:01:37] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[00:04:14] <jinsun> dman777: now start looking into pydantic
[00:04:18] *** Quits: y2o (~y2o@nat-wifivisitas-1x.campus.utfsm.cl) (Ping timeout: 260 seconds)
[00:04:25] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Client Quit)
[00:04:40] <grym> .parse_obj is great
[00:04:59] <jinsun> SimpleNamespace is too simple, won't handle nested dicts
[00:05:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[00:05:40] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[00:05:42] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[00:05:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:06:11] <dman777> jinsun: good way to put it
[00:06:31] <sstory> Given a list x=["this","that","theother"] and a variable Y how would I say does anything in x startWith Y?
[00:06:38] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[00:06:40] <sstory> Is a foreach required or is there an easy way?
[00:06:50] <The-Compiler> sstory: any(e.startswith(y) for e in x)
[00:07:07] <sstory> The-Compiler: Thanks a bunch!
[00:07:31] <sstory> What does the e stand for?
[00:08:11] <The-Compiler> sstory: it can be anything, like with a normal for loop
[00:08:39] <sstory> So the x in yours is the haystack and the y is the needle, correct?
[00:09:06] *** Quits: jay-m126 (~jay-m@129.0.204.219) (Ping timeout: 256 seconds)
[00:09:37] <sstory> Or maybe not.. I think I see
[00:09:41] <grym> sstory: x is the list you gave with that name
[00:09:59] *** Quits: humberto1 (~humbertow@189.236.62.65) (Ping timeout: 264 seconds)
[00:10:09] <grym> it's the same as `result = []; for e in x: if e.startswith(y): result.append(e)`
[00:10:09] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[00:10:40] <The-Compiler> grym: it'd stop at the first match, no?
[00:10:54] <grym> i don't think so, no
[00:11:12] <grym> oh, i'm just being stupid
[00:11:16] <sstory> grym: Right. Thanks!
[00:11:28] *** Joins: neilthereildeil (~neilthere@pool-71-114-72-118.washdc.fios.verizon.net)
[00:11:41] <grym> sstory: i misspoke slightly, but the process of unwrapping a listcomprehension into a for loop is straightforward even if i did it wrong :D
[00:12:09] <grym> it'd be `if e.startswith(y): return True` or something
[00:12:57] <TuckerBrandy199> does {} default to a string? eg "My name is {name}" ?
[00:13:12] *** Joins: Viewday113 (~Viewday@user/viewday)
[00:13:49] <grym> TuckerBrandy199: you need a f in front of that to make it work
[00:14:17] <grym> name=1; print(f"My name is {name}") will have the effect of calling str() on name
[00:14:44] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:14:53] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:14:53] *** Viewday113 is now known as Viewday11
[00:15:54] *** Quits: l4yer (~l4yer@195.181.170.210) (Ping timeout: 256 seconds)
[00:16:00] <dman777> jinsun: pydantic would be a bad idea for my project.... kind of a long winded explination
[00:16:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[00:16:43] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[00:16:57] *** Quits: magga (magga@ti0036a400-1042.bb.online.no) (Remote host closed the connection)
[00:17:19] <dob1> is this tutorial corret ?  why it doesn't use rb ?
[00:17:21] <dob1> https://www.kite.com/python/examples/1892/base64-encode-a-file-in-%60base64%60
[00:17:53] <rb> *shrug*
[00:18:28] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:18:32] <dman777>  converted_fields = [SimpleNamespace(**x) for x in fields], converted_nested_fields = [SimpleNamespace(x.props.prefillMapping) for x in converted_fields] .... any ideas how I can convert x.props.prefillMapping and keep it a part of the object structure?
[00:18:55] *** Quits: weedmic (~weedmic@109-186-1-92.bb.netvision.net.il) (Quit: Konversation terminated!)
[00:19:11] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Client Quit)
[00:19:44] <dob1> rb, well sorry not refering to you :)
[00:20:19] <BtbN> Anyone happens to know if and if so where Pyston caches JIT'ed stuff?
[00:20:36] <rb> nw lol
[00:21:04] *** Joins: humberto1 (~humbertow@189.236.62.65)
[00:21:24] *** Quits: vimal (~vimal@ip-213-127-89-120.ip.prioritytelecom.net) (Quit: Leaving)
[00:21:45] *** Quits: dvx (~dvx@5.181.92.64) (Quit: dvx)
[00:22:17] <jinsun> dob1: looks like that is python2 (print is not function), so str and bytes are the same thing there
[00:22:26] *** Joins: pycurious (~Adium@user/pycurious)
[00:22:46] <dob1> jinsun, ah ok, it makes sense
[00:23:56] *** Joins: fofoni_ (~fofoni@user/fofoni)
[00:24:18] *** Quits: fofoni_ (~fofoni@user/fofoni) (Remote host closed the connection)
[00:24:59] *** Quits: fofoni (~fofoni@user/fofoni) (Ping timeout: 264 seconds)
[00:25:30] <jinsun> still bad example for doing open(..).read() instead of using with statement, unless that is for ever older version of python that doesn't have with also
[00:26:22] <jinsun> so probably better to not use that website to find examples
[00:26:40] *** Quits: humberto1 (~humbertow@189.236.62.65) (Ping timeout: 268 seconds)
[00:26:42] *** Quits: TuckerBrandy199 (~TuckerBra@209.87.29.242) (Ping timeout: 260 seconds)
[00:26:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[00:26:49] *** Joins: fofoni (~fofoni@user/fofoni)
[00:26:57] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[00:28:29] *** Quits: LuxuryMode (uid91005@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:28:41] *** Joins: fikran (~fikran@user/fikran)
[00:29:04] *** Joins: johnkeats6 (~johnkeats@2804:14c:32:a0cc:d8d8:7122:dfee:b806)
[00:31:18] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[00:31:36] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[00:32:22] *** Joins: vicfred (~vicfred@user/vicfred)
[00:33:01] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:dd2:e15e:f04e:1690)
[00:33:30] <jinsun> dman777: you can make a subclass of SimpleNamespace that converts dicts to SimpleNamespace in its `__init__`, something like this https://bpa.st/YOCA
[00:33:34] *** Quits: greedom (~greedom@x59cc99ee.dyn.telefonica.de) (Remote host closed the connection)
[00:34:24] *** Quits: hightower2 (~hightower@213.147.110.20) (Read error: Connection reset by peer)
[00:34:42] *** Joins: l4yer (~l4yer@195.181.170.210)
[00:35:37] *** Quits: ericlee (~ericlee@2601:647:4681:3420:6411:b95a:d974:6d4) (Quit: Leaving)
[00:38:02] *** Joins: ckdCreations (~ckdCreati@147.55.133.137)
[00:38:11] *** Quits: luigibu (~luigibu@80.30.201.209) (Ping timeout: 264 seconds)
[00:38:36] *** Quits: madduck (~madduck@user/madduck) (Remote host closed the connection)
[00:38:59] <dman777> jinsun: oh nice... thanks
[00:39:23] *** Quits: audiocat (~audio@user/audio) (Ping timeout: 264 seconds)
[00:39:43] *** Quits: sstory (~sstory@075-130-120-018.biz.spectrum.com) (Quit: Leaving.)
[00:41:35] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[00:41:41] *** Quits: Common (~Common@user/common) (Ping timeout: 250 seconds)
[00:43:39] *** Quits: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9) (Quit: Leaving)
[00:43:50] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Quit: WeeChat 3.3)
[00:44:07] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[00:44:20] *** duskrat is now known as portalrat
[00:45:34] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:47:17] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[00:47:36] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[00:47:51] *** Joins: alex11 (~alex11@user/alex11)
[00:48:00] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[00:48:57] <dman777> jinsun: curious, how many levels can that go?
[00:48:57] *** Joins: madduck (~madduck@user/madduck)
[00:50:14] <jinsun> I think as much as the recursion limit, so about 1000
[00:52:09] <jinsun> and hopefully you don't have 1000 levels of nested dicts
[00:52:35] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[00:52:35] <dman777> jinsun: super cool, thank you again
[00:53:42] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:a1a7:6c92:fea:8d8c) (Read error: Connection reset by peer)
[00:53:47] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 264 seconds)
[00:54:38] *** Joins: dba (uid502594@hampstead.irccloud.com)
[00:55:53] *** Joins: arcrin (~wbai@209.52.68.8)
[00:56:06] *** Quits: buzzard (~buzzard@84.247.50.51) (Ping timeout: 260 seconds)
[00:56:59] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:58:26] *** Quits: l4yer (~l4yer@195.181.170.210) (Ping timeout: 260 seconds)
[00:58:30] <bluss> is there a scipy(ish) or jupyter focused irc channel anywhere around here?
[00:59:15] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:59:33] *** Joins: wizard1 (~warrior@5.238.149.237)
[00:59:38] <wizard1> hi
[01:00:43] *** Parts: wizard1 (~warrior@5.238.149.237) ()
[01:01:28] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[01:01:33] *** Joins: l4yer (~l4yer@195.181.170.210)
[01:01:46] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[01:01:47] <SnoopJ> bluss, there's #pydata but it isn't very large. Questions about either are very on-topic here.
[01:02:00] <SnoopJ> and #scipy
[01:04:14] <SnoopJ> jinsun, I believe you can have more than that in the actual object
[01:04:33] <SnoopJ> but you'll cause RecursionError if you try to get its repr() or whatever
[01:04:38] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 256 seconds)
[01:04:40] *** Joins: bpalmer (~user@user/bpalmer)
[01:04:41] *** Quits: philectro (~quassel@2a02:2788:9a4:946:3167:9013:9511:45b8) (Read error: Connection reset by peer)
[01:04:55] *** Quits: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be) (Quit: ZNC 1.8.2 - https://znc.in)
[01:05:12] *** Quits: jmew (~jme@host-78-147-68-149.as13285.net) (Read error: Connection reset by peer)
[01:05:21] <bluss> hm yeah I guess those are a bit below critical mass. Thanks SnoopJ
[01:05:33] <SnoopJ> jinsun, e.g. https://bpa.st/WTVA
[01:06:01] *** Joins: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be)
[01:06:04] <jinsun> ah yeah, the init is not actually recursive
[01:06:07] <SnoopJ> cc dman777^, there shouldn't be a limit aside from what you can hold in memory
[01:06:11] *** Quits: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be) (Remote host closed the connection)
[01:06:16] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:59d7:6ac:cac3:2528)
[01:06:47] *** Joins: tga (~tga@user/tga)
[01:07:10] *** Joins: greedom (~greedom@x59cc99ee.dyn.telefonica.de)
[01:07:44] *** Joins: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be)
[01:11:22] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:59d7:6ac:cac3:2528) (Read error: Connection reset by peer)
[01:12:09] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[01:13:19] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 250 seconds)
[01:13:20] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[01:13:26] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[01:13:31] *** Joins: Pickchea (~private@user/pickchea)
[01:13:35] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 264 seconds)
[01:13:44] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:8807:7d5b:8682:a1cb)
[01:14:09] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[01:14:24] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[01:14:29] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:8807:7d5b:8682:a1cb) (Read error: Connection reset by peer)
[01:15:03] *** Joins: luigibu (~luigibu@80.30.201.209)
[01:15:30] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[01:17:57] *** Joins: donald1 (~donald@2a01:e0a:95e:7ca0:788a:8b10:1254:b741)
[01:18:34] *** Joins: y2o (~y2o@pc-128-133-45-190.cm.vtr.net)
[01:18:40] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[01:18:41] *** Quits: nomic (~nomic@185.217.117.59) (Quit: Leaving)
[01:19:20] *** Joins: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il)
[01:20:06] *** Joins: Andrynet_ (~Andrynet@186.46.204.193)
[01:20:24] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[01:20:34] *** Joins: FauxHillaryClint (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[01:20:45] *** FauxHillaryClint is now known as AuxillaryClinton
[01:20:56] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 268 seconds)
[01:21:04] *** AuxillaryClinton is now known as FauxillaryClinto
[01:21:14] *** Quits: y2o (~y2o@pc-128-133-45-190.cm.vtr.net) (Remote host closed the connection)
[01:21:25] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[01:21:29] *** FauxillaryClinto is now known as AuxillaryClinton
[01:21:45] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Ping timeout: 250 seconds)
[01:22:15] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[01:22:15] *** Joins: Bakunin (~Lindis@user/lindis)
[01:23:38] *** Joins: Holarctic (~Hola@77.77.217.66)
[01:23:50] *** Quits: neilthereildeil (~neilthere@pool-71-114-72-118.washdc.fios.verizon.net) (Quit: Client closed)
[01:25:18] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:1c92:afe9:d824:4e11)
[01:26:32] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:dd2:e15e:f04e:1690) (Quit: Client closed)
[01:29:20] *** Quits: pigweed (~pigweed@97.119.246.99) (Quit: Leaving)
[01:29:26] *** Joins: cjac (~cjac@li1196-20.members.linode.com)
[01:29:27] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[01:30:13] <cjac> hi folks.  I'm developing a wsgi application, and I'm looking for a way to test it.  Is there a standard way to launch the app in process and route queries to the in-process app?
[01:31:31] *** Quits: Inline (~Inline@2a02:908:1252:7a80:6adf:f25e:1e5f:74e1) (Ping timeout: 250 seconds)
[01:31:36] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[01:31:53] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:dd2:e15e:f04e:1690)
[01:32:22] *** Quits: upsala (~zcb@185.213.155.252) (Quit: WeeChat 3.3)
[01:32:39] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[01:33:31] *** Joins: LuxuryMode (uid91005@ilkley.irccloud.com)
[01:33:51] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) ()
[01:34:15] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[01:35:04] <SnoopJ> cjac, many frameworks offer machinery that helps you with testing, often a test client. In FastAPI for instance, you import TestClient and run your requests against `TestClient(app)` where `app` is the WSGI app
[01:35:46] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[01:37:31] *** Joins: Macuser (~Macuser@216.30.159.201)
[01:37:40] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[01:38:17] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[01:38:38] *** Quits: Andrynet_ (~Andrynet@186.46.204.193) (Ping timeout: 256 seconds)
[01:39:46] *** Quits: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC) (Ping timeout: 256 seconds)
[01:40:27] *** Joins: Andrynet_ (~Andrynet@186.46.204.193)
[01:41:30] *** Joins: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC)
[01:42:40] *** Quits: mags (~mags@097-090-237-145.res.spectrum.com) (Ping timeout: 265 seconds)
[01:42:47] *** Quits: greedom (~greedom@x59cc99ee.dyn.telefonica.de) (Remote host closed the connection)
[01:43:01] *** Quits: Nact (~l@2a02:2788:11c4:6e6:8145:8e91:d047:8ed0) (Remote host closed the connection)
[01:43:46] *** Joins: Nact (~l@2a02:2788:11c4:6e6:8145:8e91:d047:8ed0)
[01:44:02] *** Joins: mags (~mags@097-090-237-145.res.spectrum.com)
[01:44:08] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[01:44:28] *** Joins: alzgh (~alzgh@user/alzgh)
[01:44:46] *** Joins: manuels (~manuel@80.211.205.88)
[01:44:51] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[01:45:43] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:46:06] <cjac> Thanks SnoopJ!  Do you have an example of this being used?
[01:46:18] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[01:46:40] <SnoopJ> cjac, I do, but it's a work project. If you're using a particular framework, tell us and we can try to find some specific example(s) for you
[01:47:17] <SnoopJ> FastAPI documents this feature and the other testing functionality here: https://fastapi.tiangolo.com/tutorial/testing/
[01:48:04] <cjac> I haven't really selected a framework.  I have tested manually using uwsgi, but that requires two terminals, and starting the service in one and running tests with curl in the other
[01:48:04] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[01:48:12] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:48:17] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[01:48:27] <cjac> I was hoping to have the testing infrastructure launch the service in one thread and run the tests in another sort of thing
[01:48:30] <grym> cjac: if you haven't selected a framework, what's your application running
[01:48:42] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[01:48:44] <SnoopJ> cjac, you've been writing your own WSGI layer code?
[01:49:01] <cjac> https://github.com/cjac/pyrdapd
[01:49:14] <cjac> it's pretty simple at this point.  only a page of code
[01:49:56] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[01:49:58] *** Quits: mallkrampus (~mallkramp@178.238.11.47) (Ping timeout: 256 seconds)
[01:50:04] *** Joins: xardas (~xardas@149.233.51.127)
[01:52:24] <SnoopJ> cjac, if you're rolling your own, you might want to look at werkzeug: https://werkzeug.palletsprojects.com/en/2.0.x/test/
[01:53:04] <SnoopJ> A lot of WSGI stuff ends up in Werkzeug at some point
[01:53:37] *** Joins: dre (~dre@2001:8003:c932:c301:7b6:ec18:50ab:337c)
[01:53:38] *** Joins: jmew (~jme@host-78-147-68-149.as13285.net)
[01:54:05] *** Quits: jmew (~jme@host-78-147-68-149.as13285.net) (Client Quit)
[01:54:16] <SnoopJ> But if you're shopping for a relatively simple framework, Flask is popular
[01:54:53] <SnoopJ> FastAPI is new and trendy and has a really nice ORM courtesy of Pydantic (and very Flask-like spellings of simple things), but there are a lot of options
[01:54:54] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[01:55:00] *** Joins: jmew (~jme@host-78-147-68-149.as13285.net)
[01:57:02] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[01:57:57] <AuxillaryClinton> wheres this metaverse lacebook has been rumoring around
[01:58:57] *** Quits: jmew (~jme@host-78-147-68-149.as13285.net) (Client Quit)
[01:59:39] *** Joins: StickyIcky (~StickyIck@187.211.16.171)
[01:59:43] *** Joins: jmew (~jme@host-78-147-68-149.as13285.net)
[01:59:44] *** Joins: StickyIcky2 (~StickyIck@187.211.16.171)
[01:59:46] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[01:59:47] <AuxillaryClinton> import meatverse as meat
[02:00:05] *** Quits: StickyIcky2 (~StickyIck@187.211.16.171) (Client Quit)
[02:00:14] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 265 seconds)
[02:00:15] <cow_2001> 0. delete your facebook account.
[02:01:01] *** Quits: luigibu (~luigibu@80.30.201.209) (Ping timeout: 268 seconds)
[02:01:03] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[02:02:00] *** Quits: davor_ (~davor@user/davor) (Ping timeout: 265 seconds)
[02:02:03] *** Joins: Viewday11 (~Viewday@user/viewday)
[02:02:30] *** Joins: davor (~davor@user/davor)
[02:04:02] *** Joins: mallkrampus (~mallkramp@178.238.11.49)
[02:04:14] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:04:23] *** Quits: znpy (~znpy@user/znpy) (Remote host closed the connection)
[02:05:11] *** Quits: dld (~dld@2601:197:600:1210:9992:b3e2:af1a:fbc2) (Ping timeout: 264 seconds)
[02:05:19] <sudomann> when a wheel such as this is produced: package-0.1.0-py3-none-any.whl does that means it will run on anything?
[02:05:34] *** Joins: znpy (~znpy@user/znpy)
[02:05:43] <sudomann> I have recently begun using poetry and that was the output of me doing `poetry build`
[02:06:25] *** Quits: mimmy_ (~mimmy@37.19.213.65) (Quit: WeeChat 3.3)
[02:07:00] *** Quits: znpy (~znpy@user/znpy) (Client Quit)
[02:07:06] *** Joins: dld (~dld@98.217.187.57)
[02:07:38] <SnoopJ> sudomann, the format of the trailing parts is {python tag}-{abi tag}-{platform tag}. This wheel is advertising itself as able to run on any Python 3, but there isn't any guarantee it'll do the right thing.
[02:07:48] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[02:08:01] *** Joins: matsaman (~matsaman@user/matsaman)
[02:08:05] *** Quits: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de) (Quit: jonaskabrink)
[02:08:34] * SnoopJ just recently changed a $work wheel that was getting -any to have a proper platform tag
[02:11:20] *** Joins: StickyIcky2 (~StickyIck@189.162.11.55)
[02:12:15] *** Quits: dude-x (~textual@72.76.74.165) (Read error: Connection reset by peer)
[02:13:24] *** Joins: Viewday112 (~Viewday@user/viewday)
[02:13:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:13:58] *** Joins: todda7 (~torstein@31.4.137.30)
[02:13:58] *** Quits: StickyIcky (~StickyIck@187.211.16.171) (Ping timeout: 268 seconds)
[02:14:02] *** Quits: tsaka__ (~torstein@31.4.150.2) (Ping timeout: 240 seconds)
[02:14:14] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:dd2:e15e:f04e:1690) (Quit: Client closed)
[02:14:22] *** Quits: thevishy (~thevishy@2405:201:f005:c007:c8c1:7d4c:8a1f:6354) (Quit: Client closed)
[02:15:16] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[02:15:26] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[02:15:28] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[02:15:28] *** Viewday112 is now known as Viewday11
[02:16:54] *** Joins: joris1 (~joris@195.123.218.123)
[02:18:03] *** Quits: adeliktas (~adeliktas@200116b82203d9004c14741036ac2e75.dip.versatel-1u1.de) (Quit: Client closed)
[02:19:26] *** Quits: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[02:21:48] *** Joins: max3 (~webchat29@2620:10d:c090:400::5:45a8)
[02:21:57] *** Quits: AuxillaryClinton (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Read error: Connection reset by peer)
[02:22:13] *** Joins: davor_ (~davor@user/davor)
[02:22:38] <max3> i'm gonna get XYed for this (please don't I know exactly what I'm doing) but is there a way to import a module that doesn't a .py extension? importlib didn't work
[02:22:50] *** Quits: davor (~davor@user/davor) (Ping timeout: 256 seconds)
[02:23:17] *** Quits: arinov (~arinov@213.194.126.155) (Read error: Connection reset by peer)
[02:23:43] <SnoopJ> max3, importlib is the way to do any import if you don't want to write an import statement. Tell us more about what you want to do.
[02:23:58] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[02:24:08] <max3> SnoopJ import lib still relies on .py
[02:24:15] *** Joins: humberto1 (~humbertow@189.236.62.65)
[02:24:55] <max3> SnoopJ it really is too detailed to be worth describing but if you don't believe me (no one ever does) here's the PR https://github.com/pytorch/pytorch/pull/68564
[02:25:27] <SnoopJ> max3, I have personally written code to import not-a-.py for use with pytorch using importlib, but okay, I'll see if I can figure out what your question is from this link.
[02:25:30] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:26:16] *** Joins: djhankb (~djhankb@208.113.164.68)
[02:27:28] *** Joins: akk (~akk@75.161.146.115)
[02:28:50] *** Joins: arinov (~arinov@5.24.160.250)
[02:29:02] *** Quits: jmew (~jme@host-78-147-68-149.as13285.net) (Remote host closed the connection)
[02:29:59] <grym> it's somewhere in importlib.machinery ... it used to be imp.load_source, iirc, i forget how to do it now
[02:30:13] <grym> SourceFileLoader, maybe?
[02:30:48] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:31:10] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:31:33] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:32:57] <max3> @gry
[02:32:59] <SnoopJ> there's been some clarification in PM, they were/are trying to import a .h
[02:33:13] <max3> grym something like this? `/home/mlevental/dev_projects/pytorch_19/torch/csrc/jit/runtime/shapes_1.h` ?
[02:33:16] <max3> whoops
[02:33:25] <max3> `SourceFileLoader("shapes", "/home/mlevental/dev_projects/pytorch_19/torch/csrc/jit/runtime/shapes_1.h")`
[02:34:10] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 256 seconds)
[02:34:13] <max3> aj
[02:34:14] <max3> ah
[02:34:15] <max3> eureka
[02:34:23] <max3> eureka.load_module
[02:34:34] <max3> brilliant
[02:35:28] * SnoopJ has never heard of eureka
[02:35:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:35:57] <grym> neither has google
[02:35:59] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[02:37:29] <matsaman> it's a pretty bad name for a thing, to be fair =)
[02:37:35] *** Joins: Cl0udNinja (~Accidenta@user/cableninja)
[02:37:38] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Remote host closed the connection)
[02:37:53] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[02:38:03] *** Joins: fikran (~fikran@user/fikran)
[02:38:04] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[02:38:05] <grym> i mean, i use tools named q and z every day
[02:38:09] <Cl0udNinja> using SQLAlchemy, is it possible to dynamically set/unset hide_parameters on an engine?
[02:38:15] <grym> i'm not throwing stones here :D
[02:38:47] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 264 seconds)
[02:39:52] <max3> grym for my next ask: if i have two such files - one imports the other - how do i handle this? i don't see a method on SourceFileLoader that says does something like load another module into some namespace that the first one can access
[02:39:55] <max3> maybe i'm blind though
[02:40:14] <max3> maybe set_data?
[02:40:25] <grym> i'm accustomed to thinking of just one import namespace
[02:40:46] <max3> what i mean is that in my second file i have an import from the first
[02:40:50] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[02:41:08] <grym> so in your second file, do this hoop-jumping, too
[02:41:11] *** Quits: mags (~mags@097-090-237-145.res.spectrum.com) (Ping timeout: 264 seconds)
[02:41:13] <grym> why wouldn't that work?
[02:41:22] <max3> oh gotcha
[02:41:26] <max3> good idea!
[02:41:45] <SnoopJ> max3, importing a module involves executing all of the code in it
[02:42:31] <SnoopJ> so the import statement in the module will be executed however it's written, which might mean you need to worry about sys.path while this is happening if it's a plain old `import somefile` and `somefile` wouldn't otherwise be in your searchpath
[02:42:34] *** Joins: znpy (~znpy@user/znpy)
[02:42:40] *** Joins: mags (~mags@097-090-237-145.res.spectrum.com)
[02:43:09] *** Joins: adeliktas (~adeliktas@200116b82203d9004c14741036ac2e75.dip.versatel-1u1.de)
[02:43:16] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:43:39] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:43:40] *** Joins: evocatus (~evocatus@213.193.2.105)
[02:45:18] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[02:45:51] <max3> hmm for my final ask: how do i do an `import *` from the `SourceFileLoader`ed module?
[02:46:01] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:46:20] <SnoopJ> pull all the names out and put them into globals()
[02:46:33] <max3> another good idea!
[02:46:40] <SnoopJ> not sure what the best spelling is, probably globals.update(something)
[02:46:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[02:47:34] <SnoopJ> `globals.update(inspect.getmembers(module))`  maybe?
[02:48:00] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:48:40] <max3> i guess its `globals().update()`
[02:48:57] <SnoopJ> err, yes, sorry
[02:49:12] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[02:49:18] <SnoopJ> globals() builds the dict which you can then update()
[02:49:32] <SnoopJ> s/builds/returns/
[02:50:25] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:51:35] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:53:00] *** Joins: BraveheartBSD (~bill@124.189.223.128)
[02:53:52] *** Quits: Andrynet_ (~Andrynet@186.46.204.193) (Quit: WeeChat 3.3)
[02:55:09] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[02:55:27] <BraveheartBSD> I have a UTF-8 error in the 3.9 Python executable using PyCharm on Debian. Anyway of fixing this?
[02:56:04] <matsaman> what's the error
[02:56:40] <grym> BraveheartBSD: bpa.st/+pytb+python is a good pastebin for sharing this with us
[02:57:25] <BraveheartBSD> I'll start it up, brb
[02:58:30] *** Quits: vimart (~vimart@239.218-30-62.static.virginmediabusiness.co.uk) (Quit: WeeChat 2.8)
[02:59:40] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[03:01:08] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[03:01:37] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[03:01:56] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:dd2:e15e:f04e:1690)
[03:01:58] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[03:02:18] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[03:02:28] *** Quits: BraveheartBSD (~bill@124.189.223.128) (Quit: Leaving)
[03:04:58] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:05:09] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 268 seconds)
[03:05:47] *** Joins: BraveheartBSD (~bill@2001:8003:d931:6901:a51:1126:69d:fc0a)
[03:06:34] *** Joins: AuxillaryClinton (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[03:06:53] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[03:06:56] *** Joins: ArtfulDodger (~ArtfulDod@2a02-8440-6311-0f28-78ba-13a3-5b05-4fb6.rev.sfr.net)
[03:07:28] <BraveheartBSD> yntaxError: Non-UTF-8 code starting with '\x80' in file /usr/bin/python3.9 on line 2, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details
[03:07:36] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[03:07:56] <BraveheartBSD> SyntaxError: Non-UTF-8 code starting with '\x80' in file /usr/bin/python3.9 on line 2, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details
[03:08:10] *** Joins: Betal (~Betal@user/betal)
[03:08:14] <BraveheartBSD> The link tells me nothing
[03:08:57] <BraveheartBSD> Setting the coding to UTF-8 has no effect either
[03:09:03] <SnoopJ> BraveheartBSD, your file is *not* encoded with UTF-8, which is the default encoding.
[03:09:27] <SnoopJ> The error is occurring because it is trying to decode it with UTF-8, sees \x80, and knows this isn't a UTF-8 codepoint, so it bails.
[03:09:45] <SnoopJ> Try latin-1, maybe
[03:10:32] *** Quits: donald1 (~donald@2a01:e0a:95e:7ca0:788a:8b10:1254:b741) (Ping timeout: 240 seconds)
[03:10:45] *** Quits: sunyour (~sunyour@129.226.182.99) (Ping timeout: 250 seconds)
[03:10:49] *** humberto1 is now known as humbertowoody
[03:12:41] *** Joins: sunyour (~sunyour@129.226.182.99)
[03:14:35] *** Joins: humberto1 (~humbertow@189.236.62.65)
[03:15:19] <BraveheartBSD> Thank you, works as expected now.
[03:15:22] *** Joins: geli (~gelignite@55d4c92e.access.ecotel.net)
[03:15:47] <SnoopJ> do you understand why?
[03:15:55] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[03:16:27] *** Quits: lionslicer (~lionslice@2804:d41:a7a6:1300:51b8:2ae7:b7c5:10ab) (Remote host closed the connection)
[03:17:48] *** Quits: humbertowoody (~humbertow@189.236.62.65) (Ping timeout: 256 seconds)
[03:18:06] *** Quits: magla (~gelignite@55d4e1d7.access.ecotel.net) (Ping timeout: 268 seconds)
[03:19:03] *** Quits: shawwwn (uid6132@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:19:26] <BraveheartBSD> Yes, it was only this pc that had the issue, other pc's on network were fine.
[03:19:40] <ArtfulDodger> Hey! I'm reading the advanced logging tutorial for logging modules. I don't understand why the last print is showed here :( http://paste.debian.net/1220008/
[03:20:02] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[03:20:03] *** Joins: magla (~gelignite@55d46975.access.ecotel.net)
[03:20:28] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[03:21:48] *** Quits: geli (~gelignite@55d4c92e.access.ecotel.net) (Ping timeout: 268 seconds)
[03:21:59] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:23:15] <SnoopJ> ArtfulDodger, because the handler doesn't have a level set
[03:24:36] *** Quits: StickyIcky2 (~StickyIck@189.162.11.55) (Ping timeout: 256 seconds)
[03:24:38] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[03:24:52] <SnoopJ> i.e. look at `l.handlers` and you'll see (NOTSET) on the StreamHandler
[03:25:00] *** Joins: shawwwn (uid6132@helmsley.irccloud.com)
[03:25:23] *** Joins: StickyIcky2 (~StickyIck@187.211.71.245)
[03:26:07] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[03:26:10] <ArtfulDodger> SnoopJ: does it mean that there are 2 filters every time a log entry is printed: so that the message pass through, both the logger and the handler must accept the message?
[03:26:35] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[03:26:47] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[03:27:18] <ArtfulDodger> Also, if it's NOTSET here, soes in inherits from the higher level logger?
[03:27:28] <SnoopJ> ArtfulDodger, both kinds of object have separate levels, basically.
[03:27:52] <SnoopJ> And there is no "higher level" logger because you're using Logger directly instead of logging.getLogger
[03:28:09] <SnoopJ> if you use `l = logging.getLogger("mylib")` your code will do what you're expecting
[03:28:38] *** Quits: dre (~dre@2001:8003:c932:c301:7b6:ec18:50ab:337c) (Remote host closed the connection)
[03:29:09] *** Parts: AlphaEcho (~cyborg@user/alphaecho) ()
[03:29:11] <SnoopJ> I'
[03:29:12] <ArtfulDodger> Ah, so maybe a first recommandation would be not to use Logger but getLogger all the time? :)
[03:29:15] <SnoopJ> I'm not really sure why, though
[03:29:23] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 250 seconds)
[03:29:26] <ArtfulDodger> With getLogger, would "mylib" by a child of root?
[03:29:30] <SnoopJ> yep
[03:29:50] <SnoopJ> with Logger you just made an instance floating in the void, but getLogger() is something inside the hierarchy
[03:30:24] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[03:30:26] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[03:30:33] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[03:32:47] *** Joins: Naan` (~Naan@user/naan)
[03:33:04] <ArtfulDodger> oh I see SnoopJ. So "foo.bar" a child of "foo", itself a child of "root", correct?
[03:33:39] <SnoopJ> ArtfulDodger, yep
[03:34:31] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:34:33] <SnoopJ> ArtfulDodger, the most common pattern of use is one logger per package, and so you often see people writing `logger = logging.getLogger(__name__)` at the top of their modules (where __name__ is the name Python associates with the package under execution, like foo.bar.baz for foo/bar/baz.py)
[03:35:31] <SnoopJ> you get a logger hierarchy that mirrors your code structure "for free" this way, but sometimes there are reasons to do other things (like if you want to make multiple loggers in one package)
[03:35:47] *** Quits: emf (~emf@2620:10d:c090:400::5:d3e3) (Ping timeout: 264 seconds)
[03:36:33] *** Quits: ionface (~ionface@user/ionface) (Remote host closed the connection)
[03:36:42] <ArtfulDodger> Yes I've seen that, this is what I'm trying to get atm. Then if you change the level and/or handler "foo", what does happen to all children e.g. foo.bar, do they change?
[03:36:44] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 265 seconds)
[03:37:28] *** Joins: Betal (~Betal@user/betal)
[03:38:08] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:38:12] *** Quits: hudo__ (~hudo@62.68.19.39) (Ping timeout: 256 seconds)
[03:38:26] *** Quits: Nact (~l@2a02:2788:11c4:6e6:8145:8e91:d047:8ed0) (Ping timeout: 245 seconds)
[03:38:26] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[03:38:39] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[03:38:41] *** Quits: StickyIcky2 (~StickyIck@187.211.71.245) (Quit: Leaving)
[03:38:42] <SnoopJ> ArtfulDodger, the direction of propagation is typically up. This flow diagram might help you understand what's going on: https://docs.python.org/3/howto/logging.html#logging-flow
[03:39:35] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[03:39:36] *** Leonarbro_ is now known as Leonarbro
[03:39:55] *** Joins: buzzard (~buzzard@84.247.50.51)
[03:40:07] <SnoopJ> I would have to poke around in the innards to understand why the logger you made with Logger does that, though :)
[03:41:20] *** Quits: Sario (uid356235@fosshost/cdo/Sario) (Quit: Connection closed for inactivity)
[03:41:37] *** Quits: BraveheartBSD (~bill@2001:8003:d931:6901:a51:1126:69d:fc0a) (Quit: Leaving)
[03:41:46] <ArtfulDodger> noobs always meet interesting issues :)
[03:42:44] <ArtfulDodger> I've seen that diagram, although I don't know much about the propagation yet
[03:43:10] <ArtfulDodger> So you confirm that changing settings for foo wouldn't affefct foo.bar in that case?
[03:43:25] *** Joins: mokytis_ (~mokytis@44.31.58.18)
[03:43:29] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[03:44:06] *** Quits: AuxillaryClinton (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 260 seconds)
[03:44:58] <SnoopJ> Yes, settings are per-instance
[03:45:11] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[03:45:20] <SnoopJ> the advantage of the hierarchy is that loggers sometimes pass things up
[03:45:33] *** Quits: mokytis_ (~mokytis@44.31.58.18) (Client Quit)
[03:46:10] *** Joins: infidel (~ecrump@67-0-208-202.albq.qwest.net)
[03:46:18] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[03:46:28] *** Quits: parv (~quass@user/parv) (Quit: parv)
[03:46:35] <SnoopJ> ArtfulDodger, as an example of why this is useful, I usually do a logger for the entire application that has handlers attached, and anything below that does *not* have handlers: they hand their messages up the tree, and I don't have to worry about those other levels, my "gate" is at the higher point
[03:46:47] <ArtfulDodger> WOUldn't it be handy to change settings for all children on all levels though? Like "foo.bar.something looks buggy, lemme activate a stream handler for the entire foo?"
[03:47:01] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Quit: Leaving)
[03:47:26] <SnoopJ> that's pretty much what filters can do for you
[03:49:01] *** Joins: root____ (~root@139.59.163.130)
[03:49:36] <ArtfulDodger> ok thanks SnoopJ, I'm going to explore a bit more. I'll probably have more questions :D
[03:49:53] <SnoopJ> ArtfulDodger, i.e. if you have a hierarchy set up so that things propagate upward and end up in a handler whose output you're interested in, you could add/modify a filter there to...well, filter what you're interested in :)
[03:50:02] *** Quits: root____ (~root@139.59.163.130) (Client Quit)
[03:50:22] *** Joins: root____ (~root@139.59.163.130)
[03:50:27] <SnoopJ> if you had handlers at every level, you'd have to worry about records being handled multiple times *and* have more places to worry about filter semantics
[03:50:37] *** root____ is now known as mokytis_
[03:50:47] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[03:51:09] <SnoopJ> But there are all kinds of things you might build with the logging module. It's kind of like a toolbox that has a few common patterns more than a "you should always do X" library
[03:51:34] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 260 seconds)
[03:53:10] *** Quits: nicode (~nic@2607:f2c0:959a:4700:7ee0:3899:77f1:eedc) (Ping timeout: 265 seconds)
[03:53:11] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 264 seconds)
[03:53:13] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[03:54:48] <ArtfulDodger> Yeah I see SnoopJ. But it's also nice to have a "regular way" to do we. That helps a lot if you are new to the thing.
[03:55:03] *** Abrax- is now known as Abrax
[03:55:19] <ArtfulDodger> it would be nice to see a sort of visual tree of the loggers and their handlers. So that you know what you can activate or not.
[03:55:49] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[03:55:52] <ArtfulDodger> I've just started a library that does have debug messages and I'm trying to figure out how to activate them, that's unclear
[03:56:07] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Client Quit)
[03:56:16] <ArtfulDodger> logging.root.manager.loggerDict helps
[03:56:33] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[03:56:36] *** Joins: rurik (~textual@dslb-002-203-156-111.002.203.pools.vodafone-ip.de)
[03:56:41] *** Quits: Abrax (~Abrax@user/abrax) (Quit: Leaving)
[03:57:09] *** Joins: pycurious (~Adium@user/pycurious)
[03:57:24] <SnoopJ> This looks like a nice tool for having a look-see: https://pypi.org/project/logging_tree/
[03:57:24] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[03:57:33] <SnoopJ> Probably something similar could be done with graphics
[03:58:05] *** Quits: evocatus (~evocatus@213.193.2.105) (Quit: Leaving)
[03:58:25] <rurik> I have a list of tuples (k,v), is there any way to convert it into a dictionary in the form of {k: [v1,v2,v3...]} in one line?
[03:58:36] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[03:58:36] *** Joins: dre (~dre@2001:8003:c932:c301:f4c:269a:f23f:f4fc)
[03:58:53] <grym> rurik: which k wins?
[03:59:05] <SnoopJ> I think they want to collate all the values that have the same k into a list
[03:59:11] <grym> oh!
[03:59:17] <rurik> SnoopJ: exactly
[03:59:26] <grym> defaultdict(list) time :)
[03:59:34] <SnoopJ> rurik, `d = defaultdict(list); for k,v in list_of_tuples: d[k].append(v)`
[03:59:48] *** Joins: Abrax (~Abrax@user/abrax)
[03:59:50] <SnoopJ> where defaultdict is collections.defaultdict
[03:59:53] *** Joins: Guest20 (~Guest20@dyx0pyycyxn3cgy06f40y-3.rev.dnainternet.fi)
[04:00:23] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:c01b:60fe:9558:2d95)
[04:00:23] *** Quits: TJ- (~root@about/linux/staff/tj-) (Ping timeout: 264 seconds)
[04:00:40] *** Quits: grimvar (~grimvar@i5C75F4D9.versanet.de) (Ping timeout: 268 seconds)
[04:01:26] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[04:01:35] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[04:01:47] *** Joins: grimvar (~grimvar@i5C75F4F2.versanet.de)
[04:02:07] <ArtfulDodger> SnoopJ, thank you :)
[04:02:14] *** Parts: dbear (~david@mesa.ha.school) ()
[04:02:23] *** Joins: jonthesnow (~xizhendu@36.112.188.169)
[04:02:48] *** Quits: dre (~dre@2001:8003:c932:c301:f4c:269a:f23f:f4fc) (Client Quit)
[04:02:52] *** Lord_of_Life_ is now known as Lord_of_Life
[04:03:01] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[04:03:11] *** Joins: dre (~dre@2001:8003:c932:c301:f4c:269a:f23f:f4fc)
[04:03:14] <rurik> SnoopJ: thank you
[04:03:43] <rurik> is there any way to do this with a dictionary comprehension?
[04:03:44] *** Quits: arinov (~arinov@5.24.160.250) (Ping timeout: 268 seconds)
[04:03:59] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 264 seconds)
[04:04:24] <SnoopJ> not really
[04:04:54] <SnoopJ> if it's obnoxious to embed that magic spell directly where it's needed, write a little helper and give it a good name
[04:05:15] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 265 seconds)
[04:05:25] *** Joins: Colt (~Colt@user/colt)
[04:06:02] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[04:06:17] <mokytis_> in a dict comp you {key: value for <loop condition>} which doesn't really work here as the key exists in muliple different parts of your tuple
[04:06:22] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:06:42] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:8428:48d8:b860:81df) (Ping timeout: 265 seconds)
[04:07:40] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 265 seconds)
[04:07:45] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:6187:6f9d:f9ea:793b)
[04:08:03] *** Quits: akk (~akk@75.161.146.115) (Ping timeout: 268 seconds)
[04:08:23] <ArtfulDodger> SnoopJ What happens if "foo.bar" receives a debug log but its in level WARN with no handler? According to me nothing should happend because DEBUG is < WARN but apparently the message is propagated until foo, and since foo has a DEBUG handler the message is displayed
[04:08:27] <ArtfulDodger> I guess I'm still a bit confused betwwen the level of the handler and the level of the logger
[04:08:28] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[04:10:04] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:10:04] *** Quits: dre (~dre@2001:8003:c932:c301:f4c:269a:f23f:f4fc) (Quit: Leaving)
[04:10:23] *** Quits: magla (~gelignite@55d46975.access.ecotel.net) (Quit: Stay safe!)
[04:10:24] *** Joins: dre (~dre@2001:8003:c932:c301:f4c:269a:f23f:f4fc)
[04:11:38] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:11:40] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[04:12:41] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[04:12:59] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[04:12:59] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[04:13:00] *** Joins: Wulf (~Wulf@user/wulf)
[04:13:16] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[04:13:39] *** Joins: Viewday119 (~Viewday@user/viewday)
[04:14:12] *** Joins: buzzard_ (~buzzard@host-67-44-240-67.hnremote.net)
[04:15:36] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[04:15:36] *** Viewday119 is now known as Viewday11
[04:15:51] <SnoopJ> ArtfulDodger, are you sure? This seems to work as you expect: https://bpa.st/B6WQ
[04:15:57] *** Joins: slav0nic (slav0nic@python.su)
[04:16:31] <SnoopJ> (even if I do foobar.setLevel(logging.DEBUG), which I didn't here because it's not necessary, that logger never receives the record)
[04:17:11] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[04:17:47] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[04:18:12] *** Joins: pycurious (~Adium@user/pycurious)
[04:18:14] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[04:18:26] *** Quits: buzzard (~buzzard@84.247.50.51) (Ping timeout: 256 seconds)
[04:18:41] *** Joins: pycurious (~Adium@user/pycurious)
[04:18:49] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[04:18:51] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[04:18:59] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[04:19:52] *** Quits: buzzard_ (~buzzard@host-67-44-240-67.hnremote.net) (Read error: Connection reset by peer)
[04:20:15] *** Joins: buzzard_ (~buzzard@host-67-44-240-67.hnremote.net)
[04:20:23] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 268 seconds)
[04:20:42] *** Joins: akk (~akk@75.161.146.115)
[04:21:10] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[04:23:16] *** Quits: dba (uid502594@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:23:19] *** Quits: buzzard_ (~buzzard@host-67-44-240-67.hnremote.net) (Read error: Connection reset by peer)
[04:24:01] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Quit: leaving)
[04:24:06] *** Joins: buzzard_ (~buzzard@host-67-44-240-67.hnremote.net)
[04:24:55] *** Quits: dre (~dre@2001:8003:c932:c301:f4c:269a:f23f:f4fc) (Quit: Leaving)
[04:25:19] *** Joins: dre (~dre@2001:8003:c932:c301:f4c:269a:f23f:f4fc)
[04:26:12] <rurik> can anyone offer some critique on this amateur code and give me some pointers on how to reduce it as much as possible without giving me the solution (without regex)? https://pastebin.com/zF2K6t9X
[04:26:31] *** Quits: buzzard_ (~buzzard@host-67-44-240-67.hnremote.net) (Read error: Connection reset by peer)
[04:26:56] *** Joins: buzzard_ (~buzzard@host-67-44-240-67.hnremote.net)
[04:27:35] <KirkMcDonald> rurik: I would just take the initial character, then iterate through the string until you find a different character, then just slice the string starting from that index.
[04:27:42] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[04:28:27] <KirkMcDonald> rurik: You really don't need the clean_string variable at all.
[04:29:22] *** Quits: w4ld0 (w4ld0@gateway/vpn/protonvpn/w4ld0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:29:52] *** Quits: buzzard_ (~buzzard@host-67-44-240-67.hnremote.net) (Read error: Connection reset by peer)
[04:30:34] *** Joins: buzzard_ (~buzzard@host-67-44-240-67.hnremote.net)
[04:31:17] <rurik> KirkMcDonald: how so?
[04:31:19] *** Quits: buzzard_ (~buzzard@host-67-44-240-67.hnremote.net) (Read error: Connection reset by peer)
[04:31:28] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:31:43] <KirkMcDonald> rurik: Consider: return start + string[index:]
[04:32:27] *** Quits: Guest20 (~Guest20@dyx0pyycyxn3cgy06f40y-3.rev.dnainternet.fi) (Quit: Client closed)
[04:32:34] <ArtfulDodger> SnoopJ: You're right, the basic example works as expected but i've tested with some other library that logs stuff and it doesn't. I can't reproduce it with a simple example. No worries.
[04:33:45] *** Joins: zepolen (~zepolen@2a02:587:293f:b5fe:a9ae:7515:90f4:3484)
[04:34:21] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Quit: Leaving)
[04:34:23] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 250 seconds)
[04:36:59] *** Quits: Abrax (~Abrax@user/abrax) (Ping timeout: 264 seconds)
[04:37:27] <rurik> KirkMcDonald: wouldn't this fail with a string like 'aaa' if I use a while loop?
[04:38:53] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[04:39:41] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[04:41:32] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-9816-4c1a-c6ec-2483.res6.spectrum.com) (Read error: Connection reset by peer)
[04:42:23] <KirkMcDonald> rurik: How so?
[04:42:38] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[04:43:42] *** Joins: Atque (~Atque@user/atque)
[04:43:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:44:47] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 264 seconds)
[04:45:23] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[04:45:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[04:45:59] *** Quits: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3) (Ping timeout: 264 seconds)
[04:46:13] <rurik> KirkMcDonald: here is what I wrote https://bpa.st/6ZWQ
[04:46:22] <SnoopJ> ArtfulDodger, the basic flow is: 1) a Logger method is called 2) that Logger decides whether to handle the event based on the level/filters 3) that Logger's handlers (if any) get notified (and do their own level/filter computation) 4) the Logger's parent is notified, if appropriate
[04:46:31] <SnoopJ> everything else hangs on that
[04:46:40] <SnoopJ> But the particulars get complicated fast :)
[04:47:24] *** Joins: fikran (~fikran@user/fikran)
[04:47:43] *** Joins: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu)
[04:48:54] <KirkMcDonald> rurik: Might want: while i < len(string) and string[i] == start:
[04:49:59] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.4-dev)
[04:49:59] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[04:50:37] <ArtfulDodger> SnoopJ: is the parent notified only when the child is NOTSET?
[04:50:44] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[04:50:51] <SnoopJ> ArtfulDodger, no
[04:53:23] *** Joins: Abrax (~Abrax@user/abrax)
[04:53:26] <SnoopJ> ArtfulDodger, the relevant loop is here, it might help to just see the code responsible for it: https://github.com/python/cpython/blob/main/Lib/logging/__init__.py#L1696-L1704
[04:53:43] <rurik> KirkMcDonald: ah, is there any way to make this even shorter still?
[04:54:11] <KirkMcDonald> rurik: What, other than a regular expression?
[04:54:16] <rurik> yes
[04:54:32] <rurik> I'd like the regulr expression solution as well
[04:55:17] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[04:55:19] <KirkMcDonald> rurik: s[0] + s.removeprefix(s[0])
[04:55:27] <KirkMcDonald> Er.
[04:55:33] <KirkMcDonald> rurik: s[0] + s.strip(s[0])
[04:55:35] <KirkMcDonald> That's what I meant.
[04:55:37] *** Joins: r3m (~launch@user/r3m)
[04:55:54] <KirkMcDonald> And actually: s[0] + s.lstrip(s[0])
[04:56:13] <KirkMcDonald> That's it.
[04:57:16] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[04:57:46] <KirkMcDonald> As for the regex approach, re.sub(r"^(.)(\1*)", r"\1", s)
[04:58:19] <rurik> I see
[04:59:31] *** Joins: ednhmn (~ednhmn@200.173.179.51)
[05:00:24] *** Quits: adeliktas (~adeliktas@200116b82203d9004c14741036ac2e75.dip.versatel-1u1.de) (Ping timeout: 256 seconds)
[05:00:46] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: rickybob)
[05:01:21] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[05:01:42] *** Quits: mallkrampus (~mallkramp@178.238.11.49) (Ping timeout: 268 seconds)
[05:02:00] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:02:37] <rurik> I have a string that I need to map to a code. Is there a better way to do it than this? https://bpa.st/7L2A
[05:02:55] *** Quits: Virgilio (virgilio@gateway/vpn/protonvpn/virgilio) (Remote host closed the connection)
[05:03:56] *** Joins: pycurious (~Adium@user/pycurious)
[05:04:58] *** Parts: akk (~akk@75.161.146.115) (+++)
[05:05:35] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 250 seconds)
[05:08:23] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[05:08:57] <nedbat> rurik: you haven't said what you need the code to do.  this can't be reversed, for example. i guess that's ok?
[05:09:14] *** Quits: ArtfulDodger (~ArtfulDod@2a02-8440-6311-0f28-78ba-13a3-5b05-4fb6.rev.sfr.net) (Read error: Connection reset by peer)
[05:09:30] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[05:11:00] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[05:11:52] *** Quits: LuxuryMode (uid91005@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:12:15] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[05:12:16] *** Quits: delvian (~delvian@41.13.200.36) (Ping timeout: 256 seconds)
[05:13:08] <nedbat> rurik: it seems to be based on phonetics.  what will you do with the code? Maybe it would be more convenient to return a string than a list of characters?
[05:13:25] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[05:14:05] <rurik> nedbat: indeed, i'm implementing the soundex algorithm piece by piece https://en.wikipedia.org/wiki/Soundex
[05:15:25] *** Joins: mallkrampus (~mallkramp@178.238.11.49)
[05:15:45] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:15:53] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[05:16:12] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[05:16:47] *** Quits: zaquest (~notzaques@5.130.79.72) (Quit: Leaving)
[05:17:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[05:18:29] <mat001> Can line 1 and 3 be merged (simplified)? But without saying "if not myfunct():" https://bpa.st/RDQQ
[05:18:45] <mat001> because I need to reuse a down the file
[05:19:27] *** Quits: flokuehn (~flokuehn@87.123.247.43) (Ping timeout: 250 seconds)
[05:20:06] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[05:20:46] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[05:21:31] *** Joins: flokuehn (~flokuehn@87.123.247.94)
[05:21:56] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[05:25:30] *** Joins: frost (~frost@user/frost)
[05:25:49] *** Quits: max3 (~webchat29@2620:10d:c090:400::5:45a8) (Quit: Client closed)
[05:26:06] <mat001> oops, sorry, pl signore...there is more to the code that missed. question no longer relevant
[05:26:59] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[05:28:30] *** Joins: drewlander_ (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net)
[05:29:03] *** Quits: shawwwn (uid6132@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:29:04] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[05:29:11] *** Quits: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net) (Ping timeout: 264 seconds)
[05:29:17] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[05:29:34] *** Quits: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053) (Quit: WeeChat 3.3)
[05:30:22] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:31:32] *** Joins: BillyZane (~BillyZane@91.196.220.172)
[05:31:46] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 265 seconds)
[05:32:27] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 250 seconds)
[05:32:41] *** Joins: Common (~Common@user/common)
[05:33:13] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[05:33:22] *** Joins: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053)
[05:34:39] *** Joins: nomic (~nomic@185.217.117.59)
[05:34:56] *** Quits: mallkrampus (~mallkramp@178.238.11.49) (Ping timeout: 256 seconds)
[05:36:14] *** Quits: mokytis_ (~root@139.59.163.130) (Changing host)
[05:36:14] *** Joins: mokytis_ (~root@user/mokytis/x-7723836)
[05:36:29] *** Quits: mokytis_ (~root@user/mokytis/x-7723836) (Quit: Reconnecting)
[05:36:36] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[05:36:39] *** Joins: mokytis__ (~root@user/mokytis/x-7723836)
[05:36:46] *** mokytis__ is now known as mokytis_
[05:39:46] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[05:41:11] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 264 seconds)
[05:42:09] *** Joins: ednhmn_ (~ednhmn@200.173.177.188)
[05:43:27] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[05:43:49] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[05:44:02] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 240 seconds)
[05:44:15] *** Quits: ednhmn (~ednhmn@200.173.179.51) (Ping timeout: 268 seconds)
[05:46:04] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[05:48:00] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:48:52] *** Quits: chronon (~chronon@user/chronon) (Ping timeout: 260 seconds)
[05:49:07] *** Joins: mallkrampus (~mallkramp@178.238.11.47)
[05:50:04] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Quit: Leaving)
[05:50:17] *** Joins: chronon (~chronon@user/chronon)
[05:51:09] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:51:55] *** Quits: ednhmn_ (~ednhmn@200.173.177.188) (Remote host closed the connection)
[05:53:25] *** Quits: drewlander_ (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[05:55:19] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[05:55:20] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[05:57:43] *** Joins: tm007 (uid287041@uxbridge.irccloud.com)
[05:58:23] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[05:58:57] <aphysically> it looks like the variadic generics PEP has been effectively (but not officially) unaccepted
[05:59:07] <aphysically> (to be reconsidered)
[05:59:57] <aphysically> It might just be some huffing and puffing over the late change rather than any indication they intend to change their mind
[06:00:58] <aphysically> I also can't make sense of the timing unless PEP decisions are announced well after they're made
[06:01:08] <aphysically> (in this case a month?)
[06:01:38] *** Joins: pycurious (~Adium@user/pycurious)
[06:02:02] <aphysically> maybe they just missed the messages on it, heh
[06:02:32] *** Joins: ednhmn (~ednhmn@200.173.177.188)
[06:03:43] *** Joins: lionslicer (~lionslice@2804:d41:a7a6:1300:287b:60d2:d05a:3ceb)
[06:05:26] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[06:05:31] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Remote host closed the connection)
[06:05:44] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:06:58] *** Quits: ednhmn (~ednhmn@200.173.177.188) (Remote host closed the connection)
[06:07:08] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[06:07:12] *** Joins: ednhmn (~ednhmn@200.173.177.188)
[06:08:08] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[06:08:38] *** Quits: ednhmn (~ednhmn@200.173.177.188) (Remote host closed the connection)
[06:09:28] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 265 seconds)
[06:09:40] *** Joins: brabrax (~brabrax@user/brabrax)
[06:11:01] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[06:12:52] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[06:13:56] *** Joins: Viewday114 (~Viewday@user/viewday)
[06:15:30] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[06:15:30] *** Viewday114 is now known as Viewday11
[06:16:31] *** Joins: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net)
[06:16:44] *** Joins: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net)
[06:17:33] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[06:19:38] *** Quits: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net) (Client Quit)
[06:20:43] *** Joins: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831)
[06:22:36] *** Joins: mickey85 (~user@user/mickey)
[06:22:50] *** Joins: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net)
[06:23:11] *** Joins: buzzard_ (~buzzard@host-67-45-96-33.hnremote.net)
[06:23:56] *** Quits: buzzard_ (~buzzard@host-67-45-96-33.hnremote.net) (Client Quit)
[06:24:24] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[06:24:24] *** mickey85 is now known as mickey8
[06:26:20] *** Quits: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net) (Client Quit)
[06:26:34] *** Joins: ornxka (~ornxka@user/ornxka)
[06:26:52] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[06:26:56] *** Joins: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net)
[06:27:02] *** Quits: johnkeats6 (~johnkeats@2804:14c:32:a0cc:d8d8:7122:dfee:b806) (Ping timeout: 240 seconds)
[06:27:18] *** Quits: chatcat (chatcat@gateway/vpn/airvpn/chatcat) (Quit: Leaving)
[06:27:47] <ornxka> when i do mod = runpy.run_path(mypath) and in mypath i have class Foo(Bar): blah blah, mod.items()[n] corresponding to Foo is of type module
[06:28:02] <ornxka> but when i do class Foo:, the type of mod.items()[n] is type class
[06:28:12] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 256 seconds)
[06:28:20] <ornxka> ??? why??
[06:28:53] <ornxka> why does class Foo: yield a type of class and class Foo(Bar): yield a module
[06:29:18] *** Quits: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Quit: No Ping reply in 180 seconds.)
[06:29:29] <ornxka> also this is python 2.7
[06:29:39] *** Quits: emerent (~quassel@p200300cd572be6aeba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:29:46] <bpalmer> what's the type of Bar?
[06:30:03] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[06:30:15] *** Joins: emerent (~quassel@p200300cd571f93e8ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:30:25] <ornxka> ahhhhhhhhh
[06:30:32] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:30:34] <ornxka> i needed Bar.Bar :p
[06:30:43] *** Joins: RiFo (~RiFo@user/rifo)
[06:30:51] <ornxka> but wtf does class Foo(SomeModule): mean..
[06:31:02] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:c01b:60fe:9558:2d95) (Ping timeout: 240 seconds)
[06:31:23] <ornxka> does python let you subclass from instances of a class or something?
[06:31:40] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[06:32:09] *** Joins: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch)
[06:32:18] <bpalmer> no, it doesn't, but I thought that would be interesting data that you could trivially check before I started thinking about what could result in your situation.
[06:32:46] <ornxka> well, evidently Bar was a module and not a class
[06:32:55] <bpalmer> (or, rather, I think you could probably hack something together with a metaclass so it "works" but...)
[06:33:00] <ornxka> so now im just confused about what it was doing before
[06:33:30] *** Quits: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[06:33:33] *** Joins: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net)
[06:33:43] <bpalmer> probably you used to have from x.Bar import Bar   and you changed that to from x import Bar
[06:34:21] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:9965:319a:ef17:fff9)
[06:34:36] <ornxka> indeed this all happened after a big refactor of a bunch of modules
[06:34:47] <bpalmer> or maybe you used to do 'from x import Bar; from y import *' and y had previously imported Bar.Bar
[06:35:05] *** Joins: Viewday116 (~Viewday@user/viewday)
[06:35:26] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 268 seconds)
[06:37:16] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[06:37:17] *** Viewday116 is now known as Viewday11
[06:37:21] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[06:37:40] <foo> From a git process workflow perspective, does it make sense to A) merge feature branches into master and reconcile/resolve conflicts when merging into master... or does it make senes to rebase feature branch with master, and then merge feature branch into master
[06:38:23] *** Joins: zaquest (~notzaques@5.130.79.72)
[06:41:19] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[06:42:56] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 256 seconds)
[06:44:44] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[06:45:22] <grym> i always pull master into my feature branch before i submit a PR
[06:45:23] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[06:45:28] <grym> why should they have to do more work just because of me?
[06:45:46] <grym> even when they is also me
[06:45:55] *** Joins: pycurious (~Adium@user/pycurious)
[06:46:12] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[06:46:16] <bpalmer> Well, of course I know him. He's me.
[06:46:32] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:9965:319a:ef17:fff9) (Ping timeout: 240 seconds)
[06:46:49] <bpalmer> the motto of every programer thinking of the next victim of their code (modulo pronouns).
[06:47:00] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[06:47:54] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[06:48:03] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:c9c2:f9da:e6bb:5682)
[06:48:59] <grym> those that heed the advice of our predecessors, at least
[06:50:37] <foo> grym: 19:15 < grym> even when they is also me :) Thank you.
[06:50:48] <foo> grym: when you pull master into your feature branch, I assume you merge, not rebase?
[06:50:59] <grym> foo: yeah.  i don't understand rebases so i don't do them
[06:51:17] <foo> grym: I believe it skips the "merge" in the commit log but it rewrites IDs
[06:51:19] <grym> and i don't mind looking at logs over more commits
[06:51:28] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 268 seconds)
[06:52:14] <grym> the fanciest things i regularly do are things like checking out a file from one branch to another
[06:52:34] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 256 seconds)
[06:52:42] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[06:53:00] <grym> or occasionally amending/extending a commit, which miiight have a rebase in there somewhere now that i think about it
[06:53:06] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[06:53:40] *** Joins: Fiji (~Fiji@user/fiji)
[06:54:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[06:56:44] *** Joins: fikran (~fikran@user/fikran)
[06:57:33] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:57:33] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:57:33] *** finn_elija is now known as FinnElija
[06:59:46] *** Joins: pycurious (~Adium@user/pycurious)
[07:01:10] *** Joins: y1n (~y1n@178.165.170.178.wireless.dyn.drei.com)
[07:04:25] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[07:04:25] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[07:04:32] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[07:04:59] *** Joins: pycurious (~Adium@user/pycurious)
[07:05:33] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[07:07:27] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:09:59] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 264 seconds)
[07:10:08] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[07:10:48] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:12:17] *** Joins: ednhmn (~ednhmn@200.173.177.188)
[07:12:17] *** Quits: ednhmn (~ednhmn@200.173.177.188) (Remote host closed the connection)
[07:12:28] *** Quits: rurik (~textual@dslb-002-203-156-111.002.203.pools.vodafone-ip.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:13:03] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 268 seconds)
[07:13:04] *** Quits: thurs8060142 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[07:13:12] *** Joins: PJBoy (~PJBoy@user/pjboy)
[07:14:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:14:29] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[07:14:34] *** Joins: thurs8060142 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[07:15:48] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[07:18:31] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[07:18:37] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[07:19:48] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:dd2:e15e:f04e:1690) (Ping timeout: 256 seconds)
[07:19:48] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[07:20:01] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[07:22:10] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[07:22:18] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[07:23:07] *** Joins: pycurious (~Adium@user/pycurious)
[07:23:42] *** Joins: juniorom (~junior@177.170.216.223)
[07:23:45] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[07:25:50] *** Joins: onichomp (~onichomp@2806:264:4404:80fd:b94b:4d91:cf7:1db5)
[07:25:54] *** Quits: juniorom (~junior@177.170.216.223) (Remote host closed the connection)
[07:26:00] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 256 seconds)
[07:27:00] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:f54f:22a2:7c84:1461)
[07:27:00] *** Quits: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch) (Remote host closed the connection)
[07:27:20] *** Joins: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch)
[07:27:38] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[07:27:50] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[07:29:42] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:c9c2:f9da:e6bb:5682) (Ping timeout: 268 seconds)
[07:34:56] <Cl0udNinja> re-askin again as my question seems to have gotten lost. using SQLAlchemy, is it possible to dynamically set/unset hide_parameters on an engine?
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:09] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:9d18:4862:d949:6f72)
[07:38:01] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[07:38:05] *** Quits: mr_ab (~nobody@bnc.ab.hl9.net) (Quit: Upgrade.)
[07:38:19] *** Joins: kdc (~kdc@196.211.197.159)
[07:39:02] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:f54f:22a2:7c84:1461) (Ping timeout: 240 seconds)
[07:40:11] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 268 seconds)
[07:42:24] *** Joins: pycurious (~Adium@user/pycurious)
[07:43:32] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[07:44:30] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:44:37] *** Joins: mr_ab (~nobody@bnc.ab.hl9.net)
[07:44:38] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[07:45:08] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[07:45:39] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 265 seconds)
[07:45:39] *** jmiehe1 is now known as jmiehe
[07:46:07] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2da1:529b:e827:2fbb)
[07:47:32] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:9d18:4862:d949:6f72) (Ping timeout: 240 seconds)
[07:48:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:49:46] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:51:29] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[07:51:47] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[07:52:52] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[07:53:03] <foo> Semi-off-topic: I think git reset --hard HEAD~1 can undo a git merge - can someone confirm? Err, I'm confused. I merged in a branch. And I see that my branch is now behind origin 35 commits. BUT if I git log, I can clearly see there's 4 commits between current HEAD and origin. I'm so confused.
[07:53:11] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[07:54:18] *** Quits: humberto1 (~humbertow@189.236.62.65) (Read error: Connection reset by peer)
[07:54:19] *** Joins: humbertowoody (~humbertow@189.236.62.65)
[07:54:42] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[07:56:57] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:58:04] *** Quits: y1n (~y1n@178.165.170.178.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[07:58:41] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 268 seconds)
[08:00:45] *** Joins: lethu (~lethu@user/lethu)
[08:01:54] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[08:02:47] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:45bd:2d1d:42f2:f442)
[08:03:14] *** Joins: JoelJoel (~jjshoe@user/joel)
[08:04:12] *** Quits: Joel (~jjshoe@user/joel) (Ping timeout: 260 seconds)
[08:05:40] *** Quits: l4yer (~l4yer@195.181.170.210) (Ping timeout: 256 seconds)
[08:06:05] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2da1:529b:e827:2fbb) (Ping timeout: 268 seconds)
[08:09:00] <foo> grym: ping
[08:09:10] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[08:10:35] *** Quits: zepolen (~zepolen@2a02:587:293f:b5fe:a9ae:7515:90f4:3484) (Ping timeout: 264 seconds)
[08:11:35] *** Quits: ckdCreations (~ckdCreati@147.55.133.137) (Read error: Connection reset by peer)
[08:11:58] *** Joins: ckdCreations (~ckdCreati@147.55.130.32)
[08:13:09] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[08:14:10] *** Quits: mallkrampus (~mallkramp@178.238.11.47) (Ping timeout: 256 seconds)
[08:19:03] *** Joins: AuxillaryClinton (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[08:19:30] *** Quits: lionslicer (~lionslice@2804:d41:a7a6:1300:287b:60d2:d05a:3ceb) (Remote host closed the connection)
[08:19:35] *** Joins: l4yer (~l4yer@195.181.170.210)
[08:19:39] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:20:33] <AuxillaryClinton> from meatverse import steak as A1        <<<<anyone know if metaverse python code will llook llike this?
[08:21:11] <AuxillaryClinton> we got sallt hash steak and A1 sauce
[08:21:27] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:21:46] <AuxillaryClinton> and HMAC and cheese with some salt for security
[08:23:30] <AuxillaryClinton> if anyone knows what the HMAC (hash message authentication code) is, llet me know; need to figure out how to connect to meat verse.
[08:26:29] <AuxillaryClinton> they are running wholesale on fresh phish in the meatverse
[08:27:04] *** Quits: Mechanismus (~LabMonkey@206.255.106.67) (Quit: Leaving)
[08:27:33] *** Joins: dba (uid502594@hampstead.irccloud.com)
[08:27:58] *** Joins: hudo__ (~hudo@62.68.19.39)
[08:28:32] *** Joins: backthen (~backthen@c-76-103-177-91.hsd1.ca.comcast.net)
[08:28:37] *** Joins: mallkrampus (~mallkramp@185.169.233.48)
[08:28:54] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[08:29:34] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[08:30:11] <dba> just to clarify one thing, the python interpreter will create a new object for immutable variables in memory whenever the variable changed, example x = 1 and then we did x = x+1, in the this case we would have to object created in memory for x, am I right/
[08:30:13] <dba> ?
[08:30:23] *** Quits: Holarctic (~Hola@77.77.217.66) (Ping timeout: 264 seconds)
[08:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[08:30:44] <backthen> hi when I use pip to install modules, some are installed to /home/me/.local/lib/python3.8/site-package. Others are installed to /usr/lib/python3/dist-package . How come?
[08:31:06] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:45bd:2d1d:42f2:f442) (Quit: WeeChat 3.3)
[08:31:07] *** Joins: djhankb (~djhankb@208.113.164.68)
[08:31:13] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[08:31:42] <pystardust> backthen: that depends on whether you decide to install the packages as a user or root
[08:31:53] <dba> backthen, are you using virtual environment, if not try to setup one for your project
[08:32:27] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[08:33:20] <pystardust> the usual syntax to install `pip install <pkg>` is root lvl syntax but will automatically convert to user level if privileges are not met. The user way of installing is  pip install --user <pkg>
[08:33:26] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[08:34:21] <backthen> pystardust: hmm, any way to force to /usr/lib/python3/ ?
[08:34:53] <backthen> dba: no, on ubuntu20. You mean like using Docker?
[08:36:30] <backthen> I guess I use sudo pip install
[08:36:33] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[08:36:58] *** Joins: parv (~quass@user/parv)
[08:37:20] <dba> backthen, on your project folder create a new virtual envirement using python3 -m venv venv and activate is using source /venv/source/activate all packages then will be installed in the virtual env
[08:37:44] <TingPing> ^ Its a terrible idea to overwrite your systems files
[08:40:06] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[08:40:44] *** Joins: Somni (~insomnia@77-88-237-24.gci.net)
[08:41:06] <backthen> My problem is this. I'm using https://pypi.org/project/python-for-android/ to compile for Android APK. But the APK is ran, some libraries, such as 'requests', 'jsonschema', give error module not found
[08:41:47] <backthen> I don't know why and am suspecting maybe the scattered paths of module install could be cause
[08:42:00] <TingPing> backthen: apt install python3-requests python3-jsonschema
[08:42:23] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 264 seconds)
[08:43:01] <TingPing> maybe not the latest versions but apt should manage system wide packages
[08:43:04] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 256 seconds)
[08:43:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:43:38] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 256 seconds)
[08:44:47] <jinsun> and if you want to use pip then better make a venv or even better don't touch system python and use pyenv
[08:46:35] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.149-27.dynamic.3bb.co.th) (Ping timeout: 264 seconds)
[08:47:01] <backthen> oh does pip not do a good job or break things compared to apt install?
[08:47:47] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 264 seconds)
[08:48:09] <TingPing> backthen: the entire concept of a distro and a packager manager is that a single tool manages your system to... well function. If you start writing random files into /usr all of that becomes an unknown state
[08:48:32] *** Joins: robyndrake (~robyndrak@user/robyndrake)
[08:49:05] <TingPing> maybe `foo` in your system depends on `python3-bar 1.2.3` or it explodes, and `pip` installs bar 3.0
[08:50:31] <backthen> ok. So far I installed everything with pip. I can redo with apt install python3-something
[08:50:57] *** Joins: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net)
[08:51:04] <TingPing> well, *maybe*, you should have pip remove it first to ensure random files are not left over.
[08:51:49] *** Joins: Mechanismus (~LabMonkey@206.255.106.67)
[08:51:59] *** Quits: jonthesnow (~xizhendu@36.112.188.169) (Ping timeout: 264 seconds)
[08:52:45] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[08:53:20] <jinsun> solving sudo pip with more sudo pip could be dangerous, better to live with random extra files I would say, just force reinstall stuff with apt
[08:53:39] <TingPing> you might be right, yeah
[08:56:55] *** Joins: pycurious (~Adium@user/pycurious)
[09:00:54] *** Joins: dude-x (~textual@72.76.74.165)
[09:01:35] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[09:04:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[09:04:45] <BrenBarn> sup dawg I heard you like sudo pip
[09:04:51] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:dd2:e15e:f04e:1690)
[09:05:35] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Quit: mihaiadrian)
[09:05:45] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[09:05:46] <parv> lol
[09:06:05] *** Joins: fikran (~fikran@user/fikran)
[09:08:31] *** Quits: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com) (Quit: jarthur)
[09:10:04] *** Joins: humberto1 (~humbertow@189.236.62.65)
[09:10:16] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[09:10:30] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[09:10:50] *** Quits: humbertowoody (~humbertow@189.236.62.65) (Ping timeout: 268 seconds)
[09:11:21] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[09:15:23] *** Quits: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[09:16:12] *** Joins: pycurious (~Adium@user/pycurious)
[09:18:44] *** davor_ is now known as davor
[09:19:39] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[09:21:36] *** Quits: hudo__ (~hudo@62.68.19.39) (Ping timeout: 256 seconds)
[09:23:11] *** Joins: humbertowoody (~humbertow@189.236.62.65)
[09:23:47] *** Quits: humberto1 (~humbertow@189.236.62.65) (Ping timeout: 264 seconds)
[09:24:45] *** Joins: node1 (~node1@user/node1)
[09:25:18] *** Quits: node1 (~node1@user/node1) (Write error: Broken pipe)
[09:26:18] *** Quits: zebrag (~chris@user/zebrag) (Read error: Connection reset by peer)
[09:26:19] *** Joins: mei (~mei@user/mei)
[09:27:52] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:dd2:e15e:f04e:1690) (Ping timeout: 256 seconds)
[09:28:51] *** Joins: stranac (~stranac@195.29.239.126)
[09:32:56] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[09:33:50] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:33:54] *** Joins: humberto1 (~humbertow@189.236.62.65)
[09:36:44] *** Quits: humbertowoody (~humbertow@189.236.62.65) (Ping timeout: 268 seconds)
[09:37:17] *** Joins: jonthesnow (~xizhendu@36.112.188.169)
[09:37:27] *** Joins: teut (~teut@182.68.64.194)
[09:37:28] *** Quits: AuxillaryClinton (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Quit: Changing server)
[09:37:44] *** Joins: audiobirb (~audio@user/audio)
[09:38:31] *** Joins: AuxillaryClinton (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[09:38:35] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:e1cf:29d3:9410:8401)
[09:38:47] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[09:39:27] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:dc79:96fc:6ad2:9979) (Read error: Connection reset by peer)
[09:41:11] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 264 seconds)
[09:42:54] *** Quits: Jefren1 (~Jefren@70.35.66.187) (Ping timeout: 268 seconds)
[09:44:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:46:14] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:47:07] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[09:47:09] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:47:31] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[09:48:41] *** Joins: delvian (~delvian@41.13.246.212)
[09:49:11] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[09:49:33] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[09:51:33] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[09:52:07] *** Quits: nomic (~nomic@185.217.117.59) (Quit: Leaving)
[09:53:55] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[09:55:15] *** Joins: Jefren1 (~Jefren@70.35.66.187)
[09:58:49] *** Joins: Lazenca (Lazenca@user/lazenca)
[10:00:47] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[10:03:23] *** Quits: jonthesnow (~xizhendu@36.112.188.169) (Ping timeout: 264 seconds)
[10:07:15] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[10:10:24] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:10:47] *** Joins: mrwick (~mrwick@user/mrwick)
[10:10:51] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[10:12:30] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[10:18:37] *** Joins: xardas (~xardas@149.233.51.127)
[10:19:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[10:20:11] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 264 seconds)
[10:21:06] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 256 seconds)
[10:21:40] *** Quits: Jefren1 (~Jefren@70.35.66.187) (Ping timeout: 256 seconds)
[10:22:22] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[10:23:15] *** Joins: node1 (~node1@user/node1)
[10:23:50] <node1> Hi
[10:24:01] *** Quits: node1 (~node1@user/node1) (Client Quit)
[10:24:06] *** Joins: Jefren1 (~Jefren@70.35.66.187)
[10:24:25] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[10:24:31] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[10:24:59] *** Joins: node1 (~node1@user/node1)
[10:26:25] <node1> I'm looking for solution   for pep8 standard error code E501 .
[10:27:23] *** Quits: humberto1 (~humbertow@189.236.62.65) (Ping timeout: 264 seconds)
[10:28:00] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:29:38] *** Quits: Bakunin (~Lindis@user/lindis) (Remote host closed the connection)
[10:29:38] *** Quits: Jefren1 (~Jefren@70.35.66.187) (Ping timeout: 260 seconds)
[10:29:39] *** Quits: node1 (~node1@user/node1) (Client Quit)
[10:31:20] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[10:31:52] *** Quits: AuxillaryClinton (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 256 seconds)
[10:32:38] *** Quits: dude-x (~textual@72.76.74.165) (Read error: Connection reset by peer)
[10:32:55] *** Joins: pycurious (~Adium@user/pycurious)
[10:33:19] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:33:28] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:33:31] *** Joins: dude-x (~textual@72.76.74.165)
[10:35:18] * mrwick prefers using () to break up long lines
[10:35:36] *** Joins: upsala (~zcb@185.213.155.252)
[10:35:50] *** Quits: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[10:37:35] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 264 seconds)
[10:38:42] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[10:38:43] *** Joins: humberto1 (~humbertow@189.236.62.65)
[10:38:49] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:e0e:6dbd:8d62:66e7)
[10:40:56] *** Joins: yoda__ (~yoda@gateway/tor-sasl/yoda)
[10:41:06] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[10:41:41] *** yoda__ is now known as yoda
[10:41:47] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[10:41:51] *** Joins: zepolen (~zepolen@2a02:587:293f:b5fe:a9ae:7515:90f4:3484)
[10:41:54] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:42:13] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[10:43:38] *** Quits: humberto1 (~humbertow@189.236.62.65) (Ping timeout: 260 seconds)
[10:44:17] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[10:44:50] *** Joins: abip20 (~abdullah@103.66.177.186)
[10:46:02] *** Quits: upsala (~zcb@185.213.155.252) (Ping timeout: 256 seconds)
[10:48:59] *** Quits: abip20 (~abdullah@103.66.177.186) (Client Quit)
[10:49:18] *** Joins: abip20 (~abdullah@103.66.177.186)
[10:49:56] *** Joins: pycurious (~Adium@user/pycurious)
[10:52:14] *** Joins: node1 (~node1@user/node1)
[10:52:48] <node1> I'm looking for solution   for pep8 standard error code E501 .
[10:53:27] *** Joins: han-solo (~hanish@user/han-solo)
[10:54:30] <supakeen> Depends on the line, if it's just a long string literal people generally ignore it.
[10:54:42] *** Quits: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il) (Quit: Leaving)
[10:54:52] *** Joins: gitesh (uid423739@ilkley.irccloud.com)
[10:54:58] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:55:04] <node1> I tried with  #  noqa but no success
[10:55:30] <supakeen> I generally turn off the warning and have an autoformatter make sure I have the 'right' line lengths.
[10:55:55] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:56:05] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 265 seconds)
[10:56:33] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:56:42] *** Quits: drew (~drew@user/drew) (Ping timeout: 260 seconds)
[10:57:19] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[10:57:31] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 268 seconds)
[10:57:56] <node1> What do you mean right line length, in general it should not be more then 79 character.
[10:58:12] *** Joins: luischi (~luigi@80.30.201.209)
[10:58:24] <supakeen> Exactly: in general.
[10:58:38] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[10:58:49] *** Cl0udNinja is now known as AccidentallyTheJ
[10:58:52] *** Joins: kuter (~kuter@public-gprs400608.centertel.pl)
[10:59:01] *** AccidentallyTheJ is now known as Cl0udNinja
[10:59:14] *** Quits: km (sid515529@user/km) ()
[10:59:35] <node1> If it is more then that 79 character  it will throw an error. And i tried ignoring it using # noqa, #   nopep8 but both seems at this moment useless
[10:59:47] <aphysically> jinsun: big fan of export PIP_REQUIRE_VIRTUALENV=true
[10:59:57] <aphysically> 👌
[11:00:33] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[11:00:34] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[11:00:47] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[11:00:53] <supakeen> node1: Can you show the line in question and where you placed those comments?
[11:01:12] <supakeen> And which linter you are using.
[11:01:30] *** Joins: seednode (~seednode@user/seednode)
[11:02:14] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Remote host closed the connection)
[11:02:51] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[11:03:06] *** Joins: xardas (~xardas@149.233.51.127)
[11:05:30] <node1> self.red_emission_photon = "%BlackHle_API_SERVER_PORT_MORESTRING_MORE_STRING_MORE_STRING_MORE_STRING% #  noqa
[11:05:31] *** Quits: doko (~doko@2a02:8106:1a:7600:d5ce:8cc6:6007:4381) (Ping timeout: 245 seconds)
[11:06:05] *** Joins: Tas-sos (~Tas-sos@78-203-151.adsl.cyta.gr)
[11:06:09] <supakeen> ok well the noqa comment should have 2 spaces in front and one after the #, so see if that helps, like so `...  # noqa`
[11:06:11] <node1> I'm just using it using vim
[11:06:40] <supakeen> Anyways, I have to run but it's likely something silly like that or your linter not understanding the directive. It's 'relatively' recent.
[11:06:43] <aphysically> good name tho
[11:06:44] <node1> i did that # noqa
[11:07:32] *** Quits: dre (~dre@2001:8003:c932:c301:f4c:269a:f23f:f4fc) (Ping timeout: 240 seconds)
[11:07:50] *** Joins: drew (~drew@user/drew)
[11:07:55] *** Quits: Sazpaimon (~wat@pool-71-175-29-161.phlapa.fios.verizon.net) (Read error: Connection reset by peer)
[11:08:59] <node1> What is linter and how do i fix that in vim?
[11:09:12] <jinsun> aphysically: oh yeah I should enable that too, I just have a kitchen sink venv active all the time
[11:09:59] *** Quits: abip20 (~abdullah@103.66.177.186) (Quit: Konversation terminated!)
[11:10:59] <rindolf> node1: https://github.com/caramelomartins/awesome-linters
[11:11:15] <aphysically> jinsun: yeah just put in your profile/zshrc/bashrc or whatever
[11:11:24] <aphysically> then you can't accidentally mess up your system
[11:11:42] <jinsun> yeah just added to bashrc
[11:12:16] *** Joins: hemstock (~hemstock@194.59.250.234)
[11:12:59] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 264 seconds)
[11:13:30] <jinsun> node1: you can give up and split your string too, "abcd" can be split up as ("ab" "cd")
[11:13:47] <jinsun> then keep each substring in a separate line
[11:13:48] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[11:13:52] *** Joins: Enitin (~Enitin@82.102.22.85)
[11:14:39] <node1> jinsun can you please explain into this line self.red_emission_photon = "%BlackHle_API_SERVER_PORT_MORESTRING_MORE_STRING_MORE_STRING_MORE_STRING%
[11:15:16] <node1> `self.red_emission_photon = "%BlackHle_API_SERVER_PORT_MORESTRING_MORE_STRING_MORE_STRING_MORE_STRING%`
[11:15:26] *** Joins: fikran (~fikran@user/fikran)
[11:16:07] *** Quits: tm007 (uid287041@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:16:09] <jinsun> node1: so you can do something like this https://bpa.st/APXQ
[11:16:48] <jinsun> notice no commas in between the strings, that combines them into one
[11:17:05] <jinsun> if you put commas it will become a tuple
[11:19:00] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[11:19:02] <node1> wow i never know it can be write into this way also
[11:19:02] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:19:10] <node1> thank you jinsun
[11:19:27] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:e1cf:29d3:9410:8401) (Quit: Client closed)
[11:19:53] *** Joins: vicfred (~vicfred@user/vicfred)
[11:20:42] <node1> but can you give the referal of this style where it's being mentioned in pep8 documentation
[11:20:46] *** Joins: Jefren1 (~Jefren@70.35.66.187)
[11:22:25] <jinsun> it is not really mentioned in pep8 I think, it is just a workaround for the long lines problem
[11:22:39] <node1> okay thank you :)
[11:22:41] <jinsun> and not always good to do
[11:23:05] <jinsun> like for long urls it is usually bad to split them
[11:23:41] <jinsun> so # noqa or something that disables it is better usually
[11:24:54] <node1> okay
[11:25:33] <jinsun> node1: even better to disablethe long lines check completely and use black to fix the long lines automatically for you https://github.com/psf/black
[11:25:38] *** Quits: mallkrampus (~mallkramp@185.169.233.48) (Ping timeout: 260 seconds)
[11:26:21] *** Joins: jmd (~user@de.cellform.com)
[11:29:39] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:29:57] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:31:55] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[11:32:32] *** Quits: node1 (~node1@user/node1) (Ping timeout: 256 seconds)
[11:33:23] *** Joins: grooverman_ (~grooverma@177.102.117.95)
[11:33:38] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[11:33:45] <mrwick> jinsun: why is it bad to split long urls? possible mistakes? I usually at least try to get the hostname and any common paths as a separate string (or included in parens)
[11:35:11] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 264 seconds)
[11:36:28] *** Joins: adiKt (uid472628@tinside.irccloud.com)
[11:37:08] <jinsun> mrwick: it is not too bad, I say it is bad just to satisfy the linter, since it doesn't doesn't help readability, just becomes hard to copy paste (or ctrl+click from vscode)
[11:37:21] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:37:57] <jinsun> if you have other good reasons to split than just satisfying the linter then do it
[11:38:45] *** Joins: ubert (~Thunderbi@p200300ecdf0ba29adda7833ccd9cfa98.dip0.t-ipconnect.de)
[11:40:41] *** Joins: mallkrampus (~mallkramp@178.238.11.48)
[11:41:16] *** Joins: adeliktas (~adeliktas@200116b8223dbc00494bb8b9b20f75eb.dip.versatel-1u1.de)
[11:41:22] <mrwick> well my reason is readability, as I am typically using vim in a 165 character wide term
[11:42:18] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:43:29] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:43:47] <jinsun> for urls readability is less important though, I don't read long urls, copy pasting or clicking is more convenient
[11:45:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:46:03] *** Joins: palasso (~palasso@user/palasso)
[11:46:34] *** Joins: node1 (~node1@user/node1)
[11:46:39] <mrwick> you must mean for documenting things, I mean for interacting with api's, things you would never need to use a mouse for
[11:46:57] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 276 seconds)
[11:47:31] *** Joins: Jonopoly (~Jonopoly@user/jonopoly)
[11:48:11] *** Joins: sickdugongo (~sickdugon@user/sickdugongo)
[11:49:20] <jinsun> okay, yeah that is more important for docstrings and comments, for interacting with apis I split the host and common paths
[11:49:35] *** Joins: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[11:49:50] *** Joins: rendar (~rendar@user/rendar)
[11:49:57] *** Joins: frost (~frost@user/frost)
[11:50:16] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[11:53:25] *** Joins: sazawal (~sazawal@223.190.87.36)
[11:54:36] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 256 seconds)
[11:57:20] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[12:01:08] *** Joins: anonymeowo (~anonymeow@107.189.14.18)
[12:02:17] <jmd> Is there an easy way to override a global variable on the command line on startup?
[12:03:40] *** Joins: dorf (~mstendorf@85.184.147.151)
[12:03:53] *** Joins: kosh (~kosh@user/kosh)
[12:04:17] *** Joins: falk689_ (~falk689-q@gateway/tor-sasl/falk689)
[12:04:19] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[12:04:54] <node1> jinsun https://bpa.st/NXSA  can we write this syntax as well.
[12:05:28] *** Joins: pycurious (~Adium@user/pycurious)
[12:05:36] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi)
[12:05:54] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:06:16] <dorf> Hi, I need help wrapping my head around virtualenv/pyenv whatever. In the past i just installed all my libraries using sudo, so they are available systemwide (only developing one project in python anyway), recent updates to setuptools made it so that when doing that packages are only available to root. So i figured i would start getting into pyenv. But how would i go about running a django project or whatever as root then, when all the
[12:06:16] <dorf> libraries are installed in the user pyenv? Am i missing something?
[12:06:28] <jinsun> node1: yes and no, you can put brackets around the thing to split it, but don't add quotes
[12:06:46] <node1> I have not  given a quotes.
[12:08:12] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:09:59] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 264 seconds)
[12:12:08] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 268 seconds)
[12:12:20] *** Joins: Crepe (~Crepe@user/crepe)
[12:12:23] <Crepe> hi
[12:12:58] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:14:00] *** Joins: e2m4n (~ezman@user/e2m4n)
[12:15:50] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[12:16:00] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:16:08] *** Quits: jess (~jess@libera/staff/jess) (Quit: Lost terminal)
[12:16:46] *** Joins: shad (~shad@user/shad)
[12:16:50] *** Joins: jess (~jess@libera/staff/jess)
[12:17:21] <jinsun_> <node1> "I have not  given a quotes." <- just let black do it for you as I mentioned before, and don't worry about it while typing
[12:19:25] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:21:42] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:22:04] *** Joins: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk)
[12:22:51] *** Joins: pycurious (~Adium@user/pycurious)
[12:23:21] *** Joins: tobybl_ (~tobybl@dhcp-199-132.inf.ed.ac.uk)
[12:24:09] <rindolf> Crepe: hi
[12:24:23] *** Joins: arinov (~arinov@213.194.126.155)
[12:26:32] *** Quits: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk) (Ping timeout: 240 seconds)
[12:27:21] *** Joins: zoneu (~zoneu@user/zoneu)
[12:28:02] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:28:10] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[12:28:57] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[12:29:08] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:31:22] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:32:06] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[12:32:50] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[12:35:13] *** dcaro_away is now known as dcaro
[12:36:13] *** Quits: gustik (~gustik@2a01:c844:240a:de20:3606:7339:bc88:b5f5) (Quit: Leaving)
[12:37:12] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[12:42:02] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[12:42:26] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:43:06] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[12:43:08] *** Joins: ali1234 (~al@user/ali1234)
[12:43:41] *** Joins: manti7 (~manti7@176.10.104.94)
[12:44:37] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:46:27] *** Quits: luischi (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[12:47:18] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:48:28] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[12:49:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[12:51:17] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[12:51:32] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[12:51:48] *** Joins: tsaka__ (~torstein@31.177.97.84)
[12:51:58] *** Quits: todda7 (~torstein@31.4.137.30) (Ping timeout: 260 seconds)
[12:52:02] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[12:52:36] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[12:53:44] *** Joins: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de)
[12:53:54] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[12:54:14] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[12:56:13] *** Quits: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de) (Client Quit)
[12:57:01] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:57:12] *** Joins: upsala (~zcb@185.213.155.252)
[12:58:38] *** Joins: swensson (~swensson@host-90-235-29-81.mobileonline.telia.com)
[13:03:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:04:16] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:04:19] *** Joins: Klinda (~superleag@user/klinda)
[13:05:15] <wyre> why I can see these three dots in `ser = serial.Serial(...)` in here? https://pyserial.readthedocs.io/en/latest/pyserial_api.html?highlight=#rs485-support
[13:05:21] <wyre> I mean, what are these three dots? 🤔
[13:05:31] *** Joins: jinsun__ (~quassel@user/jinsun)
[13:06:35] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 250 seconds)
[13:07:50] <rindolf> wyre: parameters
[13:07:59] *** Joins: jinsun (~quassel@user/jinsun)
[13:08:36] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:09:14] *** Joins: jinsun___ (~quassel@user/jinsun)
[13:09:22] <wyre> rindolf, so it's just like a placeholder? 🤔
[13:09:24] *** Joins: kevr (~kevr@user/kevr)
[13:11:23] <rindolf> wyre: yes.
[13:11:27] *** Joins: plastico (~plastico@neomutt/plastico)
[13:11:57] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[13:12:30] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 260 seconds)
[13:12:57] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:13:03] <wyre> rindolf, according to this https://pyserial.readthedocs.io/en/latest/shortintro.html#opening-serial-ports I should be able to use Serial() but ... I'm having an attribute error https://bpa.st/I56Q
[13:13:14] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[13:13:52] <han-solo> wyre: did you `import serial` ?
[13:14:01] <wyre> sure, and serial.rs485
[13:14:42] *** Quits: vaio (~gary@user/ghost) (Ping timeout: 276 seconds)
[13:14:44] <han-solo> do you have any file named `serial.py` in that path ?
[13:14:51] <wyre> this is what I'm testing https://bpa.st/SXYA
[13:15:20] <wyre> han-solo, https://bpa.st/RBJQ
[13:15:48] <han-solo> i mean, in your current dir
[13:16:07] <wyre> https://bpa.st/6HAA han-solo nope
[13:16:14] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[13:16:29] <wyre> https://bpa.st/KMJQ
[13:17:21] <han-solo> Okay
[13:18:01] <wyre> so ... I'm not sure what's actually happening 😞
[13:18:36] *** Quits: falk689_ (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[13:18:52] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[13:19:20] <rindolf> wyre: try https://en.wikipedia.org/wiki/Strace
[13:19:21] <han-solo> did you install pyserial or just serial ?
[13:19:31] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[13:19:33] <wyre> han-solo, I've tried both
[13:19:41] <han-solo> i'm reading, you might need to remove the latter
[13:19:58] <wyre> I see
[13:19:59] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[13:20:05] <wyre> let's try that 😜
[13:20:09] <rindolf> wyre: try https://en.wikipedia.org/wiki/Strace
[13:20:12] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[13:21:23] *** Quits: parv (~quass@user/parv) (Ping timeout: 264 seconds)
[13:21:33] *** Joins: dre (~dre@119-18-0-198.771200.syd.nbn.aussiebb.net)
[13:22:48] <wyre> https://bpa.st/OMOA
[13:23:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[13:23:21] <wyre> han-solo, I'm actually using yocto (I mean I generated the image I flashed in the SoM) and ... maybe I should regen the image without serialtools 🤔
[13:23:29] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[13:24:47] *** Joins: fikran (~fikran@user/fikran)
[13:24:54] *** Quits: kuter (~kuter@public-gprs400608.centertel.pl) (Ping timeout: 268 seconds)
[13:25:00] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[13:25:34] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[13:26:26] *** Joins: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de)
[13:28:27] *** Quits: RiFo (~RiFo@user/rifo) (Quit: ... and thanks for all the fish.)
[13:28:56] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:29:34] <lxer> Question for AWS Lambda users: what would be a good way to do integration tests, having lots of events (as fixtures) and check the Lambda responses? (seems like a lot of work, so I guess there's a better way)
[13:29:51] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[13:30:04] *** Joins: kdc (~kdc@196.211.197.159)
[13:30:14] *** Joins: RiFo (~RiFo@user/rifo)
[13:30:17] <han-solo> wyre: https://bpa.st/YRFQ
[13:31:16] <wyre> nice suggestion, I'll try with a venv, I didn't think about it 😊
[13:32:31] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:33:19] *** Quits: orbatos (~orbatos@user/orbatos) (Read error: Connection reset by peer)
[13:33:34] *** Joins: orbatos (~orbatos@user/orbatos)
[13:33:37] <wyre> han-solo, but it's not `serial` a built-in? 🤔
[13:33:59] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[13:34:02] <han-solo> no, i don't think there's a `serial` builtin
[13:35:03] *** Joins: CyDefect (~troll@213.55.224.219)
[13:35:35] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:36:33] *** Quits: Gerula (~Gerula@user/gerula) (Ping timeout: 265 seconds)
[13:36:37] *** Quits: onichomp (~onichomp@2806:264:4404:80fd:b94b:4d91:cf7:1db5) (Ping timeout: 268 seconds)
[13:36:42] *** Joins: onichomp666 (~onichomp@2806:264:4404:8016:31c1:e7b8:cdac:a7ff)
[13:37:50] *** Joins: pycurious (~Adium@user/pycurious)
[13:38:11] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 264 seconds)
[13:39:18] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:39:51] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[13:40:34] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 256 seconds)
[13:42:16] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 256 seconds)
[13:42:59] *** Quits: Jefren1 (~Jefren@70.35.66.187) (Ping timeout: 264 seconds)
[13:43:04] *** Joins: pycurious (~Adium@user/pycurious)
[13:43:19] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:44:35] *** Quits: jinsun___ (~quassel@user/jinsun) (Read error: Connection reset by peer)
[13:44:58] *** Joins: jaggz (~jaggz@user/jaggz)
[13:44:59] <jaggz> btdev.getServices()
[13:45:00] <jaggz> dict_values([<bluepy.btle.Service object at 0x7fd4528786d0>,
[13:45:03] *** Joins: jinsun (~quassel@user/jinsun)
[13:45:05] <jaggz> how do I access the keys of this thing?
[13:45:15] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[13:45:42] <jaggz> or, hell, just the values.. trying to examine these bluetooth services of this device
[13:45:46] *** Joins: guenhael (~Thunderbi@2a01cb008c3d580005185bc1130ccfdf.ipv6.abo.wanadoo.fr)
[13:45:57] <The-Compiler> jaggz: those are the values
[13:46:04] *** Joins: tm007 (uid287041@uxbridge.irccloud.com)
[13:46:35] *** Quits: Linux77 (~Linux7_7@2804:d45:8c02:b300:a12c:8838:4db4:91c9) (Ping timeout: 264 seconds)
[13:47:20] <jaggz> list(btdev.services)
[13:47:20] <jaggz> *** Error in argument: '(btdev.services)'
[13:47:32] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[13:47:43] *** Joins: Gerula (~Gerula@user/gerula)
[13:47:43] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[13:47:44] <The-Compiler> jaggz: that looks like you're calling the pdb list command
[13:48:04] <jaggz> ahhh
[13:48:08] <The-Compiler> jaggz: either use !list(...), or the "interact" command
[13:48:49] *** Joins: pycurious (~Adium@user/pycurious)
[13:49:46] *** Joins: adhawkins (~adhawkins@user/adhawkins)
[13:49:55] *** Joins: Jefren1 (~Jefren@70.35.66.187)
[13:50:16] <adhawkins> Anyone know of a python module that will handle formatting of large numbers into GB, TB etc.? I'd like to be able to specify the number of decimal places displayed too.
[13:50:31] <adhawkins> Appreciate it'd be relatively simple to write my own, but wondering if there's a module that does it for you?
[13:51:30] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[13:52:32] *** Joins: darksun (~darksun@user/darksun)
[13:53:30] *** Joins: vaio (~gary@user/ghost)
[13:55:02] *** Quits: Jefren1 (~Jefren@70.35.66.187) (Ping timeout: 240 seconds)
[13:56:15] *** Joins: Jefren1 (~Jefren@70.35.66.187)
[13:56:20] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:57:14] <Swayze> https://stackoverflow.com/questions/12523586/python-format-size-application-converting-b-to-kb-mb-gb-tb
[13:57:17] <Swayze> super simple function here
[13:57:22] <Swayze> @ adhawkins
[13:58:13] *** Quits: deutor (~quassel@82.177.4.226) (Ping timeout: 268 seconds)
[13:58:21] <sazawal> Hi all. I know this is not the right channel, but I am trying to read text from screenshot images using pytesseract.image_to_string function, and I need accuracy. Rarely it happens that it reads 1 as 7 or 3 as 8. I need to tune it. One way is to train is with many images, which I think is not needed because they are not camera images. What are the parameters I can tweak to tune it so it always works. I can share a sample code.
[13:58:43] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:00:00] *** Joins: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk)
[14:00:41] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Ping timeout: 268 seconds)
[14:01:30] *** Quits: Jefren1 (~Jefren@70.35.66.187) (Ping timeout: 260 seconds)
[14:01:37] <azidhaka> Anyone issuing letsencrypt certificates inside python program? I could call certbot, but if there is a better way...
[14:02:32] *** Quits: tobybl_ (~tobybl@dhcp-199-132.inf.ed.ac.uk) (Ping timeout: 240 seconds)
[14:02:43] *** Joins: Jefren1 (~Jefren@70.35.66.187)
[14:03:01] *** Joins: Adoi (~Adoi@user/adoi)
[14:03:18] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[14:03:54] *** Joins: y1n (~y1n@77.119.173.147.wireless.dyn.drei.com)
[14:04:02] *** Quits: Adoi (~Adoi@user/adoi) (Client Quit)
[14:04:02] *** Joins: deutor (~quassel@82.177.4.226)
[14:07:05] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:07:56] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:08:04] *** Quits: anonymeowo (~anonymeow@107.189.14.18) (Remote host closed the connection)
[14:08:07] <grawity> certbot is written in python and uses python-acme, so my first suggestion would be take a look at that
[14:08:41] *** Quits: Jefren1 (~Jefren@70.35.66.187) (Ping timeout: 268 seconds)
[14:09:08] *** Joins: Jefren1 (~Jefren@70.35.66.187)
[14:10:02] *** Quits: mallkrampus (~mallkramp@178.238.11.48) (Ping timeout: 256 seconds)
[14:11:27] *** Joins: nomic (~nomic@185.217.117.59)
[14:13:44] *** Joins: ednhmn (~ednhmn@200.173.177.188)
[14:14:02] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 240 seconds)
[14:14:34] *** Quits: Jefren1 (~Jefren@70.35.66.187) (Ping timeout: 260 seconds)
[14:14:40] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[14:14:59] <Crepe> I'm an econometrist and I'm studying Python on my own. I'm thinking about writing a script that would read NASDAQ value every minute, and if it goes up it would say "Yuhuu" and if it goes down ":(".
[14:15:00] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:15:28] *** Quits: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 268 seconds)
[14:15:33] *** Joins: Jefren1 (~Jefren@70.35.66.187)
[14:15:43] <Crepe> Any idea about what could I read or what would I need to start? I'm almost finishing the book written in the topic of this channel
[14:16:11] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[14:16:14] *** Quits: adiKt (uid472628@tinside.irccloud.com) (Quit: Connection closed for inactivity)
[14:17:19] *** Parts: bankin (~user@user/bankin) (WeeChat 2.8)
[14:18:18] *** Quits: ednhmn (~ednhmn@200.173.177.188) (Ping timeout: 260 seconds)
[14:18:19] *** Joins: ubert1 (~Thunderbi@p200300ecdf0ba29ae6b318fffe838f33.dip0.t-ipconnect.de)
[14:18:23] *** Quits: guenhael (~Thunderbi@2a01cb008c3d580005185bc1130ccfdf.ipv6.abo.wanadoo.fr) (Ping timeout: 264 seconds)
[14:20:08] *** Joins: tg (~tg@rockylinux/infra/tg)
[14:20:08] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[14:20:30] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:21:23] *** Quits: Jefren1 (~Jefren@70.35.66.187) (Ping timeout: 264 seconds)
[14:21:53] *** Joins: Jefren1 (~Jefren@70.35.66.187)
[14:22:01] *** Joins: mallkrampus (~mallkramp@178.238.11.48)
[14:23:54] *** Quits: CyDefect (~troll@213.55.224.219) (Ping timeout: 260 seconds)
[14:25:58] *** Quits: jpaa (~jpaa@87.118.126.66) (Remote host closed the connection)
[14:26:14] *** Joins: magla (~gelignite@55d403ec.access.ecotel.net)
[14:29:59] *** Joins: luischi (~luigi@80.30.201.209)
[14:29:59] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:30:29] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[14:31:06] <rindolf> Crepe: see https://duckduckgo.com/?q=nasdaq+python+api&atb=v140-1&ia=web
[14:31:47] <jmd> What's the closest equivalent of an enum in Python?
[14:31:58] <supakeen> The `enum` module.
[14:32:10] *** Joins: guenhael (~Thunderbi@193.52.208.98)
[14:32:19] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[14:32:48] <Crepe> rindolf: if you think about something, it already exists out there. Thanks!
[14:33:03] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[14:33:14] *** Joins: kevr (~kevr@user/kevr)
[14:33:25] <rindolf> Crepe: you're welcome
[14:34:32] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[14:36:51] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:37:49] <tm007> Crepe: flying monkeys?
[14:38:32] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[14:38:56] <lxer> jmd, using a dict or simply defining it on the module level often makes more sense. Unlesss you need certain features of Enum, you probably don't need it.
[14:39:43] <jmd> lxer: I suspect you're right.  Actually when I think about it, a dict is really what I need in this instance.
[14:40:04] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[14:40:04] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[14:41:10] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[14:41:37] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[14:41:51] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[14:42:13] *** Quits: mokytis_ (~root@user/mokytis/x-7723836) (Quit: leaving)
[14:42:18] *** Joins: ArtfulDodger (~ArtfulDod@2a02-8440-6319-e33a-78ba-13a3-5b05-4fb6.rev.sfr.net)
[14:43:02] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi)
[14:43:14] *** Joins: root____ (~root@user/mokytis/x-7723836)
[14:43:16] *** root____ is now known as mokytis_
[14:44:15] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:44:39] *** Joins: f0fz (~f0fz@122.11.212.164)
[14:44:47] *** Quits: f0fz (~f0fz@122.11.212.164) (Quit: Quit)
[14:45:12] *** Joins: f0fz (~f0fz@122.11.212.164)
[14:45:36] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:45:50] *** Quits: Jefren1 (~Jefren@70.35.66.187) (Ping timeout: 260 seconds)
[14:47:07] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 250 seconds)
[14:47:09] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[14:49:23] *** Joins: han-solo (~hanish@user/han-solo)
[14:50:11] *** Quits: mallkrampus (~mallkramp@178.238.11.48) (Ping timeout: 264 seconds)
[14:51:18] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[14:51:49] <jaggz> print(" ".join([str(i) for i in ints]))
[14:51:49] <jaggz> TypeError: 'int' object is not iterable
[14:51:58] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 256 seconds)
[14:53:32] <jaggz> oh.. it came through as a single int
[14:55:39] *** Joins: vlm (~vlm@user/vlm)
[14:56:43] *** Joins: arinov (~arinov@5.24.160.250)
[14:56:54] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[14:58:14] *** Quits: swensson (~swensson@host-90-235-29-81.mobileonline.telia.com) (Ping timeout: 256 seconds)
[15:01:24] <jaggz> n/m
[15:01:26] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:01:34] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:03:38] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[15:04:21] *** Joins: mallkrampus (~mallkramp@178.238.11.47)
[15:04:35] *** Joins: pycurious (~Adium@user/pycurious)
[15:06:10] *** JoelJoel is now known as Joel
[15:07:40] *** Parts: royaljelly (~royaljell@user/royaljelly) ()
[15:07:43] *** Joins: royaljelly (~royaljell@user/royaljelly)
[15:09:07] *** Quits: mallkrampus (~mallkramp@178.238.11.47) (Ping timeout: 268 seconds)
[15:12:08] *** Quits: yoda (~yoda@gateway/tor-sasl/yoda) (Killed (NickServ (Forcing logout yoda -> yoda)))
[15:12:38] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[15:14:12] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[15:14:36] *** Quits: gitesh (uid423739@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:16:40] *** Joins: f0fz (~f0fz@122.11.212.164)
[15:17:02] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[15:17:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:17:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:18:10] *** Joins: jpaa (~jpaa@87.118.126.66)
[15:18:47] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[15:19:53] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[15:20:27] *** Joins: f0fz (~f0fz@122.11.212.164)
[15:20:35] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[15:20:58] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[15:21:21] *** Joins: BlueSky (~BlueSky@user/bluesky)
[15:22:49] *** Joins: JaredCE (~JaredCE@93.115.192.243)
[15:23:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[15:23:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:27:22] *** Quits: jmd (~user@de.cellform.com) (Ping timeout: 260 seconds)
[15:30:05] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 268 seconds)
[15:30:33] *** Quits: zoneu (~zoneu@user/zoneu) (Ping timeout: 276 seconds)
[15:30:38] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:31:41] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[15:32:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[15:32:06] *** Quits: BlueSky (~BlueSky@user/bluesky) (Read error: Connection reset by peer)
[15:32:15] *** Joins: daoudr_ (~daoudr@gateway/vpn/pia/daoudr)
[15:32:55] *** Joins: CoolerX (~CoolerX@user/coolerx)
[15:33:41] *** Joins: BlueSky (~BlueSky@user/bluesky)
[15:34:08] *** Joins: fikran (~fikran@user/fikran)
[15:35:02] *** Quits: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch) (Ping timeout: 256 seconds)
[15:35:08] *** Quits: shad (~shad@user/shad) (Ping timeout: 265 seconds)
[15:35:17] <adhawkins> Swayze: Yeah, thanks. I know I could have written it myself, but it seemed like the sort of thing someone might have done a package for.l
[15:35:52] *** Joins: swensson (~swensson@host-90-235-29-81.mobileonline.telia.com)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:17] *** Joins: swensson8 (~swensson@host-90-235-29-81.mobileonline.telia.com)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:33] *** Joins: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[15:38:28] *** Quits: teut (~teut@182.68.64.194) (Ping timeout: 256 seconds)
[15:39:19] *** Joins: Spawn (~Spawn@user/spawn)
[15:39:50] <JaredCE> anyone familiar with serverless and python lambda functions?
[15:40:03] <lxer> yes
[15:40:10] *** Quits: swensson (~swensson@host-90-235-29-81.mobileonline.telia.com) (Ping timeout: 256 seconds)
[15:40:18] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[15:41:10] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:41:25] *** Quits: Jonopoly (~Jonopoly@user/jonopoly) (Quit: WeeChat 3.0)
[15:41:58] <JaredCE> if i have a setup like: serverless.yml, handlers/index_rollover.py: def handler().  in my functions definitions, define a function as index_rollover, how would i map the handler to handlers/index_rollover.handler?
[15:42:23] *** Joins: gitesh (uid423739@ilkley.irccloud.com)
[15:42:25] <JaredCE> sorry, not 100% sure that's clear
[15:42:25] *** Quits: ubert (~Thunderbi@p200300ecdf0ba29adda7833ccd9cfa98.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[15:42:26] *** ubert1 is now known as ubert
[15:44:19] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[15:44:37] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:44:47] *** Quits: Fozzworth (~Fozzworth@user/fozzworth) (Ping timeout: 264 seconds)
[15:45:21] *** Quits: sunarch (uid526836@user/sunarch) (Quit: Connection closed for inactivity)
[15:45:22] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:47:18] <JaredCE> https://bpa.st/5FGA
[15:47:32] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:48:04] *** Joins: bxsx (~x@131.red-79-151-13.dynamicip.rima-tde.net)
[15:49:12] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[15:49:13] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[15:49:36] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[15:49:37] *** Joins: BobFang1992_ (~textual@2a01:4b00:87fe:be00:30ce:ab50:b4f4:7d62)
[15:50:00] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[15:50:03] *** Joins: ShArkZ (sharkz@user/sharkz)
[15:50:43] *** Joins: f0fz (~f0fz@122.11.212.164)
[15:50:49] *** Parts: ShArkZ (sharkz@user/sharkz) ()
[15:56:31] *** Joins: vulpes_vulpes (~vulpes_vu@62-64-204-12.dynamic.dial.as9105.com)
[15:57:31] *** Quits: nomic (~nomic@185.217.117.59) (Quit: Leaving)
[15:57:32] *** Quits: guenhael (~Thunderbi@193.52.208.98) (Ping timeout: 240 seconds)
[15:59:25] <bxsx> hmm the official docs can be confusing sometimes ;/
[16:00:01] *** Quits: Lazenca (Lazenca@user/lazenca) (Remote host closed the connection)
[16:03:03] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 276 seconds)
[16:04:04] *** Quits: BlueSky (~BlueSky@user/bluesky) (Read error: Connection reset by peer)
[16:04:35] *** Joins: BlueSky (~BlueSky@user/bluesky)
[16:04:59] <bxsx> Am I reading it wrong or the dict.update docstring is misleading? https://bpa.st/F4WQ
[16:05:13] *** Joins: kuter (~kuter@public-gprs525515.centertel.pl)
[16:05:50] <bxsx> dict.update([E, ]**F) # If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
[16:06:23] *** Joins: kevr (~kevr@user/kevr)
[16:06:31] <bxsx> it doesn't look like it uses `D[k] = E[k]` as the D.__setitem__() is not invoked
[16:07:05] <Yhg1s> bxsx: no, what it looks like is that subclassing a dict is a bad idea. dict.update() and other methods that modify the dict don't call dict.__setitem__
[16:07:15] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[16:07:23] <Yhg1s> This is very common in builtin types. (Don't subclass them.)
[16:07:29] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[16:08:20] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[16:08:45] <bxsx> Yhg1s: well, I see it at dict_update_arg() but I would say the docstrings are still misleading ;)
[16:09:00] <Yhg1s> bxsx: patches welcome, I'm sure.
[16:09:21] <bxsx> Yhg1s: the reason I asked if I read it wrongly or not ;)
[16:09:55] *** Joins: beuys (~beuys@user/beuys)
[16:10:09] <Yhg1s> It does the operation. It doesn't call dict.__setitem__.
[16:10:17] <beuys> Hello! When executed by Apache, how do I get the querystring in Python?
[16:10:21] *** Joins: bloody (~bloody@user/bloody)
[16:10:30] <Yhg1s> beuys: how is it executed by Apache?
[16:10:50] *** Joins: pro_z (~pro_z@37.214.63.5)
[16:10:50] *** Joins: guenhael (~Thunderbi@2a01cb008c3d580010d3387743f6a6a5.ipv6.abo.wanadoo.fr)
[16:11:15] <bxsx> Yhg1s: yes, but D[k] oparation is described as map of D.__setitem__ in docs. So, I would expect it's working this way
[16:11:16] <beuys> Yhg1s: I have put it in /var/www/html/mycode.py and in the browser I put the url 127.0.0.1/mycode.py
[16:12:26] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[16:12:38] *** Quits: dre (~dre@119-18-0-198.771200.syd.nbn.aussiebb.net) (Ping timeout: 260 seconds)
[16:12:58] <Yhg1s> beuys: okay, so how is it executing it? Is it configured to use CGI, or WSGI, or something else?
[16:12:59] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Quit: WeeChat 3.3)
[16:13:20] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[16:13:31] *** dcaro is now known as dcaro_lunch
[16:13:42] <Yhg1s> bxsx: I understand, but unfortunately the nuances of that are hard to express in docstrings. Also, the docstring was written before dicts were subclassable, and subclassing dict and overriding __setitem__ has a lot of surprises anyway. But as I said, patches welcome.
[16:13:43] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[16:13:46] <bxsx> Yhg1s: btw. since you mention that subclassing from built-in types is generally wrong idea. So, assuming I want to have dict-like object, is it better to implement MutableMapping interface? What if I only want to reimplement one method? this way I would need to implement all methods
[16:13:51] *** Joins: daoudr__ (~daoudr@xdsl-31-164-222-159.adslplus.ch)
[16:14:05] <bxsx> Yhg1s: thx for clarification!
[16:14:06] *** Joins: w4ld0 (w4ld0@gateway/vpn/protonvpn/w4ld0)
[16:14:08] <beuys> Yhg1s: Could be CGI. I have put this into apache.conf to make it work: AddHandler cgi-script .py
[16:14:12] <bpalmer> bxsx: you don't need to implement all methods; MutableMapping has like 5 abstract methods and default implementations for the rest
[16:14:13] *** Joins: f0fz (~f0fz@122.11.212.164)
[16:14:15] <Yhg1s> bxsx: MutableMapping implements most of them for you.
[16:14:40] <Yhg1s> bxsx: but yes, not subclassing dict is a better idea. There's also collections.UserDict if you prefer.
[16:14:46] <bxsx> bpalmer: yeah, i referred to these 4 of 5 abstract methods ;)
[16:15:00] <bxsx> UserDict isn't deprecated?
[16:15:41] <bpalmer> bxsx: the methods are trivial to implement, as the simplest implementation just uses a dictionary member variable beneath the hood.
[16:15:50] <bpalmer> a little bit of boilerplate, but nothing too bad.
[16:15:52] *** Joins: TJ- (~root@about/linux/staff/tj-)
[16:16:03] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[16:16:03] <beuys> Ha! This works: print (os.environ['QUERY_STRING'])
[16:16:24] *** Quits: daoudr_ (~daoudr@gateway/vpn/pia/daoudr) (Ping timeout: 256 seconds)
[16:16:43] <Yhg1s> beuys: sounds like you're using CGI then. Use the cgi module. (Also, consider not using CGI.)
[16:16:44] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[16:16:45] <bpalmer> class D(MutableMapping):  def __init__(self, *args, **kwargs):  self.d = dict(*args, **kwargs)    def __len__(self): return len(self.d)    and so on
[16:17:02] <Yhg1s> bxsx: correct, UserDict is not deprecated.
[16:17:04] <beuys> Looks like I don't need any module. This works awesonly: print (os.environ['QUERY_STRING'])
[16:17:30] <Yhg1s> beuys: if you just want to print that environment variable, sure. If you actually want to do something with it, use the cgi module.
[16:17:41] <beuys> Yhg1s: Why?
[16:17:43] <bxsx> bpalmer: yeah, it's trivial. i'm trying to understand the retionale for intruducing subclassing built-in types if implementing interefaces is recommended way
[16:18:33] *** Joins: Jonopoly (~Jonopoly@user/jonopoly)
[16:18:54] <Yhg1s> beuys: because otherwise you end up recreating the standard library module for no good reason, and you'll have to learn about a lot of the details that the cgi module takes care of for you.
[16:19:41] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Quit: WeeChat 3.3)
[16:19:54] <Yhg1s> bxsx: subclassing builtin types came for free when types implemented in C became subclassable. That's of value for many reasons, and it's still sometimes useful to subclass dicts -- just not when you override __setitem__ or other methods and expect them to be called from update or other methods.
[16:19:58] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[16:20:02] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[16:21:02] <beuys> Yhg1s: Not sure what you mean. Say I want to output the square of the query string. I do "num=os.environ['QUERY_STRING'];print("Content-Type: text/html;charset=utf-8");print("");print num**2;" and it works. Why do I need a library?
[16:21:38] *** Joins: f0fz (~f0fz@122.11.212.164)
[16:21:40] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[16:22:03] <Yhg1s> beuys: well, for starters, 'num' will be a string, so that will fail. I don't understand why you have an objection to using part of Python that is explicitly provided for the very thing you're asking about, sorry.
[16:22:40] <beuys> Yhg1s: And I should use the CGI library to convert a string to an integer?
[16:22:41] <Yhg1s> beuys: if what you're worried about is *third-party dependencies*, then please, stop worrying. They're a very good thing. Also, cgi is a standard library module. Also, really, consider not using CGI.
[16:22:52] <Yhg1s> beuys: you should use the cgi module to deal with the CGI protocol.
[16:23:13] <beuys> Yhg1s: I would use it if there is something in there that I need. But so far it seems I don't need it.
[16:24:05] *** Joins: shad (~shad@user/shad)
[16:24:46] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:25:24] *** Quits: guenhael (~Thunderbi@2a01cb008c3d580010d3387743f6a6a5.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[16:26:02] <bpalmer> well, once you've written something to parse the query string (what you have above won't work), you can compare it with what's in the cgi module
[16:26:22] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[16:26:27] <beuys> bpalmer: Yeah
[16:26:36] <beuys> bpalmer: Now we are talking.
[16:27:08] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:27:27] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:27:39] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:27:45] <bpalmer> (hmm. or maybe urllib.parse)
[16:28:15] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[16:28:16] *** Quits: BlueSky (~BlueSky@user/bluesky) (Read error: Connection reset by peer)
[16:28:31] *** Joins: mickey8 (~user@user/mickey)
[16:29:03] <beuys> bpalmer: cgi.parse()['num'][0] seems to work if the qs is ?num=123
[16:29:58] *** Joins: BlueSky (~BlueSky@user/bluesky)
[16:30:19] *** Joins: InternetWarrior (~Guest20@dyx0pyycyxn3cgy06f40y-3.rev.dnainternet.fi)
[16:30:34] *** Quits: upsala (~zcb@185.213.155.252) (Ping timeout: 256 seconds)
[16:30:43] *** Joins: guenhael (~Thunderbi@193.52.208.98)
[16:32:00] <lxer> JaredCE:  handler: handlers/index_rollover.handler
[16:32:21] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[16:32:21] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Quit: WeeChat 3.3)
[16:32:26] *** Joins: upsala (~zcb@185.213.155.232)
[16:32:35] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[16:32:38] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[16:32:51] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[16:33:32] *** Joins: slav0nic (slav0nic@python.su)
[16:34:30] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Client Quit)
[16:34:50] *** Joins: vladoski (~vladoski@93-47-225-110.ip114.fastwebnet.it)
[16:35:05] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[16:36:10] *** Quits: vladoski (~vladoski@93-47-225-110.ip114.fastwebnet.it) (Client Quit)
[16:36:26] *** Quits: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Read error: Connection reset by peer)
[16:36:50] *** Quits: InternetWarrior (~Guest20@dyx0pyycyxn3cgy06f40y-3.rev.dnainternet.fi) (Ping timeout: 256 seconds)
[16:36:54] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[16:37:05] *** Joins: rsx (~dummy@ppp-188-174-134-10.dynamic.mnet-online.de)
[16:37:08] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[16:37:48] *** Joins: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[16:38:36] *** Quits: beuys (~beuys@user/beuys) (Quit: leaving)
[16:38:40] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:38:40] *** Quits: sazawal (~sazawal@223.190.87.36) (Quit: Leaving)
[16:39:14] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[16:41:32] *** Joins: thevishy (~thevishy@2405:201:f005:c007:e9f8:766e:92f2:6107)
[16:46:57] *** Quits: BobFang1992_ (~textual@2a01:4b00:87fe:be00:30ce:ab50:b4f4:7d62) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:47:13] *** Joins: teut (~teut@182.68.64.194)
[16:47:32] *** Joins: pycurious (~Adium@user/pycurious)
[16:49:12] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[16:49:38] *** Quits: arinov (~arinov@5.24.160.250) (Ping timeout: 268 seconds)
[16:50:05] *** Joins: de-facto (~de-facto@user/de-facto)
[16:50:11] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[16:51:21] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:bde7:830:4cf1:2fa1)
[16:51:30] *** Joins: fdan (~fdan@192.146.154.3)
[16:51:54] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[16:52:15] *** Joins: Elodin (~weechat@user/elodin)
[16:53:13] *** Quits: swensson8 (~swensson@host-90-235-29-81.mobileonline.telia.com) (Quit: Client closed)
[16:53:40] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:54:44] *** Quits: Socra (~Socra@206.217.216.27) (Read error: Connection reset by peer)
[16:55:11] *** Joins: nyah (~nyah@94.6.71.219)
[16:56:22] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Remote host closed the connection)
[16:56:34] <bxsx> bpalmer Yhg1s: https://bpa.st/VYKQ - is it equivalent to `dict` or do i miss any corner cases?
[16:56:39] *** Quits: tga (~tga@user/tga) (Quit: leaving)
[16:57:48] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:57:53] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[16:58:05] <Yhg1s> bxsx: why not just use collections.UserDict? Also, don't use double leading underscores in names, certainly not attributes, as you're just making your own life harder for no reason.
[16:58:32] *** Joins: Socra (~Socra@206.217.216.27)
[16:58:38] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:58:39] <bxsx> one corner case requires special handling of mapping/iterable object passed to constructor, don't see anything else
[16:59:26] <bxsx> Yhg1s: Well, UserDict is probably equivalent to this snippet but I'm going to add some extra functionality in some of these methods, so no reason to use UserDict
[16:59:29] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:59:50] <Yhg1s> I don't understand, sorry. Subclassing UserDict means you don't need any of this.
[17:00:05] <bxsx> Yhg1s: what's is wrong with mangling names? I've never heard they are bad
[17:00:25] <Yhg1s> bxsx: it's pointless and disruptive.
[17:01:32] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[17:01:41] <Yhg1s> bxsx: as I once explained in https://stackoverflow.com/questions/165883/python-object-attributes-methodology-for-access/166098#166098, it's really not that helpful. A single underscore is just as strong, and not as surprising or annoying to work with.
[17:02:02] *** Joins: shokohsc8618 (~shokohsc@161.88.195.77.rev.sfr.net)
[17:02:05] *** Joins: f0fz (~f0fz@122.11.212.164)
[17:02:34] <bxsx> Yhg1s: yes, I don't need anything of this to get the same type as UserDict. But, I'm going to add more code to __init__, __setitem__ and __delitem__. I don't see any benefits from subclassing UserDict if it can help me only with __iter__ and __len__ methods
[17:03:12] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 268 seconds)
[17:03:36] <Yhg1s> bxsx: okay, besides the benefits of subclassing UserDict, there's no benefits in subclassing UserDict.
[17:04:51] <bxsx> Yhg1s: let me read it. i've been using both single and double underscore since Python2.5 and I have never had any issue with them (I'm a little suprised they are not that cool anymore)
[17:05:01] <bxsx> Yhg1s :-)
[17:05:05] *** Quits: delvian (~delvian@41.13.246.212) (Quit: Leaving)
[17:05:13] <Yhg1s> bxsx: double leading underscores have never been cool, they've always been a mistake. Single leading underscores are fine.
[17:05:50] *** Joins: arinov (~arinov@5.24.160.250)
[17:06:27] <vakera_pingveno> *marge simpson voice* i think double underscores are neat
[17:08:02] *** Joins: delvian (~delvian@41.13.246.212)
[17:08:04] <bxsx> Interesting, I remember some GvR or R. Hettinger talks about how cool and useful are double underscores. that was abou 15 yrs ago, so I understand they ain't cool anymore ;)
[17:08:28] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[17:08:45] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 268 seconds)
[17:08:48] <lxer> I see too many java-devs who switched to python and think that is the right way to create private functions.
[17:09:02] <Yhg1s> bxsx: I doubt it was ever Guido. Raymond, yeah, well.
[17:09:30] <fdan> i have 40 apis and i would want to call of them in one shot
[17:09:33] <grym> lxer: that's the usual pathology
[17:09:36] <fdan> how can i do this in python
[17:10:17] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:10:30] <lxer> and they always find some blogpost with incorrect info.
[17:10:53] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:11:11] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 264 seconds)
[17:11:29] *** Joins: hzm74 (~hzm74@217-121-154-127.cable.dynamic.v4.ziggo.nl)
[17:11:50] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[17:12:10] <fdan> i know that python cannot run more than one thread due to the GIL
[17:12:12] *** Joins: jbox (~jbox@user/jbox)
[17:12:31] <grym> fdan: httpx, perhaps
[17:12:38] <han-solo> python can run more than one thread...
[17:12:50] <han-solo> but yeah, httpx
[17:12:56] *** Quits: onichomp666 (~onichomp@2806:264:4404:8016:31c1:e7b8:cdac:a7ff) (Read error: Connection reset by peer)
[17:13:06] *** dcaro_lunch is now known as dcaro
[17:13:11] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Client Quit)
[17:13:20] <fdan> han-solo i referred this https://stackoverflow.com/questions/31340/how-do-threads-work-in-python-and-what-are-common-python-threading-specific-pit
[17:13:34] *** Joins: onichomp666 (~onichomp@2806:264:4404:8016:31c1:e7b8:cdac:a7ff)
[17:13:35] <fdan> the answer section says that we can run only one thread due to the GIL
[17:13:51] *** Joins: free-user249 (~standard-@p200300c3af26fd62d6b50c04022caf88.dip0.t-ipconnect.de)
[17:13:56] <lxer> that is 15years old
[17:14:03] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (Ping timeout: 265 seconds)
[17:14:05] <lxer> .. almost
[17:14:35] <mefistofeles> fdan: that only holds for CPU-bound tasks
[17:14:49] *** Joins: Siecje (~Siecje@216.154.14.35)
[17:14:50] <han-solo> fdan: i think, "at a time", maybe of some importance, but that's usually a concern when you have CPU bound tasks
[17:14:55] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[17:15:00] <bxsx> Yhg1s: https://bpa.st/4VZQ shows the issue with single leading underscore but yeah, the example is poorly designed ;)
[17:15:18] <fdan> han-solo if we want to achieve parallelism, then how can i go about that?
[17:15:23] <mefistofeles> fdan: querying apis should be IO-bound, so it's a good case for using threads in python, actually
[17:16:01] <fdan> mefistofeles can i call 100 or 1000 apis at one shot? is it possible? or it depends on the number of cores
[17:16:10] <mefistofeles> fdan: it is possible
[17:16:20] <Siecje> I'm using psycopg3 and when I have the port in the connection string I get an error that it is invalid. I understand it needs to be an int but it is getting the value from a connection string. https://dpaste.org/G7ur
[17:17:07] <han-solo> fdan: assuming all apis are in a single host, you could do a bunch of request # https://www.python-httpx.org/async/#making-async-requests
[17:17:39] <fdan> may i know what is a GIL
[17:17:42] <han-solo> collect them, and do something like `asyncio.wait` or friends
[17:17:44] <fdan> what is the use of it in Python
[17:17:45] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi)
[17:18:07] <fdan> why does it exists in Python and not in other languages
[17:18:08] <han-solo> don't await them, like in the example, but collect the awaitable to a list, and give it to .wait or gather or something
[17:18:14] <grym> fdan: async is a concurrency solution that's fairly well supported now; (and httpx uses it)
[17:18:24] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[17:18:51] <jinsun> fdan: it exists in ruby and few other interpreted languages too
[17:19:06] <fdan> jinsun what is the significance?
[17:19:13] <hzm74> Hello, can somebody help me with my code for checking if a columnname exists in a pandas dataframe? I have the code for checking this but i don´t know how to construct the try-except part.
[17:19:23] <hzm74> https://bpa.st/6BWA
[17:20:03] <hzm74> Don´t know how to get the boolean-value of the parameter ´exists´.
[17:21:00] <mefistofeles> fdan: it's a way of simplifying low-level stuff, to ensure memory safety and avoid race conditions and things like that
[17:21:14] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:21:25] <mefistofeles> but everything has a cost, and the cost is that you cannot run cpu-bound tasks in parallel from a single python interpreter
[17:22:38] <han-solo> hzm74: for columns, maybe you want `q in data_clean.columns`
[17:23:01] <lxer> hzm74: many things wrong there.. You probably want something like   if waarde(kolom):
[17:23:02] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[17:23:03] <jinsun> fdan: there is no "use" of it really other than preventing things from breaking when multiple threads run, there is some small explanation in the docs https://docs.python.org/3/glossary.html#term-global-interpreter-lock
[17:24:38] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[17:25:27] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[17:25:52] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[17:27:22] *** Quits: shokohsc8618 (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: The Lounge - https://thelounge.chat)
[17:27:50] *** Quits: teut (~teut@182.68.64.194) (Ping timeout: 256 seconds)
[17:29:04] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:29:06] *** Joins: jmd (~user@de.cellform.com)
[17:29:37] *** Quits: free-user249 (~standard-@p200300c3af26fd62d6b50c04022caf88.dip0.t-ipconnect.de) (Quit: WeeChat 3.0)
[17:29:53] <jmd> I recall there is some problem using import to read in a dictionary.  What is the workaraound?
[17:29:55] *** Joins: BlueSky_ (~BlueSky@user/bluesky)
[17:29:59] <hzm74> lxer: thnx for response! With my function ¨waarde¨ i give a value to the function and the function checks if the value exists in the dataframe. The function return the boolean : exists¨. But why can´t i check outside the function if the boolean is true? It gives me: ¨name ´exists´ is not defined !
[17:30:34] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:30:37] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:30:38] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[17:31:05] <grym> jmd: do you have more detail on the problem you're remembering?
[17:31:13] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[17:31:48] *** Quits: grooverman_ (~grooverma@177.102.117.95) (Read error: Connection reset by peer)
[17:31:58] <jmd> It's like if you have in foo.py say myfoo = {this. that, other} and then try import foo from another file, then myfoo will not be available.
[17:32:40] *** Joins: standard-user (~standard-@p200300c3af26fd62d6b50c04022caf88.dip0.t-ipconnect.de)
[17:32:45] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[17:32:54] *** Quits: BlueSky (~BlueSky@user/bluesky) (Ping timeout: 256 seconds)
[17:33:11] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[17:34:00] *** Joins: grooverman (~grooverma@177.102.119.40)
[17:36:35] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[17:37:01] *** Quits: onichomp666 (~onichomp@2806:264:4404:8016:31c1:e7b8:cdac:a7ff) (Read error: Connection reset by peer)
[17:37:41] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:38:09] *** Joins: Jefren1 (~Jefren@70.35.66.187)
[17:38:21] *** Quits: Gerula (~Gerula@user/gerula) (Quit: Leaving)
[17:38:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[17:39:08] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:39:16] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[17:39:54] *** Joins: de-facto (~de-facto@user/de-facto)
[17:40:42] <lxer> hzm74: because 'exists' is defined in the function, so it is unknown outside of the function.
[17:40:42] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[17:42:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[17:42:27] *** Joins: pycurious (~Adium@user/pycurious)
[17:43:16] *** Quits: standard-user (~standard-@p200300c3af26fd62d6b50c04022caf88.dip0.t-ipconnect.de) (Quit: WeeChat 3.0)
[17:43:29] *** Joins: fikran (~fikran@user/fikran)
[17:43:30] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[17:43:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9b56:dca:ba79:dc9b)
[17:43:57] *** Joins: f0fz (~f0fz@122.11.212.164)
[17:44:00] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:44:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 265 seconds)
[17:46:50] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[17:49:42] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 260 seconds)
[17:50:40] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[17:51:10] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:51:30] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 260 seconds)
[17:52:07] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:53:11] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 264 seconds)
[17:53:18] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 256 seconds)
[17:53:58] *** Joins: f0fz (~f0fz@122.11.212.164)
[17:54:09] *** Joins: Jigsy (~Jigsy@user/jigsy)
[17:54:36] *** Quits: gitesh (uid423739@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:55:20] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[17:58:05] *** Joins: Haxxa (~Haxxa@122.199.46.64)
[18:01:37] *** Quits: w4ld0 (w4ld0@gateway/vpn/protonvpn/w4ld0) (Quit: Textual IRC Client: www.textualapp.com)
[18:02:34] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[18:02:42] *** Joins: f0fz (~f0fz@122.11.212.164)
[18:02:57] *** Joins: Jigsy (~Jigsy@user/jigsy)
[18:04:03] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[18:05:41] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:06:22] <glik22> anyone know what sets the PYENV_VERSION env variable?
[18:06:43] <grym> glik22: yes, pyenv
[18:06:49] *** Joins: gitesh (uid423739@ilkley.irccloud.com)
[18:07:08] *** Joins: Bakunin (~Lindis@user/lindis)
[18:07:26] <grym> usually with `pyenv shell`
[18:07:34] <grym> (so,it's not permanent)
[18:08:37] *** Quits: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Quit: Leaving)
[18:09:09] <gloomy> hey, I'm creating a n interactive cli with click for the first time. From what I understand if I add all the options of a command as @click.option, they are all asked before the corresponding function is executed. Is there a way to split this into several steps?
[18:09:36] <gloomy> I can use "prompt" but then the info doesn't appear when the user does `--help`
[18:09:39] *** Joins: Sheilong (uid293653@ilkley.irccloud.com)
[18:10:51] <grym> gloomy: click doesn't prompt for input, you're just defining one or more noninteractive command line options.  You can provide them default values as well
[18:11:22] <grym> ie, if you add @click.option('--foo'), you're allowing your entry point to be invoked as `command --foo`
[18:11:28] <glik22> grym: do you know when though? if this env variable is set then other things (like python local <version>) are ignored
[18:11:40] <gloomy> grym: it does if you don't provide them when executing the script
[18:11:43] <grym> glik22: yes, if you `pyenv shell` usually
[18:11:49] <grym> gloomy: it should just error
[18:12:11] <grym> i am not aware of any function of click that drops you into an interactive mode by default for missing options
[18:12:49] <gloomy> grym sorry, yes - but if you put `prompt=xxx` in @click.command, it asks them if they are not provided
[18:12:58] <gloomy> *in @click.option
[18:13:18] <gloomy> so @click.option("--foo", prompt="what is foo:")
[18:13:34] <grym> hah! nice
[18:13:39] <grym> TIL, cheers for that
[18:14:04] <gloomy> :)
[18:14:14] <glik22> grym: not sure what you mean by that. i don't run pyenv shell
[18:15:04] <grym> glik22: you can also just set it manually.  https://github.com/pyenv/pyenv#choosing-the-python-version  is the resolution order of what pyenv looks for
[18:15:07] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 265 seconds)
[18:15:51] <grym> glik22: so, one way to set that envvar is with `pyenv shell`, but every other way you set envvars will also set that envvar and i can't know what they all are for you
[18:16:22] <glik22> i'm not calling `pyenv shell` or setting `PYTHON_VERSION` in any startup script
[18:16:29] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[18:16:30] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-344b-a1a2-fb0d-5a70.res6.spectrum.com)
[18:16:39] <grym> something is
[18:16:44] <grym> (apparently)
[18:16:59] <grym> but PYENV_VERSION and PYTHON_VERSION are not related to each other
[18:17:16] *** Quits: MercilessDeth (~brad@136.49.59.177) (Quit: Konversation terminated!)
[18:17:55] <glik22> whopps, i meant PYENV_VERSION
[18:18:10] <dman777> https://bpa.st/25UQ I didn't write this but I am learning from it. Which line makes this work where it will loop though a dict recursively?
[18:18:30] <grym> dman777: line 5
[18:18:47] <grym> (because it calls itself, which is the definition of recursion)
[18:18:58] *** Joins: shokohsc8618 (~shokohsc@161.88.195.77.rev.sfr.net)
[18:19:24] <dman777> grym: oh..ok. thanks
[18:19:28] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:19:32] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:19:34] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 260 seconds)
[18:19:42] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:19:58] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[18:20:17] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 268 seconds)
[18:20:23] *** Joins: niv (~niv@limbo.cypherpunks.io)
[18:22:10] *** Joins: sniperwolf (~sniperwol@91.230.98.1)
[18:22:43] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:22:44] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[18:22:46] *** Quits: Crepe (~Crepe@user/crepe) (Ping timeout: 256 seconds)
[18:22:57] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[18:23:19] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Client Quit)
[18:24:44] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[18:25:59] *** Joins: mimmy (~mimmy@146.70.75.190)
[18:26:54] *** Joins: vimart (~vimart@239.218-30-62.static.virginmediabusiness.co.uk)
[18:28:22] *** Joins: pycurious (~Adium@user/pycurious)
[18:28:44] *** Joins: Elodin (~weechat@user/elodin)
[18:28:46] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[18:28:54] *** Joins: MercilessDeth (~brad@136.49.59.177)
[18:29:03] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[18:30:06] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:31:29] *** Joins: CoolerX (~CoolerX@user/coolerx)
[18:31:31] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[18:31:32] *** Quits: oz4ga (~tim@hator.sunsite.lv) (Remote host closed the connection)
[18:32:12] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:32:32] *** Quits: arinov (~arinov@5.24.160.250) (Ping timeout: 240 seconds)
[18:33:23] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[18:34:09] *** Quits: Haxxa (~Haxxa@122.199.46.64) (Quit: Haxxa flies away.)
[18:34:11] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:34:24] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Client Quit)
[18:34:28] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[18:35:44] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[18:36:19] *** Quits: y1n (~y1n@77.119.173.147.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[18:36:40] *** Joins: bobfang1992_ (~textual@2a01:4b00:87fe:be00:2941:7b2f:659a:8781)
[18:37:08] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[18:38:02] <dman777> https://dpaste.org/r9Z3 should hasattr be working here?
[18:38:53] <grym> dman777: 404; use bpa.st, pastes aren't deletable
[18:38:57] <grym> (as easily)
[18:39:19] *** Quits: ialokin (znc@user/ialokin) (Quit: it was tempting to stay, but I had to quit :))
[18:39:22] *** Joins: humberto1 (~humbertow@189.236.62.65)
[18:39:46] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[18:39:55] *** Joins: audiobirb (~audio@user/audio)
[18:39:58] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Client Quit)
[18:40:42] *** Joins: legola (~legola@46.235.101.181)
[18:41:27] *** Joins: ialokin (znc@user/ialokin)
[18:42:04] *** Quits: backthen (~backthen@c-76-103-177-91.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[18:42:20] *** Quits: kuter (~kuter@public-gprs525515.centertel.pl) (Read error: Connection reset by peer)
[18:42:29] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[18:42:59] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[18:43:10] <ArtfulDodger> Am I correct by saying that, if I transform a synchronous program in async by only putting "async" in front of function names and awaiting them, in that case the program remains synchronous since we wait each of them?
[18:43:39] <grym> i think you'll just get a bunch of syntax errors instead
[18:43:45] <han-solo> :)
[18:43:52] <ArtfulDodger> I don't
[18:44:10] <han-solo> ooooh, interesting. How did you run the main entry point ?
[18:44:14] <dman777> grym: https://bpa.st/RTUQ thanks
[18:44:22] <ArtfulDodger> asyncio.run(main())
[18:44:29] <ArtfulDodger> I forgot that part
[18:44:31] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f6bc:f00:93d:ef3a:ec37:e2db)
[18:44:48] <han-solo> so it was never ran ?
[18:45:03] *** Joins: defiant (~defiant@user/defiant)
[18:45:32] <bxsx> Yhg1s: OK, after reading dict, UserDict and MutableMapping implementations, I think your suggestion to use UserDict in my case, makes a lot of sense. Thanks for highlighting it
[18:45:33] <han-solo> dman777: they are not attributes on the dictionary, they are keys rather
[18:45:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:45:54] <dman777> han-solo: ah.... my bad. to early
[18:46:09] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[18:46:11] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:bde7:830:4cf1:2fa1) (Ping timeout: 268 seconds)
[18:46:13] <ArtfulDodger> han-solo: It runs well but it's as long as my synchronous version despite the IOs. I think my logic is wrong. Let me explain:
[18:46:16] *** Joins: nomic (~nomic@185.217.117.59)
[18:46:34] <grym> bxsx: (though i am certainly not Yhg1s) cheers for the followup! always great to see this sort of stuff happen
[18:46:38] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 260 seconds)
[18:46:50] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[18:47:29] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Read error: Connection reset by peer)
[18:47:50] <han-solo> dman777: though i think, there are libs that could lookup like `somefunc(dict, 'key.subkey')`
[18:48:02] <ArtfulDodger> han-solo: In my attempt to use asyncio, a chessmaster competes with 5 players. Everyone requires 1 second to think his move. The total duration of all moves is 5*2 = 10 secs. http://paste.debian.net/1220061/
[18:48:02] <ArtfulDodger> Since the chessmaster is the critical resource, when another player thinks I would like him to play his next move. I expect execution time to be reduced by 1 sec per player +1 = 6 sec instead of 10.
[18:48:02] <ArtfulDodger> I've used async and await, but I think that the program is still synchronous because each sleep(1) is awaited and I don't tell what can be ran concurrently.
[18:48:54] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:48:55] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[18:49:19] *** Quits: luischi (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[18:49:21] <dman777> han-solo: which library would you recommend for that?
[18:49:33] *** Joins: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[18:49:35] *** Joins: ali1234 (~al@user/ali1234)
[18:49:41] <bxsx> grym :-)
[18:50:14] <Wooble> dman777: pretty sure what they're referring to is glom, although I don't think that will get you hasattr and it's unclear why you want it...
[18:50:39] <han-solo> ArtfulDodger: i think the problem you are awaiting each move with each player.
[18:51:11] *** Joins: p-i- (~Ohmu@mx-ll-223.206.150-183.dynamic.3bb.co.th)
[18:51:17] <dav1d> ArtfulDodger, you're not parallelizing your thinking
[18:51:25] <dav1d> or well, the games
[18:51:28] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[18:52:11] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[18:52:30] <dman777> Wooble: glom looks nice... how well is it maintained?
[18:52:48] <causa-sui> I'm making a module that will include a cli entrypoint. does it make sense to put the cli stuff in __main__.py or does it make no difference?
[18:52:51] <grym> dman777: it's actively maintained
[18:53:08] <causa-sui> poetry will set the entrypoint so it seems arbitrary
[18:53:14] <grym> causa-sui: for anything more than trivial CLIs, i tend to make a cli.py
[18:53:19] <dman777> thanks
[18:53:28] <causa-sui> grym: do you use argparse or click/
[18:53:29] <causa-sui> ?
[18:53:37] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[18:53:37] <Wooble> dman777: it doesn't have a ton of releases but it's unlikely to have a lot of weird edge-case bugs to fix given what it does...
[18:53:42] *** Joins: cheater (~Username@user/cheater)
[18:53:45] <dav1d> ArtfulDodger, the logic needs to look something like this: https://gist.github.com/Dav1dde/10fafeaca4158bc14e38c332143b79b1
[18:53:51] <grym> causa-sui: typer or click
[18:53:58] <ArtfulDodger> han-solo dav1d: yes this is what I think, but my mind can't think parralel yet :D How can I make progress with that example? With a future maybe? Or tasks?
[18:54:04] <dav1d> ArtfulDodger, your 5 opponents can all think in parallel, the only bottleneck is the master player
[18:54:35] <causa-sui> grym: alright... so what I'm hearing is there's definitely no special reason to use __main__.py anymore, if there ever was
[18:54:38] <grym> causa-sui: here's an example of where i flagrantly disregard my own advice to make a cli.py, because the whole thing is 50 lines https://tildegit.org/grym/oxo/src/branch/master/oxo/__main__.py
[18:54:49] <grym> __main__ is so that you can `python -m yourthing` slightly more easily
[18:54:58] <grym> if you don't -m, you don't have to care aiui
[18:55:09] *** Quits: w1kl4s (~w1kl4s@user/w1kl4s) (Quit: Bye)
[18:55:16] *** Joins: the_lanetly_052 (~the_lanet@194.135.153.140)
[18:55:17] <causa-sui> alright, but if a user prefers to -m for some reason, I need __main__.py to support that?
[18:55:18] <dav1d> ArtfulDodger, I probably would do 1 Task per game (or opponent), that signals in a queue that the game is ready for the master to play and the master awaits the queue for the next game to think about
[18:55:30] *** Quits: p-i- (~Ohmu@mx-ll-223.206.150-183.dynamic.3bb.co.th) (Ping timeout: 260 seconds)
[18:55:33] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Read error: Connection reset by peer)
[18:55:35] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[18:55:38] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 256 seconds)
[18:55:43] *** Joins: jr_web_dev (~jr_web_de@ool-18bee068.dyn.optonline.net)
[18:55:51] *** Quits: Elodin (~weechat@user/elodin) (Quit: WeeChat 3.3)
[18:56:23] *** Joins: w1kl4s (~w1kl4s@user/w1kl4s)
[18:56:26] *** Quits: baltazar (~baltazar@84-236-12-229.pool.digikabel.hu) (Ping timeout: 260 seconds)
[18:56:40] *** Quits: mimmy (~mimmy@146.70.75.190) (Ping timeout: 268 seconds)
[18:56:47] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 264 seconds)
[18:56:48] *** Joins: Elodin (~weechat@user/elodin)
[18:56:49] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: rickybob)
[18:57:24] *** Joins: f0fz (~f0fz@122.11.212.164)
[18:57:27] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[18:57:42] <grym> causa-sui: i guess.  i mostly write my CLI code such that it has entry points and i expect the user to pip install it and call them.  if they don't, then it's their problem not mine
[18:57:43] *** Joins: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[18:58:02] <causa-sui> alright, understood, thanks
[18:58:02] *** Joins: baltazar (~baltazar@91-82-172-24.pool.digikabel.hu)
[18:58:05] *** Joins: cheater1__ (~Username@user/cheater)
[18:58:12] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[18:58:18] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[18:58:23] *** cheater1__ is now known as cheater
[18:58:25] <han-solo> ArtfulDodger: https://bpa.st/XJOA # the func i made sucks, but yeah that's the idea i guess
[18:58:29] *** Joins: f0fz (~f0fz@122.11.212.164)
[18:58:30] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[18:58:49] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[18:58:49] <bxsx> does collections.UserDict is equivalent to UserDict.IterableUserDict in Python2? No word about this change in https://docs.python.org/3.0/whatsnew/3.0.html#library-changes
[18:59:00] *** Joins: yeirr (~yeirr@user/yeirr)
[18:59:04] * dav1d just realized, he used Rust syntax in his example - oops
[18:59:07] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[19:00:01] <jr_web_dev> whats the simplest and best way to save data and bring it up.. something as simple as a checkmark box.. or a radio button selection.. so if a person selects a dropdown, a selections a checkbox, when they close it and reopen. those selections will be the same as last time?
[19:00:10] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 260 seconds)
[19:00:14] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
[19:00:30] <jr_web_dev> should i use sqlite for that?
[19:00:33] <deniska> jr_web_dev: saving json to a file, or an sqlite database
[19:00:38] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[19:00:40] <jr_web_dev> i see
[19:01:08] <deniska> sqlite handles a lot of stuff to you related to writing to files reliably which might get complex when done manually
[19:01:15] <deniska> s/to you/for you/
[19:01:18] <jr_web_dev> deniska: is there a way to kind of hide or protect that json file... if i were to pyinstaller and create an bin/exe is there a way to hide that json
[19:01:25] *** Joins: f0fz (~f0fz@122.11.212.164)
[19:01:25] *** Joins: CoolerX (~CoolerX@user/coolerx)
[19:01:39] <grym> jr_web_dev: normally, you stuff things like that in the user's data directory for your application
[19:01:41] <deniska> jr_web_dev: you can't really hide a file on the user's machine
[19:02:00] <Midjak> Hi I am looking for the `type__new__` documentation . Is it documented somewhere ? I know what are arguments __new__ , But I didn't find where this is documented.
[19:02:02] <jr_web_dev> hmm i see
[19:02:07] <deniska> jr_web_dev: but there're special file paths you may use for "files which store settings"
[19:02:28] <deniska> which are generally hidden by default (but nothing prohibits a user to access them if they want)
[19:02:37] <jr_web_dev> one thing i heard though is that sqlite is baked into python.. so theres no need to run sqlite database.. would i still have to find a way to save sqlite files in a proper location in the users directory
[19:02:47] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[19:03:00] <jr_web_dev> deniska: whats the proper location or conventional location ?
[19:03:00] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 256 seconds)
[19:03:06] <deniska> jr_web_dev: sqlite handles opening, writing, closing files, but you still need to give it a location
[19:03:13] <jr_web_dev> riiight
[19:03:18] <jr_web_dev> oh dang it
[19:03:21] <Wooble> jr_web_dev: https://pypi.org/project/appdirs/
[19:03:48] *** Joins: f0fz (~f0fz@122.11.212.164)
[19:03:50] *** Joins: ub (~Thunderbi@p200300ecdf0ba29aa5e920d3668bb518.dip0.t-ipconnect.de)
[19:03:53] <deniska> yeah, appdirs is common for getting these location in a cross platform way
[19:04:02] *** Joins: sedeki (~textual@user/sedeki)
[19:04:08] <jr_web_dev> nice!
[19:04:34] *** Joins: Klinda (~superleag@user/klinda)
[19:04:40] <jr_web_dev> well i guess thats about all i need now... im on my way to creating persistent data. thank you so much guys!
[19:04:43] <han-solo> ArtfulDodger: maybe what i did is not correct
[19:05:08] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[19:05:22] <ArtfulDodger> I'm thinking and try to understand :D I'll write you soon :P
[19:06:45] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[19:06:52] <dav1d> ArtfulDodger, basically you need to make sure you're waiting on multiple things at some point (so they can think in parallel)
[19:07:34] *** Quits: ialokin (znc@user/ialokin) (Ping timeout: 260 seconds)
[19:08:04] <dav1d> ArtfulDodger, what you can do to start is, do everything in sequence "wait for all opponents to make a move in parallel" then "master decides on all games one by one" then back to "wait for all opponents to make a move in parallel" - Once you have that, you can further optimize and let the master make moves while the opponents are still thinking
[19:08:17] *** Joins: mimmy (~mimmy@146.70.75.189)
[19:08:51] *** Quits: pankid (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:09:28] *** Quits: jr_web_dev (~jr_web_de@ool-18bee068.dyn.optonline.net) (Quit: WeeChat 2.8)
[19:09:29] *** Joins: pankid (~quassel@pankid.club)
[19:09:29] *** Quits: pankid (~quassel@pankid.club) (Client Quit)
[19:09:34] *** Joins: dgdg (~dg_dg@cm-171-101-74-57.revip11.asianet.co.th)
[19:09:48] *** Joins: teut (~teut@182.68.64.194)
[19:09:59] *** Joins: pankid (~quassel@pankid.club)
[19:10:19] *** Quits: pankid (~quassel@pankid.club) (Client Quit)
[19:11:17] *** Joins: pankid (~quassel@pankid.club)
[19:11:53] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:12:28] *** Quits: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Ping timeout: 265 seconds)
[19:12:53] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[19:13:09] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[19:13:42] <braxas> hi, I have list(itertools.product([(0,"A"),(1,"B")],[True,False])) == [((0, 'A'), True), ((0, 'A'), False), ((1, 'B'), True), ((1, 'B'), False)]
[19:14:00] *** Joins: lastshell (~lastshell@user/lastshell)
[19:14:02] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:e0e:6dbd:8d62:66e7) (Ping timeout: 240 seconds)
[19:14:07] <braxas> But I want [(0, 'A', True), (0, 'A', False), (1, 'B', True), (1, 'B', False)]
[19:14:16] *** Quits: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk) (Remote host closed the connection)
[19:14:17] <braxas> Is there a simple way to do this without list comprehension
[19:14:43] *** Joins: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[19:14:54] *** Joins: varaindemian (uid73404@ilkley.irccloud.com)
[19:14:59] <ormiret> dav1d, ArtfulDodger: or put in a lock so master is only thinking about one game at a time https://bpa.st/FHCQ
[19:15:13] <braxas> [(*a, b) for a,b in itertools.product([(0,"A"),(1,"B")],[True,False])]
[19:15:16] <braxas> I guess that
[19:15:23] *** Quits: mags (~mags@097-090-237-145.res.spectrum.com) (Ping timeout: 264 seconds)
[19:15:58] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[19:16:01] *** Quits: dgdg (~dg_dg@cm-171-101-74-57.revip11.asianet.co.th) (Ping timeout: 265 seconds)
[19:16:30] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Client Quit)
[19:16:40] *** Joins: mags (~mags@097-090-237-145.res.spectrum.com)
[19:18:01] *** Joins: defb (~defb@user/defb)
[19:18:42] *** Joins: asix (~Anders@user/asix)
[19:18:47] <dav1d> ormiret, that works, but in my opinion is a bit messy and would prefer an implementation with independent actors and signalling about game states
[19:19:41] *** Quits: trainsley69 (~trainsley@c151-177-173-170.bredband.tele2.se) (Ping timeout: 250 seconds)
[19:19:45] *** Quits: hzm74 (~hzm74@217-121-154-127.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[19:20:00] <ArtfulDodger> david: your proposal is how I would think in terms of multiprocess: opponents = [Process() for each oponent] ; then start all oponents processes ; then play all masters' moves in parralel ; then join() the oponents processes. Would that thinking apply to asyncio as well?
[19:20:26] *** Quits: rsx (~dummy@ppp-188-174-134-10.dynamic.mnet-online.de) (Quit: rsx)
[19:21:07] <ArtfulDodger> I think that my problem is not documented enough, I shuold specify who can play first and what can be concurrent or not so that things are clearer.
[19:22:00] <dav1d> ArtfulDodger, almost, usually you would want to parallelize the entire game not just one set of moves, so you would have one process per opponent (like you sketched) and one process for the master, the master could have a queue of games that are ready to be played and all the opponents put their game state into the queue after they played and wait
[19:22:00] <dav1d> for the master to make his move and "return" the game
[19:22:21] <dav1d> and with async* you can use a task instead of a process/thread
[19:23:00] <dman777> user.account.firstName; {'user': {'account': {'firstName': 'foo', 'lastName': 'bar', 'misc': 'data'}}}; glom.core.PathAccessError: could not access 'user', part 0 of Path('user', 'account', 'firstName'), got error: KeyError('user')... what am I doing wrong here where glome is not finding the path?
[19:23:00] <dav1d> let me see if I can make that work, my python is a bit rusty nowadays
[19:23:58] *** Quits: mags (~mags@097-090-237-145.res.spectrum.com) (Ping timeout: 256 seconds)
[19:24:28] *** Quits: alkino (~quassel@user/alkino) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:25:28] *** Joins: mags (~mags@097-090-237-145.res.spectrum.com)
[19:26:15] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:26:22] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:3004:83bf:8b32:5e60)
[19:27:41] <han-solo> ArtfulDodger: yes, more info
[19:28:18] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[19:28:31] *** Quits: guenhael (~Thunderbi@193.52.208.98) (Read error: Connection reset by peer)
[19:28:39] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[19:29:48] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[19:30:12] *** Quits: mags (~mags@097-090-237-145.res.spectrum.com) (Ping timeout: 256 seconds)
[19:30:39] *** Joins: mags (~mags@097-090-237-145.res.spectrum.com)
[19:31:14] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Client Quit)
[19:31:30] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[19:33:00] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[19:33:24] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[19:33:48] *** Quits: Jonopoly (~Jonopoly@user/jonopoly) (Quit: WeeChat 3.0)
[19:35:05] *** Joins: h3mstock (~hemstock@194.59.250.234)
[19:35:29] <ArtfulDodger> han-solo: actually this is just an exercise so that I learn and practice all concepts of asyncio, so I have no precise need in mind
[19:35:48] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: restarting)
[19:36:04] <ArtfulDodger> If you know great online exercises covering all asyncio I'm also interested :D
[19:36:28] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 256 seconds)
[19:36:45] *** Quits: hemstock (~hemstock@194.59.250.234) (Ping timeout: 268 seconds)
[19:37:11] <ArtfulDodger> dav1d: I think I'm happy that I can keep with asyncio the same thinking I had with multiprocessing
[19:37:26] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[19:37:45] <han-solo> i haven't done much with asyncio, or not very upto date with it. I usually just check the python docs or https://pymotw.com/3/asyncio/
[19:38:14] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[19:39:23] *** Joins: hemstock (~hemstock@194.59.250.234)
[19:39:34] *** Joins: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul)
[19:39:49] *** Joins: neilthereildeil (~neilthere@pool-71-114-72-118.washdc.fios.verizon.net)
[19:40:02] *** Joins: humbertowoody (~humbertow@189.236.62.65)
[19:40:04] *** Parts: neilthereildeil (~neilthere@pool-71-114-72-118.washdc.fios.verizon.net) ()
[19:40:38] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:41:24] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Client Quit)
[19:41:40] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:41:53] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:42:05] *** Quits: nosoul (nosoul@gateway/vpn/protonvpn/nosoul) (Ping timeout: 246 seconds)
[19:42:06] *** Quits: h3mstock (~hemstock@194.59.250.234) (Ping timeout: 256 seconds)
[19:42:17] *** Joins: Gerula (~Gerula@user/gerula)
[19:42:25] *** Quits: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul) (Remote host closed the connection)
[19:42:35] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:42:59] *** Quits: humberto1 (~humbertow@189.236.62.65) (Ping timeout: 264 seconds)
[19:43:27] <dman777> except glom.core.PathAccessError: is this the correct way to catch an error with glom? I am not able to catch so far
[19:43:44] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.9)
[19:45:00] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[19:45:54] *** Quits: the_lanetly_052 (~the_lanet@194.135.153.140) (Ping timeout: 260 seconds)
[19:46:03] *** Quits: Duckle (~Duckle@user/duckle) (Remote host closed the connection)
[19:46:34] *** Joins: nosoul (nosoul@gateway/vpn/protonvpn/nosoul)
[19:46:46] *** Quits: hemstock (~hemstock@194.59.250.234) ()
[19:47:47] *** Quits: Bakunin (~Lindis@user/lindis) (Remote host closed the connection)
[19:47:50] *** Joins: drogas (~drogas@jump2.jet.uk)
[19:48:13] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[19:48:32] *** Joins: Bakunin (~Lindis@user/lindis)
[19:48:36] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 276 seconds)
[19:48:55] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[19:49:20] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[19:50:16] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:51:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[19:51:39] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[19:51:53] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[19:52:21] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:52:50] *** Joins: fikran (~fikran@user/fikran)
[19:53:30] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:55:24] * foo gloms han-solo
[19:58:08] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[19:58:25] *** Joins: BlueSky__ (~BlueSky@user/bluesky)
[19:58:32] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[19:59:57] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:00:35] *** Quits: BlueSky__ (~BlueSky@user/bluesky) (Remote host closed the connection)
[20:00:56] *** Joins: BlueSky__ (~BlueSky@user/bluesky)
[20:01:25] *** Quits: BlueSky_ (~BlueSky@user/bluesky) (Ping timeout: 268 seconds)
[20:01:56] *** Quits: mimmy (~mimmy@146.70.75.189) (Ping timeout: 265 seconds)
[20:02:04] *** Quits: BlueSky__ (~BlueSky@user/bluesky) (Remote host closed the connection)
[20:02:24] *** Joins: BlueSky__ (~BlueSky@user/bluesky)
[20:03:34] *** Quits: BlueSky__ (~BlueSky@user/bluesky) (Read error: Connection reset by peer)
[20:03:54] *** Joins: BlueSky__ (~BlueSky@user/bluesky)
[20:04:27] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[20:04:40] *** Joins: y1n (~y1n@178.165.165.105.wireless.dyn.drei.com)
[20:05:04] *** Quits: BlueSky__ (~BlueSky@user/bluesky) (Read error: Connection reset by peer)
[20:06:27] *** Joins: lacrymology (~lacrymolo@181.167.210.254)
[20:07:07] <dav1d> ArtfulDodger, okay got a bit side tracked but here it is: http://sprunge.us/jZtDnf?py - If I had to do it again I probably would do it differently now
[20:07:25] *** Joins: hemstock (~hemstock@194.59.250.234)
[20:07:30] *** Joins: mimmy (~mimmy@146.70.75.189)
[20:07:37] <dav1d> give more "control" to the game (the game invokes the players)
[20:08:24] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[20:08:26] *** Joins: tobybl (~tobybl@213.31.134.235)
[20:08:44] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[20:09:17] *** Quits: adeliktas (~adeliktas@200116b8223dbc00494bb8b9b20f75eb.dip.versatel-1u1.de) (Quit: Client closed)
[20:09:18] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 256 seconds)
[20:10:28] <ArtfulDodger> Thank you dav1d. Gosh, it looks to complicated to me :(
[20:10:38] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9b56:dca:ba79:dc9b) (Ping timeout: 265 seconds)
[20:10:46] <dav1d> ArtfulDodger, yeah this turned out to be more complicated than I hoped for
[20:11:35] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[20:11:37] *** Quits: ckdCreations (~ckdCreati@147.55.130.32) (Read error: Connection reset by peer)
[20:11:41] <dav1d> ArtfulDodger, you basically have all players working independently as a task (started in main) and they always wait for their turn, but the master player waits on all games at the same time (not just one game like the opponents)
[20:11:52] *** Joins: ialokin (znc@user/ialokin)
[20:13:28] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[20:13:30] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[20:13:41] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[20:13:46] *** Joins: XV8 (~XV8@2601:5cb:c001:50:24ca:b775:d3c5:31a1)
[20:14:16] *** Joins: f0fz (~f0fz@122.11.212.164)
[20:16:21] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[20:16:24] <Hummer12007> python CLI state of the art is Click?
[20:17:06] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[20:17:13] <mefistofeles> Hummer12007: that's a popular choice, for sure
[20:17:30] <mefistofeles> I still use argparse :P I guess my CLI UIs are pretty simple
[20:17:36] <tdsmith> click is a common choice; there are other good choices. typer tries to be more concise
[20:20:47] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[20:21:02] <Hummer12007> hm, is there any library which can handle async commands directly?
[20:21:31] <Hummer12007> hm, i can just sprinkle a little decorator to do away with the boilerplate on top
[20:21:45] *** Joins: rany (~rany@user/rany)
[20:22:07] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[20:23:34] *** Joins: Jigsy (~Jigsy@user/jigsy)
[20:24:21] <dude-x> Hummer12007 click or typer
[20:24:38] <Hummer12007> oh, they do
[20:25:00] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[20:25:38] <Hummer12007> alas, they don't
[20:25:49] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[20:25:58] *** Joins: f0fz (~f0fz@122.11.212.164)
[20:26:05] <Hummer12007> though a 3-line decorator addresses it
[20:26:28] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi) (Quit: Leaving)
[20:27:33] *** Quits: ub (~Thunderbi@p200300ecdf0ba29aa5e920d3668bb518.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[20:29:10] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 268 seconds)
[20:30:38] <dav1d> ArtfulDodger, something easier http://sprunge.us/8eydoq?py - what ormiret suggested with a lock
[20:31:44] *** Quits: \mSg (mSg@user/msg/x-0285936) (Ping timeout: 265 seconds)
[20:31:59] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.9) (Ping timeout: 256 seconds)
[20:32:48] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[20:32:52] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[20:32:59] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Read error: Connection reset by peer)
[20:33:01] *** Quits: l4yer (~l4yer@195.181.170.210) (Remote host closed the connection)
[20:33:18] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[20:34:25] *** Quits: nomic (~nomic@185.217.117.59) (Quit: Leaving)
[20:34:49] *** Quits: y1n (~y1n@178.165.165.105.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[20:34:54] *** Quits: tobybl (~tobybl@213.31.134.235) (Read error: Connection reset by peer)
[20:35:01] <dav1d> ArtfulDodger, running it with Master(0) takes 6 seconds, I believe that is what you expected initially
[20:35:45] *** Joins: l4yer (~l4yer@195.181.170.210)
[20:35:59] <ArtfulDodger> Is it correct that when we create a task, its coroutine is started asap (i.e. when the CPU is no longer busy) with no other condition?
[20:36:05] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 264 seconds)
[20:36:39] <ArtfulDodger> If yes, wouldn't it be interesting to use a future here? So that it starts only when a precondition is met (= the master finished his move)
[20:37:39] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 256 seconds)
[20:38:41] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[20:39:49] <dav1d> ArtfulDodger, in the 2nd example you can remove the asyncio.create_task() actually (I added it for now reason). And yes, a task is submitted to the event loop and polled by the event loop asap
[20:40:22] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:40:29] *** Quits: daoudr__ (~daoudr@xdsl-31-164-222-159.adslplus.ch) (Ping timeout: 256 seconds)
[20:40:44] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[20:40:45] <dav1d> ArtfulDodger, about the 2nd part I am not sure what you mean, waiting on a lock in async* does not occupy the event loop, this task is waiting for the master, but while it is waiting the event loop can process the other games
[20:42:26] *** Quits: l4yer (~l4yer@195.181.170.210) (Remote host closed the connection)
[20:42:59] *** Quits: mimmy (~mimmy@146.70.75.189) (Ping timeout: 264 seconds)
[20:43:37] *** Joins: tobybl (~tobybl@213.31.134.235)
[20:43:40] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[20:43:59] *** Quits: JaredCE (~JaredCE@93.115.192.243) (Ping timeout: 268 seconds)
[20:44:14] *** Joins: Duckle (~Duckle@user/duckle)
[20:44:25] *** Quits: ialokin (znc@user/ialokin) (Quit: it was tempting to stay, but I had to quit :))
[20:44:40] *** Joins: ialokin (znc@user/ialokin)
[20:44:54] *** Joins: JaredCE (~JaredCE@93.115.192.243)
[20:45:28] *** Joins: Valeria (~Valeria@user/valeria)
[20:45:49] *** Quits: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 268 seconds)
[20:46:20] *** Joins: akk (~akk@75.161.146.115)
[20:46:27] *** Quits: rany (~rany@user/rany) (Ping timeout: 276 seconds)
[20:48:48] *** Joins: rany (~rany@user/rany)
[20:48:51] *** Joins: arinov (~arinov@213.194.126.155)
[20:49:38] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Remote host closed the connection)
[20:49:43] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:49:47] *** Quits: JaredCE (~JaredCE@93.115.192.243) (Ping timeout: 265 seconds)
[20:49:51] *** Joins: f0fz (~f0fz@122.11.212.164)
[20:50:05] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[20:51:40] *** Quits: f0fz (~f0fz@122.11.212.164) (Read error: Connection reset by peer)
[20:52:16] <ArtfulDodger> No I mean, could it be another way of implmenting this problem? I am just testing my understanding of futures here: If a future depends on the result of other coroutines we may use it to tell that the player's move is dependant for a firt master's move
[20:52:30] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[20:53:16] *** Quits: XV8 (~XV8@2601:5cb:c001:50:24ca:b775:d3c5:31a1) (Quit: Textual IRC Client: www.textualapp.com)
[20:54:04] *** Quits: Spawn (~Spawn@user/spawn) (Remote host closed the connection)
[20:55:20] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:fdcb:79e0:754c:cdbd)
[20:55:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[20:55:47] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 256 seconds)
[20:56:11] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 264 seconds)
[20:56:16] *** Quits: aphysically (~aphysical@user/aphysically) (Quit: aphysically)
[20:56:26] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[20:56:28] <dav1d> ArtfulDodger, that is pretty much what Game.play is, it waits on player1 and then player2
[20:56:33] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 265 seconds)
[20:56:48] *** dcaro is now known as dcaro_away
[20:57:11] *** Joins: fikran (~fikran@user/fikran)
[20:57:58] *** Quits: sickdugongo (~sickdugon@user/sickdugongo) (Read error: Connection reset by peer)
[20:58:03] <dav1d> maybe I am misunderstanding the question
[20:58:18] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[20:58:19] *** Joins: aphysically (~aphysical@user/aphysically)
[20:58:48] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[20:58:53] <dman777> prefillMapping = field['props']['prefillMapping'] if prefillMapping does not exist how would I keep from getting keyword error?
[20:59:22] <han-solo> what do you wanna happen if it doesn't exist ?
[20:59:34] <grym> dman777: with that syntax, you don't and try/except the keyerror
[20:59:52] <han-solo> s/wanna/expect to/
[20:59:59] <grym> you can .get(thekey,thedefault) instead, if that's useful
[21:00:02] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 260 seconds)
[21:00:12] * han-solo gives foo his wallet
[21:00:47] *** Joins: xkuru (~xkuru@user/xkuru)
[21:00:48] *** Joins: lack (~lack@user/lack)
[21:00:50] <dman777> grym: is it better to use try except or check with a if statement with has_key()?
[21:01:13] <grym> dman777: both have their uses, which one is better depends on what you're up to
[21:01:23] *** Quits: ubert (~Thunderbi@p200300ecdf0ba29ae6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[21:02:21] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Remote host closed the connection)
[21:02:46] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[21:03:59] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[21:04:30] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[21:04:43] *** Quits: RiFo (~RiFo@user/rifo) (Quit: ... and thanks for all the fish.)
[21:04:47] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[21:05:24] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[21:05:57] *** Joins: tijuco (~tijuco@user/tijuco)
[21:06:23] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 264 seconds)
[21:06:50] <dman777> grym: can I mix exceptions like this? https://bpa.st/Z6BA
[21:06:58] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[21:07:21] *** Joins: Deep6 (~jhenkel@d154-5-179-234.bchsia.telus.net)
[21:08:02] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 260 seconds)
[21:08:11] *** Joins: mimmy (~mimmy@146.70.75.190)
[21:08:38] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[21:08:53] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Client Quit)
[21:09:44] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[21:10:19] *** Joins: audiobirb (~audio@user/audio)
[21:10:45] *** Joins: onichomp (~onichomp@2806:264:4404:8016:85bb:d6c8:6a2e:8f43)
[21:10:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:11:52] *** Quits: rany (~rany@user/rany) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:12:03] *** Joins: rany (~rany@user/rany)
[21:12:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:12:22] *** Quits: onichomp (~onichomp@2806:264:4404:8016:85bb:d6c8:6a2e:8f43) (Read error: Connection reset by peer)
[21:13:01] *** Joins: onichomp (~onichomp@2806:264:4404:8016:85bb:d6c8:6a2e:8f43)
[21:13:22] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:fdcb:79e0:754c:cdbd) (Ping timeout: 256 seconds)
[21:15:32] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[21:15:32] *** Quits: delvian (~delvian@41.13.246.212) (Ping timeout: 240 seconds)
[21:15:40] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Remote host closed the connection)
[21:16:08] <grym> yes
[21:16:14] <grym> but you can also try it and see
[21:16:45] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[21:16:45] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[21:17:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:17:46] *** Joins: delvian (~delvian@41.13.246.212)
[21:17:48] <ArtfulDodger> What is the diff between ensure_future(coro) and create_task(coro)? Since they both return a task.
[21:17:57] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:18:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:19:02] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[21:20:13] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Quit: BinarySavior has dropped the mic)
[21:20:58] <ArtfulDodger> The doc says ensure_future was the low-level version priori to 3.7. But maybe the create_task is also tied to an event loop?
[21:21:18] *** Joins: adeliktas (~adeliktas@2001:16b8:223d:bc00:494b:b8b9:b20f:75eb)
[21:21:58] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[21:22:23] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[21:22:46] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[21:23:44] *** Joins: parv (~quass@user/parv)
[21:25:55] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Client Quit)
[21:27:15] *** Joins: jay-m126 (~jay-m@154.72.163.163)
[21:27:21] *** Joins: jay-m126_ (~jay-m@154.72.163.163)
[21:28:20] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[21:28:52] *** Quits: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net) (Remote host closed the connection)
[21:29:14] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[21:30:18] *** Joins: psyxopompos (~psyxopomp@user/psyxopompos)
[21:31:12] *** Quits: Geronimo (~Geronimo@user/geronimo) (Quit: I am away)
[21:31:53] *** Joins: Geronimo (~Geronimo@user/geronimo)
[21:32:04] *** Quits: sniperwolf (~sniperwol@91.230.98.1) (Ping timeout: 256 seconds)
[21:32:04] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 268 seconds)
[21:32:12] *** Joins: djapo (~archangel@user/djapo)
[21:32:29] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[21:32:30] *** Joins: emf (~emf@162.218.217.186)
[21:32:53] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[21:33:52] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:33:56] *** Joins: pycurious (~Adium@user/pycurious)
[21:34:16] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[21:34:29] *** Quits: teut (~teut@182.68.64.194) (Quit: Client closed)
[21:34:43] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Client Quit)
[21:36:31] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[21:36:43] *** Joins: hudo__ (~hudo@62.68.19.39)
[21:37:31] *** Joins: emf_ (~emf@2620:10d:c090:400::5:5ceb)
[21:38:14] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 268 seconds)
[21:38:22] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 260 seconds)
[21:38:55] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[21:39:18] *** Quits: emf (~emf@162.218.217.186) (Ping timeout: 260 seconds)
[21:40:13] *** Joins: fabs (~fabs@wrls-249-137-11.wrls-client.fas.harvard.edu)
[21:40:38] *** Joins: mall_krampus (~mallkramp@207.45.82.186)
[21:40:46] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[21:41:06] *** Joins: p-i- (~Ohmu@223.206.150.183)
[21:41:42] *** Joins: goldfish (~goldfish@user/goldfish)
[21:42:00] <ArtfulDodger> Also, some code snippets get an event loop and work with it, and some others use directly asyncio.* (with the default loop I guess). Is the first or the second better in 2021?
[21:42:15] *** Joins: swensson (~swensson@2a00:801:752:a8a2:2973:aade:4af5:1a6c)
[21:43:34] *** Joins: lionslicer (~lionslice@2804:d41:a7a6:1300:81cc:b95b:a813:c466)
[21:43:37] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[21:45:23] *** Quits: mall_krampus (~mallkramp@207.45.82.186) (Ping timeout: 264 seconds)
[21:45:39] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[21:46:29] *** Quits: trashbird (~trashbird@user/trashbird) (Read error: Connection reset by peer)
[21:48:38] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 260 seconds)
[21:50:24] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[21:51:48] *** Quits: han-solo (~hanish@user/han-solo) (Read error: Connection reset by peer)
[21:53:51] *** Quits: yeirr (~yeirr@user/yeirr) (Remote host closed the connection)
[21:54:36] *** Quits: varaindemian (uid73404@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:55:38] *** Quits: jay-m126 (~jay-m@154.72.163.163) (Ping timeout: 260 seconds)
[21:56:06] *** Quits: jay-m126_ (~jay-m@154.72.163.163) (Ping timeout: 260 seconds)
[21:56:24] *** Joins: han-solo (~han-solo@user/han-solo)
[21:56:30] <dav1d> ArtfulDodger, depends, generally as an application you can just use the default as a library you should others choose their own event loop
[21:56:39] *** Joins: humberto1 (~humbertow@189.236.62.65)
[21:56:43] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:56:43] <dav1d> *let others choose
[21:57:00] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:57:21] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:57:58] *** Quits: humbertowoody (~humbertow@189.236.62.65) (Ping timeout: 268 seconds)
[21:58:00] <CrtxReavr> ArtfulDodger, you a Dickens fan or a Flame Warrior fan?
[21:58:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:58:31] *** Joins: vicfred (~vicfred@user/vicfred)
[21:58:42] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[21:58:51] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:59:04] *** Quits: legola (~legola@46.235.101.181) (Remote host closed the connection)
[21:59:07] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:59:28] *** Joins: teut (~teut@182.68.64.194)
[22:00:41] <Ninpo> might just be really into British garage music :P
[22:01:20] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:01:35] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[22:01:53] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[22:02:23] <ArtfulDodger> dav1d: ah yes
[22:02:23] <CrtxReavr> Also a possibility, I suppose.
[22:02:32] <ArtfulDodger> CrtxReavr: Dickens :)
[22:02:44] <CrtxReavr> Or the classics. . . .
[22:03:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[22:03:41] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[22:03:42] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[22:03:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:03:55] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[22:06:04] *** Quits: pro_z (~pro_z@37.214.63.5) (Ping timeout: 256 seconds)
[22:06:17] *** Joins: trashbird (~trashbird@user/trashbird)
[22:06:25] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Remote host closed the connection)
[22:07:17] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[22:07:32] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 240 seconds)
[22:07:47] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 256 seconds)
[22:07:53] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[22:09:02] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[22:09:41] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f6bc:f00:93d:ef3a:ec37:e2db) (Ping timeout: 268 seconds)
[22:09:44] *** Joins: wizard1 (~warrior@5.238.149.42)
[22:09:51] <wizard1> sancho are you here
[22:09:52] *** Joins: sandb0y (~pirate@user/sandb0y)
[22:09:53] <wizard1> ?
[22:10:18] *** Quits: rb (~augh@theguntretort.com) (Quit: ZNC - https://znc.in)
[22:10:30] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 260 seconds)
[22:10:33] *** Joins: jyg (~jyg@23-119-125-152.lightspeed.sntcca.sbcglobal.net)
[22:10:37] *** Joins: rwb (~augh@theguntretort.com)
[22:10:39] *** Parts: wizard1 (~warrior@5.238.149.42) ()
[22:11:15] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Remote host closed the connection)
[22:11:26] *** Quits: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[22:11:39] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[22:11:45] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[22:12:20] <grym> too busy following around some weirdo with ideas about windmills
[22:12:39] *** Joins: zered (~Yweb@235.234.15.109.rev.sfr.net)
[22:14:25] *** Quits: bobfang1992_ (~textual@2a01:4b00:87fe:be00:2941:7b2f:659a:8781) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:14:33] *** Joins: guenhael (~Thunderbi@193.52.208.98)
[22:14:36] *** Quits: gitesh (uid423739@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:14:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[22:14:59] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[22:15:20] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 265 seconds)
[22:15:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:15:30] *** Joins: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net)
[22:16:19] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[22:17:18] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Quit: Leaving)
[22:18:32] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Read error: Connection reset by peer)
[22:19:10] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[22:19:41] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[22:20:58] *** Quits: resmo (~resmo@2a00:d420:9:8a00:763b:7f71:ac00:e3d6) (Ping timeout: 265 seconds)
[22:21:18] *** Quits: guenhael (~Thunderbi@193.52.208.98) (Ping timeout: 260 seconds)
[22:21:24] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 268 seconds)
[22:22:43] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:23:18] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[22:24:26] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[22:25:21] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 256 seconds)
[22:25:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[22:25:55] *** Joins: djhankb (~djhankb@208.113.164.68)
[22:26:02] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:fdcb:79e0:754c:cdbd)
[22:26:50] *** Joins: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net)
[22:27:13] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[22:31:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[22:32:00] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[22:32:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:34:39] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[22:37:34] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 260 seconds)
[22:37:35] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[22:37:49] *** Quits: mimmy (~mimmy@146.70.75.190) (Ping timeout: 256 seconds)
[22:38:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[22:38:06] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[22:38:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:38:34] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Quit: Client closed)
[22:39:39] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[22:41:45] *** Quits: thevishy (~thevishy@2405:201:f005:c007:e9f8:766e:92f2:6107) (Quit: Client closed)
[22:43:03] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:46:33] *** Quits: p-i- (~Ohmu@223.206.150.183) (Remote host closed the connection)
[22:46:42] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 268 seconds)
[22:46:45] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[22:46:53] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Quit: BinarySavior has dropped the mic)
[22:47:09] *** Joins: p-i- (~Ohmu@mx-ll-223.206.150-183.dynamic.3bb.co.th)
[22:47:18] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[22:48:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[22:49:04] *** ayusta is now known as ayustae
[22:49:34] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[22:50:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:50:39] <ArtfulDodger> dav1d: I've implemented my own version of the chess thing https://paste.debian.net/1220095/ It works but would you have comments about it?
[22:50:48] *** Joins: Auron (~Auron956@user/auron)
[22:52:20] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:52:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:53:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:53:41] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:55:26] <dav1d> ArtfulDodger, this will get problematic when you do more than a single move, at the end you're waiting for all opponents to finish thinking, but the moment the first opponent finished its move the master could already play again. Also I dont think you would use a future here, asyncio.Event/asyncio.Condition are the things you'd want to use. Futures
[22:55:26] <dav1d> usually have a result, you only use it to wait for an event/condition.
[22:55:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[22:57:05] *** Quits: Falconer (~ronnyma@227.84-48-191.nextgentel.com) (Ping timeout: 256 seconds)
[22:58:27] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[22:59:43] *** Joins: mimmy (~mimmy@146.70.75.189)
[23:03:24] *** Joins: Falconer (~ronnyma@227.84-48-191.nextgentel.com)
[23:03:52] *** Quits: swensson (~swensson@2a00:801:752:a8a2:2973:aade:4af5:1a6c) (Ping timeout: 256 seconds)
[23:04:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[23:05:05] *** Joins: JaredCE (~JaredCE@93.115.192.243)
[23:05:14] *** Joins: kdc (~kdc@196.211.197.159)
[23:05:38] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 260 seconds)
[23:06:33] *** Joins: fikran (~fikran@user/fikran)
[23:07:17] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:07:20] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[23:08:44] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:09:23] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[23:09:53] <ArtfulDodger> dav1d: Thanks! I wait for all oponenets at the end so that the simulation does not stop because that master finished all his moves, but the master actually start its new move asap
[23:10:07] *** Quits: JaredCE (~JaredCE@93.115.192.243) (Ping timeout: 256 seconds)
[23:10:18] <ArtfulDodger> If I set 2 sec thinking for the players and 1 for the master I get this https://www.cjoint.com/data3/KKttNwu7pG3_20211119-203550.jpg
[23:10:32] <dav1d> ArtfulDodger, but against whom in your code?
[23:10:33] *** Joins: JaredCE (~JaredCE@93.115.192.243)
[23:11:14] <dav1d> ArtfulDodger, if you just start another round you might play against a player who is actually thinking and make him play 2 moves at the same time
[23:11:35] <dav1d> and if you wait for all opponents to finish their moves, the master is idle
[23:12:06] *** Joins: i-oliva (~i-oliva@cpc110783-lewi20-2-0-cust1164.2-4.cable.virginm.net)
[23:12:17] *** Joins: todda7 (~torstein@31.4.137.82)
[23:12:22] <dav1d> (now speaking generally with variable amount of players and variable amount of thinking time, not this exact example where wait times might perfectly add up)
[23:12:22] *** Quits: tsaka__ (~torstein@31.177.97.84) (Ping timeout: 265 seconds)
[23:13:05] *** Joins: djapo (~archangel@user/djapo)
[23:14:47] *** Quits: Bakunin (~Lindis@user/lindis) (Remote host closed the connection)
[23:14:52] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Read error: Connection reset by peer)
[23:15:13] *** Quits: JaredCE (~JaredCE@93.115.192.243) (Ping timeout: 256 seconds)
[23:15:48] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[23:16:18] <ArtfulDodger> ah yes, I haven't thought about the next round so far :D Let me try...
[23:16:27] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[23:17:03] *** Quits: vulpes_vulpes (~vulpes_vu@62-64-204-12.dynamic.dial.as9105.com) (Remote host closed the connection)
[23:18:00] *** Joins: Bakunin (~Lindis@user/lindis)
[23:20:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:20:53] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:21:44] <jyg> So, when I looked a real world example for how OO is done in python, it is quite different from the wad of tutorials I've read/watched. Most tutorials are far more reminiscent of Java.  What I want to find is a resource that explains to a senior developer how to make OO development in python more pythonic.  But I just can't seem to find a good resource.  I mean... how do I think about encapsulation now that I work in a language (pyt
[23:22:27] <dav1d> jyg, your client cut off your message after "language (pyt"
[23:22:40] <jyg> weird, thanks... one more time...
[23:22:43] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[23:22:55] <jyg> in a language (python) that no longer confuses it with data hiding (java) ?
[23:24:10] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Remote host closed the connection)
[23:25:20] <Swayze> actually most OO is based on C++
[23:25:25] *** Quits: mags (~mags@097-090-237-145.res.spectrum.com) (Ping timeout: 256 seconds)
[23:25:26] <Swayze> including java
[23:25:38] *** Joins: nomic (~nomic@185.217.117.59)
[23:25:59] <jyg> True enough. It was just an example.
[23:26:43] <Swayze> historically
[23:26:43] <Swayze> 21:55 -!- nomic [~nomic@185.217.117.59] has joined #python
[23:26:49] <Swayze> simula is the oldest OO
[23:26:53] <Swayze> sorry mispaste
[23:27:13] *** Joins: mags (~mags@097-090-237-145.res.spectrum.com)
[23:28:48] *** Joins: Colt (~Colt@user/colt)
[23:28:51] <nedbat> jyg: i'm interested to hear more about this:  confusing encapsulation with data hiding.  Can you say more?
[23:29:23] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[23:29:46] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[23:30:22] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[23:30:29] *** Quits: delvian (~delvian@41.13.246.212) (Ping timeout: 268 seconds)
[23:30:59] *** Joins: delvian (~delvian@41.13.246.212)
[23:32:25] *** Quits: kdc (~kdc@196.211.197.159) (Remote host closed the connection)
[23:32:32] <jyg> Python has encapsulation, so does, for example Java. In Java, when you encapsulate something in an object it is package-private by default. In python, it is public by default.  Java development seems almost exclusively done ontop of that fact, with all sorts of rules above access via getters, for example.
[23:32:56] <jyg> s/above/about/
[23:35:18] <deniska> jyg: the reason for using getters and setters in java is not because they love incapsulation so much, but because switching between public field access and a method call is a breaking API change
[23:35:50] <deniska> in python there's @property, so it doesn't have to be a breaking change
[23:36:41] <Wooble> I thought it was because java programmers were taught to worry that the other programmer using their code might be an evildoer who will break the internals and have to suffer the consequences
[23:36:50] <jyg> The data hiding makes for one very popluar mode of thinking about how to program in OO.  When I use python
[23:37:38] <jyg> deniska, I'm not sure I understand how your initial comment applies. You change something in an unprecendented way and you break things.
[23:38:38] <jyg> deniska, it almost sounds like you're saying that python is meant for breaking APIs :)
[23:38:48] *** Joins: guenhael (~Thunderbi@2a01cb008c3d58001987dd991f8b1ba3.ipv6.abo.wanadoo.fr)
[23:39:09] <jyg> at any rate, my initial question/comment was more for finding a resource for gaining a better feel for pythonic OO
[23:39:26] <deniska> jyg: no. In java you write `getFoo` and `setFoo` methods because `obj.foo = 5` in java is a straight up public field access, it can't execute anything beyond that
[23:40:07] <deniska> jyg: in python you just expose `foo` as an attribute. In case if assignment to it has to do something clever, there's @property, which keeps `obj.foo = 5` working
[23:40:12] *** Quits: tijuco (~tijuco@user/tijuco) (Quit: Leaving)
[23:40:50] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[23:42:17] <deniska> that's one important point how python OOP differs from java's. Another one is that top level functions are allowed, so you don't have to invent classes just to have a place to put functions in
[23:42:23] *** Quits: mimmy (~mimmy@146.70.75.189) (Ping timeout: 264 seconds)
[23:43:38] <deniska> And the third point is duck typing, there's much less use for inheritence and interfaces
[23:43:46] <jyg> Sure. I'm not new to python. It's just becoming my primary language. So it's not just for scripts or devops at mt work anymore, but for much larger projects which I'm converting from both Java and Symfony/PHP
[23:44:14] *** Joins: p-i-_ (~Ohmu@223.206.150.183)
[23:44:40] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:fdcb:79e0:754c:cdbd) (Ping timeout: 256 seconds)
[23:47:38] *** Quits: p-i- (~Ohmu@mx-ll-223.206.150-183.dynamic.3bb.co.th) (Ping timeout: 260 seconds)
[23:48:00] <deniska> jyg: resources I'm thinking about explain when not to write classes rather than when to do that :)
[23:48:17] <deniska> jyg: https://eev.ee/blog/2013/03/03/the-controller-pattern-is-awful-and-other-oo-heresy/ for example
[23:48:29] *** Quits: lacrymology (~lacrymolo@181.167.210.254) (Quit: Lost terminal)
[23:48:56] <jyg> Hmm that URL looks religious...
[23:49:38] <grym> not reall
[23:49:50] <deniska> The tldr is that it's fine to have organic free range functions, the only use for classes is when you actually need this `self`
[23:50:00] <deniska> (or this `this` in case of some other languages)
[23:50:12] <grym> if your langauge permits first class functions, good lord, use 'em
[23:50:35] <deniska> doesn't have to be first class, just outside the classes :)
[23:50:38] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:50:55] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:51:06] <grym> modules namespace, classes contain associated data, functions consume instances and return new ones...
[23:51:10] <grym> whoops, f# :D
[23:51:12] <jyg> Please don't take this the wrong way, after a quick peruse, that's the sort of supposed computer science I'm not interesting in (any more). If I were to go into teaching, I would teach that software development is a matter of understand mathematics, logic, state machines and your customer's needs.
[23:51:56] <grym> jyg: it's more like "how should i write code such that my eyes bleed the least in 5 months when i have to re-remember what i did"
[23:52:03] *** Quits: delvian (~delvian@41.13.246.212) (Ping timeout: 268 seconds)
[23:52:04] <grym> very little theory here, very much self-preservation
[23:52:18] <jyg> grym, that article or my comment?
[23:52:23] *** Joins: delvian (~delvian@41.13.246.212)
[23:52:37] <grym> jyg: that article, and deniska's advice
[23:52:43] <deniska> Is there a linter setting to yell at methods not containing `self`? Seriously thinking about enforcing one at $JOB
[23:52:49] <jyg> well, then I agree with you :D
[23:52:57] <grym> woohoo, pragmatism
[23:53:10] <Wooble> deniska: if pylint doesn't already do that out of the box i'm shocked.
[23:53:13] <nedbat> deniska: pylint has a warning about that
[23:53:47] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 264 seconds)
[23:53:48] <deniska> yeah, we should probably use something along these lines. Our hooks so far include black and isort
[23:54:26] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[23:54:40] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[23:54:41] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:fdcb:79e0:754c:cdbd)
[23:55:09] *** Quits: onichomp (~onichomp@2806:264:4404:8016:85bb:d6c8:6a2e:8f43) (Ping timeout: 268 seconds)
[23:55:28] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[23:55:36] <grym> those are good ones
[23:56:37] <deniska> black apparently has settings now, at least for the width, and ours is configured at 105 which is at least 35 characters too wide :)
[23:57:33] *** Quits: rany (~rany@user/rany) (Ping timeout: 276 seconds)
[23:57:44] <jyg> So, I've written a ORM for LDAP in Symfony/PHP. As might be expected, I have a hierarchy of classes which mimic the hierarch of LDAP objectClasses (think of a non-relational database with tables that practice inheritence in a tree-like structure... maybe, like file system nodes that inherit parent permissions)
[23:57:56] *** Quits: ede (~ede@user/ede) (Remote host closed the connection)
[23:58:03] *** Joins: TracaChang (~QSDkl@gateway/tor-sasl/tracachang)
[23:58:22] <jyg> I'm not even sure with python if I need to recreate that, at least as completely as I've done it before
[23:58:25] *** Quits: Tas-sos (~Tas-sos@78-203-151.adsl.cyta.gr) (Quit: Lost terminal)
[23:58:41] <deniska> With ORMs "rules" apply to a lesser degree because they often do need `class` syntax just to group stuff conveniently
[23:59:01] *** Quits: alex11 (~alex11@user/alex11) (Remote host closed the connection)
[23:59:06] *** Joins: ede (~ede@user/ede)
[23:59:35] <jyg> so when I did this in PHP, the Class representations of obejectClasses included data-hidden LDAP attributes as class member variables
