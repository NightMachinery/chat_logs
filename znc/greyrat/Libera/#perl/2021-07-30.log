[00:00:05] <Grinnz> yeah, so my guess is whether it shows up as relative depends on whether it gets to the module via a t/ file or via checking lib/ first
[00:08:29] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[00:19:58] *** Joins: Trigon (~Thunderbi@73.127.1.41)
[00:22:53] *** Joins: finsternis (~X@23.226.237.192)
[00:27:54] *** Quits: castaway (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:28:13] *** Quits: castawayc (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net) (Ping timeout: 258 seconds)
[00:31:58] *** Joins: castaway (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net)
[00:33:18] *** Joins: castawayc (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net)
[00:41:06] *** Quits: subie (~subie@2601:4c0:4080:bc0:3d28:65e1:2001:f4b2) (Ping timeout: 240 seconds)
[00:41:35] * GumbyPAN CPAN Upload: String-Nudge-1.0002 by CSSON https://metacpan.org/release/CSSON/String-Nudge-1.0002
[00:44:31] *** Joins: subie (~subie@2601:4c0:4080:bc0:7508:7c48:2327:9818)
[00:47:03] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[00:48:05] *** Joins: haj (~haj@95.91.235.66)
[01:00:34] *** Quits: Trigon (~Thunderbi@73.127.1.41) (Ping timeout: 265 seconds)
[01:02:51] * ology hones his testing skills at the new $job. Yay for workplaces that embrace testing.
[01:03:01] <LeoNerd> :)
[01:03:30] *** Joins: Trigon (~Thunderbi@73.127.1.41)
[01:03:57] <ology> Mocking things used to be a mystery...
[01:06:34] * mst tends to avoid doing that
[01:06:39] <mst> mocking people is far more fun anyway
[01:06:50] <ology> Are you mocking me?
[01:07:08] <ology> </butthead>
[01:07:17] <LeoNerd> I have some unit test code somewhere that makes a mock Registry object, and I'm still annoyed I didn't name it a Mockery
[01:07:21] <ology> Maybe that was Beavis...
[01:09:44] <mst> LeoNerd: my $colin = Mockery->new
[01:10:45] <ology> mst: To make this latest test work, I mocked a subroutine that POSTs elsewhere *in* the route I am testing.
[01:11:18] <mst> ology: LWP ?
[01:11:22] <ology> Mojo
[01:11:36] *** Quits: Guest9 (~Guest9@103.240.170.208) (Quit: Connection closed)
[01:11:54] <mst> ology: https://metacpan.org/pod/Mojo::UserAgent::Mockable
[01:11:55] <Paperbot> Link title(s): [ Mojo::UserAgent::Mockable - A Mojo User-Agent that can record and play back requests without Inte... ]
[01:12:07] <mst> (if LWP you want the etherware, of course)
[01:12:23] <ehuelsmann[m]> Grinnz: I think you were right. making a few changes to be able to remove ../t and ../lib seems to provide a much more consistent result.
[01:12:59] <xenu> mst: "mockable" is how i would describe your face
[01:13:19] <mst> xenu: no issue to me
[01:13:25] <mst> xenu: after all, you're straight and I have standards
[01:13:57] <Grinnz> ehuelsmann[m]: i would usually even use lib::relative for including 't' but there is some guarantee that cpan tests will be run with pwd at the root of the dist
[01:14:04] <Grinnz> so lots of dists rely on that
[01:15:03] <ology> mst: Aha!
[01:15:18] <mst> ology: may or not be the best solution
[01:15:40] <mst> ology: for lightweight mokcing, p3rl.org/Test2::Tools::Mock
[01:15:56] <mst> ology: though I will accept "anything except Test::MockObject"
[01:16:07] <LeoNerd> Ohgod T:MO is terrible
[01:16:26] * mst shivers
[01:16:36] <LeoNerd> I actually found basically everything rather lacking, so I ended up making my own - https://metacpan.org/pod/Test::ExpectAndCheck
[01:16:36] <Paperbot> Link title(s): [ Test::ExpectAndCheck - expect/check-style unit testing with object methods - metacpan.org ]
[01:16:41] <ology> My shit's in code review. So I'll figure it out for Next Timeâ„¢
[01:16:54] <mst> ology: just remember, "never ever Test::MockObject"
[01:16:59] <mst> everything else is debatable
[01:17:00] <mst> that isn't :P
[01:17:02] *** Quits: magla (~gelignite@55d45e55.access.ecotel.net) (Quit: Stay safe!)
[01:18:15] <ology> Can you tell me why or point me to obviousness that I can promulgate at $work?
[01:18:26] <ology> Cause...
[01:20:27] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[01:21:12] <mst> *lolsob*
[01:22:21] <mst> ology: ancient, fragile, I had to argue with chromatic at some length to get him to stop monkeypatching UNIVERSAL, ...
[01:23:55] <ehuelsmann[m]> UNIVERSAL? oops
[01:23:55] <simcop2387> yea you should monkeypatch CORE instead
[01:24:21] <mst> ology: basically it's the CGI.pm of mocking - we're very glad somebody wrote it but in 2021 let's not :)
[01:24:37] <mst> LeoNerd: can you remember in a more concrete fashion?
[01:24:38] <LeoNerd> The only *true* monkeypatching is writing new function pointers in to PL_ppaddr[]
[01:24:48] <LeoNerd> Anything else is lesser magics
[01:25:11] * mst just has it filed under "this broke my tests more often than it helped"
[01:25:17] <LeoNerd> I don't remember much detail. I just remember looking at it once and thinking "ohgod this is crazy" and ran away
[01:25:22] <mst> honestly I tend to get by with Sub::Override since that's at least obvious
[01:25:55] <mst> ology: I mean, 'the internals make mst and LeoNerd both go "ohgod this is crazy" and run away' should be a reason in and of itself tbh :P
[01:26:39] <ology> Heehee
[01:27:16] <ology> For me it is. I will do some research and compare it with the things pointed to.
[01:27:21] <mst> but the Test2 one is integrated into Test2::Suite which makes it kinda "blessed" (no pun intended)
[01:28:33] * Grinnz honestly just does `local *Foo::bar = ...` most of the time
[01:28:45] <LeoNerd> Well,... yes that. That's all it looked like it was really doing
[01:28:55] <LeoNerd> The Test:: module I wrote actually does actual test assertions
[01:29:02] <LeoNerd> checks that things behaved as you said they should
[01:29:06] <mst> Grinnz: I switched from that to Sub::Override because lexical guard and also it scared people less
[01:29:23] <mst> people kept trying to replace my 'local *' code with, well, Test::MockObject
[01:29:24] <LeoNerd> Whereas most of the "mock" modules on CPAN are prettymuch just variations on a theme of  local *thing = sub {}  indeed
[01:29:28] <mst> they don't do that to Sub::Override
[01:30:16] <Grinnz> jberger did https://metacpan.org/pod/Mock::MonkeyPatch recently
[01:30:17] <Paperbot> Link title(s): [ Mock::MonkeyPatch - Monkey patching with test mocking in mind - metacpan.org ]
[01:30:26] <Grinnz> i have no idea how it compares
[01:32:02] <Grinnz> looks relatively similar to Sub::Override
[01:32:16] <mst> with some capacity to get args and stuff
[01:32:29] <mst> so it's half way between Sub::Override and Test::ExpectAndCheck
[01:33:11] <Grinnz> basically Sub::Override with a tiny metaprotocol
[01:41:41] * GumbyPAN CPAN Upload: DBD-SQLite-1.69_01 by ISHIGAKI https://metacpan.org/release/ISHIGAKI/DBD-SQLite-1.69_01
[01:43:33] *** Joins: whynot (~whynot@88.155.19.19)
[01:59:26] *** Quits: tcohen (~tcohen@192.141.149.53) (Quit: Textual IRC Client: www.textualapp.com)
[02:04:31] *** Quits: deadmarshal (~deadmarsh@95.38.118.190) (Ping timeout: 268 seconds)
[02:05:07] *** Quits: XV8 (~XV8@2601:5cb:c001:50:1a1f:cb47:7596:f578) (Ping timeout: 245 seconds)
[02:06:38] *** Joins: gast0n (~g4570n@user/gast0n)
[02:30:28] <perlbot> tirnanog pasted a new file at https://l.perl.bot/p/7wknoz - run3 side effect
[02:39:02] <Grinnz> tirnanog: hmm, it's the handle it used to read the output of the command, but it's a lexical handle so it should be closed and thus not affect warn anymore
[02:40:26] <tirnanog> Grinnz: strange, isn't it.
[02:41:03] <Grinnz> oh, i see a bug in IPC::Run3
[02:41:23] <Grinnz> https://metacpan.org/dist/IPC-Run3/source/lib/IPC/Run3.pm#L351-363
[02:41:24] <Paperbot> Link title(s): [ lib/IPC/Run3.pm - metacpan.org ]
[02:41:29] <Grinnz> these lexicals are declared conditionally
[02:41:36] <Grinnz> i bet that's causing a leak
[02:41:37] <tirnanog> oh my.
[02:43:21] <LeoNerd> Oh, yeah if you only connectionally LVINTRO then it won't save a clearsv on the save stack, so no emptying when it leaves scope
[02:43:42] <LeoNerd> Fun times. Please don't use that for Fun and Profit
[02:45:17] *** Joins: whynot_ (~whynot@37.73.94.166)
[02:45:29] *** Quits: whynot (~whynot@88.155.19.19) (Killed (NickServ (GHOST command used by whynot_!~whynot@37.73.94.166)))
[02:45:37] *** whynot_ is now known as whynot
[02:47:40] <tirnanog> even so, why would the file handle pop up in a subsequent warning/exception? is this a behaviour that is documented anywhere?
[02:51:06] <tirnanog> Grinnz: well, thanks. I'll try patching it later. I'm too disheartened to continue with what I was doing right now.
[02:51:32] <Grinnz> tirnanog: yes, warnings and errors while there is an active readline will append that information
[02:51:42] <Grinnz> i'm submitting a patch already :)
[02:52:12] <tirnanog> Grinnz: ah, splendid.
[02:52:36] <Grinnz> unfortunately it doesn't seem to fix the warning
[02:54:34] *** Joins: yaya (~yaya@user/yaya)
[02:54:40] *** Parts: yaya (~yaya@user/yaya) ()
[03:03:20] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 265 seconds)
[03:08:15] *** Walex is now known as Walex_away
[03:12:59] <tirnanog> Grinnz: closing both $out_fh and $in_fh, if defined, before $! is restored, does it for me.
[03:17:59] <tirnanog> as does just closing after the read loop in _read_child_output_fh.
[03:26:50] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[03:33:02] <Grinnz> tirnanog: ah, it's a leak from the tempfiles being cached
[03:33:12] <Grinnz> https://metacpan.org/dist/IPC-Run3/source/lib/IPC/Run3.pm#L58
[03:33:12] <Paperbot> Link title(s): [ lib/IPC/Run3.pm - metacpan.org ]
[03:34:14] <Grinnz> not really a leak, just leaves it open until the next run3 call
[03:34:36] *** Quits: woei (~woei@144.248.22.115) (Quit: Client closed)
[03:34:49] *** Joins: woei (~woei@144.248.22.115)
[03:35:13] <Grinnz> so it seems at least partially intentional
[03:39:03] <aindilis> Hey, I am using reveal.js to generate talk slides from source text materials, does anyone know of a preexisting way to use Perl (or something) to markup text with HTML syntax highlighting?
[03:39:03] <aindilis> For instance, it would recognize quotations, and mark them green and italic, or something like that.
[03:39:31] <aindilis> Or URIs, or name entities, etc.
[03:40:33] <Grinnz> heh. i'm sure "plain text synhi" is a thing, but i've never seen it
[03:42:01] <aindilis> I've actually written most of a pipeline that goes:
[03:42:02] <aindilis> source text -> Text::Fracture -> Lingua::EN::Sentence get_sentences -> GPT-3 -> Bullet Points -> [INSERT HIGHLIGHTER] -> Reveal.js -> Xvfb / ffmpeg -> mp4s, .pngs, and .wavs -> PDDL 2.2 -> otio.xml -> .kdenlive -> final.mp4
[03:43:19] <aindilis> Grinnz: ty, will google.  ironically I've got a project to parse "dead text" into entities, but it isn't finished.
[03:45:28] <Grinnz> unfortunately highlight.js's "plaintext" highlighter just applies base formatting and no highlighting :P
[03:45:34] <tirnanog> Grinnz: I see.
[03:46:12] <aindilis> this way I don't have to spend days editing crappy videos together, and I can incrementally improve the workflow to the point where it looks very professional, without having to do it all "by hand."
[03:46:44] <Grinnz> aindilis: https://xkcd.com/1319/
[03:46:45] <Paperbot> Link title(s): [ xkcd: Automation ]
[03:48:32] <aindilis> that's sort of accurate.  but I have like 6 presentations to make.  Here was the first generated video segment, with laughable results: https://frdcsa.org/~andrewdo/generation.webm
[03:51:02] <aindilis> it's just loading and sequencing AV assets is so time consuming.
[03:52:10] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 240 seconds)
[04:01:49] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[04:05:23] *** Joins: akaWolf (~akaWolf@akawolf.org)
[04:26:59] * GumbyPAN CPAN Upload: PLS-0.895 by MREISNER https://metacpan.org/release/MREISNER/PLS-0.895
[04:34:43] <Grinnz> ugh. that's the thing that bugs me about the language server approach for synhi
[04:35:17] <Grinnz> pasting BEGIN { `rm -rf ~/**` } in a pl file should probably not irreparably break my computer
[04:35:46] <mst> oh dear
[04:36:12] <Grinnz> but there's no reasonable way to understand dynamic perl syntax without running the parser
[04:36:31] <Grinnz> and there's no way to run the parser without that code running
[04:36:56] <mst> this is a problem I'm trying to figure my way around in xcl and it's really non trivial
[04:37:20] <Grinnz> this is why github rightfully told raku "no, we can't run raku to render pod6"
[04:37:23] *** Quits: Linux77 (~kvirc@187-126-71-30.user3p.veloxzone.com.br) (Ping timeout: 258 seconds)
[04:37:54] <mst> heh, yeah
[04:38:02] <Grinnz> (run the arbitrary raku code, that is)
[04:38:33] *** Joins: YaoNai (~YaoNai@user/yaonai)
[04:39:03] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[04:39:18] <Grinnz> istr LeoNerd had "plans" for static parsing with extensions able to register their syntax outside of the normal parsing mechanism
[04:39:30] <Grinnz> thats really the only reasonable option IMO
[04:40:51] <mst> right, I've had plans for that since I wrote Devel::Declare and discussed how to handle that wrt PPI with adamk
[04:41:10] <Grinnz> yeah, it could even be done in such a way that PPI and PPR could pay attention
[04:41:30] <mst> was the idea yes
[04:41:58] <mst> my guess was basically a tagged comment
[04:42:04] *** Joins: monkey_ (~user@190.104.116.134)
[04:42:13] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:42:36] <Grinnz> the trouble is we have to have a *very* good idea what we want to allow in syntax extensions to even propose how to do taht
[04:42:48] *** Quits: whynot (~whynot@37.73.94.166) (Quit: leaving)
[04:43:06] <Grinnz> but i think we have a better idea now than we did before at least
[04:43:17] <mst> *versioned* tagged comment
[04:43:24] <mst> it's the only way
[04:43:28] <mst> because we -will- miss something
[04:43:44] *** Joins: thunder (~thunder@user/thunder)
[04:53:33] *** Joins: deadmarshal (~deadmarsh@95.38.118.190)
[04:53:39] *** Quits: haj (~haj@95.91.235.66) (Quit: Leaving.)
[04:54:58] *** Joins: Linux77 (~kvirc@187-126-71-30.user3p.veloxzone.com.br)
[04:58:11] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[04:58:36] *** Quits: deadmarshal (~deadmarsh@95.38.118.190) (Ping timeout: 272 seconds)
[05:02:30] *** Quits: Pali (~pali@user/pali) (Ping timeout: 256 seconds)
[05:12:04] * GumbyPAN CPAN Upload: Lang-Go-Mod-0.003 by BCLAWSIE https://metacpan.org/release/BCLAWSIE/Lang-Go-Mod-0.003
[05:12:46] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[05:14:38] *** Joins: averell (~averell@user/averell)
[05:35:41] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:37:07] * GumbyPAN CPAN Upload: Lang-Go-Mod-0.004 by BCLAWSIE https://metacpan.org/release/BCLAWSIE/Lang-Go-Mod-0.004
[05:48:18] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 240 seconds)
[06:02:10] * GumbyPAN CPAN Upload: Lang-Go-Mod-0.005 by BCLAWSIE https://metacpan.org/release/BCLAWSIE/Lang-Go-Mod-0.005
[06:10:05] *** Joins: Su-Shee (~Susanne@p4ff49250.dip0.t-ipconnect.de)
[06:13:36] *** Quits: Su-Shee_ (~Susanne@p4ff496c3.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[06:14:01] *** Quits: R0b0t1``` (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Ping timeout: 250 seconds)
[06:16:57] *** Joins: R0b0t1``` (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[06:21:54] *** Quits: R0b0t1``` (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Ping timeout: 240 seconds)
[06:23:18] *** Joins: R0b0t1``` (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[06:28:00] *** Quits: gryphn (~gryphon@102.129.145.153) (Quit: kthxbye)
[06:43:02] <simcop2387> New cat subreddit, https://old.reddit.com/r/greebles xats attacking the invisible things  that only they see
[06:43:03] <Paperbot> Link title(s): [ greebles ]
[06:49:39] *** Joins: semeion (~semeion@user/semeion)
[06:54:55] *** Joins: deadmarshal (~deadmarsh@95.38.118.190)
[06:58:01] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:58:01] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (zinc.libera.chat (Nickname regained by services)))
[06:58:01] *** finn_elija is now known as FinnElija
[06:59:54] *** Quits: deadmarshal (~deadmarsh@95.38.118.190) (Ping timeout: 268 seconds)
[07:06:22] *** Quits: R0b0t1``` (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Ping timeout: 245 seconds)
[07:07:12] *** Joins: R0b0t1``` (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[07:28:07] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 250 seconds)
[07:31:36] *** Joins: zacts (~zacts@user/zacts)
[07:36:23] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[07:43:43] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[07:45:40] *** Joins: Martchus_ (~martchus@2a01:c23:c5e0:c000:d250:99ff:fe49:3cce)
[07:46:22] *** Quits: Martchus (~martchus@dynamic-095-117-097-154.95.117.pool.telefonica.de) (Ping timeout: 258 seconds)
[07:55:24] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 268 seconds)
[07:55:34] *** Joins: gast0n (~g4570n@user/gast0n)
[07:56:49] *** Parts: anthk_ (~anthk_@92.176.105.30) ()
[08:05:19] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[08:05:51] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 276 seconds)
[08:10:00] *** Joins: anthk_ (~anthk_@92.176.105.30)
[08:18:28] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[08:26:19] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[08:30:28] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 256 seconds)
[08:38:51] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:38:51] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[08:42:27] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[08:46:36] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 272 seconds)
[08:51:28] * GumbyPAN CPAN Upload: MooX-MouseTypeConstraints-0.01 by KARUPA https://metacpan.org/release/KARUPA/MooX-MouseTypeConstraints-0.01
[08:54:56] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! ðŸ‘‹)
[09:05:17] *** Joins: deadmarshal (~deadmarsh@95.38.118.190)
[09:05:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[09:05:57] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[09:09:20] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[09:10:10] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[09:10:56] *** Joins: semeion (~semeion@user/semeion)
[09:18:33] *** Joins: thunder (~thunder@user/thunder)
[09:21:18] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[09:22:18] *** Joins: semeion (~semeion@user/semeion)
[09:25:39] *** Joins: mnemonic (~semeion@user/semeion)
[09:28:27] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[09:34:55] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[10:00:15] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[10:02:04] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 258 seconds)
[10:10:44] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[10:13:41] *** Quits: mnemonic (~semeion@user/semeion) (Quit: WeeChat 3.2)
[10:21:22] *** Joins: horsepatat (~horsepata@212.3.197.38)
[10:21:24] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[10:23:06] *** Quits: horsepatat (~horsepata@212.3.197.38) (Read error: Connection reset by peer)
[10:26:23] *** Joins: horsepatat (~horsepata@212.3.197.38)
[10:54:03] *** Joins: ghoust (~ghoust@95.47.200.2)
[10:56:11] *** Joins: gggp (~gggp@60.10.194.43)
[10:57:40] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[10:58:14] *** Joins: ufobat (~martin@dynamic-095-117-077-129.95.117.pool.telefonica.de)
[11:02:51] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[11:03:00] *** Joins: gggp_ (~gggp@221.219.69.69)
[11:06:11] *** Quits: gggp (~gggp@60.10.194.43) (Ping timeout: 265 seconds)
[11:16:42] *** Quits: ufobat (~martin@dynamic-095-117-077-129.95.117.pool.telefonica.de) (Ping timeout: 240 seconds)
[11:20:29] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[11:20:43] *** Joins: habamax (~habamax@user/habamax)
[11:20:51] *** Joins: thunder (~thunder@user/thunder)
[11:29:30] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 240 seconds)
[11:30:41] *** Joins: gggp__ (~gggp@60.10.194.43)
[11:33:05] *** gggp__ is now known as gggp
[11:33:39] *** Joins: art1 (~romeyke@p200300ccdf0874009b89d1d99edecb81.dip0.t-ipconnect.de)
[11:34:30] *** Quits: gggp_ (~gggp@221.219.69.69) (Ping timeout: 276 seconds)
[11:35:27] *** Joins: mattil (~mattilinn@87-92-232-85.rev.dnainternet.fi)
[11:35:43] *** Quits: mattil (~mattilinn@87-92-232-85.rev.dnainternet.fi) (Remote host closed the connection)
[11:36:05] *** Joins: mattil (~mattilinn@87-92-232-85.rev.dnainternet.fi)
[11:36:24] *** Joins: magla (~gelignite@55d46dd2.access.ecotel.net)
[11:57:25] *** Quits: gggp (~gggp@60.10.194.43) (Remote host closed the connection)
[11:57:50] *** Joins: gggp (~gggp@60.10.194.43)
[11:57:55] *** Quits: gggp (~gggp@60.10.194.43) (Remote host closed the connection)
[11:58:20] *** Joins: gggp (~gggp@60.10.194.43)
[12:00:27] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[12:01:59] *** Joins: brtastic (~Thunderbi@185.24.91.138)
[12:02:26] *** Quits: gugod (gugod@li7-202.members.linode.com) (Ping timeout: 258 seconds)
[12:03:06] *** Joins: gugod (gugod@li7-202.members.linode.com)
[12:29:20] *** Joins: ufobat (~martin@dynamic-095-117-077-129.95.117.pool.telefonica.de)
[12:31:37] *** Joins: Pali (~pali@user/pali)
[12:41:41] *** Joins: gggp_ (~gggp@111.63.14.119)
[12:42:58] *** Joins: gggp__ (~gggp@60.10.23.160)
[12:44:53] *** Quits: gggp (~gggp@60.10.194.43) (Ping timeout: 250 seconds)
[12:46:31] *** Quits: gggp_ (~gggp@111.63.14.119) (Ping timeout: 258 seconds)
[12:49:10] *** Joins: gggp_ (~gggp@60.10.194.43)
[12:49:47] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:52:16] *** Quits: gggp__ (~gggp@60.10.23.160) (Ping timeout: 256 seconds)
[12:54:37] <shlomif> incoming
[12:55:43] *** Joins: gggp__ (~gggp@123.113.189.194)
[12:56:42] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[12:56:54] * GumbyPAN CPAN Upload: XML-Grammar-Fiction-0.24.0 by SHLOMIF https://metacpan.org/release/SHLOMIF/XML-Grammar-Fiction-0.24.0
[12:57:58] <shlomif> A facebook friend told me he switched "from xml to json" . WTF? https://www.shlomifish.org/meta/FAQ/why_xml.xhtml . Some people have herd mentality
[12:57:58] <Paperbot> Link title(s): [ Shlomi Fishâ€™s FAQ - Why are you still using XML? ]
[12:58:42] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 240 seconds)
[13:00:07] *** Quits: brunoramoslu (~brunoramo@94.252.121.255) (Ping timeout: 245 seconds)
[13:03:21] *** Quits: WinterStar (~IceLight@user/icelight) (Quit: WeeChat 3.2)
[13:03:28] *** Joins: choroba (~E.Choroba@88.146.255.106)
[13:05:33] *** Joins: WinterStar (~IceLight@user/icelight)
[13:06:27] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 258 seconds)
[13:06:29] <Botje> "the other side produces/expects json" is a perfectly cromulent reason
[13:07:51] *** Quits: silverwhitefish (~hidden@47.202.102.10) (Remote host closed the connection)
[13:08:22] *** Joins: silverwhitefish (~hidden@47.202.102.10)
[13:10:29] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[13:10:53] *** Quits: deadmarshal (~deadmarsh@95.38.118.190) (Ping timeout: 250 seconds)
[13:11:54] *** Quits: lopid (~lopid@user/lopid) (Ping timeout: 252 seconds)
[13:11:56] * GumbyPAN CPAN Upload: Number-ZipCode-JP-0.20210730 by TANIGUCHI https://metacpan.org/release/TANIGUCHI/Number-ZipCode-JP-0.20210730
[13:12:14] <ehuelsmann[m]> what is the correct idiom to check $@ for evaluation errors? Should I bind the value of $@ to undef before evaluation starts in order to depend on its value? Should eval{} return an explicit true value and I can only depend on $@ when eval returns false? 
[13:12:40] *** Joins: lopid (~lopid@user/lopid)
[13:13:02] *** Quits: nirnam (~nirnam@1.46.6.121) (Ping timeout: 245 seconds)
[13:13:16] <ehuelsmann[m]> (and which perldoc page should I have read to get the same advice?)
[13:13:23] *** Joins: brunoramoslu (~brunoramo@94.252.121.42)
[13:13:54] <dimbag> hi
[13:14:09] *** Joins: nirnam (~nirnam@1.46.6.121)
[13:14:35] <dimbag> is it possible to get a hash result for this  my $internal_numbers = $result_set->first->internal_numbers;
[13:16:58] <lopid> is internal_numbers a string?
[13:17:37] <taeaad> Sith switch to the light side all the time.
[13:21:32] <Botje> ehuelsmann[m]: you should only check $@ if eval returns undef.
[13:21:34] <Botje> perldoc -f eval
[13:21:35] <perlbot> Botje: Your documentation is available at: https://perldoc.perl.org/functions/eval
[13:21:49] <Botje> dimbag: what does " a hash result" mean?
[13:22:44] <Botje> ehuelsmann[m]: and of coure you should make sure that your actual code never returns undef
[13:23:00] <Botje> ehuelsmann[m]: alternatively there's Syntax::Keyword::Try which has an explicit catch {} block.
[13:25:10] <ehuelsmann[m]> Botje: yes, I love Syntax::Keyword::Try, however, this library is nearly without dependencies and the author likes that it is able to run on all versions since 5.6 (don't ask).
[13:25:18] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[13:25:33] <Botje> then what I said.
[13:26:05] <ehuelsmann[m]> thanks.
[13:33:08] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[13:33:34] *** Joins: tejr (~tejr@user/tejr)
[13:34:58] *** gggp__ is now known as gggp
[13:39:48] *** Quits: brtastic (~Thunderbi@185.24.91.138) (Ping timeout: 252 seconds)
[13:39:50] *** Joins: brtastic1 (~Thunderbi@ec2-35-176-113-228.eu-west-2.compute.amazonaws.com)
[13:42:08] *** brtastic1 is now known as brtastic
[13:45:03] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[13:52:27] *** Quits: gggp (~gggp@123.113.189.194) (Ping timeout: 268 seconds)
[13:52:36] *** Joins: gggp (~gggp@60.10.194.43)
[14:02:53] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:03:40] *** Joins: gggp_ (~gggp@60.10.194.43)
[14:04:47] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[14:06:15] *** Joins: gggp__ (~gggp@111.63.14.119)
[14:06:57] *** Quits: gggp (~gggp@60.10.194.43) (Ping timeout: 265 seconds)
[14:07:34] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:09:02] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[14:09:06] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 240 seconds)
[14:09:45] *** Joins: gggp_ (~gggp@60.10.194.43)
[14:10:11] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:11:35] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[14:12:11] *** Joins: gggp (~gggp@60.10.23.160)
[14:12:46] *** Quits: gggp__ (~gggp@111.63.14.119) (Ping timeout: 258 seconds)
[14:12:51] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:14:13] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[14:14:42] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 240 seconds)
[14:15:21] *** Joins: deadmarshal (~deadmarsh@95.38.118.190)
[14:15:32] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:17:02] * GumbyPAN CPAN Upload: Text-PO-v0.1.3 by JDEGUEST https://metacpan.org/release/JDEGUEST/Text-PO-v0.1.3
[14:24:20] *** Joins: zacts (~zacts@user/zacts)
[14:27:58] *** Joins: gggp_ (~gggp@60.10.194.46)
[14:29:18] *** Quits: gggp (~gggp@60.10.23.160) (Ping timeout: 252 seconds)
[14:30:47] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:32:49] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:33:33] *** Joins: csrf (~csrf@user/csrf)
[14:34:37] *** Quits: Trigon (~Thunderbi@73.127.1.41) (Ping timeout: 258 seconds)
[14:38:38] *** Joins: gggp__ (~gggp@60.10.194.46)
[14:42:14] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 265 seconds)
[14:43:07] *** Joins: gggp_ (~gggp@111.63.14.121)
[14:46:35] *** Quits: gggp__ (~gggp@60.10.194.46) (Ping timeout: 265 seconds)
[14:49:54] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[14:50:15] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:55:31] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[14:58:08] *** Joins: gggp__ (~gggp@60.10.23.170)
[15:00:58] *** Quits: gggp_ (~gggp@111.63.14.121) (Ping timeout: 240 seconds)
[15:01:36] *** Joins: omegatron (~some@p54bd5da4.dip0.t-ipconnect.de)
[15:10:06] *** Joins: gggp_ (~gggp@60.10.194.46)
[15:11:50] <ehuelsmann[m]> Botje: quick follow-up question: that strategy works with block-eval; I also have a stringy-eval() where the return value might be `undef`. Is there any way to distinguish the evaluation resulting in 'undef' versus an error-full situation?
[15:13:18] *** Quits: gggp__ (~gggp@60.10.23.170) (Ping timeout: 252 seconds)
[15:14:30] <v`> https://twitter.com/itsmaggydude/status/1420745385425788936
[15:14:30] <Paperbot> maggy (@itsmaggydude) 20h47m ago: when I tell you that this is my favorite aviation storyâ€¦â€¦
[15:18:31] <ilmari> ehuelsmann[m]: my $result; my $ok = eval "\$result = do { $code }; 1";
[15:20:07] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[15:20:16] <ehuelsmann[m]> ilmari: great! Thanks. That will help me get things to run more idiomatically.
[15:22:21] <ilmari> or, if you want to separate parsing and execution, you can do my $sub = eval "sub { $code }" or die "parse error: $@"; eval { $result = $sub->(); 1 } or die "runtime error: $@";
[15:22:58] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 240 seconds)
[15:25:10] <ehuelsmann[m]> for my purpose, they can be lumped into one.
[15:25:21] <ehuelsmann[m]> thanks for the code examples!
[15:26:47] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 245 seconds)
[15:28:33] *** Quits: magla (~gelignite@55d46dd2.access.ecotel.net) (Quit: Stay safe!)
[15:28:36] *** Joins: gggp__ (~gggp@60.10.23.170)
[15:31:30] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 240 seconds)
[15:34:08] <ehuelsmann[m]> I'm finding code which is re-throwing an exception using `croak`. Shouldn't that be `die`?
[15:34:19] *** Quits: mattil (~mattilinn@87-92-232-85.rev.dnainternet.fi) (Quit: Leaving)
[15:34:35] *** Parts: art1 (~romeyke@p200300ccdf0874009b89d1d99edecb81.dip0.t-ipconnect.de) ()
[16:01:45] *** Joins: koo555 (~koo6@89-24-13-235.customers.tmcz.cz)
[16:03:14] *** Quits: gggp__ (~gggp@60.10.23.170) (Ping timeout: 252 seconds)
[16:04:13] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 250 seconds)
[16:07:12] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[16:08:15] <choroba> ehuelsmann[m]: See https://perldoc.perl.org/Carp
[16:08:15] <Paperbot> Link title(s): [ Carp - alternative warn and die for modules - Perldoc Browser ]
[16:09:12] <choroba> croak won't report the place where the croak happened but where the sub containing it was called
[16:09:59] <ehuelsmann[m]> choroba: but when rethrowing an error, none of that is important; I mean: I don't want to include the rethrow-location in a stacktrace.
[16:10:12] <ehuelsmann[m]> (I don't think any other languages do that either, do they?)
[16:10:12] *** Quits: koo555 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 265 seconds)
[16:11:19] <choroba> Well, bare Perl doesn't even have a stacktrace.
[16:11:57] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[16:15:59] <ehuelsmann[m]> ah. good point. so, die() it is.
[16:25:07] <ilmari_> oh, cool. the latest version of the matrix irc bridge has much nicer rendering of replies
[16:25:32] <ilmari_> it just prepends the nick if the replied-to message is sufficiently recent
[16:25:40] <ilmari_> ilmari_: like this. https://mastodon.matrix.org/@matrix/106664280174937765
[16:25:41] <Paperbot> Link title(s): [ Matrix.org: "Attention all IRC bridge users (cc @liberachat@twâ€¦" - Matrix.org's Mastodon ]
[16:26:02] *** Joins: gareppa (~gareppa@user/gareppa)
[16:26:30] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[16:26:33] *** Joins: gggp (~gggp@123.118.187.5)
[16:27:16] * GumbyPAN CPAN Upload: Astro-Coord-ECI-TLE-Iridium-0.130_01 by WYANT https://metacpan.org/release/WYANT/Astro-Coord-ECI-TLE-Iridium-0.130_01
[16:32:40] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[16:35:45] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:36:24] <leitz> Is there an overwhelming reason to use "given/when" instead of "foreach/if"?
[16:36:47] *** Quits: deadmarshal (~deadmarsh@95.38.118.190) (Ping timeout: 265 seconds)
[16:37:12] <ilmari> there's an overwhelming reason _not_ to use it
[16:37:34] <ilmari> it has extremely convoluted matching rules
[16:37:37] <Adura> Something about given/when being a smartass.
[16:37:47] <ilmari> perlbot: smartmatch?
[16:37:48] <perlbot> ilmari: broken because eval: use warnings; my @foo = 0..10; print "this matches" if "0 but true" ~~ @foo; ... too vague for predictable behavior, use the comparison you mean or try Smart::Match for explicit smartmatching | "Any non-trivial example of smartmatch usually does something other than the author intended."
[16:38:07] <Adura> Yeah, that.
[16:38:49] <leitz> ilmari, thanks. I like the idea of case statements, but the code I'm poking at doesn't need the convolution.
[16:45:29] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 265 seconds)
[16:48:17] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:58:03] *** Quits: habamax (~habamax@user/habamax) (Quit: leaving)
[16:59:07] *** Joins: habamax (~habamax@user/habamax)
[17:02:35] *** Quits: horsepatat (~horsepata@212.3.197.38) (Read error: Connection reset by peer)
[17:04:29] *** Parts: nirnam (~nirnam@1.46.6.121) ()
[17:10:34] *** Quits: ghoust (~ghoust@95.47.200.2) (Quit: ghoust)
[17:12:30] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[17:16:21] * GumbyPAN CPAN Upload: experimental-0.025 by LEONT https://metacpan.org/release/LEONT/experimental-0.025
[17:26:29] <genio> Can we rip given/when out of everything and nuke it from existence?
[17:27:14] <leont> Probably not
[17:27:15] <simcop2387> leitz: check out https://metacpan.org/pod/Syntax::Keyword::Match for something that's new and quite possibly coming to the core language "soon"
[17:27:15] <Paperbot> Link title(s): [ Syntax::Keyword::Match - a match/case syntax for perl - metacpan.org ]
[17:28:05] <simcop2387> genio: i bet someone could make a: no feature 'given'; actually work, basically declaring yourself to be incompatible with anything using it.
[17:28:20] <genio> :( doing me a sad
[17:28:21] <simcop2387> whether you could get that into core is another question
[17:28:47] <shlomif> genio: nuking it will just give a sand splash: https://github.com/shlomif/shlomif-tech-diary/blob/master/hydrogen-bombs-are-likely-an-old-intelligence-hoax.asciidoc
[17:28:47] <Paperbot> Link title(s): [ shlomif-tech-diary/hydrogen-bombs-are-likely-an-old-intelligence-hoax.asciidoc at master Â· shlomi... ]
[17:29:11] <leont> The sensible thing it to transplant the thing into a module, so people who are using it aren't left in the dark. Well volunteered
[17:31:15] <simcop2387> leont: i doubt that'll get accepted either since that means breaking old code and requiring them to fix it
[17:31:30] <simcop2387> if that was acceptable we'd have been able to fix ~~ already
[17:32:59] <simcop2387> that said, if LeoNerd gets his way to allow infix keyword stuff, maybe we can make a sane smartmatch replacement
[17:33:40] <LeoNerd> genio: latest `use v5.35.x` already no longer includes given/when and smartmatch
[17:33:59] <simcop2387> oh neat
[17:34:06] *** Joins: jabberwok (~wlindley@75.105.20.104)
[17:34:07] <genio> ooooh
[17:34:49] <simcop2387> current eval is broken while i install cpan modules because i'm being lazy
[17:34:53] <Botje> hah. if python tried something like this there'd be people screaming for a fork
[17:35:11] <simcop2387> oh wait i've got the configs mapped differently it should be ok
[17:35:15] <Botje> "our obscure python 2.x application *DEPENDS* on this feature! how dare you remove it!"
[17:35:38] <Botje> perl++ # moving fast and breaking unused things
[17:35:43] *** Joins: anthk_ (~anthk_@92.176.105.30)
[17:36:53] <simcop2387> Botje: they had 10+ years of that fucking issue.  we're not exactly better *cough*raku*cough*
[17:37:14] <pragma-> When I came across given/when, several years ago, it seemed like the concise syntax I was looking for to have switch-like functionality. It has never broken for me. I really do not understand the hate it gets. :(
[17:38:25] <simcop2387> eval: $^V
[17:38:26] <perlbot> simcop2387: Couldn't execve(): -1, No such file or directory - No such file or directory at /home/perlbot/perl5/perlbrew/perls/perlbot-main/lib/site_perl/5.30.0/Sys/Linux/Syscall/Execve.pm line 123. 
[17:38:32] <simcop2387> bah
[17:39:05] <simcop2387> eval: $^V
[17:39:06] <perlbot> simcop2387: bless( {original => "v5.35.3",version => [5,35,3],qv => 1}, 'version' )
[17:39:08] <shlomif> simcop2387: raku is very functional on GNU hurd, i hear
[17:39:11] <leont> pragma-: it's sane enough if you limit yourself to a subset of its functionality. The number/string thing is the main thing people run into, the other issues are more obscure
[17:39:29] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[17:39:47] <simcop2387> leont: yea thankfully almost nobody ever did shenanigoats with the object overloading stuff
[17:40:03] *** Parts: anthk_ (~anthk_@92.176.105.30) ()
[17:40:18] <leont> simcop2387: is that accidental or on purpose? :-p
[17:40:38] <leont> I mean: https://metacpan.org/pod/Smart::Match
[17:40:38] <Paperbot> Link title(s): [ Smart::Match - Smart matching utilities - metacpan.org ]
[17:41:14] <shlomif> https://www.shlomifish.org/humour/fortunes/show.cgi?id=vapourware-on-freebsd
[17:41:15] <Paperbot> Link title(s): [ Discussing vapourware on Freenodeâ€™s ##freebsd - Fortune ]
[17:42:24] <pragma-> leont: is this the smart match used by given/when or is this a recommended alternative?
[17:42:59] <leont> The former, it uses smartmatch overloading
[17:43:34] <pragma-> Are you linking it to say "look at how horrible this is, don't use it. I know because I made it!" ?
[17:43:45] <pragma-> I am confused.
[17:44:02] <leont> It's a response to simcop2387's "almost nobody ever did shenanigoats with the object overloading stuff", because I totally did
[17:44:11] <pragma-> Oh. I thought you were still talking to me.
[17:44:16] * LeoNerd on PSC meeting and not paying attention here but will reply later
[17:44:53] <leont> I would argue it's more sane than the default stuff, given it's actually explicit about stuff. It's main problem is that it's not necessarily better than writing it out the normal way
[17:45:33] <pragma-> Well, given/when seems to work for me, and I like how it *looks*. I haven't looked under its hood at its source. But it hasn't broken for me, that I know of. So I'm hesitant to replace it in all my various modules.
[17:46:20] <pragma-> But this channel seems to think it's one of the worst things ever and that it's a huge code smell... 
[17:46:24] * GumbyPAN CPAN Upload: Syntax-Construct-1.022 by CHOROBA https://metacpan.org/release/CHOROBA/Syntax-Construct-1.022
[17:46:31] * pragma- anxiously hops from foot to foot indecisively.
[17:46:48] * leont doesn't think it's the worst thing ever, but it could have been a lot better
[17:47:59] <simcop2387> LeoNerd: we're mostly just shooting the shit and deciding you should have more work.  nothing terribly important
[17:49:56] <pragma-> Another reason I chose given/when, aside from liking how it *looks* and how it seemed to behave, is because it was core. Now I'm hearing that it's going to be removed from core soon?
[17:49:59] <pragma-> Ay yi yi.
[17:50:44] <mst> pragma-: we've been -trying- to figure out how to remove it for years
[17:50:52] <mst> the entire feature was a trainwreck
[17:50:58] <mst> I'll grant it's pretty though
[17:51:25] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[17:51:28] <choroba> being pretty means it has to go! This is Perl!
[17:51:33] <pragma-> Well, I am sad now. Now I have to find a suitable replacement and "fix" all my modules.
[17:52:00] <pragma-> What is the recommendation for something that looks like given/when, again?
[17:52:04] <choroba> I often just use dispatch tables.
[17:52:15] <leont> Don't come to that conclusion just yet, not until its departure actually has been announced.
[17:52:24] <pragma-> Maybe I'll just use good old fashioned if/else.
[17:52:31] * pragma- sighs heavily.
[17:52:37] <leont> I mean, getting rid of $[ took many years
[17:52:47] <leont> And $[ is like one of the worst ideas ever
[17:52:55] <mst> pragma-: Switch::Plain is nice
[17:53:31] <ilmari> perlbot: switch?
[17:53:31] <perlbot> ilmari: Yaakov> Don't use Switch.pm, it is canned hate. | https://shadow.cat/blog/matt-s-trout/show-us-the-whole-code/ | Nowadays, Switch::Plain is where it's at: https://metacpan.org/module/Switch::Plain | see smartmatch for why not to use feature 'switch';
[17:54:10] <choroba> There's also Switch::Perlish, but it needs my patch provided in the RT
[17:54:17] *** Joins: ThatOtherGuy (~LogicAsid@user/logicaside)
[17:54:43] *** Joins: oskie (usel@195-252-43-180-no254.tbcn.telia.com)
[17:54:54] *** Joins: raydiak_ (~raydiak@cyberuniverses.com)
[17:55:05] *** Joins: gggp_ (~gggp@60.10.194.46)
[17:55:05] *** Joins: sjn_ (sjn@sprocket.nvg.ntnu.no)
[17:55:15] *** Joins: timlegge_ (~quassel@142.167.255.204)
[17:55:27] *** Joins: a3r0 (~aero@61.100.184.210)
[17:56:25] *** Joins: skarn_ (~skarn@user/skarn)
[17:56:39] *** Joins: pekster` (~rewt@user/pekster)
[17:56:47] *** Joins: romel_ (~romel@romel.org.ua)
[17:56:47] *** Joins: eseyman_ (~manu@lfbn-idf1-1-2267-180.w92-151.abo.wanadoo.fr)
[17:57:28] *** Joins: glider_ (~glider@user/glider)
[17:57:38] *** Joins: djerius_ (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[17:58:08] *** Joins: deadmarshal (~deadmarsh@95.38.118.190)
[17:58:39] *** Quits: gggp (~gggp@123.118.187.5) (Ping timeout: 276 seconds)
[17:59:18] <pragma-> given/when is Switch.pm which is a source filter?
[17:59:32] <pragma-> I'm using a source filter module?
[17:59:45] <pragma-> Suddenly I feel like I *need* to replace my use of given/when!
[18:00:01] *** Joins: dimbag_ (~dimbag@pppoe246h2.ppp.kmv.ru)
[18:00:34] <pragma-> Import::Into is a source filter, too, isn't it?
[18:00:50] *** Quits: pekster (~rewt@user/pekster) (Killed (sodium.libera.chat (Nickname regained by services)))
[18:00:50] *** pekster` is now known as pekster
[18:00:56] <pragma-> I *like* Import::Into, though!
[18:01:00] * pragma- liked given/when too.
[18:01:12] * pragma- isn't so sure about source filters.
[18:01:33] <mst> pragma-: Import::Into is not a source filter
[18:01:45] <pragma-> There's been a few times where error messages appeared on weird lines and I hate it when that happens.
[18:01:46] *** Quits: dimbag (~dimbag@62.76.35.23) (Ping timeout: 240 seconds)
[18:01:58] <mst> right, Switch.pm was a fucker for causing that to happen
[18:02:26] <alh> >  given/when is Switch.pm which is a source filter? 
[18:02:26] <pragma-> I meant to complain the other day, that if my if (...) expression gets broken up over multiple lines, it'll report the error for the first line the if statement starts on rather than the actual line the conditional expression occurs on.
[18:02:30] <alh> Well, not core given/when ...
[18:02:48] <mst> pragma-: oh, yes, because the line number is provided by the 'statement start' op
[18:02:53] *** Joins: megaTherion_ (~therion@unix.io)
[18:03:10] <mst> in a multline if condition there's only expressions, no new statements, so there's nothing to provide the line number
[18:03:28] <choroba> given/when != Switch
[18:04:08] *** Quits: glider (~glider@user/glider) (*.net *.split)
[18:04:08] *** Quits: timlegge (~quassel@142.167.255.204) (*.net *.split)
[18:04:08] *** Quits: Skarn (~skarn@user/skarn) (*.net *.split)
[18:04:08] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (*.net *.split)
[18:04:08] *** Quits: a3r0_ (~aero@61.100.184.210) (*.net *.split)
[18:04:09] *** Quits: megaTherion (~therion@coruscant.unix.io) (*.net *.split)
[18:04:09] *** Quits: oskie_ (usel@195-252-43-180-no254.tbcn.telia.com) (*.net *.split)
[18:04:09] *** Quits: romel (~romel@romel.org.ua) (*.net *.split)
[18:04:09] *** Quits: sjn (sjn@sprocket.nvg.ntnu.no) (*.net *.split)
[18:04:09] *** Quits: eseyman (~manu@lfbn-idf1-1-2267-180.w92-151.abo.wanadoo.fr) (*.net *.split)
[18:04:09] *** Quits: LogicAside (~LogicAsid@user/logicaside) (*.net *.split)
[18:04:09] *** Quits: raydiak (~raydiak@cyberuniverses.com) (*.net *.split)
[18:04:09] <choroba> but don't use either
[18:04:09] *** skarn_ is now known as Skarn
[18:04:10] *** ThatOtherGuy is now known as LogicAside
[18:04:32] *** Joins: gryphn (~gryphon@102.129.145.153)
[18:11:37] <pragma-> mst: I could have sworn I saw Import::Into injecting code that tinkers with #line? 
[18:12:40] <pragma-> Hm, I'm looking at it again: https://metacpan.org/release/HAARG/Import-Into-1.002005/source/lib/Import/Into.pm#L22
[18:12:40] <Paperbot> Link title(s): [ lib/Import/Into.pm - metacpan.org ]
[18:13:09] <pragma-> This isn't a source filter, though? I guess I don't fully understand source filters yet.
[18:13:24] <pragma-> I'm looking at https://perldoc.perl.org/perlfilter#WRITING-A-SOURCE-FILTER
[18:13:24] <Paperbot> Link title(s): [ perlfilter - Source Filters - Perldoc Browser ]
[18:13:51] <pragma-> But in any case, what exactly is Import::Into doing with #line and stuff?
[18:14:25] <Grinnz> that's code generation, not a source filter
[18:15:14] <Grinnz> https://perldoc.perl.org/perlsyn#Plain-Old-Comments-%28Not%21%29
[18:15:14] <Paperbot> Link title(s): [ perlsyn - Perl syntax - Perldoc Browser ]
[18:15:32] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca) (Ping timeout: 245 seconds)
[18:16:50] <pragma-> We have a similar directive in C and I've never really understood its existence there either. I never saw the point of changing the line numbering. Hm.
[18:17:35] <simcop2387> new release of multics!
[18:17:46] <Grinnz> it just tells perl what file/line number to use for errors thrown from there
[18:17:48] <simcop2387> https://news.ycombinator.com/item?id=28006036
[18:17:49] <Paperbot> Link title(s): [ Multics MR12.7 released | Hacker News ]
[18:18:19] <pragma-> So, Import::Into is inserting eval statements and adjusting the line numbers to hide them?
[18:18:20] <alh> pragma-: Perl's own XS builders use the C pragmas
[18:18:36] <alh> It converts your XS file into a C file with lots of wrappers, then compiles the C file, but all errors will appears as the XS file and point to the correct place in the XS file
[18:18:36] <Grinnz> it's not "inserting", it's just running code
[18:18:43] <pragma-> s/hide them/keep my original code line numbers intact/
[18:18:57] <pragma-> Right, so why the #line adjustments?
[18:19:10] <Grinnz> cause file/line numbers from errors in string eval aren't particularly useful
[18:19:14] <pragma-> Oh.
[18:19:30] *** Joins: monkey_ (~user@190.104.116.134)
[18:19:39] <pragma-> Well, that makes sense then
[18:19:59] <simcop2387> looks like no perl support on multics
[18:20:28] <alh> Well, it's also about fooling caller 
[18:22:10] *** Joins: gggp__ (~gggp@60.10.23.170)
[18:22:56] <Grinnz> given/when isn't being removed (yet) and isn't a source filter, it's just not going to be in the feature bundle for use VERSION anymore
[18:23:14] <Grinnz> and the only sensible way to use it is if every 'when' is a regex match, pretty much
[18:23:31] <Grinnz> and even then, for/when is less broken
[18:24:32] <Grinnz> given introduces various unnecessary keywords and doesn't alias $_ properly until perl 5.18
[18:25:03] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 265 seconds)
[18:25:59] <Grinnz> when follows this list of rules and if you get to the smartmatching cases, the behavior is even harder to define https://perldoc.perl.org/perlsyn#Experimental-Details-on-given-and-when
[18:25:59] <Paperbot> Link title(s): [ perlsyn - Perl syntax - Perldoc Browser ]
[18:26:04] *** Joins: zacts (~zacts@user/zacts)
[18:26:04] *** Joins: brtastic1 (~Thunderbi@185.24.91.138)
[18:27:11] <Grinnz> smartmatch isnt' affected by feature bundles, it's just experimental
[18:27:41] <Grinnz> and probably should be deprecated at this point, but definitely will be if we get match and in working sensibly
[18:27:41] *** Quits: brtastic (~Thunderbi@ec2-35-176-113-228.eu-west-2.compute.amazonaws.com) (Ping timeout: 258 seconds)
[18:27:42] *** brtastic1 is now known as brtastic
[18:28:02] <mst> pragma-: that's just making the error message from the 'eval' report from the right spot
[18:28:08] <mst> pragma-: it's just a string eval though
[18:28:24] <pragma-> gotcha
[18:29:13] <mst> pragma-: basically, the idea is that since Import::Into is emulating "what if you did 'use Foo;'" the error message should come from the file/line that, if Import::Into didn't exist, would've said 'use Foo;'
[18:29:43] <pragma-> Right, makes perfect sense now.
[18:29:50] <mst> having errors come from inside your Import::Into-using import() sub would be less helpful
[18:30:04] <pragma-> indeed
[18:30:06] *** Quits: brtastic (~Thunderbi@185.24.91.138) (Remote host closed the connection)
[18:33:16] *** Joins: N4buc0 (~N4buc0@2001:1284:f013:305b:fcd:6dfd:6f83:7b96)
[18:33:22] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[18:33:49] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[18:34:36] *** Joins: gggp_ (~gggp@60.10.194.46)
[18:37:15] <pragma-> lol, wow. TIL about https://perldoc.perl.org/perlsyn#The-Ellipsis-Statement
[18:37:15] <Paperbot> Link title(s): [ perlsyn - Perl syntax - Perldoc Browser ]
[18:37:41] <pragma-> This tickles me.
[18:38:02] <Grinnz> yeah, it's not just pseudocode
[18:38:02] *** Quits: gggp__ (~gggp@60.10.23.170) (Ping timeout: 258 seconds)
[18:39:10] <pragma-> >Some folks colloquially refer to this bit of punctuation as a "yada-yada"
[18:42:51] *** Quits: berndj (~berndj@ns2.linksynergy.co.za) (Ping timeout: 252 seconds)
[18:51:45] *** Joins: gggp__ (~gggp@60.10.23.170)
[18:51:47] *** Quits: deadmarshal (~deadmarsh@95.38.118.190) (Ping timeout: 245 seconds)
[18:54:14] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[18:55:01] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 265 seconds)
[18:55:34] *** dimbag_ is now known as dimbag
[18:55:54] *** Joins: gggp (~gggp@111.63.14.121)
[18:56:06] <LeoNerd> Righty. Back from PSC meeting. What I miss?
[18:56:31] * GumbyPAN CPAN Upload: DBD-SQLite-1.69_02 by ISHIGAKI https://metacpan.org/release/ISHIGAKI/DBD-SQLite-1.69_02
[18:58:21] *** Quits: gggp__ (~gggp@60.10.23.170) (Ping timeout: 258 seconds)
[19:01:13] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[19:10:23] *** Quits: dimbag (~dimbag@pppoe246h2.ppp.kmv.ru) (Read error: Connection reset by peer)
[19:11:16] *** Joins: dimbag (~dimbag@pppoe246h2.ppp.kmv.ru)
[19:11:24] *** Joins: gggp_ (~gggp@123.113.177.154)
[19:12:41] *** Joins: Guest9 (~Guest9@43.241.144.27)
[19:12:43] <genio> LeoNerd: nothing much. we all agreed to elect genio ruler of the world
[19:13:07] <LeoNerd> Fair enough
[19:14:14] *** Quits: subie (~subie@2601:4c0:4080:bc0:7508:7c48:2327:9818) (Ping timeout: 272 seconds)
[19:14:20] *** Quits: dimbag (~dimbag@pppoe246h2.ppp.kmv.ru) (Read error: Connection reset by peer)
[19:14:39] <ology> Too much responsibility.
[19:14:44] <LeoNerd> You'd probably do a lot better than the current bunch ;)
[19:14:51] *** Joins: dimbag (~dimbag@pppoe246h2.ppp.kmv.ru)
[19:14:52] *** Quits: gggp (~gggp@111.63.14.121) (Ping timeout: 272 seconds)
[19:16:22] *** Quits: v` (~v@user/ctrl) (Ping timeout: 258 seconds)
[19:18:09] *** Joins: subie (~subie@2601:4c0:4080:bc0:7508:7c48:2327:9818)
[19:21:37] *** Joins: berndj (~berndj@ns1.linksynergy.co.za)
[19:24:39] *** Joins: zacts (~zacts@user/zacts)
[19:24:50] *** Quits: gryphn (~gryphon@102.129.145.153) (Quit: kthxbye)
[19:25:38] *** Quits: habamax (~habamax@user/habamax) (Ping timeout: 272 seconds)
[19:29:07] *** Joins: gggp__ (~gggp@60.10.23.170)
[19:32:54] *** Quits: gggp_ (~gggp@123.113.177.154) (Ping timeout: 276 seconds)
[19:36:04] <leitz> When refactoring a long foreach that uses nested hash data, is it better to maintain the full nesting in the code or set short variables up top?
[19:37:07] <LeoNerd> vague question is vague
[19:37:07] <leitz> Up top means you only change it in one place, interspersed means you stay close to the data and the source can be found easier.
[19:37:21] <ology> example?
[19:37:40] <shlomif> leitz: the latter option is better, IMhO
[19:38:18] *** Quits: Guest9 (~Guest9@43.241.144.27) (Ping timeout: 240 seconds)
[19:39:10] <leitz> For example, up top:   my $thingy = $this_hash{$that_key}{thingy};    I have about a dozen keys in $this_hash{$that_$key}.
[19:39:50] <Grinnz> i would say combined: use a short alias for parts you reference multiple times, but make the alias only where you need it
[19:41:20] <leitz> Grinnz, makes sense. 
[19:42:26] <leitz> shlomif, the more I think about it, the more I agree with you. Like Grinnz said, some things don't need to be, but the foreach is a couple hundred lines at the moment. Better to set things early, and in one place.
[19:43:09] *** Joins: thrig (~thrig@65.113.153.50)
[19:46:58] *** Joins: Guest9 (~Guest9@43.241.144.27)
[19:52:16] *** gggp__ is now known as gggp
[19:52:34] <haarg> the main reason Impoer::Into uses a #line directive is not to improve error messages, but because some things check the caller file name in their import method.
[19:52:47] <haarg> *Import::Into
[19:53:41] <haarg> specifically, autodie does that. if Import::Into didn't make the file name match, it couldn't be used with autodie.
[19:54:47] *** sjn_ is now known as sjn
[19:55:59] *** Joins: gryphn (~gryphon@191.96.106.193)
[19:57:23] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[20:06:51] <mjgardner> Argh, just got phishing spam via RT. How can I delete the ticket?
[20:07:12] <huf> just close it as wontfix?
[20:07:21] *** Quits: dimbag (~dimbag@pppoe246h2.ppp.kmv.ru) (Quit: Leaving)
[20:07:36] <mjgardner> Oh wait, just found a "spam" button, helpfully labeled with a single "S". That's clear.
[20:07:54] <huf> the Spam rune
[20:08:09] <thrig> also used by the SS
[20:08:21] <huf> Supporting Systems?
[20:08:35] <huf> we had a "project" called SS at work for a while
[20:08:45] <huf> i tried telling them to pick any other name but no
[20:09:01] <huf> even ÃŸ would've been better...
[20:09:42] <thrig> something godwin-ier
[20:11:39] * GumbyPAN CPAN Upload: Neo4j-Driver-0.26 by AJNN https://metacpan.org/release/AJNN/Neo4j-Driver-0.26
[20:12:01] <mjgardner> Can't believe spammers are targeting ticket queues. They also were sending stuff via Google Cloud invites.
[20:12:20] <mjgardner> Everything is just an open relay to them.
[20:12:34] <thrig> spammers spamming? those bastards!
[20:12:43] <huf> yeah, what a twist
[20:12:53] <mjgardner> Yah, but it's weird they're using such exotic means.
[20:12:57] <thrig> no?
[20:12:59] <LeoNerd> ${verb}ers gonna ${verb} 
[20:13:00] <huf> not like in the good old days of 2019 when we had no spam ever 
[20:13:01] <huf> at all
[20:13:25] <Grinnz> mjgardner: RT accepts arbitrary emails so it gets lots of spam that most people don't even see
[20:13:46] <Grinnz> ether is our resident reaper
[20:17:07] *** Joins: gggp_ (~gggp@60.10.23.170)
[20:20:30] *** Quits: gggp (~gggp@60.10.23.170) (Ping timeout: 256 seconds)
[20:21:09] *** Quits: ufobat (~martin@dynamic-095-117-077-129.95.117.pool.telefonica.de) (Ping timeout: 258 seconds)
[20:27:11] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca)
[20:28:22] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:28:47] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[20:31:46] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[20:32:01] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[20:32:02] <Yaakov> I really hate when they spam me by making new entries in my medical records.
[20:32:12] *** Joins: akaWolf (~akaWolf@akawolf.org)
[20:34:18] <huf> maybe the reason we all hate spam is because of the name
[20:34:23] <huf> perhaps it's time to do a canola
[20:34:38] <thrig> spam is loved in hawaii
[20:35:18] <huf> well, they have to compensate for all the beaches and mountains and great weather somehow...
[20:36:12] <Yaakov> How about a reverse canola, "rapemail".
[20:36:24] <huf> uh... we'll get back to you on that
[20:37:28] <BinGOs> I give you: https://metacpan.org/dist/perl/view/Porting/epigraphs.pod#v5.19.6-Monty-Python's-Flying-Circus,-%22Spam%22
[20:37:29] <Paperbot> Link title(s): [ perlepigraphs - list of Perl release epigraphs - metacpan.org ]
[20:39:34] *** Joins: semeion (~semeion@user/semeion)
[20:47:04] <ehuelsmann[m]> I'm reading the perldoc on `eval` and `$@` restoration. it says that Perl 5.14+ first restore locals and *then* die() from the block binding locals. From testing, it seems that that even works when the `die` statement is in a sub{} being called.
[20:47:09] <ehuelsmann[m]> Is that correctly assessed?
[20:48:30] <ether> avoid checking $@ directly and you won't ever have to care
[20:51:33] <LeoNerd> Use that new try/catch syntax that some helpful person wrote ;)
[20:52:17] <perlbot> ehuelsmann pasted a new file at https://l.perl.bot/p/oeemmb - version2 or version1?
[20:52:21] <gordonfish-> LeoNerd++
[20:52:30] *** gordonfish- is now known as gordonfish
[20:53:08] <ehuelsmann[m]> LeoNerd: I am, it's just that I'm requiring a class for which the name is coming from a config file.
[20:53:30] <Grinnz> ehuelsmann[m]: use Module::Runtime if possible
[20:53:31] <ehuelsmann[m]> ether: "workflow_error" throws an error.
[20:54:24] <ehuelsmann[m]> I was trying to understand if the second version (which has a much longer `local` scope), would do what the documentation promises on Perl 5.14+
[20:54:31] <Grinnz> ehuelsmann[m]: otherwise, the first one there
[20:54:59] <Grinnz> ehuelsmann[m]: no, it will unset $@ when anything dies from that scope
[20:55:05] *** Joins: gggp__ (~gggp@60.10.23.170)
[20:55:23] <ehuelsmann[m]> ok. that's what I was trying to understand indeed.
[20:55:29] *** Joins: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617)
[20:56:10] <Grinnz> i'm assuming workflow_error throws an exception
[20:56:46] <Grinnz> anyway, use Module::Runtime::require_module, and wrap *that* in a try/catch if you need to handle the error specially
[20:57:26] <Grinnz> anytime you think you need string eval, it's likely that either 1. block eval/trycatch would work fine, or 2. you want Module::Runtime
[20:58:28] *** Quits: gggp_ (~gggp@60.10.23.170) (Ping timeout: 256 seconds)
[20:59:33] <ehuelsmann[m]> yea. I'll advocate using Module::Runtime with the module owner.
[20:59:54] <ehuelsmann[m]> I was using this case to understand this sentence from the eval perldoc: Before Perl 5.14, the assignment to $@ occurred before restoration of localized variables, which means that for your code to run on older versions, a temporary is required
[21:00:18] *** Joins: mattil (~mattilinn@87-92-0-72.bb.dnainternet.fi)
[21:00:20] <mst> Grinnz: honestly, I've increasingly got into the habit of doing "require join('/', split '::, $mod).'.pm';"
[21:00:44] *** Joins: thunder (~thunder@user/thunder)
[21:00:47] <Grinnz> i prefer it die when not a valid module name first
[21:00:52] <LeoNerd> require +( "$module.pm" =~ s{::}{/}gr );  is my usual solution
[21:01:10] <mst> Grinnz: that is ... not a bug I tend to have
[21:01:13] *** Quits: mattil (~mattilinn@87-92-0-72.bb.dnainternet.fi) (Remote host closed the connection)
[21:01:15] <ehuelsmann[m]> there's a code example there, which I've somewhat reproduced in "version1".
[21:01:19] <LeoNerd> But then I rarely care about pre-5.14 these days :)
[21:01:36] *** Joins: mattil (~mattilinn@87-92-0-72.bb.dnainternet.fi)
[21:01:40] <thrig> 2011 called
[21:01:57] <ehuelsmann[m]> LeoNerd: this code was originally pre-5.14 ; I don't need to maintain the pre-5.14 situation anymore.
[21:03:34] <ehuelsmann[m]> but then the question is: does 5.14+ set $@ when I die() from inside a function call from a block which localizes $@?
[21:03:50] * ehuelsmann[m] assumes localizing $@ is still required on 5.14+
[21:04:30] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[21:04:40] *** Joins: thrig (~thrig@65.113.153.50)
[21:04:49] *** Joins: furrymcgee (~devuan@31.179.186.66)
[21:12:05] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[21:12:43] <Grinnz> ehuelsmann[m]: it does, the localization unsets it, because that's how localization works
[21:13:01] <Grinnz> that is Not a Bug :)
[21:13:07] <Grinnz> https://metacpan.org/pod/Try::Tiny#Localizing-$@-silently-masks-errors
[21:13:08] <Paperbot> Link title(s): [ Try::Tiny - Minimal try/catch with proper preservation of $@ - metacpan.org ]
[21:14:03] <ehuelsmann[m]> jjjjjjdygbgyjjyykntjtkknbnbnuegbcubpid.p.knk
[21:14:05] <ehuelsmann[m]> jjjjjjdygbgyttdeggeppcbgntijdkdnipdiiuc.digk
[21:14:05] *** Joins: gggp_ (~gggp@60.10.23.170)
[21:14:15] <Grinnz> oops
[21:14:32] <ehuelsmann[m]> Sorry.
[21:16:29] <ehuelsmann[m]> Grinnz: i expect that, which is why I don't understand what that snippet of perldoc is trying to tell me.
[21:17:10] *** Quits: gggp__ (~gggp@60.10.23.170) (Ping timeout: 256 seconds)
[21:17:24] <Grinnz> the block just above it talks about why you want to localize $@. so that is a necessary addendum why you can't just throw 'local $@' into the scope and call it good
[21:19:23] <ehuelsmann[m]> Ok. But to me it suggests that on pre-5.14 indeed the additional block whereas i would not on 5.14+ which sounds different from what you are telling me.
[21:19:46] <ehuelsmann[m]> Indeed -> i need
[21:19:49] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:20:21] <ehuelsmann[m]>  Anyway, I'll just advocate using module runtime
[21:20:27] <Grinnz> 5.14 does not affect that
[21:20:37] <Grinnz> the part fixed in 5.14 is the next one
[21:20:48] <Grinnz> (but that's not the only way to get a false exception)
[21:21:46] * GumbyPAN CPAN Upload: Getopt-EX-Hashed-0.9904 by UTASHIRO https://metacpan.org/release/UTASHIRO/Getopt-EX-Hashed-0.9904
[21:27:07] <ehuelsmann[m]> I eliminated all the trickery involved with eval-as-try by rewriting all other tries to syntax::keyword::try. Thanks for the explanation
[21:27:22] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 240 seconds)
[21:27:36] <LeoNerd> :)
[21:27:54] <LeoNerd> ehuelsmann[m]: Make sure to take a look at Feature::Compat::Try instead, so your code will update nicely for 5.34+
[21:31:05] *** Quits: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617) (Quit: Leaving)
[21:33:06] <ehuelsmann[m]> LeoNerd: i did that for LedgerSMB (convert it to Feature::Compat::Try); the Workflow module is maintained mostly by JONASBN; I'm helping out cleaning the code. 
[21:33:36] <ehuelsmann[m]> It used to be 5.6 compatible
[21:34:40] <ehuelsmann[m]> For extra and changed deps, i consult with Jonas first
[21:35:21] <ehuelsmann[m]> Btw, is there any news on defer vs finally?
[21:35:49] <LeoNerd> news?
[21:36:23] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[21:36:48] * GumbyPAN CPAN Upload: Graphite-Simple-0.03 by CDN https://metacpan.org/release/CDN/Graphite-Simple-0.03
[21:37:11] <ehuelsmann[m]> Yes. SKT pod says finally wasn't adopted but defer might
[21:37:32] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[21:37:37] <LeoNerd> Mm?
[21:37:48] <mst> ehuelsmann[m]: you mean https://metacpan.org/pod/Syntax::Keyword::Defer ?
[21:37:48] <Paperbot> Link title(s): [ Syntax::Keyword::Defer - add defer block syntax to perl - metacpan.org ]
[21:38:12] <mst> and https://metacpan.org/pod/Syntax::Keyword::Finally
[21:38:13] <Paperbot> Link title(s): [ Syntax::Keyword::Finally - add FINALLY phaser block syntax to perl - metacpan.org ]
[21:38:32] <mst> oh, except of course the former is the new name for the latter
[21:38:34] <mst> but still
[21:39:59] <mst> ehuelsmann[m]: oh, yeah, Workflow.pm is neat, it's ... showing its age a bit, but still impressively capable
[21:40:28] <mst> though: lolsob: https://metacpan.org/pod/Workflow#INCOMPATIBILITIES
[21:40:29] <Paperbot> Link title(s): [ Workflow - Simple, flexible system to implement workflows - metacpan.org ]
[21:40:47] <xenu> ehuelsmann[m]: there's a defer RFC if that's what you're asking about
[21:40:49] <xenu> https://github.com/Perl/RFCs/blob/master/rfcs/rfc0004.md
[21:40:49] <Paperbot> Link title(s): [ RFCs/rfc0004.md at master Â· Perl/RFCs Â· GitHub ]
[21:40:53] *** Quits: DaTa (~DaTa@user/data) (Ping timeout: 258 seconds)
[21:41:11] <ehuelsmann[m]> LeoNerd: I was referring to "Note that the finally syntax is not available when using this module via Feature::Compat::Try, as it is not expected that syntax will be added to the core perl 'try' feature. This is because a more general-purpose ability may be added instead, under the name 'defer'."
[21:41:30] <LeoNerd> Oh.. that was just some random thinking at the time. We'll see how it pans out
[21:41:34] <Grinnz> ah yes, that's still pending
[21:41:34] <mst> ehuelsmann[m]: right, and it's on cpan, which I linked, and xenu linked the RFC for core
[21:41:45] <mst> ehuelsmann[m]: not sure what we haven't already covered now? :D
[21:42:36] <mst> ehuelsmann[m]: also, btw, if F::C::T is a bit much, Try::Tiny is still not at all terrible
[21:44:18] <Grinnz> it's just slow and introduces its own paradigms
[21:44:55] <Grinnz> but functionally great, if you remember how to use it (which lots of people did for a while since it was the best option until SKT)
[21:45:35] *** Joins: gggp__ (~gggp@111.63.14.121)
[21:48:54] *** Quits: gggp_ (~gggp@60.10.23.170) (Ping timeout: 256 seconds)
[22:00:08] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Ping timeout: 265 seconds)
[22:01:56] <gordonfish> https://metacpan.org/pod/Feature::Compat::Try#try "Even though it parses as a statement and not an expression, a try block can still yield a value if it appears as the final statement in its containing sub or do block." <-- Yes!
[22:01:56] <Paperbot> Link title(s): [ Feature::Compat::Try - make try/catch syntax available - metacpan.org ]
[22:02:06] *** gggp__ is now known as gggp
[22:02:31] *** Quits: GEttR_ (~GEttR@user/gettr) (Remote host closed the connection)
[22:02:51] *** Joins: GEttR_ (~GEttR@user/gettr)
[22:04:40] <gordonfish> "if it appears as the final statement in its containing sub or do block." <-- I assume this will also apply to the final statement of a file that is use'ed or require'ed (which should normally be: 1;) by another?
[22:05:07] <Grinnz> yes, but it's not a good idea to use that functionality since you'll only get the value the first time require is called in that process
[22:05:27] <Grinnz> also, lol
[22:05:33] <gordonfish> Right
[22:07:09] <gordonfish> Just saying that the bit of documentation could could be tweaked to better reflect that any enclosing block or file scope would yield a value as a final statement.
[22:10:05] <Grinnz> well, blocks and file scopes don't in themselves yield a value
[22:10:06] <gordonfish> E.g.: a try block can still yield a value if it appears as the final statement in a containing block or file scope, such as a sub or do block.
[22:10:24] <Grinnz> only sub calls, do blocks, and do FILE
[22:10:35] <gordonfish> Right
[22:12:56] <gordonfish> I'm probably not thinking as straight as I should about that with all the humidity and heat I've absorbed, even after taking a quick dip into the pool. Smoke layer from wild fires hasn't helped either.
[22:13:06] <ehuelsmann[m]> mst: Workflow is on its way to 2.0; we're revisiting the code base and documentation. One of the desires is to replace XML::Simple; another is to add different formats, e.g. YAML.
[22:14:23] <mst> ehuelsmann[m]: Config::Any would be a cheap win for that
[22:14:33] <mst> it's far from perfect but it'll get you a bunch of extra formats for cheap
[22:14:43] <gordonfish> Isn't XML::Simple discouraged in general?
[22:14:46] <mst> gordonfish: yes
[22:14:51] <gordonfish> Thought so
[22:15:09] <mst> https://metacpan.org/pod/XML::Simple#STATUS-OF-THIS-MODULE
[22:15:09] <Paperbot> Link title(s): [ XML::Simple - An API for simple XML files - metacpan.org ]
[22:15:24] <ehuelsmann[m]> gordonfish: imagine how old this code base really is.
[22:15:33] <mst> added at the request of f#perl because we were SO TIRED of it
[22:16:26] <gordonfish> Heh, when the module's own docs say it's discouraged..
[22:17:13] <Grinnz> gordonfish: and yet, we still have to point it out to people who insist it isn't, all the time...
[22:17:30] <Grinnz> (but yeah better to have it to point to than not)
[22:17:44] <ehuelsmann[m]> mst: could you repeat which module you absolutely didn't want used for mocking?
[22:17:47] <gordonfish> Yep
[22:17:56] <mst> ehuelsmann[m]: Test::MockObject
[22:18:06] <mst> gordonfish: < mst> added at the request of f#perl because we were SO TIRED of it
[22:18:28] <gordonfish> yep
[22:18:32] * ehuelsmann[m] is reviewing code doing the mock dance
[22:18:32] <ehuelsmann[m]> whew.
[22:18:37] <ehuelsmann[m]> ok. this one uses Mock::MonkeyPatch.
[22:18:41] <ehuelsmann[m]> thanks for the confirmation.
[22:19:22] *** Quits: gggp (~gggp@111.63.14.121) (Ping timeout: 240 seconds)
[22:19:56] <mst> ehuelsmann[m]: right, that's the jberger one that's half way betwen Test2::Tools::Mock and Test::ExpectAndCheck
[22:25:01] <mst> in fact at this point, I could probably write a mocking mstpan that'd show 'local *', Sub::Override, Test2::Tools::Mock, Mock::MonkeyPatch and Test::ExpectAndCheck as its recommendations
[22:28:34] <mjgardner> Ugh, we use Test::MockObject in a couple dozen places.
[22:29:51] <mst> mjgardner: I did at least get it to stop monkeypatching UNIVERSAL by default
[22:30:21] <mst> "out stubborning chromatic *once*" was an achievement I'm still quite pleased by ;)
[22:33:54] *** Quits: subie (~subie@2601:4c0:4080:bc0:7508:7c48:2327:9818) (Ping timeout: 240 seconds)
[22:36:50] <leitz> Apologies if this is a dumb question, my brain is fried. I have an XML document that normally gets slurped into XML::LibXML->load_xml(IO => $my_file). The process is "open, binmode, slurp". The issue is that some of the XML "<" and ">" are things like "&lt;". I can change it, but am not sure how to take the file, fix it, and then give it to load_xml. 
[22:37:36] *** Joins: subie (~subie@2601:4c0:4080:bc0:7508:7c48:2327:9818)
[22:39:02] <mst> leitz: so basically your input doc is fucked up and you need to hit it with a hammer first
[22:39:13] <thrig> possibly with HTML::Entities
[22:39:30] <mst> leitz: first example in the synopsis here https://metacpan.org/pod/XML::LibXML#SYNOPSIS says ->load_xml(string => $string)
[22:39:31] <Paperbot> Link title(s): [ XML::LibXML - metacpan.org ]
[22:40:27] *** Joins: dimbag (~dimbag@pppoe246h2.ppp.kmv.ru)
[22:40:30] * leitz goes to read.
[22:40:37] <genio> Are all of your escapes invalid? are some of them actually supposed to be escaped? (just figuring out what kind of fucked up hammer you'll need)
[22:43:04] <Grinnz> the problem is &lt; is the valid way to specify a < character in XML without it starting a tag
[22:43:15] <Grinnz> so it's impossible to programmatically tell which it meant
[22:43:23] <Grinnz> much like if you have a mixed encoding text
[22:43:31] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[22:45:02] *** Joins: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[22:46:51] *** Quits: gloin (~gloin@user/gloin) (Remote host closed the connection)
[22:49:07] <leitz> Some of them are '&lt;', most are '<'. Is &lt; a valid XML tag bracket?
[22:49:50] <leitz> mst, thanks. I can slurp it into a string and fix it there. That's what I needed.
[22:50:55] <mst> leitz: right, I figured hitting the string with a hammer you could manage yourself :)
[22:51:15] <leitz> :)
[22:51:17] <Grinnz> leitz: no, &lt; is a <
[22:51:21] <Grinnz> it does not start a tag
[22:51:25] <Grinnz> it's just text
[22:51:42] <mst> Grinnz: I'm assuming that this input file was generated by a tool
[22:51:50] <mst> and I don't mean that in the programmatic sense
[22:51:55] <leitz> Grinnz, that's the issue; they are using &lt; where they are opening and closing XML tags.
[22:51:55] * GumbyPAN CPAN Upload: App-ElasticSearch-Utilities-7.9 by BLHOTSKY https://metacpan.org/release/BLHOTSKY/App-ElasticSearch-Utilities-7.9
[22:51:58] <Grinnz> possibly a tool using a tool :)
[22:52:17] <Grinnz> leitz: right, that sounds broken
[22:52:24] <Grinnz> you'll have to manually fix it sorry
[22:52:25] <leitz> There's actually no "&lt;" in the content.
[22:52:36] <thrig> "what's your workflow automation look like?" "oh we drag uploads with winsock ftp"
[22:53:07] <mst> leitz: so basically some random percentage of the < and > characters have been turned into &lt; and &gt; but there are no *legit* uses of &lt; and &gt; ?
[22:53:16] <leitz> No worries. While my Perl skills are pretty basic, it can do the vast majoring of the things I need doing.
[22:53:27] <leitz> mst, correct.
[22:53:45] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[22:53:49] <mst> leitz: then thrig is like correct that hitting it with https://metacpan.org/pod/HTML::Entities should do the trick
[22:53:50] <Paperbot> Link title(s): [ HTML::Entities - Encode or decode strings with HTML entities - metacpan.org ]
[22:53:55] <Grinnz> keep in mind, if you do a search and replace of those tags, and the data in the future actually does include < or > characters, you can't do a search and replace then because you'll break the data
[22:54:07] <thrig> more so "horrible kluge" than "trick"
[22:54:19] <Grinnz> i would not use HTML::Entities, that will decode other entities too
[22:54:26] <Grinnz> which must remain encoded for XML::LibXML to parse
[22:54:48] <leitz> I also sent a note to the data generation team. I was a polite note.
[22:54:55] <mst> well, ok, s/&lt;/</g, s/&gt;/>/g for $string; # fuck you
[22:55:09] <mst> leitz: ah, yes, I've heard of those
[22:55:34] <Grinnz> yeah getting them to actually send you the correct data is the appropriate fix
[22:56:16] <mst> right, but getting it inhaled via the s/// massive hack I just provided to check everything else while you wait isn't that unreasonable
[22:56:23] <mst> heh
[22:57:12] <mst> XML::LibXML->load_xml(string => do { local (@ARGV, $/) = $filename; <> =~ s/&lt;/</gr =~ s/&gt;/>/gr }); # blame mst
[22:59:11] <thrig> echo '&lt;&gt;&amp;' | perl -MHTML::Entities -nE '_decode_entities($_, { lt => "<", gt => ">" });say'
[23:00:01] *** Quits: dimbag (~dimbag@pppoe246h2.ppp.kmv.ru) (Read error: Connection reset by peer)
[23:00:16] <Grinnz> heh, a default exported function starting with an underscore
[23:00:19] <Grinnz> early CPAN was a trip
[23:00:35] *** Joins: dimbag (~dimbag@pppoe246h2.ppp.kmv.ru)
[23:00:50] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:00:56] <mst> Grinnz: "brown acid" level trip yeah
[23:01:56] * GumbyPAN CPAN Upload: Alien-GSL-1.06_01 by PLICEASE https://metacpan.org/release/PLICEASE/Alien-GSL-1.06_01
[23:04:35] *** Quits: johnjay (~pi@38.120.10.99) (Quit: WeeChat 2.3)
[23:05:39] *** Joins: johnjay (~pi@38.120.10.99)
[23:09:25] <leitz> No surprise, the XML has  ^M characters at the end of some lines...
[23:10:39] <mst> leitz: right, this is definitely a DOS file
[23:10:43] <mst> leitz: Denial Of Sanity
[23:10:56] <mst> or, if it were me dealing with it, Denial Of Sobriety
[23:11:03] *** Joins: Trigon (~Thunderbi@73.127.1.41)
[23:13:01] *** Quits: mattil (~mattilinn@87-92-0-72.bb.dnainternet.fi) (Quit: Leaving)
[23:13:16] <mst> leitz: actually, if you're only doing this until you can make them fix their shit, you could just process the file with a one-liner
[23:13:38] <mst> perl -pi -e 's/&lt;/</g, s/&gt;/>/g, s/\r\n/\n/' fuck-you.xml
[23:13:39] <mjgardner> Bare ^Ms are from classic Macintoshes. ^M^J is DOS/Windows. ^J is Unix, Linux, Mac OS X/macOS.
[23:14:07] <mst> mjgardner: in general a unixer is seeing "^M at the end of a line" as meaning windows line endings
[23:14:18] <mst> mjgardner: i.e. "at the end, immediately before the newline char"
[23:14:32] <mjgardner> OK, just being pedantic.
[23:15:05] <mst> mjgardner: if leitz had said 'as the line ending' instead of 'at the end of some lines' your pedantry would've been accurate. but he didn't, so it wasn't.
[23:15:13] * mst META PEDANTRY
[23:16:11] <mst> leitz: gotta admit I'm increasingly reconsidering whether your note being *polite* was actually a proportionate response :D
[23:16:58] * GumbyPAN CPAN Upload: PDL-Graphics-PLplot-0.77 by ETJ https://metacpan.org/release/ETJ/PDL-Graphics-PLplot-0.77
[23:17:58] <leitz> mst, I'm going with hope on this one...
[23:19:19] <xenu> the only correct newline is obviously this:
[23:19:21] <xenu> perlbot: utf8  U+2028
[23:19:21] <perlbot> xenu: U+2028 (e2 80 a8): LINE SEPARATOR [â€¨] 
[23:19:24] <mjgardner> There's a fine line between cluelessness and passive aggressiveness.
[23:21:21] *** Joins: dimbag_ (~dimbag@pppoe-77-75-15-109.ppp.kmv.ru)
[23:21:52] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 272 seconds)
[23:22:28] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[23:22:58] *** Quits: dimbag (~dimbag@pppoe246h2.ppp.kmv.ru) (Ping timeout: 256 seconds)
[23:24:57] *** Quits: Guest9 (~Guest9@43.241.144.27) (Quit: Connection closed)
[23:25:07] <mst> mjgardner: of course, that's why I'm careful never to be *passively* aggressive :D
[23:26:31] <mjgardner> I expect nothing less.
[23:27:21] *** Quits: furrymcgee (~devuan@31.179.186.66) (Quit: leaving)
[23:27:37] *** Quits: riceandbeans (~zach@user/riceandbeans) (Quit: rebooting)
[23:30:22] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:35:34] *** dimbag_ is now known as dimbag
[23:37:05] *** Joins: riceandbeans (~zach@user/riceandbeans)
[23:39:42] <leitz> Well, drat. Getting parser errors now. 
[23:42:24] *** Quits: adherzog (uid387168@id-387168.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[23:42:47] <MikeGeorge[m]> Quick question to all you libera.chat users, you (and this room) are on IRC, not Matrix, correct?
[23:43:25] <choroba> Not sure about others, but I'm on IRC.
[23:43:45] * leitz goes off to figure out if he should take the red pill or the blue pill before diving back into the XML.
[23:44:06] <Grinnz> not sure how it shows up on matrix, but anyone without [m] is connected via irc
[23:44:43] <choroba> leitz: Just stay away of XML::Simple
[23:45:02] <MikeGeorge[m]> Libera makes it pretty seamless, which is why I asked.  There are no indicators on my side.  The [m] is presumably added on the IRC side.
[23:45:26] <mst> MikeGeorge[m]: at a quick count I see 4 or 5 matrix connections out of 412 people joined
[23:47:11] *** Joins: eramirez (~eramirez@2001:4453:3d9:fe00:8d8d:e7a5:996:6f78)
[23:47:17] <Juerd> Grinnz: Not every bridge uses that nasty [m] spam
[23:47:33] <Grinnz> seems fine at the end of the name, avoids nick clashes
[23:47:42] *** Quits: eramirez (~eramirez@2001:4453:3d9:fe00:8d8d:e7a5:996:6f78) (Remote host closed the connection)
[23:47:44] <Juerd> I'm glad you don't mind :)
[23:47:57] <Grinnz> mostly i don't see a good alternative :P
[23:48:04] <Grinnz> and i've seen lots of bad alternatives
[23:48:05] <Juerd> I however do. I think it's pure insanity to add spam for the irc client to nicknames. Sure, it prevents clashes, except of course if someone else uses the same client.
[23:48:20] <Juerd> The good alternative is to just use nicknames, like everyone else.
[23:48:27] <Juerd> There are bridges that don't use the suffix and that works fine.
[23:48:50] *** Joins: magla (~gelignite@55d46dd2.access.ecotel.net)
[23:49:03] <Grinnz> that means you have to resolve the nick clash across two protocols, which isn't fun
[23:49:09] <Juerd> I use weechat and irssi but you don't see me adding [w] and [i]. It's no use.
[23:49:16] <mst> Juerd: the -primary- matrix.org bridge works that way
[23:49:20] <Juerd> Grinnz: That happens *regardless* of whether you're adding any suffixes.
[23:49:25] <Juerd> mst: Yep
[23:49:27] <MikeGeorge[m]> What happens when someone with a Matrix account @Juerd:matrix.org tries to connect to this room?
[23:49:29] <Grinnz> Juerd: yes but you're one person capable of managing your own nicknames
[23:49:32] <Grinnz> the matrix bridge is not a person
[23:49:44] <mst> and the matrix bridge has enough trouble managing its own nicknames
[23:49:48] *** Juerd is now known as Juerd[m]
[23:49:50] <Juerd[m]> Now what?
[23:49:56] <Grinnz> Juerd: the chance of that happening unintentionally is 0.00000001%
[23:50:14] <mst> Juerd[m]: now nothing is measurably more broken that it already was, because oh gods the matrix bridge
[23:50:21] <Juerd[m]> Grinnz: It needs to be dealt with, intentional or not.
[23:50:23] <mst> like I agree with you in theory, but not in practice ;)
[23:50:27] <Grinnz> yes, you ahve to *account* for it always, but with the suffix you don't have to care so much whether the solution is userfriendly
[23:50:33] <Grinnz> because the clash just doesn't happen
[23:50:54] <Juerd[m]> Why would the clash not happen?!
[23:51:00] <MikeGeorge[m]> With the suffix, you can have an unsavory but functional resolution.
[23:51:01] <Juerd[m]> Someone else, on matrix, can have the same nickname.
[23:51:07] <Grinnz> yes. it doesn't happen
[23:51:17] <Grinnz> people don't decide to use nicks ending in [m]
[23:51:29] <pragma-> I would assume it tries an alternative nick to suffix with [m]. 
[23:51:30] <mst> Juerd[m]: I get your argument. but frankly matrix colliding with itself is a much bigger problem.
[23:51:32] <Grinnz> we've been on this irc channel for a decade and nobody's ever done it
[23:51:35] <pragma-> If there's a clash.
[23:51:39] <mst> pragma-: I would expect it to HCF tbh
[23:51:42] <Juerd[m]> Why would someone else on matrix not have the same nickname, while if that person used irc, it would be problematic enough to spam the rest of irc with [m]'s to prevent that?
[23:51:55] <Grinnz> wat?
[23:52:04] <Juerd[m]> mst: Except that there really are bridges that don't use this, and it does not cause problems.
[23:52:17] <Juerd[m]> Grinnz: Nicknames are per network, not per channel.
[23:52:25] <Grinnz> why would i care how matrix internally resolves nick clashes?
[23:52:31] <Grinnz> we're talking about the irc bridge
[23:52:34] <mst> Juerd[m]: and this is relevant how?
[23:52:45] <Juerd[m]> The [m] doesn't prevent anything, it just adds visual spam.
[23:52:52] <Juerd[m]> It does not prevent *anything*, at all.
[23:52:52] <ehuelsmann[m]> Juerd[m]: then it's time to switch to XMPP. it has per-channel nicks.
[23:52:53] <mst> Juerd[m]: "bridges that aren't made entirely out of clown shoes and jank perform better", sure, yes, I fucking know
[23:52:54] <Grinnz> it does...
[23:52:58] <MikeGeorge[m]> Honestly, I find the suffixes to be helpful in a bridged situation.
[23:53:12] <Juerd[m]> ehuelsmann[m]: I don't want per-channel nicks though :)
[23:53:20] <xenu> ehuelsmann[m]: i'm sure all three remaining xmpp users will be happy to meet someone new
[23:53:59] <ehuelsmann[m]> xenu: actually, XMPP experience gets pretty close to Matrix these days.
[23:54:00] <Juerd[m]> MikeGeorge[m]: I wouldn't mind if people added these prefixes themselves if indeed they used multiple clients simultaneously. I object to them being added automatically.
[23:54:39] <mst> Juerd[m]: I'm pretty sure the [m] thing was added because back when the bridge was in its early days its collision handling so so spectacularly flaky it was an effective hack to stop the bridge spamming the shit out of the ircds and then falling over
[23:54:59] <MikeGeorge[m]> Juerd[m]: It doesn't prevent anything, at all, if you ignore everything useful it does and instead try to reduce the experience to an "if it doesn't fix everything then it fixes nothing" argument.
[23:55:02] <Juerd[m]> mst: Even if that's true, the nick clash handling is fine now, and it's no longer needed.
[23:55:13] <Juerd[m]> mst: But I'm really not convinced it was added for any other reason than to spam.
[23:55:23] <Grinnz> well that's your opinion, and it's wrong
[23:55:26] <mst> Juerd[m]: and you know it's fine now based on what information?
[23:55:32] <Juerd[m]> MikeGeorge[m]: I'm not saying it doesn't fix everything, I'm saying it fixes nothing.
[23:55:43] *** xenu is now known as xenu[libera]
[23:55:51] <MikeGeorge[m]> And I'm saying you're completely wrong.
[23:55:52] <Juerd[m]> mst: I have lots of friends that use matrix on a daily basis, that I see and talk to on an almost daily basis :)
[23:56:04] <Juerd[m]> mst: Some of them developers of matrix clients.
[23:56:10] <xenu[libera]> actually [i] would make more sense
[23:56:13] *** xenu[libera] is now known as xenu[i]
[23:56:35] <Juerd[m]> mst: I'm assuming they know what the hell they're talking about :)
[23:56:46] <Juerd[m]> mst: Which, unfortunately, means I'm also assuming that some people here don't :D
[23:56:48] <ehuelsmann[m]> Juerd[m]: any of them developers of *the* matrix irc bridge?
[23:56:56] <mst> Juerd[m]: that's a mistake
[23:57:04] <Juerd[m]> ehuelsmann[m]: No, but at least one of them does run a bridge with plenty of users
[23:57:11] <Juerd[m]> ehuelsmann[m]: A bridge that doesn't do the [m] thing.
[23:57:11] <ehuelsmann[m]> assumptions are the mother of all f*ckups.
[23:57:18] *** xenu[i] is now known as xenu
[23:57:21] <Grinnz> Juerd[m]: any that run a bridge with 10000 users?
[23:57:26] <Juerd[m]> Grinnz: Why would that matter?
[23:57:27] <ehuelsmann[m]> we're not talking of a bridge.
[23:57:32] <mst> Juerd[m]: the bridge is an independent nope.js app and I've spent months being one of the IRC side ops people for freenode's use of that bridge
[23:57:33] <Grinnz> scale always matters
[23:58:04] <mst> Juerd[m]: if any of your friends have 30k+ IRC connections on their bridge tell me which network so I can verify it and then we can talk :P
[23:58:06] <Juerd[m]> Grinnz: Nicknames can be in use regardless of how many users your client software has.
[23:58:26] <Grinnz> yes, and the scale is pretty fucking important to the method you choose to deal with that
[23:58:37] <Juerd[m]> mst: It's definitely not nearly as large, and I fail to see why scale would matter for adding [m]s to all nicknames.
[23:58:44] <ehuelsmann[m]> Juerd[m]: The answer remains "scale matters"
[23:59:04] <xenu> i just wanted to point out that it seems that everyone in the discussion is speculating and actually lack the knowledge about how it actually works
[23:59:09] <mst> Juerd[m]: right, so they don't have relevant experience, and you just keep assuming I don't know what I'm talking about in spite of the fact that I do
[23:59:12] <mst> Juerd[m]: great :D
[23:59:13] <mst> xenu: except me.
[23:59:30] <mst> nobody ever listen to Zathras
[23:59:36] *** Juerd[m] is now known as Juerd
[23:59:38] <Juerd> Grinnz: Care to explain why scale matters? A user picks a nickname, the nickname can be taken. How in that user story does it matter if the user of the used nickname is using either irssi or matrix?
[23:59:55] <Grinnz> it matters how often that happens
