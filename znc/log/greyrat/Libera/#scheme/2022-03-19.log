[00:05:38] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[00:05:44] *** Joins: seninha (~chatzilla@user/seninha)
[00:19:14] *** Joins: skapata (~Skapata@user/skapata)
[00:22:02] *** Joins: badkins (~badkins@136.56.92.199)
[00:26:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[00:27:44] *** Quits: irontom (~user@38.81.106.9) (Ping timeout: 250 seconds)
[00:31:13] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[00:32:09] *** Quits: klovett (~klovett@107.116.92.97) (Quit: Textual IRC Client: www.textualapp.com)
[00:37:27] *** Joins: bacteriummourner (~bacterium@89.45.224.200)
[00:40:18] *** Joins: badkins (~badkins@136.56.92.199)
[00:42:45] *** Joins: klovett (~klovett@107.116.92.97)
[00:44:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[00:45:27] *** Joins: badkins (~badkins@136.56.92.199)
[00:45:56] *** Quits: schulze (~schulze@dynamic-077-000-216-114.77.0.pool.telefonica.de) (Ping timeout: 250 seconds)
[00:49:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[00:50:37] *** Joins: badkins (~badkins@136.56.92.199)
[00:51:49] *** Joins: schulze (~schulze@dynamic-077-010-022-061.77.10.pool.telefonica.de)
[00:54:36] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[00:55:13] *** Parts: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) ()
[01:03:21] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[01:05:12] <mnieper> For a SRFI 204 successor, it makes sense to take a look at Racket's SRFI-204-like matcher. It is extensible so that only a few primitives have to be derived and all other pattern submatchers can be regarded derived syntax.
[01:05:56] <mnieper> The first "derived" should have been a "defined".
[01:06:36] <mnieper> I think this fits the Scheme philosophy quite well.
[01:08:44] *** Quits: rgherdt_ (~rgherdt@port-92-195-30-153.dynamic.as20676.net) (Remote host closed the connection)
[01:09:37] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[01:12:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:13:47] *** Quits: croc (quassel@2600:3c00::f03c:91ff:fe18:29d6) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:14:35] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:15:39] *** Joins: croc (~quassel@45.33.123.12)
[01:29:42] *** Quits: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[01:30:15] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[01:31:04] <sham1> The fewer the primitives, the "easier" things are for the implementor
[01:31:10] <sham1> Because the rest can be in a separate library
[01:31:14] <sham1> So yeah, I agree
[01:31:55] *** Joins: badkins (~badkins@136.56.92.199)
[01:33:10] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[01:36:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[01:38:26] *** Joins: badkins (~badkins@136.56.92.199)
[01:38:38] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[01:38:44] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[01:40:16] *** Joins: badkins (~badkins@136.56.92.199)
[01:49:01] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[01:53:51] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:165e:68ad:c281:975a) (Ping timeout: 256 seconds)
[02:01:37] *** Quits: badkins (~badkins@136.56.92.199) (Read error: Connection timed out)
[02:03:30] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[02:06:04] *** Joins: badkins (~badkins@136.56.92.199)
[02:11:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[02:11:30] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Ping timeout: 252 seconds)
[02:16:15] *** Joins: badkins (~badkins@136.56.92.199)
[02:29:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[02:37:09] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[02:40:26] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Client Quit)
[03:06:49] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[03:08:57] *** Joins: m455 (~m455@user/m455)
[03:10:13] <jcowan> the point of 204 was to be precisely the Wright-Cartwright-Shinn matcher, not some other matcher.  I believe the Right Thing, therefore, is to provide exactly what Chibi provides, with the exception of the non-portable stuff (record matching), which is only a convenience feature: generalized field matching with accessor procedures is sufficient.
[03:11:17] <Zipheir> That would be Shinn Thing, then, and not exactly the Wright Thing.
[03:11:47] <Zipheir> Sorry, lame joke.
[03:14:29] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[03:15:25] <jcowan> Indeed.
[03:15:29] *** Joins: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de)
[03:16:21] <jcowan> I did a comparison, and the tree matcher seems to be the only thing added to the Wright Thing.  Alex's documentation calls it "experimental", but I think it has been around long enough to be accepted.
[03:17:07] <jcowan> sham1: 204 is portable, so there is really nothing for the implementer to do except minimal packaging.
[03:23:40] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 250 seconds)
[03:27:30] *** Joins: amk (~amk@109.255.169.126)
[03:27:56] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[03:28:11] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: WeeChat 3.4)
[03:30:11] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[03:36:03] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[03:45:23] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Read error: Connection reset by peer)
[03:45:51] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[03:55:26] *** Joins: badkins (~badkins@136.56.92.199)
[03:59:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[04:17:01] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[04:21:43] *** Joins: m455 (~m455@user/m455)
[04:37:32] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 240 seconds)
[04:38:30] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[04:55:33] *** Joins: badkins (~badkins@136.56.92.199)
[04:59:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[05:06:19] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[05:07:00] *** Joins: irontom (~user@38.81.106.9)
[05:07:42] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Client Quit)
[05:10:54] *** Quits: irontom (~user@38.81.106.9) (Remote host closed the connection)
[05:11:12] *** Joins: badkins (~badkins@136.56.92.199)
[05:15:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[05:17:38] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 250 seconds)
[05:18:12] *** Quits: Psybur (~Psybur@mobile-166-171-56-243.mycingular.net) (Remote host closed the connection)
[05:22:01] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[05:28:40] *** Joins: badkins (~badkins@136.56.92.199)
[05:32:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[05:32:56] *** Joins: m455 (~m455@user/m455)
[05:33:01] *** Joins: seninha (~chatzilla@user/seninha)
[05:33:13] *** Joins: s-liao (~s-liao@101.86.164.158)
[05:34:00] *** Joins: irontom (~user@38.81.106.9)
[05:37:32] *** Quits: m455 (~m455@user/m455) (Client Quit)
[06:00:02] *** Quits: casmajavi (~casmajavi@user/casmajavi) (Ping timeout: 240 seconds)
[06:03:01] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:10:15] *** Joins: badkins (~badkins@136.56.92.199)
[06:11:40] *** Joins: drakonis1 (~drakonis@user/drakonis)
[06:12:56] *** Quits: drakonis1 (~drakonis@user/drakonis) (Client Quit)
[06:13:26] *** Quits: irontom (~user@38.81.106.9) (Remote host closed the connection)
[06:15:04] *** Quits: klovett (~klovett@107.116.92.97) (Quit: ZZZzzzâ€¦)
[06:16:34] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[06:17:21] *** Joins: irontom (~user@38.81.106.9)
[06:17:21] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[06:22:21] *** Joins: s-liao (~s-liao@101.86.164.158)
[06:24:02] *** Quits: schulze (~schulze@dynamic-077-010-022-061.77.10.pool.telefonica.de) (Ping timeout: 240 seconds)
[06:28:01] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[06:28:37] *** Joins: klovett (~klovett@107.116.92.97)
[06:29:25] *** Quits: irontom (~user@38.81.106.9) (Quit: ERC (IRC client for Emacs 27.2))
[06:34:25] *** Joins: irontom (~user@38.81.106.9)
[06:37:06] *** Joins: Everything (~Everythin@37.115.210.35)
[06:43:09] *** Quits: irontom (~user@38.81.106.9) (Quit: ERC (IRC client for Emacs 27.2))
[06:44:33] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[06:51:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[06:51:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:53:03] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[06:56:12] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:56:18] *** Joins: s-liao (~s-liao@101.86.164.158)
[07:01:02] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[07:10:21] *** Quits: cromyr`` (~user@1.128.107.34) (Remote host closed the connection)
[07:14:51] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[07:15:16] *** Joins: vats (~vats@103.216.143.232)
[07:19:25] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[07:31:35] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[07:34:12] *** alMalsamo is now known as lumberjack123
[07:34:25] *** Joins: aeth_ (~aeth@user/aeth)
[07:34:25] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[07:34:30] *** aeth_ is now known as aeth
[08:12:17] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[08:49:29] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Remote host closed the connection)
[08:49:45] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[09:12:01] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Ping timeout: 245 seconds)
[09:35:12] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[09:59:18] *** Quits: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[10:06:05] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: WeeChat 3.4)
[10:09:16] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[10:33:29] *** Joins: s-liao (~s-liao@101.86.164.158)
[10:37:13] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 256 seconds)
[10:52:26] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:53:14] *** Joins: badkins (~badkins@136.56.92.199)
[10:57:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[11:02:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[11:04:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:50:09] *** Quits: amazigh (~amirouche@user/amirouche) (Quit: WeeChat 2.8)
[11:51:25] *** Joins: amazigh (~amazigh@user/amirouche)
[11:54:17] * amazigh waves
[11:57:12] * atka zzz
[12:00:27] *** Quits: vats (~vats@103.216.143.232) (Remote host closed the connection)
[12:05:19] *** Joins: frost (~frost@user/frost)
[12:32:08] *** Joins: nishant (~Nishant@49.37.242.151)
[12:41:48] *** Joins: mnieper (~user@212.30.36.22)
[12:54:15] *** Joins: badkins (~badkins@136.56.92.199)
[12:58:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[13:21:00] *** Joins: rgherdt (~rgherdt@port-92-195-30-153.dynamic.as20676.net)
[13:40:46] *** Quits: mnieper (~user@212.30.36.22) (Ping timeout: 245 seconds)
[13:45:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:48:29] *** Joins: civodul (~user@guix/contributor/civodul)
[13:51:42] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:52:23] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Ping timeout: 256 seconds)
[14:03:43] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[14:20:35] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[14:23:25] *** Joins: TCZ (~tcz@91.150.178.124)
[14:27:59] *** Joins: s-liao (~s-liao@101.86.164.158)
[14:33:26] *** Joins: aeth_ (~aeth@user/aeth)
[14:33:26] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[14:33:31] *** aeth_ is now known as aeth
[14:41:24] <amazigh> I am reworking SRFI-167, that is an ordered mapping of bytevectors, I am looking to add a "cursor" that allows to navigate the key space with the help of procedures such as `cursor-seek` to position the cursor, then `cursor-next` and `cursor-previous`.
[14:41:37] <amazigh> The question is: should the cursor take into account adds and removes? and how?
[14:42:59] <amazigh> The behavior of wiredtiger is unclear only based on the documentation http://source.wiredtiger.com/develop/struct_w_t___c_u_r_s_o_r.html#abbba24fe607fee519c4c9c4669cd4455
[14:44:53] <amazigh> I may be mistaken, but I think SQLite LSM extension's cursor will remember the strategy used to initialy position the cursor, it can only move forward or backward, and upon a remove, the cursor will move accordingly.
[14:45:39] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[14:46:34] *** Joins: s-liao (~s-liao@101.86.164.158)
[14:54:09] <amazigh> in other words, after an add or remove, what happens when cursor-next or cursor-previous is called?
[14:55:56] <dpk> so, i am considering the fate of syntax-expand in https://gitlab.com/dpk/presrfis/-/blob/master/syntax-case-extensions.md
[14:56:25] <dpk> i will almost certainly remove it from this document before it becomes a SRFI (if that even happens), but i nonetheless think the ability to do this would be beneficial
[14:57:49] <dpk> i wrote this about it a few weeks ago (but only just got around to committing it, oops) https://gitlab.com/dpk/presrfis/-/blob/master/syntax-expand.md
[14:58:33] <dpk> if R7RS Medium (or Foundation Language, whatever) is a thing, the list of special forms which are allowed to appear in its output could be bigger
[14:59:01] <dpk> so i've been looking at what Racketeers use local-expand for https://github.com/search?l=Racket&q=%22local-expand%22&type=Code
[14:59:11] <dpk> https://blog.fogus.me/2013/07/17/an-introduction-to-deep-code-walking-macros-with-clojure/ is also interesting
[15:02:05] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[15:02:36] *** Quits: zwr (~zwr@2804:d45:b966:fb00:cd2d:c396:a30e:b814) (Ping timeout: 240 seconds)
[15:03:47] *** Joins: zwr (~zwr@2804:d45:b966:fb00:8c9f:2901:a9f3:b788)
[15:05:43] *** Joins: s-liao (~s-liao@101.86.164.158)
[15:17:35] <s-liao> dpk as reading your blog about "Editing HTML" on https://gitlab.com/dpk/wiki/-/blob/master/emacs.org. What you said about "leaving out essentially all tags" and "indentation behavior". I was crossing the haml in ruby. Sound like it can help a little bit.
[15:18:35] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[15:18:40] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[15:19:13] <s-liao> It can cover the nest tags as well.
[15:37:33] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[15:37:46] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[15:37:47] <s-liao> amazigh https://pypi.org/project/lsm/
[15:43:27] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[15:49:19] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[15:58:30] *** Quits: cedb (~ced@user/ouestbillie) (Quit: WeeChat 3.4)
[15:59:12] *** Joins: vats (~vats@103.216.143.232)
[16:00:08] *** Joins: cedb (~ced@user/ouestbillie)
[16:02:29] *** alMalsamo is now known as lumberjack123
[16:15:59] <amazigh> tx s-liao! I know that lib but it does not answer the question.
[16:19:15] *** Joins: seninha (~chatzilla@user/seninha)
[16:22:03] <amazigh> I need to keep around the information of what was added or removed in the current transaction, and adapt cursor moves accordingly.
[16:22:52] <amazigh> Whether the library expose cursors or not does not change the problem.
[16:24:14] <amazigh> because okvs-range also need to take adds and removes.
[16:24:25] <amazigh> take into account.
[16:26:21] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Quit: karlosz)
[16:27:40] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:34:32] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[16:38:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[16:55:31] *** Joins: badkins (~badkins@136.56.92.199)
[16:59:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[17:04:37] *** Quits: vats (~vats@103.216.143.232) (Ping timeout: 240 seconds)
[17:06:36] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[17:11:22] *** Joins: frost (~frost@user/frost)
[17:32:15] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[17:42:56] <pinoaffe> I'm not sure whether this is better-suited for #guile or #scheme, but i figured i'd just ask it here - I noticed that the documentation of the null-list? predicate of srfi-1 fame specifies that it is an error to pass a dotted list - the reference implementation does not check whether its argument is actually a proper list, the guile implementation does.
[17:43:04] <pinoaffe> This means that if one uses the guile version of null-list? as a termination condition for list-processing procedures (as the documentation instructs one), code that would have linear complexity when run with the srfi-1 reference implementation is gonna be quadratic when run with the guile implementation (or with another similarly "strict" implementation).
[17:43:08] <pinoaffe> is this an issue?
[17:51:50] *** Joins: badkins (~badkins@136.56.92.199)
[18:00:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:00:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[18:08:56] *** Joins: badkins (~badkins@136.56.92.199)
[18:10:36] *** Quits: daviid (~user@179.210.58.162) (Read error: Connection reset by peer)
[18:14:06] *** Joins: daviid (~user@179.210.58.162)
[18:15:22] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[18:17:05] *** Quits: daviid (~user@179.210.58.162) (Read error: Connection reset by peer)
[18:17:21] *** Joins: daviid (~user@179.210.58.162)
[18:18:02] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 240 seconds)
[18:22:02] *** Joins: seninha (~chatzilla@user/seninha)
[18:27:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:31:19] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:45:55] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 256 seconds)
[18:46:15] <amazigh> it is a not a *reference* implementation but a **sample** implementation. The text rules.
[18:46:31] <amazigh> pinoaffe: it is a bug in SRFI-1 sample implementation.
[18:48:39] <amazigh> on a related note, I do not see the point of null-list?
[18:52:02] <pinoaffe> amazigh: I think the point of null-list? is to prevent calling cdr on say, 3 if a list-processing function is passed a list such as (1 2 . 3)
[18:52:34] <pinoaffe> amazigh: the file i was looking at refers to itself as a reference implementation ;)
[18:52:37] <pinoaffe> https://github.com/scheme-requests-for-implementation/srfi-1/blob/master/srfi-1-reference.scm
[18:54:03] <pinoaffe> amazigh: I don't think it's a bug, see section "errors" in https://srfi.schemers.org/srfi-1/srfi-1.html
[18:55:31] <amazigh> Arthur the editor reminded us that SRFI implementations are samples.
[18:56:19] <amazigh> I read to fast "it is an error", indeed the spec does not require to do something in case of error.
[18:56:50] <pinoaffe> the specification is just very permissive as to what null-list? is supposed to do - if I'm not mistaken, all of null?, not-pair?, the sample implementation and the guile implementation are correct implementations of the spec
[19:04:40] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:2d74:1a23:5767:1547)
[19:04:40] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:2d74:1a23:5767:1547) (Changing host)
[19:04:40] *** Joins: skapata (~Skapata@user/skapata)
[19:09:28] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[19:10:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[19:12:00] *** Quits: X-Scale (~ARM@92.250.103.125) (Ping timeout: 272 seconds)
[19:12:01] *** X-Scale` is now known as X-Scale
[19:12:56] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:13:12] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[19:21:32] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[19:21:57] *** Joins: seninha (~chatzilla@user/seninha)
[19:23:34] *** Joins: aeth (~aeth@user/aeth)
[19:37:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:38:49] <amazigh> it appears google yields better hits when I look for scheme stuff
[20:15:35] *** Joins: badkins (~badkins@136.56.92.199)
[20:19:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[20:23:14] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[20:23:39] *** Quits: rgherdt (~rgherdt@port-92-195-30-153.dynamic.as20676.net) (Remote host closed the connection)
[20:29:37] <dpk> pinoaffe: i think Guile's implementation is wrong given the wording of the spec
[20:29:49] <dpk> morally wrong, that is, not technically
[20:29:52] <Franciman> are we speaking about r7rs?
[20:30:04] <Franciman> can't wait to implmenet my dialect in sml :3
[20:30:07] *** Joins: vats (~vats@103.216.143.232)
[20:30:08] <Franciman> T-2d
[20:47:55] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Quit: leaving)
[20:59:22] *** Joins: badkins (~badkins@136.56.92.199)
[21:06:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[21:20:17] <pinoaffe> dpk: yeah I'd agree, though I'd also like if it wasn't necessary to make that distinction :)
[21:22:32] *** Joins: seninha (~chatzilla@user/seninha)
[21:26:11] <sham1> So reading the spec of `null-list?`, I wonder what the difference between it and `null?` is 
[21:26:57] *** Joins: m455 (~m455@user/m455)
[21:27:06] <Zipheir> It's a type-checking null?, right?
[21:27:37] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 240 seconds)
[21:27:40] <Zipheir> e.g. (null? 'x) => #f, but (null-list? 'x) is an error.
[21:27:59] <sham1> Hm
[21:28:06] <sham1> Still feels a bit odd
[21:28:08] <Zipheir> That seems to be clear from the type signature in SRFI 1, at least.
[21:28:36] <Zipheir> In particular, (null-list? '(x . y)) should be an error.
[21:28:43] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[21:29:33] <Zipheir> SRFI 1 defines a bunch of proper-list procedures, and this is one of them.  They make sense to me, but I've rarely seen them used.
[21:30:22] *** Joins: amk (~amk@109.255.169.126)
[21:30:53] <Zipheir> dpk: Morally wrong?  It seems correct to me.
[21:31:14] <Zipheir> pinoaffe: null? is not a correct implementation, according to the spec..
[21:31:22] <dpk> doch
[21:31:50] <sham1> Well I suppose it depends on whether you're supposed to raise the error or not, and at least the spec doesn't clarify 
[21:32:46] <Zipheir> If not, and it returns values on things that aren't proper lists, it's kind of a pointless procedure.
[21:33:08] <amazigh> my point.
[21:33:30] <dpk> Zipheir: if the purpose of null-list? is to be called at every step of a linear iteration, it is morally wrong for it itself to linearly iterate over the rest of the list at each step, making the overall iteration quadratic
[21:33:43] <Zipheir> But the obvious issue applies, as pinoaffe noted: using null-list? in recursive procedures probably leads to quadratic running time.
[21:33:46] <sham1> But then, how would it typecheck
[21:34:06] <Zipheir> dpk: Yes, exactly.  There's no efficient way to implement it correctly. :-/
[21:34:43] <Zipheir> At least, I can't think of one.
[21:34:48] <sham1> You need to traverse the object to know if it's a proper list, a circular one or something else
[21:35:17] <dpk> the SRFI sample implementation is correct within the intended use case of null-list?
[21:35:20] <sham1> Zipheir: could always make it so that lists are backed by an underlying array instead of cons-pairs ;)
[21:35:42] <dpk> cdr coding? how retro
[21:36:20] <Zipheir> Some kind of behind-the-scenes trick to distinguish (im)proper lists in constant time?
[21:36:37] <Zipheir> But say good by to portability.
[21:36:48] <Zipheir> s/good by/goodbye/
[21:37:36] <Zipheir> sham1: Is that sort of what you're suggesting?  I'm not sure I understand.
[21:38:29] <sham1> Yeah, basically 
[21:39:28] <sham1> It would be tricky and not necessarily efficient, but it could be done
[21:45:17] <Zipheir> I wonder if Olin expected Scheme programs to be full of circular and improper lists.
[21:45:36] *** Joins: badkins (~badkins@136.56.92.199)
[21:47:35] <sham1> Circular lists are somewhat useful since they give you circular buffers essentially for free, except for all the cache misses
[21:49:04] <Franciman> what's a better alternative?
[21:49:12] <Franciman> for circular buffers?
[21:49:17] <Zipheir> Records.
[21:49:44] <Zipheir> Everything that used to be implemented with conses tends to be done with records in "modern Scheme".
[21:50:39] <Zipheir> Or, hell, vectors and modular arithmetic.
[21:51:01] <sham1> Franciman: yeah. You make a moderately sized circular list, and you look for the current element in car and advance by looking at cdr
[21:51:16] <sham1> Because it's a circular list, it works
[21:51:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[21:51:41] *** Joins: rgherdt (~rgherdt@port-92-195-30-153.dynamic.as20676.net)
[21:53:16] <sham1> And for seeing if your read and write are at the same spot, you can just do (eq? read write). Although yes, you'd probably use a vector that is abstracted behind a record
[21:54:28] <Zipheir> There doesn't seem to be a ton of research into circular structures in functional programming...
[21:55:25] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[21:55:36] <sham1> Probably not. A circular buffer is probably too practical for academics, even if done in a functional manner
[21:55:43] <sham1> Zing
[21:56:49] <Zipheir> :-|
[21:57:09] <Zipheir> More likely, they're tricky to formalize.
[21:59:54] <Zipheir> Abstractly, it's just a structure with certain operations and efficiency expectations for them, so I suspect the "circularity" could be seen as just a non sequitur.
[22:02:32] *** Quits: vats (~vats@103.216.143.232) (Ping timeout: 240 seconds)
[22:03:40] <sham1> Well it  is just a bounded queue  
[22:04:10] <Zipheir> Is there anything else "to" a ring buffer (say) than fast first/last element access/insert?  If not, that's just a deque.
[22:04:26] <Zipheir> Ah, bounded length.
[22:05:35] *** Joins: klovett_ (~klovett@107.116.92.97)
[22:08:12] *** Quits: klovett (~klovett@107.116.92.97) (Ping timeout: 240 seconds)
[22:15:51] *** Joins: seninha (~chatzilla@user/seninha)
[22:18:16] <amazigh> friendly reminder to make backups, I just grabbed some old code of mine from an (online) backup ^^
[22:19:36] <sham1> While I said the whole "too practical for academics" as a jest, I do actually think that there is some truth to it. Circular queues are often used on things like small microcontrollers and such for things like serial communications, where space is at a premium. An environment which it seems that people who do functional programming research and such might not be that interested in
[22:22:21] <Zipheir> Yeah.
[22:22:53] <Zipheir> Baremetal functional programming is under-explored.
[22:23:38] *** Joins: badkins (~badkins@136.56.92.199)
[22:23:51] <Zipheir> Part of the challenge is that you probably have to go linear-typed and give up ubiquitous garbage collection.
[22:24:28] <sham1> I mean, you don't have to, but not doing so would make things more difficult. One can do bare-metal without being fully real-time after all
[22:25:16] <sham1> And I think that there are some collectors that would work for at least soft realtime
[22:26:48] <Zipheir> Sounds interesting.
[22:28:06] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[22:29:17] *** Quits: nishant (~Nishant@49.37.242.151) (Quit: Leaving)
[22:31:40] <sham1> This could be relevant for example: https://www.academia.edu/604696/A_Soft_Real_Time_Precise_Tracing_Garbage_Collector_for_C_?auto=download
[22:33:40] <sham1> Although it seems that there are also some hard realtime things as well
[22:34:07] <sham1> https://dl.acm.org/doi/abs/10.1145/1217256.1217268
[22:34:37] *** Quits: rgherdt (~rgherdt@port-92-195-30-153.dynamic.as20676.net) (Ping timeout: 240 seconds)
[22:36:16] *** Joins: rgherdt (~rgherdt@port-92-195-30-153.dynamic.as20676.net)
[22:37:29] *** Quits: rgherdt (~rgherdt@port-92-195-30-153.dynamic.as20676.net) (Remote host closed the connection)
[22:49:37] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:50:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[22:51:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:13:42] <jcowan> Flexvectors and circular buffers have an interesting duality
[23:15:12] <pinoaffe> Zipheir: "is an error" only means "don't do that", so, as I said before, null? is a valid implementation of null-list? by the letter of the spec
[23:15:23] <pinoaffe> it's just not a very useful one
[23:15:57] <pinoaffe> see https://srfi.schemers.org/srfi-1/srfi-1.html#Errors
[23:16:08] <Zipheir> pinoaffe: True.
[23:18:00] <Zipheir> I forget that SRFI 1 is one of the few SRFIs that give their own definitions of "it is an error"!
[23:19:33] <Zipheir> I think it's a pretty sloppy definition, in grumpy honesty.
[23:19:55] <Zipheir> But those were the days of R5RS.
[23:21:20] <pinoaffe> yeah I hope this will be made a tad more "strict" if adopted in r7rs
[23:21:48] <Zipheir> It has been adopted, in R7RS-large Red.
[23:22:23] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[23:22:24] <Zipheir> I wonder if SRFI 1 "it is an error" now means what it means in R7RS-small...
[23:23:02] <pinoaffe> ah okay in that case I hope (scheme list) will be changed here and there from the original srfi 1 :)
[23:26:47] <sham1> Well looking at R7RS, I'd guess that "it is an error" could be said from there to also mean "one may or may not signal one"
[23:28:03] <dpk> pinoaffe: it will beÂ â€” i'm the person responsible for overseeing cleanup issues like this. but this one will be tricky to fix before the people working on the foundation language work out what error conditions look like
[23:28:36] <sham1> "If such wording (neither "an error is signaled" nor "an error that satisfies predicate is signaled") does not appear in the discussion of an error, then implementations are not required to detect or report the error, although they are encouraged to do so. Such a situation is sometimes, but not always, referred to with the phrase \"an error.\""
[23:28:58] <sham1> I'd say that this lines up with SRFI-1's wording
[23:29:56] <pinoaffe> dpk: great, thanks for your work!
[23:29:57] <sham1> Actually I'd say that it's basically the exact same wording as with SRFI-1 since that just borrows it from R5RS, which has a very similar thing going on, as quoted in the SRFI document
[23:30:19] <dpk> actually, i think my proposed fix will simply be to forbid what Guile does
[23:30:59] <dpk> which makes null-list? useless for its intended purpose
[23:31:21] <dpk> at least in any program which cares about performance in the slightest
[23:31:30] <sham1> Worse than useless; redundant
[23:32:17] <pinoaffe> yeah forbidding guile's behavior would be great
[23:32:37] <sham1> Since unless one does the kind of weird type tagging where a proper list is a disjoint type from just pairs somehow, you can't check for this in constant time
[23:32:48] <pinoaffe> I'm not sure whether there's a benefit to having both not-pair? and null? be valid implementations of null-list?, tho
[23:36:15] *** Joins: Everything (~Everythin@37.115.210.35)
[23:38:07] <sham1> Since we're talking about adapting SRFI-1 for things, I do wonder if it'd be worth it to make it so that `list=` can accept a comparator as well as an equality predicate
[23:38:26] *** Joins: badkins (~badkins@136.56.92.199)
[23:39:24] <dpk> i've noted the issue in my list, which will hopefully be published in the soon-to-be-opened R7RS Large issue tracker this week
[23:46:29] <sham1> That'd be good
[23:46:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[23:47:29] <pinoaffe> dpk: oh and another, unrelated question about comparators: what do you think about a make-grouped-comparator/make-unfolding-comparator function that takes a kar, kdr, and knull? and returns a comparator that yields lexicographical order over the associated sequence type?
[23:48:23] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[23:50:17] <dpk> make-list-comparator from SRFI 128 does that
[23:50:53] <pinoaffe> oh wow, never mind then :)
[23:51:15] *** Joins: badkins (~badkins@136.56.92.199)
[23:51:18] <pinoaffe> I should have read the specs more closely :)
[23:55:38] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
