[00:14:04] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[00:17:49] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[00:59:34] *** Joins: seninha (~seninha@user/seninha)
[01:22:01] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[01:25:58] *** Joins: vlm (~vlm@user/vlm)
[01:59:20] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[02:04:40] *** Joins: jess (~jess@libera/staff/jess)
[03:06:04] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[03:09:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:ece1:b35e:c9b0:1b9e) (Ping timeout: 264 seconds)
[03:38:15] *** Joins: ForeverNoob[m] (~foreverno@2001:470:69fc:105::8c6)
[03:40:08] <ForeverNoob[m]> hi, just to pre-empt: I'm pretty much a complete noob in either awk or perl, so forgive me if I'm a bit slow on things.
[03:40:50] <ForeverNoob[m]> So excuse me for this potentially stupid question, but is it even possible to convert this perl oneliner to POSIX awk? `perl -n -l0 -e 'BEGIN { getc; $/ = "\n\t"; $HISTCMD = $ENV{last_hist} + 1 } s/^[ *]//; print $HISTCMD - $. . "\t$_" if !$seen{$_}++'`
[03:45:39] *** Quits: lesihctej (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[03:48:30] *** Joins: seninha (~seninha@user/seninha)
[03:56:18] <emanuele6> probably
[03:58:19] <emanuele6> that getc in begin seems weird
[03:59:53] <emanuele6> ForeverNoob[m]: do you know what that perl command does?
[04:00:18] <emanuele6> because that getc looks like an hack
[04:03:40] <emanuele6> actually, cannot do it in portable awk, no
[04:04:55] <emanuele6> that perl command still looks hacky though since what it is doing is quite simple
[04:11:12] <emanuele6> the only place where POSIX awk allows to use an escape for the NUL character is in EREs literals (/\000/) which is quite useless since POSIX awk is not guaranteed to be able to store NUL characters in variables / read binary data from input anyway
[04:11:44] <emanuele6> you can't set RS or ORS to NUL portably
[04:15:12] <emanuele6> > The token STRING shall represent a string constant. A string constant shall begin with the character '"'. Within a string constant, a <backslash> character shall be considered to begin an escape sequence as specified in the table in XBD File Format Notation ( '\\', '\a', '\b', '\f', '\n', '\r', '\t', '\v' ). In addition, the escape sequences in Escape Sequences in awk shall be recognized.
[04:16:40] <emanuele6> actually, in POSIX awk, STRING tokens should be able to recognise \000, but in reality, nawk does not support it
[04:17:05] <ForeverNoob[m]> emanuele6: it's part of the fzf key bindings script: https://github.com/junegunn/fzf/blob/master/shell/key-bindings.bash
[04:17:06] <emanuele6> so you can write it in POSIX awk, but it won't work in nawk
[04:17:34] <emanuele6> # nawk 'BEGIN { print "\000" }' | od -An -c
[04:17:36] <shbot> emanuele6:   \n
[04:17:39] <emanuele6> # mawk 'BEGIN { print "\000" }' | od -An -c
[04:17:42] <shbot> emanuele6:   \0  \n
[04:17:45] <emanuele6> # gawk 'BEGIN { print "\000" }' | od -An -c
[04:17:47] <shbot> emanuele6:   \0  \n
[04:19:31] <ForeverNoob[m]> hmm, would there be a better tool than awk for this? AFAIK POSIX vi can do some operations on piped input.
[04:20:14] <emanuele6> # nawk 'BEGIN { print "b\000a" }' | od -An -c
[04:20:16] <shbot> emanuele6:    b  \n
[04:20:24] <emanuele6> actually nawk supports it nevermind
[04:20:48] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:eba7:95bb:d099:a7d8)
[04:20:51] <emanuele6> the problem is that print "\000" is not guaranteed to print \000 obviously, nevermind
[04:21:35] <emanuele6> ForeverNoob[m]: there is no POSIX tool that let's you process binary data.
[04:22:16] <ForeverNoob[m]> it's processing binary data? :S
[04:22:33] <ForeverNoob[m]> AFAIK it's just getting the output from `fc -lnr -2147483648`
[04:23:42] <emanuele6> -l0 means that $/ (the equivalent of RS and ORS in awk) is NUL
[04:23:58] <emanuele6> data that contains NUL is binary
[04:24:18] <ForeverNoob[m]> oh
[04:24:20] <emanuele6> i think that is actually the definition of binary data
[04:24:53] <ForeverNoob[m]> lol I thought the definition was "data consisting of ones and zeroes" :p
[04:25:55] <emanuele6> i mean some data that may contain NUL characters, a 00000000 byte
[04:26:13] <emanuele6> ForeverNoob[m]: that makes no sense, maybe you are thinking of binary numbers
[04:26:48] <ForeverNoob[m]> yeah perhaps, I'm a noob after all Â¯\(ãƒ„)/Â¯
[04:27:32] <ForeverNoob[m]> just tried it out btw and that perl part works fine without the `-l0`
[04:27:40] <ForeverNoob[m]> (here at least)
[04:28:47] <emanuele6> do you even know what that should do?
[04:29:27] <emanuele6> because if you can just remove an important piece like -l0 and say "it still works", i doubt it
[04:30:10] <emanuele6> can you describe in words what you want that command to do?
[04:30:25] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:31:01] <ForeverNoob[m]> no idea, but what I've gathered is that `fc -lnr -2147483648` generates a list of bash history, and then that perl part seems to remove the newlines from it and prepend it with spaces.
[04:31:46] <ForeverNoob[m]> so something like... `builtin fc -lnr -2147483648 | perl -n -l0 -e 'BEGIN { getc; $/ = "\n\t"; $HISTCMD = $ENV{last_hist} + 1 } s/^[ *]//; print $HISTCMD - $. . "\t$_" if !$seen{$_}++'`
[04:31:50] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:33:02] <emanuele6> HISTCMD is bash
[04:33:19] <emanuele6> that means you are not restricted to POSIX, you can use bash :|
[04:33:39] <emanuele6> bash builtins can read NUL separated data
[04:34:33] <emanuele6> also that link you sent before was setting up an environment variable for perl: $last_hist
[04:34:41] <ForeverNoob[m]> yeah but I was trying to remove the perl dependency and be more POSIX-y
[04:34:41] <emanuele6> you are not doing that
[04:34:43] *** Joins: vlm (~vlm@user/vlm)
[04:35:07] <ForeverNoob[m]> I'm guessing the $last_hist is the command that was last used.
[04:35:26] <emanuele6> you don't have to guess, you can read the code
[04:35:35] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 260 seconds)
[04:36:45] <emanuele6> ForeverNoob[m]: you say that without -l0 it still works, but i get a completely different output if i run it with or without -l0
[04:36:48] <ForeverNoob[m]> basically I'm trying to re-write that bash script so that it becomes more universal across more systems (e.g. write it more adherent to POSIX rules)
[04:36:48] <emanuele6> as i would expect
[04:37:40] <emanuele6> ForeverNoob[m]: that script literally uses a bash specific variable HISTCMD
[04:37:55] <emanuele6> you can't just say "that, but in POSIX"
[04:38:19] <emanuele6> you need to describe what you want
[04:39:37] <ForeverNoob[m]> yeah weird, the removal of `-l0` does produce a different output, but if I remove it in a script and use `__fzf_history__` it works as expected. Maybe I'm hamfisting something I shouldn't.
[04:40:16] <ForeverNoob[m]> well the macro view of what I'm trying to do is to remove as much unnecessary dependencies as possible
[04:40:56] <emanuele6> that script can only work in bash!
[04:41:15] <ForeverNoob[m]> and here specifically I want to remove fzf's dependency on bash, and yeah there are challenges, but I'm trying to go step by step.
[04:41:18] <emanuele6> if you want to replace that perl command, use bash builtins!
[04:42:02] <emanuele6> that whole script only works for bash because it uses HISTCMD!
[04:42:49] <emanuele6> you didn't say before you wanted to also remove bash; just perl
[04:43:21] <emanuele6> and that is why i said that you can't just say "that, but in POSIX"; that script only works on bash anyway
[04:43:41] <emanuele6> say what you actually want, not "that"
[04:44:00] <emanuele6> because "that" is something bash specific
[04:44:11] <ForeverNoob[m]> right, but removing perl is part of removing unnecessary dependencies. Removing bash is the final boss.
[04:44:32] <emanuele6> pure nonsense
[04:44:45] <emanuele6> any way, as i said, you can't replace that perl with POSIX awk
[04:45:15] <emanuele6> you can replace it with bash's builtin    read -rd ''    in a loop though
[04:45:52] <ForeverNoob[m]> hmm, that I can live with for now I think.
[04:46:47] <ForeverNoob[m]> but I notice that has become an off topic question for here, perhaps better suited in #freenode_#bash:matrix.org 
[04:47:04] <ForeverNoob[m]> thanks anyway emanuele6 :)
[04:48:23] <emanuele6> i doubt there are any people on freenode
[04:49:08] <emanuele6> unless that is just a matrix bridge for #bash on libera that they forgot to rename
[04:49:55] <ForeverNoob[m]> yeah I was still in the FN room/chan and my matrix client just autocompleted that
[04:50:29] <emanuele6> but anyway, forget HISTCMD. i didn't even notice, literally all that that script does is calling bind to set readline bindings
[04:51:09] <emanuele6> it does make no sense at all saying that you want to remove bash a dependency for that file; that is straight up a bash configuration file
[04:52:41] <emanuele6> it also sets READLINE_LINE and READLINE_POINT in that same function
[04:55:26] <emanuele6> it is in a directory that contains key-binding.zsh key-binding.fish key-binding.bash
[04:55:49] <emanuele6> ForeverNoob[m]: you can't even tell that that is literally a bash specific configuration file?
[04:56:57] <emanuele6> :/
[05:10:23] <ForeverNoob[m]> emanuele6: well I saw that it was a bash script :p
[05:14:59] *** Joins: tangy (~tangy@user/tangy)
[05:31:31] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[05:33:10] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:34:43] <e36freak> emanuele6 is a bash script
[05:35:47] *** Quits: wuseman (~wuseman@user/wuseman) (Ping timeout: 264 seconds)
[05:40:25] * emanuele6 is a bash script
[06:04:56] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[06:08:02] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:50:32] *** Quits: lgc (~lgc@user/lgc) (Quit: WeeChat 3.2-dev)
[08:12:35] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[08:14:33] *** Joins: jetchisel (jetchisel@user/jetchisel)
[08:34:53] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[08:36:53] *** Joins: jetchisel (jetchisel@user/jetchisel)
[08:43:41] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (Quit: WeeChat 3.1)
[08:55:11] *** Quits: waldo323__ (~waldo323@d14-69-96-170.try.wideopenwest.com) (Remote host closed the connection)
[08:55:33] *** Joins: waldo323__ (~waldo323@d14-69-96-170.try.wideopenwest.com)
[08:58:01] *** Quits: mute (m@crx.fan) (Ping timeout: 245 seconds)
[09:10:44] *** Joins: mute (m@crx.fan)
[09:41:19] *** Joins: sagax (~sagax_nb@user/sagax)
[09:57:35] *** Joins: wuseman (~wuseman@81-234-120-192-no68.tbcn.telia.com)
[09:57:35] *** Quits: wuseman (~wuseman@81-234-120-192-no68.tbcn.telia.com) (Changing host)
[09:57:35] *** Joins: wuseman (~wuseman@user/wuseman)
[10:03:59] *** Quits: wuseman (~wuseman@user/wuseman) (Ping timeout: 264 seconds)
[10:04:33] *** Joins: wuseman (~wuseman@81-234-120-217-no68.tbcn.telia.com)
[10:04:33] *** Quits: wuseman (~wuseman@81-234-120-217-no68.tbcn.telia.com) (Changing host)
[10:04:33] *** Joins: wuseman (~wuseman@user/wuseman)
[10:16:06] *** Joins: lavaball (felix@31.204.155.215)
[10:23:04] *** Quits: wuseman (~wuseman@user/wuseman) (Remote host closed the connection)
[10:28:19] *** Joins: wuseman (~wuseman@81-234-120-217-no68.tbcn.telia.com)
[10:28:19] *** Quits: wuseman (~wuseman@81-234-120-217-no68.tbcn.telia.com) (Changing host)
[10:28:19] *** Joins: wuseman (~wuseman@user/wuseman)
[10:50:49] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[11:07:53] <Riviera> who knows if you'd pass shellcheck
[11:07:55] <Riviera> :)
[11:24:07] *** Quits: jakmap (~paul@user/paulj) (Remote host closed the connection)
[11:27:23] *** Joins: earnestly (~earnest@user/earnestly)
[11:29:55] *** Joins: aramtsamtsam (~Thunderbi@2001:861:388a:5600:1710:c3dc:c776:df35)
[11:37:32] *** Quits: aramtsamtsam (~Thunderbi@2001:861:388a:5600:1710:c3dc:c776:df35) (Quit: aramtsamtsam)
[11:37:52] *** Joins: aramtsamtsam (~Thunderbi@2001:861:388a:5600:1710:c3dc:c776:df35)
[13:22:54] *** Quits: roarde (~roarde@user/roarde) (Quit: Leaving)
[13:46:53] *** Quits: aramtsamtsam (~Thunderbi@2001:861:388a:5600:1710:c3dc:c776:df35) (Quit: aramtsamtsam)
[14:20:47] *** Quits: ccl (ccl@shell.xshellz.com) (Ping timeout: 264 seconds)
[14:37:26] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[14:39:48] *** Joins: alguien (~alguien@user/alguien)
[14:45:06] <alguien> How do I match "after" a match? That is, search for a pattern, and for every occurrence, print the very next line that matches a different pattern. In particular, for every class instantiantion I find (eg. "new klass {") I find, I want to print a specific property definition eg. "theSpecificProp = 'something'"
[14:46:36] <Riviera> alguien: you can set a variable to remember you found a pattern
[14:46:48] <Riviera> alguien: and you can make the state of the variable part of the condition
[14:47:23] <alguien> Riviera, I thought that's kinda how it goes. But I hoped to get an example, seeing as I never learned awk (:
[14:47:27] <geirha> something like  awk '/new .* \{/{ f = 0 } /new klass {/ { f = 1 } f && /theSpecificProp/ { print }'
[14:47:50] <Riviera> alguien: /first pattern/ { a = 1 }
[14:47:51] <geirha> err, forgot to escape { in second regex
[14:47:57] <Riviera> alguien: /second pattern/ && a == 1 { some code }
[14:48:10] <Riviera> alguien: /third pattern/ { a = 0 } # example to reset the state again
[14:48:21] <Riviera> alguien: getting the general idea?
[14:48:22] <Riviera> :)
[14:49:02] <alguien> kinda, but I think i'd reset the state in the second pattern, right?
[14:49:19] <geirha> yes, you could do that
[14:49:40] <alguien> because... what would third pattern be?
[14:49:55] <alguien> can't be "not secnond pattern", that'll reset too soon
[14:49:55] <geirha> but then if the new klass block does not contain theSpecficProp, you might grab a later one instead
[14:50:25] <geirha> in my example, third pattern is /new .* \{/
[14:50:28] <alguien> geirha, Riviera oh you mean like /\}/
[14:50:46] <alguien> well, not quite, that's too general
[14:51:09] <alguien> geirha, won't that immediately reset the state, being the same as the first?
[14:51:27] <alguien> oh sorry
[14:51:36] <Riviera> alguien: ah i did not use your patterns, just gave an example :)
[14:51:40] <alguien> got it, thanks
[14:51:48] <alguien> no, you've got it
[14:52:26] <alguien> i thought /new .* \{/ was supposed to be the first pattern, but the first pattern is more specific, and that's what I want
[14:52:58] <alguien> plus the key is that it appears before the first pattern
[14:53:07] <alguien> i better stop talking, i'm probably just confusing you
[14:53:32] <alguien> but i get it, thanks Riviera and geirha :)
[14:54:09] <geirha> yeah, when it reaches the new klass { line, /new .* \{/ will match and disable the flag, then the /new klass \{/ will also match and enable the flag again
[14:56:16] * alguien nods
[14:57:07] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[14:57:09] <Riviera> :)
[15:38:41] *** Joins: seninha (~seninha@user/seninha)
[15:48:12] *** Joins: ccl (ccl@shell.xshellz.com)
[15:49:38] *** Joins: lavaball (felix@31.204.155.215)
[16:03:16] *** Quits: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com) (Ping timeout: 244 seconds)
[16:03:30] *** Joins: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com)
[16:05:47] *** Quits: Meli (~meli@user/meli) (Ping timeout: 260 seconds)
[16:14:08] *** Joins: alguien_ (~alguien@user/alguien)
[16:16:59] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 260 seconds)
[16:18:31] *** Joins: Meli (~meli@user/meli)
[16:44:03] *** Joins: Torr (~Torr@user/torr)
[17:00:29] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[17:05:06] *** Quits: Meli (~meli@user/meli) (Ping timeout: 245 seconds)
[17:13:56] *** Joins: Meli (~meli@user/meli)
[18:05:01] *** Quits: Meli (~meli@user/meli) (Ping timeout: 252 seconds)
[18:12:29] *** Joins: Meli (~meli@user/meli)
[18:22:06] *** Quits: mikeputnam2 (~mikeputna@wilug/mikeputnam) (Quit: WeeChat 2.3)
[18:36:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[18:40:13] *** Joins: seninha (~seninha@user/seninha)
[18:48:29] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[18:50:10] *** Joins: vlm (~vlm@user/vlm)
[18:54:46] *** Quits: tangy (~tangy@user/tangy) (Remote host closed the connection)
[18:56:40] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[19:18:58] *** Joins: Jad (~Nashmi@user/jad)
[19:26:38] *** Joins: mikeputnam (~mikeputna@wilug/mikeputnam)
[19:32:35] *** Joins: waldo323_ (~waldo323@d14-69-96-170.try.wideopenwest.com)
[19:35:19] *** Quits: waldo323__ (~waldo323@d14-69-96-170.try.wideopenwest.com) (Ping timeout: 260 seconds)
[20:08:20] *** Quits: alguien_ (~alguien@user/alguien) (Ping timeout: 246 seconds)
[20:09:21] *** Quits: [R] (~rs@genoce.org) (Quit: No Ping reply in 180 seconds.)
[20:09:27] *** Joins: [R] (~rs@genoce.org)
[20:10:14] *** Quits: jle (~jle@user/jle) (Ping timeout: 244 seconds)
[20:11:22] *** Joins: jle (~jle@aftr-88-152-185-251.unity-media.net)
[20:35:26] *** Joins: yitz_ (~yitz@exercism/yitz)
[20:35:39] *** Joins: odc_ (sid197788@id-197788.helmsley.irccloud.com)
[20:37:00] *** Joins: demonban1 (~demonbane@pool-74-108-12-105.nycmny.fios.verizon.net)
[20:43:19] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[20:43:19] *** Quits: yitz (~yitz@exercism/yitz) (*.net *.split)
[20:43:19] *** Quits: demonbane (~demonbane@pool-74-108-12-105.nycmny.fios.verizon.net) (*.net *.split)
[20:43:20] *** Quits: odc (sid197788@helmsley.irccloud.com) (*.net *.split)
[20:43:20] *** odc_ is now known as odc
[20:44:50] *** Joins: lgc (~lgc@user/lgc)
[20:45:30] *** Joins: Ekho- (~Ekho@user/ekho)
[20:52:17] *** Joins: seninha_ (~seninha@user/seninha)
[20:53:41] *** Ekho- is now known as Ekho
[20:54:30] *** Joins: seninha__ (~seninha@user/seninha)
[20:54:39] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[20:56:55] *** Quits: seninha_ (~seninha@user/seninha) (Ping timeout: 268 seconds)
[21:00:54] *** Quits: seninha__ (~seninha@user/seninha) (Quit: Leaving)
[21:06:37] *** Joins: seninha (~seninha@user/seninha)
[21:17:58] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (Ping timeout: 252 seconds)
[21:30:08] *** yitz_ is now known as yitz
[22:29:31] *** Joins: dngray[m]1 (~dngraymat@2001:470:69fc:105::793b)
[22:29:55] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[22:32:38] <dngray[m]1> mm bit of an awk noob trying to do awk '/^vendor_id[[:blank:]]:/{ print $NF }' /proc/cpuinfo
[22:32:45] <dngray[m]1> i only want it to print one occurance though
[22:32:58] <dngray[m]1> ie AuthenticAMD or GenuineIntel
[22:33:12] <dngray[m]1> instead it prints one for each core
[22:33:33] <dngray[m]1> it should be dead simple
[22:33:46] <dngray[m]1> but i don't really know what i am doing
[22:35:10] <emanuele6> if you want to print the last field for only the first line that matches /^vendor_id[[:blank:]]:/, exit after printing
[22:36:39] <emanuele6> dngray[m]1: as in, call `exit'
[22:37:04] <dngray[m]1> how would i do that err
[22:37:19] <emanuele6> awk '/^vendor_id[[:blank:]]:/ { print $NF; exit }' /proc/cpuinfo
[22:38:14] <dngray[m]1> btw is that even the most optimized way?
[22:38:25] <dngray[m]1> like is there shorter, more precise way of going about it?
[22:38:35] <dngray[m]1> i kinda copied that from somewhere
[22:38:56] <emanuele6> printf 'vendor_id\t: %s\n' GenuineIntel AuthenticAMD GenuineIntel | awk '/^vendor_id[[:blank:]]:/ { print $NF; exit }'
[22:38:58] <dngray[m]1> oh, nice
[22:38:59] <emanuele6> # printf 'vendor_id\t: %s\n' GenuineIntel AuthenticAMD GenuineIntel | awk '/^vendor_id[[:blank:]]:/ { print $NF; exit }'
[22:38:59] *** Joins: paulj (~paul@user/paulj)
[22:39:01] <shbot> emanuele6: GenuineIntel
[22:39:08] <dngray[m]1> yeah i think i messed with awk ages ago
[22:39:21] <dngray[m]1> normally i sed/grep and never really need to
[22:39:30] <emanuele6> alternatively, you can make it print only unique occurences
[22:39:43] <emanuele6> # printf 'vendor_id\t: %s\n' GenuineIntel AuthenticAMD GenuineIntel | awk '/^vendor_id[[:blank:]]:/ && !a[$NF]++ { print $NF; exit }'
[22:39:45] <shbot> emanuele6: GenuineIntel
[22:39:57] <emanuele6> err, if you remove exit
[22:40:01] <dngray[m]1> no, in this case the intention is to tell me if the machine is an Intel machine or AMD
[22:40:03] <emanuele6> # printf 'vendor_id\t: %s\n' GenuineIntel AuthenticAMD GenuineIntel | awk '/^vendor_id[[:blank:]]:/ && !a[$NF]++ { print $NF }'
[22:40:05] <shbot> emanuele6: GenuineIntel
[22:40:05] <shbot> emanuele6: AuthenticAMD
[22:40:18] <dngray[m]1> and i couldn't think of a better way
[22:41:26] <dngray[m]1> i'm not sure what the difference is with the last one
[22:41:33] <dngray[m]1> awk '/^vendor_id[[:blank:]]:/ && !a[$NF]++ { print $NF }' /proc/cpuinfo
[22:41:46] <emanuele6> # printf 'vendor_id\t: %s\n' GenuineIntel AuthenticAMD GenuineIntel
[22:41:48] <shbot> emanuele6: vendor_id       : GenuineIntel
[22:41:48] <shbot> emanuele6: vendor_id       : AuthenticAMD
[22:41:48] <shbot> emanuele6: vendor_id       : GenuineIntel
[22:42:04] <emanuele6> the first one only prints: "GenuineIntel", the first occurence
[22:42:42] <emanuele6> the second one prints unique occurrences in the order in which they appear, so: "GenuineIntel" and "AuthenticAMD"
[22:56:06] *** Quits: Jad (~Nashmi@user/jad) (Quit: Benefits I derive from freeÂ­dom are largely the result of the uses of freedom by others, and mostly of those uses of freedom that I could never avail myself of.)
[22:58:34] <dngray[m]1> they will never appear at the same time
[22:58:44] <dngray[m]1> as it is impossible for a host to have both Intel and AMD CPUs
[22:58:46] <emanuele6> if you say so
[22:59:02] <dngray[m]1> on the same motherboard
[22:59:08] <dngray[m]1> that would literally require a motherboard with two different sockets lol
[23:00:15] <dngray[m]1> <emanuele6> "the first one only prints: "..." <- awk '/^vendor_id[[:blank:]]:/ { print $NF; exit }' /proc/cpuinfo
[23:00:18] <dngray[m]1> then is probably what i want
[23:17:15] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 258 seconds)
[23:42:02] *** Joins: YaoNai (~YaoNai@user/yaonai)
[23:54:47] *** Quits: X-Scale (~ARM@46.50.5.8) (Ping timeout: 260 seconds)
[23:57:25] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
