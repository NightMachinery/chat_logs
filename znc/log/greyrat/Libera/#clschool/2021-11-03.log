[00:00:36] <White_Flame> :use for alexandria in particular is not uncommon.  a PLN of a: is becoming moreso as PLNs in general get more use
[00:01:04] <copec> I like a:
[00:01:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:05:48] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[00:05:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:08:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[00:09:43] *** Joins: aeth (~aeth@user/aeth)
[00:12:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:29:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:34:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:39:59] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:40:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:40:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:45:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[00:56:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:58:06] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:03:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:08:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[01:08:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:12:06] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 260 seconds)
[01:17:08] *** Joins: Jacobis9000 (~jonaholuf@81.145.248.247)
[01:21:58] *** Quits: Jacobis9000 (~jonaholuf@81.145.248.247) (Ping timeout: 260 seconds)
[01:25:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:29:22] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[01:31:12] *** Joins: aeth (~aeth@user/aeth)
[01:31:44] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:32:38] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[01:39:26] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:52:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:17:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[02:20:30] *** Joins: Jacobis9000 (~jonaholuf@81.145.248.247)
[02:26:24] *** Quits: Jacobis9000 (~jonaholuf@81.145.248.247) (Ping timeout: 268 seconds)
[03:09:49] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:31:52] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[03:32:24] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[03:34:13] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:46:42] *** Joins: trocado (~trocado@bl18-243-251.dsl.telepac.pt)
[03:56:54] *** Quits: trocado (~trocado@bl18-243-251.dsl.telepac.pt) (Remote host closed the connection)
[04:06:42] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[04:15:59] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[04:16:26] *** Quits: random-nick (~random-ni@87.116.177.136) (Ping timeout: 260 seconds)
[04:17:25] *** Quits: jeffrey (~jeffrey@2001:1c00:b11:8800:6035:eeff:fe81:bf1c) (Quit: Client quit)
[04:21:18] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[04:23:16] *** Joins: Jacobis9000 (~jonaholuf@81.145.248.247)
[04:25:32] <copec> What equality predicate will match symbols, even in different packages?
[04:26:24] <mfiano> string=
[04:26:39] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[04:27:21] <copec> Ah, okay, thanks
[04:27:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:28:31] *** Quits: Jacobis9000 (~jonaholuf@81.145.248.247) (Ping timeout: 268 seconds)
[04:30:08] <mfiano> Note how #'string= takes a string-designator, not a string.
[04:30:29] <mfiano> A symbol can represent a string, using its symbol-name cell
[04:30:56] <copec> I was just reading that
[04:31:15] <mfiano> Note however that you cannot use this to hash keys for a hash table
[04:33:26] <mfiano> Symbols are objects too. They have several different properties.
[04:33:55] <mfiano> The same equality could be done with (string= (symbol-name symbol1) (symbol-name symbol2))
[04:34:10] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[04:34:39] <mfiano> But the standard has a concept of designators for various objects, not just strings, to allow us to be more concise with simply (string= symbol1 symbol2)
[04:34:59] <mfiano> Good luck and good night
[04:35:29] <copec> night mfiano 
[04:36:50] <copec> So does CL use the actual object identity as a placeholder for lexical scope?
[04:39:12] <copec> Yes, bottom of https://unaen.org/cl/HyperSpec/Body/t_symbol.htm
[04:42:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:43:14] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::32f3)
[04:47:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[05:42:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:51:26] <copec> What are other names for mixins?
[05:52:05] <copec> traits?
[05:56:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[06:05:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:23:55] *** Joins: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com)
[06:28:30] *** Quits: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com) (Ping timeout: 260 seconds)
[06:30:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:36:38] <lisp123> If I have a function CL-COOL-P, in which I have a labels form which defines a local function CL-COOL-P, I guess the inner function shadows the outer function within the scope of the labels?
[06:40:25] <mfiano> (funcall #'cl-cool-p ...) ;; innervs (funcall 'cl-cool-p)
[06:42:09] <mfiano> #'sym is a function object contained in the current scope or above, and 'sym is not a function and thus consults the global environment at runtime
[06:42:33] <lisp123> mfiano: Thanks!
[06:42:43] <lisp123> Useful to know the second sentence
[06:58:21] *** Quits: sts-q (~sts-q@212.53.219.248) (Ping timeout: 268 seconds)
[07:05:55] *** Joins: sts-q (~sts-q@91.200.108.179)
[07:08:04] *** beach` is now known as beach
[07:08:14] *** ChanServ sets mode: +o beach
[07:10:18] *** beach sets mode: -o beach
[07:27:32] <beach> copec: Your conclusion that "object identity as a placeholder for lexical scope" seems a bit hasty.  For one thing, storing the function, the value, and the plist in the symbol object is but one possible implementation.
[07:27:45] <beach> copec: And that implementation has many problems.
[07:28:31] <beach> copec: For example, storing the current symbol value in the symbol works only if you are using shallow binding and you have a single-threaded system.
[07:29:20] <beach> copec: And storing the function there without storing the SETF function, the macro function, the method combination, the type expander, etc. seems strange.
[07:30:26] <beach> copec: Furthermore, you mentioned "lexical scope".  For that, the symbol does not play a role at all.  The compiler turns references to variables into references to stack locations and registers.  And the symbol is gone at run time.  Typically, at least. 
[07:31:38] <beach> copec: I don't think there is another name for "mixin".  There is nothing special about mixins from the point of view of the language.  They are just classes that are not meant to be directly instantiated. 
[07:35:16] <beach> I wish the standard had not given such a close association between symbols and the functions SYMBOL-VALUE, SYMBOL-FUNCTION, and SYMBOL-PLIST.  To me, those are functions that query the environment.  It is just that most Common Lisp implementations have a single global environments spread out all over the place.  Some of it stored in symbol objects.
[07:38:48] <beach> So SICL does not store the value and the function in the symbol object.  Only the name and the package.  
[07:40:16] <lisp123> beach: Perhaps it was for backward compatibility at the time? I read Lisp 1 vs Lisp 2 was decided on that point
[07:40:52] <beach> It was indeed for backward compatibility, but not related to lisp 1/2. 
[07:41:12] <beach> The standard does say that the use of "cell" is traditional.
[07:41:48] <beach> At the time, all implementations were single threaded, and shallow binding was a simple and efficient implementation then.
[07:44:24] <beach> With multi-threading, you can't implement shallow binding this way. Only the global value of a special variable is shared between threads.  So each thread must have a "value cell" holding the current value.
[07:45:45] <lisp123> That makes sense
[07:45:53] <beach> I worked out the general technique for doing this in SBCL, and discussed it in detail with Dan Barlow at the "Libre Software Meeting" in Bordeaux, perhaps 2001 or so, and he then implemented it.
[07:46:07] <lisp123> Wow
[07:46:32] <lisp123> This is the origins to the famous "boredeaux threads" library?
[07:46:32] <beach> I think it is still done this way in SBCL.
[07:46:45] <beach> Of course.  Dan Barlow wrote that one too.
[07:47:31] <lisp123> Nice. Its great to see some of these highly standardized libraries filling the gaps to make CL modern
[07:47:37] <lisp123> named-readtables being another
[07:47:58] <lisp123> Otherwise the language probably would stay a relic (which would be unfortunate)
[07:48:13] <lisp123> become a relic*
[07:48:22] <beach> Bordeaux threads does not provide any functionality by itself.  It is just a compatibility layer.
[07:49:21] <lisp123> I see
[07:50:25] <beach> Well, we are lucky to have a language to which new syntax can be added without the need to revise the standard.  So it will never become a relic in that sense.  A traditional language without a committee to evolve it would be in big trouble.
[07:51:49] <lisp123> Yes, but its the good work of yourselves and others in the community that keep it both fresh / cutting-edge and also stable
[07:52:28] <lisp123> If SBCL never fixed the portability issues of CMUCL, I probably would never have learnt Lisp. And others wouldn't have if it didn't have proper multi threading
[07:53:50] <beach> It is nice of you to say so, but I am afraid I have very little to do with that.  But, yes, lots of hard-working people maintaining SBCL and other implementations. 
[07:54:53] <beach> My own work is pretty "selfish".  I do research, come up with new techniques, write papers, and implement those techniques in SICL, which is still useless to the community. 
[07:55:13] <lisp123> Eclector already has many users :)
[07:56:04] <beach> Fair enough.  But that's thanks to scymtym.  I just came up with the embryonic implementation for SICL.  He turned it into a great library.
[07:56:17] <lisp123> I guess somebody has to do the research, others have to do the implementation, others have to use
[07:56:37] <lisp123> So thank you for all the ideas :)
[07:57:19] <lisp123> I've started justifying my bad code by saying I'm an application programmer now :D Can't be perfect all the time, it makes the process a bit slow so I'm trying to keep a balance between good code and results
[07:57:24] <beach> That would be a great division of labor.  Unfortunately, there are not enough people around who are both available and qualified to take on much of the implementation work. :(
[07:58:03] <lisp123> I was going to ask if its worth getting sponsorship for SICL and associated projects
[07:58:27] <beach> Not at this point.  Money is not the problem.  Available manpower is.
[08:00:01] <lisp123> Yes, can imagine its hard to get very qualified manpower that is required
[08:02:06] <beach> Perhaps a better idea than paying someone would be to take on a relative newbie and for me to act as a mentor.  I do have extensive experience as a teacher, so that would be one possibility. 
[08:02:53] <beach> But most newbies seem busy with CFFI, web stuff, or gaming. 
[08:04:25] <lisp123> Yes, I would say so. Perhaps those studying language design or compilers at university may be the target market
[08:05:10] <lisp123> But its a tricky affair, they would likely be quite young and would have to sustain a passion for the field
[08:05:25] <beach> Well, it would have to be someone who has already decided to learn Common Lisp.  Otherwise, as we know, there is huge resistance.
[08:06:13] <beach> So #commonlisp or #clschool participants is the only option I can think of. 
[08:07:50] <beach> But yes, you are right.  That would be a significant investment on my part, so it had better pay off.
[08:09:31] <lisp123> Yes indeed. And unfortunately, the thought of doing exciting work can sound exciting, but it takes a different temperament to preserve and actually do it. So the universe of appropriate candidates gets smaller after that
[08:10:08] <lisp123> Which is where a small stipend may help motivate them, like an internship they can put on their resume
[08:11:06] <beach> Research has consistently demonstrated that monetary rewards does not motivate.  It's the other way around actually.
[08:11:31] <lisp123> I see, understood
[08:11:46] <beach> When people are rewarded with higher salaries, their productivity decreases. 
[08:13:31] <edgar-rft> I was rewarded with the lowest salary and it didn't help neither.
[08:13:53] <beach> I can believe that.
[08:15:07] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[08:21:24] <lisp123> beach: I can help with documentation at some point, just let me know if there is any guide or other stuff you want done
[08:21:42] <beach> I'll keep that in mind.  Thank you.
[08:21:48] <lisp123> Welcome
[08:25:35] *** Joins: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com)
[08:30:52] *** Quits: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com) (Ping timeout: 268 seconds)
[09:14:38] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 260 seconds)
[09:38:15] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:24:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[10:27:18] *** Joins: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com)
[10:32:06] *** Quits: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com) (Ping timeout: 260 seconds)
[10:32:57] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[10:52:19] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:22:55] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[11:24:07] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[11:35:28] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:39:15] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:29:00] *** Joins: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com)
[12:33:50] *** Quits: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com) (Ping timeout: 268 seconds)
[13:05:48] <pjb> beach: salaries must not be rewards; they can still be high.
[13:14:31] <beach> Right.
[13:30:17] *** Joins: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com)
[13:35:06] *** Quits: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com) (Ping timeout: 260 seconds)
[14:03:40] *** Joins: random-nick (~random-ni@87.116.177.136)
[14:16:23] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[14:42:07] *** Joins: silasfox (~sbv@141.99.250.10)
[14:49:08] *** Quits: silasfox (~sbv@141.99.250.10) (Quit: WeeChat 3.3)
[15:00:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:31:36] *** Joins: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com)
[15:36:22] *** Quits: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com) (Ping timeout: 268 seconds)
[16:01:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[16:06:39] *** Joins: Psybur (~Psybur@mobile-166-170-30-165.mycingular.net)
[16:31:29] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[17:07:08] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[17:12:06] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[17:15:33] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[17:18:54] *** Joins: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com)
[17:23:40] *** Quits: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com) (Ping timeout: 268 seconds)
[17:40:03] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[17:52:38] <copec> Yeah, I was thinking that the association of storing the function, value, and plist in the symbol object was something inherited from previous lisps, since lexical variables was something introduced in scheme
[17:53:17] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[17:53:52] <beach> Sure, but there is still the distinction between lexical and bindings and global/special bindings.  That Common Lisp HyperSpec page talks about the latter in either case. 
[17:54:11] <copec> That the implementation could have something akin to a literal struct for those global values
[17:55:03] <beach> So even in an early conforming Common Lisp implementation with lexical variables by default, the way they mention it was a common way of doing it.
[17:55:37] <beach> And I think even today, most implementations store the SYMBOL-FUNCTION in the symbol, for some reason I can't really understand.
[17:55:46] <beach> Oh, wait, I can understand that.
[17:56:02] <beach> They use the symbol as an indirection.
[17:56:29] <copec> Yeah, I understand (or at least I think I do) the distinction between global/special and lexical
[17:56:39] <copec> in terms of how it is practically handled
[17:57:17] <beach> So that when the compiler sees (f ...), it generates code to do the equivalent of (FUNCALL (SYMBOL-FUNCTION 'F) ...) and SYMBOL-FUNCTION is really fast in such an implementation. 
[17:59:57] <copec> When I said "object identity as a placeholder" I'm imagining that the symbol is acting as a pin in that position that can be reliably referenced
[18:00:18] <copec> Not that it's object is directly storing a variable
[18:00:19] <beach> Correct.  And that's what I mean by the "indirection" too.
[18:01:01] <beach> Oh, but it typically is storing the SYMBOL-FUNCTION.
[18:01:45] <beach> Whereas in SICL, by default, when the compiler sees (F ...), by default, it results in the equivalent of (FUNCALL (CAR (LOAD-TIME-VALUE (FUNCTION-CELL 'F (GLOBAL-ENVIRONMENT)))) ...) or something like that.
[18:02:32] <beach> So at load time, it fetches a CONS cell that holds (or will hold) the function in its CAR.  And it fetches it from the environment into which the code is loaded.
[18:03:12] <White_Flame> copec: the model of symbols holding all it does is basically that of a global database for your program
[18:03:54] <White_Flame> lots of olde timey lisp basically had symbol-plists for that purpose, and it was actually pretty fast
[18:04:00] <beach> And that "global database" is known as the "null lexical environment".
[18:04:15] <White_Flame> instead of hashtable->key->value, it's symbol/key->table-name->value
[18:04:24] <White_Flame> where the table names are the "keys" to the symbol-plist
[18:04:28] <White_Flame> yep
[18:04:39] <White_Flame> but even as a literal user database
[18:05:07] <beach> But in most Common Lisp implementations, the database is only partially implemented that way. 
[18:05:32] <beach> The method combination associated with a symbol is usually not stored in the symbol.
[18:05:33] <White_Flame> so if you had the table "population", in the symbol USA's plist, there'd be (:population 330000000)
[18:05:40] <beach> Nor is the type defined by DEFTYPE.
[18:05:54] <White_Flame> and the plist search would only have a small number of tables stored in it, keeping the search cost down
[18:06:09] <White_Flame> beach: that's the internal/implementation database, not the user database
[18:06:21] <beach> Right.
[18:06:51] <beach> I was deliberately ignoring your rant about the user database. :)
[18:07:06] <White_Flame> heh
[18:07:25] <White_Flame> just talking abotu the original question, about why/how symbols were used in old programs
[18:07:36] <beach> But yes, symbol plists used to be common or storing information. 
[18:11:54] *** Joins: trocado (~trocado@88.133.60.94.rev.vodafone.pt)
[18:28:09] <copec> I was all really list processing
[18:29:19] <copec> *It
[18:31:26] <copec> What was specified in the original 1958 lisp 
[18:32:50] * copec search => http://jmc.stanford.edu/articles/lisp/lisp.pdf
[18:35:19] <copec> Something I've wanted to look at is the styles used when there wasn't lexical scope
[18:36:11] <copec> Does it just lead to lots of unique symbol names, and manipulating symbol names
[18:39:55] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[18:43:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:46:46] <beach> It doesn't change much.  Most functions refer only to their arguments and to variables they introduce by LET, so that works the same whether you have lexical or dynamic scope.
[18:48:59] <White_Flame> copec: biggest difference IMO is the lack of hashtables, so it's all about using global variables in unique/old-style ways
[18:49:33] <White_Flame> and with alists/plists, about keeping them short for performance
[18:50:20] <beach> Oh, I thought copec was referring to just the use of variables, and not to the environment.
[18:53:14] <copec> I was referring to the use of variables, but also generally inquisitive
[18:53:37] <beach> Then, what I said.  It was nothing one had to think about most of the time.
[18:59:30] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[19:00:03] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[19:17:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:18:59] *** Quits: trocado (~trocado@88.133.60.94.rev.vodafone.pt) (Ping timeout: 264 seconds)
[19:20:37] *** Joins: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com)
[19:25:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:25:35] *** Quits: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com) (Ping timeout: 264 seconds)
[19:35:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[19:37:21] *** Joins: aeth (~aeth@user/aeth)
[19:38:43] *** Quits: random-nick (~random-ni@87.116.177.136) (Ping timeout: 268 seconds)
[19:39:34] <copec> Okay, way late on the bandwagon, but what auto pairing setup do people use for parentheses, braces, and quotes?
[19:39:40] <copec> in emacs
[19:41:06] <copec> I've basically been using default emacs with Lisp mode and the REPL mode in slime
[19:41:26] * copec reading https://www.emacswiki.org/emacs/AutoPairs
[19:46:05] <White_Flame> I use paredit
[19:46:33] <White_Flame> all of them do take a bit of getting used to
[19:48:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:52:16] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:53:05] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:58:27] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:02:07] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[20:05:13] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[20:06:57] *** Joins: aeth (~aeth@user/aeth)
[20:17:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:28:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:33:36] <Kabriel> I use smartparens.
[20:45:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:50:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:58:20] <edgar-rft> I had smartparents but it didn't help much.
[21:11:18] <White_Flame> that's why you're still in #clschool? ;)
[21:22:20] *** Joins: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com)
[21:27:22] *** Quits: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com) (Ping timeout: 260 seconds)
[21:28:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:33:00] <edgar-rft> White_Flame: AFAIK beach is also still at school :-)
[21:33:50] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[21:35:34] *** Joins: aeth (~aeth@user/aeth)
[21:39:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:45:13] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[21:45:21] *** Joins: Oladon (~olad@98.43.81.226)
[21:45:29] <seok> https://pastebin.com/EKXsGgk6
[21:45:44] <seok> is this not how you send a string over socket?
[21:46:01] <seok> using usocket
[21:56:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:04:08] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[22:07:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:09:46] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[22:11:10] <White_Flame> seok: you're rending a fixed number of bytes over the socket
[22:11:12] <White_Flame> *sending
[22:11:26] <seok> oh
[22:11:36] <seok> does the length have to be set?
[22:11:43] <White_Flame> and if string-to-octets is generating less than a 1024 byte result, I'd think that'd probably raise an error
[22:12:13] <White_Flame> also, socket-send is for UDP
[22:12:19] <White_Flame> if you're trying to use TCP
[22:12:53] <White_Flame> use (socket-stream socket) to access the actual stream for TCP
[22:19:03] <seok> something like this?
[22:19:05] <seok> https://pastebin.com/583x7W0k
[22:23:12] <seok> oh that works
[22:23:17] <seok> thank you !
[22:24:23] <seok> how do I access the read stream for this socket?
[22:24:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:27:37] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[22:34:10] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:37:33] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[22:38:44] *** Joins: aeth (~aeth@user/aeth)
[22:52:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:52:01] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[23:02:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:15:52] *** Joins: aeth_ (~aeth@user/aeth)
[23:16:15] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[23:16:20] *** aeth_ is now known as aeth
[23:24:01] *** Joins: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com)
[23:28:42] *** Quits: Jacobis9000 (~jonaholuf@host109-150-58-122.range109-150.btcentralplus.com) (Ping timeout: 260 seconds)
[23:33:47] <pjb> seok: it's the same, streams can be bidirectional.
[23:35:57] <pjb> seok: note that with with-client-socket you define two variables one socket, and one stream, that isbound to (socket-stream socket), so you can use it!
[23:37:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:40:44] <pjb> seok: (usocket:with-client-socket (socket stream "www.google.com" 80) (format stream "GET /~C~C~C~C" (code-char 13) (code-char 10) (code-char 13) (code-char 10)) (finish-output stream) (read-line stream)) #| --> "HTTP/1.0 200 OK
[23:40:45] <pjb> " ; nil |# 
[23:46:10] <seok> oh right,
[23:47:19] <seok> is http get request just a tcp request starting with "GET"?
[23:47:35] <seok> I didn't know that
[23:48:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:52:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[23:52:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:53:52] *** Joins: aeth (~aeth@user/aeth)
[23:54:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
