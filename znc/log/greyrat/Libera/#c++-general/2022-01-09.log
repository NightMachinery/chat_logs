[00:02:28] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[00:03:41] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[00:15:47] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[00:20:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[00:24:13] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[00:25:42] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:3fb6:23a4:a917:27c7) (Quit: Client closed)
[00:33:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:34:53] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (Remote host closed the connection)
[00:36:05] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[00:37:16] *** Joins: MarcusRoman (~Admin@37.120.232.44)
[00:40:33] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[00:40:36] <LordKalma> PJBoy, https://twitter.com/TartanLlama/status/1479912461310517254/photo/1
[00:41:09] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[00:41:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:47:38] <PJBoy> glad he's taking it with good humour
[00:48:05] <PJBoy> unless there was a joke I missed
[01:05:46] *** Quits: raekye (~raekye@creatifcubed.com) (Ping timeout: 245 seconds)
[01:05:57] *** Joins: raekye (~raekye@creatifcubed.com)
[01:06:20] *** Quits: dblsaiko (~saiko@crispy.dblsaiko.net) (Ping timeout: 252 seconds)
[01:06:39] *** Joins: dblsaiko (~saiko@crispy.dblsaiko.net)
[01:11:41] *** Quits: ferdna (~ferdna@user/ferdna) (Remote host closed the connection)
[01:15:29] *** Quits: paul424 (~tom@ip-31-0-124-61.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[01:16:47] *** Quits: greenbagels (~gb@user/greenbagels) (Ping timeout: 252 seconds)
[01:17:28] *** Joins: greenbagels (~gb@user/greenbagels)
[01:18:45] *** Quits: purplex (~purplex@user/purplex) (Ping timeout: 250 seconds)
[01:20:31] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[01:21:32] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[01:23:29] *** Joins: purplex (~purplex@user/purplex)
[01:25:14] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:27:30] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Quit: leaving)
[01:27:40] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[01:27:51] *** Quits: Latexi95 (late@banhammer.fi) (Ping timeout: 250 seconds)
[01:28:01] *** Joins: Latexi95 (late@banhammer.fi)
[01:35:29] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:40:42] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:49] *** ChanServ sets mode: +v npaperbot
[01:45:47] *** Quits: chozorho (~chozorho@2601:146:300:c30::d5ec) (Quit: WeeChat 3.0)
[01:47:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:50:38] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[01:58:35] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:02:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[02:04:49] <Alipha> xkoncek: use libsodium instead of openssl :-) for diffie-hellman, https://libsodium.gitbook.io/doc/key_exchange
[02:06:13] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[02:06:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[02:06:37] <Alipha> Also, use a higher-level protocol like TLS :-/
[02:06:51] <Alipha> (in which case, back to openssl? heh)
[02:07:13] <MarcusRoman> what is a good starting point for modern C++
[02:07:33] <cbreak> where do you start from?
[02:07:43] <MarcusRoman> Java...
[02:09:43] <Alipha> !give MarcusRoman books
[02:09:44] <nolyc> MarcusRoman: A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[02:10:46] <Alipha> MarcusRoman: I'd still recommend one of the beginner books. Problem with intermediate books is that the author has to make assumptions about what you already know, which will never be right. Just get a beginner book and skim the basics
[02:11:31] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[02:12:10] <MarcusRoman> what C++ version would i want to use nowadays
[02:12:14] <MarcusRoman> there's so many
[02:12:20] <ville> MarcusRoman: by understanding that the word "modern" is completely meaningless and only used by snakeoil salesmen to peddle whatever garbage they happen to be trying to pass of as programming at the time
[02:12:42] <MarcusRoman> by modern i mean post C++11
[02:12:45] <johnny> MarcusRoman, it really depends on which compilers you want to support building with
[02:13:22] <johnny> otherwise, use c++17 or above
[02:13:27] <MarcusRoman> johnny: is there compatibility issues with newer versions
[02:13:42] <johnny> not usually. it's more with older versions
[02:14:09] <johnny> of course that depends on the libraries you use as well.
[02:14:25] <MarcusRoman> i try to keep my libraries to a minimum
[02:14:50] <johnny> i was building my embedded os code with c++17 and then they deprecated something, so i ended up with warnings about automatic enum casting and register() usage
[02:15:04] <johnny> after i tried building with C++20. it still built tho and ran
[02:15:56] <johnny> most of it is considering which environments you want to allow your software to be built on
[02:16:34] <MarcusRoman> Linux, MacOS, and Windows
[02:16:41] <johnny> and which versions of thoe
[02:16:58] <MarcusRoman> windows 10 is all i know
[02:17:05] <johnny> if you're building against the clang inluded with apple vs homebew installed clang or gcc you're gonna have a different experience
[02:17:54] <MarcusRoman> in java everything is handed to you
[02:18:11] <johnny> and in C, it's changed so little that it won't really make a difference
[02:18:21] <johnny> even though not everything is handed to yo
[02:18:40] <ville> plenty's changed in c
[02:19:22] <johnny> i haven't seen the amount of struggles in the mostly C software world of unix deps that i have in C++
[02:19:26] <ville> MarcusRoman: perhaps surprisingly wikipedia articles for the various c++ version have nice succinct lists of the main features in each. read up on whatever looks interesting
[02:19:42] <Alipha> MarcusRoman: i would simply recommend getting a book that covers at least c++11. if you get a decent one that also covers 14, 17, or 20, great, but it's not too hard to learn the new features of 14+ from online resources, once you know c++11
[02:20:40] <johnny> sure, but this is about what software one chooses to set as -std right?  you can keep writing C++11 only code with a higher standard . but then it might not build on some older compilers that someone might want to support
[02:20:47] <cbreak> johnny: C has changed so much that many are still stuck at 99 or so
[02:21:13] <johnny> that's mostly between c99 and 11 then isn't it?
[02:21:21] <ville> johnny: same for c. you can't build c99 with c90 compiler
[02:21:36] <johnny> i can imagine. that's why i'm tellin MarcusRoman
[02:22:50] <johnny> MarcusRoman wants to know why there are so many, and thus what to choose for their own projects
[02:23:15] <johnny> and that this a reason one might not choose the highest number
[02:23:36] <johnny> one must make a pretty informed decision
[02:24:18] <johnny> even if that highest number includes a feature they think sound good, it might not be worth choosing if it involves too many hoops
[02:24:50] <johnny> but they also siad they would prfer to keep deps at a minimum, so there's a balance there indeed
[02:26:20] <johnny> MarcusRoman, lots of folks in the C++ world tend to rely on a library like boost to be able to user newerish features on older compilers  (or when the version in the standard isn't as good as the one available elsewhere)
[02:27:37] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (Quit: Quitting)
[02:28:32] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[02:30:18] <johnny> i can't speak to an equivalent of java since i've never written it seriously, but maybe some folks have equivalent analogies
[02:30:59] <johnny> s/of/in/
[02:33:38] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Remote host closed the connection)
[02:35:41] <MarcusRoman> johnny: probably apache commons
[02:36:16] <johnny> MarcusRoman, so do you want me to expand on any of that? did it make sense? do you have any other questions?
[02:36:52] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[02:40:08] <xkoncek> some parts of apache commons are actually ancient
[02:41:26] <MarcusRoman> let's not mention log4j
[02:41:36] <ville> xkoncek: and boost still supports vc6
[02:41:53] <MarcusRoman> johnny: no i think i understand
[02:42:58] <MarcusRoman> but i am worried about UB
[02:43:10] <ville> MarcusRoman: don't worry. you can't avoid it
[02:43:12] <johnny> that's your job as a C++ programmer :)
[02:43:23] <johnny> but also what ville said
[02:43:25] <MarcusRoman> pointers seem like a double edged sword
[02:43:51] <johnny> they are indeed. luckily c++ has nicer pointer wrappers like unique_ptr and shared_ptr to ease the pain
[02:44:12] <xkoncek> unique_ptr.release()
[02:44:47] <ville> ...and you probably don't want to use them. they encourage singular allocations happening all over your code
[02:45:16] <MarcusRoman> so raw pointers then
[02:45:19] <johnny> i guess that depends on which code you write in which that matters. i know it's not mine
[02:45:44] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Remote host closed the connection)
[02:46:18] <johnny> MarcusRoman, that's something you really need to read about to understand.
[02:46:41] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[02:46:42] <johnny> especially if you've spent more time in languages like java more than these kinds
[02:46:48] <MarcusRoman> i did read K&R before
[02:46:57] <johnny> well you're above most folks who start then
[02:47:43] <ville> MarcusRoman: std::unique_ptr is a reasonable utility to use. if you find your self reaching for std::shared_ptr then you've lost the plot how your program works
[02:47:46] <johnny> some of it can be helped by tooling like clang-tidy, using the appropriate compiler flags (like -Wall and such), and address sanitozers
[02:47:55] <johnny> yeah.. i've only used unique_ptr myself
[02:48:06] <johnny> somebody put tons of shared_ptr in this program that i haven't untangled
[02:48:13] <xkoncek> unique_ptr also works well with C libs
[02:48:22] <xkoncek> with a custom deleter
[02:49:47] <ville> !give MarcusRoman -Wall
[02:49:48] <nolyc> MarcusRoman: -Wall is is only -Wsome; it leaves out many warnings. To really get a lot of warnings, you should use '-Wall -Wextra -Wpedantic -Wconversion -std=c++17 -O2'
[02:50:02] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 240 seconds)
[02:50:11] <MarcusRoman> what is -O
[02:50:26] <xkoncek> they could have omitted those optimizations and standard
[02:50:33] <ville> optimization level. some dead-code analysis relies on it
[02:50:40] <ville> xkoncek: see above
[02:50:52] <MarcusRoman> is the compiler always smarter than us
[02:50:57] <johnny> in the embedded world people often build with -Os
[02:51:01] <ville> MarcusRoman: hardly
[02:51:07] <xkoncek> from my experience you will encounter different categories of errors
[02:51:20] <johnny> the compiler is smarter than writing raw assembly most of the time, but it can't really infer what you mean about code
[02:51:31] <xkoncek> dont forget about sanitizers and libstdc++ debugs and assertions
[02:51:33] <ville> xkoncek: also you want -std to turn off compiler-specific language extensions, so you don't all victim of them due to ignorance
[02:51:43] <ville> fall
[02:51:58] <xkoncek> -fsanitize=undefined,unreachable,bounds,integer-divide-by-zero
[02:52:09] <xkoncek> -D_GLIBCXX_ASSERTIONS -D_GLIBCXX_DEBUG
[02:52:21] <xkoncek> then you may want to use valgrind
[02:52:27] <ville> MarcusRoman: in addition to those flags you want to lear how to tell your buid system how to make a sanitizer build
[02:52:47] <johnny> although that's linux specific there, and maybe also gcc specific. those args won't work with msvc will they
[02:52:49] <RandomReader> MarcusRoman - K&R is nice on its own but isn't terribly relevant here, as C and C++ are different languages with different core object models .. I would recommend approaching C++ as a new language, try not to apply C ideas to it
[02:53:03] <ville> MarcusRoman: sanitizers are fairly good at catching various kinds of errors you might be "affraid" of based on your ub comment from earlier
[02:53:04] <xkoncek> sometimes sanitizers will catch it, other times, O2 will omit some UB and cause you a segfault
[02:53:04] <johnny> i know clang tries to have some compat with gcc args to
[02:53:15] <RandomReader> start from one of the beginning books Alipha linked to, the rest of this stuff will follow from "best practices" you can pick up as you go
[02:53:50] <xkoncek> beware -fsanitize=address + valgrind <- DO NOT COMBINE THESE TWO
[02:53:56] <RandomReader> the pile of stuff everyone else just mentioned is specific to the compiler and environment you're using, it's not universal
[02:54:13] <RandomReader> (meaning it will follow from what you pick in the beginning, it's not something you need to care about right now)
[02:54:22] <ville> MarcusRoman: a reasonabe starter sanitizer build is probably: -fsanitize=address,leak,undefined
[02:54:42] <MarcusRoman> does that warn me at compile time about leaks and ub
[02:54:45] <xkoncek> sanitizers do not slow down your code as much
[02:54:49] <ville> MarcusRoman: runtime
[02:55:02] <MarcusRoman> how  does that work
[02:55:12] <ville> MarcusRoman: they insert crap in the generated binary
[02:55:24] <xkoncek> whereas valgrind is able to fairly well detect the source line where a leak comes from
[02:55:26] <MarcusRoman> well how big is that crap
[02:55:38] <xkoncek> like 500 % slowdown
[02:55:47] <ville> MarcusRoman: doesn't matter. you do sanitizer builds for your self. you don't give them out
[02:55:53] <ville> (as a rule of thumb)
[02:55:59] <MarcusRoman> Ok
[02:56:05] <xkoncek> also
[02:56:06] <MarcusRoman> will it print something to console if it leaks
[02:56:33] <ville> MarcusRoman: yes that's the main way the sanitizer builds report various errors
[02:56:34] <xkoncek> some tools give better runtime diagnostics when you compile in a adebug build (-g)
[02:57:26] <xkoncek> MarcusRoman yes, when the program ends
[02:57:36] <xkoncek> at least valgrind
[02:57:48] <xkoncek> sanitizers only print when something goes wrong
[02:58:07] <RandomReader> for learning, another thing I'd suggest is a long-term mindset: learning C++ and the surrounding ecosystem is a many-year process for most people, so try not to frustrate yourself by expecting it to be a short experience
[02:58:31] <xkoncek> Alipha my distro does not package a mingw variant of libsodium :(
[02:58:47] <RandomReader> there's a lot of details, which tends to mean complexity, which takes time for anyone to come to terms with
[02:59:11] <xkoncek> c++ is much also about history of c and c++
[02:59:16] <johnny> MarcusRoman, you haven't yet said why you're learning C++ in the first place and what programs you want to make
[03:01:25] <MarcusRoman> a TCP/IP stack
[03:04:29] *** Joins: chozorho (~chozorho@2601:146:300:c30::d5ec)
[03:05:17] <ville> well that'll certainly be interesting
[03:05:24] *** Quits: chozorho (~chozorho@2601:146:300:c30::d5ec) (Client Quit)
[03:05:45] *** Joins: chozorho (~chozorho@2601:146:300:c30::d5ec)
[03:07:16] <ville> earlier i think you said linux, macos and windows. not sure how you plan to pull that off in very portable manner
[03:07:41] <MarcusRoman> well after this network project i would like to get ahead on math and opengl to make a game for fun
[03:08:02] <MarcusRoman> that is what would target the 3 platforms
[03:08:08] <Alipha> LordKalma: the comments on that twitter status are great (yes, i'm referencing your message from 2 hours and 28 minutes ago)
[03:08:15] <ville> that's certainly doable
[03:12:21] <xkoncek> MarcusRoman make sure to work with opengl 4.5
[03:13:08] <MarcusRoman> why not 1.1
[03:13:12] <MarcusRoman> it looks way easier
[03:13:17] <xkoncek> nononono
[03:13:52] <MarcusRoman> i'm sure modern computers  can handle the CPU doing all the math
[03:14:05] <xkoncek> its not about that
[03:14:21] <xkoncek> every opengl call is somewhat expensive
[03:14:40] <MarcusRoman> cutback on calls?
[03:14:53] <xkoncek> with opengl 1.X you make opengl calls *for each passed vertex*
[03:15:08] <MarcusRoman> yes
[03:15:09] <xkoncek> with never ones you just send arrays
[03:15:10] <MarcusRoman> i've used it before
[03:15:19] <packet_lozenge> didn't know about the -fsanitize build flag. i've only ever used valgrind for weeding out memory leaks before
[03:15:39] <packet_lozenge> i actually didn't know about -Wall either. any other tips like these?
[03:16:47] <kalven> -Wextra
[03:16:54] <xkoncek> i will add a comment that from my experience, thread sanitizers tend to have many false positives
[03:17:17] <MarcusRoman> why do game devs usually use DirectX over OpenGL
[03:17:38] <xkoncek> game dev is a weird industry
[03:18:16] <xkoncek> but modern ones tend to prefer vulkan anyway
[03:18:59] <packet_lozenge> er, I meant I didn't know the fact that the bot gave about -Wall above. I knew about the flag but I didn't know there were more flags to enable verbose warnings
[03:19:29] <xkoncek> however, vulkan is a bit too much for a single hobbyist
[03:20:13] <xkoncek> packet_lozenge https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html, i rarely use more than -Wall -Wextra
[03:22:09] <xkoncek> in some cases, -Wpedantic may bite you (zero-sized array members)
[03:23:08] <xkoncek> -Wshadow
[03:23:53] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[03:27:36] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[03:27:58] <RandomReader> my usual for clang and gcc is -Wall -Wextra -pedantic-errors   (which is -pedantic but errors instead of warns)
[03:28:19] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[03:28:19] <RandomReader> along with -std=c++whatever
[03:28:33] <RandomReader> -pedantic is required to disable the compiler extensions, otherwise it's just silently non-standard
[03:29:24] <RandomReader> for gcc I also use at least -O2 when practical, since the optimizer also does additional analysis, which then causes it to discover more things to warn about
[03:33:01] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 240 seconds)
[03:36:13] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:47:fa74:d54f:1100) (Ping timeout: 240 seconds)
[03:37:07] <Guest19> hello. If std::string x = "asdf"; can work , why can't https://wandbox.org/permlink/Wi1cZoYGdteaUkTC work?
[03:50:54] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[03:55:39] <johnny> isn't directx also an easier api to just use?
[03:56:45] <johnny> i haven't looked at game engines, but maybe they abstract enough on top that they are easier to use than going with a specific api ?
[03:57:05] <johnny> seemslike more folks are using prebuilt engines these days to start with
[04:00:49] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[04:00:55] <RandomReader> Guest19 - the copy-initialization is already a user-defined conversion, there can't be a second for the constructor call
[04:01:11] <RandomReader> foo f{"Asdf"};   is ok because that's direct initialization
[04:03:46] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[04:05:21] <RandomReader> if that's syntax you want to enable, a possible approach would be to add a constructor template that accepts any argument that is not the same type but is convertible to T
[04:08:50] *** Quits: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com) (Quit: WeeChat 3.4)
[04:09:47] <CarloWood> Yet, https://en.cppreference.com/w/cpp/language/copy_initialization says "If T is a class type, and the cv-unqualified version of the type of other is not T or derived from T, or [...], user-defined conversion sequences that can convert from the type of other to T [...] are examined and the best one is selected through overload resolution."
[04:10:05] *** Joins: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com)
[04:11:02] <CarloWood> So - it will use user-defined conversion sequences
[04:17:20] *** Joins: HvszrStykp (~X@81.171.62.86)
[04:17:41] <RandomReader> but there is no conversion from other to T here
[04:18:48] <CarloWood> Not directly no... So it never tries this in two steps convert A to C because A can be converted B and B can be converted to C?
[04:18:50] <RandomReader> only conversions from other to string, and string to T
[04:19:08] <RandomReader> without the template, it's the same as this: https://godbolt.org/z/7fq97Gz3T
[04:19:32] <RandomReader> and falls under: https://en.cppreference.com/w/cpp/language/implicit_conversion#Order_of_the_conversions
[04:20:17] <RandomReader> (if it actually *did* try to chain, we'd never be able to write useful code, since the overload set would be unbounded and ambiguous for damn near everything)
[04:21:49] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[04:23:57] *** Joins: lxsameer (lxsameer@user/lxsameer)
[04:24:31] <CarloWood> wth does this mean...
[04:24:35] <CarloWood> TestApplication.cxx:60:19: error: use of overloaded operator '=' is ambiguous (with operand types 'vulkan::ClearValue' and 'void')
[04:24:35] <CarloWood>     depth_stencil = { 1.f, 0xffffffff };
[04:25:25] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Ping timeout: 240 seconds)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:26:15] <RandomReader> interesting, I'd try to make sense of it with the context of the surrounding notes
[04:27:04] <CarloWood> I think the error is useless. It doesn't tell me anything useful :/. And void? Where?
[04:27:25] <CarloWood> Actually, you are right - there is more.
[04:27:35] <CarloWood> two candidates
[04:27:44] <CarloWood> ClearValue& operator=(vk::ClearDepthStencilValue const& value)
[04:27:51] <CarloWood> ClearValue& operator=(std::array<float, 4> value)
[04:28:14] <CarloWood> If it thinks that I mean an array of four floats then that really sucks :/
[04:28:36] <RandomReader> that suggests "void" is a messaging bug, it should really read "brace-init-list" or something
[04:29:05] <CarloWood> ok, that would make more sense.
[04:29:11] *** Joins: Figworm (~inoor@user/figworm)
[04:29:45] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[04:29:47] <CarloWood> ClearDepthStencilValue is a simple struct { float, uint32_t }; I think.
[04:29:57] <CarloWood> lemme geordify it.
[04:30:38] <RandomReader> I think that would make them ambiguous, since they could both be initialized from that expression
[04:31:07] <RandomReader> with being able to leave out members of aggregates to get zero-init
[04:32:16] <CarloWood>  { B b; b = { 3.14, 42}; } struct A { float f; uint32_t n; }; struct B { B& operator=(array<float, 4> a); B& operator=(A a); };
[04:32:16] <geordi> error: ambiguous overload for 'operator=' in 'b = {3.1400000000000001e+0, 42}' (operand types are 'B' and '<brace-enclosed initializer list>')
[04:32:40] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:32:57] <CarloWood> Why is this ambiguous?
[04:33:30] <CarloWood> even...
[04:33:39] <CarloWood> geordi: replace uint32_t with int
[04:33:39] <geordi> Same error.
[04:34:23] <RandomReader> { array<float, 4> a1 = { 3.14, 42};   A a2 = { 3.14, 42}; }   struct A { float f; uint32_t n; };   // both types can be initialized from the same expression
[04:34:24] <geordi>  
[04:34:41] <RandomReader> (and neither is a better match)
[04:34:45] <CarloWood> I'd say that constructing an A from that is a better match than constructing an array<float, 4>! That has to invent two floats, convert an int to a float and construct an array
[04:35:44] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:35:50] <RandomReader> it's the same as   float f[4] = {3.14, 42};
[04:36:14] <CarloWood> It's a C++ fail :?
[04:36:16] <CarloWood> :/
[04:36:24] <RandomReader> fail how?
[04:36:34] <RandomReader> there's no more work for either of them
[04:37:00] <CarloWood> This stops me from typing ... = { the data };  I'll HAVE to explicitly type in the type that I want.
[04:37:25] <RandomReader> well, yes, but you made it assignable from two types that look awfully similar from scratch :P
[04:37:38] <RandomReader> I wouldn't call this a C++ issue, it's a design issue
[04:37:54] <CarloWood> No, my { } has two arguments, not four.
[04:38:08] <CarloWood> That should take precendence
[04:38:17] <RandomReader> you specified aggregates, which do not require a specific number of arguments
[04:38:21] <CarloWood> precedence too
[04:38:26] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[04:38:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Quit: varioust)
[04:38:30] <RandomReader> that could be debatable I suppose, but that ship sailed a long time ago with C
[04:38:50] <CarloWood> So, what is the solution?
[04:39:00] <RandomReader> personally I wouldn't use both types
[04:39:11] <CarloWood> ?
[04:39:26] <RandomReader> I wouldn't make that thing assignable from both an array and the aggregate struct
[04:39:30] <RandomReader> implicitly anyway
[04:39:53] <CarloWood> This thing can be assigned four floats, or a float and an int.  No way around that.  That's how it is.
[04:40:32] <CarloWood> So, I don't get your "I wouldn't use both types"
[04:41:06] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:41:22] <RandomReader> it's a variant?
[04:41:54] <CarloWood> It's wrapper around a Vulkan struct that uses horrible stuff. No variants.
[04:42:04] <RandomReader> I mean logically, in terms of an abstraction
[04:42:09] <CarloWood> yes
[04:42:21] <RandomReader> on the surface, that makes it look like it has an identity crisis, and has no idea what it's supposed to represent
[04:42:32] <RandomReader> and personally, I try to avoid that, since it's not any easier to use
[04:42:40] <RandomReader> other options, hmm...
[04:42:57] <RandomReader> if you're on C++20, I wonder if designated initializer syntax would disambiguate that
[04:42:59] <CarloWood> It is very simple: four arguments means it is a color, and one or two means it is a depth/stencial clear value.
[04:43:20] <CarloWood> stencil*
[04:43:22] <RandomReader> but otherwise, I'd have no problem specifying the type
[04:43:26] <RandomReader> and frankly I'd do that anyway
[04:44:16] <RandomReader> what else .. could use "set" functions instead of assignment
[04:45:11] <RandomReader> hm, I suppose you could replace both aggregates with non-aggregates, and then they'd match number of arguments
[04:45:33] <RandomReader> so add a constructor for one, and use a wrapper instead of std::array directly for the other
[04:45:53] <RandomReader> the wrapper alone might be enough in this particular case
[04:46:31] <RandomReader> (wrapper with a constructor taking 4 args I mean, so it's not an aggregate either)
[04:47:25] *** Quits: algae (~algernon@170.10.246.117) (Ping timeout: 240 seconds)
[04:47:28] <RandomReader> could make the assignment operators take args instead of those types
[04:47:42] <RandomReader> (probably not what you want to do for the rest of the code, but it'd work in this example)
[04:48:48] <RandomReader> ...oh, no, I was thinking of something else, that won't work for the operators
[04:50:27] <RandomReader> I think that's all I've got at the moment
[04:51:12] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[04:51:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[04:53:09] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[04:53:10] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[04:54:05] <CarloWood> I'll use the set() idea.
[04:55:46] *** Quits: Figworm (~inoor@user/figworm) (Quit: Figworm)
[04:55:56] <CarloWood> Although I think there could be a solution with a template for both that just counts the number of elements. It shouldn't start inventing floats then
[04:56:37] <RandomReader> I don't think there's a direct way to cover that logic, since there is no count of elements at the initial stage .. it's a syntactical expression, not a "thing" yet
[04:57:18] <RandomReader> the closest "thing" would be std::initializer_list, but that requires a single T, so you wouldn't be able to distinguish the float from the int by then
[04:57:51] <RandomReader> if you could do variadic arguments, then there's the size of the parameter pack, but that won't work for an assignment operator
[04:58:16] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[04:59:06] <CarloWood> So in C++ there is no way to do:  foo = { 1, 2, .. };  and have it print the number of elements that were passed?
[04:59:44] <RandomReader> the bare "{ 1, 2, .. }" is just an abstract syntax expression until it's used to initialize a particular type
[04:59:57] <RandomReader> it's not even an array/list that has elements
[05:00:40] <RandomReader> so the overload resolution at that stage is finding types (that foo will accept) that you can use that expression to initialize, syntactically
[05:02:33] <RandomReader> which is every type that will accept list initialization ... so aggregates (array, struct), std::initializer_list, class constructor with a matching number of parameters
[05:03:31] <RandomReader> but there aren't any syntax hooks to use here, just templates, which have already picked some kind of type by the time you're in them
[05:04:37] <RandomReader> (at which point it either compiles and becomes part of the overload set, or SFINAEs out)
[05:07:34] <CarloWood> Bottom line,  { 1, 2, 3 } is indistinguishable from { 1, 2, 3, 0, 0 } ?
[05:07:55] <CarloWood> When used a argument to an assignment operator.
[05:08:15] <CarloWood> cause this work obviously:
[05:08:37] <CarloWood> { vector<int> v = { 1, 2, 3, 0, 0 }; cout << v.size(); }
[05:08:38] <geordi> 5
[05:08:52] <CarloWood> { vector<int> v; v = { 1, 2, 3, 0, 0 }; cout << v.size(); }
[05:08:52] <geordi> 5
[05:08:56] <CarloWood> hmm
[05:09:00] <RandomReader> in the abstract, yeah .. you'd have to pick a useful type first, like vector or initializer_list<int> or similar
[05:09:00] <CarloWood> Explain that
[05:09:31] <RandomReader> and in your case, there is no useful type, since there's no common representation (the float/int ambiguity)
[05:09:47] <CarloWood> nah
[05:10:12] <CarloWood> { vector<float> v; v = { 1.f, 0xffffffff }; cout << v.size(); }
[05:10:12] <geordi> error: narrowing conversion of '4294967295' from 'unsigned int' to 'float'
[05:10:19] <CarloWood> hmm
[05:10:27] <CarloWood> { vector<float> v; v = { 1.f, 0xfffff }; cout << v.size(); }
[05:10:27] <geordi> 2
[05:10:57] <RandomReader> vector<int> has operator=(initializer_list<int>)
[05:11:13] <RandomReader> (well, I should say T instead of int, but you get the idea)
[05:11:48] <CarloWood> I suppose there is a problem here that I'd lose accuracy when passing a 32 bit int.
[05:12:35] <CarloWood> { vector<double> v; v = { 1.f, 0xffffffff }; cout << v.size(); cout << (float)v[0] << ", " << hex << (uint32_t)v[1]; }
[05:12:35] <geordi> 21, ffffffff
[05:12:48] <CarloWood> { vector<double> v; v = { 1.f, 0xffffffff }; cout << v.size() << ": "; cout << (float)v[0] << ", " << hex << (uint32_t)v[1]; }
[05:12:49] <geordi> 2: 1, ffffffff
[05:13:00] <CarloWood> { vector<double> v; v = { 1.f, 0xfffffffe }; cout << v.size() << ": "; cout << (float)v[0] << ", " << hex << (uint32_t)v[1]; }
[05:13:01] <geordi> 2: 1, fffffffe
[05:13:10] <CarloWood> That works :P
[05:14:50] *** Quits: DSpider (~DSpider@82.79.237.90) (Quit: Leaving)
[05:15:07] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[05:16:42] <yolo> https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html  const shall not be in decls? I somehow feel putting there can make the intention more obvious, a good thing
[05:17:05] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[05:17:13] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:17:40] <very_sneaky> p-i-: if you haven't considered it already, it might be worth looking at howard hinant's `date` library or std::chrono (c++20): https://howardhinnant.github.io/date/date.html
[05:18:12] <very_sneaky> it has pretty composable representations of time which would be pretty handy for your usecase. At least, I've found it handy in a similar application.
[05:18:16] <kalven> yolo: note that it goes specifically for values, not references
[05:19:01] *** Joins: seninha (~seninha@user/seninha)
[05:19:01] <very_sneaky> p-i-: he also did a few cppcon talks, this one is "A <chrono> tutorial": https://www.youtube.com/watch?v=P32hvk8b13M
[05:19:29] <yolo> kalven: do you mean it's because const-value does not make sense as pass-by-value is 'const' already?
[05:20:47] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[05:21:27] <kalven> yolo: no, it's just that it has no effect in a declaration.. void f(const string); and void f(string); declare the same function
[05:21:53] <Guest19> thanks RandomReader w.r.t copy-initialization answer
[05:22:22] <yolo> kalven:  i will remember this, though it feels non-intuitive, that f(const int) == f(int)
[05:22:53] <kalven> yeah, it might be a bit unexpected
[05:23:42] <kalven> now.. there are different schools of thought there.. note that on the definition side, it *does* matter if you do void f(const string s) {.. or void f(string s) {..
[05:23:52] <kalven> still the same function, but the arg cant be modified in the first
[05:24:01] <yolo> to make it even more interesting, it seems in func definition you can do func(const int x){}
[05:24:12] <kalven> yes, it does matter in the definition
[05:24:27] <kalven> and some people argue that definition should match declaration (as much as possible)
[05:26:42] <yolo> "As weâ€™ve seen, a pointer is an object that can point to a different object. As a result, we can talk independently about whether a pointer is const and whether the objects to which it can point are const. We use the term top-level const to indicate that the pointer itself is a const. When a pointer can point to a const object, we refer to that const as a low-level const."
[05:28:55] <yolo> f(const int) is top level const, f(const int&) is not top level, anyway
[05:29:54] *** Joins: algae (~algernon@170.10.246.117)
[05:30:56] <CarloWood> RandomReader: https://wandbox.org/permlink/GiHrRdS18vqieruN
[05:32:43] <kalven> why don't you just have named functions?
[05:32:58] <kalven> with that approach you get no warning or error if you pass 1 or 6 args
[05:33:47] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:36:18] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:36:54] <CarloWood> I'd get an assert
[05:40:28] <kalven> what is the upside?
[05:40:42] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:51] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:51] *** ChanServ sets mode: +v npaperbot
[05:51:08] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[05:52:40] *** Quits: MarcusRoman (~Admin@37.120.232.44) (Quit: Konversation terminated!)
[06:05:55] *** Joins: geli (~gelignite@55d47b01.access.ecotel.net)
[06:06:13] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[06:08:32] *** Quits: magla (~gelignite@55d41183.access.ecotel.net) (Ping timeout: 256 seconds)
[06:16:30] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:31:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[06:38:29] *** Joins: NiD27 (~nid27@49.205.150.42)
[06:44:19] *** Joins: HvszrStykp (~X@81.171.62.86)
[06:49:22] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community @ https://indiedevs.net/)
[06:51:22] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[06:54:20] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:e2c5:f92e:1579:496c:2e3a)
[06:54:42] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:55:57] *** Quits: p-i- (~Ohmu@2403:6200:8978:b697:449d:f7d9:f9f6:57cc) (Ping timeout: 240 seconds)
[06:56:49] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[06:57:07] *** Quits: shailangsa (~shailangs@host86-162-150-202.range86-162.btcentralplus.com) (Ping timeout: 256 seconds)
[06:59:15] *** Joins: RandomRead3r (~RandomRea@user/randomreader)
[07:02:44] *** Quits: RandomReader (~RandomRea@user/randomreader) (Ping timeout: 252 seconds)
[07:02:50] *** RandomRead3r is now known as RandomReader
[07:02:56] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[07:07:30] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Remote host closed the connection)
[07:08:56] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[07:23:31] *** Joins: adeliktas6 (~adeliktas@i59F5F341.versanet.de)
[07:23:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:25:37] *** Quits: adeliktas (~adeliktas@i59F52114.versanet.de) (Ping timeout: 240 seconds)
[07:25:37] *** adeliktas6 is now known as adeliktas
[07:26:37] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[07:31:19] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:31:39] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:42:58] *** Quits: algae (~algernon@170.10.246.117) (Quit: WeeChat 3.4)
[07:43:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[07:43:35] *** Quits: causative (~halberd@user/causative) (Ping timeout: 256 seconds)
[07:45:42] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[07:47:50] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:50:23] *** Joins: causative (~halberd@user/causative)
[07:52:03] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[07:52:36] *** Quits: geli (~gelignite@55d47b01.access.ecotel.net) (Quit: Stay safe!)
[07:54:02] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:59:11] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[08:00:04] *** Joins: cpuid (~cpuid@co5.at)
[08:00:05] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[08:00:05] *** Joins: cpuid (~cpuid@user/cpuid)
[08:03:57] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[08:06:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[08:34:47] *** Joins: skipper89 (~skipper92@037008196221.tuchola.vectranet.pl)
[08:38:09] *** Joins: unixpro1970|3 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[08:41:00] *** Quits: unixpro1970|3 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Client Quit)
[08:41:18] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[08:41:20] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Quit: Leaving)
[08:41:51] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[08:43:15] *** Quits: skipper89 (~skipper92@037008196221.tuchola.vectranet.pl) (Quit: see ya)
[08:52:17] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:54:00] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[08:55:49] *** Joins: frost (~frost@user/frost)
[09:02:53] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:13:34] *** Joins: sigma_ (~sigma@164.215.211.176)
[09:15:15] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[09:19:28] *** Joins: supernova (~quassel@2405:9800:ba11:6207:4af5:a6ad:c33b:5bbb)
[09:26:30] *** Joins: frost (~frost@user/frost)
[09:37:00] *** Joins: sigma__ (~sigma@164.215.226.35)
[09:37:25] *** Quits: sigma_ (~sigma@164.215.211.176) (Ping timeout: 240 seconds)
[09:40:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:52] *** ChanServ sets mode: +v npaperbot
[09:41:25] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[09:44:59] *** Joins: EdFletcher (~PKD@user/edfletcher)
[09:53:19] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:06:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[10:07:06] <supernova> is there REST related channel?
[10:34:01] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[10:35:49] *** Joins: malloy (~jimery@120.229.34.78)
[10:36:13] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 240 seconds)
[10:43:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[10:55:42] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[10:58:12] *** Joins: EdFletcher (~PKD@user/edfletcher)
[11:01:06] *** Joins: HvszrStykp (~X@81.171.62.86)
[11:23:49] <very_sneaky> supernova: perhaps any web-dev related channel
[11:25:15] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[11:27:11] *** Quits: sigma__ (~sigma@164.215.226.35) (Quit: Konversation terminated!)
[11:32:33] <very_sneaky> oof. the rule of 5 is really thwoing me about. now i need to make explicit decisions about what constructors and operators to provide
[11:32:58] <very_sneaky> s/thwoing/throwing/g
[11:35:33] <RandomReader> I integrated that as simply being part of "type design": I'm creating a type, so it should behave a certain way, and I decide what that is up front
[11:36:05] <RandomReader> (otherwise there'd be no point to creating the type in the first place)
[11:36:49] <very_sneaky> yeah agree. i just feel like there are hidden gotchas - in my mind, everything should be available unless there's a good reason not to provide it
[11:36:59] <RandomReader> usually it boils down to: bag of data -> zero, value type -> =default it all, more complex -> should it move, should it copy
[11:37:08] <very_sneaky> but when defaulting the move constructor, i'm getting `function is implicitly deleted because its declared type does not match the type of an implicit move assignment operator`
[11:37:09] <ville> very_sneaky: i'd say the opposite. you could delete everything. enable operations you actually need.
[11:37:11] <very_sneaky> and now i'm questioning my life
[11:37:22] <very_sneaky> derp, move assignment operator*
[11:37:45] <very_sneaky> ville: don't i want to enable both copy and move and let the compiler decide what to do in a given situation
[11:37:46] <RandomReader> the canonical signature is   T& operator=(T&&)
[11:38:05] <very_sneaky> RandomReader: i'm using `    auto operator=(const Account&&) noexcept -> Account& = delete;`
[11:38:18] <ville> very_sneaky: enable as in then decide whether you = default or write an actual implementation your self
[11:38:19] <RandomReader> no const, that doesn't make sense for move
[11:38:20] <very_sneaky> or you know, default, whatever
[11:38:40] <very_sneaky> ville: ah, i just meant default or delete
[11:38:48] <very_sneaky> but yes agree, default unless good reason not to
[11:39:12] <very_sneaky> RandomReader: oh, yeah. good catch
[11:39:21] <ville> of course they fucked the process up with c++20 but it still somewhat works
[11:39:35] <very_sneaky> error in transcription
[11:39:42] <very_sneaky> ville: in what way?
[11:39:44] *** Quits: letto (~letto@188.25.113.229) (Quit: Konversation terminated!)
[11:39:57] <ville> if you = delete all operations the type is no longer an aggregate
[11:40:07] <very_sneaky> what's an aggregate?
[11:40:20] <RandomReader> you also don't want to use noexcept for the default, let the compiler apply it if appropriate
[11:40:24] *** Joins: letto (~letto@188.25.113.229)
[11:40:33] <ville> very_sneaky: a thing you can aggregate initialize
[11:40:43] <RandomReader> (unless you *want* this situation of: if it can't be noexcept, you don't want move support at all)
[11:40:47] <very_sneaky> RandomReader: i did that based on C.66: https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c66-make-move-operations-noexcept
[11:41:10] <RandomReader> yes, ones you create
[11:41:29] <very_sneaky> ville: huh. that sucks
[11:41:33] <RandomReader> but an automatically generated one, you don't have a choice: it'll be noexcept if possible, but "possible" depends on all the members and bases
[11:41:44] <very_sneaky> i do like the dot initialization of aggregates in c++20
[11:41:55] <very_sneaky> one step closer to named arugments
[11:42:06] <RandomReader> so only worry about that when you're providing a definition yourself, make the signature super simple for =default ones
[11:42:43] <very_sneaky> yeah fair
[11:52:16] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[11:55:20] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:00:45] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[12:01:34] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (Ping timeout: 256 seconds)
[12:03:47] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[12:03:49] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[12:04:24] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:20:37] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[12:25:44] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[12:27:53] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[12:27:54] *** Joins: robod34 (~Username@79.113.195.239)
[12:29:44] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[12:33:18] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:37:34] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:47:54] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[12:48:02] *** Quits: chozorho (~chozorho@2601:146:300:c30::d5ec) (Quit: good night, stay safe)
[12:52:31] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[12:52:39] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:53:40] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Quit: Quit)
[13:17:39] *** Joins: Simplar (~Simplar@188.163.93.76)
[13:23:24] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) ()
[13:31:26] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:d9b7:23d6:79dd:2e64)
[13:33:34] *** Joins: jsbach (~jsbach@2a01:c22:3576:8400:7fa4:d8ba:4893:161b)
[13:34:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:48c8:920f:83dd:ae34) (Ping timeout: 240 seconds)
[13:40:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:51] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:51] *** ChanServ sets mode: +v npaperbot
[13:41:56] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[13:42:28] *** Joins: rito_ (~rito_gh@45.112.243.206)
[13:43:10] <xkoncek> why is https://en.cppreference.com/w/cpp/container/map/find `const K&` but https://en.cppreference.com/w/cpp/container/map/erase is `K&&`?
[13:46:11] *** Quits: NiD27 (~nid27@49.205.150.42) (Remote host closed the connection)
[13:46:33] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[13:50:21] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[13:53:13] *** Joins: johnny (~johnny@user/johnny)
[13:58:18] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[14:01:27] <ville> presumably the heterogenous lookup papers would hold the answer
[14:02:55] *** Joins: jokoon (~eio@2a01:e0a:542:e160:7942:f32c:e91b:7ebd)
[14:03:11] <jokoon> https://wandbox.org/permlink/yuMGc6XKui8zGnuk I don't understand, why does this compile?
[14:04:12] <jokoon> so a double is covnerted into char?
[14:04:46] <ville> it gets converted to char. add -Wconversion
[14:05:05] <ville> !give jokoon -Wall
[14:05:06] <nolyc> jokoon: -Wall is is only -Wsome; it leaves out many warnings. To really get a lot of warnings, you should use '-Wall -Wextra -Wpedantic -Wconversion -std=c++17 -O2'
[14:06:13] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[14:06:45] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:65e0)
[14:07:09] <jokoon> What's -Wsome? google is giving me a hard tiem
[14:07:33] <ville> that's a joke on the name of -Wall that it should really be called -Wsome
[14:07:40] <jokoon> oh ok
[14:07:59] <ville> for something called -Wall it sure leaves out a lot of stuff
[14:09:05] <ville> although in this case that's a valid conversion as far as c++ is concerned. but like many of the implicit conversions c++ specifies you probably wan to be at least warned about them happening
[14:09:53] <jokoon> why are those warning usually disabled by default?
[14:10:27] <jokoon> because of the C++ standard?
[14:10:31] <ville> they are not "disabled" they are part of the c++ language
[14:11:59] <ville> but as i tried to say c++ defines lot of implicit conversions which are really rather sneaky. so luckily compilers do have -Wconversion that let's the compiler catch them happening, rather than the poor programmer trying to remember all the rules and trying to account for them in all contexts
[14:12:48] <jokoon> so those conversions are part of C and good old backward compatibility
[14:12:54] <ville> yes
[14:13:22] <ville> it at least tells you when they're happening, so you can then spend some time considering whether it's alright or not, and then you can do whatever is necessary to let the conversion happen so the warning goes away if you deem it safe
[14:14:06] <jokoon> shouldn't compilers have this warning enabled by default? or do most compilers enable it?
[14:14:42] <johnny> jokoon, many of also use clang-tidy to catch the problems a bit sooner
[14:15:01] <ville> worse than this all main compilers enable the vendor's language extensions by default as well
[14:15:09] <jokoon> https://i.redd.it/evzvxoesrja81.png I started my day with this, it bothered me a bit. Wandbox doesn't enable those conversion by default
[14:15:20] <johnny> i didn't somehow know about -pedantic-errors in gcc before
[14:15:52] *** Joins: plastico (~plastico@neomutt/plastico)
[14:16:00] *** Joins: irrenhaus3 (~xenon@HSI-KBW-046-005-003-233.hsi8.kabel-badenwuerttemberg.de)
[14:16:12] <johnny> ville, that behaviour is surprising and unexpected. i've known about it, but still.. i can't believe it' stood like that so long
[14:16:14] <ville> everyone has their opinion whether the compilers should or shouldn't of course, reality is they don't
[14:16:31] <ville> johnny: can't change it. would break too much code
[14:16:46] <johnny> well i assume one would have to add a flag to reenable it of course
[14:17:05] <ville> do you want to be the one who goes through the build systems of big autotools projects to get the flags in the right place?
[14:17:15] <johnny> i know it's still a big ask though .. easier than changing -Wall tho
[14:17:31] <johnny> i wouldn't mind as long as i got paid a little bit
[14:18:02] <johnny> it's for the good of all mankind after all
[14:18:13] <ville> jokoon: there's a reason why we've that -Wall factoid
[14:18:27] <johnny> changing -Wall seems much more impossible
[14:18:33] <jokoon> sure, it would break code, but I have the opinion some things should be marked as deprecated, it doesn't break compatibility, but it actually force developers to fix their code, because this just lets bad code exist
[14:18:35] <johnny> -Wall-really-i-mean-it
[14:19:11] <ville> clang++ has -Weverything which lives upto its name and is near unusuable
[14:19:13] <johnny> jokoon, if only.. but C/C++ devs on the whole don't seem tofeel that way
[14:19:25] <jokoon> It's important to let old code live, but moving forward could also be nice
[14:19:31] <johnny> i wonder if my code would compile with -Weverything without too many errors
[14:19:36] <johnny> err warnings im ean
[14:19:55] <johnny> might be worth a go just to see
[14:20:03] <jokoon> I guess it will let the door open for new languages to be adopted
[14:20:10] <johnny> ah, but can you exclude the stdlib tho..
[14:20:28] <ville> i've not tried it in a decade(?), but it used to give warnings if you used say c++11 feature and said it wouldn;t work in c++98
[14:20:55] <johnny> ah, so it's ot based on the std you pass
[14:20:58] <ville> eve if you had -std
[14:21:06] <johnny> that seems kinda dumb
[14:21:15] <jokoon> Large projects usually try to remove as many warnings as possible
[14:21:22] <johnny> jokoon, do they tho... do they? :)
[14:21:48] <jokoon> Where I work, LOC in the millions, they treat warnings as error, I think
[14:21:59] <johnny> i think you're in the minority
[14:22:19] <johnny> but do you also control your compiler versions across the board?
[14:22:26] <johnny> that definitely helps
[14:22:26] <jokoon> I mean treating warning as errors is the easiest thing you can do to avoid problems
[14:23:09] <johnny> in FOSS it's more complicated since -Werror would mean say a new gcc would make it not compile because the devs didnt fix it for that yet
[14:23:34] <johnny> although it'd like to see it in all CI tho, not the code that folks just grab and use
[14:23:52] <fiesh> -Werror is meaningful in say a CI pipeline where you have a defined build environment used internally and want to ensure no one introduces warnings for that.  it makes zero sense to publish code that compiles with -Werror
[14:25:13] <fiesh> (also I have no idea what the point of -Weverything is to be honest... and I guess the gcc people don't either, which is why it doesn't exist for gcc)
[14:26:14] <johnny> compiler testing probably?
[14:26:45] <johnny> especially if it behaves like ville last saw it behave still
[14:27:19] <fiesh> not sure how it helps with compiler testing
[14:27:34] <jokoon> Sometimes I think about a new language that is a cousin of C++, generally I would remove things, keep most of the syntax...
[14:27:46] <fiesh> it would make it easier to write tests that no new warning was added, which doesn't seem like something you'd want to test
[14:27:56] <jokoon> about making a new language, I mean the things I would like in a C++-like language
[14:28:01] <ville> jokoon: everyone does. problem is everyone comes with a different subset
[14:28:58] <ville> jokoon: right now zig looks fairly promissing new language somewhere between c and c++. probably closer to c.
[14:29:14] <jokoon> Yes, i've read about it
[14:29:44] <jokoon> it's not in 1.0 yet though
[14:30:16] <jokoon> I just want C with STL containers, a bit of syntax sugar, and a few other things
[14:30:35] <jokoon> so zig seems like it's a good candidate
[14:31:08] <jokoon> it can also easily interact with C, so that's a big plus
[14:31:58] <jokoon> Compilation time also matter a whole lot...
[14:32:51] <ville> sure its nowhere near 1.0. they've plenty to sort out. plenty of time to make a wrong decission somewhere along the line
[14:33:44] <ville> it's going to be interesting how complex of a lanuage it will end up
[14:35:40] <jokoon> the syntax is already a bit complex
[14:35:52] <jokoon> I mean there are a lot of keywords and things to use
[14:36:14] <jokoon> still not zig on X in Y minutes
[14:40:25] <ville> perhaps they can fix the too many keywords by overloading their meaning! yes that's the ticket
[14:41:41] <ville> rather have specific keywords than c++'s idea of static
[14:44:47] *** Joins: paul424 (~tom@ip-37-248-154-2.multi.internet.cyfrowypolsat.pl)
[14:50:08] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:55:09] <paul424> I have     std::vector<std::vector<TileStateNotified>> mTilesStates; now it won't work cause there are two gamemaps one onto another one .....
[14:55:28] <paul424> again, how to modify that ? with blackpawn we discussed std::map, but a std::map<Tile*, TileStateNotified> would eat a lot of memory ... hmmm ....
[14:56:22] <paul424> problem is I don't want to store such a long 64 bit pointer of Tile* ... what are the alternatives for me ?
[15:04:38] <ville> what does: "o gamemaps one onto another one" mean"?
[15:05:08] <paul424> One gamemap hovers over the another gamemap...
[15:05:16] <paul424> ville, now is it clear ;) ?
[15:05:48] <ville> not really. but let's just say the graphical representetation should be separate thing really
[15:06:07] <paul424> YEs. Anyway I now have two gamemaps in the system
[15:06:32] <paul424> so the pair x,y no longer identifies uniformly a Tile.
[15:06:44] <ville> of course it does
[15:07:29] <ville> (also if you care about your memory layout you probably don't want to use std::vector<std::vector<>>
[15:07:54] <xkoncek> ville can you give me a link to the official c++ standardese papers you use to quote?
[15:08:05] <ville> http://www.eelis.net/c++draft/
[15:08:17] <ville> it's _NOT_ official
[15:08:18] <paul424> ville, yes that was an adhoc solution , someone left in the project for longer
[15:08:45] <ville> xkoncek: the official ones cost money and can't be distributed
[15:09:36] <irrenhaus3> paul424: what's the specific problem you want to solve there? as in, not the implementation you're currently going for, but the problem that implementation is trying to solve
[15:11:05] <paul424> problem is I try to add to the existing code base and option to have two maps... In many code sites it is hardcoded for just one gamemap during gameplay.
[15:11:45] <ville> two maps? the player plays the game at the same time on two completely unrelated maps?
[15:11:52] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:11:57] <paul424> and as for this mTileStates case it was just an adhoc map from int x, int y -> TileStateNotified
[15:12:05] <ville> if it was a chess board the player would be represented with two chess boaords of different games?
[15:12:22] <paul424> ville, not at all it's for the gameeditor, .....
[15:12:37] <ville> so the player edits two maps at the same time?
[15:12:52] <paul424> like you mark the bit of a map , Ctr-C , and you have another bit hovering over the orginal map
[15:13:01] <paul424> ready to be pasted somewhere
[15:13:04] <irrenhaus3> the point of the question is, are the two maps just two separate representations of the same state, or can they be modified independantly of each other?
[15:13:32] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[15:13:33] <paul424> irrenhaus3, this "hovering bit" is not planned to be modified at all , it can be only dragged over
[15:13:38] <irrenhaus3> ah, okay, so like a clipboard
[15:13:43] <paul424> I have had a video please wait
[15:14:28] <paul424> https://www.youtube.com/watch?v=dZCcNeGdbeg
[15:14:28] <ville> xkoncek: or perhap you meant: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/ this one?
[15:14:54] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[15:16:16] <xkoncek> yeah, i think i mean eelis
[15:17:21] <irrenhaus3> paul424: from the looks of it, that's still only one game map, you're just able to copy a region from that map into a buffer and overwrite the original map with the contents of that buffer somewhere else
[15:17:24] <ville> paul424: so you want to copypasta from one point of the map to another point in the same map. not between two maps
[15:18:21] <ville> paul424: make some kind of "selection" class possibly that you instantiate when someone hits control-c or so, and you then draw that where ever the cursor is
[15:18:38] <paul424> I need this second map to be hovering over the orginal , can't you see it ;)
[15:18:56] <irrenhaus3> that's not a map though
[15:18:57] <ville> paul424: it's not a "second map". as in a full map. it's just a selection.
[15:19:04] <paul424> hmm ...
[15:19:05] <irrenhaus3> a map is what you play the game on
[15:19:30] <ville> paul424: and like i said the graphical representation that it's drawn over the original map is a separate thing
[15:23:31] <ville> paul424: if you only allow rectangular selections, then all your "selection" class has to store is the start x,y and end x,y (or width, height) that refer to the original area. so that's pretty simple
[15:26:55] <paul424> I don't want to scrap everything and start from zero again :(
[15:27:51] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[15:28:23] <irrenhaus3> nobody does, but sometimes you gotta
[15:28:58] <irrenhaus3> I've had to trash quite a few git branches myself when I realized I had misunderstood some problem
[15:29:15] <irrenhaus3> just a normal part of learning
[15:30:53] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:e2c5:f92e:1579:496c:2e3a) (Remote host closed the connection)
[15:31:28] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:f92e:1579:496c:2e3a)
[15:35:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:f92e:1579:496c:2e3a) (Ping timeout: 240 seconds)
[15:41:01] *** Quits: jokoon (~eio@2a01:e0a:542:e160:7942:f32c:e91b:7ebd) (Quit: Leaving)
[15:42:00] <paul424> as usual : many thanks to all who have helped, bye
[15:42:01] *** Quits: paul424 (~tom@ip-37-248-154-2.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[15:46:34] *** Joins: magla (~gelignite@55d47b01.access.ecotel.net)
[15:51:03] *** Joins: xkuru (~xkuru@user/xkuru)
[15:52:40] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:54:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[16:01:12] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[16:01:34] *** Quits: malloy (~jimery@120.229.34.78) (Quit: WeeChat 3.0)
[16:02:06] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:04:19] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[16:10:54] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[16:28:13] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[16:43:42] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Quit: Quit)
[16:49:17] *** Joins: Simplar (~Simplar@188.163.93.76)
[16:52:54] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[16:57:57] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:00:46] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[17:02:13] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[17:05:36] *** Joins: paule32 (~paul@user/paule32)
[17:05:47] <paule32> hello
[17:06:22] <paule32> i work with mingw, and i get the message:  gcc_plugin_seh/main.cpp:8:10: fatal error: gcc-plugin.h: No such file or directory
[17:06:48] <paule32> how can i install gcc_plugin for mingw ?
[17:11:47] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:26:42] *** Joins: seninha (~seninha@user/seninha)
[17:40:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:52] *** ChanServ sets mode: +v npaperbot
[17:41:38] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:58:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:00:19] *** Joins: pulse (~pulse@user/pulse)
[18:02:00] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[18:04:39] *** Quits: rito_ (~rito_gh@45.112.243.206) (Ping timeout: 256 seconds)
[18:07:01] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[18:07:52] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:11:42] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:15:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[18:17:11] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:17:24] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[18:24:26] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b9d4:dfb1:ac7d:59bf)
[18:24:27] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b9d4:dfb1:ac7d:59bf) (Changing host)
[18:24:27] *** Joins: skapata (~Skapata@user/skapata)
[18:25:36] *** Khoyo_ is now known as Khoyo
[18:30:14] *** Quits: Khoyo (~khoyo@ns328946.ip-37-187-115.eu) (Changing host)
[18:30:14] *** Joins: Khoyo (~khoyo@user/khoyo)
[18:43:34] *** Joins: paul424 (~tom@ip-37-248-157-190.multi.internet.cyfrowypolsat.pl)
[18:46:59] *** Joins: plastico1 (~plastico@neomutt/plastico)
[18:47:29] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 268 seconds)
[18:49:57] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:50:02] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[18:55:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:57:15] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:57:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[18:59:18] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:01:51] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[19:05:28] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[19:11:37] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:12:32] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[19:20:49] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:f92e:1579:496c:2e3a)
[19:28:02] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[19:29:47] *** Joins: EdFletcher (~PKD@user/edfletcher)
[19:29:56] <yolo> https://think-async.com/Asio/asio-1.20.0/doc/asio/tutorial/tutdaytime3/src.html  the newest asio(non-boost) still uses boost::bind, boost::shared_ptr, for c++17 are these (bind, shared_ptr) totally in STL already? I want to avoid boost for the moment(except probalby for its interprocess headers), trying to compare asio/boost-interprocess vs socket-epoll/posix-ipc in c++ now, the latter is a mix of c/c++
[19:30:02] <yolo> but feels 'simpler'
[19:30:55] <yolo> so far with some simple wrapper around c-api(socket,ipc API) it seems c++ can work with them directly just fine
[19:37:28] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:38:47] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[19:38:49] *** Parts: Plazma (~Plazma@user/plazma) ()
[19:38:59] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[19:42:11] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:42:16] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[19:45:47] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:46:29] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[19:48:22] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[19:49:16] <ville> yolo: cppreference.com
[19:49:19] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[19:51:01] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[19:52:34] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:54:26] *** Joins: ferdna (~ferdna@user/ferdna)
[19:55:25] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:697b:e7c5:5009:a1c6)
[20:03:19] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[20:04:13] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[20:04:45] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[20:07:24] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:07:25] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[20:13:49] <PJBoy> +1
[20:20:58] <LordKalma> !rq
[20:20:58] <nolyc> LordKalma: <cbreak> do re mi fa so raiiii?
[20:21:10] <LordKalma> that's a good one
[20:21:13] <LordKalma> amazingly good one
[20:23:17] <supernova> offset and displacement are same?
[20:23:47] <PJBoy> in a sense
[20:24:15] <PJBoy> displacement I associate with signed distance
[20:24:20] <PJBoy> like something you'd measure in metres
[20:24:36] <PJBoy> offset I'd talk about in a more general usage
[20:25:10] <supernova> compiles an offset or displacement into the table of machine-language object-code
[20:25:10] <supernova> pointers to find the code that will execute the virtual function call.
[20:25:25] <supernova> in this context are same?
[20:25:42] <PJBoy> yeah I'd say they mean the same thing there
[20:25:52] <PJBoy> given the choice I would omit the "displacement" wording though
[20:28:06] <supernova> yes,i i would too!
[20:28:10] <supernova> Thanks, Pjboy
[20:31:47] <john99> Hi, i am trying to adapt this http://coliru.stacked-crooked.com/a/0a4aaf0a85b14571 to my own constructor to pass a unique_ptr list, https://godbolt.org/z/eY6xKqz8z, tis working but i still dont understand && why the second move is necesary?
[20:32:20] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[20:33:11] <ville> john99: the pastes have line numbers...
[20:33:39] <john99> 19 sorry
[20:34:02] <ville> heh which would be the 3rd std::move() in the paste.
[20:35:18] <ville> when ever you've a name for something and you want a move-operation you need to somehow change the value category of the expression. name => lvalue, std::move(name) => xvalue
[20:35:50] <ville> with an xvalue now the overload resolution can pick a move-operation
[20:37:11] <ville> https://en.cppreference.com/w/cpp/container/vector/push_back if you look at that it's overloaded for both T const& and T&&
[20:38:26] <john99> ummmm, i dont completly understand, but okay, i ahve to check more about move semantic
[20:38:57] <ville> by just using "name" you'll pick the T const& overload, by using std::move(name) you'll pick the T&& overload
[20:40:08] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:42:36] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[20:43:16] <ville> there must be some way for the compiler to decide which overload of push_back() to call, or sometimes it does indeed error out because it's ambiguous. so that's what you're controlling there: the overload resolution
[20:43:34] <john99> operator T() const  = delete; i was just trying that
[20:43:40] <john99> but no luck
[20:48:26] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:51:33] <PJBoy> seems like a random thing to try
[20:53:03] <PJBoy> you need to use std::move on stuff you want to allow to be moved at the point where you want to allow it
[20:53:27] <PJBoy> so you want push_back to be allowed to move `te`, so you indicate that by passing `std::move(te)`
[20:55:58] <ville> john99: you understand, at least roughly, what overload resolution is?
[20:56:47] <ville> john99: if you have multiple functions with the same name, but different parameters, that's called on overload set. when you try to call such function the compiler picks a suitable function to call based on the arguments you pass
[20:57:07] <ville> err an overload set
[20:58:43] <ville> john99: http://coliru.stacked-crooked.com/a/b2404a6aeae1d300
[20:59:18] *** Joins: NiD27 (~nid27@49.205.147.26)
[20:59:40] <ville> john99: you understand that the type of the argument is one dimension that is used to determine which overload to call?
[21:02:25] <john99> ville, yes, i understand
[21:02:33] <ville> john99: well something called "value category" is another dimension which is also used when deciding. and this is what's going on when you see: http://coliru.stacked-crooked.com/a/f2cd3cd9b4203a42
[21:03:29] <amosbird> Hello. Does it make any sense to put explicit template instantiation in header file?
[21:03:37] <john99> more ore les i udnerstand all with & the && i need recheck becouse randomly ask for const and things i diont unferstand why
[21:03:52] <john99> understand*
[21:04:09] <john99> uff, the keyboard... i am painfull to read...
[21:04:57] <ville> amosbird: sure why not... not to say there couldn't be reprecussions from doing so
[21:05:14] <ville> repercussion
[21:05:28] <john99> PJBoy, yup i was trying things randomly , simply checking if delete *advert* the compiler to not use that cast
[21:06:12] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[21:06:25] <PJBoy> there's no way to make a type that moves itself
[21:06:52] <PJBoy> at most you can make a type that breaks if you try to copy it, like unique_ptr
[21:07:28] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[21:07:41] <amosbird> ville: Hmm, I fail to understand the benefits (isn't it redundant?)
[21:13:57] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[21:17:14] <ville> i was going with more of a: "can it build properly" basis
[21:21:39] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Ping timeout: 268 seconds)
[21:21:45] <ville> i suppose one of those header-only libraries where you've a define controlling whether definitions of functions are visible, and the users are supposed to enable them in one TU could be a situation where you'd do it
[21:23:12] <ville> you made some class template, but know it will be mostly instantiated with a type or two, then you could stick those explicit insantiations behind the define
[21:26:38] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[21:26:49] <john99> https://godbolt.org/z/144q3Mja6 ok, un step further, this is the correct way to handle the unique_ptr?
[21:27:08] <john99> line 33?
[21:29:11] <john99> https://godbolt.org/z/41oYYjv3xthis better
[21:29:14] *** Quits: paul424 (~tom@ip-37-248-157-190.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[21:29:18] <john99> https://godbolt.org/z/41oYYjv3x
[21:32:56] *** Joins: noarb (~noarb@user/noarb)
[21:33:51] *** Quits: noarb (~noarb@user/noarb) (Client Quit)
[21:35:53] <john99> ummm, why assert?
[21:38:52] <john99> i forgot the exit
[21:40:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:52] *** ChanServ sets mode: +v npaperbot
[21:41:44] <PJBoy> I don't trust that movable_il class
[21:47:48] *** Joins: andreasbuhr (~quassel@p5dcf9fec.dip0.t-ipconnect.de)
[21:48:02] *** Quits: andreasbuhr (~quassel@p5dcf9fec.dip0.t-ipconnect.de) (Client Quit)
[21:48:55] <john99> ummm, me too, but in my case is lack of knowledge, i dannot imagine how creata a class with unique_ptr and polimorfism
[21:49:03] <john99> cannot*
[21:54:22] *** Joins: rito_ (~rito_gh@45.112.243.149)
[22:03:35] <john99> ummm
[22:07:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[22:08:20] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[22:13:13] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[22:25:25] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:697b:e7c5:5009:a1c6) (Ping timeout: 240 seconds)
[22:25:33] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[22:26:22] *** Joins: paul424 (~tom@ip-37-248-155-156.multi.internet.cyfrowypolsat.pl)
[22:28:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[22:35:27] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:49:17] *** Quits: jsbach (~jsbach@2a01:c22:3576:8400:7fa4:d8ba:4893:161b) (Ping timeout: 240 seconds)
[22:50:15] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[22:50:55] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:52:26] *** Joins: jsbach (~jsbach@2a01:c22:3576:8400:5c0d:1d5f:eb51:9dd2)
[22:57:19] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:65bb:c31d:f4b5:273e)
[23:01:17] *** Quits: supernova (~quassel@2405:9800:ba11:6207:4af5:a6ad:c33b:5bbb) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:13:45] <xkoncek> i realized i had to switch my AA tree from right-leaning to left-leaning to simplify computation of the iterator returned by standard erase method
[23:14:18] <xkoncek> fortunately it was just a symmetric switch in two inner methods
[23:15:18] <xkoncek> in a left leaning tree you can go once to the right and then only to the left and you will always find a successor with no right children
[23:15:38] <xkoncek> and erase has to return a iterator to the following value
[23:28:06] <hnOsmium0001[m]> https://github.com/KomputeProject/kompute
[23:28:21] <hnOsmium0001[m]> I almost thought it's a KDE project at first glance, but no, unfortunately not
[23:37:24] *** Quits: NiD27 (~nid27@49.205.147.26) (Quit: Leaving)
[23:39:17] <yolo> isocpp says <cstdio> --> std::printf(), <stdio.h>-->printf() based on https://isocpp.org/wiki/faq/mixing-c-and-cpp#include-c-hdrs-system but in practice I saw none uses std::printf after <cstdio>
[23:39:52] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[23:40:26] <ville> in practice the cname headers also stick their symbols in the global scope. it's not specified but that's what happens in practice
[23:41:42] <yolo> so they're not in std but global space, same as stdio.h
[23:41:53] <ville> https://developers.redhat.com/blog/2016/02/29/why-cstdlib-is-more-complicated-than-you-might-think
[23:42:02] <ville> they are in both
[23:42:31] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[23:42:53] <yolo> yeah just tested ::printf, std::printf, printf, all works with cstdio.h
[23:43:01] <yolo> s/cstdio.h/cstdio
[23:43:55] <yolo> i looked into stdio.h there is no `extern "C"` anywhere, why can my c++ code do `include <stdio.h>` then uses its APIs directly without `extern "C"`?
[23:44:23] <TinoDidriksen> The stdio.h you get from a C++ compiler is different.
[23:45:25] <yolo> thanks! yes c++ stdio.h is actually aliased to cstdio to some extent for namespace
[23:46:50] <yolo> final chasing questions on this one: c++ does not have posix headers of its own, it shares the same one with C(unlike stdio.h), e.g. unistd.h, there is no 'extern "C"' in unistd.h per se, why can I use unistd.h in c++ directly?
[23:48:07] <TinoDidriksen> You would get issues if you included unistd.h inside a namespace.
[23:50:44] <yolo> unistd.h and fcntl.h start with __BEGIN_DECLS and end with __END_DECLS, which are macros defined in sys/cdefs.h:#ifdef   __cplusplus `# define __BEGIN_DECLS  extern "C" { `  -- so the magic is in cdefs.h, in short, if it's cpp code, unistd.h will be wrapped by "extern "C"" eventually
[23:55:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:56:47] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:c42a:cb27:219a:890a)
[23:56:47] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:c42a:cb27:219a:890a) (Changing host)
[23:56:47] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:57:10] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:57:34] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:59:03] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
