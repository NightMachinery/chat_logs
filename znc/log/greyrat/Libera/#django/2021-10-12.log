[00:00:16] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75)
[00:09:06] *** Quits: rundown (~eb0t@90.208.41.2) (Ping timeout: 260 seconds)
[00:11:57] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[00:15:11] *** Quits: dor (~erg@78.11.12.207) (Remote host closed the connection)
[00:15:59] *** Joins: noobsec (~user@user/noobsec)
[00:31:11] *** Joins: djapo (~archangel@user/djapo)
[00:40:35] *** Joins: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29)
[00:43:26] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 245 seconds)
[00:51:25] *** Quits: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29) (Remote host closed the connection)
[00:53:43] *** Quits: noobsec (~user@user/noobsec) (Ping timeout: 252 seconds)
[00:54:27] <schinckel> daniel2: You can annotate on a correlated subquery that gets the latest one.
[00:55:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[00:59:23] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:02:28] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[01:14:17] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (Ping timeout: 246 seconds)
[01:15:39] *** Joins: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29)
[01:16:28] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[01:17:18] *** Quits: Tas-sos (~Tas-sos@ppp046177160247.access.hol.gr) (Quit: leaving)
[01:20:07] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[01:20:59] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 250 seconds)
[01:27:13] *** Quits: gitly (~gitly@185.69.144.227) (Ping timeout: 252 seconds)
[01:28:53] *** Joins: gitly (~gitly@85.255.237.129)
[01:39:47] *** Joins: ugubok (~ugubok@178.214.254.153)
[01:44:44] *** Quits: zBeeble42 (~zBeeble@2001:1928:1::35) (Remote host closed the connection)
[01:44:58] *** Joins: zBeeble42 (~zBeeble@2001:1928:1::35)
[01:45:21] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (Quit: Ping timeout (120 seconds))
[01:45:40] *** Joins: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl)
[01:46:17] <ugubok> Hi, I am trying to solve atypical problem. We have django instance on which the admin site is running, and instances of the site itself on multiple nodes. When some configuration configuration in admin is changed (actually it's a constance admin module), I need to trigger some actions on each node to change it's runtime (!) configuraton, so I need to do it within django instance
[01:47:30] <PaulWay[w]> Sounds like you need to write your own admin interface, rather than using the Django admin interface.
[01:47:40] <ugubok> At first I was looking on signals, but it's, of course, only one instance wide. Then I was looking at kombu AMQP, but it seems I had to setup eventloop manually in separate thread. Is there any easier solutions?
[01:48:47] <PaulWay[w]> Then just have the browser regularly re-poll for new data.
[01:49:21] *** Joins: zircona (~zircona@c-73-207-108-132.hsd1.ga.comcast.net)
[01:51:02] <ugubok> PaulWay[w], You don't understand, the site nodes running django too, and in constance I configure some backend-related configs. When config is changed on the admin node, I need to send event on all site nodes, and instance runtime configs (actually I am talking about rest-framework config) should be changed
[01:51:39] <PaulWay[w]> OK, so you're not using the Django admin interface.  good so far.
[01:51:48] <FunkyBob> ... this is a good argument against having runtime configurables like this :/
[01:52:11] <PaulWay[w]> So you've got multiple different APIs, each running on a separate database?
[01:52:32] <ugubok> No. I have one database, but rest-framework config is stored in runtime!
[01:52:41] <PaulWay[w]> ... why?
[01:53:12] *** Joins: Throgkt (~Throgkt@user/throgkt)
[01:53:20] <ugubok> Cause it configured via settings module, in the code, and it is not designed to change settings on the fly
[01:53:44] <PaulWay[w]> I'm not sure I understand what config this is.
[01:54:04] <PaulWay[w]> What have you got configured in your settings.py that you're needing to change here?
[01:54:14] <ugubok> It looks like this https://www.django-rest-framework.org/api-guide/settings/
[01:54:23] <ugubok> I configuring throttle rates.
[01:54:30] <PaulWay[w]> Ah, I see.
[01:54:53] <ugubok> I have a task to dynamically configure throttle rates via constance config
[01:54:55] <PaulWay[w]> And you're wanting to change those rates 'on the fly' - over time.
[01:55:07] <FunkyBob> ah, constance
[01:56:20] <PaulWay[w]> What's that?
[01:56:22] <ugubok> So the question basically sounds like: how can I easily send events from one instance to others?
[01:56:59] <FunkyBob> PaulWay[w]: it's a lib for putting settings into the DB
[01:57:10] <PaulWay[w]> Ah.  OK.
[01:57:20] <PaulWay[w]> It sounds to me like your throttling class needs to do a look-up to e.g. a REDIS or Memcache server to find out what the current throttling rate should be.
[01:57:22] <FunkyBob> ugubok: there's no way built into django, since it's supposed to be a "shared nothing" architecture...
[01:57:35] <FunkyBob> PaulWay[w]: hmm
[01:58:05] <FunkyBob> i could adjust django-rated to do that...
[01:58:44] <PaulWay[w]> Or, if you can stand a bit of variation and you're doing this in containers, then have the container start up, get the current throttling settings from the database, and then run at those rates until the container is killed.  Then when you need to change rates, start killing containers.
[01:58:52] <ugubok> PaulWay[w], Sounds like a good idea, I can just override some method on throttle
[01:59:37] <PaulWay[w]> Thinking about it in terms of 'how to send events to the Django instance so that it changes its throttle settings' seems to me to be looking at it the wrong way around.
[01:59:48] *** Joins: iomari891 (~iomari891@105.112.138.38)
[02:00:37] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:00:45] <PaulWay[w]> And if I understand constance + your throttling settings coming from within settings.py, then you can just kill the old containers and your container management system will start new containers with the new throttling settings.
[02:00:58] <PaulWay[w]> So no need for signalling at all.
[02:01:32] <ugubok> I believe that story about killing containers is a joke
[02:01:45] <ugubok> But if not, we doesn't have containers
[02:01:45] <FunkyBob> nope
[02:02:25] <PaulWay[w]> Well, if you don't have containers, are you running this on separate servers or VMs?
[02:02:43] <ugubok> We wouldn't kill the instances, never
[02:02:48] <ugubok> Too many users and only 2 nodes!
[02:02:52] <PaulWay[w]> LOL.
[02:03:00] <PaulWay[w]> You need to think about high availability.
[02:03:06] <ugubok> I am just a clerk
[02:03:07] <PaulWay[w]> Spread your load across many machines.
[02:03:11] <ugubok> Look at me
[02:03:14] <PaulWay[w]> Use load balancers.
[02:03:25] <PaulWay[w]> Two nodes is asking for problems.
[02:03:45] <ugubok> We have a balancer and a BIG, HEAVY 2 nodes, so there is no problems
[02:03:50] <PaulWay[w]> Two nodes says "if the first node goes down, the last remaining node has to survive with all the current load, so it will inevitably die".
[02:04:08] <PaulWay[w]> The load that can kill one node will kill the other.
[02:04:15] <FunkyBob> how rapidly do you need the rate limiting changese to propagate?
[02:04:21] <PaulWay[w]> The vulnerability that kills one node will kill the other.
[02:04:22] <FunkyBob> how often are you changing these values?  and why?
[02:04:44] <ugubok> FunkyBob, we have attacks on endpoint that sending SMS verification codes
[02:04:51] <PaulWay[w]> You're putting your eggs in two baskets.
[02:05:03] <ugubok> Much money throwen away
[02:05:29] <FunkyBob> ugubok: ok, and how does your existing rate limiting not handle this?
[02:06:10] <FunkyBob> (am guessing DRF has something built in?  am not familiar with it)
[02:06:18] <ugubok> FunkyBob, It is handling this fine, but BOSS wants to change rates any time
[02:06:46] <FunkyBob> does DRF limit per user? per IP? per endpoint? something else?
[02:07:05] <PaulWay[w]> It's got a variety of rate throttling options FunkyBob
[02:07:09] <ugubok> Endpoint have 3 thtottles: by IP, by Session or user, By phone number
[02:07:28] <ugubok> Each have individual rate
[02:08:30] <PaulWay[w]> In your configuration, ugubok, I'd run a memcache server that stores the current throttle settings, and have the throttle class get that data for each request.
[02:08:55] <PaulWay[w]> You can have a distributed memcache configuration that runs across both hosts.
[02:09:03] <FunkyBob> yeah, butr that means another round-trip to cache for every request
[02:09:31] <ugubok> PaulWay[w], That's a good idea. We have distributed redis. Seems I'll going to implement that
[02:09:33] <PaulWay[w]> Maybe a millisecond?
[02:09:48] <PaulWay[w]> Compared to the overall round trip time it's probably trivial.
[02:10:12] <PaulWay[w]> You could cache it internally so it only updates every 60 seconds or so, but that's probably more bother than it's worth IMO.
[02:10:20] <FunkyBob> depends on their scaling needs... have certainly been in cases where it mattered
[02:10:29] <FunkyBob> then again, they already ahve the DB hit for constance... so...
[02:10:46] <ugubok> Constance caches config in redis
[02:11:02] <PaulWay[w]> And when you need to scale, ugubok, buy a third node rather than replacing the two existing nodes.
[02:11:07] <PaulWay[w]> People do this so badly.
[02:12:00] <PaulWay[w]> They build clusters of two expensive machines, and then wonder why it all falls over when one of the two machines goes down.
[02:12:07] <PaulWay[w]> It's such poor redundancy and planning.
[02:12:17] <ugubok> We have very small downtime over years
[02:12:31] <PaulWay[w]> Half the time they take the two redundant power supplies and plug them into the same PDU.
[02:13:36] *** Parts: Throgkt (~Throgkt@user/throgkt) ()
[02:13:37] <PaulWay[w]> And often they can't upgrade anything because taking one node down to upgrade it means there's no redundancy left.
[02:13:57] <ugubok> Think of that from position of business. Devops costs more money than 2 nodes
[02:14:25] <PaulWay[w]> Automation.
[02:14:46] <ugubok> Devops does automation
[02:15:03] <PaulWay[w]> Then the cost of managing more machines is much less than the cost of buying more machines.
[02:15:21] <PaulWay[w]> AFAICS your statement proves my point.
[02:18:39] <ugubok> BTW about caching, does lru_cache works between multiple requests?
[02:19:06] *** Quits: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29) (Quit: Konversation terminated!)
[02:19:36] <schinckel> It depends.
[02:19:43] <ugubok> Depends on scope?
[02:20:09] <schinckel> If they are served by the same worker process on the same machine, then it will probably work across requests.
[02:39:22] *** Joins: Throgkt (~Throgkt@user/throgkt)
[02:48:54] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 268 seconds)
[03:02:43] *** Quits: Kalov (~Thunderbi@179.56.68.20) (Quit: Kalov)
[03:39:30] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[03:46:02] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-162-211.red.bezeqint.net)
[03:53:16] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:09:40] *** Joins: hoppity (~user@user/hoppity)
[04:09:52] <hoppity>  what is the typing library in Python? I see that people use it when they are already using what seem to be buil-in data structures
[04:17:26] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[04:18:24] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[04:18:27] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[04:19:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (calcium.libera.chat (Nickname regained by services)))
[04:19:37] *** vinleod is now known as vdamewood
[04:20:38] *** Quits: beterraba (~beterraba@86.107.21.205) (Ping timeout: 260 seconds)
[04:20:44] *** Quits: rje (~rje@50.35.241.164) (Remote host closed the connection)
[04:21:27] *** Joins: rje (~rje@50.35.241.164)
[04:22:38] *** Joins: beterraba (~beterraba@86.107.21.198)
[04:37:59] *** Joins: fikran (~fikran@user/fikran)
[04:41:45] <FunkyBob> hoppity: do you mean mypy? http://mypy-lang.org/
[04:41:50] <FunkyBob> hoppity: or the built in typing package?
[04:42:13] <FunkyBob> https://docs.python.org/3/library/typing.html
[04:48:54] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-162-211.red.bezeqint.net) (Ping timeout: 256 seconds)
[05:04:10] *** Quits: veb (sid43929@ilkley.irccloud.com) (Ping timeout: 260 seconds)
[05:04:36] *** Joins: rvgate5 (~rvgate@user/rvgate)
[05:04:37] *** Joins: veb (sid43929@id-43929.ilkley.irccloud.com)
[05:04:51] *** Quits: killjoy (~nameless@user/killjoy) (Remote host closed the connection)
[05:05:20] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (Ping timeout: 260 seconds)
[05:05:55] *** Quits: rvgate (~rvgate@user/rvgate) (Ping timeout: 260 seconds)
[05:05:55] *** rvgate5 is now known as rvgate
[05:06:01] *** Joins: killjoy (~nameless@user/killjoy)
[05:20:17] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:21:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:26:52] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[05:31:21] *** Quits: ugubok (~ugubok@178.214.254.153) (Ping timeout: 245 seconds)
[06:00:29] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[06:00:37] *** Quits: zircona (~zircona@c-73-207-108-132.hsd1.ga.comcast.net) (Ping timeout: 252 seconds)
[06:05:56] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[06:10:47] <evidlo> anyone know why django isn't serving this static file? https://termbin.com/q6d6
[06:11:24] <evidlo> settings.py: https://termbin.com/58lm
[06:13:21] <FunkyBob> django doesn't serve static files except when using "runserver" and DEBUG=True
[06:14:30] <evidlo> ah thanks.  I was missing DEBUG=True
[06:43:35] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:44:52] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:45:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[06:47:20] *** Joins: fikran (~fikran@user/fikran)
[06:48:35] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:50:12] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:50:27] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:17:38] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Remote host closed the connection)
[07:18:03] *** Quits: simplicity (~yti@user/simplicity) (Remote host closed the connection)
[07:20:06] *** Joins: simplicity (~yti@user/simplicity)
[07:23:10] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[07:24:04] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[07:24:20] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[07:30:47] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:31:57] <daniel2> schinckel: I saw something about annotating
[07:32:02] <daniel2> Ill try that.
[07:49:34] *** Joins: Thanatos (~Thanatos@197.210.64.65)
[07:50:42] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:52:25] *** Quits: Thanatos (~Thanatos@197.210.64.65) (Client Quit)
[08:02:47] *** Joins: Thanatos (~Thanatos@197.210.64.65)
[08:08:16] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:11:39] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[08:33:05] *** Joins: ThanatosJ (~Thanatos@197.210.64.65)
[08:34:48] *** Joins: dor (~erg@78.11.12.207)
[08:35:11] <rtpg> Is there any notion of "request-local variables", similar to thread-locals? I guess that's what flask does internally, but something like that would be very helpful for getting me out of some performance bind
[08:36:16] *** Quits: Thanatos (~Thanatos@197.210.64.65) (Ping timeout: 252 seconds)
[08:37:59] *** Joins: bandit_za (~bandit@185.195.232.173)
[08:38:09] <bandit_za> hi djangonaughts
[08:40:25] <bandit_za> I'm signing PDF documents with endesive (RSA public/private key pair). I'd prefer not to store the pvt key in plain text on my server. Is there a 0 knowledge strategy for encrypting the private key or deriving it from the session such that it can be proved that the server didn't sign anything maliciously (ie it was a user-initiated action)
[08:41:26] <bandit_za> I considered encrypting it with the user's password and then decrypting on login and storing it in the session...but then it's in the dB in the session, anyways. But still might be better than storing it in plain text.
[08:42:05] *** Joins: Thanatos (~Thanatos@105.112.41.209)
[08:44:04] *** Quits: ThanatosJ (~Thanatos@197.210.64.65) (Ping timeout: 265 seconds)
[08:44:29] <daniel2> Okay, a little bit confused on how to write this.  I have a model called Network called Network, and a related onetomany model called NetworkUser, NetworkUser has a count field that has the current count of the Network model at a certain time.  I'm trying to order Network, by NetworkUser.count, using the latest row of NetworkUser for  each Network object.
[08:49:49] *** Joins: ThanatosJ (~Thanatos@105.112.41.209)
[08:51:16] *** Quits: Thanatos (~Thanatos@105.112.41.209) (Read error: Connection reset by peer)
[08:54:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[08:54:54] <bandit_za> daniel2: what does "current count of the Network model" mean?
[08:56:39] *** Joins: fikran (~fikran@user/fikran)
[09:04:15] <evidlo> I'm using django-rest-framework, but for some reason the ReDoc documentation page is empty: https://gitlab.engr.illinois.edu/cubesat/ground-station/moc-website/-/tree/dev/django/api
[09:04:27] <evidlo> anything I can check why this is happening?
[09:04:52] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75) (Ping timeout: 252 seconds)
[09:11:20] <serafeim> hello friends
[09:20:03] *** Joins: Thanattt (~Thanatos@105.112.41.209)
[09:20:53] *** Joins: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl)
[09:22:34] *** Quits: Thanattt (~Thanatos@105.112.41.209) (Read error: Connection reset by peer)
[09:22:58] *** Quits: ThanatosJ (~Thanatos@105.112.41.209) (Ping timeout: 252 seconds)
[09:23:26] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:28:33] *** Joins: sandeepk (~sandeepk@202.14.122.154)
[10:04:38] *** Quits: simplicity (~yti@user/simplicity) (*.net *.split)
[10:04:38] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (*.net *.split)
[10:04:38] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (*.net *.split)
[10:04:39] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (*.net *.split)
[10:04:39] *** Quits: audiocat (~audio@cpe-24-27-99-134.tx.res.rr.com) (*.net *.split)
[10:04:39] *** Quits: sharpertool (sid80151@hampstead.irccloud.com) (*.net *.split)
[10:04:39] *** Quits: FurCoatStarlette (FurCoatSta@159.196.89.115) (*.net *.split)
[10:04:39] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (*.net *.split)
[10:04:39] *** Quits: bjb (~bjb@sourcerer.ca) (*.net *.split)
[10:04:39] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[10:04:39] *** Quits: duoi (~duoi@user/duoi) (*.net *.split)
[10:04:39] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[10:04:39] *** Quits: jasonbraganza (~jasonbrag@user/jasonbraganza) (*.net *.split)
[10:04:39] *** Quits: dkliban (~dkliban@nat-pool-rdu-t.redhat.com) (*.net *.split)
[10:04:39] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[10:04:39] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (*.net *.split)
[10:04:39] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[10:04:39] *** Quits: jug (~jug@user/jug) (*.net *.split)
[10:04:39] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[10:04:39] *** Quits: jraitamaa (~smuxi@alpha.smentos.com) (*.net *.split)
[10:04:39] *** Quits: tureba (~tureba@tureba.org) (*.net *.split)
[10:04:39] *** Quits: okraits (~okraits@v2202004119013114857.ultrasrv.de) (*.net *.split)
[10:04:39] *** Quits: easter_egg (~jeffry@user/easter-egg/x-4406379) (*.net *.split)
[10:10:56] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Quit: The Lounge - https://thelounge.chat)
[10:11:48] *** Joins: cryocaustik7 (~cryocaust@user/cryocaustik)
[10:12:17] *** Quits: cryocaustik7 (~cryocaust@user/cryocaustik) (Client Quit)
[10:13:07] *** Joins: cryocaustik7 (~cryocaust@user/cryocaustik)
[10:26:26] *** Joins: simplicity (~yti@user/simplicity)
[10:26:26] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[10:26:26] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[10:26:26] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[10:26:26] *** Joins: audiocat (~audio@cpe-24-27-99-134.tx.res.rr.com)
[10:26:26] *** Joins: sharpertool (sid80151@hampstead.irccloud.com)
[10:26:26] *** Joins: FurCoatStarlette (FurCoatSta@159.196.89.115)
[10:26:26] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[10:26:26] *** Joins: bjb (~bjb@sourcerer.ca)
[10:26:26] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[10:26:26] *** Joins: duoi (~duoi@user/duoi)
[10:26:26] *** Joins: shodan45 (~quassel@107.161.22.155)
[10:26:26] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[10:26:26] *** Joins: jasonbraganza (~jasonbrag@user/jasonbraganza)
[10:26:26] *** Joins: dkliban (~dkliban@nat-pool-rdu-t.redhat.com)
[10:26:26] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[10:26:26] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[10:26:26] *** Joins: jug (~jug@user/jug)
[10:26:26] *** Joins: rb (~augh@theguntretort.com)
[10:26:26] *** Joins: jraitamaa (~smuxi@alpha.smentos.com)
[10:26:26] *** Joins: tureba (~tureba@tureba.org)
[10:26:26] *** Joins: okraits (~okraits@v2202004119013114857.ultrasrv.de)
[10:26:26] *** Joins: easter_egg (~jeffry@user/easter-egg/x-4406379)
[10:27:18] *** Joins: pycode (~pycode@2001:b07:5d28:551:7b0b:19fa:d311:127d)
[10:28:45] *** Quits: rb (~augh@theguntretort.com) (Max SendQ exceeded)
[10:29:16] *** Joins: rwb (~augh@theguntretort.com)
[10:40:19] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[10:47:19] *** Quits: dor (~erg@78.11.12.207) (Ping timeout: 265 seconds)
[10:57:12] *** Joins: pidroid1 (~pidroid@user/pidroid)
[10:58:26] *** Quits: pidroid (~pidroid@user/pidroid) (Ping timeout: 265 seconds)
[10:58:38] *** pidroid1 is now known as pidroid
[10:59:24] *** Joins: Thanattt (~Thanatos@105.112.41.209)
[11:04:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[11:06:47] *** Joins: fikran (~fikran@user/fikran)
[11:12:32] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[11:15:46] *** Quits: bandit_za (~bandit@185.195.232.173) (Ping timeout: 252 seconds)
[11:20:29] *** Joins: dor (~erg@78.11.12.207)
[11:21:46] *** Quits: pidroid (~pidroid@user/pidroid) (Ping timeout: 252 seconds)
[11:27:10] *** Joins: lazerlapin (~lazerlapi@2405:6580:b0c0:4200:ac08:8774:7e5b:2a4)
[11:27:32] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[11:30:14] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[11:40:13] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:40:14] *** rwb is now known as rb
[11:41:07] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[11:41:18] *** Joins: bandit_za (~bandit@185.195.232.173)
[11:52:36] *** Quits: Thanattt (~Thanatos@105.112.41.209) (Quit: Leaving)
[11:52:38] *** Joins: dre_ (~dre@2001:8003:c932:c301:d133:6382:8c24:177b)
[11:55:08] *** Quits: bandit_za (~bandit@185.195.232.173) (Remote host closed the connection)
[12:03:42] *** Joins: azed (~azed@154.107.100.129)
[12:05:48] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: No Ping reply in 180 seconds.)
[12:07:48] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:13:01] *** Quits: gitly (~gitly@85.255.237.129) (Ping timeout: 245 seconds)
[12:14:03] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[12:15:12] *** Joins: gitly (~gitly@85.255.234.91)
[12:19:14] *** Joins: timkofu (~timkofu@user/timkofu)
[12:19:17] <timkofu> Hi
[12:21:16] <carloratm> Just out of curiosity, what makes a folder an app?
[12:21:46] <GinFuyou> AppCongig class
[12:21:51] <GinFuyou> *Config
[12:22:02] <carloratm> ah sure
[12:22:18] *** Joins: thiras (~thiras@user/thiras)
[12:22:22] <GinFuyou> otherwise it's just a python module
[12:23:00] <GinFuyou> mmm, poor wording probably. It's a python module with appconfig.
[12:31:14] *** Quits: dor (~erg@78.11.12.207) (Ping timeout: 265 seconds)
[12:35:21] *** Joins: dor (~erg@78.11.12.207)
[12:35:34] *** Joins: kydd (~kydd@212.237.178.212)
[12:40:15] <kydd> Hi! I am trying to creating a new object, but Django says that it violates the unique primary key constraint. However, I do not define the primary key that violates it, and it should be automatic field. What is wrong? https://dpaste.org/GsKT
[12:42:32] <knbk> kydd: seems to be a problem with the autoincrement sequence. `python manage.py sqlsequencereset <app_label>` gives you the SQL you need to run to fix it
[12:42:50] *** Quits: dor (~erg@78.11.12.207) (Ping timeout: 265 seconds)
[12:49:57] <kydd> knbk: Ah, that might be it. I wonder why this happens? Is it because I create some data from inside migrations for that specific app?
[12:51:43] <knbk> it depends on the database, some don't like it if you manually specify a value for an auto-increment column
[12:55:52] *** Quits: azed (~azed@154.107.100.129) (Quit: WeeChat 3.3)
[12:56:36] *** Joins: dor (~erg@78.11.12.207)
[12:59:24] <serafeim> iirc the sequences break rarely but there are particular circumstances that will break thhem
[12:59:37] <serafeim> creatting data from migrations does not break the sequences
[13:01:56] <apollo13> kydd: it happens on postgresql if you insert a row with a pk set, then you need to increase the sequence to a value above the max(sequence_column) of the table
[13:02:11] <apollo13> serafeim: depends on how the data is created, you can easily break it from migrations
[13:02:33] <apollo13> ie User.objects.create(pk=1) and then the next User().save() will fail
[13:02:54] <serafeim> apollo13: yes if you do improper things of course you can break them. however normally it shouldn't break
[13:03:17] <apollo13> well if all people would do proper things we would not need this channel, would we? :D
[13:03:27] <serafeim> i mean you may reset the sequences from a migration
[13:03:43] <serafeim> lol yes probably
[13:07:53] <kydd> +apollo13: That sounds about right. I have some migrations that install data from fixtures, where the PKs are defined. I assume I need to insert the `sqlsequencereset` before me latter migrations?
[13:08:00] <serafeim> i remember a particular case where it always broken my sequences and needed to reset the sequences. i had to run the command `Insert into table X select * from table Y` (where Y was a copy of X). this would break the sequence of X
[13:08:14] <apollo13> kydd: jupp kinda
[13:10:42] <kydd> Alright! THanks, serafeim and apollo13!
[13:11:22] <apollo13> kydd: if possible use sequences with natural keys
[13:11:31] <apollo13> uhm not sequences fixtures
[13:11:35] <apollo13> then you do not have that problem
[13:13:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[13:15:47] <kydd> Ah, I see. You learn something every day :)
[13:16:02] *** Joins: pidroid (~pidroid@user/pidroid)
[13:16:08] *** Joins: fikran (~fikran@user/fikran)
[13:16:40] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:18:59] <kydd> Or should I say, "I" learn something every day
[13:49:44] *** Joins: enuit (~enuit@p5dc59c55.dip0.t-ipconnect.de)
[13:53:32] *** Quits: dre_ (~dre@2001:8003:c932:c301:d133:6382:8c24:177b) (Quit: Leaving)
[13:56:02] <enuit> Hi everyone,
[13:56:35] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 246 seconds)
[13:57:08] <enuit> I have a table from which I want to select the newest B of every category A. I am able to write a SQL Statement for that, but I can't translate it into the ORM. I have put an example here: https://dpaste.org/Nr4U
[13:57:30] <enuit> Do you have any idea how I can generate that efficiently with the ORM on a mysql database?
[13:57:40] <serafeim> enuit: you need to use annotate
[13:57:50] <serafeim> and the Max function
[13:59:26] <enuit> and then annotate the Max create date of each group to its members?
[14:01:32] <enuit> like in this example? https://gist.github.com/ryanpitts/1304725/b45a12e835fded8afa5c6f59ea0e4aff9d2b6405
[14:04:47] <serafeim> yes that seems fine
[14:06:01] *** Joins: jbooker (~Guest53@90.253.74.158)
[14:07:27] <jbooker> Hi all. I am trying to deploy an app called django-helpdesk. I've got it all migrated and everything, and the app appears to work, but it includes some static files (css, js, images etc) which aren't being served properly. I've looked at the source for the django-helpdesk repo and the urls.py doesn't mention the static files at all
[14:07:56] <serafeim> jbooker: the static files need to be served by your web server
[14:07:58] <serafeim> i.e apache,  nginx etc
[14:08:01] <jbooker> If I run django-helpdesk in editable mode from source then it obviously works because there's a `static/` folder in the distribution.
[14:08:24] <jbooker> OK, the problem is I don't know WHERE they are
[14:08:30] <enuit> did you run "python manage.py collectstatic" and set the reverse proxy up to find these files?
[14:08:32] <jbooker> they're in my virtualenv somewhere, as they're installed with the app
[14:08:44] <serafeim> jbooker: there's a STATIC_ROOT setting you need to setup
[14:08:51] <serafeim> this is where the static files will be copied
[14:08:56] <jbooker> hm. I'm not configuring nginx yet, I'm connecting to gunicorn directly
[14:09:12] <serafeim> gunicorn won't serve your static files
[14:09:16] <serafeim> unless you use something like whitenois
[14:09:38] <jbooker> OK. I can set up nginx, the problem is I don't know how to reference where these files are
[14:09:49] <serafeim> i told you
[14:09:53] <jbooker> I installed django-helpdesk with pip, and i've started a fresh django app and imported it
[14:09:57] <serafeim> the files will go to your STATIC_ROOT folder
[14:10:36] <serafeim> for example in a project i have the following configuration: STATIC_ROOT = "/home/serafeim/edla/static"
[14:10:43] <jbooker> OK I have STATIC_URL configured (default done by manage.py) but it didn't know about STATIC_ROOT
[14:10:52] <serafeim> so the files will go to that directory after collectstatic
[14:11:04] *** Joins: iomari891 (~iomari891@105.112.138.38)
[14:11:07] <jbooker> Yes I understand static_root - I could create a directory there and serve my stuff, but I think it was collectstatic that I am missing
[14:11:18] <serafeim> ok
[14:12:44] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[14:12:59] <jbooker> so i configured a directory which is one directory up from my application, so i have a virtualenv directory `env`, an `app` directory where my application lives and `static` which i configured as the `STATIC_ROOT` with `'../static/'` and it says it's copied 800 files
[14:13:18] <jbooker> so now I need to configure nginx, i guess. Never done that before outside of docker, so that should be fun!
[14:13:28] <serafeim> it's not difficult
[14:14:04] <serafeim> i just add a config like this for the static files https://dpaste.org/Hedy
[14:17:16] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[14:34:52] <jbooker> Thanks so much!
[14:35:01] <serafeim> no prob
[14:35:58] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 252 seconds)
[14:38:18] *** Joins: iomari891 (~iomari891@105.112.138.38)
[14:44:46] *** Joins: code1 (~code1@2001:470:69fc:105::c807)
[14:50:57] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:57:13] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[14:58:12] *** Quits: pycode (~pycode@2001:b07:5d28:551:7b0b:19fa:d311:127d) (Ping timeout: 268 seconds)
[14:58:35] <jbooker> @serafeim may i ask why you use 'alias' instead of 'root' in your nginx declaration for the static directory?
[14:58:51] <serafeim> can't remember :)
[14:58:58] <serafeim> i use this for years
[15:10:53] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[15:23:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[15:25:29] *** Joins: fikran (~fikran@user/fikran)
[15:29:04] *** Joins: Atque (~Atque@user/atque)
[15:38:23] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[15:40:24] *** Joins: explore (uid233125@id-233125.hampstead.irccloud.com)
[15:48:26] *** Quits: sandeepk (~sandeepk@202.14.122.154) (Ping timeout: 245 seconds)
[15:54:16] *** Joins: sandeepk (~sandeepk@202.14.122.154)
[15:56:25] *** Joins: ccurvey (~chris@pool-173-63-214-62.nwrknj.fios.verizon.net)
[15:57:05] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:57:32] <ccurvey> how does the Dev Server (python manage.py runserver) determine which files to watch for auto-reload?
[16:00:50] <Lartza> It polls file modification times constantly and in my experience is restricted to .py filels
[16:00:51] <Lartza> *files
[16:01:34] <Lartza> Probably because static files and templates are updated without a reload
[16:01:43] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[16:02:28] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[16:05:52] <ccurvey> but how does it know which files to watch?  I've inherited a project with an odd project layout, and I would like it to watch files in a non-standard location.
[16:06:05] *** Quits: sandeepk (~sandeepk@202.14.122.154) (Ping timeout: 246 seconds)
[16:08:00] *** Quits: timkofu (~timkofu@user/timkofu) (Quit: Lost terminal)
[16:08:37] <Lartza> Well I'd imagine it watches the folder it's in but I'd have to confirm
[16:11:27] <Lartza> And no it's not really configurable like that I don't think
[16:35:29] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Remote host closed the connection)
[16:43:12] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:47:12] *** Joins: node1 (~node1@user/node1)
[16:59:28] <jbooker> @serafe
[17:00:02] <jbooker> @serafeim is it invalid to have an nginx location defined as /, then another further down the file as /static/?
[17:00:16] <jbooker> I can't seem to get nginx to follow your example
[17:04:37] <jbooker> @serafeim never mind, I just found out why you used 'alias' instead of 'root' :D
[17:09:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:13:59] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[17:33:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[17:33:53] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:34:50] *** Joins: fikran (~fikran@user/fikran)
[17:35:35] *** Quits: lazerlapin (~lazerlapi@2405:6580:b0c0:4200:ac08:8774:7e5b:2a4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:37:37] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:40:05] <jbooker> I am having trouble with templates not loading properly
[17:40:13] *** Joins: sandeepk (~sandeepk@202.14.122.154)
[17:40:32] <jbooker> the error page shows quite clearly four paths it has tried, and one of them is correct and I've checked the file exists, but Django is claiming it's not there. Any advice?
[17:40:44] <jbooker> this is from that same django-helpdesk application
[17:42:58] <jbooker> actually, no it doesn't. In the paths searched there's a missing 'helpdesk' subdirectory in the path
[17:49:30] <jbooker> never mind. I didn't read the instructions properly
[17:50:12] *** Quits: explore (uid233125@id-233125.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:53:02] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[18:00:41] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 264 seconds)
[18:03:49] *** Joins: defjam (~eb0t@90.213.43.87)
[18:08:00] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:26:11] *** Quits: sandeepk (~sandeepk@202.14.122.154) (Remote host closed the connection)
[18:27:12] *** Joins: zircona_ (~zircona@c-73-207-108-132.hsd1.ga.comcast.net)
[18:28:01] *** Joins: mattil (~mattil@87-92-67-65.bb.dnainternet.fi)
[18:32:25] *** Quits: mattil (~mattil@87-92-67-65.bb.dnainternet.fi) (Ping timeout: 252 seconds)
[18:34:39] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 268 seconds)
[18:40:07] *** Quits: audiocat (~audio@cpe-24-27-99-134.tx.res.rr.com) (Ping timeout: 252 seconds)
[18:43:11] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[18:45:43] *** Joins: iomari891 (~iomari891@105.112.138.38)
[18:50:28] *** Quits: enuit (~enuit@p5dc59c55.dip0.t-ipconnect.de) (Quit: Client closed)
[18:54:29] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[18:58:29] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[18:58:43] *** Joins: molavy1 (~hosein@185.135.230.4)
[18:58:53] <molavy1> Hi there
[18:58:59] <molavy1> can someone help me with this
[18:59:15] <molavy1> https://dpaste.com/6HY8RBWFU
[18:59:35] <molavy1> i try make simple serializer by add method to queryset
[19:00:09] *** Quits: dor (~erg@78.11.12.207) (Ping timeout: 268 seconds)
[19:01:35] <molavy1> with no success , it return method data not found
[19:01:52] <molavy1> data is method i try add to queryset
[19:04:56] <GinFuyou> model's manager is an instance, and you have a class
[19:08:34] <molavy1> thanks lovely #GinFuyou
[19:16:25] *** Quits: defjam (~eb0t@90.213.43.87) (Ping timeout: 252 seconds)
[19:18:06] *** Joins: defjam (~eb0t@90.213.43.87)
[19:29:37] *** Joins: stdout (~stdout@216.163.21.11)
[19:32:27] *** Joins: dor (~erg@78.11.12.207)
[19:32:44] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[19:34:23] *** Quits: molavy1 (~hosein@185.135.230.4) (Quit: Leaving.)
[19:34:28] *** Joins: slav0nic (slav0nic@python.su)
[19:35:41] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:37:04] *** Joins: zcheng3 (~zcheng3@d198-53-38-251.abhsia.telus.net)
[19:41:49] <stdout> After I save my model data, Can I reference the UUID (or any other model value) from the model object i just saved? https://paste.centos.org/view/473b098b   Something like my_uuid = Log.objects.filter(uuid=new_entry.uuid) ?
[19:42:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[19:43:08] <Momentum> does anyone have any idea why logging doesn't work inside DRF serializer class methods? or am i missing something?
[19:43:41] *** Joins: Ergo^ (~ergo@91.238.59.144)
[19:44:11] *** Joins: fikran (~fikran@user/fikran)
[19:45:53] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:50:34] *** Quits: dor (~erg@78.11.12.207) (Ping timeout: 252 seconds)
[19:50:51] <knbk> Momentum: first things to check would be: 1) does the logger work at all, outside the class method with the same log level? and 2) is the logging code actually called?
[19:51:41] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[19:51:47] <knbk> there's nothing magical about logging in DRF serializers or class methods, so in general it works just fine
[19:53:28] *** Joins: dor (~erg@78.11.12.207)
[19:57:42] *** Quits: zircona_ (~zircona@c-73-207-108-132.hsd1.ga.comcast.net) (Ping timeout: 260 seconds)
[20:00:35] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[20:01:39] <Momentum> knbk: doesn't work inside serializers.py and works everywhere else
[20:02:59] <Momentum> yeah just weird anyway i'll check some more
[20:04:00] <Momentum> oh sorry it does work inside the serializers.py file
[20:04:18] <Momentum> just not in the class methods
[20:09:31] *** Joins: pipapipapipo (~peppbel@172.58.45.38)
[20:15:54] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 260 seconds)
[20:16:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:25:40] *** Joins: bbbbbb (~peppbel@172.58.45.222)
[20:28:51] *** Quits: pipapipapipo (~peppbel@172.58.45.38) (Ping timeout: 245 seconds)
[20:29:25] *** Joins: audiocat (~audio@2603-8081-1800-1546-4f95-adb2-1cba-e9e9.res6.spectrum.com)
[20:29:57] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[20:30:32] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[20:33:18] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[20:35:09] *** Joins: xavierdarkness_ (~xavierdar@user/xavierdarkness)
[20:35:11] *** Quits: xavierdarkness (~xavierdar@user/xavierdarkness) (Ping timeout: 265 seconds)
[20:35:38] *** xavierdarkness_ is now known as xavierdarkness
[20:36:05] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Ping timeout: 264 seconds)
[20:36:08] *** Quits: ccurvey (~chris@pool-173-63-214-62.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[20:38:07] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[20:47:46] *** Quits: bbbbbb (~peppbel@172.58.45.222) (Ping timeout: 252 seconds)
[21:06:43] *** Joins: ssb10 (~ssb10@ool-18bd347f.dyn.optonline.net)
[21:17:54] *** Joins: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it)
[21:23:56] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[21:37:28] *** Joins: node1 (~node1@user/node1)
[21:41:52] *** Quits: jbooker (~Guest53@90.253.74.158) (Quit: Client closed)
[21:48:31] *** Joins: Kalov (~Thunderbi@179.56.68.20)
[21:51:39] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[21:53:32] *** Joins: fikran (~fikran@user/fikran)
[22:04:08] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:04:38] *** Quits: audiocat (~audio@2603-8081-1800-1546-4f95-adb2-1cba-e9e9.res6.spectrum.com) (Ping timeout: 260 seconds)
[22:18:13] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[22:22:56] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[22:26:39] *** Joins: node1 (~node1@user/node1)
[22:27:56] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[22:30:23] <daniel2> <bandit_za> daniel2: what does "current count of the Network model" mean? <= So NetworkUser has 3 fields, network_id, count, timestamp.  So I want to sort Network model using the latest NetworkUser object for each Network (by timestamp) ordering by the highest count from NetworkUser to the lowest count.
[22:34:18] *** Joins: node1 (~node1@user/node1)
[22:35:01] *** Quits: zcheng3 (~zcheng3@d198-53-38-251.abhsia.telus.net) (Ping timeout: 252 seconds)
[22:38:38] *** Quits: node1 (~node1@user/node1) (Client Quit)
[22:39:01] *** Joins: node1 (~node1@user/node1)
[22:40:30] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[22:42:58] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[22:47:08] *** Joins: thiras (~thiras@user/thiras)
[22:54:04] *** Parts: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it) ()
[23:00:02] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:02:58] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[23:04:25] *** dm1 is now known as vlt
[23:07:38] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 260 seconds)
[23:10:34] *** Joins: iomari891 (~iomari891@105.112.138.38)
[23:12:41] *** Joins: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29)
[23:29:38] *** Joins: djapo (~archangel@user/djapo)
[23:31:18] *** Joins: pycode (~pycode@2001:b07:5d28:551:9bbb:9a2e:32bf:a227)
[23:37:19] *** Quits: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[23:39:51] *** Quits: Kalov (~Thunderbi@179.56.68.20) (Quit: Kalov)
[23:54:28] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
