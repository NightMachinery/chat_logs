[00:00:36] *** Joins: Lost (cold@user/lost)
[00:01:14] *** Quits: jhchabran (~jhchabran@user/jhchabran) (Quit: ZNC 1.8.2 - https://znc.in)
[00:01:18] *** Joins: bancroft (~bancroft@142.162.53.67)
[00:01:43] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[00:01:59] *** Joins: jhchabran (~jhchabran@user/jhchabran)
[00:09:47] *** Quits: Denver (~Denver@174-16-236-178.hlrn.qwest.net) (Quit: Textual IRC Client: www.textualapp.com)
[00:15:17] *** Quits: bancroft (~bancroft@142.162.53.67) (Ping timeout: 240 seconds)
[00:16:37] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[00:16:57] <b0nn> https://cs.opensource.google/go/go/+/master:src/runtime/map.go;l=625;bpv=0 looks to be the insertion; it uses t.elemsize, which is the size of the slot https://cs.opensource.google/go/go/+/master:src/runtime/type.go;drc=master;bpv=0;l=356, which I /suspect/ is going to be looking at https://cs.opensource.google/go/go/+/master:src/runtime/map.go;drc=master;bpv=0;l=1416
[00:19:14] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[00:25:10] *** Joins: bancroft (~bancroft@142.162.53.67)
[00:26:42] *** Joins: phoenixh (~phoenixh@p200300dd6f1e2a00bb785dfa58db4805.dip0.t-ipconnect.de)
[00:29:21] <fizzie> `zeroVal`, as far as I can tell, is used as a special filled-with-zero-bytes region when map access returns the zero value of its element type (as long as the size of the element type is <= maxZero), not as anything that's specific to zero-*sized* types.
[00:29:32] <fizzie> When the element type is bigger than that, reflectdata.ZeroAddr is called instead, from https://cs.opensource.google/go/go/+/master:src/cmd/compile/internal/walk/expr.go;l=773
[00:29:58] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:30:17] *** Quits: bancroft (~bancroft@142.162.53.67) (Ping timeout: 240 seconds)
[00:35:55] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:36:25] <b0nn> That (eventually) takes you to https://cs.opensource.google/go/go/+/master:src/cmd/compile/internal/types/size.go;drc=master;l=175
[00:36:36] <b0nn> Which doesn't give a size :\
[00:37:00] <b0nn> well, o can be zero
[00:38:04] <fizzie> That's by the way where the https://github.com/golang/go/issues/9401 tweak happens, https://cs.opensource.google/go/go/+/master:src/cmd/compile/internal/types/size.go;l=222-228;drc=master
[00:38:15] <b0nn> Yeah - did see that :)
[00:40:00] <b0nn> I got there from https://cs.opensource.google/go/go/+/master:src/cmd/compile/internal/types/size.go;l=518;drc=master but if w is zero, then https://cs.opensource.google/go/go/+/master:src/cmd/compile/internal/types/size.go;l=551;drc=master
[00:40:27] <b0nn> I cannot see t.align being set to a non-zero value
[00:43:49] <fizzie> There's an assignment to t.align in calcStructOffset, https://cs.opensource.google/go/go/+/master:src/cmd/compile/internal/types/size.go;l=234;drc=master
[00:44:01] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[00:44:07] <fizzie> (`maxalign` starts as 1 and is only ever increased.)
[00:45:31] <b0nn> damned pointers
[00:46:40] <fizzie> I think I'll need to pivot to something else though. I did come across https://www.mail-archive.com/golang-nuts@googlegroups.com/msg37471.html on the topic of `maptype` in general (not specifically for zero-sized maps), but the code link is broken, and might not really answer the question anyway.
[00:49:07] <fizzie> (Though the link _was_ probably to something like https://cs.opensource.google/go/go/+/master:src/cmd/compile/internal/reflectdata/reflect.go;l=1089 which goes back to types.CalcSize.)
[00:49:17] <fizzie> Anyway, closing all those tabs now. :)
[00:49:29] <b0nn> Heh - I have to argue with Apple support (screen is brokenand it's a warrenty claim)
[00:54:56] *** Joins: bancroft (~bancroft@142.162.53.67)
[01:01:25] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 240 seconds)
[01:03:00] *** Joins: jespada (~jespada@87.74.33.157)
[01:03:17] *** Joins: s0k1t_ (~s0k1t@86.106.121.31)
[01:05:24] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:13:21] *** Joins: jla (~jordi@64.225.79.195)
[01:14:56] *** Joins: Tach (~Tach@user/tach)
[01:15:45] <Tach> Can someone tell me what createChannel does here? I don't get it and cannot find anything about it https://github.com/shinebayar-g/ufw-docker-automated/blob/2c2d387b703c95b6bfd9a09f198c9f93d819a9cd/main.go#L58
[01:17:47] <ikke> createChannel is defined here: https://github.com/shinebayar-g/ufw-docker-automated/blob/2c2d387b703c95b6bfd9a09f198c9f93d819a9cd/main.go#L37
[01:18:00] <bpalmer> it's sending that pointer over the channel.
[01:18:09] <bpalmer> Have you used channels before, tach?
[01:18:13] <b0nn> yeah, an the address of container is being placed in that channel for reading by another goroutine
[01:18:32] <ikke> https://go.dev/tour/concurrency/2
[01:18:39] <Tach> bpalmer nope so I was trying to find anything about it.
[01:18:47] <ikke> ^
[01:19:07] <Tach> ikke ok thanks, b0nn reading in which way ?
[01:19:23] <fizzie> See https://github.com/shinebayar-g/ufw-docker-automated/blob/2c2d387b703c95b6bfd9a09f198c9f93d819a9cd/ufwhandler/create.go#L25 for the other end in that case.
[01:20:34] <fizzie> (Not that a `range` loop is the only way to read from a channel or anything, the tour explains the others.)
[01:22:20] <Tach> fizzie OK  but that is just a called function, is a Channel something special ?
[01:22:43] <fizzie> Tach: The channel is passed as a parameter to the function.
[01:23:00] <fizzie> Tach: From line 42 of main.go in your first paste.
[01:25:53] <fizzie> The `ch` parameter in the function is the same channel as the `createChannel` in main. The `for container := range ch { ... }` loop is reading (or "receiving") the values those other places (main, and ufwhandler.Sync) are writing (or "sending") to it.
[01:28:24] <Tach> fizzie indeed, true I was blind :D
[01:28:50] <Tach> Is it better to use the cmd layout here actually ?
[01:31:25] *** Quits: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net) (Remote host closed the connection)
[01:31:39] *** Joins: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net)
[01:34:17] *** Quits: bancroft (~bancroft@142.162.53.67) (Ping timeout: 240 seconds)
[01:39:20] <Tach> fizzie so the order doesn't matter in the code there ?
[01:43:07] *** Quits: Tach (~Tach@user/tach) (Quit: Tach)
[01:43:30] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[01:44:33] *** Joins: Tach (~Tach@user/tach)
[01:44:41] <Tach> whoops that was a standby :)
[01:45:16] *** Joins: fikran (~fikran@user/fikran)
[01:48:12] *** Quits: phoenixh (~phoenixh@p200300dd6f1e2a00bb785dfa58db4805.dip0.t-ipconnect.de) (Quit: Leaving)
[01:48:34] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[01:56:07] *** Quits: dr0n (~nabromov@94.11.23.235) (Quit: WeeChat 3.3)
[02:07:33] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[02:08:36] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[02:13:52] *** Quits: whaley (~whaley@097-082-197-228.res.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[02:18:36] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[02:19:36] *** Quits: Tach (~Tach@user/tach) (Quit: Tach)
[02:21:56] *** Joins: Tach (~Tach@user/tach)
[02:24:14] *** Joins: bancroft (~bancroft@142.162.53.67)
[02:28:20] *** Quits: khyr0n (~khyr0n@2806:2f0:9141:835f:f234:49cd:2a30:272f) (Quit: Leaving)
[02:28:39] *** Joins: khyr0n (~khyr0n@2806:2f0:9141:835f:f234:49cd:2a30:272f)
[02:28:57] *** Quits: beholders_eye (~weechat@2804:1b3:70c3:13a2:deb8:2ff4:2321:ba0c) (Ping timeout: 240 seconds)
[02:36:27] *** Joins: boof (~rickybob@gateway/vpn/pia/rickybob)
[02:36:29] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Read error: Connection reset by peer)
[02:44:05] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:48:08] *** s0k1t_ is now known as s0k1t
[02:51:39] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[02:53:11] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Read error: Connection reset by peer)
[02:53:23] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[02:55:02] *** Quits: jinks (~jinks@2001:470:1f18:3aa:1d8:0:1c:34ac) (Ping timeout: 268 seconds)
[02:58:56] *** Joins: beholders_eye (~weechat@2804:1b3:70c3:13a2:deb8:2ff4:2321:ba0c)
[03:11:09] *** Quits: lilgopher (~textual@2601:241:8000:38f0:6415:ac65:3de6:8743) (Quit: Textual IRC Client: www.textualapp.com)
[03:11:54] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Quit: SureVoIP: http://www.surevoip.co.uk)
[03:16:16] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:17:47] *** Joins: arinov (~arinov@213.194.126.155)
[03:30:03] *** Quits: johnjaye (~pi@154.6.152.74) (Read error: No route to host)
[03:33:58] *** Quits: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net) (Remote host closed the connection)
[03:35:02] *** Joins: johnjaye (~pi@154.6.152.74)
[03:35:29] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:39:15] <mrus> is it possible that, if I have pointers to items in a slice, and I run that slice through sort.SliceStable, my pointers get messed up?
[03:39:46] *** Quits: The_Loko (~The_Loko@79.116.24.80) (Quit: Leaving)
[03:40:01] <bpalmer> what do you mean "pointers get messed up"?
[03:40:12] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[03:40:24] <bpalmer> offhand it sounds unlikely, but you'd have to give more details.
[03:40:32] <KirkMcDonald> The pointers will continue to point to the same index in the slide.
[03:40:34] <KirkMcDonald> slice*
[03:40:34] *** Joins: c10l (~c10l@user/c10l)
[03:40:54] <mrus> to the same *index*?
[03:41:33] <bpalmer> also, it matters : are these "pointers" to "items in a slice" or "pointers to items" in a slice?
[03:41:58] <KirkMcDonald> Is the slice []*T or []T, in other words.
[03:41:59] <bpalmer> Sounds like Kirk and I parsed it differently.
[03:42:05] <mrus> so what I'm doing is, I'm building that slice []items and meanwhile I'm building a hashtable (basically a map[string]*item)
[03:42:19] <mrus> then I run the sort on []items
[03:42:21] <KirkMcDonald> You may want it to be []*items
[03:42:34] *** Joins: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net)
[03:43:20] <KirkMcDonald> But if you take the address of a slice index operation, you are getting a pointer to that specific index of the slice.
[03:43:24] <bpalmer> mrus: if the slice is []items, then when sorting, each object will be mutated.
[03:43:37] <bpalmer> mrus: your pointers aren't messed up, but the values they're pointing at will be changed.
[03:43:55] <KirkMcDonald> Sorting the slice just assigns values in the slice from one index to another.
[03:44:07] <mrus> I see
[03:44:13] <mrus> thank you, that helped me a ton
[03:44:27] <bpalmer> the code will be something like if less(i, j) { s[i], s[j] = s[j], s[i] }
[03:44:31] <mrus> so basically either first sort and then hashmap or use []*items
[03:44:39] <KirkMcDonald> bpalmer: swap()
[03:45:08] <bpalmer> Oops
[03:45:42] <bpalmer> ah, no, sort.SliceStable takes interface{}, not sort.Interface
[03:45:42] <KirkMcDonald> Oh, wait, I get what you're saying.
[03:46:53] <KirkMcDonald> Yeah, SliceStable takes a less func as the second argument. I'm guessing it has a sort.Interface behind the scenes.
[03:48:02] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[03:51:17] <KirkMcDonald> Ah, interesting. Digging into the source, it looks like it basically have two separate implementations in order to bypass using an interface.
[03:51:24] <KirkMcDonald> s/have/has/
[03:52:01] *** Quits: c10l (~c10l@user/c10l) (Remote host closed the connection)
[03:52:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:54:37] *** Joins: fikran (~fikran@user/fikran)
[04:07:00] *** Joins: kodah (~kodah@user/kodah)
[04:10:02] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[04:11:31] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[04:12:29] *** Joins: noboruma (~noboruma@dynamic-134-180-147-7.gol.ne.jp)
[04:14:51] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[04:32:54] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:33:51] *** Quits: noboruma (~noboruma@dynamic-134-180-147-7.gol.ne.jp) (Ping timeout: 256 seconds)
[04:33:54] *** Quits: gbmor (gbmor@gbmor.org) (Quit: WeeChat 3.3)
[04:34:40] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[04:38:34] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[04:43:57] *** Quits: Kaivo (~Kaivo@user/kaivo) (Ping timeout: 240 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:41] *** Quits: bancroft (~bancroft@142.162.53.67) (Ping timeout: 250 seconds)
[04:47:02] *** Quits: nattiestnate (~nate@114.122.107.61) (Quit: WeeChat 3.4)
[04:47:23] *** Joins: nattiestnate (~nate@114.122.107.61)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:46] *** Joins: lilgopher (~textual@2601:241:8000:38f0:9f3:bcde:cc6:c194)
[05:00:05] *** Joins: noboruma (~noboruma@dynamic-134-180-147-7.gol.ne.jp)
[05:01:07] *** Joins: gbmor (~gbmor@gbmor.org)
[05:01:15] *** Quits: nattiestnate (~nate@114.122.107.61) (Quit: WeeChat 3.4)
[05:01:38] *** Joins: nattiestnate (~nate@114.122.107.61)
[05:04:17] *** Quits: noboruma (~noboruma@dynamic-134-180-147-7.gol.ne.jp) (Ping timeout: 240 seconds)
[05:09:54] *** Joins: Batzy (~quassel@user/batzy)
[05:17:01] *** Quits: beholders_eye (~weechat@2804:1b3:70c3:13a2:deb8:2ff4:2321:ba0c) (Ping timeout: 245 seconds)
[05:19:21] *** Quits: khyr0n (~khyr0n@2806:2f0:9141:835f:f234:49cd:2a30:272f) (Read error: Connection reset by peer)
[05:19:26] *** Joins: khyr0n_ (~khyr0n@fixed-187-188-10-7.totalplay.net)
[05:25:18] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:29:35] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:948c:3b52:b7d:db14)
[05:29:51] *** Joins: vt (~vt@osa.vbc.su)
[05:30:36] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[05:32:34] *** Joins: DM4307842149511 (~DM4307@047-234-129-039.res.spectrum.com)
[05:33:18] <vt> This obviously doesn't work: "var header [16]byte; io.ReadFull(r, header)". Is there an elegant way to achieve this ?
[05:34:29] *** Quits: DM430784214951 (~DM4307@047-234-129-039.res.spectrum.com) (Ping timeout: 256 seconds)
[05:34:31] <bpalmer> header[:]
[05:34:53] <bpalmer> or just make header a slice in the first place
[05:35:04] <bpalmer> header := make([]byte, 16, 16)
[05:35:28] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:35:32] *** DM4307842149511 is now known as DM430784214951
[05:36:52] <vt> bpalmer: thank you ! That's why I searched. It seems that header[:] is copy-less, just a cast from a fixed-size array to a slice, right ?
[05:36:58] <vt> s/why/what/
[05:39:15] <bpalmer> `header[:]` creates a slice that uses the array `header` as its backing array. Cast isn't quite the right way to think about it.
[05:40:12] <bpalmer> the new slice has a length equal to len(header) and capacity equal to len(header)
[05:40:37] *** Quits: lilgopher (~textual@2601:241:8000:38f0:9f3:bcde:cc6:c194) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:40:54] <vt> so better to make a slice in the first place. My thinking was that this header is fixed-size, small and very short-lived (and will not leave the function scope) and the function is called in a loop, so I would have prefered not allocating something into the heap and keep it on the stack.
[05:41:04] <bpalmer> similarly, you could do header[1:4] to create a slice from the array header that has length 4 and capacity 15
[05:42:12] <vt> but maybe I make a false assumption that make() allocates on the heap always. If the compiler sees that both the slice struct and the backing array (the data itself) doesn't leave the function scope, it will just do it on the stack.
[05:42:14] <bpalmer> vt: go figures out what belongs on the heap and what belongs on the stack, based on escape analysis. They're not really concepts in go
[05:42:27] *** Joins: haniaF (~haniaF@79.191.100.173.ipv4.supernova.orange.pl)
[05:42:46] <bpalmer> you can look at the code if you want , but writing in go is typically about letting go of that sort of worry.
[05:42:59] <bpalmer> the generated code if you want
[05:42:59] *** Quits: haniaF_ (~haniaF@83.24.190.184.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[05:52:21] *** Quits: wim (~wim@42.be) (Ping timeout: 265 seconds)
[06:00:23] *** Quits: khyr0n_ (~khyr0n@fixed-187-188-10-7.totalplay.net) (Quit: Leaving)
[06:00:35] *** Joins: khyr0n (~khyr0n@2806:2f0:9141:835f:f234:49cd:2a30:272f)
[06:02:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:03:02] *** Joins: c10l (~c10l@user/c10l)
[06:03:58] *** Joins: fikran (~fikran@user/fikran)
[06:05:00] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[06:08:03] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:08:59] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:948c:3b52:b7d:db14) (Quit: dingdreher)
[06:09:55] *** Joins: haniaF_ (~haniaF@79.191.105.142.ipv4.supernova.orange.pl)
[06:09:57] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:10:17] *** Quits: haniaF (~haniaF@79.191.100.173.ipv4.supernova.orange.pl) (Ping timeout: 240 seconds)
[06:11:46] *** Joins: lilgopher (~textual@2601:241:8000:38f0:9f3:bcde:cc6:c194)
[06:12:30] *** Quits: lilgopher (~textual@2601:241:8000:38f0:9f3:bcde:cc6:c194) (Client Quit)
[06:14:17] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:948c:3b52:b7d:db14)
[06:16:02] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:948c:3b52:b7d:db14) (Client Quit)
[06:17:30] *** Joins: swixi (~swixi___@068-187-235-216.res.spectrum.com)
[06:17:45] *** Quits: nattiestnate (~nate@114.122.107.61) (Quit: WeeChat 3.4)
[06:18:06] *** Joins: nattiestnate (~nate@114.122.107.61)
[06:24:04] *** Quits: swixi (~swixi___@068-187-235-216.res.spectrum.com) (Quit: Leaving)
[06:24:58] *** Joins: swixi (~swixi___@068-187-235-216.res.spectrum.com)
[06:28:01] *** Quits: DM430784214951 (~DM4307@047-234-129-039.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[06:28:20] *** Joins: DM4307842149511 (~DM4307@047-234-129-039.res.spectrum.com)
[06:29:04] *** Joins: wim (~wim@42.be)
[06:31:04] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[06:31:29] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[06:44:44] *** Joins: noboruma (~noboruma@dynamic-134-180-147-7.gol.ne.jp)
[06:49:25] *** Quits: noboruma (~noboruma@dynamic-134-180-147-7.gol.ne.jp) (Client Quit)
[06:49:37] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 240 seconds)
[06:49:52] *** Joins: cfebs (~cfebs@user/cfebs)
[06:52:10] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[06:52:57] *** Quits: boof (~rickybob@gateway/vpn/pia/rickybob) (Read error: Connection reset by peer)
[06:53:09] *** Quits: nattiestnate (~nate@114.122.107.61) (Quit: WeeChat 3.4)
[06:55:00] *** Joins: lalitmee__ (~lalitmee@180.94.32.14)
[06:55:06] *** Joins: nattiestnate (~nate@114.122.104.173)
[07:02:00] *** Joins: lalitmee_ (~lalitmee@180.94.33.168)
[07:04:26] *** Quits: lalitmee__ (~lalitmee@180.94.32.14) (Ping timeout: 260 seconds)
[07:06:17] *** Quits: barnoby (~barnoby@2603-6000-a409-2660-f9d3-2587-b407-8893.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:10:12] *** Joins: bancroft (~bancroft@142.162.53.67)
[07:10:50] *** Quits: swixi (~swixi___@068-187-235-216.res.spectrum.com) (Quit: Leaving)
[07:13:59] *** Joins: souvik (~souvik@103.59.73.116)
[07:14:18] *** Joins: JaCe (~jace@51.15.45.130)
[07:14:32] *** Parts: JaCe (~jace@51.15.45.130) ()
[07:17:43] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:18:17] *** Quits: souvik (~souvik@103.59.73.116) (Ping timeout: 240 seconds)
[07:19:02] *** Joins: souvik (~souvik@80.179.69.245.cable.012.net.il)
[07:27:42] *** Joins: BUSY (~BUSY@user/busy)
[07:28:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:33:53] *** Quits: nattiestnate (~nate@114.122.104.173) (Quit: WeeChat 3.4)
[07:50:36] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Remote host closed the connection)
[07:50:51] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[07:55:38] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[07:57:47] *** Joins: bindu_ (~bindu@user/bindu)
[07:58:33] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[07:59:34] *** bindu_ is now known as bindu
[08:11:28] *** Quits: lalitmee_ (~lalitmee@180.94.33.168) (Remote host closed the connection)
[08:11:29] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[08:12:54] *** Quits: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com) (Quit: KonaArctic)
[08:13:19] *** Joins: fikran (~fikran@user/fikran)
[08:17:11] *** Joins: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com)
[08:17:20] *** Quits: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com) (Client Quit)
[08:19:46] *** Joins: darkapex (~darkapex@user/darkapex)
[08:19:57] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[08:28:12] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[08:29:44] *** Joins: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea)
[08:29:44] *** Quits: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea) (Remote host closed the connection)
[08:29:50] *** Joins: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com)
[08:30:01] *** Quits: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com) (Client Quit)
[08:33:15] *** Joins: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com)
[08:33:26] *** Quits: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com) (Client Quit)
[08:34:09] *** Joins: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com)
[08:44:53] *** Joins: et_ (~et@user/et)
[08:45:17] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[08:45:23] *** et_ is now known as et
[08:49:06] *** Joins: ac5tin (~ac5tin@user/ac5tin)
[08:50:15] <ac5tin> is it possible to create a slice using composition, for example  mylist := make([]ball,0)    mylist = append(mylist,football{})
[08:50:30] <ac5tin> where in this case football is a struct that embeds ball
[08:53:31] <b0nn> https://go.dev/play/p/br26fKFmD7C
[08:59:39] <ac5tin> seems like it's possible if i make the the slice with type of the interface instead of the base type
[09:00:21] <b0nn> Dp you understand the difference between an interface and a "base type"
[09:00:54] <ac5tin> i have a base type that embeds that interface, and then i have another type that embeds the base type
[09:01:50] <b0nn> Suggest you look at this https://go.dev/tour/methods/9
[09:02:08] <ac5tin> so say i have an interface Bouncer and a base type Ball, i have different types like Basketball, Football, Baseball that embeds Ball, and i want to create a slice that loops through these different balls
[09:02:39] <b0nn> It sounds to me like you have interface{} which everything implements
[09:03:42] <ac5tin> does it only work if all my types implements all the functions in the interface
[09:04:06] <b0nn> Yes
[09:04:43] <ac5tin> is it possible to have only my base type implement all the functions of tht interface, and then my other types like Basketball, Football implement one or two functions and then fallback to the one from the base Ball struct?
[09:05:10] <b0nn> TIAS
[09:05:35] <ac5tin> so if i have an interface Bouncer which needs function A, function B and function C,  my Ball struct implements all A,B,C  functions, and i have Football that embeds Ball but only implements function B, would that not work?
[09:06:25] <LiENUS> man is it just me or is go like the ideal language to write something like cups in
[09:07:56] <ac5tin> b0nn: cuz if i try to do that and create a slice, it tells me im missing some methods
[09:08:53] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[09:13:10] *** Joins: barnoby (~barnoby@2603-6000-a409-2660-1821-29f5-eaca-14f7.res6.spectrum.com)
[09:15:38] *** Joins: lilgopher (~textual@2601:241:8000:38f0:9f3:bcde:cc6:c194)
[09:15:52] <ikke> ac5tin: is ball an interface?
[09:16:33] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[09:17:37] *** Quits: s0k1t (~s0k1t@86.106.121.31) (Ping timeout: 240 seconds)
[09:18:06] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[09:20:17] *** Quits: souvik (~souvik@80.179.69.245.cable.012.net.il) (Ping timeout: 240 seconds)
[09:20:27] *** Quits: lilgopher (~textual@2601:241:8000:38f0:9f3:bcde:cc6:c194) (Ping timeout: 268 seconds)
[09:20:57] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[09:21:07] *** Joins: darkapex_ (~darkapex@user/darkapex)
[09:27:41] <bancroft> I'm trying to unmarshal csv which is in [][]string format using a few different libraries (gocarina/gocsv, encoding/csv, jszwec/csvutil) but either i'm not doing it right (highly possible) or just doesn't work. I have something really ugly that works, can someone help me understand the proper way to unmarshal? https://bpa.st/K3QQ
[09:29:55] <bpalmer> ac5tin: it would work as you're describing (if it doesn't, show a test case), but it's misleading to think about embedding like you would inheritance
[09:32:05] <bpalmer> bancroft: can you turn that into a runnable test case for, e.g., the go playground? Instead of taking some command's output, just create a strings.Reader with a hardcoded string (presumably using newlines)
[09:32:51] <bancroft> bpalmer: i'll try
[09:33:22] <bpalmer> bancroft: (you may also want to simplify it a bit; e.g., rather than a test case with a dozen fields, try it with like 3 fields, just so it's simpler :)
[09:33:45] *** Quits: fhs (~fhs@pool-98-113-240-43.nycmny.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:34:04] *** Joins: fhs (~fhs@pool-98-113-240-43.nycmny.fios.verizon.net)
[09:34:45] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[09:34:46] *** Joins: darkapex (~darkapex@user/darkapex)
[09:38:12] *** Joins: souvik (~souvik@80.179.69.245.cable.012.net.il)
[09:38:24] <bpalmer> bancroft: that said, taking another look at it, one significant issue you're going to run into is you're not safely communicating across goroutines
[09:39:45] <bpalmer> bancroft: a simpler example:  func foo() { var a int; go func() { for { a++; time.Sleep(1*time.Second); } }()   ... }  <-- no matter how long the ... takes, the rest of foo may never see a as anything but 0
[09:40:59] <bpalmer> you have to introduce some form of synchronization and memory barrier to ensure the change to a is visible
[09:41:10] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:43:02] <bpalmer> bancroft: take a look at https://pkg.go.dev/sync/atomic#example-Value-Config  , which uses atomic.Value
[09:48:24] <bancroft> bpalmer: there's too many terms in there that I don't understand, i'm just trying to understand types and marshalling now
[09:50:04] <bpalmer> bancroft: ok. also, to make sure: have you looked at the package documentation for encoding/csv ? In particular, the Reader.ReadAll example?
[09:50:40] <bancroft> bpalmer: I've re-created it here https://bpa.st/XR2Q
[09:54:44] <bancroft> bpalmer: I do use the Reader.ReadAll, and I basically use it exactly like in the docs?
[09:55:05] <bancroft> I left it commented out because you asked for the same code without the os.exec thing
[09:56:00] <bpalmer> bancroft: ok, so your code works, but you don't like all the ugly sscanfs?
[09:56:09] <bancroft> precisely
[09:56:21] <bancroft> I don't understand unmarshalling
[09:56:37] *** Quits: souvik (~souvik@80.179.69.245.cable.012.net.il) (Ping timeout: 240 seconds)
[09:56:37] <bancroft> and every time I read the word marshal I think US Marshal lol
[09:58:16] <bancroft> wait maybe I mixed up the terms again. unmarshall is whenn you go from a [][]string to a struct?
[09:58:56] <bpalmer> bancroft: usually Unmarshal is bytes -> T   (where T is some type, like a struct), and Marshal is T -> bytes for some type T
[09:59:28] <bpalmer> so I thought you were having issues with the reading in the CSV at all
[10:01:25] <bancroft> ooh, no, I mean I did many hours ago but finally got that. I'm still working on it and i'm asking for help here because i'm very much stuck, tried other libs and I'm probably using them wrong but ... yeah, I don't know. The Scan's are ugly, but also I don't like using an array index either (e.g., something_important = line[6])
[10:02:01] <bancroft> i'm sure there must be a better way
[10:03:29] <bpalmer> bancroft: gocvs seems to have a nice API, but your basic approach doesn't seem bad. I'd probably move all the scans into a method on the struct
[10:05:39] <bancroft> bpalmer: "move all the scans into a method on the struct" I didn't know I could put a method on a struct, eh... yeah
[10:06:28] <bancroft> but that doesn't really get rid of the type conversion hackery i'm doing to make the structs
[10:10:04] <bpalmer> Yeah. That's just part and parcel of dealing with converting from a file to a real type
[10:10:36] <bpalmer> you either do it yourself, or you let the library handle it for you; the standard csv reader is particularly simple
[10:20:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[10:22:34] <ac5tin> ikke: ball is the struct that embeds bouncer which is the interface
[10:22:40] *** Joins: fikran (~fikran@user/fikran)
[10:23:17] *** Quits: khyr0n (~khyr0n@2806:2f0:9141:835f:f234:49cd:2a30:272f) (Quit: Leaving)
[10:26:50] <bpalmer> bancroft: see, e.g, https://go.dev/play/p/EBAjaDQlOg9
[10:27:08] <bpalmer> although by convention, Gpu should be written as GPU , probably.
[10:27:50] <ac5tin> is there a way to make a slice for a list of structs that all embed the same base struct
[10:28:35] <seebs> no
[10:28:37] <bpalmer> ac5tin: you can create a slice for some interface that all those structs happen to implement.
[10:28:41] <seebs> a slice has to be of things of the same type
[10:28:54] <seebs> yeah, but that will imply distinct allocations for each of those objects, etc
[10:28:59] <seebs> you can't have them actually be stored in the slice
[10:29:01] <bpalmer> ac5tin: whether a struct embeds a type or creates methods itself that do the delegation is the business of that struct.
[10:29:13] <bpalmer> ac5tin: embedding is *not* inheritance.
[10:29:43] <ac5tin> seebs: if i have an interface Bouncer with func A,B,C, and i have a base struct Ball that implements all A,B,C,  i then have Football, Basketball, Baseball that embeds Ball, is there a way to create a slice of Balls where i can put Football, Baseball, Basketball inside
[10:29:57] <seebs> no
[10:30:08] <ac5tin> so that's only possible in OOP languages?
[10:30:16] <seebs> approximately, yeah
[10:30:38] <bpalmer> well, []Bouncer{Football{}, Baseball{}, Basketball{}} should work just fine.
[10:30:52] <seebs> the actual behavior you get and when you get it can vary, but for the most part, they're doing that by having the things all be fat pointers that know what they're pointing to and its type and store the type separately at runtime
[10:31:01] <seebs> which is what you get in Go with a slice of *interfaces*.
[10:31:31] <seebs> But you can't do it with the ball struct, because if you extract the embedded Ball from a Football, you now have a Ball *that is not in any way connected to or aware of the struct it was extracted from*.
[10:31:39] <seebs> It's just a standalone item of that type now.
[10:32:04] <seebs> This is both a strength and a weakness. On the whole I like it better and find it easier to work with, and basically, if you want interfaces you know where to find them.
[10:32:04] <bpalmer> ac5tin: but again, that's because each of Football , Baseball, and Basketball presumably define a Bounce() method -- whether that's because they embed Ball or not, you can't specify.
[10:32:25] <seebs> Slices of concrete types are good for *not* having that indirection and overhead.
[10:32:36] *** Joins: khyr0n (~khyr0n@2806:2f0:9141:835f:f234:49cd:2a30:272f)
[10:33:06] <ac5tin> im trying to have Ball implement the whole interface (func A, B and func C) then have Football embed Ball and only implement func B, and use Ball's implementation of B and C as the fallback
[10:33:30] <bpalmer> Sure, that will basically work, but it's not inheritance.
[10:33:32] <seebs> it can do that, but it will probably not do what you want
[10:33:55] <seebs> in particular: if it is using Ball's implementation of C as a fallback, then when it does that, *only* the embedded Ball is being passed to that method as the receiver.
[10:34:05] <seebs> It is *not* receiving an object that can be converted back to a Football later.
[10:34:39] <seebs> This makes life a lot simpler but it does prevent doing the fancy Inheritance Tricks that are so common in C++.
[10:34:45] <ac5tin> right, so it's calling the embedding struct to execute their own implementation of the function , and it's not actually Football that's executing the function
[10:34:51] <seebs> Yup.
[10:35:16] <seebs> And this is why we have short compile times and lower method call costs and also don't have inheritance.
[10:36:34] <ac5tin> seebs: thx for the explanation, it's more clear for me now
[10:37:54] <LiENUS> when you do type Football struct { Ball } you know you're really doing Type Football struct { Ball Ball } right?
[10:38:05] *** Joins: souvik (~souvik@80.179.69.245.cable.012.net.il)
[10:38:37] <LiENUS> theres obviously a little more going on wrt fields but at its core thats how it behaves
[10:39:35] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[10:39:54] <LiENUS> pretty much all of go's "oop" features are syntactical sugar
[10:40:19] <LiENUS> like func (o *object) thisfunc(in string) is really func thisfunc(o *object, in string)
[10:46:07] *** Joins: kurahaupo (~martin@115.69.27.211)
[10:48:01] *** Quits: souvik (~souvik@80.179.69.245.cable.012.net.il) (Quit: leaving)
[10:52:02] *** Quits: dead1 (~dead1@user/dead1) (Quit: dead1)
[11:01:38] *** Joins: tomasfarias (~tomasfari@user/tomasfarias)
[11:02:01] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:04:45] *** Quits: kurahaupo (~martin@115.69.27.211) (Excess Flood)
[11:04:57] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[11:05:23] *** Joins: darkapex (~darkapex@user/darkapex)
[11:06:26] *** Joins: mrig (~mrig@user/mrig)
[11:16:54] *** Quits: g2anj (~v@58.228.230.4) (Quit: .)
[11:24:03] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 250 seconds)
[11:26:12] *** Joins: amk (~amk@109.255.169.126)
[11:26:13] *** Joins: casionaut (~casionaut@user/casionaut)
[11:30:21] *** Quits: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[11:32:02] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[11:32:20] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[11:32:20] *** Joins: menace (~someone@user/menace)
[11:32:24] *** menace is now known as Deknos
[11:35:18] *** Joins: airfred (~airfred@92.38.149.137)
[11:35:32] *** Parts: airfred (~airfred@92.38.149.137) ()
[11:35:37] *** Quits: bancroft (~bancroft@142.162.53.67) (Ping timeout: 240 seconds)
[11:43:37] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[11:44:38] *** Joins: darkapex (~darkapex@user/darkapex)
[11:59:54] *** Joins: Xjs (~jannis@user/xjs)
[12:05:29] *** Joins: roshanavand (~roshanava@194.36.25.53)
[12:12:51] *** Quits: haniaF_ (~haniaF@79.191.105.142.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[12:15:59] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[12:18:21] *** Joins: epony (epony@user/epony)
[12:18:46] *** Joins: haniaF (~haniaF@83.24.188.64.ipv4.supernova.orange.pl)
[12:26:21] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:28:35] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:29:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[12:31:41] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[12:32:01] *** Joins: fikran (~fikran@user/fikran)
[12:33:22] *** Joins: rendar (~rendar@user/rendar)
[12:33:54] *** Joins: darkapex_ (~darkapex@user/darkapex)
[12:34:56] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 245 seconds)
[12:37:27] *** Joins: jannis (~jannis@user/xjs)
[12:39:46] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[12:41:30] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 268 seconds)
[12:44:14] *** Joins: arinov (~arinov@178.240.175.124)
[12:46:48] *** Joins: yvehan (~yvehan@117.136.39.247)
[12:48:22] *** Quits: yvehan (~yvehan@117.136.39.247) (Client Quit)
[13:00:40] *** Quits: SoF (~skius@user/skius) (Remote host closed the connection)
[13:24:53] <mickey8> why am i getting assignment to nil pointer? i have o := map[string]map[string]float64{} and then o[file][target] = res
[13:25:34] <bookworm> you need to init the inner map
[13:25:53] <bookworm> same as the outer one you need to call make first
[13:26:27] <mickey8> can i do that in one line? feels weird to have them on separate lines
[13:26:30] <bookworm> no
[13:26:35] <bookworm> welcome to go
[13:26:40] <mickey8> o/
[13:27:28] <bookworm> you anyway need to check if the map already exists and shoving an if else on a single line 7s awful
[13:27:32] <bookworm> is*
[13:28:03] <mickey8> check if the map already exists? what?
[13:28:42] <bookworm> you access the outer map with some key, that may either return nil or a map, depending whether you've seen that key before or not
[13:29:15] <bookworm> so if you want to add something else to the inner map you can't just blindly create the map every time, you'd overwrite what's already there
[13:29:30] <bookworm> meaning you need to check 7f you need to init the inner map or not
[13:29:42] <mickey8> yeah im not worried, because it's for a loop of files, so i can safely assume there's no duplicates
[13:30:10] <mickey8> thanks for the heads up.
[13:37:41] *** Joins: dr0n (~nabromov@94.11.23.235)
[13:41:41] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[13:41:56] <mikoto-chan> isn't `runtime.GOMAXPROCS(runtime.NumCPU())` unnecessary?
[13:42:13] <mikoto-chan> I thought the go runtime already figured this out automatically
[13:42:27] <bookworm> it does
[13:48:32] *** Quits: arinov (~arinov@178.240.175.124) (Ping timeout: 240 seconds)
[13:57:40] <j416> it used to not do it, but now it does
[14:00:47] *** Joins: stealth[] (~stealth]@i6DFA2498.versanet.de)
[14:01:59] *** Quits: stealth[] (~stealth]@i6DFA2498.versanet.de) (Client Quit)
[14:02:32] *** Joins: stealth[] (~stealth]@i6DFA2498.versanet.de)
[14:03:40] <icy> i can't seem to figure out why my csv file here doesn't get written: https://termbin.com/s0ia
[14:03:42] <icy> seems easy enough...
[14:04:22] *** Parts: ewintr (~ewintr@46.23.91.175) ()
[14:05:49] *** Joins: jla (~jordi@212.161.114.203)
[14:07:17] <mikoto-chan> I wonder why it's still so common for people to make this mistake
[14:07:29] <mikoto-chan> I found it in a project with Go 1.13
[14:07:39] <icy> what is it?
[14:08:46] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:11:19] *** Joins: g2anj (~v@58.228.230.4)
[14:11:39] <mikoto-chan> icy: some IRC client (which probably doesn't even use concurrent patterns in the first place ...)
[14:11:50] <mikoto-chan> let me take a look at your program
[14:11:59] <icy> oh, i thought you were commenting on my code
[14:12:01] <icy> heh
[14:13:42] <mikoto-chan> oops, I'm checking that now though
[14:16:02] *** Joins: aLeSD (~aLeSD@84.78.249.13)
[14:18:44] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[14:20:18] <icy> thanks
[14:22:55] *** Joins: tumdum (uid783@id-783.helmsley.irccloud.com)
[14:23:45] *** Joins: stealth[]- (~stealth]@2001:9e8:36e1:6300:701c:fb77:fe98:95f6)
[14:23:59] <mikoto-chan> icy: defer your flush, it's more concise
[14:24:14] <icy> ah, yes
[14:26:14] <mikoto-chan> you also forgot to handle your HandleFunc
[14:26:22] <mikoto-chan> if I go to submit I get nothing
[14:26:37] *** Quits: stealth[] (~stealth]@i6DFA2498.versanet.de) (Ping timeout: 240 seconds)
[14:26:50] <icy> as in nothing in response?
[14:26:50] <mikoto-chan> sorry, forget what I said
[14:26:54] *** Quits: jla (~jordi@212.161.114.203) (Quit: Leaving.)
[14:27:02] <icy> i'm writing a 204 :)
[14:27:29] *** Joins: jla (~jordi@212.161.114.203)
[14:27:34] <mikoto-chan> do you have some json so that I can test your program?
[14:27:36] *** Quits: jla (~jordi@212.161.114.203) (Client Quit)
[14:28:05] *** Joins: jla (~jordi@212.161.114.203)
[14:28:11] <mikoto-chan> you make a POST request to /submit containing the JSON, right?
[14:28:16] <icy> correct
[14:28:24] <icy> the json is very trivial. let me share a sample.
[14:28:48] *** Quits: jla (~jordi@212.161.114.203) (Client Quit)
[14:29:28] *** Joins: jla (~jordi@212.161.114.203)
[14:31:01] <icy> mikoto-chan: here you go: https://termbin.com/4q5l
[14:32:04] *** Quits: aLeSD (~aLeSD@84.78.249.13) (Read error: Connection reset by peer)
[14:32:13] *** Parts: szahid (~szahid@user/szahid) ()
[14:33:12] *** Joins: aLeSD (~aLeSD@host-95-239-36-79.retail.telecomitalia.it)
[14:34:26] *** Joins: dingdreher (~dingdrehe@46.140.25.62)
[14:34:42] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[14:36:36] *** Quits: aLeSD (~aLeSD@host-95-239-36-79.retail.telecomitalia.it) (Remote host closed the connection)
[14:38:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[14:39:45] *** Joins: SoF (~skius@user/skius)
[14:41:22] *** Joins: fikran (~fikran@user/fikran)
[14:42:34] <mikoto-chan> icy: I keep getting 404
[14:42:36] <mikoto-chan> even on submit
[14:43:24] <icy> that's odd. i see a 204 here, along with the submitted data getting logged.
[14:44:07] *** Quits: dingdreher (~dingdrehe@46.140.25.62) (Quit: dingdreher)
[14:44:43] <mikoto-chan> `curl -X POST -H "Content-Type: application/json" -d '{ "activity": "work", "time": "2021-12-29T10:59:35Z", "notes": "at work!" }' http://localhost:8585/sumbit`
[14:44:46] <mikoto-chan> is what I ran
[14:44:53] <icy> >sumbit
[14:44:59] <icy> typo :)
[14:45:23] <mikoto-chan> sumbit XD
[14:45:33] <j416> maybe they spelt it like that
[14:46:03] <icy> nope, it's spelt right in the code
[14:46:11] <j416> >.>
[14:47:12] *** Joins: bluedust (~bluedust@103.165.167.220)
[14:47:41] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[14:48:54] <mikoto-chan> icy: you don't close your file properly after opening it
[14:50:15] <mikoto-chan> nope, not the problem
[14:51:21] <icy> thanks for pointing that out anyway. i keep forgetting to do that.
[14:55:29] *** Joins: bluedust_ (~bluedust@117.204.159.226)
[14:56:53] <mikoto-chan> I wasn't able to find the problem sadly
[14:56:59] <mikoto-chan> let me ask elsewhere
[14:57:11] <icy> no worries. i'm equally stumped.
[14:58:17] *** Quits: bluedust (~bluedust@103.165.167.220) (Ping timeout: 240 seconds)
[15:03:17] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:eccd:8aba:bac7:3b1c)
[15:06:15] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[15:06:48] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:07:39] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[15:09:08] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[15:09:14] <mikoto-chan> icy: tell me when you found the solution, this got me curious too
[15:11:49] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[15:14:10] <icy> mikoto-chan: sure thing
[15:14:19] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Max SendQ exceeded)
[15:18:40] *** Joins: fef (~thedawn@user/thedawn)
[15:21:56] <j416> might want to start checking your errors
[15:22:16] <j416> like the one from json.NewDecoder(r.Body).Decode(&h)
[15:22:34] <mikoto-chan> j416: yes I already figured that one out
[15:22:45] <mikoto-chan> he also didn't return from his w.WritHeader(500)
[15:23:01] <j416> aha
[15:23:08] <j416> sorry didn't read carefully enough
[15:23:57] <mikoto-chan> I thibk the prolem is that we don't flush the buffer properly
[15:24:16] <j416> os.Open opens the file read-only.
[15:25:09] <j416> (use os.Create maybe)
[15:25:36] <MD87> w.Error() would probably have told you the problem as well (see the end of the example at https://pkg.go.dev/encoding/csv#example-Writer)
[15:25:47] *** Joins: ivche (~ivche@77.28.120.54)
[15:25:52] *** Joins: dingdreher_ (~dingdrehe@2a02:aa08:401e:fff2:60b7:6d67:db5c:2433)
[15:26:04] <mikoto-chan> j416: why didn't I notice earlier ._.
[15:26:12] <j416> because didn't check errors? :)
[15:26:31] <mikoto-chan> it's working now
[15:26:33] <j416> \^^/
[15:26:50] <ivche> hey ppl, so i have a question regarding pointers
[15:26:51] <ivche> https://termbin.com/dud8
[15:27:00] <ivche> why is the output the way it is?
[15:27:15] <j416> ivche: what did you expect?
[15:27:17] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:eccd:8aba:bac7:3b1c) (Ping timeout: 240 seconds)
[15:27:50] <j416> ivche: https://go.dev/play/p/AqcXJeHrnVZ
[15:27:51] <ivche> wait, wrong termbin
[15:28:21] <ivche> https://termbin.com/74i5
[15:28:24] <ivche> here, this one
[15:28:49] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[15:28:49] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[15:28:49] *** Joins: resamvi (~resamvi@user/resamvi)
[15:29:07] <j416> ivche: https://go.dev/play/p/Ot9xX2dsGk8
[15:29:55] <ivche> j416: i expected xVal keep refering to the value of that address
[15:30:05] <j416> :)
[15:30:15] <ivche> wait so does the *bool change anything?
[15:30:23] <ivche> instead of just "bool"
[15:30:33] <j416> xVal bool is not a pointer
[15:30:39] <mikoto-chan> icy: here is the working version: https://dpaste.com/HUTNDDQTH
[15:30:43] <j416> make it *bool to make a pointer
[15:31:03] <ivche> yeah but what i mean is
[15:31:08] <ivche> in the last termbin i sent
[15:31:21] <icy> mikoto-chan: j416: thanks! i just fixed it after reading through the logs here
[15:31:28] <j416> ivche: did you see my links?
[15:31:28] <icy> thank you for your time
[15:31:35] <j416> icy: \^^/
[15:31:50] <ivche> i did, but i don't think they're relevant to what i'm asking
[15:32:16] <j416> they should illustrate why xVal doesn't change
[15:32:25] <j416> maybe that's not what you were asking
[15:32:47] <ivche> That is what i'm asking, but does it work the same in C?
[15:32:55] <ivche> ohh
[15:32:56] <ivche> it does
[15:32:57] <ivche> actually
[15:33:03] <ivche> i just remembered
[15:33:04] *** Quits: dingdreher_ (~dingdrehe@2a02:aa08:401e:fff2:60b7:6d67:db5c:2433) (Quit: dingdreher_)
[15:33:06] <j416> I'd expect pointers to work similarily in C, yes.
[15:33:22] <ivche> I was just getting the value, and not pointing to the same address
[15:33:24] <mikoto-chan> it would be very nasty if that wasn't the case haha
[15:33:32] <ivche> yeah, I just woke up, don't mind me
[15:34:20] <ivche> i need a coffee
[15:35:03] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[15:35:11] *** Quits: ivche (~ivche@77.28.120.54) (Quit: leaving)
[15:35:15] <mikoto-chan> :(
[15:35:43] *** Joins: ivche (~user@77.28.120.54)
[15:36:38] *** Joins: fjb (~fjb@2804:378:916c:500:7ad:69b:9ac2:6c1e)
[15:48:37] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[15:49:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[15:55:35] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[15:59:48] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[16:01:39] *** Joins: arinov (~arinov@213.194.126.155)
[16:04:30] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[16:04:59] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 268 seconds)
[16:16:39] *** Quits: bluedust_ (~bluedust@117.204.159.226) (Remote host closed the connection)
[16:35:07] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:60b7:6d67:db5c:2433)
[16:37:37] *** Joins: Guest88 (~Guest88@109.197.175.182)
[16:38:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:43:34] *** Joins: whaley (~whaley@097-082-197-228.res.spectrum.com)
[16:45:17] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:60b7:6d67:db5c:2433) (Quit: dingdreher)
[16:48:09] <mickey8> quick way to convert []string{"1.234", "0.11", ...} to []float64{1.234, 0.11, ...} ?
[16:48:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[16:49:18] *** Quits: jla (~jordi@212.161.114.203) (Quit: Leaving.)
[16:49:34] <ivche> strconv.ParseFloat and a for loop?
[16:50:43] *** Joins: fikran (~fikran@user/fikran)
[16:51:49] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[16:55:47] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[16:57:41] <fizzie> https://go.dev/play/p/eqe3iVDN-Fg // just kidding ;)
[16:58:02] <ivche> fizzie: hahahahaha
[16:59:09] *** Joins: Kaivo (~Kaivo@user/kaivo)
[16:59:35] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:01:50] *** Joins: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:a476:2e:c0d:5443)
[17:02:55] *** Joins: arinov (~arinov@213.194.126.155)
[17:04:16] <Thedarkb1-Deskto> I've got a web app that after a month and a half of running smoothly has run out of file handles out of the blue.
[17:04:49] <ivche> wym ran out of file handles?
[17:04:49] <Thedarkb1-Deskto> It only opens one file directly at run time and all other interaction with the file system is through the http and mysql libraries.
[17:05:22] <ivche> do u release the resources properly?
[17:06:51] <Thedarkb1-Deskto> "too many open files"
[17:07:11] <Thedarkb1-Deskto> I defer the closure of the MySQL connections after each opening.
[17:07:49] <ivche> hmm, are u doing something in a loop or something?
[17:08:24] <ivche> are u sure that the defer actually takes action?
[17:08:42] <ivche> does the function exit properly?
[17:10:14] <fizzie> You might look at what file descriptors it's still got open when it's running smoothly (/proc/<pid>/fd/* symlinks on Linux, `lsof -p <pid>` slightly more portably), though of course that doesn't help if it's a case of running out of them quickly due to some bug, rather than slowly leaking them over time.
[17:11:42] <Thedarkb1-Deskto> It's leaking them over a period of weeks,.
[17:13:17] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[17:13:53] <ivche> I mean if it's in a request handler, it can be a case of running out of them due to a bug
[17:14:02] <Thedarkb1-Deskto> Yeah, it is a request handler.
[17:14:06] <ivche> but being slow as a result of request frequency
[17:16:08] <ivche> You can do some sort of a stress test, where you request until it runs out of handles
[17:16:28] <ivche> And find the bug that way
[17:17:56] *** Quits: Guest88 (~Guest88@109.197.175.182) (Quit: Client closed)
[17:18:50] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:19:17] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[17:20:52] *** Joins: Crassus (~Crassus@user/crassus)
[17:29:23] *** Joins: aLeSD (~aLeSD@host-95-239-36-79.retail.telecomitalia.it)
[17:29:36] <aLeSD> hi all
[17:29:45] <aLeSD> how could I create a nil *big.Int ?
[17:30:11] <aLeSD> I need it for test type compare
[17:30:29] <bookworm> var i *big.Int
[17:30:41] <bookworm> i is now nil
[17:31:38] <aLeSD> found! (*big.Int)(nil)
[17:31:52] <aLeSD> c rules
[17:33:54] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[17:36:21] *** Joins: fef (~thedawn@user/thedawn)
[17:36:52] *** Quits: zwr (~zwr@2804:d45:b966:fb00:9a15:fa56:81f7:4afc) (Ping timeout: 268 seconds)
[17:37:04] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c657:4fa8:ebc0:a8bd)
[17:38:21] *** Joins: arinov (~arinov@213.194.126.155)
[17:42:54] *** Joins: s0k1t (~s0k1t@86.106.121.100)
[17:45:35] *** Joins: aLeSD_ (~aLeSD@84.78.249.39)
[17:46:58] *** Quits: arinov (~arinov@213.194.126.155) (Quit: Konversation terminated!)
[17:47:17] *** Joins: arinov (~arinov@213.194.126.155)
[17:48:35] *** Quits: aLeSD (~aLeSD@host-95-239-36-79.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[17:49:12] *** Quits: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:a476:2e:c0d:5443) (Ping timeout: 268 seconds)
[17:57:34] *** Joins: bluedust (~bluedust@117.204.159.226)
[18:00:27] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[18:00:32] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 240 seconds)
[18:01:00] *** Joins: bindu (~bindu@user/bindu)
[18:02:44] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[18:04:03] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[18:08:41] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[18:24:57] *** Joins: Guest88 (~Guest88@109.197.175.182)
[18:28:38] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[18:33:41] *** Joins: jla (~jordi@212.161.114.203)
[18:35:25] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[18:37:37] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[18:39:27] *** Quits: remote (~self@user/hackers) (Remote host closed the connection)
[18:40:14] *** Joins: bluedust_ (~bluedust@89.238.130.72)
[18:43:32] *** Quits: bluedust (~bluedust@117.204.159.226) (Ping timeout: 240 seconds)
[18:44:39] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[18:45:14] *** Joins: bluedust (~bluedust@117.204.159.226)
[18:47:37] *** Quits: fjb (~fjb@2804:378:916c:500:7ad:69b:9ac2:6c1e) (Ping timeout: 240 seconds)
[18:48:57] *** Quits: bluedust_ (~bluedust@89.238.130.72) (Ping timeout: 256 seconds)
[18:50:15] *** Quits: Guest88 (~Guest88@109.197.175.182) (Quit: Client closed)
[18:50:57] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[18:57:33] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:95a9:d61a:efd9:e2a9)
[18:58:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[19:00:04] *** Joins: fikran (~fikran@user/fikran)
[19:00:13] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[19:02:18] *** Joins: darkapex (~darkapex@user/darkapex)
[19:05:03] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[19:09:11] *** Joins: beholders_eye (~weechat@2804:1b3:70c3:13a2:deb8:2ff4:2321:ba0c)
[19:09:31] *** Quits: hdm (~hdm@aha/hacker/hdm) (Quit: Client closed)
[19:10:10] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[19:11:13] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[19:11:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:17:38] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[19:17:52] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[19:18:34] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[19:29:59] <rawtaz> this is probably old but in case someone missed it: https://usercontent.irccloud-cdn.com/file/bggYMbnL/signal-2021-12-29-134721.png
[19:32:50] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:36:06] *** Joins: mrig (~mrig@user/mrig)
[19:36:37] <nebiros> rawtaz: lol
[19:42:42] *** Joins: eroux (~eroux@102-65-85-177.ftth.web.africa)
[19:42:43] *** Quits: ivche (~user@77.28.120.54) (Remote host closed the connection)
[19:46:13] <LiENUS> everyone knows panic("at the disco") goes inside the if block
[19:57:29] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[19:57:39] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[19:57:39] *** Joins: menace (~someone@user/menace)
[20:03:01] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:03:19] <dostoyevsky2> Any recommendations for a Consistent Hashing library?  I feel there are too many to choose from...
[20:04:26] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[20:07:18] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[20:08:23] *** Joins: hdm (~hdm@aha/hacker/hdm)
[20:13:07] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[20:13:25] *** Quits: jla (~jordi@212.161.114.203) (Quit: Leaving.)
[20:14:29] *** Joins: phoenixh (~phoenixh@p200300dd6f1b7c005ae02ad10694a7fa.dip0.t-ipconnect.de)
[20:20:17] *** Quits: hdm (~hdm@aha/hacker/hdm) (Quit: Client closed)
[20:20:35] *** Joins: arinov (~arinov@213.194.126.155)
[20:21:12] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.4)
[20:21:34] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[20:26:25] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[20:26:30] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.4)
[20:32:06] *** Joins: lilgopher (~textual@2601:241:8000:38f0:296c:f438:51cc:6a9a)
[20:33:10] *** Joins: MrTomaru (~MrTomaru@gateway/tor-sasl/mrtomaru)
[20:33:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:38:17] *** Joins: rever (rev@user/rever)
[20:39:28] *** Quits: bluedust (~bluedust@117.204.159.226) (Remote host closed the connection)
[20:43:47] <MrTomaru> Hi ! Is there an option available for os.OpenFile to automatically create folders when opening a file ? Like os.O_CREATE but for folders.
[20:48:21] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[20:48:57] *** Quits: xse (~xse@user/xse) (Ping timeout: 240 seconds)
[20:49:11] *** Joins: xse (~xse@user/xse)
[20:51:03] *** Joins: fjb (~fjb@179.189.79.172)
[20:53:57] <mickey8> when i have a struct{A int; B map[string]int}, is it somehow possible to make B's content directly a part of that struct (or a new struct that does that), such that, for example, if struct{A int; B map[string]int}{A: 0, B: map[string]int{"C": 1, "D": 2}} then the new combined struct would be something like struct{A int; C int; D int}{A: 0, C: 1,
[20:53:57] <mickey8> D:2 } ?
[20:54:10] *** Quits: phoenixh (~phoenixh@p200300dd6f1b7c005ae02ad10694a7fa.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[20:57:35] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Ping timeout: 256 seconds)
[20:57:50] *** Joins: phoenixh (~phoenixh@p200300dd6f1b7c005ae02ad10694a7fa.dip0.t-ipconnect.de)
[21:02:02] *** Quits: phoenixh (~phoenixh@p200300dd6f1b7c005ae02ad10694a7fa.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:04:24] *** Joins: jjonah (~jjonah@p200300d5d7245f005a946bfffe32a27c.dip0.t-ipconnect.de)
[21:04:44] *** Quits: jjonah (~jjonah@p200300d5d7245f005a946bfffe32a27c.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:04:54] *** Joins: jjonah (~jjonah@p200300d5d7245f005a946bfffe32a27c.dip0.t-ipconnect.de)
[21:05:43] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:07:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:08:08] <LiENUS> you want to directly embed a map into a struct?
[21:09:18] <LiENUS> to the best of my knowledge no you can not do that mickey8
[21:09:25] *** Joins: fikran (~fikran@user/fikran)
[21:10:16] <LiENUS> you're trying to embed a variable, you can only embed types
[21:15:00] *** Joins: s0k1t_ (~s0k1t@206.217.205.17)
[21:15:12] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[21:16:22] <mickey8> aight
[21:18:41] *** Quits: s0k1t (~s0k1t@86.106.121.100) (Ping timeout: 245 seconds)
[21:22:52] *** Joins: bluedust (~bluedust@117.204.159.226)
[21:27:21] <seebs> not in general, no, strings and names-of-fields are not the same *kind* of thing
[21:27:39] <seebs> you might be used to JavaScript, where an "object" has members which are actually just looked up in a map-like data structure, but that's not how structs work.
[21:28:51] *** Quits: bluedust (~bluedust@117.204.159.226) (Remote host closed the connection)
[21:42:47] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[21:47:30] *** Quits: aLeSD_ (~aLeSD@84.78.249.39) (Read error: Connection reset by peer)
[21:49:04] *** Joins: aLeSD_ (~aLeSD@host-95-239-36-79.retail.telecomitalia.it)
[21:50:50] *** Joins: huoy997 (~huoy99@gateway/vpn/pia/huoy99)
[21:50:54] *** Joins: arinov (~arinov@178.240.175.124)
[21:51:09] *** Quits: huoy997 (~huoy99@gateway/vpn/pia/huoy99) (Client Quit)
[21:51:31] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[21:53:03] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:54:02] *** Joins: huoy9945 (~huoy99@gateway/vpn/pia/huoy99)
[21:54:11] *** Parts: huoy9945 (~huoy99@gateway/vpn/pia/huoy99) ()
[21:55:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[21:55:57] *** Quits: arinov (~arinov@178.240.175.124) (Ping timeout: 256 seconds)
[21:58:18] *** Quits: jay_wild (~very@138.68.15.221) (Quit: updoots and reboots)
[22:06:43] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:10:01] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[22:10:52] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:11:25] *** Joins: jay_wild (~very@138.68.15.221)
[22:13:11] *** Quits: stealth[]- (~stealth]@2001:9e8:36e1:6300:701c:fb77:fe98:95f6) (Quit: Leaving)
[22:17:48] *** Quits: menace (~someone@user/menace) (Read error: Connection reset by peer)
[22:20:43] <LiENUS> i also find it helpful to think about creation ordering. types are made at compile time, variables are made at runtime
[22:20:55] <LiENUS> you cant embed something that doesn't exist yet at compile time
[22:21:09] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 268 seconds)
[22:27:07] <b0nn> MrTomaru: Not that I know of, but you can os.Stat to check if a path exists, and os.MkdirAll to create the path https://pkg.go.dev/os#MkdirAll
[22:27:42] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[22:28:03] <b0nn> In fact you can just os.MkdirAll - and if the path already exists it's a noop
[22:28:18] <b0nn> well, the check isn't a noop, but the creation is
[22:28:26] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:28:45] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:29:28] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[22:29:56] *** Quits: Tach (~Tach@user/tach) (Quit: Tach)
[22:31:13] <b0nn> In fact, examination of the source shows that os.MkdirAll does the os.Stat call itself, so it's unnecessary to do one yourself
[22:33:30] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[22:35:24] *** Quits: jjonah (~jjonah@p200300d5d7245f005a946bfffe32a27c.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:36:31] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b1d4-3f07-bb3f-aa7e.res6.spectrum.com)
[22:37:37] *** Joins: neurocyte0132889 (~neurocyte@94.46.64.245)
[22:37:37] *** Quits: neurocyte0132889 (~neurocyte@94.46.64.245) (Changing host)
[22:37:37] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:40:21] <mrus> Seems like my pointer hashmap from yesterday segfaults. Is there anything wrong with having a `var hashmap map[string]*item` and doing `(*hashmap[id]).mySlice = append((*hashmap[id]).mySlice, newThing)`?
[22:41:07] <mrus> (newThing also being a *thing)
[22:42:32] *** Quits: MrTomaru (~MrTomaru@gateway/tor-sasl/mrtomaru) (Quit: MrTomaru)
[22:48:42] *** Quits: s0k1t_ (~s0k1t@206.217.205.17) (Quit: dueces douches)
[22:49:04] <b0nn> mrus: can you playground what you're doing?
[22:49:34] <mrus> b0nn: I can send you a link to the code on GitHub if you feel like
[22:50:00] <b0nn> sure post it here so anyone can see it
[22:50:19] <mrus> b0nn: https://github.com/mrusme/superhighway84/blob/2781f76f35325e5626af57b9e4152cf044fe87be/database/database.go#L252
[22:50:27] <mrus> that is where it crashes
[22:50:38] <mrus> `panic: runtime error: invalid memory address or nil pointer dereference [recovered]`
[22:51:32] <mrus> or 253 to be precise
[22:51:36] <mrus> but it's that statement
[22:53:50] <b0nn> ok, so you have checked that *articlesMap[articles[i].InReplyToID] exists, right?
[22:54:11] <b0nn> because if that's nil your statement will  crash
[22:54:50] <mrus> thought about it, but from a data perspective there's no reason for it to not exist, so I simply disregarded that idea
[22:54:58] <mrus> however, it might be worth checking nevertheless
[22:55:26] <mrus> just wanted to make sure my pointer juggling there was correct in first place
[22:55:51] <b0nn> heh - I figure that once I am at the point of asking people, I tend to need to write out a few hundy fmt.Println("Here") statements too
[22:57:10] <mrus> happy I'm not the only one
[23:05:36] *** Joins: jinie (~jimmy@188.114.173.37)
[23:07:16] *** Quits: jinie (~jimmy@188.114.173.37) (Client Quit)
[23:09:53] <mrus> b0nn: you were indeed correct on that, it was a simple key-not-found issue.. thanks for the talk!
[23:10:23] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[23:11:14] *** Joins: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea)
[23:11:17] <b0nn> glad you found it :)
[23:15:19] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[23:15:51] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 256 seconds)
[23:17:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[23:18:13] *** Quits: casionaut (~casionaut@user/casionaut) (Remote host closed the connection)
[23:18:46] *** Joins: fikran (~fikran@user/fikran)
[23:19:44] *** Joins: Tach (~Tach@user/tach)
[23:28:33] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[23:37:30] *** Quits: rever (rev@user/rever) (Remote host closed the connection)
[23:37:37] *** Joins: hackers (~self@user/hackers)
[23:37:37] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 268 seconds)
[23:38:02] *** hackers is now known as remote
[23:38:25] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[23:38:31] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[23:38:31] *** Joins: menace (~someone@user/menace)
[23:38:35] *** menace is now known as Deknos
[23:40:50] *** Joins: mattikus (sid161707@user/mattikus)
[23:55:20] *** Joins: casionaut (~casionaut@user/casionaut)
[23:57:15] *** Joins: hellstabber (~hellstabb@178.233.16.12)
