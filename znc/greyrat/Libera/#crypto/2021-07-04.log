[00:00:45] <shachaf> Alipha: There are all sorts of situations you might imagine using a block cipher where related-key attacks matter, and "a proper KDF" is irrelevant because it's not password-based or anything.
[00:01:15] *** Joins: Colti (Miramar-FL@2a00:c1e0:0:2:0:1:208:ab5e)
[00:01:50] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[00:04:23] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[00:07:13] <Alipha> shachaf: there's no commonly-used block cipher which has a significant related-key vulnerability (AES-256 has one which reduces its security to like 2^230 iirc). And by "proper KDF", I don't mean PBKDF2 or argon2 or anything compute-intensive. What I mean is just something simple like HMAC(master_key, "1"), which is safe from related key attacks. Whereas something like `master_key xor "1"` is not (*cough*
[00:07:15] <Alipha> RC4)
[00:07:57] <Alipha> *cough* WEP
[00:08:22] <shachaf> Ah, sure, makes sense.
[00:09:36] <shachaf> There's a construction of block ciphers from unkeyed permutations, somthing like E(k, m) = k ^ f(k ^ m) , which people sometimes talk about, which has all sorts of problems with related keys.
[00:11:12] <int-e> E(k ^ t, m ^ t) = E(k, m) ^ t does look nasty.
[00:11:21] <onelegend> Ive heard some people in the #libera channel say that AES 256 is weaker than AES 128
[00:11:39] <onelegend> load of FUD other than the key schedule 
[00:13:26] <ioxzev1z> onelegend, people rarely understand crypto properly
[00:13:38] <ioxzev1z> Hence they make stupid statements like the above,.
[00:21:00] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[00:24:23] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[00:35:36] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[00:36:11] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[00:37:24] *** Quits: r-g (~r-g@163.172.90.106) (Ping timeout: 265 seconds)
[00:38:10] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[00:38:34] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 272 seconds)
[00:44:23] *** Joins: GNUcifer (~ct@i59F7259B.versanet.de)
[00:44:39] *** Quits: cehteh (~ct@i59F7259B.versanet.de) (Killed (NickServ (GHOST command used by GNUcifer)))
[00:44:49] *** GNUcifer is now known as cehteh
[00:56:30] *** Quits: Colti (Miramar-FL@2a00:c1e0:0:2:0:1:208:ab5e) (Quit: ROCK OUT with your COCK OUT)
[00:58:19] *** Joins: Colti (Miramar-FL@2a00:c1e0:0:2:0:1:208:ab5e)
[00:58:36] *** Joins: xy0 (~xy0@137.193.139.44)
[01:02:30] *** Quits: Colti (Miramar-FL@2a00:c1e0:0:2:0:1:208:ab5e) (Changing host)
[01:02:30] *** Joins: Colti (Miramar-FL@user/host-pond)
[01:03:24] *** Quits: Colti (Miramar-FL@user/host-pond) (Quit: ROCK OUT with your COCK OUT)
[01:03:38] *** Joins: Colti (Miramar-FL@user/host-pond)
[01:03:47] <xy0> Hi can someone explain to me why exactly Index Calculus does not work on elliptic curves? Thank you in advance
[01:03:51] <xy0> please*
[01:10:42] <riv> https://en.wikipedia.org/wiki/Index_calculus_algorithm#Applications_in_other_groups this gives an argument for why
[01:10:53] <riv> > The lack of the notion of prime elements in the group of points on elliptic curves makes it impossible to find an efficient factor base to run index calculus method
[01:11:29] <riv> but it also says index calculus has been adapted to elliptic curves
[01:12:43] <int-e> "for certain fields", meh
[01:16:18] <int-e> Okay, the abstract makes it sound very convoluted... so yeah, I can't blame the wikipedia author(s) here.
[01:19:51] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[01:27:29] <xy0> thanks guys
[01:30:30] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[01:30:34] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[01:31:30] *** Quits: xy0 (~xy0@137.193.139.44) (Changing host)
[01:31:30] *** Joins: xy0 (~xy0@user/xy0)
[01:32:00] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[01:43:29] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[01:50:57] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[01:53:00] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[01:58:51] *** Joins: laguneucl (~Pitsikoko@athedsl-16082.home.otenet.gr)
[01:59:48] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Read error: Connection reset by peer)
[02:00:41] *** Joins: Tom_ (~Tom@2a01:e0a:2de:8130:a12b:c312:f0e9:d71c)
[02:04:49] *** Quits: Tom (~Tom@2a01:e0a:2de:8130:5027:3977:2e9e:1c22) (Ping timeout: 268 seconds)
[02:11:06] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[02:11:40] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[02:23:40] *** Joins: david-ie (~david-ie@93.176.149.206)
[02:25:34] <tolarz> > However, there is also a problem of someone maliciously generating a composite that primality tests will mistake as a prime. This can happen with much higher probability.
[02:25:46] <tolarz> > they show how to construct a 2048-bit composite that OpenSSL mistakes as prime with probability 1/16, even when ostensibly configured to detect primes with error 2⁻⁸⁰
[02:25:48] <tolarz> oh wow
[02:25:54] <tolarz> TIL on https://crypto.stackexchange.com/a/91866
[02:28:43] <tolarz> (well it's wow assuming the procedure is efficient itself, idk, haven't read the paper)
[02:30:50] *** Quits: lampilelo (~user@user/lampilelo) (Quit: ERC (IRC client for Emacs 27.2))
[02:46:17] <Peng> .t https://twitter.com/RSAConference/status/1411399342167109634
[02:46:23] <EmmyNoether> The Internet has a serious fundamental flaw: the transmission control protocol/internet protocol (TCP/IP)—the primary engine underpinning the Internet—is less secure. Is #blockchain the solution we need to eliminate this flaw? https://spr.ly/6010ypJjp (@RSAConference)
[02:48:52] <MacGyver> Betteridge's law of headlines strikes again.
[02:53:12] *** Joins: brcolow (~brcolow@ip68-0-136-132.tc.ph.cox.net)
[02:57:02] <int-e> That's... pretty insane.
[02:57:50] <int-e> (I'm looking at the linked article. Basically every sentence is a wtf moment.)
[02:59:24] *** Quits: pera (~pera@user/pera) (Ping timeout: 268 seconds)
[03:00:54] *** Joins: pera (~pera@user/pera)
[03:01:08] <int-e> I guess the most funny part is where they portray the hacks of crypto currency exchanges as isolated instances based on attackers reappropriating the interfaces provided by the exchanges... without giving credit card fraud the same benefit.
[03:09:08] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[03:23:54] *** Joins: noona (~noona@45.129.56.204)
[03:24:34] <brcolow> What is the phrase/name used for SHA implementations where instead of passing in the entire message to hash at once, and doing padding at the beginning, you can pass in byte(s) at a time, then padding is done at the end? I found it yesterday but can't find the name now...
[03:25:36] <Ori_B> streaming? incremental?
[03:26:07] <brcolow> Maybe it isn't standard...but it wasn't those. Searching the phrase yielded really useful results which is why I am inquiring
[03:26:12] <int-e> . o O ( normal? )
[03:27:20] <int-e> chunked?
[03:29:21] <brcolow> Damn...let me try and find it.
[03:29:54] <onelegend> whoever wrote that damn article, EVER HEARD OF TRANSPORT LAYER SECURITY?
[03:30:40] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Remote host closed the connection)
[03:30:58] <int-e> onelegend: Only as an afterthought
[03:32:56] <int-e> onelegend: It gets surreal in the end when they mention OAuth...
[03:33:22] <onelegend> holy .......
[03:39:36] <int-e> Actually, this second bullet point on credit cards is funny too: "Ensuring that users enter credit card details, including card verification value (CVV), on every website they visit."
[03:50:42] *** Quits: laguneucl (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 240 seconds)
[03:53:18] *** Quits: Toadisattva (~Toadisatt@gateway/tor-sasl/toadisattva) (Remote host closed the connection)
[03:53:41] *** Joins: Toadisattva (~Toadisatt@gateway/tor-sasl/toadisattva)
[03:54:42] *** Quits: Iryon (~Iryon@2a02:a31a:a045:3500:39e0:e1dd:1dda:4d97) (Ping timeout: 240 seconds)
[04:04:32] *** Quits: Hash (~weechat@thestonedapes.com) (Quit: WeeChat 3.1)
[04:14:27] <MacGyver> int-e: But even if all their criticisms WERE valid.
[04:14:33] <MacGyver> int-e: The answer would still be no.
[04:16:47] <MacGyver> onelegend: Re: your all-caps question... probably not.
[04:17:02] <MacGyver> They're management level.
[04:17:15] <MacGyver> They're not required to actually have an understanding of the technology they manage.
[04:22:26] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[04:23:49] *** Joins: ogz (~ogz@user/ogz)
[04:24:11] *** Parts: ogz (~ogz@user/ogz) (It is in love that we are made; In love we disappear.)
[04:27:17] *** Quits: Toadisattva (~Toadisatt@gateway/tor-sasl/toadisattva) (Remote host closed the connection)
[04:27:19] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[04:27:51] *** Quits: sonOfRa (sonOfRa@user/sonofra) (Quit: Bye!)
[04:28:02] *** Joins: Wulf4 (~Wulf@user/wulf)
[04:28:11] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[04:28:50] *** Joins: Toadisattva (~Toadisatt@gateway/tor-sasl/toadisattva)
[04:29:03] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (Ping timeout: 244 seconds)
[04:29:26] *** Joins: wolfshappen (~waff@irc.furworks.de)
[04:30:08] *** Joins: Sofia (~sofia@gateway/tor-sasl/sofia)
[04:31:20] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[04:31:20] *** Wulf4 is now known as Wulf
[04:32:16] <int-e> MacGyver: Yes, of course. I mainly looked at it to see whether they're making an argument that could be attacked. But no, they're just stringing together facts and claims with no connecting thread.
[04:32:56] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[04:39:20] <ericonr> MacGyver: they do know about TLS! > The goal of TCP/IP was to transmit data, with security being much of an afterthought until SSL deployment in browsers years late.
[04:41:09] <Peng> "in browsers"
[04:41:30] <MacGyver> ericonr: Well they know about *SSL*.
[04:41:44] <MacGyver> ericonr: I wouldn't be too sure about anything beyond that, all things considered.
[04:42:16] *** Joins: ionface_ (~ionface@user/ionface)
[04:42:24] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 272 seconds)
[04:42:25] <ericonr> heh, fair
[04:45:52] <onelegend> people are so used to saying SSL
[04:46:24] <onelegend> I've gotten kinda tired of it, so I just call them out on it
[04:54:26] *** Quits: brcolow (~brcolow@ip68-0-136-132.tc.ph.cox.net) (Ping timeout: 272 seconds)
[04:55:22] *** Joins: brcolow (~brcolow@192.145.119.107)
[04:56:38] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[04:56:40] *** Quits: noona (~noona@45.129.56.204) (Quit: noona)
[04:59:30] <ericonr> why? unless crypto is being discussed, the difference isn't all that relevant IMO
[04:59:30] *** Quits: _mrlemke_ (~mrlemke@208.74.105.200) (Ping timeout: 240 seconds)
[05:00:30] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[05:01:07] *** Quits: Toadisattva (~Toadisatt@gateway/tor-sasl/toadisattva) (Remote host closed the connection)
[05:08:18] *** Quits: brcolow (~brcolow@192.145.119.107) (Ping timeout: 252 seconds)
[05:08:43] *** Joins: brcolow (~brcolow@ip68-0-136-132.tc.ph.cox.net)
[05:08:48] *** Quits: brcolow (~brcolow@ip68-0-136-132.tc.ph.cox.net) (Client Quit)
[05:10:18] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[05:13:23] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 265 seconds)
[05:16:54] *** alip is now known as hayaliali
[05:17:06] *** Quits: pera (~pera@user/pera) (Ping timeout: 252 seconds)
[05:17:50] *** hayaliali is now known as alip-tmp
[05:23:34] *** alip-tmp is now known as alip
[05:28:57] <onelegend> ericonr: it's just my personal preference of being precise
[05:29:21] <onelegend> it's only how I react to these things. I don't expect everyone to react this way
[05:31:22] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:31:59] <onelegend> besides, I don't want people to say SSL for the next 100 years as in the end it is referring to an oudated protocol. At some point we should just agree to use correct terminology
[05:32:44] <ms7821> why
[05:32:57] <Peng> Calling it SSL spites Microsoft, if they were the reason it was renamed. :D
[05:33:30] <onelegend> Micro$hit
[05:34:14] <onelegend> Peng: just curious, do you speak mandarin?
[05:34:31] <Peng> No, sorry
[05:34:59] <onelegend> where does your nick come from
[05:35:55] <onelegend> thought it was https://en.wikipedia.org/wiki/Peng_(mythology)
[05:36:12] <onelegend> 大鹏鸟
[05:43:53] <onelegend> unrelated, but how do people maliciously produce a SHA1 collision? Like uploading a malware with the same SHA1 signature as a legitimate software
[05:44:23] <Peng> It's half the word penguin!
[05:44:39] <onelegend> ohhh
[05:45:17] *** Quits: david-ie (~david-ie@93.176.149.206) (Remote host closed the connection)
[05:45:35] <Peng> I can't believe I didn't know about https://en.wikipedia.org/wiki/Peng_(mythology)
[05:48:50] *** Joins: andreasbuhr (~quassel@p549dbc14.dip0.t-ipconnect.de)
[05:51:46] *** Joins: pete443_ (~pete@user/pete443)
[05:51:48] <Platonides> Peng, int-e, MacGyver: they have deleted that silly tweet xD
[05:51:55] <onelegend> HAHAHA
[05:52:05] <onelegend> SHOUDLVE ARCHIVED THAT SHIT
[05:52:16] <Platonides> it's on archive.org ;)
[05:52:20] <onelegend> dope
[05:52:23] <onelegend> thank god
[05:52:32] <onelegend> glorious archive.org
[05:52:45] <MacGyver> Oh they've even deleted the blogpost, not just the tweet.
[05:52:47] <MacGyver> Good.
[05:53:20] *** Quits: andreasbuhr_ (~quassel@p549db021.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[05:53:50] <Platonides> and apologised https://twitter.com/RSAConference/status/1411480627455614991
[05:53:53] *** Quits: pete443 (~pete@user/pete443) (Ping timeout: 258 seconds)
[05:54:45] <MacGyver> The responses to that are beautiful.
[05:54:51] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[05:54:57] <MacGyver> But at least other managerial types won't be exposed to it.
[05:55:00] <MacGyver> That's my main concern.
[05:55:22] <MacGyver> How this kind of horseshit can spread among the slightly-knowledgeable-but-not-enough-to-recognize-bullshit crowd.
[05:55:58] <onelegend> I love how they added "We are not blaming an intern"
[05:56:07] <MacGyver> I don't.
[05:56:17] <onelegend> a
[05:56:20] <onelegend> wat
[05:56:25] <MacGyver> Feels like a cheap attempt at humour to draw attention away from the issue.
[05:56:34] <onelegend> oh
[05:56:44] <onelegend> I see
[05:56:47] <MacGyver> Hurray, you're *not* a completely shitty company that doesn't know not to blame their employees for procedural issues.
[05:56:56] <MacGyver> Why does this need mentioning?
[05:58:11] <onelegend> have a feeling they're gonna delete that tweet as well
[05:58:14] <onelegend> :)
[05:58:42] <Peng> Platonides: Wow!
[06:00:10] <Platonides> one would expect better from RSA Conference, indeed
[06:00:18] <MacGyver> Platonides: Would we?
[06:00:33] <MacGyver> I honestly don't really hold RSAC in very high regard to begin with...
[06:00:42] <onelegend> I used to want to attend RSAcon so bad
[06:01:03] <onelegend> DEFCON's a better bet for cybersecurity stuff tbh
[06:01:13] <Platonides> well, seeing this...
[06:02:10] <MacGyver> Maybe my baseline impression is unwarranted though.
[06:02:42] <MacGyver> But for some reason "RSA conference" already pinged at "Meh" in my brain.
[06:03:07] <MacGyver> I think maybe because it's mostly business/managerial-oriented?
[06:04:39] <woggle> There was also the whole DUAL_EC_DRBG/BSafe thing that tanked RSA's reputation.
[06:04:54] <MacGyver> Well yeah, but that's RSA the company, not RSA the conference.
[06:05:11] <MacGyver> They're not very closely related nowadays, afaik.
[06:14:03] *** Quits: CryptoClub (~fafs@static-173-3-7-89.ipcom.comunitel.net) (Read error: Connection reset by peer)
[06:16:05] *** Joins: CryptoClub (~fafs@static-173-3-7-89.ipcom.comunitel.net)
[06:21:55] <aweinstock> onelegend: the attack on sha1 that was branded as "shattered" a half-decade or so ago produced a collision pair that can be used directly as a polyglot, and it can be extended to provide additional payload data
[06:24:06] <aweinstock> if you want to use the machinery of the shattered attack to generate a completely novel collision pair that's a polyglot between different formats, it'll cost quite a bit of compute (I think above 2^50)
[06:26:50] <onelegend> oof
[06:34:37] *** Joins: Toadisattva (~Toadisatt@gateway/tor-sasl/toadisattva)
[06:45:35] <Platonides> wow, it was back in 2017
[07:19:12] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 252 seconds)
[07:45:23] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[07:47:07] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[07:53:18] *** Quits: zeedo_ (~zeedo@cpc157903-grth13-2-0-cust152.16-4.cable.virginm.net) (Ping timeout: 252 seconds)
[07:55:00] *** Quits: jbis (~jbis@pool-71-190-180-229.nycmny.fios.verizon.net) (Remote host closed the connection)
[08:04:02] * onelegend is encrypting some stuff
[08:05:02] *** Quits: jstoker (jstoker@user/jstoker) (Remote host closed the connection)
[08:07:11] *** Joins: jbis (~jbis@pool-71-190-180-229.nycmny.fios.verizon.net)
[08:08:23] *** Joins: jstoker (~jstoker@user/jstoker)
[08:11:53] *** Quits: jbis (~jbis@pool-71-190-180-229.nycmny.fios.verizon.net) (Ping timeout: 258 seconds)
[08:19:29] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[08:20:34] * onelegend is encrypting some things
[08:26:16] *** Joins: jbis (~jbis@pool-71-190-180-229.nycmny.fios.verizon.net)
[08:27:34] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[08:31:15] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[08:33:12] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[08:33:39] *** Joins: madage (~madage@user/madage)
[08:34:28] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[08:34:44] *** Quits: jbis (~jbis@pool-71-190-180-229.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[08:39:38] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[08:41:19] *** Joins: jbis (~jbis@pool-71-190-180-229.nycmny.fios.verizon.net)
[08:41:50] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[08:52:52] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[09:01:20] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[09:05:21] *** Quits: Toadisattva (~Toadisatt@gateway/tor-sasl/toadisattva) (Quit: Leaving)
[09:06:28] *** Joins: frost (~frost@59.71.241.179)
[09:18:35] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[09:22:49] <onelegend> yall sleeping or something?
[09:23:09] <onelegend> or are you getting bubble tea
[09:23:36] <rqsd> memes
[09:23:52] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[09:24:35] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[09:28:37] *** Quits: jbis (~jbis@pool-71-190-180-229.nycmny.fios.verizon.net) (Quit: Leaving...)
[09:37:40] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[09:47:38] *** Joins: frost (~frost@59.71.241.179)
[10:03:51] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[10:10:34] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[10:18:50] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[10:25:42] *** Quits: CryptoClub (~fafs@static-173-3-7-89.ipcom.comunitel.net) (Read error: Connection reset by peer)
[10:26:09] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[10:31:35] *** Joins: CryptoClub (~fafs@static-173-3-7-89.ipcom.comunitel.net)
[10:33:04] *** Quits: tkob (tkob@user/thekingofbandit) (Remote host closed the connection)
[10:41:19] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[10:52:54] *** Joins: gareppa (~gareppa@user/gareppa)
[10:56:53] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[10:57:11] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[11:00:30] *** Quits: _mrlemke_ (~mrlemke@208.74.105.200) (Ping timeout: 272 seconds)
[11:08:18] *** Quits: gareppa (~gareppa@user/gareppa) (Quit: Leaving)
[11:20:37] <wasamasa> so, how bad of an idea is it to use an UUID for a nonce?
[11:20:55] <wasamasa> they're 128 bits and most nonces I'm looking at require this much
[11:21:34] <wasamasa> I've done a quick search and discovered that UUID4 isn't the only option: https://docs.idex.io/#authentication
[11:24:38] *** Joins: brcolow (~brcolow@ip68-0-136-132.tc.ph.cox.net)
[11:24:58] <brcolow> Anyone know a SHA-256 generator that shows "steps" like this one for MD5/SHA-1? https://cse.unl.edu/~ssamal/crypto/genhash.php
[11:36:12] <Kryczek> wasamasa: how many times would you use that UUID? E.g. if you're thinking of using it like a username then definitely can't be a nonce :)
[11:36:20] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[11:37:27] <wasamasa> obviously generate a new one for each encryption
[11:43:52] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[11:52:10] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Quit: Turning off a portion of this simulation.)
[12:05:56] *** Joins: laguneucl (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4)
[12:06:18] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[12:19:19] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[12:34:05] <Alipha> wasamasa: UUIDs are fine for nonces, as long as you're not getting anywhere close to 2^60 messages with a single key
[12:37:17] <Alipha> onelegend: the SHA vulnerability doesn't allow you to produce a collision with an existing plaintext, but instead only allows you to produce two plaintexts with the same hash, which is lesser of an exploit (but still serious)
[12:39:43] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[12:44:06] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Client Quit)
[12:44:20] *** Joins: qbt (~edun@user/edun)
[12:48:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:51:20] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[12:51:20] *** Lord_of_Life_ is now known as Lord_of_Life
[13:30:04] *** Joins: r-g (~r-g@163.172.90.106)
[13:40:40] *** Quits: riv (~river@tilde.team/user/river) (Quit: Leaving)
[14:15:45] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:5760:9bdb:910c:2812)
[14:20:14] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[14:21:40] <mikoto-chan> hello, I'm thinking of using MD5 for hashing passwords with a length of 6 characters, they're all randomly generated, how long would it take to crack my passwords? I'm looking for a hasing algorithm with only alphanumeric characters
[14:22:14] <mikoto-chan> oh, and I also want to keep the hashed strings as short as possible, RIPEMD-128 seems to be a good alternative
[14:24:02] <yawkat> no. use a real hash function
[14:24:20] <yawkat> and for passwords, use a password hash
[14:25:03] <mikoto-chan> so ... what options do I have?
[14:25:10] <yawkat> argon2
[14:25:15] <xy0> also if you want to make it harder to crack you could use slow hash functions
[14:25:50] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:28:44] <mikoto-chan> yawkat: I'm looking for something without salts, they're not really passwords but the user shouldn't be able to know the hashed string with only the hash itself
[14:29:27] <mikoto-chan> I'm assuming that they don't have a rainbow-table that is (26+26+10)^6 big
[14:30:02] <yawkat> why do you assume that? that's not very big.
[14:30:34] <yawkat> and either way, you need a computationally hard hash for secrets that short, so you need a password hash.
[14:32:11] <mikoto-chan> but I can't salt it since I won't be storing them
[14:33:01] <yawkat> then use a fixed salt, or better yet, rethink the design
[14:33:20] <yawkat> theres usually *some* associated data available. maybe an account number.
[14:33:22] <mikoto-chan> or just ... don't expose the salt
[14:33:26] <mikoto-chan> I mean the hash*
[14:33:34] <xy0> couldn't you just bruteforce the salt if it's static?
[14:33:50] <wasamasa> without salts?
[14:33:50] <yawkat> not if it's long enough
[14:33:52] <wasamasa> jesus
[14:33:59] <xy0> true
[14:34:14] <wasamasa> a static salt doesn't help much
[14:34:19] <wasamasa> same password looks the same after hashing
[14:34:53] <wasamasa> why as short as possible?
[14:35:01] <wasamasa> do you have a fucked up database design?
[14:35:21] <mikoto-chan> maybe I can confuse the attacker by hashing the hash and exposing that
[14:35:24] <yawkat> honestly wanting a short output length is probably the least problematic thing here...
[14:35:43] <xy0> what do you really want to do? Maybe then we can help you better
[14:35:59] <wasamasa> hashing the hash is an ancient hat
[14:36:08] <wasamasa> password crackers know that one already
[14:36:17] <wasamasa> this seems like a XY problem
[14:36:20] <mikoto-chan> wasamasa: the attackers are mostly scriptkiddies so
[14:36:26] <wasamasa> so what?
[14:36:27] <yawkat> what wasamasa said.
[14:36:33] <wasamasa> script kiddies use hashcat/john
[14:36:37] <wasamasa> both support that
[14:36:57] <wasamasa> six character alphanumeric passwords are cracked in like a few hours tops
[14:37:25] <mikoto-chan> xy0: I have a captcha generator function in my program, it returns the image and the hashed solution which get sent to my web server, the reason I want to expose the hash is to use it as a filename, 1.png, 2.png, etc. would be confusing.
[14:37:50] <mikoto-chan> what about basing the name on the first 6 characters? that would only leave them with part of the hash
[14:37:58] <wasamasa> lol
[14:38:04] <wasamasa> so it's indeed a XY problem
[14:38:07] <yawkat> that is a completely different question yea
[14:38:07] <mikoto-chan> sorry if that's bad design :P
[14:38:15] <wasamasa> why the fuck would you expose the captcha solution
[14:38:31] <wasamasa> captcha images don't need to be pre-generated or cached
[14:38:44] <mikoto-chan> wasamasa: to give the files a descriptive names and check for the solution :P
[14:38:46] <wasamasa> and captchas should expire after a minute anyway
[14:38:47] <yawkat> a hmac would do this fine. but yea i dont see why youd use the hash as the file name
[14:38:57] <mikoto-chan> wasamasa: I wasn't planning on storing them lol
[14:39:01] <wasamasa> making bruteforce attempts futile
[14:39:17] <wasamasa> you guess the captcha wrong, you get a new one
[14:39:19] <yawkat> mikoto-chan: what are you doing then?
[14:39:28] <wasamasa> you take too long to guess it, you get a new one
[14:39:35] <mikoto-chan> yawkat: making them expire but that is a challenge of its own
[14:40:16] <yawkat> and this design sounds like itd let an attacker just use the same captcha solution a bunch of times before you expire it
[14:40:29] <yawkat> why not just use recaptcha
[14:40:52] <wasamasa> yeah
[14:40:56] <wasamasa> there's plenty of existing solutions
[14:41:34] <mikoto-chan> yawkat: you must be joking me
[14:41:54] <wasamasa> doesn't need to be recaptcha specifically
[14:42:01] <mikoto-chan> I'm not feeding Google my users' data
[14:42:05] <wasamasa> can be some existing library you can include in your page
[14:42:45] <mikoto-chan> 90% of visitors are noscript users after all
[14:42:49] <mikoto-chan> so it would be useless anyway
[14:46:24] *** Joins: riv (~river@tilde.team/user/river)
[14:46:37] <mikoto-chan> providing only part of the hash could be a temporary solution, we will see if they manage to break it
[14:47:13] <yawkat> or just use hmac, problem solved
[14:47:43] <mikoto-chan> yawkat: let me also take a dive into that, never heard of it, any good article on it?
[14:48:03] <wasamasa> generate random ID for captcha, store ID->solution in session store, look up submitted id+solution in session on submission
[14:48:29] <wasamasa> deletion on expiry/fail/success is handled by session store
[14:48:47] <mikoto-chan> ah, like that. sounds smart.
[14:48:48] <yawkat> yes, with sessions you can do this much better.
[14:48:56] <wasamasa> if you insist, you can make your own session store
[14:48:58] <yawkat> it's how normal captchas work as well
[14:49:06] <wasamasa> for example with a database or redis or a file or whatever
[14:49:28] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 252 seconds)
[14:49:41] <wasamasa> one of the cryptopals lessons is that you under no circumstances hand out an attacker data that helps them break your application
[14:52:58] <wasamasa> what language/framework are you doing this with?
[14:53:06] <wasamasa> PHP has session handling built-in
[14:59:45] <int-e> does it pay for the therapists too?
[15:00:45] *** Joins: kish` (~aqua@user/aqua)
[15:01:29] <wasamasa> never
[15:02:25] *** Quits: qbt (~edun@user/edun) (Quit: WeeChat 3.2)
[15:04:30] *** Quits: srikavin (~srikavin@user/srikavin) (Ping timeout: 265 seconds)
[15:27:31] *** Joins: Lyn (~Lyn@user/law)
[15:27:49] *** Parts: Lyn (~Lyn@user/law) (Leaving)
[15:45:48] *** Joins: rtypo (~alex@user/rtypo)
[15:52:57] *** Quits: Colti (Miramar-FL@user/host-pond) (Excess Flood)
[15:53:12] *** Joins: Colti (Miramar-FL@user/host-pond)
[15:58:50] *** Joins: gabriel1 (~gabriel1@k2.ilion.info)
[16:04:26] *** Quits: gabriel1 (~gabriel1@k2.ilion.info) (Ping timeout: 265 seconds)
[16:16:32] *** Joins: krumelmonster (~jo@user/krumelmonster)
[16:30:30] *** Quits: lord| (~lordpipe@user/lordpipe) (Quit: https://i.imgur.com/xacQ09F.mp4)
[16:34:27] *** Joins: lord| (~lordpipe@user/lordpipe)
[16:37:30] *** Joins: mouseghost (~draco@user/mouseghost)
[16:40:34] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 258 seconds)
[16:42:06] *** Quits: ionface_ (~ionface@user/ionface) (Ping timeout: 258 seconds)
[16:42:25] *** Joins: ionface (~ionface@user/ionface)
[16:46:21] *** Quits: CryptoClub (~fafs@static-173-3-7-89.ipcom.comunitel.net) (Read error: Connection reset by peer)
[16:48:59] *** Joins: CryptoClub (~fafs@static-173-3-7-89.ipcom.comunitel.net)
[16:54:48] <krumelmonster> Hi, I'm looking for some advice on key diversification. I'm setting up a few globalplatform smartcards and they're supposed to be locked with a 128bit psk. I will hand out some to friends and they may want to replace or update the applet at some point and then I will give them the key for their card. Instead of using the same key for each card or using a random key for each and a list of the keys I used, I thought it'd be smart to use a 
[16:54:48] <krumelmonster> key diversification scheme. My idea for this is to randomy generate a 128bit 'master key' and then derive the key of a card by "encrypting" the serial number of the card with my master key. Here's my idea (all input is hexadecimal, 01234567 will be the card serial):
[16:54:48] <krumelmonster> echo 01234567 | xargs -0 printf %16s | xxd -r -p | openssl aes-128-cbc -nopad -v -k $(xxd -r -p master_key) | xxd -p -u
[16:54:48] <krumelmonster> Is this a good idea?
[16:56:14] <krumelmonster> No wait a second, this is a terrible idea, I should just hash my master key with the serial, right?
[16:57:21] <cehteh> dont you generate keys on the the card?
[16:58:04] <yawkat> just use random keys and save them if you need this
[16:58:05] <MacGyver> If it's a symmetric PSK, no.
[16:58:27] <yawkat> dont try to get clever if you dont need to
[17:00:40] <MacGyver> krumelmonster: I know NXP does stuff with a CMAC-based key diversification.
[17:00:51] <MacGyver> krumelmonster: Iirc because you want it to be one-way.
[17:01:07] <krumelmonster> The thing is that using a wrong psk will brick the card so it would be nice to automate key selection anyways. And I would like to learn something.
[17:01:50] <MacGyver> krumelmonster: But I'm also pretty certain they don't just use the card's UID as input.
[17:02:13] <MacGyver> Ah, here it is.
[17:02:16] <krumelmonster> MacGyver: Nice, they even have a 26-page documentation on it which I'll look into now.
[17:02:16] <MacGyver> krumelmonster: https://www.nxp.com/docs/en/application-note/AN10922.pdf
[17:02:57] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[17:03:16] <MacGyver> krumelmonster: You might also want to check EMV, see what it has to say about this.
[17:04:08] <krumelmonster> reading this now thanks. But in theory, combining my (sufficietly long) master key with the uid (regardless how few bits it has) using the correct cryptographic function should be sufficiently secure, right?
[17:05:51] <MacGyver> If you use a proper MAC function, in terms of being able to calculate the master key back from it, yes, I believe so.
[17:05:51] <yawkat> fsvo "cryptographic function"
[17:06:06] <yawkat> yea, with a MAC this should be safe.
[17:06:14] <MacGyver> But whether it's sufficiently *diverse*, is a different matter.
[17:06:34] <MacGyver> Or sufficiently secure in the sense that it would be uncopyable.
[17:07:18] <MacGyver> Uh, "uncopyable" meaning "unusable when copied to another card with a spoofed UID"
[17:07:48] <MacGyver> You'll just have to read the rationale for not just using the UID.
[17:15:27] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 258 seconds)
[17:17:24] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[17:22:32] *** Joins: gabriel1 (~gabriel1@k2.ilion.info)
[17:26:26] *** Quits: Brnocrist (~spartak@user/brnocrist) (Ping timeout: 268 seconds)
[17:28:10] <krumelmonster> I just realized that globalplatformpro might support key diversification with the --key-kdf <String: kdf> (Use KDF with master key) flag. But I'm not sure what this option does really and I don't want to destroy my card…
[17:28:10] <krumelmonster> I'll still keep reading that nxp documentation because I'd like to understand why not just use the UID and what you mean by "sufficiently *diverse*"
[17:28:16] *** Joins: Brnocrist (~spartak@user/brnocrist)
[17:40:59] <krumelmonster> MacGyver: I really can't find a "rationale for not just using the UID", instead: "It doesn’t matter how you make your diversification input, diversification input must be unique for unique PICC e.g. here the UID is unique and the same diversification input must be used in personalization and validation of the PICC.". Does sufficiently diverse mean to use differnt keys whenever possible and therefor generating a different key when repla
[17:40:59] <krumelmonster> cing the applet on a card (therefor including the application number in the diversifaction input)? And what's the attack scenario where someone spoofs the UID of a card?
[17:44:57] *** Quits: gabriel1 (~gabriel1@k2.ilion.info) (Remote host closed the connection)
[17:45:10] *** Joins: gabriel1 (~gabriel1@k2.ilion.info)
[17:46:39] *** Quits: gabriel1 (~gabriel1@k2.ilion.info) (Read error: Connection reset by peer)
[17:46:39] *** Joins: gabriel1_ (~gabriel1@k2.ilion.info)
[18:03:18] *** Joins: LVanon (~LVanon@h-212-85-93-9.NA.cust.bahnhof.se)
[18:04:07] *** Joins: zeedo_ (~zeedo@cpc157903-grth13-2-0-cust152.16-4.cable.virginm.net)
[18:05:30] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[18:06:26] *** Joins: kulak (~kulak@user/kulak)
[18:09:30] *** Quits: gabriel1_ (~gabriel1@k2.ilion.info) (Remote host closed the connection)
[18:09:39] *** Joins: gabriel1_ (~gabriel1@k2.ilion.info)
[18:12:22] *** Quits: gabriel1_ (~gabriel1@k2.ilion.info) (Remote host closed the connection)
[18:12:38] *** Joins: gabriel1_ (~gabriel1@k2.ilion.info)
[18:13:02] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[18:13:38] *** Joins: kulak (~kulak@user/kulak)
[18:15:27] *** Quits: gabriel1_ (~gabriel1@k2.ilion.info) (Remote host closed the connection)
[18:15:39] *** Joins: gabriel1_ (~gabriel1@k2.ilion.info)
[18:18:27] *** Quits: gabriel1_ (~gabriel1@k2.ilion.info) (Read error: Connection reset by peer)
[18:18:38] *** Joins: gabriel1_ (~gabriel1@k2.ilion.info)
[18:19:55] *** Quits: gabriel1_ (~gabriel1@k2.ilion.info) (Remote host closed the connection)
[18:20:08] *** Joins: gabriel1_ (~gabriel1@k2.ilion.info)
[18:21:23] *** Quits: gabriel1_ (~gabriel1@k2.ilion.info) (Remote host closed the connection)
[18:21:39] *** Joins: gabriel1_ (~gabriel1@k2.ilion.info)
[18:23:19] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[18:24:41] *** Joins: gabriel1__ (~gabriel1@k2.ilion.info)
[18:25:17] *** Quits: gabriel1_ (~gabriel1@k2.ilion.info) (Read error: Connection reset by peer)
[18:28:53] *** Quits: gabriel1__ (~gabriel1@k2.ilion.info) (Remote host closed the connection)
[18:29:08] *** Joins: gabriel1__ (~gabriel1@k2.ilion.info)
[18:30:24] *** Quits: gabriel1__ (~gabriel1@k2.ilion.info) (Remote host closed the connection)
[18:30:39] *** Joins: gabriel1__ (~gabriel1@k2.ilion.info)
[18:30:48] *** Quits: kulak (~kulak@user/kulak) (Ping timeout: 272 seconds)
[18:34:45] *** Joins: kulak (~kulak@user/kulak)
[18:44:50] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[18:59:56] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 272 seconds)
[19:00:52] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 258 seconds)
[19:05:27] *** Joins: akaWolf (~akaWolf@akawolf.org)
[19:08:48] *** Quits: krumelmonster (~jo@user/krumelmonster) (Ping timeout: 268 seconds)
[19:08:55] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[19:19:49] *** Joins: krumelmonster (~jo@user/krumelmonster)
[19:24:31] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:25:07] *** Joins: kulak (~kulak@user/kulak)
[19:25:54] *** Quits: krumelmonster (~jo@user/krumelmonster) (Ping timeout: 272 seconds)
[19:33:35] <mikoto-chan> how do I read a ed25519 private key? when I just cat it I get a bunch of weird characters, when I generate one with a program I get a sequence of alphanumerical characters
[19:34:15] <onelegend> what do you mean by read?
[19:34:15] <mikoto-chan> the file starts with |== ed25519v1-sec|
[19:34:16] <mikoto-chan> 0
[19:35:04] <mikoto-chan> onelegend: I want to convert it to the type required for my program I guess
[19:36:10] <mikoto-chan> https://www.cryptopp.com/wiki/Ed25519
[19:36:23] <onelegend> what program are you running?
[19:36:27] <mikoto-chan> I don't see anything related to |== ed25519v1-sec|
[19:36:59] <mikoto-chan> onelegend: I generated it with https://github.com/cathugger/mkp224o
[19:40:48] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[19:44:16] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 272 seconds)
[19:46:00] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[19:48:33] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:49:20] *** Quits: _mrlemke_ (~mrlemke@208.74.105.200) (Ping timeout: 272 seconds)
[19:54:24] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[19:58:22] *** Joins: kulak (~kulak@user/kulak)
[20:04:52] <mikoto-chan> nothing?
[20:05:53] <mikoto-chan> OpenSSH uses yet another format
[20:07:28] <ms7821> seems like your question is "how do I read the private generated by this particular script"
[20:07:48] <ms7821> openssh and openssl are the standard formats
[20:08:52] <mikoto-chan> ms7821: yes. do you think a hexdump can provide anything useful?
[20:09:06] <onelegend> are you trying to generate an ed25519 key for OpenSSH
[20:09:31] <ms7821> mikoto-chan, unlikely. I'm just reading the code to see if it's clear what format it's in
[20:10:10] <ms7821> because a google suggests tor private keys are stored in pem format which won't be a bunch of weird characters
[20:11:05] <mikoto-chan> no, I'm trying to host a hidden service. I have already a generated address (file generated is called hs_ed25519_secret_key) which starts with |== ed25519v1-sec| but I need something in the format 
[20:11:08] <mikoto-chan> "336b2a2cb797191c5e35e790244817536ac7ddcc81d79d13c8948cedba7c9590243bab5b1fc847959e675833d4dfe27f9c3448b82e2d5bc8d01f977ed51444af"
[20:11:20] <mikoto-chan> this is an example of an ed25519 generated key by my program ^
[20:11:59] <mikoto-chan> ms7821: note that this is with printf("%x"), if I change that to %s I get a bunch of weird characters again
[20:12:29] <ms7821> you're using mkp224o?
[20:12:52] <mikoto-chan> yes. that's what I used.
[20:12:55] <MacGyver> That's literally just the hex encoding of the key.
[20:13:03] <mikoto-chan> you can try to generate a few keys for your own.
[20:13:07] <ms7821> because that says you can just copy the key file from inside the directory it creates
[20:13:44] <mikoto-chan> ms7821: no look, I'm using a library inside my program that takes a different format but support for externally generated keys isn't amazing.
[20:14:05] <ms7821> you're being extremely conservative with information here, give us a chance
[20:14:07] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[20:14:15] <ms7821> what's your own program?
[20:16:04] <ms7821> because it looks like mkp224o creates standard tor private key files, so we need to know what your program expects
[20:16:06] <mikoto-chan> https://github.com/wybiral/torgo/blob/5fd9910eab31/ed25519.go#L16
[20:16:34] *** Quits: LVanon (~LVanon@h-212-85-93-9.NA.cust.bahnhof.se) (Ping timeout: 272 seconds)
[20:17:26] <mikoto-chan> this is the function I'm trying to use in my program. as you can see it a type called ed25519.PublicKey, if we take a look at how to construct this type in https://pkg.go.dev/crypto/ed25519#PrivateKey we see that it's a slice of bytes or string for simplicity.
[20:17:34] <ms7821> OK, well I guess you're gonna have to write a tor private key parser in go
[20:18:30] <mikoto-chan> ms7821: any examples of this in other languages?
[20:18:47] <MacGyver> Don't think about these things as "string for simplicity". They're cryptographic keys. They have a defined number of bytes. They're not ASCII nor any kind of encoded string.
[20:18:54] <mikoto-chan> so if I parse it I get an output similar to the stuff I sent?
[20:19:09] <mikoto-chan> MacGyver: true, that's why I suggested a hexdump
[20:27:46] <ms7821> I'm looking at https://github.com/ipsn/go-libtor/blob/a33d5d6/tor/src/lib/crypt_ops/crypto_rsa.c#L491 and don't see anything about a header
[20:29:03] <mikoto-chan> ms7821: it's weird. I'll just file a bug report for mkp224o and ask the person that made it how I can convert the keys to my preferred format.
[20:29:21] <ms7821> is that really a bug?
[20:29:54] *** Quits: lithiumpt (~lithiumpt@217.138.203.173) (Ping timeout: 240 seconds)
[20:29:58] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[20:31:19] <mikoto-chan> no, but it's not in the FAQ so I guess it won't hurt to ask since that's what the issue page is for I guess
[20:33:10] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 265 seconds)
[20:34:04] <ms7821> so it's actually "ed25519v1-secret", not "ed25519v1-sec"
[20:34:28] <ms7821> and I wonder if that's from libsodium or something
[20:35:56] <ms7821> oh no, it's intentional https://github.com/cathugger/mkp224o/blob/fc62855/worker.c#L37
[20:35:59] <ms7821> so definitely not a bug
[20:36:24] <ms7821> when parsing I'd just strip off that exact value then
[20:37:40] *** Joins: LVanon (~LVanon@h-212-85-93-9.NA.cust.bahnhof.se)
[20:37:45] <ms7821> so have a look at https://github.com/ipsn/go-libtor/blob/a33d5d6/tor/src/lib/crypt_ops/crypto_ed25519.c#L576
[20:39:00] <ms7821> you can see from a google that this is the standard format for ED keys in tor
[22:00:59] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[22:01:31] *** Server sets mode: +nt 
[22:01:59] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:03:54] *** Joins: kulak (~kulak@user/kulak)
[22:06:35] *** Joins: cone (~omar@107.150.22.75.adsl.inet-telecom.org)
[22:09:10] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:10:13] *** Joins: kulak (~kulak@user/kulak)
[22:14:09] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:14:42] *** Joins: kulak (~kulak@user/kulak)
[22:28:07] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[22:28:54] <onelegend> kulak:
[22:28:58] <onelegend> why you join leaving so much
[22:29:01] <onelegend> cmon man
[22:29:13] <onelegend> maybe I should join leave as well
[22:29:17] *** Parts: onelegend (onelegend@wireguard/tunneler/onelegend) (WeeChat 3.2)
[22:29:19] *** Joins: onelegend (onelegend@wireguard/tunneler/onelegend)
[22:29:23] *** Parts: onelegend (onelegend@wireguard/tunneler/onelegend) (WeeChat 3.2)
[22:29:25] *** Joins: onelegend (onelegend@wireguard/tunneler/onelegend)
[22:30:12] <MacGyver> Maybe you shouldn't.
[22:30:28] <onelegend> o
[22:30:58] <MacGyver> If it bothers you so much, most IRC clients have settings that allow some form of join/part hiding.
[22:31:20] <MacGyver> It's really only an issue if it goes on for hours or days.
[22:31:57] <onelegend> ah I should enable that
[22:37:02] <diophantoz> people should fix their connections
[22:37:10] <diophantoz> or the network should disconnect them
[22:37:30] <Peng> It wasn't my idea for my ISP to turn garbage
[22:37:51] <diophantoz> then no irc for you
[22:37:57] <diophantoz> hehe
[22:40:38] *** Quits: r-g (~r-g@163.172.90.106) (Quit: r-g)
[22:47:40] <onelegend> i am approaching my data limit oh no
[22:47:42] <onelegend> AAAAAND
[22:47:44] *** Parts: onelegend (onelegend@wireguard/tunneler/onelegend) (WeeChat 3.2)
[22:54:18] *** Joins: reedrichards (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[22:55:32] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 272 seconds)
[22:55:32] *** reedrichards is now known as MrFantastik
[23:12:31] *** Joins: dez (uid92154@user/dez)
[23:18:37] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[23:21:39] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 268 seconds)
[23:27:59] *** Joins: willyg_cos (~willyg_co@user/willyg-cos/x-4994202)
[23:28:49] <mikoto-chan> ms7821: /go #lainchan 
[23:28:57] <mikoto-chan> oops.
[23:28:59] <mikoto-chan> sorry for that.
[23:34:54] *** Joins: CryptoDavid (uid14990@id-14990.highgate.irccloud.com)
[23:37:13] *** Quits: willyg_cos (~willyg_co@user/willyg-cos/x-4994202) (Quit: Leaving)
[23:37:39] *** Joins: Toadisattva (~Toadisatt@gateway/tor-sasl/toadisattva)
[23:37:44] *** Joins: Atone (~test@ipb218fd9d.dynamic.kabel-deutschland.de)
[23:38:13] <Atone> some token maker here ?
[23:38:23] <yawkat> topic
[23:38:43] <Atone> oops
[23:39:00] <Atone> which channel?
