[00:01:34] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[00:02:53] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[00:03:50] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[00:04:46] *** Quits: nikko77 (~nikko77@2001:1388:5ca1:b729:4495:60a9:53f5:d6d4) (Quit: WeeChat 3.3)
[00:05:01] *** Joins: nikko77 (~nikko77@2001:1388:5ca1:b729:4495:60a9:53f5:d6d4)
[00:05:10] *** Joins: pah (~pah@user/pah)
[00:08:20] <Alipha> [](auto x) {}  // x is a template parameter
[00:08:34] <Alipha> void foo(auto x) {}  // again, template parameter (c++20)
[00:09:27] <Alipha> template<bool X> auto foo() { if constexpr(X) return 3; else return 5.0; }  // return type depends upon template parameters
[00:10:08] <Alipha> i'm assuming that last one is what imMute was referring to
[00:10:22] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[00:10:47] *** Joins: chozorho (~chozorho@2601:146:300:c30::d1b7)
[00:10:52] <imMute> Alipha: I was thinking of stuff like <algorithm> but that works too
[00:14:06] *** Joins: pah (~pah@user/pah)
[00:18:30] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[00:19:03] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[00:21:26] *** Joins: johnny (~johnny@user/johnny)
[00:24:55] <PJBoy> you can replace that auto with a non-auto if you try hard enough
[00:25:36] <PJBoy> I think lambdas are the only true use of auto
[00:26:34] <PJBoy> ...and the return type of std::bind
[00:26:51] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[00:28:12] *** Joins: pah (~pah@user/pah)
[00:28:26] <PJBoy> ...and all the ranges views
[00:34:16] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:2402:3824:89e9:f383) (Ping timeout: 268 seconds)
[00:34:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 268 seconds)
[00:38:27] <cbreak> PJBoy: if you have decltype, you can probably get quite far
[00:38:36] <PJBoy> decltype is cheating
[00:38:47] <PJBoy> it's auto in spirit
[00:43:35] *** Quits: paul424 (~tom@ip-5-172-236-151.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:46:00] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:49:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[00:50:26] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[00:51:29] *** Joins: useful_idiot9 (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[00:51:46] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (Ping timeout: 245 seconds)
[00:51:46] *** useful_idiot9 is now known as useful_idiot
[00:52:23] *** Joins: johnny (~johnny@user/johnny)
[00:55:27] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:02:03] *** Joins: msk (~msk@185.124.240.174)
[01:03:14] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[01:04:14] *** Joins: pah (~pah@user/pah)
[01:06:01] *** Quits: magla (~gelignite@55d4d950.access.ecotel.net) (Quit: Stay safe!)
[01:06:57] *** Quits: proller (~p@2a02:6b8:0:40c:d084:b940:a3c3:ddc3) (Ping timeout: 268 seconds)
[01:18:28] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[01:21:44] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[01:22:41] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:25:31] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:26:33] <Alipha> decltype is verbose auto
[01:28:28] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[01:31:29] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:35:02] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Read error: Connection reset by peer)
[01:37:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:33] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:33] *** ChanServ sets mode: +v npaperbot
[01:42:38] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[01:46:57] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[01:52:35] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 268 seconds)
[01:55:23] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[01:58:07] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 268 seconds)
[02:06:34] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[02:08:12] *** Joins: proller (~p@2a02:6b8:b081:8817::1:4)
[02:08:56] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[02:09:27] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:09:30] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:19:21] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:26:14] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[02:28:21] *** Quits: proller (~p@2a02:6b8:b081:8817::1:4) (Ping timeout: 268 seconds)
[02:35:45] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d482:ac12:2161:fb6a) (Ping timeout: 268 seconds)
[02:37:22] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[02:41:07] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[02:42:49] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:6006:1495:d31f:5b85)
[02:46:13] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[02:46:41] *** Joins: pah_ (~pah@host-79-26-139-194.retail.telecomitalia.it)
[02:49:31] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:50:04] *** Quits: soman (~soman@83.139.147.234) (Ping timeout: 256 seconds)
[02:53:15] *** Quits: cart_man (~rynot@host-78-144-120-137.as13285.net) (Quit: Konversation terminated!)
[02:54:10] *** Quits: pah_ (~pah@host-79-26-139-194.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[02:55:11] *** Joins: pah (~pah@user/pah)
[02:55:53] *** Joins: varioust_ (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[02:56:13] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[02:56:43] *** Quits: varioust_ (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Client Quit)
[02:57:11] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[02:57:32] *** Joins: varioust_ (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[02:57:44] *** Quits: varioust_ (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Remote host closed the connection)
[02:57:54] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[03:07:13] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[03:08:15] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[03:14:33] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:19:18] <yolo_> is out-of-range-iterator UB? just found out std::rotate(v.begin(),v.begin()+v.size()+1, v.end()) will go out of boundary, but the program runs until I turned on sanitizers
[03:19:45] <yolo_> it would be nice if rotate() can looping around and never go out of boundary, like a circle
[03:21:56] <kalven> it is
[03:23:31] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 252 seconds)
[03:24:01] *** Joins: X-Scale` (~ARM@46.50.2.72)
[03:25:42] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 268 seconds)
[03:26:22] *** Quits: X-Scale (~ARM@92.250.98.212) (Ping timeout: 260 seconds)
[03:26:47] *** X-Scale` is now known as X-Scale
[03:27:31] *** Joins: Khoyo (~khoyo@user/khoyo)
[03:29:48] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[03:30:01] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[03:30:22] *** Joins: pah_ (~pah@host-87-17-60-10.retail.telecomitalia.it)
[03:32:48] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[03:35:34] *** Quits: pah_ (~pah@host-87-17-60-10.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[03:36:34] <Alipha> v.begin() + (n % v.size())? Assuming n isn't going to get large enough to overflow
[03:49:44] *** Joins: ferdna (~ferdna@user/ferdna)
[03:49:57] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:51:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:51:59] *** Joins: pah (~pah@user/pah)
[03:53:50] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:00:14] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[04:00:18] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:08:09] *** Quits: DSpider (~DSpider@82.79.237.100) (Quit: Leaving)
[04:08:52] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:6006:1495:d31f:5b85) (Ping timeout: 268 seconds)
[04:11:27] <yolo_> Alipha: right, I'm writing a safe_rotate wrapper for that
[04:16:22] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:18:42] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[04:23:31] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[04:24:53] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 268 seconds)
[04:25:17] *** Joins: proller (~p@2a02:6b8:b081:8820::1:24)
[04:27:55] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[04:28:19] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[04:29:24] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:31:42] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[04:40:04] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[04:44:16] *** Joins: ferdna (~ferdna@user/ferdna)
[04:44:50] *** Joins: euouae (~euouae@user/euouae)
[04:53:16] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 268 seconds)
[04:55:30] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[04:55:55] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:56:29] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:00:49] *** Quits: euouae (~euouae@user/euouae) (Quit: Client closed)
[05:01:07] *** Joins: euouae (~euouae@user/euouae)
[05:10:29] *** Joins: cbreak_ (~cbreak@77-58-201-132.dclient.hispeed.ch)
[05:10:48] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 265 seconds)
[05:11:11] *** Joins: Praise (~Fat@user/praise)
[05:11:31] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[05:11:53] *** Quits: euouae (~euouae@user/euouae) (Quit: Client closed)
[05:12:26] *** Joins: euouae (~euouae@user/euouae)
[05:22:57] *** Quits: cbreak_ (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[05:25:08] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[05:30:17] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:2402:3824:89e9:f383)
[05:32:40] *** Quits: jancoow (~jancoow@user/jancoow) (Quit: The Lounge - https://thelounge.chat)
[05:34:04] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:34:49] *** Joins: navidr (uid112413@id-112413.uxbridge.irccloud.com)
[05:34:55] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[05:35:29] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 264 seconds)
[05:37:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:34] *** ChanServ sets mode: +v npaperbot
[05:38:16] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[05:40:26] *** Joins: Khoyo (~khoyo@user/khoyo)
[05:45:20] *** Quits: euouae (~euouae@user/euouae) (Quit: Client closed)
[05:45:25] *** Joins: frost (~frost@user/frost)
[05:48:31] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[05:58:01] *** Quits: nikko77 (~nikko77@2001:1388:5ca1:b729:4495:60a9:53f5:d6d4) (Quit: WeeChat 3.3)
[05:58:06] *** Quits: andreasbuhr (~quassel@p549db337.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:58:26] *** Joins: nikko77 (~nikko77@2001:1388:5ca1:b729:4495:60a9:53f5:d6d4)
[05:58:27] *** Joins: andreasbuhr (~quassel@p549db393.dip0.t-ipconnect.de)
[06:05:30] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Read error: Connection reset by peer)
[06:05:59] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[06:06:01] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[06:06:39] *** Joins: jancoow (~jancoow@user/jancoow)
[06:12:11] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[06:15:54] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:19:39] *** Joins: The_Jag (~The_Jag@host-79-52-47-230.retail.telecomitalia.it)
[06:20:32] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[06:20:49] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 268 seconds)
[06:22:35] *** Quits: The_Jag_ (~The_Jag@host-87-16-87-93.retail.telecomitalia.it) (Ping timeout: 264 seconds)
[06:24:34] *** Joins: Khoyo (~khoyo@user/khoyo)
[06:29:45] <amosbird> Hello! I'd like to implement a narrow_cast function that allows user narrowing arithmetic types explicitly. What's the modern way to disable possible compiler warnings for this function?
[06:40:08] *** Joins: thad_the_man_2 (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net)
[06:40:35] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:2402:3824:89e9:f383) (Quit: Quit)
[06:42:11] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Ping timeout: 245 seconds)
[06:44:14] *** Quits: ShiftyLogic (~shiftylog@66.115.146.16) (Ping timeout: 260 seconds)
[06:50:46] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 260 seconds)
[06:54:30] <Alipha> amosbird: how would this be different from simply using static_cast?
[06:55:58] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[06:56:09] *** Quits: nikko77 (~nikko77@2001:1388:5ca1:b729:4495:60a9:53f5:d6d4) (Quit: WeeChat 3.3)
[06:56:23] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:56:27] *** Joins: nikko77-vm (~nikko77@2001:1388:5ca1:b729:7e54:e31:8ddb:65cf)
[06:57:58] <amosbird> Alipha: more explicit and proper compiler warning handling to specific scope
[07:02:46] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[07:02:46] *** Quits: chozorho (~chozorho@2601:146:300:c30::d1b7) (Ping timeout: 268 seconds)
[07:03:16] *** Joins: chozorho (~chozorho@2601:146:300:c30::7b79)
[07:11:52] *** Joins: zmt01 (~zmt00@user/zmt00)
[07:13:10] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 260 seconds)
[07:15:09] *** Quits: nikko77-vm (~nikko77@2001:1388:5ca1:b729:7e54:e31:8ddb:65cf) (Quit: WeeChat 3.3)
[07:35:56] *** Quits: HvszrStykp (~X@81.171.62.81) (Ping timeout: 245 seconds)
[07:39:32] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[07:45:50] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 260 seconds)
[07:54:36] *** Quits: navidr (uid112413@id-112413.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:55:05] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:58:32] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:58:53] *** Quits: proller (~p@2a02:6b8:b081:8820::1:24) (Ping timeout: 268 seconds)
[08:00:19] *** Joins: nikko77 (~nikko77@2001:1388:5ca1:b729:7e54:e31:8ddb:65cf)
[08:00:52] *** Joins: smeso (~smeso@user/smeso)
[08:05:54] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 260 seconds)
[08:07:15] *** Joins: gggpkm (~gggpkm@111.63.44.13)
[08:07:55] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 260 seconds)
[08:08:25] *** Joins: pah_ (~pah@host-80-183-20-167.pool80183.interbusiness.it)
[08:09:14] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[08:09:31] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[08:09:54] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:10:48] *** Quits: nikko77 (~nikko77@2001:1388:5ca1:b729:7e54:e31:8ddb:65cf) (Quit: WeeChat 3.3)
[08:11:02] *** Quits: gggpkm (~gggpkm@111.63.44.13) (Remote host closed the connection)
[08:11:30] *** Joins: gggpkm (~gggpkm@60.10.23.160)
[08:11:40] *** Joins: nikko77 (~nikko77@2001:1388:5ca1:b729:7e54:e31:8ddb:65cf)
[08:12:32] *** Quits: gggpkm (~gggpkm@60.10.23.160) (Remote host closed the connection)
[08:12:57] *** Joins: gggpkm (~gggpkm@60.10.23.160)
[08:18:02] *** Joins: pah (~pah@user/pah)
[08:18:37] *** Quits: pah_ (~pah@host-80-183-20-167.pool80183.interbusiness.it) (Ping timeout: 268 seconds)
[08:21:41] *** Joins: Khoyo (~khoyo@user/khoyo)
[08:28:28] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[08:29:14] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (Quit: WeeChat 3.2.1)
[08:29:39] *** Joins: pah (~pah@user/pah)
[08:30:29] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[08:41:56] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[08:42:51] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[08:47:05] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:47:38] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[08:48:19] *** Joins: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[08:50:32] *** Quits: gggpkm (~gggpkm@60.10.23.160) (Remote host closed the connection)
[08:51:52] *** Joins: gggpkm (~gggpkm@111.63.44.13)
[08:52:32] *** Quits: gggpkm (~gggpkm@111.63.44.13) (Remote host closed the connection)
[08:56:14] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[08:58:10] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:03:44] *** Quits: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:04:18] *** Joins: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[09:04:39] *** Joins: zmt01 (~zmt00@user/zmt00)
[09:09:10] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[09:10:41] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[09:17:01] *** Quits: nikko77 (~nikko77@2001:1388:5ca1:b729:7e54:e31:8ddb:65cf) (Quit: WeeChat 3.3)
[09:17:57] *** Quits: chozorho (~chozorho@2601:146:300:c30::7b79) (Quit: that is all, folks! good night)
[09:19:49] *** Quits: Skyfire (~pyon@user/pyon) (Read error: Connection reset by peer)
[09:24:36] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[09:24:48] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:25:34] *** Quits: zmt00 (~zmt00@user/zmt00) (Remote host closed the connection)
[09:27:01] *** Joins: pah (~pah@user/pah)
[09:28:17] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[09:30:22] *** Quits: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:33:27] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Remote host closed the connection)
[09:33:52] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[09:34:04] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:35:06] *** Joins: night_wulfe__ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:37:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:34] *** ChanServ sets mode: +v npaperbot
[09:37:35] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 264 seconds)
[09:38:50] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[09:41:47] *** Joins: HvszrStykp (~X@81.171.62.81)
[09:44:54] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:46:06] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[09:46:47] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Read error: Connection reset by peer)
[09:47:10] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[09:48:10] *** Quits: night_wulfe__ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[09:50:24] *** Quits: thad_the_man_2 (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net) (Quit: Leaving)
[09:56:58] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[09:57:24] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:10:06] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[10:12:29] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:16:06] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[10:25:29] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:26:45] *** Joins: gggpkm_ (~gggpkm@111.63.44.13)
[10:29:10] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[10:30:35] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 268 seconds)
[10:32:12] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[10:39:05] *** Joins: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[10:40:03] *** Quits: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Client Quit)
[10:43:12] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:45:21] <cbreak> amosbird: static_cast shouldn't give warnings
[10:45:27] <cbreak> just use that inside your function
[10:50:34] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[10:57:53] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:58:31] *** pah is now known as pa
[11:02:01] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[11:16:48] *** Joins: gggpkm__ (~gggpkm@60.10.23.160)
[11:20:31] *** Quits: gggpkm_ (~gggpkm@111.63.44.13) (Ping timeout: 268 seconds)
[11:21:54] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 260 seconds)
[11:24:49] *** Joins: gggpkm_ (~gggpkm@60.10.23.160)
[11:28:02] *** Quits: gggpkm__ (~gggpkm@60.10.23.160) (Ping timeout: 260 seconds)
[11:45:21] *** lkor is now known as lionkor
[11:49:56] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:50:52] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:55:29] *** Joins: gggpkm__ (~gggpkm@111.63.44.13)
[11:56:32] *** Quits: gggpkm__ (~gggpkm@111.63.44.13) (Remote host closed the connection)
[11:56:33] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[11:56:43] <TheGuestMovie> LordKalma: are you using Django REST Framework?
[11:57:57] <TheGuestMovie> 2) Are you using that new (2 years old) Python typing?
[11:58:08] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[11:58:18] <TheGuestMovie> how does it compare to C++ typing?
[11:58:46] *** Quits: gggpkm_ (~gggpkm@60.10.23.160) (Ping timeout: 260 seconds)
[12:00:23] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:19:12] <lionkor> new typing? those optional type hints?
[12:19:25] *** Quits: andreasbuhr (~quassel@p549db393.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:20:14] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:20:44] <TinoDidriksen> "The Python runtime does not enforce function and variable type annotations." - ah, so it's worthless then. PHP can at least enforce types.
[12:24:49] *** Joins: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[12:26:40] *** Quits: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Client Quit)
[12:26:45] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:30:12] <lionkor> TinoDidriksen: Pretty much useless, yeah. There are tools like `mypy` that attempt static type checking using type hints, and it's very close to what you'd expect.
[12:31:11] <lionkor> Never seen a single benefit behind non-static-typing
[12:32:37] *** Joins: ShiftyLogic (~shiftylog@66.115.146.16)
[12:34:03] <TheGuestMovie> TinoDidriksen: not at runtime, but it checks at compile time. So as long as all your app's code has the type hints, what's the difference, in practice? (genuinely wondering)
[12:34:25] <TheGuestMovie> not at compile time...but as a manual step you run before you run a command
[12:34:43] <TinoDidriksen> That right there is the problem. A manual step.
[12:34:44] <TheGuestMovie> oh, I was referring to the static tools
[12:35:11] <TheGuestMovie> well yeah, that's the only way you can have optional typings. You don't like it, add a git precommit hook to apply it automatically, and instruct your collaborators to install it.
[12:36:34] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[12:36:54] <TinoDidriksen> Only way in Python, sure.
[12:37:11] <TheGuestMovie> you're not gonna turn Python into a statically typed language, this is a path you choose to follow for your own Python code :)
[12:37:41] <TinoDidriksen> It can be done better, such as how PHP does it. You can opt in to strict types, and they are checked by the engine.
[12:37:58] *** Quits: ShiftyLogic (~shiftylog@66.115.146.16) (Ping timeout: 260 seconds)
[12:38:08] <TheGuestMovie> you mean add a runtime cost?
[12:40:44] <TinoDidriksen> Sure, until things are JIT'ed.
[12:42:33] <Haohmaru> bleh, snek
[12:42:44] <TheGuestMovie> not sure why they didnt do it like that. But tbh it doesn't seem like a huge deal. You still get those checks in current Python, you just have to integrate them into your build process.
[12:43:20] <TheGuestMovie> it had to have been for performance reasons because why else?
[12:44:04] <TinoDidriksen> Eh. Python is already so dog slow that a type check would not have been noticable in the noise.
[12:44:34] *** Quits: pa (~pah@user/pah) (Ping timeout: 260 seconds)
[12:44:38] *** Joins: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[12:45:03] <TheGuestMovie> anyway, wondering if a Python head can answer this: Looking at https://github.com/typeddjango/awesome-python-typing#static-type-checkers , I'm surprised there's so many options. Are these different static type checkers incompatible with each other? Did Python typing get Linuxed, with multiple half-assed incompatible rival solutions fragmenting the
[12:45:03] <TheGuestMovie> community? Or is there a standard way a library's typings are defined, and then all these tools consume the same definition file?
[12:45:33] <TinoDidriksen> If you're asking a Python specific question, this is the wrong channel.
[12:45:40] *** Joins: pah (~pah@user/pah)
[12:45:50] <Haohmaru> !python
[12:45:51] <nolyc> python is the common name for the Boidae family of nonvenomous constricting snakes - specifically the subfamily Pythonidae.
[12:45:56] <TheGuestMovie> I know, just dont want to sign up to join #python
[12:46:00] <TheGuestMovie> Haohmaru: whoa
[12:46:12] <Haohmaru> just the facts ^
[12:46:35] <TheGuestMovie> Screw you, I always liked Kibagami Genjuro more
[12:46:45] <TinoDidriksen> Oh, #python is +r? Well, tough, still off topic here.
[12:47:23] <TinoDidriksen> Surely there are non-r Python channels? Check /list *python*
[12:47:46] <Haohmaru> +r isn't a problem if you're logged in
[12:47:53] <Haohmaru> it's annoying tho
[12:48:53] <TinoDidriksen> I've kept the C++ channels non-r to see if it'd work, and so far I've been pleasantly surprised.
[12:49:19] <Haohmaru> it was probably me who complained about the +r
[12:49:34] <Haohmaru> of course it'll work
[12:49:48] <TheGuestMovie> The only time I've ever seen any spam on IRC, was when those Libera folx were trying to take down Freenode
[12:49:59] <TheGuestMovie> doesn't matter if it's +r or not
[12:50:02] <Haohmaru> still can't convince #debian to ditch the +r tho >:/
[12:50:15] <Haohmaru> dafuq
[12:50:25] <johnny> i've seen spam on irc plenty
[12:50:29] <TinoDidriksen> #C++-general was never +r, but #C++ was on Freenode. I did not set +r in #C++ on purpose, and it seems to be going ok.
[12:50:32] <johnny> +r was necessary
[12:50:33] <TheGuestMovie> johnny: in recent years?
[12:50:37] <Haohmaru> TheGuestMovie you got that the wrong way
[12:50:38] <johnny> this year
[12:51:08] <TheGuestMovie> I'm just lucky I guess? And since the move to Libera I only hang out in open channels (here, #linux, #qt)
[12:51:10] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[12:51:19] <TheGuestMovie> So you'd think I'd be seeing MORE spam if your theory was correct
[12:51:44] <Haohmaru> you don't need +r when you have +q $~a
[12:51:51] <TheGuestMovie> umm, in english, doc?
[12:52:09] *** Joins: pah (~pah@user/pah)
[12:52:10] <TinoDidriksen> In the transition phase there were certainly spambots, but they all mysteriously stopped when Freenode went private. Almost as if Freenode zealots were behind it.
[12:52:30] <Haohmaru> who else would it be
[12:52:30] <johnny> i meant i had spam on freenode.. before the switch
[12:52:44] <TheGuestMovie> TinoDidriksen: you're insinuating that Freenode leadership unleashed spambots telling people to go to Libera?
[12:52:49] <johnny> whatever happened to freenode
[12:53:02] <johnny> i wonder how it's going over there
[12:53:12] <TinoDidriksen> There were spambots on all networks telling people to go to both Freenode and Libera.
[12:53:12] <Haohmaru> TheGuestMovie there are spam strategies of all kinds
[12:53:27] <TinoDidriksen> And they all stopped as soon as Freenode shut down.
[12:53:35] <TheGuestMovie> they were doing OK until they nuked the user database. Then casual people like me just left.
[12:53:58] <TheGuestMovie> TinoDidriksen: well yeah, there's no point in spending effort on propaganda if you've already won the war
[12:54:01] <johnny> well i only stuck around until the channels i used moved, and they all did
[12:54:03] <Haohmaru> the $owner nuked it ;]
[12:54:17] <johnny> and the one i admin i stuck around a bit longer
[12:54:28] <johnny> just tell pople to move
[12:54:29] <Haohmaru> i stayed till the end, it's not every day you witness a ship sinking ;P~
[12:54:40] <TheGuestMovie> I stayed in the end and stopped using IRC for a few months
[12:54:46] <Haohmaru> aww
[12:54:51] <TheGuestMovie> even now I feel dirty being here
[12:54:53] <johnny> all my channels moved within the week, so it was fine
[12:55:01] <Haohmaru> eh?! why
[12:55:24] <TheGuestMovie> Just never fell for the Libera narrative, I saw it in a different way
[12:55:40] <johnny> lol
[12:55:42] <LiaoTao> lolwut
[12:55:42] <johnny> "narrative"
[12:55:45] <johnny> ridic
[12:55:51] <Haohmaru> this is basically the contents of what freenode used to be, under a different name, same people
[12:56:08] <johnny> stop drinkin the koolaid TheGuestMovie
[12:56:09] <TheGuestMovie> it was definitely a crafted narrative. I mean you can make the truth appear whatever you want it to be if you show things in the right lense.
[12:56:17] <TinoDidriksen> Narrative? Mr. Lee is quite clearly the bad guy in all this. There is simply no doubt, given all the crazy stuff he's posting.
[12:56:25] <johnny> the people who actually did the work . LEFT.. that's not a narrative
[12:56:39] <johnny> whatever reason for which they left.. THEY LEFT
[12:56:44] <TheGuestMovie> Here, it was evil imperialist capitalist shows up, and a a brave band of gender-neutral altruistic ops resist
[12:56:48] <johnny> eh
[12:56:56] <johnny> dude... seriously.. lay off the koolaid
[12:57:06] <Haohmaru> you got the story wrong ;]
[12:57:32] <TheGuestMovie> in reality it was just a power grab, triggered by the most minor of things (putting a hyperlink to his VPS business on the Freenode website without consulting with the ops)
[12:57:37] <Haohmaru> which is normal, the sh*t got stirred quite heavily to create confusion
[12:57:53] <LiaoTao> I defaulted to believe the Libera people but then it got verifiable when actual Lee propaganda started showing up all over the place
[12:58:10] <johnny> just consider it a strike... for whatever reason
[12:58:24] <TinoDidriksen> The stuff Lee is posting as "news" on Freenode.net these days is just outright crazy.
[12:58:51] <TheGuestMovie> He has his fault, mainly doing ANYTHING to piss off mentaly ill IRC people before he was confident the technology and infrastructure was well-documented so someone else could manage it if they leave
[12:58:54] <johnny> TheGuestMovie, as soon as they started taking over channels for mentioning libera in their topics
[12:59:04] <johnny> you should have realized that whatever "narrative" was irrelevant
[12:59:10] <TheGuestMovie> johnny: you mean the automated that was revsed
[12:59:11] <Haohmaru> he has brain issues obviously and they're showing thru his behavior on IRC, it's clear as day
[12:59:19] <johnny> the fact that it happened in the first place
[12:59:31] <johnny> somebody wrote it to do that .. and did it..
[12:59:50] <johnny> stop defending the indefensible
[12:59:54] <Haohmaru> johnny it was the $owner himself, i asked him
[12:59:55] <TheGuestMovie> johnny: this is what I mean by "narrative". A badly-written script took over some channels at 3AM, then reversed it 20 minutes later. People still act like he forcibly took over channels. In the end, the only channels that changed ownerships, were those that were shut down by their OPs .
[13:00:20] <johnny> the fact that soembody wrote the "badly-written script" AND executed.. tells you soemthing
[13:00:27] <johnny> that's not true
[13:00:27] <Haohmaru> TheGuestMovie https://i.imgur.com/5EVJtm2.png
[13:00:32] <johnny> it happened to our channel
[13:00:37] <johnny> they didn't give it back
[13:00:38] <TinoDidriksen> There is no question Lee is the bad guy in this story. Even a little bit of research will show that.
[13:00:41] <TheGuestMovie> I actually complaiend in #freenode about some of my favorite channels banning people for refusing to leave to Libera, and remaining active on Freenode. Thye eventually took over one of those channels. I see thisÂ  as a good thing.
[13:00:57] <johnny> they did not gve my channel back!
[13:00:59] <TheGuestMovie> But then they nuked the user database, so all of this is moot
[13:01:10] <johnny> no it it isn't. because you're saying some ridiculous stuff
[13:01:18] <johnny> and you're just gonna go about your life believing it
[13:01:36] <TheGuestMovie> Haohmaru: what am I looking at?
[13:01:52] <Haohmaru> TheGuestMovie screenshot of one of the network channels
[13:02:11] <Haohmaru> i forgot whether it was #freenode or #freenode-policy-feedback
[13:02:17] <Haohmaru> rasengan == the $owner
[13:02:44] <TinoDidriksen> E.g. this nugget Lee posted as news: "Apple has scientifically proven and asserted that encrypted content scanning is absolutely possible" - that's such an absurd thing to state as fact. It has no foundation in reality.
[13:03:17] <very_sneaky_> i guess it depends on your definition of scanning
[13:03:34] <very_sneaky_> if they mean you can read and copy encrypted content, then that's true
[13:03:48] <very_sneaky_> unencrypting or indexing the unencrypted content is another matter
[13:03:48] <TheGuestMovie> AFAIK the only channels I was in that were taken over, are those where malicious ops thought they could FORBID the community on Freenode form using. I don't believe in channel ownership. I treat IRC chatrooms as topic chatrooms. You don't get to stop me from chatting about Linux in ##linux because you registered it 10 years ago and now you want to
[13:03:49] <TheGuestMovie> force me to stop using Freenode.
[13:03:57] <ville> Haohmaru: it's not of course it will work. we did make ##c++ +r for a reason on the old networks
[13:04:18] <Haohmaru> why? ;P~
[13:04:21] <TheGuestMovie> For a bunch of communist, the Libera folx really pulled the "private property! TOS! MY channel!" excuse to attack Freenode staff
[13:04:21] <ville> well i guess it might have been #c++ back then
[13:04:34] <Haohmaru> i wasn't on ##c++
[13:04:54] <ville> too much crap. setting +r acts like a pretty good deterrent to all kinds of shenanigans
[13:05:13] *** Joins: plastico (~plastico@neomutt/plastico)
[13:06:05] <TheGuestMovie> ville: I really don't recall any difference in spam levels between +r and -r channels when I had an account on Freenode
[13:06:24] <Haohmaru> on top of the +q version, it'll prevent join/part/quit flood from unregistered
[13:06:45] <Haohmaru> TheGuestMovie because most of those without +r had +q
[13:06:46] <TheGuestMovie> cause generally, the only people still using IRC are older people who don't really care anymore
[13:07:17] <TinoDidriksen> There definitely were spam differences. We had to +r some channels during spambot attacks, and it worked.
[13:07:39] <Haohmaru> maybe you didn't have the +q at all then?
[13:07:40] <TheGuestMovie> what were they spamming? online pharmacies and stuff like that?
[13:07:43] <ville> TheGuestMovie: the channels predate freenode
[13:07:56] <ville> TheGuestMovie: some religious nonsense was a general topic
[13:08:09] <TheGuestMovie> religious spammers? really? haha
[13:08:21] <LiaoTao> schizoposting all day every day
[13:08:24] <ville> at any rate all this is pointless to discuss adn off-topic here
[13:08:25] <TheGuestMovie> so not even commercially motivated
[13:08:25] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:999:b053:d7d0:e90f)
[13:08:29] <Haohmaru> there were some spambot waves throwing mud at certain staff members
[13:08:44] <TinoDidriksen> True, this veered way off topic - belongs in #C++-social
[13:08:48] <Haohmaru> i think that's when the +r feature was invented
[13:09:04] <Haohmaru> and +q probably followed after that
[13:09:34] <Haohmaru> !fact
[13:09:35] <nolyc> Haohmaru: A template-parameter of the form class identifier is a type-parameter.
[13:09:45] <TheGuestMovie> i thought #C++-general == #c++-social . Didnt even know the latter existed.
[13:09:55] <TinoDidriksen> !channels
[13:09:56] <Haohmaru> nah
[13:10:02] <TinoDidriksen> !otherchannels
[13:10:03] <nolyc> #C++-basic, #C++-general, #C++-social and #Geordi
[13:10:13] <TinoDidriksen> Hm...
[13:10:18] <Haohmaru> this here is for general C++ including libraries and other stuff
[13:10:38] <TinoDidriksen> Huh, why is !channels set to respond in /msg ...
[13:12:31] <TheGuestMovie> Haohmaru: I knew that, but I thought it also doubled as a social channel
[13:12:35] <TinoDidriksen> Oh, because it's not a factoid, but a command to see what channels it's in.
[13:13:14] <TinoDidriksen> !otherchannels
[13:13:15] <nolyc> #C++ (strictly Standard C++), #c++-basic (for learners and newbies), #C++-general (non-standard but still related to C++), #c++-social (anything goes), and #geordi
[13:13:23] <TinoDidriksen> There, now with basic explanations.
[13:13:49] <TheGuestMovie> now put that in the topic :)
[13:13:53] <xq> nice
[13:13:54] <TinoDidriksen> It is
[13:14:02] <Haohmaru> nolyc got pimped up
[13:14:03] <nolyc> Haohmaru: Error: "got" is not a valid command.
[13:14:03] <TheGuestMovie> my bad
[13:14:14] <TheGuestMovie> nolyc exit
[13:14:15] <nolyc> TheGuestMovie: Error: "exit" is not a valid command.
[13:15:33] <comrad> whats up with geordi?
[13:15:50] <TinoDidriksen> geordi --version
[13:15:51] <geordi> GCC 12.0.0 20211028 (experimental)
[13:15:56] <TinoDidriksen> Is anything up with geordi?
[13:16:07] <comrad> geordi --help
[13:16:08] <geordi> Mini-manual:  http://www.eelis.net/geordi/
[13:16:13] <Haohmaru> << "i'm okay folks"
[13:16:14] <geordi> i'm okay folks
[13:16:27] <comrad> << "\n"
[13:16:28] <geordi>  
[13:16:50] <comrad> << std::hex << 25
[13:16:50] <geordi> 19
[13:16:58] <comrad> okay now im buzzed!
[13:17:12] <TinoDidriksen> It also responds to /msg and in #geordi
[13:17:29] *** Quits: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:17:33] <Haohmaru> TinoDidriksen "he" ;P~
[13:18:18] <TheGuestMovie> geordi: struct Person { int age; } int main() { Person p; p.name = "Brian"; }
[13:18:18] <geordi> error: expected ';' after struct definition (fix known)
[13:18:25] <TheGuestMovie> geordi: struct Person { int age; };Â  int main() { Person p; p.name = "Brian"; }
[13:18:25] <geordi> error: 'struct Person' has no member named 'name'
[13:18:28] <TheGuestMovie> cool
[13:18:56] <PJBoy> woah a bot the compiles C++ snippets in chat
[13:18:58] <TheGuestMovie> geordi: #include <QString> struct Person { int age; QString name; };Â  int main() { Person p; p.name = "Brian"; }
[13:18:58] <geordi> error: extra tokens at end of #include directive
[13:19:00] <PJBoy> this must be a new feature
[13:19:13] <TheGuestMovie> geordi: #include <QString>;Â  struct Person { int age; QString name; };Â  int main() { Person p; p.name = "Brian"; }
[13:19:13] <geordi> Same error.
[13:19:19] <TinoDidriksen> Please test in /msg or #geordi ...
[13:19:25] <TheGuestMovie> oh, you can PM him, great
[13:19:27] <TinoDidriksen> And read the manual.
[13:19:42] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[13:20:58] <TheGuestMovie> Anyone here using Alexandrescu's "expected"? Like a personal equivalent, or https://github.com/TartanLlama/expected ? I tried the latter yesterday, it's quite nice
[13:22:01] <PJBoy> that's Sy Brand's github
[13:22:47] *** Joins: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[13:23:48] <Haohmaru> que?!
[13:24:09] <PJBoy> AFAIK alexandrescu has no expected impl
[13:28:17] <LordKalma> Sy is great
[13:28:22] <TheGuestMovie> yeah I know, until it's part of C++ you gotta write your own equivalent or use a library
[13:29:10] <LordKalma> morning
[13:29:27] <PJBoy> I'd be hugely surprised if it ever made it into the standard
[13:29:29] <TheGuestMovie> LordKalma: what else did they make that I should look into?
[13:29:39] <PJBoy> [P0323]
[13:29:39] <npaperbot> P0323R10: [Library] std::expected <https://wg21.link/p0323r10> (by JF Bastien, Vicente Botet) (2021-04-15) (Related: https://wg21.link/lewg29, https://wg21.link/p0323r10/github)
[13:29:41] <PJBoy> then again...
[13:29:44] <LordKalma> Sy is a C++ advocate at microsoft
[13:29:51] <LordKalma> he has some great articles on the c++ blog
[13:29:57] <LordKalma> and a very funny twitter haha
[13:30:07] <LordKalma> eg: https://devblogs.microsoft.com/cppblog/clear-functional-c-documentation-with-sphinx-breathe-doxygen-cmake/
[13:31:26] <PJBoy> and his YT channel explains computer science with cats
[13:31:34] <PJBoy> *their
[13:31:36] <PJBoy> <_<
[13:31:56] <LordKalma> banned from #include<c++
[13:32:13] <PJBoy> >_>
[13:32:21] <PJBoy> if this was discord, I would have just edited the message
[13:32:26] <PJBoy> no harm no foul
[13:33:45] <PJBoy> dude this YT channel is great hahaha
[13:33:49] <PJBoy> > What is cache coherence and how is it achieved? Watch me explain with cats, shark stickers, and Totoro
[13:34:07] <TheGuestMovie> I'm glad I dont have to bother with Doxygen anymore since I dont have a manager anymore, dont even see the point of Sphinx. I just put comments on class declarations and their public methods and try to make the code self-documented otherwise. I figure the best doc browser is the IDE. Obviously, don't do this if you're distributing libraries.
[13:34:52] <TheGuestMovie> are you using Sphinx yourself?
[13:35:03] <LordKalma> I tried it once
[13:35:06] <LordKalma> but I don't libraries
[13:35:08] <LordKalma> (yet)
[13:37:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:34] *** ChanServ sets mode: +v npaperbot
[13:37:53] <LordKalma> https://twitter.com/tartanllama/status/1283816537778982914
[13:37:57] <LordKalma> this one is funny as hell
[13:39:56] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[13:40:06] <TheGuestMovie> Oh, I played that game ages ago
[13:40:24] <TheGuestMovie> god has it been 15 years already?!
[13:41:19] *** Joins: supernova (~quassel@2405:9800:ba11:6207:360b:958:40f6:a5cf)
[13:41:39] *** Joins: pah_ (~pah@host-79-54-72-220.retail.telecomitalia.it)
[13:41:54] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[13:48:31] *** Quits: pah_ (~pah@host-79-54-72-220.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[13:48:33] *** Joins: pah (~pah@user/pah)
[13:49:32] *** Joins: paulf (~paulf@nat-ies.mentorg.com)
[13:52:00] <PJBoy> can you believe it's been 21 years since the turn of the century?
[13:52:44] *** Joins: paul424 (~tom@ip-37-248-158-58.multi.internet.cyfrowypolsat.pl)
[13:53:21] *** Joins: gggp_ (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[13:53:39] *** Quits: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[13:54:15] <Haohmaru> yeah, we're old
[13:55:52] *** Joins: riksu-raksu (riksteri@gateway/vpn/airvpn/riksteri)
[13:56:32] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Ping timeout: 268 seconds)
[13:58:00] <Haohmaru> !fact
[13:58:01] <nolyc> Haohmaru: Type nullopt_t shall not have a default constructor. It shall be a literal type.
[13:58:22] <Haohmaru> huh, what's this even
[13:59:37] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[14:01:25] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:02:18] <PJBoy> { nullopt_t x; }
[14:02:18] <geordi> error: no matching function for call to 'nullopt_t::nullopt_t()'
[14:02:23] <PJBoy> confirmed no default constructor
[14:06:24] *** Quits: gggp_ (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:06:37] *** pah is now known as pa
[14:09:07] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[14:11:57] *** Quits: pa (~pah@user/pah) (Ping timeout: 268 seconds)
[14:13:04] *** Joins: pah (~pah@user/pah)
[14:18:44] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[14:22:14] *** Joins: pah (~pah@user/pah)
[14:32:06] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[14:37:52] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[14:39:49] *** Joins: pah (~pah@user/pah)
[14:43:50] *** Joins: DSpider (~DSpider@82.79.237.7)
[14:53:06] <Haohmaru> !fact
[14:53:07] <nolyc> Haohmaru: Alignments have an order from weaker to stronger or stricter alignments.
[14:55:03] *** Joins: markong (~kvirc@213.146.188.203)
[14:56:51] *** Joins: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[15:01:40] *** Quits: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[15:01:56] *** Joins: gggp_ (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[15:03:10] *** Quits: gggp_ (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:03:43] *** Joins: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[15:06:14] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 268 seconds)
[15:13:03] *** Quits: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:14:46] <oj> What should I use if I want a hash table? I remember there were some caveats about std::map or std::unordered map
[15:14:58] <oj> like the performance was bad
[15:15:19] <Haohmaru> { std::hash a; }
[15:15:19] <geordi> error: class template argument deduction failed:
[15:15:46] <Haohmaru> or is that a hash function?
[15:17:28] <LiaoTao> oj, std::map for an ordered map which is generally implemented using a tree, std::unordered_map for a hash map that has boxed nodes
[15:17:37] <paulf> iirc there are much faster implementations of hash maps than std::unordered map
[15:17:41] <LiaoTao> unordered_map has ABI limitations that prevent open addressing implementations
[15:17:49] <LiaoTao> Or rather inplace storage
[15:18:29] <paulf> but it it still very fast so unless speed is of critical importance I wouldn't worry
[15:18:38] <LiaoTao> Exactly
[15:18:57] <LiaoTao> I've only had to replace it once for a hard realtime application that mandated no willy nilly allocations
[15:19:18] <oj> I'm doing performance work, but I doubt this will be the bottleneck
[15:19:35] <oj> alright, I'll just go with the STL then
[15:19:36] <oj> thanks
[15:19:56] <paulf> yes, use std::unordered_map then profile
[15:23:07] *** very_sneaky_ is now known as very_sneaky
[15:26:30] *** Joins: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[15:36:44] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[15:42:09] *** Quits: paul424 (~tom@ip-37-248-158-58.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[15:46:33] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[15:50:50] *** Quits: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:01:26] *** Joins: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[16:08:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:2402:3824:89e9:f383)
[16:23:56] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:25:09] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[16:28:55] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 265 seconds)
[16:30:12] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:30:36] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[16:31:52] *** Quits: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:32:25] *** Joins: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[16:34:50] *** Joins: ShiftyLogic (~shiftylog@66.115.146.16)
[16:39:34] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:39:36] *** Joins: proller (~p@2a02:6b8:b081:1215::1:35)
[16:40:35] *** Quits: ShiftyLogic (~shiftylog@66.115.146.16) (Ping timeout: 268 seconds)
[16:45:44] *** Quits: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:45:46] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[16:46:19] *** Joins: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[16:47:24] *** Quits: supernova (~quassel@2405:9800:ba11:6207:360b:958:40f6:a5cf) (Quit: No Ping reply in 180 seconds.)
[16:48:32] *** Joins: supernova (~quassel@2405:9800:ba11:6207:8f43:bde3:a0a9:65e2)
[16:48:46] *** Quits: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Client Quit)
[16:51:54] *** Quits: supernova (~quassel@2405:9800:ba11:6207:8f43:bde3:a0a9:65e2) (Client Quit)
[16:53:13] *** Joins: supernova (~quassel@2405:9800:ba11:6207:8f43:bde3:a0a9:65e2)
[16:55:04] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[16:56:39] *** Joins: nikko77 (~nikko77@2001:1388:5ca1:c29e:5320:9bb7:70fa:6859)
[17:00:55] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:04:52] *** Quits: The_Jag (~The_Jag@host-79-52-47-230.retail.telecomitalia.it) (Read error: Connection reset by peer)
[17:05:42] *** Joins: The_Jag (~The_Jag@host-79-52-47-230.retail.telecomitalia.it)
[17:12:43] *** Joins: pulse (~pulse@user/pulse)
[17:15:26] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[17:17:36] *** Joins: pah_ (~pah@host-79-41-43-165.retail.telecomitalia.it)
[17:18:12] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[17:29:17] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 268 seconds)
[17:36:32] <yolo_> v.begin() + v.size() -- will warn on "conversion from size_type(unsigned) to difference_type(long int)" which is very noisy and comes up so often, what's the best and safe way to silence it? v.begin()+static_cast<std::vector<int>::difference_type>(v.size())? can this get even more verbose? seems like a failure in design to me at least on the usability side
[17:37:27] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:35] *** ChanServ sets mode: +v npaperbot
[17:39:04] *** Joins: horribleprogram (~user@2607:fea8:7040:830:111:ecf:f3c8:7083)
[17:40:13] <Alipha> I can't actually stand -Wconversion or -Wsign-conversion because it's too noisy, sighs
[17:41:25] <yolo_> in the meantime if it introduces a bug it is very hard to track down
[17:41:37] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[17:41:55] *** Joins: Terminus (~null@user/terminus)
[17:46:24] *** Quits: horribleprogram (~user@2607:fea8:7040:830:111:ecf:f3c8:7083) (Changing host)
[17:46:24] *** Joins: horribleprogram (~user@user/horribleprogram)
[17:48:03] <m_ben> yolo_: try std::advance(itr, n)
[17:49:51] <PJBoy> advance/next
[17:55:39] <Haohmaru> !fact
[17:55:40] <nolyc> Haohmaru: A fallthrough statement may only appear within an enclosing switch statement.
[18:01:27] <LordKalma> [[falltrough]]
[18:01:34] <LordKalma> [[fallthrough]] *
[18:01:54] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[18:02:50] <Haohmaru> return; // you fell into the trap
[18:03:13] <yolo_> m_ben: std::next(it, v.size()) gave the same warning, as it is long-int while v.size() is unsigned-long
[18:04:34] <yolo_> basically for all + and - operations with iterator, it expects a differenece_type type
[18:11:47] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[18:12:28] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:e8c0:35dd:3893:129a)
[18:12:28] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:e8c0:35dd:3893:129a) (Changing host)
[18:12:28] *** Joins: skapata (~Skapata@user/skapata)
[18:15:01] <cq-work> "We should use bloat", "I hate boost", "have you used it", "no but I heard bad things" <- why are my conversations with professionals like this.
[18:16:56] <cq-work> er, "we should use boost" lol, used bloat since that was the reason but I was paraphrasing.
[18:18:32] <horribleprogram> look this is going to be annoying, but I'm sorry
[18:18:41] <paulf> same for C++
[18:19:05] <horribleprogram> when we say type, do we mean any & and const/volatile qualifiers?
[18:19:10] <m_ben> yolo_: I don't get any warnings with std::advance()
[18:19:17] <horribleprogram> for example, ik that a function's signature is different foo(const int); vs foo(int);
[18:19:49] <paulf> One of my colleagues last week said C++ is bad because one of the original developers (he couldn't remember who) said it was too complicated
[18:19:55] <cq-work> horribleprogram: I think it depends on context but const and volatile change type.
[18:19:56] <horribleprogram> but by "type" we mean type-id ?
[18:20:02] <horribleprogram> cq-work: correct
[18:20:30] *** Joins: Skyfire (~pyon@user/pyon)
[18:20:34] <paulf> Then he followed that with a claim that C++ template code is unreadable
[18:20:36] <cq-work> Er, it depends on the context of the conversation to be clear. Usually type is just referring to whatever the type a variable is, nothing more specific than that.
[18:20:46] <horribleprogram> yeah
[18:21:13] <horribleprogram> well I'm not talking about template type parameters, but yeah I can understand why "type deduction" for example, is context-dependent
[18:21:57] <paulf> He didn't seem to want to listen when I pointed out that kedit probably isn't the best C++ editor
[18:22:13] <horribleprogram> what's wrong with templates?
[18:22:20] <yolo_> m_ben: did you have -Wsign-conversion flag on
[18:22:27] <m_ben> yes
[18:22:43] <horribleprogram> also the "definition of a type" would be seeable at the object-code level
[18:22:57] <horribleprogram> so basically, type-safe linkage would be how we would determine what constitutes a type
[18:23:04] <yolo_> g++-11 -Wall -Wextra -Wsign-conversion will report std::next(it, v.size()/2) warnings on the type conversion
[18:23:40] <m_ben> I do get a warning with std::next but not with std::advance
[18:24:32] <horribleprogram> advance is constexpr post C++11
[18:25:14] <horribleprogram> and it takes a bidirectional iterator
[18:25:28] <horribleprogram> so it doesn't get implicitly converted to an unsigned
[18:25:43] <yolo_> m_ben: right, strange
[18:26:11] <horribleprogram> also why would v.size() / 2 give u a warning anyways?
[18:26:39] <horribleprogram> because of that expression being equivalent to v.size() / static_cast<unsigned>(2) ?
[18:27:53] *** Joins: ShiftyLogic (~shiftylog@66.115.146.16)
[18:28:06] <yolo_> m_ben: cppreference showed very different implementation between advance and prev/next, advance uses 'class Distance' while prev/next uses 'difference_type'
[18:29:27] <rpav> https://doc.qt.io/archives/3.3/qmake-manual-3.html <- "the 10 minute guide to using qmake" .. this is a nice quick intro .. but it seriously undersells itself, it's like "the 10 second guide to qmake"
[18:29:40] <rpav> if that
[18:30:00] <horribleprogram> rpav: don't use qmake, use cmake with QT
[18:30:20] <rpav> don't parrot :P
[18:30:26] <Raziel> just don't use QT forehead
[18:30:32] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:30:47] <rpav> (i need to build something that only has old-style stuff and i forget how to use it ;)
[18:30:51] <rpav> Raziel: hah
[18:31:00] <rpav> ideally though there are few other practical options in a lot of cases
[18:31:04] <LordKalma> qt is terrible
[18:31:07] <LordKalma> everything else is worse
[18:31:18] <rpav> there really isn't even much else tbh
[18:31:44] <Raziel> unfortunate but true
[18:31:45] <horribleprogram> never use QT just for its appearance, as once u get married to 1 particular framework, it's appearance features will become deprecated over time, leaving u with a framework's underlying design API, which may not be any good
[18:31:57] <rpav> like there is gtk, it's a decent stack and gtkmm is ok .. glade is vastly superior to qt designer in every way .. but gtk is a moving target and doesn't always play well with windows
[18:31:58] <yolo_> Qt could be better if Nokia remains to be the king in Europe, many Qt related OSS projects are funded by Nokia in the past
[18:32:03] <rpav> and i'm not sure it plays well at all with 4K
[18:33:00] <yolo_> "Desktop GUI is dead, embrace the browser" -- for the 99% desktop-GUI use cases
[18:33:16] <rpav> eh
[18:33:36] <yolo_> your browser is your new GUI for 99% of the things you ever need(the 1% is like the HMI screen on a factory floor)
[18:33:44] <rpav> not really
[18:33:46] <paulf> Is there any connection between Nokia and Qt these days?
[18:33:48] <horribleprogram> he's right
[18:33:56] <LordKalma> desktop is dead, yes, and I hate that it is
[18:33:58] <paulf> Though that it had been spun out
[18:33:59] <LordKalma> paulf, no
[18:34:02] <LordKalma> that's long gone
[18:34:13] <rpav> i mean maybe if you're a casual user, but a lot of technical/professional/etc stuff isn't going to work well in the browser :p
[18:34:26] <LordKalma> you won't do SolidWorks in the browser
[18:34:33] <horribleprogram> LordKalma: yes u will
[18:34:41] <rpav> the desktop definitely is not dead if you're into basically anything more than reading email and news and facebook
[18:34:41] <LordKalma> seems that people forget that there is stuff beyond IDEs
[18:35:00] <rpav> i mean some people code in a browser today, but mostly out of ignorance
[18:35:01] <Raziel> browsers bad
[18:35:06] <horribleprogram> ElectronJS is much more flexible than any other library, framework, GUI, w/e
[18:35:15] <LordKalma> I use vscode, and I love it
[18:35:17] <rpav> horribleprogram: not really
[18:35:20] <horribleprogram> yes it is
[18:35:24] <LordKalma> I don't want an SDR app on it
[18:35:44] <rpav> like try shoving gigabytes of model or simulation data through a browser app and we'll see about "flexible"
[18:35:48] <Raziel> I know I said "just don't use Qt" but if the alternative is browser-based then, shit, shove that Qt straight into my veins
[18:35:52] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:36:12] <horribleprogram> sure
[18:36:19] <horribleprogram> what toolkit does Blender use
[18:36:20] <yolo_> professionals need IDE is in the 1% pool by the way. your browser is your framework for anything fancy down the road for 99% population that does not work as a software developer (or graphic designer) and does not operator the PLC screen in factories
[18:36:28] <rpav> or the little-brother of HPC .. games
[18:36:30] <LordKalma> horribleprogram, in house, iirc
[18:36:44] <horribleprogram> no
[18:36:49] <rpav> browser games are never going to be cutting edge, because you can always do better by getting rid of the browser
[18:37:08] <rpav> blender toolkit is definitely in-house
[18:37:33] <rpav> i kinda wish they'd have separated and released it 15 years ago but what can you do
[18:37:39] <horribleprogram> https://github.com/wiztk/framework
[18:37:46] <horribleprogram> that's it btw
[18:37:58] <rpav> no it's not
[18:38:00] <LordKalma> "for Linux only"
[18:38:04] <LordKalma> "based on Google Skia and Wayland,"
[18:38:07] <LordKalma> doesn't seem like it
[18:38:11] <rpav> whatever you linked is some unmaintained POS
[18:38:14] <horribleprogram> :'(
[18:38:17] <yolo_> i tied many those gtk/rust-backend/go-gui-with-browser etc, hate to say, none beats electronjs, not even close
[18:38:32] <LordKalma> cough https://azul.rs/
[18:38:39] <LordKalma> ^basically firefox
[18:38:54] <rpav> yolo_: "i don't know how to do anything except in a browser so i couldn't get anything else to work"
[18:38:57] <yolo_> the webkit engine uses more memory and worse, you still need a chrome/firefox, double-down on the damage
[18:39:26] <rpav> fwiw if you really need browser gui app, neutralinojs looked pretty neat
[18:39:29] <yolo_> i mean those GUI copies the idea of electron but uses a different engine(webit)
[18:39:51] <rpav> you get the browser, except instead of distributing 200MB of libraries it uses the native libs
[18:40:15] <rpav> in any case, the browser is shit and one should avoid it at all costs
[18:40:35] *** Joins: meator (~meator@user/meator)
[18:40:48] <LordKalma> https://www.youtube.com/watch?v=oRFtthg5avs
[18:40:49] <rpav> MS sortof made it work ok with vscode, but that has a lot of limitations too and is pretty slow vs other native editors
[18:40:56] <LordKalma> I want to do something like this
[18:41:01] <LordKalma> and I doubt I would do it with a browser
[18:41:19] <LordKalma> electron is the reason we can't have multi window on vscode
[18:41:49] <rpav> LordKalma: yeah that's a huge issue for me
[18:42:04] <rpav> i mean you _can_ have multiple windows right, but it's all independent copies of the code
[18:42:18] <LordKalma> you can open the same workspace twice, yeah, iirc
[18:42:20] <LordKalma> but not sure, actually
[18:42:24] <rpav> 1 differnet clangd _per window_ even for the same project
[18:42:28] <LordKalma> yap
[18:43:30] <rpav> it's just inefficient .. there's no good reason for it, i think, even _with_ electron .. like they should have the "editor" running in a shared backend process and do frontend on electron, except that's probably slow, so
[18:44:27] <ville> rpav: at least it's not emacs slow
[18:44:47] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[18:44:52] <kalven> or visual studio slow
[18:45:05] <LordKalma> VS 2022 is finally x64
[18:45:26] *** Joins: cart_man (~rynot@host-78-144-127-199.as13285.net)
[18:45:44] <comrad> kalven: emacs is not slow just deeply contemplating
[18:46:58] <ville> it's slow. if i can type couple words ahead of anything being displayed that's pretty bad for an editor.
[18:47:09] <Raziel> at least visual studio is doing a lot of shit
[18:47:42] <LordKalma> with the clangd extension on vscode you can open its log output and check it's parsing
[18:48:12] <comrad> Raziel: it would be nice if it would be doing the good shit
[18:48:14] *** Joins: markong (~kvirc@213.146.188.203)
[18:48:31] <comrad> Raziel: method parameter are only shown if vs allows for it
[18:50:43] <LordKalma> btw, tomorrow is qt's world summit
[18:50:51] <LordKalma> I think tickets might still be free
[18:50:55] <LordKalma> it's online
[18:52:35] <yolo_> http://sciter.com is much lighter than any html/css/GUI engine, the license fee is reasonable and free if you only need use its binary build,
[18:52:45] <kalven> tickets to watch a stream?
[18:52:47] <LordKalma> sciter is meh
[18:53:03] <LordKalma> https://www.qt.io/qtws21
[18:53:06] <LordKalma> free tickers, but yeah
[18:53:18] <LordKalma> well, last april I paid 250â‚¬ to watch and talk on a stream haha
[18:53:21] <yolo_> LordKalma: have you used it? it took me 10 minutes to recall its name as my brain had a place for scite the editor
[18:53:23] <LordKalma> that's science conferences for you
[19:02:36] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 245 seconds)
[19:04:23] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[19:04:57] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[19:05:46] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Ping timeout: 260 seconds)
[19:06:08] *** Joins: gggpkm (~gggpkm@111.63.14.119)
[19:11:23] <rpav> ville: emacs is definitely not slow or you're using pre-27/28 and/or lsp-ui overlay crap
[19:12:06] <rpav> _maybe_ you have too many file watchers active but i'm not sure i determined that was an actual cause or merely happenstance
[19:14:47] <ville> rpav: i am on 27.2 and emacs is definetly slow, and it's not just my setup either. it's always been slow. i've used it ~25 years.
[19:17:16] <yolo_> might be too late to switch to vi :)
[19:18:12] <rpav> ville: then you've been doing it wrong for 25 years :p
[19:18:14] <ville> there's no reasonable pattern i've found for it to be slow either. sometimes i can replicate the jankyness at specific spots, but soon as anything changes, it's no longer occuring, so trying to report it is bit of a non-starter
[19:18:40] <rpav> there are clearly inefficient things (e.g. magit with a huge commit) but i haven't found any particular slowness i can't track down
[19:20:41] <ville> it's just typing text. the display just stops and i can get ahead by a word or two
[19:20:59] <rpav> something is seriously messed up with your emacs if that's the case
[19:21:28] <rpav> if it happens with emacs -Q, probably something with your machine
[19:21:44] <ville> but it's not just my setup. others have it as well and they've their own indipendent setups they've made
[19:21:46] <rpav> like maybe if you're running emacs on something from the 80s
[19:22:15] <rpav> unverified claims aren't really useful for debugging the problem
[19:22:32] <rpav> like, clearly this is not the norm or no one would use the software
[19:24:00] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[19:24:06] <kalven> ville: clearly you're just holding it wrong
[19:26:06] *** Joins: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net)
[19:28:30] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:31:03] *** Quits: gggp (~gggp@220-136-146-93.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:31:10] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[19:31:16] <RandomReader> the whole computer
[19:31:26] <RandomReader> like even the foundation in your building is wrong
[19:32:38] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[19:35:06] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 268 seconds)
[19:35:36] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[19:41:34] *** Joins: JeffH (~JeffH@153.sub-174-245-195.myvzw.com)
[19:42:52] <fiesh> yolo_: nvim is noticably faster than vim, so I'd recommend against switching to vim -- and bare vi is unbearable as an IDE ;)
[19:43:07] *** Quits: gggpkm (~gggpkm@111.63.14.119) (Ping timeout: 268 seconds)
[19:43:51] *** Joins: paul424 (~tom@ip-37-248-156-41.multi.internet.cyfrowypolsat.pl)
[19:44:10] <JeffH> I want to get a good c++ reference book. Currently the project I work on is limited to the 03 standard. Would you recommend a book that references the latest standards or an older book focusing on 03?
[19:44:15] <fiesh> (and YouCompleteMe was also very slow, but coc is now proper async and thus doesn't impact the editor... I think having proper async support was even the origin of nvim?)
[19:44:44] <fiesh> JeffH: cppreference.com is a fantastic reference that's up to date, free, and continues to be updated
[19:45:03] <fiesh> JeffH: that being said, I think C++03 is basically legacy that should be avoided
[19:45:31] <JeffH> I canâ€™t avoid it right now.
[19:47:05] <PJBoy> learning about C++11+ would probably just make you sad
[19:47:30] <JeffH> Ha
[19:48:14] <JeffH> C++11 seems to have been a HUGE update.
[19:51:03] <PJBoy> yeah it's a big deal
[19:51:59] <cbreak> c++11 is great
[19:52:11] <cbreak> it kind of showed that the language's not dead yet
[19:52:55] <JeffH> Maybe in 10 years weâ€™ll get to jump to C++11. Haha
[19:55:15] <comrad> JeffH: C++ 03 and C++17 looks very different and is used differently. Better get an more modern book
[19:55:54] <InPhase> lol.  Why are there still projects being developed on C++03?
[19:56:17] <InPhase> There was a time when that made sense for reasons, but that time should be well past by now.
[19:57:05] <ville> JeffH: hard to beat standard for a reference
[19:57:34] <JeffH> I find in the embedded world people are afraid of c++
[19:58:20] <PJBoy> I'd be afraid of C++03
[19:59:20] <LiaoTao> I'd be afraid of any compiler that only supports C++03
[19:59:46] *** Joins: jkaye (~jkaye@BELVEDERE-T.ear2.Denver1.Level3.net)
[20:00:21] <JeffH> LiaoTao: not sure if our compiler only supports C++03.
[20:01:17] <JeffH> The software framework weâ€™re using seems to be what is driving the choice.
[20:01:50] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 260 seconds)
[20:01:54] <JeffH> Not really sure as I didnâ€™t come onto toe project at the start.
[20:01:59] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[20:03:09] <JeffH> Last project absolutely wouldnâ€™t allow exceptions or templates.
[20:03:35] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[20:03:37] <Raziel> C++ pre 11 kinda sucked balls
[20:04:06] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[20:04:22] <Raziel> although, maybe more so when you're familiar with it post-11
[20:04:30] <LiaoTao> JeffH, Sucks to be you! :D
[20:05:32] <Raziel> also, doesn't everyone hate exceptions anyway?
[20:06:17] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:2402:3824:89e9:f383) (Quit: Quit)
[20:06:23] <LordKalma> no
[20:06:28] <LiaoTao> Conceptually? No. As they are implemented? Yes.
[20:06:42] <JeffH> Iâ€™ve never really dealt with exceptions
[20:07:10] *** Quits: proller (~p@2a02:6b8:b081:1215::1:35) (Ping timeout: 268 seconds)
[20:09:11] <yolo_> https://sciter.com/hello-cpp-tutorial/  managed to get this light-weight electronjs apps run and it only takes 40MB memory
[20:10:23] <kalven> 40MB!? in my day.. rabble rabble..
[20:10:45] <Raziel> b-but that's not electron
[20:10:47] <yolo_> well anything else use js/html/css engine is like 200MB to start with
[20:11:06] <LordKalma> yeah, that's a JS framework, but not electron
[20:11:21] <LordKalma> again, I'd love to get on the JS GUI hype train
[20:11:26] <LordKalma> but when you want performant graphics...
[20:11:29] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:999:b053:d7d0:e90f) (Ping timeout: 268 seconds)
[20:11:30] <yolo_> sciter is not a browser engine, it's a html/css/js engine that has nothing to do the internet
[20:11:48] <LordKalma> yolo_, you were the one to call it electron
[20:12:11] <LordKalma> <yolo_> [...]  managed to get this light-weight electronjs apps [...]
[20:12:24] <yolo_> LordKalma: for anything media-centric/intensive no you don't want browser or existing js engines
[20:12:40] <yolo_> i actually plaed with wasm(again) yesterday then bail out, not for me
[20:12:45] <LordKalma> then begs the question again
[20:12:47] <yolo_> s/plaed/played/
[20:12:47] <LordKalma> what do you use then?
[20:12:49] <LordKalma> Qt Quick?
[20:13:05] <yolo_> some simple GUI stuff found over the net
[20:13:14] <LordKalma> sure
[20:13:26] <LordKalma> let's bet a long term project in some random library on the net
[20:13:35] <kalven> LordKalma: fwiw, I don't think the graphics you showed in that youtube video is out of reach for a web ui.
[20:13:39] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d5c5:55dd:220f:b083)
[20:13:42] *** Parts: paulf (~paulf@nat-ies.mentorg.com) ()
[20:13:43] <LordKalma> kalven, for sure aren't
[20:13:53] <LordKalma> I know a dude that build an app like that with asm anyway
[20:13:56] <LordKalma> *wasm
[20:14:16] <LordKalma> with nanoGui https://github.com/wjakob/nanogui iirc
[20:14:22] <JeffH> I need to come up with a run project to do that can use the latest c++ standard
[20:14:52] <LordKalma> I'm waiting for GCC and clang and cmake to get up to date with c++ modules
[20:14:59] <LordKalma> right now sitting confortably on c++17
[20:15:15] <LordKalma> well, this weekend I was doing a python project that's going to turn into a JS project
[20:15:18] <LordKalma> but that's another story
[20:15:26] <JeffH> s/run/fun
[20:15:27] <LordKalma> well, at least I finally might to get to learn JS
[20:15:45] <kalven> just go to TS right away :P
[20:16:07] <LordKalma> isn't taht JS with type hints? hahah
[20:16:08] * LordKalma runs
[20:17:10] <kalven> more or less
[20:17:59] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[20:18:16] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[20:19:50] *** Joins: proller (~p@2002:50f0:d845:10:41a5:ca2e:e623:f4b4)
[20:19:56] *** Quits: JeffH (~JeffH@153.sub-174-245-195.myvzw.com) (Remote host closed the connection)
[20:20:09] *** Joins: JeffH (~JeffH@153.sub-174-245-195.myvzw.com)
[20:20:33] <PJBoy> I wonder what cmake will do with C++ modules
[20:20:44] <PJBoy> given that they already use the word "module" in their nomenclature
[20:20:47] <Raziel> pretend they don't exist?
[20:20:48] <Raziel> :^)
[20:20:49] <LordKalma> you didn't have to wonder if you just watched the talk from Kitware's executive
[20:21:11] <PJBoy> you don't know that
[20:21:17] <PJBoy> maybe I'd be bewildered and confused
[20:21:21] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d5c5:55dd:220f:b083) (Ping timeout: 268 seconds)
[20:21:25] <LordKalma> it's pretty clear
[20:21:35] <PJBoy> well maybe I've incredibly dumb
[20:21:38] <PJBoy> *I'm
[20:21:48] <LordKalma> can't argue with that
[20:22:01] *** Joins: kurfen_ (~kurfen@45.152.181.22)
[20:22:29] <LordKalma> https://youtu.be/wULu83jQmIQ?t=2037
[20:22:34] <LordKalma> starting from this timestamp :D
[20:22:37] <yolo_> when you get into javascript, after like 2 weeks to get up all its tools etc, and write a few lines of js, then you're asked to study typescript
[20:22:50] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:22:51] <LordKalma> PJBoy, do watch it, honestly
[20:22:52] <PJBoy> ty
[20:22:55] *** Quits: kurfen (~kurfen@45.152.181.20) (Ping timeout: 260 seconds)
[20:23:01] <yolo_> js ecosystem still evolves fast, I feel anyone is serious in that field is going to cut lifespan in half
[20:23:17] <yolo_> s/get up/set up/
[20:23:42] <PJBoy> well I'm a little scared already
[20:23:47] <LordKalma> jhahah why?
[20:23:52] <PJBoy> they're exporting a module from a cpp file
[20:23:59] <PJBoy> modules are more akin to header files
[20:24:03] <LordKalma> hahah it's an academic example, ffs
[20:24:09] <PJBoy> hahaha
[20:24:11] <LordKalma> wait for the next slide :)
[20:25:00] <yolo_> https://blog.feabhas.com/2021/08/c20-modules-with-gcc11/  played with this a few weeks ago, not fell in love with this modules thing just yet
[20:25:03] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 268 seconds)
[20:25:05] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[20:25:30] <yolo_> modules feels like a tidalwave change
[20:25:42] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:25:56] <JeffH> What are modules?
[20:26:07] <LordKalma> PJBoy, since you know modules, what happens if modules have circular dependencies?
[20:26:13] <LordKalma> a black hole swallows your pc?
[20:26:28] <PJBoy> what would be an example of a circular dependency?
[20:26:51] <PJBoy> circular dependencies don't really resonate with me
[20:27:29] <comrad> LordKalma: just announce that you dont believe in circular dependencies. that serves apparently a lot of people well ;)
[20:27:29] <PJBoy> JeffH, you know how in C++ we do this #include "..." stuff
[20:27:42] <JeffH> Yeah
[20:27:52] <PJBoy> and #include just copy+pastes the contents of that header file
[20:28:14] <PJBoy> and the compiler can't sensibly detect changes beyond "literally anything about this file changed"
[20:28:30] <PJBoy> you can't hide stuff in the header from files that include it
[20:28:33] <PJBoy> and how in every other language it's more like
[20:28:38] <fiesh> the compiler detects changes?
[20:28:39] <PJBoy> "import foo;"
[20:28:47] <LordKalma> import numpy
[20:29:02] <PJBoy> modules are C++ catching up with that idea
[20:29:09] <Raziel> import taxes
[20:29:17] <fiesh> I don't think compilers detect changes, and won't with modules either
[20:29:22] <PJBoy> yeah yeah
[20:29:26] <PJBoy> the build system
[20:29:32] <PJBoy> I use visual studio
[20:29:38] <fiesh> sorry about that
[20:29:41] <PJBoy> :D
[20:29:57] <PJBoy> separation of powers isn't MSVC's style
[20:30:16] <fiesh> indeed, true for its creator in general
[20:30:18] <PJBoy> (I mean it is nowadays with llvm-cl and cmake support etc)
[20:30:25] <LordKalma> almost if microsoft ever had monopolistic tendencies
[20:31:23] <JeffH> Iâ€™ll have to read up about modules. Seems more like a build system issue than a compiler issue.
[20:31:26] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9174:e8d3:5fdc:450a)
[20:31:28] <PJBoy> anyways however you resolve circular dependencies with header files will be the same with modules
[20:31:39] <LordKalma> with forward declarations basically
[20:31:45] <PJBoy> yeah there you go
[20:32:01] <PJBoy> with modules your implementations can still go into separate source files
[20:32:03] <LordKalma> in slide 76 he explains how they are expecting compiler support to help with modules
[20:32:05] <PJBoy> just the same as today's headers
[20:32:26] <JeffH> What standard introduced modules?
[20:32:28] <PJBoy> but you also have the choice of defining everything inline
[20:32:33] <PJBoy> without having to worry about ODR and all that
[20:32:34] <LordKalma> JeffH, 20
[20:33:17] <PJBoy> compiler support sounds essential, yeah
[20:33:28] <PJBoy> I wonder if maybe we'll get some kind of standardised format
[20:33:35] <LordKalma> when he explains the parsing problems, you understand the problem
[20:34:11] <PJBoy> I would wonder if it can just hook into clang-query
[20:34:41] <PJBoy> probably not
[20:36:30] <PJBoy> the effort gone into supporting fortran modules is already crazy
[20:37:59] *** Quits: proller (~p@2002:50f0:d845:10:41a5:ca2e:e623:f4b4) (Ping timeout: 268 seconds)
[20:38:00] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Ping timeout: 268 seconds)
[20:38:23] *** Joins: proller (~p@2a02:6b8:b081:8818::1:37)
[20:38:46] *** pah_ is now known as pa
[20:38:46] *** Quits: pa (~pah@host-79-41-43-165.retail.telecomitalia.it) (Changing host)
[20:38:46] *** Joins: pa (~pah@user/pah)
[20:39:05] <LordKalma> yeah. They basically had to maintain a ninja fork and ship a parser with cmake
[20:39:15] <LordKalma> let's hope they don't have to ship a c++ parser
[20:39:24] <PJBoy> > proposed portable format
[20:39:27] <PJBoy> oh good
[20:40:00] <PJBoy> ahahaha
[20:40:07] <LordKalma> hahah I can already see the advert "cmake: now with clang++ included!* *only the frontend because fucking compiler vendors didn't help"
[20:40:08] <PJBoy> this guy's sentiment
[20:40:17] <PJBoy> "please please throw us a bone"
[20:40:31] <PJBoy> "otherwise modules will be the worst thing in C++ ever"
[20:40:35] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[20:40:43] <LordKalma> hahaha you can totally simpatize with cmake devs after watching that talk
[20:40:50] <PJBoy> yeah hahaha
[20:41:24] <LordKalma> in the early minutes of the talk he admits the language is shit
[20:41:32] <LordKalma> and that they didn't know how to write a new language
[20:41:45] <LordKalma> but past that, you can totally see how they are tired of dealing with cross platform BS
[20:42:11] <PJBoy> yeah imagine that
[20:42:20] <PJBoy> being in the business of trying to be the bridge between platforms
[20:42:44] <LordKalma> and if you listen to the start of the talk you're reminded of one fact
[20:42:49] <LordKalma> Kitware makes science projects
[20:42:57] <LordKalma> cmake was an internal tool turned de facto standard
[20:43:12] <PJBoy> that's how it works
[20:46:54] *** Joins: great_taste (~great_tas@190.32.235.20)
[20:48:11] <PJBoy> it is pretty sad though
[20:49:58] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:55:28] <cbreak> at least it's not bjam or bazel
[20:59:06] *** Joins: ravan (~ravan@user/ravan)
[21:01:55] <JeffH> With modules the preprocessor becomes obsolete it seems.
[21:02:16] <LordKalma> not at all
[21:02:43] <LordKalma> there's more to live than #include
[21:02:46] <LordKalma> *life
[21:04:02] <PJBoy> yeah there's string literal concatenation
[21:04:04] <PJBoy> macros
[21:04:13] <PJBoy> header files still exist
[21:04:16] <LordKalma> #if 0
[21:04:48] <PJBoy> there's a fair few macros in the standard library that you won't be able to get from modules
[21:05:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:07:04] <LordKalma> I'm going to write a proposal for exportable macros
[21:07:36] <PJBoy> I look forward to expecting its rejection
[21:07:42] <PJBoy> and then seeing it on revision 10
[21:07:52] <LordKalma> SA: 342374352383
[21:08:02] <PJBoy> pondering why we haven't all switched to rust++ yet
[21:08:14] <PJBoy> which'll be rust with exceptions
[21:08:33] <PJBoy> and preferably a dedicated syntax for making variants
[21:08:40] <PJBoy> rather than overloading enum
[21:09:19] <LordKalma> enum of types is such an everything-is-an-object-language thing to do
[21:09:55] <PJBoy> ngl I love that about python
[21:10:15] <LordKalma> def bananas(): pass; print(bananas.__docstring__)
[21:10:34] <PJBoy> random pass?
[21:10:41] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[21:10:41] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Read error: Connection reset by peer)
[21:10:50] <LordKalma> def bananas(): pass; print(bananas.__doc__) # wrong name
[21:10:54] *** Quits: pa (~pah@user/pah) (Ping timeout: 260 seconds)
[21:10:58] <LordKalma> PJBoy, you can make empty function/classes with pass
[21:11:05] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[21:11:16] <PJBoy> oh I see how that was supposed to be interpreted now
[21:11:25] <PJBoy> yeah I mean that's great
[21:11:26] <LordKalma> for _ in range(10): class Bananas: pass
[21:11:29] <PJBoy> inspecting type annotations is sick
[21:11:39] <PJBoy> help being a function
[21:11:51] <LordKalma> i've used the bananas.__doc__ thing on exceptions
[21:12:06] <LordKalma> like f"you dumb fuck, read this: {bananas.__doc__}"
[21:12:21] <PJBoy> obj = [ClassA, ClassB, ClassC][class_index](*args)
[21:12:27] <PJBoy> that's what I was thinking of
[21:12:31] <PJBoy> I love that
[21:12:47] <LordKalma> yeah, these are great features
[21:13:03] <LordKalma> I mean, I've been using Django this weekend, and the whole API is type introspection galore
[21:13:13] <LordKalma> you write some crap and magic happens
[21:13:37] <LordKalma> for example, it can make human readable names from the variable names
[21:13:37] <PJBoy> I've had success from bottle the same way
[21:13:42] <PJBoy> ok wow
[21:13:42] *** Joins: pah (~pah@user/pah)
[21:14:05] *** Quits: JeffH (~JeffH@153.sub-174-245-195.myvzw.com) (Remote host closed the connection)
[21:14:05] <LordKalma> some_element gets automatically translated as "some element" and "some elements"
[21:14:12] <LordKalma> (yes, it even does basic +"s" plural)
[21:15:23] <LordKalma> https://docs.djangoproject.com/en/3.2/ref/models/options/#verbose-name
[21:15:30] <LordKalma> "If this isnâ€™t given, Django will use a munged version of the class name: CamelCase becomes camel case."
[21:16:13] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 268 seconds)
[21:17:33] <LordKalma> it does really an insane amount of introspection to pull off what it does
[21:17:37] *** Joins: markong (~kvirc@213.146.188.203)
[21:18:32] *** Joins: JeffH (~JeffH@153.sub-174-245-195.myvzw.com)
[21:23:36] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[21:23:47] *** Quits: pah (~pah@user/pah) (Ping timeout: 264 seconds)
[21:24:01] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:25:12] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[21:25:28] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[21:25:30] *** Joins: Terminus (~null@user/terminus)
[21:27:02] *** Quits: Terminus (~null@user/terminus) (Client Quit)
[21:28:57] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[21:29:00] *** Joins: pah (~pah@user/pah)
[21:32:45] <Alipha> https://wandbox.org/permlink/C2D3Q9QhK6jAW9QG ?
[21:33:08] *** Joins: Terminus (~null@user/terminus)
[21:36:53] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:5c72:3651:6c72:83ef)
[21:37:11] *** pah is now known as pa
[21:37:28] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:36] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:36] *** ChanServ sets mode: +v npaperbot
[21:37:49] *** Quits: JeffH (~JeffH@153.sub-174-245-195.myvzw.com) (Remote host closed the connection)
[21:42:24] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[21:43:30] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[21:44:16] *** Quits: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32) (Ping timeout: 245 seconds)
[21:44:30] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[21:47:18] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[21:48:39] *** Joins: KombuchaKip (~kip@192.252.230.5)
[21:54:27] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[21:56:08] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:57:58] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9174:e8d3:5fdc:450a) (Ping timeout: 260 seconds)
[21:58:35] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[22:05:15] *** Joins: darkstardevx (~darkstard@50.39.114.152)
[22:08:32] *** Joins: Tobbi (~Tobbi@ip1f101474.dynamic.kabel-deutschland.de)
[22:10:38] *** Joins: magla (~gelignite@55d4b8af.access.ecotel.net)
[22:10:46] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Quit: Leaving)
[22:11:55] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[22:30:48] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[22:35:09] *** Quits: Tobbi (~Tobbi@ip1f101474.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[22:35:54] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[22:36:43] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Client Quit)
[22:49:46] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Read error: Connection reset by peer)
[22:53:21] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[22:58:59] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9569:e457:2f2b:5234)
[22:59:34] *** Quits: supernova (~quassel@2405:9800:ba11:6207:8f43:bde3:a0a9:65e2) (Ping timeout: 260 seconds)
[23:17:24] *** Quits: riksu-raksu (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksu-raksu)
[23:19:24] <cq-work> Herm... if I have a parameter passed by mutable reference.. and I want to pass back a lambda object that captures that reference... would I capture the argument by reference?
[23:21:52] *** Joins: pah (~pah@user/pah)
[23:22:01] *** Quits: pa (~pah@user/pah) (Ping timeout: 268 seconds)
[23:24:56] <LordKalma> the function takes a reference and returns a lambda that uses said reference?
[23:24:57] <LordKalma> is that it?
[23:25:24] <Alipha> cq-work: you could. Or capture by value. It depends upon what you want to do with it. If you capture by reference, just make sure the object continues to be valid, which may not be obvious
[23:25:37] <LordKalma> with pointers it would be trivial
[23:25:46] <LordKalma> it's copying the poiinter
[23:26:02] <LordKalma> with references, capturing a reference by copy copies the object itself, right?
[23:26:17] <LordKalma> but capturing a reference by reference, given that here the reference is a local variable...
[23:26:21] <LordKalma> hum...
[23:27:03] <LiaoTao> http://www.eelis.net/c++draft/expr.prim.lambda.capture#example-10
[23:27:20] <LordKalma> okauy
[23:27:24] <LordKalma> that clears it up
[23:27:54] <cq-work> Cool, alright.
[23:28:36] <LiaoTao> I think this was not completely spelled out before C++17, but always worked
[23:29:06] <LordKalma> when was that paragraph added?
[23:29:08] <LiaoTao> For some given value of always
[23:29:19] <LordKalma> is it possible to know that?
[23:29:28] <LiaoTao> I don't have the old standards lying around here to check
[23:29:45] <LordKalma> it would be cool if that text has the changelog, a shame
[23:29:49] <LordKalma> had*
[23:29:52] <LordKalma> git blame style
[23:30:27] <LiaoTao> On my previous job we hit this uncertainty and decided to just capture a pointer with value &r
[23:30:45] <LiaoTao> Which was probably unnecessary but didn't entail too much overhead
[23:30:46] <LordKalma> I would probably do the same hahah
[23:30:59] <LordKalma> the compiler could probably maybe even trim that out, no?
[23:31:20] <LordKalma> that said, I don't get what note 8 adds to paragraph 13
[23:31:37] <LiaoTao> I don't believe there would be any difference in generated code
[23:31:39] <LordKalma> it seems just to be saying the same thing, but in layman's terms
[23:32:25] <LiaoTao> Maybe it has to do with lifetime extension
[23:32:30] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[23:32:35] *** Joins: pah_ (~pah@host-79-12-185-170.retail.telecomitalia.it)
[23:32:50] <cq-work> Lifetime extensions in c++ confuse the ever living bejeesus out of me.
[23:33:02] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[23:33:08] <LordKalma> there is no lifetime extension of objects here
[23:33:21] <LiaoTao> LordKalma, Anyway I think it's good that they added that clarification. It's easier to read and leaves no doubts.
[23:33:21] <LordKalma> there's only the guarantee that you can use a reference like you would a pointer
[23:33:25] <LordKalma> yes
[23:33:32] <LordKalma> the example 10 is the killer, I'd say
[23:33:35] <LordKalma> that comment is very clear
[23:35:17] *** Joins: great_taste (~great_tas@190.32.235.20)
[23:35:36] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:37:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:37:32] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:38:59] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:39:31] *** Joins: pulse (~pulse@user/pulse)
[23:43:24] *** Joins: jokoon (~eio@2a01:e0a:542:e160:e9a2:e8db:f0e1:66fa)
[23:43:26] <jokoon> what is the ucrtbased.dll error coming from? I repaired VS2019...
[23:43:45] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[23:46:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:48:53] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[23:49:16] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[23:57:16] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
