[00:00:09] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[00:00:15] *** Quits: econo (uid147250@user/econo) (Ping timeout: 256 seconds)
[00:01:16] *** Joins: econo (uid147250@user/econo)
[00:03:20] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[00:05:34] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[00:05:51] *** Joins: prolic (~prolic@181.122.131.227)
[00:07:32] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[00:07:50] *** Joins: prolic (~prolic@181.122.131.227)
[00:09:23] *** Joins: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[00:10:36] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:a0be:91d2:ac63:61de) (Ping timeout: 240 seconds)
[00:11:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[00:11:41] *** Joins: hueso (~root@user/hueso)
[00:13:47] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[00:17:09] *** Joins: jgeerds (~jgeerds@55d4b9df.access.ecotel.net)
[00:19:11] *** Joins: pavonia (~user@user/siracusa)
[00:20:31] <shiraeeshi> btw
[00:21:15] <shiraeeshi> every time I run "stack new some-project" stack downloads something
[00:21:38] *** Joins: alx741 (~alx741@181.199.42.143)
[00:21:47] <shiraeeshi> is there a way to cache that thing that it downloads?
[00:22:33] <shiraeeshi> so that I can create projects even with no internet connection
[00:23:00] *** Joins: acidjnk (~acidjnk@200116b86772730041d55f290efc04ff.dip.versatel-1u1.de)
[00:23:55] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[00:24:52] <janus> shiraeeshi: looks like no: https://github.com/commercialhaskell/stack/issues/1594
[00:25:35] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[00:27:08] <shiraeeshi> that's weird
[00:27:34] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[00:28:25] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[00:29:43] *** Quits: acidjnk (~acidjnk@200116b86772730041d55f290efc04ff.dip.versatel-1u1.de) (Ping timeout: 256 seconds)
[00:29:50] <shiraeeshi> I guess I can create a project using "stack new", then stash it somewhere, that way I can copy a folder and replace the project name using sed or something
[00:31:54] <shiraeeshi> or I can create a folder and then run "stack init", right?
[00:34:27] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[00:34:46] *** Joins: prolic (~prolic@181.122.131.227)
[00:36:28] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[00:36:46] *** Joins: prolic (~prolic@181.122.131.227)
[00:39:51] *** Quits: dolio (~dolio@130.44.130.54) (Ping timeout: 256 seconds)
[00:40:57] *** Joins: alx741 (~alx741@157.100.197.240)
[00:41:42] *** Joins: dolio (~dolio@130.44.130.54)
[00:42:06] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6) (Ping timeout: 250 seconds)
[00:42:13] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:42:38] *** Quits: hueso (~root@user/hueso) (Quit: hueso)
[00:43:03] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[00:44:23] *** Quits: jtomas (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[00:44:35] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[00:46:10] <maerwald> wouldn't be surprised if stack also uploads usage statistics
[00:46:15] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Quit: Konversation terminated!)
[00:47:24] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[00:48:34] *** Quits: dcoutts_ (~duncan@host86-144-78-249.range86-144.btcentralplus.com) (Remote host closed the connection)
[00:48:56] *** Joins: dcoutts_ (~duncan@host86-144-78-249.range86-144.btcentralplus.com)
[00:52:00] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 272 seconds)
[00:52:28] *** Quits: rtsn (~nstr@user/rtsn) (Remote host closed the connection)
[00:52:29] <shiraeeshi> lol
[00:52:55] <shiraeeshi> also shows a dialog window informing about cookie usage
[00:54:35] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[00:54:39] <maerwald> yeah, european law basically broke the internet with those annoying cookie popups
[00:54:54] *** Joins: prolic (~prolic@181.122.131.227)
[00:55:59] *** Joins: chomwitt (~chomwitt@2a02:587:dc15:800:fd31:6830:eca:6aa3)
[00:56:10] *** Joins: hueso (~root@user/hueso)
[00:58:58] *** Quits: dolio (~dolio@130.44.130.54) (Ping timeout: 272 seconds)
[01:01:05] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[01:01:24] *** Joins: prolic (~prolic@181.122.131.227)
[01:01:27] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[01:02:21] *** Joins: alx741 (~alx741@181.199.42.143)
[01:02:35] *** Quits: alp (~alp@user/alp) (Ping timeout: 256 seconds)
[01:05:11] *** Joins: dolio (~dolio@130.44.130.54)
[01:05:49] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[01:09:16] *** Joins: tremon (~tremon@83-84-18-241.cable.dynamic.v4.ziggo.nl)
[01:09:28] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:11:51] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[01:12:10] *** Joins: prolic (~prolic@181.122.131.227)
[01:12:57] *** Quits: dolio (~dolio@130.44.130.54) (Quit: ZNC 1.8.2 - https://znc.in)
[01:18:23] <hpc> let's be honest, it was already broken
[01:19:05] *** Joins: jtomas (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[01:20:49] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[01:21:07] *** Joins: prolic (~prolic@181.122.131.227)
[01:22:05] *** Quits: hueso (~root@user/hueso) (Ping timeout: 256 seconds)
[01:22:37] *** Joins: alx741 (~alx741@157.100.197.240)
[01:24:53] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[01:30:11] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[01:33:59] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[01:35:17] *** Quits: chomwitt (~chomwitt@2a02:587:dc15:800:fd31:6830:eca:6aa3) (Ping timeout: 240 seconds)
[01:36:22] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:37:13] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:39:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[01:40:43] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Quit: rcirc on GNU Emacs 27.2)
[01:49:24] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[01:49:50] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:252f:1c34:e1bf:7de2) (Ping timeout: 260 seconds)
[01:49:55] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:50:37] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:60ac:5115:d501:c1e2) (Ping timeout: 240 seconds)
[01:51:25] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:52:24] *** Joins: Erutuon (~Erutuon@user/erutuon)
[01:52:32] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[01:52:45] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[01:53:15] *** Joins: acidjnk (~acidjnk@200116b86772730041d55f290efc04ff.dip.versatel-1u1.de)
[01:53:19] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[01:53:25] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[01:54:14] *** Joins: alx741 (~alx741@157.100.197.240)
[01:56:48] *** Quits: ccntrq (~Thunderbi@2a01:e34:eccb:b060:9be7:a233:2613:fd84) (Remote host closed the connection)
[01:58:12] *** Quits: cyphase_eviltwin (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[01:58:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[01:58:37] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:01:14] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[02:01:30] *** Quits: acidjnk (~acidjnk@200116b86772730041d55f290efc04ff.dip.versatel-1u1.de) (Ping timeout: 260 seconds)
[02:02:18] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 272 seconds)
[02:03:21] *** Joins: zebrag (~chris@user/zebrag)
[02:04:23] *** Joins: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[02:05:22] *** Joins: cyphase_eviltwin (~cyphase@user/cyphase)
[02:08:10] *** Quits: jao (~jao@static-68-235-44-54.cust.tzulo.com) (Remote host closed the connection)
[02:08:29] *** Joins: chomwitt (~chomwitt@2a02:587:dc15:800:53f7:4b4c:ef86:ecad)
[02:09:12] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[02:12:56] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[02:13:02] *** Quits: michalz (~michalz@185.246.204.61) (Remote host closed the connection)
[02:13:52] *** Joins: irishman (~vshev4enk@178.151.117.243)
[02:16:46] *** Joins: alx741 (~alx741@157.100.197.240)
[02:19:36] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:20:09] *** Quits: irishman (~vshev4enk@178.151.117.243) (Ping timeout: 256 seconds)
[02:22:34] *** Quits: deadmarshal (~deadmarsh@95.38.231.188) (Ping timeout: 272 seconds)
[02:23:35] *** Joins: prolic (~prolic@181.122.131.227)
[02:25:15] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[02:25:34] *** Joins: prolic (~prolic@181.122.131.227)
[02:25:44] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[02:27:27] *** Joins: acidjnk (~acidjnk@p200300d0c71a5a00cca7d468eb16bc46.dip0.t-ipconnect.de)
[02:29:08] *** Joins: acidjnk_new (~acidjnk@p200300d0c71a5a00a926c52c5a33de35.dip0.t-ipconnect.de)
[02:33:01] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:33:14] *** Quits: acidjnk (~acidjnk@p200300d0c71a5a00cca7d468eb16bc46.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[02:33:49] *** Joins: alp (~alp@user/alp)
[02:34:06] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 252 seconds)
[02:34:50] *** Joins: cheater (~Username@user/cheater)
[02:36:16] *** Joins: jao (~jao@static-68-235-44-54.cust.tzulo.com)
[02:36:24] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Quit: Konversation terminated!)
[02:36:58] *** Quits: acidjnk_new (~acidjnk@p200300d0c71a5a00a926c52c5a33de35.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[02:37:12] *** Joins: wonko (~wjc@user/wonko)
[02:37:17] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[02:37:30] *** Joins: alx741 (~alx741@157.100.197.240)
[02:37:50] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[02:40:49] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[02:41:13] *** Joins: prolic (~prolic@181.122.131.227)
[02:41:42] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:43:14] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[02:45:18] *** Quits: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk) (Remote host closed the connection)
[02:45:27] *** Quits: jao (~jao@static-68-235-44-54.cust.tzulo.com) (Remote host closed the connection)
[02:46:03] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[02:47:09] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-b0ed-1a92-719b-f6c2.res6.spectrum.com)
[02:47:14] *** Joins: hueso (~root@user/hueso)
[02:47:59] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 256 seconds)
[02:48:24] *** Quits: wonko- (~wjc@user/wonko) (Ping timeout: 252 seconds)
[02:49:07] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 256 seconds)
[02:50:17] *** Quits: wonko_ (~wjc@2a0e:1c80:11::50) (Ping timeout: 240 seconds)
[02:51:32] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[02:52:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:41b:9f3:a75a:9b8b)
[02:54:52] <prolic> I still have this problem with stack, stack build works just fine, but stack test fails during the build process, the linker cannot find the c-lib apperently (this one that just worked fine using stack build). I have an open issue here https://github.com/prolic/secp256k1-schnorr/issues/1#issuecomment-1044972716 giving a bit more details about how the config files look like, etc. I hope someone can help me out.
[02:55:32] *** Joins: jao (~jao@static-68-235-44-54.cust.tzulo.com)
[02:55:32] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b)
[02:59:09] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[02:59:28] *** Joins: prolic (~prolic@181.122.131.227)
[02:59:56] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[03:00:00] *** Joins: alx741 (~alx741@157.100.197.240)
[03:01:22] *** Joins: kraftwerk28 (~kraftwerk@178.62.210.83)
[03:03:17] *** Quits: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[03:03:21] *** Joins: jackalope (~jackalope@user/jackal0pe)
[03:03:35] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:04:33] *** Quits: jackalope (~jackalope@user/jackal0pe) (Client Quit)
[03:04:48] *** Joins: jackalope (~jackalope@user/jackal0pe)
[03:05:24] *** Quits: jackalope (~jackalope@user/jackal0pe) (Client Quit)
[03:05:38] *** Joins: jackalope (~jackalope@user/jackal0pe)
[03:06:17] *** Quits: chomwitt (~chomwitt@2a02:587:dc15:800:53f7:4b4c:ef86:ecad) (Ping timeout: 240 seconds)
[03:07:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[03:08:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:08:37] *** Quits: prolic (~prolic@181.122.131.227) (Ping timeout: 256 seconds)
[03:09:15] *** Quits: jackalope (~jackalope@user/jackal0pe) (Client Quit)
[03:12:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[03:13:22] <shiraeeshi> prolic: at risk of stating the obvious may I remind you that "executable" and "test" may have different dependencies in configs
[03:17:39] *** Joins: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk)
[03:18:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[03:18:54] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:19:06] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Client Quit)
[03:19:23] *** Quits: jgeerds (~jgeerds@55d4b9df.access.ecotel.net) (Ping timeout: 256 seconds)
[03:20:15] *** Joins: alx741 (~alx741@181.199.42.143)
[03:22:42] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 260 seconds)
[03:22:47] *** Joins: dolio (~dolio@130.44.130.54)
[03:23:49] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[03:28:41] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:29:42] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 272 seconds)
[03:32:25] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[03:34:50] <shapr> Anyone want to create intro music for the cofree coffee podcast? Preferably in Haskell?
[03:40:31] *** Joins: alx741 (~alx741@157.100.197.240)
[03:43:52] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:46:38] *** Joins: Topsi (~Tobias@dyndsl-095-033-091-109.ewe-ip-backbone.de)
[03:49:18] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:50:56] *** Joins: jackalope (~jackalope@50-24-138-131.bcstcmta02.res.dyn.suddenlink.net)
[03:51:32] *** Quits: jackalope (~jackalope@50-24-138-131.bcstcmta02.res.dyn.suddenlink.net) (Client Quit)
[03:51:48] *** Joins: jackalope (~jackalope@50-24-138-131.bcstcmta02.res.dyn.suddenlink.net)
[03:51:59] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[03:54:13] *** Quits: briandaed (~root@109.95.142.92.r.toneticgroup.pl) (Ping timeout: 256 seconds)
[03:55:02] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 272 seconds)
[03:55:11] *** Joins: prolic (~prolic@181.122.131.227)
[03:56:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[03:58:13] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:58:13] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:58:13] *** Joins: wroathe (~wroathe@user/wroathe)
[04:00:46] *** Joins: alx741 (~alx741@157.100.197.240)
[04:02:36] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[04:04:02] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:04:08] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b) (Remote host closed the connection)
[04:05:29] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:06:47] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:08:28] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[04:08:47] *** Joins: prolic (~prolic@181.122.131.227)
[04:10:27] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[04:10:32] *** Joins: nabaiste^ (~nabaiste@50.233.120.162)
[04:10:45] *** Joins: prolic (~prolic@181.122.131.227)
[04:13:44] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b) (Remote host closed the connection)
[04:14:01] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:15:04] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[04:15:29] *** Quits: shiraeeshi (~shiraeesh@109.166.56.8) (Remote host closed the connection)
[04:15:29] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[04:17:10] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[04:17:27] *** Joins: prolic (~prolic@181.122.131.227)
[04:21:26] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[04:21:42] *** Joins: alx741 (~alx741@157.100.197.240)
[04:21:45] *** Joins: prolic (~prolic@181.122.131.227)
[04:23:26] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[04:23:43] *** Joins: prolic (~prolic@181.122.131.227)
[04:25:39] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[04:25:58] *** Joins: prolic (~prolic@181.122.131.227)
[04:28:13] *** Quits: jtomas (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[04:28:19] *** Quits: theproffesor (~theproffe@user/theproffesor) (Read error: Connection reset by peer)
[04:29:19] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[04:29:33] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[04:29:51] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[04:29:51] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:34:06] *** Quits: alp (~alp@user/alp) (Ping timeout: 260 seconds)
[04:36:26] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[04:36:43] *** Quits: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:36:44] *** Joins: prolic (~prolic@181.122.131.227)
[04:37:33] <prolic> resolved it, FYI
[04:39:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:40:37] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:42:56] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[04:44:25] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[04:44:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:44:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:44:48] *** Joins: wroathe (~wroathe@user/wroathe)
[04:46:43] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:46:44] *** Joins: alx741 (~alx741@157.100.197.240)
[04:49:31] <sm> how, prolic ?
[04:50:33] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:50:37] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 256 seconds)
[04:51:57] *** Joins: shiraeeshi (~shiraeesh@109.166.56.8)
[04:52:22] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[04:56:16] *** Joins: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net)
[04:56:53] <fresheyeball> It is a member of the hidden package ‘ghc-lib-parser-9.2.1.20211101’.
[04:56:55] <fresheyeball>     Perhaps you need to add ‘ghc-lib-parser’ to the build-depends in your .cabal file.
[04:56:58] <fresheyeball> but it IS there
[04:57:01] <fresheyeball> it's in the .cabal file
[04:57:07] <fresheyeball> This happens every so often
[04:57:26] <fresheyeball> I forget how to resolve
[04:57:32] <fresheyeball> I did an rm -rf dist*
[04:57:34] <fresheyeball> cabal clean
[04:57:36] <fresheyeball> all that stuff
[04:57:38] <fresheyeball> no dice
[05:01:36] <sm> fresheyeball: is it in the build-depends for each component in the cabal file that needs it ?
[05:06:17] <Artem[m]> fresheyeball: may be helpful to post (a link to) the whole .cabal file here
[05:06:45] *** Joins: alx741 (~alx741@157.100.197.240)
[05:08:31] *** Joins: mshiraeeshi (~shiraeesh@109.166.56.8)
[05:08:35] *** Quits: shiraeeshi (~shiraeesh@109.166.56.8) (Read error: No route to host)
[05:08:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:15:13] <DigitalKiwi> hi fresheyeball
[05:15:30] <fresheyeball> DigitalKiwi: howdy!
[05:15:35] <fresheyeball> sm: http://ix.io/3Q08
[05:15:38] <fresheyeball> Artem[m]: ^
[05:16:58] <sm> no library component.. is that legal ?
[05:17:27] <sm> I guess it is
[05:18:12] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:18:14] <sm> fresheyeball: and if you like, paste the full cabal build log
[05:18:23] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[05:18:49] *** Joins: cynomys (~cynomys@user/cynomys)
[05:19:57] <fresheyeball> sm: what do you mean?
[05:20:45] <fresheyeball> http://ix.io/3Q0a
[05:20:54] <fresheyeball> that maybe?
[05:21:28] <fresheyeball> now I got 2 errors
[05:24:20] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 272 seconds)
[05:24:49] *** Joins: cynomys (~cynomys@user/cynomys)
[05:26:16] <octeep[m]> Is there a way to catch exception thrown by Text.Printf (I have to use something similar to UNIX printf). I've tried handle and try from Control.Exception, but none of it seems to catch the exception at all.
[05:26:56] <FernandoChu[m]> is there a way to hide the implementation of type classes for `[]` so I can make my own?
[05:27:36] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:c52d:7d43:3699:c92e) (Quit: Konversation terminated!)
[05:27:46] <fresheyeball> FernandoChu[m]: -NoImplicitPrelude
[05:27:56] <fresheyeball> then import what you need only
[05:32:34] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[05:32:39] *** Quits: jao (~jao@static-68-235-44-54.cust.tzulo.com) (Remote host closed the connection)
[05:33:33] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[05:33:51] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[05:34:04] <Artem[m]> Fernando Chu: I hope you're asking for purely educational purposes. In practice, you'd wrap [] into a newtype and define your instances for it.
[05:34:39] <Artem[m]> fresheyeball: looks legit; trying it locally. No bounds on packages are a bit suspicious though
[05:36:01] <FernandoChu[m]> <fresheyeball> "then import what you need only" <- thanks, but now it's complaining that it exits in GHC.Base, I also did `import GHC.Base ()` but I get the same error
[05:36:12] <FernandoChu[m]> Artem[m]: haha yeah, don't worry
[05:36:20] *** Joins: alx741 (~alx741@181.199.42.143)
[05:36:25] <jackdk> Even if you import no names from a module, you still get instances
[05:36:36] <fresheyeball> FernandoChu[m]:oh right I forgot you still get the instances
[05:37:27] <fresheyeball> FernandoChu[m]: maybe just write your own classes?
[05:37:44] <fresheyeball> instance Functor' f where fmap' :: ...
[05:38:08] <FernandoChu[m]> according to this I can't hide the instances damn https://stackoverflow.com/questions/54835367/hiding-typeclass-instance-declarations-while-importing-in-haskellk
[05:38:17] <Artem[m]> guys, why getting out of your way instead of simply newtype...
[05:38:27] <sm> fresheyeball: two problem signs are: 1. "Build profile: -w ghc-8.10.7" vs "ghc-lib-9.2.1.20211101" (ghc version mismatch ?) and 2. "The package list for 'hackage.haskell.org' is 97 days old."
[05:38:39] <FernandoChu[m]> the problem with making my own is then I'd have to remake all that depends on Functor too
[05:38:56] <fresheyeball> FernandoChu[m]: backpack?
[05:39:09] <fresheyeball> sm: interesting 
[05:39:12] <FernandoChu[m]> Artem[m]: yeah I'll do that, just was wondering if there was another way
[05:39:13] <Artem[m]> sm: in theory, it's the whole deal of `ghc-lib` that you're no longer bound to the host GHC
[05:39:23] <sm> ha
[05:39:28] <fresheyeball> ok
[05:41:40] <fresheyeball> looks like a GHC version mismatch
[05:43:32] <FernandoChu[m]> also, what does a `!` before a type means?
[05:50:24] <sm> Fernando Chu: evaluate it (somewhat) strictly
[05:51:25] <FernandoChu[m]> sm: thanks, could I get some kind of name for that to search references? I haven't been able to find it
[05:51:41] <sm> "bang notation" maybe
[05:51:59] <sm> "strictness annotations"
[05:52:18] <sm> https://downloads.haskell.org/ghc/latest/docs/html/users_guide/search.html?q=strictness&check_keywords=yes&area=default
[05:53:48] <FernandoChu[m]> thank you
[05:54:28] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[05:56:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:57:13] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[05:57:16] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:59:42] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[06:03:12] <Artem[m]> fresheyeball: just finished building with your cabal file and a Main that has just two imports indicated in the error message you posted: it has built successfully with GHC 8.10.7 and ghc-lib-(parser-)9.2.1.20220109. The problem is on your end!.. I know, this is not helpful. But at least the cabal file you posted seems fine. 
[06:04:32] *** Quits: justGhost (~justache@user/justache) (Read error: Connection reset by peer)
[06:05:00] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 240 seconds)
[06:05:12] <sm> oh.. what about a cabal update then ?
[06:05:22] *** Quits: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net) (Quit: WeeChat 3.3)
[06:05:30] *** Joins: justGhost (~justache@user/justache)
[06:05:48] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[06:05:50] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[06:06:24] <sm> fresh out of eyeballs. we'll never know.
[06:07:07] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[06:09:19] <Artem[m]> yes, a reasonably recent cabal may help
[06:10:37] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[06:11:36] *** Joins: alx741 (~alx741@157.100.197.240)
[06:11:51] *** Joins: cynomys (~cynomys@user/cynomys)
[06:11:53] *** Quits: Topsi (~Tobias@dyndsl-095-033-091-109.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[06:12:30] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[06:16:16] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:20:14] <sm> that too, but I meant just `cabal update`
[06:20:57] *** Quits: xff0x (~xff0x@2001:1a81:5290:8400:55c0:f8c1:431:6807) (Ping timeout: 240 seconds)
[06:23:05] *** Joins: xff0x (~xff0x@2001:1a81:52c9:2700:23a4:7c27:1274:b7bc)
[06:25:14] <chronon> How should I verbalise the syntax <- when reading Haskell code out loud, or to myself even?
[06:25:56] <ski> in list comprehensions, `do'-notation, or pattern guards ?
[06:28:21] <chronon> I'm just reading a tutorial for the first time so I'm not sure. I've seen <- appearing inside [] and after "do".
[06:28:48] <ski> "inside []" would be list comprehensions
[06:30:00] <chronon> What does <- mean, and how would you read this to yourself?
[06:30:22] <ski> > [(x,y) | x <- [0 .. 3],y <- [0 .. x]]  -- the list of all pairs `(x,y)', where `x' is drawn from the list `[0 .. 3]' (`x' lies inbetween `0' and `3'), and `y' is drawn from the list `[0 .. x]' (`y' lies inbetween `0' and `x')
[06:30:24] <lambdabot>  [(0,0),(1,0),(1,1),(2,0),(2,1),(2,2),(3,0),(3,1),(3,2),(3,3)]
[06:31:13] <chronon> Ah, so "drawn from" is how to read <-
[06:31:47] <ski> `x <- [0 .. 3]' is called a "generator". it generates possible values for `x', by drawing them from the list
[06:31:50] <chronon> Same after "do", right?
[06:31:56] <ski> more or less
[06:32:06] <chronon> Ok, thanks.
[06:32:08] <ski> although that's more general (doesn't have to be about lists)
[06:32:46] *** Joins: alx741 (~alx741@157.100.197.240)
[06:32:57] <ski> > do x <- [0 .. 3],y <- [0 .. x]; return (x,y)  -- select `x' nondeterministically from `[0 .. 3]', and `y' from `[0 .. x]', yielding `(x,y)' as a result
[06:32:58] <lambdabot>  <hint>:1:17: error: parse error on input ‘,’
[06:33:00] <chronon> It might seem like an odd question but reading example code without being able to verbalise what I'm reading proved to be a bit disorientating.
[06:33:04] <ski> > do x <- [0 .. 3]; y <- [0 .. x]; return (x,y)  -- select `x' nondeterministically from `[0 .. 3]', and `y' from `[0 .. x]', yielding `(x,y)' as a result
[06:33:06] <lambdabot>  [(0,0),(1,0),(1,1),(2,0),(2,1),(2,2),(3,0),(3,1),(3,2),(3,3)]
[06:33:56] <ski> more generally, in `do', you could read `x <- act' as "bind `x' to the result of executing the action `act'"
[06:34:25] <ski> (in case of lists, "executing an action" amounts to selecting an element from a list in all possible ways)
[06:35:09] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[06:35:16] *** Quits: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 272 seconds)
[06:35:29] <chronon> So that's similar in concept to an assignment in other languages, I guess.
[06:35:32] <ski> no
[06:35:48] <ski> assignment means *changing* the value which is stored in a location
[06:36:00] <chronon> Binding names to values is assignment, isn't it?
[06:36:03] <ski> this is not about changing, this is about binding a new variable to a value
[06:36:08] <ski> no, it's not
[06:36:16] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:36:44] <ski> in C, `int x = 5;' binds the identifier `x' to a fresh location, and initializes that location to the value `5'
[06:36:55] <ski> the binding of `x' to that location is immutable, can't be changed
[06:37:02] <chronon> Ok, I see the distinction you're making. I'll use the word "bind" not "assign".
[06:38:01] <ski> > do x <- [0 .. 3]; x <- [0 .. x]; return x  -- this is not assignment, it is shadowing
[06:38:03] <lambdabot>  [0,0,1,0,1,2,0,1,2,3]
[06:38:58] <ski> (`<-'-bindings are non-recursive (unless you use the `rec' keyword (extension)))
[06:39:30] <chronon> Oh, that's over my head. I'll have to read this tutorial first.
[06:39:37] <chronon> Thanks for now....
[06:40:09] <ski> > do x <- [0 .. 3]; y <- [0 .. x]; return y  -- this is the same thing as just before, only renaming the "inner" `x' to `y'
[06:40:11] <lambdabot>  [0,0,1,0,1,2,0,1,2,3]
[06:41:04] <ski> chronon : btw, it should be clear that any list comprehension could also alternatively be written using `do', using a very simple rewriting
[06:42:16] <ski> (in fact, there's even an extension for being able to use list comprehension syntax for arbitrary monads (which you'd often otherwise express using `do'), not just for lists)
[06:43:10] <ski> anyway, have fun with your Haskell learning :)
[06:43:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:43:51] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[06:44:09] <chronon> I'm sure I will. Learning new languages is one of my favourite things to do. :-)
[06:48:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[06:49:34] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[06:49:53] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:50:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:52:48] *** Joins: alx741 (~alx741@181.199.42.143)
[06:55:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:56:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:56:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:56:07] *** Joins: wroathe (~wroathe@user/wroathe)
[06:57:26] *** Quits: td_ (~td@94.134.91.32) (Ping timeout: 272 seconds)
[06:58:37] *** Joins: td_ (~td@94.134.91.184)
[06:58:38] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[06:59:17] *** Joins: alx741 (~alx741@157.100.197.240)
[06:59:19] *** Joins: cynomys (~cynomys@user/cynomys)
[07:00:19] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:02:00] <chronon> In ghci, how do I ask it to show me the current err... "equations" for a given function name?
[07:03:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[07:03:52] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:06:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:08:01] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[07:08:08] <chronon> I found :show bindings in the :help, but this shows all of the functions I defined, not just those of a given name, and if I append the name to :show bindings I get a syntax error.
[07:12:18] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[07:14:09] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[07:16:16] *** Joins: irishman (~vshev4enk@178.151.117.243)
[07:18:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:20:14] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 272 seconds)
[07:20:29] *** Quits: irishman (~vshev4enk@178.151.117.243) (Ping timeout: 256 seconds)
[07:20:37] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[07:21:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:21:42] *** Joins: alx741 (~alx741@157.100.197.240)
[07:26:23] <chronon> Also, the output of :show bindings seems to be the type signature only, rather than the definition.
[07:26:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[07:27:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:29:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:30:01] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[07:30:52] *** Joins: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[07:31:15] <chronon> What am I doing wrong here:
[07:31:15] <chronon> prod [] = 1
[07:31:15] <chronon> prod (x:xs) = x * prod xs
[07:31:15] <chronon> prod [1..5]
[07:31:15] <chronon> *** Exception: <interactive>:2:1-25: Non-exhaustive patterns in function prod
[07:31:15] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:31:23] *** Joins: haasn (~nand@haasn.dev)
[07:31:58] <dsal> chronon: Are you just pasting those lines into ghci?
[07:32:09] <chronon> I typed them in.
[07:32:20] <dsal> Well, same thing.  You defined prod, and then you redefined prod.
[07:32:31] <dsal> ghci is a slightly confusing environment.  Better off writing things in a file.
[07:33:05] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:33:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:33:05] *** Joins: wroathe (~wroathe@user/wroathe)
[07:33:12] *** Quits: alphabeta (~kilolympu@31.205.200.235) (Quit: Quitting IRC :()
[07:33:20] <chronon> I thought that the params were pat of the definition and you could define different equations under the same name.
[07:33:34] <chronon> s/pat/part/
[07:33:58] <dsal> Yes, but ghci is a different thing.
[07:34:11] <dsal> If you were doing that in a file, it'd be a lot less confusing.
[07:34:22] <chronon> Is ghci really no good for this kind of experimentation?
[07:34:24] <dsal> ghci is good for some kinds of exploration, but it's not a good plcae to write code.
[07:34:37] <dsal> People don't write code in ghci.  :)
[07:34:43] <chronon> Oh.
[07:35:31] *** Quits: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[07:36:24] <chronon> Ok, so what is the most convenient way to experiment while I learn? Do I just put the lines of code in a file and then run ghc filename or something?
[07:37:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:40:09] <ski> use `:r' to reload files into the interactor, after saving in editor
[07:41:08] <ski> (short for `:reload'. you can also use `:l' (`:load') if you didn't pass the filename when starting the interactor)
[07:42:17] <ski> anyway, if you define things in a file, then you can define things out of order (use things, then define them later in the file). also recursion (including mutual recursion)
[07:43:19] <ski> in the interactor, each new binding (potentially) shadows the old. if you want to enter multiple declarations (including defining equations) at the same time, you can start with `:{' and end with `:}' (that would make your `prod' example work)
[07:43:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:43:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:43:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:43:52] <ski> (alternatively, you could enter multiple declarations, all in one go, separating them by `;' instead of by newlines)
[07:43:52] <chronon> Ah, ok, I'll try that. Thanks.
[07:43:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:44:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:44:17] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:3581:2989:c5ee:9353) (Quit: Leaving)
[07:44:17] <chronon> That also sounds convenient.
[07:44:19] <ski> but, for anything more complicated than simple stuff, it's more convenient to simply type it up into your editor of choice
[07:44:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:44:29] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:44:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:44:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:45:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:45:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:45:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:45:30] <ski> there's also an `:e' (`:edit') command, which you could set up to start Vi or Emacs (or Emacsclient) or something. when that editor command terminates, the interactor will (iirc) automatically reload any loaded files that you've changed
[07:45:34] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:24a8:40ee:fe3d:56e6)
[07:45:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:45:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:45:50] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[07:45:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:46:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:46:13] <chronon> If I start ghci with the filename containing the two equations of prod, it says: target ‘prod’ is not a module name or a source file
[07:46:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:46:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:46:33] <ski> try `ghci prod.hs' ?
[07:46:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:46:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:46:57] <chronon> Oh, it *requires* a .hs extension?
[07:47:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:47:11] <ski> it takes a filename, yes
[07:47:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:47:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:47:29] <chronon> I tend not to use filename extensions on scripts.
[07:47:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:47:38] *** Joins: alx741 (~alx741@157.100.197.240)
[07:47:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:47:46] <chronon> So I just called the file prod
[07:48:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:48:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:48:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:48:29] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:48:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:48:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:49:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:49:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:49:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:49:34] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:49:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:49:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:50:10] <chronon> I do indeed get different behaviour depending on the filename. Wow, how very MS Windows.
[07:50:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:50:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:50:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:50:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:50:44] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:50:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:51:01] <dsal> Haskell isn't a scripting language, so it's not going to be a problem in the long term.
[07:51:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:51:10] <dsal> You're optimizing a bit for things that don't come up all that often.
[07:51:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:51:17] *** Quits: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk) (Remote host closed the connection)
[07:51:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:51:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:51:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:51:47] <chronon> Hmmm, probably just my past experience getting in the way.
[07:51:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:52:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:52:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:52:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:52:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:52:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:53:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:53:07] <chronon> The super simple two line definition of prod is giving this error as I start ghci on it: Parse error: module header, import declaration or top-level declaration expected.
[07:53:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:53:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:53:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:53:39] <chronon> Ah, it's my problem. A typo.
[07:53:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:53:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:54:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:54:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:54:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:54:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:54:56] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:55:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:55:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:55:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:55:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:55:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:56:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:56:08] <chronon> The :e thing seems like the quickest way to work. Thanks.
[07:56:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:56:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:56:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:56:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:56:46] <dsal> It's a good idea to get into the habit of declaring types.  It may seem a bit foreign, but types are the things you're mostly going to be reading.
[07:56:49] <dsal> :t product
[07:56:50] <lambdabot> (Foldable t, Num a) => t a -> a
[07:56:52] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:57:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:57:12] *** ChanServ sets mode: +o litharge
[07:57:12] *** litharge sets mode: +b lavaman!~lavaman@98.38.249.169$##fix-your-connection
[07:57:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:57:23] *** litharge sets mode: -o litharge
[07:58:28] <chronon> Foldable? Err... I think I need to read more tutorial before getting to that.
[07:58:41] <ski>   product :: [Integer] -> Integer
[07:58:45] <ski> or
[07:58:54] <ski>   product :: Num a => [a] -> a
[07:59:06] <ski> is probably nicest to start with
[07:59:29] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[08:00:28] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[08:00:34] <ski> (well, s/product/prod/, in your case)
[08:01:36] <chronon> Ok, that seems to go at the top of the file without causing errors, so I must have understood it well enough.
[08:02:49] <ski> normally people would put the type signature just before the corresponding defining equations. occasionally, you'll see it appear earlier (e.g. if multiple operations all share the same signature, in which case you can declare them all at once, instead of repeating the signature)
[08:03:14] <chronon> Ok got it.
[08:03:33] <ski>   sum,prod :: [Integer] -> Integer  -- e.g.
[08:04:16] <ski> btw <https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#modules-vs-filenames>
[08:06:14] *** Joins: unyu (~pyon@user/pyon)
[08:07:21] <chronon> Ah, thanks.
[08:08:57] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[08:09:15] *** Joins: alx741 (~alx741@181.199.42.143)
[08:09:24] <chronon> Taht webpage looks very much like a readthedocs/Sphinx style document. IS that something that can be autogenerated using haddock or similar tool?
[08:11:33] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:15:19] *** Joins: theproffesor (~theproffe@user/theproffesor)
[08:16:25] <chronon> Nevermind. Too open kind of question that, I can tell. ;-)
[08:17:03] *** Joins: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[08:17:43] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[08:17:51] <dsal> chronon: Sorry, I'm a bit in and out.  I didn't mean to use that exactly.  It's a bit too abstract of an example, yeah.  but declare the thing you think you want and then try to make it work.
[08:17:51] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[08:20:20] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[08:25:13] *** Quits: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:25:16] *** Joins: lagash (lagash@lagash.shelltalk.net)
[08:25:34] <chronon> np
[08:26:09] *** Joins: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[08:27:13] *** ChanServ sets mode: +o litharge
[08:27:14] *** litharge sets mode: -bo lavaman!~lavaman@98.38.249.169$##fix-your-connection litharge
[08:28:33] *** Joins: mike11 (~Mike@user/mike11)
[08:28:39] *** Joins: notzmv (~zmv@user/notzmv)
[08:29:11] <ski> it is also possible (on a *nix system) to write shebangs like having the first line be `#!/usr/bin/env runhaskell'. then the filename needn't end in `.hs' or `.lhs' (literate). but then it would start execution at `main', rather than load the file into the interactor
[08:30:16] <ski> hm, after testing around a little, it appears that `#!/usr/bin/env -S ghci -x hs' here allows the file to be loaded into the interactor, without needing to have a name ending in `.hs' (and without needing `main' to be defined)
[08:30:20] <ski> chronon ^
[08:30:43] <chronon> Interesting.
[08:31:03] *** Quits: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[08:31:32] <chronon> I do like running scripts with shebang. Keeping separate source and executable for small stuff is a bit overkill.
[08:31:45] <ski> <https://stackoverflow.com/questions/14018282/how-to-embed-haskell-in-a-batch-file-hash-bang-runhaskell-for-windows> apparently gives some answer for what could be done to make batch running (like shebang), on Windows
[08:32:24] <chronon> Fortunately, I do not have the handicap of needing to use Windows. Ever.
[08:33:05] *** Joins: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[08:34:31] *** Joins: alx741 (~alx741@181.199.42.143)
[08:36:53] <chronon> Where did this site go? https://ghc.readthedocs.io/
[08:38:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[08:41:32] <dsal> IMO, trying to shebang a script in Haskell is a path to unnecessary frustration.
[08:41:55] <dsal> You're probably going to want some libraries among other requirements.
[08:43:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[08:43:56] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[08:44:18] <chronon> Libraries can be inported by the script presumably?
[08:44:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:48:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[08:50:32] <dsal> I'm not sure how you're thinking of that, but most surely not.
[08:51:42] <dsal> I've got a lot of haskell projects that use a lot of libraries, some of which aren't version compatible with each other.
[08:51:57] <chronon> Well, most languages allow sourcec files to specify the inclusion of other source files, and/or use of particular libraries, by declaring them at the top of the file.
[08:52:42] <dsal> That's almost entirely untrue in my experience.  Can you give an example?
[08:52:43] <chronon> I'm jumping the gun. Probably best for me to read on and wait to find out how to do library imports.
[08:54:43] <chronon> If there is a widespread issue with libraries having multiple incompatible versions then that is an ecosystem failing. There should be a central registry for libarary names, and a cultural attitude towards ensuring that later versions of libraries do not break backward compatibility.
[08:59:25] <chronon> You can't build reliable software when there is a chaotic free-for-all in the library ecosystem.
[08:59:50] <chronon> I think (hope) you must be exaggerating the problem.
[09:00:50] <dsal> No, you just restated it, though.  If you just throw an import at the top of a file, how should it resolve?
[09:00:54] *** Joins: alx741 (~alx741@181.199.42.143)
[09:01:05] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[09:01:07] <dsal> If you run your script again tomorrow, should it get library updates and maybe break, or somehow know to not update?
[09:01:39] <chronon> It should get the latest version and that should work just like the previous version.
[09:01:53] <dsal> Uh.  That's a terrible, and unprecedented idea.
[09:02:05] <chronon> If the API contract is broken in a latr version then the later version should not have the same name. The name is the contract.
[09:02:41] <dsal> The newest version of the amazon interface has a large number of major API changes which greatly improve a lot of things.   Most programs will ignore the new version until they're ready.
[09:02:42] <chronon> Maybe we're not talking about the same thing.
[09:03:49] <dsal> This is primarily how we manage compatibility:  https://pvp.haskell.org  (well, the base bit)
[09:03:58] <dsal> We have a few abstractions above this.
[09:04:49] *** Quits: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:04:54] <dsal> The point is that "a script" isn't going to express any of these things.  It's not impossible, but it's a lot harder than just making a project and declaring what you need.
[09:05:06] <chronon> Hmmm, version dependencies should always be minimums, not also maximums.
[09:05:35] <dsal> Lots of people with production systems disagree with you.  :)
[09:05:35] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[09:05:56] <dsal> When the next amazonka version ships should your programs all stop running?
[09:06:19] <dsal> Because if you don't put effort into applying the API changes, you're going to have a bad day if you don't have a max version constraint.
[09:08:02] <chronon> Looks like the dotted version numbers in the document you linked do indeed allow version numbers to increase and for the user of the module to be confident nothing will break. It is just that they have made breaking changes part of a more significant part of the version number, rather than making that a naming issue. So it's swings and roundabouts.
[09:09:03] *** Quits: mike11 (~Mike@user/mike11) (Quit: Leaving.)
[09:09:05] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:09:39] *** Joins: yauhsien (~Yau-Hsien@61-231-37-106.dynamic-ip.hinet.net)
[09:09:40] *** dagit3146 is now known as dagit
[09:09:57] <chronon> Personallly, I think that culturally there should be a greater emphasis on allowing imrovemnts that do not break things.
[09:10:27] <dsal> I can't even imagine how you could expect something like that to work.
[09:11:08] <chronon> It works like that everywher eoutside the Haskell community. It's basic practise in software engineering to honour the API.
[09:11:23] <chronon> But I think we must be talking about different things.
[09:11:48] <dsal> It's possible.  I've used a large number of languages over the last few decades and don't have much experience that matches what you're saying.
[09:11:57] <chronon> BEcause I simply cannot believe that anyone thinks it is good to change the API with every version bump.
[09:12:31] <dsal> It's the other way around.  If you change the API, you do a major version bump.
[09:12:39] <dsal> If the alternative is "you can never fix anything" then that seems like a bad idea.
[09:15:34] <chronon> Well, I think it is a question of priorities and emphasis. By allowing breaking changes across different major versions of a library, you are saying that change is favoured over stability. Whereas, if your ecosystem says that a library name is an API contract, and that to change it you would need a new name, then that emphasises careful API design up front and doing your best to honour the API when 
[09:15:38] *** Joins: deadmarshal (~deadmarsh@95.38.113.80)
[09:15:40] <chronon> updating things.
[09:16:27] <c_wraith> it's not like old libraries expire
[09:16:46] <dsal> heh, I've rarely seen anyone get anything right before deploying.
[09:17:26] <chronon> Sure the implementation is rarely correct first time, but the basic API is something you can plan and then stick to (usually).
[09:17:36] <dsal> The conversation came from "how do you specify which libraries you want" (which includes which versions).  If "always use the latest version" is enabled, then every time you run the script, you might be running different code, which seems bad.
[09:18:05] <chronon> Yes, but that is bad if you presume people will keep making breaking changes.
[09:18:35] <chronon> If your culture says never make breaking changes, then assuming the latest version is fine will work.
[09:18:49] <dsal> Your idea of "basic API" sounds super handwavy.  I changed a type from a type alias to a newtype in a release.  The API docs read mostly the same, but it caused compilation issues for users.
[09:19:05] <chronon> I think this is purely a cultural issue, not a technical one.
[09:19:27] <c_wraith> It's not a cultural issue that most people get APIs wrong on the first try
[09:19:50] <c_wraith> that's just a failure to predict the future
[09:20:16] <c_wraith> You seem to be advocating for only making libraries after you know everything
[09:20:21] <c_wraith> Which seems awfully late to start
[09:20:38] <chronon> Maybe Haskell makes it harder than other languages to abstract type details away from the users of an API.
[09:20:40] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[09:20:57] <dsal> I have no experience in any language that matches your description.
[09:21:11] <chronon> I cannot tell yet because I'm still learning it. Probably best for me to shut up for now. :-)
[09:22:04] <c_wraith> I think lens is an incredibly illustrative example.  Those early versions changed tons of things because nobody knew how to make it work yet.
[09:22:17] <c_wraith> Until someone actually makes the thing, you just have no idea
[09:22:18] *** Joins: alx741 (~alx741@181.199.42.143)
[09:22:39] <c_wraith> And then until 100 other people run into problems, all you have is a guess
[09:23:11] <dsal> What would lens be called if it had to be renamed every time there was a breaking change?
[09:23:23] <chronon> lens45 ?
[09:23:57] <dsal> Why would you put numbers at the end when there's already a version number?
[09:24:02] <chronon> Or maybe with a culture that leans towards not making so many breaking changes, it might only be called lens2
[09:24:04] <c_wraith> so really, all you're advocating for is making the version number part of the package name?  What does that change?
[09:25:42] <chronon> Yes, that's exatcly my point, name or major version number is essentially the same thing, it defines the API contract we are using. The differrence is that Haskell versioning seems to favour regular breaking changes, whereas most other languages aim not to have breaking changes in the first place. It's a cultural issue.
[09:26:07] <chronon> Anyway, no point in me discussing this any further at the moment, I need to press on with the tutorial.
[09:26:30] <c_wraith> I assure you, in my 20 year professional career, exactly 0 languages have lacked constant breaking changes to library
[09:27:06] <dsal> The only libraries that don't change are also not getting bug fixes.
[09:28:32] <chronon> I'm curious about a line like: qsort (x:xs) = qsort before ++ [x] ++ qsort after
[09:29:14] <chronon> How does haskell know that the first qsort does not apply to the result of the whole of the rest of the line? When are brackets needed?
[09:29:37] <dsal> function calls bind very tightly.
[09:29:43] <ski> function application binds tighter than infix operators
[09:29:46] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:29:55] <ski> (higher precedence)
[09:30:05] <dsal> But any given operator can have different binding strength (that the author gets to decide).
[09:30:06] <chronon> Ok, I seee. Is tere a precendence table I can look up somewhere?
[09:30:15] <dsal> % :i (++)
[09:30:15] <yahb> dsal: (++) :: forall a. [a] -> [a] -> [a] -- Defined in `GHC.Base'; infixr 5 ++
[09:30:39] <dsal> % :i ($)
[09:30:39] <yahb> dsal: ($) :: forall a b. (a -> b) -> a -> b -- Defined in `GHC.Base'; infixr 0 $
[09:30:41] <ski> function application is left-associative, with precedence level `10'
[09:30:41] <dsal> % :i (.)
[09:30:42] <yahb> dsal: (.) :: forall b c a. (b -> c) -> (a -> b) -> a -> c -- Defined in `GHC.Base'; infixr 9 .
[09:30:57] <c_wraith> sure. operators: anywhere from 0 to 9. the operator definition can specify.  Function application: 10.  Record update: 11
[09:31:51] <ski> (`@',`~',`!' (and record construction) in patterns also have higher precedence than application)
[09:32:11] <dsal> The neat thing about that is that the language itself doesn't have to have an opinion on + or * precedence.  That's a library concern.
[09:33:05] <chronon> Neat, or scary, I guess is depends on context. :-)
[09:33:05] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[09:33:47] *** Joins: alx741 (~alx741@181.199.42.143)
[09:35:02] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:35:07] <dsal> It does mean if you see   `some stuff $$$$ other stuff`    you know what's happening.  But if you see `a $$ b $$$ c` you might need to look things up.
[09:35:37] <chronon> And what is the usual way to look up things like that?
[09:35:51] <dsal> % :i (<$>)
[09:35:51] <yahb> dsal: (<$>) :: forall (f :: * -> *) a b. Functor f => (a -> b) -> f a -> f b -- Defined in `Data.Functor'; infixl 4 <$>
[09:36:46] *** Joins: k8yun (~k8yun@user/k8yun)
[09:36:52] <mshiraeeshi> chronon: why are you learning haskell?
[09:36:54] <dsal> A lot of times, you can't really write terribly ambiguous things without the compiler getting mad at you.
[09:38:02] <chronon> Why am I learning Haskell? That's an odd question in a haskell group. Because I believe it will be a powerful and useful language, and expand my mind along the way? Is that a good enough answer?
[09:38:29] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[09:38:38] <mshiraeeshi> I mean, do you have a specific purpose or just for fun
[09:38:55] <mshiraeeshi> seems like you're learning it for fun
[09:39:42] <chronon> Well, if it turns out to be as useful as I am hoping then I will likely use it for day to day tasks, and if I really enjoy it I might hope to get work using it. Yes, for fun, but hopefully not only for fun.
[09:40:25] <mshiraeeshi> I noticed that some languages tend to gravitate towards some niche
[09:40:43] <mshiraeeshi> for scala it is big data analysis
[09:41:13] <chronon> I am someone who likes correctness in software. I care about correctness more than most of my colleagues. I believe that haskell is a language that will make it possible to have a higher degree of confidence in the correctness of my code.
[09:41:30] <mshiraeeshi> for haskell it is blockchain I think
[09:41:42] <dsal> oh no.  Please no.
[09:41:54] <davean> mshiraeeshi: Ugh
[09:42:08] <mshiraeeshi> it is weird that you have a whole language and you have to use it in some narrow field
[09:42:15] <mshiraeeshi> only
[09:42:41] <mshiraeeshi> anyway, that's the impression I got
[09:42:50] <dsal> None of my haskell code interacts with any blockchains.
[09:43:01] <dsal> (as far as I know)
[09:43:21] <davean> The only "block chain" my code interacts with is a merkle tree of SSL certificates
[09:43:30] <mshiraeeshi> dsal: what are your projects about? I mean, they are web applications?
[09:43:32] <chronon> I had not seen any suggestion of haskell and blockchain being correlated. But perhaps blockchain people care enough about correctness to pick a language where correctness is a thing.
[09:44:49] <dsal> mshiraeeshi: I have a lot of iot stuff, data processing stuff, etc...
[09:45:10] <dsal> mshiraeeshi: Currently, my computer is doing this stuff:  https://dustin.sallings.org/2020/04/29/gopro-plus.html
[09:49:31] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[09:50:02] <chronon> What's the comment charater? It doesn't like # (except on the shebang line).
[09:50:34] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[09:50:40] <mshiraeeshi> it's --
[09:52:04] <chronon> Like SQL. Thanks.
[09:52:45] <mshiraeeshi> so what do you think is the solution to the "niche language" situation?
[09:53:11] <mshiraeeshi> avoiding putting all the eggs in one basket and gaining expertise in several languages?
[09:53:49] <dsal> What niche language situation?
[09:54:25] <mshiraeeshi> earlier I wrote:
[09:54:25] <mshiraeeshi> I noticed that some languages tend to gravitate towards some niche
[09:54:41] <mshiraeeshi> for scala it is big data analysis
[09:55:04] <dsal> Well yes, but you also thought haskell is a blockchain language.  Perhaps just learn more about what people are doing with things?
[09:55:04] *** Joins: alx741 (~alx741@181.199.42.143)
[09:55:29] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[09:55:31] <chronon> I don't think languages gravitate to a niche. It's that people working in a niche gravitate towards the most suitable language. Sharing a common language is the driver for this.
[09:55:40] <dsal> Haskell is my go-to language for just about anything I need to get done (exceptions being things that require other languages).
[09:56:49] <mshiraeeshi> dsal: "Perhaps just learn more about what people are doing with things?"
[09:57:07] <mshiraeeshi> how?
[09:57:32] <dsal> Instead of saying things like, "hey, I hear you all are scammers" maybe ask what people are working on.  :)
[09:57:58] <mshiraeeshi> I check haskell subreddit, I see hobby pet projects, abstract libraries
[09:57:59] <dsal> It's possible someone in here works on some blockchains, but it only comes up WRT, like, one company.
[09:58:05] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[09:58:19] <davean> mshiraeeshi: those abstract libraries are for work
[09:58:56] <mshiraeeshi> also vacancies - that's what describes actual work that gets done, right?
[09:59:26] <mshiraeeshi> and oftentimes there is blockchain involved in the job description
[09:59:39] <dsal> "works" is a strange abstraction.  I don't know the relevance.
[09:59:48] <chronon> buzzwords sell jobs.
[10:00:17] <monochrom> The niche language problem seems to be an XY problem. The true problem seems to be: you can't simultaneously choose both what job offers to accept and what language to use in that job.
[10:01:33] <dsal> I rely on Haskell to monitor my car and run my air conditioner and measure my consumption and freezer temperatures and manage my video and other large media management.  But also I get paid for writing haskell.  The last part isn't as interesting as the others to me.  :)
[10:02:01] <monochrom> Well, what's new. Even before programming existed in the first place, you can't simultaneously choose both which jobs offer to accept and which place to live in.
[10:02:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:03:06] <monochrom> I bet people back then talked about the niche town problem, like "Detroit is for cars, Washington D.C. is for civil service".
[10:03:36] <chronon> If there are two functions f and g, then when I write f g x would that naturally parse as f(g(x)) or do I necessarily need brackets?
[10:04:04] <Maxdamantus> (f g) x
[10:04:53] <Maxdamantus> So yes, if you want it to mean `f(g(x))`, you need brackets, though not that many. `f (g x)` will suffice.
[10:04:53] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[10:05:33] *** Joins: alx741 (~alx741@157.100.197.240)
[10:05:49] <Maxdamantus> alternatively you can use the `($)` application operator which has lower precedence than the built-in call syntax, `f $ g x`
[10:05:55] <chronon> I see, yes, just verified this manually. Hmm, it seems odd that it would choose the wrong interpretation when contextually it seems clear that (f g) x is not a valid parsing.
[10:05:57] <ski> <ski> function application is left-associative, with precedence level `10'
[10:05:57] <dsal> chronon: you can pass g as an argument to f
[10:06:34] <dsal> `(f g) x` is the valid parsing.
[10:06:34] <ski> the "left-associative" bit means that `f g x' gets parsed as `(f g) x', just like `7 - 2 - 3' gets parsed as `(7 - 2) - 3'
[10:07:03] <monochrom> When you later learn higher order functions such as "map cos [1,2,3]" you will appreciate that the computer does not think "map (cos [1,2,3])".
[10:07:03] <ski> if you want `f (g x)' or `7 - (2 - 3)', you'll have to be explicit about those brackets
[10:07:05] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[10:07:41] <chronon> I suppose my question is why did they decide function application should be left associative?
[10:07:45] <dsal> chronon: It's worth noting that functions take one argument and return one value.
[10:08:03] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[10:08:09] <Maxdamantus> chronon: because of "curried" functions.
[10:08:23] <ski> `map cos [1,2,3]' means `(map cos) [1,2,3]', which is the valid (and intended) parsing here, yes
[10:08:42] <Maxdamantus> > let sum = foldl (+) 0 in sum [1, 2, 3]
[10:08:43] <lambdabot>  6
[10:08:52] <chronon> Hmm, ok, looks like the answer is because I don't know enough yet. I will suspend my curiocity and read on in the tutorial.
[10:09:30] <ski> > map (map (^ 2)) [[],[0],[1,2],[3,4,5],[6,7,8,9]]  -- this would be more awkward, without `map' being expressed in curried style
[10:09:32] <lambdabot>  [[],[0],[1,4],[9,16,25],[36,49,64,81]]
[10:09:54] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:10:01] <ski> > map (\xs -> map (^ 2) xs) [[],[0],[1,2],[3,4,5],[6,7,8,9]]  -- this is basically what you'd have to do, if you couldn't partially apply `map'
[10:10:03] <lambdabot>  [[],[0],[1,4],[9,16,25],[36,49,64,81]]
[10:10:52] <Maxdamantus> Functions all take exactly one argument, so if you see something like `f x y z`, it means `((f x) y) z`, so you can always just omit the "last arguments" and apply them later.
[10:11:13] <dsal> Or, often more interestingly, reuse them.
[10:11:18] <Maxdamantus> by doing `let g = f x y in g z`
[10:11:23] <ski> > filter (all odd) [[0,2,6],[1,7],[3,4,8],[5,9]]  -- another partial application example
[10:11:25] <lambdabot>  [[1,7],[5,9]]
[10:11:36] <dsal> > map (mod 2) [1..9]
[10:11:37] <lambdabot>  [0,0,2,2,2,2,2,2,2]
[10:12:02] <dsal> mod is probably a bad example since nobody writes it that way.  heh
[10:12:20] <ski> > map (`mod` 3) [1..9]
[10:12:22] <lambdabot>  [1,2,0,1,2,0,1,2,0]
[10:12:25] <monochrom> I sometimes write it that way. :)
[10:12:33] <monochrom> mod 5 2 and div 5 2.
[10:12:34] * Maxdamantus thinks he prefers his `sum` example.
[10:12:56] <monochrom> too lazy to reach the ` key... :)
[10:13:18] <ski> % :i elem
[10:13:18] <yahb> ski: type Foldable :: (* -> *) -> Constraint; class Foldable t where; ...; elem :: forall a. Eq a => a -> t a -> Bool; ...; -- Defined in `Data.Foldable'; infix 4 `elem`
[10:13:19] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[10:14:31] <ski> > filter (1 `elem`) [[0,2,4,6],[1,3,5,7],[1,5],[3,7],[1],[5],[3],[7]]
[10:14:32] <lambdabot>  [[1,3,5,7],[1,5],[1]]
[10:15:13] <EvanR> :t `($)`
[10:15:14] <lambdabot> error: parse error on input ‘`’
[10:15:26] <EvanR> fiddlesticks
[10:16:05] * ski would prefer `$' not being mentioned early in tutorials
[10:20:27] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:21:12] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[10:25:00] <chronon> Does the "standard prelude" exist as a file I can read in source form?
[10:26:12] <chronon> If so, which filename do I need to look for?
[10:27:44] <dsal> that's not exactly how it works.  A module can export symbols from other modules.
[10:28:04] *** Joins: alx741 (~alx741@157.100.197.240)
[10:28:07] <dsal> You can read the docs for at least some version here:  https://hackage.haskell.org/package/base-4.16.0.0/docs/Prelude.html
[10:28:31] <dsal> The source links seem broken there, though.  That's unfortunate.
[10:28:36] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[10:28:38] *** Joins: coot (~coot@213.134.190.95)
[10:28:51] *** Joins: mbuf (~Shakthi@223.184.49.187)
[10:28:57] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:24a8:40ee:fe3d:56e6) (Ping timeout: 240 seconds)
[10:29:09] <dsal> Some of them work, at leaset.
[10:31:01] <ski> source link (to <https://hackage.haskell.org/package/base-4.16.0.0/docs/src/Prelude.html>) works here
[10:31:02] <chronon> Ok, thanks.
[10:31:41] <ski> (of course, that just, for GHC, reexports a bunch of other modules)
[10:31:45] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:32:35] <chronon> Oh look: import System.IO there's no version number on that import statement. That's not what I was expecting to see given the earlier conversation.
[10:33:30] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:34:21] * chronon regrets bring that up again.
[10:34:27] <dsal> The point of that conversation is that there's no version number.
[10:35:02] <dsal> `System.IO` isn't a package.
[10:35:53] <dsal> But it's part of a versioned package and when you write software that depends on a package and you just hope it works after each new software update, you eventually get sad.  That's why we don't do that.
[10:37:05] <dsal> The early days of go were like that.  It was pretty exciting.  There were several inventions people came up with to try to figure out how have predictable builds.  There are only about two or so in use now that they've made a new standard after everyone else solved it.
[10:39:20] <dsal> I can't remember how many ways python ended up with.  I just know I ended up with a lot of broken python scripts and basically assume if someone has a python script on the internet, I won't be able to make it run on my computer.
[10:42:18] <chronon> The python people have a virtual environment system. I never got into using that. It seem like a symptom of a bigger failing in the ecosystem.
[10:42:30] * ski . o O ( "A Ban on Imports" by Gilad Bracha in 2009-06-30 at <https://gbracha.blogspot.com/2009/06/ban-on-imports.html> )
[10:42:37] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[10:48:33] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[10:51:30] *** Joins: alx741 (~alx741@157.100.197.240)
[10:56:08] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:58:38] <chronon> That blog is a wonderfully humorous read. Some people really have a gift for writing.
[10:58:52] <chronon> But it's a distraction. Stop it. ;-)
[10:59:30] <dsal> Yes, some projects use virtualenv.  Those *sometimes* work as they do list many of the things you need to get started.  But what if I don't have a C library they're linking against?  Or the C library I have is the wrong version?  That's typically where those stop working for me.
[11:00:11] <dsal> Nowadays, if it ships as a docker image, it might work, but now I'm installing another operating system just to run a python script.  Hardly seems better than just compiling a program.
[11:00:21] * dsal still has to figure out how to make a docker image for one of his projects since someone asked
[11:02:08] <EvanR> hey man you can't beat the reliability of driving a van containing a working PC with the desired software already installed and working to your house
[11:02:49] <EvanR> latency is an issue but whatevs
[11:04:46] <dsal> So much bandwidth.
[11:12:12] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:13:04] <systemfault> Hi, I was wondering was is the "best" way to install ghc on my mac, I could probably do it via brew... but then there's also the "stack" route... but now there's also something called ghcup that can be used to install ghc + cabal or stack... etc..
[11:13:48] <sclv> ghcup is the best way
[11:14:02] *** Joins: alx741 (~alx741@157.100.197.240)
[11:14:05] <sclv> it is standard and recommended
[11:14:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:16:39] <systemfault> And if I dare asking cabal vs stack, am I going to start a war? I heard that stack used to be the way to go for painless dependency management but that nowadays cabal has caught up or something
[11:17:22] *** Quits: mbuf (~Shakthi@223.184.49.187) (Quit: Leaving)
[11:17:52] <systemfault> ghcup is good stuff 👍
[11:18:48] <sclv> right. nowadays both work fine and of the two
[11:18:49] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:19:00] <sclv>  cabal is more actively developed.
[11:19:17] <dsal> I've not successfully built a project without stack, but I've worked on them, so it's possible.
[11:19:25] <sclv> and makes it more convenient to use a broader range of packages.
[11:20:49] *** Joins: wonko_ (~wjc@2a0e:1c80:11::50)
[11:21:14] <systemfault> Fair enough, I'll start with Cabal since it's the "blessed" package manager
[11:21:18] <dsal> Last time I tried ghcup it wasn't working on my Mac.  I use nix for all that stuff.  It's precarious
[11:21:52] <dsal> stack uses cabal, so you'll user cabal either way. :)
[11:22:07] <systemfault> I haven't had good experiences with nix on mac... there was like no binaries and it had to compile the whole world
[11:22:18] <systemfault> But Nix on NixOS is pretty good stuff
[11:22:27] *** Quits: dolio (~dolio@130.44.130.54) (Remote host closed the connection)
[11:22:42] *** Joins: dolio (~dolio@130.44.130.54)
[11:22:43] *** Joins: irishman (~vshev4enk@178.151.117.243)
[11:22:50] <dsal> I've not had that particular problem in a bit, but yeah, I've had it.
[11:23:34] <dsal> I had it worse on nixos recently since we it a patched version of ghc and I didn't have my cache configured.
[11:23:38] *** Quits: wonko_ (~wjc@2a0e:1c80:11::50) (Client Quit)
[11:23:46] *** Joins: max22- (~maxime@2a01cb0883359800bbcc7fa8d7db61b8.ipv6.abo.wanadoo.fr)
[11:24:35] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[11:24:59] <jackdk> systemfault: the trick is to make sure your nixpkgs pin is drawn from a darwin channel
[11:25:07] <ski> systemfault : "The Cabal/Stack Disambiguation Guide" <https://gist.github.com/merijn/8152d561fb8b011f9313c48d876ceb07>
[11:26:07] <systemfault> jackdk: I'll stay with ghcup for now, it was really quick to install ghc + latest cabal. But I may revisit nix on osx eventually
[11:26:19] <systemfault> jackdk: Thanks for the info though, really helpful
[11:26:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[11:27:16] <dsal> ghcup installed fast for me, but doesn't build anything. :) That might just be arm, though.
[11:27:17] *** Quits: irishman (~vshev4enk@178.151.117.243) (Ping timeout: 256 seconds)
[11:27:33] <dsal> I've not tried in a month or so.
[11:28:15] <systemfault> I just want the less friction possible with tooling so I can focus on learning and writing code
[11:29:08] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 272 seconds)
[11:29:10] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:30:10] <dsal> Yep, makes sense.  I try to get projects off of stack now and then and fail.  It seems like it'd be easy, but I always run into something.  I work by inertia
[11:30:12] *** Joins: shiraeeshi (~shiraeesh@109.166.56.8)
[11:30:46] *** Quits: shiraeeshi (~shiraeesh@109.166.56.8) (Read error: Connection reset by peer)
[11:31:39] <jackdk> systemfault: good luck. to be precise I mean something like nixpkgs-21.11-darwin
[11:31:40] *** Quits: mshiraeeshi (~shiraeesh@109.166.56.8) (Ping timeout: 272 seconds)
[11:31:52] *** Joins: shiraeeshi (~shiraeesh@109.166.56.8)
[11:32:08] <systemfault> I've been interested in Haskell for a long time now... but I never really built anything real world using it, and I would like to change that. The closest thing to pure FP I've done in the real-world is to using effect-ts with TypeScript. (Shame on me...)
[11:32:47] *** Quits: shiraeeshi (~shiraeesh@109.166.56.8) (Read error: Connection reset by peer)
[11:34:58] *** Joins: alx741 (~alx741@157.100.197.240)
[11:38:28] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:46:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:48:09] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:48:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:48:09] *** Joins: wroathe (~wroathe@user/wroathe)
[11:49:54] *** Joins: acidjnk_new (~acidjnk@p200300d0c71a5a00a926c52c5a33de35.dip0.t-ipconnect.de)
[11:50:02] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[11:50:02] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[11:50:02] *** Joins: turlando (~turlando@user/turlando)
[11:50:52] *** Quits: turlando (~turlando@user/turlando) (Client Quit)
[11:51:19] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[11:51:19] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[11:51:19] *** Joins: turlando (~turlando@user/turlando)
[11:53:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[11:53:23] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[11:53:47] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[11:56:21] *** Joins: alx741 (~alx741@157.100.197.240)
[11:57:53] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 256 seconds)
[12:03:30] *** Quits: acidjnk_new (~acidjnk@p200300d0c71a5a00a926c52c5a33de35.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[12:04:07] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[12:04:12] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 240 seconds)
[12:07:38] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:11:02] *** Joins: alp (~alp@user/alp)
[12:17:25] *** Joins: jakalx (~jakalx@base.jakalx.net)
[12:18:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:18:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:18:55] *** Joins: wroathe (~wroathe@user/wroathe)
[12:21:13] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[12:22:30] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:22:39] *** Joins: jtomas (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[12:23:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:25:56] *** Joins: alx741 (~alx741@157.100.197.240)
[12:27:25] <dminuoso> dsal: Heh, and I have not successfully built a project *with* stack yet.
[12:29:54] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[12:29:54] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[12:29:54] *** Joins: turlando (~turlando@user/turlando)
[12:29:56] *** Joins: kuribas (~user@ptr-25vy0i8y9oiry1fm4yq.18120a2.ip6.access.telenet.be)
[12:30:06] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (Quit: You have been kicked for being idle)
[12:30:10] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:30:15] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (Quit: You have been kicked for being idle)
[12:30:15] *** Quits: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6) (Quit: You have been kicked for being idle)
[12:30:43] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:35:34] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[12:36:50] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[12:39:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:41:54] <kuribas> Should you version control your configuration?
[12:42:26] <kuribas> What about sensitive info, like database passwords?
[12:42:48] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[12:44:22] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:b668:8e8:f292:8d7c)
[12:45:08] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 272 seconds)
[12:46:20] <dminuoso> kuribas: So what we started to do is use GPG on every server. The server receives a master key, and we then encrypt credentials against the master public key.
[12:46:49] <dminuoso> So that way we have a repository for each fleet of servers that contains their full specification
[12:46:52] *** Joins: alx741 (~alx741@157.100.197.240)
[12:47:35] <dminuoso> It requires a bit of systemd unit machinery to decrypt these, and sometimes a bit of templating or replacemnet shenanigans for when a given software doesnt have a way to include another file, or have some passwordFile option
[12:48:50] <kuribas> So you encrypt passwords in the configuration files?
[12:48:55] <dminuoso> So we dont just version control configuration, we version control the entire server.
[12:49:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[12:49:15] <kuribas> and what do you encrypt?
[12:49:30] <dminuoso> Mmm, hold on let find something that I can share with you
[12:49:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:49:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:49:43] *** Joins: wroathe (~wroathe@user/wroathe)
[12:50:11] <kuribas> "whole server" <= like a nix configuration?
[12:50:19] <kuribas> or ansible?
[12:50:19] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:50:36] <dminuoso> For us its a nixos configuration, but you can do this with whatever tool you use.
[12:50:48] <kuribas> well, don't use any...
[12:50:50] <dminuoso> There's really no other way if you want to be able to automatically recover any server.
[12:50:53] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[12:51:00] <kuribas> we just copy the binary to the production server.
[12:51:08] <dminuoso> Plus, you always have a declarative specification of your server. :)
[12:51:15] <kuribas> yeah, that's nice.
[12:51:44] <dminuoso> Over time you accumulate admins managing iptables, configuring the network, installing packages, editing files, setting kernel config, manipulating systemd units..
[12:51:51] <kuribas> We want to go more towards ansible and reproducability, but it is a long term project, like months...
[12:52:06] <dminuoso> And quickly you reach to the point where you *have* to snapshot entire VMs, but nobody can tell you how its configured...
[12:52:32] <dminuoso> And when you have a hardware machine, you're pretty much out of luck.
[12:52:42] <dminuoso> But anyway
[12:52:51] <dminuoso> Irrespective of how much you store, the general idea is still applicable
[12:53:51] <kuribas> dminuoso: So what do you encrypt then?
[12:54:05] <dminuoso> kuribas: Operationally what we do is this: We use `git-secrets` to do multi key encryption, and the ring of keys to encrypt all secrets for consists of: a) each administrator of the server, and b) the master key of the server itself.
[12:54:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:55:06] <dminuoso> Then, using that, we encrypt each secret/password (including the master private key) using git-secret against that "ring" 
[12:55:45] <dminuoso> Each server has some initial bootstrapping, where it receives the master private key (so we type `git secret reveal`, copy over the master private key using `morph/nixos`, but you can do whatever here)
[12:56:35] <dminuoso> Then, we just use `git secret` to encrypt further secrets like database passwords. 
[12:57:13] <dminuoso> So we can encrypt passwords such that the server can decrypt them
[12:57:21] <dminuoso> And keep the encrypted password in the repo
[12:57:59] <dminuoso> So then the server has a systemd unit running for each secret it must decrypt
[12:58:23] <dminuoso> With the correct systemd ordering and dependencies
[12:59:02] <dminuoso> (say if you have a password that your app `foo` needs to even start up, it would have `Before=foo.service; WantedBy=foo.service`
[12:59:06] *** Joins: Guest73 (~Guest73@2a02:587:983d:7c00:d3f3:4e58:6ef2:5281)
[12:59:41] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:00:09] <dminuoso> And then you might have another systemd unit that either does some minor templating (say replace some PASSWORD string in your config with the actual decrypted content, again with systemd ordering and dependencies), or sometimes software allows "include" macro processors, then you can just refer to the path you know the secret will be decrypted to
[13:00:43] <dminuoso> Or sometimes software can also just refer to a path like `passwordFile = /srv/secrets-decrypted/my-db-password`
[13:01:01] <dminuoso> It took us a bit of engineering to get there, such that all these units are automatically generated.
[13:01:05] <dminuoso> But it was well worth it
[13:02:12] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 240 seconds)
[13:02:17] *** Quits: jtomas (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Ping timeout: 240 seconds)
[13:02:49] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:02:53] <kuribas> yeah, it's the direction we want to go in, but it will be a lot of work.
[13:05:12] <dminuoso> If you want to use just ansible, perhaps ansible vault might be suitable for you
[13:05:23] <kuribas> right
[13:05:45] <kuribas> We're also short on infra people.
[13:05:50] <dminuoso> Our solution is quite elaborate to cope with the realities of nixos. :)
[13:06:09] <kuribas> nixos looks interesting, but no way they'll accept it in our company :)
[13:07:20] <dminuoso> heh there's not much acceptance here either
[13:07:25] <dminuoso> but we're short on infra people 
[13:07:52] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (Ping timeout: 256 seconds)
[13:07:59] <dminuoso> So its a "if you need us to manage this, we must use the tools to reduce our burden and effort"
[13:08:16] *** Joins: alx741 (~alx741@181.199.42.143)
[13:08:24] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Remote host closed the connection)
[13:10:31] <dminuoso> But now here we are. ~20 nixos machins running our mail cluster, we're rebuilding our DNS infrastructure to nixos, rebuilding a thanos cluster with nixos, our customer authentication service is a fleet of nixos.. 
[13:10:40] <dminuoso> We're like the borg.
[13:11:09] <maerwald[m]> Using nix to reduce effort sounds like using Haskell to reduce code denseness
[13:12:54] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[13:13:32] *** Quits: Guest73 (~Guest73@2a02:587:983d:7c00:d3f3:4e58:6ef2:5281) (Quit: Client closed)
[13:13:40] <dminuoso> maerwald[m]: when you're managing some 30 servers, then getting any coherence in terms of "how must all servers be equipped", how are the servers even configures (admins logging in and just modifying things?) is definitely a problem
[13:13:59] <dminuoso> Especially if we want to do other things than play sysadmin all day long
[13:14:20] <dminuoso> Im not saying its the only way, but we tried alternatives and nixos seems to be getting us what we need
[13:14:26] <dminuoso> so for us its working
[13:14:48] *** Joins: wonko (~wjc@user/wonko)
[13:16:04] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[13:17:24] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[13:18:36] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[13:19:46] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[13:19:48] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[13:20:29] *** Joins: wroathe (~wroathe@user/wroathe)
[13:21:47] <kuribas> maerwald[m]: haskell is great to reduce code denseness.
[13:21:58] <kuribas> not sure what point you want to make.
[13:22:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b)
[13:22:57] *** Joins: fendor (~fendor@77.119.223.31.wireless.dyn.drei.com)
[13:23:15] *** Joins: coot (~coot@213.134.190.95)
[13:24:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[13:24:38] <kuribas> I find haskell even denser than lisps, despite the types.
[13:25:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[13:25:23] <maerwald[m]> I have no idea what you mean
[13:25:44] *** Joins: notzmv (~zmv@user/notzmv)
[13:26:03] *** Quits: chronon (~chronon@user/chronon) (Quit: leaving)
[13:26:13] *** Joins: chronon (~chronon@user/chronon)
[13:26:21] <ski> ("dense" as in "concise"/"brief" ?)
[13:26:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b) (Ping timeout: 240 seconds)
[13:27:47] <maerwald[m]> ski: depends. Dense as in: you can't be drunk while reading code, which works great with java
[13:29:39] *** Joins: alx741 (~alx741@157.100.197.240)
[13:30:42] <kuribas> you shouldn't be drunk while reading code...
[13:31:03] <maerwald[m]> kuribas: why not
[13:31:05] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:34:13] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[13:34:13] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:35:23] <kuribas> being drunk is not a criterium I use for evaluation anything programming related.
[13:35:32] <kuribas> being tired perhaps.
[13:35:53] <kuribas> I'd prefer read haskell being tired over read java.
[13:36:15] *** Joins: Ariakenom_ (~Ariakenom@2001:9b1:efe:9d00:c571:ed19:3ac0:c340)
[13:37:27] <icrbow[m]> Being drunk while hotfixing some python code at 2am was my pivotal moment for turning Haskell. The solution was... not. And there was no compiler to steady my hands.
[13:37:42] *** Quits: coot (~coot@213.134.190.95) (Ping timeout: 272 seconds)
[13:37:44] <maerwald[m]> xD
[13:39:01] <ski> @quote is.ok.though
[13:39:01] <lambdabot> dons says: Coding drunk in Haskell is ok though, its like drinking on a passenger plane flight -- the stewards will prevent you from hurting anyone. However, coding drunk in C is just scary, DUI
[13:39:01] <lambdabot> territory, and should not be allowed. I hope linux kernel devs don't write code under the influence
[13:40:38] <icrbow[m]> I wonder if "Ballmer Peak" thing somehow related to Microsoft Research work on Haskell.
[13:41:43] <davean>  
[13:41:57] <maerwald[m]> ski: reading and writing are two wildly different things though. Reading other people's code feels like going through the memoirs of a serial killer and trying to figure out when they lost it.
[13:42:34] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:43:58] <maerwald[m]> "Other people" here equates to yourself in two weeks xD
[13:44:30] <maerwald[m]> So don't worry, have a glass
[13:45:32] <kuribas> That's a scary comparison...
[13:46:22] *** Joins: Ariakenom__ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[13:47:19] *** Joins: capo_greco (~textual@60-241-161-167.static.tpgi.com.au)
[13:50:20] *** Quits: Ariakenom_ (~Ariakenom@2001:9b1:efe:9d00:c571:ed19:3ac0:c340) (Ping timeout: 250 seconds)
[13:51:31] <[exa]> icrbow[m]: I believe that Ballmer peak was evaluated using the traditional microsoft evaluation methods, such as the cumulative success of Mr Clippy
[13:52:11] *** Joins: alx741 (~alx741@181.199.42.143)
[13:56:36] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[13:57:32] <dminuoso> maerwald[m]: But anyway, I can certainly see where you're coming from. In many cases simpler is better, and nix certainly complicated things a lot.
[13:57:49] <dminuoso> Nix has very shitty UX (the diagnostics are ususally horrid), has piss poor documentation at times..
[13:59:09] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[14:00:50] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[14:04:12] <maerwald[m]> Would you trust nix to manage your postfix config via high level declarative config? ;)
[14:05:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:05:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:05:43] *** Joins: wroathe (~wroathe@user/wroathe)
[14:09:45] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[14:10:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:10:49] *** Joins: cosimone (~user@93-47-228-207.ip115.fastwebnet.it)
[14:10:55] *** bonz060 is now known as bonfacekilz
[14:12:48] *** bonfacekilz is now known as bonz060
[14:15:54] <[exa]> maerwald[m]: I thought it's just me, but are the admins generally very touchy about postfix configs? :D
[14:16:58] *** Joins: irishman (~vshev4enk@178.151.117.243)
[14:17:17] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[14:17:26] *** Joins: alx741 (~alx741@181.199.42.143)
[14:19:37] *** bonz060 is now known as bonfacekilz
[14:19:40] *** Quits: capo_greco (~textual@60-241-161-167.static.tpgi.com.au) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:20:10] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[14:20:24] <maerwald[m]> Not sure, but having configured postfix servers manually, I don't trust some random packager to get it right, especially across postfix versions 
[14:20:55] *** Joins: alx741 (~alx741@157.100.197.240)
[14:21:38] <maerwald[m]> That leaves us with replicating low level configs across machines, which isn't that hard if you control the environment 
[14:22:02] *** Quits: irishman (~vshev4enk@178.151.117.243) (Ping timeout: 272 seconds)
[14:22:04] *** bonfacekilz is now known as bonz060
[14:22:22] *** bonz060 is now known as bonfacekilz
[14:23:09] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[14:23:39] *** Joins: coot (~coot@213.134.190.95)
[14:25:06] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:27:35] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:29:35] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[14:31:09] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:33:36] *** Joins: capo_greco (~textual@60-241-161-167.static.tpgi.com.au)
[14:40:27] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[14:40:45] *** Quits: chronon (~chronon@user/chronon) (Quit: leaving)
[14:40:53] *** Joins: chronon (~chronon@user/chronon)
[14:41:07] <mikoto-chan> what was the category channel called again?
[14:41:20] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[14:42:24] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[14:42:44] *** Joins: kmein (~weechat@user/kmein)
[14:43:23] *** Joins: alx741 (~alx741@157.100.197.240)
[14:43:53] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[14:44:00] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[14:46:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:47:39] *** Joins: fendor_ (~fendor@178.165.200.21.wireless.dyn.drei.com)
[14:49:48] *** Quits: fendor (~fendor@77.119.223.31.wireless.dyn.drei.com) (Ping timeout: 240 seconds)
[14:51:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[14:52:10] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:08:18] *** Quits: kuribas (~user@ptr-25vy0i8y9oiry1fm4yq.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[15:10:00] *** Joins: alx741 (~alx741@181.199.42.143)
[15:12:45] <capo_greco> in the miso documentation, Nix seems to be more or less a pre-requisite?
[15:13:21] <capo_greco> Nix is a bit annoying to install on Big Sur
[15:13:22] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[15:13:39] <capo_greco> I was wondering if people were using Miso without Nix
[15:16:34] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 250 seconds)
[15:20:06] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[15:23:00] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[15:24:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[15:24:57] *** Joins: acidjnk (~acidjnk@p200300d0c733ea53d592f9418a369360.dip0.t-ipconnect.de)
[15:24:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b)
[15:26:40] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[15:27:25] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[15:29:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b) (Ping timeout: 240 seconds)
[15:30:15] *** Joins: alx741 (~alx741@181.199.42.143)
[15:31:51] *** Quits: acidjnk (~acidjnk@p200300d0c733ea53d592f9418a369360.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:32:02] <maerwald> capo_greco: ghcjs without nix is generally almost impossible
[15:33:49] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[15:33:53] <capo_greco> ah. ok nix it is
[15:38:25] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[15:42:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[15:50:29] *** Joins: alx741 (~alx741@157.100.197.240)
[15:52:11] *** Joins: jao (~jao@68.235.43.84)
[15:53:58] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:02:45] *** Quits: capo_greco (~textual@60-241-161-167.static.tpgi.com.au) (Quit: Textual IRC Client: www.textualapp.com)
[16:07:01] *** Joins: alp (~alp@user/alp)
[16:10:33] *** Joins: vysn (~vysn@user/vysn)
[16:11:54] *** Joins: alx741 (~alx741@157.100.197.240)
[16:14:24] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[16:15:04] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:15:37] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[16:16:52] *** Hash is now known as stoned
[16:21:01] *** stoned is now known as Hash
[16:24:04] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[16:25:57] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799)
[16:30:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799) (Ping timeout: 240 seconds)
[16:30:38] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:34e0:8b74:dd2c:1d62)
[16:30:40] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:31:18] *** Joins: capo_greco (~textual@60-241-161-167.static.tpgi.com.au)
[16:33:31] *** Joins: alx741 (~alx741@157.100.197.240)
[16:40:54] *** Joins: jtomas (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[16:41:15] <capo_greco> ok so I have installed nix according to this guide: https://duan.ca/2020/12/13/nix-on-macos-11-big-sur/
[16:41:15] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:41:27] <capo_greco> but I am getting `fish: Unknown command: nix-shell`
[16:42:08] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:42:29] <capo_greco> I feel like I want to `fish_add_path` but I'm not sure where nix-shell lives
[16:42:45] <capo_greco> or if it even works that way
[16:43:02] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[16:43:29] *** Quits: Ariakenom__ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[16:43:29] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[16:44:03] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 256 seconds)
[16:44:15] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[16:45:30] <chronon> Is it really true that 1-ary tuples are not allowed to exist at alll in Haskell? Python has the syntax (123,) with that extra comma to differentiate tuples from mere parentheses.
[16:46:01] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:46:16] *** Quits: jao (~jao@68.235.43.84) (Ping timeout: 250 seconds)
[16:48:29] <kritzefitz> chronon: Arguably there is a 1-ary tuple in Haskell, it's just called Identity.
[16:49:06] <chronon> But that would not have type tuple, unless I'm misunderstanding something.
[16:50:00] <kritzefitz> Formally, there is no “tuple type” that is common between all tuples, because all tuples of different lengths necessarily have different types.
[16:50:13] *** Joins: razetime (~quassel@117.254.35.46)
[16:51:08] <chronon> Right. I was about to suggest.. ok got it. Thanks.
[16:51:10] *** Joins: coot (~coot@213.134.190.95)
[16:51:47] <kritzefitz> This makes 1-ary tuples much less useful in Haskell than in Python, because in Python a 1-ary tuple is a special case of n-ary tuples. In Haskell tuples of different lengths don't really have anything in common.
[16:53:06] <chronon> Right. Makes sense.
[16:57:37] *** Joins: alx741 (~alx741@181.199.42.143)
[17:00:56] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[17:03:19] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 256 seconds)
[17:06:55] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:07:14] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[17:07:25] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[17:08:55] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[17:13:30] *** Joins: Midjak (~Midjak@82.66.147.146)
[17:17:24] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[17:17:53] *** Joins: alx741 (~alx741@157.100.197.240)
[17:19:45] <Inst[m]> kritzefitz: how do tuples work in Haskell?
[17:19:49] <Inst[m]> I have fst, snd, pattern matching
[17:19:55] <Inst[m]> but how do I manipulate tuples?
[17:19:55] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:20:19] *** Quits: jtomas (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[17:21:37] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:22:41] <geekosaur> that's basically it. inparticular you cannot iterate over a tuple without type level magick
[17:23:01] <geekosaur> also fst and snd only work on 2-tuples
[17:23:21] *** Quits: ncopa (~ncopa@alpine/developer/ncopa) (Quit: Alpine Linux, the security-oriented, lightweight Linux distribution)
[17:24:18] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[17:24:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 256 seconds)
[17:25:24] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 240 seconds)
[17:25:35] *** Joins: ncopa (~ncopa@gbr2-dev1.alpinelinux.org)
[17:27:16] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:29:17] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[17:31:34] *** Quits: max22- (~maxime@2a01cb0883359800bbcc7fa8d7db61b8.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[17:31:48] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 240 seconds)
[17:34:02] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[17:37:00] *** Joins: alx741 (~alx741@157.100.197.240)
[17:37:46] <pavonia> Inst[m]: Manipulating tuples in Haskell basically means deconstructing them and building new ones based on the original or new values
[17:39:53] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[17:40:00] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[17:40:01] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:43:16] *** Joins: cheater (~Username@user/cheater)
[17:48:35] *** Joins: AlexNoo_ (~AlexNoo@178.34.160.240)
[17:51:48] *** Quits: Alex_test (~al_test@94.233.240.208) (Ping timeout: 240 seconds)
[17:52:03] *** Quits: AlexNoo (~AlexNoo@94.233.240.208) (Ping timeout: 252 seconds)
[17:52:12] *** Quits: AlexZenon (~alzenon@94.233.240.208) (Ping timeout: 240 seconds)
[17:53:53] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[17:53:53] *** Joins: alp (~alp@user/alp)
[17:55:43] *** Joins: Alex_test (~al_test@178.34.160.240)
[17:56:07] *** Joins: AlexZenon (~alzenon@178.34.160.240)
[17:56:52] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 256 seconds)
[17:58:17] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[17:58:37] *** Joins: alx741 (~alx741@157.100.197.240)
[18:01:27] *** Quits: alp (~alp@user/alp) (Ping timeout: 256 seconds)
[18:01:33] *** AlexNoo_ is now known as AlexNoo
[18:02:01] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:03:10] *** Joins: machinedgod (~machinedg@24.105.81.50)
[18:03:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:05:21] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:05:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:05:40] *** Joins: max22- (~maxime@2a01cb088335980000d616136ecfccf9.ipv6.abo.wanadoo.fr)
[18:06:14] *** Joins: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e)
[18:07:01] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:07:01] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:07:01] *** Joins: wroathe (~wroathe@user/wroathe)
[18:14:57] <FernandoChu[m]> multiline evals in HLS are not working for me, any ideas? Running the example in the docs gives me `unknown command '{'` https://github.com/haskell/haskell-language-server/blob/master/plugins/hls-eval-plugin/README.md#multiline-expressions
[18:15:37] <FernandoChu[m]> running vscode with ghc 8.10.7 if it matters
[18:16:37] <geekosaur> I believe the point of that is exactly that miultilines don't work in HLS (that's a doctest example)
[18:18:18] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:18:39] *** Joins: alx741 (~alx741@157.100.197.240)
[18:19:26] <FernandoChu[m]> oops skimmed too fast
[18:19:29] <FernandoChu[m]> thanks
[18:23:20] *** Quits: xff0x (~xff0x@2001:1a81:52c9:2700:23a4:7c27:1274:b7bc) (Ping timeout: 250 seconds)
[18:23:20] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:24:57] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[18:28:19] *** Quits: hueso (~root@user/hueso) (Ping timeout: 256 seconds)
[18:28:25] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[18:29:38] *** Joins: xff0x (~xff0x@2001:1a81:52c9:2700:23a4:7c27:1274:b7bc)
[18:32:48] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[18:34:23] *** Joins: hueso (~root@user/hueso)
[18:39:59] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[18:41:10] *** Joins: alx741 (~alx741@157.100.197.240)
[18:41:50] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[18:42:13] *** Quits: averell (~averell@user/averell) (Remote host closed the connection)
[18:50:55] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:51:53] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:41b:9f3:a75a:9b8b) (Ping timeout: 256 seconds)
[18:53:43] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:41b:9f3:a75a:9b8b)
[18:57:29] *** Joins: xkuru (~xkuru@user/xkuru)
[18:57:51] *** Joins: arievw (~arievw@85.148.234.95)
[18:57:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:00:50] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Quit: WeeChat 3.4)
[19:00:58] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[19:02:21] *** Joins: neurocyte0917090 (~neurocyte@IP-045014189135.dynamic.medianet-world.de)
[19:02:21] *** Quits: neurocyte0917090 (~neurocyte@IP-045014189135.dynamic.medianet-world.de) (Changing host)
[19:02:21] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[19:03:48] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Client Quit)
[19:03:56] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[19:05:06] *** Joins: vysn (~vysn@user/vysn)
[19:07:07] *** Joins: alx741 (~alx741@157.100.197.240)
[19:10:28] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:10:34] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[19:17:54] *** Quits: deadmarshal (~deadmarsh@95.38.113.80) (Ping timeout: 256 seconds)
[19:19:53] *** Joins: deadmarshal (~deadmarsh@95.38.113.80)
[19:22:32] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[19:22:52] *** Joins: coot (~coot@213.134.190.95)
[19:27:43] *** Joins: neurocyte0917090 (~neurocyte@ip-045014189135.dynamic.medianet-world.de)
[19:27:43] *** Quits: neurocyte0917090 (~neurocyte@ip-045014189135.dynamic.medianet-world.de) (Changing host)
[19:27:43] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[19:28:17] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799)
[19:28:44] *** Joins: alx741 (~alx741@157.100.197.240)
[19:30:51] *** Joins: jtomas (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[19:32:06] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[19:32:06] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:32:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799) (Ping timeout: 240 seconds)
[19:39:57] *** justGhost is now known as justAstache
[19:41:36] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[19:41:55] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:43:40] *** Joins: Ariakenom__ (~Ariakenom@2001:9b1:efe:9d00:7c26:4e8e:84e:d7a1)
[19:44:15] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 256 seconds)
[19:46:31] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[19:50:07] *** Joins: alx741 (~alx741@157.100.197.240)
[19:53:47] *** Joins: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[19:53:47] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:57:38] *** Quits: Ariakenom__ (~Ariakenom@2001:9b1:efe:9d00:7c26:4e8e:84e:d7a1) (Ping timeout: 260 seconds)
[20:10:09] *** Joins: alx741 (~alx741@181.199.42.143)
[20:11:05] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[20:12:39] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[20:13:15] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[20:13:55] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:14:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:14:46] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[20:15:12] *** tremon is now known as tremon_
[20:16:42] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 272 seconds)
[20:16:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:17:25] *** Joins: michalz (~michalz@185.246.204.45)
[20:17:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:17:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:17:32] *** Joins: wroathe (~wroathe@user/wroathe)
[20:18:01] *** Joins: sebastiandb (~sebastian@pool-173-79-64-34.washdc.fios.verizon.net)
[20:19:24] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[20:19:48] <sebastiandb> I was having trouble getting ghcid set up, can I ask for help on this channel? I'm pretty much a beginner, and I'm trying to set up an environment to learn Haskell.
[20:20:59] <geekosaur> you can ask in here but I'm not sure anyone who could be helpful is around at the moment; you might want to ask your question and stick around
[20:21:11] <sebastiandb> Makes sense, thanks.
[20:21:55] <sebastiandb> Basically, if I load ghcid without any arguments, it tells me GHCi isn't working properly. "No files loaded, GHCi is not working properly."
[20:22:08] <sebastiandb> Is that meant to be the default behavior?
[20:23:17] <geekosaur> the default is to run ghci directly. if you are using stack or a cabal project, you'll need to tell ghcid to use stack ghci or cabal repl, respectively, because otherwise it won't find its dependencies
[20:24:29] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[20:25:23] <sebastiandb> How can I do that? Do I load something like a .ghci file in my local directory?
[20:26:33] <sebastiandb> Also, I installed it using cabal at first, because for some reason stack wasn't working. And then I installed it with stack. It seems like there isn't any way to uninstall cabal packages, too. Was that something I shouldn't have done?
[20:26:56] <geekosaur> actually it looks like it will use stack ghci or cabal repl by itselfifit finds the appropriate files. hardest is if you just use plain ghci, you'll need to create an appropriate .ghci file at the root of the project
[20:28:19] <sebastiandb> Yeah, it seems to load a cabal repl by default, and then gives that message from earlier. That makes sense, what you're saying.
[20:28:45] <sebastiandb> Specifically, it says this: "GHCi, version 8.10.7: https://www.haskell.org/ghc/  :? for help
[20:28:45] <sebastiandb> Loaded GHCi configuration from /tmp/cabal-repl.-18331/setcwd.ghci
[20:28:45] <sebastiandb> No files loaded, GHCi is not working properly."
[20:29:29] <sebastiandb> Sorry for all the questions, I'm just kind of confused at a a lot of things. It seems to be loading from /tmp/, which is weird.
[20:29:43] <geekosaur> that is just how it configures cabal repl
[20:30:22] <geekosaur> but you said you were using stack? you'll need to pass --command="stack ghci"
[20:30:24] *** Joins: alx741 (~alx741@157.100.197.240)
[20:30:27] <sclv> you have to run it as `ghcid "--command=ghci Main.hs"` or with whatever the command is that you want to pass it that will actually run a repl with the files you want loaded.
[20:30:50] <sclv> so you find the command line invocation that brings up ghci with your files loaded, and then whatever that command line is, you tell it to ghcid when you launch it
[20:30:53] <geekosaur> in general you don't remove packages with either cabal or stack
[20:31:23] <sclv> also ghcid is an executable, so cabal installing it just dropped a binary (or a symlink to a binary) in some directory on your path is all.
[20:33:02] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[20:33:41] <sebastiandb> I see. Yeah, I just passed --command="ghci test.hs" to it. And now it's loaded, and doesn't seem to be responding to any of my commands? Thanks for the info, though. I installed cabal and stack at first because I guess I was confused at which to use? I installed them a while ago.
[20:35:05] <geekosaur> the usual idea is it doesn't
[20:35:37] <geekosaur> it just watches for files to change and restarts ghci automatically, then shuts it down. you're looking for error messages from the attempt to compile
[20:35:59] <geekosaur> if you're looking for an interactive ghci, just run ghci directly
[20:36:35] <sebastiandb> I get it, now. And through this, I use a plugin for my editor or something, and that's how it's meant to be used, then?
[20:36:46] <sebastiandb> Thanks for answering my questions so far
[20:38:44] *** Quits: razetime (~quassel@117.254.35.46) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:39:07] *** Joins: razetime (~quassel@117.254.35.46)
[20:40:21] <geekosaur> this doesn't really need an editor plugin, it does all the work itself. ad it's pretty simplistic. if you want a more traditional IDE setup, there's haskell-language-server which works with a numberof editors and in particular the VS Code Haskell plugin knows how to use it out of the box
[20:41:35] <sebastiandb> I got the sense that haskell-language-server and ghcid covered different things? That's why there's this neovim plugin for it. https://github.com/ndmitchell/ghcid/tree/master/plugins/nvim
[20:42:26] *** Quits: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e) (Ping timeout: 260 seconds)
[20:42:54] <sebastiandb> But now I think I'm getting how it's meant to work. You have a terminal window with ghcid open, and run your editor in a different window, and check ghcid every now and then.
[20:43:02] <geekosaur> yep
[20:43:44] *** Quits: razetime (~quassel@117.254.35.46) (Client Quit)
[20:44:00] *** Joins: razetime (~quassel@117.254.35.46)
[20:44:10] *** Quits: razetime (~quassel@117.254.35.46) (Client Quit)
[20:44:33] *** Joins: razetime (~quassel@117.254.35.46)
[20:45:05] *** Quits: razetime (~quassel@117.254.35.46) (Client Quit)
[20:47:11] <sebastiandb> Thanks for the help! Appreciate it.
[20:50:53] *** Joins: alx741 (~alx741@181.199.42.143)
[20:53:25] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[20:54:19] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[20:54:51] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:682c:7604:30f7:a4ea)
[20:57:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:02:51] *** Quits: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (Remote host closed the connection)
[21:03:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:03:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:03:42] *** Joins: wroathe (~wroathe@user/wroathe)
[21:06:12] *** Joins: travisb (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[21:08:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[21:10:13] *** Joins: alx741 (~alx741@157.100.197.240)
[21:14:07] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:14:53] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:15:45] *** Joins: zebrag (~chris@user/zebrag)
[21:16:57] *** Quits: nabaiste^ (~nabaiste@50.233.120.162) (Ping timeout: 240 seconds)
[21:18:56] *** Parts: sebastiandb (~sebastian@pool-173-79-64-34.washdc.fios.verizon.net) (Leaving)
[21:20:18] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[21:21:24] *** Joins: dspyz (~dspyz@135-180-196-116.fiber.dynamic.sonic.net)
[21:23:28] *** Joins: cheater (~Username@user/cheater)
[21:24:54] *** Quits: zaquest (~notzaques@5.130.79.72) (Ping timeout: 252 seconds)
[21:27:43] *** Joins: zaquest (~notzaques@5.130.79.72)
[21:29:49] *** Joins: nabaiste^ (~nabaiste@50.233.120.162)
[21:30:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799)
[21:31:50] *** Joins: alx741 (~alx741@157.100.197.240)
[21:32:15] *** Joins: dspyz_ (~david@135-180-196-116.fiber.dynamic.sonic.net)
[21:32:22] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:32:42] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[21:32:45] *** Quits: dspyz (~dspyz@135-180-196-116.fiber.dynamic.sonic.net) (Quit: Client closed)
[21:33:01] <dspyz_> Is hp2ps still in use? Or is there a better tool?
[21:34:12] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799) (Ping timeout: 240 seconds)
[21:34:15] <geekosaur> still in use although hp2pretty masy be better for some things
[21:34:50] <dspyz_> When I run without `-M` it cuts off the names with `...`; when I run _with_ `-M`, it just doesn't include the key at all
[21:34:50] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:35:07] <dspyz_> I can't figure out how to see the full key
[21:37:24] <dspyz_> Seems to be true with hp2pretty as well
[21:39:34] <dspyz_> Oh, there's a number. I guess I can cross-reference against the original .hp file
[21:39:37] <dspyz_> Still that's annoying
[21:40:16] <dspyz_> Huh? The `.hp` file _also_ has the names cut off with `...`
[21:41:56] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[21:42:03] <geekosaur> yeh, I was just digging in the release notes because I vaguely recall this being fixed in some ghc release. what version of ghc are you using?
[21:42:43] <dspyz_> 8.10.7
[21:43:07] <dspyz_> (the one on the latest `stackage` lts)
[21:45:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[21:45:38] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:47:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:47:19] *** Joins: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net)
[21:48:36] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[21:49:50] <dspyz_> What tools are there for reading `.prof` files (JSON or normal)?
[21:50:21] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[21:50:26] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 272 seconds)
[21:51:08] <geekosaur> not many. I think the intent is to move to eventlog files, for which there are many tools
[21:51:51] <dspyz_> Well, what do people do for profiling Haskell right now?
[21:52:31] <dspyz_> For that matter, why does the `-pj` option even _exist_ if there are no tools to read the output?
[21:52:57] <dspyz_> Presumably, whoever added that wouldn't have thought to include it unless they intended it to be read by _something_
[21:53:14] *** Joins: alx741 (~alx741@157.100.197.240)
[21:57:12] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:57:56] <geekosaur> -L ⟨num⟩
[21:57:56] <geekosaur> Sets the maximum length of a cost-centre stack name in a heap profile. Defaults to 25.
[21:58:20] <geekosaur> (RTS option)
[21:59:49] *** Quits: arievw (~arievw@85.148.234.95) (Quit: Nettalk6 - www.ntalk.de)
[22:01:46] *** Quits: michalz (~michalz@185.246.204.45) (Ping timeout: 260 seconds)
[22:02:00] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:02:26] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:03:26] <dspyz_> @geekosaur Thanks
[22:03:26] <lambdabot> Unknown command, try @list
[22:04:08] *** Joins: fef (~thedawn@user/thedawn)
[22:04:10] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[22:05:31] * polyphem_ wonders if the lamdabot prefix @ is configurable
[22:05:42] *** polyphem_ is now known as polyphem
[22:06:34] <geekosaur> iirc it is, but only at compile time
[22:07:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[22:07:38] *** Joins: isovector1 (~isovector@172.103.216.166.cable.tpia.cipherkey.com)
[22:08:10] *** Joins: michalz (~michalz@185.246.204.33)
[22:08:14] <isovector1> has anyone used shake in forward mode?
[22:08:26] <isovector1> i'm wondering if i can still use caches and oracles if doing it in forward mode
[22:08:28] <sm> dspyz_: profiterole is a simple one that makes prof files clearer
[22:08:48] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[22:08:54] <sm> there are actually lots of profiling tools. event2html might be a newer one
[22:09:20] *** Joins: Topsi (~Tobias@95.33.25.255)
[22:09:32] <dspyz_> sm, where are you finding these?
[22:10:12] <ski> dspyz_ : IRC custom is to not adorn nicknames with sigils (like `@'), but rather to simply mention the nickname, when referring to, or addressing, someone. in the latter caes, you could mention the nickname, then a colon or a comman, and then the message. most IRC clients will highlight/alert the user if their nickname is mentioned, first thing, in a message. not as many will do that, if the nickname occurs 
[22:10:15] <sm> hackage search, web search, past announcements, ghc user guide  chapter on performance
[22:10:18] <ski> later in a message
[22:10:51] <ski> (prefixing with `@' causes the nickname to not be the first thing. besides, `@' already means something else on IRC (channel operator))
[22:11:28] <dspyz_> Thanks ski
[22:11:29] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:12:27] <dspyz_> sm I was looking at the ghc user guide chapter on performance and didn't see any mentioned. I don't know what to search to get results; everything keeps taking me back to old versions of the GHC user guide
[22:12:46] <dspyz_> (which mentions only `hp2ps`)
[22:14:01] <sm> dspyz_: i think there's no only complete list. I'd check the haskell wiki too
[22:14:12] <sm> no one complete list
[22:15:46] *** Joins: alx741 (~alx741@157.100.197.240)
[22:16:36] *** Quits: jtomas (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Ping timeout: 240 seconds)
[22:19:26] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[22:19:48] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:21:01] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[22:21:16] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:21:59] *** Joins: econo (uid147250@user/econo)
[22:22:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[22:23:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:25:04] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[22:25:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:25:37] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-b0ed-1a92-719b-f6c2.res6.spectrum.com) (Ping timeout: 240 seconds)
[22:25:46] *** s5smong is now known as s4msung
[22:26:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[22:29:32] *** Joins: wroathe (~wroathe@user/wroathe)
[22:31:37] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[22:32:02] *** Quits: isovector1 (~isovector@172.103.216.166.cable.tpia.cipherkey.com) (Quit: Leaving)
[22:36:11] *** Quits: mcglk (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[22:39:08] *** Quits: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net) (Remote host closed the connection)
[22:39:13] *** Joins: mcglk (~mcglk@131.191.49.120)
[22:39:26] *** Joins: alx741 (~alx741@157.100.197.240)
[22:40:49] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[22:41:07] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b)
[22:41:38] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b) (Remote host closed the connection)
[22:42:53] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:48:40] *** Parts: dspyz_ (~david@135-180-196-116.fiber.dynamic.sonic.net) (Leaving)
[22:51:24] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:51:29] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[22:57:24] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[22:59:27] *** Joins: alx741 (~alx741@157.100.197.240)
[23:01:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[23:02:36] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:02:59] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[23:03:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:03:47] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[23:09:15] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:09:15] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:09:15] *** Joins: wroathe (~wroathe@user/wroathe)
[23:11:36] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::99e7) (Quit: Going elsewhere)
[23:12:34] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::99e7)
[23:12:58] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:13:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[23:14:12] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:14:13] *** Lord_of_Life_ is now known as Lord_of_Life
[23:16:21] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[23:17:38] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799)
[23:18:00] *** Quits: xff0x (~xff0x@2001:1a81:52c9:2700:23a4:7c27:1274:b7bc) (Ping timeout: 250 seconds)
[23:18:14] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::99e7) (Quit: Going elsewhere)
[23:18:30] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:682c:7604:30f7:a4ea) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:18:50] *** Joins: xff0x (~xff0x@2001:1a81:52c9:2700:c4c8:f455:66db:3020)
[23:19:23] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::99e7)
[23:19:28] *** Joins: alx741 (~alx741@157.100.197.240)
[23:19:41] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:21:05] *** Joins: notzmv (~zmv@user/notzmv)
[23:21:51] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:25:23] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::99e7) (Quit: Going elsewhere)
[23:25:56] *** Quits: fendor_ (~fendor@178.165.200.21.wireless.dyn.drei.com) (Remote host closed the connection)
[23:27:23] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::99e7)
[23:27:24] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 240 seconds)
[23:30:43] *** Quits: juhp (~juhp@128.106.188.82) (Remote host closed the connection)
[23:36:40] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:33] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:682c:7604:30f7:a4ea)
[23:39:57] *** Joins: alx741 (~alx741@157.100.197.240)
[23:42:32] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:43:25] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:44:35] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[23:48:12] <Athas> Is there a way to run Haddock on a single module?  It takes a long time to run on my entire program, and I'm just writing some (long-form) documentation in one module at the moment.
[23:49:54] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[23:51:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[23:52:35] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[23:52:50] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[23:53:45] *** Quits: nabaiste^ (~nabaiste@50.233.120.162) (Remote host closed the connection)
[23:54:11] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[23:54:24] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[23:55:16] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[23:58:31] *** Quits: cosimone (~user@93-47-228-207.ip115.fastwebnet.it) (Remote host closed the connection)
[23:59:59] *** Joins: alx741 (~alx741@157.100.197.240)
