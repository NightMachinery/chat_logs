[00:01:31] *** Joins: alx741 (~alx741@157.100.93.160)
[00:03:05] *** Quits: darkstarx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[00:05:57] *** Joins: darkstarx (~darkstard@50.39.115.145)
[00:06:53] *** Quits: darkstarx (~darkstard@50.39.115.145) (Remote host closed the connection)
[00:07:18] *** Joins: darkstarx (~darkstard@50.39.115.145)
[00:08:08] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[00:10:36] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19) (Quit: gone to sleep. ZZZzzz…)
[00:15:03] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[00:18:03] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e2134fbc39073c29133.dip0.t-ipconnect.de)
[00:18:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:18:59] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:22:24] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[00:24:59] *** Joins: farmfrmjakestate (~farmfromj@user/farmfrmjakestate)
[00:25:16] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:e582:2d42:b0b2:720b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:27:12] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[00:27:52] *** Quits: farmfrmjakestate (~farmfromj@user/farmfrmjakestate) (Client Quit)
[00:30:12] *** Joins: namkeleser (~namkelese@101.179.128.103)
[00:30:46] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[00:32:08] *** Quits: smartin (~Thunderbi@88.135.18.171) (Read error: Connection reset by peer)
[00:32:30] *** Joins: smartin (~Thunderbi@88.135.18.171)
[00:33:01] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:34:48] *** Joins: pavonia (~user@user/siracusa)
[00:42:51] *** Joins: Feuermagier_ (~Feuermagi@138.199.36.189)
[00:44:44] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:45:13] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 252 seconds)
[00:45:28] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:45:50] *** Quits: michalz (~michalz@185.246.204.61) (Remote host closed the connection)
[00:46:21] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:21fa:58d6:189b:bd7a)
[00:47:18] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[00:47:39] *** Quits: Feuermagier_ (~Feuermagi@138.199.36.189) (Ping timeout: 268 seconds)
[00:50:54] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:52:14] *** Quits: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4) (Quit: Leaving)
[00:52:44] *** Joins: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com)
[00:53:23] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[00:54:02] *** Quits: shailangsa (~shailangs@host86-161-220-126.range86-161.btcentralplus.com) (Ping timeout: 256 seconds)
[00:55:04] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:21fa:58d6:189b:bd7a) (Ping timeout: 268 seconds)
[00:55:40] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[00:57:09] *** Joins: earendel (uid498179@user/earendel)
[00:58:06] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[00:58:46] <maplike> can someone give or point to a simple yet illustrative example (_other than factorial_) showing the path starting from corecursion/recursion, to the ana/cata version and then using hylo?
[00:59:12] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[01:00:10] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:01:19] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[01:01:31] *** Joins: vicfred (~vicfred@user/vicfred)
[01:02:06] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:e582:2d42:b0b2:720b)
[01:04:44] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[01:06:26] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[01:07:13] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[01:07:14] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[01:07:24] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[01:10:12] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[01:10:26] *** Quits: Topsi1 (~Tobias@dyndsl-095-033-094-234.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[01:12:17] <sshine> maplike, I implemented an anamorphism in C# once: https://stackoverflow.com/questions/30844688/what-is-an-anamorphism-and-how-does-one-look-like-in-c/30857439#30857439 -- there are two examples, one being the collatz tree from XKCD, and the other being a family tree.
[01:12:32] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[01:12:58] *** Quits: xff0x (~xff0x@2001:1a81:537e:3f00:6b1a:2a67:475e:9b5f) (Ping timeout: 260 seconds)
[01:13:38] *** Joins: xff0x (~xff0x@2001:1a81:537e:3f00:56c7:e8a2:3a14:4d05)
[01:14:47] <sshine> I think I even called the accumulating function over trees "water" :-P
[01:16:21] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19)
[01:17:44] *** Joins: zardoz (~bc8147f2@cerf.good1.com)
[01:17:59] <maplike> sshine, that looks interesting thank you!
[01:18:28] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:18:56] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:19:03] <maplike> I was think more of "here's how to implement somethinf (not factorial!, but equally short) using recursion, here it is with ana and cata, and then a hylo verion 1-liner
[01:19:06] <sshine> maplike, hmm, for hylo... I guess the wikipedia article suggests that fib(n) is a tree-isomorphic hylo. but maybe there are more involved examples.
[01:19:18] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[01:21:28] <maplike> ... in Haskell, rather than how to implement ana and cata, or what they mean. fib(n) as tree-isomorphic hylo might be a good one to try
[01:21:33] <sshine> https://hackage.haskell.org/package/pointless-haskell-0.0.9/docs/Generics-Pointless-Examples-Examples.html :P
[01:21:35] *** Quits: smartin (~Thunderbi@88.135.18.171) (Ping timeout: 268 seconds)
[01:22:24] <maplike> OK< that has fibHylo
[01:22:47] <sshine> well... some of those seem a little hard to read.
[01:23:31] <maplike> the perl bits?
[01:23:34] <sshine> maplike, the idea, as far as I understand, is that the trivial fib(n) = fib(n-1) + fib(n-2) implementation *is* a hylomorphism.
[01:24:16] <sshine> maplike, because the call tree becomes the tree data structure that the anamorphism part would construct, and the catamorphism then destroys by traversal.
[01:24:23] <maplike> seems more like 2 anas
[01:24:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[01:24:46] <sshine> maplike, nah, building a tree is unfolding, reducing the tree to a single number is folding.
[01:25:03] <maplike> yes, if you think in terms of trees, I see that
[01:25:23] <maerwald[m]> fibPF = (zero \/ (one \/ add)) . (bang -|- (bang -|- fibPF >< fibPF)) . (id -|- aux) . ((==0)?)
[01:25:39] <maerwald[m]> F... off? :)
[01:25:42] <sshine> but then the more efficient fib(n) that remembers the last two steps, is instead a hylomorphism for which the call tree is isomorphic to lists.
[01:25:54] <sshine> maerwald[m], that's how you code Haskall, right?
[01:26:14] <maerwald[m]> That's how you commit a crime
[01:26:47] <maplike> but at least you _can_ do it :D
[01:27:28] <maplike> sshine, that is the sort of insight and intuition I'm after
[01:27:45] <maplike> it even sort of makes sense
[01:28:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:28:41] <maerwald[m]> That's why haskell is nr. 2 on most disliked functional languages :p
[01:30:39] <sshine> maplike, one sec, I think I have an example of something.
[01:30:54] <maplike> still here
[01:31:18] <monochrom> Now I"m curious. Which are the other most disliked languages? For example nr.1 and nr.3?
[01:31:26] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[01:31:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:32:25] <sshine> monochrom, it's not actually true (according to StackOverflow's survey). probably because not enough people actually use it and come to dislike it.
[01:32:29] <sshine> https://appetiser.com.au/blog/the-most-loved-and-hated-programming-languages-according-to-developers/#The%20Most%20Disliked%20Programming%20Languages
[01:32:48] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:33:04] <sshine> 1. VBA, 2. Objective-C, 3. Assembly, 4. C, 5. PHP, 6. Erlang, 7. Ruby, 8. R, 9. C++, 10. Java.
[01:33:30] <monochrom> Ah thanks. Haha but what about "bad press is still better than no press"? >:)
[01:33:43] <sshine> I just don't get why anyone would hate on Erlang. I mean, how many people accidentally stumble into an Erlang job and feel forced to stay? I totally get why people would hate PHP because it's sort of the mud from which so many of us are born.
[01:34:06] <monochrom> VBA is very disliked but at least everyone still has to brag/lie "I know VBA" on their CVs.
[01:34:09] *** Joins: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com)
[01:34:40] <monochrom> Whereas no one bothers to lie "I know Haskell".
[01:34:44] <sshine> I'd like about knowing VBA if I knew VBA. but at this point I'd just refuse to even confirm or deny.
[01:35:37] <sshine> lying about knowing Haskell is probably among the bloopers out there. like lying about speaking Chinese, and then your interviewer speaks fluent Chinese. (that happened to me, and I was only 6 months in, haha.)
[01:36:07] <monochrom> Yeah Erlang being up there is weird.
[01:36:50] <maplike> I thought everybody loved Ruby when it first came out
[01:36:50] <sshine> yeah. for Erlang, I feel like dislike is more like discomfort... knowing you have an awesome VM with a deprecated syntax, I'd feel more sorry than dislike. and probably enjoy it more than most other languages.
[01:37:12] <sshine> maplike, Ruby is Perl.
[01:38:54] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[01:39:13] *** Quits: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[01:39:26] <monochrom> I don't think factorial fibonacci etc are good ways to learn catamorphism and anamorphism.
[01:39:37] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:39:41] <monochrom> Instead, initial algebras and final coalgebras.
[01:39:59] <sshine> maplike, so... I guess you could take any greedy algorithm implemented as a recursive function and regard it as a hylomorphism. e.g. the coin change problem.
[01:40:16] <earendel> no zebras?
[01:40:27] <sshine> cozebras
[01:40:45] <monochrom> Good examples of initial algebras are ADTs like "data IntList = Nil | Cons Int IntList" and "data IntTree = Leaf Int | Branch IntTree IntTree".
[01:41:10] <zardoz> heh, every single time I join (and that is rare), maerwald craps on haskell. he'd be banned in a different channel 1000 times already
[01:41:54] <geekosaur> thing is, maerwald maintains the primary way of *getting* haskell
[01:42:08] <monochrom> Unfortunately, or fortunately, he gave us ghcup. He has more than earned his stay.
[01:43:09] <geekosaur> also he's not the only one who thinks pointfree is fairly ugly
[01:43:26] <zardoz> as if that is the only thing he complains about
[01:44:08] <zardoz> monochrom, so if he didn't write that, he'd be banned?
[01:44:22] <maplike> sshine: what's the simplest example?
[01:44:39] <monochrom> Maybe after more incidents.
[01:44:40] <earendel> that fibonacci examples where meant as a joke. 
[01:44:45] <geekosaur> he's also not the only one who thinks laziness by default has problems. he's provided examples of that
[01:44:49] <maplike> in terms of the unfold part
[01:45:55] <lbseale> I know VBA but I wouldn't want to put it on my resume, I don't want anyone asking me to write anything in it
[01:45:57] <earendel> like lazyloading?
[01:45:58] <sshine> maplike, the simplest example of what?
[01:46:47] <earendel> i knew if conversation nevers stops its on haskell
[01:46:55] <earendel> :p
[01:46:59] <sshine> maplike, https://rosettacode.org/wiki/Count_the_coins#Haskell -- here's a function that generates a tree-like call-stack. you could build it as an anamorphism that generates the tree, and a catamorphism that collapses it.
[01:47:17] <maplike> so, if we have a recursive solution based on a greedy algorithm,
[01:47:25] <earendel> a tree-like stack? who would want that?!
[01:47:42] <sshine> earendel, someone looking for an example of a non-trivial hylomorphism? :-P
[01:48:29] <maplike> that's a good example for my purposes
[01:48:30] <earendel> sshine: i would need a trivial one. for starters. also ana/cata
[01:48:41] <earendel> and cozebra
[01:49:54] <monochrom> A singly linked list is a very degenerate tree.
[01:50:32] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[01:50:39] <sshine> but is it retarded?
[01:50:48] <earendel> but stack is 1 dimension .. push and pop.. no?
[01:50:58] <maplike> fyi https://stackoverflow.com/a/69651010
[01:53:45] <sshine> maplike, ah yes. so this is for counting the number of distinct ways to give change. the related problem was finding a solution that involved the fewest coins.
[01:54:18] <sshine> where does the Algebra type constructor come from?
[01:54:38] <monochrom> Scrolling dow you'll find "type Algebra f a = f a -> a"
[01:54:47] <sshine> oh, they're just type aliases. thanks.
[01:54:54] <maplike> line 6
[01:55:04] <monochrom> Or scrolling up, I forgot.
[01:55:55] <sshine> maplike, the example might be a little confusing with the use of type aliases and arrow operators.
[01:56:51] <maplike> everybody pretends they don't use Arrows, but they seem to appear quite often.The VBS of abstractions?!
[01:56:55] <maplike> *VBA
[01:57:00] <monochrom> hee hee
[01:57:11] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[01:57:59] <hpc> Arrow is to bash as Category is to sh
[01:58:13] <hpc> "this script is definitely posix"
[01:58:38] <hpc> if it didn't have arr it would be a great type class
[01:58:39] <monochrom> Technicality: >>> and <<< no longer require Arrow. They are from Category now.
[01:58:40] <geekosaur> I think the most commonly used parts are >>> <<< (reframings of composition) and first, second are just tuple twiddling
[01:58:43] *** Quits: beka (~beka@104.193.170.240) (Ping timeout: 250 seconds)
[01:59:27] <monochrom> In this case, <<< is (.), >>> is flip(.). THE END.
[01:59:35] <maplike> I ended up using `&&&` last time I came here :D
[01:59:56] <geekosaur> % :t (&&&) @(->)
[01:59:57] <yahb> geekosaur: (b -> c) -> (b -> c') -> b -> (c, c')
[02:00:07] <geekosaur> more tuple twiddling :)
[02:00:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:00:28] <maplike> here as in freenode :)
[02:00:34] <geekosaur> I mostly avoid tuples so have little use for most of Arrow
[02:00:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:00:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:00:51] *** Joins: lagash (lagash@lagash.shelltalk.net)
[02:01:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:01:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:01:10] <sshine> I only ever use arrow operators for tuples :P for functions I suppose the most sophisticated I do is applicative.
[02:01:10] *** Quits: max22- (~maxime@2a01cb0883359800b0bf91f12c0fefae.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:01:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:01:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:01:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:01:52] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:02:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:02:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:02:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:02:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:02:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:03:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:03:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:03:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:03:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:03:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:04:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:04:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:04:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:04:29] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:04:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[02:04:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:04:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:05:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:05:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:05:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:05:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:05:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:05:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:06:10] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[02:06:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:06:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:06:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:06:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:06:56] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:07:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:07:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:07:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:07:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:07:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:08:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:08:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:08:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:08:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:08:32] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[02:08:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:08:52] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Quit: Leaving)
[02:08:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:09:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:09:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:09:27] <maerwald[m]> sshine: wrong link
[02:09:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:09:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:09:40] *** ChanServ sets mode: +o geekosaur
[02:09:43] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:09:50] *** geekosaur sets mode: +b lavaman!*@*
[02:09:52] <maerwald[m]> https://scalac.io/ranking/functional-programming-languages-sentiment-ranking/
[02:10:17] *** geekosaur sets mode: -o geekosaur
[02:10:26] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[02:10:32] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[02:10:42] <sshine> maerwald[m], makes sense! Haskell wouldn't be hated based on popularity, because people don't get pressured into using it.
[02:11:05] <maerwald[m]> Only purescript ranks worse. My hunch is that the reason is that both haskell and purescript constantly break stuff
[02:12:00] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:2cc0:59c:7081:31f2)
[02:13:08] <sshine> ...and that they're actually languages people come into contact with.
[02:13:49] <sshine> who has anything bad to say about Idris? that's like saying something about the cryptocurrency you bought for Ethereum that you traded for Bitcoin... at that point, you only have yourself to blame if things don't work out. :-D
[02:14:14] <perro> it was called mazacoin and it's still a sore spot for some poeple
[02:14:36] <perro> are the differences significant?
[02:15:21] <monochrom> People can still hate something they themselves chose.
[02:15:55] <sshine> I think what's interesting about the "most negative" scale is actually the least negative ones: Kotlin, Elm, Elixir. they're significantly lower than all the others at >~10%.
[02:18:10] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[02:18:31] <monochrom> In the case of Haskell I would attribute to tooling.
[02:19:18] <sshine> and learning curve
[02:19:25] <monochrom> To be sure, none of us has data to support or refute any guess :)
[02:19:52] <sshine> I happen to have divine insight, but I can't prove it.
[02:20:10] <monochrom> I think of learning curve as a minor factor because, like, PHP and Python are not in the scope of the comparison, but OCaml is.
[02:20:34] <perro> soemthing like elm goes out of its way to be easy
[02:20:41] <dolio> Who was answering the poll?
[02:20:48] <perro> elixir does a similar job, and people are probablye xposed to it via phoenix which is very on the rails
[02:21:03] <sshine> dolio, it's based on analysing how people mention the languages, I think.
[02:21:04] <monochrom> Although, if you mean "learning curve for when to leverage or kill laziness" then yeah, but then I can still smugly blame it on profiling tools :)
[02:21:05] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[02:21:15] <dolio> What people?
[02:21:15] <sshine> dolio, so something like scanning social media, I guess?
[02:22:05] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:22:23] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 252 seconds)
[02:22:37] <monochrom> I think the page describes the methodology, but I didn't read it.
[02:23:12] <monochrom> And yeah I should go back to my Giry monad study instead of slashdotting this :)
[02:23:23] <maerwald[m]> 10% hate factor for clojure seems to be a methodology error
[02:23:27] <maerwald[m]> I don't but it
[02:23:34] <sshine> monochrom, right :) also, negative incentive towards Haskell (13.90%) vs. Rust (12.16%) is pretty close. having recently started to use Rust, I would have to say that being compared with that onboarding experience isn't bad at all.
[02:23:36] <maerwald[m]> It should be 80%
[02:24:01] <monochrom> Oh, I happen to know what I would hate about Rust. :)
[02:24:05] <maerwald[m]> Even clojure experts hate it
[02:24:37] <earendel> why would you be interested in such trivia?
[02:24:48] <maerwald[m]> Rust has better tooling, but nightly also constantly breaks stuff
[02:24:50] <sshine> maerwald[m], maybe the people who hate clojure are too ironic for their ranking algorithm to pick up.
[02:25:04] <ystael> I used to be a clojure expert kinda ... the things I hated about it weren't its fault, they were its nature, so my fault for using it
[02:25:04] *** ChanServ sets mode: +o litharge
[02:25:05] *** litharge sets mode: -bo lavaman!*@* litharge
[02:25:08] <maerwald[m]> I believe breaking changes is the primary factor for hate
[02:25:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:25:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:25:31] <maerwald[m]> Clojure doesn't bresk anything. There's no such thing as API in clojure 
[02:25:35] <geekosaur> sigh
[02:25:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:25:45] *** ChanServ sets mode: +o geekosaur
[02:25:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:25:59] <earendel> second to being badly or never fucked at all?
[02:26:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:26:03] *** geekosaur sets mode: +b *!*@98.38.249.169
[02:26:04] <monochrom> Rust's borrow system is great for mundane industrial code, but I happened to choose a bad way to learn and practice Rust. I tried "let me code up a Haskellish recursive ADT in Rust". That didn't end well. It did give me much insight heh.
[02:26:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:26:24] *** geekosaur sets mode: -o geekosaur
[02:26:31] <perro> I get pretty far along in an applicaiton swith rust and realized how much time I'd spent doing trivial shit
[02:26:33] <maerwald[m]> You can though
[02:27:09] <perro> it's hard to get a feel for how something like lifetimes work iwithin a codebase without doing it
[02:27:33] <maerwald[m]> RefCell everything 
[02:27:53] <maerwald[m]> I'm only half joking 
[02:28:28] <earendel> i don't know.. better than having unchecked memcpy in openssh source in 2021 
[02:29:33] <earendel> .. also please don't act as if you were afraid of rust being a gamechanger. 
[02:29:49] <sshine> afraid?
[02:29:53] <maerwald[m]> Yes, one has to remember that "memory safety" in rust doesn't mean "your program never crashes", but "your program crashes safely... woll, unless. .."
[02:30:26] <maerwald[m]> Unless you use C libraries or unsafe code
[02:31:14] <sshine> do Haskell programs crash safely if you use C libraries or unsafe code? :)
[02:31:33] <earendel> maewald: everyone does. you don't?
[02:31:33] *** Quits: jkaye (~jkaye@2601:281:8300:7530:bc2d:ca62:1f76:4faa) (Ping timeout: 252 seconds)
[02:31:48] <sshine> I log in as root.
[02:32:12] <monochrom> Does Coq crash if you use C libraries...
[02:32:16] <maerwald[m]> Haskell may not even crash if you have memory unsoundness
[02:32:29] <sshine> monochrom, not if it fails to compile, which it always does. -_-
[02:32:37] <monochrom> heh
[02:33:39] <earendel> rust could at best spare like 2/3 of the usual vulnerability .. ppl say. which is a lot of course.
[02:34:26] *** Joins: slice (~slice@user/slice)
[02:34:54] <sshine> also, throw more type errors to scare careless programmers away. :-D
[02:35:30] *** Joins: Minnozz (~minnozz@salix.minnozz.com)
[02:35:40] <maerwald[m]> Yeah, GHC shames bad programmers into giving up their career
[02:35:52] <earendel> those ppl should continue writing fibonacci recursions, not security relevant code.
[02:36:12] * sshine realises he's not far from writing fibonacci recursions this evening.
[02:36:19] <monochrom> The benefit of Rust I appreciate the most is bringing properly done sum types to the C, C++, Go communities.
[02:36:20] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:36:30] <perro> si\
[02:36:33] <sshine> monochrom, and type inference?
[02:36:58] <maerwald[m]> Go devs are still debating benefits of proper sum types
[02:37:03] <maerwald[m]> It's funny
[02:37:05] <monochrom> That's the 2nd or 3rd on my tier list.
[02:37:28] <monochrom> But my tier list is based on what I care, not necessarily what the world really needs.
[02:37:32] <maerwald[m]> It's like they're still in the 90s
[02:37:38] *** Joins: alx741 (~alx741@157.100.93.160)
[02:37:53] <monochrom> My tier list may be like: 1. sum types; 2. the borrow system; 3. type inference
[02:38:02] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:3700:12c3:7bff:fe6d:d374) (Ping timeout: 240 seconds)
[02:38:53] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 252 seconds)
[02:38:58] <monochrom> Sum types prevent even more bugs than the borrow system, IMO.
[02:39:16] <maerwald[m]> monochrom: I also care more about sum types than I do about functional or lazy
[02:39:29] <maerwald[m]> The best features are the simple ones you can steal
[02:39:30] <earendel> that borrow system isn't something anybody waited for i guess. it definitely is more work for the dev. 
[02:39:33] <monochrom> "I forgot to check whether lookup() returns null" Solved by sum types.
[02:40:10] <maerwald[m]> earendel: the alternative is a proof assistant for memory soundness
[02:40:18] <maerwald[m]> Even more complicated 
[02:40:46] <earendel> i see.
[02:40:53] <maerwald[m]> The borrow system has very simple rules
[02:41:01] <maerwald[m]> They sometimes make little sense
[02:41:02] <earendel> sounds good.
[02:41:06] <maerwald[m]> But that's irrelevant 
[02:41:19] <monochrom> "the packet I received is one of 3 cases and I messed up which case is which" Solved by sum types.
[02:41:53] <maerwald[m]> The borrow checker in fact rejects a lot of sound programs
[02:41:58] *** Joins: jeetelongname (~jeet@eduroam-public-20.nat.port.ac.uk)
[02:42:09] <maerwald[m]> The trade off is pragmatic 
[02:42:09] <dolio> That happens with every checker.
[02:42:40] <monochrom> "my function should be partial but I don't bother to announce it because I don't know what to return" Solved by sum types.
[02:43:33] <maerwald[m]> Now let's talk about open sum types...still great?
[02:43:37] *** Joins: notzmv (~zmv@user/notzmv)
[02:43:45] <maerwald[m]> I can't decide
[02:44:18] <monochrom> "my function can fail for one of 3 reasons, how do I tell the caller which reason it is?" Solved by sum types.
[02:44:41] <monochrom> aka "C's errno is a disaster" Solved by sum types.
[02:44:51] <earendel> nan
[02:45:03] <earendel> look at your nan.
[02:45:12] <maerwald[m]> Well... now you have the problem of having 100 sum types across your application. ..
[02:45:20] <maerwald[m]> Or one that covers everything 
[02:45:27] <maerwald[m]> Both are awful 
[02:45:31] <monochrom> batman = repeat (sqrt (-1))  >:)
[02:45:55] <maerwald[m]> This is solved by open sum types...
[02:46:03] <geekosaur> NoN would be solvable if we didnb't need floating point compatibility with everything else
[02:46:05] <maerwald[m]> But they're very unergonomic 
[02:46:15] <earendel> i thought the sum of integers would best be integer as well.
[02:46:31] <earendel> same for vectors. 
[02:46:55] <earendel> and x should be forever set as 3.
[02:47:38] <monochrom> OK, parametric polymorphism should also be on my tier list, I forgot. Not sure where to put it relative to the other 3. All of them are great!
[02:48:28] <monochrom> Maybe higher than type inference because C's "use void* for generics" gets old really fast.
[02:48:39] *** Joins: beka (~beka@104-244-24-117.PUBLIC.monkeybrains.net)
[02:49:32] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e2134fbc39073c29133.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[02:49:39] <monochrom> In retrospect, I think I rate "a language construct that enables you to finally say directly what you really mean" higher than "one more safety mechanism".
[02:49:43] <earendel> ok. static typing is not entirely new, conceptually. 
[02:50:24] <monochrom> because if you say directly what you really mean, that already eliminates a lot of bugs, misunderstandings, forgetfulness.
[02:50:49] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[02:52:11] <earendel> if you're coding software which primary goals are maintability and reliability (with a longer lifecycle) you would definitely prefer some typing over rapid dev features or when programming for performance. 
[02:52:58] <maerwald[m]> Maintainability and reliability are kinda conflicting goals
[02:53:12] <earendel> as john carmack says; there's a power to the dark side.
[02:53:32] *** Quits: maplike (~maplike@31.209.100.216) (Ping timeout: 256 seconds)
[02:55:46] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[02:56:10] *** Joins: jakalx (~jakalx@base.jakalx.net)
[02:57:23] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:59:22] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:00:01] *** Joins: neverfindme (~hayden@72.92.246.5)
[03:00:09] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 252 seconds)
[03:00:52] *** Quits: neverfindme (~hayden@72.92.246.5) (Remote host closed the connection)
[03:01:37] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:10:45] *** Joins: zebrag (~chris@user/zebrag)
[03:14:23] <sm> oh, replace-megaparsec looks great. Check this out: https://github.com/jamesdbrock/replace-megaparsec#in-the-shell
[03:14:29] *** Quits: ubert (~Thunderbi@p548c998b.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:14:53] <sm> how do you figure, maerwald ?
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[03:17:38] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[03:18:58] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:2cc0:59c:7081:31f2) (Ping timeout: 260 seconds)
[03:22:53] <sm> a new haskell shell attempt: https://www.reddit.com/r/haskell/comments/rdinq2/using_haskell_as_my_shell/
[03:23:06] <EvanR> wait, static types are the dark side? cool
[03:25:11] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[03:25:28] *** Joins: namkeleser (~namkelese@101.179.128.103)
[03:26:13] *** ChanServ sets mode: +o litharge
[03:26:15] *** litharge sets mode: -bo *!*@98.38.249.169 litharge
[03:28:14] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:28:35] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[03:30:19] *** Joins: jinsun (~quassel@user/jinsun)
[03:34:27] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:2cc0:59c:7081:31f2)
[03:35:04] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:e582:2d42:b0b2:720b) (Quit: Textual IRC Client: www.textualapp.com)
[03:39:03] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[03:39:23] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:2cc0:59c:7081:31f2) (Ping timeout: 252 seconds)
[03:39:40] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:b4f0:1f02:af2:a840)
[03:40:37] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c) (Ping timeout: 240 seconds)
[03:40:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:43:47] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:b4f0:1f02:af2:a840) (Ping timeout: 252 seconds)
[03:45:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[03:45:36] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:48:17] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[03:55:15] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[03:55:33] *** Joins: namkeleser (~namkelese@101.179.128.103)
[03:55:43] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[03:58:29] *** Joins: curiousgay_ (~AdminUser@77-120-141-90.kha.volia.net)
[03:58:39] *** Joins: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com)
[04:00:30] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 260 seconds)
[04:01:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:02:55] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[04:04:02] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[04:05:03] *** Quits: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com) (Ping timeout: 252 seconds)
[04:07:03] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[04:07:46] *** Quits: curiousgay_ (~AdminUser@77-120-141-90.kha.volia.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:07:51] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[04:08:07] *** Joins: curiousgay (~AdminUser@77-120-141-90.kha.volia.net)
[04:14:08] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[04:18:05] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[04:24:19] *** Quits: beka (~beka@104-244-24-117.PUBLIC.monkeybrains.net) (Ping timeout: 250 seconds)
[04:24:39] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[04:24:49] *** Joins: nf (~n@monade.li)
[04:27:02] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[04:28:54] *** Quits: emf (~emf@2620:10d:c091:480::1:a9a4) (Read error: Connection reset by peer)
[04:28:58] <bitmapper> why does `x ~ y => Member x (y : xs)` work where `Member x (x : xs)` doesnt
[04:29:47] *** Joins: namkeleser (~namkelese@101.179.128.103)
[04:33:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:34:07] *** Joins: emf (~emf@cpe-174-109-36-85.nc.res.rr.com)
[04:35:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[04:37:17] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:2027:d60b:7498:6b04)
[04:37:41] *** Quits: emf (~emf@cpe-174-109-36-85.nc.res.rr.com) (Client Quit)
[04:38:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[04:38:35] *** Joins: emf (~emf@cpe-174-109-36-85.nc.res.rr.com)
[04:38:55] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 268 seconds)
[04:39:44] *** Quits: emf (~emf@cpe-174-109-36-85.nc.res.rr.com) (Client Quit)
[04:40:31] *** Joins: emf (~emf@cpe-174-109-36-85.nc.res.rr.com)
[04:42:05] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:2027:d60b:7498:6b04) (Ping timeout: 252 seconds)
[04:43:07] <EvanR> I think in an instance head you can't repeat variables
[04:43:08] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[04:48:19] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 252 seconds)
[04:51:12] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[04:51:14] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 268 seconds)
[04:53:20] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:56:07] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:56:08] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:56:08] *** Joins: wroathe (~wroathe@user/wroathe)
[05:00:48] <glguy> bitmapper: They behave differently; you can do both , each with the right extensions enabled
[05:01:09] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 252 seconds)
[05:01:20] <glguy> The first one ways if (y : xs) matches, then we know x must equal y
[05:01:41] <glguy> but the second instance won't be used unless GHC already knows that the first x equals the second x
[05:02:34] <bitmapper> so how do i do the second?
[05:05:38] *** Quits: curiousgay (~AdminUser@77-120-141-90.kha.volia.net) (Ping timeout: 256 seconds)
[05:06:09] *** Quits: xff0x (~xff0x@2001:1a81:537e:3f00:56c7:e8a2:3a14:4d05) (Ping timeout: 250 seconds)
[05:06:51] *** Joins: xff0x (~xff0x@2001:1a81:537e:3f00:f824:6e83:7767:59ad)
[05:09:48] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[05:12:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:12:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:12:20] *** Joins: wroathe (~wroathe@user/wroathe)
[05:21:54] *** Joins: beka (~beka@104-244-24-117.PUBLIC.monkeybrains.net)
[05:23:44] <EvanR> did I imagine this or was there a multiuser programming environment for haskell that produced graphics
[05:24:39] <sm> multiuser.. like code.world ?
[05:24:42] <sm> or a VR thing ?
[05:26:08] <EvanR> code.world
[05:27:22] <EvanR> wow that was real
[05:30:11] <EvanR> I smell AoC visualizations coming up
[05:35:38] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19) (Quit: gone to sleep. ZZZzzz…)
[05:37:40] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:6cde:a18f:2d26:aae0)
[05:38:30] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[05:38:43] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 268 seconds)
[05:39:17] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[05:40:01] *** Quits: xff0x (~xff0x@2001:1a81:537e:3f00:f824:6e83:7767:59ad) (Ping timeout: 252 seconds)
[05:42:01] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[05:42:03] *** Joins: xff0x (~xff0x@2001:1a81:53c2:9a00:db12:87f1:cb29:dabf)
[05:42:42] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:6cde:a18f:2d26:aae0) (Ping timeout: 260 seconds)
[05:45:55] <jeetelongname> Oh yeah I have been meaning to do one of those 
[05:46:07] <jeetelongname> (tho in racket so take that as you will)
[05:46:37] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:49:38] <sm> code.world/haskell is the real haskell variant
[05:51:32] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[05:57:55] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19)
[06:11:18] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[06:11:54] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:6cde:a18f:2d26:aae0)
[06:13:15] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[06:15:35] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 252 seconds)
[06:16:07] *** Quits: mmhat (~mmh@55d44db9.access.ecotel.net) (Ping timeout: 250 seconds)
[06:16:29] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:17:44] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:17:55] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[06:19:31] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[06:29:41] *** Joins: mmhat (~mmh@55d45c6c.access.ecotel.net)
[06:31:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:34:50] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:6cde:a18f:2d26:aae0) (Ping timeout: 268 seconds)
[06:37:41] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[06:39:23] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[06:44:05] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 268 seconds)
[06:44:11] *** Quits: zardoz (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[06:46:26] *** Quits: wroathe (~wroathe@user/wroathe) (Read error: Connection reset by peer)
[06:48:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:48:26] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:48:26] *** Joins: wroathe (~wroathe@user/wroathe)
[06:55:39] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[06:57:02] *** Quits: teo (~teo@user/teo) (Ping timeout: 268 seconds)
[06:59:01] *** Quits: td_ (~td@94.134.91.156) (Ping timeout: 250 seconds)
[07:00:45] *** Joins: td_ (~td@94.134.91.156)
[07:03:16] <dsal> Does anyone know if it's possibly in tasty to have some tests disabled by default?
[07:03:26] <dsal> i.e., I want a commandline to add more expensive tests.
[07:06:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:11:58] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[07:16:23] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:20:37] *** Joins: Akiva (~Akiva@user/Akiva)
[07:26:13] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 240 seconds)
[07:28:22] *** Joins: jespada (~jespada@87.74.33.157)
[07:30:02] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[07:33:18] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 260 seconds)
[07:34:06] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[07:35:44] *** Quits: beka (~beka@104-244-24-117.PUBLIC.monkeybrains.net) (Quit: Leaving)
[07:42:25] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[07:45:49] *** Quits: jeetelongname (~jeet@eduroam-public-20.nat.port.ac.uk) (Ping timeout: 250 seconds)
[07:47:08] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[07:51:45] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:54:35] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[07:58:30] <dsal> I was trying to figure out how to resume on error with megaparsec, but it's not exactly happy with my attempts.  Still learned more stuff.
[07:59:15] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[08:00:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[08:01:06] *** Joins: Akiva (~Akiva@user/Akiva)
[08:04:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[08:04:52] <earendel> anyone programmed something using haskell?
[08:05:22] <dsal> Libraries are almost ready and then people can get started!
[08:06:54] *** Joins: namkeleser (~namkelese@101.179.128.103)
[08:09:14] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[08:34:07] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[08:34:10] *** Quits: deadmarshal (~deadmarsh@95.38.116.82) (Ping timeout: 256 seconds)
[08:37:02] *** Joins: deadmarshal (~deadmarsh@95.38.118.223)
[08:39:02] *** Quits: emf (~emf@cpe-174-109-36-85.nc.res.rr.com) (Quit: emf)
[08:45:01] *** Joins: img (~img@user/img)
[08:46:50] <DigitalKiwi> i made a few things with those libraries
[08:49:53] *** Quits: xff0x (~xff0x@2001:1a81:53c2:9a00:db12:87f1:cb29:dabf) (Ping timeout: 268 seconds)
[08:50:15] *** Joins: xff0x (~xff0x@2001:1a81:53c2:9a00:4695:71bd:bd0a:6785)
[08:52:14] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:57:39] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:b66e:c3b4:4ab3:f161) (Ping timeout: 252 seconds)
[09:01:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:01:38] *** Quits: gawen (~gawen@user/gawen) (Quit: cya)
[09:02:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:02:59] *** Joins: gawen (~gawen@user/gawen)
[09:05:19] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[09:05:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[09:07:50] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:13:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[09:18:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[09:21:29] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[09:21:51] *** Quits: mmhat (~mmh@55d45c6c.access.ecotel.net) (Quit: WeeChat 3.3)
[09:22:26] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[09:27:13] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[09:28:00] *** Joins: mbuf (~Shakthi@122.178.201.137)
[09:29:17] *** Joins: Erutuon (~Erutuon@user/erutuon)
[09:29:22] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 268 seconds)
[09:30:14] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[09:31:49] <int-e> > unwords $ map (\x -> printf "%.2f" (191 - x/22)) [4130,4121,4081,4080,4040,3975,3960,3949,3946,3917] -- new entrant at rank 3; sorry, xerox!
[09:31:51] <lambdabot>  "3.27 3.68 5.50 5.55 7.36 10.32 11.00 11.50 11.64 12.95"
[09:35:34] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 260 seconds)
[09:36:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[09:41:31] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 250 seconds)
[09:45:18] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[09:45:42] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[09:47:24] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[09:52:10] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 268 seconds)
[09:57:34] *** Joins: slice (~slice@user/slice)
[10:01:27] *** Quits: nfd (~nfd@user/nfd) (Ping timeout: 252 seconds)
[10:02:42] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19) (Quit: gone to sleep. ZZZzzz…)
[10:02:58] *** Joins: nfd (~nfd@user/nfd)
[10:03:22] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[10:06:22] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[10:07:41] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 252 seconds)
[10:24:22] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[10:28:04] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:29:08] *** Joins: nrl^ (~nrl@wsip-98-188-240-142.mc.at.cox.net)
[10:34:24] <xerox> int-e: bad day Day11: <<loop>>
[10:36:37] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[10:41:45] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 250 seconds)
[10:44:35] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 268 seconds)
[10:45:04] *** Quits: nfd (~nfd@user/nfd) (Ping timeout: 256 seconds)
[10:46:02] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[10:46:14] <int-e> Hmm, I didn't <<loop>>
[10:46:28] *** Joins: nfd (~nfd@user/nfd)
[10:46:30] *** Quits: nrl^ (~nrl@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[10:47:10] <xerox> I've convinced myself my implementation was wrong multiple times, one of those iterate frustrating moments
[10:47:16] <xerox> 🤷‍♂️
[10:47:28] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[10:52:03] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[10:53:51] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[10:54:36] *** Joins: img (~img@user/img)
[10:54:51] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[10:55:35] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[10:56:26] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[10:57:01] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[10:59:19] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 250 seconds)
[11:00:51] *** Quits: iqubic (~user@c-67-171-37-233.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[11:07:32] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[11:07:33] *** Joins: iqubic (~user@2601:602:9502:c70:9c0:18f3:c190:ff75)
[11:08:01] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[11:08:09] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[11:08:25] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:09:38] <int-e> xerox: I did find the problem unpleasant though, I can't quite put my finger on why. On the plus side I got to use `unfoldr`.
[11:09:46] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[11:10:17] <xerox> my first impl was an unfoldr too
[11:10:50] <int-e> (if you have  step :: State -> (Int, State)  then that matches unfoldr quite nicely)
[11:11:39] *** Quits: xff0x (~xff0x@2001:1a81:53c2:9a00:4695:71bd:bd0a:6785) (Ping timeout: 250 seconds)
[11:12:26] *** Joins: xff0x (~xff0x@2001:1a81:53c2:9a00:19a5:15f2:3ceb:bc1f)
[11:13:58] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[11:14:22] *** Quits: nek0 (~nek0@nek0.eu) (Quit: The Lounge - https://thelounge.chat)
[11:14:32] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[11:14:41] <xerox> yeah, I'll scrap iterate, not as nice
[11:15:00] <opqdonut> oh wow yeah unfoldr is perfect for this
[11:16:10] <opqdonut> my solution: https://github.com/opqdonut/adventofcode21/blob/master/Day11.hs
[11:17:11] <xerox> it does introduce the potential of an off-by-one with findIndex for part 2
[11:17:49] <opqdonut> yeah well I had tail . iterate previously, so unfoldr was perfect in that sense too
[11:20:04] <xerox> what I ended up with https://github.com/mrtnpaolo/advent-of-code-2021/blob/master/execs/Day11.hs
[11:22:27] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e2134fbc39073c29133.dip0.t-ipconnect.de)
[11:22:53] <opqdonut> xerox: you could just do `S.size seen` on line 27 and skip tracking the number of flashes separately, right?
[11:23:05] <opqdonut> your code is definitely neater than mine
[11:23:42] *** Joins: nek0 (~nek0@nek0.eu)
[11:24:46] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 260 seconds)
[11:24:51] <opqdonut> also, if you use M.adjust you won't need the M.member check on line 36
[11:25:44] <xerox> opqdonut: good point! I was tracking all the details because I was convinced I had it wrong
[11:26:11] <opqdonut> yeah, the minimal functional solution is rarely the most debuggable :P
[11:26:25] *** Joins: max22- (~maxime@2a01cb0883359800efee173175359a41.ipv6.abo.wanadoo.fr)
[11:26:28] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26) (Remote host closed the connection)
[11:26:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[11:28:02] <xerox> opqdonut: adjust is beatiful, appreciate it, alter came to mind but that is more explicit even
[11:29:02] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[11:30:34] *** Joins: fr33domlover (~fr33@2.55.40.147)
[11:30:47] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[11:31:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 252 seconds)
[11:33:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:37:52] <int-e> xerox: Yes, I had an off-by-one in part 2 which I half expected and caught using the example.
[11:38:19] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[11:39:23] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c)
[11:40:58] <int-e> https://paste.debian.net/1223009/ ...not pretty
[11:41:32] <xerox> interact is a cool idea
[11:42:16] <int-e> interact is part of my template (so are the imports, which is why there are superfluous ones))
[11:42:55] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:43:38] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[11:45:21] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[11:45:48] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[11:46:20] <int-e> https://paste.debian.net/1223010/ looks a bit cleaner, maybe
[11:46:50] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:48:09] <xerox> I quite like the do
[11:48:44] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 268 seconds)
[11:48:45] <xerox> I think a couple helpers would make it very concise
[11:51:31] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[11:53:20] *** Joins: FragByte (~christian@user/fragbyte)
[11:56:35] *** Quits: xff0x (~xff0x@2001:1a81:53c2:9a00:19a5:15f2:3ceb:bc1f) (Ping timeout: 252 seconds)
[11:57:39] *** Joins: xff0x (~xff0x@2001:1a81:53c2:9a00:cbda:12ba:4c62:7635)
[11:59:12] <int-e> xerox: helpers might make things more readable... but at least in my case, trying to be fast leads to monolithic code
[12:00:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[12:00:49] <int-e> oh did anybody else implement the wrong neighbourhood (von Neumann instead of Moore) at first?
[12:04:08] *** Joins: jinsun__ (~quassel@user/jinsun)
[12:04:31] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 250 seconds)
[12:04:54] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 260 seconds)
[12:06:35] <xerox> I felt so fortunate to read "including octopuses that are diagonally adjacent" right in the moment
[12:11:53] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e2134fbc39073c29133.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[12:16:40] *** Joins: notzmv (~zmv@user/notzmv)
[12:22:26] *** Parts: iqubic (~user@2601:602:9502:c70:9c0:18f3:c190:ff75) (ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[12:23:33] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[12:25:14] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[12:26:45] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[12:26:57] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[12:28:21] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:28:33] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:30:59] *** Joins: slice (~slice@user/slice)
[12:31:02] *** Joins: thevishy (~Nishant@2405:201:f005:c007:acb3:d7a7:c300:b2a1)
[12:31:25] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 252 seconds)
[12:48:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[12:49:01] *** Quits: xff0x (~xff0x@2001:1a81:53c2:9a00:cbda:12ba:4c62:7635) (Ping timeout: 252 seconds)
[12:49:51] *** Joins: xff0x (~xff0x@2001:1a81:53c2:9a00:4812:eab:46f1:9dc7)
[12:52:28] *** Joins: curiousgay (~quassel@77-120-141-90.kha.volia.net)
[12:53:03] *** Quits: ishutin (~ishutin@178-164-208-88.pool.digikabel.hu) (Ping timeout: 256 seconds)
[12:53:41] *** jinsun__ is now known as jinsun
[12:54:53] *** Joins: ishutin (~ishutin@85-238-77-101.pool.digikabel.hu)
[12:55:18] *** Quits: k60``` (~user@static.100.218.46.78.clients.your-server.de) (Ping timeout: 260 seconds)
[12:59:43] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[13:00:45] *** Quits: fr33domlover (~fr33@2.55.40.147) (Ping timeout: 252 seconds)
[13:02:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:03:17] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[13:06:43] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[13:07:02] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[13:07:04] *** Joins: namkeleser (~namkelese@101.179.128.103)
[13:07:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[13:09:34] *** Quits: nfd (~nfd@user/nfd) (Ping timeout: 256 seconds)
[13:09:42] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:23:17] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[13:25:00] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[13:25:26] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[13:28:36] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[13:28:48] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[13:29:19] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[13:29:21] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 252 seconds)
[13:38:41] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[13:40:03] *** Joins: img (~img@user/img)
[13:40:39] *** Joins: smartin (~Thunderbi@88.135.18.171)
[13:41:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:42:41] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[13:43:17] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 252 seconds)
[13:44:43] *** Lord_of_Life_ is now known as Lord_of_Life
[13:45:39] *** Joins: jespada (~jespada@87.74.33.157)
[13:46:17] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[13:46:57] *** Quits: curiousgay (~quassel@77-120-141-90.kha.volia.net) (Ping timeout: 252 seconds)
[13:47:44] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[13:58:34] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[14:00:47] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::d8fb)
[14:03:17] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[14:04:39] *** Joins: img (~img@user/img)
[14:10:24] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[14:19:16] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Remote host closed the connection)
[14:25:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:27:02] *** Quits: xff0x (~xff0x@2001:1a81:53c2:9a00:4812:eab:46f1:9dc7) (Ping timeout: 240 seconds)
[14:28:03] *** Joins: xff0x (~xff0x@2001:1a81:53c2:9a00:72ce:9c15:414e:55e3)
[14:30:48] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[14:30:48] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[14:30:48] *** finn_elija is now known as FinnElija
[14:31:00] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:36:44] *** Joins: Successus (~Successus@gateway/tor-sasl/successus)
[14:37:28] *** Joins: cosimone (~user@93-47-231-91.ip115.fastwebnet.it)
[14:41:11] *** Quits: xff0x (~xff0x@2001:1a81:53c2:9a00:72ce:9c15:414e:55e3) (Ping timeout: 250 seconds)
[14:42:14] *** Joins: xff0x (~xff0x@port-92-193-224-19.dynamic.as20676.net)
[14:47:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[14:48:17] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[14:48:18] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19)
[14:52:42] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[15:07:44] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[15:26:01] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[15:28:53] *** Quits: narendraj9 (~user@2a02:8109:b63f:ff7c::d8fb) (Remote host closed the connection)
[15:30:21] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 252 seconds)
[15:31:18] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::62fc)
[15:33:02] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[15:33:25] *** Quits: timCF (~timCF@m91-129-100-224.cust.tele2.ee) (Quit: leaving)
[15:34:29] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:11c1:36c3:fe48:2c6f)
[15:36:26] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[15:36:35] *** Joins: fr33domlover (~fr33@2.55.42.168)
[15:37:33] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:3700:12c3:7bff:fe6d:d374)
[15:39:35] <opqdonut> I'm seeing MulArrowT instead of ArrowT in some TH code after upgrading to GHC 9. The docs say it's just "FUN"... What is it?
[15:40:27] <opqdonut> what was previously: AppT (AppT ArrowT (ConT GHC.Types.Int)) x
[15:40:50] <opqdonut> is now: AppT (AppT (AppT MulArrowT (PromotedT GHC.Types.One)) (ConT GHC.Types.Int)) x
[15:41:07] <opqdonut> arrow with a multiplicity(??) of one?
[15:42:20] <opqdonut> ah is it a linear function type `a %1 -> b`?
[15:43:07] <opqdonut> right, so GHC 9 infers linear types for data constructors even if I haven't enabled -XLinearTypes
[15:43:26] <opqdonut> https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0111-linear-types.rst#linear-constructors
[15:44:05] <merijn> opqdonut: Does it? Or are regular arrows just a subset of linear arrows inside GHC?
[15:44:09] <geekosaur> yes, that looks like a multiplicity
[15:45:14] <geekosaur> merijn, but as a subset it should have Many instead of One as its multiplicity
[15:45:23] <opqdonut> merijn: for normal functions I seem to be getting ArrowTs
[15:45:27] <geekosaur> that being the default in most cases
[15:45:48] *** Joins: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[15:45:58] *** Quits: tom_ (~tom@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[15:47:16] *** Joins: retro_ (~retro@05412d78.skybroadband.com)
[15:49:50] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[15:51:45] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[15:59:37] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[16:01:16] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:01:18] *** Quits: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com) ()
[16:02:13] *** Quits: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320) (Ping timeout: 250 seconds)
[16:04:06] *** Quits: fr33domlover (~fr33@2.55.42.168) (Ping timeout: 256 seconds)
[16:04:35] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19) (Quit: gone to sleep. ZZZzzz…)
[16:05:25] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19)
[16:05:36] <opqdonut> posted a documentation issue https://gitlab.haskell.org/ghc/ghc/-/issues/20812
[16:05:38] *** Joins: jakalx (~jakalx@base.jakalx.net)
[16:05:48] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Ping timeout: 256 seconds)
[16:05:57] *** Joins: _ht_ (~quassel@37.120.218.158)
[16:05:58] <opqdonut> I wonder if I should've just done a PR...
[16:10:01] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19) (Ping timeout: 250 seconds)
[16:10:38] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[16:11:04] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19)
[16:11:33] *** Joins: kuribas (~user@ptr-25vy0i8mmtix9f62pzs.18120a2.ip6.access.telenet.be)
[16:16:14] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[16:19:50] *** Quits: narendraj9 (~user@2a02:8109:b63f:ff7c::62fc) (Remote host closed the connection)
[16:20:11] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[16:22:58] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 260 seconds)
[16:23:46] *** Quits: max22- (~maxime@2a01cb0883359800efee173175359a41.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:25:45] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[16:27:49] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19) (Quit: gone to sleep. ZZZzzz…)
[16:28:01] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Read error: Connection reset by peer)
[16:28:09] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[16:28:25] *** Joins: timCF (~timCF@m91-129-100-224.cust.tele2.ee)
[16:30:17] <timCF> Hello! Did anybody experienced problems with stock deriving of Eq instance over existentially quantified type (type which do have forall on the right-hand side of definition)? Not sure how to deal with it, GHC gives some strange error
[16:31:31] <timCF> Error is like `Couldn't match type a1 with a` where "a" is existentially quanitified type parameter.
[16:32:50] <geekosaur> I think that's guaranteed to happen because it can never retrieve the type of the existential?
[16:33:13] <geekosaur> unless it's a GADT but that I think also breaks deriving in a different way
[16:34:12] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[16:35:12] <timCF> geekosaur: so no deriving for existentially quantified types?
[16:35:38] <kuribas> yeah, it cannot compare existentially quantified types.
[16:36:40] <geekosaur> type information doesn't exist at runtime so it can't know what it is comparing
[16:37:00] <kuribas> You might make a manual instance using a Typeable constraint.
[16:38:17] <kuribas> But it sounds like the wrong design to me...
[16:41:17] *** Joins: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com)
[16:42:58] <timCF> kuribas: hmm, but what are the other options?
[16:43:20] <kuribas> timCF: what are you trying to do?
[16:43:33] <kuribas> For example, a sum type instead of existential.
[16:44:54] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[16:44:57] <timCF> I'm trying to learn singletons :) 
[16:46:49] <timCF> Case is just using `SomeFoo` instead of `Foo (bar :: Bar)` in case where `bar` is known only in runtime
[16:47:15] <timCF> Coming from IO-like action
[16:48:09] <merijn> timCF: Can't derive existential types, no, you'll have to handroll the instance
[16:48:50] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[16:50:31] <kuribas> timCF: my deepest sympathy :)
[16:50:43] <kuribas> timCF: why not learn a proper dependently typed language instead?
[16:54:20] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[16:54:29] <timCF> kuribas: I'm just trying to evolve gradually) I've started Haskell only after I could say "I know Erlang, nothing to do here anymore". It took something around 5 years to be able to say so. Now I'm kinda invested already in learning Haskell :)
[16:54:58] <kuribas> timCF: I didn't say you should stop learning haskell :)
[16:55:09] <geekosaur> you're not really learning haskell any more
[16:55:13] <kuribas> Just that in that direction lies madness.
[16:55:24] <geekosaur> you're learning a misguided attempt to pretend to be idris in haskell
[16:55:24] <merijn> s/not really learning Haskell/really not learning Haskell
[16:55:49] <merijn> timCF: I'd second the idea of "maybe you should look at Idris instead" :p
[16:59:43] <kuribas> timCF: note that a lot of DT language build on haskell knowledge, so learning haskell isn't a waste of effort.
[16:59:50] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[17:01:53] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[17:01:57] <merijn> More relevantly, Idris is *intentionally* positioned/designed to accommodate people coming from Haskell
[17:03:22] <timCF> - How and why you started programming in Idiris? - Well one day I tried to refactor my Haskell codebase to work with singletons. - Understandable.
[17:04:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:06:57] *** Joins: hueso (~root@user/hueso)
[17:07:42] <merijn> timCF: tbh, if you say that in the idris channel I'm pretty sure *everyone* will understand that immediately :p
[17:09:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[17:11:11] *** Joins: max22- (~maxime@2a01cb0883359800fed7895ae16757a7.ipv6.abo.wanadoo.fr)
[17:14:04] <kuribas> most idris activity is in discord, not freenode.
[17:14:36] <kuribas> or wathever this place is :)
[17:16:01] <kuribas> My current interest in haskell is more in how to write clean haskell without resorting to too much fancy type level stuff.
[17:16:05] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[17:16:26] <kuribas> Like leveraging abstractions and algebraic structures, like Monoid/Applicative/...
[17:16:34] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 256 seconds)
[17:16:35] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[17:21:18] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 260 seconds)
[17:25:17] *** Joins: neurocyte0132889 (~neurocyte@45.14.190.29)
[17:25:17] *** Quits: neurocyte0132889 (~neurocyte@45.14.190.29) (Changing host)
[17:25:17] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:25:44] *** Joins: xkuru (~xkuru@user/xkuru)
[17:27:58] *** Joins: Digit (~user@user/digit)
[17:28:41] <Digit> hi.   just had this idea....          ~    "if gimp were coded in haskell"   
[17:31:52] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3170:52ba:4037:d1)
[17:36:07] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3170:52ba:4037:d1) (Ping timeout: 252 seconds)
[17:39:10] *** Quits: Successus (~Successus@gateway/tor-sasl/successus) ()
[17:39:52] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[17:42:42] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 256 seconds)
[17:44:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[17:44:38] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[17:46:36] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[17:51:53] *** Quits: kaction (~kaction@pool-71-191-91-40.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[17:54:31] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:02:25] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:02:35] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[18:02:55] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[18:05:57] <kuribas> then?
[18:06:37] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:06:56] <geekosaur> we'd have a gui lib to write it in?
[18:06:58] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[18:07:48] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:09:22] <geekosaur> (come to think of it, that probably *is* the point: gtk started out as the toolkit developed for gimp)
[18:09:31] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Quit: Leaving)
[18:10:30] <geekosaur> kinda doubt it'd have had as much impact if it had been done in haskell though
[18:10:54] <kuribas> you can already use gtk from haskell.
[18:10:58] <kuribas> And there is wxHaskell.
[18:11:07] <geekosaur> but neither is native
[18:11:23] <kuribas> don't know what you mean by native...
[18:11:24] <geekosaur> and, do we still have wxHaskell? last I checked it was badly bitrotted
[18:11:29] <kuribas> wxHaskell uses native widgets.
[18:11:37] <kuribas> geekosaur: it did, because nobody uses it.
[18:12:23] <geekosaur> but more to the point, gtk fits C-think. what would we have gotten if it had been developed in Haskell in the first place? FRP?
[18:12:34] <kuribas> These days everyone makes their own UI toolkit in JS.
[18:12:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:12:54] <kuribas> geekosaur: you can already use FRP with gtk.
[18:13:00] <kuribas> You just need a bit more plumbing.
[18:14:07] <timCF> Let's say I do have a normal class `class C a` and a kind `data K = K0 | K1` and a type `newtype T (k :: Maybe K) = T String`. There are both instances `instance C (T ('Just 'K0))` and `instance C (T ('Just 'K1))` presented in a scope, but when I'm trying to apply C method to value of the type `T ('Just k)`, GHC refuses to resolve it. Should I help GHC somehow to perform inference? 
[18:14:23] <kuribas> Maybe I am becoming an old fart, but I liked when UI toolkits came with the OS.
[18:15:44] <timCF> Error is something like "No instance for (C (T ('Just k)))
[18:15:48] <geekosaur> please. I shudder to think what linux devs would have come up with
[18:15:57] <kuribas> gtk?
[18:16:11] <kuribas> gtk is a standard linux toolkit.
[18:16:20] <geekosaur> they didn't come up with that, they adopted it
[18:16:25] <kuribas> by OS I didn't mean the kernel programmers.
[18:16:36] <geekosaur> as I said, it started out as a custom toolkit for the gimp
[18:17:10] *** Quits: Digit (~user@user/digit) (Read error: Connection reset by peer)
[18:17:19] <kuribas> yes
[18:17:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[18:17:28] <geekosaur> "my job here is done"? :þ
[18:17:56] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[18:17:58] <kuribas> timCF: code?
[18:18:32] <kuribas> I just mean, so there is a unified look and feel for the OS.
[18:18:32] *** Quits: opqdonut (opqdonut@pseudo.fixme.fi) (Ping timeout: 240 seconds)
[18:18:47] *** Joins: Digit (~user@user/digit)
[18:19:25] <geekosaur> kuribas, so linux has blown it because gtk is not the only toolkit used. qt/kde is also widely used
[18:19:40] <kuribas> yeah, they did :)
[18:19:44] <geekosaur> and there are still aps based on awt (god alone knows why)
[18:20:02] <kuribas> But most distros managed to unify the look and feel.
[18:20:04] <geekosaur> uh, athena widgets
[18:20:46] <kuribas> I remember those :)
[18:20:59] <kuribas> there was also gnustep.
[18:21:13] *** Joins: opqdonut (opqdonut@pseudo.fixme.fi)
[18:22:25] <geekosaur> moist distros picked one de and ran with it — but there are still apps available only for oe toolkit or the other. there are ways to try to unify theming but they have limits
[18:22:50] <geekosaur> *most
[18:25:32] <kuribas> I wouldn't claim linux is a good example :)
[18:26:26] <kuribas> I just think haskell UI libraries are poor because nobody takes the effort to maintain them.
[18:26:41] <kuribas> Not because haskell is inherently bad for UI programming.
[18:27:02] <kuribas> I tried a bit UI programming with FRP and reactive banana, and I found it did simplify a lot.
[18:27:22] <kuribas> Better than a global event loop and lots of mutable state.
[18:28:11] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[18:28:46] *** Joins: Jing (~hedgehog@125.106.89.1)
[18:33:26] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:33:53] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (Ping timeout: 268 seconds)
[18:35:24] *** Quits: _ht_ (~quassel@37.120.218.158) (Ping timeout: 256 seconds)
[18:35:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:35:42] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[18:36:04] *** Joins: jeetelongname (~jeet@148.197.248.20)
[18:36:22] *** Joins: mmhat (~mmh@55d45c6c.access.ecotel.net)
[18:38:51] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19)
[18:40:02] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[18:40:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[18:41:20] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[18:43:18] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Remote host closed the connection)
[18:43:36] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[18:45:41] *** Joins: __monty__ (~toonn@user/toonn)
[18:51:53] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[18:55:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:55:05] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:55:05] *** Joins: wroathe (~wroathe@user/wroathe)
[18:56:22] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[19:02:06] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[19:03:45] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[19:06:41] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[19:16:18] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:19:09] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 252 seconds)
[19:20:57] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[19:24:13] <tdammers> the haskell gui story is kind of a perfect storm
[19:24:56] <tdammers> one part is that the user base isn't overly dependent on gui's; most haskellers work on a) academic projects, b) web stuff, c) crypto stuff, d) compilers; neither of those need a gui
[19:25:26] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 260 seconds)
[19:25:32] <tdammers> another part is that we like sound abstractions and morally correct solutions; but the world hasn't quite figured out what the correct way of doing gui's is
[19:26:21] <tdammers> frp looks promising, but it's absolutely not there yet, as far as maturity and ergonomics go. OOP is what most of the rest of the world uses, but OOP is a bit of a red flag for a lot of haskellers. so then what?
[19:27:03] <tdammers> other languages just shrug, and implement a paradigm that is known to be mildly wrong, but you can make it good enough and just carry on about your day
[19:27:22] <perro> "wrong"
[19:28:21] <tdammers> "wrong" meaning that the actual semantics of the code don't match the "morally correct" semantics of the intended UI
[19:28:33] <tdammers> forcing the programmer to "fake it"
[19:28:38] <perro> reactish stuff gets pretty close
[19:28:43] <perro> can*
[19:28:49] <tdammers> yes. sometimes.
[19:28:57] <aplainzetakind> Is there a way to Proxy higher kinded types?
[19:29:06] <tdammers> but reactive stuff makes things like creating widgets dynamically awkward
[19:29:36] <tdammers> or keeping effects local to a single component, without bleeding knowledge of the effect out of the component
[19:30:11] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19) (Quit: gone to sleep. ZZZzzz…)
[19:32:27] *** Quits: timCF (~timCF@m91-129-100-224.cust.tele2.ee) (Ping timeout: 268 seconds)
[19:34:09] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19)
[19:34:29] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[19:35:45] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[19:36:02] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[19:36:19] *** Joins: fr33domlover (~fr33@2.55.25.254)
[19:39:05] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[19:41:36] <EvanR> for any given concrete UI, you might be able to see some kind of pattern that could be explained post hoc with declarative methods
[19:42:17] <EvanR> but the concrete UIs vary wildly, I'm skeptical there's a silver bullet
[19:43:15] <EvanR> toolkits basically encourage you to be able to do anything
[19:44:02] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (Ping timeout: 240 seconds)
[19:44:44] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[19:46:33] <EvanR> and what toolkits work with is some oddball reflection of human interaction forged over the decades, rather than a nice mathematical phenomenon
[19:47:08] <EvanR> and give you the tools to say screw that, I'm doing something else
[19:47:47] <kuribas> Isn't what the toolkit provides, and how you do event processing, orthogonal?
[19:48:02] <EvanR> web is good in that respect, designers we able to evolve a bit
[19:48:26] <kuribas> Just because most toolkits use an event loop, doesn't mean it's the only way of getting those features?
[19:48:48] <EvanR> event delegation has a lot of built in strategies that can override
[19:48:57] <EvanR> that you can override
[19:49:06] *** Quits: ggVGc (~ggVGc@a.lowtech.earth) (Ping timeout: 268 seconds)
[19:49:34] *** Joins: ggVGc (~ggVGc@a.lowtech.earth)
[19:50:02] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 240 seconds)
[19:51:10] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[19:51:46] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[19:52:06] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[19:53:31] <kuribas> you mean triggering events?
[19:53:50] <kuribas> I am sure you could model event delegation with FRP.
[19:54:22] *** Quits: jeetelongname (~jeet@148.197.248.20) (Remote host closed the connection)
[19:55:44] *** Quits: cosimone (~user@93-47-231-91.ip115.fastwebnet.it) (Remote host closed the connection)
[19:56:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:58:07] <EvanR> not sure why we are on the subject of event processing xD
[19:59:37] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[20:01:22] <EvanR> is the idea that any UI is just a pile of event processing
[20:01:57] <EvanR> works for javascript I guess
[20:06:09] *** Joins: x_kuru (~xkuru@user/xkuru)
[20:07:45] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[20:08:22] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 260 seconds)
[20:13:26] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[20:14:12] *** Quits: aeka (~hiruji@user/hiruji) (Quit: ZNC 1.8.2 - https://znc.in)
[20:14:15] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[20:15:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:15:31] *** Joins: aeka (~aeka@2606:6080:1002:9:ffc4:b9c1:20ad:82f9)
[20:27:26] *** Quits: spoofer (~spoofer@64.185.111.205) (Remote host closed the connection)
[20:28:48] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19) (Quit: gone to sleep. ZZZzzz…)
[20:32:00] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19)
[20:34:27] *** Joins: dcoutts (~duncan@71.78.6.51.dyn.plus.net)
[20:37:15] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Quit: Lost terminal)
[20:37:46] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[20:40:14] *** Joins: jeetelongname (~jeet@148.197.248.20)
[20:41:18] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[20:41:58] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[20:44:30] *** Quits: Jing (~hedgehog@125.106.89.1) (Read error: Connection reset by peer)
[20:45:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:45:25] *** Joins: Guest75 (~Guest75@c-73-51-111-196.hsd1.il.comcast.net)
[20:47:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[20:48:38] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19) (Quit: gone to sleep. ZZZzzz…)
[20:50:18] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[20:50:36] *** Joins: cosimone (~user@93-47-231-91.ip115.fastwebnet.it)
[20:51:16] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[20:51:35] *** Joins: earendel (uid498179@user/earendel)
[20:59:20] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[21:00:33] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[21:02:14] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[21:04:41] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 250 seconds)
[21:11:12] *** Quits: kuribas (~user@ptr-25vy0i8mmtix9f62pzs.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[21:16:12] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:11c1:36c3:fe48:2c6f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:16:55] *** Joins: machinedgod (~machinedg@24.105.81.50)
[21:22:49] *** Joins: zaquest (~notzaques@5.130.79.72)
[21:25:23] *** Quits: Guest75 (~Guest75@c-73-51-111-196.hsd1.il.comcast.net) (Quit: Client closed)
[21:25:54] *** Quits: mbuf (~Shakthi@122.178.201.137) (Quit: Leaving)
[21:26:27] *** Quits: johnjay (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[21:27:20] *** Joins: johnjay (~pi@154.6.152.74)
[21:28:13] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[21:28:58] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[21:29:22] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:11c1:36c3:fe48:2c6f)
[21:32:46] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 256 seconds)
[21:35:38] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 260 seconds)
[21:37:27] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[21:41:47] *** Joins: jakalx (~jakalx@base.jakalx.net)
[21:44:33] *** Joins: cheater (~Username@user/cheater)
[21:44:36] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:45:24] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[21:48:02] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:11c1:36c3:fe48:2c6f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:48:17] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[21:48:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:48:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:48:28] *** Joins: wroathe (~wroathe@user/wroathe)
[21:50:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3170:52ba:4037:d1)
[21:54:34] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[21:55:21] *** Joins: vicfred (~vicfred@user/vicfred)
[21:55:23] *** Joins: sluigi (~sluigi@18.31.14.245)
[21:59:41] <awpr> timCF "there is an instance for each constructor of T" is different from "GHC can find the right instance for a call site with universally quantified T" -- in that case the right instance changes per callsite, and GHC cannot pick one without it being passed in as a constraint
[22:00:47] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:11c1:36c3:fe48:2c6f)
[22:00:56] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:01:08] <awpr> it could also be a stuck type family like `Any`, in which case there actually isn't an instance
[22:04:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[22:04:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:05:46] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[22:06:33] *** Joins: econo (uid147250@user/econo)
[22:07:54] *** Quits: johnjay (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[22:08:23] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[22:08:57] *** Joins: neurocyte0132889 (~neurocyte@45.14.190.29)
[22:08:58] *** Quits: neurocyte0132889 (~neurocyte@45.14.190.29) (Changing host)
[22:08:58] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:09:09] *** Joins: johnjay (~pi@154.6.152.74)
[22:12:01] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:14:30] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[22:18:10] <glguy> Is there a common name for a function: Ord a => [a] -> Map a Int   whose behavior is to count the number of occurences of the elements in a list? Maybe somethin to do with cardinalities, frequencies, etc?
[22:18:57] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 268 seconds)
[22:19:33] <geekosaur> histogram?
[22:20:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[22:21:21] <glguy> that takes me to "In statistics, a frequency distribution is a list, table (i.e.: frequency table) or graph (i.e.: bar plot or histogram) that displays the frequency of various outcomes in a sample."
[22:22:00] <glguy> so maybe "frequency distribution" is closer to what I want with histogram being a particular rendering of that thing
[22:22:43] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[22:23:53] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[22:26:02] <sluigi> why is the concept of a functor so different in haskell compared to ocaml?
[22:26:41] <dsal> glguy: multiset seems to exist for that.
[22:27:43] <glguy> dsal: oh yeah, instead of figuring out the verb for the action of constructing a frequency table, I could focus on the name of the frequency table representation
[22:28:50] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 268 seconds)
[22:30:10] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:31:18] *** Quits: max22- (~maxime@2a01cb0883359800fed7895ae16757a7.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:32:39] <geekosaur> sluigi, different languages seem to take their definition of "functor" from different places. Haskell uses one from mathematics, specifically category theory (although it cuts the name down, properly it should be "Endofunctor")
[22:32:47] <awpr> sluigi: they're kind of just unrelated things that happen to use the same name (along the same lines, C++ jargon uses "functor" to mean a callable object).  is that a satisfying answer to "why", or are you hoping for a deeper reason about why ML functors are called that?  (I don't have a good answer for that)
[22:33:02] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[22:33:13] <geekosaur> nor do I
[22:33:20] <sluigi> i guess i just don't understand how the two functors are related
[22:33:28] <sluigi> and would like to
[22:33:43] <awpr> my understanding is that they're not related in any meaningful way
[22:33:54] <geekosaur> I'm not sure they are
[22:34:23] <geekosaur> there may be some very abstract sense based on ML functors being "higher order modules" in some sense
[22:34:23] *** Joins: jakalx (~jakalx@base.jakalx.net)
[22:35:31] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Remote host closed the connection)
[22:36:29] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[22:36:35] <awpr> like, to guess at the etymology of the C++ situation, if you take "access" and objectify it, you get "accessor", so if you take "function" and objectify it, you get "functor".  in that case, the same word seems to have come about from completely unrelated origins.  it could be that the ML situation is similar, or that someone chose the category theory "functor" based on some distant metaphor
[22:36:42] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:36:43] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:36:43] *** Joins: wroathe (~wroathe@user/wroathe)
[22:37:07] <dsal> sluigi: lots of languages call things functions that I wouldn't consider a function.
[22:37:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:38:53] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[22:39:13] <awpr> or ML functors could be CT functors in some way I don't know of -- functors are extremely diverse depending on the source and target categories, and the Haskell `Functor` is a very narrowly specialized case of them, so there are plenty of "functors" that look totally foreign compared to the `Functor` class
[22:39:42] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Client Quit)
[22:39:43] *** Quits: johnjay (~pi@154.6.152.74) (Ping timeout: 252 seconds)
[22:39:58] <EvanR> C++: callable. Haskell: mappable. ML: instancable?
[22:41:26] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[22:41:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[22:41:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[22:42:06] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Client Quit)
[22:42:32] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[22:42:53] *** Joins: johnjay (~pi@154.6.152.74)
[22:43:08] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:44:10] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Client Quit)
[22:44:34] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[22:47:32] <EvanR> you could ask where category theory got "functor"
[22:47:34] *** Quits: deadmarshal (~deadmarsh@95.38.118.223) (Ping timeout: 256 seconds)
[22:48:01] <glguy> Where did category theory get functor?
[22:52:22] *** Joins: yhsiveht (~Nishant@49.37.177.34)
[22:54:45] *** Quits: thevishy (~Nishant@2405:201:f005:c007:acb3:d7a7:c300:b2a1) (Ping timeout: 252 seconds)
[22:57:52] *** Joins: dudek (~dudek@185.150.236.103)
[22:58:59] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[22:59:52] *** Quits: APic (apic@apic.name) (Quit: [TLS] Client upgrade)
[23:00:10] *** Joins: APic (~apic@apic.name)
[23:00:54] *** Quits: cosimone (~user@93-47-231-91.ip115.fastwebnet.it) (Remote host closed the connection)
[23:01:26] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[23:01:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:03:06] *** Joins: max22- (~maxime@2a01cb08833598004fea75dc1e636bbe.ipv6.abo.wanadoo.fr)
[23:05:26] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:06:00] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[23:06:16] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[23:06:18] *** Joins: cosimone (~user@93-47-231-91.ip115.fastwebnet.it)
[23:06:19] *** Joins: hololeap (~hololeap@user/hololeap)
[23:07:31] *** Quits: jeetelongname (~jeet@148.197.248.20) (Quit: off streaming)
[23:09:01] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[23:10:09] *** Quits: sluigi (~sluigi@18.31.14.245) (Ping timeout: 256 seconds)
[23:10:23] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[23:10:49] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:12:11] <hololeap> newtype Grid x y a = Grid { getGrid :: Sized.Vector y (Sized.Vector x a) }
[23:12:25] <hololeap> withGrid :: forall a r. SomeGrid a -> (forall x y. (KnownNat x, KnownNat y) => Grid x y a -> r) -> Maybe r
[23:12:28] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[23:12:36] <hololeap> this is hard
[23:12:43] <glguy> hololeap: for 2-d arrays I like using Array
[23:12:57] <glguy> but I guess you're doing something typefancy here
[23:13:15] <hololeap> yeah, I'm playing around with it
[23:13:30] <awpr> hmm, why Maybe?  can something in there fail?
[23:13:51] *** Quits: fr33domlover (~fr33@2.55.25.254) (Ping timeout: 268 seconds)
[23:13:54] <hololeap> awpr: yeah the rows could be of different lengths
[23:14:25] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[23:14:31] <awpr> oh, hmm, is SomeGrid not an existential wrapper around Grid then?
[23:14:38] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[23:14:49] <hololeap> type SomeGrid a = Vector (Vector a)
[23:14:54] <hololeap> (regular vectors there)
[23:15:02] <awpr> ok that makes perfect sense then
[23:15:08] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[23:15:14] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[23:16:22] <hololeap> I need to branch depending on if (y :: Nat) is 0 or >=1, and I need to do it in a way that the type system can follow
[23:16:28] <awpr> https://hackage.haskell.org/package/orthotope is another option for shape-indexed multidimensional arrays, btw
[23:16:54] <awpr> oof, that's a problem that's way harder than it sounds like it should be
[23:17:32] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 268 seconds)
[23:18:06] <hololeap> you could be right. my thinking was that if y is 0, then you just pass that rank-2 function (Grid 0 0 a)
[23:18:52] <hololeap> but if it has at least one row, then you need to start working with x, and you need to check every subsequent row to make sure they are the correct size
[23:19:42] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[23:19:54] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[23:20:03] <hololeap> I'm also trying to build it using: withSized :: forall a r. Vector a -> (forall n. KnownNat n => Sized.Vector n a -> r) -> r
[23:20:25] <hololeap> (from Data.Vector.Sized)
[23:21:28] <awpr> hmm, so it'd need to know that it's equal to 0 in order to "cast" it to the desired type and/or use an empty vector; and it'd need to know that it's >= 1 in order to access the 0th element to find the candidate inner vector length
[23:21:44] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[23:22:07] <hololeap> right. I suppose I could turn Grid into a GADT with an constructor for y==0 and y>=1
[23:22:07] <awpr> actually you're free to pass a 0-length vector regardless of the input length, so that one shouldn't be an issue
[23:22:27] <hololeap> *two constructors
[23:23:27] <monochrom> Ah I missed the functor discussion. I would take it one step further "where did math get 'function'?".
[23:24:56] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:27:01] <EvanR> \o/
[23:27:31] *** Quits: phma (phma@2001:5b0:210f:6be8:16f7:aafd:70ba:5696) (Read error: Connection reset by peer)
[23:27:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[23:28:29] <awpr> how about something like `let mn = foldMap (First . Just . Vector.length) outerVec in case mn of Nothing -> k Sized.empty; Just n -> k <$> traverse (Sized.toSized n) outerVec`?
[23:28:36] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[23:28:45] *** Joins: jakalx (~jakalx@base.jakalx.net)
[23:29:22] <awpr> (the main point being to use Foldable to Maybe find the inner length and then Traversable to check they're all the same)
[23:30:01] <awpr> er, it'll need lifting with TypeNats functions + TypeApplications
[23:33:18] *** Joins: phma (~phma@host-67-44-209-24.hnremote.net)
[23:35:03] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 250 seconds)
[23:35:51] *** Joins: Guest81 (~Guest81@2a01cb0589202e00edc070a9acc1d4bb.ipv6.abo.wanadoo.fr)
[23:36:34] <Guest81> hello. could someone coup explain to me why in haskell when you do 3.1 + 0.1 it returns 3.3000000000000003 ?
[23:36:43] <Guest81> this is pretty disturbing.
[23:37:02] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:59] <glguy> Guest81: this is the nature of IEE floating point numbers
[23:38:02] <monochrom> It is floating point. It happens in all languages. Some languages show fewer digits by default, e.g., C.
[23:38:15] <glguy> IEEE754*
[23:38:29] <hololeap> it's because floating point numbers have limited precision due to how their modeled
[23:38:36] <monochrom> In C if you printf("%.18f") you will see the same disturbing thing again.
[23:38:57] <monochrom> Also I forgot to say that it is floating point and binary.
[23:39:30] <glguy> In floating point, 3.1 is represented as the fraction:
[23:39:30] <glguy> >  6980579422424269 * 2^^(-51) :: Rational
[23:39:32] <lambdabot>  6980579422424269 % 2251799813685248
[23:39:44] <glguy> which is pretty close to 3.1 if you divide it out, but not quite
[23:39:47] *** Joins: Sgeo (~Sgeo@user/sgeo)
[23:40:13] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:40:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:40:14] *** Joins: wroathe (~wroathe@user/wroathe)
[23:40:20] <monochrom> https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
[23:41:32] <monochrom> Also, Knuth proved that if you are to suffer truncation errors anyway, binary is the least worst.
[23:42:59] <int-e> Guest81: I don't think your example is correct... floating point is not *that* imprecise.
[23:43:20] <monochrom> Heh
[23:43:21] <int-e> > 3.1 + 0.2
[23:43:22] <lambdabot>  3.3000000000000003
[23:43:49] <Guest81> int-e you can try it by youself in ghci, 3,2 + 0.1
[23:43:49] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:44:00] <monochrom> You said 3.1+0.1
[23:44:11] <Guest81> y it was a mistake
[23:44:23] <Guest81> it was 3.2 + 0.1
[23:44:40] <Guest81> that is pretty interesting btw, thanks for the answers
[23:45:46] <hololeap> % fromRational  $ (32 % 10) + (1 % 10)
[23:45:46] <yahb> hololeap: 3.3
[23:45:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:46:55] <hololeap> if you know how to represent your numbers as fractions, then that's the way to go
[23:49:59] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 265 seconds)
[23:49:59] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[23:50:37] <Guest81> so that's how you do when you need precise calculations ?  writing  int divisions instead of floats ?
[23:51:43] *** Joins: deadmarshal (~deadmarsh@95.38.118.223)
[23:52:44] <hololeap> it's not int divisions, you can get arbitrary precision because it's modeled differently
[23:53:31] <hololeap> it's modeled as fractions of Integers, which have arbitrary precision, as opposed to Float which is limited to a fixed number of bits for its representation
[23:54:22] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[23:55:10] <hololeap> and then you can convert it back to Float or whatever at the end of your calculation you won't have compounding rounding errors
[23:55:33] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:56:03] *** Quits: deadmarshal (~deadmarsh@95.38.118.223) (Ping timeout: 250 seconds)
[23:56:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
