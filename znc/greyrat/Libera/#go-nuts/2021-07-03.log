[00:01:00] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 272 seconds)
[00:06:28] *** Joins: koo555 (~koo6@89-24-13-235.customers.tmcz.cz)
[00:13:51] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[00:13:59] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[00:18:38] *** Joins: kodah (~kodah@user/kodah)
[00:22:05] *** Quits: morgan (~morgan@user/morgan) (Ping timeout: 265 seconds)
[00:27:24] <mikoto-chan> why do people save images as byte slices?
[00:27:52] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[00:29:44] <davidkrauser> mikoto-chan: what should they use, instead?
[00:32:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:39:16] *** Quits: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com) (Ping timeout: 252 seconds)
[00:42:19] <mikoto-chan> davidkrauser: some Image struct with the metadata and a pointer to the file that holds the image?
[00:44:40] <j416> mikoto-chan: what are you going to do with the file?
[00:45:31] <mikoto-chan> j416: dunno, if people store images like []byte what are they exactly saving?
[00:45:47] <mikoto-chan> say I want to display an image on a site
[00:46:44] <j416> stream the data to the client?
[00:46:58] <j416> it all depends on what you want to do, obviously.
[00:47:16] <j416> why do people store their books in bookshelves?
[00:47:39] <j416> why not on the table, or in their bag?
[00:50:33] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 256 seconds)
[00:50:37] *** Quits: pez (~pez@user/pez) (Remote host closed the connection)
[00:52:42] <mikoto-chan> j416: alright, you're making it hard for me heheheh. let's say we have a blog but want to display a random image from a folder in the corner of the page by using the <img> HTML tag. how would you solve this? you're not allowed to rely on filenames.
[00:53:19] <mikoto-chan> maybe I wasn't clear but everytime we click F5 we want to get another random image from the same folder.
[00:55:14] <j416> how will you read the image data if you cannot rely on filenames?
[00:55:40] <j416> is the folder not on disk?
[00:56:11] *** Joins: pez (~pez@user/pez)
[00:56:15] <mikoto-chan> no I meant, you cannot just pull this trick by hardcoding the <img> tag with something like image.png and just rename files on every refresh (which would be a fairly bad solution)
[00:57:01] <davidkrauser> Are you talking about when a website encodes a file directly into the html as escaped binary?
[00:57:08] <j416> does the client have direct access to the image directory?
[00:57:53] <j416> i.e., are the files themselves available via something like /image/foo.jpg ?
[00:57:56] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[00:59:36] <b0nn> mikoto-chan: There are a few image data representations in Go, RGBa, YMKsomething, etc, byte is easiest when you only want to store the data, but if you are processing then one of the other formats works
[01:00:14] <b0nn> er, so, the answer is ... storage in []byte is easy and clean, processing is done in other formats
[01:00:24] <j416> ah great, b0nn will continue this. thanks. /me gets some work done o/
[01:01:08] <b0nn> this has a list of the formats possible https://lets-go.alexedwards.net/
[01:01:15] <b0nn> er, wrong buffer
[01:01:30] <b0nn> https://golang.org/pkg/image/
[01:02:00] *** Joins: theoceaniscool (~theoceani@93.177.121.14)
[01:03:02] <mikoto-chan> j416: yes. maybe there are just too many solutions available but I just need to use those images inside of HTML tags, what's inside of the slices though?
[01:03:24] <mikoto-chan> b0nn: you'd nearly think that Mr. Wards pays you to promote that book ;)
[01:03:25] <j416> mikoto-chan: I don't know what slices you are referring to.
[01:03:41] <b0nn> mikoto-chan: when you read files from disk you don't know what the data is without some sort of header (file type)
[01:03:45] <j416> mikoto-chan: if you have the paths to the images, just pick one at random and put that into the image tag?
[01:03:58] <mikoto-chan> j416: if you're gonna store an image as a slice of bytes what's the data stored inside of those bytes?
[01:04:07] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[01:04:13] <b0nn> ones and zeros
[01:04:26] <mikoto-chan> so literally the file in binary representation?
[01:04:31] <b0nn> yes
[01:04:34] <j416> mikoto-chan: that'd depend on the format of your choice. You could for instance store the raw image data itself.
[01:05:02] <mikoto-chan> so if my image is 300kb I will have a slice with 300,000 bytes?
[01:05:16] <j416> something like that.
[01:05:16] <b0nn> there's an easy way to find out
[01:05:40] <mikoto-chan> j416: hmmm, heard of that, what's the difference between raw and jpg/png? you can also link an article
[01:05:56] <j416> mikoto-chan: jpeg and png are just two different image formats.
[01:06:20] <j416> []byte is used to store any data, it doesn't matter what data it is.
[01:06:39] <b0nn> This will show you what binary is in the byte https://stackoverflow.com/questions/45492153/how-to-print-a-byte-array-as-binary-in-golang
[01:06:53] <j416> you can store a jpeg, text file, list of your favourite vegetables, it's just data.
[01:07:56] <j416> mikoto-chan: all data is a sequence of bytes. []byte is just that.
[01:10:26] <mikoto-chan> j416: thanks.
[01:10:44] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[01:12:36] <j416> :)
[01:12:41] <b0nn> also, WRT Alex Edwards book (and site) I /really/ liked it, itwas (and continues to be) super helpful in understanding web dev in Go for me
[01:12:56] <b0nn> So, yes, I recommend what I find helpful
[01:13:20] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[01:20:13] <mikoto-chan> b0nn: cool, his website got simple code snippets ...
[01:28:58] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[01:33:34] *** Quits: Kane (~Kane@home.yarg.fr) (Quit: Leaving)
[01:33:49] *** Quits: clarjon1 (~clarjon1@198-84-130-36.cpe.teksavvy.com) (Quit: clarjon1)
[01:34:53] *** Joins: clarjon1 (~clarjon1@198-84-130-36.cpe.teksavvy.com)
[01:36:22] *** Quits: clarjon1 (~clarjon1@198-84-130-36.cpe.teksavvy.com) (Changing host)
[01:36:22] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[01:38:21] *** Quits: martinkennelly (~martinken@84.203.21.166) (Remote host closed the connection)
[01:38:40] *** Joins: martinkennelly (~martinken@84.203.21.166)
[01:43:29] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[01:44:40] *** Quits: howeyc (~howeyc@user/howeyc) (Quit: leaving)
[01:47:08] *** Quits: kdsch (~kdsch@86.106.121.196) (Quit: WeeChat 2.8)
[01:52:58] *** Quits: theoceaniscool (~theoceani@93.177.121.14) (Ping timeout: 258 seconds)
[01:53:02] *** Joins: pepee (~user@user/pepee)
[01:56:38] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[01:58:00] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[01:58:50] *** Joins: kulak (~kulak@user/kulak)
[01:59:32] *** Joins: daveed (~ride@user/daveed)
[02:06:37] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[02:09:18] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[02:11:28] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[02:11:50] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[02:11:52] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (Ping timeout: 272 seconds)
[02:11:55] *** Quits: jzelinskie (sid17772@id-17772.stonehaven.irccloud.com) (Ping timeout: 272 seconds)
[02:11:55] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 272 seconds)
[02:12:09] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Ping timeout: 256 seconds)
[02:12:16] *** Quits: DaftMonk (sid201914@user/daftmonk) (Write error: Connection reset by peer)
[02:12:18] *** Quits: SincereFox (uid337158@user/sincerefox) (Ping timeout: 240 seconds)
[02:12:18] *** Quits: cespare (sid330206@id-330206.stonehaven.irccloud.com) (Read error: Connection reset by peer)
[02:12:18] *** Quits: jakesyl (sid56879@id-56879.stonehaven.irccloud.com) (Read error: Connection reset by peer)
[02:12:22] *** Quits: Manouchehri (sid384576@id-384576.stonehaven.irccloud.com) (Read error: Connection reset by peer)
[02:12:32] *** Quits: merpnderp (sid16744@stonehaven.irccloud.com) (Read error: Connection reset by peer)
[02:13:29] *** Quits: hdm (sid500490@aha/hacker/hdm) (Ping timeout: 252 seconds)
[02:13:51] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[02:18:03] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[02:18:06] *** Joins: SincereFox (uid337158@user/sincerefox)
[02:18:32] *** Joins: DaftMonk (sid201914@user/daftmonk)
[02:18:32] *** Joins: kulak (~kulak@user/kulak)
[02:18:34] *** Joins: cespare (sid330206@stonehaven.irccloud.com)
[02:18:47] *** Quits: koo555 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 268 seconds)
[02:19:00] *** Joins: hdm (sid500490@aha/hacker/hdm)
[02:19:25] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 258 seconds)
[02:22:35] *** Joins: jzelinskie (sid17772@id-17772.stonehaven.irccloud.com)
[02:22:40] *** Joins: merpnderp (sid16744@id-16744.stonehaven.irccloud.com)
[02:23:25] *** Joins: jakesyl (sid56879@id-56879.stonehaven.irccloud.com)
[02:24:47] *** Joins: Manouchehri (sid384576@id-384576.stonehaven.irccloud.com)
[02:24:56] *** Joins: morgabra (sid500580@user/morgabra)
[02:25:03] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[02:33:35] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[02:35:00] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:37:54] *** Joins: moto (~moto@user/moto)
[02:38:05] *** Quits: dr0n (~nabromov@94.11.23.235) (Quit: WeeChat 2.8)
[02:39:48] *** Joins: Garb0 (~Garb0@user/garb0)
[02:41:40] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:42:24] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[02:42:27] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Client Quit)
[02:51:10] *** Joins: nmollerup (~nmm@customer-2a00-7660-1612-0168-ff70-ff6e-c392-7be9.ip6.gigabit.dk)
[02:55:56] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[02:56:11] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Client Quit)
[02:59:21] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[02:59:47] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[03:00:11] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[03:00:18] *** Quits: _mrlemke_ (~mrlemke@208.74.105.200) (Read error: Connection reset by peer)
[03:01:30] *** Quits: nmollerup (~nmm@customer-2a00-7660-1612-0168-ff70-ff6e-c392-7be9.ip6.gigabit.dk) (Quit: Leaving)
[03:01:51] *** Joins: nmollerup (~nmm@customer-2a00-7660-1612-0168-ff70-ff6e-c392-7be9.ip6.gigabit.dk)
[03:03:04] *** Quits: nmollerup (~nmm@customer-2a00-7660-1612-0168-ff70-ff6e-c392-7be9.ip6.gigabit.dk) (Client Quit)
[03:03:25] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-ff70-ff6e-c392-7be9.ip6.gigabit.dk)
[03:04:47] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[03:08:44] *** Joins: normen (~normen@p200300d7173dc900e8efd7f828204959.dip0.t-ipconnect.de)
[03:11:06] *** Joins: hexfive (~eric@50.35.83.177)
[03:15:29] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[03:18:47] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:20:43] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 256 seconds)
[03:24:18] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[03:25:27] *** Quits: Eddward (~Eddward@207.138.204.132) (Remote host closed the connection)
[03:25:49] *** Joins: Eddward (~Eddward@207.138.204.132)
[03:26:15] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:29:16] *** Joins: jimmy (~jimmy___@2607:fa49:4b00:7000:5515:7ca6:7a97:5491)
[03:30:57] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:22] *** Joins: jsrnop (~mark@user/jsrnop)
[03:31:30] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[03:35:09] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[03:37:09] *** Joins: Garb0 (~Garb0@user/garb0)
[03:43:41] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:48:18] *** Joins: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de)
[03:52:58] *** Quits: henriquev_ (~henvic@user/henriquev) (Ping timeout: 244 seconds)
[03:55:16] *** Joins: henriquev (~henvic@user/henriquev)
[04:00:08] *** Quits: martinkennelly (~martinken@84.203.21.166) (Quit: Leaving)
[04:02:29] *** Quits: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[04:05:45] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d) (Remote host closed the connection)
[04:21:04] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[04:37:13] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 268 seconds)
[04:38:19] *** Joins: trufas (~trufas@177.240.218.218)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:34] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:26] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[04:50:50] *** Quits: arcatech (~arcatech@user/arcatech) (Remote host closed the connection)
[04:52:26] *** Joins: arcatech (~arcatech@user/arcatech)
[04:57:28] *** Joins: yoonkn (~user@175.197.208.79)
[05:01:12] *** Joins: daveed (~ride@user/daveed)
[05:02:42] *** Quits: treethought (treethou@138.68.49.251) (Remote host closed the connection)
[05:03:42] *** Joins: treethought (treethou@138.68.49.251)
[05:06:53] *** Joins: bpalmer (~user@user/bpalmer)
[05:37:18] *** Quits: KekSi (~KekSi@x4db68249.dyn.telefonica.de) (Ping timeout: 272 seconds)
[05:40:36] *** Joins: KekSi (~KekSi@x4dbe8f8a.dyn.telefonica.de)
[05:43:52] *** Joins: frost (~frost@59.71.241.179)
[05:44:20] *** Quits: src (~src@user/src) (Quit: leaving)
[05:45:21] *** Quits: _rubik (~rubik@user/rubik/x-6853868) (Remote host closed the connection)
[05:45:44] *** Joins: _rubik (~rubik@2601:646:401:1b20::c4de)
[05:55:25] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 256 seconds)
[06:00:50] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 252 seconds)
[06:00:59] *** Quits: _rubik (~rubik@2601:646:401:1b20::c4de) (Changing host)
[06:00:59] *** Joins: _rubik (~rubik@user/rubik/x-6853868)
[06:05:09] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[06:07:51] *** Joins: Garb0 (~Garb0@user/garb0)
[06:08:48] *** Quits: frost (~frost@59.71.241.179) (Ping timeout: 268 seconds)
[06:19:16] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 265 seconds)
[06:26:38] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:27:22] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[06:28:01] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[06:47:02] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[07:00:44] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:01:44] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[07:07:52] *** Joins: andlabs (~andlabs@74.sub-174-244-128.myvzw.com)
[07:09:25] *** Joins: nmz (~nmz@adsl-72-50-4-119.prtc.net)
[07:10:08] <Vigdis> I think minio/minio uses gopsutil, but I can't find it in https://github.com/minio/minio/blob/master/go.mod. So I assume it's a dep of a dep. How can I find which dep(s) pull(s) gopsutil?
[07:20:34] *** Joins: Maxattax97 (~max@2603:900a:1501:a7ca::100)
[07:21:09] <Vigdis> go mod graph | grep gopsutil # seems to help
[07:23:20] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:28:06] *** Joins: Guest43 (~Guest43@2600:1007:b007:a13c:19cd:3f5b:e848:7aa5)
[07:33:11] *** Joins: frost (~frost@59.71.241.179)
[07:35:26] *** Joins: SincereFox (uid337158@user/sincerefox)
[07:40:22] *** Joins: daveed (~ride@user/daveed)
[07:45:52] *** Quits: andlabs (~andlabs@74.sub-174-244-128.myvzw.com) (Ping timeout: 272 seconds)
[07:52:43] *** Quits: Guest43 (~Guest43@2600:1007:b007:a13c:19cd:3f5b:e848:7aa5) (Quit: Client closed)
[08:02:55] *** Joins: gggp (~textual@36.112.134.194)
[08:03:11] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[08:08:48] *** Joins: Guest43 (~Guest43@2600:1007:b004:19f8:5d9a:b142:9874:36a)
[08:11:31] *** Quits: gggp (~textual@36.112.134.194) (Ping timeout: 268 seconds)
[08:12:45] *** Quits: Guest43 (~Guest43@2600:1007:b004:19f8:5d9a:b142:9874:36a) (Client Quit)
[08:13:54] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[08:14:22] *** Joins: gggp (~textual@60.10.194.47)
[08:21:17] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 258 seconds)
[08:22:28] *** Joins: gggp (~textual@60.10.194.47)
[08:25:54] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[08:27:33] *** Quits: jlindgren (~jlindgren@user/jlindgren) (Quit: ZNC 1.8.2 - https://znc.in)
[08:29:30] *** Joins: jlindgren (~jlindgren@155.138.201.99)
[08:29:30] *** Quits: jlindgren (~jlindgren@155.138.201.99) (Changing host)
[08:29:30] *** Joins: jlindgren (~jlindgren@user/jlindgren)
[08:30:44] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[08:32:05] *** Joins: gggp (~textual@124.126.15.211)
[08:34:56] *** Joins: fef (~thedawn@user/thedawn)
[08:35:37] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[08:37:10] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 272 seconds)
[08:37:24] *** Quits: burningserenity_ (~burningse@102.129.153.49) (Ping timeout: 252 seconds)
[08:47:23] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:50:02] *** Quits: gggp (~textual@124.126.15.211) (Remote host closed the connection)
[08:50:45] *** Joins: gggp (~textual@60.10.194.47)
[09:08:47] *** Joins: icy (~icy@user/icy)
[09:11:52] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 252 seconds)
[09:12:24] *** Quits: _rubik (~rubik@user/rubik/x-6853868) (Quit: WeeChat 3.2)
[09:13:21] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[09:18:07] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[09:18:15] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[09:18:18] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 240 seconds)
[09:18:40] *** Quits: Maxattax97 (~max@2603:900a:1501:a7ca::100) (Quit: WeeChat 3.2)
[09:19:18] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[09:19:47] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[09:22:08] *** Quits: LiftLeft (~LiftLeft@154.21.28.20) (Ping timeout: 272 seconds)
[09:26:48] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:27:49] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[09:32:13] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[09:36:18] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 240 seconds)
[09:38:28] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:38:42] <b0nn> Seriously, is this all that's needed for a lambda on AWS? https://docs.aws.amazon.com/lambda/latest/dg/golang-handler.html
[09:38:49] <b0nn> I mean, apart from the deployment
[09:38:55] *** Joins: arcatech (~arcatech@user/arcatech)
[09:39:46] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[09:40:02] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[09:45:14] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[09:49:45] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[09:50:02] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[09:52:22] *** Joins: andlabs (~andlabs@71.190.119.164)
[09:57:23] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 256 seconds)
[09:59:20] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:59:37] *** Joins: arcatech (~arcatech@user/arcatech)
[10:02:31] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[10:02:46] *** Joins: LiftLeft (~LiftLeft@154.21.23.118)
[10:02:47] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[10:03:53] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[10:07:06] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[10:07:23] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[10:09:22] *** Joins: arcatech (~arcatech@user/arcatech)
[10:10:23] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[10:10:39] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[10:17:55] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[10:21:30] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[10:22:25] *** Quits: LiftLeft (~LiftLeft@154.21.23.118) (Ping timeout: 258 seconds)
[10:23:07] *** Joins: cskr (~cskr@49.207.204.20)
[10:25:36] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[10:28:11] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[10:28:16] *** Quits: cskr (~cskr@49.207.204.20) (Quit: Leaving)
[10:30:46] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[10:33:01] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[10:41:08] *** Joins: gpeskens (~gpeskens@2001:985:7aa4:1:f1b0:e710:2007:a6b0)
[10:42:47] <LambdaComplex> yep
[10:44:44] *** Quits: Chepra (~chepra@summer.c137.eu) (Quit: WeeChat 3.1)
[10:46:30] *** Joins: Chepra (~chepra@summer.c137.eu)
[10:47:03] *** Joins: LiftLeft (~LiftLeft@154.21.114.145)
[10:49:54] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Remote host closed the connection)
[11:03:34] *** Quits: jespada (~jespada@90.254.247.46) (Ping timeout: 268 seconds)
[11:04:58] *** Joins: jespada (~jespada@90.254.247.46)
[11:07:16] *** Quits: hikhvar796 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[11:07:16] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[11:20:52] *** Joins: gggp (~textual@36.112.135.215)
[11:22:09] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:24:31] *** Joins: oxum (~oxum@136.185.148.86)
[11:29:00] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 252 seconds)
[11:32:40] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[11:33:11] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[11:33:59] *** Joins: arinov (~arinov@85.104.57.247)
[11:35:51] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[11:36:19] *** Joins: ays1 (~Thunderbi@43.245.87.215)
[11:36:48] *** ays1 is now known as ays
[11:38:40] <ays> What would be a good place to start implementing a Go syntax parser?
[11:39:17] <A_Dragon> you could check out the internal go one?
[11:44:46] *** Quits: gggp (~textual@36.112.135.215) (Ping timeout: 252 seconds)
[11:46:56] *** Joins: gggp (~textual@60.10.23.171)
[11:47:27] *** Quits: arinov (~arinov@85.104.57.247) (Ping timeout: 265 seconds)
[11:49:39] <ays> I was wondering how clean the go parser was..also where is the central repo for Go exactly?
[11:49:39] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:50:38] <A_Dragon> https://github.com/golang/go one place to get it
[11:50:55] <A_Dragon> parser is in I think src/go/parser
[11:51:28] <ays> Thanks! Aside - Are golang.org and go.dev managed by different teams?
[11:51:46] *** Joins: jimmy_ (~jimmy___@2607:fa49:4b00:7000:ac5a:4dbc:2559:6762)
[11:51:51] *** Quits: gggp (~textual@60.10.23.171) (Ping timeout: 256 seconds)
[11:53:33] *** Joins: gggp (~textual@60.10.194.47)
[11:54:07] *** Joins: oxum (~oxum@136.185.148.86)
[11:54:14] <A_Dragon> Right now I don't believe so
[11:55:49] *** Quits: jimmy (~jimmy___@2607:fa49:4b00:7000:5515:7ca6:7a97:5491) (Ping timeout: 256 seconds)
[11:58:05] *** Quits: LiftLeft (~LiftLeft@154.21.114.145) (Ping timeout: 265 seconds)
[11:58:42] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 252 seconds)
[12:05:00] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Read error: Connection reset by peer)
[12:05:23] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[12:11:48] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[12:22:36] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[12:26:52] *** Quits: milosz (~milosz@user/milosz) (Quit: Leaving)
[12:29:30] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[12:31:08] *** Joins: gggp (~textual@60.10.194.47)
[12:36:07] *** Joins: mrig (~mrig@user/mrig)
[12:45:47] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 258 seconds)
[12:46:00] *** Joins: gggp (~textual@60.10.194.47)
[12:52:25] *** Joins: CoolerX (~CoolerX@user/coolerx)
[13:02:22] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[13:02:34] *** Joins: oxum (~oxum@136.185.148.86)
[13:02:59] *** Joins: gggp (~textual@60.10.194.47)
[13:06:23] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[13:06:40] *** Joins: embik (~embik@user/embik)
[13:07:05] *** Quits: gggp (~textual@60.10.194.47) (Remote host closed the connection)
[13:08:03] *** Joins: gggp (~textual@60.10.194.47)
[13:08:09] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:08:22] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 252 seconds)
[13:09:02] *** Joins: Kane (~Kane@home.yarg.fr)
[13:11:45] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[13:13:18] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[13:13:32] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:14:41] *** Joins: gggp (~textual@60.10.194.47)
[13:17:48] *** Quits: embik (~embik@user/embik) (Quit: WeeChat 3.2)
[13:20:00] *** Joins: Crassus (~Crassus@user/crassus)
[13:21:17] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:28:44] *** Quits: thunfisch (~thunfisch@user/thunfisch) (Read error: Connection reset by peer)
[13:29:07] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[13:29:11] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[13:29:45] <mikoto-chan> >A receiver base type cannot be a pointer or interface type and it must be defined in the same package as the method
[13:30:11] *** Parts: acagastya (~acagastya@wikinews/acagastya) ()
[13:30:31] <A_Dragon> mikoto-chan: hmm?
[13:30:50] <mikoto-chan> how do I work around this? I have a *template.Template type in my main function that isn't available to my function's scope
[13:30:56] <mikoto-chan> wait I will send the code
[13:31:06] <A_Dragon> you just want to tack some extra methods onto a template.Template?
[13:32:38] <mikoto-chan> https://bpa.st/MFWA
[13:32:43] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[13:32:47] <mikoto-chan> sorry if this is horrible wrong in any case
[13:33:00] *** Joins: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de)
[13:33:22] <A_Dragon> why do you want to add that method to template?
[13:33:30] <mikoto-chan> tmpl needs to be accessible to my function and a method for this seemed to be the best solution
[13:33:48] <A_Dragon> someone will yell at me for this: you can use a global if you really need to
[13:34:05] <mikoto-chan> why not just pass it in as a function parameter?
[13:34:25] <A_Dragon> thats an option too, but as you've noticed you cant define methods onto template.Template
[13:34:35] <A_Dragon> oh you have a bug there
[13:34:38] <mikoto-chan> honestly this is my first time using html/template
[13:34:38] <A_Dragon> before I continue
[13:34:49] <mikoto-chan> yes, I have lots of bugs :P
[13:34:54] <A_Dragon> line 11, you're calling takeInput
[13:34:59] <mikoto-chan> without paramters
[13:35:05] <A_Dragon> mhmm
[13:35:20] <mikoto-chan> yes idk what to pass since all tutorials use an anonymous function for their http.HandleFunc()
[13:35:29] <A_Dragon> why not use an anon function?
[13:35:40] <mikoto-chan> will that solve the issue?
[13:35:51] *** Joins: thunfisch (~thunfisch@user/thunfisch)
[13:35:53] <mikoto-chan> I tend to avoid them
[13:35:53] <A_Dragon> you want to access templ to be able to execute it?
[13:35:59] <mikoto-chan> yes
[13:35:59] <A_Dragon> as in templ as defined at line 9?
[13:36:09] <A_Dragon> yep, closures can access the upper scope
[13:36:11] <bpalmer> mikoto-chan: HandlerFunc is a type, so you want to convert a function to it, not convert the result of calling a function.
[13:36:24] <A_Dragon> ^ this too, which is what my comment was about
[13:36:33] <bpalmer> mikoto-chan: so, http.HandlerFunc(takeInput)  , not http.HandlerFunc(takeInput())
[13:36:39] <A_Dragon> that will actually work if you use tmpl.takeImput, unable to compile aside
[13:36:51] <A_Dragon> anon func is waht you want for a simple case like that
[13:36:52] <mikoto-chan> bpalmer: yes, wasn't sure if I needed those brackets, thanks
[13:37:11] <A_Dragon> to explore the OTHER question, just for knowledges sake
[13:37:21] <A_Dragon> you can define a new type that is the same as a template.Template
[13:37:26] <A_Dragon> then add your methods onto that
[13:37:32] <bpalmer> takeInput could be a function defined that closes over the template, rather than 'abusing' a method simply to get the receiver automatically passed in.
[13:37:39] <A_Dragon> ^
[13:37:44] <A_Dragon> it should be that
[13:38:00] <bpalmer> yeah, sorry, I'm redundant with what A_Dragon was saying.
[13:38:12] <A_Dragon> eh, different terminology, helpful <3
[13:38:24] <A_Dragon> the tl;dr is an anon function is what you want here
[13:38:31] <A_Dragon> they're okay when used in moderation
[13:38:38] <A_Dragon> especially when you want access to an upper scope
[13:38:59] <mikoto-chan> the official formatting makes anon functions confusing tbh
[13:39:28] <A_Dragon> so all you need there is `http.HandleFunc("/captcha", func (w http.ResponseWriter, r *http.Request) {/* your code here */ })`
[13:39:31] <A_Dragon> and what about it?
[13:40:15] <bpalmer> you could also just give it a name:   takeInput := func(w http.ResponseWriter, r *http.Request) { /*...*/ }
[13:40:27] <mikoto-chan> bpalmer: inside of main?
[13:40:29] <bpalmer> yes.
[13:40:29] <A_Dragon> yeah
[13:40:38] <mikoto-chan> I like naming my things instead of throwing around magic constants
[13:40:38] <bpalmer> That may help make it more readable for you.
[13:40:47] <A_Dragon> bpalmer: does the spec let you do non-anon functions as closures?
[13:40:50] <A_Dragon> I dont remember
[13:40:53] <A_Dragon> I dont THINK so
[13:41:14] <bpalmer> any time you define a function inside another, you can close over the local values.
[13:41:33] <bpalmer> The only way to do that inside a function is to assign an unnamed func to a variable.
[13:41:51] <A_Dragon> yeah thats what I was asking, couldnt remember if a named func works. and sorry Im abusing the word closure
[13:41:53] <bpalmer> (or use the unnamed func directly, I mean)
[13:41:54] <A_Dragon> bad habit of mine
[13:42:12] <A_Dragon> I often use closure to mean nested function but thats not strictly correct
[13:42:32] <mikoto-chan> good, it works now :)
[13:42:54] <A_Dragon> but yeah HandleFunc is often where anon funcs are used
[13:43:10] <A_Dragon> its not super magicy simply because you dont store a copy of it
[13:43:33] <A_Dragon> there are a few other places that use predicates as well (sort.Slice or whichever one takes a less comes to mind_
[13:43:36] <A_Dragon> s/_/)
[13:45:48] *** Joins: oxum (~oxum@136.185.148.86)
[13:53:18] <mikoto-chan> hmmm, weird. when I serve an HTML file with a golang web server the images don't display, do I need to parse these or something?
[13:54:07] <bpalmer> mikoto-chan: do you serve the images?
[13:54:08] <A_Dragon> how are you serving the images?
[13:54:23] <bpalmer> mikoto-chan: try requesting the image URLs with something like curl -- do you get bytes back, or an error?
[13:54:24] <mikoto-chan> https://stackoverflow.com/questions/47115482/how-do-you-insert-an-image-into-a-html-golang-file
[13:54:24] <A_Dragon> your HTML can reference them but you also need to provide access to them on the HTTP server
[13:54:29] <mikoto-chan> answer found ._.
[13:54:34] <mikoto-chan> bpalmer: just <img>
[13:54:41] <mikoto-chan> it's a file on my PC
[13:54:54] <A_Dragon> yeah but are you serving that directory?
[13:55:04] <A_Dragon> the HTTP server wont just let anyone access any directory
[13:55:06] <bpalmer> mikoto-chan: so you're using <img src="file:///home/mikoto-chan/images/file.jpg"> or the like?
[13:55:17] <A_Dragon> when your browser sees img it asks the webserver for that file
[13:55:24] <mikoto-chan> bpalmer: nope, relative path since the image is in the same directory
[13:55:46] <mikoto-chan> browser inspector says `src="./out.png"`
[13:56:04] <bpalmer> mikoto-chan: if it's src="file.jpg" , and you're retrieving the base HTML over http (or https), that relative path will also be requested over http or https
[13:56:05] <mikoto-chan> I used template.ParseFiles, could that be it?
[13:56:20] <mikoto-chan> bpalmer: interesting, how do I avoid that?
[13:56:25] <bpalmer> mikoto-chan: your server is responsible for delivering those bytes when it's asked for; you probably haven't configured that.
[13:56:27] <ikke> that's how html works
[13:56:32] *** Joins: Garb0 (~Garb0@user/garb0)
[13:56:32] <bpalmer> (But debugging with curl will show you if that's the case)
[13:56:42] <ikke> each image is a separate request
[13:57:06] <ikke> you need to tell the webserver how to deliver those images if they are not files on a disk
[13:57:21] <bpalmer> mikoto-chan: you can deliver images inline by using a base64-encoded data link, but otherwise, set up your http server to handle the image requests. You may want to look at http.FileServer
[13:59:33] <bpalmer> if you are using chrome, you can use the network inspector to see each request the browser is making when the page is loadd. (Firefox has similar tools, but I don't remember how to access them offhand and don't have it handy)
[14:00:12] <ikke> same way
[14:00:31] <mikoto-chan> bpalmer: yes, now I see, it's trying to fetch http://localhost:8080/out.png
[14:00:46] <mikoto-chan> that's a good thing but do I have to create a handler for this as well?
[14:00:47] <ikke> what is listening on 8080?
[14:00:51] <ikke> yes
[14:00:52] <mikoto-chan> just a root handler I guess
[14:01:04] <mikoto-chan> I only wrote a handler for one specific path ...
[14:01:10] <A_Dragon> mikoto-chan: your HTTP server isnt configured to serve files
[14:01:14] <ikke> right, so you need to handle other resources as well
[14:01:18] <A_Dragon> ^
[14:01:23] <mikoto-chan> A_Dragon: any article about this?
[14:01:24] <bpalmer> often times, you'll do something like set up a file handler for anything starting with '/images/' that then just looks at a given directory and serves a file of that name
[14:01:36] <mikoto-chan> I only need to serve one image
[14:01:40] <A_Dragon> mikoto-chan: check out http.FileServer
[14:01:50] <bpalmer> then you can hard-code in that path as a handler.
[14:01:54] <A_Dragon> ^
[14:01:54] *** Joins: michelem (~Adium@51.154.167.11)
[14:02:16] <A_Dragon> but also, please if you need to serve more, do NOT write your own fileserver implementation
[14:02:31] <A_Dragon> it is very easy to build lovely traversals that will cause all sorts of problems later
[14:02:58] <ikke> and not using sendfiles
[14:03:39] <A_Dragon> also in your single path handler, dont forget to set the Content-Length header
[14:06:09] <mikoto-chan> yes, that worked :^)
[14:06:20] <mikoto-chan> I will have a seperate images/ subdir just in case I guess
[14:16:35] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 268 seconds)
[14:17:26] <A_Dragon> mikoto-chan: remember to use a FileServer if you do that subdir
[14:17:42] <A_Dragon> lest I ask for ../../../../../../../../../../../../../../etc/passwd
[14:18:08] <ikke> classical vulnerability
[14:20:18] <A_Dragon> or, if you strip out leading ../, ./../
[14:20:47] <ikke> You need to resolve it to an absolute path
[14:20:51] <ikke> and then verify it,
[14:20:53] <A_Dragon> always
[14:21:04] <ikke> or just use existing components that already handle that
[14:21:10] <A_Dragon> ^
[14:21:14] <A_Dragon> much better idea
[14:21:26] <A_Dragon> because thats not the only traversal
[14:21:33] <A_Dragon> symlinks and other things too
[14:22:02] *** Joins: kjz (~kjz@pool-74-104-159-75.bstnma.fios.verizon.net)
[14:23:01] *** Quits: kjz (~kjz@pool-74-104-159-75.bstnma.fios.verizon.net) (Client Quit)
[14:26:40] *** Joins: teasea8 (~teasea@user/teasea)
[14:27:25] *** Parts: jimmy_ (~jimmy___@2607:fa49:4b00:7000:ac5a:4dbc:2559:6762) ()
[14:27:30] *** Quits: teasea (~teasea@user/teasea) (Ping timeout: 240 seconds)
[14:27:30] *** teasea8 is now known as teasea
[14:28:33] <mikoto-chan> A_Dragon: isn't that a directory traversal attack?
[14:28:48] <A_Dragon> mikoto-chan: it is
[14:29:23] *** Parts: hedy (hedy@tilde.team/user/hedy) (the lounge - https://webirc.envs.net)
[14:29:24] <mikoto-chan> interesting, aren't there tools out there that can scan your site for all available subdomains and paths?
[14:29:44] <A_Dragon> subdomains? not easily they're opaque, same with paths
[14:29:59] <A_Dragon> are there tools out there that try common ones like .well-known/ etc? yes
[14:30:03] <ikke> unless you expose them through certificates
[14:30:16] <A_Dragon> ^
[14:30:57] <ikke> also certificate transparency logs
[14:31:31] <A_Dragon> but this is why principle of least privs is your friend
[14:31:47] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[14:31:59] <A_Dragon> if your server is owned by `nobody` (but dont do that, make a NEW account), even if it has a vuln like this it only compromises itself
[14:32:03] <A_Dragon> not the system at large
[14:32:44] <ikke> if everythign runs as nobody, it defeats the purpose
[14:32:49] <A_Dragon> ^
[14:33:03] <A_Dragon> suddenly now that everything is nobody, everyone can touch everyone others shit
[14:33:19] <A_Dragon> but its easy to add users
[14:34:06] <michelem> Hi folks. When using `go tool pprof` with a URL endpoint – is it fetching the new endpoint every time I "top" ?
[14:35:25] <A_Dragon> I dont belive so
[14:35:35] <A_Dragon> I believe it downloads the existing dump at that time
[14:35:45] <A_Dragon> and then stores it for display, dont quote me on that though
[14:35:55] <A_Dragon> double check either the docs or source
[14:38:10] *** Joins: Crassus (~Crassus@user/crassus)
[14:40:43] <michelem> I'm struggling to get information on that – the documentation is really bare bones. Even the basics like understanding the meaning of the columns in "top" (flat, sum, cum etc) – any pointer on that?
[14:43:15] <A_Dragon> cum is the total time across the entire run, one sec
[14:44:53] <A_Dragon> https://blog.golang.org/pprof?fileGuid=prJWDc8Hk9cjRkvJ theres an explanation here
[14:46:14] <A_Dragon> also Im wrong on my cum comment sorry, please disregard it
[14:46:31] <A_Dragon> generally when I use pprof I use the web view for times and base stuff on that
[14:49:40] *** Joins: gggp (~textual@60.10.194.47)
[14:52:14] *** Quits: gggp (~textual@60.10.194.47) (Client Quit)
[14:52:33] <michelem> thank you A_Dragon
[14:53:10] <A_Dragon> no problem
[14:54:24] <michelem> I'm struggling to locate the origin of the problem. The application starts with 14M of resident memory, and grows by ~1 MB every 2 minutes. However, using "web" on "inuse_space" (differental from the base.heap) shows the count of allocations not growing.
[14:54:27] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[14:56:18] <A_Dragon> you might be seeing the GC not working super hard to keep your program lean
[14:56:27] <A_Dragon> when not under a bunch of pressure its not gonna constantly run
[14:56:39] <A_Dragon> dont leave this in your code but you can test by forcing a GC invocation
[14:57:26] <michelem> interesting, that's very useful to know
[14:58:11] <A_Dragon> it also may be go not releasing memory back to the system immediately after a GC
[14:58:20] <A_Dragon> or the system not reclaiming it
[15:02:28] <michelem> I go 90/10 and speculate you hit the nail on the head. I see memory growing quickly from 14M to 19M, then slowly up to 24M and not grow further. I'll let it run for a few hours to see if that confirms it.
[15:03:24] *** Quits: g2anj (~v@221.142.186.101) (Ping timeout: 258 seconds)
[15:03:58] <A_Dragon> its also possible you DO have a leak somewhere
[15:04:12] <A_Dragon> keeping hold of a slice of a big array is a great way to do that
[15:04:27] <michelem> sure. If that's the case, it'll show in a few hours
[15:04:48] <A_Dragon> `x = some500EntryArray[0:1]`, x holds the same amount of data as `some500EntryArray`
[15:04:59] <A_Dragon> because both slices hold references to the same array
[15:05:03] <A_Dragon> and thus keep it alive
[15:05:40] <michelem> I learned today that I need to assign to nil a cell in slice, if it's a slice of pointers, in order to have it GCed. I'm still unclear on why, but I brought that in consistently in the code.
[15:06:07] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[15:06:08] <A_Dragon> uhh I think thats a recursive reference problem
[15:06:10] <A_Dragon> Im not entirely sure
[15:06:16] <A_Dragon> but yes that will do it too
[15:06:19] <michelem> Yes, I read of the various "kind-of memory leaks" in a blog post. That's essential information to know, it should be in the tour of go too
[15:06:31] <A_Dragon> nah, they're footguns that should be fixed
[15:06:38] <A_Dragon> one day they may be
[15:08:19] *** Joins: g2anj (~v@221.142.186.101)
[15:08:29] <michelem> A_Dragon: good attitude :)
[15:08:50] <A_Dragon> if it was a more signifigant leak I'd agree
[15:09:10] <A_Dragon> but for the most part (as I understand it) it SHOULD be fine if the slice is GCed entirely
[15:09:29] <A_Dragon> slice drops references, references dangle, GC noms references
[15:11:34] <michelem> btw, I found out about the Go track on https://exercism.io a couple of weeks ago. Huge kudos to that project, and kudos to any of you guys in this channel who happens to be mentor there.
[15:12:21] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[15:14:10] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[15:15:09] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[15:17:10] <CoolerX> What is the usual way to specify types and methods?
[15:17:13] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[15:17:28] <ikke> CoolerX: can you elaborate?
[15:17:30] <CoolerX> put the type in a separate types package and put the methods of the struct in a separate package?
[15:17:47] <ikke> I would keep them together
[15:23:17] <A_Dragon> ^
[15:23:27] <j416> ^
[15:23:36] <A_Dragon> unless you have a very good reason to put methods in a different file dont, its just harder to understand whats going on otherwise
[15:24:03] <A_Dragon> my "general" format is struct followed by a New func if it needs one, followed by its methods
[15:24:10] <j416> ^
[15:25:51] <A_Dragon> what I have done before when I have LOTS of methods is broken up by concept into different files
[15:26:08] <A_Dragon> eg for an IRC bot I have all of the hook$MessageType stuff in one file
[15:26:14] <CoolerX> ok
[15:26:19] <CoolerX> That makes sense
[15:26:21] <A_Dragon> but 90% of the time you dont need that
[15:26:48] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[15:27:06] <j416> the rule is, whatever is more readable
[15:27:30] <j416> (obviously)
[15:27:45] <ikke> One thing that I appreciate in projects is when you can see the domain model of a project reflected in the file structure
[15:27:53] *** Quits: oxum (~oxum@136.185.148.86) (Remote host closed the connection)
[15:28:23] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[15:28:24] <j416> ikke: do you have an example of something where that is the case?
[15:29:15] *** Joins: gggp (~textual@106.37.74.209)
[15:29:47] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[15:29:53] <j416> I immediately think of the Ben Johnson-style layout (I think it reflects the domain pretty well), but perhaps you meant something else/more.
[15:30:26] <CoolerX> ikke, yeah
[15:30:52] <j416> maybe I'm reading too much into this. :D
[15:31:03] <j416> I thnk I get what you mean.
[15:35:46] *** Quits: gggp (~textual@106.37.74.209) (Ping timeout: 252 seconds)
[15:36:39] *** Joins: gggp (~textual@60.10.194.47)
[15:39:09] <ikke> j416: trygbe reenskaug has talks about it
[15:39:43] <ikke> basically the opposite of what a lot of frameworks want you to do
[15:39:55] <ikke> models/ views/ controllers/ templates/
[15:40:48] *** Quits: alip (~alip@exherbo/developer/alip) (Ping timeout: 256 seconds)
[15:42:29] <j416> thanks.
[15:42:42] <A_Dragon> ugh I never do that, it seems so stiff and gross
[15:44:57] <ikke> You have to go 5-layers deep for you can see what the application is about
[15:45:23] *** Quits: ays (~Thunderbi@43.245.87.215) (Ping timeout: 268 seconds)
[15:46:34] *** Joins: _qin_ (~Guest23@h202-218-160-185.ablenetvps.ne.jp)
[15:47:35] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Ping timeout: 256 seconds)
[15:48:01] *** Parts: _qin_ (~Guest23@h202-218-160-185.ablenetvps.ne.jp) ()
[15:48:27] <ikke> Is something like cobra recommended for smallish tools, or is it overkill?
[15:52:18] <mikoto-chan> I have an image stored as a slice of bytes, can I represent it in an <img> tag without saving it to disk first? (sorry for asking a question about this again)
[15:52:57] <mikoto-chan> I know I can write to /tmp but I'm honestly a little paranoid
[15:52:58] <ikke> You can provide the image as the body as a response, and set the approriate content-type
[15:53:10] <ikke> there is no need to store it to disk first
[15:53:21] <mikoto-chan> ikke: so by changing http.ResponseWriter?
[15:54:39] <ikke> What kind of handler do you have?
[15:54:56] *** Quits: michelem (~Adium@51.154.167.11) (Quit: Leaving.)
[15:55:01] <mikoto-chan> oh well, maybe I should explain it a little bit
[15:55:04] *** Joins: michelem (~Adium@51.154.167.11)
[15:55:27] *** Quits: michelem (~Adium@51.154.167.11) (Client Quit)
[15:55:43] <mikoto-chan> this is an example of what I want: https://midi.moe/f/fcpkc.jpg
[15:56:19] <ikke> The favicon, or just showing the image?
[15:56:39] <ikke> mikoto-chan: do you have something like this? https://golang.org/pkg/net/http/#example_HandleFunc
[15:56:42] <mikoto-chan> I want to be able to send people a URL with an image, the URL should contain an MD5 of some text appended by ".png"
[15:57:16] <ikke> You can have a dedicated HandleFunc
[15:57:17] <mikoto-chan> ikke: yes, I don't need http.FileServer anymore if I'm wrong, I inspected the site and it Firefox seems to be adding some special CSS to image previews
[15:57:42] <mikoto-chan> s/wrong/right/
[15:57:48] <ikke> That func that just returns the correct bytes, instead of a string
[15:58:08] <ikke> If the images are not stored on disk, then no, you do not need it
[15:58:30] <mikoto-chan> should I have an http.Handle("/f") or ("/f/")?
[15:59:14] <ikke> https://golang.org/pkg/net/http/#ServeMux
[16:02:16] <mikoto-chan> ikke: is it safe/good behavior to have a handler for the literal file name i.e. Handle("/f/foobar.png") ?
[16:02:43] <ikke> depends on your usecase
[16:03:25] <mikoto-chan> serving temporary images
[16:03:39] <ikke> if /f/foobar.png has a specific meaning, and other filenames might have a different meaning, then yes, adding very specific handler makes sense
[16:04:00] <mikoto-chan> if I'm not wrong I'll have to restart my program every time I need to generate a new URL
[16:08:09] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[16:11:48] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:15:12] *** Joins: Garb0 (~Garb0@user/garb0)
[16:15:34] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Quit: A lol made me boom.)
[16:16:05] <j416> there are routers that'll let you modify that, but if the filename changes you'd be better off dealing with that in the handler, which you set for "/f/" (with trailing slash).
[16:17:29] <j416> then look at the request path. or, if these are actual files on disk, you may want to consider http.FileServer.
[16:17:41] <j416> mikoto-chan: ^
[16:21:47] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[16:22:28] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[16:23:18] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[16:23:50] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[16:26:02] *** Joins: frm (~frm@user/frm)
[16:41:20] *** Joins: src (~src@user/src)
[16:41:25] *** Quits: frm (~frm@user/frm) (Ping timeout: 256 seconds)
[16:42:48] *** Joins: frm (~frm@user/frm)
[16:45:35] *** Joins: oxum (~oxum@136.185.148.86)
[16:50:12] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 252 seconds)
[17:00:48] *** Joins: andlabs (~andlabs@71.190.119.164)
[17:09:28] *** Joins: Torr (~Torr@user/torr)
[17:11:23] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d)
[17:12:24] *** Joins: fef (~thedawn@user/thedawn)
[17:16:15] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[17:19:19] *** Joins: Garb0 (~Garb0@user/garb0)
[17:22:24] *** Quits: Garb0 (~Garb0@user/garb0) (Client Quit)
[17:22:48] <CoolerX> for keying a map with a pair of strings
[17:23:15] <CoolerX> is it better to use https://play.golang.org/p/DWPJjp6OKWw
[17:23:22] *** Quits: noonien (~noonien@user/noonien) (Ping timeout: 265 seconds)
[17:23:41] <CoolerX> or map[string]map[string]bool ?
[17:24:29] <j416> CoolerX: which is easier?
[17:26:12] <Sam> The first is going to be way easier to index. You might also consider just appending the strings with a separator, ie. src + ":" + dst or something.
[17:26:34] <CoolerX> since the strings are filepaths I don't know if : is a good idea
[17:27:05] <Sam> It's fine, it's just a key.
[17:27:27] *** Joins: noonien (~noonien@user/noonien)
[17:27:53] <Sam> The character doesn't matter, it's just to have some separator so that src="a" dst="ab" and src="aa" dst="b" don't map to the same thing.
[17:29:17] *** Joins: dalan9 (~dalan@58-7-111-121.tpgi.com.au)
[17:29:18] <A_Dragon> hell if you really wanted to add extra work and be SURE, you could do sha256(src\x00dst)
[17:29:23] <A_Dragon> and yes THAT as your key
[17:29:30] <j416> well, "foo:bar" + ":" + "baz" would give the same key as "foo" + ":" + "bar:baz", so still worth thinking about.
[17:30:25] <j416> CoolerX: think about the use-case and adapt to that.
[17:30:27] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[17:30:44] <j416> perhaps you don't even need two paths. ¯\_(ツ)_/¯
[17:30:45] <CoolerX> ok
[17:30:50] <Sam> Is : allowed in filepaths then? Maybe I misunderstood, I thought it wasn't for some reason. When I said "doesn't matter" I meant "as long as it's not valid in paths"
[17:30:54] *** Quits: dalan (~dalan@59-102-28-124.tpgi.com.au) (Ping timeout: 252 seconds)
[17:30:54] *** dalan9 is now known as dalan
[17:31:13] <j416> Sam: on Windows, I suppose
[17:31:31] <Sam> Totally valid on linux, nevermind, ignore me.
[17:32:06] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:32:15] <j416> nod. https://termbin.com/wq9j
[17:32:59] <j416> seems inconvenient to use it though (e.g. PATH uses : as separator)
[17:33:08] <j416> so perhaps not common
[17:33:33] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 256 seconds)
[17:33:38] <ikke> in linux (ext4) only / and \0 are not allowed
[17:33:48] <Sam> You could use whatever and just escape it in each path first, but yah, seems pointless now that I realize I was wrong. Structs are for exactly this (multiplicitive combinations of values), so that seems fine.
[17:33:54] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[17:34:22] *** Joins: Garb0 (~Garb0@user/garb0)
[17:34:28] <Sam> Or separate with \0 and assume that's invalid everywhere.
[17:36:29] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:40:37] *** Joins: andlabs (~andlabs@71.190.119.164)
[17:43:10] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[17:49:36] <jay_wild> if I have a linux go binary, is there any way to check if it was compiled with CGO?
[17:54:17] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[17:57:26] *** Quits: _mrlemke_ (~mrlemke@208.74.105.200) (Ping timeout: 258 seconds)
[18:01:16] *** Joins: sizeof_void34 (~Thunderbi@109.252.76.37)
[18:03:41] *** Joins: gggpkm (~gggpkm@60.10.23.171)
[18:05:20] *** Joins: alip (~alip@chesswob.org)
[18:05:25] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[18:05:32] *** Quits: alip (~alip@chesswob.org) (Remote host closed the connection)
[18:06:05] *** Joins: alip (~alip@chesswob.org)
[18:07:08] *** Quits: alip (~alip@chesswob.org) (Remote host closed the connection)
[18:07:44] *** Joins: alip (~alip@chesswob.org)
[18:07:57] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[18:09:03] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[18:09:24] *** Quits: alip (~alip@chesswob.org) (Client Quit)
[18:09:41] *** Joins: alip (~alip@exherbo/developer/alip)
[18:10:15] *** Quits: alip (~alip@exherbo/developer/alip) (Remote host closed the connection)
[18:10:32] *** Joins: alip (~alip@exherbo/developer/alip)
[18:10:44] *** Quits: alip (~alip@exherbo/developer/alip) (Remote host closed the connection)
[18:11:25] *** Joins: alip (~alip@exherbo/developer/alip)
[18:12:20] <lazyreader> Run ‘ldd’ on it and see if it’s linked to libc?
[18:12:25] *** Quits: alip (~alip@exherbo/developer/alip) (Remote host closed the connection)
[18:13:03] *** Joins: alip (~alip@exherbo/developer/alip)
[18:13:09] *** Joins: qilx (~quassel@dynamic-109-81-210-43.ipv4.broadband.iol.cz)
[18:13:57] *** Quits: alip (~alip@exherbo/developer/alip) (Remote host closed the connection)
[18:15:21] *** Joins: fef (~thedawn@user/thedawn)
[18:15:23] <A_Dragon> jay_wild: it very likely was if it touches networking at all
[18:15:37] <A_Dragon> unless someone explicitly enforced netgo the system resolver is used, via cgo
[18:15:45] <Sam> You could look up the value if runtime.iscgo in a debugger, but this will break if they ever change that in the Go source since it's not exported.
[18:16:31] <jay_wild> lazyreader's suggestion worked for my immediate need.  thanks for the suggestions all
[18:17:00] <jay_wild> I was looking for a quick check if some configuration changes for profiling would work without having to deploy everything
[18:22:44] *** Joins: sam1 (~sam1@molly.millions.slask.me)
[18:24:24] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[18:26:49] *** Quits: gggpkm (~gggpkm@60.10.23.171) (Ping timeout: 256 seconds)
[18:30:06] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[18:30:23] *** Joins: mickey (~user@user/mickey)
[18:31:06] *** Joins: larkfisherman (~pasko@178.77.36.12)
[18:31:33] *** Joins: Garb0 (~Garb0@user/garb0)
[18:31:54] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[18:31:54] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-ff70-ff6e-c392-7be9.ip6.gigabit.dk) (Remote host closed the connection)
[18:33:39] *** Quits: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:34:21] <larkfisherman> Hi guys, I have two open connections (net.Conn), what is the best way to establish a bidirectional tunnel between them? Like a bidirectional io.Copy ?
[18:35:21] <A_Dragon> theres io.Pipe IIRC one second
[18:35:26] <A_Dragon> I had to do this for something
[18:35:59] <Sam> If you already have connections and can't use a pipe two goroutines each copying in different directions with io.Copy should be fine. I do this in tests of networking stuff frequently.
[18:36:05] <A_Dragon> I think I just did an io.Pipe pair, one for Reader and one for Writer
[18:36:12] <A_Dragon> s/Pipe/Copy
[18:37:53] <larkfisherman> That sounds so simple
[18:38:02] *** Parts: geoah (~geoah@2001:470:69fc:105::1d59) ()
[18:38:10] <larkfisherman> do you know what happens in edge cases, e.g. when a connection breaks?
[18:38:36] <larkfisherman> Will goroutines linger around forever
[18:39:23] <CommunistWolf> depends on the underlying OS. typically, no, but maybe sometimes
[18:39:29] <A_Dragon> depends on the Conn impl ^
[18:39:42] <A_Dragon> but Copy will stop when it gets an error on either end
[18:39:42] <larkfisherman> I see, thanks everyone!
[18:39:50] <CommunistWolf> if you're on linux and it hits process state D, it could easily hang forever, for instance
[18:39:51] <A_Dragon> so assuming you GET an error then yes it will stop
[18:40:00] <A_Dragon> mmm zambehs
[18:40:03] <A_Dragon> but thats unlikely
[18:40:09] <A_Dragon> ohwait D isnt zombie its
[18:40:11] <A_Dragon> the other one
[18:41:11] <ikke> D is uninterruptable sleep[
[18:41:19] <ikke> but that only happens when it's blocked on a syscall
[18:41:21] <A_Dragon>  oh IO wait
[18:41:24] <A_Dragon> yeah
[18:42:17] <ikke> and timeouts should get you unstuck
[18:42:32] <A_Dragon> ah yes reminder to always use timeouts on your net.Dials
[18:42:39] <A_Dragon> because otherwise you're gonna be waiting a while >.>
[18:43:44] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[18:45:48] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[18:46:45] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[18:47:48] *** Joins: gggpkm_ (~gggpkm@36.112.128.143)
[18:49:37] *** Joins: gggp (~textual@60.10.194.47)
[18:50:03] *** Quits: Crassus (~Crassus@user/crassus) (Ping timeout: 256 seconds)
[18:50:52] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[18:51:27] *** Joins: Crassus (~Crassus@user/crassus)
[18:51:34] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 252 seconds)
[18:57:50] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[18:58:41] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[18:58:49] *** Joins: theoceaniscool (~theoceani@93.177.121.14)
[19:01:07] *** Joins: gggp (~textual@60.10.194.47)
[19:07:08] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[19:08:48] *** Quits: gggpkm_ (~gggpkm@36.112.128.143) (Ping timeout: 252 seconds)
[19:14:56] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[19:22:04] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[19:25:37] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1000.inf6.spectrum.com)
[19:27:39] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[19:31:23] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[19:34:35] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[19:37:56] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:38:35] *** Joins: Guest23 (~Guest23@h202-218-160-185.ablenetvps.ne.jp)
[19:39:03] *** Quits: Guest23 (~Guest23@h202-218-160-185.ablenetvps.ne.jp) (Client Quit)
[19:40:47] *** Joins: Guest56 (~Guest56@h202-218-160-185.ablenetvps.ne.jp)
[19:40:57] *** Parts: Guest56 (~Guest56@h202-218-160-185.ablenetvps.ne.jp) ()
[19:42:14] *** Joins: Eddward (~Eddward@207.138.204.132)
[19:46:37] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[19:47:27] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 258 seconds)
[19:53:37] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[20:01:27] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1000.inf6.spectrum.com) (Ping timeout: 256 seconds)
[20:01:38] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 258 seconds)
[20:02:01] *** Quits: theoceaniscool (~theoceani@93.177.121.14) (Ping timeout: 256 seconds)
[20:04:15] *** Joins: alip (~alip@exherbo/developer/alip)
[20:04:19] *** Joins: gggp (~textual@60.10.194.47)
[20:04:29] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[20:05:17] *** Quits: larkfisherman (~pasko@178.77.36.12) (Ping timeout: 265 seconds)
[20:05:28] *** Joins: Garb0 (~Garb0@user/garb0)
[20:06:38] *** Joins: ays (~Thunderbi@43.245.87.215)
[20:13:30] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[20:15:35] *** Joins: daveed (~ride@user/daveed)
[20:15:57] *** Joins: gggp (~textual@106.37.74.209)
[20:19:25] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[20:20:06] <eyJhb> A_Dragon: It works. I ended up running my own system for now, and there is some reflect involved, but it shouldn't be too bad.
[20:20:09] *** Joins: ays1 (~Thunderbi@103.10.28.140)
[20:20:36] <A_Dragon> that works
[20:20:39] <A_Dragon> want a readover?
[20:21:51] *** Quits: ays (~Thunderbi@43.245.87.215) (Ping timeout: 256 seconds)
[20:21:52] *** ays1 is now known as ays
[20:23:46] <eyJhb> Sadly not ready for that yet :p And... Not pretty... This is one of the functions I use quite a lot - https://termbin.com/iog4
[20:24:06] *** Parts: nmz (~nmz@adsl-72-50-4-119.prtc.net) (Ploop)
[20:26:15] <eyJhb> Quick benchmark gives this - `BenchmarkParseStruct-4      225914       6004 ns/op`
[20:27:55] *** Joins: oxum (~oxum@136.185.148.86)
[20:29:03] *** Quits: gggp (~textual@106.37.74.209) (Ping timeout: 268 seconds)
[20:30:16] <eyJhb> Running it 100.000 times takes 0.5s, 1.000.000 -> 5.8s. So I see what you're saying, when you say that reflect is slow. Also, the code is very much not optimized at all, since I have a nested for loop.
[20:33:22] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 268 seconds)
[20:34:54] *** Joins: arcatech (~arcatech@user/arcatech)
[20:35:51] *** Joins: pepee (~user@user/pepee)
[20:41:31] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[20:42:22] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[20:43:53] <A_Dragon> lol
[20:50:10] *** Joins: LiftLeft (~LiftLeft@154.21.28.43)
[20:50:22] *** Joins: gggp (~textual@60.10.194.47)
[21:03:20] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[21:06:37] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 256 seconds)
[21:08:56] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[21:08:58] *** Joins: SincereFox (uid337158@user/sincerefox)
[21:09:47] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:10:39] *** Joins: fef (~thedawn@user/thedawn)
[21:11:51] <eyJhb> I didn't say it was perfect :p But I can always optimize it later. The nested for loop is a pros/cons of adding more fields to my struct :)
[21:12:49] *** Joins: oxum (~oxum@136.185.148.86)
[21:16:08] *** Joins: gggp (~textual@60.10.194.47)
[21:17:58] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 256 seconds)
[21:18:08] *** Quits: Kane (~Kane@home.yarg.fr) (Quit: Leaving)
[21:18:27] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:e57a:bd32:f5d2:cc12)
[21:19:30] *** Quits: alip (~alip@exherbo/developer/alip) (Read error: Connection reset by peer)
[21:29:38] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[21:38:55] *** Quits: ays (~Thunderbi@103.10.28.140) (Ping timeout: 256 seconds)
[21:41:57] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[21:42:10] *** Joins: koo555 (~koo6@89-24-13-235.customers.tmcz.cz)
[21:43:54] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 252 seconds)
[21:44:25] *** Joins: gggp (~textual@60.10.194.47)
[21:44:41] *** Joins: alip (~alip@exherbo/developer/alip)
[21:48:50] *** Quits: koo555 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 272 seconds)
[21:50:10] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[21:56:47] *** Joins: oxum (~oxum@136.185.148.86)
[21:58:30] *** Joins: gggp (~textual@60.10.194.47)
[21:59:40] *** Quits: alip (~alip@exherbo/developer/alip) (Quit: The Way is limitless, so nature is limitless, so the world is limitless, and so I am limitless. For I am abstracted from the world, the world from nature, nature from the Way, and the Way from what is beneath abstraction.)
[22:01:07] *** Quits: gggp (~textual@60.10.194.47) (Client Quit)
[22:01:30] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 252 seconds)
[22:05:31] *** Joins: chance (~chance@user/chance)
[22:05:49] *** Joins: rgl (~rgl@85.245.47.147)
[22:07:27] <chance> Okay. I spent a few days writing a little program, first experience with go. Used a module. Nifty. My next idea was to create tests for it, but its tests involve a large volume of sample data that I don't want to commit to the source repo. So I made another package. My git host is my homeserver and I can only clone by ssh. I assume most of you know
[22:07:28] <chance> where I am going with this. I asked ##programming a couple days ago, now I'm asking here: are git submodules *really* my best option until 1.18?
[22:08:52] <chance> The fact that it's nontrivial to import code from a private repository is REALLY off-putting, like, it's baffling to me that the designers didn't see this coming and I might move on from the language if I can't find a decent solution. It should not be hard to develop on private infra.
[22:13:16] *** Quits: thunfisch (~thunfisch@user/thunfisch) (Read error: Connection reset by peer)
[22:13:57] *** Joins: thunfisch (~thunfisch@user/thunfisch)
[22:18:29] <shiroyasha> chance: There are some Go projects (e.g. the `aerc` email client) that use makefiles, if that helps.
[22:20:09] <shiroyasha> I mean, I see where you're coming from; if they're going to provide their own dependency manager, I would also expect it to support SSH in some way or another.
[22:22:45] <shiroyasha> I've been using cgit over WireGuard for my private stuff, so I guess it's luck that I still haven't needed to use `go get` over SSH.
[22:22:54] <tristero> chance: https://dev.to/johanlejdung/a-mini-guide-go-modules-and-private-repositories-4c7o
[22:24:12] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:24:49] *** Joins: kulak (~kulak@user/kulak)
[22:26:32] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[22:27:16] *** Joins: dunderprotos (~textual@117.254.176.228)
[22:28:36] *** Quits: dunderprotos (~textual@117.254.176.228) (Client Quit)
[22:33:30] *** Quits: Catatonic (~Catatonic@ariel.whatbox.ca) (Quit: Quit)
[22:35:11] <chance> shiroyasha, tristero thanks! in particular, that link explained more about GOPRIVATE in 1 minute than hours of search engine hits on reddit posts
[22:35:39] <chance> having seen the workspaces proposal/plan, the situation clearly isn't irredeemable, but *oof* talk about rough onboarding
[22:39:00] *** Joins: TechnoDelver (~TechnoDel@user/technodelver)
[22:39:57] *** Joins: alip (~alip@exherbo/developer/alip)
[22:40:45] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[22:41:50] <Tv_> chance: i'd make the tests just Skip if the data is not available, not mess up your repo with it
[22:41:57] <Tv_> git submodules are hideous
[22:42:44] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[22:43:01] <Tv_> chance: and that way your program is just a single module, no private import worries
[22:43:30] <chance> i see the perspective, and that answer came up a lot on reddit
[22:43:35] *** Quits: TechnoDelver (~TechnoDel@user/technodelver) (Remote host closed the connection)
[22:44:37] <chance> but it boils down to, "instead of experiencing this problem, create a monolithic codebase," which is just blaming the user for what is straightforwardly a massive design flaw. name one other language where a competent dev might spend hours or days learning to *drop in their own source code as a lib*
[22:44:47] <chance> i'm still loving this language so far, but i'm gonna be mad about that for a long time i think
[22:44:53] <Tv_> chance: the test code belong with the program anyway, in my view
[22:45:02] <Tv_> getting mad ain't productive
[22:45:04] <chance> what if i'm specifically making a lib and then i want to use it? that answer no longer applies
[22:45:13] <Tv_> there's nothing impossible or even really hard about importing private modules
[22:45:20] <Tv_> but even if they were public, i'd say that's the wrong thing to do
[22:45:30] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 252 seconds)
[22:45:35] <chance> slash ignore the dismissive person, every tool has its flaws and its diehards who will keep moving the goalposts
[22:45:44] <chance> i came with a question, question answered, thanks
[22:45:47] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 256 seconds)
[22:45:59] *** Joins: Catatonic (~Catatonic@ariel.whatbox.ca)
[22:52:33] <A_Dragon> ah yes announcing /ignore to intentionally aggravate the target
[22:54:26] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[22:57:12] *** Joins: dr0n (~nabromov@94.11.23.235)
[23:00:37] *** Joins: TechnoDelver (~TechnoDel@user/technodelver)
[23:02:43] *** Joins: DeltaNova (~DeltaNova@user/deltanova)
[23:03:21] *** Joins: oxum (~oxum@136.185.148.86)
[23:06:52] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[23:09:54] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 272 seconds)
[23:15:20] <chance> i don't usually announce it, but occasionally it staves off (and spares them) the next five paragraphs
[23:16:16] <A_Dragon> I wouldnt silence Tv_, they;re a very smart and helpful person. Ive learned over my time here that in general, when they speak out about something they have a reason
[23:16:22] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 258 seconds)
[23:16:27] <A_Dragon> and generally when  ignore them Ill be bitten eventually
[23:17:24] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 268 seconds)
[23:19:48] <chance> i've learned over decades that when somebody who loves a tool responds to a problem with that tool by *justifying* the problem, it usually isn't worth the conversation. even if somebody disagrees with my decision to stick tests in a different repo, the same problem still hits you in any other situation where you wanna import code from a private
[23:19:49] <chance> repository. goroutines are among the coolest things i've ever seen, and i can't think of another language where importing arbitrary libs consists of more than 1) establishing your environment (i thought i did) and 2) putting the code there. these aren't mutually exclusive statements, it's a fresh migrant hitting the obvious consequence of using
[23:19:49] <chance> repo URLs as canonical import paths.
[23:20:02] <chance> which is more than i wanted to say about the problem anyway, which is why i declined the other discussion =P
[23:21:12] <A_Dragon> ¯\_(ツ)_/¯
[23:22:10] *** Joins: foxes (16abab341f@foxes.are.allowed.org)
[23:22:19] <A_Dragon> I'd use a replace directive over a submodule
[23:24:14] <kodah> A_Dragon: it's usually a good idea to let someone know you've /ignore'd them, but you should probably do it with some maturity
[23:25:40] <chance> that's why i came to ask. after a day and a half of scouring the web, the various working solutions i'd found included a combination of git submodules and replace directives, or $GOPRIVATE, or "make them packages in the same module"
[23:26:36] <kodah> chance: you need a vanity domain on your network to help go find your home git server
[23:27:12] <kodah> that's the difficulty you're speaking to
[23:28:16] <chance> it's accessible a number of ways, actually, but the only way i was able to convince go get to go get it over ssh resulted in the `.git` extension coming down. i'm not saying this stuff is insurmountable. you guys don't need to leap to the thing's defense. the only two things i said were that the best advice i'd found so far was git submodules
[23:28:17] <chance> (which was bonkers) and that this situation is infuriating
[23:28:49] <kodah> i'm not leaping to it's defense? i just told you how to do it
[23:29:02] <kodah> it's what i had to do too
[23:29:34] <theckman> chance: in my experience, those at the helms of Modules don't really care about these sorts of problems. Their opinions are heavily shaped by how things work inside of Google, and you're 'holding it wrong' if you try to have a fundamentally different workflow.
[23:30:07] <theckman> A common trope is that issues with Modules can be resolved with tooling, instead of fixing the actual problems.
[23:30:16] <chance> "that's the difficulty you're speaking to." this is why i don't like coming to IRC for advice. everybody would prefer everything to be an X/Y problem. you're not wrong (kodah) but that's still just another ^
[23:30:20] <kodah> if you look at the compiler code for fetching modules it has some provider specific HTTP and SSH connection stuff, then general importation if it can't determine your provider. most people don't need to bother with that because they're developing locally or using github (or other provider) private repos
[23:30:54] <chance> "one way to resolve this is by altering your network topology" is not a reasonable answer to "neither the language nor its built-in dependency manager can handle the fact that i am developing in private repositories"
[23:31:19] <chance> this is not an unreasonable gripe, and i was done talking about it as soon as i had a good answer, which was immediately.
[23:31:19] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Reconnecting)
[23:31:38] <kodah> right, did you want someone to validate you and say that you ran into a pain in the ass edgecase?
[23:32:04] <chance> i don't need validation. what i said ^ about "leaping to the thing's defense"
[23:32:15] <kodah> if you were smart enough to setup a git server i think you're smart enough to create a DNS entry
[23:32:28] <chance> oh golly gee somebody has noted a frustrating imperfection in the tool we use here let me offer fifteen completely unrelated tasks that would work around the imperfection
[23:33:01] <kodah> welp, this borders on wanton insecurity at this point. i'm going to eat an ice cream sandwich.
[23:33:14] <chance> a really stupid problem within a truly excellent tool wasted a day and a half of my life and i am angry about it. i expressed it in one sentence out of a paragraph. i've been taken rounds by three people for ages after the fact because "no u see but ur doin it wrong" when i'm just trying to do something every other language i've ever used can *just
[23:33:15] <chance> do*
[23:36:42] <Sam> I'm sorry you feel piled on; I understand the modules tooling can be very frustrating, but it's probably time to end this discussion. It's going nowhere. Let's move on. Thanks.
[23:37:45] *** Joins: sam__ (~sam@69-218-231-3.lightspeed.tukrga.sbcglobal.net)
[23:38:09] *** sam__ is now known as Guest3527
[23:38:24] *** Quits: sizeof_void34 (~Thunderbi@109.252.76.37) (Quit: sizeof_void34)
[23:38:54] *** Quits: Guest3527 (~sam@69-218-231-3.lightspeed.tukrga.sbcglobal.net) (Changing host)
[23:38:54] *** Joins: Guest3527 (~sam@golang/sam)
[23:38:54] *** ChanServ sets mode: +o Guest3527
[23:38:54] *** Quits: Sam (b8f15a4bbd@golang/sam) (Killed (copper.libera.chat (Nickname regained by services)))
[23:38:54] *** Guest3527 is now known as Sam
[23:39:02] <chance> note timestamps and that i've agreed from word 1, and i'm out.
[23:39:06] *** Parts: chance (~chance@user/chance) ()
[23:40:05] <Sam> Reminder to everyone else that it doesn't matter if you agree if you keep replying. You have to actually do it, not just say it. Anyways, lesson for the future, remember that we follow the community code of conduct and that you can let it go if you feel someone is wrong, etc.
[23:40:21] <Sam> Thanks all.
[23:41:00] *** Quits: Sam (~sam@golang/sam) (Client Quit)
[23:41:41] *** Joins: Sam (b8f15a4bbd@golang/sam)
[23:41:41] *** ChanServ sets mode: +o Sam
[23:41:54] *** Joins: kiril (~kiril@85.91.153.163)
[23:42:17] <A_Dragon> thanks Sam, I realise I likely didnt help that
[23:46:46] *** Joins: theoceaniscool (~theoceani@93.177.121.14)
[23:50:52] *** Joins: hexfive (~eric@50.35.83.177)
[23:51:52] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[23:53:20] *** Quits: hexfive (~eric@50.35.83.177) (Read error: Connection reset by peer)
[23:53:23] *** Joins: hexfifty (~eric@50.35.83.177)
[23:53:30] *** Quits: hexfifty (~eric@50.35.83.177) (Client Quit)
