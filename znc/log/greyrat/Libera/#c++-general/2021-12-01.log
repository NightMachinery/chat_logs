[00:06:51] *** Joins: xq (~xq@user/xq)
[00:09:11] *** Joins: The_Jag (~The_Jag@host-79-13-66-68.retail.telecomitalia.it)
[00:09:36] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:11:24] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:13:51] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[00:14:47] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[00:18:52] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 264 seconds)
[00:22:44] <ashafq> leonardus: Also keep on asking question in this channel :) that helped me a lot
[00:25:58] <LordKalma> I'm with a c++ existencial crisis...
[00:27:13] <LordKalma> On one hand, I really do like this language, even if it makes me start projects from the stone age. It allows me to write libraries that can be consumed pretty much everywhere. On the other hand, it's a dumpster fire of a language for application programming and C# keeps winking at me "come here, take the time to learn the massive stdlib, it'll be worth it, I swear"... idk
[00:28:52] <leonardus> you can use both
[00:29:03] <LordKalma> not ergonomically
[00:29:31] <TheGuestMovie> LordKalma: just take the C# pill. You'll be more employable too.
[00:29:41] <TheGuestMovie> unless you're certain you can be in the top 1% of C++ devs
[00:29:55] <LordKalma> I keep explaining you my employment is based around photonic tecnologies :p
[00:29:59] <TheGuestMovie> oh right
[00:30:06] <TheGuestMovie> set phasers to stun, and all that
[00:30:19] <LordKalma> gotta tune those turbo encabulators
[00:30:44] <LordKalma> This is what I do: https://imgur.com/a/Oq3qDd2 hahaha
[00:30:49] <TheGuestMovie> what if it doesn't work out? I have a friend with a masters in civil engineering, and now he's just a python data science guy getting more work from his 3 months course than from his uni degree
[00:30:56] <LordKalma> sure
[00:31:03] <LordKalma> I have many colleagues turned data scientists too
[00:31:06] <TheGuestMovie> he wasn't some C student either, he used to help me in math in uni
[00:31:16] <TheGuestMovie> he just couldnt find a good job
[00:31:28] <TheGuestMovie> he was parking cars 1 year after graduation
[00:31:28] <LordKalma> civil engineering in particular is on a bad bit
[00:31:41] <LordKalma> depending on the region of course
[00:31:54] <LordKalma> are you in the US?
[00:32:06] *** Joins: proller (~p@2a02:6b8:b081:6410::1:0)
[00:32:19] <TheGuestMovie> Canada. He was looking for jobs in Canada and France.
[00:32:34] <TheGuestMovie> (dual citizen)
[00:32:38] <LordKalma> that said, yeah, I guess I can call myself a decent enough coder to get a job in programming if I ought to, or want to
[00:32:59] <TheGuestMovie> I think if you have contacts to help you find a job in your preferred domain, then great, be confident and go all-in on that
[00:33:12] <TheGuestMovie> but if you're competing with the other 1000 photonics grads for 10 jobs, then...
[00:33:17] <LordKalma> yeah, Civil Engineering depending a lot on big public infrastructure projects, and after the 08 crisis that all went to shit.
[00:33:40] <LordKalma> employment opportunities in my field are sometimes rare to find
[00:33:45] <LordKalma> but engineers are ever harder to find
[00:34:15] <LordKalma> it's like a handful graduates a year
[00:34:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:38] <TheGuestMovie> I would say start reaching out and applying for internships from now. Dont wait until after graduation.
[00:34:44] <LordKalma> and with the automotive industry wanting LiDARs and crap like that the employment offers are on a positive slope
[00:34:51] <LordKalma> yeah I know
[00:35:00] <LordKalma> but I'm a PhD student, not an undergrad hahah
[00:35:07] <LordKalma> so I technically do have a job already :)
[00:35:10] <TheGuestMovie> oh right. ouch
[00:35:38] <TheGuestMovie> hope you finish it man. I think half the guys I knew doing PhDs (I was an undergrad, they were friends of friends) didnt finish them
[00:35:42] <LordKalma> I did do an job hunt campaign in due time when I was graduating
[00:35:45] <TheGuestMovie> but that may say more about the company I keep :)
[00:36:02] <LordKalma> well, with enough anti depressants anybody can finish a phd
[00:36:05] <TheGuestMovie> lol
[00:36:18] <TheGuestMovie> <insert xkcd phd comic here>
[00:37:17] <LordKalma> I'll keep you updated :) but thanks on the industry tips
[00:37:50] <LordKalma> I do have a friend that graduated with me. He has a programmer since high school and even worked a couple jobs for startups during his time at the uni
[00:38:02] <TheGuestMovie> I'm just an eternal pessimist, so also keep that in mind
[00:38:09] <LordKalma> he wanted to work in the game industry, and he does
[00:38:10] <TheGuestMovie> maybe I need the anti-depressants
[00:38:25] <LordKalma> working on the physics engine sides and etc
[00:38:28] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of haunted house decorators at https://indiedevs.net/)
[00:38:37] <TheGuestMovie> like that story you just said, I dont think "how nice, his friend got his dream gamedev job" I think "poor sucker being exploited to work longer hours for less pay"
[00:38:42] <LordKalma> managing environment sound engines, physics engines, that sort of stuff
[00:38:46] <LordKalma> hahahaha
[00:38:55] <LordKalma> his salary is twice mine, but sure
[00:38:55] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:38:56] <LordKalma> :p
[00:39:11] <TheGuestMovie> well you're a PhD, I would be surprised if you made more than a McDonalds worker
[00:39:18] <LordKalma> true
[00:39:20] <TheGuestMovie> unless they pay more in Portugal
[00:39:25] <LordKalma> they don't
[00:39:29] <LordKalma> I mean
[00:39:33] <LordKalma> compared with a mcd worker, sure
[00:39:37] <LordKalma> pay well? no
[00:39:49] <LordKalma> I'll tell you in two years time haha :p
[00:40:21] <LordKalma> that friend was the top programmer in my year at uni
[00:40:36] <LordKalma> second best was either me, or a colleague of ours, can't decide
[00:41:03] <rpav> doesn't it depend like anything? like having a PhD qualifies you for some things, but doesn't guarantee them
[00:41:04] *** Quits: proller (~p@2a02:6b8:b081:6410::1:0) (Ping timeout: 264 seconds)
[00:41:05] <TheGuestMovie> Btw, on your CV, include some info that shows you know how to program, dont just mention the photonics stuff. Being able to automate some processes related to your job is surely a big win for any modern company.
[00:41:11] <TheGuestMovie> if only for data analysis
[00:41:23] <LordKalma> been there done that :p
[00:42:06] <TheGuestMovie> how much your friend make (really my question is "how much does a gamedev make in Portugal")
[00:42:21] <TheGuestMovie> so I can feel sorry about our local salaries
[00:42:35] <TheGuestMovie> but I hear Portugal's the poorest western European country so you may be equivalent to us
[00:44:52] <LordKalma> honestly not sure
[00:45:11] <LordKalma> it's over 20k/y that's for sure
[00:45:16] <LordKalma> but not sure ow much more
[00:45:44] <TheGuestMovie> oh, that's actually worse than here. pleasantly surprised.
[00:46:17] <TheGuestMovie> here we're paying 45k euros for a junior
[00:46:30] <TheGuestMovie> and this is one of the lowest paying areas in North America
[00:46:44] <TheGuestMovie> I dont even mean junior, I mean fresh grad
[00:47:07] <TheGuestMovie> of course half of it will be gone in taxes, but I think in Portugal too
[00:51:15] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:52:11] <LordKalma> this is off topic and thinking about how poorly I'm paid is an anxiety trigger to me, so I'd rather not to
[00:52:28] <LordKalma> sorry, and thanks for the tips, but yeah, already doing that stuff haha
[00:54:38] *** Joins: proller (~p@80.240.216.69)
[00:55:31] <TheGuestMovie> no problo, Rob Lowe
[00:56:06] <TheGuestMovie> I'm gonna dial down the pessimism. You're young, just be happy. Look forward to your sabbatical year after graduation or whatever.
[01:01:26] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[01:07:25] *** Joins: badone (~badone@209.132.189.152)
[01:11:19] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[01:22:19] <johnny> interested in moving tho?
[01:23:02] <johnny> TheGuestMovie, the problem isn't pessimism though. you're probably correct about being exploited in gamedev
[01:23:07] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:23:16] <johnny> it's knowing when to apply the pessimism :)
[01:31:51] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:14f6:792c:9624:6b14)
[01:33:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[01:35:15] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:4de4:2055:b8c4:f1e) (Ping timeout: 264 seconds)
[01:37:44] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[01:38:07] *** Joins: proller (~p@2a02:6b8:b081:8814::1:24)
[01:38:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:38:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:38:57] *** ChanServ sets mode: +v npaperbot
[01:43:02] <kaichiuc1u> to add on the prior discussion, i just got done with an internship interview so uh fingers crossed
[01:44:27] <rpav> luck to all .. but if you know most of the stuff talked about here you'll probably do pretty well
[01:46:18] <ashafq> what to use for copying raw pointers? std::copy or memcpy?
[01:48:39] <rpav> i use `=`
[01:49:57] <rpav> but if you want to copy memory.. well i wrote my own typesafe memcpy<T>(T* src, T* dest) or whatever which is pretty nice
[01:50:07] <rpav> i can never remember if std has something like that, and not find it easily if it does
[01:50:19] <rpav> (it's a crime if not)
[01:50:40] *** Quits: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi) (Ping timeout: 264 seconds)
[01:50:45] <ashafq> rpav: https://en.cppreference.com/w/cpp/string/byte/memcpy Looks like I'll be writing template
[01:51:01] <rpav> yeah that's the imported libc one
[01:51:07] <SuperNintendoSUX> why you need a typesafe memcpy?
[01:51:27] <rpav> so i have to type less and it does the right thing, duh
[01:51:39] <SuperNintendoSUX> looks dumb :)
[01:51:54] <rpav> memcpy(from, to, n);
[01:52:14] <rpav> where `n` is the count, and sizeof(T) can be deduced
[01:52:32] <rpav> and `n` defaults to 1, of course, so memcpy(from, to);
[01:54:38] <kalven> what do you use it for?
[01:55:20] <SuperNintendoSUX> :D
[01:57:05] <Alipha> ashafq: std::copy
[01:58:24] <Alipha> rpav: std::copy_n(from, n, to);
[01:59:15] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[02:07:54] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[02:11:23] <ashafq> Alipha: would std::copy work with float *?
[02:11:57] <Alipha> ashafq: yes. Pointers are iterators
[02:12:58] <ashafq> Alipha: I see, so it would more be like: std::copy(input, input + size, output)
[02:13:26] <Alipha> ashafq: yes. In that case, copy_n probably makes more sense
[02:13:48] <Alipha> std::copy_n(input, size, output);
[02:14:05] <Alipha> And note in both cases, size is number of elements
[02:14:38] <ashafq> Alipha: Will std::copy provide the nice "unrolled" "avx512 optimized" version that memcpy provides?
[02:18:28] <kalven> it should just call memmove
[02:19:46] *** Joins: markong (~kvirc@213.146.188.203)
[02:20:28] <Alipha> ashafq: https://godbolt.org/z/Yre7EKxYx
[02:20:56] <Alipha> apparently __restrict can be useful
[02:22:13] <kalven> and note that things will look a bit different if the count isn't known
[02:23:24] <ashafq> Alipha: very intersting
[02:23:44] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[02:25:20] <Alipha> interesting that cppreference says for copy_n: "Overlap of ranges is formally permitted, but leads to unpredictable ordering of the results." But for std::copy, "The behavior is undefined if d_first is within the range [first, last)." https://en.cppreference.com/w/cpp/algorithm/copy_n
[02:26:29] <Alipha> compiler implementors should overload std::copy for T* and add __restrict to its parameters :-)
[02:27:21] <kalven> it still allows overlapping ranges
[02:27:27] <kalven> just not all of them
[02:28:02] <kalven> if ranges are overlapping, it's up to the user to figure out if they need to use copy or copy_backward
[02:29:13] <Alipha> Ah
[02:49:27] *** Quits: dkdjsm (~dkdjsm@178.49.152.151) (Quit: Client closed)
[03:14:38] *** Quits: Brewster (~Brewster@104.145.226.5) (Ping timeout: 265 seconds)
[03:18:10] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:21:52] *** Joins: Brewster (~Brewster@104.145.226.5)
[03:22:03] *** Quits: Trollmann (~Trollmann@user/trollmann) (Ping timeout: 265 seconds)
[03:23:56] *** Quits: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51) (Quit: WeeChat 3.0)
[03:24:10] *** Joins: davidlowryduda (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51)
[03:24:24] *** davidlowryduda is now known as dld
[03:29:05] *** Quits: The_Jag (~The_Jag@host-79-13-66-68.retail.telecomitalia.it) (Quit: The_Jag)
[03:30:03] *** Quits: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51) (*.net *.split)
[03:30:03] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (*.net *.split)
[03:30:03] *** Quits: Tokamak (~Tokamak@172.58.191.55) (*.net *.split)
[03:30:03] *** Quits: Rayke (rayke@user/rayke) (*.net *.split)
[03:30:03] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (*.net *.split)
[03:30:03] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (*.net *.split)
[03:30:03] *** Quits: kaichiuc1u (~kaichiuch@user/kaichiuchu) (*.net *.split)
[03:30:03] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (*.net *.split)
[03:30:03] *** Quits: r-g (~r-g@195-154-105-157.rev.poneytelecom.eu) (*.net *.split)
[03:30:03] *** Quits: AmR (~AmREiSa@156.199.223.24) (*.net *.split)
[03:30:03] *** Quits: gehn (~gehn@user/gehn) (*.net *.split)
[03:30:03] *** Quits: Burgundy (~yomon@79.115.213.171) (*.net *.split)
[03:30:03] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (*.net *.split)
[03:30:03] *** Quits: undeclared (nullx@user/undeclared) (*.net *.split)
[03:30:03] *** Quits: nshire (~nshire@user/nshire) (*.net *.split)
[03:30:03] *** Quits: smeso (~smeso@user/smeso) (*.net *.split)
[03:30:03] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (*.net *.split)
[03:30:03] *** Quits: rpnx_ (~rpnx@2601:c9:c000:20a8:d5e4:57a3:667c:15d6) (*.net *.split)
[03:30:03] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (*.net *.split)
[03:30:03] *** Quits: meicceli (meicceli@kapsi.fi) (*.net *.split)
[03:30:03] *** Quits: comrad (~quassel@holarse/comrad) (*.net *.split)
[03:30:03] *** Quits: zmt00 (~zmt00@user/zmt00) (*.net *.split)
[03:30:03] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (*.net *.split)
[03:30:03] *** Quits: sauce (~sauce@omae.wa.mou.shindei.ru) (*.net *.split)
[03:30:04] *** Quits: johnny (~johnny@user/johnny) (*.net *.split)
[03:30:04] *** Quits: Spirit532 (~Spirit532@mm-254-35-84-93.mgts.dynamic.pppoe.byfly.by) (*.net *.split)
[03:30:04] *** Quits: mattgirv (quassel@apps.fossgalaxy.com) (*.net *.split)
[03:30:04] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[03:30:04] *** Quits: mathu (~matt@user/mathu) (*.net *.split)
[03:30:24] *** Joins: nshire (~nshire@47.146.41.156)
[03:30:24] *** Joins: kaichiuchu (~kaichiuch@144.202.8.127)
[03:30:29] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[03:30:30] *** Quits: nshire (~nshire@47.146.41.156) (Changing host)
[03:30:30] *** Joins: nshire (~nshire@user/nshire)
[03:30:32] *** Quits: kaichiuchu (~kaichiuch@144.202.8.127) (Changing host)
[03:30:32] *** Joins: kaichiuchu (~kaichiuch@user/kaichiuchu)
[03:30:36] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[03:30:40] *** Joins: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51)
[03:30:40] *** Joins: Rayke (rayke@2600:3c03::f03c:92ff:fe86:498b)
[03:30:42] *** Joins: comrad (~quassel@holarse/comrad)
[03:30:44] *** Joins: xisop (~xisop@bnull.net)
[03:30:53] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:30:55] *** Joins: smeso (~smeso@user/smeso)
[03:30:56] *** Joins: Burgundy (~yomon@79.115.213.171)
[03:30:56] *** Joins: mattgirv (quassel@apps.fossgalaxy.com)
[03:31:05] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[03:31:05] *** Quits: Rayke (rayke@2600:3c03::f03c:92ff:fe86:498b) (Signing in (Rayke))
[03:31:05] *** Joins: Rayke (rayke@user/rayke)
[03:31:14] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[03:31:36] *** Joins: meicceli (meicceli@kapsi.fi)
[03:32:14] *** Joins: Colt (~Colt@user/colt)
[03:32:29] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[03:33:12] *** Joins: sauce (~sauce@omae.wa.mou.shindei.ru)
[03:33:29] *** Joins: AmR (~AmREiSa@156.199.223.24)
[03:33:37] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[03:34:51] *** Joins: tesuji (~quassel@2a02:908:180:9500:f5e8:aae6:d52b:d22b)
[03:35:10] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[03:35:15] *** Joins: mathu (~matt@user/mathu)
[03:35:16] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[03:35:39] *** Quits: tesuji (~quassel@2a02:908:180:9500:f5e8:aae6:d52b:d22b) (Client Quit)
[03:35:44] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[03:35:54] *** Joins: tesuji (~quassel@2a02:908:180:9500:f5e8:aae6:d52b:d22b)
[03:37:00] *** Joins: ARoxdale (~ARoxdale@84.203.26.40)
[03:38:31] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:42:13] *** Joins: Trollmann (~Trollmann@user/trollmann)
[03:50:18] <MaddHatter> is __restrict redundant with the execution_policy? Don't they in practice allow for the same optimization?
[03:50:34] <MaddHatter> (re: copy_n)
[03:53:02] *** Quits: Trollmann (~Trollmann@user/trollmann) (Ping timeout: 252 seconds)
[04:01:22] *** Joins: Trollmann (~Trollmann@user/trollmann)
[04:09:01] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[04:09:05] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:13:50] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:e5d7:faad:1e0:85dd) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:14:13] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e5d7:faad:1e0:85dd)
[04:14:37] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:e5d7:faad:1e0:85dd) (Client Quit)
[04:19:31] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:33:50] *** Joins: ferdna (~ferdna@user/ferdna)
[04:35:21] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[04:39:24] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[04:40:35] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:50:06] <RandomReader> no, those are orthogonal things
[04:51:33] <RandomReader> __restrict just means that no other pointer of that type in the same context refers to the same object .. singular object, has nothing to do with sequences
[04:51:51] <RandomReader> the execution policies are all about behavior of sequences
[04:53:15] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:55:38] <RandomReader> that said, I wouldn't ever use __restrict in C++ anyway .. it's not already in C++ because the semantics don't play well, and compiler extensions don't make it any clearer
[05:01:29] <RandomReader> oh I missed a pile of scrollback, sorry, ignore me
[05:09:17] *** Parts: freakazoid343 (~matt@2603:9000:cf0f:80e3:ca4:2f26:b042:b2f1) (Leaving)
[05:09:50] <RandomReader> in terms of execution policy vs custom copy, yeah, that's an interesting question
[05:14:19] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[05:17:27] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:18:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:19:50] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:ca4:2f26:b042:b2f1)
[05:38:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:00] *** ChanServ sets mode: +v npaperbot
[05:41:59] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[05:44:21] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[05:45:09] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ccd4:ae1b:4a40:e564)
[05:55:12] *** Joins: jkaye (~jkaye@2601:281:8300:7530:4aac:42f1:645e:c02f)
[05:58:51] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:12:00] *** Joins: frost (~frost@user/frost)
[06:13:27] *** Joins: johnny (~johnny@user/johnny)
[06:19:54] *** Joins: jackblasted (~quassel@45.131.194.98)
[06:27:27] <Moult> g'day all, i am getting an error: "this line gives me "no matching function for call to 'get<IfcParse::IfcFile::INSTANCE_ID>(const int&)'", but it looks like to me that the function does want an int? beginner here, what might i be doing wrong? https://dpaste.org/acw0
[06:30:01] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:32:02] <vdamewood> Moult: I don't see the function in the code you supplied.
[06:34:47] <Moult> vdamewood: hmm, i guess i'm looking in the wrong spot. what keywords might i search for to find it?
[06:35:21] <vdamewood> Well, the name of the function template is get, so 'get'.
[06:35:49] <Moult> vdamewood: oh yes, you're absolutely right! but isn't that std::get? isn't that something which comes with c++? not my code?
[06:36:05] <Moult> or maybe i need to learn about what a function template is
[06:36:06] <vdamewood> Moult: I see two different 'get' functions in that line.
[06:36:21] *** Joins: paule32 (~paule32@user/paule32)
[06:36:47] <Moult> vdamewood: the one it is complaining about is std::get, isn't it?
[06:37:40] <vdamewood> Oh, looks like it is. Since the other one doesn't have any arguments.
[06:40:35] <vdamewood> And the ones in the standard library don't appear to take integers as function parameters.
[06:40:45] <Moult> vdamewood: if it helps at all, this is the original codebase: https://github.com/IfcOpenShell/IfcOpenShell/blob/v0.7.0/src/ifcparse/IfcParse.cpp#L2197
[06:41:56] <Moult> vdamewood: i have been attempting to edit the code. in the past, it->first was a tuple of three ints. the code worked then. now, it->first is just a int.
[06:42:32] <vdamewood> Well, there you have it. std::get takes a tuple as a function parameter, not an int.
[06:42:57] <Moult> vdamewood: oh thank you! yes that makes sense now!
[06:42:58] *** Parts: freakazoid343 (~matt@2603:9000:cf0f:80e3:ca4:2f26:b042:b2f1) (Leaving)
[06:44:35] <Moult> by the way, i just google this stuff up to see what the function signatures are and usually something like cppreference.com or cplusplus.com come up as the top hits. is there an "official" docs or recommended reference site, kind of like other languages like python?
[06:44:55] *** Joins: smeso (~smeso@user/smeso)
[06:47:03] <vdamewood> The 'official' documentation is a stuffy standard document that costs 198 Swiss Francs to read.
[06:49:14] <vdamewood> cppreference.com and cplusplus.com are pretty pretty much the most respected references for developers.
[06:49:19] <Alipha> Moult: use cppreference.com. cplusplus.com has been known to be inaccurate
[06:49:23] <vdamewood> s/pretty pretty/pretty/
[06:49:47] <vdamewood> Oh, in that case s/and cplusplus.com are/is/
[06:50:30] <vdamewood> For some reason I thought there was a problem with cplusplus.com but couldn't remember it.
[06:51:07] <Moult> Alipha: and vdamewood  thanks :) i will refer to it
[06:51:34] <vdamewood> You might want to look into finding  the online draft for the standard.
[06:52:53] *** Quits: ARoxdale (~ARoxdale@84.203.26.40) (Ping timeout: 252 seconds)
[06:55:49] *** Quits: jkaye (~jkaye@2601:281:8300:7530:4aac:42f1:645e:c02f) (Ping timeout: 252 seconds)
[07:08:21] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[07:08:59] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[07:27:15] <hnOsmium0001[m]> http://eel.is/c++draft/ <- this is a free to read version of the latest draft - it's not any particular standard, but changes as new papers are accepted
[07:41:06] <Alipha> cppreference.com is much easier to read
[08:24:52] <smallville7123> how would i go about re-writing a data stream for serialization when a member is of a different length? for example, the position member of the input may be 2 int's long but the position member of the output may be 3 int's long, while all other members may or may not differ in length as well
[08:26:20] <kalven> write something that indicates the size
[08:27:20] <smallville7123> i know what the required length's and member positions are in the stream, i just dont know how to go about rewriting the stream
[08:28:17] <kalven> and I don't know what you mean by "rewriting"
[08:28:54] <smallville7123> imma see if i can make a testcase
[08:33:17] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:42:52] *** Quits: ferdna (~ferdna@user/ferdna) (Remote host closed the connection)
[08:43:21] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[08:45:05] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[08:50:28] <smallville7123> https://wandbox.org/permlink/8YE1nW4tqt1VeGE1
[09:02:02] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[09:03:22] <Alipha> smallville7123: I'm not sure the point of CrossLog when all you're doing is forwarding the operations to the stream. Why not just use CrossLogOStringStream directly?
[09:09:33] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[09:11:27] <kalven> and what out of all this relates to your actual question?
[09:27:47] <smallville7123> https://wandbox.org/permlink/IW0HcPRyp8k9Lsnl *
[09:30:01] <kalven> and the question?
[09:30:33] <smallville7123> how do i go about rewriting serialized data?
[09:32:12] <kalven> I still don't know what you mean with "rewriting" here.. I'm seeing some iostream-like class and an implementation of a stream operator for it
[09:38:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:38:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:38:59] *** ChanServ sets mode: +v npaperbot
[09:39:05] *** Joins: chozorho (~chozorho@2601:146:300:c30::56aa)
[09:41:54] *** Quits: jackblasted (~quassel@45.131.194.98) (Ping timeout: 268 seconds)
[09:46:32] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[09:47:25] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 252 seconds)
[09:47:50] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[09:48:14] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[10:01:47] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[10:03:44] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:12:19] *** Quits: xcm_ (~xcm@user/xcm) (Remote host closed the connection)
[10:12:35] *** Joins: xcm_ (~xcm@user/xcm)
[10:13:13] <RandomReader> for specific C++ drafts in the same format as eel.is: https://github.com/timsong-cpp/cppwp
[10:19:10] <smallville7123> for some reason my program is aborting when i set outputData[0][index] to any value when processing the tex members  https://wandbox.org/permlink/UrPUS6YtIvBYl6gp
[10:21:17] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Remote host closed the connection)
[10:26:03] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[10:28:04] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[10:29:33] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Ping timeout: 256 seconds)
[10:30:17] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[10:32:11] *** Joins: JohnMS_AWAY (~kvirc@213.134.183.29)
[10:34:59] <smallville7123> if i have a serialized stream of data lengths [2, 3, 2] , and i want to convert it to a serialized stream of of data lengths [3, 3, 2],    how would i do so?
[10:36:01] <TinoDidriksen> You want to inject a byte earlier in the stream? Rewrite the stream from that point on.
[10:36:15] <smallville7123> yea
[10:36:33] <smallville7123> im not sure how
[10:36:45] <smallville7123> i am working with pointers
[10:37:39] <smallville7123> and stream info struct's
[10:39:24] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[10:39:27] <smallville7123> as i cant seem to find much info online about how to rewrite serialized data
[10:42:25] <kalven> and not much info here either
[10:42:42] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:44:10] <smallville7123> im basically trying to get it to look like this https://gist.github.com/mgood7123/68d6b013985fe54407b0f4904151b302
[10:45:25] *** Joins: txtsd (~txtsd@user/txtsd)
[10:45:37] *** Joins: Burgundy (~yomon@79.115.213.171)
[10:47:55] <kalven> okay.. so for each field you know how many elements to read and how many to write
[10:48:11] <smallville7123> yea
[10:48:54] *** Joins: BluesBoy (~bboy@user/bluesboy)
[10:49:17] <kalven> and then we get stuck?
[10:49:27] <smallville7123> yes
[10:50:44] <kalven> with?
[10:52:02] <smallville7123> my current approach is horrible
[10:52:23] <smallville7123> and i end up with memory corruption
[10:59:16] <kalven> yeah it looks really messy
[11:09:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[11:11:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:12:34] *** Joins: johnny (~johnny@user/johnny)
[11:17:14] <Moult> if i have a segfault from a c++ library called in python via swig in a test suite like "pytest", how do i run gdb on it to get a stack trace?
[11:17:22] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:30:07] *** Quits: chozorho (~chozorho@2601:146:300:c30::56aa) (Quit: good night, happy Advent of Code)
[11:37:54] *** Joins: DSpider (~DSpider@82.79.237.48)
[11:44:28] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[11:44:58] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[11:52:02] *** Joins: pulse (~pulse@user/pulse)
[11:53:43] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[11:58:59] *** Joins: r-g (~r-g@195-154-105-157.rev.poneytelecom.eu)
[12:05:31] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:07:08] *** Joins: andreasbuhr (~quassel@p549db0b6.dip0.t-ipconnect.de)
[12:07:18] *** Quits: andreasbuhr (~quassel@p549db0b6.dip0.t-ipconnect.de) (Client Quit)
[12:16:05] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 256 seconds)
[12:16:28] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[12:18:11] *** Joins: robod34 (Username@79.113.195.239)
[12:18:55] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[12:38:45] <smallville7123> ok i simplified it to this https://wandbox.org/permlink/deGZO7bjL6jlkwgP
[12:42:49] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[12:43:19] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:05:17] *** Joins: The_Jag (~The_Jag@host-79-36-38-58.retail.telecomitalia.it)
[13:20:57] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[13:23:46] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:27:41] *** Joins: xkuru (~xkuru@user/xkuru)
[13:28:06] *** Quits: DrMax (~DrMax@node-1w7jra94757g2dk2zboeelft3.ipv6.telus.net) (Remote host closed the connection)
[13:29:18] *** Joins: DrMax (~DrMax@node-1w7jra94757g2aife07d72ffo.ipv6.telus.net)
[13:34:36] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[13:36:48] <vdamewood> On Linux, Is there any guarantee that global objects will be initialized if a C++ library is opened with dlopen?
[13:37:03] <vdamewood> objects *in the library I mean.
[13:38:14] <mort> I _think_ that happens yes
[13:38:34] <mort> sounds like a mine field
[13:38:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:00] *** ChanServ sets mode: +v npaperbot
[13:41:25] <vdamewood> mort: Right now, I have a function to initialize all my global objects that must be run before using anything in the library. I'm looking to see if I can somehow eliminate the need to call it.
[13:42:22] <Haohmaru> uh, wouldn't a static RAII-like object do it?
[13:42:54] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[13:43:40] <vdamewood> Haohmaru: It would. I'm asking if they're supported by the system in this niche scenario.
[13:44:05] <Haohmaru> oh, <shrug.gif>
[13:45:22] <PJBoy> the libraries globals and other namespace scope variables get constructed before dlopen returns
[13:46:09] <vdamewood> Sweat. Thanks. PJBoy.
[13:46:14] <vdamewood> Sweet*
[13:46:28] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[13:46:53] <vdamewood> Oh, crap. Same question but LoadLibrary and Windows?
[13:47:35] *** Quits: proller (~p@2a02:6b8:b081:8814::1:24) (Ping timeout: 252 seconds)
[13:49:14] *** Joins: paul424 (~tom@ip-5-172-239-166.multi.internet.cyfrowypolsat.pl)
[13:50:04] <Haohmaru> well, for C++ stuff, global constructor setup is part of the "startup" code which is supposed to happen before main() is called
[13:50:16] <Haohmaru> so if that somehow doesn't happen, your sh*t must be broken
[13:50:47] <vdamewood> Haohmaru: Well, it can't be done before main() is called because the library hasn't been loaded yet.
[13:51:11] <PJBoy> yeah DllMain is expected to initialise stuff and clean up stuff
[13:51:36] <vdamewood> I mean, do I have to do it in DllMain, or do global objects get constructed automatically?
[13:51:57] <Haohmaru> i don't know.. i've only coded a .dll on windows (but not the Host-side code), and global constructors worked
[13:52:05] <Haohmaru> no idea how the Host loads my dll
[13:52:21] <Haohmaru> but it was also made using an SDK provided by the same $vendor
[13:52:27] <PJBoy> I don't how ctors *couldn't* be executed, but I'm still trying to find some docs that back it up
[13:52:34] <vdamewood> Haohmaru, ah, but did you use the DLL by linking with it's companion .lib, or by LoadLibrary?
[13:52:57] <Haohmaru> uhm
[13:53:12] <Haohmaru> the Host is not compiled by me, nor do i have code for it
[13:53:43] <Haohmaru> it's a plugin system, the Host scans for new .dll plugins, and loads my dll
[13:53:47] <PJBoy> > If your DLL is linked with the C run-time library (CRT), the entry point provided by the CRT calls the constructors and destructors for global and static C++ objects
[13:53:48] <vdamewood> PJBoy: Well, thanks for the effort.
[13:54:11] <PJBoy> and if you've built your DLL with C++, then I assume you've linked the CRT
[13:54:36] <vdamewood> Perfect. So I'd have to really try to screw that process up.
[13:55:25] <PJBoy> cite https://docs.microsoft.com/en-us/windows/win32/dlls/dllmain#:~:text=if%20your%20dll,global%20and%20static%20c++%20objects
[13:55:27] <PJBoy> yeah
[14:23:39] *** Joins: RazielZ (~Raziel@user/raziel)
[14:24:26] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 252 seconds)
[14:34:13] *** Joins: Roughy (~mdaw45ns@user/roughy)
[14:44:44] <Haohmaru> !fact
[14:44:46] <nolyc> Haohmaru: If a name is in scope and is not hidden it is said to be visible.
[14:46:59] *** Quits: DSpider (~DSpider@82.79.237.48) (Quit: Leaving)
[14:54:10] *** Joins: proller (~p@2a02:6b8:0:40c:e388:efff:2f29:3ae3)
[14:59:23] <mort> is there a way to get the pthread from a std::thread?
[14:59:42] <PJBoy> there's a native_handle function, right?
[15:00:24] <mort> ah, I didn't notice that
[15:02:00] <PJBoy> << is_same_v<decltype(jthread().native_handle()), pthread_t>
[15:02:01] <geordi> true
[15:02:03] <PJBoy> seems promising
[15:07:53] *** Quits: JohnMS_AWAY (~kvirc@213.134.183.29) (Ping timeout: 252 seconds)
[15:09:24] <mort> from within the thread, maybe pthread_self() is easier
[15:12:20] *** Joins: markong (~kvirc@213.146.188.203)
[15:15:05] *** Quits: RazielZ (~Raziel@user/raziel) (Read error: Connection reset by peer)
[15:22:31] *** Joins: Raziel (~Raziel@user/raziel)
[15:24:01] *** Joins: JohnMS_AWAY (~kvirc@213.134.183.29)
[15:27:39] *** Quits: paul424 (~tom@ip-5-172-239-166.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[15:37:13] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[15:43:16] *** Quits: proller (~p@2a02:6b8:0:40c:e388:efff:2f29:3ae3) (Ping timeout: 268 seconds)
[15:53:04] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[16:08:14] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[16:08:37] *** Joins: immibis (~hexchat@62.156.144.218)
[16:12:25] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[16:12:52] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:23:51] *** Joins: plastico (~plastico@neomutt/plastico)
[16:24:39] *** Joins: proller (~p@2a02:6b8:0:40c:8dfc:2253:176e:f54a)
[16:30:43] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[16:31:08] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[16:32:38] *** Joins: xkuru (~xkuru@user/xkuru)
[16:38:44] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:51:05] *** Joins: pulse_ (~pulse@user/pulse)
[16:54:22] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Ping timeout: 256 seconds)
[16:54:23] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[16:54:40] *** pulse_ is now known as pulse
[16:54:43] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[16:56:51] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:58:07] *** Joins: gehn (~gehn@user/gehn)
[17:00:47] <Haohmaru> !fact
[17:00:48] <nolyc> Haohmaru: For non-random access iterators they execute a linear number of steps.
[17:02:48] <mort> !fact
[17:02:49] <nolyc> mort: The keyword template may not be applied to non-template members of class templates.
[17:03:02] <mort> reasonable
[17:15:41] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[17:16:00] *** Joins: ravan (~ravan@user/ravan)
[17:23:01] <rpav> Alipha: oh yeah, i even glanced at that one
[17:33:20] *** Joins: txtsd (~txtsd@user/txtsd)
[17:38:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:01] *** ChanServ sets mode: +v npaperbot
[17:42:41] *** Joins: ARoxdale (~ARoxdale@84.203.26.40)
[17:44:06] <rpav> bah really need some `<in-scope expression> @ <in-scope flow-control>;`
[17:46:06] <rpav> like we have `if(auto x ...; some-expr) { .. do stuff .. }` what'd be nicer usually is `auto x = ... || return;`
[17:50:41] *** Quits: proller (~p@2a02:6b8:0:40c:8dfc:2253:176e:f54a) (Ping timeout: 252 seconds)
[17:51:58] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:6583:37c0:ab84:8d52)
[17:51:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:6583:37c0:ab84:8d52) (Changing host)
[17:51:58] *** Joins: skapata (~Skapata@user/skapata)
[17:56:44] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[18:02:13] *** Joins: proller (~p@2a02:6b8:0:40c:d1b1:fed1:20be:5f5b)
[18:04:51] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:05:43] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:27:50] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:28:11] *** Quits: JohnMS_AWAY (~kvirc@213.134.183.29) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[18:37:07] *** Joins: meator (~meator@user/meator)
[18:57:13] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[19:00:21] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[19:07:07] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[19:12:14] *** Joins: chris64 (~chris@user/chris64)
[19:12:46] *** Quits: chris64 (~chris@user/chris64) (Client Quit)
[19:21:59] *** Quits: tesuji (~quassel@2a02:908:180:9500:f5e8:aae6:d52b:d22b) (Ping timeout: 252 seconds)
[19:23:06] *** Joins: fdgr (~fdgr@178.49.152.42)
[19:25:45] <Haohmaru> !fact
[19:25:46] <nolyc> Haohmaru: Iterators can also have singular values that are not associated with any sequence.
[19:26:20] <Haohmaru> pls no more iterators for me for today
[19:30:19] <mort> is there such a thing as an iterator which doesn't have ++ or --
[19:30:32] <rpav> can they also have multiple values that are not associated with any sequence? or would having multiple values by definition be a sequence association ðŸ¤”
[19:30:52] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:31:10] <mort> I'd guess that having a concept of a "next" or "previous" thing makes it a sequence
[19:31:25] <ville> mort: forward iterator doesn't sound like something with a --
[19:31:43] <mort> ville: but it has a ++ so it has "-- or ++"
[19:33:36] <PJBoy> you could maybe argue `const T*` is an iterator that doesn't support ++ or --
[19:33:48] <PJBoy> erm
[19:33:52] <PJBoy> `T* const`
[19:35:04] <PJBoy> but you can still iterator with std::next
[19:35:07] <PJBoy> *iterate
[19:35:35] <smallvil_> wep i got a simple `<< printf(...)` working :)    https://gist.github.com/e676b87f43ac74b053ad9ea443581aef
[19:35:46] <mort> https://www.cplusplus.com/reference/iterator/ something without ++ or -- doesn't match any of these categories
[19:36:44] * PJBoy vomits
[19:37:12] <PJBoy> yeah the iterator concept/requirements require preincrement at absolute minimum
[19:38:31] <PJBoy> and not post increment like that cplusplus page says
[19:39:26] <SuperNintendoSUX> :D
[19:40:23] <PJBoy> however in C++20 there's a non exposed concept that requires post increment for bare iterators
[19:40:46] <PJBoy> that affects std::iterator_traits::iterator_category
[19:41:30] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[19:42:01] <PJBoy> hrm
[19:42:23] <PJBoy> I need to double check what cppreference has written there
[19:42:46] * SuperNintendoSUX wonders why this page exists
[19:43:14] <SuperNintendoSUX> *cplusplus
[19:43:32] <PJBoy> and the concept std::weakly_incrementable does require post increment
[19:43:45] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[19:44:04] <PJBoy> iterator categories are hard apparently
[19:45:59] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[19:46:31] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[19:49:42] *** Joins: rajkosto (~rajkosto@93-86-99-67.dynamic.isp.telekom.rs)
[19:50:37] <rpav> if only we had iterators that weren't indexes
[19:52:12] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[19:54:00] <Haohmaru> what then?
[19:54:18] <SuperNintendoSUX> looks like a lol comment
[19:54:25] <SuperNintendoSUX> !grab rpav
[19:54:25] <nolyc> SuperNintendoSUX: The operation succeeded.
[19:55:58] <smallvil_> and now `XLog("%s %s\n", "hello", "world!");` is the same as `printf("%s %s\n", "hello", "world!");` :)      (except with less implemented % args)
[19:56:42] <PJBoy> ggs
[19:57:00] <rpav> Haohmaru: actual iterators, i.e. hasNext/getNext
[19:57:11] *** Joins: reumeth (~reumeth@user/reumeth)
[19:57:27] <Haohmaru> uhm, well, it's C++, you could add them, no?
[19:57:38] <smallvil_> so you can do `XLog("%s %s\n", "hello", "world!");` or `XLog() << "[start printf string] " << XLog::Printf("%s %s\n", "hello", "world!") << " [end printf string]\n";
[19:57:43] <rpav> given one iterator isn't sufficient for iteration, "iterator" is clearly not accurate
[19:58:00] <rpav> Haohmaru: well i have, but std still has the halfassed stuff
[19:58:08] <Haohmaru> tbh i am quite unfamiliar with iterators, still
[19:58:31] <PJBoy> dw idk what he's talking about either
[19:58:45] <rpav> and then 20 adds ranges because iterators are clearly broken/inconvenient/annoying, and is mostly not a big improvement
[19:59:09] <smallvil_> (not sure why someone may want to mix printf with stream but you can :D )
[19:59:13] <Haohmaru> i tend to like while loops *shrug*
[19:59:23] <smallvil_> with stream << *
[20:02:41] <smallvil_> also not sure if this helps but << XLog::Printf(...) is evaluating itself in the << operator instead of the Printf constructor in order to ensure type-safety can still be done (with %? format) :)
[20:03:12] <Haohmaru> what kind of madness is this tho?
[20:03:48] <smallvil_> :D
[20:04:33] <smallvil_> dunno, just doing useful/useless stuff with my logging lib :)
[20:05:50] <kalven> combining the type unsafety of printf with the blazing speed of streams
[20:06:16] <smallvil_> haha XD
[20:06:44] <smallvil_> some people like printf, others like typesafety, why not have both :)
[20:06:50] <Haohmaru> yo dawg, i heard you like printf AND streams, ...
[20:06:59] <smallvil_> Haohmaru: lmao
[20:08:06] <smallvil_> also technically my printf *can* be typesafe by using %? format specifier :)
[20:08:20] <rpav> if you want that why not fmtlib
[20:08:41] <smallvil_> cus i still want %d and %s and others
[20:08:43] <rpav> and why would you _not_ want typesafe
[20:08:53] <rpav> but fmtlib can do the same things
[20:09:01] <rpav> like do you want to %d a string, or %s a float?
[20:09:15] <smallvil_> ik, im just used to typing format specifiers :)
[20:09:38] <Haohmaru> i've never liked that too much
[20:09:57] <rpav> let's do a crappy thing because we've always done it
[20:10:10] <smallvil_> XP
[20:10:40] <Haohmaru> i'm more a fan of logger("Omg, the file", filename, "doesn't exist!\n");
[20:10:56] <smallvil_> :)
[20:11:23] <rpav> Haohmaru: yeah
[20:11:56] <kalven> from the guy who brought you such hits as "ring buffer with undo" and "any+optional = anyoptional"
[20:12:01] <rpav> with a contextual / dynamic-scoped logger so if you want to redirect all logging to a rendered window you can without modifying anything else
[20:12:41] <Haohmaru> hm
[20:12:56] <Haohmaru> i'm mostly doing CLI apps lately
[20:13:15] <rpav> well, you can redirect to a file or stderr or whatever
[20:13:27] <rpav> but it shouldn't need to be hardcoded or explicit
[20:13:33] <smallvil_> kalven: lmao
[20:13:53] <Haohmaru> i think my last version of the logger just uses an ostream&
[20:15:13] <smallvil_> logger cannot be implemented using parameter packs alone :) (at least not in a way that is extensible via stream overloading, eg https://gist.github.com/mgood7123/4b38f354bfd6805037b994980f316cb2 )
[20:15:56] <smallvil_> eg you cant easily add an overload to print std::vector contents :)
[20:16:36] *** Joins: andreasbuhr (~quassel@p549db0b6.dip0.t-ipconnect.de)
[20:16:46] *** Quits: andreasbuhr (~quassel@p549db0b6.dip0.t-ipconnect.de) (Client Quit)
[20:16:49] <Haohmaru> wrong, it seems i've made it contain an ofstream
[20:17:46] <smallvil_> :)
[20:17:54] <rpav> smallvil_: of course it is, i did just that
[20:18:16] <smallvil_> :)
[20:18:20] <rpav> it works as i specified above (i can override its current output in a block raii-style)
[20:18:37] <smallvil_> nice
[20:20:37] <Haohmaru> yeah, i am using my logger sooo inconsistently
[20:21:03] * rpav prefers "type-based" formatting to textual parsing and format strings
[20:21:08] <Haohmaru> i have made a pile raii-like things to make the code-gen "easier" tho
[20:21:19] <Haohmaru> * pile of
[20:21:33] <rpav> like print(prec(somefloat, 4)) or similar
[20:22:21] <smallvil_> :)
[20:22:45] <rpav> print(radix<2>(someint)); // or whatever
[20:22:45] <smallvil_> me too, tho streams tend to be long :(
[20:23:09] <rpav> i don't like stream syntax, it's fugly and hard to deal with
[20:23:17] <rpav> print(a, b, c);
[20:23:25] <SuperNintendoSUX> you are fugly
[20:24:10] <Haohmaru> this generates a struct with an enum inside: https://gitlab.com/antto/as_svd_parse/-/blob/master/svd_proc_gen.cpp#L1370
[20:24:42] <smallvil_> yea, but streams are still good sometimes :)
[20:26:03] <smallvil_> also %p is handy if you just want the address/hex of something and you dont know how to obtain such with streams :)
[20:26:21] <rpav> you don't need anything with streams :p
[20:26:28] <smallvil_> :P
[20:26:29] <SuperNintendoSUX> streams are the best
[20:26:30] <rpav> << p; int* p;
[20:26:30] <geordi> 0
[20:26:37] <rpav> well, that was anticlimactic, but
[20:26:41] <smallvil_> lol
[20:26:43] <smallvil_> XD
[20:26:47] <rpav> << p; int i; int* p = &i;
[20:26:47] <geordi> 0x506904
[20:26:56] <smallvil_> :)
[20:27:15] <Haohmaru> << hex << 2048;
[20:27:16] <geordi> 800
[20:27:18] <smallvil_> 02:56:47 rpav: << p; char i; char* p = &i;
[20:27:26] <smallvil_> << p; char i; char* p = &i;
[20:27:26] <geordi>  
[20:27:31] <smallvil_> lol
[20:27:47] <smallvil_> << hex << p; char i; char* p = &i;
[20:27:48] <geordi>  
[20:27:48] <rpav> ok fair, c++ sucks on that one
[20:27:51] <smallvil_> oof
[20:27:54] <smallvil_> :)
[20:28:10] <rpav> << (void*)p; char c; char* p = &c;
[20:28:10] <geordi> 0x506901
[20:28:16] <smallvil_> << hex << (void*)p; char i; char* p = &i;
[20:28:16] <geordi> 0x506901
[20:28:19] <Haohmaru> you just made some UB didn't you
[20:28:24] <smallvil_> XD
[20:28:30] <smallvil_> yeeee
[20:28:44] <smallvil_> we love UB :D
[20:28:54] <rpav> you're now qualified to get a job making the next asscreed
[20:28:59] <rpav> but i made that joke before ;/
[20:29:06] <Haohmaru> the next what?
[20:29:07] <smallvil_> lol
[20:29:30] <rpav> https://www.ubisoft.com/en-us/game/assassins-creed
[20:29:44] <Haohmaru> oh, some game
[20:29:50] <smallvil_> ass ass ins creed
[20:29:51] <Haohmaru> is it full of UB?
[20:30:05] <Haohmaru> wow, there's a lot of a$$ in that name
[20:30:11] <smallvil_> XD
[20:30:25] <Haohmaru> ass^2ins creed
[20:30:40] <smallvil_> lol
[20:31:08] <smallvil_> ains creed
[20:31:23] <Haohmaru> a-something-somethings creed
[20:31:30] <smallvil_> lol
[20:31:33] <Haohmaru> !fact
[20:31:35] <nolyc> Haohmaru: Changes in use_count() do not reflect modifications that can introduce data races.
[20:31:44] <smallvil_> !fact
[20:31:46] <nolyc> smallvil_: A postfix expression followed by an expression in square brackets is a postfix expression.
[20:31:55] <smallvil_> XD
[20:32:19] <rpav> ðŸ¤”
[20:32:22] <Haohmaru> a postfix expression ... is a postfix expression?
[20:33:10] * smallvil_ nolyc has deemed me worthy of his stupidity
[20:33:26] <rpav> i think that gave me a wondeful idea for something terrible
[20:33:34] <smallvil_> XD
[20:33:39] <PJBoy> that's the standard's way of saying subscript operator is a postfix expression
[20:33:42] <Haohmaru> is that about those fancy things that allow you to make stuff like 0.f but on other types with other behavior?
[20:33:46] <smallvil_> the postfix compiler
[20:34:27] <rpav> i think you could pretty easily make a "stack language"/postfix language in C++ using [] and stuff
[20:34:40] <rpav> i'm not sure it would even really require [], () would probably suffice
[20:34:49] <smallvil_> :)
[20:35:11] <rpav> stacky[42][42].add().print();
[20:35:47] <Haohmaru> what would that be?
[20:35:55] <rpav> it would print 84
[20:36:19] * smallvil_ is bored
[20:36:26] <Haohmaru> how about stacky[42][10].print() ?
[20:36:37] <rpav> it would print 10 and 42 would remain on the stack
[20:36:45] <Haohmaru> hm
[20:36:56] <smallvil_> how about stacky.pring()
[20:37:04] <smallvil_> how about stacky.print()
[20:37:10] *** Joins: seninha (~seninha@user/seninha)
[20:37:23] <Haohmaru> stacky probably won't have a print() method
[20:37:26] <rpav> (42)("v").set().("v"_ref).incr().print()
[20:37:31] <smallvil_> :)
[20:37:33] <InPhase> Stack underflow.
[20:37:39] <smallvil_> lol
[20:38:02] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 268 seconds)
[20:38:14] <rpav> what InPhase said
[20:38:43] <smallvil_> xP
[20:39:03] <InPhase> Which would hopefully be an exception throw so as not to shame your ancestors.
[20:39:32] <rpav> how does forth handle errors, besides by crashing and/or bricking your hardware
[20:39:48] <rpav> gforth does have exceptions
[20:39:55] <Haohmaru> ooh, i know one or two FORTH fanbois
[20:40:01] * smallvil_ contemplates wether i. should start writing a open gl shader builder
[20:40:05] <Haohmaru> but i'm not gonna ask them
[20:40:08] <rpav> ok they are defined by ANS Forth
[20:40:42] * smallvil_ contemplates whether i should start writing a OpenGL shader generator *
[20:40:55] <rpav> Haohmaru: i'm definitely not, but i tinkered for a bit with that among other tiny languages back when there were tons of interesting tiny languages ;/
[20:40:59] <Haohmaru> smallvil_ writing such a thing sounds like a non-fun task, why not write something that would generate that for you
[20:41:30] <smallvil_> forth handles errors by using the force to throw a brick at you
[20:42:59] <smallvil_> another person victim to the brick thrower
[20:43:26] <smallvil_> Haohmaru: ?
[20:43:36] <Haohmaru> que?
[20:44:01] <smallvil_> generate a shader generator/?
[20:44:06] <smallvil_> generate a shader generator?
[20:44:13] <Haohmaru> i was joking ;P~
[20:44:24] <smallvil_> XD
[20:44:43] <Haohmaru> generate an AI that can generate generators that write generators writing $whatever_you_desire
[20:44:51] <smallvil_> XD
[20:45:24] <rpav> how many generators could a generator-generator generate, if a generator-generator could generate generators
[20:45:27] <Haohmaru> hopefully that AI doesn't need a 60MB-worth of commandline arguments
[20:45:28] * smallvil_ generates god himself
[20:46:05] <Haohmaru> does God wonder who created him?
[20:46:14] <Haohmaru> ;P~
[20:46:29] <smallvil_> lmao
[20:46:38] <smallvil_> probs
[20:46:46] <smallvil_> :)
[20:47:42] <SuperNintendoSUX> rpav: I have SOCKET STREAMS
[20:48:07] <SuperNintendoSUX> a perfect match
[20:48:08] <rpav> SuperNintendoSUX: i think they make an ointment for that
[20:48:12] <smallvil_> SuperNintendoSUX: i have SOCKET SOCKETS
[20:48:25] <SuperNintendoSUX> yeah! sockets can be decorated
[20:48:47] <Haohmaru> i'll make a socket_feng-shui lib
[20:48:56] <smallvil_> SuperNintendoSUX: i have SOCKET PARTITIONS
[20:49:47] <smallvil_> xD
[20:49:50] <Haohmaru> !fact
[20:49:52] <nolyc> Haohmaru: A type template-argument is dependent if the type it specifies is dependent.
[20:50:08] <smallvil_> !fact
[20:50:09] <nolyc> smallvil_: The term describes a type to which a reference can be created, including reference types.
[20:50:10] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[20:50:14] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:50:26] <smallvil_> !fact
[20:50:27] <nolyc> smallvil_: Literals include strings and character and numeric literals.
[20:50:33] <smallvil_> !fact
[20:50:34] <nolyc> smallvil_: Every implementation shall document those limitations where known.
[20:50:46] <Haohmaru> okay, we have a fact overdose
[20:50:59] * Haohmaru takes smallvil_ to the hospital
[20:51:08] <smallvil_> never knew literals where limitations
[20:51:26] <smallvil_> !fact
[20:51:27] <nolyc> smallvil_: The supplied Mutex type shall meet the BasicLockable requirements.
[20:51:54] * smallvil_ is bored again
[20:52:05] <smallvil_> night night
[20:56:35] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[20:58:39] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:00:22] <rpav> actually a "stack language" would probably best be done with a non-. operator since then you could use constexpr values and much more easily extend it
[21:00:44] <rpav> maybe a nice use of comma
[21:00:59] <rpav> auto x = 5, 5, plus;
[21:07:01] *** Quits: DrMax (~DrMax@node-1w7jra94757g2aife07d72ffo.ipv6.telus.net) (Ping timeout: 268 seconds)
[21:10:32] <InPhase> rpav: I expect attempting to overload that for primitives like 5 will fail.
[21:11:04] <InPhase> rpav: Using << would at least be familiar, even though the precedence is terrible.
[21:13:25] <ville> does pthread_join() guarantee writes from that thread are now visible?
[21:15:56] <rpav> InPhase: yeah you need some thing to start with
[21:16:46] <rpav> auto x = BEGIN, 5, 5, plus, END; // might be useful, we could have BEGIN_FN ... etc ;)
[21:16:57] <rpav> with enum STACK { BEGIN, END };
[21:18:35] <InPhase> COBOL FORTH, lol.
[21:20:02] <rpav> pascal .. :P
[21:21:05] <InPhase> << would give you <<= though, so you could:  auto stack = Stack() << 5 << 5 << plus; stack << 7 << multiply << print;
[21:21:05] <geordi> error: expected unqualified-id before '<<' token
[21:21:16] <InPhase> That last one should be stack <<=
[21:21:26] <rpav> eh
[21:21:57] <rpav> but that's not weird, different, and potentially inexplicable; everyone's seen << and knows how it works and properly hates it ;)
[21:22:29] <InPhase> :)
[21:23:16] <rpav> operator,() is a bit more obscure and unobvious and really just looks better and detracts less from the intended horror
[21:24:31] <rpav> it's still too bad there's no good `X Y;` syntax , though we could perhaps use `a *X* b;` here or some variation
[21:28:04] <ville> operator << is fine
[21:28:29] *** Quits: proller (~p@2a02:6b8:0:40c:d1b1:fed1:20be:5f5b) (Ping timeout: 252 seconds)
[21:38:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:00] *** ChanServ sets mode: +v npaperbot
[21:43:53] <OnlineCop> If a compiler sees `std::stringstream ss; ss << "some text";` would (should?) it inline that into the constructor? `std::strinstream ss("some text");`
[21:47:27] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[21:51:40] <kalven> OnlineCop: I wouldn't expect it
[21:52:04] <OnlineCop> I can understand some cases where it may not make sense, like `ss << "some text" << some_variable << "more text";`
[21:53:07] *** Joins: Guest1723 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[21:53:36] <OnlineCop> I'm curious to know whether there's any advantage of instantiating a stringstream with a fixed string, over construct-then-operator<<() into it?
[21:56:58] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 256 seconds)
[21:57:31] <Alipha> OnlineCop: i would expect `std::stringstream ss("some text");` to be faster. there's a lot going on with <<, including virtual calls, and so i'd be surprised if the compiler can inline all that
[21:57:57] <Alipha> s/inline/optimize/
[21:59:09] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[22:04:28] *** Joins: paul424 (~tom@ip-5-172-234-241.multi.internet.cyfrowypolsat.pl)
[22:06:54] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[22:11:19] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[22:14:18] *** Quits: fdgr (~fdgr@178.49.152.42) (Quit: Client closed)
[22:22:28] *** Joins: proller (~p@80.240.216.69)
[22:24:56] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[22:25:16] *** Quits: Guest1723 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[22:30:38] <LordKalma> OnlineCop, Alipha https://godbolt.org/z/ajGsraxxo
[22:31:49] <rpav> moral: streams are expensive and ugly?
[22:33:52] <OnlineCop> I'd take streams for `ss << "Your file " << __FILE__ << " exploded on line " << __LINE__ << " with error message " << std::quoted(err) << ". Fix your mistake!";` over printf() any day. :D
[22:34:21] <LordKalma> qDebug() << :D
[22:36:26] *** Joins: tesuji (~quassel@2a02:908:180:9500:ed81:4afc:8e41:e7c1)
[22:36:30] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:38:33] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[22:44:56] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 252 seconds)
[22:50:19] <OnlineCop> Since my ASM-fu is weak, I assume that the constructor route is slightly better, but not by large enough to warrant any code refactoring?
[22:50:54] <kalven> are you concerned about performance?
[22:57:23] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[23:00:31] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[23:02:10] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[23:04:01] <OnlineCop> Most of these stringstreams are being constructed so I can log errors to a few different places before I raise an exception, so no, not terribly performant.
[23:07:50] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[23:07:55] <rpav> OnlineCop: print("Your file ", __FILE__, " exploded on line ", __LINE__, quote(err)); etc
[23:09:22] <rpav> there isn't a particularly trivial/existing solution (that i know of) to do that with translations, though i could envision some slightly nicer tools that would probably fit there, but that's a very specific problem
[23:09:34] <rpav> but that's a problem with streams in any case
[23:10:46] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ccd4:ae1b:4a40:e564) (Ping timeout: 245 seconds)
[23:13:10] <Alipha> OnlineCop: having a single std::stringstream and using ss.str("") to reset it would be the most performant by far
[23:13:35] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:14:03] *** Joins: proller (~p@2a02:6b8:b081:1215::1:9)
[23:23:02] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[23:23:37] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 252 seconds)
[23:25:53] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 256 seconds)
[23:26:08] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[23:29:01] *** Quits: noarb- (~noarb@user/noarb) (Read error: Connection reset by peer)
[23:29:12] <rpav> heh, with something simple like `<F> operator,(Stack& s, F f) { return f(s); }` you could implement most stuff with lambdas fairly simply .. main thing is nice "dynamic stack of objects" handling
[23:30:11] <rpav> but more efficient than resorting to any
[23:30:36] <rpav> this is what you get from languages with compile times; idle time for terrible ideas
[23:31:52] *** Quits: rajkosto (~rajkosto@93-86-99-67.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[23:33:58] *** Joins: RoKenn (~RoKenn@2001:a61:34f1:ae01:2807:3426:69c5:be03)
[23:33:58] *** Quits: RoKenn (~RoKenn@2001:a61:34f1:ae01:2807:3426:69c5:be03) (Changing host)
[23:33:58] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:37:13] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[23:38:28] *** Quits: paul424 (~tom@ip-5-172-234-241.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[23:52:26] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[23:54:41] *** Joins: RoKenn (~RoKenn@2001:a61:34f1:ae01:b00e:aab0:7c65:ffa0)
[23:54:41] *** Quits: RoKenn (~RoKenn@2001:a61:34f1:ae01:b00e:aab0:7c65:ffa0) (Changing host)
[23:54:41] *** Joins: RoKenn (~RoKenn@user/rokenn)
