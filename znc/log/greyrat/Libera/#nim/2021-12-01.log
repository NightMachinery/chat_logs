[00:19:54] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3GC3
[00:23:42] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GC9
[00:23:51] <FromDiscord> <Yardanico> same for strings
[00:26:49] <FromDiscord> <TryAngle> In reply to @Yardanico "This passes by a": ok thanks, how would I pass by reference then?
[00:27:34] <FromDiscord> <Yardanico> You can do `var seq[Expression]`, but when you assign it to HtmlWriter it'll still get copied
[00:28:33] <FromDiscord> <TryAngle> what do I have to write in HtmlWriter to not copy but take the reference?
[00:29:02] <FromDiscord> <Yardanico> Short answer - you can't do that safely
[00:29:22] <FromDiscord> <Yardanico> Because that would require lifetime tracking and stuff
[00:29:33] <FromDiscord> <Yardanico> Nim had view types, but they're in a very experimental state
[00:30:01] <FromDiscord> <Yardanico> you can have a reference to pass around if you either store that seq in a ref object
[00:30:15] <FromDiscord> <Yardanico> Or use ref seq[...] instead
[00:32:33] <FromDiscord> <TryAngle> hmm so in HtmlWriter I also write ref before the type in the field and everywhere where I use it the [] operator after?
[00:33:52] <FromDiscord> <Yardanico> In reply to @TryAngle "hmm so in HtmlWriter": Yeah, or you can have HtmlWriter as a ref object, then you'll be able to pass a seq inside of it around without problems
[00:34:16] <FromDiscord> <Yardanico> Any reason you want to capture a reference like that? Usually you'd model your code in objects
[00:36:40] <FromDiscord> <TryAngle> In reply to @Yardanico "Any reason you want": I'm writing text format that I want to compile to HTML and I want to also learn a bit about nim by focusing a bit on performance, and want to start with avoiding duplication of huge elements.
[00:37:44] <FromDiscord> <haxscramper> You might consider writing data to stream immediately instead of storing it in the intermediate location
[00:38:18] <FromDiscord> <TryAngle> In reply to @Yardanico "Yeah, or you can": how do I pass the seq in the proc after marking it as a ref if the seq is not a ref initially?
[00:38:53] <FromDiscord> <TryAngle> In reply to @haxscramper "You might consider writing": hmm I add a lot of post processing so this doesn't sound that viable 🤔
[00:39:20] <FromDiscord> <haxscramper> your text format is something like markdown, correct?
[00:39:21] <FromDiscord> <TryAngle> (edit) "In reply to @haxscramper "You might consider writing": hmm I add a lot of post processing so this doesn't sound that viable ... 🤔" 03added "(not in the html part but in the expression part"
[00:39:39] <FromDiscord> <TryAngle> basically
[00:40:10] <FromDiscord> <TryAngle> but I also add like file inclusions etc.
[00:40:15] <FromDiscord> <haxscramper> and the `Expression` is a object of this format's AST/?
[00:40:40] <FromDiscord> <haxscramper> So you have `Expression` anyway, right, you just don't want to copy when you move things to html writer?
[00:40:55] <FromDiscord> <haxscramper> Also if you make the Expression a `ref object` seq copy is not that bad
[00:41:03] <FromDiscord> <TryAngle> In reply to @haxscramper "and the `Expression` is": similar I might move it to a more AST like structure later
[00:41:09] <FromDiscord> <TryAngle> In reply to @haxscramper "So you have `Expression`": yes
[00:41:25] <FromDiscord> <haxscramper> For a `100` objects you would copy `sizeof(ref)  100` which is not a lot
[00:42:34] <FromDiscord> <haxscramper> In reply to @TryAngle "yes": So if you process the data before passing it to the writer (the preprocessing step you mentioned), and then just want to convert it out to html then you can do it directly after preprocessing step
[00:43:34] <FromDiscord> <haxscramper> For org-mode I do roughly this - https://github.com/haxscramper/haxorg/blob/master/src/haxorg/exporter/exporter_html.nim#L99-L110
[00:43:49] <FromDiscord> <haxscramper> Process all data, have it in single place, then write things out
[00:45:11] <FromDiscord> <TryAngle> In reply to @haxscramper "Also if you make": hmmm I might have a missconception here but if I make expression a ref object doesn't it become a heap object then?↵sry this project is the first thing I ever write in Nim
[00:45:49] <FromDiscord> <haxscramper> it does become a heap object,yes
[00:46:24] <FromDiscord> <haxscramper> but heap does not equate to slow
[00:46:45] <FromDiscord> <haxscramper> and of course there is a question of how fast you want to go, and whether these optimizations are needed
[00:47:20] <FromDiscord> <haxscramper> Needlessly copying data around is probably something that need to be avoided, but switching to `ref` in order to make copying cheaper is also an option
[00:48:49] <FromDiscord> <TryAngle> that's true indeed 🤔
[00:52:56] <FromDiscord> <Digitalcraftsman> sent a code paste, see https://play.nim-lang.org/#ix=3GCi
[00:55:28] <FromDiscord> <haxscramper> I don't really use cligen, but have you tried adding `{.requiresinit.}` annotations to the necessary fields? Alternatively, try to make them `Option[string]` and raise validation error yourself.
[00:56:23] <FromDiscord> <haxscramper> With Option you would know if the value were really omitted and not just passed empty string (if this is allowed. If not, do the validation and check for non-empty string)
[00:58:06] <FromDiscord> <Digitalcraftsman> With requires `{.requiresinit.}` the program will not compile. My goal is to check the presence of given parameters at runtime.
[00:59:11] <FromDiscord> <Digitalcraftsman> But now I realize that I've to validate the input and output fields anyway since they could be invalid even if given by the user.
[00:59:49] <FromDiscord> <Digitalcraftsman> (edit) 04removed "requires"
[01:12:43] *** Joins: Pyautogui (~Pyautogui@136.228.207.190)
[01:34:40] *** Quits: Pyautogui (~Pyautogui@136.228.207.190) (Quit: Connection closed)
[01:41:27] <FromDiscord> <TryAngle> when iterating over a file, is there a way to also get the position of the char?
[01:44:52] *** Joins: terminalpusher (~terminalp@2a01:586:a4a5:1:a8d0:5524:e423:6127)
[01:46:36] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[01:56:27] <FromDiscord> <reilly> Does anybody have any idea how to get something like this working? I can't work it out for the life of me.↵https://play.nim-lang.org/#ix=3GCA↵I don't care if it uses the same method that I'm trying to use, all I care about is that I have an object that contains a single value of some arbitrary type.
[01:59:45] <FromDiscord> <Elegantbeef> You have to do it the other way https://play.nim-lang.org/#ix=3GCB
[01:59:59] <FromDiscord> <Elegantbeef> You give the call for the body, not take the body from the call
[02:01:54] <FromDiscord> <Elegantbeef> The issue you were facing is that you had a case expression that wasnt type consistent so it'd of course error
[02:02:45] <FromDiscord> <Elegantbeef> Depending on what you're doing you may want to look at leorize's union package https://github.com/alaviss/union
[02:03:16] <FromDiscord> <Elegantbeef> @TryAngle\: `getFilePos`?
[02:03:28] <FromDiscord> <enthus1ast> @reilly\: or even json
[02:04:09] <FromDiscord> <Elegantbeef> I hate you enthus 😛
[02:04:38] <FromDiscord> <enthus1ast> ;)
[02:04:38] <FromDiscord> <enthus1ast> g8
[02:04:38] <FromDiscord> <enthus1ast> its late here; bedtime
[02:04:39] <FromDiscord> <Elegantbeef> Only in Nim is "use json for tagged unions" a common suggestion
[02:04:39] <FromDiscord> <Elegantbeef> Buh bye
[02:10:25] <FromDiscord> <reilly> Works like a charm and makes perfect sense, thank you.
[02:15:32] *** Quits: terminalpusher (~terminalp@2a01:586:a4a5:1:a8d0:5524:e423:6127) (Remote host closed the connection)
[02:15:54] *** Joins: terminalpusher (~terminalp@2a01:586:a4a5:1:a8d0:5524:e423:6127)
[02:17:33] <FromDiscord> <Daniel M. Jaén> https://stackoverflow.com/questions/41397499/how-to-load-file-line-by-line-in-nim
[02:23:46] <FromDiscord> <Elegantbeef> There is also filestream which also has `getPosition`
[02:33:28] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[02:42:47] *** Quits: terminalpusher (~terminalp@2a01:586:a4a5:1:a8d0:5524:e423:6127) (Remote host closed the connection)
[02:44:19] *** Quits: src (~src@user/src) (Quit: Leaving)
[02:50:54] *** Quits: oprypin (~irc@pryp.in) (Quit: Bye)
[02:51:03] *** Joins: oprypin (~irc@pryp.in)
[02:55:31] <FromDiscord> <el__maco> hmm today I learned the hard way that the max() function didn't do what I hoped it would do <https://play.nim-lang.org/#ix=3GCH>
[02:55:36] <FromDiscord> <el__maco> I wonder what it actually does
[02:56:11] <FromDiscord> <el__maco> it returns a vec3, the compiler is cool with it, but the value is that of the second parameter it would seem like
[03:00:09] <FromDiscord> <Elegantbeef> Well you're using tuples so... take that 😛
[03:00:23] <FromDiscord> <el__maco> I'm not supposed to use tuples?
[03:00:28] <FromDiscord> <Elegantbeef> It binds to the first tuple type, and converts the second one to that since it's the same type
[03:01:07] <FromDiscord> <Elegantbeef> Well tuples are distinct types `vec3` is an alias to `(x: float32, y: float32, z: float32)` which is implicitly convertible to (float32, float32, float32)\`
[03:01:14] <FromDiscord> <Elegantbeef> are not distinct types\
[03:01:51] <FromDiscord> <el__maco> I was hoping the max() would return a component-wise max of the two tuples
[03:02:29] <FromDiscord> <Elegantbeef> It just does `y  if y <= x: x else: y`
[03:03:20] <FromDiscord> <el__maco> I guess the mystery then is what is ``<=`` if y and x are tuples
[03:03:31] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/version-1-6/lib/system.nim#L1878
[03:03:38] <FromDiscord> <el__maco> I wonder if vec3 should be an object instead
[03:03:57] <FromDiscord> <Elegantbeef> Can be many things, tuples are generally bad for this imo
[03:05:53] <FromDiscord> <el__maco> a tuple seemed nice because you can construct using literals (a,b,c)
[03:06:27] <FromDiscord> <Elegantbeef> sure but you can always make a constructor then it's just `vec3(x, y, z)`
[03:06:58] <FromDiscord> <Elegantbeef> It's of course up to you what to do you can make your own `max`/`min` procs
[03:08:07] <FromDiscord> <el__maco> yeah I solved this by making a ``proc v3max``. Though I have to say I'm looking at the generic <= for tuples and I'm still not sure what exactly is happening 😅
[03:08:33] <FromDiscord> <Elegantbeef> It's using the system cmp proc and using integers dumbly
[03:08:46] <FromDiscord> <Elegantbeef> If any component is less than one it returns true otherwise false
[03:08:46] <FromDiscord> <Elegantbeef> Or vice versa
[03:09:15] <FromDiscord> <el__maco> I see. It certainly didn't do what I was hoping it to do
[03:09:56] <FromDiscord> <Elegantbeef> You can just do `proc max(a, b: Vec3) = (max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2]))`
[03:09:58] <FromDiscord> <el__maco> seems to evaluate the "max" based on the first value in the tuple
[03:10:13] <FromDiscord> <Elegantbeef> Nope
[03:10:55] <FromDiscord> <Elegantbeef> You pass a anonymous tuple which `Vec3` can implicitly convert to, which is why it doesnt have `x, y, z`
[03:10:58] <FromDiscord> <TryAngle> speaking of Vec3 type↵does nim have something like const generics from Rust?↵like vec[N: int, T]↵allows like Vec[3, int](4, 3, 8)
[03:11:21] <FromDiscord> <Elegantbeef> Yes nim has `type Vec[size: static int] = array[size, float32]`
[03:11:23] *** Quits: |smlckz| (smlckz@user/smlckz) (Quit: WeeChat 3.2)
[03:11:32] <FromDiscord> <Elegantbeef> `static T` is a compile time value that works on all objects
[03:11:49] <FromDiscord> <Elegantbeef> Unlike rust dependant types work for most types even objects
[03:12:05] <FromDiscord> <TryAngle> and this also allows like↵type vec3[T] = distinct vec[3, T] ↵?
[03:12:37] <FromDiscord> <Elegantbeef> Indeed
[03:12:43] <FromDiscord> <TryAngle> thanks!
[03:13:17] <FromDiscord> <Elegantbeef> You could always make the base type a distinct then dont need it for all the children
[03:15:40] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GCM
[03:16:19] <FromDiscord> <Elegantbeef> Some syntax issues 😀
[03:19:35] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GCN
[03:20:05] <FromDiscord> <TryAngle> thank you 👍
[03:20:32] <FromDiscord> <Elegantbeef> No problem
[03:20:49] <FromDiscord> <Elegantbeef> There are also a variety of vector libraries if you dont want to reinvent the wheel for the 300th time
[03:22:11] <FromDiscord> <TryAngle> sure I know don't worry 😂 ↵Haven't needed any algebra yet but will look if I need one
[03:22:27] <FromDiscord> <TryAngle> (edit) "yet" => "in nimyet"
[03:22:30] <FromDiscord> <TryAngle> (edit) "nimyet" => "nim yet"
[03:26:57] <FromDiscord> <michaelb> @dom96 with the new lock file ability in nimble, is it only the top-level lock file that's considered?
[03:28:33] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:30:03] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (*.net *.split)
[03:30:03] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[03:30:03] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[03:30:04] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (*.net *.split)
[03:30:53] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:31:54] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[03:32:07] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[03:32:14] *** Joins: Colt (~Colt@user/colt)
[03:32:23] *** Joins: supakeen (~user@python/site-packages/supakeen)
[03:32:34] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[03:32:43] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[03:34:45] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Ping timeout: 256 seconds)
[03:53:00] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[03:56:31] <FromDiscord> <sOkam!> Is there any std library that can send raw inputs from code to the OS?↵Like sending specific mouse movements or keystrokes↵Or does that need an external lib?
[03:59:32] <FromDiscord> <Elegantbeef> There is not something like that in the stdlib that i know of, so yea you'd need an external library
[03:59:50] <FromDiscord> <Elegantbeef> SDL2 i believe can give you that abillity in a cross platform way, though could be wrong
[04:00:03] <FromDiscord> <Elegantbeef> You can also just use system calls of course
[04:02:52] <FromDiscord> <Elegantbeef> On unix i wager you can just write directly to the mouse device, windows probably has an API specifically for this
[04:05:27] <FromDiscord> <creikey> In reply to @sOkam! "Is there any std": For Linux uinput is low level but is very capable https://www.kernel.org/doc/html/v4.12/input/uinput.html
[04:13:59] <FromDiscord> <sOkam!> In reply to @creikey "For Linux uinput is": I'm super new to os interfacing and programming↵How would one go about communicating with uinput?↵_(im on lnx, so its what I'd use, since I can't find a ready made lib atm)_
[04:14:15] <FromDiscord> <creikey> In reply to @sOkam! "I'm super new to": You call the functions in c
[04:14:25] <FromDiscord> <creikey> There's an example on that page
[04:14:32] <FromDiscord> <Elegantbeef> I mean you can do it in Nim
[04:14:41] <FromDiscord> <sOkam!> In reply to @creikey "You call the functions": i meant in nim. i can read the page just fine
[04:14:44] <FromDiscord> <Elegantbeef> The fun part is there is this library i found that wraps the code and is MIT licensed https://github.com/cjxgm/hiddle/blob/e407976bdfdefda397467fb94a7b22bd03924c4e/src/input.nim
[04:15:07] <FromDiscord> <Elegantbeef> So you can probably copy that module assuming you properly abide by MIT when you share it 😀
[04:16:00] <FromDiscord> <Elegantbeef> There is also https://github.com/cjxgm/hiddle/blob/e407976bdfdefda397467fb94a7b22bd03924c4e/src/uinput.nim
[04:16:18] <FromDiscord> <sOkam!> :IF: i share it 😈 ↵But yeah, joke aside, tysm
[04:16:36] <FromDiscord> <creikey> In reply to @Elegantbeef "There is also https://github.com/cjxgm/hiddle/blob/": This doesn't seem like it has all the uinput enums
[04:16:48] <FromDiscord> <creikey> I remember it has a lot of stuff
[04:17:08] <FromDiscord> <Elegantbeef> Hey it's a start for a `uinput` package 😛
[04:18:30] <FromDiscord> <Elegantbeef> I really need to be more productive cause i'm have tempted to run c2nim on this and nimify uinput \:d
[04:18:40] <FromDiscord> <Elegantbeef> half tempted even
[04:21:21] <FromDiscord> <Elegantbeef> I guess there is also https://github.com/luked99/libevdev.nim
[04:25:25] <FromDiscord> <sOkam!> In reply to @Elegantbeef "I really need to": How hard is it to make a wrapper with the automated tools like that one (or the other, cant remember the name)?↵Is it error prone, or what's the issue? Why are they not the norm, an people go for something more manual?
[04:25:47] <FromDiscord> <Elegantbeef> Well there are also things like futhark
[04:26:20] <FromDiscord> <Elegantbeef> More manual stuff is better imo since it's more idiomatic
[04:26:32] <FromDiscord> <Elegantbeef> You can always of course do the tool converted with a wrapping on top
[04:26:50] <FromDiscord> <sOkam!> ic
[04:27:32] <FromDiscord> <Elegantbeef> It does very much depend on what you're after
[04:28:09] <FromDiscord> <Elegantbeef> If you want to just use code then stuff like futhark is nice, but if you want have use Nim features and make it a bit more idiomatic you'll want to use something like c2nim then manually annotate it
[04:30:49] <FromDiscord> <Elegantbeef> For an instance of something you might do, C tends to use integers for bitsets, but Nim has proper bitset support so you might replace usages of that integer  with `set[YourEnum]`
[04:33:21] <FromDiscord> <Elegantbeef> Another thing is using `distinct T` instead of just `T` in cases that there should be type safety (GPIO pins in a microcontroller stdlib for example)
[04:39:21] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[04:40:58] <nrds> <06Prestige99> Yeah the internet cut out
[04:41:09] <nrds> <11sorcerer99> ah i see senior
[04:43:11] <FromDiscord> <Elegantbeef> I never though prestige was that old, but the more you learn
[04:44:08] <nrds> <11sorcerer99> his social security number is in roman numerals
[04:48:22] <nrds> <06Prestige99> Heh
[05:15:32] <FromDiscord> <creikey> In reply to @nrds "<sorcerer> his social security": My social security number opsec is horrible am I doomed
[05:27:18] <FromDiscord> <evoalg> there is c2nim?
[05:27:28] <FromDiscord> <Elegantbeef> There is
[05:27:54] <FromDiscord> <Rika> it cant convert everything though
[05:28:20] <FromDiscord> <Elegantbeef> Yea we're not going to get a tool converted linux kernel
[05:28:50] <FromDiscord> <evoalg> hehe ... still, nice to hear!
[05:29:03] <FromDiscord> <Rika> itll get you lets say maybe 90 or 95% of the way tho
[05:29:29] <FromDiscord> <evoalg> nice
[05:51:02] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:54:43] <FromDiscord> <exelotl> hey I have a weird Nim doc issue...
[05:55:08] <FromDiscord> <exelotl> https://natu.exelo.tl/waitstates.html↵does anyone know why the "Source" links on the page don't work? The URL is valid, and you can right-click -> "open in new tab" to open it. But clicking it does nothing
[05:59:19] <FromDiscord> <Elegantbeef> `target="_blank"` is the culprit it seems\`
[06:01:58] <FromDiscord> <exelotl> weird...
[06:03:07] <FromDiscord> <Elegantbeef> Yea i dont have a degree in webology so cannot help any, maybe there is a way to override it
[06:13:40] *** Joins: rockcavera (~rc@192.12.113.70)
[06:13:41] *** Quits: rockcavera (~rc@192.12.113.70) (Changing host)
[06:13:41] *** Joins: rockcavera (~rc@user/rockcavera)
[06:17:00] <FromDiscord> <exelotl> here's the culprit: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox
[06:17:28] <FromDiscord> <exelotl> I can't change this because it's enforced by Sourcehut Pages ;_;
[07:16:40] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:42:18] <FromDiscord> <impbox [ftsf]> works when i middle click or ctrl click
[07:54:21] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[07:54:36] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[08:03:48] <FromDiscord> <the cws came hme> that's the same as right click open in new tab
[08:06:10] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[08:08:15] *** Quits: _c (~cricket@user/c/x-9604503) (Ping timeout: 250 seconds)
[08:08:58] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Quit: noeontheend)
[08:09:11] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:09:28] *** Joins: _c (~cricket@cpe-107-184-63-117.socal.res.rr.com)
[08:09:52] *** _c is now known as Guest1971
[09:13:35] <FromDiscord> <recreation> hello, anyone mind giving me a lil help
[09:14:32] <FromDiscord> <Elegantbeef> If you just ask it'll find it's way
[09:16:00] <FromDiscord> <recreation> sent a code paste, see https://play.nim-lang.org/#ix=3GDC
[09:16:30] <FromDiscord> <recreation> (edit) "https://play.nim-lang.org/#ix=3GDC" => "https://play.nim-lang.org/#ix=3GDD"
[09:16:40] <FromDiscord> <recreation> `integers.txt` is a text file with one integer per line
[09:16:49] <FromDiscord> <Elegantbeef> split lines might have an extra value
[09:17:35] <FromDiscord> <Elegantbeef> you dont parse integers so you're comparing characters
[09:20:06] <FromDiscord> <Rika> Beef are you okay
[09:20:08] <FromDiscord> <recreation> In reply to @Elegantbeef "you dont parse integers": ahhh that was the issue, i solved it now
[09:20:24] <FromDiscord> <Elegantbeef> What do you mean eika?
[09:20:26] <FromDiscord> <Elegantbeef> rika\
[09:20:35] <FromDiscord> <recreation> thank you for the help!
[09:20:55] <FromDiscord> <Rika> That doesn’t seem to be the issue
[09:21:02] <FromDiscord> <Elegantbeef> Which?
[09:21:06] <FromDiscord> <Rika> Is it not because of -1 and then again ..<
[09:21:25] <FromDiscord> <Rika> Double subtraction hence the 1680
[09:21:27] <FromDiscord> <Elegantbeef> Oh that probably is it
[09:21:34] <FromDiscord> <Elegantbeef> I read them backwards
[09:21:40] <FromDiscord> <recreation> it magically resolved itself when i added `.map(parseInt)`, so idk why e.e
[09:21:51] <FromDiscord> <Rika> Then you’re comparing strings?
[09:22:53] <FromDiscord> <Rika> Do we really have a string comparison operator
[09:22:53] <FromDiscord> <recreation> ye, i assumed the comparison will remain the same even if i dont parse them to int
[09:23:04] <FromDiscord> <Rika> Not necessarily I assume
[09:23:20] <FromDiscord> <Elegantbeef> The comparison is just length iirc
[09:23:25] <FromDiscord> <Rika> Isn’t this the lexical vs numerical comparison issue
[09:23:49] <FromDiscord> <Elegantbeef> It is lexical
[09:23:52] <FromDiscord> <Elegantbeef> So it is fine
[09:24:04] <FromDiscord> <recreation> sent a code paste, see https://play.nim-lang.org/#ix=3GDF
[09:24:07] <FromDiscord> <Elegantbeef> `var`
[09:24:11] <FromDiscord> <Elegantbeef> `let` is immutable
[09:24:35] <FromDiscord> <recreation> ahhh thats mbad haha, i hopped into it without reading the docs
[09:24:41] <FromDiscord> <recreation> thanks again
[09:37:50] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:46:29] *** Joins: energizer (~energizer@user/energizer)
[09:46:34] *** Parts: energizer (~energizer@user/energizer) (Leaving)
[09:56:47] <FromDiscord> <evoalg> @recreation  one way to read in the lines and convert to ints (like the python program does) is to do:↵ `let data = readFile("integers.txt").splitLines().map(parseInt)`
[09:57:58] <FromDiscord> <Rika> That’s what he did ye
[09:57:59] <FromDiscord> <Rika> Yes
[09:58:06] <FromDiscord> <Rika> In reply to @recreation "it magically resolved itself": Here
[09:58:22] <FromDiscord> <evoalg> ahhh I missed that!
[09:58:27] <FromDiscord> <Elegantbeef> AoC is really going to encourage me to make ore iterator utilities
[09:58:45] <FromDiscord> <evoalg> Nice1
[09:58:45] <FromDiscord> <Rika> Miner iterators
[09:59:28] <FromDiscord> <recreation> e.e i thought i hid it well that that was aoc
[09:59:39] <FromDiscord> <Elegantbeef> Not even close 😛
[09:59:45] <FromDiscord> <Elegantbeef> I knew first glance it was aoc
[09:59:55] <FromDiscord> <recreation> haha i guess it was really obvious, finding the increase
[10:00:13] <FromDiscord> <recreation> i got bored after i finished it in python so i tried to rewrite it in nim
[10:00:23] <FromDiscord> <Rika> Any questions asked during AoC should be assumed to be about AoC lol
[10:00:40] <FromDiscord> <evoalg> lol true
[10:00:51] <FromDiscord> <Rika> I guess especially from someone new
[10:04:41] <FromDiscord> <evoalg> @recreation you can find some other nim solutions that you can compare yours to (after you've finished writing yours), which may help see what's possible in Nim, and also ask in here for tips before that 😉
[10:06:53] <FromDiscord> <recreation> ye, i was trying to hack something together with `sum` and `zip` in nim and use one of those `block` thingies but failed terribly haha
[10:07:41] <FromDiscord> <recreation> i find nim pretty cool, plus i am on my holidays and learning it sounds fun
[10:15:11] <FromDiscord> <pyautogui> @recreation  minor thing, generally I do believe inc(x) is prefered to x += 1 in Nim.
[10:19:39] <FromDiscord> <Rika> Use one or the other. Determine yourself which is more appropriate
[10:57:10] <FromDiscord> <pyautogui> Thanks. Good to know there is not a prefered standard.
[11:24:23] *** Quits: Guest1971 (~cricket@cpe-107-184-63-117.socal.res.rr.com) (Quit: leaving)
[11:32:33] <FromDiscord> <evoalg> oh zip in Nim ... `zip(seq1, seq2)` works but not `zip(seq1, seq2, seq3)`
[11:33:02] <Amun-Ra> I use inc to increment by one += otherwise
[11:55:29] *** Joins: neurocyte0132889 (~neurocyte@45.128.183.11)
[11:55:29] *** Quits: neurocyte0132889 (~neurocyte@45.128.183.11) (Changing host)
[11:55:29] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:13:13] <FromDiscord> <@MaskRay:matrix.org> So I indeed run into the issue for my WIP ELF linker\: https://github.com/nim-lang/Nim/issues/19205 (`[arc] of operation segfaults for a ptr object containing traced reference`)
[12:16:17] <FromDiscord> <Elegantbeef> Hmm seems something doesnt check if the field is `nil` before a dereference i guess
[12:18:45] <FromDiscord> <Elegantbeef> Ah yes it seems `obj.isNil or` added to line 233 of `arc.nim` might be all that's needed
[12:19:18] <FromDiscord> <Elegantbeef> Hmm that could be wrong
[12:20:43] <FromDiscord> <Elegantbeef> The issue is actually the inheritance check it seems
[12:20:49] <FromDiscord> <Clonkk> If you have a nimble file with multiple binary is it possible to different options for each binary when using `nimble build`
[12:20:52] *** Joins: advesperacit (~advespera@185.236.42.95)
[12:22:51] <FromDiscord> <Elegantbeef> probably can get away with `yourNimFile.config.nims`
[12:27:15] <FromDiscord> <Clonkk> I assume you meant `yourNimFile.nim.cfg` ?
[12:28:18] <FromDiscord> <Elegantbeef> Which ever you prefer
[12:28:27] <FromDiscord> <Elegantbeef> Or is it `yourNimFile.nims`
[12:28:32] <FromDiscord> <Elegantbeef> I think it's that 😀
[12:29:13] <FromDiscord> <Clonkk> .config.nims works as wel ?
[12:29:16] <FromDiscord> <Clonkk> Ah yeah
[12:29:24] <FromDiscord> <Clonkk> So many config file options
[12:32:36] <FromDiscord> <Elegantbeef> config.nims might not work
[12:32:44] <FromDiscord> <Elegantbeef> That's probably just a fever dream of mine
[12:33:09] <FromDiscord> <Clonkk> yourfile.nims works and the compiler documentation mentions yourfile.nim.cfg
[12:33:33] <FromDiscord> <Clonkk> yourfile.config.nims does not work
[12:34:56] <FromDiscord> <Elegantbeef> yea `config.nims` is used at the root of the project but would apply to everything
[12:35:07] <FromDiscord> <Elegantbeef> but `name.config.nims` is me being dumb
[12:35:30] <FromDiscord> <Clonkk> Eh I don't blame you, it's all very confusing
[12:35:37] <FromDiscord> <Clonkk> You can feel the legacy
[12:36:09] <FromDiscord> <Clonkk> I remember reading on the forums that .nims were then new recommanded way I think ?
[12:36:18] <FromDiscord> <Rika> pretty much afaik
[12:36:28] <FromDiscord> <Rika> but also afaik you can do things in cfg that you cant on nims
[12:36:52] <FromDiscord> <Clonkk> Such as ?↵(@Rika)
[12:37:17] <FromDiscord> <Rika> im not so sure anymore but i think i remember it being mentioned here a while back
[12:37:27] <FromDiscord> <Rika> i guess it doesnt matter until you hit the issue though
[12:41:51] <FromDiscord> <Elegantbeef> There was an issue that you couldnt use config for setting release flags but that applied to both
[12:43:39] <FromDiscord> <Clonkk> I think that's fixed nowadays ?
[12:44:14] <FromDiscord> <Clonkk> Or are we still limited to danger / Release being on the command line
[12:44:55] <FromDiscord> <Elegantbeef> It's been fixed iirc
[12:52:26] <advesperacit> When using testament, is there a way to set `cmd` to apply to all tests instead of repeating it in each test file?
[12:55:14] <advesperacit> It appears that I need `cmd: "nim c -r $options $file"` for third party imports to not break with "cannot open file"
[12:59:51] *** Joins: PMunch (~PMunch@user/pmunch)
[13:38:56] <FromDiscord> <tbrekalo> Is there a nicer way of writting this? https://media.discordapp.net/attachments/371759389889003532/915544985313632266/unknown.png
[13:42:30] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3oQs
[13:42:37] <FromDiscord> <Elegantbeef> https://github.com/beef331/slicerator
[13:42:39] <FromDiscord> <Elegantbeef> Shameless plug
[13:42:40] <nrds> <12R2D299> 4GitHub: 7"A simple iterator library to enable more efficient iterators"
[13:42:54] <FromDiscord> <Elegantbeef> Otherwise yea you've got to do that factory method
[13:43:13] <FromDiscord> <tbrekalo> So what's this doing? https://media.discordapp.net/attachments/371759389889003532/915546068509409291/unknown.png
[13:44:15] <FromDiscord> <Elegantbeef> I realize now you arent actually saving state
[13:45:04] <FromDiscord> <tbrekalo> in the second example I create a copy of a closure iterator and just call it?
[13:46:08] <FromDiscord> <Elegantbeef> well you instantiate it
[13:46:48] <FromDiscord> <tbrekalo> thanks
[13:50:21] *** Joins: Vladar (~Vladar@46.162.2.53)
[13:55:14] <FromDiscord> <hmmm> our std xml facilities are imo very good but I'm missing the xpath facilities I had in python 🤔
[13:55:19] <FromDiscord> <hmmm> rika pls add them
[13:55:26] <FromDiscord> <hmmm> you have 1 hour 🧐
[13:58:45] <FromDiscord> <Rika> wtf
[13:58:59] <FromDiscord> <Rika> u do it
[14:07:37] <FromDiscord> <hmmm> I do it? I do not have the skills, you do it!
[14:08:08] <FromDiscord> <Rika> get the skills then
[14:08:15] <FromDiscord> <hmmm> it's not easy!
[14:08:56] <FromDiscord> <amadan> @hmmm is something like this what you are looking for?↵https://github.com/OpenSystemsLab/q.nim
[14:08:57] <nrds> <12R2D299> 4GitHub: 7"Query HTML/XML elements using a CSS3 or jQuery-like selector syntax"
[14:11:04] <FromDiscord> <hmmm> hmm it's not clear to me if it does what I want amadan. What I want is this https://docs.python.org/3/library/xml.etree.elementtree.html#elementtree-xpath
[14:11:24] <FromDiscord> <Rika> its close
[14:11:39] <FromDiscord> <hmmm> xpath is super comfy for people like me that suck at xml and stuff
[14:25:03] <PMunch> Gotta laugh a bit when I see things like this in C# code `[HttpPost("transfertask")]   // POST /api/transfertask`
[14:25:36] <PMunch> And know that that comment explaining what this line does is almost exactly the code you'd use in Nim for the same result :)
[14:25:51] <PMunch> Just lowercase that POST and you're good
[14:26:25] <PMunch> Of course completely dropping the next line `public async Task<IActionResult> NewTransferTask()`
[14:30:58] <FromDiscord> <tbrekalo> is there something as python `reduce` from functools in vanilla nim?
[14:31:50] <PMunch> foldl?
[14:33:36] <PMunch> @tbrekalo ^
[14:42:51] <FromDiscord> <tbrekalo> In reply to @PMunch "foldl?": but it takes a sequence as the argument; I just want to pass an iterator object
[14:44:42] <FromDiscord> <Rika> need 3rd party library then
[14:45:28] <PMunch> Or convert it to a seq first, although that's not the most efficient
[14:46:08] <PMunch> You have `foldl` in iterutils: https://github.com/def-/nim-iterutils/blob/master/src/iterutils.nim#L171
[14:46:33] <FromDiscord> <tbrekalo> thanks guys 🙂
[14:46:39] <PMunch> But that takes a proc..
[14:47:07] <FromDiscord> <Rika> isnt that normal
[14:47:13] <PMunch> Sure
[14:47:23] <PMunch> But `foldl` in sequtils takes untyped
[14:47:33] <PMunch> And exposes the variables `a` and `b`
[14:51:42] <FromDiscord> <apahl> sent a long message, see http://ix.io/3BaQ
[14:57:32] <FromDiscord> <Rika> its not always true
[14:57:54] <FromDiscord> <Rika> ah
[14:57:55] <FromDiscord> <Rika> wait
[14:58:02] <FromDiscord> <Rika> of course the first element is the same address
[14:58:08] <FromDiscord> <Rika> ah wait no okay i get what you mean
[15:10:18] <PMunch> They aren't always copied
[15:11:43] <PMunch> Nim will pass any type by address if it is beneficial. The compiler doesn't allow you to change it anyways (as long as it's not `var`) so it's safe to do so. However if you take a seq argument and then do `var x = mySeqArg` and modify `x` then `x` will be a copy of `mySeqArg`.
[15:14:16] <FromDiscord> <apahl> Yes, that makes sense.
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:57:41] *** Joins: kobi (~kobi@82.166.168.241.fix.netvision.net.il)
[15:59:41] <FromDiscord> <Rika> actually you dont even need to modify x
[15:59:45] <FromDiscord> <Rika> as long as x is var, its already copied
[16:04:02] <PMunch> Well, there is a change it gets optimised out isn't it?
[16:04:28] <PMunch> Or will it always copy if you do `var x = mySeqArg; echo x[0]`?
[16:10:14] <NimEventer> New thread by Miran: This Month with Nim: November, see https://forum.nim-lang.org/t/8667
[16:15:23] <PMunch> @Yardanico, how's that Sciter testing going?
[16:15:44] <FromDiscord> <Yardanico> i missed it - did you reply with how you got it to compile?
[16:16:08] <FromDiscord> <Yardanico> the char16_t thing
[16:17:16] <FromDiscord> <apahl> In reply to @Rika "as long as x": If you change `let` to `var` in my example above, the address of the first element still stays the same, so not copied, I would say.
[16:17:49] <FromDiscord> <Yardanico> In reply to @apahl "If you change `let`": as you figured out, Nim can optimize the copy if it sees that it's safe, but unsafeAddr (as well as addr), is, well, unsafe :)
[16:17:57] <FromDiscord> <Yardanico> so this code just relies on internal implementation details
[16:17:59] <FromDiscord> <Yardanico> and is not guaranteed to work
[16:18:36] <FromDiscord> <apahl> Yes, I do not want to do anything with the address, I just was interested whether the sequence was copied or not.
[16:19:43] <FromDiscord> <apahl> And to be clear: I think it is very good, that the sequence does not unnecessarily get copied.
[16:22:40] <PMunch> Yardanico, sorry I missed that
[16:22:44] <PMunch> What was the problem?
[16:23:34] <FromDiscord> <Yardanico> Error: unknown type name 'char16_t' and I forgot how to solve it in futhark :)
[16:25:31] <FromDiscord> <Yardanico> that comes from opir, so I guess it actually comes from clang?
[16:25:40] <PMunch> Yup
[16:25:54] <PMunch> Could you share what you have so far?
[16:26:06] <FromDiscord> <Yardanico> in nimterop I had to do "-TBOOL=bool,char16_t=cushort,UINT=cuint,SBOOL=bool" btw
[16:26:15] <FromDiscord> <Yardanico> @PMunch just this:
[16:26:23] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GEK
[16:27:39] <FromDiscord> <Rika> In reply to @apahl "If you change `let`": thats not what i mean
[16:28:08] <FromDiscord> <Rika> if you make another var in the function, `x`, then let will have the same addr but var will not
[16:29:50] <kobi> hi
[16:31:47] <PMunch> Hello
[16:32:03] <kobi> how are you PMunch 
[16:32:21] <PMunch> Well, I'm sick, but otherwise fine
[16:33:17] <kobi> ah, that's too bad
[16:34:07] <kobi> well, u know, i believe that when some gets sick, their karma is pushed out of their body, then they feel sickness and suffer, but afterwards they are healthier than before
[16:34:39] *** Joins: src (~src@user/src)
[16:35:03] <FromDiscord> <apahl> In reply to @Rika "if you make another": Ah, ok. True. Thanks for the clarification.
[16:35:13] <kobi> so all of it is good, anyway
[16:36:16] <NimEventer> New thread by Argl: Making a distinct type slightly less distinct, see https://forum.nim-lang.org/t/8668
[16:38:04] <PMunch> kobi healthier than before sounds good, currently I can't even taste or smell anything..
[16:40:02] <kobi> sorry to hear that, man
[16:41:30] <kobi> in israel we have a saying, something like: a trouble for many is a fool's comfort
[16:42:16] <kobi> it's like, if i told u, that i am currently unemployed. would it make u feel better?
[16:42:24] <kobi> :-)
[16:43:13] <kobi> Today I am attempting to understand async in Nim ...
[16:43:38] <FromDiscord> <Rika> any problems with undersatnding?
[16:43:50] <PMunch> @Yardanico, I also get that error, but it seems to build fine
[16:44:25] <FromDiscord> <Yardanico> huh, weird, opir does "SIGSEGV: Illegal storage access. (Attempt to read from nil?)" and futhark can't parse that obviously :)
[16:44:28] <FromDiscord> <Yardanico> for me
[16:44:32] <FromDiscord> <Yardanico> after showing that error
[16:45:06] <kobi> Rika: hi Rika, can i ask in a private msg?
[16:45:24] <FromDiscord> <Yardanico> yes but you'll have to join discord :)
[16:45:40] <FromDiscord> <Yardanico> i mean even to have the possibility to pm to rika, idk if he'll agree
[16:45:43] <kobi> haven't irced in a long time 
[16:46:42] <PMunch> Hmm, do you have the latest version, and Nim 1.6.0?
[16:47:22] <FromDiscord> <Yardanico> i have devel nim and latest futhark (0.3.1)
[16:47:49] <PMunch> kobi, of course that wouldn't make me feel better. Now I'm sick and sad that you're unemployed..
[16:48:16] <kobi> apparently, you're not a fool, then :-)
[16:48:41] <kobi> it's ok, i am trying to start a side business
[16:49:02] <PMunch> Oh cool, what do you want to do?
[16:49:04] <kobi> still in feasability checking stage
[16:49:10] <FromDiscord> <Yardanico> @PMunch after I enabled stacktraces Nim says that SIGSEGV happens on line "var cursor = getTranslationUnitCursor(unit)" for me
[16:49:41] <kobi> well, writing portable apps for lin,win, android
[16:49:48] <FromDiscord> <Yardanico> and with `echo` i can indeed confirm that it stops on that call
[16:49:56] <kobi> technologically it is feasable. financially i don't know yet
[16:50:03] <FromDiscord> <Yardanico> that said, I have the latest clang 13.0.0 too
[16:50:19] <FromDiscord> <Yardanico> are you sure it should actually continue just fine after showing an error?
[16:51:25] <kobi> I am trying to create a general purpose lib for managing async requests, by making them feel very single threaded... think queues.
[16:52:39] <kobi> writing the manager is familiar to me, but I am missing a crucial bit. how to work with async and I want to basically wrap what the user passes
[16:53:07] <kobi> so that when the future succeeds it'll be added to a success queue, if failed to a failed queue, if timeout ...
[16:53:41] <kobi> so it's like a template where in between the user code i can add this code to "notify" the manager of the state.
[16:55:35] <kobi> still not working though. 
[16:55:48] <kobi> Are there examples for async code out there?
[16:56:51] <PMunch> Yardanico, some errors are fine. It should error out on critical ones
[16:57:07] <PMunch> Hmm, I have clang 12.0.1 apparently
[16:57:26] <PMunch> But I wonder if I might've modified the clang Nim library at some point
[16:57:29] <PMunch> Just a sec
[16:58:10] <PMunch> kobi there should be quite a few examples of async code out there
[16:58:26] <PMunch> Have you seen my article on async and the tutorial page on it?
[16:58:37] <PMunch> Or even the Nim in Action chapter on async?
[17:05:27] <PMunch> Seems I didn't do anything to the clang library
[17:06:06] *** Joins: sagax (~sagax_nb@user/sagax)
[17:06:08] <PMunch> Yardanico, could you try to install Futhark again?
[17:06:47] <kobi> ah ok i think i got it
[17:06:56] <FromDiscord> <Yardanico> hm, I tried it a few times, still doesn't work
[17:07:01] <FromDiscord> <Yardanico> is it supposed to change anything @PMunch ?
[17:07:16] <PMunch> Nah, just wanted to make sure you where on the latest version
[17:09:43] <PMunch> Bit surprised that I don't have 13.0.0 yet though
[17:10:33] <PMunch> Ah, just haven't updated my system
[17:10:38] <PMunch> I'll try with 13.0.0
[17:13:15] *** Joins: rockcavera (~rc@192.12.112.196)
[17:13:15] *** Quits: rockcavera (~rc@192.12.112.196) (Changing host)
[17:13:15] *** Joins: rockcavera (~rc@user/rockcavera)
[17:14:37] <kobi> how do I add a timeout to an async request?
[17:15:06] <kobi> I see addTimer in asyncdispatch but not sure how to use
[17:16:33] <FromDiscord> <Yardanico> In reply to @kobi "how do I add": not sure what you mean
[17:16:38] <FromDiscord> <Yardanico> there's withTimeout
[17:16:47] <FromDiscord> <Yardanico> but it might not be what you want - https://nim-lang.org/docs/asyncdispatch.html#withTimeout%2CFuture%5BT%5D%2Cint
[17:18:11] <kobi> hmm
[17:18:38] <kobi> I forgot i can search github for code samples in advanced search
[17:22:27] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 252 seconds)
[17:22:57] <kobi> why does addTimer needs an AsyncFD?
[17:27:18] <PMunch> Yardanico, hmm with the latest clang version I get the same results
[17:32:15] <PMunch> @Yardanico, here is what it ends up creating for me by the way: http://ix.io/3GFg
[17:32:26] <PMunch> You could try that for now
[17:32:51] <FromDiscord> <dom96> anything that takes an AsyncFD is a low-level proc, you likely don't want to use it
[17:39:54] <FromDiscord> <dithpri> So, I've been fiddling around with concepts, and I'd appreciate any explanation as to why this doesn't work (and how to make it work):↵https://play.nim-lang.org/#ix=3GFh
[17:42:34] <kobi> ok i think i've got it.
[17:42:53] <kobi> thanks dom96
[17:43:45] *** Joins: arkurious (~arkurious@user/arkurious)
[17:50:34] <PMunch> Yardanico, it's kinda hard to figure out what's wrong when it works for me..
[17:52:26] <PMunch> This is my sciter.nim file by the way: http://ix.io/3GFp
[17:52:58] <PMunch> sciter-js-sdk is git cloned from here: https://github.com/c-smile/sciter-js-sdk
[17:53:01] <nrds> <12R2D299> 4GitHub: 7"Sciter.JS - Sciter but with QuickJS on board instead of my TIScript"
[17:57:48] <PMunch> Oh hey, I appear to have my taste back
[17:58:45] <PMunch> Compiled with: nim c --maxLoopIterationsVM:100000000 sciter.nim
[17:59:49] <FromDiscord> <hmmm> is there somewhere a discord / telegram bot that for x activity will buld a mini calendar of people available dates for something? Like dinner with friends activity you tell the bot : sat or mon no sun. The bot keeps track and tries to fit a date
[18:00:10] <FromDiscord> <Yardanico> In reply to @hmmm "is there somewhere a": that's a question for #offtopic  I think
[18:00:14] <FromDiscord> <hmmm> if it doesnt exist I will build it ffs I'm sick of all the peoples
[18:00:35] <FromDiscord> <hmmm> you are right, how do I transfer it there
[18:00:41] <FromDiscord> <Yardanico> just post a message there too :P
[18:00:51] <FromDiscord> <hmmm> 😋
[18:00:57] <FromDiscord> <Yardanico> deleting the message here is pointless at this point, because messages are relayed to matrix and IRC
[18:01:04] <FromDiscord> <Yardanico> and irc doesn't have a feature to delete messages :)
[18:01:16] <FromDiscord> <Yardanico> so anything you post in this chat is saved forever, for everyone to see
[18:01:32] <FromDiscord> <hmmm> sorry boiz I didnt think it throu 😅
[18:01:47] <FromDiscord> <Yardanico> no, it's fine
[18:01:57] <FromDiscord> <Yardanico> In reply to @PMunch "<@177365113899057152>, it's kinda hard": yeah, I don't really know either...
[18:02:15] <FromDiscord> <Yardanico> after cloning the same sciter repo again from scratch and using your code it still errors out
[18:02:26] <FromDiscord> <Yardanico> your clang is 13.0.0 right? since you're on arch
[18:07:15] <PMunch> Yup
[18:07:43] <PMunch> And Nim 1.6.0
[18:08:45] *** Joins: fputs2 (~fputs@67.59.83.166)
[18:11:02] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 252 seconds)
[18:11:02] *** fputs2 is now known as fputs
[18:29:17] <FromDiscord> <dain> can you override the `[]` like you can in python?
[18:29:26] <FromDiscord> <Yardanico> yes
[18:30:28] <FromDiscord> <Yardanico> obviously in real code you wouldn't return the key itself :)
[18:30:47] <FromDiscord> <Yardanico> and to export the operator you use the asterisk
[18:31:13] <FromDiscord> <Yardanico> sent a code paste, see https://paste.rs/9ov
[18:31:18] <kobi> thanks guys for the help and moral support ;-) see you later!
[18:31:19] <FromDiscord> <Yardanico> So that if other modules import this module, they get access to `[]`. Don't forget to export `MyType` too if you want that though
[18:31:26] *** Quits: kobi (~kobi@82.166.168.241.fix.netvision.net.il) (Quit: Leaving)
[18:31:33] <FromDiscord> <Yardanico> sent a code paste, see https://paste.rs/arG
[18:45:29] <FromDiscord> <dain> what if other modules don't import my module
[18:46:03] <FromDiscord> <dain> like suppose in some stdlib module there is `foo[x]` and I override `[]` so that it works with the type of `x`
[18:46:12] <FromDiscord> <Yardanico> In reply to @dain "what if other modules": i was talking specifically about if other modules want to use your type and your []
[18:46:19] <FromDiscord> <Yardanico> if they don't import your module, they won't be able to use it obviously
[18:46:49] <FromDiscord> <dain> oh
[18:46:58] <FromDiscord> <dain> so i can't use it like static duck typing?
[18:48:40] <FromDiscord> <Yardanico> can't say I really understood your question, but you can use generics as "static duck typing"
[18:48:48] <FromDiscord> <Yardanico> but only for procs that actually accept something generic
[18:49:58] <Amun-Ra> dain: you can have concepts that work pretty similar
[18:50:07] <FromDiscord> <Yardanico> you can't have your operator "propagate" to all modules, they need to import your module explicitly
[18:50:19] <FromDiscord> <Yardanico> @Amun-Ra they're still generics though, but yes
[18:51:06] <FromDiscord> <dain> well in this julia talk https://www.youtube.com/watch?v=kc9HwsxE1OY↵they have a pre-existing algorithm that uses a generic matrix multiplication. they create a special vector type and define a function for matrix-vector product that is optimized for their special vector type. they pass the vector into the pre-existing algorithm and it automatically uses the optimized implementation for that type
[18:51:08] <nrds> <12R2D299> 4Youtube: 7"JuliaCon 2019 | The Unreasonable Effectiveness of Multiple Dispatch | Stefan Karpinski"
[18:51:31] <FromDiscord> <dain> despite the existing algorithm not having any knowledge of this type or the optimized multiplication implementation
[18:52:05] <FromDiscord> <Yardanico> In reply to @dain "well in this julia": well, as i said, use generics if you want this
[18:52:16] <FromDiscord> <Yardanico> they are using generics, it's just that in julia if you omit the types you get a generic function it seems like
[18:52:29] <FromDiscord> <dain> ah okay
[18:52:43] <FromDiscord> <Yardanico> https://nim-lang.org/docs/manual.html#generics
[18:54:25] <FromDiscord> <Yardanico> so if you make a `proc call[T](data: T)` it'll accept a value of any type, but of course it will only work if the type has all the necessary procedures/fields that you are using inside the proc
[18:54:39] <FromDiscord> <Yardanico> concepts help with that - they allow you to _specify_ what exactly do you want in a type for the proc to work for it
[18:54:56] <FromDiscord> <Yardanico> https://nim-lang.github.io/Nim/manual_experimental.html#concepts
[18:55:18] <FromDiscord> <Yardanico> just don't forget that concepts are a purely compile-time thing and don't exist on runtime, so you can't do seq[MyConcept]
[18:55:26] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[18:56:42] *** Joins: lumo_e (~enrico@151.29.48.90)
[19:01:46] <FromDiscord> <dain> hm
[19:02:25] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GFZ
[19:03:12] <FromDiscord> <dain> `sum` is already generic but the return type has to be the same, i.e. sum over sequence of ints must be an int
[19:03:18] <FromDiscord> <dain> but here i have bool,bool->int
[19:03:23] <FromDiscord> <dain> and i don't know how to annotate it
[19:03:50] <FromDiscord> <dain> (edit) "`sum` ... is" 03added "in the math module"
[19:04:49] <FromDiscord> <Yardanico> In reply to @dain "okay so how do": not sure what you mean, your return type is just `int` isn't it?
[19:05:04] <FromDiscord> <dain> yes but when I'm defining `sum` I don't know that yet, do I?
[19:05:08] <FromDiscord> <dain> because it's generic
[19:05:33] <FromDiscord> <dain> like i could make bool+bool return a string if i wanted to
[19:05:58] <FromDiscord> <Rika> `sum[T, U](x: openArray[T]): U` ?
[19:06:08] <FromDiscord> <Yardanico> that'll require you to specify the return type manually
[19:06:12] <FromDiscord> <Rika> which is basically just the auto one too
[19:06:17] <FromDiscord> <Rika> just explicit
[19:06:22] <FromDiscord> <Rika> not sure what you want to be honest
[19:06:31] <FromDiscord> <Yardanico> i get what you want @dain , wait a bit
[19:06:39] <FromDiscord> <dain> In reply to @Rika "`sum[T, U](x: openArray[T]): U`": that was the first thing I tried, it said it couldn't instantiate `U` or something
[19:06:39] <FromDiscord> <Yardanico> i'm sure this can be made to work through typeof
[19:06:53] <FromDiscord> <Rika> ah yeah
[19:06:55] <FromDiscord> <Rika> i get why]
[19:06:57] <FromDiscord> <Yardanico> In reply to @dain "that was the first": yeah nim doesn't have return type inference
[19:06:58] <FromDiscord> <Rika> dumb mistake
[19:07:00] <FromDiscord> <Rika> sorry
[19:07:05] <FromDiscord> <Yardanico> so you can't do it the U way
[19:07:13] <FromDiscord> <Rika> auto is the only way i assume
[19:08:47] *** Quits: lumo_e (~enrico@151.29.48.90) (Ping timeout: 252 seconds)
[19:09:14] <FromDiscord> <Yardanico> @Rika auto won't work here because `result` is of an unkown type
[19:09:17] <FromDiscord> <Yardanico> (edit) "unkown" => "unknown"
[19:10:08] <FromDiscord> <dain> yeah I wondered if there was a way to ask the compiler about the return type and use that
[19:10:15] <FromDiscord> <Yardanico> @dain this works but I'm not sure it's the best way
[19:10:22] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GG0
[19:10:29] <FromDiscord> <Yardanico> the first line in the proc is to hint to the compiler what the return type should be
[19:10:45] <FromDiscord> <dain> `result = default(typeof(default(T) + default(T)))` <- perfect, this is what I was thinking of
[19:10:48] <FromDiscord> <Yardanico> sadly `typeof(default(T) + default(T))` as the return type doesn't seem to work
[19:10:53] <FromDiscord> <Yardanico> but it works in the proc body
[19:10:56] <FromDiscord> <dain> oh :(
[19:11:04] <FromDiscord> <dain> oh :)
[19:11:34] <FromDiscord> <Yardanico> basically you ask typeof for the type returned by + for two T's
[19:11:39] <FromDiscord> <Yardanico> and then assing default of that type to result
[19:11:50] <FromDiscord> <Yardanico> default for types is just the zeroed value, so for basic value types it's all 0
[19:11:55] <FromDiscord> <Yardanico> for ref types it'll be nil for example
[19:12:06] <FromDiscord> <dain> hm
[19:12:46] <FromDiscord> <dain> is there a way to get the return type purely from the type information? rather than instantiating the zero-values and then adding them and reflecting on the return type
[19:13:03] <FromDiscord> <Rika> not really
[19:13:26] <FromDiscord> <dain> like some kind of function where I can ask the compiler:↵↵`return_type_of(some_func, T, U, V, ...)`
[19:13:42] <FromDiscord> <dain> would be useful
[19:13:53] <FromDiscord> <Rika> doesnt really work
[19:14:29] <FromDiscord> <Rika> nim has argument name overloading so in some (admittedly very rare) cases that wouldnt work↵though i guess it could just error when it does
[19:15:11] <FromDiscord> <dain> what is argument name overloading
[19:15:55] <FromDiscord> <Rika> proc (a: int, b: int) and proc (a: int, x: int) can be distinguished by `call(1, x = 0)` or `call(1, b = 0)`
[19:16:41] <FromDiscord> <dain> oh damn
[19:16:55] <FromDiscord> <Rika> ...i think its still there
[19:17:01] <FromDiscord> <Rika> not sure if it was ever removed or whatever
[19:17:03] <FromDiscord> <Yardanico> @dain as I thought, that example can be made to work with concepts
[19:17:14] <FromDiscord> <dain> well maybe it could be `return_type_of(some_func, a=T, b=U)`
[19:17:18] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GG5
[19:17:59] <FromDiscord> <Yardanico> MyType.T here is syntax for getting the type parameter for an implicit generic type
[19:18:12] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GG6
[19:18:17] <FromDiscord> <Yardanico> you can have it as `func sum[T](x: openArray[MyType[T]]): T =` instead (with same concept definition)
[19:18:44] <FromDiscord> <Yardanico> In reply to @dain "i dont understand what": concepts are basically constraints for types
[19:19:06] <FromDiscord> <dain> so in this case we could call `MyType[T]` `Summable[T]` or something?
[19:19:18] <FromDiscord> <Yardanico> i guess, yeah
[19:19:25] <FromDiscord> <Yardanico> but usually summables return the sum of the same type
[19:19:28] <FromDiscord> <dain> well more like `SummableTo[T]`
[19:19:32] <FromDiscord> <Yardanico> yeah
[19:20:28] <FromDiscord> <Yardanico> just keep in mind that concepts are (still) experimental and the change that you'll get a compiler crash when using them is higher than in normal code :)
[19:20:33] <FromDiscord> <Yardanico> (edit) "change" => "chance"
[19:21:06] <FromDiscord> <TryAngle> @Yardanico ↵hi sorry for interfering,↵how stable are concepts right now as they're still experimental & is there a roadmap / general idea when they'll be stabilized?
[19:21:34] <FromDiscord> <Yardanico> I can't say for sure, but in https://github.com/nim-lang/RFCs/issues/437 they're in stretch goals
[19:21:51] <FromDiscord> <Yardanico> and about the stability - well, it's hard to judge, when they work, they work
[19:22:07] <FromDiscord> <Yardanico> you can check open issues with the Concepts label - https://github.com/nim-lang/Nim/issues?q=is%3Aopen+is%3Aissue+label%3AConcepts
[19:22:16] <FromDiscord> <dain> there are some other places where you could conceivably have a sum that returns something of a different type. e.g. char+char->string
[19:23:14] <FromDiscord> <TryAngle> because if they get stable I don't think I would ever use something other than nim again 😂
[19:23:17] <FromDiscord> <TryAngle> In reply to @Yardanico "you can check open": thanks
[19:29:23] <FromDiscord> <dain> on a completely other topic
[19:29:27] <FromDiscord> <dain> does nim have a mascot?
[19:30:04] <FromDiscord> <Yardanico> no
[19:30:15] <FromDiscord> <Yardanico> there were some proposed designs but nothing was made official :)
[19:30:32] <FromDiscord> <dain> i would buy a nim plushie
[19:30:36] <FromDiscord> <dain> whatever the animal is
[19:31:10] <FromDiscord> <Yardanico> just buy a crown instead :P
[19:34:42] <FromDiscord> <IsaacPaul> How I support nim: "Treat yourself... king" 🤴  ↵😂
[19:50:13] <FromDiscord> <dithpri> sent a code paste, see https://play.nim-lang.org/#ix=3GGs
[20:09:19] <FromDiscord> <IsaacPaul> o.O
[20:09:22] <FromDiscord> <IsaacPaul> I don't see the bug
[20:09:43] <FromDiscord> <IsaacPaul> wait
[20:13:24] <FromDiscord> <IsaacPaul> I think m[K] is not Stringifiable?
[20:13:46] <FromDiscord> <IsaacPaul> It looks like you're using a type as a key when you need to use a key as a key?  but idk
[20:18:40] <FromDiscord> <IsaacPaul> having generics and [] accessor use the same characters [] is kinda confusing but I think that's what's going on. I just don't have time to research and verify.
[20:28:32] <FromDiscord> <Recruit_main707> what happens if you do \`[]`(m, K)?
[20:30:06] <FromDiscord> <dain> how do I specify that a parameter can just be anything that can be iterated over
[20:30:17] <FromDiscord> <dain> I tried `iterator[T]` and `iterable[T]` but they didn't work
[20:30:55] <FromDiscord> <Yardanico> one way is
[20:31:05] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GGR
[20:31:07] <FromDiscord> <dain> :D neat
[20:31:11] <FromDiscord> <Yardanico> but this just ensures that the type has `items` defined for it
[20:31:14] <FromDiscord> <dain> let me try that
[20:31:17] <FromDiscord> <Yardanico> so you can just say
[20:31:55] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GGS
[20:32:22] <FromDiscord> <Yardanico> i actually used that concept in https://github.com/Yardanico/nimpylib/blob/master/src/pylib.nim#L27 (that whole pylib module is really made just for fun though, don't use it in real projects :P)
[20:32:29] <FromDiscord> <dain> doesn't x.items give an iterable over T and not the T itself?
[20:32:48] <FromDiscord> <Yardanico> it
[20:32:56] <FromDiscord> <Yardanico> it's the return type of the `items` iterator
[20:33:08] <FromDiscord> <Yardanico> so it's T since we don't exactly know it
[20:36:24] <FromDiscord> <dain> awesome
[20:36:26] <FromDiscord> <dain> so i can do this
[20:36:35] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GGT
[20:36:46] <FromDiscord> <dain> overload `[]` to take a function
[20:36:56] <FromDiscord> <Yardanico> xdddd
[20:37:08] <FromDiscord> <Yardanico> that is an... interesting usage of `[]`
[20:37:09] <FromDiscord> <dain> although it breaks if i use `=>`
[20:37:12] <FromDiscord> <Yardanico> never seen before
[20:37:29] <FromDiscord> <dain> pandas has it
[20:37:34] <FromDiscord> <Yardanico> i mean it's obvious that this works because an anonymous procedure is a first class value just like a string
[20:37:42] <FromDiscord> <Yardanico> In reply to @dain "pandas has it": yes but nim is not pandas :)
[20:37:43] <FromDiscord> <dain> although it works differently, the argument is the whole array rather than an individual element
[20:37:54] <FromDiscord> <Yardanico> you can have templates and a lot of other stuff instead of overloading []
[20:38:25] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GGU
[20:38:37] <FromDiscord> <dain> `Error: A nested proc can have generic parameters only when it is used as an operand to another routine and the types of the generic paramers can be inferred from the expected signature.`
[20:38:45] <FromDiscord> <Yardanico> yes, because nim can't figure out the types
[20:39:59] <FromDiscord> <Yardanico> while not exactly what you want, have you seen https://github.com/zero-functional/zero-functional?
[20:40:00] <FromDiscord> <Yardanico> (edit) "https://github.com/zero-functional/zero-functional?" => "https://github.com/zero-functional/zero-functional ?"
[20:40:01] <nrds> <12R2D299> 4GitHub: 7"A library providing zero-cost chaining for functional abstractions in Nim."
[20:40:02] <nrds> <12R2D299> 4GitHub: 7"A library providing zero-cost chaining for functional abstractions in Nim."
[20:40:20] <FromDiscord> <dain> ive heard of it but not looked in great detail
[20:48:02] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3GGY
[20:48:15] <FromDiscord> <Yardanico> nope
[20:48:23] <FromDiscord> <TryAngle> ok ty
[20:49:02] <FromDiscord> <Yardanico> that said, I'd recommend using https://nim-lang.github.io/fusion/src/fusion/matching.html for matching object variants so that you do less mistakes (accessing the wrong branch, etc)
[20:49:32] <FromDiscord> <TryAngle> I've read fusion was "dead"
[20:49:39] <FromDiscord> <TryAngle> is that not the case "anymore"
[20:49:42] <FromDiscord> <TryAngle> (edit) ""anymore"" => ""anymore"?"
[20:49:49] <FromDiscord> <haxscramper> yes, it is dead
[20:50:05] <FromDiscord> <haxscramper> you just won't get new fixes unless someone moves their fat ass
[20:50:17] <FromDiscord> <haxscramper> most likely this won't happen though
[20:50:52] <FromDiscord> <haxscramper> I moved pattern matching here https://haxscramper.github.io/hmisc/hmisc/macros/matching.html
[20:52:03] <FromDiscord> <haxscramper> I mean, it is not even on the roadmap
[20:52:10] <FromDiscord> <TryAngle> hmm haven't felt the need for extra matching libraries yet but will look into it maybe
[20:52:24] <FromDiscord> <haxscramper> it is not "extra" matching library
[20:52:26] <FromDiscord> <Yardanico> In reply to @TryAngle "hmm haven't felt the": I mean it'll be pretty useful if you're doing a lot of stuff with object variants
[20:52:30] <FromDiscord> <haxscramper> it is the "official" library
[20:52:36] <FromDiscord> <haxscramper> that I just don't want to die
[20:53:17] <FromDiscord> <haxscramper> anyway, just for using variant objects it is not necessary
[20:53:32] <FromDiscord> <Yardanico> yeah, I didn't say it's necessary, just that it's useful
[20:53:33] <FromDiscord> <haxscramper> and `case` thing does not add readability either
[20:53:41] <FromDiscord> <haxscramper> why in the world did I even use this feature
[20:53:56] <FromDiscord> <TryAngle> In reply to @Yardanico "I mean it'll be": might be I'm working a markdown-like parser, so nothing that huge↵but if I have somehting huge, I will sure look into it thanks!
[20:54:01] <FromDiscord> <Yardanico> In reply to @TryAngle "might be I'm working": oh, okay
[20:54:18] <FromDiscord> <Yardanico> for some "inspiration" we have https://github.com/kyoheiu/nmark and https://github.com/soasme/nim-markdown
[20:54:20] <nrds> <12R2D299> 4GitHub: 7"A fast markdown converter, based on CommonMark, written in Nim."
[20:54:25] <FromDiscord> <Yardanico> the latter seems to be more popular, but quite overengineered
[20:55:34] <FromDiscord> <TryAngle> In reply to @Yardanico "for some "inspiration" we": thanks!↵also MIT License 😳
[20:55:40] <FromDiscord> <Yardanico> is that not ok?
[20:55:46] <FromDiscord> <Yardanico> Nim itself is MIT, and most libraries for it are MIT
[20:55:49] <FromDiscord> <TryAngle> no that's a good thing XD
[20:58:21] <FromDiscord> <Yardanico> nmark is about 5 times faster than nim-markdown but it doesn't pass all commonmark tests
[21:00:11] <FromDiscord> <Yardanico> nmark itself is also around 10% faster when compiled with orc, but markdown is much much much slower with orc, but that's not its fault
[21:00:27] <FromDiscord> <Yardanico> it's just because methods are at least 10x slower under orc than in refc
[21:01:25] <FromDiscord> <TryAngle> ah I see, I will look into them 😄
[21:01:53] <PMunch> soasme/nim-markdown is pretty neat
[21:01:58] <PMunch> Quite extensible
[21:02:21] <PMunch> I wanted to use it for a small thing, but I couldn't get Gtk to show a webview properly
[21:02:31] <FromDiscord> <Yardanico> well nmark actuall does have an AST representation too :)
[21:03:09] <FromDiscord> <Yardanico> the problem with markdown is that it uses methods extensively, and also pcre
[21:03:20] <FromDiscord> <Yardanico> nmark is built on procs with pure-nim `regex` module and is fater
[21:03:22] <FromDiscord> <Yardanico> (edit) "fater" => "faster"
[21:03:45] <PMunch> Pro of markdown is that you can add/remove features to your liking very easily
[21:03:56] <PMunch> Haven't tried nmark though, might be possible there as well
[21:04:40] <FromDiscord> <Yardanico> ah yeah, nmark doesn't have that, but it shouldn't be hard to add to the library
[21:07:13] <FromDiscord> <TryAngle> In reply to @PMunch "Pro of markdown is": that was why I started using it but the combination of some plugins is just so tiresome at least in VSC that I jsut can't anymore
[21:07:36] <PMunch> Huh?
[21:07:38] <FromDiscord> <Yardanico> did you mean markdown as in the format itself? we were talking about the library :P
[21:07:49] <FromDiscord> <TryAngle> ah yes I mean markdown itself XD
[21:07:53] <PMunch> Ah right :P
[21:08:03] <PMunch> soasme/nim-markdown
[21:08:04] <FromDiscord> <Yardanico> since nim doesn't have a lot of packages, packages get to "occupy" nice names
[21:08:10] <FromDiscord> <TryAngle> thought the last comment was about it
[21:08:13] <FromDiscord> <Yardanico> e.g. soasme's nim-markdown is just `nimble install markdown`
[21:09:20] <PMunch> What did you replace markdown (the tech) with @TryAngle
[21:11:11] <FromDiscord> <narimiran> hey PMunch! will you stream your AoC solving this year?
[21:14:00] <FromDiscord> <TryAngle> In reply to @PMunch "What did you replace": well I'm working on implementing the most basic things atm and learning the lang nim (it's my first project with it), got some things working already aswell...↵but mainly I want to remove the need for html and get KaTeX working.. maybe also make some parts of KaTeX easier to write but idk yet.. I really dont like the constant need for `\begin{..} ... \end{..}` and also I don't like typing `
[21:14:29] <PMunch> Don't think so unfortunately :( I'm not living alone any longer, and I fear it might be a bit disruptive if I stream for two hours every day in the living room :P
[21:14:37] <PMunch> But I can do today :)
[21:15:01] <FromDiscord> <narimiran> congrats? 🙂
[21:17:34] *** Joins: lumo_e (~enrico@151.29.48.90)
[21:23:16] <PMunch> Haha, congrats is correct :P
[21:23:48] <PMunch> Moving in with my new girlfriend, haven't hit hard times and have to rent out a room to a stranger
[21:24:30] <FromDiscord> <narimiran> congrats!
[21:27:05] <anddam> howdy, back again at using imgui binding, I installed nimgl/imgui from repo, using nimble, then try to run tests/test.nim for starters
[21:27:30] <anddam> I used   nim cpp test.nim   in order to use the native library and not the C wrapper
[21:28:35] <anddam> I have a missing library (and rightfully so) since I do not have imgui header installed, but am I supposed to install in one of the "default" nim looking path? 
[21:29:25] <FromDiscord> <Yardanico> what error do you get? nimgl/imgui ships imgui with itself
[21:29:26] <anddam> case in point the failing line has    -I/home/anddam/Development/Nim/nimgl-imgui-git/src/imgui/private/cimgui -I/home/anddam/.choosenim/toolchains/nim-1.6.0/lib -I/home/anddam/Development/Nim/nimgl-imgui-git/tests
[21:29:51] <FromDiscord> <Yardanico> can you show the full output of the error? you can post to some pasting service
[21:30:16] <FromDiscord> <Yardanico> how did you install imgui btw?
[21:30:21] <FromDiscord> <Yardanico> did you `git clone` it by any chance?
[21:31:04] <anddam> https://termbin.com/kct2
[21:31:05] <FromDiscord> <Yardanico> if so, you probably didn't do  `git clone --recursive` which is required because cimgui is a git submodule of nimgl/imgui
[21:31:06] <PMunch> @narimiran, dinner first, then stream I think :)
[21:31:14] <anddam> oh the submodules
[21:31:26] <PMunch> Oh damn, it's 7PM already :S
[21:31:32] <FromDiscord> <Yardanico> it shows nimble direct isntall just below btw @anddam
[21:31:35] <FromDiscord> <Yardanico> (edit) "isntall" => "install"
[21:31:38] <anddam> I installed by simple git clone, but not nimgl, just nimgl/imgui's repo
[21:31:38] <FromDiscord> <Yardanico> in the readme i mean
[21:31:40] <FromDiscord> <narimiran> ah, later on i'll have to do my family obligations, so i'll probably miss it
[21:32:18] <FromDiscord> <narimiran> but hopefully you'll do it in the following days too 🙂 (when the tasks are easy and solvable in ~15 min)
[21:32:18] <anddam> mmm I think I used nimble install
[21:32:32] <anddam> can I force install over it using nimble just to be sure?
[21:32:58] <FromDiscord> <Yardanico> if you already have a git repo you can do `git submodule update --init --recursive` and then run `nimble install` again
[21:33:10] <FromDiscord> <Yardanico> you can also just do `nimble install https://github.com/nimgl/imgui.git` to let nimble do the cloning by itself
[21:33:41] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[21:33:43] <anddam> I checked shell history, I had installed with nimble in first place, and I have overwrote it now
[21:35:39] <anddam> ok, I get the very same output by running      nim cpp tnull.nim
[21:35:49] <anddam> whereas test.nim lacks nimgl/opengl
[21:36:02] <anddam> installing nimgl with nimble now
[21:36:56] <anddam> and now the various X dev packages
[21:38:11] <anddam> Yardanico: I remember you told me that the C API required building cimgui lib, whereas the cpp backend would work without any specific lib
[21:38:17] <FromDiscord> <Yardanico> yes
[21:38:38] <FromDiscord> <Yardanico> but you need something like opengl to _output_ imgui to something
[21:38:50] <anddam> and I did install that
[21:39:05] <anddam> I still have the missing imgui/imgui.h header
[21:39:26] <anddam> what I do not get are these inclusion options  -I/home/ada/Development/Nim/nimgl-imgui-git/src/imgui/private/cimgui -I/home/ada/.choosenim/toolchains/nim-1.6.0/lib -I/home/ada/Development/Nim/nimgl-imgui-git/tests
[21:39:49] <FromDiscord> <Yardanico> is there a problem with them? they seem normal
[21:40:08] <FromDiscord> <Yardanico> also I just did `nimble install https://github.com/nimgl/imgui` and imgui works for me
[21:40:10] <FromDiscord> <Yardanico> the test.nim
[21:40:52] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GHj
[21:41:20] <FromDiscord> <Yardanico> because `lines` itself is an iterator
[21:41:32] <FromDiscord> <dain> yeah that's what I want
[21:41:34] <FromDiscord> <dain> i want to map over it
[21:41:37] <FromDiscord> <dain> lazily
[21:42:24] <anddam> Yardanico: the problem is those are "odd" paths for me to provide the library
[21:42:44] <FromDiscord> <Yardanico> why? they're perfectly normal
[21:42:50] <FromDiscord> <Yardanico> since imgui lib bundles the imgui itself
[21:42:55] <FromDiscord> <Yardanico> so it needs imgui include files to compile
[21:43:12] <FromDiscord> <Yardanico> In reply to @dain "yeah that's what I": well this wasn't even possible before nim 1.6, but now you can use `iterable[T]` to at least pass an iterator like that to a template, not an iterator though
[21:43:15] <anddam> I am missing something
[21:43:50] <FromDiscord> <dain> In reply to @Yardanico "well this wasn't even": i don't understand why the thing i'm passing to map (the result of `lines`) isn't matching the concept I defined
[21:43:55] <FromDiscord> <Yardanico> for me it uses `g++ -c -std=gnu++14 -funsigned-char  -w -fmax-errors=3 -fpermissive -I/home/dian/.nimble/pkgs/imgui-1.84.2/imgui/private/cimgui -DIMGUI_DISABLE_OBSOLETE_FUNCTIONS=1 -D_GLFW_X11   -I/home/dian/Things/nim/lib -I/home/dian/Projects/nmark -o /home/dian/.cache/nim/fa_d/imgui_demo.cpp.o /home/dian/.nimble/pkgs/imgui-1.84.2/imgui/private/cimgui/imgui/imgui_demo.cpp` to compile and works
[21:44:12] <FromDiscord> <Yardanico> In reply to @dain "i don't understand why": because default nim iterators are inline iterators, they're not really first class values
[21:44:17] <FromDiscord> <dain> oh
[21:44:34] <FromDiscord> <dain> so how do you lazily map over them?
[21:44:40] <anddam> Yardanico:   -I/home/dian/.nimble/pkgs/imgui-1.84.2/imgui/private/cimgui    is saner since it points to .nimble
[21:44:51] <FromDiscord> <Yardanico> but that's because I installed with `nimble install`
[21:45:03] <FromDiscord> <Yardanico> did you perhaps do `nimble develop` in the past? maybe that's why it still links to your own dir
[21:45:12] <FromDiscord> <Yardanico> but it should've overwritten it anyway, hm
[21:45:21] <FromDiscord> <Yardanico> In reply to @dain "so how do you": well, as I said, with nim 1.6 you can use a template with `iterable[T]`
[21:45:40] <anddam> I don't think so, I didn't even have nim on this system until a few minutes ago
[21:46:09] <FromDiscord> <dain> In reply to @Yardanico "well, as I said,": how does it work with a template? can I still use yield inside? if not what do I replace it with
[21:46:37] <FromDiscord> <Yardanico> In reply to @anddam "I don't think so,": so again, did you do `nimble install https://github.com/nimgl/imgui` or not?
[21:46:44] <FromDiscord> <Yardanico> it will take a while and you shouldn't ctrl+c it
[21:46:51] <FromDiscord> <Yardanico> because it clones recursively and takes some time to finish cloning
[21:47:07] <FromDiscord> <Yardanico> if you installed `nimgl`, you need to refer to imgui in it with `nimgl/imgui` because that's a different module
[21:47:11] <anddam> Yardanico: yes, I did. I did not kill the process
[21:47:38] <anddam> I have now removed all nimble packages using 'nimble remove'
[21:47:52] <anddam> I have zero packages listed using --install and will try again
[21:48:30] <anddam> https://termbin.com/8ogb
[21:48:36] <anddam> took ~20 seconds
[21:48:58] <FromDiscord> <Yardanico> yep
[21:49:15] <anddam> ok, now I get the test.nim file, only the file and not the whole repo
[21:49:17] <anddam> sounds about right?
[21:49:21] <FromDiscord> <Yardanico> yes
[21:49:27] <anddam> and try    nim cpp test.nim
[21:49:35] <anddam> /home/ada/.nimble/pkgs/imgui-1.84.2/imgui/impl_opengl.nim(11, 23) Error: cannot open file: nimgl/opengl
[21:49:46] <FromDiscord> <Yardanico> yes, because imgui needs opengl for drawing
[21:49:47] <anddam> this is because the test.nim example does in fact rely on nimgl
[21:49:51] <FromDiscord> <Yardanico> so you `nimble install nimgl`
[21:50:05] <anddam> running
[21:50:39] * anddam oopses
[21:50:43] <anddam> /bin/ld: cannot find -lGL
[21:50:51] <FromDiscord> <Yardanico> heh
[21:50:59] <FromDiscord> <Yardanico> you need opengl dev libs for your distro
[21:51:21] <FromDiscord> <Yardanico> mesa-devel or something like that
[21:51:41] <FromDiscord> <Yardanico> on debian-like distros it's `libgl1-mesa-dev`
[21:51:44] <anddam> libglvnd in my case
[21:51:58] <FromDiscord> <Yardanico> that's not the same thing
[21:52:12] <FromDiscord> <Yardanico> but if it works, okay
[21:52:12] <anddam> but it's the package providing libGL
[21:52:28] <anddam> and the linker was failing there
[21:52:42] <FromDiscord> <Yardanico> just install `mesa-common-dev` and be done with it :)
[21:52:48] <FromDiscord> <Yardanico> it installs all necessary dev viles
[21:52:49] <FromDiscord> <Yardanico> (edit) "viles" => "files"
[21:52:59] <FromDiscord> <michaelb> will `isValidSha1Hash` in Nim 1.6's `std/sha1` be backported to 1.2.x and 1.4.x so those release lines will be compatible with nimble >= 0.14.0 ?
[21:53:02] <anddam> actually I had to install libglvnd-devel, apparently /usr/lib/libGL.so.1  was not enough
[21:53:09] <anddam> Yardanico: not on my system, that is Void 
[21:53:22] <anddam> running
[21:53:25] <anddam> thanks 
[21:53:42] <anddam> now for the sake of knowledge how do I go in order to build the cimgui?
[21:53:45] <FromDiscord> <Yardanico> In reply to @brainproxy "will `isValidSha1Hash` in Nim": i think you should ask that on the forum or open an issue, your question will get lost in this chat quite quickly
[21:53:58] <FromDiscord> <michaelb> good point, thanks 🙂
[21:54:23] <FromDiscord> <michaelb> and in any case would be better to ask in #nimble
[21:54:26] <anddam> or rather by cimgui do I need to build https://github.com/nimgl/cimgui this?
[21:54:28] <nrds> <12R2D299> 4GitHub: 7"c-api for imgui (https://github.com/ocornut/imgui)"
[21:54:34] <FromDiscord> <Yardanico> In reply to @anddam "or rather by cimgui": nonono
[21:54:51] <FromDiscord> <Yardanico> In reply to @anddam "now for the sake": you do all the necessary cloning and compilation steps in https://github.com/cimgui/cimgui, place the resulting `cimgui.so` in the same folder as `test.nim` and then compile your test with `nim c` and run with `LD_LIBRARY_PATH=. ./test`
[21:55:03] <FromDiscord> <Yardanico> you can have it in a different folder too, but then you'll have to point `LD_LIBRARY_PATH` to that folder
[21:55:18] <FromDiscord> <Yardanico> or just place it somewhere in your $PATH, then you won't need to set LD_LIBRARY_PATH
[21:55:24] <anddam> or place the so in a path where the linker looks by default
[21:55:36] <FromDiscord> <Zoom> So, how was your first day of AOC? Pretty content with myself, managed to want an `{.experimental.}` feature on the first day
[21:55:53] <FromDiscord> <Yardanico> @Zoom fine, btw, we have a separate channel for AoC :) it's fine to post here though too
[21:55:56] <anddam> can I make a static build of that and then bundle the whole shebang in the resulting executable from the nim compilation?
[21:56:02] <FromDiscord> <Zoom> Anyone had any experience with extending zero functinoal using their DSL?
[21:56:08] <FromDiscord> <Yardanico> In reply to @anddam "can I make a": yes, you'll have to link cimgui statically then
[21:56:11] <anddam> (I remember I was told I could, I need some pointers again)
[21:56:33] <FromDiscord> <Zoom> I don't see it in the Space↵(@Yardanico)
[21:56:46] <FromDiscord> <Yardanico> i guess it's not bridged to matrix :(
[21:58:03] <FromDiscord> <Yardanico> In reply to @anddam "(I remember I was": compile cimgui statically with the docs they have, then you add it as an argument to link for the C compiler (with passC/passL), and also do --dynlibOverride:"cimgui"
[21:59:09] <FromDiscord> <Yardanico> so that nim doesn't try to load it at runtime (that's what `dynlib` pragma does and imgui module uses it)
[21:59:12] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GHn
[22:01:49] <FromDiscord> <Zoom> Here's the issue I'm having with zero\_functional\: https://play.nim-lang.org/#ix=3GHo
[22:02:31] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GHq
[22:02:51] <FromDiscord> <Zoom> The line 16 compiles fine, but there's the `state` variable injection fails for line 18.
[22:03:53] <FromDiscord> <dain> In reply to @Yardanico "i don't remember why": that still gives me an error
[22:04:00] <FromDiscord> <Yardanico> huh
[22:04:12] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GHs
[22:04:21] <FromDiscord> <dain> i'm on 1.6
[22:04:42] <FromDiscord> <Yardanico> works on 1.6 in the playground though https://play.nim-lang.org/#ix=3GHt
[22:04:51] <FromDiscord> <Yardanico> it might be that it's choosing the wrong `map` if you have more than one of them in the same namespace
[22:05:05] <FromDiscord> <Yardanico> wait, ah
[22:05:09] <FromDiscord> <Yardanico> you're trying to iterate over that iterator
[22:05:28] <FromDiscord> <Yardanico> closure iterators are different from normal ones, you need to use loops to iterate over them (or write a helper iterator that does that for you)
[22:05:37] <FromDiscord> <Yardanico> wait nvm, that works as well
[22:05:38] <FromDiscord> <dain> ?
[22:05:59] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GHu
[22:06:34] <FromDiscord> <dain> it breaks
[22:06:58] <FromDiscord> <Yardanico> huh
[22:07:08] <FromDiscord> <Yardanico> ahh right
[22:07:16] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GHw
[22:07:20] <FromDiscord> <Yardanico> @dain you need to import `sequtils` as well
[22:07:39] <FromDiscord> <Yardanico> it has an iterator to iterate over values in a closure iterator because they don't have `items` by default, as I said
[22:07:39] <FromDiscord> <Yardanico> https://nim-lang.org/docs/sequtils.html#items.i
[22:07:45] <FromDiscord> <dain> why? i deliberately didn't import sequtils so that its `map` doesn't interfere with mine
[22:07:49] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GHx
[22:07:56] <FromDiscord> <Yardanico> In reply to @Yardanico "https://nim-lang.org/docs/sequtils.html#items.i": because of this ^
[22:07:59] <FromDiscord> <dain> oh
[22:08:07] <FromDiscord> <Yardanico> In reply to @Yardanico "it has an iterator": meant to point to this, but ok
[22:08:08] <FromDiscord> <michaelb> is it possible to get forum.nim-lang.org to resend an email confirmation link?↵↵apparently, about 1 year ago I signed up but didn't click the confirmation link (because it landed in my Junk email folder, found it a few min ago); I tried doing a password reset just now, but after re-login, I'm still seeing my email is unconfirmed and therefore I can't create a past
[22:08:12] <FromDiscord> <michaelb> (edit) "past" => "post"
[22:08:20] <FromDiscord> <Yardanico> In reply to @brainproxy "is it possible to": i can confirm you manually, what's your nickname ?
[22:08:24] <FromDiscord> <michaelb> brainproxy
[22:08:33] <FromDiscord> <dain> okay yes now it works
[22:08:37] <FromDiscord> <Yardanico> In reply to @brainproxy "brainproxy": yeah, confirmed
[22:08:40] <FromDiscord> <michaelb> nice, thanks!
[22:09:04] <FromDiscord> <dain> also yes needing parentheses for the iterator is ugly looking
[22:10:25] <FromDiscord> <dain> okay now I stuck a `.to_seq` at the end and it broke again
[22:10:26] <FromDiscord> <dain> :(
[22:10:35] <FromDiscord> <dain> how do I get it as a sequence
[22:10:51] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GHy
[22:11:04] <FromDiscord> <Yardanico> you still need sequtils because toSeq needs it to iterate over the "thing" that you want to make into a seq
[22:11:13] <FromDiscord> <Yardanico> needs `items` specifically
[22:11:50] <FromDiscord> <dain> that's exactly what I have
[22:12:27] <FromDiscord> <Yardanico> ah you're right it doesn't work
[22:12:44] <FromDiscord> <Yardanico> it's not really meant to work with closure iterators it seems like, you can write a custom `toSeq` though
[22:12:44] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GHz
[22:12:53] <FromDiscord> <dain> why is this so hard :x
[22:13:18] <FromDiscord> <Yardanico> and generally composing iterators like that is a pain even currently, because iterable[T] only works in templates and closure iterators are different from inline iterators
[22:13:29] <FromDiscord> <Yardanico> and used less than inline iterators
[22:13:34] <NimEventer> New thread by Brainproxy: Will isValidSha1Hash in Nim 1.6's std/sha1 be backported to 1.2.x and 1.4.x?, see https://forum.nim-lang.org/t/8669
[22:13:36] <FromDiscord> <dain> i just want to be able to work with lazy iterations the same as I do in python
[22:13:39] <FromDiscord> <dain> composing them and stuff
[22:14:39] <FromDiscord> <Zoom> sent a code paste, see https://play.nim-lang.org/#ix=3GHA
[22:14:43] <FromDiscord> <DaiChimpo> I'm not too great at regex, if I wanted to split a string by the vowels, and include the vowels, wouldn't it be string.split(r"(A|E|I|O|U)")
[22:15:18] <FromDiscord> <dain> In reply to @Zoom "dain I use zero\_functional,": I did look at zero functional but it looks like you have to use its own special DSL if you want to define your own functions that work with it
[22:15:22] <FromDiscord> <dain> and it looks awkward
[22:15:34] <NimEventer> New thread by Nick14: Read next string from stdin, see https://forum.nim-lang.org/t/8670
[22:16:01] <FromDiscord> <Zoom> dain, do you really need to extend it? In it's basic form it's just one arrow and dot chaining
[22:16:27] <FromDiscord> <Zoom> I tried to extend it and got bitten though. Would appreciate if anyone with macro skills could look at↵https://play.nim-lang.org/#ix=3GHo
[22:16:42] <FromDiscord> <dain> well yes, it doesn't even have a `count()` function
[22:16:51] <FromDiscord> <dain> there's an example of `count()` in the docs but i couldn't make that work
[22:18:23] <FromDiscord> <Zoom> It works, or you can just `map(1).sum()`
[22:20:45] <FromDiscord> <Zoom> You can see in the paste above how the expansion works. You need to import macro, define/copy-paste `zfInline` block and call `static:  zfCreateExtension()`. That's all
[22:23:28] <FromDiscord> <Zoom> All macros look awkward, and if you want to implement iterator composition you currently need to use lots them, unfortunately.
[22:23:52] <FromDiscord> <dain> okay I remember the problem I had now, I couldn't make `zip` work how I wanted with zero functional
[22:24:28] <FromDiscord> <TryAngle> How would I compile nim to a real C file or is that not possible?
[22:24:43] <FromDiscord> <Yardanico> In reply to @TryAngle "How would I compile": wdym "real C file"?
[22:24:50] <FromDiscord> <Yardanico> Nim is always compiled to C files when you use the C backends
[22:24:53] <FromDiscord> <Yardanico> they're just stored in the cache folder
[22:24:58] <FromDiscord> <Yardanico> (edit) "backends" => "backend"
[22:25:02] <FromDiscord> <Zoom> It does compile to real C by default↵(@TryAngle)
[22:25:24] <FromDiscord> <TryAngle> When I use nim or nimble it always compiles directly to a binary
[22:25:32] <FromDiscord> <TryAngle> Where do I find this cache folder?
[22:25:47] <FromDiscord> <Yardanico> In reply to @TryAngle "Where do I find": If you're on nix, it's ~/.cache/nim
[22:25:50] <FromDiscord> <Yardanico> why do you need it though?
[22:26:02] <FromDiscord> <TryAngle> I'm just interested
[22:26:11] <FromDiscord> <Yardanico> you're not supposed to look at C files unless you want to check for optimizations
[22:26:21] <FromDiscord> <Yardanico> it's not exactly supposed to be human readable, so just be warned :)
[22:26:47] <FromDiscord> <Yardanico> if you really want to study C code compiled by Nim without all the noise like safety checks, compile the program you want manually with `nim c -d:danger --gc:orc`
[22:26:59] <FromDiscord> <Yardanico> orc is not the default nim GC, but it offers less "noise" in the C code
[22:28:03] <FromDiscord> <TryAngle> Hmm I'm using WSL so I hope that path is the same
[22:28:50] <FromDiscord> <Yardanico> that directory has dirs that are named like "file_r" or "file_d" where file is the name of the main program Nim file
[22:28:51] <FromDiscord> <TryAngle> In reply to @Yardanico "if you really want": Using none or arc depending in the context could make it even more readable?
[22:28:54] <FromDiscord> <Yardanico> r or d mean debug or release
[22:29:08] <FromDiscord> <Yardanico> In reply to @TryAngle "Using none or arc": yes, but some programs have cycles so comparing with orc is more fair :)
[22:29:11] <FromDiscord> <Yardanico> you can use arc as well, yes
[22:29:15] <FromDiscord> <Yardanico> don't use `none`
[22:30:05] <FromDiscord> <TryAngle> What is bad with none?↵I thought the nim GBA game is written with none?
[22:30:30] <FromDiscord> <Yardanico> that is the case because it was written before ARC became a viable option for general usage
[22:30:40] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GHG
[22:31:03] <FromDiscord> <Yardanico> In reply to @TryAngle "What is bad with": also goodboy galaxy doesn't use dynamically allocated memory at all
[22:31:05] <FromDiscord> <Yardanico> "Natu works with both --gc:none and --gc:arc, though arc didn't exist when I started working on Goodboy Galaxy, but I've had success with it for other small projects. Right now everything in the game is on the stack or statically allocated, which is nice for performance, so the choice of memory management strategy doesn't matter all that much for me. However, I'm envious of the benefits that destructors could bring if I'd written the en
[22:31:13] <FromDiscord> <Yardanico> https://forum.nim-lang.org/t/8375#54033
[22:31:58] <FromDiscord> <Zoom> @dain\: you forgot to import `macros`
[22:32:04] <FromDiscord> <TryAngle> In reply to @Yardanico "that is the case": Ah ok I see thanks
[22:32:10] <FromDiscord> <dain> In reply to @Zoom "<@225449938258100225>\: you forgot to": ty
[22:33:45] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GHK
[22:35:18] <FromDiscord> <TryAngle> Speaking of Arc and Orc, the sink, lent, destructors etc. are only available when using them and the acyiclic pragma only with orc, using other gc they're all "ignored" @Yardanico ?
[22:35:35] <FromDiscord> <Yardanico> In reply to @TryAngle "Speaking of Arc and": destructors work with refc - they're mapped to finalizers, but of course then they're not deterministic
[22:35:42] <FromDiscord> <Yardanico> sink will just always copy on refc
[22:35:47] <FromDiscord> <Yardanico> lent doesn't work on refc as far as I know
[22:35:52] <FromDiscord> <Yardanico> acyclic pragma is only for orc, yes
[22:37:08] <FromDiscord> <TryAngle> Does lent on refc error or is it just ignored?
[22:37:20] <FromDiscord> <Yardanico> don't know, I guess it's easy to try out :)
[22:38:45] <FromDiscord> <TryAngle> I guess so 👍
[22:57:33] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GHN
[22:58:07] <FromDiscord> <dain> why do I need to make a separate variable before passing it to `to_seq`? that's maddening
[22:58:30] <FromDiscord> <dain> i only discovered it by accident
[22:59:33] <FromDiscord> <dain> this has to be a bug right
[22:59:43] <FromDiscord> <Yardanico> it probably is
[23:02:56] <FromDiscord> <dain> right i'll make a github issue
[23:15:42] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[23:16:56] *** Joins: PMunch (~PMunch@user/pmunch)
[23:20:13] <FromDiscord> <Zoom> Zip is pretty fragile and expects sequences, as far as I understand. You don't need zip for the task though.↵(@dain)
[23:21:58] *** Quits: advesperacit (~advespera@185.236.42.95) (Quit: advesperacit)
[23:22:14] <FromDiscord> <--HA--> sent a code paste, see https://play.nim-lang.org/#ix=3GHU
[23:22:23] <FromDiscord> <Yardanico> In reply to @--HA-- "What do I do": use `_` instead of `i`
[23:22:27] <FromDiscord> <dain> In reply to @Zoom "Zip is pretty fragile": yeah but i want to use zip :(
[23:22:45] <FromDiscord> <--HA--> Is `_somevarname` also a thing?
[23:22:52] <FromDiscord> <Yardanico> no
[23:22:56] <FromDiscord> <Yardanico> `_` is a special variable name
[23:22:59] <FromDiscord> <--HA--> Ok, thanks.
[23:34:14] <PMunch> AoC stream live now! https://www.twitch.tv/pmunche
[23:36:46] <FromDiscord> <DaiChimpo> Checking if a seq is empty should be done using if len(seq) == 0, right?
[23:37:13] <FromDiscord> <Yardanico> one of the ways to do it, yes
[23:37:28] <FromDiscord> <Yardanico> you can do seq.len for a "nicer" oop-like syntax
[23:39:28] <FromDiscord> <DaiChimpo> ok I'm getting an "`len(a) == L` the length of the seq changed while iterating over it [AssertionDefect]", but not on the check, if I add an else
[23:39:38] <FromDiscord> <DaiChimpo> sent a code paste, see https://play.nim-lang.org/#ix=3GI3
[23:40:20] <FromDiscord> <metamuffin> 9B9CB7C264E36573B4E381BFDEB519E8E26C2E6D917226AB90EFE1E4740BAB7AA578AA310524
[23:40:31] <FromDiscord> <DaiChimpo> (edit) "https://play.nim-lang.org/#ix=3GI3" => "https://play.nim-lang.org/#ix=3GI4"
[23:41:00] <FromDiscord> <DaiChimpo> If I comment out the else, no errors
[23:42:13] <FromDiscord> <Yardanico> In reply to @DaiChimpo "ok I'm getting an": can you show more code?
[23:42:43] <FromDiscord> <DaiChimpo> sure I'll edit it
[23:43:59] <FromDiscord> <DaiChimpo> done
[23:48:58] <FromDiscord> <Yardanico> In reply to @DaiChimpo "done": do you maybe have another loop outside of this one which iterates over `seq` as well or something?
[23:49:05] <FromDiscord> <Yardanico> that error comes when you modify a seq while iterating (quite obviously)
[23:49:22] <FromDiscord> <Yardanico> so if removing your second else means that you have some outer loop that is iterating over that seq as well?
[23:49:34] <FromDiscord> <Yardanico> (edit) "so if removing your second else ... means" 03added "removes the issue, it"
[23:50:37] <FromDiscord> <DaiChimpo> A different seq finishes looping before this ifelse, otherwise this one is only instantiated at program start
[23:50:51] <FromDiscord> <DaiChimpo> this is a head scratcher
[23:51:08] <FromDiscord> <Yardanico> maybe you can try to minimize the code or share the whole code somewhere? if it's not closed of course
[23:51:09] <FromDiscord> <Yardanico> as a repo maybe
[23:53:36] <FromDiscord> <Yardanico> also @DaiChimpo you can avoid using `i` in the innermost loop by using `mitems` :)
[23:53:54] <FromDiscord> <Yardanico> ah wait nvm
[23:54:04] <FromDiscord> <Yardanico> @DaiChimpo you modify the seq right in the loop
[23:54:22] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GI9
[23:54:36] <FromDiscord> <DaiChimpo> ahh
[23:54:37] <FromDiscord> <Yardanico> either change the algorithm or copy the sequence and then add to your copy
[23:55:08] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GIa
[23:57:08] <FromDiscord> <DaiChimpo> hmm is there an optimal way to check for duplicates in a seq? something like if seq.contains(token): ?
[23:57:37] <FromDiscord> <DaiChimpo> if I can separate that out this loop's algorithm is elementary
[23:57:43] <FromDiscord> <Yardanico> ah lol
[23:57:53] <FromDiscord> <Yardanico> yeah, you can either just use contains or the nim `in` sugar over `contains`
[23:58:05] <FromDiscord> <Yardanico> `if value in seq`
[23:58:12] <FromDiscord> <Yardanico> or `if value notin seq` for the reverse
[23:58:39] <FromDiscord> <Yardanico> `in` and `notin` operators in nim just map to `contains` procedures, so you can write even write `contains` for your own types and still use `in`
[23:58:44] <FromDiscord> <DaiChimpo> these english keywords mess with me
[23:59:21] <FromDiscord> <DaiChimpo> earlier got stuck on Advent because I couldn't figure out how to write int mod 4 lol
