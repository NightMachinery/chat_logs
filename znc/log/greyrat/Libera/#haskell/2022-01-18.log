[00:00:06] *** Quits: niko (~niko@libera/staff/niko) (Ping timeout: 633 seconds)
[00:00:17] *** Quits: slack1256 (~slack1256@186.11.99.46) (Ping timeout: 256 seconds)
[00:00:18] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:01:33] *** Joins: slack1256 (~slack1256@186.11.99.46)
[00:02:32] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[00:02:43] *** Quits: slac45828 (~slack1256@191.125.227.201) (Ping timeout: 256 seconds)
[00:03:25] <sshine> can I write (\x -> f x && g x) in a point-free but short-circuiting way?
[00:04:17] <maerwald> why
[00:04:22] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[00:04:29] <sshine> because I'm curious :)
[00:04:31] <Yehoshua> Arrow's `&&&`
[00:04:31] <Yehoshua> Might be a starting point.
[00:05:23] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[00:05:29] <Yehoshua> (f &&& g) x
[00:05:29] <Yehoshua> Is the same as (in this case)
[00:05:29] <Yehoshua> (f x, g x)
[00:05:30] <monochrom> liftA2 (&&) f g expands to (\x -> f x && g x) using the (->)e Applicative instance.
[00:05:44] <awpr> :t getAll (All . even <> All . odd)
[00:05:45] <lambdabot> error:
[00:05:45] <lambdabot>     ‚Ä¢ Couldn't match expected type ‚ÄòAll‚Äô with actual type ‚Äòa0 -> All‚Äô
[00:05:45] <lambdabot>     ‚Ä¢ Probable cause: ‚Äò(<>)‚Äô is applied to too few arguments
[00:05:49] <awpr> :t getAll . (All . even <> All . odd)
[00:05:50] <lambdabot> Integral a => a -> Bool
[00:06:25] *** Joins: martinmch (~martinmch@127-0-0-1.dk)
[00:06:37] <Yehoshua> :t liftA2 (&&) 
[00:06:38] <lambdabot> Applicative f => f Bool -> f Bool -> f Bool
[00:06:40] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1)
[00:06:51] <roboguy22> > liftA2 (&&) even undefined 3
[00:06:52] <lambdabot>  False
[00:06:57] <roboguy22> > liftA2 (&&) even undefined 2
[00:06:59] <lambdabot>  *Exception: Prelude.undefined
[00:09:33] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:09:59] *** Quits: Shiranai (~Shiranai@190.237.13.17) (Quit: Connection closed)
[00:11:01] *** Joins: alx741 (~alx741@157.100.93.160)
[00:13:55] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:14:53] <lechner> that (inits . tails) thing for substrings is very elegant
[00:14:57] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net)
[00:17:59] *** Joins: ksqsf (~user@134.209.106.31)
[00:20:38] *** Joins: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com)
[00:22:21] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[00:22:32] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[00:22:58] <lechner> why isn't it     ... map inits (tails "abc")   ?
[00:23:16] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[00:25:03] <geekosaur> those do different things, don't they? tails only happens once with yours but on each element with the other
[00:25:36] <tomsmeding> lechner: but it is, right? (map inits . tails) "abc" = (\x -> map inits (tails x)) "abc" = map inits (tails "abc")
[00:25:43] <Yehoshua> > inits <$> (tails "abc")
[00:25:45] <lambdabot>  [["","a","ab","abc"],["","b","bc"],["","c"],[""]]
[00:26:24] <geekosaur> but that's (map inits . tails), not map (inits . tails)
[00:26:55] <tomsmeding> indeed, but the correct solution had 'map inits . tails' -- I assumed lechner meant that
[00:27:26] <geekosaur> in that case it's just being pointfree
[00:27:34] <geekosaur> some people prefer that, some the other
[00:27:44] <Yehoshua> > map (inits . tails) "abc"
[00:27:45] <lambdabot>  error:
[00:27:45] <lambdabot>      ‚Ä¢ Couldn't match type ‚ÄòChar‚Äô with ‚Äò[a]‚Äô
[00:27:45] <lambdabot>        Expected type: [[a]]
[00:27:57] <Yehoshua> lambdabot: Thought so.
[00:28:02] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Ping timeout: 240 seconds)
[00:28:13] <geekosaur> yeh, I wondered about that one briefly as well "wouldn't thst have to be a list of lists?"
[00:29:07] <tomsmeding> lechner: exercise, write my first version without (.)
[00:29:32] <Yehoshua> > map (map inits . tails) "abc"
[00:29:33] <lambdabot>  error:
[00:29:33] <lambdabot>      ‚Ä¢ Couldn't match type ‚ÄòChar‚Äô with ‚Äò[a]‚Äô
[00:29:33] <lambdabot>        Expected type: [[a]]
[00:29:59] <Yehoshua> (map inits . tails) "abc"
[00:30:08] *** Joins: alx741 (~alx741@157.100.93.160)
[00:30:09] <Yehoshua> > (map inits . tails) "abc"
[00:30:10] <lambdabot>  [["","a","ab","abc"],["","b","bc"],["","c"],[""]]
[00:30:41] <Yehoshua> Which is already exactly the previous thing.
[00:30:48] <Yehoshua> <Yehoshua> "> inits <$> (tails "abc")" <- .
[00:31:01] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[00:32:24] *** Joins: acidsys (~LSD@2.lsd.systems)
[00:32:55] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:34:14] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[00:34:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[00:34:28] *** Quits: _ht (~quassel@2a02:a468:b619:1:a06e:65c3:1bfa:20a6) (Remote host closed the connection)
[00:34:56] *** Joins: ksqsf (~user@134.209.106.31)
[00:35:38] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[00:35:56] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Read error: Connection reset by peer)
[00:36:13] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[00:36:35] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:36:50] *** Joins: trccc (~trccc@2-104-60-169-cable.dk.customer.tdc.net)
[00:38:24] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[00:38:57] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[00:39:42] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 250 seconds)
[00:40:15] <trccc> I would like to do some Haskell development whenever I have time, which is not too often unfortunately. Any ideas on where to find ‚Äúexercises‚Äù to do? I am between beginner and intermediate and I need to get a handle on making ‚Äúproduction‚Äù applications that considers details such as e.g. logging. The end goal is to introduce Haskell at my
[00:40:16] <trccc> workplace
[00:40:25] *** Quits: trccc (~trccc@2-104-60-169-cable.dk.customer.tdc.net) (Client Quit)
[00:41:02] <geekosaur> didn't stick around for an answer‚Ä¶
[00:42:30] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[00:43:08] *** Joins: trccc (~trccc@2-104-60-169-cable.dk.customer.tdc.net)
[00:43:22] <maerwald> "introduce Haskell at my workplace" <-- makes me shiver :p
[00:43:53] <trccc> In a bad or good way? üôÇ have a lot of non-critical services
[00:44:26] <sm> ha! the old you thought I left trick!
[00:44:35] <maerwald> It usually means people need a new toy at work. My opinion is that you shouldn't toy around at work.
[00:45:03] <geekosaur> they rejoined 3 minutes later. odd thing to do after asking a question
[00:45:06] <sm> trccc there's a lot of such things online now
[00:45:23] <trccc> Geekosaur yes sorry bout that
[00:45:50] <geekosaur> of course I sometimes do that because my router decided to fall over yet again
[00:45:58] <sm> and don't let the #haskell channel talk you out of it :)
[00:46:02] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Ping timeout: 240 seconds)
[00:46:05] <trccc> Hehe
[00:46:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:46:56] <trccc> am any in particular? The ones I tried before (couple of years ago) sort of ignored the packages out there that one needs to get something done
[00:47:04] <trccc> sm*
[00:48:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[00:48:05] *** Quits: kuribas (~user@ptr-25vy0i9haxfrs6rwale.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[00:48:15] <Yehoshua> I didn't actually do it myself, but found for someone else:
[00:48:15] <Yehoshua> https://exercism.org/tracks/haskell
[00:48:25] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:48:46] <Yehoshua> I have no idea if it gets out of the core language however
[00:49:09] <trccc> Yehoshua I Will check it out. Thanks. That is exactly my concern
[00:49:31] <sm> trccc, no none in particular, I would to a very wide skim of blogs and books
[00:49:38] <sm> @where books
[00:49:38] <lambdabot> https://www.extrema.is/articles/haskell-books, see also @where LYAH, RWH, YAHT, SOE, HR, PIH, TFwH, wikibook, PCPH, HPFFP, HTAC, TwT, FoP, PFAD, WYAH, non-haskell-books
[00:49:40] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 250 seconds)
[00:49:50] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1) (Remote host closed the connection)
[00:49:57] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:49:58] <sm> https://planet.haskell.org
[00:50:19] <Yehoshua> https://exercism.org/tracks/haskell/exercises/lens-person
[00:50:19] <Yehoshua> Seems to have at least lens (did a quick look)
[00:50:24] <sm> I'm partial to 
[00:50:25] <sm> @where HTAC
[00:50:25] <lambdabot> "Haskell Tutorial and Cookbook" by Mark Watson in 2017-09-04 at <https://leanpub.com/haskell-cookbook>
[00:50:26] <Yehoshua> Maybe others too
[00:50:37] *** Joins: alx741 (~alx741@157.100.93.160)
[00:50:39] <EvanR> marches in to your work area with two nasty looking goons, "we will be instituting er introducing haskell at your workplace"
[00:50:40] *** Joins: Pickchea (~private@user/pickchea)
[00:50:59] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[00:51:01] <trccc> Hehe
[00:52:11] *** Joins: xsperry (~xs@user/xsperry)
[00:52:20] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[00:52:37] *** Quits: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0) (Ping timeout: 240 seconds)
[00:52:38] <trccc> Thank you. Think I had enough ideas to get startes from.
[00:52:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:52:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:52:40] *** Joins: wroathe (~wroathe@user/wroathe)
[00:53:09] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[00:53:22] *** Joins: ksqsf (~user@134.209.106.31)
[00:53:32] *** Quits: trccc (~trccc@2-104-60-169-cable.dk.customer.tdc.net) (Quit: Client closed)
[00:55:02] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:57:40] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[00:57:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:57:46] *** Joins: alp (~alp@user/alp)
[00:58:06] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[00:58:20] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 250 seconds)
[00:58:37] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[00:58:55] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[01:00:07] *** Joins: zebrag (~chris@user/zebrag)
[01:01:22] *** Joins: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de)
[01:02:35] *** Quits: michalz (~michalz@185.246.204.107) (Remote host closed the connection)
[01:03:02] *** Quits: xsperry (~xs@user/xsperry) (Read error: Connection reset by peer)
[01:03:34] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (Client Quit)
[01:05:23] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[01:05:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:c6d6:7de6:6176:c300) (Ping timeout: 240 seconds)
[01:07:39] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Quit: leaving)
[01:08:31] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[01:08:41] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:09:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:10:10] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (Client Quit)
[01:10:33] *** Parts: briandaed (~root@185.234.208.208.r.toneticgroup.pl) ()
[01:10:51] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[01:11:46] *** Joins: alx741 (~alx741@157.100.93.160)
[01:12:15] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[01:14:10] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:14:11] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6155:4b1c:4cef:c11c) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[01:17:57] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::55f8) (Ping timeout: 240 seconds)
[01:18:15] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[01:19:20] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (Remote host closed the connection)
[01:21:38] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[01:21:47] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (Remote host closed the connection)
[01:22:04] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[01:23:04] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[01:23:33] *** Quits: phma (~phma@host-67-44-209-29.hnremote.net) (Read error: Connection reset by peer)
[01:24:00] *** Quits: zmt01 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[01:25:06] *** Quits: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com) (Remote host closed the connection)
[01:25:18] *** Joins: phma (phma@2001:5b0:211b:a618:dfa3:a13:fe81:dc84)
[01:30:43] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:708a:3729:1c6e:865e)
[01:30:54] *** Joins: alx741 (~alx741@157.100.93.160)
[01:31:30] *** Joins: Guest22 (~Guest22@217.150.236.197)
[01:32:43] *** Quits: martinmch (~martinmch@127-0-0-1.dk) (Quit: leaving)
[01:33:52] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:35:32] *** Quits: ubert (~Thunderbi@p200300ecdf0994547bbbb5c3c61d0cc2.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[01:35:32] *** ub is now known as ubert
[01:36:53] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:708a:3729:1c6e:865e) (Remote host closed the connection)
[01:37:04] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz‚Ä¶)
[01:37:29] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:37:42] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[01:37:45] *** Joins: zmt00 (~zmt00@user/zmt00)
[01:38:30] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[01:39:20] *** Joins: xsperry (~xs@user/xsperry)
[01:40:13] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[01:40:36] *** Quits: roboguy22 (~roboguy@2605:a601:ac65:3600:f1f8:6a51:ba00:46c) (Quit: Leaving...)
[01:40:41] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:ed98:da79:669a:f2be)
[01:45:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[01:47:05] *** Quits: ystael (~ystael@user/ystael) (Quit: Lost terminal)
[01:47:32] *** Joins: ksqsf (~user@134.209.106.31)
[01:52:02] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[01:52:30] *** Joins: alx741 (~alx741@157.100.93.160)
[01:53:16] *** Quits: pippijn (~pippijn@ra.xinutec.org) (Ping timeout: 245 seconds)
[01:54:14] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:55:21] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[01:55:33] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:56:24] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:56:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:00:43] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[02:02:44] *** Joins: ksqsf (~user@134.209.106.31)
[02:03:36] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:04:12] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Ping timeout: 250 seconds)
[02:05:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[02:06:09] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:06:11] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz‚Ä¶)
[02:06:33] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[02:07:32] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:07:57] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[02:08:19] *** Quits: benin (~benin@183.82.179.241) (Quit: The Lounge - https://thelounge.chat)
[02:10:18] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::55f8)
[02:12:33] *** Joins: alx741 (~alx741@157.100.93.160)
[02:13:14] *** Joins: SlowLearner (~SlowLearn@2804:14c:65a1:452d:faeb:2e8a:da33:265f)
[02:13:28] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[02:14:56] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:16:01] *** Joins: Everything (~Everythin@46-133-77-215.mobile.vf-ua.net)
[02:16:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:16:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:16:06] *** Joins: wroathe (~wroathe@user/wroathe)
[02:20:47] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:20:49] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 256 seconds)
[02:20:52] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Quit: Leaving)
[02:21:08] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[02:22:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:22:33] *** Quits: MironZ (~MironZ@nat-infra.ehlab.uk) (Read error: Connection reset by peer)
[02:22:49] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:22:59] *** Joins: MironZ (~MironZ@nat-infra.ehlab.uk)
[02:24:39] *** Quits: Guest22 (~Guest22@217.150.236.197) (Quit: Client closed)
[02:28:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:29:24] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[02:29:57] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 240 seconds)
[02:31:39] *** Joins: alx741 (~alx741@157.100.93.160)
[02:35:09] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:41:21] *** Joins: jkaye (~jkaye@2601:281:8300:7530:443b:68a:5f3e:dbe3)
[02:41:36] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6155:4b1c:4cef:c11c)
[02:41:40] *** Quits: chomwitt (~chomwitt@2a02:587:dc0b:200:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[02:45:26] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[02:45:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:48:34] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:49:43] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[02:50:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:50:12] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:52:40] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:53:16] *** Joins: alx741 (~alx741@157.100.93.160)
[02:53:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:443b:68a:5f3e:dbe3) (Ping timeout: 240 seconds)
[02:54:47] *** Quits: mmhat (~mmh@55d4d096.access.ecotel.net) (Quit: WeeChat 3.4)
[02:56:46] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:56:55] *** Joins: ksqsf (~user@134.209.106.31)
[02:58:40] *** Quits: burnsidesLlama (~burnsides@dhcp168-045.wadham.ox.ac.uk) (Remote host closed the connection)
[02:58:45] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:58:45] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:58:45] *** Joins: wroathe (~wroathe@user/wroathe)
[03:02:11] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[03:03:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[03:04:09] *** Joins: jgeerds (~jgeerds@55d4090e.access.ecotel.net)
[03:04:26] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[03:04:50] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[03:05:59] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[03:07:57] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[03:13:17] *** Joins: alx741 (~alx741@157.100.93.160)
[03:13:46] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[03:16:42] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:18:56] *** Joins: burnsidesLlama (~burnsides@dhcp168-045.wadham.ox.ac.uk)
[03:19:02] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[03:21:39] <Axman6> Is there a name in lens for the function which takes Traversal s t a b, (a -> m b) and s and gives back m t? I know it's just `traversal func s` but it feels weird using it's sort of hidden structure 
[03:22:13] <Axman6> @hoogle Traversal s t a b -> (a -> m b) -> s -> m t -- probably should've done this first
[03:22:13] <lambdabot> No results found
[03:22:17] <dibblego> id
[03:24:05] <Axman6> just wondering if it has a more... semantic? name
[03:24:39] <Axman6> looks like traverseOf
[03:24:52] <Axman6> traverseOf :: LensLike f s t a b -> (a -> f b) -> s -> f t
[03:24:53] <Axman6> traverseOf = id
[03:26:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:28:49] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[03:28:58] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[03:29:07] *** Quits: max22- (~maxime@2a01cb088335980081b93665fb35a9cb.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:32:04] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6155:4b1c:4cef:c11c) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[03:32:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[03:33:19] *** Joins: alx741 (~alx741@157.100.93.160)
[03:36:53] *** Joins: Shiranai (~Shiranai@190.237.13.17)
[03:37:11] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:37:55] <Axman6> it is also (%%~)
[03:39:07] <Shiranai> Hello, I want to compute the list of differences of a Int list, i.e. `difs [1,3,6] == [2,4]`. I can do this by pattern matching but I'm wondering if there is some way to do if by using folds or maps
[03:39:37] <c_wraith> Shiranai: it's typical to do it with a zip
[03:39:41] <monochrom> Does it mean difs [a,b,c,d] = [b-a, c-b, d-c]?
[03:39:53] <jackdk> monochrom: no d-c
[03:39:56] <Shiranai> monochrom yes
[03:40:03] <jackdk> Shiranai: what is `difs []`?
[03:40:19] <Shiranai> jackdk []
[03:40:38] <Shiranai> same with `difs [n]`
[03:41:02] <jackdk> Shiranai: you can write it as a map after zipping the list with its own tail, but you'll need to handle the empty list  separately
[03:41:17] *** Joins: merijn (~merijn@c-001-002-002.client.esciencecenter.eduvpn.nl)
[03:41:17] <monochrom> [b-a, c-b, d-c] = zipWith (-) [b,c,d] [a,b,c,d]
[03:41:19] <c_wraith> jackdk: nap, zip handles the empty list
[03:41:28] <Axman6> > zipWith f [a,b,c] [d,e,f]
[03:41:30] <c_wraith> Err.  *nah*.  
[03:41:30] <lambdabot>  error:
[03:41:30] <lambdabot>      ‚Ä¢ Ambiguous type variable ‚Äòc0‚Äô arising from a use of ‚Äòshow_M421258202089...
[03:41:30] <lambdabot>        prevents the constraint ‚Äò(Show c0)‚Äô from being solved.
[03:41:36] <Axman6> > zipWith f [a,b,c] [d,e,f] :: [Expr]
[03:41:37] <lambdabot>  [f a d,f b e,f c f]
[03:41:57] <jackdk> c_wraith: but `tail` doesn't
[03:42:10] <geekosaur> your f is ambiguous there
[03:42:17] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[03:42:18] <c_wraith> jackdk: but zip/zipWith does.  The order it examines its arguments in is defined.
[03:42:24] <Axman6> iif you're careful zipWith won't evaluate the tail []
[03:42:27] <c_wraith> > zipWith [] undefined
[03:42:28] <monochrom> Consider "drop 1"
[03:42:29] <lambdabot>  error:
[03:42:29] <lambdabot>      ‚Ä¢ Couldn't match expected type ‚Äòa1 -> b -> c‚Äô
[03:42:29] <lambdabot>                    with actual type ‚Äò[a0]‚Äô
[03:42:36] <c_wraith> > zipWith (+) [] undefined
[03:42:37] <lambdabot>  []
[03:42:45] <jackdk> wow, TIL. cool.
[03:42:46] <c_wraith> No special cases needed
[03:42:48] <Shiranai> yeah I think I need to cover the [] case with an if-statement and then dothe zip thing
[03:42:58] <Shiranai> ooo
[03:43:00] <Shiranai> nice
[03:43:03] <jackdk> until five seconds ago I would've agreed with you
[03:43:06] <Axman6> nope, no need to use if here at all
[03:43:22] <monochrom> c_wraith: May I entice you with a prank algebra exercise?  Expand and simplify (x-a)(x-b)(x-c)...(x-z).  >:)
[03:43:22] <Axman6> if is almost always a code smell in haskell too
[03:43:37] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzz‚Ä¶)
[03:43:47] <geekosaur> 0
[03:43:53] <Axman6> I set x = a, and get ... 0
[03:44:03] <Axman6> hmmm, I feel tricked
[03:44:08] <geekosaur> don;t even need that, x-x is in the middle of it
[03:44:15] *** Quits: Adran (~adran@botters/adran) (Quit: Este √© o fim.)
[03:44:24] <Axman6> yeah. I've been had!
[03:44:25] <monochrom> This is similar to the "f c f" there. >:)
[03:45:31] <Axman6> > product $ zipWith (-) (repeat x) [a,b,c,d,e,f,g] :: Expr
[03:45:33] <lambdabot>  1 * (x - a) * (x - b) * (x - c) * (x - d) * (x - e) * (x - f) * (x - g)
[03:45:57] <Axman6> > iterate simplify $ (product $ zipWith (-) (repeat x) [a,b,c,d,e,f,g] :: Expr)
[03:45:59] <lambdabot>  error:
[03:45:59] <lambdabot>      ‚Ä¢ Variable not in scope: simplify :: Expr -> Expr
[03:45:59] <lambdabot>      ‚Ä¢ Perhaps you meant ‚Äòsimply‚Äô (imported from Control.Lens)
[03:46:13] <Axman6> of course lens has something called simply
[03:46:21] <geekosaur> ^5
[03:46:29] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[03:46:34] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:ed98:da79:669a:f2be) (Remote host closed the connection)
[03:47:06] <jackdk> Axman6: and in keeping with today's theme, it is yet another `id`
[03:47:08] <Axman6> simply :: forall p f s a rep (r :: TYPE rep). (Optic' p f s a -> r) -> Optic' p f s a -> r -- | This is an adverb that can be used to modify many other Lens combinators to make them require simple lenses, simple traversals, simple prisms or simple isos as input.
[03:47:28] * Axman6 glares at edwardk
[03:47:44] <jackdk> the real prank is that everything in lens is actually `id` (/s)
[03:49:11] <Axman6> :t id id id id id id id id
[03:49:13] <lambdabot> a -> a
[03:50:28] * edwardk feels his neck burning and looks up.
[03:50:34] <Axman6> from :: AnIso s t a b -> Iso b a t s <- this is what got us into this whole COVID mess in the first place!
[03:50:49] <jackdk> "how many `id`s have we got in this lib, anyhow?" (with apologies to Mel Brooks and Col. Sandurz)
[03:51:00] *** Joins: ksqsf (~user@134.209.106.31)
[03:51:05] <edwardk> Axman6: it just 'id', so 'simply' seems well named
[03:51:38] <Axman6> I just feel like I've been pranked half the time I look at lens' definitions and it's always id
[03:51:45] <edwardk> =)
[03:51:58] *** Joins: Adran (~adran@botters/adran)
[03:52:10] <edwardk> if you ignore the newtypes even more of its definitions are just id in disguise
[03:52:50] <Axman6> "It turns out all we actually needed from SKI was I"
[03:54:55] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (Quit: My Ex-Girlfriend once told me: I'm not a slut, I'm just popular)
[03:54:56] *** Joins: alx741 (~alx741@157.100.93.160)
[03:55:01] <awpr> so I just accidentally wrote a maybe-kinda-useful extensible records library while trying to write a joke extensible records library: https://replit.com/@AndrewPritchard/ImplicitParamRecords2#Main.hs
[03:55:31] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[03:55:32] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[03:55:46] <geekosaur> now I'm wondering if that's how lens started out :√æ
[03:56:47] <awpr> the central idea: if I horribly abuse ImplicitParams to represent the fields, then GHC's constraint solver will do all the "hard" work of plumbing fields around for me
[03:57:39] <awpr> why you should use it over _any other inferior extensible records library_: it ~~accidentally~~totally on purpose has something equivalent to RecordWildCards.
[03:57:41] <boxscape_> vulkan let's me create a SurfaceKHR which is a newtype over Word64, but for GLFW-b, I need a Ptr instead. What's the proper way to convert a Word64 into a Ptr? (I'm assuming the Word64 is simply the memory address)
[03:58:19] <Axman6> what's IP stand for?
[03:58:21] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:58:43] <awpr> that's the internal class under the hood for ImplicitParams: `?aoeu :: Int` is actually `IP "aoeu" Int`
[03:58:43] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:59:45] <boxscape_> ...alternatively, is there a way to create a fresh Ptr for an arbitrary type?
[04:00:52] *** Quits: Shiranai (~Shiranai@190.237.13.17) (Quit: Connection closed)
[04:01:23] *** Joins: zmt01 (~zmt00@user/zmt00)
[04:01:31] <boxscape_> (without allocating any memory for it)
[04:01:41] <EvanR> boxscape_, Word64... really...
[04:02:01] <jackdk> convert to Word, and use WordPtr newtype, then wordPtrToPtr?
[04:02:03] <EvanR> well, it might be coercable
[04:02:10] <boxscape_> I can try that
[04:02:13] <boxscape_> thanks
[04:02:14] <jackdk> haven't done ffi for a while, ymmv
[04:02:34] *** Joins: ksqsf (~user@134.209.106.31)
[04:02:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[04:02:50] *** Joins: aplainze1akind (~johndoe@captainludd.powered.by.lunarbnc.net)
[04:02:54] <Axman6> awpr: I hate this, it just feels like data soup, there's no structure D: but it works, and I'm curious how well it works and performs
[04:03:11] <jackdk> docs for distributive say: Categorically every Distributive functor is actually a right adjoint, and so it must be Representable endofunctor and preserve all limits. This is a fancy way of saying it isomorphic to (->) x for some x. this means Distributive and Representable are equivalent concepts on Hask?
[04:03:32] *** Quits: xff0x (~xff0x@2001:1a81:53cb:cc00:be2f:4794:e7a4:33cb) (Ping timeout: 240 seconds)
[04:03:40] <awpr> I have no idea other than that it seems to work for the examples at the bottom of the file.  I don't have any plans to use it for anything beyond entertainment though
[04:03:44] <jackdk> I assume this is not the case on Hask^Hask -> Hask (I've been thinking about rank2 representable as a way to index record fields with a GADT)
[04:03:48] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[04:04:28] <awpr> jackdk, that's https://hackage.haskell.org/package/ten-0.1.0.2/docs/Data-Ten-Representable.html#t:Representable10 FWIW
[04:04:49] *** Joins: xff0x (~xff0x@2001:1a81:53cb:cc00:10bf:48ef:429:dca8)
[04:04:55] *** Quits: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[04:04:59] <Axman6> maybe ImplicitParams died too early (even if they do live on in the stack traces' implementation)
[04:05:03] *** Quits: Jon (jon@dow.land) (Quit: ZNC - http://znc.in)
[04:05:04] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (Quit: The BNC has broken!)
[04:05:24] <jackdk> awpr: another one! I was only aware of rank2classes, conkin, and barbies.
[04:05:32] *** Quits: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[04:05:32] *** Quits: amir (sid22336@user/amir) (Ping timeout: 268 seconds)
[04:05:33] <awpr> I think future versions of https://hackage.haskell.org/package/hkd-0.1/docs/Data-HKD.html are slated to have something equivalent too?
[04:05:39] <jackdk> thanks for the link. a shame none seem to be canonical
[04:06:10] *** Quits: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: Nate[m]1 (~m52957mat@2001:470:69fc:105::1:591a) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: kadoban (~kadoban@user/kadoban) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: benjamin[m]1234 (~benjaminm@2001:470:69fc:105::1:3f2f) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: IgnatInsarov[m] (~kindaroma@2001:470:69fc:105::f5d9) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Ping timeout: 268 seconds)
[04:06:12] *** Quits: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34) (Ping timeout: 268 seconds)
[04:06:12] *** Quits: hexagoxel (~hexagoxel@2a01:4f8:c0c:e::2) (Ping timeout: 268 seconds)
[04:06:17] *** Quits: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es) (Ping timeout: 240 seconds)
[04:06:32] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[04:06:41] <awpr> huh, I didn't find rank2classes when I surveyed the ecosystem... amusingly its description is extremely similar to mine
[04:06:46] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Ping timeout: 268 seconds)
[04:06:46] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Ping timeout: 268 seconds)
[04:06:46] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 268 seconds)
[04:06:46] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Ping timeout: 268 seconds)
[04:06:46] *** Quits: siraben (~siraben@user/siraben) (Ping timeout: 268 seconds)
[04:06:47] *** Quits: parseval (sid239098@id-239098.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[04:06:47] *** Quits: oxytocat (~alloca@user/suppi) (Ping timeout: 268 seconds)
[04:06:47] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Ping timeout: 268 seconds)
[04:06:47] *** Quits: thonkpod (~thonkpod@user/thonkpod) (Ping timeout: 268 seconds)
[04:06:55] *** Joins: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com)
[04:07:02] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[04:07:15] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[04:07:15] *** Quits: robertm (robertm@lattice.rojoma.com) (Ping timeout: 250 seconds)
[04:07:37] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:07:51] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[04:07:57] *** Joins: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com)
[04:08:02] *** Joins: parseval (sid239098@id-239098.helmsley.irccloud.com)
[04:08:03] *** Joins: amir (sid22336@user/amir)
[04:08:04] *** Joins: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es)
[04:08:05] <awpr> I'd love for `ten` to become canonical (afaik it's as complete as any other one), but it looks like `hkd` will win by virtue of `lens` depending on it in the moderate future
[04:08:08] *** Joins: cyphase (~cyphase@user/cyphase)
[04:08:08] *** Joins: oxytocat (~alloca@user/suppi)
[04:08:25] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[04:08:25] *** Joins: Jon (jon@dow.land)
[04:08:31] <jackdk> at least hkd doesn't have that awful Identity-erasing type familyy
[04:08:53] <jackdk> why does `lens` need to depend on `hkd`?
[04:08:54] *** Joins: hexagoxel (~hexagoxel@hexagoxel.de)
[04:08:56] *** Joins: robertm (robertm@lattice.rojoma.com)
[04:09:01] <awpr> yeah, people seem to love that thing for reasons I can't understand
[04:09:01] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[04:09:03] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[04:09:03] *** Joins: zaquest (~notzaques@5.130.79.72)
[04:09:28] <awpr> (re: `hkd` becoming canonical) in which case I'll probably just try to get the novel stuff from `ten` absorbed into `hkd`
[04:09:28] <jackdk> because they don't reach a point where the inconsistency it introduces becomes painful
[04:10:34] <boxscape_> actually I lied, I do need to allocate the memory, so maybe I should just use Foreign.Marshal.Alloc.malloc. Only problem is I'm not sure there's a way to programmatically find out how much memory I need for SurfaceKHR, but I guess I'll just have to rely on them never changing the size
[04:10:53] <awpr> IIUC the reason for growing the dependency is that `distributive` can be expressed in a much more performant way by being built on top of HKD ideas, with the core method being `Functor10 f => f g -> g (f Identity)`
[04:10:55] <boxscape_> s/malloc/mallocBytes
[04:11:06] <jackdk> awpr: you don't seem to have contravariant, and nobody seems to have divisible and decidable , but I don't know if those are useful for at rank2
[04:11:29] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[04:11:38] <awpr> yeah, true, I typed it in but left it commented out because I didn't have a use for it at the time
[04:12:07] <awpr> also don't know if Divisible10 and Decidable10 would be useful
[04:13:48] <boxscape_> ah, never mind, I suppose I can use malloc because it's Storable, solving that issue
[04:14:42] <jackdk> awpr: I like that you have variants of sequenceA etc that are ergonomic when you have Identity kicking around
[04:14:57] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:14:57] *** Joins: alx741 (~alx741@157.100.93.160)
[04:15:32] <monochrom> identity strikes again, this time at the type level too :)
[04:15:32] <awpr> yeah, tbh I just wasn't sure which form was more useful, so I threw both in there.  the names get a bit dense though
[04:15:49] *** Joins: Nate[m]1 (~m52957mat@2001:470:69fc:105::1:591a)
[04:15:51] *** Quits: merijn (~merijn@c-001-002-002.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[04:16:09] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[04:16:12] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[04:16:18] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[04:16:27] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[04:17:15] <awpr> the main thing in `ten` that I'm not aware of any other library doing well is dealing with constraints that are common to every field type: `fmap10C @Show (Const . show)` says if you have a record where every field has a Show instance, then you can just go and 'show' each field with relatively little fanfare
[04:18:00] <jackdk> https://hackage.haskell.org/package/constraints-extras gives you that, and gets used a bit in the DMapverse
[04:18:39] *** Joins: kadoban (~kadoban@user/kadoban)
[04:18:56] <awpr> ah yeah, looks like a very similar implementation
[04:19:21] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:20:16] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[04:20:30] <awpr> along the same lines, https://hackage.haskell.org/package/ten-unordered-containers is similar functionality to DMap except with a valid license
[04:20:30] <jackdk> but if hkd is going to be everywhere because it's depended on by the 500lb gorilla of teh haskell depgraph, then the best thing to do may be to pump your best ideas into that?
[04:20:56] <awpr> yeah, that's probably the direction it'll end up going
[04:22:24] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[04:22:29] <jackdk> interesting to see these libraries coming out with Google copyrights and recent dates. Have they started adopting more Haskell?
[04:22:38] *** Joins: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164)
[04:22:38] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[04:22:40] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[04:22:42] <awpr> well I've started open-sourcing more Haskell
[04:22:42] *** Joins: IgnatInsarov[m] (~kindaroma@2001:470:69fc:105::f5d9)
[04:22:43] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[04:22:53] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:22:53] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:22:53] *** Joins: wroathe (~wroathe@user/wroathe)
[04:23:42] *** Joins: benjamin[m]1234 (~benjaminm@2001:470:69fc:105::1:3f2f)
[04:24:16] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[04:24:43] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[04:24:43] *** Joins: siraben (~siraben@user/siraben)
[04:25:21] <jackdk> noice
[04:25:23] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[04:28:06] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Changing host)
[04:28:06] *** Joins: zfnmxt (~zfnmxtzfn@user/zfnmxt)
[04:29:32] *** Quits: jgeerds (~jgeerds@55d4090e.access.ecotel.net) (Ping timeout: 240 seconds)
[04:31:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:31:47] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:34:02] *** Joins: ksqsf (~user@134.209.106.31)
[04:35:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[04:37:17] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[04:37:29] *** Joins: alx741 (~alx741@157.100.93.160)
[04:38:32] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[04:39:05] *** Joins: Shiranai (~Shiranai@190.237.13.17)
[04:39:28] <Shiranai> Why can't I eta reduce `f x = (*3) $ div 2 x` to `f = (*3) $ div 2`?
[04:39:44] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:40:08] <Axman6> )@src ($)
[04:40:11] <Axman6> @src ($)
[04:40:11] <lambdabot> f $ x = f x
[04:40:31] <Axman6> div 2 is the argument x
[04:40:55] <Axman6> so what you've written is ((*3) (div 2))
[04:41:16] *** Joins: pavonia (~user@user/siracusa)
[04:41:24] <Axman6> which is ((\n ->n*3) (\p -> div 2 p))
[04:41:28] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:50] <Axman6> you _can_ write (*3) . div 2
[04:41:55] <Axman6> @src (.)
[04:41:55] <lambdabot> (f . g) x = f (g x)
[04:42:02] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:42:53] <Shiranai> ohh got it, thanks!
[04:44:38] <Axman6> it's worth going through this exercise, translating both expressions and see what you get back - what does ((\n ->n*3) (\p -> div 2 p)) become?
[04:45:33] *** Quits: wroathe (~wroathe@user/wroathe) (Read error: Connection reset by peer)
[04:46:02] *** Quits: Rembane (~Rembane@li346-36.members.linode.com) (Ping timeout: 265 seconds)
[04:46:10] *** Joins: Rembane (~Rembane@li346-36.members.linode.com)
[04:46:59] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (Quit: Gone.)
[04:47:01] *** Quits: justJustache (~justache@user/justache) (Remote host closed the connection)
[04:47:28] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:47:35] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:00] *** Joins: justJustache (~justache@user/justache)
[04:48:05] *** Quits: bens (~bens@www.typius.com) (Ping timeout: 268 seconds)
[04:48:17] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[04:48:28] *** Joins: bens (~bens@www.typius.com)
[04:50:46] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:50:46] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:50:46] *** Joins: wroathe (~wroathe@user/wroathe)
[04:54:08] *** Joins: ksqsf (~user@134.209.106.31)
[04:54:32] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[04:54:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:55:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:56:36] *** Joins: alx741 (~alx741@157.100.93.160)
[05:01:08] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:02:20] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 256 seconds)
[05:14:26] *** cross_ is now known as cross
[05:16:02] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[05:17:46] *** Joins: alx741 (~alx741@157.100.93.160)
[05:18:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:19:17] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:20:24] *** Joins: xsperry (~xs@user/xsperry)
[05:21:47] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:25:59] *** Quits: Shiranai (~Shiranai@190.237.13.17) (Quit: Connection closed)
[05:28:37] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::55f8) (Ping timeout: 240 seconds)
[05:28:44] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[05:28:57] *** Quits: SlowLearner (~SlowLearn@2804:14c:65a1:452d:faeb:2e8a:da33:265f) (Ping timeout: 256 seconds)
[05:31:50] *** Joins: Erutuon (~Erutuon@user/erutuon)
[05:32:08] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Quit: Lost terminal)
[05:34:15] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[05:35:49] *** Joins: califax- (~califax@user/califx)
[05:38:45] *** Quits: slack1256 (~slack1256@186.11.99.46) (Ping timeout: 256 seconds)
[05:38:55] *** Joins: alx741 (~alx741@157.100.93.160)
[05:40:18] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:40:19] *** califax- is now known as califax
[05:40:44] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[05:41:27] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:42:19] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[05:46:32] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 240 seconds)
[05:48:40] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[05:50:32] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[05:52:08] *** Quits: xff0x (~xff0x@2001:1a81:53cb:cc00:10bf:48ef:429:dca8) (Ping timeout: 250 seconds)
[05:54:02] *** Joins: xff0x (~xff0x@2001:1a81:5209:df00:e795:8bea:73be:6c45)
[05:54:17] *** Joins: neurocyte0917090 (~neurocyte@IP-185189141194.dynamic.medianet-world.de)
[05:54:17] *** Quits: neurocyte0917090 (~neurocyte@IP-185189141194.dynamic.medianet-world.de) (Changing host)
[05:54:17] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[05:56:01] <alexfmpe[m]> @free x :: Int
[05:56:01] <lambdabot> x = x
[05:56:02] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[05:56:02] *** neurocyte0917090 is now known as neurocyte091709
[05:58:02] *** Joins: alx741 (~alx741@157.100.93.160)
[05:58:23] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[06:01:06] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[06:01:21] <Axman6> awpr: I feel at least a blog post is deserved from that record thing
[06:01:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:02:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:08:19] *** Joins: ksqsf (~user@134.209.106.31)
[06:11:44] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[06:13:32] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[06:25:04] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[06:27:40] <Axman6> Anyone know if anyone has written a linker in Haskell?
[06:31:12] *** Joins: nunggu (~q@user/nunggu)
[06:32:59] *** Quits: tomku (~tomku@user/tomku) (Read error: Connection reset by peer)
[06:33:48] <jackdk> what are you thinking of Axman6 
[06:35:26] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:ed98:da79:669a:f2be)
[06:36:15] <Axman6> I was reading https://maskray.me/blog/2021-12-19-why-isnt-ld.lld-faster and thinking "Surely linking is just tying the knot"
[06:37:34] *** Joins: tomku (~tomku@user/tomku)
[06:38:02] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[06:40:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:40:25] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:40:25] *** finn_elija is now known as FinnElija
[06:41:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:45:04] *** Quits: Everything (~Everythin@46-133-77-215.mobile.vf-ua.net) (Quit: leaving)
[06:46:11] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[06:49:44] *** Joins: ksqsf (~user@134.209.106.31)
[06:51:25] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:54:41] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[06:57:32] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[06:59:36] *** Joins: raym (~raym@user/raym)
[07:05:51] *** Quits: td_ (~td@94.134.91.126) (Ping timeout: 256 seconds)
[07:07:12] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:ed98:da79:669a:f2be) (Remote host closed the connection)
[07:07:30] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:c076:ae6d:3ec6:202c)
[07:07:32] *** Joins: td_ (~td@muedsl-82-207-238-179.citykom.de)
[07:11:00] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 250 seconds)
[07:16:35] <lagash> "First comes love..."
[07:21:42] *** Joins: mbuf (~Shakthi@136.185.86.67)
[07:22:44] *** Quits: mbuf (~Shakthi@136.185.86.67) (Remote host closed the connection)
[07:24:48] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:a9:59ba:3231:6160)
[07:26:36] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:c076:ae6d:3ec6:202c) (Ping timeout: 250 seconds)
[07:27:56] *** Joins: mbuf (~Shakthi@136.185.86.67)
[07:35:02] *** Joins: ksqsf (~user@134.209.106.31)
[07:36:01] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[07:36:46] *** Joins: vysn (~vysn@user/vysn)
[07:39:32] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[07:42:27] *** Quits: burnsidesLlama (~burnsides@dhcp168-045.wadham.ox.ac.uk) (Remote host closed the connection)
[07:43:03] <Axman6> Then comes code...
[07:46:48] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[07:51:51] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[08:01:49] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[08:06:28] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 250 seconds)
[08:07:12] *** Joins: jinsun__ (~quassel@user/jinsun)
[08:08:33] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[08:09:09] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[08:11:01] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 256 seconds)
[08:11:48] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:13:45] <Axman6> awpr: ... why ten/10?
[08:14:31] <Axman6> ah, not in the README but is in Data.Ten - reading
[08:17:37] *** Quits: emf (~emf@2620:10d:c090:400::5:2d26) (Ping timeout: 240 seconds)
[08:20:20] *** Joins: emf (~emf@2620:10d:c090:400::5:2d26)
[08:23:58] *** Joins: ksqsf (~user@134.209.106.31)
[08:28:32] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[08:29:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[08:31:15] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:31:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Client Quit)
[08:31:56] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:36:05] *** Joins: slack1256 (~slack1256@186.11.99.46)
[08:38:43] *** Joins: jenna8912 (~jenna@c-107-5-104-51.hsd1.mi.comcast.net)
[08:41:50] *** Joins: ksqsf (~user@134.209.106.31)
[08:42:29] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 252 seconds)
[08:42:30] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[08:46:11] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[08:46:46] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 250 seconds)
[08:51:26] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[08:51:48] *** Quits: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de) (Quit: Connection closed)
[08:53:27] <awpr> hmm, the GitHub repo README is more thorough, but not shown on Hackage.  I should find a way to get that included (I think it's just extra-source-files, but this README is in the directory above the package, so it might take an extra symlink or copy or something)
[08:53:30] <awpr> https://github.com/google/hs-ten/issues/6
[08:53:35] *** Joins: ksqsf (~user@134.209.106.31)
[09:00:55] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[09:06:28] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[09:08:26] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 250 seconds)
[09:13:36] *** Quits: bens (~bens@www.typius.com) (Quit: leaving)
[09:14:18] <Axman6> Great, thanks :)
[09:14:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:14:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:14:59] *** Joins: wroathe (~wroathe@user/wroathe)
[09:14:59] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[09:15:19] *** Joins: gentauro (~gentauro@user/gentauro)
[09:16:57] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[09:18:02] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[09:19:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:19:42] *** Joins: arjun_ (~arjun@user/arjun)
[09:20:18] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::55f8)
[09:20:42] <arjun_> hi
[09:20:59] <arjun_> what's the least painful way to bound a type range?
[09:21:21] <arjun_> if i want a type that only is Float 0.0 to 1.0 and would error on range outside it
[09:27:42] *** Joins: ksqsf (~user@134.209.106.31)
[09:29:15] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:29:50] <c_wraith> if Float/Double weren't pariahs at the type level, I'd say the refined package.  But they are, so...  not that.
[09:30:19] <arjun_> what's even a pariah? : P
[09:31:13] <jackdk> c_wraith is saying that you can't have typelevel Float/Double like you can Int
[09:31:44] <c_wraith> pariah - someone/something that must be avoided.
[09:31:45] <jackdk> I would probably write `data Clamped a = Clamped { cMin :: a, cMax :: a, cVal :: a }`
[09:31:49] <arjun_> i want to ask why but im scared lol
[09:31:55] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Quit: Lost terminal)
[09:32:02] <c_wraith> I honestly have no idea.
[09:32:21] <c_wraith> I don't know why GHC didn't promote all the primitive types when it promoted String and Integer
[09:32:59] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[09:33:12] <arjun_> i'd rather have them checked compile time rather than blowing at runtime or being have to carry around a smart constructor
[09:33:32] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[09:33:38] <arjun_> things like Type 0.3 + Type 0.4 should be allowed since they result in Type 0.7
[09:34:00] <arjun_> but Type 1.0 + Type 0.4 should be not since > 1.0
[09:34:02] <c_wraith> that seems...  difficult...  to do at compile time
[09:34:24] <c_wraith> ie, it only would work with completely static paths
[09:34:31] <c_wraith> um..  code paths
[09:34:46] <c_wraith> Any time something might behave differently based on input, it would fail
[09:37:04] <arjun_> refine seems alright
[09:40:05] <arjun_> refined*
[09:42:55] <Axman6> data Probability = Probability Word64 -- represents 1/n
[09:42:58] <Axman6> >_>
[09:43:18] <Axman6> hmm, I guess that makes 0.75 very difficult to represent
[09:45:37] <awpr> if that's meant to be a way of mapping things onto [0,1) by definition: `newtype Unity = Unity Double -- represents 0.5 + 0.5*log(p/(1-p))` is one traditional way to do it.
[09:47:05] <Axman6> > map (\p -> 0.5 + 0.5*log(p/(1-p))) [0,1,10,-1,-10] 
[09:47:07] <lambdabot>  [-Infinity,Infinity,NaN,NaN,NaN]
[09:47:31] <Axman6> > map (\p -> 0.5 + 0.5*log(p/(1-p))) [0.1,0.5,0.9] 
[09:47:32] <lambdabot>  [-0.5986122886681096,0.5,1.5986122886681098]
[09:47:35] <arjun_> it's not to map
[09:47:47] <awpr> I got the specifics very wrong, but it's meant to turn "approaches infinity" into "approaches 1" and "approaches -infinity" into "approaches 0"
[09:48:49] <Axman6> Interesting - would love to learn more
[09:49:07] <awpr> > map (\a -> exp a / (1 + exp a)) [-1000, -100, -10, -1, 0, 1, 10, 100, 1000)
[09:49:09] <lambdabot>  <hint>:1:75: error: parse error on input ‚Äò)‚Äô
[09:49:17] <awpr> > map (\a -> exp a / (1 + exp a)) [-1000, -100, -10, -1, 0, 1, 10, 100, 1000]
[09:49:18] <lambdabot>  [0.0,3.720075976020836e-44,4.5397868702434395e-5,0.2689414213699951,0.5,0.73...
[09:49:55] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[09:51:36] <awpr> > map (\a ->  realToFrac (exp a / (1 + exp a)) :: Fixed Milli) [-1000 :: Double, -100, -10, -1, 0, 1, 10, 100, 1000]
[09:51:38] <lambdabot>  error:
[09:51:38] <lambdabot>      Ambiguous occurrence ‚ÄòFixed‚Äô
[09:51:38] <lambdabot>      It could refer to
[09:51:53] <EvanR> Axman6, egyptian fractions to the rescue or something
[09:52:24] *** Joins: ksqsf (~user@134.209.106.31)
[09:52:47] <EvanR> arjun_, if possible, make a new type for 0 to 1 and only have api functions that make sense for those, i.e. times but not plus
[09:53:25] <Axman6> yeah you can't make a sensible Num instance for that
[09:54:02] <arjun_> EvanR, how do i newtype a range?
[09:55:11] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 268 seconds)
[09:55:57] <Axman6> @hoogle log1p
[09:55:58] <lambdabot> Numeric log1p :: Floating a => a -> a
[09:55:58] <lambdabot> GHC.Float log1p :: Floating a => a -> a
[09:55:58] <lambdabot> Protolude log1p :: Floating a => a -> a
[09:59:03] <EvanR> arjun_, a new type wrapper allows you to control how values are constructed, gating them behind a check, in this case that they are in range
[09:59:17] <EvanR> aol keyword "smart constructor"
[09:59:42] <EvanR> that's a runtime techinque though
[09:59:55] <EvanR> but it's not painful
[10:01:17] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:08:08] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[10:09:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:10:14] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[10:14:05] <arjun_> > a new type wrapper allows you to control how values are constructed, gating them behind a check
[10:14:07] <lambdabot>  <hint>:1:7: error: parse error on input ‚Äòtype‚Äô
[10:14:10] <arjun_> i didn't know that
[10:14:22] <arjun_> do you have an example the top of your head EvanR ?
[10:16:28] *** Quits: xff0x (~xff0x@2001:1a81:5209:df00:e795:8bea:73be:6c45) (Ping timeout: 250 seconds)
[10:16:32] *** Joins: michalz (~michalz@185.246.204.101)
[10:16:51] <arjun_> nvm, i think i found it : p
[10:16:53] <arjun_> https://www.haskell.org/tutorial/moretypes.html
[10:17:15] *** Joins: xff0x (~xff0x@2001:1a81:5209:df00:1935:85e:8166:55b)
[10:20:27] *** Joins: alp (~alp@user/alp)
[10:23:47] *** Quits: vglfr (~vglfr@46.96.179.132) (Ping timeout: 256 seconds)
[10:24:21] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[10:25:43] *** Joins: fef (~thedawn@user/thedawn)
[10:25:44] *** Joins: _ht (~quassel@2a02:a468:b619:1:c1f2:a735:3541:23f8)
[10:25:46] *** Joins: hololeap (~hololeap@user/hololeap)
[10:36:43] *** Joins: fcc977 (~kaph@151.19.243.144)
[10:37:48] *** Joins: slac19759 (~slack1256@191.125.99.76)
[10:39:35] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 268 seconds)
[10:40:12] *** Quits: slack1256 (~slack1256@186.11.99.46) (Ping timeout: 268 seconds)
[10:40:53] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[10:41:32] *** Joins: max22- (~maxime@2a01cb0883359800958d49fa3415ab33.ipv6.abo.wanadoo.fr)
[10:45:03] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[10:45:30] *** Quits: fcc977 (~kaph@151.19.243.144) (Remote host closed the connection)
[10:45:50] *** Joins: fcc977 (~kaph@151.19.243.144)
[10:47:35] *** Joins: MajorBiscuit (~MajorBisc@c-001-025-054.client.tudelft.eduvpn.nl)
[10:48:18] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[10:49:50] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[10:52:33] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:6136:2d74:4238:7594)
[10:53:06] <arjun_> anyway i can borrow or point to the fromInteger method of Double's Num ? :P
[10:53:20] <arjun_> and _just_ the fromInteger method
[10:56:02] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[10:57:03] *** Quits: foul_owl (~kerry@94.140.8.107) (Ping timeout: 256 seconds)
[11:02:02] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 240 seconds)
[11:02:12] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:04:00] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[11:07:02] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[11:07:40] *** Joins: newsham (~newsham@2603-800c-2d00-e994-c564-1d76-1f18-c3ec.res6.spectrum.com)
[11:07:47] <newsham> ?bot
[11:07:47] <lambdabot> :)
[11:07:53] <newsham> > fix id
[11:07:55] <lambdabot>  *Exception: <<loop>>
[11:08:00] <newsham> hi
[11:10:01] *** Joins: Erutuon (~Erutuon@user/erutuon)
[11:10:39] *** Joins: foul_owl (~kerry@97-126-11-68.tukw.qwest.net)
[11:11:55] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[11:12:53] *** Joins: cfricke (~cfricke@user/cfricke)
[11:12:58] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[11:23:54] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:8c5a:efae:38ab:4ad2)
[11:25:16] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:25:56] *** Quits: fcc977 (~kaph@151.19.243.144) (Read error: Connection reset by peer)
[11:28:18] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[11:29:21] *** Quits: wagle (~wagle@quassel.wagle.io) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[11:29:41] *** Joins: fcc977 (~kaph@151.43.53.126)
[11:29:55] *** Joins: wagle (~wagle@quassel.wagle.io)
[11:30:07] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[11:31:50] *** Joins: kuribas (~user@ptr-25vy0ia11vvy5vw4h88.18120a2.ip6.access.telenet.be)
[11:31:51] *** Quits: wagle (~wagle@quassel.wagle.io) (Client Quit)
[11:32:23] *** Joins: wagle (~wagle@quassel.wagle.io)
[11:32:34] *** Joins: o (~niko@libera/staff/niko)
[11:33:15] *** Quits: fcc977 (~kaph@151.43.53.126) (Remote host closed the connection)
[11:34:32] *** Joins: fcc977 (~kaph@151.43.53.126)
[11:35:00] <hololeap> is there a preferred way to stream data from a TCP connection, which can handle network errors, EOF, and the like? I'm looking at the connection library, but it seems like it's missing something to stream the incoming chunks into something like attoparsec and still deal with errors and closing the socket on EOF.
[11:36:21] <kuribas> hololeap: conduit, streamly, pipes, etc... ?
[11:36:41] <kuribas> any decent streaming library would give you that.
[11:37:23] *** Joins: alp (~alp@user/alp)
[11:37:49] <kuribas> https://hackage.haskell.org/package/conduit-extra-1.3.5
[11:37:51] <hololeap> sure, but those libraries don't seem to have any network-specific functions. this seems like something that would be common enough to have a preferred solution
[11:37:57] *** Quits: fcc977 (~kaph@151.43.53.126) (Read error: Connection reset by peer)
[11:38:11] *** Joins: fcc977 (~kaph@151.43.53.126)
[11:38:17] <kuribas> https://hackage.haskell.org/package/conduit-extra-1.3.5/docs/Data-Conduit-Network.html
[11:38:49] <hololeap> ok. I will add that I _did_ look at that and could not understand how to actually use it
[11:39:40] <kuribas> there are probably tutorials somewhere.
[11:40:03] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:41:11] <kuribas> If you first read a tutorial on using conduit, then the types for the more specific libraries should make more sense.
[11:41:22] <hololeap> this looks like what I'm looking for, but it hasn't been updated in a couple years: https://hackage.haskell.org/package/conduit-connection-0.1.0.5/docs/Network-Connection-Conduit.html#v:connectFromHandle
[11:41:34] <hololeap> I guess I'll just have to try it out
[11:42:32] <hololeap> conduit makes sense, and I could probably build this myself, but it seems like _such_ a common problem that there must be a prebuilt solution. the Data.Conduit.Network module just confuses me
[11:43:51] <hololeap> sourceSocket and sinkSocket make sense. the rest is just poorly documented 
[11:44:13] <hololeap> data AppData -- The data passed to an Application.
[11:44:16] <hololeap> ok thanks
[11:44:59] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[11:45:11] <kuribas> yeah, that module is poorly documented.
[11:47:02] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[11:50:45] *** Joins: ubert1 (~Thunderbi@p200300ecdf09949ebd4b43e35031000e.dip0.t-ipconnect.de)
[11:54:24] *** Quits: fcc977 (~kaph@151.43.53.126) (Ping timeout: 250 seconds)
[11:59:46] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:00:13] *** Quits: max22- (~maxime@2a01cb0883359800958d49fa3415ab33.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[12:02:32] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[12:04:48] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 250 seconds)
[12:10:57] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[12:20:15] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:20:43] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 268 seconds)
[12:21:16] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 250 seconds)
[12:22:28] *** Joins: notzmv (~zmv@user/notzmv)
[12:27:09] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[12:29:16] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:30:20] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[12:33:36] *** Joins: jgeerds (~jgeerds@55d4090e.access.ecotel.net)
[12:34:19] *** Joins: chele (~chele@user/chele)
[12:37:59] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[12:39:47] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[12:40:56] *** Joins: Erutuon (~Erutuon@user/erutuon)
[12:41:46] <hololeap> conduit-connection at least compiles on my system, so that's a good sign
[12:42:48] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[12:44:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[12:45:15] *** Joins: rusrushal13 (~rusrushal@2401:4900:447e:3bb1:d351:e0e8:3fcf:bb54)
[12:45:31] *** Joins: Pickchea (~private@user/pickchea)
[12:46:51] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[12:47:40] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:40] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:43] *** allbery_b is now known as geekosaur
[12:50:22] *** Joins: vysn (~vysn@user/vysn)
[12:50:23] *** Quits: rusrushal13 (~rusrushal@2401:4900:447e:3bb1:d351:e0e8:3fcf:bb54) (Ping timeout: 256 seconds)
[12:57:15] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[12:57:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[12:57:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:58:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[12:58:49] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[12:59:02] <timCF> Hello! Is there some type and corresponding transformer similar to Either/ExceptT which behaves similar way, but don't fail on first Left value, and keep going accumulating Left values into some sort of monoid, let's say a list?
[13:00:07] <merijn> Validation from
[13:00:10] <merijn> @hackage either
[13:00:10] <lambdabot> https://hackage.haskell.org/package/either
[13:01:15] <timCF> merijn: thanks! I knew it was there something like this, but totally forgot name. I guess I have to implement transformer myself if I need?
[13:01:40] <merijn> arguably there is no transformer, because it's not a lawful Monad
[13:01:46] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:01:59] <timCF> aah, got it
[13:04:04] <lortabac> there is also Errors in Control.Applicative.Lift
[13:04:36] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:05:13] <lortabac> I've never used it though
[13:06:02] *** Joins: ksqsf (~user@134.209.106.31)
[13:06:33] *** Quits: aplainze1akind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[13:06:45] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[13:08:27] <timCF> lortabac: I guess it's kinda the same like Validation? Allows independent applicative computations, but not if computations do depend on each other (monadic)
[13:08:44] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:09:09] <merijn> timCF: You can trivially convert between Validation and Either, though. So you can write some wrapper around >>= that unwraps and rewraps
[13:09:54] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:10:23] <lortabac> timCF: I think so, but Validation is more widely used, so probably a better choice
[13:11:02] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[13:12:45] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[13:13:44] <timCF> I think I'll try Validation for now, at least it's clear how to replace Either in pure computations to simplify error accumulation
[13:14:13] <timCF> Places with side-effects more tricky of course
[13:15:15] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[13:16:31] <kuribas> timCF: also checkout "these"
[13:17:33] <kuribas> https://hackage.haskell.org/package/these
[13:18:44] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[13:22:05] <timCF> kuribas: you mean ChronicleT? 
[13:22:28] <kuribas> yeah, ChrincleT is the transformer version of these.
[13:23:02] *** Quits: ubert1 (~Thunderbi@p200300ecdf09949ebd4b43e35031000e.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:23:28] <kuribas> ChronicleT
[13:23:35] *** Joins: ksqsf (~user@134.209.106.31)
[13:23:43] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:6136:2d74:4238:7594) (Remote host closed the connection)
[13:24:23] *** Quits: jgeerds (~jgeerds@55d4090e.access.ecotel.net) (Ping timeout: 256 seconds)
[13:28:21] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[13:28:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:32:19] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[13:32:25] <hololeap> at least Applicatives compose, so you can get a Validation "applicative transformer"
[13:33:29] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[13:33:32] <hololeap> you're just stuck with combining results, not chaining them
[13:33:36] *** Quits: alx741 (~alx741@157.100.93.160) (Quit: alx741)
[13:34:51] <merijn> Data.Functor.Compose :)
[13:38:32] *** Quits: foul_owl (~kerry@97-126-11-68.tukw.qwest.net) (Ping timeout: 240 seconds)
[13:40:20] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:edf9:3833:cff9:92b3)
[13:43:10] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 250 seconds)
[13:43:46] *** Joins: ksqsf (~user@134.209.106.31)
[13:46:32] *** Quits: xff0x (~xff0x@2001:1a81:5209:df00:1935:85e:8166:55b) (Ping timeout: 240 seconds)
[13:47:22] *** Joins: xff0x (~xff0x@2001:1a81:5209:df00:5e7c:4acd:2a77:4d24)
[13:47:32] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 240 seconds)
[13:48:55] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[13:50:59] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[13:51:22] *** Quits: arjun_ (~arjun@user/arjun) (Ping timeout: 268 seconds)
[13:52:29] *** Joins: foul_owl (~kerry@174-21-143-101.tukw.qwest.net)
[14:01:04] <hololeap> oh, hey Validation is an example of a Selective functor
[14:01:04] *** Quits: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506) (Read error: Connection reset by peer)
[14:01:12] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:01:30] <merijn> All monad and applicatives are selective
[14:01:42] <merijn> the real question is: Which ones have interesting selective instances :p
[14:01:47] *** Quits: machinedgod (~machinedg@24.105.81.50) (Remote host closed the connection)
[14:02:20] <hololeap> all monads are selective, but not all applicatives, I don't think. but I haven't grokked selective yet
[14:02:55] *** Joins: machinedgod (~machinedg@24.105.81.50)
[14:04:32] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:04:46] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:05:26] <merijn> hololeap: They are, because there's even a default implementation for Applicative :p
[14:06:27] <merijn> See selectA
[14:06:57] <merijn> The default Applicative/Monad implementation don't allow "proper" under-/overestimation
[14:07:05] <hololeap> yeah, I'm looking at that now. it says: We can write a function with the type signature of select using the Applicative type class, but it will always execute the effects associated with the second argument, hence being potentially less efficient.
[14:07:31] <merijn> hololeap: The same goes for Monad, though :)
[14:07:46] <hololeap> no, it shouldn't
[14:09:03] <hololeap> because you can peek into the contents of the monad and check if it is Left or Right, then execute the `f (a -> b)` only if it's needed
[14:09:53] *** Joins: fcc977 (~kaph@151.43.53.126)
[14:10:05] *** Joins: ksqsf (~user@134.209.106.31)
[14:10:56] <merijn> Then you can't get Overapproximation, though?
[14:11:22] <hololeap> I don't know what that means
[14:11:38] <hololeap> is that from the paper?
[14:11:41] <merijn> hololeap: Yeah
[14:11:51] <hololeap> I haven't read it yet
[14:12:10] <hololeap> I'm just looking at the types from the module
[14:12:15] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:12:32] <merijn> hololeap: The point of selective is that you can inspect "what's the minimum effects guaranteed to execute" (underapproximation) vs "what is the maximum amount of effects executed?" (overapproximation)
[14:13:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:13:20] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:13:29] *** Quits: fcc977 (~kaph@151.43.53.126) (Client Quit)
[14:13:41] *** Joins: fcc977 (~kaph@151.43.53.126)
[14:14:20] <hololeap> well, with a Monad you can choose to execute the secondary effect and discard the `a -> b` result. with an Applicative you don't have that choice
[14:14:56] <hololeap> the default implementation selectM just skips the execution of `y` if the inner value is Right: https://hackage.haskell.org/package/selective-0.5/docs/src/Control.Selective.html#selectM
[14:15:05] *** Lord_of_Life_ is now known as Lord_of_Life
[14:17:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[14:22:28] <hololeap> instance Monoid m => Applicative (Over m) where ...
[14:22:46] <hololeap> how can you have a Monoid on something with the kind (Type -> Type)?
[14:23:05] <hololeap> oh, no `a` is just a phantom type here
[14:23:32] *** Joins: kaph (~kaph@151.43.53.126)
[14:23:36] <hololeap> newtype Over m a = Over { getOver :: m }
[14:23:53] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[14:24:27] *** Quits: fcc977 (~kaph@151.43.53.126) (Ping timeout: 256 seconds)
[14:26:55] *** Quits: kaph (~kaph@151.43.53.126) (Read error: Connection reset by peer)
[14:27:11] *** Joins: aeka (~aeka@user/hiruji)
[14:28:23] *** Joins: kaph (~kaph@151.43.53.126)
[14:29:48] <hololeap> this seems like it could be interesting, although I don't quite understand it at the moment: https://hackage.haskell.org/package/selective-0.5/docs/src/Control.Selective.html#line-421
[14:30:57] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[14:31:24] *** Joins: alx741 (~alx741@157.100.93.160)
[14:33:00] *** Quits: kaph (~kaph@151.43.53.126) (Remote host closed the connection)
[14:33:09] *** Joins: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[14:33:35] <leibniz> hi, is anyone online? i was asking something the other day but there was noone around
[14:33:54] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:34:01] <hololeap> 732
[14:34:23] <leibniz> similar to the number online then, i guess many are not infact real users
[14:34:49] <leibniz> someone suggested it would be more likely to find actual people during the daytime
[14:35:42] <leibniz> im just trying to find the question i asked in the logs, hang on
[14:36:44] <geekosaur> many are real users, but IRC is 24/7 and people are around according to their timezones/work schedules
[14:37:39] <leibniz> sorry i got distracted looking up Control.Selective which hololeap mentioned
[14:39:16] <Axman6> leibniz: you definitely qwon't get any help if you dson't ask your question :)
[14:39:39] <leibniz> i cant find it in the logs...
[14:39:52] <hololeap> ax the axman
[14:39:57] <leibniz> i probably didnt phrase it all that well anyway, i could try again i suppose
[14:40:32] <leibniz> so you need to start with a listlike thing that has the tail wrapped in a monad
[14:40:45] <leibniz> then you cant write a "lazy traverse" instance
[14:41:01] <leibniz> since not all applicatives commute with the monad
[14:41:08] <Axman6> sounds just like the various streaming/iteratee libraries
[14:41:08] <leibniz> im wondering about this phenomina
[14:41:42] *** Joins: kaph (~kaph@151.43.53.126)
[14:41:53] <leibniz> the proposal is that for these monadically wrapped tail lists, that there should be something other than traverse
[14:42:08] <leibniz> its much more high level as a consideration than a streaming library
[14:42:23] <Axman6> they're all essentially some variiation of data Step m a r = Done r | Step a (m (Step m a r)
[14:42:35] <leibniz> exactly
[14:42:54] <Axman6> do you have example of the type you're talking about?
[14:42:56] <leibniz> listT done right, i have seen it called
[14:43:04] <hololeap> logict?
[14:43:43] <leibniz> data MList' m a = MNil | a `MCons` MList m a
[14:43:44] <leibniz> type MList m a  = m (MList' m a)
[14:43:44] <leibniz> newtype ListT m a = ListT { runListT :: MList m a }
[14:43:54] <leibniz> from; https://wiki.haskell.org/ListT_done_right
[14:44:33] <Axman6> that's essentially what Step above is
[14:44:48] <leibniz> hololeap: thats;¬†(a -> m r -> m r) -> m r -> m r
[14:44:57] <leibniz> not sure that is the same
[14:45:29] <Axman6> the only difference is the Done r
[14:45:31] <leibniz> seems like a continuation wrapping a head value somehow
[14:45:42] <leibniz> Axman6: sure, yours would have an instance
[14:45:59] <leibniz> basically the idea is that any monadically wrapped tail thing should
[14:46:05] <leibniz> if its strictly infinite even
[14:46:07] <leibniz> etc.
[14:46:35] *** Quits: newsham (~newsham@2603-800c-2d00-e994-c564-1d76-1f18-c3ec.res6.spectrum.com) (Quit: Client closed)
[14:46:43] <leibniz> oh right, yours is nonempty
[14:47:11] <leibniz> anyway, i cant quite communicate this properly
[14:47:18] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 250 seconds)
[14:47:24] <leibniz> and i dont think i would be able to write a coherent proposal for the class
[14:47:29] <Axman6> well, it would be empty if you got rid of the monadic return value r thst most streaming libraries provide because it's often useful
[14:47:42] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[14:47:45] <hololeap> if I understand logict correctly, (a -> m r -> m r) corresponds to MCons, and the second (m r) corresponds to (m MNil), 
[14:48:25] <hololeap> I might be wrong there
[14:48:34] <leibniz> yeah, so its like a continuation right? it says, "given a constructor and a list, ill give you back a new list" presumably acting as a continuation over the head
[14:49:32] <leibniz> i guess i should check its instances to see if thats actually what its doing, but in any case, i dont think it seems like the same thing as ListT or Axmans nonempty version
[14:49:33] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[14:49:47] <hololeap> I think (a -> m r -> m r) is the success continuation and the second (m r) is the failure case
[14:50:10] <leibniz> what makes you suggest it here?
[14:50:15] <Axman6> yeah, that's just the... church encoding of the type above, roughly speaking
[14:50:20] <leibniz> ah ok
[14:50:25] <leibniz> so it should have an instance also
[14:50:29] <Axman6> they are equivallent
[14:50:30] <hololeap> because it's literally been called ListT done right
[14:50:34] <Axman6> -ish
[14:50:37] <leibniz> fair
[14:50:54] <leibniz> sure, if its an instance of the class, no problem
[14:50:57] <Axman6> basially all the streaming libraries are some variation of the ListT done right idea
[14:51:06] <leibniz> im sure there are are a bunch of equivalent encodings
[14:51:22] <leibniz> the point is to work at the class level to encapsulate all of them under the same abstraction
[14:51:29] *** Joins: arjun_ (~arjun@user/arjun)
[14:51:50] <leibniz> Axman6: i just dont see how its a "library" its more like a Functor, its a class
[14:52:11] <leibniz> calling it a library is kind of dismising it as a fundamental thing
[14:52:38] <leibniz> and not having the correct abstraction presented formally means its rewritten needlessly
[14:52:46] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:53:08] <Axman6> I think that's because the details of implementation matter when you care about performance
[14:53:23] <hololeap> you would have to look into the differences between e.g. conduit and pipes. I'm not sure they have such a common interface
[14:53:23] <leibniz> the point is that we can give the monadically wrapped tail things Functor instances, etc, but fail at Traverse
[14:53:33] <hololeap> there is
[14:53:36] <hololeap> @hackage streaming-commons
[14:53:36] <lambdabot> https://hackage.haskell.org/package/streaming-commons
[14:53:42] <hololeap> but I doubt that's what you want
[14:54:01] <leibniz> im trying to formulate a proposal
[14:54:13] <leibniz> for a class similar to Traverse
[14:54:41] <leibniz> that takes into account this thing about the Applicative and Monad not commuting and this messing up lazyness
[14:54:41] <hololeap> well, even Traverse doesn't specify if its instance is lazy or eager in the implementation
[14:55:30] <leibniz> the point is that it would be blocking in a blocking tail call, eg if evaluating the tail called a server in realtime to get the next value
[14:55:51] <leibniz> you need lazyness for them to compose - to get the "algebra"
[14:56:28] <leibniz> since really you should be able to pass the heads as they are made available, through several traverse like opperations
[14:57:12] <Axman6> what is the type of functions you want to travewrse with? just a -> m b?
[14:57:13] <leibniz> but unless the constructor and the applicative in the traversal commute, which they dont in general, because of the monad, then this is not possible
[14:58:11] <leibniz> Axman6: i can see two options, either you demand the monad and applicative commute, and just use the types as they appear in traverse
[14:58:14] <leibniz> :t traverse
[14:58:15] <lambdabot> (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)
[14:58:37] <leibniz> or you specialise Applicative f to be StateL
[14:58:49] <leibniz> and just have mapAccumL
[14:58:52] <leibniz> :t mapAccumL
[14:58:53] <lambdabot> Traversable t => (a -> b -> (a, c)) -> a -> t b -> (a, t c)
[14:59:01] <leibniz> as the thing you need to implement for the class
[14:59:23] <hololeap> it sounds like you're talking about three different types here. a Traversable, an Applicative, and a Monad... but the combinators you've mentioned only have two of those
[14:59:45] <leibniz> obviously the monadic context allows some generalization, ie (a -> b -> m (a, c))
[15:00:46] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[15:01:03] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[15:01:08] <leibniz> hololeap: Traversable requires that the deconstructed head is returned into an applicative, which are then sequenced together. however, for the traverse instance, the constructor is mapped into the applicative, and unless you want to sequence together all the applicatives (not lazy) to then be able to chain togther all the constructors
[15:01:25] <leibniz> then you need to comute the constructor with the applicative, and then the monad and applicative need to comute
[15:02:02] <hololeap> what makes you think that sequencing applicatives isn't ever lazy?
[15:02:15] *** Quits: kaph (~kaph@151.43.53.126) (Read error: Connection reset by peer)
[15:02:52] <leibniz> the point is that you either need the monad and applicative to commute, or that the "applicatives can be sequenced lazyily" as you suggest... though im not too sure about this
[15:03:00] <leibniz> basicall i know it works with StateL
[15:03:26] <hololeap> also, where is Monad coming into this. traverse just mentions Traversable and Applicative
[15:03:45] <leibniz> and this specialised/restricted behaviour is enough to make it nice and useful
[15:03:54] <leibniz> hololeap: the monad wraps the tail
[15:04:38] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[15:04:43] <hololeap> hm, are you sure that the functor wrapping the tail needs to be a monad for this to work?
[15:04:44] <leibniz> Monda m => t m a
[15:04:49] *** Joins: __monty__ (~toonn@user/toonn)
[15:04:58] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[15:05:00] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[15:05:10] <leibniz> i guess there is no actual requirement for it to be a monad.
[15:05:21] <hololeap> because applicatives always compose, which seems to be the issue you're worried about
[15:05:34] <hololeap> I'd have to work this out by hand to see what you're talking about specifically
[15:05:38] *** Joins: kaph (~kaph@151.43.53.126)
[15:06:03] <leibniz> you want to not have to sequence together all the applicatives all the way to the basecase of a potentially infinte stream
[15:06:15] <leibniz> in order to start composing together the constructors
[15:06:41] <leibniz> you want each head in turn to be available to subsequent traversals
[15:06:51] <leibniz> this being basically "lazyness"
[15:07:13] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 268 seconds)
[15:07:13] <leibniz> at some point you need the "monad" and applicative to commute
[15:08:10] <leibniz> hololeap; i guess you would run into the issue trying to get a monoidally composable traverse like opperation for monadically wrapped tails in a strictly infinite stream
[15:09:16] <leibniz> im not sure whats the correct way to present it though, either you require the commutation opperation is made available by a superclass
[15:09:39] <leibniz> or you just restrict the arbitrary applicative in traverse to StateL and just work with mapAccumL opperations
[15:09:52] <hololeap> so we are talking about some structure that looks like this:   x : m ( y : m ( z : m [] ) )
[15:09:59] <leibniz> yes
[15:13:16] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:13:45] *** Quits: kaph (~kaph@151.43.53.126) (Ping timeout: 256 seconds)
[15:14:51] <leibniz> im not sure how to move the discussion along, i guess it would be good to see someone else understand where the snag of commutation arises
[15:15:19] <hololeap> I'm trying to translate this into free monads if possible, because that might give some insight
[15:15:52] <leibniz> oh, ok
[15:18:56] <hololeap> Free (Compose ((,) x) m) () -- this is what it seems to be equivalent to, but the insight fizzled. probably because I still don't understand the problem correctly. maybe write up some code demonstrating what you're trying to do
[15:19:18] <hololeap> sorry, I've got limited energy right now
[15:20:47] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 268 seconds)
[15:21:10] <leibniz> not a problem
[15:21:33] <leibniz> i guess you could use Cofree aswell
[15:21:53] <leibniz> anyway, its not really an issue of which representation you use for the monadically wrapped tail thing
[15:22:21] <leibniz> more of how to present the class that all of these instantiate
[15:22:34] <hololeap> I just don't see the connection between the monads composing and the lazy/eager issue
[15:22:51] <leibniz> i cant tell if i should propose the version with the applicative restricted to StateL or the version with a commutation relation via a superclass
[15:23:27] <leibniz> hololeap: i guess since they are only monads as an artefact of using IO as m, to demonstraite how with a "blocking" class
[15:23:29] <leibniz> call*
[15:23:42] <leibniz> that the basecase would be inaccessible
[15:23:42] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[15:24:04] <leibniz> its the applicative that compise
[15:24:07] <leibniz> compose*
[15:24:17] <leibniz> the monadic bind opperation isnt actually used i dont think
[15:25:00] <leibniz> maybe it is somewhere, eg to flatten down a double nesting if the function returns the result in a monad aswell
[15:25:16] <hololeap> I need to get some sleep, but good luck with your proposal
[15:25:19] <sshine> what's the GHC extension that implies that nested type signatures refer to the parent variable if there isn't an explicit 'forall' in the inner type signature?
[15:25:25] <sshine> ScopedTypeVariables?
[15:25:27] <leibniz> (Applicative f,Monad m) => a -> m (f a)
[15:26:04] <leibniz> sshine: no you need an outer forall for that to work
[15:26:11] <hololeap> sshine: probably RankNTypes
[15:26:53] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[15:26:57] <leibniz> oh right, yes, you can ommit the forall on the inner type signature in a where block, nested like you say. its both RankNTypes and ScopedTypeVariables in combination
[15:27:11] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[15:27:47] <leibniz> hololeap: ok thanks for your help
[15:28:05] <leibniz> i wonder if Axman is still online, im not sure if anyone managed to follow what i was writing
[15:32:15] <hololeap> try to work out a signature for your function first... would it be: (Traversable t, Applicative f, Monad m) => (a -> f b) -> t m a -> f (t m b) ?
[15:32:28] <hololeap> anyway, gnight
[15:33:02] <leibniz> (Traversable t, Applicative f, Monad m,Commutes f m) => (a -> m (f b)) -> t m a -> f (t m b)
[15:33:22] <leibniz> or, setting f ~ StateL, and using mapAccumL
[15:33:27] <leibniz> :t mapAccumL
[15:33:28] <lambdabot> Traversable t => (a -> b -> (a, c)) -> a -> t b -> (a, t c)
[15:33:50] <leibniz> Traversable t => (a -> b ->m¬† (a, c)) -> a -> t m b -> (a, t m c)
[15:34:01] <leibniz> erp, not Traversable
[15:34:05] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:34:15] <leibniz> whatever this new class would be called
[15:34:21] <sshine> https://gist.github.com/sshine/8f350c862a1e49a1e7a3e1fca5bd12b6 -- 'employee' and 'skill' were originally fixed types, and I'd like to parameterise them. but somehow unification fails. I'm not sure if the Ord constraints are messing it up, or what.
[15:36:31] <leibniz> sshine: does it still throw an error if you enable AllowAmbiguousTypes?
[15:37:06] <sshine> leibniz, yes.
[15:37:13] <leibniz> or a functional dependecy stating that skill can be determined from employee
[15:37:32] <sshine> I'm not sure how to express that.
[15:37:47] <sshine> I thought I didn't have to express functional dependencies for this.
[15:38:29] <leibniz> it seems like it cant infer skill in the return type from employee in the input type
[15:39:06] <leibniz> i would have thought that with ApplowAmbiguousTypes you could just specify both with a typeApplication
[15:39:29] <leibniz> s/typo/notypo
[15:40:25] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[15:41:03] <leibniz> the fundep is for a class, my mistake sorry
[15:41:18] <leibniz> maybe injective types?
[15:44:55] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 256 seconds)
[15:45:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:46:06] <leibniz> aha
[15:46:14] <leibniz> you need a type application on "staff"
[15:48:07] <leibniz> er, or somewhere else, since staff actually has the correct "skill" and something else is expecting an arbitrary skill
[15:48:32] <leibniz> im guessing Set.empty
[15:50:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[15:51:12] <leibniz> erg! it was your foralls!
[15:51:23] <leibniz> you need to have them in one forall statement for some reason!
[15:52:02] <leibniz> such a weird error, its a bug?
[15:52:21] <leibniz> sshine^
[15:53:28] *** Quits: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Connection closed)
[15:55:02] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[15:55:16] *** Quits: arjun_ (~arjun@user/arjun) (Remote host closed the connection)
[15:55:28] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz‚Ä¶)
[15:57:10] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[15:57:42] *** Joins: cosimone (~user@93-47-230-83.ip115.fastwebnet.it)
[15:59:50] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[16:00:30] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[16:01:48] *** Joins: jkaye (~jkaye@2601:281:200:1958:8e74:ef22:c471:c2e)
[16:03:57] *** Joins: cheater (~Username@user/cheater)
[16:05:36] *** Joins: slack1256 (~slack1256@186.11.99.46)
[16:08:16] *** Quits: slac19759 (~slack1256@191.125.99.76) (Ping timeout: 268 seconds)
[16:13:24] *** Quits: stiell_ (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[16:13:58] *** Joins: echoone (~echoone@188.74.32.13)
[16:15:36] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[16:16:04] *** Joins: xlei_ (~akans@pool-71-125-19-142.nycmny.fios.verizon.net)
[16:16:52] *** Quits: xlei_ (~akans@pool-71-125-19-142.nycmny.fios.verizon.net) (Client Quit)
[16:17:42] *** Joins: caro_ (~caro@212.83.144.58)
[16:17:47] *** Quits: xlei (~akans@pool-71-125-19-142.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[16:18:13] *** Joins: xlei_ (~akans@pool-71-125-19-142.nycmny.fios.verizon.net)
[16:18:19] *** Joins: fef (~thedawn@user/thedawn)
[16:18:59] *** caro_ is now known as caro
[16:19:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[16:20:51] *** Joins: ksqsf (~user@134.209.106.31)
[16:21:29] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[16:23:31] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz‚Ä¶)
[16:25:53] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[16:26:11] *** Joins: stiell_ (~stiell@gateway/tor-sasl/stiell)
[16:26:25] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[16:26:45] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[16:27:34] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[16:28:00] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:37:49] *** Joins: ksqsf (~user@134.209.106.31)
[16:38:21] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 256 seconds)
[16:38:22] *** Joins: Pickchea (~private@user/pickchea)
[16:38:31] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[16:43:25] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[16:45:55] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:46:32] *** Joins: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[16:47:02] <leibniz> so how do you open a proposal anyway?
[16:48:45] *** Joins: ksqsf (~user@134.209.106.31)
[16:49:42] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[16:51:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[16:53:35] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[16:53:50] <leibniz> i was hoping to get some feedback on which was the best way to phrase it before doing so though
[16:54:00] *** Joins: rusrushal13 (~rusrushal@2401:4900:4471:78e2:d490:6737:3704:78a1)
[16:54:19] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[16:54:29] <tomsmeding> a ghc implementation proposal?
[16:54:31] <leibniz> basically the "refine the applicative to StateL" version, or "allow all applicatives that commute with the tails monad" version
[16:54:37] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[16:54:38] <leibniz> tomsmeding: yeah
[16:54:46] <tomsmeding> look here https://github.com/ghc-proposals/ghc-proposals
[16:54:49] <leibniz> thanks
[16:55:45] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Client Quit)
[16:55:49] *** Quits: echoone (~echoone@188.74.32.13) (Quit: Client closed)
[16:56:17] <leibniz> hmm, it doesnt seem like a new Prelude class is one of the types of thing that a proposal is for
[16:56:50] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[16:57:06] <tomsmeding> leibniz: maybe here? https://github.com/haskell-core/core-libraries-proposals
[16:57:09] <jkaye> leibniz, Would that not be more of a library change than a GHC change?
[16:57:21] <jkaye> tomsmeding, Yep just what I was thinking
[16:57:21] <leibniz> yeah
[16:57:25] <leibniz> thanks
[16:57:27] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[16:57:35] <merijn> leibniz: What class would that be?
[16:57:57] <merijn> leibniz: Also, changes to Prelude are fairly unpopular because they affect nearly all code
[16:58:12] <leibniz> its just another class... shouldnt be a breaking change
[16:58:19] <leibniz> depends which version, the commuting type i havent actually been using so i dont have a name for
[16:58:34] <tomsmeding> another class _is_ a breaking change, for user code that used that same name for something else :)
[16:58:38] <leibniz> the version which requires the user to implement a monadic version of mapAccumL im calling a Scanner
[16:58:48] <merijn> leibniz: If that classes' name conflicts with anything in existing code, it *is* breaking
[16:59:04] <tomsmeding> might want to consider putting it not in Prelude, but somewhere else in base
[16:59:11] <tomsmeding> then it's not a breaking change
[16:59:12] <leibniz> tomsmeding: ok, modulo naming conflicts... oh right, i guess you cant guarantee the name is unused. guess a hackage search could show up any conflicts though
[16:59:13] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:59:20] <tomsmeding> (I didn't read any of the stuff before in this channel, sorry)
[16:59:22] <merijn> leibniz: You are introducing a new typename/function names in the global scope of every program//library without an explicit Prelude
[16:59:29] <merijn> leibniz: But why prelude?
[16:59:38] <leibniz> because its basically Traverse
[16:59:40] <merijn> leibniz: Why not in a different module in base?
[16:59:46] <leibniz> ie, its about as high level as you can get
[17:00:05] <leibniz> sure, maybe eg. Data.Scanner or something
[17:00:19] <merijn> Traversable in Prelude was already controversial and that one was widely used before the change :p
[17:00:19] <leibniz> idk how to ensure its shipped with base though
[17:00:36] <leibniz> its quite category theoretic
[17:00:39] <leibniz> things like Functor
[17:00:54] <leibniz> basicaly formalising the abstraction of map for regular lists
[17:01:03] <merijn> leibniz: Will this class a superclass of existing stuff in base?
[17:01:04] <leibniz> this is along those lines
[17:01:27] <merijn> If not, then it could just as easily be outside of base, though
[17:01:31] <leibniz> merijn: im not sure, i dont think so since it requires an extra parameter
[17:01:51] <merijn> @hackage witherable
[17:01:51] <lambdabot> https://hackage.haskell.org/package/witherable
[17:01:59] <leibniz> its kind of like Monad m => Traversable (f m)
[17:02:01] <merijn> leibniz: i.e. why couldn't it be a separate package like witherable?
[17:02:24] <leibniz> functor ships with base though?
[17:02:30] <leibniz> thats the proposal
[17:02:36] <leibniz> that it qualifies for that kind of status
[17:02:51] <leibniz> otherwise it would just be a library, i guess thats what im having to defend
[17:03:02] <leibniz> but cant argue more than just its formal centrality
[17:03:08] <merijn> leibniz: Making base bigger is a rather unpopular idea
[17:03:35] <leibniz> if it was missing something like Functor, im sure it would be addapted despite this
[17:03:36] <merijn> leibniz: Because the bigger base is, the more often breaking changes happen, so we either have to accept "base continually breaking"
[17:03:46] <merijn> or "stuff doesn't change because it'd break base"
[17:03:55] <leibniz> ok, well this wasnt discovered before
[17:03:56] *** Joins: fef (~thedawn@user/thedawn)
[17:04:10] <leibniz> its unlikely it will need to be added again either
[17:04:36] <leibniz> sorry if that seems like a strange argument. but i cant exactly predict "no similar discoveries will occur"
[17:04:49] <leibniz> and can only argue that this is fundamental enough
[17:04:55] <leibniz> which i guess is debatable
[17:06:01] <leibniz> if it "started a trend of inflating base", i guess as long as it was sufficiently justified, this wouldnt be a bad thing
[17:06:16] <leibniz> "search for higher order formalisms"
[17:06:26] <ksqsf> base is already a big mudball; i kinda hope there will be a base 5 rewrite :]
[17:07:42] <leibniz> my main reason for approaching the committee is because i cant argue these rationalisations, or design the library sufficiently to have it accepted
[17:07:47] <leibniz> alone
[17:07:49] <geekosaur> we already had one split base,m maybe it's time for another
[17:08:47] <leibniz> i dont want to get into the details too much, but i have reason to believe this to be a very high order abstraction, based on some theorems to do with isomorphic containers
[17:09:20] <leibniz> something like "the monad on the tail can contain the structure directing index required for shaped pattern matching"
[17:11:15] <leibniz> which is where (for anything (traversable containers?) more shaped than lists, eg trees)¬† you need extra data on the constructor to retain the shape during traversal implemented by pattern matching on a head/tail opperation (the structure directing index is required as an argument to the constructor)
[17:11:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[17:11:37] <leibniz> since the monadic tail thing subsumes this, and thats a pretty high level thing, i guess that makes this super high level
[17:12:01] <leibniz> "its really a thing" => "it should go in base"
[17:12:10] <lortabac> leibniz: if it can technically be implemented as a new library, I'd do it as a library anyway
[17:12:21] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 256 seconds)
[17:12:25] <leibniz> point is that would have me doing it alone
[17:12:48] <leibniz> id rather kind of consult on the design of a proposal and have people that can do things properly do it
[17:12:53] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:13:12] <tomsmeding> the advantage of writing a library is that you can completely rewrite it when you get new insight :)
[17:13:19] <leibniz> might seem like a cop out, but i think its both complex and important enough to have it done by pros, instead of me
[17:13:20] <tomsmeding> for example insight from other people
[17:13:43] <tomsmeding> I think a proposal for including stuff in base would be stronger anyway if there is an existing implementation that people can look at
[17:13:44] <lortabac> in any case it's better to make a library, then it can be moved to base if it becomes popular enough
[17:13:46] <leibniz> iv written it several times, at this point im suggesting a proposal that would involve the GHC team
[17:14:20] <leibniz> lortabac: i think thats whats being debated, i disagree, i think infact that assertion is whats preventing its acceptance
[17:14:41] <merijn> "the GHC team" always makes me think that people think GHC has a whole lot more people than it does :p
[17:14:51] <leibniz> ok "you lot"
[17:15:05] <leibniz> :-/
[17:15:15] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:15:28] <tomsmeding> I feel like the best way to continue would be to write up what you think, and post it in this channel, on reddit and perhaps on haskell weekly, and get discussions going
[17:15:52] <leibniz> did you see the presentation in the scrollup?
[17:16:04] <tomsmeding> if you feel like you're to a point where you think "this is a good idea and it should be implemented in this form", make a proposal
[17:16:08] <tomsmeding> no sorry lol
[17:16:12] <leibniz> right...
[17:16:16] <tomsmeding> hence my point, make a writeup in one document
[17:16:24] <leibniz> im saying i cant
[17:16:39] <leibniz> i have the theoretical results but cant write well enough
[17:17:09] <leibniz> which is difficult for both myself and the comunity, since neither party actually benifits from the existence of the results
[17:18:06] <leibniz> this is why i was asking for "help drfing a proposal"
[17:18:17] <leibniz> drafting*
[17:19:23] <leibniz> tomsmeding: also, its stateable in one line
[17:20:52] <leibniz> "my thing is either a refinement over traverse, to the StateL Applicative, for monadically wrapped tail list-like things, or its a requirement that a more general applicative comute with the monad, to ensure the lazy traversability permits monoidal composition in a blocking monadic streaming setting for example"
[17:20:58] <leibniz> or various similar presentations
[17:21:48] <leibniz> "scanner algebras" result from the version refining the applicative to StateL, idk much about the general version with the commuting
[17:21:52] <tomsmeding> sounds interesting but still very abstract
[17:22:07] <tomsmeding> "I have the theoretical results" sounds like you have some more mathematical results; is that true?
[17:23:17] <leibniz> theres some theorems like "everything of a certain style is isomorphic to free lists - so basically is trees, so thats what you want structure directing indexes for, and abstractions that subsume these"
[17:23:26] <leibniz> the theorem being the isomorphic to trees statement
[17:24:22] <leibniz> "theoretically, this is important" ... :-/
[17:24:39] <leibniz> sorry...
[17:25:28] <lortabac> I'd suggest this: if you have some mathematical insights to share, write a blog post; if you have an implementation, write a library; if you have a vague intuition that needs to be refined, write a post on Reddit
[17:26:03] <leibniz> so basically you suggest not approaching it directly on the active channel, and presenting it in a way which i have stated i cannot
[17:26:04] <leibniz> thanks!
[17:26:09] <leibniz> i think i should go
[17:26:20] *** Quits: cosimone (~user@93-47-230-83.ip115.fastwebnet.it) (Remote host closed the connection)
[17:26:27] <leibniz> perhaps these results, at some point, can be written by someone other than myself
[17:26:32] <leibniz> peace
[17:26:33] *** Quits: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Connection closed)
[17:26:40] <tomsmeding> ideas like these typically benefit from writing some kind of exposition, and feedbacking a fixed piece of text
[17:26:40] <tomsmeding> oh
[17:26:47] <tomsmeding> o/
[17:27:10] <yushyin> oO
[17:31:24] *** Joins: alx741 (~alx741@157.100.93.160)
[17:34:41] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[17:34:46] <ksqsf> :( ghc doesn't let me use ùüô as an identifier
[17:35:29] <geekosaur> > generalCategory 'ùüô'
[17:35:31] <lambdabot>  DecimalNumber
[17:37:50] <ksqsf> it's not a number anyway
[17:38:08] <geekosaur> > ùüô
[17:38:10] <lambdabot>  <hint>:1:1: error: lexical error at character '\120793'
[17:38:18] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[17:38:34] *** Joins: neurocyte0917090 (~neurocyte@IP-185189141194.dynamic.medianet-world.de)
[17:38:34] *** Quits: neurocyte0917090 (~neurocyte@IP-185189141194.dynamic.medianet-world.de) (Changing host)
[17:38:35] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[17:38:35] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:38:46] <geekosaur> interesting the category is number but you can't use it as one
[17:41:43] *** Quits: michalz (~michalz@185.246.204.101) (Remote host closed the connection)
[17:42:47] *** Quits: rusrushal13 (~rusrushal@2401:4900:4471:78e2:d490:6737:3704:78a1) (Ping timeout: 256 seconds)
[17:43:21] *** Quits: neverwas (jpneverwas@swissbox.unperson.link) (Ping timeout: 256 seconds)
[17:43:53] <pfurla-matrix> !whois puffnfresh
[17:44:28] *** Joins: pfurla (~pfurla@2804:d41:4331:4800:2caa:3e9f:9236:25d4)
[17:44:41] <geekosaur> did you want /whois ?
[17:45:31] <sshine> is there a notify service on libera chat?
[17:46:19] <pfurla-matrix> I did but I am in a matrix.org bridge , bang-ircCommand is supposed to be a irc command, but apparently only in special chat room
[17:46:35] <geekosaur> looks like they have memoserv. need to have a registered nick both to send and to receive
[17:46:53] <geekosaur> lambdabot also has @tell
[17:52:20] *** Joins: neverwas (jpneverwas@swissbox.unperson.link)
[17:53:07] *** Joins: Snoopy4 (~Snoopy@host-82-49-101-122.retail.telecomitalia.it)
[17:53:33] <Snoopy4> Haskell is the esoteric language with the most money invested in, and still manages to suck. Congrats ^^
[17:53:48] *** Quits: Snoopy4 (~Snoopy@host-82-49-101-122.retail.telecomitalia.it) (Client Quit)
[17:55:58] *** Joins: michalz (~michalz@185.246.204.122)
[17:56:38] <sshine> haha
[17:56:48] <sshine> if that were true
[17:57:00] <kuribas> well, someone invested money in haskell, that's good news :)
[17:57:10] <sshine> I think there are legacy languages that have way more money invested and "suck" in a different sense :)
[17:57:21] *** Joins: alx741 (~alx741@157.100.93.160)
[17:57:48] <geekosaur> javascript immediately came to mind for some reason
[17:57:56] <sshine> but I'm impressed at how far Haskell has gotten in production considering how impractical its toolchain is, and how hard the language itself is to learn. :D
[17:58:00] <kuribas> I agree that haskell sucks, just less than other languages :)
[17:58:34] <sshine> kuribas, I recall that being the motto behind mutt, the email client. how many still use that? ;)
[17:58:58] <geekosaur> it's still my go-to if I'm limited to TUI
[17:59:15] <sshine> I'll quit email before I get a good email client.
[17:59:20] <geekosaur> thankfully that doesn't happen much any more, but.
[18:00:08] <sshine> apparently people use email to send these "job contracts" and "job applications" and they keep bugging me to check it. it's so unproductive!
[18:00:27] <sshine> like, don't they have /dcc send?
[18:01:13] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:01:18] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[18:03:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:03:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:03:57] *** Joins: wroathe (~wroathe@user/wroathe)
[18:05:02] *** Joins: nvmd (~nvmd@user/nvmd)
[18:06:06] *** Joins: ystael (~ystael@user/ystael)
[18:08:51] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 256 seconds)
[18:09:16] *** Joins: vglfr (~vglfr@46.96.165.111)
[18:10:32] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[18:11:17] *** Joins: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[18:11:30] <leibniz> hey, sorry, i had to duck out
[18:11:55] <leibniz> i think we were discussing the format of the proposal
[18:12:11] <leibniz> where there were considerations about limited bandwidth
[18:12:49] <leibniz> i personally dont feel confident to author a persistent article
[18:13:06] <leibniz> it seems this is a sticking point
[18:14:33] <merijn> sshine: What makes you say the toolchain is impractical?
[18:14:52] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 250 seconds)
[18:14:57] <leibniz> i guess this means that the most help i can be is to answer any questions anyone has
[18:14:58] <merijn> I'm genuinely curious, because nearly every other language I use has toolchains that seem way less practical than cabal
[18:15:14] *** Joins: razetime (~quassel@49.207.203.87)
[18:15:31] <leibniz> merijn: it seemed like a flippant comment
[18:15:41] <merijn> And I'm also curious which toolchains you've used that seem better...
[18:16:18] <leibniz> discussing the merits of haskell as a language on a channel dedicated to haskell seems a bit pointless
[18:16:42] <leibniz> its not as if its advertising to anyone not already part of the community
[18:17:19] <leibniz> but certainly stack, by allowing persistent builds across time, is an unprecedentedly useful tool, setting haskells toolchain arguably ahead of any other language
[18:17:22] *** Joins: alx741 (~alx741@157.100.93.160)
[18:19:14] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:19:16] *** Joins: mmhat (~mmh@55d4d6e9.access.ecotel.net)
[18:19:51] *** Quits: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Connection closed)
[18:20:28] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:21:11] <merijn> I fear you have much more faith in stack than I, and that's not the part of the toolchain I'd consider good, tbh :p
[18:21:57] <ksqsf> cabal is great. it is mostly declarative but also supports advanced constructs like 'if'.
[18:22:39] <ksqsf> though some keywords are really weird, like 'hs-source-dirs'
[18:22:57] <merijn> ksqsf: Seems perfectly cromulent?
[18:24:14] <ksqsf> it's acceptable but i don't know why there is 'hs-'
[18:24:35] <sclv> cabal also allows persistent builds across time and also lots of tools for lots of languages
[18:24:50] <Sqaure> i couldnt get hs-source-dirs to handle ../some/path some days ago. But im on some 2-3 yo cabal version.  
[18:24:58] <sclv> The idea has been around a minute
[18:25:32] <sclv> src dirs shouldn‚Äôt handle paths like that because those don‚Äôt go into tarballs
[18:26:01] <merijn> ksqsf: You can package C sources in Haskell packages (and there's work on C++ too, and no reason other languages couldn't be included)
[18:26:49] <merijn> ksqsf: so hs- lets you distinguish from (potential) future extensions such as c-source-dirs and cxx-source-dirs, etc. :)
[18:26:55] <sshine> merijn, I like Rust's cargo a lot :) I *think* Go's toolchain is good (but I've never used it), and I *have* used Perl's, which is not that bad, although, of course, the language itself is... let's not go there. :-P
[18:26:58] <ksqsf> merijn: nice to know, thanks
[18:27:11] *** Joins: Guest49 (~Guest49@2405:201:1e:5848:ecc5:3ef:bb63:fa9f)
[18:28:05] <Guest49> Hi
[18:28:28] <merijn> sshine: Go's toolchain is only good if you believe "sacrificing hundreds/thousands of man hours to ensure everything always works with HEAD of everything else" is both feasible and good
[18:29:03] <Guest49> Is there a way that I can contribute to Haskell?
[18:29:21] <sshine> merijn, good toolchains require sacrifices. I can't say what went into it, but I did once try to install Go code, and it was easy.
[18:29:22] <merijn> Depends what kinda contributions you are interested in making? :)
[18:29:38] <merijn> sshine: Hackage doesn't have the manpower to make that work
[18:29:44] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[18:29:56] <sshine> merijn, I think you can make a statement about the quality of a tool without making a moral statement about how it came to be. but sure, the latter is not unimportant.
[18:29:57] <fendor[m]> didn't go move to a cargo like approach?
[18:30:06] <merijn> sshine: It's the same with people saying "oh, bet debian packages make this work!". Sure, by virtue of throwing hundreds of man hours to fix each individual issue"
[18:30:08] *** Joins: max22- (~maxime@2a01cb08833598005d86ce1a880654d8.ipv6.abo.wanadoo.fr)
[18:30:37] <sshine> merijn, I also use Debian. apparently I believe in sacrificing humans.
[18:30:39] <sshine> :P
[18:30:40] <merijn> sshine: I'm saying the quality you observe isn't a part of the tool, but the manpower thrown against the problem
[18:30:52] <maerwald> I doubt that
[18:30:56] <merijn> sshine: i.e. if we threw the same manpower at hackage we'd have the same result
[18:31:09] <maerwald> debian is the perfect example: lots of manpower and lots of f-ups
[18:31:43] <sshine> merijn, the tool is the thing I download and see working, because of the time spent to make it work. it sounds like you're justifying why a tool isn't bad because people didn't kill themselves fixing it (yet) :)
[18:32:26] <Guest49> Something simple, maybe adding a small but missing feature in the std lib. or maybe some issue that I can try to fix
[18:32:59] <Clint> debian doesn't have lots of manpower
[18:33:24] <sshine> Guest49, this might be for you: https://discourse.haskell.org/t/a-new-future-for-cryptography-in-haskell/3888
[18:33:38] <ksqsf> Clint: why? debian has ~1000 DDs and DMs
[18:33:56] <sshine> Clint, I think what's meant here is that Debian's maintainer model depends on manpower.
[18:34:04] <merijn> sshine: I don't mean "fixing the tool" I mean that most breakage isn't breakage in the tooling, but in the packages you are trying to install
[18:34:06] <Clint> ksqsf: most of whom are not active
[18:34:30] <sshine> merijn, my software isn't broken, you're giving it wrong inputs!
[18:34:34] <merijn> sshine: Most "cabal problems" are "this set of dependencies doesn't install", which is not a problem with cabal, but with your dependencies
[18:34:57] <ksqsf> NixOS has far less manpower, but a great tool (Nix) helps a lot
[18:35:02] <merijn> Clint: It does compared to Hackage
[18:35:16] <merijn> Clint: Hackage has, like, low double digit people *at best*
[18:35:36] <ksqsf> iirc Nix ships even more packages than Debian does
[18:36:28] <sshine> merijn, maybe it is impossible to even define the quality of a tool without making statements about its dependencies, and so any statement about the tool is really a statement about other things. :-D somehow, this completely derails any comparative assessment about toolchains.
[18:36:44] *** Quits: Guest49 (~Guest49@2405:201:1e:5848:ecc5:3ef:bb63:fa9f) (Quit: Client closed)
[18:37:13] <merijn> sshine: The quality of a toolchain, to me, is how easily you can integrate it into larger systems. How predictable it's behaviour is. etc.
[18:37:57] <merijn> cabal-install is very predictable, allows for all the possible control I've needed and integrates into larger build system fairly well (there's some room for improvement still, but infinitely better than, say, pip)
[18:38:59] *** Joins: alx741 (~alx741@157.100.93.160)
[18:38:59] <maerwald> not sure a constraint solver is really what you'd call predictable from a user pov
[18:39:21] *** Quits: max22- (~maxime@2a01cb08833598005d86ce1a880654d8.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[18:39:32] <merijn> maerwald: It is a 1) a predictable constraint solver and 2) you can freeze it and/or use index-state to achieve that for users
[18:39:34] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:40:21] <maerwald> I'm not sure what a predictable constraint solver is... I'm talking about naive user interaction
[18:40:40] <maerwald> stack has predictability as a priority, I don't think cabal has
[18:41:50] <merijn> maerwald: as of v2-build the solver is (to the best of my knowledge) deterministic, so that the same index-state will always produce the same plan (and always preferring the newest admissible versions)
[18:42:07] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:42:16] <maerwald> sure
[18:42:27] <maerwald> well, not exactly, but almost
[18:42:32] <maerwald> flags and pkg-config can change that
[18:42:39] <sshine> merijn, I'm talking about the experience of using the tool. in the case of Cabal, the experience is pretty good in spite of how you can delegate the responsibility/probability of success to however coherent the package graph you happen to refer to at the time of evaluation. clearly there's some ideological difference here where it seems like you don't want any one point of failure to reflect the quality 
[18:42:45] <sshine> of "the thing" (tool, language, ecosystem, whatever), whereas with e.g. Stack's snapshots, you do get something to point your fingers at if it breaks, but you also have to sacrifice humans to make those snapshots both consistent and recent.
[18:42:55] *** Joins: zmt01 (~zmt00@user/zmt00)
[18:43:15] *** Joins: texasmynsted (~texasmyns@99.96.221.112)
[18:44:11] <ksqsf> I think most of this UX problem is just that GHC insists on having a set of compatible versions
[18:44:40] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:45:22] <maerwald> merijn: from a user POV, cabal is not predictable. By default, the input is mutable/rolling and the result of a resolution is not something they would be able to predict
[18:45:28] <ksqsf> ksqsf: while Rust just compiles and links every needed major versions
[18:45:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:46:11] <sshine> ksqsf, a set of compatible versions of what?
[18:46:19] <ksqsf> sshine: build-depends
[18:46:35] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[18:47:38] <merijn> ksqsf: GHC actually admits conflicting versions, to some extend
[18:48:03] <merijn> ksqsf: But it's messy and hairy and cabal doesn't allow it for that reason, because it's likely to break shit
[18:48:13] <merijn> *extent
[18:51:05] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[18:51:39] <ksqsf> hmm, I'm not really sure GHC can be like Rust in this regard; Rust has more restrictions on class instances for coherence
[18:52:34] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 250 seconds)
[18:53:15] <ksqsf> but it would be great if it turned out to be feasible
[18:53:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:53:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:53:52] *** Joins: wroathe (~wroathe@user/wroathe)
[18:56:05] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[18:56:24] *** Joins: ksqsf (~user@134.209.106.31)
[18:57:28] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[18:57:44] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[18:58:28] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:58:50] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[18:59:01] *** Joins: alx741 (~alx741@157.100.93.160)
[19:00:46] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[19:07:26] *** Quits: zmt01 (~zmt00@user/zmt00) (Quit: Leaving)
[19:07:33] *** Joins: max22- (~maxime@2a01cb0883359800e30a3abeb76df7a4.ipv6.abo.wanadoo.fr)
[19:07:35] *** Joins: shapr (~user@98-159-193-131.scottsboro.org)
[19:08:26] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:08:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[19:09:21] *** Joins: laslmtdbm^ (~laslmtdbm@wsip-98-188-242-61.mc.at.cox.net)
[19:17:39] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:17:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:81c9:f67f:1443:f972)
[19:17:54] *** Quits: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd) (Remote host closed the connection)
[19:17:54] *** Quits: raghavgururajan (ea769b8000@user/raghavgururajan) (Remote host closed the connection)
[19:17:54] *** Quits: sm2n (ae95cb1267@user/sm2n) (Remote host closed the connection)
[19:17:54] *** Quits: jakzale (6291399afa@user/jakzale) (Remote host closed the connection)
[19:17:54] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (Remote host closed the connection)
[19:17:54] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (Remote host closed the connection)
[19:17:54] *** Quits: jkoshy (99b9359beb@2604:bf00:561:2000::10f) (Remote host closed the connection)
[19:17:54] *** Quits: samhh (7569f027cf@2604:bf00:561:2000::e4) (Remote host closed the connection)
[19:17:54] *** Quits: evanrelf (3addc196af@2604:bf00:561:2000::f0) (Remote host closed the connection)
[19:17:54] *** Quits: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2) (Remote host closed the connection)
[19:17:54] *** Quits: lukec (9dfd4d094e@2604:bf00:561:2000::10e) (Remote host closed the connection)
[19:17:55] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (Remote host closed the connection)
[19:18:26] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[19:18:27] *** Joins: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd)
[19:18:27] *** Joins: lukec (9dfd4d094e@2604:bf00:561:2000::10e)
[19:18:28] *** Joins: samhh (7569f027cf@2604:bf00:561:2000::e4)
[19:18:37] *** Joins: jakzale (6291399afa@user/jakzale)
[19:18:37] *** Joins: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2)
[19:18:42] *** Joins: evanrelf (3addc196af@2604:bf00:561:2000::f0)
[19:18:42] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[19:18:42] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[19:18:42] *** Joins: jkoshy (99b9359beb@2604:bf00:561:2000::10f)
[19:18:45] *** Joins: sm2n (ae95cb1267@user/sm2n)
[19:18:49] *** Joins: raghavgururajan (ea769b8000@user/raghavgururajan)
[19:19:06] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:19:43] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[19:22:02] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:81c9:f67f:1443:f972) (Ping timeout: 250 seconds)
[19:22:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:23:51] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Quit: leaving)
[19:23:55] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[19:24:28] *** Joins: cosimone (~user@93-47-230-83.ip115.fastwebnet.it)
[19:25:46] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:25:48] <sclv> rust‚Äôs model can lead to both compile time and runtime failures https://doc.rust-lang.org/cargo/reference/resolver.html#version-incompatibility-hazards
[19:25:55] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 256 seconds)
[19:26:23] <sclv> haskellers are just less forgiving of such things and so the safer more restrictive choice is made
[19:27:36] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[19:28:24] *** Quits: stiell_ (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[19:29:39] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[19:29:58] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:30:02] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:32:21] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[19:34:04] *** Joins: alx741 (~alx741@157.100.93.160)
[19:36:05] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[19:36:25] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:37:39] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:37:52] *** Joins: newsham (~newsham@2603-800c-2d00-e994-c564-1d76-1f18-c3ec.res6.spectrum.com)
[19:38:10] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[19:38:32] *** Quits: laslmtdbm^ (~laslmtdbm@wsip-98-188-242-61.mc.at.cox.net) (Ping timeout: 240 seconds)
[19:40:15] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[19:46:44] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:8c5a:efae:38ab:4ad2) (Quit: WeeChat 2.8)
[19:47:32] *** Quits: shapr (~user@98-159-193-131.scottsboro.org) (Ping timeout: 240 seconds)
[19:47:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:48:01] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[19:49:20] *** Joins: laslmtdbm^ (~laslmtdbm@wsip-98-188-242-61.mc.at.cox.net)
[19:50:37] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[19:52:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[19:54:05] *** Joins: alx741 (~alx741@157.100.93.160)
[19:55:12] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[19:56:05] *** Joins: ksqsf (~user@134.209.106.31)
[19:57:03] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:58:40] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[19:59:33] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[20:01:52] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[20:02:16] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:03:53] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[20:04:57] <Henson> Hi everyone, I'm trying to understand this performance confusion I'm encountering with the following Haskell code https://paste.tomsmeding.com/U6K7rBaM. It's just a simple benchmark to crunch a quadratic curve fit 1 million times. On my (old) laptop this runs in 0.02 seconds. However, if I change line 8 from "!pVal" to "pVal" then it runs in 2.0 seconds. Why is there such an enormous performance boost for this simple strict evaluation?
[20:05:57] <Henson> I'm trying to understand this as I have much more complicated code that does something similar, and I'm wondering if I can make the performance much greater with a few simple bang patterns in the right spot.
[20:05:57] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:06:22] <Henson> well, similar code embedded in a much more complicated program.
[20:06:49] <sm> it's laziness at work. Accumulators in tight loops are something you want to be evaluated eagerly
[20:06:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:07:43] <Henson> sm: is there a way I can profile my code to determine what parts are being held up by laziness and where I should add eager evaluations?
[20:07:53] <sm> Debug.Trace can be useful for seeing when things are being evaluated
[20:08:04] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:08:06] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:a9:59ba:3231:6160) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[20:08:58] <sm> there's no magic tool alas, it's one of the skills a haskeller needs to develop. Though in practice, I find it doesn't come up that often in real code
[20:09:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:09:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:09:08] *** Joins: wroathe (~wroathe@user/wroathe)
[20:09:22] <sm> I don't think a profile helps here...
[20:09:23] <Henson> sm: but the pVal isn't even an accumulator, it's just an index to prevent Haskell from reusing the previously calculated inputs and outputs
[20:09:50] <c_wraith> I keep thinking about this. There is a simple set of rules to follow to prevent space use problems. It should be possible to write some sort of assistance to validate that you're following those rules.
[20:10:27] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:11:59] <sm> c_wraith++
[20:12:17] *** Joins: Pickchea (~private@user/pickchea)
[20:13:04] <sm> Henson: I hear you. I can't see the exact mechanism myself, but I would guess the tuple is the problem, maybe the strict pval helps force it ?
[20:13:33] <c_wraith> the problem comes from going "this set of rules is simple" to actually writing the rules down.  Because they aren't actually quite so simple when you deal with all the extra cases
[20:13:51] <Henson> sm: in the more complex production code there's a simple "p2 = sum $ map (\(t,p) -> p*t) (zip times positions)" where times :: [Double] and positions :: [Double] that takes up a big chunk of the time when profiling.  It's a pretty simple operation, but gets done a lot.  If the times and positions lists need to be evaluated to calculate p3, does the evaluation of those lists count towards the...
[20:13:59] <sm> tuples always cause thunk leaks so should not be used as an accumulator
[20:14:09] <shane> You know the way the `time` library has `UTCTime` and `NominalDiffTime`, where `NominalDiffTime` is a number, and can be added to and subtracted from `UTCTime`, and `UTCTime` can be subtracted from itself to produce a `NominalDiffTime`, but `UTCTime` is not itself a number? And there's a related thing going on with the `.+^`, `.-^` and `.-.` operators from `Linear.Affine`. What I want to ask is, is there a 
[20:14:15] <shane> general name for this type of thing in abstract algebra, and are there any Haskell packages that try to implement it?
[20:14:15] <Henson> sm: calculation time of p3, or does it get attributed to the functions that went into producing the times and positions lists?
[20:14:31] <c_wraith> You can use a tuple in an accumulator as long as your function producing them seqs the elements first.
[20:14:54] <c_wraith> Strictness isn't about the data structures you use, it's about when things get evaluated.
[20:15:19] <sm> c_wraith: if we could at least write them down such that a human could evaluate/check them relatively easily, that would still be a big help
[20:15:42] *** Joins: alx741 (~alx741@157.100.93.160)
[20:15:55] <c_wraith> remember that a strict pair type doesn't do anything you couldn't do by writing seq twice by hand. :)
[20:16:02] *** Quits: xff0x (~xff0x@2001:1a81:5209:df00:5e7c:4acd:2a77:4d24) (Ping timeout: 240 seconds)
[20:16:31] <Henson> c_wraith: how do I seq the elements first?  just seq the list, or figure out how to deepseq them?
[20:16:52] <c_wraith> deepseq is more of a debugging tool.  It'll never show up in optimized code.
[20:16:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:16:59] *** Joins: xff0x (~xff0x@2001:1a81:5209:df00:b3fa:3a32:fd8e:f809)
[20:17:00] <c_wraith> It's not efficient at all
[20:17:16] *** Quits: pfurla (~pfurla@2804:d41:4331:4800:2caa:3e9f:9236:25d4) (Quit: gone to sleep. ZZZzzz‚Ä¶)
[20:17:59] <Henson> also, the performance problems of laziness comes up all the time for me in my reading, and the difficulty in reasoning about performance and space issues.  Was it a good idea to make Haskell a lazy language, given that so few others are?  Not to derail my own conversation here, but what are the benefits of laziness in practice, as I mostly hear about the downsides of it.
[20:17:59] <sm> Henson: I don't know the answer to your profiling q, seeing the profile and code might help. I have found profiles hard and sometimes misleading to read
[20:18:01] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:18:12] <c_wraith> Henson: that line you're talking about doesn't look like a problem.  I mean, you probably want to use zipWith instead of zip + map, but that's for clarity rather than performance
[20:18:51] <c_wraith> Henson: if that line is being credited with a performance problem, it's in the generation of one of those lists.  not that line itself
[20:19:07] <c_wraith> and laziness is wonderful.
[20:19:19] <c_wraith> It lets you write code that's actually efficiently composable
[20:19:40] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[20:19:45] <sm> Henson: it's generally considered worthwhile for forcing purity and supporting greater abstraction, although people always wonder what a "strict haskell" would be like
[20:20:19] <Henson> c_wraith: do you have any suggestions as to avenues and techniques I could investigate to try to get the lists to be evaluated eagerly?  Should I target the sites where they are produced for eager evaluation, or where they're consumed, or (hopefully not) somewhere in-between?
[20:20:24] <sm> it's also not as much of a problem in practice as it may sound - for most people
[20:20:35] <maerwald> Henson: forcing evaluation of 'a' in quadFit seems to have the same effect
[20:20:55] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[20:21:00] * Henson tests
[20:21:42] <c_wraith> Henson: that question is...  not going to lead you anywhere useful. If you're producing lists, you don't want to do it strictly. What you want to be doing is making sure that consuming the spine of the list doesn't generate nested thunks.
[20:21:47] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[20:23:08] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 250 seconds)
[20:23:12] <maerwald> sm: until it is and then you're in big trouble 
[20:23:15] <maerwald> :)
[20:23:18] <c_wraith> Henson: a lot of the trouble people have is that not realizing that producing lazy data structures must be done with as much care as consuming them.
[20:23:20] <Henson> c_wraith: can you explain that more?  I know what thunks are, but don't really understand what you're suggesting or how I would make sure I'm not doing that.
[20:23:34] *** Quits: MajorBiscuit (~MajorBisc@c-001-025-054.client.tudelft.eduvpn.nl) (Ping timeout: 268 seconds)
[20:23:57] *** Joins: zebrag (~chris@user/zebrag)
[20:23:59] <sm> we should have a reading list for this topic
[20:24:02] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[20:24:09] <sm> @where laziness
[20:24:09] <lambdabot> I know nothing about laziness.
[20:24:19] <maerwald> sm: it's a constantly moving target
[20:24:32] <c_wraith> maerwald: it really isn't.  If you get it right, you've got it right.
[20:24:42] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:24:44] <maerwald> c_wraith: unless inlining is involved
[20:24:55] <c_wraith> things only move if you get it wrong and depend on the compiler to rescue you
[20:25:27] <maerwald> there's no right or wrong in terms of optimization tricks for the inliner
[20:26:39] <Henson> maerwald: how did you force it?  I put a bang on a in quadFit and it made it about twice as fast, but the bang on pVal makes it 70 times faster.
[20:27:25] <maerwald> Henson: in seq a (accA + a, accB + b, accC + c)
[20:27:49] <Henson> c_wraith: I'm also interested in learning more about how to carefully produce and consume lazy data structures
[20:27:59] <maerwald> I also played a little with using a lambda as argument to foldl'
[20:28:09] <maerwald> which also seemed to make some difference in some circumstance
[20:28:27] *** Joins: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net)
[20:29:30] <Henson> maerwald: interesting!  seq'ing any of a,b,c or pVal (at least) cause the performance increase
[20:29:44] *** Quits: vglfr (~vglfr@46.96.165.111) (Ping timeout: 268 seconds)
[20:30:41] *** Joins: whatif (~user@123.123.223.41)
[20:30:52] <Henson> maerwald: how is it that "seq a" makes a difference, but putting a bang on (!a,b,c) doesn't make a difference?  Don't they do the same thing?
[20:30:53] <whatif> why there's so many String in haskell?
[20:31:37] <whatif> Data.ByteString, Data.ByteString.Lazy.Internal.ByteString, [Word 8], Data.Text, Lazy blabla
[20:31:42] <razetime> https://mmhaskell.com/blog/2017/5/15/untangling-haskells-strings
[20:31:45] <whatif> what's wrong with string
[20:31:47] <c_wraith> Henson: it's a somewhat big topic, and I don't have anything prepared. The best I can do right now is say that I finally started understanding how to think about this after reading https://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html
[20:31:56] <maerwald> Henson: also check out this: https://paste.tomsmeding.com/P3xMdKX9
[20:31:59] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[20:32:15] <maerwald> there I force inside quadFit... but it only works if using the lambda-form above or so
[20:32:28] <geekosaur> whatif: everything? one string type does not actually cover all use cases, and most programmers do stupid things with them
[20:32:39] <whatif> I need Data.ByteString.Lazy.Internal.ByteString to write to file, there's no writeFile implement, only Data.ByteString has writeFile
[20:32:45] <ksqsf> whatif: String is a linked list of characters, which is unreasonable in practice
[20:32:57] <c_wraith> whatif: String has always been underspecified.  Some languages just let you ignore that.  Look at Rust if you want to see what being *really* careful about strings looks like
[20:33:17] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Ping timeout: 240 seconds)
[20:33:18] <c_wraith> ksqsf: String is fine when its semantics are correct.  But often they aren't.
[20:33:50] <geekosaur> https://hackage.haskell.org/package/bytestring-0.11.2.0/docs/Data-ByteString-Lazy.html#v:writeFile
[20:34:38] <whatif> geekosaur: what's the 'Internal' here mean?
[20:34:48] <c_wraith> nothing.
[20:34:49] *** Joins: alx741 (~alx741@157.100.93.160)
[20:34:52] <shane> If anyone was wondering, I found the answer to my question above: torsors
[20:34:52] <c_wraith> literally ignore it.
[20:35:03] <c_wraith> Internal means that the normal name wasn't imported
[20:35:04] <ksqsf> c_wraith: sure, if you only consider the semantics; but my point is that String is slow, and if you use String as a store format, it can take much RAM
[20:35:05] <whatif> c_wraith: then why people don't remove it?
[20:35:06] <geekosaur> that you didn't import Data.ByteString.Lazy so it hunted it down to its source, which is the core implementation in the Internal module
[20:35:28] <sm> @where+ spaceleaks https://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html
[20:35:28] <lambdabot> Good to know.
[20:35:31] <geekosaur> you almost never care. just import Data.ByteString.Lazy and get on with life
[20:35:37] *** Joins: vglfr (~vglfr@46.96.165.111)
[20:36:06] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[20:36:07] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[20:36:09] * sm wonders why is lambdabot so slow
[20:36:17] <geekosaur> as to why Strict vs. Lazy, Strict is faster but you probably don't want to suck a 10GB file into memeory to operate on it, so we have Lazy as well
[20:36:26] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Client Quit)
[20:36:31] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 268 seconds)
[20:36:57] <maerwald> lazy bytestring is poor man's streaming
[20:37:30] *** Joins: econo (uid147250@user/econo)
[20:38:08] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:38:49] *** Joins: fendor (~fendor@178.115.55.2.wireless.dyn.drei.com)
[20:39:23] <Henson> c_wraith: thank you for the help and suggestions on the literature.  I'll take a look at that
[20:39:52] <Henson> maerwald: thanks for tinkering around with the code and suggesting improvments.  I'll see what I'm able to do with the production code.
[20:40:05] <whatif> how I can turn Data.ByteString.Lazy.Internal.String to String?
[20:40:20] <ksqsf> unpack
[20:40:29] <whatif> ksqsf: unpack get [Word8]
[20:40:32] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[20:40:38] <whatif> and what the heck Word8 is?
[20:40:50] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[20:41:12] <ksqsf> @hoogle Word8 -> Char
[20:41:13] <lambdabot> Data.ByteString.Internal w2c :: Word8 -> Char
[20:41:13] <lambdabot> Data.Text.Internal.Unsafe.Char unsafeChr8 :: Word8 -> Char
[20:41:13] <lambdabot> Data.Bits.Utils w82c :: Word8 -> Char
[20:41:35] <maerwald> uhm
[20:42:09] <maerwald> that might not be what you want
[20:42:20] <ksqsf> actually Word8-version ByteString is not intended to be directly used as String
[20:42:24] <whatif> there's no w2c in Data.ByteString.Lazy
[20:42:34] <maerwald> whatif: what's the data? UTF-8?
[20:42:37] <geekosaur> no, it's an internal function
[20:42:38] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:42:45] <ksqsf> you probably want decodeUtf8, or Char8-version ByteString if you only care about ASCII
[20:43:03] <whatif> ksqsf: then why unpack Data.ByteString.Lazy get Word8
[20:43:29] <ksqsf> whatif: it's a byte array.
[20:43:37] <maerwald> https://hackage.haskell.org/package/text-2.0/docs/Data-Text-Lazy-Encoding.html#v:decodeUtf8With
[20:43:58] <maerwald> then T.unpack
[20:44:03] <whatif> ksqsf: does Data.ByteString.Encoding come with ghc?
[20:44:37] <whatif> @hoogle ByteString -> String
[20:44:37] <lambdabot> Control.Lens.Internal.ByteString unpackStrict8 :: ByteString -> String
[20:44:37] <lambdabot> Control.Lens.Internal.ByteString unpackLazy8 :: ByteString -> String
[20:44:37] <lambdabot> Data.ByteString.Lazy.UTF8 toString :: ByteString -> String
[20:44:43] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz‚Ä¶)
[20:48:33] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:48:42] *** Quits: razetime (~quassel@49.207.203.87) (Ping timeout: 250 seconds)
[20:49:02] <whatif> Data.ByteString.Lazy.UTF8.toString can't work on Data.ByteString.Internal.ByteString, what?
[20:49:13] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[20:49:26] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:81c9:f67f:1443:f972)
[20:49:43] <whatif> is there twenty kinds of String in Haskell?
[20:50:10] <monochrom> 2
[20:50:19] <maerwald> whatif: yes
[20:50:21] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:50:22] <monochrom> String and Text.
[20:50:36] <whatif> monochrom: and Char and Word8
[20:50:39] <monochrom> That's right, ByteString doesn't count.
[20:50:49] <whatif> and a bunch of Lazy or Internel
[20:50:54] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:50:58] <whatif> monochrom: what a pain in the ass
[20:51:12] <maerwald> whatif: https://mmhaskell.com/blog/2017/5/15/untangling-haskells-strings
[20:51:25] <monochrom> Unless your "string" means the C kind of string, i.e., bytes.  In that case, 1, ByteString.  That's right, String and Text don't count.
[20:51:56] <polyphem_> whatif: https://gist.github.com/dino-/28b09c465c756c44b2c91d777408e166
[20:51:56] <ksqsf> string, text (strict + lazy), bytestring (strict + lazy) * (char8 + word8)
[20:52:08] <ksqsf> only 7 you need to know ;)
[20:52:31] <whatif> why the Lazy thing can't work on Internal thing?
[20:52:36] <whatif> or the verse
[20:52:52] <ksqsf> you're using a strict bytestring
[20:53:31] <ksqsf> @hoogle fromStrict
[20:53:32] <lambdabot> Data.ByteString.Lazy fromStrict :: ByteString -> ByteString
[20:53:32] <lambdabot> Data.ByteString.Lazy.Char8 fromStrict :: ByteString -> ByteString
[20:53:32] <lambdabot> Data.Text.Lazy fromStrict :: Text -> Text
[20:54:12] *** polyphem_ is now known as polyphem
[20:54:13] <maerwald> whatif: they're different data types
[20:54:25] <maerwald> for performance reasons
[20:54:49] <maerwald> so yes, it's a mess
[20:54:50] *** Joins: alx741 (~alx741@157.100.93.160)
[20:55:01] <whatif> how I turn a Internal.ByteString to a String?
[20:55:13] <whatif> I need a FilePath
[20:55:29] <maerwald> whatif: on what platform?
[20:55:31] <whatif> scotty give me a Internal.ByteString
[20:55:37] <whatif> maerwald scotty
[20:55:44] <whatif> maerwald debian
[20:55:45] <monochrom> Yeah, that's actually platform-dependent territory.
[20:55:45] <slack1256> Is this correct syntax for setting SCC and get info at call sites? https://pastebin.com/AWiRncm5
[20:56:02] <maerwald> whatif: where did scotty obtain that filepath from?
[20:56:21] <whatif> maerwald FileInfo
[20:57:15] <maerwald> whatif: on unix, a filepath can have arbitrary encoding
[20:57:32] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[20:57:37] <maerwald> most people assume utf-8
[20:58:43] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:58:43] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:59:44] <whatif> maerwald found it, Data.ByteString.Char8.unpack 
[20:59:52] <maerwald> whatif: that will truncate
[21:01:38] <monochrom> It's only good for ASCII.
[21:01:59] <whatif> what's the proper way, assume utf-8
[21:02:14] <maerwald> whatif: that depends where the filepath is from
[21:02:30] <whatif> maerwald debian linux
[21:02:37] *** Joins: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[21:02:48] <maerwald> I mean... can you know what's the encoding... is it on your machine? Is it sent to you?
[21:02:55] <whatif> utf-8
[21:03:00] <monochrom> A lot of people assume ASCII to head-in-sand so they don't have to answer those tough questions.
[21:03:19] <ksqsf> https://paste.tomsmeding.com/ArEYKick if it's utf8, using 'text' is pretty easy
[21:03:32] <maerwald> whatif: there's https://hackage.haskell.org/package/base-4.16.0.0/docs/GHC-IO-Encoding.html#v:getFileSystemEncoding
[21:06:13] <maerwald> whatif: https://github.com/hasufell/abstract-filepath/blob/a913d715d8971224b45ef22a7b9ceaa263a77601/abstract-filepath/lib/AFP/OsString/Common.hs#L161-L162
[21:06:24] <maerwald> that's an example of using current filesystem encoding to turn bytestring into String
[21:07:13] *** Joins: deadmarshal (~deadmarsh@95.38.228.70)
[21:08:09] <sclv> shane those things are usually called torsors? you can also just view it as an affine space i guess
[21:09:06] *** Quits: mbuf (~Shakthi@136.185.86.67) (Quit: Leaving)
[21:10:00] *** Joins: hippoid (~hippoid@184.105.6.88)
[21:10:52] <slack1256> It seems that call-site SCC do not appear when reporting exceptions via +RTS -xc . Does somebody know how to track who threw an exceptions?
[21:11:48] *** Joins: Akiva (~Akiva@user/Akiva)
[21:12:36] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[21:12:36] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[21:12:36] *** Joins: turlando (~turlando@user/turlando)
[21:13:52] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[21:13:53] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:14:52] *** Joins: alx741 (~alx741@157.100.93.160)
[21:16:28] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:17:48] <slack1256> Nevermind, they seem to do. The exception was not thrown from where I excepted.
[21:18:27] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Ping timeout: 268 seconds)
[21:23:19] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:23:39] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:23:51] *** Joins: alp (~alp@user/alp)
[21:23:58] <shane> sclv: I figured it out eventually, but I appreciate you getting back to me!
[21:26:28] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[21:27:48] *** Quits: whatif (~user@123.123.223.41) (Quit: ERC (IRC client for Emacs 26.3))
[21:28:20] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[21:31:32] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[21:32:51] *** Joins: alx741 (~alx741@157.100.93.160)
[21:33:13] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[21:33:26] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[21:35:02] *** Quits: jkaye (~jkaye@2601:281:200:1958:8e74:ef22:c471:c2e) (Ping timeout: 240 seconds)
[21:35:46] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz‚Ä¶)
[21:35:57] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[21:36:18] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:38:14] *** Joins: fef (~thedawn@user/thedawn)
[21:41:26] <zzz> why should we avoid GADTs if we don't need them?
[21:43:59] <geekosaur> did something tell you that?
[21:44:25] <geekosaur> I mean, there are those who prefer GADT syntax even for non-GADTs
[21:44:33] <slack1256> Anybody has used the `mold` linker with ghc?
[21:44:38] <geekosaur> (and GADTSyntax is a language option)
[21:44:52] <geekosaur> slack1256, it's been tried in #ghc, ask there but they had problems with it
[21:46:15] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[21:46:55] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:47:54] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[21:49:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:50:01] *** Joins: ksqsf (~user@134.209.106.31)
[21:50:37] <geekosaur> zzz, beyond that, there are those who believe existentials (the main purpose of GADTs) are often an anti-pattern.
[21:50:59] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 256 seconds)
[21:51:28] <geekosaur> you should probably read the arguments in both directions and make your own decision; the fact that they are still around and used suggests it's not a clear-cut "this is bad"
[21:51:31] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:51:42] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[21:52:31] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:52:52] *** Joins: alx741 (~alx741@157.100.93.160)
[21:53:00] *** Joins: ub (~Thunderbi@141.98.252.232)
[21:53:12] <zzz> oh i remember someone saying we should avoid it but never understood why. thanks
[21:53:15] *** Quits: ubert (~Thunderbi@141.98.252.232) (Ping timeout: 256 seconds)
[21:53:15] *** ub is now known as ubert
[21:53:24] <EvanR> GADTs are awesome
[21:53:29] <EvanR> totally rad, even
[21:54:32] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[21:54:42] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[21:57:52] *** Parts: hippoid (~hippoid@184.105.6.88) ()
[21:57:56] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[21:58:43] *** Joins: ksqsf (~user@134.209.106.31)
[22:00:23] <zzz> agree
[22:00:55] <zzz> i even prefer GADT syntax for non-GADTs
[22:01:06] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[22:01:06] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:02:31] <zzz> and we can now use it in newtype decls, nice
[22:04:05] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[22:05:20] <EvanR> really
[22:05:32] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[22:05:32] <EvanR> does that mean you can have existential newtype
[22:06:47] *** Joins: ksqsf (~user@134.209.106.31)
[22:08:32] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 240 seconds)
[22:09:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:81c9:f67f:1443:f972) (Remote host closed the connection)
[22:10:56] *** Quits: gentauro (~gentauro@user/gentauro) (Quit: leaving)
[22:10:57] *** Joins: wombat875 (~neilfulwi@pool-72-89-24-154.nycmny.fios.verizon.net)
[22:11:11] *** Joins: gentauro (~gentauro@user/gentauro)
[22:11:26] *** Quits: gentauro (~gentauro@user/gentauro) (Client Quit)
[22:12:36] *** Joins: gentauro (~gentauro@user/gentauro)
[22:15:08] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz‚Ä¶)
[22:15:24] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[22:15:45] *** Joins: ksqsf (~user@134.209.106.31)
[22:17:44] <geekosaur> existential newtype seems unlikely since it'd have at least two fields (the value and its dictionary)?
[22:17:54] *** Joins: alx741 (~alx741@157.100.93.160)
[22:18:16] <EvanR> that assumes you put a constraint
[22:18:34] <EvanR> which I guess is often implied by using existential types
[22:18:53] <EvanR> and I guess that is the anti-pattern you were talking about
[22:18:59] <geekosaur> they're kinda useless without?
[22:19:45] <geekosaur> "great, I have a value but no clue what I can do with it"
[22:20:19] <EvanR> in tricky code where internally you have external information on how to unwrap the unknown value, and you just want something like old GHC.Any
[22:20:30] <EvanR> and you don't want an extra wrapper
[22:20:37] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[22:20:47] <EvanR> er, internally, you have tricky extra information
[22:20:47] <awpr> contrived as this is, it demonstrates why that's not completely true: `data Thing where Thing :: Dict (Show a) -> a -> Thing`
[22:21:14] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:21:22] <EvanR> yes geekosaur is probably thinking, either a constraint or a paired thing that uses a
[22:21:58] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:22:05] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[22:22:27] <awpr> yeah, you can obtain "things to do with" the existentials by their relation to other fields, like `data Generator a where Generator :: b -> (b -> (a, b)) -> Generator a`
[22:22:33] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:22:52] <EvanR> which is besides the point of newtypes, which have only 1 field
[22:23:09] *** jinsun__ is now known as jinsun
[22:23:20] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[22:23:46] <awpr> could have a newtype over a tuple, or a newtype over any type that mentions the existential twice
[22:24:32] <EvanR> if they wrapped type has fields, then it could have used its own existential
[22:24:36] <monochrom> geekosaur: As the user's guide says, as you observed, a useful existential type is not going to be a semantic newtype; a syntactic newtype (that the compiler secretly s/newtype/data/ under the hood) is no problem but the GHC devs are too lazy to do it until they hear enough requests.
[22:25:07] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[22:25:25] <maerwald> awpr: you don't need GADT syntax for that though
[22:25:25] <awpr> but even without other fields, you can get interesting things: `data Colimit f where Colimit :: f a -> Colimit f`, s.t. `Colimit (Int,)` is isomorphic to `Int`
[22:26:09] <EvanR> ok so that looks like a good time for a newtype
[22:26:18] <EvanR> but it's illegal
[22:26:36] <maerwald> that just makes it more exciting
[22:27:19] <awpr> maerwald: hmm?  you mean the Generator example being expressible with just ExistentialTypes?  needing GADT syntax wasn't the point, it was doing something useful with unconstrained existentials
[22:27:58] <monochrom> I had to decode the GADT syntax to recognize the existential type...
[22:28:47] <maerwald> awpr: ExistentialQuantification
[22:28:51] <monochrom> I recognize that there is now a school of thought of using only GADT syntax to write existential types.
[22:30:12] <EvanR> it seems like since you can use GADT to write newtypes, there's gotta be special case there to see if you used existentials and tell you no xD
[22:30:26] <EvanR> why not just make it work
[22:33:03] *** Joins: val-host (~val-host@2a02:2f0f:9108:b00:6891:37fc:a7bd:3738)
[22:33:23] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:33:40] *** Joins: ksqsf (~user@134.209.106.31)
[22:35:09] <awpr> oh right, I forgot the name since I never end up enabling it explicitly
[22:36:12] *** Quits: val-host (~val-host@2a02:2f0f:9108:b00:6891:37fc:a7bd:3738) (Client Quit)
[22:36:32] *** Quits: deadmarshal (~deadmarsh@95.38.228.70) (Ping timeout: 240 seconds)
[22:37:39] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz‚Ä¶)
[22:37:55] *** Joins: alx741 (~alx741@157.100.93.160)
[22:38:35] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[22:40:35] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:42:47] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[22:45:24] *** Quits: michalz (~michalz@185.246.204.122) (Ping timeout: 268 seconds)
[22:47:03] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[22:48:55] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:51:03] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[22:51:26] *** Joins: ksqsf (~user@134.209.106.31)
[22:52:45] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:edf9:3833:cff9:92b3) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[22:56:30] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[22:58:52] *** Joins: alx741 (~alx741@157.100.93.160)
[22:59:49] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz‚Ä¶)
[23:02:58] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:03:26] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[23:03:26] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[23:03:26] *** finn_elija is now known as FinnElija
[23:04:21] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:06:32] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[23:07:40] *** Joins: ksqsf (~user@134.209.106.31)
[23:09:05] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:edf9:3833:cff9:92b3)
[23:09:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:81c9:f67f:1443:f972)
[23:09:59] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[23:10:30] <EvanR> are instances based on Generics inherently less efficient than handcoded ones for a given type
[23:10:34] *** Joins: eron (~eron@2804:431:c7c2:3848:71e8:6fbf:96e2:3117)
[23:10:45] <EvanR> or is there some GHC magic
[23:11:01] <awpr> not inherently less efficient, but sometimes they are
[23:11:41] <awpr> the hope is that GHC will be able to inline from/to, do some optimization, and annihilate them against each other so that the result is the same as if it never went through generics
[23:11:55] <EvanR> oh, nice
[23:11:59] <monochrom> GHC does not have magic. However, efficiency depends on the actual class and methods.
[23:12:03] <[exa]> there are "pretty good chances" that it inlines to a form that is more less equivalent to what you'd get by writing the instances by hand
[23:12:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:81c9:f67f:1443:f972) (Remote host closed the connection)
[23:12:28] <awpr> but if the particular instance has something that prevents that from working, or if the type is big enough that GHC doesn't want to inline it, then it's likely to become a disaster
[23:12:32] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[23:12:32] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:81c9:f67f:1443:f972)
[23:12:53] <monochrom> I don't see myself handwriting a more efficient Show than the usual Generics solution, for example.
[23:13:02] *** Joins: ksqsf (~user@134.209.106.31)
[23:13:09] <monochrom> It's the same structural recursion.
[23:13:26] <awpr> (disaster: ) because actually executing to/from at runtime involves allocating/scrutinizing a _ton_ of data constructors
[23:13:28] <EvanR> yes but this business of first converting to a generic rep, then coming back
[23:13:39] <EvanR> at each element of the structure
[23:13:58] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (Quit: leaving)
[23:13:58] <EvanR> e.g. if it's a 4 field record, it'll become a (a :*: b) :*: (c :*: d)
[23:14:04] <monochrom> Ah, OK yeah.
[23:14:36] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[23:14:36] <awpr> `case (case x of Left a -> L1 a; Right b -> R1 b) of L1 a -> showString "Left" ... ; R1 b -> showString "Right" ...`
[23:15:13] <awpr> this can be optimized easily enough to `case x of Left a -> showString "Left" ... ; Right b -> showString "Right" ...`
[23:15:13] *** Joins: Hildegun1t (~luc@80.248.12.109.rev.sfr.net)
[23:15:38] <monochrom> Damn, the world is more magical than I thought.
[23:15:42] *** Quits: Hildegun1t (~luc@80.248.12.109.rev.sfr.net) (Client Quit)
[23:16:00] <EvanR> so from-tos can be fused?
[23:16:23] <awpr> effectively yeah, in good cases they get inlined and eventually vanish
[23:16:29] <EvanR> that is amazing
[23:17:32] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[23:18:14] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:18:20] <awpr> unfortunately it's a bit brittle in that there's some cutoff point where GHC stops thinking it's worth it to inline from/to, compile times skyrocket, runtime performance gets slow, and there's not really anything you can do about it as a library author
[23:18:30] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:19:02] <awpr> cutoff point in terms of the size (number of constructors/fields) of the type whose Generic instance is being used
[23:19:02] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Ping timeout: 240 seconds)
[23:19:09] <EvanR> as a user though, you can write an offending instance by hand
[23:19:30] <awpr> yeah, that's true
[23:19:31] <EvanR> and remove deriving Generic
[23:19:48] *** Joins: alx741 (~alx741@157.100.93.160)
[23:20:05] <awpr> but then you have to notice that's happening, which is rarely obvious unless you're already looking at Core
[23:20:09] *** Quits: eron (~eron@2804:431:c7c2:3848:71e8:6fbf:96e2:3117) (Quit: Client closed)
[23:20:21] <EvanR> if no one notices it's slow, then it's fast!
[23:21:02] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 240 seconds)
[23:21:17] <awpr> alternatively if no one notices your Generic instance is slow due to inlining failure, then it's an ambient performance tax that just gets lumped into a vague cultural belief that Haskell is slow
[23:22:20] <monochrom> This is why I look at Core all the time.
[23:22:57] <monochrom> My ratio of looking at Core to looking at profiling graphs is 99:1.
[23:22:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:24:00] <EvanR> I don't even see Core anymore, just blonde, brunette, redhead
[23:24:37] <EvanR> (a reference to this really old movie The Matrix)
[23:24:58] <Rembane> EvanR: Good reference. Good movie.
[23:25:11] <sm> truthfully ? that's interesting then
[23:25:27] <sm> (monochrom)
[23:25:49] <awpr> profiling graph is just a hint about what Core to look at :)
[23:26:06] <EvanR> getting a core output and looking at it seems somewhat more ergonomic than profiling graph
[23:26:21] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 256 seconds)
[23:26:23] <EvanR> since it's text
[23:26:24] * sm resolves to read more core in 2022
[23:27:38] <sm> but which reveals relevant insights more l efficiently
[23:28:06] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[23:28:26] * sm doesn't get as far as charts, but does read textual profile output from time to time
[23:28:45] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[23:29:21] <monochrom> I am an extreme. But awpr is at the truth in the middle. A profiling graph can only tell you where to dig. It still doesn't dig for you.
[23:30:29] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:31:31] <sm> gtoolkit.com advocates "moldable development": casually whipping up just the custom tools and visualizations you need at any point. I want this
[23:32:39] *** Quits: ubert (~Thunderbi@141.98.252.232) (Quit: ubert)
[23:35:25] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:35:52] <EvanR> that's some ironman sh*t
[23:36:04] <EvanR> jarvis, show me something
[23:36:28] <sm> :)
[23:36:41] <monochrom> "I'm going to send you to the MIT student lab"
[23:36:46] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:07] <sm> could be a point of contact between the smalltalk and haskell worlds. (needs a haskell parser added)
[23:38:16] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[23:39:00] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[23:41:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:43:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:47:53] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[23:48:51] *** Joins: xkuru (~xkuru@user/xkuru)
[23:49:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:51:09] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[23:51:32] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[23:53:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[23:54:47] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[23:55:07] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:55:42] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[23:55:49] *** Joins: travv0 (sid293381@user/travv0)
