[00:02:14] <bookworm> chances are yes, depends on what you are doing
[00:02:19] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[00:05:47] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:11:24] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[00:19:51] *** Quits: v8IbXNTl (~v8IbXNTl@host-204-118-069-229.dhcp.fewpb.net) (Quit: v8IbXNTl)
[00:27:32] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[00:27:41] *** Quits: justGhost (~justache@user/justache) (Remote host closed the connection)
[00:28:53] *** Quits: khyr0n (~khyr0n@2806:2f0:9280:a0a9:c165:7d20:7221:91c2) (Remote host closed the connection)
[00:29:14] *** Joins: justGhost (~justache@user/justache)
[00:29:43] <b0nn> mikoto-chan: a one char string is immutable, a rune is an alias for int32, so if you are using the value for anything other than a string the answer is a yes
[00:31:43] *** Parts: Nigthknight (~Nigthknig@user/nigthknight) ()
[00:31:45] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[00:32:20] *** Joins: ugjka (~ugjka@ugjka.net)
[00:34:49] *** Joins: aiix (~quassel@h-158-174-19-126.A357.priv.bahnhof.se)
[00:46:49] *** Joins: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi)
[00:51:38] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:f8f2:a6ee:f8f:27a0) (Ping timeout: 260 seconds)
[00:52:08] *** Quits: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi) (Ping timeout: 268 seconds)
[00:54:38] *** Joins: jjonah (~jjonah@p200300d5d7103100dea632fffeb3342f.dip0.t-ipconnect.de)
[00:54:57] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 240 seconds)
[00:59:13] *** Joins: bancroft (~bancroft@user/bancroft)
[01:00:05] *** Joins: boof (~rickybob@gateway/vpn/pia/rickybob)
[01:00:50] <bancroft> maybe someone can help me? I'm trying to write a Mach-O 64-bit bundle x86_64 binary using go. In C I can do ${CC} -bundle -o test.bundle bundle.c but after reading go help build I can't find anything similar
[01:00:57] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:03:01] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:08:32] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[01:09:46] *** Quits: jsanford (~jsanford@user/jsanford) (Remote host closed the connection)
[01:12:01] *** Quits: jjonah (~jjonah@p200300d5d7103100dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:13:04] *** Joins: jsanford (~jsanford@user/jsanford)
[01:13:25] *** Joins: jjonah (~jjonah@p200300d5d7103100dea632fffeb3342f.dip0.t-ipconnect.de)
[01:14:46] *** Joins: walterwhip (~www@user/walterwhip)
[01:15:36] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[01:20:12] *** Quits: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de) (Quit: The Lounge - https://thelounge.chat)
[01:20:30] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[01:23:50] *** Joins: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de)
[01:23:50] *** Joins: bluedust (~bluedust@185.248.85.32)
[01:29:24] *** Quits: bluedust (~bluedust@185.248.85.32) (Ping timeout: 256 seconds)
[01:34:30] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[01:36:43] <bancroft> seems like it's not supported
[01:38:28] *** Parts: [Coke] (~coke@172.58.235.132) ()
[01:42:07] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[01:45:01] *** Joins: R2robot (~R2robot@user/r2robot)
[01:59:19] *** Joins: justanewb (~justanewb@p200300de67394d00548e4a99d99ba02b.dip0.t-ipconnect.de)
[02:02:53] *** Joins: Techcable (~Techcable@168.235.93.147)
[02:05:54] *** Joins: leonarth (~leonarth@user/leonarth)
[02:08:30] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 256 seconds)
[02:12:25] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[02:12:59] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[02:17:25] *** Quits: flughafen (~flughafen@p5796945c.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[02:20:19] <justanewb> If I want to loop over a file byte by byte (or rune by rune) using a simple bufio.Reader and no Scanner: Is it possible to do so without the need of a `break` inside the for loop as I did in this example https://go.dev/play/p/6kckFwYx7FK and using the for loops condition instead?
[02:23:24] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 268 seconds)
[02:24:46] <fizzie> Not really. I mean, you can use a wrapper function to do something like https://go.dev/play/p/2Wjg09jl2f_1 instead if you prefer.
[02:25:59] <fizzie> Or you can use the three-element `for` statement, but that involves repeating the ReadRune method call, like so: https://go.dev/play/p/d-9fCXLoHXT
[02:28:34] <b0nn> justanewb: https://go.dev/play/p/DECMyMvuqsv
[02:28:56] <b0nn> although mine has the disadvanatage that c will be printed if an error is raised
[02:30:02] <b0nn> hmm I always forget with Go's "while" loops if the vondition specified is when to fail, or when to continue (you might have to experiement)
[02:30:44] <foobaz> kind of ugly, but satisfies the requirement: https://go.dev/play/p/RzTkwLWMSnI
[02:30:46] <fizzie> I kind of wish there was a two-element form of the for statement that'd make `for x, y, z := f(); p(x) { ... }` the equivalent of `for { x, y, z := f(); if !p(x) { break } ... }`. But there isn't. It's just the one or the three. Oh well, the one with an unconditional `for { ... }` and a break isn't that bad.
[02:30:59] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[02:31:23] <fizzie> foobaz: Except it runs fmt.Println(c) once with rune(0).
[02:31:45] <fizzie> (Before the first ReadRune() call.)
[02:31:54] <foobaz> oh whoops
[02:31:56] <foobaz> how about https://go.dev/play/p/d-9fCXLoHXT
[02:32:42] <fizzie> That's fine, if you don't mind repeating the ReadRune call. (Was my second link.)
[02:33:23] *** Quits: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de) (Quit: Ping timeout (120 seconds))
[02:33:24] * b0nn double checks - for condition to stop {} is correct
[02:33:34] *** Joins: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de)
[02:34:01] <b0nn> You could double check err inside the loop, if err == nil {print stuff} if that's your wont
[02:34:54] <justanewb> Ah good inspiration! Thanks for the examples :)
[02:35:34] *** Joins: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi)
[02:38:24] *** Joins: CoolerX (~CoolerX@user/coolerx)
[02:40:40] *** Quits: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi) (Ping timeout: 268 seconds)
[02:41:56] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:49:23] *** Quits: scjosh (~scjosh@206.189.79.69) (Quit: The Lounge - https://thelounge.chat)
[02:50:02] *** Joins: scjosh (~scjosh@206.189.79.69)
[02:50:27] *** Quits: jjonah (~jjonah@p200300d5d7103100dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:53:50] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:55:39] <senoraraton> So if I try and call DbInit from main.go it tells me DbInit is undefined -> https://github.com/senorgato/portfolio
[02:56:02] <senoraraton> Earlier it was said that it treats the function decleration as if its inline code, why doesn't this work?
[02:58:15] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[02:58:16] <fizzie> Are you by chance doing `go run main.go` or something.
[02:58:48] <senoraraton> Yes.
[02:59:10] <fizzie> Yeah, don't do that. Listing .go files means "make a virtual package out of these, and *only* these files, and run that".
[02:59:17] <fizzie> `go run .` instead.
[02:59:25] <fizzie> (Or `go build .` and run the resulting binary.)
[03:00:14] <fizzie> See `go help packages`: "As a special case, if the package list is a list of .go files from a single directory, the command is applied to a single synthesized package made up of exactly those files -- ignoring any other files in the directory."
[03:00:46] <fizzie> (Consequently you could also `go run main.go db.go`, but it's really better to just specify packages rather than files.)
[03:02:24] <senoraraton> Okay, now its telling me undefined for my err/db vars in db.go
[03:03:14] <senoraraton> Even though db gets defined in main.go, and I thought err was a language builtin.
[03:03:29] <fizzie> `err` is not a builtin, it's just a conventional name for an error variable.
[03:03:50] <fizzie> In your main.go, you do `db, err := ...` -- that's a (short) declaration for the two variables.
[03:04:10] <senoraraton> Sure, why isn't the recognized by db.go
[03:04:22] <fizzie> Because you use `=` rather than `:=`.
[03:04:27] <fizzie> Which is an assignment, not a declaration.
[03:04:55] <fizzie> `_, err = ...` requires there to be a variable called `err`, while `_, err := ...` declares a new variable called `err`.
[03:05:18] <senoraraton> Why does it need redeclared? Its declared in main.go on line 23
[03:05:18] <fizzie> As for `db`, that's a local variable in the main function so isn't visible outside that function.
[03:05:39] <fizzie> Because they're in scope only for the function they're declared in.
[03:05:56] <fizzie> Well, more specifically, the *block* they're declared in.
[03:06:42] <fizzie> Even if you move the `DbInit` function to main.go (but keep it a separate function), it'll give the same errors.
[03:07:26] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 256 seconds)
[03:07:47] <senoraraton> Okay, so I feel like what I want is to write a function that takes the db connection and then executes the second argument a string.  Then I have a generic that I can just pass it sql commands as a string, and it runs db(exec) on them.
[03:08:01] <senoraraton> And just returna  boolean
[03:08:01] *** Joins: pepee (~pepee@user/pepee)
[03:08:55] <senoraraton> I just end up in this weird world where I'm passing the DB connection around everywhere.  I never feel like thats the right way to do it.
[03:10:56] <ikke> That's where you need to think about your architecture
[03:11:11] <ikke> not every part of your application should talk with the database
[03:11:13] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[03:12:45] <senoraraton> So how do I know what type db is so that I can declare it as a function parameter
[03:12:54] <senoraraton> inb4: Go dig through the documentation.
[03:13:36] <foobaz> you could do fmt.Printf("%T", db)
[03:13:46] <fizzie> Some editors can show types as well.
[03:14:06] <fizzie> (Anything that integrates with gopls, probably.)
[03:14:55] <foobaz> i use vim with gopls but i don't know how to do that, i guess i need to dig through the documentation too :)
[03:15:25] *** Joins: gerow (~gerow@2600:1700:8660:c570:6892:71ea:e118:b301)
[03:15:28] <fizzie> One "problem" with doing it empirically with %T would be that you get the concrete type rather than the declared type of the variable.
[03:16:12] <foobaz> what if you try assigning it to an int, then the correct type should be in the error message :)
[03:16:34] <fizzie> Internet suggests maybe the `:GoInfo` command can tell you about the identifier under the cursor.
[03:18:36] <foobaz> or even better, write your function with the wrong type for db, and read the error message
[03:25:40] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[03:28:24] <foobaz> i usually make db a global variable (i know, considered harmful)
[03:28:49] <foobaz> when i need to access multiple db's, i use multiple global variables
[03:30:11] <senoraraton> cannot use db (type *sql.DB) as type int in argument to DbInit
[03:37:54] <b0nn> senoraraton: You are getting yourself caught up on scope and type understandings
[03:38:57] <b0nn> This might be helpful for understanding scope https://golangbyexample.com/scope-of-variable-go/
[03:39:57] <b0nn> And this is a good starter on Go's types https://go.dev/tour/basics/11
[03:40:59] <b0nn> Also WRT inb4 digging thru the documentation - these links are better at explaining what's going on than I am
[03:43:29] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[03:45:48] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[03:46:05] *** Joins: mickey8 (~user@user/mickey)
[03:48:37] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:50:52] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Read error: Connection reset by peer)
[03:52:50] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[03:54:24] <sdfgsdfg> hi
[03:54:33] <sdfgsdfg> goland costs too much
[03:54:41] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[03:54:55] *** Joins: mickey8 (~user@user/mickey)
[03:58:34] <b0nn> It is /priced/ too high for you? Then, oh I don't know, don't. use/buy. it.
[04:04:17] <bancroft> if I'm calling c code that returns a void* to a function, how can I call this void* in cgo? I tried var function interface{} and then calling function() but says I can't call a non-function
[04:05:27] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[04:06:05] *** Joins: yoonkn (~user@175.197.208.79)
[04:07:51] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:09:19] <b0nn> var function interface{} creates a variable of type interface{} with the name function, so 'calling' it would mean that you are trying to execute a function on a type of interface{}
[04:09:34] <b0nn> which, as you are finding out cannot be done
[04:09:57] <b0nn> (interface{} by definition has no known functions/methods
[04:10:18] <b0nn> This might be helpful https://jamesadam.me/2016/03/26/c-and-go-dealing-with-void-parameters-in-cgo/
[04:11:04] <b0nn> In it the guy basically says, you have to know what void is pointing at
[04:11:14] <b0nn> in your case, a function
[04:12:30] <b0nn> https://medium.com/@luc4.ruggieri/cgo-calling-a-c-function-pointer-from-go-dab4dd0fc9e2
[04:14:21] *** Joins: EtherNet (~ethernet@user/ethernet)
[04:16:39] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[04:23:12] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[04:41:57] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Ping timeout: 240 seconds)
[04:43:17] *** Quits: EtherNet (~ethernet@user/ethernet) (Quit: WeeChat 3.5-dev)
[04:44:50] *** Joins: Compy_ (~compy@user/compy)
[04:45:30] *** Joins: crashrep (~crashrep@user/crashrep)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:17] *** Quits: Compy (~compy@user/compy) (Ping timeout: 240 seconds)
[04:48:26] *** Compy_ is now known as Compy
[04:52:14] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[04:52:18] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[05:01:02] *** Quits: justanewb (~justanewb@p200300de67394d00548e4a99d99ba02b.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:09:01] *** Joins: justanewb (~justanewb@p200300de67394d00548e4a99d99ba02b.dip0.t-ipconnect.de)
[05:11:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[05:15:17] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[05:17:58] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[05:35:53] <bancroft> so basically I need to convert a unsafe.Pointer to a literal func because that's what C.myfunc gives me, the medium article does the oposite. I've tried to do the same forwards and backwards but still no success
[05:36:15] <bancroft> maybe it's not possible?
[05:37:46] <fizzie> https://pkg.go.dev/cmd/cgo "Calling C function pointers is currently not supported, however you can declare Go variables which hold C function pointers and pass them back and forth between Go and C. C code may call function pointers received from Go."
[05:37:51] <fizzie> There's an example right below that sentence.
[05:39:04] <fizzie> The short version is, have a short C wrapper that calls the function pointer with the correct arguments.
[05:39:33] <b0nn> Which is exactly what the medium post I linked to does
[05:40:38] <bancroft> what? that's not what I got from the article, i'll read it again
[05:41:14] <fizzie> (And if you need a value that's directly a callable over on the Go side, mix in a `func` literal that calls the C wrapper.)
[05:42:21] <b0nn> bancroft: I cannot copy/and paste (because medium are asshats) but look for "1. the C header: it imports"
[05:44:48] <bancroft> oh I confused the two articles, I read the james adam one and not the medium. My bad, I'll read that one
[05:45:11] <bancroft> thank you very much!
[05:50:25] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[05:52:34] *** Joins: jespada (~jespada@87.74.36.188)
[05:53:51] *** Joins: justanoob (~justanewb@p200300de674b9400d927868e55552f59.dip0.t-ipconnect.de)
[05:56:56] *** Quits: justanewb (~justanewb@p200300de67394d00548e4a99d99ba02b.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:57:12] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[05:58:58] *** Joins: califax (~califax@user/califx)
[06:04:48] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 256 seconds)
[06:05:41] *** Joins: bancroft (~bancroft@user/bancroft)
[06:05:57] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[06:06:13] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:09:25] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[06:10:53] *** Joins: Thedarkb-Work (~Thedarkb@62.232.253.82)
[06:11:46] *** Joins: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi)
[06:11:49] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 240 seconds)
[06:15:16] *** Quits: Thedarkb1-Work (~Thedarkb@62.232.253.82) (Ping timeout: 268 seconds)
[06:15:33] *** Joins: epony (epony@user/epony)
[06:16:11] *** Quits: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi) (Ping timeout: 245 seconds)
[06:17:44] *** Quits: mic4ael (~mic4ael@kolodzie-pc.cern.ch) (Ping timeout: 268 seconds)
[06:19:27] *** Joins: mic4ael (~mic4ael@kolodzie-pc.cern.ch)
[06:28:49] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Remote host closed the connection)
[06:29:07] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[06:34:12] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[06:35:37] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-178.dsl.bell.ca) (Ping timeout: 240 seconds)
[06:38:37] *** Quits: mic4ael (~mic4ael@kolodzie-pc.cern.ch) (Ping timeout: 240 seconds)
[06:39:07] *** Joins: chenqisu12 (~chenqisu1@183.217.200.249)
[06:40:46] *** Joins: mic4ael (~mic4ael@kolodzie-pc.cern.ch)
[06:41:38] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[06:43:20] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca)
[06:46:10] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:3db3:b1d2:4da9:9983) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:47:19] *** Quits: popey (~popey@ubuntu/member/popey) (Quit: Ping timeout (120 seconds))
[06:47:38] *** Joins: popey (~popey@ubuntu/member/popey)
[06:49:28] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[06:58:11] *** Quits: R2robot (~R2robot@user/r2robot) (Remote host closed the connection)
[06:59:46] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:01:03] *** Joins: R2robot (~R2robot@user/r2robot)
[07:09:32] *** Joins: bancroft (~bancroft@user/bancroft)
[07:11:53] *** Joins: noop14 (~noop14@l208005.ppp.asahi-net.or.jp)
[07:12:08] *** Quits: noop14 (~noop14@l208005.ppp.asahi-net.or.jp) (Client Quit)
[07:30:58] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 250 seconds)
[07:31:40] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (K-Lined)
[07:31:40] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (K-Lined)
[07:31:40] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (K-Lined)
[07:31:40] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (K-Lined)
[07:31:41] *** Quits: wielding (~wielding@user/wielding) (K-Lined)
[07:31:41] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (K-Lined)
[07:31:41] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (K-Lined)
[07:31:41] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (K-Lined)
[07:31:41] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (K-Lined)
[07:31:41] *** Quits: anonton (~anonton@user/anonton) (K-Lined)
[07:31:41] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (K-Lined)
[07:31:42] *** Quits: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69) (K-Lined)
[07:31:42] *** Quits: borring (~borring@2001:470:69fc:105::1:532b) (K-Lined)
[07:31:42] *** Quits: kadoban (~kadoban@user/kadoban) (K-Lined)
[07:31:42] *** Quits: mxehbqtuspx[m] (~mxehbqtus@2001:470:69fc:105::1:656f) (K-Lined)
[07:31:42] *** Quits: pagalingling[m] (~pagalingl@2001:470:69fc:105::1:60b9) (K-Lined)
[07:31:43] *** Quits: mambang[m] (~mambang@user/mambang) (K-Lined)
[07:31:43] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (K-Lined)
[07:31:43] *** Quits: pztrn (~pztrn@user/pztrn) (K-Lined)
[07:31:43] *** Quits: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7) (K-Lined)
[07:31:43] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (K-Lined)
[07:31:43] *** Quits: meain (~meain@2001:470:69fc:105::2db) (K-Lined)
[07:31:43] *** Quits: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831) (K-Lined)
[07:31:43] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (K-Lined)
[07:31:43] *** Quits: spectern[m] (~specternm@2001:470:69fc:105::1:6842) (K-Lined)
[07:31:43] *** Quits: psydroid (~psydroid@user/psydroid) (K-Lined)
[07:31:43] *** Quits: Dus10 (~dus10matr@2001:470:69fc:105::a7d) (K-Lined)
[07:31:43] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (K-Lined)
[07:36:40] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 268 seconds)
[07:47:16] *** Joins: holgersson (~quassel@user/holgersson)
[07:56:59] *** Joins: mambang[m] (~mambang@user/mambang)
[07:56:59] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[07:57:00] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[07:57:00] *** Joins: pztrn (~pztrn@user/pztrn)
[07:57:00] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[07:57:12] *** Joins: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69)
[07:57:12] *** Joins: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7)
[07:57:12] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[07:57:12] *** Joins: spectern[m] (~specternm@2001:470:69fc:105::1:6842)
[07:57:12] *** Joins: mxehbqtuspx[m] (~mxehbqtus@2001:470:69fc:105::1:656f)
[07:57:13] *** Joins: pagalingling[m] (~pagalingl@2001:470:69fc:105::1:60b9)
[07:57:13] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[07:57:13] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[07:57:14] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[07:57:14] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[07:57:14] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[07:57:14] *** Joins: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831)
[07:57:14] *** Joins: anonton (~anonton@user/anonton)
[07:57:14] *** Joins: wielding (~wielding@user/wielding)
[07:57:14] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[07:57:14] *** Joins: borring (~borring@2001:470:69fc:105::1:532b)
[07:59:13] <bq> What's the sanest way to have a mapping of some context/data to fields of a struct? I'm looking at batch exporting a bunch of struct fields to prometheus and started to map the field names to prometheus.Desc before I realised I can't reference fields by name
[07:59:16] *** Quits: chenqisu12 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[07:59:34] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[07:59:41] <bq> Should I just stop trying to be overly DRY and list out all of the fields and descs instead?
[07:59:44] *** Joins: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi)
[07:59:58] *** Joins: kadoban (~kadoban@user/kadoban)
[08:00:04] *** Joins: psydroid (~psydroid@user/psydroid)
[08:00:05] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[08:00:23] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[08:00:49] *** Joins: Dus10 (~dus10matr@2001:470:69fc:105::a7d)
[08:01:01] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[08:01:56] <bq> (I guess alternatively I could pass around map[string]interface{} instead of structs)
[08:04:31] *** Quits: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi) (Ping timeout: 250 seconds)
[08:07:26] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 245 seconds)
[08:09:19] *** Joins: holgersson (~quassel@user/holgersson)
[08:14:45] <bq> nvm looks like less DRY is standard here https://github.com/prometheus/node_exporter/blob/68a6c78c0d1fd7359fa15d30b607b322eb512a8d/collector/mountstats_linux.go
[08:16:13] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 250 seconds)
[08:17:13] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: Client limit exceeded: 20000)
[08:17:34] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Quit: Client limit exceeded: 20000)
[08:17:43] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (Quit: Client limit exceeded: 20000)
[08:18:38] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[08:18:43] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (Quit: Client limit exceeded: 20000)
[08:18:50] *** Quits: pztrn (~pztrn@user/pztrn) (Quit: Client limit exceeded: 20000)
[08:21:55] *** Quits: pagalingling[m] (~pagalingl@2001:470:69fc:105::1:60b9) (Quit: Client limit exceeded: 20000)
[08:21:55] *** Quits: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7) (Quit: Client limit exceeded: 20000)
[08:21:56] *** Quits: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69) (Quit: Client limit exceeded: 20000)
[08:21:56] *** Quits: spectern[m] (~specternm@2001:470:69fc:105::1:6842) (Quit: Client limit exceeded: 20000)
[08:21:56] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (Quit: Client limit exceeded: 20000)
[08:21:56] *** Quits: mxehbqtuspx[m] (~mxehbqtus@2001:470:69fc:105::1:656f) (Quit: Client limit exceeded: 20000)
[08:21:56] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: Client limit exceeded: 20000)
[08:22:03] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Quit: Client limit exceeded: 20000)
[08:22:04] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Quit: Client limit exceeded: 20000)
[08:22:04] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (Quit: Client limit exceeded: 20000)
[08:22:05] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (Quit: Client limit exceeded: 20000)
[08:22:05] *** Quits: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831) (Quit: Client limit exceeded: 20000)
[08:22:06] *** Quits: borring (~borring@2001:470:69fc:105::1:532b) (Quit: Client limit exceeded: 20000)
[08:22:06] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Client limit exceeded: 20000)
[08:22:06] *** Quits: anonton (~anonton@user/anonton) (Quit: Client limit exceeded: 20000)
[08:22:08] *** Quits: wielding (~wielding@user/wielding) (Quit: Client limit exceeded: 20000)
[08:28:32] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Client limit exceeded: 20000)
[08:28:33] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[08:29:20] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Client limit exceeded: 20000)
[08:29:30] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:29:49] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Client limit exceeded: 20000)
[08:29:54] *** Joins: Echoz (~chris@user/echoz)
[08:30:44] *** Joins: bpalmer (~user@user/bpalmer)
[08:36:41] *** Joins: holgersson (~quassel@user/holgersson)
[08:47:34] *** Quits: LtHummus_ (~lthummus@97-126-121-3.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:49:48] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[09:03:32] *** Joins: locrian9 (~mike@4.71.132.228)
[09:05:14] *** Joins: jpw (~jpw@user/jpw)
[09:10:33] *** Joins: bancroft (~bancroft@user/bancroft)
[09:12:58] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[09:13:50] *** Quits: justanoob (~justanewb@p200300de674b9400d927868e55552f59.dip0.t-ipconnect.de) (Quit: Leaving)
[09:18:27] *** Joins: Everything (~Everythin@37.115.210.35)
[09:30:59] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 250 seconds)
[09:39:07] *** Joins: fef (~thedawn@user/thedawn)
[09:47:08] *** Quits: locrian9 (~mike@4.71.132.228) (Quit: leaving)
[09:47:51] *** Joins: locrian9 (~mike@cpe-104-173-20-162.socal.res.rr.com)
[09:48:06] *** Joins: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi)
[09:49:13] *** Quits: locrian9 (~mike@cpe-104-173-20-162.socal.res.rr.com) (Client Quit)
[09:52:25] *** Quits: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi) (Ping timeout: 250 seconds)
[09:59:32] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[10:03:56] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[10:05:28] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[10:05:41] *** Joins: jespada (~jespada@87.74.36.188)
[10:09:06] *** Joins: leonarth (~leonarth@user/leonarth)
[10:11:54] *** Joins: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi)
[10:13:09] *** Joins: Atque (~Atque@user/atque)
[10:16:15] *** Quits: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi) (Ping timeout: 250 seconds)
[10:16:58] *** Joins: locrian9 (~mike@4.71.132.228)
[10:17:21] *** Quits: locrian9 (~mike@4.71.132.228) (Client Quit)
[10:29:55] *** Joins: bluedust (~bluedust@185.248.85.47)
[10:38:23] *** Quits: Compy (~compy@user/compy) (Remote host closed the connection)
[10:42:29] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (Quit: Client limit exceeded: 20000)
[10:51:17] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[10:51:17] *** Joins: flughafen (~flughafen@p5796945c.dip0.t-ipconnect.de)
[10:55:33] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:56:12] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[11:05:09] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:17:02] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[11:21:25] *** Joins: Atque (~Atque@user/atque)
[11:24:20] *** Joins: chenqisu12 (~chenqisu1@183.217.200.249)
[11:33:51] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[11:35:43] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Client Quit)
[11:37:13] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[11:38:31] *** Joins: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi)
[11:39:20] *** Joins: bluedust_ (~bluedust@103.161.144.140)
[11:40:01] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[11:40:06] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[11:42:17] *** Quits: bluedust (~bluedust@185.248.85.47) (Ping timeout: 250 seconds)
[11:42:51] *** Quits: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi) (Ping timeout: 245 seconds)
[11:43:19] *** Joins: bluedust (~bluedust@117.207.233.37)
[11:46:37] *** Quits: bluedust_ (~bluedust@103.161.144.140) (Ping timeout: 250 seconds)
[11:51:02] <b0nn> This just came up on twitter https://github.com/TheAlgorithms/Go
[11:51:15] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[11:51:15] *** Joins: kadoban (~kadoban@user/kadoban)
[11:51:29] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[11:51:29] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[11:51:29] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[11:51:30] *** Joins: mambang[m] (~mambang@user/mambang)
[11:51:30] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[11:51:30] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[11:51:30] *** Joins: psydroid (~psydroid@user/psydroid)
[11:51:42] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[11:51:42] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[11:51:42] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[11:51:57] *** Joins: anonton (~anonton@user/anonton)
[11:52:09] *** Joins: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69)
[11:52:23] *** Joins: borring (~borring@2001:470:69fc:105::1:532b)
[11:52:23] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[11:52:23] *** Joins: wielding (~wielding@user/wielding)
[11:52:24] <ikke> nice
[11:52:37] *** Joins: pztrn (~pztrn@user/pztrn)
[11:52:38] *** Joins: spectern[m] (~specternm@2001:470:69fc:105::1:6842)
[11:52:53] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[11:52:53] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[11:53:06] *** Quits: Dus10 (~dus10matr@2001:470:69fc:105::a7d) (Quit: Client limit exceeded: 20000)
[11:53:07] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[11:53:07] *** Joins: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7)
[11:53:20] *** Joins: mxehbqtuspx[m] (~mxehbqtus@2001:470:69fc:105::1:656f)
[11:53:20] *** Joins: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831)
[11:53:34] *** Joins: Dus10 (~dus10matr@2001:470:69fc:105::a7d)
[11:53:34] *** Joins: pagalingling[m] (~pagalingl@2001:470:69fc:105::1:60b9)
[12:06:51] *** Joins: bancroft (~bancroft@user/bancroft)
[12:11:26] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 256 seconds)
[12:18:22] *** Joins: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi)
[12:22:01] *** Quits: bluedust (~bluedust@117.207.233.37) (Remote host closed the connection)
[12:22:51] *** Quits: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi) (Ping timeout: 245 seconds)
[12:24:42] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Quit: Client limit exceeded: 20000)
[12:47:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:3db3:b1d2:4da9:9983)
[12:48:26] *** Joins: bluedust (~bluedust@103.161.144.140)
[13:00:17] *** Joins: telboon (~telboon@user/telboon)
[13:00:27] *** Joins: rendar (~rendar@user/rendar)
[13:04:54] <telboon> anyone familiar with GORM's querying syntax for relational query? (e.g. User has Pet. is it possible if i want to get first User where User.Pet.species="dog", or even User.Pet.Food.name = "something")?
[13:04:54] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[13:06:18] <telboon> or even (WHERE User.Pet.species = "dog" AND User.Pet.Food.name = "something")?
[13:08:52] <b0nn> telboon: how do you define "first" - order by user {id,last_name,firstname,age,address}?
[13:10:02] <telboon> ah, in this case, the first doens't matter, though definitely will be hoping the relational query method works with Order, Find, etc
[13:12:03] <b0nn> https://gorm.io/docs/query.html#Joins
[13:16:48] <telboon> thanks b0nn! will try this out
[13:17:36] <telboon> it feels almost equal to building the raw query out with the join & select syntax (and assuming will be more with the Where query)
[13:17:37] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[13:17:49] <telboon> is there alternative to build that query automatically?
[13:20:58] <b0nn> personally I would recommend SQL over ORMs, (lately I've been arguing with a "query builder" that's restrictive
[13:21:21] <b0nn> WRT GORM, I wouldn't know much more than what I've pasted
[13:28:00] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:29:10] *** Joins: Batzy (~quassel@user/batzy)
[13:30:38] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[13:32:49] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:34:49] <telboon> b0nn: i see. thanks for the help! the Join works!
[13:34:55] <telboon> i can see the appeal with SQL, though it's more of a tradeoff i feel. and in my personal project, i would want to optimize for development speed, which makes ORM more desirable
[13:35:01] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:35:06] *** Quits: iryith (~iryith3@user/iryith) (Read error: Connection reset by peer)
[13:35:14] *** Joins: shka (~herr@109.231.0.226)
[13:35:28] *** Joins: iryith (~iryith3@user/iryith)
[13:35:32] *** Joins: kcrk (~kcrk@user/kcrk)
[13:36:01] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 250 seconds)
[13:36:02] *** Joins: jpw_ (~jpw@user/jpw)
[13:40:47] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:8c0e:5374:183d:34e2)
[13:47:01] <bpalmer> I've never felt that ORMs actually sped things up in any real way, for me.
[13:47:24] <ikke> Only the simple cases
[13:49:00] <bpalmer> but those are the ones that don't need sped up.
[13:49:11] <bpalmer> Well, I guess there's a tiny amount of work in deserializing each field
[13:49:45] <bookworm> the problem without orms is that eventually you end up with a query that contains "is in $list" and that's shitty to do without a generator as you can't simply use parameter expansion... meaning you tend to fallback to string substitution with the obvious problems. A query generator solves this as well
[13:50:43] <bookworm> say if you want to scope something to a bunch of allowed user based on the auth
[13:51:53] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[14:01:05] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[14:01:23] *** Joins: mickey8 (~user@user/mickey)
[14:16:51] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[14:22:45] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[14:24:23] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[14:27:30] *** Quits: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de) (Quit: The Lounge - https://thelounge.chat)
[14:27:56] *** Joins: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de)
[14:27:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:3db3:b1d2:4da9:9983) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:29:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[14:31:24] *** Joins: fikran (~fikran@user/fikran)
[14:51:03] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[15:02:09] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:3db3:b1d2:4da9:9983)
[15:02:35] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[15:03:59] *** Quits: bluedust (~bluedust@103.161.144.140) (Read error: Connection reset by peer)
[15:05:26] *** Joins: leonarth (~leonarth@user/leonarth)
[15:09:22] *** Quits: chenqisu12 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[15:19:50] *** Quits: zwr (~zwr@2804:d45:b966:fb00:d3a7:44f8:3616:d9d) (Ping timeout: 250 seconds)
[15:20:57] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:21:14] *** Joins: mickey8 (~user@user/mickey)
[15:22:17] *** Joins: bluedust (~bluedust@103.161.144.140)
[15:33:43] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[15:37:07] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[15:38:18] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[15:39:54] *** Joins: unautre (~unautre@149.91.83.63)
[15:40:59] *** Quits: unautre (~unautre@149.91.83.63) (Changing host)
[15:40:59] *** Joins: unautre (~unautre@user/unautre)
[15:41:05] <unautre> hi
[15:50:25] *** Joins: FreeBDSM (~FreeBDSM@user/freebdsm)
[15:50:49] <FreeBDSM> Hello, could someone tell me what's wrong with my imports? https://go.dev/play/p/1lhuaWRfRRi
[15:50:51] *** Joins: eXtr3m0 (~eXtr3m0@user/eXtr3m0)
[15:51:11] <be3uykpy>  what would it take to be able to decrypt such openssl-encrypted string in go? i tried a few available approaches but none seem to work. echo "myuser;mypass;9982" | openssl aes-256-cbc -e -a -pbkdf2 -pass pass:str0ngP!
[15:57:09] <bpalmer> FreeBDSM: did you run go get to try to download those modules?
[15:57:28] *** Joins: chenqisu12 (~chenqisu1@183.217.200.249)
[16:04:48] *** Joins: dntreou (~yakiza@105-209-150-191.access.mtnbusiness.co.za)
[16:07:12] <FreeBDSM> bpalmer, thanks, that was it, vscode linter lied to me it was a syntax issue
[16:09:26] *** Quits: dntreou (~yakiza@105-209-150-191.access.mtnbusiness.co.za) (Ping timeout: 256 seconds)
[16:11:05] <FreeBDSM> https://github.com/mvdan/xurls > Note that calling the exposed functions means compiling a regular expression, so repeated calls should be avoided. < does it mean that this lib doesn't fit my intended use scenario of a bot parsing incoming messages?
[16:13:36] <ikke> It's the Strict / Relaxed functions that compile it
[16:13:46] <ikke> They return a regular expression
[16:13:54] <ikke> And they can be called many times
[16:19:05] <bpalmer> wait, that's confusing; the actual code only compiles the regular expressions once
[16:19:34] <ikke> heh
[16:19:37] <ikke> sync.once
[16:19:45] <bpalmer> StrictMatchingScheme , on the other hand, builds it new each time.
[16:19:46] <ikke> Maybe an older comment that was not removed?
[16:20:04] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 250 seconds)
[16:20:12] <ikke> right, as it accepts a parameter which alters the expressions
[16:20:37] <bpalmer> Aye. Although it *could* cache things
[16:21:55] <ikke> Question is whether it's worth the effort
[16:22:22] <bpalmer> probably not. Just not calling it multiple times is the easy route.
[16:38:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[16:38:42] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[16:40:45] *** Joins: fikran (~fikran@user/fikran)
[16:41:12] *** Quits: mooff (mooff@awful.cooking) (Quit: Quit)
[16:42:23] *** Joins: CoolerX (~CoolerX@user/coolerx)
[16:44:01] *** Joins: mooff (mooff@awful.cooking)
[16:45:35] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[16:53:43] *** Quits: chenqisu12 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[16:53:58] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:01:59] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[17:03:10] *** Quits: henry40408 (~henry4040@175.181.155.165) (Quit: The Lounge - https://thelounge.chat)
[17:04:17] *** Joins: henry40408 (~henry4040@175.181.155.165)
[17:07:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:3db3:b1d2:4da9:9983) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:12:20] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 256 seconds)
[17:12:38] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[17:12:48] *** Joins: bancroft (~bancroft@user/bancroft)
[17:14:31] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[17:14:53] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[17:26:21] *** Joins: CoolerX (~CoolerX@user/coolerx)
[17:26:55] *** Joins: Guest55 (~Guest55@102-65-207-134.dsl.web.africa)
[17:27:02] *** Quits: Guest55 (~Guest55@102-65-207-134.dsl.web.africa) (Client Quit)
[17:27:24] *** Parts: CoolerX (~CoolerX@user/coolerx) ()
[17:28:35] *** Joins: jjonah (~jjonah@p200300d5d7103100dea632fffeb3342f.dip0.t-ipconnect.de)
[17:30:04] *** Quits: jjonah (~jjonah@p200300d5d7103100dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:31:26] *** Joins: jjonah (~jjonah@p200300d5d7103100dea632fffeb3342f.dip0.t-ipconnect.de)
[17:32:27] *** Quits: casastorta (~casastort@neo2.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[17:34:01] *** Joins: casastorta (~casastort@neo3.krivokuca.net)
[17:37:32] *** Quits: casastorta (~casastort@neo3.krivokuca.net) (Client Quit)
[17:38:37] *** Joins: casastorta (~casastort@neo2.krivokuca.net)
[17:39:29] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[17:53:11] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[17:53:33] *** Joins: w[m] (~welt@2001:470:69fc:105::1:7409)
[17:54:03] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:8c0e:5374:183d:34e2) (Read error: Connection reset by peer)
[17:54:11] *** Joins: Guest8914 (~jules@host-92-22-234-61.as13285.net)
[17:57:30] *** Joins: julesP (~jules@host-92-22-234-61.as13285.net)
[18:01:50] *** Joins: rednul_ (~textual@098-127-178-044.biz.spectrum.com)
[18:07:57] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[18:11:18] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:17:26] *** Quits: rednul_ (~textual@098-127-178-044.biz.spectrum.com) (Read error: Connection reset by peer)
[18:24:23] *** Joins: syg_ (~syg@flamebot.net)
[18:25:28] *** Joins: optic__ (~rickybob@35.143.255.39)
[18:26:28] *** Joins: arkurious (~arkurious@user/arkurious)
[18:28:57] *** Quits: boof (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 250 seconds)
[18:30:43] *** Joins: bluedust (~bluedust@103.161.144.140)
[18:40:12] *** Joins: tane (~tane@user/tane)
[18:43:17] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:7d8e:cf48:737f:ec3)
[18:45:40] *** Quits: ldiamond (~ldiamond@142.126.46.115) (Changing host)
[18:45:40] *** Joins: ldiamond (~ldiamond@user/ldiamond)
[18:52:27] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[18:53:02] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[18:54:55] *** Joins: EtherNet_ (~ethernet@user/ethernet)
[18:55:02] *** Quits: EtherNet_ (~ethernet@user/ethernet) (Client Quit)
[18:58:13] *** Joins: EtherNet (~ethernet@user/ethernet)
[19:00:47] *** Quits: julesP (~jules@host-92-22-234-61.as13285.net) (Remote host closed the connection)
[19:03:58] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 256 seconds)
[19:06:33] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[19:07:21] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[19:07:44] *** Quits: jjonah (~jjonah@p200300d5d7103100dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[19:10:27] *** Joins: jjonah (~jjonah@p200300d5d73fe300dea632fffeb3342f.dip0.t-ipconnect.de)
[19:11:24] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[19:13:49] *** Joins: rednul_ (~textual@098-127-178-044.biz.spectrum.com)
[19:22:10] *** Joins: pgloor (~petergloo@mix.cubus.space)
[19:22:30] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Ping timeout: 250 seconds)
[19:22:52] *** Quits: sneak (~sneak@datavi.be) (Quit: ZNC 1.7.5 - https://znc.in)
[19:23:03] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[19:23:16] *** Joins: sneak (~sneak@datavi.be)
[19:23:49] *** Quits: pgloor1 (~petergloo@mix.cubus.space) (Read error: Connection reset by peer)
[19:31:55] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[19:32:57] *** Joins: ajfriesen70 (~ajfriesen@cable-78-35-98-50.nc.de)
[19:34:08] *** Quits: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de) (Ping timeout: 252 seconds)
[19:34:08] *** ajfriesen70 is now known as ajfriesen7
[19:36:36] *** Joins: zwr (~zwr@2804:d45:b966:fb00:9fc4:4e83:5c60:86bb)
[19:39:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:3db3:b1d2:4da9:9983)
[19:39:57] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 240 seconds)
[19:46:34] *** Quits: leonarth (~leonarth@user/leonarth) (Ping timeout: 260 seconds)
[19:55:41] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[20:04:10] *** Joins: thd (~user@45.76.37.129)
[20:06:53] *** Joins: leonarth (~leonarth@user/leonarth)
[20:09:07] *** Joins: Atlas (~atlas@user/atlas)
[20:10:10] *** Joins: bancroft (~bancroft@user/bancroft)
[20:12:32] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[20:17:59] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[20:18:46] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 256 seconds)
[20:20:09] *** Quits: syg_ (~syg@flamebot.net) (Quit: ZNC - https://znc.in)
[20:20:38] *** Joins: syg_ (~syg@flamebot.net)
[20:28:46] *** Quits: syg (sid521913@id-521913.lymington.irccloud.com) ()
[20:32:32] *** Parts: Guest8914 (~jules@host-92-22-234-61.as13285.net) ()
[20:44:35] *** Joins: Memory (~user_name@user/memory)
[20:44:59] *** Joins: internut (~internut@2601:280:4e00:7b70:307e:9674:ca78:b410)
[20:45:17] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[20:46:39] *** Joins: crashrep (~crashrep@user/crashrep)
[20:47:28] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[20:52:46] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[20:54:40] *** Quits: Atlas (~atlas@user/atlas) (Quit: Textual IRC Client: www.textualapp.com)
[20:54:51] *** Joins: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it)
[20:55:45] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[20:56:31] *** Quits: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de) (Ping timeout: 250 seconds)
[20:57:02] *** Joins: crashrep (~crashrep@user/crashrep)
[21:00:08] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:3db3:b1d2:4da9:9983) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:03:24] *** Joins: fef (~thedawn@user/thedawn)
[21:04:12] *** Joins: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de)
[21:04:21] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:04:56] *** Joins: indicozy (~indicozy@87.243.17.61)
[21:06:15] *** Joins: andlabs (~andlabs@70.107.171.168)
[21:06:45] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[21:17:10] *** Joins: bluedust (~bluedust@103.161.144.140)
[21:18:37] *** Quits: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de) (Ping timeout: 240 seconds)
[21:24:31] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[21:35:19] *** Joins: bancroft (~bancroft@user/bancroft)
[21:38:52] *** Joins: GoodCodeGuy (~goodcodeg@cpe-74-71-28-57.nyc.res.rr.com)
[21:39:13] <GoodCodeGuy> howdy -- any advice for developing go in emacs using go modules?
[21:40:18] <j416> just do it
[21:40:20] <j416> or, use vim
[21:40:33] <ikke> GoodCodeGuy: lsp has support for go
[21:41:03] <GoodCodeGuy> grazi
[21:41:47] <fizzie> The `gopls` docs have some per-editor pages too. Like https://github.com/golang/tools/blob/master/gopls/doc/emacs.md
[21:41:52] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[21:45:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:3db3:b1d2:4da9:9983)
[21:46:58] <w[m]> Is there a way to allow imports-with-side-effects on my own package in module mode? I want to create a package similar to sql where there can be many drivers.
[21:47:07] *** Joins: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de)
[21:48:25] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[21:50:48] <j416> w[m]: there's nothing special to it
[21:50:58] <j416> I don't see why not
[21:51:07] <j416> I don't particularly like the pattern, though.
[21:54:47] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 250 seconds)
[21:57:06] *** Joins: Compy (~compy@user/compy)
[21:58:32] *** Joins: arcatech (~arcatech@user/arcatech)
[21:59:38] *** Quits: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de) (Ping timeout: 256 seconds)
[22:05:21] *** Joins: xsteadfastx (~marv@94.31.99.245)
[22:08:20] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:09:46] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 250 seconds)
[22:10:35] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:12:23] *** Joins: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de)
[22:13:28] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[22:13:43] *** Quits: indicozy (~indicozy@87.243.17.61) (Quit: indicozy)
[22:16:22] *** Quits: carlavilla (~carlavill@2a0c:5a84:320d:6900:21f:16ff:fe0f:275a) (Ping timeout: 260 seconds)
[22:16:23] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[22:18:11] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: spectern[m] (~specternm@2001:470:69fc:105::1:6842) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: pagalingling[m] (~pagalingl@2001:470:69fc:105::1:60b9) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: wielding (~wielding@user/wielding) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: w[m] (~welt@2001:470:69fc:105::1:7409) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: Dus10 (~dus10matr@2001:470:69fc:105::a7d) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: anonton (~anonton@user/anonton) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: borring (~borring@2001:470:69fc:105::1:532b) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: mxehbqtuspx[m] (~mxehbqtus@2001:470:69fc:105::1:656f) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: pztrn (~pztrn@user/pztrn) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Quit: Bridge terminating on SIGTERM)
[22:18:16] *** Quits: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7) (Quit: Bridge terminating on SIGTERM)
[22:18:17] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (Quit: Bridge terminating on SIGTERM)
[22:18:17] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Quit: Bridge terminating on SIGTERM)
[22:20:48] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[22:22:26] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 245 seconds)
[22:23:54] *** Joins: kadoban (~kadoban@user/kadoban)
[22:23:54] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[22:23:54] *** Joins: psydroid (~psydroid@user/psydroid)
[22:23:54] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[22:23:54] *** Joins: mambang[m] (~mambang@user/mambang)
[22:23:54] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[22:23:54] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[22:23:54] *** Joins: pztrn (~pztrn@user/pztrn)
[22:23:54] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[22:23:54] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[22:23:54] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[22:23:54] *** Joins: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831)
[22:23:54] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[22:23:54] *** Joins: Dus10 (~dus10matr@2001:470:69fc:105::a7d)
[22:24:07] *** Joins: mxehbqtuspx[m] (~mxehbqtus@2001:470:69fc:105::1:656f)
[22:24:07] *** Joins: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7)
[22:24:07] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[22:24:07] *** Joins: pagalingling[m] (~pagalingl@2001:470:69fc:105::1:60b9)
[22:24:07] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[22:24:07] *** Joins: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69)
[22:24:08] *** Joins: spectern[m] (~specternm@2001:470:69fc:105::1:6842)
[22:24:08] *** Joins: wielding (~wielding@user/wielding)
[22:24:08] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[22:24:08] *** Joins: w[m] (~welt@2001:470:69fc:105::1:7409)
[22:24:08] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[22:24:08] *** Joins: anonton (~anonton@user/anonton)
[22:24:08] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[22:24:08] *** Joins: borring (~borring@2001:470:69fc:105::1:532b)
[22:28:23] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:29:40] *** Joins: Atque (~Atque@user/atque)
[22:29:52] <b0nn> w[m]: importing a package "with side effects" is a matter of creating init() method(s) in your package (init's are run when a package is imported)
[22:30:39] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:7d8e:cf48:737f:ec3) (Read error: Connection reset by peer)
[22:31:00] *** Quits: aiix (~quassel@h-158-174-19-126.A357.priv.bahnhof.se) (Ping timeout: 250 seconds)
[22:31:36] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:31:53] *** Joins: holgersson (~quassel@user/holgersson)
[22:32:20] *** Joins: mickey8 (~user@user/mickey)
[22:32:44] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:50b5:b57f:7251:ce23)
[22:35:51] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:41:55] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[22:41:57] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[22:43:16] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 245 seconds)
[22:47:03] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Client limit exceeded: 20000)
[22:47:09] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Client limit exceeded: 20000)
[22:47:15] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Client limit exceeded: 20000)
[22:47:35] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[22:48:17] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (Quit: Client limit exceeded: 20000)
[22:48:48] *** Quits: Dus10 (~dus10matr@2001:470:69fc:105::a7d) (Quit: Client limit exceeded: 20000)
[22:48:55] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Quit: Client limit exceeded: 20000)
[22:48:57] *** Quits: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831) (Quit: Client limit exceeded: 20000)
[22:49:22] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (Quit: Client limit exceeded: 20000)
[22:49:30] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: Client limit exceeded: 20000)
[22:49:55] *** Joins: holgersson (~quassel@user/holgersson)
[22:50:04] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Quit: Client limit exceeded: 20000)
[22:53:19] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (Quit: Client limit exceeded: 20000)
[22:53:20] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Quit: Client limit exceeded: 20000)
[22:53:37] *** Quits: pztrn (~pztrn@user/pztrn) (Quit: Client limit exceeded: 20000)
[22:54:24] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[22:56:13] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Quit: Client limit exceeded: 20000)
[22:58:54] *** Quits: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7) (Quit: Client limit exceeded: 20000)
[22:58:54] *** Quits: mxehbqtuspx[m] (~mxehbqtus@2001:470:69fc:105::1:656f) (Quit: Client limit exceeded: 20000)
[22:58:54] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (Quit: Client limit exceeded: 20000)
[22:58:54] *** Quits: pagalingling[m] (~pagalingl@2001:470:69fc:105::1:60b9) (Quit: Client limit exceeded: 20000)
[22:58:55] *** Quits: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69) (Quit: Client limit exceeded: 20000)
[22:58:55] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (Quit: Client limit exceeded: 20000)
[22:58:55] *** Quits: spectern[m] (~specternm@2001:470:69fc:105::1:6842) (Quit: Client limit exceeded: 20000)
[22:58:56] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: Client limit exceeded: 20000)
[22:58:56] *** Quits: anonton (~anonton@user/anonton) (Quit: Client limit exceeded: 20000)
[22:58:57] *** Quits: w[m] (~welt@2001:470:69fc:105::1:7409) (Quit: Client limit exceeded: 20000)
[22:58:57] *** Quits: borring (~borring@2001:470:69fc:105::1:532b) (Quit: Client limit exceeded: 20000)
[22:58:57] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Client limit exceeded: 20000)
[22:58:58] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (Quit: Client limit exceeded: 20000)
[22:58:58] *** Quits: wielding (~wielding@user/wielding) (Quit: Client limit exceeded: 20000)
[23:00:53] *** Joins: w[m]1 (~welt@2001:470:69fc:105::1:7409)
[23:00:54] <w[m]1> *doesn't seem to be true.
[23:00:54] <w[m]1> Yeah I misunderstood how modules worked, I think it's based off some outdated info from when modules were developed.
[23:00:54] <w[m]1> Yes I understand that, but I thought there was package uniqueness, which doesn'
[23:01:00] <w[m]1> I was mistaken in the premise, I'm good now.
[23:05:13] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:05:18] *** Joins: smrtz (~smrtz@user/smrtz)
[23:05:26] *** Joins: mickey8 (~user@user/mickey)
[23:05:42] *** Joins: Torr (~Torr@user/torr)
[23:08:09] *** Parts: smrtz (~smrtz@user/smrtz) ()
[23:10:33] <be3uykpy> why won't this print to stdout? https://paste.ofcode.org/ZZcM9aVuhGiuLUi7NV66S5
[23:10:34] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[23:10:34] *** Joins: kadoban (~kadoban@user/kadoban)
[23:10:48] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[23:10:48] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[23:10:57] <be3uykpy> i can see the process is running, it's a long running process and i would like to see whenever it outputs something to stdout
[23:11:03] *** Joins: mambang[m] (~mambang@user/mambang)
[23:11:03] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[23:11:03] *** Joins: psydroid (~psydroid@user/psydroid)
[23:11:03] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[23:11:03] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[23:11:15] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[23:11:15] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[23:11:15] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[23:11:16] <ikke> Possibly output buffering
[23:11:29] *** Joins: anonton (~anonton@user/anonton)
[23:11:30] <be3uykpy> it writes very little ("mybinary" that is)
[23:11:41] <be3uykpy> like a few bytes every few seconds
[23:11:41] *** Joins: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69)
[23:11:55] *** Joins: borring (~borring@2001:470:69fc:105::1:532b)
[23:11:55] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[23:11:55] *** Joins: wielding (~wielding@user/wielding)
[23:11:55] *** Joins: pztrn (~pztrn@user/pztrn)
[23:11:55] *** Joins: spectern[m] (~specternm@2001:470:69fc:105::1:6842)
[23:12:09] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[23:12:10] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[23:12:11] <b0nn> wait, you're scanning stdout and then expecting to write to it?
[23:12:27] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[23:12:27] *** Joins: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7)
[23:12:31] <b0nn> scanner.Scan() is waiting for output (I think)
[23:12:39] *** Joins: mxehbqtuspx[m] (~mxehbqtus@2001:470:69fc:105::1:656f)
[23:12:39] *** Joins: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831)
[23:12:39] *** Joins: Dus10 (~dus10matr@2001:470:69fc:105::a7d)
[23:12:39] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[23:12:39] *** Joins: pagalingling[m] (~pagalingl@2001:470:69fc:105::1:60b9)
[23:12:59] <b0nn> That is, there's nothing on stdout for it to scan
[23:13:07] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[23:13:09] <fizzie> Buffering would be my guess as well. Output to a non-interactive device tends to be fully buffered, so you'd only get the first chunk once a full chunk (often 4096 bytes) fills up.
[23:14:41] <b0nn> scanner.Scan is waiting for something on stdout - nothing comes, so it's stuck - have a look at this for an example https://pkg.go.dev/bufio#example-Scanner-Custom
[23:15:43] <b0nn> not that the scanner in the example is scanning strings.NewReader, which itself is reading a string
[23:15:48] <b0nn> note*
[23:17:07] <b0nn> I *think* that you mean to put os.Stdin to read from, rather than stdout (unless you have another process writing to stdout)
[23:17:19] <fizzie> b0nn: The thing being scanned is `command.StdoutPipe()`, the standard output of the command.
[23:17:40] <b0nn> fizzie: please paste the output of the command that would be written
[23:17:50] <fizzie> I can't, it's not my question. :)
[23:18:19] <be3uykpy> you want to see the output of "mybinary"?
[23:18:33] <b0nn> .Start() is called before the scanner is even built
[23:18:50] <be3uykpy> i am new to go, i could have this completely wrong :p
[23:19:05] <fizzie> It's perfectly fine to call .Start() on the command before making a scanner on the read end of the pipe.
[23:19:32] <b0nn> unless it blocks
[23:20:45] <be3uykpy> "mybinary" is basically just a long running process that sleeps and once in a while write to stdout some basic data. the thing is, the sleep period is 10 seconds long, but nothing comes. if i just run it directly (not throgh go), it works as expected
[23:20:54] <be3uykpy> by long running i mean, never ending
[23:20:58] <fizzie> See the earlier comments re buffering.
[23:21:13] <be3uykpy> yes i saw, so i should just wait to see if it's in fact the case?
[23:21:24] <be3uykpy> it should sometime in the future fill and print?
[23:21:33] <fizzie> Well, you can also run `mybinary ... | cat` and see if it exhibits the same problem.
[23:21:48] *** Quits: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de) (Ping timeout: 256 seconds)
[23:22:19] <b0nn> be3uykpy: start by checking if the code you have written actually runs your binary
[23:23:33] *** Joins: FreedomConvoy (~FreedomCo@bras-base-lchtpq0202w-grc-14-174-91-187-149.dsl.bell.ca)
[23:25:00] <be3uykpy> on it
[23:25:47] <fizzie> If the binary is doing something that's similar to https://0x0.st/oH2s.txt then that binary under your Go example would behave as you describe.
[23:26:39] <fizzie> (It's a little hard to illustrate timing in a paste, had to add some comments.)
[23:27:22] <b0nn> So, the problem with the buffering theory is "06:40 < be3uykpy> why won't this print to stdout?"
[23:27:33] <b0nn> Buffering would (eventually) print stuff out
[23:27:51] <fizzie> If it outputs "a few bytes every few seconds", that eventually is pretty far off.
[23:28:27] <fizzie> Like, over a hour if the average speed is one byte/second and the block size is a typical one.
[23:28:37] <b0nn> So, your assumption is that they didn't wait long enough *AND* the buffer wasn't flushed when the application was exited?
[23:28:48] <fizzie> We were told the application never exits.
[23:28:59] <b0nn> So, it's still running this very second?
[23:29:33] <fizzie> Yes. Or if it was killed, stdio buffers  generally get flushed on abnormal process termination.
[23:29:39] <fizzie> s/get/don't get/
[23:30:09] <fizzie> (In my "./tmp | cat" example, nothing gets output if I kill 'tmp' before it terminates successfully.)
[23:30:43] <b0nn> Which is /why/ I was about to suggest https://pkg.go.dev/bufio#Writer.Flush
[23:31:00] <b0nn> Wait, now your cat command is Go?
[23:31:21] <b0nn> I mean, buffer handling isn't uniform (obviously)
[23:31:41] <fizzie> I don't think `mybinary` is necessarily a Go program either.
[23:31:56] <be3uykpy> fizzie: it prints to stdout live, e.g it's not waiting for 10 seconds to pass in order to print.
[23:32:00] <be3uykpy> yeah it's not a go program
[23:32:10] <b0nn> Right, so *now* it's the mybinary buffer that you are talking about?
[23:32:23] <fizzie> It's the `mybinary` buffer that I've been talking about the whole time.
[23:32:31] <b0nn> sure
[23:32:41] <be3uykpy> ohhh, i thought u were talking about the go buffer
[23:32:54] <b0nn> strongly suspect he was
[23:33:06] <fizzie> That's just nonsense.
[23:33:14] <b0nn> at any rate 07:01 < be3uykpy> fizzie: it prints to stdout live, e.g it's not waiting for 10 seconds to pass in order to print.
[23:33:22] <b0nn> that invalidates the buffer theory
[23:33:50] <fizzie> My 'tmp' example *also* prints to stdout live (when not executed as `./tmp | cat`).
[23:34:23] *** Quits: connor_k (~ckuehl@ip70-179-143-145.fv.ks.cox.net) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:34:24] <b0nn> sure
[23:34:45] <b0nn> that would mean cat's vuffer
[23:34:48] <b0nn> buffer
[23:34:54] <fizzie> No, it's `tmp`'s stdout buffer.
[23:34:57] <b0nn> which would be analogous to Go's buffer
[23:35:13] <fizzie> No, the output buffering happens in the `tmp` process.
[23:35:15] <b0nn> oh, so it doesn't use a buffer when stdout????
[23:35:43] <fizzie> The usual (C library) buffering behavior is this: stdout is line-buffered when it's a terminal, and fully buffered when it's something else (like a pipe, or a file).
[23:35:44] <ikke> output to a tty is usally line buffered
[23:35:49] <b0nn> be3uykpy: were you able to ascertain if Go was running your binary correctly
[23:36:03] <fizzie> That's literally the whole thing I was trying to demonstrate. If you have a program that writes to stdout "interactively" when running in the terminal, the exact same program can appear to produce "no output" when it's being run with output redirected to a pipe.
[23:36:09] *** Joins: lainon (~lainon@2600:381:2200:2ed8:40ff:47c:65dc:db2)
[23:36:19] *** Quits: lainon (~lainon@2600:381:2200:2ed8:40ff:47c:65dc:db2) (Remote host closed the connection)
[23:36:37] <b0nn> in both cases you have referred to external buffers
[23:36:44] <b0nn> ie. stdouts
[23:37:31] <fizzie> And the reason for that, at least in my paste, is that the `stdout` stream of the `tmp` process has switched to a fully-buffered mode (as a consequence of the redirection) and is waiting for a buffer to fill up.
[23:38:01] *** Joins: bancroft (~bancroft@user/bancroft)
[23:38:37] <fizzie> The connection to the pasted Go code would be, the same thing would happen if `tmp` was executed with exec.Command + command.StdoutPipe() to capture its output.
[23:38:43] <b0nn> it doesn't "switch" http://www.pixelbeat.org/programming/stdio_buffering/
[23:39:16] <fizzie> It does "switch". Unless you're objecting to the word choice.
[23:39:23] <fizzie> Cf. that article's "stdout is buffered (line buffered if connected to a terminal)"
[23:39:36] <be3uykpy> b0nn: i am on it, unfortunately it's not that easy to assert. will update in a few min
[23:39:42] <b0nn> ok
[23:40:13] <foobaz> is there some way to call the binary in go, but make it think it's connected to a terminal, so it chooses the line buffer?
[23:40:14] <b0nn> have it write faster to fill up these zillions of buffers :)
[23:40:45] *** Joins: aiix (~quassel@c83-251-68-249.bredband.tele2.se)
[23:41:11] <ikke> You can flush buffers
[23:41:27] <b0nn> 07:00 < b0nn> Which is /why/ I was about to suggest https://pkg.go.dev/bufio#Writer.Flush
[23:41:30] <fizzie> The only difference between `./tmp` and `./tmp | cat` is whether the program's `stdout` stream is connected to a terminal, and consequently what the default buffering mode (line-buffered, or fully buffered) is. `cat` itself is perfectly capable of printing output as it comes in -- if I add `fflush(stdout);` in tmp.c, there's no difference in behavior between `./tmp` and `./tmp | cat`.
[23:41:54] <foobaz> ikke: i don't think be3uykpy controls the program with the buffer
[23:42:08] <ikke> right
[23:44:29] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[23:47:16] *** Quits: FreedomConvoy (~FreedomCo@bras-base-lchtpq0202w-grc-14-174-91-187-149.dsl.bell.ca) (K-Lined)
[23:49:54] *** Parts: unautre (~unautre@user/unautre) ()
[23:50:00] *** Joins: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de)
[23:50:09] *** Joins: unautre (~unautre@user/unautre)
[23:50:39] <foobaz> maybe this could be used to disable buffering https://github.com/creack/pty
[23:51:14] <foobaz> if the 3rd party binary is writing to a pseudo-tty created by that package, it should choose line buffering
[23:51:26] <fizzie> The coreutils `stdbuf` utility can sometimes be used to convince uncooperative programs to change their buffering behavior and (for example) force line buffering when stdout is to a pipe, too. Though it only works if the target program uses the C stdio streams and does not explicitly set the buffering mode itself. And the mechanism it uses (LD_PRELOAD) is pretty kludgy.
[23:53:01] *** Joins: connor_k (~ckuehl@ip70-179-143-145.fv.ks.cox.net)
[23:54:19] <be3uykpy> how would you catch if it's crashing? i confirmed it's starting, but it's crashing instantly when ran through the exec.Command, when i run it directly it works. any tips? i have debug (vscode) mode on as needed, but it's not very helpful so far
[23:54:52] <be3uykpy> i also completely removed the scanner stuff, just pure command.Start now
[23:55:01] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[23:55:13] <be3uykpy> command.Start doesn't return any error. it starts, and crashes after 3 seconds or so
[23:55:32] <be3uykpy> that's tricky
[23:55:51] *** Joins: Atque (~Atque@user/atque)
[23:56:07] <be3uykpy> i am pretty sure it writes an error when it crashes, i just don't see it :)
[23:56:28] <be3uykpy> is there a nice way to hook into command.start and force it to wait?
[23:56:56] *** Quits: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de) (Ping timeout: 256 seconds)
[23:57:10] <fizzie> Run() is pretty much the same as "Start() and then wait to complete".
[23:57:30] *** Quits: connor_k (~ckuehl@ip70-179-143-145.fv.ks.cox.net) (Ping timeout: 256 seconds)
[23:57:50] *** Joins: marius_m (~marius@84.211.92.9)
[23:58:14] <fizzie> And if you want to be sure you see anything the command wrote, you can open two files and use them for command.Stdout and command.Stderr.
