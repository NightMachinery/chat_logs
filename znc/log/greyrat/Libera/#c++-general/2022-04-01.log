[00:00:42] <great_taste> I have changed compiler, from gcc to clang
[00:00:46] <Alipha> great_taste: you didn't link the c++ std library
[00:00:53] <Alipha> or linked the wrong one
[00:01:13] <great_taste> I wonder if I am linking against the wrong std lib, or mixing them up
[00:01:31] <great_taste> I am not specifying anything in my cmake files so I have no idea where it's picking up what
[00:02:17] <great_taste> "__gnu_cxx::new_allocator" so it's looking for gnu stuff
[00:07:33] <LordKalma> are you linking against pre-compiled libraries?
[00:08:31] <Hello71> you are attempting to link with the C compiler
[00:08:34] <Hello71> use the C++ compiler
[00:08:50] <ville> great_taste: g++ not gcc, clang++ not clang
[00:09:04] <LordKalma> if it's a cmake system, you probably botched your toolchain
[00:09:53] <great_taste> I am linking against my own library
[00:10:14] <ville> great_taste: your own standard library implementation?
[00:10:38] <great_taste> no lol
[00:10:38] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:10:58] <great_taste> I mean I am linking an executable with my library
[00:11:05] <ville> great_taste: clang++ and g++ are really compiler frontends, not compilers, they call the proper compiler or linker dependig on the flags and also pass in some default flags that are c++ specific.
[00:11:24] <ville> great_taste: similarly gcc and clang, but they do c specific flags
[00:11:43] *** Joins: jsbach (~jsbach@2a01:c22:a897:3700:c973:1471:122c:fd9c)
[00:12:11] <ville> so make sure you are indeed using clang++ or g++ not clang or gcc
[00:12:14] <great_taste> lol looks like setting `CMAKE_CXX_COMPILER=usr/bin/clang++` fixed it o_o
[00:12:39] <great_taste> why did `usr/bin/clang` compile the code successfully?
[00:12:55] <great_taste> just the linking that failed
[00:12:58] <ville> it looked at the file extension and decided to invoke the c++ compiler
[00:13:11] <great_taste> motherf**
[00:13:54] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[00:14:11] <great_taste> **thanks**
[00:15:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b0e0:c4b0:8b04:fa76) (Ping timeout: 252 seconds)
[00:15:43] <rpav> omfg that worked heh
[00:15:51] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e948:369a:95ce:8d60)
[00:16:21] <rpav> using pack1 = pack<int, int>; using pack2 = pack<double, double>; using pack3 = pack<float, float>;
[00:16:45] <rpav> using packN = pack_concat<pack1, pack2, pack3>;  print(nameof<packN>()); // => pack<int, int, double, double, float, float>
[00:17:14] <rpav> this shit should have been in std since 11
[00:17:22] <rpav> or at very least 14
[00:20:28] *** Joins: pulse (~pulse@user/pulse)
[00:23:56] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[00:24:22] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[00:27:11] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[00:32:42] *** Joins: davidlowryduda (~davidlowr@2601:197:600:1210:295d:ca2a:3a31:19f2)
[00:35:11] *** davidlowryduda is now known as dld
[00:36:07] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[00:42:37] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[00:42:55] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[00:43:17] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[00:45:35] *** Quits: magla (~gelignite@d5362fd7.access.ecotel.net) (Quit: Stay safe!)
[00:56:05] *** halberd is now known as causative
[01:00:06] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Remote host closed the connection)
[01:00:39] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[01:03:40] <rpav> whoa
[01:04:21] <rpav> i hadn't thought to make a template definition dependent on its specializations like this before
[01:05:10] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Ping timeout: 260 seconds)
[01:06:23] *** Joins: proller (~p@80.240.216.69)
[01:08:30] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (tantalum.libera.chat (Nickname regained by services)))
[01:08:33] *** Joins: PJBoy (~PJBoy@user/pjboy)
[01:10:24] <LordKalma> !crtp
[01:10:25] <nolyc> crtp is the Curiously Recurring Template Pattern. A form of static polymorphism where a derived class inherits from a base class template with the derived class as the template parameter.
[01:10:29] <LordKalma> this?
[01:12:17] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[01:12:40] <rpav> no no
[01:12:44] <rpav> not CRTP
[01:12:49] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[01:13:15] *** Joins: markong (~kvirc@213.146.188.203)
[01:13:38] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[01:13:43] <rpav> for function info, <F> struct info { using G = decltype(&F::operator()); using return_type = typename info<G>::return_type; ... };
[01:14:19] <rpav> i dunno it seems sortof like "ok so what" but that then gets dispatcheD by a bunch of specializations on itself
[01:15:33] <rpav> most type stuff you have like a blank default or base case and rely on specializations, but this like _relies_ on the specializations; i wonder if there's any other weird place that could be applied
[01:17:36] *** Quits: robod34 (Username@79.115.134.214) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:18:03] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[01:18:34] <LordKalma> >  template definition dependent on its specializations
[01:18:39] <LordKalma> this is what I don't get
[01:18:51] <LordKalma> don't you specialize to get different definitions?
[01:18:54] <LordKalma> I don't get it
[01:20:51] <rpav> ok i think a simple example would be, assume you have some map `<K> Map {}; <> Map<int> { using Value = ...; }; ...` and some other specializations
[01:21:27] <rpav> just assume you can look up a secondary type depending on your input, it's important but a bit tangential
[01:22:24] <rpav> the key here is `<T> struct S { using Value = Map<T>::Value; using Lookup = S<Value>::Lookup; };`
[01:23:45] <rpav> essentially the _default_ implementation of S is to look up an "alias" and try again
[01:25:32] <rpav> it's not very clear why that's very useful in this example, but when you're looking up functions, the problem is you have a bunch of weird type matching like `<R,C,Ts...> struct F<R (C::*)(Ts...)> { ... };` but if you want to look up a functor object (which includes a lambda), like `auto f = [&](..) { ... };` nothing will let you match it and you can't say `F<decltype(f)>`
[01:25:47] *** Joins: proller (~p@2a02:6b8:b081:b644::1:12)
[01:25:56] <rpav> but doing the above does
[01:28:48] <LordKalma> interesting
[01:29:16] <rpav> i feel like retrospectively it doesn't seem that interesting, it's sortof just "a default," but
[01:29:46] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:30:49] <rpav> hm
[01:34:11] <rpav> "type of specialized non-type template argument depends on a template parameter of the partial specialization"
[01:34:18] <rpav> my vote for "most confusing wording of the day"
[01:39:03] <rpav> still not possible to match values-or-types though i think
[01:39:34] <rpav> there is just no way to make a template that takes either
[01:40:14] *** Parts: m_ben (~m_ben@user/m-ben/x-7429725) (WeeChat 3.4.1)
[01:40:21] <great_taste> clang-tidy gave me no relevant warnings... I guess it's not that great then :P
[01:41:13] <rpav> great_taste: on what?
[01:41:33] <great_taste> on my terrible code
[01:42:25] <rpav> dunno, i haven't messed with it a lot recently but i probably don't see a lot of issues either
[01:45:08] *** Quits: proller (~p@2a02:6b8:b081:b644::1:12) (Remote host closed the connection)
[01:46:07] *** Joins: proller (~p@80.240.216.69)
[01:46:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:51:12] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[01:51:36] *** Joins: proller (~p@2a02:6b8:b081:b704::1:19)
[01:52:19] *** Joins: seninha (~seninha@user/seninha)
[01:57:08] <very_sneaky> clang-tidy is great
[01:57:19] *** Quits: jsbach (~jsbach@2a01:c22:a897:3700:c973:1471:122c:fd9c) (Quit: Leaving)
[01:58:44] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[02:02:44] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[02:08:39] *** Joins: seifeslimene (~seifeslim@102.158.105.22)
[02:11:39] *** Quits: andreasbuhr (~quassel@p549dba4c.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:11:39] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:19:00] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Ping timeout: 240 seconds)
[02:21:46] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[02:25:21] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[02:25:24] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:26:25] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[02:26:49] *** Joins: dokma (~user@cpe-109-60-6-128.st3.cable.xnet.hr)
[02:27:26] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 245 seconds)
[02:29:06] *** elastic_1 is now known as elastic_dog
[02:29:09] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[02:29:45] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:32:02] *** Joins: sigma_ (~sigma@5.119.242.251)
[02:32:09] *** Quits: baltazar (~baltazar@188-143-106-228.pool.digikabel.hu) (Ping timeout: 256 seconds)
[02:32:09] *** Quits: mitch0 (~mitch@188-143-106-228.pool.digikabel.hu) (Ping timeout: 256 seconds)
[02:33:45] *** Joins: mitch0 (~mitch@178-164-251-249.pool.digikabel.hu)
[02:33:59] *** Joins: baltazar (~baltazar@178-164-251-249.pool.digikabel.hu)
[02:39:11] *** Quits: vnf_ (~vnf@85.175.252.98) (Quit: Leaving)
[02:39:19] <sigma_> hi  i can run object on thread like that https://wandbox.org/permlink/p3gT61aJhUHE74Kb , i want process like chain and wait until process is finish
[02:39:59] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:e082:8b12:97d8:5d28)
[02:40:04] <sigma_> before that i just use thread to run function but not object
[02:40:08] *** Joins: vnf (~vnf@85.175.252.98)
[02:44:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:44:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:44:54] *** ChanServ sets mode: +v npaperbot
[02:49:35] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[02:55:39] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Ping timeout: 260 seconds)
[02:58:36] *** Quits: gehn (~gehn@user/gehn) (Ping timeout: 240 seconds)
[03:05:23] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:18:45] *** Parts: dokma (~user@cpe-109-60-6-128.st3.cable.xnet.hr) (ERC (IRC client for Emacs 27.1))
[03:32:58] *** Quits: vnf (~vnf@85.175.252.98) (Quit: Leaving)
[03:38:23] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[03:39:44] *** Joins: ivii (~ivan@user/ivii)
[03:40:53] *** Quits: xuxx (~xuxx@86.228.71.37.rev.sfr.net) (Ping timeout: 260 seconds)
[03:41:40] *** Quits: sigma_ (~sigma@5.119.242.251) (Quit: Konversation terminated!)
[03:45:43] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:e948:369a:95ce:8d60) (Quit: Textual IRC Client: www.textualapp.com)
[03:54:36] *** Quits: calcul0n (~calcul0n@2a01:e0a:150:6030:7d85:9901:c4f9:1225) (Ping timeout: 240 seconds)
[03:56:03] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Ping timeout: 260 seconds)
[03:56:15] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[03:56:21] *** Joins: epony (epony@user/epony)
[04:03:03] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 260 seconds)
[04:04:12] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:e082:8b12:97d8:5d28) (Ping timeout: 240 seconds)
[04:05:51] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:80cb:fbaa:9eb3:d23c)
[04:07:55] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[04:24:56] *** Joins: Mat_42 (~mat_42@178.238.165.7)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:35:28] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 246 seconds)
[04:43:46] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:44:30] *** Joins: RazielZ (~Raziel@user/raziel)
[04:47:02] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 246 seconds)
[04:47:23] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 246 seconds)
[04:51:16] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[04:53:49] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[04:56:02] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Client Quit)
[04:57:23] *** Joins: xiongxin (~Thunderbi@117.136.33.222)
[05:00:27] *** Quits: Cyp (~cyp@213.237.84.236) (Remote host closed the connection)
[05:00:51] *** Joins: Cyp (~cyp@213.237.84.236)
[05:01:13] *** Joins: RandomRead3r (~RandomRea@user/randomreader)
[05:03:18] *** Quits: xiongxin (~Thunderbi@117.136.33.222) (Read error: Connection reset by peer)
[05:03:57] *** Quits: RandomReader (~RandomRea@user/randomreader) (Ping timeout: 240 seconds)
[05:03:59] *** RandomRead3r is now known as RandomReader
[05:14:26] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:29:00] *** Joins: gargus (~user@61.68.76.222)
[05:33:29] *** Quits: Mat_42 (~mat_42@178.238.165.7) (Ping timeout: 256 seconds)
[06:02:02] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[06:10:06] *** Joins: nshire (~nshire@user/nshire)
[06:21:18] *** Joins: Inline__ (~Inline@p200300cd470b2600b0280ee525100d94.dip0.t-ipconnect.de)
[06:23:53] *** Quits: Inline (~Inline@p200300cd470e1300a84f1effc05ae732.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:30:01] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:34:06] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:42:25] *** Joins: smeso (~smeso@user/smeso)
[06:44:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:44:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:44:53] *** ChanServ sets mode: +v npaperbot
[06:45:15] *** Quits: ARoxdale (~ARoxdale@ip-84-203-27-228.broadband.digiweb.ie) (Ping timeout: 260 seconds)
[06:47:07] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[06:52:58] *** Joins: xiongxin (~Thunderbi@117.136.33.222)
[06:57:03] *** Quits: xiongxin (~Thunderbi@117.136.33.222) (Read error: Connection reset by peer)
[06:57:26] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:57:40] *** Quits: seifeslimene (~seifeslim@102.158.105.22) (Ping timeout: 250 seconds)
[06:58:04] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[07:01:16] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Client Quit)
[07:01:35] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[07:05:15] *** Joins: adeliktas1 (~adeliktas@i59F52D62.versanet.de)
[07:07:01] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Ping timeout: 240 seconds)
[07:07:48] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:08:00] *** Quits: adeliktas (~adeliktas@i59F52E5A.versanet.de) (Ping timeout: 272 seconds)
[07:08:01] *** adeliktas1 is now known as adeliktas
[07:10:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:27:46] *** Quits: pulse (~pulse@user/pulse) (Quit: rebootin)
[07:28:28] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1)
[07:29:11] *** Joins: pulse (~pulse@user/pulse)
[07:31:24] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Quit: xiongxin)
[07:31:25] *** Joins: xiongxin1 (~Thunderbi@117.136.33.222)
[07:33:45] *** xiongxin1 is now known as xiongxin
[07:33:51] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:36:41] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:37:43] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 260 seconds)
[07:41:45] *** Quits: xiongxin (~Thunderbi@117.136.33.222) (Read error: Connection reset by peer)
[08:01:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[08:03:23] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[08:25:31] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Ping timeout: 256 seconds)
[08:34:13] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[08:34:36] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:b5c3:fed4:1d0b:93b1) (Ping timeout: 240 seconds)
[08:44:28] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[09:02:41] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:a546:caf8:fb35:f43f)
[09:07:43] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[09:09:18] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[09:11:37] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 246 seconds)
[09:19:47] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[09:45:43] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a144:7ffd:568f:4ceb)
[09:47:41] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:52:22] *** Joins: calcul0n (~calcul0n@2a01:e0a:150:6030:7d85:9901:c4f9:1225)
[10:08:15] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:a546:caf8:fb35:f43f) (Ping timeout: 260 seconds)
[10:31:00] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:a546:caf8:fb35:f43f)
[10:43:07] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:a546:caf8:fb35:f43f) (Remote host closed the connection)
[10:43:19] *** Joins: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:a546:caf8:fb35:f43f)
[10:44:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:44:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:44:56] *** ChanServ sets mode: +v npaperbot
[10:47:04] *** Quits: Mat_42 (~mat_42@2a02:21b0:644d:e9b4:a546:caf8:fb35:f43f) (Remote host closed the connection)
[10:49:26] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Ping timeout: 252 seconds)
[10:53:32] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:02:17] *** Joins: xiongxin (~Thunderbi@117.136.33.222)
[11:14:31] *** Joins: plastico (~plastico@neomutt/plastico)
[11:20:11] *** Joins: emerent_ (~quassel@p200300cd5743c3e8ba27ebfffed28a59.dip0.t-ipconnect.de)
[11:20:11] *** emerent is now known as Guest1991
[11:20:11] *** emerent_ is now known as emerent
[11:20:33] *** Quits: Guest1991 (~quassel@p200300cd5743c3dfba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[11:34:38] *** Joins: andreasbuhr (~quassel@p549dbbe6.dip0.t-ipconnect.de)
[11:41:49] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:94fe:3c2b:a7d3:5d92)
[11:44:54] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:80cb:fbaa:9eb3:d23c) (Quit: Quit)
[11:49:20] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:54:22] *** Joins: jsbach (~jsbach@2a01:c22:a5a8:3a00:4620:618:aeb8:6326)
[12:20:32] *** Joins: robod34 (Username@79.115.134.214)
[12:22:26] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:25:41] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:80cb:fbaa:9eb3:d23c)
[12:30:08] <LordKalma> !rq
[12:30:08] <nolyc> LordKalma: <xkoncek> too bad there won't be c++69
[12:31:49] <johnny> it would be kinda surprising if C++ continues with the every 3 year releases until that time
[12:32:31] <johnny> i'd hope enough has changed that it either moves faster or slower.. like maybe it'll be every 5 years, or 10.. or maybe 1
[12:32:52] <johnny> probably more likely the first set of numbers..
[12:33:18] <LordKalma> {for(int release = 23; release <100; release += 3) { cout << release << "; ";}}
[12:33:19] <geordi> 23; 26; 29; 32; 35; 38; 41; 44; 47; 50; 53; 56; 59; 62; 65; 68; 71; 74; 77; 80; 83; 86; 89; 92; 95; 98;
[12:33:48] <johnny> i'm saying one can't assume it will stay 3 all the way until that time
[12:33:52] <LordKalma> yes
[12:34:00] <LordKalma> I was just checking
[12:34:03] <johnny> lol. c++98 again
[12:34:17] <LordKalma> humanity will be death by then, don't worry
[12:39:05] <LordKalma> anyway, iirc 3 years is the minimum stability period ISO wants
[12:39:20] <LordKalma> but more than that and it's too long to wait for things
[12:44:54] <Haohmaru> i want the ability to position things at addresses NOW, fiddling with linkers isn't fun
[12:44:58] <ville> johnny: you should hope you're on a different langauge
[12:45:01] <Haohmaru> :~(
[12:45:46] <ville> Haohmaru: you have the ability right now? just get your guarantees elsewhere
[12:46:34] <Haohmaru> nah, it should be easy and elegant
[12:47:23] <ville> it is. auto x = (aa*)0x505050;
[12:47:36] * Haohmaru cries
[12:48:08] <LordKalma> let's make the @ compiler extension canon
[12:48:26] <LordKalma> Haohmaru, your compiler doesn't have at least an attribute for that?
[12:48:28] <Haohmaru> i don't care if it's gonna be @ or some attribute
[12:48:32] <johnny> ville, but cobol still exists :)
[12:48:54] <ville> LordKalma:  so instead you want the repeat of std::launder() then? a language feature gated behind an include, so for example avr never gets it, and no one understands what it does?
[12:48:58] <ville> err Haohmaru
[12:49:10] <ville> because that's what the committee will get you
[12:50:39] <LordKalma> embedded code, especially one that's addressing locations manually is so unportable anyway that you just hope for your vendor to give you an attribute for it
[12:50:42] <LordKalma> and it's more than fine
[12:51:23] <LordKalma> attributes are already standard C++ with the [[foo]] notation and can be vendored anyway [[avrgcc:at=0xABBA]] or whatever
[12:52:54] <Haohmaru> {} volatile uint32_t test __attribute__((address (0x0555)));
[12:52:55] <geordi> warning: 'address' attribute directive ignored
[12:53:19] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[12:53:24] <LordKalma> geordi, use -w
[12:53:25] <geordi>  
[12:54:05] <Haohmaru> and it's not about avr here, it's in general for baremetal
[12:54:57] <Haohmaru> ville it should IMO become a language feature, no #include stuff
[12:55:20] <Haohmaru> a way to declare the existance of hollow objects at specific addresses
[12:55:43] <ville> Haohmaru: good luck with that. past indicates the committee likes these language-feature-as-function solutions
[12:55:43] <Haohmaru> or something like that, language lawyers will figure out the proper naming
[12:56:35] <Haohmaru> ville avrgcc already has attribute address, the others don't, like arm gcc
[12:56:47] <LordKalma> that would require too much rewording of lifetime rules, probably
[12:56:53] <Haohmaru> so i don't care how they'll do it as long as it's available
[12:57:24] <Haohmaru> LordKalma i thought C++ was initialy designed for embedded or something
[12:57:24] <ville> it's the wet dream of language dickheads it's proof in their mind that they've done something clever when it "could" be done in library rather than as strictly language
[12:57:51] <ville> Haohmaru: not any more so than c
[12:58:09] <LordKalma> freestanding C++ is a joke anywa
[12:58:11] <LordKalma> *anyway
[12:58:15] <Haohmaru> ville okay, tbh i don't see how a library would solve things, that means it can be done right now
[12:58:25] <ville> Haohmaru: no it doesn't
[12:58:31] <Haohmaru> if someone knew how to write that
[12:58:40] <ville> Haohmaru: they make a "pseudo-function" and all of its implementaton is magic
[12:58:49] <Haohmaru> hm
[12:58:51] <LordKalma> Haohmaru, what ville is ranting about is that the C++ standard has lots of crap that are language features disguising as part of the stdlib
[12:59:02] <LordKalma> that can't be impklemented in standard c++ and needs magic and compiler extensions
[12:59:09] <LordKalma> so basically, the C++ stdlib cant' be written in C++
[12:59:35] <LordKalma> despite Bjarne saying it should be "written in C++ plus some minor assembly bits"
[12:59:43] <LordKalma> paraphrasing there, but he did say that more than one
[12:59:53] <Haohmaru> okay, fine.. volatile uint32_t BLAH = std::pls_pretend_this_exists_forever_at(0x8283, std::thanks);
[13:00:22] <LordKalma> that's more likely
[13:00:22] <ville> 11:17:23            ville | it is. auto x = (aa*)0x505050;
[13:00:43] <LordKalma> that's technically UB
[13:00:44] <Haohmaru> ville that's not the same as attribute address
[13:01:19] <Haohmaru> that makes a pointer, as far as i can tell
[13:01:51] <ville> Haohmaru: sure. and problem with that then is?
[13:02:06] <Haohmaru> templates don't like those pointers
[13:02:52] <ville> auto&& x = *(aa*)0x666;
[13:03:24] <Haohmaru> the whole language is like "oh wait, WAGEN HALT, we have a POINTER in here, nobody knows what's gonna happen, don't optimize anything"
[13:04:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[13:05:01] <Haohmaru> { test<x>(); } auto&& x = *(char*)0x666; template<char &what> test() { what = 5; }
[13:05:02] <geordi> error: ISO C++ forbids declaration of 'test' with no type
[13:05:09] <Haohmaru> { test<x>(); } auto&& x = *(char*)0x666; template<char &what> void test() { what = 5; }
[13:05:09] <geordi> error: no matching function for call to 'test<x>()'
[13:05:34] <Haohmaru> wot
[13:05:45] * Haohmaru checks his coffee levels
[13:06:16] <ville> a reference is not going to get you any optimizations over a pointer...
[13:06:29] <ville> i suppose "any*"
[13:07:45] <Haohmaru> i fiddled with this multiple times, pointers have issues, optimizations get scared by them or some such, attribute address does the right thing and works good
[13:07:56] <Haohmaru> except, it's not available everywhere
[13:09:10] <Haohmaru> the recommended way was using linker scripts to position those things - can you feel the beard growth with this approach?
[13:09:59] <Haohmaru> some of the fatter MCUs have TONS of registers
[13:10:30] <johnny> well you're the one messin with avr :)
[13:10:30] *** Quits: xiongxin (~Thunderbi@117.136.33.222) (Read error: Connection reset by peer)
[13:10:37] <LordKalma> aren't linker *args* enough=
[13:10:38] *** Joins: vnf (~vnf@85.175.252.98)
[13:10:39] <LordKalma> *?
[13:10:58] <LordKalma> can't you just "-DSYMBOL=0xABBA"-type of thing on a linker argument?
[13:11:02] <johnny> only positioning i'm doing in linker scripts is the applicaiton size and start address :)
[13:11:05] <Haohmaru> johnny you seem to be missing the point.. there's no problem on AVR, avrgcc has attribute address
[13:11:28] <ville> so grab a function local? void f(aa* x) { auto x_x = x->x; /* stuff with x_x */ x->x = x_x; }
[13:11:38] <Haohmaru> LordKalma yes, you can, then you have a small linker script, and a HUGE mountain of linker arguments
[13:11:41] <Haohmaru> that's IMO worse
[13:11:52] <LordKalma> not wirh cmake or something :p
[13:13:16] *** Quits: vnf (~vnf@85.175.252.98) (Remote host closed the connection)
[13:13:59] <ville> you grab a funcion local sometimes on regular machines as well when compilers refuse to generate what you want. or at least did. haven't bothered with one for awhile
[13:14:27] <Haohmaru> not seeing how that helps
[13:14:56] <Haohmaru> those registers should be available globally, or maybe in a namespace (that's more C++-ish)
[13:15:14] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[13:15:53] <ville> ...mike acton had some examples of this, but can't locate a link right now
[13:17:08] <Haohmaru> why can't there be an easier way to ditch the #define PORTC *(PORT_t*)(0x0555) and replace it with a more sane hollow reference to an ever-existing hollow PORT_t object at a known fixed address
[13:17:19] <Haohmaru> which works with templates and everything
[13:17:52] <ville> dunno why you claim pointers don't somehow work with templates
[13:18:07] <ville> what are these templates you're speaking off?
[13:18:33] <Haohmaru> pointers aren't constant expressions or something like that
[13:18:41] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:18:42] <Haohmaru> they are "scary"
[13:20:04] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:21:37] <ville> a c cast wouldn't be. or equivalent static_cast<aa*>(static_cast<void*)(0x666)) wouldn't be
[13:23:59] *** Joins: paul424 (~tom@ip-5-172-232-59.multi.internet.cyfrowypolsat.pl)
[13:30:06] <smallville7123> "[18:30] <LordKalma> that's technically UB" how?
[13:30:50] <Haohmaru> accessing $some address pretending an object exists at it is UB
[13:37:07] *** Joins: ivii (~ivan@user/ivii)
[13:37:49] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[13:42:27] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Ping timeout: 260 seconds)
[13:44:18] <smallville7123> yea, unless you specifically know an object exists at that address
[13:44:22] <LordKalma> smallville7123, you can't cast numbers to pointers
[13:44:30] <LordKalma> and can't not start the lifetime of an object
[13:44:39] <LordKalma> smallville7123, no. still UB
[13:44:48] <smallville7123> in most cases, yes
[13:44:51] <LordKalma> no
[13:44:55] <LordKalma> every case
[13:45:11] <LordKalma> "legal" text doesn't care *you* know it's a register
[13:45:17] <LordKalma> and it can be repreesented by some value
[13:45:23] <LordKalma> if you don't start the lifetime of it, it's ub
[13:45:24] <LordKalma> period
[13:45:51] <smallville7123> in very specific cases such as linker resolution an address must be obtained and various operations applied to its value and/or address depending various stuff
[13:46:33] <LordKalma> it's also UB to define symbols in the linker
[13:46:43] <LordKalma> look, when you're talking about embedded, standard anything is a mirage
[13:46:51] <LordKalma> this is C++, but not ISO C++
[13:46:53] <LordKalma> not today, not ever
[13:49:19] <Haohmaru> i'm fine with all that being UB, that's why i want a less sketchy way to express more accurately what's going on so that the language/compiler doesn't freak out .. "look, pretend there's this object on this address, it exists forever, don't try to create it, don't try to destruct it, just trust me, it's there"
[13:49:49] <LordKalma> and that sure is a valid request
[13:49:58] <LordKalma> and again, the solution is probably vendor extensions
[13:50:01] <LordKalma> via attributes or whatever
[13:50:03] <Haohmaru> it's literally on every MCU
[13:50:18] <LordKalma> isn't there an embedded SG/WG?
[13:50:30] <Haohmaru> yeah, so i should cry to gcc bug tracker
[13:50:34] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:50:44] <LordKalma> gcc, llvm, go complain in both :p
[13:50:59] <Haohmaru> who even cares about llvm ;P~
[13:51:05] <LordKalma> llvm has a fairly recent arv compilerr so maybe they are open to in
[13:51:06] <LordKalma> :(
[13:51:15] <LordKalma> I want LLVM to rule them all
[13:51:26] <Haohmaru> gcc ftw
[13:53:24] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[13:53:39] <Haohmaru> so instead of having a HUGE linker script for every variant of every MCU, you could have those structs/registers and their addresses defined/declared in the headers, and have a simple linker script (like now)
[13:54:34] *** Joins: vnf (~vnf@85.175.252.98)
[13:54:36] <Haohmaru> finding problems in a header would be easier for me than finding problems in one of many linker huge scripts
[13:54:53] <Haohmaru> * huge linker scripts
[13:55:07] *** Quits: ville (~ville@user/ville) (Quit: ville)
[13:55:27] <Haohmaru> :/
[13:55:32] *** Joins: ville (~ville@user/ville)
[13:55:54] <smallville7123> for example, in R_X86_64_GLOB_DAT we grab the base address of the loaded ELF and add the relocation offset to it and then set the resulting address to the address of the symbol that has been looked up + the ELF mapping address
[13:55:59] <smallville7123> or something like that
[13:57:11] <smallville7123> in addition to validating the resulting address is accesible and will not result in a SEGV
[13:57:56] <smallville7123> (eg the resulting address must be a valid address within the range of the mapped ELF
[13:58:54] <ville> Haohmaru: your statement about pointers and templates is inaccurate. you can use pointers as non-type arguments of templates. but the pointer has to be known at compiletime. a c cast or its equivalents are not compiletime. http://coliru.stacked-crooked.com/a/3e6fbd10cac9247b
[13:59:25] *** Joins: seifeslimene (~seifeslim@197.2.39.226)
[14:00:25] <smallville7123> *((char**)((char*)lib_address + reloc_offset)) = lib_address + find_symbol(symbol_info);
[14:00:28] <smallville7123> or similar
[14:00:46] <Haohmaru> i can't tell wtf's going on from all that auto
[14:00:55] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[14:03:00] <ville> LordKalma: llvm is far worse choice than gcc. it has the wrong license
[14:04:41] <LordKalma> in your opinion anyway
[14:05:03] <PJBoy> he's only saying that because it's april fools day
[14:07:02] <LordKalma> fuck
[14:07:06] <LordKalma> I googled something on SO
[14:07:09] <LordKalma> my eyes hurt
[14:07:26] <LordKalma> oh now it's different, seems to be randomizing
[14:07:48] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[14:07:52] <LordKalma> ah you can change the filters in the bottom. I got the hot dog one and omfg
[14:09:46] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[14:11:07] *** Quits: nq (~nq@82.79.141.40) (Quit: Leaving)
[14:17:20] <Haohmaru> ville https://godbolt.org/z/G3b647r3z
[14:21:36] <LordKalma> https://www.qt.io/blog/qt-for-mcus-2.1-released // "Fully configurable memory placement"
[14:21:36] <LordKalma> hahah
[14:29:06] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[14:30:12] <Haohmaru> dafuq happened to toiletoverflow >:/
[14:31:02] <Haohmaru> certain chunks of text appear as thick black lines, untill you mouse-over them, then they reveal
[14:31:57] *** Quits: artok (~azo@mobile-access-bcee29-102.dhcp.inet.fi) (Quit: to city)
[14:33:03] <TinoDidriksen> You must have something that blocks their April 1st layout.
[14:33:25] <Haohmaru> uh..
[14:33:43] <TinoDidriksen> The Frisa Lank theme (filter) is actually pretty nice.
[14:34:39] <Haohmaru> i'm using firefox with nothing additional
[14:35:11] <TinoDidriksen> Huh, works for me in FF 91.
[14:35:37] <Haohmaru> okay, it's the "top-secret" theme
[14:35:39] <Haohmaru> try it
[14:36:05] <Haohmaru> so it's not a bug, but why was it selected by default
[14:36:13] <TinoDidriksen> Oh, that has a gimmick. Cute.
[14:36:25] <TinoDidriksen> You get a random default filter.
[14:36:31] <Haohmaru> great >:/
[14:36:40] <TinoDidriksen> I started with Bookface.
[14:36:51] <Haohmaru> why isn't there a toilet theme ;P~
[14:37:07] <TinoDidriksen> There is. 3D Glasses one.
[14:37:25] <Haohmaru> that one isn't selectable
[14:38:02] <Haohmaru> oh, you mean the cyan/magenta glasses
[14:38:04] <TinoDidriksen> Anyway, it's not broken, it's just April 1st.
[14:38:11] <Haohmaru> cyan/red i mean
[14:38:26] *** Joins: nq (~nq@195.254.133.193)
[14:43:49] <LordKalma> yeah they're hilarious
[14:44:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:44:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:44:55] *** ChanServ sets mode: +v npaperbot
[14:59:40] <ville> Haohmaru: yes, like i said c cast to a pointer is not known at compiletime. or its equivalents through c++ casts
[14:59:43] *** Joins: Schrostfutz (~Schrostfu@dhcp-214-0.vpn.tu-berlin.de)
[14:59:51] <ville> Haohmaru: line 25
[14:59:54] <ville> 26
[15:00:23] <Haohmaru> the pointer works, but why can't we have a reference
[15:00:35] <Haohmaru> i hate ->
[15:00:46] <ville> Haohmaru: it's not about that. it doesn't "work"
[15:01:34] <ville> Haohmaru: an expression like: (T*)0x666; is not compiletime.
[15:01:51] <ville> Haohmaru: agree or disagree or don't understand?
[15:01:53] <Haohmaru> i meant the bloh<> template works with PORTA
[15:02:46] <Haohmaru> where bloh<> uses pointer instead of reference
[15:03:08] <Haohmaru> yes, reinterpret_cast isn't constexpr
[15:04:47] <ville> ok so you can't declare PORTB then constexpr, then PORTB is not usable in constexpr context
[15:05:15] <PJBoy> reinterpret_cast itself is allowed in constexprs
[15:05:38] *** Quits: seifeslimene (~seifeslim@197.2.39.226) (Quit: Ping timeout (120 seconds))
[15:06:01] <ville> yeah you can't get at the pointed to object though
[15:06:29] *** Joins: seifeslimene (~seifeslim@197.2.39.226)
[15:06:53] <Haohmaru> the whole point is to be able to declare stuff like PORTA (and be usable like it, particularly in blah<>) except to make it "hollow" and at a fixed address
[15:07:22] <Haohmaru> hollow meaning - pretend it exists forever, no construction/destruction
[15:09:39] *** Joins: Didgy (~np_sk@82.147.37.145)
[15:13:28] <Haohmaru> the last time i fiddled with this i found a sketchy way, to declare those - using extern and then some inline asm to set the address
[15:14:06] <Haohmaru> it seems to work.. seems..
[15:14:38] <Haohmaru> of course this declaration looks muchos ugly
[15:15:05] <Haohmaru> and, i don't think you can do mathz in the address
[15:15:44] <Haohmaru> like 0x8000+12*sizeof(something)
[15:16:01] <Haohmaru> because at best that's gonna directly end up in the ASM
[15:17:01] * Haohmaru folds nolyc
[15:17:04] <Haohmaru> !fact
[15:17:05] <nolyc> Haohmaru: A specialization of a member function template is a member function.
[15:18:05] <PJBoy> I never did learn the difference between a specialisation and an instantiation
[15:18:09] <ville> ok done eating and don't have hamburger sauce all over my fingers
[15:18:14] <ville> PJBoy: http://coliru.stacked-crooked.com/a/6ac16179f8b5d481
[15:18:14] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[15:18:26] <Haohmaru> PJBoy wtf?
[15:18:28] <PJBoy> me?!
[15:18:32] <Haohmaru> even i know that
[15:18:44] <PJBoy> oh the error message
[15:19:05] <PJBoy> ville, yeah but look http://coliru.stacked-crooked.com/a/b7bdfd8cac00b269
[15:19:08] <ville> PJBoy: specialization is where you write different implementations of things. instantiation is what looks for an implementation and may pick up such a specialization
[15:19:17] <PJBoy> the problem is the weird conversion, not the cast
[15:19:36] <ville> PJBoy: the problem at hand is that particular one though
[15:19:49] <PJBoy> yeah, and it makes sense
[15:20:10] <PJBoy> alignment is wrong, it can't dereference it and use its value, it doesn't recognise it as a null pointer
[15:20:27] <ville> PJBoy: nah. just make it ub, no  need ot be overly protective about it
[15:20:37] <PJBoy> constexpr doesn't allow UB
[15:21:08] <Haohmaru> we need something in the middle between UB and legit behavior ;P~
[15:21:16] <PJBoy> {} constexpr int x = INT_MAX + 1;
[15:21:16] <geordi> error: overflow in constant expression
[15:21:43] <ville> PJBoy: sure. point was make it not needed to be diagnosed
[15:21:50] *** Joins: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com)
[15:21:54] <lpapp> hi, is there an option to pass to -Werror= to turn override warnings into errors?
[15:22:13] *** Quits: proller (~p@2a02:6b8:b081:b704::1:19) (Ping timeout: 240 seconds)
[15:22:16] <PJBoy> eh I like disallowing UB in constexpr stuff
[15:22:27] <LordKalma> if your library writer hardocoded that, chose another library
[15:22:32] <PJBoy> plus it really doesn't look like it would be useful in constexpr stuff
[15:22:50] <ville> PJBoy: embedded where you know addresses, could possibly lead to better codegen
[15:23:23] *** Joins: sigma_ (~sigma@5.119.242.251)
[15:23:32] <PJBoy> think it would compile just as well with no constexpr
[15:24:00] <PJBoy> possibly with constexpr calculations for those ints prior to casting them
[15:24:36] <ville> can't use as a non-type template argument
[15:24:44] <PJBoy> ohh
[15:24:44] <LordKalma> in other discussions. I was looking at the FFT algorithm. Radix-2 takes the elements i and N/2+i from source and compute i and N/2+i in the destination. Doesn't this result in horrible cache locality?
[15:25:05] <PJBoy> NTTPs don't need to be constexpr though
[15:25:12] <LordKalma> you have to effectively iterate 4 "spans" at once
[15:25:21] <PJBoy> they need to be "structural" IIRC
[15:26:24] <ville> Haohmaru: did you ever look at what odin whatshisface does? he has done bunch of stuff in this area
[15:26:41] <Haohmaru> who?
[15:26:47] <ville> odin whatshisface
[15:27:22] <ville> odin holmest i may recall it was?
[15:27:25] <ville> holmes
[15:27:33] <PJBoy> bah, doesn't work for NTTP anyway :(
[15:28:08] <PJBoy> { f<p>(); } auto p = (int*)0x666; template<auto& p> void f() { BARK; } // can use an NTTP reference though
[15:28:09] <geordi> f() [with auto& p = p]
[15:28:36] <PJBoy> that seems potentially good enough
[15:28:58] <PJBoy> unless you like to declare your hardcoded pointers in several places
[15:29:56] <ville> anyways this dude: https://www.youtube.com/watch?v=6_TwLYITKdg (haven't watched that particular video)
[15:30:00] <LordKalma> #define RAX (int*)0xABBA
[15:30:03] <LordKalma> oh sorry
[15:30:09] <LordKalma> #define RAX ((int*)0xABBA)
[15:30:41] <PJBoy> I'll take a chance on that
[15:30:52] <Haohmaru> ville well, no, i can't watch pootube here, i'll look at it @home
[15:31:37] <ville> at one point he was working on something that tried to generate c++ from manufacturer spec files, but that was years ago. no idea if that went anywhere
[15:32:10] <Haohmaru> i'm doing that in my svd parser (it's still very early)
[15:32:45] <PJBoy> singular value decomposition?
[15:33:12] <Haohmaru> and for now, i am using the extern+inlineasm sketchy scheme to declare the peripherals/registers
[15:33:31] <Haohmaru> PJBoy ARM/CMSIS SVD
[15:33:46] <Haohmaru> those xml files that describe MCUs
[15:33:50] <PJBoy> > System Viewer Description
[15:33:58] <ville> he had some kind of scheme that looked very template-y, not that's necessarily great in of it self. build times and whatnot
[15:34:02] <Haohmaru> yeah, $whatever it stands for
[15:34:30] <PJBoy> I never knew about those before
[15:34:51] <Haohmaru> how else do you think those device headers are created ;P~
[15:34:57] <ville> interns
[15:35:02] <PJBoy> manually, yeah
[15:35:14] <ville> the answer to any manual labour is always: "interns"
[15:35:27] <Haohmaru> they probably write the .svd
[15:35:40] <Haohmaru> but the .h files are auto-generated
[15:36:05] <PJBoy> > A powerfull construct in data structures of the C programming language is the array
[15:36:14] <Haohmaru> this isn't some 100-line .h file you know
[15:36:21] <ville> the sole purpose of the university system is to provide the industry with never-ending supply of interns
[15:36:26] *** Parts: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com) ()
[15:36:28] <PJBoy> bahaha
[15:36:49] * Haohmaru hasn't gone to university
[15:36:56] <Haohmaru> should i feel good or bad?
[15:37:09] <Haohmaru> or <both.gif>
[15:37:37] <PJBoy> apathetic
[15:37:53] <Haohmaru> :|
[15:38:02] <PJBoy> good
[15:38:15] <Haohmaru> 8|
[15:38:18] * Haohmaru intensifies
[15:39:42] <ville> doesn't really matter. it's certainly not for everybody. carmack did high school?
[15:40:17] <ville> and he's one of the bigger names in his field
[15:40:19] <TinoDidriksen> High school is sufficient. You do need HS math, but more than that is only for really complex tasks.
[15:40:46] <PJBoy> carmack's old though
[15:40:49] <Haohmaru> i've lost the war with math in 5th grade
[15:41:06] <PJBoy> I've never seen a compsci job in the UK that doesn't require a degree
[15:41:18] <Haohmaru> but i had to learn math due to DSP
[15:41:41] <Shell> PJBoy: I've seen a ton of programming jobs in the UK that don't require a degree
[15:41:46] <ville> PJBoy: he was ~20 when he did doom, ~25 when he did quake
[15:41:48] <Haohmaru> because i wanted to fiddle with sound, and pixels, and other things
[15:42:00] <PJBoy> ville, my point was times were different in the 90s
[15:42:35] <PJBoy> now it seems like employers want degrees even if they mock graduates for not knowing anything
[15:42:46] <PJBoy> although I acknowledge that Shell has seen otherwise
[15:42:57] <ville> PJBoy: right. yeah oculus had to reword their job advertizement when carmack pointed out that he wouldn't meet them and he was the cto(?)
[15:43:00] <PJBoy> so I guess I'm looking in the wrong places
[15:43:10] <PJBoy> ahahaha
[15:44:02] <PJBoy> I would 100% agree that compsci degree doesn't give you much in terms of employable skills
[15:44:14] <PJBoy> so it should be optional
[15:44:56] <PJBoy> you do get exposed to lots of concepts though, which I don't think I would have otherwise explored
[15:45:41] <Shell> also, and this upsets me a lot, but the list of requirements for most jobs are... very flexible. they're often written with the assumption that people will apply even if they don't meet the requirements, and the requirements are therefore for The Perfect Candidate.
[15:45:58] <Shell> it's a bad word.
[15:46:00] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[15:46:17] <PJBoy> I've noticed that too
[15:46:48] <Shell> I would not be qualified for my job by about 10 years of experience if I'd applied to it normally. :)
[15:46:55] <Shell> 10 years of experience and a degree
[15:47:14] <Haohmaru> minimum 20 years experience in the same field, but you should be 25 years old preferably
[15:48:59] <cbreak> I work at a research lab that is close to a university, and interns are quite common here. Also post-docs, and PHD students
[15:49:02] <cbreak> and master students
[15:49:11] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Ping timeout: 252 seconds)
[15:49:19] <Haohmaru> o hai cbreak
[15:49:20] <cbreak> ... and the team I'm in gets to clean up / wrap / rewrite / deal with all that code ... fun times
[15:49:38] <Shell> fun
[15:49:48] <cbreak> many of the students are really good. Some aren't.
[15:50:02] <Haohmaru> we had some university folks hired here to gain "experience" .. i had to fix the boards after they solder them x_x
[15:50:08] <Haohmaru> also "fun" times
[15:50:31] <cbreak> Personally, I'm really happy I got a degree. I learned a lot.
[15:50:41] <PJBoy> I wish they taught us to solder
[15:50:52] <Haohmaru> imma teach you PJBoy ;P~
[15:51:02] <cbreak> PJBoy: that's what electrical engineering degrees are for
[15:51:13] <Haohmaru> you can watch some of my videos for inspiration
[15:51:15] <PJBoy> nah I'll go visit Haohmaru
[15:51:27] <Haohmaru> i teach ghetto soldering
[15:51:32] <PJBoy> I may or may not be going to Bulgaria this summer
[15:51:47] <Haohmaru> btw, today masks are off here
[15:51:53] <Shell> welp
[15:52:09] <Haohmaru> not just today i mean, and the green certificates
[15:52:17] <PJBoy> masks have been de facto off here since 2020
[15:52:21] <Haohmaru> so.. we're open
[15:52:21] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:52:38] <Haohmaru> PJBoy they were required for indoor public places
[15:52:52] <PJBoy> on paper, yeah
[15:53:32] *** Quits: Schrostfutz (~Schrostfu@dhcp-214-0.vpn.tu-berlin.de) (Ping timeout: 260 seconds)
[15:53:53] <PJBoy> I keep a framed picture of a person wearing a mask on my desk to remind me what it looks like
[15:54:05] <Haohmaru> but i mean, i use this single-use mask.. i've changed perhaps 4 or 5 from the beginning of the whole thing (only because my beard f*cks them up)
[15:55:02] <Haohmaru> afaik in some other countries you gotta use only the fancy masks with the filters
[15:56:13] <Haohmaru> PJBoy irc smileys to the rescue :#)
[15:56:23] <cbreak> I have a fancy reusable multi-layer cloth mask. And I intend to continue to use it in public transport...
[15:56:44] <cbreak> also reduces the chance people will talk to me, so ... :D
[15:56:50] <Haohmaru> >:)
[15:56:58] <PJBoy> I've gotten into the unconcious habit of putting on my mask before going outside every time
[15:57:06] <Haohmaru> same
[15:57:07] <Shell> same
[15:57:10] <Haohmaru> thus i have it today too
[15:57:14] *** Joins: proller (~p@2a02:6b8:b081:1::1:2b)
[15:57:27] <Haohmaru> it's like putting on my shoes, but this is a "shoe" for the face
[15:57:29] <Shell> I was in Prague this week where mask mandates have been removed except for in public transport, was super weird.
[16:02:20] <Haohmaru> well, in the bus, the 1.5-2m distance rule just can't work
[16:05:51] *** Quits: proller (~p@2a02:6b8:b081:1::1:2b) (Ping timeout: 250 seconds)
[16:06:17] *** Quits: paul424 (~tom@ip-5-172-232-59.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[16:08:03] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Remote host closed the connection)
[16:09:07] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Remote host closed the connection)
[16:16:11] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[16:16:14] *** Joins: vnf_ (~vnf@85.175.252.98)
[16:16:34] *** Quits: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Remote host closed the connection)
[16:18:22] *** Quits: vnf (~vnf@85.175.252.98) (Ping timeout: 272 seconds)
[16:19:01] *** Joins: proller (~p@2a02:6b8:b081:b705::1:15)
[16:30:44] *** Quits: nq (~nq@195.254.133.193) (Quit: Leaving)
[16:38:18] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[16:39:16] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:41:27] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[16:48:17] *** Quits: gargus (~user@61.68.76.222) (Quit: Leaving)
[16:51:29] *** Joins: markong (~kvirc@213.146.188.203)
[16:56:43] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[17:00:32] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[17:02:25] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[17:07:56] *** Joins: Gvidon (~Gvidon@user/gvidon)
[17:09:53] *** Joins: paule32 (~paul@user/paule32)
[17:10:45] <paule32> hello, i have two files:  https://dpaste.com/BPGLQUVRW (locales.hh), and  https://dpaste.com/28925HR6H  (config.hh)
[17:11:06] <paule32> but it seems, that the option/define LANG_DEU would not be accepted
[17:11:37] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[17:14:27] <ville> paule32: http://coliru.stacked-crooked.com/a/97e8e276dc62fb7d
[17:15:22] <ville> perhaps "#if defined" is not the construct you meant
[17:15:54] <paule32> if you can realize it, too
[17:15:56] <paule32> ?
[17:16:11] <Gvidon> Just remove "defined"
[17:16:14] <ville> i can't parse that
[17:16:28] <paule32> you (me) define ABC 0, but #if == 1
[17:16:45] <ville> #if defined is not the same as #if
[17:16:56] <Gvidon> "#if defined" checks if the macro is defined at all. It doesn't matter what value it has
[17:16:57] <rpav> using the preprocessor is really not tool for the job _at all_
[17:18:45] *** Joins: seninha (~seninha@user/seninha)
[17:18:46] <paule32> Gvidon: thank you, it works
[17:19:12] <paule32> rpav: i only would decide, which version or language should be compile
[17:19:33] <paule32> i could use .mo files, but this blows up the application
[17:19:44] <Haohmaru> all your define are belong to us
[17:21:35] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[17:23:52] <rpav> paule32: https://godbolt.org/z/nE8E8fhGe or something
[17:24:01] <rpav> then you can map locale ot Lnang
[17:25:03] <Kill-Animals> What the?
[17:25:21] <paule32> cewl
[17:25:25] <paule32> thank you
[17:27:06] <Kill-Animals> https://mariusbancila.ro/blog/2022/04/01/cpp23-introducing-dynamic-types/
[17:27:13] <rpav> it's too bad you can't make the maps constexpr in 17 though
[17:27:19] *** Quits: Didgy (~np_sk@82.147.37.145) (Quit: Konversation terminated!)
[17:27:20] <Gvidon> Some people would consider two hashmap lookups for each string unacceptable
[17:27:32] <rpav> Kill-Animals: 404, and don't forget it's 4/1
[17:28:01] <Kill-Animals> rpav: Honestly I could think of better bait. April fools.
[17:28:04] <rpav> Gvidon: well of course you _wouldn't_
[17:28:39] <rpav> Gvidon: you would at a minimum initialize some struct Strings { string Copyright, ...; }; from the map and use that
[17:29:01] <Kill-Animals> rpav: I think dynamic typing in c++ is too far fetched for anyone te believe.
[17:29:21] <rpav> actually as i established yesterday making a simple constexpr map in 17 is fairly easy
[17:29:58] <Gvidon> Kill-Animals: I once thought the same thing about type checks in python and similar languages, but here we are
[17:30:23] <PJBoy> std::any is a dynamic type
[17:30:28] <PJBoy> what more do you wnt
[17:30:51] <Kill-Animals> Gvidon: oh boy. Python.
[17:31:04] <Kill-Animals> plastico: void * is the true dynamic type
[17:31:10] <Kill-Animals> oops
[17:31:13] <Kill-Animals> PJBoy:
[17:31:38] <PJBoy> it can't hold data member pointers
[17:31:45] *** Joins: pulse (~pulse@user/pulse)
[17:31:54] <Kill-Animals> Gvidon: Python I think has const now too. makes me question when its going to be feature parity with c++.
[17:32:19] <rpav> Gvidon, paule32: https://godbolt.org/z/ooozrY8Eh
[17:32:49] <rpav> note you have to do slightly more work to dynamically look up something by lang
[17:33:59] <Kill-Animals> Honestly why shouldnt I just have `QMap<void*, T>` ?
[17:34:00] <Gvidon> At which point even macros become a simpler and much more readable alternative
[17:34:15] <rpav> you could make macros to help there, but you would still not #ifdef
[17:34:37] <paule32> rpav: thank you
[17:34:49] <paule32> both options maybe good
[17:38:10] <rpav> i'd say i'd be surprised if there wasn't an actual robust constexpr localization library but .. there appears to possibly not be
[17:38:55] <rpav> the i18n section on awesome-cpp is very anemic
[17:41:35] <Gvidon> Normally, people who create translations don't know anything about constexpr or C++ at all. And they certainly don't want to write any template or preprocessor magic
[17:42:12] <rpav> yes, because the peopel creating translations are the ones doing that heh
[17:42:41] <rpav> i mean clearly the people writing translations are the ones implementing the gettext API and they prefer C
[17:42:57] <rpav> you know how translators are
[17:43:34] *** Joins: xkuru (~xkuru@user/xkuru)
[17:44:06] <LordKalma> in Qt you generate a translations file, ship is to someone that only has to do excel-level of tech work writing translated strings in front of the keys
[17:44:12] <LordKalma> and get the file back and commit it
[17:45:06] <rpav> sure .. if you've got something at the level of "i have a group of translators", even if you're using a constexpr map, you're going to have a separate tool that generates the files from some input
[17:45:14] <Gvidon> So, you have a separate human-readable file with translations and you need to generate valid C++ from it in order to have a "constexpr localization library". Why bother?
[17:45:37] <Gvidon> Just so that you could call your library modern?
[17:45:57] <rpav> i see you're not very familiar with constexpr
[17:47:03] <rpav> (e.g. in cases where you want the advantages of paule32's original compile-time language selection, constexpr could resolve every string at compile time to a string_view for you)
[17:47:20] <Kill-Animals> LordKalma: Translations seem so tedious regardless. Ive never had to do them, but don't you have to wrape all text in a "tr()" function or somtehgin?
[17:47:33] <rpav> (and that still applies to a lot of things .. mobile apps, consoles, steam games, ...)
[17:48:06] <rpav> Kill-Animals: in qt yeah but qt sucks and is not the best model for this in any regard
[17:48:42] <rpav> like 20 years ago you did what you could
[17:49:07] <Kill-Animals> rpav: No you are wrong. Qt is freaking awesom. Its libraries are faster than stdlib
[17:49:23] <Kill-Animals> Qt #1
[17:49:23] <rpav> haha
[17:49:24] <rpav> no
[17:49:29] <Kill-Animals> haha, yes.
[17:50:16] <Kill-Animals> bruh you really want to haev a nerd fight with me right now? Cause I'm warning you, I talk to hot babes on the internet all day and I think you might be a little bit jealous.
[17:50:46] <rpav> no, i think i'll just add you to my fools list and ignore your blathering
[17:50:59] <rpav> bam
[17:51:00] *** Joins: Mat_42 (~mat_42@194.12.130.217)
[17:53:16] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:80cb:fbaa:9eb3:d23c) (Ping timeout: 245 seconds)
[17:55:11] <rpav> in any case people keep rewriting everything from Q* to std:: for improved performance and less bloaty data
[17:55:23] *** Quits: Mat_42 (~mat_42@194.12.130.217) (Ping timeout: 260 seconds)
[17:55:32] <rpav> https://stackoverflow.com/questions/64803066/benchmarking-qt5-and-c17-containers-for-perfomance-and-memory-usage <- this was 2020
[17:56:24] <rpav> though probably little of that matters beyond vector and maybe map
[17:57:17] <rpav> the real killer they don't benchmark is QString, and QString is all wchar and thus a pretty big loss just due to the constant conversion back and forth to do anything with it
[17:57:53] <Gvidon> rpav: I know what constexpr is. I just don't think that i18n is a good application for it
[17:58:19] <rpav> Gvidon: then you don't really know what constexpr is, or how i18n might be applied :P
[17:58:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:58:32] <rpav> there is still plenty of reason to produce language-specific binaries
[17:59:13] <Gvidon> Oh well, it seems I really know nothing. That's just too bad
[17:59:52] <rpav> not to mention any _other_ use of constexpr strings that might result in strings that end up being shown at runtime, _other_ constexpr string maps that you might want to map localized strings to some other value, and so on
[18:03:51] <Gvidon> I believe the idea of embedding data (including strings) into binary and using it from code is as old as computers and it certainly is much older than C++ or constexpr. And in some cases it's exactly what you want to do. But i18n? I dunno, maybe in some rare cases
[18:07:06] *** Quits: Gvidon (~Gvidon@user/gvidon) (Quit: Leaving...)
[18:10:51] <paule32> rpav: this is a specialized template ?
[18:11:08] <rpav> paule32: in the constexpr case
[18:11:16] <paule32> yes
[18:11:35] <rpav> the approach best to use is what fits your use case though, and you have a wide range of options
[18:11:54] <paule32> thanks for this idea
[18:12:09] <rpav> the constexpr version is probably the hardest to use; it gives you strings earliest and most-statically, but that's only useful if you need them like that
[18:12:47] <paule32> as i can see, you use ::Copyright template
[18:12:54] <paule32> this must be done for all ?
[18:13:07] <paule32> not a template possibility
[18:13:35] <rpav> paule32: you could do more or less the same as with the dynamic lookup version, and have a `struct Strings { string_view Copyright, ...; };` and initialize that with the tr_EN<Copyright>
[18:14:04] <paule32> okay
[18:14:52] <rpav> though tr_EN<Copyright> is pretty easy to type, or tr<Copyright> where tr gets defined based on the locale you're building for
[18:15:55] <rpav> but this assumes building for locale is a good idea in your case .. with a struct you could build for everything and still dynamically choose, and still have constexpr access _if_ you need it, but it's also still ugly to define strings without additional tools
[18:21:54] <paule32> i see, you (me) can use default parameters
[18:22:12] <paule32> template <T, T2 = type>
[18:23:03] <paule32> template <T, T2 = StringType::Lang = StringType::EN>
[18:23:30] <paule32> template <T, StringType::Lang = StringType::EN>
[18:26:25] <rpav> probably don't
[18:26:41] <rpav> if you want a "default" then define it as a constexpr variable
[18:27:21] <rpav> probably really consider hard before using that method though.. dynamic lookups give you a lot more flexibility and are considerably easier to deal with
[18:28:22] <rpav> constexpr would be nice for like embedded or minimal binary size but most modern machines are unlikely to benefit that much
[18:29:28] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[18:35:09] <acidtonic> anyone here familiar with compiler .def files and using those to mix compilers?
[18:35:40] <paule32> .def are for .dll (windows dynamics libs)
[18:35:44] <sigma_> hi, how increase accuracy in my code https://wandbox.org/permlink/AjxF3yu29TTWAAcP my percentage never reach to 100 so this is a problem for time too. my time calculation is related to percent
[18:35:53] <acidtonic> trying to use mingw gendefs to produce a .def file to adjust a few symbols to link some complex multi-compiler blob
[18:37:08] <paule32> first looking to dlltool
[18:41:51] *** Joins: y0m0n (~NA@5-12-91-184.residential.rdsnet.ro)
[18:42:01] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 245 seconds)
[18:42:50] *** Quits: seifeslimene (~seifeslim@197.2.39.226) (Quit: Client closed)
[18:43:16] *** Joins: seifeslimene (~seifeslim@197.2.39.226)
[18:44:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:44:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:44:55] *** ChanServ sets mode: +v npaperbot
[18:45:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:45:32] <acidtonic> paule32, My goal is to do the nasty job of making a shim between a vc2022 and a mingw dll boundry that unfortunately has to share a few C++ classes with pod constructors/destructors. I link successfully the other C symbols but wanted to make a .def file to translate the constructor/destructor calls using cdecl (other side I believe is looking for stdcall)
[18:46:15] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[18:47:33] <paule32> acidtonic: for C++ functions, gnu use other dangling as msvc
[18:47:48] <paule32> you could use normal C functions, and export them
[18:48:07] <paule32> or gcc -shared -fPIC
[18:48:17] <paule32> this will help to build a .dll
[18:48:44] <paule32> then you could use win32api LoadLibrary, and GetProcAddress
[18:48:58] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:49:13] <paule32> to load the .dll, get the address of a function, and close the .dll handle if you dont need the dll anymore
[18:49:39] <paule32> for commonly, the dll files will be open only once, but not close automatically
[18:49:43] <paule32> i dont know why
[18:50:49] <paule32> so, you can "extern C" your c++ functions as wrapper
[18:51:01] <paule32> also C functions, that call the C++ functions
[18:51:48] <paule32> or, you collect a struct/class of the functions, you named, and map it to msvc function names, then call it
[18:52:27] <acidtonic> I wish I could use C linkage but it's a very complicated issue, I am likely going to need some kind of ninja workaround thus my deep dive into .def files. I've produced a few .a's that link using it but stuck on the C++ constructor mapping
[18:52:31] <paule32> that is a huge bootstrap, but i see no change else
[18:53:14] <paule32> you can use pointers
[18:53:46] <paule32> also in a c++ file, you define a class to the ctor, and export this symbol, so you get the address
[18:53:47] *** Quits: y0m0n (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 250 seconds)
[18:53:47] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[18:53:47] *** Inline__ is now known as Inline
[18:54:02] <acidtonic> paule32, I was thinking just add a new shim library that exports the symbol mingw looks for, then call the other symbol. But was told basically for that .def files are easier
[18:55:29] <paule32> i have done this a while ago, but i dont remember me on details, i think, i have write a __asm__ block, that "call the function that was involved with .dll
[18:56:20] <paule32> __asm__(".globl func");
[18:56:26] <paule32> __asm__("func:");
[18:56:40] <paule32> __asm__("call fooo_mscVoid");
[18:56:43] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[18:56:45] <paule32> __asm__("ret");
[18:58:00] *** Joins: Mat_42 (~mat_42@2001:1458:204:1::101:b65c)
[18:58:00] <paule32> but you should be care about this, the new windows 11 functions use 2 arguments for its functions:  foo(selfref,firstarg, ...
[18:58:22] <acidtonic> paule32, Considering I only have a few small classes moving across, this may actually be the path of least resistance, I'm looking at about 5 classes
[18:59:29] <paule32> you have the sources ?
[18:59:57] <acidtonic> I do, they *must* be built with vc2022
[19:00:14] <paule32> but they have mingw dependcies
[19:00:15] <paule32> ?
[19:00:43] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[19:00:57] <acidtonic> No I have to link it with an app built with mingw afterwards
[19:01:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 246 seconds)
[19:01:37] <paule32> then use rpc
[19:02:15] <paule32> remote procedure call
[19:02:33] *** Quits: Mat_42 (~mat_42@2001:1458:204:1::101:b65c) (Ping timeout: 260 seconds)
[19:02:43] <paule32> this is an old protocol, but windows use it for it remote software very often
[19:03:04] <paule32> and all C# wrapper use rpc to call C++ Com+
[19:03:33] <paule32> original, rpc coming from *nix
[19:03:57] <paule32> so, you can coding a app as server on *nix, and call the win app
[19:04:05] <paule32> and vice versa
[19:04:27] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:05:55] <paule32> you need to compile a script file, where all the calling functions are keept
[19:06:17] <paule32> then it give tool(s) to create final code for this
[19:06:31] <paule32> then you can link
[19:06:33] <acidtonic> paule32, The other thought is trying to maybe adjust the header *after* compilation with mvsc, to annoate the symbols when mingw builds hit the same header such that the constructors match when linking
[19:07:08] <acidtonic> paule32, the linker error comes from mingw parsing the header from the mscv lib and not looking for the right symbol post-mangling
[19:07:58] <paule32> i know, the .a archive format is the same. but the .o bjects have other headers, and function names (the arguments)
[19:08:26] <paule32> c++ functions under gcc/mingw have Zn... under msvc $..
[19:09:01] <paule32> so, you can see the different things - if you view a .o files of mingw, and a .obj file of msvc
[19:09:02] <paule32> ?
[19:09:16] <acidtonic> One example I need to map _ZN2ab3ABCC1Ev -> ??0ABC@ab@@QEAA@XZ
[19:10:02] <paule32> a very devil way:  __asm__("_ZN2... : call ??OA...
[19:11:03] <acidtonic> paule32, I at least am glad to have some options, I think I'm going to try munging the .def stuff a bit more since it won't mess up what I have right now and it's a largish project
[19:11:24] <paule32> for gcc, it give a demangler, that help to print out the argument types, then you could be transform it to the new function / ctor name
[19:12:11] <acidtonic> paule32, I use to use c++filt for that or nm -C but in the linker I only get the unmangled name when it complains
[19:12:35] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 246 seconds)
[19:12:40] <acidtonic> paule32, I thought I could use some flag before the dll to say it's windows linkage, like -Wl,subsystem,windows
[19:12:58] <acidtonic> no go, likely due to the name coming from a header on mingw's side so it technically couldn't know
[19:12:58] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[19:13:00] <paule32> that is compiler specified
[19:14:09] <acidtonic> I appreciate the help, I have been finding very few who can help on this. Doing "verboten" things is hard to get support for ;)
[19:15:09] <paule32> if you would have a look with eyes to "asmjit"
[19:15:27] <paule32> this way, you can use disassemble your code off mingw
[19:15:36] <paule32> and inject it to msvc project
[19:15:40] *** Joins: pulse (~pulse@user/pulse)
[19:15:51] <paule32> it is a header only lib, templated
[19:16:47] <paule32> only 200 kb for all
[19:16:49] <acidtonic> paule32, any idea how safe that is if the mingw side has mostly all of gtk3 dependencies (gobject-instrospection, gtkmm, gdlmm, etc?)
[19:16:51] <paule32> and it is very fast
[19:17:03] <acidtonic> I know the gobject/sigc slot stuff is *interesting*
[19:17:38] <Alipha> sigma_: I have no idea what this "work" is supposed to be doing. I'm unclear what all these 10's mean (do they all mean the same thing?) And pretty much all your calculations seem suspect (lines 79, 81, 100, 102)
[19:17:54] <paule32> with asmjit, you can provide c++ code, and text files, you can add label, functions (that are called internally, but used in asmjit code
[19:18:32] <paule32> so, you have the full control of the functions
[19:18:40] <paule32> that is like a sandbox
[19:19:10] <paule32> and by us, this is the same, as you hook the .dll functions
[19:19:40] <paule32> and if you have luck, you can use asmjit in msvc, too
[19:19:46] <paule32> it used ansi c++
[19:20:15] <paule32> play a little bit with it, and you get the poweer
[19:20:21] <paule32> : )
[19:20:38] *** Joins: Mat_42 (~mat_42@2001:1458:204:1::101:b65c)
[19:21:31] <acidtonic> That looks very cool, reminds me somewhat of angelscript (but that is more C++'s lua)
[19:21:48] <paule32> yes, all it is c++
[19:21:59] <acidtonic> paule32, I'm going to go play for awhile, I'll pop back in if I run into issues Thanks
[19:21:59] <paule32> you have a builder, assembler, compiler ...
[19:22:59] <paule32> np
[19:24:04] <sigma_> Alipha: the alghoritm is like a chain and all 3 object are link to gether my target is to calculate avrage time to process, how many time left to close my program? and get percent proceess
[19:25:17] *** Quits: Mat_42 (~mat_42@2001:1458:204:1::101:b65c) (Ping timeout: 260 seconds)
[19:27:26] <sigma_> Alipha: the work call othe object and timer and sum time from start chain and return to begin it and each process time* percent so maybe i get total left time to done total process
[19:29:28] <sigma_> and the in end is total process time so i can compare my accuracy
[19:30:44] <sigma_> like my program end in 300ms but in first guess 600ms or 200ms
[19:32:15] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:33:37] <sigma_>  https://wandbox.org/permlink/AjxF3yu29TTWAAcP
[19:37:45] *** Joins: filename (~kilitary@188.242.105.134)
[19:56:30] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:57:48] *** Quits: filename (~kilitary@188.242.105.134) (Remote host closed the connection)
[20:07:45] *** Quits: Oxyd (~oxyd@user/oxyd) (Remote host closed the connection)
[20:09:56] *** Quits: seifeslimene (~seifeslim@197.2.39.226) (Quit: Client closed)
[20:13:56] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Remote host closed the connection)
[20:14:48] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[20:17:00] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[20:19:39] *** Joins: meator (~meator@user/meator)
[20:28:27] <Haohmaru> did someone say angelscript
[20:30:35] <rpav> no one ever says angelscript
[20:30:41] <Friithian> a what script
[20:30:46] <Shell> damn, that brings back memories
[20:32:48] <paule32> hui, g++ -std=c++20 -O2 -c locales.cc  => 15 kb object file
[20:34:57] *** Quits: meator (~meator@user/meator) (Ping timeout: 250 seconds)
[20:34:58] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[20:35:57] *** Quits: jsbach (~jsbach@2a01:c22:a5a8:3a00:4620:618:aeb8:6326) (Ping timeout: 256 seconds)
[20:36:09] *** Joins: Oxyd (~oxyd@user/oxyd)
[20:36:30] *** Joins: jsbach (~jsbach@2a01:c22:a5a8:3a00:66bd:f474:9df9:3d84)
[20:42:49] <paule32> without debug infos, only liker infos
[20:42:53] <paule32> linker
[20:44:31] *** Joins: jokoon (~eio@2a01:e0a:542:e160:a9dd:f09d:d3ef:9ec4)
[20:44:38] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[20:44:41] <acidtonic> I said angelscript :)
[20:44:54] <acidtonic> is that a fight club like rule here? haha
[20:45:02] <paule32> no
[20:45:32] <paule32> i wonder me, that c++ can be huge in file size
[20:45:39] <paule32> objects, binary
[20:48:49] <rpav> if you compile a lot of strings into a binary they have to go somewhere
[20:49:03] <rpav> also if you're using the constexpr one, you're defining a lot of long wordy types
[20:49:17] <paule32> hmm
[20:49:43] *** Joins: xuxx (~xuxx@86.228.71.37.rev.sfr.net)
[20:50:18] <rpav> although if they're constexpr in a header and you're -O2 and using the strings directly, there shouldn't be a lot of need to keep typenames around
[20:50:32] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[20:52:01] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:53:02] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[20:53:08] *** Joins: paul424 (~tom@ip-5-172-233-226.multi.internet.cyfrowypolsat.pl)
[20:54:55] *** Joins: zmt00 (~zmt00@user/zmt00)
[21:05:52] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[21:06:35] *** Joins: epony (epony@user/epony)
[21:09:25] *** Joins: jokoon2 (~eio@2a01:e0a:542:e160:2015:2191:8e5c:280f)
[21:13:21] *** Quits: jokoon (~eio@2a01:e0a:542:e160:a9dd:f09d:d3ef:9ec4) (Ping timeout: 256 seconds)
[21:15:14] *** Quits: proller (~p@2a02:6b8:b081:b705::1:15) (Remote host closed the connection)
[21:17:11] *** Joins: proller (~p@2a02:6b8:b081:b48c::1:a)
[21:19:55] *** Quits: sigma_ (~sigma@5.119.242.251) (Quit: Konversation terminated!)
[21:22:28] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:dc59:ac15:1fef:67b2)
[21:23:31] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a144:7ffd:568f:4ceb) (Ping timeout: 260 seconds)
[21:23:46] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Quit: The Lounge - https://thelounge.chat)
[21:28:28] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[21:29:03] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[21:29:06] *** Quits: proller (~p@2a02:6b8:b081:b48c::1:a) (Ping timeout: 245 seconds)
[21:29:33] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[21:31:34] <acidtonic> paule32, wow, so I think I have traction, likely needs more work but I got one symbol to disappear from the undefines. I used gendef on a dll to get a .def, then I opened that with vim and found the symbol, I went to my linux machine and opened the same library, found the gcc mangled name and inside the .def put gccname = msvcname, dlltool to produce .a and it links!
[21:31:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[21:32:12] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Client Quit)
[21:32:39] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[21:33:05] <CarloWood> I'm using this member function:
[21:33:07] <CarloWood>   boost::intrusive_ptr<PipelineCache const> move_pipeline_cache() { return std::move(m_pipeline_cache_task); }
[21:33:26] <CarloWood> I'm not really happy with the function name `move_pipeline_cache` ...
[21:33:31] *** Quits: jokoon2 (~eio@2a01:e0a:542:e160:2015:2191:8e5c:280f) (Quit: Leaving)
[21:33:34] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Client Quit)
[21:33:43] <CarloWood> Maybe `extract_*` or something else?
[21:35:37] <CarloWood> On one hand it would nice when it makes clear a 'std::move' is involved, but on the other hands a function called `move_foo()` doesn't really describe that it will return the thing, pulled out from the object. It sounds more like an order to move something from A to B.
[21:37:36] <CarloWood> intrusive_ptr itself has a 'detach' that returns the object:   T* detach()
[21:37:50] <CarloWood> So maybe I should use `detach_pipeline_cache()`.
[21:38:41] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[21:40:44] *** Joins: proller (~p@85.30.219.42)
[21:41:40] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:43:06] <paule32> https://godbolt.org/z/no1fGjKoG
[21:43:15] <paule32> i get undefined reference
[21:44:40] <CarloWood> That's because you didn't define (instantiate) it.
[21:45:03] <CarloWood> All static members must be defined outside the class.
[21:45:19] *** Quits: proller (~p@85.30.219.42) (Ping timeout: 256 seconds)
[21:45:23] <paule32> okay, thx for the information
[21:45:41] *** Joins: proller (~p@2a02:6b8:b081:b70c::1:25)
[21:45:47] <acidtonic> quick question, is there a hidden flag to ld to get mangled names too in the undefines list? trying to script the rest of mine without having to manually go mangle names to figure out the symbol mapping. I know how to go the other direction with C++filt
[21:46:35] <paule32> i saw a tool on jithub, dont remember, try google
[21:47:21] <CarloWood> paule32: https://godbolt.org/z/cqn6GxdE5
[21:49:59] <paule32> thank you very much, this was the key brick to rpav solution
[21:52:40] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[22:05:14] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:09:37] *** Quits: Alipha (~AliphaX@user/alipha) (Ping timeout: 240 seconds)
[22:10:53] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[22:14:10] *** Joins: filename (~kilitary@static.246.201.46.78.clients.your-server.de)
[22:16:33] *** Quits: Oxyd (~oxyd@user/oxyd) (Quit: ZNC 1.8.2 - https://znc.in)
[22:18:40] *** Joins: _filename (~kilitary@188.242.105.134)
[22:20:32] *** Joins: RazielXYZ (~Raziel@user/raziel)
[22:21:01] *** Quits: filename (~kilitary@static.246.201.46.78.clients.your-server.de) (Ping timeout: 256 seconds)
[22:23:48] *** Quits: RazielZ (~Raziel@user/raziel) (Ping timeout: 272 seconds)
[22:24:50] *** Joins: Oxyd (~oxyd@user/oxyd)
[22:31:01] <xkoncek> how would you name a function that does the same as function `visit` except this one is not taking a template function object but a type-erased version (something like std::function)
[22:32:16] <rpav> dynamic_visit but i'd be more curious how you _implement_ this if it's not unintrusive
[22:33:00] <rpav> using that definition of "type erased" is harmful
[22:33:07] <xkoncek> rpav it is exactly that utility::Invoker type that i sent you few days ago
[22:33:30] <xkoncek> type-erased lambda i uess
[22:35:16] <rpav> i don't even think that's correct usage
[22:35:26] <rpav> this is not particularly different than std::function anyway
[22:39:06] *** Quits: proller (~p@2a02:6b8:b081:b70c::1:25) (Ping timeout: 245 seconds)
[22:42:23] <xkoncek> std::function owns the whole lambda closure
[22:42:34] <xkoncek> invoker just points to it
[22:44:01] <rpav> dangerous
[22:44:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:44:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:44:55] *** ChanServ sets mode: +v npaperbot
[22:45:31] *** Quits: _filename (~kilitary@188.242.105.134) (Remote host closed the connection)
[22:48:08] *** Joins: Minvera (~Minvera@user/Minvera)
[22:48:25] <Minvera> How can I get pthread_mutex_unlock to work with a static class member variable?
[22:49:20] <Minvera> this is giving me errors: pthread_mutex_unlock(&Foo::mutex)
[22:49:57] <Minvera> Gives me: undefined reference to 'Foo::mutex'
[22:50:12] *** Joins: Gvidon (~Gvidon@user/gvidon)
[22:50:31] <Minvera> When I have a class Foo { static pthread_mutex_t mutex; }
[22:50:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:51:34] <CarloWood> Add `pthread_mutex_t Foo::mutex;` to some .cpp file
[22:51:49] <Minvera> why is that needed?
[22:52:11] <CarloWood> static is not part of the object. Its like a global variable.
[22:52:12] *** Quits: Gvidon (~Gvidon@user/gvidon) (Read error: Connection reset by peer)
[22:52:14] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a82f:82ca:333f:a964)
[22:52:42] *** Joins: Gvidon (~Gvidon@user/gvidon)
[22:53:14] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:dc59:ac15:1fef:67b2) (Ping timeout: 260 seconds)
[22:54:40] <Minvera> so I need to declare the same variable in a header and cpp? that's so dumb
[22:55:01] *** Joins: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net)
[22:55:02] *** Quits: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net) (Changing host)
[22:55:02] *** Joins: Alipha (~AliphaX@user/alipha)
[22:55:11] <rpav> Minvera: in c++17, you can use inline
[22:55:32] <rpav> `struct C { inline static pthread_mutex_t mutex; };`
[22:56:44] <rpav> but make sure you have /GLTD or whatever LTO option if you're using VS, they have/had a bug
[22:57:01] <CarloWood> Then it will end up in every compilation unit (object file) and the linker will pick at random one to keep. If you put it in a .cpp you pick yourself.
[22:57:49] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[22:58:03] <CarloWood> It's exactly the same for template member variable though.
[22:58:39] <xkoncek> but unless you are doing weird stuff, there is nothing dangerous
[22:58:51] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:58:52] <rpav> that's more of a reason to use inline
[22:58:53] <CarloWood> no not dangerous
[22:59:21] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[23:00:28] <CarloWood> I put stuff in index (with git), but not everything. Now I want to compile that, just to check if it compiles.
[23:00:54] *** Joins: proller (~p@2a02:6b8:b081:b587::1:26)
[23:02:14] <CarloWood> I used to do say 'git stash', then compile and then 'git stash pop' - but that completely screws up the index :/. *Escpecially* if you make changes after the stash because it didn't compile.
[23:02:24] <CarloWood> stash pop is *really* dumb when putting things back.
[23:02:37] <CarloWood> I need a better way :/
[23:03:15] <rpav> i use git stash pop all the time and have never had an issue
[23:03:41] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 245 seconds)
[23:04:14] <CarloWood> Put an hour into 'git add -p' and add only half. Then try to use git stash / pop
[23:04:49] <rpav> D:
[23:05:38] <rpav> the idea of stash popping into a partially added tree is horrifying, though if the index is changed by pop that is definitely bad
[23:08:08] *** Quits: Inline (~Inline@p200300cd470b2600b0280ee525100d94.dip0.t-ipconnect.de) (Quit: Leaving)
[23:09:47] <rpav> hm, i think i have a definite real world case where composition+delegation would be vastly more appropriate .. not sure if the rest would solve this issue but
[23:10:15] *** Joins: Inline (~Inline@p200300cd470b2600b0280ee525100d94.dip0.t-ipconnect.de)
[23:16:49] <LordKalma> rpav, what does an inline static member means?
[23:18:41] <xkoncek> that it is defined right in the header
[23:19:04] <xkoncek> or... that for multiple translation units there will be exactly one instance
[23:19:27] <LordKalma> class members are already inline without any marking
[23:19:33] <LordKalma> or that doesn't apply to static members?
[23:19:45] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8be:80a5:9f91:16e)
[23:19:45] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8be:80a5:9f91:16e) (Changing host)
[23:19:45] *** Joins: skapata (~Skapata@user/skapata)
[23:19:58] <xkoncek> no, not to static
[23:21:34] <rpav> LordKalma: member _variables_ are not inline by default
[23:21:36] <Alipha> LordKalma: class foo { static int bar; }; /* this declares, not defines bar. you need: */ int foo::bar;
[23:21:45] <rpav> err, static ones anyway yeah
[23:22:17] <Alipha> class foo { inline static int bar; };  // now this is a definition of bar and you don't need `int foo:bar;` in a cpp file
[23:22:33] <paule32> where is my mistake:  https://godbolt.org/z/jsT4T3M4E  ??
[23:22:36] <rpav> i.e. it's less error-prone and maintenance effort
[23:23:18] <LordKalma> this langauage and its infinite rules.
[23:23:46] <rpav> no mostly just `inline` and its infinite correction of prior errors
[23:23:58] <Alipha> infinite rules would imply an infinitely-long standard
[23:24:20] <rpav> not if you have meta-rules that can produce other rules
[23:24:20] <fiesh> no, ZFC for example is an infinite set of axioms that is stated in a finite way ;)
[23:25:02] <rpav> yeah, i mean you could consider "integers" as "an infinite set of rules" defined finitely
[23:25:19] <rpav> of course C++ doesn't support those either, but ;)
[23:27:08] *** Quits: suki (~jimery@116.30.222.11) (Ping timeout: 265 seconds)
[23:28:51] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[23:28:54] *** Joins: suki (~jimery@116.30.222.11)
[23:33:59] <LordKalma> https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html
[23:34:01] <LordKalma> I hate this check
[23:35:59] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:2152:807b:19bb:89c5)
[23:36:11] <paule32> https://godbolt.org/z/hsh5sodxc
[23:36:21] <paule32> i don't get any output
[23:36:43] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a82f:82ca:333f:a964) (Ping timeout: 260 seconds)
[23:45:45] <rpav> LordKalma: "top level" is a weird term for that
[23:46:10] <rpav> also it's kinda lame you _can't_ usefully declare const value parameters
[23:46:35] <rpav> or wait, you can and they do/are
[23:47:07] <rpav> then that's a pretty terrible lint rule
[23:50:24] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[23:50:56] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[23:51:30] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[23:52:25] <CarloWood> rpav: https://stackoverflow.com/a/71711639/1487069
[23:52:34] <CarloWood> </community_service>
[23:53:47] <rpav> oh yeah, i use magit which generally makes it obvious what you're doing with stash too
[23:54:01] <rpav> i.e. `git stash` stashes both by default
[23:54:08] <LordKalma> well, const value params, after giving it a though, are indeed useless
[23:54:16] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[23:54:17] <LordKalma> since you copy them into the function
[23:54:29] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[23:54:29] <LordKalma> I mean, only if you wanted to declare the variable is const
[23:54:32] <LordKalma> idk
[23:54:37] <rpav> LordKalma: they're not useless if you want const values
[23:54:47] <rpav> "copying" values isn't necessarily slower
[23:54:49] <LordKalma> it's very OCD triggering that you can't have the same declaration and definition
[23:55:04] <LordKalma> so I still dislike the rule, because of that
[23:55:07] <LordKalma> lemme have the const ffs
[23:55:16] <Minvera> does if (myfunc()) only evaluates to true if the function is not 0? even if myFunc return -1, -2, or 5?
[23:55:27] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[23:55:37] <rpav> Minvera: try it and see
[23:56:17] *** Joins: RoKenn (~RoKenn@2001:a61:35f0:c501:8a2b:bf66:3cde:ed12)
[23:56:18] *** Quits: RoKenn (~RoKenn@2001:a61:35f0:c501:8a2b:bf66:3cde:ed12) (Changing host)
[23:56:18] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:58:49] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:90d4:1750:f22d:5ef2)
[23:59:23] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:2152:807b:19bb:89c5) (Ping timeout: 260 seconds)
