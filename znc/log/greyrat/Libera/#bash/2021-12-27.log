[00:00:01] *** Quits: PeGaSuS (ubuntu@user/pegasus) (Remote host closed the connection)
[00:00:12] *** Quits: zouhair (~zouhair@142.182.15.29) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[00:00:38] *** Joins: PeGaSuS (ubuntu@user/pegasus)
[00:03:54] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[00:09:44] *** Quits: Kyuzo68 (~Kyuzo@host-79-30-239-133.retail.telecomitalia.it) (Quit: Konversation terminated!)
[00:11:17] *** Joins: zouhair (~zouhair@142.182.15.29)
[00:13:57] *** Quits: Dotz0cat (~Dotz0cat@h223.11.31.71.dynamic.ip.windstream.net) (Ping timeout: 240 seconds)
[00:14:11] *** Joins: earendel (uid498179@user/earendel)
[00:15:13] *** Joins: Dotz0cat (~Dotz0cat@h118.166.187.173.ip.windstream.net)
[00:15:15] *** Quits: PeGaSuS (ubuntu@user/pegasus) (Remote host closed the connection)
[00:15:46] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[00:15:54] *** Joins: PeGaSuS (ubuntu@user/pegasus)
[00:17:01] *** Quits: drd (~drd@host-62-211-44-179.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[00:17:53] *** Joins: joshu_ (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[00:19:11] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 250 seconds)
[00:19:27] *** Quits: TMan459 (~TMan459@068-113-228-168.res.spectrum.com) (Read error: Connection reset by peer)
[00:20:35] *** Joins: drd (~drd@93.55.34.223)
[00:20:37] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Ping timeout: 240 seconds)
[00:21:10] *** Quits: joshu_ (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Client Quit)
[00:22:17] *** Quits: NotSatoshi (~NotSatosh@user/NotSatoshi) (Quit: Leaving)
[00:22:24] *** Joins: user837347 (~user83734@2a02:c7f:1ec1:4000:f4c2:4126:6c15:caa6)
[00:22:32] *** Joins: NotSatoshi (~NotSatosh@c-98-217-51-211.hsd1.ma.comcast.net)
[00:22:32] *** Quits: NotSatoshi (~NotSatosh@c-98-217-51-211.hsd1.ma.comcast.net) (Changing host)
[00:22:32] *** Joins: NotSatoshi (~NotSatosh@user/NotSatoshi)
[00:24:18] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[00:25:00] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[00:25:23] *** Joins: docmax__ (~docmax@dynamic-077-008-025-179.77.8.pool.telefonica.de)
[00:25:31] *** Quits: user837347 (~user83734@2a02:c7f:1ec1:4000:f4c2:4126:6c15:caa6) (Client Quit)
[00:25:43] *** Joins: user837347 (~irl25519@2a02:c7f:1ec1:4000:f4c2:4126:6c15:caa6)
[00:26:53] *** Joins: TMan459 (~TMan459@068-113-228-168.res.spectrum.com)
[00:27:15] *** Quits: user837347 (~irl25519@2a02:c7f:1ec1:4000:f4c2:4126:6c15:caa6) (Client Quit)
[00:27:36] *** Joins: irl25519 (~irl25519@2a02:c7f:1ec1:4000:f4c2:4126:6c15:caa6)
[00:27:49] *** Quits: docmax_ (~docmax@dynamic-077-010-109-108.77.10.pool.telefonica.de) (Ping timeout: 240 seconds)
[00:28:20] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[00:32:23] *** Joins: pj (~pj@ghettoforge/pj)
[00:32:27] *** Joins: seninha (~seninha@user/seninha)
[00:33:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:36:40] *** Joins: bluedust (~bluedust@117.204.152.129)
[00:37:27] *** Quits: bluedust (~bluedust@117.204.152.129) (Remote host closed the connection)
[00:42:05] *** Quits: drd (~drd@93.55.34.223) (Quit: ZNC 1.8.2 - https://znc.in)
[00:43:17] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[00:43:53] *** Joins: drd (~drd@93.55.34.223)
[00:45:21] *** Quits: irl25519 (~irl25519@2a02:c7f:1ec1:4000:f4c2:4126:6c15:caa6) (Quit: irl25519)
[00:46:22] *** Quits: drd (~drd@93.55.34.223) (Client Quit)
[00:48:02] *** Joins: drd (~drd@93.55.34.223)
[00:50:04] *** Joins: sazawal (~sazawal@122.161.92.186)
[00:51:16] *** Quits: jkwnki (~jkwnki@p4ff31198.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:52:17] *** Quits: nitrowheels (~nitrowhee@151.95.83.100) (Quit: Leaving)
[00:55:32] *** Quits: zer0bitz (~zer0bitz@196.244.192.56) (Ping timeout: 240 seconds)
[00:55:47] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[00:57:03] *** Joins: kill (~killown@user/killown)
[00:57:11] *** Quits: drd (~drd@93.55.34.223) (Quit: ZNC 1.8.2 - https://znc.in)
[00:57:46] *** Quits: infernix (nix@2a02:22a0:bbb1:d500::2) (Quit: ZNC - http://znc.sourceforge.net)
[00:58:40] *** Joins: drd (~drd@93.55.34.223)
[00:59:20] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[00:59:34] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[01:00:44] *** Quits: drd (~drd@93.55.34.223) (Client Quit)
[01:02:00] *** Joins: drd (~drd@93.55.34.223)
[01:04:21] *** Quits: totenkoph (~scythe@user/totenkoph) (Ping timeout: 276 seconds)
[01:10:00] *** Quits: magla (~gelignite@55d4171c.access.ecotel.net) (Quit: Stay safe!)
[01:10:05] *** Joins: libc (~weechat@user/tessio)
[01:10:32] *** Joins: lavaball (felix@31.204.155.215)
[01:10:32] <libc> why if [[ 0\1 ]]; then .... both return true ?
[01:11:38] *** Quits: Inline__ (~Inline@2a02:908:1252:7a80::4f) (Quit: Leaving)
[01:11:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[01:12:38] *** Quits: sdu_ (~doo@185.44.146.214) (Quit: leaving)
[01:12:53] <libc> du No_existing_file will return 1
[01:13:02] <phy1729> Because both are non empty strings
[01:13:02] <libc> and the statement will be false
[01:13:20] <acidsys> you are not testing a file just some string
[01:13:26] *** Quits: earnestly (~earnest@user/earnestly) (Quit: WeeChat 3.4)
[01:13:41] <libc> 1 is a string even without " "
[01:13:42] <libc> ?
[01:14:08] <phy1729> yes
[01:14:09] <acidsys> if I am not mistaken, yes
[01:14:22] <Blondie101010> your direct answer is that the statement was not false
[01:14:27] <phy1729> this is shell; everything is a string (more or less)
[01:14:48] <phy1729> there's arrays and arithmetic context though
[01:15:09] <libc> then how the shell tell apart between error code and just 1
[01:15:16] <libc> both are eventually will output 1
[01:15:31] <wiscii> context
[01:15:52] <phy1729> !ifgrep
[01:15:52] <greybot> if grep -q word "$file"; then blah blah; fi # DO NOT use [[ or [ or ` or $() or any other crap. "if" expects a command. "grep" is a command. "[" is too. You don't need both. Likewise, if foo | grep -q bar; then ...
[01:15:57] <libc> in the doc it says that [[ will return a status of 0 ir 1 depending on the evaluation of the conditional expression
[01:16:00] <Blondie101010> a parameter is not a return code
[01:16:04] <dodo> libc: do an actual test? 1 -gt 0 or 1 -eq 0
[01:16:24] <libc> well 1 is a conditional false
[01:16:59] <phy1729> as an exit status
[01:17:29] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[01:17:39] <libc> ok that behavior is not documented ..
[01:17:43] <Blondie101010> libc:  do you think that `echo 1` means false?
[01:17:58] *** Joins: bluedust (~bluedust@117.204.152.129)
[01:17:59] <libc> no echo 1 will return 0
[01:17:59] <Blondie101010> you are just making really bad assumptions
[01:18:12] *** Joins: AsenMx (~AsenMx@user/asenmx)
[01:18:15] <Blondie101010> what goes in [[ ]] is a test
[01:18:47] <libc> i get it
[01:18:48] <phy1729> Right and [[ also returns 0 or 1
[01:19:11] <libc> i just don't understand how the [[ ]] know the difference between a bad command and just 1 or 0
[01:19:23] <Blondie101010> again a bad assumption
[01:19:33] <Blondie101010> it just sees something that is not bad or false
[01:19:45] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Quit: Leaving)
[01:19:48] <acidsys> you're testing a string not a command
[01:19:53] <wiscii> it looks in the right place first
[01:20:06] <libc> why this behavior is not documented
[01:20:08] <libc> ?
[01:20:10] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[01:20:17] <phy1729> [[ doesn't take a command
[01:20:18] *** Joins: LDerJim (~jim@user/LDerJim)
[01:20:22] <Blondie101010> you're imagining "that" behaviour
[01:20:29] <phy1729> read the ifgrep factoid
[01:20:40] <Blondie101010> you're simply refusing to understand that the command has a meaning which you are not using
[01:20:41] <libc> !ifgrep
[01:20:41] <greybot> if grep -q word "$file"; then blah blah; fi # DO NOT use [[ or [ or ` or $() or any other crap. "if" expects a command. "grep" is a command. "[" is too. You don't need both. Likewise, if foo | grep -q bar; then ...
[01:21:17] *** Joins: earnestly (~earnest@user/earnestly)
[01:21:26] <libc> if the operator [ expect a command and he got a string instead .. then it should be always false
[01:21:29] <libc> [[
[01:21:38] <Blondie101010> it's just not!
[01:21:39] <libc> it just common sense ..
[01:21:41] <Blondie101010> learn that!!!
[01:21:47] <phy1729> it doesn't expect a command
[01:22:13] <wiscii> `[`, `[[` and `grep` are all commands
[01:22:26] <Blondie101010> then you pass parameters
[01:22:36] <Blondie101010> and they have return codes
[01:22:52] <libc> ok i think i have a better theory than what all of you just said
[01:23:02] <wiscii> rofl
[01:23:06] <Blondie101010> omg
[01:23:06] <acidsys> lol
[01:23:13] <wiscii> seasons greets! :)
[01:23:19] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:23:39] <libc> a bad command actually outputs nothing to stdout so it's an empty string which [[ ]] checks
[01:23:58] <phy1729> no
[01:24:21] <libc> so i don't know
[01:24:25] <acidsys> you are not testing for a command, look at the parameters of test, if you were to (for example) test for an executable with -x, the behavior would be different
[01:24:41] <acidsys> but without a parameter you just test for a string
[01:24:47] <phy1729> [ and [[ are not followed by a command
[01:24:54] *** Quits: sazawal (~sazawal@122.161.92.186) (Quit: Leaving)
[01:25:23] <Blondie101010> operands and operators are expected, and the result is returned
[01:25:26] <libc> wierd because whenever a command succeeds it return true otherwise false
[01:25:41] <Blondie101010> just use it properly
[01:25:58] <Blondie101010> you try to explain why you senseless line makes no sense
[01:26:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[01:27:30] <libc> if [[ `ls nonsense  2>&1` ]]; then echo "yes"; else echo "no";fi
[01:27:31] <wiscii> is this that game of "Find the missing error exit" ?
[01:27:34] <libc> return true
[01:27:45] <libc> if [[ `ls nonsense` ]]; then echo "yes"; else echo "no";fi
[01:27:45] <Blondie101010> yes, please read the documentation
[01:27:46] <libc> return false
[01:27:54] <libc> i think it's on par with my theory
[01:28:02] <phy1729> stop putting commands in [[
[01:28:06] <libc> [[ ]] check stdout
[01:28:13] <libc> or something in [[ ]]
[01:28:17] <libc> whatever that is
[01:28:41] <Blondie101010> libc:  you didn't even look at the difference between your two cases
[01:28:52] <Blondie101010> the error message (OUTPUT) is what makes the difference
[01:28:57] *** Joins: epony (epony@user/epony)
[01:29:02] <libc> yes
[01:29:06] <libc> i said or something in [[ ]]
[01:29:08] <Blondie101010> the OUTPUT
[01:29:38] <Blondie101010> not the return value which is not affected
[01:29:43] <phy1729> Ok you're now mixing multiple elements of syntax, so it's not one thing going on anymore
[01:29:59] <Blondie101010> he seems to just refuse the syntax
[01:30:03] <wiscii> hense the missing error exit
[01:30:18] <phy1729> if [[ `ls nonsense` ]];  ....   gets turned into    if [[  ]]; ...   because ls doesn't output anything on stdout there
[01:30:24] <phy1729> [[ ]] is false
[01:30:34] <phy1729> it has NOTHING to do with ls erroring
[01:30:46] *** Joins: infernix (nix@2a02:22a0:bbb1:d500::2)
[01:30:57] <phy1729> What you want to do is    if ls nonsense;  and skip the [[ ` nonsense
[01:31:08] <libc> going to sleep
[01:31:11] <libc> thanks for the help
[01:31:12] <phy1729> Also don't use ` use $( instead (it nests better)
[01:31:31] <libc> you got it
[01:31:32] * phy1729 statically links the world and rm's libc
[01:31:43] <libc> :D
[01:31:52] <Blondie101010> phy1729:  not really true
[01:32:02] *** Quits: libc (~weechat@user/tessio) (Quit: WeeChat 3.2)
[01:32:02] <wiscii> sleep deprivation and denial go hand in hand
[01:32:04] <Blondie101010> but it is easier to deal with in most editors
[01:32:09] *** Quits: gr33nR10t (~greenriot@user/gr33nr10t) (Ping timeout: 256 seconds)
[01:32:17] <phy1729> Blondie101010: the ` vs $( bit?
[01:32:22] <Blondie101010> yeah
[01:32:34] <Blondie101010> the difference are very subtle, almos inexistent
[01:32:40] *** Joins: fazz234234372 (~fazz23423@194.sub-174-193-213.myvzw.com)
[01:33:02] <phy1729> Except quoting being sane and \ not being special
[01:33:17] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[01:33:20] <wiscii> 'inexistant' :) sure
[01:34:09] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[01:35:35] <wiscii> the OED does not know of this word
[01:35:53] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[01:36:11] <emanuele6>   cmd1 "$(cmd2 "$(cmd3 "$(cmd4)")")"  vd    cmd "`cmd2 "\`cmd3 "\\\`cmd4\\\`"`"
[01:36:19] <emanuele6>   cmd1 "$(cmd2 "$(cmd3 "$(cmd4)")")"  vs    cmd "`cmd2 "\`cmd3 "\\\`cmd4\\\`"`"
[01:37:22] <phy1729> iirc you need to quote the " too
[01:37:41] <emanuele6> ah, yeah
[01:37:45] *** Joins: arinov (~arinov@213.194.126.155)
[01:37:49] <phy1729> ` is insanity
[01:38:00] *** Joins: ano (~ano@user/ano)
[01:38:11] *** Quits: bluedust (~bluedust@117.204.152.129) (Remote host closed the connection)
[01:39:52] <emanuele6> echo "`echo \"\`echo \\\"\\\`echo 1\\\`\\\"\`\"`"
[01:40:00] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[01:40:01] <earnestly> In theory, it didn't have to be that way, but it do
[01:40:26] <Blondie101010> yeah if you add quotes, it gets messy
[01:40:35] *** Joins: unop (~unop@194.154.249.71)
[01:40:42] <Blondie101010> without quotes, it's not too bad: echo a`echo b\`echo c\``
[01:41:15] <emanuele6> when is "without quotes" ever useful?
[01:41:27] <Blondie101010> often :)
[01:41:41] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[01:41:47] <phy1729> !qefs
[01:41:48] <greybot> "$Quote" "$Every" "$Fucking" "$Substitution"
[01:41:48] <emanuele6> actually useful?
[01:41:55] <jelly> the \ still double with each nested level even without "
[01:42:19] <emanuele6> i really don't get Blondie101010, when is it actually useful?
[01:42:20] <jelly> 0, 1, 3, 7, 15 backslashes...
[01:42:22] *** Joins: bgpepi (~quassel@ip-212-239-173-106.dsl.scarlet.be)
[01:42:27] <phy1729> Word splitting and globbing are rarely wanted with command substitution
[01:42:49] <Blondie101010> I don't have a good point
[01:42:55] <emanuele6> the only quotes you could want to omit are the outer ones
[01:43:03] <emanuele6> which don't really affect the nesting much
[01:43:33] *** Quits: bgpepi (~quassel@ip-212-239-173-106.dsl.scarlet.be) (Client Quit)
[01:43:47] *** Joins: bgpepi (~bgpepi@ip-212-239-173-106.dsl.scarlet.be)
[01:44:01] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[01:44:21] *** Joins: AsenMx (~AsenMx@user/asenmx)
[01:45:24] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[01:45:46] *** Joins: AsenMx (~AsenMx@user/asenmx)
[01:47:53] <emanuele6> just figured out how to write   echo "$(echo "$(echo "$(echo "$(echo 1)")")")"  with backticks
[01:48:01] <emanuele6> echo "`echo \"\`echo \\\"\\\`echo \\\\\\\"\\\\\\\`echo 1\\\\\\\`\\\\\\\"\\\`\\\"\`\"`"
[01:48:30] <emanuele6> # bash -x -c 'echo "`echo \"\`echo \\\"\\\`echo \\\\\\\"\\\\\\\`echo 1\\\\\\\`\\\\\\\"\\\`\\\"\`\"`"'
[01:48:36] <shbot> emanuele6: +++++ echo 1
[01:48:36] <shbot> emanuele6: ++++ echo 1
[01:48:36] <shbot> emanuele6: etc... ( http://ix.io/3JBR )
[01:49:17] <emanuele6> 0 backslashes to 1 backslash to 3 backslashes to seven backslashes
[01:49:44] <Blondie101010> it does get ugly
[01:52:27] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[01:54:02] <xx> that's insane
[01:54:52] <wiscii> who said computers are sane ?
[01:55:30] <emanuele6> very subtle, almost inexistent difference
[01:55:41] <wiscii> ho ho ho ;-)
[01:56:16] <wiscii> when i first encountered two's compliment the very words i used were: That's Insane!
[01:56:45] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:59:06] *** Quits: bud (~bud@user/bud) (Ping timeout: 268 seconds)
[02:01:54] *** Joins: vysn (~vysn@user/vysn)
[02:05:16] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[02:07:28] *** Joins: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au)
[02:07:37] *** Quits: fazz234234372 (~fazz23423@194.sub-174-193-213.myvzw.com) (Quit: Connection closed)
[02:10:52] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[02:11:56] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[02:13:30] *** Joins: bud (~bud@user/bud)
[02:14:02] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[02:14:23] *** Joins: AsenMx (~AsenMx@user/asenmx)
[02:14:28] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[02:14:39] *** Quits: martinus__ (~martin@2.56.202.77.rev.sfr.net) (Ping timeout: 256 seconds)
[02:21:17] <wiscii> twos' compliment .. apparently
[02:22:53] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[02:23:03] *** Joins: lavaball (felix@31.204.155.215)
[02:23:17] *** Quits: gr33nR10t (~greenriot@user/gr33nr10t) (Ping timeout: 240 seconds)
[02:24:40] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[02:26:29] *** Quits: drd (~drd@93.55.34.223) (Quit: ZNC 1.8.2 - https://znc.in)
[02:28:43] *** Joins: drd (~drd@93.55.34.223)
[02:28:47] <ljharb> wiscii: complement
[02:29:24] <earendel> ljharb: 1 sec query?
[02:29:28] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[02:29:44] <wiscii> ljharb: ah .. thanks
[02:29:59] *** Joins: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net)
[02:31:16] <ljharb> earendel: i have no idea what you're asking
[02:31:49] *** Quits: vee (~vee@c-73-71-90-145.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[02:33:11] *** Quits: gr33nR10t (~greenriot@user/gr33nr10t) (Quit: ZNC 1.8.2 - https://znc.in)
[02:33:34] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[02:34:50] *** Quits: AsenMx (~AsenMx@user/asenmx) (Read error: Connection reset by peer)
[02:35:28] *** Joins: AsenMx (~AsenMx@user/asenmx)
[02:38:23] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[02:38:37] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[02:38:51] *** Quits: gr33nR10t (~greenriot@user/gr33nr10t) (Quit: ZNC 1.8.2 - https://znc.in)
[02:39:11] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[02:40:50] <emanuele6> # echo ~0; HOME=x; echo ~0
[02:40:51] <shbot> emanuele6: /root
[02:40:51] <shbot> emanuele6: /root
[02:41:22] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[02:41:38] <emanuele6> just discovered that ~0 (and ~0000000, etc) is equivalent to ~CURRENTUSER
[02:41:54] *** Quits: drd (~drd@93.55.34.223) (Ping timeout: 260 seconds)
[02:41:55] <emanuele6> probably a bug, i have just reported it
[02:43:08] <emanuele6> 2# echo ~0; HOME=x; echo ~0
[02:43:08] <shbot> emanuele6: /root
[02:43:09] <shbot> emanuele6: /root
[02:43:10] <emanuele6> 1# echo ~0; HOME=x; echo ~0
[02:43:11] <shbot> emanuele6: ~0
[02:43:11] <shbot> emanuele6: ~0
[02:43:20] <emanuele6> a very old one
[02:43:33] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[02:43:34] <emanuele6> but it seems useful, maybe it could be documented
[02:46:07] <twkm> # id 0
[02:46:08] <shbot> twkm: bash: id: 0: no such user
[02:46:32] <twkm> some will lookup by uid if by name fails.
[02:46:51] <emanuele6> no, i have tested it locally before using shbot here
[02:46:57] <emanuele6> it expands to the current user, not root
[02:46:59] <twkm> $ id 0
[02:47:00] <twkm> uid=0(root) gid=0(root) groups=0(root)
[02:47:09] *** Quits: winstonsmith (~winstonsm@gateway/vpn/pia/winstonsmith) (Remote host closed the connection)
[02:47:24] *** Joins: winstonsmith (~winstonsm@gateway/vpn/pia/winstonsmith)
[02:47:56] <emanuele6> $ id 0 emanuele6
[02:47:56] <twkm> not unreasonable.
[02:47:58] <emanuele6> uid=0(root) gid=0(root) groups=0(root)
[02:48:00] <emanuele6> uid=1000(emanuele6) gid=998(wheel) groups=998(wheel),5(tty)
[02:48:04] <emanuele6> $  echo ~0
[02:48:06] <emanuele6> /home/emanuele6
[02:48:41] <Blondie101010> isn't that documented in the tilde expansion factoid?
[02:49:24] <emanuele6> !searchkeys tilde
[02:49:24] <greybot> emanuele6: no matches
[02:49:26] <emanuele6> !searchkeys ~
[02:49:26] <greybot> emanuele6: 2 matches found: =~, ~
[02:49:28] <emanuele6> !~
[02:49:29] <greybot> https://wiki.bash-hackers.org/syntax/expansion/tilde $HOME may be easier to use inside ""s as ~ won't expand when double quoted.
[02:49:46] <emanuele6> i don't see it.
[02:49:53] <Blondie101010> not that one
[02:50:31] <twkm> iirc, it isn't bashes choice, it depends on the system's getpwnam.
[03:00:20] <emanuele6> twkm: nope, `getpwnam ("0")' returns NULL on my system
[03:00:36] <emanuele6> also this only happens in bash, not in other shells on the same system
[03:00:37] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 240 seconds)
[03:00:43] <emanuele6> d# echo ~0
[03:00:43] <shbot> emanuele6: ~0
[03:02:23] <emanuele6> ah, oops
[03:02:48] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[03:03:00] <emanuele6> ~0 is the same as ~+0 that is the same as ~+
[03:03:19] <emanuele6> # pushd /bin; dirs; echo ~0 ~1
[03:03:20] <shbot> emanuele6: /bin ~
[03:03:20] <shbot> emanuele6: /bin ~
[03:03:20] <shbot> emanuele6: /bin /root
[03:04:24] <Blondie101010> https://www.gnu.org/software/bash/manual/html_node/Tilde-Expansion.html is the best answer I found so far
[03:04:39] <emanuele6> "If the  characters  following  the tilde in the tilde-prefix consist of a number N, optionally prefixed by a `+' or a `-',  the  tilde-prefix  is  replaced with the corresponding element from the directory stack, as it would be displayed by the dirs builtin invoked with the tilde-prefix as an argument."
[03:05:34] *** Parts: pony (sid524992@smol/hors) ()
[03:06:22] *** Quits: gr33nR10t (~greenriot@user/gr33nr10t) (Quit: ZNC 1.8.2 - https://znc.in)
[03:06:39] *** Joins: junebug (~junebug@2600:1700:3db0:2540:e75f:64b3:5d4b:aaf)
[03:06:40] <emanuele6> not a bug; though having ~N not expand if the N-th index of dirs does not exist and only expand when it exists, is a little weird
[03:06:44] <emanuele6> well, not that weird for bash
[03:07:01] <Blondie101010> that's common in other languages too
[03:07:02] <emanuele6> # echo ~1; pushd /bin; echo ~1
[03:07:03] <shbot> emanuele6: ~1
[03:07:03] <shbot> emanuele6: /bin ~
[03:07:03] <shbot> emanuele6: /root
[03:07:10] <Blondie101010> regex being a common example
[03:07:19] <emanuele6> what are you talking about?
[03:07:23] <Blondie101010> old php used to do that too
[03:07:33] <emanuele6> what?
[03:07:47] <Blondie101010> considering placeholders as strings if undefined
[03:07:53] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[03:08:20] <emanuele6> ah, that
[03:08:52] <emanuele6> well, yes; the same happens in bash for globs with no matches when nullglob is off
[03:08:57] *** Quits: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[03:09:34] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[03:11:06] *** Joins: gabriele (~gabriele@user/gabriele)
[03:12:25] *** Quits: gabriele (~gabriele@user/gabriele) (Client Quit)
[03:15:01] *** Quits: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:15:38] *** Joins: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com)
[03:15:39] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[03:18:08] *** Quits: zouhair (~zouhair@142.182.15.29) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[03:18:44] *** Joins: ano (~ano@user/ano)
[03:20:01] *** Quits: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:20:20] *** Joins: sgn (~sgn@user/sgn)
[03:20:38] *** Joins: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com)
[03:20:57] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[03:25:53] *** Joins: eht (~eht@user/eht)
[03:26:03] *** Quits: myrrh (~markus@172.58.196.91) (Ping timeout: 256 seconds)
[03:26:13] *** Joins: MrBlue (~MrBlue@24.114.93.161)
[03:27:36] *** Quits: MrBlue (~MrBlue@24.114.93.161) (Client Quit)
[03:30:16] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:22] *** Quits: dreamon (~dreamon@pd9503f67.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:30:41] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:31:24] *** Joins: zouhair (~zouhair@142.182.15.29)
[03:32:32] *** Joins: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net)
[03:32:34] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[03:32:51] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 256 seconds)
[03:33:36] *** Joins: bloodfart69 (~bloodfart@131.150.105.232)
[03:34:30] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[03:35:09] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 276 seconds)
[03:35:17] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 240 seconds)
[03:37:44] *** Joins: sgn (~sgn@user/sgn)
[03:38:15] *** Joins: ano (~ano@user/ano)
[03:38:50] *** Quits: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[03:39:28] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:42:33] *** Quits: freep (~freepppp@77.49.184.64.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:42:57] *** Quits: junebug (~junebug@2600:1700:3db0:2540:e75f:64b3:5d4b:aaf) (Ping timeout: 240 seconds)
[03:49:32] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Quit: Leaving)
[03:53:12] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[03:54:41] *** Joins: igemnace (~ian@user/igemnace)
[03:56:40] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (Quit: fBNC - https://bnc4free.com)
[03:57:43] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:59:14] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[03:59:26] *** Joins: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net)
[04:05:07] *** Quits: overrider (~overrider@user/overrider) (Quit: Goodbye...)
[04:05:37] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[04:06:21] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[04:06:40] *** Joins: micah (~micah@199.254.238.42)
[04:07:22] *** Parts: micah (~micah@199.254.238.42) ()
[04:07:25] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[04:09:01] *** Joins: ponies (~ponies@61.69.203.88)
[04:09:24] *** Joins: gabriele (~gabriele@user/gabriele)
[04:09:34] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[04:12:38] *** Joins: chenqisu12 (~bhca7d@183.217.200.22)
[04:14:18] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Ping timeout: 260 seconds)
[04:14:42] *** Joins: MrBlue (~MrBlue@24.114.93.161)
[04:14:48] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[04:15:21] *** Quits: brachamh (~brachamh@user/brachamh) (Ping timeout: 256 seconds)
[04:16:36] *** Quits: sinhue (~mithrin@adsl-dyn45.91-127-82.t-com.sk) (Ping timeout: 268 seconds)
[04:17:05] *** Joins: brachamh (~brachamh@user/brachamh)
[04:18:03] *** Joins: ano (~ano@user/ano)
[04:19:02] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 240 seconds)
[04:19:36] <kurahaupo> DPA: "tolerate" just means "don't crash"; it doesn't imply its obliged to keep them
[04:20:49] <kurahaupo> oh never mind my scroll back was stuck a day
[04:21:03] <wiscii> lol .. know that ;-)
[04:21:21] <wiscii> it is the season to be jolly
[04:22:43] *** Quits: kilobyte_ch (~kbch@77.109.171.167) (Ping timeout: 256 seconds)
[04:23:37] *** Quits: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[04:26:41] *** Joins: ferdna (~ferdna@user/ferdna)
[04:35:43] *** Quits: jwash (~jwash@c-73-254-46-148.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[04:36:09] *** Joins: jwash (~jwash@c-73-254-46-148.hsd1.wa.comcast.net)
[04:37:43] *** Joins: kilobyte_ch (~kbch@77.109.171.167)
[04:38:57] *** Quits: listen_urs (~DaDstoshi@c-98-240-233-64.hsd1.mn.comcast.net) (Quit: Leaving.)
[04:44:50] *** Quits: gabriele (~gabriele@user/gabriele) (Quit: Leaving)
[04:50:19] *** Joins: totenkoph (~scythe@user/totenkoph)
[04:52:07] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-630-171.w86-246.abo.wanadoo.fr) (Quit: The Lounge - https://thelounge.chat)
[05:01:35] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[05:02:23] *** Quits: bgpepi (~bgpepi@ip-212-239-173-106.dsl.scarlet.be) (Remote host closed the connection)
[05:06:53] <jaggz> https://paste.debian.net/1224865/
[05:07:08] <jaggz> I added the test for sysctl to an existing project that just called `sysctl ...`
[05:07:17] <jaggz> that look good enough for a pull request?
[05:07:37] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 240 seconds)
[05:07:50] *** Quits: bud (~bud@user/bud) (Quit: Leaving.)
[05:08:47] <emanuele6> that code is not valid as the paste website is showing
[05:09:22] <emanuele6> you are missing the final `fi' for `if .. then .. else .. fi'
[05:09:59] <emanuele6> also forking and capturing pwd seems silly, you can just use $PWD
[05:10:46] <emanuele6> and note that `-x' does not make sure that a file is a regular file, it only checks if the executable bit is set for the current user
[05:11:03] <emanuele6> ( if the current user has execution permissions on that file )
[05:11:05] <Blondie101010> yeah but that could be sufficient in the use case
[05:11:21] <emanuele6> how?
[05:11:37] <Blondie101010> since it is expected that the executable is there or not
[05:11:51] <emanuele6> # [[ -x /sbin ]] && printf '/sbin is executable\n'
[05:11:52] <shbot> emanuele6: no output
[05:12:02] <emanuele6> # [[ -x /bin ]] && printf '/bin is executable\n'
[05:12:03] <shbot> emanuele6: /bin is executable
[05:12:08] <Blondie101010> I know
[05:12:24] <Blondie101010> but their use case is for a regular executable file
[05:12:32] <emanuele6> exactly
[05:12:44] <Blondie101010> of course someone could have been very stupid and create a directory with that name, but ughhhh
[05:12:51] <emanuele6> so it should be [[ -f /sbin/sysctl && -x /sbin/sysctl ]]
[05:13:20] <Blondie101010> maybe better to suggest better ways to improve this limited patch
[05:13:42] <xx> what if it is a symlink?
[05:13:58] <emanuele6> xx: why would that be a problem?
[05:13:58] <Blondie101010> like with path expansions
[05:14:03] <xx> emanuele6: -f
[05:14:12] <emanuele6> # help test | grep -e -f
[05:14:13] <shbot> emanuele6:       -f FILE        True if file exists and is a regular file.
[05:14:55] <emanuele6> xx: "Unless otherwise specified, primaries that operate on files follow symbolic links and operate on the target of the link, rather than the link itself."
[05:15:19] <xx> oh really
[05:15:40] <Blondie101010> ls /{usr,}/{s,}bin/sysctl 2>/dev/null|cut -d' ' -f2|tail -1
[05:15:46] <emanuele6> that is why you need to check [[ ! -L file && -f file ]] when you need to make sure a file is not a symlink
[05:15:55] <Blondie101010> could also include local
[05:16:06] <emanuele6> what is the point of ls?
[05:16:18] <Blondie101010> just an easy choice
[05:16:26] <emanuele6> wrong more than easy
[05:16:47] <emanuele6> # mkdir bin/sysctl; echo a > bin/sysctl/x; ls /{usr,}/{s,}bin/sysctl
[05:16:53] <shbot> emanuele6: bash: mkdir: cannot create directory `bin/sysctl': No such file or directory
[05:16:53] <shbot> emanuele6: bash: bin/sysctl/x: No such file or directory
[05:16:53] <shbot> emanuele6: etc... ( http://ix.io/3JCD )
[05:16:57] *** Quits: zaden (~maddx@c-73-92-207-228.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[05:16:58] <Blondie101010> it was a quick draft, not a thesis
[05:17:10] <Blondie101010> echo instead of ls
[05:17:15] <xx> need that 2>/dev/null
[05:17:22] <emanuele6> Blondie101010: echo does not print lines
[05:17:46] <emanuele6> printf '%s\n', and really you should be using printf '%s\0' since these are filenames
[05:18:19] <xx> I'm still waiting for a mount option that would disallow newlines and other stupid chars in filenames
[05:18:31] <emanuele6> # mkdir /bin/sysctl; echo a > bin/sysctl/x; ls /bin/sysctl
[05:18:32] <xx> replace them with emoji or whatever, at least those are easy to parse
[05:18:33] <shbot> emanuele6: bash: bin/sysctl/x: No such file or directory
[05:18:50] <emanuele6> ^ this is what i wanted to show ^; i was missing a / before bin
[05:19:12] <emanuele6> err
[05:19:20] <emanuele6> i am missing another one, lol
[05:19:23] <emanuele6> # mkdir /bin/sysctl; echo a > /bin/sysctl/x; ls /bin/sysctl
[05:19:24] <shbot> emanuele6: x
[05:19:41] <emanuele6> yeah, ls prints the contents of a directory when given a directory
[05:19:58] <Blondie101010> you're just moving away from the actual use case of a common utility
[05:19:59] <emanuele6> it is not a "printf '%s\n'" only for filenames
[05:20:25] *** Joins: zaden (~maddx@c-73-92-207-228.hsd1.ca.comcast.net)
[05:20:27] <emanuele6> you are just used to doing things that way and you don't realise that it does not make much sense
[05:20:56] <xx> # printf 'hello\nworld' | tr '\n' 'ðŸ’©'
[05:20:57] <shbot> xx: helloworld
[05:20:57] <emanuele6> ls prints the contents of directories
[05:21:04] <xx> hmm, why did that not work?
[05:21:20] <emanuele6> # printf 'hello\nworld' | tr '\n' 'ðŸ’©' | od -An -c
[05:21:21] <shbot> emanuele6:    h   e   l   l   o 360   w   o   r   l   d
[05:21:25] <emanuele6> it worked
[05:21:31] <emanuele6> well, it replaced something
[05:21:47] <emanuele6> probably only the first part of that (emoji?)
[05:21:51] <Blondie101010> emanuele6:  I know and the target is NOT expected to be a directory...  in any other setting I would have agreed to your approach but now you're zealous
[05:21:53] <emanuele6> (the first byte)
[05:22:03] <emanuele6> try setting a utf8 locale
[05:22:25] <xx> I have utf8 locale
[05:22:33] <xx> maybe tr is the wrong tool for this
[05:22:46] <emanuele6> Blondie101010: you seem to think that i commonly use `ls glob*', i don't really
[05:23:07] <emanuele6> i usually use `echo glob*'
[05:23:11] <Blondie101010> I was simply brainstorming
[05:23:21] <emanuele6> # locale -a
[05:23:24] <shbot> emanuele6: C
[05:23:24] <shbot> emanuele6: POSIX
[05:23:24] <shbot> emanuele6: etc... ( http://ix.io/OBU )
[05:23:28] <emanuele6> oops
[05:23:31] <emanuele6> # locale -a | paste -s
[05:23:32] <shbot> emanuele6: C       POSIX   de_DE.utf8      en_US.utf8      et_EE.utf8      nb_NO.utf8
[05:23:42] <emanuele6> # LANG=en_US.utf8; printf 'hello\nworld' | tr '\n' 'ðŸ’©' | od -An -c
[05:23:43] <shbot> emanuele6:    h   e   l   l   o 360   w   o   r   l   d
[05:23:58] <emanuele6> # export LANG=en_US.utf8; printf 'hello\nworld' | tr '\n' 'ðŸ’©' | od -An -c
[05:23:59] <shbot> emanuele6:    h   e   l   l   o 360   w   o   r   l   d
[05:24:18] <emanuele6> nope, maybe tr simply can't handle multi byte characters
[05:24:44] <Blondie101010> not sure but it seems like it does
[05:24:56] <emanuele6> iirc GNU sed can
[05:25:24] <xx> # printf 'Ä­' | tr 'Ä­' 'Ä³'
[05:25:25] <shbot> xx: Ä³
[05:25:46] <xx> maybe those are not multibyte enough
[05:25:53] <Blondie101010> on my terminal, it shows helloâ–’world
[05:25:57] <xx> ðŸ’© is 4 bytes
[05:26:16] <Blondie101010> so it's a more complicated charset issue
[05:26:26] <emanuele6> # jq -n '"Ä­","ðŸ’©"|explode[]'
[05:26:27] <shbot> emanuele6: 301
[05:26:27] <shbot> emanuele6: 128169
[05:27:29] *** Joins: edlou (uid413273@id-413273.helmsley.irccloud.com)
[05:27:30] <emanuele6> # a='hello\nworld'; printf %s "${a//$'\n'/ðŸ’©}"
[05:27:31] <shbot> emanuele6: hello\nworld
[05:27:35] <emanuele6> oops
[05:27:37] <emanuele6> # a=Â£'hello\nworld'; printf %s "${a//$'\n'/ðŸ’©}"
[05:27:38] <shbot> emanuele6: Â£hello\nworld
[05:27:41] <emanuele6> hehe
[05:27:44] <emanuele6> # a=$'hello\nworld'; printf %s "${a//$'\n'/ðŸ’©}"
[05:27:45] <shbot> emanuele6: helloðŸ’©world
[05:27:52] <xx> huh
[05:28:15] <xx> guess `tr` really is the wrong tool for the job then
[05:28:45] <Blondie101010> not sure why, so maybe
[05:28:53] *** Joins: seninha (~seninha@user/seninha)
[05:28:56] <emanuele6> xx: tr takes two classes of characters, not two strings like ${a//str1/str2}
[05:29:22] <emanuele6> so probably it can't tell where the emoji ends
[05:29:27] *** Joins: Soni (~quassel@autistic.space)
[05:29:29] <xx> probably
[05:29:53] <Blondie101010> the character causes readline to bug
[05:29:54] <Soni> can you make ./foo check ./foo/.autorun if ./foo is a dir?
[05:29:54] <emanuele6> # export LANG=en_US.utf8; printf 'abcdef' | tr 'bcde' 'ðŸ’©' | od -An -c
[05:29:56] <shbot> emanuele6:    a 360 237 222 251   f
[05:29:57] <Blondie101010> not sure why either
[05:30:11] <Blondie101010> not a tr issue
[05:30:55] <emanuele6> Soni: what?
[05:32:23] <Soni> it's convenient being able to ./MultiMC from $HOME instead of ./MultiMC/MultiMC or w/e, being able to shove an ./MultiMC/.autorun script that runs MultiMC proper would solve that
[05:32:42] <phy1729> I suppose you could write a command not found handler to do that
[05:33:02] <phy1729> Seems like a bad idea, but it's your shell
[05:33:37] <emanuele6> ah, yeah, i think i get it
[05:33:50] <emanuele6> what phy1729 said
[05:33:52] *** Quits: reset (~reset@user/reset) (Quit: reset)
[05:34:41] <Soni> why's running a dir a bad idea?
[05:34:55] <Soni> tbh the problem is that dirs can't also be scripts
[05:35:33] <Blondie101010> what?
[05:35:37] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[05:35:59] <Blondie101010> +x permission on directories is not to execute them
[05:36:11] <emanuele6> Blondie101010: that is not what he is asking
[05:36:28] *** Quits: DaNeenjah (~jake@adsl-74-230-9-185.hsv.bellsouth.net) (Quit: WeeChat 3.4)
[05:36:36] <emanuele6> command_not_found_handle () { [[ -f $1/.autorun ]] && bash .autorun "$@" ;}
[05:36:42] <emanuele6> he's asking something like this basically
[05:36:47] <emanuele6> err
[05:36:49] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[05:37:01] <emanuele6> command_not_found_handle () { [[ -f $1/.autorun ]] && bash "$1/.autorun" "${@:2}" ;}
[05:37:21] <Soni> well there's no reason .autorun should be a bash script
[05:37:42] <emanuele6> fine
[05:37:47] <Soni> it could be python or a rust executable
[05:38:17] <phy1729> Then s/bash //
[05:38:18] <emanuele6> command_not_found_handle () { local ar=$1/.autorun; [[ -f $ar && -x $ar ]] && "$ar" "${@:2}" ;}
[05:38:53] <Soni> but yeah
[05:42:19] *** Quits: MrBlue (~MrBlue@24.114.93.161) (Ping timeout: 268 seconds)
[05:42:51] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[05:44:12] *** Joins: michigan (uid507982@id-507982.ilkley.irccloud.com)
[05:45:08] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[05:51:10] *** Joins: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com)
[05:53:16] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:59:16] *** Joins: junebug (~junebug@2600:1700:3db0:2540:d55:ce10:91c5:60b8)
[06:01:16] *** Joins: seninha (~seninha@user/seninha)
[06:06:43] *** Joins: dig (~dig@149.167.138.143)
[06:07:33] *** Quits: led_belly (~led_belly@196.240.57.117) (Ping timeout: 256 seconds)
[06:13:27] *** Joins: led_belly (~led_belly@196.240.57.116)
[06:20:47] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:31:01] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[06:31:29] *** Joins: zaz\ (~zaz@poneybl.eu)
[06:34:20] *** Joins: jonthesnow (~xizhendu@36.112.179.225)
[06:34:42] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:36:49] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[06:37:09] *** Joins: foobarfoo (~user@vps-93-95-226-254.1984.is)
[06:37:31] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[06:38:02] *** Quits: lord4163 (~lord4163@90-230-194-205-no86.tbcn.telia.com) (Ping timeout: 240 seconds)
[06:39:41] *** Joins: lord4163 (~lord4163@90-230-194-205-no86.tbcn.telia.com)
[06:46:47] *** Quits: jos1 (~jos3@host-091-097-184-067.ewe-ip-backbone.de) (Ping timeout: 250 seconds)
[06:47:43] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:48:17] <jaggz> emanuele6, I didn't write the rest.. just want to fix the sysctl part though
[06:49:09] <jaggz> lol.. I'll put the -f in too :) :)
[06:51:46] <uuidNuniq> emanuele6: just shift
[06:52:19] *** Quits: xx (~xx@user/xx) (Ping timeout: 256 seconds)
[06:53:53] <emanuele6> uuidNuniq: how is that simpler?
[06:54:35] <uuidNuniq> then you don't need that :2
[06:56:01] *** Quits: junebug (~junebug@2600:1700:3db0:2540:d55:ce10:91c5:60b8) (Quit: Leaving)
[06:56:03] <emanuele6> i know what `shift' dos
[06:56:26] <emanuele6> but here it does not make sense to use shift
[06:56:55] <emanuele6> s/dos/does/
[06:59:35] *** Joins: jos1 (~jos3@dyndsl-091-096-035-185.ewe-ip-backbone.de)
[06:59:54] *** Quits: ponies (~ponies@61.69.203.88) (Quit: Lost terminal)
[07:01:44] <emanuele6> uuidNuniq: are you going to say something or did you just ping me for no reason?
[07:02:18] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[07:07:33] *** Joins: ghostboarder (~quassel@S010640623101dbe0.va.shawcable.net)
[07:07:33] *** Quits: ghostboarder (~quassel@S010640623101dbe0.va.shawcable.net) (Changing host)
[07:07:33] *** Joins: ghostboarder (~quassel@user/ghostboarder)
[07:09:37] *** Quits: jonthesnow (~xizhendu@36.112.179.225) (Ping timeout: 240 seconds)
[07:13:16] *** Quits: Zauberfisch (~Zauberfis@cm147-42.liwest.at) (Quit: Zauberfisch)
[07:13:51] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[07:14:03] *** Joins: Zauberfisch (~Zauberfis@cm147-42.liwest.at)
[07:14:44] <emanuele6> you can use `shift' if you want, but that requires you run to another command (`shift'), has to update $@ and is quite a bit longer to type; it feels inconvenient and is more complex for no reason.
[07:14:46] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[07:16:21] <emanuele6> -e s/to//1 -e s/another/an extra/1
[07:17:34] <pj> I would probably use shift just out of habit, but yeah, I do believe that ${@:2} is more efficient.
[07:19:23] <emanuele6> pj: not really much since iirc function arguments are just a WORD_LIST (singly-linked list); that is what loadable builtin commands get so i assume it is the same for functions
[07:19:40] <emanuele6> but still, quite a lot more to type
[07:21:17] <pj> yep, the real advantage of shift is if you need POSIX.
[07:21:31] <pj> but that's obviously not the case here.
[07:21:44] <emanuele6> exactly
[07:22:07] <emanuele6> or if you are iterating    while (( $# ))
[07:22:27] <pj> yeah, but there are other ways to iterate
[07:22:52] <emanuele6> in bash, especially in simple once command functions, it is more convenient to use `${@:2}', not to "just shift"
[07:23:50] <pj> the only other thing I can think of is I think a lot more people understand what shift does than ${@:2}, so using shift makes your code that much more readable in that sense.
[07:23:51] <emanuele6> if bash had something like `shift -v var' or `shift -l -v var' (-l for local) maybe it would be more appealing to shift
[07:24:51] <pj> certainly or if it could actually return proper strings without requiring a subshell
[07:25:31] <emanuele6> shift in a subshell does not work, but yeah
[07:25:37] <pj> yeah, exactly
[07:25:57] <pj> well I suppose technically it "works" it's just that the result is lost as soon as the subshell exits.
[07:26:33] <emanuele6> no, arguments don't get "inherited" i think
[07:26:40] <pj> oh?
[07:27:11] <pj> # set -- foo  bar baz; echo "$(echo "$1")"
[07:27:12] <shbot> pj: foo
[07:27:21] <pj> yeah, looks like they do
[07:27:28] <emanuele6> oh, duh
[07:27:42] <emanuele6> i tried   echo "$(shift)"
[07:27:58] <emanuele6> this is not perl, that is not how shift works in bash :)
[07:27:59] <pj> # set -- foo  bar baz; echo "$(shift; printf '<%s>' "$@")"
[07:28:00] <shbot> pj: <bar><baz>
[07:28:08] <pj> right
[07:28:10] <pj> hehehe
[07:28:46] *** Quits: bloodfart69 (~bloodfart@131.150.105.232) (Quit: Leaving)
[07:28:59] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[07:29:25] <pj> it would be nice if that actually worked, though, I mean if you could do: foo=$(shift) and have it actually do what you want.  Another thing that would be nice would be if shift worked on arrays: shift myarr
[07:30:17] <emanuele6> that is what the `shift -l -v var' i proposed would do; similar to   my $var = shift   in perl
[07:30:52] <pj> right, but I mean if you could shift off of an array, not just stash the result in a var.
[07:30:59] <emanuele6> and since shift already fails if there are no arguments you could use `|| die' like `or die' in perl
[07:32:03] <emanuele6> mm, yeah array "shifting" is usually done by   unset -v 'arr[-1]'
[07:32:56] *** Quits: dig (~dig@149.167.138.143) (Quit: dig)
[07:33:06] *** Quits: sinaowolabi (~SinaOwola@160.152.42.5) (Ping timeout: 260 seconds)
[07:33:11] <pj> wouldn't that be more of a pop than a shift?
[07:33:17] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Remote host closed the connection)
[07:33:19] *** Quits: sinaowolabi_ (~SinaOwola@160.152.42.5) (Ping timeout: 268 seconds)
[07:33:24] <emanuele6> ah, right
[07:33:37] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[07:33:42] <emanuele6> well, shifting is weird for indexed arrays since they can be sparse
[07:34:15] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Ping timeout: 256 seconds)
[07:34:23] <pj> but yeah, it would be nice to have the full complement of push/pop/shuft/unsift commands that work on both args and arrays in bash.  I would love that, and the ability to grab the value that you're popping or shifting in the process.
[07:34:39] <pj> *shift
[07:35:56] <uuidNuniq> ${@:2} means from $2 to $END?
[07:36:04] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:36:45] <emanuele6> if length is omitted, it goes up to last element of the array
[07:37:06] <uuidNuniq> what is $2 to $5?
[07:37:35] <emanuele6> "${@:2:4}"
[07:37:45] <emanuele6> assuming there are actually at least 5 arguments
[07:38:05] <emanuele6> 4 is the length:  $2 $3 $4 $5   are 4 elements
[07:38:13] <uuidNuniq> see.. you got to do some math... and is confusing. well, i'd rather shift, to make it more readable
[07:38:15] <pj> note that the 4 is actually the length of the returned slice, not the index of the last element.
[07:38:44] <emanuele6> well, here it does not matter because $@ can't be sparse
[07:38:45] <pj> uuidNuniq: if you want to shift then go ahead and shift, I think that was kind of the whole point of this conversation.
[07:40:01] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Client Quit)
[07:40:18] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:41:07] <uuidNuniq> yeah. let's say, my script has a function, the function accepts args ... so when i run the scirpt like this: /path/script function args...
[07:42:05] *** Quits: vishal (~vishal@fedora/vishal) (Quit: ZNC 1.8.2 - https://znc.in)
[07:42:09] <emanuele6> but keep in mind that what you suggest to shift on was not what you are talking about now, but a simple one assignment, one command function..
[07:42:42] <uuidNuniq> and the function needs to validate the args sometimes... then, shift is better or you need to put ${@:2} everywhere in the function
[07:43:34] <uuidNuniq> emanuele6: yeah, i know. my head spins too fast. case by case
[07:43:45] <pj> first off, you're talking about how you execute the script.  That has nothing to do with how the function is run, or what args are passed to it.
[07:43:51] *** Joins: vishal (~vishal@fedora/vishal)
[07:45:06] *** Joins: sinaowolabi (~SinaOwola@160.152.36.12)
[07:45:31] *** Joins: sinaowolabi_ (~SinaOwola@160.152.36.12)
[07:46:13] <uuidNuniq> ok, just checked my script again, only 2 shifts are used.
[07:46:28] <uuidNuniq> one is : inarray () { local n=$1 h; shift; for h; do [[ $n = "$h" ]] && return; done; return 1 ; }
[07:47:06] <uuidNuniq> another one is : case $1 in f) shift ; actual_f ;;
[07:47:17] <uuidNuniq> actual_f "$@"
[07:47:52] <uuidNuniq> i think the second shift is not needed, i can just use : case $1 in f) actual_f ${@:2} ;;
[07:48:02] <emanuele6> !quote > uuidNuniq
[07:48:02] <greybot> uuidNuniq: https://mywiki.wooledge.org/Quotes
[07:48:37] <emanuele6> shift for indexed arrays could work like so:  for i in "${!arr[@]}"; do unset -v 'arr[i]'; ! break; done || for i in "${!arr[@]}"; do arr[i - 1]=${arr[i]}; unset -v 'arr[i]'; done
[07:49:37] <emanuele6> # shift_arr () { for i in "${!arr[@]}"; do unset -v 'arr[i]'; ! break; done || for i in "${!arr[@]}"; do arr[i - 1]=${arr[i]}; unset -v 'arr[i]'; done ;}; declare -p arr=([1]=a [3]=b c d [10]=e); shift_arr; declare -p arr
[07:49:38] <shbot> emanuele6: declare -a arr=([1]="a" [3]="b" [4]="c" [5]="d" [10]="e")
[07:49:38] <shbot> emanuele6: declare -a arr=([2]="b" [3]="c" [4]="d" [9]="e")
[07:49:48] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[07:50:14] <uuidNuniq> oh my god! you're being nerd
[07:50:31] <emanuele6> for associative arrays i don't think there is a way to define a shift that makes sense
[07:50:51] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.4)
[07:51:04] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[07:51:13] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[07:51:58] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[07:52:02] <emanuele6> in bash, indexed arrays are really just maps from unsigned integer to string; not like arrays or lists in other programming languages
[07:52:25] <uuidNuniq>  12:22:25 up 9 days, 17:14,  3 users,  load average: 0.12, 0.12, 0.09
[07:52:43] <emanuele6>  05:22:42 up 18 days, 18:17,  5 users,  load average: 0.39, 0.21, 0.20
[07:52:59] <uuidNuniq> you're just 7 hours behind me
[07:53:38] <uuidNuniq> why are you up at sleep hours
[07:54:44] <emanuele6> it was my birthday yesterday so i stayed up late
[07:55:09] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[07:55:14] <uuidNuniq> it is funny, bash users laugh at posix users for being lack of features...
[07:55:24] *** Joins: bluedust (~bluedust@117.204.150.55)
[07:55:43] <uuidNuniq> emanuele6: happy birthday. what a nice birthday during holiday
[07:58:17] <uuidNuniq> emanuele6: i serve weechat on an aarch64 tv box, which turned into an Archlinux box.
[07:58:20] *** Joins: lalitmee_ (~lalitmee@180.94.32.43)
[07:59:05] <uuidNuniq> only 10 USD, lol, for 8GB emmc and 2GB RAM with 1000M ether
[08:00:03] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:00:47] <uuidNuniq> and this is where i learn bash coding ... reading man pages ... wireguard on it, so i can do stuff anywhere i go.
[08:04:53] *** Joins: uuidNuni1 (~weechat@193.123.227.17)
[08:05:09] <uuidNuni1> ok, this is a backup server
[08:08:30] *** Joins: zebrag (~chris@user/zebrag)
[08:12:04] *** Quits: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com) (Quit: leaving)
[08:22:25] *** Quits: chenqisu12 (~bhca7d@183.217.200.22) (Ping timeout: 256 seconds)
[08:22:53] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.4)
[08:23:55] *** Quits: sinaowolabi (~SinaOwola@160.152.36.12) (Read error: No route to host)
[08:25:09] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[08:29:04] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Client Quit)
[08:30:19] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Quit: leaving)
[08:30:34] *** Joins: joo-_ (~joo-_@87-49-147-205-mobile.dk.customer.tdc.net)
[08:30:34] *** Quits: joo-_ (~joo-_@87-49-147-205-mobile.dk.customer.tdc.net) (Changing host)
[08:30:34] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[08:31:33] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[08:35:17] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[08:36:06] *** Joins: jinsun (~quassel@user/jinsun)
[08:39:11] *** Joins: sinaowolabi (~SinaOwola@160.152.36.12)
[08:40:40] *** Joins: lavaball (felix@31.204.155.215)
[08:44:54] *** Joins: razend (~razend@94.200.42.14)
[08:45:15] <razend> Shell check says to "Use -n instead of ! -z"
[08:46:04] <razend> I am using if [[ ! -z "$ENTITY_ID" ]]; then ...
[08:53:18] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Quit: Lost terminal)
[08:54:02] *** Joins: joo-_ (~joo-_@87-49-147-205-mobile.dk.customer.tdc.net)
[08:54:02] *** Quits: joo-_ (~joo-_@87-49-147-205-mobile.dk.customer.tdc.net) (Changing host)
[08:54:02] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[08:56:04] <Blondie101010> razend:  well `! -z` is the same as `-n`
[08:56:34] <Blondie101010> it won't affect behaviour at all, but would be a *tiny* bit simpler
[08:56:41] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[08:58:29] <razend> Blondie101010 Thanks!
[08:58:30] *** Joins: sublim20 (~sublim20@user/sublim20)
[08:59:17] *** Joins: myrrh (~markus@172.58.196.133)
[08:59:56] *** Quits: sublim20 (~sublim20@user/sublim20) (Client Quit)
[09:00:36] *** Parts: critr (~critr@user/critr) (.)
[09:01:30] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:06:00] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[09:12:31] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[09:12:37] *** Joins: lalitmee__ (~lalitmee@180.94.33.221)
[09:14:06] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[09:15:05] *** Quits: lalitmee_ (~lalitmee@180.94.32.43) (Ping timeout: 268 seconds)
[09:17:47] <pj> razend: also you can shorten it to just: [[ $ENTITY_ID ]]
[09:18:29] <pj> inside [[ ]] the quotes aren't required and -n is implied if there is no operator.
[09:19:57] *** Quits: timj (~timj@user/timj) (Ping timeout: 240 seconds)
[09:27:35] *** Quits: sinaowolabi_ (~SinaOwola@160.152.36.12) (Ping timeout: 256 seconds)
[09:28:06] *** Joins: earendel (uid498179@user/earendel)
[09:28:38] *** Joins: miique (~miique@181.46.139.166)
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:31:00] *** Joins: reezoh_ (~reezoh@173.168.223.85)
[09:31:01] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[09:31:16] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:32:19] *** Joins: reezoh__ (~reezoh@173.168.223.85)
[09:32:34] *** Quits: reezoh (~reezoh@173.168.223.85) (Ping timeout: 260 seconds)
[09:34:29] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:34:32] *** Joins: timj (~timj@user/timj)
[09:35:31] *** Quits: reezoh_ (~reezoh@173.168.223.85) (Ping timeout: 256 seconds)
[09:36:20] *** Joins: lalitmee_ (~lalitmee@180.94.32.60)
[09:37:49] *** Joins: nattiestnate (~nate@182.3.37.200)
[09:38:37] *** Quits: lalitmee__ (~lalitmee@180.94.33.221) (Ping timeout: 240 seconds)
[09:38:51] *** Joins: sinaowolabi_ (~SinaOwola@41.58.240.230)
[09:40:48] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Read error: Connection reset by peer)
[09:41:38] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[09:42:59] *** Joins: SudoBash (~SudoBash@173.247.16.36)
[09:43:07] <SudoBash> this is cool: echo "echo $($echo ls)" >> /proc/[PID]/fd/0
[09:43:32] <earendel> # shiftarr() { shift;  local a=($*); declare -p a; }; shiftarr 'a x' 'b' 'c'
[09:43:33] <shbot> earendel: declare -a a=([0]="b" [1]="c")
[09:46:06] <earendel> # declare -a arr=([0]="a x" [1]="b" [2]="c"); shiftarr() { shift;  local a=($*); declare -p a; }; shiftarr "${arr[@]}"
[09:46:07] <shbot> earendel: declare -a a=([0]="b" [1]="c")
[09:49:19] <emanuele6> you don't understand how $* works.
[09:49:19] *** Joins: reezoh (~reezoh@173.168.223.85)
[09:49:36] <emanuele6> and don't get the point of shifting an array
[09:50:40] <emanuele6> you would want to use "$@" ther
[09:50:59] <emanuele6> # shift_arr () { for i in "${!arr[@]}"; do unset -v 'arr[i]'; ! break; done || for i in "${!arr[@]}"; do arr[i - 1]=${arr[i]}; unset -v 'arr[i]'; done ;}; declare -p arr=([1]=a [3]=b c d [10]=e); shift_arr; declare -p arr
[09:51:00] <shbot> emanuele6: declare -a arr=([1]="a" [3]="b" [4]="c" [5]="d" [10]="e")
[09:51:00] <shbot> emanuele6: declare -a arr=([2]="b" [3]="c" [4]="d" [9]="e")
[09:51:37] *** Quits: reezoh__ (~reezoh@173.168.223.85) (Ping timeout: 240 seconds)
[09:52:36] <emanuele6> it's removing the first index (not just 0) and subtracting 1 from every other index
[09:54:35] <emanuele6> # shift_arr () { for i in "${!arr[@]}"; do unset -v 'arr[i]'; ! break; done || for i in "${!arr[@]}"; do arr[i - 1]=${arr[i]}; unset -v 'arr[i]'; done ;}; declare -p arr=([1]=a [3]=b c d [10]=e); shift_arr; declare -p arr; shift_arr; declare -p arr
[09:54:36] <shbot> emanuele6: declare -a arr=([1]="a" [3]="b" [4]="c" [5]="d" [10]="e")
[09:54:36] <shbot> emanuele6: declare -a arr=([2]="b" [3]="c" [4]="d" [9]="e")
[09:54:36] <shbot> emanuele6: declare -a arr=([2]="c" [3]="d" [8]="e")
[09:54:38] <earendel> right. that was my reference msg. emanuele6: the way you do it, you don't preserve key-vals .. so 3 is b and then 2 is b .. unless you wanted keys to be decremented. but then why not just reassign them?
[09:55:18] <emanuele6> earendel: do you understand what $* does?
[09:55:44] *** Joins: dig (~dig@149.167.139.159)
[09:56:05] <emanuele6> earendel: what do you mean "just reassign them"?
[09:56:10] <emanuele6> it is shifting the indices
[09:56:25] <earendel> # shift_arr () { for i in "${!arr[@]}"; do unset -v 'arr[i]'; ! break; done || for i in "${!arr[@]}"; do arr[i - 1]=${arr[i]}; unset -v 'arr[i]'; done ;}; declare -p arr=([1]=a [2]=b c d [10]=e); shift_arr; declare -p arr; shift_arr; declare -p arr
[09:56:26] <shbot> earendel: declare -a arr=([1]="a" [2]="b" [3]="c" [4]="d" [10]="e")
[09:56:26] <shbot> earendel: declare -a arr=([1]="b" [2]="c" [3]="d" [9]="e")
[09:56:27] <shbot> earendel: declare -a arr=([1]="c" [2]="d" [8]="e")
[09:57:59] <emanuele6> when you have $1=a $2=b $3=c, after running `shift', you will have $1=b $2=c
[09:58:23] <emanuele6> that is a generalised implementation of shift for indexed arrays (which can be sparse in bash)
[09:58:45] *** Quits: NotSatoshi (~NotSatosh@user/NotSatoshi) (Ping timeout: 256 seconds)
[09:59:18] <earendel> i guess $* is not sparsed .. so i'm not sure why you emphasize the ability to work on sparse arrays. but then you would usually also not decrement the keys, but just delete the first elem.
[09:59:33] <emanuele6> earendel: you really don't understand what $* does huh?
[09:59:38] <earendel> what you have here seems a weird mix of both.
[09:59:50] <emanuele6> "$@" are the arguments, not $*
[10:00:07] <earendel> that's details.
[10:00:21] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Read error: Connection reset by peer)
[10:00:38] <earendel> what about the things i pointed out.
[10:00:45] <emanuele6> what did you point out?
[10:01:05] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[10:01:34] <emanuele6> bash arrays can be sparse, a sparse array is not a different type of array.
[10:01:58] <emanuele6> an array is really just a map from non-negative number to string
[10:02:07] <emanuele6> that is how they work in bash
[10:03:28] <emanuele6> and i really why you keep insisting that only the first element should be removed without decrementing the other indices
[10:03:30] <earendel> emanuele: why does that work anyway then? (first elem is dropped, rest is reassigned to a correct index. like what shift does. i guess) --> # declare -a arr=([0]="a x" [1]="b" [2]="c"); shiftarr() { shift;  local a=($*); declare -p a; }; shiftarr "${arr[@]}"
[10:03:33] <emanuele6> that is not how shift works
[10:03:46] <emanuele6> $1=a $2=b $3=c -> $1=b $2=c
[10:03:55] <emanuele6> why should the indices not decrement?
[10:03:59] *** Joins: bluedust_ (~bluedust@185.248.85.55)
[10:04:27] *** Quits: A|an (~Alan@173.218.175.171) (Quit: A|an)
[10:04:38] <emanuele6> # declare -a arr=([0]="a x" [1]="b x d" [10]="c"); shiftarr() { shift; local a=($*); declare -p a; }; shiftarr "${arr[@]}"
[10:04:39] <shbot> emanuele6: declare -a a=([0]="b" [1]="x" [2]="d" [3]="c")
[10:04:46] <earendel> well. there can. it's just probably not what they do, unless you want that? otherwise you wouldn't have to implement it for arrays.
[10:04:52] <earendel> they can*
[10:06:06] <emanuele6> ok, so you don't know what $* does, what `shift' does and how array work
[10:06:09] <earendel> # declare -a arr=([0]="a x" [1]="b x d" [10]="c"); shiftarr() { shift; local a=($@); declare -p a; }; shiftarr "${arr[@]}"
[10:06:10] <shbot> earendel: declare -a a=([0]="b" [1]="x" [2]="d" [3]="c")
[10:06:37] <earendel> hm. didn't help it.
[10:06:40] <razend> ShellCheck can't follow non-constant source. Use a directive to specify location
[10:06:52] <earendel> # declare -a arr=([0]="a x" [1]="b x d" [10]="c"); shiftarr() { shift; local a=("$@"); declare -p a; }; shiftarr "${arr[@]}"
[10:06:53] <shbot> earendel: declare -a a=([0]="b x d" [1]="c")
[10:07:04] <razend> source "$HOME/${CONFIG_FILE}" -> ShellCheck can't follow non-constant source. Use a directive to specify location
[10:07:14] <razend> What's the issue here?
[10:07:37] *** Quits: bluedust (~bluedust@117.204.150.55) (Ping timeout: 240 seconds)
[10:07:45] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Ping timeout: 276 seconds)
[10:08:22] <emanuele6> razend: $HOME and $CONFIG_FILE are not constants.
[10:09:29] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[10:10:02] <earendel> yes. ok. shift did drop the first arg correctly.  $* however did mess the fields.
[10:10:51] <razend> source "$HOME/${CONFIG_FILE}" -> source "$HOME"/"${CONFIG_FILE}"
[10:10:59] <razend> should be okay?
[10:11:36] <earendel> lol that do you even know how $* works was hilarious. i was there as you did grasp it two wekks ego. (field resolution bs)
[10:11:42] <emanuele6> razend: no, shellcheck can't follow constant (literal) arguments to source.
[10:12:25] <razend> So we need to escape the shellcheck?
[10:12:36] <emanuele6> razend: actually can you show me your code
[10:13:16] <emanuele6> i just checked and on my system it able to follow `export BASH_DIR=$HOME/.bash' `source -- "$BASH_DIR/environment"'
[10:13:24] <emanuele6> so you probably have something odd in your code
[10:14:00] <earendel> what is shellcheck
[10:14:08] <emanuele6> !shellcheck
[10:14:08] <greybot> ShellCheck is a shell linting/suggestion tool. Information and online checker: http://www.shellcheck.net/ . Can also be installed locally as a CLI tool.
[10:14:30] <razend> emanuele6 - https://github.com/MagePsycho/magento2-media-downloader-bash-script/blob/main/src/m2-media-downloader.sh#L345-L352
[10:14:51] <earendel> so it would work for in bash, just not for shellcheck? pf
[10:14:55] <emanuele6> https://raw.githubusercontent.com/MagePsycho/magento2-media-downloader-bash-script/main/src/m2-media-downloader.sh
[10:14:57] <emanuele6> !check
[10:14:58] <checkbot> emanuele6: Line 201: Declare and assign separately to avoid masking return values. Line 424: config is referenced but not assigned. Line 455: Prefer mapfile or read -a to split command output (or quote to avoid splitting). See https://shellcheck.net/?id=cb87498 for all 21 issues.
[10:15:31] <earendel> sounds like a useless tool then.
[10:15:32] <emanuele6> the code does not pass shellcheck anyway
[10:16:25] <emanuele6> razend: are you running shellcheck with -x?
[10:17:00] <emanuele6> i took that for granted, but maybe you are not.
[10:17:22] *** Joins: bluedust (~bluedust@117.204.150.55)
[10:17:33] <earendel> inutil
[10:18:40] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[10:20:17] *** Quits: bluedust_ (~bluedust@185.248.85.55) (Ping timeout: 256 seconds)
[10:20:25] <emanuele6> shellcheck won't check sourced files unless you specify `-x' (i think it also says it in the warning message in recent versions)
[10:21:21] <razend> Which tool/IDE do you guys use for bash scripting?
[10:22:20] <earendel> visual studio
[10:22:43] <earendel> with emanu6 plugin
[10:23:36] <dodo> vim
[10:23:44] *** Quits: dig (~dig@149.167.139.159) (Quit: dig)
[10:24:58] <razend> intellij anyone with BashSupport plugin?
[10:28:06] *** Joins: bluedust_ (~bluedust@185.248.85.10)
[10:30:52] *** Quits: bluedust_ (~bluedust@185.248.85.10) (Read error: Connection reset by peer)
[10:30:58] *** Joins: bluedus__ (~bluedust@185.248.85.10)
[10:31:11] <razend> Â _images=( $( for i in $(getImagesByProduct) ; do if [[ "$i" != 'value' ]]; then echo $i; fi done ) )
[10:31:12] <razend> Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  ^-- SC2207 (warning): Prefer mapfile or read -a to split command output (or quote to avoid splitting).
[10:31:25] *** Quits: bluedust (~bluedust@117.204.150.55) (Ping timeout: 240 seconds)
[10:31:48] *** Joins: freep (~freepppp@77.49.184.64.dsl.dyn.forthnet.gr)
[10:33:54] *** Quits: michigan (uid507982@id-507982.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[10:36:53] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[10:37:28] <emanuele6> !faq 1 > razend
[10:37:28] <greybot> razend: https://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
[10:39:34] <emanuele6> !for$(
[10:39:34] <greybot> Never do this: for x in $(command) or `command` or $var. for-in is used for iterating arguments, not (output) strings. Instead, use a glob (eg. *.txt), arrays (eg. "${names[@]}") or a while-read loop (eg. while read -r line). See http://mywiki.wooledge.org/BashPitfalls#pf1 and http://mywiki.wooledge.org/DontReadLinesWithFor
[10:39:37] <pj> is getImagesByProduct a bash function??
[10:39:53] <pj> you would be better off having it put its output in an array in that case.
[10:40:28] *** Joins: bluedust (~bluedust@103.165.167.220)
[10:40:29] <emanuele6> wow, that function has a sql injection...
[10:41:12] <pj> yep
[10:41:45] <pj> not to mention lack of quoting in the function it calls
[10:41:51] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[10:42:23] <razend> SQL injection? it accepts only digit as input which is used in SQL
[10:42:25] <razend> still?
[10:44:17] *** Joins: zostj (~rue@1-162-41-131.dynamic-ip.hinet.net)
[10:44:39] *** Quits: bluedus__ (~bluedust@185.248.85.10) (Ping timeout: 256 seconds)
[10:44:55] *** Quits: jab416171 (~jab416171@c-174-52-177-39.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[10:45:26] <pj> it injects potential code from a config file which is tied to an environment variable.
[10:47:05] *** Quits: edlou (uid413273@id-413273.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[10:47:45] *** Bocaneri is now known as Sauvin
[10:49:11] *** Quits: nattiestnate (~nate@182.3.37.200) (Ping timeout: 256 seconds)
[10:49:57] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[10:51:44] *** Joins: nattiestnate (~nate@182.3.37.200)
[10:59:59] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[11:00:15] *** Joins: unop (~unop@194.154.249.71)
[11:06:47] *** Joins: fero[m] (~feroenvsn@2001:470:69fc:105::1:5914)
[11:07:20] *** Joins: michigan (uid507982@id-507982.ilkley.irccloud.com)
[11:12:12] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[11:13:21] *** Joins: jinsun (~quassel@user/jinsun)
[11:13:38] *** Quits: bluedust (~bluedust@103.165.167.220) (Remote host closed the connection)
[11:16:20] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Remote host closed the connection)
[11:17:37] *** Joins: rgrinberg (~textual@177.246.221.117)
[11:17:47] *** Quits: nattiestnate (~nate@182.3.37.200) (Ping timeout: 268 seconds)
[11:22:54] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[11:27:03] *** Joins: sdu (~doo@185.44.146.214)
[11:31:32] *** Joins: vysn (~vysn@user/vysn)
[11:34:30] *** Joins: dreamon (~dreamon@ppp-88-217-76-15.dynamic.mnet-online.de)
[11:36:35] *** Joins: rendar (~rendar@user/rendar)
[11:38:37] <razend> pj Gotcha. How to prevent in bash? programming language has MySQL escape functions though. Not sure in bash
[11:40:17] *** Joins: bluedust (~bluedust@117.204.150.55)
[11:41:26] <razend> "You can base64 encode the value, and then base64 decode it once it's in MySQL"
[11:43:37] *** Joins: ravan (~ravan@user/ravan)
[11:46:33] *** Quits: totenkoph (~scythe@user/totenkoph) (Ping timeout: 276 seconds)
[11:47:47] *** Joins: totenkoph (~scythe@user/totenkoph)
[11:51:30] *** Joins: keypushe- (~keypusher@user/keypusher)
[11:51:38] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 260 seconds)
[11:54:33] *** keypushe- is now known as keypusher
[11:54:44] *** Joins: nattiestnate (~nate@182.3.37.200)
[12:06:03] <geirha> yeah, no mysql-escaping functions in bash, and mysql itself does not offer any either, so you have to write your own somehow. base64 should be a safe option.
[12:06:31] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[12:08:28] <emanuele6> or use some short inline tcl/perl/python to safely access the database with a library, pass arguments the interpreter and use $$::argv/@ARGV/sys.argv in the inline code
[12:09:33] <emanuele6> s/\$//1
[12:09:56] <pj> base64 is admittedly an option I had not thought of.
[12:10:09] <emanuele6> same, i was surprised by it
[12:10:17] <emanuele6> interesting idea
[12:10:22] <pj> generally speaking when I have to do that level of db access I use a language other than bash, though.
[12:10:47] *** Joins: Digitalway (~Digitalwa@105.235.131.167)
[12:11:05] <earendel> you mean it's not possible to invoke the mysql-function from some library it's in?
[12:11:23] <pj> If you want to try to write some sort of bash function to do it then this may help: https://dev.mysql.com/doc/refman/8.0/en/string-literals.html
[12:11:40] <pj> earendel: nope
[12:12:27] <earendel> pj: ok. then write a function in c that calls that lib function. compile. done?
[12:13:50] <earendel> what's that .so files
[12:14:05] <earendel> ok how is it done.
[12:14:37] <pj> earendel: sure, don't forget it's two functions needed, one to quote strings and one to quote identifiers.
[12:15:38] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:15:40] <pj> earendel: and ... what you're asking is way beyond the scope of this channel.
[12:16:37] *** Quits: Digitalway (~Digitalwa@105.235.131.167) (Ping timeout: 240 seconds)
[12:17:18] <earendel> actually im not really interested in that particular thing at this time...if i was..how would i do it. (useless to say in bash. u just start some process in bash. its not even running on van neuman computer. but somewhere inside the SE-mainframe)
[12:18:16] <earendel> anyway. the process is called P1. and it takes a single arguement. the escaped sql string.
[12:18:24] <earendel> wait no.
[12:18:46] <earendel> lol. it escapes the string.
[12:20:11] <earendel> anyways. where can i join to learn to write and compile that single line that uses that mysql lib function. .. like real quick.
[12:20:33] *** Joins: Digitalway (~Digitalwa@105.235.131.167)
[12:21:13] <earendel> (it must not be that function. just any function of any lib, that you have at hand... )
[12:21:20] <earendel> BEEP
[12:21:24] <earendel> BEEP
[12:21:43] <earendel> that makes 2 beeps.
[12:21:59] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-630-171.w86-246.abo.wanadoo.fr)
[12:22:37] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[12:22:55] <earendel> damn. anglosaxons and german are dead.
[12:23:12] <pj> earendel: you assume that there is such a function in a lib.
[12:23:17] <pj> there may not be.
[12:23:17] <earendel> will have to learn mandarin or russian.
[12:23:19] <earendel> :/
[12:23:29] *** Joins: Digitalway_ (~Digitalwa@105.235.131.167)
[12:23:35] <earendel> pj: yes. that or another function.
[12:23:46] <pj> from what I can gather many, of not most mysql driver implementations implement the quoting function themselves.
[12:24:25] *** Joins: csm3105 (~csm3105@static-90-220-24-46.ipcom.comunitel.net)
[12:24:26] *** Joins: arinov (~arinov@178.240.175.124)
[12:24:29] <pj> anyways, as stated before, that is beyond the scope of this channel.
[12:24:49] *** Quits: Digitalway_ (~Digitalwa@105.235.131.167) (Read error: Connection reset by peer)
[12:25:01] *** Joins: Csm319_ (~csm3105@static-90-220-24-46.ipcom.comunitel.net)
[12:25:11] *** Joins: Digitalway_ (~Digitalwa@105.235.131.167)
[12:25:17] *** Quits: freep (~freepppp@77.49.184.64.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[12:25:32] *** Joins: freep (~freepppp@62.1.172.246.dsl.dyn.forthnet.gr)
[12:25:38] *** Quits: Digitalway (~Digitalwa@105.235.131.167) (Ping timeout: 268 seconds)
[12:26:08] <earendel> i give you the permission to escape the scope.
[12:26:45] <pj> You assume I would want to.
[12:26:58] <earendel> i can take it away from you (and will do so) at once!
[12:27:14] <pj> it's not yours to grant in the first place.
[12:27:26] <earendel> you're a bot.
[12:27:41] <earendel> bauernschach.
[12:27:58] <earendel> take them 3 steps into something.
[12:28:03] <earendel> and tilt.
[12:29:19] *** Quits: csm3105 (~csm3105@static-90-220-24-46.ipcom.comunitel.net) (Ping timeout: 268 seconds)
[12:29:48] *** Joins: bud (~bud@user/bud)
[12:29:48] <earendel> let me talk to your chinese specialist.
[12:29:52] <earendel> lol
[12:31:34] *** Joins: janko (~gian@2001:ce8:132:f834:8722:d0dc:419c:4709)
[12:32:08] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[12:36:35] *** Quits: Digitalway_ (~Digitalwa@105.235.131.167) (Read error: Connection reset by peer)
[12:36:50] <earendel> you would have to proove this shit is even a hack. and not some frickin NAT piece of shittable installed  by my provider.
[12:41:58] *** Quits: rgrinberg (~textual@177.246.221.117) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:43:44] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:44:49] *** Joins: seninha (~seninha@user/seninha)
[12:48:07] <lockywolf> how do I grep the contents of a bash variable?
[12:48:11] *** Joins: adac (~adac@31.207.101.82)
[12:48:24] <lockywolf> printf "%s" "$VAR" | grep ?
[12:48:32] <lockywolf> or is there a better way?
[12:48:45] *** Joins: reset (~reset@user/reset)
[12:49:06] <tirnanog> [[ $VAR == pattern ]]. but if you're writing for sh, say so.
[12:49:26] <lockywolf> no, gnu bash
[12:49:50] <tirnanog> in that case, if the thing you're searching for can be expressed as a glob pattern, the above applies. bash can also perform extended regular expression matching.
[12:50:27] <emanuele6> [[ $var == a* ]] is only true if $var starts with a, `*b*' would be true only if $var contains b, etc
[12:50:33] <lockywolf> XY problem, isn't it?
[12:50:54] <tirnanog> if you do actually need grep, however, then what you proposed is fine. another way would be grep ... <<<"$VAR"
[12:51:13] <emanuele6> or you can use extended regular expressions (like awk, egrep) using [[ $var =~ ^a ]]
[12:51:15] *** Joins: legola (~legola@46.235.101.65)
[12:51:18] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[12:51:47] <tirnanog> (it's impossible to tell whether grep would confer any value based on the question alone)
[12:52:18] *** Quits: nattiestnate (~nate@182.3.37.200) (Read error: Connection reset by peer)
[12:53:00] *** Joins: nattiestnate (~nate@182.2.164.13)
[12:53:20] <tirnanog> suffice to say, that if you're simply trying to ascertain whether there was a match, there's usually no need to use grep.
[12:56:04] *** Quits: bluedust (~bluedust@117.204.150.55) ()
[12:57:43] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[12:59:13] *** Quits: Csm319_ (~csm3105@static-90-220-24-46.ipcom.comunitel.net) (Quit: Leaving)
[13:01:38] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[13:05:05] *** Quits: sinaowolabi_ (~SinaOwola@41.58.240.230) (Ping timeout: 268 seconds)
[13:09:33] *** Quits: sinaowolabi (~SinaOwola@160.152.36.12) (Read error: No route to host)
[13:11:07] *** Joins: tobybl (~tobybl@213.31.132.151)
[13:11:38] *** Joins: sinaowolabi (~SinaOwola@160.152.36.12)
[13:15:07] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[13:19:17] *** Quits: richardm75 (~richardm7@2600:8801:c507:b200:99e6:af31:7b38:d48d) (Ping timeout: 240 seconds)
[13:19:30] *** Joins: Anvil (~anvil@193.252.149.222)
[13:19:50] <aidalgol> Is it possible to add a suffix to every item in an array with brace expansion?
[13:20:27] <emanuele6> yes
[13:20:36] <aidalgol> Great!  How?
[13:20:39] <emanuele6> aidalgol: "${arr[@]/%/suffix}"
[13:20:47] <aidalgol> Ah, percent.  Thanks!
[13:22:37] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[13:28:59] *** Quits: nattiestnate (~nate@182.2.164.13) (Ping timeout: 256 seconds)
[13:29:29] *** Joins: sinaowolabi_ (~SinaOwola@41.58.56.55)
[13:29:54] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Ping timeout: 276 seconds)
[13:32:13] *** Quits: janko (~gian@2001:ce8:132:f834:8722:d0dc:419c:4709) (Ping timeout: 268 seconds)
[13:32:13] *** Quits: arinov (~arinov@178.240.175.124) (Ping timeout: 268 seconds)
[13:34:09] *** Joins: arinov (~arinov@178.240.175.124)
[13:38:37] *** Quits: arinov (~arinov@178.240.175.124) (Ping timeout: 256 seconds)
[13:38:59] *** Quits: uuidNuniq (~hejux@146.56.136.247) (Remote host closed the connection)
[13:39:14] *** Joins: uuidNuniq (~weechat@80.251.208.245.16clouds.com)
[13:41:53] <uuidNuniq> # a=
[13:41:54] <shbot> uuidNuniq: no output
[13:42:01] *** Joins: moto (~moto@user/moto)
[13:42:22] <uuidNuniq> # a=(1 2 3) ; echo "${a[@]}suffix"
[13:42:23] <shbot> uuidNuniq: 1 2 3suffix
[13:42:30] <uuidNuniq> # a=(1 2 3) ; echo "${a[@]}/%/suffix"
[13:42:31] <shbot> uuidNuniq: 1 2 3/%/suffix
[13:42:38] <uuidNuniq> # a=(1 2 3) ; echo "${a[@]/%/suffix}"
[13:42:39] <shbot> uuidNuniq: 1suffix 2suffix 3suffix
[13:42:50] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[13:43:33] <uuidNuniq> what is `%` here?
[13:45:00] <grawity> a modifier to / that replaces only at the end of the string
[13:45:00] <emanuele6> # a=(1a 2b 3c 4x 5c 6x) ; echo "${a[@]/%x/suffix}"
[13:45:02] <shbot> emanuele6: 1a 2b 3c 4suffix 5c 6suffix
[13:45:13] <grawity> # a="one two one"; echo "${a/%one/three}"
[13:45:14] <shbot> grawity: one two three
[13:45:26] <emanuele6> something that matches the pattern (empty in this case) only if it is at the end
[13:49:46] *** Joins: jinsun__ (~quassel@user/jinsun)
[13:51:37] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[13:53:17] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[13:53:46] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:55:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[13:55:04] *** Lord_of_Life_ is now known as Lord_of_Life
[13:56:36] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[13:59:10] <SudoBash> mmmm cat /proc/3003/fd/0 >> tee >> /proc/4629/fd/0
[13:59:41] <uuidNuniq> cat | tee >>
[14:00:04] <emanuele6> !uuoc
[14:00:04] <greybot> Useless Use Of Cat (cat foo | grep bar). See https://mywiki.wooledge.org/BashFAQ/119 and http://www.iki.fi/era/unix/award.html#cat
[14:00:11] <SudoBash> even just cat /proc/3003/fd/0 >> /proc/4629/fd/0
[14:00:40] <uuidNuniq> what is fd 0?
[14:00:41] *** Quits: Anvil (~anvil@193.252.149.222) (Quit: .)
[14:00:52] *** Joins: Anvil (~anvil@193.252.149.222)
[14:00:53] <uuidNuniq> fd 1 is stdout fd 2 is stderr
[14:00:59] <SudoBash> stdin
[14:01:00] <emanuele6> SudoBash: do you have a question or are you just to send "commands"?
[14:01:17] *** Joins: andre144k (~andre144k@213.221.88.82)
[14:01:18] <SudoBash> it was related to earlier conversation, nvm
[14:01:21] <andre144k> hello all
[14:02:35] <SudoBash> executing commands on behalf of another PID as root
[14:03:28] <emanuele6> it does not sound like a bash topic to be honest
[14:04:44] <andre144k> i have follow code:   var="(hasDocument=|hasImage=yes)" && grep -i -R -E "($var)" foobar.txt
[14:05:11] <andre144k> how to change to ignore follow characters? "
[14:05:23] <andre144k> i want find hasImage="yes" also
[14:06:18] *** Joins: martinus__ (~martin@2.56.202.77.rev.sfr.net)
[14:08:11] *** Joins: earnestly (~earnest@user/earnestly)
[14:08:30] <emanuele6> what?
[14:09:02] <tirnanog> (hasDocument=|hasImage=(yes|"yes"))
[14:10:11] <emanuele6> -R seems useless: you are passing `foobar.txt' to grep
[14:10:36] *** Joins: GuiToris (~GuiToris@user/guitoris)
[14:10:42] <tirnanog> -i seems questionable, also, given the pattern.
[14:11:15] <andre144k> yes
[14:11:20] <andre144k> @emanuele6, yes
[14:11:53] <GuiToris> hello, I don't know how to look this up. Bash failed to substitute these variables: "$var1_$var2". So I thought I would use braces. I don't know where to put $.  "${var1}_${var2}" or "{$var1}_{$var2}"
[14:12:21] <grawity> in shell it's ${var}
[14:12:30] <andre144k> i have a very long $var list, so maybe there is a better way then give at each "(yes|"yes")"
[14:12:39] <tirnanog> "$var1_$var2" is fine to begin with. what's failing exactly?
[14:12:47] <emanuele6> # var1=a var2=b; echo "outside ${var1}_${var2}"; echo "inside {$var1}_{$var2}"
[14:12:48] <shbot> emanuele6: outside a_b
[14:12:48] <shbot> emanuele6: inside {a}_{b}
[14:13:09] <tirnanog> oh wait, it's not. yeah, the second variant.
[14:13:10] <grawity> if you assume the first variable is called "var1_", sure, but that's a bit unlikely
[14:13:14] <tirnanog> but still, what fails at that point?
[14:13:35] <emanuele6> !xy > andre144k
[14:13:36] <greybot> andre144k: http://mywiki.wooledge.org/XyProblem -- "I want to do X, but I'm asking how to do Y..."
[14:13:47] <GuiToris> I don't know exactly, var1 was just missing, so I thought I would use braces
[14:14:05] <GuiToris> I'll check out if it works with braces
[14:14:11] <emanuele6> GuiToris: $var1_ expands a variable named "var1_", not a variable named "var1"
[14:14:20] <GuiToris> oh
[14:14:22] <GuiToris> oooh
[14:14:24] *** Quits: kyr (~kyr@167.71.50.12) (Quit: Lost terminal)
[14:14:36] <GuiToris> yes, that must have been the problem then
[14:14:42] *** Joins: kyr (~kyr@167.71.50.12)
[14:14:47] <GuiToris> I would have never figured this out
[14:14:56] <tirnanog> so, "${var1}_${var2}" is ok, as is "${var1}_$var2", for instance.
[14:14:58] <emanuele6> use "$var1"_"$var2" or "${var1}_$var2", or whatever
[14:15:25] <emanuele6> just don't let the _ be right after the 1 and make sure both substitutions are quoted
[14:15:43] <GuiToris> thanks a lot :)
[14:16:17] *** Joins: nattiestnate (~nate@182.2.164.13)
[14:19:08] *** Quits: uuidNuniq (~weechat@80.251.208.245.16clouds.com) (Remote host closed the connection)
[14:19:23] *** Joins: uuidNuniq (~weechat@80.251.208.245.16clouds.com)
[14:21:03] *** Quits: nattiestnate (~nate@182.2.164.13) (Read error: Connection reset by peer)
[14:21:55] <tirnanog> andre144k: you're not matching at word boundaries to begin with, so you could just write hasImage="?yes, I suppose.
[14:23:10] *** Joins: nattiestnate (~nate@114.122.107.243)
[14:23:40] <andre144k> emanuele6, tirnanog: thnks much - my solution is an "echo $var | sed "s:=yes:=(yes:\"yes\")" not perfect but ok for this situation
[14:23:57] <tirnanog> "$var"
[14:24:13] <andre144k> var=$(echo "$var" | sed "s:=yes:=(yes:\"yes\")")
[14:24:38] <tirnanog> also, the substitution could be performed directly with a parameter expansion.
[14:26:02] <tirnanog> # var='(hasDocument=|hasImage=yes)'; var=${var//=yes/=(yes|\"yes\")}; echo "$var"
[14:26:04] <shbot> tirnanog: (hasDocument=|hasImage=(yes|"yes"))
[14:27:02] *** Joins: clarkk (~clarkk@host86-165-12-159.range86-165.btcentralplus.com)
[14:31:42] *** Joins: ominionx (~ominionx@2604:2d80:9d07:2a00:f863:4aed:b06e:984e)
[14:32:14] *** Joins: bbju (~bbju@103.144.149.218)
[14:32:41] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[14:33:05] *** Quits: nosoul (nosoul@gateway/vpn/protonvpn/nosoul) (Quit: Leaving)
[14:36:08] *** Joins: maromau (~mauro@mob-5-90-199-238.net.vodafone.it)
[14:36:16] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Remote host closed the connection)
[14:36:49] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[14:36:53] *** Quits: nattiestnate (~nate@114.122.107.243) (Quit: WeeChat 3.4)
[14:37:08] *** Joins: AsenMx (~AsenMx@user/asenmx)
[14:37:13] *** Joins: nattiestnate (~nate@114.122.105.227)
[14:37:15] *** Hash is now known as EnchanterTim
[14:37:18] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[14:38:05] *** Quits: maromau (~mauro@mob-5-90-199-238.net.vodafone.it) (Client Quit)
[14:38:24] *** Joins: maromau (~mauro@mob-5-90-199-238.net.vodafone.it)
[14:39:17] *** Joins: nosoul (nosoul@gateway/vpn/protonvpn/nosoul)
[14:39:26] *** Quits: myrrh (~markus@172.58.196.133) (Ping timeout: 268 seconds)
[14:41:42] *** Quits: ominionx (~ominionx@2604:2d80:9d07:2a00:f863:4aed:b06e:984e) (Quit: Leaving)
[14:42:48] *** Quits: maromau (~mauro@mob-5-90-199-238.net.vodafone.it) (Client Quit)
[14:42:57] *** Quits: adac (~adac@31.207.101.82) (Ping timeout: 240 seconds)
[14:46:44] *** Joins: xx (~xx@user/xx)
[14:47:02] *** Joins: drd (~drd@host-62-211-44-179.pool62211.interbusiness.it)
[14:47:11] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 256 seconds)
[14:48:27] *** Joins: janko (~gian@2001:ce8:132:f834:4002:e21e:f78:7755)
[14:50:37] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[14:51:02] *** Quits: drd (~drd@host-62-211-44-179.pool62211.interbusiness.it) (Read error: Connection reset by peer)
[14:51:59] *** Joins: _gabriele (~gabriele@host-95-252-18-17.retail.telecomitalia.it)
[14:52:20] *** Joins: jinsun (~quassel@user/jinsun)
[14:57:27] *** Joins: drd (~drd@host-62-211-44-179.retail.telecomitalia.it)
[14:57:38] *** Quits: drd (~drd@host-62-211-44-179.retail.telecomitalia.it) (Client Quit)
[14:59:17] *** Quits: uuidNuniq (~weechat@80.251.208.245.16clouds.com) (Remote host closed the connection)
[14:59:33] *** Joins: uuidNuniq (~weechat@80.251.208.245.16clouds.com)
[15:00:35] *** Joins: drd (~drd@host-62-211-44-179.pool62211.interbusiness.it)
[15:00:53] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:01:01] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 268 seconds)
[15:04:36] *** Quits: keypusher (~keypusher@user/keypusher) (Ping timeout: 240 seconds)
[15:04:44] *** Joins: keypushe- (keypusher@user/keypusher)
[15:05:32] *** Quits: drd (~drd@host-62-211-44-179.pool62211.interbusiness.it) (Read error: Connection reset by peer)
[15:06:42] *** Joins: drd (~drd@host-62-211-44-179.retail.telecomitalia.it)
[15:06:54] *** Quits: freep (~freepppp@62.1.172.246.dsl.dyn.forthnet.gr) (Quit: Leaving)
[15:08:00] *** keypushe- is now known as keypusher
[15:10:01] *** Joins: karakedi (~eAC53C340@user/karakedi)
[15:11:07] *** Quits: janko (~gian@2001:ce8:132:f834:4002:e21e:f78:7755) (Quit: WeeChat 2.8)
[15:12:13] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[15:13:04] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[15:13:22] *** Quits: GuiToris (~GuiToris@user/guitoris) (Ping timeout: 268 seconds)
[15:13:36] *** Joins: libc (~weechat@user/tessio)
[15:13:42] *** Joins: zer0bitz (~zer0bitz@185.112.82.230)
[15:15:34] *** Joins: seninha (~seninha@user/seninha)
[15:16:11] *** Quits: michigan (uid507982@id-507982.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:19:44] *** Joins: callq (~callq@2409:4062:2d9d:1c4d:9431:33af:53b5:7599)
[15:21:15] <libc> fro mnow on im giogn with the pros
[15:22:13] *** Joins: freep (~freepppp@62.1.172.246.dsl.dyn.forthnet.gr)
[15:23:17] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[15:28:10] *** Quits: rkta (~rkta@2001:4ba0:cafe:eaf::1) (Quit: nyaa~)
[15:29:14] *** Joins: rkta_ (~rkta@2001:4ba0:cafe:eaf::1)
[15:30:33] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[15:30:45] *** Quits: _gabriele (~gabriele@host-95-252-18-17.retail.telecomitalia.it) (Changing host)
[15:30:45] *** Joins: _gabriele (~gabriele@user/gabriele)
[15:30:45] *** _gabriele is now known as gabriele
[15:33:51] *** rkta_ is now known as rkta
[15:34:22] *** Joins: lalitmee__ (~lalitmee@180.94.33.108)
[15:35:04] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[15:36:37] *** Quits: lalitmee_ (~lalitmee@180.94.32.60) (Ping timeout: 240 seconds)
[15:43:12] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[15:43:59] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[15:44:51] *** Joins: zeden (~zeden@user/zeden)
[15:45:59] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[15:47:30] *** Quits: SudoBash (~SudoBash@173.247.16.36) (Quit: Connection closed)
[15:50:25] *** Quits: bodiccea (~bodiccea@user/bodiccea) (Ping timeout: 250 seconds)
[15:50:32] *** Joins: bodiccea_ (~bodiccea@user/bodiccea)
[15:52:17] *** Quits: callq (~callq@2409:4062:2d9d:1c4d:9431:33af:53b5:7599) (Ping timeout: 240 seconds)
[15:52:41] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[15:54:47] *** Quits: bodiccea_ (~bodiccea@user/bodiccea) (Ping timeout: 252 seconds)
[15:56:51] *** Joins: Pinchiukas (~keps@128.29.231.35.bc.googleusercontent.com)
[15:58:26] <Pinchiukas> Why does shellcheck say that the parentheses are invalid in this block: https://pastebin.com/raw/UgP9xzGd ?
[16:00:55] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.4)
[16:01:01] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[16:02:52] *** Quits: listenurs (~igloo@c-98-240-233-64.hsd1.mn.comcast.net) (Remote host closed the connection)
[16:04:46] <emanuele6> !check
[16:04:47] <checkbot> Pinchiukas: Line 1: Parsing stopped here. Invalid use of parentheses?. Line 1: Quote/escape special characters when using eval, e.g. eval "a=(b)". Line 1: '(' is invalid here. Did you forget to escape it?. See https://shellcheck.net/?id=cb8487
[16:04:54] <emanuele6> because they are.
[16:05:02] <emanuele6> # a=(b)
[16:05:03] <shbot> emanuele6: no output
[16:05:14] <emanuele6> d# a=(b)
[16:05:15] <shbot> emanuele6: dash: 1: Syntax error: "(" unexpected
[16:05:23] <emanuele6> in a generic posix shell
[16:05:34] <emanuele6> and you have not specified a shebang
[16:05:44] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[16:05:57] *** Quits: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[16:06:10] <emanuele6> oh, you have `eval a=(b)'
[16:06:16] <emanuele6> that is not valid even in bash
[16:06:19] <emanuele6> # eval a=(b)
[16:06:20] <shbot> emanuele6: no output
[16:06:28] <emanuele6> apparently it is
[16:06:31] <emanuele6> nevermind
[16:06:42] <emanuele6> why do you even need eval?
[16:07:04] <earnestly> I saw eval, then saw the {}, then the rest and decided to just not reply at all
[16:07:24] *** Joins: michigan (uid507982@id-507982.ilkley.irccloud.com)
[16:07:27] <earnestly> It's too often the case that you'll end up having to spend hours explaining because almost everything is wrong
[16:07:58] <tirnanog> i.e. eval not being given a single, properly quoted parameter; use of eval at all; word splitting into an array ...
[16:08:15] <emanuele6> i didn't open the link before answering, i would not have replied either if i saw that
[16:08:46] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[16:08:48] <tirnanog> long story short: it should probably be mapfile -t < <(kubectl ...)
[16:08:56] <tirnanog> mapfile -t target_groups, I mean.
[16:09:09] <tirnanog> or maybe read -ra.
[16:09:30] <tirnanog> unless it's sh in which case ... gah.
[16:09:34] <emanuele6> i think he's actually trying to output code to eval
[16:09:48] <tirnanog> could be.
[16:09:50] *** Joins: taupiqueur (~taupiqueu@144.246.204.77.rev.sfr.net)
[16:10:11] <emanuele6> but the quoting is all messed up
[16:10:17] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[16:11:41] <emanuele6> also i don't think that jsonpath will properly escape .spec.targetGroupARN
[16:11:41] <Pinchiukas> I'm doing eval because inside I'm generating a string from a command that feeds contents of an associative array into bash that way.
[16:12:20] <Pinchiukas> The jsonpath bit does work.
[16:12:42] <Pinchiukas> This whole thing actually works. I'm just curious why it's complaining and maybe I can make it somehow nicer.
[16:12:52] *** Joins: thiras (~thiras@user/thiras)
[16:12:54] <emanuele6> it will just concatenate the values
[16:13:32] *** Joins: callq (~callq@2409:4062:2d9d:1c4d:55f1:21c8:2f97:cb62)
[16:13:38] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[16:13:43] <emanuele6> if 'targetGroupARN' is 'a b', you will get a random b element and if targetGroupARN is a$(shutdown), it will run shutdown
[16:14:23] *** Joins: GuiToris (~GuiToris@user/guitoris)
[16:14:26] <emanuele6> i don't know much about jsonpath, but jq let's you easily shell quote a strings
[16:14:26] <Pinchiukas> Ah, you mean I should quote whatever comes out of targetGroupARN?
[16:14:50] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 260 seconds)
[16:14:55] <emanuele6> Pinchiukas: yes, but you have bigger problems in that code
[16:15:08] <emanuele6> nothing is properly quoted
[16:15:15] <earnestly> emanuele6: jsonpath is quite tidy: https://github.com/json-path/JsonPath
[16:15:33] <earnestly> It's not jq, but not terrible
[16:15:45] <emanuele6> i know what jsonpath is, but i am not sure it can shell quote
[16:16:02] <earnestly> No it can't
[16:16:22] <earnestly> It's closer to xpath 1.0 for xml
[16:16:51] <Pinchiukas> emanuele6: what would you quote apart from the value of targetGroupARN?
[16:16:52] <emanuele6> in jq, you would write that simply as   .items[] | @sh "[\(.metadata.name)]=\(.spec.targetGroupARN)"
[16:17:19] <emanuele6> Pinchiukas: i was talking about another kind of quoting
[16:17:21] <emanuele6> !quote
[16:17:21] <greybot> https://mywiki.wooledge.org/Quotes
[16:17:27] <emanuele6> the substitutions
[16:17:43] <earnestly> When someone introduced arbitrary code injection/evaluation, and their response isn't "oh shit, I didn't know, how do I fix it", I don't think it's worth engaging further
[16:18:04] <earnestly> It's just so many levels of wrong to get that point whereby you'll now spend an hour reworking everything
[16:18:08] <earnestly> All on your own back
[16:19:38] <earnestly> There's no need for eval here, there's no need to generate "shell syntax" for eval.  The entire approach is just wrong and as a consequence all of the fires you're trying to put out will be obnoxious
[16:24:27] *** Quits: uuidNuniq (~weechat@80.251.208.245.16clouds.com) (Remote host closed the connection)
[16:24:43] *** Joins: uuidNuniq (~weechat@80.251.208.245.16clouds.com)
[16:26:08] <Soni> does JIT compilation in bash even do much of anything for performance?
[16:27:10] <earnestly> What JIT compilation are you refering to?
[16:28:47] *** Parts: grawity (~grawity@star.nullroute.lt) ()
[16:28:50] <Soni> earnestly: with eval
[16:29:00] <Soni> dynamic code generation
[16:29:00] * earnestly nope
[16:29:04] *** Quits: drd (~drd@host-62-211-44-179.retail.telecomitalia.it) (Read error: Connection reset by peer)
[16:29:55] *** Joins: drd (~drd@host-62-211-44-179.pool62211.interbusiness.it)
[16:30:07] *** Quits: bbju (~bbju@103.144.149.218) (Quit: Client closed)
[16:30:49] <Soni> unfortunate
[16:31:05] *** Joins: MrBlue (~MrBlue@24.114.93.161)
[16:35:58] *** Joins: Kyuzo68 (~Kyuzo@host-82-63-76-36.business.telecomitalia.it)
[16:36:24] *** Quits: uuidNuniq (~weechat@80.251.208.245.16clouds.com) (Remote host closed the connection)
[16:36:33] *** Quits: drd (~drd@host-62-211-44-179.pool62211.interbusiness.it) (Ping timeout: 256 seconds)
[16:36:39] *** Joins: uuidNuniq (~weechat@146.56.136.247)
[16:38:12] *** Joins: roadie (~user@2a02:8108:ec0:1427:dd96:8c85:d3c6:628a)
[16:38:52] *** Joins: drd (~drd@93.55.31.127)
[16:39:00] *** Quits: tobybl (~tobybl@213.31.132.151) (Remote host closed the connection)
[16:44:57] *** Quits: dsrt^ (~dsrt@207.5.54.6) (Remote host closed the connection)
[16:47:08] *** Quits: XV8 (~XV8@c-73-148-120-152.hsd1.va.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:51:38] *** Quits: drd (~drd@93.55.31.127) (Quit: ZNC 1.8.2 - https://znc.in)
[16:52:38] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 260 seconds)
[16:53:00] *** Joins: drd (~drd@93.55.31.127)
[16:53:09] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[16:53:35] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[16:57:16] *** Quits: uuidNuni1 (~weechat@193.123.227.17) (Quit: WeeChat 3.3)
[16:57:54] *** Quits: uuidNuniq (~weechat@146.56.136.247) (Remote host closed the connection)
[16:58:09] *** Joins: uuidNuniq (~weechat@146.56.136.247)
[16:58:27] *** Joins: uuidNuni1 (~weechat@193.123.227.17)
[16:59:10] *** Quits: uuidNuniq (~weechat@146.56.136.247) (Client Quit)
[16:59:22] *** Joins: uuidNuniq (~weechat@146.56.136.247)
[17:03:56] <Pinchiukas> earnestly: how can I do that without using eval? I need to fill an associative array.
[17:05:35] *** Quits: roadie (~user@2a02:8108:ec0:1427:dd96:8c85:d3c6:628a) (Quit: ERC (IRC client for Emacs 25.3.50.1))
[17:05:37] *** Quits: polve (~polve@user/polve) (Ping timeout: 240 seconds)
[17:06:44] *** Joins: polve (~polve@user/polve)
[17:06:46] *** Quits: gabriele (~gabriele@user/gabriele) (Read error: Connection reset by peer)
[17:07:25] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[17:07:37] <tirnanog> consider emanuele6's suggestion, which incorporated the use of jq's shell-quoting feature.
[17:10:07] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[17:10:24] *** Quits: drd (~drd@93.55.31.127) (Quit: ZNC 1.8.2 - https://znc.in)
[17:10:34] *** Joins: tejr (~tejr@user/tejr)
[17:11:30] <Pinchiukas> tirnanog: how would that work given that I'm not using jq in this case?
[17:12:03] <tirnanog> you would need to begin using it. otherwise, the only valid option is to instruct kubectl to output in a format that can be unambiguously parsed with, say, read.
[17:12:12] <emanuele6> really you don't even need to eval:  declare -A assarr; mapfile -td '' assarr < <(jq -j '...+"\u0000"')  would also work
[17:12:20] *** Joins: drd (~drd@93.55.31.127)
[17:12:23] <emanuele6> but do you really even need an associative array?
[17:13:28] *** Joins: igemnace (~ian@user/igemnace)
[17:13:33] <tirnanog> for instance, if we can assume that \n is a genuinely safe record delmiter, if you were able to have kcubectl emit literal - and I emphasise the word, literal - key=val style lines, that could be easily parsed.
[17:14:00] <tirnanog> can it do that, though? I don't know.
[17:14:22] *** Joins: furrymcgee (~devuan@cgn-213-196-210-78.nc.de)
[17:14:34] <emanuele6> (and don't even need jq really if you can make jsonpath print NIL instead of \n)
[17:14:36] <tirnanog> the point is, json must be decoded and transformed. you can't just pass through chunks of json to eval. it's incorrect.
[17:15:22] <emanuele6> oh, nevermind
[17:15:22] <Pinchiukas> It's not json that's being returned by the command. It's pairs of [key]=value.
[17:15:37] <emanuele6> mapfile can't be used on associative array for some readson
[17:16:01] <earnestly> Build it manually in a loop, it's not difficult
[17:16:14] <tirnanog> Pinchiukas: which command?
[17:16:16] <earnestly> Ideally you would not even be creating arrays
[17:16:17] *** Joins: mr-red (~drd@host-62-211-44-179.pool62211.interbusiness.it)
[17:16:25] <Pinchiukas> tirnanog: kubectl.
[17:16:32] <earnestly> The output of the primary command being fed directly into the next filter, no arrays, variables, nothing
[17:16:37] <tirnanog> Pinchiukas: ah. are they string literals, though?
[17:16:37] *** Quits: drd (~drd@93.55.31.127) (Ping timeout: 240 seconds)
[17:16:56] <emanuele6> so you wwould have to  do something like `while mapfile -td '' -n2; do assarr[${MAPFILE[0]}]=${MAPFILE[1]}; done' but still, no need to eval
[17:16:58] <Pinchiukas> tirnanog: yeah I guess.
[17:17:16] <earnestly> So much is conceptually just: var1=$(cmd); var2=$(cmd <<< "$var1"); etc.
[17:17:29] <earnestly> Which is terrible
[17:17:31] <tirnanog> if they are, I'd lose the square brackets then just do a simple while/read loop to iteratively create the associative array.
[17:17:50] <tirnanog> and with nary an eval in sight.
[17:18:56] *** Joins: jinsun (~quassel@user/jinsun)
[17:19:21] <Pinchiukas> tirnanog: what might the loop look like? For an associative array, I mean.
[17:19:38] <tirnanog> it's doable if they're 'raw' values, basically.
[17:19:44] <earnestly> while condition; do array[key]=value; done
[17:19:58] <earnestly> But I still don't see the justification for using an array at all
[17:20:07] <Pinchiukas> earnestly: how do you retrieve "key" and "value" though?
[17:20:14] <earnestly> read
[17:20:29] <emanuele6> if you simply replace "\n" with "\u0000" in the json path and use the `while mapfile' loop is sent before, doesn't it just work?
[17:20:31] <earnestly> Your standard while read loop, perhaps with IFS and -d
[17:20:45] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Ping timeout: 256 seconds)
[17:20:51] <earnestly> This depends on knowing your data inputs as much annoyance can be avoided if guarantees are available
[17:20:52] <tirnanog> I was about to ask whether it can produce NUL bytes.
[17:21:09] <tirnanog> because those would be ideal as raw value delimiters.
[17:21:24] <tirnanog> well, assuming no actual value is supposed to contain a NUL byte (I hope not).
[17:21:28] <earnestly> Instead of worrying about inputs, you ensure the inputs are only representible in the form you accept (rejecting the rest)
[17:21:59] <Pinchiukas> So I read a "line" (separated by null), how do I separate key and value?
[17:22:06] <earnestly> But this also causes problems, I just don't see much benefit these days in getting the shell involved in much more than composing tools
[17:22:40] <tirnanog> # declare -A map; while read -rd '' key && read -rd '' val; do map[$key]=$val; done < <(printf '%s\0' foo 1 bar 2); declare -p map
[17:22:41] <shbot> tirnanog: declare -A map=([foo]="1" [bar]="2" )
[17:23:01] <tirnanog> would be one way.
[17:23:16] <tirnanog> er, with IFS= also.
[17:23:16] <earnestly> This is what I'd do if forced to use arrays
[17:23:38] <emanuele6> yeah, i also said before "do you even need an array"?
[17:23:53] <uuidNuniq> earnestly: emanuele6  are you guys twins?
[17:23:56] <earnestly> tirnanog: For a laugh I did this: https://0x0.st/orVN.sh
[17:24:29] <emanuele6> earnestly: by the way, do you know any jsonpath filter program? i am only finding programming language libraries
[17:25:13] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[17:25:31] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[17:26:02] <tirnanog> earnestly: well, now I know something about the sgci protocol. that can't be bad.
[17:26:03] <earnestly> emanuele6: I realised that I had actually confused it with jmespath
[17:26:40] <emanuele6> oh, jmespath is the one used by aws iirc
[17:26:47] <earnestly> tirnanog: The advantage would be handling the requests without forking, which this doesn't benefit from.  But I like inet/tcpserver style designs
[17:27:00] <earnestly> emanuele6: https://jmespath.org/ yeah it's pretty nice to be fair
[17:27:18] <emanuele6> that looks more similar to jq
[17:27:33] <earnestly> very similar, yeah
[17:27:57] <Pinchiukas> Does sound better than using eval. I guess the default IFS should work if I separate key and value with whitespace?
[17:28:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:d4c4:3787:7442:bb18)
[17:28:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:d4c4:3787:7442:bb18) (Changing host)
[17:28:13] *** Joins: skapata (~Skapata@user/skapata)
[17:28:19] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[17:28:26] <earnestly> It depends on whether or not you can guarantee it
[17:28:32] *** Quits: sinaowolabi (~SinaOwola@160.152.36.12) (Ping timeout: 240 seconds)
[17:29:09] <Pinchiukas> I'm fairly sure there shouldn't be any spaces in there. But just as a thought experiment, let's say there can be random whitespace.
[17:29:37] <earnestly> tirnanog: Oh, DJB invented these netstrings, which is very like him to do so
[17:29:45] <tirnanog> earnestly: oh, really?
[17:29:47] *** Joins: tmm88 (~tmm88@user/tmm88)
[17:29:54] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[17:30:06] *** Joins: sinaowolabi (~SinaOwola@160.152.36.12)
[17:30:08] <emanuele6> well, you could filter out strings that contain whitespace with jsonpath, no?
[17:30:19] <tirnanog> can it not output NUL as a delimiter?
[17:30:37] <earnestly> emanuele6: (Probably not, jsonpath does look very limited)
[17:30:38] <Pinchiukas> tirnanog: that's a fair question, should make sure of that. :)
[17:30:46] <tirnanog> I don't know, but it would be worth finding out.
[17:31:25] <earnestly> Reject invalid inputs, log the errors
[17:31:34] <earnestly> Don't assume, or hope; ensure
[17:31:38] <emanuele6> if it can output LF with {"\n"}, i would think it can output NIL with {"\u0000"}
[17:31:53] <earnestly> Right, json allows these values
[17:32:14] <earnestly> So you have to implement something like a VFS for inputs, as it rejects / or \0 in filenames
[17:32:26] <earnestly> tirnanog: http://cr.yp.to/proto/netstrings.txt
[17:32:33] <tirnanog> earnestly: thanks.
[17:32:52] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[17:32:57] <earnestly> Providing the size like that is so like him though, anything to make C-api *alloc's safe
[17:33:07] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Ping timeout: 250 seconds)
[17:33:17] *** Quits: tmm88 (~tmm88@user/tmm88) (Client Quit)
[17:34:34] <earnestly> I wish bash could store nuls in variables, like zsh
[17:34:36] <earnestly> (or sh)
[17:34:37] <tirnanog> Pinchiukas: assuming you can, delimit key and value alike. the only thing that was wrong the given read commands was that both were not prefixed with IFS=
[17:34:41] <earnestly> (As in, I wish sh could)
[17:35:17] *** Quits: mr-red (~drd@host-62-211-44-179.pool62211.interbusiness.it) (Ping timeout: 250 seconds)
[17:35:28] <tirnanog> I only recently discovered that zsh could do that.
[17:35:36] <earnestly> tirnanog: Imagine this being done just so json can be synthesised from bash values and passed to tools further in the chain
[17:35:51] *** Joins: drd (~drd@host-62-211-44-179.pool62211.interbusiness.it)
[17:35:57] <earnestly> tirnanog: I think this is probably something everyone should read: https://www.more-magic.net/posts/structurally-fixing-injection-bugs.html
[17:36:23] <earnestly> Because it changes the entire framing of a problem, which I appreciate
[17:37:32] <Pinchiukas> tirnanog: yeah I understand that. At first I thought that since I don't expect spaces, maybe the default might work but that also got me curious how I could get out of a situation where a default IFS didn't work.
[17:37:56] <earnestly> The default isn't just spaces so to use spaces set IFS=' '
[17:38:09] <earnestly> Assuming input is 'key value\0'
[17:38:30] <tirnanog> the point of undefining IFS for the scope of a single read invocation there would be to prevent trimming, as it were. it's the -d parameter that defines where it stops reading.
[17:38:34] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[17:38:43] <tirnanog> earnestly: this is very interesting, to say the last. so, er, thanks again.
[17:38:45] <tirnanog> least
[17:38:56] <emanuele6> i would just use  key\0value\0  and  while mapfile -td '' -n2
[17:39:12] <rendar> best way to check if a symlink's file/device exists?
[17:39:30] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[17:39:54] <emanuele6> but since jsonpath can't filter out strings that contain "\u0000" (jq could with `select(contains("\u0000")|not)) that is not much safer
[17:39:54] <tirnanog> emanuele6: it only works for indexed arrays though, doesn't it?
[17:40:11] <tirnanog> (not that it's necessarily an impediment)
[17:40:35] <emanuele6> tirnanog: i mean something like: while mapfile -td '' -n2; do assarr[${MAPFILE[0]}]=${MAPFILE[1]}; done < <(cmd)
[17:40:45] <tirnanog> oh, I see.
[17:40:46] <earnestly> emanuele6: The irony to me is that this is re-encoding json as bash, probably to only be re-re-encoded back to json from bash for subsequent commands (or merely printed out)
[17:41:06] <tirnanog> earnestly: you're probably right.
[17:41:09] <emanuele6> yeah, i can tell that is probably what is going on
[17:41:24] <emanuele6> but Pinchiukas is not sharing much information
[17:41:34] <emanuele6> we don't even know if jsonpath can output NIL yet
[17:41:50] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[17:42:00] <earnestly> I harp on about this because I didn't come to realise this design on purpose.  It came entirely by accident because I decided to have a laugh converting a script to a single line
[17:42:11] <earnestly> Due to all the "only one line" jokes
[17:42:12] *** Joins: ravan (~ravan@user/ravan)
[17:42:17] *** Quits: drd (~drd@host-62-211-44-179.pool62211.interbusiness.it) (Ping timeout: 240 seconds)
[17:42:37] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:42:51] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:43:02] <earnestly> And it actually worked, extremely well.  Since then I've converted all my bash scripts to posix sh (as many bash features became redundant), halved the line count, and sometimes doubled the speed
[17:43:14] <emanuele6> rendar: [[ -e $symlink ]]
[17:43:36] <earnestly> (Not through any magic, but simply because sort(1) is much better at sorting than doing quicksort in bash)
[17:44:50] *** Joins: Dr-WaSabi (drwasabi@tilde.team)
[17:49:19] <Pinchiukas> emanuele6: sorry about that, I'm kind of in the middle of 5 things at once. :D
[17:49:27] <Pinchiukas> Looks like I can print NULs.
[17:53:17] *** Quits: libc (~weechat@user/tessio) (Ping timeout: 240 seconds)
[17:57:35] *** Quits: martinus__ (~martin@2.56.202.77.rev.sfr.net) (Ping timeout: 256 seconds)
[17:58:09] *** Quits: GuiToris (~GuiToris@user/guitoris) (Ping timeout: 256 seconds)
[18:06:51] *** Joins: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com)
[18:08:31] *** Joins: zeden (~zeden@user/zeden)
[18:12:36] *** Parts: Kingsy (~chris@kingsy.co.uk) ()
[18:13:05] *** Joins: magla (~gelignite@55d4dfc1.access.ecotel.net)
[18:14:22] *** Joins: lalitmee_ (~lalitmee@180.94.33.210)
[18:15:50] *** Joins: GuiToris (~GuiToris@user/guitoris)
[18:16:37] *** Quits: lalitmee__ (~lalitmee@180.94.33.108) (Ping timeout: 240 seconds)
[18:18:01] *** Quits: clarkk (~clarkk@host86-165-12-159.range86-165.btcentralplus.com) (Quit: Leaving)
[18:19:47] *** Quits: taupiqueur (~taupiqueu@144.246.204.77.rev.sfr.net) (Quit: taupiqueur)
[18:20:54] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:21:36] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:24:42] *** tinystoat is now known as tinytoast
[18:26:11] *** Quits: michigan (uid507982@id-507982.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[18:32:45] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[18:32:53] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[18:33:14] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[18:37:06] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:39:08] *** Quits: Kyuzo68 (~Kyuzo@host-82-63-76-36.business.telecomitalia.it) (Quit: Konversation terminated!)
[18:43:41] *** Joins: devdrnl (~devdrnl@208.131.191.218)
[18:45:02] *** Quits: devdrnl (~devdrnl@208.131.191.218) (Client Quit)
[18:47:20] *** Joins: arinov (~arinov@213.194.126.155)
[18:48:45] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:50:40] *** Quits: saki (~saki@gateway/tor-sasl/saki) (Remote host closed the connection)
[18:50:41] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[18:50:41] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Remote host closed the connection)
[18:50:43] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[18:51:07] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[18:51:14] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[18:51:30] *** Joins: saki (~saki@gateway/tor-sasl/saki)
[18:51:58] *** Joins: tejr (~tejr@user/tejr)
[18:51:58] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[18:52:09] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[18:52:09] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[18:53:56] *** Joins: rufito (~phil@181.42.53.33)
[18:58:35] <tirnanog> earnestly: I was reminded of reading http://camendesign.com/dom_templating, all those years ago.
[19:00:14] <earnestly> tirnanog: Probably why <template> exists now
[19:00:53] <earnestly> I always liked tcl/tk's "language" for describing interfaces, like filepaths using . instead of / to represent trees
[19:01:01] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[19:01:45] <earnestly> tirnanog: (But article is right, this same problem exists in autotools - mixing three or four languages in the same file, and the resulting debug mess is just as difficult to tease apart)
[19:01:56] <tirnanog> yes.
[19:03:05] *** Joins: bodiccea_ (~bodiccea@user/bodiccea)
[19:04:42] *** Quits: bodiccea (~bodiccea@user/bodiccea) (Ping timeout: 260 seconds)
[19:06:28] <FreeBDSM> !which
[19:06:28] <greybot> which(1) is an external program used to search PATH for an executable. It behaves differently on different systems and you can't rely on a useful exit code; use (from most to least portable) ''command -v'' or ''type -P'' (to find the path) or ''hash'' (to check) instead. See http://mywiki.wooledge.org/BashFAQ/081
[19:08:48] *** Joins: martinus__ (~martin@2.56.202.77.rev.sfr.net)
[19:09:41] *** Quits: masterkorp (~masterkor@user/masterkorp) (Quit: The Lounge - https://thelounge.chat)
[19:11:01] *** Quits: idontneedanick (~idontneed@h-158-174-186-127.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[19:11:04] *** Joins: masterkorp (~masterkor@user/masterkorp)
[19:11:26] *** Joins: earendel (uid498179@user/earendel)
[19:14:54] *** Joins: libc (~weechat@user/tessio)
[19:16:14] *** Joins: idontneedanick (~idontneed@h-158-174-186-127.NA.cust.bahnhof.se)
[19:17:36] <earendel> Pinchiukas: have you asked dr. sommer already?
[19:18:06] *** Joins: tobybl (~tobybl@213.31.132.151)
[19:23:05] *** Quits: libc (~weechat@user/tessio) (Read error: Connection reset by peer)
[19:23:56] *** Joins: Crassus (~Crassus@user/crassus)
[19:25:13] *** Joins: nortoh (~nortoh@user/nortoh)
[19:26:18] *** Joins: libc (~weechat@user/tessio)
[19:34:06] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[19:35:16] *** Quits: kyr (~kyr@167.71.50.12) (Quit: Lost terminal)
[19:35:35] *** Joins: kyr (~kyr@167.71.50.12)
[19:36:33] *** Quits: sdu (~doo@185.44.146.214) (Remote host closed the connection)
[19:36:49] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[19:38:01] *** Quits: idontneedanick (~idontneed@h-158-174-186-127.NA.cust.bahnhof.se) (Remote host closed the connection)
[19:42:06] *** Joins: ttys000 (~ttys000@user/ttys000)
[19:42:52] <rendar> `for $i in {1..4}; echo $i; done` why this is wrong?
[19:43:57] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[19:44:05] <tirnanog> # help for
[19:44:05] <shbot> tirnanog: for: for NAME [in WORDS ... ] ; do COMMANDS; done -- http://ix.io/aSf
[19:44:17] <tirnanog> there is no do in your attempt.
[19:44:46] <tirnanog> also, expanding i makes no sense. it should just be i, not $i.
[19:45:12] <rendar> right
[19:45:12] <tirnanog> for takes a variable name. you wouldn't expand i at that point, unless the value of i were to be treated as a name.
[19:45:33] *** Joins: richardm75 (~richardm7@2600:8801:c507:b200:2937:dd9c:4314:c48d)
[19:45:40] <rendar> now it works, thanks
[19:46:02] *** Joins: HaveASpareMinute (~HaveASpar@213-228-74.static.cytanet.com.cy)
[19:46:38] <rendar> `a="1"; b="1"; for i in {$a..$b}; do echo $i; done` but this doesn't work, there is a way to achieve that?
[19:47:14] <tirnanog> !pf 33
[19:47:14] <greybot> https://mywiki.wooledge.org/BashPitfalls#pf33 -- Don't do this! -- for i in {1..$n}
[19:51:43] *** Quits: andre144k (~andre144k@213.221.88.82) (Quit: Leaving)
[19:52:02] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 240 seconds)
[19:54:36] *** Joins: WinterStar (~IceLight@user/icelight)
[19:57:50] <rendar> ok how can i have a for loop with an integer then?
[19:58:16] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 268 seconds)
[19:58:19] <earnestly> !cfor
[19:58:20] <greybot> C-style for loop: for (( INIT; COND; STEP )) do COMMANDS; done # Evaluate INIT; then, while COND evaluates to true, do COMMANDS, and evaluate STEP. Each expression is evaluated in a math context. Example: for ((i=1; i<=n; i++)) do echo "$i"; done. Use in place of the non-working: for i in {1..$number}
[19:59:59] *** Quits: lalitmee_ (~lalitmee@180.94.33.210) (Ping timeout: 256 seconds)
[20:01:53] *** Joins: adac (~adac@31.207.101.82)
[20:02:21] *** Joins: ChmEarl (~chmearl@user/chmearl)
[20:02:21] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[20:03:31] *** Quits: eht (~eht@user/eht) (Remote host closed the connection)
[20:03:44] *** Joins: eht (~eht@user/eht)
[20:07:14] *** Quits: GuiToris (~GuiToris@user/guitoris) (Ping timeout: 260 seconds)
[20:07:42] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 276 seconds)
[20:08:46] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[20:09:29] *** Quits: libc (~weechat@user/tessio) (Quit: WeeChat 3.2)
[20:10:41] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[20:13:09] <tirnanog> there's an example provided for the documented pitfall.
[20:13:38] <tirnanog> you'd want ((i=a; i<=b; i++))
[20:14:35] *** Quits: tobybl (~tobybl@213.31.132.151) (Remote host closed the connection)
[20:16:43] <rendar> i see
[20:17:43] <rendar> `for i in ((i=$a; i<=$b; ++i)) do echo $i; done` gives me: ash: syntax error near unexpected token `('
[20:18:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Read error: Connection reset by peer)
[20:18:47] *** Joins: wikan (~wikan@2a02:a31d:8541:e100:213:2ff:fed3:8291)
[20:18:58] <twkm> generally $ inside (()) are not needed.
[20:19:01] *** Joins: DaNeenjah (~jake@adsl-74-230-9-185.hsv.bellsouth.net)
[20:19:03] <rendar> oh
[20:19:14] <rendar> same error
[20:19:23] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[20:21:17] *** Joins: gabriele (~gabriele@user/gabriele)
[20:21:36] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[20:21:52] <rendar> any clue?
[20:25:54] *** Parts: LDerJim (~jim@user/LDerJim) (Leaving)
[20:27:44] <tirnanog> needs a semicolon per "help for". or a newline where the semicolon would otherwise be.
[20:28:05] <tirnanog> !forget cfor
[20:28:05] <greybot> OK, tirnanog
[20:29:07] <tirnanog> !learn cfor C-style for loop: for (( INIT; COND; STEP )); do COMMANDS; done # Evaluate INIT; then, while COND evaluates to true, do COMMANDS, and evaluate STEP. Each expression is evaluated in a math context. Example: for ((i=1; i<=n; i++)); do echo "$i"; done. Use in place of the non-working: for i in {1..$number}
[20:29:07] <greybot> OK, tirnanog
[20:29:09] *** Joins: jkwnki (~jkwnki@p4ff31198.dip0.t-ipconnect.de)
[20:29:53] *** Quits: nattiestnate (~nate@114.122.105.227) (Read error: Connection reset by peer)
[20:30:08] <tirnanog> # help 'for (('
[20:30:12] <shbot> tirnanog: for ((: for (( exp1; exp2; exp3 )); do COMMANDS; done
[20:30:12] <shbot> tirnanog:     Arithmetic for loop.
[20:30:12] <shbot> tirnanog: and so forth... (but now the pastebin is sick of me)
[20:30:14] <tirnanog> there.
[20:30:23] <tirnanog> you can run help in your own bash shell, by the way.
[20:31:26] <twkm> ash doesn't support arithemtic for.
[20:31:36] *** Quits: nosoul (nosoul@gateway/vpn/protonvpn/nosoul) (Quit: Leaving)
[20:32:03] <twkm> (iirc, since i hardly ever encounter it)
[20:32:30] <tirnanog> I took it as being a probable typo. the error would almost certainly have been different.
[20:32:38] <twkm> but even if it does, the syntax isn't for i in ((...)), it is for ((...)).
[20:32:54] <tirnanog> right. that too.
[20:32:56] <rendar> # for i in ((i=$a; i<=$b; ++i)) do echo $i; done
[20:32:57] <shbot> rendar: bash: syntax error near unexpected token `('
[20:33:02] <tirnanog> lol
[20:33:08] <twkm> remove the "i in"
[20:33:17] <rendar> yes, sorry
[20:33:17] <tirnanog> and add the missing semicolon.
[20:33:19] *** Joins: GuiToris (~GuiToris@user/guitoris)
[20:33:21] <rendar> # for ((i=$a; i<=$b; ++i)) do echo $i; done
[20:33:22] <shbot> rendar: bash: ((: i=: syntax error: operand expected (error token is "=")
[20:33:27] <Blondie101010> tirnanog:  why did you say 'Use in place of the non-working: for i in {1..$number}'?  how is that not working?
[20:33:43] <tirnanog> Blondie101010: because that's what it already said and it does, in fact, not work. see !pf 33.
[20:33:54] <twkm> in bash $number is expanded after the brace is expanded.
[20:34:19] <twkm> # n=4 ; echo {1..$n}
[20:34:19] <shbot> twkm: {1..4}
[20:34:22] <twkm> k# n=4 ; echo {1..$n}
[20:34:23] <shbot> twkm: 1 2 3 4
[20:35:20] <rendar> # a=1; b=3; for ((i=$a; i<=$b; ++i)) do echo $i; done
[20:35:21] <shbot> rendar: 1
[20:35:21] <shbot> rendar: 2
[20:35:21] <shbot> rendar: 3
[20:35:21] <tirnanog> rendar: for ((i=a; i<=b; ++i)); do echo "$i"; done
[20:35:26] <rendar> yes, i see
[20:35:29] *** Joins: nosoul (nosoul@gateway/vpn/protonvpn/nosoul)
[20:35:45] <tirnanog> oh, I was wrong about the semicolon. oh well.
[20:36:16] <tirnanog> I'll leave the factoid as it is anyway, as it matches the help.
[20:36:32] <twkm> there are some places where it seems necessary but bash doesn't actually need it.
[20:36:40] <tirnanog> interesting case.
[20:38:58] *** Joins: nattiestnate (~nate@114.122.105.227)
[20:42:16] <kurahaupo> !forget cfor
[20:42:16] <greybot> OK, kurahaupo
[20:42:17] <kurahaupo> !learn cfor C-style for loop: for (( INIT; COND; STEP )) do COMMANDS; done # Evaluate INIT; then, while COND evaluates to true, do COMMANDS, and evaluate STEP. Each expression is evaluated in a math context. Example: for ((i=1; i<=n; i++)); do echo "$i"; done. Use in place of the non-working: for i in {1..$number}
[20:42:17] <greybot> OK, kurahaupo
[20:42:17] *** Quits: mw_ (~mw@catv-80-98-128-161.catv.broadband.hu) (Ping timeout: 240 seconds)
[20:42:40] <tirnanog> Blondie101010: essentially, there's no way it could work without using eval.
[20:42:53] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[20:42:58] <tirnanog> or otherwise subjecting it to a round of parsing.
[20:43:14] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[20:43:47] <kurahaupo> timanog: No it does NOT need a semicolon between )) and do. The error was to put "var in" before the ((
[20:44:04] <twkm> and since (()) is an arithmetic context it also chases parameter chains.
[20:44:10] <twkm> # n=y y=3 ; for ((i=1;i<=n;i++)) do printf '%d ' "$i"; done
[20:44:11] <shbot> twkm: 1 2 3
[20:44:33] <tirnanog> kurahaupo: I already a) acknowledged that b) explained that I didn't bother restoring it because it matches the help text anyway (and the content of the factoid doesn't make an explicit claim that it is necessary).
[20:45:49] <tirnanog> that is the 'for ((' help employs a semicolon. yes, I realise it's not necessary now.
[20:46:30] <tirnanog> further, my edit didn't render the code invalid.
[20:47:02] *** Joins: fstd_ (~fstd@xdsl-84-44-230-164.nc.de)
[20:47:19] *** Quits: fstd (~fstd@xdsl-84-44-230-164.nc.de) (Remote host closed the connection)
[20:47:34] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[20:47:49] *** Quits: AsenMx (~AsenMx@user/asenmx) (Quit: Leaving)
[20:48:28] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[20:49:40] <tirnanog> as such, it seems like an odd thing to get hung up over. if you want to restore it, you missed one, in fact.
[20:49:56] *** Joins: AsenMx (~AsenMx@user/asenmx)
[20:50:11] <tirnanog> that is, there is a semicolon in the sample that follows "Example: " which you did not remove in your application.
[20:50:28] <kurahaupo> tirnanog: Subsequent to restoring the faq, I read your acknowledgement. The issue is a bug in the help doc; a semicolon is completely pointless there, it doesn't provide any grammatical context
[20:50:40] <tirnanog> you didn't restore it though.
[20:50:44] <tirnanog> it's now using two different styles.
[20:51:17] <kurahaupo> !forget cfor
[20:51:17] <greybot> OK, kurahaupo
[20:51:17] <kurahaupo> !learn cfor C-style for loop: for (( INIT; COND; STEP )) do COMMANDS; done # Evaluate INIT; then, while COND evaluates to true, do COMMANDS, and evaluate STEP. Each expression is evaluated in a math context. Example: for ((i=1; i<=n; i++)) do echo "$i"; done. Use in place of the non-working: for i in {1..$number}
[20:51:17] <greybot> OK, kurahaupo
[20:51:35] <kurahaupo> thanks for noticing
[20:51:50] <rendar> that was also thanks to me :)
[20:53:35] *** Joins: devnull (~ShadowPas@45.238.229.20)
[20:53:41] *** Parts: devnull (~ShadowPas@45.238.229.20) ()
[20:54:10] *** Quits: TMan459 (~TMan459@068-113-228-168.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[20:54:23] <kurahaupo> rendar: Thanks to you too
[20:54:46] *** Joins: MrBlue_ (~MrBlue@135.129.116.115)
[20:56:39] *** Quits: GuiToris (~GuiToris@user/guitoris) (Ping timeout: 256 seconds)
[20:57:25] *** Quits: MrBlue (~MrBlue@24.114.93.161) (Ping timeout: 250 seconds)
[20:58:33] *** Quits: AsenMx (~AsenMx@user/asenmx) (Quit: Leaving)
[20:58:57] <kurahaupo> (The semicolon in Â« for var ; do Â» is similarly pointless, and originally was not even permitted. The argument for "consistency" is backwards: a LIST or a COMMANDS needs a terminating semicolon, the a single WORD does not.)
[20:59:29] <tirnanog> you should probably continue this in the direction of Chet then, because it's how it is documented everywhere.
[21:00:35] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[21:02:26] <kurahaupo> I will. But in the meantime at least the semicolon is marked as optional in Â« for WORD [ [  iin LIST ] ; ] do COMMANDS ; done Â» though of course the semicolon after COMMANDS can be replaced by &
[21:02:46] <tirnanog> yes, I noticed that.
[21:04:07] <kurahaupo> It's the middle of the night and so not a good time to write a patch. Tomorrow.
[21:05:09] *** Quits: dreamon (~dreamon@ppp-88-217-76-15.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[21:08:03] <twkm> one might ask if the expressions should denote that they are optional, as most other commands denote it perhaps.
[21:08:55] *** Joins: hellstabber (~hellstabb@178.233.16.12)
[21:10:26] *** Joins: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net)
[21:11:20] <tirnanog> given that such is tolerated, they probably should.
[21:11:23] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[21:15:41] <twkm> neither help nor the manual bother doing so.
[21:15:58] <twkm> e.g., for name [ [ in [ word ... ] ] ; ] do list ; done
[21:15:59] <wwallace> Hello
[21:16:09] <twkm> vs for (( expr1 ; expr2 ; expr3 )) ; do list ; done
[21:17:59] *** Joins: fanderal (~fanderal@142-254-29-160.dsl.dynamic.fusionbroadband.com)
[21:18:09] <kurahaupo> twkm: indeed the latter needs adjusting
[21:18:56] *** Joins: hellstabber_ (~hellstabb@178.233.16.12)
[21:18:59] <kurahaupo> Though it could be argued that empty is a valid exprn
[21:19:33] <tirnanog> is it even possible to read the manual and know exactly which control operators are supported where?
[21:19:35] <twkm> similarly the select help/man doesn't show that the ; is optional if there's no [in word ...]
[21:19:39] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[21:19:59] *** Joins: michigan (uid507982@id-507982.ilkley.irccloud.com)
[21:20:05] *** Quits: hellstabber_ (~hellstabb@178.233.16.12) (Remote host closed the connection)
[21:22:05] <tirnanog> one can find a description of a list as being optionally terminated by ;, & or <newline> but then semicolons are the only operator shown in some of the synopses. expressing the nuances would actually be quite tricky.
[21:22:43] *** Joins: AsenMx (~asen@user/asenmx)
[21:23:02] *** Joins: hellstabber_ (~hellstabb@178.233.16.12)
[21:23:13] <tirnanog> but it should, really.
[21:23:59] *** Quits: hellstabber_ (~hellstabb@178.233.16.12) (Remote host closed the connection)
[21:24:09] *** Quits: hellstabber (~hellstabb@178.233.16.12) (Remote host closed the connection)
[21:24:39] *** Quits: freep (~freepppp@62.1.172.246.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[21:24:52] <wwallace> Sorry If I did not explain myself clearly:
[21:24:54] <wwallace> https://paste.debian.net/1224925/
[21:25:02] *** Joins: freep (~freepppp@62.1.172.246.dsl.dyn.forthnet.gr)
[21:25:48] *** Joins: rendar (~rendar@user/rendar)
[21:28:54] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 268 seconds)
[21:29:07] *** Joins: dreamon (~dreamon@pd9503f67.dip0.t-ipconnect.de)
[21:29:41] *** Joins: MrBlue (~MrBlue@24.114.93.161)
[21:29:59] *** Joins: Nact (~l@host-85-27-127-179.dynamic.voo.be)
[21:30:29] <tirnanog> it's not explained whether a copy operation should be performed only where the inferred target directory already exists. is that an applicable constraint?
[21:31:23] *** Quits: MrBlue_ (~MrBlue@135.129.116.115) (Ping timeout: 252 seconds)
[21:31:48] <wwallace> cp or mv will be fine
[21:32:10] <wwallace> The dir already exists
[21:33:50] *** Parts: fanderal (~fanderal@142-254-29-160.dsl.dynamic.fusionbroadband.com) (Leaving)
[21:34:32] *** Quits: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[21:35:21] *** Quits: dreamon (~dreamon@pd9503f67.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:36:11] <tirnanog> ok, but take a file such as IR_ASOA_ZIPReconciliation_20211221221738.zip? why is this shown? is something supposed to happen to it?
[21:36:56] <tirnanog> the intent is clear enough for those that begin with "IMGSOAA_PPD_"
[21:37:20] <wwallace> Yes it must be cp or mv to IMGSOAA_PPD_20211221221738 dir
[21:37:28] <tirnanog> I see.
[21:39:28] *** Quits: PeGaSuS (ubuntu@user/pegasus) (Remote host closed the connection)
[21:39:58] <tirnanog> something like this, perhaps: if [[ $f =~ _([0-9]{14})[_.] ]]; then dir=IMGSOA_PPD_${BASH_REMATCH[1]}; if [[ -d $dir ]]; then cp -- "$f" "$dir"/; fi; fi
[21:40:07] *** Joins: PeGaSuS (ubuntu@user/pegasus)
[21:40:14] *** Joins: mw_ (~mw@catv-80-98-128-161.catv.broadband.hu)
[21:40:30] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[21:40:39] <tirnanog> where it is assumed that you are already iterating over the relevant files with a for loop.
[21:41:18] <wwallace> Thank you for your time will test.
[21:41:29] <tirnanog> do you understand that regular expression?
[21:41:33] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[21:42:07] *** Quits: wikan (~wikan@2a02:a31d:8541:e100:213:2ff:fed3:8291) (Quit: Client closed)
[21:42:36] <wwallace> Bash_rematch?
[21:42:42] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[21:42:50] <tirnanog> well, yes, but the pattern that's being used also.
[21:43:20] <tirnanog> this: _([0-9]{14})[_.]
[21:43:25] <wwallace> 14 digits
[21:43:37] <wwallace> digits 0 till 9
[21:43:38] <tirnanog> anchored by an underscore on the left, and an underscore or dot on the right.
[21:44:19] <wwallace> I did this nothing happened:
[21:44:20] <tirnanog> further, you would want to avoid operating on the directories.
[21:44:21] <wwallace> for x in *.zip;do if [[ $f =~ _([0-9]{14})[_.] ]]; then dir=IMGSOA_PPD_${BASH_REMATCH[1]}; if [[ -d $dir ]]; then cp -- "$f" "$dir"/; fi; fi;done
[21:44:27] <kurahaupo> for f in *_20[01][0-9][01][0-9][0-3][0-9][0-2][0-9][0-5][0-9][0-5][0-9]*.zip ; do â€¦
[21:44:43] <wwallace> I am an idiot as always.
[21:44:46] <wwallace> sorry.
[21:44:47] <tirnanog> you wrote x.
[21:44:49] <tirnanog> but also ...
[21:45:03] <tirnanog> consider not performing a silent copy until it has been tested.
[21:45:13] <tirnanog> shoving an echo in front of cp will suffice.
[21:46:11] *** Quits: jkwnki (~jkwnki@p4ff31198.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[21:46:26] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[21:47:53] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[21:47:58] *** Quits: nattiestnate (~nate@114.122.105.227) (Quit: WeeChat 3.4)
[21:48:17] *** Joins: nattiestnate (~nate@114.122.106.227)
[21:53:02] *** Quits: kj (~kj@kj.aerisnetwork.net) (Read error: Connection reset by peer)
[21:53:24] *** Quits: PeGaSuS (ubuntu@user/pegasus) (Remote host closed the connection)
[21:53:33] *** Joins: kj (~kj@kj.aerisnetwork.net)
[21:54:04] *** Joins: PeGaSuS (ubuntu@user/pegasus)
[21:55:08] <wwallace> for f in *_20[01][0-9][01][0-9][0-3][0-9][0-2][0-9][0-5][0-9][0-5][0-9]*.zip ; do if [[ $f =~ _([0-9]{14})[_.] ]]; then dir=IMGSOA_PPD_${BASH_REMATCH[1]}; if [[ -d $dir ]]; then echo "$f";cp -v -- "$f" "$dir"/; fi; fi;done
[21:55:27] <wwallace> is not cping anynithing anywhere.
[21:56:13] <tirnanog> I mean echo cp ... so as to not actually run the cp command. that aside, did it print nothing?
[21:56:23] <Blondie101010> echo instead of cp to find out what happends
[21:57:16] <tirnanog> please show what the glob matches, if anything: printf '%s\n' *_20[01][0-9][01][0-9][0-3][0-9][0-2][0-9][0-5][0-9][0-5][0-9]*.zip
[21:57:40] *** Quits: Dr-WaSabi (drwasabi@tilde.team) (Quit: WeeChat 3.4)
[21:57:51] *** Joins: GuiToris (~GuiToris@user/guitoris)
[21:58:04] <wwallace> for f in *_20[01][0-9][01][0-9][0-3][0-9][0-2][0-9][0-5][0-9][0-5][0-9]*.zip ; do if [[ $f =~ _([0-9]{14})[.] ]]; then dir=IMGSOA_PPD_${BASH_REMATCH[1]}; if [[ -d $dir ]]; then echo "$f"; fi; fi;done
[21:58:11] <wwallace> Did not print anything.
[21:58:24] <tirnanog> how about the command that I requested be run?
[21:58:43] <wwallace> printf '%s\n' *_20[01][0-9][01][0-9][0-3][0-9][0-2][0-9][0-5][0-9][0-5][0-9]*.zip
[21:58:45] <wwallace> Nothing.
[21:58:52] <tirnanog> that would explain it, then.
[22:00:24] <jelly> tirnanog, the next to last [0-5] should be [0-6], clearly you have a fail because of all them leap seconds!
[22:00:27] <tirnanog> the pattern is clearly wrong. 20[01] won't match 2021 for example.
[22:00:33] <tirnanog> jelly: it's not my fail.
[22:00:36] <jelly> erm.  wallace.
[22:00:45] <tirnanog> I didn't propose any glob at all.
[22:01:00] <tirnanog> not even as an example.
[22:01:01] <jelly> yeah yeah, move on
[22:01:07] <jelly> a mistab it was
[22:01:49] *** Joins: thiras (~thiras@user/thiras)
[22:01:49] *** Quits: richardm75 (~richardm7@2600:8801:c507:b200:2937:dd9c:4314:c48d) (Quit: Leaving)
[22:03:56] *** Joins: nitro_ (~nitro_@c-73-165-183-88.hsd1.pa.comcast.net)
[22:09:49] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[22:12:33] *** Joins: Everything (~Everythin@37.115.210.35)
[22:14:10] *** Joins: rendar_ (~rendar@user/rendar)
[22:14:57] *** Quits: callq (~callq@2409:4062:2d9d:1c4d:55f1:21c8:2f97:cb62) (Ping timeout: 240 seconds)
[22:15:31] *** Quits: kill (~killown@user/killown) (Quit: Leaving)
[22:16:23] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 268 seconds)
[22:19:23] *** Quits: esselfe (~steph@user/esselfe) (Ping timeout: 256 seconds)
[22:20:37] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[22:22:26] <wwallace> *.zip globe dont print anything either
[22:22:47] <wwallace> for f in *.zip; do if [[ $f =~ _([0-9]{14})[_.] ]]; then dir=IMGSOA_PPD_${BASH_REMATCH[1]}; if [[ -d $dir ]]; then echo "$f"; fi; fi;done
[22:23:01] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:23:01] <tirnanog> are you saying that printf '%s\n' *.zip prints nothing but "*.zip" itself?
[22:23:29] <wwallace> Yes the above printf prints
[22:23:36] <tirnanog> pastebin, please?
[22:23:48] <wwallace> but the whole for loop above does not do nothing.
[22:23:50] <tirnanog> even if it's similar to whatever was pasted earlier, clarity is important.
[22:24:11] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:24:16] <tirnanog> in fact, just a fresh ls -l will do.
[22:24:39] <wwallace> https://paste.debian.net/1224935/
[22:24:43] *** Quits: nattiestnate (~nate@114.122.106.227) (Read error: Connection reset by peer)
[22:25:24] <tirnanog> need to see the directories as well, really. can you repaste with: printf '%s\n' *.zip */
[22:26:29] <wwallace> https://paste.debian.net/1224936/
[22:26:50] *** Joins: seninha (~seninha@user/seninha)
[22:26:58] <twkm> i suggest a paste of an xtrace would be (more) useful.
[22:27:29] <tirnanog> it's a simple typo.
[22:27:46] <tirnanog> I left out the additional A in IMGSOAA
[22:27:48] <tirnanog> wwallace: ^
[22:27:57] <wwallace> OK Thanks.
[22:28:05] *** Quits: Nact (~l@host-85-27-127-179.dynamic.voo.be) (Read error: Connection reset by peer)
[22:28:55] <wwallace> tirnanog: Thank you for your time and effort.
[22:31:53] *** Quits: HaveASpareMinute (~HaveASpar@213-228-74.static.cytanet.com.cy) (Quit: Leaving)
[22:32:30] *** Quits: ghostboarder (~quassel@user/ghostboarder) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:33:10] *** Joins: saki- (~saki@gateway/tor-sasl/saki)
[22:33:43] *** Joins: ghostboarder (~quassel@S010640623101dbe0.va.shawcable.net)
[22:33:43] *** Quits: ghostboarder (~quassel@S010640623101dbe0.va.shawcable.net) (Changing host)
[22:33:43] *** Joins: ghostboarder (~quassel@user/ghostboarder)
[22:36:19] *** Joins: stonkey (~stonkey@user/stonkey)
[22:37:12] *** Quits: saki (~saki@gateway/tor-sasl/saki) (Ping timeout: 276 seconds)
[22:37:12] *** saki- is now known as saki
[22:39:14] *** Quits: rendar_ (~rendar@user/rendar) (Quit: Leaving)
[22:41:59] *** Joins: jmd (~user@de.cellform.com)
[22:44:32] *** Joins: dsrt^ (~dsrt@207.5.54.6)
[22:45:20] *** Joins: arinov (~arinov@31.223.10.180)
[22:45:31] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[22:47:30] *** Quits: zostj (~rue@1-162-41-131.dynamic-ip.hinet.net) (Quit: WeeChat 3.4)
[22:47:37] *** Joins: rendar (~rendar@user/rendar)
[22:49:07] *** Joins: Betal (~Betal@user/betal)
[22:49:18] *** Joins: arinov_ (~arinov@178.240.175.124)
[22:52:00] *** Quits: gabriele (~gabriele@user/gabriele) (Quit: Leaving)
[22:52:57] *** Quits: arinov (~arinov@31.223.10.180) (Ping timeout: 240 seconds)
[22:55:15] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 268 seconds)
[22:56:26] *** Joins: YaoNai (~YaoNai@user/yaonai)
[22:57:06] *** Quits: adac (~adac@31.207.101.82) (Ping timeout: 268 seconds)
[22:57:18] *** Joins: rgrinberg (~textual@2806:101e:7:def:5c7c:5699:6e7:d044)
[22:58:51] *** Joins: rendar_ (~rendar@user/rendar)
[23:00:09] *** Quits: rgrinberg (~textual@2806:101e:7:def:5c7c:5699:6e7:d044) (Client Quit)
[23:01:02] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 252 seconds)
[23:01:36] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[23:01:48] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[23:03:00] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:06:26] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[23:06:58] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[23:11:14] *** Joins: drd (~drd@93-32-181-40.ip34.fastwebnet.it)
[23:14:59] *** Quits: wiscii (~tct@user/wiscii) (Read error: Connection reset by peer)
[23:18:52] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[23:19:10] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[23:19:41] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[23:20:38] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[23:20:49] *** Quits: drd (~drd@93-32-181-40.ip34.fastwebnet.it) (Quit: ZNC 1.8.2 - https://znc.in)
[23:21:12] *** Quits: furrymcgee (~devuan@cgn-213-196-210-78.nc.de) (Quit: leaving)
[23:22:29] *** Joins: drd (~drd@93-32-181-40.ip34.fastwebnet.it)
[23:29:57] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[23:30:48] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[23:31:01] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[23:31:29] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[23:35:40] *** Joins: hellstabber (~hellstabb@178.233.16.12)
[23:36:39] *** Joins: jkwnki (~jkwnki@p4ff31198.dip0.t-ipconnect.de)
[23:37:28] *** Quits: michigan (uid507982@id-507982.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:40:14] *** Quits: drd (~drd@93-32-181-40.ip34.fastwebnet.it) (Quit: ZNC 1.8.2 - https://znc.in)
[23:43:11] *** Joins: drd (~drd@93-32-181-40.ip34.fastwebnet.it)
[23:43:24] *** Joins: zoe (~zoe@fsf/member/zoe)
[23:43:51] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Quit: Leaving...)
[23:45:38] *** Quits: zouhair (~zouhair@142.182.15.29) (Ping timeout: 260 seconds)
[23:46:26] *** Joins: zouhair (~zouhair@lnsm3-montreal02-142-117-154-92.internet.virginmobile.ca)
[23:46:39] *** Quits: sinaowolabi (~SinaOwola@160.152.36.12) (Ping timeout: 256 seconds)
[23:46:39] *** Quits: sinaowolabi_ (~SinaOwola@41.58.56.55) (Ping timeout: 256 seconds)
[23:46:39] *** Quits: drd (~drd@93-32-181-40.ip34.fastwebnet.it) (Client Quit)
[23:47:19] *** Joins: cheer (~cheer@cpe-76-189-213-198.neo.res.rr.com)
[23:47:20] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[23:47:47] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (Ping timeout: 256 seconds)
[23:48:49] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[23:48:59] *** Joins: drd (~drd@93-32-181-40.ip34.fastwebnet.it)
[23:49:01] *** Joins: Fauto_ (~dante@gateway/tor-sasl/filohuhum)
[23:53:45] *** Joins: Musli (~Musli@178-223-53-201.dynamic.isp.telekom.rs)
[23:54:48] <birkoff> I tried 'pv -f |& cat' but the progress bar isn't printed
[23:59:25] *** Quits: cheer (~cheer@cpe-76-189-213-198.neo.res.rr.com) (Quit: WeeChat 3.4)
