[00:01:25] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[00:11:16] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[00:12:15] <sarnold> Peng: ow
[00:12:22] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[00:14:30] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Client Quit)
[00:14:39] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Read error: Connection reset by peer)
[00:15:04] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[00:20:42] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[00:25:06] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[00:27:40] *** Quits: Elzington (~Elzington@static-68-235-44-28.cust.tzulo.com) (Quit: Leaving)
[00:29:47] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[00:30:37] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Remote host closed the connection)
[00:33:20] <dostoyevsky2> Alipha: Yeah, it's an offset that gets incremented with every iteration when writing... so offset block it seems... certainly not unique if you are writing the same data on the same block again, but maybe they make that unlikely... 
[00:38:59] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:42:47] *** Joins: Elzington (~Elzington@static-68-235-44-76.cust.tzulo.com)
[00:54:17] *** Quits: falkor (~falkor@90.242.155.158) (Ping timeout: 256 seconds)
[00:55:50] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[01:03:38] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:12:02] <Alipha> dostoyevsky2: correct
[01:23:31] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374) (Ping timeout: 252 seconds)
[01:38:44] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Remote host closed the connection)
[01:41:49] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[01:52:21] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[01:54:37] *** Joins: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303)
[01:54:43] *** Joins: mikail_ (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303)
[01:54:50] *** Quits: mikail_ (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303) (Remote host closed the connection)
[01:54:50] *** Quits: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303) (Remote host closed the connection)
[01:55:09] *** Joins: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303)
[01:59:02] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[02:00:02] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[02:05:11] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[02:14:14] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 256 seconds)
[02:14:55] *** Joins: OneWheelGeek (~OneWheelG@alpha.straybits.org)
[02:16:34] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[02:19:06] *** Quits: Guest664 (~savio@177.12.48.155) (Quit: Leaving)
[02:19:13] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[02:19:39] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[02:28:21] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[02:28:43] *** Joins: electr0n (~electr0n@about/security/founder/electr0n)
[02:32:02] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Remote host closed the connection)
[02:32:14] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[02:36:28] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[02:38:53] *** Quits: MyWay (~MyWay@2001:41d0:8:be9a::1) (Ping timeout: 265 seconds)
[02:39:31] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: leaving)
[02:44:44] *** Quits: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303) (Ping timeout: 252 seconds)
[02:48:08] *** Joins: MyWay (~MyWay@2001:41d0:8:be9a::1)
[02:56:17] *** Quits: electr0n (~electr0n@about/security/founder/electr0n) (Ping timeout: 252 seconds)
[02:58:07] *** Joins: electr0n (~electr0n@about/security/founder/electr0n)
[03:19:32] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:19:36] *** Joins: igemnace (~ian@user/igemnace)
[03:24:46] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[03:25:17] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:26:19] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[03:41:24] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Ping timeout: 276 seconds)
[03:42:05] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[03:57:19] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[03:58:39] *** Joins: Wulf (~Wulf@user/wulf)
[04:06:43] *** Joins: Clovan (Clovan@cpe-66-27-104-90.san.res.rr.com)
[04:07:25] *** Quits: d1cor (~diego@179.63.242.100) (Ping timeout: 252 seconds)
[04:09:31] <Clovan> anyone nab up some interesting NFT's lately?
[04:10:43] <sarnold> you're probably in the wrong place.. but https://www.youtube.com/watch?v=4W8_v7NmclI was interesting
[04:12:34] *** Parts: Clovan (Clovan@cpe-66-27-104-90.san.res.rr.com) ()
[04:13:06] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-f5ee-2791-688d-e316.res6.spectrum.com) (Quit: jarthur)
[04:27:25] *** Quits: NeoWakeUp (~raulc@user/neowakeup) (Quit: leaving)
[04:31:48] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-e9e5-b5d0-98d2-cc50.res6.spectrum.com)
[04:40:03] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[04:41:23] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Remote host closed the connection)
[04:57:23] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:00:58] *** yanmaani1 is now known as yanmaani
[05:04:39] *** Joins: frost (~frost@user/frost)
[05:19:29] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[05:23:29] *** Joins: Douwd (~douwd@nexus.bsdpro.net)
[05:37:49] <tusko> where do the little o() and big O() terms come from in this proof?
[05:37:55] <tusko> https://imgur.com/a/w0vZ8V6
[05:39:59] <tusko> even taking the Prime Number Thm. lim x->inf \pi(x)/[x/ln(x)] = 1 I don't recreate anything involving o or O
[05:40:25] <sarnold> tusko: probably https://en.wikipedia.org/wiki/Big_O_notation
[05:40:50] <sarnold> tusko: shortly, it's a study of computational complexity in the extremes, not so much worried about 'small values'
[05:42:01] <tusko> in my case N is assumed to be very large, though certainly not infinite
[05:42:01] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Remote host closed the connection)
[05:42:38] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[05:49:21] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 252 seconds)
[05:52:15] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Remote host closed the connection)
[05:52:40] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[06:10:59] <ms7821> tusko: yeah, it's big-O and little-o notation
[06:11:22] <ms7821> they're doing two steps - expanding the approximation and collecting the Ns
[06:13:34] <ms7821> you can't just subtract ~N from ~N but you can say it's going to be strictly smaller than 1 (probably if you know the way the lines are going and that c2 > c1, I'm not up to proving this sort of stuff rn)
[06:14:04] <ms7821> smaller than N*
[06:16:06] <ms7821> so the 1/ln N is the result of collecting (~N/ln N - ~N/lnN)/N and they just know the result is strictly smaller than that (hence little o)
[06:17:11] <ms7821> I assume they're doing similar on the next line but my brain is mush at this point
[06:17:48] <ms7821> you "just" need to keep going back to the fact the definitions are all lim(N->inf), I'm sure it all works out
[06:18:24] <ms7821> (the typo on line 2 probably isn't intentional)
[06:19:13] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[06:23:27] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[06:28:21] *** Quits: TimMc (~timmc@user/timmc) (Quit: leaving)
[06:30:37] *** Joins: d1cor (~diego@179.63.242.100)
[06:33:18] <ms7821> yeah, it's similar they end up with c2 ln(c1)-c1 ln(c2), which is constant as N->inf
[06:33:26] <ms7821> so O(1)
[06:47:19] *** Quits: d1cor (~diego@179.63.242.100) (Ping timeout: 256 seconds)
[06:48:29] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[07:01:54] *** Joins: TimMc (~timmc@user/timmc)
[07:21:19] *** Quits: Brnocrist (~spartak@user/brnocrist) (Ping timeout: 256 seconds)
[07:31:51] <tusko> what is little o?
[07:33:14] <sarnold> I think little o is a stronger statement than big o -- https://en.wikipedia.org/wiki/Big_O_notation#Little-o_notation says it better, and also has some mathy bits :)
[07:36:40] <ms7821> it's like big O but smaller than it
[07:37:43] <sarnold> (normally big O is about all that seems to be used in practice, but you've actually got an example with a little o, so that's not really a useful statement :)
[07:38:21] <ms7821> the examples about x^2 on wikipedia should explain it
[07:54:13] *** Joins: Elzington_ (~Elzington@static-68-235-44-10.cust.tzulo.com)
[07:55:14] *** Joins: mononote (~mononote@user/mononote)
[07:56:35] *** Quits: Elzington (~Elzington@static-68-235-44-76.cust.tzulo.com) (Ping timeout: 252 seconds)
[08:12:03] <iz> don't even get me started on big omega
[08:25:45] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 265 seconds)
[08:35:26] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:42:49] *** Parts: xoebus (sid61319@id-61319.uxbridge.irccloud.com) ()
[08:44:51] *** Quits: funabashi (funabashi@185.52.0.236) (Ping timeout: 250 seconds)
[08:45:49] *** Joins: funabashi (funabashi@185.52.0.236)
[08:46:55] *** Joins: osi (~osi@5.53.148.124)
[08:50:17] *** Quits: funabashi (funabashi@185.52.0.236) (Ping timeout: 256 seconds)
[08:52:19] *** Quits: frost (~frost@user/frost) (Ping timeout: 252 seconds)
[08:52:33] *** Joins: NeoWakeUp (~raulc@user/neowakeup)
[08:58:22] *** Joins: funabashi (funabashi@185.52.0.236)
[09:35:12] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:40:22] *** Joins: Sofia_ (~sofia@gateway/tor-sasl/sofia)
[09:41:30] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (Ping timeout: 276 seconds)
[09:42:22] *** Sofia_ is now known as Sofia
[09:47:30] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374)
[10:12:03] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (Ping timeout: 276 seconds)
[10:15:53] *** Quits: Elzington_ (~Elzington@static-68-235-44-10.cust.tzulo.com) (Quit: Leaving)
[10:26:32] *** Joins: Sofia (~sofia@gateway/tor-sasl/sofia)
[11:03:00] *** Quits: JollyRoger (~JollyRoge@user/thejollyroger) (Remote host closed the connection)
[11:03:37] *** Joins: JollyRoger (~JollyRoge@user/thejollyroger)
[11:10:54] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:18:55] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-e9e5-b5d0-98d2-cc50.res6.spectrum.com) (Quit: jarthur)
[11:20:59] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:27:14] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[11:30:18] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[11:35:49] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:47:57] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:49:32] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 240 seconds)
[11:53:11] *** Joins: frost (~frost@user/frost)
[12:10:07] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[12:12:18] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Ping timeout: 276 seconds)
[12:21:21] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[12:21:22] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[12:29:36] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[12:40:41] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:47:31] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:57:46] *** Joins: Brnocrist (~spartak@user/brnocrist)
[13:12:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:15:01] *** Joins: Guyver2_ (Guyver@guyver2.xs4all.nl)
[13:16:56] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[13:17:45] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Ping timeout: 256 seconds)
[13:17:51] *** Guyver2_ is now known as Guyver2
[13:22:20] *** Joins: andreasbuhr (~quassel@p548dda2c.dip0.t-ipconnect.de)
[13:22:20] *** Quits: andreasbuhr (~quassel@p548dda2c.dip0.t-ipconnect.de) (Client Quit)
[13:28:35] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[13:35:14] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:35:19] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:36:32] *** Lord_of_Life_ is now known as Lord_of_Life
[13:40:51] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[13:53:53] *** Joins: falkor (~falkor@90.242.155.158)
[14:06:02] *** Joins: g0d0h932 (~doe@184-75-138-166.resi.cgocable.ca)
[14:06:30] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[14:06:32] <g0d0h932> hi
[14:07:42] <g0d0h932> wow this guys bought a radio frequencies scanner and found bio tech in his body https://www.youtube.com/watch?v=E1ZqRhe4lZE
[14:07:53] <g0d0h932> oups sorry wrong chan
[14:09:43] *** Parts: g0d0h932 (~doe@184-75-138-166.resi.cgocable.ca) ()
[14:09:43] <Haohmaru> spambot ^
[14:12:33] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (Ping timeout: 276 seconds)
[14:24:53] *** Joins: Sofia (~sofia@gateway/tor-sasl/sofia)
[15:05:13] *** Joins: jess (~jess@libera/staff/jess)
[15:13:27] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (Remote host closed the connection)
[15:14:04] *** Joins: Sofia (~sofia@gateway/tor-sasl/sofia)
[15:19:07] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:a155:d417:1815:55b1)
[15:20:51] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[15:27:11] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[15:28:41] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[15:29:03] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 252 seconds)
[15:31:48] <dostoyevsky2> > echo hello | openssl enc -aes-256-cbc -nosalt -e -K '4768c01c4f598828ef80d9982d95f888' -iv '5a04ec902686fb05a6b7a338b6e07760' | openssl enc -nosalt -aes-256-cbc -d -K '4768c01c4f598828ef80d9982d95f888' -iv '5a04ec902686fb05a6b7a338b6e07760'
[15:31:52] *** Joins: br1ck (~br1ck@150.140.193.82)
[15:32:40] <dostoyevsky2> So I have implemented the decryption of this message in Go but when I output the result I get `hello\n' followed by 11 more '\n' ...  not sure how I could remove that padding reliably
[15:33:19] <dostoyevsky2> I guess openssl pads the message so it's large enough for the encryption
[15:34:55] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[15:37:02] <dostoyevsky2> maybe I could align the size of the message to a length divisble by 16 myself, then I'd know what parts I can remove after the decryption
[15:37:05] <rk4> manpage says it uses PKCS#5 padding
[15:37:21] <rk4> which is each padding byte being equal to the total number of padding bytes
[15:41:24] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[15:42:48] *** Quits: nullheroes (~nullheroe@168.235.66.22) (Quit: WeeChat 2.3)
[15:46:12] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[15:48:06] *** Quits: JollyRoger (~JollyRoge@user/thejollyroger) (Ping timeout: 276 seconds)
[15:48:28] *** Joins: JollyRoger (~JollyRoge@user/thejollyroger)
[15:48:29] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[15:49:17] <dostoyevsky2> so I turned off padding with -nopad, so now at least I know if I have padded the message myself properly
[15:52:51] <MacGyver> dostoyevsky2: I have to ask -- why are you implementing CBC decryption in Go?
[15:54:54] *** Joins: MatanHamilis (uid502224@id-502224.tinside.irccloud.com)
[15:54:57] <dostoyevsky2> MacGyver: I have a go program to begin with and management told me to encrypt the p12 certificate I have embedded in that binary... And CBC decryption is already builtin in Go, so it seemed like a reasonable way to handle it
[15:55:59] <MacGyver> Huh. Doesn't the p12 format support encryption natively?
[15:57:15] *** Joins: brick (~br1ck@150.140.193.82)
[15:58:07] *** Quits: br1ck (~br1ck@150.140.193.82) (Ping timeout: 256 seconds)
[15:58:23] <MacGyver> To answer my own question: yes it does.
[15:58:36] <MacGyver> Whether that's implemented in Go is another matter I guess.
[15:58:39] <dostoyevsky2> It does, but they didn't want the password and p12 blob be readily extractable just from the binary
[15:59:43] <MacGyver> How's that gonna be different when you use CBC instead of P12's native support?
[16:00:04] <MacGyver> Don't you still have to do it all inside the binary?
[16:00:17] <dostoyevsky2> if you have the blobs you can just use them with curl
[16:00:30] <dostoyevsky2> so it's a simple copy&paste job
[16:01:23] <dostoyevsky2> if it's using an additional step of arbitrary encryption, you will have to decompile the go program... which is hard, even with IDA pro
[16:01:56] <dostoyevsky2> But yeah, just some obscurity to make it harder ;-)
[16:01:57] <MacGyver> Huh. I honestly wouldn't bet the bank on this obfuscation.
[16:02:18] <MacGyver> But okay, that puts it in a (less worrying) context.
[16:02:57] <MacGyver> Sounds a bit like a "If the client has the cert, we don't need to check its behaviour" threat model.
[16:05:22] <dostoyevsky2> MacGyver: More like: the attacker would need to complete a series of N steps... if there is one error in handling these steps we would see them during auditing ... It raises the amount of opportunities to catch someone while they are trying to extract the certificate and figure out how to use it
[16:07:21] <MacGyver> Fair. You could put in a second canary cert :P
[16:07:28] <MacGyver> (In addition to what you're already doing)
[16:08:20] <dostoyevsky2> I guess the correct way would be to just use a hypervisor, and put the cert in a different ring than the client... but we don't really have that sensitive data 
[16:12:20] <frost> have you heard about post-quantum cryptography?
[16:12:33] <dostoyevsky2> lattice based encryption?
[16:12:48] <frost> is quantum computer really that powerful?
[16:12:58] <MacGyver> "Power" is relative.
[16:13:35] <MacGyver> It's not that they're powerful in the sense "can do lots of computations", but in the sense "they introduce novel operations that simply break the mathematical guarantees that classic public key cryptography is built on".
[16:13:42] <frost> should we use pqc from now?
[16:14:34] <MacGyver> We should at least be moving towards it, yes -- that being said, for the mere mortal it's not really an option yet.
[16:15:14] <frost> MacGyver ok, quantum mechanics is mysterious 
[16:15:51] <frost> breaks the classic math problem easily
[16:16:02] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:16:03] <MacGyver> Some of the big players (google, cloudflare) are running experiments with PQC algorithms, but nothing standardized has come out of the NIST PQC competition yet.
[16:16:55] <frost> thanks for clarifying it
[16:16:57] <MacGyver> Basically it's "risky early days" in that you need to find a balance between "risk that this information is still valuable once someone builds a big enough quantum computer" and "risk that this shiny new PQC algorithm / implementation blows up in our face".
[16:17:03] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[16:17:05] <dostoyevsky2> MacGyver: Isn't the idea of math: I can create any super computer I want to have, even one where all encryption is easily solvable... Encryption is just based on what's hard to on existing computers
[16:17:26] <frost> i agree that moving to pqc is new trend
[16:17:29] <MacGyver> dostoyevsky2: I don't understand the point you're trying to make.
[16:18:34] <dostoyevsky2> MacGyver: Encryption doesn't have a mathematical guarantee, as Math doesn't really have a measure of what's difficult
[16:19:17] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:a155:d417:1815:55b1) (Ping timeout: 252 seconds)
[16:19:21] <MacGyver> dostoyevsky2: Public key cryptography is built on a select few mathematical problems that are (assumed to be) hard, for a very formal definition of hard, in classical computing.
[16:19:59] <MacGyver> dostoyevsky2: Math very much does have a measure of what's "difficult" in that sense.
[16:20:12] <frost> yeah, i agree with MacGyver
[16:20:34] <MacGyver> dostoyevsky2: The "assumed to be" only stems from the fact that P ?= NP is an unsolved question.
[16:21:42] <MacGyver> dostoyevsky2: The whole thing with quantum computers is that the complexity class that integer factorization falls in is the quantum equivalent of "P". I.e. easy to solve with a quantum computer.
[16:21:45] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:21:54] <frost> In public key cryptography, math is everywhere
[16:23:17] <frost> MacGyver the range of  P and NP for quantum computers are different from classic computers? 
[16:25:27] <frost> It seems some hard problems is not hard for quantum computers, can we specify the limits of the hard problems in quantum world?
[16:26:13] <MacGyver> frost: Not exactly. There's still the concept of P and NP there, but there's an additional class BQP that encompasses P but also at least some problems in NP -- assuming P != NP.
[16:26:44] <MacGyver> This gets very messy very fast when drawing Venn diagrams.
[16:27:47] <frost> Oh, it's a little esoteric for me :(, but I'm glad to know that
[16:28:03] <frost> thanks MacGyver
[16:28:20] *** Quits: brick (~br1ck@150.140.193.82) (Remote host closed the connection)
[16:32:10] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[16:33:23] *** flooded is now known as _flood
[16:36:10] *** Joins: br1ck (~br1ck@150.140.193.82)
[16:37:46] *** Joins: Zayn (muhammadir@2607:5300:60:21b::1)
[16:38:17] *** Parts: Zayn (muhammadir@2607:5300:60:21b::1) ()
[16:42:27] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[16:50:11] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: leaving)
[16:50:13] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[16:50:32] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[16:51:34] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[16:56:28] *** Joins: PJBoy (~PJBoy@user/pjboy)
[16:57:03] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[16:59:56] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[17:04:25] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[17:17:03] *** Joins: zro (~zro@user/zro)
[17:32:40] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[17:36:04] *** Joins: sav_ (~savio@177.12.48.155)
[17:46:54] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Remote host closed the connection)
[17:47:50] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 252 seconds)
[17:49:32] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[17:49:54] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[18:03:15] *** Joins: neiluj (~neiluj@2a01:e0a:1f2:d960:9008:5931:8fdd:99f6)
[18:03:33] <neiluj> Hello! Is there a standard generator for the P256 curve?
[18:10:09] <ms7821> https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf#page=100
[18:12:11] <neiluj> Nice! Thank you ms7821 
[18:20:13] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[18:24:06] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[18:25:15] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:27:53] *** Joins: d1cor (~diego@179.63.242.100)
[18:29:17] *** Joins: kish` (~sid742412@user/aqua)
[18:34:15] *** Joins: Elzington (~Elzington@static-68-235-44-10.cust.tzulo.com)
[18:35:09] *** Quits: d1cor (~diego@179.63.242.100) (Ping timeout: 256 seconds)
[18:49:05] <neiluj> Why should one stil MAC encrypted messages even if they are signed?
[18:49:38] <neiluj> The signature already provides authentication and data integrity.
[18:51:40] <MacGyver> That depends on the exact construction being used and the type of authentication desired.
[18:52:38] <MacGyver> The only case where a signature provides similar authentication to a MAC is if you sign the ciphertext, not the plaintext.
[18:52:50] <MacGyver> However, it's only superficially similar:
[18:54:12] <MacGyver> One issue that props up is if I sign a ciphertext and send it to B, nothing is stopping B from forwarding it to C. C will see my signature on it. Does that mean the message was intended for or part of a communication between me and C?
[18:54:32] <MacGyver> With a MAC, the key is shared between and only known by the two (or more) communicating parties.
[18:54:51] <neiluj> Thanks, in this case I do as follows, encrypt(m)||MAC(m,private_key)||Sign(m)
[18:54:57] *** Quits: sav_ (~savio@177.12.48.155) (Quit: Leaving)
[18:55:06] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[18:55:08] <neiluj> The mac and signature both take 32bytes each
[18:55:32] <MacGyver> That's an odd construction.
[18:55:48] <MacGyver> Nothing is stopping the attacker there from stripping off the signature and replacing it with their own, if they know m.
[18:55:50] <neiluj> it's encrypt-then-sing?
[18:56:16] <MacGyver> encrypt-and-sign, more.
[18:57:42] <MacGyver> Why not s = encrypt(m, sign(m)); s' = s || MAC(s, private key); send s'?
[18:58:00] <neiluj> oh, so encrypt-then-sign instead: c=encrypt(m)||MAC(m,private_key)  (encrypt then mac), then c'=c||Sign(c)
[18:58:14] <MacGyver> No, most of the time you don't want to sign ciphertexts.
[18:58:38] <MacGyver> Sign the plaintext, but make the signature part of the encrypted blob or at least use an AEAD construction with the signature in the associated data.
[18:58:59] <MacGyver> Ask yourself: what assurance is the signature supposed to provide?
[18:59:51] <yawkat> MACs and weird constructions, name a more iconic duo
[19:00:15] <neiluj> hmmm
[19:00:35] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[19:00:40] <neiluj> my protocol already appends a signature of the message at the end, so I'd like to be consistent and end with the signature
[19:01:39] <MacGyver> If your message format is what you just stated, your protocol has a design flaw.
[19:01:51] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[19:01:57] <yawkat> The issue is *what* you're signing
[19:02:07] <yawkat> Or MACing
[19:02:20] *** Quits: OneWheelGeek (~OneWheelG@alpha.straybits.org) (Remote host closed the connection)
[19:02:22] <MacGyver> (And then how you're binding the signature to what you're sending)
[19:02:37] <neiluj> well, the signed messages are not encrypted, I'm just doing an extension of the protocol with encrypted messages
[19:03:51] *** Joins: OneWheelGeek (~OneWheelG@alpha.straybits.org)
[19:04:17] <neiluj> MacGyver: "thing is stopping the attacker there from stripping off the signature and replacing it with their own, if they know m."
[19:04:17] <ms7821> <insert obligatory don't roll your own crypto disclaimer>
[19:04:19] <neiluj> sure
[19:04:23] <MacGyver> Then use an AEAD construction with the signature in associated data and put that in front of the signature.
[19:04:46] <neiluj> but in my case a central server associates IP+port addresses with public key
[19:04:48] <MacGyver> If you *need* to adhere to the format of non-encrypted signature at the end.
[19:05:04] <neiluj> so we can check if the peer that sent the messages appended it's signature
[19:05:15] <ms7821> oh no, is this some sort of p2p system?
[19:05:42] <neiluj> by checking the signature with the public key of the peer that sent the message
[19:05:45] <neiluj> no?
[19:05:50] <neiluj> ms7821: correct
[19:06:36] <neiluj> We assume the central server is not flawed
[19:07:23] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[19:12:10] <neiluj> and we fall under cryptographic doom if we have to decrypt first to check the signature
[19:13:21] <ms7821> not if you also have a mac
[19:14:42] <ms7821> cryptographic doom is why mte and eam are unideal
[19:15:08] <neiluj> ok, so then we can just avoid signing in your scheme MacGyver? assuming that the DH key exchanged that produced the key used for encrypting was authenticated using the signature
[19:15:37] <MacGyver> neiluj: What assurance is the signature *supposed* to provide in this application?
[19:19:44] <neiluj> Checking the integrity of packets that cannot be checked otherwise (some of them can be checked using a Merkle tree) and the authenticity (the central server has a mapping of senders(ip address + port) and public keys)
[19:21:58] *** Parts: NeoWakeUp (~raulc@user/neowakeup) ()
[19:22:35] <ms7821> but what kind of attacks do you want to protect against?
[19:23:42] <MacGyver> neiluj: Does anyone in the system at any point in time need to check the authenticity of the *plaintext* message?
[19:24:13] <MacGyver> neiluj: If the answer is yes, then you cannot avoid signing the plaintext.
[19:26:37] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[19:27:04] <neiluj> MacGyver: no, only the two peers that are exchanging critical packets with the server.
[19:27:35] <MacGyver> So yes, then.
[19:27:49] <neiluj> well, two peers, any peers then
[19:29:54] <neiluj> ok, thanks, the teacher was saying that encrypt-then-sign was perfectly correct
[19:30:08] <MacGyver> You're not doing encrypt-then-sign.
[19:30:24] <MacGyver> You're doing a combination of encrypt-and-sign and encrypt-then-MAC.
[19:30:26] <neiluj> because of the mac?
[19:30:30] <neiluj> ah
[19:30:39] <MacGyver> Note the difference between "and" and "then".
[19:30:48] <neiluj> oh indeed
[19:30:58] <MacGyver> If you sign the plaintext, then encrypt the plaintext and include the signature *separately*, that's "and".
[19:31:05] <neiluj> the MAC complicates everything
[19:31:11] <MacGyver> If you sign the plaintext, then encrypt the plaintext & signature, that's "sign-then-encrypt".
[19:31:24] <neiluj> since you cannot avoid it -- that was what the teacher suggested, don't append the mac
[19:31:28] <MacGyver> And if you encrypt the plaintext, then sign the ciphertext, that's encrypt-then-sign.
[19:31:36] <neiluj> thanks
[19:31:40] <MacGyver> Same ordering applies to MACs.
[19:31:42] <MacGyver> But, note:
[19:32:15] <MacGyver> MACs are a symmetric construction and signatures are an *a*symmetric construction, and they provide *different* guarantees.
[19:32:41] <MacGyver> Hence my question about whether anyone needs to be able to check the authenticity of the *plaintext*.
[19:33:11] <neiluj> oh
[19:33:29] <MacGyver> You can't do that with a MAC over the ciphertext, and you also need to keep in mind that just because a MAC over a plaintext verifies doesn't mean that you now have proof the sender originated that plaintext.
[19:33:32] <neiluj> my bad, only two parties are communicating at a time (peer-peer or peer-server)
[19:33:47] <neiluj> so not *anyone* need to check authenticity
[19:33:48] <MacGyver> The partner of the communication, i.e. the verifier could have generated it as well.
[19:35:12] <MacGyver> Think of it like this: the MAC over the ciphertext protects against anyone except A and B screwing with the ciphertext. The signature over the plaintext proves that the sender generated and sent that plaintext.
[19:35:41] <MacGyver> There are also nuances to that "proof", you usually want to protect against stuff like B then forwarding that to C.
[19:36:44] <MacGyver> Some modern protocols explicitly *don't* have that property of being able to prove that, because it's considered an undesirable property to be able to prove down the line someone sent something.
[19:37:05] <MacGyver> Signatures aren't "just the public-key version of a MAC".
[19:37:46] <neiluj> okay, so we sign so that the server can't let anyone write false info in its database
[19:38:02] <neiluj> that's the goal of the signature
[19:38:23] <neiluj> but also for two peers to authenticate their DH key exchange
[19:38:55] <neiluj> we check the mac (encrypt-then-mac) before even decrypting
[19:39:15] <neiluj> so that we can't be attacked with a kind of denial of service
[19:40:00] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:43:53] <Alipha> dostoyevsky2: can you use aes-256-gcm instead of cbc?
[19:45:16] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:46:25] *** Joins: Atrillox (~bigguy@219.137.142.242)
[19:46:43] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:47:03] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[19:48:25] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:49:45] *** Quits: Atrillox (~bigguy@219.137.142.242) (Client Quit)
[19:50:32] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Remote host closed the connection)
[19:51:22] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[19:55:00] *** Joins: mononote (~mononote@user/mononote)
[19:56:12] <neiluj> okay, so with encrypt-then-sign, since we have a mapping of ips and public keys, we can't tell if an attacker has added it's own signature to an existing message if the attacker is registered
[19:56:23] <neiluj> its*
[19:56:53] <neiluj> tricky stuff
[19:58:13] <dostoyevsky2> Alipha: I read that gcm is faster than cbc, any other benefits?
[19:58:46] <Alipha> dostoyevsky2: it's authenticated. It is protected from modification
[19:59:00] <Alipha> dostoyevsky2: you don't have to worry about padding
[19:59:06] <dostoyevsky2> ah
[19:59:18] *** Joins: qbt (~qbt@user/edun)
[19:59:29] <Alipha> dostoyevsky2: any non-authenticated encryption scheme should be considered broken
[20:02:36] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:9261:bbf4:ebed:535e)
[20:02:56] *** Quits: qbt (~qbt@user/edun) (Client Quit)
[20:05:35] <neiluj> But as Alipha said, no problem, just include a fingerprint of the public key in the plaintext, so that we can check if the fingerprint doesn't match the one from the attacker's public key
[20:05:38] <neiluj> good!
[20:06:01] <neiluj> finally found the desired encryption scheme
[20:06:19] <neiluj> many thanks
[20:08:50] <Alipha> neiluj: you're still using a MAC though, right?
[20:09:26] <neiluj> yes
[20:10:15] <neiluj> oh, so encrypt-then-sign instead: c=encrypt(m||fingerprint(pubkey))||MAC(m,private_key)  (encrypt then mac), then c'=c||Sign(c) (encrypt-then-sign)
[20:10:38] <neiluj> well no
[20:10:38] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: bbl.)
[20:11:00] <neiluj> it's not encrypt-then-sign since the mac is appended to the ciphertext
[20:11:43] <neiluj> oh, so encrypt-then-sign instead: c=encrypt(m||fingerprint(pubkey)) (encrypt then mac), then c'=c||MAC(c,private key)||Sign(c) (encrypt-then-sign)
[20:12:11] <Alipha> neiluj: also, i hope you're using an authenticated encryption scheme such as xchacha20-poly1305 or AES-GCM, and not manually computing a mac yourself.
[20:12:41] <Alipha> it doesn't matter if you include the MAC in what you're signing
[20:12:48] <neiluj> yes, I use the primitives from the Go library
[20:13:06] <neiluj> ah good to know
[20:13:49] <neiluj> In my case, I do AES-128-CBC for encryption and ECDH on P256 for the key exchange
[20:14:43] <neiluj> P256 also has good properties (cofactor of 1)
[20:14:53] <neiluj> If I remember properly
[20:15:34] *** Joins: node1 (~node1@user/node1)
[20:16:41] <neiluj> or maybe CTR since it can be parallelized
[20:17:07] <neiluj> so faster than the sequential CBC
[20:17:31] <Alipha> neiluj: why CBC and not GCM?
[20:17:41] <neiluj> I don't know GCM yet
[20:18:08] <Alipha> neiluj: GCM is like CTR but automatically does a MAC for you
[20:18:50] <neiluj> oh so no need to append a mac in the packet?
[20:20:19] <Alipha> neiluj: right
[20:20:32] <neiluj> that's cool!
[20:21:34] <Alipha> also remember that you MUST have unique IVs/nonces per ciphertext. (if you were to use CBC, the IV must also be unpredictible/random)
[20:21:49] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[20:27:15] <neiluj> yes
[20:27:18] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[20:32:39] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 252 seconds)
[20:35:19] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[20:43:30] *** Joins: sav (~savio@177.12.48.155)
[20:43:54] *** sav is now known as Guest5350
[20:49:57] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[20:50:48] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[20:51:35] *** Joins: Guyver2_ (Guyver@guyver2.xs4all.nl)
[20:53:59] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Ping timeout: 256 seconds)
[20:54:07] *** Guyver2_ is now known as Guyver2
[20:56:04] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:00:31] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 252 seconds)
[21:07:30] *** Joins: Guyver2_ (~Guyver@2001:985:f3f:1:cd8d:75ec:d720:d4db)
[21:10:14] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Ping timeout: 252 seconds)
[21:10:21] *** Guyver2_ is now known as Guyver2
[21:13:14] *** Joins: CrashTestDummy2 (~CrashTest@cpe-24-168-60-220.hvc.res.rr.com)
[21:15:54] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:16:39] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[21:20:03] *** Quits: CrashTestDummy2 (~CrashTest@cpe-24-168-60-220.hvc.res.rr.com) (Ping timeout: 256 seconds)
[21:29:58] *** Joins: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[21:30:14] *** Joins: CrashTestDummy2 (~CrashTest@cpe-24-168-60-220.hvc.res.rr.com)
[21:33:05] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[21:33:29] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374)
[21:33:31] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[21:33:55] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:34:09] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[21:37:11] *** Quits: CrashTestDummy2 (~CrashTest@cpe-24-168-60-220.hvc.res.rr.com) (Ping timeout: 252 seconds)
[21:37:24] *** Quits: Guest5350 (~savio@177.12.48.155) (Quit: Leaving)
[21:37:45] *** Joins: sav (~savio@177.12.48.155)
[21:38:09] *** sav is now known as Guest5157
[21:39:12] *** Quits: Guest5157 (~savio@177.12.48.155) (Client Quit)
[21:47:05] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 252 seconds)
[21:47:11] *** Quits: br1ck (~br1ck@150.140.193.82) (Ping timeout: 256 seconds)
[21:50:28] *** Joins: aleck (~aleck@user/aleck)
[21:51:35] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[21:51:43] *** Joins: xetch (~xetch@173.208.77.65)
[21:52:02] *** Quits: aleck1 (~aleck@user/aleck) (Ping timeout: 252 seconds)
[21:54:08] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:57:58] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[22:01:42] *** Quits: falkor (~falkor@90.242.155.158) (Quit: Leaving)
[22:18:17] <MacGyver> neiluj: Why are you signing ciphertexts again?
[22:19:51] <MacGyver> neiluj: What's the signature over in the *un*encrypted version of this protocol?
[22:41:01] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[22:47:08] *** Joins: mamilis (sid502224@id-502224.tinside.irccloud.com)
[22:47:18] *** Quits: mamilis (sid502224@id-502224.tinside.irccloud.com) (Client Quit)
[22:49:03] *** Quits: xetch (~xetch@173.208.77.65) (Ping timeout: 252 seconds)
[22:53:56] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[22:54:43] *** Joins: d1cor (~diego@179.63.242.100)
[23:03:30] <neiluj> MacGyver: so that it is consistent with the existing protocol extension that appends a signature at the end of the packets
[23:04:00] <MacGyver> So sign the plaintext and include the signature in the associated data of the AEAD algorithm.
[23:04:05] <neiluj> but yeah, it is cleaner to encrypt the plaintext and the signature of the plaintext
[23:05:35] <MacGyver> That way your signature proves the same thing as in the unencrypted version, you MAC the signature as well (currently you don't), and by extension bind that signature to that message.
[23:07:30] <neiluj> alright thanks, isn't it done by the GCM mode automatically?
[23:07:45] <neiluj> since I'm coding this in Go, found this: https://www.example-code.com/golang/crypt2_aes_gcm.asp
[23:08:23] <neiluj> according to this, GCM does AEAD
[23:08:29] <MacGyver> Well you do have to tell GCM what to encrypt and what to consider associated data.
[23:09:43] <MacGyver> Because you want the signature at the end, outside of the encrypted blob which would be covered by the authenticated encryption part of GCM, my suggestion is to sign the same message but include it in GCM as associated data s.t. the MAC is computed over the encrypted message *and* the signature.
[23:12:35] <rqsd> Am I missing something or couldn't this be simplified to just signing plaintext and then encrypting+authenticating plaintext||signature?
[23:13:30] <tusko> How many cryptosystems are actively used in the wild? Is there some compendium of known vulnerabile cryptosystems?
[23:13:37] <MacGyver> rqsd: Technically, yes, but there's a desired format with the signature at the end.
[23:13:45] <rqsd> Ah
[23:13:49] <tusko> Like who uses Goldwasser-Micali?
[23:14:20] *** Joins: Narrat (~omnius@p200300df5f14e29206ea56fffe2e7cdc.dip0.t-ipconnect.de)
[23:14:59] <rqsd> Rabin-Williams gang reporting in
[23:15:07] <caveman> https://www.schneier.com/blog/archives/2021/11/why-i-hate-password-rules.html
[23:15:26] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[23:15:33] <caveman> lel.  mr. schhneier's 16-char max-entropy pass got rejected.
[23:16:01] <tusko> where's the El-Gamal crew @
[23:16:13] <tusko> is it still a viable cryptosystem?
[23:16:57] <yawkat> sure
[23:17:49] <tusko> I'm pretty sure its vulnerable to a known-plaintext attack
[23:17:53] <tusko> gives the key
[23:18:30] <caveman> :s^Twd.J;3hzg=Q~  <--  got rejected cause "too insecure" because the site wanted "at least 2 numbers"; schneier finds.
[23:21:23] <neiluj> MacGyver: oh ok, so GCM takes it's 'initialization vector' which is called AAD.
[23:21:36] <neiluj> ok I see what you're suggesting
[23:22:34] <yawkat> the iv for gcm is not the aad
[23:22:40] <neiluj> but how about the replay of a message?
[23:22:53] <neiluj> ah
[23:23:05] <MacGyver> neiluj: You have to ensure that doesn't happen separately anyway.
[23:23:19] <MacGyver> neiluj: Nothing in your ciphertext-signing variant prevents that.
[23:23:30] <neiluj> oh indeed
[23:23:51] <neiluj> so maybe feed the AAD with a nonce and signature?
[23:24:20] <MacGyver> A transaction ID maybe?
[23:24:30] <MacGyver> May also just may want to make that part of the message.
[23:24:38] <MacGyver> As in, encrypt it.
[23:24:49] <neiluj> each packet has an ID, so that could be used, yes
[23:25:11] <neiluj> but it is public info
[23:25:59] <MacGyver> Okay, then putting it in the associated data makes sense. Though are you also including it in the *signed* data then?
[23:27:47] <MacGyver> (Because you probably should be signing the transaction ID)
[23:28:20] <neiluj> good question, as it stands the original signing protocol extension only sends the data of a packet, not its header, which includes the transaction ID
[23:28:34] <neiluj> only signs*
[23:28:53] <neiluj> yeah, I was thinking of signing the header too
[23:31:00] <neiluj> but I don't think it is necessary to also sign the header (id, type and length of packet)
[23:33:48] <neiluj> huh no
[23:34:20] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[23:34:34] <neiluj> you definitely have to include the Id in the signature.
[23:37:41] *** Quits: r-g (~r-g@195-154-105-157.rev.poneytelecom.eu) (Quit: r-g)
[23:39:34] <neiluj> But some replay attacks could be possible though
[23:39:59] <neiluj> So maybe generate nonces with a PRNG seeded with the session key?
[23:40:10] <MacGyver> That's an option.
[23:40:17] <MacGyver> You may want to look into how TLS avoids this.
[23:41:16] <neiluj> interesting, thanks
[23:52:30] *** Joins: rardiol (~quassel@user/rardiol)
[23:57:05] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
