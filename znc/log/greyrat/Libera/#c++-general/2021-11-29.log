[00:01:00] <Alipha> i'm assuming for most of the std::vector members, you won't want your operator= to copy them, but you'll have to decide that
[00:02:51] <paul424> yeah I already resigned from operator= and I do use custom transfer method
[00:03:38] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[00:04:14] <paul424> the std::vector members would be set up by buildTrap, buildRoom, etc.
[00:05:55] <paul424> the "transfer" method I mean
[00:06:05] <paul424> void Tile::transfer(Tile* tt)
[00:09:34] <paul424> Alipha, this bool GameMap::copyTilesWithOffsetFrom(const GameMap& dtc, unsigned int xx, unsigned yy,  unsigned int length, unsigned int width, unsigned int offsetX, unsigned int offsetY) should be used to copy to / from when we are on the same side of client-server ... have you seen the sketch ?
[00:12:07] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[00:12:41] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:13:31] *** Joins: seninha (~seninha@user/seninha)
[00:16:26] <mort> uh why does a std::mutex have to be 40 bytes
[00:16:38] *** magla is now known as geli
[00:18:50] <yolo> is there something like WSL2 under macos to run linux apps without using a docker
[00:18:53] <ville> have to is possibly not the right qualifier
[00:19:28] <yolo> i have a c++ model that I need docker to run it under macos and windows, with WSL2 I just realized that I no longer need docker for windows
[00:20:11] <yolo> wsl && wget my-c++-systemc-simulator && run-my-model, nice!
[00:20:37] *** Quits: paul424 (~tom@ip-37-248-154-238.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:22:56] *** Joins: RazielZ (~Raziel@user/raziel)
[00:23:13] *** Quits: navidr (uid112413@id-112413.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:26:14] *** Quits: geli (~gelignite@55d4f645.access.ecotel.net) (Quit: Stay safe!)
[00:26:28] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 268 seconds)
[00:29:08] <mort> is there an implementation of the gsl by anyone other than microsoft? Or is the core guidelines basically a microsoft project
[00:31:56] <mort> seems like it's mainly a microsoft project
[00:34:22] <RandomReader> core guidelines isn't, but MS is driving a chunk of the tooling related to it, like the GSL library and the lifetime analyzer
[00:34:49] <RandomReader> there's at least one other implementation of GSL, I can't remember if anyone else has picked up lifetime analysis
[00:35:21] <mort> the only one I've been able to find is microsoft's
[00:35:21] <RandomReader> https://github.com/gsl-lite/gsl-lite
[00:36:21] <RandomReader> note since GSL isn't a formal spec, there may be some differences, so you'll want to look closely at the bits you use
[00:36:36] <RandomReader> that goes for both implementations, I remember hearing chatter about MS's deviating from the text a couple times
[01:05:48] *** Joins: badone (~badone@209.132.189.136)
[01:15:07] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[01:19:11] *** Joins: ItsLandon (~quassel@2601:603:1400:c770::521)
[01:20:45] *** Parts: ItsLandon (~quassel@2601:603:1400:c770::521) ()
[01:27:30] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:35:21] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:38:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:38:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:38:52] *** ChanServ sets mode: +v npaperbot
[01:40:59] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Ping timeout: 260 seconds)
[01:41:38] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[01:45:15] <johnny> yolo, isn't that just vagrant?
[01:45:38] <johnny> hmm.. does mac os even have a built in hypervisor?
[01:49:27] <ashafq> yolo: You can run virtualbox or qemu on mac
[01:51:45] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:56:57] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[02:00:51] *** Joins: Guest84 (~Guest84@135.84.23.169)
[02:02:30] <cbreak> macos has a built-in hypervisor
[02:02:42] *** Joins: markong (~kvirc@213.146.188.203)
[02:03:07] <cbreak> https://developer.apple.com/documentation/hypervisor
[02:03:30] <cbreak> johnny: but as usual, MacOS frameworks aren't c++
[02:03:56] <johnny> hmm? what does C++ have to do with this?
[02:04:15] <johnny> other htan i imagine they want to be able to COMPILE C++ programs
[02:04:42] <cbreak> johnny: ? you're in a c++ channel
[02:04:52] <cbreak> I didn't expect you want to use objective-c or swift for it
[02:05:17] <cbreak> the hypervisor framework is a _framework_. A library you use to create programs that ... need a hypervisor
[02:05:33] <RandomReader> he was responding to yolo's questions about deployment environments, not actually building software that cares about them
[02:05:40] <cbreak> oh
[02:06:30] <johnny> yeah i just don't know anything about mac, so i ddn't know how they might solve a similiar problem
[02:06:54] <johnny> last i'd heard, folks just used vagrant for that, and if they wanted to gui apps, install xquartx
[02:07:01] <cbreak> it's probably best to not use linux APIs
[02:07:03] <johnny> err whatever it's called
[02:07:09] <cbreak> pure posix programs will work on macos natively
[02:07:37] <cbreak> after all, MacOS is still a unix system
[02:08:09] <johnny> but if you intended target is a linux system, and you say wanna integrate with linux libs, and also perhaps test and run them locally, then you do need something like that
[02:08:20] <cbreak> if you want to run actual linux programs, then virtualization is the only sane solution I think
[02:08:32] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:08:33] <cbreak> johnny: many linux libs aren't linux libs
[02:08:41] <johnny> i know.. but also many are
[02:08:43] <cbreak> they're unix libs, or c++ libs
[02:08:57] <yolo> we have a c++ program(a simulator) that some customers are using macos
[02:09:34] *** Joins: proller (~p@80.240.216.69)
[02:09:41] <yolo> so far the solution is docker, which works ok, just realized WSL renders windows's docker meaningless, we use docker for cross-platform distro
[02:10:04] <johnny> so it's actually soemting you build for linux  that folk run with docker ?
[02:10:04] <cbreak> docker on MacOS just uses a virtual machine to start a linux system
[02:10:10] <yolo> i'm going to replace windows-docker with WSL for the c++ binary
[02:10:11] <johnny> yeah what cbreak said^^
[02:10:13] <cbreak> in which it then uses the normal docker stuff for containerization
[02:10:21] <johnny> so the real question is why aren't you just compiling it for mac directly?
[02:10:41] <johnny> you haven't told us enough information to imagine why
[02:10:51] <cbreak> you could also just use a linux vm directly, without docker
[02:10:56] <johnny> or that
[02:11:00] <cbreak> I'd recommend going native, if you can afford it though
[02:11:04] <yolo> johnny: because, we have to ship some cross-gcc-toolchain for the simulator(which is a risc-v cpu), we don't want to cross-compile it again on macos
[02:11:09] <johnny> but maybe docker gives a nice ui cbreak ?? i dunno
[02:11:17] <cbreak> johnny: it's not that great
[02:11:20] <cbreak> and no GUI support
[02:11:23] <johnny> why not? is tht much effort yolo
[02:11:34] <johnny> cbreak, i meant gui for installing and launching the container more than the applications
[02:11:46] <cbreak> hmm...
[02:11:52] <cbreak> that reminds me
[02:11:59] <yolo> johnny: one time effort is ok, long time maintenance not so
[02:11:59] <johnny> yolo, why not?
[02:12:03] <johnny> oh
[02:12:11] <johnny> is it gonna be that much effort?
[02:12:12] <cbreak> docker changed the terms of service recently, it's no longer free, you have to pay for docker
[02:12:26] <yolo> not really, one for docker composer
[02:12:27] <cbreak> (the mac version at least)
[02:12:40] <yolo> docker itself remains to be free, if not, there are many alternatives
[02:12:46] <johnny> yolo, the equivalent of wsl outside of windows is vagrant :)
[02:12:54] <johnny> last i heard anyways
[02:12:59] <johnny> maybe soebody cme up with something even easier
[02:13:02] <cbreak> yolo: the desktop docker's not free: https://docs.docker.com/desktop/mac/install/
[02:13:13] <cbreak> which is what you're using on macos
[02:13:25] <yolo> it's a tier pay model
[02:13:39] <cbreak> johnny: isn't vagrant a config management system like ansible? or am I mixing things up
[02:13:48] *** Joins: gargus (~user@114.198.29.250)
[02:14:03] <yolo> vagrant is a tool for prebuilt virtual machines i think, never need it
[02:14:06] <johnny> some people use it like that, bit its als just a nice config to launch a vm
[02:14:16] <johnny> an fetch one
[02:14:19] <yolo> i always install os into virtualbox manually
[02:14:23] <johnny> WHY?
[02:14:37] <cbreak> why not use ansible? :D
[02:14:42] <yolo> every tool has its own set of problems
[02:14:51] <johnny> pretty sure soemody even came up with a tool to package up a vagrant config to launch the container from a click with a gui
[02:14:59] <johnny> i mean launch the vm froma click with a gui
[02:15:14] <yolo> which means, if it breaks somehow, you're screwed
[02:15:24] <johnny> that's literally all software
[02:15:28] <johnny> that you didn't write
[02:15:39] <yolo> install ubuntu to virtualbox took 10 minutes and if anything went wrong, i can fix them on the spot
[02:15:48] <cbreak> if it's OpenSource, you might at least thave the chance to fix things :)
[02:15:49] <johnny> then why do you needa n equivalent of wsl ?
[02:16:13] <cbreak> the equivalent of WSL on Linux would be WINE
[02:16:20] <johnny> if you don't want it as simple as WSL, then why are you asking about WSL specifically, since the ease of use is the main reason for WSL , especially WSL2
[02:16:21] <yolo> trying to move away from docker if possible
[02:16:32] <johnny> cbreak, no.. because wine just a tranlation layer, WSL2 is a full VM
[02:16:36] <cbreak> no
[02:16:41] <cbreak> WSL doesn't run a WM
[02:16:43] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:16:46] <cbreak> it doesn't run a real linux kernel
[02:16:46] <johnny> wsl2 does
[02:16:53] <johnny> you're talking about wsl1
[02:17:02] <cbreak> they already changed it again? :/
[02:17:06] <johnny> like 3 years ago
[02:17:21] <yolo> ansible is meant to be simple, but you need at least one week to warm up, been there done that
[02:17:23] <johnny> and i was sad out about it
[02:17:28] <cbreak> weird
[02:17:36] <johnny> and i was sad about it, because i thought what they were doing was super neat
[02:17:39] <yolo> the playbook and galaxy thing have their own compexity
[02:17:41] <cbreak> it was WSL1 in windows 10, back when I tried out that thing
[02:17:50] <johnny> you don't need galaxy at all
[02:17:56] <johnny> but you do have to write a playbook
[02:18:09] <johnny> the whole purpose of ansible IS the playbook
[02:18:11] <cbreak> I don't like ansible galaxy
[02:18:16] <cbreak> never used it
[02:18:29] <cbreak> and if you don't like playbooks, there are alternate formats
[02:18:44] <cbreak> they still are basically playbooks, but ... different :)
[02:18:48] <johnny> cbreak, do you remember htis? https://en.wikipedia.org/wiki/Cooperative_Linux
[02:19:09] <cbreak> no, never heard of that before I think
[02:19:25] <yolo> my boss is like. ansible is easy, give me 20 playbooks in two days, it took me one week to get things in order _before_ write those playbooks
[02:19:32] <RandomReader> overview of the WSL differences (they're both still active, it's a choice): https://docs.microsoft.com/en-us/windows/wsl/compare-versions
[02:20:34] * yolo really hate people saying 'it's very easy, just a few minutes or hours', if it's that easy why not just do it yourself :(
[02:20:57] <yolo> who ever said that must be an idiot because in software, a few minutes normally means a few days
[02:21:02] <RandomReader> that's one of the things I really don't get about all these tools
[02:21:35] <RandomReader> they keep getting used in ways that just seem like excuses to avoid doing something right, while ignoring the fact that supporting the *tools* is at least as much work with greater risk of problems
[02:21:50] <RandomReader> but, well, humans and irrational risk evaluation and all
[02:21:59] <cbreak> RandomReader: I found ansible to be extremely useful
[02:22:07] <johnny> RandomReader, and that's why i think cross compiling is likely to be a better choice rather than forcing he complexity and bugs to the user systm more so
[02:22:21] <RandomReader> oh I don't doubt they do something useful for the problems they're meant to solve
[02:22:28] <cbreak> (I use it for semi-reproducible setup of cluster compute / nas nodes)
[02:22:33] <yolo> all tools is basically using one layer abstraction to fix multiple layers' issues below, yes we need tools, but not endlessly
[02:23:00] <johnny> yolo, i still think your best option is to just do a native build for mac. that way is more likely to show less rpoblems to third party programs
[02:23:07] <cbreak> and ansible really is easy, after a few weeks I was quite confident to not write total garbage playbooks with it
[02:23:16] <johnny> ansible is still not what iwant though
[02:23:30] <johnny> https://github.com/purpleidea/mgmt
[02:23:33] <johnny> maybe something like that
[02:23:49] <johnny> but also just something like nix or guix
[02:23:58] <yolo> johnny: we have some tools that are binary-and-linux only from vendors, not every piece is in source code, thus need some WSL/docker on macos
[02:24:01] <johnny> the hard part is how most linux distros are currently built
[02:24:12] <johnny> yolo, oh, fair enough. you should have mentioned that earlier!
[02:24:37] <yolo> there are many parts indeed, linux is the base line of them
[02:24:55] <cbreak> what I like about ansible is that it's agentless, declarative, somewhat easy to understand, supports quite a lot of things to configure
[02:24:57] <johnny> if there was a plain docker for mac, then that would have never worked
[02:24:57] <yolo> the c++ simulator itself is indeed buildable on macos
[02:25:13] <johnny> well dockerlike anyways
[02:25:30] <johnny> like cbreak said earlier, docker for mac is just a linux vm
[02:25:41] <RandomReader> it's not a Docker you need, it's a VM
[02:25:45] <RandomReader> and .. why not just ship one?]
[02:25:47] <johnny> so it is reducing complexity a bit if you just go with a vm
[02:26:13] <cbreak> yolo: how about making it a client / server thing? Have some linux server doing the linuxy things, and have clients that do the portable things?
[02:26:26] <johnny> that sounds like it'd be more complicated
[02:26:42] <johnny> if you MUST have have VM, then it seems simpler to do everyhing thre
[02:27:18] <RandomReader> (then your support target is the VM, and the customers can run it wherever they want)
[02:27:36] <johnny> and if it really is just a vm, then you don't necessarily NEED ansible, then you could just use the distro's own tooling like debootstrap or kickstart
[02:27:53] <yolo> ansible has nothing to do this indeed
[02:28:03] <yolo> s/this/with this/
[02:28:15] <johnny> well i assume you want the end user to just downloading a totally working application right?
[02:28:18] <yolo> anyway i will stick with docker(yes it's a linux vm on macos)
[02:28:19] <johnny> so you have to automate it somewhere
[02:28:40] <johnny> whether that be via ansible or debootstrap or whatever
[02:29:07] <yolo> the automation can be done in a shell script in this case, about 20 lines apt-get etc
[02:29:13] <yolo> no need ansible for it
[02:29:49] <johnny> ah
[02:30:06] <johnny> well i guess you don't need to do anything afteral
[02:30:52] <yolo> i _may_ replace docker-on-windows with WSL as I feel the latter is more efficient
[02:31:07] <yolo> thus the question: is there something similar on macos
[02:31:11] *** Quits: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi) (Ping timeout: 245 seconds)
[02:31:16] <yolo> answer is: not really,stay with docker for now
[02:31:27] <RandomReader> oh, yeah, macOS does not support running Linux apps
[02:31:50] <yolo> unless it has a MSL (macos subsystem linux) that is
[02:31:59] <RandomReader> Windows' support is a bit unique in the OS realm, due to NT's design
[02:32:11] <johnny> RandomReader, did you know about colinux?
[02:32:11] <RandomReader> Mach would be capable, but not Darwin
[02:33:05] <RandomReader> I knew of it .. I think I tried it briefly once? but not significantly
[02:33:26] *** Quits: Leone (~Leo@216.154.50.172) ()
[02:33:37] <johnny> neat idea
[02:34:00] <johnny> i wish the core OS was opened for windows
[02:34:38] <johnny> i only know a little bit about it because a friend (RIP) loved to talk about dave cutler
[02:34:49] <RandomReader> I think hypervisor APIs are basically the spiritual successor to it
[02:37:24] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of hyperdimensional elves at https://indiedevs.net/)
[02:38:04] <RandomReader> a lot of the design information is available, either implicitly in docs or explicitly in various blogs and books over the years .. although MS keeps redoing the web interface and losing the blogs...
[02:38:11] <RandomReader> and the design to me is far more interesting than the code would be
[02:38:22] <RandomReader> but there's also ReactOS to explore
[02:39:26] <johnny> i haven't checked into reactos in a long time. i wonder how they are doing
[02:39:42] <Guest84> Let's say I have a C++ daemon that runs an HTTP API (don't ask), and another C++ client app that talks to the previous one by HTTP. What would be the simplest way to disallow certain HTTP requests unless they came from my specific client? I get anything can be reverse-engineered with enough time, that's fine, I just want to throw in a big monkey
[02:39:43] <Guest84> wrench in there. I'd like to secure this at the application level if possible. Other constraints: 1) no Internet access on either system, just LAN, 2) no hardware like yubikey, has to be a software approach.
[02:39:46] <johnny> seems like people would rather make whole new OSes than work in a project like reactos
[02:40:01] <RandomReader> they seem to be moving along, just a continuously shifting target
[02:40:14] <Guest84> a shared key given in an initial handshake, that gets turned into an API token to use for HTTP requests?
[02:40:17] <johnny> Guest84, put up another webserver in front of it?
[02:40:21] <johnny> like ngix
[02:40:25] <johnny> control access from there
[02:40:31] <Guest84> nah, cant add hardware
[02:40:37] <johnny> hardware?
[02:40:39] <Guest84> but even nginx, how is it handling this
[02:40:40] <RandomReader> Guest84 - use TLS, set certificates?
[02:40:59] <johnny> you didn't define "specific client" though.  specific client by what?
[02:41:18] <Guest84> the exact Qt client I wrote and released. And future releases.
[02:41:18] <RandomReader> (or roll your own keying system, but there's enough TLS implementations you can probably make that be drop-in for simpler)
[02:41:33] <johnny> sometimes that's just by IP, sometimes it's user and password, but what it it for you?
[02:42:23] <johnny> in the mobile app realm with apis, they might use tokens like jwt (not that jwt is great tho)
[02:42:24] <Guest84> RandomReader: what's stopping a user from copying the certificate from the client PC, and using it on other PCs running 3rd party clients?
[02:42:41] <Guest84> like, how is my server detecting for sure "yeah this is Guest84's client app"
[02:42:52] <RandomReader> nothing, that's the same unsolvable problem you're facing anyway
[02:42:56] <johnny> do you really need that kind of control?
[02:43:02] <Guest84> not "for sure", but within reasonable doubt. I know this is not stopping reverse engineers
[02:43:06] <Guest84> johnny: yes
[02:43:09] <yolo> you either have to build in some preset 'passwords' or 'keys', or use something like PKI or SSL to do that
[02:43:09] <RandomReader> but I was more thinking you'd embed the certificate in the client, not make it an immediately visible separate file
[02:43:12] <johnny> then you'er screwed :)
[02:43:44] <RandomReader> as in, hardcode it, feed the byte array to the TLS init
[02:43:45] <johnny> it'd be much easier if it was a mobile application, since devices have ids
[02:43:45] <lru> Guest84: you're talking DRM or something right?  i.e. you have no control of the client machine, and no control of the network, but you want to control the app
[02:43:53] <yolo> whatever you do, you can't stop a hacker to tcpdump the wire and see how you handshake and reverse engineer it
[02:43:58] <RandomReader> or use resource attachment at build time, which Qt probably supports
[02:44:25] <RandomReader> then just configure your server to check for the client certificate on connection, and use that as your "my app" trigger
[02:44:35] <Guest84> lru: yes. And DRM works. It puts enough of a barrier, that games that use Denuvo have a good launch, then the publusher doesnt care if it gets cracked 3 months later. And there's some games (unpopular ones) still uncracked
[02:44:43] <yolo> Yubikey exists for a reason, there is only so much you can do to safeguard the access locally
[02:44:59] <johnny> Guest84, people crack denovo within hours now
[02:45:48] <Guest84> either way, those are an army of talented, dedicated reverse engineers, not likely to be the ones cracking my dinky software. I just need things to be harder than "copy a certificate from PC 1 to PC2 to defeat copy-protection"
[02:46:11] <johnny> RandomReader, so couldn't you just copy the binary to another computer and it'd just work?
[02:46:20] <Guest84> I didnt know, but I think only 3 years ago it was still a blocker
[02:46:23] <johnny> i don't see what embedding it would solve
[02:46:33] <RandomReader> the binary would be the client, which isn't a problem he's solving
[02:46:38] <RandomReader> he said client, not install/machine/whatever
[02:46:48] *** Quits: bobb_ (~bobb_@dslb-092-074-251-151.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:47:27] <RandomReader> if you're trying to fingerprint *installs*, then that's an entirely different scenario
[02:47:53] <johnny> yeah i think we don't still know eough to really answer
[02:48:10] <johnny> but also, i don't necessarily want to help solve this particular problem, so instead i'm gonna eat dinner
[02:48:49] <Guest84> no, the client software can easily be made to use a license based on MAC/CPU serial/etc (which are SORTA easily defeated on Linux, but takes a tech geek). It's the server receiving connections from multiple clients that I especially needs to make sure only allows certain requests from that specific client
[02:48:58] <Guest84> bon appetit
[02:49:21] <RandomReader> specific client as in software? or specific client as in that installation on that machine?
[02:49:35] <Guest84> people online get really cagey about restricting clients
[02:50:56] *** pepperon1 is now known as pepperoni
[02:51:03] <yolo> ask the clients to login?
[02:51:28] <yolo> even with http basic auth
[02:51:30] <Guest84> RandomReader: software. The software won't easily run on any PC anyway (not for DRM reasons, but because it has some hardware features too and will just crash if there's an issue). The target of my concern is 3rd party clients installed on commodity PCs
[02:51:44] <Guest84> yolo: users already have to login, that's a separate concern
[02:51:45] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[02:51:51] <RandomReader> (people with an engineering mindset generally don't like to waste resources on unachievable outcomes, so something like DRM falls into that category)
[02:52:27] <yolo> if clients have to login to the http server, you can already limit the clients?
[02:52:27] <RandomReader> ok, so it's basically just that you need to have some token that the client software has, the server can check, and nothing else has (by default anyway)
[02:52:47] <Guest84> and yet DRM worked, at least as long as I can remember. If we're honest, the "wins" come long after the game made most of its money, that's why publishers kept using Denuvo. I don't let perfect be the enemy of "good enough"
[02:52:58] <RandomReader> TLS certificates gets you that on an encrypted connection, and are usually simple enough to implement
[02:53:11] <johnny> Guest84, like i said though, denovo can be cracked within hours now.. it's not months
[02:53:19] <RandomReader> you could also generate and store tokens during login etc, which depending on what you have available may or may not be simpler
[02:53:25] <Guest84> johnny: thought you were making supper :)
[02:53:38] <johnny> ah, i still have 5 minuts apparently
[02:53:52] <johnny> but i guess i can go up there now
[02:54:17] <Guest84> the fact that Denuvo kept pirates at bay (past release date) for so long, to me, says Denuvo won. Even if it's defeated now.
[02:54:26] *** Quits: pepperoni (~pepperoni@gateway/vpn/pia/pepperoni) (Quit: leaving)
[02:54:30] <Guest84> I'm not even against piracy personally
[02:56:14] <Guest84> RandomReader: what do you mean by generating tokens during login? How would that stop  the legitimate user "john" from using an unauthorized client?
[02:57:22] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9d48:1520:34dc:be91)
[02:57:35] <RandomReader> it wouldn't, the assumption was that the onboarding for a login would come from the intended software
[02:57:48] <Guest84> apparently Nier Replicant wasn't cracked in 6 months, until Square voluntarily patched out Denuvo
[02:57:54] <Guest84> this was an April 2021 release
[02:57:56] <RandomReader> if that doesn't fit your usage model, then this wouldn't help
[02:59:28] <RandomReader> oh, sorry, I was sloppy in phrasing there
[02:59:50] <RandomReader> maybe think of it more like "registration", as in you do X as part of installing the software
[03:00:19] <RandomReader> but again it's just the client knowing "how" to do this, which of course an observer could eventually figure out
[03:00:49] *** Quits: gargus (~user@114.198.29.250) (Quit: Leaving)
[03:01:31] <Guest84> I see what you mean. That would've worked if users were tied to a system. But let's say there's 5 client systems, and 50 users who use them on and off (up to 5 at a time), I want users to connect to the server from any of the 5. And because the user management is separate, I want them to add new users on their own in the future
[03:02:05] <RandomReader> ah, yeah, ok
[03:02:12] <Guest84> I'll read more about certificates. I think a combination of certificate + hardcoded pre-shared key would work
[03:02:18] <Guest84> thanks for the advice
[03:02:30] <RandomReader> certificate *is* the PSK in this case
[03:03:09] <RandomReader> if you want to use straight PSK instead, that'd also work .. the web-oriented TLS implementations just tend to assume certificate usage so getting them into PSK mode tends to be more difficult
[03:03:58] <RandomReader> certificates tend to be more like "here's a blob for one I want you to send, and please validate the other one matches <fingerprint / CA / something>"
[03:04:02] <Guest84> but if the C++ code had a magic constant number to use as a PSK IN ADDITION to the certificate, like "int getPSK() { return 123; } that would prevent them from using some common Qt tools to extract the resources including the certificate, no?
[03:04:40] <Guest84> I was thinking similar to how ssh keys can have a passphrase
[03:04:51] <Guest84> or be pure keys
[03:05:11] <RandomReader> it'd be an extra step, but someone who's going to the trouble of extracting the certificates probably already has enough tools to intercept and decode the API, which means they're already aware of anything else you're transporting
[03:06:00] <Guest84> I guess, yeah
[03:07:05] <RandomReader> it wouldn't hurt anything, just usual tradeoffs of effort vs expected benefit
[03:08:38] <Guest84> allright, thanks!
[03:09:27] <Guest84> all this talk of games made me realize I've been out of the gaming loop for like 4 years :/
[03:12:48] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:31:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:45:54] <smallville7123> well i found this https://stackoverflow.com/questions/8287188/stdostringstream-printing-the-address-of-the-c-string-instead-of-its-content
[03:47:39] <smallville7123> https://stackoverflow.com/a/8287227  this confusing ;-;
[03:52:45] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:ca4:2f26:b042:b2f1)
[04:00:34] *** Joins: troller (~p@80.240.216.69)
[04:00:55] *** Quits: proller (~p@80.240.216.69) (Read error: Connection reset by peer)
[04:01:04] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 268 seconds)
[04:01:42] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9a7:b79a:8640:c125) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:01:43] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[04:02:10] *** Quits: manuels (~manuel@80.211.205.88) (Quit: Ping timeout (120 seconds))
[04:05:19] *** Joins: manuels (~manuel@80.211.205.88)
[04:07:24] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:17:42] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:29:20] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[04:41:47] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:41:47] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:42:09] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:42:09] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:42:31] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:42:32] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:42:53] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:42:54] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:43:08] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:43:16] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:43:17] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:43:17] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (K-Lined)
[04:45:21] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 245 seconds)
[04:45:48] *** Quits: shailangsa (~shailangs@host86-186-136-24.range86-186.btcentralplus.com) (Ping timeout: 260 seconds)
[04:46:32] *** Joins: markong (~kvirc@213.146.188.203)
[04:50:47] <smallville7123> welp i finished porting/replacing my existing log macro's with my CrossLog class and i still get   0x10580a6cc0x7f9bacd66d200x10580a6d4
[04:51:03] <smallville7123> all my *
[04:57:10] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 268 seconds)
[04:59:13] <smallville7123> lldb wont step into      stream.operator<<(value);     :(
[04:59:56] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 245 seconds)
[05:00:59] <ville> in your earlier post you are specifically using: x.f() like syntax where it has to pick a member function
[05:01:07] <smallville7123> stream extends std::ostringstream
[05:02:14] <ville> yes but that narrows down the possible overload set, it can only look at the members to find a match. and it finds the pointer-to-const-void one i linked earlier
[05:02:20] <smallville7123> ville: should i use this instead?      stream << value;
[05:02:34] <ville> and pretty much the only sensible thing it can do with such thing is to print the value the pointer has
[05:03:44] <ville> to answer that would require me to understand what it is it did
[05:03:52] <ville> err you wished it did
[05:04:43] <smallville7123> using stream << value appears to solve it
[05:05:35] <smallville7123> ville: so for example, does stream << value look for both member's and non members?
[05:07:25] <ville> yes: x @ y given right kind of arguments can pick operator @ that is a member function of x's type
[05:08:09] <ville> (but it can also pick a non-member)
[05:12:20] <ville> in a situation where you've a temporary: T{} @ y; won't be able to pick a non-member: T& operator @(T&, U&); because the first argument is a reference-to-non-const and can't bind to a temporary. and the non-member overloads of standard library operator <<'s look like that.
[05:13:10] <ville> back when the interfaces were written rvalue refs didn't exist. one way around this then was to make member function versions of these functions
[05:13:12] *** Joins: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com)
[05:14:07] <smallville7123> ok
[05:14:09] <smallville7123> thanks
[05:16:53] <smallville7123> yay https://gist.github.com/mgood7123/d69e7832234057bfd7db8be0de4e6648
[05:17:03] <smallville7123> ville: can i make << a template function?
[05:17:43] <ville> there is nothing special about operator <<. it's like any other operator/function
[05:19:49] *** Joins: malloy (~jimery@116.30.222.115)
[05:20:39] * smallville7123 attempts
[05:21:46] <smallville7123> oof note: candidate template ignored: couldn't infer template argument 'T'
[05:22:03] <smallville7123> for std::endl
[05:25:29] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[05:26:01] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[05:27:44] *** Quits: Guest84 (~Guest84@135.84.23.169) (Ping timeout: 256 seconds)
[05:33:49] <ville> hah "new game": https://decomp.me/scratch/6kohW you need to modify the c code to make the assembly match
[05:34:40] <ville> apparently one of the tools the people doing the bit-perfect reverse engineered n64 games use
[05:36:50] <smallville7123> XD
[05:37:37] <smallville7123> plot twist: your using the wrong dissasembler :P
[05:38:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:38:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:38:53] *** ChanServ sets mode: +v npaperbot
[05:39:12] <smallville7123> plot twist: you have to mentally dissassemble your code into assembly without using a dissasembler :D
[05:45:22] * smallville7123 cannot think of a name better than CrossLog that does not sound silly
[05:46:11] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[05:47:30] <smallville7123> what use does an ostream have to seek?
[05:47:48] <smallville7123> as usually is it just appended to, right?
[05:49:11] <kalven> when writing to a file
[05:52:58] *** Joins: Atlas667 (~Atlas667@193.27.12.10)
[05:53:26] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[05:55:15] *** Joins: ferdna (~ferdna@user/ferdna)
[06:02:58] *** Quits: Atlas667 (~Atlas667@193.27.12.10) (Read error: Connection reset by peer)
[06:04:56] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[06:06:44] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[06:06:56] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[06:23:21] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[06:40:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:00:59] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:04:53] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:58:14] *** Joins: geistes (~geistes@2600:100c:b031:4516:5b85:9d3f:e3b1:e648)
[07:58:38] <geistes> Hi guys, I'm having issues with a program I made. It compiles, but execution results in a segmentation fault.
[07:58:50] <geistes> Is anyone online right now? I'd really appreciate the help
[08:03:29] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 265 seconds)
[08:05:52] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3086:126b:ad23:6938)
[08:05:52] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3086:126b:ad23:6938) (Changing host)
[08:05:52] *** Joins: skapata (~Skapata@user/skapata)
[08:09:54] <RandomReader> this would be a good time to use a debugger .. what are you using for tools?
[08:11:26] <geistes> I am using codeblocks with gcc and gdb
[08:12:04] <geistes> I have narrowed down the bug. Something either in the vector of the .cpp file is not working, or something in the stringTokenizer function in the .h file isn't working
[08:12:08] <geistes> I think it is the former
[08:13:09] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[08:14:25] <RandomReader> not familiar with codeblocks, but in general, it should provide some fairly common options for debugging
[08:15:03] <RandomReader> one to start the program with the debugger attached, which may take a bit longer but should run normally until it crashes, at which point it should show you where that is in the form of a call stack
[08:15:26] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[08:15:45] <RandomReader> if that call stack is in your own code, then it should be highlighting the area where it failed .. if not, then you should be able to see your code somewhere in the call stack, and can click on that to have it take you there
[08:16:03] <RandomReader> and you'll at least know what part of your code triggered the failure (which may be different than what *caused* it, but it's a starting point)
[08:16:19] <RandomReader> it's also fairly typical to be able to then hover over e.g. variables nearby and have it show you the values
[08:16:27] <RandomReader> and/or have a window/panel displaying them
[08:18:08] <RandomReader> a working debugger is far easier to dig through, but another option would be to just scatter    std::clog << "got here! and the value of foo is " << foo << '\n';      lines around to help you narrow it down
[08:22:18] <RandomReader> you can also post the code somewhere and I'll take a look
[08:22:30] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 265 seconds)
[08:25:42] <RandomReader> wandbox.org supports multiple files by hitting the plus button along the top tab bar
[08:26:22] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[08:32:19] <geistes> I fixed some of the issues with it. I will keep working on it to complete it
[08:32:27] <geistes> Thanks for the advice, RandomReader!
[08:34:58] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:41:21] <RandomReader> ok, welcome!
[08:44:22] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[08:44:22] *** internalsplit_of is now known as givemeyourpies
[08:44:22] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[08:44:44] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[08:48:53] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[08:49:18] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:50:18] *** Joins: seninha (~seninha@user/seninha)
[08:51:56] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[08:52:35] *** Joins: malloy (~jimery@116.30.222.115)
[08:55:02] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[08:55:38] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[09:01:07] <ent58> Does C++ offer anything like a guarantee about code behavior, given certain constraints? For example...if you write a function that has no linkage requirement style side effects (only writes to/reads from data passed to that function via pointer or local variables), does this guarantee that it is safe to use in it a position independent, generated
[09:01:07] <ent58> context?
[09:03:04] <RandomReader> the answer is probably "no", the C++ standard simply says what observable outcome will result from defined operations, but what do you mean by "position independent, generated context"?
[09:03:11] *** Joins: reumeth (~reumeth@user/reumeth)
[09:06:00] <ent58> My little trial example involves compiling such a function, and generating assembled instructions for it without any formatting (binary output with no object format). Then I'd take those instructions and load them anywhere (W^X protections notwithstanding on platforms that strictly don't allow it) and have a function pointer to it.
[09:06:46] <ent58> Is there some combination of the way you could write this function that makes it "defined behavior", or will it always be subject to undefined behavior in some fashion?
[09:07:57] <RandomReader> oh, that'd depend entirely on the compiler, wouldn't be a language trait
[09:08:20] <ent58> hmm
[09:08:26] <RandomReader> I'm not aware of any guarantees like that made by production compilers out of the box, but there are probably some research projects at least, and there's also LLVM
[09:08:51] <RandomReader> which is designed for the usual compilation, static and binary analysis tools, and JIT
[09:09:02] <RandomReader> so it certainly has the controls, you just may need to customize things
[09:09:57] <RandomReader> how *much* customization I don't know, but it'd be worth asking those folks
[09:10:54] <ent58> Yeah, I think my intent was to not have to rely deeply on compiler internals to make that guarantee...while the little example works everywhere I've tested it, the main idea behind this is to have a statically-analyzable set of function duplicates compiled in this fashion that get what amounts to a "diff" treatment and become swappable at runtime
[09:11:36] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 245 seconds)
[09:12:06] <ent58> The only other way I've really wanted to do something like this is by creating a language feature, and that's a can of worms
[09:13:51] <ent58> I can see it working on a small scale, and then the compiler optimizes as it's allowed to do across TU's and breaks something
[09:14:18] <ent58> Thanks for pointing me in the right direction!
[09:14:40] <RandomReader> it sounds similar to the constraints that JITs and some recent "edit and continue" or "hotswap debugging" work is under
[09:15:07] <RandomReader> so not sure exactly what's available, but should be something
[09:15:10] <RandomReader> welcome
[09:21:32] *** Quits: geistes (~geistes@2600:100c:b031:4516:5b85:9d3f:e3b1:e648) (Ping timeout: 240 seconds)
[09:22:32] *** Joins: geistes (~geistes@2600:100c:b031:4516:5b85:9d3f:e3b1:e648)
[09:24:48] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 268 seconds)
[09:25:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:26:03] <smallville7123> is ostream seeking mainly used for FILE streams?
[09:26:12] <ent58> I'm looking, but yeah.  This would fall under making C++ have the capability to do something akin to "RNT", so rather than JIT you've got right-now-time.
[09:27:03] <ent58> that would be ofstream smallville7123
[09:27:33] <smallville7123> yea, would seeking be mainly used for ofsteam
[09:27:38] <smallville7123> yea, would seeking be mainly used for ofstream *
[09:28:02] <smallville7123> or would there be other uses for it outside of *fstream ?
[09:28:34] <ent58> I think that particular standard library abstraction is kinda just for file I/O
[09:28:57] <ent58> but the concept of a stream and seeking can be applied to pretty much anything, if that's what you mean
[09:29:55] <smallville7123> the only other use i can think of would be memory streams
[09:30:05] <smallville7123> eg a file in-memory being constructed
[09:30:44] <ent58> it depends on how far up the chain you want to operate, like if you're abstracting a network buffer or IPC through a pipe, etc
[09:30:58] <smallville7123> yea
[09:32:02] *** Quits: Brewster (~Brewster@104.145.226.5) (*.net *.split)
[09:32:02] *** Quits: cncr04s (~cncr04s@afxr.net) (*.net *.split)
[09:32:02] *** Quits: sonic (~sonic@user/sonic) (*.net *.split)
[09:32:02] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[09:32:02] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (*.net *.split)
[09:32:03] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[09:32:03] *** Quits: raekye (~raekye@creatifcubed.com) (*.net *.split)
[09:32:03] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[09:32:03] *** Quits: undeclared (nullx@user/undeclared) (*.net *.split)
[09:32:03] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[09:32:03] *** Quits: Dijky_ (~Dijky@user/dijky) (*.net *.split)
[09:32:03] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[09:32:03] *** Quits: comrad (~quassel@holarse/comrad) (*.net *.split)
[09:32:03] *** Quits: mattgirv (quassel@apps.fossgalaxy.com) (*.net *.split)
[09:32:03] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[09:32:03] *** Quits: nolyc (~nolyc@tinodidriksen.com) (*.net *.split)
[09:32:03] *** Quits: tobs (~tobs@taboege.de) (*.net *.split)
[09:32:03] *** Quits: zinc (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[09:32:09] *** Joins: cncr04s (~cncr04s@afxr.net)
[09:32:10] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[09:32:12] *** Joins: tobs (~tobs@taboege.de)
[09:32:18] *** Joins: Brewster (~Brewster@104.145.226.5)
[09:32:35] *** Joins: comrad (~quassel@holarse/comrad)
[09:32:35] *** Joins: sonic (~sonic@c-76-108-224-224.hsd1.fl.comcast.net)
[09:32:44] *** Joins: raekye (~raekye@creatifcubed.com)
[09:32:48] *** Joins: urdh (~urdh@user/urdh)
[09:32:52] *** Joins: dextaa (~DV@user/dextaa)
[09:32:56] *** Quits: sonic (~sonic@c-76-108-224-224.hsd1.fl.comcast.net) (Signing in (sonic))
[09:32:56] *** Joins: sonic (~sonic@user/sonic)
[09:33:01] *** Joins: undeclared (nullx@user/undeclared)
[09:33:03] *** Joins: Dijky (~Dijky@user/dijky)
[09:33:06] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[09:33:26] *** Joins: deepy (deepy@user/deepy)
[09:33:32] *** Joins: nolyc (~nolyc@tinodidriksen.com)
[09:33:34] *** ChanServ sets mode: +v nolyc
[09:33:40] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[09:34:18] *** Joins: mattgirv (quassel@apps.fossgalaxy.com)
[09:34:45] *** Joins: CoderCharmander (~CoderChar@2A001110013ACA8A00000049936DC301.mobile.pool.telekom.hu)
[09:36:19] *** Joins: Spydar007 (~spydar007@user/spydar007)
[09:36:24] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (*.net *.split)
[09:36:24] *** Quits: mathu (~matt@user/mathu) (*.net *.split)
[09:36:24] *** Quits: Ameisen (~ameisen@137.184.136.18) (*.net *.split)
[09:36:25] *** Quits: tm604 (~tm604@perlsite.default.entitypark.uk0.bigv.io) (*.net *.split)
[09:36:25] *** Quits: markand (~markand@markand.fr) (*.net *.split)
[09:36:32] *** Joins: mathu (~matt@user/mathu)
[09:36:38] *** Joins: markand (~markand@markand.fr)
[09:37:06] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[09:37:11] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:308e:319e:975d:7c7a)
[09:37:19] *** Joins: xisop (~xisop@bnull.net)
[09:38:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:38:49] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[09:38:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:38:53] *** ChanServ sets mode: +v npaperbot
[09:40:27] *** Quits: mattgirv (quassel@apps.fossgalaxy.com) (Ping timeout: 256 seconds)
[09:40:58] *** Joins: mattgirv (quassel@apps.fossgalaxy.com)
[09:41:56] <smallville7123> i dont wanna rewrite my UI library for the 5th time ;-;
[09:42:01] *** Quits: geistes (~geistes@2600:100c:b031:4516:5b85:9d3f:e3b1:e648) (Ping timeout: 245 seconds)
[09:42:51] <ent58> what type of UI is it
[09:42:56] <smallville7123> 2D
[09:43:04] <smallville7123> and 3D
[09:43:38] <ent58> Vulkan?
[09:44:37] *** Quits: CoderCharmander (~CoderChar@2A001110013ACA8A00000049936DC301.mobile.pool.telekom.hu) (Remote host closed the connection)
[09:45:41] <smallville7123> OpenGL
[09:48:21] <ent58> There is a place in my heart for OpenGL
[09:50:44] *** Joins: geistes (~geistes@2603-8080-f000-e5bc-0000-0000-0000-0136.res6.spectrum.com)
[09:51:09] <geistes> What would be the best way to compare two strings?
[09:52:16] <geistes> I've created a function which carries out a binary search on an array, but I must have done the comparison part wrong because it returns false even when I type the search string the same as one which is present in the array.
[09:52:57] *** Joins: pulse (~pulse@user/pulse)
[09:52:59] <ent58> I don't know if C++'s standard string handling does this, but probably a naive cache-friendly approach is going to be best dependent on the length of the strings being compared
[09:53:20] <geistes> that's a really good idea.
[09:53:22] <ent58> I've made a small custom vector instruction AND
[09:53:27] <geistes> I could just do strlen on them
[09:54:15] <ent58> well length checks are a given first, but then if all you need to know is equality, a large vector AND does the trick
[09:54:46] <InPhase> ent58: xor not and.
[09:56:00] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:57:16] <ent58> very right
[09:59:38] <ent58> you'd think staring at `vxorps` would not invoke and for the discussion but it did
[10:00:32] <InPhase> What the brain thinks at any particular time is not always what the brain sees.  :)  Hence was born code-blindness in debugging.
[10:01:27] <smallville7123> geistes: strlen and memcmp
[10:01:46] <smallville7123> first compare lengths and then memcmp
[10:02:47] <ent58> ^, and usually memcmp will do exactly that kind of large compare if the compiler deems it worthy
[10:06:16] <InPhase> Is there any reason to thing the operator== on std::string is not already optimal for exactly what it's supposed to be doing?
[10:07:02] <InPhase> Surely this has already been a closely fine tuned part of the stdlib.
[10:07:29] <ent58> there have been some hiccups with performance when it comes to larger datasets but I'd say you're right for 90% of the use cases you'd find
[10:07:53] <smallville7123> usually memcmp is implemented as optimized attembly as it needs only compare memory is X length and nothing else, no array looping and variable checking and others that std::string and strcmp may introduce
[10:07:54] <ent58> small string optmization + machine word/vector compare above a certain threshold
[10:08:20] <smallville7123> yea
[10:09:32] <ent58> well memcmp assumes an equal length array for each when it performs the comparison, but string op== will do the length compare for you, and internally might even use memcmp (since std::string isn't unicode aware) internally
[10:09:52] <ent58> I've never had too many issues....string views are incredibly useful if you don't need to construct the strings beforehand
[10:11:00] <ent58> There was a really good talk on the sharper corners of strings...cppcon I think
[10:11:53] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:15:22] *** Joins: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad)
[10:15:44] <smallville7123> https://stackoverflow.com/questions/21106801/why-is-memcmp-so-much-faster-than-a-for-loop-check and others are.. vauge
[10:17:02] <smallville7123> ent58: yes bit it MIGHT, meaning that it also might NOT
[10:17:21] <smallville7123> eg it may simply compare and hault at first \0
[10:18:06] <smallville7123> if the length of both strings are not known ahead of time then this would be fastest as it avoids looping over the memory twice
[10:18:15] <InPhase> This is C++.  If you can't trust the optimizer quite a lot, then the compiler is fundamentally broken given the language design.
[10:18:55] <smallville7123> otherwise if they are known (eg a cache of some kind) then a simple length check and memcmp will be faster
[10:19:31] <smallville7123> InPhase: he may be compiling with optimizations disabled
[10:19:51] <InPhase> Well then you don't get to complain about it being slow.  ;)
[10:20:02] <smallville7123> im not
[10:20:22] <smallville7123> im just saying that it could be slow depending on the implementation
[10:20:24] <InPhase> That's the royal you, not you specifically.
[10:21:14] <smallville7123> :)
[10:24:32] <ent58> InPhase: I think that "trust the optimizer" bit is something I've always wanted C++ to move away from in intelligent ways. Sort of like the jump to C++11, the entrance of guaranteeing things like RVO
[10:26:49] <ent58> adding things to the language that may not necessarily constitute new features, but solidify assumptions about the abstract machine it's compiling for
[10:27:33] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:29:15] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:29:28] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:30:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:32:05] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[10:32:06] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Client Quit)
[10:44:56] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[10:51:58] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[10:52:24] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[10:56:11] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[11:01:56] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[11:04:43] *** Joins: teepee (~teepee@openscad/teepee)
[11:04:48] *** Joins: frost (~frost@user/frost)
[11:07:47] *** Quits: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad) (Quit: Konversation terminated!)
[11:08:34] *** Joins: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad)
[11:09:51] *** Joins: AmR (~AmREiSa@156.199.223.24)
[11:09:55] *** Quits: chozorho (~chozorho@2601:146:300:c30::17a1) (Quit: good night)
[11:11:51] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Read error: Connection reset by peer)
[11:15:54] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[11:20:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:24:49] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[11:25:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[11:30:19] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[11:30:55] <hackinghorn> hi, if I create an overflow like `int x = 1 shl 32 - 2`, the compiler doesnt detect it, it just does constant folding. How do I detect this?
[11:31:11] <ville> hackinghorn: doesn't look like valid c++
[11:32:00] <ville> hackinghorn: there is no "the compiler". all have different capabilities.
[11:33:55] <ville> shl is shift left as in <<?
[11:33:59] <hackinghorn> So, here I tried both clang and gcc. They do constant folding and I cannot turn it off
[11:34:44] <hackinghorn> yeah I'm dumb, its <<
[11:34:48] <ville> what flags did you pass in?
[11:34:52] <hackinghorn> oh no I'm dumb
[11:34:55] *** Quits: Spirit532 (~Spirit532@178.127.124.22) (Ping timeout: 256 seconds)
[11:35:01] <ville> !give hackinghorn -Wall
[11:35:02] <nolyc> hackinghorn: -Wall is is only -Wsome; it leaves out many warnings. To really get a lot of warnings, you should use '-Wall -Wextra -Wpedantic -Wconversion -std=c++17 -O2'
[11:35:15] <hackinghorn> I mean to write 2147483648 which is 2^31
[11:35:43] <hackinghorn> ahh thankss
[11:36:12] *** Joins: luizfrds1 (~Luiz@152.250.243.147)
[11:36:15] <ville> hackinghorn: usually it's better to have an actual testcase and not paraphrase things, because the smallest error or omission may prevent us from understanding the real situation
[11:39:13] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 265 seconds)
[11:39:37] <ville> hackinghorn: http://coliru.stacked-crooked.com/a/d92b3ff88556db65 yours included
[11:40:55] <hackinghorn> ville, thankss, thats great
[11:42:00] <ville> hackinghorn: first you gave us something not c++ and second if fixed to use << it didn't have an overflow like you claimed because of precedence for << and -
[11:42:20] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[11:43:20] <hackinghorn> ehh, sorry
[11:44:05] <ville> just pointing these out that it's clear that it's very easy to make small mistakes when paraphrasing even a "simple" expression on irc
[11:44:41] <ville> as far as your makefile question that's "yes" you can spawn a cmake process from a makefile. just like any other process
[11:46:14] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[11:53:14] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[12:01:05] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[12:05:58] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:06:18] *** Joins: andreasbuhr (~quassel@p548ddf1c.dip0.t-ipconnect.de)
[12:07:38] *** Joins: Simplar (~Simplar@188.163.92.225)
[12:10:48] *** Joins: Spirit532 (~Spirit532@mm-254-35-84-93.mgts.dynamic.pppoe.byfly.by)
[12:12:18] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:20:39] <geistes> If I have declared an iterator as the result of the 'find' method, can anyone tell me how to then get the value of that iterator, or convert it to an int?
[12:21:19] <geistes> Basically, I have a vector which the user can search, but I also want to then be able to change things at the index in which the user's search was found. I'm currently unable to do this.
[12:23:02] <ville> you can get to the value iterators "point to" same as with pointers
[12:23:14] *** Quits: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad) (Quit: Konversation terminated!)
[12:23:25] <LordKalma>  foo = find(....); index = foo - begin(); value = *foo; // just that
[12:23:48] <ville> (pointers satisfy various iterator concepts, that is they are also iterators)
[12:24:18] *** RazielZ is now known as Raziel
[12:27:41] <geistes> I tried both of those things before asking, but I get an error
[12:28:31] <geistes> here's the error I get: https://ghostbin.com/M3R6N
[12:28:40] <geistes> I even tried casting as an int
[12:29:19] <LordKalma> !give geistes testcase
[12:29:20] <nolyc> geistes: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[12:29:29] <LordKalma> (we also accept godbolt/compiler explorer)
[12:30:54] <Raziel> and bribes. we accept bribes.
[12:31:22] <LordKalma> with enough money we can make whatever you want to compile
[12:32:21] <Raziel> might take a bit of time too, though.
[12:33:07] <LordKalma> I didn't mean we make it. I mean we make it build. Modify the compilers around whatever you wrote
[12:33:45] <Raziel> well yeah, but that does take a bit of time
[12:34:08] <geistes> https://wandbox.org/permlink/jlB1ZMDbmpvYd8ph
[12:34:19] <geistes> Before clicking, read the following:
[12:34:33] <Raziel> too late
[12:34:35] <geistes> The code is a work in progress
[12:34:35] <Raziel> clicked already
[12:34:38] <geistes> lol
[12:34:51] <geistes> The part I need the most help with is line 90 of the main file
[12:34:54] <Raziel> that is *not* a _least_ amount of code that replicates your problem, but okay
[12:34:56] <ville> geistes: testcases are not "all of your code"
[12:35:01] <geistes> that's the part that gives errors
[12:35:13] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[12:35:21] <ville> geistes: their purpose is to get you to think what is the actual problem when you recude them to least amount
[12:35:27] <ville> reduce
[12:35:53] <geistes> The manner in which that snippet is implemented relies on some of the header file
[12:35:57] <ville> geistes: that means removing unneeded lines, types, functions, includes and so on
[12:36:13] <geistes> It was easier to specify which part of it was the problem then removing unused parts
[12:36:14] <Raziel> vector <string>::iterator i; < don't do that
[12:36:25] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[12:36:42] <geistes> Yeah, that was very tentative and not final. Besides the naming, what would you suggest fixing?
[12:36:52] <ville> geistes: it's not about what's easier for you, it's what's easier for us. and get you to think what the real problem is
[12:37:22] <Raziel> geistes, you can't do maths on iterators of different (types of) vectors
[12:37:36] <Raziel> you're doing maths between the iterator of a vector of string and the iterator of a vector of books
[12:37:42] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[12:37:59] <ville> Raziel: stop enabling people not doing proper testcases
[12:38:00] <Raziel> use a map
[12:38:04] <Raziel> ville, sorry :p
[12:38:47] <Haohmaru> antitestcasers
[12:39:03] <geistes> I'll post the test case
[12:39:15] *** Joins: robod34 (Username@79.113.195.239)
[12:41:44] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[12:41:47] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[12:41:54] <Raziel> geistes, I didn't mean the naming when I said don't do that, I meant the pre-declaration of a specific iterator. just auto it where you need it plz :p
[12:42:24] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 256 seconds)
[12:44:25] <Raziel> anyway, the whole... database-type thing you're trying to make there, depending on same-index for three different lists, is a bit faff
[12:44:53] <Raziel> design-wise, I mean.
[12:45:07] <geistes> https://wandbox.org/permlink/QEB2maNdSuIoWxSj
[12:45:36] <Raziel> <Raziel> geistes, you can't do maths on iterators of different (types of) vectors
[12:45:54] <Raziel> but good job on the testcase, it's slightly better :D
[12:45:57] <geistes> How would you suggest going about it? I was trying to make it so that I get the functionality down first, then polish the design
[12:46:45] <Raziel> if you only wanted to search your database thingy by one key, you could easily just make it a map. but since you have two keys that you wanna be able to search by (title and isbn), it's a bit more problematic
[12:46:45] <geistes> Would you suggest doing away with the vector of type string?
[12:47:06] <geistes> Because, with this design, I would need a vector of books
[12:48:29] <geistes> Yeah, that's kind of what threw me off with the implementation
[12:48:48] <geistes> So I ran with it anyway and I just declared two vectors. One for titles and one for ISBNs
[12:50:22] <Raziel> if you can guarantee that all those vectors of yours do have the same numbers of elements at all times, and they are indeed associated correctly by same-index (order), then just get your index by doing maths on the same vector you did your find on
[12:50:24] <Raziel> https://wandbox.org/permlink/YgWbjGM4wxJljeer
[12:51:04] <Raziel> i - titles.begin instead of i - books.begin
[12:51:28] <geistes> Ok, that makes a lot more sense
[12:51:32] <geistes> Thank you so much
[12:54:28] <Raziel> since i is an iterator of the titles vector, any maths you do with it should be relative to the titles vector
[12:54:37] <Raziel> not the books one or the isbn one or any other vector :p
[12:54:58] <geistes> Yeah, this was a rather noobish oversight on my part.
[12:55:25] <geistes> I cranked all of this out and started getting tunnel-vision after a while lol
[12:55:58] <Raziel> yeah that tends to happen quite a bit
[12:56:08] *** Joins: johnny (~johnny@user/johnny)
[13:00:09] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[13:07:36] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:14:01] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:14:08] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[13:15:24] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:15:51] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[13:16:13] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:20:52] <LordKalma> geistes, any half decent IDE-ish setup would have warned you of that
[13:20:59] <LordKalma> people underestimate their IDEs
[13:22:20] <ent58> I feel like using an IDE for that offloads an important responsibility for the compiler to manage, unless you mean like a convenience feature or something
[13:22:43] <LordKalma> what I mean is the convenience of having you IDE squiggle the lines for you
[13:22:48] <LordKalma> so you fix it before building
[13:22:58] <LordKalma> also, if you use like clangd, as I do, you're using a compiler :p
[13:23:26] <ent58> I use vim and a terminal
[13:23:32] <ent58> lol
[13:23:34] <LordKalma> honestly with a good IDE setup, I very rarely have any compilation problems
[13:23:38] <Raziel> I use visual studio and clang-tidy on top
[13:23:39] <ville> ent58: you can still get it to do that functionality
[13:23:45] <Raziel> :p
[13:23:48] <LordKalma> yap, VIM supports LSPs
[13:24:05] <LordKalma> Sure, I make dumb semantic bugs like everybody else. nasty runtime errors, sure
[13:24:09] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:24:16] <LordKalma> but build-time errors, with  clangd... really rare
[13:24:25] <LordKalma> really only when writing templates because those can't be checked
[13:25:05] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[13:25:08] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[13:25:40] <Raziel> I think the only kind of errors that I've not seen caught in the editor on my setup are... subtle template issues. Like me trying to shove 5 into a vector of int8_t without explicitly casting the 5
[13:27:42] *** Joins: plastico (~plastico@neomutt/plastico)
[13:28:39] *** Joins: Burgundy (~yomon@79.115.213.171)
[13:29:01] <PJBoy> writing code without an IDE ain't so bad
[13:29:13] <LordKalma> sure
[13:29:14] <PJBoy> changing code is where IDE comes in real handy for me
[13:29:15] <LordKalma> it just helps
[13:30:00] <Raziel> I feel like the usefulness of an IDE is higher the bigger the project you're working on is
[13:30:06] <Haohmaru> i want my syntax highlight
[13:30:13] <PJBoy> it is
[13:30:20] <ent58> I do that by scaling the detail of my documentation
[13:30:39] <LordKalma> you're hardcore, we get i t
[13:30:41] <Haohmaru> and the "go to declaration" "go to definition" "find all references to XYZ" ..
[13:30:46] <LordKalma> the manliest man to ever write code
[13:30:50] <ent58> LOL
[13:31:13] <Raziel> LordKalma, surely a manly man wouldn't write any documentation
[13:31:21] <PJBoy> vim has youcompleteme or whatever
[13:31:23] <PJBoy> it's IDE-esque
[13:31:33] <Haohmaru> vim is for h4x0rz
[13:31:39] <PJBoy> it does the clangd LSP thing
[13:32:12] <ent58> LordKalma: no, and there's an argument to be made that I'm wasting time, but I think it's more about the sustainability long term without requiring an IDE
[13:32:19] <ent58> that seems like an odd mental requirement but it's there
[13:32:34] <LordKalma> i'm just messin :)
[13:32:56] <LordKalma> if this was #include<c++> I was already banned haha
[13:33:01] <Raziel> what about the sustainability long term without requiring a computer? :^)
[13:33:06] <ent58> I love lightweight build deployments
[13:33:16] <ent58> Raziel: don't give me nightmares
[13:38:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:38:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:38:53] *** ChanServ sets mode: +v npaperbot
[13:39:27] <Haohmaru> !fact
[13:39:28] <nolyc> Haohmaru: A prvalue of an integer type can be converted to a prvalue of another integer type.
[13:41:01] *** Joins: xkuru (~xkuru@user/xkuru)
[13:41:37] <ville> ent58: setting up your vim to do these things is orthogonal to requiring an ide
[13:42:47] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9d48:1520:34dc:be91) (Ping timeout: 265 seconds)
[13:43:12] <Haohmaru> that sounds like a geometric slap in the face
[13:43:55] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 265 seconds)
[13:44:42] <ville> ent58: i mostly use emacs and make-based projects day-to-day. i do have my emacs setup to do various convenience things. aside from the makefile generating compile_commands.json there's nothing else about the project and how its built that relates to the convenience features
[13:45:08] <ville> err projects and how they are built
[13:45:13] <LordKalma> do you use bear to get the compile commands?
[13:45:14] <ent58> you're right, and if the tooling is sustainably linked to the development of the language, like as a requirement, that would completely eliminate any reason to not use it, but it's purely an exercise in...I don't know how to give it words
[13:45:18] <Raziel> when someone links a longer paste or something with issues that aren't obvious within a short amount of time, I just copypaste it in my IDE
[13:45:19] <Raziel> >_>
[13:45:31] <ent58> but see ville, you _use_ emacs
[13:45:33] <cbreak> I recommend cmake. It can generate those compile_commands.json too, and there are many IDEs that either integrate into it, or cmake can integrate into.
[13:45:40] <ent58> ew, tup
[13:45:42] <LordKalma> Raziel, I'm with ville on that one and just don't read bem
[13:45:53] <Raziel> LordKalma, well, that too.
[13:46:14] <LordKalma> cbreak, remember "<nolyc> <ville> don't believe the cmake propaganda. make is fine"
[13:46:28] <ent58> and tup is for when you need a better amek
[13:46:29] <cbreak> I don't believe.
[13:46:29] <ent58> make*
[13:46:31] <cbreak> I know.
[13:46:32] <ville> ent58: it works out the same whether it's emacs, vim, or many other editors these days. having the compile_commands.json output is the key
[13:47:14] <ent58> wait I didn't fully grasp that, compile_commands.json? do you mean to say your emacs setup puts the compilation process into _json_?
[13:47:24] <ent58> and runs that in something else?
[13:47:28] <ville> ent58: the makefiles do
[13:47:28] <LordKalma> no
[13:47:40] <ent58> ooh.
[13:47:52] <LordKalma> it's called a "compilation database"
[13:47:58] <LordKalma> cmake/make/whatever generates it
[13:48:02] <LordKalma> and clangd reads it
[13:48:11] <LordKalma> to provide the "intellisense" support
[13:48:11] <ent58> gotcha
[13:48:19] <ent58> okay that's yeah
[13:48:24] <ville> ent58: various tooling related to c++ then eats that compile_commans.json to be able to process the source code of your project
[13:48:29] <cbreak> ent58: it contains information about how the compiler is invoked, and the linker
[13:48:37] <ville> err compile_commands.json
[13:48:42] <ent58> I see I see
[13:48:46] <cbreak> to communicate include path, macros, libraries that are linked, and so on
[13:49:17] <ville> ent58: because to understand c++ source code you need to have captured things such as any defines in effect at the time of compiling
[13:49:27] <cbreak> vscode uses it too, so it seems to be somewhat multi-platform
[13:50:25] *** Joins: meicceli (meicceli@kapsi.fi)
[13:50:40] <PJBoy> clangd uses it
[13:50:50] <PJBoy> I dunno that the VS Code intellisense thing uses it
[13:51:35] <ent58> You ever just want assembly language with a register allocator? me too
[13:52:09] <ent58> heh
[13:52:57] <LordKalma> PJBoy, it doesn't
[13:53:00] <ville> ent58: anyways my point was that you can setup your projects build system to help support these kinds of convenience features in a way that is not in any way editor or ide specific. it just has to spit out the compile_commands.json. but i guess you got it already
[13:53:11] <LordKalma> oh wait, no, it does
[13:53:27] <LordKalma> now that I think of it, you *can* set compile_commands.json on the c_cpp_settings.json of vscode
[13:53:35] <mort> https://p.mort.coffee/wOn.cc I don't understand this at all
[13:53:37] <ent58> I completely understand, and since I haven't looked into it, that gave me some insight...thanks
[13:54:05] <mort> when I run DEBUG=1 ./myprogram, it prints '1' is not '1', followed by 1 (corresponding to the (bool)dbg line) and 0 (corresponding to the strcmp(dbg, "1") line)
[13:54:19] <mort> I must be missing something obvious
[13:54:26] <mort> oh fuuuck
[13:54:36] <mort> I haven't used strcmp in a while, obviously it returns false when they're equal
[13:54:38] *** Joins: letto2 (~letto@188.25.118.240)
[13:54:40] <mort> nevermind, am stupid
[13:54:46] <ent58> ye I was just about to point that out
[13:54:52] <ville> it returns 0 for equal
[13:54:55] <mort> yeah
[13:55:10] * Raziel points and laughs
[13:55:15] <mort> feel free
[13:55:20] <Raziel> :p
[13:55:31] *** Quits: letto (~letto@86.120.85.133) (Ping timeout: 268 seconds)
[13:55:48] <ville> ent58: do you use make?
[13:56:23] <ent58> Tup
[13:56:45] <ent58> it's make-like, with automatic build dependency and a very convenient syntax
[13:57:26] <ville> ent58: ok, well i would presume it has some way to make it spit out the compile_commands.json then
[13:58:03] <ville> ent58: make really doesn't have a built-in feature for it, so as part of my build i do it through the general make rules
[13:58:29] <mort> I always use bear to generate compile_commands, you run 'bear -- make'
[13:59:49] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:00:59] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 252 seconds)
[14:01:18] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9d48:1520:34dc:be91)
[14:06:34] *** Joins: meicceli (meicceli@kapsi.fi)
[14:12:05] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[14:14:58] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[14:18:42] <Haohmaru> !fact
[14:18:43] <nolyc> Haohmaru: The filename dot-dot is treated as a reference to the parent directory.
[14:19:16] <Haohmaru> hm, i never thought of that, so what if you make a folder named ".."
[14:19:35] <ville> you can't?
[14:19:59] <Haohmaru> it's specifically forbidden?
[14:20:12] <Haohmaru> i know dots are allowed in folder names tho
[14:20:45] <ville> a file system entry with that name exists everywhere as far as i know
[14:20:54] <Haohmaru> oh
[14:21:06] <ent58> special node
[14:21:14] <Haohmaru> is it like a pointer to parent thing?
[14:22:33] <PJBoy> yeah
[14:22:38] <PJBoy> except for /..
[14:22:42] <PJBoy> there it's a pointer to self
[14:22:52] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[14:22:58] <ent58> no, /.. is a pointer to the metaverse
[14:23:07] <ent58> :P
[14:23:16] <PJBoy> hence / is the metaverse
[14:23:56] *** Joins: gehn (~gehn@user/gehn)
[14:26:20] <ville> perhaps searching the posix specification was a mistake...
[14:29:21] *** Joins: Colt (~Colt@user/colt)
[14:32:45] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:33:07] <PJBoy> I think . and .. aren't real in any way
[14:33:25] <PJBoy> 'cause there are some tools that don't accept relative paths like that
[14:35:06] <PJBoy> also in windows at least, you can use the \\?\ prefix to disable special path features, and that includes not interpreting . and ..
[14:35:08] <Haohmaru> i haven't done anything special in my CLI app and it accepts "..\file.xml"
[14:35:12] <PJBoy> thus allowing them to be used as real file names
[14:35:22] <ville> trying to search my posix spec what it has to say about .. but the fanastic pdf reader is still chugging a way at 100% of a core
[14:35:46] <Haohmaru> ville which pdf reader?
[14:35:50] <PJBoy> also TIL that \\?\ lets you exceed MATH_PATH limit
[14:35:55] <PJBoy> *MAX_PATH
[14:35:55] <ville> masterpdfeditor
[14:36:10] <Haohmaru> huh, haven't heard it, i use qpdfview
[14:36:17] <PJBoy> evince over here
[14:36:19] <Haohmaru> (only a viewer)
[14:36:45] <PJBoy> only PDF viewer that comes with a colour invert option
[14:36:55] <TinoDidriksen> https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_13 - "The special filename dot shall refer to the directory specified by its predecessor. The special filename dot-dot shall refer to the parent directory of its predecessor directory."
[14:38:18] <Haohmaru> PJBoy qpdfvew has invert colors
[14:38:34] <PJBoy> now that's a curious thing right there
[14:38:50] <Haohmaru> wasn't evince the gnome-ish default?
[14:38:56] <PJBoy> > If a pathname begins with two successive <slash> characters [...] implementation-defined behaviour
[14:38:58] <Haohmaru> coz i hated it
[14:39:08] <PJBoy> > although more than two leading <slash> characters shall be treated as a single <slash> character
[14:39:28] <ville> posix says empty directory contains dot and dot-dot
[14:40:53] <Haohmaru> "ls -la" lists both the . and the ..
[14:41:06] <PJBoy> yup
[14:41:29] <PJBoy> but I have to wonder if you can access . or .. if you talk with the file system directly
[14:41:43] <Haohmaru> how? ;P~
[14:42:04] <PJBoy> using the implementation defined double slash prefix :p
[14:42:23] <Haohmaru> i'm not gonna test that ;P~
[14:42:59] <ville> PJBoy: no such thing on posix
[14:43:22] <PJBoy> no such thing as which thing?
[14:43:32] <PJBoy> direct FS access?
[14:43:32] <ville> \\?\
[14:43:42] <Haohmaru> yeah that smells like crapdows
[14:43:46] <PJBoy> yeah on posix it would be //xxxyyy
[14:43:52] <PJBoy> for some implementatio defined xxxyyy
[14:43:55] <Haohmaru> there's also \\.\ for COM ports
[14:44:16] <PJBoy> I'm not saying it exists, but it's allowed by the spec
[14:44:18] <ville> PJBoy: why do you presume there is a posix counterpart for whatever windows thing it is
[14:44:34] <PJBoy> I'm not presuming that
[14:44:40] <PJBoy> you're presuming that
[14:44:50] <ville> then i don't know why you even brought it up
[14:44:58] <PJBoy> all I know is the spec says that double slashes are open to interpretation
[14:45:05] <PJBoy> and triple slashes are treated as single slashes
[14:45:16] <cbreak> multiple consecutive slashes are collapsed into one normally
[14:45:33] *** Joins: cursey (~cursey@user/cursey)
[14:45:42] <Haohmaru> cbreak yeah but iirc fstream::path doesn't
[14:45:50] <cbreak> and . in a path is collapsed away too
[14:45:59] <cbreak> Haohmaru: even if you ask for a cannonical one?
[14:46:04] <Haohmaru> so "/wub//dub" <- you have a folder in there with an empty name
[14:46:21] <Haohmaru> i don't remember the details but i had this "incident" already
[14:46:27] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[14:46:36] <cbreak> https://en.cppreference.com/w/cpp/filesystem/path says "     directory-separators: the forward slash character / or the alternative character provided as path::preferred_separator. If this character is repeated, it is treated as a single directory separator: /usr///////lib is the same as /usr/lib "
[14:46:51] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[14:46:56] <PJBoy> apparently the double slash thing on linux is a historical artifact of a time where //hostname/path was used to access network file systems
[14:47:14] <cbreak> and " Remove each dot and any immediately following directory-separator. "
[14:47:15] <Haohmaru> maybe i (ab)used the filesystem:: stuff incorrectly
[14:47:52] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:49:12] *** Joins: markong (~kvirc@213.146.188.203)
[14:51:38] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[14:56:59] *** Joins: Simplar (~Simplar@188.163.92.225)
[14:58:22] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[15:00:31] <Haohmaru> !fact
[15:00:32] <nolyc> Haohmaru: shared_mutex may be a synonym for shared_timed_mutex.
[15:04:39] <lpapp> hi, what do you use on Mac for OOP class diagrams, etc?
[15:05:10] <PJBoy> PlantUML
[15:05:42] <PJBoy> lots of stuff has plugins for it
[15:05:49] <PJBoy> and it has a web interface I think
[15:06:03] <lpapp> ah, it is also not free
[15:06:08] <PJBoy> it's GPL
[15:06:19] <PJBoy> about a free as you can get
[15:06:55] <lpapp> hi, what do you use on Mac for OOP class diagrams, etc? Is there a free app?
[15:07:02] <PJBoy> https://github.com/plantuml/plantuml
[15:07:25] <Haohmaru> i think doxygen can make diagrams
[15:07:27] <PJBoy> and yeah, it does have a web interface
[15:07:28] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 264 seconds)
[15:07:36] <PJBoy> so it's even more free than previously thought
[15:07:53] <PJBoy> it might even be the single most free program ever released
[15:08:10] <lpapp> actually, something having a web interface does not guarantee it to be free
[15:08:53] <lpapp> not a big lump sum, but seems to cost anyway: https://imgur.com/a/q8isv4o
[15:09:23] <lpapp> maybe cheaper than enterprise architect
[15:09:26] <PJBoy> what's that?
[15:09:58] <PJBoy> some random unofficial plantuml editor?
[15:10:40] <lpapp> no idea
[15:12:06] *** Joins: soman (~soman@83.139.147.234)
[15:12:51] <PJBoy> https://sourceforge.net/projects/plantuml/files/plantuml.jar/download download link
[15:13:23] <PJBoy> http://www.plantuml.com/plantuml/ online version
[15:13:52] <lpapp> online solutions are probably not the safest if you want privacy.
[15:15:14] <PJBoy> yeah probably
[15:15:27] <PJBoy> so I'd grab the offline version
[15:15:46] <mort> I'm reading https://gcc.gnu.org/wiki/cxx-modules, that's curious
[15:15:49] <PJBoy> I mean I personally only use it for confluence, so I use confluence's editor >_>
[15:16:05] <mort> apparently a module mapper can be a process which talks to gcc over ipv6, but not over ipv4
[15:16:31] <PJBoy> `-fmodules-ts` <-- this isn't old hat is it?
[15:16:43] <PJBoy> the C++20 modules are different than the TS modules
[15:17:39] <mort> well, this is the current GCC documentation on C++ modules
[15:19:09] <mort> maybe they named the option -fmodules-ts when it was first implemented, and then just kept the name
[15:19:43] <PJBoy> yeah I'm wondering that
[15:19:58] <PJBoy> all the code samples look fine
[15:20:35] <PJBoy> the page was made in 2017 and updated through to mid last year
[15:20:38] <PJBoy> so it could be either way
[15:22:28] <mort> the page talks in first person, about decisions "I" made while implementing support, which leads me to think it's more one implementer's notes rather than some "official" statement by the GCC project
[15:23:42] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[15:25:03] <PJBoy> that's all Nathan Sidwell
[15:25:13] <PJBoy> who wrote like 20 modules papers
[15:25:22] <PJBoy> guy knows his shit
[15:25:25] <mort> ah
[15:26:13] <mort> in that case, given "last edited 2021-01-18 16:30:20 by NathanSidwell" I'd guess it's all up to date at least as of the start of this year
[15:27:10] <PJBoy> that edit was to announce that that stuff was merged into GCC trunk
[15:27:50] <PJBoy> idk, it's probably up to day
[15:27:52] <PJBoy> date
[15:28:53] <PJBoy> in fact I think it might be a dual implementation
[15:29:07] *** Quits: soman (~soman@83.139.147.234) (Quit: Client closed)
[15:29:08] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[15:29:10] <PJBoy> because it mentions something about being used in "C++20 mode"
[15:29:36] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 265 seconds)
[15:29:54] *** Joins: JohnMS_WORK (~kvirc@185.73.229.242)
[15:32:01] *** Joins: CalamityBlue (~CalamityB@cpe-108-185-144-94.socal.res.rr.com)
[15:34:52] *** Joins: seninha (~seninha@user/seninha)
[15:34:53] *** Quits: CalamityToo (~CalamityB@cpe-108-185-144-94.socal.res.rr.com) (Ping timeout: 250 seconds)
[15:37:05] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:42:12] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[15:42:37] *** Joins: xkuru (~xkuru@user/xkuru)
[15:46:36] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[15:51:11] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:51:47] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:09:38] <mort> it's sad that I almost never end up being able to use string_view, because most of the time, I end up having to pass it to a C API
[16:12:04] <TinoDidriksen> You can do some nasty hacks that inject a temporary null if you trust your scoping and threading.
[16:13:34] <mort> it would be really useful to have a std::null_terminated_string_view, which can be converted to a char* but can't refer to some arbitrary span of a buffer
[16:15:01] <mort> but maybe at that point one might as well just use char*
[16:26:15] *** Joins: troller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[16:34:28] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[16:35:10] <Simplar> A text consists of 9600 characters. It's known there are total 400 of different characters. When it's saved in memory, symbol codes are recorded with least possible amount of bits. Someone discovered that this whole text can be represented as a sequence of disjoint pairs, with a total of k disjoint pairs in the text. Thus, someone tried to save the code of each pair recorded with least possible amount of bits for all pairs. As a result, the text,
[16:35:10] <Simplar> after being saved in memory, had its filesize reduced by exactly 4800 bytes. What is the minimum K making it possible?
[16:35:16] *** Joins: Leone (~Leo@216.154.50.172)
[16:35:24] <PJBoy> not a C++ question
[16:35:43] <Simplar> I mean, is it ever possible to brute this K by some algo?
[16:35:49] <Simplar> Or... is it #algorithms question?
[16:36:02] <PJBoy> it's possible to brute force basically anything
[16:37:40] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:37:41] <mort> try every k until you get a file that's reduced by 4800 bytes
[16:38:21] <mort> ^-- works if you start at the lowest possible value for k, it won't work if there's no lower bound to k
[16:38:32] <mort> I assume k has to be a natural number
[16:38:42] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:38:46] <mort> I didn't understand what K represents from the question
[16:52:52] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Ping timeout: 256 seconds)
[16:56:09] *** Quits: sauce (~sauce@omae.wa.mou.shindei.ru) (Read error: Connection reset by peer)
[16:56:27] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[16:57:17] *** Joins: sauce (~sauce@omae.wa.mou.shindei.ru)
[16:58:35] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:59:34] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[17:00:27] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[17:02:45] *** Joins: kylese (~kylese@p5dd8b8e5.dip0.t-ipconnect.de)
[17:06:49] <Haohmaru> smells like $homework
[17:07:15] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[17:08:28] <mort> it does
[17:20:12] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[17:26:28] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[17:29:58] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[17:30:47] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[17:38:40] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[17:38:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:38:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:38:54] *** ChanServ sets mode: +v npaperbot
[17:43:48] *** Quits: troller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Remote host closed the connection)
[17:46:39] <Simplar> One C++ question
[17:47:02] *** Joins: proller (~p@2a02:6b8:0:40c:bc0:572f:2e9f:7817)
[17:47:08] <Simplar> https://i.imgur.com/MAVTFPm.jpg Knowing R and C, is it possible to reverse this algo for calculating M?
[17:47:29] <mort> definitely homework; and that's not a C++ question
[17:47:53] *** Joins: reumeth (~reumeth@user/reumeth)
[17:49:28] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 264 seconds)
[17:51:00] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[18:02:26] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:02:33] <Haohmaru> !fact
[18:02:34] <nolyc> Haohmaru: The presence of parentheses does not affect whether the expression is an lvalue.
[18:06:15] <PJBoy> oh yeah?
[18:06:40] <PJBoy> << TYPE(f), TYPE(f()); int f() { return {}; }
[18:06:41] <geordi> lvalue int(), prvalue int
[18:06:44] <PJBoy> I call bullshit
[18:07:07] <mort> !fact
[18:07:08] <nolyc> mort: Annex [implimits] recommends lower bounds on the capacity of conforming implementations.
[18:10:28] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[18:11:14] <PJBoy> can't argue with that
[18:19:23] *** Joins: jkaye (~jkaye@2601:281:8300:7530:70fe:f118:dc91:2d9c)
[18:20:56] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[18:21:41] <LordKalma> PJBoy, I think the first !fact meant
[18:21:48] <LordKalma> << TYPE(f), TYPE((f)); int f() { return {}; }
[18:21:49] <geordi> lvalue int(), lvalue int()
[18:21:56] <LordKalma> << TYPE(f), TYPE((((((f)))))); int f() { return {}; }
[18:21:57] <geordi> Same output.
[18:22:33] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:26:47] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:32:12] *** night_wulfe_ is now known as night_wulfe
[18:33:33] <PJBoy> yeah I know what it meant
[18:35:26] *** Quits: JohnMS_WORK (~kvirc@185.73.229.242) (Ping timeout: 252 seconds)
[18:38:40] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Ping timeout: 264 seconds)
[18:47:44] <rpav> i swear qtcreator / designer has an issue where it doesn't properly detect a .ui file is in a changed state
[18:47:49] *** Quits: dld (~dld@98.217.187.57) (Ping timeout: 268 seconds)
[18:47:58] <LordKalma> is the file part of the project?
[18:48:05] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[18:48:12] <rpav> yea
[18:48:33] <lpapp> for template specialisation, the non-parameter templates are not affected and inherited from the generic declaration, like default values, right?
[18:48:36] <rpav> i mean at least, i can C-t and find it or whatever; it's a cmake project and the .ui file is part of the thing etc etc
[18:49:00] <LordKalma> and it's not rebuilding when you edit the file?
[18:49:13] <lpapp> in case of a function template, for example, where one parameter is template, the other is not.
[18:49:40] <Haohmaru> rpav externally modified?
[18:50:03] <rpav> nope, modified through qt creator
[18:50:19] <rpav> i changed it and i _thought_ i'd saved it, but it hadn't, and it didn't display a * next to the filename
[18:50:20] <Haohmaru> huh, lame then
[18:50:29] <rpav> _way_ later, it did
[18:50:37] <LordKalma> well, I'm waiting to rpav to explain how "not detecting state changed" really is affecting them
[18:50:38] <LordKalma> weird
[18:50:38] <rpav> LordKalma: well i'm not building using creator
[18:51:09] <LordKalma> if it's just detecting changes, idk then
[18:51:10] *** Joins: meator (~meator@user/meator)
[18:51:13] <LordKalma> never had that happen
[18:51:13] <rpav> but e.g. i built numerous times, verified it had no * next to the name, etc, but the build didn't exhibit the change until some time later
[18:51:15] <rpav> dunno
[18:51:51] <rpav> lpapp: "non-parameter templates"?
[18:52:25] <lpapp> rpav: yes, like e.g. foo<blah>(blah b, non_parameter_template npt);
[18:52:27] <rpav> like `template<> void foo<...>(...) { .. }` ?
[18:52:37] <lpapp> where foo declared npt to, I do not know, 0 for example.
[18:53:02] <lpapp> I guess it would be counter-productive not to inherit the default value for npt in the specialisation
[18:53:35] <lpapp> I will test it with a simple main.cpp
[18:54:38] <Haohmaru> i had this situation where i was modifying a header, rebuilding, and there was no effect.. of course it was because i was rebuilding the wrong project (both projects use this header, so editting and sh*t worked)
[18:55:02] <rpav> lpapp: oh, so a template type using the defaults .. i'm not sure what that would be inherited from otherwise though
[18:55:43] <rpav> but saying i'm half awake this morning is probably generous
[18:56:07] <rpav> Haohmaru: yea i even checked to see if i was modifying the right branch x.x
[18:56:27] <lpapp> rpav: yeah, I agree.
[18:56:38] <lpapp> with the inheritance, not the awake :)
[18:56:46] <rpav> i didn't even think it was a qt creator issue until i saw _later_ that the form became marked-modified; i thought something in the code was making the change
[18:57:09] <lpapp> I do not know why but QtCreator is really fishy on Mac for our project.
[18:57:14] <lpapp> I had to stop using it - it was awful.
[18:57:23] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:57:25] <rpav> but now i'm pretty sure there's some issue, because i _regularly_ have issues where i edit a form, and it's somehow not saved when i go to build .. before i thought i was just forgetting to save
[18:57:34] <lpapp> 1. syntax highlight and jumps 2. Breakpoints do not stop where they should.
[18:57:50] <lpapp> Maybe, I can fix it one day.
[18:59:26] <lpapp> Maybe, our project is too big for it to parse, or there is something funny going on working through big projects.
[19:01:17] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[19:01:20] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[19:03:46] <rpav> 2 is likely optimization being not -O0
[19:04:27] <lpapp> Sometimes, it stops, sometimes, it does not.
[19:04:32] <lpapp> It is really puzzling.
[19:04:38] <lpapp> And breakpoints work in lldb
[19:05:59] <LordKalma> * -Og for debugging
[19:06:44] <LordKalma> rpav, don't you have a message saying "this file can only be edited in the visual editor" or something?
[19:06:49] <LordKalma> I think that happens in QML
[19:08:05] <lpapp> our app is heavily threaded, not sure if that can also confuse the breakpoints for QtCreaotr.
[19:08:19] <LordKalma> unlikely
[19:09:08] <rpav> LordKalma: well if you try to edit the XML in creator's text editor i think it says that
[19:09:29] <rpav> ah yeah there's a banner at the top
[19:09:52] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[19:19:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:20:11] <LordKalma> lpapp, anyway, breakpoints happen at the next actually executed instruction
[19:21:17] <Haohmaru> sprinkle some asm NOPs
[19:21:42] <LordKalma> OORRRRRR debug in actual debug configurations
[19:22:03] <rpav> it sortof sucks to debug -O0
[19:22:28] <rpav> at least on some platform / in some situations
[19:22:35] <LordKalma>  -Og *please
[19:22:43] <rpav> ah right i always forget about that
[19:22:59] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[19:23:12] <Haohmaru> never forget the O g
[19:23:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:23:58] <LordKalma> https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#:~:text=off%20-fsemantic-interposition.-,-og,-Optimize%20debugging%20experience
[19:24:14] <LordKalma> "-Og completely disables a number of optimization passes so that individual options controlling them have no effect. Otherwise -Og enables all -O1 optimization flags except for those that may interfere with debugging"
[19:24:24] <LordKalma> " -Og should be the optimization level of choice for the standard edit-compile-debug cycle, offering a reasonable level of optimization while maintaining fast compilation and a good debugging experience"
[19:24:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:24:34] <rpav> i'm not sure why i don't have that enabled tbh
[19:24:48] <LordKalma> I think cmake uses -Og in the debug config?
[19:24:50] <rpav> other than i just forget it exists
[19:25:14] <rpav> it might not sure, i think RelWithDebInfo is -O2 though?
[19:25:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:25:48] <LordKalma> yeah, I think the default release[*] builds are -O2 indeed
[19:26:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:27:01] *** Quits: andreasbuhr (~quassel@p548ddf1c.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:27:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:28:13] <LordKalma> point is: debug on -Og
[19:28:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:29:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:29:50] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Ping timeout: 256 seconds)
[19:30:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:31:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:32:08] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[19:32:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:33:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:34:12] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[19:34:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:35:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:36:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:37:20] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[19:37:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:37:52] <Haohmaru> !fact
[19:37:53] <nolyc> Haohmaru: The only use of an identifier label is as the target of a goto.
[19:38:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:39:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:40:07] <LordKalma> unfortunately #pragma region doesn't work across all compilers
[19:40:11] <LordKalma> it's so useful
[19:40:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:41:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:42:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:43:47] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:44:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:45:23] <rpav> rant textual language rant rant
[19:45:47] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:46:15] <PJBoy> #pragma region is the thing for uh
[19:46:23] <PJBoy> affecting code folding in IDEs, right?
[19:46:27] <rpav> yeah apparently
[19:46:37] <PJBoy> in C++ you do that with #if 1 # endif
[19:46:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:46:51] <rpav> probably many cases can be auto-handled by a sufficiently-tweaked editor
[19:46:54] <rpav> or yeah hacks like that
[19:47:08] <rpav> #define 1 0
[19:47:19] <PJBoy> that god that's impossible
[19:47:23] <PJBoy> *thank
[19:47:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:47:57] <LordKalma> in python you can monkey patch addition and do amazing things like:
[19:48:29] <LordKalma> i = 0; __add__(a, b): i +=1; return a + b + i;
[19:48:31] <LordKalma> so
[19:48:44] <LordKalma> 1+1 = 3, but after that 1+1 = 4, etc etc
[19:48:45] <Alipha> PJBoy: while your sarcasm on << TYPE(f), TYPE(f()); int f() { return {}; } was lost on LordKalma, it was not lost on me, and i lol'd ;-)
[19:48:46] <LordKalma> really evil
[19:48:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:48:55] <PJBoy> ahaha I'm glad
[19:49:04] <LordKalma> yeah it went over my head I admit
[19:49:23] <PJBoy> also wow, you can overload built in addition in python?
[19:49:28] <LordKalma> sure
[19:49:29] <rpav> i thought it was just being pedantic about the english ;/
[19:49:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:50:18] <PJBoy> it was a malicious interpretation of the english, yeah
[19:50:20] <rpav> though i also wonder about the lvalue-ness of `f` in that case, which is probably where the joke is
[19:50:37] <rpav> ah k
[19:50:41] <Alipha> coincidentally, reading the backlog and seeing the !facts before them, i happened to be thinking, "i wonder if we have any !facts that aren't true because they're taken out of context"
[19:50:47] <rpav> what fun is english if not for malicious interpretation
[19:50:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:51:31] <PJBoy> well we wouldn't get to write stupid shit like "'You' refers to a person, business or Otherworldly Entity reading this legal document"
[19:51:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:52:06] <PJBoy> and have the lack of Oxford comma be a huge issue
[19:52:16] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[19:52:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:53:24] <rpav> ah, the sentence is speaking directly to the business or otherworldly entity reading this document
[19:53:42] <PJBoy> :D
[19:53:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[19:54:03] <PJBoy> god English is so stupid
[19:54:10] <LordKalma> https://youtu.be/anP1TU1vHbs?t=305 PJBoy watch from here
[19:54:14] <rpav> most things are
[19:54:17] <LordKalma> like 2 minutes
[19:54:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:55:13] <PJBoy> bruh
[19:55:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:56:15] <PJBoy> this guy's a good speaker
[19:56:30] <LordKalma> Powell gives the best talks, really
[19:56:31] <PJBoy> oh god
[19:56:49] <PJBoy> he showed source code to CPython
[19:57:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:57:02] <PJBoy> man that caught me off guard
[19:57:11] <PJBoy> going from beautiful python to vomit inducing C
[19:57:45] <LordKalma> hahaha the call is called `from __past__ import print_statement` for a reason
[19:57:51] <xkoncek> are Octrees suitable for gaames?
[19:57:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:58:03] <LordKalma> you're watching him explaining you can literally pip install changed to the cpython
[19:58:03] <ville> sure
[19:58:10] <LordKalma> and so what he did was
[19:58:20] <PJBoy> ahhh
[19:58:26] <LordKalma> "from __past__ import print_statement" work
[19:58:30] <LordKalma> to give a print statement to python 3
[19:58:35] <xkoncek> i thought i would dip my R-Tree
[19:58:40] <PJBoy> well god damn
[19:58:45] <LordKalma> it's an inner joke to the actual "from __future__ import print"
[19:58:57] <LordKalma> (av. in python 2)
[19:58:58] <ville> xkoncek: ..."games" is such a broad category that just about anything can be found to be suitable
[19:59:02] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:59:10] <PJBoy> I fully respect his use of the word "dadaist" too
[19:59:15] <xkoncek> "highly-dynamic environments"
[19:59:26] <PJBoy> you don't see it used much
[19:59:36] <LordKalma> PJBoy, I do recommend his talks when you're bored
[19:59:48] <PJBoy> yeah ok
[20:00:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:00:02] <PJBoy> 20 minutes is pretty stomachable
[20:01:03] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:01:23] <PJBoy> bahahaha
[20:01:37] <PJBoy> 8:30 in and he's like "I can see it on your faces, none of you care"
[20:01:58] <LordKalma> after that it's the actual demo of the talk title
[20:01:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:03:02] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:03:37] <ville> xkoncek: it is all case specific. how often do you insert vs query and how much data in total
[20:04:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:05:04] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:05:12] <ville> xkoncek: but sure octree is an option as an acceleration structure
[20:05:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:06:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:07:08] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:08:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:09:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:10:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:10:33] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:10:35] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[20:11:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:11:49] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[20:12:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:13:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:14:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:15:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:16:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:17:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:17:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (K-Lined)
[20:19:11] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[20:20:35] *** Quits: robod34 (Username@79.113.195.239) (Read error: Connection reset by peer)
[20:20:40] <Haohmaru> !fact
[20:20:41] <nolyc> Haohmaru: The stored instance is called the contained object.
[20:20:47] *** Joins: robod34 (Username@79.113.195.239)
[20:20:53] <LordKalma> that one could indeed use context
[20:21:12] <Haohmaru> i'm guessing std::vector maybe?
[20:21:36] <mort> the fact that nothing in C++ supports references makes raw pointers required in an uncomfortable amount of places
[20:21:52] <mort> I suppose I should stop worrying and embrace raw pointers
[20:23:17] <LordKalma> raw pointers are just fine
[20:23:25] <LordKalma> as long as you don't do ownership semantics with them
[20:23:39] <mort> yea but there's a lot of cases where references really feel more appropriate
[20:23:40] <LordKalma> after smart pointers there was this fetish that raw pointers were evil. They aren't
[20:23:48] <LordKalma> just, again, don't use them for ownership semantics
[20:23:49] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Read error: Connection reset by peer)
[20:23:59] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[20:24:11] <rpav> yeah .. raw pointers are _important_ alongside smart/owning
[20:24:15] <mort> > I want a function which takes a reference
[20:24:26] <mort> > oh but it has to be optional, must switch to pointers
[20:24:36] <mort> or > oh but it's only one of the possible values in this variant, must switch to pointers
[20:24:43] <Haohmaru> ah, optional reference argument
[20:24:49] <mort> optional, variant, anything
[20:24:53] <Haohmaru> i've done something like that, using a dummy instance
[20:25:15] <Haohmaru> default value for the reference argument was set to some dummy instance
[20:25:22] <mort> it just feels like C++ doesn't really support references
[20:25:28] <Haohmaru> true
[20:25:45] <Haohmaru> i want constexpr references at a specified address
[20:25:56] <rpav> using a default for a non-const T& parameter is silly/bad
[20:25:58] <LordKalma> speaking of that
[20:26:13] <LordKalma> PJBoy, I found out that adding symbols via the linker might actually not be UB
[20:26:29] <LordKalma> the standard says that you can link symbols from other languages
[20:26:31] <mort> callback function to an async operation which produces a string: '[](std::string &result)' -- this is obviously the right way to write this function signature
[20:26:59] <mort> callback function to an async operation which produces a string, but might fail: '[](variant<std::string *, Error> result)'
[20:27:18] <LordKalma> return std::string by value
[20:27:54] <mort> that's appropriate or not appropriate depending on context
[20:28:14] <LordKalma> anyway, I don't like outargs
[20:28:16] <LordKalma> this isn't C
[20:28:25] <mort> it's not an out parameter?
[20:28:31] <Haohmaru> rpav the point was, in the function i'd check whether the T& param happens to be the same as the dummy instance, then i know it was "not specified"
[20:28:34] <LordKalma> [](std::string &result) // yes it is?
[20:28:40] <Haohmaru> but that's an extra effort
[20:28:46] <mort> that's an input parameter
[20:28:54] <LordKalma> you mean the competion handler
[20:28:54] <LordKalma> sorry
[20:28:55] <mort> the callback gets a result
[20:29:02] <LordKalma> yes yes
[20:29:49] <rpav> Haohmaru: T* :p
[20:30:10] <LordKalma> callback function to an async operation which produces a string, but might fail: '[](optional<std::string> result, Error  err= Error::None)'
[20:30:13] <Haohmaru> i'm not afraid of pointers
[20:30:36] <Haohmaru> but i'm a fan of references
[20:30:37] <LordKalma> but now that you mention it...
[20:30:44] *** Joins: reumeth (~reumeth@user/reumeth)
[20:30:44] <rpav> doing T&=some_default is just a heavy/unsafe T* and nullptr check
[20:30:46] <LordKalma> how the fuck do you use exceptions in async code?
[20:30:55] <Haohmaru> rpav basically yes ;P~
[20:31:10] <Haohmaru> but i think it can be constexpr'ed
[20:31:21] <Alipha> mort: why the pointer? variant<std::string, Error>
[20:31:25] <rpav> LordKalma: probably like node where you have a .catch() or something
[20:31:32] <LordKalma> even javascript has .catch(...)
[20:31:39] <LordKalma> rpav, yeah, but does c++ have it?
[20:31:57] <rpav> i think C++ has the bare minimum of mechanics and if you want more you have to implement it
[20:32:20] <rpav> though i'm also not sure why you couldn't try { co_await .. } or whatever
[20:32:32] <LordKalma> you don't always co_await
[20:32:34] * rpav isn't sure what the syntax is
[20:32:47] <LordKalma> you sometimes just send the async code to go do something
[20:33:13] <LordKalma> but yeah, rpav, "C++ has the bare minimum..." really is how this language feels
[20:33:15] <rpav> you always need some kind of execution though?
[20:33:23] <LordKalma> you start at the stone age every time...
[20:33:33] <mort> Alipha: in my case I'm probably gonna not use a reference, it won't be too bad thanks to moves
[20:33:40] <mort> but there are cases where references would be more appropriate
[20:33:48] <LordKalma> rpav, well, you can just send an async function to go do something with a completion handler
[20:34:00] <LordKalma> https://github.com/ruilvo/radioamadorismo-website/blob/master/frontend/src/shared/repeaters.js#L10
[20:34:02] <rpav> i dunno .. starting with mechanics isn't terrible, since it doesn't predispose you to a bunch of crap, but
[20:34:02] <LordKalma> like this in JS
[20:36:00] <CarloWood> Bug in boost? I am pretty sure that const_pointer_cast should work according to the docs. https://wandbox.org/permlink/SBFH1J3WWmDCIrDc
[20:37:03] <CarloWood> Oh nm - it works if I pass `A const*` to intrusive_ptr_release and intrusive_ptr_add_ref.
[20:37:20] *** Joins: dld (~dld@2620:6e:6000:2900:4c8f:59ca:20e7:8c51)
[20:37:36] <CarloWood> Still pretty strange though.
[20:39:11] <Alipha> mort: std::variant<std::unique_ptr<Foo>, Error>, if it wasn't feasible or reasonable to move Foo itself, i'd say
[20:39:25] <mort> if you want to transfer ownership, yes
[20:46:00] <kaichiuchu> question
[20:46:10] <LordKalma> answer
[20:46:13] <kaichiuchu> is there really much of an alternative to the observer pattern when it comes to event handling
[20:46:18] <kaichiuchu> besides an event loop
[20:47:35] <rpav> callbacks, polling
[20:48:18] <LordKalma> callbacks is a generalized observer
[20:48:24] <kaichiuchu> i mean, I'm using asio for this networking application I'm working on and I have trouble escaping the conclusion that an observer pattern would be cool
[20:48:24] <rpav> really it all comes down to block or poll
[20:48:27] <LordKalma> pooling is basically an event loop hahah
[20:48:33] <rpav> LordKalma: i was literally typing that but i'm not sure
[20:48:38] <kaichiuchu> I was wondering if I could just get away with asio::post()
[20:48:59] <kaichiuchu> but for my purposes, that doesn't seem to be ideal
[20:49:00] <LordKalma> asio has very specific idioms you can use
[20:49:15] <LordKalma> like completion handlers with shared_from_this and crap like that
[20:49:26] <kaichiuchu> yeah honestly asio looks like crap to me
[20:49:35] <LordKalma> welcome to c++
[20:49:41] <kaichiuchu> but it's apparently "the" C++ networking library
[20:49:43] <kaichiuchu> because boost
[20:49:44] <kaichiuchu> .
[20:50:10] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:50:12] <LordKalma> https://www.youtube.com/watch?v=7FQwAjELMek
[20:50:13] <LordKalma> watch this
[20:50:21] <LordKalma> and you'll learn the patterns you need to learn
[20:51:13] <mort> I generally like event loops
[20:51:33] <mort> one loop which blocks until there's an event, then processes the event
[20:51:36] <kaichiuchu> event loops seem to be a better thing from a performance standpoint
[20:51:48] <mort> and honestly from a maintainability standpoint
[20:52:07] <rpav> it all depends
[20:52:20] <kaichiuchu> i dunno, for example right now I have a NetworkManager and I want it to have events such as "connection closed", "data received", "error occurred" etc
[20:52:58] <rpav> for instance in a game, the little UI i made will write values to variables, similar to how an imgui works
[20:53:35] <rpav> so if you're running in a loop in the game every frame _anyway_ and checking things, it saves a bunch of event loop processing to just write/check the variable (i.e. poll)
[20:53:56] <rpav> but if you're writing a regular app, polling every frame is an unnecessary expense
[20:56:25] <mort> well, yeah
[20:56:38] <kaichiuchu> the problem is I'm really not sure how to distribute those events across multiple components
[20:56:39] <mort> games are usually structured as an event loop but with non-blocking polling
[20:56:45] <LordKalma> so what you're saying is that "if you have a loop anyway, use it"?
[20:57:01] <xkoncek> does asio support coroutines already?
[20:57:52] <rpav> kaichiuchu: what are you actually doing? it sounds like you're a bit fuzzy on what you're trying to accomplish, on the middle-end
[20:58:05] <kaichiuchu> oversimplfiying it, IRC client
[20:58:21] <mort> I want herb-style pattern matching, I'm a bit tired of using std::variant
[20:58:22] <LordKalma> that sounds like a use case for strands
[20:58:29] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:58:45] <rpav> why do anything weird
[20:58:46] <kaichiuchu> i have an Instance class which handles events from the network
[20:58:57] <rpav> think about it in terms of the simple things
[20:59:07] <LordKalma> kaichiuchu, that talk is literally a chat application
[20:59:10] <LordKalma> so you really should watch it
[20:59:15] <kaichiuchu> LordKalma: i have it up
[20:59:22] <rpav> you presumably block on input (network events) and/or UI; if one or the other updates you juggle it off, no?
[21:00:00] <kaichiuchu> I just use io_context.run() which does block
[21:00:07] <rpav> so then you can reduce your question to something more specific, like "how do i get my UI to see incoming messages," or whatever
[21:00:58] <CarloWood> kaichiuchu: if you are only on linux, you can use my library. No blocking, 100% event driven, using a concept that I call "tasks" that are much like co-routines.
[21:03:58] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[21:04:14] <LordKalma> I wouldn't run the network in the same thread as UI
[21:04:38] <rpav> a sufficiently good UI could run single threaded :(
[21:04:48] <LordKalma> yes
[21:04:52] *** Joins: unyu (~pyon@user/pyon)
[21:04:53] <kaichiuchu> yeah I had hoped to put the network on its own thread
[21:04:55] <LordKalma> but in practice, I wouldn't, really
[21:05:01] <rpav> but yeah threads are an easy way to separate that crap and probably your easiest bet without trying to get like file descriptors from Qt or something
[21:05:14] <mort> I'm actually currently restructuring a program to run networking and UI on separate threads
[21:05:23] *** Quits: cq-work (~Z_Lund@user/cq-work) (Quit: WeeChat 3.3)
[21:06:04] <mort> they could be on separate threads no problem if there was a reasonable way to get a "you should redraw yourself now" callback
[21:06:26] <mort> but the way vsync is implemented, some functions just randomly block forever until the graphics driver thinks it wants another frame
[21:07:51] *** Joins: sysctl (~user@88.215.77.255)
[21:10:42] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:12:31] * CarloWood wonders why he is ignored when offering help.
[21:13:08] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[21:13:42] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[21:14:17] <RPNX> Question... any good TLS libraries using CMake standard conventions and modern C++ practices?
[21:14:50] <kalven> CarloWood: why people aren't immediately switching to your lib?
[21:14:51] <CarloWood> My library does that too. But you probably only want the TLS part.
[21:15:15] <RPNX> Which lib?
[21:15:21] <CarloWood> kalven: your intelligence is declining. Read the conversation again.
[21:15:38] <SuperNintendoSUX> lol
[21:15:55] <SuperNintendoSUX> it seems you got triggered when everyone ignored your lib
[21:16:15] <kaichiuchu> to be honest I'm really not interested in using anything other than asio
[21:16:19] <SuperNintendoSUX> :)
[21:16:27] <RPNX> I just joined, was that in response to me or some other convo?
[21:16:29] <kaichiuchu> plus, this application isn't just linux only
[21:16:32] <kaichiuchu> RPNX: someone else
[21:16:34] <kalven> CarloWood: or you can be courteous and answer the question. I saw someone talk about asio and then you mention your lib and then complain about being ignored.
[21:16:35] <RPNX> ah
[21:16:49] <kalven> so my question is - is that what prompted your comment, or was there something else?
[21:17:10] <RPNX> CarloWood's libary is an asio alternative?
[21:17:30] <CarloWood> RPNX: here is a test that uses TLS: https://github.com/CarloWood/ai-evio-testsuite/blob/master/src/tls_socket.cxx
[21:17:33] <RPNX> *library
[21:17:53] <CarloWood> Only if you are on linux. It is not cross platform.
[21:18:17] <RPNX> Well yeah I just want the TLS part not networking.
[21:18:30] <RPNX> I am working on a separate networking library.
[21:19:40] <SuperNintendoSUX> look for libsockets in github :)
[21:20:09] <RPNX> I only want TLS though not any networking stuff.
[21:20:15] <SuperNintendoSUX> you can rip it off
[21:20:25] <SuperNintendoSUX> I think it's modular
[21:20:25] <RPNX> Like Botan but not using a batshit crazy build system...
[21:21:06] <CarloWood> RPNX: I use wolfTLS under the hood ;)
[21:21:11] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[21:21:15] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:21:26] <kaichiuchu> i have no idea why you're pushing your library so hard.
[21:21:38] <RPNX> That's GPL 2 though
[21:21:44] <RPNX> My library is MIT
[21:22:39] <CarloWood> kaichiuchu: did we meet before? Show me where I am pushing it hard. I am not. I gave up long ago on other people being interested (their loss).
[21:22:40] <cbreak> kaichiuchu: supply chain attack?
[21:22:59] <kaichiuchu> cbreak: maybe
[21:23:39] <SuperNintendoSUX> with a bit of schizo talking
[21:24:00] <RPNX> As much as I don't like asio I don't think c++ streams are a good replacement for them lol
[21:24:10] <SuperNintendoSUX> CarloWood: I also write free libraries, so I know what means to be underappreciated :(
[21:24:41] <cbreak> asio is so much better than streams... it's not even in the same category
[21:24:48] <CarloWood> SuperNintendoSUX: underappreciated is an understatement when it comes to this channel.
[21:24:56] <RPNX> I guess I could try to fork botan to make a version with a less batshit crazy build system.
[21:24:59] <SuperNintendoSUX> well, it's a great channel
[21:25:05] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[21:25:41] <CarloWood> Now they are pretending that you the only existing interface is through iostreams.
[21:25:46] <RPNX> I am not sure about the code though. seems messy to me. heh.
[21:26:08] <CarloWood> What matters to me is that it is fast, robust etc.
[21:26:29] <cbreak> as long as readability and writability isn't important, asio should be ok
[21:26:32] <SuperNintendoSUX> iostreams ftw
[21:26:33] <CarloWood> anyway.. I'm going to do something useful again.
[21:26:54] <RPNX> AIQueueHandle // is this even a "handle"?
[21:27:19] <cbreak> a handle for an artificial intelligence queue
[21:27:29] <SuperNintendoSUX> (FEAR)
[21:27:44] <RPNX> I understand a "handle" as an RRO (resource referencing object), not an ARMO (automatic resource managing object)
[21:27:48] <CarloWood> Lets all bash Carlo bashed on seeing 10 lines of his code.
[21:27:53] <CarloWood> Clueless morons.
[21:28:01] <RPNX> it looks like the latter to me.
[21:28:12] <kalven> ugh
[21:28:31] <cbreak> does handle have that conotation?
[21:28:46] <SuperNintendoSUX> a handle is a handle
[21:28:48] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:6dc1:f15c:f052:6c31)
[21:28:49] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:6dc1:f15c:f052:6c31) (Changing host)
[21:28:49] *** Joins: skapata (~Skapata@user/skapata)
[21:28:53] <SuperNintendoSUX> semantics defined by the library owner ;)
[21:28:58] <cbreak> yeah.
[21:30:08] <RPNX> Hum, I suppose it can behave however. But Windows uses it exclusively to refer to RROs I think.
[21:30:26] <SuperNintendoSUX> well, you can destroy resources with handles
[21:30:58] <RPNX> The distinction is that RROs are like pointers whereas ARMOs do things in their destructor.
[21:31:17] <SuperNintendoSUX> so many bs acronyms...
[21:31:41] <RPNX> Well you can call it RAII or not-RAII
[21:32:25] <RPNX> Resource Acquisition Is Initialization is a much more descriptive acronym.
[21:32:31] <RPNX> </sarcasm>
[21:33:58] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:34:28] *** Quits: jkaye (~jkaye@2601:281:8300:7530:70fe:f118:dc91:2d9c) (Ping timeout: 264 seconds)
[21:34:56] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:38:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:38:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:38:54] *** ChanServ sets mode: +v npaperbot
[21:39:11] <LordKalma> scope-bound resource management, plz
[21:40:08] *** Joins: jkaye (~jkaye@2601:281:8300:7530:7309:f677:c771:6123)
[21:45:26] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:308e:319e:975d:7c7a) (Ping timeout: 268 seconds)
[21:46:46] <RPNX> I am not a fan of ASIO though for exactly that reason.
[21:46:51] <cbreak> RAII describes the less interesting side. DIRR, Destruction-Is-Resource-Release, is more interesting.
[21:47:15] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:853e:1440:14f7:dc92)
[21:48:25] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[21:55:57] <RPNX> well yes,
[21:56:02] <rpav> bah, SICC .. Scope Is Conveyed Custody
[21:56:11] <RPNX> ARMO encompasses both concepts though.
[21:57:18] <RPNX> Resesource Release Is Deinitialization?
[21:59:37] <rpav> Frame Uniformly Keeps Resource which is at _least_ as descriptive as RAII
[22:01:45] <PJBoy> RAII Acronym Is Initialised
[22:02:22] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[22:03:04] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Quit: Shutdown)
[22:05:04] *** Quits: proller (~p@2a02:6b8:0:40c:bc0:572f:2e9f:7817) (Ping timeout: 264 seconds)
[22:07:26] <epiktitos[m]> lol
[22:07:55] *** Joins: paul424 (~tom@ip-31-0-126-244.multi.internet.cyfrowypolsat.pl)
[22:09:07] *** Joins: Snyp (~Snyp@49.207.215.173)
[22:10:21] <RPNX> imo, boost::asio's design is highly problematic though.
[22:11:01] <RPNX> it has uh, some clear limitations.
[22:12:11] <Alipha> Praise: RAII Acryonym Is Idiotic
[22:12:15] <Alipha> eh
[22:12:27] <Alipha> PJBoy: RAII Acryonym Is Idiotic
[22:12:29] <Praise> Indeed, but I have nothing to do with it.
[22:12:29] <Praise> :D
[22:12:40] <PJBoy> yes
[22:12:43] <PJBoy> yes it is
[22:12:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:14:21] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:14:25] <RPNX> I prefer Automatic Resource Management Object, but people can use whatever they want I suppose.
[22:14:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:14:46] <Alipha> at least you can pronounce ARMO
[22:15:01] <cbreak> raiiiiiiiiiiii can also be pronounced
[22:15:10] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of quantum tunnelers at https://indiedevs.net/)
[22:15:27] <SuperNintendoSUX> raii is soundy :)
[22:15:28] <Alipha> yeah, you can pronounce RAII if you want to sound like a singer trying to find a note
[22:15:46] <cbreak> do re mi fa so raiiii?
[22:15:56] <Alipha> !grab cbreak
[22:15:56] <nolyc> Alipha: The operation succeeded.
[22:16:01] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:16:12] <cbreak> I usually call those things "owner"
[22:23:24] *** Joins: great_taste (~great_tas@190.32.235.20)
[22:31:16] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[22:33:44] <antto> cbreak, isn't that "sol"
[22:37:25] <RPNX> God I wish I was a faster programmer -.-
[22:37:39] *** Quits: Snyp (~Snyp@49.207.215.173) (Quit: Textual IRC Client: www.textualapp.com)
[22:39:31] * antto gives RPNX 12 RedBulls
[22:39:43] <RPNX> lmao
[22:43:49] *** Joins: QuaternionsRock (~Quaternio@76.191.39.82)
[22:44:40] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 264 seconds)
[22:45:19] <InPhase> RPNX: Generally, to program faster, make the computer do more of the programming.  Focus your efforts on scaling up abstraction hierarchies so that more gets done with each line and each thought you reason out.
[22:46:33] <rpav> generally to do something faster, do less of it to get your job done
[22:46:40] <InPhase> And then disconnect right before getting advice, that helps too.  :)
[22:46:43] <rpav> don't overthink it, write code and get it done
[22:47:09] <rpav> start with minimum core functionality .. which itself can be the hard thing to isolate .. but once that works, build from there
[22:50:41] <cbreak> to become a faster programmer, move all your time into debugging.
[22:51:22] <Alipha> Nah, you just need to get your typing speed up. I code at 80 wpm ;-)
[22:53:44] <cbreak> for me, typing speed is usually not the limiting factor.
[22:53:59] <cbreak> I often spend a long time thinking before even starting to type
[22:55:00] <InPhase> cbreak: I used to spend more time typing before I became a faster programmer, and now I spend more time thinking and type less.
[22:55:44] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[22:58:22] <Alipha> Indeed. What do they say? If you code 100 lines in a day it was a productive day?
[22:58:43] *** Joins: proller (~p@2a02:6b8:b081:8813::1:21)
[22:58:49] *** Joins: meator (~meator@user/meator)
[22:59:24] <PJBoy> if I typed 100 lines in a day, it's because I copy pasted 200 lines and deleted 100 of them
[22:59:35] <rpav> whoever they were, clearly didn't know what they were talking about
[23:00:15] <CarloWood> My peak productivity was 1000 lines of new code in one day.
[23:00:17] <rpav> https://www.folklore.org/StoryView.py?story=Negative_2000_Lines_Of_Code.txt
[23:00:36] <CarloWood> Writing between 10 and 100 is more normal though.
[23:01:28] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9d48:1520:34dc:be91) (Ping timeout: 264 seconds)
[23:08:23] <InPhase> CarloWood: My peak productivity by LOC is on that scale, but those were not my most productive coding days if I'm honestly measuring impact value.
[23:08:55] <rpav> you can measure LoC, but you're definitely not measuring productivity by doing so
[23:09:30] <InPhase> Many of my most productive coding days had negative LOC tallies.  :)
[23:09:33] <CarloWood> I still know what it was for - that was the day that I wrote the BURST code for undernet. Very productive :p
[23:09:44] <rpav> i actually boggle that anyone here would think such
[23:12:54] <InPhase> While this also doesn't measure value, an interesting code metric would take LOC and then penalize for Levenshtein similarity between lines.  :)
[23:17:47] <rpav> i dunno, i find copy/paste/modify code is pretty rare
[23:18:20] <rpav> though sometimes a faster way to get to a good function (by observing a few cases to generalize) than sitting there and thinking for awhile
[23:18:34] <CarloWood> I never do that. Copying code means you're doing something wrong.
[23:18:40] <rpav> not really
[23:19:10] <rpav> it can, if you're doing it for the wrong reasons, but it can also cut errors or help generalize etc
[23:19:29] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:19:30] <rpav> e.g. hand-writing a bunch of repetitive lines for a matrix op is error-prone
[23:19:55] <CarloWood> I still remember the nightmare of replacing LindenLabs networking code from their viewer... that turned out to have SEVEN FOLD duplication of network code!!!!!!! <-- seven exclamation marks.
[23:20:06] <rpav> andthere are cases like that where writing functions is _much_ worse / less clear than simply writing out operations that are very similar to how the math looks
[23:20:26] <CarloWood> If I grep my own source code for xyz - I find one place where it happens.
[23:22:38] <CarloWood> Re- error prone; these "tables" are code that generate a 64bit integer value :P  https://github.com/CarloWood/ai-utils/blob/master/FuzzyBool.h#L107
[23:26:48] <kalven> what do you use fuzzybool for?
[23:27:09] <CarloWood> Also to get better understandable code.
[23:27:56] <CarloWood> Ie, I read a boolean that can be set to true by other threads at any moment - but that is only ever reset by the thread that is reading the value.
[23:28:08] <CarloWood> Then the returned value is wasFalse or True.
[23:28:30] <CarloWood> Where wasFalse means "it was false, but it could be have changed into true by now"
[23:28:32] *** Quits: Raziel (~Raziel@user/raziel) (Read error: Connection reset by peer)
[23:28:57] *** Joins: Raziel (~Raziel@user/raziel)
[23:29:00] <CarloWood> It makes the reasoning much much easier using this.
[23:31:10] *** Quits: dblsaiko (~saiko@crispy.dblsaiko.net) (Remote host closed the connection)
[23:31:30] *** Joins: dblsaiko (~saiko@crispy.dblsaiko.net)
[23:31:42] *** Quits: comrad (~quassel@holarse/comrad) (Remote host closed the connection)
[23:32:56] *** Quits: proller (~p@2a02:6b8:b081:8813::1:21) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Ping timeout: 265 seconds)
[23:32:57] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Ping timeout: 265 seconds)
[23:32:57] *** Joins: comrad (~quassel@holarse/comrad)
[23:33:25] *** Quits: xq (~xq@user/xq) (Ping timeout: 265 seconds)
[23:33:38] *** Quits: meicceli (meicceli@kapsi.fi) (Quit: WeeChat 3.0)
[23:33:42] <CarloWood> If I had to do it again I'd probably do it differently. Use bool for true/was, use another type for True/wasFalse and a third for wasTrue/False.  The forth possibility wasTrue/wasFalse is not really useful. I haven't encountered it yet (or the code would make no sense and I'd change it).
[23:34:16] <CarloWood> Then having guaranteed two valued types, you can just replace everything with bool in Release mode - or probably even with optimization.
[23:34:43] <CarloWood> s/was/false/
[23:43:16] <SuperNintendoSUX> wat
[23:43:33] <SuperNintendoSUX> [14:58] <CarloWood> Where wasFalse means "it was false, but it could be have changed into true by now"
[23:43:44] <SuperNintendoSUX> you really like to punish your users :D
[23:44:21] <CarloWood> Must be why I don't have users. The code is undocumented and not possible to understand for mortals to begin with.
[23:44:37] <SuperNintendoSUX> yeah! so useful :)
[23:44:49] *** Joins: proller (~p@2a02:6b8:b081:8813::1:21)
[23:45:02] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[23:45:04] <CarloWood> I am going to rename my lib into libFuckYou
[23:45:25] <SuperNintendoSUX> I thought it was already its name
[23:45:35] <CarloWood> And the documentation will be "That's gay".
[23:45:45] <CarloWood> man fuckyou
[23:46:06] <SuperNintendoSUX> uh oh
[23:46:40] <SuperNintendoSUX> his true colors were finally revealed
[23:47:42] <CarloWood> Explain?
[23:48:04] <SuperNintendoSUX> ask your dad
[23:48:07] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[23:48:53] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[23:49:14] <lru> I know C++ is a "bondage and discipline language" but let's not overdo it :-)
[23:49:15] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[23:49:21] <CarloWood> I can only guess that you're not familiar with unix at this point.
[23:49:53] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[23:50:02] *** Quits: QuaternionsRock (~Quaternio@76.191.39.82) (Quit: Client closed)
[23:59:06] <CarloWood> {} struct A; struct B; struct A { A(B* _b) : b(_b) {} B* b; }; struct B { B(A* _a) : a(_a) {} A* a; }; struct C { A a; B b; C() : a(&b), b(&a) {} };
[23:59:06] <geordi>  
[23:59:11] <CarloWood> The wonders of C++
[23:59:31] <CarloWood> just in case...
[23:59:51] <CarloWood> geordi: replace {} struct with { C c; } struct
[23:59:51] <geordi>  
