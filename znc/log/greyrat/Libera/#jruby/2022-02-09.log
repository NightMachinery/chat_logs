[00:51:51] *** Quits: subbu (~subbu@user/subbu) (Remote host closed the connection)
[00:53:10] *** Joins: subbu (~subbu@user/subbu)
[01:41:05] <byteit101[m]> So I'm fine with convert (or perhaps `store_as:` ?) and de-nesting. I had created that to make illegal states unrepresentable, though I'm fine throwing exceptions instead.
[01:41:26] <byteit101[m]> But I notice you are preferring the actionless configuration name for the main config
[01:42:23] <byteit101[m]> Any particular reasons why?
[01:44:08] <byteit101[m]> I'd been preferring reading to writing in my thoughts, and as enebo mentioned with the looks like you could use :@othervariable as an argument had been disuading me from it (or variants) without a modifier word
[01:45:31] <byteit101[m]> With just instance_variable I feel like it could easily be misinterpreted as to what's going on
[01:46:16] <byteit101[m]> which is why I'd been preferring action words prefixing/suffixing (also for point #3 on my list about changing the semantics)
[01:47:17] <byteit101[m]> I do like headius's comparisoin to i_v_set and i_v_get which makes me lean towards instance_variable_bind
[01:47:27] <byteit101[m]> (or link, or something like that)
[01:50:57] <byteit101[m]> If someone who hasn't encountered this before reads the non-action {pre,post}fixed config I worry the semantics may not be as clear as if it were
[01:51:18] <byteit101[m]> thoughts? (I'll make a comment on the PR later this evening)
[03:23:17] <headius> 6F7E on stringio
[03:23:33] <headius> looks like some missing kwargs for most of these
[04:10:21] *** Quits: subbu (~subbu@user/subbu) (Quit: Leaving)
[04:10:43] *** Joins: subbu (~subbu@user/subbu)
[04:10:54] *** Quits: subbu (~subbu@user/subbu) (Remote host closed the connection)
[07:50:41] *** Joins: subbu (~subbu@user/subbu)
[08:22:54] *** Quits: subbu (~subbu@user/subbu) (Quit: Leaving)
[09:07:43] <headius> byteit101: I'll get back to that soon. Just trying to get these gems green and released so we can start to use them on master.
[09:08:28] <headius> kares: could you give your approval to re-license the strscan code on the following PR?
[09:08:29] <headius> https://github.com/ruby/strscan/pull/25
[09:08:30] <byteit101[m]> why would you want green gems instead of red gems? Aren't rubies red? What are you doing with emeralds?
[09:08:45] <headius> That's a great point
[09:09:06] <byteit101[m]> coming soon: JEmerald
[09:09:07] <headius> Luckily there's still one failure so it's ruby red right at the moment
[09:09:23] <byteit101[m]> :-D
[10:43:35] <headius> how is it we have never added a utility method to mask byte[x] with 0xFF to get unsigned byte value
[10:48:05] <headius> I guess Byte.toUnsignedInt is good enough but long
[11:53:14] <headius> Darn down to 1F but it is in encoding negotiation code. I'll pick this up tomorrow
[19:29:23] <headius> I'm going to push what I have on stringio... the last failure is a case where we should be raising an error trying to transcode UTF-8 into Windows-31J and I have gone over the encoding negotiation logic and can't find the problem
[19:30:10] <headius> we may be able to get stringio pushed without this one fixed if I can just show it's something in JRuby
[19:30:31] <headius> today I want to attempt to port timeout back into Ruby so we can have efficient executor-based logic in the gem
[19:31:02] <headius> it would be easier to get them to incorporate some JRuby-specific Ruby code rather than an ext and a -java gem
[19:34:14] <headius> enebo: it came to my attention last night that Byte.toUnsignedInt is a thing... how would you feel about replacing every line of code where we manually & 0xFF with a call to that method?
[19:34:36] <headius> I would prefer if it was something like Array.getUnsignedByte(byte[], index) but that does not appear to exist
[19:36:04] <enebo[m]> If it is semantically the same then sure.  Is it a primitive?
[19:36:28] <enebo[m]> I assume it will prevent mistakes too
[19:37:49] <headius> it does not appear to be an intrinsic in 8
[19:37:57] <headius> or 11
[19:38:01] <headius> it was added in 8
[19:38:44] <enebo[m]> I think we have accidentally at times forgot to mask so perhaps this will prevent that
[19:39:03] <headius> it at least is a clear pattern
[19:39:08] <enebo[m]> In those cases I think we somehow forget it can have sign bit
[19:39:21] <headius> not obvious looking at byte[i] & 0xFF why we are doing it
[19:39:21] <enebo[m]> So I am not sure this will prevent that error but sure
[19:39:46] <enebo[m]> yeah.  This will definitely help people reading our code
[19:40:31] <enebo[m]> in some code I wrote recently for parser line/offset I pushed all the specific bitmath into a method
[19:40:44] <enebo[m]> well methods but it did make intent obvious as well as consolidate that logic
[19:41:05] <headius> yeah I was going to add such a helper but decided to check if anything had been added to JDK
[19:41:26] <headius> I'll put together a PR today
[19:41:28] <enebo[m]> The other thing we do is return int when I wish we were doing byte
[19:41:50] <enebo[m]> but I think we use int when it could be a codepoint or a byte
[19:42:08] <headius> main issue is not being able to work with a byte as unsigned
[19:42:17] <headius> so we default to int to just get it unsigned right away
[19:42:26] <enebo[m]> yeah
[19:42:43] <enebo[m]> I wish Java had type aliasing like Rust
[19:43:11] <enebo[m]> Then you can make an int into RubyByte or whatever and it would enforce that alias
[19:43:26] <enebo[m]> as if it was a unique type
[19:43:41] <headius> yeah
[19:43:42] <enebo[m]> Seems like something Java could do too
[19:44:33] <enebo[m]> The Java way is class RubyByte { private final int value; } which sucks because you just want it to be an int declared as RubyByte
[19:44:47] <enebo[m]> Especially since EA sucks
[19:46:56] <headius> hah yeah for sure
[19:48:38] <enebo[m]> it is also nice to things like 'type SymbolTable = HashMap<RubySymbol, IRubyObject>'
[19:48:53] <enebo[m]> I guess though if you are a language with a lot of ceremony this all helps
[19:51:56] <enebo[m]> man emacs why are you like this
[19:52:25] <enebo[m]> it changed `coding: binary` to `coding: no-conversion`
[19:52:59] <headius> hah yeah that doesn't seem like the same thing
[20:28:39] <headius> https://github.com/ruby/stringio/pull/21
[20:29:09] <headius> updated with fixed impl, build and CI additions, and gemspec for -java gem
[20:29:15] <headius> moving right along
[20:54:11] *** Joins: subbu (~subbu@user/subbu)
[23:50:59] *** Quits: subbu (~subbu@user/subbu) (Quit: Leaving)
