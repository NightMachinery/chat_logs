[00:00:21] *** Joins: tazle (tazle@kapsi.fi)
[00:02:38] *** Quits: esselfe (~steph@user/esselfe) (Quit: done)
[00:03:09] *** Joins: sm2n (ae95cb1267@user/sm2n)
[00:04:32] *** Joins: esselfe (~steph@user/esselfe)
[00:07:41] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[00:08:35] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[00:08:46] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[00:14:40] *** Quits: AmR (~AmREiSa@156.199.223.24) (Ping timeout: 264 seconds)
[00:15:57] *** Quits: bogdomania (bogdomania@user/bogdomania) (Quit: Konversation terminated!)
[00:17:27] *** Joins: rgrinberg (~textual@200.5.63.76)
[00:17:29] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:17:33] *** Joins: mahmutov (~mahmutov@5.176.50.7)
[00:21:56] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.3)
[00:23:35] *** Quits: dld (~dld@2620:6e:6000:2900:4c8f:59ca:20e7:8c51) (Ping timeout: 252 seconds)
[00:24:31] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[00:27:16] *** Quits: rcf (rcf@iceland.sdf.org) (Quit: WeeChat 3.2.1)
[00:29:25] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[00:30:14] *** Joins: rcf (rcf@sdf.org)
[00:32:17] *** Joins: Klinda (~superleag@user/klinda)
[00:32:35] *** Joins: g2anj (~v@39.112.227.198)
[00:34:39] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:57] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[00:36:46] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[00:38:25] *** Quits: DutchIngraham (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[00:38:43] *** Joins: quartz (~quartz@user/quartz)
[00:41:48] *** Quits: peve (~peve@ucb-np2-234.colorado.edu) (Quit: Leaving)
[00:45:33] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:45:38] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:46:28] *** Quits: alch (~alch@to-18-90-72.service.infuturo.it) (Ping timeout: 264 seconds)
[00:47:41] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 256 seconds)
[00:48:07] *** Joins: dutch (~DutchIngr@user/dutch)
[00:48:14] *** Joins: alch (~alch@ca-18-218-57.service.infuturo.it)
[00:49:25] *** Joins: plantman (~plantman@2601:405:4680:1b0::2)
[00:58:49] *** Quits: presonic (~presonic@111-22-237-24.gci.net) (Remote host closed the connection)
[00:59:10] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[01:05:04] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::b73c) (Ping timeout: 264 seconds)
[01:05:51] *** Quits: mcf (~mforney@netbsd/developer/mcf) (Ping timeout: 264 seconds)
[01:10:13] *** Quits: dutch (~DutchIngr@user/dutch) (*.net *.split)
[01:10:13] *** Quits: quartz (~quartz@user/quartz) (*.net *.split)
[01:10:14] *** Quits: esselfe (~steph@user/esselfe) (*.net *.split)
[01:10:14] *** Quits: bruda (~bruda@172.58.59.79) (*.net *.split)
[01:10:14] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (*.net *.split)
[01:10:14] *** Quits: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37) (*.net *.split)
[01:10:14] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[01:10:14] *** Quits: Betal (~Betal@user/betal) (*.net *.split)
[01:10:14] *** Quits: th1 (~th@test.secomondo.dk) (*.net *.split)
[01:10:14] *** Quits: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) (*.net *.split)
[01:10:14] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (*.net *.split)
[01:10:14] *** Quits: synapt (NBishop@o.apocaleaps.com) (*.net *.split)
[01:10:14] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[01:10:14] *** Quits: charadon (~charadon@155.138.164.183) (*.net *.split)
[01:10:14] *** Quits: mixfix41 (~homefame@user/mixfix41) (*.net *.split)
[01:10:14] *** Quits: Akuli (~Akuli@213.216.208.32) (*.net *.split)
[01:10:14] *** Quits: beencubed (~beencubed@209.131.238.248) (*.net *.split)
[01:10:14] *** Quits: ckdCreations (~ckdCreati@147.55.130.38) (*.net *.split)
[01:10:14] *** Quits: lemontree (~chat@user/lemontree) (*.net *.split)
[01:10:14] *** Quits: noord (~noord@user/noord) (*.net *.split)
[01:10:14] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (*.net *.split)
[01:10:14] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (*.net *.split)
[01:10:14] *** Quits: dsrt^ (~dsrt@68.101.58.90) (*.net *.split)
[01:10:14] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (*.net *.split)
[01:10:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (*.net *.split)
[01:10:14] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[01:10:14] *** Quits: slidercrank (~slidercra@user/slidercrank) (*.net *.split)
[01:10:14] *** Quits: Colt (~Colt@user/colt) (*.net *.split)
[01:10:14] *** Quits: haniaF (~haniaF@83.24.192.250.ipv4.supernova.orange.pl) (*.net *.split)
[01:10:14] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (*.net *.split)
[01:10:14] *** Quits: zwr (~zwr@2804:d45:b966:fb00:3ac9:5265:a79e:4a2a) (*.net *.split)
[01:10:14] *** Quits: Burgundy (~yomon@79.115.213.171) (*.net *.split)
[01:10:14] *** Quits: plastico (~plastico@neomutt/plastico) (*.net *.split)
[01:10:14] *** Quits: earnest (~earnest@user/earnestly) (*.net *.split)
[01:10:14] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (*.net *.split)
[01:10:14] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[01:10:14] *** Quits: Chaser (~Chaser@user/chaser) (*.net *.split)
[01:10:14] *** Quits: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com) (*.net *.split)
[01:10:14] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (*.net *.split)
[01:10:14] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (*.net *.split)
[01:10:14] *** Quits: g2anj (~v@39.112.227.198) (*.net *.split)
[01:10:15] *** Quits: rcf (rcf@sdf.org) (*.net *.split)
[01:10:15] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[01:10:15] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (*.net *.split)
[01:10:15] *** Quits: tazle (tazle@kapsi.fi) (*.net *.split)
[01:10:15] *** Quits: kurahaupo (~kurahaupo@pa49-180-186-164.pa.nsw.optusnet.com.au) (*.net *.split)
[01:10:15] *** Quits: strajder (~strajder@user/strajder) (*.net *.split)
[01:10:15] *** Quits: fputs (~fputs@67.59.83.166) (*.net *.split)
[01:10:15] *** Quits: nyah (~nyah@94.6.71.219) (*.net *.split)
[01:10:15] *** Quits: mrig (~mrig@user/mrig) (*.net *.split)
[01:10:15] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (*.net *.split)
[01:10:15] *** Quits: superboot (~agentgasm@user/superboot) (*.net *.split)
[01:10:15] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (*.net *.split)
[01:10:15] *** Quits: wovixo (~wovixo@128.104.205.49) (*.net *.split)
[01:10:15] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[01:10:15] *** Quits: seninha (~seninha@user/seninha) (*.net *.split)
[01:10:15] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[01:10:15] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[01:10:15] *** Quits: psyxopompos (~psyxopomp@user/psyxopompos) (*.net *.split)
[01:10:15] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[01:10:15] *** Quits: ztx (~ztx@user/ztx) (*.net *.split)
[01:10:15] *** Quits: rahl (~rahl@102.114.49.104) (*.net *.split)
[01:10:15] *** Quits: luizfrds1 (~Luiz@152.250.243.147) (*.net *.split)
[01:10:15] *** Quits: iomari891 (~iomari891@105.112.138.38) (*.net *.split)
[01:10:15] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (*.net *.split)
[01:10:15] *** Quits: ai (nukedclx@shell.k4be.pl) (*.net *.split)
[01:10:15] *** Quits: simontime (~simontime@irc.simonti.me) (*.net *.split)
[01:10:15] *** Quits: regulate (~regulate@koduro.com) (*.net *.split)
[01:10:15] *** Quits: monchi (~joints@143.198.92.132) (*.net *.split)
[01:10:15] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[01:10:15] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[01:10:15] *** Quits: phroa (~phroa@user/phroa) (*.net *.split)
[01:10:15] *** Quits: Dijky (~Dijky@user/dijky) (*.net *.split)
[01:10:15] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[01:10:15] *** Quits: Moonspell (moon@194.87.139.59) (*.net *.split)
[01:10:15] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (*.net *.split)
[01:10:15] *** Quits: zlg (~zlg@user/zlg) (*.net *.split)
[01:10:15] *** Quits: clarity (~clarity@user/clarity) (*.net *.split)
[01:10:15] *** Quits: grange_c (~grange_c@vps-9763379d.vps.ovh.net) (*.net *.split)
[01:10:15] *** Quits: mniip (mniip@libera/staff/mniip) (*.net *.split)
[01:10:15] *** Quits: jenkins (~jenkins@user/jenkins) (*.net *.split)
[01:10:15] *** Quits: sivoais (~zaki@199.19.225.239) (*.net *.split)
[01:10:16] *** Quits: useretail (~useretail@185.132.19.151) (*.net *.split)
[01:10:16] *** Quits: domve (~dom@user/domve) (*.net *.split)
[01:10:16] *** Quits: VincentValentine (~VincentVa@79.126.106.250) (*.net *.split)
[01:10:16] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (*.net *.split)
[01:10:16] *** Quits: Dreg- (~Dreg@fr33project.org) (*.net *.split)
[01:10:16] *** Quits: arminweigl (~arminweig@sourcehut/user/arminweigl) (*.net *.split)
[01:10:16] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (*.net *.split)
[01:10:16] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (*.net *.split)
[01:10:16] *** Quits: Albright (~Albright@149.28.13.173) (*.net *.split)
[01:10:16] *** Quits: nahcetan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[01:10:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (*.net *.split)
[01:10:16] *** Quits: samir (~azureuser@user/samir) (*.net *.split)
[01:10:16] *** Quits: bch_x (~bch@S01069050ca2cbf63.ok.shawcable.net) (*.net *.split)
[01:10:16] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[01:10:16] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (*.net *.split)
[01:10:16] *** Quits: Red (~Red@97.109-247-81.customer.lyse.net) (*.net *.split)
[01:10:16] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (*.net *.split)
[01:10:16] *** Quits: Ckat (~Ckat@xn--z7x.xn--6frz82g) (*.net *.split)
[01:10:16] *** Quits: randm (~randm@user/randm) (*.net *.split)
[01:10:16] *** Quits: graphitemaster (~graphitem@user/graphitemaster) (*.net *.split)
[01:10:16] *** Quits: Learath2 (~learath2@user/learath2) (*.net *.split)
[01:10:16] *** Quits: summerisle (~eof@tty3.dev) (*.net *.split)
[01:10:16] *** Quits: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6) (*.net *.split)
[01:10:16] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[01:10:16] *** Quits: midhun__ (~liberapoo@117.212.160.238) (*.net *.split)
[01:10:16] *** Quits: mongrel (uid508343@id-508343.ilkley.irccloud.com) (*.net *.split)
[01:10:16] *** Quits: pizdets (~pizdets@183.182.110.253) (*.net *.split)
[01:10:16] *** Quits: luke-jr (~luke-jr@user/luke-jr) (*.net *.split)
[01:10:16] *** Quits: mplio (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net) (*.net *.split)
[01:10:17] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (*.net *.split)
[01:10:17] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (*.net *.split)
[01:10:17] *** Quits: llh (~llh@user/llh) (*.net *.split)
[01:10:17] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[01:10:17] *** Quits: selikolg (~selikolg@178.62.2.76) (*.net *.split)
[01:10:17] *** Quits: NEYi (~NEYi@109.251.216.38) (*.net *.split)
[01:10:17] *** Quits: mintograde (~mintograd@47.201.5.61) (*.net *.split)
[01:10:17] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[01:10:17] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[01:10:17] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (*.net *.split)
[01:10:17] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[01:10:17] *** Quits: bparker (~nobody@user/bparker) (*.net *.split)
[01:10:17] *** Quits: Lyude (~lyudess@pool-96-230-249-157.bstnma.fios.verizon.net) (*.net *.split)
[01:10:17] *** Quits: poprocks (~logan@user/poprocks) (*.net *.split)
[01:10:17] *** Quits: Cyp_ (~cyp@213.237.85.9) (*.net *.split)
[01:10:17] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[01:10:17] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (*.net *.split)
[01:10:17] *** Quits: Zenton (~user@user/zenton) (*.net *.split)
[01:10:17] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[01:10:17] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[01:10:17] *** Quits: g0z (gauze@entropy.tmok.com) (*.net *.split)
[01:10:17] *** Quits: Ranhir (~Ranhir@157.97.53.139) (*.net *.split)
[01:10:17] *** Quits: joev1 (~joev@user/joev) (*.net *.split)
[01:10:17] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[01:10:17] *** Quits: Bou (sid274843@user/bou) (*.net *.split)
[01:10:17] *** Quits: int (~int@0x4.cx) (*.net *.split)
[01:10:17] *** Quits: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net) (*.net *.split)
[01:10:17] *** Quits: Jck_true (~jcktrue@188.228.89.240) (*.net *.split)
[01:10:17] *** Quits: Khoyo_ (~khoyo@ns328946.ip-37-187-115.eu) (*.net *.split)
[01:10:17] *** Quits: pippijn (~pippijn@ra.xinutec.org) (*.net *.split)
[01:10:17] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[01:10:17] *** Quits: cust_ (amaama@blackbox.amaama.org) (*.net *.split)
[01:10:17] *** Quits: noahmg123 (sid89117@id-89117.ilkley.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: glowcoil (sid3405@id-3405.tinside.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[01:10:17] *** Quits: glenfe (sid231748@user/glenfe) (*.net *.split)
[01:10:17] *** Quits: cengiz_io (sid223191@id-223191.ilkley.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: catern (~sbaugh@cpe-98-7-229-235.nyc.res.rr.com) (*.net *.split)
[01:10:17] *** Quits: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net) (*.net *.split)
[01:10:17] *** Quits: jellie (~luv_panda@user/jellie) (*.net *.split)
[01:10:17] *** Quits: xcm_ (~xcm@user/xcm) (*.net *.split)
[01:10:17] *** Quits: twkm (twkm@rfc1459.net) (*.net *.split)
[01:10:17] *** Quits: haliucinas (~haliucina@5.20.153.21) (*.net *.split)
[01:10:17] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[01:10:17] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[01:10:18] *** Quits: subvisor (sid502026@helmsley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: englishm (sid6629@tinside.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: agander_m (sid407952@tinside.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: immibis (~hexchat@62.156.144.218) (*.net *.split)
[01:10:18] *** Quits: eau (~chat@user/eau) (*.net *.split)
[01:10:18] *** Quits: avrdude (~avrdude@user/avrdude) (*.net *.split)
[01:10:18] *** Quits: petererer (~petern@2001:8b0:65dd:8ef1:37be:e06:fb80:4ba2) (*.net *.split)
[01:10:18] *** Quits: Celelibi (celelibi@user/celelibi) (*.net *.split)
[01:10:18] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[01:10:18] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (*.net *.split)
[01:10:18] *** Quits: fakenullie (~nullie@london.nullie.name) (*.net *.split)
[01:10:18] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[01:10:18] *** Quits: hecanjog (~hecanjog@2a01:4f9:6a:5326::2) (*.net *.split)
[01:10:18] *** Quits: fcresende (~quassel@vps35015.publiccloud.com.br) (*.net *.split)
[01:10:18] *** Quits: veltas (~veltas@104.236.34.215) (*.net *.split)
[01:10:18] *** Quits: Ryozuki (~Ryozuki@user/ryozuki) (*.net *.split)
[01:10:18] *** Quits: gig (~gig@2a01:4f8:141:4424::2) (*.net *.split)
[01:10:18] *** Quits: andi_ (~andi@user/andi/x-3467420) (*.net *.split)
[01:10:18] *** Quits: livestradamus (~quassel@user/livestradamus) (*.net *.split)
[01:10:18] *** Quits: buzel (~buzel@fsf/member/buzel) (*.net *.split)
[01:10:18] *** Quits: vt (~vt@osa.vbc.su) (*.net *.split)
[01:10:18] *** Quits: novasharper (~novasharp@2001:470:69fc:105::b4a) (*.net *.split)
[01:10:18] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[01:10:18] *** Quits: Twix (~None@2a01:4f8:192:23d0::1be4:a) (*.net *.split)
[01:10:18] *** Quits: supernov1h (~supernova@mail.ijk.nz) (*.net *.split)
[01:10:18] *** Quits: PaulePanter (~paul@mail.gw90.de) (*.net *.split)
[01:10:18] *** Quits: BGL (thirty@75-149-171-58-Washington.hfc.comcastbusiness.net) (*.net *.split)
[01:10:18] *** Quits: ethoxy_ (~caretaker@cx21.havox.ru) (*.net *.split)
[01:10:18] *** Quits: Falconer1 (~ronnyma@227.84-48-191.nextgentel.com) (*.net *.split)
[01:10:18] *** Quits: richardwh1uk (richardwhi@scarlet.richardwhiuk.com) (*.net *.split)
[01:10:18] *** Quits: savy_ (~z@io.tl) (*.net *.split)
[01:10:18] *** Quits: csjp (~csjp@user/csjp) (*.net *.split)
[01:10:18] *** Quits: LuKaRo_ (~LuKaRo@p5dedaa53.dip0.t-ipconnect.de) (*.net *.split)
[01:10:18] *** Quits: puke (~puke@user/puke) (*.net *.split)
[01:10:18] *** Quits: zopsi_ (zopsi@2600:3c00::f03c:91ff:fe14:551f) (*.net *.split)
[01:10:18] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[01:10:18] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[01:10:18] *** Quits: herrhotzenplotz (~herrhotze@user/herrhotzenplotz) (*.net *.split)
[01:10:18] *** Quits: nullptr_ (~nullptr@user/nullptr/x-2182142) (*.net *.split)
[01:10:18] *** Quits: azerty (~azerty@user/badwolf) (*.net *.split)
[01:10:18] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[01:10:18] *** Quits: dhch (~dhch@185.213.154.168) (*.net *.split)
[01:10:18] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[01:10:18] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[01:10:18] *** Quits: spike_spiegel38 (~spike_spi@static.200.4.251.148.clients.your-server.de) (*.net *.split)
[01:10:18] *** Quits: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net) (*.net *.split)
[01:10:18] *** Quits: Fairy (~Fairy@2001:464a:4992:0:78b9:dd77:b9a4:c92d) (*.net *.split)
[01:10:18] *** Quits: relight (~relight@user/relight) (*.net *.split)
[01:10:19] *** Quits: nowz (~nowz@user/nowz) (*.net *.split)
[01:10:19] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (*.net *.split)
[01:10:19] *** Quits: mgocobachi (~m@ancrae.com) (*.net *.split)
[01:10:19] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (*.net *.split)
[01:10:19] *** Quits: caze (~caze@user/caze) (*.net *.split)
[01:10:19] *** Quits: dynos01 (~dynos01@li820-149.members.linode.com) (*.net *.split)
[01:10:19] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (*.net *.split)
[01:10:19] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[01:10:19] *** Quits: alvarezp (quassel@2600:3c01::f03c:91ff:fee5:6d8d) (*.net *.split)
[01:10:19] *** Quits: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b) (*.net *.split)
[01:10:19] *** Quits: Ragnor (~Ragnor@user/ragnor) (*.net *.split)
[01:10:19] *** Quits: jkssodhxu[m] (~barzarian@2001:470:69fc:105::1:3a12) (*.net *.split)
[01:10:19] *** Quits: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d) (*.net *.split)
[01:10:19] *** Quits: volgar1x (~volgar1xm@2001:470:69fc:105::e61d) (*.net *.split)
[01:10:19] *** Quits: hussam (~hussam@user/hussam) (*.net *.split)
[01:10:19] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (*.net *.split)
[01:10:19] *** Quits: atulu[m] (~atulumatr@2001:470:69fc:105::d50c) (*.net *.split)
[01:10:19] *** Quits: lowin (~lowin@user/lowin) (*.net *.split)
[01:10:19] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (*.net *.split)
[01:10:19] *** Quits: Elladan (~elladan@user/elladan) (*.net *.split)
[01:10:19] *** Quits: Muzer (~muzer@tim32.org) (*.net *.split)
[01:10:19] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[01:10:19] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (*.net *.split)
[01:10:19] *** Quits: zacts (~zacts@user/zacts) (*.net *.split)
[01:10:19] *** Quits: asd (~noname@user/asd) (*.net *.split)
[01:10:19] *** Quits: deflected (~deflected@user/deflected) (*.net *.split)
[01:10:19] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[01:10:19] *** Quits: amorel (~amorel@mx.mompl.net) (*.net *.split)
[01:10:19] *** Quits: finalsummer (~finalsumm@user/finalsummer) (*.net *.split)
[01:10:19] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[01:10:19] *** Quits: acolarh (~niels@3e6be663.rev.stofanet.dk) (*.net *.split)
[01:10:19] *** Quits: Brewster (~Brewster@104.145.226.5) (*.net *.split)
[01:10:19] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[01:10:19] *** Quits: gl (~x@pwn.lu) (*.net *.split)
[01:10:19] *** Quits: begriffs_ (~begriffs@user/begriffs) (*.net *.split)
[01:10:20] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (*.net *.split)
[01:10:20] *** Quits: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com) (*.net *.split)
[01:10:20] *** Quits: tk (~tk@ircpuzzles/staff/tk) (*.net *.split)
[01:10:20] *** Quits: p0g0 (~p0g0@64.45.183.0) (*.net *.split)
[01:10:20] *** Quits: ntwk (~ntwk@user/ntwk) (*.net *.split)
[01:10:20] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (*.net *.split)
[01:10:20] *** Quits: Xeroine (~Xeroine@user/xeroine) (*.net *.split)
[01:10:20] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (*.net *.split)
[01:10:20] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (*.net *.split)
[01:10:20] *** Quits: Pentode (~Pentode@mobile-166-171-57-43.mycingular.net) (*.net *.split)
[01:10:20] *** Quits: kuku (~kuku@user/kuku) (*.net *.split)
[01:10:20] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (*.net *.split)
[01:10:20] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[01:10:20] *** Quits: Matt|home (~matt@adsl-74-233-58-226.mia.bellsouth.net) (*.net *.split)
[01:10:20] *** Quits: marcj (~marc@205.175.215.25) (*.net *.split)
[01:10:20] *** Quits: edk (edk@libera/staff/edk) (*.net *.split)
[01:10:20] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[01:10:20] *** Quits: ra4king (~ra4king@roiatalla.com) (*.net *.split)
[01:10:20] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (*.net *.split)
[01:10:20] *** Quits: pnill (~pnill@ip170.ip-54-39-37.net) (*.net *.split)
[01:10:20] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (*.net *.split)
[01:10:20] *** Quits: laris (undead@37.221.209.36) (*.net *.split)
[01:10:20] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (*.net *.split)
[01:10:20] *** Quits: shalok (~shalok@user/shalok) (*.net *.split)
[01:10:20] *** Quits: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com) (*.net *.split)
[01:10:20] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (*.net *.split)
[01:10:20] *** Quits: welt (~welt@willow.spiderden.net) (*.net *.split)
[01:10:20] *** Quits: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75) (*.net *.split)
[01:10:20] *** Quits: BlueShark (sid10311@user/blueshark) (*.net *.split)
[01:10:20] *** Quits: nohit (sid334887@id-334887.tinside.irccloud.com) (*.net *.split)
[01:10:20] *** Quits: nostar (~nostar@68.51.221.108) (*.net *.split)
[01:10:20] *** Quits: Telvana (~capo@user/telvana) (*.net *.split)
[01:10:20] *** Quits: sheb (~sheb@31.223.228.71) (*.net *.split)
[01:10:20] *** Quits: cool2077 (~cool333@bzq-79-176-139-177.red.bezeqint.net) (*.net *.split)
[01:10:20] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:ede1:63e1:1b15:d52) (*.net *.split)
[01:10:20] *** Quits: synthmeat (~synthmeat@user/synthmeat) (*.net *.split)
[01:10:20] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (*.net *.split)
[01:10:20] *** Quits: gnoo (gnoo@user/gnoo) (*.net *.split)
[01:10:20] *** Quits: ghenry (~ghenry@ghenry.plus.com) (*.net *.split)
[01:10:20] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[01:10:20] *** Quits: trenka (~ykaliuta@user/trenka) (*.net *.split)
[01:10:20] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[01:10:20] *** Quits: decartes_ (sid240036@id-240036.helmsley.irccloud.com) (*.net *.split)
[01:10:20] *** Quits: TallonRain (sid214799@user/tallonrain) (*.net *.split)
[01:10:21] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[01:10:21] *** Quits: clamiax (~clamiax@net-37-182-97-22.cust.vodafonedsl.it) (*.net *.split)
[01:10:21] *** Quits: avar (avar@vm.nix.is) (*.net *.split)
[01:10:21] *** Quits: towel (~towel@user/towel) (*.net *.split)
[01:10:21] *** Quits: leosilva (~leosilva@canonical/leosilva) (*.net *.split)
[01:10:21] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[01:10:21] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (*.net *.split)
[01:10:21] *** Quits: cebor (~cebor@user/cebor) (*.net *.split)
[01:10:21] *** Quits: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5) (*.net *.split)
[01:10:21] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[01:10:21] *** Quits: Freman (~Freman@flatus.fremnet.net) (*.net *.split)
[01:10:21] *** Quits: satanist (~satanist@bureaucracy.bureaucracy.de) (*.net *.split)
[01:10:21] *** Quits: eeerik8 (~eeerik8@95.179.149.48) (*.net *.split)
[01:10:21] *** Quits: tyzoid (~tyzoid@2607:5600:dc::2) (*.net *.split)
[01:10:21] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[01:10:21] *** Quits: dansan (~daniel@75.81.148.51) (*.net *.split)
[01:10:21] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[01:10:21] *** Quits: Soni (~quassel@autistic.space) (*.net *.split)
[01:10:21] *** Quits: scarce (~scarce@sourcehut/user/scarce) (*.net *.split)
[01:10:21] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (*.net *.split)
[01:10:21] *** Quits: smeso (~smeso@user/smeso) (*.net *.split)
[01:10:21] *** Quits: clockwor1girl (sophie@funkykitty.net) (*.net *.split)
[01:10:21] *** Quits: dustinm- (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[01:10:22] *** Quits: routeveg_ (~lee@197.ip-51-195-136.eu) (*.net *.split)
[01:10:22] *** Quits: Wandering_Glitch (~Wandering@li555-207.members.linode.com) (*.net *.split)
[01:10:22] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[01:10:22] *** Quits: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (*.net *.split)
[01:10:22] *** Quits: parazyd (~parazyd@devuan/developer/parazyd) (*.net *.split)
[01:10:22] *** Quits: digilink (~digilink@user/digilink) (*.net *.split)
[01:10:22] *** Quits: daurnimator (~daurnimat@vultr.daurnimator.com) (*.net *.split)
[01:10:22] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[01:10:22] *** Quits: cpuid (~cpuid@user/cpuid) (*.net *.split)
[01:10:22] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[01:10:22] *** Quits: guest[m] (~guestkdeo@2001:470:69fc:105::ffb0) (*.net *.split)
[01:10:22] *** Quits: sandman13 (sandman13@sandman13.jujube.ircnow.org) (*.net *.split)
[01:10:22] *** Quits: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com) (*.net *.split)
[01:10:22] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[01:10:22] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (*.net *.split)
[01:10:22] *** Quits: APic (apic@apic.name) (*.net *.split)
[01:10:22] *** Quits: con3 (~con3@143.198.53.32) (*.net *.split)
[01:10:22] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[01:10:22] *** Quits: andjjj23 (~irc@107.170.228.47) (*.net *.split)
[01:10:22] *** Quits: edr (~edr@user/edr) (*.net *.split)
[01:10:22] *** Quits: root_ (~root@dhcp-24-53-243-12.cable.user.start.ca) (*.net *.split)
[01:10:22] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[01:10:22] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[01:10:22] *** Quits: grumble (grumble@user/grumble) (*.net *.split)
[01:10:22] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[01:10:22] *** Quits: bone (~bone@user/mbo) (*.net *.split)
[01:10:22] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[01:10:22] *** Quits: kline (~freedom0@libera/staff/kline) (*.net *.split)
[01:10:22] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[01:10:22] *** Quits: jason1234 (fltk@thunix.net) (*.net *.split)
[01:10:22] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[01:10:22] *** Quits: koisoke (xef4@epilogue.org) (*.net *.split)
[01:10:22] *** Quits: M101donutman[m] (~M101donut@2001:470:69fc:105::d51) (*.net *.split)
[01:10:23] *** Quits: ElementW (~tungsten@hoodie.elementw.net) (*.net *.split)
[01:10:23] *** Quits: les (znc@user/les) (*.net *.split)
[01:10:23] *** Quits: tm512 (~tm512@user/tm512) (*.net *.split)
[01:10:23] *** Quits: krissmaster (~kriss@213.239.83.90) (*.net *.split)
[01:10:23] *** Quits: Adie (cummy@adie.space) (*.net *.split)
[01:10:23] *** Quits: markand (~markand@markand.fr) (*.net *.split)
[01:10:23] *** Quits: Dotz0cat (~Dotz0cat@h14.95.187.173.dynamic.ip.windstream.net) (*.net *.split)
[01:10:23] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (*.net *.split)
[01:10:23] *** Quits: trisk (~trisk@2601:196:4700:106e:8:20ff:fe3e:890e) (*.net *.split)
[01:10:23] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (*.net *.split)
[01:10:23] *** Quits: celphi_ (sid97751@user/celphi) (*.net *.split)
[01:10:23] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (*.net *.split)
[01:10:23] *** Quits: coruja (~coruja@user/coruja) (*.net *.split)
[01:10:23] *** Quits: krzych (krzych@nroot.pl) (*.net *.split)
[01:10:23] *** Quits: ozzz (~oz@46.49.41.80) (*.net *.split)
[01:10:23] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[01:10:23] *** Quits: dmgk (~dmgk@user/dmgk) (*.net *.split)
[01:10:23] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[01:10:23] *** Quits: Emil (emil@emil.fi) (*.net *.split)
[01:10:23] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (*.net *.split)
[01:10:23] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (*.net *.split)
[01:10:23] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (*.net *.split)
[01:10:24] *** Quits: high_ground (~yes@user/high-ground/x-5722129) (*.net *.split)
[01:10:24] *** Quits: fizzie (irc@selene.zem.fi) (*.net *.split)
[01:10:24] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[01:10:24] *** Quits: chiptuner (~bobby@user/chiptuner) (*.net *.split)
[01:10:24] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[01:10:24] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[01:10:24] *** Quits: sdk_ (~x@shell.codevoid.de) (*.net *.split)
[01:10:24] *** Quits: trn (jhj@sourcehut/user/trn) (*.net *.split)
[01:10:24] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[01:10:24] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (*.net *.split)
[01:10:24] *** Quits: tempora (~tempus@user/tempora) (*.net *.split)
[01:10:24] *** Quits: sebbu (~sebbu@user/sebbu) (*.net *.split)
[01:10:24] *** Quits: sicelo (~sicelo@user/sicelo) (*.net *.split)
[01:10:24] *** Quits: MrC (Ben@mrbenc.net) (*.net *.split)
[01:10:24] *** Quits: tobiasu (~tobiasu@user/tobiasu) (*.net *.split)
[01:10:24] *** Quits: Deewiant (~deewiant@2001:470:69fc:105::2fd3) (*.net *.split)
[01:10:24] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (*.net *.split)
[01:10:24] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (*.net *.split)
[01:10:24] *** Quits: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30) (*.net *.split)
[01:10:24] *** Quits: TheDcoder[m] (~thedcoder@user/thedcoder) (*.net *.split)
[01:10:24] *** Quits: dragonmaster (dragonmast@user/dragonmaster) (*.net *.split)
[01:10:24] *** Quits: ws2k3 (znc@vps.freegamehosting.eu) (*.net *.split)
[01:10:24] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[01:10:24] *** Quits: Viewday11 (~Viewday@user/viewday) (*.net *.split)
[01:10:24] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[01:10:25] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: wangledorf (sid505185@id-505185.ilkley.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: kristjansson_ (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[01:10:25] *** Quits: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (*.net *.split)
[01:10:25] *** Quits: nomn (nomn@user/nomn) (*.net *.split)
[01:10:25] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[01:10:25] *** Quits: skipper (~whatsupbo@user/scobydoo) (*.net *.split)
[01:10:25] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (*.net *.split)
[01:10:25] *** Quits: koo5_ (~quassel@51.140.155.227) (*.net *.split)
[01:10:25] *** Quits: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (*.net *.split)
[01:10:25] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (*.net *.split)
[01:10:25] *** Quits: go4godvin (~go4godvin@user/go4godvin) (*.net *.split)
[01:10:25] *** Quits: xrj (~av@2a01:4f8:c17:7cba::1) (*.net *.split)
[01:10:25] *** Quits: Daemoen (~Daemoen@daemoen.ct-unlimited.com) (*.net *.split)
[01:10:25] *** Quits: enick_958 (~mercvrivs@2001:470:69fc:105::2ee6) (*.net *.split)
[01:10:25] *** Quits: randy408[m] (~randy408m@2001:470:69fc:105::2f5e) (*.net *.split)
[01:10:25] *** Quits: Akawama[m] (~akawama@user/akawama) (*.net *.split)
[01:10:25] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[01:10:25] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (*.net *.split)
[01:10:25] *** Quits: gemelen (~gemelen@zooey.gemelen.net) (*.net *.split)
[01:10:25] *** Quits: ndorf (~nd@ob.noxio.us) (*.net *.split)
[01:10:25] *** Quits: dupondje (~dupondje@artemis.dupie.be) (*.net *.split)
[01:10:26] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[01:10:26] *** Quits: dme2 (~dme2@67.205.140.199) (*.net *.split)
[01:10:26] *** Quits: oldlaptop (~quassel@45.63.78.126) (*.net *.split)
[01:10:26] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[01:10:26] *** Quits: dos (~dos@dosowisko.net) (*.net *.split)
[01:10:26] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[01:10:26] *** Quits: Justin_T (~Justin@user/justin-t/x-2449983) (*.net *.split)
[01:10:26] *** Quits: krychu (~krychu@static.152.151.251.148.clients.your-server.de) (*.net *.split)
[01:10:26] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[01:10:26] *** Quits: bleb (~cm@user/bleb) (*.net *.split)
[01:10:26] *** Quits: oj (oj@user/oj) (*.net *.split)
[01:10:26] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[01:10:26] *** Quits: f0xb4t (~mac@78.46.13.69) (*.net *.split)
[01:10:26] *** Quits: Thedarkb (~Thedarkb@86-42-4-182-dynamic.agg3.kny.prp-wtd.eircom.net) (*.net *.split)
[01:10:26] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (*.net *.split)
[01:10:26] *** Quits: mtg (~mtg@209.250.241.226) (*.net *.split)
[01:10:26] *** Quits: In0perable (~PLAYER_1@fancydata.science) (*.net *.split)
[01:10:26] *** Quits: stilbruch (~stilbruch@157.245.122.124) (*.net *.split)
[01:10:26] *** Quits: mdw_ (~root@159.65.86.163) (*.net *.split)
[01:10:27] *** Quits: remedan (~remedan@balak.me) (*.net *.split)
[01:10:27] *** Quits: nf (~n@monade.li) (*.net *.split)
[01:10:27] *** Quits: Nex8192 (~Nex8192@user/nex8192) (*.net *.split)
[01:10:27] *** Quits: e36freak (~e36freak@user/e36freak) (*.net *.split)
[01:10:27] *** Quits: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e) (*.net *.split)
[01:10:27] *** Quits: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1) (*.net *.split)
[01:10:27] *** Quits: M77hamster7[m] (~M77hamste@2001:470:69fc:105::1:308a) (*.net *.split)
[01:10:27] *** Quits: dalz (~dalz@2001:470:69fc:105::2ea) (*.net *.split)
[01:10:27] *** Quits: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4) (*.net *.split)
[01:10:27] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (*.net *.split)
[01:10:27] *** Quits: _4p3 (~ape@kanonenjagd.panzer.ninja) (*.net *.split)
[01:10:27] *** Quits: divine (~divine@2001:470:8247:1::31) (*.net *.split)
[01:10:27] *** Quits: adinf (~ariel@2001:19f0:5:5337:5400:3ff:fe6c:38e9) (*.net *.split)
[01:10:27] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[01:10:27] *** Quits: eletrotupi (eletrotupi@user/eletrotupi) (*.net *.split)
[01:10:27] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[01:10:27] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[01:10:27] *** Quits: majors (~majors@user/majors) (*.net *.split)
[01:10:27] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (*.net *.split)
[01:10:27] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[01:10:27] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (*.net *.split)
[01:10:27] *** Quits: vinay (~Vinay@user/vinay-keshava) (*.net *.split)
[01:10:27] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[01:10:27] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[01:10:27] *** Quits: meowray (~MaskRay@user/meowray) (*.net *.split)
[01:10:27] *** Quits: nikomo (~quassel@nikomo.fi) (*.net *.split)
[01:10:27] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[01:10:28] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[01:10:28] *** Quits: kernelc_ (~kornel@46.101.204.33) (*.net *.split)
[01:10:28] *** Quits: klys_ (~mdasoh@show.op8.us) (*.net *.split)
[01:10:28] *** Quits: kplant (~kplant@user/kplant) (*.net *.split)
[01:10:28] *** Quits: DarkUranium (~DarkUrani@stdrand.com) (*.net *.split)
[01:10:28] *** Quits: bsandro (~bsandro@139.138.197.56) (*.net *.split)
[01:10:28] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[01:10:28] *** Quits: Haise0 (~haise01@user/haise01) (*.net *.split)
[01:10:28] *** Quits: riv (river@tilde.team/user/river) (*.net *.split)
[01:10:28] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[01:10:28] *** Quits: LucaTM (~LucaTM@user/lucatm) (*.net *.split)
[01:10:28] *** Quits: davidv7 (~davidv7@user/videogameenjoyer) (*.net *.split)
[01:10:28] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[01:10:28] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[01:10:28] *** Quits: schna (sid484866@id-484866.helmsley.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: ^tinyweasel^ (~weasel@user/tinyweasel/x-0495158) (*.net *.split)
[01:10:28] *** Quits: hedaera[m] (~hedaerama@2001:470:69fc:105::1:3ef1) (*.net *.split)
[01:10:28] *** Quits: fstd (~fstd@xdsl-87-79-98-69.nc.de) (*.net *.split)
[01:10:28] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (*.net *.split)
[01:10:28] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[01:10:28] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[01:10:28] *** Quits: Epakai_ (Epakai@drislock.org) (*.net *.split)
[01:10:28] *** Quits: Beastie (~lcu@user/thebeastie) (*.net *.split)
[01:10:28] *** Quits: EtherNet (~ethernet@user/ethernet) (*.net *.split)
[01:10:28] *** Quits: xSavitar (~xSavitar@user/xsavitar) (*.net *.split)
[01:10:28] *** Quits: citrons_ (~citrons@alt.mondecitronne.com) (*.net *.split)
[01:10:28] *** Quits: pinheadmz_ (~pinheadmz@hns-contributor.dev) (*.net *.split)
[01:10:28] *** Quits: DrNick42_ (~DrNick42@bastion.spikeyfishtech.uk) (*.net *.split)
[01:10:28] *** Quits: Xgc (~Xgc@user/xgc) (*.net *.split)
[01:10:28] *** Quits: moose (~moose@user/moose) (*.net *.split)
[01:10:28] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (*.net *.split)
[01:10:28] *** Quits: illustris (sid211748@id-211748.ilkley.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (*.net *.split)
[01:10:28] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: ikiryo (sid109660@user/ikiryo) (*.net *.split)
[01:10:28] *** Quits: pony (sid524992@smol/hors) (*.net *.split)
[01:10:28] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: omegatron (~some@p54bd5e02.dip0.t-ipconnect.de) (*.net *.split)
[01:10:29] *** Quits: Roman[m] (~wrongt@2001:470:69fc:105::341e) (*.net *.split)
[01:10:29] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[01:10:29] *** Quits: VICultist[m] (~jesingsma@2001:470:69fc:105::1:2bb8) (*.net *.split)
[01:10:29] *** Quits: emias (~holger@home.zedat.fu-berlin.de) (*.net *.split)
[01:10:29] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (*.net *.split)
[01:10:29] *** Quits: cehteh (~ct@git.pipapo.org) (*.net *.split)
[01:10:29] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[01:10:29] *** Quits: rkta (~rkta_@2a00:f48:1003:1::8bee:ec40) (*.net *.split)
[01:10:29] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[01:10:29] *** Quits: apotheon (~apotheon@copyfree/founder/apotheon) (*.net *.split)
[01:10:29] *** Quits: lm- (~lm-@vps-a26d080c.vps.ovh.net) (*.net *.split)
[01:10:29] *** Quits: LangerJan (~jan@user/langerjan) (*.net *.split)
[01:10:29] *** Quits: |smlckz| (smlckz@user/smlckz) (*.net *.split)
[01:10:29] *** Quits: mrus (~mrus@149.28.224.172) (*.net *.split)
[01:10:30] *** Quits: disconnect3d (~disconnec@user/disconnect3d) (*.net *.split)
[01:10:30] *** Quits: terminalpusher (~terminalp@2a01:586:2941:1:e472:132f:6ad:d0f3) (*.net *.split)
[01:10:30] *** Quits: kish` (~sid742412@user/aqua) (*.net *.split)
[01:10:30] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (*.net *.split)
[01:10:30] *** Quits: admal (~admal@gateway/tor-sasl/admal) (*.net *.split)
[01:10:30] *** Quits: de-facto (~de-facto@user/de-facto) (*.net *.split)
[01:10:30] *** Quits: teepee (~teepee@openscad/teepee) (*.net *.split)
[01:10:30] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (*.net *.split)
[01:10:30] *** Quits: bindu (~bindu@user/bindu) (*.net *.split)
[01:10:30] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (*.net *.split)
[01:10:30] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (*.net *.split)
[01:10:30] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[01:10:30] *** Quits: tejr (~tejr@user/tejr) (*.net *.split)
[01:10:52] *** Joins: cul8r (~cul8r@2601:8c3:4000:b0d0::c2b3)
[01:12:52] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 264 seconds)
[01:13:14] *** Joins: u0_a3911 (~u0_a391@2603-6010-a141-6fa3-c4fd-876a-2db9-8bd1.res6.spectrum.com)
[01:13:51] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[01:14:29] *** Quits: Spydar007 (~spydar007@user/spydar007) (Max SendQ exceeded)
[01:14:31] *** Joins: Colt (~Colt@user/colt)
[01:14:31] *** Joins: Ckat (~Ckat@xn--z7x.xn--6frz82g)
[01:14:31] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[01:14:31] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[01:14:31] *** Joins: nuxil (~nuxil@141.195.51.213)
[01:14:31] *** Joins: PortableDave (~portabled@203.221.7.107)
[01:14:31] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[01:14:31] *** Joins: tbcr_ (~tbcr@107.13.189.161)
[01:14:31] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[01:14:31] *** Joins: dutch (~DutchIngr@user/dutch)
[01:14:31] *** Joins: quartz (~quartz@user/quartz)
[01:14:31] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:14:31] *** Joins: g2anj (~v@39.112.227.198)
[01:14:31] *** Joins: rcf (rcf@sdf.org)
[01:14:31] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[01:14:31] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[01:14:31] *** Joins: esselfe (~steph@user/esselfe)
[01:14:31] *** Joins: tazle (tazle@kapsi.fi)
[01:14:31] *** Joins: M101donutman[m] (~M101donut@2001:470:69fc:105::d51)
[01:14:31] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[01:14:31] *** Joins: Deewiant (~deewiant@2001:470:69fc:105::2fd3)
[01:14:31] *** Joins: bruda (~bruda@172.58.59.79)
[01:14:31] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[01:14:31] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[01:14:31] *** Joins: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37)
[01:14:31] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[01:14:31] *** Joins: jinsun_ (~jinsun@user/jinsun)
[01:14:31] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[01:14:31] *** Joins: Betal (~Betal@user/betal)
[01:14:31] *** Joins: th1 (~th@test.secomondo.dk)
[01:14:31] *** Joins: terminalpusher (~terminalp@2a01:586:2941:1:e472:132f:6ad:d0f3)
[01:14:31] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[01:14:31] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:14:31] *** Joins: mixfix41 (~homefame@user/mixfix41)
[01:14:31] *** Joins: synapt (NBishop@o.apocaleaps.com)
[01:14:31] *** Joins: kish` (~sid742412@user/aqua)
[01:14:31] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[01:14:31] *** Joins: kurahaupo (~kurahaupo@pa49-180-186-164.pa.nsw.optusnet.com.au)
[01:14:31] *** Joins: fputs (~fputs@67.59.83.166)
[01:14:31] *** Joins: charadon (~charadon@155.138.164.183)
[01:14:31] *** Joins: nyah (~nyah@94.6.71.219)
[01:14:31] *** Joins: Akuli (~Akuli@213.216.208.32)
[01:14:31] *** Joins: mrig (~mrig@user/mrig)
[01:14:31] *** Joins: beencubed (~beencubed@209.131.238.248)
[01:14:31] *** Joins: ckdCreations (~ckdCreati@147.55.130.38)
[01:14:31] *** Joins: lemontree (~chat@user/lemontree)
[01:14:31] *** Joins: noord (~noord@user/noord)
[01:14:31] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[01:14:31] *** Joins: superboot (~agentgasm@user/superboot)
[01:14:31] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[01:14:31] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[01:14:31] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[01:14:31] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[01:14:31] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[01:14:31] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[01:14:31] *** Joins: wovixo (~wovixo@128.104.205.49)
[01:14:31] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[01:14:31] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[01:14:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:14:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[01:14:31] *** Joins: slidercrank (~slidercra@user/slidercrank)
[01:14:31] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[01:14:31] *** Joins: cursey (~cursey@user/cursey)
[01:14:31] *** Joins: pony (sid524992@smol/hors)
[01:14:31] *** Joins: haniaF (~haniaF@83.24.192.250.ipv4.supernova.orange.pl)
[01:14:31] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[01:14:31] *** Joins: zwr (~zwr@2804:d45:b966:fb00:3ac9:5265:a79e:4a2a)
[01:14:31] *** Joins: psyxopompos (~psyxopomp@user/psyxopompos)
[01:14:31] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:14:31] *** Joins: Burgundy (~yomon@79.115.213.171)
[01:14:31] *** Joins: plastico (~plastico@neomutt/plastico)
[01:14:31] *** Joins: de-facto (~de-facto@user/de-facto)
[01:14:31] *** Joins: earnest (~earnest@user/earnestly)
[01:14:31] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[01:14:31] *** Joins: ztx (~ztx@user/ztx)
[01:14:31] *** Joins: LucaTM (~LucaTM@user/lucatm)
[01:14:31] *** Joins: rahl (~rahl@102.114.49.104)
[01:14:31] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[01:14:31] *** Joins: luizfrds1 (~Luiz@152.250.243.147)
[01:14:31] *** Joins: teepee (~teepee@openscad/teepee)
[01:14:31] *** Joins: iomari891 (~iomari891@105.112.138.38)
[01:14:31] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[01:14:31] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[01:14:31] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[01:14:31] *** Joins: Chaser (~Chaser@user/chaser)
[01:14:31] *** Joins: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30)
[01:14:31] *** Joins: TheDcoder[m] (~thedcoder@user/thedcoder)
[01:14:31] *** Joins: ai (nukedclx@shell.k4be.pl)
[01:14:31] *** Joins: simontime (~simontime@irc.simonti.me)
[01:14:31] *** Joins: novasharper (~novasharp@2001:470:69fc:105::b4a)
[01:14:31] *** Joins: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com)
[01:14:31] *** Joins: regulate (~regulate@koduro.com)
[01:14:31] *** Joins: monchi (~joints@143.198.92.132)
[01:14:31] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[01:14:31] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[01:14:31] *** Joins: ElementW (~tungsten@hoodie.elementw.net)
[01:14:31] *** Joins: mweckbecker (~matthias@weckbecker.name)
[01:14:31] *** Joins: les (znc@user/les)
[01:14:31] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[01:14:31] *** Joins: tm512 (~tm512@user/tm512)
[01:14:31] *** Joins: markand (~markand@markand.fr)
[01:14:31] *** Joins: krissmaster (~kriss@213.239.83.90)
[01:14:31] *** Joins: Isthmusi (~Isthmus@user/isveni)
[01:14:31] *** Joins: Adie (cummy@adie.space)
[01:14:31] *** Joins: Dotz0cat (~Dotz0cat@h14.95.187.173.dynamic.ip.windstream.net)
[01:14:31] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[01:14:31] *** Joins: Twix (~None@2a01:4f8:192:23d0::1be4:a)
[01:14:31] *** Joins: phroa (~phroa@user/phroa)
[01:14:31] *** Joins: randm (~randm@user/randm)
[01:14:31] *** Joins: acolarh (~niels@3e6be663.rev.stofanet.dk)
[01:14:31] *** Joins: Dijky (~Dijky@user/dijky)
[01:14:31] *** Joins: zlg (~zlg@user/zlg)
[01:14:31] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[01:14:31] *** Joins: shalok (~shalok@user/shalok)
[01:14:31] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[01:14:31] *** Joins: Moonspell (moon@194.87.139.59)
[01:14:31] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[01:14:31] *** Joins: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com)
[01:14:31] *** Joins: clarity (~clarity@user/clarity)
[01:14:31] *** Joins: grange_c (~grange_c@vps-9763379d.vps.ovh.net)
[01:14:31] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[01:14:31] *** Joins: graphitemaster (~graphitem@user/graphitemaster)
[01:14:31] *** Joins: mniip (mniip@libera/staff/mniip)
[01:14:31] *** Joins: jenkins (~jenkins@user/jenkins)
[01:14:31] *** Joins: Learath2 (~learath2@user/learath2)
[01:14:31] *** Joins: welt (~welt@willow.spiderden.net)
[01:14:31] *** Joins: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6)
[01:14:31] *** Joins: Brewster (~Brewster@104.145.226.5)
[01:14:31] *** Joins: summerisle (~eof@tty3.dev)
[01:14:31] *** Joins: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75)
[01:14:31] *** Joins: sivoais (~zaki@199.19.225.239)
[01:14:31] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[01:14:31] *** Joins: gl (~x@pwn.lu)
[01:14:31] *** Joins: begriffs_ (~begriffs@user/begriffs)
[01:14:31] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[01:14:31] *** Joins: BlueShark (sid10311@user/blueshark)
[01:14:31] *** Joins: nohit (sid334887@id-334887.tinside.irccloud.com)
[01:14:31] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[01:14:31] *** Joins: midhun__ (~liberapoo@117.212.160.238)
[01:14:31] *** Joins: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com)
[01:14:31] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[01:14:31] *** Joins: nostar (~nostar@68.51.221.108)
[01:14:31] *** Joins: bindu (~bindu@user/bindu)
[01:14:31] *** Joins: Soni (~quassel@autistic.space)
[01:14:31] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[01:14:31] *** Joins: mongrel (uid508343@id-508343.ilkley.irccloud.com)
[01:14:31] *** Joins: pizdets (~pizdets@183.182.110.253)
[01:14:31] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[01:14:31] *** Joins: useretail (~useretail@185.132.19.151)
[01:14:31] *** Joins: trisk (~trisk@2601:196:4700:106e:8:20ff:fe3e:890e)
[01:14:31] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[01:14:31] *** Joins: mplio (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net)
[01:14:31] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[01:14:31] *** Joins: p0g0 (~p0g0@64.45.183.0)
[01:14:31] *** Joins: domve (~dom@user/domve)
[01:14:31] *** Joins: VincentValentine (~VincentVa@79.126.106.250)
[01:14:31] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[01:14:31] *** Joins: Xeroine (~Xeroine@user/xeroine)
[01:14:31] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[01:14:31] *** Joins: Telvana (~capo@user/telvana)
[01:14:31] *** Joins: sheb (~sheb@31.223.228.71)
[01:14:31] *** Joins: ntwk (~ntwk@user/ntwk)
[01:14:31] *** Joins: Viewday11 (~Viewday@user/viewday)
[01:14:31] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[01:14:31] *** Joins: Dreg- (~Dreg@fr33project.org)
[01:14:31] *** Joins: arminweigl (~arminweig@sourcehut/user/arminweigl)
[01:14:31] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[01:14:31] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[01:14:31] *** Joins: davidv7 (~davidv7@user/videogameenjoyer)
[01:14:31] *** Joins: scarce (~scarce@sourcehut/user/scarce)
[01:14:31] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[01:14:31] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:14:31] *** Joins: Pentode (~Pentode@mobile-166-171-57-43.mycingular.net)
[01:14:31] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[01:14:31] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[01:14:31] *** Joins: cool2077 (~cool333@bzq-79-176-139-177.red.bezeqint.net)
[01:14:31] *** Joins: llh (~llh@user/llh)
[01:14:31] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[01:14:31] *** Joins: Albright (~Albright@149.28.13.173)
[01:14:31] *** Joins: EdFletcher (~PKD@user/edfletcher)
[01:14:31] *** Joins: nahcetan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[01:14:31] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:14:31] *** Joins: samir (~azureuser@user/samir)
[01:14:31] *** Joins: bch_x (~bch@S01069050ca2cbf63.ok.shawcable.net)
[01:14:31] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[01:14:31] *** Joins: Red (~Red@97.109-247-81.customer.lyse.net)
[01:14:31] *** Joins: selikolg (~selikolg@178.62.2.76)
[01:14:31] *** Joins: Thedarkb (~Thedarkb@86-42-4-182-dynamic.agg3.kny.prp-wtd.eircom.net)
[01:14:31] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:ede1:63e1:1b15:d52)
[01:14:31] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[01:14:31] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[01:14:31] *** Joins: NEYi (~NEYi@109.251.216.38)
[01:14:31] *** Joins: mintograde (~mintograd@47.201.5.61)
[01:14:31] *** Joins: gnoo (gnoo@user/gnoo)
[01:14:31] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:14:31] *** Joins: fluter (~fluter@user/fluter)
[01:14:31] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[01:14:31] *** Joins: ns12 (~ns12@user/ns12)
[01:14:31] *** Joins: trenka (~ykaliuta@user/trenka)
[01:14:31] *** Joins: Praise (~Fat@user/praise)
[01:14:31] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[01:14:31] *** Joins: sudden (~cat@user/sudden)
[01:14:31] *** Joins: celphi_ (sid97751@user/celphi)
[01:14:31] *** Joins: buhman (sid411355@user/buhman)
[01:14:31] *** Joins: schna (sid484866@id-484866.helmsley.irccloud.com)
[01:14:31] *** Joins: decartes_ (sid240036@id-240036.helmsley.irccloud.com)
[01:14:31] *** Joins: TallonRain (sid214799@user/tallonrain)
[01:14:31] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[01:14:31] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[01:14:31] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[01:14:31] *** Joins: kristjansson_ (sid126207@id-126207.tinside.irccloud.com)
[01:14:31] *** Joins: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com)
[01:14:31] *** Joins: computerquip (sid423484@user/computerquip)
[01:14:31] *** Joins: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com)
[01:14:31] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[01:14:31] *** Joins: ^tinyweasel^ (~weasel@user/tinyweasel/x-0495158)
[01:14:31] *** Joins: hedaera[m] (~hedaerama@2001:470:69fc:105::1:3ef1)
[01:14:31] *** Joins: mtg (~mtg@209.250.241.226)
[01:14:31] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[01:14:31] *** Joins: fstd (~fstd@xdsl-87-79-98-69.nc.de)
[01:14:31] *** Joins: clamiax (~clamiax@net-37-182-97-22.cust.vodafonedsl.it)
[01:14:31] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[01:14:31] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[01:14:31] *** Joins: BGL (thirty@75-149-171-58-Washington.hfc.comcastbusiness.net)
[01:14:31] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[01:14:31] *** Joins: greenbagels (~gb@user/greenbagels)
[01:14:31] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[01:14:31] *** Joins: bparker (~nobody@user/bparker)
[01:14:31] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[01:14:31] *** Joins: smeso (~smeso@user/smeso)
[01:14:31] *** Joins: clockwor1girl (sophie@funkykitty.net)
[01:14:31] *** Joins: dustinm- (~dustinm@static.38.6.217.95.clients.your-server.de)
[01:14:31] *** Joins: stilbruch (~stilbruch@157.245.122.124)
[01:14:31] *** Joins: Wandering_Glitch (~Wandering@li555-207.members.linode.com)
[01:14:31] *** Joins: routeveg_ (~lee@197.ip-51-195-136.eu)
[01:14:31] *** Joins: mdw_ (~root@159.65.86.163)
[01:14:31] *** Joins: PaulePanter (~paul@mail.gw90.de)
[01:14:31] *** Joins: supernov1h (~supernova@mail.ijk.nz)
[01:14:31] *** Joins: richardwh1uk (richardwhi@scarlet.richardwhiuk.com)
[01:14:31] *** Joins: ethoxy_ (~caretaker@cx21.havox.ru)
[01:14:31] *** Joins: Falconer1 (~ronnyma@227.84-48-191.nextgentel.com)
[01:14:31] *** Joins: savy_ (~z@io.tl)
[01:14:31] *** Joins: LuKaRo_ (~LuKaRo@p5dedaa53.dip0.t-ipconnect.de)
[01:14:31] *** Joins: csjp (~csjp@user/csjp)
[01:14:31] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[01:14:31] *** Joins: puke (~puke@user/puke)
[01:14:31] *** Joins: zopsi_ (zopsi@2600:3c00::f03c:91ff:fe14:551f)
[01:14:31] *** Joins: jkl1337 (~jkl@user/jkl)
[01:14:31] *** Joins: Epakai_ (Epakai@drislock.org)
[01:14:31] *** Joins: herrhotzenplotz (~herrhotze@user/herrhotzenplotz)
[01:14:31] *** Joins: azerty (~azerty@user/badwolf)
[01:14:31] *** Joins: nullptr_ (~nullptr@user/nullptr/x-2182142)
[01:14:31] *** Joins: tonitch (~tonitch@user/tonitch)
[01:14:31] *** Joins: flynn (~mcbloch@user/flynn)
[01:14:31] *** Joins: Cienisty (Cienisty@user/cienisty)
[01:14:31] *** Joins: dhch (~dhch@185.213.154.168)
[01:14:31] *** Joins: spike_spiegel38 (~spike_spi@static.200.4.251.148.clients.your-server.de)
[01:14:31] *** Joins: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net)
[01:14:31] *** Joins: Fairy (~Fairy@2001:464a:4992:0:78b9:dd77:b9a4:c92d)
[01:14:31] *** Joins: relight (~relight@user/relight)
[01:14:31] *** Joins: Beastie (~lcu@user/thebeastie)
[01:14:31] *** Joins: Lyude (~lyudess@pool-96-230-249-157.bstnma.fios.verizon.net)
[01:14:31] *** Joins: coruja (~coruja@user/coruja)
[01:14:31] *** Joins: nomn (nomn@user/nomn)
[01:14:31] *** Joins: poprocks (~logan@user/poprocks)
[01:14:31] *** Joins: Cyp_ (~cyp@213.237.85.9)
[01:14:31] *** Joins: krzych (krzych@nroot.pl)
[01:14:31] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[01:14:31] *** Joins: remedan (~remedan@balak.me)
[01:14:31] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[01:14:31] *** Joins: Zenton (~user@user/zenton)
[01:14:31] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[01:14:31] *** Joins: gdd (~gdd@129.199.146.230)
[01:14:31] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[01:14:31] *** Joins: alip (~alip@exherbo/developer/alip)
[01:14:31] *** Joins: skipper (~whatsupbo@user/scobydoo)
[01:14:31] *** Joins: avar (avar@vm.nix.is)
[01:14:31] *** Joins: nowz (~nowz@user/nowz)
[01:14:31] *** Joins: abraham (~abraham@143.244.185.86)
[01:14:31] *** Joins: g0z (gauze@entropy.tmok.com)
[01:14:31] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[01:14:31] *** Joins: ozzz (~oz@46.49.41.80)
[01:14:31] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[01:14:31] *** Joins: joev1 (~joev@user/joev)
[01:14:31] *** Joins: parazyd (~parazyd@devuan/developer/parazyd)
[01:14:31] *** Joins: jiffe (~jiffe@mail.nsab.us)
[01:14:31] *** Joins: Bou (sid274843@user/bou)
[01:14:31] *** Joins: EtherNet (~ethernet@user/ethernet)
[01:14:31] *** Joins: xSavitar (~xSavitar@user/xsavitar)
[01:14:31] *** Joins: citrons_ (~citrons@alt.mondecitronne.com)
[01:14:31] *** Joins: pinheadmz_ (~pinheadmz@hns-contributor.dev)
[01:14:31] *** Joins: DrNick42_ (~DrNick42@bastion.spikeyfishtech.uk)
[01:14:31] *** Joins: Xgc (~Xgc@user/xgc)
[01:14:31] *** Joins: moose (~moose@user/moose)
[01:14:31] *** Joins: koo5_ (~quassel@51.140.155.227)
[01:14:31] *** Joins: tafa (~tafa@user/tafa)
[01:14:31] *** Joins: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[01:14:31] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[01:14:31] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[01:14:31] *** Joins: digilink (~digilink@user/digilink)
[01:14:31] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[01:14:31] *** Joins: int (~int@0x4.cx)
[01:14:31] *** Joins: daurnimator (~daurnimat@vultr.daurnimator.com)
[01:14:31] *** Joins: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net)
[01:14:31] *** Joins: Jck_true (~jcktrue@188.228.89.240)
[01:14:31] *** Joins: mgocobachi (~m@ancrae.com)
[01:14:31] *** Joins: Khoyo_ (~khoyo@ns328946.ip-37-187-115.eu)
[01:14:31] *** Joins: pippijn (~pippijn@ra.xinutec.org)
[01:14:31] *** Joins: nf (~n@monade.li)
[01:14:31] *** Joins: Trashlord (~trash@user/trashlord)
[01:14:31] *** Joins: cust_ (amaama@blackbox.amaama.org)
[01:14:31] *** Joins: tejr (~tejr@user/tejr)
[01:14:31] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[01:14:31] *** Joins: cpuid (~cpuid@user/cpuid)
[01:14:31] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[01:14:31] *** Joins: illustris (sid211748@id-211748.ilkley.irccloud.com)
[01:14:31] *** Joins: noahmg123 (sid89117@id-89117.ilkley.irccloud.com)
[01:14:31] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[01:14:31] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[01:14:31] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[01:14:31] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[01:14:31] *** Joins: ikiryo (sid109660@user/ikiryo)
[01:14:31] *** Joins: glowcoil (sid3405@id-3405.tinside.irccloud.com)
[01:14:31] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[01:14:31] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[01:14:31] *** Joins: glenfe (sid231748@user/glenfe)
[01:14:31] *** Joins: cengiz_io (sid223191@id-223191.ilkley.irccloud.com)
[01:14:31] *** Joins: catern (~sbaugh@cpe-98-7-229-235.nyc.res.rr.com)
[01:14:31] *** Joins: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net)
[01:14:31] *** Joins: jellie (~luv_panda@user/jellie)
[01:14:31] *** Joins: xcm_ (~xcm@user/xcm)
[01:14:31] *** Joins: twkm (twkm@rfc1459.net)
[01:14:31] *** Joins: haliucinas (~haliucina@5.20.153.21)
[01:14:31] *** Joins: elemongw (~elemongw@20.107.36.50)
[01:14:31] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[01:14:31] *** Joins: omegatron (~some@p54bd5e02.dip0.t-ipconnect.de)
[01:14:31] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[01:14:31] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[01:14:31] *** Joins: subvisor (sid502026@helmsley.irccloud.com)
[01:14:31] *** Joins: englishm (sid6629@tinside.irccloud.com)
[01:14:31] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[01:14:31] *** Joins: immibis (~hexchat@62.156.144.218)
[01:14:31] *** Joins: eau (~chat@user/eau)
[01:14:31] *** Joins: e36freak (~e36freak@user/e36freak)
[01:14:31] *** Joins: avrdude (~avrdude@user/avrdude)
[01:14:31] *** Joins: petererer (~petern@2001:8b0:65dd:8ef1:37be:e06:fb80:4ba2)
[01:14:31] *** Joins: Celelibi (celelibi@user/celelibi)
[01:14:31] *** Joins: towel (~towel@user/towel)
[01:14:31] *** Joins: DCTWD (~dc@uz.utmappro.com)
[01:14:31] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[01:14:31] *** Joins: leosilva (~leosilva@canonical/leosilva)
[01:14:31] *** Joins: caze (~caze@user/caze)
[01:14:31] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[01:14:31] *** Joins: fakenullie (~nullie@london.nullie.name)
[01:14:31] *** Joins: hexology (~hexology@user/hexology)
[01:14:31] *** Joins: dynos01 (~dynos01@li820-149.members.linode.com)
[01:14:31] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[01:14:31] *** Joins: vancz (~vancz@user/vancz)
[01:14:31] *** Joins: buzel (~buzel@fsf/member/buzel)
[01:14:31] *** Joins: alvarezp (quassel@2600:3c01::f03c:91ff:fee5:6d8d)
[01:14:31] *** Joins: hecanjog (~hecanjog@2a01:4f9:6a:5326::2)
[01:14:31] *** Joins: veltas (~veltas@104.236.34.215)
[01:14:31] *** Joins: fcresende (~quassel@vps35015.publiccloud.com.br)
[01:14:31] *** Joins: Ryozuki (~Ryozuki@user/ryozuki)
[01:14:31] *** Joins: gig (~gig@2a01:4f8:141:4424::2)
[01:14:31] *** Joins: andi_ (~andi@user/andi/x-3467420)
[01:14:31] *** Joins: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b)
[01:14:31] *** Joins: Ragnor (~Ragnor@user/ragnor)
[01:14:31] *** Joins: livestradamus (~quassel@user/livestradamus)
[01:14:31] *** Joins: xrj (~av@2a01:4f8:c17:7cba::1)
[01:14:31] *** Joins: vt (~vt@osa.vbc.su)
[01:14:31] *** Joins: Daemoen (~Daemoen@daemoen.ct-unlimited.com)
[01:14:31] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[01:14:31] *** Joins: dmgk (~dmgk@user/dmgk)
[01:14:31] *** Joins: Emil (emil@emil.fi)
[01:14:31] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[01:14:31] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[01:14:31] *** Joins: cebor (~cebor@user/cebor)
[01:14:31] *** Joins: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5)
[01:14:31] *** Joins: jkssodhxu[m] (~barzarian@2001:470:69fc:105::1:3a12)
[01:14:31] *** Joins: riv (river@tilde.team/user/river)
[01:14:31] *** Joins: steve_ (~steve@ool-182c2b80.dyn.optonline.net)
[01:14:31] *** Joins: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e)
[01:14:31] *** Joins: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d)
[01:14:31] *** Joins: Roman[m] (~wrongt@2001:470:69fc:105::341e)
[01:14:31] *** Joins: guest[m] (~guestkdeo@2001:470:69fc:105::ffb0)
[01:14:31] *** Joins: volgar1x (~volgar1xm@2001:470:69fc:105::e61d)
[01:14:31] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[01:14:31] *** Joins: enick_958 (~mercvrivs@2001:470:69fc:105::2ee6)
[01:14:31] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[01:14:31] *** Joins: psydroid (~psydroid@user/psydroid)
[01:14:31] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[01:14:31] *** Joins: hussam (~hussam@user/hussam)
[01:14:31] *** Joins: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1)
[01:14:31] *** Joins: M77hamster7[m] (~M77hamste@2001:470:69fc:105::1:308a)
[01:14:31] *** Joins: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4)
[01:14:31] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[01:14:31] *** Joins: VICultist[m] (~jesingsma@2001:470:69fc:105::1:2bb8)
[01:14:31] *** Joins: sandman13 (sandman13@sandman13.jujube.ircnow.org)
[01:14:31] *** Joins: randy408[m] (~randy408m@2001:470:69fc:105::2f5e)
[01:14:31] *** Joins: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com)
[01:14:31] *** Joins: atulu[m] (~atulumatr@2001:470:69fc:105::d50c)
[01:14:31] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[01:14:31] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[01:14:31] *** Joins: Akawama[m] (~akawama@user/akawama)
[01:14:31] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[01:14:31] *** Joins: kuku (~kuku@user/kuku)
[01:14:31] *** Joins: Matt|home (~matt@adsl-74-233-58-226.mia.bellsouth.net)
[01:14:31] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[01:14:31] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[01:14:31] *** Joins: lowin (~lowin@user/lowin)
[01:14:31] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[01:14:31] *** Joins: marcj (~marc@205.175.215.25)
[01:14:31] *** Joins: high_ground (~yes@user/high-ground/x-5722129)
[01:14:31] *** Joins: Elladan (~elladan@user/elladan)
[01:14:31] *** Joins: edk (edk@libera/staff/edk)
[01:14:31] *** Joins: Muzer (~muzer@tim32.org)
[01:14:31] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[01:14:31] *** Joins: ra4king (~ra4king@roiatalla.com)
[01:14:31] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[01:14:31] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[01:14:31] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[01:14:31] *** Joins: pnill (~pnill@ip170.ip-54-39-37.net)
[01:14:31] *** Joins: zacts (~zacts@user/zacts)
[01:14:31] *** Joins: asd (~noname@user/asd)
[01:14:31] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[01:14:31] *** Joins: deflected (~deflected@user/deflected)
[01:14:31] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[01:14:31] *** Joins: amorel (~amorel@mx.mompl.net)
[01:14:31] *** Joins: finalsummer (~finalsumm@user/finalsummer)
[01:14:31] *** Joins: emias (~holger@home.zedat.fu-berlin.de)
[01:14:31] *** Joins: disconnect3d (~disconnec@user/disconnect3d)
[01:14:31] *** Joins: mrus (~mrus@149.28.224.172)
[01:14:31] *** Joins: |smlckz| (smlckz@user/smlckz)
[01:14:31] *** Joins: SoF (~skius@user/skius)
[01:14:31] *** Joins: Haise0 (~haise01@user/haise01)
[01:14:31] *** Joins: Karyon (~Karyon@user/karyon)
[01:14:31] *** Joins: DarkUranium (~DarkUrani@stdrand.com)
[01:14:31] *** Joins: kplant (~kplant@user/kplant)
[01:14:31] *** Joins: klys_ (~mdasoh@show.op8.us)
[01:14:31] *** Joins: kernelc_ (~kornel@46.101.204.33)
[01:14:31] *** Joins: lm- (~lm-@vps-a26d080c.vps.ovh.net)
[01:14:31] *** Joins: LangerJan (~jan@user/langerjan)
[01:14:31] *** Joins: shan (shan@cyblog/maintainer/shan)
[01:14:31] *** Joins: [R] (~rs@genoce.org)
[01:14:31] *** Joins: apotheon (~apotheon@copyfree/founder/apotheon)
[01:14:31] *** Joins: nikomo (~quassel@nikomo.fi)
[01:14:31] *** Joins: meowray (~MaskRay@user/meowray)
[01:14:31] *** Joins: Artea (~Lufia@artea.com.pt)
[01:14:31] *** Joins: vinay (~Vinay@user/vinay-keshava)
[01:14:31] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[01:14:31] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[01:14:31] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[01:14:31] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[01:14:31] *** Joins: majors (~majors@user/majors)
[01:14:31] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[01:14:31] *** Joins: dstein64 (~dstein64@dannyadam.com)
[01:14:31] *** Joins: bsandro (~bsandro@139.138.197.56)
[01:14:31] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[01:14:31] *** Joins: f0xb4t (~mac@78.46.13.69)
[01:14:31] *** Joins: eletrotupi (eletrotupi@user/eletrotupi)
[01:14:31] *** Joins: oj (oj@user/oj)
[01:14:31] *** Joins: lonjil (~quassel@user/lonjil)
[01:14:31] *** Joins: Riviera (Riviera@user/riviera)
[01:14:31] *** Joins: bleb (~cm@user/bleb)
[01:14:31] *** Joins: adinf (~ariel@2001:19f0:5:5337:5400:3ff:fe6c:38e9)
[01:14:31] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[01:14:31] *** Joins: divine (~divine@2001:470:8247:1::31)
[01:14:31] *** Joins: krychu (~krychu@static.152.151.251.148.clients.your-server.de)
[01:14:31] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[01:14:31] *** Joins: dos (~dos@dosowisko.net)
[01:14:31] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[01:14:31] *** Joins: tobiasu (~tobiasu@user/tobiasu)
[01:14:31] *** Joins: oldlaptop (~quassel@45.63.78.126)
[01:14:31] *** Joins: MrC (Ben@mrbenc.net)
[01:14:31] *** Joins: sicelo (~sicelo@user/sicelo)
[01:14:31] *** Joins: sebbu (~sebbu@user/sebbu)
[01:14:31] *** Joins: tempora (~tempus@user/tempora)
[01:14:31] *** Joins: dme2 (~dme2@67.205.140.199)
[01:14:31] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[01:14:31] *** Joins: wyre (~wyre@user/wyre)
[01:14:31] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[01:14:31] *** Joins: trn (jhj@sourcehut/user/trn)
[01:14:31] *** Joins: sdk_ (~x@shell.codevoid.de)
[01:14:31] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[01:14:31] *** Joins: dupondje (~dupondje@artemis.dupie.be)
[01:14:31] *** Joins: ndorf (~nd@ob.noxio.us)
[01:14:31] *** Joins: gemelen (~gemelen@zooey.gemelen.net)
[01:14:31] *** Joins: enyc (~enyc@user/enyc)
[01:14:31] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[01:14:31] *** Joins: _4p3 (~ape@kanonenjagd.panzer.ninja)
[01:14:31] *** Joins: chiptuner (~bobby@user/chiptuner)
[01:14:31] *** Joins: orkim (~orkim@user/orkim)
[01:14:31] *** Joins: jason1234 (fltk@thunix.net)
[01:14:31] *** Joins: shachaf (~shachaf@user/shachaf)
[01:14:31] *** Joins: koisoke (xef4@epilogue.org)
[01:14:31] *** Joins: strudl (~strudl@user/strudl)
[01:14:31] *** Joins: kline (~freedom0@libera/staff/kline)
[01:14:31] *** Joins: Stx (stx@libera/staff/stx)
[01:14:31] *** Joins: n1000 (~n1000@user/n1000)
[01:14:31] *** Joins: bone (~bone@user/mbo)
[01:14:31] *** Joins: Justin_T (~Justin@user/justin-t/x-2449983)
[01:14:31] *** Joins: dzz007 (~dzz007@user/dzz007)
[01:14:31] *** Joins: grumble (grumble@user/grumble)
[01:14:31] *** Joins: polyrob (~rob@user/polyrob)
[01:14:31] *** Joins: reda_ (~reda@user/reda)
[01:14:31] *** Joins: root_ (~root@dhcp-24-53-243-12.cable.user.start.ca)
[01:14:31] *** Joins: edr (~edr@user/edr)
[01:14:31] *** Joins: dansan (~daniel@75.81.148.51)
[01:14:31] *** Joins: andjjj23 (~irc@107.170.228.47)
[01:14:31] *** Joins: AndrewYu (~andrew@user/andrewyu)
[01:14:31] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[01:14:31] *** Joins: tyzoid (~tyzoid@2607:5600:dc::2)
[01:14:31] *** Joins: eeerik8 (~eeerik8@95.179.149.48)
[01:14:31] *** Joins: con3 (~con3@143.198.53.32)
[01:14:31] *** Joins: APic (apic@apic.name)
[01:14:31] *** Joins: satanist (~satanist@bureaucracy.bureaucracy.de)
[01:14:31] *** Joins: Freman (~Freman@flatus.fremnet.net)
[01:14:31] *** Joins: rkta (~rkta_@2a00:f48:1003:1::8bee:ec40)
[01:14:31] *** Joins: Exa (exa@irc.moe)
[01:14:31] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[01:14:31] *** Joins: cehteh (~ct@git.pipapo.org)
[01:14:31] *** Joins: fizzie (irc@selene.zem.fi)
[01:14:31] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[01:14:31] *** Joins: laris (undead@37.221.209.36)
[01:14:33] *** Quits: glider (~glider@user/glider) (Max SendQ exceeded)
[01:14:54] *** Quits: kish` (~sid742412@user/aqua) (Quit: Leaving)
[01:15:14] *** Joins: Spydar007 (~spydar007@user/spydar007)
[01:15:21] *** Joins: glider (~glider@user/glider)
[01:15:52] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[01:16:17] *** Joins: Colt (~Colt@user/colt)
[01:16:28] *** Quits: u0_a391 (~u0_a391@2600:380:5e41:11ab:4ab1:d59:d160:336) (Ping timeout: 264 seconds)
[01:16:56] *** Quits: sunarch (uid526836@user/sunarch) (Ping timeout: 268 seconds)
[01:17:38] *** Joins: sunarch (uid526836@user/sunarch)
[01:17:44] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[01:18:52] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[01:21:00] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[01:23:07] *** Quits: kurahaupo (~kurahaupo@pa49-180-186-164.pa.nsw.optusnet.com.au) (Quit: Quit)
[01:23:54] *** Joins: kurahaupo (~kurahaupo@pa49-180-186-164.pa.nsw.optusnet.com.au)
[01:25:00] *** Quits: Akuli (~Akuli@213.216.208.32) (Quit: Akuli)
[01:27:26] *** Joins: Enitin (~Enitin@82.102.22.84)
[01:28:46] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:30:47] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[01:33:16] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[01:33:28] *** Quits: nostar (~nostar@68.51.221.108) (Remote host closed the connection)
[01:33:43] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[01:36:21] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:36:44] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 252 seconds)
[01:36:59] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[01:39:25] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Read error: No route to host)
[01:40:09] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:41:39] *** Joins: seninha (~seninha@user/seninha)
[01:45:49] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:45:52] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 264 seconds)
[01:47:04] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 264 seconds)
[01:47:49] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[01:49:40] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[01:49:54] *** Quits: akahs (~Shaka@user/shaka) (Quit: .)
[01:51:18] *** Joins: ChromaCat248 (~ChromaCat@user/chromacat248)
[01:51:25] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[01:51:51] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[01:53:22] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::c2b3) (Quit: abducted by aliens)
[01:53:31] *** Quits: terminalpusher (~terminalp@2a01:586:2941:1:e472:132f:6ad:d0f3) (Remote host closed the connection)
[01:53:59] *** Quits: aradesh (~aradesh@2a02:c7c:120a:b200:d586:113:c744:5fea) (Quit: WeeChat 1.9.1)
[01:54:47] *** Joins: dutch (~DutchIngr@user/dutch)
[01:55:08] *** Joins: arinov (~arinov@213.194.126.155)
[01:56:26] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[01:57:01] *** Quits: superdupond (~Kev@2a01cb0400149f00f4d81e3213220661.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[01:58:11] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 252 seconds)
[02:03:13] *** Quits: ckdCreations (~ckdCreati@147.55.130.38) (Read error: Connection reset by peer)
[02:03:17] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:03:26] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:03:29] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[02:10:36] *** Joins: seninha (~seninha@user/seninha)
[02:16:26] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:16:40] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[02:30:16] *** Quits: rgrinberg (~textual@200.5.63.76) (Ping timeout: 264 seconds)
[02:33:48] *** Joins: pizdets_ (~pizdets@183.182.110.241)
[02:34:06] *** Quits: pizdets (~pizdets@183.182.110.253) (Ping timeout: 245 seconds)
[02:35:00] *** Joins: rgrinberg (~textual@200.5.63.76)
[02:38:09] *** Joins: SymbioticFemale (~Symbiotic@gateway/tor-sasl/symbioticfemale)
[02:38:40] *** Quits: mahmutov (~mahmutov@5.176.50.7) (Ping timeout: 264 seconds)
[02:39:23] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[02:39:33] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[02:42:36] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[02:51:21] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:53:08] *** Joins: dld (~dld@107.126.252.194)
[02:54:16] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 264 seconds)
[02:56:36] *** Joins: soapsudsxx (~soapsudsx@209.221.40.158)
[02:58:08] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[03:00:42] *** Joins: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net)
[03:01:09] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[03:01:26] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[03:01:33] <rackj> If I have a pointer of uint64_t*, and I want to write 64 bytes (not bits) of data, is this valid or UB?
[03:01:45] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[03:02:01] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[03:02:14] <floatcomplex> dependa
[03:02:19] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:02:31] <floatcomplex> depends on how many uint64_t's it points at
[03:02:58] *** Joins: cleverness_ (~clevernes@45.144.113.25)
[03:03:53] <rackj> always 64 bytes, the uint64_t* points at the first 8 bytes
[03:05:25] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:05:36] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Ping timeout: 265 seconds)
[03:07:03] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:07:30] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[03:07:56] *** Joins: rgrinberg (~textual@200.5.63.76)
[03:08:04] *** Quits: dld (~dld@107.126.252.194) (Ping timeout: 264 seconds)
[03:08:33] *** Joins: dld (~dld@107.126.253.134)
[03:08:57] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[03:10:29] *** Joins: cleverness__ (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[03:10:49] <Twix> rackj, so its an array of 8 uint64_t? Why should that be UB?
[03:12:59] *** Quits: cleverness_ (~clevernes@45.144.113.25) (Ping timeout: 252 seconds)
[03:14:12] <Twix> But you are not allowed to make assumptions on how the uint64_t are represented in memory.(e.g. the endianess or how the sign works. Things like this are an implementation detail and C does not specify how ints are represented in the memory)
[03:14:44] <Twix> if you really mean bytes, you might want to use char * or uint8_t *
[03:16:07] *** Joins: azed (~azed@154.110.185.86)
[03:21:05] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[03:21:47] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[03:23:20] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:23:37] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[03:34:44] *** Joins: kuoi (~kuoi@109.175.166.59)
[03:36:26] *** Quits: kuoi (~kuoi@109.175.166.59) (Remote host closed the connection)
[03:37:22] *** Joins: FragByte_ (~christian@user/fragbyte)
[03:37:32] *** Quits: FragByte (~christian@user/fragbyte) (Ping timeout: 268 seconds)
[03:37:50] *** FragByte_ is now known as FragByte
[03:39:06] *** Joins: kuoi (~kuoi@109.175.166.59)
[03:39:23] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[03:39:39] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:40:21] *** Joins: ckdCreations (~ckdCreati@147.55.133.135)
[03:41:02] *** Quits: edk (edk@libera/staff/edk) (Read error: Connection reset by peer)
[03:41:29] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:41:39] *** Joins: edk (edk@libera/staff/edk)
[03:43:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-bc7b-beb0-653c-822c.res6.spectrum.com)
[03:44:59] *** Quits: kuoi (~kuoi@109.175.166.59) (Remote host closed the connection)
[03:49:43] *** Joins: Atque (~Atque@user/atque)
[03:50:23] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[03:51:45] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[03:51:58] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[03:52:32] *** Joins: chenqisu1 (~03cia7d@183.217.200.156)
[03:53:30] *** Quits: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net) (Quit: Client closed)
[03:54:16] *** Quits: dld (~dld@107.126.253.134) (Ping timeout: 264 seconds)
[03:55:23] *** Joins: noord (~noord@user/noord)
[03:57:25] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[03:57:32] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[03:59:31] *** Joins: wroathe (~wroathe@user/wroathe)
[03:59:50] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:01:23] *** Joins: Wulf (~Wulf@user/wulf)
[04:05:09] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[04:05:54] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[04:08:44] *** Joins: malloy (~jimery@116.30.222.115)
[04:09:24] *** Quits: acolarh (~niels@3e6be663.rev.stofanet.dk) (Ping timeout: 265 seconds)
[04:11:20] *** Quits: ntwk (~ntwk@user/ntwk) (Ping timeout: 265 seconds)
[04:11:45] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:13:59] *** Joins: ntwk (~ntwk@user/ntwk)
[04:15:16] *** Joins: rgrinberg (~textual@200.5.63.76)
[04:16:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:16:13] <nitrix> There's only a single representation for uint64_t: it's two's complement. There can be also be no sign bit nor padding bits. The endianness remains a problem but easily solvable.
[04:16:28] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[04:18:30] <asd> what's a safe way to define a min() and max() function in C? It feels like if i define it as a macro and call it with functions it may evaluate the function twice...
[04:20:12] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[04:20:12] <asd> in my case im just using `int min(int a, int b) { if (a<b) return a; return b;}` as i dont trust a macro will evaluate function parameters...
[04:20:13] <nitrix> Multiple functions and the macro should be #define min(x) _Generic(x, int: min, float: minf, long: minl)(x).
[04:20:58] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:21:16] *** Quits: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr) (Quit: Leaving)
[04:22:22] <nitrix> Macros don't evaluate expressions (that happens during program execution), they expand tokens (which happens during translation).
[04:22:40] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Quit: This computer has gone to sleep)
[04:22:45] *** Joins: acolarh (~niels@3e6be663.rev.stofanet.dk)
[04:23:17] <asd> well said
[04:23:32] <nitrix> Was I being evaluated?
[04:23:54] *** Joins: dohtem (uid524096@user/dohtem)
[04:24:02] <asd> no, it made more sense in general terms for me...
[04:24:40] <nitrix> The monomorphic approach with a single type int is fine if that's all you need at the moment.
[04:24:55] *** Joins: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[04:26:28] *** Quits: azed (~azed@154.110.185.86) (Quit: WeeChat 3.3)
[04:27:47] *** Quits: acolarh (~niels@3e6be663.rev.stofanet.dk) (Ping timeout: 252 seconds)
[04:28:05] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[04:28:05] <nitrix> You could even put the logic directly where you need it and not bother with defining a function/macro too, depending how often you need it.
[04:29:38] <asd> int best = INT_MAX; best = best < solve_recursive(x-1) ? best : solve_recursive(x-1); // my concern was that writing that would call that function twice
[04:29:57] *** Joins: orthoplex64 (~crm@70.120.0.94)
[04:31:28] <nitrix> It will have to if it contains side effects. Otherwise, any reasonable optimizer will memoize that easily.
[04:31:55] *** Joins: diamondbond (~diamondbo@175.157.188.250)
[04:32:04] *** Joins: frost (~frost@user/frost)
[04:32:24] *** Quits: diamondbond (~diamondbo@175.157.188.250) (Read error: Connection reset by peer)
[04:32:37] *** Joins: liiix (~liiix@user/liiix)
[04:33:05] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[04:33:37] <nitrix> You could do that manually yourself or the min function from earlier. I think I find the min function more readable here, because it's inline.
[04:33:58] *** Joins: cmburn (~cmburn@2601:441:4c00:67d:d333:655:39a8:230b)
[04:34:10] <asd> yeah im sticking to the `int min()` i was wondering if that was considered acceptable in practice, seems like it's one of the more sane methods
[04:35:15] *** Joins: pgib (~textual@173.38.117.87)
[04:36:26] <nitrix> Yeah, usually C functions that needs to be overloaded come in typed flavors with prefixes and suffixes. cos, cosf, cosl, or even, printf, sprintf, sfprintf, vsprintf, vsnprintf, etc.
[04:37:50] <nitrix> _Generic is a recent C11 addition to try to make things less absurd. Still fairly new to people and so, not commonly used.
[04:41:06] *** Joins: acolarh (~niels@3e6be663.rev.stofanet.dk)
[04:42:16] *** Quits: random-nick (~random-ni@87.116.165.83) (Ping timeout: 264 seconds)
[04:42:52] *** Quits: cleverness__ (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[04:43:08] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[04:43:10] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:43:11] *** Quits: alch (~alch@ca-18-218-57.service.infuturo.it) (Read error: Connection reset by peer)
[04:44:41] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[04:45:22] *** Quits: HisShadow_ (~HisShadow@user/hisshadow) (Ping timeout: 268 seconds)
[04:45:52] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 264 seconds)
[04:46:42] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[04:46:59] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Quit: This computer has gone to sleep)
[04:47:36] *** Joins: alch (~alch@pa-18-186-225.service.infuturo.it)
[04:49:59] *** Joins: kuoi (~kuoi@109.175.166.59)
[04:51:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[04:53:32] *** Quits: liiix (~liiix@user/liiix) (Quit: Client closed)
[04:59:03] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[05:00:26] <caze> printf prints more than floats though.
[05:01:15] *** Quits: frost (~frost@user/frost) (Quit: Ping timeout (120 seconds))
[05:01:35] *** Quits: ChromaCat248 (~ChromaCat@user/chromacat248) (Remote host closed the connection)
[05:04:13] *** Joins: Atque (~Atque@user/atque)
[05:05:15] *** Joins: frost (~frost@user/frost)
[05:07:18] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[05:07:38] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:07:38] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:07:38] *** Joins: wroathe (~wroathe@user/wroathe)
[05:08:50] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:11:26] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:11:31] *** Joins: arandomcomrade (~arandomco@user/arandomcomrade)
[05:11:58] *** u0_a3911 is now known as Kit
[05:12:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:13:59] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 252 seconds)
[05:15:46] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[05:16:09] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:17:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:17:16] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:17:16] *** Joins: wroathe (~wroathe@user/wroathe)
[05:17:27] *** hexology is now known as hexology_
[05:17:51] *** hexology_ is now known as hexology__
[05:18:03] *** Quits: Feuermagier_ (~Feuermagi@154.28.188.22) (Ping timeout: 268 seconds)
[05:18:08] *** hexology__ is now known as hexology`
[05:18:12] *** hexology` is now known as hexology_`
[05:18:25] *** Joins: dutch (~DutchIngr@user/dutch)
[05:18:57] *** hexology_` is now known as hexology
[05:21:12] *** Joins: thysermip (~thysermip@152.249.76.17)
[05:21:14] *** Quits: thysermip (~thysermip@152.249.76.17) (Remote host closed the connection)
[05:25:42] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[05:32:41] *** Quits: earnest (~earnest@user/earnestly) (Ping timeout: 252 seconds)
[05:35:32] *** Joins: peve (~peve@2601:281:8700:5880::8577)
[05:39:17] *** Quits: bruda (~bruda@172.58.59.79) (Ping timeout: 252 seconds)
[05:42:35] *** Parts: cmburn (~cmburn@2601:441:4c00:67d:d333:655:39a8:230b) ()
[05:45:47] <Kit> how do i uglify/obfusicate C cods
[05:45:53] <Kit> code*
[05:45:59] <floatcomplex> Kit: write c++
[05:46:26] <omegatron> or  https://www.ioccc.org/
[05:46:27] <candide> Title of omegatron's link: The International Obfuscated C Code Contest
[05:46:28] <Kit> lol
[05:46:44] <omegatron> but yeah, c++ is a good approach too
[05:47:06] <apotheon> good answer
[05:47:14] <Kit> well
[05:47:26] <Kit> im doing a competition
[05:47:38] <Kit> where people have to guess who wrote what
[05:47:54] <Kit> and i wanted to make my code not recognizable as me
[05:48:19] <Kit> and also C++ isnt allowed
[05:48:42] <apotheon> Kit: If you want to make it hard to guess, just figure out alternate ways to do things, relative to what you usually do.  If you use array[] stuff a lot, start using *(array) stuff instead.
[05:48:58] <apotheon> Use two-space indents.
[05:49:23] <apotheon> Extract more small functions from larger functions, or vice versa.
[05:49:29] <Kit> i use tabs but i plan to remove them
[05:49:32] <apotheon> Use Hungarian notation.
[05:49:39] <Kit> so itll be a oneliner
[05:49:47] <apotheon> ouch
[05:49:53] <cehteh> or only single character variable names
[05:49:59] <Kit> also the *(array) stuff seems cool
[05:50:09] <asd> in a function where i need a variable length array: is it safer to use `malloc(sizeof(int)*len)` or int `arr[len]`? My concern is that `int arr[len]` has a smaller size limit that `malloc(len)`
[05:50:24] <cehteh> write   n[array]   instead array[n]
[05:50:37] <Kit> cehteh: i was wondering if theres a prohram that makes renaming a bunch of vars easier
[05:50:38] <Kit> well
[05:50:47] <apotheon> cehteh: please don't
[05:50:56] <cehteh> Kit: there is 'cobfusc' 
[05:50:56] <Kit> i guess i can use find and replace
[05:51:00] <caze> malloc(sizeof (int[len]);
[05:51:01] <omegatron> write your program by using the preprocessor ..
[05:51:24] <floatcomplex> pull an izabera
[05:51:39] <Kit> i already ran it through the pp
[05:51:48] *** Joins: midhun_ (~liberapoo@117.212.173.204)
[05:52:04] <cehteh> Kit: actually i sometimes used it with 'sane' options enabled to remove all indent and spacing and then pipe that into indent/astyle .. which sometimes gives better results than using indent alone
[05:52:11] <caze> Kit: Use recursion everywhere.
[05:52:13] <floatcomplex> compile the actual code, put those bytes in an array, memcpy that into an executable page and jump to it
[05:53:16] <apotheon> floatcomplex: then stand trial for crimes against humanity
[05:53:18] <Kit> floatcomplex: a requirement is that it has to be portable
[05:53:30] <floatcomplex> lol
[05:53:37] <floatcomplex> portable means able to be ported
[05:53:40] <floatcomplex> you're good
[05:54:06] *** Quits: midhun__ (~liberapoo@117.212.160.238) (Ping timeout: 245 seconds)
[05:54:15] <cehteh> then write an interpreter for an obscure esoteric programming language, obfuscate that and in encode your code that language, breinfuck or so
[05:55:20] <floatcomplex> make it so it segfaults immediately at -O0 but not higher, by requiring tail calls and never returning
[05:55:20] <cehteh> even better when you can mix that with the original source like xor it with the interpreters source 
[05:55:52] <floatcomplex> use your own malloc impl
[05:56:17] <floatcomplex> wait this is just a list of all of our past sins
[05:56:25] <Kit> lmfao
[05:56:42] <cehteh> or hey use saied interpreter, but the program itself is encoded in indent and variable names
[05:57:19] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[05:57:26] <floatcomplex> so basically python?
[05:58:52] <cehteh> oh hey .. just use perl
[05:59:09] <floatcomplex> write a perl interpreter
[06:00:10] <apotheon> then use the Lingua::Romana::Perligata module
[06:00:49] <pony> implement perl in perl
[06:01:24] <cehteh> thats likely called 'eval' and is already there, as far my expectations on perl are
[06:01:54] <floatcomplex> port tcc to perl
[06:02:15] <cehteh> tcc to scheme exists already :D
[06:02:35] <floatcomplex> ?
[06:02:41] <floatcomplex> there's a c compiler written in scheme?
[06:03:25] <cehteh> of this bootstrap project moment
[06:03:42] <cehteh> pretty cool stuff actually
[06:04:49] <floatcomplex> how about a c compiler written in an interpreter that is likely to actually be installed though
[06:04:51] <cehteh> https://savannah.nongnu.org/projects/stage0    part of it cant find the main link
[06:04:52] <floatcomplex> like busybox ash or something
[06:04:53] <candide> Title of cehteh's link: Stage0 Bootstrap for the Free Software - Summary [Savannah]
[06:05:33] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[06:06:04] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[06:07:26] <cehteh> https://www.gnu.org/software/mes/
[06:07:28] <candide> Title of cehteh's link: Mes - GNU Project - Free Software Foundation
[06:11:40] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 264 seconds)
[06:13:31] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[06:14:47] *** Joins: chenqisu12 (~03cia7d@183.217.200.156)
[06:17:15] *** Quits: chenqisu1 (~03cia7d@183.217.200.156) (Ping timeout: 252 seconds)
[06:20:19] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 256 seconds)
[06:22:02] *** Joins: simon323 (~simon323@2409:8a34:468:83d0:61e5:63f0:8a11:1997)
[06:22:07] *** Joins: cool6502 (~cool333@bzq-79-176-139-177.red.bezeqint.net)
[06:25:32] *** Quits: cool2077 (~cool333@bzq-79-176-139-177.red.bezeqint.net) (Ping timeout: 240 seconds)
[06:28:12] <kurahaupo> nitrix: « the macro should be #define min(x) _Generic(x, int: min, float: minf, long: minl)(x) » interesting "min" that only takes one arg
[06:28:30] <floatcomplex> gross
[06:33:55] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 268 seconds)
[06:35:00] *** Joins: ferdna (~ferdna@user/ferdna)
[06:44:39] *** Joins: vmcs (~vmcs@185.30.88.245)
[06:47:31] *** Quits: superboot (~agentgasm@user/superboot) (Ping timeout: 256 seconds)
[06:48:54] *** Joins: superboot (~agentgasm@user/superboot)
[06:49:13] *** Quits: vmcs (~vmcs@185.30.88.245) (Ping timeout: 256 seconds)
[06:52:28] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:58:07] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[07:06:52] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[07:08:58] *** Joins: KillerWasp (KillerWasp@user/killerwasp)
[07:09:01] <KillerWasp> hello
[07:10:05] <KillerWasp> i dont understand about of memmove, is it really necessary to copy to a temporary memory? When in ASM there are already specialized functions to work with byte order.
[07:10:11] <floatcomplex> ?
[07:10:17] <floatcomplex> in what context
[07:10:28] <KillerWasp> floatcomplexᐒ in any context
[07:10:46] <floatcomplex> ,h
[07:10:46] <candide> Factoid `h` exists in #cjeopardy, #c-jeopardy; use `fact <channel> h` to choose one.
[07:11:50] <floatcomplex> ,fact #cjeopardy h
[07:11:51] <candide> floatcomplex: 09Hint: ...d_....d (You can use !hint again to reveal more characters.)
[07:12:05] <floatcomplex> !hint
[07:12:25] <floatcomplex> ,ps
[07:12:25] <candide> No running processes.
[07:12:27] <KillerWasp> oh, i need bcopy for the work...
[07:13:26] <KillerWasp> bcopy is deprecated by POSIX, they can kiss my ass.
[07:13:30] <floatcomplex> KillerWasp: are you a bot
[07:14:19] <floatcomplex> candide: is KillerWasp a bot
[07:14:32] <candide> f​loatcomplex, Don't be absurd.
[07:14:50] <KillerWasp> candide know
[07:14:51] <candide> No such factoid 'know'; Found 9 factoids containing 'know': [#c] kr4-7 memory nacq references registers scanf_is_stupid tuts types x
[07:15:11] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:15:17] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 256 seconds)
[07:15:32] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:17:00] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[07:17:33] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[07:19:24] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[07:24:16] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:25:31] <caze> KillerWasp: No.
[07:25:58] <KillerWasp> cazeᐒ no what?
[07:26:03] <floatcomplex> caze: wtf are they asking, such that the answer can be known
[07:26:14] <caze> No it's not necessary to copy to a temporary memory.
[07:26:29] <KillerWasp> cazeᐒ is what say in man help
[07:26:45] <caze> KillerWasp: That's how your man decided to do it I guess.
[07:26:47] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Read error: Connection reset by peer)
[07:27:06] <caze> KillerWasp: What man are you using?
[07:27:23] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[07:27:45] <KillerWasp> https://0x0.st/-h-Y.png
[07:28:10] <caze> KillerWasp: Okay, you read it wrong.
[07:28:32] <KillerWasp> cazeᐒ where?
[07:28:55] <KillerWasp> the  bytes in src are first copied into a temporary array that does not
[07:28:55] <KillerWasp>        overlap src or dest, and the bytes are then copied from  the  temporary
[07:28:55] <KillerWasp>        array to dest.
[07:28:56] *** Joins: rgrinberg (~textual@200.5.63.76)
[07:29:05] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:29:10] <floatcomplex> wtf does rhat have to do witu swapping
[07:29:12] <caze> KillerWasp: You missed the important part.
[07:29:36] <KillerWasp> cazeᐒ what part?
[07:29:40] <floatcomplex> as if
[07:29:53] <caze> "copying takes place as though..."
[07:29:55] *** Joins: kdc (~kdc@196.211.197.159)
[07:30:03] <floatcomplex> as thuff
[07:30:19] <KillerWasp> The important part that you are missing here is that it overlaps.
[07:31:10] <caze> KillerWasp: That has nothing to do with anything.
[07:31:10] <kurahaupo> KillerWasp: no it does not imply copying to a temporary location, merely that it act as if that were done, by ensuring correct operation when the ranges overlap
[07:31:29] <caze> KillerWasp: Overlapping copying can be done by shifting.
[07:31:46] <caze> KillerWasp: Do you know what "as though" means?
[07:32:09] *** Joins: mh3f_ (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[07:32:44] <caze> KillerWasp: Here are some examples. https://sentence.yourdictionary.com/as-though
[07:32:47] <candide> Title of caze's link: Use as-though in a sentence | The best 449 as-though sentence examples
[07:33:07] <KillerWasp> cazeᐒ though? The actions within the function is subject to such a vague expression of what it could do but not?
[07:33:34] <caze> KillerWasp?
[07:34:48] <KillerWasp> 'man bcopy' are better explained...
[07:35:17] <caze> KillerWasp: I mean, blame the authors of your man page?
[07:35:31] <KillerWasp> cazeᐒ yeah!
[07:35:41] <KillerWasp> kick the ass of author!
[07:35:47] <caze> Although the standard has similar phrasing.
[07:36:01] <kurahaupo> KillerWasp: "as though" is not the slightest bit vague. It means exactly that the outcome must be the same, even if the process internally differs.
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:03] <floatcomplex> ,g c11 "as though"
[07:36:03] <candide> floatcomplex: (86,400 results) aligned_alloc - cppreference.com: <https://en.cppreference.com/w/c/memory/aligned_alloc>
[07:36:27] <caze> KillerWasp: Here is the man page from a different OS. https://man.openbsd.org/memmove.3
[07:36:29] <candide> Title of caze's link: memmove(3) - OpenBSD manual pages
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:58] <KillerWasp> floatcomplexᐒ that's the problem, I don't want ramblings, I want accuracy.
[07:37:01] <caze> ,c11 "as if"
[07:37:02] <candide> No such text '"as if"' found in C11 Draft Standard (n1570).
[07:37:09] <caze> ,c11 as if
[07:37:11] <candide> Displaying 1 of 93 matches: http://www.iso-9899.info/n1570.html#5.1.1.2p1 [Translation phases] The precedence among the syntax rules of translation is specified by the following phases.6) 1. Physical source file multibyte characters are mapped, in an implementation- defined manner, to the source character set (introducing new-line characters for end-of-line indicators) if necessary. Trigraph sequences are... <truncated; https://0x0.st/-h-l.txt>
[07:37:25] <caze> ,c11 7.24.2.2p2
[07:37:26] <candide> http://www.iso-9899.info/n1570.html#7.24.2.2p2 [The memmove function] copies n characters from the object pointed to by s2 into the object pointed to by s1. Copying takes place as if the n characters from the object pointed to by s2 are first copied into a temporary array of n characters that does not overlap the objects pointed to by s1 and s2, and then the n characters from the temporary array are copied into the object pointed to by s1.
[07:37:45] <floatcomplex> there is nothing rambling about it
[07:38:08] <caze> I didn't say it was rambling.
[07:38:09] <KillerWasp> cazeᐒ the bsd help for memmove is better
[07:38:19] <KillerWasp> and very short. :3
[07:40:18] <kurahaupo> KillerWasp: The point of the standard is to prescribe the behaviour within exactly the intended limits, for the benefit of the implementor. The point of documentation is to help the programmer use the function. 
[07:41:21] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[07:42:30] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[07:43:03] <KillerWasp> kurahaupoᐒ but it doesn't help. since if it describes the function internally, it should clarify what it does exactly, not to be confused with any comment on similar behaviors.
[07:43:06] <dave0> not sure why there's a temporary array
[07:43:34] <floatcomplex> dave0: there isn't
[07:43:38] <caze> KillerWasp: It does not descrube the function internally.
[07:43:43] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[07:43:47] <floatcomplex> dave0: KillerWasp just doesn't understand what "as if" and "as though" mean
[07:44:02] <dave0> oh that's english
[07:44:31] <caze> KillerWasp: Do you understand this sentence? "She felt as though a cold hand grasped her stomach and squeezed hard."
[07:45:14] <caze> KillerWasp: Is it saying that somebody opened her body and reached into her abdomen and squeezed her stomach after first plunging their hand in ice?
[07:45:26] <wroathe> caze: Yes.
[07:45:32] <kurahaupo> KillerWasp: The point is to avoid describing the actual internal, and instead to describe the expected outcome. Sometimes the easiest way to do that is to illustrate an example implementation, and to expressly stated that you're not obligated to use it
[07:45:41] <floatcomplex> and did not use the asm instructions that implement the cold hand
[07:45:51] <floatcomplex> wroathe: wb
[07:45:52] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 264 seconds)
[07:46:16] <wroathe> floatcomplex: I wouldn't say I'm back, and I wouldn't say I've been gone either :P New job is kicking my ass.
[07:46:35] <KillerWasp> cazeᐒ yep, pretty enlightening. That is why something similar should not be used in programming in the explanation.
[07:46:35] <wroathe> floatcomplex: But thanks :)
[07:46:39] <caze> hi wroathe
[07:46:44] <caze> KillerWasp: Why?
[07:46:48] * wroathe waves at caze
[07:47:11] <floatcomplex> KillerWasp: how would you word it
[07:47:29] <KillerWasp> cazeᐒ Would you explain the monstrous hand squeezing the stomach for a medical book? I suppose not.
[07:48:17] <caze> KillerWasp: The man page should _not_ describe the internals of the function. That would defeat one of the purposes of having the function.
[07:48:37] <caze> KillerWasp: But it's not a medical book.
[07:48:51] <KillerWasp> cazeᐒ what???
[07:49:01] <caze> KillerWasp: The man page is telling you how to use the function. It's not there to tell you how the function internally works.
[07:49:11] <KillerWasp> why not??
[07:49:22] <kurahaupo> KillerWasp: The man page should describe the outward observable behaviour, not the internal details
[07:49:33] <wroathe> interface vs. implementation. They're providing you an interface, not an implementation
[07:49:43] <caze> KillerWasp: Because the point is to provide an abstraction so that you don't have to care how it works. You only have to know how it behaves.
[07:49:53] <wroathe> The implementation is a private detail of the interface being provided 
[07:50:48] <floatcomplex> KillerWasp: please suggest an alternate wording
[07:50:57] <floatcomplex> i am unable to do so
[07:51:04] <kurahaupo> And as I said before, sometimes the most concise way to describe an interface is to give an example of an implementation that would satisfy it, by ignoring all questions of efficiency in that implementation
[07:51:05] <caze> KillerWasp: What if there is an architecture that doesn't have a good way to do it in asm, and you have no choice but to copy to a temporary array? Should a different version of the man page be written?
[07:51:17] <KillerWasp> cazeᐒ I would not like to use the function blindly, just use the help manual to find out exactly which function allows you to correctly overwrite from one memory to another without causing overhead. It is important to know how it works internally, as well as knowing whether sprintf or asprintf creates memory with malloc or not. >:(
[07:51:52] <kurahaupo> KillerWasp: It's important to know the performance characteristics. It is NOT important to know the actual implementation
[07:51:56] <floatcomplex> KillerWasp: there is nothing about "as though" or "as if" that is wishy washy, rambling, higgledy-piggledy, imprecise, or helter skelter in any way
[07:52:20] <kurahaupo> floatcomplex: I feel like we're collectively repeating ourselves
[07:52:27] <floatcomplex> english ist krieg
[07:53:16] <KillerWasp> cazeᐒ or your own version of memcopy
[07:53:24] <wroathe> floatcomplex: Although I do think some people do collectively need to get over the disappointment of finding out that all of this is being ultimately written by us imperfect humans, and human communication requires the shorthand that metaphors and hand wavyness sometimes provides :P
[07:53:31] <kurahaupo> floatcomplex: 15:06:00  kurahaupo: KillerWasp: "as though" is not the slightest bit vague. It means exactly that the outcome must be the same, even if the process internally differs
[07:53:41] <floatcomplex> kurahaupo: well done
[07:53:47] *** Quits: pizdets_ (~pizdets@183.182.110.241) (Read error: Connection reset by peer)
[07:53:50] <wroathe> floatcomplex: It's a bit like finding out santa isn't real, but for nerds 
[07:53:57] <caze> KillerWasp: Why?
[07:54:37] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:e8c0:8699:e8ec:6ac5)
[07:54:55] * kurahaupo invites KillerWasp to write a C compiler & std library that targets a LispMachine
[07:55:03] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:55:31] <KillerWasp> kurahaupoᐒ why LispMachine?
[07:55:39] <dave0> KillerWasp: memmove(s1, s2, n): the n characters at s1 contains what the n characters at s2 contained before the move
[07:55:53] <wroathe> Speaking of imprecision... so much of what we rely on these days originally started out with some guy going "eh, good enough". Take PHP for example. 
[07:56:06] <floatcomplex> take php. please
[07:56:25] <kurahaupo> KillerWasp: It does not have a linear address space. The tuple abstraction is implemented in hardware
[07:56:36] <wroathe> I'm just saying that it's relatively rare for something tangible to start out on purely academic and rigorous footing 
[07:57:05] <floatcomplex> oh certainly
[07:57:14] <wroathe> It's all just patched together with duct tape and crazy glue 
[07:57:15] * KillerWasp fried php
[07:57:17] <floatcomplex> i have no problem with the way the standard is worded
[07:57:31] <floatcomplex> except that it enshrines ieee 754
[07:57:48] <wroathe> The C standard? I don't remember that it does
[07:57:56] <floatcomplex> wroathe: it doesn't require it
[07:58:01] <kurahaupo> KillerWasp: Any chance you could please configure your IRC client to use the standard colon suffix when referring to our nicknames?
[07:58:02] <wroathe> IIRC they went out of their way to avoid mentioniong IEEE 754
[07:58:08] <wroathe> mentioning*
[07:58:12] <floatcomplex> wroathe: yeah they call it iec 559 instead
[07:58:15] <floatcomplex> it's there though
[07:58:18] <wroathe> floatcomplex: Ah
[07:58:47] <floatcomplex> wroathe: they allow for implementations to not implement it, the same way they allow for implementations to not implement complex numbers or VLAs or threads
[07:58:50] <wroathe> floatcomplex: Good, let the hate flow through you... and then let it rise to the surface as a signaling NAN
[07:59:09] *** Joins: dld (~dld@73.61.8.208)
[07:59:35] <floatcomplex> i must not trap, trap is the attack vector, trap is the denormal death that brings total pwnage or something idk
[07:59:52] <wroathe> floatcomplex: They actually did a good job with that in the movie 
[07:59:59] <caze> Trap is the mind killer
[08:00:00] <KillerWasp> kurahaupo: ok.
[08:01:24] *** Joins: smeso (~smeso@user/smeso)
[08:01:40] <kurahaupo> wroathe: even better, x86_64 has signalling not-an-int64_t as well.
[08:02:11] <kurahaupo> I really wish that gcc would make more use of that
[08:02:34] <floatcomplex> the minister's attack vector is a timing attack vector
[08:03:09] <KillerWasp> good night
[08:03:24] *** Parts: KillerWasp (KillerWasp@user/killerwasp) (YOU KIDDING ME?? YOU KIDDING MEEE???? (PC drinking beer) *kernel panic!*)
[08:03:37] <wroathe> kurahaupo: Hrm, I don't remember that 
[08:03:39] <floatcomplex> good luck also
[08:05:33] <kurahaupo> wroathe: intel calls it NAT (Not A Thing)
[08:06:01] <kurahaupo> also not-a-pointer
[08:06:10] <floatcomplex> you get a trap, and you get a trap
[08:06:21] <floatcomplex> what do you mean our pipeline is 22 instructions deep
[08:06:24] <floatcomplex> fuck it let's trap
[08:06:33] <wroathe> On the interface vs implementation thing... I remember at one contract I was roped into a meeting to give some background on unit testing to a group of developers who hadn't done any testing before in their careers. One of the first topics I covered was how tightly coupled your tests should be to your unit's implementation, and what the appropriate level to mock at was. It was cool to see the lightbulbs turn 
[08:06:39] <wroathe> on in real time in that group of peoples heads while I was explaining it
[08:06:52] *** Quits: dld (~dld@73.61.8.208) (Ping timeout: 264 seconds)
[08:07:00] <wroathe> floatcomplex: You didn't need those instruction results anyways
[08:07:04] <wroathe> floatcomplex: Probably wasn't important
[08:07:08] <floatcomplex> i surely didn't
[08:07:34] <kurahaupo> Only 22? SIGFPE can be delivered after the current process has been swapped out and swapped back in again, perhaps days later
[08:07:46] <floatcomplex> if you write code that cares visibly about the result of an expression that depends on ieee 754 denormals you are basically the devil, whose name is satan
[08:08:19] <floatcomplex> or nan, forbye
[08:08:30] *** Joins: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51)
[08:08:32] <floatcomplex> cares about nan, not their name is nan
[08:08:39] <floatcomplex> (or is it)
[08:08:58] <wroathe> floatcomplex: That's why I call them subnormals. It lets me circumvent your judgement. 
[08:09:31] <floatcomplex> ,recall me go brrr
[08:09:31] <candide> No message for f​loatcomplex in #c containing "go brrr"
[08:09:36] <floatcomplex> ,recall me go brrrr
[08:09:36] <candide> No message for f​loatcomplex in #c containing "go brrrr"
[08:09:36] <kurahaupo> floatcomplex: Later versions of that standard changed the name to subnormal, since binary FP doesn't have any denormals outside the sub-normal range
[08:09:41] <floatcomplex> ,recall me go brrrrr
[08:09:41] <candide> No message for f​loatcomplex in #c containing "go brrrrr"
[08:09:48] <floatcomplex> hmm
[08:09:54] * wroathe waves night
[08:10:05] <floatcomplex> ,recall me 1e-20
[08:10:06] <candide> [1d8h ago] <f​loatcomplex> actual hpc sw writers: lol when i add 1e-20 to every term it goes brrrr
[08:10:53] <kurahaupo> floatcomplex: Si that's why sex toys make that noise!
[08:11:23] <floatcomplex> your denormals are not my denormals but your denormals are ok
[08:11:57] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:15:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[08:15:45] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-bc7b-beb0-653c-822c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[08:17:41] *** Quits: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51) (Ping timeout: 252 seconds)
[08:20:28] *** Joins: LittleLemon (~AdiIRC@170.55.34.132)
[08:21:44] *** Joins: wootz (~wootz@2806:1000:8000:afa9:9c90:e742:8894:a4fe)
[08:22:12] *** Quits: peve (~peve@2601:281:8700:5880::8577) (Quit: Leaving)
[08:25:51] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[08:32:24] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 256 seconds)
[08:32:40] *** Quits: simon323 (~simon323@2409:8a34:468:83d0:61e5:63f0:8a11:1997) (Ping timeout: 264 seconds)
[08:32:40] *** Joins: m4v (~znc@ubuntu/member/m4v)
[08:33:05] *** Joins: simon323 (~simon323@2409:8a34:468:83d0:d110:60e9:3e05:cf24)
[08:33:15] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:42:58] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Quit: Leaving)
[08:43:12] *** Quits: alch (~alch@pa-18-186-225.service.infuturo.it) (Read error: Connection reset by peer)
[08:43:25] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[08:43:25] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 268 seconds)
[08:47:07] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Remote host closed the connection)
[08:47:56] *** Joins: alch (~alch@ca-18-208-45.service.infuturo.it)
[08:50:40] *** Quits: arandomcomrade (~arandomco@user/arandomcomrade) (Quit: Leaving)
[08:51:17] *** Joins: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com)
[08:56:58] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 268 seconds)
[08:57:16] *** Quits: mh3f_ (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 264 seconds)
[08:57:23] *** Joins: nrl^ (~nrl@68.101.58.90)
[08:58:22] <ian|> i'm now using `type* x;` instead of `type *x;` in my projects
[08:58:29] <ian|> i just find it easier to read
[08:59:01] <floatcomplex> type * x
[09:01:14] <ian|> this is a fun read, https://www.stroustrup.com/bs_faq2.html "  Is ``int* p;'' right or is ``int *p;'' right? "
[09:01:16] <candide> Title of ian|'s link: Stroustrup: C++ Style and Technique FAQ
[09:01:25] *** Quits: puke (~puke@user/puke) (Quit: puke)
[09:01:35] <floatcomplex> neither
[09:01:35] <dave0> ian|: easy to read is the best reason
[09:01:39] <floatcomplex> fuck that guy
[09:02:04] <floatcomplex> even if he was right, he's describing idiomatic c+++, notc
[09:02:06] <floatcomplex> not c
[09:02:43] <dave0> the extra plus is for plus plus
[09:02:43] *** Joins: reumeth (~reumeth@user/reumeth)
[09:02:48] <ian|> he talks a lot about C
[09:02:55] <floatcomplex> i bet he does
[09:03:04] <floatcomplex> i bet he says things like c++ is the best version of c
[09:04:03] <floatcomplex> i be he says things like you only pay for what you sue
[09:04:05] <floatcomplex> uyse
[09:04:11] <floatcomplex> i need a new keyboard
[09:05:03] <floatcomplex> i bet he says things like resource allocation is initialization, and then nods to himself as if those words convey some underlying objective truth 
[09:05:59] <ian|> i don't mind RAII, my biggest gripe is the syntax: `return obj(...);` and also `Obj obj(...);`
[09:06:10] <ian|> return Obj(...); *
[09:08:05] <pony> I will learn Rust instead of C++
[09:09:06] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:09:52] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 264 seconds)
[09:10:11] <floatcomplex> pony: i will staple my hand to a boat instead of to a car, i guess? if those are the choices
[09:10:23] *** Joins: Rounin (~david@84.212.130.215)
[09:10:58] <pony> is Rust that bad?
[09:11:35] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 252 seconds)
[09:11:57] <floatcomplex> it's a solution in search of a problem, and in the absence of a real problem they get their rocks off by defining c to be the problem, having not learned how to compile a c program with warnings enabled
[09:12:01] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 256 seconds)
[09:12:11] <floatcomplex> ian|: ,cc typedef struct { float complex template; } class; class * restrict new = malloc(sizeof(class)); *new = (class){ .template = 1 };
[09:12:30] <floatcomplex> candide: ping
[09:12:31] <candide> pong
[09:12:35] <floatcomplex> candide: u up
[09:12:49] <candide> I up? Takes one to know one!
[09:14:22] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:16:36] <ian|> i like C++ more than Rust
[09:16:54] <ian|> and i don't particularly enjoy C++
[09:17:07] <floatcomplex> you know you can just write c
[09:17:31] <ian|> c++ can help me reason around program structure sometimes
[09:17:42] <floatcomplex> your program structure
[09:17:54] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[09:18:11] <floatcomplex> at the expense of being able to reason about any other c++ programmer's program structure
[09:18:11] *** Joins: kurahaupo_ (~kurahaupo@203-194-51-46.static.tpgi.com.au)
[09:18:47] *** Quits: Cyp_ (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[09:18:52] *** Quits: rsarson (~rsarson@2607:fea8:29e1:b000::2baf) (Ping timeout: 264 seconds)
[09:19:06] *** Joins: Cyp_ (~cyp@213.237.85.9)
[09:19:16] <ian|> sometimes
[09:19:31] <dave0> it's not impossible to write with the c++ variant.. it's got the feature of declaring your variables anywhere in a block, which is my favorite c99 feature.. but it doesn't have the designated intializers which is another feature i like and use a lot
[09:20:08] *** Joins: malloy (~jimery@116.30.222.115)
[09:20:16] <ian|> it has the c99 .field = value syntax at least
[09:20:43] <ian|> i want to eventually get into low-level stuff because i enjoy math problems, but still doing PC stuff
[09:20:56] *** Quits: kurahaupo (~kurahaupo@pa49-180-186-164.pa.nsw.optusnet.com.au) (Ping timeout: 252 seconds)
[09:21:03] <dave0> ian|: i don't think it does
[09:21:40] <floatcomplex> some newer variant of c++ has designated initializers but it still doesn't have compound literals, so what's the point
[09:21:45] <dave0> ,c++ struct foo { int bar; } x = { .bar = 69 };
[09:21:45] <candide> If you are using a C++ compiler then your code is not C -- even if you're only using the "C subset". As soon as you invoke a C++ compiler instead of a C compiler, all the rules and idiosyncrasies of the C++ specification come into play, which have subtle differences in certain semantics. Please ask ##c++ or switch to a C compiler.
[09:21:49] *** Joins: rsarson (~rsarson@2607:fea8:29e1:b000::2baf)
[09:22:04] <dave0> floatcomplex: oh they put it in? nice
[09:22:15] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[09:23:52] <floatcomplex> dave0: with some severe restrictions
[09:24:15] <floatcomplex> ,cc typedef struct { float complex template; } class; class * restrict new = malloc(sizeof(class)); *new = (class){ .template = 1 };
[09:24:18] <candide> floatcomplex: no output: new = 0x41f1a0
[09:24:21] <floatcomplex> call me when that compiles as c++
[09:24:44] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:e8c0:8699:e8ec:6ac5) (Quit: Leaving)
[09:24:46] <floatcomplex> hmm i need to work in compound literals somewhere there
[09:25:23] <ian|> i have this code in one of my c++ projects `wk::Display _wk_display = { .connection = NULL };`
[09:25:26] <dave0> i used compound literals in some code just because it saved a /lot/ of typing, otherwise i steer clear of them
[09:25:47] <dave0> i don't understand their scope
[09:26:05] <floatcomplex> dave0: they have block scope
[09:26:14] <dave0> oh
[09:26:19] <dave0> storage duration?
[09:26:34] <floatcomplex> if you use them as function arguments, their scope is that of the block containing that function call
[09:26:37] <dave0> i should learn the technical words one day
[09:27:00] <dave0> floatcomplex: i used them in struct assignment
[09:27:14] <floatcomplex> designated initializers + compound literals = many lines of c++ become one line of c
[09:27:25] <floatcomplex> it's infuriating
[09:28:09] <dave0> array[x] = (struct foo){ 1,2,3,4,5 }   instead of   array[x].a=1;array[x].b=2;array[x].c=3;   you see how much typing it saved
[09:28:19] <floatcomplex> and c++ only omits them in order to have some other constructor/destructor semantics that there is no way to use responsibly
[09:29:17] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (Quit: WeeChat 3.3)
[09:31:16] <ian|> `(uint32_t[]) { 1, 2, 3, 4}` is also valid c++
[09:32:30] <ian|> oh you guys mean (struct s) { a, b, c, d } being each of the n-th member in s
[09:32:47] <ian|> vs,
[09:32:49] <ian|> whoops
[09:33:23] <ian|> can't say i've had a struct complex enough where i didn't use { .a = a, .b = b }
[09:33:49] <Maxdamantus> Note that their lifetime is only relevant if you're using the & operator directly on the compound literal.
[09:34:16] <Maxdamantus> If you're just using them like `f((struct foo){ a, b, c })`, it doesn't matter.
[09:34:43] <ian|> they're automatic variables with stack space allocated
[09:34:51] <floatcomplex> right but why would you
[09:34:52] <dave0> does lifetime=storage duration?
[09:35:04] <dave0> or am i speaking gibberish?
[09:35:15] <dave0> (flashbacks to Zhivago)
[09:35:16] <Maxdamantus> If you don't take the address of a variable, you don't have to worry about its lifetime.
[09:35:35] <ian|> 3 types of memory in C/C++: static, automatic, heap
[09:35:46] <Maxdamantus> Since by the time its lifetime ends, you can't refer to it anymore.
[09:37:18] *** Quits: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com) (Quit: ian|)
[09:37:39] <floatcomplex> the scope of a compound literal used as a function argument is tremendously important if the function is pthread_create or coroutine_create or similar
[09:38:16] <Maxdamantus> Right, in which case you're using & to pass the address, since you can't pass a struct value to `pthread_create`
[09:38:24] <floatcomplex> yes
[09:43:29] *** Quits: charadon (~charadon@155.138.164.183) (Ping timeout: 252 seconds)
[09:46:49] *** Quits: LittleLemon (~AdiIRC@170.55.34.132) (Quit: Going offline, see ya! (www.adiirc.com))
[09:49:49] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[09:51:13] <tsujp> So I've got a process running on my Windows machine, and I want to read the packets specifically only it is sending/receiving. I don't want to do this with wireshark because I want to try using C. I know there are 2 APIs on Windows, the winsock API and the ws2_32 DLL. How do I hook into that DDL's recv and send methods?
[09:58:08] <nitrix> You'd normally inject into the process, create your own thread, find the proc address for ws2_32.dll's send and recv, allocate memory with read+write+execute permissions, patch the functions with a jump to that location, run your custom code, jump back.
[09:58:49] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[10:01:27] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[10:03:35] *** Quits: kurahaupo_ (~kurahaupo@203-194-51-46.static.tpgi.com.au) (Read error: Connection reset by peer)
[10:03:56] *** Joins: kurahaupo (~kurahaupo@203-194-51-46.static.tpgi.com.au)
[10:04:45] *** Joins: LittleLemon (~AdiIRC@170.55.34.132)
[10:06:26] <nitrix> It's very intrusive for the process. There are nicer ways with kernel drivers to do this. (e.g. https://netfiltersdk.com)
[10:09:39] *** Quits: soapsudsxx (~soapsudsx@209.221.40.158) (Remote host closed the connection)
[10:13:22] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:13:28] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[10:14:06] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:18:20] *** Joins: pulse (~pulse@user/pulse)
[10:19:04] <tsujp> Thanks nitrix I'll start exploring these for now :)
[10:20:13] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:25:45] *** Joins: mjbatty (~mjbatty@82.2.17.205)
[10:29:35] *** Joins: vysn (~vysn@user/vysn)
[10:32:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:38:34] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[10:41:04] *** Quits: kurahaupo (~kurahaupo@203-194-51-46.static.tpgi.com.au) (Ping timeout: 264 seconds)
[10:41:36] *** Joins: Lazenca (~lazenca@user/lazenca)
[10:41:47] *** Quits: PortableDave (~portabled@203.221.7.107) (Ping timeout: 252 seconds)
[10:44:55] *** Quits: ethoxy_ (~caretaker@cx21.havox.ru) (Quit: leaving)
[10:45:16] *** Joins: ethoxy (~caretaker@cx21.havox.ru)
[10:49:47] *** Joins: kurahaupo (~kurahaupo@203-194-51-46.static.tpgi.com.au)
[10:51:11] *** Quits: chenqisu12 (~03cia7d@183.217.200.156) (Ping timeout: 256 seconds)
[10:54:23] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:56:34] *** Quits: pulse (~pulse@user/pulse) (Quit: Don't think of the green elephant)
[10:57:31] *** Joins: pulse (~pulse@user/pulse)
[10:57:59] *** Quits: rahl (~rahl@102.114.49.104) (Ping timeout: 256 seconds)
[10:59:03] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:05:34] *** Joins: Cyp (~cyp@213.237.85.9)
[11:05:44] *** Joins: vmcs (~vmcs@194.135.154.137)
[11:05:47] *** Quits: Cyp_ (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[11:06:01] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[11:06:27] *** Joins: fputs3 (~fputs@67.59.83.166)
[11:06:29] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:07:37] *** Quits: nahcetan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[11:08:11] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 256 seconds)
[11:08:11] *** fputs3 is now known as fputs
[11:08:57] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[11:08:58] *** Joins: mh3f_ (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[11:09:08] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[11:10:23] *** Quits: vmcs (~vmcs@194.135.154.137) (Ping timeout: 252 seconds)
[11:11:20] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[11:14:36] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[11:14:36] *** Quits: SymbioticFemale (~Symbiotic@gateway/tor-sasl/symbioticfemale) (Remote host closed the connection)
[11:14:40] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 264 seconds)
[11:16:00] *** Joins: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr)
[11:23:47] *** Quits: Xeroine (~Xeroine@user/xeroine) (Quit: leaving)
[11:25:41] *** Quits: sunarch (uid526836@user/sunarch) (Quit: Connection closed for inactivity)
[11:26:11] *** Joins: chenqisu12 (~03cia7d@183.217.200.156)
[11:26:32] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[11:28:43] *** Joins: LittleLemon_2 (~AdiIRC@075-112-143-124.res.spectrum.com)
[11:29:40] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 264 seconds)
[11:31:44] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:625f:452c:2bd7:7984)
[11:31:45] *** Joins: xqt (~xqt@user/xqt)
[11:32:04] *** Quits: LittleLemon (~AdiIRC@170.55.34.132) (Ping timeout: 264 seconds)
[11:32:09] *** LittleLemon_2 is now known as LittleLemon
[11:33:41] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 256 seconds)
[11:40:54] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[11:41:10] *** Joins: kurahaupo_ (~kurahaupo@pa49-180-186-164.pa.nsw.optusnet.com.au)
[11:43:28] *** Quits: kurahaupo (~kurahaupo@203-194-51-46.static.tpgi.com.au) (Ping timeout: 264 seconds)
[11:43:45] *** Joins: arinov (~arinov@213.194.126.155)
[11:44:44] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[11:45:00] *** Joins: Cyp (~cyp@213.237.85.9)
[11:49:02] *** Joins: aradesh (~aradesh@user/aradesh)
[11:51:55] *** Joins: squid_game (~squid_gam@h-98-128-168-226.NA.cust.bahnhof.se)
[11:52:19] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:52:37] *** Joins: frost (~frost@user/frost)
[11:54:16] *** Quits: simon323 (~simon323@2409:8a34:468:83d0:d110:60e9:3e05:cf24) (Ping timeout: 264 seconds)
[11:56:40] *** Quits: LittleLemon (~AdiIRC@075-112-143-124.res.spectrum.com) (Ping timeout: 264 seconds)
[11:57:43] <squid_game> I have an extern function in another file, then I use that one in my main.c, but I get implicit declaration warning with GNU99. my code looks something like this https://bpa.st/AX7Q What could be wrong with it?
[11:58:53] *** Joins: Burgundy (~yomon@79.115.213.171)
[11:59:45] *** Quits: kurahaupo_ (~kurahaupo@pa49-180-186-164.pa.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[11:59:46] *** Joins: rahl (~rahl@102.114.49.104)
[12:00:19] *** Quits: luizfrds1 (~Luiz@152.250.243.147) (Ping timeout: 256 seconds)
[12:01:26] *** Joins: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[12:01:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:03:07] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[12:03:22] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[12:05:51] <squid_game> my bad, header guard was the issue
[12:10:24] *** Quits: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr) (Quit: Leaving)
[12:10:36] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 268 seconds)
[12:12:43] *** Joins: xqt (~xqt@user/xqt)
[12:13:25] *** Quits: squid_game (~squid_gam@h-98-128-168-226.NA.cust.bahnhof.se) (Remote host closed the connection)
[12:14:14] *** Quits: pulse (~pulse@user/pulse) (Quit: Don't think of the green elephant)
[12:14:31] *** Joins: pulse (~pulse@user/pulse)
[12:18:16] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 264 seconds)
[12:21:10] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:24:46] *** Joins: mrig (~AdiIRC@user/mrig)
[12:26:40] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:625f:452c:2bd7:7984) (Ping timeout: 264 seconds)
[12:30:30] *** Joins: bzng (~bzng4@91-115-29-1.adsl.highway.telekom.at)
[12:42:52] *** Quits: rahl (~rahl@102.114.49.104) (Ping timeout: 264 seconds)
[12:43:14] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[12:44:38] *** Joins: rahl (~rahl@102.114.219.142)
[12:46:05] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 252 seconds)
[12:46:47] *** Quits: alch (~alch@ca-18-208-45.service.infuturo.it) (Ping timeout: 256 seconds)
[12:47:07] *** Quits: krissmaster (~kriss@213.239.83.90) (Remote host closed the connection)
[12:47:11] *** Joins: leib (~leib@2405:201:900a:f034:cec:e525:b857:f8cc)
[12:47:23] *** Quits: leib (~leib@2405:201:900a:f034:cec:e525:b857:f8cc) (Read error: Connection reset by peer)
[12:47:59] *** Joins: leib (~leib@2405:201:900a:f034:cec:e525:b857:f8cc)
[12:48:19] *** Joins: alch (~alch@pa-18-188-111.service.infuturo.it)
[12:49:20] *** Joins: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d)
[12:50:52] *** Joins: earnest (~earnest@user/earnestly)
[12:51:08] *** Joins: Red_ (~Red@97.109-247-81.customer.lyse.net)
[12:52:24] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:1126:a9f4:894:b7a7)
[12:54:43] *** Quits: Red (~Red@97.109-247-81.customer.lyse.net) (Ping timeout: 256 seconds)
[12:54:44] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[12:54:50] *** Joins: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr)
[12:55:08] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:57:41] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[12:59:04] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 264 seconds)
[13:00:10] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[13:01:46] *** Joins: NEYi (~NEYi@109.251.216.38)
[13:03:11] *** Quits: Jck_true (~jcktrue@188.228.89.240) (Changing host)
[13:03:11] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[13:04:06] *** Joins: xqt (~xqt@user/xqt)
[13:04:18] *** Joins: krissmaster (~kriss@213.239.83.90)
[13:05:51] *** Joins: falkor (~falkor@90.242.155.158)
[13:06:43] *** Joins: plastico (~plastico@neomutt/plastico)
[13:10:43] *** Quits: falkor (~falkor@90.242.155.158) (Quit: Leaving)
[13:13:29] *** Joins: simon323 (~simon323@2409:8a34:468:83d0:508a:5af0:67b4:6831)
[13:16:37] *** Joins: arinov (~arinov@178.240.181.140)
[13:18:09] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:20:20] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[13:21:30] *** Quits: leib (~leib@2405:201:900a:f034:cec:e525:b857:f8cc) (Quit: Leaving)
[13:23:21] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:23:36] *** Joins: bindu (~bindu@user/bindu)
[13:26:51] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[13:27:12] *** Joins: NEYi (~NEYi@109.251.216.38)
[13:32:14] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:33:08] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:33:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:34:28] *** Lord_of_Life_ is now known as Lord_of_Life
[13:36:21] *** Joins: cousteau (~cousteau@user/cousteau)
[13:36:25] <cousteau> Sup 
[13:39:09] <cousteau> What's the proper way to know if I can #include <stdint.h>?  Just check for __STDC_VERSION__>=199901L?
[13:40:52] *** Joins: falkor (~falkor@90.242.155.158)
[13:41:06] <cousteau> I was thinking on including limits.h (which *I think* is C89) and seeing if UINT_LEAST8_MAX exists.  But that macro seems to be defined in stdint.h, not limits.h 
[13:47:10] *** Quits: falkor (~falkor@90.242.155.158) (Quit: Leaving)
[13:47:27] *** Joins: falkor (~falkor@90.242.155.158)
[13:49:16] <dacav> if you *can* include?
[13:50:03] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[13:50:07] <dacav> Ah, I see what you mean.  I guess I'd check the standard version, indeed
[13:50:30] *** Joins: superdupond (~Kev@2a01cb0400149f004945d532820e8dbd.ipv6.abo.wanadoo.fr)
[13:52:01] <dacav> will that not work?
[13:53:04] <cousteau> I suppose so 
[13:53:32] <cousteau> I was thinking that some implementations may have a stdint.h but not implement all of C99
[13:54:09] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Quit: This computer has gone to sleep)
[13:55:23] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[13:58:39] *** Joins: masterbuilder (~user@user/masterbuilder)
[14:00:09] *** Joins: falkor_ (~falkor@90.242.155.158)
[14:00:20] *** Quits: falkor (~falkor@90.242.155.158) (Quit: Leaving)
[14:00:27] *** Quits: falkor_ (~falkor@90.242.155.158) (Client Quit)
[14:00:45] *** Joins: falkor (~falkor@90.242.155.158)
[14:03:02] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:1126:a9f4:894:b7a7) (Remote host closed the connection)
[14:03:22] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:d31e:5a74:9ab:770)
[14:03:23] <Bou> It's only been around for 22 years or so
[14:03:52] *** Joins: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4)
[14:04:01] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[14:07:00] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:11:32] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:15:52] *** Joins: steve_ (~steve@ool-182c2b80.dyn.optonline.net)
[14:16:26] <cousteau> There were rather popular compilers that didn't support it in all its life as current standard (1999–2011)
[14:16:44] *** Joins: gucci (~i.am@189.58.156.81.dynamic.adsl.gvt.net.br)
[14:18:47] *** Quits: VincentValentine (~VincentVa@79.126.106.250) (Read error: Connection reset by peer)
[14:20:08] *** Joins: Viewday116 (~Viewday@user/viewday)
[14:21:14] *** Red_ is now known as Red
[14:22:02] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 260 seconds)
[14:22:03] *** Viewday116 is now known as Viewday11
[14:24:06] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[14:25:47] *** Quits: Phil-Work (~phil@62.3.100.20) (Remote host closed the connection)
[14:26:59] *** Joins: Phil-Work (~phil@62.3.100.20)
[14:27:00] <dave0> ,predef
[14:27:00] <candide> predef is http://predef.sourceforge.net/ -- the Pre-defined C/C++ Compiler Macros project
[14:27:15] *** Joins: Klinda (~superleag@user/klinda)
[14:27:16] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:d31e:5a74:9ab:770) (Ping timeout: 264 seconds)
[14:27:49] <dave0> cousteau: predef defines lots of macros to indicate certain features of your compiler and system
[14:30:04] <cousteau> Ah cool! 
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:04] *** Joins: csrf (~csrf@user/csrf)
[14:32:40] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 264 seconds)
[14:33:42] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[14:34:02] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[14:34:28] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[14:35:50] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:36:50] *** Joins: kish` (~sid742412@user/aqua)
[14:37:55] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:39:19] *** Quits: falkor (~falkor@90.242.155.158) (Quit: Leaving)
[14:40:07] *** Joins: cool2077 (~cool333@bzq-79-176-139-177.red.bezeqint.net)
[14:40:35] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:49d1:d8d6:5c53:1e75)
[14:43:14] *** Quits: cool6502 (~cool333@bzq-79-176-139-177.red.bezeqint.net) (Ping timeout: 252 seconds)
[14:49:18] *** Quits: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:49:50] *** Joins: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4)
[14:50:59] *** Quits: krissmaster (~kriss@213.239.83.90) (Remote host closed the connection)
[14:53:19] *** Quits: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4) (Client Quit)
[14:54:22] *** Joins: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4)
[14:55:15] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[14:55:53] *** Quits: chenqisu12 (~03cia7d@183.217.200.156) (Ping timeout: 252 seconds)
[14:59:40] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:49d1:d8d6:5c53:1e75) (Ping timeout: 264 seconds)
[15:04:54] *** Joins: kashyaprushi (~kashyapru@49.36.103.245)
[15:08:14] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[15:12:49] *** Joins: krissmaster (~kriss@213.239.83.90)
[15:14:40] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 264 seconds)
[15:23:55] *** Quits: sandman13 (sandman13@sandman13.jujube.ircnow.org) (Quit: Leaving)
[15:26:21] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[15:29:26] *** Quits: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:33:33] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[15:34:28] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 264 seconds)
[15:34:41] *** Joins: Atque (~Atque@user/atque)
[15:35:19] *** Quits: ckdCreations (~ckdCreati@147.55.133.135) (Read error: Connection reset by peer)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:26] *** Joins: Enitin (~Enitin@82.102.22.84)
[15:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:53] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:37:17] *** Joins: ckdCreations (~ckdCreati@147.55.133.132)
[15:37:37] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[15:39:28] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[15:40:11] *** Joins: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4)
[15:40:39] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:42:59] <dacav> dave0: neat!
[15:44:41] <dacav> cousteau: also, if you use autotools, the autoscan tool will check your codebase and allow you to detect the absence of certain data types and to add them.  Of course you get the autotools complexity on the other side of the bargain.
[15:45:43] <dacav> For example, you get a define like this in a specialized header file (config.h):
[15:45:46] <dacav> #undef HAVE_STDINT_H
[15:46:11] *** Joins: u0_a391 (~u0_a391@2600:380:5e22:c647:3c38:7bdd:feae:ed5f)
[15:46:47] *** Joins: random-nick (~random-ni@87.116.165.83)
[15:47:55] <dacav> …the configure script detects the presence/absence of the headers, and fills up the config.h file, using a config.h.in file as a template.  During compilation, your files can check if the define is set, and possibly define the missing types.
[15:48:08] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[15:48:50] *** Joins: slidercrank (~slidercra@user/slidercrank)
[15:49:17] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Quit: This computer has gone to sleep)
[15:49:31] *** Quits: Kit (~u0_a391@2603-6010-a141-6fa3-c4fd-876a-2db9-8bd1.res6.spectrum.com) (Ping timeout: 268 seconds)
[15:49:37] *** u0_a391 is now known as Kit
[15:52:54] *** Quits: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:54:19] *** Joins: riskoir (~karaixx@user/riskoir)
[15:55:00] *** Joins: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4)
[15:55:22] <riskoir> Can I have a specific type of a pointer that will point to one of two structs? So it's like a common type shared by the two structs (this is to avoid using void *)
[16:00:52] <DarkUranium> riskoir: union?
[16:00:59] *** Joins: AmR (~AmREiSa@156.199.223.24)
[16:01:11] <DarkUranium> `union { struct Foo* foo; struct Bar* bar; }`
[16:14:30] *** Joins: tradar (~tradar@user/tradar)
[16:14:47] *** Quits: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:15:23] *** Joins: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4)
[16:19:28] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[16:20:02] *** Quits: arinov (~arinov@178.240.181.140) (Ping timeout: 252 seconds)
[16:23:20] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[16:26:05] *** Quits: midhun_ (~liberapoo@117.212.173.204) (Ping timeout: 252 seconds)
[16:28:33] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:d1b6:b8ac:f1fb:836e)
[16:28:33] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:d1b6:b8ac:f1fb:836e) (Changing host)
[16:28:33] *** Joins: skapata (~Skapata@user/skapata)
[16:30:00] *** Quits: AmR (~AmREiSa@156.199.223.24) (Quit: Konversation terminated!)
[16:30:41] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[16:31:47] <riskoir> ty DarkUranium 
[16:31:50] <fizzie> You can also do the thing where you point to a member the two structures have in common, as in https://ideone.com/4X7jht
[16:35:24] *** Quits: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:35:56] <dave0> fizzie: hmm interesting
[16:36:18] <shiroyasha> Witchcraft.
[16:36:34] <dave0> union won't require a cast
[16:36:51] <cousteau> It is only supposed to work if it's the first member, right? 
[16:37:13] <cousteau> Or are "identical struct prefixes" always ensured to work? 
[16:38:52] <dave0> cousteau: i think it's a special case for unions
[16:38:59] <dave0> X11 uses it in it's XEvent thing
[16:39:32] <dave0> union event { int type; struct ButtonPress { int type; .. something.. } button; struct KeyPress { int type; ... something ... } key; };
[16:39:34] <cousteau> In any case, type-punning data types like that can lead to alignment issues.  Unions are the safest way to go.  (And not sure if they guarantee that the first N members will match.) 
[16:39:36] <dave0> something like that
[16:41:29] <cousteau> dave0: that'll never have alignment issues because the union takes care of that, and the first member of a struct / every member of a union are ensured to be always in the same place 
[16:41:44] *** Quits: psyxopompos (~psyxopomp@user/psyxopompos) (Quit: WeeChat 3.0)
[16:41:47] <dave0> cousteau: yeah it's kinda nice
[16:41:57] <cousteau> Although I thought the int type would typically be wrapped in a single-element struct 
[16:43:09] <dave0> i could look it up i guess
[16:43:31] <cousteau> Struct pointers are ensured to be "binary compatible" so you usually don't care what struct type they point to until you actually want to access the members, so they give some room to play with. 
[16:43:35] *** Quits: alch (~alch@pa-18-188-111.service.infuturo.it) (Read error: Connection reset by peer)
[16:43:40] <dave0> https://man.netbsd.org/XAnyEvent.3
[16:43:41] <cousteau> But unions are safer and more elegant. 
[16:44:09] *** Joins: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4)
[16:45:10] <cousteau> dave0: I think that doesn't use a union, just type-punning of structs, which I guess is robust enough if you're using a prefix 
[16:45:25] <dave0> it does
[16:46:16] <dave0> scroll down a bit.. the   typedef union _XEvent {   has bled into the previous sentence, but it's there
[16:46:19] <cousteau> If a struct is a "prefix" of another struct (all members of the former are the first members of the latter, in the same order), I think it is guaranteed that you can access the prefix of the latter through a pointer to the former 
[16:46:39] <dave0> cousteau: i thought that was a special case only for unions
[16:46:50] <cousteau> dave0: ah, so it is, right 
[16:46:52] <dave0> fizzie: still there? can i get a quote from the standard? :-)
[16:47:08] <cousteau> Yes please ^_^
[16:47:33] <cousteau> I'm on mobile and can't easily search it 
[16:47:41] *** Joins: alch (~alch@151.82.207.197)
[16:47:59] <dave0> i've never read it.. fizzie is the resident language lawyer
[16:49:13] *** Joins: constxd (~brad@192.75.101.164)
[16:49:21] <cousteau> I'm the resident language "internet person with an opinion who has done their research" 
[16:51:40] <cousteau> I'm like 99%+ sure that the first element of a struct is honored by the standard in many regards, but not sure about the rest.  I can't think of a case where it would *make sense* for an ABI not to, but who knows. 
[16:53:04] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[16:54:37] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[16:54:37] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:55:10] <nomagno> Can I express the following in a sane, concise manner?: 
[16:55:10] <nomagno> loop = 0->1->2
[16:55:10] <nomagno> behaviour needed = 2->1->0
[16:56:00] <nomagno> More specifically, I have a variable being increased in a while loop until it increases 2, but I need to make it so in ONE expression it behaves as tough it was being decreased from 2 until 0
[16:56:29] <rcf> nomagno: you know the maximum condition, right? 
[16:57:19] <nomagno> Can you rephrase?
[16:57:20] <clarity> value = 2, value = 1, value = 0;  // ONE expression where value decreases from 2 to 0
[16:57:45] <DarkUranium> i = 2; while(i--) { ... }
[16:57:46] <DarkUranium> That?
[16:57:59] <clarity> That's not one expression
[16:58:01] <DarkUranium> Well, i=3 in this case.
[16:58:05] <constxd> bro what are you even asking
[16:58:31] <cousteau> Ugh.  Someone remind me to read C11 6.8.6.4p4 at a later time.  Looks intense. 
[16:58:31] <DarkUranium> Maybe he means `2 - i`?
[16:58:38] <nomagno> I do not know how to express myself correctly for this. Forget all common programming terminology
[16:58:45] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Remote host closed the connection)
[16:58:49] <nomagno> DarkUranium's while loop
[16:58:56] <cousteau> DarkUranium: you start those loops at i=3
[16:58:59] <nomagno> say I need that WITHIN the while loop, one operation depends on it behaving like that
[16:59:06] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[16:59:19] <constxd> ,cc for (int i = 0; i < 5; ++i) printf("%d\n", 5 - i);
[16:59:22] <candide> constxd: 5 4 3 2 1
[16:59:27] <clarity> You should just post an example of what you're trying to accomplish
[16:59:30] *** Joins: Teckla (~Teckla@user/teckla)
[16:59:31] <cousteau> Count, not last.  The i-- will start it to (count-1)
[16:59:40] <clarity> Because clearly you can't explain it
[16:59:40] <clarity> :(
[16:59:43] <cousteau> ,-->
[16:59:48] <cousteau> Damn
[16:59:48] <constxd> did you forget how to perform basic arithmetic or something
[17:00:06] <nomagno> say I need that WITHIN the while loop `i = 2; while(i--) { ... }`, one operation depends on it behaving like that
[17:00:06] <nomagno> but ANOTHER operation depends on it behaving `i = 0; while(i++ <= 2) { ... }`
[17:00:23] <nomagno> Can I somehow write this with one single while loop without a lot of boilerplate?
[17:00:38] *** Quits: roman_ (~roman@mob-194-230-147-119.cgn.sunrise.net) (Remote host closed the connection)
[17:00:55] <constxd> DarkUranium and I both just showed you how
[17:01:28] <clarity> increment starting at 0, then use 2 - i and i?
[17:01:45] <cousteau> Anyway.  i=n; while (i-- > 0) is a construct I've seen often.  Sometimes with the "i-- > 0" written as "i --> 0" which makes it look like there's a new --> operator but it's actually -- and >
[17:01:47] <constxd> right
[17:02:04] <constxd> yeah i use that
[17:02:08] <constxd> the "goes to" operator
[17:02:33] <cousteau> nomagno: you can use a for loop and two vars going in opposite directions 
[17:02:42] <rcf> nomagno: for (i = 0; i < (MAXIMUM_VALUE + 1); ++i) { int d = MAXIMUM_VALUE - i; } 
[17:03:00] <cousteau> Or a simple i, n-i-1
[17:03:29] *** Joins: metalhead (~user@user/neutral)
[17:03:49] <metalhead> https://www.geeksforgeeks.org/callbacks-in-c/
[17:03:56] <rcf> i increases, d decreases. No boilerplate or anything required, just basic arithmetic. 
[17:04:00] <dave0> what about this? for(value = 2; value >= 0; value--) { .. }
[17:04:38] <metalhead> why is pointer to a function used in callback. why not call the function directly
[17:04:53] <nomagno> Too much information, sec, let me thinkythinyk
[17:04:56] <cousteau> metalhead: you want to be able to pass the function to another function 
[17:05:42] <nomagno> `MAXIMUM - i` will do, yeah
[17:05:52] <cousteau> The point of callback functions is that they're "variable functions that you can specify / switch at run time" 
[17:06:12] <pragma-> cousteau: you could be the proud owner of the `-->` factoid!
[17:07:13] <cousteau> A very good example is when creating a thread.  There is a single "create thread" function provided by the thread library, and you create a custom function for your program and then call "create a thread that runs my function" 
[17:07:38] *** Joins: rainmanj_ (~rainmanja@216.161.85.62)
[17:07:46] *** Quits: rainmanjam (~rainmanja@216.161.85.62) (Read error: No route to host)
[17:08:28] <cousteau> pragma-: last time I mentioned --> people shat on me for promoting obfuscated code and told me to use -- > instead so I think I'll leave that honor to someone with better ideas 
[17:08:39] <cousteau> Or maybe I'll create it later, what the hell. 
[17:09:00] <metalhead> cousteau: now i get it
[17:09:07] * pragma- mutters.
[17:09:40] <cousteau> Cool! 
[17:10:16] *** Quits: Thedarkb (~Thedarkb@86-42-4-182-dynamic.agg3.kny.prp-wtd.eircom.net) (Ping timeout: 260 seconds)
[17:10:20] <dave0> can i claim  <--  ?
[17:10:35] <cousteau> metalhead: basically, whenever you're writing a library function that calls arbitrary functions, and don't know what those functions are going to be yet 
[17:11:01] <cousteau> dave0: never used that one.  Not sure I've seen it before 
[17:11:06] <cousteau> Or it had some issues 
[17:13:01] <cousteau> Oh, 0<--i is the same as i-->0 except that it excludes the 0
[17:13:06] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:13:29] <dave0> i thought it meant COME-FROM
[17:13:42] *** Joins: arinov (~arinov@213.194.126.155)
[17:13:43] <cousteau> And if i is 0 and unsigned it'll loop forever 
[17:14:09] <cousteau> Ah no, not forever, but for a long time. 
[17:15:39] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[17:17:58] *** Quits: riskoir (~karaixx@user/riskoir) (Remote host closed the connection)
[17:18:20] *** Joins: riskoir (~karaixx@user/riskoir)
[17:19:00] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:19:20] <pragma-> ,factadd --> /say `int i = 5; while (i --> 0) ...;` is jokingly read as "while `i` goes towards zero". The goes-towards operator, `-->`, does not actually exist; can you figure out why this works?
[17:19:21] <candide> --> added to #c.
[17:19:21] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[17:19:23] * pragma- shrugs.
[17:20:06] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[17:20:36] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:22:34] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[17:23:43] <pragma-> That seems kind of patronizing. "I wonder if you know what whitespace is? Hurr durr!"
[17:23:56] <pragma-> I do not like this new factoid. I do not like it one bit.
[17:24:11] *** Joins: Satin (uid193953@id-193953.ilkley.irccloud.com)
[17:24:39] <dave0> s/bit/_Bool/
[17:25:38] <pragma-> ,factchange --> s/can.*/ it is a "clever" omission of whitespace./
[17:25:39] <candide> Changed: --> is /say `i​nt i = 5; while (i --> 0) ...;` is jokingly read as "while `i` goes towards zero" . The goes-towards operator, `-->`, does not actually exist;  it is a "clever" omission of whitespace.
[17:25:41] <cousteau> pragma-: I was thinking more like an actual definition for the use of (i-- > 0) (maybe with a mention to how --> can be seen as a "goes to" operator) 
[17:27:38] <cousteau> I'll give it a thought later.  Although it's probably good enough already. 
[17:28:17] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:e01b:fa9f:cf6:5559)
[17:31:38] *** Joins: reumeth (~reumeth@user/reumeth)
[17:37:44] *** Joins: xqt (~xqt@user/xqt)
[17:41:32] *** Joins: shivesh (~shivesh@user/shivesh)
[17:43:20] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:45:13] *** Quits: kuoi (~kuoi@109.175.166.59) (Remote host closed the connection)
[17:45:17] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[17:48:17] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[17:50:03] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Remote host closed the connection)
[17:50:51] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[17:51:06] *** Joins: Thedarkb (~Thedarkb@86-42-74-29-dynamic.b-ras1.blp.dublin.eircom.net)
[17:54:58] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[17:55:25] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[17:55:35] *** Joins: AmR (~AmREiSa@156.199.223.24)
[17:56:11] *** Quits: Thedarkb (~Thedarkb@86-42-74-29-dynamic.b-ras1.blp.dublin.eircom.net) (Ping timeout: 256 seconds)
[17:56:27] *** Joins: Thedarkb1 (~Thedarkb@80.233.41.247)
[17:56:53] *** Joins: seninha (~seninha@user/seninha)
[17:57:39] *** Quits: Thedarkb1 (~Thedarkb@80.233.41.247) (Read error: Connection reset by peer)
[17:57:43] *** Joins: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[17:58:05] *** Quits: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[17:58:07] *** Quits: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[17:58:31] *** Joins: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[17:58:37] *** Joins: Thedarkb1 (~Thedarkb@80.233.41.247)
[17:59:35] *** Quits: alch (~alch@151.82.207.197) (Ping timeout: 256 seconds)
[17:59:49] *** Joins: alch (~alch@151.82.207.197)
[18:00:09] *** Quits: Thedarkb1 (~Thedarkb@80.233.41.247) (Read error: Connection reset by peer)
[18:00:40] *** Joins: Thedarkb1 (~Thedarkb@80.233.41.247)
[18:00:51] *** Joins: nyah (~nyah@94.6.71.219)
[18:03:38] *** Joins: ceetom (~ceetom@ip72-218-221-222.hr.hr.cox.net)
[18:07:11] *** Quits: ceetom (~ceetom@ip72-218-221-222.hr.hr.cox.net) (Client Quit)
[18:10:32] *** Joins: luizfrds (~Luiz@152.250.243.147)
[18:11:41] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 252 seconds)
[18:12:58] *** Quits: Thedarkb1 (~Thedarkb@80.233.41.247) (Read error: Connection reset by peer)
[18:13:14] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Remote host closed the connection)
[18:13:36] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[18:17:59] *** Joins: stonkey (~stonkey@45.132.226.17)
[18:18:39] *** Joins: liiix (~liiix@user/liiix)
[18:20:04] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 264 seconds)
[18:20:27] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[18:22:17] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:24:44] *** Quits: riskoir (~karaixx@user/riskoir) (Remote host closed the connection)
[18:24:49] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:24:49] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:24:49] *** Joins: wroathe (~wroathe@user/wroathe)
[18:25:12] *** Joins: riskoir (~karaixx@user/riskoir)
[18:26:22] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[18:28:25] *** Quits: riskoir (~karaixx@user/riskoir) (Remote host closed the connection)
[18:28:51] *** Joins: riskoir (~karaixx@user/riskoir)
[18:29:30] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[18:30:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:31:25] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:31:54] *** Quits: liiix (~liiix@user/liiix) (Ping timeout: 256 seconds)
[18:32:40] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 264 seconds)
[18:33:54] *** Parts: cousteau (~cousteau@user/cousteau) (Leaving)
[18:34:08] *** Quits: stonkey (~stonkey@45.132.226.17) (Changing host)
[18:34:08] *** Joins: stonkey (~stonkey@user/stonkey)
[18:34:30] *** Quits: bzng (~bzng4@91-115-29-1.adsl.highway.telekom.at) (Quit: Leaving)
[18:35:04] *** Quits: stonkey (~stonkey@user/stonkey) (Quit: Leaving)
[18:35:18] *** Joins: stonkey (~stonkey@user/stonkey)
[18:35:24] *** Joins: nuxil (~nuxil@141.195.51.213)
[18:36:23] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:36:48] *** Quits: kashyaprushi (~kashyapru@49.36.103.245) (Quit: Leaving)
[18:38:04] *** Quits: mjbatty (~mjbatty@82.2.17.205) (Ping timeout: 264 seconds)
[18:40:34] *** Joins: mjbatty (~mjbatty@82.2.17.205)
[18:45:16] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 264 seconds)
[18:46:42] *** Quits: Tordek (tordek@triton.blinkenshell.org) (Ping timeout: 260 seconds)
[18:46:44] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Killed (strontium.libera.chat (Nickname regained by services)))
[18:46:44] *** mh3f_ is now known as mh3f
[18:47:07] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:47:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:47:25] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:47:26] *** Joins: wroathe (~wroathe@user/wroathe)
[18:47:32] *** Joins: Guest2088 (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[18:47:32] *** Joins: Tordek (tordek@triton.blinkenshell.org)
[18:47:45] *** Joins: sereg (~sereg@37.120.205.197)
[18:48:05] *** Quits: Guest2088 (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Remote host closed the connection)
[18:50:46] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[18:50:51] <riskoir> fizzie, gratitude, amazing sorcery you displayed here :-) Will go with your solution as the union will entail extra memory usage
[18:51:07] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[18:51:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:52:03] *** Joins: strajder (~strajder@user/strajder)
[18:52:52] *** Quits: mjbatty (~mjbatty@82.2.17.205) (Quit: Leaving)
[18:53:51] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[18:54:22] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[18:55:08] *** Quits: retro_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[18:55:45] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[18:56:27] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[18:57:22] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[18:59:51] *** Joins: karakedi (~eAC53C340@user/karakedi)
[18:59:53] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:00:10] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[19:05:39] <pragma-> memory is cheap 
[19:05:44] <pragma-> time is expensive
[19:05:48] <pragma-> keep that in mind
[19:06:26] <Kit> the Google Chromium philosophy
[19:10:28] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 264 seconds)
[19:15:43] <apotheon> I don't think Google Chrome does a good job wit the "time is expensive" side of that, actually.
[19:15:52] <apotheon> s/wit /with /
[19:17:23] <Kit> good point
[19:25:40] *** Joins: Hazza (~Haxxa@125-63-20-105.ip4.superloop.com)
[19:26:04] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Ping timeout: 264 seconds)
[19:26:11] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[19:30:05] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:30:15] <NRK[m]> "unused ram is wasted ram"
[19:30:31] <floatcomplex> that's criminal
[19:30:39] <floatcomplex> using ram means using more power
[19:31:08] <floatcomplex> having ram means using more power, but not enough to justify using it because you have it
[19:31:12] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:32:04] *** Quits: superboot (~agentgasm@user/superboot) (Ping timeout: 264 seconds)
[19:32:07] *** Joins: kurahaupo (~kurahaupo@pa49-180-186-164.pa.nsw.optusnet.com.au)
[19:33:42] *** Quits: Satin (uid193953@id-193953.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:33:46] *** Joins: superboot (~agentgasm@user/superboot)
[19:34:44] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[19:37:23] <Kit> am i just paranoid or is it normal to get worried if your system uses more than 4gb of ram
[19:37:37] <Kit> under normal circumstances
[19:39:21] <floatcomplex> depends on your operating system's current definition of "use"
[19:39:29] <floatcomplex> i've heard that just having gmail open in a tab uses more than 4 GB
[19:40:49] <floatcomplex> i also imagine it depends on what percentage of "big" processes on your machine are running garbage collected environments 
[19:41:23] *** Joins: mh3f_ (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[19:42:46] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 256 seconds)
[19:45:16] *** Joins: kerala (~liberapoo@117.212.173.204)
[19:47:40] *** Quits: metalhead (~user@user/neutral) (Ping timeout: 264 seconds)
[19:48:43] <Kit> well im using debian with lxde and my laptop has 8gb of ram
[19:49:33] *** Joins: u0_a391 (~u0_a391@64.85.173.130)
[19:52:42] *** Joins: dohtem (uid524096@user/dohtem)
[19:53:43] *** Quits: Kit (~u0_a391@2600:380:5e22:c647:3c38:7bdd:feae:ed5f) (Ping timeout: 268 seconds)
[19:56:08] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[19:56:14] *** mh3f_ is now known as mh3f
[19:57:14] *** Joins: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51)
[20:00:11] *** Joins: Klinda (~superleag@user/klinda)
[20:04:26] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Ping timeout: 252 seconds)
[20:05:22] *** Quits: makersmasher (~makersmas@2600:6c40:5b00:158d:62a4:4cff:feb5:d54a) (Remote host closed the connection)
[20:07:55] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[20:08:11] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[20:10:18] *** Quits: shadowchaser (~Shadowcha@liox.eu) (Quit: The Lounge - https://thelounge.chat)
[20:10:27] *** Quits: hecanjog (~hecanjog@2a01:4f9:6a:5326::2) (Quit: WeeChat 3.0)
[20:11:45] *** Joins: shadowchaser (~Shadowcha@liox.eu)
[20:11:49] *** Quits: shadowchaser (~Shadowcha@liox.eu) (Client Quit)
[20:11:59] *** Joins: shadowchaser (~Shadowcha@liox.eu)
[20:12:10] *** Joins: pflanze_ (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[20:12:31] <asd> ,cc int c = INT_MAX; c++;
[20:12:34] <candide> asd: no output: c++ = 2147483647; c = -2147483648
[20:12:42] *** Joins: kaichiuc1u (~kaichiuch@user/kaichiuchu)
[20:12:50] *** Quits: baltazar (~baltazar@94-21-222-223.pool.digikabel.hu) (Ping timeout: 268 seconds)
[20:13:11] <asd> ,cc unsigned int c = UINT_MAX; c++;
[20:13:14] <candide> asd: no output: c++ = 4294967295; c = 0
[20:13:22] *** Quits: neunon (~neunon@user/neunon) (Ping timeout: 256 seconds)
[20:13:22] *** Quits: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[20:13:37] <floatcomplex> ,cc -fsanitize=undefined int c = INT_MAX; ++c;
[20:13:39] <candide> floatcomplex: no output: ++c = -2147483648; c = -2147483648
[20:13:46] <floatcomplex> oh nooo
[20:13:54] *** Joins: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net)
[20:13:55] *** Joins: noarb- (~noarb@user/noarb)
[20:13:57] *** Joins: sebito91_ (~sborza@45.55.74.66)
[20:14:02] *** Joins: phryk_ (~totallyno@user/phryk)
[20:14:04] *** Joins: voirnox_ (~voirnox@xor.moe)
[20:14:09] *** Joins: drew` (~drew@user/drew)
[20:14:13] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Quit: This computer has gone to sleep)
[20:14:30] *** Quits: voirnox (~voirnox@xor.moe) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: mrec (~markus@sundtek.de) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: kzootech (~awalm@kzoo.tech) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: dangrenier83_ (~pi@user/dangrenier83) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: kaichiuchu (~kaichiuch@user/kaichiuchu) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: sebito91 (~sborza@45.55.74.66) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: SpringSprocket (~srv@hobby.esselfe.ca) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: phryk (~totallyno@user/phryk) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: sirdidymus (~sirdidymu@sorcsys.net) (Ping timeout: 256 seconds)
[20:14:31] *** sebito91_ is now known as sebito91
[20:14:33] <asd> was it signed or unsigned that was undefined when overflowing?
[20:14:34] *** Joins: neunon (~neunon@user/neunon)
[20:14:52] <floatcomplex> signed
[20:15:01] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: cisco87_ (~quassel@static.128.104.12.49.clients.your-server.de) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: Teacup (~teacup@user/teacup) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: nisstyre (~wes@user/nisstyre) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: carrar (~tim@osburn.jp) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: drew (~drew@user/drew) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: kilobyte_ch (~kbch@77.109.171.167) (Ping timeout: 256 seconds)
[20:15:12] <floatcomplex> candide is borken tho
[20:15:13] *** Joins: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de)
[20:15:13] *** Joins: Teacup_ (~teacup@user/teacup)
[20:15:20] <candide> f​loatcomplex, Can has happy fun time!
[20:15:59] *** Joins: carrar (~tim@osburn.jp)
[20:16:10] *** Joins: sirdidymus (~sirdidymu@sorcsys.net)
[20:16:16] *** Joins: kzootech (~awalm@kzoo.tech)
[20:16:24] *** Joins: mrec (~markus@sundtek.de)
[20:16:37] *** Joins: dangrenier83_ (~pi@user/dangrenier83)
[20:17:00] *** Joins: charadon (~charadon@155.138.164.183)
[20:17:41] *** Quits: shadowchaser (~Shadowcha@liox.eu) (Quit: The Lounge - https://thelounge.chat)
[20:17:51] *** Joins: voirnox (~voirnox@xor.moe)
[20:17:54] *** Joins: neunon_ (~neunon@user/neunon)
[20:17:55] *** Joins: drew (~drew@user/drew)
[20:18:07] *** Joins: shadowchaser (~Shadowcha@liox.eu)
[20:18:29] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[20:18:41] <pragma-> ,clang int c = INT_MAX; c++;
[20:18:45] <candide> pragma-: no output: c++ = 2147483647; c = -2147483648
[20:18:59] *** Quits: neunon (~neunon@user/neunon) (Ping timeout: 256 seconds)
[20:18:59] *** Quits: drew` (~drew@user/drew) (Ping timeout: 256 seconds)
[20:18:59] *** Quits: voirnox_ (~voirnox@xor.moe) (Ping timeout: 256 seconds)
[20:18:59] <floatcomplex> ,clang -fsanitize=undefined int c = INT_MAX; ++c;
[20:18:59] *** neunon_ is now known as neunon
[20:19:02] <candide> floatcomplex: no output: ++c = -2147483648; c = -2147483648
[20:19:08] <pragma-> it alraedy uses -fsantitize=undefined by default
[20:19:21] <floatcomplex> then why isn't it having a fit
[20:19:24] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:19:25] * pragma- shrugs.
[20:19:35] <floatcomplex> ,clang -fsanitize=undefined int c = INT_MAX; ++c; printf("%d\n", c);
[20:19:38] <candide> floatcomplex:  runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type 'i​nt' SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior  in  -2147483648
[20:19:41] <floatcomplex> there we go
[20:19:44] <floatcomplex> you have to actually use the value
[20:19:45] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:19:55] <floatcomplex> the gdb print values thing is not sufficient
[20:20:05] <pragma-> I was so annoyed when gcc removed the option to disable dead-code removal.
[20:20:10] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[20:20:15] <pragma-> Now this...
[20:20:21] <floatcomplex> ,cc -fsanitize=undefined int c = INT_MAX; ++c; printf("%d\n", c);
[20:20:23] <candide> floatcomplex:  runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type 'i​nt' -2147483648
[20:21:24] <pragma-> ,cc int c = INT_MAX; ++c; printf("%d\n", c);
[20:21:27] <candide> pragma-: Same output.
[20:21:29] * pragma- nods.
[20:21:36] <floatcomplex> omg
[20:22:04] <floatcomplex> is "same output" only looking at stdout and not stderr, even though stderr makes it to the chat
[20:22:15] *** Joins: makersmasher (~makersmas@2600:6c40:5b00:158d:62a4:4cff:feb5:d54a)
[20:22:51] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[20:24:26] <asd> floatcomplex: ?? if -fsanitize=undefined is default it ought to yield same output, or am i missing something?
[20:24:38] *** Joins: baltazar (~baltazar@185-29-82-78.pool.digikabel.hu)
[20:24:59] <floatcomplex> asd: oh, you're right
[20:25:09] * floatcomplex angrily sips coffee
[20:26:41] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:27:49] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[20:27:58] <NRK[m]> floatcomplex: it's unfortunate but that's the mentality a lot of developers have
[20:28:14] <floatcomplex> NRK[m]: which
[20:28:15] <NRK[m]> i've seen that quote being used unironically
[20:28:18] *** Joins: nisstyre (~wes@user/nisstyre)
[20:28:44] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:28:50] <floatcomplex> oh the unused ram thing
[20:29:46] *** Joins: kilobyte_ch (~kbch@77.109.171.167)
[20:29:53] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[20:30:10] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[20:30:35] <pragma-> I find it absurd when a "power user" goes to great effort to ensure that their machine's RAM usage is kept low. They constantly kill processes and close tabs and all kinds of things to make sure that their 16 GB of ram stays at 5 GB utilization or less at all times.
[20:30:43] *** Quits: kdc (~kdc@196.211.197.159) (Remote host closed the connection)
[20:30:53] <pragma-> Then they alt-tab and wait 5 seconds for something to load back up.
[20:31:02] <floatcomplex> is that a thing people do
[20:31:16] *** Joins: neiluj (~neiluj@2a01:e0a:1f2:d960:f2f0:dd4:de5f:b8c0)
[20:31:21] <pragma-> Some people have cpu and ram meters on their desktop and they get stressed out when their ram meter climbs, yes.
[20:31:58] <floatcomplex> i meant more as a developer, if you are chewing through a couple gigabytes per second of ram that you've cached results in, it might actually be more power efficient to recalculate the results when you need them
[20:32:09] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:32:57] <neiluj> Hello! Which ready-made hash table implementation would you recommend?
[20:33:15] <floatcomplex> neiluj: sigh...this comes up often enough that we should just do a godbolt
[20:33:25] <neiluj> yeah sorry :(
[20:33:52] <floatcomplex> a lot of people have a hardon for red black trees apparently and they inevitably come up in this conversation
[20:34:08] <floatcomplex> and are not a lot of code to implement
[20:34:14] <neiluj> The one thing that I don't like with glibc is that it's not very portable
[20:34:24] <neiluj> It's for some crypto implementation
[20:34:34] <floatcomplex> there's a lot to not like about glibc
[20:34:55] <floatcomplex> neiluj: if it's for crypto, you probably want one that is constant-lookup-time
[20:35:11] <floatcomplex> different goals than a general porpoise hash implementation
[20:35:14] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[20:35:14] *** Quits: u0_a391 (~u0_a391@64.85.173.130) (Ping timeout: 252 seconds)
[20:35:39] <neiluj> Yes, in fact it's a finite field arithmetic library, just need one for storing large polynomials
[20:35:49] <floatcomplex> basically, find the equivalent code in wireguard's codebase and do wahtagever wireguard does
[20:37:06] *** Joins: u0_a391 (~u0_a391@64.85.173.130)
[20:37:41] *** Joins: rgrinberg (~textual@200.5.63.76)
[20:38:13] <neiluj> sigh, the api is not very friendly :) https://git.zx2c4.com/wireguard-linux/tree/lib/rhashtable.c
[20:38:53] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[20:39:01] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[20:39:24] *** Joins: kdc (~kdc@196.211.197.159)
[20:39:46] *** Quits: simon323 (~simon323@2409:8a34:468:83d0:508a:5af0:67b4:6831) (Quit: simon323)
[20:40:28] <floatcomplex> maybe look at the wireguard-go version?
[20:40:57] <floatcomplex> it'll have to be ported back to C but it at least won't have a fuckton of kernel header dependencies
[20:41:50] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[20:44:03] *** Quits: alch (~alch@151.82.207.197) (Read error: Connection reset by peer)
[20:45:15] <pragma-> I'm the one that keeps bring red-black trees up!
[20:45:19] * pragma- hugs rb trees.
[20:45:51] * pragma- gestures at "buckets" and "complex maths" and shakes his head.
[20:45:59] * pragma- gestures at red-black trees and does a thumbs up.
[20:46:11] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[20:46:51] <floatcomplex> pragma-: do a godbol
[20:47:15] <neiluj> hmm nevermind I give up
[20:47:22] <pragma-> ,hash
[20:47:22] <candide> hash is http://en.wikipedia.org/wiki/Hashtable
[20:47:25] <pragma-> :/
[20:47:37] <neiluj> thanks for giving the example of wirguard though, might come handy
[20:47:53] *** Joins: alch (~alch@bo-18-143-62.service.infuturo.it)
[20:48:07] * pragma- gestures at hash collisions.
[20:48:12] <neiluj> Sure it's kind of easy to do, but I need to focus on other stuff
[20:48:47] * pragma- gestures at "coalesced hashing", "cuckoo hashing", "hopscotch hashing", "robin hood hashing"
[20:48:58] * pragma- pats rb trees.
[20:49:28] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 264 seconds)
[20:49:29] <pragma-> ,g hashtable or red black tree
[20:49:30] <candide> pragma-: (5,710,000 results) Hash tables v self-balancing search trees - Stack Overflow: <https://stackoverflow.com/questions/3265266/hash-tables-v-self-balancing-search-trees>
[20:50:12] <neiluj> Oh I remember someone told that typedefs are bad. Is there a reason to not use them?
[20:50:25] <floatcomplex> neiluj: they don't help with readability of the code
[20:50:50] <floatcomplex> they are merely a form of obfuscation, that increase the amount of domain specific knowledge necessary to understand and debug a codebase
[20:51:20] <neiluj> hmm, ok, but on the other hand this let's you get rid of those struct
[20:51:22] <pragma-> unnecessary typedefs obscure the types of objects. sometimes this is desired for api purposes, but just naively typedefing everything just forces people reading your code to have to go look up the typedef as well.
[20:51:28] <neiluj> which is repetitive
[20:51:47] <floatcomplex> neiluj: there is no good reason to want to get rid of those struct
[20:51:47] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[20:51:51] <floatcomplex> they are there for a reason
[20:52:19] <neiluj> I see, that might be a concern for huge programs were you cannot assume you do have a struct
[20:52:34] <floatcomplex> or even small programs that have to be debugged in a time sensitive manner
[20:52:44] <neiluj> oh indeed
[20:52:54] *** Joins: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:50c0:a5a0:d348:3603)
[20:52:57] <neiluj> ok, I'll do without them. Time to take good habits :)
[20:54:02] <floatcomplex> the only really convenient and not irresponsible use of typedefs outside of libc itself is for large function pointer types in a callback api
[20:54:02] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:ede1:63e1:1b15:d52) (Ping timeout: 240 seconds)
[20:57:26] *** Joins: mjbatty (~mjbatty@82.2.17.205)
[20:58:02] *** Joins: bruda (~bruda@172.58.59.79)
[20:58:15] <floatcomplex> ,recall me 0x8000
[20:58:15] <candide> [23h48m ago] <f​loatcomplex> can i xor the memory pointed to by an int16_t * with 0x8000 without implementation-defined behaviour, or do i have to access it as a uint16_t
[20:58:18] <Thedarkb1-Deskto> void (*initialiserNext)(struct _BOX_Chunk* self, int(*spawner)(BOX_Entity*,int,int,int,int)) is the ugliest one I've got at the moment.
[20:59:01] <Thedarkb1-Deskto> BOX_Entity* is typedef'd due to frequency of use.
[20:59:59] *** Quits: zwr (~zwr@2804:d45:b966:fb00:3ac9:5265:a79e:4a2a) (Ping timeout: 252 seconds)
[21:01:04] <NRK[m]> /me typedefs unsigned to uint
[21:01:16] <NRK[m]> what the, /me didn't work
[21:01:50] <Thedarkb1-Deskto> Your client might not support it?
[21:02:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[21:02:18] *** u0_a391 is now known as Kit
[21:02:19] <pragma-> smh, Matrix.
[21:02:21] <NRK[m]> yeah, i switched to a different matrix client recently
[21:02:23] * Kit laughs
[21:02:45] * NRK[m] tries again with element
[21:02:53] *** Joins: hxx (~hx@c-24-30-27-91.hsd1.ga.comcast.net)
[21:02:54] <Thedarkb1-Deskto> They're handled differently to normal messages.
[21:03:00] <NRK[m]> i do have weechat installed :P
[21:03:19] <Kit> weechat gang
[21:03:23] <NRK[m]> just more comfy having both matrix and irc rooms available on the same client
[21:03:33] <hxx> How would I make a C library without using .so files/.dll files?
[21:03:39] *** Quits: riskoir (~karaixx@user/riskoir) (Quit: Leaving)
[21:03:41] <Thedarkb1-Deskto> A /me is an ACTION and a normal message is a PRIVMSG
[21:04:07] <Kit> hxx put all the code in the header (actually dont)
[21:04:22] <Thedarkb1-Deskto> A fair few libraries do actually do that.
[21:04:28] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[21:04:35] <hxx> For whatever crazy reason, I want this to be ported to DOS as well, similar to libraries like PDCurses.
[21:04:44] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[21:04:58] <Thedarkb1-Deskto> C on real mode DOS is a pain in the arse if you want to keep things FOSS.
[21:05:14] <hxx> I don't specify real mode vs protected mode though.
[21:06:21] <hxx> DJGPP for example would make a protected mode 32 bit binary after compiling the C program.
[21:06:55] <hxx> Anyways. I don't recall if DOS has any such concept for DLL files.
[21:07:09] <rcf> hxx: the traditional approach is static linking. It doesn't actually change your code for the most part as long as you aren't dynamically loading things. 
[21:09:45] <rcf> hxx: for functionality that must truly be shared at runtime, the closest thing is a TSR. A program loads itself into memory at a given location that is known by any callers, and exits, and because there is no OS-level memory management it stays there. 
[21:09:51] *** Quits: stonkey (~stonkey@user/stonkey) (Read error: Connection reset by peer)
[21:10:07] <hxx> How does PDCurses manage to work on DOS, windows, and unix without being a mess?
[21:10:11] *** Joins: Akuli (~Akuli@82-203-165-211.bb.dnainternet.fi)
[21:10:19] <rcf> Because how it's loaded isn't a C issue, really. 
[21:10:34] <rcf> That's for the implementation to decide. 
[21:13:28] *** Quits: Akuli (~Akuli@82-203-165-211.bb.dnainternet.fi) (Client Quit)
[21:13:36] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[21:13:44] <rcf> Using a modular design and conditional compilation is all you need to do. 
[21:13:51] *** Joins: Akuli (~Akuli@82-203-165-211.bb.dnainternet.fi)
[21:14:08] *** Quits: Akuli (~Akuli@82-203-165-211.bb.dnainternet.fi) (Client Quit)
[21:14:35] *** Joins: Akuli (~Akuli@82-203-165-211.bb.dnainternet.fi)
[21:15:14] *** Joins: hxztnxt (~hxztnxt@ceduroam31.us.es)
[21:16:43] <Thedarkb1-Deskto> DOS definitely had DLLs.
[21:17:02] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 252 seconds)
[21:17:13] <Thedarkb1-Deskto> Or, at least, MS stuff used them, I don't know if they were part of the OS
[21:17:21] *** Joins: wntrmt (~wintermut@83.135.106.9)
[21:17:39] <floatcomplex> dynamic linking needs to be consigned to the dustbin of history
[21:17:41] *** Quits: wntrmt (~wintermut@83.135.106.9) (Client Quit)
[21:17:52] <floatcomplex> it was a clever idea in the 90s and we took it WAY too far
[21:17:55] <Kit> are .sys files in dos like dlls and sos or are they something else
[21:17:58] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[21:18:11] <hxx> .sys files are device drivers for DOS. I think.
[21:18:44] <Kit> yea but what are their contents resemble
[21:18:52] <Kit> are they just exectuables
[21:18:52] <Thedarkb1-Deskto> I remember there being a BASIC run time DLL for QuickBASIC 4.5 programs on DOS, but that's the only one I can remember having on my system.
[21:18:56] <Kit> object files
[21:19:19] <Thedarkb1-Deskto> .sys files can be all sorts of things, text configs, bitmaps, the kernel.....
[21:19:43] <hxx> CONFIG.SYS being the most important sys file.
[21:20:09] <Thedarkb1-Deskto> I don't think you'd get particularly far without MSDOS.SYS
[21:20:25] <hxx> Well true.
[21:20:57] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[21:21:03] * pragma- pats HIMEM.SYS
[21:21:16] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:21:17] <pragma-> gotta have ANSI.SYS too
[21:22:28] <Thedarkb1-Deskto> Of course, otherwise tradewars won't draw properly when you play it on your local BBS.
[21:23:05] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[21:24:42] *** Joins: akahs (~Shaka@user/shaka)
[21:24:50] <hxztnxt> i dont understand the logic behind this
[21:24:51] <hxztnxt> offset & ~(sysconf(_SC_PAGE_SIZE) - 1)
[21:25:01] *** Joins: Klinda (~superleag@user/klinda)
[21:25:09] <hxztnxt> it is supposed to allign offset with the page_size
[21:25:16] *** Joins: rgrinberg (~textual@200.5.63.76)
[21:25:34] <hxztnxt> so it makes a mask and applies it
[21:25:39] <floatcomplex> offset and not 4095
[21:26:05] <floatcomplex> it clears all the low bits
[21:26:28] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 256 seconds)
[21:26:36] <hxztnxt> clear the lowbits?
[21:27:21] <floatcomplex> yeah, leaving a value that is a multiple of 4096
[21:27:21] <hxztnxt> okay, i think i get it
[21:30:00] *** Joins: seninha (~seninha@user/seninha)
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:38] *** Joins: ns12 (~ns12@user/ns12)
[21:30:44] *** Joins: zwr (~zwr@2804:d45:b966:fb00:3e37:1000:411e:c48c)
[21:31:05] *** Quits: hxztnxt (~hxztnxt@ceduroam31.us.es) (Quit: Leaving)
[21:31:13] *** Joins: iomari891 (~iomari891@105.112.138.38)
[21:36:25] <Thedarkb1-Deskto> It's weird how folk music changes between areas, in the north of England, the verses of Hot Asphalt is about the sheer quantities of asphalt that went into the London to Yorkshire highway, whereas in Ireland it's about stirring a dead police officer into an asphalt boiler.
[21:36:28] <Thedarkb1-Deskto> Same chorus though!
[21:38:01] <Thedarkb1-Deskto> I meant to post that elsewhere, sorry, offtopic >_<
[21:38:29] *** Quits: kerala (~liberapoo@117.212.173.204) (Ping timeout: 252 seconds)
[21:38:44] *** Joins: kerala (~liberapoo@117.212.173.204)
[21:44:10] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[21:45:02] *** Quits: gnomesort (~gnomesort@user/gnomesort) (Quit: ZNC - https://znc.in)
[21:45:04] * bruda pulls out the whips n chains, "we have a method for dealing with off-topic here."
[21:45:08] <bruda> kidding :P
[21:46:11] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[21:46:53] * Thedarkb1-Deskto has declared this an obscure folk song discussion zone.
[21:49:33] * bruda drops to his knees and screams, "Oh the humanity!"
[21:49:46] *** Quits: mjbatty (~mjbatty@82.2.17.205) (Quit: Leaving)
[21:50:02] <zx2c4> neiluj: wireguard doesn't use rhashtable
[21:50:35] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[21:50:49] *** Quits: Kit (~u0_a391@64.85.173.130) (Read error: Connection reset by peer)
[21:51:09] *** Joins: Kit (~u0_a391@64.85.173.130)
[21:53:28] <zx2c4> it uses  <linux/hashtable.h>
[21:55:07] <zx2c4> Anyway, here's a super simple single-header C hashtable you can use: https://git.zx2c4.com/wireguard-tools/tree/src/wincompat/include/hashtable.h
[21:57:05] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[21:57:06] <floatcomplex> ,factshow hashtable
[21:57:06] <candide> hashtable: https://git.zx2c4.com/wireguard-tools/tree/src/wincompat/include/hashtable.h
[21:57:20] <zx2c4> HAH
[21:57:27] *** Quits: PraiseIdleness (~PraiseIdl@2a02:c7f:d44c:bb00:490f:f016:e380:a0a4) (Quit: Textual IRC Client: www.textualapp.com)
[21:57:56] *** Joins: cpuid (~cpuid@co5.at)
[21:57:56] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[21:57:56] *** Joins: cpuid (~cpuid@user/cpuid)
[22:00:16] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 264 seconds)
[22:00:55] *** Joins: orthoplex64 (~crm@70.120.0.94)
[22:01:02] *** Quits: kerala (~liberapoo@117.212.173.204) (Ping timeout: 256 seconds)
[22:01:30] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[22:01:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:01:55] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:50c0:a5a0:d348:3603)
[22:02:13] *** Quits: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:50c0:a5a0:d348:3603) (Read error: Connection reset by peer)
[22:02:43] *** Quits: hxx (~hx@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[22:05:23] *** Joins: mrig (~mrig@user/mrig)
[22:06:46] *** Quits: ckdCreations (~ckdCreati@147.55.133.132) (Read error: Connection reset by peer)
[22:07:01] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[22:08:40] *** Quits: aradesh (~aradesh@user/aradesh) (Ping timeout: 264 seconds)
[22:09:35] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[22:10:21] *** Joins: aradesh (~aradesh@user/aradesh)
[22:17:04] *** Joins: mahmutov (~mahmutov@5.176.7.214)
[22:17:24] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[22:18:23] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:23:52] *** Quits: Jong (~Jong@2620:10d:c090:400::5:6ce8) (Read error: Connection reset by peer)
[22:24:00] <pragma-> ,factinfo hashtable
[22:24:00] <candide> hashtable: Factoid submitted by floatcomplex!~floatcomp@wireguard/tunneler/floatcomplex for #c on Tue Nov 30 10:26:59 2021 [27m1s ago], referenced 0 times (last by nobody)
[22:24:45] * pragma- wipes his eye.
[22:24:57] <pragma-> People are submitted factoids to it again.
[22:25:00] <pragma-> submitting
[22:25:17] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[22:25:43] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[22:29:28] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-bc7b-beb0-653c-822c.res6.spectrum.com)
[22:31:36] *** Joins: singularity00 (~singulari@85.187.64.126.client.entry.bg)
[22:35:12] <asd> is there a way to get bsearch to behave like C++ upper_bound()/lower_bound() or should i just implement it myself?
[22:39:46] <DPA> Mesa also has a pretty nice hash_table implementation: https://gitlab.freedesktop.org/mesa/mesa/-/blob/main/src/util/hash_table.h https://gitlab.freedesktop.org/mesa/mesa/-/blob/main/src/util/hash_table.h
[22:41:36] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[22:44:34] *** Joins: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:50c0:a5a0:d348:3603)
[22:44:53] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:50c0:a5a0:d348:3603) (Read error: Connection reset by peer)
[22:45:07] *** Quits: Hazza (~Haxxa@125-63-20-105.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:35] *** Joins: phox (~phox@c-98-247-195-44.hsd1.wa.comcast.net)
[22:45:39] <phox> o/
[22:47:33] *** Joins: Haxxa (~Haxxa@125-63-20-105.ip4.superloop.com)
[22:49:50] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[22:50:11] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[22:51:13] *** Quits: kdc (~kdc@196.211.197.159) (Remote host closed the connection)
[22:51:23] *** Quits: mongrel (uid508343@id-508343.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:53:17] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:53:24] *** Joins: msk_ (~msk@185.124.240.158)
[22:54:00] *** Quits: msk_ (~msk@185.124.240.158) (Read error: Connection reset by peer)
[23:00:45] *** Joins: Nistar (~Nistar@188.241.177.237)
[23:03:08] <NRK[m]> anyone knows about some gcc flag to get better constant propagation?
[23:03:31] <NRK[m]> specifically, the loop in line 35 is what i was hoping would get resolved at compile time: https://godbolt.org/z/o7jbG318n
[23:04:01] <NRK[m]> (ignore the horrible code (or don't :P))
[23:06:27] *** Quits: zlg (~zlg@user/zlg) (Quit: WeeChat 2.8)
[23:06:46] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 256 seconds)
[23:07:07] *** Quits: gucci (~i.am@189.58.156.81.dynamic.adsl.gvt.net.br) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:10:24] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[23:12:26] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[23:12:51] *** Joins: ckdCreations (~ckdCreati@147.55.130.33)
[23:18:48] <asd> whats the min value for `long long foo;` ? 
[23:19:32] <pragma-> ,cc printf("%lld", LLONG_MIN);
[23:19:35] <candide> pragma-: -9223372036854775808
[23:24:57] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:32:12] *** Joins: Inline (~Inline@aftr-37-201-240-100.unity-media.net)
[23:33:21] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[23:33:26] *** Joins: Betal (~Betal@user/betal)
[23:34:58] <neiluj> Is there a way to assert() but with a custom error message?
[23:35:05] <neiluj> fprintf(stderr,..) maybe?
[23:35:30] <rcf> That is the normal approach, yes. 
[23:35:48] <Kit> if (cond) {fprint (stderr, ...); exit (1)*
[23:35:59] <Kit> oops
[23:36:02] <phox> yeah tranditionally you roll your own spew-and-exit(1) function, in most circumstances...
[23:36:03] <neiluj> Thanks, is it worth making it a macro?
[23:36:12] <Kit> stupid mobile keyboard
[23:36:15] <phox> function not macro preferably
[23:36:17] <neiluj> or static function is fine
[23:36:22] <neiluj> good
[23:36:36] <phox> well, often not static depending how you factor your application...
[23:36:42] <phox> but yeah, that's common
[23:37:16] <phox> pragma-: oh a familiar face.  o/
[23:38:33] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c5ed:3c67:1c78:cc2e)
[23:38:34] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c5ed:3c67:1c78:cc2e) (Changing host)
[23:38:34] *** Joins: skapata (~Skapata@user/skapata)
[23:38:44] *** Joins: NEYi (~NEYi@109.251.216.38)
[23:38:56] <twkm> asd: it must at least 64 bits (including sign), but can be more.  what pragma- showed is how to find a specific implementation's bound.
[23:39:56] <asd> twkm: yeah i was looking for the LLONG_MIN; i only found LONG_MIN;
[23:40:04] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:41:29] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:41:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:43:09] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:46:07] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:48:15] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:50:15] *** Joins: u0_a391 (~u0_a391@2600:380:5e22:c647:c579:6a65:2348:94a4)
[23:50:53] <pragma-> hi phox
[23:51:17] *** u0_a391 is now known as Kit_
[23:52:53] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:52:53] <earnest> BSD err.h peeks around the corner
[23:53:15] <nomagno> How can `myint = myint | (1 << (2 - i))`, when i goes `0,1,2` in a loop, and myint is a uint initialized to 0, ever give a super big almost-16-bit-integer-limit number?
[23:53:28] *** Joins: PortableDave (~portabled@194-223-14-158.tpgi.com.au)
[23:54:12] <nomagno> It should result in tops `111`, if my binary math is correct
[23:54:19] *** Quits: Kit (~u0_a391@64.85.173.130) (Ping timeout: 256 seconds)
[23:54:23] *** Kit_ is now known as Kit
[23:56:45] <rcf> nomagno: did you initialize myint to zero 
[23:57:02] <rcf> Wait you said that 
[23:57:04] <rcf> Nevermind 
[23:57:53] *** Joins: miasuji (~miasuji@75-166-59-108.hlrn.qwest.net)
[23:58:04] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:58:17] *** Quits: PortableDave (~portabled@194-223-14-158.tpgi.com.au) (Ping timeout: 256 seconds)
[23:58:36] <rcf> ,cc unsigned int myint = 0; for(int i = 0; i < 3; ++i) { myint = myint | (1 << (2 - i)); printf("%d\n", myint);}
[23:58:38] <nomagno> I always zero-initialize everything, it has proven to do more good than harm for me
[23:58:39] *** Joins: rgrinberg (~textual@200.5.63.76)
[23:58:39] <candide> rcf: 4 6 7
[23:58:50] <nomagno> I can confirm that works!
[23:58:53] <nomagno> I'm not sure what's going on
[23:58:53] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[23:59:29] <nomagno> when modifying an array passed to a function, and then returning, it somehow gets altered
[23:59:32] <nomagno> but just that ONE int
[23:59:34] <nomagno> the rest is fine
[23:59:40] *** Quits: miasuji (~miasuji@75-166-59-108.hlrn.qwest.net) (Client Quit)
