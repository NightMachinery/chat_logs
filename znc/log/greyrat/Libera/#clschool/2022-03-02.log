[00:16:48] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[00:22:14] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Quit: Quit)
[00:23:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:25:08] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[01:13:10] *** Quits: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl) (Quit: Client quit)
[01:42:51] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[01:49:59] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[02:02:12] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[02:02:28] *** Joins: eugercek (~user@user/eugercek)
[02:02:43] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[02:10:53] *** Joins: hashfunc133c (~user@2601:5c0:c280:7090:8c1e:afa3:b36b:39be)
[02:16:59] *** Quits: minion (~minion@common-lisp.net) (Killed (NickServ (GHOST command used by minion1)))
[02:17:27] *** Joins: minion (~minion@common-lisp.net)
[02:20:47] *** Quits: bldr (~bull@185.117.72.168) (Ping timeout: 256 seconds)
[02:22:16] *** Joins: bldr (~bull@185.117.72.168)
[02:42:46] <jgart> Hi everyone, what's the most efficient way to use two projects with quicklisp that are not in the official central repository?
[02:43:18] <jgart> I have these two wip projects: [qc](https://git.genenetwork.org/jgart/qc) and [qc-uploads](https://git.genenetwork.org/jgart/qc-uploads). They're both not packaged in the quicklisp official central repository.
[02:43:29] <jgart> qc-uploads depends on qc
[02:49:17] <jgart> any help/advice much appreciated
[02:59:14] <jgart> answer by phoe: clone the projects into ~/quicklisp/local-projects/
[02:59:42] <jfh> jgart: this is the quicklisp FAQ: https://www.quicklisp.org/beta/faq.html
[03:00:09] <jfh> jgart: it has a section on local libraries "Can I load a local project that isn't part of Quicklisp?"
[03:00:48] <jfh> I haven't done it myself, but that looks like the "official" way to do it
[03:02:03] <jgart> jfh, I just tried phoe's suggestion (same as quicklisp faq) and it worked :)
[03:02:36] <jgart> I wish guix had something as easy as that for loading random custom packages..
[03:03:48] <jfh> oh dang ... just realized my nick is wrong ugh
[03:04:50] *** jfh is now known as kagevf
[03:05:18] <kagevf> there we go :) 
[03:09:09] <White_Flame> jgart: I prefer adding symlinks from localprojects/, easier to contain a projects directory for backups
[03:09:16] <White_Flame> erm, kagevf: :)
[03:09:28] * White_Flame is nick-confused
[03:10:33] <jgart> White_Flame, not sure I fully understand that approach. Why do the symlinks make it easier for backups if you don't mind explaining?
[03:11:28] <White_Flame> because then all your projects are in 1 directory, outside of your "system" dirs like quicklisp, and you can back that all up together
[03:11:46] <White_Flame> unless you just backup your entire homedir, then it's just moot
[03:16:28] <kagevf> nice :)
[03:18:19] <jgart> White_Flame, ah ok, got it
[03:18:31] <jgart> White_Flame, thanks for sharing that approach
[03:18:34] *** Quits: hashfunc133c (~user@2601:5c0:c280:7090:8c1e:afa3:b36b:39be) (Ping timeout: 260 seconds)
[03:21:59] <jgart> the main use of adding a packages.lisp to  your project is so that you don't have to declare a define-package at the top of every file?
[03:24:03] <White_Flame> well, often you'll have multiple .lisp files all defining things within a single package
[03:24:27] <White_Flame> but sometimes recompiling the defpackage can give warnings and such as you modify things, that leaving it alone is a good idea as other things are recompiled
[03:24:40] <White_Flame> especially when you're exporting things
[03:25:09] <jgart> re: multiple lisp files: ah yes, that's what the comments here indicate: https://github.com/phoe/wordnet/blob/master/packages.lisp#L25
[03:44:03] *** Joins: Oladon (~olad@98.43.81.226)
[03:55:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:05:57] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[04:32:41] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[04:38:12] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 240 seconds)
[04:46:28] *** Joins: beach` (~user@2a01:cb19:150:3400:394a:6f50:a550:eb5b)
[04:50:17] *** Quits: beach (~user@2a01:cb19:150:3400:ecb4:332c:1f4a:5c3b) (Ping timeout: 240 seconds)
[05:34:51] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:59:17] *** Quits: occ (~occ@user/occ) (Quit: Leaving.)
[06:18:59] *** Joins: hashfunc133c (~user@2601:5c0:c280:7090:8c1e:afa3:b36b:39be)
[07:00:43] *** Joins: Bike (~Bike@71.69.170.70)
[07:09:28] *** beach` is now known as beach
[07:23:50] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Remote host closed the connection)
[07:30:59] <beach> Good morning everyone! 
[07:41:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[07:50:37] *** Quits: hashfunc133c (~user@2601:5c0:c280:7090:8c1e:afa3:b36b:39be) (Ping timeout: 240 seconds)
[08:07:46] <jgart> Good Night! (EST)
[08:08:37] <beach> minion: Please tell jgart about universal greeting time!
[08:08:37] <minion> jgart: look at universal greeting time: It is always morning when a person enters a channel, and late night when they leave. You may want to read http://www.total-knowledge.com/~ilya/mips/ugt.html for further information
[08:17:33] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:18:41] <edgar-rft> EST is estimated time :-)
[08:40:00] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[09:07:31] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:34:59] *** Joins: eugercek (~user@user/eugercek)
[09:56:03] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[10:57:45] *** Joins: silasfox (~sbv@p200300cec7151c00ec0a6482fa84d04f.dip0.t-ipconnect.de)
[11:08:05] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[11:25:48] *** Joins: shka (~herr@109.231.3.55)
[11:57:48] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[12:00:31] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[12:51:24] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[13:04:35] <ilmu[m]1> minion: who is your master?
[13:04:36] <minion> chandler is my master 
[13:05:11] <ilmu[m]1> minion: are you foss?
[13:05:11] <minion> maybe 
[13:05:17] <ilmu[m]1> goddam
[15:08:04] <beach> Yes, the code for minion is free.
[15:10:55] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:38:02] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:52:16] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 272 seconds)
[15:54:41] *** Joins: v88m (~Xiro@213.87.154.117)
[15:59:19] *** Quits: v88m (~Xiro@213.87.154.117) (Ping timeout: 256 seconds)
[16:01:00] *** Quits: silasfox (~sbv@p200300cec7151c00ec0a6482fa84d04f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:01:17] *** Joins: silasfox (~sbv@p548d1148.dip0.t-ipconnect.de)
[16:08:01] *** Quits: Josh_2 (~user@197.185.100.162) (Remote host closed the connection)
[16:09:21] *** Joins: v88m (~Xiro@213.87.129.34)
[16:30:17] *** Quits: v88m (~Xiro@213.87.129.34) (Ping timeout: 240 seconds)
[16:41:03] *** Joins: eugercek (~user@user/eugercek)
[16:50:43] <phoe> ilmu[m]1: https://github.com/stassats/lisp-bots/blob/master/minion/minion.lisp
[17:01:38] *** Joins: Bike (~Glossina@71.69.170.70)
[17:26:52] *** Joins: Josh_2 (~user@197.185.99.232)
[17:30:58] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[17:39:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[18:06:25] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[18:12:32] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[18:27:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[18:35:00] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 240 seconds)
[18:47:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:05:15] *** Joins: v88m (~Xiro@213.87.128.114)
[19:28:17] *** Quits: v88m (~Xiro@213.87.128.114) (Ping timeout: 240 seconds)
[19:29:06] *** Joins: v88m (~Xiro@213.87.159.21)
[19:37:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[19:38:23] *** Quits: v88m (~Xiro@213.87.159.21) (Ping timeout: 256 seconds)
[19:38:43] *** Joins: v88m (~Xiro@213.87.159.21)
[20:03:03] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:16:44] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[20:26:48] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:34:09] *** Joins: jealousmonk (~user@user/jealousmonk)
[20:37:19] *** Quits: v88m (~Xiro@213.87.159.21) (Ping timeout: 256 seconds)
[20:51:24] *** Joins: Oladon (~olad@98.43.81.226)
[20:52:20] <Demosthenex> so, can someone refer me to some reading on using macros to wrap defclass, specifically for shortening slot definitions? i think there must be something i'm not understanding in my efforts to do it
[20:54:05] <beach> To begin with, it is usually a bad idea to attempt something like that.
[20:54:20] <beach> The desire to do it is based on false ideas about modularity.
[20:54:32] <Demosthenex> oh? hrm.
[20:54:45] <beach> That said, there is no particular problem in creating such a wrapper.
[20:55:01] <Demosthenex> i just happen to be specifying many slots, and they are for a postmodern ORM class anyway so they are all column definitions
[20:55:14] <mfiano> Just have a look at structy-defclass
[20:55:21] <mfiano> But yes, it is a very bad idea.
[20:55:47] <beach> OK, then, define a DEFCLASS-ORM that expands into DEFCLASS. What problem are you having?
[20:55:54] <Demosthenex> in my case, i'm just trying to reduce the massive duplication of my definition
[20:56:20] <mfiano> If slot names are the same symbol as your slot accessors, you are in for a world of hurt.
[20:56:35] <mfiano> Or well, your users are.
[20:56:35] <beach> What kind of duplication are you trying to reduce?
[20:56:39] <Demosthenex> https://dpaste.org/4Haa   
[20:56:49] <Demosthenex> most for initarg, slot name, and then the data type is wonky
[20:57:02] <beach> What kind of silly spacing is that?
[20:57:11] <mfiano> Ugh, mixing tabs with spaces is a horrible thing to subject us to.
[20:57:32] <pjb> Demosthenex: programmers using spaces earn more than those using tabs.
[20:57:45] <Demosthenex> you can have :col-type string, but if you want an option one, then you have to do :col-type (or db-null string) :col-default :null :initform :null
[20:57:46] <pjb> Demosthenex: https://www.bbc.com/news/technology-40302410
[20:58:10] <beach> Demosthenex: Why do you need to supply the type at all?
[20:58:23] <Demosthenex> honest, i've run untabify on that buffer like 6 times :P
[20:58:27] <pjb> Demosthenex: https://www.emacswiki.org/emacs/NoTabs
[20:58:51] <Demosthenex> look, before we get into tabs and spaces, i'd love to do smart tabs mode, but it's not universal, so i'm configured for spaces.
[20:58:58] <pjb> Also: https://www.emacswiki.org/emacs/UntabifyUponSave
[20:59:00] <Demosthenex> but i think one of my alignment functions is using tabs
[20:59:09] <mfiano> beach: It is for a ORM to map classes to database columns
[20:59:25] <mfiano> ORM's are a very bad idea, if you know anything about relational theory.
[20:59:32] <mfiano> But that's an aside.
[20:59:43] <Demosthenex> beach: postmodern provides a simple DAO orm wrapper class 
[20:59:58] <beach> OK, I'll leave further advice up to others.
[21:00:31] <Demosthenex> mfiano: yeah, s-sql is nice, i'm not sold on orm, but testing it here
[21:00:41] <mfiano> Yeah I'm not touching this one either. I already provided my advice.
[21:00:45] <pjb> Demosthenex: also, you can use redshank-align-defclass-slots
[21:01:13] <pjb> https://searchcode.com/file/52722817/redshank.el/
[21:02:27] <Demosthenex> pjb: yeah, i'll look that over. wonder if it has sly support
[21:03:02] <Demosthenex> so fact is, i'm writing a parser for structured text files. it's all dump of commands from different boxes, some things look like gdb spam, others are actual records.
[21:03:21] <pjb> Demosthenex: redshank gives: http://dpaste.org/ua3W
[21:03:23] <Demosthenex> if i were lazy, i could just throw an alist into json, and put that in a postgresql jsonb column
[21:03:56] <Demosthenex> pjb: which is how it looks on my screen already, i can't see the tabs ;] but i untabified again
[21:04:33] <Demosthenex> anyway, i'm trying to enforce datatypes (string, int, bool) and postgres lets me do that. i can either hand craft a table with specifics, or use this orm layer
[21:05:37] <Demosthenex> if i do it hand crafted, i can make a list of columns and types, generate my table def, and generate insert statements.
[21:05:46] <Demosthenex> the orm seemed to be an all in one
[21:06:20] <Demosthenex> i can understand that macroing defclass is likely to cause problems, and orm's arent' optimal over the long term. good points
[21:06:29] <Demosthenex> that's also why i asked ;]
[21:08:50] <pjb> There's no reason to have any problem with a macro. It can generate exactly the same code.
[21:10:18] <Demosthenex> i don't like json because i get no strict typing. i was using TXR to parse records, and moved over to CL with trivia, it's been good. now i'm just trying to clean up and reduce the duplication on my POC
[21:11:54] <Demosthenex> if i toss the orm, i can just work with alists for data and have my table and columns defined once, and let postgres do my typing
[21:12:05] <Demosthenex> then i don't make a mess with defmacro over top of class
[21:16:25] <pjb> Demosthenex: for example: https://termbin.com/z4c2
[21:19:15] <Demosthenex> pjb: that is much cleaner!
[21:19:44] <Demosthenex> hrm. i gotta look up , vs ,@ again
[21:20:00] <Demosthenex> because that mapcar was like what i had, but mine died
[21:20:21] <pjb> Demosthenex: (let ((x 42) (xs '(1 2 3))) `(foo ,x ,@xs bar)) #| --> (foo 42 1 2 3 bar) |# 
[21:22:16] <Demosthenex> inline list append
[21:22:27] <Demosthenex> that clicks, exactly the error my code died on
[21:23:35] <Demosthenex> i'm pretty comfortable pushing around functions, but... i don't often write macros. ty for the example, i'll go tinker some more
[21:23:44] <Demosthenex> that was really helpful
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:23] <pjb> Demosthenex: macros are just functions that return forms.
[21:30:47] <pjb> There's no telling whether a form like  (let ((x 42) (xs '(1 2 3))) `(foo ,x ,@xs bar))  is in a defmacro or in a defun.
[21:30:55] *** Joins: ns12 (~ns12@user/ns12)
[21:32:19] <Demosthenex> to my embarrassment i killed macroexpand in one of my earlier tests, so i'm still learning ;]
[21:37:16] <rotateq> Demosthenex: kill and die? :) do you mean conditions were signaled?
[21:37:59] <Demosthenex> rotateq: i fear i may have overwritten something, its ok, i restarted sly and sbcl a few times :P
[21:38:17] <Demosthenex> my pet project for learning new languages is to write parsers.
[21:38:21] <rotateq> ah hm
[21:38:27] <rotateq> okay
[21:38:38] <Demosthenex> well... not like computer language parsers, but structured data parsers
[21:38:55] <rotateq> so maybe you're interested in parser combinators, very powerful concept
[21:39:02] <rotateq> yesyes
[21:39:06] <Demosthenex> i work with a variety of systems, and vendors never provide proper tools for viewing like data together, inevitably i have to parse crap to throw it into spreadsheets or tables so i can compare
[21:39:12] <rotateq> what can also be done by readmacros
[21:39:25] <rotateq> didn't we talk some evening about that?
[21:39:31] <Demosthenex> well, that's a deep topic
[21:39:34] <Demosthenex> we may have ;]
[21:39:46] <rotateq> indeed deep
[21:42:37] <Demosthenex> i was thrilled to find TXR, but i've discovered that despite it being pretty cool, it's impossible to debug
[21:48:16] <Demosthenex> line oriented records are easy to parse and verify, between regexps or just splits. but multiline records are really hard, especially if their format is subject to change. and while TXR (a lisp) was good at extracting, if the template didn't match the verbose logs were impossible to read. so i reverted to CL and parsing with regexp and trivia. at least i can use the debugger to see what failed.
[21:53:42] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:54:39] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[21:55:41] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[21:57:00] <Demosthenex> so while i've been reading up on system/libraries like TXR, TextFSM, Template Text Parser (TTP), etc they are all other languages. so i've been trying to learn and apply CL to similar data. my goal is always the same, importing text records into tables.
[21:57:10] <Demosthenex> i'm open to additional suggested reading material =]
[22:03:51] <Demosthenex> read macros i'm certainly not familiar with
[22:22:39] *** Quits: silasfox (~sbv@p548d1148.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[22:45:16] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[22:55:01] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[23:23:26] <Demosthenex> https://dmitrygolovach.com/python-ttp-template-text-parser/  that's cool, but it's python :P
