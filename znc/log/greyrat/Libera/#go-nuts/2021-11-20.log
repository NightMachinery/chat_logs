[00:02:40] *** Quits: Rhvs (Rhys@help.lux.melted.me) (Read error: Connection reset by peer)
[00:03:24] *** Joins: Rhvs (Rhys@help.lux.melted.me)
[00:05:46] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:6826:a7a9:1c79:6774)
[00:06:14] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 268 seconds)
[00:08:18] <Batzy> quick question, if I have a function that returns an error and is making several function calls itself. Is there a way to just write if err != nil { return err } but have it apply to any error thrown within the function body as opposed to having to write it after every function call i make
[00:12:05] *** Joins: mickey80 (~user@user/mickey)
[00:12:27] <b0nn> No, and I'm extremely thankful that there's not
[00:13:13] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[00:13:57] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:14:25] <Batzy> just means i have to type a lot
[00:14:33] <Batzy> go can be pretty verbose
[00:14:39] <b0nn> uhhhh
[00:15:10] <b0nn> I mean, sure, if you cannot configure your IDE to insert the idiom with a single keypress (which is what i have done)
[00:15:12] <moldorcoder7_> Batzy, thats one of the common reproach to go
[00:15:33] <moldorcoder7_> as going to recommend snippet :)
[00:15:42] <Batzy> b0nn: it makes the code look a little nasty though
[00:16:34] <moldorcoder7_> you can do if err ==nil {err=nextfunction()}
[00:16:40] <moldorcoder7_> and check for err at the end
[00:16:47] <Batzy> meh it's alright
[00:16:52] <zsnes> are you making calls that depend on the previous call succeeding?
[00:17:38] *** Quits: resamvi (~resamvi@user/resamvi) (Quit: resamvi)
[00:18:19] <Batzy> yes
[00:18:38] <b0nn> it makes your code look like you have paid attention to the outcome of your actions
[00:18:48] <zsnes> then you have to check it right? :P
[00:19:07] <Batzy> yes im not saying "not check it"
[00:19:21] <Batzy> but i want like a defer statement, but instead of just running it at the end i want it to run on error
[00:19:26] <b0nn> you are saying "throw an exception"
[00:19:34] <Batzy> and the defer would be to return the err
[00:19:35] <Batzy> yeah
[00:19:50] <zsnes> you can do some fancy stuff with inline functions and/or a for() loop and break to catch errors or something.
[00:19:52] <b0nn> but, the problem with throwing exceptions is, you can never tell if it's handled
[00:20:08] <b0nn> or where it's handled
[00:20:18] *** Quits: oz (~oz@crystal/user/oz) (Read error: Connection reset by peer)
[00:23:34] <zsnes> like something like this would allow you to centralize the error handling itself
[00:23:37] <zsnes> https://play.golang.org/p/lOCGaqTEyrN
[00:23:43] <zsnes> but you still have to check the err to break out after ever call
[00:25:07] <zsnes> perhaps you could combine this with interfaces and type switches to load the funciton calls into an array and loop through that
[00:25:17] <b0nn> OMG
[00:25:21] <zsnes> but i think its best to just do it the "verbose" way, thats the go idiomatic way
[00:25:28] <b0nn> OR they could just if err != nil {}
[00:25:39] <zsnes> lol :P
[00:26:06] <Batzy> yeah i could just do err != nil {} 5,000 times
[00:26:12] <zsnes> this is like an old C programming trick, use a do while loop that only loops once and then use a switch to handle the error and how far the function got
[00:26:47] <zsnes> you can also use GOTO and not have the loop i guess
[00:27:54] <zsnes> }
[00:27:59] <zsnes> https://play.golang.org/p/wkF808YLIOX
[00:28:01] <zsnes> goto a little cleaner
[00:34:34] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[00:34:54] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[00:35:15] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[00:35:16] *** mickey80 is now known as mickey8
[00:35:32] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Remote host closed the connection)
[00:37:12] *** Quits: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Remote host closed the connection)
[00:45:50] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[00:46:03] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Quit: Leaving)
[00:46:33] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[00:51:00] <shiroyasha> I give it a month before someone comes up with a package that does something like this monstruosity:  https://go2goplay.golang.org/p/8ZiFrcuSTOr
[00:52:11] <b0nn> shiroyasha: there's a better link for generics https://gotipplay.golang.org/
[00:52:45] <shiroyasha> Thanks! I just used the first link I found on a random search.
[00:54:34] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[00:56:37] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:57:25] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[00:58:42] *** Joins: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00)
[00:59:26] *** Joins: cyrus_mc (~cyrus_mc@45.62.180.58)
[01:00:43] *** Joins: LtHummus_ (~lthummus@97-126-100-88.tukw.qwest.net)
[01:00:49] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[01:01:32] *** Quits: LtHummus (~lthummus@97-126-101-182.tukw.qwest.net) (Ping timeout: 240 seconds)
[01:03:14] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[01:04:42] <rawtaz> why isnt this working: https://kopy.io/vZBNq
[01:04:56] <rawtaz> can i not create an ad-hoc map like that?
[01:05:31] <shiroyasha> map[string]interface{}{ "number": number }
[01:05:36] *** Quits: rusty (~rustyboy@82.77.237.221) (Quit: Leaving)
[01:05:50] <shiroyasha> The type is `interface{}`, not `interface`.
[01:07:35] <rawtaz> oh, right..
[01:08:24] <b0nn> it's like a struct, inside the {} is where you'd define the fields (structs) or methods (interfaces) and you're saying any type that has zero or more methods
[01:08:49] <rawtaz> im trying to be flexible :-)
[01:13:32] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4882-920c-9355-aa7d.res6.spectrum.com)
[01:13:38] *** Joins: sillyboots (~sbooties@207.251.78.34)
[01:14:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[01:14:20] <sillyboots> Hi! Does anyone know why running go test -v ./... would prevent test logs from streaming out, while plain go test -v does not?
[01:15:54] *** Joins: fikran (~fikran@user/fikran)
[01:21:46] <rawtaz> another quick question: https://kopy.io/A51FS
[01:22:22] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 260 seconds)
[01:23:05] *** Joins: rusty (~rustyboy@82.77.237.221)
[01:24:02] *** Quits: rusty (~rustyboy@82.77.237.221) (Client Quit)
[01:31:04] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[01:31:47] *** Joins: mertyildiran (~mertyildi@85.103.163.116)
[01:32:03] <shiroyasha> rawtaz: "A defined type is always different from any other type." — https://golang.org/ref/spec#Type_identity
[01:33:11] <rawtaz> indeed, makes sense
[01:33:52] <rawtaz> so, then it makes sense to keep the casting?
[01:33:52] *** Quits: mertyildiran (~mertyildi@85.103.163.116) (Client Quit)
[01:35:11] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[01:35:19] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[01:36:14] <shiroyasha> Yea, you can't avoid converting it.
[01:36:54] <shiroyasha> (As far as I know, anyway.)
[01:38:08] <rawtaz> well it actually works the same if its  logrus.WithFields(logrus.Fields(fields)).Info(message)  and  logrus.WithFields(fields).Info(message)  - no difference
[01:43:40] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[01:44:34] <rawtaz> one day im gonna read through all of that language reference :)
[01:45:01] <rawtaz> btw is there any ETA for go 1.18 so we get generics? :)
[01:46:15] *** Joins: rusty (~rustyboy@82.77.237.221)
[01:48:34] *** Church is now known as Xf
[01:52:36] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[01:53:19] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (Quit: What's that?)
[01:56:42] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[01:58:40] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[02:00:07] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[02:01:08] *** Joins: mickey8 (~user@user/mickey)
[02:12:14] *** Quits: rusty (~rustyboy@82.77.237.221) (Remote host closed the connection)
[02:12:17] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:7c4d:dc6b:e98f:8777)
[02:13:14] *** Joins: andlabs_ (~andlabs@2a00:79e1:abc:1a12:a802:7d36:ea24:ff86)
[02:16:58] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:6826:a7a9:1c79:6774) (Ping timeout: 268 seconds)
[02:17:02] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:7c4d:dc6b:e98f:8777) (Ping timeout: 240 seconds)
[02:19:11] *** Quits: sillyboots (~sbooties@207.251.78.34) (Quit: Connection closed)
[02:20:09] <b0nn> Golang is 12+ years old, and *still* people keep trying to write bad error handling that uses the if err != nil{} because they don't like the if err != nil{} paradigm
[02:20:28] *** Joins: rcernin (~rcernin@124.190.139.235)
[02:21:20] <rawtaz> hm i think you wrote the two same code snippets there?
[02:22:14] <b0nn> ...
[02:23:07] <rawtaz> sorry if im dense. i suppose you made a fun joke and i dont get it :P i guess you mean like theyre trying to do it cleaner but thats the clean way there is
[02:23:14] *** Joins: m1m1c (~notd5a@5.151.189.77)
[02:23:52] <b0nn> In all of the examples today they do if err != nil {call to error handler} because the complaint was... they don't like if err != nil {}
[02:24:12] *** Joins: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se)
[02:24:50] *** Joins: livingsilver94 (~livingsil@user/livingsilver94)
[02:25:00] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 268 seconds)
[02:25:37] *** Quits: livingsilver94_ (~livingsil@user/livingsilver94) (Ping timeout: 256 seconds)
[02:25:39] <b0nn> Some people do errorHandler(err) { if err != nil{} }; replacing if err != nil {} in their code with.. errorHandler(err)
[02:26:33] <b0nn> but, ofcourse that latter example cannot end the callers function
[02:27:09] <ikke> errHandler(err error) { if err != nil { panic(err) } }
[02:27:11] <ikke> :P
[02:27:15] <b0nn> JFC
[02:27:18] <m1m1c> xD
[02:27:32] *** Joins: evocatus (~evocatus@213.193.2.105)
[02:27:34] <m1m1c> os.Exit(1)
[02:27:46] <rawtaz> yeah that's what im doing in my application, it works great!
[02:28:28] *** Joins: NCS_One (~NCS_One@st-217-129-75-53.netvisao.pt)
[02:29:25] <m1m1c> Anyone know any good CLI libraries to maybe build an IRC client in Go?
[02:30:20] <m1m1c> I was using pterm but want to have the capability to seperate the input from the output.
[02:30:33] <b0nn> do you want an interactive IRC clientwhere a user writes into the app, or do you want a bot that reacts to commands?
[02:30:45] <m1m1c> user writes into an app
[02:30:48] <m1m1c> like weechat
[02:30:53] <m1m1c> ig?
[02:30:55] <b0nn> irssi*
[02:31:08] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:31:17] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[02:31:17] <m1m1c> yea irssi
[02:31:23] *** Joins: amolith (~amolith@nixnet/founder/amolith)
[02:31:33] <b0nn> you'll want a tui where you can have one goroutine listen to input and one goroutine listen to the irc dserver
[02:31:38] <MrElendig> depends on how low level you want to go
[02:32:02] <m1m1c> a tui. ok. thanks b0nn.
[02:32:22] <ikke> No experience with ithttps://github.com/rivo/tview
[02:33:16] <fizzie> I've got tcell on my get-familiar-with TODO list, but it's on the lower level of options (no widgets).
[02:33:17] <m1m1c> ill look at it either way ikke
[02:33:25] <fizzie> https://github.com/gdamore/tcell to be specific.
[02:33:53] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:35:04] <m1m1c> i think i just found my favorite app
[02:35:08] <m1m1c> https://github.com/browsh-org/browsh
[02:35:21] <m1m1c> terminal browser
[02:35:27] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[02:39:23] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 264 seconds)
[02:40:59] <NCS_One> https://github.com/avelino/awesome-go#command-line
[02:41:01] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[02:41:08] <NCS_One> m1m1c: ^
[02:49:00] <b0nn> https://github.com/aws/aws-sdk-go/blob/main/service/s3/api.go#L22623
[02:49:21] *** Quits: cyrus_mc (~cyrus_mc@45.62.180.58) (Quit: Connection closed)
[02:50:33] <b0nn> the line is type HeadBucketInput struct { _ struct{} `locationName:"HeadBucketRequest" type:"structure"`}
[02:50:46] <b0nn> I've never seen the _ struct{} bit before
[02:53:57] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 256 seconds)
[02:54:43] <b0nn> what's the point of that line?
[02:54:53] <b0nn> https://play.golang.org/p/IXxcQ2tBspT
[02:55:06] <rawtaz> "It is a regrettable historic error that the date uses the American convention of putting the numerical month before the day.". okay, slightly forgiven :3
[02:55:41] <rawtaz> but the funky formatting is still going to the history books :P
[02:56:17] <fizzie> b0nn: I imagine it's just a way of attaching a tag "at top level".
[02:56:28] <b0nn> sorry, I don't understand
[02:56:39] <b0nn> oh, so f has the tag?
[02:56:46] *** Quits: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Quit: Leaving)
[02:57:03] <fizzie> No, the type `Foo` itself has the tag, rather than any of its members.
[02:57:23] <fizzie> (That's what it looks like to me, anyway; haven't seen it done before.)
[02:57:54] <b0nn> sorry, f is an instance of a Foo{}
[02:58:05] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:58:08] <fizzie> Well, sure. But the tags aren't per-instance, it's a property of the type.
[02:58:40] <b0nn> ok, yeah, am still quite lost as to what the advantage is
[02:58:46] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:59:08] <fizzie> How else would you attach a "top-level" tag to the type `Foo`?
[02:59:27] <fizzie> The `struct{}` type has zero size so it won't affect the memory representation of the struct, and the blank identifier is in a sense "nameless" so it won't conflict with any other members of the struct.
[02:59:28] <b0nn> yeah - I have no idea what you mean by that
[03:00:40] <fizzie> Well, you know what tags on struct fields are used for -- metadata for accessing things by reflection. So in your original AWS SDK example, there's the `Bucket *string `location:"uri" ...` member of the struct -- that gives some properties, but those are specific to the `Bucket` field of the `HeadBucketInput` struct.
[03:01:24] <fizzie> As far as I can guess from seeing it the first time,   _ struct{} `...`   is just a way of doing exactly the same, except not associating the tag with any specific field of the struct, but rather the struct as a whole.
[03:02:54] *** Joins: normen (~normen@p200300d71723fa0045f93483045250d4.dip0.t-ipconnect.de)
[03:04:33] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[03:05:06] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:05:56] * b0nn shrugs - nowhere in the repo is that tag directly used
[03:07:22] <b0nn> hrm, it helps if I use the right search term
[03:07:38] *** Quits: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00) (Remote host closed the connection)
[03:07:48] <lazyreader> https://stackoverflow.com/questions/50387103/go-struct-tags-with-underscore-before-function-names
[03:07:50] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (Quit: What's that?)
[03:08:02] *** Quits: normen (~normen@p200300d71723fa0045f93483045250d4.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:08:21] <lazyreader> they're apparently the only real way to attach those metadata fields onto the struct as opposed to a field on the struct
[03:08:28] <lazyreader> so fizzie is right
[03:09:08] <lazyreader> presumably they have some meaning to the aws sdk package, but us mere mortals don't need to know about the detauls
[03:09:39] <fizzie> Using a zero-length array of some type T to *also* use the type of the blank field to carry information, like in that SO answer, is... both clever and horrifying. I think.
[03:11:04] *** Joins: lazyreader6 (~lazyreade@user/lazyreader)
[03:12:09] *** Quits: lazyreader (~lazyreade@user/lazyreader) (Killed (NickServ (GHOST command used by lazyreader6)))
[03:12:10] *** lazyreader6 is now known as lazyreader
[03:13:05] <lazyreader> yeah the idea of using this outside of generated code is pretty disgusting
[03:13:20] <b0nn> mkopriva's answer clears things up for me - the example they're using is that tools like go generate might use it
[03:13:26] <lazyreader> but in the context of a 22k line generated file
[03:13:31] <lazyreader> _maybe_ it's acceptable
[03:13:51] <b0nn> 39490 line file*
[03:14:09] <lazyreader> lol github wouldn't even render it inline for me to check
[03:14:19] <b0nn> Yeah I have it locally
[03:15:20] <b0nn> mkopriva's answer fits really well because the tag is a location and a type
[03:15:25] <lazyreader> you'd think if you're writing this to be consumed by your tooling you could just use structured comments, but 🤷‍♂️
[03:16:51] *** Quits: lazyreader (~lazyreade@user/lazyreader) (Quit: The Lounge - https://thelounge.chat)
[03:17:07] <b0nn> WRT fizzies answer, it's not the /what/ that was the problem, it was the /why/
[03:17:33] *** Joins: lazyreader (~lazyreade@user/lazyreader)
[03:17:59] <fizzie> My guess would've been a runtime use rather than a `go generate`-time use, where tags have an obvious advantage over structured comments.
[03:18:02] *** Quits: lazyreader (~lazyreade@user/lazyreader) (Client Quit)
[03:19:12] *** Joins: lazyreader (~lazyreade@user/lazyreader)
[03:20:52] <b0nn> when you say "structured comments" are you meaning // nolint:revive or //go:noline type comments?
[03:21:04] <fizzie> That sort of thing, yes.
[03:22:02] <b0nn> or something else?
[03:23:25] <b0nn> Ok, I wanted clarification because I link them to #pragma in my mind
[03:23:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[03:24:05] <fizzie> From a bit of grepping, I would imagine code like https://github.com/aws/aws-sdk-go/blob/main/private/protocol/rest/build.go#L136 is looking for those `_ struct{}` tags.
[03:25:14] *** Joins: fikran (~fikran@user/fikran)
[03:26:47] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Ping timeout: 264 seconds)
[03:27:27] *** Joins: mollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk)
[03:28:41] *** Joins: cation21 (cation@user/cation)
[03:29:35] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-f899-ffb2-eda6-47a8.ip6.gigabit.dk) (Remote host closed the connection)
[03:29:35] *** Quits: cation (cation@user/cation) (Quit: Leaving)
[03:29:38] *** Quits: averell (~averell@user/averell) (Quit: .)
[03:29:41] *** Quits: c10l (~c10l@user/c10l) (Quit: Ping timeout (120 seconds))
[03:29:50] *** Joins: c10l (~c10l@user/c10l)
[03:29:54] *** Joins: averell (~averell@user/averell)
[03:31:58] *** cation21 is now known as cation
[03:33:35] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:7c4d:dc6b:e98f:8777)
[03:34:46] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:7c4d:dc6b:e98f:8777) (Client Quit)
[03:40:01] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[03:40:15] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[03:42:39] *** Joins: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00)
[03:43:10] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[03:47:16] *** Quits: evocatus (~evocatus@213.193.2.105) (Quit: Leaving)
[03:48:21] *** Quits: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00) (Ping timeout: 265 seconds)
[03:49:14] <b0nn> On the structured comment/pragma debate
[03:49:15] <b0nn> “Useful” is always true for a feature request. The question is, does the usefulness justify the cost? The cost here is continued proliferation of magic comments, which are becoming too numerous already.
[03:49:19] <b0nn> –Rob Pike
[03:49:37] <b0nn> Although I'm not convinced that this is an improvement
[03:52:34] *** Quits: adip (~adip@dij224.neoplus.adsl.tpnet.pl) (Ping timeout: 260 seconds)
[03:58:03] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.2 - https://znc.in)
[03:58:18] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[03:58:18] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[03:58:18] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[03:59:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[04:01:41] *** Joins: cobber (~protorom@i59F67A6C.versanet.de)
[04:03:03] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Ping timeout: 268 seconds)
[04:05:03] *** Joins: Torr_ (~Torr@user/torr)
[04:06:44] *** Quits: cobber (~protorom@i59F67A6C.versanet.de) (Quit: cobber)
[04:07:56] *** Joins: cobber (~protorom@i59F67A6C.versanet.de)
[04:08:30] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[04:11:25] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[04:12:09] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:12:12] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:38b1:6c00:ef77:bdd5)
[04:13:35] *** Joins: fikran (~fikran@user/fikran)
[04:18:03] *** Quits: NCS_One (~NCS_One@st-217-129-75-53.netvisao.pt) (Quit: Lost terminal)
[04:20:06] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:346b:8ef4:4433:cb30)
[04:22:01] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:22:54] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:346b:8ef4:4433:cb30) (Ping timeout: 260 seconds)
[04:24:30] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:26:28] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[04:39:08] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:43:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[04:43:58] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:44:58] *** Quits: cobber (~protorom@i59F67A6C.versanet.de) (Quit: cobber)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:53:49] *** Joins: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[04:55:40] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:56:47] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 264 seconds)
[05:00:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[05:02:56] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[05:03:31] *** Joins: noord (~noord@user/noord)
[05:13:04] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:14:58] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Read error: Connection reset by peer)
[05:16:15] *** Quits: pztrn (~pztrn@user/pztrn) (Quit: Segmentation fault)
[05:16:34] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[05:17:39] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[05:22:32] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[05:26:50] *** Joins: pztrn (~pztrn@user/pztrn)
[05:27:00] *** Quits: andlabs_ (~andlabs@2a00:79e1:abc:1a12:a802:7d36:ea24:ff86) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:28:39] *** Quits: m1m1c (~notd5a@5.151.189.77) (Quit: WeeChat 3.3)
[05:29:04] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:31:15] *** Joins: shtirlic (~shtirlic@pppoe.95-55-139-91.dynamic.avangarddsl.ru)
[05:33:26] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[05:34:19] *** Quits: shtirlic_ (~shtirlic@pppoe.178-66-69-224.dynamic.avangarddsl.ru) (Ping timeout: 268 seconds)
[05:39:34] <llorllale> Hello. Any idea on the design choice to have significant overlap in functionality b/w database.sql.DB and database.sql.Conn?
[05:40:39] *** Joins: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00)
[05:41:19] *** Joins: normen (~normen@p200300d71723fa0045f93483045250d4.dip0.t-ipconnect.de)
[05:44:34] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:45:17] <fizzie> The former represents an automatically managed pool of the latter, so it's kind of natural they have a big common subset in terms of the interface.
[05:45:23] *** Quits: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00) (Ping timeout: 264 seconds)
[05:50:20] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[05:56:15] *** Joins: andlabs (~andlabs@2604:ca00:17a:95e4:94e:5997:7703:f0ce)
[06:07:26] *** Joins: andlabs_ (~andlabs@209.107.190.194)
[06:07:33] *** Quits: andlabs (~andlabs@2604:ca00:17a:95e4:94e:5997:7703:f0ce) (Ping timeout: 265 seconds)
[06:07:41] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[06:09:08] *** Quits: andlabs_ (~andlabs@209.107.190.194) (Read error: Connection reset by peer)
[06:09:14] *** Joins: andlabs (~andlabs@209.107.190.194)
[06:10:28] *** Xf is now known as Church
[06:11:04] *** Quits: andlabs (~andlabs@209.107.190.194) (Read error: Connection reset by peer)
[06:11:06] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:11:17] *** Joins: andlabs (~andlabs@2604:ca00:17c:1d62:d976:8d9f:2369:3d70)
[06:11:17] *** Joins: kiril (~kiril@85.91.153.163)
[06:14:32] *** Quits: normen (~normen@p200300d71723fa0045f93483045250d4.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:16:52] <llorllale> fizzie: "it's kind of natural" seems like a leap. Am I missing some context?
[06:18:23] *** Quits: andlabs (~andlabs@2604:ca00:17c:1d62:d976:8d9f:2369:3d70) (Ping timeout: 264 seconds)
[06:18:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[06:18:26] <llorllale> For example, Java's `DataSource` is only charged with providing `Connection` objects. Everything else (querying, transactions, etc) is handled by the connections.
[06:18:41] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:18:41] *** Joins: andlabs (~andlabs@2604:ca00:17c:1d62:e53c:5d99:9a22:5073)
[06:20:57] *** Joins: andlabs_ (~andlabs@2604:ca00:17c:1d62:7954:4ee5:bdd9:3b18)
[06:21:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[06:22:57] *** Joins: fikran (~fikran@user/fikran)
[06:23:02] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[06:23:47] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 264 seconds)
[06:24:15] *** Quits: andlabs (~andlabs@2604:ca00:17c:1d62:e53c:5d99:9a22:5073) (Ping timeout: 268 seconds)
[06:31:15] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[06:35:18] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:36:52] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:44:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[06:49:19] <b0nn> llorllale: the comments in the docs seem to imply that a Conn is tuned for systems that can only have a single connection at a time, and DB is tuned for pools of connections
[06:49:23] <b0nn> Conn represents a single database connection rather than a pool of database connections. Prefer running queries from DB unless there is a specific need for a continuous single database connection.
[06:53:38] *** Quits: andlabs_ (~andlabs@2604:ca00:17c:1d62:7954:4ee5:bdd9:3b18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:56:00] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:00:42] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[07:08:33] *** Quits: Torr_ (~Torr@user/torr) (Quit: leaving)
[07:11:11] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4882-920c-9355-aa7d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[07:11:55] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:12:23] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4882-920c-9355-aa7d.res6.spectrum.com)
[07:15:26] *** Quits: kiril (~kiril@85.91.153.163) (Ping timeout: 268 seconds)
[07:16:19] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[07:23:03] *** Joins: andlabs (~andlabs@70.107.171.168)
[07:25:08] *** Joins: normen (~normen@p54b34e0c.dip0.t-ipconnect.de)
[07:25:09] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:29:14] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[07:29:37] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[07:37:46] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:46:26] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[07:48:39] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[07:50:08] <fizzie> llorllale: Yes, but if you want to abstract *away* the detail of there being a pool of connections in the first place, you'd want that interface of actually *doing* things (queries, transactions) on a type that represents the on-demand pool of connections (sql.DB).
[07:50:10] <fizzie> And if you then want to also support a model of a single connection when there's some notion of per-connection state, well, you'd need those same functions also on that single connection.
[07:52:06] <fizzie> It doesn't have to be like that, of course, but that's what I think the rationale was. Sure, you could have sql.DB only provide the Conn() method, but then any piece of code that wants to (say) start a new transaction and doesn't care about the connection used has an extra step in it.
[07:58:31] *** Joins: livingsilver94_ (~livingsil@user/livingsilver94)
[07:58:34] *** Quits: livingsilver94 (~livingsil@user/livingsilver94) (Ping timeout: 260 seconds)
[07:58:36] *** Quits: normen (~normen@p54b34e0c.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[07:58:47] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:03:32] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[08:04:29] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[08:07:52] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:38b1:6c00:ef77:bdd5) (Ping timeout: 268 seconds)
[08:09:27] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:38b1:6c00:ef77:bdd5)
[08:15:28] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:17:55] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[08:25:07] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[08:30:33] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[08:32:18] *** Joins: fikran (~fikran@user/fikran)
[08:36:39] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:41:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[08:47:50] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:49:06] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[08:53:39] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:58:18] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[08:58:49] *** Quits: CrunchyChewie (~CrunchyCh@user/crunchychewie) (Remote host closed the connection)
[08:58:57] *** Quits: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[08:59:08] *** Joins: CrunchyChewie (~CrunchyCh@user/crunchychewie)
[08:59:15] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[09:07:11] *** Joins: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net)
[09:09:54] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:14:02] *** Quits: benji (~benji@user/benji) (Quit: ZNC - https://znc.in)
[09:14:38] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[09:14:55] *** Joins: benji (~benji@user/benji)
[09:16:53] *** Quits: benji (~benji@user/benji) (Client Quit)
[09:17:46] *** Joins: benji (~benji@user/benji)
[09:24:29] *** Joins: jpw (~jpw@user/jpw)
[09:32:29] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:38:11] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[09:43:32] *** Joins: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00)
[09:48:26] *** Quits: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00) (Ping timeout: 265 seconds)
[09:53:23] *** Quits: amigan (dramoray@dtvax.dynatron.me) (Quit: WeeChat 3.3)
[09:54:24] *** Joins: amigan (dramoray@dtvax.dynatron.me)
[10:00:50] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Remote host closed the connection)
[10:01:30] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[10:03:03] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:03:26] *** Joins: normen (~normen@p54b34e0c.dip0.t-ipconnect.de)
[10:08:06] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[10:09:09] *** Quits: normen (~normen@p54b34e0c.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[10:11:29] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[10:15:52] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[10:18:59] *** Joins: kiril (~kiril@85.91.153.163)
[10:22:15] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:27:01] *** Joins: jla (~jordi@64.225.79.195)
[10:27:13] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[10:32:01] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:33:36] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:35:18] *** Joins: CoolerX (~CoolerX@user/coolerx)
[10:38:19] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[10:40:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[10:40:35] *** Joins: CoolerY (~CoolerX@user/coolerx)
[10:41:31] *** Joins: mei (~mei@user/mei)
[10:41:39] *** Joins: fikran (~fikran@user/fikran)
[10:44:29] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 268 seconds)
[10:46:38] *** Quits: CoolerY (~CoolerX@user/coolerx) (Quit: Leaving)
[10:51:31] *** Joins: mrig (~AdiIRC@user/mrig)
[10:51:34] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:58:03] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Ping timeout: 268 seconds)
[11:00:46] *** Joins: noord (~noord@user/noord)
[11:03:21] *** Quits: mollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Remote host closed the connection)
[11:04:16] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-706a-4dfe-7696-a01a.ip6.gigabit.dk)
[11:09:59] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[11:21:59] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:33:17] *** Joins: adip (~adip@dij224.neoplus.adsl.tpnet.pl)
[11:33:45] *** Joins: normen (~normen@p200300d7172e3900d85fa7eb9c8b3e54.dip0.t-ipconnect.de)
[11:38:06] <mikoto-chan> https://dpaste.com/4HRDNPRQE
[11:38:27] <mikoto-chan> is this a safe way to count the frequency of a word in stdin?
[11:38:38] *** Quits: normen (~normen@p200300d7172e3900d85fa7eb9c8b3e54.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[11:38:49] <j416> what do you mean by safe?
[11:41:06] <mikoto-chan> j416: are there any improvements to be made basically
[11:41:15] <mikoto-chan> or maybe this is unsafe
[11:41:20] <j416> that depends on what you want to achieve
[11:41:24] <j416> this will count words.
[11:41:35] <j416> if by words, you mean anything separated by space
[11:42:19] <j416> if this is for analyzing normal text, you might want to clean that up by removing punctuation and such
[11:42:45] <j416> it of course also depends on the language.
[11:44:44] <mikoto-chan> it's just for unpunctuated ASCII text
[11:45:06] <mikoto-chan> I hope this is adequate ...
[11:45:11] <j416> sure
[11:45:15] <j416> I'd also recommend you try it
[11:52:32] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:53:11] <mikoto-chan> I did, but thanks for reminding me to test :)
[11:53:50] <j416> or better yet, yes, write tests for it
[11:55:41] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[11:56:31] <b0nn> https://pkg.go.dev/strings#Count
[11:58:58] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[12:06:52] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:11:30] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[12:13:26] *** Quits: danmurf (uid480399@user/danmurf) (Quit: Connection closed for inactivity)
[12:15:23] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:20:41] *** Joins: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00)
[12:21:16] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:49dd:937c:2516:8e71) (Quit: Leaving)
[12:24:21] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:26:11] *** Quits: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00) (Ping timeout: 264 seconds)
[12:28:21] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[12:29:07] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[12:48:05] <mikoto-chan> b0nn: sure ... like always there's a stdlib function to do it more efficiently lol
[12:48:21] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:48:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[12:49:07] <mikoto-chan> where can I find all the stuff that has been added on top of C's formatting rules in Go?
[12:49:46] <mikoto-chan> i.e. fmt.Printf("%d[0], %d[0], %b[0]", i)
[12:51:00] *** Joins: fikran (~fikran@user/fikran)
[12:51:05] <demsh> https://pkg.go.dev/fmt#hdr-Printing
[12:52:09] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[12:53:25] <b0nn> mikoto-chan: also, sometimes looking at the source of the standard library, and understanding it, can guide you to more efficient ways to complete the task(s) you are working on
[12:53:34] <b0nn> Especially string handling in Go
[13:00:07] <mikoto-chan> demsh: thanks ^_^
[13:02:08] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:03:56] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[13:07:05] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[13:07:15] *** Joins: normen (~normen@p54b34e0c.dip0.t-ipconnect.de)
[13:07:25] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 250 seconds)
[13:12:45] *** Quits: normen (~normen@p54b34e0c.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[13:14:35] *** Joins: danmurf (uid480399@user/danmurf)
[13:20:56] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:25:38] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[13:37:35] <j416> mikoto-chan: ah, just one word; thought you were making a frequency map
[13:38:08] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:38:46] *** Quits: livingsilver94_ (~livingsil@user/livingsilver94) (Ping timeout: 260 seconds)
[13:40:53] *** Joins: livingsilver94 (~livingsil@user/livingsilver94)
[13:42:00] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[13:42:00] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[13:42:00] *** Joins: resamvi (~resamvi@user/resamvi)
[13:43:29] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:52:09] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[13:55:49] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[13:55:55] *** Joins: normen (~normen@p200300d7172e3900d85fa7eb9c8b3e54.dip0.t-ipconnect.de)
[14:00:41] *** Joins: NCS_One (~NCS_One@st-217-129-75-53.netvisao.pt)
[14:00:53] *** Joins: aniruddha (uid340443@ilkley.irccloud.com)
[14:04:19] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:08:57] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[14:16:06] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[14:23:47] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[14:25:14] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (Ping timeout: 244 seconds)
[14:31:10] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[14:32:24] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[14:37:43] *** Joins: seanrainbowhead (seanrainbo@170.2.194.203.dial.dynamic.acc06-kent-syd.comindico.com.au)
[14:37:56] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:39:01] *** Quits: seanrainbowhead (seanrainbo@170.2.194.203.dial.dynamic.acc06-kent-syd.comindico.com.au) (Client Quit)
[14:39:27] *** Joins: neurocyte0132889 (~neurocyte@94.46.77.154)
[14:39:27] *** Quits: neurocyte0132889 (~neurocyte@94.46.77.154) (Changing host)
[14:39:27] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:40:42] *** Joins: goldfish (~goldfish@user/goldfish)
[14:45:31] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[14:45:31] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[14:45:31] *** Joins: resamvi (~resamvi@user/resamvi)
[14:50:10] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[14:56:47] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[14:58:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[14:59:11] *** Quits: normen (~normen@p200300d7172e3900d85fa7eb9c8b3e54.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[15:00:21] *** Joins: fikran (~fikran@user/fikran)
[15:03:53] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[15:03:53] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[15:03:53] *** Joins: resamvi (~resamvi@user/resamvi)
[15:09:07] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:09:18] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[15:14:11] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[15:22:59] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[15:22:59] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[15:22:59] *** Joins: resamvi (~resamvi@user/resamvi)
[15:27:52] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:31:23] *** Joins: jpw (~jpw@user/jpw)
[15:32:02] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[15:32:28] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[15:35:41] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[15:44:23] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:45:27] *** Joins: normen (~normen@p200300d7172e3900d85fa7eb9c8b3e54.dip0.t-ipconnect.de)
[15:50:55] *** Quits: NCS_One (~NCS_One@st-217-129-75-53.netvisao.pt) (Quit: Lost terminal)
[15:53:12] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[15:54:56] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[15:56:13] *** Joins: Techcable (~Techcable@168.235.93.147)
[15:58:49] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[15:58:54] *** Quits: goldfish (~goldfish@user/goldfish) (Read error: Connection reset by peer)
[15:59:06] *** Joins: goldfish (~goldfish@user/goldfish)
[16:03:18] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[16:04:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:08:44] *** Joins: Everything (~Everythin@37.115.210.35)
[16:14:40] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:16:07] <mickey8> any reason why go get -u doesn't actually update the dependency after a force-push to the dep?
[16:16:29] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[16:16:39] *** Joins: amk (~amk@109.255.169.126)
[16:19:14] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[16:19:14] *** Quits: normen (~normen@p200300d7172e3900d85fa7eb9c8b3e54.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:32:34] <sztanpet> mickey8 see the FAQ on https://proxy.golang.org/
[16:34:32] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[16:37:02] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[16:42:19] *** Joins: sagax (~sagax_nb@user/sagax)
[16:47:58] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:50:21] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[16:50:21] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[16:50:21] *** Joins: resamvi (~resamvi@user/resamvi)
[16:51:50] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[16:52:08] <mickey8> i suspected that. thanks.
[16:54:32] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[16:56:21] <rawtaz> do you guys use named return values or prefer not to? ive seen cases where it's stated that $project prefers not to use them and instead return vars/values explicitly
[16:57:15] <rawtaz> s/guys/peeps/
[16:59:42] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[16:59:59] *** Joins: mickey8 (~user@user/mickey)
[17:00:19] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[17:00:19] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[17:00:19] *** Joins: resamvi (~resamvi@user/resamvi)
[17:01:10] <rawtaz> i think it makes sense to use it, makes it easier to see right in the function signature what is returned, but at the same time i had e.g. the case of importing encoding/csv and in my function signature wanting to return  csv string  , and this collided with the package name csv. so then i have to use another name for that return value which kind of sucks
[17:01:50] <rawtaz> whereas if i dont use named return values i can do csv := csv.NewWriter(..) inside the function without Go not liking it, it doesnt collide.
[17:02:47] *** Joins: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00)
[17:03:27] <rawtaz> (FWIW i used "result" as the return value name instead of "csv")
[17:07:02] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[17:07:45] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[17:07:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[17:08:40] *** Quits: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00) (Ping timeout: 268 seconds)
[17:08:54] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[17:09:08] *** Joins: mickey8 (~user@user/mickey)
[17:09:42] *** Joins: fikran (~fikran@user/fikran)
[17:09:44] <rawtaz> unless the author here did something wrong there seems to be some understanding needed of how they work and what effects they have: https://thenotexpert.com/golang-named-return-values/
[17:09:50] <fizzie> I tend to not use them, but not for any specific reason. Even when I do use named result parameters, I don't do a "naked" return statement.
[17:11:50] *** Quits: mickey8 (~user@user/mickey) (Client Quit)
[17:12:03] *** Joins: mickey8 (~user@user/mickey)
[17:15:08] *** Joins: normen (~normen@p200300d7172e3900d85fa7eb9c8b3e54.dip0.t-ipconnect.de)
[17:16:08] <rawtaz> hm doesnt the example under "Enter named return values" in https://thenotexpert.com/golang-named-return-values/ effectively show that when you do have named return values, and you dont do a naked return but instead a return with a value, then that value effectively replaces what the return "variable" had as value and would be returned with if you did a naked return?
[17:17:02] <rawtaz> basically that if you combine named retvals with non-naked returns, you not only override the returned value, you also set the value of the return variable, so to speak (otherwise that example would print QEQ, nil i think)
[17:18:22] *** Quits: mei (~mei@user/mei) (Quit: mei)
[17:19:47] *** Quits: normen (~normen@p200300d7172e3900d85fa7eb9c8b3e54.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[17:19:51] *** Joins: mei (~mei@user/mei)
[17:19:53] <fizzie> Yes, the return statement sets the result parameter(s).
[17:20:21] <fizzie> ("Regardless of how they are declared, all the result values are initialized to the zero values for their type upon entry to the function. A 'return' statement that specifies results sets the result parameters before any deferred functions are executed.")
[17:20:34] <fizzie> Not that I remember any case of inspecting result parameters in a defer.
[17:21:27] <seebs> it's usually done to check for errors or to alter them on a recover.
[17:22:08] <seebs> fwiw: i use named return values, but i don't use naked returns
[17:24:44] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:25:02] <rawtaz> fizzie: what you wrote clarifies it entirely, thank you
[17:25:03] <fizzie> The linked example is a little odd, in that it apparently wants to return nil but still set an error for a deferred function. Since the value is apparently not meant to be the result of the function, feels like it shouldn't be a named result parameter at all.
[17:25:29] <rawtaz> seebs: right, so you name them in the signature, set them as you wish in the function, and then name them in the return as well (e.g. return mynamehere)
[17:26:09] <seebs> or return arbitrary literals. the nice thing about not using naked returns is that i don't have to think about whether it's the named return value or some other expression.
[17:28:13] <fizzie> The (mostly orthogonal) thing with some package names being the "obvious" names of variables is a bit annoying.
[17:28:38] <rawtaz> by arbitrary literals, do you mean that you e.g. have some other variable that you might want to return the value of and then you do  return thatothervarname  and this sets the return variable/value (e.g. myreturnvar) to that other variables name and thats what's returned? i guess you usually still have some other return statement with the original return variable's name though (why else would you not just name it with that other variables name in the first pl
[17:28:44] <rawtaz> seebs: ^
[17:29:52] <rawtaz> shit, gotta run, bbiaw
[17:29:53] * rawtaz &
[17:32:01] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[17:32:01] <seebs> literals are things like "nil", or "0". but to clarify, no, nothing ever sets a variable to "that other variable's name", but if you have a function returning (err error) and you `return foo`, then this is equivalent to `err = foo; return err`
[17:35:23] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:37:14] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:39:25] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:46:04] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[17:54:47] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:54:59] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[18:07:34] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[18:09:34] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[18:10:15] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:11:55] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[18:11:57] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[18:13:10] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Ping timeout: 260 seconds)
[18:17:47] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 264 seconds)
[18:19:00] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[18:24:43] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[18:29:28] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[18:40:17] *** Joins: CoolerX (~CoolerX@user/coolerx)
[18:41:36] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[18:43:06] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[18:44:41] *** Joins: normen (~normen@p200300d7172e3900d85fa7eb9c8b3e54.dip0.t-ipconnect.de)
[18:45:51] *** Joins: sheldon (~sheldon@user/sheldon)
[18:49:35] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 264 seconds)
[18:50:02] *** Quits: normen (~normen@p200300d7172e3900d85fa7eb9c8b3e54.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:51:03] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[18:54:03] <rawtaz> seebs: gotcha, thanks
[18:56:00] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[18:56:14] *** Joins: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00)
[18:57:52] *** Joins: lauraaah (uid156848@ilkley.irccloud.com)
[18:59:11] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[19:04:21] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[19:06:32] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[19:09:10] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[19:11:46] *** Joins: rusty (~rustyboy@82.77.237.221)
[19:17:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[19:17:37] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Remote host closed the connection)
[19:17:50] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e)
[19:19:04] *** Joins: fikran (~fikran@user/fikran)
[19:20:33] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[19:24:29] *** Joins: livingsilver94_ (~livingsil@user/livingsilver94)
[19:24:30] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[19:24:58] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[19:26:11] *** Quits: livingsilver94 (~livingsil@user/livingsilver94) (Ping timeout: 268 seconds)
[19:35:47] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 264 seconds)
[19:36:10] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[19:37:22] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[19:37:23] *** Joins: pepee (~pepee@user/pepee)
[19:38:50] *** Quits: binkers (~binkers@user/binkers) (Quit: ZNC - https://znc.in)
[19:40:53] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[19:46:01] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[19:48:44] *** Quits: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00) (Ping timeout: 265 seconds)
[19:54:19] *** Quits: rockyh (~rockyh@user/rockyh) (Ping timeout: 250 seconds)
[19:55:11] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[19:58:37] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[19:58:38] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[19:58:38] *** Joins: resamvi (~resamvi@user/resamvi)
[19:59:21] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[19:59:43] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[20:00:39] *** Joins: unixchad1234 (~unixchad@115.98.203.126)
[20:04:43] *** Quits: unixchad1234 (~unixchad@115.98.203.126) (Quit: leaving)
[20:05:02] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 268 seconds)
[20:09:05] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[20:11:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[20:13:24] *** Joins: fikran (~fikran@user/fikran)
[20:13:40] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[20:23:27] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1002.inf6.spectrum.com)
[20:26:25] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[20:27:52] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1002.inf6.spectrum.com) (Ping timeout: 268 seconds)
[20:28:16] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:28:55] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[20:29:05] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:30:43] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[20:33:32] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[20:33:33] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[20:33:33] *** Joins: resamvi (~resamvi@user/resamvi)
[20:38:33] *** Joins: unix_chad (~quassel@115.98.203.126)
[20:39:10] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[20:44:39] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[20:45:09] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:51:32] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[20:51:33] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[20:51:33] *** Joins: resamvi (~resamvi@user/resamvi)
[20:52:18] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[20:53:08] *** Quits: X-Scale (~ARM@83.223.248.137) (Ping timeout: 268 seconds)
[20:54:14] *** X-Scale` is now known as X-Scale
[21:01:31] *** Joins: Torr_ (~Torr@user/torr)
[21:02:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[21:04:14] *** Joins: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de)
[21:04:14] *** Quits: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de) (Changing host)
[21:04:14] *** Joins: tane (~tane@user/tane)
[21:04:38] *** Quits: goldfish (~goldfish@user/goldfish) (Quit: Leaving)
[21:12:24] *** Quits: unix_chad (~quassel@115.98.203.126) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:14:42] *** Joins: unix_chad (~quassel@115.98.203.126)
[21:14:45] *** Joins: rockyh (~rockyh@user/rockyh)
[21:14:46] *** Joins: mkkk (~mkkk@89-76-247-208.dynamic.chello.pl)
[21:16:06] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[21:16:35] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4882-920c-9355-aa7d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:18:04] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[21:18:40] *** Joins: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00)
[21:18:58] *** Quits: unix_chad (~quassel@115.98.203.126) (Client Quit)
[21:19:34] *** Joins: ansimita (~ansimita@user/ansimita)
[21:20:47] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[21:22:21] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:24:57] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a50a-ad81-e6f5-8749.res6.spectrum.com)
[21:25:47] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[21:28:39] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a50a-ad81-e6f5-8749.res6.spectrum.com) (Remote host closed the connection)
[21:29:11] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 264 seconds)
[21:33:16] *** Joins: mrig (~mrig@user/mrig)
[21:34:37] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:36:44] <dostoyevsky2> I tried replacing "os.Exit(0)" with "runtime.Goexit()" for graceful shutdown... but my program just hangs now instead of exiting..
[21:37:26] <dostoyevsky2> I think it doesn't like the http server goroutines...
[21:37:40] <dostoyevsky2> I guess I have to do os.Exit(0)
[21:41:43] *** Joins: normen (~normen@p200300d7172e3900d85fa7eb9c8b3e54.dip0.t-ipconnect.de)
[21:42:02] *** Quits: zwr (~zwr@2804:d45:b966:fb00:44a0:dd67:7917:26dc) (Ping timeout: 240 seconds)
[21:43:19] *** Joins: zwr (~zwr@2804:d45:b966:fb00:8529:315f:ee39:e54c)
[21:48:17] *** Quits: noonien (~noonien@user/noonien) (Quit: Ping timeout (120 seconds))
[21:48:40] *** Joins: noonien (~noonien@user/noonien)
[21:48:51] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:49:05] *** Joins: mseidl (~flughafen@p5de8e012.dip0.t-ipconnect.de)
[21:49:21] <mseidl> Good evening.
[21:49:54] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[21:50:29] *** Quits: normen (~normen@p200300d7172e3900d85fa7eb9c8b3e54.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[21:50:30] <demsh> why not return from main goroutine?
[21:51:30] <demsh> explicit calling os.Exit() means that defer statements don't run
[21:58:42] <dostoyevsky2> defer os.Exit(1)
[21:58:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:00:51] <demsh> that won't run defer in other goroutines
[22:01:09] <demsh> return in main() will
[22:02:34] *** Joins: normen (~normen@p200300d7172e3900d85fa7eb9c8b3e54.dip0.t-ipconnect.de)
[22:02:59] *** Joins: CoolerX (~CoolerX@user/coolerx)
[22:03:58] *** Quits: aniruddha (uid340443@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:06:26] *** Quits: rusty (~rustyboy@82.77.237.221) (Ping timeout: 260 seconds)
[22:08:15] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[22:09:50] <dostoyevsky2> defer willCallItselfRecursivelyViaDeferNTimesAndThenExit(999999)
[22:10:54] <rogersm> team, is there any way to exit from a goroutine from any call level? an exit, not a return.
[22:11:04] <rogersm> (return only works from the first level)
[22:11:38] *** Quits: ldiamond (~ldiamond@user/ldiamond) (Ping timeout: 260 seconds)
[22:11:57] <rudi_s> rogersm: go doc runtime goexit
[22:12:02] <dostoyevsky2> Goexit terminates the goroutine that calls it. No other goroutine is affected. Goexit runs all deferred calls before terminating the goroutine
[22:13:13] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:13:34] <rudi_s> dostoyevsky2: I'm not sure what exactly you're doing, but closing the server socket and handling all existing connections should permit a graceful shutdown.
[22:13:35] <rogersm> oh... how did I miss it? thx folks
[22:13:43] *** Quits: mkkk (~mkkk@89-76-247-208.dynamic.chello.pl) (Quit: Client closed)
[22:13:56] <rudi_s> dostoyevsky2: goexit is not the proper solution as it won't permit terminating the program cleanly.
[22:14:50] *** fling is now known as ciphersalad
[22:14:55] <dostoyevsky2> rudi_s: I thought Goexit would somehow convince the http server goroutines to exit too if called from the main goroutine
[22:15:12] <rudi_s> dostoyevsky2: No. goexit only causes the current goroutine to exit.
[22:15:16] <dostoyevsky2> but not sure how to close their sockets from the main goroutine
[22:15:25] <demsh> context is for that
[22:15:36] *** ciphersalad is now known as fling
[22:15:46] <rudi_s> dostoyevsky2: The existing connections? I don't think you can (from main). But why would you when you want a graceful shutdown.
[22:15:57] <rudi_s> If you don't care about them dying just call os.exit() and be done with it.
[22:16:36] <rudi_s> demsh: I don't think context will help there. It will only help for further actions spawned by the request handlers.
[22:19:55] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Remote host closed the connection)
[22:21:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[22:21:23] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[22:22:32] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[22:22:45] *** Joins: fikran (~fikran@user/fikran)
[22:25:38] *** Quits: adip (~adip@dij224.neoplus.adsl.tpnet.pl) (Ping timeout: 260 seconds)
[22:25:49] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[22:27:13] *** Joins: adip (~adip@deu201.neoplus.adsl.tpnet.pl)
[22:31:26] *** Joins: zenstoic (uid461840@hampstead.irccloud.com)
[22:32:47] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Ping timeout: 264 seconds)
[22:33:59] *** Quits: internut (~internut@2601:280:4e00:7b70:14f1:68fe:de7:5c00) (Ping timeout: 264 seconds)
[22:35:20] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:38:52] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[22:39:24] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[22:39:58] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1002)
[22:41:31] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[22:46:02] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:46:46] *** Quits: Torr_ (~Torr@user/torr) (Quit: leaving)
[22:48:29] *** Quits: rockyh (~rockyh@user/rockyh) (Ping timeout: 256 seconds)
[22:50:40] *** Joins: coolnickname (~omg@user/coolnickname)
[22:53:21] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[22:55:00] *** Joins: rockyh (~rockyh@user/rockyh)
[22:57:59] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[23:09:25] *** Quits: rockyh (~rockyh@user/rockyh) (Ping timeout: 268 seconds)
[23:09:34] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[23:13:59] *** Quits: CoolerX (~CoolerX@user/coolerx) (Remote host closed the connection)
[23:14:23] *** Joins: CoolerX (~CoolerX@user/coolerx)
[23:16:09] *** Joins: rockyh (~rockyh@user/rockyh)
[23:21:10] <b0nn> Saw this done on twitter, in Python, so decided to see if it was possible in Go https://play.golang.org/p/R9FeL8wLyU_0
[23:25:31] <fizzie> "%c", i might be slightly nicer than "%s", string(rune(i)).
[23:27:57] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[23:30:46] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:31:14] <b0nn> yeah, go vet wouldn't let me string(i)
[23:36:11] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:37:11] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[23:40:11] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[23:40:19] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[23:43:41] *** Joins: dr0n (~nabromov@94.11.23.235)
[23:58:45] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
