[00:01:38] <LordKalma> had to install llvm 14-rc1
[00:01:51] <LordKalma> (to have PackConstructorInitializers: CurrentLine)
[00:03:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:07:11] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[00:08:09] <LordKalma> a span can be constructed from a vector, right?
[00:09:08] <PJBoy> I dedent labels in general
[00:09:23] <PJBoy> goto labels, switch-case labels, private/protected
[00:09:48] <PJBoy> << span(v); vector v{1, 2, 3};
[00:09:49] <geordi> {1, 2, 3}
[00:10:16] <PJBoy> via the range overload
[00:10:41] <PJBoy> hm
[00:10:55] <LordKalma> cool
[00:11:03] <LordKalma> that shouldn't be very overheady
[00:11:42] <PJBoy> { vector v{1, 2, 3}; f(v); } void f(span<int>) { BARK; } // this works
[00:11:43] <geordi> f(span<int>)
[00:11:51] <PJBoy> { vector v{1, 2, 3}; f(v); } void f(span<int, 3>) { BARK; } // but not this
[00:11:51] <geordi> error: could not convert 'v' from 'vector<int>' to 'span<int, 3>'
[00:11:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:12:00] <LordKalma> yeah, seems good
[00:12:01] <PJBoy> { vector v{1, 2, 3}; f(span<int, 3>(v)); } void f(span<int, 3>) { BARK; } // you gotta do this
[00:12:02] <geordi> f(span<int, 3>)
[00:12:21] <LordKalma> I'll just use dynamic_extent
[00:14:14] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[00:15:21] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:16:18] *** Joins: proller (~p@80.240.216.69)
[00:21:55] <LordKalma> https://github.com/ruilvo/aether_sdr/blob/master/aether_dsp/src/fft/fft.cpp#L32  and   https://github.com/ruilvo/aether_sdr/blob/master/aether_dsp/include/aether_dsp/fft.hpp#L14 is the reason I asked
[00:24:13] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[00:26:56] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[00:27:31] *** Inline__ is now known as Inline
[00:31:20] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[00:31:45] *** Joins: proller (~p@2a02:6b8:b081:a412::1:3c)
[00:33:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[00:34:08] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[00:37:56] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[00:38:36] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[00:39:54] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:40:22] <LordKalma> should one also delete move function of a polymorphic class, or just the copy ones?
[00:41:15] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[00:42:42] <LordKalma> https://i.gyazo.com/f9d83c964b0396a60bd7dee3afd0163b.png
[00:42:44] <Alipha> LordKalma: yes, delete move too. you can't polymorphic move, so you'd just cause slicing
[00:42:53] <LordKalma> github co-pilot writes your code for you haha
[00:42:55] <LordKalma> thanks
[00:42:59] <Alipha> create a virtual clone function if you want to move
[00:43:05] <LordKalma> https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c67-a-polymorphic-class-should-suppress-public-copymove
[00:43:15] <LordKalma> I was confused because it says "suppress public copy/move"
[00:43:24] <LordKalma> but the example only deletes copy and says "OK"
[00:43:55] <Alipha> LordKalma: if you delete copy, it deletes move implicitly, unless you then define move yourself
[00:44:31] <LordKalma> ah ok ok, that's why then
[00:44:40] <LordKalma> sorry, I should know this...
[00:46:03] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:47:46] <ville> no it's the kind of shit people shouldn't need to know
[00:48:45] <PJBoy> yeah
[00:49:24] <PJBoy> I don't like deleting those ctors myself though
[00:50:11] <ville> macros!
[00:52:06] <LordKalma> macros! are a Rust feature
[00:52:16] <PJBoy> { B b = D(); } struct B { B() = default; B(derived_from<B> auto d) { static_assert(sizeof(decltype(d)) == 0, "slicer, no slicing"); } }; struct D : B {};
[00:52:17] <geordi> error: static assertion failed: slicer, no slicing
[00:52:19] <PJBoy> that's my style
[00:53:23] <ville> cramming all code in single line?
[00:53:48] <PJBoy> hey man, wandbox is dead >:(
[00:54:28] <kalven> probably taken out by godbolt
[00:54:45] <PJBoy> anyways the problem with deleting the base class copy ctor is your derived classes don't get to be copyable either
[00:55:00] <LordKalma> hahah poor Matt, he himself admits to barely being able to keep godbolt.org up
[00:55:10] <PJBoy> if you want to prevent slicing, I think directly preventing it makes more sense
[00:55:12] <LordKalma> apparently people did found some exploits on it couple times already
[00:56:00] <PJBoy> if C++ was better, I'd be able to write `static_error("slicer, no slicing")` instead of that static_assert dependent false stuff
[00:58:15] *** Quits: climax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[01:01:12] <ville> we'de have a knob that had three positions: copymove, moveonly, nocopymove
[01:01:44] <ville> right now to express that takes far too many characters
[01:04:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:06:01] <Alipha> struct B : copymove {};  // then define copymove appropriately ;-)
[01:06:07] <ville> and then what we have now is sort of poor in other aspects. you can't really express that a type is copymove, for example, by = default. you can just express that it possibly is
[01:06:49] <ville> so then you end up writing boilerplate and business as usual
[01:06:58] <PJBoy> you can static_assert that your class is moveable and copyable if you want
[01:07:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:07:59] <ville> yes that's possible, but again somewhat subpar mechanism if you wanted to discuss what it should be like
[01:08:29] <PJBoy> yeah
[01:08:51] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[01:09:00] <PJBoy> but like obviously you can't force a class to generate a move ctor unless the T(T&&) = default; works in the first place
[01:09:15] <PJBoy> although getting an error for your troubles would be nice
[01:09:40] <ville> yes. if a programmer says copymove and then some subobject is a moveonly it'd be hard error
[01:09:42] <PJBoy> reflections will solve this :p
[01:10:19] <PJBoy> metaclasses could at least
[01:10:59] <ville> metaclasses bring nothing* to the table over static reflection
[01:12:11] <ville> if you are able to reflect over class' attributes or base classes it's a minor syntactic difference
[01:12:26] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:12:53] <PJBoy> I still haven't summoned the will to look at the reflections proposal
[01:13:07] <ville> *) of course it's possible to come up with impotent static reflection model that isn't able to do it
[01:13:28] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 272 seconds)
[01:13:34] <PJBoy> of course
[01:13:55] <PJBoy> the committee would never allow that though
[01:14:52] <ville> i wouldn't put it past them
[01:15:30] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:15:36] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:15:44] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[01:15:53] <ville> one of the 4 compiler vendors has difficulty implementing an aspect and the scuttle the feature
[01:16:00] <ville> err they
[01:16:22] <ville> and we're left with static reflection lite
[01:16:30] <PJBoy> who's the fourth after MSVC/gcc/clang?
[01:16:40] <ville> i guess you still have to count intel?
[01:16:50] <PJBoy> they're just clang+
[01:17:25] <PJBoy> but yeah ok
[01:20:08] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:29:16] *** Joins: joilerv (~joilerv@145.224.65.2)
[01:29:44] *** Quits: robod34 (Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:30:19] *** Quits: jsbach (~jsbach@2a01:c22:a4c6:8f00:c69b:57a:cda0:a5e0) (Ping timeout: 256 seconds)
[01:37:35] *** Joins: Guest9678 (~Guest@181.91.159.186)
[01:40:32] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (Ping timeout: 268 seconds)
[01:40:56] <LordKalma> new vresion of Rust today
[01:40:56] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[01:41:45] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[01:42:03] <Friithian> !rust
[01:42:05] <nolyc> Rust is composed of iron oxides. In colloquial usage, the term is applied to red oxides, formed by the reaction of iron and oxygen in the presence of water or air moisture.
[01:42:32] <LordKalma> yes yes, I've seen that one
[01:42:38] <Guest9678> C++ is rusty
[01:42:41] <Guest9678> :P
[01:42:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:08] *** ChanServ sets mode: +v npaperbot
[01:43:09] <Guest9678> C++ is the best one!
[01:43:19] <Guest9678> long life C++!
[01:43:20] <LordKalma> hahahah C++ is a dumpsterfire of a language
[01:43:29] <kalven> I hear Friithian likes tabs
[01:43:42] <LordKalma> it's just that Rust sometimes just feel like it puts you on training wheels instead of solving problems
[01:43:42] <Friithian> yes, because I same some shread of sanity
[01:43:58] <LordKalma> well, I do have mental problems, so...
[01:44:16] <Guest9678> psychology is a lie
[01:44:29] <Guest9678> since it is atheist
[01:44:38] <kalven> wouldn't the training wheel langage be one of the managed ones?
[01:44:42] <ville> has rust succesfully dropped a feature yet?
[01:44:55] <Guest9678> neurological issues is other thing, but are rare (or should be rare)
[01:44:56] <LordKalma> ville, the changelog is mostly about "stabilization"
[01:45:15] <ville> don't meant this particular version specifically. in general
[01:46:13] <ville> i suppose they did make promisses that version 1.x would be backwards compatible so guess they can't. module some bug fixes
[01:46:17] <LordKalma> isn't the borrow checker a feature?
[01:46:18] <ville> modulo
[01:46:32] <ville> sure
[01:46:37] *** Quits: joilerv (~joilerv@145.224.65.2) (Quit: Textual IRC Client: www.textualapp.com)
[01:46:39] <kalven> I guess ville is asking if they have removed a feature
[01:46:51] <LordKalma> ah dropped as in remove
[01:46:56] <ville> indeed
[01:47:02] <LordKalma> ambiguous term
[01:47:11] <Shell> they indeed cannot drop features.
[01:47:29] <LordKalma> what do you reckon is bloat in their language?
[01:48:14] <ville> LordKalma: oh nothing specifically, just wondering about if they had what the fallout was
[01:48:44] <LordKalma> they have a more limited scope of users, that sure are on board with beeing on the bleeding edge
[01:48:50] <LordKalma> but still, I don't think they would date
[01:49:01] *** Quits: proller (~p@2a02:6b8:b081:a412::1:3c) (Ping timeout: 240 seconds)
[01:49:07] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:49:15] <LordKalma> they'll find themselves in the same position as everybody else, and discover that it's not everybody else that's doing it wrong, it's just how it is
[01:49:15] <ville> not sure if you could design a language and part of its ecosystem where that was somehow "helped" by the system
[01:49:36] <LordKalma> (in terms of having to endure bad decisions, that is)
[01:49:58] <LordKalma> you can do a python3 but case studies show 10 years of adoption lag
[01:50:05] <LordKalma> plus, Red Hat is still supporting py2
[01:50:26] *** Quits: nshire_ (~nshire@47.146.41.156) (Read error: Connection reset by peer)
[01:50:45] *** Joins: nshire_ (~nshire@47.146.41.156)
[01:50:45] <LordKalma> ville, well, good deprecation periods, documentation, maybe "quick-fixes" on the linters...
[01:51:05] <LordKalma> we all know that a big problem with C++ is the lack of integrated tooling
[01:52:10] <kalven> Rust did a lot of changing/removing before 1.0.0 afaik
[01:52:31] <Guest9678> nothing like classic C/C++
[01:52:51] <Guest9678> how much time running? 60 years and going?
[01:52:57] <LordKalma> assuming Rust uses semver, anything before 1.0 is fair game
[01:53:05] <Guest9678> Java didn't replace it
[01:54:10] <LordKalma> as qwith any new toy, everybody shouts old toy is dead, it never is
[01:54:29] <kalven> cobol4life
[01:54:42] <LordKalma> japanese banks sure love it
[01:55:02] <Guest9678> isn't C/C++ the best language ever?
[01:55:15] <LordKalma>  C/C++ isn't a thing since 15 years
[01:55:16] <LordKalma> but sire
[01:55:17] <Guest9678> talking in general, of course; not case-specific
[01:55:52] <kalven> the "best" language *is* case-specific
[01:56:08] <Guest9678> LordKalma: oh, ask Free/Libre communitites and linux servers all around the world; also, every thing almost is C/C++ based
[01:56:10] <Friithian> like if you case is wanting to hate yourself, use python!
[01:56:49] <Guest9678> I don't want to make a big discussion, but just I support "classics" let's say
[01:57:11] <Guest9678> I support knowledge (aka against attacks to education level)
[01:57:13] <LordKalma> Guest9678, C/C++ is not a thing. C is one, C++ is another
[01:57:40] <kalven> you just want to do fist pumps in the air while shouting "C/C++" ?
[01:58:39] <Guest9678> LordKalma: I explained it before: you program in OOP but you use Structured Paradigm into methods
[01:59:05] <Friithian> but… you either use C or C++
[02:00:23] <Guest9678> (also, Evolution is a lie btw, then not necessarely something new is good)
[02:01:01] <Guest9678> Friithian: yes, as a base
[02:01:36] <Guest9678> I guess electronic professionals use more C
[02:01:44] <Friithian> it depends on usecase
[02:02:32] <kalven> Guest9678: are you the guy who was talking about performance (and smart pointers) the other day?
[02:03:15] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[02:03:17] <Guest9678> I am from South America; it is known that on North America people are more specific on professions; here it is the opposite way: more generalist
[02:03:52] <Guest9678> kalven: yes :)
[02:04:05] <Friithian> aaah
[02:04:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:04:34] <Guest9678> "generalist versus specialist" is also related to the other day; I wanted to say it
[02:05:32] <Guest9678> tho we both also have the problem of short-degrees appearing (bad for education)
[02:07:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:08:07] <Guest9678> ah, Rust, from Mozilla...
[02:08:19] <Guest9678> multiparadigm...
[02:08:38] <Friithian> !rus- wait I can't do that this soon from the last invocation…
[02:08:39] <nolyc> Friithian: Error: "rus-" is not a valid command.
[02:08:48] <Friithian> -.-
[02:12:15] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Quit: Leaving)
[02:13:06] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[02:18:44] *** Quits: kaph (~kaph@net-109-116-117-37.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:22:17] *** Joins: kaph (~kaph@net-109-116-117-37.cust.vodafonedsl.it)
[02:22:52] *** Joins: proller (~p@80.240.216.69)
[02:27:37] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[02:29:44] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[02:34:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[02:38:27] *** Joins: markong (~kvirc@213.146.188.203)
[02:38:43] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[02:40:24] *** Joins: shailangsa (~shailangs@host109-152-9-189.range109-152.btcentralplus.com)
[02:45:59] *** Joins: adder (~adder@user/adder)
[02:46:34] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 272 seconds)
[02:47:37] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[02:50:15] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:53:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[02:54:10] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[02:54:35] *** Joins: proller (~p@2a02:6b8:b081:b589::1:32)
[02:58:58] <LordKalma> rus? more like sus
[03:02:13] *** Quits: kraa2 (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[03:05:02] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:05:19] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:08:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:11:33] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[03:12:00] *** Joins: ferdna (~ferdna@user/ferdna)
[03:13:04] *** Joins: x_kuru (xkuru@user/xkuru)
[03:14:49] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[03:14:51] <kalven> https://www.reddit.com/r/cpp/comments/szg5h8/asking_for_api_design_feedback_on_possible_future/ - "it's way too narrow in scope" - "I'm just one person"..  ok then don't propose something like this
[03:15:27] *** Quits: DSpider (~DSpider@82.79.237.125) (Quit: Leaving)
[03:16:03] *** Joins: Terminus (~null@user/terminus)
[03:16:32] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[03:16:38] <LordKalma> You have been paying attention to that post
[03:16:41] <Friithian> oh shit I think blender's dep build system is building llvm
[03:16:59] <Friithian> stop stop stop my laptop cannot handle this
[03:17:11] <kalven> yeah I know I've posted it before.. I'm just miffed about his responses
[03:17:13] *** Joins: xkuru (~xkuru@user/xkuru)
[03:19:04] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 256 seconds)
[03:19:30] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 272 seconds)
[03:21:38] *** Quits: adder (~adder@user/adder) (Remote host closed the connection)
[03:22:02] *** Joins: adder (~adder@user/adder)
[03:26:08] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[03:27:18] <LordKalma> I haven't read it yet but you convinced me
[03:27:26] <LordKalma> Let's check it ou
[03:29:50] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[03:30:07] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[03:34:41] <LordKalma> so, if I understan correctly
[03:34:57] <LordKalma> this is someone trying to pitch a half-assed idea that's supposed to be standar material?
[03:35:04] <LordKalma> that's not how any of this works
[03:39:54] <kalven> except that the someone is a member of wg14, the author of boost.outcome and llfio
[03:40:03] <kalven> so it's just not any random goofball
[03:40:19] <LordKalma> so should know better
[03:40:37] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:43:24] *** Joins: blackout69 (~blackout6@net-109-117-245-37.cust.vodafonedsl.it)
[03:45:51] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[03:47:48] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::175)
[03:47:48] *** Quits: Inline (~Inline@2a02:908:1252:7a80::175) (Ping timeout: 240 seconds)
[03:49:30] *** Quits: AmR (~AmREiSa@156.199.47.115) (Quit: Konversation terminated!)
[03:49:57] *** Parts: blackout69 (~blackout6@net-109-117-245-37.cust.vodafonedsl.it) ()
[03:56:26] *** Joins: Inline (~Inline@2a02:908:1252:7a80::175)
[03:56:37] *** Quits: Inline__ (~Inline@2a02:908:1252:7a80::175) (Ping timeout: 240 seconds)
[04:05:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:07:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:09:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[04:15:25] *** Quits: proller (~p@2a02:6b8:b081:b589::1:32) (Ping timeout: 240 seconds)
[04:21:20] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[04:24:46] *** Quits: adder (~adder@user/adder) (Read error: Connection reset by peer)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:26:33] *** Joins: adder (~adder@user/adder)
[04:32:05] *** Quits: MatSharrow (~matthew@56.93.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[04:36:56] *** Quits: adder (~adder@user/adder) (Read error: Connection reset by peer)
[04:38:32] *** Joins: adder (~adder@user/adder)
[04:39:57] *** Quits: Tokamak_ (~Tokamak@166.205.152.113) (Ping timeout: 240 seconds)
[04:44:08] *** Joins: Tokamak (~Tokamak@166.205.152.113)
[04:50:51] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[04:58:08] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[05:06:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:09:34] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:10:25] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[05:19:09] *** Quits: Guest9678 (~Guest@181.91.159.186) (Remote host closed the connection)
[05:31:24] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:40:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:42:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:09] *** ChanServ sets mode: +v npaperbot
[05:43:55] *** Joins: kraa2 (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:44:02] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:46:32] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:54de:a685:89de:8152) (Ping timeout: 250 seconds)
[05:47:15] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:47:46] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:54de:a685:89de:8152)
[05:52:24] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:54de:a685:89de:8152) (Client Quit)
[06:06:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:07:17] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[06:10:30] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[06:12:42] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:6c6d:24f4:33cc:8997)
[06:12:55] *** Guest19 is now known as kulzen
[06:16:13] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc)
[06:16:46] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc) (Client Quit)
[06:19:57] *** Joins: AmR (~AmREiSa@156.199.47.115)
[06:22:21] *** Joins: wolf1nstinct (~wolf@49.144.7.187)
[06:28:23] <hnOsmium0001[m]> why tf would blender want to build LLVM
[06:29:05] <Friithian> it has a dep build script that can get *all* deps needed, and can build them from source
[06:29:34] <Friithian> that reminds me I need to rebuild on my desktop
[06:29:42] <Friithian> hnOsmium0001[m]: you can also build python from source with the script
[06:30:41] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:2ee9:1440:1c10:eea8) (Remote host closed the connection)
[06:31:26] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:129:f65e:b2ed:57e6)
[06:49:50] *** Quits: twice (~twice@173.82.153.50) (Quit: EL PSY CONGROO)
[06:51:49] *** Joins: twice (~twice@173.82.153.50)
[06:58:22] *** Joins: adeliktas5 (~adeliktas@i59F5F3B9.versanet.de)
[07:00:17] *** Quits: adeliktas (~adeliktas@i59F5F56B.versanet.de) (Ping timeout: 240 seconds)
[07:00:17] *** adeliktas5 is now known as adeliktas
[07:00:30] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:05:25] *** Quits: twice (~twice@173.82.153.50) (Quit: EL PSY CONGROO)
[07:07:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:07:39] *** Joins: Azem (~haise01@user/haise01)
[07:10:34] *** Joins: twice (~twice@173.82.153.50)
[07:10:48] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:11:18] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[07:11:19] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 272 seconds)
[07:18:17] *** Quits: AmR (~AmREiSa@156.199.47.115) (Quit: Konversation terminated!)
[07:20:36] *** Quits: oscurochu (~oscurochu@2603-9000-c202-1034-ecbc-c4db-21c9-0a46.inf6.spectrum.com) (Ping timeout: 240 seconds)
[07:25:40] *** Joins: Guest8467 (~Guest@181.91.159.164)
[07:25:45] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[07:36:11] *** Quits: kraa2 (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[07:38:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[07:42:44] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[07:45:34] *** Quits: DrMax (~DrMax@node-1w7jra94757g0eoaka9mjx9t9.ipv6.telus.net) (Remote host closed the connection)
[07:46:37] *** Joins: DrMax (~DrMax@node-1w7jra94757g2cotmdc1n4k8b.ipv6.telus.net)
[07:47:20] *** Quits: wolf1nstinct (~wolf@49.144.7.187) (Quit: Leaving)
[08:04:20] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:07:07] *** Joins: k8yun (~k8yun@user/k8yun)
[08:07:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:11:28] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:29:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[08:41:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:46:06] *** Joins: Guest77 (~Guest77@68.132.78.81)
[08:46:26] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[09:00:38] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:00:56] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[09:04:47] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[09:06:08] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[09:08:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:11:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:23:47] *** Joins: k8yun_ (~k8yun@user/k8yun)
[09:27:00] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 240 seconds)
[09:40:40] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9e12:946e:262d:4e8a:73e2) (Remote host closed the connection)
[09:41:15] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[09:41:23] *** Joins: p-i- (~Ohmu@2403:6200:8978:9e12:54a2:f1ed:cf5c:274a)
[09:41:29] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[09:43:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:07] *** ChanServ sets mode: +v npaperbot
[09:46:35] *** Quits: Guest8467 (~Guest@181.91.159.164) (Remote host closed the connection)
[09:47:14] *** Joins: epony (epony@user/epony)
[09:50:54] *** Joins: jsbach (~jsbach@2a01:c23:6031:8f00:4422:e4b:9491:7835)
[09:53:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:53:49] <ac_slater> hey guys, I have some common math operations I need - like flatten2darray, crossproduct, unitvector, matrixmult. I have a pretty lean codebase so I don't want to bring in a large library. Anyone know a no-frills basic linear alg library?
[09:54:00] <ac_slater> (can also hand roll these)
[09:56:47] <TinoDidriksen> Bringing in a "large" library to keep YOUR code lean is still a win.
[09:56:48] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[09:57:03] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[09:57:15] <ac_slater> Agreed, I'm ok with it, just not OK with like a huge framework. Boost is OK
[09:57:21] <ac_slater> (Eigen is OK)
[09:57:24] <ac_slater> should I just stick with those?
[09:59:28] <TinoDidriksen> If they do what you need, yes.
[10:01:15] <ac_slater> cool thanks!
[10:03:13] <hnOsmium0001[m]> I don't think you can find a strictly linear alegra library that's smaller than Eigen...?
[10:06:54] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:08:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:11:05] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 256 seconds)
[10:11:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:16:09] <ville> ac_slater: linear algebra of how many dimensions?
[10:16:26] <ac_slater> ville: mostly 3
[10:16:34] <ville> ac_slater: just the basic 2-, 3- and 4-component variety?
[10:16:42] <ac_slater> yea
[10:16:50] <ac_slater> I actually found boost::qvm that handles most of it
[10:17:23] <ville> if it's a "game" then just write it your self. you don't need that many operations
[10:19:22] <ville> i'd guess in the end you can get away with 1000-1500 loc worth. just don't go the route of "writing a complete R3 library" rather than "writing just the operations you need"
[10:20:26] *** Joins: DSpider (~DSpider@82.79.237.15)
[10:21:02] <ac_slater> yea good point thanks! It's for general physics but applies to common game opeations. I was wondering if you guys found a header-only small thing like one of the `stb` style libs for basic 3d math. Easy enough to write my own
[10:21:04] <ac_slater> thanks all
[10:22:34] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:23:40] <ville> i just looked up my old software rasterizers codebase and the code for math is 600 loc. the code for the rendering is another 600 loc
[10:23:53] <ac_slater> yea that's nothing
[10:24:31] <ac_slater> I have someone that thinks going into C or C++ to write python extensions is "faster". But then writes code that copys around large vectors or hand-rolls matrix mult. Shouldn't numpy be faster?
[10:24:33] <ac_slater> idk
[10:24:48] <ac_slater> (faster and easier, I mean)
[10:25:06] <ville> sure you can be faster that way. it all depends on what the division of cost is
[10:25:36] <ac_slater> yea good point. Just seems weird that matrix mult can't be as fast as possible with numpy
[10:35:19] <ville> i am not familiar enough with python/numpy but isn't numpy just a package that then does what he is doing now him self?
[10:36:55] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:37:07] <ac_slater> yea. He's one of those types that thinks if it's in C, it's faster. But, doesn't think about the python/C FFI or the general idea of performance
[10:37:23] <ac_slater> I was thinking if I could say "just use boost::qvm", it would be fine
[10:38:37] <ville> faster than?
[10:39:08] <ac_slater> numpy and general doing basic math in python
[10:40:34] <ville> i am sure either it's easy to find examples where a c solution is faster and also examples of c and python+numpy are equal where any overhead of the data shuffling makes no difference
[10:41:22] <ville> seems surprising that you could find an example where a c implementation couldn't reach the speed of python+numpy
[10:42:01] <ac_slater> it's likely so close it doesn't matter as numpy is literally made for this kind of thing
[10:42:27] <ac_slater> either I benchmark it for him and provide proof, of I give him a small mathlib in my C++ code so he can write bindings
[10:42:29] <ac_slater> meh
[10:42:54] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:916:d428:8448:3aea)
[10:47:17] <ville> sort of lost it which side you're trying to prove, but doesn't matter i guess
[10:48:17] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:c47f:a31f:302d:f1aa)
[10:49:03] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:916:d428:8448:3aea) (Ping timeout: 256 seconds)
[10:51:13] <ac_slater> yea sorry man
[10:51:23] <ac_slater> thanks for the help - long day over here
[10:52:03] <ac_slater> the close it out - I can't really prove numpy isn't good enough cause I don't care that much, so I'm providing a small mathlib either via qvm, Eigen, or hand rolling it.
[10:52:07] *** Joins: Simplar (~quassel@188.163.93.241)
[10:52:22] <ac_slater> was curious if you guys had some back pocket suggestion - which you did and it was helpful
[10:53:33] <ville> so it's going to be written in python, and then writing something in numpy, c or c++ to do the math?
[10:54:10] <ville> there's no option where you just don't do python at all?
[10:56:02] <ville> if it's going to be python+something i would expect it matters little. presumably numpy would by now have good implementations of most operations.
[10:56:48] <ac_slater> exactly man, you hit it
[10:56:52] <ac_slater> "doesn't matter"
[10:57:00] <ville> whether it's numpy doing the data shuffling or your code i am not sure where the difference there could come from
[10:57:08] <ac_slater> yea exactly
[10:59:58] <ville> just presuming that numpy would be doing a decent job of the data shuffling and the calculations
[11:00:18] <ville> but as they say: "can't spell presume with out 'ass'"
[11:00:32] *** Quits: ville (~ville@user/ville) (Quit: kernel)
[11:01:13] <ac_slater>  numpy does a superb job of effective store and compute on numerical types like multidimensional arrays and such
[11:01:26] <ac_slater> very silly to move compute out of that library for the hell of it
[11:02:07] *** Joins: ville (~ville@user/ville)
[11:09:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:12:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:13:26] *** Quits: kaph (~kaph@net-109-116-117-37.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[11:23:18] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[11:24:50] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[11:33:16] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:36:39] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:57:41] <ville> it would appear linux kernel might upgrade from c90 to either 99 or 11. exciting times
[12:00:07] *** Quits: kulzen (~Guest19@2601:647:5280:2a50:6c6d:24f4:33cc:8997) (Ping timeout: 256 seconds)
[12:00:32] *** Quits: talisein (~talisein@user/talisein) (Ping timeout: 252 seconds)
[12:02:22] *** Joins: talisein (~talisein@user/talisein)
[12:09:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:13:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:21:25] *** Joins: zmt00 (~zmt00@user/zmt00)
[12:22:45] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:23:42] <malloy> hello, how to make this gtest work https://paste.rs/fTd
[12:24:18] <malloy> case 1 fail, why ?
[12:26:14] <LordKalma> numpy is pretty much loaded with all the *PACK fortran libraries, and heavy costumized C re-writes thereof
[12:26:23] <LordKalma> it's absolutely a well performant library
[12:27:10] <LordKalma> the intricacies of the API mandate some overheas, but other than that, it's fine
[12:27:47] <LordKalma> for example, since numpy.fft.fft() is a free function, and it's a function that chooses the algorithm based on the size, and computes twiddle factors every time, you have to pay that
[12:28:20] <LordKalma> in what I'm writing I'm purposely creating reusable objects to keep that in memory so the execution is hot. A pattern you find on any library, like FFTW
[12:28:33] <LordKalma> fft_create_plan/fft_execute_plan, you know the drill
[12:30:27] * Haohmaru mirrors LordKalma around DC and nyquist
[12:33:49] <LordKalma> I don't alias
[12:33:55] <LordKalma> I'm well filtered
[12:34:28] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[12:35:24] <Haohmaru> that's called "bandlimited"
[12:35:39] * Haohmaru distorts LordKalma
[12:35:42] <Haohmaru> now you're not
[12:36:15] <LordKalma> you used a linear transformation :P same bandwidth
[12:36:47] <Haohmaru> you underestimate my distortion abilities
[12:36:58] <LordKalma> fucking nerd pokemon-like stuff going on
[12:40:16] *** Joins: robod34 (Username@79.113.243.73)
[12:46:16] <very_sneaky> ac_slater: other libraries to look at might be xtensor (tries to emulate the numpy api as closely as possible) or armadillo (tries to emulate the matlab api)
[12:46:42] <very_sneaky> a benefit of xtensor is that it will do operations on custom datatypes (kind of). armadillo you can plug in different backends - lapack etc
[12:51:09] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[12:52:08] *** Joins: proller (~p@2a02:6b8:b081:20::1:2f)
[12:52:09] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Remote host closed the connection)
[12:52:54] *** Joins: MatSharrow (~matthew@56.93.9.51.dyn.plus.net)
[13:03:09] *** Joins: paul424 (~tom@ip-5-172-233-16.multi.internet.cyfrowypolsat.pl)
[13:04:06] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:07:56] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:08:35] *** Joins: plastico (~plastico@neomutt/plastico)
[13:10:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:13:30] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:18:11] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:19:18] *** Joins: arch_angel (~arch-ange@user/arch-angel)
[13:20:15] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[13:21:56] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Ping timeout: 252 seconds)
[13:22:15] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[13:26:32] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc)
[13:28:36] *** Joins: ravan (~ravan@user/ravan)
[13:36:41] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:43:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:08] *** ChanServ sets mode: +v npaperbot
[13:45:24] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:48:34] *** Quits: malloy (~jimery@116.30.220.175) (Quit: WeeChat 3.0)
[13:54:15] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[13:57:12] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:57:42] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[14:02:23] *** Quits: proller (~p@2a02:6b8:b081:20::1:2f) (Ping timeout: 268 seconds)
[14:10:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:14:22] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[14:15:43] *** Joins: markong (~kvirc@213.146.188.203)
[14:22:18] *** Joins: yingmanwumen (~yingmanwu@27.153.164.47)
[14:33:51] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:39:00] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[14:39:30] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[14:41:00] *** Quits: Simplar (~quassel@188.163.93.241) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:41:26] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[14:47:14] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9e12:ddf5:e7cc:8a2a:f65c)
[14:48:34] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[14:48:54] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[14:49:18] *** yingmanwumen is now known as ymwm
[14:50:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:9e12:54a2:f1ed:cf5c:274a) (Ping timeout: 240 seconds)
[14:51:25] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[14:51:44] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[14:52:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:53:22] *** Quits: ymwm (~yingmanwu@27.153.164.47) (Quit: Leaving)
[15:00:50] *** Joins: proller (~p@2a02:6b8:0:40c:e9:5b28:f3a1:df4)
[15:09:23] *** Quits: dld (~davidlowr@98.217.187.57) (Ping timeout: 256 seconds)
[15:11:04] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:14:29] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:18:37] *** Quits: MatSharrow (~matthew@56.93.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[15:21:51] *** Joins: MatSharrow (~matthew@56.93.9.51.dyn.plus.net)
[15:25:38] *** Joins: gargus (~user@27-32-195-30.static.tpgi.com.au)
[15:27:31] *** Joins: oscurochu (~oscurochu@2603-9000-c202-1034-ecbc-c4db-21c9-0a46.inf6.spectrum.com)
[15:29:08] *** Quits: paul424 (~tom@ip-5-172-233-16.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[15:31:58] *** Quits: MatSharrow (~matthew@56.93.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[15:39:21] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:44:29] *** Joins: ymwm (~yingmanwu@27.153.164.47)
[15:44:29] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9e12:ddf5:e7cc:8a2a:f65c) (Remote host closed the connection)
[15:45:11] *** Joins: p-i- (~Ohmu@2403:6200:8978:9e12:41de:2f81:a206:a893)
[15:46:00] *** Quits: gargus (~user@27-32-195-30.static.tpgi.com.au) (Quit: Leaving)
[16:05:50] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:11:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:15:25] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:23:01] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Quit: Leaving)
[16:24:31] *** Joins: yingmanwumen (~yingmanwu@27.153.164.47)
[16:27:24] *** Quits: jsbach (~jsbach@2a01:c23:6031:8f00:4422:e4b:9491:7835) (Ping timeout: 240 seconds)
[16:31:59] *** Joins: yingmanwumen_ (~yingmanwu@110.85.66.170)
[16:32:07] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[16:32:11] *** Joins: yingmanwumen__ (~yingmanwu@110.85.66.170)
[16:32:34] *** Quits: yingmanwumen_ (~yingmanwu@110.85.66.170) (Client Quit)
[16:32:56] *** Quits: yingmanwumen__ (~yingmanwu@110.85.66.170) (Remote host closed the connection)
[16:33:16] *** Joins: yingmanwumen_ (~yingmanwu@110.85.66.170)
[16:34:36] *** Quits: yingmanwumen (~yingmanwu@27.153.164.47) (Ping timeout: 240 seconds)
[16:34:58] *** Quits: ymwm (~yingmanwu@27.153.164.47) (Ping timeout: 272 seconds)
[16:35:08] *** Quits: yingmanwumen_ (~yingmanwu@110.85.66.170) (Max SendQ exceeded)
[16:35:37] *** Joins: yingmanwumen_ (~yingmanwu@110.85.66.170)
[16:39:59] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:42:55] *** yingmanwumen_ is now known as ymwm
[16:49:29] <PJBoy> !fact
[16:49:30] <nolyc> PJBoy: The right operand is sequenced before the left operand.
[16:49:47] <PJBoy> that seems misleading
[16:50:38] <PJBoy> { bark(0) << bark(1); } int bark(int x) { SHOW(x); return x; }
[16:50:38] <geordi> x = 0 x = 1
[16:54:31] <Haohmaru> PJBoy: "The right operand is sequenced, as well as the left operand."
[16:54:33] <Haohmaru> better?
[16:54:47] <PJBoy> that is better, yeah
[16:55:09] <Haohmaru> where do we submit this improvement
[16:55:14] <Haohmaru> ;P~
[16:55:27] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[16:58:30] *** Joins: jkaye (~jkaye@2601:281:8300:7530:7f9b:646a:41fc:cd06)
[17:00:24] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[17:01:04] *** Joins: Deneb^ (~johnch@245.82.159.143.dyn.plus.net)
[17:08:23] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:b5ed:7ad4:d3ea:f759)
[17:08:23] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:b5ed:7ad4:d3ea:f759) (Changing host)
[17:08:23] *** Joins: skapata (~Skapata@user/skapata)
[17:12:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:12:19] *** Quits: proller (~p@2a02:6b8:0:40c:e9:5b28:f3a1:df4) (Ping timeout: 268 seconds)
[17:14:16] *** Joins: pulse (~pulse@user/pulse)
[17:15:24] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:17:55] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Quit: Leaving)
[17:18:03] *** Quits: Deneb^ (~johnch@245.82.159.143.dyn.plus.net) (Quit: Leaving)
[17:19:08] *** Quits: Guest77 (~Guest77@68.132.78.81) (Quit: Client closed)
[17:24:29] *** Joins: proller (~p@2a02:6b8:0:40c:a2ce:a890:6fa3:a008)
[17:28:19] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[17:28:49] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[17:29:04] *** flooded is now known as _flood
[17:36:57] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[17:37:05] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:43:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:05] *** Joins: blackout69 (~blackout6@net-109-117-245-37.cust.vodafonedsl.it)
[17:43:11] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:11] *** ChanServ sets mode: +v npaperbot
[17:43:24] *** Joins: mfc_ (~mfc@user/mfc)
[17:53:15] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 240 seconds)
[17:56:10] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[17:57:42] *** Joins: dld (~davidlowr@2601:197:600:1210:ed7b:e2c7:ff84:e953)
[18:02:15] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 240 seconds)
[18:08:35] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:12:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:14:10] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[18:16:23] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:19:25] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 240 seconds)
[18:22:18] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[18:22:32] *** flooded is now known as _flood
[18:24:10] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:45:18] <ezzieyguywuf> if I have a function that returns const std::string&, is there an easy way to copy that into a std::string? i.e. if `void Foo(std::string x)` and `const std::string& Bar()`, how can I call `Foo(Bar())`
[18:47:56] <ezzieyguywuf> ahhh nvm, turns out it's actually `void Foo(const std::string& x)` so really I don't have a problem
[18:48:39] <rpav> { foo(bar); } const std::string S = "foo"; const std::string& bar() { return S; } void foo(std::string s) { cout << s; }
[18:48:39] <geordi> error: could not convert 'bar' from 'const string& (*)()' {aka 'const string& (*)()'} to 'string' {aka 'string'}
[18:49:07] <rpav> why is my local compiler more permissive
[18:49:14] <rpav> oh
[18:49:18] <rpav> { foo(bar()); } const std::string S = "foo"; const std::string& bar() { return S; } void foo(std::string s) { cout << s; }
[18:49:19] <geordi> foo
[18:49:30] <rpav> it's friday and i'm tired
[18:50:00] <rpav> i read beyond "could not convert" and the (*)() gave it away
[18:50:46] <rpav> ezzieyguywuf: i.e. you don't have a problem either way
[18:50:51] * ezzieyguywuf nods
[18:53:02] *** Parts: blackout69 (~blackout6@net-109-117-245-37.cust.vodafonedsl.it) ()
[18:55:46] *** Joins: oscurochu2 (~oscurochu@94.140.11.72)
[18:56:02] *** Joins: Simplar (~Simplar@188.163.93.241)
[18:58:12] *** Quits: oscurochu (~oscurochu@2603-9000-c202-1034-ecbc-c4db-21c9-0a46.inf6.spectrum.com) (Ping timeout: 240 seconds)
[19:03:04] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[19:04:03] *** Quits: jessicara (~shirogits@user/jessicara) (Remote host closed the connection)
[19:04:12] *** Joins: ibenn (~benn@2a02:8071:45af:1700:85f0:f1d8:6895:8fd3)
[19:07:24] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:129:f65e:b2ed:57e6) (Ping timeout: 240 seconds)
[19:07:37] *** Quits: ymwm (~yingmanwu@110.85.66.170) (Ping timeout: 272 seconds)
[19:10:04] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:642:9c64:5707:9fa)
[19:13:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:13:10] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[19:13:29] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:13:55] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[19:14:09] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[19:16:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[19:20:29] *** Joins: niko3 (~mmk@198-200-74-227.cpe.distributel.net)
[19:24:25] *** Quits: arch_angel (~arch-ange@user/arch-angel) (Ping timeout: 250 seconds)
[19:29:09] <BurumaSerafuku> niko3: you are here too, so MVC is fair game to discuss here
[19:29:14] <BurumaSerafuku> but I assure you: it sucks
[19:32:38] *** Joins: johnjaye (~pi@173.209.64.74)
[19:35:16] <rpav> oh i thought you were talking aobut MFC
[19:37:17] *** Joins: oscurochu_ (~oscurochu@2603:9000:c202:1034:fd35:dd8:8bf7:a17b)
[19:37:36] <niko3> not sure why but I'm looking at web frameworks and wanted to know why I don't see people using C++ for web, is there any reason or is it marketing for other languages drowns out C++
[19:39:29] <imMute> niko3: well it's hard to use C++ on the front end since the only thing supported there is JS (and webassembly).  backend could be C++ but doesn't really have very good backend service libraries - it's just easier in other languages.
[19:39:41] *** Quits: oscurochu2 (~oscurochu@94.140.11.72) (Ping timeout: 256 seconds)
[19:40:18] <johnjaye> wasn't javascript more of a historical accident?
[19:40:40] <imMute> johnjaye: yeah, but it's what's available these days, for better or worse
[19:41:37] <johnjaye> yeah. so if you redesigned the web from scratch it would look very different
[19:41:43] <johnjaye> maybe use go or c++ or scala or who knows what
[19:42:18] <Alipha> niko3: for the Model, i'm not aware of any great ORM libraries for C++. for the View, if we're talking about a web api, then JSON parsing is a pain in C++. if we're talking generating webpages, string manipulation is a pain. ... i guess C++ would be okay at the Controller level. basically, C++ doesn't have great tools for doing MVC
[19:42:33] *** Quits: Cienisty (Cienisty@user/cienisty) (Quit: Error 606 | Demon not found)
[19:42:45] <Alipha> it's just easier to use other languages
[19:43:03] *** Joins: Cienisty (Cienisty@user/cienisty)
[19:43:05] <imMute> Alipha: I found doing JSON in C++ wasn't terribly hard if your APIs are defined using protobuf - it's got a built in serializer that does JSON
[19:43:37] <imMute> the one project I did that was an HTTP backend service in C++ was more of an "API" service, so it didn't have to mess with anything frontend related (that was a separate project)
[19:43:46] <rpav> json isn't a pain to parse in C++ ;/
[19:43:49] <imMute> and IMO API services like that are easier to do in C++
[19:44:39] <johnjaye> Alipha: why is C++ good at the C but  not the M or V?
[19:44:47] <rpav> if you want total validation you may need to use something with schema support, which i don't think vanilla nlohmann/json does, but you also probably don't care
[19:45:01] <rpav> but "function to produce C++ struct to/from json" make dealing with it a cinch
[19:45:25] <Alipha> johnjaye: i explained what c++ lacks for the Model and the View
[19:45:51] <johnjaye> string manipulation seems like it should be pretty basic
[19:45:59] <Alipha> johnjaye: interfacing with a database sucks. interfacing with json/html sucks. the controller is just program logic
[19:46:17] <rpav> but neither of those suck
[19:46:28] <johnjaye> i think he means c++ libraries to do those things suck
[19:46:57] <rpav> dubious, pretty sure i've dealt with pg and mysql C apis, and _those_ weren't bad, so
[19:47:25] <Alipha> perhaps not "sucks", but other languages have better support
[19:47:32] <rpav> these days you mostly have to handwave some json over a websocket or whatever in the direction of your website
[19:48:14] <johnjaye> Alipha: the thing is libraries can always be written. i guess what is really interesting is the language features themselves that make those libraries easy or hard to write and use
[19:48:51] <johnjaye> caveat: i saw a talk where some company apparently reimplemented Xorg linux and simulated a pc in javascript. so maybe it doesn't matter at some level
[19:49:00] <rpav> the main thing is _don't_ use an ORM; they are poor by nature
[19:51:43] <rpav> like, you can easily have things like `class MyFooRequest { ... };` and some `{to,from}_json(MyFooRequest&)`, so you're really mostly dealing with MyFooRequest itself .. have some basically reasonable websocket (or whatever) routing that you don't touch much
[19:52:03] <rpav> should get you a long way with minimal effort
[19:52:45] <imMute> johnjaye: https://bellard.org/jslinux/vm.html?url=alpine-x86-xwin.cfg&mem=256&graphic=1  that?   they're just emulating an x86 processor in JS and running an x86 kernel on it
[19:53:09] <johnjaye> well yeah what else would you do
[19:56:56] <rpav> obviously, a _constexpr_ x86 emulator that can run a c++ compiler .. _or_ js interpreter .. while you're compiling
[19:56:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[19:57:14] <rpav> if you can't run chrome at compile-time to test your service's invariants, are you even doing TDD
[19:59:26] *** Joins: xkuru (~xkuru@user/xkuru)
[20:03:47] *** Joins: ymwm (~yingmanwu@110.85.66.170)
[20:04:18] *** Quits: ymwm (~yingmanwu@110.85.66.170) (Max SendQ exceeded)
[20:04:47] *** Joins: ymwm (~yingmanwu@110.85.66.170)
[20:07:53] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Remote host closed the connection)
[20:13:35] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:16:47] <ville> niko3: i've done quite few web-frontends with wt
[20:17:06] <ville> niko3: https://www.webtoolkit.eu/wt
[20:17:16] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[20:17:42] <ville> niko3: mostly stuff like displaying measurement result graphs, comparing them and such
[20:18:12] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[20:18:28] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[20:18:43] <ville> Alipha: what exactly is the pain of parsing json? parsing json is easy. it's 500loc to roll your own
[20:19:54] <rpav> i think the issue is more json<->meaningful c++ structure
[20:19:55] *** Quits: mfc_ (~mfc@user/mfc) (Ping timeout: 256 seconds)
[20:20:24] <rpav> but, also not hard .. not nice and 100% automatic (though you could build a tool), but not hard
[20:20:48] <ville> that part is just inherent in anything despite what the underlyinng format is. ok if you can just read a binary buffer and claim objects exist there doesn't count
[20:22:57] *** Joins: p-i-_ (~Ohmu@183.89.30.105)
[20:23:13] *** Joins: magla (~gelignite@d5362c15.access.ecotel.net)
[20:26:12] *** Quits: p-i- (~Ohmu@2403:6200:8978:9e12:41de:2f81:a206:a893) (Ping timeout: 240 seconds)
[20:27:57] *** Quits: ymwm (~yingmanwu@110.85.66.170) (Quit: Leaving)
[20:28:35] *** Joins: ymwm (~yingmanwu@110.85.66.170)
[20:32:26] *** Joins: mfc_ (~mfc@user/mfc)
[20:32:52] *** Joins: angelacrust (~angelacru@171.50.165.251)
[20:37:56] *** Joins: rajkosto (~rajkosto@93-86-193-44.dynamic.isp.telekom.rs)
[20:38:36] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[20:49:55] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 240 seconds)
[20:51:47] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[20:51:56] *** Joins: x_kuru (~xkuru@user/xkuru)
[20:55:01] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[20:59:33] *** Quits: angelacrust (~angelacru@171.50.165.251) (Quit: Client closed)
[21:03:47] *** Joins: NiD27 (~nid27@49.205.144.62)
[21:04:08] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:04:08] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[21:07:27] *** Joins: angelacrust (~angelacru@171.50.165.251)
[21:10:21] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[21:10:35] *** Quits: oscurochu_ (~oscurochu@2603:9000:c202:1034:fd35:dd8:8bf7:a17b) (Ping timeout: 250 seconds)
[21:11:41] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:13:36] *** Joins: paul424 (~tom@ip-5-172-232-92.multi.internet.cyfrowypolsat.pl)
[21:14:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:17:27] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:33:19] *** Quits: ymwm (~yingmanwu@110.85.66.170) (Ping timeout: 256 seconds)
[21:35:11] *** Joins: k8yun (~k8yun@user/k8yun)
[21:37:32] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[21:40:36] *** Quits: autark (~autark@ti0048a400-0869.bb.online.no) (Ping timeout: 240 seconds)
[21:42:25] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:43:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:08] *** ChanServ sets mode: +v npaperbot
[21:44:53] *** Quits: proller (~p@2a02:6b8:0:40c:a2ce:a890:6fa3:a008) (Ping timeout: 268 seconds)
[21:45:14] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[21:50:38] *** Quits: angelacrust (~angelacru@171.50.165.251) (Quit: Client closed)
[21:51:26] *** Quits: DrMax__ (~DrMax@132.215.96.30) (Remote host closed the connection)
[21:51:55] *** Joins: DrMax_ (~DrMax@132.215.96.30)
[21:52:36] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:84a:9755:adea:aaf7)
[21:52:36] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:84a:9755:adea:aaf7) (Changing host)
[21:52:36] *** Joins: skapate (~Skapata@user/skapata)
[21:55:06] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[21:55:46] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[21:55:48] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[21:56:43] *** Joins: oscurochu_ (~oscurochu@2603:9000:c202:1034:fd35:dd8:8bf7:a17b)
[21:58:53] *** Joins: TheJ0nix (~TheJ0nix@p549ad5e9.dip0.t-ipconnect.de)
[22:03:17] <TheJ0nix> Hi can someone help me with a small problem? I trying to compile the psol (library for modpagespeed) but i am hanging on /usr/include/sparsehash/type_traits.h - it uses a newer version, but it should be backward compatible. That is what i get: https://pastebin.com/qr6TiL9b - they include this library in a extra header and use it like this: #include
[22:03:18] <TheJ0nix> "google/sparse_hash_map"
[22:03:18] <TheJ0nix> namespace net_instaweb { using google::sparse_hash_map; } - possible that is the problem.
[22:06:12] *** Quits: oscurochu_ (~oscurochu@2603:9000:c202:1034:fd35:dd8:8bf7:a17b) (Ping timeout: 240 seconds)
[22:06:26] *** Joins: Didgy (~np_sk@82.147.37.145)
[22:08:36] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[22:08:51] <BurumaSerafuku> niko3: lol, I also thought it was MFC. MVC is fine in every language, assuming your product and design fits it
[22:09:30] <BurumaSerafuku> you will have to be more verbose and write extra classes, but this decoupling may pay off if you are UI heavy, especially if you provide extra alternatives, like accessibility and such
[22:10:45] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[22:10:50] *** scoobydoob is now known as scoobydoo
[22:13:48] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[22:14:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:15:36] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[22:16:02] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[22:16:45] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:17:38] *** Quits: ibenn (~benn@2a02:8071:45af:1700:85f0:f1d8:6895:8fd3) (Quit: Leaving)
[22:18:02] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[22:18:33] *** Tobbi__ is now known as Tobbi
[22:18:45] *** Quits: NiD27 (~nid27@49.205.144.62) (Quit: Leaving)
[22:18:51] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 250 seconds)
[22:20:26] <PJBoy> TheJ0nix, something tells me that's not the first error
[22:23:27] <Alipha> ville: rpav: yeah, I'm accustomed to java with my day job of automatic serialization/deserialization of classes <-> database/json
[22:24:12] <Alipha> with reflection!
[22:29:03] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[22:31:32] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[22:36:34] <OnlineCop> Given a class containing `struct X { double a; double b; }; vector<X> vals;` I would like to write getters that returns a sum of `vals.a` and `vals.b`. Would I be able to do this with `std::accumulate` or something, or would I need to just `double getA() const { double sum{0.0}; for (auto&& v : vals) { sum += v.a; } return sum; }` each one?
[22:38:07] <xkoncek> c++ is not java
[22:39:06] <rpav> Alipha: yeah that would definitely be nice .. i think the flipside is you could write a clang-based tool that would generate a loader
[22:39:15] <Friithian> xkoncek: what‽
[22:39:18] <Friithian> I thought it was!!
[22:39:28] <rpav> or alternatively generate both c++ and loader from some other spec, but
[22:39:40] <xkoncek> OnlineCop you would probably define an operator+ on that struct and then use assumulate
[22:39:47] <xkoncek> *accumulate
[22:40:43] <OnlineCop> xkoncek: Would an operator+ know whether I wanted `a` or `b`?
[22:41:30] <xkoncek> wait... i thought you wanted to sum a-s into a and b-s into b
[22:42:20] <xkoncek> if you just want a-s, just write a for-loop
[22:42:59] <xkoncek> accumulate is... about as long to write and probably less readable
[22:44:06] *** Joins: proller (~p@80.240.216.69)
[22:44:21] <TheJ0nix> PJBoy: It is the first error - it is the full log.
[22:44:27] <OnlineCop> This struct contains about 30 doubles. I want to sum a's independently of b's, etc.
[22:44:55] <Alipha> OnlineCop: imo, the std::accumulate solution is so wordy that just += in a for loop is simpler
[22:45:07] <TheJ0nix> This is the Source Code: https://github.com/apache/incubator-pagespeed-mod
[22:45:24] <OnlineCop> This is refactoring `vector<double> a; vector<double> b; ...; vector<double> z;` with each vector of size 1-3, into a struct containing those doubles.
[22:45:50] <Alipha> OnlineCop: though having 30 different members sounds questionable. Why not an array of 30?
[22:45:57] <OnlineCop> So now I just have a single `vector<X>` to deal with.
[22:47:18] <OnlineCop> Alipha: What do you mean?
[22:48:41] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[22:48:46] <Alipha> OnlineCop: https://wandbox.org/permlink/pXRjQqYHF8URlLcB
[22:50:33] <Alipha> OnlineCop: 30 member variables in a struct is a lot.
[22:50:40] <OnlineCop> A scientist provided me some .R code, which I'm converting into C++. In R, it has `foo=rep(0.0, count); bar=rep(0.0, count)`, etc. A direct translation would give `vector<double> foo(count, 0.0); vector<double> bar(count, 0.0);`
[22:51:21] <OnlineCop> I really don't like the idea of 30+ vectors, each of size 'count', so wanted to create `struct X` to house a single 'foo', 'bar', etc. double.
[22:51:58] <OnlineCop> Summing each of those is easy when `foo` is a vector: `std::accumulate(foo.begin(), foo.end(), 0.0);`
[22:52:15] <ville> OnlineCop: you may be surprised to hear that sometimes the separated vectors is the "right" thing to do. peformance-wise anyways
[22:52:34] <ville> OnlineCop: you may search: structure of arrays vs array of structures
[22:52:39] <OnlineCop> That may be true, but 'count' is likely never going to be > 2.
[22:52:51] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Ping timeout: 250 seconds)
[22:52:55] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[22:53:02] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[22:53:46] <OnlineCop> And it makes it a nightmare to pass `size_t idx` into each parameter that needs to handle calculations on `foo[idx]`.
[22:55:07] <OnlineCop> I totally agree: as far as optimizations go, contiguous memory is the way to go. But we're finding that we need different members of struct X far more often than Nth element of foo[N], bar[N], baz[N], etc.
[22:56:20] <Alipha> geordi: -w { std::vector<X> xs; double sum = std::accumulate(xs.begin(), xs.end(), 0.0, [](double sum, const X &x) { return sum + x.foo; }); } struct X { double foo; };
[22:56:21] <geordi>  
[22:56:30] <Alipha> but i think the for-loop with += is easier on the eyes, heh
[22:57:01] *** Joins: oscurochu_ (~oscurochu@2603:9000:c202:1034:fd35:dd8:8bf7:a17b)
[22:57:42] *** Joins: proller (~p@2a02:6b8:b081:22::1:a)
[22:57:58] <OnlineCop> Would I need one of those for each a, b, c, etc. member?
[22:59:03] <Alipha> OnlineCop: yes. which is why i was suggesting maybe not having separate a, b, c, etc members, but instead, put an array in your struct X
[23:00:00] <rpav> yeah, if you have like a matrix of 16 floats, it's nicer to use array<float,16> than 16 members
[23:00:07] <rpav> for example
[23:00:38] <rpav> probably a struct with 30 members either ought to be an array, or rethought
[23:02:21] <Alipha> https://wandbox.org/permlink/uTgGUVTSsHFXa2OO
[23:02:42] <OnlineCop> Each of the member names correspond to the variable names in R. I'm not sure I want to have some myArray[ALL_COWS_TOO_SICK] to know which variables are which...
[23:03:00] <rpav> Alipha: heh
[23:05:24] <rpav> enum FooMember { ... }; using FooType = std::tuple<...>; std::get<MemberName>(foo);
[23:05:35] <rpav> not only that, you can decompose/iterate/etc
[23:05:48] <OnlineCop> Guess I just need to go with `double getA() const { double sum{0.0}; for (double v : vals) { sum += v.a; } return sum; }` `double getB() const { double sum{0.0}; for (double v : vals) { sum += v.b; } return sum; }` ...
[23:06:20] <rpav> should make a "tuple++" language that recompiles to C++ using nothing but tuple
[23:06:58] <OnlineCop> I wasn't sure whether it were possible to iterate over class members reflection-style, but it doesn't look like it.
[23:07:11] <Alipha> OnlineCop: you're opposed to using enum constants to index the array, like in https://wandbox.org/permlink/uTgGUVTSsHFXa2OO ? (or index a tuple, like in rpav's
[23:07:25] <Alipha> xs.member[A] = 3.0;
[23:07:36] <Alipha> xs[0].member[A] = 3.0; // rather
[23:07:43] <rpav> do member names even make sense .. could really use some context for what OnlineCop's doing
[23:08:49] <kalven> Alipha: you don't have to use an enum to identify the member, your sum_member func could just take a pointer-to-member instead.. sum_member(vec, &X::a)
[23:10:20] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc) (Quit: Quit)
[23:10:39] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:b497:afae:a231:9bd)
[23:10:46] <OnlineCop> `double plant_emergence; double thermal_emergence; double heat_unit_factor; double nitrogen; double carbohydrate;` ... Lots of very different variable names. I'm sure I could enum those all out to work with `xs[0].members[HEAT_UNIT_FACTOR] = 3.0` but I'm not sure that wouldn't just look... messy.
[23:11:34] <rpav> can they be divided into subgroups?
[23:11:36] <OnlineCop> kalven: would a pointer-to-member only point to a single member, or to each 'a' member of object1, object2, object3, etc.?
[23:12:11] <OnlineCop> rpav: What do you mean by a subgroup?
[23:12:23] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[23:12:49] <kalven> OnlineCop: a member pointer (like &X::a) is a pointer to 'a' of any X. To actually get the double, you combine it with a specific X (which you'd get from the vector)
[23:12:55] <kalven> I'm sure Alipha is in the process of writing this up
[23:12:59] <rpav> OnlineCop: it seems like groups of different data all in one place that could be composed of larger things
[23:13:01] <OnlineCop> If I could do something like `double sum_a = sum(vec, &X::a); double sum_b = sum(vec, &X::b);`, etc., that would probably be enough.
[23:13:31] <OnlineCop> rpav: I think I understand. This actually IS a subgroup.
[23:13:32] *** Quits: rajkosto (~rajkosto@93-86-193-44.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[23:13:56] <rpav> but can it be further logically split
[23:14:38] <Alipha> OnlineCop: https://wandbox.org/permlink/YEf6IiwsohhFRS2s
[23:14:44] <rpav> i'm not sure what the goal or thing you're modeling here is entirely, but probably simulation parameters vs inputs etc could be more separate, and you could use a more compositional model
[23:15:01] <Alipha> kalven: :-P
[23:15:03] <kalven> Alipha ++
[23:15:04] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:15:48] <rpav> member pointers seem like worst of both worlds approach
[23:15:59] <OnlineCop> rpav: Modeling crop growth. These are the simulation parameters; inputs are provided to this elsewhere.
[23:16:17] <kalven> if std::ranges::accumulate was a thing, this would have been a oneliner
[23:16:23] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[23:16:29] <OnlineCop> Alipha: I think that's exactly what I'm after. Let me try that!
[23:16:41] <rpav> D:
[23:17:01] * rpav wonders if OnlineCop uses python regularly
[23:17:28] <OnlineCop> rpav: Yes, this is the library, and I have to maintain the C++, Python, and R wrappers for it.
[23:17:30] <Alipha> the issue with the separate members and the pointer to members approach is if you need to manipulate across members... in which case, using a member array would be better. but if there's no need for that, then i guess it's fine
[23:17:40] <rpav> i figured heh
[23:18:14] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:18:32] <Alipha> or i suppose one could create an array of pointer to members, if you need to manipulate across members...
[23:18:59] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:22:56] <OnlineCop> Most of the current (before this refactor) logic tends to be `foo[i] = bar[i] + exp(1.0 - baz[i] * baf[i]) * blargh / conversion` where everything in the same index is being manipulated. By combining it into a struct, it tends to be a lot more localized: `x[i].foo = x[i].bar + exp(1.0 - x[i].baz * x[i].baf) * blargh / conversion`
[23:23:01] <rpav> there's just no nice syntax for SoA type things
[23:23:31] <rpav> actually
[23:24:19] <rpav> hrm
[23:24:46] <rpav> see what you really want there is a FooRow type class that's basically _the index_ and _the table_, but lets you do like `r.foo = r.bar + ...`
[23:25:25] <rpav> but not enough expressiveness to implement, outside of making a row that contains pointers to all the things
[23:25:42] <rpav> or r.foo() which sucks too
[23:25:50] <Alipha> for(auto &&[foo, bar, baz, baf] : liph::zip_range(foos, bars, bazs, bafs)) { foo = bar + exp(1.0 - baz * baf) * blargh / conversion;  // :-)
[23:25:56] <OnlineCop> That's what my r_to_cpp.h helpers do, so we can pretty closely duplicate the R code into the C++ vectors.
[23:26:18] <Alipha> (though then you're throwing my zip_iterator and zip_range overhead into the mix)
[23:26:24] <OnlineCop> I know, I know. c++20 has all the bells & whistles.
[23:26:31] <rpav> c++20 doesn't have nearly enough
[23:27:06] <Alipha> c++20 doesn't have zip_range/zip_iterator. though there's a proposal for c++23
[23:27:16] <Alipha> i was referring to: https://github.com/alipha/cpp/tree/master/zip_iterator
[23:27:22] <rpav> zip is fairly easy to implement and you can find implementations everywhere
[23:27:38] <Alipha> i beg to differ ;-)
[23:28:12] <rpav> bah, you don't need all that for range-based for
[23:28:18] <OnlineCop> You know how much I got chewed out in here when I mentioned that I was overloading `operator SOME_MATH ()` for two std::vectors (so `vecA + vecB` would return a vector with vecA[0]+vecB[0], vecA[1]+vecB[1], ..)? :D
[23:28:50] <rpav> er wait, do you want a generalized iterator-of-iterators?
[23:29:22] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[23:29:25] <OnlineCop> (and yes, I definitely did put all of those utilities into its own namespace like I was told)
[23:29:30] <rpav> i mean ok, that's going to be more complex because implementing iterators sucks, but before you go that far i'd want a solid use-case
[23:30:22] <rpav> the example.cpp doesn't seem to make it
[23:32:12] <PJBoy> zip is apparently hard to make, looking at the changes needed for tuple and pair
[23:32:55] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 256 seconds)
[23:33:01] <PJBoy> which I still don't understand
[23:33:06] <rpav> https://gist.github.com/rpav/899f4599799562cd14a8204392ce8e10
[23:33:45] <rpav> that's an older impl .. i think i updated it slightly because VS if-constexpr is shitty or something, and might have simplified stuff too
[23:34:22] <rpav> that iterates unequal-length iterables, terminating properly on the shortest
[23:34:56] <rpav> https://github.com/ryanhaining/cppitertools/blob/master/zip.hpp .. similar impl at a glance
[23:41:37] <Alipha> PJBoy: `*iter` where iter is a zip_iterator, needs to return a std::tuple<T&...> so that you can do `*iter = std::make_tuple(3, 5);` or whatnot. But then implementing, e.g., std::iter_swap, you end up doing: `auto tmp = *left_iter; *left_iter = *right_iter; *right_iter = *tmp;` But if tmp is a std::tuple<T&...>, then you don't actually end up making a temporary copy of the element. tmp needs to be of
[23:41:39] <Alipha> type std::tuple<T...>
[23:41:42] *** Joins: Terminus (~null@user/terminus)
[23:41:55] *** Quits: niko3 (~mmk@198-200-74-227.cpe.distributel.net) (Quit: Leaving)
[23:43:01] <PJBoy> so implementing swap on tuple makes sense
[23:43:34] <PJBoy> the confusing bit is why const tuples need to be swappable
[23:44:36] <PJBoy> also they still didn't add swap for tuples of references
[23:44:47] <PJBoy> so even more confusing
[23:45:02] <OnlineCop> For const-correctness, would `double X::*member` become `const double X::*member` ?
[23:45:18] <OnlineCop> I'm unfamiliar with the `::*` notation here.
[23:46:30] <PJBoy> you can add const there if you want
[23:47:51] <OnlineCop> Would there be a `const` at the end?
[23:48:23] <PJBoy> { const double X::* member = &X::x; X x; x.*member = 0; } struct X { double x; };
[23:48:23] <geordi> error: assignment of read-only location '*(((const double*)(& x)) + ((sizetype)member))'
[23:48:38] <PJBoy> successfully prevents modification through that pointer to member
[23:49:18] <PJBoy> which is the same const you'd need to put there if X::x actually was a const double
[23:49:48] *** Quits: oscurochu_ (~oscurochu@2603:9000:c202:1034:fd35:dd8:8bf7:a17b) (Ping timeout: 240 seconds)
[23:50:10] <PJBoy> if you wanted to make `member` const, as in non-reassignable, you'd put the const around the end
[23:50:26] <PJBoy> { double X::* const member = &X::x; member = &X::x; } struct X { double x; };
[23:50:26] <geordi> error: assignment of read-only variable 'member'
[23:51:25] <OnlineCop> For a general-use utility within a library, it'll probably be good to have both.
[23:51:50] <PJBoy> alternatively, you could use `std::add_const_t<double> X::*` and `std::add_const_t<double X::*>` for those two kinds of const
[23:51:57] <PJBoy> if you think that makes things clearer
[23:52:18] *** Joins: ibenn (~benn@2a02:8071:45af:1700:85f0:f1d8:6895:8fd3)
[23:54:09] <PJBoy> I was going to suggest an auto alternative, but I don't think there is one
[23:54:43] <PJBoy> `const auto member = &X::x;` gets you the non reassignable const
[23:55:02] <PJBoy> but the pointer-to-const version, I got nothing
[23:55:23] <PJBoy> I tried `auto member = std::as_const(&X::x);`, but that's not allowed
[23:55:55] <Alipha> OnlineCop: here you go. you don't need your SOME_MATH macro ;-) https://wandbox.org/permlink/8baCyYhmokKxM31r
[23:56:15] <PJBoy> banned
[23:56:29] <Alipha> PJBoy: banned?
[23:56:35] <PJBoy> for using wandbox
[23:56:56] <Alipha> PJBoy: just because you use an old, crappy browser....
[23:57:22] <PJBoy> nah, I mean nothing works in my old crappy browser
[23:57:29] <PJBoy> except coliru I guess
[23:57:51] <OnlineCop> I have never seen an `if((... ` used before.
[23:57:52] <PJBoy> I was referencing ville's banning of it
[23:58:48] <PJBoy> { if (((((true))))) cout << "echo echo echo"; }
[23:58:48] <geordi> echo echo echo
[23:58:51] <Alipha> OnlineCop: it's called a fold expression. it's confusing, but nice and convenient once you understand it. and it's c++17: https://en.cppreference.com/w/cpp/language/fold
[23:59:06] <Alipha> ... and i still often don't get fold expressions right on the first try
