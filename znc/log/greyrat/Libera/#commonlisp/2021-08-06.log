[00:00:26] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 258 seconds)
[00:09:55] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[00:14:09] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[00:21:31] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[00:28:30] *** Joins: raeda (~raeda@72.49.219.33)
[00:36:46] *** Joins: cosimone` (~user@93-44-185-31.ip98.fastwebnet.it)
[00:37:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[00:38:23] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 258 seconds)
[00:42:47] *** Quits: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[00:43:31] *** Joins: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu)
[00:44:53] *** Joins: asarch (~asarch@2806:10ae:7:d143:adcb:db79:f72c:94ee)
[00:46:40] *** Quits: victor (sid208353@user/victor) (Ping timeout: 272 seconds)
[00:46:42] *** Quits: splittist (sid17737@id-17737.tinside.irccloud.com) (Ping timeout: 240 seconds)
[00:47:06] *** Quits: hubvu (sid495858@id-495858.tinside.irccloud.com) (Ping timeout: 240 seconds)
[00:47:06] *** Quits: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu) (Read error: Connection reset by peer)
[00:47:32] *** Joins: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu)
[00:47:35] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 258 seconds)
[00:53:19] *** Quits: asarch (~asarch@2806:10ae:7:d143:adcb:db79:f72c:94ee) (Quit: Leaving)
[00:54:25] *** Quits: dnaeon (~dnaeon@user/dnaeon) (Ping timeout: 250 seconds)
[00:54:34] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[00:57:48] *** Joins: makomo_ (~makomo@user/makomo)
[00:59:20] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:01:33] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[01:07:38] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 272 seconds)
[01:16:09] *** Joins: akoana (~ah@user/akoana)
[01:21:17] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[01:21:47] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Client Quit)
[01:22:52] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:23:19] *** Joins: splittist (sid17737@tinside.irccloud.com)
[01:29:07] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:34:07] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[01:35:35] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 250 seconds)
[01:37:19] <etimmons> phoe: https://gitlab.common-lisp.net/asdf/asdf/-/merge_requests/175
[01:38:06] *** Joins: lotuseater (~user@p200300e7871b3f009816696f16ea572e.dip0.t-ipconnect.de)
[01:38:39] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[01:44:29] *** Joins: hubvu (sid495858@tinside.irccloud.com)
[01:44:52] *** Joins: victor (sid208353@tinside.irccloud.com)
[01:48:04] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[01:48:25] <lotuseater> good evening
[01:49:22] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Quit: This computer has gone to sleep)
[01:49:36] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[01:49:49] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Remote host closed the connection)
[01:49:54] *** Quits: santiagopim (~user@90.166.59.133) (Remote host closed the connection)
[01:49:58] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[01:50:26] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Remote host closed the connection)
[01:52:47] *** Joins: santiagopim (~user@90.166.59.133)
[01:56:00] *** Quits: cosimone` (~user@93-44-185-31.ip98.fastwebnet.it) (Remote host closed the connection)
[01:57:21] *** Quits: gaqwas (~john@dynamic-095-115-078-128.95.115.pool.telefonica.de) (Ping timeout: 258 seconds)
[02:09:30] <copec> Now stylewarning, tell me you know the answer and that it was rhetorical https://twitter.com/stylewarning/status/1423353749850845186
[02:21:30] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 258 seconds)
[02:21:45] *** Joins: hafat (~hafat@95.70.167.173)
[02:28:27] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[02:35:07] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[02:36:37] *** Joins: pillton (~user@2405:b000:600:b0::36a)
[02:54:28] *** Joins: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se)
[02:57:49] <tankrim> In the incomplete  (in-package :a) (defun foo () (format t "~&package: ~A" _)) (in-package :b) (defun bar () (format t "~&package: ~A" _) (a:foo))
[02:57:49] <tankrim>  
[02:58:04] <tankrim> How can I make it so that calling BAR while in "B" prints one message with "package: A" and one with "package: B"? All my attempts end with both having either "A" or "B". Sorry if I'm not clear.
[03:00:12] <_death> why would it print "package: A" if *package* is bound to the package named "B"?
[03:01:01] <_death> you could do something like (if (eq *package* (find-package "A")) "B" "A") of course, but it's not clear what you really want to do
[03:01:17] <tankrim> _death: that's kinda my point. This is really about logging, and I would like for logged functions to report their home package in the log message.
[03:01:37] <tankrim> regardless of the package they're used in
[03:01:41] <_death> functions don't have anything to do with packages
[03:01:53] <tankrim> right, symbols
[03:01:58] <Catie> *PACKAGE* has dynamic scope, not lexical scope if I'm not mistaken
[03:02:00] <Bike> (let ((*package* (find-package "KEYWORD"))) (format t "~a" 'foo))
[03:02:23] <Bike> hm... or does that work...
[03:02:32] <_death> maybe you want the package name of the symbol FOO
[03:02:44] <_death> *of the home package of FOO
[03:02:58] <_death> like (package-name (symbol-package 'foo))
[03:03:20] <tankrim> _death: I think that may be what I want
[03:03:48] <tankrim> thank you, I'll experiment some more
[03:07:31] <_death> if you want a fully qualified symbol, Bike's solution should work (except maybe "~S" should be used)
[03:08:58] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 240 seconds)
[03:12:29] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 258 seconds)
[03:15:23] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[03:17:08] *** Quits: frgo (~frgo@p200300deef181d00bd7bf1868c9cad97.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:17:37] *** Joins: frgo (~frgo@p200300deef181d001d95c29ee5038c26.dip0.t-ipconnect.de)
[03:21:40] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[03:24:35] <lisp-newbie> I want to have something like (make-instance 'class-name var and then the list of key value pairs :key value)
[03:24:44] <lisp-newbie> oy
[03:24:48] <lisp-newbie> lost the whole write up
[03:25:28] <lisp-newbie> Hi, if I have an association list, and I want to instantiate an object where I want to check if the key is a slot in the object, and if so, use it as part of the instantiation process. Is there an easy way to do this programatically for any class I may give and any list of key value pairs?
[03:25:28] <lisp-newbie> I want to have something like (make-instance 'class-name var and then the list of key value pairs :key value)
[03:26:42] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 240 seconds)
[03:26:50] <lisp-newbie> that make-instance would be the outcome, it would be some (defun instantiate-from-assoc (class-name assoc-list) (some-magic (make-instance ...)))
[03:27:45] <lisp-newbie> I googled a lot and couldn't find so many ideas. I'm trying with mopp:class-slots but I don't know what to do with the result
[03:28:01] <Xach> lisp-newbie: if you change the spec a little it's feasible.
[03:28:14] <Xach> but maybe that would not be helpful.
[03:28:43] <Xach> if you change it so that "keys name initargs for slots", you can convert the alist to a plist and apply make-instance with allow-other-keys along with the resulting plist.
[03:29:09] <lisp-newbie> I'm basically getting an assoc key value par list from the server, and I want to use it to instantiate my objects, so that I don't have to hand write for every class a mapping
[03:30:15] <lisp-newbie> Xach I have no idea what you just said, it flew over my head a little bit. Is allow-other-keys meaning ignore the extra keys? or instantiate them into the object regardless?
[03:30:17] <Bike> xach is just saying that you could require initargs rather than slot names. like if you had (defclass foo () ((bar :initarg :bar))) your alist could be ((:bar . 7)), rather than ((bar . 7))
[03:30:23] <lisp-newbie> init args are the default values?
[03:30:38] <Bike> in which case you could skip mop entirely and do (apply #'make-instance class :allow-other-keys t (plist-to-alist plist))
[03:31:06] <Bike> initargs are what you specify with :initarg in the slot description
[03:31:17] <lisp-newbie> Bike thanks, understanding now
[03:31:18] <Bike> like you'd make a FOO with (make-instance 'foo :bar 7)
[03:31:29] <lisp-newbie> reading slowly what you write to understand
[03:32:02] *** Quits: rgherdt_ (~rgherdt@ip5f5af1c6.dynamic.kabel-deutschland.de) (Ping timeout: 258 seconds)
[03:32:09] <Xach> you could also have initargs that are plain, not keyword, symbols, if that helps. or convert the keys to keywords. there are many ways to do what you want even before you dig into MOP.
[03:32:35] <Bike> i was gonna start explaining slot-definition-initargs and stuff but this is a much easier path
[03:33:30] <lisp-newbie> thanks, yeah. I could just add a colon to the string and somehow turn it into a symbol?
[03:33:34] <Bike> i meant (alist-to-plist alist). excuse me
[03:33:37] <Bike> you have strings?
[03:33:54] <lisp-newbie> Yeah, ("world" . 26)
[03:34:00] <Bike> in that case you could do (intern string "KEYWORD") [or whatever package you put the initargs in]
[03:34:05] <Bike> and you'd have to upcase them probably
[03:34:07] <lisp-newbie> Sometimes there are embedded objects like ("hello"
[03:34:07] <lisp-newbie>                                                                 ("world" . 26))
[03:34:47] <Bike> shouldn't matter
[03:35:04] <Bike> well, unless you want those inner objects to also get make-instance'd, maybe i'm misunderstanding
[03:35:28] <hayley> lotuseater: The link has a timestamp, but it is 20:13 or so.
[03:35:35] <lisp-newbie> if there's an inner object, I will probably check and want to run the method for that class as well
[03:35:37] <Bike> might also want to keep in mind that make-instance and such can have methods defined on them that can do literally anything, so in general passing unvetted data from the internet may be unsafe
[03:35:37] <lisp-newbie> before\
[03:36:45] <lotuseater> hayley: I'm now back home on the other machine and the tab was still open, thx anyway, I'll start watching in some minutes.
[03:44:01] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:46:01] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Quit: This computer has gone to sleep)
[03:50:03] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 258 seconds)
[03:51:45] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:53:06] *** Quits: random-nick (~random-ni@87.116.181.197) (Ping timeout: 240 seconds)
[03:53:13] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[04:07:30] <mfiano> A Common Lisp book I had never heard of was recommended to me today. It should be part of my collection soon :)
[04:08:12] <sm2n> mfiano, what book?
[04:08:20] <mfiano> Building Problem Solvers
[04:09:10] <sm2n> oh, looks interesting
[04:09:28] <sm2n> do you know how it compares to PAIP in terms of material
[04:09:30] <sm2n> ?
[04:09:36] <mfiano> Nope
[04:10:57] <lotuseater> good tip
[04:11:35] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[04:12:16] <mfiano> Got it because it explains "truth maintenance systems", which is used by propagation networks as described by one of Sussman's students in their dissertation, of which is the origin of the brief overview in Sussman's new book
[04:12:35] <lotuseater> one friend once told me at work they do things with this CLIPS for building expert systems
[04:13:06] <sm2n> I see
[04:13:21] <Xach> mfiano: the student's handle is "axch" and it caused me a little confusion sometimes
[04:13:44] <Xach> like "axch is going to be at the boston lisp meeting this month" and i thought in my hubris it was a typo and meant me
[04:13:54] <mfiano> Xach: Ha, really?
[04:14:16] <mfiano> Alexey Andreyevich Radul is their name
[04:14:23] *** Joins: srhm (~ascii@user/srhm)
[04:16:21] <Xach> axch@mit.edu
[04:16:48] <mfiano> Ah yes, that's the same person
[04:18:43] <Xach> I really enjoyed his presentation back in the day
[04:19:01] <mfiano> Also, I must say I'm not a huge fan of Sussman's new book, but it did get me to further research some of these ideas I wasn't too familiar with.
[04:20:16] <mfiano> I think the book is not very clear in conveying its ideas or describing the code fragments, and it's hard to tell if some function is yet to be described, elided, or a builtin of MIT Scheme, the dialect they chose.
[04:20:33] <mfiano> But I did enjoy it somewhat in that it got me thinking differently
[04:21:14] *** Quits: _dave (~dave_@2600:1700:38a0:3d40::49) (Read error: Connection reset by peer)
[04:23:00] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[04:24:59] <Bike> yeah, there's definitely some code missing. might make more sense if i download it as the appendix mentions i can do
[04:25:09] <Bike> but that's somewhat inconvenient
[04:27:14] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 258 seconds)
[04:28:20] <mfiano> I struggled early on in the "layered data" code that makes use of a BUNDLE macro, and is used in later chapters too, but is not defined anywhere, and could not find it anywhere in MIT Scheme (I was following along with Guile).
[04:28:51] <mfiano> Maybe it's just me missing something obvious though, but there were other points of great confusion too
[04:28:57] <Bike> no, i think you're right
[04:30:32] <lisp-newbie> Bike: about the unsafe practice. How are the methods defined? as data for the slot? is doing |var| enough in terms of setting the data into the object, or is there a better practice? I was planning on using a validation package called sanity-clause for the data itself. Is there such a thing as lisp injection (like sql injection?)
[04:31:39] <Bike> you're presumably not evaluating forms, so it wouldn't really be like sql injection
[04:32:21] <Bike> nothing you've described would let users define methods, i'm just talking about them exploiting methods in your code
[04:45:55] <pillton> mfiano: I haven't been able to find BUNDLE either but I kind of think of it as a poor version of defclass.
[04:46:50] <pillton> I like the layering idea in the book though.
[04:49:21] <mfiano> Yes, I do too. I was kind of hoping to find a paper on the original idea for that, but nope
[04:49:39] *** Quits: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se) (Remote host closed the connection)
[04:55:56] *** Quits: Catie (~user@c-24-17-253-63.hsd1.wa.comcast.net) (Quit: rcirc on GNU Emacs 27.2)
[05:03:39] *** Quits: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a) (Ping timeout: 258 seconds)
[05:05:54] <raeda> If I (defmacro my-macro ...), then what exactly is #'my-macro ? In SBCL, it's different from (macro-function 'my-macro)
[05:06:41] <lotuseater> raeda: this isn't a function
[05:06:59] <lotuseater> but you can call (macro-function 'my-macro)
[05:07:28] *** Joins: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a)
[05:09:31] <raeda> So I should just ignore it? The spec for defmacro doesn't say anything about binding a function value, so I was curious what it was
[05:11:35] <mfiano> clhs functional value
[05:12:16] <mfiano> check out that glossary term
[05:14:48] <mfiano> "It is an error to use function on a function name that does not denote a function in the lexical environment in which the function form appears. Specifically, it is an error to use function on a symbol that denotes a macro or special form. An implementation may choose not to signal this error for performance reasons, but implementations are forbidden from defining the failure to signal an
[05:14:50] <mfiano> error as a useful behavior."
[05:14:56] <mfiano> More relevant
[05:17:53] <mfiano> So there you go, (function my-macro) and thus #'my-macro is illegal for as long as there is not a function in the lexical environment (or a function in the toplevel/global environment)
[05:23:08] <lisp-newbie> Bike "i'm just talking about them exploiting methods in your code" how could they do that? and how can I protect myself from that?
[05:23:38] <raeda> mfiano: thanks, that's nice to know
[05:27:17] <lisp-newbie> If I do (intern string "KEYWORD") with string being some user input, wouldn't that store this variables on the environment and leave myself vulnerable to a stack/heap overflow type problem?
[05:27:33] <mfiano> Bike, pillton: Now that I read more of the original paper, it seems this also employs the "layering" thing too in section 4.1 https://groups.csail.mit.edu/genesis/papers/radul%202009.pdf
[05:27:45] <lisp-newbie> is there a way to check if the symbol exists and not create one if it doesn't, and return nil instead?
[05:28:17] <mfiano> Do you know what interning means?
[05:30:11] <lisp-newbie> mfiano this is what I got: intern v.t. 1. (a string in a package) to look up the string in the package, returning either a symbol with that name which was already accessible in the package or a newly created internal symbol of the package with that name. 2.
[05:30:14] <lisp-newbie> from: http://www.lispworks.com/documentation/lw50/CLHS/Body/26_glo_i.htm#initialization_argument_list
[05:30:26] <lisp-newbie> that's what I based my question on...
[05:30:39] <lisp-newbie> and the describe: Return a symbol in PACKAGE having the specified NAME, creating it
[05:30:39] <lisp-newbie>       if necessary.
[05:30:39] <mfiano> Now read the description of the function INTERN
[05:30:50] <lisp-newbie> yeah, same... Return a symbol in PACKAGE having the specified NAME, creating it
[05:30:50] <lisp-newbie>       if necessary.
[05:31:03] <mfiano> If a symbol whose name is the same as string is already accessible in package, it is returned
[05:31:28] <mfiano> A package is nothing more than a lookup table for symbol objects.
[05:31:36] <mfiano> You can't create the same symbol twice
[05:31:38] *** Joins: dave_ (~dave@2600:1700:38a0:3d40::49)
[05:31:48] <lisp-newbie> I have an alist (("hello" a) ("world" b)) and I want to make each key into :hello and :world so I can use it for instantiating an object
[05:32:39] <lisp-newbie> right, I just want to have a symbol only for the duration of the function... or I want to pass in only those strings that match symbols
[05:33:12] <mfiano> (alexandria:format-symbol :keyword "~:@(~a~)" "hello")
[05:33:17] <lisp-newbie> I have an alist, which I'm turning into a plist, but it fails becase it's not the actual symbol (I think it lacks the colon? )
[05:33:39] <lisp-newbie> thanks, will try that
[05:34:40] <mfiano> Which is basically equivalent to (intern (string-upcase "hello") :keyword)
[05:36:13] <lisp-newbie> what is the :keyword mafiano?
[05:36:17] <lisp-newbie> mfiano
[05:36:18] <lisp-newbie> sorry
[05:36:30] <mfiano> A package designator
[05:36:57] <mfiano> If  you are unfamiliar with symbols and packages, I think you are getting ahead of yourself. That is important to understand first and foremost
[05:36:58] <lisp-newbie> ok, does that mean the name of the package where the symbol is supposed to be?
[05:37:53] <lisp-newbie> I've been using the packages, just I don't know the names of things... and yes, I am way ahead of myself, trying to learn what I can, but I feel there's a big gap between the lisp cookbook and general working knowledge for a project
[05:38:11] <mfiano> The Lisp Cookbook is not a good learning resource
[05:38:18] <lisp-newbie> what do you recommend?
[05:38:21] <mfiano> Start with gigamonkeys.com/book
[05:38:53] <lisp-newbie> I've used it a little bit, I will use it more bl"n
[05:39:20] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[05:39:26] <mfiano> That book is meant to be read linearly, doing all the practical chapters
[05:39:34] <mfiano> that means read it cover to cover
[05:41:23] <lisp-newbie> ah, I was skipping around
[05:41:29] <mfiano> Also, there is the more newbie-oriented #clschool channel if you don't want to be assumed to have the basics down
[05:43:16] *** Quits: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu) (Read error: Connection reset by peer)
[05:43:41] *** Joins: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu)
[05:43:47] <lisp-newbie> mfiano, thanks will ask over there :)
[05:45:25] <mfiano> No prob
[05:47:36] <lisp-newbie> mfiano but no one answers over there haha
[05:48:00] <mfiano> They sure do.
[05:48:09] <mfiano> IRC is asynchronous :)
[05:48:41] <lotuseater> lisp-newbie: it's IRC, so have patience :)
[05:49:10] <lisp-newbie> hahaha got it from the cookbook (map 'list (lambda (it) (* 10 it)) '(1 2 3 4 5))
[06:02:40] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:706d:6457:86cf:4f78) (Remote host closed the connection)
[06:16:10] <lisp-newbie> ok, finally Bike mfiano I have now made progress thanks to your help. This is what I got: (apply #'make-instance 'user :allow-other-keys t (alist-key-symbol (param-user-list))) and then I get this error: Evaluation aborted for #<SB-INT:SIMPLE-PROGRAM-ERROR "~@<keyword argument not a symbol: ~S.~@:>" {1004EEC193}>
[06:16:34] <Bike> what does (alist-key-symbol (param-user-list)) return?
[06:16:47] <lisp-newbie> where do I take it from here?
[06:17:20] <Bike> well, it sounds like alist-key-symbol is not returning what it should be returning
[06:17:33] <Bike> if it was returning a plist you obviously wouldn't be getting this error from make-instance
[06:17:42] <mfiano> see my solution in #clschool
[06:18:23] <mfiano> oh yes, needx to convert it to a plist as discussed earlier today
[06:18:43] <lisp-newbie> ok, will go to #clschool
[06:19:50] *** Parts: lotuseater (~user@p200300e7871b3f009816696f16ea572e.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[06:21:32] <lisp-newbie> here is the pastebin https://pastebin.com/J5ENVHLq
[06:21:54] <lisp-newbie> thanks so much for the help...
[06:23:17] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[06:25:18] <Bike> okay, so what i mean is
[06:25:35] <Bike> i want you to actually evaluate, in the repl or something, (alist-key-symbol whatever) - to see what it would do in a real situation
[06:25:59] <Bike> and then if the result does not look like (:NAME HELLO :ID 137) or the like, there is a problem
[06:29:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:35:16] <lisp-newbie> Bike, it does, here's an output: ((:LIST 1 2 3 4) (:HELLO ("world" 26)) (:ASKDJ 190238) (:ASD 12) (:ID 24)
[06:35:16] <lisp-newbie>  (:NAME "sample - 24, 712 issue 76"))
[06:35:35] <Bike> that does not look like what i said
[06:35:41] <Bike> what you have there is a list of lists
[06:36:08] <lisp-newbie> ohhh, you are right! sorry, one sec
[06:36:09] <Bike> if you did (make-instance 'user '(:list 1 2 3 4) '(:hello ("world" 26))), what would happen?
[06:36:50] <lisp-newbie> just realized I forgot to do this:(alexandria-2:alist-plist
[06:37:48] <lisp-newbie> oh, Bike! Thanks! you fixed it! here it is working! (apply #'make-instance 'user :allow-other-keys t (alexandria-2:alist-plist (alist-key-symbol (param-user-list))))
[06:39:11] <lisp-newbie> Bike for what you wrote I get the same error keyword not an argument, but now you fixed it... didn't realize after all the different problems I forgot to turn the alist into a plist
[06:39:20] <Bike> right
[06:40:01] <lisp-newbie> it's been a long day, writing this has taken me like 3 days for about 6 hours a day, probably should've taken 10 minutes if I knew what I was doing
[06:40:07] <lisp-newbie> but I've learned a lot in the process
[06:41:14] <Bike> that's good
[06:42:13] <lisp-newbie> Bike, how would I go about sanitizing this input? I imagine (dangerous assumption I know) that the sql packages are escaping for sql injections, is there something else I should worry about in this case?
[06:45:13] <Bike> my concern was just that you're exposing a _potentially_ large attack surface. For example if you had a (defmethod initialize-instance ((object user) &key destroy-the-world) (when destroy-the-world ...))
[06:45:34] <Bike> if you're not doing things like that i don't think it is especially dangerous, but it is something to keep in mind
[06:52:40] <jasom> lisp-newbie: FWIW sql libraries usually use parameterized queries rather than escaping; the famous XKCD was wrong about that; sanitizing inputs is not the typical solution.
[06:53:49] <lisp-newbie> jasom so is there anything I need to add on top of the sql library when dealing with input or is that it?
[06:53:57] <lisp-newbie> btw thanks for answering!
[06:54:26] <jasom> lisp-newbie: if you aren't doing something silly like using format to build sql strings then the library should take care of it
[06:54:50] <lisp-newbie> Bike thanks for answering as well
[06:54:52] *** Joins: dsk (~dsk@user/dsk)
[06:54:54] <lisp-newbie> jsom great, thanks
[06:54:55] <Bike> no problem
[06:55:08] <hayley> The teachers at my university happily showed us how to concatenate strings to make queries.
[06:55:18] <lisp-newbie> are these types of questions fair game for here? or are they still too basic?
[06:56:07] <Bike> i don't think we have any strict policy about when #lisp versus #clschool is appropriate, but you might get better answers on #clschool, i don't know
[06:56:10] <jasom> lisp-newbie: pretty much any question about how to use a lisp library is on-topic, even if it ends up not being specifically about lisp
[06:56:42] <lisp-newbie> hahaha ok, great, thanks
[06:56:45] <jasom> as far as I know, the only hazard of here vs #clschool is you may get overly pedantic answers and people will go off on tangents more
[06:57:09] <hayley> I was always reminded of a quote "Bad programming style can kill people." Better yet, they then sent me a government survey. Well, I wasn't reminded of that quote while filling out the survey.
[06:57:21] * hayley is demonstrating how people go off on tangents in #commonlisp.
[06:57:52] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 272 seconds)
[06:59:03] *** Joins: prxq_ (~quassel@x4dbeabef.dyn.telefonica.de)
[06:59:16] <jasom> lisp-newbie: the bigger issue with malicious inputs is what you do with the data after you pull it back out of SQL.  For example if there's a string going in a web page, you need to make sure that it can't inject  arbitrary html.  If you use some sort of html templating language, then that library should take care of that for you though.
[07:01:14] <jasom> hayley: yet another example of how universities are not trade schools...
[07:01:43] <lisp-newbie> hahaha hayley that's good. jasom yeah, I'm using react now, angular took care of it by default, learning react now and I have to look into it... maybe I'm learning too many new things with this project lisp and react
[07:03:01] *** Quits: prxq (~quassel@x4db5115a.dyn.telefonica.de) (Ping timeout: 268 seconds)
[07:03:17] <hayley> jasom: I'm not sure if a trade school would be any better, but I haven't gone to one.
[07:05:40] <hayley> Though another slightly immoderate statement would be that "a modern economic system demands mass production of students who are not educated and have been rendered incapable of thinking."
[07:05:41] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[07:05:59] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:06:28] <hayley> There are enough complaints that Lisp is bad because it doesn't make programmers fungible enough, so I would believe it though.
[07:07:36] *** Quits: hafat (~hafat@95.70.167.173) (Ping timeout: 256 seconds)
[07:10:46] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[07:15:36] <jasom> hayley: I think the point was the classes I took at university were about teaching the theory rather than the practice, and for the theory it really doesn't matter if you are open to sql injection attacks.
[07:23:46] *** Joins: Oladon (~olad@98.43.81.226)
[07:31:54] <beach> Good morning everyone!
[07:34:30] *** Joins: char_ (~Srain@185.247.70.46)
[07:36:58] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 240 seconds)
[07:36:58] *** char_ is now known as char
[07:40:43] *** Joins: char_ (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[07:43:28] *** Quits: char (~Srain@185.247.70.46) (Ping timeout: 272 seconds)
[07:43:28] *** char_ is now known as char
[07:44:54] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 252 seconds)
[07:52:49] <Oladon> Morning beach!
[08:10:34] *** Joins: djuber` (~user@65.79.128.64)
[08:12:31] *** Quits: nirnam (~nirnam@1.47.135.162) (Ping timeout: 250 seconds)
[08:26:39] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Quit: This computer has gone to sleep)
[08:26:54] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[08:27:06] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Remote host closed the connection)
[08:27:15] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[08:27:36] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Remote host closed the connection)
[08:28:23] *** Joins: rain3 (~rain3___@79.115.250.43)
[08:30:20] <hayley> jasom: Right. But I would struggle to call the class theoretical.
[08:32:34] *** Quits: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a) (Ping timeout: 258 seconds)
[08:39:09] *** Joins: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a)
[08:43:49] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:45:41] <kakuhen> if i create a mixin of a funcallable standard object, would i be able to funcall this mixin?
[08:49:06] <pillton> mfiano: Thanks!
[08:57:47] <beach> kakuhen: I don't see why not.
[08:58:03] <beach> kakuhen: There is nothing special about mixins.
[09:01:55] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[09:02:19] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:04:07] <kakuhen> in retrospect my question was kinda dumb, sorry
[09:04:56] *** Joins: retropikzel (~retropikz@2001:999:200:1f35:ae12:3ff:fe96:9d08)
[09:06:06] *** Quits: santiagopim (~user@90.166.59.133) (Remote host closed the connection)
[09:16:30] *** Quits: ^[ (~user@user//x-8473491) (Ping timeout: 272 seconds)
[09:18:15] *** Joins: ^[ (~user@user//x-8473491)
[09:19:06] *** Quits: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a) (Ping timeout: 240 seconds)
[09:25:52] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:26:54] *** Joins: santiagopim (~user@90.166.59.133)
[09:29:52] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 272 seconds)
[09:40:54] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[09:58:54] *** Joins: shka (~herr@109.231.62.239)
[10:14:36] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 256 seconds)
[10:14:50] *** Quits: dave_ (~dave@2600:1700:38a0:3d40::49) (Ping timeout: 272 seconds)
[10:15:50] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 265 seconds)
[10:38:47] *** Parts: akoana (~ah@user/akoana) (Leaving)
[10:44:58] *** Joins: gaqwas (~john@dynamic-095-117-155-081.95.117.pool.telefonica.de)
[10:45:15] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[10:55:26] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:55:53] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[10:56:40] *** Lord_of_Life_ is now known as Lord_of_Life
[10:58:35] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[11:02:54] *** Quits: vats (~vats@103.70.83.249) (Ping timeout: 268 seconds)
[11:05:04] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:05:50] <phoe> etimmons: thanks!
[11:16:41] *** Quits: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com) (Quit: bye)
[11:22:51] *** Joins: nirnam (~nirnam@1.47.135.162)
[11:23:58] *** Quits: victor (sid208353@tinside.irccloud.com) (Changing host)
[11:23:58] *** Joins: victor (sid208353@user/victor)
[11:32:03] *** Quits: gaqwas (~john@dynamic-095-117-155-081.95.117.pool.telefonica.de) (Ping timeout: 252 seconds)
[11:47:41] *** Joins: pve (~pve@37-136-239-129.rev.dnainternet.fi)
[11:49:17] *** Quits: djuber` (~user@65.79.128.64) (Ping timeout: 245 seconds)
[11:54:54] *** Joins: rgherdt_ (~rgherdt@ip5f5af410.dynamic.kabel-deutschland.de)
[11:57:21] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[11:57:36] *** Joins: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a)
[12:03:57] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 252 seconds)
[12:11:23] *** Joins: noa (~noa@81.170.98.107)
[12:16:04] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[12:17:34] *** Quits: noa (~noa@81.170.98.107) (Ping timeout: 256 seconds)
[12:20:52] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[12:29:28] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 256 seconds)
[12:33:32] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[12:35:55] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:43:19] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[12:47:26] <nij-> Good morning :)
[12:47:50] <beach> Hello nij-.
[12:50:21] *** Joins: tfeb (~tfb@88.98.95.237)
[12:50:59] *** Quits: tfeb (~tfb@88.98.95.237) (Read error: Connection reset by peer)
[12:51:05] *** Joins: tfeb_ (~tfb@88.98.95.237)
[12:53:00] *** Quits: tfeb_ (~tfb@88.98.95.237) (Read error: Connection reset by peer)
[12:54:42] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[12:55:34] *** Joins: amb007 (~a_bakic@220.199.204.77.rev.sfr.net)
[12:57:51] *** Quits: amb007 (~a_bakic@220.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[12:58:52] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[12:59:38] *** Joins: vats (~vats@103.70.83.249)
[13:02:13] *** Joins: lisp123 (~lisp123@45.130.83.181)
[13:12:35] <lisp123> mfiano: let me know your review of building problem solvers once done, looks interesting, I will likely get it at some point
[13:28:43] <mfiano> Well do, but it'll probably be a while. I buy/read too many books and got a few ahead of that one, in between actually writing code :)
[13:30:32] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 272 seconds)
[13:30:53] *** Quits: pillton (~user@2405:b000:600:b0::36a) (Quit: ERC (IRC client for Emacs 27.2))
[13:33:29] *** Quits: retropikzel (~retropikz@2001:999:200:1f35:ae12:3ff:fe96:9d08) (Ping timeout: 258 seconds)
[13:51:11] <lisp123> mfiano: I am the same, plus I read the description of the book - that isn't one to finish in a few days :) I've added it to my bookmarks so will purchase once I clear my current backlog
[13:56:02] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[14:01:21] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 250 seconds)
[14:07:48] *** Joins: selwyn (~selwyn@user/selwyn)
[14:08:04] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[14:08:28] *** Joins: selwyn (~selwyn@user/selwyn)
[14:08:45] <jackdaniel> booklog? :)
[14:09:07] <flip214> no, blog
[14:11:41] *** Quits: flip214 (~marek@h081217094109.dyn.cm.kabsi.at) (Changing host)
[14:11:41] *** Joins: flip214 (~marek@user/flip214)
[14:12:19] <nij-> curious what you folks are reading
[14:12:29] <scymtym> booklog too large? organize it into a kanban cupboard!
[14:12:31] <nij-> lisp related @@?
[14:15:22] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[14:16:49] *** Joins: random-nick (~random-ni@87.116.181.197)
[14:17:32] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[14:19:19] <kakuhen> i've been telling myself to go through some algorithms in common lisp book, but i can't get myself to read any textbook that's not a math textbook
[14:23:48] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[14:25:15] <nij-> What do you mean bu a math textbook?
[14:25:59] <nij-> Something like https://www.amazon.com/Real-Complex-Analysis-Higher-Mathematics/dp/0070542341/ ?
[14:26:04] <kakuhen> well i found this textbook https://www.apress.com/gp/book/9781484264270 for lisp
[14:26:21] <kakuhen> but programming textbooks are nothing like mathematics textbooks
[14:26:43] <kakuhen> i'm used to "definition - theorem - proof - exercise" and repeat until the course is over
[14:26:45] <nij-> Name one math textbook in mind :)
[14:26:46] <nij-> oh
[14:26:52] <kakuhen> >one math textbook in mind
[14:26:55] <kakuhen> Sure. Topoi, theory, and triples
[14:27:27] <kakuhen> im asking one of my favorite prof's to host reading course with it fall
[14:27:33] <kakuhen> with it this fall*
[14:27:34] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[14:28:22] <nij-> kakuhen: lets join #lispcafe ?
[14:28:26] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[14:28:27] <kakuhen> sure.
[14:45:16] <lisp123> jackdaniel: 'booklog' - nice one :)
[14:49:37] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net)
[14:54:51] *** Joins: derelict (~derelict@user/derelict)
[14:57:27] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[14:57:36] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Remote host closed the connection)
[15:01:39] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 258 seconds)
[15:04:35] *** Quits: lisp123 (~lisp123@45.130.83.181) (Remote host closed the connection)
[15:05:07] *** Joins: lisp123 (~lisp123@45.130.83.181)
[15:08:21] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:95c2:35af:5386:9a00)
[15:09:03] <jackdaniel> thanks
[15:09:42] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 258 seconds)
[15:16:04] *** Quits: frgo (~frgo@p200300deef181d001d95c29ee5038c26.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:16:31] *** Joins: frgo (~frgo@p200300deef181d001d95c29ee5038c26.dip0.t-ipconnect.de)
[15:18:55] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[15:19:46] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:21:34] *** Joins: selwyn (~selwyn@user/selwyn)
[15:21:54] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[15:22:27] *** Joins: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de)
[15:27:14] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:29:52] *** Joins: retropikzel (~retropikz@2001:999:200:1f35:ae12:3ff:fe96:9d08)
[15:32:31] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[15:32:54] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[15:34:49] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:36:42] *** Quits: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa) (Ping timeout: 240 seconds)
[15:43:36] *** Joins: lisp123 (~lisp123@45.130.83.181)
[15:44:35] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Remote host closed the connection)
[15:49:13] *** Joins: Oladon (~olad@98.43.81.226)
[15:56:05] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 258 seconds)
[15:57:40] *** Joins: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa)
[16:00:14] *** Joins: selwyn (~selwyn@user/selwyn)
[16:01:22] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[16:01:53] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[16:02:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[16:03:09] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[16:03:57] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[16:04:21] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:08:53] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Remote host closed the connection)
[16:09:31] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[16:25:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:26:02] *** Quits: andreyorst (~andreyors@2.92.126.232) (Ping timeout: 268 seconds)
[16:26:21] *** Joins: lisp123 (~lisp123@45.130.83.181)
[16:30:41] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[16:31:35] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 268 seconds)
[16:32:02] *** Joins: selwyn (~selwyn@user/selwyn)
[16:33:54] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[16:35:18] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:38:41] *** Joins: andreyorst (~andreyors@2.92.124.61)
[16:40:48] *** Joins: lisp123 (~lisp123@45.130.83.181)
[16:44:03] *** Quits: lisp123 (~lisp123@45.130.83.181) (Client Quit)
[16:47:03] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[16:50:00] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[16:57:37] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[16:58:52] *** Joins: tfeb (~tfb@88.98.95.237)
[17:03:54] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 240 seconds)
[17:04:09] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[17:06:35] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[17:08:59] *** Joins: z3t0 (~z3t0@107-159-10-134.on.dsl.ebox.net)
[17:10:19] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[17:11:03] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[17:11:39] <nij-> Hi! For a list (x y z), how do I loop over it and collect so that I get
[17:11:51] <nij-> ((0 . x) (1 . y) (2 . z)) at the end?
[17:13:11] <jackdaniel> (loop for i from 0 for e in '(x y z) collect (cons i e))
[17:16:44] *** Joins: djuber` (~user@65.79.128.64)
[17:17:17] <nij-> Neat!
[17:18:32] *** Joins: noa (~noa@81.170.98.107)
[17:25:25] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:25:43] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:26:56] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[17:29:32] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[17:30:00] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:30:36] *** Joins: Bike (~Glossina@71.69.170.70)
[17:30:36] *** ChanServ sets mode: +o Bike
[17:35:45] *** noa is now known as noa```
[17:39:31] <jasom> question: how hairy should a destructuring lambda-list get before one decides to use multiple destructuring binds?
[17:42:02] <jasom> I've got (hours _ (&optional minutes ((&optional seconds ((&optional nanoseconds))))) offset) for destructuring a parse tree for a timestamp.  The extra braces needed around the destructured optional parameters makes this feel a bit "write only" to me
[17:42:52] <hayley> Can you influence the structure generated by the parser?
[17:44:17] <jasom> not trivially; this is the natural layout since hours must always be specified, and each more specific item is optional, but requires the more specific one to be present
[17:45:09] <jasom> e.g. 12 <-- just the hour 12:34 <-- hours and minutes 12:35:56 <-- hours minutes seconds 12:34:56.78 <-- hours minutes seconds nanoseconds
[17:45:43] <hayley> Okay. Just a random thought.
[17:46:19] <jasom> And I can't just flatten it because that confuses the offset that may be on the end: 12+03:00 < hour plus offset from UTC
[17:46:48] <jasom> I suppose I could force the offset to be there, but be nil, then do a butlast, then flatten
[17:46:49] <hayley> Though having double nesting around seconds and nanoseconds (so, nine digits?) feels strange, but it could be due to the grammar.
[17:46:58] <scymtym> if the minutes, seconds, nanoseconds part is a self-contained sub-structure in the result, you could make a separate rule
[17:48:02] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:48:02] <jasom> hayley: here's a sample parse tree with everything but the offset specified: (12 NIL (34 (56 (780000000))) NIL)
[17:50:19] <hayley> Right. But I don't see why e.g. ((&optional nanoseconds)) is used when it would match a list of a list with either zero or one arguments.
[17:51:51] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[17:51:54] <jasom> because without the ns in the input, the parse tree looks like (12 NIL (34 (56 nil))
[17:52:19] *** Joins: amb007 (~a_bakic@236.199.204.77.rev.sfr.net)
[17:52:55] <hayley> Okay. I must be too tired to read the destructuring lambda list then.
[17:53:16] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[17:53:50] <jasom> hayley: if you do ... &optional a (&optional b)  that means: Optional argument named "a" and an optional argument named "&optional" with a default value of "b"
[17:54:01] <jasom> the double-braces are needed to disambiguate from that case
[17:54:16] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Client Quit)
[17:54:28] <hayley> Naming it wouldn't hurt though; perhaps make a macro which is used like (with-timestamp-parse ((:seconds s :minutes m :hours h) parse-tree) ...)?
[17:54:39] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[17:55:00] <hayley> Oh, right, now it makes sense. Today I can't seem to reason about lambda lists at all.
[17:57:19] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[18:12:26] *** Joins: dlowe (~dlowe@user/dlowe)
[18:18:27] <jmercouris> anyone know of a handy little macro for (unless x (setf x y))
[18:18:43] <jmercouris> to only set x if it is unset basically
[18:19:28] *** Joins: lisp123 (~lisp123@45.130.83.181)
[18:20:50] <hayley> (define-modify-macro you-posted-LUV-presentation-violation-prepare-to-lose-subscriber or)
[18:21:07] <jasom> jmercouris: unset or nil? those are two different things...
[18:21:15] <jmercouris> OK sure, I meant to say if NIL
[18:21:23] <jmercouris> the code reads quite clearly my intention
[18:21:28] <jmercouris> (unless x (setf x 1))
[18:21:58] <lisp123> Should I define packages (defpackage ...) in my packages.lisp or in the package file itself?
[18:22:05] <beach> jmercouris: Shocking!
[18:22:05] <jmercouris> not looking for (symbol-value 'x)
[18:22:11] <jmercouris> beach: what is so shocking?
[18:22:14] <hayley> The CLHS is a bit unclear on if I can use OR though. The argument is called "function" but the equivalent expansion suggests it is fine to use a macro name.
[18:22:17] <Bike> jmercouris: i don't think i know of any library with that
[18:22:17] <dlowe> lisp123: do you mean the system file?
[18:22:28] <Bike> lisp123: is "the package file itself" not packages.lisp?
[18:22:31] <lisp123> dlowe: no I avoid ASDF :)
[18:22:35] <jasom> jmercouris: I would probably do (setf x (or x 1))
[18:22:45] <beach> jmercouris: The UNLESS suggests that X is a Boolean, but then you assign a number to it.
[18:22:58] <jmercouris> jasom: hm, that is one way
[18:22:59] <dlowe> lisp123: you're already outside convention, then, so do whatever you please
[18:23:03] <lisp123> bike: I have been putting (defpackage my-package) in packages.lisp then in my-package.lisp I put (in-package my-package)
[18:23:13] <jmercouris> beach: :-O
[18:23:14] <jmercouris> indeed
[18:23:14] <hayley> jasom: see my definition of you-posted-LUV-presentation-violation-prepare-to-lose-subscriber
[18:23:31] <Bike> you should do (defpackage my-package ...) in one file, and put (in-package my-package) at the top of each of your other files
[18:23:45] <jmercouris> Unless you want to do package per file style....
[18:23:52] <jmercouris> ASDF has provisions for that as well...
[18:24:05] <Bike> or that
[18:24:16] <jmercouris> that said, do what Bike said
[18:24:20] <jmercouris> package per file is frustrating
[18:24:23] <lisp123> Bike: That's what I have been doing till now (and I assume there was some good reason but I forgot). But now I am trying to do more literate programming, so it feels more natural to put it in one file?
[18:24:26] *** Quits: amb007 (~a_bakic@236.199.204.77.rev.sfr.net) (Ping timeout: 258 seconds)
[18:24:26] *** Quits: vats (~vats@103.70.83.249) (Ping timeout: 258 seconds)
[18:24:35] <phoe> you can put that in one file
[18:24:46] <Bike> lisp123: i don't know why that would be more natural. putting in-package on top of each file lets the reader orient themselves.
[18:24:54] <phoe> (defpackage #:foo ...) (in-package #:foo) (defun ...) (defvar ...) ;; normal application code goes here
[18:24:59] <jasom> what about two-packages-per-file style?  Each file must define exactly two packages ;)
[18:25:09] *** Joins: amb007 (~a_bakic@105.197.204.77.rev.sfr.net)
[18:25:15] <jmercouris> jasom: I hope you don't publish your name on your source code!
[18:25:18] <phoe> I think only Genera of all Common Lisp implementations used today chokes on this
[18:25:32] <hayley> zero-packages-per-file, program like it's 1960 (or elisp)
[18:25:51] <jmercouris> even if you don't include a package there will be a package for the context...
[18:25:53] <jmercouris> well anyways
[18:26:14] <jmercouris> Elisp is stuck in the 1960s
[18:26:17] <beach> lisp123: I tend to divide my code into "modules", where each "module" is contained in a directory, has one .asd file, and a single package defined in a separate file.
[18:26:19] <lisp123> Bike: Is the main reason to seperate it into another file to make working with packages across multiple files easier?
[18:26:54] <Bike> the main reason to separate defpackage into another file? i mean, yeah
[18:27:16] <lisp123> Ok thanks, I will ponder over it
[18:27:33] <lisp123> I am experimenting with writing all code in .org files and then extracting them into a .lisp file
[18:27:35] <beach> lisp123: The .asd file starts with (cl:in-package #:asdf-user).  The package file starts with (cl:in-package #:common-lisp-user), and every other file in the module starts with (cl:in-package #:package-name-of-module).
[18:29:01] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Remote host closed the connection)
[18:29:36] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[18:29:50] <lisp123> beach: thanks. It all makes sense, I am just trying to reconcile it with a 1 .org file that fully explains a package approach
[18:30:34] <lisp123> Perhaps I will just put the defpackage code in comments and stick to using packages.lisp (and maybe later migrating to ASDF)
[18:31:42] <lisp123> How many lines of code should each file be? Maybe my issue is I am putting everything for a package into one file
[18:33:29] <beach> That is not very important.  Put related code together in a file.  What determines "related" depends on the programming technique used.
[18:34:07] <lisp123> makes sense
[18:34:59] <beach> Like if you do CLOS-style object-oriented programming, you may want to put methods on different generic functions, but specialized to the same class in one file.
[18:35:24] <beach> That way, one file contains everything that is needed for a single class.
[18:36:13] <lisp123> Thanks, yes that is how I am doing it right now
[18:36:29] <beach> A thing that often happens is you end up with a bunch of functions used everywhere, and then you can stick those in a file utilities.lisp.
[18:36:46] *** Joins: makomo_ (~makomo@user/makomo)
[18:36:49] <lisp123> My memory is so bad that I forget half of what I wrote after a few weeks, so I think literate programming will help me here
[18:37:13] <dlowe> that's not a bad memory, that's well within norm
[18:37:55] <beach> Yeah, come back when "after a few weeks" turns into "yesterday".
[18:38:06] <dlowe> otherwise we wouldn't need all these methods of naming and commenting and tracking
[18:38:24] <lisp123> That is true
[18:38:45] <lisp123> beach: it is getting closer and closer to that every day :O
[18:39:12] <dlowe> Every program has a "utilities" file but it's nice to review it occasionally and pull commonly themed functions out
[18:39:18] <jasom> My favorite is "What idiot wrote this code?" (svn blame: jasom)
[18:39:20] <dlowe> usually one called "strings"
[18:40:21] <beach> lisp123: See the quotation of Charles Simonyi on top of page 9 of the LUV slides.
[18:40:31] <hayley> I fail to remember when exactly I did things other than "some time last week". But I don't know if literate programming has advantages for large systems.
[18:40:50] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[18:41:00] <hayley> At least, I would have no idea how to present my code in a linear fashion.
[18:41:23] <beach> Yeah, the way "literate programming" was defined, it is not a good thing to aspire to.
[18:41:42] <beach> But if it means "explain what you are doing", that's fine of course.
[18:43:16] <beach> And the way it is usually presented looks to me like the implementation is set in stone way too early, so that changes are difficult later on.
[18:44:24] <beach> lisp123: I find that a good protocol definition in the form of protocol classes and generic functions is the best way to structure some module.
[18:44:38] *** Parts: noa``` (~noa@81.170.98.107) (Leaving)
[18:44:45] <lisp123> hayley: It hasn't really taken off, so one would assume its not appropriate for most situations. Where I think it helps is (a) once a package is more or less final (at least for now), then converting it to a literate style for future reference, (b) if the coder is predisposed to writing (some people like to read more words to learn // some prefer just reading code directly)
[18:45:14] <scymtym> jmercouris: elisp recently got native compilation, good pattern matching, proper generic functions (with extensions, even), a (supposedly) better design for SETF and probably other things i don't recall right now. also lexical scoping a long time before that. i don't think they are stuck in the 1960's at all
[18:45:51] <hayley> Eventually I might need to write an internals book for some of my code, as well as the specification book (which covers Lisp and wire protocols).
[18:46:42] <beach> scymtym: So they no longer have an excuse to write Emacs in Emacs Lisp rather than Common Lisp. :)
[18:46:52] <hayley> I don't think it is necessarily complicated, but there is some subtlety as an effect of, say, using atomics in places rather than coarse locking, so it would help to have the proofs that things will work written down.
[18:46:54] <lisp123> beach: yes I am doing that too, perhaps I have to keep refining it to make it clearer and clearer - one of the underlying issues is spaghetti code. As of now I have too big of a memory issue, so will resort to writing some more detailed notes
[18:47:41] *** Joins: pjb (~pjb@user/pjb)
[18:47:47] <lisp123> For example, I have written a parser, and that's always hard to remember how it works - but I think that's also an issue with certain types of code (parsers always seem to me a bit challenging to read)
[18:48:04] <scymtym> beach: doesn't a better Elisp language reduce the incentive to rewrite in a different language?
[18:48:09] <hayley> lisp123: Okay. It seems I am a terrible writer, as I got rejected by a university for flunking the English exam.
[18:49:11] <beach> scymtym: I guess so.  What I really meant was that the original reason for writing Emacs in a simple Lisp dialect so that it would be very portable is no longer valid.
[18:49:13] <lisp123> hayley: Perhaps it means you are more predisposed to writing & reading code (and maybe most good programmers are that way). I rather write an essay though lol and have the code in between
[18:49:49] <Bike> looking at the elisp manual it doesn't seem their setf is different from CL's, other than that you can't extend it?
[18:49:52] <Bike> there's also a letf
[18:50:19] <scymtym> Bike: let me try to find what i was referring to
[18:50:33] <beach> hayley: You have a tendency to write ambiguous phrases.  But that kind of skill can be improved with practice.  Mainly, it is just a matter of exposing your writing, and re-reading it yourself.
[18:50:42] *** Quits: rgherdt_ (~rgherdt@ip5f5af410.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[18:50:57] <hayley> Okay, thanks.
[18:51:04] <pjb> indeed, RMS had to write emacs lisp because there was no good lisp running on unices in 1982.
[18:51:10] <pjb> nowadays, we have several CL and even scheme implementations running on unix, macos, ms-windows, and even android and iOS (in some way), so writing an emacs nowadays could avoid re-implementing a new lisp.
[18:51:43] <scymtym> Bike: the comment at the top of gv.el relates the approach to CL's SETF
[18:54:10] <hayley> A week ago I drew up a state machine to convince myself that my atomic operations wouldn't drop messages, but it wouldn't fit in a reference manual, and sadly I can't easily embed an image into Lisp code (no, a comment with the Graphviz code does not count), so it would not fit into the existing file structure too well.
[18:55:29] <Bike> i see, so instead of a setf expansion you define... not an expansion function, but a function that takes an expansion function as an argument, sorta...
[18:57:11] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Quit: This computer has gone to sleep)
[18:59:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:ac37:e201:be1c:acb4)
[19:00:19] *** Quits: nirnam (~nirnam@1.47.135.162) (Remote host closed the connection)
[19:02:11] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[19:03:01] *** Quits: cosimone (~user@2001:b07:ae5:db26:ac37:e201:be1c:acb4) (Remote host closed the connection)
[19:03:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:ac37:e201:be1c:acb4)
[19:05:34] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 272 seconds)
[19:05:46] *** Joins: srhm (~ascii@user/srhm)
[19:09:00] <pjb> hayley: embedding an image in code would depend on the renderer you want to use.
[19:09:12] <pjb> hayley: if you want to do that in an emacs buffer, it's easy enough.
[19:09:18] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:10:51] <pjb> hayley: put a "link" to the image in some format in your comment, and have a hook to process these links and insert the image: https://www.gnu.org/software/emacs/manual/html_node/elisp/Showing-Images.html
[19:18:35] <pjb> hayley: (insert-image (create-image "state-diagram.png" 'png nil :scale 0.5))
[19:20:30] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net) (Quit: Client closed)
[19:36:28] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[19:39:42] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 245 seconds)
[19:46:24] *** Joins: karlosz (~karlosz@rrcs-172-254-64-51.nyc.biz.rr.com)
[19:47:11] *** Quits: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu) (Remote host closed the connection)
[19:47:25] *** Joins: notzmv (~zmv@user/notzmv)
[19:47:34] *** Joins: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu)
[19:47:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:50:41] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 258 seconds)
[19:50:43] *** Quits: karlosz (~karlosz@rrcs-172-254-64-51.nyc.biz.rr.com) (Client Quit)
[19:52:36] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 276 seconds)
[19:57:26] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[20:10:36] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[20:10:44] *** Quits: amb007 (~a_bakic@105.197.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[20:10:54] *** Joins: amb007 (~a_bakic@6.135.22.93.rev.sfr.net)
[20:11:14] <akater[m]> Bike: Elisp has defsetf and define-setf-expander but they recommend gv instead.
[20:18:03] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[20:23:53] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[20:34:30] *** Quits: retropikzel (~retropikz@2001:999:200:1f35:ae12:3ff:fe96:9d08) (Quit: Leaving)
[20:35:30] <akater[m]> beach: re:  no longer have an excuse to write Emacs in Emacs Lisp rather than Common Lisp --- porting is hard but what is true, there is less incentive for those who like Common Lisp to write in it rather than in Emacs Lisp.
[20:35:53] <akater[m]> In his article “The Structure of a Programming Language Revolution”, Richard P. Gabriel juxtaposed programming systems and programming languages, and it is likely that people interested in Lisp are inclined to value programming systems as much, or more so, as languages.  And Emacs is a programming system that Common Lisp doesn't have while the language is not that different anymore.
[20:36:13] *** Quits: cosimone (~user@2001:b07:ae5:db26:ac37:e201:be1c:acb4) (Remote host closed the connection)
[20:40:25] *** Joins: shka (~herr@109.231.62.239)
[20:46:34] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[20:48:52] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[20:49:03] *** Quits: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[20:50:04] *** Joins: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu)
[20:51:37] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Client Quit)
[20:52:23] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[20:52:36] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 272 seconds)
[20:55:45] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Client Quit)
[20:55:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:56:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:04:38] *** Quits: amb007 (~a_bakic@6.135.22.93.rev.sfr.net) (Ping timeout: 272 seconds)
[21:06:01] *** Quits: cpape` (~user@2a01:4f9:c010:632d::1) (Remote host closed the connection)
[21:06:08] *** Joins: cpape` (~user@2a01:4f9:c010:632d::1)
[21:09:42] *** Joins: retropikzel (~retropikz@2001:999:200:1f35:ae12:3ff:fe96:9d08)
[21:10:02] *** Joins: vats (~vats@103.70.83.249)
[21:10:02] *** Quits: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu) (Read error: Connection reset by peer)
[21:10:35] *** Joins: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu)
[21:15:34] *** Joins: cosimone (~user@2001:b07:ae5:db26:7b03:296d:ee99:86b3)
[21:18:11] *** Quits: retropikzel (~retropikz@2001:999:200:1f35:ae12:3ff:fe96:9d08) (Quit: Leaving)
[21:18:16] *** Quits: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[21:18:52] *** Joins: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu)
[21:21:34] *** Joins: nirnam (~nirnam@1.47.135.162)
[21:23:19] *** Joins: amb007 (~a_bakic@80.149.170.8)
[21:23:28] *** Joins: Josh_2 (~user@37.25.47.130)
[21:24:19] <Josh_2> Hi, is there a way I can see the git commit history from CL? I want to make a sort of 'changelog' for my website
[21:24:26] <Josh_2> altho tbf it would probably be better if I manually write it
[21:29:14] <Bike> there is https://github.com/fourier/git-api i guess
[21:29:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:7b03:296d:ee99:86b3) (Remote host closed the connection)
[21:31:21] <nirnam> can I bound a symbol the a place, and modify the thing in that place using the symbol instead of having it rebound the symbol the the value?
[21:31:46] <nirnam> well that wasn't confusing at all, so sorry
[21:32:49] *** Joins: Tomte (~th@p200300db9f3cfb00148083af84148a9d.dip0.t-ipconnect.de)
[21:33:34] <Bike> nirnam: you might want symbol-macrolet
[21:33:54] <nirnam> what's that?
[21:33:56] <Bike> (let ((bar (list 3))) (symbol-macrolet ((foo (car bar))) (setf foo 7)) bar) => (7)
[21:34:23] <Bike> clhs symbol-macrolet
[21:34:23] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/s_symbol.htm
[21:35:51] <nirnam> ah yes, exactly what I wanted, thank you :>
[21:36:06] *** Quits: vats (~vats@103.70.83.249) (Ping timeout: 258 seconds)
[21:36:19] *** Quits: Tomte (~th@p200300db9f3cfb00148083af84148a9d.dip0.t-ipconnect.de) (Client Quit)
[21:36:37] <Bike> keep in mind that it's just a macro mechanism, so for example if your "place" has side effects, they'll be evaluated each time you refer to the symbol
[21:38:35] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:41:22] *** Joins: silasfox (~sbv@2001-4dd6-62dc-0-6027-7522-36-c7ab.ipv6dyn.netcologne.de)
[21:41:28] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[21:44:46] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:47:12] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[21:47:18] *** Quits: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[21:47:58] *** Joins: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu)
[21:49:48] <akater[m]> I find it amusing that `(setq x nil)` can execute arbitrary code in CL!
[21:51:37] *** Quits: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[21:52:15] *** Joins: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu)
[21:55:40] *** Quits: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[21:56:05] *** Joins: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu)
[21:58:26] *** Joins: pegaso (~reis-r@177.107.24.63)
[22:00:27] *** Joins: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258)
[22:00:27] *** Quits: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu) (Read error: Connection reset by peer)
[22:00:56] *** Joins: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu)
[22:01:40] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[22:03:57] *** Quits: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu) (Read error: Connection reset by peer)
[22:03:58] *** Quits: amb007 (~a_bakic@80.149.170.8) (Ping timeout: 268 seconds)
[22:04:35] *** Joins: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu)
[22:04:38] *** Joins: hafat (~hafat@95.70.167.173)
[22:05:59] *** Quits: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:08:07] *** Quits: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[22:08:35] *** Joins: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu)
[22:10:12] <pjb> akater[m]: theorically.  In practice what happens is either: 1- you get an undefined variable error (rare) 2- it's equivalent to (setf (symbol-value 'x) nil)  3- it's equivalent to (defparameter x nil) ; BAD!  4- it's equivalent to (deflex x nil) ; very rare
[22:10:29] *** Joins: amb007 (~a_bakic@38.39.22.93.rev.sfr.net)
[22:10:50] <pjb> akater[m]: the problem is that if it declares x special (thru defparameter), then you can spend days debugging expressions using x:  (let ((x 42)) (lambda () x)) won't work anymore!
[22:11:29] <pjb> akater[m]: but it's indeed funny that undefined is not really constrained so you could write an implementation that would do really wild things.  Like clang, say…
[22:12:14] <pjb> akater[m]: read this article: https://www.yodaiken.com/2021/05/19/undefined-behavior-in-c-is-a-reading-error/ https://news.ycombinator.com/item?id=27221552
[22:12:15] <random-nick> x could be a symbol macro tho
[22:12:26] <pjb> random-nick: if it's already defined, no problem.
[22:12:38] <pjb> random-nick: what is undefined, is when x is not defined yet.
[22:12:40] *** Quits: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu) (Read error: Connection reset by peer)
[22:12:51] <akater[m]> random-nick: That's what I meant.
[22:12:59] <pjb> random-nick: you can assume that deflex would expand to a define-symbol-macro x.
[22:13:04] *** Joins: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu)
[22:13:34] *** Quits: lisp-newbie (~lisp-newb@186.75.20.114) (Quit: This computer has gone to sleep)
[22:13:40] <pjb> The yodaiken article is interesting and important IMO.  We can also make this error with the clhs.
[22:15:09] <pjb> Now, when you write tutorials or examples, even in the REPL, it's as easy to write (let ((x 32) (example x)) than (setf x 32) (example x). So DO write (let ((x 32) (example x)) and with emacs, it's really very easy to edit in the REPL!
[22:15:28] <pjb> So there's no excuse not to update old tutorials and write new tutorials correctly.
[22:15:43] <pjb> (let (x)  (setf x 42) (example x)) if you insist on setf.
[22:19:25] *** Quits: amb007 (~a_bakic@38.39.22.93.rev.sfr.net) (Ping timeout: 258 seconds)
[22:19:38] *** Joins: amb007 (~a_bakic@241.249.23.93.rev.sfr.net)
[22:21:33] *** Quits: hafat (~hafat@95.70.167.173) (Quit: Leaving)
[22:25:05] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[22:28:40] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[22:29:04] *** Quits: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu) (Read error: Connection reset by peer)
[22:29:43] *** Joins: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu)
[22:34:22] *** Quits: jimka (~user@2a01:e0a:26a:f400:78f1:4c5d:36e:1258) (Ping timeout: 258 seconds)
[22:35:28] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.2)
[22:35:50] *** Joins: gaqwas (~john@dynamic-095-117-155-081.95.117.pool.telefonica.de)
[22:36:14] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:95c2:35af:5386:9a00) (Remote host closed the connection)
[22:36:54] *** Joins: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de)
[22:37:01] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[22:37:52] *** Quits: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[22:38:21] *** Joins: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu)
[22:40:57] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Read error: Connection reset by peer)
[22:42:17] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[22:42:31] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Remote host closed the connection)
[22:49:42] *** Quits: amb007 (~a_bakic@241.249.23.93.rev.sfr.net) (Ping timeout: 258 seconds)
[22:50:16] *** Joins: mariari (~mariari@user/mariari)
[22:50:42] *** Joins: amb007 (~a_bakic@118.175.185.81.rev.sfr.net)
[22:59:29] *** Joins: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d)
[23:04:58] *** Quits: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d) (Ping timeout: 240 seconds)
[23:07:50] *** Quits: OlCe (~user@amontpellier-658-1-232-244.w109-210.abo.wanadoo.fr) (Remote host closed the connection)
[23:09:23] *** Joins: lisp-newbie (~lisp-newb@186.75.20.114)
[23:11:04] *** Quits: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[23:11:32] *** Joins: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu)
[23:13:57] *** Quits: nirnam (~nirnam@1.47.135.162) (Read error: Connection reset by peer)
[23:14:53] *** Quits: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[23:15:38] *** Joins: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu)
[23:15:57] *** Joins: nirnam (~nirnam@1.47.135.162)
[23:27:32] *** Quits: attila_lendvai (~alendvai@C226779F.unconfigured.pool.telekom.hu) (Read error: Connection reset by peer)
[23:28:05] *** Joins: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu)
[23:31:31] *** Joins: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d)
[23:34:13] *** Joins: vats (~vats@103.70.83.249)
[23:38:23] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 258 seconds)
[23:57:45] *** Joins: uai (~uai@80.84.120.18)
[23:59:31] *** Quits: uai (~uai@80.84.120.18) (Quit: WeeChat 3.2)
[23:59:46] *** Joins: uai (~uai@80.84.120.18)
