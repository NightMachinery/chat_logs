[00:00:02] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[00:02:40] *** Joins: mmfood (~mmfood@45.91.21.40)
[00:07:02] *** Joins: arcatech (~arcatech@user/arcatech)
[00:09:36] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:11:16] *** Joins: andlabs (~andlabs@71.190.119.164)
[00:14:49] *** Joins: dr0n (~nabromov@159.48.53.202)
[00:24:10] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[00:24:50] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[00:27:46] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[00:29:39] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:302c:4772:8bcd:b3cd) (Quit: Leaving)
[00:32:18] *** Joins: theoceaniscool (~theoceani@37.29.224.182)
[00:45:48] *** Quits: henriquev (~henvic@user/henriquev) (Ping timeout: 265 seconds)
[00:46:40] *** Joins: henriquev (~henvic@user/henriquev)
[00:48:09] *** Quits: cs_0x6373 (~verdammt_@static.2.59.76.144.clients.your-server.de) (Changing host)
[00:48:09] *** Joins: cs_0x6373 (~verdammt_@user/cs-0x6373/x-8873866)
[00:53:46] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[00:56:36] *** Quits: sord937_ (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 244 seconds)
[00:58:29] *** Joins: sord937_ (~sord937@gateway/tor-sasl/sord937)
[01:06:48] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[01:09:47] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 252 seconds)
[01:10:54] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[01:17:50] *** Quits: sord937_ (~sord937@gateway/tor-sasl/sord937) (Quit: sord937_)
[01:20:42] *** Joins: arcatech (~arcatech@user/arcatech)
[01:22:45] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[01:28:49] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:30:15] *** Joins: andlabs (~andlabs@71.190.119.164)
[01:35:48] *** Joins: nickjj (~nickjj@user/nickjj)
[01:36:55] *** Quits: theoceaniscool (~theoceani@37.29.224.182) (Read error: Connection reset by peer)
[01:36:58] <nickjj> with go's templating language if i do {{- if .Values.ingress.someBoolean }} , and someBoolean isn't defined , the condition evaluates to true , is there anything i can do to make it evaluate to false if it's undefined?
[01:38:10] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 240 seconds)
[01:39:01] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[01:39:18] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[01:40:13] *** Joins: Garb0 (~Garb0@user/garb0)
[01:42:28] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1000) (Ping timeout: 246 seconds)
[01:44:23] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1000.inf6.spectrum.com)
[01:49:59] <fizzie> I would have expected it to be false (well, strictly speaking, empty) by default. That's at least what happens in https://play.golang.org/p/BWvY1y9FGDO -- but maybe your "undefined" meant something else.
[01:53:15] *** Quits: Garb0 (~Garb0@user/garb0) (Read error: Connection reset by peer)
[01:53:43] *** Quits: Louis (~Louis@my-hostna.me) (Quit: ZNC - https://znc.in)
[01:55:36] *** Joins: Louis (~Louis@my-hostna.me)
[01:56:58] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[02:06:28] *** Quits: Louis (~Louis@my-hostna.me) (Quit: ZNC - https://znc.in)
[02:10:11] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[02:10:17] *** Joins: Louis (~Louis@my-hostna.me)
[02:10:21] *** Quits: Louis (~Louis@my-hostna.me) (Remote host closed the connection)
[02:11:56] <b0nn> I was wondering if it's evaluating .Values.ingress as true
[02:12:33] <b0nn> that is, it's not seeing the boolean (which is bizarre because default values and all) and instead evaluating what it does have
[02:12:47] *** Joins: maroloccio (~marolocci@200.187.188.82)
[02:15:00] <A_Dragon> weird
[02:15:44] <A_Dragon> b0nn: a custom function perhaps?
[02:16:23] <b0nn> yeah, it def needs more explanation on what's happening
[02:16:36] <A_Dragon> wait it did WHAT with nil?
[02:16:41] <A_Dragon> I misunderstood
[02:16:44] <A_Dragon> thats
[02:16:50] <A_Dragon> incredibly weird. I'd expect an error
[02:16:54] <nickjj> b0nn, it is being used within helm (a kubernetes abstraction that allows for go templating)
[02:17:05] <nickjj> and in this case .Values.ingress would exist
[02:17:11] <b0nn> Heh, I haven't used helm in a couple of years
[02:18:04] *** Quits: maroloccio (~marolocci@200.187.188.82) (Ping timeout: 246 seconds)
[02:18:26] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 252 seconds)
[02:18:47] <nickjj> the yaml data structure looks like this: https://gist.github.com/nickjj/fd4fa8c232113a463f5557b642ab0e62
[02:19:08] <nickjj> that evals to true as is (expected) but if i remove line 2 then at the template level it still evals to true
[02:19:36] <nickjj> and if i define it and set it to false then it evals as false at the template level (also expected)
[02:22:02] *** Joins: maroloccio (~marolocci@200.187.188.82)
[02:22:03] <nickjj> btw, what are you using nowadays if it's not helm?
[02:22:10] *** Quits: maroloccio (~marolocci@200.187.188.82) (Client Quit)
[02:30:25] <fizzie> nickjj: Can't reproduce, this example that's a little closer to what you've got still works as expected: https://play.golang.org/p/g2zPlT-d83u
[02:30:42] <fizzie> (Evaluates as "false" when "someBoolean" isn't defined.)
[02:32:19] <b0nn> WRT: What do I use now, I haven't done any orchestration in a whiles, but last touched k8s
[02:33:11] <b0nn> WRT a fix, I can only suggest a workaround, and that is ... whatever is creating that yml is forced to have the val
[02:33:33] <b0nn> But it's not right, the template should not behave like this at all, it should be what fizzie is showing
[02:33:47] <fizzie> So I'd expect something else than "text/template" being responsible for the weirdness there. If you can see what the template expands to, you could use `printf "%#v"` to see what exactly the .Values.ingress.someBoolean pipeline evaluates to: https://play.golang.org/p/pkKfEiC4FtI
[02:33:53] <nickjj> the workaround that you proposed is what i'm doing now btw, it's just a little tedious to define a bunch of false values
[02:34:22] <nickjj> thanks, i'll try the %#v trick and see what's up
[02:37:25] <nickjj> it says it's unable to decode ""
[02:38:17] <nickjj> but in the error it shows me the parsed result which is `true` (this is the case where it's undefined in the yaml)
[02:39:30] <b0nn> what's doing the parsing?
[02:39:31] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[02:40:02] <b0nn> as in, how are you grabbing the stuff™from the yaml file?
[02:40:19] <nickjj> that is something helm does, i'm not sure
[02:40:55] <nickjj> ah hah! i see what's going on
[02:41:19] <b0nn> https://helm.sh/docs/chart_template_guide/debugging/
[02:41:23] <nickjj> helm has a way to define a default value by doing .Values.ingress.someBoolean | default false
[02:41:34] <b0nn> oh, nice
[02:41:43] <nickjj> and this for 100% sure should work but it didn't, it still resulted in true even with a default value of true
[02:42:19] <nickjj> but helm also has a way to merge configs together, so you can have a "base" config and then optionally supply -f foo.yml to merge foo's config with the base one
[02:42:39] <nickjj> and my base config has the value set to true, so when the foo.yml config that was being merged didn't have it set, it still uses true from the base
[02:42:40] *** Joins: Louis (~Louis@my-hostna.me)
[02:43:19] <nickjj> so world is correct, it just happened to use the base's true value which is why it eval'd to true
[02:43:22] <nickjj> *the world
[02:43:48] *** Quits: mud (~mud@user/kadoban) (Remote host closed the connection)
[02:44:14] *** Joins: mud (~mud@user/kadoban)
[02:47:34] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1000.inf6.spectrum.com) (Ping timeout: 246 seconds)
[02:50:59] *** Joins: hexfive (~eric@50.35.83.177)
[02:53:42] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[02:56:48] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[02:58:44] *** Joins: mrlemke_ (~mrlemke@208.74.105.200)
[02:59:05] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:59:41] *** Quits: _mrlemke_ (~mrlemke@208.74.105.200) (Ping timeout: 252 seconds)
[03:01:22] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 240 seconds)
[03:05:33] *** Joins: Garb0 (~Garb0@user/garb0)
[03:06:26] *** Joins: normen (~normen@p200300d7173dc900e9eca7cdf8b6127b.dip0.t-ipconnect.de)
[03:12:17] *** Joins: SincereFox (uid337158@user/sincerefox)
[03:14:44] *** Quits: lemmi (~lemmi@lpm.pw) (Quit: WeeChat 3.2)
[03:14:59] *** Joins: lemmi (~lemmi@user/lemmi)
[03:15:22] *** Quits: normen (~normen@p200300d7173dc900e9eca7cdf8b6127b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:16:34] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 240 seconds)
[03:17:21] *** Joins: habys (~habys@2603:3001:bd9:f1:1337:f1ac:d00d:17c)
[03:17:25] *** Quits: habys_ (~habys@2603:3001:bd9:f1:1337:f1ac:d00d:17c) (Quit: byye)
[03:18:47] *** Joins: Garb0 (~Garb0@user/garb0)
[03:23:52] <Anderson-D> Any ideas how to print unicode chars, e. g. \u203C in template file?
[03:27:33] <Anderson-D> Nvm, found solution: `{{ "\u203C" }}`
[03:31:06] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:35] *** Joins: jsrnop (~mark@user/jsrnop)
[03:34:37] *** Joins: thing_ (~thing@user/thing)
[03:34:52] *** Quits: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[03:34:52] *** Joins: sudden (~cat@user/sudden)
[03:35:44] *** Quits: thing (~thing@user/thing) (Ping timeout: 244 seconds)
[03:35:49] *** thing_ is now known as thing
[03:35:59] *** Quits: mmfood (~mmfood@45.91.21.40) (Ping timeout: 252 seconds)
[03:41:12] <j416> or just write the character verbatim
[03:41:20] <j416> y'know.
[03:45:25] *** Quits: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:45:39] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-27.dsl.bell.ca) (Quit: Leaving)
[03:45:59] *** Quits: dr0n (~nabromov@159.48.53.202) (Ping timeout: 252 seconds)
[03:47:25] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d) (Ping timeout: 246 seconds)
[03:48:13] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:51:16] *** Joins: normen (~normen@p200300d7173dc900e9eca7cdf8b6127b.dip0.t-ipconnect.de)
[03:57:00] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:57:13] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 246 seconds)
[04:00:17] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[04:01:10] *** Joins: zwr (~zwr@2804:14c:5bc5:8b2c:d486:b000:9fc0:b091)
[04:12:50] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[04:15:35] *** Joins: w0x12ef (~w0x12ef@60.10.194.47)
[04:15:57] *** Quits: w0x12ef (~w0x12ef@60.10.194.47) (Remote host closed the connection)
[04:16:21] *** Joins: gggp (~gggp@125.33.94.235)
[04:22:25] *** Quits: normen (~normen@p200300d7173dc900e9eca7cdf8b6127b.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[04:24:06] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[04:24:21] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[04:34:56] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[04:42:20] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:43:41] *** Joins: arcatech (~arcatech@user/arcatech)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:17] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:59:48] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[05:12:31] *** Joins: gggp_ (~gggp@221.219.70.91)
[05:15:32] *** Quits: gggp (~gggp@125.33.94.235) (Ping timeout: 252 seconds)
[05:18:46] *** Quits: menace (~someone@user/menace) (Ping timeout: 246 seconds)
[05:18:53] *** Joins: menace (~someone@2001:a61:34d7:2201:1cae:276d:6e43:c5a7)
[05:21:59] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[05:22:08] *** Joins: wielding[m] (~wieldingm@2001:470:69fc:105::b704)
[05:22:19] *** Quits: rabbitear (~juice@142.93.115.104) (Remote host closed the connection)
[05:22:41] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[05:22:42] *** Joins: rabbitear (~juice@142.93.115.104)
[05:25:43] *** Parts: wielding[m] (~wieldingm@2001:470:69fc:105::b704) ()
[05:27:56] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb.)
[05:29:33] *** Joins: Jigsy (~Jigsy@user/jigsy)
[05:30:18] *** Quits: KekSi (~KekSi@x4db66da6.dyn.telefonica.de) (Ping timeout: 272 seconds)
[05:34:06] *** Joins: KekSi (~KekSi@x4db3b1b0.dyn.telefonica.de)
[05:40:43] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[05:51:05] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[05:51:15] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[05:52:29] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Client Quit)
[05:59:37] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[05:59:38] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[06:02:34] *** Quits: mrlemke_ (~mrlemke@208.74.105.200) (Ping timeout: 240 seconds)
[06:08:43] *** Quits: yelnah (~felix@2001:44b8:3086:9f:6f0:21ff:fe3c:d4d7) (Ping timeout: 256 seconds)
[06:10:17] *** Joins: yelnah (~felix@123-243-142-224.tpgi.com.au)
[06:10:24] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb again.)
[06:12:59] *** Joins: Jigsy (~Jigsy@user/jigsy)
[06:17:38] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:20:34] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[06:28:14] *** gggp_ is now known as gggp
[06:33:20] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[06:33:42] *** Joins: frost (~frost@59.71.241.179)
[06:48:19] *** Quits: Snyp (~rksht@49.207.192.223) (Quit: WeeChat 3.2)
[06:51:50] *** Parts: ansimita (~ansimita@user/ansimita) ()
[06:52:53] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:54:33] *** Joins: gggp_ (~gggp@125.33.95.211)
[06:54:59] *** Joins: andlabs (~andlabs@71.190.119.164)
[06:56:28] *** Quits: gggp (~gggp@221.219.70.91) (Killed (NickServ (GHOST command used by gggp_!~gggp@125.33.95.211)))
[06:56:30] *** gggp_ is now known as gggp
[06:57:08] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[07:10:17] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[07:26:37] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:27:06] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[07:27:08] *** Joins: ansimita (~ansimita@user/ansimita)
[07:29:39] *** Quits: Kahn (~Kahn@user/kahn) (Quit: WeeChat 3.1)
[07:32:33] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb once more.)
[07:37:11] *** Joins: Jigsy (~Jigsy@user/jigsy)
[08:02:35] *** Quits: arcatech (~arcatech@user/arcatech) (Remote host closed the connection)
[08:06:25] *** Quits: gggp (~gggp@125.33.95.211) (Ping timeout: 246 seconds)
[08:10:05] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[08:10:30] *** Joins: kulak (~kulak@user/kulak)
[08:13:16] *** Quits: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Quit: estoy fuera)
[08:13:49] *** Joins: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[08:14:50] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[08:15:56] *** Joins: kulak (~kulak@user/kulak)
[08:21:04] *** Quits: treethought (treethou@138.68.49.251) (Ping timeout: 258 seconds)
[08:22:04] <acagastya> Here is that basic IRC and EventStream code: https://play.golang.org/p/S0v25NEW8b2
[08:22:29] <acagastya> `irc_conn` connects to the IRC client.  `es` looks for the eventstream.
[08:22:39] <acagastya> They both seem to have an infinite loop.
[08:23:00] <acagastya> How do I, in that case, send messages to IRC whenever there is new message in es?
[08:25:00] <b0nn> do you want to automagically send a message when there are events that you have a pattern match for?
[08:25:11] <b0nn> Or, just whenever there's a message
[08:27:17] <b0nn> You have an *irc.Client that has .Write("Message") method
[08:27:27] <b0nn> So, you need your es to know about that c
[08:27:42] <acagastya> There are some if conditions based on the response, yes.  That will pepare a `msg` and that is what I want to send.
[08:27:58] *** Joins: treethought (treethou@138.68.49.251)
[08:28:05] <b0nn> for your example code I would have func es(c *irc.Client) and when you call it pass es(&c)
[08:28:46] <b0nn> that is, give it an IRC client that it can call the write on
[08:29:27] <acagastya> But both being infinite loops, so how I can't seem to figure out how to handle that.
[08:29:48] <acagastya> `client.Run()` runs perpetually.
[08:30:02] <acagastya> `es()` has `for {}` too.
[08:32:02] <seebs> client.Run() is a misdirection
[08:32:07] <seebs> you don't want it or need it for what you're doing, i suspect
[08:32:18] <seebs> maybe you need to run it at all, but that's just there for the message *parsing* side.
[08:32:25] <seebs> you don't have to wait for it to be sending messages.
[08:32:33] <b0nn> sorry, I missed that there's no `main`
[08:32:58] *** Quits: treethought (treethou@138.68.49.251) (Ping timeout: 240 seconds)
[08:33:34] <b0nn> change irc_conn to /not/ build an new client, instead it returns a conn
[08:34:01] <b0nn> create your client somewhere else so you can grab its address and pass it about
[08:34:37] <b0nn> also, if you /must/ call client.Run(), do it inside its own goroutine (go client.Run())
[08:38:09] <acagastya> All right -- let me try that!
[08:41:58] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:45:54] *** Joins: treethought (treethou@138.68.49.251)
[08:49:28] <b0nn> oh, in case there's any confusion, return a pointer to a connection, not a copy :)
[08:50:15] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[08:53:05] *** Joins: SincereFox (uid337158@user/sincerefox)
[09:04:38] *** Quits: recursion (sid504862@id-504862.charlton.irccloud.com) (Changing host)
[09:04:38] *** Joins: recursion (sid504862@user/recursion)
[09:08:55] *** Quits: ac5tin (~ac5tin@user/ac5tin) (Quit: WeeChat 3.1)
[09:22:43] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[09:24:36] *** Quits: src (~src@user/src) (Quit: leaving)
[09:26:36] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[09:28:13] *** Joins: oxum (~oxum@106.201.34.214)
[09:29:13] *** Joins: haliucin1s (~haliucina@5.20.153.21)
[09:29:42] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 272 seconds)
[09:30:35] *** Joins: shka (~herr@109.231.62.239)
[09:30:58] *** Joins: c10l (~c10l@89.34.167.207)
[09:33:02] *** Quits: oxum (~oxum@106.201.34.214) (Ping timeout: 252 seconds)
[09:34:20] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[09:38:03] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Quit: Leaving)
[09:45:11] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:51:59] *** Joins: oxum (~oxum@106.201.34.214)
[09:53:35] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[09:54:11] <acagastya> Did you mean something like this?  https://play.golang.org/p/8Sk2opHDwj7
[09:54:39] <acagastya> I don't think it works without `client.Run()`
[09:56:41] *** Quits: oxum (~oxum@106.201.34.214) (Ping timeout: 252 seconds)
[09:56:52] *** Quits: menace (~someone@2001:a61:34d7:2201:1cae:276d:6e43:c5a7) (Quit: menace)
[10:05:08] *** Quits: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Quit: estoy fuera)
[10:05:35] <acagastya> https://play.golang.org/p/dNhnZTojKdC
[10:05:41] *** Joins: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[10:06:02] <acagastya> Instead of running perpetually, this exits.
[10:06:19] <acagastya> If I change `go client.Run()` to `client.Run()` -- that keeps on running.
[10:07:04] <acagastya> If I then add `es(client)`, it does not write to IRC.
[10:08:09] <b0nn> ok; do you know about waitgroups?
[10:09:04] <b0nn> the reason that "it just exits" is because the main thread
[10:10:05] <theckman> acagastya: I'm not sure I agree with the advice you're being given about running it in its own goroutine. If the main purpose of your program is to run the IRC bot, it feels appropriate to me to have `client.Run()` without `go` in front.
[10:10:42] *** Joins: CoolerX (~CoolerX@user/coolerx)
[10:10:51] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[10:11:34] <acagastya> b0nn: I have just heard about it, I don't know much about it.
[10:12:35] <acagastya> theckman: the main purpose is to get messages from eventsource and to send it to IRC -- both run perpetually.
[10:13:08] <theckman> acagastya: that makes sense. Looking at the `go-irc/irc` README, the handler seems to be able to handle different events.
[10:13:33] <theckman> Could you create the message sending goroutine from within the handler, when it receives an even indicating you connected to the server?
[10:13:52] <theckman> Since you'd only want to start sending messages after the connection is good.
[10:14:26] <acagastya> That would mean I call `es` from within the handler and I don't know if putting an infinite loop in the Handler would work -- let me try.
[10:15:37] <theckman> acagastya: not inside of the handler, the handler would `go` some other function.
[10:15:55] <theckman> The loop would exist inside of that newly spawned goroutine.
[10:17:26] <theckman> acagastya: I have this project starred too. It has the ability for the `HandleFunc` to handle things like `irc.CONNECTED`. Maybe that'd be easier to integrate with: https://github.com/fluffle/goirc#using-the-framework
[10:17:59] <theckman> Either should work I think, just offering alternatives to explore if you'd like.
[10:18:04] <acagastya> Do you mean something like https://play.golang.org/p/SzZtdvyj3Hb ?
[10:19:25] <theckman> acagastya: according to the comment there `001` is the connection event, so I don't think you'd want it in the else path. I think it'd be in the same path as that `JOIN` command.
[10:19:35] <b0nn> that code never calls es
[10:19:49] <b0nn> How will es be called
[10:20:00] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:20:11] <acagastya> It executes the 45th line.  Which would mean es is being called.
[10:20:15] <b0nn> Also, was on the phone
[10:20:56] <b0nn> Oh I see, sorry, line 66
[10:21:03] <theckman> acagastya: more like https://play.golang.org/p/M8w6fYEWnI_J
[10:21:22] <theckman> _I think_
[10:22:52] <acagastya> theckman that executes L45 for a bunch of time, but does not join IRC, and then has a clean exit.
[10:23:33] <theckman> acagastya: did you try to join the channel you're sending messages to?
[10:23:55] <theckman> I see different channel names being used here.
[10:24:44] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
[10:25:40] <acagastya> Oof -- fixed the name in `es`.  Though it still exits clean without sending to IRC.
[10:26:10] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 240 seconds)
[10:26:17] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[10:26:33] <acagastya> Probably because it won't work after `m.Command` is no longer `"001"`?
[10:27:24] <acagastya> Nope it exits regardless.
[10:27:47] <theckman> acagastya: RFC documents seem to indicate message needs to be prefixed with a `:`
[10:29:10] <acagastya> The example go-irc/irc has -- it does not make use of ":".  Maybe it handles that?
[10:29:31] <theckman> acagastya: it also looks like the `*Client` embeds a `*Conn`, which means this method is available: https://pkg.go.dev/github.com/go-irc/irc#Writer.WriteMessage
[10:29:40] <theckman> Do you want to use `c.WriteMessage()` instead?
[10:31:18] <theckman> acagastya: I don't see a PRIVMSG example anywhere.
[10:31:53] <theckman> So I'm not sure what you're referring to. Could you link me?
[10:32:00] <acagastya> https://github.com/go-irc/irc/blob/master/README.md
[10:32:24] <theckman> acagastya: they use `WriteMessage` not `Writef` like you're trying to do.
[10:34:25] <theckman> So yeah, I would assume `WriteMessage` is maybe handling that if it's needed. I'd assume you need to do it yourself if using`Write` or `Writef`.
[10:38:37] <acagastya> Even using WeiteMessage -- `es()` exits.  And no messae is sent to IRC.
[10:42:20] <acagastya> Maybe I should run them on different threads -- `client.Run()` and `es()` where es also takes care of writing?
[10:42:32] <theckman> acagastya: you do.
[10:42:45] <theckman> > go es(c)
[10:42:53] <theckman> That runs it within a different goroutine.
[10:45:23] <acagastya> Though -- do I need to do that in the handler?  And if not, running `go fn()` in main function would just quit in some time.
[10:45:43] <theckman> acagastya: you need to do it in the handler, so that you start it _after_ you connect to the IRC server.
[10:46:12] <theckman> acagastya: also, are you handling the returned error from the .Write methods?
[10:46:14] <theckman> If so, is it `nil`?
[10:47:22] <acagastya> Wouldn't `client := irc.NewClient(conn, config)` ensure the channel is already joined?
[10:48:37] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:48:53] <theckman> acagastya: I would assume that does nothing but set up in-memory data structures.
[10:49:46] <acagastya> I am starting to feel I should look for a different IRC library.
[10:50:22] <theckman> acagastya: this is a common pattern in Go. A constructor to set up the data structures, and then you need to invoke some method to start the network connections / processing loops.
[10:50:41] <theckman> That other one I mentioned seems nice, but I can't speak to it directly.
[10:51:08] <theckman> Yeah, no connection creation in here: https://github.com/go-irc/irc/blob/29f1845f11cf8b48016865be7381299056393f72/client.go#L65-L78
[10:51:17] <theckman> Which explains why it doesn't work when you removed `.Run()`
[10:53:38] <acagastya> https://play.golang.org/p/6NKI2GQp3qw There does not seem to be an error.  But es does not seem to send an IRC message.
[10:54:08] <acagastya> And the programme terminates, even though `client.Run` should have kept on going forever.
[10:54:53] <theckman> acagastya: `c.Write("PRIVMSG acagastya msg arrived")` doesn't look to match the required format.
[10:55:27] <theckman> So maybe the server is just dropping the message since it's malformed?
[10:59:30] <theckman> At least no error seems to indicate the message is making it to the server.
[11:00:40] <acagastya> If I remove `go es(c)` `go run main.go` does not close in on itself.
[11:01:29] <theckman> acagastya: maybe you need to also handle the error from `client.Run()`. Hopeful one of these gives you some hint as to what's going wrong.
[11:06:17] <acagastya> panic: EOF
[11:06:23] <acagastya> I wonder EOF of what.
[11:07:01] <theckman> acagastya: sounds like the connection is being unexpectedly closed. Maybe you're flooding the IRC server and it's booting you off?
[11:07:41] <theckman> The fact it doesn't happen when you don't run the `es()` function is why I threw that idea out there.
[11:10:58] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 240 seconds)
[11:12:05] <acagastya> Perfect!
[11:12:37] <acagastya> That seem to have worked, theckman!
[11:13:06] <theckman> Nice!
[11:19:16] *** Quits: pez (~pez@user/pez) (Quit: bye..)
[11:19:29] *** Joins: pez (~pez@user/pez)
[11:19:47] *** Joins: mrig (~mrig@user/mrig)
[11:20:23] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[11:20:31] <acagastya> Now, I just need to figure out how to tie them all together.
[11:20:37] <acagastya> Thanks, theckman!
[11:21:30] *** Quits: OnkelUlla (~uol@ptx.hi.pengutronix.de) (Ping timeout: 240 seconds)
[11:21:32] <theckman> 👍
[11:22:05] *** Joins: OnkelUlla (~uol@ptx.hi.pengutronix.de)
[11:24:17] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[11:28:17] *** Joins: Crassus (~Crassus@user/crassus)
[11:28:58] *** Joins: hikhvar796 (~thelounge@x4dbe480f.dyn.telefonica.de)
[11:39:55] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[11:44:03] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:52:40] *** Quits: psydroid (~psydroid@user/psydroid) (Ping timeout: 246 seconds)
[11:52:52] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[11:59:39] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:07:01] *** Quits: kadoban (~kadoban@user/kadoban) (Ping timeout: 246 seconds)
[12:08:16] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:12:07] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[12:16:49] *** Joins: usr123 (~usr123@49.156.64.90)
[12:18:50] *** Quits: usr123 (~usr123@49.156.64.90) (Client Quit)
[12:21:30] *** Joins: usr123 (~usr123@49.156.64.90)
[12:22:15] <A_Dragon> acagastya: you can enable debug on the struct to have it print the lines it gets and sense
[12:22:17] <A_Dragon> sends*
[12:22:49] <acagastya> Which struct?
[12:23:16] <A_Dragon> irc.Connection
[12:23:30] <Rudde> I'm trying to create a pointer with a real underlying value and set it via reflection, but it becomes of typ nil, I assume as fast I leave the codeblock I created the pointer variable I set it to, how can I get my struct to retain a value to a string and have it live as long as the struct does?
[12:23:59] <A_Dragon> code please? :D
[12:24:14] <A_Dragon> reflect and especially unsafe has a few gotchas that we need to see code for
[12:25:01] <Rudde> Let me see
[12:25:02] <Rudde> 2 seconds
[12:27:18] *** Joins: zerok (~zerok@user/zerok)
[12:27:35] <gpeskens[w]> Anyone know if a UDPConn on Linux implements buffersWriter as a single writev call?
[12:28:35] <gpeskens[w]> I'd like to write a header & packet data, without copying into a new slice, my packet data is there beforehand and I need to calculate the header.
[12:29:29] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 252 seconds)
[12:34:35] <usr123> I'm reading Go programming blueprints by Matt Ryer. I'm on the first chapter of the book. Could someone please explain how the following (https://github.com/gdhameeja/chat-app/blob/master/app/client.go) method in goroutine blocks and doesn't exit?
[12:36:46] <bookworm> usr123: on read()?
[12:36:52] <bookworm> well it's an endless loop
[12:37:13] <usr123> bookworm: no, on write.
[12:37:33] <bookworm> for msg := range c.send {
[12:37:34] <bookworm> smae
[12:37:46] <bookworm> same* endless loop, waiting for the channel
[12:38:25] <Rudde> Like this one
[12:38:26] <Rudde> https://play.golang.org/p/tDMlPrb6ow3
[12:38:38] <Rudde> This one would work, if I did everything inside main()
[12:38:48] <usr123> I didn't know that it would wait for the channel to get the value, I thought iterating over the channel just gives all the values it currently has.
[12:39:45] <usr123> And I placed a print statement inside the for loop in the read method, but that print statement doesn't get printed infinitely, it only prints when I send a message from my browser. How is that happening?
[12:40:12] <zerok> usr123 reading from a channel blocks until there's something to read :)
[12:40:47] <usr123> But in read we're not reading from a channel right?
[12:41:38] <bookworm> no but you are sending to it
[12:41:59] <bookworm> which, in the unbuffered channel case, also blocks until someone reads the value
[12:42:33] *** Joins: dr0n (~nabromov@159.48.53.201)
[12:43:14] *** Quits: hikhvar796 (~thelounge@x4dbe480f.dyn.telefonica.de) (Quit: The Lounge - https://thelounge.chat)
[12:43:32] <usr123> bookworm: here is the code and the output: https://play.golang.org/p/5MNHG_YDtSa
[12:43:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 240 seconds)
[12:44:02] <bookworm> your question being?
[12:45:27] <usr123> Okay, So these are all non buffered channels? So basically until another goroutine reads from the channel the execution is stopped?
[12:45:35] <usr123> unbuffered*
[12:45:40] <zerok> usr123 exactly
[12:46:06] <bookworm> usr123: https://github.com/gdhameeja/chat-app/blob/master/app/room.go#L34
[12:46:14] <bookworm> that's the form of make that makes the unbuffered channel
[12:46:46] <usr123> Right, I guess I understand some of it now. Thanks.
[12:46:58] <bookworm> else you'd do  make(chan *client, 20) or whatever to get a channel that has space for 20 entries
[12:50:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[12:52:36] <A_Dragon> Rudde: looks like you're setting this to the value of the zero value of a *pointer
[12:52:38] <A_Dragon> which is nol
[12:52:40] <A_Dragon> nil*
[12:53:32] *** Joins: gggp (~gggp@60.10.194.47)
[12:54:10] <Rudde> A_Dragon: https://play.golang.org/p/KyJRpA0MVcy
[12:54:22] <Rudde> If I do it in the SetFiled function I get a propert value tho
[12:54:30] <Rudde> shouldn't &val be a pointer to that value?
[12:55:03] <A_Dragon> thats a maybe
[12:55:09] <A_Dragon> you might get a new ptr
[12:55:32] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:55:32] *** Joins: fef (~thedawn@user/thedawn)
[12:56:43] <Rudde> How can I get a proper pointer for it to act as intended? :/
[12:58:37] <A_Dragon> yeah the pointers there are different. You should be able to use a SetField though, I think
[12:58:38] <A_Dragon> one sec
[13:00:07] <A_Dragon> Im not sure
[13:00:20] <A_Dragon> you should be able to set the value of that somehow but I dont recall how
[13:00:56] <Rudde> I tried to run an Elem() before, but I can't do that because it's nil before I've set anything
[13:01:11] <A_Dragon> on the second code Elem wont do anything, its not a pointer
[13:03:23] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Remote host closed the connection)
[13:04:26] <eyJhb> Is there a consensus for TODO comments in Golang? I thought I read somewhere to use `TODO(name-of-someone): my todo`
[13:04:50] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[13:05:00] *** Parts: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) ()
[13:06:30] *** Joins: normen (~normen@p200300d7173dc900e9eca7cdf8b6127b.dip0.t-ipconnect.de)
[13:06:39] <bookworm> not really, considering that it doesn't have tools parsing it, just use whatever the project is using or if there's none, use the form that you proposed
[13:07:05] <zerok> eyJhb: what would be the usecase of specifying a name of a person in a TODO? :/
[13:07:22] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[13:07:41] <bookworm> zerok: helps so that you know whom to ask without git blame
[13:07:49] <b0nn> There are TODO comments in the Go source code with names, not sure why, because it makes me think, oh nobody else can touch that?
[13:07:52] <bookworm> or just as a todo for yourself, so you can grep
[13:08:00] <snappy> grep -ir TODO $(go env GOROOT)/src <- feel free to copy the style
[13:08:11] <MD87> `TODO(username): whatever` is Google's internal style, I don't think it's necessarily recommended for anyone outside of Google
[13:08:13] <eyJhb> zerok: LIke, if I have some code that I don't want to fix.. I will just do `TODO(zerok): fix this`, push the code, copy a link and then send in here
[13:08:27] <bookworm> MD87: it's really not google specific
[13:08:29] <eyJhb> But yeah, as the others said. To assign someone, or a person to contact :)
[13:08:37] <eyJhb> But I do agree b0nn :) Makes me think the same.
[13:08:40] <zerok> eyJhb: ok, that's a weird workflow, but other people, other habits :)
[13:08:43] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[13:09:05] <eyJhb> I am the only one touching this code, and I usually self assign them..
[13:09:15] <eyJhb> `TODO(eyJhb): ffs write better code here, fix it`
[13:09:15] <A_Dragon> Rudde: yeah I dont know
[13:09:31] <A_Dragon> I messed with it a bit but its not that simple to modify non-pointer fields
[13:09:31] <eyJhb> Such a slacker eyJhb is.. Never fixing the TODOs
[13:09:37] <b0nn> lol
[13:09:46] <A_Dragon> you could modify the STRING but I really suggest not modifying string structs
[13:09:59] <b0nn> TODO b0nn: stop being a lazy so and so
[13:10:10] <A_Dragon> b0nn: am I missing something silly with reflecting struct fields?
[13:10:17] <eyJhb> But nice to know that the style is internal at Google :p
[13:10:26] <b0nn> ?
[13:10:31] <eyJhb> b0nn: At some point it just becomes a way to better yourself as a person
[13:10:32] <A_Dragon> setting non-pointer struct fields
[13:10:48] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[13:11:03] <b0nn> A_Dragon: sorry, I'm not really up to speed
[13:11:27] <A_Dragon> b0nn: ah alright, nevermind then
[13:11:30] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[13:11:52] <A_Dragon> oh actually you know what Rudde
[13:11:56] <A_Dragon> it might just be strings
[13:12:03] <bookworm> eyJhb: it's really not, I've used and seen that same style without having any affiliation to google. It's pretty much what everybody comes up with if you tell them to make a todo comment
[13:12:04] <A_Dragon> strings are funky about being set because immutability
[13:13:15] <eyJhb> bookworm: Well, I think the context is as well, that I have seen those comments a lot in the Go source. And I would guess, that those are very Google affiliate :) So wondered if that was a standard in Go
[13:17:13] <A_Dragon> I adopted that style anywhere where I want to leave a note to MYSELF in a shared codebase
[13:17:16] *** Joins: sweb (~sweb@static.187.181.76.144.clients.your-server.de)
[13:17:37] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[13:19:03] <sweb> how to encrypt in golang using aes-256-gcm with tag? it's Node.js https://github.com/aasaam/aes/blob/master/node/index.js#L72 and PHP version :https://github.com/aasaam/aes/blob/master/php/src/AasaamAES/AasaamAES.php#L98 but i cant find Golang version that i set or get tag in GCM ? any guide
[13:20:05] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 252 seconds)
[13:22:47] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[13:26:50] *** Joins: finnb (~finnb@51.15.63.237)
[13:31:00] *** Joins: gggp_ (~gggp@60.10.194.47)
[13:32:06] <fizzie> sweb: AIUI the tag is appended to the end of the ciphertext output by the crypto/cipher.AEAD's Seal method, and correspondingly expected read to be there by the Open method.
[13:33:56] *** Quits: gggp (~gggp@60.10.194.47) (Ping timeout: 252 seconds)
[13:34:10] *** Quits: hendry (~hendry@210.23.22.2) (Ping timeout: 272 seconds)
[13:35:26] *** Quits: gggp_ (~gggp@60.10.194.47) (Client Quit)
[13:35:42] *** Joins: gggp_ (~gggp@60.10.194.47)
[13:37:25] <sweb>  fizzie: thanks for the tips i will try that
[13:40:07] <fizzie> For the record, I couldn't find that explicitly stated in the docs, so I looked it up in the "generic" GCM code. https://golang.org/src/crypto/cipher/gcm.go?s=3384:3423#L190 and https://golang.org/src/crypto/cipher/gcm.go?s=3384:3423#L214 specifically.
[13:45:12] *** Joins: samlamamma (~samlamamm@proxy01.se.axis.com)
[13:48:56] *** Quits: nachoes (~nachoes@user/nachoes) (Quit: bye)
[13:49:04] *** Joins: nachoes (~nachoes@user/nachoes)
[13:52:24] *** Quits: gpeskens[w] (~gpeskens@94-209-53-75.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[13:54:13] *** Joins: gpeskens[w] (~gpeskens@94-209-53-75.cable.dynamic.v4.ziggo.nl)
[13:59:06] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[13:59:37] *** Quits: samlamamma (~samlamamm@proxy01.se.axis.com) (Quit: Client closed)
[14:01:01] *** Joins: gggp__ (~gggp@60.10.194.47)
[14:01:54] *** decartes is now known as nixture
[14:02:58] *** Quits: gggp_ (~gggp@60.10.194.47) (Ping timeout: 240 seconds)
[14:03:07] *** Joins: normen_ (~normen@p200300d7173dc900e9eca7cdf8b6127b.dip0.t-ipconnect.de)
[14:04:47] *** Joins: Ohlov31 (~Ohlov3@dyndsl-085-016-107-145.ewe-ip-backbone.de)
[14:05:46] *** Quits: normen (~normen@p200300d7173dc900e9eca7cdf8b6127b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[14:05:48] *** normen_ is now known as normen
[14:06:38] <mort> hey, I have two libraries which use protobuf. The protobuf files have a different `package` specifier in the .proto file, but both libraries generated their .pb.go files from a file called "protos.proto". Apparently, the generated code calls RegisterFile with the name of the source file, and after an update, protobuf considers two different
[14:06:38] <mort> protobuf packages generated from different protobuf files with the same name a "namespace conflict". Is that right?
[14:06:53] *** Joins: hendry (~hendry@210.23.22.2)
[14:07:05] *** Joins: Crassus (~Crassus@user/crassus)
[14:08:19] *** Quits: Ohlov3 (~Ohlov3@host-091-097-117-219.ewe-ip-backbone.de) (Ping timeout: 246 seconds)
[14:10:16] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[14:11:02] <fizzie> I've definitely had separate `config.proto`s in different packages with no problems. But then again, I use the full path to the proto file when generating the .pb.go, so the RegisterFile call in the generated code also does.
[14:11:36] <mort> yeah, that would probably have less chance of colliding
[14:12:45] <fizzie> Pretty sure conflicts in RegisterFile are also not fatal errors, but they would make it impossible to look up the descriptors by file name for reflection-y purposes, and maybe that'd break something.
[14:12:50] *** Quits: usr123 (~usr123@49.156.64.90) (Read error: Connection reset by peer)
[14:13:13] *** Joins: usr123 (~usr123@124.253.247.25)
[14:13:45] <fizzie> https://pkg.go.dev/google.golang.org/protobuf/reflect/protoregistry#Files.RegisterFile (which is what proto.RegisterFile calls to) says: "It is permitted for multiple files to have the same file path."
[14:14:54] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[14:15:06] <mort> then why does google.golang.org/protobuf/reflect/protoregistry.glob..func1 panic with "panic: proto: file "protos.proto" is already registered"
[14:16:12] <mort> it's not even an error, it's a panic from deep inside of protobuf
[14:21:21] <fizzie> Curious. Yeah, the code looks quite panic-y. (It's sort of configurable -- https://github.com/protocolbuffers/protobuf-go/blob/master/reflect/protoregistry/registry.go#L40 -- but presumably not something normally done.)
[14:22:29] <mort> weird that it documents that "It is permitted for multiple files to have the same file path" but then just panics...
[14:22:52] *** Quits: OMGOMG (~bobrobert@poppy.ifi.uio.no) (Remote host closed the connection)
[14:26:34] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[14:26:39] <fizzie> Looks like it's a recent change and someone forgot to update the comment.
[14:26:57] <fizzie> https://github.com/protocolbuffers/protobuf-go/commit/21e33cc just month ago.
[14:28:08] <mort> something is seriously broken with Google's approach to breaking changes
[14:28:16] <mort> why isn't that a 2.0
[14:28:27] <fizzie> The linked issue -- https://github.com/golang/protobuf/issues/1122 -- has some discussion about it, and also mentions the comment being wrong.
[14:28:47] *** Joins: c10l (~c10l@89.34.167.207)
[14:28:56] <mort> blatantly breaking changes in minor releases isn't okay
[14:30:33] <sweb> base64.StdEncoding.DecodeString return no error with empty string, any idea ?
[14:31:12] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[14:31:52] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:c48c:fa80:e44:9be7)
[14:32:18] <fizzie> Why would it be an error?
[14:34:52] <sweb> fizzie: seems my bad sorry
[14:41:51] *** Joins: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de)
[14:42:38] *** Joins: gggp_ (~gggp@221.219.70.91)
[14:43:04] *** gggp_ is now known as gggp
[14:45:22] *** Quits: gggp__ (~gggp@60.10.194.47) (Ping timeout: 240 seconds)
[14:45:47] *** Parts: acagastya (~acagastya@wikinews/acagastya) ()
[14:47:05] *** Quits: dr0n (~nabromov@159.48.53.201) (Ping timeout: 252 seconds)
[14:47:44] *** Joins: llorllale1 (~llorllale@2607:9880:3a18:69:bd11:e5f5:4ef9:b465)
[14:48:10] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:c48c:fa80:e44:9be7) (Ping timeout: 240 seconds)
[14:48:31] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[14:53:43] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[14:58:50] *** Joins: CoolerX (~CoolerX@user/coolerx)
[14:58:52] *** Quits: CoolerX (~CoolerX@user/coolerx) (Client Quit)
[15:06:07] *** Joins: maroloccio (~marolocci@200.187.188.82)
[15:07:36] <maroloccio> Hi. I have some "fixtures" code only used by unit tests, where does it belong in project organisation? I am thinking of a package called fixtures. I don't want any test code to be compiled into the prod binary and would like to respect any existing conventions..
[15:09:56] <b0nn> maroloccio: if the code is go code, then putting it into *_test.go will mean that it isn't built into your prod binary
[15:10:08] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:10:38] <b0nn> if it's just.. I dunno.. sql, then the testdata directory is helpful (it too is ignored for go build
[15:10:55] <b0nn> failing that look at build tags
[15:11:11] <maroloccio> It's Go code. b0nn can this be done for a whole package? e.g. fixtures_test/?
[15:11:37] <iivvoo> "struct of size 80 bytes could be of size 72 bytes (maligned)" <- how's that linting?
[15:12:07] <maroloccio> I would like to group the .go files for these fixtures, put them somewhere out of sight of people working on prod code and do no compile them in but have them available in unit tests (which just use *testing.T)
[15:13:01] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[15:13:30] <b0nn> Hmm, honestly, I don't know
[15:14:00] <b0nn> I don't think that the _test for a directory has any effect
[15:14:10] <b0nn> I think that's a job for TIAS
[15:14:47] <b0nn> What's the plan exactly, for the package to be executed as part of a integration test suite?
[15:14:57] *** Joins: sizeof_void34 (~Thunderbi@109-252-76-37.nat.spd-mgts.ru)
[15:15:03] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[15:15:16] <b0nn> it wouldn't be unit testing, because fixtures is for database state
[15:15:18] <iivvoo> if your tests are in  a seperate test package (but not the magical <pkg>_test namespace) you could move them anywhere right? But you wouldn't be able to access non-exported values in the subject package
[15:15:40] *** Joins: Crassus (~Crassus@user/crassus)
[15:15:46] *** Quits: Crassus (~Crassus@user/crassus) (Client Quit)
[15:16:16] <Rudde> Is there a way to assign str to Message as in this example, but using reflection?
[15:16:19] <Rudde> https://play.golang.org/p/C9fZ7milYsq
[15:17:30] <iivvoo> in general (imho) questions like "is xyz possible without reflection" make more sense
[15:17:58] <Rudde> But I need to know how to do it with reflection
[15:18:02] <maroloccio> The plan is actually to be able to replace database connections, which at present are based on *pgxpool.Pool, with a special intermediation layer which does a transaction BEGIN at the start of every unit test and ROLLBACK at the end, so that no data INSERTed by unit tests stays in the DB after running a unit test, even in case the test fails (defer
[15:18:03] <maroloccio> the rollback) and transaction isolation ensures no test, even if run concurrently, can SELECT interim data INSERTed by from another test (and other DB things and fixture things I can explain)
[15:19:16] <maroloccio> All of this logic has nothing to do with prod code but is would be a very nice addition to test code
[15:19:29] <iivvoo> rudde: you probably need to get the struct member and Set() on that. Not sure if I make sense, I have hacked with reflect a bit but it's always a bit of a challenge/trial error for me
[15:20:05] <Rudde> Yeah, it is very difficult
[15:20:23] <Rudde> I've tried to set it to a value, but as soon as it leave the function it seems to be a zero pointer
[15:20:30] <maroloccio> The idea of having each test INSERT its own data is the extremist approach but in reality there is "some" data that can stay in the test DB as a base and "some" other data that one should INSERT for certain tests to use and needs a tearDown after that battery of tests is done
[15:22:55] <maroloccio> The current proposal is to substitute the Pool object with an interface which has all methods that Pool had on it which were called (as checked by the compiler), then assign the Pool to a struct field of that interface type and somewhere else in tests replace that assignment with the assignment of a struct composing the pool which upon
[15:22:55] <maroloccio> instantiation (newStruct()) actually runs a .Begin or BeginTx before all operations and replaces Pool.Close() with a tx.Rollback()
[15:23:37] <maroloccio> It'a sort of manual dependency injection which replaces "test db access" with "auto-rollback db access"
[15:24:10] <maroloccio> Anybody got tips or gotchas to consider about this design?
[15:25:54] <b0nn> I like mocks (which you are basically defining) or fakes (where you don't replace an interface, instead you assign the method to a variable, and in your test set that variables value to a function you control
[15:27:10] *** Quits: pez (~pez@user/pez) (Quit: bye..)
[15:27:23] *** Joins: pez (~pez@user/pez)
[15:28:51] <maroloccio> b0nn oh so "fakes" are what in another language I'd probably call monkey-patching, only done at compile time? Take .bar() from foo.bar() and "plug in" anther bar2() in place of .bar() so that foo.bar() really executes foo.bar2()?
[15:29:12] <b0nn> example fake: var randInt = rand.Intn; //use in a func; func Foo() int {return rand.Intn()} ; // in the test package, file name _test, package is the same (for scope); func TestFoo(t *testing.T) {randIntn = func()int{return 3}; // all your tests can now count on the rand.Intn returning "
[15:29:17] <b0nn> "3"
[15:29:46] <b0nn> maroloccio: yes, almost monkeypatching, but only in this package. ie. NOT for your entire SUT during test execution
[15:30:21] <b0nn> in fact even in the same package, if you used rand.Intn directly in a function instead of the fake, your test would not affect it
[15:31:18] <maroloccio> Which is actually the problem I had to address in the first place, let me explain.. :)
[15:31:24] <b0nn> (something that caught me out recently when I fakes time.Now(), and time.Since() was calling time.Now() not my timeNow fake, so I had to swap to time.Sub() with my timeNow() being used
[15:32:46] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Remote host closed the connection)
[15:32:58] <maroloccio> I designed this BEGIN ... ROLLBACK wrapper for the database connection used by my tests and INSERTed test data via that transaction wrapper but, as you said b0nn, clearly any code outside my test which didn't have that patching set up for it would still SELECT from the normal db connection and thus NOT see the new transaction for the test.. so I
[15:32:58] <maroloccio> did some more hacking but I am looking for an elegant solution, if you can recommend one
[15:33:38] <b0nn> I think, yes, mocking and DI is where you want to go
[15:33:50] *** Joins: Crassus (~Crassus@user/crassus)
[15:33:58] <b0nn> because then you control the concrete instance passed to your functions
[15:34:09] <maroloccio> I can't introduce a DI framework which would replace all of the DB layer if started as "test" Vs "prod"
[15:34:29] <maroloccio> I could but in this project I can't
[15:35:39] <b0nn> DI in Go doesn't really use frameworks, it's a matter of having a type that you inject with concrete instances and your code calls the methods on the fields of that type
[15:35:44] <maroloccio> It would be nice for DI to do this tactical replacement for me, declaratively, based on the parameter it picks up upon initialisation, replacing X for Y in the composed structs and all calls so that either everything or nothing is replaced
[15:36:18] <maroloccio> b0nn so you are saying that it's just a struct field assignment (actually, replacement) in practice?
[15:39:16] <b0nn> pretty much
[15:39:53] <b0nn> When you construct the struct for prod, you inject the prod stuffs, when you construct it for testing, you inject the mock
[15:39:54] *** Joins: OMGOMG (~bobrobert@poppy.ifi.uio.no)
[15:41:51] <maroloccio> b0nn that is what I am doing right now, actually. As it's probably evident from my text above. Well.. thanks!
[15:42:02] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:42:24] <b0nn> https://play.golang.org/p/sHFJVUp-dXD
[15:43:10] <b0nn> Forgive my Fifth Element reference
[15:43:24] <maroloccio> I tried refactoring some test code into its own package but when I try to import it from a test func in another package it tells me that the test fixtures package only contains "test Go files", because I called the files *_test.go
[15:43:51] <b0nn> hmm my example doesn't put the Foo into a struct :(
[15:44:16] <b0nn> Yeah, you cannot import from test files
[15:44:50] <b0nn> I am going to hit the sack, there are more helpful people that come and go, so feel free to ask questions
[15:45:06] <b0nn> er feel free to keep asking questions
[15:46:34] *** Quits: irq0 (~seri@amy.irq0.org) (Quit: WeeChat 2.8)
[15:46:53] <maroloccio> b0nn thank you
[15:46:57] <maroloccio> b0nn I did read your example
[15:49:52] <maroloccio> b0nn I see that you used an interface to be able to replace concrete structs implementing it
[15:49:57] <maroloccio> I was watching for a minute the 5th El. reference I had not picked up on :)
[15:49:57] <maroloccio> b0nn good night :)
[15:50:22] <A_Dragon> night b0nn
[15:59:19] *** Joins: noonien (~noonien@user/noonien)
[16:04:44] <A_Dragon> maroloccio: can ask questions still of me if you have any
[16:10:41] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 252 seconds)
[16:11:07] <maroloccio> A_Dragon thank you. If I create packages for use by tests only, such as fixtures/{database,networking}, if I name the files in them as *_test.go when I can't see them as imports, even exported LikeThis. Should these files have non-_test.go names and will be stripped by the compiler when building the prod binary as they are not called through any
[16:11:07] <maroloccio> code path not started by the test runner?
[16:12:17] <A_Dragon> they likely wont be included but if you want to be super sure you can use a build constraint
[16:12:35] <A_Dragon> but they shooould be accessable during tests I think
[16:12:42] <A_Dragon> how are you checking for access during export?
[16:12:50] <A_Dragon> access during export? that makes zero sense
[16:12:52] *** Quits: usr123 (~usr123@124.253.247.25) (Read error: Connection reset by peer)
[16:12:54] <A_Dragon> how are you checking they're exported
[16:13:15] *** Joins: usr123 (~usr123@125.62.116.254)
[16:14:08] *** Parts: sweb (~sweb@static.187.181.76.144.clients.your-server.de) ()
[16:16:49] <maroloccio> I assume an identifier at file-level (such as a var or func or const, ...) named starting with a capital letter is..
[16:17:21] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1000)
[16:18:39] *** Joins: gggp_ (~gggp@125.33.93.73)
[16:19:40] <A_Dragon> yep! will be exported
[16:19:49] <A_Dragon> are you not getting access to these things during `go test`?
[16:21:40] *** Quits: gggp (~gggp@221.219.70.91) (Ping timeout: 246 seconds)
[16:26:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 244 seconds)
[16:26:19] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1000) (Quit: ZNC 1.8.2 - https://znc.in)
[16:26:55] <maroloccio> A_Dragon it might be something with the specific IDE I am using to do the refactoring, trying to use some built-in features that simplify it programmatically, which isn't the typical dev environment for this project. Investigating..
[16:27:26] <A_Dragon> yeah thats what I was asking about, try it in an actual running test, it might be exported then
[16:27:35] <A_Dragon> its an extension on build constraints
[16:27:38] <A_Dragon> what IDE are you using?
[16:29:25] <maroloccio> Me: IDEA. In the project: vim-go, VS Code, emacs.
[16:29:37] <A_Dragon> with gopls for all of them?
[16:29:37] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:29:45] <A_Dragon> oh idea wont be
[16:29:56] <maroloccio> What do you mean by "an extension on build constraints"?
[16:30:16] <A_Dragon> go has a build constraint system to say `only build this file when $thing is true`
[16:30:57] <A_Dragon> oh no sorry it isnt
[16:31:02] <A_Dragon> ` When compiling packages, build ignores files that end in '_test.go'. `
[16:31:12] <A_Dragon> but still it might be something applying that logic weirdly
[16:32:28] *** Quits: gggp_ (~gggp@125.33.93.73) (Quit: Leaving)
[16:32:48] *** Joins: gggp_ (~gggp@60.10.194.47)
[16:34:07] <maroloccio> Thank you
[16:34:10] *** Joins: gggp__ (~gggp@114.245.111.21)
[16:37:22] *** Quits: gggp_ (~gggp@60.10.194.47) (Ping timeout: 240 seconds)
[16:38:36] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[16:39:24] *** Joins: yoonkn (~user@175.197.208.79)
[16:46:09] *** Joins: Crassus (~Crassus@user/crassus)
[16:47:30] <A_Dragon>  /go opers
[16:47:32] <A_Dragon> whoops
[16:48:38] *** Joins: iateadonut (~dan@121.177.17.154)
[16:50:23] <iateadonut> i'm trying to get a package into the go docs.   i went here and did 'go get' ~/go/pkg/mod/gonum.org/v1/gonum@v0.9.3
[16:50:33] <iateadonut> and that put the documentation for gonum in go doc.
[16:50:59] <iateadonut> BUT, none of the other packages are in the go doc.
[16:51:15] <iateadonut> d'oh.  yes, they are.  i was doing 'go doc gonum stat' rather than 'go doc stat'
[16:52:03] *** gggp__ is now known as gggp
[16:56:24] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Read error: Connection reset by peer)
[16:59:02] *** Quits: hendry (~hendry@210.23.22.2) (Quit: WeeChat 3.1)
[16:59:02] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[16:59:41] *** Joins: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com)
[17:00:46] *** Joins: andlabs (~andlabs@71.190.119.164)
[17:04:20] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:08:39] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:11:38] *** llorllale1 is now known as llorllale
[17:12:34] *** Parts: bsandro (~bsandro@139.138.197.56) ()
[17:16:14] *** Parts: iateadonut (~dan@121.177.17.154) ()
[17:19:21] *** Quits: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com) (Quit: MrFantastik)
[17:23:18] *** Joins: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com)
[17:26:32] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[17:26:54] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Quit: WeeChat 3.2)
[17:27:10] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[17:27:21] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Client Quit)
[17:29:14] *** Joins: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748)
[17:30:33] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[17:35:52] *** Quits: LiftLeft (~LiftLeft@154.21.114.88) (Ping timeout: 246 seconds)
[17:36:24] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Remote host closed the connection)
[17:40:55] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[17:41:28] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[17:43:58] *** Joins: Yukkuri (~user@mayoinochikurin.eientei.org)
[17:45:07] <Yukkuri> hi, is there a standard library function that can copy bytes from reader to writer data in chunks no more than set size? misleadingly, io.CopyBuffer can avoid using provided buffer if ReadFrom/WriteTo is involved.
[17:46:02] <A_Dragon> you could wrap your pair such that they use a buffer you control for ReadTo/WriteTo, or wrap them such that they dont provide ReadTo/WriteTo
[17:46:49] <Yukkuri> thanks, guess that can be an option.
[17:46:56] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[17:49:57] <A_Dragon> yeah
[17:50:03] <A_Dragon> or your own copy impl, I guess
[17:50:06] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[17:50:19] *** Quits: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748) (Remote host closed the connection)
[17:50:25] *** Joins: hendry (~hendry@210.23.22.2)
[17:50:35] *** Joins: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748)
[17:51:52] *** Quits: cmagina_ (sid286142@id-286142.highgate.irccloud.com) (Changing host)
[17:51:52] *** Joins: cmagina_ (sid286142@user/cmagina)
[17:51:52] *** cmagina_ is now known as cmagina
[17:52:07] *** Joins: mmfood (~mmfood@45.91.21.37)
[17:53:25] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[17:59:47] *** Quits: sus (thelounge@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[18:00:15] *** Joins: sus (thelounge@user/zeromomentum)
[18:00:26] *** Joins: Eddward (~Eddward@207.138.204.132)
[18:04:12] *** Quits: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com) (Quit: MrFantastik)
[18:04:23] *** Joins: LiftLeft (~LiftLeft@212.102.59.186)
[18:06:08] *** Joins: src (~src@user/src)
[18:10:47] *** Quits: maroloccio (~marolocci@200.187.188.82) (Quit: Client closed)
[18:11:50] *** Joins: arcatech (~arcatech@user/arcatech)
[18:12:58] *** Quits: usr123 (~usr123@125.62.116.254) (Read error: Connection reset by peer)
[18:13:21] *** Joins: usr123 (~usr123@124.253.1.73)
[18:14:58] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:bd11:e5f5:4ef9:b465) (Ping timeout: 240 seconds)
[18:16:15] *** Quits: gggp (~gggp@114.245.111.21) (Remote host closed the connection)
[18:16:22] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:bd11:e5f5:4ef9:b465)
[18:16:44] *** Joins: gggp (~gggp@60.10.194.47)
[18:18:45] *** Quits: gggp (~gggp@60.10.194.47) (Remote host closed the connection)
[18:19:13] *** Joins: gggp (~gggp@60.10.194.47)
[18:26:46] <eyJhb> Weird question. I have a loop with rows, ie. `for i := 0; rows.Next(); i++ { ... }`, and want to check if it runs at least once. Woud it be that cruel/not optimized to just place a `var hasRows bool`, and set that in the for loop? Which would mean it would be set each time the loop runs? ie. 10.000 iterations
[18:28:53] <nevivurn> eyJhb: I don't see anything wrong with doing that, and I don't see it hampering performance that much in most cases.
[18:30:37] <eyJhb> Going with that then. Tried just setting `i` outside the loop, and using i == 0, to see if it didn't run. But.. Looked quite ugly, and had some edge case in the logic where it wouldn't work.
[18:30:43] <eyJhb> Thanks nevivurn++
[18:38:52] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 244 seconds)
[18:40:31] *** Joins: gggp_ (~gggp@60.10.194.47)
[18:41:05] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[18:42:39] *** Quits: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:43:02] *** Quits: gggp (~gggp@60.10.194.47) (Ping timeout: 252 seconds)
[18:43:18] <bpalmer> eyJhb: although it may or may not do it, it's fully legal for the compiler to notice that it's set only the first time and partially unroll the loop so the first time is dealt with separately
[18:45:19] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[18:46:04] <eyJhb> Would be cool if it did that. Could I verify that somehow bpalmer ?
[18:46:16] <eyJhb> `go build main.go`, and then gdb?
[18:46:42] <A_Dragon> godbolt could help with that
[18:47:15] *** Joins: Garb0 (~Garb0@user/garb0)
[18:48:11] *** gggp_ is now known as gggp
[18:52:15] <sztanpet> also sounds like insane microoptimizing
[18:52:24] <A_Dragon> agreed
[18:53:59] <eyJhb> Well, at some point I just became curious about it
[18:54:04] *** Joins: dr0n (~nabromov@92.40.255.112.threembb.co.uk)
[18:54:09] <eyJhb> But I do agree.
[18:54:25] <eyJhb> I think my reflects are of much larger impact :p
[18:55:19] <sztanpet> oh sure, some rabbit holes just need to be went down in
[18:56:08] <eyJhb> It was also a... It just seems stupid to set this every time I run the loop
[18:56:18] <A_Dragon> just uh, dont use it as a reason to do $obscureThingThatMayOrMayNotHelpPerformanceSometimesDependingOnWhetherOrNotMarsIsVisibleAndSillyThingsLikeThat
[18:56:23] *** Quits: darkmuggle (darkmuggle@here.for-the.chat) (Changing host)
[18:56:23] *** Joins: darkmuggle (darkmuggle@redhat/darkmuggle)
[18:56:26] <A_Dragon> then set it once if i == 0 :P
[18:56:33] <A_Dragon> whether or not thats faaster than setting it once
[18:56:38] <A_Dragon> ask the compiler :P
[18:57:21] <eyJhb> But... Code SHOULD run faster when Mars is visible, right?
[18:57:49] <A_Dragon> depends, did you say a prayer to Mars before entering the ~~battlefield~~ IDE?
[18:58:35] <eyJhb> But at that point, the code would also become ugly. But eh, yes, whatever :p I did end up just sitting it each time :) I am comparing code to someone else, doing a similar project. And this is... Just nice-to-have. They have full on race conditions :p
[18:58:39] <eyJhb> Of course I did A_Dragon
[19:00:25] <A_Dragon> in latin?
[19:02:09] <A_Dragon> either way
[19:02:21] <A_Dragon> your code will be exactly the same speed (compiler bugs notwithstanding) either way
[19:02:36] <A_Dragon> we added a Martian compensator
[19:06:11] *** Joins: gggp_ (~gggp@125.33.84.224)
[19:06:26] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:07:09] *** Joins: kulak (~kulak@user/kulak)
[19:08:58] *** Quits: gggp (~gggp@60.10.194.47) (Ping timeout: 240 seconds)
[19:12:34] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 240 seconds)
[19:14:32] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:14:40] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[19:17:40] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[19:19:21] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:20:31] *** Joins: arcatech (~arcatech@user/arcatech)
[19:25:07] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[19:27:07] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:28:29] *** Joins: arcatech (~arcatech@user/arcatech)
[19:30:15] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[19:37:02] *** Joins: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs)
[19:38:38] *** Joins: Ox151 (~user@user/ox151)
[19:40:22] <LambdaComplex> A_Dragon: I'm a Leo, not an Aries; will this affect my code's performance?
[19:40:58] *** Parts: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) ()
[19:41:22] <Ox151> hello, I have a server where some media such as pictures, audo, video are viewed. The links from the meida are from their source and no the server. How could I setup a proxy so my server will route those links through the server itself to the client? eg... source is https://somesource.com/public/image.jpg on the frontent the link to that image after the server routes it would be https://myserver.com/routed/image.jpg
[19:42:21] <LambdaComplex> 074AABZX6: maybe this? https://golang.org/pkg/net/http/httputil/#ReverseProxy
[19:42:56] <nevivurn> Something like Request -> (your custom request mapping function that changes request paths and whatever) -> ReverseProxy as ^ said
[19:43:04] <siXy> Ox151: you could use the http lib to proxy it but... why? nginx/varnish will do it for you with much less effort.
[19:43:06] <LambdaComplex> n.b. i'm assuming you're trying to do this all in code since you're asking #go-nuts, but it may be possible that setting up nginx and putting it in front of your go program might also be the best choice
[19:43:33] <LambdaComplex> also oops i pinged the wrong person because O and 0 are different things
[19:43:36] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:43:36] * LambdaComplex regrets nothing
[19:43:50] *** Joins: mickey (~user@user/mickey)
[19:44:20] <Ox151> siXy: right now ngix is logging the ip of the individuals clients viewing the media wereas I would rather have the server that the client is using be the one that the source logs the ip.
[19:45:05] <Ox151> siXy: also want to have it supported server specific instead of users setting up nginx config
[19:45:06] <nevivurn> Nginx can be configured to add a X-Forwarded-For header that you parse on your server
[19:45:17] <siXy> ^ X-Forwarded-For is what you want.
[19:45:30] *** Joins: arcatech (~arcatech@user/arcatech)
[19:45:33] <siXy> It's a standard header used for exactly this
[19:46:47] <LambdaComplex> >the server that the client is using
[19:46:51] <LambdaComplex> but the client _is_ using nginx
[19:46:52] <LambdaComplex> ???
[19:47:09] <LambdaComplex> if "sending requests to" is a valid definition of "using"
[19:47:32] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[19:48:32] <Ox151> client -> ServerA, convent pulled from ServerA has references to other servers. When client pulls from ServerA its ip is logged on ServerB,C,D..... if links are referenced. I want ServerA to be the one seen on ServerB,C,D.... and not the client
[19:48:42] <Ox151> content is pulled**
[19:49:19] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[19:49:23] <siXy> then just disable XFF and it'll work fine.
[19:49:29] <siXy> No need to write code for this.
[19:49:47] <LambdaComplex> yeah it really sounds like this problem should 100% be solved in nginx and 0% solved by writing Go code
[19:49:56] <LambdaComplex> (as nice as having an http reverse proxy in the standard library is)
[19:50:11] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:52:47] <Ox151> ok thanks ill look into that soultion. While that might be the easiest, id there a way to disable XFF with golang? My reasoning is server operator might not change the default NGINX and could be getting more information on users than they should be.
[19:52:57] <Ox151> is there a way*
[19:54:34] <nevivurn> The net/http package doesn't do anything with XFF headers by default, you would need to write extra code to make it do anything with them / produce them.
[19:54:44] <LambdaComplex> are you asking if your Go code (which is being used as a backend for an nginx reverse proxy) can stop nginx from setting a specific header?
[19:54:55] *** Joins: oxum (~oxum@106.201.34.214)
[19:55:01] <A_Dragon> ^(it cant)
[19:55:18] <LambdaComplex> A_Dragon: shhhh, i'm using the Socratic method to show how silly it is :P
[19:55:26] <A_Dragon> lol
[19:55:28] <LambdaComplex> i think gorilla/handlers has a handler for XFF
[19:55:37] <LambdaComplex> although it's probably easy enough to write yourself
[19:55:43] <LambdaComplex> https://pkg.go.dev/github.com/gorilla/handlers?utm_source=godoc#ProxyHeaders
[19:55:43] <Ox151> LambdaComplex: yeah fair point.
[19:56:05] <siXy> I find it somewhat hard to believe that in your environment it's totally impossible to change the nginx config, but deploying and running arbitrary binaries is totally fine.
[19:56:07] <LambdaComplex> Ox151: at a certain point, you have to trust the people who are configuring your application to not _completely_ suck
[19:56:31] <nevivurn> Or ship the entire configuration, nginx and all.
[19:57:52] <shadowchaser> siXy i have it like that at my work, these are binaries produced by me, but i could actually use anything
[19:59:06] <shadowchaser> siXy for instance, i have no rights to configure new service, but once it's active i can replace its files at will
[19:59:29] *** Quits: oxum (~oxum@106.201.34.214) (Ping timeout: 252 seconds)
[20:01:20] *** Joins: kadoban (~kadoban@user/kadoban)
[20:01:22] *** Joins: psydroid (~psydroid@user/psydroid)
[20:02:24] <siXy> shadowchaser: I would characterise that as "deeply silly"
[20:02:35] <shadowchaser> siXy and i agree completely
[20:03:34] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Read error: No route to host)
[20:08:32] <A_Dragon> exceedingly, deeply, silly
[20:09:19] *** Joins: arcatech (~arcatech@user/arcatech)
[20:10:16] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[20:10:24] *** Quits: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs) (Remote host closed the connection)
[20:11:04] *** Joins: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs)
[20:13:00] *** Quits: usr123 (~usr123@124.253.1.73) (Read error: Connection reset by peer)
[20:13:23] *** Joins: usr123 (~usr123@124.253.109.138)
[20:13:43] *** Quits: LiftLeft (~LiftLeft@212.102.59.186) (Ping timeout: 246 seconds)
[20:14:21] *** Quits: flommi (~flommi@puck942.startdedicated.de) (Ping timeout: 252 seconds)
[20:14:38] *** Joins: flommi (~flommi@puck942.startdedicated.de)
[20:15:22] <LambdaComplex> well it sounds like you should open a ticket with whomever configures your reverse proxies/load balancers
[20:15:29] <LambdaComplex> :P
[20:19:12] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:22:43] *** Joins: oxum (~oxum@106.201.34.214)
[20:22:48] *** Joins: andlabs (~andlabs@71.190.119.164)
[20:24:08] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:7053:bb63:fdaa:21d2)
[20:27:32] *** Quits: oxum (~oxum@106.201.34.214) (Ping timeout: 252 seconds)
[20:27:36] *** Joins: LiftLeft (~LiftLeft@154.21.114.17)
[20:27:52] *** Joins: Garb0 (~Garb0@user/garb0)
[20:31:02] *** Joins: gggp__ (~gggp@60.10.194.47)
[20:32:07] *** gggp__ is now known as gggp
[20:33:29] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Quit: Leaving.)
[20:33:29] *** Quits: gggp_ (~gggp@125.33.84.224) (Ping timeout: 252 seconds)
[20:36:04] *** Joins: kdsch (~kdsch@86.106.143.221)
[20:40:56] *** Joins: Danishman (~Allan@2-104-144-110-cable.dk.customer.tdc.net)
[20:41:27] *** Joins: oxum (~oxum@106.201.34.214)
[20:45:46] *** Quits: oxum (~oxum@106.201.34.214) (Ping timeout: 240 seconds)
[20:47:10] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[20:48:05] *** Joins: noarb- (~noarb@user/noarb)
[20:48:49] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 265 seconds)
[20:58:07] *** Joins: goldfish (~goldfish@user/goldfish)
[20:58:12] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7)
[21:01:31] *** Quits: jinks (~jinks@2001:470:1f18:3aa:1d8:0:1c:34ac) (Ping timeout: 268 seconds)
[21:01:54] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 240 seconds)
[21:02:39] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Quit: Leaving)
[21:02:55] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[21:04:49] *** Joins: leah2 (~leah@vuxu.org)
[21:06:09] *** Joins: gggp_ (~gggp@125.33.95.57)
[21:07:18] *** Joins: jinks (~jinks@104.161.79.77)
[21:07:45] *** Quits: gggp (~gggp@60.10.194.47) (Killed (NickServ (GHOST command used by gggp_!~gggp@125.33.95.57)))
[21:07:49] *** gggp_ is now known as gggp
[21:09:14] *** Quits: avakand (~root@static.164.226.201.195.clients.your-server.de) (Quit: WeeChat 3.1)
[21:09:29] *** Joins: avakand (~root@static.164.226.201.195.clients.your-server.de)
[21:11:05] *** Joins: THEMD (~chatzilla@108.62.211.193)
[21:12:42] *** Quits: THEMD (~chatzilla@108.62.211.193) (Remote host closed the connection)
[21:13:14] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7) (Quit: Client closed)
[21:18:08] *** Quits: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs) (Remote host closed the connection)
[21:19:36] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:25:38] *** Quits: treethought (treethou@138.68.49.251) (Remote host closed the connection)
[21:26:44] *** Joins: treethought (treethou@138.68.49.251)
[21:31:04] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 246 seconds)
[21:34:47] *** Quits: dr0n (~nabromov@92.40.255.112.threembb.co.uk) (Quit: WeeChat 2.8)
[21:35:30] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[21:35:41] *** Joins: dr0n (~nabromov@159.48.53.203)
[21:39:11] *** Quits: l2dy (~l2dy@user/l2dy) (Ping timeout: 256 seconds)
[21:44:43] *** Joins: pepee (~user@user/pepee)
[21:50:29] *** Quits: gggp (~gggp@125.33.95.57) (Ping timeout: 252 seconds)
[21:56:48] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[21:56:54] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:57:40] *** Joins: kulak (~kulak@user/kulak)
[21:58:49] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7)
[21:59:39] *** Joins: oxum (~oxum@106.201.34.214)
[22:03:47] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[22:04:11] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:04:38] *** Quits: oxum (~oxum@106.201.34.214) (Ping timeout: 272 seconds)
[22:06:05] *** Joins: kulak (~kulak@user/kulak)
[22:11:47] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:13:01] *** Quits: usr123 (~usr123@124.253.109.138) (Read error: Connection reset by peer)
[22:13:25] *** Joins: usr123 (~usr123@124.253.108.128)
[22:16:13] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:16:58] *** Joins: kulak (~kulak@user/kulak)
[22:19:04] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7) (Quit: Client closed)
[22:19:25] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:19:44] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7)
[22:20:24] *** Joins: kulak (~kulak@user/kulak)
[22:24:48] *** Quits: iauc (~iauc@ti0061a400-1478.bb.online.no) (Quit: Client closed)
[22:27:53] <mikoto-chan> how should I approach dynamic paths for my web applications?
[22:28:20] *** Joins: kdschu (~kdsch@89.45.224.143)
[22:29:07] <mikoto-chan> I want to serve people a temporary webpage but idk where I should call the http.HandleFunc() in my program, it doesn't seem to be working atm since I have to restart my entire webserver once a request is received
[22:29:14] <mikoto-chan> are methods the solution?
[22:29:55] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[22:29:56] <A_Dragon> handle / and delegate out from there
[22:31:16] *** Quits: kdsch (~kdsch@86.106.143.221) (Ping timeout: 246 seconds)
[22:33:12] <bpalmer> mikoto-chan: what do you mean by "temporary webpage" ?
[22:33:51] <bpalmer> you want to serve a temporary webpage for the next week or two while you work on the real thing? you want to serve a user something like a 'Looking up your address now...' page before it refreshes to another?
[22:34:25] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 246 seconds)
[22:35:14] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:35:40] *** Joins: kulak (~kulak@user/kulak)
[22:41:03] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d)
[22:48:03] <mikoto-chan> bpalmer: an address that is created once a specific action is triggered
[22:49:07] <mikoto-chan> for example I want to creat the path /blog/why-cats-are-awesome if it's international cat day
[22:49:19] <mikoto-chan> I have a function that checks every 24 hours whether today is cat day
[22:49:29] <mikoto-chan> that might sound like a really stupid use case but just carry on with me
[22:49:30] *** Quits: qrpnxz (~qrpnxz@user/qrpnxz) (Ping timeout: 240 seconds)
[22:50:24] <mikoto-chan> A_Dragon: can you give an example in the playground?
[22:50:55] <A_Dragon> okay lets break this problem down a bit
[22:50:57] <bpalmer> mikoto-chan: the simplest way is to have a single handler func that handles all requests (or all under a particular path like /blog/), and then checks that path against something like the database ot see if that URL should be valid.
[22:51:01] <A_Dragon> ^
[22:51:17] <A_Dragon> why do you need that path to only exist on the aforementioned day?
[22:53:04] <mikoto-chan> A_Dragon: because the site content is garbage that fills up my disk, deleting it manually would be too much of a bother
[22:53:16] <A_Dragon> I
[22:53:19] <A_Dragon> but
[22:53:29] <mikoto-chan> yes?
[22:53:35] <A_Dragon> ....removing the path doesnt make the data vanish?
[22:53:43] <jemaclus> are you making the html pages manually?
[22:53:46] <A_Dragon> and regardless you could let it 404 in that case, no?
[22:53:58] <mikoto-chan> A_Dragon: sure, but at the end of the function everything gets deleted too
[22:54:04] <mikoto-chan> I would end up with too much subpaths
[22:54:06] <bpalmer> mikoto-chan: if you're deleting the data, consider writing a function that just checks if the data exists; if so , serves it. If not, it delivers a 404
[22:54:12] <mikoto-chan> that might pose a problem too
[22:54:14] <A_Dragon> rather than dynamic creating routes
[22:54:21] <bpalmer> that way you don't have to ever think in terms of "temporary pages"; simply "does the data exist?"
[22:54:22] <mikoto-chan> are routes meant to be static?
[22:54:36] <mikoto-chan> wait
[22:54:43] <mikoto-chan> I think I have been doing something wrong all this time
[22:54:46] <A_Dragon> not specifically but you;re way overcomplicating this
[22:55:10] <jemaclus> You can do a route like "/blog/{slug}" and then you figure out what {slug} is and look that up in the database and serve it
[22:55:10] <kodah> mikoto-chan: rather than registering a new route on the given day, and thus requiring a web server restart on most commonly available resources, it might be a better idea to register the route permanently and only return a 200 on the given day that is pertinent for the page.
[22:55:34] *** Quits: usr123 (~usr123@124.253.108.128) (Quit: Leaving)
[22:55:41] *** Quits: habys (~habys@2603:3001:bd9:f1:1337:f1ac:d00d:17c) (Quit: byye)
[22:56:00] <kodah> you can also miss the cronjob with that setup
[22:56:35] *** Quits: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748) (Ping timeout: 252 seconds)
[22:56:37] <mikoto-chan> jemaclus: yes that's what I had first
[22:56:48] <mikoto-chan> is that a good idea?
[22:56:59] <jemaclus> yes
[22:57:07] <A_Dragon> better solution than mine or removing routes repeatedly
[22:57:09] <mikoto-chan> kodah: a fileserver might come in handy since the pages that I need are static
[22:57:18] <jemaclus> your database can have three columns: slug, starts_at, ends_at
[22:57:41] <mikoto-chan> but I'd have to prevent people to go to /about/ and read all the files in there
[22:57:49] *** Joins: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748)
[22:57:50] <mikoto-chan> wasn't there some function IsDir that could prevent this?
[22:58:03] <A_Dragon> please dont roll your own file serving
[22:58:04] <kodah> mikoto-chan: file servers are really for static assets, and although an HTML document can be a static resource that would forever categorize it as static. you could accomplish the same thing with go templates.
[22:58:09] <jemaclus> then you just check to see:  slugExistsInDB(slug) && time.Now().After(startsAt) && time.Now().Before(endsAt) in the handler, and if all of those pass, then you render the view, otherwise you return a 404.
[22:58:57] <jemaclus> hmm. I think you fundamentally misunderstand what we're saying here.
[22:59:15] <jzelinskie> are there any alternatives to goimports? seems like there are lots of alternative linters and formatters
[22:59:19] <kodah> jemaclus: seems like they're just learning about what the underlying components of web serving are
[22:59:27] <A_Dragon> I personally like gofmpt jzelinskie
[22:59:38] <A_Dragon> it does imports, returns, formatting (stricter than gofmt)
[22:59:42] <kodah> jzelinskie: gofumpt and gofumports
[22:59:48] <A_Dragon> oh fumpt
[22:59:51] <A_Dragon> thats it
[22:59:57] <A_Dragon> yeah both of those are great
[22:59:59] <jemaclus> kodah: sounds like it.
[23:00:36] <kodah> jemaclus: this is pretty frequent with go users, ime. most programmers have been exposed to very full featured web servers that don't require much manual composition.
[23:00:57] <jzelinskie> thanks, is gofumports a different project?
[23:01:12] <jzelinskie> i found gofumpt on github
[23:01:27] <A_Dragon> if you're using vscode as your ide it can use it OOTB
[23:01:41] <kodah> intellij as well ^
[23:01:44] <jemaclus> yup
[23:02:01] <jzelinskie> i'm setting up a CI pipeline
[23:02:47] <A_Dragon> I would suggest NOT autoformatting code as part of CI, rather complain that its not formatted, lest some weird bugs sneak in
[23:03:05] <jzelinskie> that's what i'm doing
[23:03:28] <jzelinskie> not my first rodeo, just not aware of the current popular third party tooling
[23:03:37] *** Quits: marlinc (~marlinc@user/marlinc) (Ping timeout: 256 seconds)
[23:04:03] <A_Dragon> alright :D just wanted to verify
[23:04:08] *** Joins: marlinc (~marlinc@user/marlinc)
[23:04:17] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 252 seconds)
[23:04:33] <A_Dragon> the "proper" way would maybe be fmt straight, but fumpt and co do make the code look a lot nicer imo
[23:04:51] <kodah>  gofumports is a bit more opinionated, fyi
[23:04:58] <kodah> i like it, some might not
[23:05:18] <jzelinskie> goimports is not opinionated enough for us right now and also just has bugs where it doesn't detect package names correctly
[23:05:32] <kodah> oh interesting
[23:05:36] *** Joins: fputs (~fputs@137.220.33.212)
[23:06:07] <A_Dragon> yeah fumpt is VERY opinionated
[23:06:14] <A_Dragon> it just happens that its opinions align with mine
[23:06:19] <A_Dragon> spaces around blocks and such
[23:06:58] <A_Dragon> you could also run golangci-lint on it jzelinskie
[23:07:07] <A_Dragon> to really get a long list of complaints
[23:07:11] <mikoto-chan> jemaclus: I'll be back soon. I'm not actually serving HTML. maybe that was the mistake here but a fileserver seems the solution.
[23:07:30] <A_Dragon> mikoto-chan: if you do so check http.FileServer
[23:07:34] *** Joins: oxum (~oxum@106.201.34.214)
[23:07:34] <jzelinskie> i'm actually trying to migrate away from golangci-lint, it tries to do too much and their github action uses its own install of go
[23:07:45] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:07:45] <A_Dragon> dont roll your own, as directory traversal will find you wanting
[23:07:49] <A_Dragon> jzelinskie: ah okay
[23:07:49] <mikoto-chan> maybe a library where I have /books/ with files like /books/golang.pdf would be a better example, in case I don't need the path anymore I can simply delete the file
[23:08:18] *** Quits: sizeof_void34 (~Thunderbi@109-252-76-37.nat.spd-mgts.ru) (Quit: sizeof_void34)
[23:08:34] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7) (Quit: Client closed)
[23:11:10] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[23:11:59] *** Quits: kdschu (~kdsch@89.45.224.143) (Quit: WeeChat 2.8)
[23:11:59] *** Quits: oxum (~oxum@106.201.34.214) (Ping timeout: 252 seconds)
[23:15:50] <mikoto-chan> so ... how do I return an error whenever a user tries to access /books/ ?
[23:16:08] <mikoto-chan> the collection is meant to be private :p
[23:19:08] <bpalmer> mikoto-chan: in the handler you've registered for /books/  , check that the rest of the path is not empty.
[23:20:38] <mikoto-chan> bpalmer: thanks again like always.
[23:21:19] <kodah> does the built in file server allow custom listing?
[23:21:26] <mikoto-chan> another thing that I've noticed is that running my startWebServer function prevents the rest of my program from running, is this normal? it returns an http.Serve(address, nil)
[23:21:28] <bpalmer> I don't remember whether go's default FileServer handles autoindexing directories or not.
[23:21:52] <kodah> mikoto-chan: yes. it's running in a loop waiting to handle requests
[23:22:47] *** Joins: hwm4rgs (~hwm4rgs@user/hwm4rgs)
[23:22:49] <mikoto-chan> kodah: do I need goroutines to escape the loop?
[23:22:51] *** Joins: l2dy (~l2dy@user/l2dy)
[23:23:32] <kodah> meh, yeah, but the full answer is a lot further than that. you'll probably want to handle signals or ad-hoc shut downs of the server too
[23:24:31] <mikoto-chan> let's try by putting the function at the end of my main function
[23:24:31] <jzelinskie> gofumpt is great, thanks everyone
[23:24:38] <jzelinskie> gofumpt + revive is all you really need
[23:25:06] <mikoto-chan> can I write functions over multiple lines btw? in C we have
[23:25:08] <mikoto-chan> \\
[23:25:10] <mikoto-chan> for this
[23:25:12] <mikoto-chan> uh \ sorry
[23:25:34] <kodah> mikoto-chan: if you throw the web server in it's own goroutine you'll need to handle blocking closure of the application
[23:25:37] <ikke> mikoto-chan: implicitly, when the sttement is not finished
[23:26:07] <mikoto-chan> kodah: that's what I was afraid of
[23:26:34] <kodah> mikoto-chan: if you handle the signal, you can block with a channel
[23:26:53] *** Joins: s-video (~s-video@2601:196:4b00:e70:107e:e81a:dc01:883a)
[23:28:48] *** Quits: s-video (~s-video@2601:196:4b00:e70:107e:e81a:dc01:883a) (Client Quit)
[23:30:23] *** Joins: s-video (~root@c-73-17-214-8.hsd1.ma.comcast.net)
[23:31:35] <s-video> /exit
[23:31:49] *** Quits: s-video (~root@c-73-17-214-8.hsd1.ma.comcast.net) (Client Quit)
[23:32:07] *** Joins: s-video (~s-video@2601:196:4b00:e70:107e:e81a:dc01:883a)
[23:36:12] <mikoto-chan> kodah: works amazingly! why would I want to block my web server?
[23:36:21] <mikoto-chan> any articles on goroutines on the web?
[23:36:34] <mikoto-chan> "on the web" as in "using goroutines in web programming"
[23:36:45] <kodah> mikoto-chan: you don't block the web server, you block the application from exiting while your web server is running
[23:37:45] <mikoto-chan> kodah: application is a little vague to me ...
[23:37:54] <kodah> mikoto-chan: main func
[23:38:17] <kodah> mikoto-chan: i haven't read this all the way through, but the sample code seems to get it: https://rafallorenz.com/go/handle-signals-to-graceful-shutdown-http-server/
[23:44:56] <mikoto-chan> bpalmer: how would I convert `http.Handle("/resources/", http.StripPrefix("/resources", fileServer))` to an http.HandleFunc to check in my function for an empty path? I just tried it but ended up with a segfault :(
[23:45:02] <mikoto-chan> kodah: let me see
[23:46:03] <ikke> mikoto-chan: when the main function returns, the program will exit, even though there might still be goroutines running
[23:47:10] <mikoto-chan> ikke: so we can block main from exiting with signals?
[23:49:20] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[23:52:17] <A_Dragon> yes, you can add signal handlers
[23:52:38] <ikke> mikoto-chan: signals are what you send to a program to do something, like existing
[23:52:40] <ikke> exiting*
[23:53:49] <ikke> https://dev.to/syossan27/how-to-implement-a-signal-handler-in-go--582c
[23:54:09] <ikke> I guess the idea is that you wait on a channel until a signal is received
[23:54:18] <mikoto-chan> ikke: https://stackoverflow.com/questions/40716869/prevent-access-to-files-in-folder-with-a-golang-server
[23:54:37] <mikoto-chan> there doesn't seem to be an easy way to hide the contents of the directory with an http.FileServer call ://
[23:55:51] <mikoto-chan> I don't want the books to be accessible through the /books/ directory
