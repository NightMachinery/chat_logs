[00:45:25] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[02:32:07] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:03:15] *** Joins: eqf0[m] (~eqf0matri@2001:470:69fc:105::1:331a)
[04:35:19] *** Joins: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e)
[04:39:03] <BrokenClutch> hehehe, I'm really thinking on using stm for event handling
[04:39:17] <BrokenClutch> How bad is it going to be?
[04:39:47] <ManofLetters[m]> surely not worse than using IO
[04:41:37] <BrokenClutch> almost used FRP, but it's too beeg
[04:44:38] <ManofLetters[m]> FRP is learning yet another programming language, a very specialized one
[04:45:00] <ManofLetters[m]> even more so that using lens
[04:45:38] <ManofLetters[m]> both are great, but not essential IMHO
[04:47:04] <BrokenClutch> stm will get things more organized (I'm lying to myself, I'm gonna use because I think it's fun)
[04:48:19] <ManofLetters[m]> stm is cool, but not of that caliber at all; just a nifty Haskell concurrency API
[04:48:28] <ManofLetters[m]> much safer than IO
[04:48:32] <ManofLetters[m]> a bit harder
[04:48:48] <BrokenClutch> When you say IO, are you say those MVar thingies?
[04:48:57] <ManofLetters[m]> yep, and similar
[04:49:11] <BrokenClutch> oh, It blocks too much for gemes
[04:49:23] <BrokenClutch> But I think it's much easier too
[04:50:20] <ManofLetters[m]> it's easier until you attempt to debug a race condition or a deadlock
[04:51:58] <ManofLetters[m]> I mean IO is easier
[04:52:06] <ManofLetters[m]> to write, but not read/debug
[04:52:08] <BrokenClutch> When shit's working
[04:52:15] <ManofLetters[m]> yep :)
[08:43:54] *** Parts: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e) ()
[12:30:10] *** Quits: schell[m] (~schellmat@2001:470:69fc:105::1:fa) (Quit: You have been kicked for being idle)
[13:02:17] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:49:18] *** Joins: __monty__ (~toonn@user/toonn)
[14:26:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[16:21:11] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[18:30:51] <f-a> https://github.com/flareteam/flare-game/commit/bb8a687c686864c904a0bc511c1c1ec38dd21e7c this is what 2022 Polish looks like ManofLetters[m] 
[18:31:09] <f-a> (most likely some automated script forgot to put spaces in newlines)
[18:59:07] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[19:01:03] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[20:23:28] <ManofLetters[m]> oh dear, so mangled
[20:24:50] * f-a nods
[20:24:59] <f-a> btw flare is an awesome FOSS game
[20:25:14] <ManofLetters[m]> not turn-based ;/
[20:25:38] <f-a> it is Diabloish
[20:25:41] <f-a> but with nice new ideas
[21:18:24] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:49:40] <EvanR> you can use MVars in games for particular enginey aspects, blocking is the whole point of MVars
[21:50:31] <EvanR> for instance a side thread could be waiting for a (small) response from a server, at which point it wakes up and rudely interrupts the action to do something
[21:51:12] <EvanR> combining multiple MVars for some nefarious purpose probably means you need STM though
[21:53:42] <EvanR> or if the main thread's only purposes is to wait until the application is finished, then die, it could be taking () from an MVar. Basically you need multiple threads in any case for it to make sense
