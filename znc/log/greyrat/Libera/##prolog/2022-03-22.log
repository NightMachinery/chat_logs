[01:03:09] *** Quits: rogersm (~rogersm@90.166.180.250) (Remote host closed the connection)
[01:05:18] *** Joins: rogersm (~rogersm@90.166.180.250)
[01:09:31] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 245 seconds)
[01:42:41] *** Joins: TCZ (~tcz@91.150.178.124)
[01:45:05] *** Quits: wacki (~wacki@87.122.80.7) (Quit: Leaving.)
[01:48:01] *** Quits: seabre_ (~seabre@user/seabre) (Quit: ZNC 1.8.2 - https://znc.in)
[01:49:28] *** Joins: seabre (~seabre@user/seabre)
[02:10:21] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[02:15:01] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[02:24:05] *** Quits: pbmagi (~Thunderbi@host-92-14-106-162.as13285.net) (Ping timeout: 256 seconds)
[02:33:15] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[02:55:26] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[03:03:17] <Celelibi> Have some of you used a theorem prover like Vampire?
[03:07:28] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:08:49] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[03:09:23] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:13:57] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 252 seconds)
[03:23:57] <aindilis> Celelibi: yes
[03:30:51] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:35:24] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 252 seconds)
[03:36:32] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:38:45] <Celelibi> I have a few questions. I'm trying to learn how to use vampire. Because it is usually well ranked in the CASC competition. ^^
[03:39:10] <Celelibi> As an exercise I try to prove basic facts about graphs.
[03:39:51] <Celelibi> But I can't seem to be able to make it show a model when the conjecture is not satisfiable.
[03:40:11] <aindilis> ?
[03:40:49] <aindilis> an unsatisfiable problem has no model
[03:40:53] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 252 seconds)
[03:41:00] <aindilis> am I misunderstanding?
[03:42:59] <Celelibi> Depends on the conjecture. But maybe I'm not using the right words.
[03:43:39] <aindilis> Here is something useful: http://www.tptp.org/TPTP/TPTPTParty/2007/PositionStatements/GeoffSutcliffe_SZS.html
[03:44:36] <aindilis> https://en.wikipedia.org/wiki/G%C3%B6del%27s_completeness_theorem
[03:44:38] <Celelibi> Like, I have arc(a, b) & arc(b, c). And I ask: is there an X such that arc(a, X) & arc(X, c) is true.
[03:45:02] <aindilis> oh
[03:45:21] <aindilis> well you need to somehow display bindings, not every Vampire version does.  Which one are you on?
[03:46:23] <Celelibi> Vampire 4.6.1
[03:46:29] <aindilis> hrm one sec
[03:50:41] <aindilis> building, one sec
[03:52:39] <Celelibi> It's probably not relevant, but I modified the CMakeFile a bit to link with the Z3 installed from the debian packages.
[03:52:51] <aindilis> nice, can you share?
[03:53:02] <aindilis> I'm just building without z3
[03:57:42] <Celelibi> It's basically these two lines: find_package(PkgConfig REQUIRED) pkg_check_modules(Z3 REQUIRED z3)
[03:58:14] <Celelibi> If Z3 wasn't found initially.
[03:59:11] <aindilis> ./vampire_rel --show_options on
[03:59:27] <aindilis> -qa might be relevant idk
[03:59:56] <aindilis> wow they are not messing around
[04:00:13] <aindilis> `-sa fmb` might do something
[04:01:13] <aindilis> if you're willing to use an ancient version of vampire, it has bindings for variable
[04:01:14] <aindilis> *s
[04:04:46] <aindilis> https://github.com/mayfrost/Vampire <- this might be it, it's vampire-kif, you'd need to import problems in KIF most likely, wrapped in XML.
[04:05:38] <Celelibi> I tried fmb, it doesn't seem to do what I want.
[04:05:53] <aindilis> https://github.com/aindilis/freekbs2/blob/master/KBS2/Reasoner/Vampire.pm
[04:06:07] <aindilis> https://github.com/aindilis/freekbs2/blob/master/KBS2/Reasoner/Vampire.pm#L132
[04:06:35] <aindilis> the disadvantage of this version is before every query you must load the entire KB
[04:07:02] <aindilis> if you just need this quick and dirty, you could check out the Panoply Vagrant VM
[04:07:07] <aindilis> it has all this running
[04:08:40] <aindilis> in a few minutes I'm going to bbl
[04:09:02] <aindilis> anything else I can help with before I leave?
[04:09:22] <aindilis> https://app.vagrantup.com/aindilis/boxes/frdcsa-panoply-git-20200329
[04:10:06] <Celelibi> If I need anything I'll leave a message. ^^
[04:10:10] <aindilis> kk o/
[04:19:48] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:964:33b9:5b34:486d)
[04:19:48] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:964:33b9:5b34:486d) (Changing host)
[04:19:48] *** Joins: skapata (~Skapata@user/skapata)
[04:24:09] *** Quits: quernd (~quernd@boethin.uberspace.de) (Quit: Ping timeout (120 seconds))
[04:24:29] *** Joins: quernd (~quernd@boethin.uberspace.de)
[04:39:39] *** Joins: talismanick (~talismani@2601:644:8500:8350::5496)
[04:51:44] <talismanick> Has anyone compiled TerminusDB from source lately?
[04:52:17] <talismanick> It fails with a bunch of "Illegal multibyte sequence" errors when it gets to iana.pl
[04:53:56] <Celelibi> Looks like a unicode decoding error.
[04:56:16] <Celelibi> I don't know terminusDB, but you could look at the source. If it's some non-ascii letters in the code, try converting it to utf-8.
[05:18:53] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[05:37:51] *** Joins: rogersm (~rogersm@90.166.180.250)
[05:42:02] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 240 seconds)
[06:00:42] *** Joins: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz)
[06:13:50] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:28:22] *** Quits: bocaneri (~bismilah@about/linux/staff/sauvin) (Ping timeout: 250 seconds)
[06:28:29] *** Joins: bocaneri (~bismilah@li889-61.members.linode.com)
[06:40:07] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:40:42] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[06:45:53] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[06:58:55] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[07:40:54] *** Joins: pikrzysz1of (~kris@leaf.dragonflybsd.org)
[07:41:29] *** Quits: pikrzysztof (~kris@leaf.dragonflybsd.org) (*.net *.split)
[07:55:40] *** Quits: millido (~millido@84.210.150.128) (Read error: Connection reset by peer)
[08:09:54] *** Joins: millido (~millido@84.210.150.128)
[08:15:55] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:17:05] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[08:20:33] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:21:30] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[08:26:13] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[08:50:37] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[09:38:59] *** Joins: rogersm (~rogersm@90.166.180.250)
[09:43:57] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 268 seconds)
[09:51:59] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[09:56:49] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[10:32:16] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:16:39] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:47:44] *** Joins: wacki (~wacki@87.122.80.7)
[11:47:55] *** Quits: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[11:55:52] *** Joins: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz)
[12:11:52] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:24:20] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:24:55] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[12:29:37] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[12:40:27] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[12:47:41] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:4242:d6b8:d93f:54e5)
[13:15:23] <Celelibi> aindilis, actually, maybe fmb is what I'm looking for. It's just that the output model is much more contrived than I hoped.
[13:23:30] <Celelibi> I'll also need to find a nice way to tell it that the domain of my predicates is finite and what I write is all there is.
[13:29:03] <Celelibi> But for now I'm off to bed. ^^
[13:42:57] *** pikrzysz1of is now known as pikrzysztof
[14:35:59] *** Quits: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz) (Read error: Connection reset by peer)
[14:45:27] *** Joins: Graham31415 (~Graham314@5.33.52.156)
[14:48:05] <Graham31415> Why are there so many Prolog implementations (relative to e.g. number of programmers)?
[14:53:55] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:56:25] <pikrzysztof> maybe because it's easy to make one?
[15:06:40] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:07:12] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[15:07:20] <Graham31415> You mean, like implementing a Lisp is so easy such that most people that learn the language try writing one?
[15:21:47] *** Joins: pbmagi (~Thunderbi@host-92-14-106-162.as13285.net)
[15:32:39] *** Joins: TCZ (~tcz@91.150.178.124)
[16:20:56] <rogersm> Implementing a new language is a well defined (and interesting) problem. Doing a business app not so much :)
[16:25:09] *** Joins: Lycurgus (~juan@98.4.112.204)
[16:26:02] *** Quits: Graham31415 (~Graham314@5.33.52.156) (Quit: Ping timeout (120 seconds))
[16:39:16] *** Joins: puts (~tcz@91.150.178.124)
[16:40:44] *** Quits: TCZ (~tcz@91.150.178.124) (Read error: Connection reset by peer)
[16:45:48] *** Quits: puts (~tcz@91.150.178.124) (Ping timeout: 240 seconds)
[16:57:35] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[17:10:36] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:11:11] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[17:15:24] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[17:20:22] *** Joins: Graham31415 (~Graham314@5.33.52.156)
[17:31:45] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[18:11:54] <sennomo> It might be a sign of age, too. The longer a language exists, the more time there is for people to create yet another implementation.
[18:18:05] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:23:53] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:4242:d6b8:d93f:54e5) (Quit: WeeChat 2.8)
[18:26:49] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[18:29:53] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:31:33] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[18:34:25] *** Joins: TCZ (~tcz@91.150.178.124)
[18:54:54] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:4242:d6b8:d93f:54e5)
[19:12:37] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:24:25] *** Quits: TCZ (~tcz@91.150.178.124) (Ping timeout: 256 seconds)
[19:27:16] *** Joins: TCZ (~tcz@91.150.178.124)
[19:32:01] *** TCZ is now known as TCZ12345
[19:32:21] *** TCZ12345 is now known as ide_se_czesc
[19:32:44] *** Quits: ide_se_czesc (~tcz@91.150.178.124) (Quit: Leaving)
[19:53:02] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:53:39] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[20:00:25] *** Joins: cmsmcq (~cmsmcq@65.19.36.46)
[20:05:24] *** Quits: Graham31415 (~Graham314@5.33.52.156) (Quit: Client closed)
[20:13:31] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[20:13:37] *** Joins: yauhsien_ (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[20:18:07] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:f52e:1e16:af5a:322a)
[20:18:07] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:f52e:1e16:af5a:322a) (Changing host)
[20:18:07] *** Joins: skapata (~Skapata@user/skapata)
[20:22:32] *** Quits: millido (~millido@84.210.150.128) (Ping timeout: 240 seconds)
[20:23:15] *** Joins: millido (~millido@84.210.150.128)
[20:27:09] *** Joins: Graham31415 (~Graham314@5.33.52.156)
[20:35:55] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:4242:d6b8:d93f:54e5) (Quit: WeeChat 2.8)
[21:07:38] *** Joins: econo (uid147250@user/econo)
[21:07:58] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[21:10:24] *** Joins: Lycurgus (~juan@98.4.112.204)
[21:26:43] *** Quits: Graham31415 (~Graham314@5.33.52.156) (Quit: Client closed)
[21:34:57] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:52:24] <Celelibi> C is also an old language and has many implementations too. But very little variations in the implementations. They all adhere to the standard or are not called C.
[21:56:25] *** Joins: Graham31415 (~Graham314@5.33.52.156)
[21:56:36] *** Quits: talismanick (~talismani@2601:644:8500:8350::5496) (Ping timeout: 240 seconds)
[21:56:39] <yauhsien_> hahha! because c is neither as old as lisp nor as good as it.
[22:03:07] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:04:19] <Celelibi> That's subjective. ^^
[22:04:56] <Celelibi> But maybe it's also much more widespread and implementations can't afford incompatibilities.
[22:10:56] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[22:17:38] *** Quits: yauhsien_ (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:19:55] *** Joins: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net)
[22:20:11] <pbmagi> Perhaps it's because C is an industry language where variation from a standard is considered failure. Whereas LISP came from academia, where novelty is rewarded and referencing sources is a both a requirement and adds credibility to your work.
[22:22:10] <Graham31415> There aren
[22:22:53] <Graham31415> 't that many C books that show how to implement a C compiler. Whereas Lisp books love that. (and do it in a short amount of code)
[22:24:27] <Graham31415> Writing a Lisp interpretter is a good (and logical) way to understand Lisp. Is the same true of Prolog? Does it provide some major depth of understanding?
[22:24:32] *** Quits: yauhsien (~yauhsien@61-231-22-192.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[22:25:21] <Graham31415> (and implementing prolog in prolog doesnt count)
[22:27:03] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:30:00] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[22:30:44] *** Joins: ns12 (~ns12@user/ns12)
[22:33:21] *** Quits: Graham31415 (~Graham314@5.33.52.156) (Quit: Client closed)
[22:38:16] *** Joins: Graham31415 (~Graham314@5.33.52.156)
[22:42:33] <rogersm> Graham31415: I don't know. I recall when I learnt Prolog in my university course, the teacher was keen not to explain how Prolog (cuts and unification) were implemented.
[22:43:07] <rogersm> And it was extremely difficult for me to understand prolog.
[22:43:34] <rogersm> At that time I was already a proficient programmer, so when I finally understood the details of unification and how cuts are implemented, everything make sense to me.
[22:43:43] <rogersm> But I assume my case is highly unusual
[23:01:52] *** Quits: Graham31415 (~Graham314@5.33.52.156) (Quit: Client closed)
[23:16:37] *** Joins: Surobaki (~Surobaki@43.84-2-80.static.virginmediabusiness.co.uk)
[23:21:15] *** Joins: Graham31415 (~Graham314@5.33.52.156)
[23:25:52] <Surobaki> I've been trying to do some natural language parsing for my schoolwork and I got to a simple DCG rule of the form you can see in the Gist here (https://gist.github.com/Surobaki/df2bdc0344bbf4b5cfdb58acb4f97166), but as you can see by the output it tries to look for a definition of n/3. I'm not that great at Prolog so I don't fully understand what
[23:25:52] <Surobaki> may be happening on the proof finding side of things. It's clearly trying to find the n/3 predicate, which exists and can be produced by finding the [Noun] that fulfils the lexical condition of lex/4, but it's as if it's trying to go beyond. Could someone with some time have a look at this by any chance? I've got extra (seemingly unrelated) clauses
[23:25:53] <Surobaki> in my larger file but I don't think they interact. Thanks for your time, whoever is interested
[23:32:03] <Graham31415> I only started learning a week or so ago, but I'll bite: try running the query `phrase(foo, _).` where foo is something you've not defined.
[23:32:32] <Graham31415> You'll get an error about the nonexistence of foo/2.
[23:33:06] <Graham31415> Which means that a DCG predicate has two implicit arguments.
[23:33:56] <Graham31415> You defined your predicate with 3 arguments, plus the 2 implicit args makes the predicate `n/5` (which couldn't be found).
[23:34:24] <Graham31415> Sorry, n/3 couldnt be found. But there is a n/5.
[23:35:26] <Graham31415> You're querying with only one argument to `n` though: `phrase(n(N), [apples])`. Don't you mean to query it with the 3 arguments you defined it with? (leaving `phrase` to pass the implicit args)
[23:41:33] <Surobaki> Wow! Thanks! You're right, I just needed to specify the implicit ones. Appreciate it!
[23:45:06] *** Quits: Haxxa (~Haxxa@202-130-210-100.ip4.superloop.com) (Quit: Haxxa flies away.)
[23:47:23] *** Joins: Haxxa (~Haxxa@202-130-210-100.ip4.superloop.com)
[23:48:06] <Celelibi> rogersm, in my experience, people tend to present prolog only as a declarative language and explain it in terms of logic. And while it is true, you won't be able to do anything useful with it without understanding that it's a depth-first search.
[23:48:24] <Celelibi> And that's where the cuts are useful.
[23:52:33] *** Joins: rgrinberg (~textual@2806:102e:18:c0c1:a896:63f7:5249:df28)
[23:52:38] <Celelibi> I don't remember being taught unification either. But it came naturally.
