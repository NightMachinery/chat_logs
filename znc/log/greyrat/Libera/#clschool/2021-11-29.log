[00:11:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:44:52] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[01:10:59] *** Joins: dra (~dra@2a04:4540:640f:ce00:d8ab:d926:222e:d25f)
[01:12:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:29:14] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[01:36:50] *** Quits: dra (~dra@2a04:4540:640f:ce00:d8ab:d926:222e:d25f) (Remote host closed the connection)
[01:57:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:31:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:36:11] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 245 seconds)
[03:48:46] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[03:49:18] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[03:49:42] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[04:30:39] *** Joins: Oladon (~olad@98.43.81.226)
[05:55:24] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[06:04:56] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[06:06:44] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[06:06:56] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[06:23:21] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[07:24:28] *** Quits: sts-q (~sts-q@212.53.219.185) (Ping timeout: 260 seconds)
[07:35:12] *** Joins: sts-q (~sts-q@212.53.219.178)
[07:47:52] *** Quits: waleee (~waleee@h-82-196-111-63.na.cust.bahnhof.se) (Quit: WeeChat 3.3)
[08:13:38] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 265 seconds)
[08:17:58] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[08:56:19] <CodeBitCookie[m]> Hello Everyone!
[08:56:28] <beach> Hello CodeBitCookie[m].
[08:57:14] <CodeBitCookie[m]> Hey beach. I was looking for a way to set an array to another array without copying its elements and using pointers. I want to do this because I am building a radix sort.
[08:57:38] <CodeBitCookie[m]> Also just for knowledge.
[08:57:44] <beach> You can use :DISPLACED-TO for that.
[08:58:46] <CodeBitCookie[m]> Nice. Thanks beach .
[08:59:09] <beach> Sure.
[08:59:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:02:28] <CodeBitCookie[m]> One more thing, most uses of pointers are covered by common lisp itself right? 
[09:02:38] <CodeBitCookie[m]> like atleast the implementation.
[09:02:56] <CodeBitCookie[m]> ... optimizes the code to contain pointers?
[09:03:39] <beach> I don't understand the question.  Common Lisp doesn't have the concept of a pointer, but it uses what I call "uniform reference semantics" meaning that it is as if every object is manipulated through a reference to it.
[09:11:13] <CodeBitCookie[m]> Ohhh, so it just uses pointers without the hassle of us having to deal with it.
[09:11:33] <beach> You can put it that way.  
[09:11:54] <CodeBitCookie[m]> Another thing, When I create a package using `defpackage` like this:
[09:12:02] <CodeBitCookie[m]> (defpackage euler-cl
[09:12:02] <CodeBitCookie[m]>   (:use :cl :str :iterate :cl-punch)); :gtwiwtg 
[09:12:02] <CodeBitCookie[m]> (in-package :euler-cl)
[09:12:02] <beach> The compiler can do what it wants as long as this "illusion" (= semantics) is preserved. 
[09:12:36] <beach> It is a bad idea to :USE any package other than the COMMON-LISP package.
[09:14:26] <CodeBitCookie[m]> beach: I mean, I can understand removing `:str` but i need to :USE `:iterate`
[09:15:05] <beach> You don't have to.  But like I said the other day, that is an argument against the use of that package. 
[09:15:21] <beach> But you had a question there?
[09:15:21] <CodeBitCookie[m]> cl-punch is just so for the ^() syntax
[09:15:28] <CodeBitCookie[m]> yeah, so
[09:15:58] <CodeBitCookie[m]> it has the problem with using :USE, package (symbol?) conflicts
[09:16:25] <CodeBitCookie[m]> I want to say that I want to prefer the package iterates symbols over everything else
[09:16:26] <beach> That's why it is a bad idea to :USE any package other than the COMMON-LISP package.
[09:16:41] <CodeBitCookie[m]> When i searched this up it gave me shadowing-imports
[09:16:52] <beach> Yes, that's the typical solution.
[09:17:03] <mfiano> That's not the only reason
[09:17:03] <CodeBitCookie[m]> but that doesn't seem to work with me
[09:17:07] <CodeBitCookie[m]> ``(shadowing-import 'iterate 'euler-cl)``
[09:17:12] <mfiano> It puts an extreme burden on readers of your code
[09:17:18] <beach> mfiano: Indeed.
[09:17:23] <mfiano> I don't dare read code that does so
[09:17:30] <mfiano> I immediately say "next"
[09:17:46] <beach> CodeBitCookie[m]: Use :shadowing-import-from in your defpackage form.
[09:18:03] <CodeBitCookie[m]> beach: and then remove the :use?
[09:18:20] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[09:18:23] <beach> CodeBitCookie[m]: mfiano is right though.  If I read someone's code and I can't tell what package a symbol comes from, I tend to move on to something else.
[09:18:46] <CodeBitCookie[m]> beach: mfiano even if its just one package?
[09:18:51] <mfiano> Yes
[09:18:55] <CodeBitCookie[m]> which is really common such as iterate or alexandria?
[09:19:05] <mfiano> It makes no sense with PLNs available widespread, anyway.
[09:19:23] <beach> CodeBitCookie[m]: If it is just one package, there should be no problem, unless that package defines symbols with the same name as in the COMMON-LISP package, which my packages often do.
[09:19:49] <CodeBitCookie[m]> mfiano: What are PLNs?
[09:20:09] <CodeBitCookie[m]> beach: okay, that seems like the solution, but what about alexandria
[09:20:21] <beach> CodeBitCookie[m]: My recommendation would be to remove all :USE except for the COMMON-LISP package, and use LOOP instead of ITERATE.
[09:20:46] <beach> CodeBitCookie[m]: I have seen the A: Package Local Nickname used for Alexandria.
[09:20:46] <CodeBitCookie[m]> but I really like iterate ;(
[09:21:23] <CodeBitCookie[m]> beach: how can I do that?
[09:21:28] <beach> CodeBitCookie[m]: Again, unless ITERATE defines names that clash with those in COMMON-LISP, you should have no problem with :USE
[09:21:56] <beach> CodeBitCookie[m]: It's an extension to the language accepted by almost all implementations now.
[09:22:40] <CodeBitCookie[m]> beach: it says package A does not exist.
[09:22:50] <beach> CodeBitCookie[m]: Try your favorite search engine for package-local nicknames and Common Lisp.
[09:23:17] <beach> Or grep for it in some source code like SICL.
[09:24:14] <beach> https://github.com/robert-strandh/SICL/blob/master/Code/Boot/packages.lisp line 5
[09:24:17] <CodeBitCookie[m]> so i see it used like this: ``(:local-nicknames (#:a #:alexandria.dev.0)``
[09:24:26] <CodeBitCookie[m]> what's up with the dev.0?
[09:24:47] <beach> I wouldn't know.
[09:25:10] <beach> I say don't include it.  Just #:alexandria.
[09:26:46] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[09:26:54] <st_iron> good morning
[09:27:25] <CodeBitCookie[m]> Wait! This is amazing, I was `:USE`ing package `:GTWIWTG` because of its long name! I can just use a nickname. Thanks beach and mfiano  
[09:27:39] <beach> Hello st_iron.
[09:27:48] <beach> CodeBitCookie[m]: Pleasure.
[09:27:49] <CodeBitCookie[m]> Hello st_iron
[09:28:44] <beach> CodeBitCookie[m]: So with PLNs you can have both advantages: short package prefixes and a clear indication of the origin of your symbols.
[09:29:17] <beach> ... and no symbol conflicts, of course. 
[09:29:41] <CodeBitCookie[m]> Oh, Package Local Nicknames.
[09:32:02] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[09:32:02] *** Quits: |3b| (bbb@user/3b/x-2324788) (*.net *.split)
[09:32:03] *** Quits: copec (~copec@schrodbox.unaen.org) (*.net *.split)
[09:32:03] *** Quits: bldr_ (~bull@185.117.72.168) (*.net *.split)
[09:32:09] *** Joins: bldr (~bull@185.117.72.168)
[09:32:09] *** Joins: MetaYan_ (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[09:32:53] *** Joins: |3b| (bbb@user/3b/x-2324788)
[09:32:58] <CodeBitCookie[m]> Here is my new and improved `defpackage`:
[09:32:59] * CodeBitCookie[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/38c788751093664ce93fab8064f9e5c7076f3661
[09:33:34] *** Joins: copec (~copec@schrodbox.unaen.org)
[09:38:25] *** Joins: treflip (~user@95.79.32.99)
[09:48:37] <beach> The shadowing-import-from doesn't serve any purpose.
[09:49:13] <beach> You are importing no symbols, so you can remove it.
[09:51:15] <CodeBitCookie[m]> Ok.
[10:00:57] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:09:12] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Remote host closed the connection)
[10:09:28] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[10:37:44] *** Joins: spiaggia (~user@2a01:cb19:150:3400:7104:5438:907c:6e0a)
[11:33:52] *** Quits: spiaggia (~user@2a01:cb19:150:3400:7104:5438:907c:6e0a) (Quit: ERC (IRC client for Emacs 26.3))
[11:47:01] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[12:00:04] *** Quits: treflip (~user@95.79.32.99) (Quit: it's time to work >_<)
[12:18:30] *** Joins: random-nick (~random-ni@87.116.180.220)
[12:19:47] <CodeBitCookie[m]> I have a question, Is there a thing like reduce which only accepts one argument? 
[12:20:05] <beach> What would it do?
[12:20:10] <CodeBitCookie[m]> Maybe I can do this with reduce but can't think of a way. Here is the problem I am trying to solve:
[12:21:11] <CodeBitCookie[m]> I want to multiply N by itself X number of times but MOD it with A each time I multiply N by itself.
[12:21:49] <beach> Can't you just MOD it in the end?
[12:22:08] <CodeBitCookie[m]> I am working with very big numbers. 
[12:22:14] <CodeBitCookie[m]> It is slow to do that.
[12:24:03] <beach> (loop for result = n then (mod (* result n)) repeat x finally (return result))
[12:24:06] <beach> Something like that.
[12:24:20] <beach> I could be off by 1 step.
[12:25:20] * beach now fully expects "but I was hoping there would be something built in"
[12:26:22] <CodeBitCookie[m]> Actually, I firmly believe reduce can do this.
[12:26:39] <CodeBitCookie[m]> it has an :initial-value and everything like that.
[12:26:50] <CodeBitCookie[m]> I feel like it can do that.
[12:26:51] <beach> But why would you do that?  Then you have to allocate memory to hold stuff.
[12:27:34] <CodeBitCookie[m]> what do you mean? isn't writing reduce is just shorter
[12:27:41] <CodeBitCookie[m]> s/is//
[12:28:16] <beach> http://www.lispworks.com/documentation/HyperSpec/Body/f_reduce.htm#reduce
[12:28:26] <beach> The second argument is a sequence.
[12:28:34] <beach> But you don't have a sequence.
[12:28:43] <CodeBitCookie[m]> I couldn't figure out the problem with your loop but this works:
[12:28:46] <pjb> CodeBitCookie[m]: but reduce takes a list. You'd have to (make-list x :initial-element x) which allocates a lot of useless temp memory.
[12:28:57] <beach> Only N, X, and A.
[12:28:58] <CodeBitCookie[m]> (iter (repeat 373)
[12:28:58] <CodeBitCookie[m]> 			(with result = 1)
[12:28:58] <CodeBitCookie[m]> 			(setf result (mod (* result 23) 747))
[12:28:58] <CodeBitCookie[m]> 			(finally (return result)))
[12:29:12] <beach> So then you have to allocate a sequence to hold stuff so that you can use REDUCE.
[12:29:13] <CodeBitCookie[m]>  * ```... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/0cd37e4a60288d2d1ecdf05d6a4bcc6a3ddbf6bb)
[12:29:39] <CodeBitCookie[m]> beach: pjb makes sense.
[12:30:38] <pjb> CodeBitCookie[m]: (defun repeat (n fun initial) (if (zerop n) initial (repeat (- n 1) fun (funcall fun initial))))  (repeat x (lambda (result) (mod (* result n) a)) n)
[12:31:31] <pjb> (let ((a 256) (n 2)) (repeat 3 (lambda (result) (mod (* result n) a)) n)) #| --> 16 |# same off-by-1
[12:31:43] <pjb> (let ((a 256) (n 2)) (repeat 3 (lambda (result) (mod (* result n) a)) 1)) #| --> 8 |#  ; better.
[12:33:38] <CodeBitCookie[m]> (repeat 373
[12:33:38] <CodeBitCookie[m]> 		(lambda (result)
[12:33:38] <CodeBitCookie[m]> 		    (mod (* result 27) 747))
[12:33:38] <CodeBitCookie[m]> 		27)
[12:33:43] <CodeBitCookie[m]> gives me the wrong answer
[12:34:28] <CodeBitCookie[m]> Also, this uses recursion.
[12:34:41] <beach> What? and What?
[12:35:42] <CodeBitCookie[m]> beach: ?
[12:36:16] <beach> I see no recursion, and I don't see any final result being accumulated.
[12:36:58] <CodeBitCookie[m]> beach: pjb gave me a function.
[12:37:36] <CodeBitCookie[m]> named repeat, which called itself.
[12:39:53] <CodeBitCookie[m]> beach: Am I saying something dumb?
[12:40:08] <beach> I didn't look at what pjb gave you.
[12:40:16] <beach> I assumed the problem was solved.
[12:42:40] <CodeBitCookie[m]> Well, it was solved but, its interesting to see other solutions. Write now I am writing a macro for iterate
[12:50:35] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 252 seconds)
[13:07:44] *** Joins: random-nick (~random-ni@87.116.165.83)
[15:53:59] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[16:02:22] *** antoszka is now known as antoszka-r
[16:24:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:37:20] <pjb> CodeBitCookie[m]: repeat is recursive, but it's a terminal call, so that in implementations that have TCO, the process is actually iterative.
[16:37:45] <CodeBitCookie[m]> i see.
[16:38:36] <pjb> CodeBitCookie[m]: of course, you can write (defun repeat (n fun initial) (loop for result = initial then (funcall fun result) repeat n finally (return result)))  (let ((a 256) (n 2)) (repeat 3 (lambda (result) (mod (* result n) a)) 1)) #| --> 8 |# 
[16:39:00] <pjb> CodeBitCookie[m]: start with an initial value = 1 since repeat will call n times the function.
[16:39:53] <CodeBitCookie[m]> Yup, Now I am going to say it... I wish this was built in.
[16:47:45] <pjb> CodeBitCookie[m]: there are an infinite number of functions.
[16:47:52] <pjb> They cannot all b built in.
[16:48:04] <pjb> That's why you're programmer, and not librarian.
[17:15:59] *** Joins: treflip (~user@95.79.32.99)
[17:28:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:00:58] <CodeBitCookie[m]> i mean, come on. I have needed this so quite a few times.
[18:01:16] <CodeBitCookie[m]> I like less stuff being built in but yeah.
[18:01:21] <CodeBitCookie[m]> doesn't matter.
[18:02:13] <lisp123> CodeBitCookie[m]: Whats that?
[18:02:20] <lisp123> sorry, this channel isnt logged
[18:03:40] <CodeBitCookie[m]> lisp123: A reduce which takes a function which takes one argument instead of 2
[18:04:01] <CodeBitCookie[m]> > <@code-bit-cookie:matrix.org> ```... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/dbc2a54bc32550c4bb0903338f12801e58063e7b)
[18:04:18] <beach> CodeBitCookie[m]: But what would it do?
[18:05:02] <beach> CodeBitCookie[m]: Apply the first argument to nothing?
[18:05:29] <CodeBitCookie[m]> beach: no, like @mfiano did
[18:05:38] <CodeBitCookie[m]> like:
[18:07:50] <CodeBitCookie[m]> <beach> "But you don't have a sequence." <- beach: you said this remember ^
[18:08:01] <beach> Yes.
[18:08:13] <lisp123> CodeBitCookie[m]: You could probably write it yourself, e.g. (lambda (a b) (....)) and just use the A parameter
[18:09:05] <beach> BUT IT DOESN'T MAKE SENSE TO REDUCE IF YOU DON'T HAVE A SEQUENCE.
[18:09:53] <CodeBitCookie[m]> beach: Chill out man
[18:10:49] <lisp123> I am trying to think of a case where it would actually work, but I can't -> I think you need at least 2 parameters
[18:11:17] <beach> lisp123: Can we please just wait for the explanation of what such a function would do?
[18:12:42] <lisp123> beach: Yes, sure
[18:13:41] <CodeBitCookie[m]> lisp123: beach is right, an example would be: A function that divides a number by 2 until it isn't an integer anymore. We take this final number (which is divided by 2 a whole bunch of times) and return it as the return value of the function.
[18:13:54] <CodeBitCookie[m]> so,
[18:14:34] <CodeBitCookie[m]> (f 200) => 200/2, 100/2, 50/2, = 25 
[18:14:55] <CodeBitCookie[m]> ofcourse, F also takes in a function.
[18:15:00] <CodeBitCookie[m]> s/./:/
[18:16:29] <beach> CodeBitCookie[m]: If F also takes a function, then it has more than one argument.
[18:17:00] <beach> And this operation is nothing that could be called REDUCE, which is why I am asking for a specification.
[18:17:31] <CodeBitCookie[m]> (f 200 #'(lambda (a) ((if (zerop (mod n 2))
[18:17:31] <CodeBitCookie[m]>                                        (/ n 2)
[18:17:31] <CodeBitCookie[m]>                                         nil))))
[18:17:52] <beach> What is n?
[18:18:14] <beach> Still F has more than one parameter.
[18:18:15] <CodeBitCookie[m]> beach: I am talking about the lambda 
[18:18:33] <beach> But you have a variable n that is not bound.
[18:18:34] <CodeBitCookie[m]> beach: I am talking about the lambda 
[18:18:53] <CodeBitCookie[m]> beach: Oops, meant to type a.
[18:19:36] <CodeBitCookie[m]> Fixed version:
[18:20:15] * CodeBitCookie[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/e7a67cefdef985547735b2760750646d42d8ff59
[18:20:37] <beach> This is still an example.  How about a specification?
[18:21:06] <CodeBitCookie[m]> beach: I don't know what a specification is, you mean like in the hyperspec?
[18:21:11] <CodeBitCookie[m]> but I write my own?
[18:21:15] <beach> Yes.
[18:21:31] <beach> Function ONE-ARG-REDUCE, takes one argument.  This argument is a ....  ONE-ARG-REDUCE does ...
[18:40:47] * CodeBitCookie[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/9fa2976bed6d8fd45c2ffdb01e61793f5e43da84
[18:41:05] <CodeBitCookie[m]> Pretty vague but okay?
[18:41:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[18:41:29] <beach> It has two arguments. 
[18:42:31] <CodeBitCookie[m]> Omg, beach FUNC takes 1 argument. Try using reduce with a lambda that takes 1 argument. It requires a lambda that takes 2 arguments, here in the CLHS:
[18:43:02] <beach> You said you wanted something like REDUCE but that takes just one argument.
[18:43:03] <CodeBitCookie[m]> http://clhs.lisp.se/Body/f_reduce.htm
[18:43:07] *** Joins: aeth (~aeth@user/aeth)
[18:43:10] <CodeBitCookie[m]> `` function---a designator for a function that might be called with either zero or two arguments. ``
[18:44:03] <beach> So what you meant is something completely different from what you initially said.
[18:44:23] <CodeBitCookie[m]> <CodeBitCookie[m]> "I am talking about the lambda..." <- beach: ^
[18:44:38] <CodeBitCookie[m]> I know I said something else earlier but I said this 2 times.
[18:45:33] <beach> Fair enough.  But it is still nothing like REDUCE.
[18:46:04] <CodeBitCookie[m]> beach: Valid point, although you are reducing the value again and again.
[18:46:06] <beach> Also, your specification has a problem.  What if NIL is a normal value to return. 
[18:46:38] <beach> Yes, I see what you mean.
[18:46:46] <beach> ... for the first time :)
[18:47:30] <CodeBitCookie[m]> Also I had this in my mind:
[18:47:33] * CodeBitCookie[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/6bb09c4867bde19f39602e443c7621e29335ca08
[18:47:39] <CodeBitCookie[m]> in haskell.
[18:47:57] <CodeBitCookie[m]> nvm
[18:48:03] <CodeBitCookie[m]> WRONG COPY
[18:48:08] <CodeBitCookie[m]> IGNORE
[18:49:24] <CodeBitCookie[m]> beach: Can you give a case where that would be true?
[18:52:08] <beach> I can't think of anything right now, but it is always iffy when NIL is not considered an ordinary value that can be returned. 
[19:00:06] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[19:01:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[19:14:36] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:16:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:18:11] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:20:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:30:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:33:19] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:36:33] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:53:04] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[19:54:43] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:08:12] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:09:33] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:19:12] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:21:21] *** Joins: makomo (~makomo@user/makomo)
[20:44:40] *** Joins: Oladon (~olad@98.43.81.226)
[20:59:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[21:03:38] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:21:38] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[21:28:46] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[21:30:42] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[21:37:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:47:49] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[21:59:58] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:18:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:20:31] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:23:01] *** Joins: x88x88x- (~cheeg@218.212.160.154)
[22:23:33] *** Joins: x88x88x_ (~cheeg@gateway/vpn/pia/x88x88x)
[22:26:01] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 256 seconds)
[22:27:32] *** Quits: x88x88x- (~cheeg@218.212.160.154) (Ping timeout: 252 seconds)
[22:28:38] <pjb> CodeBitCookie[m]: have a look at https://dl.acm.org/doi/pdf/10.1145/359576.359579 then implement a library of functions and higher order functions to make it practical to program in this functional style.
[22:34:27] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:38:17] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:41:34] *** Quits: x88x88x_ (~cheeg@gateway/vpn/pia/x88x88x) (Quit: Using Circe, the loveliest of all IRC clients)
[22:42:52] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[22:43:27] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:45:43] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Read error: Connection reset by peer)
[22:46:52] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[22:54:21] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[23:10:28] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 264 seconds)
[23:34:10] *** Quits: vegai (vegai@kapsi.fi) (Quit: Lost terminal)
[23:38:11] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:44:05] *** Joins: aeth_ (~aeth@user/aeth)
[23:44:06] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[23:44:08] *** aeth_ is now known as aeth
[23:50:08] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[23:55:34] *** Joins: Oladon (~olad@98.43.81.226)
