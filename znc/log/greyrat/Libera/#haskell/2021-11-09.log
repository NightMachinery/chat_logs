[00:00:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:00:48] <[exa]> my current approach: just a list of assignments where the SSA references are replaced by kinda bruijn-like backreferences
[00:01:02] *** Joins: alx741 (~alx741@181.196.68.101)
[00:01:29] *** Quits: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk) (Ping timeout: 250 seconds)
[00:02:36] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[00:03:36] *** Joins: vysn (~vysn@user/vysn)
[00:04:08] *** Joins: zaquest (~notzaques@5.128.210.178)
[00:04:12] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[00:05:24] *** Joins: jespada (~jespada@190.7.36.46)
[00:08:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:540:e191:ad14:68ac) (Remote host closed the connection)
[00:09:42] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[00:10:04] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[00:10:40] *** Joins: pop3 (~pop3@user/pop3)
[00:13:18] *** Quits: Guest27 (~Guest27@2601:281:d480:2ce0::93bd) (Quit: Client closed)
[00:16:46] *** Joins: hippoid (~idris@184.105.6.88)
[00:17:45] <hippoid> :t (<*> id)
[00:17:46] <lambdabot> (a -> a -> b) -> a -> b
[00:18:03] <hippoid> how did all the requirements for Applicative go away?
[00:18:38] <hippoid> I thought there would be some constraint Applicative f in the type of (<*> id)
[00:20:31] *** Quits: mmhat (~mmh@55d4bfe6.access.ecotel.net) (Ping timeout: 244 seconds)
[00:21:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:540:e191:ad14:68ac)
[00:23:18] <[exa]> hippoid: you specialized it to a concrete applicative
[00:23:49] <[exa]> just like here the "requirement" goes away:
[00:23:54] <[exa]> :t (<*> [])
[00:23:55] <lambdabot> [a -> b] -> [b]
[00:24:42] <[exa]> in your particular case the applicative was `Applicative ((->) r)`
[00:24:51] <[exa]> (aka reader)
[00:25:01] <dsal> f <*> g x = f x (g x)
[00:25:57] <hippoid> [exa]: huh. i need to think about that :)
[00:26:07] *** Joins: acidjnk_new (~acidjnk@p200300d0c7404a98889e7e27a4cfa8d6.dip0.t-ipconnect.de)
[00:26:09] <[exa]> hippoid: did you meet the function functor?
[00:26:19] *** Joins: boxscape_ (~boxscape_@i577BCB42.versanet.de)
[00:26:21] <hippoid> is reader functor, reader applicative, and reader functor the same thing?
[00:26:26] <hippoid> [exa]: I don't think so.
[00:26:34] <[exa]> yeah, all ((->) r)
[00:26:45] <hippoid> i meant reader monad for the last one in the list
[00:27:37] <hippoid> so in (<*> id), id needs to unify to the f a, ie the 2nd arg in <*>?
[00:27:50] <[exa]> yep
[00:28:01] <[exa]> and the `f` in that case is `param -> _`
[00:28:15] <[exa]> anyway, intuition:
[00:28:56] <[exa]> the functor works kinda like a box for the function result that you need to "open" by supplying a parameter (it's not a totally good intuition but at least gives the similarity to other container-ish functors)
[00:29:26] <[exa]> :t show <$> (+3)
[00:29:27] <lambdabot> (Show a, Num a) => a -> String
[00:30:20] <hippoid> I think I'm following you, but I don't see how using id for f a unifies to ((->) r)
[00:30:30] <[exa]> the box (+3) expects a numeric parameter and "contains" a numeric, if you `fmap show` the content gets showed so it "contains" a String, in total it's a box that gives you a string if you supply a numeric
[00:30:46] <[exa]> and <*> just kindof gives the parameter to both functions, as dsal showed
[00:31:17] <[exa]> so you can open both boxes at once, and glue them applicatively with something in between
[00:31:18] <hippoid> ok this is ringing a bell, this is S combinator on the type level
[00:31:34] <[exa]> yes, function-ish <*> is precisely S
[00:31:47] *** Joins: gnarlyotter (~gnarlyott@5.151.186.99)
[00:31:59] <hippoid> ok I'm going to play around with this.  Thanks for the tips!
[00:32:20] <[exa]> > ( (,) <$> snd <*> fst ) (1,2)
[00:32:22] <lambdabot>  (2,1)
[00:32:28] *** Joins: pavonia (~user@user/siracusa)
[00:33:25] <[exa]> > ( (+) <$> (+10) <*> (*100) ) 3
[00:33:27] <lambdabot>  313
[00:34:16] <dsal> That's liftA2 if you want more letters and fewer shapes.  :)
[00:34:23] *** Joins: vsklamm (~vsklamm@pppoe.178-66-130-94.dynamic.avangarddsl.ru)
[00:34:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[00:34:27] <dsal> > liftA2 (+) (+10) (*100) 3
[00:34:28] <lambdabot>  313
[00:34:42] <[exa]> I was trying to keep <*> in there :D
[00:35:07] <dsal> Yeah.  TBH, I think of `ap` and  `<*>` and `liftA*` differently for some reason.
[00:35:40] <[exa]> all have niches
[00:35:50] *** Parts: riv (river@tilde.team/user/river) (WeeChat 3.3)
[00:35:52] <[exa]> hippoid: my fav example is RLE:
[00:36:00] *** Joins: cjb (~cjbayliss@user/cjb)
[00:36:07] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[00:36:28] *** Joins: alzgh (~alzgh@user/alzgh)
[00:36:29] <[exa]> > ((,) <$> head <*> length ) $ group "aaabbddddccccccaaaaa"
[00:36:30] <lambdabot>  ("aaa",5)
[00:36:58] <[exa]> oh noes, map missed
[00:37:13] <vsklamm> @undo [(x, y) | x <- xs, y <- ys]
[00:37:13] <lambdabot> concatMap (\ x -> concatMap (\ y -> [(x, y)]) ys) xs
[00:37:23] <[exa]> > map ((,) <$> head <*> length ) $ group "aaabbddddccccccaaaaa"   -- hippoid
[00:37:24] <vsklamm> @undo concatMap (\ x -> concatMap (\ y -> [(x, y)]) ys) xs
[00:37:24] <lambdabot> concatMap (\ x -> concatMap (\ y -> [(x, y)]) ys) xs
[00:37:24] <lambdabot>  [('a',3),('b',2),('d',4),('c',6),('a',5)]
[00:38:55] <[exa]> hippoid: in a related example great for building intuition, try: (drop <> take) 4 "hello world"
[00:38:58] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[00:39:02] *** Joins: mmhat (~mmh@55d4bfe6.access.ecotel.net)
[00:39:53] <hippoid> [exa]: ok, i will!
[00:41:13] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[00:42:21] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[00:42:59] *** Quits: hippoid (~idris@184.105.6.88) (Quit: leaving)
[00:43:25] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[00:43:36] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[00:47:23] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[00:48:25] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c7149f82889e7e27a4cfa8d6.dip0.t-ipconnect.de)
[00:49:09] *** Joins: zaquest (~notzaques@5.128.210.178)
[00:51:24] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[00:51:32] *** Quits: acidjnk_new (~acidjnk@p200300d0c7404a98889e7e27a4cfa8d6.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[00:51:32] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 240 seconds)
[00:51:43] *** Quits: jespada (~jespada@190.7.36.46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:56:33] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:540:e191:ad14:68ac) (Remote host closed the connection)
[00:56:36] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[00:56:57] *** Joins: alzgh (~alzgh@user/alzgh)
[00:59:05] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:540:e191:ad14:68ac)
[01:01:08] *** Quits: gnarlyotter (~gnarlyott@5.151.186.99) (Ping timeout: 256 seconds)
[01:01:08] *** Quits: vsklamm (~vsklamm@pppoe.178-66-130-94.dynamic.avangarddsl.ru) (Remote host closed the connection)
[01:01:26] *** Joins: vsklamm (~vsklamm@pppoe.178-66-130-94.dynamic.avangarddsl.ru)
[01:03:05] <zwro[m]> <dsal> "f <*> g x = f x (g x)" <- hey this is not intuitive
[01:03:27] *** Quits: vsklamm (~vsklamm@pppoe.178-66-130-94.dynamic.avangarddsl.ru) (Remote host closed the connection)
[01:04:14] <dsal> The neat thing about intuition with some of these things is working back from the other direction and seeing where else you might end up.
[01:04:57] <hexology> it's supposed to allow for chaining of effectful operations, right?
[01:08:02] <hexology> the `liftA2` version makes more sense
[01:09:04] <yin> hey this is interesting:
[01:09:33] *** Joins: myme (~myme@40.51-175-185.customer.lyse.net)
[01:09:43] *** Joins: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk)
[01:09:49] *** Quits: myme (~myme@40.51-175-185.customer.lyse.net) (Quit: WeeChat 3.1)
[01:10:19] <yin> > (take <> (:)) 2 [0,1]
[01:10:20] <lambdabot>  [0,1,2,0,1]
[01:10:28] *** Joins: myme (~myme@40.51-175-185.customer.lyse.net)
[01:11:02] *** Quits: cosimone (~user@93-34-133-23.ip49.fastwebnet.it) (Remote host closed the connection)
[01:11:19] <yin> i find this interesting beacause that 2 happens to work on lists of ints and take but
[01:11:27] <yin> > (take <> (:)) 2 "error"
[01:11:28] <lambdabot>  error:
[01:11:28] <lambdabot>      • Couldn't match type ‘Char’ with ‘Int’
[01:11:28] <lambdabot>        Expected type: [Int]
[01:11:36] <yin> this obviously doesn't work
[01:11:55] <Inst> do you know
[01:11:55] <yin> @type (take <> (:))
[01:11:56] <lambdabot> Int -> [Int] -> [Int]
[01:12:02] <[exa]> > (take <> (:)) 1 [0,1]
[01:12:03] <lambdabot>  [0,1,0,1]
[01:12:06] <Inst> if it's possible to natively bind to windows API without using FFI in Haskell?
[01:12:17] <[exa]> confusing in a fun way.
[01:12:49] <[exa]> Inst: FFI is literally there as the only reasonable way for calling the native functions
[01:12:57] <Inst> yeah, i gave up on trying to get native file dialog to work, i also gave up on the entire native file dialog project, it was 60 hours of being dispirited and i'm better off without it
[01:13:37] <Inst> unless you already got a solution and are willing to help re exa
[01:13:46] <[exa]> Inst: the other choices are either hacking a FFI yourself or having a RTS that can do the native call for you
[01:13:55] <[exa]> Inst: what failed btw?
[01:14:02] *** Quits: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[01:14:12] <Inst> i couldn't get nativefiledialog to work
[01:14:26] <Inst> i'd rather work on learning haskell now so i don't feel like a phony
[01:15:03] <[exa]> ah don't worry about that, all portable stuff is hard. :]
[01:15:42] <[exa]> if you have some kind of error log of what precisely failed for you I can have a look
[01:16:03] <Inst> thanks
[01:16:18] <Inst> exa: more interestingly, did YOU get nativefiledialog to wkr?
[01:17:00] <hexology> i'm sure this video has made the rounds a bit https://www.youtube.com/watch?v=UogkQ67d0nY but i have a question specifically about the haskell part. the c++ and python versions of the code performed exactly 1 linear scan over the data, but a naive reading of the haskell version suggests that it makes multiple passes over the data. does it actually make multiple passes, or is ghc able to optimize away the extra passes into something 
[01:17:00] <hexology> closer to the imperative linear version? or would you need to write your own recursive function from scratch, in order to solve the problem in linear time?
[01:17:58] <maerwald> [exa]: https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.Base.html#line-336
[01:18:00] <maerwald> cheeky
[01:18:27] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[01:20:37] <maerwald> I think I've never relied on this instance
[01:21:02] <[exa]> maerwald: it's lovable tho
[01:23:00] *** Quits: ubert (~Thunderbi@p200300ecdf4fca48e6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[01:24:18] <[exa]> Inst: I got it working in C, lemme try with FFI
[01:24:40] <Inst> i also got it worknig in C, I just don't understand how to hack the software apart so I can get a windows implementation
[01:24:43] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[01:24:46] <Inst> btw, exa, thank you for taking the effort for me
[01:25:46] <dsal> :t comparing (snd <> fst) -- maerwald it's pretty useful for stuff like this.
[01:25:47] <lambdabot> (Ord a, Semigroup a) => (a, a) -> (a, a) -> Ordering
[01:26:29] <maerwald> I'd probably rather write it out
[01:26:43] <maerwald> 4 weeks later this small piece of code will waste 10 minutes of my time :p
[01:27:02] *** Joins: Cajun (~Cajun@user/cajun)
[01:27:05] <Inst> and you don't need to take too much time, if it doesn't work, it doesn't work, it's no biggy
[01:27:10] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 244 seconds)
[01:28:13] <dsal> It's super useful when you're defining a comparison for a bunch of fields and you want to sort by them in order.
[01:28:17] <hexology> > (liftA2 (<>) snd fst) ([1,2,3], [4,5,6])
[01:28:18] <lambdabot>  [4,5,6,1,2,3]
[01:28:31] <hexology> > (snd <> fst) ([1,2,3], [4,5,6])
[01:28:32] <lambdabot>  [4,5,6,1,2,3]
[01:29:04] <dsal> > sortBy (comparing snd <> comparing fst) [(3,4), (2,1), (2,3)]
[01:29:06] <lambdabot>  [(2,1),(2,3),(3,4)]
[01:29:29] <[exa]> Inst: ah windows, I'm not very good at that system :D
[01:29:31] <dsal> (which in this case is just swap, but I don't have a record handy)
[01:29:39] <Inst> yup
[01:29:52] <Inst> tbh i wouldn't mind hiring someone, it'd just take more time than needed, fiverr etc
[01:30:21] <[exa]> yeah windows problem require microsoft solutions
[01:30:41] <maerwald> I thought gtk+ kinda works on windows?
[01:30:50] <[exa]> anyway it has to work, did you manage to get any FFI working on windows?
[01:31:07] <[exa]> maerwald: doesn't even need gtk+, the thing's got raw winapi implementation ifdef'd
[01:31:30] <maerwald> what thing
[01:31:37] <Inst> i got capi working with a helloworld file
[01:32:33] <[exa]> maerwald: we're trying to wrap this https://github.com/mlabbe/nativefiledialog to get some kind of reasonable file open functionality over platforms
[01:33:04] <Inst> thank you for trying to help, [exa]
[01:33:29] <maerwald> so you're trying to create bindings
[01:34:06] <[exa]> either that, or just call it reasonably using FFI on windows
[01:34:11] <Cajun> it would be very nice to get native windows support for haskell, but it seems like it would be a bunch of extra work to maintain multiple versions of things and/or upgrade things to also include windows support (like graphics libraries)
[01:34:21] <[exa]> I'm not really into windows stuff. :D
[01:34:58] <Cajun> i cant see not developing on linux and cant see my main os being linux :P
[01:35:52] <[exa]> Cajun: you'd probably work with BSD just as well, but windows...
[01:37:20] <Cajun> well dual booting windows would be an option for things that require it, but i much prefer the UX of windows (bar the annoying updates and privacy issues)
[01:37:35] <Cajun> the complications of switching is too high at this point, which is probably also the case for many otehrs
[01:37:50] <[exa]> I didn't touch that thing since like 2004
[01:37:55] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 256 seconds)
[01:39:36] <maerwald> I'd switch to windows if it had a decent tiling windows WM and was generally less annoying (e.g. a minimal mode that doesn't do sh*t unless I tell it to)
[01:39:40] *** Joins: nvmd (~nvmd@user/nvmd)
[01:39:53] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:40:07] <Cajun> what do you think of the win11 tiling stuff? its a step but its definitely not xmonad
[01:40:10] <boxscape_> maerwald it has a few bugs but I'm reasonably happy with workspacer as a tiling WM for windows
[01:40:49] <maerwald> because I'm rather sick of broken thermal control and broken suspend to ram on linux
[01:40:50] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[01:41:56] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[01:42:09] *** Joins: Cajun (~Cajun@user/cajun)
[01:42:58] <monochrom> Whereas in the case of my laptop, actually windows breaks, linux doesn't. :)
[01:43:24] <maerwald> I've never had working s2ram or thermal control on linux in over 15 years
[01:43:36] <maerwald> (thinkpads)
[01:44:13] <monochrom> (Mine is a Dell Inspiron.)
[01:44:15] <janus> how do you verify whether thermal control is working? i'd like to know if mine is broken
[01:44:29] <maerwald> recently, s2ram works, but after 3 or 4 resumes, the CPU throttling becomes so wonky, that I can't edit source code without input lag anymore
[01:44:38] <maerwald> only a reboot fixes it
[01:44:50] <[exa]> janus: if it overheads af, it's probably not working :D
[01:45:17] <janus> so many webpages take forever to load on this laptop, i thought it was just the web getting heavier
[01:45:32] <janus> but if throttling breaks after suspending, that could explain it too
[01:45:51] <[exa]> maerwald: btw I'm on e585 now, kinda decided that just booting everytime is going to save more time than trying to fix suspend
[01:46:01] <monochrom> I think you can use powertop to make observations.
[01:46:01] <[exa]> (hibernate works tho)
[01:46:15] <Inst> also, exa, random brainfarts: I wonder if Haskell could be used for an honors intro-programming sequence
[01:46:17] <maerwald> wow, hibernate never worked for me, not even on desktop
[01:46:32] <Inst> i.e, used to teach intro-programming alongside data structures / algorithms
[01:46:51] <[exa]> Inst: honors?
[01:47:18] <Inst> in some unis, they have honors classes (i.e, expect better students, better work, etc)
[01:47:38] <Inst> data structures / algorithms are usulaly "weeders" in many unis, to get people to switch majors if they're not cut out for it
[01:47:39] <janus> oh, turns out i had four ghci processes running infinite loops. i thought closing the terminal had killed them o_O
[01:48:15] <monochrom> Does Oxford intro-programming counts as honors? Because they do that. :)
[01:48:23] <Inst> monochrom: really?
[01:48:41] <dolio> Does Strathclyde do that too?
[01:48:45] <monochrom> To be fair, they split "intro programming" into 2 courses: functional programming, imperative programming.
[01:48:50] <[exa]> janus: you need a cpu use widget :D
[01:49:03] <Inst> sorry, gotta go, have something in a few hours
[01:49:12] <[exa]> o/
[01:49:12] <maerwald> janus: see... windows is more persistent there
[01:49:16] <monochrom> But both are 1st-year courses.
[01:49:30] <maerwald> it'll crash your entire OS rather than giving up on background processes
[01:49:31] <Inst> monochrom: but they package datastructures / algorithms into it, right?
[01:49:41] <monochrom> And "Oxford" translates to "honours" :)
[01:49:43] <Inst> since in many unis data structures and algorithms are a separate course whose role is to get people to drop out of CS majors
[01:50:07] <[exa]> we've got formal logic for that
[01:50:17] <Inst> ah i see
[01:50:44] <[exa]> and many other fun courses
[01:51:02] <monochrom> Ah, Oxford has another 1st-year "Design and analysis of algorithms" course.
[01:51:31] <Inst> ah well
[01:51:39] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Remote host closed the connection)
[01:51:44] <Inst> i should learn haskell properly first so i'm not just another blowhard
[01:51:47] <[exa]> anyway people either fail right on the basic data structures because they can't do trees, or don't fail at all through the ~5 other datastructure courses
[01:51:52] <monochrom> https://www.ox.ac.uk/admissions/undergraduate/courses-listing/computer-science#content-tab--2  and scroll down to Year 1
[01:51:56] <dolio> Oh, I guess not. Strathclyde teaches Haskell as a 300 level class.
[01:52:32] <monochrom> Me, I would say that the math courses are the ones that are the most effective in kicking out weak students.
[01:52:42] <Inst> it's just a random brainfart, I suspect if CS programs had honors intro programming with data structures and algorithms
[01:52:43] <Inst> that's weird
[01:52:45] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:52:49] *** Joins: yannl (~yannl@host86-171-10-101.range86-171.btcentralplus.com)
[01:53:01] <Inst> i'm a weak student and i got A- / A on multivar and linear algebra respectively
[01:53:07] <Inst> unless you mean proof-based math
[01:53:21] <dolio> Which I think is the same level my university did it, except it was a survey course on 'all the non-imperative ways to program'.
[01:53:36] <monochrom> Oh, even vanilla "compute these integrals" calculus is already tough enough.
[01:54:07] <monochrom> But of course, don't worry, both Oxford and my uni have a healthy dose of proof courses to make sure!
[01:54:09] <maerwald> math always made me so anxious that I over-learned and then got anxious, because I finished the exam so early that I thought I messed it up
[01:54:11] <[exa]> or "decompose these matrices to something"
[01:54:13] <Inst> yeah monochrom
[01:54:23] <monochrom> (Not to say that my uni is comparing to Oxford! heh)
[01:54:23] <Inst> i have a weak background in profo-based mathematics / geometry
[01:54:32] <Inst> i withdrew from real analysis twice ;_;
[01:55:00] * [exa] hands over a theorem
[01:55:14] <Inst> on the other hand, linear algebra etc feels easier and more intuitive for me, and a professor teaching my Calc 1+2 course (accelerated, summer) told me I was probably an algebraist by nature
[01:55:20] * Inst combusts into flames
[01:55:31] <geekosaur> a bit behind but hibernation worked fine on my previous laptop. (I haven't bothered to test on this one but most things aside from the fingerprint reader seem to work on it.)
[01:55:38] <maerwald> and today, I have zero use of actual maths
[01:55:39] <Inst> so i probably should start with abstract algebra instead
[01:55:47] <monochrom> Here is the thing. The formulas/procedures for doing differentiation by hand is a huge big recursive algorithm. That in itself is already a big challenge to the average person.
[01:55:58] <[exa]> Inst: yeah that helps, you'll reach calculus from the other side, that works too
[01:56:02] <maerwald> smarter people do maths and I just use their libraries :p
[01:56:06] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 244 seconds)
[01:56:11] <dolio> Algebra is more relevant for computing for the most part anyway.
[01:56:28] *** Joins: deadmarshal (~deadmarsh@95.38.112.170)
[01:56:34] <[exa]> many courses include calculus just because the proofs with infinities are still kindof tangible there, when compared to topology and advanced statistics
[01:57:04] <Inst> i only got an A on the accelerated calculus stuff because I grinded problems
[01:57:11] *** Joins: nvmd (~nvmd@user/nvmd)
[01:57:21] <Inst> so I could do it algorithmically without strong understanding of the formal structure underneath
[01:57:31] <maerwald> I hate breadth first approach (which is what most courses do)
[01:57:32] *** Joins: Dinya (~Dinya@77-56-51-127.dclient.hispeed.ch)
[01:58:00] <monochrom> I fear real analysis too. I do OK but yeah I'm more an equational reasoning kind of person.
[01:58:30] *** Quits: mmhat (~mmh@55d4bfe6.access.ecotel.net) (Quit: WeeChat 3.3)
[01:58:45] <monochrom> would rather chase commuting diagrams than manage epsilons
[02:00:39] *** Quits: deadmarshal (~deadmarsh@95.38.112.170) (Ping timeout: 250 seconds)
[02:01:21] <yin> my hoogle-fu is failing me. if i want to see the definition of a specific instance, how do we search for it?
[02:01:26] <[exa]> monochrom: diagrams get complex, but reals just fold back to reals :]
[02:01:46] <dsal> yin: You can usually click on source from the docs.
[02:02:17] <Dinya> Hi! I've got a question: I am trying to improve my workflow by using "ghcid". ghcid watches my files and reloads ghci whenever they change. That works fine. The problem is I want to jump into that shell and interact with the ghci thereafter. But it does not allow me to write anything. Can I do anything about that? (I am on Windows 10/PowerShell.)
[02:02:24] <[exa]> yin: not sure if instances can be found directly but you can click them at datatype definition usually
[02:03:10] <yin> eh. i'm searching for (-> r) instances :P
[02:03:17] <monochrom> We usually run a second ghci for the interaction.
[02:03:27] <yin> *((->) r)
[02:03:29] <[exa]> yin: ah so, base stuff is in Prelude
[02:03:38] *** Joins: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk)
[02:03:46] <[exa]> yin: otoh that doesn't really answer the question very generally right. :]
[02:03:55] <maerwald> just use ghci, no ghcid
[02:04:09] <maerwald> instant feedback isn't always a good thing
[02:04:46] <[exa]> yin: anyway, https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.Base.html#line-1007
[02:04:58] <maerwald> I use HLS and such things more for reading unknown code, less when writing code. It's distracting and steals focus
[02:05:06] <yin> [exa]: it doesn't but i can usually find what i want. i wasn't finding it now because i was getting lost in base
[02:05:16] <boxscape_> personally I find instant feedback quite helpful
[02:05:30] <maerwald> I found out that it makes me worse at coding
[02:05:36] <[exa]> yin: I literally did ctrl+f Applicative ((
[02:05:52] <maerwald> I think deeper about code when I only compile every 15 minutes or so
[02:06:11] <monochrom> I use a fountain pen for its instant tactile feedback. :)
[02:06:38] *** Joins: jinsun__ (~quassel@user/jinsun)
[02:06:47] <jkaye> maerwald, fwiw that sounds pretty terrible to me. To each their own I think
[02:06:54] <monochrom> The feeling of lucid inkflow deceives me into believing that my thinking is lucid too haha.
[02:06:55] <jkaye> I definitely would not recommend that to a newcomer
[02:07:20] <Dinya> Well, the reason I got to ghcid is actually that I noticed that ":r" in ghci does not reprint warnings. Do you know how I can force it to?
[02:07:24] <maerwald> my maximum of coding without feedback and then compiling without a single error was about 30 minutes
[02:07:27] <maerwald> and it's quite pleasing
[02:07:48] <maerwald> of course that only works with code you're very familiar with
[02:07:55] <maerwald> but still quite hard
[02:08:28] <maerwald> the brain is just more active
[02:08:37] <dsal> yin: I started with the class, looked at instances, found (->r) and clicked on source.
[02:09:01] <Inst> oh, by the way
[02:09:20] <Inst> if you're curious, the maintainer of NativeFileDialog-Extended on Github learned Haskell
[02:09:54] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 260 seconds)
[02:10:19] <Inst> I sent him a message asking him for help, but he explicitly refuses to provide paid support, so probably no help there. If I get lucky, on the other hand, he might be able to put something up on Hackage, which will be helpful for future attempts to do Main = Do -> IO courses
[02:10:40] <yin> [exa], dsal: thanks
[02:12:02] <yin> () is Monoid
[02:12:39] <yin> > () <> ()
[02:12:41] <lambdabot>  ()
[02:13:14] <yin> > mappend () ()
[02:13:15] <lambdabot>  ()
[02:13:30] <yin> % () <> ()
[02:13:30] <yahb> yin: ()
[02:13:37] <yin> ok
[02:13:41] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[02:15:13] <dsal> > mempty :: ()
[02:15:14] <lambdabot>  ()
[02:15:22] <yin> obviously
[02:16:15] <yin> what are stimes and sconcat?
[02:16:40] *** Quits: ent (entgod@kapsi.fi) (Ping timeout: 268 seconds)
[02:16:46] *** Joins: ent (entgod@kapsi.fi)
[02:17:45] <dsal> instance Semigroup () where  _ <> _      = ();         sconcat _   = ();        stimes  _ _ = ()
[02:18:21] <yin> no i mean, in general
[02:18:36] <yin> what is the idea behind stimes and sconcat?
[02:18:55] <monochrom> stimes is for doing x <> x <> ... <> x  (n terms)
[02:19:09] <monochrom> sconcat is for doing x1 <> x2 <> ... <> xn
[02:19:19] <dsal> Oh, stimes is super great.  I wish they taught this stuff in elementary school.
[02:19:49] <dsal> There was a thread on twitter recently where people were super annoyed that anyone could even conceive of multiplying by zero.
[02:20:27] <dsal> But if you learned addition and multiplication as both being monoids in elementary school, exponentiation would both be obvious and not "the end"
[02:20:33] <monochrom> Ah, stimes doesn't allow 0, don't worry haha
[02:21:45] <yin> i remember being *very* annoyed at everyone just accepting division as "just another operation on integers"
[02:21:51] *** Quits: Topsi (~Tobias@dyndsl-095-033-090-230.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[02:21:52] <dsal> You kind of have to go the other way around, I guess.  But you get the same idea.
[02:21:55] <dsal> Division is a little differnet.
[02:22:07] <yin> not a little
[02:22:14] <yin> a lot
[02:22:22] <yin> it messed with me, man
[02:22:41] <dsal> I just mean all of addition, multiplication, exponentiation, etc.. is      mempty  <> a <> b <> c
[02:22:44] <janus> > 1/0
[02:22:46] <lambdabot>  Infinity
[02:22:50] <janus> perfectly well defined
[02:23:00] <monochrom> 0 itself messed with a lot of people back then, too.
[02:23:19] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:23:21] <monochrom> And oh yeah 0^0 still messes with a  lot of people, today.
[02:23:39] <dsal> Right.  I think it would less if taught as monoids.
[02:23:44] *** Quits: yannl (~yannl@host86-171-10-101.range86-171.btcentralplus.com) (Quit: Konversation terminated!)
[02:24:10] <yin> dsal: i feel like i should laugh at that but i also now that you're serious
[02:25:07] <yin> i remember kids having trouble counting beans
[02:25:28] <yin> are you sure we can handle monoids at 6 years old?
[02:25:32] <janus> kids need to stop using java beans. say no to drugs
[02:26:33] <yin> abstraction is hard to jump-start in kids, everyone develops it at a different rate
[02:26:35] *** Quits: tubogram (~tubogram@user/tubogram) (Quit: Ping timeout (120 seconds))
[02:26:54] <dsal> yin: So, we're taught that addition is combining two things and that we can do it in various orders and there's a special value that doesn't change the result.
[02:26:58] *** Joins: tubogram (~tubogram@user/tubogram)
[02:27:16] <dsal> And then we're taught that multiplication is combining two things a different way and we can do it in various orders and there's a special value that doesn't change the result.
[02:27:54] <yin> hm... i think i was taught everything geometrically
[02:28:26] <yin> i remembers beans
[02:28:34] <monochrom> Not sure I'm serious in the following, but brainwashing kids with that "change" wording is probably why everyone thinks that imperative programming is more "intuitive"!
[02:28:37] <yin> and little cubes
[02:30:06] *** Quits: michalz (~michalz@185.246.204.61) (Remote host closed the connection)
[02:30:09] <dsal> yin: Sure, that's also fine as long as you don't have to ever do negative numbers.  I did some algebra stuff like that in elementary school as well.
[02:30:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:30:54] <dsal> But the way I learned stuff, addition, multiplication, and exponentiation were just three different things.  Kind of built on top of each other…
[02:31:07] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[02:31:14] <dsal> It wasn't until the "you can't multiply by zero!" thing came along that I realized how dumb this was.
[02:31:39] <yin> you can't multiply by zero?
[02:32:00] <monochrom> I think of that as just another flaring of freaking out at 0.
[02:32:16] <monochrom> Every 10 years or something, people would do that.
[02:32:30] * geekosaur is just kinda fascinated at the whole discussion
[02:32:40] <yin> wait what are you talking about?
[02:33:16] <monochrom> Last time it was tax forms etc splitting "how many children do you have?" into 2 questions: "A. Do you have children?  B. If yes, how many?"
[02:37:28] <dsal> yin: Just why I was thinking about this.  Dumb thing that showed up on twitter.
[02:38:04] <monochrom> Hypothesis: Social collective freaking out at 0 coincides with solar flares >:)
[02:38:10] <dsal> > 3 <> 4 :: Sum Int
[02:38:12] <lambdabot>  Sum {getSum = 7}
[02:38:19] <dsal> stimes just makes a bunch of copies and folds.
[02:38:24] <dsal> > stimes 3 4 :: Sum Int
[02:38:26] <lambdabot>  Sum {getSum = 12}
[02:38:32] <dsal> > stimes 3 4 :: Product Int
[02:38:34] <lambdabot>  Product {getProduct = 64}
[02:38:38] <dsal> > stimes 0 4 :: Sum Int
[02:38:40] <lambdabot>  Sum {getSum = 0}
[02:38:43] <dsal> > stimes 0 4 :: Product Int
[02:38:44] <lambdabot>  Product {getProduct = 1}
[02:38:59] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[02:39:02] <dsal> So that's 4*0 and  4^0
[02:40:37] <dsal> A semigroup that isn't a monoid needs a positive multiplier, but a monoid has mempty, so that's the answer at zero.  Which is why *0 and ^0 work.
[02:40:54] <dsal> > stimes 5 f :: Expr
[02:40:55] <lambdabot>  ((f <> f) <> f <> f) <> f
[02:41:40] <janus> what would be needed in the typeclass hierarchy to have it be exception safe?
[02:42:21] <janus> > stimes (-1) 1  :: Product Int
[02:42:23] <lambdabot>  Product {getProduct = *Exception: Negative exponent
[02:43:31] <janus> i guess it would work better in haskell if  negative exponentation is simply not done and people work with some kind of reciprocal operator?
[02:45:26] <janus> i guess it is just something haskellers have to deal with, a mathematical operation that has different constraints for different input values will need to be split into multiple operations
[02:45:36] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[02:46:20] <monochrom> Negative exponentiation makes sense when you have a group.
[02:48:02] <yin> speaking of it
[02:48:32] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[02:48:51] <yin> is it too late to fix all function types that should be Nat instead of Int?
[02:49:14] <janus> monochrom: right, but then that rubs a haskeller the wrong way when the mathematician has the same name for it. because according to a haskeller, different type class => different name, right ?
[02:49:32] <yin> and finally have a decent algebraic Nat that "collapses" as it gets evaluated?
[02:49:39] <monochrom> For exception-safe, you would go for "PositiveNatural -> a -> a".  Note that sconcat already gets there, it's "Nonempty a -> a", so not even "[a] -> a".
[02:50:27] <monochrom> In the case of Num-hierarchy exponentiation, we do have ^, ^^, **
[02:51:01] <monochrom> Although, ^ is not exception-safe.
[02:51:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:51:51] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:52:11] *** Joins: alzgh (~alzgh@user/alzgh)
[02:53:21] <monochrom> About Nat. Firstly, it already has a name, it's Word.
[02:53:26] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:54:45] <monochrom> Secondly, last time "length :: [a] -> Natural/Word" was brought up, the counterpoint was that we want to allow "length xs - k" to be negative, and even once in a while "k - length xs".
[02:54:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:54:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:54:47] *** Joins: wroathe (~wroathe@user/wroathe)
[02:55:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[02:55:51] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:56:02] <monochrom> It participates in so many formulas that have intermediate negative answers that Int/Integer make more sense.
[02:56:29] <yin> sense is overrated
[02:57:01] <monochrom> Me, I believe in refinement types more than dependent types.
[02:57:11] *** Quits: Alex_test (~al_test@94.233.240.96) (Ping timeout: 245 seconds)
[02:57:38] <janus> yin: the Nat/Fins in idris don't collapse in the repl and they are super slow. so maybe it is still a research problem to find out how to do that
[02:57:50] *** Joins: AlexNoo_ (~AlexNoo@178.34.163.82)
[02:57:58] *** Quits: AlexZenon (~alzenon@94.233.240.96) (Ping timeout: 260 seconds)
[02:58:06] <janus> yin: so you have to remember to write `:exec <your computation>` and then it will be compiled first
[02:58:23] *** Quits: AlexNoo (~AlexNoo@94.233.240.96) (Ping timeout: 256 seconds)
[02:58:33] <janus> a real bummer to have working code that i threw out only because i didn't know that....
[03:00:49] <janus> at least the difference between the compiled and the interpreted code was never that big in ghc
[03:01:13] <janus> but i guess it is to be expected when the type system gets all that power
[03:01:18] *** Quits: cjb (~cjbayliss@user/cjb) ()
[03:01:48] *** Joins: AlexZenon (~alzenon@178.34.163.82)
[03:01:54] *** Joins: Alex_test (~al_test@178.34.163.82)
[03:03:35] *** Joins: cjb (~cjbayliss@user/cjb)
[03:04:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[03:07:30] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[03:13:02] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c7149f82889e7e27a4cfa8d6.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:22:11] *** Quits: srk (~sorki@user/srk) (Ping timeout: 245 seconds)
[03:22:21] *** Joins: srk_ (~sorki@user/srk)
[03:23:51] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 250 seconds)
[03:25:00] *** srk_ is now known as srk
[03:27:33] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[03:30:59] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[03:32:29] *** Joins: [Kalisto] (~nico@user/kalisto/x-8968079)
[03:37:11] *** Quits: emf (~emf@2620:10d:c091:480::1:6062) (Ping timeout: 245 seconds)
[03:37:43] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:39:15] *** Joins: emf (~emf@2620:10d:c090:400::5:c9f2)
[03:39:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:540:e191:ad14:68ac) (Remote host closed the connection)
[03:41:10] <Inst> YESSS!
[03:41:17] <Inst> Got TinyFileDialogs isntalled via Cabal!
[03:45:36] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:f571:277c:e0b0:82b9) (Read error: Connection reset by peer)
[03:45:54] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:d8ab:2e91:63f7:db6e)
[03:46:54] <energizer> i feel like pattern matching is somehow the opposite of multiple dispatch. is there something i can read about their relationship?
[03:47:55] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:540:e191:ad14:68ac)
[03:49:46] *** Quits: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk) (Remote host closed the connection)
[03:49:47] <geekosaur> pattern matching is multiple dispatch on structure as opposed to type. this said, there are languages which offer pattern matching which can match on multiple types
[03:50:06] <geekosaur> while still matching on structure
[03:51:53] <geekosaur> so they're only "opposites" if you take a restrictive view of "multiple dispatch", granting that many languages do take such a restrictive view
[03:52:22] <energizer> i usually think of multiple dispatch as open/extensible and pattern matching as closed
[03:53:23] <geekosaur> this again depends on the language, I think. Haskell's pattern matching is closed
[03:54:30] <hpc> there's pattern matching on Either, if you squint a bit
[03:54:36] <geekosaur> and this is considered something of a feature, since it means the compiler will at least warn you if you refactor to add a new case to a structured value / ADT and you miss a spot where it needs to be added
[03:55:21] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:55:22] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[03:55:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[03:56:38] *** Lord_of_Life_ is now known as Lord_of_Life
[03:57:38] <geekosaur> (and if you want extensible multiple dispatch, Haskell has typeclasses. they don't do pattern matching in the Haskell sense, though, since they dispatch on types, not values)
[03:58:34] <energizer> i guess i should be asking in #idris but presumably there's dependent-typeclass dispatch or something
[04:01:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[04:01:55] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[04:03:43] *** Quits: Dinya (~Dinya@77-56-51-127.dclient.hispeed.ch) (Quit: Client closed)
[04:03:53] <unit73e> finally managed to make aeson do what I wanted
[04:03:53] <sm> I think.. it was not supposed to be such an achievement.. :)
[04:03:54] <sm> that feeling of having beat a final boss when you get a haskell package installed..
[04:04:40] <unit73e> it was embarasingly simple... `decodeFileStrict f :: IO (Maybe (KM.KeyMap Sprite))`
[04:04:52] <unit73e> I wanted the map because the keys aren't fixed
[04:05:05] *** Joins: johnjay (~pi@192.142.100.50)
[04:05:47] <unit73e> I had to read the source code of aeson to figure that out lol...
[04:09:34] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:10:02] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[04:17:06] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[04:17:18] *** Joins: Vajb (~Vajb@85-76-35-135-nat.elisa-mobile.fi)
[04:18:08] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:18:08] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:18:08] *** Joins: wroathe (~wroathe@user/wroathe)
[04:18:58] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[04:22:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[04:23:22] *** Quits: mark__ (~a@p200300ef973db1484086f0a6a24fc4dd.dip0.t-ipconnect.de) (Quit: WeeChat 3.0.1)
[04:23:26] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:28:20] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (Remote host closed the connection)
[04:29:20] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[04:29:41] *** Quits: jkaye (~jkaye@2601:281:8300:7530:2b36:18db:1545:7097) (Ping timeout: 245 seconds)
[04:30:45] *** Quits: Vajb (~Vajb@85-76-35-135-nat.elisa-mobile.fi) (Read error: Connection reset by peer)
[04:30:47] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:540:e191:ad14:68ac) (Remote host closed the connection)
[04:31:17] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[04:33:43] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[04:33:44] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[04:33:47] *** allbery_b is now known as geekosaur
[04:36:07] *** Joins: dajoer (~david@user/gvx)
[04:38:58] <yin>  /f encding
[04:54:37] <danso> is there no equivalent to the TypeOperators extension for data constructors? 
[04:55:57] <danso> meaning there's no way to define something like `data T a b = ^^ a | ?? b
[04:56:13] <danso> `
[04:56:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:540:e191:ad14:68ac)
[04:56:35] <yin> that wuld be confusing
[04:56:44] <yin> why would you want that?
[04:57:10] <danso> i can't find anything about it, but `(:)` is a type constructor operator
[04:58:11] <yin> it's infix
[04:58:51] <yin> the language supports infix data constructors starting with the character ':'
[04:59:26] <danso> i just realized i can do it using the () syntax ._. 
[04:59:27] <danso> thanks anyway
[04:59:47] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[04:59:59] <danso> oh, it only allows ':'? why is that?
[05:01:04] <yin> convention. it's the syntax rule
[05:01:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:01:20] *** Joins: Guest27 (~Guest27@2601:281:d480:2ce0::93bd)
[05:02:22] *** Joins: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net)
[05:06:00] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Read error: Connection reset by peer)
[05:10:47] <yin> think of ':' as an uppercase symbol. normal function names can't start with it
[05:11:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:11:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:11:28] *** Joins: wroathe (~wroathe@user/wroathe)
[05:11:36] <yin> @def (:+) x y = x + y
[05:11:36] <lambdabot>  .L.hs:164:12: error:
[05:11:37] <lambdabot>      Ambiguous occurrence ‘x’
[05:11:37] <lambdabot>      It could refer to
[05:11:39] <geekosaur> basically, pattern matches need a way to distinguish between constructors and value bindings. they use case for that, but symbols don't have case, so prefix : is treated as an "uppercase" symbol character
[05:11:50] <monochrom> Alphabetical data constructors begin with a capital letter. Symbolic data constructors begin with a colon. This helps the grammar to know that "f t = ..." and "x %%% y = ..." are defining functions f and (%%%), "F t = ..." and "x :% y = ..." are defining t, x, y using pattern matching.
[05:12:02] * yin sigh
[05:12:04] <yin> @undef
[05:12:04] <lambdabot> Undefined.
[05:12:08] <yin> @def (:+) x y = x + y
[05:12:09] <lambdabot>  .L.hs:151:12: error:
[05:12:09] <lambdabot>      Ambiguous occurrence ‘x’
[05:12:09] <lambdabot>      It could refer to
[05:12:23] <yin> ^ what is happening here? what is this error?
[05:12:27] <monochrom> It could refer to x::Expr :)
[05:12:33] <geekosaur> ^
[05:13:00] <monochrom> And like I said "(:+) t u = ..." defines t and u, not (:+)
[05:13:03] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[05:13:13] <monochrom> To define (:+), please start with "data" :)
[05:14:48] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:16:07] <yin> why can't anything be not confusing?
[05:16:20] <monochrom> What is confusing?
[05:17:20] <yin> explaining things in haskell seem to be harder than understanding them sometimes. i'm just sleepy...
[05:18:08] <dsal> Haha.  That's partially because it usually requires explaining things less precisely while still being clear.
[05:18:54] <monochrom> Really, it can cut both ways, depending on how you mean by "explain" and by "understand".
[05:19:51] <yin> monochrom: you are proving my point :D
[05:20:03] <monochrom> Sometimes I define "explain" to just mean "see, here are the axioms", "understand" to mean "but have you seen all theorems that follow from the axioms?".  In that case, understanding is harder.
[05:20:57] <monochrom> Some other times, I define "understand" to mean "I've learned this stuff", "explain" to mean "now I have to teach this stuff to other people".  Clearly, teaching is harder.
[05:22:16] <yin> too many asterisks
[05:22:41] <monochrom> "My God, it's full of stars"? :)
[05:24:27] <monochrom> Anyway, lambdabot has loaded up the simple-reflect package, which defines x to support this kind of explanations:
[05:24:34] <monochrom> > foldr f a [x, y, z]
[05:24:35] <lambdabot>  f x (f y (f z a))
[05:25:03] <yin> i *think* i remember ghci r lambdabt quoting 2001 with the snarky remarks enabled
[05:25:05] <monochrom> So in fact it defines all of a to z.
[05:25:43] <geekosaur> ghci doesnn't. some lambdabot deatures use bsd's insults mode which includes lots of snarky remarks
[05:26:00] <geekosaur> *features
[05:26:00] <yin> that must've been it
[05:26:25] *** Joins: jkaye (~jkaye@2601:281:8300:7530:1c01:b0f:3c58:2e46)
[05:26:29] <geekosaur> like if you query the quote db and it doesn't find a match
[05:26:40] <monochrom> I think @src has insults
[05:26:47] <monochrom> @src idd
[05:26:47] <lambdabot> Source not found. I've seen penguins that can type better than that.
[05:26:56] <yin> ^there you go
[05:27:10] <monochrom> Ah yeah @quote too
[05:27:14] <monochrom> @quote xyk
[05:27:14] <lambdabot> No quotes match. You untyped fool!
[05:28:01] <yin> it risks offending strict types
[05:28:43] <monochrom> Oh w00t simple-reflect also has...
[05:28:44] <monochrom> > foldr (⊗) z [a,b,c]
[05:28:46] <lambdabot>  a ⊗ (b ⊗ (c ⊗ z))
[05:29:13] <monochrom> The complete list is at https://hackage.haskell.org/package/simple-reflect-0.3.3/docs/Debug-SimpleReflect-Vars.html
[05:30:08] <monochrom> Nice debate: Does it abuse Show? >:)
[05:30:31] <monochrom> err, s/Nice/Next/ !  Although I guess either way works.
[05:30:34] <danso> i appreciate the thoughtful answers, thanks :^)
[05:35:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[05:35:50] *** Quits: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[05:40:37] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[05:46:44] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[05:49:02] *** tabemann_ is now known as tabemann
[05:52:18] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[05:52:55] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[05:53:38] *** Joins: alzgh (alzgh@user/alzgh)
[05:54:41] *** Quits: alx741 (~alx741@181.196.68.101) (Quit: alx741)
[05:55:02] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[05:56:32] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[06:04:52] *** Quits: Guest27 (~Guest27@2601:281:d480:2ce0::93bd) (Ping timeout: 256 seconds)
[06:08:51] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[06:12:05] *** Joins: zebrag (~chris@user/zebrag)
[06:12:33] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[06:12:54] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Client Quit)
[06:13:20] *** Guest6642 is now known as feetwind
[06:13:27] *** Quits: feetwind (~mike@user/feetwind) (Quit: WeeChat 3.1)
[06:13:41] *** Joins: feetwind (~mike@user/feetwind)
[06:16:08] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[06:17:15] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Client Quit)
[06:18:42] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[06:18:43] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Client Quit)
[06:20:13] *** _koolazer is now known as koolazer
[06:20:22] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[06:21:06] *** ec_ is now known as ec
[06:22:37] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[06:27:32] *** Quits: xff0x (~xff0x@2001:1a81:5343:8e00:3d14:89a2:444a:e78d) (Ping timeout: 240 seconds)
[06:29:34] *** Joins: xff0x (~xff0x@2001:1a81:536d:7000:f003:c1eb:d2a3:5377)
[06:31:27] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[06:31:32] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1c01:b0f:3c58:2e46) (Ping timeout: 240 seconds)
[06:32:05] *** Joins: pop3 (~pop3@user/pop3)
[06:32:45] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[06:52:24] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[06:52:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:57:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[07:03:23] *** Quits: emf (~emf@2620:10d:c090:400::5:c9f2) (Ping timeout: 264 seconds)
[07:07:07] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:07:08] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:07:08] *** finn_elija is now known as FinnElija
[07:15:24] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 244 seconds)
[07:27:18] *** Joins: ddb (~ddb@ipv6two.tilde.club)
[07:30:46] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[07:31:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:34:37] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[07:34:52] <jackdk> `fmap :: Functor f => (a -> b) -> f a -> f b` is like a "one to one" map from `a` to `b`; `mapMaybe :: Filterable f => (a -> Maybe b) -> f a -> f b` maps "one to zero or one"; is there a class that does `(a -> [b]) -> f a -> f b`?
[07:35:29] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[07:36:00] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:36:15] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[07:38:51] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:39:40] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[07:39:58] *** Quits: boxscape_ (~boxscape_@i577BCB42.versanet.de) (Quit: Connection closed)
[07:45:23] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:46:19] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[07:46:53] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 250 seconds)
[07:47:43] *** Joins: img (~img@user/img)
[07:53:09] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[07:58:04] <c_wraith> jackdk: I can't imagine many instances for that.  lists and multimaps, and...?
[07:59:35] <dsal> :t foldMap
[07:59:36] <lambdabot> (Foldable t, Monoid m) => (a -> m) -> t a -> m
[08:01:18] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 260 seconds)
[08:05:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[08:06:08] <awpr> an obstacle to that particular type is: how would you know how to organize the list elements into the structure of `m`?  anything with more structure than a plain list would have to "make up" that extra structure
[08:06:44] <awpr> one natural way to address that is: change it so that the inner list is already `m b` instead.  and then what you have is `Monad`
[08:07:59] <awpr> trees with values only at the leaves can have that kind of `Monad` instance: find a leaf value, apply a function, and graft the resulting tree in place of the leaf
[08:09:54] <dsal> I'm kind of guessing as to how close to that we need to get.
[08:10:34] <dsal> jackdk: Have you looked into recursion-schemes at all?  That looks like an anamorphism.
[08:14:24] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (*.net *.split)
[08:14:24] *** Quits: zebrag (~chris@user/zebrag) (*.net *.split)
[08:14:24] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (*.net *.split)
[08:14:24] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (*.net *.split)
[08:14:24] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (*.net *.split)
[08:14:24] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (*.net *.split)
[08:14:24] *** Quits: juhp (~juhp@128.106.188.220) (*.net *.split)
[08:14:24] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (*.net *.split)
[08:14:24] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (*.net *.split)
[08:14:24] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (*.net *.split)
[08:14:24] *** Quits: edwtjo (~edwtjo@user/edwtjo) (*.net *.split)
[08:14:24] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[08:14:24] *** Quits: Philonous (~Philonous@user/philonous) (*.net *.split)
[08:14:24] *** Quits: duckonomy (~duckonomy@177.ip-144-217-84.net) (*.net *.split)
[08:14:24] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[08:14:24] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[08:14:24] *** Quits: marienz (~marienz@libera/staff/marienz) (*.net *.split)
[08:14:24] *** Quits: kosmikus (~kosmikus@nullzig.kosmikus.org) (*.net *.split)
[08:14:24] *** Quits: edr (~edr@user/edr) (*.net *.split)
[08:14:24] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[08:14:24] *** Quits: bah (~bah@l1.tel) (*.net *.split)
[08:14:24] *** Quits: SethTisue__ (sid14912@ilkley.irccloud.com) (*.net *.split)
[08:14:24] *** Quits: angerman (sid209936@ilkley.irccloud.com) (*.net *.split)
[08:14:24] *** Quits: obviyus (sid415299@user/obviyus) (*.net *.split)
[08:14:24] *** Quits: tritlo (sid58727@user/tritlo) (*.net *.split)
[08:14:24] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[08:14:24] *** Quits: glguy (x@libera/staff/glguy) (*.net *.split)
[08:15:11] *** Joins: mbuf (~Shakthi@136.185.69.244)
[08:15:11] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[08:15:11] *** Joins: zebrag (~chris@user/zebrag)
[08:15:11] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[08:15:11] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[08:15:11] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[08:15:11] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[08:15:11] *** Joins: juhp (~juhp@128.106.188.220)
[08:15:11] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[08:15:11] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[08:15:11] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[08:15:11] *** Joins: edwtjo (~edwtjo@user/edwtjo)
[08:15:11] *** Joins: niko (~niko@libera/staff/niko)
[08:15:11] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[08:15:11] *** Joins: Philonous (~Philonous@user/philonous)
[08:15:11] *** Joins: duckonomy (~duckonomy@177.ip-144-217-84.net)
[08:15:11] *** Joins: chronon (~chronon@user/chronon)
[08:15:11] *** Joins: edr (~edr@user/edr)
[08:15:11] *** Joins: marienz (~marienz@libera/staff/marienz)
[08:15:11] *** Joins: kosmikus (~kosmikus@nullzig.kosmikus.org)
[08:15:11] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[08:15:11] *** Joins: bah (~bah@l1.tel)
[08:15:11] *** Joins: SethTisue__ (sid14912@ilkley.irccloud.com)
[08:15:11] *** Joins: angerman (sid209936@ilkley.irccloud.com)
[08:15:11] *** Joins: obviyus (sid415299@user/obviyus)
[08:15:11] *** Joins: tritlo (sid58727@user/tritlo)
[08:15:11] *** Joins: wolfshappen (~waff@irc.furworks.de)
[08:15:11] *** Joins: glguy (x@libera/staff/glguy)
[08:17:07] *** Quits: wolfshappen (~waff@irc.furworks.de) (Max SendQ exceeded)
[08:17:36] *** Joins: wolfshappen (~waff@irc.furworks.de)
[08:20:56] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[08:21:17] *** Joins: alzgh (~alzgh@user/alzgh)
[08:22:46] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:25:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[08:25:48] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[08:26:09] *** Quits: cjb (~cjbayliss@user/cjb) (Remote host closed the connection)
[08:26:44] *** Joins: angela (~angela@cpe-76-91-17-53.socal.res.rr.com)
[08:26:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:26:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:26:47] *** Joins: wroathe (~wroathe@user/wroathe)
[08:32:03] <angela> hello
[08:34:52] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:42:41] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[08:43:20] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Quit: Ping timeout (120 seconds))
[08:43:46] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[08:45:27] *** Joins: deadmarshal (~deadmarsh@95.38.112.170)
[08:49:13] *** Quits: angela (~angela@cpe-76-91-17-53.socal.res.rr.com) (Quit: Client closed)
[08:51:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[09:06:29] *** Quits: edr (~edr@user/edr) (Ping timeout: 244 seconds)
[09:07:08] *** Joins: edr (~edr@enlo.co)
[09:07:08] *** Quits: edr (~edr@enlo.co) (Changing host)
[09:07:08] *** Joins: edr (~edr@user/edr)
[09:11:31] *** Quits: cheater (~Username@user/cheater) (Read error: Connection reset by peer)
[09:14:14] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[09:14:58] *** Joins: cheater (~Username@user/cheater)
[09:15:02] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[09:15:48] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Client Quit)
[09:16:56] *** Quits: haskl (~haskl@user/haskl) (Quit: Uh oh... ZNC disconnected.)
[09:17:11] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[09:17:12] *** Joins: haskl (~haskl@user/haskl)
[09:18:53] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 244 seconds)
[09:18:55] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[09:21:55] *** Quits: haskl (~haskl@user/haskl) (Client Quit)
[09:22:09] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[09:25:08] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:26:15] <Inst> [exa]
[09:26:23] <Inst> problem solved courtesy Functional Programming Discord
[09:26:35] <Inst> tinyfiledialogs in Hackage does the job I was looking for
[09:26:48] <Inst> and it calls Windows native dialogs, even though TFD is obsolete
[09:31:00] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:31:30] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[09:32:18] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[09:33:32] *** Quits: russruss (~russruss@my.russellmcc.com) (Remote host closed the connection)
[09:35:06] *** Joins: russruss (~russruss@my.russellmcc.com)
[09:36:07] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[09:36:48] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[09:38:22] <dsal> I'm proud of my Windows ignorance.
[09:40:00] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 250 seconds)
[09:40:32] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[09:42:00] *** Joins: phma (phma@2001:5b0:210d:9d18:7608:a226:de13:2590)
[09:42:24] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[09:45:33] *** Quits: max22- (~maxime@2a01cb08833598002528ec70f3e7e36f.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[09:47:27] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 268 seconds)
[09:50:06] <kronicmage> Speaking of recursion schemes, is dynamic programming at all ergonomic using them? I've been experimenting for a while and have yet to find a good way
[09:53:32] *** Quits: xff0x (~xff0x@2001:1a81:536d:7000:f003:c1eb:d2a3:5377) (Ping timeout: 240 seconds)
[09:53:48] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[09:56:05] *** Joins: xff0x (~xff0x@2001:1a81:536d:7000:f003:c1eb:d2a3:5377)
[09:58:02] *** Quits: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com) (Quit: Lost terminal)
[10:00:44] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:01:13] *** Quits: deadmarshal (~deadmarsh@95.38.112.170) (Ping timeout: 250 seconds)
[10:02:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:03:45] *** Joins: deadmarshal (~deadmarsh@95.38.112.170)
[10:05:06] *** Joins: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com)
[10:06:55] *** Quits: echoreply (~echoreply@45.32.163.16) (Quit: WeeChat 2.8)
[10:08:17] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[10:16:30] *** Joins: rkrishnan (~user@122.167.19.65)
[10:17:38] *** Joins: haskl (~haskl@user/haskl)
[10:20:11] <Inst> dsal: guess what?
[10:20:18] <Inst> Chrome OS is likely going to end up murdering Windows sooner or later
[10:20:20] <Inst> market share went up
[10:20:28] <Inst> in other news, does anyone know how to get Stack to install a package globally?
[10:20:38] <Inst> I know this is typically not a good idea due to dependency hell
[10:22:01] <dsal> Inst: stack install can do that, I think, but I've not done it because why would you?
[10:22:17] <Inst> dsal: because I'm dumb, or rather I'm teaching someone else how to be dumb
[10:22:41] <Inst> and just flashing a single, small package in is likely not going to create issues
[10:22:52] <Inst> it's simpler than teaching them cabal before they know what recursion is
[10:22:56] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:24:20] <dsal> `stack new` is a good first step
[10:28:17] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[10:28:53] *** Quits: deadmarshal (~deadmarsh@95.38.112.170) (Ping timeout: 256 seconds)
[10:31:26] *** Joins: ubert (~Thunderbi@p200300ecdf4fca8de6b318fffe838f33.dip0.t-ipconnect.de)
[10:35:30] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[10:35:56] <Inst> creates new project
[10:36:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[10:36:52] *** jinsun__ is now known as jinsun
[10:48:18] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Remote host closed the connection)
[10:49:45] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[10:51:40] *** Joins: deadmarshal (~deadmarsh@95.38.112.170)
[10:51:56] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:e288:155f:c333:ecf4)
[10:54:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:58:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[10:59:27] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[11:01:57] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:04:24] <Inst> more realistically
[11:04:33] <Inst> how do i get stack to point to a different GHC folder?
[11:05:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[11:05:24] *** Joins: bitdex_ (~bitdex@gateway/tor-sasl/bitdex)
[11:09:18] *** Quits: She (~she@user/thedaemoness) (Ping timeout: 260 seconds)
[11:09:59] *** Joins: She (~she@user/thedaemoness)
[11:17:30] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[11:17:46] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Read error: Connection reset by peer)
[11:18:22] *** Joins: the_finn (uid526334@id-526334.hampstead.irccloud.com)
[11:23:17] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 256 seconds)
[11:29:05] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[11:30:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:32:02] *** Quits: benin (~benin@183.82.26.68) (Ping timeout: 240 seconds)
[11:37:16] *** Joins: retroid_ (~retro@2e41e9c8.skybroadband.com)
[11:39:42] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[11:40:17] *** Quits: retro_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[11:40:32] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[11:40:48] *** Joins: cfricke (~cfricke@user/cfricke)
[11:40:54] *** Quits: juri_ (~juri@178.63.35.222) (Ping timeout: 268 seconds)
[11:41:26] *** Joins: juri_ (~juri@178.63.35.222)
[11:42:12] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[11:43:26] *** Joins: kuribas (~user@ptr-25vy0i9fqz6dux8z18z.18120a2.ip6.access.telenet.be)
[11:44:02] *** Joins: benin (~benin@106.198.84.11)
[11:44:05] <kuribas> There is no way to make a formal specification, and proof that the implementation is conform it, without fancy types or dependent types, right?
[11:44:07] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:44:10] <kuribas> like Servant for example.
[11:49:05] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[11:51:32] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[11:51:54] <energizer> is there a word for taking a complicated type describing a collection of values with various properties and dumbing down the type into "list of float"?
[11:52:21] <lortabac> kuribas: maybe an alternative would be to keep the types of the implementation simple and prove correctness extrinsically with something like Liquid Haskell
[11:52:22] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:52:26] <energizer> (or some other dumb type)
[11:52:37] <lortabac> energizer: unrefine?
[11:52:53] <dminuoso> kuribas: The closest thing I know of is coq + program extraction.
[11:52:56] <kuribas> energizer: evaluate?  calculate?
[11:53:26] <kuribas> lortabac: define correctness.
[11:53:41] <dminuoso> Also dont forget tests.
[11:53:43] <lortabac> kuribas: you have already given the definition :P
[11:54:03] <lortabac> "a proof that the implementation is conform to the specification"
[11:54:06] <dminuoso> Especially with quichcheck or even just unit tests, these can simple serve as formal specifying properties that you can test by simply running the test suite.
[11:54:11] <kuribas> lortabac: I wouldn't call that "correctness".  The word is so much overloaded.
[11:54:25] <dminuoso> Say where you specify associativity of an operator to hold, you can simply describe that with quickcheck.
[11:54:48] <lortabac> kuribas: ok I didn't want to type that long sentence
[11:55:04] <kuribas> lortabac: I prefer "conform" or "consistent".
[11:56:04] <kuribas> would you say that haskell (without other tools), isn't really suited for this purpose?
[11:56:46] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[11:56:57] <lortabac> what I wanted to say is: whatever you can prove intrinsically with fancy types, (I think) you can prove it extrinsically and move the complexity from the implementation to the proof
[11:57:21] <lortabac> I don't know whether this is always possible
[11:58:36] <lortabac> think of the various lists-with-proofs, like sized-vectors, fin etc., they all require separate implementations
[11:59:02] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:59:17] <kuribas> lortabac: you mean like an external specification, and some test suite?
[11:59:25] <lortabac> whereas if you use plain lists you might be able to move the same proofs to Liquid Haskell
[12:00:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:01:13] <kuribas> lortabac: liquid haskell seems to me even more fancy than type level extensions.
[12:01:45] <kuribas> There is no garantee it will support all ghc features at any time, is there?
[12:01:48] <lortabac> yes, but the complexity is not in the implementation, you can delete all the proofs and the code will still work
[12:01:49] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[12:02:33] <lortabac> whereas if you use for ex. Vec, you are stuck with it
[12:03:02] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[12:03:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:03:06] <kuribas> I see your point.  I think I'd prefer tests or property tests in that case, as dminuoso suggested.
[12:03:20] <kuribas> There are no really "proof", but can be close to proofs.
[12:03:24] *** Joins: chele (~chele@user/chele)
[12:03:39] <lortabac> fair point, tests are probably the best thing we have at the moment
[12:03:57] <kuribas> I guess I underestimate the usefulness of tests which can keep the code simple.
[12:05:11] *** Joins: vysn (~vysn@user/vysn)
[12:06:06] <kuribas> And garantee consistency at the same time.
[12:07:36] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c7149f82889e7e27a4cfa8d6.dip0.t-ipconnect.de)
[12:08:16] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[12:08:58] <lortabac> regarding Liquid Haskell, IIRC it doesn't really care about the various GHC features since it works on Core (memories from Zurihac ~2018, so I might be wrong)
[12:09:14] <kuribas> Does core retain types?
[12:09:53] <lortabac> yes, Core is typed
[12:11:12] *** Joins: michalz (~michalz@185.246.204.61)
[12:12:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[12:13:40] *** Quits: benin (~benin@106.198.84.11) (Read error: Connection reset by peer)
[12:14:32] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[12:15:29] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[12:15:42] *** Joins: benin (~benin@183.82.26.68)
[12:22:00] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:22:16] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[12:24:31] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:24:51] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:540:e191:ad14:68ac) (Remote host closed the connection)
[12:28:02] *** Quits: deadmarshal (~deadmarsh@95.38.112.170) (Ping timeout: 240 seconds)
[12:30:32] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[12:30:50] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[12:36:21] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 250 seconds)
[12:39:14] *** Joins: jumper149 (~jumper149@80.240.31.34)
[12:42:31] *** Joins: drdo (~drdo@roach0.drdo.eu)
[12:46:35] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[12:47:43] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:43] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:46] *** allbery_b is now known as geekosaur
[12:48:05] *** Joins: __monty__ (~toonn@user/toonn)
[12:49:21] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:49:46] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Client Quit)
[12:55:32] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 240 seconds)
[12:58:45] *** Joins: nuh^ (~nuh@h50.174.139.63.static.ip.windstream.net)
[12:59:14] *** Joins: deadmarshal (~deadmarsh@95.38.112.170)
[13:01:24] <DigitalKiwi> cc. Hecate; #haskell-offtopic; hecate never made me a good artists CRM so i don't know all of the infos anymore :(
[13:01:32] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[13:04:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[13:05:22] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[13:05:46] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[13:09:11] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:09:11] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[13:10:12] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[13:11:23] *** Joins: pop3 (~pop3@user/pop3)
[13:21:00] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:22:36] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:23:25] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[13:25:37] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:91d4:d998:64f1:2e2f)
[13:28:51] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:29:02] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 240 seconds)
[13:29:22] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[13:30:23] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:91d4:d998:64f1:2e2f) (Ping timeout: 264 seconds)
[13:30:47] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[13:31:15] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[13:31:57] *** Joins: alzgh (~alzgh@user/alzgh)
[13:33:31] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:38:32] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[13:42:21] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:43:34] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:44:03] <cads> hey is there any writing done on how to make haskell "read like prose", how to simplify poorly written haskell, or how to structure haskell so that it is readable for people with a fundamentally low ability to read and process math symbols?
[13:45:09] <cads> in the OOP world we have uncle bob and the clean coding practice, and there are even specific clean architectures that are supposed to make code readable  and extensible
[13:45:30] <cads> is there an uncle bob of haskell?
[13:45:32] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[13:45:42] <dminuoso> cads: I dont believe in "clean coding practice"
[13:45:53] <dminuoso> It presumes that there's some universal communicatable silver bullet in how to write code.
[13:46:45] <dminuoso> Writing code that communicates well is one of the key skills you develop with years of expertise
[13:47:02] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[13:47:29] *** Joins: wonko (~wjc@user/wonko)
[13:47:36] *** Quits: wonko (~wjc@user/wonko) (Remote host closed the connection)
[13:48:19] <cads> dminuoso, that is just an excuses to not answer my question, lol
[13:48:34] <dminuoso> It's similar to how authors become good. They practice writing and they read what others do.
[13:49:42] <cads> yeah, but I can point you to a book called How to Write a Mystery which will give you a decade's head start on being a mystery writer, simply by informing you the different ways of writing mysteries, which you may not be aware of
[13:50:06] <dminuoso> Mmm, well Im not aware of any such books about Haskell
[13:50:17] <dminuoso> And given the relatively low popularity, I dont think such a specialized book that you're asking for exists.
[13:50:45] <cads> likewise, I would not expect a coder to spontaneously manifest a great library of OOP patterns without first reading gang of four
[13:50:49] <dminuoso> Refactoring poorly written code into readable code is probably highly individual based on how you perceive code and your target audience
[13:51:10] <dminuoso> cads: OOP patterns is something *significaly* different from communicatable code.
[13:51:38] <dminuoso> GoF patterns are not grand achievements and the ideal, they are rather dirty workarounds to solve simple problems in poor languages.
[13:51:38] *** Quits: x6C697370 (~michael@2600:1700:7c02:3180::44) (Ping timeout: 268 seconds)
[13:51:55] <dminuoso> They have become somewhat of a religious item
[13:51:59] <dminuoso> For reasons that are beyond me
[13:52:12] <cads> yeah, actually reading the book I am struck by how hack to solutions seem, and how applicatives can do most of this stuff nowadays
[13:52:22] <cads> how hacky the solution seems*
[13:52:29] <tromp> does anyone know if ghcup plays nice with ihp ?
[13:53:28] <tromp> does ihp try to install its own ghc?
[13:54:45] <lortabac> dminuoso: they are hacky but they are a lingua franca
[13:54:51] <dminuoso> cads: Consider something like "Factory pattern". What they dub a "pattern" with a lot of moving internal parts, I simply call a function. Apply it to some argument, get something back.
[13:54:53] <dminuoso> Done.
[13:55:24] <lortabac> instead of everybody reinventing their own dirty hacks, we all use the same ones and can understand each other's code better
[13:55:47] *** Joins: wonko (~wjc@user/wonko)
[13:55:54] <lortabac> not saying is a good state of things, I'm just trying to explain why they are popular
[13:57:10] <cads> dminuoso, what is a factory good for?
[13:58:28] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Read error: Connection reset by peer)
[13:58:47] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[14:01:48] <energizer> https://hackage.haskell.org/packages/top what does the "Downloads" column mean? it can't be "total downloads ever" can it?
[14:03:51] <cads> lortabac, I get the frustration with the cult mentality around the original GoF pattern. It's 25 years old, and there is no clear successor. So folks recommending GoF are recommending what may well be a kind of dead end in software engineering.
[14:07:34] <dminuoso> cads: Much of it is also patterns revolving around very constrained languages
[14:10:08] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[14:13:40] <cads> dminuoso, I think there are some good modern patterns, for example, View/Viewmodel <-> Interactor <-> Respository. I think this model is only about a decade old. But it is relevant - for example, it has become the foundation for android apps.
[14:14:06] <dminuoso> Sure, I dont mind general architectural design styles
[14:14:07] <cads> and I believe lenses can accomplish basically the same thing, but I haven't seen anyone say so
[14:14:46] <dminuoso> energizer: Mmm, judging from the numbers it seems *roughly* to be the past 30 days
[14:14:52] <dminuoso> Or perhaps a 30 days average
[14:14:55] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[14:15:11] <dminuoso> No it is the past 30 days exactly
[14:15:13] <dminuoso> Misread
[14:16:38] <cads> For reference, here is uncle bob's post announcing the clean architecture https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html
[14:17:02] <Franciman> uncle bob is fun
[14:17:15] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[14:17:33] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[14:18:03] <cads> I don't think it's trying to be a "universal silver bullet for communicatable code" either... it just managed solve scaling problems that, if I were to solve them the naive way, would result in a totally awful an difficult to understand code
[14:19:29] <cads> I suppose that to gain the same kind of confidence with my solutions in haskell, I should dig into papers
[14:20:22] <dminuoso> cads: The only general piece of advice I have:
[14:20:28] <dminuoso> You cant have enough bindings.
[14:21:41] <dminuoso> By creating more bindings, you can provide both smaller representations, as well as various semantic abstractions
[14:25:32] *** Quits: benin (~benin@183.82.26.68) (Ping timeout: 240 seconds)
[14:25:39] <cads> Lol, there are no writings about how to remediate stinky haskell code. Every haskell coder knows their code reeks of pure roses. And may God help you if you say otherwise!
[14:26:34] <dminuoso> Uh, I have written many poor lines of code.
[14:27:29] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:91d4:d998:64f1:2e2f)
[14:27:30] <cads> yeah, but do you want to clean them up?
[14:28:33] <cads> I will keep compiling references on haskell code smells and how to remediate them. If you think of anything, let me know!
[14:28:52] <dminuoso> Yes, sometimes I have the time to do it, othertimes I dont
[14:30:32] <cads> dminuoso, here's an example of an article claiming /descriptive variable names/ are a code smell in haskell. I think you'll enjoy it for its zaniness, and I'd be curious if you agree with the final conclusion! file:///home/m/Zotero/storage/YI3V6P9L/insufficiently-polymorphic.html
[14:30:35] <cads> oops
[14:30:52] *** Joins: alx741 (~alx741@181.196.68.101)
[14:30:56] <cads> https://degoes.net/articles/insufficiently-polymorphic
[14:31:32] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:91d4:d998:64f1:2e2f) (Ping timeout: 240 seconds)
[14:34:26] <dminuoso> cads: Im not really interested in discussing that article.
[14:35:00] <cads> what's to discuss? It's wrong, lol.
[14:35:13] <dminuoso> My issue with it is deeper than that
[14:36:27] *** Joins: neurocyte0132889 (~neurocyte@212.232.89.58)
[14:36:27] *** Quits: neurocyte0132889 (~neurocyte@212.232.89.58) (Changing host)
[14:36:27] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:38:20] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:40:26] <dminuoso> It's just one of those many typical blog articles people put out there for publicity. It's poorly written with non-motivating example, some random claims with poor reasoning..
[14:41:03] <cads> yeah, I want to yell at john for the example being bullshit, but I am physically scared of him
[14:42:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:44:07] <cads> I feel like the article would be good if the suggested refactoring - "Extract Monomorphism" - were really desribed with enough detail
[14:45:55] <cads> this sort of "Problem -> Refactoring Method -> Solution" triples are really all we can hope for when learning about a code smell. Not universal principle, but a useful option in the toolbelt. I feel a dearth of that sort of support in haskell
[14:46:25] <cads> but I guess I should be the solution I wanna see, and use haskell more
[14:46:45] *** Joins: nschoe (~quassel@178.251.84.79)
[14:48:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[14:48:10] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:49:06] *** Joins: max22- (~maxime@2a01cb088335980069e80be440b085a5.ipv6.abo.wanadoo.fr)
[14:56:19] *** Quits: deadmarshal (~deadmarsh@95.38.112.170) (Ping timeout: 250 seconds)
[14:59:01] *** Joins: tomku (~tomku@user/tomku)
[15:00:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:09:17] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:10:34] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:d8ab:2e91:63f7:db6e) (Ping timeout: 268 seconds)
[15:16:32] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 240 seconds)
[15:17:05] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[15:24:21] *** Joins: benin (~benin@183.82.26.68)
[15:25:18] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:26:14] *** Joins: v01d4lph4 (~v01d4lph4@223.190.93.72)
[15:26:14] *** Quits: v01d4lph4 (~v01d4lph4@223.190.93.72) (Changing host)
[15:26:14] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[15:28:31] *** Joins: Cajun (~Cajun@user/cajun)
[15:29:38] *** Quits: nuh^ (~nuh@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[15:31:14] <maerwald> "Monomorphic code is much more likely to be incorrect than polymorphic code"
[15:31:16] <maerwald> ahahaha
[15:31:26] <maerwald> has he ever used lens?
[15:31:57] <maerwald> the gap between "yeah, it compiles" and "yeah, it actually does what I think it does"
[15:32:44] * geekosaur thinks they're reaching for "properly typed code is much more likely to be correct" and missed by quite a margin
[15:33:06] <geekosaur> but still this is not someone I want on my team
[15:33:09] <maerwald> or classes so abstract that knowing their laws gives you zero help with understanding what they *actually do* in this context
[15:33:59] *** Quits: bah (~bah@l1.tel) (Ping timeout: 244 seconds)
[15:34:27] <lortabac> I think his claim is true if we are only talking about parametric polymorphism
[15:34:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:34:49] <cads> geekosaur, forget team. This is someone that you could have /as your CEO/.
[15:35:14] <geekosaur> that's still my team in some sense. and I'd be looking for a way out
[15:35:41] <cads> I would be lifting weights, because gains is the only way to earn a meathead's respect.
[15:36:13] <cads> once you have greater gains you can tell them the idea is ludicrous
[15:36:28] * cads supposes that is still a toxic dynamic
[15:36:28] <geekosaur> not interested in a meathead's respect tbh
[15:37:03] <maerwald> why did this turn into ad hominem?
[15:37:13] <cads> sorry
[15:37:32] <maerwald> "Whether in OOP or FP, the effect is the same: making the code more polymorphic reduces the space of possible implementations."
[15:37:39] <maerwald> that's not entirely false
[15:38:04] <maerwald> but really hard to generalize
[15:38:41] <maerwald> I'm writing a backend and I want my code actual things... you can't have all polymorphic  functions. You need some data in the end.
[15:41:50] <maerwald> "In other words, if your method only needs to know if a thing is a Shape, then don’t also require it to be a Hexagon (a subtype of Shape)."
[15:42:11] <maerwald> seems like there's a small truth that was simply over-marketed with clickbait
[15:42:52] <maerwald> your fairly standard blog post
[15:43:01] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[15:46:33] *** AlexNoo_ is now known as AlexNoo
[15:55:13] *** Quits: benin (~benin@183.82.26.68) (Quit: The Lounge - https://thelounge.chat)
[15:55:18] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[15:55:40] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[15:59:21] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[15:59:36] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:00:32] *** Joins: CiaoSen (~Jura@p5dcc1a24.dip0.t-ipconnect.de)
[16:00:48] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[16:01:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[16:01:58] *** Joins: benin (~benin@183.82.26.68)
[16:02:53] *** Quits: benin (~benin@183.82.26.68) (Client Quit)
[16:03:54] *** Quits: servytor (uid525486@id-525486.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:05:04] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:13:01] *** Quits: ubert (~Thunderbi@p200300ecdf4fca8de6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:13:29] *** Joins: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr)
[16:16:25] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:20:07] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[16:22:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[16:23:02] *** Quits: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr) (Ping timeout: 240 seconds)
[16:26:44] *** Joins: deadmarshal (~deadmarsh@95.38.112.170)
[16:29:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:91d4:d998:64f1:2e2f)
[16:29:02] *** Joins: ubert (~Thunderbi@ip5b405828.dynamic.kabel-deutschland.de)
[16:29:25] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:31:27] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[16:33:26] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:91d4:d998:64f1:2e2f) (Ping timeout: 245 seconds)
[16:33:49] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Remote host closed the connection)
[16:34:02] *** Quits: max22- (~maxime@2a01cb088335980069e80be440b085a5.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:40:47] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[16:43:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:47:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[16:47:33] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[16:51:12] *** Quits: _xor (~xor@72.49.199.147) (Quit: brb)
[16:54:24] *** Joins: favonia (~favonia@user/favonia)
[16:57:30] *** Quits: jumper149 (~jumper149@80.240.31.34) (Quit: WeeChat 3.3)
[16:57:35] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[16:57:55] *** Joins: Sgeo (~Sgeo@user/sgeo)
[16:58:04] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[17:00:05] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 264 seconds)
[17:01:51] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:03:05] *** Quits: pbrisbin (~patrick@pool-173-49-152-45.phlapa.fios.verizon.net) (Quit: WeeChat 3.3)
[17:08:32] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 240 seconds)
[17:08:53] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[17:09:40] *** Joins: pbrisbin (~patrick@pool-173-49-152-45.phlapa.fios.verizon.net)
[17:12:28] *** Joins: max22- (~maxime@2a01cb08833598001f1c158e8ac3c365.ipv6.abo.wanadoo.fr)
[17:13:02] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[17:17:08] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 246 seconds)
[17:17:29] *** Quits: max22- (~maxime@2a01cb08833598001f1c158e8ac3c365.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[17:20:02] *** Quits: CiaoSen (~Jura@p5dcc1a24.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:20:13] *** Joins: Guest60 (~Guest60@2401:4900:2182:6f84:1:2:1508:28d5)
[17:21:19] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[17:21:25] *** Quits: deadmarshal (~deadmarsh@95.38.112.170) (Ping timeout: 256 seconds)
[17:21:32] <yin> why isn't `f \x -> y` parsed as `f (\x -> y` ?
[17:21:49] <yin> why isn't `f \x -> y` parsed as `f (\x -> y)` ? *correction
[17:22:24] <geekosaur> I think it is with BlockArguments?
[17:22:44] <geekosaur> don't recall how it gets parsed without
[17:23:11] <dminuoso> It doesn't get parsed at all
[17:23:45] <yin> i don't see ambiguity
[17:23:54] *** Joins: gaff (~gaff@49.207.215.230)
[17:23:55] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[17:23:57] <dminuoso> yin: Look at the grammar difference in https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0090-block-arguments.rst
[17:25:14] <dminuoso> That is: https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0090-block-arguments.rst#proposed-change-specification
[17:25:40] <yin> i see
[17:26:11] <yin> what a mess
[17:26:17] *** Joins: _xor (~xor@72.49.199.147)
[17:27:30] <gaff> i have some code at https://paste.ofcode.org/DCiTkXtTH7YHPbcY97b5Bd
[17:28:01] <gaff> i would like to know how `readsPrec` in the code works -- it seems to be infinitely recursive
[17:28:16] *** Quits: Guest60 (~Guest60@2401:4900:2182:6f84:1:2:1508:28d5) (Ping timeout: 256 seconds)
[17:30:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9800:a4d7:a74e:e38)
[17:31:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:32:23] <geekosaur> note that the r in each case is different because of the lambda binding
[17:32:46] <geekosaur> so readsPrec is polymorphically recursive and will eventually bottom out at a leaf
[17:32:47] *** Joins: Farzad (~FarzadBek@178.131.31.143)
[17:33:14] <geekosaur> (that code is kinda unfortunate, reusing bindings like that is fairly confusing)
[17:33:56] *** Joins: v01d4lph4 (~v01d4lph4@223.190.93.72)
[17:33:56] *** Quits: v01d4lph4 (~v01d4lph4@223.190.93.72) (Changing host)
[17:33:56] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[17:34:32] <geekosaur> so r is successively an entire tree node, then the left subtree, then the right subtree, the latter two captured by lambda bindings
[17:34:48] <gaff> geekosaur: yeah, very confusing ... what do you mean by "reusing the binding"?  i didn't understand ...
[17:34:53] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9800:a4d7:a74e:e38) (Ping timeout: 264 seconds)
[17:34:54] <yin> what's the reason for Control.Monad.State not exporting the State data constructor, and providing instead the functino state :: (s -> (a,s)) -> State s a ?
[17:34:57] <geekosaur> calling them all "r"
[17:35:07] <gaff> oh ok
[17:35:21] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[17:35:29] <geekosaur> yin, State is not a data constructor, it's an alias for StateT s Identity
[17:35:42] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[17:36:11] <geekosaur> which can't be used to construct a new State, so we need the function state. or a bidirectional pattern binding, which I think is being considered for later releases?
[17:36:27] <yin> ah i see. i was outdated
[17:37:04] *** Quits: ubert (~Thunderbi@ip5b405828.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[17:37:06] <geekosaur> yeh, the data constructor was form mtl1 days
[17:37:10] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[17:37:13] <geekosaur> *from
[17:39:51] *** Joins: deadmarshal (~deadmarsh@95.38.112.170)
[17:39:52] *** Joins: utk (~utk@43.241.192.170)
[17:39:58] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[17:41:40] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:41:43] <geekosaur> hm, actually I misspoke because they're all Tree nodes, so it's not polymorphic
[17:41:54] <geekosaur> they're just different nodes
[17:42:07] <geekosaur> it's still needlessly confusing
[17:42:49] <yin> they're all what now?
[17:43:06] <geekosaur> that was about gaff's question, not yours
[17:43:14] <geekosaur> sorry
[17:43:41] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[17:43:58] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[17:45:56] <gaff> geekosaur: yeah, i was wondering about what you said about being polymorphic
[17:46:08] <yin> :)
[17:46:23] <geekosaur> there should still be a polymorphic use since there are presumably values involved somewhere, not just tree nodes
[17:46:32] <gaff> i think the recursion convergence happens in the application of `readParen`
[17:46:35] <geekosaur> but those aren't polymorphic
[17:47:15] *** Joins: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr)
[17:47:34] <gaff> my concern was -- how does `readsPrec` converge?
[17:48:04] <gaff> i think that happens in the code for `readParen`
[17:48:10] <geekosaur> each subsidiary use of readsPrec is reading a different thing, either another tree node or a value
[17:49:01] <gaff> it is a very confusing code -- i wouldn't write it this way if i could
[17:49:38] <gaff> the code for readParen is @ https://downloads.haskell.org/~ghc/8.4.2/docs/html/libraries/base-4.11.1.0/src/GHC.Read.html
[17:49:42] <geekosaur> outer_r = [(] left_subtree_r :^: right_subtree_r [)]
[17:49:49] <gaff> ok
[17:50:21] <geekosaur> where left_subtree_r and right_subtree_r may be another split Tree node or a Leaf with a value attached, as I read it
[17:50:41] <gaff> correct
[17:50:47] <geekosaur> the code should really have used something like t, lt,k rt to distinguish instead of calling them all r
[17:51:00] <geekosaur> s/lt,k/lt,/
[17:52:19] <geekosaur> so eventually readsPrec will bottom out at a Leaf node and invoke itself one more time to read the value (this is the polymorphic one)
[17:52:42] *** Quits: deadmarshal (~deadmarsh@95.38.112.170) (Ping timeout: 250 seconds)
[17:53:07] <gaff> ok
[17:53:08] <geekosaur> of course it may not actually bottom out there, since the values may be lists or even new Trees
[17:53:23] <geekosaur> but eventually it will bottom out
[17:53:33] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[17:53:39] <gaff> exactly, otherwise you couldn't define a Tree
[17:53:49] <gaff> it has to bottom out
[17:56:46] <geekosaur> it may be easier to follow what's going on by looking at how lists work, since it's only recursive once instead of twice
[17:57:03] <geekosaur> each node of a [a] is (a : [a])
[17:57:25] <gaff> geekosaur: yea, i know ... but this is the code given in the haskell report 2010, so i wanted to understand it
[17:57:28] <geekosaur> and you bottom out when the value on the right of the (:) is []
[17:57:29] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[17:58:12] <gaff> also, writing a custom `readsPrec` is not that easy, i think
[17:58:39] <geekosaur> it's fairly mechanical, actually. just a fair amount of work, which is why we make the compiler do it for us
[17:58:51] <gaff> ok
[17:58:52] <geekosaur> deriving Read wouldn't work if it were actually hard
[17:59:15] <gaff> just like `Show`, you mean?
[17:59:53] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[17:59:55] <gaff> writing a custom showsPrec is not hard
[18:00:10] <geekosaur> right
[18:00:21] <gaff> of course, you can derive `Show` as well
[18:00:24] <geekosaur> readsPrec is a little more work, but not that much more
[18:00:29] *** Quits: utk (~utk@43.241.192.170) (Quit: WeeChat 2.8)
[18:00:30] <gaff> correct
[18:01:04] <geekosaur> more fiddly but it's all mechanical to the point that the Report specifies how the compiler should do it (well, that the compiler should do something equivalent to it)
[18:01:25] <gaff> yeah  ... 
[18:01:38] *** Quits: dmwit (~dmwit@pool-173-73-185-183.washdc.fios.verizon.net) (Ping timeout: 265 seconds)
[18:01:44] <f-a> when I compile a program and run it on another machine I get: «error while loading shared libraries: libffi.so.7: cannot open shared object file: No such file or directory». Is there a way to catch this error? I would like if possible to print a more friendly version for people who are less used to such errors.
[18:01:54] <gaff> geekosaur: how long have you been working with haskell?  you seem to know a lot :)
[18:02:32] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 240 seconds)
[18:02:49] <geekosaur> 2007
[18:03:06] <gaff> wow ... that's a really long time :)
[18:03:40] <gaff> it's a beautiful language
[18:04:04] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[18:04:16] <geekosaur> f-a, that's output by the shared object loader before your program even runs. there are some environment variables you can set to control what the loader does (see ld.so(8) on linux) but afaik the only way to catch them is a wrapper script
[18:04:27] <gaff> and the people in it, unlike some of the other places, really come to haskell because of its beauty ... they just love it  ... and i like that
[18:05:25] <f-a> argh, that is less than optimal geekosaur (but better than nothing, I guess)
[18:05:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[18:05:43] <geekosaur> (I'm oversimplifying a little bit, your program uses ld.so as its "interpreter", but no code you write can intercept what ld.so does)
[18:05:53] <gaff> geekosaur: thanks a bunch.  i will look into the code more with your ideas ... and if there some things unclear i will get back here
[18:06:54] *** Quits: gaff (~gaff@49.207.215.230) ()
[18:09:32] *** Quits: nschoe (~quassel@178.251.84.79) (Ping timeout: 240 seconds)
[18:12:47] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[18:14:41] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 256 seconds)
[18:15:32] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[18:15:48] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[18:16:59] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 246 seconds)
[18:17:38] *** Joins: favonia (~favonia@user/favonia)
[18:18:14] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 260 seconds)
[18:18:51] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[18:18:51] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[18:18:51] *** Joins: turlando (~turlando@user/turlando)
[18:19:33] *** Quits: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr) (Ping timeout: 250 seconds)
[18:23:50] *** Joins: nschoe (~quassel@178.251.84.79)
[18:24:47] *** Quits: nschoe (~quassel@178.251.84.79) (Client Quit)
[18:25:45] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:25:45] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:25:45] *** Joins: wroathe (~wroathe@user/wroathe)
[18:27:40] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[18:28:11] *** Joins: rtsn (~nstr@user/rtsn)
[18:28:46] *** Quits: favonia (~favonia@user/favonia) (Quit: Leaving)
[18:29:07] *** Joins: hololeap (~hololeap@user/hololeap)
[18:29:41] *** Joins: gaff (~gaff@49.207.215.230)
[18:30:07] *** Quits: gaff (~gaff@49.207.215.230) (Client Quit)
[18:35:00] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (Ping timeout: 260 seconds)
[18:35:20] *** Joins: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb)
[18:35:36] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[18:35:57] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[18:36:23] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[18:36:56] *** Quits: Farzad (~FarzadBek@178.131.31.143) (Ping timeout: 246 seconds)
[18:38:03] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:38:11] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 250 seconds)
[18:41:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 246 seconds)
[18:43:45] *** Joins: jkaye (~jkaye@2601:281:8300:7530:49b1:9f67:bcbc:61f)
[18:44:59] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[18:45:05] *** Joins: xkuru (~xkuru@user/xkuru)
[18:47:11] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[18:51:37] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 250 seconds)
[18:52:43] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:52:53] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[18:53:11] *** Joins: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr)
[18:53:18] *** Quits: Xnuk (~xnuk@vultr.xnu.kr) (Remote host closed the connection)
[18:54:50] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[18:59:51] *** Joins: asthasr (~asthasr@162.210.28.151)
[19:00:29] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:12:12] *** Joins: max22- (~maxime@2a01cb0883359800c49e7f6f9540e9e4.ipv6.abo.wanadoo.fr)
[19:12:21] <yin> i don't like transformers
[19:12:37] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:12:57] <yin> /vent
[19:19:29] <sshine> how do you transmit electric current between circuits, then?
[19:20:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:20:29] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[19:20:36] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[19:21:15] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[19:22:43] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:22:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:24:49] <dminuoso> With a pair of cables?
[19:25:02] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 240 seconds)
[19:25:32] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[19:25:51] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[19:26:11] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.3)
[19:26:28] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:26:39] *** Joins: Farzad (~FarzadBek@185.131.125.102)
[19:28:06] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[19:28:16] <kuribas> with copper traces.
[19:28:46] *** Quits: Farzad (~FarzadBek@185.131.125.102) (Client Quit)
[19:28:59] <dminuoso> Also, you can use capacitors to achieve the same effect!
[19:29:05] <dminuoso> (See capacitive power supplies)
[19:29:27] <kuribas> transformers provide impedance matching
[19:31:09] <maerwald> I also don't like them. They're clunky and have no precise semantics. You always reason about them operationally, from experience and pitfalls (e.g. MonadFail behavior in ExceptT).
[19:31:28] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[19:32:47] <dsal> yin: there are lots of effect systems because everyone dislikes each of them.
[19:33:25] <dsal> My least favorite is "all functions are in IO" which seems to be required in every other programming language.
[19:33:43] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[19:34:15] <maerwald> effects systems just shift the problem to the interpreter... now you can't reason about anything, because you don't know what interpreter is run when looking at a function?
[19:35:07] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[19:35:11] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[19:35:50] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Quit: -)
[19:36:05] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[19:37:32] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[19:38:43] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[19:41:43] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:e288:155f:c333:ecf4) (Quit: WeeChat 2.8)
[19:41:48] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[19:42:17] *** Joins: deadmarshal (~deadmarsh@95.38.112.170)
[19:43:09] <maerwald> imagine file system effects as a DSL... even something seemingly simple as 'copyFile' or 'deleteFile' can have 10 different implementations. Differences in atomicity, error handling, recursion (cp -r) etc etc
[19:43:21] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[19:45:38] <dolio> "All functions are in IO" isn't even a good effect system.
[19:45:52] <maerwald> it's honest though
[19:46:39] *** Quits: deadmarshal (~deadmarsh@95.38.112.170) (Ping timeout: 250 seconds)
[19:53:19] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:54:04] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[19:57:56] *** Quits: mbuf (~Shakthi@136.185.69.244) (Quit: Leaving)
[19:58:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[19:58:53] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 264 seconds)
[20:01:20] *** Joins: bah (~bah@l1.tel)
[20:03:51] *** Quits: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com) (Quit: leaving)
[20:03:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:04:22] <monochrom> I am a formal methods person. I like precise semantics. But as much as I do that, I recognize that most programmers don't care.
[20:05:02] <dolio> The problem isn't a lack of precision.
[20:05:05] <monochrom> They use good-enough approximate models all the time. Not just for MonadState. For everything. For C. For jquery.
[20:05:11] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[20:06:09] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:06:09] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:06:09] *** Joins: wroathe (~wroathe@user/wroathe)
[20:06:43] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:06:54] <dolio> It's the same problem as the mindset of only thinking about types as catching errors.
[20:07:25] <monochrom> I know how to give MonadState a precise semantics. There is already a paper doing that, to (MonadState s m) => ... alone. I know what it is missing, the usual frame problem of what happens if you have instead (MonadState s m, MonadWriter w m) => .... I know how to use the usual solutions to the frame problem to solve that. It can all be done.
[20:07:54] <monochrom> But I don't anticipate that users will actually value that.
[20:08:27] <maerwald> Well, here's the problem: not everything is precise (filesystems, networks, ...). I feel `IO` captures this pretty well, by saying "you have to apply operational reasoning right now". I wonder if we could make this distinction better somehow, but probably not
[20:08:27] <dolio> Monads in Haskell, and other recent effect stuff aren't just more precisely dividing up which parts of the program use some pre-canned set of effects. The 'effects' are additional ways of structuring programs.
[20:08:29] *** Joins: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com)
[20:08:38] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[20:09:12] <monochrom> Yeah, the types are expressing interfaces.
[20:10:10] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[20:10:10] *** Quits: dajoer (~david@user/gvx) (Quit: leaving)
[20:10:36] <maerwald> which is non-declarative, in a way
[20:11:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[20:11:35] <maerwald> The only thing my mtl constraints tell me is what functions might be used further down in the callstack. It rarely helps with figuring out what's going on though.
[20:12:16] <maerwald> but I have no idea how to make it better. I think there's a somewhat hard problem here though
[20:14:39] <yushyin> every time I switch to this channel and read a bit, it's always the same discussions :D (and often the same people too)
[20:14:49] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[20:15:12] *** Joins: cheater (~Username@user/cheater)
[20:15:18] <monochrom> Don't worry, I try to give new information! Like this time. I had never said that thing before.
[20:15:38] <yushyin> ;)
[20:17:05] <monochrom> Even Haskell itself lacks a precise semantics. Not one that enjoys community consensus.
[20:18:00] <monochrom> Javascript has a precise semantics but programmers don't actually use it; most don't even know that it exists.
[20:18:31] <monochrom> And libraries. Most libraries don't have precise semantics. Any language.
[20:19:24] <monochrom> I want you to meditate on how programmers still have the empirical success they have now, despite this.
[20:22:25] <maerwald> can you propose precise semantics for a blockchain? xD
[20:22:33] *** Joins: alzgh (alzgh@user/alzgh)
[20:23:22] <maerwald> or... dependency resolution
[20:23:35] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[20:25:20] *** Joins: jokleinn (~jokleinn@user/jokleinn)
[20:25:22] *** Joins: gaff (~gaff@49.207.215.230)
[20:25:31] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[20:25:34] *** Quits: gaff (~gaff@49.207.215.230) (Client Quit)
[20:25:35] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[20:25:39] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c7149f82889e7e27a4cfa8d6.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[20:25:51] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[20:27:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9800:a4d7:a74e:e38)
[20:27:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:28:46] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[20:29:38] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 246 seconds)
[20:30:18] *** Joins: alzgh (~alzgh@user/alzgh)
[20:30:32] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[20:31:03] *** Joins: emf (~emf@2620:10d:c090:400::5:b872)
[20:32:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[20:32:29] *** Quits: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr) (Ping timeout: 264 seconds)
[20:33:32] *** Quits: rkrishnan (~user@122.167.19.65) (Ping timeout: 240 seconds)
[20:33:32] *** Quits: jokleinn (~jokleinn@user/jokleinn) (Quit: WeeChat 3.3)
[20:35:30] *** Joins: servytor (uid525486@id-525486.hampstead.irccloud.com)
[20:35:30] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[20:35:58] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[20:36:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[20:38:37] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[20:42:11] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[20:42:42] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:43:34] *** Joins: img (~img@user/img)
[20:45:44] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[20:46:48] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Ping timeout: 260 seconds)
[20:50:47] <yin> yushyin: repetition is good
[20:51:55] <yin> and so is consistency
[20:53:17] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:56:23] *** Joins: mmhat (~mmh@55d4bf19.access.ecotel.net)
[20:59:04] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[20:59:05] *** Joins: waleee (~waleee@192.165.44.49)
[20:59:17] *** Joins: Skyfire (~pyon@user/pyon)
[21:00:27] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Remote host closed the connection)
[21:00:44] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:05:15] *** Joins: psydurr (~psydurr@pool-141-152-27-2.rcmdva.fios.verizon.net)
[21:10:46] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9800:a4d7:a74e:e38) (Remote host closed the connection)
[21:11:35] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[21:14:36] *** Quits: jamestmartin (james@jtmar.me) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[21:14:45] *** Joins: jamestmartin (~james@jtmar.me)
[21:14:49] <dsal> I'm pretty annoyed by repetition.  People genuinely arguing that copying and pasting stuff three times in a row is better than naming it, because, you know, if something has a name, you'd have to look it up.  (then the thing is basically `fromRight` but with an error message and I'd expect anyone reading the code to just know what it did without even looking it up because there's only so much it *can* do).
[21:15:32] <dminuoso> Third alternative, use `replicateM_ 3 foo`
[21:15:53] <dminuoso> Sometimes the trick lies not in naming, but in picking the right tools.
[21:16:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:18:09] *** Joins: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[21:21:20] *** Quits: psydurr (~psydurr@pool-141-152-27-2.rcmdva.fios.verizon.net) (Quit: Leaving)
[21:22:28] <dsal> Heh.  It's three different actions, but the arguments are similar.  I'm in a strange world where people want to use haskell, but are deathly afraid of any abstraction.
[21:22:29] *** Quits: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 246 seconds)
[21:23:05] *** Joins: psydurr (~psydurr@pool-141-152-27-2.rcmdva.fios.verizon.net)
[21:23:14] *** Quits: jamestmartin (~james@jtmar.me) (Remote host closed the connection)
[21:24:08] *** Joins: deadmarshal (~deadmarsh@95.38.112.170)
[21:24:10] <dsal> Now we want to copy and paste `TE.decodeUtf8With TE.lenientDecode` everywhere instead of just naming it somewhere and reusing it because something about making the decision every time or something.  Except we don't, we use that one.
[21:25:30] *** Joins: jamestmartin (james@2600:3c01::f03c:91ff:fefc:20b6)
[21:29:16] <yin> what's that asterisk doing there? https://hackage.haskell.org/package/base-4.16.0.0/docs/Control-Applicative.html#v:liftA
[21:29:49] <awpr> haddock markup mistake
[21:30:01] *** Quits: jamestmartin (james@2600:3c01::f03c:91ff:fefc:20b6) (Client Quit)
[21:30:05] <dsal> liftA f a = pure f <*> a
[21:30:07] <awpr> supposed to be `<*>`, but it looks like it got interpreted as URL syntax
[21:30:10] *** Joins: jamestmartin (~james@2600:3c01:e000:41d::1)
[21:30:16] <geekosaur> yeh, that's markup fail
[21:30:36] *** Joins: nvmd (~nvmd@user/nvmd)
[21:30:46] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[21:31:11] *** Quits: oxytocat (~alloca@2a03:4000:f:7ca:7407:d1ff:fe34:8cd0) (Changing host)
[21:31:11] *** Joins: oxytocat (~alloca@user/suppi)
[21:32:18] *** Quits: nvmd (~nvmd@user/nvmd) (Client Quit)
[21:32:32] *** Joins: nvmd (~nvmd@user/nvmd)
[21:33:22] <yin> another fail:
[21:33:23] <yin>     • The function ‘pure’ is applied to two arguments,
[21:33:23] <yin>       but its type ‘(a0 -> a0) -> m0 a1 -> a0 -> a0’ has only three
[21:33:38] <yin> *only*
[21:35:52] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[21:36:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f805:19de:1108:4b97)
[21:36:40] <maerwald> dsal: deduplication isn't abstraction
[21:37:13] <maerwald> sometimes, duplicating code is the right decision, because the implementations may diverge and coupling will cause bugs and confusion
[21:37:47] <dsal> Sure, I understand the distinction (at least to a degree, it gets fuzzy at some point).
[21:38:11] <maerwald> I start with duplication a lot, in fact... and after I'm done, I look at the overall code, and wonder if I can see an *actual* abstraction
[21:38:33] <maerwald> but it's good to make a note "TODO: maybe factor out"
[21:39:09] *** Joins: econo (uid147250@user/econo)
[21:39:22] <maerwald> starting with the deduplication sends your code on an odd journey, sometimes
[21:39:28] <dsal> The larger argument has been along the lines of "code should continually march off to the right in case statements" and I'm like, "Hey, this always does the same thing in `Left` and `Nothing` cases and you only really care about the end result of all the Rights/Justs.  What if we *don't* have all that stuff?
[21:39:36] <maerwald> introducing boolean flags to functions, for instance
[21:39:52] <dsal> I do tend to start writing things that are less ideal in many cases.  Gets me going at least.
[21:40:11] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 250 seconds)
[21:41:45] *** Joins: utk1 (~utk@43.241.192.170)
[21:42:00] *** Parts: utk1 (~utk@43.241.192.170) ()
[21:42:08] <maerwald> all good projects start with "I don't know what I'm doing"
[21:42:22] <johnjay> maerwald: i think the assumption is you'll build a bunch of stuff on top of your code
[21:42:31] <johnjay> so then you can't feasibly refactor it later to remove the duplication
[21:42:50] <maerwald> that means there is no duplication
[21:43:01] <maerwald> it just started with a similar structure
[21:43:32] *** Joins: utk1 (~utk@43.241.192.170)
[21:43:36] <johnjay> well if you define x to be 1 a hundred times that's a hundred things to unite under one abstraction
[21:43:39] <yin> all good projects start with "i know what i'm *not* doing" i find
[21:44:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:44:14] <maerwald> johnjay: I can't follow this example
[21:44:41] <maerwald> I'm pretty sure you'll find a couple of hundred variables in big codebases (maybe even GHC RTS) that are just 1
[21:44:50] <dsal> The argument here is the opposite.  It's something along the lines of "If we make functions for things we do, we won't be able to understand what we're doing without understanding those functions!"
[21:44:55] <johnjay> yes but that's not what i mean
[21:45:23] <maerwald> and 1 here may be an index, length of a list, and a hundred other things
[21:45:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:45:30] <geekosaur> dsal, I feel like they should go back to MS-BASIC
[21:45:35] <maerwald> that are fine to name explicitly
[21:45:39] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Remote host closed the connection)
[21:45:39] <johnjay> ok how about a simple example. in every file you need an array of length 10
[21:45:49] <johnjay> so you define it each time instead of one global array
[21:46:16] <johnjay> whether that was a good idea can only be determined later. that's the problem
[21:47:00] *** Parts: utk1 (~utk@43.241.192.170) (WeeChat 2.8)
[21:47:08] <maerwald> I don't see the problem. You can always refactor later.
[21:47:33] <dsal> geekosaur: Honestly, I can't tell what are actual arguments and what are strawman.  I have code like `thing1 <- errLeft "can't getThing1" =<< getThing1` and they're like, "I can't know what this code does without going to read the definition of `errLeft`"  I'm like... are you sure?  Maybe it can use a better name, but `getThing1` returns an `Either err Thing1` and you're using a `Thing1` here.
[21:48:43] <dsal> One of the pieces I suggested changing looks like this: https://usercontent.irccloud-cdn.com/file/QK1uEeLR/abstraction.png
[21:49:13] <maerwald> the original looks like junior code
[21:49:23] <dsal> They preferred #1 for readability, but were willing go with #3.   I can almost understand that, but I'm having trouble understanding if there's a *real* concern.
[21:49:31] <dsal> It *was* fairly junior code.
[21:49:45] <awpr> even the JavaScript community hates the first option enough to add entire language features to avoid it
[21:49:58] *** Joins: utk (~utk@2001:470:69fc:105::1:2fe0)
[21:50:05] <maerwald> you mean nested promises vs await?
[21:50:06] *** Joins: utk1 (~utk@43.241.192.170)
[21:50:07] <dsal> I was like, "hey, that's harder to follow (it was much longer stuff that marched all the way off the screen)", how about this!?  Senior person hated it and thought it made the code harder to read with no value.
[21:50:08] <awpr> (in the case of promises with cascading nested functions -> async notation for promises)
[21:50:10] <awpr> yeah
[21:50:28] <geekosaur> senior person sounds very junior to me
[21:50:31] <maerwald> I've written nested promises code a long time ago in angular 1 I think
[21:50:44] <maerwald> sometimes you get your brackets wrong, like in clojure
[21:50:48] <maerwald> stuff still runs
[21:50:52] <maerwald> but does something else
[21:51:08] <dsal> Senior person is very opinionated and has various credentials and stuff. Has some good ideas, but I'm having a difficult time just accepting them without buy-in.
[21:51:21] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[21:51:34] <johnjay> isn't embedding implicit datastructures in nested case or for loops Always A Bad Idea?
[21:52:01] <maerwald> dsal: I usually just give up then. The time arguing wastes more of my energy than just abiding by a couple of nonsense.
[21:52:25] *** Quits: jamestmartin (~james@2600:3c01:e000:41d::1) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[21:52:36] <johnjay> yes. you don't get to define reality, that's the project manager's job
[21:52:47] <dsal> Yeah, I just didn't write any code yesterday because it's equivalent to writing code I think is an obvious improvement and then having it rejected for reasons I disagree with and can't be helped to understand.
[21:52:57] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[21:53:19] <maerwald> e.g. when it's about code formatting, my stance is: "I'll do whatever you want, but please leave me alone with review comments about style, unless those are formalised rules"
[21:53:46] <maerwald> and I don't want to be involved in any discussions about code formatting
[21:54:01] <dsal> Right, there are formalized rules.  It's a new project and I disagree with some of them, but don't get any say.  I really dislike ormolu, but one of the tenants is that someone picks one and everyone has to use it and you can't discuss it.
[21:54:06] <yin> and if they are formalised rules, just have a stiler do it
[21:54:18] <maerwald> yin: yeah
[21:54:21] <geekosaur> tenets?
[21:54:29] <dsal> Sorry, yeah.  heh
[21:54:35] <maerwald> ormolu is odd, yes
[21:54:43] <maerwald> forces me to squint
[21:54:49] *** Joins: h187 (~coady@185.17.27.105)
[21:54:55] <dsal> It's not universally terrible, but it does a few things that I think make things more difficult to read.
[21:55:12] *** Quits: mei3 (~mei@user/mei) (Read error: Connection reset by peer)
[21:55:21] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[21:55:23] <maerwald> I like this as a style rule: everyone please do whatever the f*** they want.
[21:55:36] <maerwald> This worked on a pretty large codebase, btw. The world didn't stop.
[21:55:47] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[21:55:48] <geekosaur> I actually think consistent style is a good thing, especially in an indentation sensitive language
[21:55:55] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[21:55:57] <yin> maerwald: problem is, there are infinite distinct ways of doing the same thing
[21:55:59] <maerwald> I don't think consistent style serves any purpose
[21:56:08] <maerwald> except helping some people with their OCD
[21:56:09] <geekosaur> I don't always agree with the chosen style, but I''ll abide by it
[21:56:46] <maerwald> yin: it's not a problem... it actually gives me information, because I can see from the style who touched the code (and how many) without even opening git blame
[21:57:02] <yin> oh i don't mind alignment and such, that's the automatic formatters job
[21:57:02] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 240 seconds)
[21:57:03] <exarkun> maerwald: So ... it helps some people? :)
[21:57:23] <maerwald> I mean, programmers have trained their brains to see patterns...
[21:57:29] <yin> maerwald: lol
[21:57:33] *** Joins: jakalx (~jakalx@base.jakalx.net)
[21:57:44] *** Parts: utk1 (~utk@43.241.192.170) (WeeChat 2.8)
[21:57:47] <yin> that's one reason i dont like vertical alignment
[21:57:49] <dsal> ormolu specifically mutilates any alignment or indentation.
[21:57:59] <maerwald> if you work with your team mates for 6+ months, you'll know every single weird code style they have
[21:58:28] <dsal> It also really hates putting more than one thing on a line.  So you end up with really tall code and reverse indentation.
[21:58:58] *** Joins: mei3 (~mei@user/mei)
[21:59:26] <yin> my brain is trained to read the body of a where clause at char x. vertically aligning stuff by the arbitrary number of characters that it took to define the function makes no sense
[21:59:50] <dsal> I like having some alignment in my imports and relatively short pattern matching.  You know, get the `=` and `->` lined up so you can easily tell the difference between the left side and right side across all cases.
[22:00:04] <maerwald> oh, but what I believe in is this: use a lot of where clauses with cool names, so that the main function body really reads like prose
[22:00:14] <yin> dsal: yes, that i consider helpful
[22:00:23] *** Joins: gg (~gg@2a01:e0a:819:1510:4c29:c873:f42e:2b2)
[22:00:28] <yin> maerwald: yes!
[22:00:44] <yin> and forget that if then else exists
[22:00:59] <yin> and use let in sparingly
[22:01:18] <johnjay> yeah code formatting is definitely one area you need a consistent standard
[22:01:19] <dsal> elm folks thought that the most important thing in formatters was making sure that whatever diff tool they use shows the smallest diff for any change possible, so they built their canonical formatter around that. ormolu followed.  Those with better tools ore other priorities are SOL.
[22:01:25] <maerwald> it allows you to skip the details and get high-level understanding of what functions do
[22:01:55] <dsal> yin: It probably wouldn't surprise you that these people prefer `let` over `where` most of the time.
[22:02:17] <yin> who are these peple?
[22:02:31] <yin>                ^o
[22:02:35] <johnjay> dsal's coworkers
[22:02:37] <maerwald> yin: but one problem is that you can't have: 1. where-clauses where functions don't see each other and 2. where-clauses that don't have access to top-level arguments
[22:02:39] *** Joins: jamestmartin (~james@jtmar.me)
[22:02:44] <johnjay> what I want to know is who "they" are
[22:02:48] <dsal> yin: one person who's relatively well-known and a bunch of people who are learning Haskell.
[22:03:02] <maerwald> if there was a GHC extension with more restrictive `where`, I'd use that
[22:03:12] <dsal> A lot of the arguments are "I, as someone learning Haskell don't understand this thing that you did at first glance."
[22:03:17] <jkaye> More restrictive how?
[22:03:26] <maerwald> see above
[22:03:32] <johnjay> dsal: that's a legitimate argument though. if most of the team is like that
[22:03:54] <johnjay> my take is you should put a comment saying this is tricky or advanced code
[22:04:09] <johnjay> instead of punishing someone for using the features the language provides
[22:04:21] <vaibhavsagar[m]> I will admit to liking `let` over `where`
[22:04:21] <jkaye> Whoops
[22:04:31] *** Joins: nineonine (~nineonine@2604:3d08:7780:cd00:94f7:1c4f:2fa7:9763)
[22:04:33] <dsal> johnjay: In abstract, sure.  But it degrades to never naming anything because someone won't immediately know what it means and will have to go look it up instead of just writing out lots of stuff all the time.
[22:04:35] <yin> maerwald: use pattern guards?
[22:04:56] <yin> (pattern guards are my guilty pleasure)
[22:05:10] <johnjay> dsal: yeah i don't get that myself. there's nothing wrong with having a URL in the description pointing to some doc in pdf or html to consult
[22:05:14] *** Quits: jamestmartin (~james@jtmar.me) (Remote host closed the connection)
[22:05:18] <johnjay> sometimes you have to look things up. that's life
[22:05:40] <maerwald> vaibhavsagar[m]: I think I only use `let` in do notation
[22:05:42] <geekosaur> shouldn't looking things up be the job of the editor tool (HLS)?
[22:05:53] <maerwald> no, HLS job is to crash
[22:05:55] <maerwald> xD
[22:05:58] <maerwald> jk
[22:06:14] <dsal> johnjay: Or like, lens is bad because someone saw `_Just` and didn't know what it meant and immediately went to haddock and couldn't understand traversals and blah blah, so I should write a 10 line function every time I need a thing instead of trying to learn something handy in this test.   (Not that everyone should use lens all the time, but that's just not a good way to argue)
[22:06:30] <maerwald> but that has been most of my experience with it
[22:06:38] <vaibhavsagar[m]> maerwald: my current work codebase has a lot of stuff in `where` clauses and IMO it makes it hard to follow the flow of what's happening
[22:06:57] <vaibhavsagar[m]> I have to keep jumping back and forth between the definitions and the function body
[22:06:59] <maerwald> if those are recursive definitions yes
[22:07:28] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f805:19de:1108:4b97) (Remote host closed the connection)
[22:07:37] <johnjay> vaibhavsagar[m]: having 2 windows open can help a lot with that. i'm just starting to do multi-windows on my incredibly widescreen monitor
[22:07:39] <dsal> vaibhavsagar[m]: In general, Haskell is declarative.  You can write what you want done before you write all of the prerequisites.  When it's done well, you only have to jump to those definitions when you need more.
[22:07:44] <yin> vaibhavsagar[m]: just start by reading the where clauses if the function is not obvious enough (which is a separate problem)
[22:07:47] <vaibhavsagar[m]> no, these aren't recursive
[22:07:48] <vaibhavsagar[m]> but even in my own non-work code I like `let` clauses
[22:08:02] *** Quits: h187 (~coady@185.17.27.105) (Remote host closed the connection)
[22:08:08] *** Joins: x6C697370 (~michael@2600:1700:7c02:3180::49)
[22:08:17] <dsal> In practice, the difference is between looking up and looking down.  Some people strongly want to look up (define all the steps first) and some people want to look down (define the high level goal first, the steps are just details).
[22:08:26] <vaibhavsagar[m]> it's nice that we have both in Haskell though
[22:09:10] <vaibhavsagar[m]> I would say I'm the former
[22:09:10] <yin> ohhh that's where i disagree
[22:09:16] <vaibhavsagar[m]> but it's also the case that this code doesn't make much sense to me
[22:09:30] <dsal> There are plenty of reasons the code may not make sense.  :)
[22:09:31] <yin> i prefer having the least ammount of different ways to achieve the same thing, semantically
[22:10:01] <dsal> Yeah, I agree.  let and where are different, but when it doesn't matter, I prefer where.  There are different kinds of cases where it matters.
[22:10:19] <maerwald> could define a new keyword `there`, which disallows recursive definitions and can't access top-level function arguments and 
[22:10:45] <vaibhavsagar[m]> that's nice until the language removes both `let` and `where` since everything is functions anyway
[22:10:47] <yin> s/semantic/syntactic
[22:11:03] <yin> maerwald: lol
[22:11:17] <yin> vaibhavsagar[m]: that sounds great actually
[22:11:22] <sshine> maerwald, and a 'thine'
[22:11:26] <vaibhavsagar[m]> https://mail.haskell.org/pipermail/haskell-cafe/2013-July/109116.html
[22:11:46] <awpr> `heretofore xs = 2 : xs0`
[22:11:53] <vaibhavsagar[m]> yin: I think it sounds better in theory than practice
[22:12:16] <sshine> let x = 5. it is known.
[22:12:20] <awpr> or `henceforth`
[22:12:34] <vaibhavsagar[m]> it's fine to disagree, but I'm glad we're not working on the same codebase :)
[22:12:36] <yin> who cares about practice? 
[22:12:40] <awpr> maybe it would implicitly insert its contents as `where` bindings whenever its free variables are in scope
[22:12:47] <sshine> awpr, henceforth is nice because it wouldn't allow for recursive definitions. :)
[22:13:33] <dsal> awpr: Ha, dude loves RecordWildCards, but thinks NamedFieldPuns is bad because it just adds extra syntax that's confusing.
[22:14:00] <yin> i'm tongue in cheek, by the way. this are very minor annoyances, and completely acceptable divergences in _preference_
[22:14:17] <dsal> He thinks the same about TupleSections which is extra weird to me because I'd think most people would discover that by assuming it works and being told to turn it on.  That's how I did, anyway.
[22:14:31] <yin> awpr: we already have 'otherwise'
[22:14:45] <dsal> I should start using otherwise randomly.
[22:14:46] *** Quits: utk (~utk@2001:470:69fc:105::1:2fe0) (Quit: Reconnecting)
[22:14:53] <vaibhavsagar[m]> good to know, I find it hard to read tone sometimes on IRC
[22:14:54] <maerwald> RecordWildCards are awesome for writing code and terrible for reading it
[22:15:00] *** Joins: utk (~utk@2001:470:69fc:105::1:2fe0)
[22:15:12] <awpr> `f x = x * x despite y = 5`
[22:15:35] <dsal> RecordWildCards is sometimes useful.  I have a lot of code like     let someField = 1; otherField = 2   in T{..}
[22:16:11] <dsal> I was reading about "Plain English" yesterday.  It sounds horrifying.
[22:16:26] <yin> ?
[22:16:49] <dsal> Plain English is a programming language where you write all your code in, you know, plain english.
[22:17:12] <dsal> It sounds insane to me, but this guy seems serious about it:  https://osmosianplainenglishprogramming.blog
[22:17:21] <yin> i hate the philosphy that programming languages should emulate natural ones
[22:17:35] <dsal> I don't understand it well enough to hate it.
[22:18:09] <yin> i don't even infix my `on`s
[22:18:29] <dsal> The idea is that some genius business guy has an idea, but he's frustrated that he has to hire programmers to get programmers to do it.  Programmers are annoying and never understand him.  If computers just understood plain english, he could be rich without having those annoying intermediates.
[22:18:42] <dsal> Except like, programmers are compilers.  And your specification is terrible.
[22:19:03] <yin> unless
[22:19:09] <dsal> unless is banned
[22:19:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[22:19:20] <yin> ;)
[22:19:27] <yin> unless: github copilot
[22:19:48] <dsal> `when (not $ thing) $ doUnlessThing` is the preferred style.
[22:19:58] <maerwald> dsal: I actually dislike unless as well
[22:20:03] <maerwald> there's a great talk about it
[22:20:49] <dsal> I'd like to hear a great talk about it.  :)   I mostly just get "X is confusing" for various things that aren't confusing to me and I don't understand how they're confusing to people.
[22:22:13] <jkaye> I have no issues with unless, or RecordWildCards, or any of these things. Each person is different? Probably the real answer right there
[22:22:57] <geekosaur> until one such person gets to force their own idiosyncrasies on a bunch of people who don't know any better
[22:23:09] <monochrom> COBOL used to be the "w00t business types can now code too!" dream.
[22:23:21] <dsal> RecordWildCards is mostly OK for introducing values into a small scope.  I think it's usually terrible to gather bindings and create a value.
[22:23:46] <maerwald> dsal: https://youtu.be/2mnYf7L7Amw?t=1282
[22:23:48] <maerwald> there it is
[22:23:51] <maerwald> hehe
[22:23:59] <jkaye> geekosaur, Completely different problem there. That person could just as easily force you to use untyped js
[22:24:10] <dsal> Writing `T { fieldA: something, fieldB: somethingElse }` as   `let fieldA = something; fieldB = somethingElse in T{..}` is definitely bad.
[22:24:17] <awpr> also good for cute tricks like `\T{..} -> T{ x = something, ..}`
[22:24:54] <dsal> OMG, did you just invent lens?
[22:24:56] <awpr> admittedly not necessary since you could just record update a variable
[22:25:56] <awpr> hmm, that may actually be a slightly better way to implement a lens
[22:27:13] <dsal> I usually just `\t v -> t{x = v}`
[22:28:00] <monochrom> unless you want to do t{x=x+1}
[22:28:19] <dsal> I think senior dude who's life work seems to be testing pushed a failing test and went to bed or something.
[22:28:21] <awpr> if you use `field1 f x = f (field1 x) <&> \f1 -> x { field1 = f1 }`, the whole input record is retained in the closure 
[22:28:58] *** Joins: cheater (~Username@user/cheater)
[22:29:14] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[22:29:35] <awpr> vs. `field1 f T{..} = f field1 <&> \f1 -> T{ field1 = f1, ..}`, that no longer retains the original `field1` value
[22:29:58] <johnjay> monochrom: so the dream is it requires expertise and study to do X. Wouldn't it be great if we didn't need expertise to do X!?
[22:30:20] <dsal> I think that's perfectly reasonable.
[22:30:31] <dsal> The only problem is that people don't realize how bad they are at communicating in English.
[22:30:38] <johnjay> ^
[22:30:45] <johnjay> dunning-kruger is rela
[22:30:59] <awpr> maybe Plain English is a good way to demonstrate to people that their plain English descriptions are nowhere near sufficiently precise
[22:31:16] <monochrom> I'm cynical, I think the business-type dream is getting rid of all cost centres.
[22:31:18] <dsal> People feel that they're really good at getting their points across.  Someone recently came in here and had a huge wall of stuff nobody could understand and got mad at everyone because he was sure his presentation was perfect.
[22:31:35] <johnjay> monochrom: i mean isn't that the entire point of automation and AI? 
[22:31:40] <monochrom> Me, I would take it one step further, why not keep humans out of the loop.
[22:31:51] <dsal> maerwald: Thanks for the link.  I think about ruby when I see `unless` so it's kind of funny it came up this way.
[22:31:54] <johnjay> The arc of history bends toward Butlerian Jihad
[22:32:22] *** Quits: bitdex_ (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[22:32:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:33:04] <monochrom> I saw "unless" in Perl, which was long before Ruby existed. I think I also saw it in Racket.
[22:33:41] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 264 seconds)
[22:33:49] <dsal> I've managed to forget almost everything I knew about perl.
[22:33:55] <maerwald> lol
[22:34:09] <maerwald> I think it's better that way
[22:34:09] <monochrom> And in Perl you have both "$x=1 unless $y>0" and "$x=1 if $y>0"
[22:34:45] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816)
[22:34:55] <dsal> I think unless at the beginning of a sentence is way less harmful.
[22:34:57] <monochrom> But you know what, your point still stands. Perl has them precisely because Larry Wall admired plain English, too.
[22:35:32] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 240 seconds)
[22:36:04] <monochrom> And this is precisely why I say "so the programming profession attracts the religious delusional type, for example Larry Wall".
[22:36:46] <monochrom> or rather s/attracts/is left with/
[22:37:30] <yin> where do the 'lusional' people go?
[22:37:48] <monochrom> Oh haha so let me repeat my complete analysis again.
[22:39:10] <monochrom> If you are scientifically minded, e.g., you actually know how to formulate useful hypotheses and properly test them, you would have a more rewarding career as a scientist or a biochem drug researcher. So, the programming profession is deprived of people who actually know how to do testing.
[22:39:52] <monochrom> If you are good with plain English, you would have a more rewarding career as a writer or even lawyer. So, the programming profession is deprived of people who can actually read/write docs.
[22:40:06] <davean> monochrom: I think thats true for the masses, but I don't think its generally true
[22:40:42] <monochrom> If you are good at math, you would have a more rewarding career as a mathematician or even a Wall-Street quant. So, the programming profession is deprived of people who are good at math.
[22:40:51] <monochrom> So what do we have left?
[22:41:25] <monochrom> Religious, delusional, bad at math, bad at natural languages. Just look at Larry Wall.
[22:42:24] <yin> lol
[22:42:43] <yin> what about logic
[22:42:56] <davean> yin: humans are horrid at logic, look at the world
[22:43:01] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[22:43:09] <yin> i want monochrom to answer
[22:43:17] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[22:43:21] <maerwald> hmm... and what if you're bad at everything? Become a teacher? ;p
[22:43:24] <monochrom> I still don't know how to spin that one.
[22:43:26] <dsal> monochrom: If you're good at Haskell, you would have a more rewarding career as a Cryptocurrency quant.
[22:43:39] <monochrom> For now I swipe it under the math rug.
[22:43:49] <monochrom> swipe? shove?
[22:44:08] <awpr> leave as an exercise for the reader
[22:44:20] <yin> monochrom: shove? bind?
[22:44:31] <[exa]> fold
[22:44:45] <yin> i fold
[22:44:52] <monochrom> Or, lawyers need logic greatly, too. I can put it there.
[22:45:01] <davean> maerwald: Now now, teachers are good at ignoring student response
[22:45:22] <davean> maerwald: I once found a classroom the teacher didn't realize the students spoke spanish, and none had full english proficiency
[22:45:47] <davean> maerwald: They just declared them behavioral problems instead of noticing they litterly couldn't speak to them
[22:45:48] <maerwald> xD
[22:46:05] <monochrom> Knuth says that programming is an extreme special case of teaching.
[22:46:08] <davean> ... 3 months into the school year and still hadn't figured it out
[22:46:19] <davean> maerwald: This is seriously not a joke
[22:46:37] <geekosaur> sweep
[22:46:56] <monochrom> Oh haha imagine you're coding Haskell for 3 months but you're running the C compiler.
[22:47:21] <davean> monochrom: only conclusion: Haskell is a horrid language its impossible to write a working program in
[22:48:29] <davean> maerwald: I have to think tehy were a good complainer too, becaue the other teachers said approximately "they're a wonderful teacher who just is really unlucky and keeps being given the problem kids"
[22:48:45] <carbolymer> I'm cancelling an async, can I get some kind of stacktrace where exception "has entered" that async?
[22:48:48] *** Joins: dhmohrom^ (~dhmohrom@h50.174.139.63.static.ip.windstream.net)
[22:48:52] <davean> maerwald: So you give teachers too much credit, some of them have things they're good at, and that makes it all the worse
[22:50:31] <monochrom> Cancellation is internally done by throwing exceptions.
[22:50:32] <carbolymer> I guess `callStack` will give stack trace at the call place, not where the exception entered the thread
[22:50:39] <carbolymer> monochrom: yes
[22:50:44] <geekosaur> davean, that sounds horribly familiar, only I encountered it in first grade
[22:50:48] <monochrom> Ah then I don't know.
[22:50:56] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 260 seconds)
[22:51:45] <maerwald> davean: I only taught a full classroom once... and I could feel the disengagement of every single student... how they didn't understand what I just said, but didn't ask. Leaving you totally helpless. Should you continue or give up?
[22:51:55] <maerwald> My conclusion: only tutoring works (with maybe 3-5 people)
[22:52:07] <davean> maerwald: So we have people who specialized in classroom management
[22:52:23] <davean> and even little things like saying every step seperately an waiting for it to be accomplished went a LONG way
[22:52:26] <davean> and I mean every step
[22:52:28] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[22:52:29] <geekosaur> I think maybe 2-3 is considered best
[22:52:31] <davean> "take out your pencils"
[22:52:32] *** Quits: deadmarshal (~deadmarsh@95.38.112.170) (Ping timeout: 240 seconds)
[22:52:34] <maerwald> haha
[22:52:35] <davean> "take out your notebooks"
[22:52:41] <davean> standing at the front, facing them
[22:52:45] <sm> Inst: installing globally: `cd; stack install foo`
[22:52:54] <davean> not doign the standard "take out your pencils and notebook" and then turnign and startign writing on teh board
[22:53:23] <davean> people speak up and explain themselves more when being waited on explicitely for one
[22:53:30] <davean> anyway, this is barely Haskell
[22:53:55] *** Joins: mark__ (~a@p200300ef973db1e34086f0a6a24fc4dd.dip0.t-ipconnect.de)
[22:54:09] <davean> but if you want a classroom to respond, IMO, get a psych student who's good and who's only task is to get the classroom stuff done smoothly and they can go home when its done well
[22:54:13] <davean> don't get a teacher
[22:54:20] <davean> teacher's don't listen to advice
[22:54:23] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:54:30] <davean> psych students who want to go home though?
[22:54:33] <carbolymer> other related question: my thread gets stuck - can I get the stacktrace somehow from that thread? -prof is not an option here
[22:54:34] <davean> they lit review on their own
[22:55:35] *** Quits: waleee (~waleee@192.165.44.49) (Ping timeout: 246 seconds)
[22:56:51] *** Joins: gg_ (~gg@2a01:e0a:819:1510:4c29:c873:f42e:2b2)
[22:58:53] *** Quits: gg (~gg@2a01:e0a:819:1510:4c29:c873:f42e:2b2) (Ping timeout: 264 seconds)
[22:59:43] <johnjay> monochrom: that is an incredible black pill. but maybe true
[23:00:42] *** Quits: gg_ (~gg@2a01:e0a:819:1510:4c29:c873:f42e:2b2) (Read error: Connection reset by peer)
[23:00:56] *** Joins: gg (~gg@2a01:e0a:819:1510:4c29:c873:f42e:2b2)
[23:05:51] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[23:06:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[23:06:32] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 240 seconds)
[23:07:13] *** Quits: dhmohrom^ (~dhmohrom@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[23:08:05] <dsal> carbolymer: can you get event logs?
[23:08:28] <dsal> Some builds can dump stacks, but none I've used. :)
[23:09:43] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[23:09:55] <johnjay> monochrom: also i guess if you consider perl to be a bad language that would make more sense
[23:10:17] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 246 seconds)
[23:10:31] <monochrom> I don't actually know whether Perl is a bad language. But certainly I don't like many aspects of it.
[23:11:07] <maerwald> they say perl is for writing, not for reading
[23:11:18] <dsal> I punished my children whenever brought up perl.
[23:11:21] <monochrom> That I agree.
[23:11:41] <monochrom> Along with LaTeX.
[23:12:17] <mark__> dminuoso: You explained to me that "x = 42; seq x ()" does nothing unless the MMR is :set. I am wondering if this explanation is correct:
[23:12:30] <mark__> If "42 :: Num a => a" is polymorphic then :sprint can't do anything because a constraint is converted to a simple function parameter in core which means that "42 :: Num a => a" is actually a function in core that is waiting for a dictionary. And a function that is not applied already is in WHNF and therefore "42 :: Num a => a" is in WHNF. It's impossible evaluate any further without the dictionary
[23:12:31] <mark__> e.g. without knowing the concrete type of "a".
[23:13:06] <yushyin> it was (is?) an okay glue language back in the days, and the first programming language I learned 
[23:13:24] <johnjay> apparently openssh requires perl to be built
[23:13:33] <johnjay> lots of random packages you depend on require perl. Xd
[23:13:57] <maerwald> yeah, often for build system and tests
[23:13:57] <monochrom> GHC used to require Perl to be built, too. >:)  Don't worry, that was a long bygone era.
[23:13:59] <geekosaur> don't forget that it was only relatively recently that ghc stopped using a perl script when compiling programs (the evil mangler)
[23:21:17] *** Joins: AlexNoo_ (~AlexNoo@178.34.163.82)
[23:21:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:21:38] *** Joins: chele_ (~chele@user/chele)
[23:21:40] *** Joins: Kaipi (~Kaiepi@156.34.44.192)
[23:22:04] *** Joins: aristid_ (sid1599@id-1599.uxbridge.irccloud.com)
[23:22:12] *** Joins: polux7 (~polux@51.15.169.172)
[23:22:17] *** Joins: bollu2 (~bollu@139.59.46.74)
[23:22:22] *** Joins: drdo6 (~drdo@roach0.drdo.eu)
[23:22:26] *** Joins: skn2 (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[23:22:30] *** Joins: Flonk6 (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[23:22:32] *** Joins: aliosablack (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[23:22:32] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 240 seconds)
[23:22:34] *** Joins: skewerr (spoonm@inaba.spoonm.org)
[23:22:42] *** Joins: bbhoss_ (sid18216@id-18216.tinside.irccloud.com)
[23:22:43] *** Joins: shanemikel (~shanemike@desk.roadwar.net)
[23:22:44] *** Joins: asthasr_ (~asthasr@162.210.28.151)
[23:22:53] *** Joins: pepeiborra_ (sid443799@id-443799.ilkley.irccloud.com)
[23:22:58] <dolio> You guys are too old.
[23:22:59] *** Joins: dispater- (~dispater@user/brprice)
[23:23:05] *** Joins: haskl[error] (~haskl@user/haskl)
[23:23:10] *** Joins: loonycyborg_ (~loonycybo@chat.chantal.wesnoth.org)
[23:23:11] *** Joins: rtpg_ (sid443069@id-443069.ilkley.irccloud.com)
[23:23:15] *** Joins: nitrix_ (~nitrix@user/nitrix)
[23:23:17] *** Joins: gonz____ (sid304396@id-304396.lymington.irccloud.com)
[23:23:20] *** Joins: lemonsni- (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[23:23:21] *** Joins: dragestil_ (~znc@user/dragestil)
[23:23:21] *** Joins: mcfrd (~mcfrdy@user/mcfrdy)
[23:23:52] <dsal> I had a perl codebase in the millions of lines in the 90s
[23:23:58] *** Joins: np (~nerdypepp@user/nerdypepper)
[23:24:10] *** Joins: cheater1__ (~Username@user/cheater)
[23:24:14] <dolio> It's probably been like 12 years since GHC used the evil mangler.
[23:24:23] *** Joins: Ram-Z_ (~Ram-Z@li1814-254.members.linode.com)
[23:24:56] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[23:25:12] *** Joins: shane_ (~shane@ana.rch.ist)
[23:25:15] *** Joins: ski_ (~ski@remote12.chalmers.se)
[23:25:17] *** Joins: PigDude_ (~PigDude@159.203.16.199)
[23:25:20] *** Joins: Clint_ (~Clint@user/clint)
[23:25:24] *** Joins: gentauro_ (~gentauro@185.107.12.141)
[23:25:24] *** Joins: tomku|two (~tomku@user/tomku)
[23:25:28] <monochrom> I am not old enough to have the honour of using 8-inch floppy diskettes or Fortran :)
[23:25:41] *** Joins: ishutin_ (~ishutin@92-249-179-61.pool.digikabel.hu)
[23:25:41] *** Joins: reda_ (~reda@user/reda)
[23:25:42] *** Joins: mikoto-c1 (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[23:25:45] *** Joins: aweinsto1k (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[23:25:46] *** Joins: peutri_ (~peutri@ns317027.ip-94-23-46.eu)
[23:25:51] *** Joins: hexeme (~hexeme@user/hexeme)
[23:26:02] *** Joins: ezzieygu1wuf (~Unknown@user/ezzieyguywuf)
[23:26:04] *** Joins: ridcully (~ridcully@p57b523cc.dip0.t-ipconnect.de)
[23:26:06] <monochrom> When I started, it was already 5.25-inch, and BASIC.
[23:26:09] *** Joins: jassob1 (~jassob@h-98-128-167-112.NA.cust.bahnhof.se)
[23:26:12] <dolio> Don't get me wrong, I'm also too old, because it doesn't seem like that long ago to me, either.
[23:26:57] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[23:28:11] <monochrom> Oh and Lode Runner.
[23:28:29] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:28:40] <monochrom> Anyone wanna reimplement Lode Runner in Haskell so it can't possibly run on an Apple II? >:)
[23:29:15] *** Joins: edro (~edr@enlo.co)
[23:29:15] *** Quits: edro (~edr@enlo.co) (Changing host)
[23:29:15] *** Joins: edro (~edr@user/edr)
[23:29:30] *** Joins: orc (sid509852@user/orc)
[23:29:51] *** Joins: adamCS_ (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com)
[23:29:54] *** Parts: orc (sid509852@user/orc) ()
[23:30:09] *** Joins: xlei_ (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[23:30:46] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[23:30:46] *** Quits: asthasr (~asthasr@162.210.28.151) (*.net *.split)
[23:30:46] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (*.net *.split)
[23:30:46] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (*.net *.split)
[23:30:46] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[23:30:46] *** Quits: alx741 (~alx741@181.196.68.101) (*.net *.split)
[23:30:46] *** Quits: drdo (~drdo@roach0.drdo.eu) (*.net *.split)
[23:30:46] *** Quits: chele (~chele@user/chele) (*.net *.split)
[23:30:46] *** Quits: jakalx (~jakalx@base.jakalx.net) (*.net *.split)
[23:30:46] *** Quits: haskl (~haskl@user/haskl) (*.net *.split)
[23:30:46] *** Quits: edr (~edr@user/edr) (*.net *.split)
[23:30:46] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (*.net *.split)
[23:30:46] *** Quits: AlexNoo (~AlexNoo@178.34.163.82) (*.net *.split)
[23:30:46] *** Quits: nerdypepper (~nerdypepp@user/nerdypepper) (*.net *.split)
[23:30:46] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[23:30:46] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[23:30:46] *** Quits: dragestil (~znc@user/dragestil) (*.net *.split)
[23:30:46] *** Quits: skn (~znc@sec.nimmagadda.net) (*.net *.split)
[23:30:46] *** Quits: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg) (*.net *.split)
[23:30:46] *** Quits: spoonm (spoonm@inaba.spoonm.org) (*.net *.split)
[23:30:46] *** Quits: shane (~shane@ana.rch.ist) (*.net *.split)
[23:30:46] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[23:30:46] *** Quits: Clint (~Clint@user/clint) (*.net *.split)
[23:30:46] *** Quits: dispater (~dispater@user/brprice) (*.net *.split)
[23:30:46] *** Quits: Putonlalla (~sapekiis@it-cyan.it.jyu.fi) (*.net *.split)
[23:30:46] *** Quits: reda (~reda@user/reda) (*.net *.split)
[23:30:46] *** Quits: pepeiborra (sid443799@ilkley.irccloud.com) (*.net *.split)
[23:30:46] *** Quits: rtpg (sid443069@ilkley.irccloud.com) (*.net *.split)
[23:30:46] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[23:30:46] *** Quits: bbhoss (sid18216@tinside.irccloud.com) (*.net *.split)
[23:30:46] *** Quits: aristid (sid1599@uxbridge.irccloud.com) (*.net *.split)
[23:30:46] *** Quits: gonz___ (sid304396@lymington.irccloud.com) (*.net *.split)
[23:30:46] *** Quits: jassob (~jassob@h-98-128-167-112.NA.cust.bahnhof.se) (*.net *.split)
[23:30:46] *** Quits: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net) (*.net *.split)
[23:30:46] *** Quits: Ram-Z (~Ram-Z@li1814-254.members.linode.com) (*.net *.split)
[23:30:46] *** Quits: smunix (~smunix@static.26.70.12.49.clients.your-server.de) (*.net *.split)
[23:30:46] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (*.net *.split)
[23:30:46] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[23:30:46] *** Quits: ishutin (~ishutin@92-249-179-61.pool.digikabel.hu) (*.net *.split)
[23:30:46] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[23:30:46] *** Quits: shanemikel_ (~shanemike@desk.roadwar.net) (*.net *.split)
[23:30:46] *** Quits: peutri (~peutri@ns317027.ip-94-23-46.eu) (*.net *.split)
[23:30:46] *** Quits: adamCS (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com) (*.net *.split)
[23:30:46] *** Quits: ridcully_ (~ridcully@p57b523cc.dip0.t-ipconnect.de) (*.net *.split)
[23:30:46] *** Quits: bollu (~bollu@139.59.46.74) (*.net *.split)
[23:30:46] *** Quits: canta (~canta@user/canta) (*.net *.split)
[23:30:47] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (*.net *.split)
[23:30:47] *** Quits: moerlitz (d9eb32b7ed@knopi.disroot.org) (*.net *.split)
[23:30:47] *** Quits: gentauro (~gentauro@user/gentauro) (*.net *.split)
[23:30:47] *** Quits: ski (~ski@remote12.chalmers.se) (*.net *.split)
[23:30:47] *** Quits: polux (~polux@51.15.169.172) (*.net *.split)
[23:30:47] *** Quits: nitrix (~nitrix@user/nitrix) (*.net *.split)
[23:30:47] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[23:30:47] *** mcfrd is now known as mcfrdy
[23:30:47] *** xlei_ is now known as xlei
[23:30:47] *** nitrix_ is now known as nitrix
[23:30:47] *** pepeiborra_ is now known as pepeiborra
[23:30:47] *** dragestil_ is now known as dragestil
[23:30:47] *** bollu2 is now known as bollu
[23:30:47] *** Flonk6 is now known as Flonk
[23:30:47] *** bbhoss_ is now known as bbhoss
[23:30:47] *** drdo6 is now known as drdo
[23:30:47] *** aristid_ is now known as aristid
[23:30:47] *** adamCS_ is now known as adamCS
[23:30:47] *** polux7 is now known as polux
[23:30:47] *** rtpg_ is now known as rtpg
[23:30:55] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[23:30:55] *** cheater1__ is now known as cheater
[23:31:04] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[23:31:28] *** Joins: zebrag (~chris@user/zebrag)
[23:31:31] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[23:31:59] <geekosaur> [09 19:55:28] <monochrom> I am not old enough to have the honour of using 8-inch floppy diskettes or Fortran :)
[23:32:02] *** aweinsto1k is now known as aweinstock
[23:32:03] <geekosaur> lucky you
[23:34:11] *** Clint_ is now known as Clint
[23:35:00] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 244 seconds)
[23:36:52] *** Joins: Topsi (~Tobias@dyndsl-095-033-024-160.ewe-ip-backbone.de)
[23:37:11] *** Joins: koolazer (~koo@user/koolazer)
[23:37:23] *** Joins: juhp (~juhp@128.106.188.220)
[23:37:49] *** Joins: canta (~canta@user/canta)
[23:38:46] *** Joins: alx741 (~alx741@181.196.68.101)
[23:39:16] *** Joins: Putonlalla (~sapekiis@it-cyan.it.jyu.fi)
[23:42:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816) (Remote host closed the connection)
[23:42:25] <unit73e> lol I only used a 8-inch floppy disk once
[23:43:28] <unit73e> 3 1/2 was already the norm, and it was the high density version
[23:43:55] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816)
[23:48:58] <unit73e> even 5 1/2 was dead already
[23:49:53] <geekosaur> now I'm remembering SLS on 50 5¼ floppies
[23:50:50] <sm> I want Lode Runner in haskell!
[23:51:47] <carbolymer> dsal: what do you mean by event logs? those from SIGUSR2?
[23:52:15] <dsal> carbolymer: sigquit, I think
[23:52:19] <dsal> It'll tell you. :)
[23:52:24] <geekosaur> -eventlog runtime parameter? which requires recompiling with eventlog support, so if profiling is out so may be that
[23:52:41] <unit73e> sm, lol I am making SDL2 real world examples lol. Had some trouble loading a sprite sheet with spritesheepacker and loading the result with aeson but managed to do it. Lode Runner shouldn't be hard.
[23:53:42] <dsal> carbolymer: I've traced that kind of issue with eventlog, which also had me have to name all of my threads so I knew what I was looking at.  Then I wrote a custom eventlog regret l reader that would tell me my problem.
[23:54:05] <unit73e> lazyfoo examples are not what a game dev would do. he did it while learning in college.
[23:54:10] <dsal> It was rare... Like once a month on a relatively busy server.  Bad connection where just wrong.
[23:55:38] <carbolymer> dsal: same, in our case thread gets stuck also once in a month
[23:56:25] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[23:56:26] <dsal> Neat.  The stuff I did with eventlog was really helpful. I did have to name everything, though.
[23:56:46] *** Quits: emf (~emf@2620:10d:c090:400::5:b872) (Ping timeout: 245 seconds)
[23:57:44] <dsal> I.e., I made a `namedAsync` and used it for all my calls so the threads had names telling me what was going on.
[23:57:48] *** Joins: thedward[m] (~thedwardm@2001:470:69fc:105::f79)
[23:58:02] <carbolymer> nice
[23:58:10] <carbolymer> I'll look into that, thanks dsal
[23:58:24] *** Joins: emf (~emf@2620:10d:c090:400::5:defd)
[23:59:06] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[23:59:43] <geekosaur> I think my first "job" was doing backups on a machine with an 8" drive. boring as all get-out.
[23:59:57] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
