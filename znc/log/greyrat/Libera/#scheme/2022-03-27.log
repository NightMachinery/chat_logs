[00:03:02] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[00:03:21] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[00:10:48] *** Quits: Mrtn[m] (~mrtnm]@2001:470:69fc:105::1f44) (Quit: Reconnecting)
[00:11:04] *** Joins: Mrtn[m] (~mrtnm]@2001:470:69fc:105::1f44)
[00:24:09] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[00:42:12] *** Quits: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[00:57:04] *** Joins: phf-1 (~Pierre-He@2a01:cb19:837f:9b00:95fd:897f:e43c:f90a)
[00:58:34] <phf-1> Hello Scheme! How do one use a good set of "battery included" libraries with chez-scheme?
[01:02:05] <Zipheir> I've been using https://github.com/arcfide/chez-srfi for (some) SRFI support.
[01:02:43] <Zipheir> Some people here have good things to say about Thunderchez https://github.com/ovenpasta/thunderchez
[01:05:36] <phf-1> Zipheir, thank you.
[01:06:07] <Zipheir> yw
[01:10:12] *** Joins: civodul (~user@guix/contributor/civodul)
[01:30:20] *** Joins: francogrex (~user@202.238-182-91.adsl-dyn.isp.belgacom.be)
[01:30:44] <francogrex> Hi, is there a specific group for kawa scheme?
[01:31:33] <Zipheir> francogrex: Well, you've found #kawa, apparently.
[01:43:22] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[01:43:38] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[01:48:41] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[01:48:58] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[01:54:01] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[01:54:18] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[01:54:23] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Remote host closed the connection)
[01:59:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:13:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:15:34] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:21:18] <francogrex> just 2 people there
[02:22:01] <wasamasa> https://www.gnu.org/software/kawa/Community.html
[02:22:21] <wasamasa> points to a mailing list
[02:24:14] <wasamasa> alis tells me there's 5 people in the channel, an improvement of 250%!
[02:25:32] <Zipheir> Exponential growth!
[02:33:11] *** Quits: francogrex (~user@202.238-182-91.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[02:35:45] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[02:46:20] <Franciman> new project for me in r7rs-small. A dotfile manager!
[02:49:06] <amazigh> Franciman: what does it do? link?
[02:50:05] <Franciman> amazigh: i'm defining it now
[02:50:27] <Franciman> amazigh: i'd like it to be declarative
[02:50:37] <Franciman> so i can define a meta-config in a file
[02:51:00] <Franciman> like guix, with a small DSL for defining various profiles (but this later, it's too complicated)
[02:53:52] <Franciman> amazigh: do you use a dotfile manager?
[02:55:24] <amazigh> I do not use a dotfile manager. 
[02:55:30] * amazigh looing for what it is
[02:58:27] <amazigh> got it.
[03:01:37] <amazigh> The DSL will be a challenge, but an interesting one.
[03:01:47] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[03:02:08] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[03:06:55] *** Joins: seninha (~seninha@user/seninha)
[03:08:52] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Ping timeout: 272 seconds)
[03:18:57] *** Quits: phf-1 (~Pierre-He@2a01:cb19:837f:9b00:95fd:897f:e43c:f90a) (Ping timeout: 252 seconds)
[03:19:27] <amazigh> I tried to improve the arew cli code, it used to be non obvious code, now it looks cleaner to me except there is still some copy-pasta
[03:20:02] <amazigh> on the left, there is the new `command-line-parse` that I may re-used later, in the middle some runs of fauxtexte.scm with the --dev flag it produce the profile on the right
[03:21:00] <amazigh> https://i.imgur.com/BkhUY3H.png
[03:21:34] <amazigh> on the right window the red code is the code that is called most often (unlike the code where most of the time is spent!)
[03:26:47] <amazigh> most of the hard work (compiling to a single binary, profiling, eval) is done by chez.
[03:28:05] <amazigh> (also I have a new wide screen, and I test system76 pop os extension to have tiling wm in gnome)
[03:34:17] <sham1> Franciman: a dotfile manager? Like GNU stow?
[03:34:18] *** Joins: rgherdt_ (~rgherdt@port-92-195-125-72.dynamic.as20676.net)
[03:34:22] <sham1> Or something different 
[03:37:15] *** Quits: rgherdt (~rgherdt@port-92-195-30-153.dynamic.as20676.net) (Ping timeout: 256 seconds)
[03:44:36] *** Joins: livoreno (~livoreno@user/notzmv)
[03:50:47] *** Quits: rgherdt_ (~rgherdt@port-92-195-125-72.dynamic.as20676.net) (Remote host closed the connection)
[04:06:13] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[04:35:28] *** Joins: badkins (~badkins@136.56.92.199)
[04:37:32] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 272 seconds)
[04:41:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[04:43:07] *** Joins: livoreno (~livoreno@user/notzmv)
[04:46:18] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 268 seconds)
[05:43:37] *** Joins: s-liao (~s-liao@101.86.164.158)
[05:56:35] *** Joins: badkins (~badkins@136.56.92.199)
[05:58:40] *** Joins: irontom (~user@69.174.103.168)
[06:00:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[06:50:36] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[06:53:12] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[06:55:04] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[07:02:43] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:04:46] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[07:10:23] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[07:12:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: Lost terminal)
[07:40:12] *** Quits: irontom (~user@69.174.103.168) (Ping timeout: 240 seconds)
[07:49:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[07:51:40] *** Joins: aeth (~aeth@user/aeth)
[07:53:23] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Ping timeout: 252 seconds)
[07:54:21] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:02:22] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[08:31:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[08:32:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:34:43] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[08:36:33] *** Joins: aeth (~aeth@user/aeth)
[09:06:35] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[09:18:01] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[09:24:15] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[09:29:30] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 272 seconds)
[09:34:09] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[09:52:57] *** Quits: Menchers (Menchers@user/menchers) (Quit: Into the Voidâ€¦)
[10:05:28] *** Joins: Everything (~Everythin@37.115.210.35)
[10:07:53] *** Joins: Menchers (Menchers@user/menchers)
[10:12:46] *** Joins: hashfunc1880 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[10:34:24] *** Joins: badkins (~badkins@136.56.92.199)
[10:50:49] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[10:58:44] *** Joins: X-Scale` (~ARM@80.199.137.78.rev.vodafone.pt)
[11:00:23] *** Quits: X-Scale (~ARM@46.50.6.46) (Ping timeout: 256 seconds)
[11:00:23] *** X-Scale` is now known as X-Scale
[11:10:17] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 252 seconds)
[11:15:14] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[11:38:46] *** Joins: phf-1 (~Pierre-He@2a01:cb19:837f:9b00:95fd:897f:e43c:f90a)
[11:41:00] *** Quits: hashfunc1880 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[12:08:11] *** Joins: rgherdt (~rgherdt@port-92-195-125-72.dynamic.as20676.net)
[12:18:55] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[12:32:54] *** Quits: kopiyka (~user@2001:983:fe8b:1:b26e:bfff:fe2b:503f) (Remote host closed the connection)
[12:35:39] *** Joins: leah2 (~leah@vuxu.org)
[12:36:21] *** Joins: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de)
[12:51:48] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 240 seconds)
[12:57:14] *** Joins: kopiyka (~user@2001:983:fe8b:1:b26e:bfff:fe2b:503f)
[13:08:02] *** Joins: leah2 (~leah@vuxu.org)
[13:28:59] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[13:30:06] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: You have been kicked for being idle)
[13:36:49] *** f8l is now known as f8li
[13:36:54] *** f8li is now known as f8l
[13:44:07] *** Quits: phf-1 (~Pierre-He@2a01:cb19:837f:9b00:95fd:897f:e43c:f90a) (Ping timeout: 260 seconds)
[13:45:55] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:52:20] *** Joins: phf-1 (~Pierre-He@2a01:cb19:837f:9b00:95fd:897f:e43c:f90a)
[14:08:32] * amazigh waves helllllllllo
[14:09:04] <amazigh> phf-1: what particular library are you looking for?
[14:09:25] <amazigh> it is a survey ;)
[14:09:30] <amazigh> thunderchez and chez-srfi are good bet tho
[14:10:20] <phf-1> amazigh, path manipulation like https://docs.racket-lang.org/reference/pathutils.html
[14:11:37] <phf-1> amazigh, just basic things that one would need to start doing small CLI tools and distribute them as small binaries. 
[14:12:19] <amazigh> I am always impressed when someone mention 'small CLI' tool.
[14:12:35] <amazigh> phf-1: you can be interested in chez-exe to create binaries
[14:12:53] <amazigh> I do not know any library to help with paths
[14:13:10] <amazigh> https://github.com/gwatt/chez-exe
[14:13:56] <phf-1> amazigh, what do you mean by "I am always impressed when someone mention 'small CLI' tool." ? I'm not catching the irony here if any.
[14:15:09] <amazigh> there is no irony :)
[14:16:17] <amazigh> or the irony is on me.
[14:17:33] <phf-1> amazigh, ok :). Well the plan is to use Guix to setup an environment which provides "petite" so these tools can be distributed using things like https://paste.debian.net/1235731/
[14:17:34] <amazigh> My point is I never have ideas about cli tools, it seems all my needs are covered by existing programs, that's why I am impressed.
[14:19:52] <phf-1> amazigh, which can be really small, in the ko order of magnitude and fast. CLI tools are useful when building your own tools: cheap and fast interfaces to build and "scriptable" 
[14:20:58] <phf-1> amazigh, at least, that what's I'm looking for. 
[14:21:12] <phf-1> amazigh, at least, that's what I'm looking for. 
[14:23:01] <amazigh> There is a group of go coders that created a few cli tools "We build tools to make the command line glamorous" https://charm.sh
[14:23:19] <amazigh> they made the news recently, on a famous podcast.
[14:24:07] <amazigh> now that I think again, rust is also famous for some cli tool
[14:25:55] <Franciman> hi sham1 , yes like gnu stow
[14:38:11] *** Quits: phf-1 (~Pierre-He@2a01:cb19:837f:9b00:95fd:897f:e43c:f90a) (Ping timeout: 252 seconds)
[14:39:35] *** Joins: phf-1 (~Pierre-He@2a01:cb19:837f:9b00:95fd:897f:e43c:f90a)
[14:56:26] <Franciman> what is the difference between parameters and regular variables?
[14:56:54] <Franciman> let me be clearer, it looks to me that parameters can be implemented with lambdas
[14:57:10] <sham1> Parameters are dynamic. Changing them "up" in the call stack or in a higher continuation is reflected at the usage site, while regular variables are lexical
[14:57:15] <sham1> Indeed
[14:57:42] <Franciman> oh huhm
[14:58:28] <sham1> There's even an example implementation in the r7-small spec
[14:58:38] <sham1> Page 21
[15:00:04] <Franciman> i was reading it and it gave me the impression that i could do the same using regular variables
[15:00:08] <Franciman> and set!
[15:00:19] <sham1> Well you can. ish
[15:00:35] <sham1> The parameter object is a closure
[15:00:36] <Franciman> yes, you mentioned the continuation thing
[15:00:41] <amazigh> parameters can escape lexical scope
[15:00:45] <sham1> Yeah
[15:01:20] <sham1> For example, if current-output-port was a regular variable, with-output-file wouldn't work
[15:02:15] <sham1> If you know elisp or CL, parameters basically let you do what in CL is done with either defvar or defparameter, and what elisp does by default unless you enable lexical scope
[15:04:35] <sham1> Err, with-output-to-file
[15:05:04] <Franciman> i see thanks
[15:05:10] <Franciman> i will investigate further
[15:05:16] <Franciman> i'm not really familiar with dynamic  scope
[15:05:22] <amazigh> Somewhat contrived example that is interweaved with library semantic: inside a library `qux` you can't set! a variable exported by a library `foo`, and see that in another library `bar`. Parameters can do that.
[15:05:37] <dpk> parameters can indeed be implemented in terms of lambda and call/cc, at least in the absence of threading
[15:05:48] <dpk> err, in terms of dynamic-wind, sorry, not call/cc
[15:06:28] <sham1> You'd need a thread-local box and then it would work
[15:06:46] <amazigh> without call/cc, or raise, you can implement parameters with lambda alone.
[15:07:12] <sham1> With call/cc or raise you can still implement it with lambdas if you translate everything into CPS ;)
[15:07:53] <Franciman> so what i must understand is call/cc
[15:07:57] <Franciman> to fully appreciate parameters
[15:08:03] <Franciman> thanks a lot!
[15:08:09] <dpk> no, you can understand parameters without call/cc
[15:08:13] <amazigh> more precisly, without the ability to escape a procedure and come back to it later.
[15:12:55] <amazigh> AFAIU, dynamic scope is the transitive lexical scope of the callers
[15:14:58] <amazigh> forget about my previous message. That is confusing since it depends on the semantic of the language. Maybe it would be easier to compare with another programming language such as C.
[15:15:25] <dpk> C is also lexically scoped
[15:19:09] <amazigh> hmm
[15:19:40] <amazigh> I agree with dpk, you do not need to grok call/cc fully to understand parameters
[15:25:58] <Franciman> i mean to fully appreciate where they are different from plain global variables
[15:45:56] <amazigh> TIL R7RS via SRFI-143 fixnums export constants: https://srfi.schemers.org/srfi-143/srfi-143.html#Constants
[15:46:54] <amazigh> I used to think that R7RS only exported procedures, possibly thunk that return a constant.
[15:49:05] <amazigh> the latter approach has the advantage that it is clear the user can not mutate the constant.
[15:50:13] <amazigh> I guess, the question is: is the cell associated to an exported constant mutable?
[15:50:57] <amazigh> such as (set! my-constant-exported-from-bar 101) is visible from all libraries, where ever that set! appears.
[15:51:50] <amazigh> I used to think that the associated cell was immutable...
[15:52:42] *** Joins: jdevoo (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch)
[15:52:54] *** Quits: jdevoo (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch) (Client Quit)
[16:03:39] *** Quits: rgherdt (~rgherdt@port-92-195-125-72.dynamic.as20676.net) (Ping timeout: 260 seconds)
[16:21:36] <sham1> amazigh: exported cells are immutable
[16:22:56] <sham1> At least one would hope so, since (define)s are
[16:24:27] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:32:44] *** Joins: seninha (~seninha@user/seninha)
[16:43:36] *** Joins: badkins (~badkins@136.56.92.199)
[16:50:10] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[16:53:25] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[17:14:39] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[17:23:51] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[17:24:11] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[17:46:10] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[17:53:02] <pinoaffe> amazigh: I don't know what is supposed to happen, but in guile, using a module that does `(set! list 8)` messes up quite a lot of stuff
[17:59:24] *** Joins: s-liao (~s-liao@101.86.164.158)
[18:26:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[18:28:33] *** Joins: aeth (~aeth@user/aeth)
[18:37:28] *** Joins: jdevoo (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch)
[18:37:37] *** Quits: jdevoo (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch) (Client Quit)
[18:39:24] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[18:43:25] *** Joins: s-liao (~s-liao@101.86.164.158)
[18:56:54] <Franciman> thanks a lot!i'm reading here https://okmij.org/ftp/continuations/against-callcc.html#memory-leak that call/cc is hard to get right because it causes memory leaks
[18:57:22] <Franciman> and from its description there, i can see why, when you capture a continuation, you basically can't free any previous memory, because it can always be referenced back later
[18:57:32] <Franciman> how do scheme implementations usually deal with this aspect?
[19:07:30] *** Joins: badkins (~badkins@136.56.92.199)
[19:09:35] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[19:17:36] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 252 seconds)
[19:19:08] *** Quits: m455 (~m455@user/m455) (Ping timeout: 272 seconds)
[19:19:36] *** Joins: psf (~pi@206.55.172.18)
[19:23:07] <sham1> Aside from discouraging the use of call/cc? Probably not much
[19:37:19] <mnieper> Franciman: call/cc does not leak memory itself. It is some uses of call/cc that cause memory to be held longer than actually necessary for the program to work.
[19:37:45] <mnieper> Implementations can't deal with it much; it's the responsibility of the programmer.
[19:38:45] <mnieper> It may be compared with defining a global variable that survives until the end of the program although it is only used during a small part of the program's run time.
[19:40:16] <Franciman> oh ohh
[19:40:26] <Franciman> can i find any examples of these use cases?
[19:41:54] <mnieper> If you do something like (call/cc (lambda (break) (for-each (lambda (x) (if (odd? x) (break) (display x))) x*))), there's no problem.
[19:43:09] <Franciman> uhm, so basically the problem of the captured continuation is that it retains references to all the variabiles defined in its context?
[19:44:01] <mnieper> The problem is if you hold a continuation captured by call/cc (i.e. the call stack at this point) but you know that when you reinstall this call stack only some of the initial frames will be used before that continuation will again be abandoned (because of the logic of your problem).
[19:46:11] <mnieper> Maybe it helps to think of a C call stack. Assume you that after all initialization you are deep in the call stack and you will remain there during program runtime. Assume further that you will exit your program by longjmp'ing up to the main procedure. 
[19:46:58] <mnieper> Obviously, all the initial frames in the call stack are waste but will be kept until the program exit.
[19:47:52] <Franciman> ah ahh
[19:48:06] <mnieper> The situation in Scheme or in any other program language is the same, but in Scheme you also have the option to store your call stack in a variable (the continuation), meaning that you can multiply this problem.
[19:48:23] <Franciman> so you keep entering the continuation, perform some allocations, and re-enter the allocation
[19:48:24] <mnieper> But note that continuations usually share their tails.
[19:48:26] <Franciman> so you allocate indefinitely
[19:48:43] <Franciman> re-enter the continuation*
[19:49:38] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[19:50:24] <mnieper> You capture a continuation of, say, 100 frames. You later reinstall it.  Then you pop 10 frames (by returning 10 times) before you abandon that continuation for another one.
[19:50:49] <mnieper> Obviously, you have captured 90 useless frames.
[19:51:08] <mnieper> If these frames happen to hold local variables taking a lot of memory, a lot of memory would be wasted.
[19:51:25] <Franciman> i understand thanks a lot!
[19:51:38] <Franciman> so it's not related to difficulty in implementations, it's like doing a lot of recursive calls
[19:51:41] <Franciman> memory finishes
[19:52:28] <mnieper> Doing a lot of recursive calls (or calls with memory-heavy locals) and then storing the call frames but without using them.
[19:52:50] <mnieper> It's like passing a list around, of which you will ever need only the first 10 entries.
[19:53:01] <Franciman> perfectly clear
[19:53:03] <Franciman> ty
[19:53:42] <mnieper> When you have such a list, you can cut the list after the first 10 entries.  This is what you would do.  Without delimited continuations, Scheme does not have a way to cut the call stack captured by a continuation after the first 10 entries.
[19:53:52] <mnieper> You can read my SRFI 226 if you want.
[19:54:22] <mnieper> As to you question about parameters: The best way to think about them is as implicit arguments to every procedure (call).
[19:56:15] <mnieper> To implement them (in principle) add a dictionary argument to each procedure, which maps a parameter name to its value.
[19:56:34] <mnieper> Looking up a parameter means looking up in this dictionary.
[19:56:46] <mnieper> The parameterize form creates a new modified dictionary.
[19:57:35] <mnieper> This model works also in the presence of threads, does not need you to understand call/cc nor dynamic-wind.
[20:04:23] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[20:06:35] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[20:09:36] <Franciman> thanks mnieper 
[20:11:29] <mnieper> You are welcome!
[20:20:34] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:24:12] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[20:24:28] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[20:24:56] *** Joins: civodul (~user@guix/contributor/civodul)
[20:44:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[20:45:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:47:04] *** Quits: phf-1 (~Pierre-He@2a01:cb19:837f:9b00:95fd:897f:e43c:f90a) (Ping timeout: 268 seconds)
[20:52:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[20:54:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:09:21] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[21:09:24] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[21:10:10] <sonny> Can this list-product can be done without call/cc? <https://bpa.st/OPAA>
[21:11:24] *** Joins: aeth (~aeth@user/aeth)
[21:12:09] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:12:55] <sonny> Yes, all that has to be done is remove the call/cc lambda and return 0.
[21:39:01] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:53:49] <mnieper> The version with call/cc has better algorithmic complexity in case `0' appears (early) in the list.
[22:17:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[22:19:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:21:08] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:548d:20ce:302b:db7e)
[22:21:08] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:548d:20ce:302b:db7e) (Changing host)
[22:21:08] *** Joins: skapata (~Skapata@user/skapata)
[22:29:31] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[22:29:48] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[22:30:32] *** Joins: phf-1 (~Pierre-He@2a01:cb19:837f:9b00:95fd:897f:e43c:f90a)
[22:36:26] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[22:44:51] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[22:45:06] *** Quits: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[22:45:15] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[22:53:36] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[23:00:19] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[23:00:35] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[23:10:13] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:29:00] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:28ab:8424:21f0:4e41)
[23:29:00] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:28ab:8424:21f0:4e41) (Changing host)
[23:29:00] *** Joins: skapata (~Skapata@user/skapata)
[23:48:11] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
