[00:17:53] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[02:37:37] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:47:28] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (*.net *.split)
[02:47:28] *** Quits: x88x88x (~x88x88x@149.28.53.172) (*.net *.split)
[02:50:26] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[02:50:26] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[03:31:07] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[07:36:47] *** Quits: EvanR (~EvanR@user/evanr) (Quit: Leaving)
[07:38:08] *** Joins: EvanR (~EvanR@user/evanr)
[07:38:11] <EvanR> join #haskell
[11:46:42] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:02:45] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:23:05] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[13:23:39] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[13:25:46] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Client Quit)
[13:26:16] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[14:15:48] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[14:37:49] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[14:58:47] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[16:04:05] *** Joins: __monty__ (~toonn@user/toonn)
[16:26:08] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[17:27:18] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[17:27:37] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[19:58:38] <VarikValefor[m]> > <@ic.rbow:matrix.org> Jingle bells jingle bells... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/e3c05ded4660657b0eed480914c3cf455abf646a)
[19:58:51] <VarikValefor[m]>  * Replace the last line with "cruft with RTS".  No rhyme is present, but the syllable count at least works.
[21:21:58] <ManofLetters[m]> haha, I think the idea was to stop mid-line, as the stop-the-world GC does ;)
[21:32:52] <VarikValefor[m]>  * Replace the last line with "cruft with RTS".  No rhyme is present, but the flow at least works.
[21:34:38] <EvanR> the "cruft rate" is astonishing in haskell
[21:35:01] <EvanR> imagine if you had ghc's GC power but a reasonable amount of memory being allocated xD
[21:36:52] <EvanR> anyone ever heard of this https://github.com/byorgey/swarm
[21:37:24] <f-a> it was pretty famous
[21:38:23] <VarikValefor[m]> EvanR: Look into the RTS options.  `;^)`
[21:38:46] <f-a> I think we tried it here too, https://github.com/byorgey/swarm/issues/55 this bug sounds familiar
[21:39:04] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:39:11] <EvanR> 100% cpu, bug or feature
[21:39:28] <EvanR> if you have 16 cores, should it be 1600% xD
[21:40:36] <f-a> I am always amazed at how cavalier some devs are with resources
[21:41:16] <EvanR> I was trying to hit on that earlier, how much cpu should be used?
[21:41:27] <EvanR> what is correct
[21:44:19] <ManofLetters[m]> re "cruft rate", this should not really be much more in Haskell than in C or at least under conscious control ("I pay linear memory and log runtime for using a Map instead of an in-place array and it's worth it here, because it's not a bottleneck")
[21:45:27] <ManofLetters[m]> most of the time, if you have copious cruft, it's a leak and possible to fix, and not "Haskell"
[21:47:13] <EvanR> ok... not the same thing. I'm using constant memory right now, about 100k. But the allocation rate is about 100M per second
[21:48:20] <EvanR> the gc is basically collecting 100M per second xD
[21:49:03] <EvanR> not even close to a bottleneck but damn
[21:49:33] <EvanR> imagine if it could collect your forgotten stuff every once in a while in C
[21:51:10] <ManofLetters[m]> what's the Productivity?
[21:54:14] <ManofLetters[m]> 100M per second is nothing
[21:56:07] <EvanR> with vsync Productivity  98.9% of total user, 99.9% of total elapsed
[21:56:17] <ManofLetters[m]> dude, you are fine
[21:56:22] <ManofLetters[m]> 90% is fine
[21:57:18] <ManofLetters[m]> with 95% I pat myself on the back so hard I cough
[21:57:49] <EvanR> without vsync Productivity  99.7% of total user, 99.7% of total elapsed
[21:58:13] <ManofLetters[m]> I hate you
[21:58:53] <EvanR> by adding more capabilities (-Nn) I can make productivity worse
[21:59:14] <ManofLetters[m]> thanks, that'd help
[22:01:55] <VarikValefor[m]> ManofLetters[m]: Use the hatred.  Prove that 99.7% productivity is unworthy of note.
[22:03:58] <ManofLetters[m]> heh, I've just got 100% testing Allure of the Stars
[22:04:16] <ManofLetters[m]> but I seem to remember 8.10.7 has a slight bug in the calculation
[22:04:49] <ManofLetters[m]> also, I use the copying collected (the old standard one), and it does less work usually, at the cost of latency
[22:05:00] <ManofLetters[m]> *copying collector
[22:05:46] <ManofLetters[m]> but keeping most of data of our GC surely helps (in a compact region)
[22:05:53] <ManofLetters[m]> *out of GC
[22:06:03] <EvanR> ah so that works
[22:06:42] <ManofLetters[m]> compat region? I couldn't measure any overall speedup, but GC stats are indeed better
[22:07:33] <ManofLetters[m]> it would make a difference if I had frequent GCs, but I don't
[22:08:12] <EvanR> you're using -I to turn them down?
[22:08:46] <ManofLetters[m]> yes, but I also just don't produce a lot of garbage
[22:09:16] <ManofLetters[m]> and  -A99m helps a lot for short benchmarks
[22:09:33] <ManofLetters[m]> but neither of these is what one should optimize for
[22:10:10] <ManofLetters[m]> I do -A99m to make initial dungeon generations snappy
[22:11:04] <ManofLetters[m]> and I use -I to take advantage of on longer pauses between player moves, not very short ones (in benchmark there are no pauses, so it has some other random effects on benchmarks)
[22:11:30] <ManofLetters[m]> *to take advantate of turn-based character of the game
[22:11:36] <ManofLetters[m]> and GHC on longer pauses only
[22:11:52] <ManofLetters[m]> when the player thinks or reads, as oppose to smashing keys
[22:13:09] <ManofLetters[m]> and for benchmarks, and real-time games, both -A99m and -I5 are probably detrimental
[22:13:22] <EvanR> shouldn't the idle gc automatically take advantage of pauses
[22:13:40] <ManofLetters[m]> with -I0 it's turned off
[22:13:51] <ManofLetters[m]> the default is -I0, IIRC
[22:14:28] <ManofLetters[m]> that may just be enough time for the player to make a few actions one after another without thinking
[22:14:32] <ManofLetters[m]> that should be snappy
[22:14:40] <EvanR> you know what's annoying, I think the gc/idlegc does not run while the program is blocked waiting for vsync
[22:14:50] <ManofLetters[m]> oh
[22:14:54] <ManofLetters[m]> no idea
[22:15:01] <ManofLetters[m]> but does vsync wait block all threads?
[22:15:13] <ManofLetters[m]> hmm, probably depends on -threaded
[22:15:15] <ManofLetters[m]> a
[22:15:17] <ManofLetters[m]> yay
[22:15:27] <EvanR> I have -threaded but only 1 real worker thread right now
[22:15:51] <ManofLetters[m]> if something is blocked in IO, another worker should auto-spawn
[22:15:59] <ManofLetters[m]> I'd expect that for vsync as well
[22:16:00] <ManofLetters[m]> but no idea
[22:16:10] <EvanR> I'll check the ffi bindings
[22:17:17] <ManofLetters[m]> another thing is if you actively wait for a confirmation that drawing has ended or that subsequent drawing has started
[22:17:50] <ManofLetters[m]> but then it should not block GC
[22:18:02] <ManofLetters[m]> hmm
[22:18:15] <ManofLetters[m]> the stop-the-word GC needs to stop all threads
[22:18:23] <ManofLetters[m]> (the old standard copying one)
[22:18:38] <ManofLetters[m]> so perhaps it can't block them if they are already blocked in IO? that would be silly, but I don't know
[22:19:06] <ManofLetters[m]> please report if you find out; that seems useful to know
[22:20:43] <EvanR> the ffi bindings don't exist because they are generated during build time by a script and I can't tell if things are imported safe or unsafe
[22:21:09] <EvanR> the word unsafe doesn't appear in the generator
[22:21:56] <ManofLetters[m]> oh yes, that matters for the auto-spawn of extra workers
[22:21:59] <EvanR> what does happen is -S produces a lot less reports with vsync on
[22:22:00] <ManofLetters[m]> e.g., sdl ffi is of the worse kinds (no extra workers)
[22:22:00] <ManofLetters[m]> but changing it apparently doesn't help any
[22:22:02] <ManofLetters[m]> rutime-wise
[22:22:20] <ManofLetters[m]> interesting
[22:22:46] <ManofLetters[m]> so perhaps stop-the-world means "wait until all are unblocked and then tell them to enter a special state to be ready for GHC"
[22:23:09] <EvanR> if something is in the middle of an unsafe call I wouldn't be surprised but I'm not sure
[22:24:30] <ManofLetters[m]> if a thread waits for IO to write something on the heap and while it's blocked in IO, the heap contents totally changes, that sounds bad
[22:24:58] <ManofLetters[m]> I'm sure this can be worked around, but I can see why it's simple to wait for all threads to finish their work before stop-the-world
[22:25:35] <ManofLetters[m]> so perhaps you are right and the -S is just vsync interfering with GC
[22:25:44] <ManofLetters[m]> TIL
[22:26:48] <ManofLetters[m]> BTW, why don't you run GHC forcefully every 100th frame and turn off idle GC?
[22:26:57] <ManofLetters[m]> or every 10th
[22:27:31] <EvanR> that sounds like a long gc
[22:27:42] <ManofLetters[m]> and increase GC memory areas enough that it doesn't want to run more often
[22:27:58] <ManofLetters[m]> would that introduce a lag?
[22:28:10] <EvanR> that sounds like it would work if there are opportunities to stop and think in the game
[22:28:15] <ManofLetters[m]> but at least you'd control when it is
[22:28:15] <EvanR> often enough
[22:28:20] <ManofLetters[m]> right
[22:28:26] <icrbow[m]> Ii do perforakorGC right before waiting for "vsync". This keeps the pressure off and the pauses minimal.
[22:28:35] <EvanR> but if the player plays a level for like 10 minutes, you'd run out of memory
[22:28:35] <ManofLetters[m]> ^^^
[22:28:38] <icrbow[m]> s/perforakorGC/performMajorGC/
[22:28:42] <ManofLetters[m]> who cares
[22:28:47] <ManofLetters[m]> :P
[22:28:57] <EvanR> icrbow[m], ah I'll try that
[22:29:59] <ManofLetters[m]> EvanR: I wonder if the incremental GC would also show the -S interaction with vsync
[22:30:31] <ManofLetters[m]> and generally, how it'd fare (but you probably can't measure, because you don't have any real complains already:)
[22:30:36] <EvanR> which one is "the incremental gc"
[22:30:58] <ManofLetters[m]> --nonmoving-gc
[22:31:09] <EvanR> I do have complaints, I have almost nothing going on and with vsync I often have sporadic missed frames
[22:31:24] <ManofLetters[m]> oh
[22:31:45] <ManofLetters[m]> so perhaps it happily starts GC at exactly the one moment you care it wouldn't
[22:31:53] <EvanR> yeah
[22:32:04] <ManofLetters[m]> e.g., due to the block with vsync
[22:32:12] <EvanR> maybe the gc and the critical render time come into phase sometimes
[22:32:27] <ManofLetters[m]> nasty
[22:34:34] <ManofLetters[m]> BTW, for --nonmoving-gc you are best off with 9.2.1 or HEAD (9.0.2 may be fine, too; I guess anything critical would be backported)
[22:41:04] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:41:28] <EvanR> vsync on, performGC before swapBuffers does seem to improve the visual, also brings up -S reports up to a very fast stream of 70k (much higher than before) copies, and Productivity  73.2% of total user, 98.8% of total elapsed
[22:41:55] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:44:04] <ManofLetters[m]> yep, productivity down, because you GC too often for average runtime, but you don't much care (apart of overall CPU energy consumption), if you get better latency
[22:44:57] <ManofLetters[m]> unless you can scale your AI to be more smart if you can free some CPU
[22:45:07] <EvanR> indeed with vsync on it's 4% cpu
[22:45:08] <ManofLetters[m]> dynamically scale
[22:45:32] <ManofLetters[m]> doh
[22:45:49] <EvanR> putting graphics on the main thread and "work" like AI on other threads may allow using more CPU
[22:46:47] <ManofLetters[m]> BTW, main thread is slow, so just spawn another "main thread" and use that one, unless your graphics library is not thread-safe
[22:47:10] <EvanR> OpenGL, yeah probably ont
[22:47:20] <EvanR> thread local state
[22:47:43] <ManofLetters[m]> OpenGL is not thread-save on OSX
[22:47:49] <EvanR> main thread is slow?
[22:47:57] <ManofLetters[m]> and possibly on some Windows
[22:47:59] <EvanR> main screen turn on
[22:48:35] <ManofLetters[m]> search "main thread" at: https://downloads.haskell.org/ghc/latest/docs/html/libraries/base-4.16.0.0/Control-Concurrent.html
[22:48:50] <ManofLetters[m]> this is probably true about any bound threads
[22:48:54] <ManofLetters[m]> but with OpenGL you have no choice
[22:50:11] <EvanR> there's plenty to do by not the main thread
[22:50:18] <EvanR> let it have graphics
[22:57:25] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[23:03:09] <EvanR> combined with --nonmoving-gc the copies go to 500 (not k) and the visual is very smooth >_>
[23:03:34] <EvanR> productivity 93%
[23:05:03] <EvanR> seems like a fluke
[23:05:57] <EvanR> are there long-term consequences of nonmoving-gc ?
[23:07:26] <EvanR> answering my own question, eventually the visuals degrade
[23:13:29] <EvanR> I'm getting good results with the default gc and -c now (use compacting for oldest generation instead of copying)
[23:14:28] <ManofLetters[m]> 8.10.7?
[23:15:27] <ManofLetters[m]> it sounds, the GC pauses were short, but it didn't manage to GC enough, so eventually it had to GC longer
[23:15:51] <ManofLetters[m]> that's what why the new GC is called "incremetnal"
[23:16:26] <ManofLetters[m]> it still gets its performance improved
[23:17:03] <ManofLetters[m]> so should be better in newer GHCs
[23:18:38] <EvanR> 14 MiB total memory in use (2 MB lost due to fragmentation) :S
[23:19:14] <EvanR> 8.10.7
[23:19:23] <ManofLetters[m]> thanks
[23:38:41] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
