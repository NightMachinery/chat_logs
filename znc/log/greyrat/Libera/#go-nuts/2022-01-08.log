[00:02:12] <zsnes> you could also just use template strings to do something similar with a little more clarity
[00:02:27] <zsnes> text/template i mean
[00:09:53] <fizzie> There's of course strings.ReplaceAll too, for ad-hoc use.
[00:10:21] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[00:12:37] <bpalmer> text/template and clarity?
[00:13:54] <zsnes> in reference to using indexed %s to use one argument for multiple %s in a format string
[00:15:03] <bpalmer> sorry, I'm scoffing at the idea that anything is clearer when using templates.
[00:15:33] <zsnes> a field name is likely more readable than multiple %[1]s %[2]s, no?
[00:16:27] <bpalmer> they work, they're adequate, but they're awkward and slightly overengineered (imo).
[00:18:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[00:20:10] <bpalmer> Is `var b strings.Builder ; template.Must(template.New("equal").Parse("{{ .Var -}}={{ .Var -}}")).Execute(&b, struct { Var string} {"a"})` clearer? I'm not sure.
[00:20:34] <foobaz> i watched a talk by rob pike where he apologized for go's template system :)
[00:20:56] <foobaz> "Lexical Scanning in Go" https://www.youtube.com/watch?v=HxaD_trXwRE
[00:21:27] <foobaz> he said he hopes for an improved but incompatible template library in go 2
[00:22:05] <foobaz> i don't think it's all that bad, but they're definitely not go's finest moment
[00:22:47] *** Joins: darkapex (~darkapex@user/darkapex)
[00:26:33] <zsnes> if you get the order of the arguments wrong using indexed entrys to a format string, it would not be obvious from the code alone
[00:26:42] <zsnes> whereas the template basically can't have that issue.
[00:27:12] <b0nn> yeah - this is the "order of arguments" vs "named arguments" discussion
[00:27:18] <zsnes> right
[00:29:14] <zsnes> the templating certainly needs work but it's better than a lot of other systems I've used with like perl/C/old groff text formatting based stuff
[00:36:30] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[00:41:32] <pyzozord> so I just did sudo apt install golang-1.16-go but now I don't have 'go' program in cli, did I do something wrong, or do I need to do something more?
[00:41:58] <ikke> what does dpkg-query -L golang-1.16-go | grep bin; return?
[00:42:42] <pyzozord> /usr/lib/go-1.16/bin/go and gofmt and some
[00:43:02] <ikke> So you would need to add /usr/lib/go-1.16/bin to your PATH
[00:43:19] <fizzie> If this is Debian, there's a `golang-go` that adds an /usr/bin/go.
[00:43:39] <fizzie> Presumably doing some sort of logic for version selection, if you have more than one Go version installed.
[00:43:57] <pyzozord> shouldn't it tell me to add it to path explicitly?
[00:44:07] <pyzozord> that's ubuntu 20.04
[00:44:25] *** Quits: bkircher (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689) (Quit: Leaving)
[00:44:43] <foobaz> aptitude has a good UI for version selection if that's an issue, but if you're lucky 1.16 will be the default and you won't have to
[00:45:19] <pyzozord> ah so I should also do apt install gccgo-go?
[00:45:27] <foobaz> what ubuntu should or should not do is outside the scope of #go-nuts
[00:45:30] <ikke> no, not gccgo-go
[00:46:07] <ikke> pyzozord: apt-cache search golang-go
[00:46:16] <pyzozord> golang-go depends on golang-1.13-go
[00:46:23] <fizzie> The comparable Debian package's description does tell you to change the PATH if you want to use a non-default version.
[00:46:39] <fizzie> "To use this version, instead of the default one provided by golang-go package, add /usr/lib/go-1.17/bin/ to PATH, or invoke /usr/lib/go-1.17/bin/go directly."
[00:46:46] <fizzie> (Well, for `golang-1.17-go`.)
[00:46:49] <foobaz> pyzozord: use aptitude or synaptic to browse the list of available versions of golang-go
[00:47:59] <pyzozord> ubuntu's golang-1.17-go package description doesn't mention PATH
[00:48:12] <pyzozord> sorry golang-1.16-go, it doesn't have 1.17
[00:48:31] <pyzozord> does ubuntu expect me to do something different?
[00:48:55] <fizzie> That's a shame. But if it follows the same model, it sounds like they've opted to set things up so that you only get a /usr/bin/go for whatever the distribution's "default" version of Go is.
[00:48:59] <foobaz> no, ubuntu expects the same as debian, it's just missing the helpful message
[00:50:38] <foobaz> this package might work: https://packages.ubuntu.com/hirsute/golang-go
[00:51:01] <foobaz> if you download the package and install it manually, it won't automatically update like the rest of your packages
[00:51:21] <foobaz> it's "dpkg -i" to install a downloaded package
[00:51:54] <pyzozord> that's for ubuntu 21.04, I'm on 20.04
[00:52:10] <foobaz> i realize that
[00:52:23] <ikke> there is a concept of alternatives
[00:52:59] <fizzie> There is, but apparently not for the Go packaging.
[00:53:03] <pyzozord> ah so you are suggesting to just download it from web and do dpkg -i
[00:53:12] <foobaz> using packages from the wrong ubuntu version will often fail due to dependencies, especially libc
[00:53:22] <ikke> http://manpages.ubuntu.com/manpages/trusty/man8/update-alternatives.8.html
[00:53:25] <foobaz> but go doesn't have many dependencies, so there's a better-than-usual chance it will work
[00:53:35] <foobaz> and if it doesn't work, it won't screw up your system, you'll just get an error message
[00:53:58] <pyzozord> so that all looks like mess and on the go.dev site I don't see any of apt stuff, it tells me to just download go directyly
[00:54:03] <pyzozord> maybe I should do that then?
[00:54:20] <pyzozord> how manual is it to update later? do I need to download and manually install each version every time?
[00:54:22] <fizzie> I did decide to maintain the Go installation outside the package manager (as an exception), FWIW.
[00:55:07] <foobaz> if you want to stay up to date, it's advisable to use a package repository that provides up-to-date go packages
[00:55:37] <pyzozord> hmm, it's a bit messy this
[00:55:44] <foobaz> it's because you're using ubuntu 20.04
[00:55:52] <foobaz> the entire point of ubuntu LTS is that it has old packages
[00:55:59] <pyzozord> but not like python's stuff is any better on ubuntu
[00:56:16] <foobaz> the simplest thing would just be to use the version it offers, 1.13 i think you said?
[00:56:31] <pyzozord> I thought the point was to maintain old packages for long time, not to be limited to only old packages :D
[00:56:34] <fizzie> Well, it's a bit of a shame that they offer Go 1.16 in focal-updates, but not an update to the `golang-go` package that provides the /usr/bin/go link.
[00:57:08] <foobaz> if you have a need for newer packages you should probably use a distro with newer packages, like a newer version of ubuntu
[00:57:18] <fizzie> (But there's probably a reason for that, like some other packages depending on 1.13 being the installed version or something.)
[00:57:48] <pyzozord> I understand minor release is about every  months, that would suggest that 13 was about 2 years old and 16 is half year old
[00:57:58] <pyzozord> 6*
[00:58:10] <foobaz> close enough :)
[00:58:25] <fizzie> 1.13 is from September 2019, 1.16 is from February 2021. There's dates at the https://go.dev/project summary.
[00:58:38] <foobaz> go was quite mature by 1.13, personally i would have no problems using 1.13 to develop with
[01:00:28] <pyzozord> I think so too, I remember in 2019 I was working for a company who was perfectly happy releasing go to production
[01:00:40] <pyzozord> anyway I just feel like I'm missing out if I don't have the latest stuff
[01:00:50] <fizzie> As far as the language is concerned, definitely. Tooling-wise, 1.16 did flip the GO111MODULE default from 'auto' to 'on', which is nice(?).
[01:00:59] <foobaz> python 3.8 came out around the same time, it's clearly still a viable development platform
[01:01:26] <foobaz> i myself write python using 3.7 which came out in may 2018
[01:01:46] <ikke> pyzozord: why not just add it to your PATH?
[01:02:00] <pyzozord> yes, I'm using python 3.8 but I did run into some situations where the syntax I wanted wasn't (yet) supported in 3.8
[01:02:11] <pyzozord> yeah I'll do just add PATH
[01:03:12] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[01:03:23] <fizzie> FWIW, if you don't have and aren't planning to install `golang-go` at all, you could also just add the symlinks manually.
[01:03:26] <pyzozord> it's just a bit annyoing since I don't have to do it for any other language
[01:03:48] <foobaz> you would, if you wanted the newest version of another language
[01:03:49] <pyzozord> is there something else in golang-go that I might miss?
[01:03:55] <b0nn> back in myyyyyyyyy day you used to have to do it for running java apps
[01:04:00] <fizzie> Man pages.
[01:04:06] <pyzozord> oh, that's important
[01:04:25] <b0nn> Slackware I used to have to download the java runtime, then symlink it
[01:04:26] <pyzozord> but I did install golang-1.16-doc
[01:04:53] <fizzie> I checked the files of the hirsute `golang-go`, and it's (a) usr/bin/{go,gofmt} and usr/lib/go as symlinks to ../lib/go-1.16/bin/{go,gofmt} and go-1.16 respectively, and usr/share/man/man* files for `go`, `go-build`, and so on.
[01:04:56] <pyzozord> but there seems to be no manpages in golang-1.16-doc
[01:05:51] <fizzie> Honestly there doesn't seem to be anything in the manpages that wouldn't be there in `go help`.
[01:06:08] <fizzie> (Although I guess you get a pager by default from the man pages, which is something.)
[01:06:31] <pyzozord> does go help support full text search?
[01:06:50] <ikke> You can pipe it to less and you basically have man pages
[01:07:02] <pyzozord> I mean in all files
[01:07:22] <pyzozord> if I want to search entire documentation for "write" for example
[01:07:59] <fizzie> That wouldn't be _terribly_ useful.
[01:08:06] <fizzie> For the man pages, I mean.
[01:08:35] <pyzozord> i'd usually do something like man -k go.*write
[01:08:53] <fizzie> What would you be trying to find with that specifically?
[01:09:11] <pyzozord> it's more of an exploration technique
[01:09:28] <pyzozord> just to help me get familira with what's possible, what's out there to discover
[01:09:31] <b0nn> pyzozord: yeah _ I use Google for that sort of exploration :)
[01:09:39] <fizzie> Hmm. Well, yes, you'd be missing that, I guess. But they're pretty sparse. The word "write" for example appears a total of five times in the Ubuntu Go man pages, and all seem pretty unrelated to anything you might plausibly be looking for.
[01:10:21] <pyzozord> b0nn: web stuff is just too slow for me sometimes
[01:10:28] <fizzie> (Four cases around `gofmt` rewrite rules, and once in documenting what `go build` does.)
[01:10:59] <pyzozord> so there is no "write" word on the pages about writing files to disk?
[01:11:02] <b0nn> pyzozord: text search locally has little contextual help - IOW you have to know what you are looking for
[01:11:31] <fizzie> The man pages document the tools, not the language or the standard library.
[01:11:40] <b0nn> Google, for all its shortcomings does have some help (common mispellings etc)
[01:11:41] <pyzozord> ooh i see
[01:11:44] <pyzozord> that's no that bad
[01:11:47] *** Joins: haliucinas (~haliucina@5.20.153.21)
[01:11:57] <pyzozord> I thought it documents the language itself and the standard library
[01:12:07] <fizzie> That'd be `godoc`, not the man pages.
[01:12:45] <pyzozord> godoc doesn't seem to be included in golang-1.16-go
[01:13:48] <fizzie> In Debian it's packaged in `golang-golang-x-tools`, though could be installed via `go get` too.
[01:14:15] <fizzie> Also, the interface would still be via a browser, it just runs a web server.
[01:14:35] <fizzie> I'm sure _someone_ has made a more terminal-friendly (unofficial) way of browsing the documentation, though.
[01:14:51] <fizzie> (I've just given up on that sort of thing and use the browser.)
[01:15:48] <pyzozord> yeah looks like ubuntus go package is pretty poor in general
[01:15:53] <b0nn> hrm - gopls migh have that (When I hover over a function in vim-go, the signature comes up, and so does the definition if I recall correctly)
[01:17:03] <fizzie> Yeah, it does do that. Not sure if it's really well-suited for just browsing around the documentation in general though.
[01:17:47] <b0nn> yeah - and it relies on the right spelling of the symbol
[01:18:04] <b0nn> honestly, though, I'm a hard core "Google it" or "Ask IRC"
[01:18:08] *** Joins: Maxattax97 (~max@2603-900a-1501-a7ca-0000-0000-0000-077a.inf6.spectrum.com)
[01:18:22] <pyzozord> Ask IRC, I am totally behind
[01:18:23] <fizzie> `go install golang.org/x/tools/cmd/godoc@latest` successfully installed godoc, and `godoc -http=localhost:6060 -index` started a local web server with full-text search support.
[01:18:46] <fizzie> So that's one way, if you don't want to use a remote website but are okay with a browser-based interface.
[01:19:00] <fizzie> (Can't advise on alternative ways of browsing it though.)
[01:19:04] <pyzozord> Google it, less so. I like to have documentation handy, google is just... To slow really. Type it, search it, then somehow click it, open another page...
[01:19:39] <pyzozord> compare that to man 3 printf, or info bash
[01:20:02] <pyzozord> or even pydoc3 itertools
[01:20:06] <pyzozord> it's instant
[01:20:15] <b0nn> having spent years searching blindly through documentation hoping to chance upon whatever it is I think I want, vs asking google and hoping I have asked it the right question - google is a lot faster for me
[01:20:47] <pyzozord> I was talking now more about reference, things you already know but don't remember
[01:20:49] <fizzie> For looking up references (beyond what gopls provides), "gopkg fmt.Printf" is what I type in my browser address bar, and it redirects to https://pkg.go.dev/search?q=fmt.Printf which -- okay, it does take _one_ extra click to land on the "obvious" result.
[01:20:54] <b0nn> I mean, as I said before, local text searches don't have any contextual aids, google has *some*
[01:21:20] <pyzozord> also for discovery google never feels complete because it's endless. When I have entire documentation downloaded I have a clear beggining and end
[01:21:23] <fizzie> Might be nice if it'd directly go to the result on really "exact" matches (at least from the standard library).
[01:22:20] <pyzozord> so for me google feels more messy, I never know if that was it or if there is more
[01:23:01] *** Quits: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it) (Remote host closed the connection)
[01:23:04] <pyzozord> i still use it when solving particular problems, when I can't find things in documentation
[01:23:22] *** Joins: darkapex (~darkapex@user/darkapex)
[01:23:39] <fizzie> Just for reference, https://0x0.st/ozRv.png is the result you'd get from godoc for a query like `fmt.Printf`, i.e., when looking up a standard library function.
[01:24:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[01:24:20] <pyzozord> that's great, that would be useful
[01:24:34] <b0nn> if you look for printf, will it throw log.Printf at you too
[01:24:36] <pyzozord> i don't use any autocompletion or intellisense kind of features in my editors
[01:24:47] *** Quits: Maxattax97 (~max@2603-900a-1501-a7ca-0000-0000-0000-077a.inf6.spectrum.com) (Ping timeout: 268 seconds)
[01:25:00] <fizzie> I guess one nice bit about godoc is that it'll also show you the generated documentation from your own code if you start it "inside" a module you're working on.
[01:25:17] *** Quits: haliucinas (~haliucina@5.20.153.21) (Remote host closed the connection)
[01:25:45] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:25:55] <b0nn> In vim-go I use <c-x><c-o> for suggestions
[01:25:56] <fizzie> (Not sure if the official dev site moving from godoc to the new pkg.go.dev site is a bad sign for the future of the tool, though.)
[01:25:57] *** Joins: mickey8 (~user@user/mickey)
[01:26:14] *** Joins: fikran (~fikran@user/fikran)
[01:28:03] *** Joins: haliucinas (~haliucina@5.20.153.21)
[01:28:20] <pyzozord> is pkg.go.dev new?
[01:28:40] <pyzozord> I remember something strange with go packaging from that 2019 era with the 111 flag
[01:28:59] <pyzozord> it was kind of confusing, there a some nice new way at the time that use go.mod files I think
[01:29:06] <pyzozord> and also some old way
[01:29:21] <b0nn> I thnk that I'm going to be grumbling about this codebase for a little whiles: There are http.Error(w, "s", http.StatusBadRequest)// that's *literally* the response
[01:29:49] <b0nn> and it's the exact same response for a different cause :\
[01:32:06] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[01:33:34] *** Joins: endigma (~endigma@drmons0552w-134-41-91-32.dhcp-dynamic.fibreop.ns.bellaliant.net)
[01:35:55] <fizzie> pkg.go.dev is at least newER. AIUI, it used to be that the "official" web documentation for the Go standard library and third party packages was served from a godoc-based (though slightly customized) system, the address of which I've forgotten (something.golang.org); that's the one that got replaced by pkg.go.dev in the last year or two.
[01:36:26] <fizzie> No, it was godoc.org apparently.
[01:36:33] <fizzie> https://go.dev/blog/godoc.org-redirect for the story.
[01:39:03] <fizzie> (Apparently the code for pkg.go.dev is available, but I strongly suspect running it locally is more involved than godoc.)
[01:40:48] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:45:21] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[01:47:50] *** Quits: mooff (mooff@awful.cooking) (Remote host closed the connection)
[01:48:57] *** Joins: mooff (mooff@awful.cooking)
[02:00:47] *** Joins: evocatus (~evocatus@62.182.77.224)
[02:01:24] *** Quits: evocatus (~evocatus@62.182.77.224) (Remote host closed the connection)
[02:04:03] *** Quits: dr0n (~mnxaw@94.11.23.235) (Remote host closed the connection)
[02:06:01] <pyzozord> fizzie: thanks
[02:11:38] *** Quits: trafficjam (~trafficja@119.17.42.59) (Ping timeout: 256 seconds)
[02:16:20] <pyzozord> I just followed https://go.dev/doc/install and I don't have godoc still
[02:16:44] *** Quits: wim (~wim@42.be) (Ping timeout: 265 seconds)
[02:16:49] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:21:29] <LiENUS> you should have go doc godoc is a different package
[02:21:47] <fizzie> Those being the standard Go installation instructions? Yeah, it's not part of the distribution, `go` and `gofmt` are the only binaries included as part of the installation.
[02:21:53] <LiENUS> `go install -v golang.org/x/tools/cmd/godoc@latest`
[02:21:56] <LiENUS> that'll get you godoc
[02:22:03] <pyzozord> ooh ok I see, thank you
[02:22:12] <fizzie> That'll install it into $GOBIN, specifically.
[02:22:57] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[02:23:06] <LiENUS> go doc is basically godoc but cli only
[02:24:14] <fizzie> And no hypertext. :/
[02:24:38] <pyzozord> so this https://go.dev/doc/install page doesn't tell me to make a ~/go directory
[02:25:11] <pyzozord> and at the end it tells me to next follow https://go.dev/doc/tutorial/getting-started which gets right into makeing a project, I still don't see there ~/go directory mentioned
[02:25:55] <fizzie> You don't need to _make_ one, it (assuming you don't configure the environment variables to something else) gets created automatically.
[02:25:58] <pyzozord> how would I find out it if I didn't know it already?
[02:26:08] <pyzozord> oh I see
[02:26:30] <pyzozord> is it going to break many things if I change it to ~/.go. It's annyoing to have it visible in my home directory
[02:26:44] <pyzozord> am I going to visit ~/go at all?
[02:27:04] <pyzozord> or is it only pretty much used to store global packages
[02:27:04] <fizzie> I don't think it should break anything, and there usually isn't any need to visit it.
[02:27:20] <pyzozord> thanks
[02:27:43] <fizzie> It's used as the default path of a bunch of thing. Maybe the most relevant part is, the bin/ directory under it is where `go install` puts things by default.
[02:28:12] <fizzie> So if you want `go install ...` to make things available as commands, you'll either want to add that to your path, or point the `GOBIN` environment variable to some place that's already in it.
[02:28:14] <pyzozord> then I wonder what kind of design philosophy dictated the choice to break with more or less status quo of putting these kinds of home config dirs with prefix dot to hide them?
[02:28:40] <fizzie> Historical reasons, I imagine. GOPATH used to mean a lot more.
[02:28:55] <pyzozord> what else did it mean?
[02:29:25] <fizzie> You used to have to put all your Go source code (what you write, and what third-party dependencies you want to have available) in subdirectories of $GOPATH.
[02:29:30] <fizzie> (Before modules got introduced.)
[02:30:01] <pyzozord> I don't like to stray away from provided defaults, but I really am not keen on a technical directory like that being visible in my home directry for me as a user
[02:30:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:31:02] <pyzozord> ah, I believe it's possible that go 1.12 I might have encountered that thing that I had to put projects inside the go directory
[02:31:09] <pyzozord> that wasn't very cool to be honest
[02:31:51] <pyzozord> btw does go have it's own compiler and assembler or does it leverage system for these things?
[02:32:13] <pyzozord> well I imagine it must have it's own common but maybe it just compiles to some common bytecode
[02:32:26] <pyzozord> that gets compiled to assembly by something external
[02:32:35] <fizzie> It has its own compiler, assembler and linker.
[02:32:35] *** Joins: fikran (~fikran@user/fikran)
[02:33:04] <pyzozord> can i see the source of go? I tried to briefly look for it on github and couldn't find it
[02:33:30] <fizzie> You could use the fancy browser at https://cs.opensource.google/go/go/+/master:
[02:33:52] <fizzie> Although there is a mirror on GitHub as well.
[02:34:14] <fizzie> (Namely https://github.com/golang/go and various other repositories under the golang/ project.)
[02:35:38] <pyzozord> thanks
[02:37:11] <fizzie> By the way, there's an even more technical directory called $GOCACHE (which defaults to ~/.cache/go-build) where it'll put temporary cached build artifacts.
[02:37:36] <pyzozord> oh nice, but that default I am happy with
[02:37:50] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[02:37:58] <fizzie> As for $GOPATH (the thing that's ~/go by default), you should be able to move it as a whole if you want. I keep mine in ~/prog/gocode since I happened to have a ~/prog top-level directory for Android SDKs and other similar boring bits.
[02:38:07] <pyzozord> what kind of build artifacts exist?
[02:38:28] <pyzozord> i'd be very happy with just ~/.go
[02:38:53] <fizzie> Setting GOPATH to $HOME/.go should accomplish that, I think.
[02:39:22] <pyzozord> wait, is go wrriten in go? https://github.com/golang/go/blob/master/src/go/parser/parser.go
[02:39:54] <fizzie> It's mostly written in Go, yes.
[02:40:19] <pyzozord> that is pretty crazy
[02:40:37] <fizzie> Hey, most C compilers are written in C too. (Well, maybe C++ these days.)
[02:40:52] <pyzozord> I know but... It's still crazy :)
[02:41:21] <pyzozord> Impressive that _the_ go language's parser is simply just less than 3000 lines of go
[02:41:34] <pyzozord> makes you think you could write something like that yourself
[02:43:53] <pyzozord> can't find the assembler, but everything in time
[02:43:55] <fizzie> Well... maybe you'd have to count https://github.com/golang/go/tree/master/src/go/ast as part of the parser as well. But it's not too huge, no. And it's a handcrafted parser, not a YACC thing.
[02:44:30] <pyzozord> yeah which makes it even better
[02:44:46] <pyzozord> and I underlined the word the, because go language is amazing
[02:45:09] <pyzozord> kind mindblowing that so little code is necessary to write such a significant language
[02:47:51] <fizzie> For the assembler (and code generation), I believe that's mostly https://github.com/golang/go/tree/master/src/cmd/internal/obj and https://github.com/golang/go/tree/master/src/cmd/asm -- in general, the packages under `cmd/` will be the Go tools that you invoke (or `go build` calls internally), so they're a reasonable starting point for exploration.
[02:48:47] <pyzozord> thanks again fizzie
[02:49:09] <pyzozord> I'll leave you alone for today, but I'll be back probably with many questions
[02:53:41] *** Joins: wim (~wim@42.be)
[02:58:05] *** Quits: zer0bitz (~zer0bitz@196.244.192.57) (Ping timeout: 256 seconds)
[02:59:46] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[03:00:23] *** Joins: teasea (~teasea@user/teasea)
[03:00:52] *** dansan_ is now known as dansan
[03:03:03] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:03:37] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Ping timeout: 240 seconds)
[03:08:28] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[03:18:17] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[03:18:31] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[03:19:10] *** Joins: anandn (~anandn@2601:600:a27f:d92d:f82c:c2d7:e03b:c931)
[03:21:20] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[03:22:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:27:22] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[03:31:10] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[03:33:58] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[03:34:11] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[03:35:57] *** Quits: dntreou (~yakiza@102-65-62-43.ftth.web.africa) (Ping timeout: 240 seconds)
[03:42:27] *** Joins: marlinc_ (~marlinc@user/marlinc)
[03:42:51] *** Quits: marlinc (~marlinc@user/marlinc) (Ping timeout: 256 seconds)
[03:42:55] *** Joins: ADHD (~XXX@user/ADHD)
[03:44:26] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:46:31] *** Quits: marlinc_ (~marlinc@user/marlinc) (Read error: Connection reset by peer)
[04:01:26] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[04:19:42] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:25:23] *** Quits: krux02_ (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:25:42] *** Joins: hanzo (uid532183@user/hanzo)
[04:27:00] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[04:29:48] *** Joins: Teckla (uid172075@user/teckla)
[04:40:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[04:41:56] *** Joins: fikran (~fikran@user/fikran)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:42] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:78c1:741e:24d7:1bb)
[04:54:34] *** Quits: anandn (~anandn@2601:600:a27f:d92d:f82c:c2d7:e03b:c931) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:58:42] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[04:59:42] *** Joins: anandn (~anandn@2601:600:a27f:d92d:ac23:7f:318b:7c56)
[05:03:27] *** Quits: anandn (~anandn@2601:600:a27f:d92d:ac23:7f:318b:7c56) (Client Quit)
[05:04:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[05:13:41] *** Joins: anandn (~anandn@2601:600:a27f:d92d:2527:cb34:db2d:20f)
[05:13:49] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:14:49] *** Quits: anandn (~anandn@2601:600:a27f:d92d:2527:cb34:db2d:20f) (Client Quit)
[05:16:32] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[05:18:14] *** Joins: anandn (~anandn@2601:600:a27f:d92d:2527:cb34:db2d:20f)
[05:19:52] *** Quits: anandn (~anandn@2601:600:a27f:d92d:2527:cb34:db2d:20f) (Client Quit)
[05:45:35] *** Joins: califax- (~califax@user/califx)
[05:46:42] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[05:48:30] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:49:57] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:49:58] *** califax- is now known as califax
[06:00:18] *** Joins: neurocyte09174 (~neurocyte@IP-094046083160.dynamic.medianet-world.de)
[06:00:18] *** Quits: neurocyte09174 (~neurocyte@IP-094046083160.dynamic.medianet-world.de) (Changing host)
[06:00:18] *** Joins: neurocyte09174 (~neurocyte@user/neurocyte)
[06:02:17] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:02:17] *** neurocyte09174 is now known as neurocyte0917
[06:04:45] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:10:51] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[06:14:39] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:31:11] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[06:31:20] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[06:35:57] *** Joins: et_ (~et@user/et)
[06:36:17] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[06:36:25] *** et_ is now known as et
[06:38:46] *** Quits: tristero (~nobody@user/tristero) (Quit: WeeChat 3.3)
[06:49:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:51:17] *** Joins: fikran (~fikran@user/fikran)
[07:04:53] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[07:05:04] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[07:22:29] *** Joins: trafficjam (~trafficja@119.17.42.59)
[07:32:15] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[07:36:31] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[07:39:48] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[07:41:19] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[07:45:34] *** Joins: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com)
[07:48:13] *** Quits: destroycomputers (~destroyco@68-177-178-143.ftth.glasoperator.nl) (Ping timeout: 256 seconds)
[08:03:41] *** Joins: darkapex_ (~darkapex@user/darkapex)
[08:04:17] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[08:12:33] *** Quits: moog_ (~moog@107.126.53.99) (Remote host closed the connection)
[08:17:14] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[08:22:54] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[08:23:19] *** Quits: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[08:24:13] *** Quits: lilgopher (~textual@2601:241:8000:38f0:34e3:500e:d1f0:a562) (Quit: Textual IRC Client: www.textualapp.com)
[08:28:19] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[08:29:50] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[08:41:54] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Read error: Connection reset by peer)
[08:42:03] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[08:43:02] *** Joins: darkapex (~darkapex@user/darkapex)
[08:45:36] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[08:47:43] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[08:48:07] *** Joins: thimslugga (~thimslugg@pool-74-96-254-164.washdc.fios.verizon.net)
[08:48:27] *** Quits: thimslugga (~thimslugg@pool-74-96-254-164.washdc.fios.verizon.net) (Client Quit)
[08:52:12] *** Joins: epony (~epony@user/epony)
[08:53:14] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:58:38] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[09:00:38] *** Joins: fikran (~fikran@user/fikran)
[09:03:43] *** Joins: bluedust (~bluedust@103.148.20.45)
[09:06:40] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Read error: Connection reset by peer)
[09:07:57] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[09:12:13] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 240 seconds)
[09:14:12] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[09:19:37] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[09:21:58] *** Joins: bluedust_ (~bluedust@185.248.85.25)
[09:24:57] *** Quits: bluedust (~bluedust@103.148.20.45) (Ping timeout: 240 seconds)
[09:31:25] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 240 seconds)
[09:33:33] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[09:34:17] *** Joins: sudoforg1 (~sudoforge@wireguard/tunneler/sudoforge)
[09:34:46] *** Quits: bluedust_ (~bluedust@185.248.85.25) (Remote host closed the connection)
[09:38:18] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[09:39:21] *** Quits: sudoforg1 (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 268 seconds)
[09:40:37] *** Joins: sudoforg1 (~sudoforge@wireguard/tunneler/sudoforge)
[09:42:36] *** Joins: bluedust (~bluedust@86.106.136.216)
[10:02:31] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[10:03:06] *** Joins: darkapex (~darkapex@user/darkapex)
[10:05:36] *** Joins: bluedust_ (~bluedust@117.222.186.134)
[10:08:37] *** Quits: bluedust (~bluedust@86.106.136.216) (Ping timeout: 240 seconds)
[10:18:14] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:18:58] *** Joins: kodah (~kodah@user/kodah)
[10:26:19] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 256 seconds)
[10:31:56] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[10:32:20] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[10:33:27] *** Joins: bluedust (~bluedust@103.148.20.45)
[10:36:37] *** Quits: bluedust_ (~bluedust@117.222.186.134) (Ping timeout: 240 seconds)
[10:37:19] *** Joins: walterwhip (~www@user/walterwhip)
[10:45:00] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[11:05:55] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:07:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[11:09:57] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[11:09:59] *** Joins: fikran (~fikran@user/fikran)
[11:10:49] *** Quits: wim (~wim@42.be) (Ping timeout: 265 seconds)
[11:11:27] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-fdd8-467a-d6e1-5c28.ip6.gigabit.dk) (Remote host closed the connection)
[11:11:47] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk)
[11:11:49] *** Quits: ADHD (~XXX@user/ADHD) (Ping timeout: 240 seconds)
[11:12:22] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[11:16:47] *** Joins: mollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk)
[11:17:42] *** Joins: rendar (~rendar@user/rendar)
[11:18:35] *** Joins: darkapex_ (~darkapex@user/darkapex)
[11:18:36] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[11:19:01] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Ping timeout: 240 seconds)
[11:19:27] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[11:23:49] *** Quits: Eren[m]1 (~hellstabb@2001:470:69fc:105::f056) (Ping timeout: 240 seconds)
[11:24:42] *** Joins: Eren[m]1 (~hellstabb@2001:470:69fc:105::f056)
[11:24:53] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.2 - https://znc.in)
[11:25:08] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[11:25:08] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[11:25:08] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[11:27:10] *** Joins: csmarchbanks_ (~csmarchba@prometheus/team/csmarchbanks)
[11:27:31] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Ping timeout: 256 seconds)
[11:39:27] *** Quits: bluedust (~bluedust@103.148.20.45) (Remote host closed the connection)
[11:40:18] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[11:40:45] *** Joins: califax (~califax@user/califx)
[11:42:15] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (Ping timeout: 256 seconds)
[11:43:15] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[11:43:55] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[11:51:28] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 256 seconds)
[11:52:03] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[11:57:59] *** Joins: wim (~wim@42.be)
[11:58:14] *** alrs_ is now known as alrs
[12:06:05] *** Quits: sneak (~sneak@datavi.be) (Quit: ZNC 1.7.5 - https://znc.in)
[12:07:25] *** Joins: bluedust (~bluedust@103.148.20.45)
[12:09:07] *** Joins: sneak (~sneak@datavi.be)
[12:09:25] *** Quits: bluedust (~bluedust@103.148.20.45) (Remote host closed the connection)
[12:10:39] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[12:18:20] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:25:51] *** Joins: mrig (~mrig@user/mrig)
[12:30:57] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 240 seconds)
[12:40:10] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[12:40:55] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[12:51:19] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[12:52:32] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[12:54:50] *** Quits: Echoz_ (~chris@user/echoz) (Ping timeout: 260 seconds)
[12:55:37] *** Joins: mrig (~mrig@user/mrig)
[12:58:56] *** Quits: mrig (~mrig@user/mrig) (Read error: Connection reset by peer)
[12:59:10] *** Joins: mrig (~mrig@user/mrig)
[13:14:55] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[13:15:39] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[13:16:22] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[13:16:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[13:18:16] *** Joins: Echoz_ (~chris@user/echoz)
[13:19:20] *** Joins: fikran (~fikran@user/fikran)
[13:19:45] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[13:29:55] *** Quits: Echoz_ (~chris@user/echoz) (Ping timeout: 256 seconds)
[13:31:01] *** Joins: Echoz_ (~chris@user/echoz)
[13:36:13] *** Quits: Echoz_ (~chris@user/echoz) (Ping timeout: 240 seconds)
[13:37:09] *** Joins: bluedust (~bluedust@103.148.20.45)
[13:37:25] *** Joins: Echoz_ (~chris@user/echoz)
[13:46:05] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[13:49:26] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[13:49:26] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[13:49:26] *** Joins: menace (~someone@user/menace)
[13:49:31] *** menace is now known as Deknos
[13:55:49] *** Joins: bindu_ (~bindu@user/bindu)
[13:56:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[13:57:44] *** bindu_ is now known as bindu
[14:01:39] *** Quits: Echoz_ (~chris@user/echoz) (Ping timeout: 256 seconds)
[14:02:18] *** Joins: Echoz_ (~chris@user/echoz)
[14:02:59] *** Quits: d42 (~root@user/d42) (Quit: ZNC - http://znc.in)
[14:04:47] *** Quits: Deknos (~someone@user/menace) (Remote host closed the connection)
[14:05:04] *** Joins: Deknos (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[14:06:08] *** Quits: Deknos (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[14:06:08] *** Joins: Deknos (~someone@user/menace)
[14:07:31] *** Joins: d42 (~root@user/d42)
[14:12:25] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 256 seconds)
[14:18:40] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[14:25:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[14:25:05] *** Joins: zer0bitz (~zer0bitz@196.244.192.61)
[14:25:43] *** Joins: zer0bitz_ (~zer0bitz@196.244.192.61)
[14:26:41] *** Joins: fikran (~fikran@user/fikran)
[14:29:25] *** Quits: zer0bitz (~zer0bitz@196.244.192.61) (Ping timeout: 256 seconds)
[14:33:34] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:57:04] *** Quits: Deknos (~someone@user/menace) (Remote host closed the connection)
[15:10:30] *** Joins: Deknos (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[15:13:19] *** Quits: bluedust (~bluedust@103.148.20.45) (Remote host closed the connection)
[15:17:01] *** Quits: Deknos (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[15:18:30] *** Joins: Deknos (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[15:23:58] *** Joins: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr)
[15:26:42] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:27:19] *** Joins: bluedust (~bluedust@103.148.20.45)
[15:27:22] *** Quits: Tach (~Tach@user/tach) (Ping timeout: 256 seconds)
[15:28:21] *** Quits: Batzy (~quassel@user/batzy) (Ping timeout: 256 seconds)
[15:28:56] *** Joins: Batzy (~quassel@user/batzy)
[15:30:22] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:30:50] *** Joins: mickey8 (~user@user/mickey)
[15:35:32] *** Quits: vj-- (~vj@bras-base-toroon3514w-grc-63-174-89-63-91.dsl.bell.ca) (Quit: WeeChat 3.4)
[15:35:47] *** Joins: vj-- (~vj@bras-base-toroon3514w-grc-63-174-89-63-91.dsl.bell.ca)
[15:38:41] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[15:39:26] *** Quits: Herby (~quassel@merkur.graeber-clan.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[15:40:22] *** Joins: Herby (~quassel@merkur.graeber-clan.de)
[15:50:02] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[15:50:26] *** Parts: xb0o2 (~xb0o2@user/xb0o2) ()
[15:51:16] *** Quits: bluedust (~bluedust@103.148.20.45) (Remote host closed the connection)
[16:00:05] *** Quits: Deknos (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Quit: Deknos)
[16:05:07] *** Joins: mickey87 (~user@user/mickey)
[16:07:27] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[16:07:27] *** mickey87 is now known as mickey8
[16:13:23] <pyzozord> Hey, I'm having this problem, what am I doing wrong? found packages hello (hello.go) and main (main.go) in /home/michal/Projects/gohello
[16:13:26] <pyzozord> main.go:5:2: package hello is not in GOROOT (/usr/local/go/src/hello)
[16:13:29] <pyzozord> 🌍
[16:13:52] <pyzozord> well ignore the last line with the emoji
[16:17:00] <j416> pyzozord: different packages must be in different directories
[16:17:40] <j416> pyzozord: move hello.go into for example a subdirectory called hello
[16:17:58] <pyzozord> oh they cannot live in the same directory in just different files?
[16:18:06] <j416> correct
[16:18:13] <j416> all files in a directory belong to the same pacakge
[16:18:45] <pyzozord> ok now I'm just getting main.go:5:2: package hello is not in GOROOT (/usr/local/go/src/hello)
[16:18:46] <j416> except for special cases with blackbox testing where you are allowed to have a hello_test package in a *_test.go file in the same dir as package hello
[16:19:18] <j416> pyzozord: did you create a module around this?
[16:19:32] <j416> if not, "go mod init"
[16:19:37] <pyzozord> oh so it needs go mod init in that subdir?
[16:19:52] <j416> normally you would have one module per repo
[16:19:55] <j416> (vcs repo)
[16:20:05] <pyzozord> I see
[16:20:15] <j416> I'd make the module at the root of your repo; in this case I assume that's the first dir you had
[16:20:22] <pyzozord> if I have one module per repo, is there any other name-space mechanism?
[16:20:38] <j416> what do you mean?
[16:20:49] <j416> the module is the namespace
[16:21:10] <pyzozord> I mean just grouping things together say this part of my application is about logging so they are all accesible under log.
[16:21:20] <pyzozord> log.[stuff]
[16:21:22] <j416> then maybe you'd have a package that you call that
[16:21:25] <j416> within your module
[16:22:04] <j416> your module might be github.com/pyzozord/gohello and under that maybe you have the hello package which would be imported as github.com/pyzozord/gohello/hello
[16:22:25] <pyzozord> and gohello/hello needs to have it's own go.mod file?
[16:22:29] <j416> no
[16:22:35] <j416> that's part of the same module
[16:22:44] <pyzozord> so I think I have that setup now
[16:22:58] <j416> as long as there's a go.mod at the same or higher directory, that's what will be used
[16:23:02] <pyzozord> oh wait I had gohello/hello.og with typo
[16:23:05] <j416> a module is one or more packages
[16:23:22] <pyzozord> oh but fixing typo doesn't help
[16:23:34] <j416> best leave it there then
[16:24:36] <pyzozord> so now i have ~/.go and ~/Projects/gohello and in there I have go.mod main.go and hello/hello.go
[16:24:51] <j416> sounds sane
[16:25:01] <j416> (although not sure what ~/.go is)
[16:25:12] <j416> the module can be anywhere
[16:25:27] <pyzozord> it's the ~/go but I set to be .go
[16:25:42] <j416> ok
[16:26:00] <pyzozord> in main.go I do import "hello"
[16:26:23] <pyzozord> and I expect it to import my local package hello/hello.go but instead I get main.go:5:2: package hello is not in GOROOT (/usr/local/go/src/hello)
[16:26:50] <pyzozord> when instead i do import "./hello" I get "main.go:5:2: local import "./hello" in non-local package"
[16:26:52] <j416> what is your module name? (what does go.mod say?)
[16:27:15] <pyzozord> go.mod has module gohello
[16:27:19] <j416> then, import "gohello/hello"
[16:27:42] <j416> if you plan on publishing your module though, you should make your module name unique
[16:28:05] <j416> (by including your domain or similar)
[16:28:07] <pyzozord> that worked, thanks!
[16:28:16] <pyzozord> what was that about non local packages btw?
[16:28:50] <j416> relative imports are a thing, but not common in Go
[16:29:03] <j416> import using the module name + path to package
[16:29:05] <pyzozord> how does go know where to get my package from? Does it try few places on local disk and then try to interpret it as a url?
[16:29:31] <pyzozord> about local packages: got it, thanks
[16:29:52] <j416> it knows the module name and it knows what packages that module provides
[16:30:04] <j416> I'm not familiar with the exact algorithm it uses to find it.
[16:30:37] <pyzozord> I mean how does it know if a module is on my machine or not?
[16:30:49] <pyzozord> how does go mod tidy know some things need to be donwloaded from the internet
[16:31:01] <j416> in this case, you're importing something in the same module
[16:31:11] <j416> otherwise, there's a cache
[16:31:19] <j416> it'll download what's not there
[16:31:39] <j416> go env GOMODCACHE
[16:32:05] <pyzozord> hmm ok
[16:34:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[16:36:03] *** Joins: fikran (~fikran@user/fikran)
[16:45:39] *** Quits: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr) (Quit: Tach_)
[16:47:05] <pyzozord> are the pre 111 modules still relevant?
[16:47:35] <pyzozord> or can I just forget about what was it before and assume go.mod is the only way?
[16:47:50] <ikke> correct
[17:02:36] <pyzozord> when I'm on this page https://pkg.go.dev/cmd I can click Standard Library at the top in the breadcrumbs, but when I am at the https://pkg.go.dev/std I don't see the cmd package
[17:06:22] <ikke> pyzozord: apparently cmd is a separate module
[17:06:27] <ikke> https://cs.opensource.google/go/go/+/master:src/cmd/go.mod
[17:07:48] <pyzozord> is https://pkg.go.dev/std a single module too?
[17:08:35] <pyzozord> i'm confused why std is displayed as parent of cmd on that website but I don't see cmd as child of the std
[17:08:50] <pyzozord> also confused as to what is std and cmd, I just learned that cmd is a single module from you
[17:08:51] *** Joins: destroycomputers (~destroyco@68-177-178-143.ftth.glasoperator.nl)
[17:08:59] <ikke> https://cs.opensource.google/go/go/+/master:src/go.mod
[17:09:36] <pyzozord> ok so that suggests that std is a single module and cmd is a single module
[17:10:00] <pyzozord> and they aren't related
[17:10:20] <ikke> The relationship is that they are in the same tree
[17:10:34] <pyzozord> oh I see so cmd is like a "submodule" of std
[17:10:55] <ikke> Yeah
[17:11:10] <pyzozord> but then shouldn't I see cmd here https://pkg.go.dev/std?
[17:11:19] <ikke> Apparently it only shows packages in the same module
[17:11:30] <ikke> not nested modules
[17:11:46] <pyzozord> I see
[17:14:30] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[17:14:57] *** Joins: bindu (~bindu@user/bindu)
[17:23:22] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[17:24:42] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[17:27:16] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[17:29:32] *** Joins: bluedust (~bluedust@103.148.20.45)
[17:30:19] *** Quits: jannis (~jannis@user/xjs) (Read error: Connection reset by peer)
[17:44:05] <pyzozord> I'm trying to find the standard library via the pkg.go.dev search feature but I can't see it https://pkg.go.dev/search?q=std
[17:44:11] *** Joins: bluedust_ (~bluedust@185.206.227.136)
[17:46:47] <sztanpet> pyzozord https://pkg.go.dev/std
[17:46:48] <Vigdis> pyzozord, https://pkg.go.dev/std
[17:47:49] *** Quits: bluedust (~bluedust@103.148.20.45) (Ping timeout: 240 seconds)
[17:48:09] <pyzozord> I know but I set up a chrome search engine for pkg so I can access it fast by typing ctrl-l pkg space std enter
[17:48:38] <sztanpet> search for the concrete thing you want then
[17:49:06] <pyzozord> just want to see what's in std
[17:49:28] <pyzozord> is there any other way to access the reference? like manpages or texinfo maybe?
[17:49:47] <pyzozord> I don't use autocompletion so I need fast access to reference
[17:50:48] <bookworm> go doc
[17:51:09] <sztanpet> your usecase doesnt make sense, you either want to "just browse the standard library" in which case start from https://pkg.go.dev/std or you want to search for something in which case searching like https://pkg.go.dev/search?q=io makes sense
[17:51:48] <pyzozord> I'm trying 'go help doc fmt' that doesn't really help
[17:51:57] <pyzozord> sorry I mean go doc fmt
[17:52:13] <pyzozord> oh nevermind it does work, it's perfect, thanks!
[17:52:17] *** Quits: haniaF (~haniaF@79.191.101.105.ipv4.supernova.orange.pl) (Ping timeout: 240 seconds)
[17:53:21] <pyzozord> sztanpet: I just wanted the search to find standard stuff, I think it does make sense
[17:53:37] <pyzozord> but go doc is even better because it doesn't use browser at all
[17:53:39] <sztanpet> no, you said you wanted to browse the standard stuff
[17:54:08] <pyzozord> i want to find standard stuff via the finder and then browse it
[17:54:51] <sztanpet> and that already works with the search on pkg.go.dev
[17:54:57] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:55:24] <pyzozord> ok
[17:56:34] *** Joins: bluedust (~bluedust@117.207.226.11)
[17:57:05] *** Joins: bluedus__ (~bluedust@185.248.85.40)
[17:59:39] *** Quits: bluedust_ (~bluedust@185.206.227.136) (Ping timeout: 256 seconds)
[18:00:37] *** Quits: bluedust (~bluedust@117.207.226.11) (Ping timeout: 240 seconds)
[18:02:07] <pyzozord> is there like a namless package that is just global scope of the module? Menaing can I import "golibhello" and then fmt.Printf(golibhello.Hello())?
[18:03:08] *** Joins: bluedust (~bluedust@117.207.226.11)
[18:04:36] <j416> pyzozord: that'd be stdlib
[18:05:15] *** Joins: dntreou (~yakiza@102-65-62-43.ftth.web.africa)
[18:06:24] <pyzozord> j416: I'm not sure I understand. I wanted to create a module with some functions but I don't want to create any directories inside the module
[18:06:36] *** Quits: bluedus__ (~bluedust@185.248.85.40) (Ping timeout: 256 seconds)
[18:07:13] <pyzozord> and I need to create module to be able to import a package from that module
[18:09:20] <pyzozord> ah nevermind I can do that
[18:09:37] <pyzozord> I just need to put .go file in the root of the module and give it package name the same as the module name
[18:15:14] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[18:15:40] *** Quits: dntreou (~yakiza@102-65-62-43.ftth.web.africa) (Ping timeout: 256 seconds)
[18:17:32] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--77.oracle-ocna.com)
[18:19:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[18:22:02] <j416> the package in the root of your module does not have to be main
[18:24:50] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[18:27:21] *** Joins: Everything (~Everythin@37.115.210.35)
[18:32:19] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[18:34:40] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[18:40:13] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[18:41:24] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--77.oracle-ocna.com) (Ping timeout: 268 seconds)
[18:43:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[18:45:24] *** Joins: fikran (~fikran@user/fikran)
[18:56:01] *** Joins: haniaF (~haniaF@79.191.101.105.ipv4.supernova.orange.pl)
[18:58:36] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[19:04:23] *** Joins: lilgopher (~textual@c-24-12-183-227.hsd1.il.comcast.net)
[19:30:06] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[19:31:50] *** Quits: bluedust (~bluedust@117.207.226.11) (Remote host closed the connection)
[19:32:26] *** Joins: bluedust (~bluedust@117.207.226.11)
[19:32:36] *** Joins: shka (~herr@109.231.0.226)
[19:33:39] *** Joins: johnjaye (~pi@154.6.152.74)
[19:35:00] *** Quits: destroycomputers (~destroyco@68-177-178-143.ftth.glasoperator.nl) (Ping timeout: 256 seconds)
[19:36:07] *** Joins: RougeR (~RougeR@user/rouger)
[19:36:33] *** Quits: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[19:37:07] *** Quits: bluedust (~bluedust@117.207.226.11) (Ping timeout: 256 seconds)
[19:41:44] *** Joins: bluedust (~bluedust@117.207.226.11)
[19:43:36] *** Quits: bluedust (~bluedust@117.207.226.11) (Read error: Connection reset by peer)
[19:43:52] *** Joins: bluedust (~bluedust@117.207.226.11)
[19:46:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:46:46] *** Joins: boof (~rickybob@gateway/vpn/pia/rickybob)
[19:54:16] <pyzozord> j416: I'm not sure what do you mean
[19:54:30] *** Joins: __alex (~alex@2a01:598:990d:4409:605:5a72:731a:b8be)
[20:02:03] *** Quits: sudoforg1 (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[20:09:46] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:13:43] *** Joins: xlei (~akans@pool-108-54-97-84.nycmny.fios.verizon.net)
[20:23:55] *** Quits: xlei (~akans@pool-108-54-97-84.nycmny.fios.verizon.net) (Quit: ZNC 1.9.x-git-167-81df4dec - https://znc.in)
[20:24:13] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 240 seconds)
[20:24:44] *** Joins: xlei (~akans@pool-108-54-97-84.nycmny.fios.verizon.net)
[20:27:26] *** Quits: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net) (Ping timeout: 245 seconds)
[20:27:33] *** Quits: edr (~edr@user/edr) (Ping timeout: 250 seconds)
[20:27:45] *** Joins: edr (~edr@enlo.co)
[20:27:45] *** Quits: edr (~edr@enlo.co) (Changing host)
[20:27:45] *** Joins: edr (~edr@user/edr)
[20:27:47] *** Joins: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net)
[20:28:25] *** Quits: reenix (~reenix@h2924837.stratoserver.net) (Ping timeout: 250 seconds)
[20:28:35] *** Joins: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75)
[20:30:25] *** Joins: Atque (~Atque@user/atque)
[20:31:06] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[20:31:36] *** Quits: eau (~chat@user/eau) (Ping timeout: 245 seconds)
[20:31:53] *** Quits: kinduff (~kinduff@user/kinduff) (Ping timeout: 250 seconds)
[20:32:03] *** Joins: eau (~chat@user/eau)
[20:32:07] *** Joins: kinduff (~kinduff@user/kinduff)
[20:34:05] *** Quits: losinggeneration (~quassel@64.225.54.254) (Ping timeout: 252 seconds)
[20:34:14] *** Joins: losinggeneration (~quassel@64.225.54.254)
[20:37:56] *** Quits: erhandsome (~erhandsom@user/erhandsome) (Ping timeout: 252 seconds)
[20:38:08] *** Joins: erhandsome (~erhandsom@user/erhandsome)
[20:42:04] *** Joins: destroycomputers (~destroyco@68-177-178-143.ftth.glasoperator.nl)
[20:43:35] *** Quits: skrzyp (~skrzyp@skrzyp.net) (Ping timeout: 250 seconds)
[20:43:57] *** Joins: skrzyp (~skrzyp@skrzyp.net)
[20:45:05] *** Quits: bader (~Bader_Lej@freeshell.de) (Ping timeout: 252 seconds)
[20:45:39] *** Joins: bader (~Bader_Lej@freeshell.de)
[20:45:58] *** Quits: __alex (~alex@2a01:598:990d:4409:605:5a72:731a:b8be) (Ping timeout: 268 seconds)
[20:49:06] *** Quits: bookworm (~bookworm@thelounge/maintainer/bookworm) (Ping timeout: 245 seconds)
[20:49:25] *** Joins: bookworm (~bookworm@thelounge/maintainer/bookworm)
[20:50:46] *** Quits: cfjk (~cfjk@user/cfjk) (Ping timeout: 245 seconds)
[20:51:13] *** Joins: cfjk (~cfjk@user/cfjk)
[20:52:20] *** Joins: goldfish (~goldfish@user/goldfish)
[20:53:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[20:53:27] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[20:53:46] *** Quits: klaas (~klaas@simply.kla.as) (Read error: Connection reset by peer)
[20:54:00] *** Joins: klaas (~klaas@simply.kla.as)
[20:54:45] *** Joins: fikran (~fikran@user/fikran)
[20:54:54] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[20:55:25] *** Quits: shtirlic (~shtirlic@95-55-25-207.dynamic.avangarddsl.ru) (Read error: Connection reset by peer)
[20:55:40] *** Joins: shtirlic (~shtirlic@95-55-25-207.dynamic.avangarddsl.ru)
[20:55:54] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[20:56:53] *** Joins: neurocyte0917 (~neurocyte@IP-094046083160.dynamic.medianet-world.de)
[20:56:53] *** Quits: neurocyte0917 (~neurocyte@IP-094046083160.dynamic.medianet-world.de) (Changing host)
[20:56:53] *** Joins: neurocyte0917 (~neurocyte@user/neurocyte)
[20:57:35] <j416> sounds like you solved it, anyway.
[20:57:39] <j416> I suppose?
[20:58:19] *** Quits: klaas (~klaas@simply.kla.as) (Read error: Connection reset by peer)
[20:58:35] *** Joins: klaas (~klaas@simply.kla.as)
[20:58:50] *** Quits: muirrum (~muirrum@sourcehut/user/muirrum) (Ping timeout: 252 seconds)
[20:59:07] *** Joins: muirrum (~muirrum@sourcehut/user/muirrum)
[20:59:18] <pyzozord> yeah I did, but since I am at the beginning of my journy with go, I am trying to absorbe all ideas I can
[20:59:31] *** Quits: a1paca (~a1paca@user/a1paca) (Ping timeout: 245 seconds)
[21:00:20] *** Joins: a1paca (~a1paca@user/a1paca)
[21:00:48] <j416> :)
[21:00:50] <j416> have fun
[21:00:59] *** Quits: klaas (~klaas@simply.kla.as) (Excess Flood)
[21:02:14] *** Joins: klaas (~klaas@simply.kla.as)
[21:04:07] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[21:04:23] *** Quits: xlei (~akans@pool-108-54-97-84.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[21:05:07] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:05:56] <pyzozord> thanks :)
[21:06:13] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[21:08:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[21:10:50] <lilgopher> I wonder what workflow should I be using to check if my code compiles wihtout generating a binary file(i dont want to put the binary in girignore in every repo) and wthout necesarily run "go run /cmd/myprogram/main.go" very time. If I run "go build ./..." a binary file is generated
[21:11:30] *** Joins: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr)
[21:12:37] *** Joins: xlei (~akans@pool-71-190-222-100.nycmny.fios.verizon.net)
[21:14:06] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:14:10] <ikke> does -o /dev/null work?
[21:14:18] <fizzie> `go build ./...` doesn't generate any binaries here, even in a repository that has two main packages (as ./cmd/foo and ./cmd/bar).
[21:14:53] <fizzie> Maybe it would if . were a main package, or if there was just one. Didn't see the behavior mentioned very clearly in the docs.
[21:15:52] <fizzie> I was going to say you can use -o with a wildcard like `./...` only if it's a directory ("go build: cannot write multiple packages to non-directory foo"), but /dev/null does in fact seem to be an exception to that. TIL.
[21:16:27] <lilgopher> fizzie for my sometimes it generates the binaries and sometimes doesnt. I think when you already used "go install ./..." maybe doesnt generate binaries in the root dir of the module?
[21:16:52] <fizzie> I've definitely not used `go install` in that repository.
[21:17:23] <fizzie> It generates a binary if you do `go build ./cmd/foo`, but not for `go build ./...`, but maybe there's more to it than that.
[21:17:33] <lilgopher> "go build -o /dev/null ./..." seems to do the trick
[21:17:36] <fizzie> Anyway, -o /dev/null is certainly more explicit about "I don't want any output".
[21:17:54] <lilgopher> thanks ikke
[21:18:10] <ikke> yw
[21:18:52] *** Joins: egm (~egm@user/egm)
[21:20:18] <lilgopher> maybe go build ./... generates binaries when there is only one main package or something like that
[21:29:57] *** Joins: bluedust_ (~bluedust@185.195.232.175)
[21:31:35] *** Quits: bluedust (~bluedust@117.207.226.11) (Ping timeout: 256 seconds)
[21:36:41] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[21:38:23] *** Joins: johnjaye (~pi@154.6.152.74)
[21:41:07] *** Quits: destroycomputers (~destroyco@68-177-178-143.ftth.glasoperator.nl) (Quit: WeeChat 3.4)
[21:42:00] *** Quits: egm (~egm@user/egm) (Remote host closed the connection)
[21:42:46] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:43:04] *** Joins: bluedust (~bluedust@117.207.226.11)
[21:44:37] *** Quits: xlei (~akans@pool-71-190-222-100.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[21:44:53] *** Joins: xlei_ (~akans@pool-71-125-19-142.nycmny.fios.verizon.net)
[21:45:18] *** Joins: mrig (~mrig@user/mrig)
[21:46:19] *** Quits: bluedust_ (~bluedust@185.195.232.175) (Ping timeout: 256 seconds)
[21:49:23] *** Joins: moog (~moog@107.77.244.39)
[21:49:29] <pyzozord> How can I find out what is the structure of the "error" type? go doc error doesn't have it
[21:49:43] <ikke> pyzozord: it's an interfacew
[21:50:21] <ikke> https://pkg.go.dev/errors
[21:50:52] <ikke> Sorry, that's not the error interface
[21:51:08] <pyzozord> ah, thanks, on the website I can click it and it leads to https://pkg.go.dev/builtin#error
[21:51:17] *** Quits: xlei_ (~akans@pool-71-125-19-142.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[21:51:20] <ikke> https://tip.golang.org/ref/spec#Errors
[21:51:52] <pyzozord> oh nice I can do go doc builtin.error to get that too
[21:52:40] *** Joins: xlei (~akans@pool-71-125-19-142.nycmny.fios.verizon.net)
[21:53:35] *** Joins: destroycomputers (~destroyco@5.188.41.98)
[21:53:52] <pyzozord> this code https://ideone.com/rCut0h gives me ./main.go:13:14: undefined: message
[21:53:57] *** Quits: xlei (~akans@pool-71-125-19-142.nycmny.fios.verizon.net) (Client Quit)
[21:54:10] <pyzozord> is there any other way to inline things in the if statement?
[21:54:20] <pyzozord> or do I really need to put it in a separate line above?
[21:54:49] <ikke> yes, otherwise the scope would be only in the if statement
[21:54:58] <pyzozord> i see
[21:55:44] <ikke> So I typically do the opposite. message, err := ..; if err != nil { .. }
[21:55:45] *** Joins: xlei (~akans@pool-71-125-19-142.nycmny.fios.verizon.net)
[21:56:17] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[21:56:23] <fizzie> Yeah, `builtin` is a fake pseudo-package for holding the documentation of the special predeclared things like `error` and `make` and whatnot. They're not "really" in any package though.
[21:57:18] <pyzozord> btw I noticed that ifs don't have () parens for the predicate but they do require {} for the turth block
[21:58:05] <pyzozord> I was hoping I could do if true foo()
[21:58:07] <fizzie> I confess to writing tests that look like `if got, err := foo(); err != nil { t.Errorf("foo: %v", err) } else if got != want { t.Errorf("foo = %v, want %v", want, got) }` because it somehow looks pleasingly symmetric.
[21:58:19] <ikke> pyzozord: no, that's not possible
[21:58:48] <ikke> https://go.dev/doc/effective_go#if
[21:59:11] <pyzozord> oh right, will get to that effective go article
[21:59:18] <pyzozord> going throught the getting started tutorial atm
[22:00:22] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:00:41] <ikke> This one? https://go.dev/tour/welcome/1
[22:01:11] <pyzozord> nope, I mean this one https://go.dev/doc/tutorial/random-greeting
[22:01:25] <ikke> ok, the tour is really good as well
[22:02:44] <pyzozord> yeah I can see that. I think I went through all these about three years ago, but I never used go after so I forgot most things
[22:09:11] <pyzozord> More questions, I was wondering about the import statement and how it can take parens but doesn't have to. Is this kind of syntactic grouping mechanism used in more places in go, or is this pretty much just exclusive to import?
[22:09:52] *** Joins: sathylias (~sysadmin@modemcable136.173-130-66.mc.videotron.ca)
[22:09:52] <ikke> more
[22:09:56] <ikke> var, type
[22:09:58] <ikke> constr
[22:10:00] <ikke> const*
[22:10:20] <pyzozord> ok great, I'm glad that's the case
[22:12:00] <pyzozord> what that essentially does is really "repeat me for every line in the parens", right?
[22:12:23] <pyzozord> but each thing in parens must be on a separate line, right?
[22:12:25] <ikke> Well, not every line
[22:12:35] <ikke> you can have structs with multiple lines
[22:12:57] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[22:13:19] <ikke> https://go.dev/play/p/z5PfyO7u071
[22:13:55] <ikke> You can have multiple variables with the same type: https://go.dev/play/p/QsqUxhPubPw
[22:14:14] <fizzie> There's also the rather special `iota` thing for a parenthesized `const` group (that gets used to make enums).
[22:14:38] *** Joins: johnjaye (~pi@154.6.152.74)
[22:14:59] <fizzie> As in https://go.dev/play/p/TsoKIjDS2Up
[22:15:22] <sathylias> Just started learning Golang yesterday, I'm a huge C nerd, so it feels like home :)
[22:15:36] <deniska> pyzozord: it's just a special syntax specific to import and some other kinds of statements https://go.dev/ref/spec#Import_declarations
[22:16:02] <deniska> pyzozord: it's not like "a thing inside parens separated by ;" is a meaningful syntax unit on its own
[22:18:18] <pyzozord> ah, so it's more like a pattern that is repeated multiple times through the syntax
[22:18:21] <pyzozord> in different places
[22:19:54] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[22:26:52] <pyzozord> btw is it possible to make go behave like C in the sense of manually managing memory?
[22:27:48] <foobaz> yes
[22:28:07] <pyzozord> how would that be done and how would it work?
[22:29:14] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:29:46] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[22:29:55] <foobaz> there are multiple techniques providing different functionality, it's difficult to cover them all in an irc message
[22:30:01] <foobaz> can you ask a more specific question?
[22:30:29] <foobaz> there is the unsafe package for pointer arithmetic
[22:31:09] <foobaz> obviously you can do make([]byte, n) and use it for whatever you want
[22:31:30] <foobaz> you can use cgo to allocate memory that the garbage collector doesn't touch
[22:32:12] <foobaz> you can use a global array to staticly allocate memory, the same as you do in embedded C programming
[22:33:39] *** Joins: johnjaye (~pi@154.6.152.74)
[22:35:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:36:26] *** Quits: naicam|ne (~naicam|ne@wireguard/tunneler/naicamne) (Quit: bye)
[22:36:57] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:37:48] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[22:38:36] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[22:40:37] <pyzozord> foobaz: unsafe package for pointer arthmetic?
[22:41:12] <pyzozord> btw do slices live on stack?
[22:41:50] <b0nn> https://dgraph.io/blog/post/manual-memory-management-golang-jemalloc/
[22:42:09] <pyzozord> or rather, do arrays live on stack?
[22:42:25] *** Joins: johnjaye (~pi@154.6.152.74)
[22:42:44] <pyzozord> b0nn: thanks
[22:42:55] <foobaz> they live on the stack if the compiler can prove their scope is limited to a function
[22:43:10] <foobaz> if not, or if the compiler is unsure, they are allocated on the heap
[22:43:17] <pyzozord> oh right, otherwise they will be "evicted" into heap
[22:43:44] <fizzie> In particular, if you return a slice of the array out of the function, it for sure escapes.
[22:43:56] <pyzozord> can I somehow make go warn me of all such accidental "evictions"?
[22:44:15] <b0nn> escape analysis
[22:44:28] <pyzozord> oh sorry not "evict", "escape" indeed
[22:44:48] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[22:45:47] <b0nn> https://go.dev/ref/mem and https://research.swtch.com/mm are important reads
[22:46:15] <pyzozord> is escape analysis something I'd need to write myself? or is it built into go? or is it maybe a popular third party?
[22:46:18] <pyzozord> b0nn: thanks
[22:46:47] <foobaz> it's built into go and it's fully automatic
[22:46:59] <foobaz> the only reason to think about it is performance optimization
[22:47:06] <b0nn> go build -gcflags “-m -l”
[22:47:22] <fizzie> Heh, smart quotes in a command line. :)
[22:47:25] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[22:47:30] <foobaz> it doesn't affect how a program runs at all, other than GC performance
[22:47:43] <b0nn> yeah - came from a webpage
[22:47:53] <foobaz> whether a given variable is on the stack or the heap makes no difference, because go is garbage collected
[22:48:38] <pyzozord> that's the point, things on stack are cleaned up automatically
[22:48:52] <b0nn> This is the page https://dev.to/human/escape-analysis-in-go-part-1-42bd - I was looking through it
[22:49:16] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:49:16] <fizzie> Things on the heap are _also_ cleaned up automatically, that's what garbage collection means. :)
[22:49:22] *** Joins: casastortaAway (~casastort@dc4.krivokuca.net)
[22:49:30] *** Quits: casastortaAway (~casastort@dc4.krivokuca.net) (Remote host closed the connection)
[22:49:39] *** Joins: johnjaye (~pi@154.6.152.74)
[22:49:48] <pyzozord> yes but it's less deterministic and heavier
[22:50:09] <b0nn> Speaking of the GC - this came out last month, but someone retweeted it on twitter and I was reading it this morning https://eng.uber.com/how-we-saved-70k-cores-across-30-mission-critical-services/
[22:50:23] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[22:50:47] <b0nn> It's breif and largely stays out of the weeds, but does give some helpful info on troubleshooting/tuning the Go GC
[22:50:53] <b0nn> brief too
[22:51:38] <foobaz> if you are considering making things live on the stack as a performance optimization, please follow ye olde three rules of optimization :)
[22:52:27] *** Joins: naicam|ne (~naicam|ne@wireguard/tunneler/naicamne)
[22:52:45] <pyzozord> What's that rule? I'm not familiar with it.
[22:52:53] <LiENUS> is there a linter that picks up https://github.com/golang/go/wiki/CommonMistakes#using-reference-to-loop-iterator-variable ?
[22:53:19] <j416> LiENUS: try staticcheck
[22:53:57] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Client Quit)
[22:54:05] <LiENUS> does staticcheck support it? because it's not picking up the one i just found
[22:54:28] <j416> nevermind didn't catch it
[22:54:52] <LiENUS> https://github.com/golang/go/issues/16520 this implies its better caught in the race detector
[22:55:05] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[22:55:51] <foobaz> pyzozord: http://wiki.c2.com/?RulesOfOptimization
[22:56:07] <b0nn> The first example out = append(out, &i) // I don't see the bug, you're adding the address of i each time, and its value is whatever the current value is
[22:56:30] <pyzozord> foobaz: right :D
[22:57:12] <b0nn> And he solves it by shadowing
[22:57:28] <j416> LiENUS: I don't think the race detector catches that
[22:57:53] <LiENUS> j416, yeah yeah it wouldnt lol
[22:57:58] <LiENUS> not as laid out there
[22:58:23] <j416> if you had been passing a pointer to a goroutine, it might catch it
[22:58:29] <j416> but this is linear
[22:59:01] <b0nn> the second issue is values vs indexes - all newbies hit that
[22:59:17] <LiENUS> @b0nn, give it a try, it adds 3  to output not the current value
[22:59:18] <j416> b0nn: it'll get the last value only
[22:59:59] <j416> the variable is the same, the value changes, but is never copied
[23:00:51] <LiENUS> https://go.dev/play/p/4YmLuc1Za-u
[23:00:54] <j416> if out would have been a []int instead of []*int the values would have been copied
[23:01:05] <j416> but in this case they're not
[23:02:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[23:04:04] <b0nn> ok, the problem is subslices
[23:04:06] *** Joins: fikran (~fikran@user/fikran)
[23:04:18] <b0nn> https://go.dev/play/p/-jSBfmTBKzB
[23:04:43] <b0nn> hmm, not sure if that shows it clearly
[23:07:22] <LiENUS> i think the examples from the go team show it pretty clearly
[23:08:01] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[23:08:43] <j416> thanks for linking that issue; it was a good read
[23:09:07] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[23:09:13] *** Joins: goldfish (~goldfish@user/goldfish)
[23:11:00] <j416> also related https://github.com/golang/go/issues/20725
[23:13:00] <b0nn> This shows that the value is a subslice, and its address is saved, not its value https://go.dev/play/p/OQH3innCoCy
[23:13:40] <b0nn> The address of the array inside i[:] stays the same each iteration
[23:14:19] *** Joins: synfinatic (~synfinati@mail.synfin.net)
[23:14:22] <b0nn> IOW it's a repeat of the first "bug"
[23:17:35] <synfinatic> Hey everyone, I have a cursed question related to CGO/ARMv5 and having a hard time finding someone who might be able to give me some hints/pointers.  Rather than dumping a bunch of text/logs here, I have a write up here: https://forum.golangbridge.org/t/missing-functions-with-cgo-armv5/26033/3    Open to any ideas/tips or suggestions of Go communities that might be a good place to ask about such a question.
[23:19:06] <foobaz> synfinatic: looks like your compiler is broken, i recommend trying a different go compiler
[23:19:08] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:19:22] *** Joins: mickey8 (~user@user/mickey)
[23:19:25] *** Joins: fogobogo (~fogobogo@user/fogobogo)
[23:19:43] <synfinatic> is there a particular compiler you'd suggest?  I'm using what Ubuntu 20.04 provides
[23:19:47] <foobaz> for example you could try using go instead of gccgo, or try packages from a different linux distribution, or try compiling the compiler yourself
[23:20:04] <foobaz> unfortunately armv5 is not a popular platform and therefore doesn't get the same testing attention
[23:20:47] <fogobogo> guys i swear this crap made me join up on irc since a year. if i see package blah is not in GOROOT i'm getting a fit
[23:21:00] <foobaz> synfinatic: i suggest trying go instead of gccgo
[23:21:00] <fogobogo> whats the golang for #include
[23:21:23] <LiENUS> uh do you mean the cgo for #include?
[23:21:29] <LiENUS> or are you looking for import?
[23:22:05] <fogobogo> nope, just the go for #include. all i want is to import a local file
[23:22:07] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:22:08] <LiENUS> as for package blah not in go root if you're using a version of go with modules support you may just need to run go get
[23:22:13] <LiENUS> import a local file?
[23:22:26] <fogobogo> yeah, or package of whatever go names it
[23:22:33] <LiENUS> you probably mean just import
[23:22:41] <LiENUS> https://go.dev/tour/basics/2
[23:23:11] <fogobogo> i have a util.go where i dumped some functions and a main.go i want to call them from
[23:24:00] <fogobogo> now, if that'd be good old C i'd just #include "util.h"
[23:24:44] <ikke> fogobogo: go does not work like that
[23:24:45] <foobaz> synfinatic: actually i take that back, i don't think the go compiler supports armv5
[23:25:03] <LiENUS> fogobogo, oh you just want to run a program build from both main.go and util.go? just run "go run main.go util.go
[23:25:05] <fogobogo> ikke: apparently. just how does it work?
[23:25:09] <ikke> fogobogo: everything in the same package you can directly use
[23:25:17] <ikke> meaning in the same directory
[23:25:26] <foobaz> synfinatic: you can see what it supports here https://gist.github.com/lizkes/975ab2d1b5f9d5fdee5d3fa665bcfde6
[23:25:40] <ikke> fogobogo: other packages you need to import
[23:25:54] <ikke> (you import packages, not include files)
[23:26:09] <foobaz> synfinatic: so if i were you, i would try gccgo on a different distribution, like redhat, arch, or freebsd
[23:26:39] <fogobogo> ikke: yeah, thats how i far got as well. but if i put my util.go into src/util.go and put my main.go in cmd/main.go they are worlds apart
[23:26:57] <fogobogo> now, if that'd be good old C i'd just #include "../src/util.h"
[23:27:03] <LiENUS> fogobogo, it's not C
[23:27:13] <LiENUS> dont put util in src
[23:27:34] <synfinatic> foobaz: that link doesn't account for the `GOARM=` build flag, just GOARCH .  this seems to say is is supported: https://zchee.github.io/golang-wiki/GoArm/
[23:27:42] <fogobogo> well where do i put it so its visible?
[23:27:51] <foobaz> ah cool, i wasn't aware of GOARM
[23:28:09] <LiENUS> @fogobogo, have you read https://go.dev/doc/code yet?
[23:28:12] *** Joins: brooks736699 (~brooks@23.157.160.131)
[23:28:27] <ikke> fogobogo: do you use go modules? (do you have a go.mod file)?
[23:29:05] <foobaz> i compile for ppc64 sometimes, and it can be a hassle too, sometimes these less popular architectures break and nobody notices right away
[23:29:23] *** Quits: brooks73669 (~brooks@23.157.160.131) (Ping timeout: 268 seconds)
[23:29:43] <fogobogo> ikke: well i do the motions with go mod init, go mod tidy
[23:30:02] <LiENUS> fogobogo, then util.c probably goes in the root of your project folder
[23:30:05] <ikke> What does grep module go.mod return?
[23:30:31] <LiENUS> and main.c is going to import whatever you passed to go mod init
[23:31:01] <fogobogo> sec
[23:31:03] <synfinatic> but beyond that... even doing a freebsd arm build was painful enough.  doing a freebsd/arm to linux/arm cross compile tool chain sounds about as much fun as writing a distributed map reduce function in Erlang :)
[23:31:10] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[23:31:18] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[23:31:40] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[23:31:41] <synfinatic> i did try `go` instead of gccgo, and got the same result :(
[23:33:22] <fogobogo> ikke: well i have one go.mod in root. a src/util.go folder, a cmd/app/main.go folder
[23:33:34] <ikke> So far so good
[23:33:57] <ikke> What did you specify as module?
[23:34:01] <ikke> in go.mod
[23:34:11] <fogobogo> module test
[23:34:11] <fogobogo> go 1.17
[23:34:52] <fogobogo> util.go is declared as package ping, main.go has import ("ping")
[23:35:08] <ikke> it would be test/ping
[23:35:21] <LiENUS> it would be test/src as he has it laid out
[23:35:30] <LiENUS> then src.ExportedFunction()
[23:35:31] <fogobogo> ikke: oho!!! lemme try that
[23:35:49] <ikke> LiENUS: the package name is ping, not src
[23:35:51] <fogobogo> ikke: main.go:4:5: package test/ping is not in GOROOT (/usr/lib/go/src/test/ping)
[23:35:57] <fizzie> If it's `package ping` in src/util.go, then it's `import "test/src"` but still `ping.ExportedFunction()`.
[23:35:58] <LiENUS> ^
[23:36:19] <LiENUS> @fizzie, only if he import ping "test/src"
[23:36:33] <fizzie> LiENUS: No, it uses the `package` declaration's name by default.
[23:36:37] <fizzie> Even if it doesn't match the directory name.
[23:36:47] <fizzie> (Which can be very confusing.)
[23:36:53] <fogobogo> actually thats better: ./main.go:4:5: imported and not used: "test/src" as ping
[23:36:57] <j416> though, it's good to know that the directory name usually follows the package name, by convention. So you might want to have the directory named "ping", too.
[23:37:53] <LiENUS> @fizzie, huh TIL
[23:38:05] <LiENUS> that could get messy
[23:38:48] <j416> ^ which makes sense when you think about it, because we sometimes have directories named like "foo-go" but which provide package "foo" (not "foo-go")
[23:39:53] <fogobogo> what am i using now? package or module or path as import?
[23:40:02] <LiENUS> great and all til lsomeone puts package testing in a file heh but yeah now that i think about it package main is rarely in a folder named main
[23:40:07] <LiENUS> @fogobogo, you import a path
[23:40:20] <ikke> (with the module name)
[23:40:31] <LiENUS> then use whatever you put as package in util.go to access it
[23:40:40] <fogobogo> oh, ok. now thats a lot easier to understand
[23:40:45] <LiENUS> you can only access exported functions/structs/variables, exported means they start with a capitol letter
[23:41:16] <b0nn> ok, now that you've solved that - it's time to have serious talk about the naming, "util.go" is BAAAAAAD
[23:41:16] <fogobogo> ok, so lowercase functions are private
[23:41:24] <LiENUS> basically
[23:41:32] <LiENUS> they're unexported go doesn't have public/private
[23:41:35] <LiENUS> but same basic idea
[23:41:48] <fogobogo> holy shit, that worked
[23:42:02] <b0nn> https://dave.cheney.net/2019/01/08/avoid-package-names-like-base-util-or-common
[23:42:27] <LiENUS> @fogobogo, i would read over https://go.dev/doc/code it covers this
[23:42:29] <fogobogo> i'll just use the sha256 sum
[23:42:35] <fogobogo> promise
[23:42:43] <LiENUS> use the what now
[23:43:00] <fogobogo> eh, i meant b0nn
[23:43:13] <b0nn> LOL
[23:43:30] <b0nn> uuid is better :)
[23:44:55] <fogobogo> LiENUS: its way, way too complicated and wordy for something that should be simple
[23:45:00] <LiENUS> uh
[23:46:49] <LiENUS> it covers everything you've asked so far and a couple of questions you're going to be asking in the near future
[23:47:16] <b0nn> JIT learning is fine
[23:47:17] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[23:47:25] <b0nn> learn it when you need to
[23:48:32] <fogobogo> look its alright but for now i'm just dabbling a bit and figuring that go's #include "../src/util.h" is import("test/src") already helps
[23:51:40] *** Joins: nocture (~textual@c-xd4ed87fa.cust.hiper.dk)
[23:52:12] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[23:52:56] *** Joins: bluedust_ (~bluedust@185.248.85.40)
[23:55:01] *** Quits: bluedust (~bluedust@117.207.226.11) (Ping timeout: 240 seconds)
[23:56:48] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 256 seconds)
[23:57:31] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
