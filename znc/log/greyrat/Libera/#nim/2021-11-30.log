[00:08:49] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[00:28:21] <Amun-Ra> is there a way to get derived class type? f.e.: StringStream inside foo(s: String)
[00:28:59] <Amun-Ra> I mean foo(s: Stream)
[00:38:29] <PMunch> Don't think so
[00:38:53] <PMunch> Well, maybe you can do `s is StringStream` not sure tbh
[00:42:04] <Amun-Ra> hmm
[00:46:06] <FromDiscord> <gibson> What's the reason in Tables why TableRef `[]` returns a mutable, while Table `[]` returns an immutable?
[00:49:57] <FromDiscord> <exelotl> @gibson if you have a `var Table` then `[]` returns a mutable too
[00:50:05] <FromDiscord> <exelotl> https://nim-lang.org/docs/tables.html#%5B%5D%2CTable%5BA%2CB%5D%2CA_2
[00:50:37] <FromDiscord> <huantian> In reply to @gdquest "I was wondering why": oh yeah I get the same thing 😔
[00:51:34] <FromDiscord> <gibson> Thanks - I completely misread that.
[00:52:31] <FromDiscord> <exelotl> yeah it took me a moment to find too 😅
[00:54:39] *** Quits: tinystoat (~squeek@user/tinystoat) (Remote host closed the connection)
[00:54:48] *** Joins: tinystoat (~squeek@user/tinystoat)
[01:10:13] *** Quits: tinystoat (~squeek@user/tinystoat) (*.net *.split)
[01:10:14] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (*.net *.split)
[01:10:14] *** Quits: xet7 (~xet7@user/xet7) (*.net *.split)
[01:10:14] *** Quits: arkurious (~arkurious@user/arkurious) (*.net *.split)
[01:10:14] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[01:10:14] *** Quits: Colt (~Colt@user/colt) (*.net *.split)
[01:10:15] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[01:10:15] *** Quits: fputs (~fputs@67.59.83.166) (*.net *.split)
[01:10:15] *** Quits: PMunch (~PMunch@user/pmunch) (*.net *.split)
[01:10:15] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (*.net *.split)
[01:10:16] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[01:10:16] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (*.net *.split)
[01:10:17] *** Quits: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5) (*.net *.split)
[01:10:17] *** Quits: robertmeta (sid514@user/robertmeta) (*.net *.split)
[01:10:18] *** Quits: rp2 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (*.net *.split)
[01:10:18] *** Quits: MightyJoe (~joe@201.150.10.60) (*.net *.split)
[01:10:18] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[01:10:18] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[01:10:19] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (*.net *.split)
[01:10:19] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[01:10:19] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca) (*.net *.split)
[01:10:19] *** Quits: dom96 (~dom@mail.nim-lang.org) (*.net *.split)
[01:10:19] *** Quits: ehmry (~quassel@2a03:3b40:fe:ab::1) (*.net *.split)
[01:10:20] *** Quits: adium (adium@user/adium) (*.net *.split)
[01:10:20] *** Quits: tk (~tk@ircpuzzles/staff/tk) (*.net *.split)
[01:10:20] *** Quits: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com) (*.net *.split)
[01:10:20] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (*.net *.split)
[01:10:20] *** Quits: pch (~pch@66.49.131.33) (*.net *.split)
[01:10:20] *** Quits: notchris (sid181145@id-181145.hampstead.irccloud.com) (*.net *.split)
[01:10:21] *** Quits: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (*.net *.split)
[01:10:21] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (*.net *.split)
[01:10:21] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (*.net *.split)
[01:10:21] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (*.net *.split)
[01:10:22] *** Quits: madprops (hj8oijo@user/madprops) (*.net *.split)
[01:10:22] *** Quits: lain (~lain@172.16.254.xxx) (*.net *.split)
[01:10:22] *** Quits: qwr (~qwr@182-83-235-80.dyn.estpak.ee) (*.net *.split)
[01:10:22] *** Quits: _c (~cricket@user/c/x-9604503) (*.net *.split)
[01:10:22] *** Quits: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca) (*.net *.split)
[01:10:23] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[01:10:23] *** Quits: syl (~z@user/syl) (*.net *.split)
[01:10:23] *** Quits: cheer[m] (~cheertchn@2001:470:69fc:105::39de) (*.net *.split)
[01:10:23] *** Quits: ormiret (sid314108@id-314108.lymington.irccloud.com) (*.net *.split)
[01:10:23] *** Quits: ozzz (~oz@46.49.41.80) (*.net *.split)
[01:10:23] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (*.net *.split)
[01:10:24] *** Quits: Yardanico (~quassel@user/yardanico) (*.net *.split)
[01:10:24] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (*.net *.split)
[01:10:24] *** Quits: NimEventer (~NimBot@78.47.140.224) (*.net *.split)
[01:10:26] *** Quits: oprypin (~irc@pryp.in) (*.net *.split)
[01:10:27] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (*.net *.split)
[01:10:27] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[01:10:27] *** Quits: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1) (*.net *.split)
[01:10:27] *** Quits: meowray (~MaskRay@user/meowray) (*.net *.split)
[01:10:27] *** Quits: Zevv (~Zevvvvv@not.connected.by.freedominter.net) (*.net *.split)
[01:10:27] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[01:10:29] *** Quits: |smlckz| (smlckz@user/smlckz) (*.net *.split)
[01:10:30] *** Quits: terminalpusher (~terminalp@2a01:586:2941:1:e472:132f:6ad:d0f3) (*.net *.split)
[01:14:15] *** Joins: Colt (~Colt@user/colt)
[01:14:15] *** Joins: tinystoat (~squeek@user/tinystoat)
[01:14:15] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[01:14:15] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[01:14:15] *** Joins: terminalpusher (~terminalp@2a01:586:2941:1:e472:132f:6ad:d0f3)
[01:14:15] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[01:14:15] *** Joins: fputs (~fputs@67.59.83.166)
[01:14:15] *** Joins: xet7 (~xet7@user/xet7)
[01:14:15] *** Joins: arkurious (~arkurious@user/arkurious)
[01:14:15] *** Joins: PMunch (~PMunch@user/pmunch)
[01:14:15] *** Joins: supakeen (~user@python/site-packages/supakeen)
[01:14:15] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[01:14:15] *** Joins: mjsir911 (~bnc@user/mjsir911)
[01:14:15] *** Joins: syl (~z@user/syl)
[01:14:15] *** Joins: dom96 (~dom@mail.nim-lang.org)
[01:14:15] *** Joins: ehmry (~quassel@2a03:3b40:fe:ab::1)
[01:14:15] *** Joins: adium (adium@user/adium)
[01:14:15] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[01:14:15] *** Joins: anddam (~anddam@user/anddam)
[01:14:15] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[01:14:15] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[01:14:15] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[01:14:15] *** Joins: cheer[m] (~cheertchn@2001:470:69fc:105::39de)
[01:14:15] *** Joins: pch (~pch@66.49.131.33)
[01:14:15] *** Joins: notchris (sid181145@id-181145.hampstead.irccloud.com)
[01:14:15] *** Joins: ormiret (sid314108@id-314108.lymington.irccloud.com)
[01:14:15] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[01:14:15] *** Joins: madprops (hj8oijo@user/madprops)
[01:14:15] *** Joins: lain (~lain@172.16.254.xxx)
[01:14:15] *** Joins: rp2 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[01:14:15] *** Joins: MightyJoe (~joe@201.150.10.60)
[01:14:15] *** Joins: jkl1337 (~jkl@user/jkl)
[01:14:15] *** Joins: flynn (~mcbloch@user/flynn)
[01:14:15] *** Joins: qwr (~qwr@182-83-235-80.dyn.estpak.ee)
[01:14:15] *** Joins: _c (~cricket@user/c/x-9604503)
[01:14:15] *** Joins: ozzz (~oz@46.49.41.80)
[01:14:15] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[01:14:15] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[01:14:15] *** Joins: robertmeta (sid514@user/robertmeta)
[01:14:15] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[01:14:15] *** Joins: sagax (~sagax_nb@user/sagax)
[01:14:15] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[01:14:15] *** Joins: Zevv (~Zevvvvv@not.connected.by.freedominter.net)
[01:14:15] *** Joins: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[01:14:15] *** Joins: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1)
[01:14:15] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[01:14:15] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca)
[01:14:15] *** Joins: |smlckz| (smlckz@user/smlckz)
[01:14:15] *** Joins: [R] (~rs@genoce.org)
[01:14:15] *** Joins: meowray (~MaskRay@user/meowray)
[01:14:15] *** Joins: oprypin (~irc@pryp.in)
[01:14:15] *** Joins: NimEventer (~NimBot@78.47.140.224)
[01:14:15] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[01:14:15] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[01:14:15] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[01:14:15] *** Joins: Yardanico (~quassel@user/yardanico)
[01:14:29] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Max SendQ exceeded)
[01:15:28] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[01:15:52] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[01:16:17] *** Joins: Colt (~Colt@user/colt)
[01:53:31] *** Quits: terminalpusher (~terminalp@2a01:586:2941:1:e472:132f:6ad:d0f3) (Remote host closed the connection)
[02:32:40] *** Quits: src (~src@user/src) (Quit: Leaving)
[03:21:49] *** Quits: elph (uid286227@id-286227.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:40:44] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:49:47] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[04:08:09] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[05:22:05] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[05:22:52] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[05:23:23] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[05:25:49] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[05:49:42] <NimEventer> New thread by Icedquinn: Rhombus (a REBOL/Red/Ren parser), see https://forum.nim-lang.org/t/8666
[06:22:40] <FromDiscord> <ajusa> Has anyone been able to get iface working on Nim 1.6? The example in the README no longer compiles: https://github.com/yglukhov/iface
[06:36:50] <arkanoid> didn't even know iface was a thing. Nice!
[06:36:58] <arkanoid> amazing how many things nim can do
[06:58:24] <FromDiscord> <ajusa> Yeah it's super cool that something like interfaces can be implemented as a library, external to the compiler. But as you can see, it definitely doesn't help when a language update breaks a feature like interfaces 😄
[07:15:27] <FromDiscord> <Yardanico> if someone is willing to report an issue to nim's tracker, the minimal repro is this
[07:15:36] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Gxs
[07:16:42] <FromDiscord> <Yardanico> you can fix it by just having one varargs argument and then getting first and second argument
[07:18:08] <FromDiscord> <Yardanico> ah, it's been reported already
[07:18:08] <FromDiscord> <Yardanico> https://github.com/nim-lang/Nim/issues/19015
[07:19:44] <FromDiscord> <Yardanico> there's a workaround that can be used for now, but of course it's quite ugly
[07:20:07] <FromDiscord> <Yardanico> with `macro iface(arg1, arg2: untyped, moreArgs: varargs[untyped] = void): untyped` signature iface works just fine
[07:27:04] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:49:47] <FromDiscord> <ajusa> In reply to @Yardanico "https://github.com/nim-lang/Nim/issues/19015": Thanks for finding and updating the issues!
[08:02:00] <FromDiscord> <pyautogui> Would there be a performance difference if bigints was implemented using static[int] and arrays instead of seqs? 4 arithmetic operations into something like that (calling it "variableints"), wondering if it is worth it performance wise.
[08:02:24] <FromDiscord> <Yardanico> In reply to @pyautogui "Would there be a": You might want to check out https://github.com/status-im/nim-stint because it seems to do what you describe
[08:02:31] <FromDiscord> <pyautogui> Thanks!
[08:05:59] <FromDiscord> <Yardanico> In reply to @pyautogui "Thanks!": ah, seems like actually stint doesn't use arrays for that, but there is an open PR with an array backend
[08:09:56] <FromDiscord> <Yardanico> there's a description in https://github.com/status-im/nim-stint/blob/master/stint/private/datatypes.nim#L23
[08:42:47] <FromDiscord> <sOkam!> Is it possible to execute a bash command from inside a nim app?↵Or how does one interface with linux apps/os from nim?↵_(sry if super noob Q or wrong channel)_        _ping to re_ 🙏
[08:43:05] <FromDiscord> <Yardanico> In reply to @sOkam! "Is it possible to": take a look at https://nim-lang.org/docs/osproc.html
[08:45:24] <FromDiscord> <impbox [ftsf]> `execCmd` is probably what you want
[08:45:33] <FromDiscord> <sOkam!> In reply to @Yardanico "take a look at": thats a lot of library. can you point me a bit more to what i should be looking for?
[08:45:48] <FromDiscord> <Yardanico> as impbox said
[08:46:14] <FromDiscord> <impbox [ftsf]> though depends what you want to do with the output of the script
[08:47:40] <FromDiscord> <sOkam!> In reply to @impbox "though depends what you": simple bash scripting. just that I found a bottleneck trying to organize the file into functions, since bash doesnt allow wrapping like that. it requires sequentiality and no access write access back to global variables from local inside a function
[08:48:54] <FromDiscord> <sOkam!> or just fully pure functions, with `return` as the only way to pass back information without making a real mess of uninteligible code 😔
[08:50:12] <FromDiscord> <sOkam!> Inputs are 3 things, but they can vary↵Outputs are files to be modified, but the modifications can be done through linux tools no probl
[09:18:13] <NimEventer> New post on r/nim by Ruri: Using Winim/CLR to execute PowerShell and get the output?, see https://reddit.com/r/nim/comments/r5g5h5/using_winimclr_to_execute_powershell_and_get_the/
[09:20:13] <NimEventer> New Nimble package! bluesoftcosmos - Bluesoft Cosmos extractor, see https://gitlab.com/lurlo/bluesoftcosmos
[10:44:42] <FromDiscord> <gogolxdong (liuxiaodong)> How to debug this
[10:44:48] <FromDiscord> <gogolxdong (liuxiaodong)> sent a code paste, see https://play.nim-lang.org/#ix=3GxY
[10:45:02] <FromDiscord> <Elegantbeef> Build a debug compiler
[10:46:51] <FromDiscord> <gogolxdong (liuxiaodong)> Is there any compile option can trace stack
[10:50:15] <FromDiscord> <Elegantbeef> You need a debug compiler
[10:55:33] <FromDiscord> <gogolxdong (liuxiaodong)> what's that?
[10:56:25] <FromDiscord> <Elegantbeef> You clone the Nim repo follow the compile steps then you should be able to do `./koch temp c yourFile.nim`
[11:01:57] <FromDiscord> <gogolxdong (liuxiaodong)> this error is from nimskull compiled project
[11:03:23] <FromDiscord> <konsumlamm> In reply to @pyautogui "Would there be a": it's faster, but that's different from bigints, since then they can't get arbitrarily large anymore
[11:05:18] <FromDiscord> <Elegantbeef> What's the project?
[11:05:27] <FromDiscord> <Elegantbeef> I can debug it for you if needed
[11:05:58] <FromDiscord> <Elegantbeef> It's simply build Nim compiler then run the nim compiler on the code instead of just an exception you get a stack trace
[11:06:29] *** Joins: fputs3 (~fputs@67.59.83.166)
[11:08:11] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 256 seconds)
[11:08:11] *** fputs3 is now known as fputs
[11:09:51] <FromDiscord> <Elegantbeef> So in the case of nimskull you do the same thing as Nim, but pretend it's different
[11:10:20] <FromDiscord> <Paszxy> is the nimble website down?
[11:11:54] <supakeen> Doesn't work here either, it's a 502.
[11:36:47] *** Quits: mahlon (~mahlon@martini.nu) (Read error: Connection reset by peer)
[11:38:04] <FromDiscord> <Yardanico> @federico3 ^
[11:51:28] *** Joins: mahlon (~mahlon@martini.nu)
[11:52:52] <FromDiscord> <steschuser (steschuser)> sent a code paste, see https://play.nim-lang.org/#ix=3Gym
[11:53:22] <FromDiscord> <Elegantbeef> There is `cstringarray`
[11:54:25] <FromDiscord> <steschuser (steschuser)> uhhh
[11:54:30] <FromDiscord> <steschuser (steschuser)> that sounds good
[11:54:43] <FromDiscord> <Elegantbeef> Well that's what you want anyway
[11:55:10] <FromDiscord> <pmunch> You could also try Futhark 🙃
[11:55:27] <FromDiscord> <steschuser (steschuser)> Indeed it is! Thank you ❤️
[11:55:28] <FromDiscord> <Elegantbeef> That could work aswell
[11:55:43] <FromDiscord> <steschuser (steschuser)> futhark?
[11:56:58] <FromDiscord> <steschuser (steschuser)> oh I see
[11:57:03] <FromDiscord> <steschuser (steschuser)> still in Alpha
[11:57:15] <FromDiscord> <steschuser (steschuser)> I'll pass for now \:)
[11:58:02] <FromDiscord> <Elegantbeef> You did find pmunch's tool and not the programming language right? 😛
[12:03:12] *** Joins: neurocyte0132889 (~neurocyte@94.46.74.167)
[12:03:12] *** Quits: neurocyte0132889 (~neurocyte@94.46.74.167) (Changing host)
[12:03:12] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:09:47] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 252 seconds)
[12:11:29] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[12:12:57] *** Joins: xet7 (~xet7@user/xet7)
[12:14:57] *** Joins: mahlon (~mahlon@martini.nu)
[12:22:28] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 264 seconds)
[12:33:21] <FromDiscord> <steschuser (steschuser)> yeah
[12:37:33] *** Joins: mahlon (~mahlon@martini.nu)
[12:52:27] <FromDiscord> <Stuffe> For what I am working on now I end up quite often defining global arrays for different types together with a high watermark integer. With the high watermark I manually keep track of how many I have used etc. I have probably 5 of these and I want to have functions for add, iteration and clear for all of them. Is there a generic way I could do this (preferably without macros if possible)
[12:55:22] <FromDiscord> <Elegantbeef> This is just an event counter basically?
[12:59:40] <FromDiscord> <Stuffe> no this is for preallocating a bunch of objects statically
[13:01:01] <FromDiscord> <Stuffe> say I have a `chair` object, i define this array of 1000 chairs and then have an integer to keep track of how many I have actually used
[13:01:33] <FromDiscord> <Elegantbeef> Ah yes a generic is easy
[13:02:16] <FromDiscord> <Elegantbeef> Making an example
[13:02:23] <FromDiscord> <Stuffe> ok thank you, was about to ask 🙂
[13:03:08] <FromDiscord> <Stuffe> I would imagine creating an object definition with just 2 fields, the high watermark and the array, but then I don't know if/how you can initiate it with a generic array length
[13:07:04] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GyE
[13:07:06] <FromDiscord> <Elegantbeef> There's a nice simple impl to build from
[13:07:29] <FromDiscord> <Stuffe> ok ill try
[13:13:12] <FromDiscord> <Elegantbeef> That's badly named but meh
[13:48:06] *** Quits: xet7 (~xet7@user/xet7) (Read error: Connection reset by peer)
[13:48:37] *** Joins: xet7 (~xet7@user/xet7)
[13:48:47] *** Quits: xet7 (~xet7@user/xet7) (Read error: Connection reset by peer)
[13:49:15] *** Joins: xet7 (~xet7@user/xet7)
[14:04:01] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[14:07:15] <FromDiscord> <Zoom> Eh, do we have something for an empty iterator? Declaring a bool flag feels wrong.
[14:07:42] <FromDiscord> <Rika> What would an empty iterator do?
[14:07:59] <FromDiscord> <Zoom> I mean I'd like to check if it is
[14:08:42] <FromDiscord> <Elegantbeef> there is `finished` but if it's a closure it you need to run it once afaik
[14:18:43] <FromDiscord> <Zoom> That's not it. The funny thing is, I wanted to paste a 4 line example and caught a bug\: https://play.nim-lang.org/#ix=3GyR
[14:19:34] <FromDiscord> <Zoom> Not exactly a bug, more of an unhelpful error
[14:23:13] <FromDiscord> <Zoom> That's the shortest internal error I've seen yet! `for _ in []: discard`
[14:36:24] *** Joins: PMunch (~PMunch@user/pmunch)
[15:25:34] <arkanoid> How would you obfuscate a string constant inside your binary?
[15:31:22] <FromDiscord> <konsumlamm> In reply to @Zoom "Not exactly a bug,": "internal error" is always a bug
[15:32:07] *** Joins: m33mt33n (~m33mt33n@45.116.232.19)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:48] <m33mt33n> anyone knows why uncompressed size of nim source code is > 900MB??
[15:38:19] <m33mt33n> ???
[15:44:33] *** Quits: m33mt33n (~m33mt33n@45.116.232.19) (Read error: Connection reset by peer)
[15:48:22] *** Joins: m33mt33n (~m33mt33n@45.116.232.19)
[15:50:21] *** Joins: m33mt33n_3 (~m33mt33n@45.116.232.19)
[15:53:33] *** Quits: m33mt33n_3 (~m33mt33n@45.116.232.19) (Read error: Connection reset by peer)
[15:54:48] <PMunch> m33mt33n, where on earth do you get that number from? The official tarball is only 77.6MB uncompressed
[15:55:17] *** Quits: m33mt33n (~m33mt33n@45.116.232.19) (Ping timeout: 252 seconds)
[15:56:17] <PMunch> And the includes the built binaries
[15:57:03] <PMunch> Oh wait, the "source tarball" is in fact pretty massive
[15:58:16] <PMunch> It is apparently the bundled C code which is used to bootstrap the compiler
[15:59:51] <PMunch> Apparently built for all sorts of different targets
[16:00:18] <PMunch> At least that is what it looks like from diffing a random file between two of the folders
[16:01:58] <PMunch> Ah yes, looking at build.sh it seems like they are different versions for different targets
[16:04:25] <PMunch> Hmm, maybe someone can use Zippy and implement a pure-Nim self-decompressing version. So it can be called with the architecture in question and it will place the contents directly in c_code for the compilation to build with?
[16:35:15] *** Joins: src (~src@user/src)
[17:08:01] <Amun-Ra> that could be the size of the whole repo
[17:09:24] <Amun-Ra> nope, 138MB
[17:10:04] <PMunch> Amun-Ra, no it's just the Nim compiler built to C code for a bunch of different platforms
[17:10:17] <Amun-Ra> ah
[17:10:52] <PMunch> That takes 1.2GB according to my archiving utility
[17:34:27] *** Joins: arkurious (~arkurious@user/arkurious)
[17:52:23] <arkanoid> Yardanico: this goes sigsegv when doing "import mymdule" on python side. If I comment strenc it works. Do you have any idea?
[17:52:26] <arkanoid> https://play.nim-lang.org/#ix=3GzN
[17:52:50] <FromDiscord> <Yardanico> well, not really
[17:53:23] <FromDiscord> <Yardanico> strenc is really fragile, it's just a poc
[17:53:46] <arkanoid> sure it is, in fact I'd like to use it for just a couple if strings, not the whole project
[17:53:51] <FromDiscord> <Yardanico> I'm not sure why it got so much attention, because it really doesn't work well, and I don't know how to make it work well :)
[17:54:12] <FromDiscord> <Yardanico> In reply to @arkanoid "sure it is, in": I think you'd want to write some other code then, you don't need term rewriting for that
[17:54:47] <FromDiscord> <Yardanico> You can just have a template or macro that encrypts the string at compile time and decrypts at runtime, and call it explicitly
[17:56:58] <arkanoid> yes, I started from strenc because I liked the simple idea of rolling enc linked to built time. I should probably go nimcrypt, but I'm now experienced in encryption in general
[17:59:19] <FromDiscord> <Rika> strenc isnt really encryption though
[17:59:24] <FromDiscord> <Rika> the key is still on the binary
[17:59:36] <FromDiscord> <Rika> its as encryption as base64 is
[17:59:51] <arkanoid> yes yes I know, I just want to hide from kids
[18:00:06] <arkanoid> and also play around this, just because of nim
[18:00:27] <arkanoid> I yet have to find a proper use of compile time magic
[18:00:31] <FromDiscord> <Yardanico> In reply to @Rika "its as encryption as": well technically it is encryption if you didn't know the xor key :) but it can be easily bruteforced, yes
[18:00:58] <FromDiscord> <Rika> yeah but it's still on the binary innit?
[18:01:18] <FromDiscord> <Yardanico> yes, in strenc case, but xor encryption itself is different from base-n
[18:01:24] <FromDiscord> <Rika> yes in that case
[18:01:24] <FromDiscord> <Yardanico> base-n is just an encoding
[18:01:30] <FromDiscord> <Rika> i mean only in strencs case
[18:01:36] <FromDiscord> <Rika> anywhere else yes its encryption
[18:02:16] <FromDiscord> <Yardanico> In reply to @arkanoid "yes, I started from": Well, as I said you can easily create your own strenc with encryption for specific strings
[18:02:59] <arkanoid> sure I'm going that direction, also pulling in nimcrypto as I've never used it before and seems solid
[18:03:46] <FromDiscord> <Yardanico> any reason why?
[18:04:22] <arkanoid> no, just out of personal interest
[18:14:55] <arkanoid> Yardanico: found this https://github.com/nim-lang/Nim/issues/16620
[18:15:09] <FromDiscord> <Yardanico> yeah, i know that term-rewriting macros have a lot of issues
[18:15:13] <FromDiscord> <Yardanico> they might be even removed in the future
[18:15:25] <FromDiscord> <gogolxdong (liuxiaodong)> what's the way of doing static linking?
[18:15:29] <arkanoid> I'm unwrapping strenc into manual mode
[18:16:05] <arkanoid> --passL:"-static" in your project.nims
[18:16:31] <arkanoid> there are multiple ways actually
[18:18:14] <FromDiscord> <gogolxdong (liuxiaodong)> like link against libmariadb.dll?
[18:20:07] <FromDiscord> <gogolxdong (liuxiaodong)> tried , but didn't link together
[18:26:20] <FromDiscord> <Zoom> Hey guys, any patterns you use for `--dry-run` or other options which are frequently-checked but permanent for all the running time of your program?↵I move the whole main loop into an `Impl` template with a bool parameter and instantiate a proc based on the user settings. Is there a reason I should not do it? I understand the implications of having multiple such options in a template, of course \:D
[18:29:16] <FromDiscord> <Yardanico> In reply to @Zoom "Hey guys, any patterns": not sure I understood your question, but can't you just parse user configuration into some object initially, and then just pass that object around?
[18:29:21] <FromDiscord> <Yardanico> it'll be pretty efficient and easy to use
[18:31:24] <arkanoid> Yardanico: I've converted the term rewriting macro into a simple macro and I'm encrypting the result of a staticRead. I'm compiling with --d:release and --passL:-s, but "stings mylib.so | grep contents" results in perfectly readable stuff
[18:31:57] <FromDiscord> <Yardanico> how exactly are you doing it?
[18:32:07] <FromDiscord> <Yardanico> first of all, if you have a `const` string nim will decrypt it at compile time anyway
[18:32:12] <FromDiscord> <Yardanico> and then the C compiler might also try to do a similar thing
[18:32:13] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[18:33:07] <arkanoid> well, that's what's happening probably. The only changed line from your code is the signature: macro encrypt*(s: static[string]): untyped =
[18:35:21] <FromDiscord> <Yardanico> this works just fine for me:
[18:35:28] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GAm
[18:35:57] <FromDiscord> <Yardanico> obviously your string has to be `var` or `let`, otherwise it'll be decrypted at compile-time
[18:37:29] <FromDiscord> <Yardanico> and yeah, you can change the macro arg to static[string], that won't hurt
[18:38:40] <arkanoid> found my error while you were typing. I has the equivalent of "const testStr = enc("hello world!")", so compiler was running symmetric crypt function twice at compile time
[18:38:41] <FromDiscord> <Yardanico> this is when compiling with arc - the C code simply references the encoded string and the xor decryption key to it, and assings the result to the variable https://media.discordapp.net/attachments/371759389889003532/915258035079905321/unknown.png
[18:39:00] <FromDiscord> <Yardanico> which is then assigned to `testStr` and few to echo, then destroyed
[18:39:03] <FromDiscord> <Yardanico> (edit) "few" => "fed"
[18:40:27] <arkanoid> yeah it works now
[18:43:43] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[18:44:01] <arkanoid> Yardanico: how to hide bad languages :D -> https://play.nim-lang.org/#ix=3GAn
[18:44:14] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[18:44:15] <FromDiscord> <Yardanico> you might also consider using python obfuscators :)
[18:44:21] <FromDiscord> <Yardanico> store python itself as bytecode, etc
[18:45:36] <arkanoid> sure, it's just a playful wrapper, not really intended to be useful
[18:51:09] <FromDiscord> <pmunch> Still in alpha, but still better than any of the other C wrapping solutions I've tried for Nim. I use it in production at work and it works flawlessly for wrapping a large C library (Unbound DNS server)
[18:52:13] <arkanoid> PMunch: what do you mean? I'm playing wrapping python here
[18:52:55] <arkanoid> Yardanico: why static[string] is not needed here? https://play.nim-lang.org/#ix=3GAm , isn't arg "s" an ast node without it?
[18:53:11] <FromDiscord> <Yardanico> yes, so I do `$s` to get the string value out of it
[18:53:16] <FromDiscord> <Yardanico> but static[string] is more correct, yes
[18:53:28] <FromDiscord> <Yardanico> $s will error out for cases when you pass a runtime string to the macro
[18:53:29] <arkanoid> thanks
[18:55:04] <arkanoid> just out of curiosity, what editor are you using here? is it vim? https://media.discordapp.net/attachments/371759389889003532/915258035079905321/unknown.png
[18:55:08] <FromDiscord> <Rika> arkanoid hes not replying to you
[18:55:49] <arkanoid> Rika, k
[18:56:26] <FromDiscord> <Yardanico> In reply to @Rika "arkanoid hes not replying": wat
[18:56:31] <FromDiscord> <Yardanico> In reply to @arkanoid "just out of curiosity,": vscode :P
[18:56:35] <FromDiscord> <Yardanico> with monokai vibrant theme
[18:58:31] <FromDiscord> <Zoom> Wait, were you answering me? In case you were, I meant how to minimize excessive checking for some settings in a hot loop.↵(@Yardanico)
[18:58:56] <FromDiscord> <Yardanico> In reply to @Zoom "Wait, were you answering": well, as I said, you can just parse the configuration and store it in an object
[18:59:09] <FromDiscord> <Yardanico> or rewrite your logic so you don't need to check for that setting as much
[18:59:12] <arkanoid> k. I'm also using vscode, but yet I'm not sure if I'm using the full potential of it for nim. I have to restart it quite often, I have "insert" key randomly enabling (so I write over my test when typing), I have "canc" button also randomly stop working for deletion but kills vscode terminal window instead, then I have inconsistent tab spaces, for example in a project where I mix python and nim vscode
[18:59:14] <arkanoid> doesn't understand that I need 4 spaces for python and for nim
[18:59:55] <FromDiscord> <Rika> sounds like your install is fucked?
[19:00:06] <FromDiscord> <Rika> nim extension forces 2, change in the settings
[19:00:09] <FromDiscord> <Rika> insert idk
[19:00:22] <FromDiscord> <Rika> restarts are prolly supposed to be handle by the plugin
[19:00:31] <FromDiscord> <Rika> canc?
[19:00:34] <FromDiscord> <Rika> cancel?
[19:00:42] <FromDiscord> <Rika> dunno how that would work
[19:02:51] <FromDiscord> <Zoom> How is using an object relevant to my question? This is probably the proper way to store a config of course, but you need to read it anyway at some point ;)↵Anyway, at least you didn't have any objections to the way I do it, so it's fine.↵(@Yardanico)
[19:03:02] <arkanoid> I'm using codium 1.56 from ubuntu LTS 20.04 snap store
[19:03:03] <FromDiscord> <Yardanico> In reply to @Zoom "How is using an": it is directly relevant
[19:03:13] <FromDiscord> <Rika> reading an object is fast enough
[19:03:21] <FromDiscord> <Yardanico> instead of checking the argument each time you just parse the arguments that were passed to the program and store them in an object as native nim types
[19:03:36] <FromDiscord> <Yardanico> you'll only have to read it once
[19:03:41] <FromDiscord> <Yardanico> (the user-provided config)
[19:03:48] <arkanoid> Rika, which vscode nim extensions should I stay on? I need the most stable/complete
[19:04:17] <FromDiscord> <Rika> saem's prolly, or koz's if you're having issues with one or the other
[19:04:20] <FromDiscord> <Rika> i dont use vscode
[19:04:24] <FromDiscord> <Zoom> Again this is not relevant. I wasn't asking how to read the settings. Do you think I actually request arguments each time I need to check a key?↵(@Yardanico)
[19:04:35] <FromDiscord> <Yardanico> In reply to @Zoom "Again this is not": then what is your question? i still don't understand
[19:04:36] <FromDiscord> <Rika> if you have a large config object you might need to store the specific config values you need on separate variables, i assume prolly due to caches and whatever
[19:04:46] <FromDiscord> <Rika> its just a guess
[19:04:57] <FromDiscord> <Rika> i dont have any idea about caches and memory accesses at this level
[19:06:41] <FromDiscord> <Zoom> Ok, I give up as this is absolutely not important. What I suggested is just a tiny bit of an optimization which replaces a few `if bool`s to a separate routine with the checks omitted on CT.
[19:21:28] <FromDiscord> <gdquest> sent a long message, see http://ix.io/3GAx
[19:22:44] <FromDiscord> <gdquest> All tests involving code blocks fail like that, and the character indices reported by the diff algorithm are weird. Any idea of what that could be?
[19:23:13] <FromDiscord> <Rika> Newline?
[19:23:23] <FromDiscord> <gdquest> You can see in the diff it says character 3
[19:23:33] <FromDiscord> <Rika> Didn’t realise
[19:23:35] <FromDiscord> <Yardanico> is this tool your own or it's some open-source nim library?
[19:23:55] <FromDiscord> <gdquest> In another example it says 6, but that's basically where you see `gdscript` at the start of markdown code blocks
[19:23:57] <FromDiscord> <Yardanico> also it might be better to send the error output as a file, it might have some other characters or spaces that are not visible in discord
[19:24:48] <FromDiscord> <gdquest> In reply to @Yardanico "is this tool your": It's something I'm coding right now, basically rewriting a Python program that has some issues and needed a different algorithm
[19:25:18] <FromDiscord> <gdquest> It's open-source, here's the code branch: <https://github.com/GDQuest/product-packager/tree/format_tutorials_rewrite/format_tutorials>
[19:26:57] <FromDiscord> <gdquest> Here's the error log as a text file https://media.discordapp.net/attachments/371759389889003532/915270185429127208/error_log.txt
[19:28:58] <FromDiscord> <Yardanico> In reply to @gdquest "Here's the error log": well, it's pretty clear with `repr` and also with your log
[19:28:59] <FromDiscord> <Yardanico>  https://media.discordapp.net/attachments/371759389889003532/915270692512092180/unknown.png
[19:29:20] <FromDiscord> <Yardanico> \10 is ascii linefeed (newline)
[19:29:37] <FromDiscord> <Yardanico> expected doesn't have it, but formatted does
[19:30:07] <FromDiscord> <gdquest> A trailing newline, okay, thank you
[19:30:15] <FromDiscord> <gdquest> You call repr() on the string to get this output?
[19:30:39] <FromDiscord> <Yardanico> yes, `repr` does some stuff like converting some invisible ascii chars to their decimal representation
[19:30:49] <FromDiscord> <gdquest> Okay that's really good to know, thanks
[19:30:52] <FromDiscord> <Yardanico> `echo repr expected` and then `echo repr formatted`
[19:31:05] <FromDiscord> <Rika> Huh I was somehow right
[19:31:10] <FromDiscord> <Rika> Lucky
[19:31:13] <FromDiscord> <gdquest> Yup!
[19:31:24] <FromDiscord> <Rika> Hell of a potshot
[19:32:48] <FromDiscord> <Yardanico> In reply to @gdquest "Yup!": also `diffText` shows you not the index of the character but the line
[19:32:58] <FromDiscord> <Yardanico> "Find the difference in 2 text documents, comparing by textlines."
[19:33:22] <FromDiscord> <gdquest> I see, missed that. Thanks much for the help!
[19:33:27] <FromDiscord> <Yardanico> I've actually used https://github.com/mark-summerfield/diff myself when I needed some diffing
[19:33:44] <FromDiscord> <gdquest> I have to tackle that on top of a mountain of work and I'm starting to fail to see things
[20:13:10] *** Joins: dv^_^5 (~dv@eclipse.oxfordfun.com)
[20:14:30] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: nisstyre (~wes@user/nisstyre) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (Ping timeout: 256 seconds)
[20:16:31] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[20:16:49] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[20:16:59] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[20:18:59] *** Quits: dv^_^5 (~dv@eclipse.oxfordfun.com) (Ping timeout: 256 seconds)
[20:28:18] *** Joins: nisstyre (~wes@user/nisstyre)
[20:46:45] *** Joins: rockcavera (~rc@192.12.113.70)
[20:46:45] *** Quits: rockcavera (~rc@192.12.113.70) (Changing host)
[20:46:45] *** Joins: rockcavera (~rc@user/rockcavera)
[21:14:23] <FromDiscord> <sOkam!> @gdquest on nim 😮↵poggies
[21:15:51] <FromDiscord> <sOkam!> Waiting for 4.0 to nim with gdextension myself. Terrified to do so earlier↵Are you with nim on 3.x or 4.?
[21:25:54] <FromDiscord> <gdquest> I'm using nim for standalone tools right now
[21:27:12] <FromDiscord> <gdquest> I'm testing and practicing with some modern compiled languages, trying to look a bit into the modern C replacements (Zig, Odin) and other approaches like Nim and well I'll have to do some more Rust at some point
[21:27:42] <FromDiscord> <gdquest> But at least for Nim I found it's a really good fit for us to develop small programsx
[21:27:44] <FromDiscord> <gdquest> (edit) "programsx" => "programs"
[21:29:08] <FromDiscord> <gdquest> I'm using it to write a very specialized formatter and builder for my team after going with Python and using existing tools like `make`, `scons`, and some others
[21:33:14] <FromDiscord> <sOkam!> i see, makes sense
[21:59:04] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 264 seconds)
[22:03:59] <FromDiscord> <cschardt (Christof Schardt)> [https---github.com-mark-summerfield-diff.url](https://files.gitter.im/5602f03e0fc9f982beb19f61/LfhQ/https---github.com-mark-summerfield-diff.url)
[22:06:36] <FromDiscord> <Yardanico> huh?
[22:09:13] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[23:31:57] *** Quits: MightyJoe (~joe@201.150.10.60) (Ping timeout: 250 seconds)
