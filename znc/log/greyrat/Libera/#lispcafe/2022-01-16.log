[00:22:10] *** |3b|` is now known as |3b|
[00:44:51] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:47:04] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:51:11] <hayley> .oO(The 25 year old computing minimalist: "this is hoooooooooman scale")
[01:24:40] <hayley> Must be time to do global value numbering on DFAs. I think I have the algorithm committed to memory, sadly.
[01:28:26] *** Quits: random-nick (~random-ni@87.116.181.150) (Read error: Connection reset by peer)
[01:59:05] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:04:02] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[02:04:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[02:06:29] *** Joins: pjb (~pjb@user/pjb)
[02:29:51] *** Joins: random-nick (~random-ni@87.116.167.125)
[03:04:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[03:33:01] <hayley> gilberth: A first stab at GVN: https://github.com/telekons/one-more-re-nightmare/blob/global-value-numbering/Code/Compiler/global-value-numbering.lisp
[03:33:48] <hayley> With this pass, there are only 11 values in (aba|ab|a)(aba|ab|a)(aba|ab|a) which aren't of the form POSITION - x.
[04:39:36] *** Joins: notzmv (~zmv@user/notzmv)
[05:29:43] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net)
[05:32:32] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1015-static.midco.net) (Ping timeout: 240 seconds)
[05:39:26] *** Quits: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net) (Remote host closed the connection)
[06:08:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[06:14:03] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net)
[06:16:21] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net) (Remote host closed the connection)
[06:29:53] <hayley> Hm, so far my generated code only has 9 values. Quite the decrease.
[06:35:32] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 250 seconds)
[06:40:45] *** Joins: OutsideContextPr (GreatFlea@168.138.73.107)
[06:48:37] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net)
[06:54:56] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net)
[06:58:39] *** Quits: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net) (Client Quit)
[06:59:19] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net)
[07:10:39] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[07:15:57] *** Quits: OutsideContextPr (GreatFlea@168.138.73.107) (Quit: The Lounge - https://thelounge.chat)
[07:21:49] *** Quits: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Remote host closed the connection)
[07:48:49] <hayley> SBCL sadly is only like 30ms (from 130ms) faster, and I haven't emitted any actual inter-value assignments yet. Probably bad as they are all inter-value now (as they all start as P-constant and thus are erased).
[07:50:41] <hayley> I'd like to think that keeping assignments out of loops makes them faster....though I also had to delete unnecessary assignments to get any savings in SICL IIRC.
[08:28:12] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:47:56] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:48:23] <dave0> maw
[08:51:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:00:28] <hayley> maw
[09:02:19] <dave0> hi hayley, how are you?
[09:02:29] <hayley> Alright, how are you?
[09:02:53] <dave0> not bad, i got some groceries and did the laundy, now i'm chilling
[09:02:57] <hayley> https://www.dst.defence.gov.au/sites/default/files/publications/documents/DST-Group-TR-3522.pdf In which an antenna is designed to avoid attacks by Australian birds.
[09:03:36] <dave0> haha
[09:04:22] <dave0> cockatoos can be destructive !
[09:04:58] * hayley uploaded an image: (180KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/lFYiPYvaRrNejnlDLQUraqFv/minimalist-compooting.png >
[09:06:19] <dave0> he's got too much hair and not enough at the same time
[09:08:54] <dave0> oh i almost forgot about the djokovic saga.. gonna look it up now
[09:09:53] * hayley tries to write up a specification of how method lookup should work, and hurts head on handling protection
[09:13:56] <dave0> when was the last time they opened court for you on a weekend?
[09:14:07] <dave0> djokovic did.. twice
[09:17:13] <hayley> The problem is that, say I have class A { private x; } class B { private x; protected y() { return x; } } class C <: A, B { public blah() { return y(); } }
[09:18:19] <hayley> We call y() which resides in the class B. Now y() looks up x. The first option is that in class A, but that is private and unrelated to B. So I need to keep some information for where to continue looking up, else I end up with something like dynamic binding.
[09:25:15] <gilberth> Rather tell me, what syntax I should use for intersection and difference. (?...) already is pretty crowded. I contemplate to use {&} and {-}.
[09:25:39] <hayley> I think something used && but I forgot what.
[09:26:14] <gilberth> In bracket groups, yes. I can do on REs, forgot?
[09:26:45] <hayley> <https://github.com/google/redgrep> says & for conjunction, and nothing for difference.
[09:27:02] <hayley> (which is one-more-re-nightmare, but written in C++, targeting LLVM. And much older.)
[09:27:55] <gilberth> Do they use it bare? Nah, I need to invoke POSIX UB.
[09:30:49] <hayley> "Recently I've been reading your messages and @no-defun-allowed messages and been talking to the SBCL Ianguage maintainers and my CS friends and feel strongly that someone's credibility is in ruins." lol
[09:42:47] <gilberth> Well, this redgrep doesn't do submatch addressing, does it? And they haven't read Owens.
[09:43:22] <gilberth> And complement is something I will not offer to the user.
[09:43:38] <hayley> What was the joke about designing SUBTYPEP?
[09:43:55] <gilberth> Joke? Which joke?
[09:44:04] <hayley> "Our decision procedure for intervals is new, although it is a reasonably obvious extension of standard interval arithmetic. It has not been described before most likely because programming it in Fortran is too painful to contemplate."
[09:44:19] <hayley> "Programming Owens in C++ is too painful to contemplate."
[09:44:54] <gilberth> Is it? I have a C port of my algorithm, which wasn't too painful.
[09:45:40] <hayley> More that I would not enjoy working out hash consing in C. But I guess we can use "arena" memory management, and free everything after compiling.
[09:45:50] <hayley> Or you could use -lgc of course.
[09:46:50] <gilberth> Well, what I did was a lex(1) ersatz. So memory managment is of no concern. And hashing actually is less painful with C.
[09:47:22] <gilberth> There is little to GC, as we intern our REs, anyway.
[09:47:48] * hayley reads .sour file extension (for the Sourcerer language on the Utena VM) and thinks .scnr
[09:48:17] <dave0> SLUV
[09:48:48] <contrapunctus> maw üòè
[09:48:53] <gilberth> Which reminds me, I ought to contemplate how to have a K&R and pre-K&R C compiler.
[09:48:57] * hayley is writing the metacircular interpreter for Utena. Still not sure how to handle private lookups.
[09:49:22] * sm2n thinks of renaming his program provisionally named 'scanner' to 'scnr'
[09:49:57] <dave0> a guy shortened stack to stck and i freaked out
[09:50:24] <hayley> Only 55 LOC so far. Looks like it'll be longer than JMC's eval[e;a] but I'm not too fussed.
[09:50:40] <contrapunctus> sm2n: I just realized that UNIX was eating vowels before it was cool ü§î
[09:51:03] <White_Flame> do single letter variable names count as eating vowels, too?
[09:51:16] <hayley> The record to beat is 120 LOC of C. Kinda cheating to use a Lisp/Smalltalk hybrid.
[09:51:29] <hayley> gilberth: Can you believe some suckers think that 32 instructions is "small"?
[09:52:15] <sm2n> contrapunctus: bunch of CREAT(ins)
[09:52:20] <hayley> And "The CPU can tunnel through 127 subroutines and find its way back with its return stack" - what a dumb limitation.
[09:52:35] <gilberth> It's funny that in BCPL you didn't need declarations as the compiler would read the whole program. B and C don't do this. But: The first pass of the initial compiler was just parsing emitting an AST to be read by the next phase. Hasn't it ever occurred to them, that it would be trivial to have a tool which would read that AST and generate the needed declarations?
[09:52:48] *** Joins: domovod (~domovod@176.196.122.197)
[09:52:57] <hayley> Unless someone is going to do Cheney on the MTA on that dumb VM, which I hope they don't.
[09:54:20] <gilberth> Space was an issue on their tiny machines. There could also have been separate phase, which would pick up the AST and insert needed declarations into the function bodies, just as it was custom to do manually. Like foo() { extrn blah(); ...; }
[09:54:33] <contrapunctus> sm2n: lol
[09:54:58] <gilberth> And btw cpp came late with Unix V6 IIRC.
[09:54:58] * hayley uploaded an image: (58KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/YorpyduUtRqDRgnjtHhRuoSN/youtube-comments.png >
[09:56:25] <gilberth> Anyhow, out of curiosity I want a compiler, which could compile those old sources.
[09:56:57] <hayley> https://www.youtube.com/watch?v=MbtkL5_f6-4
[09:57:33] <gilberth> Dear, could somebody teach ixelp a trick to keep the connection?
[09:58:14] *** Joins: ixelp (~ixelp@p5b157756.dip0.t-ipconnect.de)
[09:58:14] *** ChanServ sets mode: +o ixelp
[09:59:00] <gilberth> I ought to hack a watchdog, sending PINGs to myself, and if they don't make the roundtrip, reconnect.
[10:02:02] <moon-child> why not tcp keepalives?
[10:04:46] <gilberth> moon-child: Doesn't help when the server decides to just drop the connection or becomes unresponsive.
[10:06:03] <gilberth> I rather not depend on TCP. I'll take the approach: "My ping not making the roundtrip => connection must be dead for whatever reason."
[10:06:28] <moon-child> so you expect the server to respond to keepalives, but not to anything else?
[10:06:32] <moon-child> that seems like a very strange failure mode
[10:06:58] <gilberth> This would also catch CL-IRC mishaps.
[10:07:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:08:18] <gilberth> moon-child: A TCP keepalive does not need to be answered by the server's main loop.
[10:08:29] <gilberth> That would be taking bets.
[10:08:30] *** Joins: Alfr (~Alfr@user/alfr)
[10:26:41] <hayley> https://twitter.com/59dallas/status/1482288387310891021 "Mexican TV Host loses it, calls all antivaxxers "morons""
[10:43:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[10:46:00] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 250 seconds)
[10:46:24] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[10:54:13] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[10:57:21] *** Joins: phantomics (~phantomic@71-218-243-149.hlrn.qwest.net)
[10:59:14] <dave0> lisp on hackernews:   https://news.ycombinator.com/item?id=29945235    http://www.technoblogy.com/show?2AEE
[10:59:15] -ixelp- Technoblogy - Lisp Badge [Updated]
[11:01:49] *** Joins: epony (epony@user/epony)
[11:31:55] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[11:54:39] *** Joins: ln43 (~ln43@user/ln43)
[11:55:12] <ln43> Good morning
[11:58:24] <ck_> hello welcome to the internet
[12:31:17] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[12:31:41] *** Joins: notzmv (~zmv@user/notzmv)
[12:34:38] <epony> isp supplicant ;-)
[12:52:02] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[13:02:41] <moon-child> https://www.microsoft.com/en-us/research/wp-content/uploads/2002/07/inline.pdf  ... spends two whole pages being scared of GENSYM and pointers
[13:03:32] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[13:06:09] <hayley> lol no HIR
[13:11:54] <moon-child> 'In GHC, a variable's name is actually a pair of a string and a unique number.  The unique is used for comparisons, but the string is used when printing'   lol no hashconsing
[13:12:43] <hayley> The big problem I've faced is something like this: class A { private x; } class B { private x; } class C <: A, B { } 
[13:12:57] <hayley> IMO there should be two slots named x, as the two are not related and are private.
[13:13:52] <moon-child> you might simply disallow such code
[13:14:00] <hayley> Notably, merging slots here would cause either superclass to clobber the other, and a user could not be expected to fix an error, as private slots are implementation details.
[13:14:12] <moon-child> given packages, that is not terrible
[13:14:26] <hayley> Then I need packages.
[13:14:33] <moon-child> :)
[13:15:08] <hayley> But IMO forcing the user to disambiguate generally (and have e.g. methods on B assume it's B's slot x, in the case of private slots) is okay.
[13:15:52] <moon-child> hm, you could create an implicit ~package (or subpackage) for class members
[13:16:01] <hayley> i.e. private slots cannot be overridden, so search should just start from the same class that we found the last method in. But protected and public slots can be overridden
[13:16:06] <moon-child> so it's really  class B { private B:x }
[13:16:33] <hayley> That's almost how it'd be implemented. Identify slots by a pair <Class, name>, allow just giving a name when there are no duplicate names, and then require the pair when there are duplicates.
[13:16:39] <moon-child> then, given a b of type B, b.x is sugar for b.B:x.  But you can elide the 'package' name in cases where there is only one symbol with the given name in any package
[13:17:17] <hayley> In Newspeak we'd write e.g. "super B x" or something to get the x from B. There's also "outer Class" expressions for nested classes.
[13:17:29] * hayley is definitely not going mad by reading what the Newspeak specification has to say.
[13:18:05] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:18:06] <hayley> Else I'd have a pretty metacircular interpreter for this VM, but we can't have nice things.
[13:18:21] <moon-child> that makes sense.  Treating B as a prototype for the object and sending the 'give me x' message to it
[13:21:42] <hayley> Well, one complication is that you can make classes with superclasses which are arbitrary expressions. How do you name those? I guess I could add names to the syntax, of course.
[13:22:41] <hayley> i.e. class A <: (This-One = foo(bar)) { do-something() { super(This-One).do-something-else() } }
[13:23:11] * hayley completely making up the syntax, of course.
[13:23:57] <moon-child> I think this is where something more like packages helps.  All slots are named by symbols; when you create a class, however you do it, you must specify using symbols the names of the slots
[13:24:19] <hayley> Gnuxie will fire me (somehow) if I do that.
[13:24:24] <moon-child> because e.g. global A = foo(bar); global B = A; class C <: (A) { ... }
[13:24:38] <moon-child> if classes can be identified by expressions, you want A and B to be interchangeable
[13:25:58] <hayley> super() is funny syntax already, so I'd be fine constraining it to names that appear on the RHS of <: honestly.
[13:29:01] *** Joins: pjb (~pjb@user/pjb)
[13:30:39] <hayley> Reminds me that, would I get around to an optional type system, I want to try a less hierarchical sorta interface types. Mostly just to annoy type people, really. But instead of e.g. "Container<of=T> bla(T t)" you'd have "C bla(T t) s.t. Containing(container=C, element=T)" - bonus points if the syntax is literally s.t. But I don't know when it'd be better.
[13:31:40] <hayley> It's longer, but I suspect somehow that making a collection of related types, rather than having one type be a function of others, would let you relate them in more convenient ways.
[13:33:07] <moon-child> sounds like a very boring version of refinement types.  You propagate the constraint (named by Container, specified elsewhere) that the result may have (say) the 'index' message sent to it
[13:33:23] <moon-child> (boring because it doesn't actually depend on anything dynamic)
[13:34:23] <hayley> Oh well. Just a thought.
[13:35:19] <moon-child> but then you can say C make-array(int l, T x) s.t. List(container=C, element=T, length=l)
[13:35:53] <moon-child> s/array/list, ._.
[13:36:21] <hayley> Ditto for "const generics" or whatever.
[13:36:48] <moon-child> aren't 'const generics' just evaluating stuff at compile time?
[13:36:51] <hayley> Hmm...can those be dependent on runtime values? Type checking that would be unfun.
[13:37:20] <moon-child> depends on your definition of fun
[13:37:23] <hayley> I thought it was of putting values into types, e.g. Array<type=int, length=8>
[13:37:28] <moon-child> lots of literature.  'refinement typing' and 'dependent typing'
[13:38:47] <moon-child> int i s.t. 1 <= i < n.  Array a s.t. length = n.  Now a[i] is guaranteed to succeed a[i-1] too.  a[i+1] is a type error
[14:04:13] *** Joins: shka (~herr@109.231.0.226)
[14:24:36] *** Joins: semz_ (~semz@user/semz)
[14:24:46] *** semz_ is now known as semz
[14:25:33] *** semz is now known as semz_
[14:25:40] *** semz_ is now known as semz
[14:36:21] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[14:38:43] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[14:40:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[14:43:41] <hayley> Someone got very offended by the "minimalist compooter" meme. I made it because one project ticked me off, but it wasn't a critique of that particular project.
[14:47:32] <hayley> Hm, also isn't my scheme a bit like the => in Haskell types? Like "Blah (a, b) => a -> b" might be a contrived type with such a constraint.
[14:48:59] <hayley> But I guess the general thing is that I like having a more "symmetrical" way of expressing a protocol. s.t. types don't look unbalanced when you write functions with "inverse" types.
[14:50:35] <hayley> Rather than swapping F(T) and T, you have a G(T, U) relation.
[14:51:32] <hayley> But I can't think of any cases where taking the inverse of a kind F is noticeably painful.
[15:04:29] <hayley> e.g. inverting a -> [a] is just [a] -> a; we already destructure the List(a) type.
[15:05:38] <Gnuxie> <moon-child> "I think this is where something..." <- idk whta you mean by this?
[15:06:47] <hayley> If the superclasses were in different packages, the names of the slots would be different.
[15:06:56] <Gnuxie> Not sure if Hayley was forgetting class+mixin precedence is always explicitly linear or if there was something i need to worry about either   
[15:07:08] <hayley> i.e. "X of package P" rather "X of class C"
[15:07:31] <moon-child> ^
[15:07:42] <hayley> I did, but your implementation of linearisation(?) also merges private slots together (though I dunno if it actually implements access control).
[15:07:55] <moon-child> imagine if (defclass c () (x)) desugared to (progn (defpackage :class-c) (defclass c () (class-c::x)))
[15:08:57] <Gnuxie> that's a good point 
[15:09:17] <hayley> But my solution is to have "orthogonal" private slots be considered different, and then lookup will prefer a slot based on which superclass we found the method causing the lookup in.
[15:10:13] <Gnuxie> there's like a massive chapter in a book or something that bracha wrote with some people about private slots 
[15:10:43] <Gnuxie> i kinda hope he had something to say about this 
[15:10:56] <hayley> The Newspeak specification is unreadable on the matter, and the paper about nested classes only said "look up lexical parents first, ya moron".
[15:11:20] <Gnuxie> yeah
[15:11:50] <Gnuxie> but then again 
[15:12:04] <hayley> Maybe our spec should just be a metacircular interpreter. Not entirely kidding.
[15:12:12] <Gnuxie> the private slot you're overwriting can't be accessed by the code that's overwriting it 
[15:13:03] <hayley> If both classes A and B have a private slot X, then merging the slots will cause them to see each other's state.
[15:13:41] <hayley> Either one probably is written thinking that the X is separate.
[15:14:00] <Gnuxie> didn't we have a big issue about how to check if a method has access to a private slot by comparing "the lexical parents" or something like that
[15:14:42] <hayley> Probably.
[15:15:28] <Gnuxie> well it looks like we have to change how the selector works for private slots either way
[15:16:50] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:22:56] *** Joins: ln43 (~ln43@user/ln43)
[15:24:54] <ln43> back to the 'software internet' (A.K.)
[15:34:40] <gilberth> hayley: flex(1) uses {-} but it obviously can apply it to bracket expressions only, like in [a-z]{-}[aeoui], no its natural for me to use that and let it apply to any RE, though I would like the precedence being another, that is concatenation binding stronger than difference, so that bla*h{-}blah matches "blh" and "blaah", but not "blah".
[15:35:24] <gilberth> Curious, that I missed that or perhaps have forgotten that as flex(1) compatible syntax is one of my options.
[15:41:51] * hayley working on global value numbering, expects no real benefits sadly.
[15:43:30] <hayley> There were drastically fewer registers, but it did not make the SBCL register noticeably faster. But maybe P - n will save some cycles still.
[15:44:09] <hayley> And I need to write a "delete unused assignments" pass anyway.
[15:46:13] * hayley stuck with the curse of knowledge of global value numbering in SICL.
[15:55:24] *** Joins: domovod (~domovod@176.196.122.197)
[16:58:35] *** Quits: APic (apic@apic.name) (Quit: [TLS] Client upgrade)
[16:58:55] *** Joins: APic (apic@apic.name)
[17:05:58] <phoe> https://cdn.discordapp.com/attachments/621389802691887134/932265421829210123/IMG_20220116_142946.jpg
[17:06:03] <phoe> page 2 prettyprinted
[17:09:26] <moon-child> those close parentheses are displeasing
[17:10:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:11:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:27:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:29:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:29:09] <phoe> which ones?
[17:29:16] <phoe> the bottom ones?
[17:29:52] <moon-child> yeah
[17:30:29] <phoe> ayup, there'll be something similarly chaotic on the bottom later when I add adornments and illumination so they don't stick out like that
[17:32:39] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:32:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:37:54] <ln43> it's funny to see that there are more people in #fortran rather than in¬† #smalltalk
[17:38:00] <ln43> strange but true
[17:41:37] <epony> fortran calculates
[17:41:55] <semz> it makes sense, things like BLAS are still around and nobody is going to rewrite them because why bother
[17:41:57] <epony> (is also having a modern standard release too)
[17:42:13] <epony> and is the basis of porting to pascal ehm python
[17:43:53] <ln43> yes but for example before i was looking at the implementation of gcd or factorial in Pharo and looks like smalltalk people are aware of numerical recipes
[17:44:00] <ln43> too...
[17:55:57] <epony> https://en.wikipedia.org/wiki/Fortress_(programming_language) "Fortress is a discontinued experimental programming language for high-performance computing, created by Sun Microsystems with funding from DARPA's High Productivity Computing Systems project. One of the language designers was Guy L. Steele Jr., whose previous work includes Scheme, Common Lisp, and Java."
[17:57:02] <epony> it's like a Pascal bike with extra wheels
[17:59:32] <epony> the pseudocode idea is cool, the JVM use -> not
[18:02:40] <ln43> why not: didn't you like the JVM?
[18:16:56] <selwyn> good morning everyone
[18:18:49] <shka> selwyn: hi!
[18:19:19] <epony> the Fortran-like new language of of Guy Steele did not like it..
[18:19:35] <selwyn> hi
[18:19:49] <ln43> hi
[18:20:13] <selwyn> watching an american ad break
[18:20:22] <selwyn> so many illnesses i didn't know i didn't have
[18:20:51] <epony> there is more to learn between the commercial breaks, of diseases you want to have
[18:21:03] <epony> "need"ful things
[18:23:12] <ck_> what did it tell you to ask your doctor for?
[18:23:40] <epony> onion routing
[18:23:56] <selwyn> psoriasis (sp?) meds
[18:24:30] <epony> bald palms is a serious problem too in some regions of the world
[18:25:42] <selwyn> https://www.rollingstone.com/culture/culture-news/revealed-uk-government-publicity-blitz-to-undermine-privacy-encryption-1285453/
[18:25:43] -ixelp- Revealed: UK Gov't Plans Publicity Blitz to Undermine Chat Privacy - Rolling Stone
[18:25:47] <selwyn> sick and tired of normal island
[18:26:02] <ck_> publicity blitz like for brexit?
[18:26:10] <ck_> "let's take back our communication! [from the plebs]"
[18:27:12] <Gnuxie> is "RollingStone" a good source for this?
[18:28:01] <selwyn> this country can skirt around the consequences of what it means that the fourth in line to the throne may only face justice in the usa
[18:28:49] <selwyn> for child abuse no less
[18:29:05] <selwyn> yet at the same time launch a 'think of the children' campaign against internet privacy
[18:30:40] <ck_> is that news coverage what you were watching us television for?
[18:31:48] <selwyn> gnuxie: article seems well researched to me
[18:31:55] <selwyn> if it is correct, we will find out soon
[18:32:12] <Gnuxie> it says only 500k has been allocated? that sounds like nothing? 
[18:32:13] <selwyn> ck: i am merely watching some football
[18:32:30] <selwyn> for a pr campaign you can get a reasonable amount done?
[18:32:50] <Gnuxie> really? idk anything about PR campaigns 
[18:34:31] <selwyn> well
[18:34:46] <selwyn> there is still time to pay them more in any case
[18:38:12] <ck_> do you think this kind of idiocy will end when people that weren't born before the internet are no longer in power?
[18:38:19] <ck_> or will it become worse
[18:40:39] <semz> I don't think it will change noticeably
[18:42:55] <selwyn> ck: i think it will endure here due to local conditions
[18:43:04] <selwyn> not sure about other places
[18:44:21] <selwyn> the 'social authoritarian' trend here is very strong, dominant across political parties, and cannot really be challenged
[18:52:49] <ck_> not a very uplifting outlook
[18:53:30] *** Quits: moonwiki (~moonwiki@152.97.181.247) (Ping timeout: 250 seconds)
[19:03:06] *** Joins: treflip (~user@user/treflip)
[19:06:12] *** Quits: taeaad_ (~taeaad@user/taeaad) (Remote host closed the connection)
[19:21:45] <shka> selwyn: oh really?
[19:34:31] *** Joins: taeaad (~taeaad@user/taeaad)
[19:35:04] <ln43> https://medium.com/smalltalk-talk/lisp-smalltalk-and-the-power-of-symmetry-8bd96aaa0c0c <- any comment / note¬† about this reading ?
[19:35:04] -ixelp- Lisp, Smalltalk, and the Power of Symmetry | by Richard Kenneth Eng | Smalltalk Talk | Medium
[19:38:22] <ln43> i liked particularly the concept of symmetry taken from the nature and adopted in that context
[19:38:57] <ln43> anyway in my opinion it's not possible to write that a language has not source code...
[19:47:21] <ck_> There's too little smalltalk expertise on my end to appreciate the article I think
[19:50:12] <selwyn> shka: so many people simply want to lock people up for anything, even without evidence
[19:51:13] <ck_> ln43: on the other hand it's true that while I have edited lisp without a lisp image running, I have never visited Smalltalk code without being inside a Squeak. Doesn't make that statement true, but maybe that's what they mean in a way
[19:51:17] <selwyn> a friend of mine who did jury service made the argument (in a theft case) 'look this guy is not a good character but i don't believe there's enough evidence to convict him of this'
[19:51:36] <shka> interesting
[19:51:36] <selwyn> the others laughed 'you are probably right but who cares about that, send him to prison'
[19:52:06] <selwyn> as for the opposition, the problem is that they pioneered a lot of this stuff in the 2000s
[19:52:50] <selwyn> they gave courts powers to restrict people without trial
[19:53:16] <ln43> ck_: yes and that is the reason why he's writing that the IDE is the language
[19:53:27] <ln43> in a vague sense at least
[19:53:39] <selwyn> so they are not really minded to raise that many objections
[19:54:45] <selwyn> honestly, it is weird
[19:55:55] <selwyn> britain invented much of liberalism but it is often seen as an imposition
[19:58:19] <ln43> I like britain a lot for historical reasons and the contributions of british people
[19:58:56] <ln43> mostly yes, all those suffices to supersede few other aspects
[20:48:03] <phoe> https://cdn.discordapp.com/attachments/621389802691887134/932322751086206976/IMG_20220116_181732.jpg page 3
[20:51:38] <phoe> one longish function left
[20:51:49] <phoe> and I'll make it fit on four pages
[21:02:13] <selwyn> is it a commission? or just for fun
[21:04:13] <phoe> remember last year's ELS?
[21:05:01] <phoe> some guy announced a calligraphy fundraiser right before the conference
[21:05:09] <phoe> I gotta raise the bar and show him who's boss
[21:06:05] <selwyn> well hf
[21:08:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[21:10:30] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[21:11:14] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[21:25:29] <contrapunctus> phoe: how much fun is it to match parens on paper? üòèÔ∏è
[21:26:55] <ck_> he is using electric-goose-feather
[21:26:59] <contrapunctus> lmao
[21:28:07] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:28:32] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:32:03] <phoe> contrapunctus: 0%
[21:34:40] <contrapunctus> I was looking at my word processor project again...I've defined CLOS classes representing document nodes; terminal nodes (e.g. text, image) have a `content` slot, and `container` nodes have a `children` slot...but I wonder if that's a mistake. My idea was to separate document structure/layout from content (nodes)...isn't that violated if nodes have `children` slots? There's supposed to be a `layout
[21:34:40] <contrapunctus> ` tree, referring to some or all of the nodes - one way could be to set the `children` slots based on that. Or, drop the concept of `children` slots altogether... ü§îÔ∏è
[21:42:37] <selwyn> https://www.youtube.com/watch?v=Riauw5UTnW8
[21:42:38] -ixelp- NASA | Sarychev Volcano Eruption from the International Space Station - YouTube
[21:43:48] <moon-child> contrapunctus: you're very lucky beach is not here, else you'd have been chewed out vigourously for referring to 'clos classes'
[21:44:00] <moon-child> contrapunctus: you might consider having a shadow tree.  Though then you have the problem of keeping the two in sync
[21:44:38] <shka> selwyn: do you think the end of the world is coming?
[21:45:13] <selwyn> despite everything i am optimistic
[21:45:13] <contrapunctus> moon-child: why does beach dislike the term? ü§î
[21:45:22] <moon-child> contrapunctus: I do not think there is anything wrong with modeling content as a tree.  However I also think separation of content and presentation is not nearly so important in an interactive wysiwyg word processor
[21:45:24] <phoe> because there are no non-CLOS classes
[21:45:25] <selwyn> though my personality is like that anyway
[21:45:26] <mfiano> Not sure what beach would say, but "clos classes" is redundant.
[21:45:59] <selwyn> 'standard-class'es might be what you actually mean anyway
[21:46:01] <phoe> did you mean "standard classes"?
[21:46:03] <phoe> oh right
[21:47:24] <shka> mfiano: you sure? i think that this is keep it separate from cons cells and the likes
[21:47:31] <shka> or even structs
[21:47:44] <shka> selwyn: " no. so says the preacher man but...i don't go by what he says"
[21:47:50] <mfiano> structs is not a recognized term in the standard
[21:48:41] <selwyn> i should have guessed a song was on the way lol
[21:48:41] <phoe> there are three class subclasses defined by the standard
[21:48:48] <phoe> BUILT-IN-CLASS, STRUCTURE-CLASS, and STANDARD-CLASS
[21:48:49] <mfiano> structure-class is a metaclass though
[21:49:02] <phoe> the first ones, you can't define on your own
[21:49:07] <phoe> the second ones, you can DEFSTRUCT
[21:49:11] <phoe> the third ones, you can DEFCLASS
[21:49:20] <phoe> but all of these classes are of class CLASS which is a CLOS concept
[21:49:25] <phoe> hence, no non-CLOS classes
[21:49:57] <shka> phoe: dunno man, i don't know how exactly cons-cell works in sicl but at one point at least it is a class
[21:50:27] <shka> so better to ask beach what he has in mind before assuming stuff
[21:50:33] <phoe> (class-of (find-class 'cons)) ;=> #<STANDARD-CLASS COMMON-LISP:BUILT-IN-CLASS>
[21:51:15] <phoe> that isn't related to SICL, it's standard Common Lisp
[21:51:24] <mfiano> ^
[21:51:30] <phoe> the class BUILT-IN-CLASS is a STANDARD-CLASS
[21:51:55] <phoe> even better, (defclass foo () ()) (class-of (find-class 'foo)) ;=> #<STANDARD-CLASS COMMON-LISP:STANDARD-CLASS>
[21:52:10] <shka> phoe: is standard-class a clos class according to beach?
[21:52:20] <mfiano> There is no "clos class"
[21:52:23] <moon-child> shka: all classes are clos classes
[21:52:45] <shka> even the proletariat?
[21:52:46] <mfiano> CLOS is an integral part of Common Lisp
[21:54:13] <phoe> shka: (find-class 'proletariat) signals an error on my machine
[21:54:30] <shka> yes, that's why class war is a thing
[22:03:44] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 250 seconds)
[22:12:05] <MichaelRaskin> phoe: any bets on whether C standard will get ¬´defer¬ª feature making your dynamic-var-for-C portable C? (There seems to be a proposal)
[22:13:46] <ck_> right, I've seen this https://gustedt.wordpress.com/2020/12/14/a-defer-mechanism-for-c/
[22:13:46] -ixelp- A defer mechanism for C ‚Äì Jens Gustedt's Blog
[22:14:10] <ck_> the diagram looks like a "common core" math lecture out of the us school system
[22:15:18] <phoe> MichaelRaskin: we'll see
[22:15:19] <phoe> I hope so
[22:16:59] <moon-child> it was proposed a while ago.  They were trying to integrate it with an error-handling proposal (because otherwise you can get around it w/setjmp()/longjmp(), so you need an alternative to those), and now apparently also a closure proposal
[22:17:12] <phoe> hah
[22:17:18] <phoe> very nice
[22:17:25] <moon-child> all of which it would be good to have, but the committee is very conservative
[22:17:27] <phoe> C is on its way to become a workable lisp soon
[22:17:38] <phoe> just a portable deferrence mechanism would be fun
[22:17:43] * moon-child waits for phoe to implement the CCS
[22:17:51] <MichaelRaskin> Yes, there is a proposal that seems to be in favour of using anonymous functions in the process
[22:18:14] <moon-child> MichaelRaskin: the earlier proposal did not use closures.  I understand why they switched to using them, though
[22:18:32] <semz> This is really weird to see. What made the committee consider these now but not before?
[22:18:51] <semz> cast change?
[22:20:07] <moon-child> hmm.  Jens gustedt is a c++ person trying to bring c++ features to c
[22:20:19] <moon-child> robert seacord is not
[22:22:46] <contrapunctus> moon-child: makes sense, no need to duplicate information and then deal with keeping it in sync, if it can be avoided. Separation of content and presentation (among other ideas) is my reason for making this word processor to begin with üòÑÔ∏è
[22:37:17] <selwyn> phoe: what happened to the webasm control flow stuff
[22:39:17] <phoe> selwyn: nothing?
[22:39:21] <phoe> I stopped following it
[22:39:35] <phoe> I assume it has gone somewhere but I have no idea where
[22:39:37] <selwyn> i thought there was going to be a proposal
[22:39:47] <phoe> design-by-committee is killing it
[22:40:00] <selwyn> ok
[22:41:25] <moon-child> eh I was never particularly hopeful about wasm in the first place
[23:01:57] <shka> that's a shame really 
[23:10:39] <shka> commonqt5
[23:10:47] <shka> https://github.com/commonqt/commonqt5/
[23:10:48] -ixelp- GitHub - commonqt/commonqt5
[23:11:54] <phoe> yes, I've been trying to build qt libs for linux
[23:11:55] <moon-child> ‚ÄòOne day a student came to Moon and said, ‚ÄúI understand how to avoid using BIGNUMs!  We will simply use floats!‚Äù  Moon struck the student with a stick.  The student was enlightened.‚Äô
[23:12:09] <phoe> cmake is being a derp though
[23:12:19] <phoe> moon-child: I don't understand this koan
[23:12:28] * moon-child strikes phoe with a stick
[23:12:28] <selwyn> i got the hl2e1 'one free bullet' achievement
[23:12:37] <shka> koans, by definition are not to be understood
[23:13:08] <shka> i always had a chuckle about "python zen"
[23:13:20] *** Joins: kevingal (~quassel@37.228.202.92)
[23:13:29] <ck_> I want to go back in time and prevent web 2.0 from existing can anyone help me thanks
[23:14:17] * selwyn pictures moon as uncle from jackie chan adventures
[23:14:54] <selwyn> zen might be the most insufferable thing about python which is saying something
[23:15:07] <shka> no kidding
[23:15:07] <ck_> that's an actual piece of software?
[23:15:12] <shka> nah
[23:15:13] <selwyn> a philosophy that cannot be understood underpins your programming language. how convenient!
[23:15:56] <shka> yeah, i consider "python zen" to also be seriously annoying
[23:16:08] <shka> pythonist version of "rewrite in rust"
[23:16:24] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Quit: ZNC - https://znc.in)
[23:17:01] <shka> programming communities can be really weird, but those two are the most annoying i can think 
[23:17:09] <selwyn> python zen ‚ùå python xen ‚úîÔ∏è
[23:17:16] <selwyn> headcrabs turning devs into zombies
[23:17:23] <ck_> a man hangs by his teeth over a precipice. An internet asks "why did Bodidharma port programs from C to Rust?". If he doesn't answer, he fails. If he does, he falls down and dies. Now what
[23:17:53] <phoe> keep your mouth shut
[23:18:06] <phoe> the rustaceans will spare no chance
[23:18:36] <selwyn> > Special cases aren't special enough to break the rules
[23:18:38] <selwyn> ?
[23:20:08] <ck_> it's a free philosophy, fluid in its rigidity 
[23:20:19] <phoe> bdwgc == budweiser gc
[23:20:21] <phoe> change my mind
[23:20:36] <moon-child> lol
[23:21:03] <White_Flame> billy dee williams garbage collector
[23:21:57] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[23:32:42] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
