[00:00:01] <FromDiscord> <Gumber> if your'e passing GC'd refs yes
[00:00:09] <FromDiscord> <Gumber> if you're passing pointers
[00:00:13] <FromDiscord> <Gumber> you don't need to worry about it
[00:00:22] <FromDiscord> <Gumber> and even with GC'd refs you'll need locks etc
[00:00:33] <FromDiscord> <Gumber> unless you use channels
[00:00:34] <FromDiscord> <dom96> well, you do because your pointer could be freed from under you
[00:00:47] <FromDiscord> <Gumber> I mean you don't need to worry about incrementing any ref count
[00:00:58] <FromDiscord> <Gumber> your pointer assuming it's not GC traced won't be freed by the runtime
[00:01:02] <FromDiscord> <Gumber> you're responsible for freeing it
[00:01:12] <FromDiscord> <Gumber> because you allocated it or something you called did
[00:01:26] <FromDiscord> <dom96> That's assuming you alloc it yourself, I thought you meant: pass a pointer to a GC ref
[00:01:32] <FromDiscord> <Gumber> well yeah
[00:01:38] <FromDiscord> <Gumber> but that's not what I meant  by pointer
[00:01:41] <FromDiscord> <Gumber> I meant raw pointer
[00:01:49] <FromDiscord> <Gumber> with a pointer to a GC ref yes you still have to inc and dec ref counts
[00:01:58] <FromDiscord> <Gumber> and it gets tricky because when you start nesting objects
[00:02:09] <FromDiscord> <Gumber> you need to think about that too
[00:02:18] <FromDiscord> <Gumber> IMO unless the runtime has a way to generate all that stuff for you
[00:02:21] <FromDiscord> <Gumber> it's way easier to just use pointers
[00:02:26] <FromDiscord> <Gumber> and alloc the memory yourself
[00:02:31] <FromDiscord> <Gumber> way less of a headache
[00:02:31] <FromDiscord> <dom96> right, just forget about pointers
[00:02:38] <FromDiscord> <dom96> and any other unsafe Nim features
[00:02:42] <FromDiscord> <Gumber> I mean I use them constantly so
[00:02:52] <FromDiscord> <Gumber> but I also know what I'm doing 😉
[00:02:58] <FromDiscord> <Gumber> most of the time anyway
[00:03:14] <FromDiscord> <dom96> if I have a global ref in ARC/ORC then I need to make sure any thread touching it has a lock around it
[00:03:24] <FromDiscord> <Gumber> no not necessarily
[00:03:51] <FromDiscord> <Gumber> if things are just reading from memory and the underlying memory isn't being touched by any other thread
[00:03:55] <FromDiscord> <Gumber> then a lock would just cause issues
[00:03:59] <FromDiscord> <Gumber> and contention around the reads
[00:04:17] <FromDiscord> <Gumber> see this is why multithreaded programming is hard
[00:04:25] <FromDiscord> <Gumber> it's not like a pattern you can just apply everywhere
[00:04:27] <FromDiscord> <Gumber> or a few patterns
[00:04:43] <FromDiscord> <Gumber> it's like every situation where you want to toss threads at a problem - you really need to think deeply about what's happening at the system level
[00:05:00] <FromDiscord> <Gumber> and if you dont' grokk that you're probably not going to be using threads very sucessfully
[00:05:09] <FromDiscord> <Gumber> (edit) "dont' grokk" => "don't grok"
[00:05:10] <FromDiscord> <dom96> even if you're just reading you're still changing the ref count though afaik
[00:05:18] <FromDiscord> <dom96> so you will need a lock
[00:05:34] <FromDiscord> <dom96> I don't have a clear idea of when exactly ref counts change though
[00:05:40] <FromDiscord> <Gumber> okay in the case where we have a reference counting gc yes
[00:05:57] <FromDiscord> <Gumber> and now you're basically doing atomic reference counting
[00:06:06] <FromDiscord> <Gumber> 🙂
[00:06:53] <FromDiscord> <Gumber> just instead of synchronizing the ref count mutation with a lock
[00:06:57] <FromDiscord> <Gumber> you use an atomic
[00:07:08] <FromDiscord> <dom96> yeah, and this is imo the source of the unsafety
[00:07:11] <FromDiscord> <Gumber> and that gets really really hariy because atomics are implemented with different builtins
[00:07:17] <FromDiscord> <dom96> (edit) "imo" => "afaik"
[00:07:31] <FromDiscord> <dom96> arc/orc really should support atomic ref counts
[00:07:32] <FromDiscord> <Gumber> it's not the source of the unsafety
[00:07:36] <FromDiscord> <Gumber> no it shouldn't
[00:07:38] <FromDiscord> <Gumber> because it's slow
[00:07:41] <FromDiscord> <Gumber> you can add it if you want
[00:07:50] <FromDiscord> <Gumber> but I don't want it - I have zero desire for atomic ref counting
[00:08:00] <FromDiscord> <Gumber> and would immediately stop game programming with nim it it were added and made mandatory
[00:08:13] <FromDiscord> <Gumber> I'd stop using Nim alltogether
[00:08:24] <FromDiscord> <Gumber> (edit) "alltogether" => "all together"
[00:08:24] <FromDiscord> <dom96> it doesn't necessarily have to be forced on every ref, I'm sure there are some approaches that only apply it to shared memory
[00:08:29] <FromDiscord> <Gumber> no
[00:08:33] <FromDiscord> <Gumber> I don't want it on any shared memory lol
[00:08:39] <FromDiscord> <Gumber> I want control
[00:08:44] <FromDiscord> <dom96> well then you can use pointers
[00:08:48] <FromDiscord> <Gumber> I dont' want the runtime doing things for me that I don't have say over
[00:09:05] <FromDiscord> <Gumber> look arc is useful already without atomic ref counting
[00:09:07] <FromDiscord> <Gumber> I say that if youwa nt it
[00:09:13] <FromDiscord> <Gumber> add it in via a macro or someting
[00:09:16] <FromDiscord> <Gumber> or something in userland
[00:09:21] <FromDiscord> <Gumber> don't add it into the language and compiler
[00:09:35] <FromDiscord> <Gumber> that's where apple fucked up with Swift
[00:09:41] <FromDiscord> <Gumber> well one place anyway
[00:09:50] <FromDiscord> <Gumber> also if we just wanted atomic reference counting
[00:09:57] <FromDiscord> <Gumber> araq wouldn't have had to spend years figuring out ARC / ORC
[00:10:14] <FromDiscord> <dom96> IMO this sort of thing is what makes threading in Nim more complex than in other languages
[00:10:22] <FromDiscord> <Gumber> it's not more complex though in other languages
[00:10:28] <FromDiscord> <Gumber> other languages just have different concurrency model
[00:10:31] <FromDiscord> <Gumber> s
[00:10:33] <FromDiscord> <Gumber> Nim isn't trying to win that game and never has
[00:10:40] <FromDiscord> <Gumber> Nim isn't pony or erlang
[00:10:45] <FromDiscord> <Gumber> and I'm glad for it
[00:10:52] <FromDiscord> <Gumber> Nim is like a swiss army knife
[00:11:11] <FromDiscord> <Gumber> you start making mandates on the runtime like that and you're going to lose a lot of users and contributors
[00:11:22] <FromDiscord> <Gumber> atomic ref counting was avoided exactly because it's slow
[00:11:40] <FromDiscord> <Gumber> and araq saw what happened with swift as it was happening
[00:11:48] <FromDiscord> <Gumber> you can still achieve memory safety with Nim and ARC/ORC now with threads
[00:11:57] <FromDiscord> <Gumber> you just have to use channels
[00:12:10] <FromDiscord> <Gumber> or you have to write your program in a way that there are no shared reads or writes
[00:12:19] <FromDiscord> <Gumber> so everything is moved / sunk
[00:12:31] <FromDiscord> <dom96> I'm fairly sure shared reads/writes is what most programmers expect to be easy
[00:12:33] <FromDiscord> <Gumber> it's not like there's no way to achieve gc safety you just have to work at it and it's not necessarily easy
[00:12:37] <FromDiscord> <dom96> Right now it isn't easy in Nim and hasn't been ever
[00:12:39] <FromDiscord> <Gumber> they are
[00:12:43] <FromDiscord> <Gumber> but not when it comes to multithreading
[00:12:47] <FromDiscord> <dom96> This is what we need to solve
[00:12:51] <FromDiscord> <Gumber> try to write a multithreaded program in C or C++ or Java
[00:12:54] <FromDiscord> <Gumber> we don't need to
[00:12:56] <FromDiscord> <Gumber> you might need to
[00:13:00] <FromDiscord> <Gumber> but a lot of us don't
[00:13:15] <FromDiscord> <Gumber> a lot of us I think are perfectly happy with the concurrency scene in Nim right now
[00:13:20] <FromDiscord> <dom96> Really?
[00:13:21] <FromDiscord> <Gumber> minus the stdlib features not being there
[00:13:26] <FromDiscord> <Gumber> as far as the building blocks go? yes
[00:13:27] <FromDiscord> <dom96> I feel like everybody is unhappy with it
[00:13:29] <FromDiscord> <Gumber> continuation sare very nice
[00:13:32] <FromDiscord> <Gumber> (edit) "continuation sare" => "continuations are"
[00:13:41] <FromDiscord> <Gumber> I'm not saying the threadpool and spawn and parallel and async are good
[00:13:42] <FromDiscord> <Gumber> they're not
[00:13:52] <FromDiscord> <Gumber> but that's not because the langauge capabiltieis aren't there to make them good
[00:13:53] <FromDiscord> <Gumber> they are
[00:13:55] <FromDiscord> <Gumber> just the implementations are bad
[00:14:02] <FromDiscord> <dom96> Well I disagree
[00:14:06] <FromDiscord> <Gumber> and I'm not trivializing how hard it is to do those things
[00:14:12] <FromDiscord> <Gumber> and make good implementations
[00:14:16] <FromDiscord> <dom96> The language needs to be better here
[00:14:41] <FromDiscord> <Gumber> well I would fight you tooth and nail on a RFC to make atomic ref counting mandatory for the nim runtime
[00:14:55] <FromDiscord> <Gumber> and if it happened (which it wouldn't) like I said, the community would be down one member
[00:14:56] <FromDiscord> <dom96> I'm not saying that is the solution, just one of many
[00:15:10] <FromDiscord> <Gumber> again I don't think there needs to b ea solution
[00:15:14] <FromDiscord> <Gumber> delivered by the language
[00:15:23] <FromDiscord> <Gumber> and if ther eis one
[00:15:25] <FromDiscord> <dom96> Then what do you think needs to be here?
[00:15:26] <FromDiscord> <Gumber> it better be opt-in
[00:15:41] <FromDiscord> <Gumber> a better implementation of threadpool, spawn, parallel and async
[00:15:56] <FromDiscord> <Gumber> maybe not a better implementation of async
[00:16:15] <FromDiscord> <Gumber> but maybe some convenience / sugar / renaming to make it more ergonomic and not as confusing
[00:16:40] <FromDiscord> <Gumber> asyncdispatch has always been really really confusing to new folks
[00:17:49] <FromDiscord> <dom96> better spawn/threadpool won't solve the memory sharing ergonomics
[00:17:53] <FromDiscord> <dom96> I believe that needs to improve
[00:17:55] <FromDiscord> <Gumber> no but one that works would be nice
[00:18:02] <FromDiscord> <dom96> async ergonomics too, stack traces need to be improved a lot
[00:18:10] <FromDiscord> <Gumber> I mean look - no one has figured out a magic way to share memory betwene threads in any language
[00:18:14] <FromDiscord> <Gumber> that doesn't have a huge runtime cost
[00:18:22] <FromDiscord> <Gumber> you're basically saying - I'm going to trade memory safety for a big runtime cost
[00:18:28] <FromDiscord> <dom96> I don't mind _some_ runtime cost
[00:18:31] <FromDiscord> <Gumber> and make that decision for every user of the language
[00:18:32] <FromDiscord> <Gumber> YOU don't
[00:18:36] <FromDiscord> <Gumber> but YOU don't own Nim lol
[00:18:47] <FromDiscord> <dom96> yeah, I can say the same to YOU 🙂
[00:18:51] <FromDiscord> <Gumber> there are a lot of people that write embedded and realtime applications with Nim
[00:19:04] <FromDiscord> <dom96> But really it comes down to how big this runtime cost is
[00:19:05] <FromDiscord> <Gumber> they're not all going to want some new runtime change like atomic ref counting forced on them
[00:19:07] <FromDiscord> <dom96> everything is a tradeoff
[00:19:19] <FromDiscord> <Gumber> yeah but you do realize that when people are writing system level stuff
[00:19:28] <FromDiscord> <Gumber> and again Nim is billed as "a systems level programming lanaguage"
[00:19:34] <FromDiscord> <Gumber> they don't always care about everything being safe
[00:19:39] <FromDiscord> <Gumber> if they did - they'd go use Rust
[00:19:44] <FromDiscord> <Gumber> and deal with that horseshitg
[00:19:48] <FromDiscord> <Gumber> if you want Rust go use Rust lol
[00:19:53] <FromDiscord> <Gumber> or Swift
[00:19:56] <FromDiscord> <Gumber> I mean - I don't know what to tell you
[00:20:13] <FromDiscord> <Gumber> like you're just forgetting about a huge portion of Nim's community
[00:20:17] <FromDiscord> <Gumber> and arguably Nim's most advanced users
[00:20:27] <FromDiscord> <Gumber> in terms of technical and computing knowledge
[00:20:58] <FromDiscord> <Gumber> and you're also talking about a change that would probably break tons of existing code
[00:21:10] <FromDiscord> <Gumber> which is why a userland solution is the best
[00:21:12] <FromDiscord> <dom96> I think you're reading too much into what I'm saying
[00:21:15] <FromDiscord> <Gumber> I'm not
[00:21:26] <FromDiscord> <dom96> It's not like me saying this stuff will change anything
[00:21:26] <FromDiscord> <Gumber> you're talking about changing the default algorithm for the gc
[00:21:30] <FromDiscord> <Gumber> I know it won't
[00:21:41] <FromDiscord> <Gumber> but I'm trying to explain to you why the idea is problematic
[00:21:44] <FromDiscord> <dom96> and I'm not even saying it should be done
[00:21:54] <FromDiscord> <dom96> I don't know what the right approach is
[00:21:56] <FromDiscord> <Gumber> you're saying Nim needs something to improve the concurrency situation
[00:22:02] <FromDiscord> <Gumber> but I"m saying I don't think Nim needs to change
[00:22:09] <FromDiscord> <Gumber> someone needs to write a library or something
[00:22:29] <FromDiscord> <Gumber> figure out how to automate the atomic ref counts
[00:22:36] <FromDiscord> <Gumber> like patch the compiler or something
[00:22:41] <FromDiscord> <Gumber> and make it opt-in only
[00:22:43] <FromDiscord> <Gumber> that'd be fine
[00:22:53] <FromDiscord> <dom96> At the very least Nim does need to change how it communicates GC safety issues
[00:22:56] <FromDiscord> <Gumber> but I imagine you'd get a ton of push back if you tried to mainline it
[00:23:14] <FromDiscord> <Gumber> well yeah - and I think there's probably a lot of effort that's already gone into that
[00:23:29] <FromDiscord> <Gumber> I think the whole like verification tool dr nim or whatever was kind of working towards that goal
[00:23:35] <FromDiscord> <Gumber> static verification tool rather
[00:23:43] <FromDiscord> <Gumber> but I'm not sure where it ended up
[00:24:01] <FromDiscord> <Gumber> I think something like that would be way more beneficial than ARC/ORC
[00:24:11] <FromDiscord> <Gumber> err sorry
[00:24:13] <FromDiscord> <Gumber> I mean atomic ref counting
[00:24:28] <FromDiscord> <Gumber> something where it can just analyze your program at compile time and be like
[00:24:31] <FromDiscord> <Gumber> you have a potential data race here
[00:24:47] <FromDiscord> <Gumber> but that's really difficult to do too
[00:24:52] <FromDiscord> <Gumber> and I'm sure you can imagine why
[00:44:28] <FromDiscord> <QueenFuckingAdrielle> is there proper naming convention for .nim files? snake case, camel case, capitalized... etc
[00:44:40] <FromDiscord> <Yardanico> yes
[00:44:47] <FromDiscord> <QueenFuckingAdrielle> i found the style guide but i didnt see anything about file names unless im just blind
[00:45:14] <FromDiscord> <Yardanico> well generally you either use short single words or snake_case
[00:45:23] <FromDiscord> <Yardanico> but no one's stopping you from using camelCase if you want
[00:45:32] <FromDiscord> <QueenFuckingAdrielle> okay cool, ive been doing snake case
[00:45:34] <FromDiscord> <Yardanico> you can use any name as long as it's a valid nim identifier
[00:46:22] <ehmry> snake case is nice for those that are still using DOS
[00:50:09] <FromDiscord> <Gumber> I tend to follow C style conventions when programming in Nim
[00:50:14] <FromDiscord> <Gumber> it's difficult though
[00:50:19] <FromDiscord> <Gumber> because of Nim's handling of underscores
[00:50:24] <FromDiscord> <Gumber> or lacktherof I guess
[00:50:47] <FromDiscord> <Gumber> lately I've been migrating to using C++ style mixed with some functional brevity that Nim has which is nice
[00:50:51] <FromDiscord> <Gumber> like omitting parens etc
[00:50:59] <FromDiscord> <Gumber> I think the most important thing is you should decide on a style and stick to it
[00:51:06] <FromDiscord> <Gumber> because Nim has a lot of options for how you can style your code
[00:51:20] <FromDiscord> <Gumber> and if you're not consistent you end up with a codebase that isn't at all uniform and looks like it was written while someone was high
[00:51:34] <FromDiscord> <QueenFuckingAdrielle> lol
[00:51:57] <FromDiscord> <QueenFuckingAdrielle> yea, ive been torn on my programming paradigms as well
[00:52:53] <FromDiscord> <QueenFuckingAdrielle> there are so many ways to code with nim, I love it, but now that i have more freedom with it I have to ask myself what i think is good form
[00:53:18] <FromDiscord> <Gumber> yeah like I think it all boils down to your personal preferences and wha tother language you program in
[00:53:26] <FromDiscord> <Gumber> I came from Java and hated object oriented programming after it
[00:53:33] <FromDiscord> <Gumber> I wanted to learn C/C++ so I used Nim kind of as a brdige
[00:53:33] <FromDiscord> <QueenFuckingAdrielle> yea i hate oop as well
[00:53:35] <FromDiscord> <Gumber> bridge
[00:53:41] <FromDiscord> <Gumber> once I learned C I started to code my Nim like I wrote my C
[00:53:47] <FromDiscord> <QueenFuckingAdrielle> ah gotcha
[00:53:49] <FromDiscord> <Gumber> and now that I interop mostly with C++ and a mix of C
[00:54:05] <FromDiscord> <Gumber> I've started adopting C++ style conventions just because it's a bit more idiomatic I feel like given the rest of the Nim community
[00:54:26] <FromDiscord> <Gumber> everyone likes the universal function call syntax
[00:54:32] <FromDiscord> <QueenFuckingAdrielle> I went java (school only) - > python -> c -> cython -> nim
[00:54:35] <FromDiscord> <Gumber> so instead of like  the C style where you go like
[00:54:48] <FromDiscord> <Gumber> `function(object_function_belongs_to, param_one, param_two);`
[00:54:56] <FromDiscord> <Gumber> Nim can also do
[00:55:07] <FromDiscord> <Gumber> `object_function_belongs_to.function(param_one, param_two);`
[00:55:12] <FromDiscord> <Gumber> like C++ and other OOP languages
[00:55:21] <FromDiscord> <Gumber> both are equivalent
[00:55:24] <FromDiscord> <QueenFuckingAdrielle> ah gotcha, i def prefer the first
[00:55:29] <FromDiscord> <Gumber> I did for a long time too
[00:55:37] <FromDiscord> <Gumber> when it comes to naming constants for instance
[00:55:54] <FromDiscord> <Gumber> like in C world you see `const int MY_CONSTANT = 1`
[00:56:05] <FromDiscord> <QueenFuckingAdrielle> i like objects and functions to be separate, with very simple object types
[00:56:07] <FromDiscord> <Gumber> and you will see people declare consts like that in Nim
[00:56:29] <FromDiscord> <Gumber> but a lot of people just use `const MyConstant = 1` or `const myConstant = 1`
[00:56:42] <FromDiscord> <Gumber> there's no real consistent standard across the community - it's all just individual preference
[00:56:44] <FromDiscord> <Gumber> but the important thing is to be consistent
[00:56:58] <FromDiscord> <Gumber> and using a tool like nimpretty can at least help with enforcing spacing and things like that
[00:57:07] <FromDiscord> <QueenFuckingAdrielle> i think thats good, brings out more innovation.
[00:57:12] <FromDiscord> <Gumber> also - just like a protip and something that I think everyone eventually ends up doing
[00:57:18] <FromDiscord> <Gumber> don't use four spaces to indent use two
[00:57:22] <FromDiscord> <Gumber> and obviously no tabs
[00:57:25] <FromDiscord> <Gumber> tabs and Nim don't mix
[00:57:28] <FromDiscord> <QueenFuckingAdrielle> yea i use 2 spaces
[00:57:39] <FromDiscord> <QueenFuckingAdrielle> i love that about nim
[00:57:41] <FromDiscord> <Gumber> some people use four and it's maddening
[00:57:49] <FromDiscord> <dom96> In reply to @Gumber "some people use four": yessss
[00:57:51] <FromDiscord> <Gumber> like - why do you want so much extra whitespace for your eyes to have to gloss over
[00:57:53] <FromDiscord> <QueenFuckingAdrielle> lol yea i think it looks cruddy
[00:57:58] <FromDiscord> <Gumber> it's just more strain on the eyes I think
[00:58:06] <FromDiscord> <Gumber> if you read from right to left anyway
[00:58:11] <FromDiscord> <Gumber> errr
[00:58:12] <FromDiscord> <Gumber> left to right sorry
[00:58:14] <FromDiscord> <QueenFuckingAdrielle> lol
[00:58:16] <FromDiscord> <QueenFuckingAdrielle> yea
[00:58:17] <FromDiscord> <Gumber> brain got confused for a sec
[00:58:55] <FromDiscord> <QueenFuckingAdrielle> ive been putting off figure out how to use cuda kernels and opencl in this project for the longest time
[00:59:03] <FromDiscord> <Gumber> ooph sounds not fun
[00:59:03] <FromDiscord> <QueenFuckingAdrielle> ill have to deal with it soon enough haha
[00:59:16] <FromDiscord> <Gumber> I'm glad I don't have to mess with CUDA as a game programmer
[00:59:23] <FromDiscord> <Gumber> I mean I guess i could if I really wanted to experience pain in life
[00:59:28] <FromDiscord> <Gumber> like there are certainly appliactions
[00:59:32] <FromDiscord> <Gumber> I could invent or find
[00:59:38] <FromDiscord> <QueenFuckingAdrielle> yea, you guys get to have fun with vulkan 😛 jk
[00:59:41] <FromDiscord> <Gumber> but it's by no means necessary
[01:00:03] <FromDiscord> <Gumber> yeah I'm actually like growing a gray hair right as I type this because of Vulkan and how many gd layers of C and C++ I"m calling in and out of from my nNim code
[01:00:08] <FromDiscord> <QueenFuckingAdrielle> i tried learning vulkan and it was the hardest package/api ive ever tried. I just gave up lol
[01:00:40] <FromDiscord> <Gumber> I use Vuklan in combination with https://github.com/charles-lunarg/vk-bootstrap and https://github.com/martty/vuk
[01:00:55] <FromDiscord> <QueenFuckingAdrielle> i have an indie game I'm working on but its engine based
[01:00:58] <FromDiscord> <Gumber> and `vuk` uses a bunch of ther libraries like `spirv-cross` and `shaderc` and `vulkan-memory-allocator` etc...
[01:01:05] <FromDiscord> <Gumber> yeah I write / roll all my own tech
[01:01:09] <FromDiscord> <Gumber> I mean to a certain point
[01:01:12] <FromDiscord> <QueenFuckingAdrielle> nice
[01:01:31] <FromDiscord> <Gumber> but I've been doing this for close to sixteen years at this point so....
[01:01:33] <FromDiscord> <QueenFuckingAdrielle> im primarily an hpc/deeplearning person
[01:01:39] <FromDiscord> <Gumber> ah cool
[01:01:47] <FromDiscord> <Gumber> there are some other folks in Nim that are really into that stuff
[01:01:55] <FromDiscord> <Gumber> should check out the #science  community channel
[01:02:00] <FromDiscord> <Gumber> I think those nerds hang out in there
[01:02:02] <FromDiscord> <Gumber> (just kidding)
[01:02:03] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (Quit: -)
[01:02:08] <FromDiscord> <QueenFuckingAdrielle> yea ive met a few, this is a very cool community for it
[01:02:09] <FromDiscord> <QueenFuckingAdrielle> lol
[01:02:13] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[01:02:25] <FromDiscord> <Gumber> yeah - I've been an active member of the Nim community since like 2015?
[01:02:28] <FromDiscord> <Gumber> maybe the tail end of 2014
[01:02:33] <FromDiscord> <Gumber> some good people here
[01:02:34] <FromDiscord> <Gumber> for sure
[01:02:43] <FromDiscord> <Gumber> some really smart one stoo
[01:02:53] <FromDiscord> <Gumber> like they will make your head hurt smart
[01:02:56] <FromDiscord> <QueenFuckingAdrielle> ive been working on a robotics framework in nim+c+python for like 3 years now
[01:03:03] <FromDiscord> <Gumber> (edit) "one stoo" => "ones too"
[01:03:11] <FromDiscord> <Gumber> sounds neat
[01:03:17] <FromDiscord> <Gumber> yeah Nim is great for embedded stuff too
[01:03:29] <FromDiscord> <Gumber> got a whole IoT scene in one channel I think
[01:03:30] <FromDiscord> <QueenFuckingAdrielle> yea I had to take a break for some other research consulting i was doing
[01:03:38] <FromDiscord> <Gumber> oh yeah - #embedded haha
[01:03:43] <FromDiscord> <Gumber> gotcha
[01:03:52] <FromDiscord> <QueenFuckingAdrielle> mainly deeplearning+covid research
[01:03:56] <FromDiscord> <Gumber> yeah I wish I was more into robotics and FGPAs and deep learning and stuff like that
[01:04:07] <FromDiscord> <Gumber> it's just like not enough time in the universe for me to do everything I want / am interested in exploring
[01:04:13] <FromDiscord> <Gumber> and games are challenging enough
[01:04:16] <FromDiscord> <QueenFuckingAdrielle> yea i hear you lol
[01:04:21] <FromDiscord> <Gumber> oh covid research huh?
[01:04:23] <FromDiscord> <QueenFuckingAdrielle> i have a million hobbies
[01:04:24] <FromDiscord> <Gumber> should have talked to me last week
[01:04:26] <FromDiscord> <QueenFuckingAdrielle> yea
[01:04:29] <FromDiscord> <Gumber> I would have been a great source of information
[01:04:31] <FromDiscord> <Gumber> or data
[01:04:39] <FromDiscord> <QueenFuckingAdrielle> ugh oh lol
[01:04:44] <FromDiscord> <QueenFuckingAdrielle> how are you doing now?
[01:04:45] <FromDiscord> <Gumber> can talk to my wife right now if you want lol
[01:04:47] <FromDiscord> <Gumber> she' sin bed with it
[01:04:54] <FromDiscord> <Gumber> I'm fine - have some weird ass lingering leftover symptoms
[01:05:05] <FromDiscord> <QueenFuckingAdrielle> yea my gf and i both caught it at the same time about a year ago
[01:05:08] <FromDiscord> <Gumber> like I feel like my blood pressure is elevated a bit and I have some weird GI issues
[01:05:19] <FromDiscord> <Gumber> like I feel bloated all the time
[01:05:22] <FromDiscord> <QueenFuckingAdrielle> yep i remember that, screw that
[01:05:25] <FromDiscord> <Gumber> but other than that I'm good - there was one day that was scary
[01:05:42] <FromDiscord> <Gumber> but I did it to myself - I had a really bad post nasal drip and a dry cough so like not productive at all
[01:05:53] <FromDiscord> <Gumber> I woke up and took some dayquick - that was mistake number one
[01:06:06] <FromDiscord> <Gumber> the cough supressant made it so I couldn't cough up anything, so my chest was just filling up with mucus
[01:06:13] <FromDiscord> <QueenFuckingAdrielle> oh god
[01:06:16] <FromDiscord> <Gumber> then when that was wearing off I was like - I need an expectorant
[01:06:18] <FromDiscord> <Gumber> some mucienx
[01:06:38] <FromDiscord> <Gumber> so I go to the store - parents call me to ask how I"m doing, tell them I'm getting mucinex and they're like oh make sure you get the dm stuff it will help out so much
[01:06:48] <FromDiscord> <Gumber> don't really look at it too much get some mucinex DM from the drive through pharmacy thing
[01:06:51] <FromDiscord> <Gumber> take that
[01:07:00] <FromDiscord> <Gumber> for like an hour or so I can coughs tuff up and life is okay again
[01:07:02] <FromDiscord> <mratsim> where am I :?
[01:07:06] <FromDiscord> <QueenFuckingAdrielle> yea i stayed away from cough/cold medicine when i had it
[01:07:09] <FromDiscord> <Yardanico> is this #main ? 🤔
[01:07:10] <FromDiscord> <QueenFuckingAdrielle> lol
[01:07:13] <FromDiscord> <Yardanico> i thought it was #covid-discussion
[01:07:14] <FromDiscord> <Gumber> but then it starts happening again and I slowly realize I took cough suppressant AGAIN
[01:07:19] <FromDiscord> <QueenFuckingAdrielle> lol
[01:07:20] <FromDiscord> <Gumber> well we WERE talking about Nim
[01:07:22] <FromDiscord> <Gumber> we were the only ones
[01:07:28] <FromDiscord> <Gumber> now it's off topic an deveryone wants to have a fit
[01:07:37] <FromDiscord> <Yardanico> but you know, if you do a lot of offtopic #offtopic might be better suited
[01:07:47] <FromDiscord> <Gumber> you guys are like fair weather admmins / mods
[01:07:55] <FromDiscord> <QueenFuckingAdrielle> lol
[01:07:57] <FromDiscord> <Gumber> and I'm a mod
[01:08:06] <FromDiscord> <Gumber> you made me one!
[01:08:21] <FromDiscord> <QueenFuckingAdrielle> I'm just weird goth chick
[01:08:24] <FromDiscord> <Gumber> but anyway yeah - long story short (not really) don't take cough supressant if you can't cough stuff up and have covid
[01:08:28] <FromDiscord> <QueenFuckingAdrielle> i dont live here
[01:08:47] <FromDiscord> <Gumber> and Nim discussion can resume - because I'm going outside to finish mowing the lawn
[01:09:01] <FromDiscord> <QueenFuckingAdrielle> good talking tho, catch ya later
[01:27:26] <nrds> <06Prestige99> Hey @Elegantbeef would you be available to voice chat some point today? Messing around with another implementation of the animation code, would like to poke your brain
[01:28:03] <FromDiscord> <Gumber> In reply to @nrds "<Prestige> Hey <@145405730571288577> would": sounds hot
[01:28:05] <FromDiscord> <Elegantbeef> Probably
[01:28:10] <FromDiscord> <Gumber> I'm kidding, I'm kidding....
[01:28:14] <nrds> <06Prestige99> Lol
[01:28:27] <FromDiscord> <Gumber> I'm a 12 year old trapped in a 36 year old body
[01:28:29] <FromDiscord> <Gumber> I apologize
[01:28:29] <FromDiscord> <Elegantbeef> We were only going to have a steamy shower with webcams, you'd probably like it
[01:28:47] <nrds> <06Prestige99> I thought we were doing a hottub stream this time
[01:28:56] <FromDiscord> <Elegantbeef> That's next week
[01:29:03] <FromDiscord> <Gumber> patience is a virtue
[01:29:40] <FromDiscord> <SivadNai> if you can afford to wait
[01:31:06] <FromDiscord> <Gumber> next week is the most difficult week of my life
[01:31:21] <FromDiscord> <Gumber> also I think I won this thread - https://forum.nim-lang.org/t/8440
[01:31:27] <FromDiscord> <Gumber> I'm (carterza)
[01:31:55] <FromDiscord> <SivadNai> what does the @ char mean in Nim? (sorry to talk code)
[01:32:11] <FromDiscord> <Gumber> it's an operator take an array and create a sequence from it
[01:32:28] <FromDiscord> <Gumber> but I mean you could overload it to do whatever you wanted
[01:32:41] <FromDiscord> <Gumber> though that's what it's implementation provides by default in the stdlib
[01:32:46] <FromDiscord> <haxscramper> `typeof([1,2,3]) is array[3, int]`, `typeof(@[1,2,3]) is seq[int])`
[01:33:06] <FromDiscord> <Elegantbeef> `@` is just an operator it can do anything but unary on array turns into seq
[01:33:27] <FromDiscord> <SivadNai> okay that makes sense, I was looking at a CLR example in winim with @ Process
[01:34:43] <FromDiscord> <SivadNai> I've only seen it with seq before, clearly haven't coded enough
[01:34:44] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[01:38:23] <FromDiscord> <Elegantbeef> @dain\: i did add the smart module/type level stuff for use if interested https://play.nim-lang.org/#ix=3znM
[01:40:50] <FromDiscord> <dain> thanks
[01:41:13] <FromDiscord> <dain> you should write that up somewhere, it seems to be quite obscure
[01:41:50] <FromDiscord> <Elegantbeef> Yea i really should make some more written tutorials for macros
[01:42:02] <FromDiscord> <Elegantbeef> Or even a vidja
[01:44:21] <FromDiscord> <dain> yeah i'm making some notes for how you port the python with statement using a macro
[01:44:42] <FromDiscord> <dain> i know there are forum posts about that already but im trying to match python's semantics more closely, and also extend it to do more things
[01:44:45] <FromDiscord> <dain> like have a return value
[01:45:50] <FromDiscord> <dain> for macros there needs to be more stuff in the topright quadrant from here https://documentation.divio.com/
[01:45:58] <FromDiscord> <Elegantbeef> With the use macro one major issue is that nim has an implicit `result` variable so to have a return value with use requires some fancy logic to not have to use return everywhere
[01:46:27] <FromDiscord> <Elegantbeef> I agree and i'm probably one of the people to do it given the amount of macros i throw out for people in here 😛
[01:47:53] <FromDiscord> <dain> i really like this post and i think there need to be more like it https://nim-lang.org/blog/2021/03/10/fusion-and-pattern-matching.html
[01:48:11] <FromDiscord> <dain> except that one is waaay complicated and is also explaining two things at once (pattern matching and macros)
[01:48:21] <FromDiscord> <Elegantbeef> Yea all i've got is https://dev.to/beef331/demystification-of-macros-in-nim-13n8
[01:48:36] <FromDiscord> <dain> i think it would be good to have a series of posts that are like: here is a feature from language X, and this is how you port it to nim
[01:48:48] <FromDiscord> <Elegantbeef> I could do as such
[01:48:51] <FromDiscord> <dain> they don't have to be complicated either, it could just be a 4 line template
[01:48:56] <FromDiscord> <Elegantbeef> Can you get me a list of features? 😛
[01:49:19] <FromDiscord> <dain> ha, well there's the with statement like I said
[01:50:08] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3znN
[01:50:47] <FromDiscord> <Elegantbeef> Was super confused about that case statement for a good second or two 😛
[01:50:55] <FromDiscord> <Elegantbeef> You're using matching
[01:51:04] <FromDiscord> <dain> yeah
[01:51:15] <FromDiscord> <dain> it's easier than wrangling the AST directly
[01:52:38] <FromDiscord> <dain> oh also i didn't see an explanation for what gensym is and why you'd use it in the official macro tutorial. would be good to have that explained somewhere
[01:52:42] <FromDiscord> <dain> since it's pretty important
[01:56:42] <FromDiscord> <Elegantbeef> I'm a simple man
[01:56:43] <FromDiscord> <Elegantbeef> Hax i think it's also a writeup of how to do/reason about things
[01:56:44] <FromDiscord> <haxscramper> I think I have some other examples
[01:56:44] <FromDiscord> <Elegantbeef> Examples of macros are plentiful but why/how is rather limited
[01:56:45] <FromDiscord> <haxscramper> If you need some examples↵● elixir-style pattern overloading, https://play.nim-lang.org/#ix=2RnU↵● matching based on ast expressions, https://play.nim-lang.org/#ix=3tBr
[01:56:45] <FromDiscord> <haxscramper> Yes, but coming up with idea of what to write about can be challenging
[01:56:46] <FromDiscord> <Elegantbeef> I dont disagree
[01:56:46] <FromDiscord> <haxscramper> Well, I just dumped links, don't expect me to aactually think about problem at hand
[01:56:46] <FromDiscord> <haxscramper> I'm like 0.01% brainpower mode right now
[01:56:48] <FromDiscord> <haxscramper> C++ is slowly pushing me out of the "generally sane" area
[02:00:47] <FromDiscord> <dain> ya these need to be written up somewhere for ppl to find
[02:00:47] <FromDiscord> <leorize> I think there is some docs for gensym in macros but I agree, it doesn't say anything about why you would want it
[02:01:01] <FromDiscord> <dain> like a "nim macros cookbook" or something
[02:04:30] *** Quits: max22- (~maxime@2a01cb088335980099348db52b55749a.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[03:12:15] <nrds> <06Prestige99> Elegantbeef: The point I'm stuck at here (error I'm not sure what it means) https://play.nim-lang.org/#ix=3zo3 - I also was trying out openArray instead of seq but I think that was causing another prob
[03:12:18] <nrds> <06Prestige99> if you have any insight
[03:12:39] <nrds> <06Prestige99> (I'm probably overlooking something)
[03:14:19] <FromDiscord> <Elegantbeef> You're not properly binding `SomeNumber`
[03:14:24] <FromDiscord> <leorize> `T: SomeNumber` instead of repeating it please \:p
[03:14:38] <nrds> <06Prestige99> I tried that as well, had the same error iirc
[03:15:36] <FromDiscord> <Elegantbeef> I swear i'm going to come to your house and burn your PC if you use a named tuple
[03:15:49] <nrds> <06Prestige99> Lol why? It's easier to type
[03:16:11] <FromDiscord> <Elegantbeef> Here you go anyway
[03:16:12] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3zo4
[03:16:27] <FromDiscord> <Elegantbeef> I dont like named tuples since they're just aliases and not technically type safe
[03:20:03] <FromDiscord> <Elegantbeef> Also what's the point of exporting `sample`
[03:20:04] <FromDiscord> <Elegantbeef> It cannot be accessed as you do not inject it
[03:21:35] <FromDiscord> <Elegantbeef> As such you might as well do https://play.nim-lang.org/#ix=3zo7
[03:24:04] <FromDiscord> <Elegantbeef> I still dont get why people write proc/template defs like that if there arent many args just hard to read to me
[03:26:06] <nrds> <06Prestige99> oh the issue was sample had a generic
[03:26:36] <FromDiscord> <Elegantbeef> More you used `T` for sample
[03:26:40] <FromDiscord> <Elegantbeef> Or... not \:P
[03:27:20] <FromDiscord> <Elegantbeef> Yea it was you used `SomeNumber` which was the same as the one above
[03:27:37] <nrds> <06Prestige99> the generic for sample had to be removed yeah
[03:27:53] <FromDiscord> <Elegantbeef> No it didnt need to be removed you needed to bind a different symbol
[03:28:27] <FromDiscord> <Elegantbeef> Do to you using `[SomeNumber]` you caused some fucking binding logic
[03:28:38] <nrds> <06Prestige99> I mean that was the reason why it wasn't compiling
[03:28:57] <nrds> <06Prestige99> I was doing T: SomeNumber previously but had the same issue, just didn't know why
[03:29:12] <FromDiscord> <Elegantbeef> Well it's not due to the generic
[03:29:29] <FromDiscord> <Elegantbeef> It's due template binding + your odd binding
[03:29:36] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3zo8 works for instance
[03:30:17] <FromDiscord> <Elegantbeef> It was using `SomeNumber` as a generic name not a type constraint
[03:30:49] <FromDiscord> <Elegantbeef> As such `sample[SomeNumber]` was getting a type instead of a generic name/constraint
[03:31:09] <FromDiscord> <Elegantbeef> Remember generic parameters arent special they're identifiers like anything else can be any number of letters
[03:31:14] <nrds> <06Prestige99> Yeah ik
[03:31:25] <nrds> <06Prestige99> just saying i didnt see it, but that was the issue
[03:31:38] <FromDiscord> <Elegantbeef> So then why the fuck were you using SomeNumber as a generic parameter name 😛
[03:31:56] <nrds> <06Prestige99> unintentional, I was using T: SomeNumber previously
[03:32:58] <nrds> <06Prestige99> was shifting things around trying to debug 
[03:33:24] <FromDiscord> <Elegantbeef> Well my proclivities aside it works now so i'll shush and quit jokingly belittling you
[03:34:45] <nrds> <06Prestige99> thanks for the help, just didn't know where to look cuz the error message was useless
[03:35:07] <FromDiscord> <Elegantbeef> Well it's 100% accurate, but yea
[03:35:18] <FromDiscord> <Elegantbeef> Doesnt give much information
[03:36:18] <nrds> <06Prestige99> or a location
[03:37:09] <FromDiscord> <Elegantbeef> The issue is on expansion i figure so the error line is the line the template is called on i think
[03:37:52] <FromDiscord> <Elegantbeef> Cause until instantiation `SomeNumber` is just a generic param, but on instantiation it's a type i believe
[03:45:33] <FromDiscord> <Elegantbeef> Looking sadly it seems there isnt presently any extra information there to really grab
[04:18:39] *** Joins: rockcavera (~rc@192.12.113.93)
[04:18:39] *** Quits: rockcavera (~rc@192.12.113.93) (Changing host)
[04:18:39] *** Joins: rockcavera (~rc@user/rockcavera)
[05:17:04] <FromDiscord> <tomsen> noob question\: when making a type, can it inherit from an imported type with "ref object of ImportedType"?
[05:24:34] <FromDiscord> <Yardanico> In reply to @tomsen "noob question\: when making": yes, but only if that ImportedType inherits from RootObj
[05:27:07] <FromDiscord> <tomsen> I got a misleading error, before I realized that the type members need to be public as well. Then it worked, luckily it inherited from RootObj. Good to know about that. thanks!
[05:31:05] <FromDiscord> <Elegantbeef> What was the error/code?
[05:31:17] <nrds> <06Prestige99> Hmm so I have a generic proc using T: SomeNumber, I check if T is SomeFloat and that returns true, even thought typeof(T) is `int`. Am I missing something here?
[05:31:32] <FromDiscord> <Elegantbeef> Code?
[05:32:10] <nrds> <06Prestige99> 1 min
[05:33:33] <nrds> <06Prestige99> https://play.nim-lang.org/#ix=3zou
[05:34:06] <FromDiscord> <Elegantbeef> use `when`
[05:34:33] <nrds> <06Prestige99> ah, thanks
[05:34:33] <FromDiscord> <Elegantbeef> if is runtime, when is compile time and the proper tool here since you dont want the emitted int branch
[06:22:25] <FromDiscord> <fae> Is it bad practice to define arithmetic operators for non numeric types? eg `list += item` instead of `list.add(item)`
[06:29:22] <FromDiscord> <impbox [ftsf]> i'd say it's a personal preference thing, some people don't like it, some do
[06:32:40] <FromDiscord> <impbox [ftsf]> `&=` might be more nimic for appending than `+=` though
[06:33:06] <FromDiscord> <impbox [ftsf]> but i'm you'll piss off someone either way, but go with whatever you like
[06:33:22] <FromDiscord> <leorize> isn't `&=` already exist?
[06:33:46] <FromDiscord> <leorize> !eval var x = @[0]; x &= 10; echo x
[06:33:50] <NimBot> @[0, 10]
[06:34:21] <FromDiscord> <treeform> In reply to @fae "Is it bad practice": I would not do it if you are making open source libs some one needs to read. But if its private stuff I doubt any one cares...
[06:34:35] <FromDiscord> <impbox [ftsf]> yep, `&=` is already defined!
[06:34:41] <FromDiscord> <treeform> normal regular code any one can understand is the best
[06:35:33] <FromDiscord> <impbox [ftsf]> i've only seen & used for strings, but makes sense it works for any seq
[06:35:35] <FromDiscord> <fae> I agree, but Nim is very powerful and tempts you to do things like that haha
[06:44:31] <FromDiscord> <fae> In reply to @leorize "isn't `&=` already exist?": Yea the list was just for example sake. What I was actually thinking of was something like `entity += Position()`
[06:44:55] <FromDiscord> <Elegantbeef> Do not go gentle into that good night 😛
[06:45:03] <FromDiscord> <fae> And ‘var p= entity[Position]` to fetch component by type
[06:45:08] <FromDiscord> <Elegantbeef> Making a non idiomatic library just means someone that uses your code needs to wrap it idiomatically
[06:45:12] <FromDiscord> <fae> (edit) "‘var" => "`var"
[06:52:10] <FromDiscord> <Varriount> In reply to @Elegantbeef "Making a non idiomatic": Sometimes. There are cases where a non-idiomatic API makes more sense.
[06:52:30] <FromDiscord> <Varriount> My favorite example being this Python library: https://github.com/kolypto/py-good
[06:52:33] <nrds> <12R2D299> 4GitHub: 7"Slim yet handsome validation library."
[06:53:06] <FromDiscord> <Elegantbeef> There are always exceptions to rules
[06:55:14] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:55:24] <FromDiscord> <Gumber> @fae I don't think it's a bad idea at all
[06:55:31] <FromDiscord> <Gumber> operator overloading is a thing for a reason 🙂
[06:55:43] <FromDiscord> <Gumber> and syntactic sugar is sugar 🙂
[06:56:11] <FromDiscord> <Gumber> plus it's YOUR code as long as it works and it's consistent
[06:56:17] <FromDiscord> <impbox [ftsf]> and then there's shit like `cout << "hello world!";`
[06:56:25] <FromDiscord> <Gumber> no
[06:56:28] <FromDiscord> <Gumber> that's just nonsense
[06:56:32] <FromDiscord> <Gumber> list += item isn't
[06:56:38] <FromDiscord> <impbox [ftsf]> operator overloading can be used for good or evil
[06:56:40] <FromDiscord> <Gumber> oh for sure
[06:56:44] <FromDiscord> <Gumber> like use common sense
[06:56:58] <FromDiscord> <Gumber> `|` would have been sooooo much better than `<<`
[06:57:00] <FromDiscord> <impbox [ftsf]> `entity += Position()` to add a Position component to an entity seems pretty confusing to me
[06:57:01] <FromDiscord> <Varriount> sent a code paste, see https://play.nim-lang.org/#ix=3zoJ
[06:57:06] <FromDiscord> <Gumber> I agree
[06:57:19] <FromDiscord> <Gumber> plus you don't really add entities to copmonents like that
[06:57:22] <FromDiscord> <Gumber> or components to entities rather
[06:57:30] <FromDiscord> <Gumber> entities are usually just Ids
[06:57:35] <FromDiscord> <Gumber> if you're doing it right
[06:57:45] <FromDiscord> <Gumber> or some type of handle
[06:58:08] <FromDiscord> <impbox [ftsf]> nothing to say it isn't in this case
[06:58:18] <FromDiscord> <Gumber> true but it leads one to believe it's some sort of container
[06:58:26] <FromDiscord> <impbox [ftsf]> it's an abstraction
[06:58:45] <FromDiscord> <Gumber> it's just not as obvious as list += item I think
[06:58:47] <FromDiscord> <Gumber> at least not to me
[06:59:17] <FromDiscord> <impbox [ftsf]> `entity.addComponent(Position())` is a lot more clear to me than `entity += Position()`
[06:59:26] <FromDiscord> <Gumber> I agree 100%
[07:00:29] <FromDiscord> <impbox [ftsf]> or `entity[Position] = Position()` depending on if you allow multiple of the same type of component per entity
[07:37:32] <FromDiscord> <fae> yea entities in my implementation are a fairly simple object, just an id and ref back to the world. procs for entities are just thing wrappers over world calls
[07:38:02] <FromDiscord> <fae> sent a code paste, see https://play.nim-lang.org/#ix=3zoS
[07:38:32] <FromDiscord> <fae> so the plan was to have like `addComponent(world: World, entity: Entity, component: T)`
[07:38:44] <FromDiscord> <fae> but define some shorter procs for entity which would delegate down to those
[07:39:22] <FromDiscord> <fae> idk something like that roughly
[07:39:24] <FromDiscord> <fae> sent a code paste, see https://play.nim-lang.org/#ix=3zoT
[07:43:14] <FromDiscord> <Gumber> 🤷 I'm just going to wrap entt 🙂
[07:43:26] <nrds> <06Prestige99> entt seems nice
[07:43:44] <nrds> <06Prestige99> I still haven't ever gotten ECS working well (in any language) lol
[07:43:45] <FromDiscord> <Gumber> yeah someone already wrapped it I think there are bindings for it out there somewhere
[07:43:58] <FromDiscord> <Gumber> well - I think I'm about to drop a bomb on the nim game programing community
[07:44:03] <FromDiscord> <Gumber> in or around a months time
[07:44:10] <nrds> <06Prestige99> sounds interesting
[07:44:16] <FromDiscord> <Gumber> not something usable - but something to make everyone drool
[07:44:31] <FromDiscord> <Gumber> usable for me but not anyone else is what I meant to say
[07:45:11] <FromDiscord> <Gumber> now to figure out where in my 18 layers of Nim and C/C++ code I have something incorrect
[07:47:39] <FromDiscord> <fae> trying to write your own stuff is a great way to learn the language when you're a noob though
[07:48:12] <FromDiscord> <fae> I tried doing some wrapping stuff but I dont know either Nim or c/c++ very well so I had difficulty with anything but the simplest of libs
[07:48:29] <FromDiscord> <Gumber> yeah I mean you're not going to do what I'm doing if you don't know C++ well
[07:48:31] <FromDiscord> <Gumber> or C
[07:48:46] <FromDiscord> <Gumber> for what I'm doing you need to know how to write a C interface for a C++ library
[07:49:13] <FromDiscord> <fae> whats the point of doing that btw? is it so you can avoid the cpp backend?
[07:49:20] <FromDiscord> <fae> or just easier interop with Nim?
[07:49:37] <FromDiscord> <Gumber> no it's because the library is using C++20/latest features
[07:49:57] <FromDiscord> <Gumber> and Nim's C++ backend can't handle it unless you do a lot of work
[07:50:12] <FromDiscord> <Gumber> like if you use C++20's `span` for instance Nim wil go bonkers
[07:50:17] <nrds> <06Prestige99> Ye interop with C is much better than c++ for nim
[07:50:41] <FromDiscord> <Gumber> C++ interop with Nim is wonky - like you have to abuse the ever living F out of importcpp
[07:50:55] <FromDiscord> <Gumber> make it your bitch
[07:51:10] <FromDiscord> <Gumber> with C it's very very straightforward
[07:51:25] <FromDiscord> <Gumber> but that's because C has no types and is loose
[07:51:42] <FromDiscord> <Gumber> and generating correct C code is much easier than generating correct C++ code
[07:52:04] <FromDiscord> <Gumber> because C++'s spec is bananas
[07:52:07] <FromDiscord> <fae> but you still need to use the c++ backend?
[07:52:12] <FromDiscord> <Gumber> to do what?
[07:52:19] <FromDiscord> <fae> to use the underlying c++ lib, even with a c wrapper
[07:52:23] <FromDiscord> <Gumber> no
[07:52:25] <FromDiscord> <fae> oh okay
[07:52:30] <FromDiscord> <Gumber> but I do use the cpp backend
[07:52:33] <FromDiscord> <fae> what if you want to static link
[07:52:37] <FromDiscord> <Gumber> doesn't matter
[07:52:40] <FromDiscord> <fae> gotcha
[07:52:44] <FromDiscord> <Gumber> do you know what static linking is?
[07:52:53] <FromDiscord> <fae> including the lib in the executable?
[07:52:59] <FromDiscord> <fae> as opposed to a separate file
[07:53:01] <FromDiscord> <Yardanico> In reply to @fae "what if you want": take cimgui for example - it offers a C interface for a imgui which is a C++ library
[07:53:02] <FromDiscord> <Gumber> not really that's a side effectg
[07:53:08] <FromDiscord> <Gumber> (edit) "effectg" => "effect"
[07:53:12] <FromDiscord> <Yardanico> you can use nim's C backend with cimgui just fine and have it all statically compiled into a single binary
[07:53:18] <FromDiscord> <fae> like not having to dynamically load it in at runtime
[07:53:21] <FromDiscord> <Gumber> static linking means that the symbol resolution to the library occurs at compile time
[07:53:22] <FromDiscord> <Gumber> right
[07:53:40] <FromDiscord> <fae> so in what cases do you _need_ to use the c++ backend?
[07:53:41] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[07:53:55] <FromDiscord> <Gumber> if you want to compile C++ code or load symbols from C++ libraries
[07:53:55] <FromDiscord> <Yardanico> when you need direct source code C++ interop
[07:54:10] <FromDiscord> <fae> because ive actually been avoiding trying to wrap any c++ libs thinking i would be forced to use the cpp backend
[07:54:20] <FromDiscord> <Gumber> why are you so scared of the cpp backend?
[07:54:25] <FromDiscord> <Gumber> that's the better question
[07:54:31] <FromDiscord> <fae> i just figured the c backend is more portable
[07:54:35] <FromDiscord> <fae> and has better support
[07:54:53] <FromDiscord> <fae> but im not basing that on anything concrete
[07:55:03] <FromDiscord> <Gumber> I mean yes C is a more portable language
[07:55:13] <FromDiscord> <Yardanico> i mean that's true because C backend is the default so it's tested much more and C is more portable
[07:55:13] <FromDiscord> <Gumber> the C++ backend's support is fine'
[07:55:16] <FromDiscord> <Gumber> (edit) "fine'" => "fine"
[07:55:28] <FromDiscord> <Gumber> like it's not worked on but it's not broken
[07:55:30] <FromDiscord> <Gumber> it is what it is
[07:55:34] <FromDiscord> <fae> got it
[07:55:37] <FromDiscord> <Gumber> like I said you have to abuse importcpp
[07:55:39] <FromDiscord> <Yardanico> there's a higher chance to encounter a codegen bug with the C++ backend than with C but that's about it
[07:55:44] <FromDiscord> <Gumber> but like - if you stick to C++11/14
[07:55:53] <FromDiscord> <Gumber> you shouldn't really have any issues with portability
[07:56:01] <FromDiscord> <fae> okay
[07:56:03] <FromDiscord> <Gumber> golden rule of thumb with C++ is wait at least 4 years
[07:56:05] <FromDiscord> <fae> thats comforting to know
[07:56:08] <FromDiscord> <Gumber> before you start using any modern spec in production
[07:56:33] <FromDiscord> <Gumber> but I mean - I'm using vulkan and writing for PC and maybe linux
[07:56:36] <FromDiscord> <Gumber> but very doubtful
[07:56:54] <FromDiscord> <Gumber> because cross platform floating point determinism is not fun to try to solve
[07:57:14] <FromDiscord> <Gumber> I mean you can't solve it you can only deal with it
[07:57:40] <FromDiscord> <Gumber> so C++20 is fine - inconsequential for me
[07:57:42] <FromDiscord> <fae> well many exceptions to rules come down to programmer skill and you have a lot of experience with c++ so i can understand why you feel comfortable dropping down or doing more advanced things
[07:57:54] <FromDiscord> <Gumber> eh I don't really write C++ because the language is lol
[07:58:03] <FromDiscord> <Gumber> but I know it and can grok it and can wrap it
[07:58:05] <FromDiscord> <fae> i had never figured out how to properly use a linker until a couple months ago lol
[07:58:11] <FromDiscord> <Gumber> yeah I mean baby steps dude
[07:58:14] <FromDiscord> <fae> spent a day trying to get tcc working on my mac
[07:58:17] <FromDiscord> <Gumber> I've been using Nim for 6 years
[07:58:20] <FromDiscord> <fae> just to find out there are platform bugs
[07:58:22] <FromDiscord> <Gumber> sorry for calling you dude
[07:58:24] <FromDiscord> <Gumber> person lol
[07:58:43] <FromDiscord> <Gumber> oh yeah I've never used Nim + tcc before
[07:58:44] <FromDiscord> <fae> np i'm a dude but yea good to use inclusive language lol
[07:58:48] <FromDiscord> <Gumber> yes I try
[07:59:14] <FromDiscord> <Gumber> I want to embed dascript in my game
[07:59:16] <FromDiscord> <Gumber> but we'll see
[07:59:29] <FromDiscord> <Gumber> I already have a whole plugin system architecture working in several prototypes
[07:59:53] <FromDiscord> <Gumber> but right now I'm not bothering with an fancy engine architecture... I'm writing my renderer because that's the thing I need next
[08:00:10] <FromDiscord> <Gumber> I already have steamworks wrapped and all of the matchmaking and lobby code fleshed out (needs a lot of features but the minimum is there)
[08:00:29] <FromDiscord> <fae> any reason to pick dascript over lua or even wren or something like that? the performance definitely seems like a selling point, but resources for lua are abound
[08:00:30] <FromDiscord> <Gumber> so I'm like 80-90% there in terms of being ready to start writing gameplay code and more plumbing for asset loading
[08:00:46] <FromDiscord> <fae> btw dascript really is cool, ive been peeking at it the past few days
[08:00:47] <FromDiscord> <Gumber> already have my fiber based job system prototyped - but I might just end up using that C++ task scheduling library that intel has
[08:00:52] <FromDiscord> <Gumber> yeah it looks very neat
[08:01:09] <FromDiscord> <Gumber> okay so yea lua is the golden child of the game scripting language world
[08:01:16] <FromDiscord> <Gumber> but the thing about lua is it was invented for non-programmers
[08:01:31] <FromDiscord> <Elegantbeef> I'm scared of the C++ backend cause my Nim compiler fixes cause issues with it 😛
[08:01:32] <FromDiscord> <Gumber> so you have to deal with funky shit like everything is 1 based for indexing instead of zero based
[08:01:34] <arfy> lua's interesting.
[08:01:54] <FromDiscord> <Gumber> it's also dynamically typed so you don't have, well, types
[08:01:56] <FromDiscord> <impbox [ftsf]> lua's lack of type safety sucks
[08:02:05] <FromDiscord> <impbox [ftsf]> that's the main reason i'd choose dascript
[08:02:10] <FromDiscord> <fae> has anyone looked at <https://github.com/marcobambini/gravity>
[08:02:27] <FromDiscord> <Gumber> no but I'd pick dascript over that 100 times out of 100
[08:02:42] <FromDiscord> <impbox [ftsf]> "dynamic typing"
[08:02:45] <FromDiscord> <impbox [ftsf]> no thanks
[08:02:51] <FromDiscord> <Gumber> A) dascript is made by dajin the folks that make war thunder
[08:02:57] <FromDiscord> <Gumber> so they're probably dogfooding it
[08:03:04] <FromDiscord> <Gumber> B) dascript is strongly and statically typed
[08:03:08] <FromDiscord> <Gumber> two huge wins
[08:03:27] <FromDiscord> <Gumber> C) dascript is hot reloadable - which to my knowledge it's the only scripting language that is strongly, statically typed and hot reloadable
[08:03:30] <FromDiscord> <fae> so basically no to anything dynamically typed
[08:03:36] <FromDiscord> <Yardanico> In reply to @Gumber "A) dascript is made": they also have a couple of newer projects ongoing, but that's more for #offtopic or #gaming :)
[08:03:37] <FromDiscord> <Gumber> I mean if you don't like type safety
[08:03:39] <FromDiscord> <Gumber> go for it
[08:03:50] <FromDiscord> <fae> isn't v lang hot reloadable? 🙂
[08:03:50] <FromDiscord> <Yardanico> i've been liking their new f2p game called  Enlisted
[08:03:55] <FromDiscord> <Gumber> you're trolling right?
[08:04:07] <FromDiscord> <Gumber> not you yard
[08:04:08] <FromDiscord> <Gumber> fae
[08:04:09] <FromDiscord> <impbox [ftsf]> i used to do a lot of lua, but so many errors that could have been caught at compile time
[08:04:12] <FromDiscord> <fae> no
[08:04:22] <FromDiscord> <Gumber> you know V is vaporware right?
[08:04:26] <FromDiscord> <impbox [ftsf]> also 1 indexing
[08:04:27] <FromDiscord> <Gumber> V stands for vapoware
[08:04:35] <FromDiscord> <Gumber> (edit) "vapoware" => "vaporware"
[08:04:36] <arfy> perl6! lol
[08:04:38] <FromDiscord> <fae> <https://github.com/vlang/v/tree/master/examples/hot_reload>
[08:04:44] <FromDiscord> <Gumber> yo
[08:04:48] <FromDiscord> <Gumber> don't ever talk about V in here again
[08:04:54] <FromDiscord> <Gumber> lol I"m kidding
[08:04:55] <FromDiscord> <Gumber> but
[08:04:56] <FromDiscord> <fae> lol
[08:05:01] <FromDiscord> <Gumber> like V is kind of a joke in here
[08:05:02] <FromDiscord> <fae> it does work tho 🤷
[08:05:05] <FromDiscord> <fae> oh i know
[08:05:09] <FromDiscord> <Gumber> I mean sure
[08:05:20] <FromDiscord> <Gumber> so does compiling C code and calling it a new programming language
[08:05:29] <FromDiscord> <Gumber> and then making money from that claim
[08:05:36] <FromDiscord> <fae> In reply to @impbox "i used to do": have you looked at the typescript to lua project?
[08:05:59] <FromDiscord> <Gumber> adding typescript to my project so I can compile to lua
[08:06:06] <FromDiscord> <Gumber> doesn't sound like a win to me
[08:06:19] <FromDiscord> <Gumber> sounds like I should just use a good language
[08:06:26] <FromDiscord> <fae> TS is a popular language with stellar IDE support though
[08:06:30] <FromDiscord> <Yardanico> there are multiple languages that compile to lua too, some of them statically typed afaik
[08:06:42] <FromDiscord> <Gumber> mmm
[08:06:47] <FromDiscord> <fae> and it actually works quite nicely if you're using a framework like love2d or engine like defold
[08:06:54] <FromDiscord> <Gumber> ooph
[08:07:09] <FromDiscord> <Yardanico> that said, dascript looks cool :)
[08:07:12] <FromDiscord> <fae> not all of us are triple A, sometimes we just want types with our lua haha
[08:07:16] <FromDiscord> <Gumber> I'm not AAA either
[08:07:18] <FromDiscord> <Yardanico> it should be possible to use it outside of games too I guess
[08:08:10] <FromDiscord> <Yardanico> also it apparently has syntax skins that nim once had
[08:09:50] <FromDiscord> <Gumber> I guess like for 2d games I find using something like defold or love2d kind of excessive
[08:10:19] <FromDiscord> <Gumber> and a lot of the times it's slower than just not using them
[08:10:30] <FromDiscord> <Gumber> IMO and experience anyway
[08:10:59] <FromDiscord> <Gumber> even for 3d I don't like using engines
[08:11:01] <FromDiscord> <fae> love is a pretty light framework imo, about as light as they come
[08:11:09] <FromDiscord> <Gumber> not if I have to bolt on typescript
[08:11:17] <FromDiscord> <fae> haha
[08:11:20] <FromDiscord> <Gumber> but I mean you could use Nim with it if you can use Typescript with it so
[08:11:29] <FromDiscord> <Gumber> I just really really dislike web technologies
[08:11:44] <FromDiscord> <fae> I work all day in web tech so it’s familiar to me
[08:11:48] <FromDiscord> <Gumber> I do too
[08:11:50] <FromDiscord> <Gumber> I still hate it
[08:11:58] <FromDiscord> <Gumber> I code in Elixir for work
[08:12:23] <FromDiscord> <fae> But like I’ve said before, one of the reasons Nim has captivated me is that it’s made these traditionally scary things more accessible
[08:12:39] <FromDiscord> <Gumber> yeah I mean don't be scared by anything
[08:12:41] <FromDiscord> <Gumber> it's not scary
[08:13:13] <FromDiscord> <Gumber> Nim gives you a reason to explore them
[08:13:36] <FromDiscord> <Gumber> because trust me - I worked in web dev for a decade without really touching or exploring C/C++ and it was always a pipe dream
[08:13:50] <FromDiscord> <Gumber> once I found Nim it gave me an avenue to get good at C/C++
[08:15:21] <FromDiscord> <fae> Sounds like I may follow in a similar trajectory. Because I had always been intimidated by things like defines and macros, templates, etc. But since picking up Nim it’s given me a reason to dive into that stuff in learn it.
[08:15:41] <FromDiscord> <Gumber> defines are templates in Nim
[08:16:04] <FromDiscord> <Gumber> they exist in C and C++ and are referred to as preprocessor directives
[08:16:18] <FromDiscord> <Gumber> the preprocessor is a phase of the compiler that runs before the actual compilation happens
[08:16:37] <FromDiscord> <Gumber> it basically scans the code for preprocessor directives and looks for their invocations
[08:16:42] <FromDiscord> <Gumber> it's code substitution
[08:16:58] <FromDiscord> <Gumber> but there's some nuances like hygiene that come into play and are more advanced topics
[08:16:59] <FromDiscord> <fae> yes I’ve been doing a lot of reading on templates/macros in Nim
[08:17:03] <FromDiscord> <Gumber> good
[08:17:10] <FromDiscord> <Gumber> I"m trying to establish the context with C++
[08:17:12] <FromDiscord> <fae> My ecs is using them pretty heavily
[08:17:16] <FromDiscord> <Gumber> nice
[08:17:34] <FromDiscord> <Gumber> I'd say the most difficult part of learning how to interop with C++ and Nim
[08:17:40] <FromDiscord> <Gumber> is how to build C++ code
[08:17:53] <FromDiscord> <fae> Lol yea all these build systems are a pain
[08:18:06] <FromDiscord> <Gumber> I mean that's been C++'s story since day one
[08:18:10] <FromDiscord> <Gumber> bad build systems and bad compile times
[08:18:15] <FromDiscord> <Gumber> the latter can be alleviated to some egree
[08:18:17] <FromDiscord> <Gumber> (edit) "egree" => "degree"
[08:18:22] <FromDiscord> <Gumber> the former is a never ending plague
[08:18:47] <FromDiscord> <Gumber> C++ has a lot of other warts too
[08:18:56] <FromDiscord> <Gumber> I dunno if you saw my little forest gump movie thing earlier
[08:19:07] <FromDiscord> <fae> Alright gotta afk bathtime with babies
[08:19:14] <FromDiscord> <Gumber> but all those things mentioned were real
[08:19:15] <FromDiscord> <Gumber> k
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[08:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:39:36] <FromDiscord> <Rika> In reply to @Gumber "you know V is": It isn't by the way, it's just very limited; I've seen some fairly complex v code already
[08:46:16] <FromDiscord> <Gumber> you're not going to convince me that V is ever going to be anything other than a meme though
[08:46:40] <FromDiscord> <Gumber> you can write code in a lot of buggy, horribly implemented, broken languages
[08:46:58] <FromDiscord> <Gumber> the fact is the author wrote a compiler that could compile C code
[08:47:08] <FromDiscord> <Gumber> and billed it as a new programming language with all of these advanced features
[08:47:16] <FromDiscord> <Gumber> and took money from people for it
[08:47:30] <FromDiscord> <Rika> I'm not gonna tell you it's good
[08:47:30] <FromDiscord> <Gumber> when in reality it didn't even have a backend
[08:47:43] <FromDiscord> <Rika> I'm just gonna tell you it at least isn't vaporware
[08:47:44] <FromDiscord> <Gumber> it's easy to build a facade
[08:47:45] <FromDiscord> <Gumber> or easier I guess
[08:47:50] <FromDiscord> <xflywind> https://github.com/vlang/v/discussions/11048
[08:47:54] <FromDiscord> <Gumber> I guess it's depends on your definition of vaporware
[08:48:03] <FromDiscord> <xflywind> it is just incomplete
[08:48:11] <FromDiscord> <Gumber> of course you have to have enough product to keep the con going
[08:48:18] <FromDiscord> <Gumber> if you want to pull the long con
[08:48:51] <FromDiscord> <Gumber> and at this point it has pour souls contributing their free time to its "development"
[08:48:59] <FromDiscord> <Gumber> but I highly doubt it's a real functioning software project
[08:49:18] <FromDiscord> <Gumber> with someone that is guiding it towards some fruitful end goal
[08:49:37] <FromDiscord> <Gumber> it is much more likely someone raking in money trying to deceive people into thinking the project has legs
[08:50:29] <FromDiscord> <xflywind> v lang keep lying and boosting by hype
[08:50:33] <FromDiscord> <xflywind>  https://media.discordapp.net/attachments/371759389889003532/889365388247302204/unknown.png
[08:50:54] <FromDiscord> <xflywind> Now it changed object is freed by RC to GC.
[08:51:07] <FromDiscord> <Gumber> I mean the whole thing is a sham
[08:51:14] <FromDiscord> <Gumber> I'm surprised they even update the website
[08:52:00] <FromDiscord> <Gumber> I just remember when they had like rotating matrix style 3d doom models
[08:52:11] <FromDiscord> <Gumber> like their programming language is a game engine too lol
[08:52:42] <FromDiscord> <xflywind> (edit) "Now it changed object is freed by ... RC" 03added "from"
[08:52:44] <FromDiscord> <Gumber> just like how can we make this thing more shiny and attractive to people who don't really understand how computers work
[08:52:48] <FromDiscord> <Gumber> and take their money
[08:53:21] <FromDiscord> <Gumber> oh here we go
[08:53:35] <FromDiscord> <Gumber>  https://media.discordapp.net/attachments/371759389889003532/889366149903564830/unknown.png
[08:53:45] <FromDiscord> <Gumber> I guess no rotation
[08:53:53] <FromDiscord> <Gumber> and it's not matrix style it's wireframe
[08:54:19] <FromDiscord> <Gumber> let's look at `tetris.v`
[08:54:33] <FromDiscord> <Yardanico> who registered nim-lang.dev lol
[08:54:42] <FromDiscord> <Yardanico> it redirects to http://qinmishu.github.io/
[08:54:59] <FromDiscord> <Gumber> https://github.com/vlang/v/blob/master/examples/tetris/tetris.v
[08:55:30] <FromDiscord> <Gumber> so they're building opengl libraries into their stdlib
[08:55:35] <FromDiscord> <Gumber> this sounds like a really really good idea
[08:56:14] <FromDiscord> <Yardanico> In reply to @Gumber "so they're building opengl": wait until you learn that their compiler has an SQL parser in it
[08:56:20] <FromDiscord> <Gumber> lol
[08:56:27] <FromDiscord> <Gumber> I mean I"m not surprised at all
[08:56:40] <FromDiscord> <Yardanico> they also had to special-case it in the codegen
[08:56:45] <FromDiscord> <Gumber> the surprising thing is that people give this person almost $1000 a month on patreon
[08:56:49] <FromDiscord> <xflywind> json, ORM in compiler too
[08:57:10] <FromDiscord> <Yardanico>  https://media.discordapp.net/attachments/371759389889003532/889367054627524608/unknown.png
[08:57:14] <FromDiscord> <Gumber> no one gives me $1000 a month for being an idiot
[08:57:23] <FromDiscord> <Gumber> I guess I just need to build a fancy website
[08:57:32] <FromDiscord> <Gumber> and throw random technologies together
[08:57:36] <FromDiscord> <Yardanico> and about codegen - https://github.com/vlang/v/blob/master/vlib/v/gen/c/sql.v
[08:57:38] <FromDiscord> <Gumber> I've been doing it wrong all these years
[08:58:07] <FromDiscord> <Gumber> mmph such a pretty looking language
[08:58:11] <FromDiscord> <Gumber> thank god my compiler can parse sql
[08:58:19] <FromDiscord> <Gumber> what would I have done before vlang?
[08:58:32] <FromDiscord> <xflywind> https://github.com/vlang/v/blob/master/vlib/v/gen/c/json.v
[08:58:39] <FromDiscord> <Yardanico> LOL
[08:59:02] <FromDiscord> <Yardanico> they _still_ don't have a native (written in V) json parser?
[08:59:09] <FromDiscord> <Gumber> fuck me sidweays
[08:59:14] <FromDiscord> <Gumber> (edit) "sidweays" => "sideways"
[08:59:34] <FromDiscord> <xflywind> In reply to @Yardanico "they _still_ don't have": And they benchmarking json parser in C wrapper.
[08:59:58] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (*.net *.split)
[08:59:58] *** Quits: euantorano (sid180289@id-180289.helmsley.irccloud.com) (*.net *.split)
[09:00:03] <FromDiscord> <Yardanico> i'm pretty sure there are pure-v json parser impls, so why are they using cjson in the language itself for json
[09:00:13] <FromDiscord> <xflywind> yeah, json2
[09:00:19] <FromDiscord> <Gumber> well I mean they started V by writing a C compiler
[09:00:21] <FromDiscord> <Gumber> so.....
[09:00:38] <FromDiscord> <xflywind> https://github.com/vlang/v/tree/master/vlib/x/json2
[09:00:44] <FromDiscord> <Gumber> with a different frontend
[09:00:48] <FromDiscord> <xflywind> > The name json2 was chosen to avoid any unwanted potential conflicts with the existing codegen tailored for the main json module which is powered by CJSON.
[09:00:53] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[09:00:55] <FromDiscord> <Gumber> lol
[09:00:55] *** Joins: euantorano (sid180289@id-180289.helmsley.irccloud.com)
[09:01:03] <FromDiscord> <Gumber> creative and lazy
[09:02:06] <FromDiscord> <Yardanico> ok let's not talk about it that much :D
[09:02:19] <FromDiscord> <Gumber> so much fun tho
[09:02:28] <FromDiscord> <Yardanico> we already have https://github.com/belamenso/v
[09:02:31] <nrds> <12R2D299> 4GitHub: 7"Write Nim only with 'v'"
[09:02:36] <FromDiscord> <Gumber> @fae started it
[09:03:03] <FromDiscord> <Gumber> lol
[09:08:04] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Quit: Connection closed)
[09:08:16] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[09:11:38] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (*.net *.split)
[09:11:38] *** Quits: ehmry (~quassel@2a03:3b40:fe:ab::1) (*.net *.split)
[09:12:03] *** Joins: ehmry (~quassel@2a03:3b40:fe:ab::1)
[09:12:45] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[09:24:07] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 252 seconds)
[09:55:41] <nrds> <06Prestige99> hm welp I coded myself into a corner with generics, tried something weird, got a compiler crash lol
[09:56:51] <FromDiscord> <Rika> so what did you do
[09:57:44] <nrds> <06Prestige99> Was using SomeNumber for generics, and wanted a Table[string, Foo[SomeNumber]] but I can't do that for obvious reasons. So I tried Foo[int|float], and the compiler exploded
[09:57:58] <nrds> <06Prestige99> Error: internal error: getTypeDescAux(tyVoid)
[09:58:11] <nrds> <06Prestige99> I just need to restructure this whole thing, back to square one
[09:59:40] <FromDiscord> <Elegantbeef> Nah you dont need to restructure it
[10:00:16] <FromDiscord> <Elegantbeef> Well you can probably use union for this
[10:00:17] <nrds> <06Prestige99> Want to take a look? Could paste the file or, maybe voice/screen share would be helpful
[10:00:22] <FromDiscord> <Rika> ah yes the internal error basically everyone sees
[10:00:22] <nrds> <06Prestige99> Yeah
[10:00:36] <FromDiscord> <Elegantbeef> Share the code
[10:01:03] <nrds> <06Prestige99> https://play.nim-lang.org/#ix=3zpk 
[10:01:07] <FromDiscord> <Elegantbeef> Yea that compiler error is due to someone not doing the check at semantic checking and it gets deferred to cgen, it's fun 😀
[10:01:21] <nrds> <06Prestige99> Line 16
[10:01:46] <FromDiscord> <Elegantbeef> Yea just use union or a tagged union
[10:01:46] <nrds> <06Prestige99> Basically trying to add AnimationTracks with ints and floats
[10:02:18] <FromDiscord> <Elegantbeef> Heterogeneous collections are fun, and leroize's union gives one of the better APIs
[10:02:19] <nrds> <06Prestige99> i.e. that union lib?
[10:02:39] <FromDiscord> <Elegantbeef> Manually write a tagged union, use Union or use my sumtypes
[10:02:44] <FromDiscord> <Elegantbeef> The latter is probably the least good
[10:03:20] <FromDiscord> <Rika> beef why do you suck smh
[10:03:31] <FromDiscord> <Elegantbeef> I'm just a bad human
[10:03:45] <FromDiscord> <Elegantbeef> Too bad recalls do not happen
[10:04:33] <nrds> <06Prestige99> Any docs on tagged unions? I'm not familiar
[10:04:48] <FromDiscord> <Elegantbeef> Object variants
[10:04:56] <nrds> <06Prestige99> same thing? 
[10:04:59] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#types-object-variants
[10:05:11] <FromDiscord> <Elegantbeef> An object variant is just the nim way of doing tagged unions
[10:05:19] <nrds> <06Prestige99> ah, cool thanks
[10:05:35] <FromDiscord> <impbox [ftsf]> can object variants have stuff shared across branches yet?
[10:05:46] <FromDiscord> <Elegantbeef> Nope
[10:06:23] <FromDiscord> <Elegantbeef> Do you mean shared names or repetitive statements?
[10:06:59] <nrds> <06Prestige99> Hmm so this means I'll have to pass in some object variant object instead of e.g. 1.3...
[10:07:16] <FromDiscord> <Elegantbeef> Well you can make a converter/generator
[10:10:18] <nrds> <06Prestige99> True
[10:10:36] <FromDiscord> <impbox [ftsf]> ahh you can have stuff common to all branches, but not common to a subset of branches
[10:10:53] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3zpm
[10:11:01] <FromDiscord> <impbox [ftsf]> `common` works but `bar` doesn't
[10:11:55] <FromDiscord> <Elegantbeef> Yea fairly certain araq is against allowing duplicate symbols in branches
[10:13:43] <FromDiscord> <Elegantbeef> If you only need to support 2 types prestige https://play.nim-lang.org/#ix=3zpn
[10:13:47] <nrds> <06Prestige99> Idk this feels very messy
[10:14:22] <FromDiscord> <Elegantbeef> I mean you want to hold two values of different types welcome to heterogeneous collections
[10:14:43] <nrds> <06Prestige99> I think there's probably a better solution, I just don't know what it is
[10:15:04] <nrds> <06Prestige99> I don't really need them in the same collection, I just need access to the data
[10:15:12] <FromDiscord> <impbox [ftsf]> seq of float keys and seq of int keys?
[10:15:38] <FromDiscord> <Elegantbeef> Impbox dont know if you've looked as of late but this is the RFC https://github.com/nim-lang/RFCs/issues/368
[10:15:41] <nrds> <06Prestige99> That would work, but then I'd need to find out which one I'm supposed to look in
[10:16:29] <FromDiscord> <impbox [ftsf]> @ElegantBeef nah, cool
[10:17:50] <nrds> <06Prestige99> Atm I'm using a string (animation name) as a lookup into a table, where the value is an AnimationTrack (one animated property, either an int or a float)
[10:18:09] <nrds> <06Prestige99> I could use two maps, but then would potentially need to do 2 lookups to find the right animation
[10:18:16] <FromDiscord> <impbox [ftsf]> Prestige, otherwise your option is dynamic dispatch
[10:18:43] <FromDiscord> <Elegantbeef> the OOP method might be the simplest and least ugly
[10:18:44] <nrds> <06Prestige99> How would that be used here?
[10:19:14] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 268 seconds)
[10:19:38] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3zpq
[10:20:20] <nrds> <06Prestige99> oh then store a collection of KeyFrame... not a bad idea
[10:20:32] <FromDiscord> <impbox [ftsf]> yup
[10:20:41] <nrds> <06Prestige99> Thanks, I'll give that a shot
[10:21:28] <FromDiscord> <impbox [ftsf]> I guess the object variant style is more performant though, but if performance isn't an issue this should be easy
[10:21:48] <FromDiscord> <Elegantbeef> Well the inheritance style is also more flexible
[10:21:50] <FromDiscord> <impbox [ftsf]> i wish there was a way to write OOP style and have it transformed into object variant style
[10:22:33] <FromDiscord> <Elegantbeef> God damn it impbox i hate you 😛
[10:22:50] <nrds> <06Prestige99> I'd like to get the object variant style working without the API needing to know about the object variant existing
[10:23:18] <FromDiscord> <Elegantbeef> I say i hate you cause that's not impossible to implement but would require tagging everything
[10:24:04] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[10:24:38] <FromDiscord> <impbox [ftsf]> aww i was expecting you to jump in with a playground link to a super complex macro
[10:24:43] <FromDiscord> <Elegantbeef> God damn it am i going to make a dynamic dispatch macro for object variants?!
[10:25:40] <FromDiscord> <Rika> beef about to hack nim
[10:26:08] <FromDiscord> <Elegantbeef> Not really hack it as much as make my own "vtable"
[10:41:32] <nrds> <06Prestige99> Is there a way I could just cast that tuple seq to a seq[KeyFrame] without having to use `toKeyFrame` manually on the first element?
[10:41:53] <FromDiscord> <Elegantbeef> Does `var a: seq[Keyframe]` work?
[10:42:20] <nrds> <06Prestige99> Nope
[10:51:29] <nrds> <06Prestige99> This also seems to not prevent some type checking at compile time, hmm. Going to have to keep thinking this over
[11:06:43] <FromDiscord> <Varriount> Anyone know if there's a way to tell the compiler to not resolve a type for a NimNode before being passed into a macro? `untyped` doesn't seem to be doing the trick here.
[11:06:48] <FromDiscord> <Varriount> https://play.nim-lang.org/#ix=3zpy
[11:07:24] <FromDiscord> <Varriount> In reply to @nrds "<Prestige> Is there a": Converter procedures?
[11:08:45] <FromDiscord> <Elegantbeef> Here we go my MVP for variant Vtables 😛 https://play.nim-lang.org/#ix=3zpz
[11:08:56] <FromDiscord> <Elegantbeef> @impbox [ftsf]\:  and prestige you guys probably will be interested
[11:09:06] <FromDiscord> <impbox [ftsf]> nah i was just joking =p
[11:09:15] <FromDiscord> <impbox [ftsf]> haha no that'd be super cool checks
[11:09:30] <FromDiscord> <Varriount> `result = impl[2][2][0][0][0]` - gesundheit
[11:09:39] <FromDiscord> <Elegantbeef> Yea that was done hastily
[11:09:52] <FromDiscord> <Elegantbeef> It's not about doing it properly, it's about sending a message
[11:09:55] <FromDiscord> <Elegantbeef> Quite literally
[11:10:24] <FromDiscord> <Varriount> _imagines @ElegantBeef threatening the compiler with a spanner_
[11:10:28] <nrds> <06Prestige99> :o
[11:10:36] <FromDiscord> <Elegantbeef> Varriount you're doing `static[Grammar]` and passing in a var
[11:10:49] <FromDiscord> <Elegantbeef> change to a constant and doneskii
[11:10:53] <FromDiscord> <Varriount> Yes. Do I need to pass in a const?
[11:11:06] <FromDiscord> <Elegantbeef> `static` is a compile time constant
[11:11:07] <FromDiscord> <Elegantbeef> So yes
[11:11:20] <FromDiscord> <Elegantbeef> Remove static and it also works
[11:11:29] <FromDiscord> <Elegantbeef> Well it will work if you emit a call instead of calling it at compile time
[11:12:00] <FromDiscord> <Varriount> Yay! One tiny step done for NPeg 2.0
[11:13:14] <FromDiscord> <Varriount> The idea is to perform minimal transformation of the PEG DSL, and "run" it with a grammar object in order to record a PEG AST.
[11:13:27] <FromDiscord> <Elegantbeef> The cool thing with that vtable thing is if you uncomment one of the procs it gives you a sort of proper error message 😛
[11:14:05] <FromDiscord> <Elegantbeef> But this does bounce around a lot so i figure it might not be the best for compile time, but alas it works
[11:14:23] <FromDiscord> <Varriount> Elegantbeef: Honestly, proper vtables (especially ones that work with concepts) is one of the few things I think the standard library/language needs.
[11:15:00] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[11:15:12] <FromDiscord> <Elegantbeef> I've toyed with interfaces with the new concepts but i havent looked into implementing vtables
[11:15:32] <FromDiscord> <Elegantbeef> The macro cache is quite powerful though so it makes life fun
[11:16:22] <FromDiscord> <Elegantbeef> And nah i just threaten it by suggesting i'd put more of my code inside of it↵(@Varriount)
[11:16:26] <FromDiscord> <Elegantbeef> Makes it run atleast 10% faster
[11:16:45] *** Joins: max22- (~maxime@2a01cb08833598008dc4cca798d182ee.ipv6.abo.wanadoo.fr)
[11:24:54] <Zevv> Varriout: whazup
[11:25:19] <Zevv> Varriount, that is
[11:27:20] <FromDiscord> <Archion> Hi
[11:27:28] <FromDiscord> <Elegantbeef> Hello
[11:27:35] <FromDiscord> <Archion> I have a good question for you
[11:27:55] <FromDiscord> <Elegantbeef> Just for me?
[11:28:10] <FromDiscord> <Archion> Which is good and why is it good for you? Linux or windows
[11:28:16] <FromDiscord> <Archion> In reply to @Elegantbeef "Just for me?": For everyone
[11:28:39] <FromDiscord> <Rika> depends on your usecasd
[11:28:40] <FromDiscord> <Rika> (edit) "usecasd" => "usecase"
[11:28:58] <FromDiscord> <Archion> Because linux is a poop for me
[11:29:05] <FromDiscord> <cabboose> I need to use windows because my projects are all deployed on windows
[11:29:06] <FromDiscord> <Archion> Or the teacher teaching badly
[11:29:13] <FromDiscord> <Elegantbeef> Well most nim users are linux users afaik
[11:29:51] <FromDiscord> <xflywind> why?
[11:30:36] <FromDiscord> <Rika> why to who
[11:30:48] <FromDiscord> <Elegantbeef> Who to why
[11:30:57] <FromDiscord> <cabboose> WhY tO lIfE
[11:31:21] <FromDiscord> <Rika> ok
[11:31:44] <FromDiscord> <cabboose> Why to who
[11:32:37] <FromDiscord> <xflywind>  https://media.discordapp.net/attachments/371759389889003532/889406169507061790/13.png
[11:32:52] <FromDiscord> <xflywind> https://nim-lang.org/blog/2021/01/20/community-survey-results-2020.html
[11:33:03] <FromDiscord> <impbox [ftsf]> I use windows, but i prefer linux
[11:33:18] <FromDiscord> <Elegantbeef> Quick everyone burn down the vim using windows user
[11:33:20] <FromDiscord> <Rika> "damn those on ios are hardcore huh must be hard developing on an iphone"
[11:33:23] <FromDiscord> <Rika> (i am joking)
[11:33:35] <FromDiscord> <Rika> proceeds to burn beef
[11:33:36] <FromDiscord> <impbox [ftsf]> i do everything in vim and bash on windows
[11:42:48] *** Joins: Vladar (~Vladar@46.162.2.53)
[12:16:24] *** Joins: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de)
[12:16:24] *** Quits: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de) (Changing host)
[12:16:24] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[12:35:58] *** Joins: pro (~pro@user/pro)
[12:36:08] *** Quits: pro (~pro@user/pro) (Client Quit)
[12:45:19] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[12:48:28] *** Joins: neurocyte013 (~neurocyte@ip-213157011203.dynamic.medianet-world.de)
[12:48:28] *** Quits: neurocyte013 (~neurocyte@ip-213157011203.dynamic.medianet-world.de) (Changing host)
[12:48:28] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[12:50:43] <FromDiscord> <Varriount> Sublime Text + PyCharm
[13:00:03] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[13:00:28] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[13:08:56] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[13:24:07] <FromDiscord> <hmmm> Not surprised VScode is so popular, you get most of the essential functionality for a tiny fraction of vim / emacs learning curve
[13:30:35] <NimEventer> New thread by Alexeypetrushin: JsonNode should be Any, see https://forum.nim-lang.org/t/8441
[13:31:20] <FromDiscord> <Rika> What?
[14:02:01] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[14:07:36] <FromDiscord> <haxscramper> In reply to @Rika "What?": 10^10 IQ developers here, don't be surprised
[14:13:38] <FromDiscord> <fae> messing around seeing if i can compile the compiler with emscripten and run it in the browser
[14:14:10] <FromDiscord> <fae>  https://media.discordapp.net/attachments/371759389889003532/889446829186502718/Screen_Shot_2021-09-20_at_2.43.13_AM.png
[14:14:15] <FromDiscord> <fae> it works
[14:15:27] <FromDiscord> <fae> now to figure out how to feed it input and get output
[14:15:37] <FromDiscord> <impbox [ftsf]> awesome
[14:15:52] <FromDiscord> <Yardanico> In reply to @fae "messing around seeing if": yeah I've tried doing this in the past as well but  didn't quite succeed
[14:16:11] <FromDiscord> <Yardanico> like I couldn't get it to actually compile, this is just it outputting help
[14:16:19] <FromDiscord> <Yardanico> it was showing some weird crashes when actually compiling code
[14:16:36] <FromDiscord> <fae> yea im sure there is still a decent amount of work to do
[14:16:51] <FromDiscord> <fae> but i think it would be cool if we had a playground that ran fully in the browser
[14:16:56] <FromDiscord> <enthus1ast> maybe compile to js works, or nimscript
[14:17:32] <FromDiscord> <fae> i tried compiling with js backend first, lots of errors from things not being defined, or throwing errors when trying to be used, like things related to fs
[14:17:41] <FromDiscord> <impbox [ftsf]> i've been meaning to set up nico+nimscript in the browser so you can play around with it live
[14:17:54] <FromDiscord> <impbox [ftsf]> js backend is pretty limited
[14:17:54] <FromDiscord> <fae> that would be very cool
[14:18:18] <FromDiscord> <impbox [ftsf]> beef made a nice script to auto gen nimscript bindings
[14:18:28] <FromDiscord> <impbox [ftsf]> https://github.com/beef331/nimscripter
[14:18:29] <nrds> <12R2D299> 4GitHub: 7"Quick and easy Nim <-> Nimscript interop"
[14:18:32] <FromDiscord> <Yardanico> In reply to @enthus1ast "maybe compile to js": nah, that won't really work
[14:18:46] <FromDiscord> <Yardanico> I mean that it'll be a lot of work to make Nim compiler compile with the JS backend
[14:18:53] <FromDiscord> <Yardanico> a lot
[14:19:19] <FromDiscord> <enthus1ast> compiler/vmconv needs some love
[14:19:33] <FromDiscord> <fae> yea i started to go thru stuff and stub out missing defines and removing some error pragmas and stuff but i didnt really know what i was doing lol
[14:35:59] *** Quits: clemens3 (~clemens@225.40.150.83.ftth.as8758.net) (Quit: WeeChat 2.7)
[14:53:23] <FromDiscord> <tandy> are there any plans for it to eventualy get done?↵(@Yardanico)
[14:53:50] <FromDiscord> <Yardanico> don't think so, haven't seen any discussions about that
[15:09:49] *** Joins: clemens3 (~clemens@225.40.150.83.ftth.as8758.net)
[15:21:35] *** Joins: pro (~pro@user/pro)
[15:26:22] *** Quits: pro (~pro@user/pro) (Client Quit)
[15:30:41] *** Quits: max22- (~maxime@2a01cb08833598008dc4cca798d182ee.ipv6.abo.wanadoo.fr) (Ping timeout: 264 seconds)
[16:03:06] <PMunch> How should I wrap `extern` variables from C? 
[16:03:22] <PMunch> I can't do `extern` in Nim because that's apparently something else..
[16:13:33] *** Quits: rockcavera (~rc@user/rockcavera) (Ping timeout: 265 seconds)
[16:21:52] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[16:25:22] *** Joins: rockcavera (~rc@user/rockcavera)
[16:28:25] *** Joins: max22- (~maxime@2a01cb08833598007475ea3c05333f7b.ipv6.abo.wanadoo.fr)
[16:29:26] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[16:31:00] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[16:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:46:54] <FromDiscord> <deech> In reply to @PMunch "I can't do `extern`": {.exportc.} externs for you.
[16:59:56] <arfy> hmmm. getting an error here.
[17:00:29] <arfy> trying to use the when statement to set an init function based on platform, and it's giving me an expression error.
[17:00:49] <FromDiscord> <Rika> can you elaborate more
[17:00:56] <FromDiscord> <Rika> preferably with code
[17:01:24] <arfy> https://play.nim-lang.org/#ix=3zrf
[17:02:22] <FromDiscord> <Rika> whats the error?
[17:02:51] <arfy> oh... wait... 
[17:03:00] * arfy slaps head.
[17:03:04] <FromDiscord> <Rika> ?
[17:03:07] <FromDiscord> <Rika> xd
[17:03:11] <arfy> type mismatches between nim and C code.
[17:07:20] <arfy> yay
[17:07:32] <arfy> on to the second file now. progress
[17:07:32] <PMunch> @deech, it does?
[17:07:43] <PMunch> Like extern the C keyword
[17:15:24] <FromDiscord> <haxscramper> C extern must be defined in the Nim code actually
[17:15:49] <FromDiscord> <haxscramper> Or it is defined in the c librarary somewhere else
[17:19:40] *** Joins: arkurious (~arkurious@user/arkurious)
[17:19:53] *** Quits: max22- (~maxime@2a01cb08833598007475ea3c05333f7b.ipv6.abo.wanadoo.fr) (Ping timeout: 264 seconds)
[17:25:55] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[17:31:24] <FromDiscord> <auxym> if there's no other way, via {.emit.} I guess? Like the volatile templates: https://github.com/nim-lang/Nim/blob/version-1-4/lib/pure/volatile.nim#L23
[17:32:08] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[17:34:43] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 252 seconds)
[17:35:35] *** Joins: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de)
[17:35:35] *** Quits: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de) (Changing host)
[17:35:35] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[17:37:30] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Client Quit)
[17:39:09] *** Joins: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de)
[17:39:09] *** Quits: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de) (Changing host)
[17:39:09] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[17:39:43] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Client Quit)
[17:41:34] *** Joins: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de)
[17:41:34] *** Quits: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de) (Changing host)
[17:41:34] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[17:47:41] *** Joins: max22- (~maxime@2a01cb0883359800a22f50bb05ce20b5.ipv6.abo.wanadoo.fr)
[17:55:53] <FromDiscord> <levovix> sent a code paste, see https://play.nim-lang.org/#ix=3zrw
[17:57:15] *** Joins: pro (~pro@user/pro)
[17:57:23] <FromDiscord> <ynfle (ynfle)> I don't think so unless the whole thing is passed in to the macro. But you can use for loop macros to insert it before the for loop
[18:03:32] <arfy> yay! code refactor successfull
[18:05:08] <FromDiscord> <haxscramper> In reply to @auxym "if there's no other": `emit` is an `exportc`, but then you would have to actually import the variable in order to use it nim
[18:06:15] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3zrB
[18:06:21] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[18:06:30] <FromDiscord> <haxscramper> Alternative would be `var count {.exportc.}: cint`  (i suppose)
[18:24:54] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2.1)
[18:39:04] <FromDiscord> <isd> Does anyone know how to use registry module to write a key in REG_DWORD ? I can't see to find a way to write anything other than REG_SZ
[18:43:13] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:45:06] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[19:03:28] *** Joins: pro (~pro@user/pro)
[19:11:50] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 246 seconds)
[19:15:09] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2.1)
[19:22:42] <FromDiscord> <isd> oh there is nim-registry as well, it seems to have that functionality
[19:38:02] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[19:57:43] *** Joins: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de)
[19:57:43] *** Quits: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de) (Changing host)
[19:57:43] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[19:57:45] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Client Quit)
[19:58:43] *** Joins: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de)
[19:58:43] *** Quits: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de) (Changing host)
[19:58:43] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[20:21:52] <FromDiscord> <KnorrFG> Hey, how do i convert a string into a set of chracters, but the built in one, not the hashset
[20:22:06] <FromDiscord> <KnorrFG> i couldnt find any conversion function
[20:23:30] <FromDiscord> <Rika> what do you mean?
[20:24:00] <FromDiscord> <KnorrFG> there are two types of sets, the built in one, which is a bitset, and the Hashset in sets. toSet actually converts to a hashSet
[20:24:43] <FromDiscord> <KnorrFG> but I want to have the bitset, because I'll only have 8 valid sets, and want to write a case statement, and use the set literals in there
[20:28:00] <FromDiscord> <KnorrFG> sent a code paste, see https://play.nim-lang.org/#ix=3zsD
[20:30:12] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Ping timeout: 265 seconds)
[20:32:34] <FromDiscord> <Archion> sent a code paste, see https://play.nim-lang.org/#ix=3zsJ
[20:32:41] <FromDiscord> <KnorrFG> no, its supposed to be nim ^^
[20:32:47] <FromDiscord> <Archion> Ohk
[20:33:08] <FromDiscord> <Archion> If you talk about nim language i feel that i'm dumb
[20:36:31] <FromDiscord> <KnorrFG> nvim `Error: selector must be of an ordinal type, float or string`
[20:37:13] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3zsL
[20:37:14] <FromDiscord> <haxscramper> And do the same for other part
[20:37:16] <FromDiscord> <KnorrFG> sent a code paste, see https://play.nim-lang.org/#ix=3zsM
[20:38:08] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3zsN
[20:38:14] <FromDiscord> <haxscramper> A little repetetive on the `in letters` part though
[20:38:18] <nrds> <06Prestige99> Is there a way to write a converter for a seq? I want to convert a seq[(int, float)] to a seq[(float, float)]. My attempts have failed
[20:39:06] <FromDiscord> <KnorrFG> sent a code paste, see https://play.nim-lang.org/#ix=3zsP
[20:41:32] <nrds> <06Prestige99> Or do I have to manually build a new seq, iterating over each tuple
[20:42:16] <FromDiscord> <Krypton> I wanted ask a stupid quesrion
[20:42:30] <FromDiscord> <Krypton> Does nim have support for pointers
[20:42:39] <FromDiscord> <Krypton> (edit) "Does nim have support for pointers ... " 03added "?"
[20:42:54] <FromDiscord> <Rika> yes
[20:43:23] <FromDiscord> <Krypton> Its like dream come true
[20:43:31] <FromDiscord> <Krypton> Python + C
[20:43:39] <FromDiscord> <Krypton> (edit) "Python + C ... " 03added "= Nim"
[20:43:47] <FromDiscord> <Rika> nim does not try to work like python
[20:43:51] <FromDiscord> <Rika> it only looks like it
[20:44:08] <FromDiscord> <fae> pointers are untraced, must be managed manually. refs are also stack allocated but traced by gc
[20:44:19] <FromDiscord> <fae> (edit) "stack" => "heap"
[20:44:22] <FromDiscord> <Krypton> yea , by python , i only mean the small amounts of line you have to code like python
[20:44:33] <FromDiscord> <Rika> i guess so
[20:44:47] <FromDiscord> <fae> (edit) "pointers" => "`pointer`s" | "refs" => "`ref`s"
[20:44:56] <FromDiscord> <Krypton> In reply to @fae "`pointer`s are untraced, must": Gc ? , well manually managing pointers is ok for me cause i know   C
[20:45:15] <FromDiscord> <fae> yes Nim has a few built in gc strategies
[20:45:16] <FromDiscord> <Rika> even if you know C its still recommended to use the GC and red
[20:45:17] <FromDiscord> <Rika> (edit) "red" => "ref"
[20:45:26] <FromDiscord> <Krypton> Ok
[20:45:36] <FromDiscord> <Krypton> In reply to @fae "yes Nim has a": Ok
[20:45:38] <FromDiscord> <Rika> it doesnt have much of a performance impact if youre worried about that
[20:45:58] <FromDiscord> <fae> https://nim-lang.org/docs/gc.html
[20:46:17] <FromDiscord> <Krypton> Well , truth to be said , i dont know nim , i had this question so , i guess i am gonna see youtube videos tutorials abt it
[20:46:23] <FromDiscord> <Krypton> In reply to @fae "https://nim-lang.org/docs/gc.html": Thanks
[20:46:56] <FromDiscord> <Krypton> I heard nim was used in a malware ?
[20:49:49] <FromDiscord> <Archion> ~~Go use assembly~~
[20:50:10] <FromDiscord> <Krypton> apparently C is too hard for and seg faults make me go rant
[20:50:21] <FromDiscord> <Krypton> (edit) "apparently C is too hard for ... and" 03added "me"
[20:50:29] <FromDiscord> <Archion> i like c# and javascript :)
[20:50:45] <FromDiscord> <Krypton> i hate .net framework
[20:50:58] <FromDiscord> <Krypton> just a personal opinion
[20:51:30] <FromDiscord> <Archion> In reply to @Krypton "*i hate .net framework*": I need to learn that in school lol
[20:52:13] <FromDiscord> <Krypton> In reply to @Archion "I need to learn": Yea , like we have to learn Office 365 for 10 years in school
[20:52:27] <FromDiscord> <Archion> Wha-?
[20:52:45] <FromDiscord> <Krypton> In reply to @Archion "Wha-?": Yea
[20:52:49] <FromDiscord> <Krypton> It was hell
[20:53:00] <FromDiscord> <Archion> Epic
[20:53:07] <FromDiscord> <Krypton> Epic ?
[20:53:10] <FromDiscord> <Krypton> 😂
[20:53:17] <FromDiscord> <Archion> Yes :)
[20:53:25] <FromDiscord> <Krypton> No , not epic
[20:53:35] <FromDiscord> <Archion> Sometime i am being rude or idk
[20:53:41] <FromDiscord> <Krypton> https://tenor.com/view/its-time-to-stop-stop-clock-time-gif-5001372
[20:53:57] <FromDiscord> <Krypton> In reply to @Archion "Sometime i am being": They are doing this for 30 years now
[20:54:01] <FromDiscord> <Archion> Imagine the iimagination of image perm
[20:54:11] <FromDiscord> <Archion> (edit) "iimagination" => "imagination"
[20:54:20] <FromDiscord> <Archion> In reply to @Krypton "They are doing this": 🤷‍♂️
[20:54:29] <FromDiscord> <Rika> In reply to @Krypton "*apparently C is too": if you get segfaults easily then yes i recommend using the GC
[20:54:30] <FromDiscord> <Rika> lol
[20:54:32] <FromDiscord> <Krypton> We cant do anything
[20:54:46] <FromDiscord> <Archion> In reply to @Rika "if you get segfaults": Using group chat?
[20:54:48] <FromDiscord> <Archion> Oki
[20:54:55] <FromDiscord> <Krypton> In reply to @Rika "if you get segfaults": Not easily , but lets just say , i get the hardest ones
[20:55:13] <FromDiscord> <Krypton> Fucking sucks to be a C programmer
[20:55:26] <FromDiscord> <Archion> In reply to @Rika "if you get segfaults": Segfaults word made me laugh
[20:55:38] <FromDiscord> <Rika> its not that bad but theres a lot of features you're just absolutely used to in higher level languages
[20:55:44] <FromDiscord> <Rika> a lot of missing features
[20:55:56] <FromDiscord> <Archion> I have a question
[20:56:01] <FromDiscord> <Rika> i mean of course since it's a language probably older than both of you two
[20:56:01] <FromDiscord> <Krypton> I wonder if you can create polymorphic engines in C
[20:56:15] <FromDiscord> <Krypton> In reply to @Rika "i mean of course": true
[20:56:17] <FromDiscord> <Archion> If i want to make a 3d game then C or C++ or C# should i use?
[20:56:22] <FromDiscord> <Krypton> (edit) "C" => "nim"
[20:56:23] <FromDiscord> <Rika> if you can make it in one lang you can make it in C, just depends on how much time youre willing to invest
[20:56:46] <FromDiscord> <Rika> this is a nim server and channel, i wont answer general programming questions like that
[20:56:46] <FromDiscord> <Krypton> In reply to @Archion "If i want to": Unreal Engine
[20:56:51] <FromDiscord> <Krypton> Or else forget
[20:57:18] <FromDiscord> <Archion> In reply to @Krypton "Unreal Engine": I want to use Unity :-)
[20:57:21] <FromDiscord> <Krypton> In reply to @Rika "this is a nim": Ok i guess , i was asking if its possible to create polymorphic engines in Nim
[20:57:32] <FromDiscord> <Krypton> In reply to @Archion "I want to use": Your choice
[20:57:44] <FromDiscord> <Krypton> Self modifying code
[20:57:54] <FromDiscord> <Krypton> I am interested in that
[20:58:02] <FromDiscord> <Archion> Hack discord with Nim
[20:58:04] <FromDiscord> <Archion> Imagine
[20:58:15] <FromDiscord> <Rika> In reply to @Krypton "Ok i guess ,": i meant that for archion
[20:58:24] <FromDiscord> <Krypton> In reply to @Rika "i meant that for": Oh ok
[20:58:31] <FromDiscord> <Rika> In reply to @Archion "Hack discord with Nim": if you are developing malware then i shall not entertain your questions
[20:58:51] <FromDiscord> <Archion> I won't make a malware
[20:58:56] <FromDiscord> <Krypton> In reply to @Rika "if you are developing": Malware ? i shall no do such a thing
[20:59:01] <FromDiscord> <Krypton> Never
[20:59:22] <FromDiscord> <Rika> im suspicious of you two but i feel like neither of you could do it anyway so /shrug
[20:59:22] <FromDiscord> <Archion> Maybe i will try to make something and get free nitro forever
[20:59:36] <FromDiscord> <Archion> In reply to @Rika "im suspicious of you": ¯\\_(ツ)\_/¯
[20:59:49] <FromDiscord> <Krypton> In reply to @Rika "im suspicious of you": I made a bootloader in asm and a r , leave that
[20:59:58] <FromDiscord> <Krypton> (edit) "," => ".....,"
[21:00:27] <FromDiscord> <Krypton> are you sure ?
[21:00:48] <FromDiscord> <Archion> In reply to @Krypton "I made a bootloader": What is asm? 😆
[21:01:00] <FromDiscord> <Krypton> In reply to @Archion "What is asm? 😆": x86 Assembly
[21:01:12] <FromDiscord> <Archion> :l
[21:01:17] <FromDiscord> <linux user> bruh
[21:01:22] <FromDiscord> <Archion> Ok you are too smart
[21:01:38] <FromDiscord> <Krypton> In reply to @Archion "Ok you are too": It was joke ?
[21:01:46] <FromDiscord> <Krypton> Dont take it seriously pls ?
[21:01:55] <FromDiscord> <Archion> Ok?
[21:02:01] <FromDiscord> <Krypton> Thanka
[21:02:10] <FromDiscord> <Archion> But they are smart
[21:02:16] <FromDiscord> <Krypton> In reply to @Archion "But they are smart": Who ?
[21:02:31] <FromDiscord> <Krypton> I mean
[21:02:48] <FromDiscord> <Archion> Rika#2434 for example
[21:02:56] <FromDiscord> <Krypton> I can write assembly and have written a bootloader in assembly , :)
[21:03:20] <FromDiscord> <Archion> Imagine making own operating system
[21:03:36] <FromDiscord> <Krypton> In reply to @Archion "*Imagine making own operating": I am trying
[21:03:38] <FromDiscord> <Krypton> https://github.com/Krypton279/Blakernel
[21:03:40] <nrds> <12R2D299> 4GitHub: 7"A kernel built by 2 strangers"
[21:03:42] <FromDiscord> <Archion> In reply to @Archion "*Imagine making own operating": Ok its impossible for my small brain
[21:04:17] <FromDiscord> <Krypton> In reply to @Archion "Ok its impossible for": It seems impossible for me aswell but i am making small progress , memory management sucks , you know ?
[21:04:53] <FromDiscord> <Krypton> @linux user is that fidel castro or che guevara or richard stallman in your pfp ?
[21:06:36] <FromDiscord> <@bracketmaster-5a708063d73408ce4> is there a way to conditionally import something in nim at compiletime?
[21:07:00] <FromDiscord> <Rika> yes
[21:07:04] <FromDiscord> <Rika> depends on your condition
[21:07:21] <FromDiscord> <Smarc> sent a code paste, see https://play.nim-lang.org/#ix=3zt1
[21:07:32] <FromDiscord> <Recruit_main707> In reply to @Rika "depends on your condition": thats how conditions work :p
[21:07:45] <FromDiscord> <Rika> thats not what i mean by depends
[21:07:50] <FromDiscord> <linux user> In reply to @Krypton "<@751471979282038954> is that fidel": ricahrdstallmen
[21:07:59] <FromDiscord> <Krypton> In reply to @richard stallmen(crazy GNU guy) "ricahrdstallmen": Ok
[21:08:06] <FromDiscord> <Rika> In reply to @Smarc "Hey, I have the": prolly compile with  --app:gui
[21:08:07] <FromDiscord> <Recruit_main707> In reply to @Rika "thats not what i": i know i know, dont worry
[21:08:35] <FromDiscord> <@bracketmaster-5a708063d73408ce4> @\_discord\_259277943275126785\:t2bot.io - my condition can be evaluated at compiletime
[21:08:48] <FromDiscord> <Rika> okay
[21:08:55] <FromDiscord> <Rika> `when condition: import xxx`
[21:08:57] <FromDiscord> <Smarc> In reply to @Rika "prolly compile with ": does not change anything :/
[21:09:10] <FromDiscord> <@bracketmaster-5a708063d73408ce4> ok thx
[21:09:15] <FromDiscord> <Rika> huh i thought --app:gui doesnt keep the terminal open
[21:09:27] <FromDiscord> <Rika> or did i misunderstand something
[21:09:36] <FromDiscord> <Rika> are you running the binary by doubleclicking on it or w/e
[21:09:40] <FromDiscord> <Rika> not on the terminal is what i mean
[21:09:53] <FromDiscord> <Rika> OH
[21:09:54] <FromDiscord> <Rika> wait
[21:09:56] <FromDiscord> <Smarc> What I want is the program to play a sound anytime a key is pressed, systemwide
[21:10:07] <FromDiscord> <Rika> you need to swap how you manage keypresses then
[21:10:33] <FromDiscord> <Rika> idk windows so sorry
[21:10:38] <FromDiscord> <Smarc> I figured that getch() is the bottleneck here. I tried playing around with illwill, but I did not make it wait for a keypress, it just runs the loops
[21:10:43] <FromDiscord> <Smarc> I'm a Linux user
[21:10:50] <FromDiscord> <Rika> oh its linux?
[21:10:54] <FromDiscord> <Rika> getch is only on the term
[21:11:14] <FromDiscord> <Smarc> so I need to somehow hook keypresses or sth, right?
[21:11:26] <FromDiscord> <Rika> yeah pretty much
[21:11:43] <FromDiscord> <Smarc> You got some hints for that maybe? Never worked on that lowlevel
[21:12:20] <FromDiscord> <Rika> XKB
[21:12:36] <FromDiscord> <Rika> prolly
[21:12:37] <FromDiscord> <Rika> /usr/share/X11/xkb/
[21:12:50] <FromDiscord> <Rika> or evdev?
[21:12:57] <FromDiscord> <Rika> https://en.wikipedia.org/wiki/Evdev
[21:13:41] <FromDiscord> <Rika> evdev if you want to go really really low but make it work no matter the display server i guess
[21:14:16] *** Joins: rockcavera (~rc@192.12.114.205)
[21:14:16] *** Quits: rockcavera (~rc@192.12.114.205) (Changing host)
[21:14:16] *** Joins: rockcavera (~rc@user/rockcavera)
[21:28:01] *** Joins: neurocyte013 (~neurocyte@ip-213157011203.dynamic.medianet-world.de)
[21:28:01] *** Quits: neurocyte013 (~neurocyte@ip-213157011203.dynamic.medianet-world.de) (Changing host)
[21:28:01] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[21:29:02] <FromDiscord> <fae> yea you need system wide keypresses which is a pain to do cross platform
[21:35:11] <FromDiscord> <Smarc> well I'm fine if it is just linux
[21:35:29] <FromDiscord> <Smarc> I found some nim "keyloggers", but most of them are pretty windows-y
[21:48:48] <FromDiscord> <fae> In reply to @Smarc "I found some nim": some googling revealed https://github.com/kwhat/libuiohook which seems promising
[21:48:50] <nrds> <12R2D299> 4GitHub: 7"A multi-platform C library to provide global keyboard and mouse hooks from userland."
[21:53:07] <FromDiscord> <Smarc> Thank you for your effort, but I fear translating/importing that to nim is way above my competence
[21:55:54] <FromDiscord> <fae> the API is relatively minimal, it would be a good opportunity to learn some FFI 🙂 Nim makes FFI really easy
[21:56:28] <FromDiscord> <fae> and there are a dozens of nim wrapped c libraries for reference
[21:58:45] <FromDiscord> <frankzig> are there `seq`'s with custom indexing? arrays are unfortunately only stack allocated and compile time
[21:58:55] <FromDiscord> <frankzig> (as far as I understand)
[22:02:33] <FromDiscord> <Rika> No
[22:03:52] <NimEventer> New question by victorzki: Nim: `Unable to process type: nnkBracketExpr` when unmarshal to type with Table[string, seq[string]], see https://stackoverflow.com/questions/69258617/nim-unable-to-process-type-nnkbracketexpr-when-unmarshal-to-type-with-table
[22:04:23] <FromDiscord> <Alea> In reply to @frankzig "are there `seq`'s with": Can't you just transform your custom indexing into standard indexing before using it in the seq?
[22:08:11] *** Joins: jemt (~nordic@212.247.248.169)
[22:11:27] <jemt> hi, would this be a valid definition of a "dictionary" in Nim: Table[string, seq[string]] ? I'm trying to unmarshal a json object using to() but getting an exception "Unable to process type: nnkBracketExpr"
[22:26:44] <FromDiscord> <krisppurg> jemt, what is the json data?
[22:27:12] <FromDiscord> <krisppurg> (edit) "data?" => "data that you are trying unmarshalize"
[22:30:51] <FromDiscord> <Gumber> Unmatshalize 😂
[22:31:03] <FromDiscord> <Gumber> (edit) "Unmatshalize" => "Unmarshalize"
[22:31:44] <FromDiscord> <Gumber> Bet that was autocorrect
[22:32:27] <FromDiscord> <Gumber> I would expect that to unmarshal into a map and list
[22:32:43] <FromDiscord> <Gumber> Well a map with a string key and a list value
[22:33:24] <FromDiscord> <Gumber> But unable to process type and NK bracket expression sounds to me like the serialized to Jason macro is having difficulty with something in your data type
[22:33:38] <FromDiscord> <Gumber> And since it's a standard library data type I don't know
[22:33:51] <FromDiscord> <Gumber> What version of nim are you on
[22:34:14] <jemt> krisppurg it's something like this: "features": { "featureA": ["a","b"], "featureB": [] ... } 
[22:34:22] <FromDiscord> <Gumber> (edit) "serialized" => "serialize" | "Jason" => "Json"
[22:34:40] <jemt> thank's for the clarification of the spelling guys haha
[22:34:44] <FromDiscord> <fae> jemt check out this minimal example https://play.nim-lang.org/#ix=3ztB
[22:34:57] <FromDiscord> <fae> is this something like you mean?
[22:35:27] <FromDiscord> <fae> and can you post some example code
[22:35:30] <FromDiscord> <Gumber> I'd be very surprised if this didn't work and it wasn't user error
[22:35:45] <FromDiscord> <Gumber> Unless there's some super nasty regression in the Jason module
[22:36:01] <FromDiscord> <Gumber> Sorry I'm using text to speech on my phone so there's like no grammar or proper punctuation
[22:36:05] <jemt> fae sure, I'll create a snippet.. hold on
[22:36:51] <FromDiscord> <fae> also i havent really used std/json much, i've been using treeforms jsony lib
[22:41:56] <FromDiscord> <Gumber> If I have the time and bandwidth at work I'm going to see if I can find a way to speed up Jason's serialization using Nim by calling into it from elixir
[22:42:31] <jemt> fae here you go: https://play.nim-lang.org/#ix=3ztG - that works though, that's strange... 
[22:42:45] <FromDiscord> <Gumber> There's a C ibrary already for elixir that has a interface composed of NIFs or native implemented functions which is elixirs form of interop
[22:42:45] <jemt> turned out that my nim version is 0.17.2 
[22:43:05] <FromDiscord> <Gumber> And it's faster than the library we use which is a pure elixir implementation
[22:43:26] <FromDiscord> <Gumber> But since Nim was approved at work I'm going to see if I can speed up Json serealization with it
[22:43:37] <FromDiscord> <Gumber> That's a really really old version of Nim
[22:43:43] <FromDiscord> <Gumber> How did you install that
[22:43:49] <FromDiscord> <Gumber> Your operating systems package manager
[22:43:52] <FromDiscord> <Gumber> ?
[22:44:02] <jemt> yep... apt-get
[22:44:35] <FromDiscord> <Gumber> Yeah I don't do that
[22:44:46] <FromDiscord> <Gumber> (edit) 04removed "I"
[22:44:53] <jemt> note to self that I shouldn't do that either
[22:44:55] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[22:44:57] <jemt> hehe
[22:45:05] <FromDiscord> <Gumber> Either building install from source or download or use choose Nim but never install from package managers
[22:45:20] <FromDiscord> <Gumber> (edit) "building" => "build and"
[22:46:17] <FromDiscord> <Gumber> There's no obligation from the maintainers of the package distribution list to make sure the latest version of NIM is on them and name supports almost every operating system and platform under the sun so the only way Nim distributions get updated is if someone uses them and wants them updated
[22:46:40] <FromDiscord> <Gumber> (edit) "name" => "Nim"
[22:46:46] <FromDiscord> <Gumber> In other words ain't nobody got time for that
[22:47:00] <jemt> Ah, alright
[22:47:44] <FromDiscord> <Gumber> Depending on your level of experience with compilers programming languages build systems operating systems etc the route you install them that is optimal will differ
[22:47:51] <FromDiscord> <Gumber> If you are new you should use choose Nim
[22:48:05] <FromDiscord> <Gumber> If you know your way around your operating systems environment downloading binaries and distributions is probably the easiest route to go
[22:48:32] <FromDiscord> <Gumber> If you are comfortable with the terminal command line C and C++ compilers and everything else that name relies on manual building from source is probably the best route
[22:49:08] *** Joins: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de)
[22:49:08] *** Quits: neurocyte013 (~neurocyte@IP-213157011203.dynamic.medianet-world.de) (Changing host)
[22:49:08] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[22:49:58] <FromDiscord> <Gumber> Also if you plan on hacking on the name compiler or anything like that then you would want to manually build an install too
[22:50:20] <FromDiscord> <Gumber> Name == Nim my phone is just stupid
[22:50:40] <FromDiscord> <fae> Gumber is specifically talking about the CLI tool `choosenim` if that wasn't clear, text to speech doesnt do programmer talk very well lol
[22:50:52] <FromDiscord> <Gumber> Not at all
[22:50:55] <FromDiscord> <fae> (edit) "Gumber is specifically talking about the CLI tool `choosenim` if that wasn't clear, ... text" 03added "speech to" | 04removed "to speech"
[22:51:01] <FromDiscord> <Gumber> Google's NLP is weak sauce
[22:51:23] <jemt> haha
[22:51:32] <jemt> thanks for helping out guys
[22:52:13] <FromDiscord> <Goel> sent a long message, see http://ix.io/3ztK
[22:52:22] <FromDiscord> <fae> while you're at it though do also look into jsony if you're comfortable using things outside of stdlib, it's much faster
[22:52:27] <jemt> I guess I'll go for the binaries, I just started to play around with nim this afternoon so no hacking on the compiler in sight for me in a while I guess
[22:52:47] <jemt> oh ok, I'll check that out! thanks
[22:53:07] <FromDiscord> <Goel> (edit) "long message," => "code paste," | "http://ix.io/3ztK" => "https://play.nim-lang.org/#ix=3ztM"
[22:54:34] *** Quits: jemt (~nordic@212.247.248.169) (Quit: Leaving)
[22:54:41] *** Quits: max22- (~maxime@2a01cb0883359800a22f50bb05ce20b5.ipv6.abo.wanadoo.fr) (Ping timeout: 264 seconds)
[23:19:20] *** Joins: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net)
[23:22:07] <FromDiscord> <Gumber> Yeah don't get me wrong choose nim is fine but it does mean installing an additional binary on your machine and it expects a certain directory structure to be present on your machine to work
[23:22:36] <FromDiscord> <Gumber> The main advantage of it is being able to seamlessly switch between multiple installations of NIM and install new versions via the CLI
[23:22:51] <FromDiscord> <Gumber> But if you're not going to take advantage of any of that it's probably overkill
[23:23:39] <FromDiscord> <Gumber> Also learning how to install NIM manually and learning about some of the tooling that comes with an install isn't a bad idea because if you ever run into a compiler crash and need to gather debug information understanding how koch temp works is important
[23:28:30] *** Joins: max22- (~maxime@2a01cb0883359800f35acda3ecfc604d.ipv6.abo.wanadoo.fr)
[23:32:21] <FromDiscord> <fae> In reply to @Goel "Is there a procedure": like https://nim-lang.org/docs/sequtils.html#count%2CopenArray%5BT%5D%2CT ?
[23:44:23] <FromDiscord> <Kiloneie> Does anyone use IntelliJ IDEA for Nim ?
[23:44:39] <FromDiscord> <Gumber> better question is
[23:44:49] <FromDiscord> <Gumber> does anyone like intellij ide?
[23:45:01] <FromDiscord> <Kiloneie> idk, i only used pycharm from them before
[23:45:13] <FromDiscord> <Gumber> those IDEs are only useful if you're using them with the languages they're inteded to be used with
[23:45:22] <FromDiscord> <Gumber> and I mean PyCharm is about as useful as notepad
[23:45:38] <FromDiscord> <Gumber> I guess the one feature that was nice for pycharm was being able to attach to the python process running inside of a docker container
[23:45:41] <FromDiscord> <Gumber> even remotely
[23:45:57] <FromDiscord> <Gumber> but that was probably the only feature I found useful that I couldn't replicate in an editor
[23:46:12] <FromDiscord> <Gumber> other than that - I think people who use IDEs like intellij for languages like Nim are a bit silly
[23:46:23] <FromDiscord> <Gumber> they must like wasting gigabytes of ram for no real reason
[23:46:50] <FromDiscord> <Kiloneie> Fair enough
[23:47:11] <FromDiscord> <Kiloneie> used to be IDEs for everyone before VS Code and the likes
[23:47:19] <FromDiscord> <Kiloneie> very laggy
[23:47:31] <FromDiscord> <Gumber> huh?
[23:47:35] <FromDiscord> <Gumber> no it didn't
[23:47:45] <FromDiscord> <Gumber> people have been using vim and emacs to write code for decades
[23:47:49] <FromDiscord> <Gumber> not quite sure what you're talking about
[23:48:21] <FromDiscord> <Kiloneie> well sure, but i used videos to learn back then and NOBODY used a code editor in the ones i watched
[23:48:26] <FromDiscord> <Gumber> IDEs got popular around the same time object oriented programming did
[23:48:46] <FromDiscord> <Gumber> probably because you watched videos about programming from people who were new to programming
[23:48:57] <FromDiscord> <Gumber> and thought using an IDE was a good idea / mandatory or something
[23:49:18] <FromDiscord> <Gumber> unless someone is like trying to make money teaching or something, good programmers don't generally spend their time making youtube videos
[23:49:28] <FromDiscord> <Gumber> they generally spend their time programming 🙂
[23:50:10] <FromDiscord> <fae> every time i open up xcode i die
[23:50:26] <FromDiscord> <Gumber> oh yeah xcode is a effing nightmare
[23:50:32] <FromDiscord> <Gumber> it's like - hey visual studio wasn't bad enough
[23:50:43] <FromDiscord> <Gumber> let's see if we can ramp this UI hell up
[23:51:03] <FromDiscord> <fae> VS was sooo expensive back then too
[23:51:05] <FromDiscord> <Gumber> like anyone who prefers an IDE to an editor is crazy to me
[23:51:09] <FromDiscord> <Gustavo6046> inb4 Nim for DOS
[23:51:21] <FromDiscord> <fae> i remember my dad having a subscription to msdn in the 90s and it costing an arm and a leg
[23:51:25] <FromDiscord> <Gumber> you really like navigating overly complex user iterfaces and clicking on buttons to do everything?
[23:51:41] <FromDiscord> <Gumber> memorizing a billion applicaton specific shortcuts is fun to you?
[23:51:43] <FromDiscord> <Gumber> okay!
[23:51:59] <FromDiscord> <Gumber> In reply to @Gustavo6046 "inb4 Nim for DOS": what does that have to do with anything?
[23:52:06] <FromDiscord> <fae> i actually really like vscode 🤷
[23:52:07] <FromDiscord> <Gustavo6046> it'd be fun
[23:52:10] <FromDiscord> <Gumber> we're talking about IDEs and operating systems
[23:52:13] <FromDiscord> <Gumber> editors I mean
[23:52:14] <FromDiscord> <Gumber> not operating systems
[23:52:19] <FromDiscord> <fae> i feel like MS turned it around with vsc
[23:52:36] <FromDiscord> <Gumber> In reply to @Gustavo6046 "it'd be fun": that's pretty subjective, but sure
[23:52:54] <FromDiscord> <Gumber> In reply to @fae "i feel like MS": I don't think it was VSC I think it was .NET core
[23:52:59] <FromDiscord> <Gumber> and all the work on mono etc
[23:53:24] <FromDiscord> <Gumber> once they had the ability to target linux and mac with their runtime
[23:53:29] <FromDiscord> <fae> oh sure, .net was huge, i was only talking about IDEs
[23:53:39] <FromDiscord> <Gumber> all their software got way better and then we got VS for mac and linux and vscode followed
[23:53:47] <FromDiscord> <Gumber> but vscode was all possible because of electron
[23:53:55] <FromDiscord> <Gumber> well I mean .NET has been around for a long time
[23:54:03] <FromDiscord> <Gumber> like the CLR has been around since I started programming
[23:54:12] <FromDiscord> <Gumber> but it was a windows only thing for a long time
[23:54:29] <FromDiscord> <Gumber> now they have .NET core and can run .NET applications on the three major operating systems
[23:54:44] <FromDiscord> <Gumber> but it doesn't solve the cross platform UI issue
[23:54:52] <FromDiscord> <Gumber> so that's where electron comes in
[23:55:11] <FromDiscord> <Gumber> so it was like a confluence of things that happened
[23:55:12] <FromDiscord> <fae> two projects that initially drew me into nim were nimx and fidget
[23:55:19] <FromDiscord> <fae> i think nim is well positioned to take on the cross platform UI story
[23:55:37] <FromDiscord> <Gumber> I disagree and have voiced my vocal opposition to fidget's design
[23:55:37] <FromDiscord> <fae> i think treeform has a nice vision for fidget
[23:55:38] <FromDiscord> <Gumber> and why I think it's bad
[23:55:47] <FromDiscord> <Gumber> but others disagree which is fine
[23:55:53] <FromDiscord> <Gumber> I just don't think it's going anywhere
[23:55:59] <FromDiscord> <Gumber> it doesn't really solve the problem anyway
[23:56:22] <FromDiscord> <Gustavo6046> yes, subjective
[23:56:40] <FromDiscord> <Gustavo6046> it wouldn't be objectively good and there are definitely more important efforts to pursue
[23:56:42] <FromDiscord> <Gustavo6046> nonetheless it'd be interesting
[23:56:48] <FromDiscord> <Gumber> again subjective 🙂
[23:57:19] <FromDiscord> <fae> how do you feel about the nimx project
[23:58:49] <FromDiscord> <Gumber> again I don't think it really is going to go anywhere and it doesn't solve the problem
[23:59:04] <FromDiscord> <Gumber> look the problem with both of those libraries is they are tightly coupled with certain technologies
[23:59:11] <FromDiscord> <Gumber> they're not agnostic which is a huge design flaw
[23:59:23] <FromDiscord> <Gumber> a UI library should handle managing the UI
[23:59:31] <FromDiscord> <Gumber> it shouldn't be responsible for drawing it
[23:59:38] <FromDiscord> <Gumber> that's a separate task and responsibliity
[23:59:43] <FromDiscord> <Gumber> and should be treated as such
[23:59:57] <FromDiscord> <Gumber> what if I want to use Direct3d to draw my API or Vulkan or Cairo?
