[00:01:51] *** Quits: DSpider (~DSpider@82.79.237.112) (Quit: Leaving)
[00:03:48] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[00:03:57] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Ping timeout: 240 seconds)
[00:06:34] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:20:29] <BurumaSerafuku> XML is usually annoying. when is it RIGHT anyway, imMute?
[00:21:02] <BurumaSerafuku> the only reason I use XML now is because some damned site/service forces me to use it
[00:21:20] <imMute> BurumaSerafuku: typically when exchanging data with other entities.   it's great in that it has a schema language and validation built right in
[00:21:47] <imMute> there's even a binary encoding format if the verbosity of text is too much, but it's hardly ever used unfortunately :(
[00:22:16] *** Joins: ravan__ (~ravan@user/ravan)
[00:23:22] *** Quits: proller (~p@2a02:6b8:b081:12::1:2e) (Ping timeout: 268 seconds)
[00:24:32] *** Quits: ravan_ (~ravan@user/ravan) (Ping timeout: 240 seconds)
[00:26:00] *** Inline__ is now known as Inline
[00:33:23] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[00:34:50] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (Remote host closed the connection)
[00:35:07] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[00:35:59] *** Joins: proller (~p@80.240.216.69)
[00:36:02] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[00:36:56] *** Joins: Terminus (~null@user/terminus)
[00:43:31] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[00:43:47] *** Quits: Tokamak (~Tokamak@172.58.188.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:45:03] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Quit: leaving)
[00:45:18] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[00:53:16] *** Joins: jokoon (~eio@2a01:e0a:542:e160:dcc8:59eb:de9:4002)
[01:04:04] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[01:11:16] *** Quits: jokoon (~eio@2a01:e0a:542:e160:dcc8:59eb:de9:4002) (Quit: Leaving)
[01:19:08] <kalven> LordKalma: did you do that r/cpp poll?
[01:21:30] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:22:21] *** Joins: gehn (~gehn@user/gehn)
[01:22:41] *** leonardus is now known as L30n4rdu5
[01:24:57] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Read error: Connection reset by peer)
[01:25:57] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Remote host closed the connection)
[01:32:22] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[01:32:43] *** Joins: pulse_ (~pulse@user/pulse)
[01:36:02] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[01:39:45] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:39:49] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[01:40:49] *** Joins: luizfrds (~Luiz@152.250.243.147)
[01:41:14] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:22] *** ChanServ sets mode: +v npaperbot
[01:43:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:50:46] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[01:57:37] *** Quits: Itaru (~Itaru@185.65.135.251) (Ping timeout: 240 seconds)
[02:00:43] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:03:19] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[02:04:18] *** Joins: proller (~p@2a02:6b8:b081:8814::1:f)
[02:10:16] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Read error: Connection reset by peer)
[02:11:03] <PJBoy> well, used git for the first time in a while
[02:12:17] <PJBoy> and as per usual I've gotten to the point where renaming the directory, cloning a new repo, copy pasting changed files over, and deleting the old repo, is the seemingly best way to continue
[02:12:39] <PJBoy> I dunno what you guys see in it
[02:12:57] <pulse_> that's what i do when there's a merge conflict
[02:13:45] <pulse_> really git is just a glorified diff
[02:17:32] <PJBoy> idk man
[02:18:04] <PJBoy> diffs don't complain at me about merge conflicts when the local and remote are verbatim identical
[02:18:09] <imMute> shared_ptr is just a glorified new/delete
[02:19:01] <kalven> for my personal projects, it's mostly just a way to back things up to github
[02:19:12] <kalven> no branches, nothing fancy
[02:19:50] *** Quits: Kebianizao (~Kebianiza@188.127.160.11) (Read error: Connection reset by peer)
[02:20:28] <PJBoy> I miss google code :(
[02:20:55] <kalven> why?
[02:21:09] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:bc04:150b:5ca9:e842) (Ping timeout: 268 seconds)
[02:22:54] <johnny> i sure don't..
[02:23:05] <johnny> the interface was legit worse than github
[02:23:23] <PJBoy> it supported svn
[02:23:29] <johnny> i don't miss svn
[02:23:40] <johnny> heck.. i even used a vcs preceding git to avoid svn
[02:23:52] <PJBoy> it supported git too IIRC
[02:24:04] <PJBoy> or am I thinking of github from ~2010
[02:24:05] <johnny> sure, but the web interface was not as good
[02:24:29] <johnny> when forced to use svn to contribute to some FOSS project, I'd use git's svn plugin
[02:24:43] <PJBoy> github ui isn't good
[02:24:51] <johnny> well it's certainly not great
[02:24:56] <PJBoy> and I don't remember google code being bad
[02:25:03] <kalven> I used darcs before git
[02:25:04] <johnny> but even initially it as better than google code
[02:25:10] <johnny> i used monotone before git
[02:25:37] <johnny> fossil is pretty similar to monotone i'd say
[02:26:18] <johnny> some folks used bzr in the in between.. but turns out only launchpad kept the bzr torch going
[02:26:32] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:11ea:447f:a0ba:3629)
[02:26:48] <johnny> i liked how bzr would give you the synthesized revision number
[02:27:09] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:27:27] <johnny> not something you could rely on as a public version, but it was nice to see for local repos
[02:27:56] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[02:29:02] *** Joins: Kebianizao (~Kebianiza@188.127.160.11)
[02:30:17] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:31:10] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[02:31:30] <pulse_> it's weird to me that github supports svn
[02:33:48] <pulse_> that would be like the dinosaur museum also double as a night club
[02:34:21] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[02:34:42] <johnny> because supporting it isn't that hard probably
[02:34:55] <ville> pulse_: try sticking some binary data which evolves over time in git
[02:35:22] <johnny> i wonder how git lfs is for that
[02:35:29] <johnny> i've never used it myself so i can't say
[02:36:41] *** Joins: markong (~kvirc@213.146.188.203)
[02:37:07] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:38:00] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Read error: Connection reset by peer)
[02:38:17] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:40:28] *** Joins: ferdna (~ferdna@user/ferdna)
[02:41:04] *** Joins: Tokamak (~Tokamak@172.58.188.238)
[02:42:13] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[02:42:59] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:1619:ead6:822:30d1) (Remote host closed the connection)
[02:43:46] *** Quits: magla (~gelignite@55d4c25e.access.ecotel.net) (Quit: Stay safe!)
[02:44:41] *** Quits: AmR (~AmREiSa@156.199.9.4) (Quit: Konversation terminated!)
[02:45:44] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:47:50] *** Joins: KombuchaKip (~kip@192.252.230.5)
[02:49:15] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:50:05] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[02:50:16] *** Quits: Kebianizao (~Kebianiza@188.127.160.11) (Ping timeout: 256 seconds)
[02:55:06] *** Joins: Kebianizao (~Kebianiza@188.127.160.11)
[02:55:53] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[03:07:44] <very_sneaky> PJBoy: what are you doing that requires all the steps you listed? renaming directory, cloning new repo, copy pasting files, deleting old repo?
[03:08:10] <very_sneaky> `git init` in your existing project couldn't initialise git version control for you?
[03:11:06] *** Quits: proller (~p@2a02:6b8:b081:8814::1:f) (Ping timeout: 268 seconds)
[03:11:34] <lru> PJBoy: https://jwiegley.github.io/git-from-the-bottom-up/ if you want to understand git
[03:11:36] *** Joins: Itaru (~Itaru@185.65.135.251)
[03:13:37] *** Quits: Tokamak (~Tokamak@172.58.188.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:19:14] <PJBoy> I tried to do a commit amend and I ended up in a weird merge conflict state that I couldn't get out of
[03:19:40] <very_sneaky> if you'd already pushed it, then you would have been changing the commit hash
[03:19:46] <PJBoy> it wanted me to do a pull, and when I did it gave merge conflicts, and I did a reset hard
[03:19:56] <PJBoy> and that wasn't good enough
[03:20:12] <very_sneaky> so you would have a new commit in your local repo (the ammended one), and the old commit on the remote, so there would be a divergence in the head
[03:20:18] <very_sneaky> you have to `git push -f`
[03:20:39] <Friithian> taking a class that I'll be doing more C++, from the same prof as last year. Get ready for me to bring up weird and confusing things that make no sense
[03:20:41] <PJBoy> couldn't commit because I needed to pull
[03:20:48] <PJBoy> and pulling gave me merge conflicts
[03:20:50] <very_sneaky> you mean you couldn't push
[03:21:22] <PJBoy> uhh, yeah surely
[03:21:30] <very_sneaky> the path forward in that case could certainly be clearer, but yeah the solution is `git push -f`
[03:21:41] <very_sneaky> `git add .; git commit --amend; git push -f`
[03:22:30] <very_sneaky> `git status` would be telling you something like "your branch is 1 commit behind, 1 commit ahead of origin/branch"
[03:22:49] <PJBoy> ok that actually makes a lot of sense now
[03:23:11] <PJBoy> thanks! hahaha
[03:23:17] <very_sneaky> no stress :P
[03:23:19] <PJBoy> I'll try to use that knowledge next time
[03:23:51] *** Quits: mIGu (mig21@user/naur) (Remote host closed the connection)
[03:23:52] *** Joins: proller (~p@80.240.216.69)
[03:24:26] <very_sneaky> there's actually a pretty good git choose your own adventure site that i found that I've found useful for giving me a path forward for a number of hairy git situations: https://sethrobertson.github.io/GitFixUm/fixup.html
[03:24:40] *** Joins: mIGu (~mig21@user/naur)
[03:24:48] <very_sneaky> not sure it addresses that one specifically though
[03:25:03] * PJBoy bookmarks
[03:25:35] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:27:12] *** Joins: Hashida (~Itaru@185.65.135.251)
[03:28:02] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[03:29:23] <very_sneaky> normally, especially on shared repos, `git commit --amend` on a commit that's already been pushed to the remote is discouraged precisely because it re-writes history and will give other people issues when they try to pull
[03:29:45] <very_sneaky> in that case it's usually better to make a positive commit to fix the problem, keeps the history nice and linear
[03:29:56] *** Quits: Itaru (~Itaru@185.65.135.251) (Ping timeout: 256 seconds)
[03:30:21] <very_sneaky> having said that, if you haven't pushed a commit and it's still in your local repo then it's a fine approach, and perhaps even preferred to minimise the clutter of small changes in the git history
[03:30:36] *** Joins: Itaru (~Itaru@185.65.135.251)
[03:32:01] *** Quits: Hashida (~Itaru@185.65.135.251) (Ping timeout: 256 seconds)
[03:32:27] <ashafq> I am getting an sefault with "munmap_chunk(😞 Invalid pointer." Does it mean it is doing a double free somewhere?
[03:32:46] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[03:35:56] *** Quits: Itaru (~Itaru@185.65.135.251) (Read error: Connection reset by peer)
[03:36:18] *** Joins: Itaru (~Itaru@185.65.135.251)
[03:36:49] <PJBoy> I was doing it for a pull request I was about to send someone
[03:36:57] <PJBoy> so the force push would have been fine
[03:42:37] *** Joins: Hashida (~Itaru@185.65.135.251)
[03:42:39] *** Quits: Itaru (~Itaru@185.65.135.251) (Read error: Connection reset by peer)
[03:46:15] *** Joins: proller (~p@2a02:6b8:b081:8804::1:27)
[03:47:36] *** Joins: Itaru (~Itaru@185.65.135.251)
[03:48:08] *** Quits: Hashida (~Itaru@185.65.135.251) (Ping timeout: 250 seconds)
[03:52:07] *** Joins: Hashida (~Itaru@185.65.135.251)
[03:53:12] *** Quits: Itaru (~Itaru@185.65.135.251) (Read error: Connection reset by peer)
[03:57:45] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[04:00:23] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:11ea:447f:a0ba:3629) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:03:54] *** Quits: Hashida (~Itaru@185.65.135.251) (Remote host closed the connection)
[04:08:55] *** Joins: Tokamak (~Tokamak@172.58.188.238)
[04:09:20] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:28] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:5006:f150:c832:5e73) (Quit: Client closed)
[04:12:16] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[04:23:44] <Alipha> very_sneaky: eh, you just recommend a force push?? Which would rewrite the remote, completely overwriting any changes that had been made on the remote by other people, that PJBoy couldn't figure out how to merge into his local??
[04:24:19] <very_sneaky> Alipha: i went on to recommend not using this approach for shared repositories
[04:24:33] <PJBoy> it makes sense for my situation, yeah
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:25:50] <very_sneaky> in most situations even for shared repositories, i've found that this situation arises mostly when I'm on my own branch anyway - and it would be uncommon for other devs to be committing directly to the same branch i am
[04:26:52] <Alipha> Of course, PJBoy's solution of copying changed files over to a new repo isn't much better, unless he carefully looked through the diffs to make sure he wasn't undoing someone else's changes. Even so, without the 3-way merge view, you'll not going to be able to appropriately fix the files.
[04:27:51] <very_sneaky> in the situation where you're amending the last commit you made, there shouldn't be anybody elses changes on top of it
[04:28:05] <very_sneaky> maybe i'm assuming too much about process though
[04:28:45] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:28:58] <PJBoy> I only did that copying stuff because I couldn't escape this conflicting merge state thingy
[04:29:06] <PJBoy> I just wanted to go back to normal :(
[04:38:48] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:41:17] *** Quits: jkaye (~jkaye@2601:281:200:1958:837d:401b:4a0:3b8f) (Ping timeout: 240 seconds)
[04:49:37] <yolo> so in c++ exit() and abort() should always  be avoided otherwise dtor will be skipped and you likely will have resource leak
[04:50:19] * yolo actually started reading 'the c++ programming language 4ed'
[04:51:56] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[04:51:57] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[04:51:57] <mike18> hi
[04:52:05] <mike18> how to design a distributed uuid generator?
[04:52:35] <mike18> lets say i have multiple nodes - which operate on a range of numbers...
[04:52:48] <mike18> will i still need a datastore for that?
[04:57:20] <kalven> just generate a large enough random number
[04:57:55] *** Joins: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f)
[04:58:00] <RazielZ> is there any proper way to compose a string_view from multiple consts/literals without it breaking? https://wandbox.org/permlink/ccaEuGExPOLcGDVJ
[04:59:15] *** Quits: malloy (~jimery@113.116.52.22) (Ping timeout: 250 seconds)
[05:01:32] *** Joins: malloy (~jimery@113.116.52.22)
[05:09:03] <Alipha> mike18: as kalven said, random uuids won't collide (assuming a high-quality random number generator), so don't worry about it
[05:09:49] <johnny> PJBoy, when i get into a weird state that seem hard to get out of, i collect the revs of the diffs that matter and then move the tree back to the state where it was good
[05:10:19] <johnny> old revs stick around until gc'ed, so the reflog should always have the good stuff
[05:10:40] <johnny> and i consider that a brute force approach.. as in there's probably a better way to do it and i don't feel like thinking
[05:10:45] <Alipha> RazielZ: https://wandbox.org/permlink/9B9EE1oUMW8BxWxB :-(
[05:10:53] <johnny> but it's still less brute force than what you were doing :)
[05:11:32] <johnny> HEAD is just a pointer, so you an point it to anywhere
[05:11:51] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:12:08] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[05:12:10] <RazielZ> Alipha, excuse me what the fuck
[05:12:13] <RazielZ> lol
[05:12:55] <very_sneaky> mike18: another thing you could do is hash something that is essentially unique about your object and use the hash as your uuid
[05:13:11] <RazielZ> I suppose that's better than copypasting it everywhere
[05:13:14] <Alipha> RazielZ: are you confused or offended at my use of #define?
[05:13:31] <johnny> didn't the define just make it mor cofusing tho for no reason?
[05:15:30] <johnny> isn't it the same as if you had written R"(a)" R"(b)" which is te same as "a" "b"
[05:15:44] <RazielZ> Alipha, not confused once I realized literals can work contiguously that way. Offended, maybe a bit. More worried about what I'm supposed to do if I need different ROOT_PATHs in different namespaces, since #define leaks across them
[05:16:21] <kalven> the idea was to show concatenation
[05:16:25] <Alipha> RazielZ: or just use std::string instead of std::string_view
[05:16:44] <RazielZ> Alipha, I was doing that but I decided to make it all work as constexpr
[05:16:49] <RazielZ> unfortunately string does not cooperate with that
[05:22:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:24:29] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[05:27:14] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[05:29:09] *** Joins: chozorho (~chozorho@2601:146:300:c30::5493)
[05:33:05] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[05:40:26] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[05:41:14] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:22] *** ChanServ sets mode: +v npaperbot
[05:45:38] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:50:20] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[05:50:53] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Quit: Quit)
[05:51:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[05:51:26] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[05:58:22] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[06:01:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:08:42] *** Quits: tct (~tct@user/tct) (Ping timeout: 268 seconds)
[06:09:01] *** Joins: KombuchaKip (~kip@192.252.230.5)
[06:09:16] *** Joins: gehn (~gehn@user/gehn)
[06:11:12] *** Joins: tct (~tct@user/tct)
[06:13:05] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:20:00] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[06:25:10] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[06:32:00] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:33:32] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[06:37:39] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:38:59] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:41:59] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:47:15] <mike18> Alipha: sorry i mean in reference to here: https://youtu.be/N0mqqI87_g4?t=2456
[06:47:57] <mike18> and @very_sneaky
[06:48:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[06:50:39] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:51:25] <kalven> all of that baloney can be replaced with a sufficiently large random number
[06:52:30] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:52:57] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:55:02] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[06:55:51] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[06:56:20] <Alipha> mike18: from what I gather from the description and comments and such, this is a contrived problem simply for the purpose of an interview, with the focus seeming to be on how to create a load-balanced, distributed solution. You should definitely NOT do any of this in the real world in order to generate a UUID. Just generate v4 UUIDs locally (ie, completely random UUIDs)
[06:56:48] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[06:57:08] <hnOsmium0001[m]> not if you need a monotonically increasing ID, right?
[06:57:16] <kalven> the chance of the carefully designed distributed solution breaking in production is much higher than the chance of a collision :)
[06:57:19] <mike18> Alipha: sure - i only try to understand why he needs a timestmap in that design?!
[06:57:20] <hnOsmium0001[m]> as in using a big rnd
[06:59:10] <kalven> you can't really get a globally monotoincally increasing ID unless you have global synchronization
[06:59:11] <mike18> kalven: twitter also implemented a solution called snowflake for that problem
[06:59:13] <mike18> fyi
[06:59:19] <Alipha> mike18: UUID v1 "guarantees" uniqueness by combining a computer identifier (MAC address) with a timestamp
[06:59:37] <mike18> but that assumes the clocks are sync?
[06:59:44] <Juliu> MACs are not unique, but ok
[07:00:09] <Alipha> Juliu: hence why I put "guarantees" in quotes :-)
[07:00:15] <mike18> do you guys undertand why that microsoft person suggests a timstamp in the design? dont get it...
[07:00:27] <Juliu> Alipha, ok, my "mistake"
[07:00:34] <Alipha> mike18: the clocks don't have to be in sync if the computer identifier is unique
[07:00:53] <mike18> yeah but that is not always the case with mac
[07:00:59] <kalven> mike18: which is fine, under the constraints
[07:01:02] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 240 seconds)
[07:01:09] <Juliu> What if you restart the computer with an earlier date?
[07:01:25] <mike18> or switch timezone? :)
[07:01:35] <Alipha> And Juliu pointed out the other issue
[07:01:43] <Juliu> Fuck, I hate everything related to locale
[07:02:01] <mike18> cant you just assign a range of numbers (min, max) to each number generator service?
[07:02:05] <Alipha> So UUID v1 is really just a bad idea and you should just use v4 (randomness)
[07:02:07] <mike18> and i store that info somewhere central
[07:02:22] <Juliu> Can't you just find out the last number and add 1 ?
[07:02:29] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[07:03:00] <mike18> to query a new number every time is a but unefficient?
[07:03:25] <kalven> mike18: I'm guessing they go over a bunch of possible solutions in that video.. but most importantly: you need to figure out the constraints first
[07:03:41] <kalven> like "do I want this ID to somehow encode time"
[07:03:44] <mike18> i was thinking about range (min,max) is send to id generator service x -> than that service increments that numbers from min to max... ?
[07:03:58] <kalven> "do I want it to encode instance info"
[07:04:56] <Alipha> mike18: that would work... Assuming you write the number to disk each time in case the server crashes
[07:05:12] <mike18> if it crashes just query a new range? :D
[07:06:49] <mike18> Alipha: still dont know what he wants to do with that timestamp in his design...
[07:07:11] <mike18> here at: https://youtu.be/N0mqqI87_g4?t=2794
[07:07:35] <mike18> timestamp with vector clock?
[07:07:49] <kalven> you'd have to listen carefully at the constraints that the interviewer gives
[07:08:46] <mike18> not sure how that timestamp is useful -
[07:09:08] <Alipha> mike18: a timestamp provides an easy way to get a number that is ever-increasing, and hence unique, per computer (ignoring issues where the computer's clock may get changed)
[07:09:47] <mike18> but timestamp is not enught as we said before?
[07:09:47] *** Joins: skapata (~Skapata@user/skapata)
[07:10:08] <mike18> if you have multiple id generator services...
[07:10:48] <Alipha> mike18: then you give each id generator a unique identifier which gets concatenated with a timestamp
[07:10:52] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:11:19] <mike18> https://youtu.be/N0mqqI87_g4?t=2884 ... vector clock, epoch timestamp, vector clock counts to 500 - if new nano second - reset counter...?
[07:11:26] <Juliu> Does the ID generator have memory?
[07:12:01] <kalven> we use a 64bit timestamp + 32 bit machine id + 32 bit process id
[07:12:11] <mike18> at twitter? :)
[07:12:22] <mike18> i saw twitter snowflake uses something like that
[07:12:41] <mike18> + an identifier after the process id
[07:13:38] <kalven> our unique ids are 128bit, theirs seems to be 64
[07:13:49] <mike18> ok
[07:14:27] <kalven> but, once again, it all depends on what you want to use your unique id for.. if you *only* want it to be unique, then you can simply generate a random number (of sufficient size) and be done with it.
[07:14:56] *** Joins: adeliktas5 (~adeliktas@i59F52DD4.versanet.de)
[07:15:05] <mike18> yeah
[07:15:08] <kalven> and as Alipha said, the question is contrived and designed to get to a discussion of distributed systems
[07:15:19] <kalven> you *dont* want your unique id generator to have all that complexity
[07:15:39] <mike18> keep systems simple
[07:16:12] <Juliu> mike18 is right. So my suggestion is that we always choose ID = 17
[07:16:30] <mike18> dont like 17
[07:16:57] <Juliu> How about a different random number, 7, 27, or 47 maybe?
[07:17:33] *** Quits: adeliktas (~adeliktas@i59F52CE1.versanet.de) (Ping timeout: 256 seconds)
[07:17:33] *** adeliktas5 is now known as adeliktas
[07:19:44] <mike18> kalven: dont you need a datacenter id too?
[07:20:19] <kalven> part of the machine id
[07:22:05] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[07:22:05] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[07:30:37] *** Quits: pulse_ (~pulse@user/pulse) (Ping timeout: 240 seconds)
[07:30:52] <mike18> kalven: lets say you maintain the used number ranges in redis - can redis do some append to get back a new id?
[07:33:03] <mike18> oh there a Transactions in Redis  ?
[07:33:07] *** Quits: Tokamak (~Tokamak@172.58.188.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:35:22] <kalven> but why?
[07:43:03] *** Quits: jsbach (~jsbach@2a01:c22:a45c:8f00:f2aa:ffa:d568:c4df) (Ping timeout: 268 seconds)
[07:53:59] <mike18> @kalven he discuses it in the video
[07:54:11] <mike18> there is a incr in redis btw
[07:54:21] <mike18> could just increment the last used_range
[07:54:31] <mike18> yeah?
[07:54:52] *** Joins: jsbach (~jsbach@2a01:c23:5d99:7b00:a1b7:10cb:602f:8ab5)
[07:57:18] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[07:57:34] *** Joins: dfkfs (~dfkfs@178.49.152.151)
[08:00:27] <very_sneaky> kalven: hashing the object and using that as uuid would give you a globally unique solution without synchronising
[08:00:44] <very_sneaky> assuming const members
[08:00:53] <kalven> very_sneaky: what are you talking about?
[08:01:03] <very_sneaky> globally unique uuid
[08:01:24] <kalven> okay, in response to what?
[08:01:55] <very_sneaky> <kalven> you can't really get a globally monotoincally increasing ID unless you have global synchronization
[08:02:15] <very_sneaky> oh, sorry missed the monotonically increasing part
[08:02:24] <very_sneaky> hash wouldn't get you that
[08:02:33] <kalven> mike18: I haven't really looked at the video, but again, it's a contrived question designed to get a discussion going.. saying "use this redis operation" isn't a good answer in that context :P
[08:03:04] <mike18> not use - more like use redis to avoid too many queries to the db
[08:04:18] <kalven> what are you using the db for?
[08:08:17] *** Quits: kraa (~kraa@107.190.7.216) (Ping timeout: 240 seconds)
[08:10:20] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[08:14:15] <mike18> to keep track of used ranges
[08:14:39] <mike18> in case a server goes down or runs out of number on the current range
[08:15:44] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Ping timeout: 268 seconds)
[08:19:49] <kalven> but you don't need that, you don't want a scheme that depends on this type of synchronization
[08:22:18] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[08:23:54] *** Joins: KombuchaKip (~kip@192.252.230.5)
[08:38:17] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[08:40:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[08:42:11] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:51:36] *** Quits: dfkfs (~dfkfs@178.49.152.151) (Quit: Client closed)
[09:01:52] *** Quits: emerent (~quassel@p200300cd5704432fba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[09:02:09] *** Joins: emerent (~quassel@p200300cd57044360ba27ebfffed28a59.dip0.t-ipconnect.de)
[09:05:47] *** Joins: xkuru (~xkuru@user/xkuru)
[09:13:15] <lockywolf> is there a C++ binding for pipe() in the standard library or boost?
[09:17:52] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Ping timeout: 257 seconds)
[09:21:28] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:22:32] <hnOsmium0001[m]> lockywolf: https://stackoverflow.com/a/50070892
[09:22:32] <hnOsmium0001[m]> so yes, boost::process
[09:23:57] *** ravan__ is now known as ravan
[09:33:59] *** Joins: hexingb (~hexingb@111.32.64.41)
[09:34:53] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d)
[09:34:53] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d) (Changing host)
[09:34:53] *** Joins: skapata (~Skapata@user/skapata)
[09:40:12] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[09:41:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:23] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:23] *** ChanServ sets mode: +v npaperbot
[10:07:10] *** Joins: xiongxin (~Thunderbi@2409:8954:2ec4:47b:dd1a:44ea:1095:9ec9)
[10:10:39] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[10:15:12] *** Quits: xiongxin (~Thunderbi@2409:8954:2ec4:47b:dd1a:44ea:1095:9ec9) (Quit: xiongxin)
[10:17:31] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:21:20] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[10:25:04] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:32:35] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[10:34:32] *** Quits: nelubit (~nelubit@user/nelubit) (Ping timeout: 240 seconds)
[10:35:53] <lockywolf> is there a convenience function to make a unique_ptr from an array?
[10:39:47] <TinoDidriksen> Define "from an array"? Do you want to copy an existing array into dynamic memory held by unique_ptr, or is the array already allocated and unique_ptr just needs to take ownership?
[10:40:31] * vdamewood spells a vector.
[10:40:37] * vdamewood smells*
[10:41:57] <TinoDidriksen> Indeed
[10:48:16] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[10:56:04] *** Joins: BluesBoy (~bboy@user/bluesboy)
[10:59:28] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[11:01:38] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:04:05] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Remote host closed the connection)
[11:08:06] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[11:10:02] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:10:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:12:44] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[11:18:14] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:19:53] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:22:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[11:24:18] *** Joins: jehelset (~jeh@2001:700:302:10::5d)
[11:26:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:30:39] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[11:31:19] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[11:33:10] *** Joins: nelubit (~nelubit@user/nelubit)
[11:39:14] *** Quits: jsbach (~jsbach@2a01:c23:5d99:7b00:a1b7:10cb:602f:8ab5) (Ping timeout: 268 seconds)
[11:40:14] *** Joins: jsbach (~jsbach@2a01:c23:5d99:7b00:f54:cabe:7971:a17)
[11:46:59] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Remote host closed the connection)
[11:47:10] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:47:19] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[11:52:57] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[11:56:59] *** Joins: true-false (~truexfals@212.251.116.41.dsl.dyn.forthnet.gr)
[12:00:37] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 240 seconds)
[12:17:37] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[12:26:55] *** gentooclimax is now known as climax
[12:29:32] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Read error: Connection reset by peer)
[12:29:54] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[12:31:27] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[12:32:21] *** Joins: robod34 (~Username@79.113.195.239)
[12:33:41] *** Joins: Xardas (~Xardas@149.233.51.127)
[12:34:59] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (Remote host closed the connection)
[12:36:11] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[12:40:39] *** climax is now known as gentooclimax
[12:41:41] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[12:45:29] <LordKalma> mornin
[12:46:42] <Juliu> Morning
[12:48:18] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[12:49:57] *** Joins: Deneb (~johnch@101.111.189.80.dyn.plus.net)
[12:53:42] *** Quits: DrMax (~DrMax@node-1w7jra94757g0bo11wngpfoiw.ipv6.telus.net) (Ping timeout: 250 seconds)
[12:55:23] *** Joins: teepee_ (~teepee@openscad/teepee)
[12:56:36] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[12:56:37] *** teepee_ is now known as teepee
[12:57:45] *** Joins: seninha (~seninha@user/seninha)
[13:00:08] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:64fd)
[13:02:59] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[13:03:58] *** Quits: gnomesort (~gnomesort@user/gnomesort) (Ping timeout: 256 seconds)
[13:06:00] *** Joins: DrMax (~DrMax@node-1w7jra94757g1hh07e47brsa5.ipv6.telus.net)
[13:09:11] <LordKalma> kalven, yes
[13:10:36] *** Quits: jehelset (~jeh@2001:700:302:10::5d) (Ping timeout: 250 seconds)
[13:12:29] *** Joins: plastico (~plastico@neomutt/plastico)
[13:16:14] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 250 seconds)
[13:17:18] *** Quits: chozorho (~chozorho@2601:146:300:c30::5493) (Quit: WeeChat 3.0)
[13:22:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[13:27:15] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:29:00] *** Quits: hexingb (~hexingb@111.32.64.41) (Ping timeout: 268 seconds)
[13:29:46] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:30:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[13:32:16] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:36:27] *** Joins: dfkfs (~dfkfs@178.49.152.151)
[13:39:32] *** Quits: Deneb (~johnch@101.111.189.80.dyn.plus.net) (Quit: Leaving)
[13:41:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:24] *** ChanServ sets mode: +v npaperbot
[13:48:02] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 240 seconds)
[13:51:43] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:54:52] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[13:55:24] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:56:58] *** Joins: hexingb (~hexingb@111.32.64.41)
[13:58:39] *** Joins: HvszrStykp (~X@81.171.62.86)
[14:05:10] *** Quits: hexingb (~hexingb@111.32.64.41) (Ping timeout: 256 seconds)
[14:11:26] <manuels> can I pass derived as base only if it is a direkt base?
[14:12:24] <manuels> I have a function(Base*). Base<D1<D2. If I pass D2* the compiler complains the types are unrelated.
[14:12:38] <manuels> do i need to dynamic_cast in this case?
[14:18:27] <Svitkona> { foo(new D1()); } struct Base {}; struct D1 : Base {}; struct D2 : D1 {}; void foo(Base*) { BARK; }
[14:18:27] <geordi> foo(Base*)
[14:18:30] <Svitkona> seems to work
[14:21:27] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[14:21:51] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[14:28:45] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[14:29:21] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[14:30:37] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[14:31:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[14:40:56] <ville> manuels: testcase. will also let you confirm whether the thing you suspect is wrong is in fact wrong
[14:42:51] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[14:47:00] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[14:47:06] *** Quits: aeg (~aeg@215-052-180-159.dynamic.caiway.nl) (Read error: No route to host)
[14:47:25] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[14:48:37] *** Joins: hexingb (~hexingb@36.155.28.143)
[14:55:43] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:84e4:6ca6:2acc:8b3a:8bbc) (Quit: Leaving...)
[15:01:37] <ville> not entirely horrible calculator utility: https://speedcrunch.org/index.html few features i like: past calculations stick from session to session and you can switch representation base and it changes also the past results. so pretty easy to hit shortcut to check what the bit pattern of something is
[15:02:50] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Ping timeout: 250 seconds)
[15:03:05] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:7383:58e3:41e7:460a)
[15:13:06] <Haohmaru> this is what i use mIRC for a lot.. $calc(...)
[15:14:01] <Haohmaru> and $base()
[15:14:47] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[15:15:25] *** Joins: aakashi2001 (~aakashi20@103.61.255.10)
[15:15:25] *** Quits: aakashi2001 (~aakashi20@103.61.255.10) (Changing host)
[15:15:25] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[15:19:29] *** Joins: jehelset (~jeh@2001:700:302:11::283)
[15:20:50] <Haohmaru> oh, it's in debian.. let's see
[15:22:46] *** Quits: hexingb (~hexingb@36.155.28.143) (Ping timeout: 250 seconds)
[15:23:25] *** Joins: JohnMS_WORK (~kvirc@185.73.229.242)
[15:23:36] *** Joins: hexingb (~hexingb@111.32.64.41)
[15:23:54] <ville> two downsides so far: doesn't respect your qt theme, but you can write a theme file for the program it self. it's a json file. doesn't appear to have customizable shortcuts, but lot of the functionality does have shortcuts
[15:25:11] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[15:32:50] *** Joins: AmR (~AmREiSa@156.199.9.4)
[15:37:14] *** Joins: JohnMS_AWAY (~kvirc@user-5-173-136-38.play-internet.pl)
[15:38:46] *** Quits: JohnMS_AWAY (~kvirc@user-5-173-136-38.play-internet.pl) (Read error: Connection reset by peer)
[15:38:54] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[15:39:32] *** Quits: JohnMS_WORK (~kvirc@185.73.229.242) (Ping timeout: 240 seconds)
[15:40:01] *** Joins: JohnMS_AWAY (~kvirc@185.73.229.242)
[15:40:21] *** Quits: proller (~p@2a02:6b8:b081:8804::1:27) (Ping timeout: 268 seconds)
[15:43:26] <Haohmaru> i clicked around it, nice
[15:43:28] <Haohmaru> thanks ville
[15:46:08] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[15:48:28] <lionkor> not sure what the topic is rn, but if its about cool calculators, there's Qalculate which is amazing, it can do all sorts of calculations including solving any equation etc. and the commandline REPL version `qalc` :)
[15:49:35] <Haohmaru> for "solving" (since i don't schprachen ze mathz) i use wxMaxima
[15:51:46] <Haohmaru> lionkor seems debian has only the "qalc" version
[15:53:04] <ville> apparently qalculator can plot, that'd be fairly nice
[15:54:11] <lionkor> Haohmaru: really? that's sad!
[15:54:17] <Haohmaru> i can plot with mIRC at home
[15:54:43] <Haohmaru> but a program that does all that is highly welcome
[15:54:47] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[15:55:03] <Haohmaru> "normal" calculators just don't cut if (calc.exe gtfo)
[16:02:12] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:02:15] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Quit: Quit)
[16:03:37] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Ping timeout: 240 seconds)
[16:04:49] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[16:04:53] <johnny> i didn't even know mirc still existed
[16:05:41] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Remote host closed the connection)
[16:05:50] * Haohmaru slaps johnny with optimism.mrc
[16:06:18] <johnny> is it still being developed? and by the same people
[16:06:27] <Haohmaru> of course
[16:06:33] <johnny> what happens when they die?
[16:06:35] <Haohmaru> afaik it's just one guy
[16:06:48] <johnny> any provisions for opening the source up?
[16:07:09] <Haohmaru> when he dies he goes to the heavens, afaik
[16:07:11] <Haohmaru> ;P~
[16:10:13] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[16:11:23] *** MaddHatt1r is now known as MaddHatter
[16:14:30] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[16:16:31] <very_sneaky> ah mirc, that brings back memories of irc.msn.com
[16:17:04] <Haohmaru> is that M$N ?
[16:19:10] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[16:22:55] <very_sneaky> as in, msn? yes
[16:25:17] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[16:27:04] <LordKalma> ipython shell or jupyter notebook > whatever
[16:27:36] *** Joins: Burgundy (~NA@86.121.143.206)
[16:27:49] <Haohmaru> the less sneks i have in my PC - the better
[16:29:45] <very_sneaky> oof, why?
[16:29:48] <very_sneaky> python shell
[16:30:08] <LordKalma> ipython
[16:30:12] <LordKalma> much better
[16:30:15] <very_sneaky> or pudb
[16:30:27] <very_sneaky> ipython has always been glitchy as hell for me
[16:30:30] <Haohmaru> >:(
[16:34:04] *** Joins: jkaye (~jkaye@2601:281:200:1958:dab2:e344:8506:e5dc)
[16:34:21] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[16:34:58] *** Joins: HvszrStykp (~X@81.171.62.86)
[16:35:58] *** Joins: markong (~kvirc@213.146.188.203)
[16:37:04] *** Joins: proller (~p@2a02:6b8:0:40c:1ed0:ad16:fa54:185d)
[16:38:20] *** Quits: jkaye (~jkaye@2601:281:200:1958:dab2:e344:8506:e5dc) (Remote host closed the connection)
[16:38:34] *** Joins: jkaye (~jkaye@2601:281:200:1958:3ec:48cd:412b:4566)
[16:40:20] *** Quits: jkaye (~jkaye@2601:281:200:1958:3ec:48cd:412b:4566) (Remote host closed the connection)
[16:47:36] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[16:55:02] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[16:58:49] *** Joins: myusername (~sleeeepin@2001:4641:6e62:0:9dce:76e7:4731:23dd)
[17:09:23] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[17:14:11] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[17:20:30] *** Joins: pulse_ (~pulse@user/pulse)
[17:21:10] *** pulse_ is now known as pulse
[17:26:33] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[17:29:48] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:5cef:e512:2284:6d3c)
[17:29:48] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:5cef:e512:2284:6d3c) (Changing host)
[17:29:48] *** Joins: skapata (~Skapata@user/skapata)
[17:31:50] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[17:35:07] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[17:38:56] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:41:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:24] *** ChanServ sets mode: +v npaperbot
[17:44:32] <LordKalma> so, latest qt feature: an advertising library
[17:44:34] * LordKalma facepalms
[17:45:25] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[17:47:04] *** Quits: jehelset (~jeh@2001:700:302:11::283) (Ping timeout: 250 seconds)
[17:49:47] <rpav> well they're going hard for mobile right
[17:52:06] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Read error: Connection reset by peer)
[17:53:09] <LordKalma> more like embedded, but yeah
[17:54:05] <rpav> if your toaster doesn't toast a paid advertisement into your bread, it's leaving money on the table
[17:54:24] *** Joins: DrMax__ (~DrMax@132.215.96.30)
[17:54:28] <rpav> while playing a paid jingle
[17:54:36] <LordKalma> at work they put a snacks and coffe machine with a touch screen
[17:54:41] <LordKalma> of course plays adverts
[17:54:50] <LordKalma> to nobody hours on end, but sure
[17:55:17] <rpav> only because it can't forcibly project an advertisement directly into your retina
[17:55:54] <LordKalma> https://doc.qt.io/qt-5/qtdoc-demos-coffee-example.html // This is their target market now, I think
[17:58:04] *** Quits: DrMax_ (~DrMax@132.215.96.30) (Ping timeout: 256 seconds)
[18:01:06] <ashafq> If I get an error like "munmap_chunk(😞 invalid pointer" and I have verified that the pointer I am supplying to free is a valid pointer returned from aligned_alloc(), is that my problem or glibc's problem?
[18:03:36] <LordKalma> ashafq, guess what will be the answer
[18:03:40] <LordKalma> !give ashafq testcase
[18:03:42] <nolyc> ashafq: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[18:03:47] <LordKalma> (godbolt is fine too)
[18:05:40] <ashafq> LordKalma: https://gist.github.com/ashafq/45b4ef88b1e64a2fa09a75eebb65a049
[18:05:53] <ashafq> It segfaults on exit
[18:06:10] <ashafq> On a raspberry pi, it's fine on AMD64
[18:06:32] <LordKalma> what's process_c_func ?
[18:07:02] <LordKalma> https://godbolt.org/z/T5Edsjha8
[18:07:06] <LordKalma> could you make it work from here?
[18:07:27] <ashafq> It's fine there
[18:07:31] *** Quits: dfkfs (~dfkfs@178.49.152.151) (Ping timeout: 256 seconds)
[18:08:12] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:08:34] <LordKalma> I can't run it so I don't know
[18:10:00] <ashafq> void process_c_func(float *dst, float *src, size_t n) { for (size_t i = 0; i < n; ++i) dst[i] = 0.5F * src[i]; }
[18:10:05] <LordKalma> https://godbolt.org/z/46zaePrGq
[18:10:07] <LordKalma> seems fine
[18:10:53] <LordKalma> clang trunk also builds and runs
[18:11:35] <rpav> `constexpr class ...` when
[18:11:38] <ashafq> I guess it's glibc's problem
[18:12:04] <ashafq> I'll try with musl
[18:12:09] <LordKalma> what version of gcc arm are you using for the rpi?
[18:12:42] <ashafq> 10.2.0, glibc-2.32-2
[18:13:02] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:14:19] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[18:17:43] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:a011:180:f68f:b20b)
[18:18:27] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[18:19:02] *** Quits: myusername (~sleeeepin@2001:4641:6e62:0:9dce:76e7:4731:23dd) (Ping timeout: 240 seconds)
[18:23:15] *** Quits: jsbach (~jsbach@2a01:c23:5d99:7b00:f54:cabe:7971:a17) (Remote host closed the connection)
[18:24:40] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[18:25:48] *** Joins: jsbach (~jsbach@2a01:c23:5d99:7b00:a93c:c538:a20e:4c5a)
[18:27:56] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:28:34] <rpav> is `T x[N] = {{}};` the best way to constexpr-initialize an array of T
[18:28:58] <ville> what is "the best"?
[18:29:49] <LordKalma> that would be me, of course
[18:41:49] <Haohmaru> there's best-er than you tho
[18:44:10] <Alipha> rpav: you only need one {}
[18:46:48] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[18:55:06] <rpav> Alipha: 👍
[18:56:16] *** Joins: kaichiuchu (~mike@user/kaichiuchu)
[19:05:17] *** Quits: JohnMS_AWAY (~kvirc@185.73.229.242) (Ping timeout: 240 seconds)
[19:06:04] *** Joins: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c)
[19:07:27] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[19:10:17] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[19:13:27] *** Joins: Vasileios (~truexfals@194.219.11.202.dsl.dyn.forthnet.gr)
[19:13:36] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:16:50] *** Quits: true-false (~truexfals@212.251.116.41.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[19:17:42] *** Quits: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c) (Quit: Leaving)
[19:17:58] *** Joins: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c)
[19:19:16] <lmat> I have two make rules:  obj/test/gmock_main.a : obj/test/gmock-all.o obj/test/gmock_main.o     and obj/test/gtest_main.a : obj/test/gtest-all.o obj/test/gtest_main.o    Can I combine them?
[19:19:48] *** Quits: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f) (Ping timeout: 250 seconds)
[19:19:54] *** Joins: magla (~gelignite@55d4ea14.access.ecotel.net)
[19:20:22] <lmat> I was thinking something like    obj/test/gmock_main.a obj/test/gtest_main.a : obj/test/g%_main.a : obj/test/g%-all.o obj/test/g%_main.o    then I'm confused about the recipe. It's like  @$(AR) r $@ obj/test/gtest-all.o obj/test/gtest_main.o
[19:20:45] <lmat> So I would need @$(AR) r $@ ??;  where the ?? would be both of the generated dependencies...is that possible?
[19:20:54] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[19:21:05] *** Quits: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c) (Client Quit)
[19:21:28] <cbreak> lmat: have you considered cmake? :)
[19:22:02] <lmat> you mean cBREAK!
[19:22:13] <ville> lmat: make testcase. no one wants to read code in irc
[19:22:15] <lmat> Right next to the Amazon Swindle and autofools
[19:22:19] <lmat> ville: fair enough
[19:22:24] <cbreak> but yes, make can have rules that create multiple outputs, or rules that can map to multiple outputs
[19:22:48] <lmat> cbreak: Just playing ;-) Yes, considered CMake...used cmake. Not impressed.
[19:24:22] *** Joins: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c)
[19:26:57] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[19:31:32] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Ping timeout: 240 seconds)
[19:34:57] *** Joins: Simplar (~quassel@188.163.93.76)
[19:41:29] *** Joins: Tokamak (~Tokamak@172.58.188.238)
[19:41:43] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Read error: Connection reset by peer)
[19:41:56] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[19:51:33] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:51:54] <Haohmaru> !fact
[19:51:56] <nolyc> Haohmaru: A lock does not manage the lifetime of the lockable object it references.
[19:54:49] *** Joins: jehelset (~jeh@2001:700:302:10::c9)
[19:56:01] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[19:58:26] <rpav> should that not be incredibly obvious
[20:00:15] <rpav> lmat: and yet with cmake, it would just work, and you wouldn't be writing custom ar handling
[20:00:44] <rpav> one does not need to be impressed, one rather needs to get on with relevant work
[20:00:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[20:01:02] *** Joins: horribleprogram (~user@user/horribleprogram)
[20:01:07] <horribleprogram> hey
[20:01:41] <horribleprogram> what's the difference between an r-value and an l-value other than r-values obviously are better in their policies
[20:04:05] <horribleprogram> where the channel for clang
[20:04:12] <horribleprogram> or even LLVm
[20:04:13] <ville> !value category
[20:04:15] <nolyc> expressions are categorized into lvalues that designate an object or function, xvalues that originated from rvalue references and refer to objects usually ending lifetime soon and prvalues which are objects and values whose dynamic type is known at compile time (such as literals).
[20:04:18] <horribleprogram> ville: dude
[20:04:35] <horribleprogram> ville: don't do that u've known me for like 2 years now
[20:04:59] <ville> aren't i blessed?
[20:05:03] <horribleprogram> :P
[20:06:48] *** gentooclimax is now known as climax
[20:07:45] *** Joins: andreasbuhr (~quassel@p548ddbb2.dip0.t-ipconnect.de)
[20:07:45] *** Quits: andreasbuhr (~quassel@p548ddbb2.dip0.t-ipconnect.de) (Client Quit)
[20:07:57] <rpav> "obviously better for their policies" .. i would definitely revisit l/r-values if you think this
[20:08:46] <rpav> i can't think of much else in the language where "better" is less relevant
[20:09:30] <horribleprogram> politics joke
[20:10:10] <rpav> probably even worse then heh
[20:10:13] <horribleprogram> LOL
[20:10:21] <horribleprogram> meh i'm center I can play both sides of the fence
[20:11:02] <rpav> i don't want politics in my programming language :( more than already exist, which i think we're fairly removed from here
[20:11:30] <rpav> horribleprogram: you know the obvious L/R value difference right, like, things start as `L expr = R expr`
[20:11:59] <rpav> that's by far not the full picture in c++11 and beyond, but you should at least start by understanding where they came from i guess
[20:12:24] <horribleprogram> well more precisely
[20:12:39] <horribleprogram> l-value = expr; that decays into an r-value
[20:12:46] <horribleprogram> x = x;
[20:13:32] <rpav> i mean, without the specifics of c++, it's like, left or right side of the assignment
[20:13:42] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[20:14:02] <rpav> but yeah then basically consult the tree/table of what's-what-when
[20:14:05] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[20:14:05] <horribleprogram> no I don't think I know what the hell a type is tho
[20:14:18] <horribleprogram> sure I can use something like std::is_lvalue_reference
[20:15:36] <horribleprogram> and I can even create little toy programs that, for each of those type traits, come up with a name that would set value to true in those metafunctions
[20:16:08] <horribleprogram> do I actually know the underlying "types", probably not
[20:17:35] <horribleprogram> there's a few productions u need to memorize
[20:18:16] <horribleprogram> type-id, type-specifier-seq, and so on... then the underlying concepts C++ adds on top, such as reference collapsing
[20:18:17] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[20:18:38] <rpav> i don't think i memorized any of those things
[20:18:51] <rpav> i don't even remember all the details of the value types heh
[20:19:07] <horribleprogram> sure but
[20:19:16] <rpav> a type is a builtin, or class/struct/enum/union
[20:19:22] <horribleprogram> std::forward<decltype(foo)>(foo)
[20:19:32] <horribleprogram> uk why you would need such a thing...
[20:19:32] <rpav> or some combination of the basic type and qualifiers
[20:19:46] <horribleprogram> sure, const int vs int
[20:19:47] *** Joins: HvszrStykp (~X@81.171.62.86)
[20:19:58] <horribleprogram> the problem is
[20:20:03] <horribleprogram> there's no difference there between type
[20:20:10] <rpav> though it's annoying how some things combine or not, but that's aside
[20:20:43] <rpav> horribleprogram: you need to forward for vague reasons i don't entirely keep swapped in my memory, but it has to do with making sure refs stay the correct type when passed or something
[20:21:13] <rpav> it's pretty easy to figure out, just find an article on std::forward .. but really if you have some `Ts...`, you want to forward them
[20:21:54] <horribleprogram> yeah in the concept of template type decution
[20:22:28] <horribleprogram> template<typename T> void foo(T&& f) { ... }
[20:29:06] *** climax is now known as gentooclimax
[20:32:11] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:35:18] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:35:35] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[20:35:37] *** Joins: sigma_ (~sigma@164.215.204.35)
[20:36:45] <sigma_> hi, i can sort map with memory address form smaller to bigger
[20:37:06] <sigma_> the map key is memory adderss
[20:37:50] <imMute> sigma_: that sorting should be the default...
[20:38:15] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[20:38:57] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[20:39:10] <sigma_> i mean map< key, vlaue, std::greater< pointer> >
[20:39:53] <imMute> that would sort biggest to smallest
[20:40:44] <sigma_> yeah , i konw but thats working
[20:41:05] <imMute> and really I think the template argument to std::greater should be 'key' if it's a different types I dunno what would happen
[20:42:26] <sigma_> i say key is pointer , carray a memory address
[20:43:08] <sigma_> i think hex number can sort
[20:46:56] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:48:33] <Alipha> sigma_: std::map<T*, value> will sort by the addresses held by the T pointers
[20:48:50] <Alipha> sigma_: what type is `key` currently?
[20:49:34] <sigma_> const char *
[20:50:07] <Alipha> sigma_: yeah, so, std::map<const char*, value> is fine
[20:50:33] <sigma_> Alipha: tnx
[20:52:50] *** Quits: slavfox (~slavfox@93.158.232.111) (Quit: ZNC 1.8.2 - https://znc.in)
[20:53:10] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[20:54:33] *** Quits: Simplar (~quassel@188.163.93.76) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:56:19] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:56:32] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Read error: No route to host)
[21:00:20] *** Quits: jehelset (~jeh@2001:700:302:10::c9) (Ping timeout: 250 seconds)
[21:10:47] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f432:d78d:9f19:bda7)
[21:10:53] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 268 seconds)
[21:17:02] *** Joins: tej (~kali@125.177.162.102)
[21:17:12] <tej> ayn-4.creator.spring.com
[21:17:12] <tej> shop at here !
[21:17:35] *** Parts: tej (~kali@125.177.162.102) ()
[21:19:32] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[21:23:45] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[21:25:09] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[21:25:27] *** Joins: guest3935 (~guest3935@dynamic-046-114-168-202.46.114.pool.telefonica.de)
[21:26:19] *** Quits: guest3935 (~guest3935@dynamic-046-114-168-202.46.114.pool.telefonica.de) (Max SendQ exceeded)
[21:30:14] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[21:33:14] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[21:34:01] *** Joins: p-i- (~Ohmu@2403:6200:8978:84e4:f981:e2b1:518d:d697)
[21:34:55] *** Joins: ravan (~ravan@user/ravan)
[21:38:01] *** Quits: proller (~p@2a02:6b8:0:40c:1ed0:ad16:fa54:185d) (Ping timeout: 268 seconds)
[21:41:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:23] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:23] *** ChanServ sets mode: +v npaperbot
[21:41:50] *** Joins: chozorho (~chozorho@2601:146:300:c30::f5f4)
[21:42:17] *** Quits: magla (~gelignite@55d4ea14.access.ecotel.net) (Quit: Stay safe!)
[21:45:21] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[21:50:09] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[21:52:20] *** Quits: sigma_ (~sigma@164.215.204.35) (Quit: Konversation terminated!)
[21:55:19] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[21:57:02] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:a011:180:f68f:b20b) (Ping timeout: 240 seconds)
[22:02:05] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[22:02:14] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[22:03:01] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[22:03:33] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[22:05:08] *** Joins: letto (~letto@86.120.81.105)
[22:09:29] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:10:40] *** Joins: sigma_ (~sigma@86.57.90.178)
[22:11:23] *** Quits: klys (~mdasoh@show.op8.us) (Ping timeout: 250 seconds)
[22:13:13] *** Joins: klys (~mdasoh@show.op8.us)
[22:25:46] *** Joins: dfkfs (~dfkfs@178.49.152.151)
[22:26:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[22:27:30] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[22:31:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:35:02] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[22:36:29] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[22:38:37] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[22:40:27] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[22:41:45] *** Joins: proller (~p@80.240.216.69)
[22:44:35] *** Joins: HvszrStykp (~X@81.171.62.86)
[22:46:40] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[22:49:32] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[22:49:35] *** Quits: dfkfs (~dfkfs@178.49.152.151) (Quit: Client closed)
[22:50:04] *** Joins: dfkfs (~dfkfs@178.49.152.151)
[22:58:19] *** Joins: magla (~gelignite@55d4ea14.access.ecotel.net)
[23:03:12] *** Joins: proller (~p@2a02:6b8:b081:a412::1:24)
[23:03:57] *** Quits: Tokamak (~Tokamak@172.58.188.238) (Read error: Connection reset by peer)
[23:04:31] *** Joins: Tokamak (~Tokamak@172.58.188.238)
[23:05:38] <LordKalma> hahah I filed Qt bug 100100 :D
[23:10:12] *** Joins: KombuchaKip (~kip@192.252.230.5)
[23:12:00] <InPhase> LordKalma: Reach out to whoever filed bug 11011 and send them a complement.
[23:12:20] <LordKalma> I'll have to wait for that one
[23:12:29] <kalven> dadjokes
[23:12:45] <LordKalma> hey kalven
[23:14:00] <kalven> hello LordKalma
[23:14:12] <LordKalma> yes, I posted that thread
[23:14:23] *** Joins: DrMax_ (~DrMax@132.215.96.30)
[23:15:23] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[23:16:16] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:17:06] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[23:18:03] *** Quits: DrMax__ (~DrMax@132.215.96.30) (Ping timeout: 256 seconds)
[23:29:48] <rpav> InPhase: that was excellent
[23:30:28] *** Quits: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c) (Quit: Leaving)
[23:34:47] <xkoncek> i realized that basically all std:: containers except for vector are obsessed with pointer stability
[23:35:23] <xkoncek> deque's push/pop operations retain pointers, set/map do as well
[23:36:13] <xkoncek> and of coursse: list
[23:36:46] <kalven> it's a safe default, but not great for performance
[23:37:11] <kalven> (re maps)
[23:37:14] <xkoncek> like when you want a single vector-based queue that reuses its storage
[23:37:19] <LordKalma> wdym pointer stability
[23:37:53] <xkoncek> push_back into vector invalidates all pointers pointing to members of a vector
[23:38:08] <rpav> or most other operations on vector
[23:38:10] <xkoncek> because it may have relocated elsewhere
[23:38:24] <xkoncek> pop doesn't
[23:38:27] <imMute> xkoncek: only if a resize is needed.
[23:38:51] <rpav> imMute: that doesn't really change the matter if you need to add things that may cause resizing
[23:39:16] <imMute> rpav: reserve() might be able to help, if you can figure out a worst case upper size
[23:39:21] <xkoncek> in all other containers, the pointers are usually stable when the container is used as intended
[23:39:25] <rpav> like, if you only ever allocate N items, but it's often useful to add a bunch of things to some efficiently-accessible/iterable container and still want pointer stability
[23:40:16] <xkoncek> which is itself not really useful when your value_type is a small value-like object like a pointer
[23:40:47] <LordKalma> reserve(), while stability is expected, the safe rule is iterators are invalidated anyway
[23:40:56] <LordKalma> pointers maybe not
[23:41:15] <rpav> the problem is remove() also invalidates things so you're still fairly limited unfortunately
[23:41:56] *** Quits: dfkfs (~dfkfs@178.49.152.151) (Quit: Client closed)
[23:42:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[23:46:20] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:49:45] <Alipha> { std::vector v{10, 20, 30}; auto it = v.begin() + 1; v.erase(v.begin()); std::cout << *it; } // kinda annoying this officially invalidates `it`, even though it would have very predictible behavior (would still refer to v[1], which now has a value of 30) if it wasn't for the standard saying it's UB
[23:49:46] <geordi> /usr/local/include/c++/12.0.0/debug/safe_iterator.h:304: [+ 12 discarded lines]
[23:53:30] *** Quits: sigma_ (~sigma@86.57.90.178) (Quit: Konversation terminated!)
[23:58:59] <Alipha> most of vector's api: "let's very transparently expose the fact that it's backed by an array" insert/erase: "haha, nope, iterators are invalidated! even though they're still pointing to valid (albeit, different) elements!"
