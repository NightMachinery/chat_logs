[00:01:11] <shaldannon> I don't recall there being a change log on at least one of them ... just a bunch of really bad C-ish-style Perl, with no strict, no warnings, open a file in one subroutine in one perl file, use it in a different subroutine in a different perl file, and close it in a third subroutine.  had lots of prototypes that didn't correspond to actual usage, etc.
[00:01:35] *** Quits: magla (~gelignite@55d411d7.access.ecotel.net) (Quit: Stay safe!)
[00:01:41] <shaldannon> another set probably did have change log as it was in CVS, but I didn't bother with that.  I just fixed it
[00:04:24] <e1f> that's got to be a hardware guy doing programming
[00:04:31] *** Quits: anthk_ (~anthk_@90.167.181.191) (Ping timeout: 256 seconds)
[00:06:00] *** Joins: pflanze (~pflanze@61-41-178-139.dyn.fiber.qlnet.ch)
[00:07:52] *** Quits: wwalker (~wwalker@64.225.18.84) (Quit: leaving)
[00:11:19] *** Quits: entbsagtc^ (~entbsagtc@c-24-99-107-170.hsd1.ga.comcast.net) (Ping timeout: 260 seconds)
[00:14:26] *** Quits: Linux77 (~L30n4rd0@189-48-140-124.user3p.veloxzone.com.br) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[00:16:18] <shaldannon> gal.  and I don't know what her experience was.  she quit before I got there.
[00:17:36] <kjetilho> barewords filedescriptors are global, yeah.  pretty awful.
[00:18:01] <shaldannon> yeah ,,, and using them in different subs without explicitly passing them is worse
[00:19:01] <shaldannon> first thing I did was enable warnings and strict and start tracing down all the issues
[00:19:51] <shaldannon> second thing I did was combine all that crap into one file 'cause it being in 2 wasn't really serving any purpose... despite one allgedly being the main program and the other being hte library
[00:20:24] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f750:a200:f9d1:c665:a064:ac5a)
[00:21:02] <shaldannon> by the end of the year, it was OO with logicall separated actual object modules that could be overriden for different OS's (it was a home-brew systems monitoring program)
[00:21:27] * GumbyPAN CPAN Upload: Compress-Raw-Bzip2-2.103 by PMQS https://metacpan.org/release/PMQS/Compress-Raw-Bzip2-2.103
[00:21:27] * GumbyPAN CPAN Upload: Compress-Raw-Lzma-2.103 by PMQS https://metacpan.org/release/PMQS/Compress-Raw-Lzma-2.103
[00:21:30] * GumbyPAN CPAN Upload: Compress-Raw-Zlib-2.103 by PMQS https://metacpan.org/release/PMQS/Compress-Raw-Zlib-2.103
[00:21:32] * shaldannon wanders off for a bit
[00:21:36] * GumbyPAN CPAN Upload: Bundle-Compress-Zlib-2.103 by PMQS https://metacpan.org/release/PMQS/Bundle-Compress-Zlib-2.103
[00:21:42] * GumbyPAN CPAN Upload: IO-Compress-2.103 by PMQS https://metacpan.org/release/PMQS/IO-Compress-2.103
[00:21:48] * GumbyPAN CPAN Upload: IO-Compress-Lzf-2.103 by PMQS https://metacpan.org/release/PMQS/IO-Compress-Lzf-2.103
[00:21:51] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:d960:d98a:f624:8ef) (Ping timeout: 256 seconds)
[00:21:54] * GumbyPAN CPAN Upload: IO-Compress-Lzma-2.103 by PMQS https://metacpan.org/release/PMQS/IO-Compress-Lzma-2.103
[00:22:00] * GumbyPAN CPAN Upload: IO-Compress-Lzop-2.103 by PMQS https://metacpan.org/release/PMQS/IO-Compress-Lzop-2.103
[00:22:06] * GumbyPAN CPAN Upload: IO-Compress-Zstd-2.103 by PMQS https://metacpan.org/release/PMQS/IO-Compress-Zstd-2.103
[00:22:10] *** Joins: Linux77 (~L30n4rd0@189-48-140-124.user3p.veloxzone.com.br)
[00:22:34] *** Quits: Linux77 (~L30n4rd0@189-48-140-124.user3p.veloxzone.com.br) (Max SendQ exceeded)
[00:23:08] *** Joins: Linux77 (~L30n4rd0@189-48-140-124.user3p.veloxzone.com.br)
[00:26:27] * GumbyPAN CPAN Upload: Bundle-IO-Compress-Bzip2-2.103 by PMQS https://metacpan.org/release/PMQS/Bundle-IO-Compress-Bzip2-2.103
[00:31:28] * GumbyPAN CPAN Upload: OpenAPI-Modern-0.025 by ETHER https://metacpan.org/release/ETHER/OpenAPI-Modern-0.025
[00:31:43] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[00:33:59] <daemon> simcop2387, 
[00:34:00] <daemon> 21:03, <daemon> eval: my $x = 1; $x = $x + 1900; $x
[00:34:00] <daemon> 21:03, <perlbot> Out of memory!
[00:34:00] <daemon> 21:03, <perlbot> [Exited 1]
[00:34:04] <daemon> perlbot unhappy about something?
[00:34:05] <perlbot> daemon: No factoid found. Did you mean one of these: [unf] [undef] [unfair] [unescape] [unlawful] [unary plus] [unacceptable] [use php] [gumbehbrane] [gumbybrain]
[00:34:20] <pragma-> daemon: use smaller numbers
[00:34:23] <daemon> :P
[00:35:21] *** Joins: magla (~gelignite@55d411d7.access.ecotel.net)
[00:36:08] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[00:38:10] *** Joins: Trigon (~reuben@73.127.1.41)
[00:38:54] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Quit: Leaving)
[00:39:03] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[00:41:22] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:45:52] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f750:a200:f9d1:c665:a064:ac5a) (Ping timeout: 260 seconds)
[00:46:48] *** Joins: rgrinberg (~textual@177.248.158.166)
[01:00:17] *** Quits: Trigon (~reuben@73.127.1.41) (Ping timeout: 246 seconds)
[01:06:12] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[01:10:08] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[01:11:28] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Quit: WeeChat 3.4.1)
[01:13:43] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[01:19:50] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:21:19] *** Joins: monkey_ (~user@190.104.116.153)
[01:28:59] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Remote host closed the connection)
[01:29:31] *** Quits: PaulFranz (~pfranz@c-73-187-178-34.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[01:31:17] *** Joins: PaulFranz (~pfranz@c-73-187-178-34.hsd1.pa.comcast.net)
[01:33:12] *** Quits: monkey_ (~user@190.104.116.153) (Quit: ERC (IRC client for Emacs 27.2))
[01:35:18] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[01:40:11] *** Joins: monkey_ (~user@190.104.116.153)
[01:49:09] *** Joins: hurl (~hurl@212.183.219.210.dyn.user.ono.com)
[01:50:43] *** Joins: whynot (~whynot@37.73.143.29)
[01:54:10] *** Joins: Trigon (~reuben@73.127.1.41)
[01:55:13] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.185)
[01:58:55] *** Quits: n1to (~n1to@user/n1to) (Quit: Leaving)
[01:59:33] *** Joins: PaulFran1 (~pfranz@c-73-187-178-34.hsd1.pa.comcast.net)
[01:59:35] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.185) (Ping timeout: 260 seconds)
[01:59:44] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:02:42] *** Quits: PaulFranz (~pfranz@c-73-187-178-34.hsd1.pa.comcast.net) (Ping timeout: 272 seconds)
[02:03:38] *** Quits: Trigon (~reuben@73.127.1.41) (Ping timeout: 260 seconds)
[02:04:46] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[02:06:38] * GumbyPAN CPAN Upload: Win32-Mechanize-NotepadPlusPlus-0.010 by PETERCJ https://metacpan.org/release/PETERCJ/Win32-Mechanize-NotepadPlusPlus-0.010
[02:08:45] *** Quits: jess (~jess@libera/staff/cat/jess) ()
[02:15:32] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[02:16:55] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 240 seconds)
[02:22:20] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[02:22:52] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[02:23:02] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Remote host closed the connection)
[02:25:17] *** Joins: Trigon (~reuben@73.127.1.41)
[02:31:14] *** Joins: monkey_ (~user@190.104.116.153)
[02:33:41] *** Joins: ssh073 (~serg073@gateway/tor-sasl/serg073)
[02:37:00] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[02:43:44] *** Quits: magla (~gelignite@55d411d7.access.ecotel.net) (Quit: Stay safe!)
[02:44:56] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 246 seconds)
[02:47:30] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[02:52:02] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[02:52:24] *** Quits: hurl (~hurl@212.183.219.210.dyn.user.ono.com) (Quit: Leaving...)
[02:54:25] *** Quits: Michelle (~michelle@2407:8800:bc20:200a:7c00:910f:8e36:433c) (Read error: Connection reset by peer)
[02:56:08] *** Joins: Michelle (~michelle@2407:8800:bc20:200a:c1e9:36bc:28da:bd46)
[02:56:10] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[02:59:35] *** Joins: PaulFranz (~pfranz@c-73-187-178-34.hsd1.pa.comcast.net)
[03:02:14] *** Quits: PaulFran1 (~pfranz@c-73-187-178-34.hsd1.pa.comcast.net) (Ping timeout: 272 seconds)
[03:05:24] *** Quits: Trigon (~reuben@73.127.1.41) (Ping timeout: 272 seconds)
[03:06:02] *** Quits: bkhl (~bkhl@user/bkhl) (Ping timeout: 272 seconds)
[03:12:22] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[03:12:48] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[03:16:00] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[03:19:58] *** Quits: proller (~p@2a02:6b8:b081:18::1:32) (Remote host closed the connection)
[03:22:04] *** Joins: proller (~p@80.240.216.69)
[03:26:56] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 246 seconds)
[03:27:15] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Ping timeout: 240 seconds)
[03:27:19] *** Joins: proller (~p@2a02:6b8:b081:8804::1:1d)
[03:27:56] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[03:31:48] * GumbyPAN CPAN Upload: Data-Tools-1.28 by CADE https://metacpan.org/release/CADE/Data-Tools-1.28
[03:33:27] *** Quits: pizdets (~pizdets@183.182.115.164) (Ping timeout: 260 seconds)
[03:33:43] *** Joins: pizdets_ (~pizdets@183.182.115.90)
[03:45:40] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[03:45:40] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[03:45:40] *** finn_elija is now known as FinnElija
[03:51:10] *** Joins: Trigon (~reuben@73.127.1.41)
[03:59:29] *** Quits: Trigon (~reuben@73.127.1.41) (Ping timeout: 246 seconds)
[04:06:52] * GumbyPAN CPAN Upload: SPVM-0.9509_02 by KIMOTO https://metacpan.org/release/KIMOTO/SPVM-0.9509_02
[04:13:03] *** Quits: proller (~p@2a02:6b8:b081:8804::1:1d) (Ping timeout: 260 seconds)
[04:27:06] *** Joins: proller (~p@80.240.216.69)
[04:29:29] *** Quits: whynot (~whynot@37.73.143.29) (Quit: leaving)
[04:32:23] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[04:34:42] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[04:38:03] <cjac> I'm forming a not for profit to account for all of this open source work I'm doing.
[04:38:36] <cjac> daemon: I bet you meant unf.
[04:39:54] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:47:33] *** Joins: proller (~p@2a02:6b8:b081:b705::1:32)
[04:49:06] *** Joins: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com)
[04:50:27] *** Joins: TieUpYourCamel (~david@2600:1702:26a0:2000:f9dc:da07:5947:eede)
[04:51:46] *** Quits: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com) (Client Quit)
[04:58:20] *** Joins: Trigon (~reuben@73.127.1.41)
[05:07:51] *** Quits: Croran (~Croran@71.231.214.173) (Quit: leaving)
[05:09:37] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[05:15:35] *** Quits: proller (~p@2a02:6b8:b081:b705::1:32) (Ping timeout: 260 seconds)
[05:17:25] *** Quits: Michelle (~michelle@2407:8800:bc20:200a:c1e9:36bc:28da:bd46) (Quit: This computer has gone to sleep)
[05:17:56] *** Joins: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[05:20:24] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[05:25:58] *** Joins: Michelle (~michelle@gate.mhix.org)
[05:39:19] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Remote host closed the connection)
[05:45:32] *** Joins: monkey_ (~user@190.104.116.153)
[05:47:48] *** Quits: rgrinberg (~textual@177.248.158.166) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:49:11] *** Joins: bkhl (~bkhl@user/bkhl)
[06:04:25] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[06:05:00] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[06:07:41] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[06:08:26] *** Quits: Trigon (~reuben@73.127.1.41) (Ping timeout: 272 seconds)
[06:08:59] *** Quits: Pali (~pali@user/pali) (Ping timeout: 246 seconds)
[06:11:47] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[06:12:17] *** Joins: monkey_ (~user@190.104.116.153)
[06:14:05] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[06:29:01] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:32:08] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 260 seconds)
[06:40:59] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 260 seconds)
[06:44:06] *** Joins: Pixi (~Pixi@user/pixi)
[06:57:18] <genio> What's a good anger-draining thing to do?
[07:11:57] *** Joins: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com)
[07:13:00] <haarg> trepanning
[07:14:54] <genio> might be for the best right now.
[07:36:32] *** Quits: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:41:51] *** Joins: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com)
[07:45:37] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[07:45:56] *** Quits: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com) (Client Quit)
[07:53:28] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[08:05:48] *** Joins: Martchus (~martchus@2a01:c22:7312:fb00:d250:99ff:fe49:3cce)
[08:06:13] *** Quits: Martchus_ (~martchus@2a01:c22:76b6:db00:d250:99ff:fe49:3cce) (Ping timeout: 240 seconds)
[08:12:18] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[08:22:04] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[08:22:05] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[08:25:45] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[08:26:27] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[08:37:51] *** Quits: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:37:51] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:40:16] *** Joins: ekathva (~ekathva@2001:999:250:8f1f:9d72:5a3d:d0:fe01)
[08:41:42] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 272 seconds)
[08:46:23] * GumbyPAN welcomes DATKINSON - Dudley Atkinson to CPAN!
[08:46:23] * GumbyPAN welcomes DWALKER - David William Walker to CPAN!
[08:47:41] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.185)
[08:47:44] *** Joins: Urawa (Awaru@gateway/vpn/airvpn/awaru)
[08:48:57] *** Joins: openbsdbeta (~aa@184-99-114-151.boid.qwest.net)
[08:50:33] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[08:50:43] *** Quits: Awaru (Awaru@gateway/vpn/airvpn/awaru) (Ping timeout: 260 seconds)
[08:50:55] *** Joins: tejr (~tejr@user/tejr)
[08:57:41] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 246 seconds)
[09:03:25] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[09:16:48] *** Joins: mattil (~mattil@dzypk8xb7ssjxvx7nhz-4.rev.dnainternet.fi)
[09:17:09] *** Joins: Trigon (~reuben@144.39.114.115)
[09:19:04] *** Quits: mattil (~mattil@dzypk8xb7ssjxvx7nhz-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:20:31] *** Joins: mattil (~mattil@dzypk8xb7ssjxvx7nhz-4.rev.dnainternet.fi)
[09:20:59] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:22:14] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[09:32:04] *** Quits: mattil (~mattil@dzypk8xb7ssjxvx7nhz-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:32:32] *** Joins: mattil (~mattil@dzypk8xb7ssjxvx7nhz-4.rev.dnainternet.fi)
[09:36:03] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:4c02:f151:a5e3:57bd) (Ping timeout: 256 seconds)
[09:36:11] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.185) (Ping timeout: 246 seconds)
[09:37:26] *** Quits: japh (~scp1@user/japh) (Ping timeout: 272 seconds)
[09:37:27] *** Quits: mattil (~mattil@dzypk8xb7ssjxvx7nhz-4.rev.dnainternet.fi) (Ping timeout: 260 seconds)
[09:37:44] *** Joins: japh (~scp1@user/japh)
[09:37:53] *** Joins: mattil (~mattil@dzypk8xb7ssjxvx7nhz-4.rev.dnainternet.fi)
[09:44:03] *** Joins: mncheck (~mncheck@193.224.205.254)
[09:48:33] *** Quits: mncheck (~mncheck@193.224.205.254) (Remote host closed the connection)
[09:48:51] *** Quits: mattil (~mattil@dzypk8xb7ssjxvx7nhz-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:49:18] *** Joins: mattil (~mattil@dzypk8xb7ssjxvx7nhz-4.rev.dnainternet.fi)
[09:49:54] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:53:47] *** Quits: mattil (~mattil@dzypk8xb7ssjxvx7nhz-4.rev.dnainternet.fi) (Ping timeout: 260 seconds)
[09:56:45] *** Joins: monkey_ (~user@190.104.116.153)
[10:02:25] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:02:35] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[10:04:07] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[10:26:24] *** Quits: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net) (Quit: because)
[10:30:03] *** Joins: cuhela (~cuhela@188.119.45.227)
[10:33:21] *** Joins: haj1 (~haj@p200300eda707e000499ddefd12113287.dip0.t-ipconnect.de)
[10:43:19] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[10:51:49] *** Joins: art1 (~romeyke@p200300ccdf083a00c84f4cdb9c6a3054.dip0.t-ipconnect.de)
[10:52:41] *** Joins: randir_ (~randir@95-31-138-202.broadband.corbina.ru)
[10:53:55] *** Quits: randir (~randir@95-31-138-202.broadband.corbina.ru) (Ping timeout: 256 seconds)
[10:55:41] *** Joins: mexen (uid495612@user/mexen)
[11:04:35] *** Joins: tobybl (~tobybl@132.202.200.146.dyn.plus.net)
[11:09:27] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (*.net *.split)
[11:09:27] *** Quits: rewt (~default@user/rewt) (*.net *.split)
[11:09:27] *** Quits: rorx (~rorx@cpe-65-24-161-82.columbus.res.rr.com) (*.net *.split)
[11:09:27] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[11:09:27] *** Quits: Malin (lounge@pirate.pt) (*.net *.split)
[11:09:27] *** Quits: gce108 (~gce@user/gce108) (*.net *.split)
[11:09:27] *** Quits: vanfanel64 (~vanfanel6@user/vanfanel64) (*.net *.split)
[11:09:27] *** Quits: deadmarshal (deadmarsha@deadmarshal.nastycode.com) (*.net *.split)
[11:09:27] *** Quits: sl0w (~sl0w@64.225.43.238) (*.net *.split)
[11:09:27] *** Quits: bd3i (~bd3i@167.99.97.12) (*.net *.split)
[11:09:27] *** Quits: jink (mrjink@chat.jink.net) (*.net *.split)
[11:09:27] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[11:09:27] *** Quits: ndorf (~nd@ob.noxio.us) (*.net *.split)
[11:09:27] *** Quits: nshp (hi@2600:3c03::f03c:91ff:fe2c:cd67) (*.net *.split)
[11:09:27] *** Quits: daxim (~daxim@2a02:b18:c13b:28:42b0:76ff:fe7b:7663) (*.net *.split)
[11:09:27] *** Quits: TitanOfOld (~titan@gentoo/developer/TitanOfOld) (*.net *.split)
[11:09:28] *** Quits: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2) (*.net *.split)
[11:09:28] *** Quits: neilb___ (sid492745@2a03:5180:f:3::7:84c9) (*.net *.split)
[11:09:28] *** Quits: ranguard (sid496095@2a03:5180:f:2::7:91df) (*.net *.split)
[11:09:28] *** Quits: depesz (~quassel@lana.depesz.com) (*.net *.split)
[11:09:28] *** Quits: skrzyp (~skrzyp@skrzyp.net) (*.net *.split)
[11:09:28] *** Quits: sdk_ (~x@shell.codevoid.de) (*.net *.split)
[11:09:28] *** Quits: digdilem (~digdilem@rolf.yuss.org) (*.net *.split)
[11:09:28] *** Quits: bdiddy_ (~bdiddy@li654-123.members.linode.com) (*.net *.split)
[11:09:28] *** Quits: sobukus (~sobukus@sourcemage/mage/sobukus) (*.net *.split)
[11:09:28] *** Quits: deecat (~deecat@73.99.215.70) (*.net *.split)
[11:09:28] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (*.net *.split)
[11:09:36] *** Joins: nshp (hi@2600:3c03::f03c:91ff:fe2c:cd67)
[11:09:36] *** Joins: bdiddy (~bdiddy@li654-123.members.linode.com)
[11:09:37] *** Joins: jink (mrjink@chat.jink.net)
[11:09:39] *** Joins: sdk_ (sdk@shell.codevoid.de)
[11:09:50] *** Joins: deecat (~deecat@73.99.215.70)
[11:09:54] *** Joins: mingdao (~mingdao@107-146-172-064.res.spectrum.com)
[11:09:55] *** Joins: sobukus (~sobukus@sourcemage/mage/sobukus)
[11:09:56] *** Joins: ndorf (~nd@ob.noxio.us)
[11:09:59] *** Joins: skrzyp (~skrzyp@skrzyp.net)
[11:10:00] *** Joins: daxim (~daxim@2a02:b18:c13b:28:42b0:76ff:fe7b:7663)
[11:10:03] *** Joins: neilb___ (sid492745@2a03:5180:f:3::7:84c9)
[11:10:08] *** Joins: ranguard (sid496095@id-496095.lymington.irccloud.com)
[11:10:12] *** Quits: mingdao (~mingdao@107-146-172-064.res.spectrum.com) (Changing host)
[11:10:12] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[11:10:16] *** Joins: Malin (lounge@pirate.pt)
[11:10:24] *** Joins: rewt (~default@user/rewt)
[11:10:39] *** Joins: gce108 (~gce@user/gce108)
[11:10:40] *** Joins: digdilem (~digdilem@rolf.yuss.org)
[11:11:02] *** Joins: vanfanel64 (~vanfanel6@user/vanfanel64)
[11:11:02] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[11:11:14] *** Joins: quesker (~idnet@mail.89vx.net)
[11:11:21] *** Joins: TitanOfOld (~titan@gentoo/developer/TitanOfOld)
[11:11:22] *** Joins: depesz (~quassel@lana.depesz.com)
[11:11:59] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[11:13:11] *** Quits: ghenry (~ghenry@ghenry.plus.com) (*.net *.split)
[11:13:11] *** Quits: madduck (~madduck@user/madduck) (*.net *.split)
[11:13:11] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[11:13:12] *** Quits: haarg (haarg@haarg.org) (*.net *.split)
[11:13:12] *** Quits: Getty (getty@stardestroyer.de) (*.net *.split)
[11:13:12] *** Quits: Exodist (sid433366@id-433366.hampstead.irccloud.com) (*.net *.split)
[11:13:12] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[11:13:12] *** Quits: El_Che (~nxadm@ssh2.ulyssis.student.kuleuven.be) (*.net *.split)
[11:13:12] *** Quits: jercos (jercos@xyl.be) (*.net *.split)
[11:13:12] *** Quits: murrayn (~murray@user/murrayn) (*.net *.split)
[11:13:12] *** Quits: vinnix (~vinnix@user/vinnix) (*.net *.split)
[11:13:12] *** Quits: greeb (~greeb@blahblahblah.anime.horse) (*.net *.split)
[11:13:12] *** Quits: samebchase (~samebchas@51.15.68.182) (*.net *.split)
[11:13:19] *** Joins: jercos (jercos@xyl.be)
[11:13:23] *** Joins: El_Che (~nxadm@ssh2.ulyssis.student.kuleuven.be)
[11:13:24] *** Joins: Getty (~getty@stardestroyer.de)
[11:13:24] *** Joins: deadmarshal (deadmarsha@deadmarshal.nastycode.com)
[11:13:25] *** Joins: madduck (~madduck@matilda.madduck.net)
[11:13:28] *** Quits: madduck (~madduck@matilda.madduck.net) (Changing host)
[11:13:28] *** Joins: madduck (~madduck@user/madduck)
[11:13:36] *** Joins: Exodist (sid433366@id-433366.hampstead.irccloud.com)
[11:13:44] *** Joins: vinnix (~vinnix@user/vinnix)
[11:13:45] *** Joins: greeb (~greeb@blahblahblah.anime.horse)
[11:13:50] *** Joins: celphi (sid97751@user/celphi)
[11:13:59] *** Joins: Exa (exa@irc.moe)
[11:14:04] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[11:14:06] *** Joins: haarg (haarg@haarg.org)
[11:14:28] *** Joins: murrayn (~murray@static.38.4.181.135.clients.your-server.de)
[11:14:44] *** Joins: sl0w (~sl0w@64.225.43.238)
[11:14:51] *** Joins: koolazer (~koo@user/koolazer)
[11:15:20] *** Joins: ignarps (~iggy@user/ignarps)
[11:16:35] *** Quits: ignarps (~iggy@user/ignarps) (Client Quit)
[11:17:28] *** Quits: cuhela (~cuhela@188.119.45.227) (Remote host closed the connection)
[11:18:43] *** Joins: rorx (~rorx@cpe-65-24-161-82.columbus.res.rr.com)
[11:24:24] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:29:24] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[11:29:47] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[11:31:41] * GumbyPAN CPAN Upload: Acme-Glue-2022.04 by LEEJO https://metacpan.org/release/LEEJO/Acme-Glue-2022.04
[11:35:51] *** Quits: randir_ (~randir@95-31-138-202.broadband.corbina.ru) (Remote host closed the connection)
[11:51:44] * GumbyPAN CPAN Upload: Sentry-SDK-v1.1.0 by PMB https://metacpan.org/release/PMB/Sentry-SDK-v1.1.0
[11:51:56] *** Quits: dacav (~dacav@h94-245-9-203.cust.a3fiber.se) (Remote host closed the connection)
[11:57:36] *** Joins: Pali (~pali@user/pali)
[11:59:59] <rindolf> hi all! please review https://github.com/shlomif/perl-XML-LibXSLT/blob/master/lib/XML/LibXSLT/Quick.pm
[12:00:00] <Paperbot> Link title(s): [ perl-XML-LibXSLT/Quick.pm at master · shlomif/perl-XML-LibXSLT · GitHub ]
[12:00:11] *** Quits: openbsdbeta (~aa@184-99-114-151.boid.qwest.net) (Ping timeout: 260 seconds)
[12:10:04] *** Quits: Urawa (Awaru@gateway/vpn/airvpn/awaru) (Ping timeout: 272 seconds)
[12:11:13] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[12:12:47] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[12:16:54] *** Joins: fwg (~fwg@user/fwg)
[12:17:29] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[12:19:51] *** Joins: Awaru (Awaru@gateway/vpn/airvpn/awaru)
[12:21:39] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 260 seconds)
[12:21:45] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[12:22:14] *** Joins: Martchus_ (~martchus@dynamic-095-114-114-041.95.114.pool.telefonica.de)
[12:22:23] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[12:23:24] *** Quits: Martchus (~martchus@2a01:c22:7312:fb00:d250:99ff:fe49:3cce) (Ping timeout: 240 seconds)
[12:32:33] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:34:46] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 272 seconds)
[12:36:02] *** Quits: alex11 (~alex11@user/alex11) (Quit: Leaving)
[12:39:54] *** Joins: Trigon (~reuben@144.39.114.115)
[12:49:15] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:50:35] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[12:52:49] *** Joins: fling (~fling@user/fling)
[12:56:35] *** Joins: ccntrq (~Thunderbi@2a01:e34:eccb:b060:974:50d0:1066:ad50)
[13:05:18] *** Joins: scubanarc_ (~scubanarc@068-186-074-034.res.spectrum.com)
[13:06:33] *** Joins: jpn (~jpn@user/jpn)
[13:08:59] *** Quits: scubanarc (~scubanarc@068-186-074-034.res.spectrum.com) (Ping timeout: 246 seconds)
[13:09:28] *** Joins: eroux (~eroux@102-65-72-61.ftth.web.africa)
[13:15:37] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[13:19:40] *** Joins: fwg (~fwg@user/fwg)
[13:26:43] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 260 seconds)
[13:28:17] *** Quits: sokan (~sokan@2a02:587:9e11:bc00:227:eff:fe16:865d) (Quit: Reality.is.a.lie)
[13:34:30] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[13:43:17] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[13:47:26] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 268 seconds)
[13:49:17] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[13:54:58] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[13:57:22] <japh> hm, where can I find exactly what a  use v5.30;  enables?
[14:00:37] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[14:01:58] * GumbyPAN CPAN Upload: App-Greple-subst-2.3002 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-Greple-subst-2.3002
[14:02:11] <daemon> hey all, if I ahd a simple IO::Async script such as https://dpaste.org/uVqrpEk I am expecting many parallel connections, lets say for the sake of argument 10, if I want a unique identifier for each connection received how would I do that, these connections can be quite long running
[14:02:12] <Paperbot> Link title(s): [ dpaste/uVqrpEk (Perl) ]
[14:08:05] <Botje> my $unique_id = ++$global_counter;
[14:09:10] <Botje> somewhere inside on_stream
[14:09:56] <Botje> or just use $peeraddr, that is unique enough
[14:10:48] *** Joins: magla (~gelignite@d5365b83.access.ecotel.net)
[14:11:48] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[14:12:52] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[14:13:40] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Remote host closed the connection)
[14:14:01] <Altreus> japh: I believe that is in perldoc feature
[14:14:15] <Altreus> peer upon :5.30 
[14:15:17] <daemon> Botje, ah cool, in this case peeraddr is all the same
[14:15:37] <daemon> did not think a global counter would work
[14:16:53] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Ping timeout: 260 seconds)
[14:17:26] <Botje> *a local snapshot of a global counter
[14:18:10] *** Joins: proller (~p@80.240.216.69)
[14:20:21] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[14:20:27] *** Joins: fwg (~fwg@user/fwg)
[14:23:18] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[14:28:39] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[14:29:00] <Altreus> just use a guid :P
[14:30:41] <ilmari> japh: see also `perldoc -f use`: «If the specified Perl version is greater than or equal to 5.12.0, strictures are enabled lexically as with "use strict". Similarly, warnings are enabled if "VERSION" is 5.35.0 or higher.»
[14:31:37] <deadmarshal> Does the sort function in perl use the quick sort algorithm?
[14:32:36] <rindolf> deadmarshal: no
[14:32:53] <rindolf> deadmarshal: mergesort iirc
[14:33:30] <ilmari> until 5.28 you had the option to request quicksort via `use sort '_quicksort';`, but that's gone now
[14:33:36] <ilmari> s/until/before/
[14:33:48] <deadmarshal> thanks
[14:34:01] <ilmari> perlbot: tell deadmarshal about sort
[14:34:01] <perlbot> deadmarshal: A Fresh Look at Efficient Perl Sorting:  http://www.sysarch.com/Perl/sort_paper.html
[14:34:05] <ilmari> perlbot: tell deadmarshal about perldoc sort
[14:34:05] <perlbot> deadmarshal: https://perldoc.perl.org/sort
[14:34:21] <ilmari> that link ^^
[14:35:15] <ilmari> the first link is outdated and claims perl uses quicksort
[14:36:49] <ilmari> 5.8 added mergesort and made it the default, before that it was quicksort
[14:36:55] <deadmarshal> most langs use quicksort i think
[14:37:08] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[14:37:57] <ilmari> rust uses «an adaptive, iterative merge sort inspired by timsort» - https://doc.rust-lang.org/std/primitive.slice.html#method.sort
[14:38:00] <Paperbot> Link title(s): [ slice - Rust ]
[14:38:33] <ilmari> plain quicksort has O(N²) worst-case performance, which is not great
[14:39:53] <deadmarshal> right
[14:41:32] <ilmari> python also uses timsort: https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts
[14:41:32] <Paperbot> Link title(s): [ Sorting HOW TO — Python 3.10.4 documentation ]
[14:41:54] <Altreus> I think until was also correct there
[14:42:03] * GumbyPAN CPAN Upload: Alien-patchelf-0.04 by SLAFFAN https://metacpan.org/release/SLAFFAN/Alien-patchelf-0.04
[14:42:29] <Altreus> Do you suppose unless was originally unlest
[14:42:36] <ilmari> ah, timsort was invented for python
[14:42:47] <Altreus> it was not :(
[14:43:25] <Altreus> etymology is interesting
[14:43:43] <ilmari> «[Timsort] is also used to sort arrays of non-primitive type in Java SE 7, on the Android platform, in GNU Octave, on V8, Swift, and Rust.» - https://en.wikipedia.org/wiki/Timsort
[14:43:44] <Paperbot> Link title(s): [ Timsort - Wikipedia ]
[14:44:55] *** Quits: csrf (~csrf@user/csrf) (Ping timeout: 260 seconds)
[14:45:01] *** Joins: csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net)
[14:47:53] *** Joins: fwg (~fwg@user/fwg)
[14:50:14] *** Quits: magla (~gelignite@d5365b83.access.ecotel.net) (Read error: Connection reset by peer)
[14:50:33] *** Joins: magla (~gelignite@d5365b83.access.ecotel.net)
[14:53:37] *** magla is now known as jellyknight
[14:57:04] * GumbyPAN CPAN Upload: HTTP-CSPHeader-v0.1.1 by RRWO https://metacpan.org/release/RRWO/HTTP-CSPHeader-v0.1.1
[14:57:25] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[15:30:17] *** Quits: csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:31:00] *** Joins: csrf (~csrf@user/csrf)
[15:40:57] <Altreus> I suspect I may have been sick of the task at this point: * 4821732 Don't do it wrong
[15:41:10] *** Quits: fwg (~fwg@user/fwg) (Quit: so long and thanks for all the fish.)
[15:48:51] *** Quits: omegatron (~some@p54bd5280.dip0.t-ipconnect.de) (Quit: Power is a curious thing.It can be contained, hidden, locked away,and yet it always breaks free.)
[15:54:15] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[15:54:53] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 246 seconds)
[15:58:00] <dwalker> hi all.  I finally registered a CPAN account (DWALKER) after using perl since 2002.  I plan to release some modules for processing NVDs, CVEs and IP addresses.
[15:58:38] <Altreus> welcome :)
[15:58:50] <Altreus> thank you for your contributions!
[16:00:25] <dwalker> Altreus: thanks.  I'm thinking of starting with a plugin for Sort::Key, like  Sort::Key::IPv4 but  Sort::Key::CVE.  It is not too complicated but there are some rules for sorting CVEs and I keep reinventing it in every program I make.
[16:01:49] <dwalker> or it could be too simple....
[16:03:21] *** Joins: fwg (~fwg@user/fwg)
[16:07:13] * GumbyPAN CPAN Upload: SemanticWeb-Schema-v14.0.0 by RRWO https://metacpan.org/release/RRWO/SemanticWeb-Schema-v14.0.0
[16:12:49] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 248 seconds)
[16:14:12] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 268 seconds)
[16:16:12] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:25:16] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.185)
[16:26:21] *** Joins: betabox (~betabox@nextcloud.schnuerle.com)
[16:26:30] *** Quits: betabox (~betabox@nextcloud.schnuerle.com) (Client Quit)
[16:26:45] <Altreus> You could provide subs that can be given to sort_by ... :)
[16:26:55] * Altreus looks at Sort::Key
[16:27:41] <Altreus> Sort::Key /is/ List::UtilsBy::sort_by
[16:27:51] <Altreus> i.e. a schwartzian transform passed to sort
[16:30:14] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.185) (Ping timeout: 268 seconds)
[16:34:09] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 248 seconds)
[16:35:57] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:42:55] <Botje> dwalker: well, how _do_ you sort CVE scores? I believe the criteria form a lattice and the numbersa re only indicative?
[16:47:01] <dwalker> CVEs are a bit more complicated that they used to be, the length of the numeric part after the year is now variable length.  I use the following regexp: m/CVE-\d{4}-(\d{4,7})/
[16:47:36] <dwalker> and then sort by the first 4 digit number then by the 4-7 digit number
[16:49:19] <dwalker> see https://cve.mitre.org/cve/identifiers/tech-guidance.html
[16:49:19] <Paperbot> Link title(s): [ CVE -    Technical Guidance for Handling the New CVE ID Syntax (Archived) ]
[16:50:41] <dwalker> so I wonder if that is something worthy of its own CPAN module, or should just live on as a subroutine in my own code.  How to know if something like this is useful enough to make a CPAN module?
[16:51:45] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 248 seconds)
[16:53:17] <dwalker> or I thought about making a general CVE module with functions to check for a valid CPE number, and properly sort them, and optionally look up details on NVD's web site
[16:54:45] <LeoNerd> Generally any sort is usually best written as a conversion function + sort_by
[16:54:51] <LeoNerd> (or equivalent)
[16:55:10] <dwalker> LeoNerd: thanks, I will investigate
[16:56:23] <Altreus> the upshot presumably being that the conversion function is the useful thing to share :)
[16:56:31] <LeoNerd> Yup
[16:57:55] <dwalker> where are these "coversion functions" shared? as a separate dist? or bundled with List::UtilsBy::sort_by ?
[16:58:28] <Altreus> normally you'd name something suitably with the rest of the domain-specific functionality
[16:58:50] <Altreus> Which implies there are CVE modules already on CPAN to put it with :D
[17:00:32] <LeoNerd> I can't see "CVE" without thinking "CVS2
[17:00:36] <LeoNerd> "CVS"
[17:00:50] <dwalker> I cant find any CVE modules on metacpan , just one - OpenServices::SNMP::Plugin::CVE 
[17:01:20] <Altreus> What /is/ CVE?
[17:01:28] <dwalker> thats why I thought it could be a useful thing.  although there must be a tiny number of folks using CVEs
[17:01:38] *** Joins: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com)
[17:01:44] <ilmari> Common Vulnerabilities and Exp… somtehings
[17:01:49] <dwalker> CVE, short for Common Vulnerabilities and Exposures, is a list of publicly disclosed computer security flaws. When someone refers to a CVE, they mean a security flaw that's been assigned a CVE ID number.
[17:01:58] <Altreus> oh yes, that's why it rings a bell
[17:02:06] <Altreus> I was talking about exploits the other day :)
[17:02:21] <ilmari> https://www.cve.org/
[17:02:22] <Paperbot> Link title(s): [ cve-website ]
[17:02:23] <dwalker> used by security researchers, penetration testers (like me) and security scanners
[17:03:15] <Altreus> I would observe that "then_by" is not a thing you get with sort_by, but you can sort { key_for($a) <=> key_for($b) || another_key_for($a) <=> another_key_for($b) ... }
[17:03:30] <dwalker> every bug in any software will get its own CVE number, and each is given a "score" to tell you how important it is to get fixed 
[17:03:37] <Altreus> So if the rules are nontrivial but devolve into "try this then try this" then you'll want to use plain sort
[17:03:48] <LeoNerd> Usually such sorts are best expressed as a -single- key function
[17:03:59] <LeoNerd> Yield a string if you have to
[17:04:07] <dwalker> I have been using: my @sorted_cves = sort { cve_year_key($a) <=> cve_year_key($b) || cve_num_key($a) <=> cve_num_key($b)} @cves;
[17:04:28] <Altreus> True, you can usually find a domain-specific sort key that doesn't trip over data formatting
[17:04:37] <LeoNerd> sort_by { sprintf "%04d/%d", cve_year($_), cvs_num($_) }
[17:04:42] <dwalker> where those subs cve_year_key and cve_num_key use regex to extract the date part and numeric part from the CVE string
[17:04:57] <ilmari> LeoNerd: you'd want %07d for the cve_num() part
[17:05:10] <Altreus> all this time I've been implying nsort_by instead of sort_by, but of course sort_by works with strings anyway
[17:05:37] <Altreus> dwalker: is "key" relevant in those sub names?
[17:05:41] <dwalker> like m/CVE-(\d{4})-\d{4,7}/ and m/CVE-\d{4}-(\d{4,7})/
[17:06:07] <LeoNerd> Yeah true
[17:06:08] <dwalker> no, key is not relevant
[17:06:38] <Altreus> I would counsel applying some sort of razor to it then :D
[17:06:47] <Altreus> I'm sure someone's named one
[17:06:49] <dwalker> the above has been working well for me, but I need the same functionality in lots of my scripts, so I thought it may be suitable for making a module
[17:06:59] <Altreus> As specific as possible, but no specificer
[17:07:06] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:07:11] <LeoNerd> sort_by { sprintf "%04d/%07d", (m/CVS-(\d+)-(\d+)/)[1,0] }
[17:07:12] <dwalker> Altreus: agree, noted
[17:07:12] <LeoNerd> done
[17:08:04] *** Joins: proller (~p@2a02:6b8:b081:20::1:2a)
[17:08:11] *** Quits: WinterStar (~IceLight@user/icelight) (Quit: WeeChat 3.4.1)
[17:08:13] <dwalker> will that work for the example shown on mitre.org I pasted above?
[17:08:15] <ilmari> sub normalise_cve_key { $_[0] =~ s/-(\d+)\z/sprintf %07d, $1/re }
[17:08:17] <dwalker> "Consider the series of CVE-2014-1234, CVE-2014-9999, CVE-2014-10000, and CVE-2014-12345. Many simplistic string-based searches would sort these"
[17:08:31] <dwalker> ...incorrectly
[17:08:55] <ilmari> if you left-pad with zeros it to the longest possible, a simple asciibetical sort will dtrt
[17:09:23] <ilmari> sub normalise_cve_key { $_[0] =~ s/-(\d+)\z/sprintf '-%07d', $1/re } # fixed
[17:09:41] *** Joins: WinterStar (~IceLight@user/icelight)
[17:10:02] <Altreus> dwalker: TIAS!
[17:10:32] *** Quits: WinterStar (~IceLight@user/icelight) (Client Quit)
[17:10:42] <Altreus> eval: use List::UtilsBy qw(sort_by); [ sort_by { sprintf "%04d/%07d", (m/CVS-(\d+)-(\d+)/)[1,0] } qw/ CVE-2014-1234 CVE-2014-9999 CVE-2014-10000 CVE-2014-12345 / ]
[17:10:44] <perlbot> Altreus: Missing argument in sprintf at (IRC) line 1. Missing argument in sprintf at (IRC) line 1. Missing argument in sprintf at (IRC) line 1. Missing argument in sprintf at (IRC) line 1. Missing argument in sprintf at (IRC) line 1. Missing argument in sprintf at (IRC) line 1. Missing argument in sprintf at (IRC) line 1. Missing argument in sprintf at (IRC... [Output truncated. http://perl.bot/p/mx7h3f ]
[17:10:45] <LeoNerd> That's the entire point of the %07d part
[17:10:58] <ilmari> sweval: use List::UtilsBy 'sort_by' [ sort_by { s/-(\d+)\z/sprintf '-%07d', $1/re } qw(CVE-2014-1234 CVE-2014-9999 CVE-2014-10000 CVE-2014-12345)
[17:10:58] <Altreus> u wor m8
[17:11:00] <perlbot> ilmari: ERROR: syntax error at (IRC) line 1, near "'sort_by' [" Missing right curly or square bracket at (IRC) line 1, at end of line 
[17:11:05] <ilmari> sweval: use List::UtilsBy 'sort_by'; [ sort_by { s/-(\d+)\z/sprintf '-%07d', $1/re } qw(CVE-2014-1234 CVE-2014-9999 CVE-2014-10000 CVE-2014-12345) ]
[17:11:07] <perlbot> ilmari: ["CVE-2014-1234","CVE-2014-9999","CVE-2014-10000","CVE-2014-12345"]
[17:11:08] *** Joins: WinterStar (~IceLight@user/icelight)
[17:11:32] <Altreus> what's wrong with LeoNerd's syntax then
[17:12:09] <dwalker> the CVE format is /^CVE-\d{4}-(0\d{3}|[1-9]\d{3,})$/
[17:12:18] <Altreus> oh it didn't match stuff :)
[17:12:27] <Altreus> he put CVS again :P
[17:12:32] <LeoNerd> Hah! Oops
[17:12:39] <ilmari> also, he's sorting by number first, then year
[17:12:42] <dwalker> I will do some experiments on your suggestions above, thanks
[17:12:58] <Altreus> eval: use List::UtilsBy qw(sort_by); [ sort_by { sprintf "%04d/%07d", m/CVE-(\d+)-(\d+)/ } qw/ CVE-2014-1234 CVE-2014-9999 CVE-2014-10000 CVE-2014-12345 / ]
[17:13:00] <perlbot> Altreus: free(): invalid pointer [Exited 1]
[17:13:02] <Altreus> nice
[17:13:07] <ilmari> sweval: use List::UtilsBy 'sort_by'; [ sort_by { s/-(\d+)\z/sprintf '-%07d', $1/re } qw(CVE-2014-1234 CVE-2015-1 CVE-2014-9999 CVE-2014-10000 CVE-2014-12345) ]
[17:13:09] <LeoNerd> Oh duh. For some reason I imagined the number went first. No idea why
[17:13:09] <perlbot> ilmari: free(): invalid pointer [Exited 1]
[17:13:21] <ilmari> perlbot: die
[17:13:22] <perlbot> ilmari: no u
[17:13:23] <Altreus> we crashed perl with a simple sort_by
[17:13:30] <ilmari> sweval: die
[17:13:32] <perlbot> ilmari: Out of memory! [Exited 1]
[17:13:40] <Altreus> simcop2387: red alert
[17:13:42] <ilmari> eval: say wat
[17:13:44] <perlbot> ilmari: Unquoted string "wat" may clash with future reserved word at (IRC) line 1. ERROR: Bareword filehandle "wat" not allowed under 'no feature "bareword_filehandles"' at (IRC) line 1. 
[17:13:49] <dwalker> kek
[17:13:52] <ilmari> eval: say "wat"
[17:13:54] <perlbot> ilmari: free(): invalid pointer [Exited 1]
[17:15:49] *** Quits: Joel (~jjshoe@user/joel) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[17:19:21] *** Joins: Joel (~jjshoe@user/joel)
[17:19:32] *** Joins: diskin (~diskin@ec2-52-89-211-63.us-west-2.compute.amazonaws.com)
[17:26:31] <simcop2387> eval: 1
[17:26:32] <perlbot> simcop2387: free(): invalid pointer [Exited 1]
[17:26:35] <simcop2387> o_O
[17:26:57] <simcop2387> eval: 1
[17:26:58] <perlbot> simcop2387: Out of memory! [Exited 1]
[17:27:12] <revhippie> eep!
[17:27:18] <buZz> eval: 0
[17:27:19] <perlbot> buZz: 0
[17:27:27] <revhippie> 0 uses less memory than 1.
[17:27:28] <buZz> eval: -1
[17:27:30] <perlbot> buZz: -1
[17:27:33] <buZz> eval: 1
[17:27:34] <perlbot> buZz: 1
[17:27:36] <buZz> ¯\_(ツ)_/¯
[17:27:50] <simcop2387> could not catch what the runaway was
[17:28:06] <buZz> eval: 1
[17:28:08] <perlbot> buZz: 1
[17:28:11] <simcop2387> it cleared itself though
[17:28:14] <buZz> eval: 1
[17:28:16] <perlbot> buZz: 1
[17:28:21] <buZz> eval: １
[17:28:23] <perlbot> buZz: ERROR: Unrecognized character \x{ff11}; marked by <-- HERE after use utf8; <-- HERE near column 11 at (IRC) line 1. 
[17:28:25] <buZz> hehe
[17:30:30] <simcop2387> eval: use List::UtilsBy qw(sort_by); [ sort_by { sprintf "%04d/%07d", m/CVE-(\d+)-(\d+)/ } qw/ CVE-2014-1234 CVE-2014-9999 CVE-2014-10000 CVE-2014-12345 / 
[17:30:32] <perlbot> simcop2387: free(): invalid pointer [Exited 1]
[17:31:15] <simcop2387> eval: use List::UtilsBy qw(sort_by); [ sort_by { sprintf "%04d/%07d", m/CVE-(\d+)-(\d+)/ } qw/ CVE-2014-1234 CVE-2014-9999 CVE-2014-10000 CVE-2014-12345 / 
[17:31:17] <perlbot> simcop2387: ERROR: syntax error at (IRC) line 1, at EOF Missing right curly or square bracket at (IRC) line 1, at end of line 
[17:31:24] <simcop2387> very weird....
[17:31:44] <revhippie> buZz: oh gross now i'm picturing a language where look-alikes match... 0 = O, l = I...
[17:31:46] <dwalker> ok, I'm impressed.  Just tested "my @sorted = sort_by { s/-(\d+)\z/sprintf '-%07d', $1/re }  @cves;" on 1.3M of shuffled CVE numbers and it works perfectly
[17:32:22] <dwalker> so yeah, not worthy of a CPAN module, relegated to a one line snippet.  thanks guys
[17:33:11] *** Joins: jesopo (~jess@libera/staff/cat/jess)
[17:33:20] *** jesopo is now known as jess
[17:34:30] <tm604> revhippie: that's why perl7 was renamed to "next generation": we can move from `.pl` extensions to `.png`
[17:35:24] <buZz> eval: 𝟣
[17:35:25] <perlbot> buZz: free(): invalid pointer [Exited 1]
[17:35:34] <buZz> eval: 𝟭
[17:35:35] <perlbot> buZz: Out of memory! [Exited 1]
[17:35:44] <buZz> eval: 𝟷
[17:35:45] <perlbot> buZz: ERROR: Unrecognized character \x{1d7f7}; marked by <-- HERE after use utf8; <-- HERE near column 11 at (IRC) line 1. 
[17:36:00] <buZz> eval: 🯱
[17:36:02] <perlbot> buZz: ERROR: Unrecognized character \x{1fbf1}; marked by <-- HERE after use utf8; <-- HERE near column 11 at (IRC) line 1. 
[17:36:17] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:36:53] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:42:20] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[17:42:47] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[17:42:48] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 260 seconds)
[17:42:59] *** Joins: jgaz (~jgaz@2600:8805:d980:16e::9e0)
[17:42:59] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:43:23] *** Joins: bmeneg (~bmeneg@131.100.62.103)
[17:43:42] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[17:49:35] *** Joins: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi)
[17:50:24] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:52:56] *** Quits: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[17:53:24] *** Joins: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi)
[17:54:41] *** Quits: bmeneg (~bmeneg@131.100.62.103) (Ping timeout: 248 seconds)
[17:54:52] *** Joins: bmeneg (~bmeneg@131.100.62.164)
[17:56:29] *** Quits: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[17:57:33] *** Joins: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi)
[18:01:20] *** Quits: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:01:46] *** Joins: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi)
[18:02:21] *** Quits: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[18:02:26] *** Joins: morte_ (~user@181.114.17.106)
[18:02:33] *** Joins: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi)
[18:03:12] *** Quits: japh (~scp1@user/japh) (Ping timeout: 260 seconds)
[18:04:33] *** Quits: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:05:00] *** Joins: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi)
[18:05:04] *** Joins: japh (~scp1@user/japh)
[18:05:25] *** Quits: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[18:05:32] *** Joins: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi)
[18:05:36] <rindolf> Altreus: LeoNerd : hi. please review https://github.com/shlomif/perl-XML-LibXSLT/blob/master/lib/XML/LibXSLT/Quick.pm
[18:05:37] <Paperbot> Link title(s): [ perl-XML-LibXSLT/Quick.pm at master · shlomif/perl-XML-LibXSLT · GitHub ]
[18:06:38] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[18:07:53] <LeoNerd> What am I reviewing for?
[18:10:52] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[18:15:27] *** Joins: omegatron (~some@p54bd5280.dip0.t-ipconnect.de)
[18:19:10] <rindolf> LeoNerd: elegance, bugs, best practices...
[18:21:02] *** Quits: mattil (~mattil@dzypk8fqjggfzfh07zp-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:26:28] * GumbyPAN CPAN Upload: JSONP-2.23 by ACANFORA https://metacpan.org/release/ACANFORA/JSONP-2.23
[18:28:15] *** Joins: gast0n (~g4570n@user/gast0n)
[18:28:29] *** Joins: zacts (~zacts@user/zacts)
[18:28:34] *** Joins: bmeneg_ (~bmeneg@131.100.62.249)
[18:28:42] *** Joins: tejr (tejr@user/tejr)
[18:29:52] *** Quits: jgaz (~jgaz@2600:8805:d980:16e::9e0) (Quit: Leaving)
[18:30:04] *** Quits: bmeneg (~bmeneg@131.100.62.164) (Ping timeout: 272 seconds)
[18:30:58] *** Quits: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com) (Quit: out)
[18:34:08] *** Quits: Woodzy (~quassel@198.204.246.228) (Ping timeout: 246 seconds)
[18:34:41] *** Joins: Woodzy (~quassel@198.204.246.228)
[18:36:29] * GumbyPAN CPAN Upload: JSONP-2.24 by ACANFORA https://metacpan.org/release/ACANFORA/JSONP-2.24
[18:37:50] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[18:38:41] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 246 seconds)
[18:38:41] *** Quits: proller (~p@2a02:6b8:b081:20::1:2a) (Ping timeout: 245 seconds)
[18:39:02] *** Joins: jgaz (~jgaz@2600:8805:d980:16e::9e0)
[18:39:23] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 246 seconds)
[18:39:59] <LeoNerd> rindolf: Heh.. then I'd probably take objection to almost every line of it :P
[18:40:33] *** Joins: gast0n (~g4570n@user/gast0n)
[18:41:31] <LeoNerd> `use version` instead of strict+warnings, parens around the // not necessary, use Object::Pad instead of manual class hackery, use method signatures, no need to `close` filehandles in lexicals, don't use indirect object notation for print, use match/case instead of long if/elsif, ...
[18:41:58] <rindolf> LeoNerd: :[[
[18:44:17] <rindolf> LeoNerd: i see. seems like bikeshedding to me
[18:44:28] <LeoNerd> You asked my opinion. I gave it :)
[18:44:46] <rindolf> LeoNerd: thanks!
[18:44:46] <LeoNerd> You can't compain that code review comments are opinionated.
[18:44:58] <zacts> can perl run on-top of the rakudo/moarVM?
[18:45:54] <rindolf> zacts: using perlembed?
[18:46:17] <LeoNerd> Perl [capital P] code runs on the perl [lowercase p] interpreter; which is a C program
[18:46:34] <zacts> I know
[18:46:37] <LeoNerd> To run that "on" something else, would involve running that C program on something else
[18:46:53] <zacts> but can you compile perl to the moarVM bytecode?
[18:47:08] <LeoNerd> No. You don't "compile" perl to anything
[18:47:18] *** Joins: mattil (~mattil@87-92-113-29.bb.dnainternet.fi)
[18:47:57] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[18:48:09] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[18:48:34] <ilmari> cPanel might beg to differ …
[18:49:28] *** Joins: wataru (~wataru@p59010-mobac01.tokyo.ocn.ne.jp)
[18:49:51] *** Joins: proller (~p@2a02:6bf:fff0:1:9287:1625:4183:ccf2)
[18:51:39] *** Quits: wataru (~wataru@p59010-mobac01.tokyo.ocn.ne.jp) (Client Quit)
[18:52:14] *** Quits: mattil (~mattil@87-92-113-29.bb.dnainternet.fi) (Ping timeout: 272 seconds)
[18:54:10] *** Joins: thrig (~thrig@207.108.197.156)
[18:54:25] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Ping timeout: 248 seconds)
[18:54:33] *** Quits: jgaz (~jgaz@2600:8805:d980:16e::9e0) (Quit: Leaving)
[18:55:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[18:55:50] *** Quits: bmeneg_ (~bmeneg@131.100.62.249) (Ping timeout: 246 seconds)
[18:56:48] *** Joins: fling (~fling@user/fling)
[18:57:35] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Ping timeout: 246 seconds)
[19:00:37] *** Joins: bmeneg (~bmeneg@131.100.62.124)
[19:02:02] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[19:03:29] *** Quits: proller (~p@2a02:6bf:fff0:1:9287:1625:4183:ccf2) (Ping timeout: 248 seconds)
[19:06:33] * GumbyPAN CPAN Upload: App-vcardtidy-1.0.0_2 by MLAWREN https://metacpan.org/release/MLAWREN/App-vcardtidy-1.0.0_2
[19:06:47] *** Joins: proller (~p@2a02:6b8:0:40c:7ebf:9b54:ebb8:6daa)
[19:09:14] <LeoNerd> FUCKING SORT!!
[19:09:29] <LeoNerd> sort(func (@arr))  vs   sort(func(@arr))
[19:09:31] <LeoNerd> They differ
[19:09:47] <choroba> That's one of the ugliest parts of Perl, yes.
[19:10:58] <choroba> Comparing all the 2*4 variants mentioned in https://perldoc.perl.org/functions/sort is panful
[19:10:59] <Paperbot> Link title(s): [ sort - Perldoc Browser ]
[19:11:16] <LeoNerd> Yes I was just reading that bit
[19:11:29] <LeoNerd> Currently on a walk over /all/ the core perl docs, looking for places to mention `use VERSION`
[19:11:38] <thrig> potato, potatoe, potateo, potate,
[19:12:14] <choroba> thrig: Yes, but imagine potate and potatoe meant tomatoe in fact :)
[19:12:40] <thrig> imagine a world where tomato is a fruit and a vegetable
[19:12:56] *** Joins: v9fk (~quassel@user/v9fk1yn3nu)
[19:15:27] *** Quits: jellyknight (~gelignite@d5365b83.access.ecotel.net) (Quit: Stay safe!)
[19:19:38] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[19:21:55] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[19:22:14] <thrig> granted, computer scientists probably want less complexity than linguists have wrought
[19:23:51] *** Joins: todo75 (~todo75@user/todo75)
[19:24:04] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:27:28] <rindolf> thrig: https://www.reddit.com/r/DnD/comments/1s9l2g/dd_stats_explained_with_tomatoes/
[19:27:31] <Paperbot> Link title(s): [ D&D Stats Explained With Tomatoes : DnD ]
[19:27:43] *** Quits: haj1 (~haj@p200300eda707e000499ddefd12113287.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[19:28:25] *** Joins: haj1 (~haj@p200300eda707e000499ddefd12113287.dip0.t-ipconnect.de)
[19:29:48] <thrig> !America not labouring under Nix v. Hedden
[19:31:04] <aquanight> LeoNerd: re "no need to `close` filehandles in lexicals" except for that you should and then also you should check $! afterward in case something not nice happened to whatever the last thing you `print`ed without flushing
[19:31:35] * GumbyPAN CPAN Upload: Algorithm-LibLinear-0.24 by SEKIA https://metacpan.org/release/SEKIA/Algorithm-LibLinear-0.24
[19:31:39] <aquanight> close $fh or do { warn "Welp. $!"; CORE::dump; die; }; would be my preference :P
[19:31:48] <LeoNerd> aquanight: Sure but OP didn't do that either
[19:32:12] <thrig> if the filesystem is 100% full you probably have other problems
[19:32:21] <aquanight> I'm not sure if close(2) itself can ever fail for any reason other than "bonehead" errors
[19:32:28] *** Parts: art1 (~romeyke@p200300ccdf083a00c84f4cdb9c6a3054.dip0.t-ipconnect.de) ()
[19:32:41] <aquanight> ... apparently EINTR and EIO are valid errno for close
[19:32:45] *** Quits: todo75 (~todo75@user/todo75) (Ping timeout: 256 seconds)
[19:32:48] <LeoNerd> close() most notably hoists the waitpid() failure from a pipeopen, don't forget
[19:33:22] <LeoNerd> Hah.. close() getting EINTR.. I'm willing to bet a statistically-zero percentage of all programs ever actually handle that :P
[19:33:31] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:4c02:f151:a5e3:57bd)
[19:33:32] <simcop2387> aquanight: i'm sure there's something else that can happen from NFS too
[19:34:05] <thrig> also hard to test for without pretty low level shenannigans
[19:34:07] <haarg> close will flush buffered output
[19:34:29] <aquanight> ENOSPC
[19:34:50] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[19:35:02] <aquanight> LeoNerd: I was initially just looking at closing normal filehandles. But good point about popen
[19:35:23] <aquanight> also there's the fact that after closing a popen, you need to look at $? also
[19:35:41] <simcop2387> can't wait for the good timelapses of this years reddit /r/place.  it's always really interesting to see such weird gigantic collaborative projects like that.
[19:36:53] <aquanight> LeoNerd: well, from whatm I'm reading, most everything will still close the file-descriptor even after EINTR
[19:37:14] <aquanight> and there's apparently only one (POSIX-valid too) implementation which requires a second close
[19:37:24] <LeoNerd> Probably because impls realised nobody handled that case
[19:37:28] <LeoNerd> EINTR really is ugly
[19:37:30] <simcop2387> i wonder if there's any EAGAIN handling in the close() code?
[19:37:58] <LeoNerd> Hah! I can't imagine what would cause close() to yield EAGAIN, but.. hrm... I suppose it might be permitted somehow
[19:38:22] <simcop2387> hmm, doesn't look like it is permitted by the man pages, but i'm not sure i'd trust it either
[19:38:55] <aquanight> it's not listed in the man page
[19:38:56] <simcop2387> oh interesting, the man pages say to *never* retry an errored close
[19:39:12] <aquanight> what would possibly EAGAIN in close(2)?
[19:39:22] *** Joins: todo75 (~todo75@user/todo75)
[19:39:46] <aquanight> even if we consider there might be some back-end asynchronous activity, the act of calling close() is a signal by the caller that it is done with the fd
[19:39:51] <simcop2387> aquanight: nothing apparently, but i hadn't checked yet.  EAGAIN is an insidious return though from a lot of syscalls
[19:39:52] *** Quits: v9fk (~quassel@user/v9fk1yn3nu) (Quit: Goodbye!)
[19:40:09] <aquanight> so the kernel can just shove all the backend stuff into whatever housekeeping thread and the process can go merilly on its way
[19:40:17] <aquanight> simcop2387: I think you typically have to *ask* for EAGAINs
[19:40:21] <LeoNerd> EAGAIN and EINTR in particular are ugly things
[19:40:31] <aquanight> at least as they relate to file I/O
[19:40:32] <LeoNerd> They can basically appear anywhere for any reason
[19:40:42] <aquanight> and EINTR you can also prevent
[19:40:42] <simcop2387> and yea based on the notes, the kernel will alwys throw away the fd, and you should never try to reclose the file handle on linux
[19:40:47] <aquanight> SA_RESTART in your sigaction
[19:40:51] <aquanight> -> no more EINTR
[19:41:02] <LeoNerd> Yup; that's part of the "try to tidy it up"
[19:41:09] <aquanight> simcop2387: the problem is the one (HP-UX) that will EINTR and say you need to do it again
[19:41:13] <LeoNerd> Meh. The more I dig into these things the more I want DNIX not to be dead
[19:41:28] <aquanight> honestly, my answer to that is just SA_RESTART all your sigactions
[19:41:29] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[19:41:29] <LeoNerd> _soooo_ much POSIXcrap could have been so much nicer
[19:41:31] <simcop2387> aquanight: EINTR is apparently th eonly special case of that specifically because the kernel just told you that it didn't do it
[19:41:31] <aquanight> and not have to deal with it
[19:41:45] <aquanight> simcop2387: except that's only true of HP-UX
[19:41:50] <aquanight> if you get EINTR on Linux it was closed
[19:42:32] <ilmari> because the actual releasing of the fd number happens _before_ the things that can raise errors
[19:42:33] <simcop2387> lets just get rid of files entirely then, this is too hard
[19:43:04] <LeoNerd> EINTR and EAGAIN are both annoying artefacts of POSIX's lack of completion queues, in effect
[19:43:27] <LeoNerd> They're "error" results that say "actually this particular system call didn't really error, but only because it didn't do anything at all.. the actual thing that happened was something else over there"
[19:43:27] <aquanight> or just get rid of synchronous I/O
[19:43:31] <LeoNerd> and you have to look over there
[19:43:32] <aquanight> all I/O should be async
[19:43:37] <LeoNerd> Again - DNIX did that
[19:44:18] <aquanight> I feel like HRESULT was an attempt to solve the sillyness of errno like that but at the same time it went too far
[19:44:19] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[19:44:27] <thrig> "Some Forth practitioners advocate storing source code in ... text files. ... This approach ... is still controversial." Leo Brodie. "Thinking Forth"
[19:45:59] <simcop2387> this is why we need xml databases for storing documents
[19:46:17] <thrig> with blockchain
[19:46:33] <nshp> isn't that what .docx is for?
[19:46:41] <rindolf> heh
[19:47:49] <simcop2387> <textfile encoding="base64:utf-ebcdic"><name encoding="shift-jis">untitled.txt</name><line><number>1</number><contents><!CDATA[[.......]]></line>...</textfile>
[19:47:56] <aquanight> huh. I don't think EINTR even exists in Win32.
[19:48:27] <simcop2387> aquanight: probably because you're not supposed to ever make syscalls yourself, you ask the kernel library to do it for you
[19:48:35] <aquanight> simcop2387: even so
[19:48:44] <simcop2387> that way it can be patched around for compatibility
[19:48:48] *** Quits: todo75 (~todo75@user/todo75) (Ping timeout: 260 seconds)
[19:49:09] <aquanight> signals as they exist in C don't exist in Win32 (they have to be translated by the C library)
[19:49:18] <thrig> Hi! I see you're trying to make a syscall. Would you like to buy something from the Microsoft store?
[19:49:23] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Ping timeout: 246 seconds)
[19:49:27] <thrig> C has signals?
[19:49:32] <aquanight> or POSIX whatever
[19:50:12] <simcop2387> thrig: i need to buy an enablement package that contains per user licenses for making this syscall with up to 3 paramters, and up to 30 times an hour over all 200 user licenses
[19:50:31] <rindolf> http://shlomifishswiki.branchable.com/slash-dev-null_is_WebScale/
[19:50:32] <Paperbot> Link title(s): [ slash-dev-null is WebScale ]
[19:50:33] *** Joins: todo75 (~todo75@user/todo75)
[19:50:37] <thrig> err, and how many CPUs?
[19:50:54] <aquanight> most external events you either get them from the window message loop (assuming you even have one) or console event handler if you bother with that, or is specific to the thing you're dealing with
[19:51:03] <simcop2387> thrig: it's all on sockets now not cpus
[19:51:04] <aquanight> and usually just results in spewing off a background thread or something
[19:53:06] <aquanight> SIGINT is console event, SIGTERM I believe is either WM_CLOSE or WM_QUIT externally posted to your message loop, SIGKILL is TerminateProcess() which isn't as absolute as it is in Linux I believe, SIGCHLD is using WaitForSingleObject/WaitForMultipleObjects or one of the variants, I don't think you just get notified of child process exits.
[19:54:17] <aquanight> either way EINTR isn't a thing, and EAGAIN only exists with OVERLAPPED* nonsense
[19:55:37] <aquanight> stuff like SIGABRT/SIGALRM are emulated by vcrt
[19:56:37] <aquanight> how is it that this is like the one thing Windows got right?
[19:56:50] <aquanight> (i.e. not having EINTR/EAGAIN)
[19:57:08] <LeoNerd> Learning from history
[19:57:16] <thrig> they also do Internet \r\n linefeeds, and more importantly released Comic Sans MS
[19:57:22] <LeoNerd> The entire mess of signals and async interruptions is a wellknown terrible design shape of POSIX
[19:58:50] <aquanight> I like how pause(2) literally can only return EINTR
[19:59:06] <aquanight> there is by definition no case where pause can return and not return EINTR
[19:59:13] <aquanight> I wonder if SA_RESTART will restart pause(2)
[19:59:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[19:59:41] <LeoNerd> I don't think you'd want that, because it wouldn't recalculate the time
[19:59:52] <aquanight> what time?
[20:00:11] <LeoNerd> Oh I was thinking of a different syscall
[20:00:14] <aquanight> pause(2) is just "block until signal"
[20:00:21] <LeoNerd> sigtimedwait(2)
[20:00:55] *** Joins: fling (~fling@user/fling)
[20:01:56] <aquanight> signals always seemed like just a weird way to handle certain asynchronous events
[20:02:12] <aquanight> the synchronous signals make sense
[20:02:14] <LeoNerd> Yeah.. You can see - a lot of the early ones are basically just different ways to terminate the process
[20:02:31] <LeoNerd> But then the system starts to get abused for other stuff... ones like SIGCHLD and SIGWINCH are particularly bizarre
[20:02:32] <aquanight> and equally, handling them doesn't make sense, because the synchronous signals fall in the "programmer was a bonehead" class
[20:02:54] <aquanight> but SIGPIPE can go die in a fire
[20:03:06] <LeoNerd> Oooh.. no.. SIGPIPE is one of the useful ones
[20:03:12] <thrig> or "stop wasting all the system memory playing rogue"
[20:03:12] <aquanight> ok fine
[20:03:25] <LeoNerd> zcat one-terabyte-file.gz | head -10   <== it's what prevents that from eating lots of CPU
[20:03:26] <aquanight> SIGPIPE should be "opt-in" for any fd that isn't stdout/stderr
[20:03:48] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 272 seconds)
[20:04:30] <simcop2387> aquanight: can't, all fds that you have could be a pipe that someone gave you.  exec() and already open fds are a weird situation
[20:04:33] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[20:05:11] <aquanight> simcop2387: I believe the usual case for SIGPIPE is if you're just some dumb thing printf()ing to stdout merrily away
[20:05:24] <aquanight> so it that you get a fast exit when dumb | exits-fast
[20:05:48] <aquanight> but what is particularly annoying is SIGPIPE to files you yourself have opened
[20:06:07] <aquanight> especially sockets
[20:06:11] <aquanight> why is EPIPE a thing for sockets
[20:06:25] <thrig> how are CPU sockets involved? licensing?
[20:06:38] * GumbyPAN CPAN Upload: Linux-Statm-Tiny-0.0602 by RRWO https://metacpan.org/release/RRWO/Linux-Statm-Tiny-0.0602
[20:07:15] <huf> lie sensing? what?
[20:07:56] *** Joins: monkey_ (~user@181.114.17.106)
[20:08:15] <aquanight> I still remember when there was actual reason to build kernels for single-core systems
[20:08:28] <aquanight> a lot of kernel code just to deal with SMP
[20:08:46] <aquanight> but ever since forever, even basic "single-processor" systems are SMP
[20:10:17] *** Joins: Trigon (~reuben@144.39.114.115)
[20:10:30] <aquanight> LeoNerd: that one would be fixed by SIGPIPE only firing for stdout (if we want to avoid extra flags, using the "close-on-exec" flag for this purpose would work: SIGPIPE would be raised for files that *don't* have this)
[20:10:57] <LeoNerd> Mmm that could work
[20:10:59] <aquanight> my ultimate point being that having to remember $SIG{PIPE} = "IGNORE"; in any code that wants to deal with a lot of file descriptors is annoying.
[20:11:24] <LeoNerd> Ya
[20:11:34] <aquanight> and yeah
[20:11:40] <aquanight> SIGWINCH could've been a tty event
[20:12:06] <aquanight> except if it's included in the input stream, a lot of programs will now see random garbage data
[20:12:23] <aquanight> maybe you have to opt-in for it, which could be done by TUI libraries (ncurses, etc)
[20:12:24] <LeoNerd> Yuhhuh
[20:12:34] <LeoNerd> Oh that would be terrible. That's a total layer violation
[20:12:48] <LeoNerd> Imean really the whole lot is a mess but that would make it moreso
[20:12:48] <aquanight> I'm not sure how else you'd do it
[20:13:18] <LeoNerd> Give up and start again ;)
[20:13:29] <LeoNerd> There gets to a point where you can't just keep painting over broken windows
[20:14:14] <thrig> why not? Microsoft has been doing that for decades
[20:14:56] <aquanight> Win32 consoles put resize events in the input queue
[20:15:00] <aquanight> but you have to ask for them specifically
[20:15:11] <LeoNerd> "input queue" how fancy
[20:15:32] <LeoNerd> STDIN is just an opaque stream of bytes from some external device with transistors and a glowing amber phosphor screen
[20:15:40] <aquanight> well, the input queue for a console holds a variety of events
[20:15:41] <LeoNerd> kernel mostly doesn't care what's in it
[20:15:51] <ilmari> screen? how modern!
[20:15:58] <aquanight> ReadConsole() just reads the keyboard stream
[20:16:18] <aquanight> if you're a TUI on Win32 you probably care about more than just basic keyboard
[20:16:39] * GumbyPAN CPAN Upload: Linux-Statm-Tiny-0.0603 by RRWO https://metacpan.org/release/RRWO/Linux-Statm-Tiny-0.0603
[20:17:11] <aquanight> ReadConsoleInput can read keyboard, mouse, and resize events
[20:17:16] <thrig> yeah gotta get in that telemetry and store upsells code
[20:17:34] <aquanight> technically, window resize means "change in the window buffer size" - the relationship between the buffer and actual window aren't the same
[20:17:45] <aquanight> that gets fun
[20:17:58] <Altreus> If you're a TUI on Win32 then I feel bad for you son. I got 99 problems but IO ain't one
[20:18:00] <LeoNerd> I'd give that feature a panning
[20:18:05] <LeoNerd> <.<  >.>
[20:18:11] <aquanight> but that's basically your SIGWINCH
[20:18:20] <Altreus> psygwinch?
[20:18:42] <aquanight> Altreus: I mean, yes. At the point you start breaking into "textmode UI" type antics, you're probably better off just breaking out from the console entirely
[20:19:22] <aquanight> you're just replacing whatever your console setup code with CreateWindow() calls and your ReadConsoleInput() loop with GetMessage/DispatchMessage calls
[20:20:03] <Altreus> now you're thinking outside of the box model!
[20:20:21] <aquanight> LeoNerd: but to this day I still do not understand what is the point of SIGCHLD
[20:20:34] <LeoNerd> It wakes you up so you know to handle it
[20:21:05] <aquanight> I suppose in part this is because in POSIX every form of blocking-wait seems to have its own API for doing the actual wait
[20:21:15] <LeoNerd> Yup..
[20:21:27] <LeoNerd> In a world decades before anyone invented openpid(), it was necessary
[20:21:27] <aquanight> I/O needs select(2), child processes need wait(2)/waitpid(2)/etc
[20:21:28] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 260 seconds)
[20:21:38] <LeoNerd> It now isn't necessary on Linux
[20:21:44] <aquanight> wtf is openpid
[20:22:02] <LeoNerd> openpid is one of a set of kernel calls that makes good on the UNIX promise that "anything is a file"
[20:22:19] <thrig> even shared memory?
[20:22:20] <LeoNerd> It fixes that stupid problem that so many things in "traditional" POSIX actually aren't files, so you can't select() or poll() on them
[20:22:54] <LeoNerd> Regular POSIX has to do horrible racy tricks to wait on filehandles or child processes (e.g. see the mess of IO::Async::Internals::ChildManager)
[20:23:11] <LeoNerd> Linux with openpid can just call openpid(), and now it has another filehandle to add to the collection to be poll/epoll'ed on
[20:23:28] *** Quits: ccntrq (~Thunderbi@2a01:e34:eccb:b060:974:50d0:1066:ad50) (Remote host closed the connection)
[20:25:28] <LeoNerd> Hrm. I may have misremembered its name
[20:25:40] <aquanight> LeoNerd: for its part, Windows largely unified the wait model. Anything that needs a wait you can set up an event for and get notification when it's ready. And there's a conveient API to combine event waits into a message loop (MsgWaitForMultipleObjects)
[20:26:15] <LeoNerd> Yes
[20:26:16] <aquanight> huh. I don't have a man page on openpid. Weird
[20:26:20] <LeoNerd> That's the plan with these syscalls
[20:26:31] <LeoNerd> Make everything be a filehandle, then you can just epoll_pwait on it
[20:26:32] *** Joins: magla (~gelignite@d5365b83.access.ecotel.net)
[20:26:32] <ilmari> there's also signalfd
[20:26:44] <LeoNerd> It's supposed to be similar to WaitForMultipleObjects
[20:27:07] <LeoNerd> Yes signalfd is the signals one. The process one is likely called SOMETHINGfd, though I'm having trouble remembering what
[20:27:14] <aquanight> I think there's only a few things that don't use event objects, but the one I know of off the top of my head just fires off a callback in a spawned thread and you can then go and set an event in that
[20:27:20] <LeoNerd> pidfd_open.. obviously
[20:27:22] <LeoNerd> *grumble*
[20:28:24] *** Joins: martinus__ (~martin@139.30.201.77.rev.sfr.net)
[20:30:46] <xenu> i've just realized that adding introspection to signatures and objects will make xs functions/objects not look like perl ones
[20:30:48] <aquanight> pidfd_getfd seems scary
[20:31:03] <aquanight> xenu: ... they already don't.
[20:31:06] <xenu> i guess we would need apis to fake introspection data for xs
[20:31:25] <LeoNerd> xenu: I get what you mean about functions, but what do you mean about objects there ?
[20:31:36] <xenu> hmm
[20:32:05] <aquanight> if perl is getting introspecty it can already tell if a function is xs
[20:32:07] <xenu> actually objects aren't a problem, after inheritance, composition, blah blah can happen on perl level
[20:32:28] <xenu> xs just provides methods
[20:32:35] <xenu> so yeah, just the signatures
[20:32:38] *** Quits: todo75 (~todo75@user/todo75) (Remote host closed the connection)
[20:32:47] <aquanight> I'm not sure I understand the problem here
[20:32:49] <xenu> s/after/after all/
[20:32:49] *** Quits: tobybl (~tobybl@132.202.200.146.dyn.plus.net) (Remote host closed the connection)
[20:32:53] <LeoNerd> Some sort of arity-query on XS functions would be nice though, yes
[20:33:18] <aquanight> isn't this what proto() is for?
[20:33:22] *** Joins: todo75 (~todo75@user/todo75)
[20:33:27] <LeoNerd> No that's for the prototype and those are stupid
[20:33:28] <aquanight> prototype()*
[20:34:07] <aquanight> I guess I'm not sure how you'd express a signature for an XS
[20:34:20] <LeoNerd> You'd have to fake it in the .xs file
[20:34:41] <aquanight> I suppose you could read the xs signature
[20:34:46] <xenu> it depends what kind of stuff will be queryable, if it's just arity then it's simple
[20:35:10] <xenu> but for example parameter names could be queryable too
[20:35:18] <LeoNerd> arity rant + slurpy  is all we had in mind to begin with
[20:35:21] <LeoNerd> *range
[20:35:47] <xenu> and yeah, the generation of that could be automated in the preprocessor
[20:36:06] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:70be:3437:d6be:b5ae)
[20:36:06] <aquanight> doesn't XS already generate prototypes?
[20:36:08] <xenu> i imagine that BOOT would call set_arity_range("function", 7, -1)
[20:36:11] <LeoNerd> XSUBs can't (currently) express slurpy hashes, but they can do most other bits
[20:36:49] <xenu> from the caller's pov there's no difference between @ and %
[20:37:04] <xenu> or is there
[20:37:14] <xenu> does it enforce that it has to be even?
[20:37:26] <aquanight> hash-slurp is enforced by callee
[20:37:26] <LeoNerd> You get a warning about odd-sized list
[20:37:32] <LeoNerd> But it's only a warning
[20:37:52] <aquanight> I think it's only :proto(%) that can enforce even-size at the call site
[20:38:24] <aquanight> sweval: sub test :proto(%) { } test a => 2, "b";
[20:38:26] <perlbot> aquanight: ERROR: Invalid CODE attribute: proto(%) at (IRC) line 1. BEGIN failed--compilation aborted at (IRC) line 1. 
[20:38:34] <aquanight> sweval: sub test :prototype(%) { } test a => 2, "b";
[20:38:36] <perlbot> aquanight: free(): invalid pointer [Exited 1]
[20:38:45] <aquanight> ...what.
[20:38:54] <LeoNerd> Ah; perlbot has been unwell today
[20:39:05] <aquanight> sweval5.32: sub test :prototype(%) { } test a => 2, "b";
[20:39:08] <perlbot> aquanight: No output.
[20:39:27] <aquanight> huh.
[20:39:31] <aquanight> could've sworn it worked that way
[20:39:33] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:950:287b:c4be:ac00) (Ping timeout: 260 seconds)
[20:40:29] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 246 seconds)
[20:44:41] <daemon> hey all if I have a http request and a http response stored in a $scalar in string form, what is the choice of dealing with them these days or is http::request and http::response still king?
[20:45:11] <thrig> Mojo did get written
[20:45:11] <LeoNerd> Oh, for parsing the strings? Yeah I tend to use HTTP::{Request,Response}
[20:45:27] <daemon> cool cheers LeoNerd 
[20:45:37] <daemon> thrig, I am aware I am using it elsewhere in this project :) just no here
[20:45:48] <LeoNerd> Those come in the nicely small HTTP-Message distribution, which just has some utility stuff like that. So it's not a _full_ web framework such as Mojo
[20:45:51] <LeoNerd> Which has its own
[20:46:16] <daemon> gotcha
[20:51:43] * GumbyPAN CPAN Upload: Dancer2-Plugin-FormValidator-0.20 by ALEXPAN https://metacpan.org/release/ALEXPAN/Dancer2-Plugin-FormValidator-0.20
[20:52:37] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[20:55:22] *** Joins: gast0n (~g4570n@user/gast0n)
[20:56:01] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 268 seconds)
[21:02:47] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[21:03:06] *** Joins: fling (~fling@user/fling)
[21:06:28] *** Joins: kensanata (~user@user/kensanata)
[21:12:38] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[21:16:14] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.185)
[21:17:34] *** Parts: jess (~jess@libera/staff/cat/jess) ()
[21:30:06] <daemon> if I was to use http::request's parse() method, content() should be a string of bytes ... I assume it will do that for me, but assuming that, is it safe to compare $request->header('Content-Length') to length($request->content()) ?
[21:31:02] <thrig> oh, I'm a man, of content sorrow
[21:31:09] *** Joins: randir (~randir@95-31-138-202.broadband.corbina.ru)
[21:31:32] <simcop2387> daemon: it should be safe yes, at that point both should be counting bytes until you do a decode
[21:31:32] <daemon> why whats up thrig 
[21:31:44] <daemon> simcop2387, that was what I suspected, thank you :)
[21:31:54] <daemon> simcop2387++ # by the way did you see my post about perlbot
[21:32:04] <daemon> perlbot, my $x = 1; $x += 10; $x
[21:32:05] <perlbot> daemon: No factoid found. Did you mean one of these: [scoping] [shabang] [shebang] [spongebob] [coping] [scottmc] [spino] [spinner] [svn] [spoon]
[21:32:11] <daemon> eavl, my $x = 1; $x += 10; $x
[21:32:16] <daemon> eval, my $x = 1; $x += 10; $x
[21:32:18] <perlbot> daemon: 11
[21:32:20] <daemon> yep :)
[21:32:22] <simcop2387> daemon: which post?
[21:32:42] <daemon> was it in here or perl net
[21:32:43] <daemon> err
[21:32:46] <simcop2387> ah the memory thing, yea didn't manage to catch what it was.  something ate the ram but cleaned itself up before i saw it.  didn't get OOMd either
[21:33:32] <daemon> https://dpaste.org/FCXrafi
[21:33:32] <daemon> yep
[21:33:32] <Paperbot> Link title(s): [ dpaste/FCXrafi (Perl) ]
[21:33:38] <daemon> never seen it do that before
[21:34:03] <daemon> the funny thing was queries that did not use an assignment was fine
[21:34:09] <daemon> so you could eval 'test' and it worked
[21:34:19] <daemon> but if you used a my it got a memory error 
[21:40:02] <simcop2387> yea it was really weird.  makes me wish i had some more advanced logging that logged all running processes and how much ram they were using
[21:41:17] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[21:42:17] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[21:48:33] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:d52e:866a:6f3a:60a1)
[21:50:51] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[21:51:18] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[21:56:01] <daemon> simcop2387, hey I wonder, I just remembered before it did that, I mentioned about the io-async paste channel not being present on the web interface, was it changing that, that caused the problem?
[21:58:32] *** Quits: thrig (~thrig@207.108.197.156) (Remote host closed the connection)
[21:59:50] *** Joins: Trigon (~reuben@144.39.114.115)
[22:01:35] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[22:01:51] * GumbyPAN CPAN Upload: App-vcardtidy-1.0.0_3 by MLAWREN https://metacpan.org/release/MLAWREN/App-vcardtidy-1.0.0_3
[22:02:44] *** Joins: bbrtj (~bbrtj@185.24.91.138)
[22:05:16] *** Joins: zln (~zln@c83-249-48-11.bredband.tele2.se)
[22:09:05] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 248 seconds)
[22:10:04] *** Joins: alex11 (~alex11@user/alex11)
[22:11:52] * GumbyPAN CPAN Upload: JavaScript-QuickJS-0.03 by FELIPE https://metacpan.org/release/FELIPE/JavaScript-QuickJS-0.03
[22:21:52] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.185) (Ping timeout: 272 seconds)
[22:21:53] * GumbyPAN CPAN Upload: JavaScript-QuickJS-0.04 by FELIPE https://metacpan.org/release/FELIPE/JavaScript-QuickJS-0.04
[22:21:53] * GumbyPAN CPAN Upload: Chart-v2.401.0 by LICHTKIND https://metacpan.org/release/LICHTKIND/Chart-v2.401.0
[22:27:22] *** Joins: Pixi (~Pixi@user/pixi)
[22:27:47] *** Quits: Peppard (~quassel@2001:470:1f0b:751:dd88:c4c8:6da2:7369) (Quit: No Ping reply in 180 seconds.)
[22:28:03] *** Joins: KnoP (~KnoP@p4ff566f8.dip0.t-ipconnect.de)
[22:28:56] *** Joins: Peppard (~quassel@2001:470:1f0b:751:2918:ec09:1115:5a0e)
[22:29:32] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[22:33:45] *** Quits: KnoP (~KnoP@p4ff566f8.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[22:34:41] *** Joins: KnoP (~KnoP@p4ff566f8.dip0.t-ipconnect.de)
[22:43:37] *** Joins: todo75 (~todo75@user/todo75)
[22:46:32] <zln> anyone who knows how to get first and lastname of an github user? Got a ctf challenge, apparently there is a legit way to get the info
[22:46:53] <zln> I could only find out the e-mail address 
[22:46:57] <zln> :/
[22:47:26] *** Joins: n1to (~n1to@user/n1to)
[22:47:29] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Read error: Connection reset by peer)
[22:48:32] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[22:49:09] <choroba> Some GitHub users don't provide their names.
[22:50:11] <choroba> Some of them are robots and don't have any names to make public.
[22:51:23] <xenu> zln: https://github.com/Perl/perl5/commit/2caf82775aff58fd4599ee9fb0841a887715c56b
[22:51:23] <Paperbot> Link title(s): [ Add the new flow-control keywords to perlfunc.pod · Perl/perl5@2caf827 · GitHub ]
[22:51:27] <xenu> this is the latest commit in perl repo
[22:51:31] <xenu> made by "leonerd"
[22:51:40] <xenu> add .patch to the url and you suddenly know his real name and e-mail
[22:51:49] <zln> nah this is a challenge 
[22:51:54] <zln> there need to be a way
[22:51:57] <zln> :)
[22:52:00] <xenu> i literally told you a way
[22:52:40] <huf> it's not his real name though
[22:52:41] <zln> ah
[22:52:48] <zln> yes you did
[22:52:49] <huf> i was there
[22:52:51] <zln> let me check
[22:52:53] <zln> ah_
[22:52:57] <zln> what did you find?
[22:53:53] *** Quits: proller (~p@2a02:6b8:0:40c:7ebf:9b54:ebb8:6daa) (Ping timeout: 248 seconds)
[22:54:02] <huf> Pawl Ifans
[22:54:48] <zln> yeah? did you use the same .patch thing xenu mentioned?
[22:54:58] <choroba> If the user hasn't shared their real name with Github, there's no way to find their real name at Github.
[22:55:14] <zln> xenu, do I download the whole repo?
[22:55:32] <xenu> cloning the repo is one way, but as i just told you
[22:55:34] <huf> zln: i have inside information
[22:55:38] <huf> from the inside of my head
[22:55:41] <xenu> appending ".patch" to the url has the same effect
[22:55:46] <xenu> it shows you the commit metadata
[22:55:49] <xenu> including the e-mail
[22:56:17] <choroba> So, for example https://github.com/Perl/perl5/commit/975c4d17180ff09463bc652cd30b869be2bd0fdd.patch shows that the real name of Saywer X is...
[22:56:19] <xenu> (assuming the commit actualy contains that data)
[22:56:20] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 260 seconds)
[22:56:22] <zln> yes I know you told me, but I didn't understand :D
[22:56:32] <zln> ah
[22:57:24] <zln> huf :-/ I thought you were serious :D
[22:57:37] <huf> your first mistake
[22:57:44] <zln> :D
[23:02:27] *** Joins: rgrinberg (~textual@177.248.158.166)
[23:04:48] <ether> I'm pretty sure sawyer's meatspace name is not "975c4d17180ff09463bc652cd30b869be2bd0fdd"
[23:05:02] <ether> although it is nearly as unpronouncable as that :)
[23:05:36] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:06:34] <zln> https://github.com/OogieBoogie17
[23:06:35] <Paperbot> Link title(s): [ OogieBoogie17 · GitHub ]
[23:06:40] <zln> did nto work I think
[23:07:07] <ilmari> find a commit by them, and append .patch to the URL of that commit
[23:07:56] <Botje> Recruiters figured out how to grab mails from commits some time ago.
[23:07:57] <Botje> very annoyinh.
[23:08:46] <ilmari> but it looks like they haven't used their real name in any of the commits trivially reachable from that page
[23:09:21] <zln> Any first and lastname should suffice, it's a challenge 
[23:18:23] <choroba> Jack Skellington? ;-)
[23:18:41] <zln> haha isn't it too obvious? :p
[23:24:05] <zln> I had to ask him, it's not jack skellington :)
[23:24:53] *** Joins: proller (~p@80.240.216.69)
[23:28:36] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.185)
[23:29:51] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[23:31:03] *** Quits: fwg (~fwg@user/fwg) (Ping timeout: 260 seconds)
[23:31:16] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:31:16] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Quit: MEATBOT listens not to your cries for mercy. ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:31:16] *** Quits: perldoc (~perldoc@24.88.46.213) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:31:16] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:31:16] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:31:19] *** Quits: kaitlyn03245 (~kaitlyn@user/kaitlyn) (Quit: The Lounge - https://thelounge.chat)
[23:32:01] * GumbyPAN CPAN Upload: Chart-v2.401.1 by LICHTKIND https://metacpan.org/release/LICHTKIND/Chart-v2.401.1
[23:32:20] *** Quits: veesh (~veesh@77.137.131.111) (Ping timeout: 246 seconds)
[23:32:38] *** Joins: kaitlyn03245 (~kaitlyn@user/kaitlyn)
[23:32:50] *** Joins: fwg (~fwg@user/fwg)
[23:33:26] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.185) (Ping timeout: 272 seconds)
[23:34:36] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[23:35:05] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[23:35:38] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[23:35:38] *** ChanServ sets mode: +v perlbot
[23:36:06] *** Joins: perldoc (~perldoc@24.88.46.213)
[23:37:06] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[23:37:35] *** Quits: morte_ (~user@181.114.17.106) (Ping timeout: 268 seconds)
[23:42:13] *** Joins: jgaz (~jgaz@2600:8805:d980:16e:2e0:4cff:fe00:e201)
[23:43:55] *** Quits: rgrinberg (~textual@177.248.158.166) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:44:56] *** Joins: proller (~p@80.240.216.69)
[23:51:50] *** Joins: cstls (~user@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com)
[23:58:27] <cstls>  b
[23:58:39] *** Joins: zacts (~zacts@user/zacts)
[23:59:45] <ilmari> c
[23:59:59] <huf> cs
