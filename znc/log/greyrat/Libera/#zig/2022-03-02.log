[00:03:35] <Hoolean> ifreund: just given it another go
[00:03:59] <Hoolean> an independent change from "const" to "var" had made it work with @ptrCast, as opposed to the use of @ptrCast itself
[00:04:10] <Hoolean> can confirm that it now works fine just taking & of the list
[00:04:12] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[00:04:28] <Hoolean> code looks much more ziggy, thank you
[00:05:02] <ifreund> no problem!
[00:06:55] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:14:41] *** Quits: Hoolean (~Hoolean@176.56.237.138) (Ping timeout: 256 seconds)
[00:17:37] *** Joins: jjido (~Denis@94.4.149.217)
[00:19:17] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Ping timeout: 240 seconds)
[00:23:07] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[00:23:20] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:8cd0:c4fb:a59b:d470)
[00:26:52] *** Joins: livoreno (~livoreno@user/notzmv)
[00:32:50] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[00:43:45] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[00:46:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 268 seconds)
[00:47:33] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[00:59:03] *** Quits: jemius (~imperator@200116b82d7fac0064476f2d9228d1c0.dip.versatel-1u1.de) (Quit: Leaving)
[01:02:00] *** Joins: Gustavo6046__ (~Gustavo60@user/gustavo6046)
[01:04:27] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[01:05:57] *** Joins: tcht (~tcht@ip-095-223-071-169.um35.pools.vodafone-ip.de)
[01:07:30] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 272 seconds)
[01:08:07] *** Gustavo6046__ is now known as Gustavo6046
[01:09:09] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[01:11:00] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[01:12:22] *** Quits: ofh (~felix@2001:44b8:30c9:336:6f0:21ff:fe3c:d4d7) (Quit: ZNC 1.8.2 - https://znc.in)
[01:13:37] *** Quits: tcht (~tcht@ip-095-223-071-169.um35.pools.vodafone-ip.de) (Quit: leaving)
[01:13:48] *** Joins: yelnah (~felix@2001:44b8:30c9:336:6f0:21ff:fe3c:d4d7)
[01:13:58] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 260 seconds)
[01:14:14] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[01:16:41] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 268 seconds)
[01:20:03] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:8cd0:c4fb:a59b:d470) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:23:32] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:26:10] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[01:26:37] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[01:30:44] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Client Quit)
[01:37:19] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[01:37:37] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[01:42:51] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[01:49:59] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[01:51:12] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[01:52:12] *** Gustavo6046_ is now known as Gustavo6046
[01:59:25] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[02:00:01] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Client Quit)
[02:01:42] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 268 seconds)
[02:02:36] *** Joins: [deleted] (~livoreno@user/notzmv)
[02:03:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[02:03:33] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[02:03:51] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[02:12:03] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 250 seconds)
[02:14:34] *** Quits: cabal704 (~cabal704@user/cabal704) (Quit: WeeChat 3.4)
[02:14:58] *** Joins: jemius (~imperator@200116b82d7fac0064476f2d9228d1c0.dip.versatel-1u1.de)
[02:18:19] *** Joins: chgr5 (~chgr@static.152.235.203.116.clients.your-server.de)
[02:18:23] *** Joins: yrlf6 (~yrlf@omnath.yrlf.at)
[02:18:23] *** Quits: yrlf (~yrlf@omnath.yrlf.at) (Killed (NickServ (GHOST command used by yrlf6)))
[02:19:05] *** Quits: HyLian (~meron@14.red-79-145-100.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[02:19:18] *** Joins: HyLian (~meron@14.red-79-145-100.dynamicip.rima-tde.net)
[02:19:28] *** Joins: ltriant_ (~ltriant@118.102.122.246)
[02:20:13] *** Quits: shachaf (~shachaf@user/shachaf) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: McKael (~mikael@82-64-95-224.subs.proxad.net) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: Piraty (~irc@user/piraty) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: lumidify (~lumidify@user/lumidify) (Ping timeout: 256 seconds)
[02:20:35] *** Joins: Piraty (~irc@user/piraty)
[02:20:47] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: chgr (~chgr@static.152.235.203.116.clients.your-server.de) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: andrewrk (~andrewrk@mail.ziglang.org) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: koollman (~samson_t@user/koollman) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: flyx[m] (~flyxflyxo@mail.flyx.org) (Ping timeout: 256 seconds)
[02:21:38] *** Joins: shachaf (~shachaf@user/shachaf)
[02:21:43] *** Joins: andrewrk (~andrewrk@mail.ziglang.org)
[02:21:49] *** Joins: McKael (~mikael@82-64-95-224.subs.proxad.net)
[02:21:53] *** Joins: lumidify (~lumidify@user/lumidify)
[02:22:22] *** Joins: koollman (samson_t@sp1.kooll.org)
[02:23:05] *** Quits: koollman (samson_t@sp1.kooll.org) (Changing host)
[02:23:05] *** Joins: koollman (samson_t@user/koollman)
[02:28:38] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 260 seconds)
[02:34:16] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 272 seconds)
[02:34:43] *** Joins: flyx[m] (~flyxflyxo@mail.flyx.org)
[02:39:07] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[02:39:40] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[02:42:21] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[02:43:28] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[02:47:07] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 256 seconds)
[02:56:47] *** Quits: jemius (~imperator@200116b82d7fac0064476f2d9228d1c0.dip.versatel-1u1.de) (Quit: Leaving)
[02:59:35] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:04:02] *** Quits: ur5us_ (~ur5us@2406:e002:6804:8a01:f026:9131:1160:dcf8) (Ping timeout: 240 seconds)
[03:04:17] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[03:04:36] *** Joins: cursey (~cursey@user/cursey)
[03:08:26] *** Quits: NickH (~hastings@aj154045.dynamic.ppp.asahi-net.or.jp) (Quit: leaving)
[03:08:35] *** Joins: NickH (~hastings@aj154045.dynamic.ppp.asahi-net.or.jp)
[03:11:57] *** Quits: NickH (~hastings@aj154045.dynamic.ppp.asahi-net.or.jp) (Client Quit)
[03:19:47] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[03:20:33] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[03:21:45] *** Joins: NickH (~hastings@aj154045.dynamic.ppp.asahi-net.or.jp)
[03:28:34] *** Joins: masoudd (~masoudd@user/masoudd)
[03:34:48] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[03:40:50] *** Joins: ur5us (~ur5us@2406:e002:6804:8a01:f026:9131:1160:dcf8)
[03:51:18] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[03:51:34] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[03:51:58] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[03:52:30] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[03:52:41] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:53:15] *** Joins: notzmv (~zmv@user/notzmv)
[03:55:46] *** Joins: royo (~royo@user/royo)
[03:57:24] *** Quits: tsmanner (~tsmanner@ool-182d23f9.dyn.optonline.net) (Ping timeout: 240 seconds)
[03:57:44] *** Joins: xibb (~xibb@69.172.229.250)
[04:02:12] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[04:05:07] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:10:45] *** Joins: af (~af@awalgarg.me)
[04:19:00] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 240 seconds)
[04:24:25] *** Joins: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net)
[04:30:15] *** Quits: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[04:30:54] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[04:32:52] *** Joins: Hoolean (~Hoolean@176.56.237.138)
[04:34:45] <Hoolean> hallo, I'm wrapping a C library, and am trying to get rid of nasty C pointers
[04:34:57] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 240 seconds)
[04:35:03] <Hoolean> in particular, i'm looking for the most idiomatic way to go from a C pointer to a valid pointer or custom error
[04:35:12] <Hoolean> * valid Zig pointer
[04:36:38] <Hoolean> is there a one-liner for this? i was sort of hoping something like pointer.? catch error.MyError would work, but perhaps that's naive
[04:37:00] <Hoolean> rather, pointer.? catch return error.MyError
[04:39:10] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[04:40:19] *** Joins: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles)
[04:41:16] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:42:34] <Hoolean> perhaps the savvy way is to be wrapping the entire C function, to provide a better-typed alternative before it is used elsewhere?
[04:42:40] <Hoolean> seems like there might be an approach with less boilerplate tho
[04:52:07] *** Joins: livoreno (~livoreno@user/notzmv)
[05:03:02] <andrewrk> Hoolean, you can treat C pointers like optionals
[05:10:11] *** Joins: Techcable (~Techcable@168.235.93.147)
[05:11:41] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[05:18:35] *** Quits: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[06:10:37] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 240 seconds)
[06:11:53] *** Quits: ltriant_ (~ltriant@118.102.122.246) (Ping timeout: 252 seconds)
[06:21:05] *** Joins: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles)
[06:23:01] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[06:23:14] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[06:27:33] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 256 seconds)
[06:32:21] <Hoolean> andrewrk: does this mean I can whack a .? on the end of them, or do I need to do a lil casting first
[06:32:49] <Hoolean> I'm hitting an error with the former, and am trying to work out if I'm being dumb as rocks or if it's expected behaviour
[06:34:32] <Hoolean> ack, i should've looked at it with fresh eyes before i sent that; the errors message was complaining that i was feeding the result of the .? into catch, not that i was doing the .? itself
[06:35:13] <Hoolean> i was likening catch to much to my java mother tongue; i've replaced the bogus ".? catch" with an "orelse", and it makes sense now
[06:39:34] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[06:44:44] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:49:35] *** Quits: ncon (~ncon@wireguard/developer/ncon) (Quit: Quit Goodbye!)
[07:31:24] *** Quits: Hoolean (~Hoolean@176.56.237.138) (Quit: Client closed)
[07:36:45] *** Joins: ltriant (~ltriant@118.102.122.246)
[07:43:15] *** Quits: ur5us (~ur5us@2406:e002:6804:8a01:f026:9131:1160:dcf8) (Ping timeout: 256 seconds)
[07:44:36] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 272 seconds)
[07:45:57] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[07:48:41] *** Quits: chexum_ (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[07:48:43] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[07:49:19] *** Quits: kron (~weechat@user/qaph) (Remote host closed the connection)
[07:50:02] *** Joins: kron (~weechat@user/qaph)
[07:50:17] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 256 seconds)
[08:01:16] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[08:07:37] *** Quits: sebonirc (~sebonirc@8.9.88.219) (Ping timeout: 256 seconds)
[08:13:24] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[08:46:01] *** Joins: todo75 (~todo75@user/todo75)
[09:05:11] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[09:05:24] *** Joins: todo75 (~todo75@2601:2c7:4300:1530:d95a:16fc:8ada:1e8d)
[09:06:11] *** Quits: todo75 (~todo75@2601:2c7:4300:1530:d95a:16fc:8ada:1e8d) (Client Quit)
[09:06:13] *** Quits: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net) (Ping timeout: 240 seconds)
[09:09:20] *** Joins: todo75 (~todo75@user/todo75)
[09:13:01] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 256 seconds)
[09:19:06] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[09:25:20] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[09:25:37] *** Joins: todo75 (~todo75@user/todo75)
[09:26:22] *** Quits: todo75 (~todo75@user/todo75) (Client Quit)
[09:29:10] *** Joins: todo75 (~todo75@user/todo75)
[09:36:42] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 272 seconds)
[09:39:32] <andrewrk> glad you got it sorted 👍
[09:42:41] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[09:45:34] *** Quits: todo75 (~todo75@user/todo75) (Remote host closed the connection)
[09:54:40] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:05:46] *** Joins: todo75 (~todo75@user/todo75)
[10:30:40] <andrewrk> self-hosted compiler progress update: the llvm backend is now passing 78% of the behavior tests
[10:34:10] <todo75> andrewrk: crazy amount of progress for such a recent developmeent. keep it up!
[10:41:02] *** Quits: tenshi (~red@user/tenshi) (Ping timeout: 240 seconds)
[10:42:55] *** Quits: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[10:43:19] *** Joins: tenshi (~red@user/tenshi)
[10:43:22] <andrewrk> we are starting to get close to stage2 being able to build itself :)
[10:43:38] <plumeus> Yay
[10:44:26] <plumeus> Now I just need good auto-generated docs and a package manager.
[10:45:09] <andrewrk> Loris has been working on auto-generated docs
[10:45:17] <andrewrk> it's looking pretty good
[10:45:46] <andrewrk> package manager is the very next thing on my list after we start shipping the self-hosted compiler
[10:46:11] <plumeus> Great. Honestly, there were so many times when I wished I just knew the name of the source file so I could look into it swiftly.
[10:46:21] <plumeus> Just ended up using ZLS or cloning the Zig repo, which works.
[10:47:08] <andrewrk> nice thing about self-hosted is that it greatly raises the limit of how big your project can be before it starts taking noticeably long to build
[10:47:19] <andrewrk> which, you know, is a prerequisite for depending on packages
[10:47:59] <plumeus> I know it's supposed to speed up debug builds considerably. Is it also true for release builds?
[10:48:12] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[10:48:54] <andrewrk> yes but not nearly as much. in stage1, llvm takes up something like 80% of the time spent compiling. in stage2 it's closer to 95%
[10:49:46] <andrewrk> I can take one measurement... let me see
[11:00:39] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[11:00:56] *** Joins: todo75 (~todo75@user/todo75)
[11:04:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[11:07:21] <andrewrk> plumeus, here is 1 measurement on my laptop for building this tetris project: https://github.com/andrewrk/tetris
[11:08:05] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[11:08:17] <andrewrk> stage1: 4.45 seconds wall time, peak RSS: 340 MiB
[11:08:41] <andrewrk> stage2: 1.49 seconds wall time, peak RSS: 156 MiB
[11:08:45] <plumeus> wow, stb_image.h is huge
[11:08:52] <andrewrk> both using llvm, both -OReleaseFast
[11:09:20] <plumeus> Wow. Finally, people can build Zig on 32-bit systems, I guess.
[11:10:17] <andrewrk> I can't take a measurement with the x86_64 backend yet because it's not passing enough behavior tests to build this project
[11:10:39] <andrewrk> but also a different project that didn't have any c code would be a better benchmark 
[11:12:18] <andrewrk> I think part of what explains the difference is that stage2 doesn't do llvm debug info yet which I remember taking a decent portion of the llvm pie
[11:15:55] *** Joins: MajorBiscuit (~MajorBisc@c-001-019-045.client.tudelft.eduvpn.nl)
[11:36:22] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[11:47:42] *** Joins: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22)
[11:48:26] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 272 seconds)
[11:49:06] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[11:49:10] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[11:53:19] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:53:42] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 268 seconds)
[11:54:21] *** Joins: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net)
[11:56:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[11:58:21] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[12:05:13] *** Joins: ur5us_ (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22)
[12:05:31] *** Quits: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22) (Read error: Connection reset by peer)
[12:16:16] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[12:21:32] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[12:24:50] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:31:39] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[12:47:01] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 240 seconds)
[12:48:59] <motiejus> folks, I am casting `[][*:0]const u8` to `[*c][*c]u8` to make a C function satisfied. I saw being mentioned in this channel that `[*c]` should never be used in non-generated code. What can I cast it to instead? I tried many things, but nothing satisfied the compiler.
[12:49:02] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[12:50:01] <motiejus> here is the code: https://git.sr.ht/~motiejus/turbonss/tree/4fc54e5b6589804dcc4db52420502a24dca0e2b2/item/src/cmph.zig#L14
[12:51:41] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[12:54:08] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 268 seconds)
[13:01:27] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[13:01:36] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[13:15:24] <Earnestly> andrewrk: (With all these behaviour tests it might be worth keeping in mind efforts like Ada's compiler conformance test suite, something that all these behaviour tests can be repurposed as long down the road)
[13:16:11] <Earnestly> iow, the standard comes with a measuring stick
[13:16:35] <Earnestly> > http://www.ada-auth.org/acats.html
[13:17:46] *** Quits: cols (~cols@artemis.spensley.net) (Quit: Leaving)
[13:29:26] *** Quits: af (~af@awalgarg.me) (Ping timeout: 260 seconds)
[13:42:36] <ifreund> motiejus: that's not your fault but rather the compiler's: https://github.com/ziglang/zig/issues/8337
[13:47:05] <motiejus> gotcha. @ptrCast is fine; I am not asking to coerce it; it would just be better to cast it to a "better" data type
[13:47:34] <motiejus> `*[*c]` seems to work, which eliminates a `c`; can better be done?
[13:56:41] *** Joins: sskras (uid542048@id-542048.tinside.irccloud.com)
[14:01:37] *** Quits: ur5us_ (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22) (Ping timeout: 240 seconds)
[14:02:31] *** Joins: af (~af@awalgarg.me)
[14:02:35] <ifreund> motiejus: you could write manual bindings for the function that takes [*c][*c] using proper zig types
[14:02:50] <ifreund> otherwise there's no way to avoid the [*c] pointers currently afaik
[14:04:32] *** Joins: xd1le (~xd1le@user/xd1le)
[14:04:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:04:51] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[14:04:53] <motiejus> Ack. I have a binding which accepts `[][*:0]const u8` and casts it, but this is the question about the binding. :) If there is no way to avoid [*c], gotcha, then nothing more to do. Thanks
[14:05:10] <novakane> what is the difference between mem.split() and mem.tokenize()?
[14:05:43] <ifreund> novakane: check the test cases in std/mem.zig, I think it's easiest to see with the examples
[14:07:31] <ifreund> motiejus: something like `extern fn cmph_io_vector_adapter(ptr: [*][*:0]const u8, len: c_uint) RETURN_TYPE;` would work
[14:07:45] <ifreund> (not sure what the return type should be from that link)
[14:09:21] <ifreund> by binding I meant writing the extern declaration manually instead of letting zig translate-c generate it
[14:10:13] <ifreund> zig translate-c will produce an extern function taking `[*c][*c]const u8` as the first argument here as it can't know how the pointers will be used
[14:11:27] <novakane> ah yeah I get it, that subtle to get at first
[14:20:26] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 272 seconds)
[14:21:14] *** Joins: ltriant (~ltriant@203.63.103.126)
[14:22:17] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[14:24:01] <motiejus> Ah, you mean not include the header at all, and write my own declaration?
[14:24:02] <motiejus> Sounds like a great idea
[14:31:34] <ifreund> motiejus: you don't have to do it for the whole header if you don't want, just that one function with the annoying [*c][*c]
[14:32:03] <ifreund> that said, manual bindings can be a lot nicer. Putting the work into zig-wlroots was definitely worth it
[14:47:00] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 240 seconds)
[14:55:18] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:05:00] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[15:30:45] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[15:31:06] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[15:50:01] *** Quits: af (~af@awalgarg.me) (Ping timeout: 256 seconds)
[15:53:57] *** Joins: ltriant (~ltriant@203.63.103.126)
[15:55:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:59:39] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 256 seconds)
[16:02:06] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[16:03:10] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[16:18:54] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[16:22:17] *** Joins: Guest22 (~Guest22@2601:901:200:af0:9b0f:d4c9:b9f5:51cb)
[16:25:09] *** Joins: estivate (~estivate@2601:901:200:af0:9b0f:d4c9:b9f5:51cb)
[16:43:34] *** Joins: af (~af@awalgarg.me)
[17:12:04] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 272 seconds)
[17:19:18] *** Joins: ltriant (~ltriant@203.63.103.126)
[17:23:54] *** Joins: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net)
[17:24:38] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[17:25:27] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 256 seconds)
[17:40:55] *** Joins: beepbooptheory (~mik-wsl@50.216.98.94)
[18:00:50] *** Quits: Pistahh (~pistahh@user/pistahh) (Ping timeout: 272 seconds)
[18:06:44] *** Joins: ltriant (~ltriant@203.63.103.126)
[18:09:53] *** Joins: arkurious (~arkurious@user/arkurious)
[18:11:17] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 240 seconds)
[18:12:24] *** Joins: Pistahh (~pistahh@user/pistahh)
[18:28:05] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777)
[18:32:13] *** Quits: estivate (~estivate@2601:901:200:af0:9b0f:d4c9:b9f5:51cb) (Remote host closed the connection)
[18:32:19] *** Quits: Guest22 (~Guest22@2601:901:200:af0:9b0f:d4c9:b9f5:51cb) (Quit: Client closed)
[18:38:19] *** Joins: ltriant (~ltriant@203.63.103.126)
[18:43:05] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 256 seconds)
[18:52:31] *** Joins: braewoods (~braewoods@user/braewoods)
[18:54:28] <braewoods> I have a few questions about Zig's current status. Has Zig achieved enough stability for production use? How well does Zig work on non-x86 architectures such as ARM?
[18:55:10] <novakane> is there some difference between this 2 way of doing it? https://zigbin.io/938703
[18:55:53] <plumeus> braewoods, Zig isn't considered "ready for production", but there are some projects already being used as such
[18:55:53] <plumeus> https://www.tigerbeetle.com/ comes to mind
[18:56:48] <plumeus> As for the ISA support, you should read https://ziglang.org/download/0.9.0/release-notes.html#Support-Table
[18:56:51] <braewoods> novakane: the first may be faster, depends how Zig implements it. i know formatted printing has a noticeable performance impact in C but maybe Zig does not?
[18:57:59] <sskras> braewoods: parsing strings IMO is always slower (no investigation though)
[18:58:59] <novakane> that would be a good reason to use the first one then, if someone confirm it
[18:58:59] <plumeus> Also relevant to production: https://www.youtube.com/watch?v=124wdTckHNY
[18:59:52] <braewoods> novakane: in general my experience is for simple string or binary concatenation, it's usually faster to just use the regular method. formatted alternatives are usually slower.
[19:00:17] <braewoods> formatted mainly makes sense when type conversions are needed or so.
[19:01:03] <plumeus> Wait, is this just essentially a `std.mem.copy`?
[19:02:12] <braewoods> plumeus: shame, will it be "production" at a known point such as a version number like 1.0?
[19:02:35] <plumeus> I figure that's what 1.0 is for.
[19:03:12] <plumeus> The language will be stable, and the tooling/stdlib might improve but stage2 and the package manager should be done by then
[19:03:45] <braewoods> ok, fair enough. i only recently found out about Zig. it's rare to find a language with a design philosophy that tries to avoid hidden or implicit behavior
[19:04:11] <plumeus> There is implicit behavior, no? I do agree about the hidden part.
[19:04:46] <braewoods> ok, i guess i mean implicit behavior that varies heavily. C++ has a lot of that stuff and main reason I hate the language.
[19:04:49] <plumeus> I feel it strikes a great balance between being implicit and unambiguous.
[19:05:16] <plumeus> I want `comptime_int` in all my languages now.
[19:05:25] <braewoods> you can't rely on your intuition to get you through the implicit behavior in C++ because of the language features that allow it to be redefined on a whim
[19:06:15] *** Joins: miffi (~miffi@user/miffi)
[19:06:33] <braewoods> i always thought it was a mistake to have so many ways you could get bitten by your own ignorance of what C++ did without being asked
[19:06:57] <braewoods> i ended up prefering C more
[19:07:33] <braewoods> the lack of higher level features made it a lot easier to understand what was going on
[19:08:49] <plumeus> Anyhow, I think Zig seems to be usable in production in the sense that it already does a decent job being a sane and usable language compared to existing solutions.
[19:09:09] <plumeus> But it's not usable in the sense that breaking changes will happen and you will have to rewrite all your code.
[19:09:39] <Levy[m]> Not all of the code
[19:09:53] *** Joins: ltriant (~ltriant@203.63.103.126)
[19:09:54] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:10:06] <Levy[m]> not much at all if you keep up with versions between releases
[19:10:44] <plumeus> Still waiting for 1717 to break all my functions, please.
[19:11:10] <Levy[m]> The most painful one so far was the unused variables change as I discovered how many I had forgotten about
[19:11:26] <novakane> yeah I'm always using stable release and I never struggle too much to update my code
[19:11:32] <Levy[m]> "painful" is maybe not the right word
[19:11:37] <braewoods> i've been looking for a successor to using C for everything and most languages disappointed me. this might be what i've been looking for.
[19:11:42] <plumeus> Stable is worse for upgrading, imo
[19:11:50] <braewoods> even if it's not totally finished yet for stability
[19:11:54] <plumeus> Master changes feel incremental and nice
[19:11:54] <ikskuh> braewoods: welcome to an actually good replacement for C
[19:12:19] <braewoods> i won't stop using C but it might be good for other projects
[19:12:28] <plumeus> Zig also doesn't have too many regressions, so that's nice.
[19:13:12] <plumeus> Oh, `build.zig` is apparently considered production ready
[19:13:26] <plumeus> Even though I think it has problems as-is.
[19:13:45] <ikskuh> plumeus: it's definitly production *ready*, but also *not* stable
[19:13:57] <ikskuh> the biggest problem right now is that we can't process file inputs
[19:14:03] *** Joins: sebonirc (~sebonirc@2600:1017:b128:7ff8:4e77:cbff:fe1d:2c02)
[19:14:06] <ikskuh> all steps are always made
[19:14:12] <braewoods> so what does Zig use for code gen?
[19:14:17] <braewoods> LLVM? its own thing?
[19:14:23] <ikskuh> yes to both
[19:14:42] <ikskuh> the plan is to have custom backends for a standalone version and super-duper fast debug builds
[19:14:46] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 260 seconds)
[19:14:47] <plumeus> For C and C++, LLVM/Clang. For stage2, LLVM for release builds (soon)?
[19:14:47] <ikskuh> and LLVM for highly optimized release builds
[19:14:58] *** Quits: sebonirc (~sebonirc@2600:1017:b128:7ff8:4e77:cbff:fe1d:2c02) (Client Quit)
[19:15:04] <plumeus> Arocc for C when?
[19:15:25] <ikskuh> "now"
[19:15:36] <braewoods> i assume Zig will somehow support inline ASM too in some capacity? for the rare times that's useful.
[19:15:39] <ikskuh> afaik Vexu/andrew started integrating arocc already
[19:15:47] <ikskuh> braewoods: *grin*
[19:15:55] <ikskuh> there's no way to interact with the OS otherwise
[19:16:09] <ikskuh> zig stdlib builds its own OS abstraction layer
[19:16:20] <Earnestly> I've rarely found examples of languages which have both pre and post conditions, mostly just have 'assert' at the start but I've never seen assert at the end.  E.g. https://0x0.st/zXYw.txt
[19:16:20] <braewoods> right.. i just know sometimes you need ASM to get access to special instructions.
[19:16:48] <ikskuh> braewoods: inline assembly is a first class use case in zig :)
[19:16:58] <companion_cube> Earnestly: there's only Ada and D I think — maybe Eiffel too?
[19:17:00] <Earnestly> (The interesting thing here is that the post conditions have access to original values via the 'old aspect)
[19:17:12] <plumeus> ikskuh, I don't even think `build.zig` is "ready", tbh. I've had problems with libc++, it refuses to print C/C++ warnings unless a compile error happens, and a few other issues. Works on 95%+ of the projects, probably. The other few percent will still bite you.
[19:17:35] <braewoods> assuming you can make sense of C++ compiler errors :P
[19:17:37] <ikskuh> it actually prints warnings
[19:17:50] <ikskuh> at least that's what i've seen the last three days regularly
[19:17:53] <Earnestly> companion_cube: Yeah, eiffel has 'ensure' blocks
[19:18:01] <ikskuh> it will just not RE-print them every build
[19:18:01] <plumeus> Did you have a compile error?
[19:18:04] <companion_cube> a bit sad contracts are so niche
[19:18:13] <plumeus> That's for `zig cc`
[19:18:23] <ikskuh> i don't use "zig cc"
[19:18:30] <Earnestly> They also have ways to express loop invarients, e.g. https://0x0.st/z0Pi.txt
[19:18:45] <plumeus> `zig cc` prints warnings once. `zig build` doesn't print it even when I clear `zig-cache` and `.cache/zig/`, iirc
[19:18:54] <plumeus> Unless they changed behavior very recently.
[19:19:04] <companion_cube> Earnestly: that's necessary for formal proofs
[19:19:07] <Earnestly> Hm
[19:19:08] <companion_cube> is that spark code?
[19:19:13] <plumeus> Either way, the warnings should be printed multiple times
[19:19:29] <Earnestly> That doesn't show loop invariant, hm
[19:19:32] <ikskuh> plumeus: also that's not a part of the build system at all ;)
[19:19:52] <ikskuh> <plumeus> Either way, the warnings should be printed multiple times
[19:19:53] <companion_cube> no it's just array pre/post conditions it seems
[19:19:58] <ikskuh> this would require *rebuilding* every time you build
[19:20:07] <ikskuh> so caching is of no use and chromium would always take days to build
[19:20:08] <plumeus> You can cache warnings
[19:20:13] <Earnestly> Here is example of loop invariants https://0x0.st/z0P-.txt
[19:20:22] <ikskuh> plumeus: only when you have a cache
[19:20:23] <plumeus> Ccache will print warnings every time
[19:20:33] <Earnestly> companion_cube: (That's just ada2012)
[19:20:43] <ikskuh> the default build mode (build-exe or cc) don't have a project cache
[19:20:49] <companion_cube> are the invariants checked at runtime then??
[19:20:53] <plumeus> although they might be wrong about the directory where the warnings occurred, etc
[19:20:54] <companion_cube> I thought it was only used for proofs
[19:21:04] <Earnestly> spark does use them for that
[19:21:04] <ikskuh> and still: printing warnings is not at all related to "zig build"
[19:21:48] <Earnestly> But these are part of base language, https://gcc.gnu.org/onlinedocs/gcc-11.1.0/gnat_rm/Pragma-Loop_005fInvariant.html#Pragma-Loop_005fInvariant
[19:22:05] <companion_cube> ah, sure.
[19:22:15] <plumeus> Why isn't it? There's no way to easily build C code using `build.zig` without using the `addCSourceFile` stuff, which calls `zig build-exe` under the hood.
[19:22:16] <Earnestly> (also loop_variant)
[19:22:50] <plumeus> And idk why `zig build-exe` should hide the warnings either.
[19:23:11] <Earnestly> companion_cube: I mean, this should be possible to express with asserts alone.  There might need to be some need to store temporary values for original inputs but not too unreasonable
[19:23:11] <ikskuh> plumeus: "zig build" is just a very fancy way to invoke command line tools
[19:23:23] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[19:23:25] <Earnestly> I just never see it
[19:23:25] <plumeus> Well yes.
[19:23:27] <ikskuh> so it has nothing to do with the implementation of "zig build-exe" and others
[19:24:26] <Earnestly> companion_cube: (Yes, at runtime.  Ada doesn't have a way to do this at compile time, if it were possible)
[19:24:48] <ikskuh> plumeus: the workaround is also fairly easy: "-Werror" and done.
[19:25:04] <plumeus> I agree on the `-Werror` part.
[19:25:12] <ikskuh> i think in the way of zig, we should just make that an error 
[19:25:20] <ikskuh> *make warnings an error by default
[19:25:45] <plumeus> But it's not enabled by default and it's invisible to the users.
[19:25:56] <plumeus> Also, I wonder if `arocc` will support all the warnings.
[19:26:17] *** Joins: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles)
[19:26:24] <plumeus> I personally take the approach of `-Werror` and use `-Wno` for stuff I explicitly don't care for. Yes.
[19:26:57] <ikskuh> arocc is C18 compliant afaik
[19:28:15] <plumeus> Are the warnings part of the spec? I also thought some warnings aren't used strictly to enforce the spec.
[19:28:56] <ikskuh> i think some are
[19:29:17] <tsmanner> plumeus there's some discussion of the messaging behavior of zig compiles here https://github.com/ziglang/zig/issues/5469 The consensus there seems to be that a successful compile should produce no output, which implies that C/C++ compile warnings would be silenced
[19:30:03] <companion_cube> Earnestly: sure. but then it's less readable if you only have assert
[19:30:09] <plumeus> Well, by that philosophy, `-Werror` should be enabled by default.
[19:30:18] <companion_cube> note that D has that stuff also at comptime, to enforce generic type invariants
[19:30:26] <plumeus> Suppressing seems to be the wrong way to have an empty output.
[19:30:40] <ikskuh> plumeus: i think that should be made a proposal
[19:32:16] <plumeus> To quote Andrew on Feb 12th:
[19:32:26] <plumeus> "we can't turn on -Werror for default for C code"
[19:32:28] <plumeus> "ok I said that but now I'm reconsidering"
[19:32:53] <companion_cube> -Werror is the best way to have a noncompliant compiler
[19:32:58] <companion_cube> since it rejects valid code
[19:33:09] <braewoods> there's no reason they can't, the real question is whether you should. there's a lot of stuff that triggers warnings.
[19:34:22] <Earnestly> companion_cube: Yeah the D stuff looks tidy, I don't know it much.  I looked in but saw it closed source, then phobos/tango, left
[19:34:59] <companion_cube> it's not closed source anymore, btw. it's in gcc
[19:35:15] <companion_cube> (the stdlib split is also over I think?)
[19:35:17] <braewoods> there's 3 compilers for D now, they share some code.
[19:35:38] <plumeus> More compilers, the merrier
[19:35:42] <braewoods> getting a new language into GCC is a pretty big feat even
[19:35:49] <companion_cube> D is probably one of the languages Zig is the closest to, in some ways.
[19:35:56] <companion_cube> wrt the whole comptime stuff.
[19:36:32] *** Joins: cols (~cols@artemis.spensley.net)
[19:37:23] <plumeus> Maybe I should learn D. How does it compare to Zig? In terms of scope or unique/cool features, I guess.
[19:37:41] <plumeus> Oh, it's meant to be similar to C++.
[19:38:36] <companion_cube> it's a lot larger
[19:38:46] <companion_cube> but the comptime stuff looks quite cool
[19:38:49] *** Joins: Hoolean (~Hoolean@176.56.237.138)
[19:39:14] <plumeus> Huh, it has GC and support for functional-style code? Sounds cool, but also complex.
[19:39:32] *** Quits: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net) (Ping timeout: 240 seconds)
[19:39:42] <companion_cube> there's a flag called "-betterC" which removes the GC and most of the runtime I think
[19:39:49] <companion_cube> that's the fragment that might be quite close to Zig
[19:40:37] *** Joins: lehmrob (~rd7@p5dca8131.dip0.t-ipconnect.de)
[19:40:40] *** Quits: lehmrob (~rd7@p5dca8131.dip0.t-ipconnect.de) (Client Quit)
[19:41:29] *** Joins: ltriant (~ltriant@203.63.103.126)
[19:42:02] <tdmm> is it possible to query the frame of an async function to determine if it's finished or not?
[19:42:52] <tdmm> I tried achieving this with a hacky solution with multiple awaits and dropping intermediary frames but apparently you can't await a single function multiple times
[19:46:13] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 240 seconds)
[19:50:13] <Earnestly> companion_cube: Yeah I saw that D fixed that problem, but it was long ago
[19:51:09] *** Joins: phaleth (~user@user/phaleth)
[19:55:28] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[19:57:06] *** Joins: ncon (~ncon@wireguard/developer/ncon)
[20:03:03] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:24:40] *** Quits: miffi (~miffi@user/miffi) (Quit: Client closed)
[20:29:29] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[20:39:24] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[20:39:43] *** Joins: cursey (~cursey@user/cursey)
[20:42:05] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[20:47:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[20:48:55] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:49:52] <Hoolean> is there a reason why, if i use "if" and "else" to evaluate to an enum literal, everything works fine, but if i add on an "else if", it complains about being comptime known?
[20:49:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:50:07] <Hoolean> feel like i might be bumping into an edgecase
[20:50:33] <Hoolean> okay:    if (...) .One else .Two
[20:50:51] <Hoolean> not okay:    if (...) .One else if (...) .Three else .Two
[20:51:27] <Hoolean> i've tried rotating the literals around to make sure there's not just one missing; it really seems to be caused by the "else if" in particular
[20:52:49] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[20:53:24] *** Joins: terminalpusher (~terminalp@2a01:586:8ebf:1:61de:4bc4:bbfb:5388)
[20:55:22] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[20:55:56] *** Quits: beepbooptheory (~mik-wsl@50.216.98.94) (Ping timeout: 250 seconds)
[20:56:07] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[20:58:20] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[21:01:17] *** Joins: jemius (~imperator@200116b82ded26009ef54da4d5502a69.dip.versatel-1u1.de)
[21:01:31] <Hoolean> secondary question: if i have a `const MyStruct = struct { field: enum { A, B, C } }`, how do i instantiate an enum of the field type?
[21:01:42] <Hoolean> i thought something like MyStruct.field.A might work, but no dice
[21:03:50] *** Joins: rgrinberg (~textual@2806:101e:7:8d89:9c57:a6ef:9411:5b4d)
[21:06:56] <plumeus> can you not do `MyStruct.field = .A`?
[21:07:38] <plumeus> If you want it to be an enum you can use in other areas, it should be `struct { const field = enum { A, B, C }; };`, right?
[21:07:49] <plumeus> At which point you can do `struct.field.A`, I think
[21:09:29] <plumeus> I meant, `MyStruct{ .field = .A };` for the first portion.
[21:10:03] <Hoolean> plumeus: so the issue i'm having is that the value of .field is determined at runtime
[21:10:12] <Hoolean> in particular, using if/elses to work out which one it is
[21:10:34] <Hoolean> sadly, it looks like there is a known bug with coercing enum literals in this case: https://github.com/ziglang/zig/issues/4629#issuecomment-741189782
[21:10:47] <Hoolean> so i'm left with the option of referring to the enum type explicitly
[21:11:12] <Hoolean> i've not had luck with MyStruct.field.A for that, seems like it's not meant to be accessed that way
[21:15:24] <Hoolean> plumeus: "If you want it to be an enum you can use in other areas, it should be ..." this did it for me, thank you
[21:15:35] <Hoolean> nice and explicit, i like that as a workaround
[21:15:42] <plumeus> oh, wow
[21:16:19] <Hoolean> seems nicer than having to get rid of any of my "const"s
[21:16:27] <Hoolean> and i don't mind sharing the enum a bit more
[21:16:39] <Hoolean> can wait for the bug to be fixed to go back to literals : )
[21:17:09] <Hoolean> i'd have a shot at patching it myself, but from what i gather it might be blocked on some self-hosting compiler stuff
[21:17:46] <Hoolean> final code:    if (...) .One else if (...) .Three else MyStruct.number.Two
[21:17:55] *** Joins: winter6 (~winter@user/winter)
[21:18:03] <Hoolean> where .number is the public const field
[21:18:08] *** Quits: winter (~winter@user/winter) (Read error: Connection reset by peer)
[21:18:08] *** winter6 is now known as winter
[21:18:41] <Hoolean> plumeus: ta for the pointers : )
[21:20:22] *** Quits: Hoolean (~Hoolean@176.56.237.138) (Quit: Client closed)
[21:20:46] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[21:32:44] *** Quits: yrlf6 (~yrlf@omnath.yrlf.at) (Quit: The Lounge - https://thelounge.chat)
[21:33:47] *** Joins: yrlf (~yrlf@omnath.yrlf.at)
[21:36:16] *** Quits: rgrinberg (~textual@2806:101e:7:8d89:9c57:a6ef:9411:5b4d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:48:39] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[21:48:40] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:51:18] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 252 seconds)
[21:53:23] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[22:01:01] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[22:07:48] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 240 seconds)
[22:11:33] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:e06b:7369:9241:49f9)
[22:13:02] *** Quits: NickH (~hastings@aj154045.dynamic.ppp.asahi-net.or.jp) (Ping timeout: 260 seconds)
[22:15:11] *** Quits: terminalpusher (~terminalp@2a01:586:8ebf:1:61de:4bc4:bbfb:5388) (Remote host closed the connection)
[22:15:46] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 245 seconds)
[22:23:06] *** Joins: tane (~tane@user/tane)
[22:23:39] *** Joins: NickH (~hastings@aj154045.dynamic.ppp.asahi-net.or.jp)
[22:31:00] *** Quits: NickH (~hastings@aj154045.dynamic.ppp.asahi-net.or.jp) (Ping timeout: 240 seconds)
[22:31:22] *** Joins: cabal704 (~cabal704@user/cabal704)
[22:35:48] *** Quits: cabal704 (~cabal704@user/cabal704) (Ping timeout: 240 seconds)
[22:42:43] *** Joins: cabal704 (~cabal704@user/cabal704)
[22:57:05] *** Joins: NickH (~hastings@aj154045.dynamic.ppp.asahi-net.or.jp)
[23:10:28] *** Joins: xackus (~xackus@185.15.0.3)
[23:18:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[23:20:45] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:26:37] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 240 seconds)
[23:28:28] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[23:35:14] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 272 seconds)
[23:43:23] *** Joins: ur5us_ (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22)
[23:45:09] *** Quits: MajorBiscuit (~MajorBisc@c-001-019-045.client.tudelft.eduvpn.nl) (Ping timeout: 252 seconds)
[23:47:30] *** Joins: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr)
[23:52:20] *** Quits: alxarch (~alxarch@ppp-94-66-221-114.home.otenet.gr) (Ping timeout: 272 seconds)
