[00:36:00] *** Joins: rockcavera (~rc@192.12.114.201)
[00:36:00] *** Quits: rockcavera (~rc@192.12.114.201) (Changing host)
[00:36:00] *** Joins: rockcavera (~rc@user/rockcavera)
[00:38:31] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:42:23] *** Joins: vicfred (~vicfred@user/vicfred)
[01:13:35] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[01:13:37] <arkanoid> Is there a good example of C++ OOP wrapping in nim that works with arc?
[01:15:27] <arkanoid> me and the author of nimqml are trying to figure out a solution to port code to arc. The current design works with refc but doesn't work with arc without breaking backward compatibility
[01:51:59] <FromDiscord> <ynfle> Can `staticRead` be given relative paths
[01:52:01] <FromDiscord> <ynfle> (edit) "paths" => "paths?"
[01:55:43] <FromDiscord> <exelotl> yeah, relative to the file in which the staticRead occurs
[02:03:33] <FromDiscord> <ynfle> In reply to @exelotl "yeah, relative to the": Does it also respecte `~` for home dir?
[02:04:11] <FromDiscord> <exelotl> nope, that's a feature of the shell
[02:04:49] <FromDiscord> <ynfle> In reply to @exelotl "nope, that's a feature": Is there a way to simulate that?
[02:05:31] <FromDiscord> <exelotl> maybe you could do `staticRead(getEnv("HOME") & "/path/to/my_file.txt")`
[02:06:00] <FromDiscord> <exelotl> but that will only work if `getEnv` from the `os` module is allowed to be used at compile-time
[02:08:37] <FromDiscord> <exelotl> also it's not exactly a cross-platform solution, for example on windows it would be `getEnv("HOMEDRIVE") & getEnv("HOMEPATH")`
[02:08:53] <FromDiscord> <exelotl> I think
[02:11:07] <FromDiscord> <congusbongus> `getenv("AppData")` in windows
[02:13:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[02:31:30] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828)
[02:32:07] <arkanoid> what really is an empty object? https://play.nim-lang.org/#ix=3MPV ?
[02:32:17] <arkanoid> what's inside that byte?
[02:33:41] <FromDiscord> <IsaacPaul> maybe `expandTilde` works ü§∑‚Äç‚ôÇÔ∏è
[02:34:24] <FromDiscord> <Elegantbeef> I think it's just a case of "that's the min size of any object"
[02:34:48] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828) (Client Quit)
[02:34:52] <FromDiscord> <Elegantbeef> `dump cast[ptr byte](td.unsafeAddr)[]` will return `0` which makes sense
[02:40:40] <FromDiscord> <Elegantbeef> If you're after a 0 sized type `void`
[02:42:48] <arkanoid> null pointer is pointing to non null data?
[02:43:13] <arkanoid> I mean, I'm reading the first byte of that min object on stack as int
[02:43:57] <FromDiscord> <Elegantbeef> Eh there might be compiler issues to why that doesnt work
[02:44:25] <FromDiscord> <Elegantbeef> You should be doing `cast[byte]` eitherway
[02:44:31] <FromDiscord> <Elegantbeef> and it's still `0`
[02:45:11] <FromDiscord> <Elegantbeef> There is 0 reason to use an empty object in Nim so this is like the most edge casey odd bug
[02:48:30] <FromDiscord> <Elegantbeef> Atleast i dont think there is, could be wrong
[02:53:16] <arkanoid> sure, I'm dealing with metaphysics
[02:53:53] <arkanoid> you're right, if I cast to byte I get zero
[02:54:03] <arkanoid> curios why I'm getting weird int 
[02:54:16] <FromDiscord> <Elegantbeef> Cause you're reading memory after the byte
[02:55:58] <FromDiscord> <Elegantbeef> Atleast I think
[02:56:16] <FromDiscord> <Elegantbeef> That metaphysics statement was a joke right? üôÇ
[02:56:45] <arkanoid> sure it is
[02:56:51] <arkanoid> it it possible to deal with it anyway?
[02:57:20] <arkanoid> damn, int is 8 bytes
[02:57:28] <arkanoid> I need a coffee
[02:57:33] <FromDiscord> <Elegantbeef> Totally you pretend it doesnt exist and supress thought of it
[02:57:37] <FromDiscord> <Elegantbeef> Int is 8 bytes
[02:57:50] <arkanoid> yeah, was doing silly mistake
[02:57:53] <arkanoid> not it makes esne
[02:57:55] <arkanoid> sense
[02:59:09] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[03:09:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:27:53] <nrds> <06Prestige99> @Elegantbeef finally getting around to concepts. Is there a way to create a concept that I could "apply" to multiple types? I need to find some documentation on this..
[03:28:11] <FromDiscord> <Elegantbeef> elaborate on "apply"
[03:28:35] <nrds> <06Prestige99> like I want multiple types to have a function named getBounds that returns a Rectangle
[03:28:57] <nrds> <06Prestige99> and I want to be able to refer to this concept in a file that takes an object that has getBounds
[03:29:13] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3MQh
[03:29:27] <FromDiscord> <Elegantbeef> Then your proc would be `proc doThing(b: BoundObject)`
[03:29:44] <nrds> <06Prestige99> So say I want a new Foo type that is also a BoundObject?
[03:30:13] <FromDiscord> <Elegantbeef> You implement `getBounds` and it's a BoundObject
[03:30:26] <FromDiscord> <Elegantbeef> Concepts are user defined duck typing, it's that simple
[03:30:26] <nrds> <06Prestige99> hm 
[03:30:35] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:31:28] <nrds> <06Prestige99> dang, was hoping it was slightly more robust
[03:32:33] <FromDiscord> <Elegantbeef> In what way?
[03:33:15] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3MQk
[03:33:19] <nrds> <06Prestige99> I'm thinking more like an interface where I can simple say like, type Foo = object with concept BoundObject or some nonsense
[03:33:21] <FromDiscord> <Elegantbeef> Here's a basic example
[03:33:35] <FromDiscord> <Elegantbeef> You want interfaces
[03:34:05] <nrds> <06Prestige99> well
[03:34:06] <FromDiscord> <ajusa> https://github.com/yglukhov/iface/ is good for interfaces
[03:34:09] <FromDiscord> <Elegantbeef> Or traits rather
[03:34:27] <FromDiscord> <Elegantbeef> I was considering at a point making a trait like system using concepts
[03:34:29] <nrds> <06Prestige99> It would be nice to get a compiler error if I forgot to implement getBounds on the type, for instance
[03:36:06] <FromDiscord> <Elegantbeef> Yea there's not a mechanism that'd enable that
[03:36:34] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3MQl
[03:36:57] <FromDiscord> <Elegantbeef> Manually placing that at the end of the module you implement the type in gets tedious
[03:37:26] <nrds> <06Prestige99> suppose that could be put together with macros eh
[03:37:37] <FromDiscord> <Elegantbeef> Eh not really
[03:38:24] <FromDiscord> <Elegantbeef> You need to have an assertion at the end of a file to ensure that you've implemented a concept, but you cannot use a macro to add code to the end of a moduel
[03:39:16] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3MQm
[03:40:09] <nrds> <06Prestige99> interesting
[03:41:24] <FromDiscord> <Elegantbeef> So aside from manual assertions(which are less than useless since you might aswell just manually check once) you pretty much only have instantiation errors to protect you
[03:42:36] <FromDiscord> <Elegantbeef> I suppose you could make macro that uses the new concepts and annotate procedures and then in your main module have a `conceptCheck`
[03:44:20] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3MQo
[03:45:09] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3MQp
[03:46:43] <nrds> <06Prestige99> well I think I'll just do the simple getBounds concept for now
[03:47:08] <FromDiscord> <Elegantbeef> Jeez have some fun play with macros! üòõ
[03:47:11] <nrds> <06Prestige99> I hope they are cleaned up and expanded upon sooner rather than later, would be sweet to have something like an interface
[03:47:27] <nrds> <06Prestige99> eh
[03:47:34] <nrds> <06Prestige99> Macros are a pain haha
[04:06:54] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:08:15] <nrds> <06Prestige99> Is there a proc that adds an element to the front of a seq?
[04:15:40] <FromDiscord> <leorize> `insert` should do
[04:18:06] <nrds> <06Prestige99> ah, thanks
[04:47:31] <FromDiscord> <Elegantbeef> prestige you know i cannot help myself https://play.nim-lang.org/#ix=3MQE
[04:48:05] <FromDiscord> <Elegantbeef> A few modifications can be done to ensure it matches and there are some issues if you have `var T` i guess
[04:48:28] <FromDiscord> <Elegantbeef> But it works so a PoC üòõ
[04:49:03] <arkanoid> are pure enums a better idiom?
[04:49:20] <FromDiscord> <Elegantbeef> Personally i prefer prefixes to pure but YMMV
[04:50:17] <FromDiscord> <zgasma> hi, I'm new to Nim and trying to nimify a c networking library that uses a lot of uint8 arrays to handle the data. What's the proper Nim way to handle that? Do I just convert to seq[uint8] somehow?
[04:50:32] <nrds> <06Prestige99> was that supposed to compile beef?
[04:50:41] <FromDiscord> <Elegantbeef> It does compile on 1.6.0
[04:50:50] <FromDiscord> <Elegantbeef> The playground is on 1.4.8 for whatever reason
[04:50:55] <FromDiscord> <Elegantbeef> What's the exact C code doing?
[04:50:59] <nrds> <06Prestige99> oh, okay
[04:51:13] <FromDiscord> <Elegantbeef> You could use a `string` or `seq[uint8]` or `array[size, uint8]`
[04:51:31] <nrds> <06Prestige99> that's awesome beef
[04:52:28] <FromDiscord> <Elegantbeef> There are a few things that could be done adding procedure types to the table so you can get exact read outs, might even be able to do that to avoid having to do the iteration
[04:52:39] <FromDiscord> <Elegantbeef> replace all `Self` with the type on subscription
[04:52:53] <FromDiscord> <Elegantbeef> then just use `sameType(a, b)`
[04:54:06] <FromDiscord> <Elegantbeef> That's actually probably the better idea, so might toy with it later to make it cleaner
[04:54:57] <nrds> <06Prestige99> Would be neat if we could somehow make that part of the type declaration rather than invoking a macro manually
[04:55:10] <arkanoid> the manual sometimes splits enum values by `,` sometimes not, which one is nep1?
[04:55:18] <FromDiscord> <Elegantbeef> You cant really since you want a `sem`
[04:55:26] <FromDiscord> <Elegantbeef> i mean a `sym`
[04:55:40] <FromDiscord> <zgasma> @Clonkk it's passing a uint8[] into read and then basically casting that into a union.  I can figure out the fiddely bits, but I didn't want to miss any nimisms that might make that sort of thing easier.
[04:56:09] <FromDiscord> <Elegantbeef> there are no typed typedef macros sadly
[04:56:43] <FromDiscord> <Elegantbeef> You'd basically do the same thing in Nim
[04:57:01] <FromDiscord> <Elegantbeef> Do you have an example of the C code?
[04:57:54] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3MQI
[04:58:14] <FromDiscord> <Elegantbeef> But yea ideally it'd support `type MyObj {.impl: BoundObject.}`
[04:59:19] <FromDiscord> <zgasma> I mean, here's a hunk that probably illustrates what I'm trying to do: https://git.sr.ht/~ft/c9/tree/master/item/c9.c#L418
[05:00:39] <FromDiscord> <Elegantbeef> Now if only that was readable C
[05:01:32] <FromDiscord> <zgasma> haha...yes. This is actually a simpler implementation of the 9p protocol...which is why I'd prefer to have it in Nim ;)
[05:02:33] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:4c8a:a2e8:32e:8649)
[05:04:01] <FromDiscord> <Elegantbeef> I'd argue it's better to refer to the manpages than that code
[05:05:23] <FromDiscord> <zgasma> probably true. It's all kind of old-style C, even the descriptions in the man pages. I'll keep plugging away at it, though.
[05:05:36] <FromDiscord> <zgasma> gotta bail, but thanks for your help
[05:05:39] <FromDiscord> <Elegantbeef> http://man.cat-v.org/plan_9/5/stat well this is more readable and helps more imo than that C code
[05:05:52] <FromDiscord> <Elegantbeef> I dont get why they dont just make a struct for this though
[05:06:22] <FromDiscord> <Elegantbeef> Buh bye, i didnt do anything üòõ
[05:06:57] <FromDiscord> <zgasma> eh...you at least let me know that there wasn't some "well, duh. Just do it this way" thing that I was missing.
[05:20:46] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[05:21:29] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3MQL
[05:21:35] <FromDiscord> <Patitotective> (edit) 
[05:21:43] <FromDiscord> <Elegantbeef> New line
[05:22:06] <FromDiscord> <Patitotective> Before `.. code-block::`?
[05:22:08] <FromDiscord> <Elegantbeef> and you may want `.. code-block:: Nim`
[05:22:11] <FromDiscord> <Elegantbeef> Yes
[05:23:09] <FromDiscord> <Patitotective> üëç
[05:31:04] <FromDiscord> <Patitotective> A question: why does _Nim_'s _DocGen_ uses _rst_ instead of _Mardown_?
[05:31:37] <FromDiscord> <Patitotective> (edit) "uses" => "use"
[05:32:46] <FromDiscord> <Patitotective> _Mardown_ code blocks and links looks clearer to me
[05:32:48] <FromDiscord> <Rika> because rst is more "rich" than markdown?
[05:33:37] <FromDiscord> <Patitotective> In reply to @Rika "because rst is more": there should be a _Markdown_ only _DocGen_, for the people who don't actually need the _rst_ rich features
[05:33:46] <FromDiscord> <Rika> that is extra maintenance cost
[05:34:18] <FromDiscord> <Elegantbeef> Nimibook and nimib exist if you want MD nim code
[05:34:45] <FromDiscord> <Elegantbeef> It doesnt work with the Nim doc gen tooling but it does allow Nim + docs
[05:35:18] <FromDiscord> <leorize> Araq wants `:idx:`, yes, that is the only reason \:P‚Üµ(@Patitotective)
[05:35:58] <FromDiscord> <leorize> btw the docgen is a hybrid and can understand MD syntax, too
[05:37:05] <FromDiscord> <Patitotective> In reply to @leorize "btw the docgen is": code blocks and links?
[05:37:26] <FromDiscord> <Patitotective> (edit) "In reply to @leorize "btw the docgen is": ... code" 03added "fenced"
[05:37:50] <FromDiscord> <leorize> it can do code blocks the last time I checked
[05:39:04] <FromDiscord> <Patitotective> In reply to @leorize "it can do code": Oh :awesome:
[05:44:14] <FromDiscord> <Elegantbeef> Prestige we have an even fancier impl! https://play.nim-lang.org/#ix=3MQO
[05:44:32] <FromDiscord> <Elegantbeef> This one should work with `var Self` but i didnt test üôÇ
[05:47:12] <nrds> <06Prestige99> oh nice
[05:47:38] <nrds> <06Prestige99> should just make our own implementation of concepts...
[05:48:15] <FromDiscord> <Elegantbeef> Eh i'm too dumb to do that
[05:48:49] <FromDiscord> <Elegantbeef> Stuff like this is the big benefit of the new concept impl though
[05:48:55] <FromDiscord> <Elegantbeef> It's easy as hell to use macros on it
[05:51:38] <arkanoid> if an object field and a proc have the same name, how can I control which one is used when mypbj.mysignature ?
[05:51:52] <arkanoid> if both are exported
[05:52:27] <arkanoid> I've tried modifying the order of the `export`s but it doesn't matter, seems to prefer the object field
[05:53:41] *** Joins: rockcavera (~rc@192.12.114.201)
[05:53:41] *** Quits: rockcavera (~rc@192.12.114.201) (Changing host)
[05:53:41] *** Joins: rockcavera (~rc@user/rockcavera)
[05:53:57] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[05:54:52] <FromDiscord> <Elegantbeef> i mean that's a code smell that your field and proc have same names
[05:55:22] <FromDiscord> <leorize> the spec said that the field is always preferred
[05:55:24] <FromDiscord> <Elegantbeef> You can do `module.proc(args)`
[05:57:19] <arkanoid> yeah I know, but I'm trying to do by best to stick with the original specs
[05:57:40] <arkanoid> thanks
[06:00:42] <nixfreaknim[m]> https://github.com/MythicAgents/Nimplant/blob/main/Payload_Type/Nimplant/agent_code/utils/config.nim
[06:01:32] <nixfreaknim[m]> I'm curious about how nim can ingest this whole config and keep it in memory and you can call out the objects whenever you want.
[06:03:01] <FromDiscord> <Elegantbeef> `var GlobalConfig = createConfig()`?
[06:03:56] <FromDiscord> <Rika> this code looks so bad ngl
[06:13:47] *** Joins: jmdaemon (~jmdaemon@142.207.76.198)
[06:15:18] *** Quits: jmdaemon (~jmdaemon@142.207.76.198) (Changing host)
[06:15:18] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:17:25] *** Joins: tiorock (~rc@192.12.114.201)
[06:17:25] *** Quits: tiorock (~rc@192.12.114.201) (Changing host)
[06:17:25] *** Joins: tiorock (~rc@user/rockcavera)
[06:17:25] *** rockcavera is now known as Guest7322
[06:17:25] *** Quits: Guest7322 (~rc@user/rockcavera) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[06:17:25] *** tiorock is now known as rockcavera
[06:20:20] *** Joins: tiorock (~rc@192.12.114.201)
[06:20:20] *** Quits: tiorock (~rc@192.12.114.201) (Changing host)
[06:20:20] *** Joins: tiorock (~rc@user/rockcavera)
[06:20:20] *** Quits: rockcavera (~rc@user/rockcavera) (Killed (tantalum.libera.chat (Nickname regained by services)))
[06:20:20] *** tiorock is now known as rockcavera
[06:27:05] <arkanoid> is it possible to parseInt a substring in a string without making a copy if it?
[06:27:07] *** Quits: rockcavera (~rc@user/rockcavera) (Ping timeout: 256 seconds)
[06:28:26] <arkanoid> I mean, let ppp = "foo42bar"; let psub = ppp[3..4]; psub.parseInt"
[06:28:28] <FromDiscord> <Elegantbeef> make your own `parseInt` that takes an `openArray[char]`
[06:29:11] *** Joins: rockcavera (~rc@192.12.114.201)
[06:29:11] *** Quits: rockcavera (~rc@192.12.114.201) (Changing host)
[06:29:11] *** Joins: rockcavera (~rc@user/rockcavera)
[06:30:24] <arkanoid> and to make a string an openarray, do I have to cast?
[06:30:33] <arkanoid> *a substring an openarray
[06:30:47] <FromDiscord> <Elegantbeef> `toOpenArray`
[06:31:37] <arkanoid> sweet! Didn't know it already had first and last arguments
[06:31:51] <arkanoid> sorry but I've been diving into the zero copy world just recently
[06:31:53] <FromDiscord> <Rika> also doesnt parseutils have a "slicing parseInt"
[06:32:04] <FromDiscord> <Elegantbeef> it does
[06:32:09] <FromDiscord> <Elegantbeef> I forgot about it
[06:32:45] <arkanoid> maybe this? https://nim-lang.org/docs/parseutils.html#parseInt%2Cstring%2Cint%2Cint
[06:32:55] <arkanoid> this doesn't make a copy?
[06:33:04] <FromDiscord> <Elegantbeef> indeed
[06:33:29] <FromDiscord> <Elegantbeef> it's immutable there is no need to copy the data of the string
[06:34:35] <FromDiscord> <Elegantbeef> Easy enough to check https://play.nim-lang.org/#ix=3MR0
[06:35:28] <arkanoid> damn, the parseInt from parseutils doesn't have the end character arg
[06:36:48] <FromDiscord> <Elegantbeef> It parses all values until it hits a non int character so you may need to implement your own
[06:37:20] <FromDiscord> <Elegantbeef> Given you have the size of the integer it's not too bad
[06:37:25] <FromDiscord> <Rika> i dont understand what you would need the end char arg for
[06:41:59] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:43:51] <FromDiscord> <reilly> Doing `return "some string"` in a proc of which the return value is a `Future[string]` should automagically convert my string literal into a Future, right?
[06:45:39] <FromDiscord> <Rika> yes
[06:48:56] <arkanoid> damn, zero copy is pushing my habits to new horizons
[06:49:14] <FromDiscord> <Elegantbeef> It's half magic
[06:56:27] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[07:05:05] <arkanoid> is there a reason why stdlib functions that takes int don't use always SomeInterger?
[07:06:00] <FromDiscord> <Elegantbeef> Some amount of underflow/overflow protection i assume
[07:06:16] <FromDiscord> <Elegantbeef> or it just doesnt make sense
[07:06:58] <FromDiscord> <Rika> or its just old
[07:13:04] <arkanoid> I have to rewrite parseutils.rawParseInt because I need to feed a "var int32"
[07:13:13] <arkanoid> or better, a cint
[07:24:21] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[07:43:14] <arkanoid> I'm confused by the ^ thing in slicing
[07:43:57] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[07:44:06] <arkanoid> why 1..5 includes 1 and 5, but ^1 doest cut last element?
[07:45:02] <FromDiscord> <Elegantbeef> cause `^1` is implemented to get the last element
[07:45:58] <arkanoid> was ^0 more correct?
[07:46:27] <FromDiscord> <Elegantbeef> Depends on your view
[07:47:06] <FromDiscord> <Elegantbeef> There is no empirical answer to what it should do
[07:48:14] <FromDiscord> <Elegantbeef> If you think about it like in other languages though, python does  `-1`  to get the last element
[07:49:46] <nrds> <06Prestige99> I think of it like, length - number
[07:55:01] <arkanoid> yeah, but why doing that instead of <len
[07:56:31] <nrds> <06Prestige99> maybe you want the 2nd to last element so you'd do arr[^2]
[07:57:03] <FromDiscord> <Elegantbeef> you mean `s[i..^1]` vs `s[i..s.len]`?
[07:58:13] <FromDiscord> <Elegantbeef> I guess `s.high`
[08:00:39] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[08:01:07] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[08:01:28] <arkanoid> I mean s[i..^1] vs s[i..<s.high]
[08:01:37] <arkanoid> or s.len, whatever
[08:01:49] <FromDiscord> <Elegantbeef> I mean it's a shorthand that's why üòõ
[08:02:35] <arkanoid> well, ok
[08:02:58] <FromDiscord> <Elegantbeef> It's more ergonomic and also works for non last element
[08:03:29] <arkanoid> whoa I've just found a very weird bug in vscode. If I print cstring values in vscode terminal, it prints stuff from other strings. If I run the same program in normal terminal it prints correctly
[08:04:06] <FromDiscord> <Elegantbeef> Uhhh min repro?
[08:04:19] <arkanoid> no, wait, I was wrong. It prints wrong string also in terminal. Let me double check
[08:05:35] <arkanoid> it runs right in nim play https://play.nim-lang.org/#ix=3MRi
[08:06:52] <FromDiscord> <Rosen> in my term it seems to be right? https://media.discordapp.net/attachments/371759389889003532/933580820571119676/unknown.png
[08:07:00] <FromDiscord> <Elegantbeef> As in mine
[08:07:01] <arkanoid> this is with my output https://play.nim-lang.org/#ix=3MRj
[08:07:35] <FromDiscord> <Rosen> that's really wacky
[08:13:21] <FromDiscord> <evoalg> prints correctly for me, even on a mac
[08:13:52] <FromDiscord> <Elegantbeef> "even on a mac" damn  üòÄ
[08:14:19] <arkanoid> I'm trying to narrow down
[08:14:21] <FromDiscord> <evoalg> hehe ... and I don't even understand what the code is doing and it still prints correctly
[08:14:33] <arkanoid> if I switch to refc it prints correctly
[08:14:36] <arkanoid> try with arc
[08:15:10] <FromDiscord> <evoalg> orc works for me
[08:15:37] <FromDiscord> <evoalg> so does arc
[08:16:45] <FromDiscord> <Elegantbeef> As with me
[08:17:24] <FromDiscord> <Rika> ooh im in i wanna try
[08:17:54] <arkanoid> wait a sec, I'm still narrowing down
[08:17:59] <arkanoid> it may be a bug in unittest
[08:18:27] <FromDiscord> <Elegantbeef> Ah nope
[08:18:27] <FromDiscord> <Rika> works for me
[08:18:50] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3MRo here you go
[08:18:55] <FromDiscord> <Elegantbeef> Reproduction using `arc`
[08:19:26] <FromDiscord> <Elegantbeef> The issue is `cstring` doesnt create a new cstring it only gives you `string[0].addr`
[08:19:44] <FromDiscord> <Elegantbeef> So when the string get's GC'd you're pointing at bad memory
[08:21:34] <arkanoid> :| so cstring type is not safe?
[08:21:59] <FromDiscord> <Elegantbeef> Cstring is just a fancy `ptr char`
[08:22:22] <FromDiscord> <Elegantbeef> In the C backend it's to be compatible with `char`
[08:22:37] <arkanoid> sure, but so it is not traced anywhere
[08:22:45] <FromDiscord> <Elegantbeef> Of course not
[08:23:36] <FromDiscord> <Elegantbeef> It's there to interact with backend strings
[08:25:14] <FromDiscord> <Elegantbeef> This is where you'd use a destructor to free it and a constructor that takes a string and a slice to allocate it
[08:25:39] <FromDiscord> <evoalg> I don't need to learn about cstrings right?
[08:25:52] <FromDiscord> <Rika> ?
[08:25:53] <FromDiscord> <Rika> for?
[08:25:55] <FromDiscord> <Elegantbeef> They're mainly for C interop
[08:25:58] <FromDiscord> <Rika> depends on what you do yes
[08:26:05] <arkanoid> thanks, I though there was something mora magical around cstring, now I see the light
[08:26:14] *** Joins: jmdaemon (~jmdaemon@142.207.63.195)
[08:26:18] <FromDiscord> <Elegantbeef> So if you write pure nim with 0 reliance on C interop you wont need to
[08:26:47] <FromDiscord> <evoalg> ok I wont worry then - thank you beefy
[08:27:46] <FromDiscord> <Elegantbeef> They're not complicated really they're just pointers to characters üòõ
[08:28:52] <FromDiscord> <evoalg> sounds like a trap!
[08:30:45] <FromDiscord> <Rika> why do you think nim doesnt use it by default
[08:32:45] <FromDiscord> <Elegantbeef> Unmanaged pointers that need to be terminated by `\0` is peak safety!
[08:33:16] <FromDiscord> <Rika> who needs \0 anyway
[08:33:21] <FromDiscord> <Rika> whoops
[08:33:35] <FromDiscord> <congusbongus> you're on the fast track to seeing deadbeef
[08:33:45] <FromDiscord> <Rika> wtf thats so rude
[08:33:50] <FromDiscord> <Elegantbeef> who needs what? The message didnt send to completion!
[08:33:53] <FromDiscord> <Rika> why do you want to see beef dead
[08:34:02] <FromDiscord> <Elegantbeef> I can think of a few reasons
[08:34:14] <FromDiscord> <congusbongus> oh lol I forgot someone's named beef here
[08:34:18] <FromDiscord> <congusbongus> 0xDEADBEEF rather
[08:34:24] <FromDiscord> <Elegantbeef> Dont worry i do aswell
[08:34:26] <FromDiscord> <Rika> now you just leetified it
[08:34:31] <FromDiscord> <congusbongus> count yourself lucky if you don't know that reference
[08:34:44] <FromDiscord> <Rika> ~~i do, im still trying to joke about beef~~
[08:35:09] <arkanoid> I'm writing test cases and I'm check equality between two stack allocated variant objects. I'm getting: "system.nim(1874, 7) Error: parallel 'fields' iterator does not work for 'case' objects"
[08:37:25] <FromDiscord> <Elegantbeef> Yep presently you have to make your own `==` for variant objects, i imagine someone somewhere has a macro for it
[08:37:46] <arkanoid> boooring
[08:38:02] <FromDiscord> <Elegantbeef> Indeed
[08:38:30] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:39:28] <arkanoid> found https://github.com/status-im/nimbus-eth2/blob/a84a8ba1/tests/helpers/debug_state.nim#L81-L83
[08:40:28] <arkanoid> but I'm lazy, I'm gonna compare `$` output instead :P
[09:13:58] *** Quits: jmdaemon (~jmdaemon@142.207.63.195) (Changing host)
[09:13:58] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[09:31:08] <FromDiscord> <;; ÿØŸÑŸáÿßÿ® ;;> hey I wrote a discord rpc test using a package called discord_rpc
[09:31:24] <FromDiscord> <;; ÿØŸÑŸáÿßÿ® ;;> idk why but even though it compiles well it doesn't work
[09:31:34] <FromDiscord> <;; ÿØŸÑŸáÿßÿ® ;;> can anyone tell me if I've missed something ?
[09:32:38] <FromDiscord> <;; ÿØŸÑŸáÿßÿ® ;;> sent a code paste, see https://play.nim-lang.org/#ix=3MRC
[09:43:35] <FromDiscord> <Elegantbeef> Any more insight aside from "doesnt work"?
[09:56:40] <FromDiscord> <x14p58m> Hi
[10:09:07] <FromDiscord> <Rika> please dont spam every channel with a hi
[10:14:47] <FromDiscord> <Elegantbeef> Rika it's even worse it's NFT spam in internals üòÄ
[10:17:07] <FromDiscord> <;; ÿØŸÑŸáÿßÿ® ;;> In reply to @Elegantbeef "Any more insight aside": well it compiles and runs
[10:17:19] <FromDiscord> <;; ÿØŸÑŸáÿßÿ® ;;> well it compiles and runs‚Üµbut that's it‚Üµno rpc
[10:17:27] <FromDiscord> <;; ÿØŸÑŸáÿßÿ® ;;> (edit) "well it compiles and runs‚Üµbut" => "but"
[10:19:25] <FromDiscord> <x14p58m> NFT Method\: https://dlsfile.com/dd/MHBzdXZta2ViXzM2MzUxOA%3D%3D
[10:20:13] <FromDiscord> <Hamid_Bluri> Hey beef, How's the day?
[10:20:26] <FromDiscord> <Elegantbeef> Uhhhh fine? üòÄ
[10:20:33] <FromDiscord> <Hamid_Bluri> good
[10:22:53] <FromDiscord> <Hamid_Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3MRP
[10:23:20] <FromDiscord> <Hamid_Bluri> (edit) "https://paste.rs/Asr" => "https://play.nim-lang.org/#ix=3MRQ"
[10:23:57] <FromDiscord> <Yardanico> If you don't care about those pragmas then just pass your proc around normally
[10:24:06] <FromDiscord> <Yardanico> Without specifying gcsafe or nosideeffect
[10:24:06] <FromDiscord> <Elegantbeef> You dont need to do that
[10:24:16] <FromDiscord> <Hamid_Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3MRR
[10:24:25] <FromDiscord> <Hamid_Bluri> (edit) "https://play.nim-lang.org/#ix=3MRR" => "https://play.nim-lang.org/#ix=3MRS"
[10:24:27] <FromDiscord> <Hamid_Bluri> (edit) "https://play.nim-lang.org/#ix=3MRS" => "https://play.nim-lang.org/#ix=3MRT"
[10:24:31] <FromDiscord> <Elegantbeef> `proc(a: int){.nimcall.}` should accept all
[10:24:42] <FromDiscord> <Elegantbeef> yea you dont have `{.nimcall.}`
[10:25:22] <FromDiscord> <Elegantbeef> Are you using this in a case statement or something?
[10:25:31] <FromDiscord> <Elegantbeef> If so you might want to do `MyFunc(theFunc)`
[10:25:42] <FromDiscord> <Elegantbeef> `MyFunc` being your typedef
[10:26:36] <FromDiscord> <Hamid_Bluri> yeah, thanks
[10:29:55] *** Joins: jmd_ (~jmdaemon@142.207.120.123)
[10:30:42] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 250 seconds)
[10:37:38] *** Quits: jmd_ (~jmdaemon@142.207.120.123) (Quit: ZNC 1.8.2 - https://znc.in)
[10:37:58] *** Joins: jmdaemon (~jmdaemon@142.207.120.123)
[11:45:43] *** Joins: PMunch (~PMunch@user/pmunch)
[12:07:57] <arkanoid> I have a template "dtype" returning a datatype. "echo at.dtype" prints correctly int32, "echo pyObj.to(int32)" prints results correctly, but "pyObj.to(at.dtype)" returns weird erro "Error: unhandled exception: field 'sym' is not accessible for type 'TNode' using 'kind = nkIdent' [FieldDefect]"
[12:08:25] <arkanoid> s/datatype/typedesc
[12:10:38] <FromDiscord> <Elegantbeef> That looks like a macro issue
[12:14:19] <arkanoid> but the templace called idependently from the `to` function returns correct result
[12:15:04] <FromDiscord> <Elegantbeef> i'm blaming `pyObj.to`
[12:16:17] <FromDiscord> <Elegantbeef> Wait is `dtype` a template?
[12:16:34] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[12:17:12] <arkanoid> Elegantbeef, yes, is a templare returning typedesc
[12:17:29] <FromDiscord> <Elegantbeef> I assume `pyObj.to` doesnt know how to handle that
[12:17:42] <FromDiscord> <Elegantbeef> what's `pyobj.to`'s header?
[12:17:55] <arkanoid> this is my template: https://play.nim-lang.org/#ix=3MSo
[12:18:09] <arkanoid> thus is nimpy `to` https://github.com/yglukhov/nimpy/blob/3ca0f3c58b70ee67823b6575fd43f279db70b7e3/nimpy.nim#L814
[12:18:33] <FromDiscord> <Elegantbeef> try `dtype(at)`
[12:19:18] <FromDiscord> <Elegantbeef> That seems like a macro error, but i could be wrong could be an internal nim error
[12:21:15] <FromDiscord> <Elegantbeef> Wait a minute
[12:21:18] <arkanoid> same error with dtype(at) https://play.nim-lang.org/#ix=3MSp
[12:21:25] <FromDiscord> <Elegantbeef> This wont work anyway
[12:21:51] <FromDiscord> <Elegantbeef> your template relies on runtime values right?
[12:22:07] <arkanoid> Type object is a const
[12:22:08] <FromDiscord> <Elegantbeef> T isnt known at CT
[12:22:18] <arkanoid> const at = Type(kind:tkInt, intMeta: Int(bitWidth:32, isSigned: true))
[12:22:30] <FromDiscord> <Elegantbeef> Ok then this should
[12:22:48] <arkanoid> the first 2 echos works correctly 
[12:23:21] <FromDiscord> <Elegantbeef> This is an internal Nim error than
[12:23:43] <arkanoid> choosenim devel -> same error
[12:24:07] <arkanoid> wait, 1.4.2 worked!
[12:24:09] <arkanoid> is a regression
[12:24:17] <arkanoid> (sigh, another)
[12:25:27] <arkanoid> 1.4.8 works, 1.6.0 doesn't
[12:25:50] <FromDiscord> <Elegantbeef> Uh oh this could be on me
[12:26:25] <arkanoid> :D
[12:27:13] <FromDiscord> <Elegantbeef> Try with `34a53e804943ceaf3900feb6e89194aa03236c0a`
[12:27:25] <FromDiscord> <Elegantbeef> should be `choosenim install '#34a53e804943ceaf3900feb6e89194aa03236c0a'`
[12:27:39] <FromDiscord> <Elegantbeef> If that doesnt work(didnt for me) try `update` instead of install
[12:28:18] <arkanoid> Binary build unavailable, building from source -->  Error: Version 34a53e804943ceaf3900feb6e89194aa03236c0a does not exist.
[12:28:53] <FromDiscord> <Elegantbeef> Did you include the quote and pound symbol?
[12:29:47] *** Joins: Vladar (~Vladar@46.162.2.53)
[12:30:07] <arkanoid> you're right, sorry
[12:30:18] <arkanoid> sourcing nim from source
[12:30:25] <arkanoid> damn, from github
[12:31:03] <FromDiscord> <Elegantbeef> That's the commit before a possible change that i'm relatively cautious about here
[12:31:22] <arkanoid> building C sources
[12:31:32] <FromDiscord> <Elegantbeef> So if it works i'll ask you to try another `30d28bcefcad0da8900cfa231be9d77bb98c5097` specifically
[12:31:48] <arkanoid> sure, very happy to help
[12:32:07] <arkanoid> I would search and fix myself if capable
[12:32:20] <arkanoid> Exception: Execution failed with exit code 1
[12:32:22] <FromDiscord> <Elegantbeef> I imagine it wont change anything but I know there's a chance
[12:32:35] <arkanoid> Output: /home/jack/.choosenim/toolchains/nim-#34a53e804943ceaf3900feb6e89194aa03236c0a/config/nim.cfg(16, 1) Error: invalid command line option: '--hint'
[12:32:36] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[12:32:47] <FromDiscord> <Elegantbeef> You can always build a debug compiler and run the code and start your journey üòÄ
[12:32:58] <FromDiscord> <Elegantbeef> try `update` instead of install i guess
[12:33:56] <arkanoid> could be that I was running choosenim from a folder containing a config.nims?
[12:34:04] <arkanoid> running in ~ now
[12:34:05] <FromDiscord> <Elegantbeef> Perhaps
[12:34:12] <FromDiscord> <Elegantbeef> I dont know choosenim has many issues ime
[12:34:49] <arkanoid> to switch from release to release never had a problem for me
[12:35:06] <FromDiscord> <Elegantbeef> Yea it works for fetching mainline versions
[12:35:25] <FromDiscord> <Elegantbeef> I have many issues installing commits
[12:35:27] <arkanoid> same error in home folder
[12:35:55] <arkanoid> trying from bash (I use fish)
[12:35:59] <FromDiscord> <Elegantbeef> Dont know what to say aside from if you're on 1.6.x go to 1.4.8 and try again
[12:36:15] <FromDiscord> <Elegantbeef> And if that doesnt work, can only say "build from source using git"
[12:37:05] <PMunch> Uhm the package "fragments" is completely broken
[12:37:12] <PMunch> The URL just points to a Rust repo
[12:37:19] <FromDiscord> <Yardanico> i talked about this actually
[12:37:36] <arkanoid> gimme some minutes, I just need to learn how to boot nim compiler version manually
[12:37:43] <FromDiscord> <Yardanico> apparently there's also https://github.com/sinkingsugar/fragments
[12:37:47] <FromDiscord> <Yardanico> https://github.com/nim-lang/packages/issues/2115 i mean
[12:38:37] <PMunch> Right
[12:39:19] <PMunch> I just noticed because I all of a sudden didn't have the newest versions of Nim in the playground
[12:39:28] <PMunch> They failed to build because they couldn't install that one
[12:39:29] <FromDiscord> <Yardanico> yes i saw that :))
[12:39:41] <PMunch> And you didn't tell me :O
[12:39:51] <FromDiscord> <Yardanico> sorry XD
[12:40:04] <FromDiscord> <Elegantbeef> I mentioned it multiple times but nooo someone has to use silly irc üòõ
[12:40:56] <arkanoid> Elegantbeef, I can do with irc things that modern people can't!
[12:41:06] <PMunch> I'm logged in with Element nowadays as well
[12:41:10] <FromDiscord> <Elegantbeef> Anyone have any more ideas for my "chain" macro, i have unpack, map, filter
[12:41:26] <FromDiscord> <Elegantbeef> Yea like not realize someone messaged you due to not being in the server!
[12:41:28] <arkanoid> btw just re-tested: 1.4.8 compiles and runs, 1.6.0 weird compile error
[12:42:02] <PMunch> @Elegantbeef, that's like talking to me when I'm not within earshot
[12:42:13] <FromDiscord> <Elegantbeef> Yea i mean there is obviously an introduced bug between 1.4.8..1.6.0
[12:42:46] <FromDiscord> <Elegantbeef> So git bisect is the best way to find where it's introduced, though i'm guessing it might be the commit after that one
[12:43:35] <PMunch> Again, why don't we have an auto-bisect script in Nim?
[12:43:35] <arkanoid> Elegantbeef, well actually I'm not the only one https://forum.nim-lang.org/t/8404#54196
[12:44:23] <arkanoid> just leave here the two hashes, then gimme time to learn how to kickstarn nim from commit
[12:44:33] <arkanoid> choosenim is doing something wrong apparently
[12:44:48] <FromDiscord> <Elegantbeef> Why dont we have a debug compiler üòõ
[12:45:00] <PMunch> You can build a debug compiler
[12:45:08] <FromDiscord> <Elegantbeef> Where is my `nim-dbg` shipped with choosenim
[12:45:20] <FromDiscord> <Elegantbeef> Sure but that's more work to walk through for new people
[12:47:06] <FromDiscord> <Elegantbeef> I do like pmunch that you say "you can build a debug compiler" to me of all people
[12:47:25] <PMunch> Haha, it's early and I'm tired :P
[12:47:53] <FromDiscord> <Elegantbeef> If my response was "Oh wait really" it'd put my compiler contributions in question üòõ
[12:48:24] <FromDiscord> <Elegantbeef> "Did this motherfucker debug and fix the code purely from looking at it"
[12:50:17] <PMunch> I mean that would be quite impressive
[12:50:31] <FromDiscord> <Elegantbeef> It'd also be quite masochistic
[12:53:48] <arkanoid> Elegantbeef, I've upgraded choosenim and now I'm getting a different error in choosenim
[12:54:00] <arkanoid> fatal: reference is not a tree: 9a7f751d23c49c75a0b6f63a234c575dc0df7231
[12:55:58] <FromDiscord> <Elegantbeef> lol
[12:56:05] <FromDiscord> <Elegantbeef> It's all gone down hill
[12:58:12] <arkanoid> https://termbin.com/irfq
[12:58:26] <arkanoid> sorry don't rememeber the command to strip colors before piping
[12:58:50] <FromDiscord> <Elegantbeef> Yea i cannot help with choosenim
[12:58:58] <FromDiscord> <Elegantbeef> So i guess the source of this will stay an enigma
[13:02:24] <arkanoid> going into manual mode
[13:03:50] <arkanoid> same error on ./build_all on same commit, it's not a choosenim problem
[13:05:46] <arkanoid> I've fixed manually
[13:06:32] <arkanoid> the problem is the script doing "git clone -q --depth 1 -b master https://github.com/nim-lang/csources_v1.git csources_v1" but has 9a7f751d23c49c75a0b6f63a234c575dc0df7231 is not contained in --depth 1
[13:06:46] <arkanoid> by removing --depth 1 the checkout works works
[13:15:53] <arkanoid> Elegantbeef: I have the same error with #34a53e804943ceaf3900feb6e89194aa03236c0a
[13:16:19] <FromDiscord> <Elegantbeef> That was the first one!
[13:16:25] <FromDiscord> <Elegantbeef> Yay i didnt cause it üòõ
[13:16:51] <FromDiscord> <Elegantbeef> so you can now atleast git bisect from there to 1.4's latest commit if you wanted to
[13:18:47] <arkanoid> what's the correct procedure to hop from one nim hash to another?
[13:19:29] <FromDiscord> <Elegantbeef> For stuff like this i'd say the best thing to do is clone the nim git repo and build from source using git bisect to find "where the regression is"
[13:19:42] <arkanoid> what I've done now is git clone nim, checkout hash, git clone csources_v1, ./build_all
[13:19:57] <FromDiscord> <Elegantbeef> you shouldnt need to manually clone csources afaik
[13:20:05] <FromDiscord> <Elegantbeef> I've never done it
[13:20:16] <FromDiscord> <Elegantbeef> `./build_all.sh` has worked for me so far
[13:20:39] <arkanoid> well, the build_all script git clones it with --depth 1, but if then you checkout a hash that requires a previous hash of that sub, you get out of tree
[13:20:54] <arkanoid> so --depth 1 should be removed
[13:21:12] <PMunch> Hmm, the playground gets this error when it tries to build 1.6.0: http://ix.io/3MSL
[13:21:33] <FromDiscord> <Yardanico> how are you building 1.6.0?
[13:21:48] <PMunch> Like this: https://github.com/PMunch/nim-playground/blob/master/docker/Dockerfile
[13:22:05] <PMunch> the file `curtag` just includes the version, like v1.6.0
[13:22:42] <PMunch> That container is able to build every version from v0.13.0 to v1.6.2, but not 1.6.0
[13:24:15] <arkanoid> Elegantbeef: this is the problem that causes build to fails due to wrong clone of csources_v1 https://github.com/nim-lang/Nim/search?q=%22--depth+1%22
[13:24:57] <PMunch> That link was totally broken on IRC :P
[13:25:25] <PMunch> Hmm, that container is built for the old csources with the tags
[13:25:48] <PMunch> Not sure why we created a new one instead of creating more tags in the old one..
[13:32:00] <arkanoid> Elegantbeef: bisecting between your hash and v1.4.8
[13:32:50] <arkanoid> do I have to clean or something after each checkout (bisect) and ./build_all?
[13:34:04] <FromDiscord> <evoalg> why are multiple versions built on playground? ... are we able to swap between them?
[13:34:51] <FromDiscord> <Yardanico> In reply to @evoalg "why are multiple versions": of course
[13:35:00] <FromDiscord> <evoalg> I didn't know
[13:35:00] <FromDiscord> <Yardanico> did you not see this dropdown? :P https://media.discordapp.net/attachments/371759389889003532/933663392789561354/unknown.png
[13:35:04] <FromDiscord> <Elegantbeef> top right corner
[13:35:07] <FromDiscord> <evoalg> oh I'm blind
[13:35:29] <FromDiscord> <Elegantbeef> Still need to get `gc` options aswell, but i never got around to ti
[13:35:56] <FromDiscord> <Yardanico> or maybe just a generic way to input compiler arguments
[13:35:56] <FromDiscord> <evoalg> you built playground?
[13:35:58] <FromDiscord> <Yardanico> like wandbox
[13:36:05] <FromDiscord> <Elegantbeef> No i did not
[13:37:19] <FromDiscord> <Elegantbeef> Pmunch runs it and i think forked it from someone
[13:38:06] <FromDiscord> <evoalg> I tried to join matrix on element but the curse of the ol' this isn't supported on your version of os x
[13:38:29] <FromDiscord> <Elegantbeef> Cant you just force it with rosetta?
[13:38:55] <FromDiscord> <evoalg> I dunno what that is
[13:39:30] <FromDiscord> <evoalg> hang on I'm trying something...
[13:39:52] <FromDiscord> <Elegantbeef> Rosetta is the x86 -\> arm emulation that apple has
[13:40:58] <FromDiscord> <evoalg> I downloaded it ... downloaded it from the site instead of the apple play store
[13:45:09] <FromDiscord> <Elegantbeef> Wow a new matrix user!
[13:45:09] <FromDiscord> <evoalg> gosh
[13:46:44] <FromDiscord> <mratsim> 0.13.0?
[13:46:53] <FromDiscord> <mratsim> wow, that version must be older than me
[13:50:22] <arkanoid> I don't understand git bisect. I told git that #34a53e804943ceaf3900feb6e89194aa03236c0a is bad and v1.4.8 is good, but now asked me to build and test 1.3.7
[13:50:48] <PMunch> @Elegantbeef, I'm working on re-designing the entire playground so that it will be easier to extend with new buttons and such
[13:51:24] <PMunch> The custom CSS it uses now is just way too brittle
[13:51:54] <FromDiscord> <mratsim> probably less brittle than the CSS in Arraymancer doc
[13:53:01] <arkanoid> damn, I tried many times to read the Arraymancer docs on smartphone, the top menu was my enemy
[13:53:55] <PMunch> arkanoid, you might've had leftover state?
[13:54:40] <arkanoid> what do you mean?
[13:58:57] <PMunch> @evoalg, I forked a broken version from Zacharycarter and rewrote the whole thing while maintaining it since then
[13:59:08] <PMunch> arkanoid, if you had messed around with git bisect before
[13:59:34] <PMunch> Or maybe you did the commands wrong somehow?
[14:02:02] <arkanoid> no, I've done bisect before (not for tracking problem in nim compiler). I've tagged 1.4.8 as good, and an hash given by elegantbeef in between 1.4.8 and 1.6.0 as bad, the bisect went testing 1.3.7: https://play.nim-lang.org/#ix=3MT0
[14:02:56] <arkanoid> btw I'm down to 5 more steps to identify the culprit
[14:04:14] *** Quits: jmdaemon (~jmdaemon@142.207.120.123) (Changing host)
[14:04:14] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[14:05:00] <FromDiscord> <Yardanico> In reply to @arkanoid "no, I've done bisect": yes, that's expected
[14:05:15] <FromDiscord> <Yardanico> the proper way to bisect (afaik) is to build the nim compiler from csources_v1
[14:05:18] <FromDiscord> <Yardanico> and then start the actual bisect
[14:05:34] <FromDiscord> <Yardanico> so all intermediate compiler versions (that are run with ./koch temp from git bisect) are compiled using the v1 csources compiler
[14:06:10] <arkanoid> I'm not used to manually build nim compiler. I'm using ./build_all after each bisect
[14:06:30] <FromDiscord> <Yardanico> nonoon!
[14:06:34] <FromDiscord> <Yardanico> that's not how you do  it :P
[14:06:53] <FromDiscord> <Yardanico> you just build the v1 compiler and then run git bisect on ./koch temp compiling your nim file
[14:07:03] <FromDiscord> <Yardanico> it can even run automatically as koch temp gives correct exit codes to git bisect
[14:07:26] <PMunch> And this is why we need an auto-bisect script in the Nim repo..
[14:07:48] <arkanoid> what is the "v1 compiler"?
[14:08:14] <FromDiscord> <Yardanico> if the issue you want to check is compilation failure then you just compile the v1 csources, then do `git bisect start` and `git bisect run ./koch temp c /path/to/nim/file.nim`
[14:08:18] <FromDiscord> <Yardanico> In reply to @arkanoid "what is the "v1": csources_v1 compiler
[14:08:51] <FromDiscord> <Yardanico> just `cd csources_v1` and `./build.sh`
[14:09:08] <FromDiscord> <Yardanico> `sh build.sh` i mean
[14:09:16] <FromDiscord> <Yardanico> so the total process is something like:
[14:10:08] <FromDiscord> <Yardanico> `cd csources_v1` > `sh build.sh` > `cd ..` > `git bisect start` > `git bisect bad v1.4.8` > `git bisect good v1.6.0` > `git bisect run ./koch temp c /path/to/nim/file.nim`
[14:10:18] <FromDiscord> <Yardanico> just don't forget to reset your nim repo to a clean state before this
[14:11:22] <FromDiscord> <Yardanico> oh right in your case v1.4.8 is good and v1.6.0 is bad
[14:11:26] <FromDiscord> <Yardanico> sorry, messed that up a bit :P
[14:12:52] <arkanoid> lol, my iteration is: git clone nim, git bisect start, git good bad 1.4.8, git bisect bad 1.6.0, ./build_all, rm ~/.nimble, git bisect <good if nim c else bad>, ./build_all, ...
[14:13:11] <FromDiscord> <Yardanico> XD
[14:13:17] <FromDiscord> <Yardanico> yeah that's a bit too complex :)
[14:16:40] <arkanoid> so what is csources_v1? is the C output of nim compiler that compiled itself?
[14:17:04] <FromDiscord> <Yardanico> yes, that's how nim bootstraps itself
[14:17:14] <FromDiscord> <Yardanico> csources_v1 contains the compiled C code for a lot of platforms and architectures for the nim compiler
[14:17:28] <FromDiscord> <Yardanico> so you only need a C compiler to bootstrap the nim compiler, and then you compile the nim compiler with nim
[14:17:47] <FromDiscord> <Yardanico> and you don't really need to care about the bootstrap process for bisecting, so koch temp is enough (it just builds a debug compiler)
[14:17:48] <arkanoid> in the meantime, in my slowpoke attitude: Bisecting: 2 revisions left to test after this (roughly 2 steps)
[14:19:15] <arkanoid> so kock is this nim compiler compiled from C sources?
[14:20:53] <FromDiscord> <Yardanico> no, koch is kind of a small build system
[14:21:11] <FromDiscord> <Yardanico> it can builds the nim compiler, build docs, do CI, etc
[14:21:20] <FromDiscord> <Yardanico> https://github.com/nim-lang/Nim/blob/devel/koch.nim
[14:23:40] <FromDiscord> <dom96> In reply to @Elegantbeef "I dont know choosenim": bruh
[14:24:13] <FromDiscord> <dom96> issue reports welcome üòâ
[14:25:32] <arkanoid> Elegantbeef: here's the git bisect log and the culprit https://play.nim-lang.org/#ix=3MT5
[14:27:50] <FromDiscord> <Yardanico> ???
[14:27:57] <FromDiscord> <Yardanico> wait why did you enter commits manually?
[14:28:37] <FromDiscord> <Yardanico> with bisect you basically do `git bisect start` and then do your stuff, then if the result is good you do `git bisect good`, otherwise `git bisect bad`
[14:28:54] <arkanoid> that's what I've done
[14:28:55] <FromDiscord> <Yardanico> also can you show a standalone example of the bug you're getting?
[14:29:15] <arkanoid> you see a manual hash as start because @Elegantbeef gave me a hash to start with
[14:29:38] <arkanoid> but the issue is was indeed between 1.4.8 and 1.6.0
[14:30:15] <FromDiscord> <dom96> you'd have a much easier time narrowing down by versions first using choosenim
[14:31:02] <arkanoid> dom96, I tried, it failed. Actually it was not due to choosenim, but how csouces_v1 is cloned by build_all
[14:31:35] <FromDiscord> <dom96> if you installed specific versions you'd get nightlies (unless you're on macos)
[14:31:58] <arkanoid> build_all clones csources_v1 repository with "--depth 1" git option, and because of this it failed to checkout the required hash for csources_v1
[14:33:11] <arkanoid> dom96: yes, choosenim works when checking out tag or devel, but fails with hash. As the problem is somewhere between 1.4.8 and 1.6.0 I had no other choice than bisect
[14:33:42] <FromDiscord> <dom96> ahh, so you already knew the versions it was between
[14:37:23] <arkanoid> yes
[14:38:41] <arkanoid> Yardanico, I'd like to provide example, but it's tricky
[14:40:57] <arkanoid> trying
[15:03:45] <arkanoid> ok, I might have found a way to reproduce this in a smaller example
[15:04:33] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:7937:b295:da60:ef94)
[15:08:34] *** Joins: TheDarkMode (~TheDarkMo@180.150.82.5)
[15:15:10] *** Quits: TheDarkMode (~TheDarkMo@180.150.82.5) (Quit: Client closed)
[15:21:47] <arkanoid> @Elegantbeef, @Yardanico Success! I've reproduced a minimal example. Here the play, bisect result included: https://play.nim-lang.org/#ix=3MTf
[15:22:38] <FromDiscord> <Rika> ? What‚Äôs wrong
[15:24:18] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[15:24:27] <arkanoid> Rika, found a regression
[15:25:58] <arkanoid> do you think it is work posting this as issue?
[15:26:02] <arkanoid> *worth
[15:48:51] <arkanoid> posted as issue https://github.com/nim-lang/Nim/issues/19426
[15:55:30] <NimEventer> New thread by Inv2004: Discussion: Why Static Languages Suffer From Complexity, see https://forum.nim-lang.org/t/8833
[16:00:31] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:4c8a:a2e8:32e:8649) (Remote host closed the connection)
[16:01:13] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:5c0c:8cd0:3dab:b4f3)
[16:15:57] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[16:18:14] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[16:26:50] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[16:37:50] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:5c0c:8cd0:3dab:b4f3) (Remote host closed the connection)
[16:38:32] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:b86e:93af:e0ff:f904)
[16:55:16] *** Joins: rockcavera (~rc@192.12.114.201)
[16:55:16] *** Quits: rockcavera (~rc@192.12.114.201) (Changing host)
[16:55:16] *** Joins: rockcavera (~rc@user/rockcavera)
[17:07:19] <FromDiscord> <mratsim> In reply to @arkanoid "posted as issue https://github.com/nim-lang/Nim/iss": pretty sure it's a duplicate, I had this so often I would be surprised if it wasn't already reported, I'll look
[17:07:29] <FromDiscord> <mratsim> for example it would 100% break status-libs
[17:08:03] <FromDiscord> <mratsim> https://github.com/status-im/nim-stint/blob/master/stint/private/datatypes.nim#L104-L110
[17:11:40] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:b86e:93af:e0ff:f904) (Remote host closed the connection)
[17:12:22] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:cfe8:290d:4f6c:e878)
[17:16:39] <FromDiscord> <Clonkk> Anybody knows if it's possible to use `hasCustomPRagmas` with a generic type
[17:17:16] <FromDiscord> <Clonkk> Is it normal to disalloc this or is it just a poor implementation ?
[17:31:45] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:cfe8:290d:4f6c:e878) (Remote host closed the connection)
[17:32:27] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:f7f3:3580:88e6:98a5)
[17:52:04] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[17:52:55] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[18:00:43] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:7937:b295:da60:ef94) (Ping timeout: 256 seconds)
[18:00:59] <FromDiscord> <sOkam!> How does one extend a C application with some nim code?‚ÜµThe nim code will be the core that will be compiled, and everything C will be called from it‚Üµ- Does the C code need to be compiled? ‚Üµ- or do I just create my new main function and call whatever the app C procedures from there with a wrapper?
[18:01:27] <nixfreaknim[m]> Since nim is a multi-paradigm language and doesn't really have a real programming struture, when it be fair to say start with types first then create your procs ?
[18:01:44] <nixfreaknim[m]> I am looking for a struture
[18:02:08] <arkanoid> nixfreaknim[m]: procedural programming
[18:02:10] <FromDiscord> <Clonkk> You can ask Nim to compile (with `{.compile.}` pragmas) a C file and then `importc` whan you need from it. See the manual https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-compile-pragma‚Üµ(@sOkam!)
[18:03:26] *** Joins: adigitoleo_ (~adigitole@1.157.55.206)
[18:04:07] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:f7f3:3580:88e6:98a5) (Ping timeout: 250 seconds)
[18:04:12] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:7937:b295:da60:ef94)
[18:04:16] *** Joins: arkurious (~arkurious@user/arkurious)
[18:07:18] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:7937:b295:da60:ef94) (Remote host closed the connection)
[18:13:07] <FromDiscord> <mratsim> In reply to @Clonkk "Anybody knows if it's": is your macro untyped? if it's typed, it's possible that early symbol resolution pass is stripping the pragmas.
[18:17:24] <FromDiscord> <sOkam!> In reply to @Clonkk "You can ask Nim": so, if I ask nim to compile a C file, does it also compile its dependencies automatically?
[18:17:43] <FromDiscord> <Clonkk> I actually went inside the rabbit's nest and it's even more basic than that \: `customPragmas` impelmentation fro std/macros doesn't handle nnkBracketExpr‚Üµ(@mratsim)
[18:19:44] <FromDiscord> <Clonkk> Issue was open here https://github.com/nim-lang/Nim/issues/11932. Should have been fixed in a refactor here https://github.com/nim-lang/Nim/pull/11526/files# that got reverted later here https://github.com/nim-lang/Nim/pull/18601 and was also fixed in that commit https://github.com/nim-lang/Nim/commit/5da931fe811717a45f2dd272ea6281979c3e8f0b that never got merged because another PR was prefered
[18:20:31] <FromDiscord> <Clonkk> No it won't. If you have a large project, I suggest compiling your C files into a shared library and linking as you would any lib‚Üµ(@sOkam!)
[18:21:26] <FromDiscord> <Clonkk> Alternatively, you can setup your whole compilation chain in Nim but you'd probably have to be exhaustive
[18:21:47] <FromDiscord> <sOkam!> In reply to @Clonkk "No it won't. If": Its a game engine, so yes its quite extensive
[18:22:20] <FromDiscord> <sOkam!> In reply to @Clonkk "Alternatively, you can setup": How would one do that? any pointers?
[18:22:43] <FromDiscord> <Clonkk> So I would keep the original compile chain, make a static / shared library  and link that to your Nim code.‚Üµ(@sOkam!)
[18:23:32] <FromDiscord> <sOkam!> In reply to @Clonkk "So I would keep": how do you make the second step, the static/shared library?
[18:23:33] <FromDiscord> <Clonkk> If you have 'clean' headers for the public interface you can try to use c2nim or https://github.com/PMunch/futhark for automatic bindings creation
[18:23:38] <FromDiscord> <mratsim> In reply to @sOkam! "so, if I ask": yes
[18:23:58] <PMunch> @Clonkk, who said anything about clean?
[18:24:04] <FromDiscord> <mratsim> but the Nim compiler caches lib
[18:24:16] <PMunch> Futhark should be able to gobble up just about anything
[18:24:27] <FromDiscord> <Clonkk> The clean part was referring to c2nim /D‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[18:24:48] <FromDiscord> <sOkam!> In reply to @Clonkk "If you have 'clean'": I don't want to bind the functions. i just need to call whatever C does at main, and go from there
[18:25:12] <FromDiscord> <mratsim> sent a long message, see http://ix.io/3MUn
[18:25:17] <FromDiscord> <mratsim> without headers
[18:26:15] <FromDiscord> <mratsim> And you can replace Make / Cmake and build a shared or static lib like this: https://github.com/numforge/agent-smith/blob/master/third_party/ale_build.nim
[18:26:15] <FromDiscord> <Clonkk> Yeah but you're cheating by `#include "file.c"`‚Üµ(@mratsim)
[18:26:25] <FromDiscord> <Clonkk> So eventually you do have to list C file exhaustively
[18:26:29] <FromDiscord> <sOkam!> As in, I will be still using the C engine as it is. Just that I want to create a new main function and handle the default behavior from there (if thats possible in some way)
[18:26:41] <FromDiscord> <mratsim> In reply to @Clonkk "So eventually you do": see second example, you can use .c
[18:28:00] <FromDiscord> <Clonkk> Ah okay I didn't know `compile` was supporting wildcard‚Üµ(@mratsim)
[18:28:01] <FromDiscord> <Clonkk> My bad
[18:28:11] <FromDiscord> <Clonkk> That should probably be something written in the manual
[18:28:39] <FromDiscord> <mratsim> it's written somewhere
[18:28:50] <FromDiscord> <mratsim> took me a couple hours to hunt
[18:29:09] <FromDiscord> <mratsim> would be nice to have this working though: https://github.com/nim-lang/Nim/issues/9370
[18:29:17] <FromDiscord> <Clonkk> The documentation is as good as it's searchable. When I search for \`\`{.compile.} I land on https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-compile-pragma
[18:32:11] <PMunch> Hmm, I have a timestamp that looks like this: 2022-01-20T15:00:25.9072345+00:00, how would I go about parsing that?
[18:32:42] <PMunch> I tried "yyyy-MM-dd'T'HH:mm:ss'.'fffzzz" and all the other ffff variants but none of them worked
[18:38:54] <FromDiscord> <mratsim> use `proc take(a: Arrow, i: InTheKnee): bool`
[18:39:31] <FromDiscord> <Clonkk> Why ? Is he getting married \:D ?‚Üµ(@mratsim)
[18:42:42] <PMunch> @Clonkk, arrow in the knee is a Skyrim meme
[18:44:40] <FromDiscord> <Clonkk> I know, but it's also (supposedly) an old expression that means getting married‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[18:51:55] <FromDiscord> <mratsim> PMunch is an adventurer and needs to retire
[18:52:19] <PMunch> Ah right, that's what you meant :P
[18:52:32] <FromDiscord> <mratsim> Skyrim is 10 btw. I never finished it ...
[18:52:46] <PMunch> Never tried it
[18:52:52] <PMunch> Played Morrowind and Redguard as a kid
[18:53:04] <PMunch> But Obsidian and Skyrim where to expensive for me to bother
[18:53:24] <PMunch> I wanted to try Skyrim, but it's still expensive, despite being 10 years old..
[18:56:21] <FromDiscord> <mratsim> I played Morrowind but I was more into Baldur's Gate.‚ÜµI found a bug in Morrowind that somehow let me duplicate boosts and one of the instance could be kept forever. And there was some magic resistance boost ....
[18:57:26] <FromDiscord> <mratsim> (anyway offtopic)
[18:57:40] <FromDiscord> <Clonkk> Define "finishing it". Finishing the main quest can be actualyl quite fast if you're not a completionist‚Üµ(@mratsim)
[19:00:29] <FromDiscord> <mratsim> In reply to @Clonkk "Define "finishing it". Finishing": --> #offtopic
[19:03:17] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3MUT
[19:03:35] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3MUT" => "https://play.nim-lang.org/#ix=3MUU"
[19:10:27] <FromDiscord> <leorize> nope, unless you write your own
[19:12:37] *** Joins: kenran (~kenran@2001:16b8:2bbb:8500:9219:f13c:5dd0:d93e)
[19:32:45] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/QzP
[19:33:08] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3MV9
[19:33:14] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3MV9" => "https://play.nim-lang.org/#ix=3MVa"
[19:33:18] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3MVa" => "https://play.nim-lang.org/#ix=3MVb"
[19:34:04] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3MVc
[19:34:49] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3MVe
[19:34:51] <FromDiscord> <Patitotective> (edit) 
[19:44:57] <FromDiscord> <Patitotective> oh nvm, i was using `:` instead of `=`
[19:44:58] <FromDiscord> <Patitotective> LOL
[20:00:05] <nixfreaknim[m]> has anyone seen this ? http://web.mit.edu/nim-lang_v0.16.0/.nim-0.16.0.amd64_ubuntu1404/examples/cross_calculator/lazarus/readme.txt
[20:00:15] <nixfreaknim[m]> using lazarus and nim ? 
[20:06:52] <FromDiscord> <eyecon> Wow, seems like an interesting idea
[20:11:16] <nixfreaknim[m]> Yeah that's what I said 
[20:11:33] <nixfreaknim[m]> lazarus are pretty nice components 
[20:12:08] <nixfreaknim[m]> s/lazarus are pretty nice components/lazarus components are pretty nice to use/
[20:13:15] <nixfreaknim[m]> Ok I found it https://github.com/zah/grip-lang/tree/master/examples/cross_calculator/lazarus
[20:26:28] *** Joins: vicfred (~vicfred@user/vicfred)
[20:29:53] <FromDiscord> <Patitotective> Is there an `eval` procedure like in python?
[20:30:33] <FromDiscord> <Rika> Kinda but not really
[20:30:38] <FromDiscord> <Rika> Ah
[20:30:54] <FromDiscord> <Rika> Nvm, yeah, kinda but not really
[20:31:28] <FromDiscord> <Patitotective> hmm
[20:31:58] <FromDiscord> <Patitotective> I want to parse an string, so I can finally convert `\\n` to `\n` hehe
[20:32:12] <FromDiscord> <Rika> That‚Äôs just crazy
[20:32:21] <FromDiscord> <enthus1ast> yes \:)
[20:32:23] <FromDiscord> <Rika> Why can‚Äôt you just manually do it lol
[20:32:30] <FromDiscord> <Rika> It‚Äôs not a large table isn‚Äôt it
[20:32:33] <FromDiscord> <enthus1ast> why do you got these in the first place btw?
[20:32:36] *** Quits: kenran (~kenran@2001:16b8:2bbb:8500:9219:f13c:5dd0:d93e) (Quit: WeeChat info:version)
[20:32:51] <FromDiscord> <Rika> You‚Äôre spending more time finding ‚Äúeasier‚Äù ways to solve something than to actually just solve it
[20:33:21] <FromDiscord> <Patitotective> In reply to @enthus1ast "why do you got": I'm parsing a file, and there are strings in there
[20:33:28] <FromDiscord> <Patitotective> (edit) "there" => "there, but I got them raw"
[20:33:58] <FromDiscord> <Patitotective> ok thanks üôÉ
[20:36:34] <PMunch> I have the weirdest freaking bug in my Arduino code
[20:36:42] <PMunch> It all works exactly as I want it to
[20:36:59] <PMunch> But the LED on the board blinks dimmer when I run the Nim code vs. the equivalent C code..
[20:37:07] <FromDiscord> <Rika> What
[20:37:12] <FromDiscord> <Rika> LMFAO what
[20:38:07] <FromDiscord> <Clonkk> PWM rounding issue ?‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[20:38:33] <PMunch> I mean I just write bits into the port to set a pin to high
[20:39:01] <FromDiscord> <ajusa> Nah nah he's got to use -d:undimBackport1.6
[20:39:20] <FromDiscord> <Rika> nimPreviewNoDimLed
[20:40:46] <FromDiscord> <enthus1ast> what i meant is that maybe during an "on sicle" you also set it to off, then on again very fast (i have no clue about such stuff actually \:) )
[20:40:55] <FromDiscord> <enthus1ast> cycle omg
[20:41:06] <nrds> <06Prestige99> could there be more power draw due to the generated c code @PMunch ?
[20:41:32] <PMunch> What generated C code.. My binary is 180 bytes big..
[20:42:09] <nrds> <06Prestige99> The nim -> c code?
[20:42:25] <PMunch> Okay, I just emit-ed the C code into my main function and it's still dim..
[20:42:42] <nrds> <06Prestige99> that's odd
[20:42:47] <PMunch> Yup..
[20:44:07] <nrds> <06Prestige99> am I not following something though? Like aren't you compiling nim -> c -> a binary, then running it? Curious how nim's generated c code could differ from the "equivalent c code" you mentioned
[20:45:02] <PMunch> I doubt that that is the problem
[20:45:13] <PMunch> I have used the same system to build my entire keyboard firmware
[20:45:27] <nrds> <06Prestige99> idk what it would be, if not the software
[20:45:33] <PMunch> And I can blink an LED on the Teensy just fine
[20:47:55] <FromDiscord> <Rika> Perhaps the Arduino code does something else undocumented or whatever
[20:48:20] <PMunch> Wait, I've been an idiot and recompiling my .nim -> binary but not copying my binary -> hex before uploading the hex file..
[20:48:48] <PMunch> @Rika, I'm not comparing it to Arduino code, I'm comparing it to the C code that Nim *should* be spitting out
[20:49:28] <FromDiscord> <Rika> Ah okay
[20:49:39] <PMunch> Now everything just works..
[20:49:45] <PMunch> No idea what the old hex file was doing :P
[20:49:50] <FromDiscord> <Rika> Perhaps I should log off for now
[20:53:20] <PMunch> Right, so it turns out it was the first thing I thought off and fixed..
[20:53:29] <PMunch> The pin wasn't set up to be an output
[20:53:57] <PMunch> After fixing that (and uploading the correct file...) it all works fine
[20:54:10] <PMunch> I've been chasing this bug for like an hour
[20:54:25] <PMunch> And it was all just me uploading the same wrong file over and over..
[20:54:48] <PMunch> This is why I need better tools for this..
[21:10:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828)
[22:09:21] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:17:00] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[22:32:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828)
[22:50:28] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3MWh
[22:50:44] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[22:51:02] <FromDiscord> <Isofruit> (edit) "https://play.nim-lang.org/#ix=3MWh" => "https://play.nim-lang.org/#ix=3MWi"
[22:51:22] <FromDiscord> <Isofruit> (edit) "https://play.nim-lang.org/#ix=3MWi" => "https://play.nim-lang.org/#ix=3MWj"
[23:09:38] <PMunch> Correct
[23:09:43] <PMunch> It is a global variable
[23:09:53] <PMunch> And global variables are assumed to last for the duration of the program
[23:16:58] <FromDiscord> <JSONBash> could you do that if multithreaded?
[23:25:15] <FromDiscord> <Isofruit> Pretty much where I'm going with this. I'm trying to figure out if I can add locks to the seq above and then just use that in a multithreaded context
[23:25:35] <FromDiscord> <Isofruit> (edit) "Pretty much where I'm going with this. I'm trying to figure out if I can add locks to the seq above ... and" 03added "(so you can only pop/add one after another)"
[23:35:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[23:39:33] <PMunch> Sure, as long as you lock it before accessing you can use it across threads (as long as you use ARC)
[23:39:58] <PMunch> The problem is the things you put into your seq, but I think you should be fine if you use ARC
[23:44:16] <FromDiscord> <Patitotective> In reply to @Rika "You‚Äôre spending more time": If you look at https://nim-lang.org/docs/manual.html#lexical-analysis-string-literals‚ÜµThere is an escaped sequence that says `\` '0'..'9'+, is there a limit? Because I cannot create a table for infinite decimal characters (¬°)
[23:44:18] <FromDiscord> <Patitotective> (edit) "(¬°)" => "(?)"
[23:47:17] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3MWE
[23:47:32] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3MWE" => "https://play.nim-lang.org/#ix=3MWF"
[23:48:23] <FromDiscord> <Isofruit> In reply to @PMunch "Sure, as long as": In my case that'll be database connections established through db_sqlite... which appear to have so many non-gc-safe methods that my stuff doesn't compile with the thread support flag turned on, gnaaaa
[23:48:34] <FromDiscord> <Isofruit> (edit) 04removed "support"
[23:48:49] <FromDiscord> <Isofruit> (edit) "db_sqlite..." => "db_sqlite std-lib..."
[23:48:58] <PMunch> Hmm
[23:49:09] <PMunch> Why do you keep a pool of DB connections?
[23:50:02] <FromDiscord> <Isofruit> Because creating a new connection to the database every single time I do anything on it seems incredibly wasteful
[23:51:16] <FromDiscord> <Isofruit> And given that this is in part also a learning project, I'd prefer learning to do database access the "right" way, which is through connection pooling to avoid the unnecessary constant creation and deletion of connections
[23:51:23] <FromDiscord> <enthus1ast> @Patitotective\: yeah if you want decimal den have a counter
[23:51:26] <FromDiscord> <enthus1ast> then
[23:54:28] *** Joins: noeontheend (~noeonthee@207.237.194.194)
