[00:00:05] <maerwald> pipes?
[00:00:13] <maerwald> what do you mean with pipes
[00:00:34] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[00:01:28] <geekosaur> System.Process in base can create pipes also but you'll have to do a bit more work. And in any case beware of the open3 problem: you can't sensibly read from and write to an external command at the same time, unlessa multithreaded
[00:02:22] <geekosaur> (as "open3" should suggest, this is a very general problem not at all limited to haskell)
[00:04:17] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Client Quit)
[00:05:57] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:05:57] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[00:06:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:08:11] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:08:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:08:55] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[00:09:20] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[00:10:07] <tomsmeding> geekosaur: why, because writing and/or reading may block and thus prevent you from doing the other thing? Does select(2) (and friends) fix this in C?
[00:11:13] <geekosaur> you expect tp write to the program, then read the result. program streams its output. program's output pipe blocks because you're not reading. program stops reading. you block on full pipe
[00:11:19] <geekosaur> classic deadlock
[00:11:32] <tomsmeding> oh right, if you don't anticipate this scenario
[00:11:45] <geekosaur> select() only goes so far, you still have to be prepared to read output *while* writing
[00:11:54] <tomsmeding> like, you can fix this as host program, but you need to be aware that it needs fixing
[00:12:08] *** Joins: jinsun__ (~quassel@user/jinsun)
[00:12:21] <leah2> geekosaur: i'll look at these, thx
[00:12:22] <tomsmeding> easy trap though :)
[00:12:34] <geekosaur> and very common one
[00:12:53] *** Joins: awschnap (~lavaman@98.38.249.169)
[00:13:07] <geekosaur> lots of people get this wrong because they assume the OS being concurrent means it can't happen, when *their program* must be concurrent in some sense to prevent it
[00:13:27] <tomsmeding> which can be within one thread if you program carefully
[00:13:55] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[00:14:12] <tomsmeding> good advice though
[00:14:24] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[00:14:40] *** Quits: pgib (~textual@173.38.117.87) (Ping timeout: 256 seconds)
[00:14:40] <monochrom> Oh, I know of an even more fantastic fantasy of automatic concurrency.
[00:14:53] *** Quits: kmein (~weechat@user/kmein) (Ping timeout: 256 seconds)
[00:14:53] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 256 seconds)
[00:14:53] *** Quits: barrucadu (~barrucadu@carcosa.barrucadu.co.uk) (Ping timeout: 256 seconds)
[00:15:17] *** Joins: barrucadu (~barrucadu@carcosa.barrucadu.co.uk)
[00:15:27] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Ping timeout: 256 seconds)
[00:15:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[00:15:27] *** Quits: fabfianda (~fabfianda@mob-5-90-252-134.net.vodafone.it) (Ping timeout: 256 seconds)
[00:15:27] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 256 seconds)
[00:15:27] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (Ping timeout: 256 seconds)
[00:15:28] *** Joins: kmein (~weechat@user/kmein)
[00:15:39] <monochrom> I had a student who thought that just because you have called "listen(10)", it means when you call "accept(s)" it can talk to 10 clients concurrently.
[00:15:44] *** Joins: deadmarshal (~deadmarsh@95.38.116.22)
[00:15:46] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[00:16:05] <tomsmeding> as if by magic ✨
[00:16:16] <tomsmeding> mutable state doesn't exist
[00:17:53] *** Quits: AlexNoo (~AlexNoo@178.34.151.83) (Read error: Connection reset by peer)
[00:18:19] *** Joins: AlexNoo (~AlexNoo@178.34.151.83)
[00:20:03] *** Quits: deadmarshal (~deadmarsh@95.38.116.22) (Ping timeout: 256 seconds)
[00:21:59] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:22:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:23:20] <zincy_> monochrom: What so opening a concurrent connection means everything automatically works concurrently?
[00:24:49] <EvanR> if I just have a haskell file and no project, can I possibly use vector without dealing with a "system package"
[00:25:03] <monochrom> You write an accept-interact-close loop. You find that after the 1st client has connected, your loop is unresponsive to future clients.
[00:25:14] <monochrom> You think that listen(big number) solves that.
[00:26:05] <monochrom> Or rather, s/you/my student/
[00:26:11] <tomsmeding> cabal repl -b vector --repl-options=yourfile.hs, but make sure that it has a module header otherwise it won't work
[00:26:18] <dsal> EvanR: I'm afraid you're going to need to install NixOS and start using stack.
[00:26:25] <zincy_> I am your student just not on your course
[00:26:37] <geekosaur> cabal has scripts, they're just poorly documented
[00:27:30] <dsal> Data.Map.Strict.partition is ~10x slower than Data.Map.Strict.filter when I end up matching slightly less than one item on average.
[00:27:31] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e5135c37e9089e8a354.dip0.t-ipconnect.de)
[00:28:17] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[00:29:05] <EvanR> dsal, lol
[00:30:15] <EvanR> tomsmeding, k that's something
[00:30:44] <sm> EvanR: certainly, use a stack script
[00:30:52] <EvanR> :|
[00:31:07] <EvanR> I might as well just create a cabal project
[00:31:09] <sm> or a cabal script if you don't like stack, it's just not quite as good
[00:31:21] <sm> you asked for no project
[00:31:30] *** jinsun__ is now known as jinsun
[00:31:30] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[00:31:34] <tomsmeding> but yeah also cabal script https://cabal.readthedocs.io/en/3.4/cabal-commands.html?highlight=script#cabal-v2-run
[00:31:37] <EvanR> a stack script is less?
[00:31:56] <EvanR> I haven't had to install stack this go around with haskell
[00:32:05] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[00:32:10] <sm> a stack/cabal script is less than a project, yes (but still reproducible)
[00:32:28] <sm> they're great
[00:33:10] <EvanR> cool
[00:33:25] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[00:34:57] <EvanR> so a cabal script is a script that cabal runs... and the language is haskell?
[00:35:20] <sm> yes 
[00:35:20] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[00:35:37] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[00:36:36] <sm> https://docs.haskellstack.org/en/stable/GUIDE/#script-interpreter
[00:36:59] <EvanR> that's awesome
[00:37:28] *** Joins: coolnickname (~coolnickn@73.194.7.51.dyn.plus.net)
[00:37:47] <EvanR> does it cache the compiled exe
[00:38:04] <sm> stack does, cabal doesn't
[00:39:01] *** Joins: trillp (~user@69.233.98.238)
[00:40:27] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:43:32] <fgaz> EvanR: you could also use cabal-env to create an enviroment with the packages you need then use ghc directly
[00:43:56] <EvanR> and that's different from just creating a cabal project? xD
[00:46:24] <fgaz> it's... less declarative
[00:47:08] <fgaz> it works great for quick experiments for example
[00:47:26] <fgaz> long term i'd definitely create a project though
[00:49:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:49:25] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:51:05] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:51:24] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:53:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:53:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:53:45] <EvanR> cool, the cabal script works and runs
[00:53:55] <EvanR> and using vector instead of list is much faster
[00:54:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:54:21] <EvanR> and running the script itself now has high latency due to compilation I guess xD
[00:54:53] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[00:55:02] <sm> yes, cabal compiles it every time
[00:55:13] <sm> nullifying the advantage a bit
[00:55:30] <EvanR> some unfortunate infrastructure overhead just to use arrays hehe
[00:57:35] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[00:59:09] * geekosaur wonders if there's some way to abuse ccache into being hcache
[01:02:08] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[01:02:23] *** Quits: axeman (~quassel@2a02:8109:a3c0:b10:90ba:bdb8:fd93:c610) (Quit: No Ping reply in 180 seconds.)
[01:03:38] *** Joins: axeman (~quassel@2a02:8109:a3c0:b10:814a:ccac:5077:2ffa)
[01:06:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:06:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:08:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:08:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:10:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:10:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:12:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:12:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:12:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Remote host closed the connection)
[01:17:47] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[01:18:30] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[01:20:41] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[01:21:57] *** Joins: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[01:23:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:24:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:25:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:26:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:27:00] *** Quits: xff0x (~xff0x@2001:1a81:53e7:c700:798e:f8b0:91f3:38f8) (Ping timeout: 268 seconds)
[01:27:26] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[01:27:35] *** Joins: xff0x (~xff0x@2001:1a81:53e7:c700:ae6c:946a:bfb4:e41d)
[01:28:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[01:29:45] <EvanR> Vector.modify is documented as doing in-place update if possible other makes a copy. Is this real? I.e. does it ever not just make a copy
[01:30:21] *** Quits: briandaed (~jaroslawj@185.234.208.208.r.toneticgroup.pl) (Quit: Lost terminal)
[01:30:39] <EvanR> otherwise*
[01:32:00] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[01:32:13] <int-e> EvanR: I'd take this as code-speak for fusion, so if you modify a freshly created vector it'll just create one
[01:33:15] <int-e> let's see if I understand the code well enough to figure out whether there's more to it
[01:33:22] <EvanR> haha yeah I tried
[01:34:04] <EvanR> clone creates a New wrapper, so maybe the optimizer can recognize that and avoid a copy
[01:34:56] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:f9b9:ddeb:6361:fc1a)
[01:36:41] <int-e> e.g. there's a rule like this, `"clone/new [Vector]" forall p. clone (new p) = p` and `modify` is implemented as `modify p = new . New.modify p . clone`
[01:37:20] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[01:37:32] <EvanR> so clone and new cancel
[01:37:47] <EvanR> if you chain modifies, it only creates 1 new
[01:37:55] <int-e> where `clone :: Vector v a => v a -> New v a` and `new :: Vector v a => New v a -> v a` switch between vector and vector-being-initialized (really a wrapper around ST)
[01:38:37] *** Quits: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Ping timeout: 252 seconds)
[01:38:40] <int-e> so yeah it still looks like code-speak for fusion :)
[01:39:05] <EvanR> that's pretty slick
[01:39:10] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:39:27] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:f9b9:ddeb:6361:fc1a) (Client Quit)
[01:39:41] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:f9b9:ddeb:6361:fc1a)
[01:40:46] *** Quits: xff0x (~xff0x@2001:1a81:53e7:c700:ae6c:946a:bfb4:e41d) (Ping timeout: 245 seconds)
[01:41:48] *** Joins: xff0x (~xff0x@2001:1a81:53e7:c700:da53:be98:ac38:235d)
[01:43:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:44:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:44:36] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[01:44:42] *** Quits: nrl^ (~nrl@68.101.58.90) (Remote host closed the connection)
[01:47:13] *** Quits: awschnap (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:47:23] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:f9b9:ddeb:6361:fc1a) (Remote host closed the connection)
[01:49:47] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[01:50:55] *** Joins: neurocyte0132889 (~neurocyte@IP-213188116193.dynamic.medianet-world.de)
[01:50:55] *** Quits: neurocyte0132889 (~neurocyte@IP-213188116193.dynamic.medianet-world.de) (Changing host)
[01:50:55] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[01:51:04] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[01:52:56] *** jassob1 is now known as jassob
[01:54:56] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 252 seconds)
[01:55:29] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[01:56:15] *** Joins: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[01:59:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:59:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:01:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:01:24] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:01:54] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[02:03:11] *** Quits: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Ping timeout: 252 seconds)
[02:05:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:05:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:06:22] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[02:06:22] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[02:07:51] *** Joins: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[02:13:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:14:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:16:27] *** Joins: fabfianda (~fabfianda@net-109-115-246-237.cust.vodafonedsl.it)
[02:16:36] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[02:20:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:20:25] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:22:05] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:22:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:23:28] *** Joins: rusty (~rustyboy@2a02:2f0e:5610:ab00:b16b:f583:26df:4061)
[02:24:12] *** Quits: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:26:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:26:39] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:27:45] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[02:28:16] *** Quits: axeman (~quassel@2a02:8109:a3c0:b10:814a:ccac:5077:2ffa) (Ping timeout: 245 seconds)
[02:29:24] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:29:45] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 256 seconds)
[02:30:32] <juri_> grr. infinite type error. oh, fun.
[02:32:21] *** Quits: fabfianda (~fabfianda@net-109-115-246-237.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:33:39] *** Joins: fabfianda (~fabfianda@net-109-115-246-237.cust.vodafonedsl.it)
[02:34:16] *** Joins: debdut (~debdut@115.187.40.134)
[02:34:52] <juri_> oh. remove the definitions, and it's all happy.
[02:34:55] <juri_> crud.
[02:36:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:37:24] *** Quits: debdut (~debdut@115.187.40.134) (Client Quit)
[02:38:12] *** Joins: debdut (~debdut@115.187.40.134)
[02:38:34] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Quit: Leaving)
[02:41:05] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[02:42:32] <EvanR> an infinite error you say
[02:42:36] <EvanR> > fix error
[02:42:37] <lambdabot>  "*Exception: *Exception: *Exception: *Exception: *Exception: *Exception: *Ex...
[02:42:57] *** Quits: debdut (~debdut@115.187.40.134) (Client Quit)
[02:44:05] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[02:44:15] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[02:44:25] *** Joins: pavonia (~user@user/siracusa)
[02:46:12] *** Joins: debdut (~debdut@115.187.40.134)
[02:46:17] *** Quits: rusty (~rustyboy@2a02:2f0e:5610:ab00:b16b:f583:26df:4061) (Remote host closed the connection)
[02:46:33] <hololeap> there's a potential semigroup on (Bool, a) where it stops at (True, a) and ignores any farther arguments. is there a name for this?
[02:47:24] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[02:48:27] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[02:48:39] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[02:49:23] *** Quits: xff0x (~xff0x@2001:1a81:53e7:c700:da53:be98:ac38:235d) (Ping timeout: 252 seconds)
[02:50:01] *** Joins: xff0x (~xff0x@2001:1a81:53e7:c700:4988:289c:a66b:6fe)
[02:50:33] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:52:08] <hololeap> kind of a hybrid between First and Any
[02:53:04] <EvanR> by just mapping to First you don't need to answer this xD
[02:56:04] <EvanR> is there a way to "stick an a" on any semigroup like that and have it make sense... I guess not
[02:56:36] <EvanR> there's Tagged but that's a phantom
[02:58:03] <hololeap> that's true, I could foldMap (f :: a -> First a)
[02:59:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:00:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:00:24] <EvanR> was thinking (Bool,a) -> First a
[03:00:38] <EvanR> oh, tuple foldable
[03:00:50] <maerwald> "lol" </> "/bar" -> "/bar" -- another bug on windows :p
[03:01:37] <EvanR> no laughing on windows 👔
[03:02:06] <maerwald> "/bar" on windows is equivalent to "bar", so the result should be "lol\\bar"
[03:02:43] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[03:06:19] *** Joins: zebrag (~chris@user/zebrag)
[03:06:48] *** Quits: debdut (~debdut@115.187.40.134) (Quit: debdut)
[03:08:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:08:47] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:09:09] <juri_> windows. nevermore.
[03:10:20] <sm> listening to a recent SPJ podcast interview, I was reminded that in a sense, it's Windows users that have paid for Haskell
[03:11:43] <juri_> good. getting something good from evil does not mean you owe fealty to evil. you should congratulate those who held the line against evil, and move on.
[03:11:46] <maerwald> they never paid me any money
[03:12:12] <sm> microsoft paid SPJ (at least) to do whatever he wanted (GHC maintenance) for years
[03:12:20] <EvanR> surprised to see accursedUnutterablePerformIO in latest bytestring code xD
[03:12:30] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[03:12:31] <EvanR> thought that was censored a while back
[03:12:38] *** Quits: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0) (Quit: ZNC - http://znc.in)
[03:12:45] <sm> microsoft's money came from Windows users. Therefore, we should kind of thank windows users once in a while
[03:13:06] <EvanR> anyway, is there a sane way to fold over 2 bytes at a time
[03:13:46] *** Quits: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Quit: ZNC - https://znc.in)
[03:15:37] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:15:55] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:16:38] <juri_> sm: windows users don't donate to microsoft. they pay, or they can't use their computers. thanking someone for being a victim is not healthy.
[03:17:32] *** Joins: cowgirl (~coderobe@archlinux/trusteduser/coderobe)
[03:17:36] *** Parts: cowgirl (~coderobe@archlinux/trusteduser/coderobe) (Killed (K-Lined))
[03:18:32] <EvanR> I'm a windows user and I didn't pay
[03:18:46] <EvanR> only occasionally I can't read whatever is behind the watermark
[03:19:13] <EvanR> ghcup on windows works great thanks for that
[03:19:36] *** Joins: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[03:19:41] *** Quits: alx741 (~alx741@186.178.108.253) (Ping timeout: 256 seconds)
[03:19:45] *** Joins: axeman (~quassel@2a02:8109:a3c0:b10:7b24:ebdc:13ed:79b5)
[03:20:02] <maerwald[m]> EvanR: I accept bitcoin
[03:20:51] <maerwald[m]> ADA is too low right now :p
[03:22:41] <geekosaur> microsoft's money didn't come from windows users. it came from *office* users
[03:23:09] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:24:53] *** Joins: namkeleser (~namkelese@101.175.128.51)
[03:24:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:26:39] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:26:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:27:05] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Read error: No route to host)
[03:27:35] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[03:30:17] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[03:31:11] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:33:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:33:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:35:20] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[03:37:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:37:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:37:38] *** Joins: maroloccio (~marolocci@151.53.155.184)
[03:39:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:39:37] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:39:45] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6)
[03:41:25] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:41:43] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:41:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:42:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:44:56] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 245 seconds)
[03:46:15] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 256 seconds)
[03:46:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[03:52:49] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[03:53:38] *** Joins: alx741 (~alx741@186.178.108.253)
[03:56:29] *** Quits: xff0x (~xff0x@2001:1a81:53e7:c700:4988:289c:a66b:6fe) (Ping timeout: 252 seconds)
[03:56:48] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6) (Quit: gone to sleep. ZZZzzz…)
[03:57:14] *** Joins: xff0x (~xff0x@2001:1a81:53e7:c700:1510:f8b4:a5f5:28f)
[03:59:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[03:59:15] *** Joins: pfurla (~pfurla@201.17.118.230)
[04:04:15] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e5135c37e9089e8a354.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:05:23] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[04:06:10] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:06:41] *** Joins: chenqisu1 (~chenqisu1@183.217.200.156)
[04:10:36] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[04:15:43] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[04:17:07] <arahael> ^^ that.
[04:18:03] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[04:29:06] <yin> why is GeneralizedNewtypeDeriving not allowed in Safe Haskell?
[04:31:46] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Remote host closed the connection)
[04:33:46] <geekosaur> https://stackoverflow.com/questions/17137111/why-isnt-generalizednewtypederiving-a-safe-haskell
[04:34:15] <geekosaur> includes not only an explanation but also a link to a ghc ticket with examples of why it's unsafe
[04:38:14] *** Joins: retro_ (~retro@97e2ba2e.skybroadband.com)
[04:39:59] <geekosaur> from what I just read, the original concerns were mostly addressed with the roles system but it also brought in new questions
[04:40:59] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:00] <int-e> Well with GND using `coerce` nowadays it /should/ be safe.
[04:41:31] <geekosaur> https://mail.haskell.org/pipermail/haskell-cafe/2015-April/118970.html ff
[04:41:52] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[04:41:55] <geekosaur> apparently there's still some thorny questions
[04:42:29] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[04:42:35] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[04:43:06] *** Quits: retro_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[04:43:27] <int-e> and the exactl meaning of "safe"
[04:43:38] <int-e> is still unclear
[04:44:01] *** Joins: hololeap (~hololeap@user/hololeap)
[04:44:41] <int-e> But thanks, I guess "coerce breaks abstraction via newtype" is also the reason why Data.Coerce is marked unsafe.
[04:46:49] *** Quits: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Quit: ZNC - https://znc.in)
[04:46:54] *** Quits: maroloccio (~marolocci@151.53.155.184) (Quit: WeeChat 3.0)
[04:47:06] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:47:27] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:49:36] *** Joins: maroloccio (~marolocci@151.53.155.184)
[04:49:47] *** Quits: maroloccio (~marolocci@151.53.155.184) (Client Quit)
[04:50:08] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[04:50:15] *** Joins: maroloccio (~marolocci@151.53.155.184)
[04:52:50] *** Joins: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[04:59:57] *** Quits: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Quit: ZNC - https://znc.in)
[05:03:16] *** Joins: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[05:14:11] <yin> geekosaur: thanks
[05:16:42] <yin> i wish i could have Safe and add an exception. like {-# UnsafeException trace #-}
[05:16:47] *** Quits: axeman (~quassel@2a02:8109:a3c0:b10:7b24:ebdc:13ed:79b5) (Ping timeout: 252 seconds)
[05:16:50] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[05:17:53] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[05:18:37] <geekosaur> reexport trace from a module marked Trusted?
[05:21:42] <geekosaur> …hm, how does that even work with modern stack/cabal? trust is marked in the package database, which is synthetic
[05:22:11] <yin> i'm getting "incompatible Safe Haskell flags! (Safe, Trustworthy)
[05:22:22] <yin> i'm doing something wrong i think
[05:22:30] <geekosaur> right, that module cannot be marked Safe
[05:22:48] <geekosaur> if it were then it wouldn't be allowed to import trace
[05:23:13] <yin> hmm
[05:23:24] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[05:23:34] <geekosaur> alternatively I suppose you could mark Debug.Trace itself as Trustworthy
[05:23:46] <geekosaur> but that might be going farther than you want
[05:24:10] <yin> if i add Safe to default-extensions in my .cabal file, does that mean that all submodules are marked as safe?
[05:25:39] <yin> is it a stupid thing to add Safe in default-extensions even?
[05:25:42] <geekosaur> yes, if I understand "submodule" correctly. (hierarchical modules aren't, really, they're just an organizational aid for people)
[05:25:57] <geekosaur> I think most people would avoid that, yes
[05:26:11] <yin> ok that makes sense
[05:26:17] <geekosaur> in part because of what int-e said earlier: "safe" is not well defined at present
[05:27:27] <geekosaur> as best I can tell, it is intended to mean "cannot be used to define unsafeCoerce" — but that's already true of Debug.Trace, so it should be at least Trustworthy
[05:27:59] <geekosaur> which is why "Safe Haskell" is confusing and largely avoided; it's inconsistent
[05:31:19] <yin> i think i remember a nice enough system from rust (?) where you marked individual functions as "trust me, i'm being responsible with {unsafe method}"
[05:34:58] <EvanR> a nice sentiment
[05:36:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:37:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:37:00] *** Joins: wroathe (~wroathe@user/wroathe)
[05:37:18] <yin> :P
[05:40:59] *** Joins: retro_ (~retro@97e2ba2e.skybroadband.com)
[05:43:23] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[05:44:46] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[05:45:16] <geekosaur> well, actually there are other problems. like iirc the reason for Debug.Trace not being Trustworthy is it's left to the developer to decide what is Trustworthy or not
[05:45:29] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[05:45:35] <geekosaur> but then with base any module you mark Trustworthy becomes Trustworthy everywhere
[05:45:49] <geekosaur> when you might want it for only one stack/cabal project
[05:46:00] *** Quits: retro_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[05:46:07] <geekosaur> which is a downside of storing Trustworthy in the package db
[05:47:03] <geekosaur> also, hm. the other Debug.Trace functions don't expose IO in any way so they are fine, but I haven't vetted traceIO
[05:47:37] <geekosaur> it may be fine if the only use of IO is sequencing, but it may not
[05:47:51] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f5ec:bb0e:161e:528b)
[05:49:00] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[05:49:05] *** Quits: xff0x (~xff0x@2001:1a81:53e7:c700:1510:f8b4:a5f5:28f) (Ping timeout: 268 seconds)
[05:49:28] *** Joins: xff0x (~xff0x@2001:1a81:53e7:c700:5d29:4d4d:a0f8:12e7)
[05:49:44] *** Joins: hololeap (~hololeap@user/hololeap)
[05:49:55] <geekosaur> also: if the package db for a stack/cabal project is created once for the project and retained, such that you could mark modules Trustworthy and have it stick, you now have additional metadata that's not part of the project definition (cabal files, stack.yaml/cabal.project, etc.)
[05:50:45] <geekosaur> so if you duplicate that project or transport it somewhere else or nuke and regenerate the package db, you have to remember to mark modules as Trustworthy again
[05:52:47] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f5ec:bb0e:161e:528b) (Ping timeout: 268 seconds)
[05:54:04] <geekosaur> I'd be interested in hearing from sm or sclv about that one
[05:55:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:55:39] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:56:33] <sm> no real insight from me I'm afraid, except maximising the immutable and reproducible parts is always good
[05:59:18] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[05:59:38] *** Joins: tom_ (~tom@2a00:23c8:970c:4801:8164:4807:4ccb:62f3)
[05:59:41] *** Quits: xff0x (~xff0x@2001:1a81:53e7:c700:5d29:4d4d:a0f8:12e7) (Ping timeout: 252 seconds)
[06:00:09] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Read error: Connection reset by peer)
[06:00:26] * sm feels reproducible builds is higher priority than marking things safe
[06:01:35] *** Quits: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Ping timeout: 250 seconds)
[06:01:38] <geekosaur> yin ^ this is more or less what you're fighting
[06:01:40] *** Joins: xff0x (~xff0x@2001:1a81:5227:8600:681d:a189:70c5:145e)
[06:01:41] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[06:01:41] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:01:42] *** Joins: zincy (~tom@2a00:23c8:970c:4801:8164:4807:4ccb:62f3)
[06:02:02] *** Quits: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Ping timeout: 268 seconds)
[06:03:56] <yin> i get it
[06:07:18] <zwro[m]> what's an easy way to build a n-bit type where i can use Data.Bits where n is arbitrary?
[06:07:21] *** Quits: alx741 (~alx741@186.178.108.253) (Ping timeout: 256 seconds)
[06:09:21] <zwro[m]> where i can do `complement 0b0011001` for instance and get 0b1100110
[06:10:03] <zwro[m]> (this would be a Word7)
[06:10:51] <yin> list of Bool with a Bits instance?
[06:10:52] <awpr> newtype around Integer (or Int if you're sure you won't need more than 64 / the platform native bit width) is a reasonably easy way to implement it
[06:11:24] <awpr> with a phantom Nat type parameter: `newtype Bit (n :: Nat) = Bit Integer`
[06:12:12] <yin> oh that might be better
[06:12:45] <awpr> then with KnownNat constraints on the typeclass instances and the appropriate masking / bounds checking / whatever you prefer, it can be made to behave like an n-bit integer
[06:16:26] <zwro[m]> that's KindSignatures, right?
[06:17:25] <zwro[m]> and which Nat is that?
[06:18:07] <awpr> yeah, it's a kind signature, and as far as I know there's only one Nat type, exported from Data.TypeNats and a few other places
[06:18:41] <zwro[m]> it's not GHC.TypeLits ?
[06:19:11] <awpr> oh, it's GHC.TypeNats and not Data, but yeah, that's one of the other places it's exported from
[06:20:00] <zwro[m]> ok, i've got some reading to do
[06:20:08] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f5ec:bb0e:161e:528b)
[06:20:11] <zwro[m]> ty
[06:21:56] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[06:22:02] <yin> i have no idea how to estimate performance of type level stuff
[06:22:22] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:24:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:26:04] *** Quits: namkeleser (~namkelese@101.175.128.51) (Ping timeout: 256 seconds)
[06:28:13] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[06:28:36] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[06:30:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[06:35:02] *** Joins: namkeleser (~namkelese@101.175.128.51)
[06:41:02] *** Joins: alx741 (~alx741@186.178.108.253)
[06:42:16] <EvanR> yin, static types are only checked at compile time
[06:42:37] <EvanR> so runtime performance is great
[06:44:30] *** Joins: zebrag (~chris@user/zebrag)
[06:44:34] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[06:45:18] *** Quits: maroloccio (~marolocci@151.53.155.184) (Quit: WeeChat 3.0)
[06:49:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[06:50:01] <yin> what about space?
[06:50:40] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f5ec:bb0e:161e:528b) (Remote host closed the connection)
[06:51:15] <EvanR> types don't exist at runtime so they take zero space!
[06:52:47] <yin> how would the type literal solution above compare to something like type Bin = [Bool] with a Bits instance?
[06:53:55] <EvanR> the Nat suggestion was so you can work with multiple size bit vectors safely?
[06:54:11] <EvanR> not involved in the runtime bit banging
[06:55:41] *** Quits: renzhi (~xp@2607:fa49:6500:b100::5cef) (Ping timeout: 268 seconds)
[06:56:11] <yin> oh i must have misundertood what was being asked then
[06:57:13] <EvanR> :t 1234 .|. 4321
[06:57:13] <lambdabot> (Bits a, Num a) => a
[06:57:22] <EvanR> (1234::Integer) .|. 4321
[06:57:22] <yin> i thought you were talking about dynamically sized words
[06:57:36] <EvanR> > (1234::Integer) .|. 4321
[06:57:38] <lambdabot>  5363
[06:57:48] <EvanR> more like fixed size n that you choose
[06:58:06] <yin> yup i get it now
[06:58:30] <unclechu> Hey, when I turn on GHC2021 extension my type family fails to compile. It’s poly-kinded.
[06:58:30] <unclechu> `type family ToSigned (x ∷ k) ∷ Signed a where ToSigned (x ∷ Nat) = P x`
[06:58:30] <unclechu> GHC complains that “Expected kind ‘k’, but ‘x :: Nat’ has kind ‘Nat’”
[06:58:55] <unclechu> Any ideas why does this happen? A bug or maybe some included extension?
[06:58:59] <yin> what would be a good approach for dynamic?
[06:59:53] <EvanR> what does dynamic mean here
[07:00:37] <yin> n depending on some input for instance
[07:00:48] <EvanR> oof
[07:01:44] <yin> is this dependent type territory?
[07:01:50] <EvanR> if your code works for all n, then it's a matter of convincing the type system that your parser produces the correct type of value corresponding to that unknown input value
[07:02:52] <EvanR> you can also bundle the unknown value in a... dependent pair...
[07:03:19] <EvanR> but the parser is tricky
[07:04:16] <yin> or just go with [[Bool]] :)
[07:04:42] <EvanR> if you don't care about the types, Integer would probably be faster
[07:05:35] <yin> sure but then this conversation is no fun
[07:05:41] *** Quits: td_ (~td@muedsl-82-207-238-245.citykom.de) (Ping timeout: 252 seconds)
[07:07:13] *** Joins: td_ (~td@muedsl-82-207-238-182.citykom.de)
[07:07:40] <yin> is GHC smart enough to optimize a list or n-tuple of bools in memory?
[07:08:03] <yin> as in more efficiently allocate it?
[07:09:07] <EvanR> no
[07:09:19] <yin> :(
[07:10:31] <EvanR> a list is either made of list nodes or is made of nothing after it's optimized out
[07:10:43] <yin> i wonder how feasable that would be
[07:11:45] <yin> wait wdym by that last part?
[07:11:48] <EvanR> a normal n tuple of bools can't be packed together since tuples hold lazy values
[07:12:29] <EvanR> there's unpacked tuples though
[07:12:32] <EvanR> er, unboxed
[07:12:43] <yin> what about unboxed?
[07:13:00] <yin> yes i was just about to ask :)
[07:13:57] <yin> -O2 should take care of that anyways, right?
[07:13:59] <EvanR> an unboxed bool is still a whole word I think
[07:14:40] <yin> iirc something changed in 9.2
[07:14:41] <EvanR> instead of a pointer to a bool box, it's just the bool data
[07:15:43] <yin> it's now 8 bits instead of Word (?) smething like that
[07:17:10] <yin> this inner works of GHC is beyond my level of understanding
[07:17:22] <EvanR> I do not know
[07:22:19] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:22:19] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:22:19] *** finn_elija is now known as FinnElija
[07:23:17] *** Quits: chenqisu1 (~chenqisu1@183.217.200.156) (Ping timeout: 256 seconds)
[07:24:49] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:26:48] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[07:27:20] *** Joins: img (~img@user/img)
[07:31:52] *** Joins: arjun (~user@user/arjun)
[07:39:14] *** Quits: xff0x (~xff0x@2001:1a81:5227:8600:681d:a189:70c5:145e) (Ping timeout: 252 seconds)
[07:39:54] *** Joins: xff0x (~xff0x@2001:1a81:5227:8600:4d3a:2f6a:351b:d244)
[07:46:09] *** Joins: hololeap_ (~hololeap@user/hololeap)
[07:47:20] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[07:48:53] *** Joins: sunmountain (~sunmounta@206.217.205.57)
[07:49:41] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 252 seconds)
[07:50:05] <EvanR> at some point there were proposals to do something with FilePath, such as change it to ByteString. Did anything ever happen
[07:51:17] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[07:51:53] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 252 seconds)
[07:52:15] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[07:53:48] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:56:31] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[07:56:43] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[07:57:44] <c_wraith> the real problem is that there is no right answer.
[08:02:18] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[08:02:59] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:03:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:07:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[08:09:41] *** Quits: xff0x (~xff0x@2001:1a81:5227:8600:4d3a:2f6a:351b:d244) (Ping timeout: 268 seconds)
[08:10:05] *** Joins: xff0x (~xff0x@2001:1a81:5227:8600:2d6c:ad13:e9b9:6c25)
[08:15:22] <dmj`> @package filepath-bytestring
[08:15:22] <lambdabot> https://hackage.haskell.org/package/filepath-bytestring
[08:15:37] *** Joins: Lycurgus (~juan@98.4.112.204)
[08:16:44] <EvanR> looks promising
[08:23:35] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:24:20] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[08:26:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:33:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[08:35:26] *** Joins: deadmarshal (~deadmarsh@95.38.231.28)
[08:37:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[08:39:59] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:46:24] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:48:24] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[08:50:38] *** Quits: namkeleser (~namkelese@101.175.128.51) (Quit: Client closed)
[08:51:22] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[08:57:00] *** Joins: nfd (~nfd@user/nfd)
[08:58:30] <nfd> alright, i could use an AoC day 4 rubberduck for a moment, because i seem too sleepy to get something pretty simple here:
[09:00:16] <nfd> i'm writing a megaparsec parser for reading cards in day 4, and it keeps dying after the first line of the first card on the example data, because it's not expecting the leading space
[09:00:29] <nfd> ``parseCard = hspace *> sepBy (many ((,False) <$> lexeme number)) eol``
[09:00:42] <nfd> ...but i thought that leading hspace call should've done it.
[09:00:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[09:01:02] <nfd> (i'll pastebin the whole thing if anyone wants ofc)
[09:03:35] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[09:07:43] *** Joins: mbuf (~Shakthi@122.174.197.155)
[09:08:15] <nfd> (my previous attempts were way too zealous about eating whitespace, and just read the rest of the file as one massive one-lined card)
[09:11:35] *** Quits: deadmarshal (~deadmarsh@95.38.231.28) (Ping timeout: 256 seconds)
[09:14:21] <dsal> nfd: what is lexeme?
[09:17:46] *** Joins: chenqisu1 (~chenqisu1@183.217.200.156)
[09:21:31] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f5ec:bb0e:161e:528b)
[09:21:31] *** Quits: fabfianda (~fabfianda@net-109-115-246-237.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[09:21:45] *** Joins: fabfianda (~fabfianda@net-109-115-246-237.cust.vodafonedsl.it)
[09:22:09] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[09:23:38] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:35:35] *** Joins: namkeleser (~namkelese@101.175.128.51)
[09:36:29] <nfd> (got it; obviously put it in the wrong spot)
[09:38:22] <nfd> still a bit to iron out, but :)
[09:40:20] *** Joins: deadmarshal (~deadmarsh@95.38.231.28)
[09:43:13] *** Joins: dignissimus (~dignissim@88-104-68-62.dynamic.dsl.as9105.com)
[09:44:04] <nfd> alright, now i'm cooking with gas. to allow this to be a lesson for everyone:
[09:44:13] <nfd> `parseCard = sepEndBy (hspace *> some ((,False) <$> lexeme number)) eol`
[09:45:25] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[09:46:32] <dignissimus> I'm reading integers so I wanted to use Int, but I want to divide these numbers and the reuslt is probably not an integer, how should I approach this while making sure the code doesn't become too ugly (Adevent of Code) https://paste.tomsmeding.com/KrceTN3w
[09:50:25] <EvanR> well
[09:51:11] <EvanR> if you literally want to use division to get points on a line with algebraic certitude, you can use Rational 
[09:51:57] <EvanR> but it's not necessary for that problem because the lines are only horizontal vertical or diagonal
[09:52:25] <dignissimus> Oh, even in part 2??
[09:52:39] <EvanR> yeah read the text more carefully
[09:53:25] *** Quits: arjun (~user@user/arjun) (Remote host closed the connection)
[09:53:40] <EvanR> (in general if you wanted to use / with integers you can from fromInteger first to get a Double, and all that that entails. Or Rational)
[09:53:53] <EvanR> use* fromInteger
[09:53:57] <EvanR> fromIntegral!
[09:54:46] <dignissimus> My only concern is that if I replace all the variables with (fromIntegral x) the code might look really messy
[09:55:03] <dignissimus> Do I need to use a helper function?
[09:55:43] <EvanR> sometimes I define fi = fromIntegral, but it needs a type signature if you intend to use it at more than one type
[09:56:10] <EvanR> (and if I do... I put a type sig anyway and pick a better name!)
[09:56:24] <EvanR> (if I intend to use it at 1 type)
[09:56:54] <EvanR> you're right it'll look messy
[09:57:18] <EvanR> and won't even work if go with Double lol
[10:04:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[10:12:17] *** Quits: int-e (~noone@int-e.eu) (Quit: Reconnecting)
[10:12:26] *** Joins: int-e (~noone@int-e.eu)
[10:17:24] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[10:18:24] *** Quits: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com) (Ping timeout: 265 seconds)
[10:19:16] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[10:20:39] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[10:23:41] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[10:25:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:29:13] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[10:41:51] <EvanR> that's cool vector algorithms sort is much faster than Data.List sort
[10:42:44] <int-e> Well it should be :)
[10:43:39] <int-e> (As optimized as it is, the Data.List sort still dereferences a ton of random pointers, something you don't do when sorting an array in place)
[10:52:32] <EvanR> yeah it seems any time a list becomes materialized and stays around, bad things happen
[10:56:21] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[10:56:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:57:25] *** Joins: zaquest (~notzaques@5.130.79.72)
[10:57:49] *** Joins: shailangsa (~shailangs@host86-186-142-82.range86-186.btcentralplus.com)
[10:58:40] *** Joins: yauhsien (~yauhsien@2402:7500:4e5:d897:ecaa:ad5f:48c0:a8a4)
[10:59:31] <dmj`> lists are great as control structures (for loop replacement), but not so good for representing data
[11:05:50] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:07:03] *** Quits: gabiruh_ (~gabiruh@vps19177.publiccloud.com.br) (Quit: ZNC 1.7.5 - https://znc.in)
[11:07:17] *** Joins: gabiruh (~gabiruh@vps19177.publiccloud.com.br)
[11:10:21] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:11:09] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[11:16:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:17:10] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:18:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:19:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:21:10] *** Joins: thevishy (~Nishant@2405:201:f005:c007:fd4c:a570:99e4:8844)
[11:23:06] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[11:24:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:24:11] *** Quits: emf_ (~emf@2620:10d:c090:400::5:d28b) (Ping timeout: 252 seconds)
[11:24:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:26:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:30:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[11:32:38] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[11:35:00] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[11:41:07] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[11:43:54] *** Joins: axeman (~quassel@ip5f5aeb08.dynamic.kabel-deutschland.de)
[11:45:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:54:15] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[11:55:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:56:49] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:57:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:00:58] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:03:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:03:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:04:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:08:47] *** Joins: chenqisu12 (~chenqisu1@183.217.201.63)
[12:09:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[12:09:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:10:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:11:09] *** Quits: chenqisu1 (~chenqisu1@183.217.200.156) (Ping timeout: 256 seconds)
[12:18:49] *** Quits: yauhsien (~yauhsien@2402:7500:4e5:d897:ecaa:ad5f:48c0:a8a4) (Ping timeout: 252 seconds)
[12:23:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:23:19] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:24:59] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:25:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:25:26] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[12:25:47] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e5135c37e9089e8a354.dip0.t-ipconnect.de)
[12:28:56] *** Joins: Techcable (~Techcable@168.235.93.147)
[12:30:13] *** Quits: sky_lounge[m] (~skylounge@2001:470:69fc:105::efa6) (Quit: You have been kicked for being idle)
[12:30:29] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[12:33:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:34:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:35:32] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[12:37:46] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (Ping timeout: 265 seconds)
[12:38:21] *** Joins: Jonno_FTW (~come@api.carswap.me)
[12:40:01] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:40:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:40:41] *** Quits: deadmarshal (~deadmarsh@95.38.231.28) (Ping timeout: 256 seconds)
[12:44:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:44:18] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:46:29] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[12:47:36] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:36] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:39] *** allbery_b is now known as geekosaur
[12:48:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:48:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:52:41] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:55:36] *** Joins: deadmarshal (~deadmarsh@95.38.231.28)
[12:57:13] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Remote host closed the connection)
[13:00:10] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[13:01:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[13:03:36] *** Quits: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962) (Remote host closed the connection)
[13:04:32] *** Joins: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962)
[13:16:54] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[13:19:14] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:19:17] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:19:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:19:58] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f5ec:bb0e:161e:528b) (Remote host closed the connection)
[13:20:19] *** Joins: Pickchea (~private@user/pickchea)
[13:21:59] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:22:18] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:23:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:24:05] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[13:24:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:24:16] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:25:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:26:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:30:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:30:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:32:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:32:34] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:33:06] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:35:01] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:35:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[13:35:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:36:03] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[13:37:21] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:38:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[13:40:07] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[13:40:11] *** Lord_of_Life_ is now known as Lord_of_Life
[13:42:34] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[13:44:45] <Square> is there a way to make a partial function "complete" by just catching non handled cases? 
[13:47:22] <tomsmeding> Square: you need to return _something_ in all cases -- that's the point of being a total function
[13:47:34] <tomsmeding> what are you going to return in non-handled cases?
[13:48:09] <Square> I was thinking "Left SomeErrorType" 
[13:49:26] <tomsmeding> right, if you function return type is 'Either SomeErrorType Value', and you can generate some kind of standard error type, then you can do that
[13:50:25] *** Joins: Guest|22 (~Guest|22@188.163.27.147)
[13:50:53] *** Quits: Guest|22 (~Guest|22@188.163.27.147) (Client Quit)
[13:52:33] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:52:51] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:54:44] <Square> tomsmeding, what im after is avoiding to implement the error handling case whenever i do this. Hopefully like "dealWithNonHandled $ (\(MySumTypeCaseC x) -> Right x) value"
[13:56:23] <tomsmeding> ah, in that specific shape you can't make this
[13:56:53] <tomsmeding> what you can do, is (\case MySumTypeCaseC x -> Right x ; _ -> somedefaultstuff) value
[13:56:56] <tomsmeding> if you turn on LambdaCase
[13:57:12] <tomsmeding> if you don't like LambdaCase, of course (\v -> case v of MySu...
[13:58:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:59:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:00:18] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[14:01:02] *** Joins: max22- (~maxime@2a01cb0883359800e6d6eb63f9f5fddc.ipv6.abo.wanadoo.fr)
[14:01:05] <tomsmeding> Square: a way to see that what you want is impossible, is: what would the type of dealWithNonHandled be?
[14:01:10] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:01:15] <tomsmeding> and what would its argument be
[14:02:00] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[14:02:21] <Square> tomsmeding, i see how its impossible. Just hoped there was a trick around it =D
[14:02:32] <Square> ill go with LambdaCase. Good enough
[14:03:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[14:07:27] *** Joins: simendsjo (~user@84.211.91.241)
[14:08:07] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[14:12:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[14:14:34] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[14:16:47] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:17:01] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[14:17:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:19:01] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:19:19] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:20:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[14:23:08] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[14:24:35] *** Quits: fabfianda (~fabfianda@net-109-115-246-237.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[14:24:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Ping timeout: 252 seconds)
[14:25:14] *** Joins: fabfianda (~fabfianda@mob-5-90-255-224.net.vodafone.it)
[14:25:28] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[14:26:23] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[14:27:28] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[14:27:32] *** Quits: lstor (~lstor@user/lstor) (Remote host closed the connection)
[14:28:11] *** Joins: MoC (~moc@user/moc)
[14:28:38] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[14:30:19] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:30:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:31:07] *** Joins: Guest|85 (~Guest|85@35.85-84-235.dynamic.clientes.euskaltel.es)
[14:31:11] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 252 seconds)
[14:34:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:34:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:35:35] *** Quits: fabfianda (~fabfianda@mob-5-90-255-224.net.vodafone.it) (Ping timeout: 252 seconds)
[14:37:19] *** Quits: AndreasK (sid320732@id-320732.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[14:37:57] *** Joins: aegon (~mike@174.127.249.180)
[14:38:33] <aegon> what are the keyboard shortcuts to search within a package on hackage? where can i find them if i forget next time. :P
[14:39:56] *** Quits: Guest|85 (~Guest|85@35.85-84-235.dynamic.clientes.euskaltel.es) (Quit: Connection closed)
[14:40:58] <maerwald> s
[14:45:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:45:34] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:49:11] <aegon> thanks :)
[14:51:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:51:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:55:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:55:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:57:33] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[14:57:47] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[14:58:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:00:01] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[15:00:25] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[15:02:03] *** Quits: eyJhb (~eyJhb@user/eyjhb) (Quit: Clever message)
[15:02:33] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2)
[15:02:55] *** Joins: eyJhb (~eyJhb@user/eyjhb)
[15:03:31] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6)
[15:03:38] <pragma-> aegon: it's easy to remember the key is 's' because "s" stands for "sedimentologically"
[15:04:12] *** Joins: InternetCitizen4 (~fuzzypixe@tchebychev.ensimag.fr)
[15:04:39] <InternetCitizen4> screw arch linux for enforcing dynamic linking 'ghc -dynamic'  my ass
[15:04:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:05:05] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:05:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:09:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:09:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:11:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:11:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:12:15] <maerwald> pick a better distro
[15:13:31] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:15:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:15:23] <InternetCitizen4> like ?
[15:15:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:17:33] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:17:43] <maerwald> or better yet, switch to windows
[15:17:51] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:18:08] *** Joins: bbear100 (~bbear@2a01:e34:ec2b:d430:e0dd:e718:df68:1877)
[15:18:08] <bbear100> Hi
[15:18:34] <bbear100> just wanted to know if there is a better API than the [a..b] one for generating sequences of numbers
[15:19:09] <bbear100> my use case: I want to generate contiguous integer but I don't know if a > b or b > a, but I want the sequence to be in reverse order in the former case.
[15:20:23] <aegon> bbear100: guards will get you there
[15:20:33] *** Quits: max22- (~maxime@2a01cb0883359800e6d6eb63f9f5fddc.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[15:20:57] *** Joins: max22- (~maxime@2a01cb0883359800e6d6eb63f9f5fddc.ipv6.abo.wanadoo.fr)
[15:21:13] <maerwald> InternetCitizen4: I don't know... openSUSE?
[15:21:45] <aegon> maerwald: i can't tell if your trollin :P
[15:21:52] <maerwald> aegon: I'm not
[15:22:00] <maerwald> they have competent packagers
[15:22:08] <maerwald> something that's missing in most distros
[15:22:52] <aegon> gentoo! just package yourself :P
[15:23:02] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:23:11] <maerwald> I did gentoo deving for 4 years and will never go back to that madness
[15:23:16] <bbear100> archlinux if you like reading doc and running pre-compiled vanilla linux with decent community support
[15:23:42] <maerwald> bbear100: they asked about an alternative to arch, because arch is broken sh*t :p
[15:23:55] <bbear100> it's not *that* broken
[15:24:00] <maerwald> for Haskell, it is
[15:24:17] <fendor[m]> it is fine, as long as you use ghcup ;D 
[15:24:48] <bbear100> I'm using stack. Lesson in life: never use your distro package libraries for development workflow
[15:25:01] <maerwald> I'm on fedora... but not because I believe in it. The main issue is that you can't easily switch gcc versions, which you sometimes need for Haskell deving
[15:25:21] *** Quits: max22- (~maxime@2a01cb0883359800e6d6eb63f9f5fddc.ipv6.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[15:26:26] <aegon> bbear100: you mean you always want a descending sequence?
[15:26:37] <bbear100> not always, can be up or down
[15:26:40] <bbear100> I have another question:
[15:27:00] <bbear100> how can you define (+) for a datastructure like `data Point = Point Int Int` ?
[15:27:18] <bbear100> Do you really need to make it an instance of `Num` ?
[15:28:01] <bbear100> can I just define it?
[15:28:19] <aegon> yeah, instance num but if your really doing points, you can just derive it with the stock one
[15:28:26] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6) (Quit: gone to sleep. ZZZzzz…)
[15:28:29] <aegon> it'll do the right thing
[15:28:40] <bbear100> deriving Num will work ?
[15:29:19] <aegon> and Eq, not sure if Ord will be sane
[15:29:38] <aegon> i doubt Ord would be sane
[15:30:27] *** Joins: xkuru (~xkuru@user/xkuru)
[15:31:38] <bbear100>     • Can't make a derived instance of ‘Num Point’:
[15:31:38] <bbear100>         ‘Num’ is not a stock derivable class (Eq, Show, etc.)
[15:32:18] <bbear100> too bad
[15:32:25] *** Quits: xff0x (~xff0x@2001:1a81:5227:8600:2d6c:ad13:e9b9:6c25) (Ping timeout: 252 seconds)
[15:32:45] <maerwald> aegon: I don't think you can derive that
[15:32:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:33:17] *** Joins: xff0x (~xff0x@2001:1a81:5227:8600:e134:3a0d:618c:1205)
[15:35:46] <aegon> yeah, i was trying to get it to work and realizing it's not gonna work, just came back from that
[15:38:10] <bbear100> you can't redifine (+) for any type right, but you actually have to make it an instance of the correct typeclass, right '
[15:39:53] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:40:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:40:48] <aegon> bbear100: yeah, your gonna need to figure out what each thing in Num means for your Point, you could make a non (+) function and use that instead
[15:41:05] <aegon> i don't think i'm understanding your needs on the contigous but this is a quick paste https://paste.tomsmeding.com/EjB6Yung
[15:44:17] <tomsmeding> bbear100: in fact:
[15:44:22] <tomsmeding> % :t (+)
[15:44:23] <yahb> tomsmeding: Num a => a -> a -> a
[15:44:34] <tomsmeding> (+) is defined for _precisely_ those types that implement Num
[15:44:46] <tomsmeding> because it is a method of the Num class
[15:45:34] <aegon> bbear100: the hackage docs have good info on what the minimum required definitions are and what rules they need to satisfy
[15:45:48] <bbear100> ha allright
[15:46:15] <aegon> https://hackage.haskell.org/package/base-4.16.0.0/docs/Prelude.html#g:7
[15:46:36] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:46:39] <maerwald> void linux actually looks nice, but I'm not sure
[15:46:42] *** Joins: desantra (~skykanin@user/skykanin)
[15:48:40] <aegon> bbear100: if you treat (*) as distributive you could make a num instance but i think your looking for something besides Num with Points, Maybe a Vector class or something similar would fit more naturally
[15:48:51] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6)
[15:48:58] <bbear100> yes nevermind I don't really need a function
[15:49:15] <bbear100> Just want to try things.
[15:49:23] <bbear100> BTW, is there a counterSet available in the prelude ?
[15:49:43] <bbear100> like you can tell how many times an element is in the set ?
[15:49:54] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6) (Client Quit)
[15:50:13] *** Quits: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2) (Remote host closed the connection)
[15:51:42] *** Joins: Pickchea (~private@user/pickchea)
[15:52:02] *** Quits: Megant (megant@user/megant) (Ping timeout: 252 seconds)
[15:53:11] <aegon> i think thats a Bag
[15:53:11] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[15:53:25] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:53:42] *** Joins: Megant (megant@user/megant)
[15:53:43] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:54:30] <aegon> bbear100: https://hackage.haskell.org/package/multiset-0.3.4.3/docs/Data-MultiSet.html
[15:54:38] <aegon> or i'm old and now its being called a multi-set
[15:57:28] *** Joins: machinedgod (~machinedg@24.105.81.50)
[15:58:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[15:59:19] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[16:01:56] *** Quits: xff0x (~xff0x@2001:1a81:5227:8600:e134:3a0d:618c:1205) (Ping timeout: 252 seconds)
[16:02:56] *** Quits: namkeleser (~namkelese@101.175.128.51) (Ping timeout: 256 seconds)
[16:03:29] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[16:03:31] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Remote host closed the connection)
[16:04:06] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[16:05:33] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6)
[16:06:28] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6) (Client Quit)
[16:08:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[16:09:38] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 252 seconds)
[16:11:36] <InternetCitizen4> is Parsec in base? :/
[16:11:57] <geekosaur> no
[16:12:26] <geekosaur> base is kept small, because it can only be upgraded with ghc
[16:12:48] <geekosaur> there is a parser in base, but it's a pretty slow and bad one (ReadP)
[16:12:57] <geekosaur> used by Read instances
[16:13:31] <geekosaur> parsec does ship with ghc but it's still upgradeable, unlike base
[16:16:40] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:16:40] *** Joins: Farzad (~FarzadBek@37.98.106.33)
[16:18:24] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[16:19:46] <Farzad> guys anyone using postgresql-simple here?
[16:20:53] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[16:23:19] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[16:23:59] *** Joins: xff0x (~xff0x@2001:1a81:5227:8600:e134:3a0d:618c:1205)
[16:24:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:26:06] *** hololeap_ is now known as hololeap
[16:26:40] <aegon> Farzad: yep
[16:27:15] <Farzad> can you direct me to an example usage of RowParser? I cant find any on google
[16:28:25] *** Quits: deadmarshal (~deadmarsh@95.38.231.28) (Ping timeout: 256 seconds)
[16:29:46] <InternetCitizen4> geekosaur: oh so it does ship with ghc that's good
[16:31:27] <aegon> i've never used them :| but it looks like you pass it a conversion that runs in io and you get that 
[16:31:34] <aegon> sorry, not much help there
[16:32:59] <Farzad> aegon: np, thanks anyway
[16:33:19] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:34:59] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:35:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:36:57] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:37:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:39:51] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[16:40:03] <dignissimus> My day 5 solution, I think my haskell is improving: https://paste.tomsmeding.com/ykQKkds8
[16:40:26] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 252 seconds)
[16:40:34] <dignissimus> Any feedback on the code? This time I made use of helper functions becuse last time it was difficult to read 
[16:42:11] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[16:43:59] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[16:44:17] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[16:45:57] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:46:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:46:43] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[16:46:49] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[16:49:37] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[16:50:12] *** Joins: kuribas (~user@ptr-25vy0i87ls363spjkfx.18120a2.ip6.access.telenet.be)
[16:50:19] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[16:50:50] <kuribas> What's this BS: https://blog.klipse.tech/databook/2020/10/02/generic-data-structures.html
[16:50:53] <kuribas> "FP Languages that are statically typed (e.g. Haskell and Ocaml) are not compliant with this principle."
[16:50:57] <kuribas> I can represent generic data structures in haskell just fine thank you.
[16:51:16] <kuribas> I probably don't want to, but I can...
[16:51:32] *** Joins: imdoor (~imdoor@balticom-142-78-50.balticom.lv)
[16:53:30] <Franciman> what does generic mean?
[16:55:04] <kuribas> unityped I suppose.
[16:55:30] <kuribas> One big sumtype to rule them all :)
[16:56:38] <Franciman> honestly what the heck
[16:56:45] <Franciman> I can't wait to finish my garbage collector, btw
[16:56:52] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[16:57:01] <Franciman> then I'll be able to start experimenting more freely with the evaluator
[16:57:06] <Franciman> and make it FFAST
[16:57:23] <Franciman> i'll be finally able to draw coherent conclusions re. haskell's evaluation behaviour
[16:58:23] <kuribas> BTW, to me this "data-oriented programming" looks just like an interpreter design.
[16:58:48] <kuribas> You write your logic as static data, then write an interpreter to apply it.
[16:59:16] <kuribas> That definitely doesn't require "generic" only data.
[16:59:37] <Franciman> to me data-oriented programming is basically
[16:59:40] <Franciman> try to make things fit in the cache
[17:00:00] <Franciman> otherwise I don't need anybody to tell me I should first think about data and how it flows
[17:00:08] <Franciman> because that's on of the core pillars of fp
[17:00:15] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Remote host closed the connection)
[17:00:18] <Franciman> we already design our data and write functions on it
[17:00:28] <kuribas> Franciman: yeah, that was before the clojure crowd took over the term...
[17:00:46] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[17:00:51] <Franciman> what I miss in haskell, but let me say this clear, it's my fault
[17:00:56] <Franciman> is being able to predict what goes where
[17:00:59] <Franciman> in the cache
[17:01:05] *** Joins: deadmarshal (~deadmarsh@95.38.231.28)
[17:01:10] <Franciman> and allowing super fast cache refs
[17:01:25] <kuribas> Then use unboxed vectors.
[17:01:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[17:01:52] *** Joins: max22- (~maxime@2a01cb0883359800155b4e4e6792e366.ipv6.abo.wanadoo.fr)
[17:02:58] <kuribas> And write strict loops.
[17:04:34] <kuribas> But in haskell data is code, in the sense that data is lambdas and infinite structures.
[17:04:40] <kuribas> So it's inherently not inspectable.
[17:05:11] *** Quits: simendsjo (~user@84.211.91.241) (Remote host closed the connection)
[17:05:11] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[17:05:25] <kuribas> For most problems that works fine, you just write your code so that you don't *need* to inspect the logic.
[17:06:43] *** Joins: son0p (~ff@181.136.122.143)
[17:09:35] *** Quits: max22- (~maxime@2a01cb0883359800155b4e4e6792e366.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[17:09:48] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[17:10:55] <juri_> kuribas: unboxed vectors don't work with Data.Parallel.
[17:11:27] <kuribas> juri_: you don't want parallism at that granularity...
[17:11:43] <kuribas> juri_: except for SIMD.
[17:13:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:18:17] *** Quits: chenqisu12 (~chenqisu1@183.217.201.63) (Ping timeout: 256 seconds)
[17:18:22] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:19:20] *** Joins: jakalx (~jakalx@base.jakalx.net)
[17:20:57] *** Quits: deadmarshal (~deadmarsh@95.38.231.28) (Ping timeout: 252 seconds)
[17:22:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:24:14] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c)
[17:24:26] *** Quits: alx741 (~alx741@186.178.108.253) (Ping timeout: 252 seconds)
[17:24:32] <darchitect> hi guys
[17:25:29] <darchitect> first time using irc so sorry for stupid questions, but I'm just a beginner on my "Haskell journey" and was wondering if this is the right place to ask code-related questions ?
[17:26:05] *** Quits: sunmountain (~sunmounta@206.217.205.57) (Ping timeout: 252 seconds)
[17:26:41] *** Joins: darchite` (~user@2a00:23c6:3584:df00:7dec:bf13:8fa:748c)
[17:27:40] <darchite`> test
[17:27:48] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Quit: WeeChat 3.3)
[17:28:03] <darchitect> test
[17:28:05] <darchitect> ?
[17:28:37] <dignissimus> darchitect: It is
[17:28:41] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[17:28:54] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[17:28:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:29:23] *** Joins: max22- (~maxime@2a01cb0883359800ca908bdf23b4cd25.ipv6.abo.wanadoo.fr)
[17:29:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:30:35] *** Joins: Guest76 (~Guest76@wireless-student-pt10-183-60.lut.ac.uk)
[17:31:58] *** Quits: dignissimus (~dignissim@88-104-68-62.dynamic.dsl.as9105.com) (Quit: Bye!)
[17:32:08] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e5135c37e9089e8a354.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[17:32:32] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[17:32:35] <kuribas> darchitect: if it is haskell code, yes.
[17:33:00] <kuribas> darchitect: if it is not haskell code, but relevant to haskell, then also yes.
[17:35:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:37:03] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[17:37:28] *** Joins: alx741 (~alx741@186.178.109.217)
[17:38:14] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[17:38:20] <darchitect> thanks a lot, will keep it mind !
[17:41:26] *** Joins: desantra (~skykanin@user/skykanin)
[17:42:39] *** Quits: InternetCitizen4 (~fuzzypixe@tchebychev.ensimag.fr) (Ping timeout: 256 seconds)
[17:42:45] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[17:47:26] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 245 seconds)
[17:47:56] <Guest76> hi all, im a new haskell user and am stuck on a problem, can i ask questions here?
[17:48:05] *** Quits: axeman (~quassel@ip5f5aeb08.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[17:48:50] <geekosaur> yes
[17:49:42] <kuribas> don't ask to ask
[17:51:41] <Guest76> im trying to create a function where the function takes list and a character it searches through the list for and partitions each part of the list where it occurs for example countsplit "hello world" 'o' would be [4,2,3], here is my code https://paste.tomsmeding.com/dP0Nji7h
[17:53:55] <kuribas> Guest76: that's not valid haskell syntax.
[17:54:13] <kuribas> Guest76: I am not even sure what it's supposed to do...
[17:55:15] <kuribas> length(head(xs)) head(xs) is of type `a`, so it doesn't have a length (in general).
[17:55:16] <Guest76> it's meant to search the list for each instance of a character / number and find how many characters are before it and hence the list of numbers as the result
[17:55:36] <Guest76> qutie new to functional paradigm so sorry if it looks bad
[17:55:55] <kuribas> And xs could be the empty list, so `head xs` will crash.
[17:56:08] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[17:56:45] <Guest76> ok
[17:57:06] <kuribas> Guest76: you are recursing on the list, so you don't know what is before it, unless you pass that to the recursive case.
[17:57:38] <kuribas> Guest76: also, [4, 3, 2] is not of type [[Int]]
[17:58:18] <Guest76> yes thats what im trying to do, trying to recurse through the list for each instance of a character and find the length of how many characters are before that letter so in my example you saw 4,3,2 since before the first o there was 4 characters etc...
[17:59:04] *** Joins: genieliu (~genieliu@111.193.167.10)
[18:00:33] <kuribas> Guest76: that's not what head does...
[18:00:38] <kuribas> > head [1, 2, 3]
[18:00:39] <lambdabot>  1
[18:00:42] <kuribas> > head []
[18:00:43] <Guest76> ok so does head only take the first element
[18:00:43] <lambdabot>  *Exception: Prelude.head: empty list
[18:01:11] <kuribas> Guest76: you're asking about previous elements, but they are not passed to the function...
[18:01:17] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[18:01:18] <Guest76> ok
[18:01:37] <kuribas> Guest76: function programming is easy, you cannot access anything that you don't pass to the function.
[18:01:39] *** Joins: zebrag (~chris@user/zebrag)
[18:01:48] <kuribas> Unlike OO.
[18:02:18] <Guest76> Yes, I only have OO experience so the new ideas are slightly confusing
[18:02:38] <Guest76> So would it be a better idea to do it through a list comprehension or can i do it through pattern matching?
[18:03:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[18:04:25] <kuribas> Guest76: If you want to "remember" the amount of previous characters, you need to pass it.
[18:04:42] <kuribas> Guest76: You can make an auxiliary function.
[18:04:58] <kuribas> Also fix the type of countsplit.
[18:05:19] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 252 seconds)
[18:05:49] <Guest76> Okay, so countsplit, at the end [[Int]] isn't the type of the list I want, so it is just [Int]?
[18:06:06] <kuribas> :t [[1, 2], [3, 4, 5]]
[18:06:07] <lambdabot> Num a => [[a]]
[18:06:13] <kuribas> :t [1, 2, 3]
[18:06:14] <lambdabot> Num a => [a]
[18:06:16] <Guest76> got it
[18:06:19] <Guest76> Okay
[18:06:35] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[18:06:47] <kuribas> Guest76: it also depends on your course.  You are probably expected to use functions that you have already seens before.
[18:07:42] <Guest76> I think we have to create them just for this function since this is on its own with nothing else attached to it
[18:08:15] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[18:08:23] <Guest76> So for an auxillary function, can you explain to me what one is please since I don't think I've came across the term before
[18:08:43] <geekosaur> helper function
[18:09:42] <Guest76> so a function where you use where underneath
[18:10:00] <Guest76> I have used those before but they were never told as auxillary functions
[18:10:37] <geekosaur> no, "where" isn't related. just a function that uses another function to do part of the work
[18:10:54] <geekosaur> either as part of recursion or to avoid duplicating code
[18:11:02] <kuribas> Guest76: How to write this function should be in the course material.
[18:11:54] <Guest76> So in the case of my problem, I can use an auxillary function to split the list into indexes where the character occurs then find the lengths of each of those indexes
[18:12:01] <Guest76> That is what I am getting at
[18:12:30] <kuribas> no, countsplitaux :: Eq a => Int -> [a] -> a -> [Int]
[18:12:44] <kuribas> you pass the current index to the function.
[18:13:25] <Guest76> Why would I need the Int at the start of the function definition?
[18:15:35] <kuribas> it's the current index
[18:16:40] <Guest76> On the question it says it can only have 2 arguments [a] and a so would I have to do that in a separate function and use that within countsplit
[18:16:40] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC)
[18:17:03] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[18:17:07] *** Quits: xsperry (~xs@user/xsperry) ()
[18:17:15] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[18:18:09] <kuribas> yes
[18:18:50] <kennyd> Guest76, countsplit xs y = go 0 xs y where go {- your main definition goes in here -}. the point of this is to avoid passing index, which would always be 0, to the countsplit as the user of that function
[18:19:06] <kuribas> > let countsplit l x = fold $ zipWith ($) (map (\y i -> if x == y then [i] else []) l) [0..] in countsplit "hello world" 'o'
[18:19:08] <lambdabot>  [4,7]
[18:19:34] <Guest76> Ok, I shall give that a go. So I am going to try and create a function which would make 'hello world' 'o' into ['hell', ' w', 'rld'] then find the length of those
[18:19:40] <Guest76> thank you very much kuribas
[18:19:47] <Guest76> thank you kennyd
[18:19:48] <kuribas> Guest76: don't use that
[18:20:00] <Guest76> dont use what sorry?
[18:20:10] <kuribas> my example 
[18:20:33] <Guest76> yeah i am not going to or else i wont learn (y)
[18:20:54] <kennyd> Guest76, if that is your end goal I'd create sublists directly instead of generating indices first
[18:20:56] <Guest76> I appreciate your help and being patient with me
[18:21:26] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[18:21:26] <Guest76> kennyd thats what im going to do i think
[18:21:41] *** Joins: deadmarshal (~deadmarsh@95.38.231.28)
[18:21:53] <Guest76> i had a look on google turns out there are modules i can use but unfortunately we are not allowed to use anu
[18:21:56] <Guest76> any
[18:22:06] <kennyd> yeah
[18:22:11] *** Joins: jkaye (~jkaye@2601:281:8300:7530:5a4f:5910:1ea1:e61f)
[18:22:22] <bbear100> How can you use do notation in ghci ?
[18:22:57] <kennyd> > splitOn "o" "hello world"
[18:22:59] <lambdabot>  ["hell"," w","rld"]
[18:23:18] <kennyd> bbear100, you can use semicolons
[18:23:20] <Guest76> yeah thats what i want but isnt that in a module
[18:23:23] <tomsmeding> > do { x <- [1,2,3] ; y <- [4,5,6] ; return (x + y) }
[18:23:24] <lambdabot>  [5,6,7,6,7,8,7,8,9]
[18:23:29] <geekosaur> bbear100, probably with braces. ghci has a multiline mode (two, actually) but it's painful
[18:23:47] <kennyd> Guest76, it is
[18:23:47] <bbear100> ok :+1:
[18:23:59] <geekosaur> and just naïvely hitting return won't do what you want
[18:24:08] <kennyd> Guest76, nevermind that, was just testing if it worked in lambdabot
[18:24:14] <Guest76> going to have to create a function to do that then
[18:24:15] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Quit: CiaoSen)
[18:25:58] <kennyd> Guest76, your type would be countsplit :: Eq a => [a] -> a -> [[a]]
[18:26:21] *** Quits: deadmarshal (~deadmarsh@95.38.231.28) (Ping timeout: 256 seconds)
[18:26:25] <Guest76> why not [[Int]]?
[18:27:13] <kennyd> ["hell"," w","rld"]  is not [[Int]]
[18:27:43] <Guest76> I want to make that into [4,2,3] as that will be how many characters are in each element
[18:28:45] <kennyd> you don't need that step if the goal is to take "hello world" and 'o', and return ["hell"," w","rld"]
[18:29:22] <bbear100> do you have the feeling that you do serious mental gymnastic when coding in haskell ?
[18:29:54] <bbear100> I'd like to be a bit more comfortable with automatisms
[18:30:07] <Guest76> I want [4,2,3] returned, ["hell"," w","rld"] is what the indexes of [4,2,3] will be from due to that being the length of each element of ["hell"," w","rld"]
[18:30:50] <kennyd> Guest76, ok, then Eq a => [a] -> a -> [Int]
[18:31:12] *** Joins: xsperry (~xs@user/xsperry)
[18:31:31] <bbear100> map length ["hell"," w","rld"] ?
[18:32:15] <Guest76> kennyd I had that before so thats good that i had the right idea
[18:33:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:33:08] <Guest76> bbear100 Yeah I do sometimes lol, especially as im a beginner and that is what im trying to acheive yeah, just need to get that list from ["hello world"] 'o' now
[18:33:23] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.3)
[18:34:35] *** Joins: unyu (~pyon@user/pyon)
[18:36:11] *** Joins: xkuru (~xkuru@user/xkuru)
[18:36:19] *** Joins: axeman (~quassel@2a02:8109:a3c0:b10:91ce:4409:54:e379)
[18:41:05] <xsperry> @hoogle Eq a => a -> [a] -> [Int]
[18:41:05] <lambdabot> Data.List elemIndices :: Eq a => a -> [a] -> [Int]
[18:41:05] <lambdabot> GHC.OldList elemIndices :: Eq a => a -> [a] -> [Int]
[18:41:06] <lambdabot> BasePrelude elemIndices :: Eq a => a -> [a] -> [Int]
[18:41:30] <xsperry> Data.List.elemIndices is in base, so you may be able to use it, if this is part of larger excercise
[18:41:45] *** Quits: kuribas (~user@ptr-25vy0i87ls363spjkfx.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[18:41:55] <xsperry> > elemIndices 'o' "hello world"
[18:41:56] <lambdabot>  [4,7]
[18:43:11] <Guest76> xsperry unfortunately it isn't, they specifically said that no modules are to be used at any point
[18:43:21] <bbear100> why don't you write your own function?
[18:43:27] <Guest76> thats what i am doing now haha
[18:47:29] *** Quits: genieliu (~genieliu@111.193.167.10) (Ping timeout: 252 seconds)
[18:47:44] <bbear100> using takeWhile and an accumulator for the length should work
[18:49:05] <kennyd> > [ i | (i,x) <- zip [0..] "hello world", x=='o']
[18:49:07] <lambdabot>  [4,7]
[18:50:45] <Guest76> thanks for the help and explanations everyone going to give this a good go now (y)
[18:51:08] <kennyd> neat solution that I, admittedly, stole from lambdabot :)
[18:51:20] <kennyd> > zip [0..] "hello world"
[18:51:21] <lambdabot>  [(0,'h'),(1,'e'),(2,'l'),(3,'l'),(4,'o'),(5,' '),(6,'w'),(7,'o'),(8,'r'),(9,...
[18:51:59] <kennyd> @src elemIndices
[18:52:00] <lambdabot> elemIndices x = findIndices (x==)
[18:52:03] <kennyd> @src findIndices
[18:52:04] <lambdabot> findIndices p xs = [ i | (x,i) <- zip xs [0..], p x]
[18:52:25] *** Quits: Farzad (~FarzadBek@37.98.106.33) (Ping timeout: 256 seconds)
[18:53:21] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Ping timeout: 252 seconds)
[18:55:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:55:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:57:21] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:57:39] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:57:56] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 252 seconds)
[18:58:02] *** Quits: taktoa[c] (sid282096@id-282096.tinside.irccloud.com) (Ping timeout: 240 seconds)
[18:59:28] *** Joins: __monty__ (~toonn@user/toonn)
[18:59:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:00:38] *** Joins: hook54321 (sid149355@user/hook54321)
[19:01:13] *** Joins: taktoa[c] (sid282096@id-282096.tinside.irccloud.com)
[19:01:18] *** Joins: gzj (~GZJ0X@216.24.178.99.16clouds.com)
[19:06:31] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[19:07:42] *** Quits: gzj (~GZJ0X@216.24.178.99.16clouds.com) (Remote host closed the connection)
[19:11:46] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:12:59] *** Joins: desantra (~skykanin@user/skykanin)
[19:14:06] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[19:14:34] <xsperry> > [ i | (i,'o') <- zip [0..] "hello world"]
[19:14:36] <lambdabot>  [4,7]
[19:17:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:17:17] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[19:17:34] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:18:50] *** Joins: johnjay (~pi@154.6.152.74)
[19:19:03] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[19:21:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:21:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:23:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:23:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:24:08] *** Joins: cheater (~Username@user/cheater)
[19:24:16] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[19:25:17] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[19:25:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:27:05] <bbear100> > guestFoo :: String -> Char -> [Int]
[19:27:06] <bbear100> guestFoo inputStr token = guestFoo' 0 inputStr token
[19:27:06] <bbear100>   where guestFoo' n (x:xs) token
[19:27:07] <bbear100>           | x == token = (n:(guestFoo' (n+1) xs token))
[19:27:07] <lambdabot>  error:
[19:27:07] <lambdabot>      Variable not in scope: guestFoo :: String -> Char -> [Int]
[19:27:07] <bbear100>           | otherwise = guestFoo' (n+1) xs token
[19:27:08] <bbear100>         guestFoo' _ null = null
[19:27:30] <bbear100> > guestFoo :: String -> Char -> [Int]
[19:27:30] <bbear100> > guestFoo inputStr token = guestFoo' 0 inputStr token
[19:27:31] <bbear100> >   where guestFoo' n (x:xs) token
[19:27:31] <lambdabot>  error:
[19:27:31] <bbear100> >         | x == token = (n:(guestFoo' (n+1) xs token))
[19:27:31] <lambdabot>      Variable not in scope: guestFoo :: String -> Char -> [Int]
[19:27:32] <lambdabot>  <hint>:1:25: error: parse error on input ‘=’
[19:27:32] <bbear100> >         | otherwise = guestFoo' (n+1) xs token
[19:27:32] <bbear100> >       guestFoo' _ null = null
[19:27:32] <lambdabot>  <hint>:1:3: error: parse error on input ‘where’
[19:27:33] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Remote host closed the connection)
[19:27:42] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[19:28:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[19:28:09] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[19:29:39] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Ping timeout: 252 seconds)
[19:32:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[19:34:21] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[19:35:25] <bbear100> Guest76 https://0bin.net/paste/1qYvulRI#Xu76HUnNZ88TgrVcjrmxhNwUL91uOvOIDqxA3ztb97J
[19:35:47] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[19:35:50] *** Quits: bbear100 (~bbear@2a01:e34:ec2b:d430:e0dd:e718:df68:1877) (Quit: Client closed)
[19:37:36] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:37:52] <gentauro> `While building package network-3.1.1.1 (scroll up to its section to see the error)` :S
[19:37:57] *** Joins: Farzad (~FarzadBek@185.212.51.70)
[19:37:58] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[19:38:13] <gentauro> no `lsp-haskell` on the `apple m1` :(
[19:39:01] <gentauro> I noticed that `stack` doesn't really care about `m1` unless you make an alias like: `stack='stack --arch=aarch64'`
[19:40:08] * gentauro even though I have added the `arch: aarch64` to `.stack/global-project/stack.yaml`
[19:41:41] <gentauro> perhaps I should aim for building it for the `rosetta x64` and execute it with emulation
[19:41:47] <gentauro> but, that would suck
[19:41:54] <gentauro> all network "emulated" :-\
[19:44:31] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 245 seconds)
[19:48:50] *** Joins: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi)
[19:50:16] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:53:58] <maerwald> gentauro: network package was fixed
[19:55:31] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:56:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:56:55] <maerwald> https://hackage.haskell.org/package/network-3.1.2.5/changelog
[19:58:22] <EvanR> Guest76, here's a helpful predefined list function
[19:58:27] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:58:38] <EvanR> > span (=='o') "hello world"
[19:58:39] <lambdabot>  ("","hello world")
[19:58:45] <EvanR> thonk
[19:58:52] <EvanR> > span (/='o') "hello world"
[19:58:54] <lambdabot>  ("hell","o world")
[19:58:59] <EvanR> > break (=='o') "hello world"
[19:59:01] <lambdabot>  ("hell","o world")
[19:59:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:02:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:02:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:03:20] *** Quits: connrs (~connrs@user/connrs) (Read error: Connection reset by peer)
[20:03:48] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[20:04:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[20:05:53] *** Joins: connrs (~connrs@user/connrs)
[20:06:17] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[20:08:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:09:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:10:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:10:50] *** Joins: hololeap_ (~hololeap@user/hololeap)
[20:11:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:11:15] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[20:11:38] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[20:12:53] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:f767:b15a:e5b1:96f0)
[20:13:44] *** Joins: pgib (~textual@173.38.117.87)
[20:15:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:15:43] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:16:21] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:16:39] *** Joins: neurocyte0132889 (~neurocyte@94.46.79.27)
[20:16:39] *** Quits: neurocyte0132889 (~neurocyte@94.46.79.27) (Changing host)
[20:16:39] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[20:17:52] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[20:21:29] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[20:22:42] *** Joins: notzmv (~zmv@user/notzmv)
[20:24:18] *** Quits: desantra (~skykanin@user/skykanin) (Read error: Connection reset by peer)
[20:27:28] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[20:28:05] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[20:29:56] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[20:30:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:30:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:30:00] *** Joins: wroathe (~wroathe@user/wroathe)
[20:30:18] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[20:31:40] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:32:36] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:33:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:34:11] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 252 seconds)
[20:35:00] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[20:35:04] *** Joins: deadmarshal (~deadmarsh@95.38.231.28)
[20:35:25] *** Joins: sebeko (uid530526@id-530526.helmsley.irccloud.com)
[20:36:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:45:09] *** Quits: tito (tito@tilde.team) (Quit: WeeChat 3.2.1)
[20:45:14] *** Joins: renzhi (~xp@2607:fa49:6500:b100::5cef)
[20:46:27] *** Joins: tito (tito@tilde.team)
[20:49:58] <dsal> Hey, someone fixed the compiler on my mac.  Thanks, someone.
[20:50:24] <Franciman> \o/
[20:50:26] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[20:50:39] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[20:51:09] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:53:15] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[20:58:05] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[20:58:46] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:02:26] <EvanR> is your compiler running?
[21:02:31] <EvanR> better catch it
[21:02:47] <juri_> my compiler is too lazy to run.
[21:03:43] *** Joins: jakalx (~jakalx@base.jakalx.net)
[21:03:53] *** Quits: deadmarshal (~deadmarsh@95.38.231.28) (Ping timeout: 256 seconds)
[21:06:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:07:37] *** Joins: econo (uid147250@user/econo)
[21:08:00] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[21:08:17] *** Quits: axeman (~quassel@2a02:8109:a3c0:b10:91ce:4409:54:e379) (Ping timeout: 252 seconds)
[21:09:41] <dsal> I have no idea what my compiler is doing.  Benchmarks are varying so wildly that it could be doing anything.
[21:09:55] <Franciman> dsal: writing a compiler for your language?
[21:10:48] <dsal> No, just doing AoC stuff.  But when I try to speed something up, it just sort of goes random.
[21:11:07] <dsal> Benchmarks I was running last night in 500ms are now taking 14s -- in code I didn't change.
[21:11:19] <dsal> This didn't seem to change when I moved away from rosetta.
[21:11:37] <Franciman> dsal: did you learn about STG machine?
[21:11:40] <Franciman> et similia
[21:11:59] <Franciman> this seems to help understanding what goes on
[21:13:38] <sebeko> Was there a separate channel for haskell AoC?
[21:14:46] <dsal> Franciman: Not sure what that is.
[21:15:08] <dsal> It's getting voodoo for me, though.  All I've done since last night was plugged my computer in and moved it to a different room.
[21:15:21] <Franciman> if you speak italian, we are discussing them in #haskell-it-offtopic
[21:15:37] <Franciman> same, dear dsal. same T.T
[21:15:38] <dsal> I've since also shifted to a native compiler, but that doesn't seem to be an issue.
[21:15:50] <Franciman> optimisation is _hard_
[21:16:53] *** Joins: abccgr (abccgr@117.194.180.165)
[21:16:55] <dsal> I'd be fine if it were at least *consistent*.  :)
[21:16:59] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[21:16:59] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[21:16:59] *** finn_elija is now known as FinnElija
[21:17:15] <Franciman> are you optimizing haskell, dsal ?
[21:17:18] <sebeko> dsal: you can always try running on linux (say online) and see if it is at all caused by your machine
[21:18:04] <dsal> I've got a thinkpad next to me.  It seems way  happier.
[21:18:24] <dsal> Franciman: I was trying to, but doing it with inconsistent benchmarks is a really dumb idea.
[21:19:04] <dsal> A few years ago, I was doing this and my (intel) mac was consistently faster than my Linux machine.
[21:19:58] <Franciman> do you use criterion for getting some statistcal info 
[21:20:01] <Franciman> ?
[21:20:39] <dsal> Yeah
[21:20:48] <Franciman> i see
[21:20:52] <sebeko> You could also bench functions separately to bisect the problem I think 🤔
[21:20:55] <dsal> But it's not subtle at all.
[21:21:07] <dsal> Literally zero changes, went from 500ms to 13s
[21:21:11] <dsal> ~14s
[21:21:41] <dsal> The only thing that actually changed was plugging in my laptop.
[21:21:56] <dsal> Switching compilers off of rosetta didn't help, but it didn't hurt, so... OK?
[21:22:03] <dsal> But I'm going to stop thinking about this.  :)
[21:22:23] <Franciman> lol
[21:22:26] <Franciman> awesum
[21:22:27] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[21:22:29] <Franciman> this may be a bug
[21:22:41] <sebeko> When I was going crazy from something like this, the problem was I saved the file :D
[21:22:50] <Franciman> lol
[21:23:44] <gentauro> 17:26 < maerwald> https://hackage.haskell.org/package/network-3.1.2.5/changelog
[21:24:05] <gentauro> maerwald: I have to jump on the GHC-901 wagon :o https://www.stackage.org/lts-18.18/package/network-3.1.1.1
[21:25:00] <gentauro> maerwald: might be the right thing to do as LTS is not really working properly on the M1 anyway xD
[21:26:08] <InternetCitizen> if I want to use something like Megaparsec or attoparsec, do I have to use cabal/stack?
[21:26:43] <Franciman> not necessarily, but it would be much easier yes
[21:27:01] <InternetCitizen> I'm not too sure how Haskell dependency management works, I know I can just use stack but this is a simple AOC problem and I'd really like to simply compile my code with plain old GHC and a makefile
[21:27:11] <sebeko> Have to? No I think there is ghc-pkg or something
[21:27:36] <sebeko> Cabal has yaml files and is very easy to setup for aoc
[21:27:59] <sebeko> there are even templates on reddit ;)
[21:29:00] <InternetCitizen> I see, maybe I will just use Parsec
[21:29:31] <Franciman> InternetCitizen: if you have cabal installed
[21:29:50] <Franciman> cabal has a much lighter way than stack at getting you started in this case
[21:30:08] <Franciman> the chief problem of not using cabal is that attoparsec and megaparsec have their dependencies
[21:30:13] <Franciman> so you have to also compile them
[21:30:45] <Franciman> of not using cabal/stack*
[21:30:52] <Franciman> yeah parsec is a good tradeoff
[21:34:26] *** Joins: hololeap (~hololeap@user/hololeap)
[21:34:57] *** Quits: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[21:35:06] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[21:35:07] <EvanR> dsal, first, performance something that runs very quickly can be very sensitive to OS conditions. Like memory cache, i/o cache, other processes
[21:35:54] <EvanR> second, to get a feel for what's happening you might want to accumulate a lot of samples and check mean and std deviation
[21:35:57] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:36:11] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:36:38] <EvanR> I don't know how deterministic the GC is either
[21:39:35] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[21:40:21] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[21:41:38] *** Joins: hololeap (~hololeap@user/hololeap)
[21:42:06] <dsal> gentauro: I've mostly been having good luck with LTS on m1.  This new machine has had a few oddities.
[21:43:51] *** Joins: axeman (~quassel@2a02:8109:a3c0:b10:9fd2:9b38:d0eb:7d85)
[21:44:10] <dsal> My problem seems to be some kind of linker madness.
[21:44:57] *** Joins: dhruvasagar (~dhruvasag@49.207.222.205)
[21:45:42] <dsal> If I roll back to an older version of my code before I added a new benchmark, I get ~400ms on this benchmark.
[21:45:52] <dsal> Ha, then I rolled it forward and now it's ~600ms.
[21:55:01] *** Joins: deadmarshal (~deadmarsh@95.38.231.28)
[21:57:05] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[21:57:53] <janus> InternetCitizen: if you use cabal/scripts or files, you can have each AoC day be self-contained. no need for separate configuration files
[21:58:34] <janus> you just stick a header on each day speciying its dependencies, then cabal/stack can run it
[21:59:05] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Remote host closed the connection)
[22:00:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:00:46] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[22:01:04] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:01:38] *** Quits: deadmarshal (~deadmarsh@95.38.231.28) (Ping timeout: 252 seconds)
[22:02:10] *** Joins: Lycurgus (~juan@98.4.112.204)
[22:03:02] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:06:13] *** Joins: notzmv (~zmv@user/notzmv)
[22:07:04] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[22:09:07] <EvanR> "don't attempt to mutate vector after unsafeThaw unless you know how to prevent GHC from aliasing buffers accidentally. We don't" xD
[22:09:58] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[22:10:35] <InternetCitizen> janus: I'm not very familar with the header technique ...
[22:10:42] <InternetCitizen> what does it onsist of?
[22:11:19] <janus> InternetCitizen: look at https://cabal.readthedocs.io/en/latest/cabal-commands.html#cabal-v2-run and scroll down to "v2-run also supports running script files"
[22:11:39] <InternetCitizen> thank you very much
[22:12:05] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[22:13:48] <EvanR> it's pretty convenient, except for the initial delay to run the file
[22:14:36] <EvanR> though when iterating AoC attempts you have to recompile and relink anyway
[22:16:29] *** Quits: jkaye (~jkaye@2601:281:8300:7530:5a4f:5910:1ea1:e61f) (Ping timeout: 252 seconds)
[22:17:01] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:17:58] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:19:19] *** Quits: mbuf (~Shakthi@122.174.197.155) (Quit: Leaving)
[22:19:47] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[22:21:27] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:21:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:22:08] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.3)
[22:22:23] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:23:09] <raehik> Which of Nat and Natural should I use for easy type-level naturals? on Hackage it sounds like they've been merged recently, maybe? but there are Integer <-> Natural funcs but none for Nat
[22:25:59] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:26:11] *** Quits: bradparker (sid262931@uxbridge.irccloud.com) (Read error: Connection reset by peer)
[22:26:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:26:20] *** Joins: bradparker (sid262931@id-262931.uxbridge.irccloud.com)
[22:29:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:30:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:30:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:31:03] <awpr> before the merge, `Natural` was not possible to use at type level.  if you care about compatibility with GHC < 9.2, `Nat` is the only choice
[22:31:30] <awpr> if you're writing an application that only needs to build with GHC 9.2+, there's no difference between the two (it's literally `type Nat = Natural`
[22:32:18] <awpr> ah, it's been a few minutes, since that message, so I'll ping: raehik 
[22:32:47] *** Joins: Cajun (~Cajun@user/cajun)
[22:32:59] <raehik> awpr: ahhhh. I see, it's because I hadn't actually being using Natural at the type level until now, just with datakinds
[22:33:28] <raehik> ahhhh and it's because I'm on Stack GHC which isn't 9.2 yet >:(
[22:34:01] <awpr> hmm, DataKinds is exactly about promoting term-level data to type level, so I don't understand the last message
[22:34:57] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:35:39] <awpr> hmm... GHC 8.6.5 actually accepts using `Natural` as a kind.  but maybe it's impossible to construct a type-level thing of that kind?
[22:35:48] <raehik> ah sry I mean typefamilies then. I wasn't putting Naturals in the type level but they got returned by a type family, and I had slightly confused myself
[22:36:20] <raehik> and just now yeah, I used it as a kind. but as you say, hadn't tried constructed a type level one
[22:36:48] <awpr> ah right, indeed that wouldn't have required the unified Nat/Natural yet
[22:37:23] *** Quits: max22- (~maxime@2a01cb0883359800ca908bdf23b4cd25.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[22:38:35] <raehik> so I'll use Natural everywhere I can, and Nat for while I can't upgrade to GHC 9.2. until Stackage moves their nightlies
[22:38:38] <raehik> thx awpr !
[22:39:46] *** Quits: axeman (~quassel@2a02:8109:a3c0:b10:9fd2:9b38:d0eb:7d85) (Quit: No Ping reply in 180 seconds.)
[22:40:18] <awpr> yeah, the only thing I know of that this unification _really_ changes is the ability to use the same definition for term and type level: `data Thing = Thing Natural` pre-unification can't be promoted usefully, it'd have to be `data Thing a = Thing a` and `type TermThing = Thing Natural` and `type TypeThing = Thing Nat` to treat them differently
[22:40:31] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[22:41:00] <awpr> so if you don't need to do that very specific thing, I think it shouldn't affect you and you should be fine just using `Nat` for type-level and `Natural` for term-level
[22:41:01] *** Joins: axeman (~quassel@2a02:8109:a3c0:b10:c575:40eb:1f86:4317)
[22:41:05] *** Joins: AlexNoo_ (~AlexNoo@178.34.151.83)
[22:41:07] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[22:41:26] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[22:41:28] *** Joins: FarzadBekran_ (~FarzadBek@185.212.51.70)
[22:41:44] <raehik> what do you mean by promotion - is that something GHC can do? (I only know that from singletons)
[22:42:24] <awpr> promotion is the term for what DataKinds enables: if `data Thing = MkThing`, then `x :: Proxy MkThing` uses the promoted data constructor `MkThing`
[22:42:43] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[22:42:56] *** Joins: Techcable_ (~Techcable@168.235.93.147)
[22:43:03] <janus> i think you can use stack with newer compilers, you just have to put extra-deps for every single dep that is broken in the snapshot you use
[22:43:33] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[22:44:04] <awpr> (there isn't any built-in promotion of normal functions, only data constructors)
[22:44:26] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 256 seconds)
[22:44:40] *** Quits: AlexNoo (~AlexNoo@178.34.151.83) (Ping timeout: 256 seconds)
[22:44:41] <awpr> re janus yes, I've built all the packages I maintain under Stack with 9.2, with a moderate amount of effort in manually fiddling with dependencies
[22:45:00] <awpr> so it's definitely possible if you really must have new features for any reason
[22:45:07] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:45:49] *** Quits: Farzad (~FarzadBek@185.212.51.70) (Ping timeout: 256 seconds)
[22:49:29] *** Quits: pgib (~textual@173.38.117.87) (Ping timeout: 252 seconds)
[22:51:09] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[22:56:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:56:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:58:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:58:48] *** Quits: abccgr (abccgr@117.194.180.165) (Remote host closed the connection)
[22:58:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:59:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[23:01:55] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0)
[23:02:03] *** Quits: thevishy (~Nishant@2405:201:f005:c007:fd4c:a570:99e4:8844) (Quit: Leaving)
[23:02:29] *** Joins: max22- (~maxime@2a01cb08833598006b46964008321399.ipv6.abo.wanadoo.fr)
[23:03:32] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Ping timeout: 240 seconds)
[23:04:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[23:07:09] <janus> how do i find out which package a symbol is exported from?
[23:07:46] <janus> when i do ":t (.:)" it says aeson, but i believe that the symbol is reexported from another library, because i didn't do ":m +Data.Aeson"
[23:09:39] <boxscape> janus: maybe try misspelling it, ghc might suggest the correct spelling along with where it's imported from
[23:10:26] <boxscape> % joiin -- example
[23:10:26] <yahb> boxscape: ; <interactive>:14:1: error:; * Variable not in scope: joiin; * Perhaps you meant `join' (imported from Control.Monad)
[23:11:24] <dmj`> janus: you can use PackageImports to be explicit about it, import "base" Control.Monad   (forM_)
[23:12:27] <boxscape> (also if ghc finds that something is a valid holefit it will also say from where it's imported)
[23:18:29] *** Joins: jkaye (~jkaye@2601:281:8300:7530:3bdb:266b:f9cc:b3bc)
[23:19:43] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Read error: Connection reset by peer)
[23:20:21] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[23:20:39] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[23:22:58] <__monty__> Is there a function like enumFromTo/([x..y]) but that does descending ranges too without resorting to enumFromThenTo?
[23:23:32] <__monty__> I mean, without explicitly doing so, if the function internally uses enumFromThenTo, that's fine.
[23:24:50] <pragma-> the full monty
[23:24:53] <tomsmeding> enumImplicitFromTo x y = if y < x then enumFromThenTo x (x - 1) y else enumFromTo x y
[23:25:03] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 252 seconds)
[23:25:26] * gentauro `You are using snapshot: nightly-2021-12-04`
[23:25:29] * gentauro `stack ghci`
[23:25:46] * gentauro `ghci> /private/tmp/nix-shell-96787-0/rc: line 3: 96791 Segmentation fault: 11  '/usr/local/bin/stack' $STACK_IN_NIX_EXTRA_ARGS '--internal-re-exec-version=2.7.3' '--arch=aarch64' 'ghci'`
[23:25:50] <gentauro> LEL
[23:25:57] <gentauro> I guess it's a no HaskLEL on the M1 ..
[23:26:44] <gentauro> why can't Levondo deliver laptops like in a timely manner? (end of Q1 2022 / start Q2 2022) #firstworldproblems
[23:27:02] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[23:27:16] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:27:17] <__monty__> tomsmeding: I know the implementation is very simple, just seems like a silly thing to need to implement. I'd probably do reverse [y..x] though, doesn't rely on them being Num per se : )
[23:27:48] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[23:28:12] <monochrom> It also relies on Ord. "y<x"
[23:28:36] <tomsmeding> __monty__: right, 'pred x' is better than 'x - 1'
[23:28:51] <monochrom> After a while, you realize that it relies on so many externalities, you begin to appreciate how, at least, it doesn't belong in Enum.
[23:28:52] <tomsmeding> reduces constraints from Num+Ord+Enum to Ord+Enum
[23:28:57] <EvanR> reverse destroys your laziness
[23:31:19] <EvanR> > [0 % 1 .. 5 % 1]
[23:31:21] <lambdabot>  [0 % 1,1 % 1,2 % 1,3 % 1,4 % 1,5 % 1]
[23:31:26] <EvanR> > [0 % 2 .. 5 % 2]
[23:31:28] <lambdabot>  [0 % 1,1 % 1,2 % 1,3 % 1]
[23:31:44] <EvanR> what is 'Enum' supposed to be anyway xD
[23:31:58] <tomsmeding> isn't that like the prime complaint about the class
[23:32:01] <tomsmeding> that the semantics are unclear
[23:32:15] <tomsmeding> > [1.2 .. 4.5]
[23:32:16] <lambdabot>  [1.2,2.2,3.2,4.2]
[23:32:34] <tomsmeding> at least Ratio's implementation is consistent with Double's
[23:33:15] <EvanR> > [0/2 .. 5/2]
[23:33:16] <lambdabot>  [0.0,1.0,2.0,3.0]
[23:33:22] <EvanR> overshoot
[23:33:22] <tomsmeding> wait wat
[23:33:29] <tomsmeding> ok the overshoot is consistent
[23:33:31] <tomsmeding> but wat
[23:33:47] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0) (Remote host closed the connection)
[23:34:09] <EvanR> "I'm going to add 1 and you can't stop me!!!"
[23:34:59] <tomsmeding> > ([1.0 .. 3.4], [1.0 .. 3.6])
[23:35:01] <lambdabot>  ([1.0,2.0,3.0],[1.0,2.0,3.0,4.0])
[23:35:05] <tomsmeding> why does it round
[23:35:08] <tomsmeding> that makes no sense at all
[23:35:11] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:35:26] <EvanR> oof
[23:36:06] <tomsmeding> I'm still not quite convinced the Enum class is useless as a whole, but that Double instance is just plain madness
[23:36:32] <c_wraith> I still believe the only correct instance for Float and Double counts the number of ulps you increment by
[23:36:40] <__monty__> tomsmeding: Right, that's even better.
[23:36:47] *** Joins: juhp (~juhp@128.106.188.82)
[23:36:59] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:bde9:c3fb:c9c:3dee)
[23:37:00] <c_wraith> No one would ever use it then, because it would be obviously wrong for their case, instead of non-obviously wrong
[23:37:27] <__monty__> monochrom: Didn't say it belongs in Enum. Just the kind of relatively common thing I'd expect in a common (probably base) library.
[23:37:34] <EvanR> something about a functor from category of reals to category of integers wrt ordering
[23:38:11] <EvanR> nvm lol
[23:38:33] <tomsmeding> what are the objects and morphisms in a category of integers :p
[23:39:01] <EvanR> (objects are integers, x < y would be a morphism if it were true
[23:40:10] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6)
[23:40:15] <EvanR> if someone said give me an mapping from Int to Double, that might leaves some questions.
[23:40:31] <tomsmeding> EvanR: https://ncatlab.org/nlab/show/partial+order#AsACategoryWithExtraProperties
[23:40:32] <EvanR> (an injective mapping)
[23:40:38] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:ed9e:6da6:fee6:2db6) (Ping timeout: 252 seconds)
[23:42:18] <EvanR> > toEnum 50 :: Float
[23:42:19] <lambdabot>  50.0
[23:42:31] <EvanR> > toEnum 500000000 :: Float
[23:42:32] <lambdabot>  5.0e8
[23:42:37] <EvanR> come on..
[23:43:13] <EvanR> > toEnum (maxBound `div` 2) :: Float
[23:43:14] <lambdabot>  4.611686e18
[23:43:23] <EvanR> > maxBound `div` 2
[23:43:24] <lambdabot>  error:
[23:43:24] <lambdabot>      • Ambiguous type variable ‘a0’ arising from a use of ‘show_M806950334028...
[23:43:24] <lambdabot>        prevents the constraint ‘(Show a0)’ from being solved.
[23:43:25] *** Joins: Sgeo (~Sgeo@user/sgeo)
[23:43:29] <EvanR> > maxBound `div` 2 :: Int
[23:43:30] <lambdabot>  4611686018427387903
[23:43:39] <EvanR> look look it's wrong!
[23:45:18] <EvanR> I guess you can think of it as a fuzzy or noisy association between Int and floats
[23:46:06] <EvanR> the farther you go the worse it gets like a hyperbolic plane
[23:48:15] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6) (Quit: gone to sleep. ZZZzzz…)
[23:48:39] <tomsmeding> > fromEnum (toEnum 10000000000000000 :: Float)  -- EvanR possibly clearer example
[23:48:40] <lambdabot>  10000000272564224
[23:49:19] *** sm[i]_ is now known as sm[i]
[23:49:20] *** Quits: sm[i] (~user@li229-222.members.linode.com) (Changing host)
[23:49:20] *** Joins: sm[i] (~user@plaintextaccounting/sm)
[23:49:56] <tomsmeding> injective mapping from Int64 to either Float or Double would be impossible by the pigeonhole principle, and the fact that 0.0 == -0.0 :p
[23:51:05] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[23:51:14] <EvanR> > show (100 * (10000000272564224 - 10000000000000000) % 10000000000000000) ++ "%" 
[23:51:16] <lambdabot>  "16636 % 6103515625%"
[23:51:20] <EvanR> close enough xD
[23:52:13] <EvanR> > showFFloat (Just 9) (16636/6103515625) ""
[23:52:15] <lambdabot>  "0.000002726"
[23:52:34] <tomsmeding> you can kind of see that from the numbers already :p
[23:52:43] <EvanR> lol
[23:52:44] <tomsmeding> point of it being a power of 10
[23:53:16] <EvanR> morally injective
[23:54:12] <Profpatsch> How do we know any of the streaming/Bundle stuff in the implementation of Vector actually does anything?
[23:54:14] <tomsmeding> > fromEnum (toEnum 8000000000000000001 :: Double)
[23:54:16] <lambdabot>  8000000000000000000
[23:54:19] <EvanR> pigeonhole though? there are 2^64 Int64s, but less than that Doubles
[23:54:27] <EvanR> oh I see
[23:54:34] <Profpatsch> There’s a lot of undocumented magic that seems to be hoping that fusion happens
[23:54:36] <tomsmeding> EvanR: Double is a 64 bit value :p
[23:54:50] <EvanR> a lot of values are reserved and don't represent numbers
[23:55:08] <EvanR> to be exploited for fun and profit
[23:55:10] <Profpatsch> How would I verify it actually does something as pertaining to speed?
[23:55:14] <tomsmeding> Profpatsch: you might want to try the -ddump-rule-firings option to GHC
[23:55:45] <Profpatsch> But e.g. aeson returns a Vector from its Array type
[23:55:57] <tomsmeding> and perhaps -fno-enable-rewrite-rules to compare
[23:56:12] <Profpatsch> Now, looking at its code
[23:56:14] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:56:26] <tomsmeding> https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/exts/rewrite_rules.html?highlight=enable%20rewrite%20rules#rewrite-rules
[23:56:46] <Profpatsch> https://hackage.haskell.org/package/aeson-2.0.2.0/docs/src/Data.Aeson.Parser.Internal.html#arrayValues
[23:57:16] <Profpatsch> It *still* constructs a list, then converts it to a Vector (O(n)), then reverses the vector (O(n) again)
[23:57:38] <Profpatsch> And then the question remains whether the underlying data is actually garbage collected in the end
[23:58:06] <Profpatsch> It does pass the length to the list to the vector library
[23:58:17] <tomsmeding> Profpatsch: I would bet that reverse . fromListN is getting fused -- that's kind of the point of the rules. But try -ddump-rule-rewrites.
[23:58:19] <Profpatsch> But god knows what the performance improvementes of that are
[23:58:20] <EvanR> yeah, does aeson's parser depend on the input bytestring later, or is everything copies out
[23:58:30] <EvanR> copied
[23:58:33] <Profpatsch> vector certainly doesn’t document it
[23:58:39] <tomsmeding> and see the docs page I linked
[23:59:40] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0)
[23:59:43] <EvanR> I guess it can't really use the input string directly because of string escapes
[23:59:44] <Profpatsch> tomsmeding: thing is, I know how rewrite rules work roundabout. But I don’t trust whether Vector actually works as advertised
[23:59:52] <tomsmeding> then check :p
[23:59:53] <Profpatsch> And even then it doesn’t document anything
