[00:00:06] *** Joins: olle (~olle@i5E866D81.versanet.de)
[00:07:27] *** Quits: hh (~g@37.214.44.190) (Remote host closed the connection)
[00:11:24] *** Joins: newwebdev132 (~newwebdev@78.135.91.144)
[00:12:37] *** Quits: newwebdev13 (~newwebdev@31.210.55.200) (Ping timeout: 240 seconds)
[00:14:03] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[00:14:41] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[00:20:32] <ramblebamble> Hiho, I have a rather peculiar question, is there a way to have a PHP -type being s.th. more sturdy and generic of a type? I know that xxxxx::class is a string gettype(new Exception()) is an object and gettype([]) is an array, is there something more general that can encapsulate all those type informations or is there a generic root datatype? like Throwabe for Error and Exception?
[00:22:26] <__adrian> "is there a generic root datatype"  no
[00:22:43] <__adrian> https://php.net/types
[00:23:26] <__adrian> i'm not sure i understand the rest of your question, though.
[00:23:28] <biberu> what does sturdy and generic mean in this context?
[00:27:52] <AllenJB> ramblebamble: It may help if you explain what you're trying to achieve / do rather than how you think you want to achieve it
[00:28:21] *** Joins: newwebdev13 (~newwebdev@31.210.55.74)
[00:28:50] <ramblebamble> biberu, __adrian, I figgured as much just thought I cover my bases in case I was not aware of s.th.  sturdy and generic --> did not how else to describe it, pretty much being able to hold type information in any form and being able to describe adequatly. currently in a situation where I require the ability to describe any possible complex, non-dynamic, datatype that describes information that can be
[00:28:53] <ramblebamble> transported, so that leaves me with arrays and objects as enumerations taken care of in Code, resources are not serializeable, storable, transmissable, and the rest is simple
[00:29:19] <ramblebamble> AllenJB, tinkering around with decoding and I thinking of ways to store/retrieve type information
[00:29:36] <ramblebamble> and no serializing is not an option ...
[00:29:59] *** Quits: newwebdev132 (~newwebdev@78.135.91.144) (Ping timeout: 256 seconds)
[00:30:09] <ramblebamble> s/"I thinking"/"I am thinking"/
[00:30:59] <ramblebamble> Thanks for the feedback guys
[00:31:06] *** Quits: guido (~weechat@host-82-61-186-115.retail.telecomitalia.it) (Quit: WeeChat 3.4)
[00:32:07] <biberu> ramblebamble: arrays and objects can hold resources
[00:32:39] <ramblebamble> biberu, yes, but the way I am describing it it won't be a problem.
[00:35:45] <biberu> ramblebamble: i still don't understand what you're doing. why do you mean by serializing not being an option, because that sounds like what you're doing, are you talking about the php.net/serialize rather than the concept?
[00:36:02] <biberu> what's your end goal?
[00:36:49] <biberu> s/why/what
[00:36:50] <ramblebamble> the arbitrary object thing is hard enough to get right as it is and I cannot simply work on strings because of arrays, unless I can represent the array type as a string as well similar to Exception::class
[00:37:31] <ramblebamble> I am not talking about serialization because that implies that the data is tied to an object as the dataformat holds the type-information
[00:37:36] <ramblebamble> it is rather a mapping of sorts
[00:38:39] <biberu> a mapping between what things?
[00:39:14] <biberu> perhaps an example would make it easier to understand
[00:42:40] <da_wunder> yep, 3v4l.org example would most likely help a lot
[00:44:02] <ramblebamble> the problem I have is not tied to what I try to achive per se. And can be described without the endgoal. How can I describe the datatypes of the allowed types (s.a.) in a scalable fashion? And thanks to us talking I found the solution. Since Exception::class is a string, I can represent the array datatype as string as well, I just have no way of eliciting it from PHP via a similar mean like '::class'
[00:44:05] <ramblebamble> and will have to ask that it is written as a string like 'array'.... That
[00:44:32] <ramblebamble> is not pretty IMHO but will get the job done and scale
[00:47:10] <biberu> perhaps it can be explained without context, but i sure am not getting why you're trying to what ¯\_(ツ)_/¯
[00:48:27] <ramblebamble> why? because I am bored and can do it, even if I have , let's call them hiccups, the way. What? Let's just say Metaprogramming.
[00:49:05] <ramblebamble> s/"the way"/"along the way"/
[00:53:09] *** Quits: uhu (~uhu@2a01:4f9:c010:1087::2) (Excess Flood)
[00:53:29] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[00:58:17] *** Joins: Robotico (~101@8.red-83-56-167.dynamicip.rima-tde.net)
[00:59:20] *** Joins: uhu (~uhu@static.101.168.216.95.clients.your-server.de)
[01:01:02] *** Quits: Robotico (~101@8.red-83-56-167.dynamicip.rima-tde.net) (Client Quit)
[01:34:21] *** Quits: glider (~glider@user/glider) (Quit: ZNC - https://znc.in)
[01:42:23] *** Joins: glider (~glider@user/glider)
[01:45:36] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[02:06:50] <olle> Hm, you can't capture array by ref in short-hand fn?
[02:06:59] <olle> Or did I already ask that yesterday?
[02:15:56] <olle> OK, I'll just use SplStack instead
[02:18:32] *** Joins: pmercado (~pmercado@186.107.49.217)
[02:19:54] <ramblebamble> olle you can $k = fn(array $x) => $x[0]; var_dump($k([3,4,5]));
[02:20:48] <olle> No, won't work in my case
[02:20:54] <ramblebamble> what is your case?
[02:21:32] <olle> ramblebamble: https://paste.centos.org/view/5942bf7c
[02:24:05] <ramblebamble> Ah that type of reference, use a regular lambda function and using and you will be able to
[02:24:45] <ramblebamble> except for some things, arrow-functions behave like anonymous functions for all intents and purposes
[02:25:28] <ramblebamble> you can use all variables of the closure within an arrow-function, but to change them you will have to access them via reference, and I don't know if arrow-functions support use(I doubt it though)
[02:25:50] <ramblebamble> just do a function() use (&$randomUsers){...} and you should be fine
[02:26:30] <olle> ramblebamble: it also works with SplStack, since it's passed by-ref automatically
[02:28:46] <ramblebamble> yes, but your question implies that you do not know what datatypes are passed via reference and which one's are not. that is why I wrote this
[02:28:55] <ramblebamble> $k =[];(function() use(&$k) { array_push($k, 333);})(); var_dump($k);
[02:29:42] <olle> Ah
[02:44:02] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: quick everyone out of the universe)
[02:45:42] <__adrian> * short closures don't support use-by-ref * passing by ref has nothing to do with the data type * objects are not "passed by reference" * you usually don't actually need to pass by ref and should generally avoid it
[02:47:41] <olle> __adrian: objects are not passed by ref?
[02:48:00] <olle> They certainly ain't value types tho :)
[02:49:18] <__adrian> !+lies
[02:49:18] <php-bot> Objects are *not* references, read http://bit.ly/hpUAci and/or https://github.com/php/php-src/blob/master/Zend/RFCs/001.txt
[02:50:07] <__adrian> the practical effect is similar (you're operating on the same object instance, because it would not make sense if you weren't), but the var itself is passed by value, just like any other
[02:51:45] <olle> __adrian: Isn't that the difference between pointers and references?
[02:52:15] *** Quits: doubleplusuncool (~doubleplu@user/doubleplusuncool) (Quit: Lost terminal)
[02:52:17] <__adrian> what php calls "references" are not what other languages call references. don't try to compare; it's only confusing
[02:52:34] <olle> Alright
[02:53:10] <olle> __adrian: Second link is 404 btw
[02:53:29] <__adrian> when you do $obj = new Something; the value assigned there is not theobject instannce itself. it's an id.
[02:53:57] <__adrian> which is then used for a lookup.
[02:54:47] <olle> Oh? Hm
[02:54:54] <__adrian> so passing by ref or by value have the same effect, because "lookup object id #5" give the same instance regardless of whether "#5" was passed by ref or by value.
[02:55:19] <__adrian> bbl.
[02:55:23] <olle> \o
[03:01:54] *** Quits: pmercado (~pmercado@186.107.49.217) (Ping timeout: 272 seconds)
[03:02:27] *** Joins: mintoyatsu (~mint@user/mintoyatsu)
[03:03:39] <olle> Hm, so no one made a state container for PHP, huh?
[03:09:47] *** Joins: LenarHoyt (~LenarHoyt@p200300eec717e00014422938717dfa86.dip0.t-ipconnect.de)
[03:21:22] *** Quits: olle (~olle@i5E866D81.versanet.de) (Ping timeout: 256 seconds)
[03:30:57] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[03:46:22] *** Quits: ms49434 (~ms49434@user/ms49434) (Quit: Leaving)
[03:51:16] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:54:14] *** Quits: LenarHoyt (~LenarHoyt@p200300eec717e00014422938717dfa86.dip0.t-ipconnect.de) (Quit: Client closed)
[04:03:03] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 256 seconds)
[04:37:26] *** Quits: bodiccea (~bodiccea@user/bodiccea) (Read error: Connection reset by peer)
[04:37:48] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[04:39:57] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Ping timeout: 240 seconds)
[05:24:12] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[05:31:21] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:32:39] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[05:33:54] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Ping timeout: 272 seconds)
[05:38:58] *** Joins: KnowledgeShark (~Knowledge@50.34.198.222)
[05:56:57] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[06:28:07] *** Quits: newwebdev13 (~newwebdev@31.210.55.74) (Quit: Leaving)
[06:32:56] *** Joins: vlm (~vlm@user/vlm)
[06:40:34] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[06:44:29] *** Joins: Rockwood (~Rocky@user/rocky)
[07:02:27] *** Joins: jgrim (~jgrim@d199-74-109-78.col.wideopenwest.com)
[07:05:26] *** Joins: doubleplusuncool (~doubleplu@user/doubleplusuncool)
[07:29:25] *** Joins: mactron (~mactron@cpe-146-212-96-217.dynamic.amis.net)
[07:29:45] <mactron> ,
[07:31:05] <Rockwood> o/
[07:32:57] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 240 seconds)
[07:33:06] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[07:36:30] *** Quits: mactron (~mactron@cpe-146-212-96-217.dynamic.amis.net) (Quit: WeeChat 3.4)
[07:37:41] *** Joins: boubou (~boubou@hide.my.ip.upsidehosting.com)
[07:38:10] *** Joins: mactron (~mactron@cpe-146-212-96-217.dynamic.amis.net)
[07:39:38] *** Quits: mactron (~mactron@cpe-146-212-96-217.dynamic.amis.net) (Client Quit)
[07:53:47] *** Joins: mactron (~mactron@cpe-146-212-96-217.dynamic.amis.net)
[08:01:38] *** Quits: mactron (~mactron@cpe-146-212-96-217.dynamic.amis.net) (Quit: WeeChat 3.4)
[08:06:21] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[08:26:49] *** Quits: zauberfisch (~Zauberfis@cm147-42.liwest.at) ()
[08:56:46] *** Joins: zauberfisch (~Zauberfis@cm147-42.liwest.at)
[09:02:21] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[09:15:34] *** Joins: guido (~weechat@host-79-18-248-149.retail.telecomitalia.it)
[09:34:17] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 240 seconds)
[09:34:36] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[10:41:36] *** Joins: meder (~meder@c-65-34-244-236.hsd1.fl.comcast.net)
[10:56:40] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:00:08] *** Joins: Junxter (~Junxter@222.95.164.193)
[11:12:42] *** Joins: genom (~g@37.214.44.190)
[11:18:58] *** Joins: fef (~thedawn@user/thedawn)
[11:33:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[11:34:10] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[11:34:41] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 256 seconds)
[11:36:52] *** Joins: Bencraft (~Bencraft@user/Bencraft)
[11:38:56] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[11:45:36] *** Joins: fef (~thedawn@user/thedawn)
[11:52:06] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[11:53:46] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[11:54:54] *** Quits: px4n (~px4n@user/px4n) (Remote host closed the connection)
[12:02:38] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[12:03:39] *** Joins: px4n (~px4n@user/px4n)
[12:04:01] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[12:04:05] *** Joins: fef (~thedawn@user/thedawn)
[12:05:28] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[12:27:11] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[12:35:04] *** Quits: meder (~meder@c-65-34-244-236.hsd1.fl.comcast.net) (Ping timeout: 272 seconds)
[12:35:25] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:42:26] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[12:43:12] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Client Quit)
[12:51:32] *** Quits: mjsir911 (~bnc@user/mjsir911) (Quit: Goodbye, World!)
[12:51:47] *** Joins: mjsir911 (~bnc@user/mjsir911)
[13:19:30] *** Quits: kristijonas (~kristijon@78-56-32-39.static.zebra.lt) (Read error: Connection reset by peer)
[13:19:30] *** Quits: kristijonas_ (~kristijon@78-56-32-39.static.zebra.lt) (Read error: Connection reset by peer)
[13:20:17] *** Joins: kristijonas (~kristijon@78-56-32-39.static.zebra.lt)
[13:20:18] *** Joins: kristijonas_ (~kristijon@78-56-32-39.static.zebra.lt)
[13:23:06] *** Joins: olle (~olle@i5E866D96.versanet.de)
[13:24:10] *** Quits: BlackIkeEagle (~BlackIkeE@archlinux/trusteduser/blackikeeagle) (Quit: BlackIkeEagle)
[13:24:29] *** Joins: BlackIkeEagle (~BlackIkeE@archlinux/trusteduser/blackikeeagle)
[13:27:52] *** Quits: BlackIkeEagle (~BlackIkeE@archlinux/trusteduser/blackikeeagle) (Client Quit)
[13:35:23] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Ping timeout: 256 seconds)
[13:58:15] *** Joins: newwebdev13 (~newwebdev@31.210.55.74)
[14:01:49] *** Joins: BlackIkeEagle (~BlackIkeE@archlinux/trusteduser/blackikeeagle)
[14:02:58] *** Quits: newwebdev13 (~newwebdev@31.210.55.74) (Read error: Connection reset by peer)
[14:08:09] *** Joins: newwebdev13 (~newwebdev@78.135.92.22)
[14:10:58] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Remote host closed the connection)
[14:12:57] *** Joins: mintoyatsu (~mint@user/mintoyatsu)
[14:32:16] *** Quits: zauberfisch (~Zauberfis@cm147-42.liwest.at) ()
[14:46:07] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[14:56:25] *** Quits: bodiccea (~bodiccea@user/bodiccea) (Quit: Leaving)
[14:59:10] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Quit: Leaving)
[14:59:27] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[15:04:30] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[15:14:54] *** Joins: fef (~thedawn@user/thedawn)
[15:23:47] *** Quits: guido (~weechat@host-79-18-248-149.retail.telecomitalia.it) (Quit: WeeChat 3.4)
[15:24:49] *** Joins: guido (~weechat@host-79-18-248-149.retail.telecomitalia.it)
[15:40:00] *** Joins: newwebdev132 (~newwebdev@78.135.92.22)
[15:40:17] *** Quits: newwebdev13 (~newwebdev@78.135.92.22) (Ping timeout: 240 seconds)
[15:45:27] *** Joins: magla (~gelignite@d536720f.access.ecotel.net)
[15:51:14] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[15:51:35] *** Quits: ThePhilgrim (~ThePhilgr@151.40.115.120) (Remote host closed the connection)
[16:02:55] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[16:04:18] *** Joins: inoas (~ionas@ip-037-201-194-167.um10.pools.vodafone-ip.de)
[16:04:29] *** Joins: exempt (uid500827@id-500827.ilkley.irccloud.com)
[16:07:02] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Remote host closed the connection)
[16:13:58] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[16:26:52] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[16:29:10] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:29:25] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[16:30:31] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:30:48] *** Quits: inoas (~ionas@ip-037-201-194-167.um10.pools.vodafone-ip.de) (Quit: Leaving...)
[16:31:09] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:33:14] *** Joins: irgendwer4711 (~irgendwer@user/irgendwer4711)
[16:33:46] <irgendwer4711> hi, how to fetch last element of Temperatur?  https://pastebin.com/1KQV3Tbe
[16:36:08] <da_wunder> irgendwer4711: https://3v4l.org/75SG1 ?
[16:37:57] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Quit: WeeChat 3.4)
[16:37:59] <irgendwer4711> da_wunder: no :-/
[16:38:33] <varrg> irgendwer4711, common approach is array[count(array)-1], the -1 is because arrays are zero-indexed, i.e the first item is array[0]. Using da_wunder's approach will forward the internal pointer, so it will change the underlying state of the array which may not be desired.
[16:38:43] <da_wunder> irgendwer4711: then explain what you need better, I assumed that you want the last element on that main array
[16:38:55] <varrg> irgendwer4711, first, you need to get a reference to the `data` array
[16:39:04] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[16:39:44] <irgendwer4711> looks to me, that there a 3 data rows in this json.
[16:40:02] <irgendwer4711> I need the last element of the first data row "Temperatur".
[16:40:23] <irgendwer4711> that is "1644756000000,9.883"
[16:40:27] <da_wunder> irgendwer4711: ok
[16:40:41] <varrg> irgendwer4711, you need to iterate the array and find the one with a name equal to Temperatur, for that reference you need to fetch the last item of its `data` entry
[16:41:17] <da_wunder> irgendwer4711: so this one - https://3v4l.org/rj4pR ?
[16:42:11] <da_wunder> or do you want the _last_ element of that `data` on each of those three (3) entries?
[16:42:21] <irgendwer4711> da_wunder: for your last line I got: end() expects parameter 1 to be array
[16:42:45] <varrg> irgendwer4711, your data is a string, encoded as JSON. you need to parse it into a php structure first
[16:43:12] <da_wunder> irgendwer4711: I don't see that on - https://3v4l.org/rj4pR - example, that is the output that want - right?
[16:43:43] <da_wunder> irgendwer4711: note that second parameter on `json_decode` there
[16:44:55] <da_wunder> irgendwer4711: also you could that just by stdClass objects like - https://3v4l.org/775SH
[16:46:27] <irgendwer4711> strange. I fetched that json from a page and put that into a variable. I then used your code.
[16:46:53] <da_wunder> so create 3v4l.org example
[16:46:56] <irgendwer4711> I have php 7.4
[16:46:58] <varrg> irgendwer4711, json is a string, it has no special meaning to php before parsing
[16:48:09] <da_wunder> irgendwer4711: I literally just copied your json string to that 3v4l.org example that I made - I didn't change that - and looks like it's working as expected - right?
[16:48:11] <irgendwer4711> da_wunder: 3v4l does not fetch urls
[16:48:27] <da_wunder> then just copy paste that result to that
[16:49:21] <da_wunder> and that said, most likely you're expecting that result to have something else that it really contains
[16:49:30] <irgendwer4711> how to copy that full listing
[16:50:04] <irgendwer4711> oh chrome only...
[16:50:15] <da_wunder> eg. `vardump(file_get_contents('your_url'));` and then just make that response to variable on 3v4l.org
[16:50:31] <da_wunder> s/vardump/var_dump
[16:50:32] <irgendwer4711> ok 775SH show no error on my machiine
[16:51:19] <irgendwer4711> thats my line: $uni_temp = file_get_contents('https://xxx.net/data_air_heute.php');
[16:51:44] <irgendwer4711> and then used your code with $uni_temp
[16:51:58] <da_wunder> then just var_dump that $uni_temp - and share that with us
[16:52:09] <irgendwer4711> that was the pastebin
[16:52:15] <irgendwer4711> oh ok
[16:52:18] <varrg> irgendwer4711, if the website has an API, consult its documentation on how to use it
[16:53:13] <irgendwer4711> da_wunder: https://pastebin.com/bcsnmFAT
[16:53:19] <da_wunder> irgendwer4711: and if that is what you shared with us with that pastebin - it works when I just pasted that same to that example 3v4l.org example - so there must be something else
[16:53:44] <da_wunder> that JSON string there is cutted
[16:54:12] <irgendwer4711> oh yes
[16:54:35] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@78.84.30.236)
[16:54:44] <irgendwer4711> thats complete: https://pastebin.com/Na071bcz
[16:54:45] <da_wunder> it ends like `,[16447548000` and that is not valid JSON - it's not even showing end of that main string(6217) - so there is your problem
[16:55:17] <irgendwer4711> see above
[16:56:36] <da_wunder> irgendwer4711: still working - https://3v4l.org/uObiV
[16:56:47] *** Quits: ThePhilgrim (~ThePhilgr@151.40.115.120) (Remote host closed the connection)
[16:57:53] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Quit: Leaving)
[16:58:08] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[16:58:13] <irgendwer4711> da_wunder: I dont get it. very strange
[16:58:49] <da_wunder> irgendwer4711: so please share your full code on 3v4l.org - no matter if that doesn't fetch that data on that api
[16:59:36] <irgendwer4711> https://3v4l.org/iCoNv
[16:59:41] <da_wunder> with that we could test that on our own dev machines and see if there is something fishy
[17:01:11] <da_wunder> Warning: file_get_contents(): SSL operation failed with code 1. OpenSSL Error messages: error:1416F086:SSL routines:tls_process_server_certificate:certificate verify failed in /app/foo.php on line 3
[17:01:23] <da_wunder> so you've most likely certificate problem
[17:01:38] <irgendwer4711> not here, I fixed that
[17:01:59] <irgendwer4711> that silly admin broke ssl chain
[17:04:44] <irgendwer4711> you can load this url with firefox
[17:09:15] <irgendwer4711> da_wunder: I got that json
[17:11:19] <da_wunder> look like there is some json syntax error - https://3v4l.org/YiUOO
[17:12:51] <irgendwer4711> jsonformatter.org/json-parser worked
[17:13:26] <da_wunder> dunno - but json_decode fails with that input - so something messy on that part
[17:14:18] <irgendwer4711> :-(
[17:15:27] <irgendwer4711> I used another validator: all ok
[17:17:01] <irgendwer4711> da_wunder: or maybe that data was rewritten in that time
[17:17:42] <da_wunder> there is some extra stuff in that response - string(93) "#0 /app/foo.php(13): json_decode('\xEF\xBB\xBF[{"name":"Te...', NULL, 512, 4194304)
[17:17:47] <da_wunder> bom headers maybe
[17:18:13] <lembron> it is
[17:19:10] <da_wunder> so then just simple - https://3v4l.org/RX3tg
[17:20:45] <da_wunder> or - https://3v4l.org/005hu
[17:21:36] <irgendwer4711> syntax error 20
[17:22:01] *** Quits: bodiccea (~bodiccea@user/bodiccea) (Remote host closed the connection)
[17:22:10] <irgendwer4711> does not like flags, I guess
[17:22:37] <da_wunder> work here just fine
[17:22:38] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[17:23:01] <irgendwer4711> even that page shows an error
[17:23:46] <da_wunder> you need to run that on _your_ computer - 3v4l.org doesn't allow to use curl, etc.
[17:24:27] <da_wunder> just create eg. foo.php and copy+paste that content there and just run `php foo.php´`
[17:24:34] <irgendwer4711> I didt, there is an syntax error:  syntax error, unexpected ':', expecting ')' in /var/www/temp/uni.php on line 20
[17:25:14] <da_wunder> oh you're not using php 8+
[17:25:20] <irgendwer4711> right. 7.4
[17:25:45] <da_wunder> then this - https://3v4l.org/iaMM2
[17:26:24] <irgendwer4711> looks good!
[17:27:20] <irgendwer4711> and maybe you could tell me you to get that float only?
[17:29:47] <da_wunder> you know how array access works? that example is already using that
[17:30:46] <da_wunder> also note that code is quite error prone
[17:31:42] *** Joins: thiras (~thiras@user/thiras)
[17:32:06] <irgendwer4711> which kind of erros
[17:32:47] <da_wunder> eg. that code _expected_ that json is always an array, and it has that 0 index there, and that 0 index contains `data` property and if you add that array access to get that float value there too, then that code also expects that `data` is always an array and it has index 1 set
[17:33:03] *** Quits: kristijonas_ (~kristijon@78-56-32-39.static.zebra.lt) (Remote host closed the connection)
[17:33:03] *** Quits: kristijonas (~kristijon@78-56-32-39.static.zebra.lt) (Remote host closed the connection)
[17:33:27] *** Joins: kristijonas (~kristijon@78-56-32-39.static.zebra.lt)
[17:33:27] *** Joins: kristijonas_ (~kristijon@78-56-32-39.static.zebra.lt)
[17:33:36] <irgendwer4711> you meant format should change...
[17:33:49] <da_wunder> no
[17:34:27] <da_wunder> I mean that your code should make necessary checks to that data before accessing that information that _you_ need there
[17:35:16] <irgendwer4711> mhh, I shouly only print that temperatur.
[17:35:20] <irgendwer4711> *it
[17:35:43] <da_wunder> and before that you _really_ should checks those points that I mentioned
[17:36:15] <da_wunder> or not - and just "trust" that API is always sending that data in that format - which I would not recommend
[17:36:26] <irgendwer4711> ok
[17:36:28] <irgendwer4711> thx
[17:36:35] <da_wunder> unless there is some api documentation for that
[17:37:09] <da_wunder> eg. that code will not work if that `data` property is renamed to `dataFoo` and so on
[17:37:52] <da_wunder> and what if there is no data at all? meaning like the response is just `[]` - empty array - now that code is assuming that there is at least _one_ element there
[17:38:44] <irgendwer4711> that not a problem
[17:39:50] <da_wunder> it's a problem - you're assuming that API is always sending not empty array - can you be 100% sure about that?
[17:40:32] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[17:40:36] <irgendwer4711> than there is no temperature to show. thats not very bad
[17:40:57] <da_wunder> but then your code will fail to fatal error - that is the point here
[17:40:58] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Ping timeout: 272 seconds)
[17:41:01] *** Joins: WishBoy (~WishBoy@user/wishboy)
[17:41:37] <irgendwer4711> I know. I look at that then ,-)
[17:42:11] <irgendwer4711> oh btw that code should run a nuclear missle :-P
[17:42:36] <da_wunder> that is something that I would recommend you to do - you could easily add those checks there now - and could be sure that it won't fail if/when something like that happens
[17:42:51] <da_wunder> + you could easily write tests for each of those use cases
[17:47:27] <irgendwer4711> yes maybe: https://stackoverflow.com/questions/6041741/fastest-way-to-check-if-a-string-is-json-in-php
[17:48:21] <da_wunder> that json thing is already covered - if that input is not json, or it's invalid json you will get that die('error'); with that exception message
[17:49:35] <da_wunder> the point is that you're _assuming_ that json data itself contains _certain_ elements in _assumed_ structure
[17:51:38] <irgendwer4711> I swear, I will come back here, if that happend ;-)
[17:52:31] <da_wunder> why don't you do implement those simple checks now? that doesn't make sense to me
[17:53:26] <da_wunder> and most likely I would just say you "I already said what you need to check" if/when you have that issue
[17:53:39] <da_wunder> making those checks should not take more than couple of minutes
[17:53:56] <irgendwer4711> because I have to go. bye
[17:54:01] <da_wunder> writing proper tests for those another couple of minutes
[17:54:18] *** Parts: irgendwer4711 (~irgendwer@user/irgendwer4711) ()
[17:58:42] *** Quits: guido (~weechat@host-79-18-248-149.retail.telecomitalia.it) (Ping timeout: 272 seconds)
[18:00:22] *** Joins: guido (~weechat@host-87-6-250-63.retail.telecomitalia.it)
[18:11:49] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[18:22:46] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Ping timeout: 272 seconds)
[18:23:54] *** Quits: exempt (uid500827@id-500827.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[18:55:08] *** Joins: filename (~kilitary@188.242.105.134)
[19:02:28] *** Joins: ms49434 (~ms49434@user/ms49434)
[19:03:03] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@78.84.30.236) (Quit: Connection closed)
[19:30:52] *** Quits: tercaL (~tercaL@user/tercal) (Quit: enter the Tekken!)
[19:37:37] *** Joins: Rockwood (~Rocky@user/rocky)
[19:38:18] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[19:40:11] *** Parts: ThePhilgrim (~ThePhilgr@151.40.115.120) ()
[19:40:34] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 256 seconds)
[19:55:14] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Ping timeout: 272 seconds)
[19:56:06] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[20:03:39] *** Joins: ferdna (~ferdna@user/ferdna)
[20:09:26] *** Quits: Junxter (~Junxter@222.95.164.193) (Read error: Connection reset by peer)
[20:31:09] *** Joins: lord_daemon (~lord_daem@187.36.203.244)
[20:42:20] *** Quits: olle (~olle@i5E866D96.versanet.de) (Ping timeout: 256 seconds)
[20:47:05] *** Quits: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi) (Read error: No route to host)
[21:05:06] *** Joins: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi)
[21:21:20] *** Quits: filename (~kilitary@188.242.105.134) (Quit: entering irc ...)
[21:26:37] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 256 seconds)
[21:30:57] *** Joins: filename (~kilitary@185.193.143.131)
[21:39:42] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[21:43:34] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[21:44:06] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 256 seconds)
[21:44:43] *** Quits: filename (~kilitary@185.193.143.131) (Quit: entering irc ...)
[21:49:56] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7)
[21:50:03] *** Joins: DrowningElysium (uid190788@user/drowningelysium)
[21:50:22] *** Joins: filename (~kilitary@185.193.143.131)
[21:57:41] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[22:25:19] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 250 seconds)
[22:30:17] *** Joins: stenno (~stenno@user/stenno)
[22:41:46] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[22:57:19] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7) (Remote host closed the connection)
[22:57:50] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7)
[23:01:57] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7) (Ping timeout: 240 seconds)
[23:06:42] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7)
[23:17:02] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Ping timeout: 256 seconds)
[23:20:47] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[23:20:58] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:22:40] *** Joins: ianthrive (~ianthrive@166.70.191.9)
[23:23:50] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[23:29:09] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7) (Remote host closed the connection)
[23:29:41] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7)
[23:32:45] *** Joins: Flikker (~mattnospa@pool-173-49-228-108.phlapa.fios.verizon.net)
[23:34:13] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7) (Ping timeout: 250 seconds)
[23:40:28] *** Quits: Flikker (~mattnospa@pool-173-49-228-108.phlapa.fios.verizon.net) (Remote host closed the connection)
[23:44:07] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[23:44:30] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Ping timeout: 272 seconds)
[23:44:38] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Ping timeout: 250 seconds)
[23:47:57] *** Quits: shailangsa (~shailangs@host109-159-108-227.range109-159.btcentralplus.com) (Ping timeout: 256 seconds)
